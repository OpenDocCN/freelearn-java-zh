["```java\n        <dependency>\n            <groupId>javax</groupId>\n            <artifactId>javaee-api</artifactId>\n            <version>8.0</version>\n            <scope>provided</scope>\n        </dependency>\n```", "```java\npackage com.eldermoraes.ch09.async.result;\n\n/**\n *\n * @author eldermoraes\n */\npublic class User {\n\n    private Long id;\n    private String name;\n\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public User(Long id, String name) {\n        this.id = id;\n        this.name = name;\n    }\n\n    @Override\n    public String toString() {\n        return \"User{\" + \"id=\" + id + \", name=\"\n                     + name + '}';\n    }\n}\n```", "```java\n@Stateless\n@Path(\"userService\")\npublic class UserService {\n\n    @GET\n    public Response userService(){\n        try {\n            TimeUnit.SECONDS.sleep(5);\n            long id = new Date().getTime();\n            return Response.ok(new User(id, \"User \" + id)).build();\n        } catch (InterruptedException ex) {\n            return \n            Response.status(Response.Status.INTERNAL_SERVER_ERROR)\n            .entity(ex).build();\n        }\n    }\n}\n```", "```java\n@Stateless\npublic class AsyncResultClient {\n\n    private Client client;\n    private WebTarget target;\n\n    @PostConstruct\n    public void init() {\n        client = ClientBuilder.newBuilder()\n                .readTimeout(10, TimeUnit.SECONDS)\n                .connectTimeout(10, TimeUnit.SECONDS)\n                .build();\n        target = client.target(\"http://localhost:8080/\n                 ch09-async-result/userService\");\n    }\n\n    @PreDestroy\n    public void destroy(){\n        client.close();\n    }\n\n    public CompletionStage<Response> getResult(){\n        return \n        target.request(MediaType.APPLICATION_JSON).rx().get();\n    }\n\n}\n```", "```java\n@Stateless\n@Path(\"asyncService\")\npublic class AsyncService {\n\n    @Inject\n    private AsyncResultClient client;\n\n    @GET\n    public void asyncService(@Suspended AsyncResponse response)\n    {\n        try{\n            client.getResult().thenApply(this::readResponse)\n            .thenAccept(response::resume);\n        } catch(Exception e){\n            response.resume(Response.status(Response.Status.\n            INTERNAL_SERVER_ERROR).entity(e).build());\n        }\n    }\n\n    private String readResponse(Response response) {\n        return response.readEntity(String.class);\n    }\n}\n```", "```java\nreturn Response.ok(new User(id, \"User \" + id)).build();\n```", "```java\n    public CompletionStage<Response> getResult(){\n        return target.request(MediaType.APPLICATION_JSON).rx().get();\n    }\n```", "```java\n    @Inject\n    private AsyncResultClient client;\n```", "```java\n    @GET\n    public void asyncService(@Suspended AsyncResponse response) {\n        client.getResult().thenApply(this::readResponse)\n        .thenAccept(response::resume);\n    }\n```", "```java\nclient.getResult().thenApply(this::readResponse)\n.thenAccept(response::resume);\n```", "```java\n    private String readResponse(Response response) {\n        return response.readEntity(String.class);\n    }\n```", "```java\n        client.getResult()\n                .thenApply(r -> readResponse(r))\n                .thenAccept(s -> response.resume(s));\n```", "```java\n        <dependency>\n            <groupId>javax</groupId>\n            <artifactId>javaee-api</artifactId>\n            <version>8.0</version>\n            <scope>provided</scope>\n        </dependency>\n```", "```java\npublic class User {\n\n    private Long id;\n    private String name;\n\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public User(Long id, String name) {\n        this.id = id;\n        this.name = name;\n    }\n\n    @Override\n    public String toString() {\n        return \"User{\" + \"id=\" + id + \",\n                     name=\" + name + '}';\n    } \n}\n```", "```java\n@Stateless\npublic class UserBean {\n\n    public User getUser(){\n        try {\n            TimeUnit.SECONDS.sleep(5);\n            long id = new Date().getTime();\n            return new User(id, \"User \" + id);\n        } catch (InterruptedException ex) {\n            System.err.println(ex.getMessage());\n            long id = new Date().getTime();\n            return new User(id, \"Error \" + id);\n        }\n    }\n}\n```", "```java\npublic class AsyncTask implements Callable<User> {\n\n    private UserTransaction userTransaction;\n    private UserBean userBean;\n\n    @Override\n    public User call() throws Exception {\n        performLookups();\n        try {\n            userTransaction.begin();\n            User user = userBean.getUser();\n            userTransaction.commit();\n            return user;\n        } catch (IllegalStateException | SecurityException | \n          HeuristicMixedException | HeuristicRollbackException | \n          NotSupportedException | RollbackException | \n          SystemException e) {\n            userTransaction.rollback();\n            return null;\n        }\n    }\n\n    private void performLookups() throws NamingException{\n        userBean = CDI.current().select(UserBean.class).get();\n        userTransaction = CDI.current()\n        .select(UserTransaction.class).get();\n    }    \n}\n```", "```java\n@Path(\"asyncService\")\n@RequestScoped\npublic class AsyncService {\n\n    private AsyncTask asyncTask;\n\n    @Resource(name = \"LocalManagedExecutorService\")\n    private ManagedExecutorService executor; \n\n    @PostConstruct\n    public void init(){\n        asyncTask = new AsyncTask();\n    }\n\n    @GET\n    public void asyncService(@Suspended AsyncResponse response){\n\n        Future<User> result = executor.submit(asyncTask);\n\n        while(!result.isDone()){\n            try {\n                TimeUnit.SECONDS.sleep(1);\n            } catch (InterruptedException ex) {\n                System.err.println(ex.getMessage());\n            }\n        }\n\n        try {\n            response.resume(Response.ok(result.get()).build());\n        } catch (InterruptedException | ExecutionException ex) {\n            System.err.println(ex.getMessage());\n            response.resume(Response.status(Response\n            .Status.INTERNAL_SERVER_ERROR)\n            .entity(ex.getMessage()).build());\n        }\n\n    }\n}\n```", "```java\n    private void performLookups() throws NamingException{\n        Context ctx = new InitialContext();\n        userTransaction = (UserTransaction) \n        ctx.lookup(\"java:comp/UserTransaction\");\n        userBean = (UserBean) ctx.lookup(\"java:global/\n        ch09-async-transaction/UserBean\");\n    }\n```", "```java\n    @Override\n    public User call() throws Exception {\n        performLookups();\n        try {\n            userTransaction.begin();\n            User user = userBean.getUser();\n            userTransaction.commit();\n            return user;\n        } catch (IllegalStateException | SecurityException | \n                HeuristicMixedException | HeuristicRollbackException \n                | NotSupportedException | RollbackException | \n                SystemException e) {\n            userTransaction.rollback();\n            return null;\n        }\n    }\n```", "```java\n            userTransaction.begin();\n            User user = userBean.getUser();\n            userTransaction.commit();\n```", "```java\n        } catch (IllegalStateException | SecurityException | \n           HeuristicMixedException | HeuristicRollbackException \n           | NotSupportedException | RollbackException | \n           SystemException e) {\n            userTransaction.rollback();\n            return null;\n        }\n```", "```java\n    private AsyncTask asyncTask;\n\n    @Resource(name = \"LocalManagedExecutorService\")\n    private ManagedExecutorService executor; \n\n    @PostConstruct\n    public void init(){\n        asyncTask = new AsyncTask();\n    }\n```", "```java\n    @GET\n    public void asyncService(@Suspended AsyncResponse response){\n\n        Future<User> result = executor.submit(asyncTask);\n\n        while(!result.isDone()){\n            try {\n                TimeUnit.SECONDS.sleep(1);\n            } catch (InterruptedException ex) {\n                System.err.println(ex.getMessage());\n            }\n        }\n\n        try {\n            response.resume(Response.ok(result.get()).build());\n        } catch (InterruptedException | ExecutionException ex) {\n            System.err.println(ex.getMessage());\n            response.resume(Response.status(Response.\n            Status.INTERNAL_SERVER_ERROR)\n            .entity(ex.getMessage()).build());\n        }\n\n    }\n```", "```java\nFuture<User> result = executor.submit(asyncTask);\n```", "```java\n        while(!result.isDone()){\n            try {\n                TimeUnit.SECONDS.sleep(1);\n            } catch (InterruptedException ex) {\n                System.err.println(ex.getMessage());\n            }\n        }\n```", "```java\nresponse.resume(Response.ok(result.get()).build());\n```", "```java\n        <dependency>\n            <groupId>javax</groupId>\n            <artifactId>javaee-api</artifactId>\n            <version>8.0</version>\n            <scope>provided</scope>\n        </dependency>\n```", "```java\npublic class User {\n\n    private Long id;\n    private String name;\n\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public User(Long id, String name) {\n        this.id = id;\n        this.name = name;\n    }\n\n    @Override\n    public String toString() {\n        return \"User{\" + \"id=\" + id + \", \n        name=\" + name + '}';\n    }\n}\n```", "```java\npublic class UserBean {\n\n    public User getUser(){\n        try {\n            TimeUnit.SECONDS.sleep(5);\n            long id = new Date().getTime();\n            return new User(id, \"User \" + id);\n        } catch (InterruptedException ex) {\n            long id = new Date().getTime();\n            return new User(id, \"Error \" + id);\n        }\n    }\n}\n```", "```java\n@Stateless\npublic class AsyncTask implements Callable<User>, ManagedTaskListener {\n\n    private final long instantiationMili = new Date().getTime();\n\n    private static final Logger LOG = Logger.getAnonymousLogger();\n\n    @Override\n    public User call() throws Exception {\n        return new UserBean().getUser();\n    }\n\n    @Override\n    public void taskSubmitted(Future<?> future, \n    ManagedExecutorService mes, Object o) {\n        long mili = new Date().getTime();\n        LOG.log(Level.INFO, \"taskSubmitted: {0} - \n        Miliseconds since instantiation: {1}\",\n        new Object[]{future, mili - instantiationMili});\n    }\n\n    @Override\n    public void taskAborted(Future<?> future, \n    ManagedExecutorService mes, Object o, Throwable thrwbl) \n    {\n        long mili = new Date().getTime();\n        LOG.log(Level.INFO, \"taskAborted: {0} - \n        Miliseconds since instantiation: {1}\", \n        new Object[]{future, mili - instantiationMili});\n    }\n\n    @Override\n    public void taskDone(Future<?> future, \n    ManagedExecutorService mes, Object o, \n    Throwable thrwbl) {\n        long mili = new Date().getTime();\n        LOG.log(Level.INFO, \"taskDone: {0} -\n        Miliseconds since instantiation: {1}\", \n        new Object[]{future, mili - instantiationMili});\n    }\n\n    @Override\n    public void taskStarting(Future<?> future, \n    ManagedExecutorService mes, Object o) {\n        long mili = new Date().getTime();\n        LOG.log(Level.INFO, \"taskStarting: {0} - \n        Miliseconds since instantiation: {1}\", \n        new Object[]{future, mili - instantiationMili});\n    }\n\n}\n```", "```java\n@Stateless\n@Path(\"asyncService\")\npublic class AsyncService {\n\n    @Resource\n    private ManagedExecutorService executor;\n\n    @GET\n    public void asyncService(@Suspended AsyncResponse response) {\n        int i = 0;\n\n        List<User> usersFound = new ArrayList<>();\n        while (i < 4) {\n            Future<User> result = executor.submit(new AsyncTask());\n\n            while (!result.isDone()) {\n                try {\n                    TimeUnit.SECONDS.sleep(1);\n                } catch (InterruptedException ex) {\n                    System.err.println(ex.getMessage());\n                }\n            }\n\n            try {\n                usersFound.add(result.get());\n            } catch (InterruptedException | ExecutionException ex) {\n                System.err.println(ex.getMessage());\n            }\n\n            i++;\n        }\n\n        response.resume(Response.ok(usersFound).build());\n    }\n\n}\n```", "```java\n    @Override\n    public void taskSubmitted(Future<?> future, \n    ManagedExecutorService mes, Object o) {\n        long mili = new Date().getTime();\n        LOG.log(Level.INFO, \"taskSubmitted: {0} - \n        Miliseconds since instantiation: {1}\", \n        new Object[]{future, mili - instantiationMili});\n    }\n\n    @Override\n    public void taskAborted(Future<?> future, \n    ManagedExecutorService mes, Object o, Throwable thrwbl) {\n        long mili = new Date().getTime();\n        LOG.log(Level.INFO, \"taskAborted: {0} - \n        Miliseconds since instantiation: {1}\", \n        new Object[]{future, mili - instantiationMili});\n    }\n\n    @Override\n    public void taskDone(Future<?> future, \n    ManagedExecutorService mes, Object o, Throwable thrwbl) {\n        long mili = new Date().getTime();\n        LOG.log(Level.INFO, \"taskDone: {0} - \n        Miliseconds since instantiation: {1}\", \n        new Object[]{future, mili - instantiationMili});\n    }\n\n    @Override\n    public void taskStarting(Future<?> future, \n    ManagedExecutorService mes, Object o) {\n        long mili = new Date().getTime();\n        LOG.log(Level.INFO, \"taskStarting: {0} - \n        Miliseconds since instantiation: {1}\", \n        new Object[]{future, mili - instantiationMili});\n    }\n```", "```java\n    @Resource\n    private ManagedExecutorService executor;\n```", "```java\n        List<User> usersFound = new ArrayList<>();\n        while (i < 4) {\n            Future<User> result = executor.submit(new AsyncTask());\n\n            while (!result.isDone()) {\n                try {\n                    TimeUnit.SECONDS.sleep(1);\n                } catch (InterruptedException ex) {\n                    System.err.println(ex.getMessage());\n                }\n            }\n\n            try {\n                usersFound.add(result.get());\n            } catch (InterruptedException | ExecutionException ex) {\n                System.err.println(ex.getMessage());\n            }\n\n            i++;\n        }\n```", "```java\nresponse.resume(Response.ok(usersFound).build());\n```", "```java\n        <dependency>\n            <groupId>javax</groupId>\n            <artifactId>javaee-api</artifactId>\n            <version>8.0</version>\n            <scope>provided</scope>\n        </dependency>\n```", "```java\npublic class User {\n\n    private Long id;\n    private String name;\n\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public User(Long id, String name) {\n        this.id = id;\n        this.name = name;\n    }\n\n    @Override\n    public String toString() {\n        return \"User{\" + \"id=\" + id + \",\n        name=\" + name + '}';\n    } \n}\n```", "```java\n@Stateless\npublic class UserBean {\n\n    @GET\n    public User getUser(){\n        try {\n            TimeUnit.SECONDS.sleep(5);\n            long id = new Date().getTime();\n            return new User(id, \"User \" + id);\n        } catch (InterruptedException ex) {\n            long id = new Date().getTime();\n            return new User(id, \"Error \" + id);\n        }\n    }\n}\n```", "```java\n@Stateless\n@Path(\"asyncService\")\npublic class AsyncService {\n\n    @Inject\n    private UserBean userBean;\n\n    @Resource(name = \"LocalManagedThreadFactory\")\n    private ManagedThreadFactory factory;\n\n    @GET\n    public void asyncService(@Suspended AsyncResponse \n    response) {\n        Thread thread = factory.newThread(() -> {\n            response.resume(Response.ok(userBean\n            .getUser()).build());\n        });\n\n        thread.setName(\"Managed Async Task\");\n        thread.setPriority(Thread.MIN_PRIORITY);\n        thread.start();\n    }\n\n}\n```", "```java\n    @Resource(name = \"LocalManagedThreadFactory\")\n    private ManagedThreadFactory factory;\n```", "```java\n        Thread thread = factory.newThread(() -> {\n            response.resume(Response.ok(userBean.getUser()).build());\n        });\n```", "```java\n        thread.setName(\"Managed Async Task\");\n        thread.setPriority(Thread.MIN_PRIORITY);\n```", "```java\n        thread.start();\n```", "```java\n        <dependency>\n            <groupId>javax</groupId>\n            <artifactId>javaee-api</artifactId>\n            <version>8.0</version>\n            <scope>provided</scope>\n        </dependency>\n```", "```java\npublic class User {\n\n    private Long id;\n    private String name;\n\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public User(Long id, String name) {\n        this.id = id;\n        this.name = name;\n    }\n\n    @Override\n    public String toString() {\n        return \"User{\" + \"id=\" + id + \",\n        name=\" + name + '}';\n    }\n}\n```", "```java\npublic class UserBean {\n\n    public User getUser(){\n        try {\n            TimeUnit.SECONDS.sleep(5);\n            long id = new Date().getTime();\n            return new User(id, \"User \" + id);\n        } catch (InterruptedException ex) {\n            long id = new Date().getTime();\n            return new User(id, \"Error \" + id);\n        }\n    }\n}\n```", "```java\npublic class AsyncTask implements Callable<User> {\n\n    private final UserBean userBean = \n    CDI.current().select(UserBean.class).get();\n\n    @Override\n    public User call() throws Exception {\n        return userBean.getUser();\n    }\n}\n```", "```java\n@Stateless\n@Path(\"asyncService\")\npublic class AsyncService {\n\n    @Resource(name = \"LocalManagedScheduledExecutorService\")\n    private ManagedScheduledExecutorService executor;\n\n    @GET\n    public void asyncService(@Suspended AsyncResponse response) {\n\n        ScheduledFuture<User> result = executor.schedule\n        (new AsyncTask(), 5, TimeUnit.SECONDS);\n\n        while (!result.isDone()) {\n            try {\n                TimeUnit.SECONDS.sleep(1);\n            } catch (InterruptedException ex) {\n                System.err.println(ex.getMessage());\n            }\n        }\n\n        try {\n            response.resume(Response.ok(result.get()).build());\n        } catch (InterruptedException | ExecutionException ex) {\n            System.err.println(ex.getMessage());\n            response.resume(Response.status(Response.Status\n           .INTERNAL_SERVER_ERROR).entity(ex.getMessage())\n           .build());\n        }\n\n    }\n\n}\n```", "```java\n    @Resource(name = \"LocalManagedScheduledExecutorService\")\n    private ManagedScheduledExecutorService executor;\n```", "```java\nScheduledFuture<User> result = executor.schedule(new AsyncTask(), \n5, TimeUnit.SECONDS);\n```", "```java\n        while (!result.isDone()) {\n            try {\n                TimeUnit.SECONDS.sleep(1);\n            } catch (InterruptedException ex) {\n                System.err.println(ex.getMessage());\n            }\n        }\n```", "```java\nresponse.resume(Response.ok(result.get()).build());\n```", "```java\n        <dependency>\n            <groupId>javax</groupId>\n            <artifactId>javaee-api</artifactId>\n            <version>8.0</version>\n            <scope>provided</scope>\n        </dependency>\n```", "```java\npublic class User implements Serializable{\n\n    private Long id;\n    private String name;\n\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public User(Long id, String name) {\n        this.id = id;\n        this.name = name;\n    }\n\n    @Override\n    public String toString() {\n        return \"User{\" + \"id=\" + id + \", \n        name=\" + name + '}';\n    }\n}\n```", "```java\npublic class UserBean {\n\n    public User getUser(){\n        try {\n            TimeUnit.SECONDS.sleep(5);\n            long id = new Date().getTime();\n            return new User(id, \"User \" + id);\n        } catch (InterruptedException ex) {\n            long id = new Date().getTime();\n            return new User(id, \"Error \" + id);\n        }\n    }\n}\n```", "```java\n@Stateless\npublic class AsyncTask implements Callable<User>{\n\n    @Override\n    public User call() throws Exception {\n        return new UserBean().getUser();\n    }\n\n}\n```", "```java\n@Singleton\npublic class ExecutorProxy {\n\n    @Resource(name = \"LocalManagedThreadFactory\")\n    private ManagedThreadFactory factory;\n\n    @Resource(name = \"LocalContextService\")\n    private ContextService context;\n\n    private ExecutorService executor;\n\n    @PostConstruct\n    public void init(){\n        executor = new ThreadPoolExecutor(1, 5, 10, \n        TimeUnit.SECONDS, new ArrayBlockingQueue<>(5),\n        factory);\n    }\n\n    public Future<User> submit(Callable<User> task){\n        Callable<User> ctxProxy = \n        context.createContextualProxy(task, Callable.class);\n        return executor.submit(ctxProxy);\n    }\n}\n```", "```java\n@Stateless\n@Path(\"asyncService\")\npublic class AsyncService {\n\n    @Inject\n    private ExecutorProxy executor;\n\n    @GET\n    public void asyncService(@Suspended AsyncResponse response) \n    {\n        Future<User> result = executor.submit(new AsyncTask());\n        response.resume(Response.ok(result).build());\n    }\n\n}\n```", "```java\n@Singleton\n```", "```java\n    @Resource(name = \"LocalManagedThreadFactory\")\n    private ManagedThreadFactory factory;\n\n    @Resource(name = \"LocalContextService\")\n    private ContextService context;\n```", "```java\n    private ExecutorService executor;\n\n    @PostConstruct\n    public void init(){\n        executor = new ThreadPoolExecutor(1, 5, 10,\n        TimeUnit.SECONDS, new ArrayBlockingQueue<>(5), factory);\n    }\n```", "```java\n    public Future<User> submit(Callable<User> task){\n        Callable<User> ctxProxy = context.createContextualProxy(task, \n        Callable.class);\n        return executor.submit(ctxProxy);\n    }\n```", "```java\n    @Inject\n    private ExecutorProxy executor;\n```", "```java\n    @GET\n    public void asyncService(@Suspended AsyncResponse response) {\n        Future<User> result = executor.submit(new AsyncTask());\n        response.resume(Response.ok(result).build());\n    }\n```"]