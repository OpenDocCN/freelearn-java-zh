["```java\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n//1 \nname: nfs\nlabels: \n  zone: 5\n//2 \nspec:\n   capacity:\n      storage: 100Mi\n   accessModes:\n   - ReadWriteMany\n   nfs:\n   server: 10.244.1.4\n   path: \"/exports\"\n```", "```java\nkind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: myclaim\nspec:\n  accessModes:\n    - ReadWriteMany\n  resources:\n    requests:\n      storage: 10Mi\n  selector:\n    matchLabels:\n      zone: 5\n```", "```java\napiVersion: v1\nmetadata:\n  name: mypod\nspec:\n  containers:\n    - name: my-container\n      image: tadamski/container\n      volumeMounts:\n      - mountPath: \"/mount/storage1\"\n        name: pod\n  volumes:\n    - name: mypod\n      persistentVolumeClaim:\n        claimName: myclaim\n```", "```java\noc delete all -l app=catalog-service\n```", "```java\ncd\nvi items.sql\n```", "```java\nDROP TABLE IF EXISTS ITEM;\n\nCREATE TABLE ITEM (id serial PRIMARY KEY, item_id varchar, name varchar, description varchar, quantity smallint);\n\nINSERT INTO ITEM(item_id, name, description, quantity) VALUES ('dbf67f4d-f1c9-4fd4-96a8-65ee1a22b9ff',  'turtle', 'Slow friendly reptile. Let your busy self see how it spends 100 years of his life laying on sand and swimming.', 5);\nINSERT INTO ITEM(item_id, name, description, quantity) VALUES ('fc7ee3ea-8f82-4144-bcc8-9a71f4d871bd', 'hamster', 'Energetic rodent - great as a first pet. Will be your only inmate that takes his fitness training serviously.', 10);\nINSERT INTO ITEM(item_id, name, description, quantity) VALUES ('725dfad2-0b4d-455c-9385-b46c9f356e9b','goldfish', 'With its beauty it will be the decoration of you aquarium. Likes gourmet fish feed and postmodern poetry.', 3);\nINSERT INTO ITEM(item_id, name, description, quantity) VALUES ('a2aa1ca7-add8-4aae-b361-b7f92d82c3f5', 'lion', 'Loves playing the tag and cuddling with other animals and people.', 9);\n```", "```java\npsql -U catalog catalogdb < catalog.sql\n```", "```java\noc describe dc/catalogdb\n\n```", "```java\noc describe pvc/catalogdb\n\n```", "```java\n(...)\n\n    <dependencies>\n        (...)\n        <dependency>\n            <groupId>org.wildfly.swarm</groupId>\n            <artifactId>jpa</artifactId>\n            <version>${version.wildfly.swarm}</version>\n        </dependency>\n <!-- 1 -->\n <dependency>\n            <groupId>org.postgresql</groupId>\n            <artifactId>postgresql</artifactId>\n            <version>${version.postgresql}</version>\n        </dependency> \n    </dependencies>\n\n(...)\n```", "```java\nswarm:\n  datasources:\n    data-sources:\n      CatalogDS:\n       driver-name: postgresql\n       connection-url: jdbc:postgresql://catalogdb.petstore.svc/catalogdb\n       user-name: catalog\n      password: catalog\n    jdbc-drivers:\n      postgresql:\n        driver-class-name: org.postgresql.Driver\n        xa-datasource-name: org.postgresql.xa.PGXADataSource\n        driver-module-name: org.postgresql.jdbc\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<persistence\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        version=\"2.1\"\n        xmlns=\"http://xmlns.jcp.org/xml/ns/persistence\"\n        xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd\">\n    <persistence-unit name=\"CatalogPU\" transaction-type=\"JTA\">\n        <jta-data-source>java:jboss/datasources/CatalogDS</jta-data-source>\n    </persistence-unit>\n</persistence>\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module xmlns=\"urn:jboss:module:1.5\" name=\"org.postgresql.jdbc\">\n\n  <resources>\n    <artifact name=\"org.postgresql:postgresql:${version.postgresql}\"/>\n  </resources>\n  <dependencies>\n    <module name=\"javax.api\"/>\n    <module name=\"javax.transaction.api\"/>\n  </dependencies>\n</module>\n```", "```java\noc new-app wildflyswarm-10-centos7~https://github.com/PacktPublishing/Hands-On-Cloud-Development-with-WildFly.git --context-dir=chapter7/catalog-service-openshift-postgresql/ --name=catalog-service\n\n```", "```java\npackage org.packt.swarm.petstore.catalog;\n\nimport org.packt.swarm.petstore.catalog.model.Item;\n\nimport javax.enterprise.context.ApplicationScoped;\nimport javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\nimport javax.transaction.Transactional;\nimport java.util.List;\nimport java.util.UUID;\n\n@ApplicationScoped\npublic class CatalogService {\n\n    @PersistenceContext(unitName = \"CatalogPU\")\n    private EntityManager em;\n\n    public Item searchById(String itemId) {\n        return em.createNamedQuery(\"Item.findById\", Item.class).setParameter(\"itemId\", itemId).getSingleResult();\n    }\n\n //1\n @Transactional\n    public void add(Item item){\n        //2\n item.setItemId(UUID.randomUUID().toString());\n        em.persist(item);\n    }\n\n //3\n public List<Item> getAll() {\n return em.createNamedQuery(\"Item.findAll\", Item.class).getResultList();\n    }\n\n}\n```", "```java\n(...)\n\n@Entity\n@Table(name = \"item\")\n@NamedQueries({\n        @NamedQuery(name=\"Item.findById\",\n                query=\"SELECT i FROM Item i WHERE i.itemId = :itemId\"),\n @NamedQuery(name=\"Item.findAll\",\n                query=\"SELECT i FROM Item i\")\n})\npublic class Item {\n(...)\n```", "```java\npackage org.packt.swarm.petstore.catalog;\n\nimport org.packt.swarm.petstore.catalog.model.Item;\n\nimport javax.inject.Inject;\nimport javax.ws.rs.Consumes;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.POST;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.PathParam;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\nimport javax.ws.rs.core.Response;\nimport java.util.List;\n\n@Path(\"/\")\npublic class CatalogResource {\n\n    @Inject\n    private CatalogService catalogService;\n\n    @GET\n    @Path(\"item/{itemId}\")\n    @Produces(MediaType.APPLICATION_JSON)\n    public Response searchById(@PathParam(\"itemId\") String itemId) {\n        try {\n            Item item = catalogService.searchById(itemId);\n            return Response.ok(item).build();\n        } catch (Exception e) {\n            e.printStackTrace();\n            return Response.status(Response.Status.BAD_REQUEST).entity(e.getMessage()).build();\n        }\n    }\n\n //1\n @POST\n    @Path(\"item\")\n    //2\n @Produces(MediaType.APPLICATION_JSON)\n    //3\n @Consumes(MediaType.APPLICATION_JSON)\n public Response addNew(Item item) {\n try {\n catalogService.add(item);\n            return Response.ok(item).build();\n        } catch (Exception e) {\n return Response.status(Response.Status.BAD_REQUEST).entity(e.getMessage()).build();\n        }\n }\n\n //2\n @GET\n    @Path(\"item\")\n @Produces(MediaType.APPLICATION_JSON)\n @Consumes(MediaType.APPLICATION_JSON)\n public Response getAll() {\n try {\n List<Item> item = catalogService.getAll();\n            return Response.ok(item).build();\n        } catch (Exception e) {\n return Response.status(Response.Status.BAD_REQUEST).entity(e.getMessage()).build();\n        }\n }\n\n}\n```"]