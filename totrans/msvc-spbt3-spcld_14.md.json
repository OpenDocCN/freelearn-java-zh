["```java\ntraceparent:\"00-2425f26083814f66c985c717a761e810-fbec8704028cfb20-01\" \n```", "```java\nX-B3-TraceId:\"64436ea679e8eb6e6fa028bb3459e703\"\nX-B3-SpanId:\"120678270898ddd5\"\nX-B3-ParentSpanId:\"3c431d3d01987c22\"\nX-B3-Sampled:\"1\" \n```", "```java\nimplementation 'io.micrometer:micrometer-tracing-bridge-otel'\nimplementation 'io.opentelemetry:opentelemetry-exporter-zipkin' \n```", "```java\nimplementation 'net.ttddyy.observation:datasource-micrometer-spring-boot:1.0.0' \n```", "```java\nmanagement.zipkin.tracing.endpoint: http://zipkin:9411/api/v2/spans \n```", "```java\nmanagement.tracing.sampling.probability: 1.0 \n```", "```java\nlogging.pattern.level: \"%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]\" \n```", "```java\n2023-04-22T14:02:07.417Z  INFO [product-composite,01234,56789] \n```", "```java\n se.magnus: INFO \n```", "```java\norg.springframework.web.server.adapter.HttpWebHandlerAdapter: INFO \n```", "```java\n zipkin:\n    image: openzipkin/zipkin:2.24.0\n    restart: always\n    mem_limit: 1024m\n    environment:\n      - STORAGE_TYPE=mem\n    ports:\n      - 9411:9411 \n```", "```java\npublic static void main(String[] args) {\n  Hooks.enableAutomaticContextPropagation();\n  SpringApplication.run(ProductCompositeServiceApplication.class, args);\n} \n```", "```java\n @Bean\n  @LoadBalanced\n  public WebClient.Builder loadBalancedWebClientBuilder() {\n    return WebClient.builder();\n  } \n```", "```java\n @Autowired\n  private ReactorLoadBalancerExchangeFilterFunction lbFunction;\n  @Bean\n  public WebClient webClient(WebClient.Builder builder) {\n    return builder.filter(lbFunction).build();\n  } \n```", "```java\n@Component\npublic class MyComponent {\n  private final ObservationRegistry registry;\n  public MyComponent(ObservationRegistry registry) {\n    this.registry = registry;\n  } \n```", "```java\n int y = Observation.createNotStarted(\"my observation\", registry)\n      .observe(() -> {\n        int x = 1;\n        LOG.info(\"Will return {}\", x);\n        return 1;\n      });\n    LOG.info(\"Got {}\", y); \n```", "```java\n2023-04-22T14:02:07.417Z  INFO [product-composite,9761b2b2b2da59c5096e78252c48ab3d,d8bcbd9cde9fe2d7] 1 --- [     parallel-6] s.m.m.c.p.s.ProductCompositeServiceImpl  : Will return 1\n2023-04-22T14:02:07.417Z  INFO [product-composite,9761b2b2b2da59c5096e78252c48ab3d,4c8ea2820fb74ec9] 1 --- [     parallel-6] s.m.m.c.p.s.ProductCompositeServiceImpl  : Got 1 \n```", "```java\n int y = Observation.createNotStarted(\"my observation\", registry)\n      .contextualName(\"product info\")\n      .lowCardinalityKeyValue(\"template-url\", \"/product-composite/{productId}\")\n      .highCardinalityKeyValue(\"actual-url\", \"/product-composite/12345678\")\n      .observe(() -> {\n        int x = 1;\n        LOG.info(\"Will return {}\", x);\n        return x;\n      });\n    LOG.info(\"Got {}\", y); \n```", "```java\npublic <T> T observe(String observationName, String contextualName, String highCardinalityKey, String highCardinalityValue, Supplier<T> supplier) {\n  return Observation.createNotStarted(observationName, registry)\n    .contextualName(contextualName)\n    .highCardinalityKeyValue(highCardinalityKey, highCardinalityValue)\n    .observe(supplier);\n} \n```", "```java\nprivate <T> T observationWithProductInfo(int productInfo, Supplier<T> supplier) {\n  return observationUtil.observe(\n    \"composite observation\",\n    \"product info\",\n    \"productId\",\n    String.valueOf(productInfo),\n    supplier);\n} \n```", "```java\n public Mono<ProductAggregate> getProduct(int productId, ...) {\n    return observationWithProductInfo(productId,\n      () -> getProductInternal(productId, ...));\n  }\n  private Mono<ProductAggregate> getProductInternal(int productId, ...) {\n    return observationWithProductInfo(productId, () -> {\n      LOG.info(\"Will get composite product info for product.id={}\", productId);\n      return Mono.zip(\n          values -> createProductAggregate(...\n          integration.getProduct(productId, ...),\n          integration.getRecommendations(productId).collectList(),\n          integration.getReviews(productId).collectList())\n          ...);\n  } \n```", "```java\n public Mono<ProductAggregate> getProduct(int productId, ...) {\n    LOG.info(\"Will get composite product info for product.id={}\", productId);\n    return Mono.zip(\n      values -> createProductAggregate(...\n      integration.getProduct(productId, ...),\n      integration.getRecommendations(productId).collectList(),\n      integration.getReviews(productId).collectList())\n      ...);\n  } \n```", "```java\nspringBoot {\n    buildInfo()\n} \n```", "```java\nbuild.version=1.0.0-SNAPSHOT \n```", "```java\npublic class BuildInfoObservationFilter implements ObservationFilter {\n  private final BuildProperties buildProperties;\n  public BuildInfoObservationFilter(BuildProperties buildProperties) {\n    this.buildProperties = buildProperties;\n  }\n  @Override\n  public Observation.Context map(final Observation.Context context) {\n    KeyValue buildVersion = KeyValue.of(\"build.version\", buildProperties.getVersion());\n    return context.addLowCardinalityKeyValue(buildVersion);\n  }\n} \n```", "```java\n@Configuration(proxyBeanMethods = false)\npublic class ObservationRegistryConfig implements ObservationRegistryCustomizer<ObservationRegistry> {\n  private final BuildProperties buildProperties;\n  public ObservationRegistryConfig(BuildProperties buildProperties) {\n    this.buildProperties = buildProperties;\n  }\n  @Override\n  public void customize(final ObservationRegistry registry) {\n    registry.observationConfig().observationFilter(new BuildInfoObservationFilter(buildProperties));\n  }\n} \n```", "```java\ncd $BOOK_HOME/Chapter14\n./gradlew build && docker-compose build \n```", "```java\n./test-em-all.bash start \n```", "```java\nunset ACCESS_TOKEN\nACCESS_TOKEN=$(curl -k https://writer:secret-writer@localhost:8443/oauth2/token -d grant_type=client_credentials -d scope=\"product:read product:write\" -s | jq -r .access_token)\necho $ACCESS_TOKEN \n```", "```java\ncurl -H \"Authorization: Bearer $ACCESS_TOKEN\" -k https://localhost:8443/product-composite/1 -w \"%{http_code}\\n\" -o /dev/null -s \n```", "```java\n    spring.codec.log-request-details: true\n    logging.level.org.springframework.web.reactive.function.client.ExchangeFunctions: TRACE \n    ```", "```java\n    # To see tracing headers, uncomment the following two lines and restart the product-composite service \n    ```", "```java\n    docker-compose restart product-composite \n    ```", "```java\n    docker-compose log -f --tail 0 product-composite \n    ```", "```java\n    chapter14-product-composite-1  | 2023-04-23T09:24:50.849Z TRACE [product-composite,e1420dcc38901378e888b8ce7022510e,06867b65cf84b552] 1 --- [     parallel-2] o.s.w.r.f.client.ExchangeFunctions       : [14606b71] HTTP GET http://d40874197b77:8080/recommendation?productId=1, headers=[traceparent:\"00-e1420dcc38901378e888b8ce7022510e-06867b65cf84b552-01\"] \n    ```", "```java\n    curl -H \"Authorization: Bearer $ACCESS_TOKEN\" -k https://localhost:8443/product-composite/1?delay=3 -w \"%{http_code}\\n\" -o /dev/null -s \n    ```", "```java\n    curl -X DELETE -H \"Authorization: Bearer $ACCESS_TOKEN\" -k https://localhost:8443/product-composite/12345 -w \"%{http_code}\\n\" -o /dev/null -s \n    ```", "```java\ndocker-compose down \n```"]