["```java\n(Integer age) -> age > 10;                      // input Integer, \n                                                // return Boolean \n(Integer age) -> age > 10? \"Kid\" : \"Not a Kid\"; // input Integer, \n                                                // return String \n(Integer age) -> {System.out.println();};       // input Integer, \n                                                // return void \n() -> {return Math.random() + \"Number\";};       // input none,\n                                                // return String \n(String name, List<Person> list) -> { \n                               return ( \n                                   list.stream() \n                                       .filter(e ->             \n                                        e.getName().startsWith(name)) \n                                       .map(Person::getAge) \n                                       .findFirst() \n                                   ); \n                               };               // input name, \n                                                // List<person> \n                                                // return \n                                                // Optional<Integer> \n```", "```java\nPredicate<Integer> predicate = (Integer age) -> age > 10; \nFunction<Integer, String> function = (Integer age) -> age > 10? \"Kid\" : \n                                    \"Not a Kid\"; \nConsumer<Integer> consumer =   (Integer age) -> {  \n                                                System.out.println();\n                                                }; \nSupplier<String> supplier =    () -> {\n                                         return Math.random() + \n                                         \"Number\";\n                                     }; \n\nBiFunction<String, List<Person>,\n Optional<Integer>> firstElement = (String name, List<Person> list) ->                                                                 { \n                                   return ( \n                                       list.stream() \n                                           .filter(e -> \n                                            e.getName().\n                                            startsWith(name)) \n                                           .map(Person::getAge) \n                                          .findFirst() \n                                       ); \n                                   }; \nclass Person { \n    int age; \n    String name; \n    String getName() { \n        return name; \n    } \n    Integer getAge() { \n        return age; \n    } \n} \n```", "```java\n(age) -> age > 10; \n(age) -> age > 10? \"Kid\" : \"Not a Kid\"; \nage -> {System.out.println();}; \n() -> {return Math.random() + \"Number\";}; \n\n(name, list) -> { \n                    return ( \n                        list.stream() \n                            .filter(e -> e.getName().startsWith(name)) \n                            .map(Person::getAge) \n                            .findFirst() \n                    ); \n                }; \n```", "```java\n(Integer x, y) -> x + y;                 // won't compile\n```", "```java\n(var age) -> age > 10; \n(var age) -> age > 10? \"Kid\" : \"Not a Kid\"; \n(var age) -> {System.out.println();}; \n() -> {return Math.random() + \"Number\";}; \n\n(var name, var list) -> { \n                             return ( \n                                 list.stream() \n                                     .filter(e -> \n                                      e.getName().startsWith(name)) \n                                     .map(Person::getAge) \n                                     .findFirst() \n                                 ); \n                             }; \n```", "```java\n(var x, y) -> x + y;                         // won't compile \n(var x, Integer y) -> x + y;                 // won't compile \n```", "```java\n(int x) -> x > 10;                         // compiles \n(x) -> x > 10;                             // compiles \nx -> x > 10;                               // compiles \n(var x) -> x > 10;                         // compiles \nvar x -> x > 10;                           // Won't compile \n```", "```java\n(@Nullable var x, @Nonnull Integer y) -> x + y;\n```"]