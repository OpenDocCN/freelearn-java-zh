- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Securing REST Endpoints Using Authorization and Authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous chapters, we developed a RESTful web service using imperative and
    reactive coding styles. Now, you’ll learn how you can secure these REST endpoints
    using Spring Security. You’ll implement token-based authentication and authorization
    for REST endpoints. A successful authentication provides two types of tokens –
    a **JavaScript Object Notation** (**JSON**) **Web Token** (**JWT**) as an access
    token, and a refresh token in response. This JWT-based access token is then used
    to access the secured **Uniform Resource Locators** (**URLs**). A refresh token
    is used to request a new JWT if the existing JWT has expired, and a valid request
    token provides a new JWT to use.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll associate users with roles such as *admin* and *user*. These roles will
    be used as authorization to make sure that REST endpoints can only be accessed
    if a user holds certain roles. We’ll also briefly discuss **cross-site request
    forgery** (**CSRF**) and **cross-origin resource** **sharing** (**CORS**).
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics of this chapter are divided into the following sections:'
  prefs: []
  type: TYPE_NORMAL
- en: Implementing authentication using Spring Security and JWTs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing REST APIs with JWTs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring CORS and CSRF
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding authorization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of the chapter, you will know how to implement authentication and
    authorization using Spring Security and protect your web service from CORS and
    CSRF attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code for this chapter is available at [https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/tree/main/Chapter06](https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/tree/main/Chapter06).
  prefs: []
  type: TYPE_NORMAL
- en: "Implementing authentication using Spring Security \Land JWT"
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring Security is a framework consisting of a collection of libraries that
    allow you to implement enterprise application security without worrying about
    writing boilerplate code. In this chapter, we will use the Spring Security framework
    to implement token-based (JWT) authentication and authorization. Throughout the
    course of this chapter, you will also learn about CORS and CSRF configuration.
  prefs: []
  type: TYPE_NORMAL
- en: It’s useful to know that Spring Security also provides support for opaque tokens,
    just like it does for JWTs. The main difference between them is how information
    is read from the token. You can’t read the information from an opaque token the
    way you can with a JWT – only the issuer is aware of how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: A token is a string of characters such as
  prefs: []
  type: TYPE_NORMAL
- en: '`5rm1tc1obfshrm2354lu9dlt5reqm1ddjchqh81 7rbk37q95b768bib0j``f44df6suk1638sf78cef7`
    `hfolg4ap3bkighbnk7inr68ke780744fpej0gtd 9qflm999o8q`.'
  prefs: []
  type: TYPE_NORMAL
- en: It allows you to call secured HTTP endpoints or resources that are stateless
    by using various authorization flows.
  prefs: []
  type: TYPE_NORMAL
- en: You learned about `DispatcherServlet` in [*Chapter 2*](B19349_02.xhtml#_idTextAnchor048),
    *Spring Concepts and REST APIs*. This is an interface between a client request
    and the REST controller. Therefore, if you want to place logic for token-based
    authentication and authorization, you will have to do this before a request reaches
    `DispatcherServlet`. Spring Security libraries provide the servlet with pre-filters
    (as a part of the filter chain), which are processed before the request reaches
    `DispatcherServlet`. A `DispatcherServlet`. Similarly, **post-filters** get processed
    after a request has been processed by the servlet/controller.
  prefs: []
  type: TYPE_NORMAL
- en: There are two ways you can implement token-based (JWT) authentication – by using
    either `spring-boot-starter-security` or `spring-boot-starter-oauth2-resource-server`.
    We will use the latter because it does the boilerplate configuration for us.
  prefs: []
  type: TYPE_NORMAL
- en: 'The former contains the following libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: '`spring-security-core`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-security-config`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-security-web`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-boot-starter-oauth2-resource-server` provides the following, along
    with all three preceding **Java ARchive** (**JAR**) files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`spring-security-oauth2-core`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-security-oauth2-jose`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-security-oauth2-resource-server`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When you start this chapter’s code, you will find the following log. You can
    see that, by default, `DefaultSecurityFilterChain` is `auto-configured`. The `log`
    statement lists the configured filters in `DefaultSecurityFilterChain`, as shown
    in the following log block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'implementation
    'com.auth0:java-jwt:4.3.0'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Bearer error="invalid_token", error_description="An error occurred while attempting
    to decode the Jwt: Jwt expired at 2022-12-14T17:23:30Z", error_uri="https://tools.ietf.
    org/html/rfc6750#section-3.1".'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5
    MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '{  "alg": "HS256",'
  prefs: []
  type: TYPE_NORMAL
- en: '"typ": "JWT"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '{  "sub": "scott2",'
  prefs: []
  type: TYPE_NORMAL
- en: '"roles": ['
  prefs: []
  type: TYPE_NORMAL
- en: '"ADMIN"'
  prefs: []
  type: TYPE_NORMAL
- en: '],'
  prefs: []
  type: TYPE_NORMAL
- en: '"iss": "Modern API Development with Spring and'
  prefs: []
  type: TYPE_NORMAL
- en: Spring Boot",
  prefs: []
  type: TYPE_NORMAL
- en: '"exp": 1676526792,'
  prefs: []
  type: TYPE_NORMAL
- en: '"iat": 1676525892'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '/api/v1/users:  post:'
  prefs: []
  type: TYPE_NORMAL
- en: 'tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '- user'
  prefs: []
  type: TYPE_NORMAL
- en: 'summary: Signup the a new customer (user)'
  prefs: []
  type: TYPE_NORMAL
- en: 'description: Creates a new customer (user)'
  prefs: []
  type: TYPE_NORMAL
- en: 'operationId: signUp'
  prefs: []
  type: TYPE_NORMAL
- en: 'requestBody:'
  prefs: []
  type: TYPE_NORMAL
- en: 'content:'
  prefs: []
  type: TYPE_NORMAL
- en: 'application/xml:'
  prefs: []
  type: TYPE_NORMAL
- en: 'schema:'
  prefs: []
  type: TYPE_NORMAL
- en: '$ref: ''#/components/schemas/User'''
  prefs: []
  type: TYPE_NORMAL
- en: 'application/json:'
  prefs: []
  type: TYPE_NORMAL
- en: 'schema:'
  prefs: []
  type: TYPE_NORMAL
- en: '$ref: ''#/components/schemas/User'''
  prefs: []
  type: TYPE_NORMAL
- en: 'responses:'
  prefs: []
  type: TYPE_NORMAL
- en: '201:'
  prefs: []
  type: TYPE_NORMAL
- en: 'description: For successful user creation.'
  prefs: []
  type: TYPE_NORMAL
- en: 'content:'
  prefs: []
  type: TYPE_NORMAL
- en: 'application/xml:'
  prefs: []
  type: TYPE_NORMAL
- en: 'schema:'
  prefs: []
  type: TYPE_NORMAL
- en: '$ref: ''#/components/schemas/SignedInUser'''
  prefs: []
  type: TYPE_NORMAL
- en: 'application/json:'
  prefs: []
  type: TYPE_NORMAL
- en: 'schema:'
  prefs: []
  type: TYPE_NORMAL
- en: '$ref: ''#/components/schemas/SignedInUser'''
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'SignedInUser:  description: Signed-in user information'
  prefs: []
  type: TYPE_NORMAL
- en: 'type: object'
  prefs: []
  type: TYPE_NORMAL
- en: 'properties:'
  prefs: []
  type: TYPE_NORMAL
- en: 'refreshToken:'
  prefs: []
  type: TYPE_NORMAL
- en: 'description: Refresh Token'
  prefs: []
  type: TYPE_NORMAL
- en: 'type: string'
  prefs: []
  type: TYPE_NORMAL
- en: 'accessToken:'
  prefs: []
  type: TYPE_NORMAL
- en: 'description: JWT Token aka access token'
  prefs: []
  type: TYPE_NORMAL
- en: 'type: string'
  prefs: []
  type: TYPE_NORMAL
- en: 'username:'
  prefs: []
  type: TYPE_NORMAL
- en: 'description: User Name'
  prefs: []
  type: TYPE_NORMAL
- en: 'type: string'
  prefs: []
  type: TYPE_NORMAL
- en: 'userId:'
  prefs: []
  type: TYPE_NORMAL
- en: 'description: User Identifier'
  prefs: []
  type: TYPE_NORMAL
- en: 'type: string'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '/api/v1/auth/token:  post:'
  prefs: []
  type: TYPE_NORMAL
- en: 'tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '- user'
  prefs: []
  type: TYPE_NORMAL
- en: 'summary: Signin the customer (user)'
  prefs: []
  type: TYPE_NORMAL
- en: 'description: Generates the JWT and refresh token'
  prefs: []
  type: TYPE_NORMAL
- en: 'operationId: signIn'
  prefs: []
  type: TYPE_NORMAL
- en: 'requestBody:'
  prefs: []
  type: TYPE_NORMAL
- en: 'content:'
  prefs: []
  type: TYPE_NORMAL
- en: 'application/xml:'
  prefs: []
  type: TYPE_NORMAL
- en: 'schema:'
  prefs: []
  type: TYPE_NORMAL
- en: '$ref: ''#/components/schemas/SignInReq'''
  prefs: []
  type: TYPE_NORMAL
- en: 'application/json:'
  prefs: []
  type: TYPE_NORMAL
- en: 'schema:'
  prefs: []
  type: TYPE_NORMAL
- en: '$ref: ''#/components/schemas/SignInReq'''
  prefs: []
  type: TYPE_NORMAL
- en: 'responses:'
  prefs: []
  type: TYPE_NORMAL
- en: '200:'
  prefs: []
  type: TYPE_NORMAL
- en: 'description: Returns the access and refresh token.'
  prefs: []
  type: TYPE_NORMAL
- en: 'content:'
  prefs: []
  type: TYPE_NORMAL
- en: 'application/xml:'
  prefs: []
  type: TYPE_NORMAL
- en: 'schema:'
  prefs: []
  type: TYPE_NORMAL
- en: '$ref: ''#/components/schemas/SignedInUser'''
  prefs: []
  type: TYPE_NORMAL
- en: 'application/json:'
  prefs: []
  type: TYPE_NORMAL
- en: 'schema:'
  prefs: []
  type: TYPE_NORMAL
- en: '$ref: ''#/components/schemas/SignedInUser'''
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'SignInReq:  description: Request body for Sign-in'
  prefs: []
  type: TYPE_NORMAL
- en: 'type: object'
  prefs: []
  type: TYPE_NORMAL
- en: 'properties:'
  prefs: []
  type: TYPE_NORMAL
- en: 'username:'
  prefs: []
  type: TYPE_NORMAL
- en: 'description: username of the User'
  prefs: []
  type: TYPE_NORMAL
- en: 'type: string'
  prefs: []
  type: TYPE_NORMAL
- en: 'password:'
  prefs: []
  type: TYPE_NORMAL
- en: 'description: password of the User'
  prefs: []
  type: TYPE_NORMAL
- en: 'type: string'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Under the /api/v1/auth/tokendelete:'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '- user'
  prefs: []
  type: TYPE_NORMAL
- en: 'summary: Signouts the customer (user)'
  prefs: []
  type: TYPE_NORMAL
- en: 'description: Signouts the customer (user).'
  prefs: []
  type: TYPE_NORMAL
- en: 'operationId: signOut'
  prefs: []
  type: TYPE_NORMAL
- en: 'requestBody:'
  prefs: []
  type: TYPE_NORMAL
- en: 'content:'
  prefs: []
  type: TYPE_NORMAL
- en: 'application/xml:'
  prefs: []
  type: TYPE_NORMAL
- en: 'schema:'
  prefs: []
  type: TYPE_NORMAL
- en: '$ref: ''#/components/schemas/RefreshToken'''
  prefs: []
  type: TYPE_NORMAL
- en: 'application/json:'
  prefs: []
  type: TYPE_NORMAL
- en: 'schema:'
  prefs: []
  type: TYPE_NORMAL
- en: '$ref: ''#/components/schemas/RefreshToken'''
  prefs: []
  type: TYPE_NORMAL
- en: 'responses:'
  prefs: []
  type: TYPE_NORMAL
- en: '202:'
  prefs: []
  type: TYPE_NORMAL
- en: 'description: Accepts the request for logout.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'RefreshToken:  description: Contains the refresh token'
  prefs: []
  type: TYPE_NORMAL
- en: 'type: object'
  prefs: []
  type: TYPE_NORMAL
- en: 'properties:'
  prefs: []
  type: TYPE_NORMAL
- en: 'refreshToken:'
  prefs: []
  type: TYPE_NORMAL
- en: 'description: Refresh Token'
  prefs: []
  type: TYPE_NORMAL
- en: 'type: string'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '/api/v1/auth/token/refresh:  post:'
  prefs: []
  type: TYPE_NORMAL
- en: 'tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '- user'
  prefs: []
  type: TYPE_NORMAL
- en: 'summary: Provides new JWT based on valid refresh token.'
  prefs: []
  type: TYPE_NORMAL
- en: 'description: Provides JWT based on valid refresh token.'
  prefs: []
  type: TYPE_NORMAL
- en: 'operationId: getAccessToken'
  prefs: []
  type: TYPE_NORMAL
- en: 'requestBody:'
  prefs: []
  type: TYPE_NORMAL
- en: 'content:'
  prefs: []
  type: TYPE_NORMAL
- en: 'application/json:'
  prefs: []
  type: TYPE_NORMAL
- en: 'schema:'
  prefs: []
  type: TYPE_NORMAL
- en: '$ref: ''#/components/schemas/RefreshToken'''
  prefs: []
  type: TYPE_NORMAL
- en: 'responses:'
  prefs: []
  type: TYPE_NORMAL
- en: '200:'
  prefs: []
  type: TYPE_NORMAL
- en: 'description: For successful operation.'
  prefs: []
  type: TYPE_NORMAL
- en: 'content:'
  prefs: []
  type: TYPE_NORMAL
- en: 'application/json:'
  prefs: []
  type: TYPE_NORMAL
- en: 'schema:'
  prefs: []
  type: TYPE_NORMAL
- en: '$ref: ''#/components/schemas/SignedInUser'''
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: create TABLE IF NOT EXISTS ecomm.user_token (   id uuid NOT NULL DEFAULT random_uuid(),
  prefs: []
  type: TYPE_NORMAL
- en: refresh_token varchar(128),
  prefs: []
  type: TYPE_NORMAL
- en: user_id uuid NOT NULL,
  prefs: []
  type: TYPE_NORMAL
- en: PRIMARY KEY(id),
  prefs: []
  type: TYPE_NORMAL
- en: FOREIGN KEY (user_id)
  prefs: []
  type: TYPE_NORMAL
- en: REFERENCES ecomm."user"(id)
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: public class Constants {  public static final String ENCODER_ID = "bcrypt";
  prefs: []
  type: TYPE_NORMAL
- en: public static final String API_URL_PREFIX = "/api/v1/**";
  prefs: []
  type: TYPE_NORMAL
- en: public static final String H2_URL_PREFIX = "/h2-console/**";
  prefs: []
  type: TYPE_NORMAL
- en: public static final String SIGNUP_URL = "/api/v1/users";
  prefs: []
  type: TYPE_NORMAL
- en: public static final String TOKEN_URL = "/api/v1/auth/token";
  prefs: []
  type: TYPE_NORMAL
- en: public static final String REFRESH_URL =
  prefs: []
  type: TYPE_NORMAL
- en: '"/api/v1/auth/token/refresh";'
  prefs: []
  type: TYPE_NORMAL
- en: public static final String PRODUCTS_URL =
  prefs: []
  type: TYPE_NORMAL
- en: '"/api/v1/products/**";'
  prefs: []
  type: TYPE_NORMAL
- en: public static final String AUTHORIZATION =
  prefs: []
  type: TYPE_NORMAL
- en: '"Authorization";'
  prefs: []
  type: TYPE_NORMAL
- en: public static final String TOKEN_PREFIX = "Bearer ";
  prefs: []
  type: TYPE_NORMAL
- en: public static final String SECRET_KEY = "SECRET_KEY";
  prefs: []
  type: TYPE_NORMAL
- en: public static final long EXPIRATION_TIME = 900_000;
  prefs: []
  type: TYPE_NORMAL
- en: public static final String ROLE_CLAIM = "roles";
  prefs: []
  type: TYPE_NORMAL
- en: public static final String AUTHORITY_PREFIX = "ROLE_";
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '@Componentpublic class JwtManager {'
  prefs: []
  type: TYPE_NORMAL
- en: private final RSAPrivateKey privateKey;
  prefs: []
  type: TYPE_NORMAL
- en: private final RSAPublicKey publicKey;
  prefs: []
  type: TYPE_NORMAL
- en: public JwtManager(@Lazy RSAPrivateKey privateKey,
  prefs: []
  type: TYPE_NORMAL
- en: '@Lazy RSAPublicKey publicKey) {'
  prefs: []
  type: TYPE_NORMAL
- en: this.privateKey = privateKey;
  prefs: []
  type: TYPE_NORMAL
- en: this.publicKey = publicKey;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: public String create(UserDetails principal) {
  prefs: []
  type: TYPE_NORMAL
- en: final long now = System.currentTimeMillis();
  prefs: []
  type: TYPE_NORMAL
- en: return JWT.create()
  prefs: []
  type: TYPE_NORMAL
- en: .withIssuer("Modern API Development with Spring…")
  prefs: []
  type: TYPE_NORMAL
- en: .withSubject(principal.getUsername())
  prefs: []
  type: TYPE_NORMAL
- en: .withClaim(
  prefs: []
  type: TYPE_NORMAL
- en: ROLE_CLAIM,
  prefs: []
  type: TYPE_NORMAL
- en: principal.getAuthorities().stream()
  prefs: []
  type: TYPE_NORMAL
- en: .map(GrantedAuthority::getAuthority)
  prefs: []
  type: TYPE_NORMAL
- en: .collect(toList()))
  prefs: []
  type: TYPE_NORMAL
- en: .withIssuedAt(new Date(now))
  prefs: []
  type: TYPE_NORMAL
- en: .withExpiresAt(new Date(now + EXPIRATION_TIME))
  prefs: []
  type: TYPE_NORMAL
- en: .sign(Algorithm.RSA256(publicKey, privateKey));
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '$ keytool -genkey -alias "jwt-sign-key" -keyalg RSA -keystore jwt-keystore.jks
    -keysize 4096Enter keystore password:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Re-enter new password:'
  prefs: []
  type: TYPE_NORMAL
- en: What is your first and last name?
  prefs: []
  type: TYPE_NORMAL
- en: '[Unknown]: Modern API Development'
  prefs: []
  type: TYPE_NORMAL
- en: What is the name of your organizational unit?
  prefs: []
  type: TYPE_NORMAL
- en: '[Unknown]: Org Unit'
  prefs: []
  type: TYPE_NORMAL
- en: What is the name of your organization?
  prefs: []
  type: TYPE_NORMAL
- en: '[Unknown]: Packt'
  prefs: []
  type: TYPE_NORMAL
- en: What is the name of your City or Locality?
  prefs: []
  type: TYPE_NORMAL
- en: '[Unknown]: City'
  prefs: []
  type: TYPE_NORMAL
- en: What is the name of your State or Province?
  prefs: []
  type: TYPE_NORMAL
- en: '[Unknown]: State'
  prefs: []
  type: TYPE_NORMAL
- en: What is the two-letter country code for this unit?
  prefs: []
  type: TYPE_NORMAL
- en: '[Unknown]: IN'
  prefs: []
  type: TYPE_NORMAL
- en: Securing REST APIs with JWT 191
  prefs: []
  type: TYPE_NORMAL
- en: Is CN=Modern API Development, OU=Org Unit, O=Packt, L=City, ST=State, C=IN correct?
  prefs: []
  type: TYPE_NORMAL
- en: '[no]: yes'
  prefs: []
  type: TYPE_NORMAL
- en: Generating 4,096 bit RSA key pair and self-signed certificate (SHA384withRSA)
    with a validity of 90 days
  prefs: []
  type: TYPE_NORMAL
- en: 'for: CN=Modern API Development, OU=Org Unit, O=Packt, L=City, ST=State, C=IN'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: app.security.jwt.keystore-location=jwt-keystore.jksapp.security.jwt.keystore-password=password
  prefs: []
  type: TYPE_NORMAL
- en: app.security.jwt.key-alias=jwt-sign-key
  prefs: []
  type: TYPE_NORMAL
- en: app.security.jwt.private-key-passphrase=password
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '@Configuration@EnableWebSecurity'
  prefs: []
  type: TYPE_NORMAL
- en: '@EnableGlobalMethodSecurity(prePostEnabled = true)'
  prefs: []
  type: TYPE_NORMAL
- en: public class SecurityConfig {
  prefs: []
  type: TYPE_NORMAL
- en: '@Value("${app.security.jwt.keystore-location}")'
  prefs: []
  type: TYPE_NORMAL
- en: private String keyStorePath;
  prefs: []
  type: TYPE_NORMAL
- en: '@Value("${app.security.jwt.keystore-password}")'
  prefs: []
  type: TYPE_NORMAL
- en: private String keyStorePassword;
  prefs: []
  type: TYPE_NORMAL
- en: '@Value("${app.security.jwt.key-alias}")'
  prefs: []
  type: TYPE_NORMAL
- en: private String keyAlias;
  prefs: []
  type: TYPE_NORMAL
- en: '@Value("${app.security.jwt.private-key-passphrase}")'
  prefs: []
  type: TYPE_NORMAL
- en: private String privateKeyPassphrase;
  prefs: []
  type: TYPE_NORMAL
- en: …
  prefs: []
  type: TYPE_NORMAL
- en: …
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '@Beanpublic KeyStore keyStore() {'
  prefs: []
  type: TYPE_NORMAL
- en: try {
  prefs: []
  type: TYPE_NORMAL
- en: KeyStore keyStore =
  prefs: []
  type: TYPE_NORMAL
- en: KeyStore.getInstance(KeyStore.getDefaultType());
  prefs: []
  type: TYPE_NORMAL
- en: InputStream resStream = Thread.currentThread().
  prefs: []
  type: TYPE_NORMAL
- en: getContextClassLoader().getResourceAsStream
  prefs: []
  type: TYPE_NORMAL
- en: (keyStorePath);
  prefs: []
  type: TYPE_NORMAL
- en: keyStore.load(resStream, keyStorePassword.
  prefs: []
  type: TYPE_NORMAL
- en: toCharArray());
  prefs: []
  type: TYPE_NORMAL
- en: return keyStore;
  prefs: []
  type: TYPE_NORMAL
- en: '} catch (IOException | CertificateException |'
  prefs: []
  type: TYPE_NORMAL
- en: NoSuchAlgorithmException | KeyStoreException e) {
  prefs: []
  type: TYPE_NORMAL
- en: 'LOG.error("Unable to load keystore: {}",'
  prefs: []
  type: TYPE_NORMAL
- en: keyStorePath, e);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: throw new IllegalArgumentException
  prefs: []
  type: TYPE_NORMAL
- en: ("Can't load keystore");
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '@Beanpublic RSAPrivateKey jwtSigningKey(KeyStore keyStore) {'
  prefs: []
  type: TYPE_NORMAL
- en: try {
  prefs: []
  type: TYPE_NORMAL
- en: Key key = keyStore.getKey(keyAlias,
  prefs: []
  type: TYPE_NORMAL
- en: privateKeyPassphrase.toCharArray());
  prefs: []
  type: TYPE_NORMAL
- en: if (key instanceof RSAPrivateKey) {
  prefs: []
  type: TYPE_NORMAL
- en: return (RSAPrivateKey) key;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '} catch (UnrecoverableKeyException |'
  prefs: []
  type: TYPE_NORMAL
- en: NoSuchAlgorithmException | KeyStoreException e) {
  prefs: []
  type: TYPE_NORMAL
- en: 'LOG.error("key from keystore: {}", keyStorePath, e);'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: throw new IllegalArgumentException("Cant load
  prefs: []
  type: TYPE_NORMAL
- en: private key");
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '@Beanpublic RSAPublicKey jwtValidationKey(KeyStore keyStore) {'
  prefs: []
  type: TYPE_NORMAL
- en: try {
  prefs: []
  type: TYPE_NORMAL
- en: Certificate certificate = keyStore.getCertificate
  prefs: []
  type: TYPE_NORMAL
- en: (keyAlias);
  prefs: []
  type: TYPE_NORMAL
- en: PublicKey publicKey = certificate.getPublicKey();
  prefs: []
  type: TYPE_NORMAL
- en: if (publicKey instanceof RSAPublicKey) {
  prefs: []
  type: TYPE_NORMAL
- en: return (RSAPublicKey) publicKey;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '} catch (KeyStoreException e) {'
  prefs: []
  type: TYPE_NORMAL
- en: 'LOG.error("key from keystore: {}", keyStorePath, e);'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: throw new IllegalArgumentException("Can't load public key");
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '@Beanpublic JwtDecoder jwtDecoder(RSAPublicKey rsaPublicKey) {'
  prefs: []
  type: TYPE_NORMAL
- en: return NimbusJwtDecoder.withPublicKey(rsaPublicKey).build();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '@Entity@Table(name = "user_token")'
  prefs: []
  type: TYPE_NORMAL
- en: public class UserTokenEntity {
  prefs: []
  type: TYPE_NORMAL
- en: '@Id'
  prefs: []
  type: TYPE_NORMAL
- en: '@GeneratedValue'
  prefs: []
  type: TYPE_NORMAL
- en: '@Column(name = "ID", updatable = false, nullable = false)'
  prefs: []
  type: TYPE_NORMAL
- en: private UUID id;
  prefs: []
  type: TYPE_NORMAL
- en: '@NotNull(message = "Refresh token is required.")'
  prefs: []
  type: TYPE_NORMAL
- en: '@Basic(optional = false)'
  prefs: []
  type: TYPE_NORMAL
- en: '@Column(name = "refresh_token")'
  prefs: []
  type: TYPE_NORMAL
- en: private String refreshToken;
  prefs: []
  type: TYPE_NORMAL
- en: '@ManyToOne(fetch = FetchType.LAZY)'
  prefs: []
  type: TYPE_NORMAL
- en: private UserEntity user;
  prefs: []
  type: TYPE_NORMAL
- en: …
  prefs: []
  type: TYPE_NORMAL
- en: …
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: public interface UserTokenRepository extends   CrudRepository<UserTokenEntity,
    UUID> {
  prefs: []
  type: TYPE_NORMAL
- en: Optional<UserTokenEntity> findByRefreshToken
  prefs: []
  type: TYPE_NORMAL
- en: (StringrefreshToken);
  prefs: []
  type: TYPE_NORMAL
- en: Optional<UserTokenEntity> deleteByUserId(UUID userId);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: UserEntity findUserByUsername(String username);Optional<SignedInUser> createUser(User
    user);
  prefs: []
  type: TYPE_NORMAL
- en: SignedInUser getSignedInUser(UserEntity userEntity); Optional<SignedInUser>
    getAccessToken(RefreshToken refToken);
  prefs: []
  type: TYPE_NORMAL
- en: void removeRefreshToken(RefreshToken refreshToken);
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: public UserEntity findUserByUsername(String username) {  if (Strings.isBlank(username))
    {
  prefs: []
  type: TYPE_NORMAL
- en: throw new UsernameNotFoundException("Invalid user.");
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: final String uname = username.trim();
  prefs: []
  type: TYPE_NORMAL
- en: Optional<UserEntity> oUserEntity =
  prefs: []
  type: TYPE_NORMAL
- en: repository.findByUsername(uname);
  prefs: []
  type: TYPE_NORMAL
- en: UserEntity userEntity = oUserEntity.orElseThrow
  prefs: []
  type: TYPE_NORMAL
- en: (() -> new UsernameNotFoundException(String.format(
  prefs: []
  type: TYPE_NORMAL
- en: '"Given user(%s) not found.", uname)));'
  prefs: []
  type: TYPE_NORMAL
- en: return userEntity;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '@Transactionalpublic Optional<SignedInUser> createUser(User user) {'
  prefs: []
  type: TYPE_NORMAL
- en: Integer count = repository.findByUsernameOrEmail(
  prefs: []
  type: TYPE_NORMAL
- en: user.getUsername(), user.getEmail());
  prefs: []
  type: TYPE_NORMAL
- en: if (count > 0) {
  prefs: []
  type: TYPE_NORMAL
- en: throw new GenericAlreadyExistsException
  prefs: []
  type: TYPE_NORMAL
- en: ("Use different username and email.");
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: UserEntity userEntity = repository.save(toEntity(user));
  prefs: []
  type: TYPE_NORMAL
- en: return Optional.of(createSignedUserWithRefreshToken(
  prefs: []
  type: TYPE_NORMAL
- en: userEntity));
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: private SignedInUser createSignedUserWithRefreshToken(   UserEntity userEntity)
    {
  prefs: []
  type: TYPE_NORMAL
- en: return createSignedInUser(userEntity)
  prefs: []
  type: TYPE_NORMAL
- en: .refreshToken(createRefreshToken(userEntity));
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: private SignedInUser createSignedInUser(UserEntity uEntity) {  String token
    = tokenManager.create(
  prefs: []
  type: TYPE_NORMAL
- en: org.springframework.security.core.userdetails
  prefs: []
  type: TYPE_NORMAL
- en: .User.builder()
  prefs: []
  type: TYPE_NORMAL
- en: .username(userEntity.getUsername())
  prefs: []
  type: TYPE_NORMAL
- en: .password(userEntity.getPassword())
  prefs: []
  type: TYPE_NORMAL
- en: .authorities(Objects.nonNull
  prefs: []
  type: TYPE_NORMAL
- en: (userEntity.getRole()) ?
  prefs: []
  type: TYPE_NORMAL
- en: 'userEntity.getRole().name() : "")'
  prefs: []
  type: TYPE_NORMAL
- en: .build());
  prefs: []
  type: TYPE_NORMAL
- en: return new SignedInUser()
  prefs: []
  type: TYPE_NORMAL
- en: .username(userEntity.getUsername())
  prefs: []
  type: TYPE_NORMAL
- en: .accessToken(token)
  prefs: []
  type: TYPE_NORMAL
- en: .userId(userEntity.getId().toString());
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: private String createRefreshToken(UserEntity user) {
  prefs: []
  type: TYPE_NORMAL
- en: String token = RandomHolder.randomKey(128);
  prefs: []
  type: TYPE_NORMAL
- en: userTokenRepository.save(new UserTokenEntity().
  prefs: []
  type: TYPE_NORMAL
- en: setRefreshToken(token).setUser(user));
  prefs: []
  type: TYPE_NORMAL
- en: return token;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: // https://stackoverflow.com/a/31214709/109354private static class RandomHolder
    {
  prefs: []
  type: TYPE_NORMAL
- en: static final Random random = new SecureRandom();
  prefs: []
  type: TYPE_NORMAL
- en: public static String randomKey(int length) {
  prefs: []
  type: TYPE_NORMAL
- en: return String.format("%"+length+"s",new BigInteger
  prefs: []
  type: TYPE_NORMAL
- en: (length * 5 /*base32, 2^5*/,random).toString(32)).
  prefs: []
  type: TYPE_NORMAL
- en: replace('\u0020', '0');
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '@Transactionalpublic SignedInUser getSignedInUser(UserEntity userEntity) {'
  prefs: []
  type: TYPE_NORMAL
- en: userTokenRepository.deleteByUserId(userEntity.getId());
  prefs: []
  type: TYPE_NORMAL
- en: return createSignedUserWithRefreshToken(userEntity);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: public Optional<SignedInUser> getAccessToken(   RefreshToken refreshToken) {
  prefs: []
  type: TYPE_NORMAL
- en: return userTokenRepository
  prefs: []
  type: TYPE_NORMAL
- en: .findByRefreshToken(refreshToken.getRefreshToken())
  prefs: []
  type: TYPE_NORMAL
- en: .map(ut ->
  prefs: []
  type: TYPE_NORMAL
- en: Optional.of(createSignedInUser(ut.getUser())
  prefs: []
  type: TYPE_NORMAL
- en: .refreshToken(refreshToken.getRefreshToken())))
  prefs: []
  type: TYPE_NORMAL
- en: .orElseThrow(() ->
  prefs: []
  type: TYPE_NORMAL
- en: new InvalidRefreshTokenException
  prefs: []
  type: TYPE_NORMAL
- en: ("Invalid token."));
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: public void removeRefreshToken(RefreshToken refreshToken) { userTokenRepository
  prefs: []
  type: TYPE_NORMAL
- en: .findByRefreshToken(refreshToken.getRefreshToken())
  prefs: []
  type: TYPE_NORMAL
- en: .ifPresentOrElse(
  prefs: []
  type: TYPE_NORMAL
- en: userTokenRepository::delete,
  prefs: []
  type: TYPE_NORMAL
- en: () -> {
  prefs: []
  type: TYPE_NORMAL
- en: throw new InvalidRefreshTokenException
  prefs: []
  type: TYPE_NORMAL
- en: ("Invalid token.");
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: public interface UserRepository extends   CrudRepository<UserEntity, UUID> {
  prefs: []
  type: TYPE_NORMAL
- en: Optional<UserEntity> findByUsername(String username);
  prefs: []
  type: TYPE_NORMAL
- en: '@Query( value = "select count(u.*) from ecomm.\"user\" u'
  prefs: []
  type: TYPE_NORMAL
- en: where u.username = :username or u.email = :email",
  prefs: []
  type: TYPE_NORMAL
- en: nativeQuery = true)
  prefs: []
  type: TYPE_NORMAL
- en: Integer findByUsernameOrEmail(String username,
  prefs: []
  type: TYPE_NORMAL
- en: String email);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '@Beanpublic PasswordEncoder passwordEncoder() {'
  prefs: []
  type: TYPE_NORMAL
- en: Map<String, PasswordEncoder> encoders =
  prefs: []
  type: TYPE_NORMAL
- en: Map.of(
  prefs: []
  type: TYPE_NORMAL
- en: ENCODER_ID, new BCryptPasswordEncoder(),
  prefs: []
  type: TYPE_NORMAL
- en: '"pbkdf2", Pbkdf2PasswordEncoder.'
  prefs: []
  type: TYPE_NORMAL
- en: defaultsForSpringSecurity_v5_8(),
  prefs: []
  type: TYPE_NORMAL
- en: '"scrypt", ScryptPasswordEncoder'
  prefs: []
  type: TYPE_NORMAL
- en: .defaultsForSpringSecurity_v5_8());
  prefs: []
  type: TYPE_NORMAL
- en: return new DelegatingPasswordEncoder
  prefs: []
  type: TYPE_NORMAL
- en: (ENCODER_ID, encoders);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '@RestControllerpublic class AuthController implements UserApi {'
  prefs: []
  type: TYPE_NORMAL
- en: private final UserService service;
  prefs: []
  type: TYPE_NORMAL
- en: private final PasswordEncoder passwordEncoder;
  prefs: []
  type: TYPE_NORMAL
- en: public AuthController(UserService s, PasswordEncoder e) {
  prefs: []
  type: TYPE_NORMAL
- en: this.service = s;
  prefs: []
  type: TYPE_NORMAL
- en: this.passwordEncoder = e;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: …
  prefs: []
  type: TYPE_NORMAL
- en: …
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: public ResponseEntity<SignedInUser> signIn(@Valid SignInReq signInReq) {  UserEntity
    userEntity = service
  prefs: []
  type: TYPE_NORMAL
- en: .findUserByUsername(signInReq.getUsername());
  prefs: []
  type: TYPE_NORMAL
- en: if (passwordEncoder.matches(signInReq.getPassword(),
  prefs: []
  type: TYPE_NORMAL
- en: userEntity.getPassword())) {
  prefs: []
  type: TYPE_NORMAL
- en: return ok(service.getSignedInUser(userEntity));
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: throw new InsufficientAuthenticationException
  prefs: []
  type: TYPE_NORMAL
- en: ("Unauthrzed");
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: public ResponseEntity<Void> signOut(  @Valid RefreshToken refreshToken) {
  prefs: []
  type: TYPE_NORMAL
- en: service.removeRefreshToken(refreshToken);
  prefs: []
  type: TYPE_NORMAL
- en: return accepted().build();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: public ResponseEntity<SignedInUser> signUp
  prefs: []
  type: TYPE_NORMAL
- en: (@Valid User user) {
  prefs: []
  type: TYPE_NORMAL
- en: return status(HttpStatus.CREATED)
  prefs: []
  type: TYPE_NORMAL
- en: .body(service.createUser(user).get());
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: public ResponseEntity<SignedInUser> getAccessToken(
  prefs: []
  type: TYPE_NORMAL
- en: '@Valid RefreshToken refreshToken) {'
  prefs: []
  type: TYPE_NORMAL
- en: return ok(service.getAccessToken(refreshToken)
  prefs: []
  type: TYPE_NORMAL
- en: .orElseThrow(InvalidRefreshTokenException::new));
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '@Beanprotected SecurityFilterChain filterChain(HttpSecurity http) throws Exception
    {'
  prefs: []
  type: TYPE_NORMAL
- en: http.httpBasic().disable()
  prefs: []
  type: TYPE_NORMAL
- en: .formLogin().disable()
  prefs: []
  type: TYPE_NORMAL
- en: .csrf().ignoringRequestMatchers(API_URL_PREFIX)
  prefs: []
  type: TYPE_NORMAL
- en: .ignoringRequestMatchers(toH2Console())
  prefs: []
  type: TYPE_NORMAL
- en: .and()
  prefs: []
  type: TYPE_NORMAL
- en: .headers().frameOptions().sameOrigin()
  prefs: []
  type: TYPE_NORMAL
- en: .and()
  prefs: []
  type: TYPE_NORMAL
- en: .cors()
  prefs: []
  type: TYPE_NORMAL
- en: .and()
  prefs: []
  type: TYPE_NORMAL
- en: .authorizeHttpRequests(req ->
  prefs: []
  type: TYPE_NORMAL
- en: req.requestMatchers(toH2Console()).permitAll()
  prefs: []
  type: TYPE_NORMAL
- en: .requestMatchers(new AntPathRequestMatcher(
  prefs: []
  type: TYPE_NORMAL
- en: TOKEN_URL, HttpMethod.POST.name()))
  prefs: []
  type: TYPE_NORMAL
- en: .permitAll()
  prefs: []
  type: TYPE_NORMAL
- en: .requestMatchers(new AntPathRequestMatcher(
  prefs: []
  type: TYPE_NORMAL
- en: TOKEN_URL, HttpMethod.DELETE.name())).
  prefs: []
  type: TYPE_NORMAL
- en: permitAll()
  prefs: []
  type: TYPE_NORMAL
- en: .requestMatchers(new AntPathRequestMatcher(
  prefs: []
  type: TYPE_NORMAL
- en: SIGNUP_URL, HttpMethod.POST.name()))
  prefs: []
  type: TYPE_NORMAL
- en: .permitAll()
  prefs: []
  type: TYPE_NORMAL
- en: .requestMatchers(new AntPathRequestMatcher(
  prefs: []
  type: TYPE_NORMAL
- en: REFRESH_URL, HttpMethod.POST.name())).
  prefs: []
  type: TYPE_NORMAL
- en: permitAll()
  prefs: []
  type: TYPE_NORMAL
- en: .requestMatchers(new AntPathRequestMatcher(
  prefs: []
  type: TYPE_NORMAL
- en: PRODUCTS_URL, HttpMethod.GET.name())).
  prefs: []
  type: TYPE_NORMAL
- en: permitAll()
  prefs: []
  type: TYPE_NORMAL
- en: .requestMatchers("/api/v1/addresses/**")
  prefs: []
  type: TYPE_NORMAL
- en: .hasAuthority(RoleEnum.ADMIN.getAuthority())
  prefs: []
  type: TYPE_NORMAL
- en: .anyRequest().authenticated())
  prefs: []
  type: TYPE_NORMAL
- en: .oauth2ResourceServer(oauth2ResourceServer ->
  prefs: []
  type: TYPE_NORMAL
- en: oauth2ResourceServer.jwt(jwt ->
  prefs: []
  type: TYPE_NORMAL
- en: jwt.jwtAuthenticationConverter(
  prefs: []
  type: TYPE_NORMAL
- en: getJwtAuthenticationConverter())))
  prefs: []
  type: TYPE_NORMAL
- en: .sessionManagement().sessionCreationPolicy(
  prefs: []
  type: TYPE_NORMAL
- en: SessionCreationPolicy.STATELESS);
  prefs: []
  type: TYPE_NORMAL
- en: return http.build();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '@BeanCorsConfigurationSource corsConfigurationSource() {'
  prefs: []
  type: TYPE_NORMAL
- en: CorsConfiguration configuration = new CorsConfiguration();
  prefs: []
  type: TYPE_NORMAL
- en: configuration.setAllowedOrigins(List.of("*"));
  prefs: []
  type: TYPE_NORMAL
- en: configuration.setAllowedMethods(Arrays.asList("HEAD",
  prefs: []
  type: TYPE_NORMAL
- en: '"GET", "PUT", "POST", "DELETE", "PATCH"));'
  prefs: []
  type: TYPE_NORMAL
- en: // For CORS response headers
  prefs: []
  type: TYPE_NORMAL
- en: configuration.addAllowedOrigin("*");
  prefs: []
  type: TYPE_NORMAL
- en: configuration.addAllowedHeader("*");
  prefs: []
  type: TYPE_NORMAL
- en: configuration.addAllowedMethod("*");
  prefs: []
  type: TYPE_NORMAL
- en: UrlBasedCorsConfigurationSource source = new
  prefs: []
  type: TYPE_NORMAL
- en: UrlBasedCorsConfigurationSource();
  prefs: []
  type: TYPE_NORMAL
- en: source.registerCorsConfiguration("/**", configuration);
  prefs: []
  type: TYPE_NORMAL
- en: return source;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: public enum RoleEnum implements GrantedAuthority {  USER(Const.USER), ADMIN(Const.ADMIN),
    CSR(Const.CSR);
  prefs: []
  type: TYPE_NORMAL
- en: private String authority;
  prefs: []
  type: TYPE_NORMAL
- en: RoleEnum(String authority) {
  prefs: []
  type: TYPE_NORMAL
- en: this.authority = authority;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '@JsonCreator'
  prefs: []
  type: TYPE_NORMAL
- en: public static RoleEnum fromAuthority(String authority) {
  prefs: []
  type: TYPE_NORMAL
- en: 'for (RoleEnum b : RoleEnum.values()) {'
  prefs: []
  type: TYPE_NORMAL
- en: if (b.authority.equals(authority)) {
  prefs: []
  type: TYPE_NORMAL
- en: return b;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '@Override'
  prefs: []
  type: TYPE_NORMAL
- en: public String toString() {
  prefs: []
  type: TYPE_NORMAL
- en: return String.valueOf(authority);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '@Override'
  prefs: []
  type: TYPE_NORMAL
- en: '@JsonValue'
  prefs: []
  type: TYPE_NORMAL
- en: public String getAuthority() {
  prefs: []
  type: TYPE_NORMAL
- en: return authority;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: public class Const {
  prefs: []
  type: TYPE_NORMAL
- en: public static final String ADMIN = "ROLE_ADMIN";
  prefs: []
  type: TYPE_NORMAL
- en: public static final String USER = "ROLE_USER";
  prefs: []
  type: TYPE_NORMAL
- en: public static final String CSR = "ROLE_CSR";
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: private Converter<Jwt, AbstractAuthenticationToken>   getJwtAuthenticationConverter()
    {
  prefs: []
  type: TYPE_NORMAL
- en: JwtGrantedAuthoritiesConverter authorityConverter =
  prefs: []
  type: TYPE_NORMAL
- en: new JwtGrantedAuthoritiesConverter();
  prefs: []
  type: TYPE_NORMAL
- en: authorityConverter.setAuthorityPrefix(AUTHORITY_PREFIX);
  prefs: []
  type: TYPE_NORMAL
- en: authorityConverter.setAuthoritiesClaimName(ROLE_CLAIM);
  prefs: []
  type: TYPE_NORMAL
- en: JwtAuthenticationConverter converter =
  prefs: []
  type: TYPE_NORMAL
- en: new JwtAuthenticationConverter();
  prefs: []
  type: TYPE_NORMAL
- en: converter.setJwtGrantedAuthoritiesConverter(authorityConverter);
  prefs: []
  type: TYPE_NORMAL
- en: return converter;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: .requestMatchers("/api/v1/addresses/**")     .hasAuthority(RoleEnum.ADMIN.getAuthority())
  prefs: []
  type: TYPE_NORMAL
- en: .anyRequest().authenticated())
  prefs: []
  type: TYPE_NORMAL
- en: .oauth2ResourceServer(oauth2ResourceServer ->
  prefs: []
  type: TYPE_NORMAL
- en: oauth2ResourceServer.jwt(jwt ->
  prefs: []
  type: TYPE_NORMAL
- en: jwt.jwtAuthenticationConverter(
  prefs: []
  type: TYPE_NORMAL
- en: getJwtAuthenticationConverter())))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '@Configuration@EnableWebSecurity'
  prefs: []
  type: TYPE_NORMAL
- en: '@EnableGlobalMethodSecurity(prePostEnabled = true)'
  prefs: []
  type: TYPE_NORMAL
- en: public class SecurityConfig {
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: For demonstration purposes, let's add the @PreAuthorize annotation to the deleteAddressesById()
    method, which is associated with DELETE /v1/auth/addresses/{id} in AddressController,
    as shown in the following code snippet:@PreAuthorize("hasRole('" + Const.ADMIN
    + "')")
  prefs: []
  type: TYPE_NORMAL
- en: '@Override'
  prefs: []
  type: TYPE_NORMAL
- en: public ResponseEntity<Void> deleteAddressesById(String id) {
  prefs: []
  type: TYPE_NORMAL
- en: service.deleteAddressesById(id);
  prefs: []
  type: TYPE_NORMAL
- en: return accepted().build();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '$ curl -v ''http://localhost:8080/api/v1/addresses'' -H ''Content- Type: application/json''
    -H ''Accept: application/json''< HTTP/1.1 401'
  prefs: []
  type: TYPE_NORMAL
- en: '< Vary: Origin'
  prefs: []
  type: TYPE_NORMAL
- en: '< Vary: Access-Control-Request-Method'
  prefs: []
  type: TYPE_NORMAL
- en: '< Vary: Access-Control-Request-Headers'
  prefs: []
  type: TYPE_NORMAL
- en: '< WWW-Authenticate: Bearer'
  prefs: []
  type: TYPE_NORMAL
- en: '< X-Content-Type-Options: nosniff'
  prefs: []
  type: TYPE_NORMAL
- en: '< X-XSS-Protection: 1; mode=block'
  prefs: []
  type: TYPE_NORMAL
- en: '< Cache-Control: no-cache, no-store, max-age=0, must'
  prefs: []
  type: TYPE_NORMAL
- en: revalidate
  prefs: []
  type: TYPE_NORMAL
- en: < Other information is removed for brevity
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '$ curl -v ''http://localhost:8080/api/v1/addresses'' -H ''Content-Type: application/json''
    -H ''Accept: application/json'' -H ''Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9…rest
    of the JWT string removed for brevity'''
  prefs: []
  type: TYPE_NORMAL
- en: < HTTP/1.1 401
  prefs: []
  type: TYPE_NORMAL
- en: '< Vary: Origin'
  prefs: []
  type: TYPE_NORMAL
- en: '< Vary: Access-Control-Request-Method'
  prefs: []
  type: TYPE_NORMAL
- en: '< Vary: Access-Control-Request-Headers'
  prefs: []
  type: TYPE_NORMAL
- en: '< WWW-Authenticate: Bearer'
  prefs: []
  type: TYPE_NORMAL
- en: < Other information is removed for brevity
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '$ curl -X POST http://localhost:8080/api/v1/auth/token -H  ''Accept: application/json''
    -H  ''Content-Type: application/json'' -d ''{    "username": "scott",'
  prefs: []
  type: TYPE_NORMAL
- en: '"password": "tiger"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'''
  prefs: []
  type: TYPE_NORMAL
- en: '{"refreshToken":"9rdk5b35faafkneqg9519s6p4tbbqcdt412t7h5st9savkonqnnd 5e8ntr334m8rffgo6bio1vglng1hqqse3igdonoabc971lpdgt3bjoc3je3m81ldp2au
    vimts8p6","accessToken":"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJzdWI iOiJzY290dCIsInJvbGVzIjpbIlVTRVIiXSwiaXNzIjoiTW9kZXJuIEFQSSBEZXZlbG9
    wbWVudCB3aXRoIFNwcmluZyBhbmQgU3ByaW5nIEJvb3QiLCJleHAiOjE2Nzc0OTYzMzk sImlhdCI6MTY3NzQ5NTQzOX0.a77O7ZbSAOw5v6Tb3w-MtBwotMEUvc1H1y2W0IU2QJh0m
    lSJxSBCfdrNBl0mVk1HnwX4kOpj4grbNasBjpIpHtyOLXdp-gngxdvVfaKSPuptrW4YzA3 ikxbUMWDdEtij_y2DRxJXQ6CrPTjA40L7yB_SXswnHT988Qq6ZALeGW-Lmz-vzAZiRcZUe
    6bPPn7F-p4lK_qi1nsUJ1rnWmmffLWCH37ztllcgh6bB1UJuOn9Hw2A1nQExfUutRKgFK0 -LxBUOKOKdRESOnJR9hwOL6v10IFl9xNm53LVMIcuJrndCxvmv7mv0fUOxY63UwhO9kOT
    RCXViGKCa3H8RxUFwG52q2nZelle_4I8CUSeDDdmD2Rlax2NyQNe-HHEJb9c91JSzhFm0 K0-c34-kiNGqaB3jljndHoGXCBLM5prphlSdlV4U9PYhmL8ZCaDv8q6rCPSAEcRoiOBPPn
    dxEApHKulj9vrO_p7K1T9dLamJSFJKw9Yz8M3_ngiE3qtEBQ3tEUFkZsJpGop5HIxrkB0O e7L_oETir_wUe1qs8AIZcKSwP9X6fpUuOlONKDpDc-f-n5PjEAvts3BcxuM8Jrw80F6z6T
    OJrcikrMt8DGaIXs2WHNP7C605l-JgwCVuZz_8S4LLtaCFnqq4xLU1Gy2qj5CBbALVoFcB fjoVLN2fq4","username":"scott","userId":"a1b9b31d-e73c-4112-af7c-b68530f38222"}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '$ curl -v ''http://localhost:8080/api/v1/addresses'' -H ''Content-Type: application/json''
    -H ''Accept: application/json'' -H ''Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGci…rest
    of the JWT string removed for brevity'''
  prefs: []
  type: TYPE_NORMAL
- en: < HTTP/1.1 403
  prefs: []
  type: TYPE_NORMAL
- en: '< Vary: Origin'
  prefs: []
  type: TYPE_NORMAL
- en: '< Vary: Access-Control-Request-Method'
  prefs: []
  type: TYPE_NORMAL
- en: '< Vary: Access-Control-Request-Headers'
  prefs: []
  type: TYPE_NORMAL
- en: '< WWW-Authenticate: Bearer error="insufficient_scope", error_description="The
    request requires higher privileges than provided by the access token.", error_uri="https://tools.ietf.org/html/rfc6750#section-3.1"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '$ curl -X POST http://localhost:8080/api/v1/auth/token -H  ''Accept: application/json''
    -H  ''Content-Type: application/json'' -d ''{    "username": "scott2",'
  prefs: []
  type: TYPE_NORMAL
- en: '"password": "tiger"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'''
  prefs: []
  type: TYPE_NORMAL
- en: '{"refreshToken":"a6hidhaeb8scj3p6kei61g4a649dghcf5jit1v6rba2mn92o0dm0g 6gs6qfh7suiv68p2em0t0nnue8unm10bg079f39590jig0sccisecim5ep3ipuiu29ceao
    c793h","accessToken":"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9…","usernam e":"scott2","userId":"a1b9b31d-e73c-4112-af7c-b68530f38223"}'
  prefs: []
  type: TYPE_NORMAL
- en: Some of the output removed for brevity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '$ curl -v ''http://localhost:8080/api/v1/addresses'' -H ''Content-Type: application/json''
    -H ''Accept: application/json'' -H ''Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9…'''
  prefs: []
  type: TYPE_NORMAL
- en: '[{"links":[{"rel":"self","href":"http://localhost:8080/a731fda1-aaad-42ea-bdbc-a27eeebe2cc0"},{"rel":"self","href":"http://localhost:8080/api/v1/addresses/a731fda1-aaad-42ea-bdbc-a27eeebe2cc0"}],"id":"a731fda1-aaad-42ea-bdbc-a27eeebe2cc0","number":"9I-999","residency":"Fraser
    Suites Le Claridge","street":"Champs-Elysees","city":"Paris","state":"Île-de-France","country":"France","pincode":"75008"}]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '$  curl -X POST ''http://localhost:8080/api/v1/auth/token/refresh'' -H ''Content-Type:
    application/json'' -H ''Accept: application/json'' -d ''{"refreshToken": "a6hidhaeb8scj3p6kei61g4a649dghcf5jit1v6rba2mn92o0dm0
    g6gs6qfh7suiv68p2em0t0nnue8unm10bg079f39590jig0sccisecim5ep3ipuiu29ce aoc793h"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'''
  prefs: []
  type: TYPE_NORMAL
- en: '{"refreshToken":"a6hidhaeb8scj3p6kei61g4a649dghcf5jit1v6rba2mn92o0dm0g 6gs6qfh7suiv68p2em0t0nnue8unm10bg079f39590jig0sccisecim5ep3ipuiu29ceao
    c793h","accessToken":"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9… rest of the token
    truncated for brevity","username":"scott2","userId":"a1b9b31d-e73c-4112-af7c-b68530f38223"}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '{  "errorCode":"PACKT-0010",'
  prefs: []
  type: TYPE_NORMAL
- en: '"message":"Requested resource not found. Invalidtoken.",'
  prefs: []
  type: TYPE_NORMAL
- en: '"status":404,'
  prefs: []
  type: TYPE_NORMAL
- en: '"url":"http://localhost:8080/api/v1/auth/token/refresh",'
  prefs: []
  type: TYPE_NORMAL
- en: '"reqMethod":"POST","timestamp":"2023-02-27T11:13:27.183172Z"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Object principal = SecurityContextHolder                   .getContext().getAuthentication()                   .getPrincipal();if
    (principal instanceof UserDetails) {  String username =              ((UserDetails)principal).getUsername();}
    else {  String username = principal.toString();}
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
