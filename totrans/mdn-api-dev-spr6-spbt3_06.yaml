- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Securing REST Endpoints Using Authorization and Authentication
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用授权和认证保护 REST 端点
- en: In previous chapters, we developed a RESTful web service using imperative and
    reactive coding styles. Now, you’ll learn how you can secure these REST endpoints
    using Spring Security. You’ll implement token-based authentication and authorization
    for REST endpoints. A successful authentication provides two types of tokens –
    a **JavaScript Object Notation** (**JSON**) **Web Token** (**JWT**) as an access
    token, and a refresh token in response. This JWT-based access token is then used
    to access the secured **Uniform Resource Locators** (**URLs**). A refresh token
    is used to request a new JWT if the existing JWT has expired, and a valid request
    token provides a new JWT to use.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们使用命令式和响应式编程风格开发了一个 RESTful Web 服务。现在，您将学习如何使用 Spring Security 保护这些
    REST 端点。您将为 REST 端点实现基于令牌的认证和授权。成功的认证会提供两种类型的令牌——一个作为访问令牌的 **JavaScript 对象表示法**（**JSON**）**Web
    令牌**（**JWT**），以及一个响应中的刷新令牌。这个基于 JWT 的访问令牌随后用于访问受保护的 **统一资源定位符**（**URL**）。刷新令牌用于在现有
    JWT 过期时请求新的 JWT，一个有效的请求令牌会提供一个新 JWT 以供使用。
- en: You’ll associate users with roles such as *admin* and *user*. These roles will
    be used as authorization to make sure that REST endpoints can only be accessed
    if a user holds certain roles. We’ll also briefly discuss **cross-site request
    forgery** (**CSRF**) and **cross-origin resource** **sharing** (**CORS**).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 您将把用户关联到如 *admin* 和 *user* 这样的角色。这些角色将用作授权，以确保只有当用户拥有某些角色时才能访问 REST 端点。我们还将简要讨论
    **跨站请求伪造**（**CSRF**）和 **跨源资源共享**（**CORS**）。
- en: 'The topics of this chapter are divided into the following sections:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主题分为以下几节：
- en: Implementing authentication using Spring Security and JWTs
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Spring Security 和 JWT 实现认证
- en: Securing REST APIs with JWTs
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 JWT 保护 REST API
- en: Configuring CORS and CSRF
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 CORS 和 CSRF
- en: Understanding authorization
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解授权
- en: Testing security
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试安全性
- en: By the end of the chapter, you will know how to implement authentication and
    authorization using Spring Security and protect your web service from CORS and
    CSRF attacks.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将了解如何使用 Spring Security 实现认证和授权，并保护您的 Web 服务免受 CORS 和 CSRF 攻击。
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The code for this chapter is available at [https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/tree/main/Chapter06](https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/tree/main/Chapter06).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可在 [https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/tree/main/Chapter06](https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/tree/main/Chapter06)
    找到。
- en: "Implementing authentication using Spring Security \Land JWT"
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Spring Security 和 JWT 实现认证
- en: Spring Security is a framework consisting of a collection of libraries that
    allow you to implement enterprise application security without worrying about
    writing boilerplate code. In this chapter, we will use the Spring Security framework
    to implement token-based (JWT) authentication and authorization. Throughout the
    course of this chapter, you will also learn about CORS and CSRF configuration.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security 是一个由一系列库组成的框架，它允许您在不担心编写样板代码的情况下实现企业级应用的安全性。在本章中，我们将使用 Spring
    Security 框架来实现基于令牌（JWT）的认证和授权。在本章的整个过程中，您还将了解 CORS 和 CSRF 配置。
- en: It’s useful to know that Spring Security also provides support for opaque tokens,
    just like it does for JWTs. The main difference between them is how information
    is read from the token. You can’t read the information from an opaque token the
    way you can with a JWT – only the issuer is aware of how to do this.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 了解 Spring Security 也为不透明令牌提供支持，就像它为 JWT 提供支持一样。它们之间的主要区别在于从令牌中读取信息的方式。您不能像从
    JWT 中那样读取不透明令牌的信息——只有发行者知道如何这样做。
- en: Note
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: A token is a string of characters such as
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 令牌是一系列字符，例如
- en: '`5rm1tc1obfshrm2354lu9dlt5reqm1ddjchqh81 7rbk37q95b768bib0j``f44df6suk1638sf78cef7`
    `hfolg4ap3bkighbnk7inr68ke780744fpej0gtd 9qflm999o8q`.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`5rm1tc1obfshrm2354lu9dlt5reqm1ddjchqh81 7rbk37q95b768bib0j``f44df6suk1638sf78cef7`
    `hfolg4ap3bkighbnk7inr68ke780744fpej0gtd 9qflm999o8q`。'
- en: It allows you to call secured HTTP endpoints or resources that are stateless
    by using various authorization flows.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 它允许您通过使用各种授权流程来调用受保护的无状态 HTTP 端点或资源。
- en: You learned about `DispatcherServlet` in [*Chapter 2*](B19349_02.xhtml#_idTextAnchor048),
    *Spring Concepts and REST APIs*. This is an interface between a client request
    and the REST controller. Therefore, if you want to place logic for token-based
    authentication and authorization, you will have to do this before a request reaches
    `DispatcherServlet`. Spring Security libraries provide the servlet with pre-filters
    (as a part of the filter chain), which are processed before the request reaches
    `DispatcherServlet`. A `DispatcherServlet`. Similarly, **post-filters** get processed
    after a request has been processed by the servlet/controller.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`You learned about `DispatcherServlet` in [*Chapter 2*](B19349_02.xhtml#_idTextAnchor048),
    *Spring Concepts and REST APIs*. This is an interface between a client request
    and the REST controller. Therefore, if you want to place logic for token-based
    authentication and authorization, you will have to do this before a request reaches
    `DispatcherServlet`. Spring Security libraries provide the servlet with pre-filters
    (as a part of the filter chain), which are processed before the request reaches
    `DispatcherServlet`. A `DispatcherServlet`. Similarly, **post-filters** get processed
    after a request has been processed by the servlet/controller.'
- en: There are two ways you can implement token-based (JWT) authentication – by using
    either `spring-boot-starter-security` or `spring-boot-starter-oauth2-resource-server`.
    We will use the latter because it does the boilerplate configuration for us.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`There are two ways you can implement token-based (JWT) authentication – by
    using either `spring-boot-starter-security` or `spring-boot-starter-oauth2-resource-server`.
    We will use the latter because it does the boilerplate configuration for us.`'
- en: 'The former contains the following libraries:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 前者包含以下库：
- en: '`spring-security-core`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '``spring-security-core```'
- en: '`spring-security-config`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '``spring-security-config```'
- en: '`spring-security-web`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '``spring-security-web```'
- en: '`spring-boot-starter-oauth2-resource-server` provides the following, along
    with all three preceding **Java ARchive** (**JAR**) files:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '``spring-boot-starter-oauth2-resource-server``` 提供以下内容，以及所有三个先前的 **Java ARchive**
    (**JAR**) 文件：'
- en: '`spring-security-oauth2-core`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '``spring-security-oauth2-core```'
- en: '`spring-security-oauth2-jose`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '``spring-security-oauth2-jose```'
- en: '`spring-security-oauth2-resource-server`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '``spring-security-oauth2-resource-server```'
- en: 'When you start this chapter’s code, you will find the following log. You can
    see that, by default, `DefaultSecurityFilterChain` is `auto-configured`. The `log`
    statement lists the configured filters in `DefaultSecurityFilterChain`, as shown
    in the following log block:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`When you start this chapter’s code, you will find the following log. You can
    see that, by default, `DefaultSecurityFilterChain` is `auto-configured`. The `log`
    statement lists the configured filters in `DefaultSecurityFilterChain`, as shown
    in the following log block:`'
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'implementation
    'com.auth0:java-jwt:4.3.0'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`implementation ''org.springframework.boot:spring-boot-starter-oauth2-resource-server''
    implementation ''com.auth0:java-jwt:4.3.0''`'
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Bearer error="invalid_token", error_description="An error occurred while attempting
    to decode the Jwt: Jwt expired at 2022-12-14T17:23:30Z", error_uri="https://tools.ietf.
    org/html/rfc6750#section-3.1".'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Bearer error="invalid_token", error_description="An error occurred while attempting
    to decode the Jwt: Jwt expired at 2022-12-14T17:23:30Z", error_uri="https://tools.ietf.
    org/html/rfc6750#section-3.1".`'
- en: '[PRE2]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5
    MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c`'
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '{  "alg": "HS256",'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`{  "alg": "HS256",`'
- en: '"typ": "JWT"'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`"typ": "JWT"`'
- en: '}'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '{  "sub": "scott2",'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`{  "sub": "scott2",`'
- en: '"roles": ['
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`"roles": [`'
- en: '"ADMIN"'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`"ADMIN"`'
- en: '],'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`],`'
- en: '"iss": "Modern API Development with Spring and'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`"iss": "Modern API Development with Spring and`'
- en: Spring Boot",
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`Spring Boot`'
- en: '"exp": 1676526792,'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`"exp": 1676526792,`'
- en: '"iat": 1676525892'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`"iat": 1676525892`'
- en: '}'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '/api/v1/users:  post:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`/api/v1/users:  post:`'
- en: 'tags:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`tags:`'
- en: '- user'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`- user`'
- en: 'summary: Signup the a new customer (user)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`summary: Signup the a new customer (user)`'
- en: 'description: Creates a new customer (user)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`description: Creates a new customer (user)`'
- en: 'operationId: signUp'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`operationId: signUp`'
- en: 'requestBody:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`requestBody:`'
- en: 'content:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`content:`'
- en: 'application/xml:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`application/xml:`'
- en: 'schema:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`schema:`'
- en: '$ref: ''#/components/schemas/User'''
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`$ref: ''#/components/schemas/User''`'
- en: 'application/json:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`application/json:`'
- en: 'schema:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`schema:`'
- en: '$ref: ''#/components/schemas/User'''
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`$ref: ''#/components/schemas/User''`'
- en: 'responses:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`responses:`'
- en: '201:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`201:`'
- en: 'description: For successful user creation.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`description: For successful user creation.`'
- en: 'content:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`content:`'
- en: 'application/xml:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`application/xml:`'
- en: 'schema:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`schema:`'
- en: '$ref: ''#/components/schemas/SignedInUser'''
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`$ref: ''#/components/schemas/SignedInUser''`'
- en: 'application/json:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`application/json:`'
- en: 'schema:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`schema:`'
- en: '$ref: ''#/components/schemas/SignedInUser'''
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`$ref: ''#/components/schemas/SignedInUser''`'
- en: '[PRE6]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'SignedInUser:  description: Signed-in user information'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`SignedInUser:  description: Signed-in user information`'
- en: 'type: object'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`type: object`'
- en: 'properties:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`properties:`'
- en: 'refreshToken:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`refreshToken:`'
- en: 'description: Refresh Token'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`description: Refresh Token`'
- en: 'type: string'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`type: string`'
- en: 'accessToken:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`accessToken:`'
- en: 'description: JWT Token aka access token'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`description: JWT Token aka access token`'
- en: 'type: string'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`type: string`'
- en: 'username:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`username:`'
- en: 'description: User Name'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`description: User Name`'
- en: 'type: string'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`type: string`'
- en: 'userId:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`userId:`'
- en: 'description: User Identifier'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`description: User Identifier`'
- en: 'type: string'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`type: string`'
- en: '[PRE7]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '/api/v1/auth/token:  post:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`/api/v1/auth/token:  post:`'
- en: 'tags:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`tags:`'
- en: '- user'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`- user`'
- en: 'summary: Signin the customer (user)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 'summary: Signin the customer (user)'
- en: 'description: Generates the JWT and refresh token'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 'description: Generates the JWT and refresh token'
- en: 'operationId: signIn'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 'operationId: signIn'
- en: 'requestBody:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 'requestBody:'
- en: 'content:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 'content:'
- en: 'application/xml:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 'application/xml:'
- en: 'schema:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 'schema:'
- en: '$ref: ''#/components/schemas/SignInReq'''
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '$ref: ''#/components/schemas/SignInReq'''
- en: 'application/json:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 'application/json:'
- en: 'schema:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 'schema:'
- en: '$ref: ''#/components/schemas/SignInReq'''
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '$ref: ''#/components/schemas/SignInReq'''
- en: 'responses:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 'responses:'
- en: '200:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '200:'
- en: 'description: Returns the access and refresh token.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 'description: Returns the access and refresh token.'
- en: 'content:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 'content:'
- en: 'application/xml:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 'application/xml:'
- en: 'schema:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 'schema:'
- en: '$ref: ''#/components/schemas/SignedInUser'''
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '$ref: ''#/components/schemas/SignedInUser'''
- en: 'application/json:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 'application/json:'
- en: 'schema:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 'schema:'
- en: '$ref: ''#/components/schemas/SignedInUser'''
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '$ref: ''#/components/schemas/SignedInUser'''
- en: '[PRE8]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'SignInReq:  description: Request body for Sign-in'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 'SignInReq:  description: Request body for Sign-in'
- en: 'type: object'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 'type: object'
- en: 'properties:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 'properties:'
- en: 'username:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 'username:'
- en: 'description: username of the User'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 'description: username of the User'
- en: 'type: string'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 'type: string'
- en: 'password:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 'password:'
- en: 'description: password of the User'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 'description: password of the User'
- en: 'type: string'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 'type: string'
- en: '[PRE9]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Under the /api/v1/auth/tokendelete:'
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'Under the /api/v1/auth/tokendelete:'
- en: 'tags:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 'tags:'
- en: '- user'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '- user'
- en: 'summary: Signouts the customer (user)'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 'summary: Signouts the customer (user)'
- en: 'description: Signouts the customer (user).'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 'description: Signouts the customer (user).'
- en: 'operationId: signOut'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 'operationId: signOut'
- en: 'requestBody:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 'requestBody:'
- en: 'content:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 'content:'
- en: 'application/xml:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 'application/xml:'
- en: 'schema:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 'schema:'
- en: '$ref: ''#/components/schemas/RefreshToken'''
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '$ref: ''#/components/schemas/RefreshToken'''
- en: 'application/json:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 'application/json:'
- en: 'schema:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 'schema:'
- en: '$ref: ''#/components/schemas/RefreshToken'''
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '$ref: ''#/components/schemas/RefreshToken'''
- en: 'responses:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 'responses:'
- en: '202:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '202:'
- en: 'description: Accepts the request for logout.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 'description: Accepts the request for logout.'
- en: '[PRE10]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'RefreshToken:  description: Contains the refresh token'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 'RefreshToken:  description: Contains the refresh token'
- en: 'type: object'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 'type: object'
- en: 'properties:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 'properties:'
- en: 'refreshToken:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 'refreshToken:'
- en: 'description: Refresh Token'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 'description: Refresh Token'
- en: 'type: string'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 'type: string'
- en: '[PRE11]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '/api/v1/auth/token/refresh:  post:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '/api/v1/auth/token/refresh:  post:'
- en: 'tags:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 'tags:'
- en: '- user'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '- user'
- en: 'summary: Provides new JWT based on valid refresh token.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 'summary: Provides new JWT based on valid refresh token.'
- en: 'description: Provides JWT based on valid refresh token.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 'description: Provides JWT based on valid refresh token.'
- en: 'operationId: getAccessToken'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 'operationId: getAccessToken'
- en: 'requestBody:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 'requestBody:'
- en: 'content:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 'content:'
- en: 'application/json:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 'application/json:'
- en: 'schema:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 'schema:'
- en: '$ref: ''#/components/schemas/RefreshToken'''
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '$ref: ''#/components/schemas/RefreshToken'''
- en: 'responses:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 'responses:'
- en: '200:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '200:'
- en: 'description: For successful operation.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 'description: For successful operation.'
- en: 'content:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 'content:'
- en: 'application/json:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 'application/json:'
- en: 'schema:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 'schema:'
- en: '$ref: ''#/components/schemas/SignedInUser'''
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '$ref: ''#/components/schemas/SignedInUser'''
- en: '[PRE12]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: create TABLE IF NOT EXISTS ecomm.user_token (   id uuid NOT NULL DEFAULT random_uuid(),
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: create TABLE IF NOT EXISTS ecomm.user_token (   id uuid NOT NULL DEFAULT random_uuid(),
- en: refresh_token varchar(128),
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: refresh_token varchar(128),
- en: user_id uuid NOT NULL,
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: user_id uuid NOT NULL,
- en: PRIMARY KEY(id),
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: PRIMARY KEY(id),
- en: FOREIGN KEY (user_id)
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: FOREIGN KEY (user_id)
- en: REFERENCES ecomm."user"(id)
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: REFERENCES ecomm."user"(id)
- en: );
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '[PRE13]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: public class Constants {  public static final String ENCODER_ID = "bcrypt";
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: public class Constants {  public static final String ENCODER_ID = "bcrypt";
- en: public static final String API_URL_PREFIX = "/api/v1/**";
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: public static final String API_URL_PREFIX = "/api/v1/**";
- en: public static final String H2_URL_PREFIX = "/h2-console/**";
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: public static final String H2_URL_PREFIX = "/h2-console/**";
- en: public static final String SIGNUP_URL = "/api/v1/users";
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: public static final String SIGNUP_URL = "/api/v1/users";
- en: public static final String TOKEN_URL = "/api/v1/auth/token";
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: public static final String TOKEN_URL = "/api/v1/auth/token";
- en: public static final String REFRESH_URL =
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: public static final String REFRESH_URL =
- en: '"/api/v1/auth/token/refresh";'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '"/api/v1/auth/token/refresh";'
- en: public static final String PRODUCTS_URL =
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: public static final String PRODUCTS_URL =
- en: '"/api/v1/products/**";'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '"/api/v1/products/**";'
- en: public static final String AUTHORIZATION =
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: public static final String AUTHORIZATION =
- en: '"Authorization";'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '"Authorization";'
- en: public static final String TOKEN_PREFIX = "Bearer ";
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: public static final String TOKEN_PREFIX = "Bearer ";
- en: public static final String SECRET_KEY = "SECRET_KEY";
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: public static final String SECRET_KEY = "SECRET_KEY";
- en: public static final long EXPIRATION_TIME = 900_000;
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: public static final long EXPIRATION_TIME = 900_000;
- en: public static final String ROLE_CLAIM = "roles";
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: public static final String ROLE_CLAIM = "roles";
- en: public static final String AUTHORITY_PREFIX = "ROLE_";
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: public static final String AUTHORITY_PREFIX = "ROLE_";
- en: '}'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE14]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '@Componentpublic class JwtManager {'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '@Componentpublic class JwtManager {'
- en: private final RSAPrivateKey privateKey;
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: private final RSAPrivateKey privateKey;
- en: private final RSAPublicKey publicKey;
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: private final RSAPublicKey publicKey;
- en: public JwtManager(@Lazy RSAPrivateKey privateKey,
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: public JwtManager(@Lazy RSAPrivateKey privateKey,
- en: '@Lazy RSAPublicKey publicKey) {'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '@Lazy RSAPublicKey publicKey) {'
- en: this.privateKey = privateKey;
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: this.privateKey = privateKey;
- en: this.publicKey = publicKey;
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: this.publicKey = publicKey;
- en: '}'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: public String create(UserDetails principal) {
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: public String create(UserDetails principal) {
- en: final long now = System.currentTimeMillis();
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: final long now = System.currentTimeMillis();
- en: return JWT.create()
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: return JWT.create()
- en: .withIssuer("Modern API Development with Spring…")
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: .withIssuer("Modern API Development with Spring…")
- en: .withSubject(principal.getUsername())
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: .withSubject(principal.getUsername())
- en: .withClaim(
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: .withClaim(
- en: ROLE_CLAIM,
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: ROLE_CLAIM,
- en: principal.getAuthorities().stream()
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: principal.getAuthorities().stream()
- en: .map(GrantedAuthority::getAuthority)
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: .map(GrantedAuthority::getAuthority)
- en: .collect(toList()))
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: .collect(toList()))
- en: .withIssuedAt(new Date(now))
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: .withIssuedAt(new Date(now))
- en: .withExpiresAt(new Date(now + EXPIRATION_TIME))
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: .withExpiresAt(new Date(now + EXPIRATION_TIME))
- en: .sign(Algorithm.RSA256(publicKey, privateKey));
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: .sign(Algorithm.RSA256(publicKey, privateKey));
- en: '}'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE15]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '$ keytool -genkey -alias "jwt-sign-key" -keyalg RSA -keystore jwt-keystore.jks
    -keysize 4096Enter keystore password:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: $ keytool -genkey -alias "jwt-sign-key" -keyalg RSA -keystore jwt-keystore.jks
    -keysize 4096输入keystore密码：
- en: 'Re-enter new password:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 重新输入新密码：
- en: What is your first and last name?
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 请输入您的姓名和姓氏？
- en: '[Unknown]: Modern API Development'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '[Unknown]: 现代API开发'
- en: What is the name of your organizational unit?
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 请输入您组织单位的名称？
- en: '[Unknown]: Org Unit'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '[Unknown]: 组织单位'
- en: What is the name of your organization?
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 请输入您组织的名称？
- en: '[Unknown]: Packt'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '[Unknown]: Packt'
- en: What is the name of your City or Locality?
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 请输入您城市或地区的名称？
- en: '[Unknown]: City'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '[Unknown]: 城市'
- en: What is the name of your State or Province?
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 请输入您州或省的名称？
- en: '[Unknown]: State'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '[Unknown]: 州'
- en: What is the two-letter country code for this unit?
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 请输入此单位的两位字母国家代码？
- en: '[Unknown]: IN'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '[Unknown]: 进口'
- en: Securing REST APIs with JWT 191
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 使用JWT保护REST API 191
- en: Is CN=Modern API Development, OU=Org Unit, O=Packt, L=City, ST=State, C=IN correct?
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: CN=现代API开发, OU=组织单位, O=Packt, L=城市, ST=州, C=IN 是否正确？
- en: '[no]: yes'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '[no]: 是'
- en: Generating 4,096 bit RSA key pair and self-signed certificate (SHA384withRSA)
    with a validity of 90 days
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 生成4,096位RSA密钥对和自签名证书（SHA384withRSA），有效期90天
- en: 'for: CN=Modern API Development, OU=Org Unit, O=Packt, L=City, ST=State, C=IN'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 'for: CN=现代API开发, OU=组织单位, O=Packt, L=城市, ST=州, C=IN'
- en: '[PRE16]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: app.security.jwt.keystore-location=jwt-keystore.jksapp.security.jwt.keystore-password=password
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: app.security.jwt.keystore-location=jwt-keystore.jksapp.security.jwt.keystore-password=password
- en: app.security.jwt.key-alias=jwt-sign-key
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: app.security.jwt.key-alias=jwt-sign-key
- en: app.security.jwt.private-key-passphrase=password
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: app.security.jwt.private-key-passphrase=password
- en: '[PRE17]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '@Configuration@EnableWebSecurity'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '@Configuration@EnableWebSecurity'
- en: '@EnableGlobalMethodSecurity(prePostEnabled = true)'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '@EnableGlobalMethodSecurity(prePostEnabled = true)'
- en: public class SecurityConfig {
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: public class SecurityConfig {
- en: '@Value("${app.security.jwt.keystore-location}")'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '@Value("${app.security.jwt.keystore-location}")'
- en: private String keyStorePath;
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: private String keyStorePath;
- en: '@Value("${app.security.jwt.keystore-password}")'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '@Value("${app.security.jwt.keystore-password}")'
- en: private String keyStorePassword;
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: private String keyStorePassword;
- en: '@Value("${app.security.jwt.key-alias}")'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '@Value("${app.security.jwt.key-alias}")'
- en: private String keyAlias;
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: private String keyAlias;
- en: '@Value("${app.security.jwt.private-key-passphrase}")'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '@Value("${app.security.jwt.private-key-passphrase}")'
- en: private String privateKeyPassphrase;
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: private String privateKeyPassphrase;
- en: …
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: …
- en: …
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: …
- en: '}'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE18]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '@Beanpublic KeyStore keyStore() {'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '@Beanpublic KeyStore keyStore() {'
- en: try {
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: try {
- en: KeyStore keyStore =
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: KeyStore keyStore =
- en: KeyStore.getInstance(KeyStore.getDefaultType());
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: KeyStore.getInstance(KeyStore.getDefaultType());
- en: InputStream resStream = Thread.currentThread().
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: InputStream resStream = Thread.currentThread().
- en: getContextClassLoader().getResourceAsStream
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: getContextClassLoader().getResourceAsStream
- en: (keyStorePath);
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: (keyStorePath);
- en: keyStore.load(resStream, keyStorePassword.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: keyStore.load(resStream, keyStorePassword.
- en: toCharArray());
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: toCharArray());
- en: return keyStore;
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: return keyStore;
- en: '} catch (IOException | CertificateException |'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '} catch (IOException | CertificateException |'
- en: NoSuchAlgorithmException | KeyStoreException e) {
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: NoSuchAlgorithmException | KeyStoreException e) {
- en: 'LOG.error("Unable to load keystore: {}",'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 'LOG.error("无法加载keystore: {}", keyStorePath, e);'
- en: keyStorePath, e);
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: keyStorePath, e);
- en: '}'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: throw new IllegalArgumentException
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: throw new IllegalArgumentException
- en: ("Can't load keystore");
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: ("无法加载keystore");
- en: '}'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE19]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '@Beanpublic RSAPrivateKey jwtSigningKey(KeyStore keyStore) {'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '@Beanpublic RSAPrivateKey jwtSigningKey(KeyStore keyStore) {'
- en: try {
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: try {
- en: Key key = keyStore.getKey(keyAlias,
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: Key key = keyStore.getKey(keyAlias,
- en: privateKeyPassphrase.toCharArray());
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: privateKeyPassphrase.toCharArray());
- en: if (key instanceof RSAPrivateKey) {
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: if (key instanceof RSAPrivateKey) {
- en: return (RSAPrivateKey) key;
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: return (RSAPrivateKey) key;
- en: '}'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '} catch (UnrecoverableKeyException |'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '} catch (UnrecoverableKeyException |'
- en: NoSuchAlgorithmException | KeyStoreException e) {
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: NoSuchAlgorithmException | KeyStoreException e) {
- en: 'LOG.error("key from keystore: {}", keyStorePath, e);'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 'LOG.error("keystore中的密钥: {}", keyStorePath, e);'
- en: '}'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: throw new IllegalArgumentException("Cant load
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: throw new IllegalArgumentException("无法加载
- en: private key");
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: private key");
- en: '}'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE20]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '@Beanpublic RSAPublicKey jwtValidationKey(KeyStore keyStore) {'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '@Beanpublic RSAPublicKey jwtValidationKey(KeyStore keyStore) {'
- en: try {
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: try {
- en: Certificate certificate = keyStore.getCertificate
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: Certificate certificate = keyStore.getCertificate
- en: (keyAlias);
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: (keyAlias);
- en: PublicKey publicKey = certificate.getPublicKey();
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: PublicKey publicKey = certificate.getPublicKey();
- en: if (publicKey instanceof RSAPublicKey) {
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: if (publicKey instanceof RSAPublicKey) {
- en: return (RSAPublicKey) publicKey;
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: return (RSAPublicKey) publicKey;
- en: '}'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '} catch (KeyStoreException e) {'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '} catch (KeyStoreException e) {'
- en: 'LOG.error("key from keystore: {}", keyStorePath, e);'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 'LOG.error("keystore中的密钥: {}", keyStorePath, e);'
- en: '}'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: throw new IllegalArgumentException("Can't load public key");
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: throw new IllegalArgumentException("无法加载公钥");
- en: '}'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE21]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '@Beanpublic JwtDecoder jwtDecoder(RSAPublicKey rsaPublicKey) {'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '@Beanpublic JwtDecoder jwtDecoder(RSAPublicKey rsaPublicKey) {'
- en: return NimbusJwtDecoder.withPublicKey(rsaPublicKey).build();
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: return NimbusJwtDecoder.withPublicKey(rsaPublicKey).build();
- en: '}'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE22]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '@Entity@Table(name = "user_token")'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '@Entity@Table(name = "user_token")'
- en: public class UserTokenEntity {
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: public class UserTokenEntity {
- en: '@Id'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '@Id'
- en: '@GeneratedValue'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '@GeneratedValue'
- en: '@Column(name = "ID", updatable = false, nullable = false)'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '@Column(name = "ID", updatable = false, nullable = false)'
- en: private UUID id;
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: private UUID id;
- en: '@NotNull(message = "Refresh token is required.")'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '@NotNull(message = "刷新令牌是必需的。")'
- en: '@Basic(optional = false)'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '@Basic(optional = false)'
- en: '@Column(name = "refresh_token")'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '@Column(name = "refresh_token")'
- en: private String refreshToken;
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: private String refreshToken;
- en: '@ManyToOne(fetch = FetchType.LAZY)'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '@ManyToOne(fetch = FetchType.LAZY)'
- en: private UserEntity user;
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: private UserEntity user;
- en: …
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: …
- en: …
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: …
- en: '}'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE23]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: public interface UserTokenRepository extends   CrudRepository<UserTokenEntity,
    UUID> {
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: public interface UserTokenRepository extends   CrudRepository<UserTokenEntity,
    UUID> {
- en: Optional<UserTokenEntity> findByRefreshToken
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: Optional<UserTokenEntity> findByRefreshToken
- en: (StringrefreshToken);
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: (StringrefreshToken);
- en: Optional<UserTokenEntity> deleteByUserId(UUID userId);
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: Optional<UserTokenEntity> deleteByUserId(UUID userId);
- en: '}'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE24]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: UserEntity findUserByUsername(String username);Optional<SignedInUser> createUser(User
    user);
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: UserEntity findUserByUsername(String username);Optional<SignedInUser> createUser(User
    user);
- en: SignedInUser getSignedInUser(UserEntity userEntity); Optional<SignedInUser>
    getAccessToken(RefreshToken refToken);
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: SignedInUser getSignedInUser(UserEntity userEntity); Optional<SignedInUser>
    getAccessToken(RefreshToken refToken);
- en: void removeRefreshToken(RefreshToken refreshToken);
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: void removeRefreshToken(RefreshToken refreshToken);
- en: '[PRE25]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: public UserEntity findUserByUsername(String username) {  if (Strings.isBlank(username))
    {
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: public UserEntity findUserByUsername(String username) {  if (Strings.isBlank(username))
    {
- en: throw new UsernameNotFoundException("Invalid user.");
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: throw new UsernameNotFoundException("无效用户。");
- en: '}'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: final String uname = username.trim();
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: final String uname = username.trim();
- en: Optional<UserEntity> oUserEntity =
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: Optional<UserEntity> oUserEntity =
- en: repository.findByUsername(uname);
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: repository.findByUsername(uname);
- en: UserEntity userEntity = oUserEntity.orElseThrow
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: UserEntity userEntity = oUserEntity.orElseThrow
- en: (() -> new UsernameNotFoundException(String.format(
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: (() -> new UsernameNotFoundException(String.format(
- en: '"Given user(%s) not found.", uname)));'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '"给定用户(%s)未找到。", uname)));'
- en: return userEntity;
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: return userEntity;
- en: '}'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE26]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '@Transactionalpublic Optional<SignedInUser> createUser(User user) {'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '@Transactionalpublic Optional<SignedInUser> createUser(User user) {'
- en: Integer count = repository.findByUsernameOrEmail(
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: Integer count = repository.findByUsernameOrEmail(
- en: user.getUsername(), user.getEmail());
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: user.getUsername(), user.getEmail());
- en: if (count > 0) {
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: if (count > 0) {
- en: throw new GenericAlreadyExistsException
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: throw new GenericAlreadyExistsException
- en: ("Use different username and email.");
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: ("使用不同的用户名和电子邮件。");
- en: '}'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: UserEntity userEntity = repository.save(toEntity(user));
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: UserEntity userEntity = repository.save(toEntity(user));
- en: return Optional.of(createSignedUserWithRefreshToken(
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: return Optional.of(createSignedUserWithRefreshToken(
- en: userEntity));
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: userEntity));
- en: '}'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE27]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: private SignedInUser createSignedUserWithRefreshToken(   UserEntity userEntity)
    {
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: private SignedInUser createSignedUserWithRefreshToken(   UserEntity userEntity)
    {
- en: return createSignedInUser(userEntity)
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: return createSignedInUser(userEntity)
- en: .refreshToken(createRefreshToken(userEntity));
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: .refreshToken(createRefreshToken(userEntity));
- en: '}'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE28]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: private SignedInUser createSignedInUser(UserEntity uEntity) {  String token
    = tokenManager.create(
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: private SignedInUser createSignedInUser(UserEntity uEntity) {  String token
    = tokenManager.create(
- en: org.springframework.security.core.userdetails
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: org.springframework.security.core.userdetails
- en: .User.builder()
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: .User.builder()
- en: .username(userEntity.getUsername())
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: .username(userEntity.getUsername())
- en: .password(userEntity.getPassword())
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: .password(userEntity.getPassword())
- en: .authorities(Objects.nonNull
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: .authorities(Objects.nonNull
- en: (userEntity.getRole()) ?
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: (userEntity.getRole()) ?
- en: 'userEntity.getRole().name() : "")'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 'userEntity.getRole().name() : "")'
- en: .build());
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: .build());
- en: return new SignedInUser()
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: return new SignedInUser()
- en: .username(userEntity.getUsername())
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: .username(userEntity.getUsername())
- en: .accessToken(token)
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: .accessToken(token)
- en: .userId(userEntity.getId().toString());
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: .userId(userEntity.getId().toString());
- en: '}'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: private String createRefreshToken(UserEntity user) {
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: private String createRefreshToken(UserEntity user) {
- en: String token = RandomHolder.randomKey(128);
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: String token = RandomHolder.randomKey(128);
- en: userTokenRepository.save(new UserTokenEntity().
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: userTokenRepository.save(new UserTokenEntity().
- en: setRefreshToken(token).setUser(user));
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: setRefreshToken(token).setUser(user));
- en: return token;
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: return token;
- en: '}'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE29]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: // https://stackoverflow.com/a/31214709/109354private static class RandomHolder
    {
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: // https://stackoverflow.com/a/31214709/109354private static class RandomHolder
    {
- en: static final Random random = new SecureRandom();
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: static final Random random = new SecureRandom();
- en: public static String randomKey(int length) {
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: public static String randomKey(int length) {
- en: return String.format("%"+length+"s",new BigInteger
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: return String.format("%"+length+"s",new BigInteger
- en: (length * 5 /*base32, 2^5*/,random).toString(32)).
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: (length * 5 /*base32, 2^5*/,random).toString(32)).
- en: replace('\u0020', '0');
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: replace('\u0020', '0');
- en: '}'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE30]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '@Transactionalpublic SignedInUser getSignedInUser(UserEntity userEntity) {'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
- en: userTokenRepository.deleteByUserId(userEntity.getId());
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
- en: return createSignedUserWithRefreshToken(userEntity);
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: public Optional<SignedInUser> getAccessToken(   RefreshToken refreshToken) {
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
- en: return userTokenRepository
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
- en: .findByRefreshToken(refreshToken.getRefreshToken())
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
- en: .map(ut ->
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: Optional.of(createSignedInUser(ut.getUser())
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
- en: .refreshToken(refreshToken.getRefreshToken())))
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: .orElseThrow(() ->
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
- en: new InvalidRefreshTokenException
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
- en: ("Invalid token."));
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: public void removeRefreshToken(RefreshToken refreshToken) { userTokenRepository
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: .findByRefreshToken(refreshToken.getRefreshToken())
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
- en: .ifPresentOrElse(
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
- en: userTokenRepository::delete,
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
- en: () -> {
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
- en: throw new InvalidRefreshTokenException
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
- en: ("Invalid token.");
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: public interface UserRepository extends   CrudRepository<UserEntity, UUID> {
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
- en: Optional<UserEntity> findByUsername(String username);
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
- en: '@Query( value = "select count(u.*) from ecomm.\"user\" u'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
- en: where u.username = :username or u.email = :email",
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
- en: nativeQuery = true)
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
- en: Integer findByUsernameOrEmail(String username,
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
- en: String email);
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '@Beanpublic PasswordEncoder passwordEncoder() {'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
- en: Map<String, PasswordEncoder> encoders =
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
- en: Map.of(
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
- en: ENCODER_ID, new BCryptPasswordEncoder(),
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
- en: '"pbkdf2", Pbkdf2PasswordEncoder.'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
- en: defaultsForSpringSecurity_v5_8(),
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
- en: '"scrypt", ScryptPasswordEncoder'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
- en: .defaultsForSpringSecurity_v5_8());
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
- en: return new DelegatingPasswordEncoder
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
- en: (ENCODER_ID, encoders);
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '@RestControllerpublic class AuthController implements UserApi {'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
- en: private final UserService service;
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
- en: private final PasswordEncoder passwordEncoder;
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
- en: public AuthController(UserService s, PasswordEncoder e) {
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
- en: this.service = s;
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
- en: this.passwordEncoder = e;
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
- en: …
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
- en: …
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: public ResponseEntity<SignedInUser> signIn(@Valid SignInReq signInReq) {  UserEntity
    userEntity = service
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
- en: .findUserByUsername(signInReq.getUsername());
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
- en: if (passwordEncoder.matches(signInReq.getPassword(),
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
- en: userEntity.getPassword())) {
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
- en: return ok(service.getSignedInUser(userEntity));
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
- en: throw new InsufficientAuthenticationException
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
- en: ("Unauthrzed");
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: public ResponseEntity<Void> signOut(  @Valid RefreshToken refreshToken) {
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
- en: service.removeRefreshToken(refreshToken);
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
- en: return accepted().build();
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
- en: public ResponseEntity<SignedInUser> signUp
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
- en: (@Valid User user) {
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
- en: return status(HttpStatus.CREATED)
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
- en: .body(service.createUser(user).get());
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
- en: public ResponseEntity<SignedInUser> getAccessToken(
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
- en: '@Valid RefreshToken refreshToken) {'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
- en: return ok(service.getAccessToken(refreshToken)
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
- en: .orElseThrow(InvalidRefreshTokenException::new));
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-480
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '@Beanprotected SecurityFilterChain filterChain(HttpSecurity http) throws Exception
    {'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
- en: http.httpBasic().disable()
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
- en: .formLogin().disable()
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
- en: .csrf().ignoringRequestMatchers(API_URL_PREFIX)
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
- en: .ignoringRequestMatchers(toH2Console())
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
- en: .and()
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
- en: .headers().frameOptions().sameOrigin()
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
- en: .and()
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
- en: .cors()
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
- en: .and()
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
- en: .authorizeHttpRequests(req ->
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
- en: req.requestMatchers(toH2Console()).permitAll()
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
- en: .requestMatchers(new AntPathRequestMatcher(
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
- en: TOKEN_URL, HttpMethod.POST.name()))
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
- en: .permitAll()
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
- en: .requestMatchers(new AntPathRequestMatcher(
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: .requestMatchers(new AntPathRequestMatcher(
- en: TOKEN_URL, HttpMethod.DELETE.name())).
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: TOKEN_URL, HttpMethod.DELETE.name())).
- en: permitAll()
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: permitAll()
- en: .requestMatchers(new AntPathRequestMatcher(
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: .requestMatchers(new AntPathRequestMatcher(
- en: SIGNUP_URL, HttpMethod.POST.name()))
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: SIGNUP_URL, HttpMethod.POST.name()))
- en: .permitAll()
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: .permitAll()
- en: .requestMatchers(new AntPathRequestMatcher(
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: .requestMatchers(new AntPathRequestMatcher(
- en: REFRESH_URL, HttpMethod.POST.name())).
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: REFRESH_URL, HttpMethod.POST.name())).
- en: permitAll()
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: permitAll()
- en: .requestMatchers(new AntPathRequestMatcher(
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: .requestMatchers(new AntPathRequestMatcher(
- en: PRODUCTS_URL, HttpMethod.GET.name())).
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: PRODUCTS_URL, HttpMethod.GET.name())).
- en: permitAll()
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: permitAll()
- en: .requestMatchers("/api/v1/addresses/**")
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: .requestMatchers("/api/v1/addresses/**")
- en: .hasAuthority(RoleEnum.ADMIN.getAuthority())
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: .hasAuthority(RoleEnum.ADMIN.getAuthority())
- en: .anyRequest().authenticated())
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: .anyRequest().authenticated())
- en: .oauth2ResourceServer(oauth2ResourceServer ->
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: .oauth2ResourceServer(oauth2ResourceServer ->
- en: oauth2ResourceServer.jwt(jwt ->
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: oauth2ResourceServer.jwt(jwt ->
- en: jwt.jwtAuthenticationConverter(
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: jwt.jwtAuthenticationConverter(
- en: getJwtAuthenticationConverter())))
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: getJwtAuthenticationConverter())))
- en: .sessionManagement().sessionCreationPolicy(
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: .sessionManagement().sessionCreationPolicy(
- en: SessionCreationPolicy.STATELESS);
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: SessionCreationPolicy.STATELESS);
- en: return http.build();
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: return http.build();
- en: '}'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE39]'
  id: totrans-519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '@BeanCorsConfigurationSource corsConfigurationSource() {'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: '@BeanCorsConfigurationSource corsConfigurationSource() {'
- en: CorsConfiguration configuration = new CorsConfiguration();
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: CorsConfiguration configuration = new CorsConfiguration();
- en: configuration.setAllowedOrigins(List.of("*"));
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: configuration.setAllowedOrigins(List.of("*"));
- en: configuration.setAllowedMethods(Arrays.asList("HEAD",
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: configuration.setAllowedMethods(Arrays.asList("HEAD",
- en: '"GET", "PUT", "POST", "DELETE", "PATCH"));'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: '"GET", "PUT", "POST", "DELETE", "PATCH"));'
- en: // For CORS response headers
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: // For CORS response headers
- en: configuration.addAllowedOrigin("*");
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: configuration.addAllowedOrigin("*");
- en: configuration.addAllowedHeader("*");
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: configuration.addAllowedHeader("*");
- en: configuration.addAllowedMethod("*");
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: configuration.addAllowedMethod("*");
- en: UrlBasedCorsConfigurationSource source = new
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: UrlBasedCorsConfigurationSource source = new
- en: UrlBasedCorsConfigurationSource();
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: UrlBasedCorsConfigurationSource();
- en: source.registerCorsConfiguration("/**", configuration);
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: source.registerCorsConfiguration("/**", configuration);
- en: return source;
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: return source;
- en: '}'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE40]'
  id: totrans-534
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: public enum RoleEnum implements GrantedAuthority {  USER(Const.USER), ADMIN(Const.ADMIN),
    CSR(Const.CSR);
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: public enum RoleEnum implements GrantedAuthority {  USER(Const.USER), ADMIN(Const.ADMIN),
    CSR(Const.CSR);
- en: private String authority;
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: private String authority;
- en: RoleEnum(String authority) {
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: RoleEnum(String authority) {
- en: this.authority = authority;
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: this.authority = authority;
- en: '}'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '@JsonCreator'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: '@JsonCreator'
- en: public static RoleEnum fromAuthority(String authority) {
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: public static RoleEnum fromAuthority(String authority) {
- en: 'for (RoleEnum b : RoleEnum.values()) {'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 'for (RoleEnum b : RoleEnum.values()) {'
- en: if (b.authority.equals(authority)) {
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: if (b.authority.equals(authority)) {
- en: return b;
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: return b;
- en: '}'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '@Override'
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: '@Override'
- en: public String toString() {
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: public String toString() {
- en: return String.valueOf(authority);
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: return String.valueOf(authority);
- en: '}'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '@Override'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: '@Override'
- en: '@JsonValue'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: '@JsonValue'
- en: public String getAuthority() {
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: public String getAuthority() {
- en: return authority;
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: return authority;
- en: '}'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: public class Const {
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: public class Const {
- en: public static final String ADMIN = "ROLE_ADMIN";
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: public static final String ADMIN = "ROLE_ADMIN";
- en: public static final String USER = "ROLE_USER";
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: public static final String USER = "ROLE_USER";
- en: public static final String CSR = "ROLE_CSR";
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: public static final String CSR = "ROLE_CSR";
- en: '}'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE41]'
  id: totrans-563
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: private Converter<Jwt, AbstractAuthenticationToken>   getJwtAuthenticationConverter()
    {
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: private Converter<Jwt, AbstractAuthenticationToken>   getJwtAuthenticationConverter()
    {
- en: JwtGrantedAuthoritiesConverter authorityConverter =
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: JwtGrantedAuthoritiesConverter authorityConverter =
- en: new JwtGrantedAuthoritiesConverter();
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: new JwtGrantedAuthoritiesConverter();
- en: authorityConverter.setAuthorityPrefix(AUTHORITY_PREFIX);
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: authorityConverter.setAuthorityPrefix(AUTHORITY_PREFIX);
- en: authorityConverter.setAuthoritiesClaimName(ROLE_CLAIM);
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: authorityConverter.setAuthoritiesClaimName(ROLE_CLAIM);
- en: JwtAuthenticationConverter converter =
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: JwtAuthenticationConverter converter =
- en: new JwtAuthenticationConverter();
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: new JwtAuthenticationConverter();
- en: converter.setJwtGrantedAuthoritiesConverter(authorityConverter);
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: converter.setJwtGrantedAuthoritiesConverter(authorityConverter);
- en: return converter;
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: return converter;
- en: '}'
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE42]'
  id: totrans-574
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: .requestMatchers("/api/v1/addresses/**")     .hasAuthority(RoleEnum.ADMIN.getAuthority())
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: .requestMatchers("/api/v1/addresses/**")     .hasAuthority(RoleEnum.ADMIN.getAuthority())
- en: .anyRequest().authenticated())
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: .anyRequest().authenticated())
- en: .oauth2ResourceServer(oauth2ResourceServer ->
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: .oauth2ResourceServer(oauth2ResourceServer ->
- en: oauth2ResourceServer.jwt(jwt ->
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: oauth2ResourceServer.jwt(jwt ->
- en: jwt.jwtAuthenticationConverter(
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: jwt.jwtAuthenticationConverter(
- en: getJwtAuthenticationConverter())))
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: getJwtAuthenticationConverter())))
- en: '[PRE43]'
  id: totrans-581
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '@Configuration@EnableWebSecurity'
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: '@Configuration@EnableWebSecurity'
- en: '@EnableGlobalMethodSecurity(prePostEnabled = true)'
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: '@EnableGlobalMethodSecurity(prePostEnabled = true)'
- en: public class SecurityConfig {
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: public class SecurityConfig {
- en: '[PRE44]'
  id: totrans-585
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: For demonstration purposes, let's add the @PreAuthorize annotation to the deleteAddressesById()
    method, which is associated with DELETE /v1/auth/addresses/{id} in AddressController,
    as shown in the following code snippet:@PreAuthorize("hasRole('" + Const.ADMIN
    + "')")
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
- en: '@Override'
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
- en: public ResponseEntity<Void> deleteAddressesById(String id) {
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
- en: service.deleteAddressesById(id);
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
- en: return accepted().build();
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-592
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '$ curl -v ''http://localhost:8080/api/v1/addresses'' -H ''Content- Type: application/json''
    -H ''Accept: application/json''< HTTP/1.1 401'
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
- en: '< Vary: Origin'
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
- en: '< Vary: Access-Control-Request-Method'
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
- en: '< Vary: Access-Control-Request-Headers'
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
- en: '< WWW-Authenticate: Bearer'
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
- en: '< X-Content-Type-Options: nosniff'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
- en: '< X-XSS-Protection: 1; mode=block'
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
- en: '< Cache-Control: no-cache, no-store, max-age=0, must'
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
- en: revalidate
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
- en: < Other information is removed for brevity
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-603
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '$ curl -v ''http://localhost:8080/api/v1/addresses'' -H ''Content-Type: application/json''
    -H ''Accept: application/json'' -H ''Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9…rest
    of the JWT string removed for brevity'''
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
- en: < HTTP/1.1 401
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
- en: '< Vary: Origin'
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
- en: '< Vary: Access-Control-Request-Method'
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
- en: '< Vary: Access-Control-Request-Headers'
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
- en: '< WWW-Authenticate: Bearer'
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
- en: < Other information is removed for brevity
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-611
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '$ curl -X POST http://localhost:8080/api/v1/auth/token -H  ''Accept: application/json''
    -H  ''Content-Type: application/json'' -d ''{    "username": "scott",'
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
- en: '"password": "tiger"'
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
- en: '}'''
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
- en: '{"refreshToken":"9rdk5b35faafkneqg9519s6p4tbbqcdt412t7h5st9savkonqnnd 5e8ntr334m8rffgo6bio1vglng1hqqse3igdonoabc971lpdgt3bjoc3je3m81ldp2au
    vimts8p6","accessToken":"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJzdWI iOiJzY290dCIsInJvbGVzIjpbIlVTRVIiXSwiaXNzIjoiTW9kZXJuIEFQSSBEZXZlbG9
    wbWVudCB3aXRoIFNwcmluZyBhbmQgU3ByaW5nIEJvb3QiLCJleHAiOjE2Nzc0OTYzMzk sImlhdCI6MTY3NzQ5NTQzOX0.a77O7ZbSAOw5v6Tb3w-MtBwotMEUvc1H1y2W0IU2QJh0m
    lSJxSBCfdrNBl0mVk1HnwX4kOpj4grbNasBjpIpHtyOLXdp-gngxdvVfaKSPuptrW4YzA3 ikxbUMWDdEtij_y2DRxJXQ6CrPTjA40L7yB_SXswnHT988Qq6ZALeGW-Lmz-vzAZiRcZUe
    6bPPn7F-p4lK_qi1nsUJ1rnWmmffLWCH37ztllcgh6bB1UJuOn9Hw2A1nQExfUutRKgFK0 -LxBUOKOKdRESOnJR9hwOL6v10IFl9xNm53LVMIcuJrndCxvmv7mv0fUOxY63UwhO9kOT
    RCXViGKCa3H8RxUFwG52q2nZelle_4I8CUSeDDdmD2Rlax2NyQNe-HHEJb9c91JSzhFm0 K0-c34-kiNGqaB3jljndHoGXCBLM5prphlSdlV4U9PYhmL8ZCaDv8q6rCPSAEcRoiOBPPn
    dxEApHKulj9vrO_p7K1T9dLamJSFJKw9Yz8M3_ngiE3qtEBQ3tEUFkZsJpGop5HIxrkB0O e7L_oETir_wUe1qs8AIZcKSwP9X6fpUuOlONKDpDc-f-n5PjEAvts3BcxuM8Jrw80F6z6T
    OJrcikrMt8DGaIXs2WHNP7C605l-JgwCVuZz_8S4LLtaCFnqq4xLU1Gy2qj5CBbALVoFcB fjoVLN2fq4","username":"scott","userId":"a1b9b31d-e73c-4112-af7c-b68530f38222"}'
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-616
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '$ curl -v ''http://localhost:8080/api/v1/addresses'' -H ''Content-Type: application/json''
    -H ''Accept: application/json'' -H ''Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGci…rest
    of the JWT string removed for brevity'''
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
- en: < HTTP/1.1 403
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
- en: '< Vary: Origin'
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
- en: '< Vary: Access-Control-Request-Method'
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
- en: '< Vary: Access-Control-Request-Headers'
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
- en: '< WWW-Authenticate: Bearer error="insufficient_scope", error_description="The
    request requires higher privileges than provided by the access token.", error_uri="https://tools.ietf.org/html/rfc6750#section-3.1"'
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-623
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '$ curl -X POST http://localhost:8080/api/v1/auth/token -H  ''Accept: application/json''
    -H  ''Content-Type: application/json'' -d ''{    "username": "scott2",'
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
- en: '"password": "tiger"'
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
- en: '}'''
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
- en: '{"refreshToken":"a6hidhaeb8scj3p6kei61g4a649dghcf5jit1v6rba2mn92o0dm0g 6gs6qfh7suiv68p2em0t0nnue8unm10bg079f39590jig0sccisecim5ep3ipuiu29ceao
    c793h","accessToken":"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9…","usernam e":"scott2","userId":"a1b9b31d-e73c-4112-af7c-b68530f38223"}'
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
- en: Some of the output removed for brevity
  id: totrans-628
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '$ curl -v ''http://localhost:8080/api/v1/addresses'' -H ''Content-Type: application/json''
    -H ''Accept: application/json'' -H ''Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9…'''
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
- en: '[{"links":[{"rel":"self","href":"http://localhost:8080/a731fda1-aaad-42ea-bdbc-a27eeebe2cc0"},{"rel":"self","href":"http://localhost:8080/api/v1/addresses/a731fda1-aaad-42ea-bdbc-a27eeebe2cc0"}],"id":"a731fda1-aaad-42ea-bdbc-a27eeebe2cc0","number":"9I-999","residency":"Fraser
    Suites Le Claridge","street":"Champs-Elysees","city":"Paris","state":"Île-de-France","country":"France","pincode":"75008"}]'
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-631
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '$  curl -X POST ''http://localhost:8080/api/v1/auth/token/refresh'' -H ''Content-Type:
    application/json'' -H ''Accept: application/json'' -d ''{"refreshToken": "a6hidhaeb8scj3p6kei61g4a649dghcf5jit1v6rba2mn92o0dm0
    g6gs6qfh7suiv68p2em0t0nnue8unm10bg079f39590jig0sccisecim5ep3ipuiu29ce aoc793h"'
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
- en: '}'''
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
- en: '{"refreshToken":"a6hidhaeb8scj3p6kei61g4a649dghcf5jit1v6rba2mn92o0dm0g 6gs6qfh7suiv68p2em0t0nnue8unm10bg079f39590jig0sccisecim5ep3ipuiu29ceao
    c793h","accessToken":"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9… rest of the token
    truncated for brevity","username":"scott2","userId":"a1b9b31d-e73c-4112-af7c-b68530f38223"}'
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-635
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '{  "errorCode":"PACKT-0010",'
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
- en: '"message":"Requested resource not found. Invalidtoken.",'
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
- en: '"status":404,'
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
- en: '"url":"http://localhost:8080/api/v1/auth/token/refresh",'
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
- en: '"reqMethod":"POST","timestamp":"2023-02-27T11:13:27.183172Z"'
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-642
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Object principal = SecurityContextHolder                   .getContext().getAuthentication()                   .getPrincipal();if
    (principal instanceof UserDetails) {  String username =              ((UserDetails)principal).getUsername();}
    else {  String username = principal.toString();}
  id: totrans-643
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-644
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
