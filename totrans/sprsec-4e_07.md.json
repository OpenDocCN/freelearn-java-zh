["```java\n//build.gradle\ndependencies {\n...\n    // JPA / ORM / Hibernate:\n    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'\n    // H2 db\n    implementation 'com.h2database:h2'\n...\n}\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/ SecurityConfig.java\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n    ...\n        // Remember Me\n        http.rememberMe(httpSecurityRememberMeConfigurer ->\n            httpSecurityRememberMeConfigurer.key(\"jbcpCalendar\"));\n    ...\n    }\n    ```", "```java\n    //src/main/resources/templates/login.xhtml\n    <div class=\"mb-3\">\n        <label class=\"form-label\" for=\"password\">Password</label>\n        <input class=\"form-control\" id=\"password\" name=\"password\"\n               type=\"password\"/>\n    </div>\n    <div class=\"mb-3\">\n        <label for=\"remember-me\">Remember Me?</label>\n        <input type=\"checkbox\" id=\"remember-me\" name=\"remember-me\" th:checked=\"true\" />\n    </div>\n    <div class=\"mb-3\">\n        <input class=\"btn btn-primary\" id=\"submit\" name=\"submit\" type=\"submit\"\n               value=\"Login\"/>\n    </div>\n    ```", "```java\nbase64(username + \":\" + expirationTime + \":\" + algorithmName + \":\"\nalgorithmHex(username + \":\" + expirationTime + \":\" password + \":\" + key))\nusername:          As identifiable to the UserDetailsService\npassword:          That matches the one in the retrieved UserDetails\nexpirationTime:    The date and time when the remember-me token expires, expressed in milliseconds\nkey:               A private key to prevent modification of the remember-me token\nalgorithmName:     The algorithm used to generate and to verify the remember-me token\n```", "```java\n@Bean\nSecurityFilterChain securityFilterChain(HttpSecurity http, RememberMeServices rememberMeServices) throws Exception {\n    http\n          .authorizeHttpRequests((authorize) -> authorize\n                .anyRequest().authenticated()\n          )\n          .rememberMe((remember) -> remember\n                .rememberMeServices(rememberMeServices)\n          );\n    return http.build();\n}\n@Bean\nRememberMeServices rememberMeServices(UserDetailsService userDetailsService) {\n    RememberMeTokenAlgorithm encodingAlgorithm = RememberMeTokenAlgorithm.SHA256;\n    TokenBasedRememberMeServices rememberMe = new TokenBasedRememberMeServices(myKey, userDetailsService, encodingAlgorithm);\n    rememberMe.setMatchingAlgorithm(RememberMeTokenAlgorithm.MD5);\n    return rememberMe;\n}\n```", "```java\nprodJbcpCalendar-rmkey- YWRtaW4xJTQwZXhhbXBsZS5jb206MTY5ODc2MTM 2ODgwNjpTSEEyNTY6YzE5ZjE2YzliN2U2ZjA xZGMyMjdkMWJmN2JlYWQzNGRhYWJiMGFmNDliMDE0ZGY5MTg4YjIzYzM1YjQzZmMzNw\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n...\n@Bean\npublic SecurityFilterChain filterChain(HttpSecurity http, PersistentTokenRepository persistentTokenRepository) throws Exception {\n    http.authorizeHttpRequests( authz -> authz\n                .requestMatchers(\"/webjars/**\").permitAll()\n                .requestMatchers(\"/css/**\").permitAll()\n                .requestMatchers(\"/favicon.ico\").permitAll()\n                // H2 console:\n                .requestMatchers(\"/admin/h2/**\")\n                .access(new WebExpressionAuthorizationManager(\"isFullyAuthenticated() and hasRole('ADMIN')\"))\n...\n    // Remember Me\n    http.rememberMe(httpSecurityRememberMeConfigurer -> httpSecurityRememberMeConfigurer\n        .key(\"jbcpCalendar\").tokenRepository(persistentTokenRepository));\n...\n}\n```", "```java\n//src/main/resources/schema.sql\ncreate table persistent_logins\n(\n    username  varchar_ignorecase(50) not null,\n    series    varchar(64) primary key,\n    token     varchar(64) not null,\n    last_used timestamp   not null\n);\n```", "```java\n//src/main/resources/application.yml\nspring:\n  jpa:\n    database-platform: org.hibernate.dialect.H2Dialect\n    show-sql: false\n    hibernate:\n      ddl-auto: create-drop\n    defer-datasource-initialization: true\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityC onfig.java\n@Bean\npublic SecurityFilterChain filterChain(HttpSecurity http, PersistentTokenRepository persistentTokenRepository) throws Exception {\n    http.authorizeRequests( authz -> authz\n    ...\n    // Remember Me\n    http.rememberMe(httpSecurityRememberMeConfigurer -> httpSecurityRememberMeConfigurer\n          .key(\"jbcpCalendar\").tokenRepository(persistentTokenRepository));\n    return http.build();\n}\n@Bean\npublic PersistentTokenRepository persistentTokenRepository(DataSource dataSource) {\n    JdbcTokenRepositoryImpl db = new JdbcTokenRepositoryImpl();\n    db.setDataSource(dataSource);\n    return db;\n}\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/domain/ PersistentLogin.java\n    @Entity\n    @Table(name = \"persistent_logins\")\n    public class PersistentLogin implements Serializable {\n        @Id\n        private String series;\n        private String username;\n        private String token;\n        private Date lastUsed;\n        public PersistentLogin(){}\n        public PersistentLogin(PersistentRememberMeToken token){\n            this.series = token.getSeries();\n            this.username = token.getUsername();\n            this.token = token.getTokenValue();\n            this.lastUsed = token.getDate();\n        }\n    // getters/setters omitted for brevity\n    }\n    ```", "```java\n    //src/main/java/com/packtpub/springsecurity/repository/ RememberMeTokenRepository.java\n    import java.util.Date;\n    import java.util.List;\n    import com.packtpub.springsecurity.domain.PersistentLogin;\n    import org.springframework.data.jpa.repository.JpaRepository;\n    public interface RememberMeTokenRepository extends JpaRepository<PersistentLogin, String> {\n        PersistentLogin findBySeries(String series);\n        List<PersistentLogin> findByUsername(String username);\n        Iterable<PersistentLogin> findByLastUsedAfter(Date expiration);\n    }\n    ```", "```java\n    //src/main/java/com/packtpub/springsecurity/web/authentication/rememberme/JpaPersistentTokenRepository.java:\n    public class JpaPersistentTokenRepository implements PersistentTokenRepository {\n        private final RememberMeTokenRepository rememberMeTokenRepository;\n        public JpaPersistentTokenRepository(RememberMeTokenRepository rememberMeTokenRepository) {\n            this.rememberMeTokenRepository = rememberMeTokenRepository;\n        }\n        @Override\n        public void createNewToken(PersistentRememberMeToken token) {\n            PersistentLogin newToken = new PersistentLogin(token);\n            this.rememberMeTokenRepository.save(newToken);\n        }\n        @Override\n        public void updateToken(String series, String tokenValue, Date lastUsed) {\n            PersistentLogin token = this.rememberMeTokenRepository.findBySeries(series);\n            if (token != null) {\n                token.setToken(tokenValue);\n                token.setLastUsed(lastUsed);\n                this.rememberMeTokenRepository.save(token);\n            }\n        }\n        @Override\n        public PersistentRememberMeToken getTokenForSeries(String seriesId) {\n            PersistentLogin token = this.rememberMeTokenRepository.findBySeries(seriesId);\n            if(token == null){\n                return null;\n            } else {\n                return new PersistentRememberMeToken(token.getUsername(),\n                        token.getSeries(),\n                        token.getToken(),\n                        token.getLastUsed());\n            }\n        }\n        @Override\n        public void removeUserTokens(String username) {\n            List<PersistentLogin> tokens = this.rememberMeTokenRepository.findByUsername(username);\n            this.rememberMeTokenRepository.deleteAll(tokens);\n        }\n    }\n    ```", "```java\n    /src/main/java/com/packtpub/springsecurity/configuration/ SecurityConfig.java\n    @Bean\n    public PersistentTokenRepository persistentTokenRepository(\n           RememberMeTokenRepository rmtr) {\n        return new JpaPersistentTokenRepository(rmtr);\n    }\n    ```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n@Bean\npublic SecurityFilterChain filterChain(HttpSecurity http,\n       PersistentTokenRepository persistentTokenRepository, RememberMeServices rememberMeServices) throws Exception {\n    http.authorizeHttpRequests( authz -> authz\n                .requestMatchers(\"/webjars/**\").permitAll()\n…\n    // Remember Me\n    http.rememberMe(httpSecurityRememberMeConfigurer -> httpSecurityRememberMeConfigurer\n          .key(\"jbcpCalendar\")\n          .rememberMeServices(rememberMeServices)\n          .tokenRepository(persistentTokenRepository));\n    return http.build();\n}\n@Bean\npublic RememberMeServices rememberMeServices (PersistentTokenRepository ptr, UserDetailsService  userDetailsService){\n    PersistentTokenBasedRememberMeServices rememberMeServices = new\n          PersistentTokenBasedRememberMeServices(\"jbcpCalendar\",\n          userDetailsService, ptr);\n    rememberMeServices.setAlwaysRemember(true);\n    return rememberMeServices;\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/web/authentication/rememberme/ JpaTokenRepositoryCleaner.java\npublic class JpaTokenRepositoryCleaner implements Runnable {\n    private Logger logger = LoggerFactory.getLogger(getClass());\n    private final RememberMeTokenRepository rememberMeTokenRepository;\n    private final long tokenValidityInMs;\n    public JpaTokenRepositoryCleaner(RememberMeTokenRepository rememberMeTokenRepository,\n                                     long tokenValidityInMs) {\n        if (rememberMeTokenRepository == null) {\n            throw new IllegalArgumentException(\"jdbcOperations cannot be null\");\n        }\n        if (tokenValidityInMs < 1) {\n            throw new IllegalArgumentException(\"tokenValidityInMs must be greater than 0\\. Got \" + tokenValidityInMs);\n        }\n        this.rememberMeTokenRepository = rememberMeTokenRepository;\n        this.tokenValidityInMs = tokenValidityInMs;\n    }\n    public void run() {\n        long expiredInMs = System.currentTimeMillis() - tokenValidityInMs;\n        logger.info(\"Searching for persistent logins older than {}ms\", tokenValidityInMs);\n        try {\n            Iterable<PersistentLogin> expired = rememberMeTokenRepository.findByLastUsedAfter(new Date(expiredInMs));\n            for(PersistentLogin pl: expired){\n                logger.info(\"*** Removing persistent login for {} ***\", pl.getUsername());\n                rememberMeTokenRepository.delete(pl);\n            }\n        } catch(Throwable t) {\n            logger.error(\"**** Could not clean up expired persistent remember me tokens. ***\", t);\n        }\n    }\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/ JavaConfig.java@Configuration\n@Configuration\n@EnableScheduling\npublic class JavaConfig {\n    private RememberMeTokenRepository rememberMeTokenRepository;\n    public JavaConfig(RememberMeTokenRepository rememberMeTokenRepository) {\n       this.rememberMeTokenRepository = rememberMeTokenRepository;\n    }\n    @Scheduled(fixedRate = 600_000)\n    public void tokenRepositoryCleaner(){\n       Thread trct = new Thread(\n             new JpaTokenRepositoryCleaner(\n                   rememberMeTokenRepository,\n                   100_000L));\n       trct.start();\n    }\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/web/authentication/rememberme/ IpAwarePersistentTokenRepository.java\nprivate String ipSeries(String series) {\n    ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\n    if (attributes == null) {\n        throw new IllegalStateException(\"RequestContextHolder.getRequestAttributes() cannot be null\");\n    }\n    String remoteAddr = attributes.getRequest().getRemoteAddr();\n    logger.debug(\"Remote address is {}\", remoteAddr);\n    return series + remoteAddr;\n}\n```", "```java\n@Override\npublic void createNewToken(PersistentRememberMeToken token) {\n    String ipSeries = ipSeries(token.getSeries());\n    PersistentRememberMeToken ipToken = tokenWithSeries(token, ipSeries);\n    this.delegateRepository.createNewToken(ipToken);\n}\n```", "```java\n@Override\npublic PersistentRememberMeToken getTokenForSeries(String seriesId) {\n    String ipSeries = ipSeries(seriesId);\n    PersistentRememberMeToken ipToken = delegateRepository.getTokenForSeries(ipSeries);\n    return tokenWithSeries(ipToken, seriesId);\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n@Bean\npublic RememberMeServices rememberMeServices(PersistentTokenRepository ptr, UserDetailsService userDetailsService) {\n    PersistentTokenBasedRememberMeServices rememberMeServices = new\n          PersistentTokenBasedRememberMeServices(\"jbcpCalendar\",\n          userDetailsService, ptr);\n    rememberMeServices.setAlwaysRemember(true);\n    return rememberMeServices;\n}\n@Bean\npublic IpAwarePersistentTokenRepository tokenRepository(RememberMeTokenRepository rmtr) {\n    return new IpAwarePersistentTokenRepository(new JpaPersistentTokenRepository(rmtr));\n}\n@Bean\npublic OrderedRequestContextFilter requestContextFilter() {\n    return new OrderedRequestContextFilter();\n}\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/ SecurityConfig.java\n    @Bean\n    public RememberMeServices rememberMeServices(PersistentTokenRepository ptr, UserDetailsService userDetailsService) {\n        PersistentTokenBasedRememberMeServices rememberMeServices = new\n              PersistentTokenBasedRememberMeServices(\"jbcpCalendar\",\n              userDetailsService, ptr);\n        rememberMeServices.setAlwaysRemember(true);\n        rememberMeServices.setParameter(\"obscure-remember-me\");\n        rememberMeServices.setCookieName(\"obscure-remember-me\");\n        return rememberMeServices;\n    }\n    ```", "```java\n    //src/main/resources/templates/login.xhtml\n    <div class=\"mb-3\">\n        <label for=\"remember-me\">Remember Me?</label>\n        <input type=\"checkbox\" id=\"remember-me\" name=\"obscure-remember-me\" th:checked=\"true\" />\n    </div>\n    ```"]