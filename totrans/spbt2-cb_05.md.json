["```java\n@RunWith(SpringRunner.class) \n@SpringApplicationConfiguration(classes = \n   BookPubApplication.class) \npublic class BookPubApplicationTests { \n  @Test \n  public void contextLoads() { \n  } \n} \n```", "```java\ntestCompile(\"org.springframework.boot:spring-boot-starter-test\") \n```", "```java\nimport static org.hamcrest.Matchers.containsString;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\nimport static org.springframework.test.web.servlet.setup.MockMvcBuilders.webAppContextSetup;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\n@RunWith(SpringRunner.class)\n@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\npublic class BookPubApplicationTests {\n   @Autowired\n   private WebApplicationContext context; \n   @Autowired\n   private TestRestTemplate restTemplate;\n   @Autowired\n   private BookRepository repository;\n\n   @LocalServerPort\n   private int port;\n\n   private MockMvc mockMvc; \n\n   @Before\n   public void setupMockMvc() {\n       mockMvc = webAppContextSetup(context).build();\n   }\n\n   @Test\n   public void contextLoads() {\n       assertEquals(1, repository.count());\n   }\n\n   @Test\n   public void webappBookIsbnApi() {\n       Book book =\n         restTemplate.getForObject(\"http://localhost:\" +\n           port + \"/books/978-1-78528-415-1\", Book.class);\n       assertNotNull(book);\n       assertEquals(\"Packt\", book.getPublisher().getName());\n   }\n\n   @Test\n   public void webappPublisherApi() throws Exception {\n       mockMvc.perform(get(\"/publishers/1\")).\n               andExpect(status().isOk()).andExpect(content().\n                  contentType(MediaType.parseMediaType\n                    (\"application/hal+json;charset=UTF-8\"))).\n               andExpect(content().\n                            string(containsString(\"Packt\"))).\n               andExpect(jsonPath(\"$.name\").value(\"Packt\"));\n   }\n} \n```", "```java\n:compileJava\n:compileTestJava\n:testClasses\n:test\n2016-10-13 21:40:44.694  INFO 25739 --- [       Thread-4] ationConfigEmbeddedWebApplicationContext : Closing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@206f4aa6: startup date [Mon Apr 13 21:40:36 CDT 2015]; root of context hierarchy\n2016-10-13 21:40:44.704  INFO 25739 --- [       Thread-4] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'\n2016-10-13 21:40:44.705  INFO 25739 --- [       Thread-4] org.hibernate.tool.hbm2ddl.SchemaExport  : HHH000227: Running hbm2ddl schema export\n2016-10-13 21:40:44.780  INFO 25739 --- [       Thread-4] org.hibernate.tool.hbm2ddl.SchemaExport  : HHH000230: Schema export complete\n\nBUILD SUCCESSFUL\nTotal time: 24.635 secs\n```", "```java\nAuthor author = new Author(\"Alex\", \"Antonov\"); \nauthor = authorRepository.save(author); \nPublisher publisher = new Publisher(\"Packt\"); \npublisher = publisherRepository.save(publisher); \nBook book = new Book(\"978-1-78528-415-1\", \"Spring Boot Recipes\", author, publisher); \nbookRepository.save(book); \n```", "```java\nINSERT INTO author (id, first_name, last_name) VALUES (1, 'Alex', 'Antonov') \nINSERT INTO publisher (id, name) VALUES (1, 'Packt') \nINSERT INTO book (isbn, title, author_id, publisher_id) VALUES ('978-1-78528-415-1', 'Spring Boot Recipes', 1, 1) \n```", "```java\n-- Create syntax for TABLE 'author' \nDROP TABLE IF EXISTS `author`; \nCREATE TABLE `author` ( \n  `id` bigint(20) NOT NULL AUTO_INCREMENT, \n  `first_name` varchar(255) DEFAULT NULL, \n  `last_name` varchar(255) DEFAULT NULL, \n  PRIMARY KEY (`id`) \n); \n-- Create syntax for TABLE 'publisher' \nDROP TABLE IF EXISTS `publisher`; \nCREATE TABLE `publisher` ( \n  `id` bigint(20) NOT NULL AUTO_INCREMENT, \n  `name` varchar(255) DEFAULT NULL, \n  PRIMARY KEY (`id`) \n); \n-- Create syntax for TABLE 'reviewer' \nDROP TABLE IF EXISTS `reviewer`; \nCREATE TABLE `reviewer` ( \n  `id` bigint(20) NOT NULL AUTO_INCREMENT, \n  `first_name` varchar(255) DEFAULT NULL, \n  `last_name` varchar(255) DEFAULT NULL, \n  PRIMARY KEY (`id`) \n); \n-- Create syntax for TABLE 'book' \nDROP TABLE IF EXISTS `book`; \nCREATE TABLE `book` ( \n  `id` bigint(20) NOT NULL AUTO_INCREMENT, \n  `description` varchar(255) DEFAULT NULL, \n  `isbn` varchar(255) DEFAULT NULL, \n  `title` varchar(255) DEFAULT NULL, \n  `author_id` bigint(20) DEFAULT NULL, \n  `publisher_id` bigint(20) DEFAULT NULL, \n  PRIMARY KEY (`id`), \n  CONSTRAINT `FK_publisher` FOREIGN KEY (`publisher_id`) REFERENCES `publisher` (`id`), \n  CONSTRAINT `FK_author` FOREIGN KEY (`author_id`) REFERENCES `author` (`id`) \n); \n-- Create syntax for TABLE 'book_reviewers' \nDROP TABLE IF EXISTS `book_reviewers`; \nCREATE TABLE `book_reviewers` ( \n  `book_id` bigint(20) NOT NULL, \n  `reviewers_id` bigint(20) NOT NULL, \n  CONSTRAINT `FK_book` FOREIGN KEY (`book_id`) REFERENCES `book` (`id`), \n  CONSTRAINT `FK_reviewer` FOREIGN KEY (`reviewers_id`) REFERENCES `reviewer` (`id`) \n); \n```", "```java\nINSERT INTO author (id, first_name, last_name) VALUES (2, 'Greg', 'Turnquist') \nINSERT INTO book (isbn, title, author_id, publisher_id) VALUES ('978-1-78439-302-1', 'Learning Spring Boot', 2, 1) \n```", "```java\npublic class BookPubApplicationTests { \n   ... \n   @Autowired \n   private BookRepository repository; \n   @Autowired \n   private RestTemplate restTemplate; \n   @Autowired \n   private DataSource ds; \n   @LocalServerPort \n   private int port; \n\n   private MockMvc mockMvc; \n   private static boolean loadDataFixtures = true; \n\n   @Before \n   public void setupMockMvc() { \n      ... \n   } \n\n   @Before \n   public void loadDataFixtures() { \n      if (loadDataFixtures) { \n         ResourceDatabasePopulator populator = \n           new ResourceDatabasePopulator(\n               context.getResource(\"classpath:/test-data.sql\")); \n         DatabasePopulatorUtils.execute(populator, ds); \n         loadDataFixtures = false; \n      } \n   } \n\n   @Test \n   public void contextLoads() { \n      assertEquals(2, repository.count()); \n   } \n\n   @Test \n   public void webappBookIsbnApi() { \n      ... \n   } \n\n   @Test \n   public void webappPublisherApi() throws Exception { \n      ... \n   } \n} \n```", "```java\nINSERT INTO author (id, first_name, last_name) VALUES (3, 'William', 'Shakespeare') \nINSERT INTO publisher (id, name) VALUES (2, 'Classical Books') \nINSERT INTO book (isbn, title, author_id, publisher_id) VALUES ('978-1-23456-789-1', 'Romeo and Juliet', 3, 2) \n```", "```java\nassertEquals(3, repository.count()); \n```", "```java\nspring.datasource.url = jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE\nspring.jpa.hibernate.ddl-auto=update\n```", "```java\n@Transactional\n@Sql(scripts = \"classpath:/test-data.sql\")\n```", "```java\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.BDDMockito.given;\nimport static org.mockito.BDDMockito.reset; \n\n@RunWith(SpringRunner.class) \n@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.NONE) \npublic class MockPublisherRepositoryTests { \n    @MockBean \n    private PublisherRepository repository; \n\n    @Before \n    public void setupPublisherRepositoryMock() { \n        given(repository.count()).willReturn(5L); \n    } \n\n    @Test \n    public void publishersExist() { \n        assertThat(repository.count()).isEqualTo(5L); \n    } \n\n    @After \n    public void resetPublisherRepositoryMock() { \n        reset(repository); \n    } \n} \n```", "```java\nimport static org.assertj.core.api.Assertions.assertThat; \n\n@RunWith(SpringRunner.class) \n@DataJpaTest \npublic class JpaAuthorRepositoryTests { \n    @Autowired \n    private TestEntityManager mgr; \n\n    @Autowired \n    private AuthorRepository repository; \n\n    @Test \n    public void testAuthorEntityBinding() { \n        Long id = mgr.persistAndGetId(createAuthor(),  \n                                      Long.class); \n\n        Author author = repository.findById(id).get(); \n\n        assertThat(author.getFirstName()). \n                   isEqualTo(\"Mark\"); \n        assertThat(author.getLastName()). \n                   isEqualTo(\"Twain\"); \n    } \n\n    private Author createAuthor() { \n        return new Author(\"Mark\", \"Twain\"); \n    } \n} \n```", "```java\nimport static org.hamcrest.Matchers.containsString; \nimport static org.mockito.BDDMockito.given; \nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get; \nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content; \nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath; \nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status; \n\n@RunWith(SpringRunner.class) \n@WebMvcTest \npublic class WebMvcBookControllerTests { \n    @Autowired \n    private MockMvc mockMvc; \n\n    @MockBean\n    private BookRepository repository;\n\n    // The 2 repositories below are needed to \n    //successfully initialize StartupRunner\n    @MockBean\n    private AuthorRepository authorRepository;\n    @MockBean\n    private PublisherRepository publisherRepository; \n\n    @Test \n    public void webappBookApi() throws Exception { \n        given(repository.findBookByIsbn(\"978-1-78528-415-1\")) \n             .willReturn(new Book(\"978-1-78528-415-1\", \n                                  \"Spring Boot Recipes\", \n                                  new Author(\"Alex\", \"Antonov\"), \n                                  new Publisher(\"Packt\"))); \n\n        mockMvc.perform(get(\"/books/978-1-78528-415-1\")). \n                andExpect(status().isOk()). \n                andExpect(content().\n                          contentType(MediaType.parseMediaType\n                          (\"application/json;charset=UTF-8\"))). \n                andExpect(content().\n                          string(containsString(\"Spring Boot Recipes\"))). \n                andExpect(jsonPath(\"$.isbn\").\n                                  value(\"978-1-78528-415-1\")); \n    } \n} \n```", "```java\ndependencies { \n    compile(\"org.springframework.boot:spring-boot-starter-data-jpa\") \n    compile(\"org.springframework.boot:spring-boot-starter-jdbc\") \n    compile(\"org.springframework.boot:spring-boot-starter-web\") \n    compile(\"org.springframework.boot:spring-boot-starter-data-rest\") \n    compile project(\":db-count-starter\") \n    runtime(\"com.h2database:h2\") \n    runtime(\"mysql:mysql-connector-java\") \n    testCompile(\"org.springframework.boot:spring-boot-starter-test\") \n    testCompile(\"info.cukes:cucumber-spring:1.2.5\") \n    testCompile(\"info.cukes:cucumber-java8:1.2.5\") \n    testCompile(\"info.cukes:cucumber-junit:1.2.5\") \n} \n```", "```java\n@RunWith(Cucumber.class) \n@CucumberOptions(plugin={\"pretty\", \"html:build/reports/cucumber\"},   \n                 glue = {\"cucumber.api.spring\",           \n                         \"classpath:com.example.bookpub\"},  \n                 monochrome = true) \npublic class RunCukeTests { \n} \n```", "```java\n@WebAppConfiguration \n@ContextConfiguration(classes = BookPubApplication.class, \n                  loader = SpringBootContextLoader.class)  \npublic class RepositoryStepdefs { \n    @Autowired \n    private WebApplicationContext context; \n    @Autowired \n    private DataSource ds; \n    @Autowired \n    private BookRepository bookRepository; \n\n    private Book loadedBook; \n\n    @Given(\"^([^\\\"]*) fixture is loaded$\") \n    public void data_fixture_is_loaded(String fixtureName)\n      throws Throwable { \n        ResourceDatabasePopulator populator \n          = new ResourceDatabasePopulator\n                (context.getResource(\"classpath:/\" + fixtureName + \".sql\")); \n        DatabasePopulatorUtils.execute(populator, ds); \n    } \n\n    @Given(\"^(\\d+) books available in the catalogue$\") \n    public void books_available_in_the_catalogue(int bookCount)    \n      throws Throwable { \n        assertEquals(bookCount, bookRepository.count()); \n    } \n\n    @When(\"^searching for book by isbn ([\\d-]+)$\") \n    public void searching_for_book_by_isbn(String isbn) \n      throws Throwable { \n        loadedBook = bookRepository.findBookByIsbn(isbn); \n        assertNotNull(loadedBook); \n        assertEquals(isbn, loadedBook.getIsbn()); \n    } \n\n    @Then(\"^book title will be ([^\"]*)$\") \n    public void book_title_will_be(String bookTitle) \n      throws Throwable { \n        assertNotNull(loadedBook); \n        assertEquals(bookTitle, loadedBook.getTitle()); \n    } \n} \n```", "```java\n@txn \nFeature: Finding a book by ISBN \n  Background: Preload DB Mock Data \n    Given packt-books fixture is loaded \n\n  Scenario: Load one book \n    Given 3 books available in the catalogue \n    When searching for book by isbn 978-1-78398-478-7 \n    Then book title will be Orchestrating Docker \n```", "```java\nINSERT INTO author (id, first_name, last_name) VALUES (5, 'Shrikrishna', 'Holla') \nINSERT INTO book (isbn, title, author_id, publisher_id) VALUES ('978-1-78398-478-7', 'Orchestrating Docker', 5, 1) \n```", "```java\n@txn \nFeature: Finding a book via REST API \n  Background: \n    Given packt-books fixture is loaded \n\n  Scenario Outline: Using RESTful API to lookup books by ISBN \n    Given catalogue with books \n    When requesting url /books/<isbn> \n    Then status code will be 200 \n    And response content contains <title> \n\n    Examples: \n      |isbn             |title               | \n      |978-1-78398-478-7|Orchestrating Docker| \n      |978-1-78528-415-1|Spring Boot Recipes | \n```", "```java\nimport cucumber.api.java.Before; \nimport cucumber.api.java.en.Given; \nimport cucumber.api.java.en.Then; \nimport cucumber.api.java.en.When; \n\nimport static org.hamcrest.CoreMatchers.containsString; \nimport static org.junit.Assert.assertTrue; \nimport static org.junit.Assert.assertNotNull; \nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get; \nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status; \nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content; \n\n@WebAppConfiguration \n@ContextConfiguration(classes = BookPubApplication.class, loader = SpringBootContextLoader.class)  \npublic class RestfulStepdefs { \n  @Autowired \n  private WebApplicationContext context; \n  @Autowired \n  private BookRepository bookRepository; \n\n  private MockMvc mockMvc; \n  private ResultActions result; \n\n  @Before \n  public void setup() throws IOException { \n    mockMvc = \n       MockMvcBuilders.webAppContextSetup(context).build(); \n  } \n\n  @Given(\"^catalogue with books$\") \n  public void catalogue_with_books() { \n    assertTrue(bookRepository.count() > 0); \n  } \n\n  @When(\"^requesting url ([^\"]*)$\") \n  public void requesting_url(String url) throws Exception { \n    result = mockMvc.perform(get(url)); \n  } \n\n  @Then(\"^status code will be ([\\d]*)$\") \n  public void status_code_will_be(int code) throws \n     Throwable { \n    assertNotNull(result); \n    result.andExpect(status().is(code)); \n  } \n\n  @Then(\"^response content contains ([^\"]*)$\") \n  public void response_content_contains(String content) \n     throws Throwable { \n\n    assertNotNull(result);     \n    result.andExpect( \n      content().string(containsString(content)) \n    ); \n  } \n} \n```", "```java\n@Given(\"^([^\\\"]*) fixture is loaded$\") \npublic void data_fixture_is_loaded(String fixtureName) {...} \n```", "```java\napply plugin: 'java' \napply plugin: 'eclipse' \napply plugin: 'groovy' \napply plugin: 'spring-boot' \n```", "```java\ndependencies { \n  ... \n  testCompile('org.spockframework:spock-core:1.1-groovy-2.4-rc-2') \n  testCompile('org.spockframework:spock-spring:1.1-groovy-2.4-rc-2') \n  ... \n} \n```", "```java\npackage com.example.bookpub;\n\nimport com.example.bookpub.entity.Author;\nimport com.example.bookpub.entity.Book\nimport com.example.bookpub.entity.Publisher\nimport com.example.bookpub.repository.BookRepository\nimport com.example.bookpub.repository.PublisherRepository\nimport org.mockito.Mockito\nimport org.springframework.beans.factory.annotation.Autowired\nimport org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc\nimport org.springframework.boot.test.context.SpringBootTest\nimport org.springframework.boot.test.mock.mockito.MockBean\nimport org.springframework.jdbc.datasource.init.DatabasePopulatorUtils\nimport org.springframework.jdbc.datasource.init.ResourceDatabasePopulator\nimport org.springframework.test.web.servlet.MockMvc\nimport org.springframework.transaction.annotation.Transactional\nimport org.springframework.web.context.ConfigurableWebApplicationContext\nimport spock.lang.Specification\n\nimport javax.sql.DataSource\n\nimport static org.hamcrest.CoreMatchers.containsString\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status; \n\n@SpringBootTest \n@AutoConfigureMockMvc \nclass SpockBookRepositorySpecification extends Specification { \n  @Autowired \n  private ConfigurableWebApplicationContext context \n\n  @Autowired \n  private DataSource ds; \n\n  @Autowired \n  private BookRepository repository; \n\n  @Autowired \n  private MockMvc mockMvc; \n\n  void setup() { \n    ResourceDatabasePopulator populator = \n       new ResourceDatabasePopulator(\n         context.getResource(\"classpath:/packt-books.sql\")); \n    DatabasePopulatorUtils.execute(populator, ds); \n  } \n\n  @Transactional \n  def \"Test RESTful GET\"() { \n    when: \n      def result = mockMvc.perform(get(\"/books/${isbn}\")); \n\n    then: \n      result.andExpect(status().isOk()) \n      result.andExpect( \n        content().string(containsString(title)) \n      ); \n\n    where: \n      isbn               | title \n      \"978-1-78398-478-7\"|\"Orchestrating Docker\" \n      \"978-1-78528-415-1\"|\"Spring Boot Recipes\" \n  } \n\n  @Transactional \n  def \"Insert another book\"() { \n    setup: \n      def existingBook =  \n        repository.findBookByIsbn(\"978-1-78528-415-1\") \n      def newBook = new Book(\"978-1-12345-678-9\",\n         \"Some Future Book\", existingBook.getAuthor(), \n         existingBook.getPublisher() \n      ) \n\n    expect: \n      repository.count() == 3 \n\n    when: \n      def savedBook = repository.save(newBook) \n\n    then: \n      repository.count() == 4 \n      savedBook.id > -1 \n  } \n} \n```", "```java\n@Autowired \nprivate PublisherRepository publisherRepository; \n\n@RequestMapping(value = \"/publisher/{id}\", method = RequestMethod.GET) \npublic List<Book> getBooksByPublisher(@PathVariable(\"id\") Long id) { \n    Optional<Publisher> publisher =\n        publisherRepository.findById(id);\n    Assert.notNull(publisher);\n    Assert.isTrue(publisher.isPresent());\n    return publisher.get().getBooks(); \n} \n```", "```java\n@OneToMany(mappedBy = \"publisher\") \n@JsonBackReference \nprivate List<Book> books; \n\n```", "```java\npublic List<Book> getBooks() { \n    return books; \n} \n\npublic void setBooks(List<Book> books) { \n    this.books = books; \n} \n```", "```java\n... \nclass SpockBookRepositorySpecification extends Specification { \n    ... \n    @MockBean \n    private PublisherRepository publisherRepository \n\n    @Transactional \n    def \"Test RESTful GET books by publisher\"() { \n        setup: \n          Publisher publisher =  \n                    new Publisher(\"Strange Books\") \n          publisher.setId(999) \n          Book book = new Book(\"978-1-98765-432-1\", \n                \"Mystery Book\", \n                new Author(\"John\", \"Doe\"), \n                publisher) \n          publisher.setBooks([book]) \n          Mockito.when(publisherRepository.count()). \n                thenReturn(1L)                    \n          Mockito.when(publisherRepository.findById(1L)). \n                thenReturn(Optional.of(publisher)) \n\n        when: \n          def result =  \n            mockMvc.perform(get(\"/books/publisher/1\")) \n\n        then: \n          result.andExpect(status().isOk()) \n          result.andExpect(content(). \n                string(containsString(\"Strange Books\"))) \n\n        cleanup: \n          Mockito.reset(publisherRepository) \n    } \n} \n```", "```java\n@SpringBootTest\n@AutoConfigureMockMvc \n```"]