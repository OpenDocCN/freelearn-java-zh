["```java\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-test</artifactId>\n  <scope>test</scope>\n</dependency>\n```", "```java\n<parent>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-parent</artifactId>\n  <version>2.1.0.BUILD-SNAPSHOT</version>\n  <relativePath/>\n</parent>\n```", "```java\n@Controller\npublic class BlogController {\n  private Logger logger = LoggerFactory.getLogger(BlogController.class);\n  @GetMapping(\"/\")\n  public String showLandingPage(Model model) {\n    logger.info(\"This is show home page method \");\n    return \"home\";\n  }\n}\n```", "```java\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-Thymeleaf </artifactId>\n</dependency>\n```", "```java\n<!DOCTYPE html>\n<html >\n\n<span th:text=\"${name}\">\n```", "```java\n<form:input name=\"name\" path=”name”/>\n```", "```java\n<input type=\"text\" name=\"name\" value=\"Nilang\" th:value=\"${name}\" />\n```", "```java\n<!DOCTYPE html>\n<html >\n<head th:fragment=\"jscssinclude\">\n    <!-- Required meta tags -->\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=yes\">\n    <!-- Bootstrap CSS -->\n    <link rel=\"stylesheet\" th:href=\"@{/css/bootstrap.min.css}\">\n    <link rel=\"stylesheet\" th:href=\"@{/css/blogpress.css}\">\n\n    <script th:src=\"img/jquery.min.js}\" type=\"text/javascript\"></script>\n    <script th:src=\"img/popper.js}\" type=\"text/javascript\"></script>\n    <script th:src=\"img/bootstrap.min.js}\" type=\"text/javascript\"></script>\n\n    <title th:text=\"${pageTitle}\">Title</title>\n</head>\n<body>\n  <div th:fragment=\"header_navigation\">\n    <div class=\"jumbotron text-center jumbotron-fluid\" \n        style=\"margin-bottom:0; padding:2rem 1 rem\" >\n         <h1>Blog Press</h1>\n         <p>Let's do Blogging ..!</p>\n     </div>\n     <nav class=\"navbar navbar-expand-sm bg-dark navbar-dark\">\n          <button class=\"navbar-toggler\" type=\"button\" \n              data-toggle=\"collapse\" data-target=\"#collapsibleNavbar\">\n              <span class=\"navbar-toggler-icon\"></span>\n          </button>\n          <div class=\"collapse navbar-collapse\" id=\"collapsibleNavbar\">\n              <ul class=\"navbar-nav\">\n                  <li class=\"nav-item\">\n                      <a class=\"nav-link\" th:href=\"@{/}\">Home</a>\n                  </li>\n               </ul>\n          </div>\n      </nav>\n    </div>\n</body>\n</html>\n```", "```java\n<!DOCTYPE html>\n<html >\n  <head th:replace=\"header :: jscssinclude\"></head>\n  <body>\n    <div th:replace=\"header :: header_navigation\"></div>\n    This is Home page\n  </body>\n</html>\n```", "```java\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-security</artifactId>\n</dependency>\n```", "```java\nspring.security.user.name=nilang\nspring.security.user.password=password\n```", "```java\n@SpringBootApplication(exclude = { SecurityAutoConfiguration.class })\npublic class BlogpressApplication {\n\n  public static void main(String[] args) {\n    SpringApplication.run(BlogpressApplication.class, args);\n  }\n}\n```", "```java\nspring.autoconfigure.exclude=org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration\n```", "```java\n@Configuration\n@EnableWebSecurity\n@ComponentScan(\"com.nilangpatel.blogpress\")\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n  …..\n}\n```", "```java\n@Override\npublic void configure(WebSecurity web) throws Exception {\n  web.ignoring().antMatchers(\"/js/**\");\n  web.ignoring().antMatchers(\"/css/**\");\n}\n```", "```java\n// create users and admin\n@Autowired\npublic void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {\n\n  BCryptPasswordEncoder encoder = passwordEncoder();\n  auth.inMemoryAuthentication() .passwordEncoder(encoder)\n    .withUser(\"blogUser1\").password(encoder.encode(\"password\")).authorities(\"USER\")\n    .and()\n    .withUser(\"blogUser2\").password(encoder.encode(\"password\")).authorities(\"USER\")\n    .and()\n    .withUser(\"blogAdmin\").password(encoder.encode(\"password\")).authorities(\"ADMIN\");\n}\n\n@Bean\npublic BCryptPasswordEncoder passwordEncoder() {\n  return new BCryptPasswordEncoder();\n}\n```", "```java\n@Override\nprotected void configure(HttpSecurity http) throws Exception {\n  http.authorizeRequests()\n    .antMatchers(\"/\").permitAll()\n    .antMatchers(\"/controlPage/\")\n    .hasAnyAuthority(\"ROLE_USER\",\"ROLE_ADMIN\")\n    .and()\n  .formLogin().loginPage(\"/login\").permitAll()\n    .defaultSuccessUrl(\"/controlPage\")\n    .failureUrl(\"/login?error=true\")\n    .and()\n  .logout()\n    .permitAll().logoutSuccessUrl(\"/login?logout=true\");\n}\n```", "```java\nprotected void configure(HttpSecurity http) throws Exception {\n  http.authorizeRequests()\n    .anyRequest().authenticated()\n    .and()\n    .formLogin().and()\n    .httpBasic();\n}\n```", "```java\n@GetMapping(\"/\")\n  public String showHomePage(Model model) {\n    logger.info(\"This is show home page method \");\n    setProcessingData(model, BlogpressConstants.TITLE_HOME_PAGE);\n    return \"home\";\n  }\n@GetMapping(\"/controlPage\")\n  public String showControlPage(Model model) {\n    logger.info(\"This is control page \");\n      setProcessingData(model, BlogpressConstants.TITLE_LANDING_CONTROL_PAGE);\n      return \"control-page\";\n  }\n@GetMapping(\"/login\")\n  public String showLoginPage(@RequestParam(value = \"error\",required = false) String error,\n      @RequestParam(value = \"logout\", required = false) String logout,Model model) {\n    logger.info(\"This is login page URL \");\n    if (error != null) {\n      model.addAttribute(\"error\", \"Invalid Credentials provided.\");\n    }\n    if (logout != null) {\n      model.addAttribute(\"message\", \"Logged out\");\n    }\n    setProcessingData(model, BlogpressConstants.TITLE_LOGIN_PAGE);\n    return \"login\";\n  }\n```", "```java\n@ModelAttribute(\"validUserLogin\")\npublic boolean isUserLoggedIn() {\n  return SecurityContextHolder.getContext().getAuthentication() != null && SecurityContextHolder.getContext().getAuthentication().isAuthenticated() &&\n       //when Anonymous Authentication is enabled\n       !(SecurityContextHolder.getContext().getAuthentication() instanceof AnonymousAuthenticationToken); \n}\n\n@ModelAttribute(\"currentUserName\")\npublic String getCurrentUserName() {\n    return SecurityContextHolder.getContext().getAuthentication().getName();\n}\n@ModelAttribute(\"hasAdminRole\")\n  public boolean checkIfUserHasAdminRole(){\n    return checkIfUserHasRole(BlogpressConstants.ROLE_ADMIN);\n  }\n@ModelAttribute(\"hasUserRole\")\n  public boolean checkIfUserHasUserRole(){\n    return checkIfUserHasRole(BlogpressConstants.ROLE_USER);\n  }\nprivate boolean checkIfUserHasRole(String roleName) {\n     boolean hasUserRole =      SecurityContextHolder.getContext().getAuthentication().getAuthorities().stream()\n                .anyMatch(r -> r.getAuthority().equals(roleName));\n     return hasUserRole;\n  }\n```", "```java\n{\n}\n```", "```java\nPUT students\n{\n\n}\n```", "```java\n {\n    \"settings\" : {\n        \"index\" : {\n            \"number_of_shards\" : 3, \n            \"number_of_replicas\" : 2 \n        }\n    }\n }\n```", "```java\nPUT student\n{\n    \"settings\" : {\n        \"index\" : {\n            \"number_of_shards\" : 3, \n            \"number_of_replicas\" : 2 \n        }\n    }\n}\n```", "```java\n{\n    \"properties\":{\n      \"id\":{\"type\":\"long\"},\n      \"name\":{\"type\":\"text\"},\n      \"standard\":{\"type\":\"integer\"},\n      \"division\":{\"type\":\"text\"},\n      \"gender\":{\"type\":\"text\"}\n    }\n }\n```", "```java\nPUT students/_mapping/student\n{\n  \"properties\": {\n    \"id\":{\"type\":\"long\"},\n    \"name\":{\"type\":\"text\"},\n    \"standard\":{\"type\":\"integer\"},\n    \"division\":{\"type\":\"text\"},\n    \"Gender\":{\"type\":\"text\"}\n   }\n}\n```", "```java\n{\n    \"name\":\"Nilang\",\n    \"standard\":3,\n    \"division\":\"B\",\n    \"gender\":\"M\"\n}\n```", "```java\nPUT students/student/1\n{\n    \"name\":\"Nilang\",\n    \"standard\":3,\n    \"division\":\"B\",\n    \"gender\":\"M\"\n}\n```", "```java\nGET students/student/1\n```", "```java\n{\n    \"_index\": \"students\",\n    \"_type\": \"student\",\n    \"_id\": \"1\",\n    \"_version\": 1,\n    \"found\": true,\n    \"_source\": {\n        \"name\": \"Nilang\",\n        \"standard\": 1,\n        \"division\": \"B\",\n        \"gender\": \"M\"\n    }\n}\n```", "```java\n{\n    \"name\":\"Robert\",\n    \"standard\":6,\n    \"division\":\"C\",\n    \"gender\":\"M\"\n}\n```", "```java\nPUT students/student/5\n{\n    \"name\":\"Robert\",\n    \"standard\":6,\n    \"division\":\"C\",\n    \"gender\":\"M\"\n}\n```", "```java\nDELETE students/student/1\n```", "```java\nGET students/student/_search?q=name:nilang\n```", "```java\nGET students/student/_search\n{\n  \"query\": {\n      \"match\": {\n        \"name\": \"nilang\"\n      }\n  }\n}\n```", "```java\nPUT blog\n{\n  \"mappings\":{\n    \"blog\":{\n      \"properties\":{\n        \"title\":{\"type\":\"text\"},\n        \"body\":{\"type\":\"text\"},\n        \"status\":{\"type\":\"text\"},\n        \"createdBy\":{\"type\":\"text\"},\n        \"createdDate\":{\"type\":\"date\",\n                \"format\": \"MM-dd-yyyy'T'HH:mm:ss\"},\n        \"publishDate\":{\"type\":\"date\",\n                           \"format\": \"MM-dd-yyyy'T'HH:mm:ss\"},\n       \"comments\":{\n        \"type\":\"nested\",\n        \"properties\":{\n          \"id\":{\"type\":\"text\"},\n          \"parentId\":{\"type\":\"keyword\"},\n          \"childSequence\":{\"type\":\"integer\"},\n          \"position\":{\"type\":\"text\"},\n          \"status\":{\"type\":\"keyword\"},\n          \"level\":{\"type\":\"integer\"},\n          \"user\":{\"type\":\"text\"},\n          \"emailAddress\":{\"type\":\"text\"},\n          \"commentText\":{\"type\":\"text\"},\n          \"createdDate\":{\"type\":\"date\",\n                 \"format\": \"MM-dd-yyyy'T'HH:mm:ss\"}\n          }\n        }\n      }\n  }\n  }\n}\n```", "```java\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-elasticsearch</artifactId>\n</dependency>\n```", "```java\nelasticsearch.clustername=elasticsearch\nelasticsearch.host=localhost\nelasticsearch.port=9300\n```", "```java\n@Configuration\n@EnableElasticsearchRepositories(basePackages = \"com.nilangpatel.blogpress.repository\")\n@ComponentScan(basePackages = { \"com.nilangpatel.blogpress.config\" })\npublic class ElasticDataConfig {\n\n     @Value(\"${elasticsearch.host}\")\n      private String esHost;\n\n      @Value(\"${elasticsearch.port}\")\n      private int esPort;\n\n      @Value(\"${elasticsearch.clustername}\")\n      private String esClusterName;\n\n      @Bean\n      public Client client() throws Exception {\n\n          TransportClientFactoryBean transportClientFactory = new TransportClientFactoryBean();\n          transportClientFactory.setClusterName(esClusterName);\n          transportClientFactory.afterPropertiesSet();\n\n          return transportClientFactory.getObject()\n                    .addTransportAddress(\n            new TransportAddress(InetAddress.getByName(esHost), esPort));\n      }\n\n      @Bean\n      public ElasticsearchTemplate elasticsearchTemplate() throws Exception {\n          return new ElasticsearchTemplate(client());\n      }\n\n}\n```", "```java\n@Document(indexName = \"blog\", type = \"blog\")\npublic class Blog {\n\n  @Id\n  private String _id;\n  private String title;\n  private String body;\n  private String status;\n  private String createdBy;\n\n  @JsonFormat\n    (shape = JsonFormat.Shape.STRING, pattern = \"MM-dd-yyyy'T'HH:mm:ss\")\n  private Date createdDate;\n\n  @JsonFormat\n    (shape = JsonFormat.Shape.STRING, pattern = \"MM-dd-yyyy'T'HH:mm:ss\")\n  private Date publishDate;\n\n  @Field(includeInParent=true, type = FieldType.Nested)\n  private List<Comment> comments;\n\n// Getter and setters for above properties\n```", "```java\npublic interface BlogRepository extends ElasticsearchRepository<Blog, String>\n```", "```java\n@Component\npublic class BlogService {\n  @Autowired\n  private BlogRepository blogRepository;\n....\n}\n```", "```java\npublic void addUpdateBlog(Blog blog) {\n    blogRepository.save(blog);\n  }\n```", "```java\n@GetMapping(\"/showAddNew\")\n  public String showAddNew(Model model) {\n    logger.info(\"This is addNew page URL \");\n    setProcessingData(model, BlogpressConstants.TITLE_NEW_BLOG_PAGE);\n    return \"add-new\";\n  }\n\n  @PostMapping(\"/addNewBlog\")\n  public String addNewBlog(@RequestParam(value = \"title\",required = true) String title,\n       @RequestParam(value = \"body\",required = true) String body,Model model) {\n\n    logger.info(\"Adding new blog with title :\"+title );\n    Blog blog = new Blog();\n    blog.setTitle(title);\n    blog.setBody(body);\n    blog.setCreatedBy(getCurrentUserName());\n    blog.setCreatedDate(new Date());\n    blog.setPublishDate(new Date());\n    blog.setStatus(BlogStatus.PUBLISHED.getStatus());\n\n    blogService.addNewBlog(blog);\n\n    return \"home\";\n  }\n```", "```java\nGET blog/blog/_search\n```", "```java\npublic List<Blog> getAllBlogs() {\n    List<Blog> blogList = new ArrayList<Blog>();\n    Iterable<Blog> blogIterable = blogRepository.findAll();\n    Iterator<Blog> blogIterator = blogIterable.iterator();\n    while(blogIterator.hasNext()) {\n      blogList.add(blogIterator.next());\n    }\n    return blogList;\n  }\n```", "```java\nGET blog/blog/_search\n{\n  \"query\": {\n    \"bool\": {\n      \"should\": [\n        { \"match\": { \"title\": \"java\" }},\n        { \"match\": { \"body\": \"java\" }}\n      ]\n    }\n  }\n}\n```", "```java\nQueryBuilder booleanQry = QueryBuilders.boolQuery()\n                     .should(QueryBuilders.termQuery(\"title\", searchTxt))\n                     .should(QueryBuilders.termQuery(\"body\", searchTxt));\n\n    SearchResponse response = elasticsearchTemplate.getClient().prepareSearch(\"blog\")\n          .setTypes(\"blog\")\n          .setQuery(booleanQry)\n          .execute().actionGet();\n```", "```java\npublic class Comment {\n  private String id;\n  private String blogId;\n  private String parentId;\n  private int childSequence;\n  private String position;\n  private String status;\n  private int level;\n  private String user;\n  private String emailAddress;\n  private String commentText;\n\n  @JsonFormat\n    (shape = JsonFormat.Shape.STRING, pattern = \"MM-dd-yyyy'T'HH:mm:ss\")\n  private Date createdDate;\n\n//Getter and Setter methods\n.....\n}\n```", "```java\nGET blog/blog/_search\n{\n  \"query\": {\n    \"match\": {\n      \"_id\": \"1huEWWYB1CjEZ-A9sjir\"\n    }\n  },\n  \"aggs\": {\n    \"aggChild\": {\n      \"nested\": {\n        \"path\": \"comments\"\n      },\n      \"aggs\": {\n        \"filterParentId\": {\n          \"filter\": {\n            \"nested\": {\n              \"path\": \"comments\",\n              \"query\": {\n                \"match\": {\n                  \"comments.parentId\": \"0\"\n                }\n              }\n            }\n          },\n          \"aggs\": {\n            \"maxChildSeq\": {\n              \"max\": {\n                \"field\": \"comments.childSequence\"\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```", "```java\n  \"aggregations\": {\n    \"aggChild\": {\n      \"doc_count\": 4,\n      \"filterParentId\": {\n        \"doc_count\": 2,\n        \"maxChildSeq\": {\n          \"value\": 3\n        }\n      }\n    }\n  }\n```", "```java\npublic interface BlogRepository extends ElasticsearchRepository<Blog, String>,BlogRepositoryCustom\n```", "```java\n@Repository\npublic class BlogRepositoryCustomImpl implements BlogRepositoryCustom {\n\n  private static Logger logger = LoggerFactory.getLogger(BlogRepositoryCustomImpl.class);\n\n  @Autowired\n  private ElasticsearchTemplate elasticsearchTemplate;\n\n  ....\n\n}\n```", "```java\npublic int getCurrentChildSequence(String blogId,String parentCommentId) {\n    int currentChildSeq=0;\n    TermQueryBuilder termQueryBuilder = new TermQueryBuilder(\"comments.parentId\", parentCommentId);\n\n    NestedAggregationBuilder aggregationBuilder = AggregationBuilders.nested(\"aggChild\",  \"comments\").subAggregation(AggregationBuilders.filter(\"filterParentId\", termQueryBuilder).subAggregation(AggregationBuilders.max(\"maxChildSeq\").field(\"comments.childSequence\")));\n    TermQueryBuilder rootTermQueryBuilder = new TermQueryBuilder(\"_id\", blogId);\n    SearchResponse response = elasticsearchTemplate.getClient().prepareSearch(\"blog\")\n      .setTypes(\"blog\")\n      .setQuery(rootTermQueryBuilder)\n      .addAggregation(aggregationBuilder)\n      .execute().actionGet();\n\n    if(response !=null) {\n      if(response.getAggregations() !=null) {\n        List<Aggregation> aggLst = response.getAggregations().asList();\n        if(aggLst !=null) {\n          Aggregation resultAgg = aggLst.get(0);\n          if(resultAgg !=null) {\n            //getMaxChildSequenceFromJson method parse the json to get max child sequence\n            currentChildSeq = getMaxChildSequenceFromJson(resultAgg.toString());\n          }\n        }\n      }\n    }\n    //Adding one to set next sequence\n    currentChildSeq=currentChildSeq+1;\n    return currentChildSeq;\n  }\n```", "```java\n Optional<Blog> blogObj = blogRepository.findById(blogId);\n    if(blogObj.isPresent()) {\n      return blogObj.get();\n    }else {\n      return null;\n    }\n```", "```java\nGET blog/blog/_search\n{\n  \"aggs\": {\n    \"aggChild\": {\n      \"nested\": {\n        \"path\": \"comments\"\n      },\n      \"aggs\": {\n        \"aggSortComment\": {\n          \"top_hits\": {\n            \"sort\": [\n              {\n                \"comments.createdDate\": {\n                  \"order\": \"desc\"\n                }\n              }\n            ],\"from\": 0, \n            \"size\": 10\n          }\n        }\n      }\n    }\n  }\n}\n```", "```java\n\"aggregations\": {\n    \"aggChild\": {\n      \"doc_count\": 7,\n      \"aggSortComment\": {\n        \"hits\": {\n          \"total\": 7,\n          \"max_score\": null,\n          \"hits\": [\n            {\n              \"_index\": \"blog\",\n              \"_type\": \"blog\",\n              \"_id\": \"Bsz2Y2YBksR0CLn0e37E\",\n              \"_nested\": {\n                \"field\": \"comments\",\n                \"offset\": 2\n              },\n              \"_score\": null,\n              \"_source\": {\n                \"id\": \"e7EqiPJHsj1539275565438\",\n                \"blogId\": \"Bsz2Y2YBksR0CLn0e37E\",\n                \"parentId\": \"0\",\n                \"childSequence\": 2,\n                \"position\": \"1.2\",\n                \"status\": \"M\",\n                \"level\": 1,\n                \"user\": \"Nilang Patel\",\n                \"emailAddress\": \"nilprofessional@gmail.com\",\n                \"commentText\": \"installatin of java. great blog\",\n                \"createdDate\": \"10-11-2018T16:32:45\"\n              },\n              \"sort\": [\n                1539275565000\n              ]\n            },\n            { \n              .... Other JSON Objects, each represents comment data.\n            }...\n         ]\n      }\n    }\n  } \n}\n```", "```java\npublic List<Comment> getAllComments(int from, int size){\n\n    NestedAggregationBuilder aggregation = AggregationBuilders.nested(\"aggChild\", \"comments\").\n        subAggregation(AggregationBuilders.topHits(\"aggSortComment\").sort(\"comments.createdDate\", SortOrder.DESC).from(from).size(size));\n\n    SearchResponse response = elasticsearchTemplate.getClient().prepareSearch(\"blog\")\n        .setTypes(\"blog\")\n        .addAggregation(aggregation)\n        .execute().actionGet();\n\n    List<Aggregation> responseAgg = response.getAggregations().asList();\n    //getAllCommentsFromJson method process the json and return desire data.\n    return getAllCommentsFromJson(responseAgg.get(0).toString());\n  }\n```", "```java\nGET blog/blog/_search\n{\n  \"_source\": false,\n  \"aggs\": {\n    \"aggChild\": {\n      \"nested\": {\n        \"path\": \"comments\"\n      },\n      \"aggs\": {\n        \"aggStatsComment\": {\n          \"terms\": {\n            \"field\": \"comments.status\",\n            \"include\": \"K\"\n          },\n          \"aggs\": {\n            \"aggSortComment\": {\n              \"top_hits\": {\n                \"sort\": [\n                  {\n                    \"comments.createdDate\": {\n                      \"order\": \"desc\"\n                    }\n                  }\n                ],\n                \"from\": 0,\n                \"size\": 10\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```", "```java\npublic List<Comment> getCommentsForStatus(String status,int from, int size) {\n\n     IncludeExclude includeExclude = new IncludeExclude(status, null);\n\n     NestedAggregationBuilder aggregation = AggregationBuilders.nested(\"aggChild\", \"comments\").\n                    subAggregation(AggregationBuilders.terms(\"aggStatsComment\").\n                    field(\"comments.status\").includeExclude(includeExclude).\n                    subAggregation(AggregationBuilders.topHits(\"aggSortComment\").size(10).sort(\"com ments.createdDate\", SortOrder.DESC))\n    );\n\n    SearchResponse response = elasticsearchTemplate.getClient().prepareSearch(\"blog\")\n      .setTypes(\"blog\")\n      .addAggregation(aggregation)\n      .execute().actionGet();\n\n    List<Aggregation> responseAgg = response.getAggregations().asList();\n\n    return getAllCommentsWithStatusFromJson(responseAgg.get(0).toString());\n\n  }\n```", "```java\npublic void updateCommentStatus(String blogId,String commentId, List<Comment> commentList, String updatedStatus) {\n    if(commentList !=null) {\n      for(Comment comment: commentList) {\n        if(comment.getId().equals(commentId)) {\n          comment.setStatus(updatedStatus);\n          break;\n        }\n      }\n        Blog blog = this.getBlog(blogId);\n        blog.setComments(commentList);\n        blogRepository.save(blog);\n    }\n  }\n```", "```java\n@RestController\n@RequestMapping(\"api\")\npublic class BlogRESTController {\n\nprivate Logger logger = LoggerFactory.getLogger(BlogRESTController.class);\n@Autowired\nprivate BlogService blogService;\n\n@RequestMapping(value = \"/listBlogs\", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)\npublic ResponseEntity<List<Blog>> getAllBlogJSON() {\n    logger.info(\"getting all blog data in json format \");\n    List<Blog> allBlogs = blogService.getAllBlogs();\n    return new ResponseEntity<List<Blog>>(allBlogs, HttpStatus.OK);\n  } \n\n@RequestMapping(value = \"/listAllComments\", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)\npublic ResponseEntity<List<Comment>> getAllCommentJSON() {\n    logger.info(\"getting all blog data in json format \");\n    List<Comment> allComments = blogService.getAllComments(0, 100);\n    return new ResponseEntity<List<Comment>>(allComments, HttpStatus.OK);\n  }\n}\n```", "```java\n$(\"#addAddress\").live('click', function(){;\n       var oldAddress = \"\";//Assume that oldAddress value supplied from server side.\n       var newContent = \"<div id='group2' class='accordion-group'>\" +\n                        \"<input type='text' id='address' class='textbox-input'\"+ oldAddress +\"/>\"                            + \"</div>\";\n       $(\"#accordion1\").html(newContent);\n });\n```", "```java\n    <div id=\"studentSection\"></div>\n\n    <script id=\"greeting_template\" type=\"text/template\">\n        <div>\n          Hello, <b><span>{{firstName}}</span></b>   <span>{{lastName}}</span>\n        <div>\n    </script> \n    <script type=\"text/javascript\">\n          var template = $(\"#greeting_template\").html();\n          var student = {\"firstName\":\"Nilang\",\"lastName\":\"Patel\"};\n          var text = Mustache.render(template, student);\n          $(\"#studentSection\").html(text);\n    </script>\n```", "```java\n<!-- Define the template -->\n      <script id=\"blog_template\" type=\"text/template\">\n        {{#blogs}}\n         <div class=\"card bg-white mb-3\">\n           <div class=\"card-body\">\n          <h5 class=\"card-title\">{{title}}</h5>\n          <p class=\"card-text\">{{body}}</p>\n           <form th:action=\"@{/viewBlog}\" method=\"post\">\n            <input type=\"hidden\" name=\"blogId\" value=\"{{id}}\">\n            <button type=\"submit\" class=\"btn btn-primary\">Read More ..</button>\n           </form>\n           </div>\n           <div class=\"card-footer text-muted\">\n          By : <b>{{createdBy}}</b>   comments: <b>{{comments.length}}</b>   Published on <b>{{publishDateForDisplay}}</b>\n           </div>\n         </div>\n        {{/blogs}} \n      </script>\n\n       <div class=\"container\">\n          <div class=\"blogpress-section\" id=\"blogList\">\n          </div>\n       </div>\n\n     <script th:inline=\"javascript\" type=\"text/javascript\">\n       jQuery(document).ready(function(){\n        var blogData = {};\n        var template = $(\"#blog_template\").html();\n        jQuery.get(/*[[@{/api/listBlogs}]]*/, function(data, status){\n          blogData[\"blogs\"] = data;\n              var text = Mustache.render(template, blogData);\n              $(\"#blogList\").html(text); \n          });\n      });\n    </script>\n```", "```java\n<script id=\"comment_template\" type=\"text/template\">\n        {{#comments}}\n         <div class=\"card bg-white mb-3\">\n           <div class=\"card-body\">\n          <div class=\"card-title\">\n            <div class=\"clearfix\">\n              <p class=\"mb-0\">\n                By <span class=\"float-left\">{{user}}</span>\n                On <span class=\"float-right\">{{createdDateForDisplay}}</span>\n              </p>\n            </div>\n          </div>\n          <p class=\"card-text\">{{commentText}}</p>\n           <div class=\"card-footer text-muted\">\n            {{#showApproveReject}}\n             <div>\n              <form th:action=\"@{/updateCommentStatus}\" method=\"post\" id=\"updateCommentStatusFrm-{{id}}\">\n              <input type=\"hidden\" name=\"blogId\" value=\"{{blogId}}\">\n              <input type=\"hidden\" name=\"commentId\" value=\"{{id}}\">\n              <input type=\"hidden\" name=\"commentStatus\" id=\"commentStatus-{{id}}\" value=\"\">\n              <button type=\"button\" class=\"btn btn-primary\" id=\"approveComment-{{id}}\">Approve</button>\n              <button type=\"button\" class=\"btn btn-primary\" id=\"rejectComment-{{id}}\">Reject</button>\n              </form>\n             </div>\n            {{/showApproveReject}}\n            {{#showReply}}\n             <div>\n                 <form th:action=\"@{/replyComment}\" method=\"post\">\n                 <input type=\"hidden\" name=\"blogId\" value=\"{{blogId}}\">\n                 <input type=\"hidden\" name=\"commentId\" value=\"{{commentId}}\">\n                 <button type=\"button\" class=\"btn btn-primary\">Reply</button>\n                 </form>\n               </div>\n            {{/showReply}}\n            </div>\n           </div>\n         </div>\n        {{/comments}} \n      </script>\n\n        <div class=\"container\">\n          <div class=\"blogpress-section\" id=\"commentList\"></div>\n        </div>\n\n    <script th:inline=\"javascript\" type=\"text/javascript\">\n       jQuery(document).ready(function(){\n        var commentData = {};\n        var template = $(\"#comment_template\").html();\n        jQuery.get(/*[[@{/api/listAllComments}]]*/, function(data, status){\n          for (var i = 0; i < data.length; i++) {\n              var comment = data[i];\n              if(comment.status === 'M'){\n                comment[\"showApproveReject\"]=\"true\";\n              }\n              if(comment.status === 'A'){\n                comment[\"showReply\"]=\"true\";\n              }\n          }\n          commentData[\"comments\"] = data;\n              var text = Mustache.render(template, commentData);\n              $(\"#commentList\").html(text); \n          });\n      });\n    </script>\n```"]