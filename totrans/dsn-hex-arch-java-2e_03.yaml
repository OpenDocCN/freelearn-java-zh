- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: Handling Behavior with Ports and Use Cases
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用端口和用例处理行为
- en: Once we have defined the business rules in the Domain hexagon, we can start
    thinking about ways to use those rules to create software features while considering
    how the system will handle the data coming from users and other applications.
    Ports and use cases address such concerns in the hexagonal architecture, where
    we need to orchestrate system data and business rules to provide useful software
    functionality.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们在领域六边形中定义了业务规则，我们就可以开始考虑如何使用这些规则来创建软件功能，同时考虑系统将如何处理来自用户和其他应用程序的数据。端口和用例在六边形架构中解决了这些问题，我们需要协调系统数据和业务规则以提供有用的软件功能。
- en: In this chapter, we’ll explore how to employ use cases to define the behaviors
    supported by the software. Through the integration of input and output ports with
    use cases, we’ll understand the role of such ports in establishing the communication
    flow within the hexagonal system.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨如何使用用例来定义软件支持的行为。通过将输入和输出端口与用例相结合，我们将了解这些端口在建立六边形系统内部通信流程中的作用。
- en: 'We will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: Expressing software behavior with use cases
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用用例表达软件行为
- en: Implementing use cases with input ports
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用输入端口实现用例
- en: Using output ports to deal with external data
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用输出端口处理外部数据
- en: Automating behavior with the Application hexagon
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用应用六边形自动化行为
- en: “By the end of this chapter, you’ll be able to employ ports and use cases to
    coordinate all the things a hexagonal system must do to fulfill user requirements.”
    Once you have grasped the fundamentals of ports and use cases, it will be possible
    to utilize them to combine elements from both the Domain and Application hexagons
    to construct powerful features.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: “在本章结束时，您将能够使用端口和用例来协调六边形系统必须执行的所有操作以满足用户需求。”一旦您掌握了端口和用例的基本原理，您就可以利用它们将领域和应用六边形中的元素结合起来，构建强大的功能。
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To compile and run the code examples presented in this chapter, you will need
    the latest **Java SE Development Kit** and **Maven 3.8** installed on your computer.
    They are both available for the Linux, Mac, and Windows operating systems.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要编译和运行本章中提供的代码示例，您需要在您的计算机上安装最新的**Java SE开发工具包**和**Maven 3.8**。它们都适用于Linux、Mac和Windows操作系统。
- en: You can find the code files for this chapter on GitHub at [https://github.com/PacktPublishing/Designing-Hexagonal-Architecture-with-Java/tree/main/Chapter03](https://github.com/PacktPublishing/Designing-Hexagonal-Architecture-with-Java/tree/main/Chapter03).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在GitHub上找到本章的代码文件，链接为[https://github.com/PacktPublishing/Designing-Hexagonal-Architecture-with-Java/tree/main/Chapter03](https://github.com/PacktPublishing/Designing-Hexagonal-Architecture-with-Java/tree/main/Chapter03)。
- en: Expressing software behavior with use cases
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用用例表达软件行为
- en: A **software system** is nothing more than a set of behaviors working together
    to achieve the goals defined by users or even other software systems. A software
    behavior, in turn, is a worthy action that, alone or combined with other software
    actions, contributes to realizing a worthy software goal. Such goals are intimately
    connected to the desires expressed by interested users or systems.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**软件系统**不过是一组协同工作以实现用户或甚至其他软件系统定义的目标的行为。软件行为反过来又是一个值得的行动，单独或与其他软件行为结合，有助于实现一个值得的软件目标。这些目标与感兴趣的用户或系统表达出的愿望密切相关。'
- en: We can classify those interested folks as stakeholders or actors from which
    we will ultimately derive the real-world needs that will be transmuted into goals.
    These actors' goals will be fulfilled by the **System under Discussion** (**SuD**),
    or simply the software you are developing.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将那些感兴趣的各方归类为利益相关者或参与者，我们将从他们那里最终推导出将转化为目标的真实世界需求。这些参与者的目标将通过**讨论的系统**（**SuD**）或简单地说是您正在开发的软件来实现。
- en: 'From the hexagonal architecture’s standpoint, we can relate these actors to
    what we saw in [*Chapter 1*](B19777_01.xhtml#_idTextAnchor014), *Why Hexagonal
    Architecture?*, when discussing driver and driven operations. In the same vein,
    we can classify the SuD actors: the **driver actor** is a person or system that
    triggers one of the SuD behaviors, while the **driven actor** is an external system
    consumed by the SuD.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 从六边形架构的角度来看，我们可以将这些参与者与我们之前在[*第1章*](B19777_01.xhtml#_idTextAnchor014)中看到的联系起来，即*为什么选择六边形架构？*，当时讨论了驱动和被驱动操作。同样，我们可以对SuD参与者进行分类：**驱动参与者**是一个触发SuD行为的人或系统，而**被驱动参与者**是SuD消耗的外部系统。
- en: To express what a system does in both functional and non-functional terms, people
    such as Ivar Jacobson and Alistair Cockburn and the Agile community, in general,
    have contributed to developing useful techniques to transform business requirements
    into meaningful written descriptions of how a system should behave. Among those
    techniques, one that stands out is that of use cases.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在功能和非功能术语中表达系统应该做什么，像Ivar Jacobson和Alistair Cockburn这样的人以及敏捷社区普遍做出了贡献，他们开发了有用的技术，将业务需求转化为有意义的书面描述，说明系统应该如何表现。在这些技术中，最突出的是用例技术。
- en: Unlike the UML, which depicts a high-level view of the system through the relationship
    between diagrams, use cases perform a deeper dive by providing a detailed written
    description of SuD behaviors. **Use cases** are a valuable technique to set SuD
    goals, the means or behaviors to fulfill them, the possible failure scenarios,
    and what to do when they occur. When combined with DDD techniques, use cases are
    instrumental in bridging the gap of dealing with application-specific activities
    that mean more to the SuD – and the Application hexagon – than to the problem
    domain and its business rules in the Domain hexagon. By thinking in terms of use
    cases, we are making a significant step to improve the separation of concerns
    in the hexagonal architecture.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 与UML不同，UML通过图之间的关系展示系统的高级视图，而用例通过提供对SuD行为的详细书面描述进行更深入的挖掘。**用例**是一种宝贵的技巧，用于设定SuD目标、实现这些目标的方法或行为、可能出现的失败场景以及出现时应该采取的措施。当与DDD技术结合使用时，用例在弥合处理特定于应用程序的活动方面的差距方面发挥着重要作用——这些活动对SuD——以及应用程序六边形——比领域六边形中的问题域及其业务规则更为重要。通过从用例的角度思考，我们朝着在六边形架构中提高关注点分离迈出了重要的一步。
- en: We can create use cases by simply writing a description about them, but it’s
    also possible to express them through code. Next, we’ll learn how to create use
    cases both in written and code form.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过简单地写下关于它们的描述来创建用例，但也可以通过代码来表达它们。接下来，我们将学习如何以书面和代码的形式创建用例。
- en: How to create a use case
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何创建用例
- en: 'There are elaborate approaches to creating written use cases where you may
    specify detailed and standardized information about the input data, possible behaviors,
    and use case results. Cockburn classifies those detailed use cases as fully dressed
    ones. Fully dressed use cases may be helpful in new teams, where people are not
    used to working together. The standards enforced by the fully dressed approach
    help provide a clear path about how a use case should be built. It helps prevent
    situations where a person may consider certain use case aspects that are not present
    in use cases written by another person. An example of a fully dressed use case
    is as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些创建书面用例的详细方法，您可以指定有关输入数据、可能的行为和用例结果的详细和标准化信息。Cockburn将这些详细用例归类为全装用例。全装用例在新团队中可能很有帮助，因为人们不习惯一起工作。全装方法强制执行的规范有助于提供一条清晰的路径，说明如何构建用例。它有助于防止出现一个人可能考虑某些用例方面，而这些方面在其他人的用例中并不存在的情况。以下是一个全装用例的例子：
- en: '**Actor**: Infrastructure engineer'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**参与者**：基础设施工程师'
- en: '**Goal**: To add a new network to an edge router'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标**：向边缘路由器添加新的网络'
- en: '**Scope**: Infrastructure department'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**范围**：基础设施部门'
- en: '**Trigger**: A particular reason to segregate network access through a different
    network'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**触发器**：一个特定的原因，通过不同的网络隔离网络访问'
- en: '**Input data**: Router ID, network name, address, and CIDR'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输入数据**：路由器ID、网络名称、地址和CIDR'
- en: '**Actions**:'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**操作**：'
- en: Look up the router ID.
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找路由器ID。
- en: Validate that the network address doesn’t already exist.
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证网络地址尚未存在。
- en: Validate that the CIDR is not below the minimum allowed.
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证CIDR是否不低于最低允许值。
- en: If the previous validations are okay, add the network to the informed router.
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果前面的验证没有问题，将网络添加到已通知的路由器。
- en: On the opposite side, we have the less formal and casual types of use cases.
    The main characteristic of casual use cases is that they don’t follow standards
    about how the information should be recorded. They try to convey as much meaning
    as possible in one or two paragraphs, as mentioned in the following example.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们还有不那么正式和随意的用例类型。非正式用例的主要特点是它们不遵循关于如何记录信息的标准。它们试图在一个或两个段落中传达尽可能多的意义，如下面的例子所述。
- en: The infrastructure engineer sends a request to the application containing the
    router ID, network name, address, and CIDR. The application performs a lookup
    in the router ID, then validates that the network does not already exist, followed
    by another validation to confirm that the CIDR value is not below the minimum
    allowed. If all the validations are okay, then the system proceeds to add the
    network to the informed router.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 基础设施工程师向应用程序发送包含路由器ID、网络名称、地址和CIDR的请求。应用程序在路由器ID中进行查找，然后验证网络尚未存在，接着验证CIDR值是否不低于最低允许值。如果所有验证都正常，则系统继续将网络添加到指定的路由器。
- en: Aside from the formal and casual written techniques, it’s possible to express
    user intent directly in the code through automated tests. That approach relies
    on **behavior-driven design** (**BDD**) principles related to discovery, formulation,
    and automation. In such an approach, you start talking with business people trying
    to discover what they need. The output of this discovery process contains examples
    of situations and behaviors depicting the business need. Then, you move on to
    the formulation phase, where structured documentation is created based on those
    examples. Finally, the automation phase is where tests are created and executed
    to validate those behaviors from examples described and structured in previous
    phases.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 除了正式和非正式的书面技巧之外，还可以通过自动化测试直接在代码中表达用户意图。这种方法依赖于与发现、制定和自动化相关的**行为驱动设计**（**BDD**）原则。在这种方法中，你开始与商业人士交谈，试图发现他们的需求。这个发现过程的输出包含描述业务需求的情况和行为示例。然后，你进入制定阶段，根据这些示例创建结构化文档。最后，自动化阶段是创建和执行测试以验证先前阶段中描述和结构化的行为。
- en: When employing BDD earlier in software development, we have the opportunity
    to create use cases iteratively based on examples and tests created to validate
    business ideas.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件开发早期采用BDD（行为驱动开发），我们有根据创建的示例和测试迭代创建用例的机会，以验证业务想法。
- en: 'With the aid of tools such as Cucumber, we can adopt the BDD approach in our
    hexagonal application. To convert the written use cases we built previously, we
    need to create a Cucumber feature file:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在Cucumber等工具的帮助下，我们可以在我们的六边形应用中采用BDD方法。为了将我们之前构建的书面用例转换为Cucumber功能文件，我们需要创建一个Cucumber功能文件：
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: public class AddNetworkStepsTest {
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: public class AddNetworkStepsTest {
- en: private RouterId routerId;
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: private RouterId routerId;
- en: private Router router;
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: private Router router;
- en: private RouterNetworkFileAdapter routerNetworkFileAdapter
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: private RouterNetworkFileAdapter routerNetworkFileAdapter
- en: = RouterNetworkFileAdapter.getInstance();
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: = RouterNetworkFileAdapter.getInstance();
- en: Network network = new Network(new IP("20.0.0.0"),
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Network network = new Network(new IP("20.0.0.0"),
- en: '"Marketing", 8);'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '"营销", 8);'
- en: /** Code omitted **/
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: /** 代码省略 **/
- en: '}'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE1]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '@Given("I provide a router ID and the network details")'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '@Given("我提供一个路由器ID和网络详情")'
- en: public void obtain_routerId() {
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: public void obtain_routerId() {
- en: this.routerId = RouterId.withId(
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: this.routerId = RouterId.withId(
- en: '"ca23800e-9b5a-11eb-a8b3-0242ac130003");'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '"ca23800e-9b5a-11eb-a8b3-0242ac130003");'
- en: '}'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '@When("I found the router")'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '@When("我找到了路由器")'
- en: public void lookup_router() {
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: public void lookup_router() {
- en: router =
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: router =
- en: routerNetworkFileAdapter.fetchRouterById(routerId);
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: routerNetworkFileAdapter.fetchRouterById(routerId);
- en: '}'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE3]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '@And('
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '@And('
- en: '"The network address is valid and doesn''t already exist")'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '"网络地址有效且尚未存在")'
- en: public void check_address_validity_and_existence() {
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: public void check_address_validity_and_existence() {
- en: var availabilitySpec =
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: var availabilitySpec =
- en: new NetworkAvailabilitySpecification(
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: new NetworkAvailabilitySpecification(
- en: network.getAddress(), network.getName(),
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: network.getAddress(), network.getName(),
- en: network.getCidr());
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: network.getCidr());
- en: if(!availabilitySpec.isSatisfiedBy(router))
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: if(!availabilitySpec.isSatisfiedBy(router))
- en: throw new IllegalArgumentException("Address already
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: throw new IllegalArgumentException("地址已存在
- en: exist");
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: exist");
- en: '}'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE4]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '@Given("The CIDR is valid")'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '@Given("CIDR有效")'
- en: public void check_cidr() {
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: public void check_cidr() {
- en: var cidrSpec = new CIDRSpecification();
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: var cidrSpec = new CIDRSpecification();
- en: if(cidrSpec.isSatisfiedBy(network.getCidr()))
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: if(cidrSpec.isSatisfiedBy(network.getCidr()))
- en: throw new IllegalArgumentException(
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: throw new IllegalArgumentException(
- en: '"CIDR is below"+CIDRSpecification.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '"CIDR低于"+CIDRSpecification.'
- en: MINIMUM_ALLOWED_CIDR);
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: MINIMUM_ALLOWED_CIDR);
- en: '}'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE5]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '@Then("Add the network to the router")'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '@Then("将网络添加到路由器")'
- en: public void add_network() {
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: public void add_network() {
- en: router.addNetworkToSwitch(network);
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: router.addNetworkToSwitch(network);
- en: '}'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE6]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: public interface RouterNetworkUseCase {
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: public interface RouterNetworkUseCase {
- en: Router addNetworkToRouter(RouterId routerId, Network
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 路由器添加网络到路由器（RouterId routerId, 网络
- en: network);
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: network);
- en: '}'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE7]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: public class RouterNetworkInputPort implements RouterNet
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: public class RouterNetworkInputPort implements RouterNet
- en: workUseCase {
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: workUseCase {
- en: private final RouterNetworkOutputPort
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: private final RouterNetworkOutputPort
- en: routerNetworkOutputPort;
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: routerNetworkOutputPort;
- en: public RouterNetworkInputPort(RouterNetworkOutputPort
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: public RouterNetworkInputPort(RouterNetworkOutputPort
- en: routerNetworkOutputPort){
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: routerNetworkOutputPort){
- en: this.routerNetworkOutputPort =
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: this.routerNetworkOutputPort =
- en: routerNetworkOutputPort;
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: routerNetworkOutputPort;
- en: '}'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '@Override'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '@Override'
- en: public Router addNetworkToRouter(RouterId routerId, Network
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: public Router addNetworkToRouter(RouterId routerId, Network
- en: network) {
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: network) {
- en: var router = fetchRouter(routerId);
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: var router = fetchRouter(routerId);
- en: return createNetwork(router, network);
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: return createNetwork(router, network);
- en: '}'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: private Router fetchRouter(RouterId routerId) {
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: private Router fetchRouter(RouterId routerId) {
- en: return
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: return
- en: routerNetworkOutputPort.fetchRouterById(routerId);
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: routerNetworkOutputPort.fetchRouterById(routerId);
- en: '}'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: private Router createNetwork(Router router, Network net
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: private Router createNetwork(Router router, Network net
- en: work) {
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: work) {
- en: var newRouter =
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: var newRouter =
- en: NetworkOperation.createNewNetwork(router, network);
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: NetworkOperation.createNewNetwork(router, network);
- en: 'return persistNetwork(router) ? newRouter : router;'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 'return persistNetwork(router) ? newRouter : router;'
- en: '}'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: private boolean persistNetwork(Router router) {
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: private boolean persistNetwork(Router router) {
- en: return routerNetworkOutputPort.persistRouter(router);
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: return routerNetworkOutputPort.persistRouter(router);
- en: '}'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE8]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: public interface RouterNetworkOutputPort {
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: public interface RouterNetworkOutputPort {
- en: Router fetchRouterById(RouterId routerId);
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Router fetchRouterById(RouterId routerId);
- en: boolean persistRouter(Router router);
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: boolean persistRouter(Router router);
- en: '}'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE9]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: public interface PasswordResetTokenRepository extends
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: public interface PasswordResetTokenRepository extends
- en: JpaRepository<PasswordResetToken, Long> {
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: JpaRepository<PasswordResetToken, Long> {
- en: PasswordResetToken findByToken(String token);
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: PasswordResetToken findByToken(String token);
- en: PasswordResetToken findByUser(User user);
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: PasswordResetToken findByUser(User user);
- en: Stream<PasswordResetToken>
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Stream<PasswordResetToken>
- en: findAllByExpiryDateLessThan(Date now);
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: findAllByExpiryDateLessThan(Date now);
- en: void deleteByExpiryDateLessThan(Date now);
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: void deleteByExpiryDateLessThan(Date now);
- en: '@Modifying'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '@Modifying'
- en: '@Query(«delete from PasswordResetToken t where'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '@Query(«delete from PasswordResetToken t where'
- en: t.expiryDate <= ?1")
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: t.expiryDate <= ?1")
- en: void deleteAllExpiredSince(Date now);
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: void deleteAllExpiredSince(Date now);
- en: '}'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE10]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: public interface PasswordResetTokenOutputPort {
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: public interface PasswordResetTokenOutputPort {
- en: PasswordResetToken findByToken(String token);
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: PasswordResetToken findByToken(String token);
- en: PasswordResetToken findByUser(User user);
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: PasswordResetToken findByUser(User user);
- en: Stream<PasswordResetToken>
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: Stream<PasswordResetToken>
- en: findAllByExpiryDateLessThan(Date now);
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: findAllByExpiryDateLessThan(Date now);
- en: void deleteByExpiryDateLessThan(Date now);
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: void deleteByExpiryDateLessThan(Date now);
- en: void deleteAllExpiredSince(Date now);
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: void deleteAllExpiredSince(Date now);
- en: '}'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE11]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: public class RouterNetworkInputPort implements RouterNet
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: public class RouterNetworkInputPort implements RouterNet
- en: workUseCase {
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: workUseCase {
- en: private final RouterNetworkOutputPort
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: private final RouterNetworkOutputPort
- en: routerNetworkOutputPort;
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: routerNetworkOutputPort;
- en: public RouterNetworkInputPort(RouterNetworkOutputPort
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: public RouterNetworkInputPort(RouterNetworkOutputPort
- en: routerNetworkOutputPort){
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: routerNetworkOutputPort){
- en: this.routerNetworkOutputPort =
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: this.routerNetworkOutputPort =
- en: routerNetworkOutputPort;
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: routerNetworkOutputPort;
- en: '}'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: private Router fetchRouter(RouterId routerId) {
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: private Router fetchRouter(RouterId routerId) {
- en: return routerNetworkOutputPort.fetchRouterById
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: return routerNetworkOutputPort.fetchRouterById
- en: (routerId);
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: (routerId);
- en: '}'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: private boolean persistNetwork(Router router) {
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: private boolean persistNetwork(Router router) {
- en: return routerNetworkOutputPort.persistRouter
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: return routerNetworkOutputPort.persistRouter
- en: (router);
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: (router);
- en: '}'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE12]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: public class CreditCard {
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: public class CreditCard {
- en: /** Code omitted **/
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: /** 代码省略 **/
- en: double availableCredit;
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: double availableCredit;
- en: public boolean
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: public boolean
- en: isAvailableCreditGreaterOrEqualThan(
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: isAvailableCreditGreaterOrEqualThan(
- en: double transactionAmount) {
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: double transactionAmount) {
- en: return  availableCredit>=transactionAmount;
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: return  availableCredit>=transactionAmount;
- en: '}'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE13]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: public interface CreditCheckUseCase {
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: public interface CreditCheckUseCase {
- en: boolean hasEnoughCredit(String cardId, double
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: boolean hasEnoughCredit(String cardId, double
- en: transactionAmount);
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: transactionAmount);
- en: '}'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE14]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: public interface CreditCheckOutputPort {
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: public interface CreditCheckOutputPort {
- en: CreditCard getCreditCard(String cardId);
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: CreditCard getCreditCard(String cardId);
- en: '}'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE15]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: public class CreditCheckMySQLOutputAdapter implements
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: public class CreditCheckMySQLOutputAdapter implements
- en: CreditCheckOutputPort {
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: CreditCheckOutputPort {
- en: '@Override'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '@Override'
- en: public CreditCard getCreditCard(String cardId) {
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: public CreditCard getCreditCard(String cardId) {
- en: /** Code omitted **/
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: /** 代码省略 **/
- en: return creditCard;
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: return creditCard;
- en: '}'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE16]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: public class CreditCheckInputPort implements
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: public class CreditCheckInputPort implements
- en: CreditCheckUseCase {
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: CreditCheckUseCase {
- en: CreditCheckOutputPort creditCheckOutputPort;
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: CreditCheckOutputPort creditCheckOutputPort;
- en: '@Override'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '@Override'
- en: public boolean hasEnoughCredit(
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: public boolean hasEnoughCredit(
- en: String cardId, double transactionAmount) {
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: String cardId, double transactionAmount) {
- en: return
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: return
- en: getCreditCard(cardId)
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: getCreditCard(cardId)
- en: .isAvailableCreditGreaterOrEqualThan
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: .isAvailableCreditGreaterOrEqualThan
- en: (transactionAmount);
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: (transactionAmount);
- en: '}'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: private CreditCard getCreditCard(String cardId) {
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: private CreditCard getCreditCard(String cardId) {
- en: return creditCheckOutputPort
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: return creditCheckOutputPort
- en: .getCreditCard(cardId);
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: .getCreditCard(cardId);
- en: '}'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE17]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
