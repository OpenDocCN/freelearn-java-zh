- en: Chapter 3. Building OpenJDK 7
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 3 章. 构建 OpenJDK 7
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍：
- en: Building OpenJDK 7 on Ubuntu Linux 12.04 LTS
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Ubuntu Linux 12.04 LTS 上构建 OpenJDK 7
- en: Building OpenJDK 7 on Mac OS X
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Mac OS X 上构建 OpenJDK 7
- en: Building 32-bit FreeType libraries for OpenJDK 7 on Windows
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Windows 上构建 32 位 FreeType 库用于 OpenJDK 7
- en: Building 64-bit FreeType libraries for OpenJDK 7 on Windows
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Windows 上构建 64 位 FreeType 库用于 OpenJDK 7
- en: Building 32-bit OpenJDK 7 on Windows 7 SP1
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Windows 7 SP1 上构建 32 位 OpenJDK 7
- en: Building 64-bit OpenJDK 7 on Windows 7 x64 SP1
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Windows 7 x64 SP1 上构建 64 位 OpenJDK 7
- en: Preparing a standalone toolchain for 32- and 64-bit Windows builds
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备用于 32 位和 64 位 Windows 构建的独立工具链
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: OpenJDK 7 is a free and open source implementation of Java Platform, Standard
    Edition Version 7\. At the time of writing this book, it is the latest version
    of OpenJDK that was ready for the production usage.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: OpenJDK 7 是 Java 平台标准版 7 的免费和开源实现。在撰写本书时，它是准备用于生产使用的最新 OpenJDK 版本。
- en: Initially, a lot of advanced changes were planned for OpenJDK 7, such as the
    modular VM and lambda expression support, but due to various technical and organizational
    reasons, after Sun Microsystems' acquisition by Oracle, most of the new features
    were postponed for the next versions of OpenJDK. This expedited the release. It
    reached **General Availability** status on 28 July 2011 and was the first OpenJDK
    version released as a Reference Implementation for the Java platform.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，为 OpenJDK 7 计划了许多高级变更，例如模块化虚拟机和 lambda 表达式支持，但由于各种技术和组织原因，在 Sun Microsystems
    被甲骨文公司收购后，大多数新特性都被推迟到 OpenJDK 的下一个版本。这加快了发布速度。它于 2011 年 7 月 28 日达到 **通用可用** 状态，并且是第一个作为
    Java 平台参考实现的 OpenJDK 版本。
- en: The major updates to OpenJDK 7 numbered update 2, update 4, and update 6 were
    released during the next year. After that, version numbering was changed and the
    next update 40, which is the latest version at the time of writing, was released
    in September 2013\. The following update 60 was planned for May 2014 and the lifetime
    of OpenJDK 7 will end with update 80 in early 2015.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: OpenJDK 7 的主要更新编号为更新 2、更新 4 和更新 6，在接下来的年份中发布。之后，版本编号发生了变化，下一个更新 40（在撰写本书时是最新版本）于
    2013 年 9 月发布。下一个计划发布的更新 60 预计在 2014 年 5 月发布，而 OpenJDK 7 的生命周期将在 2015 年初的更新 80
    中结束。
- en: OpenJDK 7 release cycle differ from Oracle Java release cycles. Oracle Java
    updates are released for regular security-related changes and for OpenJDK updates.
    Oracle security changes are propagated to OpenJDK 7 (and to OpenJDK 6 where applicable)
    but OpenJDK is not released immediately after that. Instead, releases are done
    on major changes and cumulative security changes usually contain updated versions
    of HotSpot VM.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: OpenJDK 7 的发布周期与 Oracle Java 的发布周期不同。Oracle Java 更新是为了常规的安全相关更改和 OpenJDK 更新。Oracle
    的安全更改被传播到 OpenJDK 7（以及适用的情况下 OpenJDK 6），但 OpenJDK 并不是立即发布。相反，发布是在主要变更和累积安全变更上进行的，通常包含更新版本的
    HotSpot 虚拟机。
- en: OpenJDK 7 is supported on Linux, Windows, Mac OS X, and Solaris operating systems.
    Only Windows, Linux, and Mac OS X versions will be discussed further. For both
    Linux and Windows operating systems, x86 and x86_64 architectures are supported.
    For Mac OS X only x86_64 is supported. To conform with OpenJDK terminology, the
    **i586** term will be used for x86 architecture and **amd64** will be used for
    the x86_64 one. OpenJDK 7 does not support cross-compilation, so the i586 operating
    system must be used to build the i586 version and the same is true for amd64\.
    The build process for both architectures is almost the same for Linux version,
    but differs greatly for the Windows one.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: OpenJDK 7 支持在 Linux、Windows、Mac OS X 和 Solaris 操作系统上运行。以下将进一步讨论 Windows、Linux
    和 Mac OS X 版本。对于 Linux 和 Windows 操作系统，支持 x86 和 x86_64 架构。对于 Mac OS X，仅支持 x86_64。为了符合
    OpenJDK 术语，将使用 **i586** 术语表示 x86 架构，而 **amd64** 将用于 x86_64。OpenJDK 7 不支持交叉编译，因此必须使用
    i586 操作系统来构建 i586 版本，对于 amd64 也是如此。对于 Linux 版本，这两个架构的构建过程几乎相同，但对于 Windows 版本则差异很大。
- en: In this chapter, we will use sources from the official OpenJDK 7 update 40 tarball.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用来自官方 OpenJDK 7 更新 40 tarball 的源代码。
- en: Building OpenJDK 7 on Ubuntu Linux 12.04 LTS
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Ubuntu Linux 12.04 LTS 上构建 OpenJDK 7
- en: This recipe is similar to recipe *Building OpenJDK 6 on Ubuntu Linux 12.04 LTS*
    from [Chapter 2](ch02.html "Chapter 2. Building OpenJDK 6"), *Building OpenJDK
    6*.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方与第 2 章 [构建 OpenJDK 6 on Ubuntu Linux 12.04 LTS](ch02.html "第 2 章. 构建 OpenJDK
    6") 中的配方 *Building OpenJDK 6 on Ubuntu Linux 12.04 LTS* 相似。
- en: The build process of OpenJDK relies heavily on Unix-like development tools.
    Linux-based operating systems usually have top notch support for such tools, so
    building OpenJDK on Linux (and on Mac OS X) can be simpler than on Windows. For
    major distributions such as Fedora or Ubuntu, the build toolchain and all the
    dependencies are already included in distributions as packages and can be installed
    easily.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: OpenJDK 的构建过程严重依赖于类 Unix 开发工具。基于 Linux 的操作系统通常对这些工具提供顶级支持，因此，在 Linux（以及 Mac
    OS X）上构建 OpenJDK 可能比在 Windows 上简单。对于像 Fedora 或 Ubuntu 这样的主要发行版，构建工具链和所有依赖项已经作为软件包包含在发行版中，并且可以轻松安装。
- en: Ubuntu 12.04 LTS was chosen for this book because it is one of the most popular
    Linux distributions. For readers running other operating systems, Ubuntu 12.04
    virtual images may be found online for the most popular virtualization tools,
    such as Oracle VirtualBox or VMware.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 选择 Ubuntu 12.04 LTS 作为本书的操作系统，因为它是最受欢迎的 Linux 发行版之一。对于运行其他操作系统的读者，可以在网上找到 Ubuntu
    12.04 虚拟镜像，用于最流行的虚拟化工具，如 Oracle VirtualBox 或 VMware。
- en: To build binaries for i586 and amd64 architectures, corresponding versions of
    Ubuntu should be used. The build instructions are exactly the same for both architectures
    so they won't be mentioned further in this recipe.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要为 i586 和 amd64 架构构建二进制文件，应使用相应的 Ubuntu 版本。对于这两个架构，构建说明是相同的，因此在此配方中不会进一步提及。
- en: Getting ready
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will need clean Ubuntu 12.04 (server or desktop version)
    running.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们需要一个干净的 Ubuntu 12.04（服务器或桌面版本）运行。
- en: How to do it...
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following instructions will help us to build OpenJDK 7:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下说明将帮助我们构建 OpenJDK 7：
- en: 'Install the prepackaged binaries of OpenJDK 6:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装预包装的 OpenJDK 6 二进制文件：
- en: '[PRE0]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Install the GCC `toolchain` and build dependencies:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 GCC `工具链` 和构建依赖项：
- en: '[PRE1]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Download and decompress the official OpenJDK 7 update 40 archive (results will
    be placed into the `openjdk` directory):'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载并解压官方 OpenJDK 7 更新 40 存档（结果将放置在 `openjdk` 目录中）：
- en: '[PRE2]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create a new text file `buildenv.sh` with the following environment settings:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含以下环境设置的新的文本文件 `buildenv.sh`：
- en: '[PRE3]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Import the environment into the current shell session (note a dot and a space
    before it):'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将环境变量导入当前 shell 会话中（注意在它前面有一个点和空格）：
- en: '[PRE4]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Start the build process from the `openjdk` directory:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `openjdk` 目录开始构建过程：
- en: '[PRE5]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Wait for the build to finish, and try to run the newly built binaries:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待构建完成，然后尝试运行新构建的二进制文件：
- en: '[PRE6]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works...
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The prepackaged binaries of OpenJDK 6 are required because some of the build
    steps are run using the external Java runtime.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 需要预包装的 OpenJDK 6 二进制文件，因为一些构建步骤是使用外部 Java 运行时运行的。
- en: The `build-dep` command is used to install all the dependencies that are required
    to build the specified package. As Ubuntu packaged OpenJDK 6 is quite close to
    the official OpenJDK 6, this command will install almost all the required dependencies.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `build-dep` 命令安装构建指定包所需的所有依赖项。由于 Ubuntu 打包的 OpenJDK 6 与官方 OpenJDK 6 非常接近，此命令将安装几乎所有所需的依赖项。
- en: After a successful build on the amd64 platform, JDK files will be placed into
    `build/linux-amd64/j2sdk-image` and JRE files will be placed into `build/linux-amd64/j2re-image`.
    On the i586 platform, the `build/linux-i586` path will be used instead. An additional
    package of Server JRE that contains JDK without demos and samples will be placed
    into the `j2sdk-server-image` directory.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在 amd64 平台上成功构建后，JDK 文件将放置在 `build/linux-amd64/j2sdk-image` 目录中，JRE 文件将放置在 `build/linux-amd64/j2re-image`
    目录中。在 i586 平台上，将使用 `build/linux-i586` 路径。一个包含没有演示和示例的 JDK 的 Server JRE 额外包将放置在
    `j2sdk-server-image` 目录中。
- en: There's more...
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The Javadoc generation takes a lot of time and is the most memory consuming
    step of the build. It may be skipped with an additional environment variable:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Javadoc 生成需要花费很多时间，是构建过程中最消耗内存的步骤。可以使用额外的环境变量跳过：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Contrary to previous version, OpenJDK 7 supports parallel (multicore) native
    library compilation. The following environment variables may be used for the `jdk`
    and `hotspot` modules respectively:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的版本不同，OpenJDK 7 支持并行（多核）本地库编译。以下环境变量可以分别用于 `jdk` 和 `hotspot` 模块：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This build has generated a milestone tag and build number `b00`. Predefined
    build numbers and milestones may be set using additional environment variables:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 此构建已生成里程碑标签和构建号 `b00`。可以使用额外的环境变量设置预定义的构建号和里程碑：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `cacerts` file may be provided during the build, using additional environment
    variable:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建过程中，可以使用额外的环境变量提供 `cacerts` 文件：
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: For amd64 builds preinstalled Java provided by variable `ALT_BOOTDIR` may be
    either the amd64 or i586 build. The i586 binaries consume less memory and may
    be used for amd64 builds on limited hardware.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 对于预安装的Java（由变量`ALT_BOOTDIR`提供），amd64构建可以是amd64或i586构建。i586二进制文件消耗更少的内存，并且可以在硬件有限的情况下用于amd64构建。
- en: OpenJDK 7 has the same minimum build requirements on Linux as the previous version,
    so Debian 5.0 Lenny may be used to build the most compatible version.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: OpenJDK 7在Linux上的最小构建要求与上一版本相同，因此可以使用Debian 5.0 Lenny构建最兼容的版本。
- en: See also
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Preparing CA certificates* recipe from [Chapter 2](ch02.html "Chapter 2. Building
    OpenJDK 6"), *Building OpenJDK 6*
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自[第2章](ch02.html "第2章。构建OpenJDK 6")的*准备CA证书*配方，*构建OpenJDK 6*
- en: The *Building OpenJDK 6 on Ubuntu Linux 12.04 LTS* recipe from [Chapter 2](ch02.html
    "Chapter 2. Building OpenJDK 6"), *Building OpenJDK 6*
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自[第2章](ch02.html "第2章。构建OpenJDK 6")的*在Ubuntu Linux 12.04 LTS上构建OpenJDK 6*配方，*构建OpenJDK
    6*
- en: The *Setting up the minimum build environment for the most compatible Linux
    builds* recipe from [Chapter 2](ch02.html "Chapter 2. Building OpenJDK 6"), *Building
    OpenJDK 6*
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自[第2章](ch02.html "第2章。构建OpenJDK 6")的*为最兼容的Linux构建设置最小构建环境*配方，*构建OpenJDK 6*
- en: The official build instructions for OpenJDK 7 at [http://hg.openjdk.java.net/jdk7u/jdk7u/raw-file/tip/README-builds.html](http://hg.openjdk.java.net/jdk7u/jdk7u/raw-file/tip/README-builds.html)
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenJDK 7的官方构建说明可在[http://hg.openjdk.java.net/jdk7u/jdk7u/raw-file/tip/README-builds.html](http://hg.openjdk.java.net/jdk7u/jdk7u/raw-file/tip/README-builds.html)找到
- en: Building OpenJDK 7 on Mac OS X
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Mac OS X上构建OpenJDK 7
- en: OpenJDK 7 supports the Mac OS X platform as a *first class citizen* and building
    it using the proper version of `toolchain` is almost as easy as on Linux.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: OpenJDK 7支持Mac OS X平台作为*一等公民*，使用适当的`toolchain`版本构建它几乎和Linux上一样简单。
- en: Historically, Java had first class support on Mac OS X. JDK was based on Sun
    codebase but built by Apple and integrated fully into their operating system environment.
    Up to Mac OS X 10.4 Tiger, graphical user interface applications written using
    the standard Swing toolkit had access to most of the Cocoa native interface features.
    Applications written in Java were very close to native ones, while still being
    cross-platform.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 从历史上看，Java在Mac OS X上得到了一等支持。JDK基于Sun代码库，但由Apple构建并完全集成到其操作系统环境中。直到Mac OS X 10.4
    Tiger，使用标准Swing工具包编写的图形用户界面应用程序可以访问大多数Cocoa原生界面功能。用Java编写的应用程序非常接近原生应用程序，同时仍然是跨平台的。
- en: But with the next releases, the level of Java support went down. Starting from
    Mac OS X 10.5 Leopard, newer Cocoa features became unsupported for Java. Release
    of Apple Java 6 was postponed (comparing to Sun releases for other platforms)
    for more than a year. Java 6 was released in December 2006 but was not available
    for Mac OS X users until April 2008\. Finally in October 2010, Apple officially
    announced discontinuation of Java support. Apple Java 6 is still being updated
    with security updates and may be installed on Mac OS X 10.9 Mavericks (the latest
    version at the time of writing) but no future Java versions will be released by
    Apple.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 但随着下一版本的发布，Java的支持水平下降了。从Mac OS X 10.5 Leopard开始，新的Cocoa功能不再支持Java。Apple Java
    6的发布被推迟（与其他平台相比），超过了一年。Java 6于2006年12月发布，但直到2008年4月才对Mac OS X用户可用。最终在2010年10月，Apple官方宣布停止Java支持。Apple
    Java 6仍在更新安全更新，并且可以安装在Mac OS X 10.9 Mavericks（当时最新的版本）上，但Apple不会发布未来的Java版本。
- en: Third-party open source Java distributions existed for Mac OS X. The most notable
    is the SoyLatte—X11-based port of the FreeBSD Java 1.6 patchset to Mac OS X Intel
    machines. SoyLatte predated OpenJDK, was licensed under Java Research License,
    and supported Java 6 builds. Now it is part of the OpenJDK BSD-Port project.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 第三方开源Java发行版在Mac OS X上存在。最著名的是SoyLatte——FreeBSD Java 1.6补丁集基于X11的Mac OS X Intel机器的移植。SoyLatte早于OpenJDK，在Java研究许可下授权，并支持Java
    6构建。现在它是OpenJDK BSD-Port项目的一部分。
- en: Currently the official latest stable Java version for Mac OS X is Oracle Java
    7 which matches closely with OpenJDK. In this recipe, we will build an OpenJDK
    7 update 40 on Mac OS X 10.7.5 Lion. This operating system version was chosen
    because 10.7.3 is the official minimum build requirement platform that should
    provide the most compatible binaries for Mac OS X, and 10.7.5 matches it quite
    closely, but may run on newer Intel Ivy Bridge processors and may also be virtualized
    relatively easily using popular virtualization tools such as Oracle VirtualBox
    or VMware.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，Mac OS X 的官方最新稳定 Java 版本是 Oracle Java 7，它与 OpenJDK 非常接近。在此配方中，我们将在 Mac OS
    X 10.7.5 Lion 上构建 OpenJDK 7 更新 40。选择此操作系统版本是因为 10.7.3 是官方最低构建要求平台，应该提供最兼容的二进制文件，而
    10.7.5 与它非常接近，但可能在较新的 Intel Ivy Bridge 处理器上运行，并且也可能使用流行的虚拟化工具（如 Oracle VirtualBox
    或 VMware）相对容易地虚拟化。
- en: Getting ready
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will need clean Mac OS X 10.7.5 Lion running.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们需要一个干净运行的 Mac OS X 10.7.5 Lion。
- en: How to do it...
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following procedures will help us to build OpenJDK 7:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助我们构建 OpenJDK 7：
- en: Download Xcode 3.4.2 for Lion (March 22, 2012) from [https://developer.apple.com/xcode/](https://developer.apple.com/xcode/)
    (an Apple developer's account is required, registration is free) and install it.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://developer.apple.com/xcode/](https://developer.apple.com/xcode/) 下载
    Xcode 3.4.2 for Lion（2012 年 3 月 22 日）并安装它（需要 Apple 开发者账户，注册免费）。
- en: Download the Command Line Tools for Xcode—late March 2012 (March 21, 2012) using
    the same download link mentioned previously and install it.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用之前提到的相同下载链接下载 Xcode 命令行工具—2012 年 3 月晚些时候（2012 年 3 月 21 日）并安装它。
- en: 'Run this command from the terminal to set up the command line tools:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从终端运行此命令以设置命令行工具：
- en: '[PRE11]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Navigate to **Applications** | **Utilities** and run **X11.app** to install
    it as an additional download.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 **应用程序** | **实用工具** 并运行 **X11.app** 以将其作为附加下载安装。
- en: Install the JDK 7—Oracle distribution, or prebuilt OpenJDK binaries may be used.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 JDK 7—Oracle 发行版，或者可以使用预构建的 OpenJDK 二进制文件。
- en: Download Apache Ant 1.8.4 from [http://archive.apache.org/dist/ant/binaries/](http://archive.apache.org/dist/ant/binaries/)
    and decompress it.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [http://archive.apache.org/dist/ant/binaries/](http://archive.apache.org/dist/ant/binaries/)
    下载 Apache Ant 1.8.4 并解压它。
- en: Download the source archive `openjdk-7u40-fcs-src-b43-26_aug_2013.zip` from
    [http://download.java.net/openjdk/jdk7u40/promoted/b43/](http://download.java.net/openjdk/jdk7u40/promoted/b43/)
    and decompress it.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [http://download.java.net/openjdk/jdk7u40/promoted/b43/](http://download.java.net/openjdk/jdk7u40/promoted/b43/)
    下载源存档 `openjdk-7u40-fcs-src-b43-26_aug_2013.zip` 并解压它。
- en: 'Create a new text file `buildenv.sh` with the following environment settings:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新文本文件 `buildenv.sh` 并包含以下环境设置：
- en: '[PRE12]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Import the environment into the current terminal session (note a dot and a
    space before it):'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将环境导入当前终端会话中（注意它前面有一个点和空格）：
- en: '[PRE13]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Start the build process from the `openjdk` directory:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `openjdk` 目录开始构建过程：
- en: '[PRE14]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Wait for the build to finish, and try to run the newly built binaries:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待构建完成，然后尝试运行新构建的二进制文件：
- en: '[PRE15]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How it works...
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As well as the Xcode Command Line Tools that are used for the main part of the
    native source, Xcode itself is also required to build platform specific code.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 除了用于原生源主要部分的 Xcode 命令行工具外，还需要 Xcode 本身来构建特定平台的代码。
- en: OpenJDK on Mac OS X is moving away from using the X11 server, but it is still
    required for Version 7 builds. Mac OS X 10.7 Lion has X11 preinstalled, it just
    needs to be run once to be configured for the build.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: OpenJDK 在 Mac OS X 上正在远离使用 X11 服务器，但版本 7 构建仍然需要它。Mac OS X 10.7 狮子版预装了 X11，只需运行一次即可为构建进行配置。
- en: Apple JDK6 may be used instead of OpenJDK7, but it requires additional configuration.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 Apple JDK6 而不是 OpenJDK7，但需要额外的配置。
- en: The Apache Ant build tool is required for some modules of the build.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Ant 构建工具对于构建的一些模块是必需的。
- en: There's more...
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: This recipe uses the official Apple builds of GCC (and G++) Version 4.2 as compilers.
    After that version, official Apple support for GCC was discontinued for licensing
    reasons. Clang—the open source compiler initially developed by Apple—is the default
    and preferred compiler in newer versions of Mac OS X. While newer versions of
    OpenJDK support Clang on Mac OS X, Version 7 still requires GCC.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方使用官方 Apple GCC（和 G++）版本 4.2 构建。在此版本之后，由于许可原因，官方 Apple 对 GCC 的支持已停止。Clang—最初由
    Apple 开发的开源编译器—是较新版本 Mac OS X 的默认和首选编译器。虽然较新版本的 OpenJDK 在 Mac OS X 上支持 Clang，但版本
    7 仍然需要 GCC。
- en: OpenJDK 7 could be built on Mac OS X 10.8 Mountain Lion using the same steps.
    The only addition is that the X11 server should be installed separately using
    the XQuartz project.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 使用相同的步骤，可以在 Mac OS X 10.8 Mountain Lion 上构建 OpenJDK 7。唯一的额外要求是，应该单独安装 X11 服务器，使用
    XQuartz 项目。
- en: Newer versions of Xcode and recent updates of Mac OS X 10.9 Mavericks may break
    the OpenJDK builds. If builds using newer OS / `toolchain` are desired, it is
    better to check the current situation with the build and proposed solutions on
    OpenJDK mailing lists.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode 的新版本和 Mac OS X 10.9 Mavericks 的最新更新可能会破坏 OpenJDK 构建。如果希望使用较新的操作系统/`工具链`进行构建，最好检查
    OpenJDK 邮件列表上的当前构建情况和提出的解决方案。
- en: See also
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Preparing CA certificates* recipe from [Chapter 2](ch02.html "Chapter 2. Building
    OpenJDK 6"), *Building OpenJDK 6*
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自[第 2 章](ch02.html "第 2 章。构建 OpenJDK 6")的*准备 CA 证书*配方，*构建 OpenJDK 6*
- en: The *Building OpenJDK 6 on Ubuntu Linux 12.04 LTS* recipe from [Chapter 2](ch02.html
    "Chapter 2. Building OpenJDK 6"), *Building OpenJDK 6* for information about build
    tuning
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自[第 2 章](ch02.html "第 2 章。构建 OpenJDK 6")的*在 Ubuntu Linux 12.04 LTS 上构建 OpenJDK
    6*配方，*构建 OpenJDK 6*，获取有关构建调优的信息
- en: The official build instructions for Mac OS X on OpenJDK Wikipedia at [https://wikis.oracle.com/display/OpenJ](https://wikis.oracle.com/display/OpenJ)
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 OpenJDK Wikipedia 上关于 Mac OS X 的官方构建说明，请参阅[https://wikis.oracle.com/display/OpenJ](https://wikis.oracle.com/display/OpenJ)
- en: Building 32-bit FreeType libraries for OpenJDK 7 on Windows
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Windows 上为 OpenJDK 7 构建 32 位 FreeType 库
- en: The majority of fonts used in modern software are encoded in vector format for
    proper scaling support. There are multiple standards for vector fonts, for example
    Metafont from Professor Donald E. Knuth, Type1 from Adobe, TrueType from Apple
    and Microsoft, and OpenType from Adobe and Microsoft.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现代软件中使用的多数字体都编码为矢量格式，以支持适当的缩放。矢量字体有多个标准，例如唐纳德·E·克努特教授的 Metafont，Adobe 的 Type1，Apple
    和微软的 TrueType，以及 Adobe 和微软的 OpenType。
- en: Rasterization of vector fonts is a remarkably complex task and most desktop
    software (such as web browsers or text processors) use third-party libraries to
    work with fonts.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 矢量字体的光栅化是一个非常复杂的任务，大多数桌面软件（如网页浏览器或文本处理器）都使用第三方库来处理字体。
- en: Sun Microsystems licensed a third-party closed source font library for use in
    Sun Java implementation. The sources for this library could not be released to
    the public along with the initial release of OpenJDK. The Font Scaler Replacement
    Project was launched in the early days of OpenJDK to adopt the open source font
    library instead.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Sun Microsystems 为 Sun Java 实现许可了一个第三方封闭源代码字体库。这个库的源代码不能与 OpenJDK 的初始版本一起公开发布。在
    OpenJDK 的早期，启动了 Font Scaler Replacement 项目，以采用开源字体库。
- en: FreeType is a free and open source (under permissive license) font rasterization
    library. It is widely used in open source desktop software. FreeType was chosen
    by the OpenJDK team as a replacement for the closed source font library and is
    now used by OpenJDK on all supported platforms. Prebuilt static and dynamic FreeType
    libraries are required for OpenJDK builds on Windows.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: FreeType 是一个免费且开源（在宽松许可下）的字体光栅化库。它在开源桌面软件中得到广泛应用。OpenJDK 团队选择了 FreeType 作为封闭源代码字体库的替代品，并且现在在所有支持的平台上使用
    OpenJDK。在 Windows 上构建 OpenJDK 需要预构建的静态和动态 FreeType 库。
- en: FreeType may be built for OpenJDK 7 using the same Microsoft Windows SDK for
    Windows 7 and .NET Framework 4 (Version 7.1) that we will use for both i586 and
    amd64 OpenJDK builds. We will use the freely available Visual Studio 2010 Express
    Edition to configure the build settings for the FreeType project.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用与 i586 和 amd64 OpenJDK 构建相同的 Microsoft Windows SDK for Windows 7 和 .NET
    Framework 4（版本 7.1）来为 OpenJDK 7 构建 FreeType。我们将使用免费提供的 Visual Studio 2010 Express
    Edition 来配置 FreeType 项目的构建设置。
- en: Getting ready
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we should have Windows 7 SP1 i586 running.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们应该有一个运行 Windows 7 SP1 i586 的系统。
- en: How to do it...
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following procedure will help us to build FreeType:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助我们构建 FreeType：
- en: Download Microsoft .NET Framework 4 from the Microsoft website and install it.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从微软网站下载 Microsoft .NET Framework 4 并安装它。
- en: Download Microsoft Windows SDK for Windows 7 and .NET Framework 4 (Version 7.1)
    from the Microsoft website and install it to the default location with image filename
    `GRMSDK_EN_DVD.iso`.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从微软网站下载 Microsoft Windows SDK for Windows 7 和 .NET Framework 4（版本 7.1），并将其安装到默认位置，镜像文件名为
    `GRMSDK_EN_DVD.iso`。
- en: Download Visual Studio 2010 Express Edition from the Microsoft website and install
    it to the default location. Only the Visual C++ component is required.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Microsoft网站下载Visual Studio 2010 Express Edition并安装到默认位置。只需要Visual C++组件。
- en: Download the FreeType 2.5.2 sources tarball from [http://freetype.org/](http://freetype.org/)
    and decompress it.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[http://freetype.org/](http://freetype.org/)下载FreeType 2.5.2源代码tar包并解压。
- en: 'Open the file `include\config\ftoption.h` and uncomment line 95:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`include\config\ftoption.h`文件并取消注释第95行：
- en: '[PRE16]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Change lines 269 and 271 from `/* #define FT_EXPORT(x) extern x */` and `/*
    #define FT_EXPORT_DEF(x) x */` to `#define FT_EXPORT(x) __declspec(dllexport)
    x` and `#define FT_EXPORT_DEF(x) __declspec(dllexport) x`.'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '将第269行和第271行的`/* #define FT_EXPORT(x) extern x */`和`/* #define FT_EXPORT_DEF(x)
    x */`改为`#define FT_EXPORT(x) __declspec(dllexport) x`和`#define FT_EXPORT_DEF(x)
    __declspec(dllexport) x`。'
- en: Open the solution `builds\windows\vc2010\freetype.sln` in Visual Studio.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio中打开`solutions\windows\vc2010\freetype.sln`解决方案。
- en: In the main menu, go to **Project** | **Properties** | **Configuration Properties**
    and choose Windows7.1 SDK in the **Platform Toolset** field.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主菜单中，转到**项目** | **属性** | **配置属性**，在**平台工具集**字段中选择Windows7.1 SDK。
- en: On the main screen choose **Release Multithreaded** as the **Solution Configuration**.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主屏幕上选择**释放多线程**作为**解决方案配置**。
- en: Run build, and the `freetype252MT.lib` library will be placed into the `freetype\objs\win32\vc2010`
    directory; rename it to `freetype.lib`, and save it for later use.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行构建，`freetype252MT.lib`库将被放置到`freetype\objs\win32\vc2010`目录中；将其重命名为`freetype.lib`，并保存以供以后使用。
- en: In the main menu, go to **Project** | **Properties** | **Configuration Properties**,
    change **Configuration Type** to **Dynamic Library (.dll)**, and build the solution.
    The `freetype252MT.dll` and `freetype252MT.exp` files will be placed into the
    `objs\release_mt` directory. Rename these files `freetype.dll` and `freetype.exp`
    and use them with the previously generated `freetype.lib` during the OpenJDK build.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主菜单中，转到**项目** | **属性** | **配置属性**，将**配置类型**更改为**动态库 (.dll**)，并构建解决方案。`freetype252MT.dll`和`freetype252MT.exp`文件将被放置到`objs\release_mt`目录中。将这些文件重命名为`freetype.dll`和`freetype.exp`，并在OpenJDK构建期间与之前生成的`freetype.lib`一起使用。
- en: How it works...
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: FreeType for i586 may be built using Visual Studio's own toolset, but we used
    the Windows SDK7.1 toolset to ensure compatibility with the OpenJDK build that
    uses the same toolset.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Visual Studio的自身工具集可能构建i586版本的FreeType，但我们使用了Windows SDK7.1工具集以确保与使用相同工具集的OpenJDK构建的兼容性。
- en: The `FT_CONFIG_OPTION_SUBPIXEL_RENDERING` macro enables subpixel rendering functionality
    in FreeType implementation.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`FT_CONFIG_OPTION_SUBPIXEL_RENDERING`宏在FreeType实现中启用子像素渲染功能。'
- en: The `FT_EXPORT` and `FT_EXPORT_DEF` macros should be adjusted with the calling
    conventions for the current platform. We changed them to use Windows-specific
    calling conventions.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`FT_EXPORT`和`FT_EXPORT_DEF`宏应根据当前平台的调用约定进行调整。我们将它们更改为使用Windows特定的调用约定。'
- en: See also
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考信息
- en: The *Building 64-bit FreeType libraries for OpenJDK 7 on Windows* recipe
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在Windows上为OpenJDK 7构建64位FreeType库*配方'
- en: The FreeType official website at [http://freetype.org/](http://freetype.org/)
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FreeType官方网站[http://freetype.org/](http://freetype.org/)
- en: Professor Donald E. Knuth's interview covering Metafont and TrueType at [http://www.advogato.org/article/28.html](http://www.advogato.org/article/28.html)
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 教授唐纳德·E·克努斯关于Metafont和TrueType的访谈[http://www.advogato.org/article/28.html](http://www.advogato.org/article/28.html)
- en: 'The *OpenJDK: Font Scaler Replacement Project* page at [http://openjdk.java.net/projects/font-scaler/](http://openjdk.java.net/projects/font-scaler/)'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*OpenJDK: 字体缩放器替换项目*页面[http://openjdk.java.net/projects/font-scaler/](http://openjdk.java.net/projects/font-scaler/)'
- en: Building 64-bit FreeType libraries for OpenJDK 7 on Windows
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows上为OpenJDK 7构建64位FreeType库
- en: The FreeType build for Windows amd64 is similar to the i586 build from the previous
    recipe. Only different steps will be written in this recipe. Please refer to the
    previous recipe, *Building 32-bit FreeType libraries for OpenJDK 7 on Windows*
    for more detailed instructions.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Windows amd64版本的FreeType构建与之前配方中的i586构建类似。本配方中只将写出不同的步骤。请参阅之前的配方，*在Windows上为OpenJDK
    7构建32位FreeType库*，以获取更详细的说明。
- en: Getting ready
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we should have Windows 7 SP1 amd64 running.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们应该有Windows 7 SP1 amd64运行。
- en: How to do it...
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following procedures will help us in building FreeType:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助我们构建FreeType：
- en: Download Microsoft .NET Framework 4 (Version 7.1), Microsoft Windows SDK for
    Windows 7 and Visual Studio 2010 Express Edition from the Microsoft website, and
    install them to default locations. The amd64 version of the SDK from the `GRMSDKX_EN_DVD.iso`
    file should be used.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从微软网站下载Microsoft .NET Framework 4（版本7.1）、Microsoft Windows SDK for Windows 7和Visual
    Studio 2010 Express Edition，并将它们安装到默认位置。应使用`GRMSDKX_EN_DVD.iso`文件中的SDK的amd64版本。
- en: Follow steps 4 to 9 from the previous recipe to download and adjust the FreeType
    sources and configure the project in Visual Studio.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照前一个菜谱中的步骤4到9下载和调整FreeType源代码，并在Visual Studio中配置项目。
- en: On the main screen choose **x64** as the **Solution Platform**.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主屏幕上选择**x64**作为**解决方案平台**。
- en: Follow steps 10 and 11 from the previous recipe. Libraries will be placed into
    the `freetype\builds\windows\vc2010\x64\Release Multithreaded` directory.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照前一个菜谱中的步骤10和11进行操作。库将被放置在`freetype\builds\windows\vc2010\x64\Release Multithreaded`目录中。
- en: How it works...
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: FreeType amd64 cannot be built using the Express Edition of Visual Studio 2010\.
    The Professional Edition or the Windows SDK toolset should be used. As we will
    use Windows SDK 7.1 for OpenJDK builds, we are also using it for appropriate FreeType
    builds.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Visual Studio 2010的Express Edition无法构建FreeType amd64。应该使用专业版或Windows SDK工具集。由于我们将使用Windows
    SDK 7.1进行OpenJDK构建，因此我们也将其用于适当的FreeType构建。
- en: See also
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Building 32-bit FreeType libraries for OpenJDK 7 on Windows* recipe
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在Windows上为OpenJDK 7构建32位FreeType库*的菜谱'
- en: Building 32-bit OpenJDK 7 on Windows 7 SP1
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows 7 SP1上构建32位OpenJDK 7
- en: The OpenJDK 7 build process on the Windows platform has undertaken major improvements
    in comparison to Version 6\. Despite that, the build environment setup is still
    much more complex than on Linux and Mac OS X. Much of the complexity of the build
    comes from its usage of a Unix-like build environment through Cygwin tools.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 与版本6相比，Windows平台上的OpenJDK 7构建过程进行了重大改进。尽管如此，构建环境设置仍然比Linux和Mac OS X复杂得多。构建的大部分复杂性来自于它通过Cygwin工具使用类似Unix的构建环境。
- en: The official compiler requirement for i586 builds is Microsoft Visual Studio
    C++ 2010 Professional Edition. The Express Edition of Visual Studio 2010 also
    may be used for the i586 build. While this edition is free (as in "free beer")
    it has an evaluation period of 30 days and requires registration after that. While
    registration is also free, this requirement may be problematic for some usage
    scenarios (for example, automated build services).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: i586构建的官方编译器要求是Microsoft Visual Studio C++ 2010专业版。Visual Studio 2010的Express
    Edition也可以用于i586构建。虽然这个版本是免费的（就像“免费啤酒”一样），但它有一个30天的评估期，之后需要注册。虽然注册也是免费的，但这可能对某些使用场景（例如，自动构建服务）造成问题。
- en: Instead of Visual Studio 2010, we will use Microsoft Windows SDK Version 7.1
    for Windows 7\. This SDK is also available for free from the Microsoft website
    and may be used without registration. It uses the same compiler as Visual Studio
    2010 Express. It contains only Command Line Tools (no GUI) but may be used as
    an external toolset from Visual Studio 2010 if GUI is desired.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Microsoft Windows SDK Version 7.1 for Windows 7，而不是Visual Studio 2010。此SDK也可从微软网站免费获取，并且无需注册即可使用。它使用与Visual
    Studio 2010 Express相同的编译器。它仅包含命令行工具（没有GUI），但如果需要GUI，也可以作为Visual Studio 2010的外部工具集使用。
- en: Getting ready
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we should have Windows 7 SP1 i586 running with no antivirus
    software installed. Antivirus software is not allowed because it may interfere
    with Cygwin runtime.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，我们应该有一个没有安装任何杀毒软件的Windows 7 SP1 i586系统运行。不允许使用杀毒软件，因为它可能会干扰Cygwin运行时。
- en: How to do it...
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following procedure will help us to build OpenJDK:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助我们构建OpenJDK：
- en: Download Microsoft .NET Framework 4 from the Microsoft website and install it.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从微软网站下载Microsoft .NET Framework 4并安装。
- en: Download the Microsoft Windows SDK for Windows 7 from the Microsoft website
    and install it to the default location. The .NET Development and Common Utilities
    components are not required.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从微软网站下载Microsoft Windows SDK for Windows 7并安装到默认位置。.NET开发工具和通用工具组件不是必需的。
- en: 'Download and install the Microsoft DirectX 9.0 SDK (Summer 2004) to the default
    installation path. Note that this distribution is not available any more on the
    Microsoft website. It may however be downloaded from other places. The file details
    are as follows:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Microsoft DirectX 9.0 SDK（夏季2004版）下载并安装到默认安装路径。请注意，这个版本现在不再可在微软网站上找到。然而，它可能可以从其他地方下载。文件详情如下：
- en: '[PRE17]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Install or copy a preinstalled version of Cygwin to `c:\cygwin`.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装或复制预安装的 Cygwin 版本到 `c:\cygwin`。
- en: Create the `c:\path_prepend` directory and copy into it `find.exe` and `sort.exe`
    files from the Cygwin installation.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `c:\path_prepend` 目录，并将 Cygwin 安装中的 `find.exe` 和 `sort.exe` 文件复制到其中。
- en: Download GNU make utility binary from [http://www.cmake.org/](http://www.cmake.org/)
    using [http://www.cmake.org/files/cygwin/make.exe-cygwin1.7](http://www.cmake.org/files/cygwin/make.exe-cygwin1.7),
    rename it to `make.exe`, and put it in the `c:\make` directory.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [http://www.cmake.org/](http://www.cmake.org/) 下载 GNU make 工具的二进制文件，使用 [http://www.cmake.org/files/cygwin/make.exe-cygwin1.7](http://www.cmake.org/files/cygwin/make.exe-cygwin1.7)，将其重命名为
    `make.exe`，并将其放入 `c:\make` 目录。
- en: Download the Apache Ant Version 1.8.4 zip distribution from [http://apache.org/](http://apache.org/)
    and decompress it to the `c:\ant` directory.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [http://apache.org/](http://apache.org/) 下载 Apache Ant 版本 1.8.4 的 zip 分发版，并将其解压缩到
    `c:\ant` 目录。
- en: Download the prebuilt FreeType libraries from the `openjdk-unofficial-builds
    GitHub` project (directory `7_32`) and put the binaries into the `c:\freetype\lib`
    directory and the header files into the `c:\freetype\include` directory.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `openjdk-unofficial-builds GitHub` 项目（目录 `7_32`）下载预构建的 FreeType 库，并将二进制文件放入
    `c:\freetype\lib` 目录，将头文件放入 `c:\freetype\include` 目录。
- en: Install the OpenJDK 6 binaries or Oracle Java 6 into `c:\jdk6`.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 OpenJDK 6 二进制文件或 Oracle Java 6 安装到 `c:\jdk6`。
- en: Download the official OpenJDK 7 update 40 source archive from the [http://download.java.net/openjdk/jdk7u40/promoted/b43/](http://download.java.net/openjdk/jdk7u40/promoted/b43/)
    web page and decompress it to the `c:\sources` directory.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [http://download.java.net/openjdk/jdk7u40/promoted/b43/](http://download.java.net/openjdk/jdk7u40/promoted/b43/)
    网页下载官方 OpenJDK 7 更新 40 源存档，并将其解压缩到 `c:\sources` 目录。
- en: 'Create the `build.bat` batch file and write the following environment variables
    settings:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `build.bat` 批处理文件并写入以下环境变量设置：
- en: '[PRE18]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Run `build.bat` from Windows Explorer. The `cmd.exe` window should appear with
    bash launched.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Windows 资源管理器运行 `build.bat`。应该会出现一个带有 bash 启动的 `cmd.exe` 窗口。
- en: 'From the bash Command Prompt run the following commands:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 bash 命令提示符运行以下命令：
- en: '[PRE19]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Launch another Cygwin console and run the following commands:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动另一个 Cygwin 控制台并运行以下命令：
- en: '[PRE20]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Wait for the build to finish.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待构建完成。
- en: How it works...
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Cygwin installation is covered in the *Installing Cygwin for Windows builds*
    recipe in [Chapter 2](ch02.html "Chapter 2. Building OpenJDK 6"), *Building OpenJDK
    6*.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: Cygwin 安装在 [第 2 章](ch02.html "第 2 章。构建 OpenJDK 6") 的 *为 Windows 构建安装 Cygwin*
    配方中介绍，*构建 OpenJDK 6*。
- en: Directories in the root of disk C are used here for brevity. Generally, arbitrary
    paths consist of ASCII letters or numbers and no spaces may be used.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简洁起见，这里使用磁盘 C 的根目录。通常，任意路径由 ASCII 字母或数字组成，且不能使用空格。
- en: A newer version of the DirectX SDK also may be used.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以使用 DirectX SDK 的新版本。
- en: Different GNU make versions might have different problems on Windows. This particular
    version from the cmake project was tested on different Windows versions and works
    fine.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的 GNU make 版本在 Windows 上可能存在不同的问题。这个来自 cmake 项目的特定版本已在不同的 Windows 版本上进行了测试，并且运行良好。
- en: This recipe uses prebuilt FreeType 2.4.10 libraries from the `openjdk-unofficial-builds
    GitHub` project. FreeType may be built from sources using the same Windows SDK
    7.1 toolchain. Please see the *Building 32-bit FreeType libraries for OpenJDK
    7 on Windows* recipe in this chapter.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方使用来自 `openjdk-unofficial-builds GitHub` 项目的预构建 FreeType 2.4.10 库。可以使用相同的
    Windows SDK 7.1 工具链从源代码构建 FreeType。请参阅本章中的 *在 Windows 上为 OpenJDK 7 构建 32 位 FreeType
    库* 配方。
- en: In the environment settings, additional attention should be paid to the order
    of the `PATH` variable content. Sort and find Cygwin utilities should go at start
    of the `PATH` variable to avoid being overshadowed by the Windows' utilities with
    the same name but different functionality. Make goes before Cygwin to avoid being
    overshadowed by another version of make that may be included in the Cygwin installation.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在环境设置中，应特别注意 `PATH` 变量内容的顺序。排序和查找 Cygwin 实用程序应放在 `PATH` 变量的开头，以避免被具有相同名称但功能不同的
    Windows 实用程序所掩盖。Make 应在 Cygwin 之前，以避免被 Cygwin 安装中可能包含的另一个版本的 make 所掩盖。
- en: The `chmod 777` command is required to fix Cygwin file permissions that may
    cause errors later stages of the build.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 需要 `chmod 777` 命令来修复可能引起构建后期阶段错误的 Cygwin 文件权限。
- en: The make output will be redirected to the `make.log` file. The `2>&1` statement
    ensures that both `stdout` and `stderr` will be redirected.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: make 输出将被重定向到 `make.log` 文件。`2>&1` 语句确保 `stdout` 和 `stderr` 都将被重定向。
- en: The `tail -f` command allows us to watch the contents of the `make.log` file
    as they are written during the build process.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`tail -f`命令允许我们在构建过程中监视`make.log`文件的内容。'
- en: The `pause > nul` command is added at the end of the batch file to prevent the
    `cmd.exe` window disappearing in the case of runtime errors.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在批处理文件的末尾添加了`pause > nul`命令，以防止在运行时错误的情况下`cmd.exe`窗口消失。
- en: There's more...
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: To build the most compatible binaries, the same recipe should be used, but the
    Windows XP operating system should be used instead of Windows 7.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 为了构建最兼容的二进制文件，应使用相同的配方，但应使用Windows XP操作系统而不是Windows 7。
- en: In Windows XP, the `chmod 777` command is not required.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows XP中，不需要`chmod 777`命令。
- en: The `tee` command may be used instead of `>` and `tail` to write the build log
    to file and console simultaneously.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`tee`命令代替`>`和`tail`，将构建日志同时写入文件和控制台。
- en: The `SetEnv.Cmd` script from Windows SDK may be used (with proper flags) to
    set the compiler environment instead of setting variables manually.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用Windows SDK的`SetEnv.Cmd`脚本（使用适当的标志）来设置编译器环境，而不是手动设置变量。
- en: Visual Studio 2010 Express or Professional edition may be used instead of Windows
    SDK 7.1.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用Visual Studio 2010 Express或专业版代替Windows SDK 7.1。
- en: Prebuilt OpenJDK 7 or Oracle Java 7 may be used as the boot JDK instead of 6.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用预构建的OpenJDK 7或Oracle Java 7作为启动JDK，而不是6。
- en: See also
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Building 32-bit OpenJDK 6 on Windows 7 SP1* recipe from [Chapter 2](ch02.html
    "Chapter 2. Building OpenJDK 6"), *Building OpenJDK 6*
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自[第2章](ch02.html "第2章。构建OpenJDK 6")的*在Windows 7 SP1上构建32位OpenJDK 6*的配方，*构建OpenJDK
    6*
- en: The *Installing Cygwin for Windows builds* recipe from [Chapter 2](ch02.html
    "Chapter 2. Building OpenJDK 6"), *Building OpenJDK 6*
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自[第2章](ch02.html "第2章。构建OpenJDK 6")的*为Windows构建安装Cygwin*的配方，*构建OpenJDK 6*
- en: The *Building OpenJDK 6 on Ubuntu Linux 12.04 LTS* recipe from [Chapter 2](ch02.html
    "Chapter 2. Building OpenJDK 6"), *Building OpenJDK 6* for information about build
    tuning
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自[第2章](ch02.html "第2章。构建OpenJDK 6")的*在Ubuntu Linux 12.04 LTS上构建OpenJDK 6*的配方，*构建OpenJDK
    6*，有关构建调优的信息
- en: The *Building 32-bit FreeType libraries for OpenJDK 7 on Windows* recipe from
    this chapter
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的*在Windows上为OpenJDK 7构建32位FreeType库*的配方
- en: The *Preparing CA certificates* recipe from this chapter
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的*准备CA证书*的配方
- en: The official build instructions for OpenJDK 7 at [http://hg.openjdk.java.net/jdk7u/jdk7u/raw-file/tip/README-builds.html](http://hg.openjdk.java.net/jdk7u/jdk7u/raw-file/tip/README-builds.html)
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenJDK 7的官方构建说明，请参阅[http://hg.openjdk.java.net/jdk7u/jdk7u/raw-file/tip/README-builds.html](http://hg.openjdk.java.net/jdk7u/jdk7u/raw-file/tip/README-builds.html)
- en: Building 64-bit OpenJDK 7 on Windows 7 x64 SP1
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows 7 x64 SP1上构建64位OpenJDK 7
- en: The amd64 build in Windows 7 is similar to the i586 build, but has additional
    complications.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 7上的amd64构建类似于i586构建，但有一些额外的复杂性。
- en: Cygwin (at least the more common i586 version) works much worse on amd64 Windows.
    Due to the much bigger address space size, Cygwin fork techniques work much slower
    and are less reliable.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Cygwin（至少是更常见的i586版本）在amd64 Windows上运行得非常糟糕。由于地址空间大小大得多，Cygwin的fork技术运行得慢得多，并且可靠性较低。
- en: Visual Studio 2010 Express Edition does not support amd64 architecture, so Microsoft
    Windows SDK version 7.1 for Windows 7 or the Professional Edition of Visual Studio
    should be used.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio 2010 Express Edition不支持amd64架构，因此应使用Windows 7的Microsoft Windows
    SDK版本7.1或Visual Studio的专业版。
- en: Getting ready
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we should have Windows 7 SP1 amd64 running with no antivirus
    software installed. Antivirus software is not allowed because it may interfere
    with Cygwin runtime.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们应该有一个没有安装防病毒软件的Windows 7 SP1 amd64系统运行。不允许使用防病毒软件，因为它可能会干扰Cygwin运行时。
- en: How to do it...
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following procedures will help us to build OpenJDK:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助我们构建OpenJDK：
- en: Follow steps 1 to 10 from the previous recipe, *Building 32-bit OpenJDK 7 on
    Windows 7 SP1*, using the amd64 version of the Windows SDK and the FreeType libraries
    from the `7_64` directory.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照前一个配方，*在Windows 7 SP1上构建32位OpenJDK 7*，使用Windows SDK的amd64版本和`7_64`目录中的FreeType库，执行步骤1到10。
- en: 'Create a `build.bat` batch file and write the following environment variables
    settings there:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`build.bat`批处理文件，并在其中写入以下环境变量设置：
- en: '[PRE21]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Follow steps 12 to 15 from the previous recipe.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照前一个配方中的步骤12到15进行操作。
- en: How it works...
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The amd64 build is similar to the i586 build, but can be much slower because
    Cygwin works slower on a 64-bit OS.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 7上的amd64构建类似于i586构建，但由于Cygwin在64位操作系统上运行较慢，因此可能会慢得多。
- en: The build can be done using either the i586 or amd64 boot JDK, the only difference
    is amd64 requires more memory (not less than 1024MB).
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用i586或amd64引导JDK进行构建，唯一的区别是amd64需要更多的内存（不少于1024MB）。
- en: For additional details, please see the *How it works...* section of the previous
    recipe *Building 32-bit OpenJDK 7 on Windows 7 SP1*.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更多详细信息，请参阅前一个配方*在Windows 7 SP1上构建32位OpenJDK 7*中的*它是如何工作的...*部分。
- en: There's more...
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: To build the most compatible binaries, the same recipe should be used, but the
    Windows 2003 Server amd64 operating system should be used instead of Windows 7.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建最兼容的二进制文件，应使用相同的配方，但应使用Windows 2003 Server amd64操作系统代替Windows 7。
- en: In Windows 2003, the `chmod 777` command is not required.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows 2003中，不需要`chmod 777`命令。
- en: A prebuilt OpenJDK 7 or Oracle Java 7 may be used as the boot JDK instead of
    6.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用预构建的OpenJDK 7或Oracle Java 7作为引导JDK，而不是6。
- en: See also
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Building 32-bit OpenJDK 7 on Windows 7 SP1* recipe from this chapter
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的*在Windows 7 SP1上构建32位OpenJDK 7*配方
- en: The *Building 64-bit OpenJDK 6 on Windows 7 x64 SP1* recipe from [Chapter 2](ch02.html
    "Chapter 2. Building OpenJDK 6"), *Building OpenJDK 6*
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第2章](ch02.html "第2章。构建OpenJDK 6")中的*在Windows 7 x64 SP1上构建64位OpenJDK 6*配方'
- en: The *Installing Cygwin for Windows builds* recipe from [Chapter 2](ch02.html
    "Chapter 2. Building OpenJDK 6"), *Building OpenJDK 6*
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第2章](ch02.html "第2章。构建OpenJDK 6")中的*为Windows构建安装Cygwin*配方'
- en: The *Building OpenJDK 6 on Ubuntu Linux 12.04 LTS* recipe from [Chapter 2](ch02.html
    "Chapter 2. Building OpenJDK 6"), *Building OpenJDK 6*, for information about
    build tuning
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第2章](ch02.html "第2章。构建OpenJDK 6")中的*在Ubuntu Linux 12.04 LTS上构建OpenJDK 6*配方，有关构建调优信息'
- en: The *Building 64-bit FreeType libraries for OpenJDK 7 on Windows* recipe from
    this chapter
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的*在Windows上为OpenJDK 7构建64位FreeType库*配方
- en: The *Preparing CA certificates* recipe from [Chapter 2](ch02.html "Chapter 2. Building
    OpenJDK 6"), *Building OpenJDK 6*
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第2章](ch02.html "第2章。构建OpenJDK 6")中的*准备CA证书*配方'
- en: The official build instructions for OpenJDK 7 at [http://hg.openjdk.java.net/jdk7u/jdk7u/raw-file/tip/README-builds.html](http://hg.openjdk.java.net/jdk7u/jdk7u/raw-file/tip/README-builds.html)
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[http://hg.openjdk.java.net/jdk7u/jdk7u/raw-file/tip/README-builds.html](http://hg.openjdk.java.net/jdk7u/jdk7u/raw-file/tip/README-builds.html)查看OpenJDK
    7的官方构建说明
- en: Preparing a standalone toolchain for 32- and 64-bit Windows' builds
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为32位和64位Windows构建准备独立的工具链
- en: In the previous recipes in this chapter, we built OpenJDK 7 for Windows using
    Windows SDK Version 7.1\. This SDK requires installation prior to using it. The
    installation process requires .NET Framework 2 (to run the installer, included
    in Windows 7) and .NET Framework 4\. Installation of these components may be very
    time consuming in some usage scenarios. For example, to automated builds it may
    be desirable to use completely clean Windows images for the builds. Besides being
    slow, the .NET Framework and SDK installers are graphical tools and may be hard
    to script for automatic installation.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章前面的配方中，我们使用Windows SDK版本7.1为Windows构建了OpenJDK 7。此SDK在使用之前需要安装。安装过程需要.NET
    Framework 2（用于运行包含在Windows 7中的安装程序）和.NET Framework 4。在某些使用场景中，安装这些组件可能非常耗时。例如，为了自动化构建，可能希望使用完全干净的Windows镜像进行构建。除了速度慢之外，.NET
    Framework和SDK安装程序是图形工具，可能难以用于自动安装脚本。
- en: In this recipe, we will create a set of files and an environment script that
    can be used to build OpenJDK 7 i586 and amd64 on completely clean Windows installations
    (with corresponding architecture) without installing any tools through GUI installers.
    Such a set of files may be put under the version control system to be checked
    out prior to the build.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在此配方中，我们将创建一组文件和一个环境脚本，可用于在完全干净的Windows安装（具有相应的架构）上构建OpenJDK 7 i586和amd64，而无需通过GUI安装程序安装任何工具。这样的一组文件可以放在版本控制系统下，以便在构建之前检出。
- en: Getting ready
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we should have two clean images of Windows 7 SP1\. One of them
    should have the i586 architecture and other should have the amd64 architecture.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此配方，我们应该有两个Windows 7 SP1的干净镜像。其中一个应该具有i586架构，另一个应该具有amd64架构。
- en: How to do it...
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following procedure will help us to prepare a standalone toolchain:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助我们准备一个独立的工具链：
- en: Download the Microsoft Windows SDK for Windows 7 i586 (`GRMSDK_EN_DVD.iso`)
    from the Microsoft website and install it on the i586 Windows instance in the
    default location. The `.NET Development` and `Common Utilities` components are
    not required.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Microsoft 网站下载 Windows 7 i586 的 Microsoft Windows SDK (`GRMSDK_EN_DVD.iso`)
    并在默认位置安装到 i586 Windows 实例。不需要 `.NET Development` 和 `Common Utilities` 组件。
- en: Create a `toolchain` directory. We will put various tools and libraries there
    and will refer to this directory as `<toolchain>`.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `toolchain` 目录。我们将把各种工具和库放在那里，并将此目录称为 `<toolchain>`。
- en: Copy the SDK files from the `C:\Program Files\Microsoft SDKs\Windows\v7.1 to
    <toolchain>\winsdk71\sdk` directory.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 SDK 文件从 `C:\Program Files\Microsoft SDKs\Windows\v7.1` 复制到 `<toolchain>\winsdk71\sdk`
    目录。
- en: Copy the Visual Studio files shipped with the SDK from the `C:\Program Files\Microsoft
    Visual Studio 10.0 to <toolchain>\winsdk71\vs2010e` directory.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将与 SDK 一起提供的 Visual Studio 文件从 `C:\Program Files\Microsoft Visual Studio 10.0`
    复制到 `<toolchain>\winsdk71\vs2010e` 目录。
- en: Download the Microsoft Windows SDK for Windows 7 amd64 (`GRMSDKX_EN_DVD.iso`)
    from the Microsoft website and install it on the amd64 Windows instance in the
    default location. The `.NET Development` and `Common Utilities` components are
    not required.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Microsoft 网站下载 Windows 7 amd64 的 Microsoft Windows SDK (`GRMSDKX_EN_DVD.iso`)
    并在默认位置安装到 amd64 Windows 实例。不需要 `.NET Development` 和 `Common Utilities` 组件。
- en: Copy the `C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\x64` directory from
    the SDK amd64 installation to the `<toolchain>\winsdk71\sdk/Bin/x64` directory.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 SDK amd64 安装的 `C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\x64` 目录复制到
    `<toolchain>\winsdk71\sdk\Bin\x64` 目录。
- en: 'Download and install the Microsoft DirectX 9.0 SDK (Summer 2004) to the default
    installation path on the i586 Windows instance. Note that this distribution is
    not available anymore on the Microsoft website. It may be downloaded from another
    place online, and the file details are as follows:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Microsoft 网站下载并安装 Microsoft DirectX 9.0 SDK（夏季 2004 版）到 i586 Windows 实例的默认安装路径。请注意，此分发在
    Microsoft 网站上不再可用。它可能可以从其他在线位置下载，文件详细信息如下：
- en: '[PRE22]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Copy files from the `C:\Program Files\Microsoft DirectX 9.0 SDK (Summer 2004)`
    directory to the `<toolchain>\directx` directory.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件从 `C:\Program Files\Microsoft DirectX 9.0 SDK (Summer 2004)` 目录复制到 `<toolchain>\directx`
    目录。
- en: 'On the Windows i586 instance copy the files from the `C:\Windows\System32`
    directory to the `<toolchain>\msvcr/7_32` directory:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Windows i586 实例上，将 `C:\Windows\System32` 目录中的文件复制到 `<toolchain>\msvcr\7_32`
    目录：
- en: '[PRE23]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: On the Windows amd64 instance copy the same files as on the previous step (they
    should have the amd64 architecture) to the `<toolchain>\msvcr\7_64` directory.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Windows amd64 实例上，将上一步相同的文件（它们应该具有 amd64 架构）复制到 `<toolchain>\msvcr\7_64` 目录。
- en: 'Create an `env_32.bat` file with the following environment configuration that
    may be used for i586 builds:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `env_32.bat` 文件，包含以下环境配置，可用于 i586 构建：
- en: '[PRE24]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Create an `env_64.bat` file with the following environment configuration that
    may be used for amd64 builds:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `env_64.bat` 文件，包含以下环境配置，可用于 amd64 构建：
- en: '[PRE25]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Add the `toolchain` directory to the source control repository. This file set
    is a standalone toolchain and may be used to build both the i586 and amd64 versions
    of OpenJDK 7 (and OpenJDK 8) on clean Windows images with corresponding architectures.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `toolchain` 目录添加到源控制仓库。这个文件集是一个独立的工具链，可以用来在具有相应架构的干净 Windows 映像上构建 OpenJDK
    7（以及 OpenJDK 8）的 i586 和 amd64 版本。
- en: How it works...
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The process in this recipe is quite straightforward: collect the installed
    files that are to be copied later on clean Windows images and prepare the environment
    for them.'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱中的过程相当直接：收集要复制到干净 Windows 映像上的已安装文件，并为它们准备环境。
- en: One possible problem is that, while the Microsoft linker tool `link.exe` from
    the Windows SDK 7.1 does not require .NET 4 runtime to link native binaries, it
    requires the .NET shared library, `msvcr100_clr0400.dll` (see step 7 of this recipe).
    This library must be found in `PATH`, otherwise the build will fail at the HotSpot
    VM link stage with an unclear error.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 可能的一个问题是，虽然来自 Windows SDK 7.1 的 Microsoft 链接工具 `link.exe` 不需要 .NET 4 运行时来链接原生二进制文件，但它需要
    .NET 共享库，`msvcr100_clr0400.dll`（参见本食谱的第 7 步）。此库必须在 `PATH` 中找到，否则构建将在 HotSpot VM
    链接阶段失败，并出现一个不明确的错误。
- en: There's more...
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The OpenJDK configuration not specific to the Microsoft toolchain (Cygwin, FreeType,
    and so on) was removed from the environment files in this recipe for brevity.
    It should be added back to the environment files to perform the OpenJDK builds.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，为了简洁，从环境文件中移除了不特定于Microsoft工具链（Cygwin、FreeType等）的OpenJDK配置。为了执行OpenJDK构建，应将其重新添加到环境文件中。
- en: The result standalone toolchain is not specific to OpenJDK and may be used to
    build other software on Windows.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 独立工具链的结果不特定于OpenJDK，也可以用于在Windows上构建其他软件。
- en: See also
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Building 32-bit OpenJDK 7 on Windows 7 SP1* recipe and the *Building 64-bit
    FreeType libraries for OpenJDK 7 on Windows* recipe from this chapter. They can
    be adjusted to use the standalone toolchain from this recipe
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的*在Windows 7 SP1上构建32位OpenJDK 7*食谱和*在Windows上为OpenJDK 7构建64位FreeType库*食谱。它们可以被调整以使用本食谱中的独立工具链
- en: A question from [http://stackoverflow.com/](http://stackoverflow.com/) about
    the linker dependencies on .NET4 runtime at [http://stackoverflow.com/questions/13571628/compiling-c-code-using-windows-sdk-7-1-without-net-framework-4-0](http://stackoverflow.com/questions/13571628/compiling-c-code-using-windows-sdk-7-1-without-net-framework-4-0)
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自[http://stackoverflow.com/](http://stackoverflow.com/)的一个关于.NET4运行时链接器依赖的问题，在[http://stackoverflow.com/questions/13571628/compiling-c-code-using-windows-sdk-7-1-without-net-framework-4-0](http://stackoverflow.com/questions/13571628/compiling-c-code-using-windows-sdk-7-1-without-net-framework-4-0)
