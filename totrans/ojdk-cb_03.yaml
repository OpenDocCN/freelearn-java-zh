- en: Chapter 3. Building OpenJDK 7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Building OpenJDK 7 on Ubuntu Linux 12.04 LTS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building OpenJDK 7 on Mac OS X
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building 32-bit FreeType libraries for OpenJDK 7 on Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building 64-bit FreeType libraries for OpenJDK 7 on Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building 32-bit OpenJDK 7 on Windows 7 SP1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building 64-bit OpenJDK 7 on Windows 7 x64 SP1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing a standalone toolchain for 32- and 64-bit Windows builds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenJDK 7 is a free and open source implementation of Java Platform, Standard
    Edition Version 7\. At the time of writing this book, it is the latest version
    of OpenJDK that was ready for the production usage.
  prefs: []
  type: TYPE_NORMAL
- en: Initially, a lot of advanced changes were planned for OpenJDK 7, such as the
    modular VM and lambda expression support, but due to various technical and organizational
    reasons, after Sun Microsystems' acquisition by Oracle, most of the new features
    were postponed for the next versions of OpenJDK. This expedited the release. It
    reached **General Availability** status on 28 July 2011 and was the first OpenJDK
    version released as a Reference Implementation for the Java platform.
  prefs: []
  type: TYPE_NORMAL
- en: The major updates to OpenJDK 7 numbered update 2, update 4, and update 6 were
    released during the next year. After that, version numbering was changed and the
    next update 40, which is the latest version at the time of writing, was released
    in September 2013\. The following update 60 was planned for May 2014 and the lifetime
    of OpenJDK 7 will end with update 80 in early 2015.
  prefs: []
  type: TYPE_NORMAL
- en: OpenJDK 7 release cycle differ from Oracle Java release cycles. Oracle Java
    updates are released for regular security-related changes and for OpenJDK updates.
    Oracle security changes are propagated to OpenJDK 7 (and to OpenJDK 6 where applicable)
    but OpenJDK is not released immediately after that. Instead, releases are done
    on major changes and cumulative security changes usually contain updated versions
    of HotSpot VM.
  prefs: []
  type: TYPE_NORMAL
- en: OpenJDK 7 is supported on Linux, Windows, Mac OS X, and Solaris operating systems.
    Only Windows, Linux, and Mac OS X versions will be discussed further. For both
    Linux and Windows operating systems, x86 and x86_64 architectures are supported.
    For Mac OS X only x86_64 is supported. To conform with OpenJDK terminology, the
    **i586** term will be used for x86 architecture and **amd64** will be used for
    the x86_64 one. OpenJDK 7 does not support cross-compilation, so the i586 operating
    system must be used to build the i586 version and the same is true for amd64\.
    The build process for both architectures is almost the same for Linux version,
    but differs greatly for the Windows one.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will use sources from the official OpenJDK 7 update 40 tarball.
  prefs: []
  type: TYPE_NORMAL
- en: Building OpenJDK 7 on Ubuntu Linux 12.04 LTS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe is similar to recipe *Building OpenJDK 6 on Ubuntu Linux 12.04 LTS*
    from [Chapter 2](ch02.html "Chapter 2. Building OpenJDK 6"), *Building OpenJDK
    6*.
  prefs: []
  type: TYPE_NORMAL
- en: The build process of OpenJDK relies heavily on Unix-like development tools.
    Linux-based operating systems usually have top notch support for such tools, so
    building OpenJDK on Linux (and on Mac OS X) can be simpler than on Windows. For
    major distributions such as Fedora or Ubuntu, the build toolchain and all the
    dependencies are already included in distributions as packages and can be installed
    easily.
  prefs: []
  type: TYPE_NORMAL
- en: Ubuntu 12.04 LTS was chosen for this book because it is one of the most popular
    Linux distributions. For readers running other operating systems, Ubuntu 12.04
    virtual images may be found online for the most popular virtualization tools,
    such as Oracle VirtualBox or VMware.
  prefs: []
  type: TYPE_NORMAL
- en: To build binaries for i586 and amd64 architectures, corresponding versions of
    Ubuntu should be used. The build instructions are exactly the same for both architectures
    so they won't be mentioned further in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will need clean Ubuntu 12.04 (server or desktop version)
    running.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following instructions will help us to build OpenJDK 7:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the prepackaged binaries of OpenJDK 6:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the GCC `toolchain` and build dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Download and decompress the official OpenJDK 7 update 40 archive (results will
    be placed into the `openjdk` directory):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new text file `buildenv.sh` with the following environment settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Import the environment into the current shell session (note a dot and a space
    before it):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the build process from the `openjdk` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Wait for the build to finish, and try to run the newly built binaries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The prepackaged binaries of OpenJDK 6 are required because some of the build
    steps are run using the external Java runtime.
  prefs: []
  type: TYPE_NORMAL
- en: The `build-dep` command is used to install all the dependencies that are required
    to build the specified package. As Ubuntu packaged OpenJDK 6 is quite close to
    the official OpenJDK 6, this command will install almost all the required dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: After a successful build on the amd64 platform, JDK files will be placed into
    `build/linux-amd64/j2sdk-image` and JRE files will be placed into `build/linux-amd64/j2re-image`.
    On the i586 platform, the `build/linux-i586` path will be used instead. An additional
    package of Server JRE that contains JDK without demos and samples will be placed
    into the `j2sdk-server-image` directory.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Javadoc generation takes a lot of time and is the most memory consuming
    step of the build. It may be skipped with an additional environment variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Contrary to previous version, OpenJDK 7 supports parallel (multicore) native
    library compilation. The following environment variables may be used for the `jdk`
    and `hotspot` modules respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This build has generated a milestone tag and build number `b00`. Predefined
    build numbers and milestones may be set using additional environment variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The `cacerts` file may be provided during the build, using additional environment
    variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: For amd64 builds preinstalled Java provided by variable `ALT_BOOTDIR` may be
    either the amd64 or i586 build. The i586 binaries consume less memory and may
    be used for amd64 builds on limited hardware.
  prefs: []
  type: TYPE_NORMAL
- en: OpenJDK 7 has the same minimum build requirements on Linux as the previous version,
    so Debian 5.0 Lenny may be used to build the most compatible version.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Preparing CA certificates* recipe from [Chapter 2](ch02.html "Chapter 2. Building
    OpenJDK 6"), *Building OpenJDK 6*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Building OpenJDK 6 on Ubuntu Linux 12.04 LTS* recipe from [Chapter 2](ch02.html
    "Chapter 2. Building OpenJDK 6"), *Building OpenJDK 6*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Setting up the minimum build environment for the most compatible Linux
    builds* recipe from [Chapter 2](ch02.html "Chapter 2. Building OpenJDK 6"), *Building
    OpenJDK 6*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The official build instructions for OpenJDK 7 at [http://hg.openjdk.java.net/jdk7u/jdk7u/raw-file/tip/README-builds.html](http://hg.openjdk.java.net/jdk7u/jdk7u/raw-file/tip/README-builds.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building OpenJDK 7 on Mac OS X
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenJDK 7 supports the Mac OS X platform as a *first class citizen* and building
    it using the proper version of `toolchain` is almost as easy as on Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Historically, Java had first class support on Mac OS X. JDK was based on Sun
    codebase but built by Apple and integrated fully into their operating system environment.
    Up to Mac OS X 10.4 Tiger, graphical user interface applications written using
    the standard Swing toolkit had access to most of the Cocoa native interface features.
    Applications written in Java were very close to native ones, while still being
    cross-platform.
  prefs: []
  type: TYPE_NORMAL
- en: But with the next releases, the level of Java support went down. Starting from
    Mac OS X 10.5 Leopard, newer Cocoa features became unsupported for Java. Release
    of Apple Java 6 was postponed (comparing to Sun releases for other platforms)
    for more than a year. Java 6 was released in December 2006 but was not available
    for Mac OS X users until April 2008\. Finally in October 2010, Apple officially
    announced discontinuation of Java support. Apple Java 6 is still being updated
    with security updates and may be installed on Mac OS X 10.9 Mavericks (the latest
    version at the time of writing) but no future Java versions will be released by
    Apple.
  prefs: []
  type: TYPE_NORMAL
- en: Third-party open source Java distributions existed for Mac OS X. The most notable
    is the SoyLatte—X11-based port of the FreeBSD Java 1.6 patchset to Mac OS X Intel
    machines. SoyLatte predated OpenJDK, was licensed under Java Research License,
    and supported Java 6 builds. Now it is part of the OpenJDK BSD-Port project.
  prefs: []
  type: TYPE_NORMAL
- en: Currently the official latest stable Java version for Mac OS X is Oracle Java
    7 which matches closely with OpenJDK. In this recipe, we will build an OpenJDK
    7 update 40 on Mac OS X 10.7.5 Lion. This operating system version was chosen
    because 10.7.3 is the official minimum build requirement platform that should
    provide the most compatible binaries for Mac OS X, and 10.7.5 matches it quite
    closely, but may run on newer Intel Ivy Bridge processors and may also be virtualized
    relatively easily using popular virtualization tools such as Oracle VirtualBox
    or VMware.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will need clean Mac OS X 10.7.5 Lion running.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following procedures will help us to build OpenJDK 7:'
  prefs: []
  type: TYPE_NORMAL
- en: Download Xcode 3.4.2 for Lion (March 22, 2012) from [https://developer.apple.com/xcode/](https://developer.apple.com/xcode/)
    (an Apple developer's account is required, registration is free) and install it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the Command Line Tools for Xcode—late March 2012 (March 21, 2012) using
    the same download link mentioned previously and install it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run this command from the terminal to set up the command line tools:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Navigate to **Applications** | **Utilities** and run **X11.app** to install
    it as an additional download.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the JDK 7—Oracle distribution, or prebuilt OpenJDK binaries may be used.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download Apache Ant 1.8.4 from [http://archive.apache.org/dist/ant/binaries/](http://archive.apache.org/dist/ant/binaries/)
    and decompress it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the source archive `openjdk-7u40-fcs-src-b43-26_aug_2013.zip` from
    [http://download.java.net/openjdk/jdk7u40/promoted/b43/](http://download.java.net/openjdk/jdk7u40/promoted/b43/)
    and decompress it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new text file `buildenv.sh` with the following environment settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Import the environment into the current terminal session (note a dot and a
    space before it):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the build process from the `openjdk` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Wait for the build to finish, and try to run the newly built binaries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As well as the Xcode Command Line Tools that are used for the main part of the
    native source, Xcode itself is also required to build platform specific code.
  prefs: []
  type: TYPE_NORMAL
- en: OpenJDK on Mac OS X is moving away from using the X11 server, but it is still
    required for Version 7 builds. Mac OS X 10.7 Lion has X11 preinstalled, it just
    needs to be run once to be configured for the build.
  prefs: []
  type: TYPE_NORMAL
- en: Apple JDK6 may be used instead of OpenJDK7, but it requires additional configuration.
  prefs: []
  type: TYPE_NORMAL
- en: The Apache Ant build tool is required for some modules of the build.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses the official Apple builds of GCC (and G++) Version 4.2 as compilers.
    After that version, official Apple support for GCC was discontinued for licensing
    reasons. Clang—the open source compiler initially developed by Apple—is the default
    and preferred compiler in newer versions of Mac OS X. While newer versions of
    OpenJDK support Clang on Mac OS X, Version 7 still requires GCC.
  prefs: []
  type: TYPE_NORMAL
- en: OpenJDK 7 could be built on Mac OS X 10.8 Mountain Lion using the same steps.
    The only addition is that the X11 server should be installed separately using
    the XQuartz project.
  prefs: []
  type: TYPE_NORMAL
- en: Newer versions of Xcode and recent updates of Mac OS X 10.9 Mavericks may break
    the OpenJDK builds. If builds using newer OS / `toolchain` are desired, it is
    better to check the current situation with the build and proposed solutions on
    OpenJDK mailing lists.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Preparing CA certificates* recipe from [Chapter 2](ch02.html "Chapter 2. Building
    OpenJDK 6"), *Building OpenJDK 6*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Building OpenJDK 6 on Ubuntu Linux 12.04 LTS* recipe from [Chapter 2](ch02.html
    "Chapter 2. Building OpenJDK 6"), *Building OpenJDK 6* for information about build
    tuning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The official build instructions for Mac OS X on OpenJDK Wikipedia at [https://wikis.oracle.com/display/OpenJ](https://wikis.oracle.com/display/OpenJ)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building 32-bit FreeType libraries for OpenJDK 7 on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The majority of fonts used in modern software are encoded in vector format for
    proper scaling support. There are multiple standards for vector fonts, for example
    Metafont from Professor Donald E. Knuth, Type1 from Adobe, TrueType from Apple
    and Microsoft, and OpenType from Adobe and Microsoft.
  prefs: []
  type: TYPE_NORMAL
- en: Rasterization of vector fonts is a remarkably complex task and most desktop
    software (such as web browsers or text processors) use third-party libraries to
    work with fonts.
  prefs: []
  type: TYPE_NORMAL
- en: Sun Microsystems licensed a third-party closed source font library for use in
    Sun Java implementation. The sources for this library could not be released to
    the public along with the initial release of OpenJDK. The Font Scaler Replacement
    Project was launched in the early days of OpenJDK to adopt the open source font
    library instead.
  prefs: []
  type: TYPE_NORMAL
- en: FreeType is a free and open source (under permissive license) font rasterization
    library. It is widely used in open source desktop software. FreeType was chosen
    by the OpenJDK team as a replacement for the closed source font library and is
    now used by OpenJDK on all supported platforms. Prebuilt static and dynamic FreeType
    libraries are required for OpenJDK builds on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: FreeType may be built for OpenJDK 7 using the same Microsoft Windows SDK for
    Windows 7 and .NET Framework 4 (Version 7.1) that we will use for both i586 and
    amd64 OpenJDK builds. We will use the freely available Visual Studio 2010 Express
    Edition to configure the build settings for the FreeType project.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we should have Windows 7 SP1 i586 running.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following procedure will help us to build FreeType:'
  prefs: []
  type: TYPE_NORMAL
- en: Download Microsoft .NET Framework 4 from the Microsoft website and install it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download Microsoft Windows SDK for Windows 7 and .NET Framework 4 (Version 7.1)
    from the Microsoft website and install it to the default location with image filename
    `GRMSDK_EN_DVD.iso`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download Visual Studio 2010 Express Edition from the Microsoft website and install
    it to the default location. Only the Visual C++ component is required.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the FreeType 2.5.2 sources tarball from [http://freetype.org/](http://freetype.org/)
    and decompress it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the file `include\config\ftoption.h` and uncomment line 95:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change lines 269 and 271 from `/* #define FT_EXPORT(x) extern x */` and `/*
    #define FT_EXPORT_DEF(x) x */` to `#define FT_EXPORT(x) __declspec(dllexport)
    x` and `#define FT_EXPORT_DEF(x) __declspec(dllexport) x`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the solution `builds\windows\vc2010\freetype.sln` in Visual Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the main menu, go to **Project** | **Properties** | **Configuration Properties**
    and choose Windows7.1 SDK in the **Platform Toolset** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the main screen choose **Release Multithreaded** as the **Solution Configuration**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run build, and the `freetype252MT.lib` library will be placed into the `freetype\objs\win32\vc2010`
    directory; rename it to `freetype.lib`, and save it for later use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the main menu, go to **Project** | **Properties** | **Configuration Properties**,
    change **Configuration Type** to **Dynamic Library (.dll)**, and build the solution.
    The `freetype252MT.dll` and `freetype252MT.exp` files will be placed into the
    `objs\release_mt` directory. Rename these files `freetype.dll` and `freetype.exp`
    and use them with the previously generated `freetype.lib` during the OpenJDK build.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: FreeType for i586 may be built using Visual Studio's own toolset, but we used
    the Windows SDK7.1 toolset to ensure compatibility with the OpenJDK build that
    uses the same toolset.
  prefs: []
  type: TYPE_NORMAL
- en: The `FT_CONFIG_OPTION_SUBPIXEL_RENDERING` macro enables subpixel rendering functionality
    in FreeType implementation.
  prefs: []
  type: TYPE_NORMAL
- en: The `FT_EXPORT` and `FT_EXPORT_DEF` macros should be adjusted with the calling
    conventions for the current platform. We changed them to use Windows-specific
    calling conventions.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Building 64-bit FreeType libraries for OpenJDK 7 on Windows* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The FreeType official website at [http://freetype.org/](http://freetype.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Professor Donald E. Knuth's interview covering Metafont and TrueType at [http://www.advogato.org/article/28.html](http://www.advogato.org/article/28.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The *OpenJDK: Font Scaler Replacement Project* page at [http://openjdk.java.net/projects/font-scaler/](http://openjdk.java.net/projects/font-scaler/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building 64-bit FreeType libraries for OpenJDK 7 on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The FreeType build for Windows amd64 is similar to the i586 build from the previous
    recipe. Only different steps will be written in this recipe. Please refer to the
    previous recipe, *Building 32-bit FreeType libraries for OpenJDK 7 on Windows*
    for more detailed instructions.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we should have Windows 7 SP1 amd64 running.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following procedures will help us in building FreeType:'
  prefs: []
  type: TYPE_NORMAL
- en: Download Microsoft .NET Framework 4 (Version 7.1), Microsoft Windows SDK for
    Windows 7 and Visual Studio 2010 Express Edition from the Microsoft website, and
    install them to default locations. The amd64 version of the SDK from the `GRMSDKX_EN_DVD.iso`
    file should be used.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow steps 4 to 9 from the previous recipe to download and adjust the FreeType
    sources and configure the project in Visual Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the main screen choose **x64** as the **Solution Platform**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow steps 10 and 11 from the previous recipe. Libraries will be placed into
    the `freetype\builds\windows\vc2010\x64\Release Multithreaded` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: FreeType amd64 cannot be built using the Express Edition of Visual Studio 2010\.
    The Professional Edition or the Windows SDK toolset should be used. As we will
    use Windows SDK 7.1 for OpenJDK builds, we are also using it for appropriate FreeType
    builds.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Building 32-bit FreeType libraries for OpenJDK 7 on Windows* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building 32-bit OpenJDK 7 on Windows 7 SP1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The OpenJDK 7 build process on the Windows platform has undertaken major improvements
    in comparison to Version 6\. Despite that, the build environment setup is still
    much more complex than on Linux and Mac OS X. Much of the complexity of the build
    comes from its usage of a Unix-like build environment through Cygwin tools.
  prefs: []
  type: TYPE_NORMAL
- en: The official compiler requirement for i586 builds is Microsoft Visual Studio
    C++ 2010 Professional Edition. The Express Edition of Visual Studio 2010 also
    may be used for the i586 build. While this edition is free (as in "free beer")
    it has an evaluation period of 30 days and requires registration after that. While
    registration is also free, this requirement may be problematic for some usage
    scenarios (for example, automated build services).
  prefs: []
  type: TYPE_NORMAL
- en: Instead of Visual Studio 2010, we will use Microsoft Windows SDK Version 7.1
    for Windows 7\. This SDK is also available for free from the Microsoft website
    and may be used without registration. It uses the same compiler as Visual Studio
    2010 Express. It contains only Command Line Tools (no GUI) but may be used as
    an external toolset from Visual Studio 2010 if GUI is desired.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we should have Windows 7 SP1 i586 running with no antivirus
    software installed. Antivirus software is not allowed because it may interfere
    with Cygwin runtime.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following procedure will help us to build OpenJDK:'
  prefs: []
  type: TYPE_NORMAL
- en: Download Microsoft .NET Framework 4 from the Microsoft website and install it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the Microsoft Windows SDK for Windows 7 from the Microsoft website
    and install it to the default location. The .NET Development and Common Utilities
    components are not required.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Download and install the Microsoft DirectX 9.0 SDK (Summer 2004) to the default
    installation path. Note that this distribution is not available any more on the
    Microsoft website. It may however be downloaded from other places. The file details
    are as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Install or copy a preinstalled version of Cygwin to `c:\cygwin`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the `c:\path_prepend` directory and copy into it `find.exe` and `sort.exe`
    files from the Cygwin installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download GNU make utility binary from [http://www.cmake.org/](http://www.cmake.org/)
    using [http://www.cmake.org/files/cygwin/make.exe-cygwin1.7](http://www.cmake.org/files/cygwin/make.exe-cygwin1.7),
    rename it to `make.exe`, and put it in the `c:\make` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the Apache Ant Version 1.8.4 zip distribution from [http://apache.org/](http://apache.org/)
    and decompress it to the `c:\ant` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the prebuilt FreeType libraries from the `openjdk-unofficial-builds
    GitHub` project (directory `7_32`) and put the binaries into the `c:\freetype\lib`
    directory and the header files into the `c:\freetype\include` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the OpenJDK 6 binaries or Oracle Java 6 into `c:\jdk6`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the official OpenJDK 7 update 40 source archive from the [http://download.java.net/openjdk/jdk7u40/promoted/b43/](http://download.java.net/openjdk/jdk7u40/promoted/b43/)
    web page and decompress it to the `c:\sources` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the `build.bat` batch file and write the following environment variables
    settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run `build.bat` from Windows Explorer. The `cmd.exe` window should appear with
    bash launched.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the bash Command Prompt run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Launch another Cygwin console and run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Wait for the build to finish.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Cygwin installation is covered in the *Installing Cygwin for Windows builds*
    recipe in [Chapter 2](ch02.html "Chapter 2. Building OpenJDK 6"), *Building OpenJDK
    6*.
  prefs: []
  type: TYPE_NORMAL
- en: Directories in the root of disk C are used here for brevity. Generally, arbitrary
    paths consist of ASCII letters or numbers and no spaces may be used.
  prefs: []
  type: TYPE_NORMAL
- en: A newer version of the DirectX SDK also may be used.
  prefs: []
  type: TYPE_NORMAL
- en: Different GNU make versions might have different problems on Windows. This particular
    version from the cmake project was tested on different Windows versions and works
    fine.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe uses prebuilt FreeType 2.4.10 libraries from the `openjdk-unofficial-builds
    GitHub` project. FreeType may be built from sources using the same Windows SDK
    7.1 toolchain. Please see the *Building 32-bit FreeType libraries for OpenJDK
    7 on Windows* recipe in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In the environment settings, additional attention should be paid to the order
    of the `PATH` variable content. Sort and find Cygwin utilities should go at start
    of the `PATH` variable to avoid being overshadowed by the Windows' utilities with
    the same name but different functionality. Make goes before Cygwin to avoid being
    overshadowed by another version of make that may be included in the Cygwin installation.
  prefs: []
  type: TYPE_NORMAL
- en: The `chmod 777` command is required to fix Cygwin file permissions that may
    cause errors later stages of the build.
  prefs: []
  type: TYPE_NORMAL
- en: The make output will be redirected to the `make.log` file. The `2>&1` statement
    ensures that both `stdout` and `stderr` will be redirected.
  prefs: []
  type: TYPE_NORMAL
- en: The `tail -f` command allows us to watch the contents of the `make.log` file
    as they are written during the build process.
  prefs: []
  type: TYPE_NORMAL
- en: The `pause > nul` command is added at the end of the batch file to prevent the
    `cmd.exe` window disappearing in the case of runtime errors.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To build the most compatible binaries, the same recipe should be used, but the
    Windows XP operating system should be used instead of Windows 7.
  prefs: []
  type: TYPE_NORMAL
- en: In Windows XP, the `chmod 777` command is not required.
  prefs: []
  type: TYPE_NORMAL
- en: The `tee` command may be used instead of `>` and `tail` to write the build log
    to file and console simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: The `SetEnv.Cmd` script from Windows SDK may be used (with proper flags) to
    set the compiler environment instead of setting variables manually.
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio 2010 Express or Professional edition may be used instead of Windows
    SDK 7.1.
  prefs: []
  type: TYPE_NORMAL
- en: Prebuilt OpenJDK 7 or Oracle Java 7 may be used as the boot JDK instead of 6.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Building 32-bit OpenJDK 6 on Windows 7 SP1* recipe from [Chapter 2](ch02.html
    "Chapter 2. Building OpenJDK 6"), *Building OpenJDK 6*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Installing Cygwin for Windows builds* recipe from [Chapter 2](ch02.html
    "Chapter 2. Building OpenJDK 6"), *Building OpenJDK 6*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Building OpenJDK 6 on Ubuntu Linux 12.04 LTS* recipe from [Chapter 2](ch02.html
    "Chapter 2. Building OpenJDK 6"), *Building OpenJDK 6* for information about build
    tuning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Building 32-bit FreeType libraries for OpenJDK 7 on Windows* recipe from
    this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Preparing CA certificates* recipe from this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The official build instructions for OpenJDK 7 at [http://hg.openjdk.java.net/jdk7u/jdk7u/raw-file/tip/README-builds.html](http://hg.openjdk.java.net/jdk7u/jdk7u/raw-file/tip/README-builds.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building 64-bit OpenJDK 7 on Windows 7 x64 SP1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The amd64 build in Windows 7 is similar to the i586 build, but has additional
    complications.
  prefs: []
  type: TYPE_NORMAL
- en: Cygwin (at least the more common i586 version) works much worse on amd64 Windows.
    Due to the much bigger address space size, Cygwin fork techniques work much slower
    and are less reliable.
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio 2010 Express Edition does not support amd64 architecture, so Microsoft
    Windows SDK version 7.1 for Windows 7 or the Professional Edition of Visual Studio
    should be used.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we should have Windows 7 SP1 amd64 running with no antivirus
    software installed. Antivirus software is not allowed because it may interfere
    with Cygwin runtime.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following procedures will help us to build OpenJDK:'
  prefs: []
  type: TYPE_NORMAL
- en: Follow steps 1 to 10 from the previous recipe, *Building 32-bit OpenJDK 7 on
    Windows 7 SP1*, using the amd64 version of the Windows SDK and the FreeType libraries
    from the `7_64` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `build.bat` batch file and write the following environment variables
    settings there:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Follow steps 12 to 15 from the previous recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The amd64 build is similar to the i586 build, but can be much slower because
    Cygwin works slower on a 64-bit OS.
  prefs: []
  type: TYPE_NORMAL
- en: The build can be done using either the i586 or amd64 boot JDK, the only difference
    is amd64 requires more memory (not less than 1024MB).
  prefs: []
  type: TYPE_NORMAL
- en: For additional details, please see the *How it works...* section of the previous
    recipe *Building 32-bit OpenJDK 7 on Windows 7 SP1*.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To build the most compatible binaries, the same recipe should be used, but the
    Windows 2003 Server amd64 operating system should be used instead of Windows 7.
  prefs: []
  type: TYPE_NORMAL
- en: In Windows 2003, the `chmod 777` command is not required.
  prefs: []
  type: TYPE_NORMAL
- en: A prebuilt OpenJDK 7 or Oracle Java 7 may be used as the boot JDK instead of
    6.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Building 32-bit OpenJDK 7 on Windows 7 SP1* recipe from this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Building 64-bit OpenJDK 6 on Windows 7 x64 SP1* recipe from [Chapter 2](ch02.html
    "Chapter 2. Building OpenJDK 6"), *Building OpenJDK 6*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Installing Cygwin for Windows builds* recipe from [Chapter 2](ch02.html
    "Chapter 2. Building OpenJDK 6"), *Building OpenJDK 6*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Building OpenJDK 6 on Ubuntu Linux 12.04 LTS* recipe from [Chapter 2](ch02.html
    "Chapter 2. Building OpenJDK 6"), *Building OpenJDK 6*, for information about
    build tuning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Building 64-bit FreeType libraries for OpenJDK 7 on Windows* recipe from
    this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Preparing CA certificates* recipe from [Chapter 2](ch02.html "Chapter 2. Building
    OpenJDK 6"), *Building OpenJDK 6*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The official build instructions for OpenJDK 7 at [http://hg.openjdk.java.net/jdk7u/jdk7u/raw-file/tip/README-builds.html](http://hg.openjdk.java.net/jdk7u/jdk7u/raw-file/tip/README-builds.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing a standalone toolchain for 32- and 64-bit Windows' builds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipes in this chapter, we built OpenJDK 7 for Windows using
    Windows SDK Version 7.1\. This SDK requires installation prior to using it. The
    installation process requires .NET Framework 2 (to run the installer, included
    in Windows 7) and .NET Framework 4\. Installation of these components may be very
    time consuming in some usage scenarios. For example, to automated builds it may
    be desirable to use completely clean Windows images for the builds. Besides being
    slow, the .NET Framework and SDK installers are graphical tools and may be hard
    to script for automatic installation.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create a set of files and an environment script that
    can be used to build OpenJDK 7 i586 and amd64 on completely clean Windows installations
    (with corresponding architecture) without installing any tools through GUI installers.
    Such a set of files may be put under the version control system to be checked
    out prior to the build.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we should have two clean images of Windows 7 SP1\. One of them
    should have the i586 architecture and other should have the amd64 architecture.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following procedure will help us to prepare a standalone toolchain:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the Microsoft Windows SDK for Windows 7 i586 (`GRMSDK_EN_DVD.iso`)
    from the Microsoft website and install it on the i586 Windows instance in the
    default location. The `.NET Development` and `Common Utilities` components are
    not required.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a `toolchain` directory. We will put various tools and libraries there
    and will refer to this directory as `<toolchain>`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the SDK files from the `C:\Program Files\Microsoft SDKs\Windows\v7.1 to
    <toolchain>\winsdk71\sdk` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the Visual Studio files shipped with the SDK from the `C:\Program Files\Microsoft
    Visual Studio 10.0 to <toolchain>\winsdk71\vs2010e` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the Microsoft Windows SDK for Windows 7 amd64 (`GRMSDKX_EN_DVD.iso`)
    from the Microsoft website and install it on the amd64 Windows instance in the
    default location. The `.NET Development` and `Common Utilities` components are
    not required.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the `C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\x64` directory from
    the SDK amd64 installation to the `<toolchain>\winsdk71\sdk/Bin/x64` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Download and install the Microsoft DirectX 9.0 SDK (Summer 2004) to the default
    installation path on the i586 Windows instance. Note that this distribution is
    not available anymore on the Microsoft website. It may be downloaded from another
    place online, and the file details are as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Copy files from the `C:\Program Files\Microsoft DirectX 9.0 SDK (Summer 2004)`
    directory to the `<toolchain>\directx` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the Windows i586 instance copy the files from the `C:\Windows\System32`
    directory to the `<toolchain>\msvcr/7_32` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: On the Windows amd64 instance copy the same files as on the previous step (they
    should have the amd64 architecture) to the `<toolchain>\msvcr\7_64` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create an `env_32.bat` file with the following environment configuration that
    may be used for i586 builds:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an `env_64.bat` file with the following environment configuration that
    may be used for amd64 builds:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add the `toolchain` directory to the source control repository. This file set
    is a standalone toolchain and may be used to build both the i586 and amd64 versions
    of OpenJDK 7 (and OpenJDK 8) on clean Windows images with corresponding architectures.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The process in this recipe is quite straightforward: collect the installed
    files that are to be copied later on clean Windows images and prepare the environment
    for them.'
  prefs: []
  type: TYPE_NORMAL
- en: One possible problem is that, while the Microsoft linker tool `link.exe` from
    the Windows SDK 7.1 does not require .NET 4 runtime to link native binaries, it
    requires the .NET shared library, `msvcr100_clr0400.dll` (see step 7 of this recipe).
    This library must be found in `PATH`, otherwise the build will fail at the HotSpot
    VM link stage with an unclear error.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The OpenJDK configuration not specific to the Microsoft toolchain (Cygwin, FreeType,
    and so on) was removed from the environment files in this recipe for brevity.
    It should be added back to the environment files to perform the OpenJDK builds.
  prefs: []
  type: TYPE_NORMAL
- en: The result standalone toolchain is not specific to OpenJDK and may be used to
    build other software on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Building 32-bit OpenJDK 7 on Windows 7 SP1* recipe and the *Building 64-bit
    FreeType libraries for OpenJDK 7 on Windows* recipe from this chapter. They can
    be adjusted to use the standalone toolchain from this recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A question from [http://stackoverflow.com/](http://stackoverflow.com/) about
    the linker dependencies on .NET4 runtime at [http://stackoverflow.com/questions/13571628/compiling-c-code-using-windows-sdk-7-1-without-net-framework-4-0](http://stackoverflow.com/questions/13571628/compiling-c-code-using-windows-sdk-7-1-without-net-framework-4-0)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
