["```java\npublic class CustomerEndpoint {\n\n    @Inject CustomerRepository customerRepository;\n\n    @GET\n @RolesAllowed(\"user\")\n    public List<Customer> getAll() {\n        return customerRepository.findAll();\n    }\n\n    @POST\n @RolesAllowed(\"admin\")\n    public Response create(Customer customer) {\n\n        customerRepository.createCustomer(customer);\n        return Response.status(201).build();\n\n    }\n\n    @PUT\n @RolesAllowed(\"admin\")\n    public Response update(Customer customer) {\n        customerRepository.updateCustomer(customer);\n        return Response.status(204).build();\n    }\n    @DELETE\n @RolesAllowed(\"admin\")\n    public Response delete(@QueryParam(\"id\") Long customerId) {\n        customerRepository.deleteCustomer(customerId);\n        return Response.status(204).build();\n    }\n\n}\n```", "```java\n<dependency>\n  <groupId>io.quarkus</groupId>\n  <artifactId>quarkus-elytron-security-jdbc</artifactId>\n</dependency>\n```", "```java\nCREATE TABLE quarkus_user (\n    id INT,\n    username VARCHAR(255),\n    password VARCHAR(255),\n    role VARCHAR(255)\n);\nINSERT INTO quarkus_user (id, username, password, role) VALUES (1, 'admin', 'password123', 'admin');\nINSERT INTO quarkus_user (id, username, password, role) VALUES (2, 'frank','password123', 'user');\n```", "```java\nquarkus.security.jdbc.enabled=true\nquarkus.security.jdbc.principal-query.sql=SELECT u.password, u.role FROM quarkus_user u WHERE u.username=?\nquarkus.security.jdbc.principal-query.clear-password-mapper.enabled=true\nquarkus.security.jdbc.principal-query.clear-password-mapper.password-index=1\nquarkus.security.jdbc.principal-query.attribute-mappings.0.index=2\nquarkus.security.jdbc.principal-query.attribute-mappings.0.to=groups \n```", "```java\n@Test\npublic void testCustomerService() {\n    // Test GET for Customer size\n    given()\n            .auth()\n            .preemptive()\n            .basic(\"frank\", \"password123\")\n            .when().get(\"/customers\")\n            .then()\n            .statusCode(200)\n            .body(\"$.size()\", is(2));\n\n    JsonObject objOrder = Json.createObjectBuilder()\n            .add(\"item\", \"bike\")\n            .add(\"price\", new Long(100))\n            .build();\n\n    // Test POST Order for Customer #1\n    given()\n            .auth()\n            .preemptive()\n            .basic(\"admin\", \"password123\")\n            .contentType(\"application/json\")\n            .body(objOrder.toString())\n            .when()\n            .post(\"/orders/1\")\n            .then()\n            .statusCode(201);\n\n    // Create new JSON for Order #1\n    objOrder = Json.createObjectBuilder()\n            .add(\"id\", new Long(1))\n            .add(\"item\", \"mountain bike\")\n            .add(\"price\", new Long(100))\n            .build();\n\n    // Test UPDATE Order #1\n    given()\n            .auth()\n            .preemptive()\n            .basic(\"admin\", \"password123\")\n            .contentType(\"application/json\")\n            .body(objOrder.toString())\n            .when()\n            .put(\"/orders\")\n            .then()\n            .statusCode(204);\n\n    // Test GET for Order #1\n    given()\n            .auth()\n            .preemptive()\n            .basic(\"admin\", \"password123\")\n            .when().get(\"/orders?customerId=1\")\n            .then()\n            .statusCode(200)\n            .body(containsString(\"mountain bike\"));\n\n    // Test DELETE Order #1\n    given()\n            .auth()\n            .preemptive()\n            .basic(\"admin\", \"password123\")\n            .when().delete(\"/orders/1\")\n            .then()\n            .statusCode(204);\n\n}\n```", "```java\nmvn compile test\n```", "```java\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5.799 s - in com.packt.quarkus.chapter7.CustomerEndpointTest\n 2019-08-16 15:30:12,281 INFO  [io.quarkus] (main) Quarkus stopped in 0.012s\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0\n```", "```java\n<dependency>\n  <groupId>io.quarkus</groupId>\n  <artifactId>quarkus-keycloak-authorization</artifactId>\n</dependency>\n<dependency>\n  <groupId>io.quarkus</groupId>\n  <artifactId>quarkus-oidc</artifactId>\n</dependency>\n```", "```java\ndocker run --rm  \\\n --name keycloak \\\n -e KEYCLOAK_USER=admin \\\n -e KEYCLOAK_PASSWORD=admin \\\n -p 8180:8180 \\\n -it quay.io/keycloak/keycloak:7.0.1 \\\n -b 0.0.0.0 \\\n -Djboss.http.port=8180 \\\n -Dkeycloak.profile.feature.upload_scripts=enabled\n```", "```java\n10:33:15,519 INFO  [org.jboss.as] (Controller Boot Thread) WFLYSRV0060: Http management interface listening on http://127.0.0.1:9990/management\n 10:33:15,519 INFO  [org.jboss.as] (Controller Boot Thread) WFLYSRV0051: Admin console listening on http://127.0.0.1:9990\n 10:33:15,519 INFO  [org.jboss.as] (Controller Boot Thread) WFLYSRV0025: Keycloak 6.0.1 (WildFly Core 8.0.0.Final) started in 15991ms - Started 672 of 937 services (652 services are lazy, passive or on-demand)\n```", "```java\nkeycloak.url=http://localhost:8180\n\nquarkus.oidc.enabled=true\nquarkus.oidc.auth-server-url=${keycloak.url}/auth/realms/quarkus-realm\nquarkus.oidc.client-id=quarkus-client\nquarkus.oidc.credentials.secret=mysecret# Enable Policy Enforcement\nquarkus.keycloak.policy-enforcer.enable=true\n\nquarkus.http.cors=true\n\n```", "```java\n@ConfigProperty(name = \"keycloak.url\")\nString keycloakURL;\n\n    @Test\n    public void testHelloEndpoint() {\n\n        RestAssured.baseURI = keycloakURL;\n        Response response = given().urlEncodingEnabled(true)\n                .auth().preemptive().basic(\"quarkus-client\", \n                  \"mysecret\")\n                .param(\"grant_type\", \"password\")\n                .param(\"client_id\", \"quarkus-client\")\n                .param(\"username\", \"test\")\n                .param(\"password\", \"test\")\n                .header(\"Accept\", ContentType.JSON.getAcceptHeader())\n                .post(\"/auth/realms/quarkus-realm/protocol/openid-\n                  connect/token\")\n                .then().statusCode(200).extract()\n                .response();\n\n        JsonReader jsonReader = Json.createReader(new \n         StringReader(response.getBody().asString()));\n        JsonObject object = jsonReader.readObject();\n        String userToken = object.getString(\"access_token\");\n\n        response = given().urlEncodingEnabled(true)\n                .auth().preemptive().basic(\"quarkus-client\", \n                  \"mysecret\")\n                .param(\"grant_type\", \"password\")\n                .param(\"client_id\", \"quarkus-client\")\n                .param(\"username\", \"admin\")\n                .param(\"password\", \"test\")\n                .header(\"Accept\", ContentType.JSON.getAcceptHeader())\n                .post(\"/auth/realms/quarkus-realm/protocol/openid-\n                  connect/token\")\n                .then().statusCode(200).extract()\n                .response();\n\n        jsonReader = Json.createReader(new \n         StringReader(response.getBody().asString()));\n        object = jsonReader.readObject();\n        String adminToken = object.getString(\"access_token\");\n\n       // Test CRUD Methods here\n\n     }\n```", "```java\ncurl -X POST http://localhost:8180/auth/realms/quarkus-realm/protocol/openid-connect/token \\\n --user quarkus-client:mysecret \\\n -H 'content-type: application/x-www-form-urlencoded' \\\n -d 'username=test&password=test&grant_type=password'\n```", "```java\nRestAssured.baseURI = \"http://localhost:8081\";\ngiven().auth().preemptive()\n        .oauth2(userToken)   \n        .when().get(\"/customers\")\n        .then()\n        .statusCode(200)\n        .body(\"$.size()\", is(2));\n\nJsonObject objOrder = Json.createObjectBuilder()\n        .add(\"item\", \"bike\")\n        .add(\"price\", new Long(100))\n        .build();\n\n// Test POST Order for Customer #1\n\ngiven().auth()\n        .oauth2(adminToken)\n        .contentType(\"application/json\")\n        .body(objOrder.toString())\n        .when()\n        .post(\"/orders/1\")\n        .then()\n        .statusCode(201);\n\n// Create new JSON for Order #1\nobjOrder = Json.createObjectBuilder()\n        .add(\"id\", new Long(1))\n        .add(\"item\", \"mountain bike\")\n        .add(\"price\", new Long(100))\n        .build();\n\n// Test UPDATE Order #1\ngiven().auth()\n        .oauth2(adminToken)\n        .contentType(\"application/json\")\n        .body(objOrder.toString())\n        .when()\n        .put(\"/orders\")\n        .then()\n        .statusCode(204);\n\n// Test GET for Order #1\ngiven().auth()\n        .oauth2(adminToken)\n        .when().get(\"/orders?customerId=1\")\n        .then()\n        .statusCode(200)\n        .body(containsString(\"mountain bike\"));\n\n// Test DELETE Order #1\ngiven().auth()\n        .oauth2(adminToken)\n        .when().delete(\"/orders/1\")\n        .then()\n        .statusCode(204);\n```", "```java\n$ mvn compile test\n```", "```java\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 6.84 s - in com.packt.quarkus.chapter7.CustomerEndpointTest\n2019-08-24 12:28:28,056 INFO  [io.quarkus] (main) Quarkus stopped in 0.011s\n[INFO] \n[INFO] Results:\n[INFO] \n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0\n```", "```java\n@Inject SecurityIdentity securityContext;\n@Inject CustomerRepository customerRepository;\n\n@GET\n@RolesAllowed(\"user\")\npublic List<Customer> getAll() {\n\n    LOGGER.info(\"Connected with User \n     \"+securityContext.getPrincipal().getName());\n    Iterator<String> roles = securityContext.getRoles().iterator();\n    while (roles.hasNext()) {\n       LOGGER.info(\"Role: \"+roles.next());\n    }\n    return customerRepository.findAll();\n}\n```", "```java\nConnected with User test\nRole: offline_access\nRole: uma_authorization\nRole: user\n```", "```java\n<dependency>\n  <groupId>io.quarkus</groupId>\n  <artifactId>quarkus-smallrye-jwt</artifactId>\n</dependency>\n```", "```java\nkeycloak.url=http://localhost:8180\n\n# MP-JWT Config\nmp.jwt.verify.publickey.location=${keycloak.url}/auth/realms/quarkus-realm/protocol/openid-connect/certs\nmp.jwt.verify.issuer=${keycloak.url}/auth/realms/quarkus-realm\nquarkus.smallrye-jwt.realmName=quarkus-realm\n```", "```java\n$ mvn compile test\n```", "```java\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 6.463 s - in com.packt.quarkus.chapter7.CustomerEndpointTest\n2019-08-24 15:37:29,879 INFO  [io.quarkus] (main) Quarkus stopped in 0.006s\n[INFO] \n[INFO] Results:\n[INFO] \n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0\n```", "```java\n@Inject\nJsonWebToken jwt;\n```", "```java\n@Inject\n@Claim(standard = Claims.groups)\nOptional<JsonString> groups;\n\n@Inject\n@Claim(standard = Claims.preferred_username)\nOptional<JsonString> currentUsername;\n```", "```java\n $ openssl req -newkey rsa:2048 -new -nodes -x509 -days 3650 -keyout key.pem -out cert.pem\n```", "```java\nquarkus.http.ssl.certificate.file=/path/cert.pem\nquarkus.http.ssl.certificate.key-file=/path/key.pem\n\n```", "```java\n$ keytool -genkey -keyalg RSA -alias quarkus -keystore keystore.jks -storepass password -validity 365 -keysize 2048\n\n Enter key password for <quarkus>\n (RETURN if same as keystore password):\n```", "```java\nquarkus.http.ssl.certificate.key-store-file=/path/keystore.jks\nquarkus.http.ssl.certificate.key-store-password=password\n```", "```java\nquarkus.http.ssl-port=8443\n\n```"]