["```java\n@Introspected\npublic class OwnerDTO implements Serializable {\n    private Long id;\n    private String firstName;\n    private String lastName;\n    private String address;\n    private String city;\n    private String telephone;\n    private Set<PetDTO> pets = new HashSet<>();\n    … getters and setters\n}\n```", "```java\n...\n<properties>\n    <org.mapstruct.version>1.3.1.Final</org.mapstruct.version>\n</properties>\n...\n<dependencies>\n    <dependency>\n        <groupId>org.mapstruct</groupId>\n        <artifactId>mapstruct</artifactId>\n        <version>${org.mapstruct.version}</version>\n    </dependency>\n</dependencies>\n```", "```java\n...\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-compiler-plugin</artifactId>\n            <configuration>\n                …\n                <annotationProcessorPaths>\n                    <path>\n                        <groupId>org.mapstruct</groupId>\n                        <artifactId>mapstruct-processor</artifactId>\n                        <version>${org.mapstruct.version}</version>\n                    </path>\n                    <!-- other annotation processors -->\n                </annotationProcessorPaths>\n    <compilerArgs>\n                    <arg>-Amapstruct.defaultComponentModel=jsr330</arg>\n                     ….\n               </compilerArgs>\n            </configuration>\n        </plugin>\n    </plugins>\n</build> \n```", "```java\npublic interface EntityMapper <D, E> {\n    E toEntity(D dto);\n    D toDto(E entity);\n    List <E> toEntity(List<D> dtoList);\n    List <D> toDto(List<E> entityList);\n}\n```", "```java\n@Mapper(componentModel = \"jsr330\", uses = {PetMapper.class})\npublic interface OwnerMapper extends EntityMapper<OwnerDTO, Owner> {\n    default Owner fromId(Long id) {\n        if (id == null) {\n            return null;\n        }\n        Owner owner = new Owner();\n        owner.setId(id);\n        return owner;\n    }\n}\n```", "```java\npublic interface OwnerService {\n    OwnerDTO save(OwnerDTO ownerDTO);\n    Page<OwnerDTO> findAll(Pageable pageable);\n    Optional<OwnerDTO> findOne(Long id);\n    void delete(Long id);\n}\n```", "```java\n@Singleton\n@Transactional\npublic class OwnerServiceImpl implements OwnerService {\n    … injections for OwnerRepository and OwnerMapper\n    @Override\n    public OwnerDTO save(OwnerDTO ownerDTO) {\n        Owner owner = ownerMapper.toEntity(ownerDTO);\n        owner = ownerRepository.mergeAndSave(owner);\n        return ownerMapper.toDto(owner);\n    }\n    @Override\n    @ReadOnly\n    @Transactional\n    public Page<OwnerDTO> findAll(Pageable pageable) {\n        return ownerRepository.findAll(pageable)\n                .map(ownerMapper::toDto);\n    }\n    @Override\n    @ReadOnly\n    @Transactional\n    public Optional<OwnerDTO> findOne(Long id) {\n        return ownerRepository.findById(id)\n                .map(ownerMapper::toDto);\n    }\n    @Override\n    public void delete(Long id) {\n        ownerRepository.deleteById(id);\n    }\n}\n```", "```java\n@Controller(\"/api\")\npublic class OwnerResource {\n    …\n    @Get(\"/owners\")\n    @ExecuteOn(TaskExecutors.IO)\n    public HttpResponse<List<OwnerDTO>> getAllOwners(HttpRequest request, Pageable pageable) {\n        log.debug(\"REST request to get a page of Owners\");\n        Page<OwnerDTO> page = ownerService.findAll(pageable);\n        return HttpResponse.ok(page.getContent()).headers(headers ->\n            PaginationUtil.generatePaginationHttpHeaders(headers, UriBuilder.of(request.getPath()), page));\n    }\n    …\n}\n```", "```java\n@Get(\"/owners/{id}\")\n@ExecuteOn(TaskExecutors.IO)\npublic HttpResponse<Optional<OwnerDTO>> getOwner(@PathVariable Long id) {\n    log.debug(\"REST request to get Owner : {}\", id);\n    return ownerService.findOne(id);\n}\n```", "```java\n…\n@Post(\"/owners\")\n@ExecuteOn(TaskExecutors.IO)\npublic HttpResponse<OwnerDTO> createOwner(@Body OwnerDTO ownerDTO) throws URISyntaxException {\n    if (ownerDTO.getId() != null) {\n        throw new BadRequestAlertException(\"A new owner cannot already have an ID\", ENTITY_NAME, \"idexists\");\n    }\n    OwnerDTO result = ownerService.save(ownerDTO);\n    URI location = new URI(\"/api/owners/\" + result.getId());\n    return HttpResponse.created(result).headers(headers -> {\n        headers.location(location);\n        HeaderUtil.createEntityCreationAlert(headers, applicationName, true, ENTITY_NAME, result.getId().toString());\n    });\n}\n…\n```", "```java\n…\n@Put(\"/owners\")\n@ExecuteOn(TaskExecutors.IO)\npublic HttpResponse<OwnerDTO> updateOwner(@Body OwnerDTO ownerDTO) throws URISyntaxException {\n    log.debug(\"REST request to update Owner : {}\", ownerDTO);\n    if (ownerDTO.getId() == null) {\n        throw new BadRequestAlertException(\"Invalid id\", ENTITY_NAME, \"idnull\");\n    }\n    OwnerDTO result = ownerService.save(ownerDTO);\n    return HttpResponse.ok(result).headers(headers ->\n            HeaderUtil.createEntityUpdateAlert(headers, applicationName, true, ENTITY_NAME, ownerDTO.getId().toString()));\n}\n…\n```", "```java\n…\n@Delete(\"/owners/{id}\")\n@ExecuteOn(TaskExecutors.IO)\npublic HttpResponse deleteOwner(@PathVariable Long id) {\n    log.debug(\"REST request to delete Owner : {}\", id);\n    ownerService.delete(id);\n    return HttpResponse.noContent().headers(headers -> HeaderUtil.createEntityDeletionAlert(headers, applicationName, true, ENTITY_NAME, id.toString()));\n}\n…\n```", "```java\n…\n<dependency>\n<groupId>io.micronaut</groupId>\n<artifactId>micronaut-http-server-netty</artifactId>\n<scope>compile</scope>\n</dependency>\n…\n```", "```java\npublic class FooException extends RuntimeException {\n…\n}\n```", "```java\n@Produces\n@Singleton \n@Requires(classes = {FooException.class, ExceptionHandler.class})  \npublic class FooExceptionHandler implements ExceptionHandler<FooException, HttpResponse> { \n    @Override\n    public HttpResponse handle(HttpRequest request, FooException exception) {\n        JsonError error = new JsonError(exception.getMessage());\n        error.path('/' + exception.getArgument().getName());\n        error.link(Link.SELF, Link.of(request.getUri()));\n        return HttpResponse.status(HttpStatus.INTERNAL_SERVER_ERROR).body(error);\n    }\n}\n```", "```java\nmicronaut:\n  application:\n    name: Pet-Owner\n  router:\n    versioning:\n      enabled: true\n      default-version: 1\n…..\n```", "```java\n@Version(\"1\")\n@Get(\"/owners/{id}\")\n@ExecuteOn(TaskExecutors.IO)\npublic Optional<OwnerDTO> getOwner(@PathVariable Long id) {\n    log.debug(\"REST request to get Owner : {}\", id);\n    return ownerService.findOne(id);\n}\n…\n@Version(\"2\")\n@Get(\"/owners/{id}\")\n@ExecuteOn(TaskExecutors.IO)\npublic Optional<OwnerDTO> getOwnerV2(@PathVariable Long id) {\n    log.debug(\"REST request to get Owner : {}\", id);\n    return ownerService.findOne(id);\n}\n```", "```java\n…\n<dependency>\n<groupId>io.micronaut</groupId>\n<artifactId>micronaut-http-client</artifactId>\n<scope>compile</scope>\n</dependency>\n…\n```", "```java\npublic List<OwnerDTO> getAllOwnersClient() throws MalformedURLException {\n    HttpClient client = HttpClient.create(new URL(\"https://\" + server.getHost() + \":\" + server.getPort()));\n    OwnerDTO[] owners = client.toBlocking().retrieve(HttpRequest.GET(\"/api/owners\"), OwnerDTO[].class);\n    return List.of(owners);\n}\n```", "```java\npublic OwnerDTO createOwnerClient() throws MalformedURLException {\n    HttpClient client = HttpClient.create(new URL(\"https://\" + server.getHost() + \":\" + server.getPort()));\n    OwnerDTO newOwner = new OwnerDTO();\n    newOwner.setFirstName(\"Lisa\");\n    newOwner.setLastName(\"Ray\");\n    newOwner.setAddress(\"100 Queen St.\");\n    newOwner.setCity(\"Toronto\");\n    newOwner.setTelephone(\"1234567890\");\n    return client.toBlocking().retrieve(HttpRequest.POST(\"/api/owners\", newOwner), OwnerDTO.class);\n}\n```", "```java\npublic OwnerDTO updateOwnerClient() throws MalformedURLException {\n    HttpClient client = HttpClient.create(new URL(\"https://\" + server.getHost() + \":\" + server.getPort()));\n    OwnerDTO owner = new OwnerDTO();\n    owner.setId(1L);\n    owner.setAddress(\"120 Queen St.\");\n    return client.toBlocking().retrieve(HttpRequest.PUT(\"/api/owners\", owner), OwnerDTO.class);\n}\n```", "```java\npublic Boolean deleteOwnerClient() throws MalformedURLException {\n    HttpClient client = HttpClient.create(new URL(\"https://\" + server.getHost() + \":\" + server.getPort()));\n    long ownerId = 1L;\n    HttpResponse httpResponse = client.toBlocking().retrieve(HttpRequest.DELETE(\"/api/owners\" + ownerId), HttpResponse.class);\n    return httpResponse.getStatus().equals(HttpStatus.NO_CONTENT);\n}\n```"]