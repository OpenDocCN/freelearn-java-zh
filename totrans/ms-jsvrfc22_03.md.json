["```java\npackage *package_name*;\n\nimport javax.faces.bean.ManagedBean;\nimport javax.faces.bean.jsfScoped;\n\n@ManagedBean\n@*jsf*Scoped\npublic class JSFBeanName {\n...\n}\n```", "```java\n@ManagedBean(name=\"*custom name*\")\n```", "```java\npackage *package_name*;\n\nimport javax.inject.Named;\nimport javax.enterprise.context.cdiScoped;\n\n@Named\n@*cdi*Scoped\npublic class CDIBeanName {\n...\n}\n```", "```java\n@Named(value=\"*custom name*\")\n```", "```java\n@Named\n@RequestScoped\npublic class PlayersBean {\n\n  final String[] players_list = {\"Nadal, Rafael (ESP)\",\"Djokovic, Novak (SRB)\", \"Ferrer, David (ESP)\", \"Murray, Andy (GBR)\", \"Del Potro, Juan Martin (ARG)\"};\n\n  private ArrayList players = new ArrayList();\n  private String player;\n\n  //getters and setters\n\n  public void newPlayer() {\n    int nr = new Random().nextInt(4);\n    player = players_list[nr];\n    players.add(player);\n  }\n}\n```", "```java\n<h:body>\n  Just generated:\n  <h:outputText value=\"#{playersBean.player}\"/><br/>\n\n  List of generated players:\n  <h:dataTable var=\"t\" value=\"#{playersBean.players}\">\n    <h:column>\n      <h:outputText value=\"#{t}\"/>\n    </h:column>\n  </h:dataTable>       \n  <h:form>\n    <h:commandButton value=\"Get Players In Same View\" actionListener=\"#{playersBean.newPlayer()}\"/>\n    <h:commandButton value=\"Get Players With Page Forward\" actionListener=\"#{playersBean.newPlayer()}\" action=\"index.xhtml\"/>\n    <h:commandButton value=\"Get Players With Page Redirect\" actionListener=\"#{playersBean.newPlayer()}\" action=\"index.xhtml?faces-redirect=true;\"/>\n  </h:form>\n</h:body>\n```", "```java\nFacesContext context = FacesContext.getCurrentInstance();\nMap<String, Object> requestMap = context.getExternalContext().getRequestMap();\n```", "```java\nimport javax.faces.bean.ManagedBean;\nimport javax.faces.bean.RequestScoped;\n\n@ManagedBean\n@RequestScoped\npublic class PlayersBean {\n  ...\n}\n```", "```java\nimport java.io.Serializable;\nimport javax.enterprise.context.SessionScoped;\nimport javax.inject.Named;\n\n@Named\n@SessionScoped\npublic class PlayersBean implements Serializable{\n  ...\n}\n```", "```java\nimport java.io.Serializable;\nimport javax.faces.bean.ManagedBean;\nimport javax.faces.bean.SessionScoped;\n\n@ManagedBean\n@SessionScoped\npublic class PlayersBean implements Serializable{\n  ...\n}\n```", "```java\nFacesContext context = FacesContext.getCurrentInstance();\nMap<String, Object> sessionMap = context.getExternalContext().getSessionMap();\n```", "```java\nFacesContext.getCurrentInstance().getExternalContext().invalidateSession();\n```", "```java\nimport java.io.Serializable;\nimport javax.faces.view.ViewScoped;\nimport javax.inject.Named;\n\n@Named\n@ViewScoped\npublic class PlayersBean implements Serializable{\n  ...\n}\n```", "```java\nimport java.io.Serializable;\nimport javax.faces.bean.ManagedBean;\nimport javax.faces.bean.ViewScoped;\n\n@ManagedBean\n@ViewScoped\npublic class PlayersBean implements Serializable{\n  ...\n}\n```", "```java\nimport javax.enterprise.context.ApplicationScoped;\nimport javax.inject.Named;\n\n@Named\n@ApplicationScoped\npublic class PlayersBean {\n  ...\n}\n```", "```java\nimport javax.faces.bean.ApplicationScoped;\nimport javax.faces.bean.ManagedBean;\n\n@ManagedBean\n@ApplicationScoped\npublic class PlayersBean {\n  ...\n}\n```", "```java\nFacesContext context = FacesContext.getCurrentInstance();\nMap<String, Object> applicationMap = context.getExternalContext().getApplicationMap();\n```", "```java\nprivate @Inject Conversation conversation;\n```", "```java\n    if (conversation.isTransient()) {\n      conversation.begin();\n    }\n    ```", "```java\n    if (!conversation.isTransient()) {\n      conversation.end();\n    }\n    ```", "```java\n@Named\n@ConversationScoped\npublic class PlayersBean implements Serializable {\n\n private @Inject\n Conversation conversation;\n\n  final String[] players_list = {\"Nadal, Rafael (ESP)\",\"Djokovic, Novak (SRB)\", \"Ferrer, David (ESP)\", \"Murray, Andy (GBR)\", \"Del Potro, Juan Martin (ARG)\"};\n  private ArrayList players = new ArrayList();\n  private String player;\n\n  public PlayersBean() {\n  }\n\n  //getters and setters\n\n  public void newPlayer() {\n    int nr = new Random().nextInt(4);\n    player = players_list[nr];\n    players.add(player);\n  }   \n\n public void startPlayerRnd() {\n if (conversation.isTransient()) {\n conversation.begin();\n }\n }\n\n public void stopPlayerRnd() {\n if (!conversation.isTransient()) {\n conversation.end();\n }\n }\n}\n```", "```java\n<h:link outcome=\"/link.xhtml\" value=\"Conversation Propagation\">\n  <f:param name=\"cid\" value=\"#{conversation.id}\"/>\n</h:link>\n```", "```java\n<h:body>\n  <h1><b>In flow ? \n  #{null != facesContext.application.flowHandler.currentFlow}\n  </b></h1><br/><br/>   \n  Flow Id: #{facesContext.application.flowHandler.currentFlow.id}\n  REGISTER NEW PLAYER\n  <h:form>\n    <h:commandButton value=\"Start Registration\" action=\"registration\" immediate=\"true\"/>\n  </h:form>\n</h:body>\n```", "```java\n  #{null != facesContext.application.flowHandler.currentFlow}\n  #{facesContext.application.flowHandler.currentFlow.id}\n```", "```java\n<h:body>\n  <h1><b>First page in the 'registration' flow</b></h1>\n  <h1><b>In flow ? \n  #{null != facesContext.application.flowHandler.currentFlow}\n  </b></h1><br/><br/> \n\n  You are registered as:#{flowScope.value}\n  <h:form prependId=\"false\">\n    Name &amp; Surname: \n    <h:inputText id=\"nameSurnameId\" value=\"#{flowScope.value}\" />\n    <h:commandButton value=\"Register To Tournament\" action=\"confirm\"/>           \n    <h:commandButton value=\"Back(exit flow)\" action=\"taskFlowReturnIndex\"/>  \n  </h:form>\n</h:body>\n```", "```java\n#{flowScope.value}\n```", "```java\n<flow-return id=\"taskFlowReturnIndex\">\n  <from-outcome>/index</from-outcome>\n</flow-return>\n```", "```java\n<h:body>\n  <h1><b>Second page in the 'registration' flow</b></h1>\n  <h1><b>In flow ? \n  #{null != facesContext.application.flowHandler.currentFlow}\n  </b></h1><br/><br/> \n  You are registered as:#{flowScope.value}\n  <h:form prependId=\"false\">           \n    <h:commandButton value=\"Back (still in flow)\" action=\"registration\"/>\n    <h:commandButton value=\"Next (exit flow)\" action=\"taskFlowReturnDone\"/>\n  </h:form>\n</h:body>\n```", "```java\n<flow-return id=\"taskFlowReturnDone\">\n  <from-outcome>/done</from-outcome>\n</flow-return>\n```", "```java\n<h:body>\n  <h1><b>In flow ? \n  #{null != facesContext.application.flowHandler.currentFlow}\n  </b></h1><br/><br/>        \n  REGISTER NEW PLAYER ENDED        \n</h:body>\n```", "```java\n<faces-config version=\"2.2\" \n\n  xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee\n  http://xmlns.jcp.org/xml/ns/javaee/web-facesconfig_2_2.xsd\">\n\n  <flow-definition id=\"registration\">\n    <view id=\"registration\">\n      <vdl-document>/registration/registration.xhtml</vdl-document>\n    </view>\n    <flow-return id=\"taskFlowReturnIndex\">\n      <from-outcome>/index</from-outcome>\n    </flow-return>\n    <flow-return id=\"taskFlowReturnDone\">\n      <from-outcome>/done</from-outcome>\n    </flow-return>\n  </flow-definition>    \n</faces-config>\n```", "```java\n<faces-flow-definition>\n  <flow-definition id=\"registration\">\n  ...\n</faces-flow-definition>\n```", "```java\n<h:body>\n  <h1><b>First page in the 'registration' flow</b></h1>\n  <h1><b>In flow ? \n  #{null != facesContext.application.flowHandler.currentFlow}\n  </b></h1><br/><br/> \n  Your registration last credentials:\n  #{registrationBean.playerName} #{registrationBean.playerSurname}\n  <h:form prependId=\"false\">\n    Name: <h:inputText value=\"#{registrationBean.playerName}\"/>\n    Surname: <h:inputText value=\"#{registrationBean.playerSurname}\"/>\n    <h:commandButton value=\"Register To Tournament\" action=\"#{registrationBean.registrationAction()}\"/> \n    <h:commandButton value=\"Back (exit flow)\" action=\"taskFlowReturnIndex\"/>  \n  </h:form>\n</h:body>\n```", "```java\n@Named\n@FlowScoped(value=\"registration\")\npublic class RegistrationBean implements Serializable {\n\n  private String playerName;\n  private String playerSurname;\n\n  ...\n  //getters and setters\n  ...\n\n  public String getReturnValue() {\n    return \"/done\";\n  }\n\n  public String registrationAction(){\n\n    //simulate some registration conditions\n    Random r= new Random();\n    int nr = r.nextInt(10);\n\n    if(nr < 5){\n      playerName=\"\";\n      playerSurname=\"\";\n      FacesContext.getCurrentInstance().addMessage(\"password\",\n      new FacesMessage(FacesMessage.SEVERITY_ERROR, \"Registration failed!\",\"\"));\n      return \"registration\";\n    } else {\n      return \"confirm\";\n    }\n  }\n}\n```", "```java\n<flow-return id=\"taskFlowReturnDone\">\n  <from-outcome>/done</from-outcome>\n</flow-return>\n```", "```java\n<flow-return id=\"taskFlowReturnDone\">\n  <from-outcome>#{registrationBean.returnValue}</from-outcome>\n</flow-return>\n```", "```java\n<h:form prependId=\"false\"> \n  <h:commandButton value=\"Back (still in flow)\" action=\"registration\"/>\n <h:commandButton id=\"Next\" value=\"Schedule\" action=\"callSchedule\" /> \n  <h:commandButton value=\"Next (exit flow)\" action=\"taskFlowReturnDone\"/>\n</h:form>\n```", "```java\n<flow-call id=\"callSchedule\">\n  <flow-reference>\n    <flow-id>schedule</flow-id>\n  </flow-reference>   \n...\n</flow-call>\n```", "```java\n<flow-call id=\"callSchedule\">\n  <flow-reference>\n    <flow-id>schedule</flow-id>\n  </flow-reference>   \n <outbound-parameter>\n <name>playernameparam</name>\n <value>#{registrationBean.playerName}</value>\n </outbound-parameter> \n <outbound-parameter>\n <name>playersurnameparam</name>\n <value>#{registrationBean.playerSurname}</value>\n </outbound-parameter> \n <outbound-parameter>\n <name>playerregistrationcode</name>\n <value>349CF0YO122</value>\n </outbound-parameter> \n</flow-call>\n```", "```java\n<h:body>\n  <h1><b>First page in the 'schedule' flow</b></h1>\n  <h1><b>In flow ? \n  #{null != facesContext.application.flowHandler.currentFlow}\n  </b></h1><br/><br/> \n  Hello, #{flowScope.name} #{flowScope.surname} (#{scheduleBean.regcode})\n  <h:form prependId=\"false\">\n    Day: <h:inputText value=\"#{scheduleBean.day}\"/>\n    Starting At Hour: <h:inputText value=\"#{scheduleBean.hourstart}\"/>     \n    <h:commandButton value=\"Save\" action=\"success\"/>\n  </h:form>\n</h:body>\n```", "```java\n<flow-definition id=\"schedule\">\n  <view id=\"schedule\">\n    <vdl-document>/schedule/schedule.xhtml</vdl-document>\n  </view>   \n\n <inbound-parameter>\n <name>playernameparam</name>\n <value>#{flowScope.name}</value>\n </inbound-parameter>\n <inbound-parameter>\n <name>playersurnameparam</name>\n <value>#{flowScope.surname}</value>\n </inbound-parameter> \n <inbound-parameter>\n <name>playerregistrationcode</name>\n <value>#{scheduleBean.regcode}</value>\n </inbound-parameter> \n</flow-definition>\n```", "```java\n<h:body>\n  <h1><b>Second page in the 'schedule' flow</b></h1>\n  <h1><b>In flow ?\n  #{null != facesContext.application.flowHandler.currentFlow}\n  </b></h1><br/><br/> \n  You are registered as\n  #{flowScope.name} #{flowScope.surname} (#{scheduleBean.regcode})\n  You will play first match \n  #{scheduleBean.day} after #{scheduleBean.hourstart} \n  <h:button value=\"Exit Registration\" outcome=\"taskFlowReturnThanks\"/>\n</h:body>\n```", "```java\n<flow-return id=\"taskFlowReturnThanks\">\n  <from-outcome>/registration/thanks.xhtml</from-outcome>\n</flow-return>\n```", "```java\n<h:body>       \n  <h1><b>Third page in the 'registration' flow</b></h1>\n  <h1><b>In flow ? #{null != facesContext.application.flowHandler.currentFlow}</b></h1><br/><br/>\n  Thanks for your patience, Mr :#{registrationBean.playerName} \n  #{registrationBean.playerSurname}<br/>\n  <b>We wish you beautiful games!</b><br/><br/>\n  <h:button value=\"Bye Bye, #{registrationBean.playerSurname}\" outcome=\"taskFlowReturnDone\"/>\n</h:body>\n```", "```java\n<flow-return id=\"taskFlowReturnThanks\">          \n  <from-outcome>taskFlowReturnDone</from-outcome>\n</flow-return>\n```", "```java\n    @Produces\n    @FlowDefinition\n    public Flow defineFlow(@FlowBuilderParameter FlowBuilder flowBuilder) {\n      ...\n    }\n    ```", "```java\npublic class Registration implements Serializable {        \n\n  @Produces\n  @FlowDefinition\n  public Flow defineFlow(@FlowBuilderParameter FlowBuilder flowBuilder) {\n\n    String flowId = \"registration\";\n    flowBuilder.id(\"\", flowId);\n    flowBuilder.viewNode(flowId, \"/\" + flowId + \"/\" + flowId + \".xhtml\").markAsStartNode();\n    flowBuilder.viewNode(\"confirm-id\", \"/\" + flowId + \"/confirm.xhtml\");\n    flowBuilder.viewNode(\"thanks-id\", \"/\" + flowId + \"/thanks.xhtml\");\n    flowBuilder.returnNode(\"taskFlowReturnIndex\").fromOutcome(\"/index\");\n    flowBuilder.returnNode(\"taskFlowReturnDone\").fromOutcome(\"#{registrationBean.returnValue}\");\n\n    flowBuilder.flowCallNode(\"callSchedule\").flowReference(\"\", \"schedule\").outboundParameter(\"playernameparam\", \"#{registrationBean.playerName}\"). outboundParameter(\"playersurnameparam\", \"#{registrationBean.playerSurname}\").outboundParameter(\"playerregistrationcode\", \"349CF0YO122\");\n\n    return flowBuilder.getFlow();\n  }\n}\n```", "```java\npublic class Schedule implements Serializable {\n\n  @Produces\n  @FlowDefinition\n  public Flow defineFlow(@FlowBuilderParameter FlowBuilder flowBuilder) {\n\n    String flowId = \"schedule\";\n    flowBuilder.id(\"\", flowId);\n    flowBuilder.viewNode(flowId, \"/\" + flowId + \"/\" + flowId + \".xhtml\").markAsStartNode();\n    flowBuilder.viewNode(\"success-id\", \"/\" + flowId + \"/success.xhtml\");\n    flowBuilder.returnNode(\"taskFlowReturnThanks\").fromOutcome(\"/registration/thanks.xhtml\");\n\n    flowBuilder.inboundParameter(\"playernameparam\", \"#{flowScope.name}\");\n    flowBuilder.inboundParameter(\"playersurnameparam\", \"#{flowScope.surname}\");\n    flowBuilder.inboundParameter(\"playerregistrationcode\", \"#{scheduleBean.regcode}\");             \n\n    return flowBuilder.getFlow();\n  }\n}\n```", "```java\n<h:commandButton value=\"Register To Tournament\" action=\"confirm_outcome\"/>\n```", "```java\n<navigation-rule>\n  <from-view-id>/registration/registration.xhtml</from-view-id>\n  <navigation-case>\n    <from-outcome>confirm_outcome</from-outcome>\n    <to-view-id>/registration/confirm.xhtml</to-view-id>\n    <redirect/>           \n  </navigation-case> \n</navigation-rule>\n```", "```java\n<h:button id=\"...\" value=\"*enter flow*\" outcome=\"*flow*\">\n  <f:attribute name=\"to-flow-document-id\" value=\"unique\"/>\n</h:button>\n```", "```java\nflowBuilder.navigationCase().fromViewId(\"/registration/registration.xhtml\").fromOutcome(\"confirm_outcome\").toViewId(\"/registration/confirm.xhtml\").redirect();\n```", "```java\npublic class CustomNavigationHandler extends NavigationHandlerWrapper {\n\n  private NavigationHandler configurableNavigationHandler;\n\n  public CustomNavigationHandler() {}\n\n  public CustomNavigationHandler(NavigationHandler configurableNavigationHandler){\n    this.configurableNavigationHandler = configurableNavigationHandler;\n  }\n\n  @Override\n  public void handleNavigation(FacesContext context, String fromAction, String outcome) {\n\n    if (outcome.equals(\"confirm_outcome\")) {\n      outcome = \"confirm\";\n    }\n\n    getWrapped().handleNavigation(context, fromAction, outcome);\n  }\n\n  @Override\n  public NavigationHandler getWrapped() {\n    return configurableNavigationHandler;\n  }\n}\n```", "```java\n<application>        \n  <navigation-handler>           \n    book.beans.CustomNavigationHandler\n  </navigation-handler>        \n</application>\n```", "```java\npublic class CustomConfigurableNavigationHandler extends ConfigurableNavigationHandlerWrapper {\n\n  private final static Logger logger = Logger.getLogger(CustomConfigurableNavigationHandler.class.getName());\n  private ConfigurableNavigationHandler configurableNavigationHandler;\n\n  public CustomConfigurableNavigationHandler() {}\n\n  public CustomConfigurableNavigationHandler(ConfigurableNavigationHandler configurableNavigationHandler){\n    this.configurableNavigationHandler = configurableNavigationHandler;\n  }\n\n  @Override\n  public void inspectFlow(FacesContext context, Flow flow) {\n    getWrapped().inspectFlow(context, flow);\n    if (flow.getNavigationCases().size() > 0) {\n      Map<String, Set<NavigationCase>> navigationCases = flow.getNavigationCases();\n      for (Map.Entry<String, Set<NavigationCase>> entry : navigationCases.entrySet()) {\n        logger.log(Level.INFO, \"Navigation case: {0}\", entry.getKey());\n        for (NavigationCase nc : entry.getValue()) {\n          logger.log(Level.INFO, \"From view id: {0}\", nc.getFromViewId());\n          logger.log(Level.INFO, \"From outcome: {0}\", nc.getFromOutcome());\n          logger.log(Level.INFO, \"To view id: {0}\", nc.getToViewId(context));\n          logger.log(Level.INFO, \"Redirect: {0}\", nc.isRedirect());\n        }\n      }\n    }\n  }\n\n  @Override\n  public ConfigurableNavigationHandler getWrapped() {\n    return configurableNavigationHandler;\n  }\n}\n```", "```java\npublic abstract FlowBuilder initializer(String methodExpression)\npublic abstract FlowBuilder initializer(javax.el.MethodExpression methodExpression)\n```", "```java\npublic abstract FlowBuilder finalizer(String methodExpression)\npublic abstract FlowBuilder finalizer(javax.el.MethodExpression methodExpression)\n```", "```java\n<h:form prependId=\"false\">\n  <h:inputHidden id=\"tournamentNameId\" value=\"Roland Garros\"/>\n  <h:inputHidden id=\"tournamentPlaceId\" value=\"France\"/>\n  <h:commandButton value=\"Start Registration\" action=\"registration\"/>\n</h:form>\n```", "```java\n//initializer method\npublic void tournamentInitialize() {\n  tournamentName = FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap().get(\"tournamentNameId\");\n  tournamentPlace = FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap().get(\"tournamentPlaceId\");\n}\n```", "```java\n<initializer>\n  #{registrationBean.tournamentInitialize()}\n</initializer>\n```", "```java\n@Named\n@ApplicationScoped\npublic class PlayersCounterBean {\n\n  private int count = 0;\n\n  public int getCount() {\n    return count;\n  }\n\n  public void addPlayer() {\n    count++;\n  }\n}\n```", "```java\n<finalizer>\n  #{registrationBean.tournamentFinalize()}\n</finalizer>\n```", "```java\n@Named\n@FlowScoped(value = \"registration\")\npublic class RegistrationBean {\n\n  @Inject\n  private PlayersCounterBean playersCounterBean;\n  ...\n  //finalizer method\n  public void tournamentFinalize() {\n    playersCounterBean.addPlayer();\n  }\n}\n```", "```java\nflowBuilder.initializer(\"#{registrationBean.tournamentInitialize(param['tournamentNameId'], param['tournamentPlaceId'])}\");\nflowBuilder.finalizer(\"#{registrationBean.tournamentFinalize()}\");\n```", "```java\n//initializer method\npublic void tournamentInitialize(String tn, String tp) {\n  tournamentName = tn;\n  tournamentPlace = tp;\n}\n```", "```java\n<h:form prependId=\"false\">\n  <h:inputHidden id=\"tournamentNameId\" value=\"Australian Open\"/>\n  <h:inputHidden id=\"tournamentPlaceId\" value=\"Australia\"/>\n  <h:commandButton value=\"Start Registration (Australian Open)\" action=\"registration\"/>\n</h:form>\n```", "```java\npublic class Registration implements Serializable {\n\n  @Produces\n  @FlowDefinition\n  public Flow defineFlow(@FlowBuilderParameter FlowBuilder flowBuilder) {\n\n    String flowId = \"registration\";\n    flowBuilder.id(\"\", flowId);\n    flowBuilder.viewNode(flowId, \"/\" + flowId + \"/\" + flowId + \".xhtml\").markAsStartNode();\n    flowBuilder.viewNode(\"no-tournament-id\", \"/\" + flowId + \"/notournament.xhtml\");\n    flowBuilder.viewNode(\"confirm-rg-id\", \"/\" + flowId + \"/confirm_rg.xhtml\");\n    flowBuilder.viewNode(\"confirm-wb-id\", \"/\" + flowId + \"/confirm_wb.xhtml\");\n    flowBuilder.viewNode(\"confirm-us-id\", \"/\" + flowId + \"/confirm_us.xhtml\");\n    flowBuilder.viewNode(\"confirm-ao-id\", \"/\" + flowId + \"/confirm_ao.xhtml\");\n    flowBuilder.returnNode(\"taskFlowReturnDone\").fromOutcome(\"#{registrationBean.returnValue}\");\n\n    flowBuilder.switchNode(\"confirm-switch-id\").defaultOutcome(\"no-tournament-id\").switchCase().condition(\"#{registrationBean.tournamentName eq 'Roland Garros'}\").fromOutcome(\"confirm-rg-id\").condition(\"#{registrationBean.tournamentName eq 'Wimbledon'}\").fromOutcome(\"confirm-wb-id\").condition(\"#{registrationBean.tournamentName eq 'US Open'}\").fromOutcome(\"confirm-us-id\").condition(\"#{registrationBean.tournamentName eq 'Australian Open'}\").fromOutcome(\"confirm-ao-id\");\n    flowBuilder.initializer(\"#{registrationBean.tournamentInitialize(param['tournamentNameId'],param['tournamentPlaceId'])}\");\n    flowBuilder.finalizer(\"#{registrationBean.tournamentFinalize()}\");\n\n    return flowBuilder.getFlow();\n  }\n}\n```", "```java\n<switch id=\"confirm-switch-id\">\n  <default-outcome>\n    /registration/notournament.xhtml\n  </default-outcome>\n  <case>\n    <if>#{registrationBean.tournamentName eq 'Roland Garros'}</if>\n    <from-outcome>/registration/confirm_rg.xhtml</from-outcome>\n  </case>\n  <case>\n    <if>#{registrationBean.tournamentName eq 'Wimbledon'}</if>\n    <from-outcome>/registration/confirm_wb.xhtml</from-outcome>\n  </case>\n  <case>\n    <if>#{registrationBean.tournamentName eq 'US Open'}</if>\n    <from-outcome>/registration/confirm_us.xhtml</from-outcome>\n  </case>\n  <case>\n    <if>#{registrationBean.tournamentName eq 'Australian Open'}</if>\n    <from-outcome>/registration/confirm_ao.xhtml</from-outcome>\n  </case>\n</switch>\n```", "```java\nFacesContext context = FacesContext.getCurrentInstance();\nApplication application = context.getApplication();\nFlowHandler flowHandler = application.getFlowHandler();\n\n//get current flow\nFlow flow = flowHandler.getCurrentFlow();\nFlow flowContext = flowHandler.getCurrentFlow(context);     \n\n//add flow\nflowHandler.addFlow(context, *flow*);\n\n//get access to the Map that backs #{flowScope}\nMap<Object,Object> flowMap = flowHandler.getCurrentFlowScope();  \n```", "```java\npublic class CustomFlowHandlerFactory extends FlowHandlerFactoryWrapper {\n\n  private FlowHandlerFactory flowHandlerFactory;\n\n  public CustomFlowHandlerFactory(){}\n\n  public CustomFlowHandlerFactory(FlowHandlerFactory flowHandlerFactory){\n    this.flowHandlerFactory = flowHandlerFactory;\n  }\n\n  @Override\n  public FlowHandler createFlowHandler(FacesContext context){\n    FlowHandler customFlowHandler = new CustomFlowHandler(getWrapped().createFlowHandler(context));\n    return customFlowHandler;\n  }\n\n  @Override\n  public FlowHandlerFactory getWrapped() {\n    return this.flowHandlerFactory;\n  }    \n}\n```", "```java\n<factory>\n  <flow-handler-factory>\n    book.beans.CustomFlowHandlerFactory\n  </flow-handler-factory>\n</factory>\n```", "```java\npublic class CustomFlowHandler extends FlowHandler {\n\n  private FlowHandler flowHandler;\n\n  public CustomFlowHandler() {}\n\n  public CustomFlowHandler(FlowHandler flowHandler) {\n    this.flowHandler = flowHandler;\n  }\n\n  ...\n  //Overrided methods\n  ...\n\n}\n```", "```java\n@Override\npublic void transition(FacesContext context, Flow sourceFlow, Flow targetFlow, FlowCallNode outboundCallNode, String toViewId) {\n  if ((sourceFlow != null) && (targetFlow != null)) {\n    if ((sourceFlow.getStartNodeId().equals(\"registration\")) && \n      (targetFlow.getStartNodeId().equals(\"schedule\"))) {\n\n      FlowCallNode flowCallNode = sourceFlow.getFlowCalls().get(\"callSchedule\");\n      Map<String, Parameter> outboundParameters = flowCallNode.getOutboundParameters();\n\n      CustomParameter playernameparamO = new CustomParameter(\"playernameparam\", \"#{registrationBean.playerName}\");\n      CustomParameter playersurnameparamO = new CustomParameter(\"playersurnameparam\", \"#{registrationBean.playerSurname}\");\n      CustomParameter playerregistrationcodeO = new CustomParameter(\"playerregistrationcode\",\"349CF0YO122\");\n\n      outboundParameters.put(\"playernameparam\", playernameparamO);\n      outboundParameters.put(\"playersurnameparam\", playersurnameparamO);\n      outboundParameters.put(\"playerregistrationcode\", playerregistrationcodeO);\n    }\n  }\n  flowHandler.transition(context, sourceFlow, targetFlow, outboundCallNode, toViewId);\n}\n```", "```java\nMap<String, Parameter> inboundParameters = targetFlow.getInboundParameters();\n```", "```java\npublic class CustomParameter extends Parameter {\n\n  private String name;\n  private String value;\n\n  public CustomParameter(String name, String value) {\n    this.name = name;\n    this.value = value;\n  }\n\n  @Override\n  public String getName() {\n    return name;\n  }\n\n  @Override\n  public ValueExpression getValue() {\n    return createValueExpression(value, String.class);\n  }\n\n  private ValueExpression createValueExpression(String exp, Class<?> cls) {\n    FacesContext facesContext = FacesContext.getCurrentInstance();\n    ELContext elContext = facesContext.getELContext();\n    return facesContext.getApplication().getExpressionFactory().\n    createValueExpression(elContext, exp, cls);\n  }\n}\n```", "```java\nimport javax.enterprise.context.Dependent;\nimport javax.inject.Named;\n\n@Named\n@Dependent\npublic class PlayersBean {\n  ...\n}\n```", "```java\npublic class CustomScope extends ConcurrentHashMap<String, Object> {\n\n  public static final String SCOPE = \"CUSTOM_SCOPE\";\n\n  public CustomScope(){\n    super();\n  }\n\n  public void scopeCreated(final FacesContext ctx) {\n\n    ScopeContext context = new ScopeContext(SCOPE, this);\n    ctx.getApplication().publishEvent(ctx, PostConstructCustomScopeEvent.class, context);\n    }\n\n  public void scopeDestroyed(final FacesContext ctx) {\n\n    ScopeContext context = new ScopeContext(SCOPE,this);\n    ctx.getApplication().publishEvent(ctx, PreDestroyCustomScopeEvent.class, context);\n  } \n}\n```", "```java\nimport javax.faces.bean.CustomScoped;\nimport javax.faces.bean.ManagedBean;\n\n@ManagedBean\n@CustomScoped(\"#{CUSTOM_SCOPE}\")\npublic class SponsoredLinksBean {\n  ...\n}\n```", "```java\npublic class CustomScopeResolver extends ELResolver {\n\n  private static final Logger logger = Logger.getLogger(CustomScopeResolver.class.getName());\n\n  @Override\n  public Object getValue(ELContext context, Object base, Object property) {\n\n    logger.log(Level.INFO, \"Get Value property : {0}\", property);\n\n    if (property == null) {\n      String message = MessageUtils.getExceptionMessageString(MessageUtils.NULL_PARAMETERS_ERROR_MESSAGE_ID, \"property\");\n      throw new PropertyNotFoundException(message);\n    }\n\n    FacesContext facesContext = (FacesContext) context.getContext(FacesContext.class);\n\n    if (base == null) {\n      Map<String, Object> applicationMap = facesContext.getExternalContext().getApplicationMap();\n      CustomScope scope = (CustomScope) applicationMap.get(CustomScope.SCOPE);\n\n      if (CustomScope.SCOPE.equals(property)) {\n        logger.log(Level.INFO, \"Found request | base={0} property={1}\", new Object[]{base, property});\n        context.setPropertyResolved(true);\n        return scope;\n      } else {\n        logger.log(Level.INFO, \"Search request | base={0} property={1}\", new Object[]{base, property});\n        if (scope != null) {\n          Object value = scope.get(property.toString());\n          if (value != null) {\n            logger.log(Level.INFO, \"Found request | base={0} property={1}\", new Object[]{base, property});\n            context.setPropertyResolved(true);\n          }else {\n            logger.log(Level.INFO, \"Not found request | base={0} property={1}\", new Object[]{base, property});\n            context.setPropertyResolved(false);\n          }\n          return value;\n        } else {\n          return null;\n        }\n      }\n    }\n\n      if (base instanceof CustomScope) {\n\n        CustomScope baseCustomScope = (CustomScope) base;\n          Object value = baseCustomScope.get(property.toString());\n        logger.log(Level.INFO, \"Search request | base={0} property={1}\", new Object[]{base, property});\n\n        if (value != null) {\n          logger.log(Level.INFO, \"Found request | base={0} property={1}\", new Object[]{base, property});\n          context.setPropertyResolved(true);\n        } else {\n          logger.log(Level.INFO, \"Not found request | base={0} property={1}\", new Object[]{base, property});\n          context.setPropertyResolved(false);\n        }\n\n      return value;\n    }\n\n    return null;\n  }\n\n  @Override\n  public Class<?> getType(ELContext context, Object base, Object property) {\n    return Object.class;\n  }\n\n  @Override\n  public void setValue(ELContext context, Object base, Object property, Object value) {\n\n    if (base != null) {\n      return;\n    }\n\n    context.setPropertyResolved(false);\n\n    if (property == null) {\n      String message = MessageUtils.getExceptionMessageString(MessageUtils.NULL_PARAMETERS_ERROR_MESSAGE_ID, \"property\");\n      throw new PropertyNotFoundException(message);\n    }\n\n    if (CustomScope.SCOPE.equals(property)) {\n      throw new PropertyNotWritableException((String) property);\n    }\n  }\n\n  @Override\n  public boolean isReadOnly(ELContext context, Object base, Object property) {\n    return true;\n  }\n\n  @Override\n  public Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context, Object base) {\n    return null;\n  }\n\n  @Override\n  public Class<?> getCommonPropertyType(ELContext context, Object base) {\n    if (base != null) {\n      return null;\n    }\n    return String.class;\n  }\n}\n```", "```java\n<el-resolver>book.beans.CustomScopeResolver</el-resolver>\n```", "```java\n<h:commandButton value=\"START\">\n  <f:actionListener type=\"book.beans.CreateCustomScope\" />\n</h:commandButton>\n```", "```java\npublic class CreateCustomScope implements ActionListener {\n\n  private static final Logger logger = Logger.getLogger(CreateCustomScope.class.getName());\n\n  @Override\n  public void processAction(ActionEvent event) throws AbortProcessingException {\n\n    logger.log(Level.INFO, \"Creating custom scope ...\");\n\n    FacesContext context = FacesContext.getCurrentInstance();\n    Map<String, Object> applicationMap = context.getExternalContext().getApplicationMap();\n    CustomScope customScope = (CustomScope) applicationMap.get(CustomScope.SCOPE);\n\n    if (customScope == null) {\n      customScope = new CustomScope();\n      applicationMap.put(CustomScope.SCOPE, customScope);\n\n      customScope.scopeCreated(context);\n    } else {\n      logger.log(Level.INFO, \"Custom scope exists ...\");\n    }\n  }\n}\n```", "```java\n<h:commandButton value=\"STOP\">\n  <f:actionListener type=\"book.beans.DestroyCustomScope\" />\n</h:commandButton>\n```", "```java\npublic class DestroyCustomScope implements ActionListener {\n\n  private static final Logger logger = Logger.getLogger(DestroyCustomScope.class.getName());\n\n  @Override\n  public void processAction(ActionEvent event) throws AbortProcessingException {\n\n    logger.log(Level.INFO, \"Destroying custom scope ...\");\n\n    FacesContext context = FacesContext.getCurrentInstance();\n    Map<String, Object> applicationMap = context.getExternalContext().getApplicationMap();\n    CustomScope customScope = (CustomScope) applicationMap.get(CustomScope.SCOPE);\n\n    if (customScope != null) {             \n      customScope.scopeDestroyed(context);\n      applicationMap.remove(CustomScope.SCOPE);\n    } else {\n      logger.log(Level.INFO, \"Custom scope does not exists ...\");\n    }\n  }\n}\n```", "```java\npublic class CustomScopeNavigationHandler extends NavigationHandler {\n\n  private static final Logger logger = Logger.getLogger(CustomScopeNavigationHandler.class.getName());\n  private final NavigationHandler navigationHandler;\n\n  public CustomScopeNavigationHandler(NavigationHandler navigationHandler) {\n    this.navigationHandler = navigationHandler;\n  }\n\n  @Override\n  public void handleNavigation(FacesContext context, String fromAction, String outcome) {\n\n    if (outcome != null) {\n      if (outcome.equals(\"sponsored\")) {\n        logger.log(Level.INFO, \"Creating custom scope ...\");\n\n        Map<String, Object> applicationMap = context.getExternalContext().getApplicationMap();\n        CustomScope customScope = (CustomScope) applicationMap.get(CustomScope.SCOPE);\n\n        if (customScope == null) {\n          customScope = new CustomScope();\n          applicationMap.put(CustomScope.SCOPE, customScope);\n\n          customScope.scopeCreated(context);\n        } else {\n          logger.log(Level.INFO, \"Custom scope exists ...\");\n        }\n      } else {\n        logger.log(Level.INFO, \"Destroying custom scope ...\");\n\n        Map<String, Object> applicationMap = context.getExternalContext().getApplicationMap();\n        CustomScope customScope = (CustomScope) applicationMap.get(CustomScope.SCOPE);\n\n        if (customScope != null) {\n          customScope.scopeDestroyed(context);\n          applicationMap.remove(CustomScope.SCOPE);\n        } else {\n          logger.log(Level.INFO, \"Custom scope does not exist\");\n        }\n      } \n    }\n\n    navigationHandler.handleNavigation(context, fromAction, outcome);\n  }\n}\n```", "```java\n<navigation-handler>\n  book.beans.CustomScopeNavigationHandler\n</navigation-handler>\n```", "```java\npublic class CustomScopeNavigationHandler extends NavigationHandlerWrapper {\n\n  private static final Logger logger = Logger.getLogger(CustomScopeNavigationHandler.class.getName());\n  private final NavigationHandler navigationHandler;\n\n  public CustomScopeNavigationHandler(NavigationHandler navigationHandler){         \n    this.navigationHandler = navigationHandler;\n  }   \n\n @Override\n  public void handleNavigation(FacesContext context, String fromAction, String outcome) {\n\n    if (outcome != null) {\n      if (outcome.equals(\"sponsored\")) {\n        logger.log(Level.INFO, \"Creating custom scope ...\");\n\n        Map<String, Object> applicationMap = context.getExternalContext().getApplicationMap();\n        CustomScope customScope = (CustomScope) applicationMap.get(CustomScope.SCOPE);\n\n        if (customScope == null) {\n          customScope = new CustomScope();\n          applicationMap.put(CustomScope.SCOPE, customScope);\n\n          customScope.scopeCreated(context);\n        } else {\n          logger.log(Level.INFO, \"Custom scope exists ...\");\n        }\n      } else {\n        logger.log(Level.INFO, \"Destroying custom scope ...\");\n\n        Map<String, Object> applicationMap = context.getExternalContext().getApplicationMap();\n        CustomScope customScope = (CustomScope) applicationMap.get(CustomScope.SCOPE);\n\n        if (customScope != null) {\n          customScope.scopeDestroyed(context);\n          applicationMap.remove(CustomScope.SCOPE);\n        } else {\n          logger.log(Level.INFO, \"Custom scope does not exist\");\n        }\n      }\n    }\n\n    getWrapped().handleNavigation(context, fromAction, outcome);\n  }\n\n  @Override\n  public NavigationHandler getWrapped() {\n    return navigationHandler;\n  }\n}\n```", "```java\n@ManagedBean(eager=true)\n@ApplicationScoped\n```"]