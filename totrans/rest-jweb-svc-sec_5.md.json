["```java\nmvn archetype:generate -DgroupId=com.packtpub -DartifactId=signatures -DarchetypeArtifactId=webapp-javaee6 -DarchetypeGroupId=org.codehaus.mojo.archetypes\n\n```", "```java\nkeytool -genkeypair -alias demo._domainKey.packtpub.com -keyalg RSA -keysize 1024 -keystore demo.jks\n\n```", "```java\n<repositories>\n  <repository>\n    <id>jboss</id>\n    <url>http://repository.jboss.org/maven2</url>\n  </repository>\n</repositories>\n```", "```java\n  <dependencies>\n    <dependency>\n      <groupId>org.jboss.resteasy</groupId>\n      <artifactId>resteasy-jaxrs</artifactId>\n      <version>3.0.6.Final</version>\n    </dependency>\n    <dependency>\n      <groupId>org.jboss.resteasy</groupId>\n      <artifactId>resteasy-crypto</artifactId>\n      <version>3.0.6.Final</version>\n    </dependency>\n  </dependencies>\n```", "```java\n    <dependency>\n      <groupId>javax</groupId>\n      <artifactId>javaee-web-api</artifactId>\n      <version>6.0</version>\n      <scope>provided</scope>\n    </dependency>\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n ...\n  -->\n\n<module  name=\"org.apache.httpcomponents\">\n    <properties>\n        <property name=\"jboss.api\" value=\"private\"/>\n    </properties>\n\n    <resources>\n <resource-root path=\"httpclient-4.2.1.jar\"/>\n <resource-root path=\"httpcore-4.2.1.jar\"/>\n        <resource-root path=\"httpmime-4.1.2.jar\"/>\n        <!-- Insert resources here -->\n    </resources>\n\n    <dependencies>\n        <module name=\"javax.api\"/>\n        <module name=\"org.apache.commons.codec\"/>\n        <module name=\"org.apache.commons.logging\"/>\n        <module name=\"org.apache.james.mime4j\"/>\n    </dependencies>\n</module>\n```", "```java\n  @POST\n  @Produces(\"text/plain\")\n @Signed(selector = \"demo\", domain = \"packtpub.com\")\n  public String sign(String input) {\n    System.out.println(\"Aplyng signature \" + input);\n    return \"signed \" + input;\n  }\n```", "```java\nimport javax.ws.rs.Consumes;\nimport javax.ws.rs.POST;\nimport javax.ws.rs.Path;\n\nimport org.jboss.resteasy.annotations.security.doseta.Signed;\n\n@Path(\"/signed\")\npublic class SignedService {\n...\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app version=\"3.0\" \n\n  xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee \n  http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\">\n\n  <display-name>signatures</display-name>\n\n</web-app>\n```", "```java\n<context-param>\n<param-name>resteasy.resources</param-name>\n<param-value>com.packtpub.resteasy.services.SignedResource</param-value>\n</context-param>\n```", "```java\n<context-param>\n<param-name>resteasy.doseta.keystore.classpath</param-name>\n<param-value>demo.jks</param-value>\n</context-param>\n```", "```java\n  <context-param>\n    <param-name>resteasy.doseta.keystore.password</param-name>\n    <param-value>changeit</param-value>\n  </context-param>\n```", "```java\n<context-param>\n  <param-name>resteasy.context.objects</param-name>\n  <param-value>org.jboss.resteasy.security.doseta.KeyRepository : org.jboss.resteasy.security.doseta.ConfiguredDosetaKeyRepository</param-value>\n</context-param>\n```", "```java\n  <servlet>\n    <servlet-name>Resteasy</servlet-name>\n    <servlet-class>org.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher</servlet-class>\n  </servlet>\n  <servlet-mapping>\n    <servlet-name>Resteasy</servlet-name>\n    <url-pattern>/*</url-pattern>\n  </servlet-mapping>\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app version=\"3.0\" \n\n  xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee \n  http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\">\n<web-app>\n  <display-name>signatures</display-name>\n  <context-param>\n    <param-name>resteasy.resources</param-name>\n    <param-value>com.packtpub.resteasy.services.SignedService</param-value>\n  </context-param>\n  <context-param>\n    <param-name>resteasy.doseta.keystore.classpath</param-name>\n    <param-value>demo.jks</param-value>\n  </context-param>\n  <context-param>\n    <param-name>resteasy.doseta.keystore.password</param-name>\n    <param-value>changeit</param-value>\n  </context-param>\n  <context-param>\n    <param-name>resteasy.context.objects</param-name>\n    <param-value>org.jboss.resteasy.security.doseta.KeyRepository : org.jboss.resteasy.security.doseta.ConfiguredDosetaKeyRepository</param-value>\n  </context-param>\n  <servlet>\n    <servlet-name>Resteasy</servlet-name>\n    <servlet-class>org.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher</servlet-class>\n  </servlet>\n  <servlet-mapping>\n    <servlet-name>Resteasy</servlet-name>\n    <url-pattern>/*</url-pattern>\n  </servlet-mapping>\n</web-app>\n```", "```java\nmvn install\n\n```", "```java\nDKIM-Signature: d=packtpub.com;s=demo;v=1;a=rsa-sha256;c=simple/simple;bh=lc+ECoAqpQCB4ItWLUomBv34m3F9G0pkIBAI8Z/yWcQ=;b=AlJY6iiCtdCnHrJa+Of9aRgBXeIp7V7cEG7eyUp0CRbD9wjFodbQGRQjhfwDgd1WIBzVLIWelTdI85BlGl3ACNcMLBjPv2iBBjo+78e/9HcYs81YNlPRAAj6jzymA/+jkmpTVcthWaEEyoPJJBAI5FvP33zH7etfkFaGX+bwer0=\n```", "```java\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>4.8.2</version>\n      <scope>test</scope>\n    </dependency>\n```", "```java\nimport javax.ws.rs.client.Entity; \nimport javax.ws.rs.client.Invocation; \nimport javax.ws.rs.client.WebTarget; \nimport javax.ws.rs.core.Response;  \nimport junit.framework.Assert;  \nimport org.jboss.resteasy.client.jaxrs.ResteasyClient; \nimport org.jboss.resteasy.client.jaxrs.ResteasyClientBuilder; \nimport org.jboss.resteasy.security.doseta.DosetaKeyRepository; \nimport org.jboss.resteasy.security.doseta.Verification; \nimport org.jboss.resteasy.security.doseta.Verifier; \nimport org.junit.Test;\n\npublic class SignedServiceTest {\n\n  @Test\n  public void testVerification() {\n    // Keys repository\n    DosetaKeyRepository repository = new DosetaKeyRepository();\n    repository.setKeyStorePath(\"demo.jks\");\n    repository.setKeyStorePassword(\"changeit\");\n    repository.start();\n    // Building the client\n  ResteasyClient client = new ResteasyClientBuilder().build();\n    Verifier verifier = new Verifier();\n    Verification verification = verifier.addNew();\n    verification.setRepository(repository);\n    WebTarget target = client\n             .target(\n      \"http://localhost:8080/signatures-1.0/signed\");\n    Invocation.Builder request = target.request();\n    request.property(Verifier.class.getName(), verifier);\n    // Invocation to RESTful web service\n    Response response = request.post(Entity.text(\"Rene\"));\n    // Status 200 OK\n    Assert.assertEquals(200, response.getStatus());\n    System.out.println(response.readEntity(String.class));\n    response.close();\n    client.close();\n  }\n}\n```", "```java\n  @POST\n  @Path(\"ram\")\n  @Signed(selector = \"demo\", domain = \"packtpub.com\")\n  @Consumes(\"text/plain\")\n  public String requestRam(int numberOfGB) {\n    return numberOfGB + \"-GB\";\n  }\n```", "```java\n@Verify\n@POST\n@Path(\"verifier\")\n@Produces(\"text/plain\")\npublic String processRequestRam (String input) {\n  int numberOfGbRequested = Integer.valueOf(input.split(\"-\")[0]);\n  if (numberOfGbRequested > 4) {\n    return \"deny\";\n  } else {\n    return \"accepted\";\n  }\n}\n```", "```java\n@POST\n@Signed(selector = \"demo\", domain = \"packtpub.com\")\n@Consumes(\"text/plain\")\npublic Response requestRAM(int numberOfGB) {\n  return Response.seeOther(\n    URI.create(\"/signed/\" + \"GB:\" + numberOfGB)).build();\n}\n```", "```java\nDKIM-Signature: d=packtpub.com;s=demo;v=1;a=rsa-sha256;c=simple/simple;bh=uA6n2udZlWdx+ouwCEeeyM6Q48KH0EWa2MnfBwMP+vM=;b=T0drw9QWud7rs1w//5384hs8GCatJKzmljIhgiTrHWdVx/IhCVl915yycchN+hQ+ljUaS6bPtLYo/ZNspcv2LtAe/tKTPpng4RWlr52k0TqnV3XX2KvJ7kBOpEU2Rg6f6lBOJT5v+o0iV05ObagfzKDfQ9o09WpZjQKcBG+/xvE=\n\nRESPONSE: 8 GB\n```", "```java\n@Verify(identifierName = \"d\", identifierValue = \"packtpub.com\")\n@POST\n@Path(\"verifier\")\n@Produces(\"text/plain\")\npublic String processRequestRam(String input) {\n  int numberOfGbRequested = Integer.valueOf(input.split(\"-\")[0]);\n  if (numberOfGbRequested > 4) {\n    return \"deny\";\n  } else {\n    return \"accepted\";\n  }\n}\n```", "```java\n@Verify(identifierName = \"d\", identifierValue = \"itpacktpub.com\")\n@POST\n@Path(\"verifier\")\n@Produces(\"text/plain\")\npublic String processRequestRam(String input) {\n  int numberOfGbRequested = Integer.valueOf(input.split(\"-\")[0]);\n  if (numberOfGbRequested > 4) {\n    return \"deny\";\n  } else {\n    return \"accepted\";\n  }\n}\n```", "```java\n@Verify(identifierName = \"s\", identifierValue = \"demo\")\n@POST\n@Path(\"verifier\")\n@Produces(\"text/plain\")\npublic String processRequestRam(String input) {\n  int numberOfGbRequested = Integer.valueOf(input.split(\"-\")[0]);\n  if (numberOfGbRequested > 4) {\n    return \"deny\";\n  } else {\n    return \"accepted\";\n  }\n}â€©\n```", "```java\n@Verifications({ \n@Verify(identifierName = \"s\", identifierValue = \"demo\"),\n@Verify(identifierName = \"d\", identifierValue = \"packtpub.com\") })\n@POST\n@Path(\"verifier\")\n@Produces(\"text/plain\")\npublic String processRequestRam(String input) {\n  int numberOfGbRequested = Integer.valueOf(input.split(\"-\")[0]);\n  if (numberOfGbRequested > 4) {\n    return \"deny\";\n  } else {\n    return \"accepted\";\n  }\n}\n```", "```java\nmvn archetype:generate -DgroupId=com.packtpub -DartifactId=encryption -DarchetypeArtifactId=webapp-javaee6 -DarchetypeGroupId=org.codehaus.mojo.archetypes\n\n```", "```java\n  <dependencies>\n    <dependency>\n      <groupId>org.jboss.resteasy</groupId>\n      <artifactId>resteasy-jaxrs</artifactId>\n      <version>3.0.6.Final</version>\n      <scope>provided</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.jboss.resteasy</groupId>\n      <artifactId>resteasy-crypto</artifactId>\n      <version>3.0.6.Final</version>\n    </dependency>\n  </dependencies>\n```", "```java\npackage com.packtpub;\n\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\n\n@Path(\"/encrypted\")\npublic class EncryptedService {\n\n  @GET\n  public String gretting() {\n    return \"Hello world\";\n  }\n}\n```", "```java\npackage com.packtpub;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport javax.ws.rs.ApplicationPath;\nimport javax.ws.rs.core.Application;\n\n@ApplicationPath(\"/services\")\npublic class EncryptedApplication extends Application {\n\n  private Set<Object> resources = new HashSet<Object>();\n\n  public EncryptedApplication() throws Exception {\n    resources.add(new EncryptedService());\n  }\n\n  @Override\n  public Set<Object> getSingletons() {\n    return resources;\n  }\n}\n```", "```java\nkeytool -genkey -alias tomcat -keyalg RSA\n\n```", "```java\n<connector name=\"https\" protocol=\"HTTP/1.1\" scheme=\"https\" \nsocket-binding=\"https\" secure=\"true\">\n  <ssl/>\n</connector>\n```", "```java\nopenssl req -x509 -nodes -days 365 -newkey rsa:1024 -keyout demokey.pem -out democert.pem\n\n```", "```java\n@GET\npublic EnvelopedOutput gretting() throws Exception {\n  InputStream certPem = Thread.currentThread()\n                       .getContextClassLoader()\n                       .getResourceAsStream(\"democert.pem\");\n  X509Certificate myX509Certificate = PemUtils.\n      decodeCertificate(certPem)\n  EnvelopedOutput output = new \n    EnvelopedOutput(\"Hello world\", MediaType.TEXT_PLAIN);\n  output.setCertificate(myX509Certificate);\n  return output;\n}\n```", "```java\n  <dependencies>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>4.8.1</version>\n    </dependency>\n    <dependency>\n      <groupId>org.jboss.resteasy</groupId>\n      <artifactId>resteasy-jaxrs</artifactId>\n      <version>3.0.6.Final</version>\n      <scope>provided</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.jboss.resteasy</groupId>\n      <artifactId>resteasy-jaxb-provider</artifactId>\n      <version>3.0.6.Final</version>\n      <scope>provided</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.jboss.resteasy</groupId>\n      <artifactId>resteasy-crypto</artifactId>\n      <version>3.0.6.Final</version>\n    </dependency>\n  </dependencies>\n```", "```java\n<plugin>\n  <groupId>org.apache.maven.plugins</groupId>\n  <artifactId>maven-war-plugin</artifactId>\n  <configuration>\n    <failOnMissingWebXml>false</failOnMissingWebXml>\n    <archive>\n      <manifestEntries>\n        <Dependencies>org.jboss.resteasy.resteasy-jaxb-provider export, org.jboss.resteasy.resteasy-jaxrs export</Dependencies>\n      </manifestEntries>\n    </archive>\n  </configuration>\n</plugin>\n```", "```java\npackage com.packtpub;\n\nimport java.security.PrivateKey;\nimport java.security.cert.X509Certificate;\n\nimport javax.ws.rs.client.Client;\nimport javax.ws.rs.client.WebTarget;\n\nimport junit.framework.Assert;\n\nimport org.jboss.resteasy.client.jaxrs.ResteasyClientBuilder;\nimport org.jboss.resteasy.security.PemUtils;\nimport org.jboss.resteasy.security.smime.EnvelopedInput;\nimport org.junit.Test;\n\npublic class EncryptedServiceTest {\n\n  @Test\n  public void testEncryptedGet() throws Exception {\n    // LOADING THE CERTIFICATE\n    X509Certificate myX509Certificate = PemUtils.decodeCertificate(\n        Thread\n        .currentThread().getContextClassLoader()\n        .getResourceAsStream(\"democert.pem\"));\n    // LOADING THE KEY\n    PrivateKey myPrivateKey = PemUtils.decodePrivateKey(Thread\n        .currentThread().getContextClassLoader()\n        .getResourceAsStream(\"demokey.pem\"));\n    // CREATING A CLIENT FOR THE WEB SERVICE\n    Client client = new ResteasyClientBuilder().build();\n    WebTarget target = client.target(\n      \"http://localhost:8080/encryption-1.0/services/encrypted\"\n    );\n    // RETRIEVING THE RESULT OF METHOD EXECUTION\n    EnvelopedInput<?> input = target.request().\n            get(EnvelopedInput.class);\n    Assert.assertEquals(\"Hello world\",\n        input.getEntity(String.class, \n        myPrivateKey, myX509Certificate));\n    client.close();\n  }\n\n}\n```"]