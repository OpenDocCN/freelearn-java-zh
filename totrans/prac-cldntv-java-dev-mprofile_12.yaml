- en: '*Chapter 9*: Deployment and Day 2 Operations'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we've seen many code snippets and screenshots of our example application,
    the **IBM Stock Trader**. Now, let's learn how to deploy it to your own **OpenShift
    Container Platform** cluster or any **Kubernetes** platform of your choice. As
    important as getting it running is, it is also very important to learn how to
    maintain it and tune it to meet your needs.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike many *Hello World* samples that you might see on the internet, that either
    have no operator at all (just having you manually apply `.yaml` files to install),
    or they perhaps have a very simple operator per microservice, the **IBM Stock
    Trader** example has a **composite operator** that not only installs all of the
    microservices but also configures the connectivity to all prerequisite services,
    including all the credentials used for authentication.
  prefs: []
  type: TYPE_NORMAL
- en: This composite operator also provides an advanced form `.yaml` file for the
    custom resource defined by the operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the role of operators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the operator via the OpenShift console
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying the application via the operator form UI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying the application via the command line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Day 2 operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will be familiar with using the operator to
    deploy the application, either from the UI or the CLI, and how to use it to maintain
    the application going forward.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To use the operator as described in this section, you will need to have the
    following tools installed:'
  prefs: []
  type: TYPE_NORMAL
- en: A Git client – [https://git-scm.com](https://git-scm.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Kubernetes client (`kubectl`) – https://kubernetes.io/docs/tasks/tools/#kubectl
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition, you will need to have a Kubernetes cluster available. For the CLI
    parts of this chapter, you can use any Kubernetes distribution you prefer. But
    to try out the UI parts of this chapter, the Kubernetes distribution will need
    to be OpenShift Container Platform (OCP), since the screenshots are all from the
    OpenShift console. Ask your administrator how to give `kubectl` access to your
    cluster, and for the URL of the console if using OCP.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the role of operators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before diving into the specifics of the IBM Stock Trader operator, let's step
    back for a bit and consider what operators do and why they are a good thing. To
    do so, it's important to recall from [*Chapter 7*](B17377_07_Final_SB_epub.xhtml#_idTextAnchor146),
    *MicroProfile Ecosystem with Open Liberty, Docker, and Kubernetes*, that Kubernetes
    defines a model where there are several built-in object types, such as Deployments,
    Services, Ingresses, ConfigMaps, and Secrets. In the true object-oriented philosophy,
    such objects not only have data but have behavior; it is the operators' job to
    participate in and guide the full **Create, Retrieve, Update, and Delete** (**CRUD**)
    life cycle of the objects they manage.
  prefs: []
  type: TYPE_NORMAL
- en: One key point is that Kubernetes not only has its built-in objects, but also
    has an extensibility model where vendors can add to that *vocabulary*, defining
    additional types of objects and how they should act in the Kubernetes environment.
    Kubernetes calls this a **CustomResourceDefinition** (**CRD**). A CRD is essentially
    a schema of what fields describe the configuration for a particular instance of
    the **CustomResource** (**CR**). I often think of it as a *CR* is to its *CRD*
    as *XML* is to its *XSD*.
  prefs: []
  type: TYPE_NORMAL
- en: Before the rise of operators, an earlier technology known as `yaml` file to
    each Kubernetes built-in object needed by an application, with some ability to
    parameterize the fields in each `yaml` file. The Stock Trader application itself
    had a Helm chart (at [https://github.com/IBMStockTrader/stocktrader-helm](https://github.com/IBMStockTrader/stocktrader-helm)),
    before the arrival of OpenShift version 4, which was a pretty big redesign of
    the OpenShift architecture with operators at the heart of it all.
  prefs: []
  type: TYPE_NORMAL
- en: Though Helm worked, it was a limited technology, in that it did nothing to help
    with running the applications once they were installed. An operator, on the other
    hand, is always listening for, and ready to react to, any change to a CR of the
    CRD type it operates upon. Operators also can offer *day 2* operations, as we'll
    see later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: There are different ways to write an operator, one of which is to wrap a Helm
    chart. The operator for the Stock Trader application is one such Helm-based operator.
    Take a look at (or clone) the [https://github.com/IBMStockTrader/stocktrader-operator](https://github.com/IBMStockTrader/stocktrader-operator)
    repo to browse its source code, to open issues, or to submit **pull requests**
    (**PRs**) to improve the operator.
  prefs: []
  type: TYPE_NORMAL
- en: Another way of thinking about it is that operators expand the kinds of objects
    that Kubernetes knows how to manage; for example, one managing a CRD of the `PacktBook`
    type would enable commands such as `kubectl get PacktBooks` or `kubectl describe
    PacktBook microprofile`, in the same way, you would act upon built-in Kubernetes
    objects such as `Deployments` or `Services`.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's learn how to use the operator for our Stock Trader application. We'll
    start with the OpenShift console UI approach, and then will look at how to use
    it from a CLI as well.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the operator via the OpenShift console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As a quick reminder from [*Chapter 3*](B17377_03_Final_SB_epub.xhtml#_idTextAnchor049),
    *Introducing the IBM Stock Trader Cloud-Native Application*, the **IBM Stock Trader**
    application is comprised of about a dozen microservices (many of which are optional),
    and about the same number of prerequisite resources, such as databases and messaging
    systems. The composite operator guides you through providing all of the settings
    for each of those microservices and for configuring their connectivity to those
    various backend resources, as we can see here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.1 – Architectural diagram'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17377_09_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.1 – Architectural diagram
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, there are a lot of parts that need to be configured for everything
    to work. The operator guides us through providing such configuration information
    for each piece (though it does *NOT* actually install the backend resources –
    it just asks for the endpoint and credential details to connect to pre-existing
    resources, which could be running in your cluster, or accessed from elsewhere,
    such as a **DB2-as-a-Service** (**DB2aaS**) out in the cloud). In the next two
    sections, we'll learn about OperatorHub and how to install the operator in our
    cluster.
  prefs: []
  type: TYPE_NORMAL
- en: OperatorHub
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **OpenShift** 4.x console includes a catalog of operators called **OperatorHub**.
    There are several built-in catalog sources, and administrators can plug in additional
    sources to make more operators appear in the catalog that they have purchased
    from vendors (such as the catalog sources for the various IBM Cloud Paks) or that
    their own developers have created. Let''s take a look at the **OperatorHub** portion
    of the OpenShift console by clicking on **Operators** | **OperatorHub** in the
    left navigation menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.2 – OperatorHub'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17377_09_02_new.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.2 – OperatorHub
  prefs: []
  type: TYPE_NORMAL
- en: 'Here we can see we have 460 operators available, 5 of which are currently installed
    in our cluster. Let''s learn how to install our own catalog source so that we
    can cause our own operator(s) to show up here:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by clicking on **Administration** | **Cluster Settings** in the
    left navigation menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then we choose the `Hub`, in the filter field, and the list will filter to just
    entries containing that string):![Figure 9.3 – Cluster Settings
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17377_09_03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.3 – Cluster Settings
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Then, on the resulting page, click on the **Sources** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You''ll see that four sources are pre-configured (all from Red Hat), and the
    number of operators contributed by each:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.4 – Catalog Sources'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B17377_09_04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.4 – Catalog Sources
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If your administrator has set up your cluster to show operators beyond the default
    ones, you may see more than the initial four.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Then just click on the **Create Catalog Source** button to provide the details
    for our new source containing the operator for the **IBM Stock Trader** application:![Figure
    9.5 – Details for the IBM Stock Trader catalog source
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17377_09_05.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.5 – Details for the IBM Stock Trader catalog source
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We chose to make it a **Cluster-wide catalog source** so that it is available
    regardless of what namespace you are using in your cluster. If you prefer (or
    only have authority in a particular namespace), you could instead choose **Namespace
    catalog source**. Note that if you are in a really locked-down environment using
    an ID with limited security privileges, you might need to ask an administrator
    to perform this action for you.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can type whatever values you want in the first three fields (I chose my
    team's name, `Cloud Engagement Hub`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The final field, specifying where to find the Docker image for the catalog source,
    is the most important and needs to be set to `docker.io/ibmstocktrader/stocktrader-operator-catalog:v0.2.0`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Of course, you could clone the `IBMStockTrader/stocktrader-operator` GitHub
    repository and build your own image (per the instructions at [https://github.com/IBMStockTrader/stocktrader-operator/blob/master/bundle/README.md](https://github.com/IBMStockTrader/stocktrader-operator/blob/master/bundle/README.md))
    and push it to your own image registry and specify that here, but to keep things
    simple, we're using the pre-built version we keep hosted in **Docker Hub** for
    convenience.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once you click the **Create** button, it will return you to the list of catalog
    sources.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At first, there will just be a dash for the number of operators from that new
    source, until OpenShift is able to download the specified Docker container image
    and parse its contents. Once it does, it will update to show the correct number
    of operators, which is just one in our case, as shown here:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.6 – Details for the IBM Stock Trader catalog source'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B17377_09_06_new.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.6 – Details for the IBM Stock Trader catalog source
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now if you return to the `stock`, in the filter field, and then it will only
    show the ones containing that string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.7 – The IBM Stock Trader operator in our cluster''s OperatorHub'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17377_09_07.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.7 – The IBM Stock Trader operator in our cluster's OperatorHub
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You have now made the operator for the IBM Stock Trader application
    available in the OperatorHub catalog. In the next section, we'll look at how to
    install the operator.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the operator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we''ve made our operator available in our cluster''s catalog, let''s
    make use of it:'
  prefs: []
  type: TYPE_NORMAL
- en: Just click on the tile for the operator. Doing so will show further details
    about the operator that we just made available in the previous section:![Figure
    9.8 – The IBM Stock Trader operator info page
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17377_09_08.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.8 – The IBM Stock Trader operator info page
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As you can see, this shows some basic information about the operator, including
    its readme file. Nothing needs to be done in this dialog – just click on the **Install**
    button.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.9 – The IBM Stock Trader operator subscription page'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B17377_09_09.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.9 – The IBM Stock Trader operator subscription page
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Here we see information about how the operator will behave in our cluster; for
    example, we can see that, like all OperatorHub-integrated operators that you install
    to work on all namespaces in your cluster, the actual namespace where the operator
    will run is called **openshift-operators**. Note that the act of *installing*
    an operator is technically about making a *subscription* to that operator (more
    on that in the *Deploying the application via the CLI* section, next).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once you click the **Install** button, you'll briefly see a dialog saying it
    is being installed (until its pod starts and passes its readiness check), and
    then it will tell you whether it has been successfully installed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.10 – The IBM Stock Trader operator is installed'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17377_09_10.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.10 – The IBM Stock Trader operator is installed
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You have now installed the operator for the **IBM Stock Trader**
    application. In the next section, we'll look at how to use that operator to deploy
    the application.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying the application via the operator form UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To deploy the application, we will follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **View Operator** button shown in *Figure 9.10*. You will be taken
    to a page showing you information about the operator, which of course looks very
    similar to what we saw when we first clicked on the operator in **OperatorHub**.![Figure
    9.11 – The IBM Stock Trader operator Details page
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17377_09_11.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.11 – The IBM Stock Trader operator Details page
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We can use the **Create Instance** link shown in *Figure 9.11* to launch into
    the dialog for installing an instance of our **IBM Stock Trader** application:![Figure
    9.12 – The IBM Stock Trader operator form UI
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17377_09_12.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.12 – The IBM Stock Trader operator form UI
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, we will provide a `microprofile` as the instance name to use here, then
    the portfolio deployment that gets created will be named `microprofile-portfolio`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Since this is a composite operator – that is, one that installs the entire
    application, not one for just a particular microservice – it uses expandable/collapsible
    sections to separate the configuration settings for each microservice. It also
    has such a section for each service it depends upon, such as a **Database** section
    and an **IBM MQ Settings** section. And at the very top is a **Global** section,
    for settings that apply to all of the chosen microservices. Note that most settings
    have good, reasonable defaults and only need adjusting in special scenarios. The
    one big exception to that is the **Database** section, so let''s expand it and
    see what we need to fill in there, as this is the one mandatory prerequisite service
    that we can''t run without:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.13 – The Database section of the IBM Stock Trader operator form
    UI'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B17377_09_13.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.13 – The Database section of the IBM Stock Trader operator form UI
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As you can see, standard *endpoint* type information must be provided, such
    as the **Database Host name (or IP address)** of the database server and the **Database
    Port Number** used to connect to it, as well as credential information needed
    to authenticate to it. Very similar information is requested for each of the later
    sections, such as for **Cloudant**, **ODM**, or **MQ**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s expand one of the optional microservices, such as the **Account microservice**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.14 – The Account microservice section of the IBM Stock Trader operator
    form UI'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17377_09_14.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.14 – The Account microservice section of the IBM Stock Trader operator
    form UI
  prefs: []
  type: TYPE_NORMAL
- en: Note the little true/false switch at the top, where you specify whether you
    want to enable this optional microservice. The rest of the settings in that section
    will only apply if you choose to enable this microservice. Note also the section
    for specifying where the Docker container image is found for this microservice;
    by default, it will be prefilled with the location in *Docker Hub* where we host
    pre-built versions of each microservice for convenience, though you can type your
    own value here if you have built the microservice yourself (as described in the
    previous chapter) and pushed it to your own image registry.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that the first time or two you install the application, having the form
    UI guide you through everything is very helpful, but over time this can get a
    bit old, filling in each value for each microservice and each prerequisite service
    they depend upon. Therefore, there is also the option to simply provide the answers
    to all of these questions in a `.yaml` file, which you can just drag and drop
    into the second tab of this form (**YAML View**):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.15 – The YAML View tab of the IBM Stock Trader operator form UI'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17377_09_15.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.15 – The YAML View tab of the IBM Stock Trader operator form UI
  prefs: []
  type: TYPE_NORMAL
- en: 'Whichever way you provide the input, the same end result will occur, once you
    click the **Create** button at the bottom of the page. You should see your new
    instance appear in the list of instances of the **IBM Stock Trader** application,
    with the **Name** you provided:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.16 – The StockTraders section of the IBM Stock Trader operator UI'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17377_09_16.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.16 – The **StockTraders** section of the IBM Stock Trader operator
    UI
  prefs: []
  type: TYPE_NORMAL
- en: 'If we click on that name, we will see info about our newly deployed instance.
    There are several tabs; the **Resources** tab is especially useful, to see which
    of the Kubernetes resources discussed in [*Chapter 7*](B17377_07_Final_SB_epub.xhtml#_idTextAnchor146),
    *MicroProfile Ecosystem with Open Liberty, Docker, and Kubernetes*, gets created
    by the operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.17 – The Resources tab of the IBM Stock Trader operator UI'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17377_09_17.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.17 – The Resources tab of the IBM Stock Trader operator UI
  prefs: []
  type: TYPE_NORMAL
- en: 'How much appears here depends on which microservices you chose to enable. Since
    it can be a long list, there is a **Filter** button near the top left, which can
    be used to filter the list down to just certain types of Kubernetes objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.18 – The Filter dialog of the IBM Stock Trader operator form UI'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17377_09_18.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.18 – The Filter dialog of the IBM Stock Trader operator form UI
  prefs: []
  type: TYPE_NORMAL
- en: 'Here we can see that in this instance, we have 8 Deployments (microservices),
    7 Services (one of the microservices is an MDB with no HTTP endpoint, so it has
    no Service), 1 ConfigMap, 1 Secret, 3 Routes, and 2 HorizontalPodAutoscalers.
    If we had enabled other options, such as the **Istio** true/false setting in the
    **Global** section of our form/yaml, then we''d have seen additional items such
    as **Gateway**, **VirtualService**, **DestinationRule**, and **NetworkPolicy**
    as non-zero. We can also view resources as usual in the OpenShift console by clicking
    on **Workloads** | **Pods** to see all of the running pods:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.19 – The pods for each microservice comprising the IBM Stock Trader
    application'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17377_09_19.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.19 – The pods for each microservice comprising the IBM Stock Trader
    application
  prefs: []
  type: TYPE_NORMAL
- en: We've now seen how to install the IBM Stock Trader application via the OpenShift
    console. In the next section, we'll look at how we would use the operator via
    the `kubectl` **Command-Line Interface** (**CLI**) instead.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying the application via the CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sometimes you need to do things via an approach other than using a graphical
    user interface. Maybe you just prefer using a CLI. Or, perhaps you want to automate
    such work as steps in a **Continuous Integration / Continuous Deployment** (**CI
    / CD**) pipeline. Or, maybe you are using a Kubernetes distribution other than
    **Red Hat OpenShift Container Platform** (**OCP**), such as from one of the hyperscalers,
    such as **Amazon Web Services** (**AWS**) or **Microsoft Azure**. To deploy the
    application without the benefit of the OpenShift console, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: The first thing you'll need to do is to make sure that the `brew install operator-sdk`)
    by following the instructions at [https://olm.operatorframework.io/docs/getting-started/](https://olm.operatorframework.io/docs/getting-started/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`operator-sdk` is used to produce an operator such as the one for the IBM Stock
    Trader application. The exact command that generated the starting point for this
    operator was `operator-sdk init --plugins helm --group operators --kind StockTrader
    --domain ibm.com --version v1 --helm-chart ../stocktrader-helm/stocktrader-1.5.0.tgz`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The next step is to create the catalog source for the `.yaml` file with the
    following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The only value that really matters is the `image` field – you can specify anything
    you want for the other fields. Name the file whatever you want, such as `catalog-source.yaml`.
    Make sure you are logged in to your cluster from your terminal window and then
    run the command `kubectl apply -f catalog-source.yaml`. After a minute or so,
    the catalog source will be available, just like when done via the OpenShift console.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, you will install the operator via the catalog source. Create another
    `.yaml` file with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Name it whatever you want, such as `subscription.yaml`. Then, run `kubectl apply
    -f subscription.yaml`. Once this is complete, the operator will be installed and
    available.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The final step is to apply the yaml for the instance you want to create of the
    IBM Stock Trader application. As discussed in the *Understanding the role of operators*
    section, an operator defines a CRD – in this case, for an object of the `StockTrader`
    type – and here we are creating a CR of that type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The Stock Trader CR yaml has the same structure as what we saw in the OpenShift
    console; each expandable section maps to an indentation level in the .yaml file.
    For example, there''s a section for every microservice, and for each prerequisite
    service they depend upon. Here''s a snippet of an example `CR yaml`, most of which
    is cut out to avoid having many pages of yaml content:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Any field not specified in the yaml you pass will use its default value, so
    you really only need to fill in fields that you want to set to a non-default value.
    For a full example of a `Stock Trader CR yaml file`, you can either copy/paste
    what appears when you switch to the **YAML View** tab of the operator page (as
    we saw in *Figure 9.15*) or go look in GitHub at [https://github.com/IBMStockTrader/stocktrader-operator/blob/master/config/samples/operators_v1_stocktrader.yaml](https://github.com/IBMStockTrader/stocktrader-operator/blob/master/config/samples/operators_v1_stocktrader.yaml).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once you have your CR yaml file filled out, save it with whatever filename you
    prefer, such as `stock-trader.yaml`, and then deploying an instance of the IBM
    Stock Trader application is as simple as running `kubectl apply -f stock-trader.yaml`.
    This will take a couple of minutes to complete.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once it does, you can see which pods are running for the microservices you
    selected by running a simple `kubectl get pods` command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.20 – Console output'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17377_09_20.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.20 – Console output
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You have confirmed that you have deployed the IBM Stock Trader
    application, after creating and applying just three yaml files! Now that you've
    learned how to deploy the application, let's learn what we can do next via the
    operator.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding day 2 operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'People in the Kubernetes community often say that deployment is *day 1* and
    that the kinds of things you do to maintain the application afterward are *day
    2* operations. Some examples of *day 2* operations include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Scaling a given microservice up or down
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrading to a newer version of a microservice
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting a trace string to perform problem determination
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's look at each one of these in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Scaling a microservice
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the benefits of a microservices architecture is that you can independently
    scale each microservice. Rather than having to scale up all parts of a monolithic
    application at once, you can scale just the part that is experiencing the throughput
    or response time issues.
  prefs: []
  type: TYPE_NORMAL
- en: One thing to be aware of when using resources generated by an operator is that
    the operator itself *owns* those resources, and won't let you change them directly.
    For example, if you wanted to edit the Portfolio deployment to scale the number
    of pods, attempting to do so might momentarily appear to work, but in reality,
    the operator is constantly watching and will revert any resource that gets edited
    outside of its purview. There is a process called **reconciliation** that advanced
    operators can use to decide whether and how to merge the requested changes, but
    a simple Helm-based operator, like the one for Stock Trader, will just reject
    any attempt to directly edit one of the Kubernetes resources that it generated.
  prefs: []
  type: TYPE_NORMAL
- en: The proper way to make such a change is to edit the CR yaml for the instance
    of the Stock Trader deployment instead. You can do so either via the OpenShift
    console or from the CLI. If using the CLI, you can pick which text editor gets
    used, by setting the `KUBE_EDITOR` environment variable to whatever text-based
    editor you want. For example, if you develop on a Mac and prefer its `nano` editor
    to the old-fashioned `vi` editor, just issue the command `export KUBE_EDITOR=nano`.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, if you want to scale up your Portfolio deployment from one pod to two,
    you can simply run `kubectl edit StockTrader microprofile`, and that will load
    its current yaml into the specified editor, where you would go down to the `portfolio`
    section and change the value of its `replicas` field to `2`, save the file and
    exit, and that will cause the generated Portfolio deployment to be updated to
    have two pods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead of hardcoding the number of replicas, you can also enable `autoscale:
    true` to enable HPA, and Kubernetes will scale up the number of pods if the threshold
    is met, and will scale back down when activity subsides.'
  prefs: []
  type: TYPE_NORMAL
- en: Upgrading a microservice
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another change you might want to make to a deployed Stock Trader instance is
    to upgrade to a newer version of a given microservice. For example, if one of
    the developers built and pushed a new version of the Account microservice to your
    Docker image registry, you would use the operator to point at the new version.
    Again, you wouldn't directly edit the Account deployment, but would instead edit
    the `Stock Trader CR yaml file`, and then the operator would make the changes
    to the Account deployment on your behalf.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you had been using the `1.0.0` tag for the image for the Account microservice,
    and you wanted to move up to the `1.0.1` version, you would use the aforementioned
    approach as you did for scaling, but this time, when you get the CR yaml into
    your `nano` editor, you would go down to the `1.0.1`.  When you save `CR yaml`
    and exit the editor, the operator will update the Account deployment to use the
    new `tag image`. This will cause a new Account pod to be started using the `1.0.1`
    tag, and once it passes its readiness check, the original `1.0.0` level pod will
    be terminated (Kubernetes calls this a **rolling upgrade** since it avoids any
    downtime during which no version of the application would be available):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: By always acting upon the `StockTrader CR yaml` file as a whole, rather than
    having to worry about the generated yaml for each microservice, the operator keeps
    you focused at the level of the business application, while still giving you the
    flexibility to version the various pieces independently.
  prefs: []
  type: TYPE_NORMAL
- en: Performing problem determination
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another thing you often will need to do with an application is to try to figure
    out what is going on when something isn't working as expected. This process is
    called **Problem Determination** (**PD**), or is sometimes referred to as **Root
    Cause Analysis** (**RCA**) when doing a post-mortem to figure out what led to
    the failure. Again, the operator can assist you here, such as by letting you turn
    on additional tracing in the Open Liberty container hosting each microservice.
  prefs: []
  type: TYPE_NORMAL
- en: As before, you edit the CR yaml to effect such a change. There is a `traceSpec`
    field in the `global` section of the CR yaml that you'd edit to provide the desired
    trace specification. For example, if you wanted to turn on the fine-level trace
    for the Broker microservice, you would set the `traceSpec` field to the fully
    qualified class name of the Broker microservice, which is `com.ibm.hybrid.cloud.sample.stocktrader.broker.BrokerService`,
    to a value of `fine`. Note that you probably still want to keep `info` level trace
    on everything else, so you would use a colon to separate the two parts of the
    trace specification.
  prefs: []
  type: TYPE_NORMAL
- en: Another thing you may want to do to assist with PD is to turn on JSON logging.
    This causes the logs to be output in a format that can be consumed by tools such
    as *ElasticSearch* so that you can easily filter through the logs coming from
    the various microservice pods in a single federated logging dashboard such as
    *Kibana*.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The combination of *ElasticSearch*, *LogStash*, and *Kibana* is often referred
    to as the **ELK Stack**; sometimes, *FluentD* is used instead of *LogStash*, so
    then the combination is referred to as **EFK**; for details on using the OperatorHub
    operators to set up **ELK**/**EFK** in your own cluster, see [https://docs.openshift.com/container-platform/4.6/logging/cluster-logging-deploying.html](https://docs.openshift.com/container-platform/4.6/logging/cluster-logging-deploying.html).
    Note that there are other more enterprise-quality log analysis tools too, such
    as *LogDNA* or *Instana*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at a *Kibana* dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.21 – A federated observability dashboard filtered for the IBM Stock
    Trader microservices'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17377_09_21.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.21 – A federated observability dashboard filtered for the IBM Stock
    Trader microservices
  prefs: []
  type: TYPE_NORMAL
- en: In *Figure 9.21*, we see log messages from the various microservices comprising
    the IBM Stock Trader application, interleaved based on the timestamp of when each
    JSON log message was sent. Being able to see all of the logging coming from all
    of the microservices in a cloud-native appliction in one dashboard, rather than
    having to go and view each microservice's output separately, greatly enhances
    the problem determination experience.
  prefs: []
  type: TYPE_NORMAL
- en: 'An additional benefit of JSON logging is that it gives you control over what
    sources send their logs to the log analysis tool for your Kubernetes cluster.
    In addition to choices such as HTTPS access logs or audit records, one of the
    choices is to send trace records there, as we just discussed with the *traceSpec*
    setting (otherwise, you''d have to `kubectl cp` the `trace.log` file off of the
    pod to investigate the trace log or mount your own *Persistent Volume* (*PV*)
    into the `/logs` location of the container and the trace log would go there):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: There are many other *day 2* operations you can perform with the operator. But
    this should get the point across that the operator is the one in control of all
    configurations for your application, so it is used to effect any changes when
    needed.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've now explored some of the benefits of having an operator help you out with
    both deployment and day 2 operations of a composite application to your Kubernetes
    cluster. While it is possible to deploy a given microservice without the use of
    an operator, having one guiding you is like having a co-pilot suggesting good
    default values where appropriate so that you get your application deployed with
    optimal configuration settings. And having one in the post-deployment stage, helping
    you with *day 2* operations such as scaling, upgrading, and problem determination,
    ensures you have the best experience maintaining your application once it is in
    production use.
  prefs: []
  type: TYPE_NORMAL
- en: We've now covered all of the core MicroProfile features and have shown them
    in use in a real-world microservices-based application running in a Kubernetes
    platform such as OCP. Going forward, the remaining chapters will cover some of
    the auxiliary MicroProfile features (such as reactive messaging) and will look
    ahead to the future of MicroProfile beyond the current 4.x state.
  prefs: []
  type: TYPE_NORMAL
