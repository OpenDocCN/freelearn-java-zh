- en: '*Chapter 9*: Deployment and Day 2 Operations'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 9 章*：部署和第二天操作'
- en: So far, we've seen many code snippets and screenshots of our example application,
    the **IBM Stock Trader**. Now, let's learn how to deploy it to your own **OpenShift
    Container Platform** cluster or any **Kubernetes** platform of your choice. As
    important as getting it running is, it is also very important to learn how to
    maintain it and tune it to meet your needs.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了许多示例应用程序的代码片段和截图，即**IBM 股票交易员**。现在，让我们学习如何将其部署到您自己的**OpenShift
    Container Platform**集群或您选择的任何**Kubernetes**平台。虽然让它运行很重要，但学习如何维护它并调整它以满足您的需求也同样重要。
- en: Unlike many *Hello World* samples that you might see on the internet, that either
    have no operator at all (just having you manually apply `.yaml` files to install),
    or they perhaps have a very simple operator per microservice, the **IBM Stock
    Trader** example has a **composite operator** that not only installs all of the
    microservices but also configures the connectivity to all prerequisite services,
    including all the credentials used for authentication.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 与您在网上可能看到的许多 *Hello World* 示例不同，这些示例要么根本没有任何操作员（只是手动应用 `.yaml` 文件进行安装），要么每个微服务可能只有一个非常简单的操作员，而**IBM
    股票交易员**示例有一个**组合操作员**，它不仅安装所有微服务，还配置了与所有先决服务的连接性，包括用于身份验证的所有凭证。
- en: This composite operator also provides an advanced form `.yaml` file for the
    custom resource defined by the operator.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 此组合操作员还提供了由操作员定义的自定义资源的先进形式 `.yaml` 文件。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Understanding the role of operators
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解操作员的作用
- en: Installing the operator via the OpenShift console
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 OpenShift 控制台安装操作员
- en: Deploying the application via the operator form UI
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过操作员表单 UI 部署应用程序
- en: Deploying the application via the command line
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过命令行部署应用程序
- en: Day 2 operations
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二天操作
- en: By the end of this chapter, you will be familiar with using the operator to
    deploy the application, either from the UI or the CLI, and how to use it to maintain
    the application going forward.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将熟悉使用操作员从 UI 或 CLI 部署应用程序，以及如何使用它来维护应用程序的后续操作。
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To use the operator as described in this section, you will need to have the
    following tools installed:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用本节中描述的操作员，您需要安装以下工具：
- en: A Git client – [https://git-scm.com](https://git-scm.com)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git 客户端 – [https://git-scm.com](https://git-scm.com)
- en: A Kubernetes client (`kubectl`) – https://kubernetes.io/docs/tasks/tools/#kubectl
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 客户端 (`kubectl`) – https://kubernetes.io/docs/tasks/tools/#kubectl
- en: In addition, you will need to have a Kubernetes cluster available. For the CLI
    parts of this chapter, you can use any Kubernetes distribution you prefer. But
    to try out the UI parts of this chapter, the Kubernetes distribution will need
    to be OpenShift Container Platform (OCP), since the screenshots are all from the
    OpenShift console. Ask your administrator how to give `kubectl` access to your
    cluster, and for the URL of the console if using OCP.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还需要有一个可用的 Kubernetes 集群。对于本章的 CLI 部分，您可以使用您喜欢的任何 Kubernetes 发行版。但为了尝试本章的
    UI 部分，Kubernetes 发行版需要是 OpenShift Container Platform (OCP)，因为所有截图都是从 OpenShift
    控制台获取的。请向您的管理员询问如何为您的集群提供 `kubectl` 访问权限，以及如果使用 OCP，控制台的 URL。
- en: Understanding the role of operators
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解操作员的作用
- en: Before diving into the specifics of the IBM Stock Trader operator, let's step
    back for a bit and consider what operators do and why they are a good thing. To
    do so, it's important to recall from [*Chapter 7*](B17377_07_Final_SB_epub.xhtml#_idTextAnchor146),
    *MicroProfile Ecosystem with Open Liberty, Docker, and Kubernetes*, that Kubernetes
    defines a model where there are several built-in object types, such as Deployments,
    Services, Ingresses, ConfigMaps, and Secrets. In the true object-oriented philosophy,
    such objects not only have data but have behavior; it is the operators' job to
    participate in and guide the full **Create, Retrieve, Update, and Delete** (**CRUD**)
    life cycle of the objects they manage.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入探讨 IBM 股票交易员操作员的详细信息之前，让我们稍微退后一步，考虑一下操作员的作用以及为什么它们是好事。为此，重要的是要回忆起从 [*第 7
    章*](B17377_07_Final_SB_epub.xhtml#_idTextAnchor146)，*Open Liberty、Docker 和 Kubernetes
    的 MicroProfile 生态系统*，Kubernetes 定义了一个模型，其中包含几个内置对象类型，例如 Deployments、Services、Ingresses、ConfigMaps
    和 Secrets。在真正的面向对象哲学中，这些对象不仅具有数据，还具有行为；操作员的职责是参与并指导它们所管理的对象的完整**创建、检索、更新和删除**（**CRUD**）生命周期。
- en: One key point is that Kubernetes not only has its built-in objects, but also
    has an extensibility model where vendors can add to that *vocabulary*, defining
    additional types of objects and how they should act in the Kubernetes environment.
    Kubernetes calls this a **CustomResourceDefinition** (**CRD**). A CRD is essentially
    a schema of what fields describe the configuration for a particular instance of
    the **CustomResource** (**CR**). I often think of it as a *CR* is to its *CRD*
    as *XML* is to its *XSD*.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一个关键点是，Kubernetes不仅有其内置对象，还有一个可扩展模型，其中供应商可以向该*词汇*添加内容，定义额外的对象类型以及它们在Kubernetes环境中的行为。Kubernetes称这为**自定义资源定义**（**CRD**）。CRD本质上是一个模式，描述了特定实例的**自定义资源**（**CR**）配置的字段。我经常把它想象成*CR*对应于它的*CRD*，就像*XML*对应于它的*XSD*。
- en: Before the rise of operators, an earlier technology known as `yaml` file to
    each Kubernetes built-in object needed by an application, with some ability to
    parameterize the fields in each `yaml` file. The Stock Trader application itself
    had a Helm chart (at [https://github.com/IBMStockTrader/stocktrader-helm](https://github.com/IBMStockTrader/stocktrader-helm)),
    before the arrival of OpenShift version 4, which was a pretty big redesign of
    the OpenShift architecture with operators at the heart of it all.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在操作员兴起之前，一种称为`yaml`文件的技术为应用程序需要的每个Kubernetes内置对象提供，并具有在`yaml`文件中参数化字段的一些能力。股票交易应用本身在OpenShift版本4到来之前有一个Helm图表（在[https://github.com/IBMStockTrader/stocktrader-helm](https://github.com/IBMStockTrader/stocktrader-helm)），OpenShift版本4是一个相当大的架构重设计，操作员是其核心。
- en: Though Helm worked, it was a limited technology, in that it did nothing to help
    with running the applications once they were installed. An operator, on the other
    hand, is always listening for, and ready to react to, any change to a CR of the
    CRD type it operates upon. Operators also can offer *day 2* operations, as we'll
    see later in this chapter.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Helm工作得很好，但它是一种有限的技术，因为它在安装应用后没有提供任何帮助。另一方面，操作员始终在监听，并准备好对它所操作的CRD类型的CR的任何变化做出反应。操作员还可以提供*第二天*操作，正如我们将在本章后面看到的那样。
- en: Note
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: There are different ways to write an operator, one of which is to wrap a Helm
    chart. The operator for the Stock Trader application is one such Helm-based operator.
    Take a look at (or clone) the [https://github.com/IBMStockTrader/stocktrader-operator](https://github.com/IBMStockTrader/stocktrader-operator)
    repo to browse its source code, to open issues, or to submit **pull requests**
    (**PRs**) to improve the operator.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 编写操作员有不同的方法，其中一种是将Helm图表包装起来。股票交易应用的操作员就是这样一种基于Helm的操作员。查看（或克隆）[https://github.com/IBMStockTrader/stocktrader-operator](https://github.com/IBMStockTrader/stocktrader-operator)存储库以浏览其源代码，打开问题，或提交**拉取请求**（**PR**）以改进操作员。
- en: Another way of thinking about it is that operators expand the kinds of objects
    that Kubernetes knows how to manage; for example, one managing a CRD of the `PacktBook`
    type would enable commands such as `kubectl get PacktBooks` or `kubectl describe
    PacktBook microprofile`, in the same way, you would act upon built-in Kubernetes
    objects such as `Deployments` or `Services`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种思考方式是，操作员扩展了Kubernetes知道如何管理的对象类型；例如，一个管理`PacktBook`类型CRD的操作员将启用诸如`kubectl
    get PacktBooks`或`kubectl describe PacktBook microprofile`之类的命令，就像您会对内置的Kubernetes对象（如`Deployments`或`Services`）进行操作一样。
- en: Now let's learn how to use the operator for our Stock Trader application. We'll
    start with the OpenShift console UI approach, and then will look at how to use
    it from a CLI as well.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们学习如何使用操作员来构建我们的股票交易应用。我们将从OpenShift控制台UI方法开始，然后我们将探讨如何从CLI使用它。
- en: Installing the operator via the OpenShift console
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过OpenShift控制台安装操作员
- en: 'As a quick reminder from [*Chapter 3*](B17377_03_Final_SB_epub.xhtml#_idTextAnchor049),
    *Introducing the IBM Stock Trader Cloud-Native Application*, the **IBM Stock Trader**
    application is comprised of about a dozen microservices (many of which are optional),
    and about the same number of prerequisite resources, such as databases and messaging
    systems. The composite operator guides you through providing all of the settings
    for each of those microservices and for configuring their connectivity to those
    various backend resources, as we can see here:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 作为对[*第3章*](B17377_03_Final_SB_epub.xhtml#_idTextAnchor049)的快速回顾，*介绍IBM股票交易云原生应用*，**IBM股票交易**应用由大约一打微服务（其中许多是可选的）以及大约相同数量的先决资源组成，例如数据库和消息系统。组合操作员引导您为每个微服务提供所有设置，并配置它们与各种后端资源的连接，正如我们在这里可以看到的：
- en: '![Figure 9.1 – Architectural diagram'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.1 – 架构图'
- en: '](img/B17377_09_01.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.1 – Architectural diagram
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, there are a lot of parts that need to be configured for everything
    to work. The operator guides us through providing such configuration information
    for each piece (though it does *NOT* actually install the backend resources –
    it just asks for the endpoint and credential details to connect to pre-existing
    resources, which could be running in your cluster, or accessed from elsewhere,
    such as a **DB2-as-a-Service** (**DB2aaS**) out in the cloud). In the next two
    sections, we'll learn about OperatorHub and how to install the operator in our
    cluster.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: OperatorHub
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **OpenShift** 4.x console includes a catalog of operators called **OperatorHub**.
    There are several built-in catalog sources, and administrators can plug in additional
    sources to make more operators appear in the catalog that they have purchased
    from vendors (such as the catalog sources for the various IBM Cloud Paks) or that
    their own developers have created. Let''s take a look at the **OperatorHub** portion
    of the OpenShift console by clicking on **Operators** | **OperatorHub** in the
    left navigation menu:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.2 – OperatorHub'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17377_09_02_new.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.2 – OperatorHub
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: 'Here we can see we have 460 operators available, 5 of which are currently installed
    in our cluster. Let''s learn how to install our own catalog source so that we
    can cause our own operator(s) to show up here:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by clicking on **Administration** | **Cluster Settings** in the
    left navigation menu.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then we choose the `Hub`, in the filter field, and the list will filter to just
    entries containing that string):![Figure 9.3 – Cluster Settings
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17377_09_03.jpg)'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.3 – Cluster Settings
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Then, on the resulting page, click on the **Sources** tab.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You''ll see that four sources are pre-configured (all from Red Hat), and the
    number of operators contributed by each:'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.4 – Catalog Sources'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B17377_09_04.jpg)'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.4 – Catalog Sources
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If your administrator has set up your cluster to show operators beyond the default
    ones, you may see more than the initial four.
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Then just click on the **Create Catalog Source** button to provide the details
    for our new source containing the operator for the **IBM Stock Trader** application:![Figure
    9.5 – Details for the IBM Stock Trader catalog source
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17377_09_05.jpg)'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.5 – Details for the IBM Stock Trader catalog source
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We chose to make it a **Cluster-wide catalog source** so that it is available
    regardless of what namespace you are using in your cluster. If you prefer (or
    only have authority in a particular namespace), you could instead choose **Namespace
    catalog source**. Note that if you are in a really locked-down environment using
    an ID with limited security privileges, you might need to ask an administrator
    to perform this action for you.
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can type whatever values you want in the first three fields (I chose my
    team's name, `Cloud Engagement Hub`).
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The final field, specifying where to find the Docker image for the catalog source,
    is the most important and needs to be set to `docker.io/ibmstocktrader/stocktrader-operator-catalog:v0.2.0`.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一个字段，指定在哪里找到目录源的Docker镜像，是最重要的，需要设置为`docker.io/ibmstocktrader/stocktrader-operator-catalog:v0.2.0`。
- en: Note
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: Of course, you could clone the `IBMStockTrader/stocktrader-operator` GitHub
    repository and build your own image (per the instructions at [https://github.com/IBMStockTrader/stocktrader-operator/blob/master/bundle/README.md](https://github.com/IBMStockTrader/stocktrader-operator/blob/master/bundle/README.md))
    and push it to your own image registry and specify that here, but to keep things
    simple, we're using the pre-built version we keep hosted in **Docker Hub** for
    convenience.
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当然，您可以从GitHub仓库`IBMStockTrader/stocktrader-operator`克隆并构建自己的镜像（按照[https://github.com/IBMStockTrader/stocktrader-operator/blob/master/bundle/README.md](https://github.com/IBMStockTrader/stocktrader-operator/blob/master/bundle/README.md)中的说明）并将其推送到您自己的镜像仓库，并在此处指定它，但为了简化操作，我们使用预先构建的版本，它托管在**Docker
    Hub**上，以便方便使用。
- en: Once you click the **Create** button, it will return you to the list of catalog
    sources.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建**按钮后，它将带您回到目录源列表。
- en: 'At first, there will just be a dash for the number of operators from that new
    source, until OpenShift is able to download the specified Docker container image
    and parse its contents. Once it does, it will update to show the correct number
    of operators, which is just one in our case, as shown here:'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 初始时，来自该新源的运算符数量将只显示一个短横线，直到OpenShift能够下载指定的Docker容器镜像并解析其内容。一旦完成，它将更新以显示正确的运算符数量，在我们的例子中只有一个，如图所示：
- en: '![Figure 9.6 – Details for the IBM Stock Trader catalog source'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图9.6 – IBM股票交易员目录源详细信息'
- en: '](img/B17377_09_06_new.jpg)'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图9.7 – 我们集群的OperatorHub中的IBM股票交易员操作符'
- en: Figure 9.6 – Details for the IBM Stock Trader catalog source
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.6 – IBM股票交易员目录源详细信息
- en: 'Now if you return to the `stock`, in the filter field, and then it will only
    show the ones containing that string:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在如果您回到`股票`，在过滤器字段中，它将只显示包含该字符串的条目：
- en: '![Figure 9.7 – The IBM Stock Trader operator in our cluster''s OperatorHub'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.7 – 我们集群的OperatorHub中的IBM股票交易员操作符'
- en: '](img/B17377_09_07.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.7 – IBM股票交易员操作符信息页面'
- en: Figure 9.7 – The IBM Stock Trader operator in our cluster's OperatorHub
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.7 – 我们集群的OperatorHub中的IBM股票交易员操作符
- en: Congratulations! You have now made the operator for the IBM Stock Trader application
    available in the OperatorHub catalog. In the next section, we'll look at how to
    install the operator.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您现在已将IBM股票交易员应用程序的操作符添加到OperatorHub目录中。在下一节中，我们将探讨如何安装操作符。
- en: Installing the operator
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装操作符
- en: 'Now that we''ve made our operator available in our cluster''s catalog, let''s
    make use of it:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将操作符添加到我们集群的目录中，让我们来使用它：
- en: Just click on the tile for the operator. Doing so will show further details
    about the operator that we just made available in the previous section:![Figure
    9.8 – The IBM Stock Trader operator info page
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只需点击操作符的瓷砖。这样做将显示有关我们刚刚在上一节中提供的操作符的更多详细信息：![图9.8 – IBM股票交易员操作符信息页面
- en: '](img/B17377_09_08.jpg)'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图9.8 – IBM股票交易员操作符信息页面'
- en: Figure 9.8 – The IBM Stock Trader operator info page
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.8 – IBM股票交易员操作符信息页面
- en: As you can see, this shows some basic information about the operator, including
    its readme file. Nothing needs to be done in this dialog – just click on the **Install**
    button.
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如您所见，这显示了关于操作符的一些基本信息，包括其readme文件。在此对话框中无需执行任何操作，只需点击**安装**按钮。
- en: '![Figure 9.9 – The IBM Stock Trader operator subscription page'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图9.9 – IBM股票交易员操作符订阅页面'
- en: '](img/B17377_09_09.jpg)'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图9.9 – IBM股票交易员操作符订阅页面'
- en: Figure 9.9 – The IBM Stock Trader operator subscription page
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.9 – IBM股票交易员操作符订阅页面
- en: Here we see information about how the operator will behave in our cluster; for
    example, we can see that, like all OperatorHub-integrated operators that you install
    to work on all namespaces in your cluster, the actual namespace where the operator
    will run is called **openshift-operators**. Note that the act of *installing*
    an operator is technically about making a *subscription* to that operator (more
    on that in the *Deploying the application via the CLI* section, next).
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到关于操作符在我们集群中如何表现的信息；例如，我们可以看到，像所有安装到您集群所有命名空间中工作的OperatorHub集成操作符一样，操作符实际运行的命名空间被称为**openshift-operators**。请注意，*安装*操作符在技术上是指对该操作符进行*订阅*（有关更多信息，请参阅下一节*通过CLI部署应用程序*）。
- en: Once you click the **Install** button, you'll briefly see a dialog saying it
    is being installed (until its pod starts and passes its readiness check), and
    then it will tell you whether it has been successfully installed.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您点击**安装**按钮，您将短暂地看到一个对话框，显示正在安装（直到其pod启动并通过就绪性检查），然后它会告诉您是否已成功安装。
- en: '![Figure 9.10 – The IBM Stock Trader operator is installed'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.10 – IBM股票交易员运营商已安装'
- en: '](img/B17377_09_10.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 B17377_09_10.jpg]'
- en: Figure 9.10 – The IBM Stock Trader operator is installed
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.10 – IBM股票交易员运营商已安装
- en: Congratulations! You have now installed the operator for the **IBM Stock Trader**
    application. In the next section, we'll look at how to use that operator to deploy
    the application.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您现在已安装了**IBM股票交易员**应用程序的运营商。在下一节中，我们将探讨如何使用该运营商部署应用程序。
- en: Deploying the application via the operator form UI
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过运营商表单UI部署应用程序
- en: 'To deploy the application, we will follow these steps:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 部署应用程序时，我们将遵循以下步骤：
- en: Click on the **View Operator** button shown in *Figure 9.10*. You will be taken
    to a page showing you information about the operator, which of course looks very
    similar to what we saw when we first clicked on the operator in **OperatorHub**.![Figure
    9.11 – The IBM Stock Trader operator Details page
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击*图9.10*中显示的**查看运营商**按钮。您将被带到显示运营商信息的页面，当然，它看起来与我们第一次在**运营商中心**点击运营商时看到的非常相似。![图9.11
    – IBM股票交易员运营商详细信息页面
- en: '](img/B17377_09_11.jpg)'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片 B17377_09_11.jpg]'
- en: Figure 9.11 – The IBM Stock Trader operator Details page
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.11 – IBM股票交易员运营商详细信息页面
- en: We can use the **Create Instance** link shown in *Figure 9.11* to launch into
    the dialog for installing an instance of our **IBM Stock Trader** application:![Figure
    9.12 – The IBM Stock Trader operator form UI
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用*图9.11*中显示的**创建实例**链接来启动安装我们的**IBM股票交易员**应用程序实例的对话框：![图9.12 – IBM股票交易员运营商表单UI
- en: '](img/B17377_09_12.jpg)'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片 B17377_09_12.jpg]'
- en: Figure 9.12 – The IBM Stock Trader operator form UI
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.12 – IBM股票交易员运营商表单UI
- en: Next, we will provide a `microprofile` as the instance name to use here, then
    the portfolio deployment that gets created will be named `microprofile-portfolio`.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将提供一个`microprofile`作为实例名称在此处使用，然后创建的配置文件部署将被命名为`microprofile-portfolio`。
- en: 'Since this is a composite operator – that is, one that installs the entire
    application, not one for just a particular microservice – it uses expandable/collapsible
    sections to separate the configuration settings for each microservice. It also
    has such a section for each service it depends upon, such as a **Database** section
    and an **IBM MQ Settings** section. And at the very top is a **Global** section,
    for settings that apply to all of the chosen microservices. Note that most settings
    have good, reasonable defaults and only need adjusting in special scenarios. The
    one big exception to that is the **Database** section, so let''s expand it and
    see what we need to fill in there, as this is the one mandatory prerequisite service
    that we can''t run without:'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于这是一个复合运营商——也就是说，它安装整个应用程序，而不是仅针对特定微服务的运营商——它使用可展开/可折叠的部分来分隔每个微服务的配置设置。它还为它所依赖的每个服务（如**数据库**部分和**IBM
    MQ设置**部分）提供这样的部分。在最上面是一个**全局**部分，用于适用于所有选定微服务的设置。请注意，大多数设置都有很好的、合理的默认值，只有在特殊情况下才需要调整。一个例外是**数据库**部分，所以让我们展开它，看看我们需要填写什么，因为这是我们无法在没有的情况下运行的一个强制性先决服务：
- en: '![Figure 9.13 – The Database section of the IBM Stock Trader operator form
    UI'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图9.13 – IBM股票交易员运营商表单UI的数据库部分'
- en: '](img/B17377_09_13.jpg)'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片 B17377_09_13.jpg]'
- en: Figure 9.13 – The Database section of the IBM Stock Trader operator form UI
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.13 – IBM股票交易员运营商表单UI的数据库部分
- en: As you can see, standard *endpoint* type information must be provided, such
    as the **Database Host name (or IP address)** of the database server and the **Database
    Port Number** used to connect to it, as well as credential information needed
    to authenticate to it. Very similar information is requested for each of the later
    sections, such as for **Cloudant**, **ODM**, or **MQ**.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如您所见，必须提供标准**端点**类型信息，例如数据库服务器的**数据库主机名（或IP地址）**和用于连接它的**数据库端口号**，以及用于认证所需凭证信息。对于每个后续部分，如**Cloudant**、**ODM**或**MQ**，都需要请求非常类似的信息。
- en: 'Let''s expand one of the optional microservices, such as the **Account microservice**:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们展开一个可选的微服务，例如**账户微服务**：
- en: '![Figure 9.14 – The Account microservice section of the IBM Stock Trader operator
    form UI'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.14 – IBM股票交易员运营商表单UI的账户微服务部分'
- en: '](img/B17377_09_14.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 B17377_09_14.jpg]'
- en: Figure 9.14 – The Account microservice section of the IBM Stock Trader operator
    form UI
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.14 – IBM股票交易操作员表单UI的账户微服务部分
- en: Note the little true/false switch at the top, where you specify whether you
    want to enable this optional microservice. The rest of the settings in that section
    will only apply if you choose to enable this microservice. Note also the section
    for specifying where the Docker container image is found for this microservice;
    by default, it will be prefilled with the location in *Docker Hub* where we host
    pre-built versions of each microservice for convenience, though you can type your
    own value here if you have built the microservice yourself (as described in the
    previous chapter) and pushed it to your own image registry.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 注意顶部的真/假开关，你可以在这里指定是否要启用此可选微服务。该部分的其他设置只有在选择启用此微服务时才会生效。还要注意指定此微服务的Docker容器镜像位置的选项卡；默认情况下，它将预先填充在*Docker
    Hub*中的位置，我们在这里托管每个微服务的预构建版本以方便使用，尽管如果你自己构建了微服务（如前一章所述）并将其推送到自己的镜像仓库，你也可以在这里输入自己的值。
- en: 'Note that the first time or two you install the application, having the form
    UI guide you through everything is very helpful, but over time this can get a
    bit old, filling in each value for each microservice and each prerequisite service
    they depend upon. Therefore, there is also the option to simply provide the answers
    to all of these questions in a `.yaml` file, which you can just drag and drop
    into the second tab of this form (**YAML View**):'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，第一次或第二次安装应用程序时，有表单UI引导你完成整个过程是非常有帮助的，但过了一段时间，这可能会变得有点无聊，因为需要为每个微服务和它们依赖的每个先决服务填写每个值。因此，你也可以选择将这些问题的答案简单地放在一个`.yaml`文件中，你可以直接将其拖放到此表单的第二选项卡（**YAML视图**）：
- en: '![Figure 9.15 – The YAML View tab of the IBM Stock Trader operator form UI'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.15 – IBM股票交易操作员表单UI的YAML视图选项卡'
- en: '](img/B17377_09_15.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '![图B17377_09_15.jpg](img/B17377_09_15.jpg)'
- en: Figure 9.15 – The YAML View tab of the IBM Stock Trader operator form UI
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.15 – IBM股票交易操作员表单UI的YAML视图选项卡
- en: 'Whichever way you provide the input, the same end result will occur, once you
    click the **Create** button at the bottom of the page. You should see your new
    instance appear in the list of instances of the **IBM Stock Trader** application,
    with the **Name** you provided:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你以何种方式提供输入，一旦你在页面底部点击**创建**按钮，就会得到相同的结果。你应该会看到你提供**名称**的新实例出现在**IBM股票交易**应用程序实例列表中：
- en: '![Figure 9.16 – The StockTraders section of the IBM Stock Trader operator UI'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.16 – IBM股票交易操作员UI的StockTraders部分'
- en: '](img/B17377_09_16.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '![图B17377_09_16.jpg](img/B17377_09_16.jpg)'
- en: Figure 9.16 – The **StockTraders** section of the IBM Stock Trader operator
    UI
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.16 – IBM股票交易操作员UI的**StockTraders**部分
- en: 'If we click on that name, we will see info about our newly deployed instance.
    There are several tabs; the **Resources** tab is especially useful, to see which
    of the Kubernetes resources discussed in [*Chapter 7*](B17377_07_Final_SB_epub.xhtml#_idTextAnchor146),
    *MicroProfile Ecosystem with Open Liberty, Docker, and Kubernetes*, gets created
    by the operator:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们点击那个名称，我们将看到关于我们新部署实例的信息。有几个选项卡；**资源**选项卡特别有用，可以查看在[*第7章*](B17377_07_Final_SB_epub.xhtml#_idTextAnchor146)，“使用Open
    Liberty、Docker和Kubernetes的MicroProfile生态系统”中讨论的哪些Kubernetes资源是由操作员创建的：
- en: '![Figure 9.17 – The Resources tab of the IBM Stock Trader operator UI'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.17 – IBM股票交易操作员UI的“资源”选项卡'
- en: '](img/B17377_09_17.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '![图B17377_09_17.jpg](img/B17377_09_17.jpg)'
- en: Figure 9.17 – The Resources tab of the IBM Stock Trader operator UI
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.17 – IBM股票交易操作员UI的“资源”选项卡
- en: 'How much appears here depends on which microservices you chose to enable. Since
    it can be a long list, there is a **Filter** button near the top left, which can
    be used to filter the list down to just certain types of Kubernetes objects:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这里显示的内容取决于你选择启用哪些微服务。由于这可能是一个很长的列表，因此顶部左侧有一个**过滤器**按钮，可以用来过滤列表，只显示特定类型的Kubernetes对象：
- en: '![Figure 9.18 – The Filter dialog of the IBM Stock Trader operator form UI'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.18 – IBM股票交易操作员表单UI的过滤器对话框'
- en: '](img/B17377_09_18.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '![图B17377_09_18.jpg](img/B17377_09_18.jpg)'
- en: Figure 9.18 – The Filter dialog of the IBM Stock Trader operator form UI
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.18 – IBM股票交易操作员表单UI的过滤器对话框
- en: 'Here we can see that in this instance, we have 8 Deployments (microservices),
    7 Services (one of the microservices is an MDB with no HTTP endpoint, so it has
    no Service), 1 ConfigMap, 1 Secret, 3 Routes, and 2 HorizontalPodAutoscalers.
    If we had enabled other options, such as the **Istio** true/false setting in the
    **Global** section of our form/yaml, then we''d have seen additional items such
    as **Gateway**, **VirtualService**, **DestinationRule**, and **NetworkPolicy**
    as non-zero. We can also view resources as usual in the OpenShift console by clicking
    on **Workloads** | **Pods** to see all of the running pods:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到在这个实例中，我们有 8 个 Deployment（微服务），7 个 Service（其中一个微服务是一个没有 HTTP 端点的 MDB，因此没有
    Service），1 个 ConfigMap，1 个 Secret，3 个 Route，和 2 个 HorizontalPodAutoscalers。如果我们启用了其他选项，例如在表单/yaml
    的 **全局** 部分的 **Istio** 真假设置，那么我们会看到像 **Gateway**、**VirtualService**、**DestinationRule**
    和 **NetworkPolicy** 这样的额外项，这些项的值不为零。我们还可以通过在 OpenShift 控制台中点击 **工作负载** | **Pods**
    来查看资源，以查看所有正在运行的 pod：
- en: '![Figure 9.19 – The pods for each microservice comprising the IBM Stock Trader
    application'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.19 – 组成 IBM 股票交易应用的每个微服务的 pod]'
- en: '](img/B17377_09_19.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/B17377_09_19.jpg]'
- en: Figure 9.19 – The pods for each microservice comprising the IBM Stock Trader
    application
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.19 – 组成 IBM 股票交易应用的每个微服务的 pod
- en: We've now seen how to install the IBM Stock Trader application via the OpenShift
    console. In the next section, we'll look at how we would use the operator via
    the `kubectl` **Command-Line Interface** (**CLI**) instead.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何通过 OpenShift 控制台安装 IBM 股票交易应用。在下一节中，我们将探讨如何通过 `kubectl` **命令行界面**（**CLI**）来使用操作符。
- en: Deploying the application via the CLI
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过 CLI 部署应用
- en: 'Sometimes you need to do things via an approach other than using a graphical
    user interface. Maybe you just prefer using a CLI. Or, perhaps you want to automate
    such work as steps in a **Continuous Integration / Continuous Deployment** (**CI
    / CD**) pipeline. Or, maybe you are using a Kubernetes distribution other than
    **Red Hat OpenShift Container Platform** (**OCP**), such as from one of the hyperscalers,
    such as **Amazon Web Services** (**AWS**) or **Microsoft Azure**. To deploy the
    application without the benefit of the OpenShift console, follow these steps:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候你需要通过除了使用图形用户界面以外的其他方法来完成某些事情。也许你只是更喜欢使用 CLI。或者，也许你想要在 **持续集成/持续部署**（**CI/CD**）管道的步骤中自动化此类工作。或者，也许你正在使用除了
    **Red Hat OpenShift 容器平台**（**OCP**）以外的 Kubernetes 发行版，例如来自超大规模提供商之一，如 **Amazon
    Web Services**（**AWS**）或 **Microsoft Azure**。要在没有 OpenShift 控制台的好处下部署应用，请按照以下步骤操作：
- en: The first thing you'll need to do is to make sure that the `brew install operator-sdk`)
    by following the instructions at [https://olm.operatorframework.io/docs/getting-started/](https://olm.operatorframework.io/docs/getting-started/).
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你首先需要做的是确保通过遵循 [https://olm.operatorframework.io/docs/getting-started/](https://olm.operatorframework.io/docs/getting-started/)
    中的说明来安装 `brew install operator-sdk`。
- en: Note
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: '`operator-sdk` is used to produce an operator such as the one for the IBM Stock
    Trader application. The exact command that generated the starting point for this
    operator was `operator-sdk init --plugins helm --group operators --kind StockTrader
    --domain ibm.com --version v1 --helm-chart ../stocktrader-helm/stocktrader-1.5.0.tgz`.'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`operator-sdk` 用于生成像 IBM 股票交易应用那样的操作符。生成此操作符起点确切的命令是 `operator-sdk init --plugins
    helm --group operators --kind StockTrader --domain ibm.com --version v1 --helm-chart
    ../stocktrader-helm/stocktrader-1.5.0.tgz`。'
- en: 'The next step is to create the catalog source for the `.yaml` file with the
    following contents:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是创建包含以下内容的 `.yaml` 文件的目录源：
- en: '[PRE0]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The only value that really matters is the `image` field – you can specify anything
    you want for the other fields. Name the file whatever you want, such as `catalog-source.yaml`.
    Make sure you are logged in to your cluster from your terminal window and then
    run the command `kubectl apply -f catalog-source.yaml`. After a minute or so,
    the catalog source will be available, just like when done via the OpenShift console.
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 唯一真正重要的值是 `image` 字段 – 你可以为其他字段指定任何你想要的值。将文件命名为你想要的任何名称，例如 `catalog-source.yaml`。确保你从终端窗口登录到你的集群，然后运行命令
    `kubectl apply -f catalog-source.yaml`。大约一分钟后，目录源将可用，就像通过 OpenShift 控制台完成的那样。
- en: 'Next, you will install the operator via the catalog source. Create another
    `.yaml` file with the following contents:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，你将通过目录源安装操作符。创建另一个包含以下内容的 `.yaml` 文件：
- en: '[PRE1]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Name it whatever you want, such as `subscription.yaml`. Then, run `kubectl apply
    -f subscription.yaml`. Once this is complete, the operator will be installed and
    available.
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以取任何你想要的名称，例如 `subscription.yaml`。然后，运行 `kubectl apply -f subscription.yaml`。一旦完成，操作员将被安装并可用。
- en: The final step is to apply the yaml for the instance you want to create of the
    IBM Stock Trader application. As discussed in the *Understanding the role of operators*
    section, an operator defines a CRD – in this case, for an object of the `StockTrader`
    type – and here we are creating a CR of that type.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步是应用你想要创建的 IBM 股票交易员应用程序实例的 yaml 文件。正如在 *理解操作员角色* 部分中讨论的那样，操作员定义了一个 CRD –
    在这种情况下，为 `StockTrader` 类型的对象 – 而在这里我们正在创建该类型的 CR。
- en: 'The Stock Trader CR yaml has the same structure as what we saw in the OpenShift
    console; each expandable section maps to an indentation level in the .yaml file.
    For example, there''s a section for every microservice, and for each prerequisite
    service they depend upon. Here''s a snippet of an example `CR yaml`, most of which
    is cut out to avoid having many pages of yaml content:'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 股票交易员 CR yaml 的结构与我们在 OpenShift 控制台中看到的是相同的；每个可展开的部分映射到 .yaml 文件中的缩进级别。例如，每个微服务都有一个部分，以及它们所依赖的每个先决服务。以下是一个示例
    `CR yaml` 的片段，其中大部分内容已被裁剪以避免出现许多页的 yaml 内容：
- en: '[PRE2]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Any field not specified in the yaml you pass will use its default value, so
    you really only need to fill in fields that you want to set to a non-default value.
    For a full example of a `Stock Trader CR yaml file`, you can either copy/paste
    what appears when you switch to the **YAML View** tab of the operator page (as
    we saw in *Figure 9.15*) or go look in GitHub at [https://github.com/IBMStockTrader/stocktrader-operator/blob/master/config/samples/operators_v1_stocktrader.yaml](https://github.com/IBMStockTrader/stocktrader-operator/blob/master/config/samples/operators_v1_stocktrader.yaml).
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在你传递的 yaml 中未指定的任何字段将使用其默认值，所以你实际上只需要填写你想要设置为非默认值的字段。要查看完整的 `Stock Trader CR
    yaml 文件` 示例，你可以复制/粘贴操作员页面（如图 9.15 所示）切换到 **YAML 视图** 选项卡时出现的文本，或者去 GitHub 上查看
    [https://github.com/IBMStockTrader/stocktrader-operator/blob/master/config/samples/operators_v1_stocktrader.yaml](https://github.com/IBMStockTrader/stocktrader-operator/blob/master/config/samples/operators_v1_stocktrader.yaml)。
- en: Once you have your CR yaml file filled out, save it with whatever filename you
    prefer, such as `stock-trader.yaml`, and then deploying an instance of the IBM
    Stock Trader application is as simple as running `kubectl apply -f stock-trader.yaml`.
    This will take a couple of minutes to complete.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你的 CR yaml 文件填写完毕，保存它，使用你喜欢的任何文件名，例如 `stock-trader.yaml`，然后部署 IBM 股票交易员应用程序的实例就像运行
    `kubectl apply -f stock-trader.yaml` 那么简单。这需要几分钟才能完成。
- en: 'Once it does, you can see which pods are running for the microservices you
    selected by running a simple `kubectl get pods` command:'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一旦完成，你可以通过运行简单的 `kubectl get pods` 命令来查看为你所选微服务运行的哪些 pod：
- en: '![Figure 9.20 – Console output'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.20 – 控制台输出'
- en: '](img/B17377_09_20.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17377_09_20.jpg)'
- en: Figure 9.20 – Console output
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.20 – 控制台输出
- en: Congratulations! You have confirmed that you have deployed the IBM Stock Trader
    application, after creating and applying just three yaml files! Now that you've
    learned how to deploy the application, let's learn what we can do next via the
    operator.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已确认部署了 IBM 股票交易员应用程序，只需创建并应用了三个 yaml 文件！现在你已经学会了如何部署应用程序，让我们学习通过操作员可以做什么。
- en: Understanding day 2 operations
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解第二天操作
- en: 'People in the Kubernetes community often say that deployment is *day 1* and
    that the kinds of things you do to maintain the application afterward are *day
    2* operations. Some examples of *day 2* operations include the following:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 社区的人常说部署是 *第一天*，而你之后为维护应用程序所做的事情是 *第二天* 操作。以下是一些 *第二天* 操作的例子：
- en: Scaling a given microservice up or down
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展或缩减特定微服务的规模
- en: Upgrading to a newer version of a microservice
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 升级到微服务的新版本
- en: Setting a trace string to perform problem determination
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置跟踪字符串以执行问题确定
- en: Let's look at each one of these in detail.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细看看每一个。
- en: Scaling a microservice
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展微服务
- en: One of the benefits of a microservices architecture is that you can independently
    scale each microservice. Rather than having to scale up all parts of a monolithic
    application at once, you can scale just the part that is experiencing the throughput
    or response time issues.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务架构的一个好处是你可以独立扩展每个微服务。你不必一次性扩展单体应用程序的所有部分，而只需扩展遇到吞吐量或响应时间问题的部分。
- en: One thing to be aware of when using resources generated by an operator is that
    the operator itself *owns* those resources, and won't let you change them directly.
    For example, if you wanted to edit the Portfolio deployment to scale the number
    of pods, attempting to do so might momentarily appear to work, but in reality,
    the operator is constantly watching and will revert any resource that gets edited
    outside of its purview. There is a process called **reconciliation** that advanced
    operators can use to decide whether and how to merge the requested changes, but
    a simple Helm-based operator, like the one for Stock Trader, will just reject
    any attempt to directly edit one of the Kubernetes resources that it generated.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用由操作员生成的资源时，需要注意的一点是操作员本身 *拥有* 这些资源，并且不会让您直接更改它们。例如，如果您想编辑 Portfolio 部署以扩展
    pod 的数量，尝试这样做可能会暂时看起来有效，但实际上，操作员会持续监控，并将任何在其权限之外被编辑的资源还原。有一个称为 **reconciliation**
    的过程，高级操作员可以使用它来决定是否以及如何合并请求的更改，但像 Stock Trader 这样的简单基于 Helm 的操作员将拒绝直接编辑其生成的任何
    Kubernetes 资源。
- en: The proper way to make such a change is to edit the CR yaml for the instance
    of the Stock Trader deployment instead. You can do so either via the OpenShift
    console or from the CLI. If using the CLI, you can pick which text editor gets
    used, by setting the `KUBE_EDITOR` environment variable to whatever text-based
    editor you want. For example, if you develop on a Mac and prefer its `nano` editor
    to the old-fashioned `vi` editor, just issue the command `export KUBE_EDITOR=nano`.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 正确进行此类更改的方法是编辑 Stock Trader 部署实例的 CR yaml 文件。您可以通过 OpenShift 控制台或 CLI 来这样做。如果使用
    CLI，您可以通过设置 `KUBE_EDITOR` 环境变量来选择您想要的任何基于文本的编辑器。例如，如果您在 Mac 上开发，并且更喜欢它的 `nano`
    编辑器而不是老式的 `vi` 编辑器，只需运行命令 `export KUBE_EDITOR=nano`。
- en: 'So, if you want to scale up your Portfolio deployment from one pod to two,
    you can simply run `kubectl edit StockTrader microprofile`, and that will load
    its current yaml into the specified editor, where you would go down to the `portfolio`
    section and change the value of its `replicas` field to `2`, save the file and
    exit, and that will cause the generated Portfolio deployment to be updated to
    have two pods:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果您想将您的 Portfolio 部署从单个 pod 扩展到两个，您只需运行 `kubectl edit StockTrader microprofile`，这将将其当前的
    yaml 文件加载到指定的编辑器中，在那里您会进入 `portfolio` 部分，将 `replicas` 字段的值更改为 `2`，保存文件并退出，这将导致生成的
    Portfolio 部署更新为具有两个 pod：
- en: '[PRE3]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Instead of hardcoding the number of replicas, you can also enable `autoscale:
    true` to enable HPA, and Kubernetes will scale up the number of pods if the threshold
    is met, and will scale back down when activity subsides.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '除了硬编码副本数量外，您还可以启用 `autoscale: true` 来启用 HPA，如果达到阈值，Kubernetes 将增加 pod 的数量，当活动减少时将缩减。'
- en: Upgrading a microservice
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 升级微服务
- en: Another change you might want to make to a deployed Stock Trader instance is
    to upgrade to a newer version of a given microservice. For example, if one of
    the developers built and pushed a new version of the Account microservice to your
    Docker image registry, you would use the operator to point at the new version.
    Again, you wouldn't directly edit the Account deployment, but would instead edit
    the `Stock Trader CR yaml file`, and then the operator would make the changes
    to the Account deployment on your behalf.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还希望对已部署的 Stock Trader 实例进行的一项更改是升级到给定微服务的新版本。例如，如果开发人员构建并推送了 Account 微服务的新版本到您的
    Docker 镜像仓库，您将使用操作员指向新版本。同样，您不会直接编辑 Account 部署，而是编辑 `Stock Trader CR yaml 文件`，然后操作员会代表您对
    Account 部署进行更改。
- en: 'If you had been using the `1.0.0` tag for the image for the Account microservice,
    and you wanted to move up to the `1.0.1` version, you would use the aforementioned
    approach as you did for scaling, but this time, when you get the CR yaml into
    your `nano` editor, you would go down to the `1.0.1`.  When you save `CR yaml`
    and exit the editor, the operator will update the Account deployment to use the
    new `tag image`. This will cause a new Account pod to be started using the `1.0.1`
    tag, and once it passes its readiness check, the original `1.0.0` level pod will
    be terminated (Kubernetes calls this a **rolling upgrade** since it avoids any
    downtime during which no version of the application would be available):'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: By always acting upon the `StockTrader CR yaml` file as a whole, rather than
    having to worry about the generated yaml for each microservice, the operator keeps
    you focused at the level of the business application, while still giving you the
    flexibility to version the various pieces independently.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: Performing problem determination
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another thing you often will need to do with an application is to try to figure
    out what is going on when something isn't working as expected. This process is
    called **Problem Determination** (**PD**), or is sometimes referred to as **Root
    Cause Analysis** (**RCA**) when doing a post-mortem to figure out what led to
    the failure. Again, the operator can assist you here, such as by letting you turn
    on additional tracing in the Open Liberty container hosting each microservice.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: As before, you edit the CR yaml to effect such a change. There is a `traceSpec`
    field in the `global` section of the CR yaml that you'd edit to provide the desired
    trace specification. For example, if you wanted to turn on the fine-level trace
    for the Broker microservice, you would set the `traceSpec` field to the fully
    qualified class name of the Broker microservice, which is `com.ibm.hybrid.cloud.sample.stocktrader.broker.BrokerService`,
    to a value of `fine`. Note that you probably still want to keep `info` level trace
    on everything else, so you would use a colon to separate the two parts of the
    trace specification.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: Another thing you may want to do to assist with PD is to turn on JSON logging.
    This causes the logs to be output in a format that can be consumed by tools such
    as *ElasticSearch* so that you can easily filter through the logs coming from
    the various microservice pods in a single federated logging dashboard such as
    *Kibana*.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: The combination of *ElasticSearch*, *LogStash*, and *Kibana* is often referred
    to as the **ELK Stack**; sometimes, *FluentD* is used instead of *LogStash*, so
    then the combination is referred to as **EFK**; for details on using the OperatorHub
    operators to set up **ELK**/**EFK** in your own cluster, see [https://docs.openshift.com/container-platform/4.6/logging/cluster-logging-deploying.html](https://docs.openshift.com/container-platform/4.6/logging/cluster-logging-deploying.html).
    Note that there are other more enterprise-quality log analysis tools too, such
    as *LogDNA* or *Instana*.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at a *Kibana* dashboard:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.21 – A federated observability dashboard filtered for the IBM Stock
    Trader microservices'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17377_09_21.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.21 – A federated observability dashboard filtered for the IBM Stock
    Trader microservices
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: In *Figure 9.21*, we see log messages from the various microservices comprising
    the IBM Stock Trader application, interleaved based on the timestamp of when each
    JSON log message was sent. Being able to see all of the logging coming from all
    of the microservices in a cloud-native appliction in one dashboard, rather than
    having to go and view each microservice's output separately, greatly enhances
    the problem determination experience.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: 'An additional benefit of JSON logging is that it gives you control over what
    sources send their logs to the log analysis tool for your Kubernetes cluster.
    In addition to choices such as HTTPS access logs or audit records, one of the
    choices is to send trace records there, as we just discussed with the *traceSpec*
    setting (otherwise, you''d have to `kubectl cp` the `trace.log` file off of the
    pod to investigate the trace log or mount your own *Persistent Volume* (*PV*)
    into the `/logs` location of the container and the trace log would go there):'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: There are many other *day 2* operations you can perform with the operator. But
    this should get the point across that the operator is the one in control of all
    configurations for your application, so it is used to effect any changes when
    needed.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've now explored some of the benefits of having an operator help you out with
    both deployment and day 2 operations of a composite application to your Kubernetes
    cluster. While it is possible to deploy a given microservice without the use of
    an operator, having one guiding you is like having a co-pilot suggesting good
    default values where appropriate so that you get your application deployed with
    optimal configuration settings. And having one in the post-deployment stage, helping
    you with *day 2* operations such as scaling, upgrading, and problem determination,
    ensures you have the best experience maintaining your application once it is in
    production use.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: We've now covered all of the core MicroProfile features and have shown them
    in use in a real-world microservices-based application running in a Kubernetes
    platform such as OCP. Going forward, the remaining chapters will cover some of
    the auxiliary MicroProfile features (such as reactive messaging) and will look
    ahead to the future of MicroProfile beyond the current 4.x state.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经涵盖了所有核心的MicroProfile特性，并在运行在Kubernetes平台（如OCP）的基于微服务的实际应用中展示了它们的使用。展望未来，接下来的章节将涵盖一些辅助的MicroProfile特性（例如反应式消息传递），并展望MicroProfile在当前4.x状态之外的未来。
