["```java\nlibraryDependencies ++= Seq(\n  ws\n)\n```", "```java\nobject Email {\n\n  val logger = Logger(getClass)\n\n  private def send(emailIds: Seq[String], subject: String, content: String): Unit = {\n\n    var properties: Properties = new Properties()\n\n    try {\n\n      properties.load(new FileInputStream(\"/opt/appName/mail-config.properties\"))\n\n      val url: String = properties.getProperty(\"url\")\n\n      val apiKey: String = properties.getProperty(\"api\")\n\n      val from: String = properties.getProperty(\"from\")\n\n      val requestHolder: WSRequestHolder = WS.url(url).withAuth(\"api\", apiKey, WSAuthScheme.BASIC)\n      val requestData = Map(\n\n        \"from\" -> Seq(from),\n\n        \"to\" -> emailIds,\n\n        \"subject\" -> Seq(subject),\n\n        \"text\" -> Seq(content))\n\n      val response: Future[WSResponse] = requestHolder.post(requestData)\n\n      response.map(\n\n        res => {\n\n          val responseMsg: String = res.json.toString()\n\n          if (res.status == 200) {\n\n            logger.info(responseMsg)\n\n          } else {\n\n            logger.error(responseMsg)\n\n          }\n\n        }\n\n      )\n\n    } catch {\n\n      case exp: IOException =>\n\n        logger.error(\"Failed to load email configuration properties.\")\n\n    }\n\n  }\n\n  def sendVerification(userId: Long, emailId: String, host: String): Unit = {\n\n    val subject: String = \"Email Verification\"\n\n    val content: String =\n\n      s\"\"\"To verify your account on <appName>, please click on the link below\n\n         |\n\n         |http://$host/validate/user/$userId\"\"\".stripMargin\n\n    send(Seq(emailId), subject, content)\n\n  }\n\n  def recoverPassword(emailId: String, password: String): Unit = {\n\n    val subject: String = \"Password Recovery\"\n\n    val emailContent: String = s\"Your password has been reset.The new password is $password\"\n\n    send(Seq(emailId), subject, emailContent)\n\n  }\n\n}\n```", "```java\n  def displayCurrency = Action.async {\n\n    val url: String = \"http://www.webservicex.net/country.asmx\"\n\n    val wsReq: String = \"\"\"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n                          |<soap12:Envelope   >\n\n                          |  <soap12:Body>\n\n                          |    <GetCurrencies  />\n\n                          |  </soap12:Body>\n\n                          |</soap12:Envelope>\"\"\".stripMargin\n\n    val response: Future[WSResponse] = WS.url(url).withHeaders(\"Content-Type\" -> \"application/soap+xml\").post(wsReq)\n\n    response map {\n\n      data => Ok(data.xml)\n\n    }\n\n  }\n```", "```java\nWS.url(\"http://third-party.com/service?=serviceName\")\n.withAuth(\"api\",\"apiKey\", WSAuthScheme.BASIC)\n.withQueryString(\"month\" -> \"12\",\n        \"year\" -> \"2014\",\n        \"code\" -> \"code\")\n.withHeaders(HeaderNames.ACCEPT -> MimeTypes.JSON)\n.get\n```", "```java\nclass NingWSPlugin(app: Application) extends WSPlugin {\n\n  @volatile var loaded = false\n\n  override lazy val enabled = true\n\n  private val config = new DefaultWSConfigParser(app.configuration, app.classloader).parse()\n\n  private lazy val ningAPI = new NingWSAPI(app, config)\n\n  override def onStart() {\n    loaded = true\n  }\n\n  override def onStop() {\n    if (loaded) {\n      ningAPI.resetClient()\n      loaded = false\n    }\n  }\n\n  def api = ningAPI\n\n}\n```", "```java\nobject Application extends Controller {\n\n  def index = Action.async {\n\n    implicit request =>\n\n      OpenID.verifiedId.map(info => Ok(views.html.main(info.attributes)))\n\n        .recover {\n\n        case t: Throwable =>\n\n          Redirect(routes.Application.login())\n\n      }\n\n  }\n\n  def login = Action.async {\n\n    implicit request =>\n\n      val openIdRequestURL: String = \"https://me.yahoo.com\"\n\n      OpenID.redirectURL(\n\n        openIdRequestURL,\n\n        routes.Application.index.absoluteURL(),\n\n        Seq(\"email\" -> \"http://schema.openid.net/contact/email\",\n\n          \"name\" -> \"http://openid.net/schema/namePerson/first\"))\n\n        .map(url => Redirect(url))\n\n        .recover { case t: Throwable => Ok(t.getMessage) }\n\n  }\n\n}\n```", "```java\nval KEY: ConsumerKey = ConsumerKey(\"myAppKey\", \"myAppSecret\")\nval TWITTER: OAuth = OAuth(ServiceInfo(\n    \"https://api.twitter.com/oauth/request_token\",\n    \"https://api.twitter.com/oauth/access_token\",\n    \"https://api.twitter.com/oauth/authorize\", KEY),\n    true)\n\ndef authenticate = Action { request =>\n    TWITTER.retrieveRequestToken(\"http://localhost:9000/welcome\") match {\n      case Right(t) => {\n        Redirect(TWITTER.redirectUrl(t.token)).withSession(\"token\" -> t.token, \"secret\" -> t.secret)\n      }\n      case Left(e) => throw e\n    }\n  }\n```", "```java\nOAuth(info: ServiceInfo, use10a: Boolean = true)\n```", "```java\ndef authenticate = Action { request =>\n    request.getQueryString(\"oauth_verifier\").map { verifier =>\n      val tokenPair = sessionTokenPair(request).get\n      TWITTER.retrieveAccessToken(tokenPair, verifier) match {\n        case Right(t) => {\n          Redirect(routes.Application.welcome()).withSession(\"token\" -> t.token, \"secret\" -> t.secret)\n        }\n        case Left(e) => throw e\n      }\n    }.getOrElse(\n        TWITTER.retrieveRequestToken(\"http://localhost:9000/twitterLogin\") match {\n      case Right(rt) =>\n        Redirect(TWITTER.redirectUrl(rt.token)).withSession(\"token\" -> rt.token, \"secret\" -> rt.secret)\n      case Left(e) => throw e\n    })\n  }\n\n  private def sessionTokenPair(implicit request: RequestHeader): Option[RequestToken] = {\n    for {\n      token <- request.session.get(\"token\")\n      secret <- request.session.get(\"secret\")\n    } yield {\n      RequestToken(token, secret)\n    }\n  }\n\n  def welcome = Action.async {\n    implicit request =>\n      sessionTokenPair match {\n        case Some(credentials) => {\n          WS.url(\"https://api.twitter.com/1.1/statuses/home_timeline.json\")\n            .sign(OAuthCalculator(KEY, credentials))\n            .get()\n            .map(result => Ok(result.json))\n        }\n        case _ => Future.successful(Redirect(routes.Application.authenticate()).withNewSession)\n      }\n\n  }\n```"]