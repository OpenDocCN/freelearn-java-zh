- en: '14'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '14'
- en: Profiling Tools
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 性能分析工具
- en: As the complexity of our Java applications increases, the need to gain insights
    into how they use system resources such as CPU and memory becomes increasingly
    important and a critical aspect of ensuring our applications perform efficiently.
    This is where profiling tools come in; they can help us identify issues such as
    bottlenecks and memory leaks so that we can enhance our applications to improve
    the user experience and overall performance.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们的 Java 应用程序复杂性的增加，深入了解它们如何使用系统资源，如 CPU 和内存的需求变得越来越重要，并且是确保我们的应用程序高效运行的关键方面。这正是性能分析工具发挥作用的地方；它们可以帮助我们识别瓶颈和内存泄漏等问题，以便我们改进应用程序，提升用户体验和整体性能。
- en: This chapter takes a deep dive into profiling and profiling tools. We will start
    with an introduction to profiling and its importance to our ability to fine-tune
    our applications for optimal performance. Categories of profiling tools and their
    uses are also covered to help give you a basic understanding, leading to a review
    of specific profiling tools.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章深入探讨性能分析和性能分析工具。我们将从性能分析及其对我们优化应用程序以实现最佳性能能力的重要性进行介绍。还将涵盖性能分析工具的分类及其用途，以帮助您获得基本理解，并最终对特定的性能分析工具进行回顾。
- en: We will cover Java profiling tools bundled with the **Java Development Kit**
    (**JDK**) and ones embedded in **Integrated Development Environments** (**IDEs**),
    such as IntelliJ IDEA, Eclipse, and NetBeans. Additionally, third-party profiling
    tools will be reviewed, including YourKit Java Profiler, JProfiler, and VisualVM.
    The intention is to provide you with a firm understanding of the various profiling
    tools available, their strengths and weaknesses, and practical use cases so that
    you can determine which tool is best suited for your needs and use them effectively.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖与 Java 开发工具包（**JDK**）捆绑的性能分析工具以及嵌入在集成开发环境（**IDE**）中的性能分析工具，例如 IntelliJ
    IDEA、Eclipse 和 NetBeans。此外，还将审查第三方性能分析工具，包括 YourKit Java Profiler、JProfiler 和
    VisualVM。目的是为您提供对各种性能分析工具的深入了解，包括它们的优缺点和实际用例，以便您确定哪种工具最适合您的需求并有效地使用它们。
- en: Our coverage of profiling tools includes a comparative analysis to help you
    evaluate performance overhead, tool accuracy, ease of use, integration issues,
    and costs. We will end the chapter with a look at future Java profiling trends,
    including profiling tool advancements, emerging standards, and the integration
    of **Artificial Intelligence** (**AI**) and **Machine Learning** (**ML**) for
    further performance tuning.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对性能分析工具的覆盖包括比较分析，以帮助您评估性能开销、工具准确性、易用性、集成问题和成本。我们将以对未来的 Java 性能分析趋势的探讨结束本章，包括性能分析工具的进步、新兴标准和人工智能（**AI**）与机器学习（**ML**）的集成，以进一步优化性能。
- en: By the end of this chapter, you should have a foundational understanding of
    profiling tools and be able to leverage the knowledge you gained from hands-on
    exercises to improve the performance of your Java applications.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您应该对性能分析工具有一个基础的了解，并能够利用从实际练习中获得的知识来提高您的 Java 应用程序的性能。
- en: 'This chapter covers the following main topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了以下主要主题：
- en: An introduction to profiling tools
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能分析工具简介
- en: Profilers bundled in the JDK
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JDK 内置的性能分析器
- en: IDE-embedded profilers
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IDE 内置的性能分析器
- en: Additional profilers
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他性能分析器
- en: A comparative analysis of profiling tools
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能分析工具比较分析
- en: Practical profiling strategies
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实践性能分析策略
- en: Case studies
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 案例研究
- en: Future trends in Java profiling
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 性能分析的未来趋势
- en: An introduction to profiling tools
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 性能分析工具简介
- en: Profiling tools play a critical role in performance tuning and proactive application
    enhancements to support high-performance Java applications.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 性能分析工具在性能调整和主动应用程序增强中发挥着关键作用，以支持高性能 Java 应用程序。
- en: Profiling
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 性能分析
- en: Profiling is the process of analyzing software at runtime with the goal of identifying
    performance issues, including bottlenecks, resource use, and optimization opportunities.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 性能分析是分析软件运行时的过程，其目标是识别性能问题，包括瓶颈、资源使用和优化机会。
- en: Once we build and test our software, it moves into production. This is where
    profiling occurs, during runtime. Using profiling tools, we can gain detailed
    insights into the runtime behavior of our applications. The goal is to have efficient
    code and our systems to perform optimally, including low latency, high reliability,
    and high availability. It is not enough for our applications to perform accurately;
    they also need to perform efficiently. The use of profiling tools allows us to
    pinpoint performance issues so we can further optimize our code.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们构建和测试了我们的软件，它就会进入生产阶段。这是性能分析发生的地方，即在运行时。使用性能分析工具，我们可以深入了解我们应用程序的运行时行为。目标是拥有高效的代码和我们的系统以最佳性能运行，包括低延迟、高可靠性和高可用性。我们的应用程序不仅要准确执行，还需要高效执行。使用性能分析工具使我们能够定位性能问题，以便我们进一步优化我们的代码。
- en: The importance of profiling in performance tuning
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 性能调优中性能分析的重要性
- en: 'Let’s look at five specific reasons that illustrate the importance of profiling
    to support performance tuning:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看五个具体的原因，这些原因说明了性能分析对支持性能调优的重要性：
- en: '**Application responsiveness**: At the heart of performance tuning is ensuring
    that our applications are responsive. Users should not be subjected to high latency.
    Profiling tools help us analyze how our resources are used, shedding light on
    opportunities for improvement.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序响应性**：性能调优的核心是确保我们的应用程序具有响应性。用户不应遭受高延迟。性能分析工具帮助我们分析我们的资源是如何使用的，揭示了改进的机会。'
- en: '**Bottlenecks**: The use of profiling tools can help us identify performance
    bottlenecks and even potential bottlenecks. This allows us to take a proactive
    approach to performance tuning and helps us avoid catastrophic bottlenecks in
    the future.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**瓶颈**：使用性能分析工具可以帮助我们识别性能瓶颈甚至潜在的瓶颈。这使我们能够采取主动的性能调优方法，并帮助我们避免未来的灾难性瓶颈。'
- en: '**Continuous improvement**: Software systems are not developed, deployed, and
    forgotten. We maintain our systems and strive to continually improve them. Systems
    that perform at desired levels today might underperform when a new operating system
    is released, or other environmental factors change. This requires a continuous
    improvement mindset. Continually profiling our applications and addressing optimization
    opportunities can help ensure our systems remain responsive and efficient.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续改进**：软件系统不是开发、部署后就不再关注了。我们维护我们的系统，并努力持续改进它们。今天表现良好的系统可能在新的操作系统发布或其它环境因素改变时表现不佳。这需要一种持续改进的心态。持续地对我们的应用程序进行性能分析并解决优化机会可以帮助确保我们的系统保持响应性和高效性。'
- en: '**Resource utilization**: The use of hardware resources such as CPU and memory
    should be closely monitored, as inefficient use of these resources can result
    in system lag and suboptimal input/output operations. Profiling tools can help
    us identify areas that can be optimized.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源利用率**：应密切监控硬件资源（如CPU和内存）的使用，因为对这些资源的低效使用可能导致系统延迟和次优的输入/输出操作。性能分析工具可以帮助我们识别可以优化的区域。'
- en: '**Scalability**: The larger our applications are, the more significant even
    a minor performance issue can be to overall system performance. The use of profiling
    tools helps us identify opportunities to enhance performance and address any related
    issues that could become more pronounced as our application scales, due to increased
    demand.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性**：我们的应用程序越大，即使是微小的性能问题对整体系统性能的影响也越显著。使用性能分析工具可以帮助我们识别提升性能和解决任何可能随着应用程序扩展而变得更加明显的相关问题的机会，这可能是由于需求的增加。'
- en: Types of profiling tools and their uses
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 性能分析工具的类型及其用途
- en: 'There are seven broad categories of profiling tools, each with its own focus
    area or purpose. Let’s review those now:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 存在着七种广泛的性能分析工具类别，每个类别都有自己的关注领域或目的。现在让我们来回顾一下：
- en: '**CPU profilers**: This category of profiles analyzes an application’s CPU
    usage. They can identify specific methods in our applications that are the most
    CPU-intensive.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CPU性能分析器**：这一类性能分析器分析应用程序的CPU使用情况。它们可以识别我们应用程序中最占用CPU资源的方法。'
- en: '**IDE embedded profilers**: Most major IDEs (e.g., NetBeans, Eclipse, and IntelliJ
    IDEA) have built-in profiling tools. Because they are part of the IDE, they seamlessly
    integrate with the development environment. This makes them especially easy to
    use.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IDE内嵌性能分析器**：大多数主要的IDE（例如，NetBeans、Eclipse和IntelliJ IDEA）都有内置的性能分析工具。因为它们是IDE的一部分，所以它们可以无缝地与开发环境集成。这使得它们特别易于使用。'
- en: '**Input/output profilers**: These profilers specifically focus on our application’s
    input/output operations. If our input/output processes are slow or inefficient,
    these profilers can bring them to light so that we can refine operations such
    as file handling, database interactions, and network communication.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输入/输出分析器**：这些分析器专门关注我们的应用程序的输入/输出操作。如果我们的输入/输出过程缓慢或效率低下，这些分析器可以将它们暴露出来，以便我们可以优化文件处理、数据库交互和网络通信等操作。'
- en: '**Memory profilers**: Memory profilers give us a window into memory allocation
    and memory use. This can help us identify actual or potential memory leaks and
    identify memory consumption optimization opportunities. We can use this category
    of profiler to provide insights into garbage collection, memory retention, and
    even object life cycles.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内存分析器**：内存分析器为我们提供了内存分配和内存使用的窗口。这可以帮助我们识别实际或潜在的内存泄漏，并识别内存消耗优化的机会。我们可以使用这类分析器来深入了解垃圾收集、内存保留，甚至对象生命周期。'
- en: '**Network profilers**: As the name suggests, this category of profilers specializes
    in analyzing an application’s network communications. These profilers can help
    us identify latency issues and to understand how bandwidth is being used. Network
    profilers also help us identify suboptimal or inefficient network protocols.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络分析器**：正如其名所示，这类分析器专门分析应用程序的网络通信。这些分析器可以帮助我们识别延迟问题，并了解带宽的使用情况。网络分析器还可以帮助我们识别次优或不高效的网络协议。'
- en: '**Specialized profilers**: This is a category of profilers that provide tailored
    features for specific performance situations. They can also be used for specific
    environments (e.g., distributed systems or real-time systems) or specific scenarios.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**专用分析器**：这是一类为特定性能情况提供定制功能的分析器。它们也可以用于特定环境（例如，分布式系统或实时系统）或特定场景。'
- en: '**Thread profilers**: Thread profilers monitor thread activity and are especially
    useful in multithreaded environments. This category of profiler helps us detect
    thread contention issues and potential deadlocks and identifies opportunities
    to optimize thread management.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**线程分析器**：线程分析器监控线程活动，在多线程环境中特别有用。这类分析器帮助我们检测线程竞争问题和潜在的死锁，并识别优化线程管理的机遇。'
- en: It is important to understand what profiling tools are and their categories
    and uses. This knowledge can help you select the most appropriate tool for your
    performance-related goals and system requirements.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 理解分析工具及其类别和使用方法非常重要。这些知识可以帮助您选择最适合您性能目标和系统要求的最合适的工具。
- en: Profilers bundled in the JDK
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JDK 中的分析器捆绑
- en: The JDK includes profiling tools that can provide us with valuable insights
    into our Java application’s performance. The use of these tools is highly recommended
    to identify performance issues and opportunities for performance fine-tuning.
    This section explores the primary profilers that are built-in to the JDK – JVisualVM
    and **Java Mission** **Control** (**JMC**).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: JDK 包含了可以为我们提供关于 Java 应用程序性能宝贵见解的分析工具。强烈建议使用这些工具来识别性能问题和性能微调的机会。本节探讨了 JDK 内置的主要分析器——JVisualVM
    和 **Java 使命控制**（**JMC**）。
- en: JVisualVM
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JVisualVM
- en: The **JVisualVM**, short for **Java Visual Virtual Machine**, is a robust profiling
    tool built into the JDK. It offers an impressive set of features that include
    monitoring, profiling, and troubleshooting Java applications.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**JVisualVM**，即 **Java 可视化虚拟机**，是 JDK 内置的一个强大的分析工具。它提供了一套令人印象深刻的特性，包括监控、分析和故障排除
    Java 应用程序。'
- en: An overview and features
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 概述和功能
- en: JVisualVM provides a graphical user interface that combines several JDK tools,
    including JConsole. The interface is displayed in the following figure.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: JVisualVM 提供了一个图形用户界面，它结合了多个 JDK 工具，包括 JConsole。界面如图所示。
- en: '![Figure 14.1: The JVisualVM graphical user interface](img/B21942_14_1.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.1：JVisualVM 图形用户界面](img/B21942_14_1.jpg)'
- en: 'Figure 14.1: The JVisualVM graphical user interface'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.1：JVisualVM 图形用户界面
- en: 'The key features of JVisualVM are summarized as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: JVisualVM 的关键特性总结如下：
- en: '**Heap dump analysis**: JVisualVM is able to capture heap dumps and analyze
    them for us. This can help us gain insight into memory use and identify real or
    potential memory leaks.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**堆转储分析**：JVisualVM 能够捕获堆转储并为我们分析它们。这可以帮助我们深入了解内存使用情况，并识别实际或潜在的内存泄漏。'
- en: '**Plugin integration**: This tool’s functionality can be extended by a multitude
    of available plugins. The plugin repository is available via the Tools menu, open
    and displayed in the following figure.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**插件集成**：此工具的功能可以通过众多可用的插件进行扩展。插件库可通过工具菜单访问，如下图所示。'
- en: '![Figure 14.2: The JVisualVM plugin repository](img/B21942_14_2.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图14.2：JVisualVM插件库](img/B21942_14_2.jpg)'
- en: 'Figure 14.2: The JVisualVM plugin repository'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.2：JVisualVM插件库
- en: '**Monitoring**: JVisualVM can monitor, in real time, our application’s memory
    consumption, garbage collection, thread activity, and CPU usage.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控**：JVisualVM可以实时监控我们应用程序的内存消耗、垃圾回收、线程活动和CPU使用。'
- en: '**Profiling**: This tool offers the ability to conduct detailed profiling of
    CPU and memory use. This can help identify memory leaks and bottlenecks.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置文件分析**：此工具提供了对CPU和内存使用进行详细配置文件分析的能力。这有助于识别内存泄漏和瓶颈。'
- en: '**Thread analysis**: JVisualVM can be used to monitor and analyze our application’s
    thread states and thread activities.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**线程分析**：JVisualVM可以用来监控和分析我们应用程序的线程状态和线程活动。'
- en: Use cases and examples
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用例和示例
- en: We can use JVisualVM for multiple use cases, and it is especially useful in
    the development, testing, and production phases. This tool provides us with detailed
    CPU and memory usage insights. We can use this tool to see which of our methods
    consumes the most CPU time. We can also look at memory consumption, object allocations,
    and garbage collection to help us optimize our application’s memory use.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用JVisualVM进行多种用例，它在开发、测试和生产阶段特别有用。此工具为我们提供了详细的CPU和内存使用洞察。我们可以使用此工具查看哪些方法消耗了最多的CPU时间。我们还可以查看内存消耗、对象分配和垃圾回收，以帮助我们优化应用程序的内存使用。
- en: As an example, consider a situation where we have a web application whose users
    report occasional lag. We can use JVisualVM to monitor our application’s CPU and
    memory use. This can help us identify spikes. From there, we can analyze thread
    dumps to determine the source of the problem. In this scenario, it could be as
    simple as a single Java method or thread that causes the occasional lag. Using
    the profiling tool can help us quickly get to the core of the issue so that we
    can refine our code accordingly.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑一种情况，我们有一个用户报告偶尔出现延迟的Web应用程序。我们可以使用JVisualVM来监控我们应用程序的CPU和内存使用。这有助于我们识别峰值。从那里，我们可以分析线程转储以确定问题的来源。在这种情况下，问题可能只是一个导致偶尔延迟的单个Java方法或线程。使用配置文件分析工具可以帮助我们快速找到问题的核心，从而相应地改进我们的代码。
- en: JMC
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JMC
- en: JMC is another powerful JDK tool that we can use to profile and monitor our
    Java applications, most specifically in production environments. As you can see
    from the screenshot below, JMC includes the **JMX Console** and **Flight Recorder**.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: JMC是另一个强大的JDK工具，我们可以用它来配置文件和监控我们的Java应用程序，尤其是在生产环境中。如图下截图所示，JMC包括**JMX控制台**和**飞行记录器**。
- en: '![Figure 14.3: The JMC welcome screen](img/B21942_14_3.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图14.3：JMC欢迎屏幕](img/B21942_14_3.jpg)'
- en: 'Figure 14.3: The JMC welcome screen'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.3：JMC欢迎屏幕
- en: An overview and features
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 概述和功能
- en: The **Java Management Extensions** (**JMX**) console is used to monitor and
    manage our Java applications. The **Flight Recorder** is for continuous monitoring
    and profiling. It collects detailed performance data, with limited impact on application
    performance. The events recorded include method invocations, memory allocation,
    thread activity, and input/output operations. The **Java Flight Recorder** (**JFR**)
    is the core component of JMC and can be used to record our running applications
    and then analyze the results, giving us insights into CPU usage, method-specific
    execution times, data on memory allocations, and so on.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**Java管理扩展**（**JMX**）控制台用于监控和管理我们的Java应用程序。**飞行记录器**用于持续监控和配置文件分析。它收集详细性能数据，对应用程序性能的影响有限。记录的事件包括方法调用、内存分配、线程活动和输入/输出操作。**Java飞行记录器**（**JFR**）是JMC的核心组件，可以用来记录我们的运行应用程序，然后分析结果，给我们提供关于CPU使用、特定方法执行时间、内存分配数据等方面的洞察。'
- en: Leveraging the capabilities of JMC and JVisualVM can result in deep insights
    into our application’s performance, empowering us to optimize our resource use
    and improve the responsiveness of our applications. In the next section, we will
    review profiling tools embedded in IDEs.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 利用JMC和JVisualVM的功能可以深入了解我们应用程序的性能，使我们能够优化资源使用并提高应用程序的响应速度。在下一节中，我们将回顾IDE内嵌的配置文件分析工具。
- en: IDE-embedded profilers
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IDE内嵌的配置文件分析器
- en: Java developers use built-in profiling tools with their favorite IDEs. Using
    these profilers offers a convenient method of analyzing our software directly
    within our development environment of choice. This section explores the built-in
    capabilities of the IntelliJ IDEA, Eclipse, and NetBeans IDEs.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Java开发者使用他们最喜欢的IDE中的内置分析工具。使用这些分析器为我们提供了一个方便的方法，可以直接在我们的首选开发环境中分析我们的软件。本节探讨了IntelliJ
    IDEA、Eclipse和NetBeans IDE的内置功能。
- en: The IntelliJ IDEA profiler
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IntelliJ IDEA分析器
- en: 'The **IntelliJ IDEA profiler** allows us to profile our Java applications from
    within the IDE. This powerful feature is only available in the commercial edition
    of the IDE (**IntelliJ IDEA Ultimate**), so if you are using the **Community Edition**
    (**CE**), you will not be able to use the IntelliJ IDEA profiler. Integration
    and setup are simple; here are the steps:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**IntelliJ IDEA分析器**允许我们在IDE内部对Java应用程序进行分析。这个强大的功能仅适用于IDE的商业版（**IntelliJ IDEA
    Ultimate**），因此如果您使用的是**社区版**（**CE**），则无法使用IntelliJ IDEA分析器。集成和设置都很简单；以下是步骤：'
- en: Open IntelliJ IDEA.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开IntelliJ IDEA。
- en: Write or load your Java project.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写或加载您的Java项目。
- en: Use the **Run** | **Profile** menu option to start profiling.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**运行** | **分析**菜单选项来启动分析。
- en: Select the type of profiling you want (CPU or memory).
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您想要的分析类型（CPU或内存）。
- en: With CPU profiling, the tool can identify methods in your code that consume
    the most CPU time. Call trees are also provided that show code paths and overall
    resource use (CPU and memory). The memory profiling capabilities of the IntelliJ
    IDEA Profiler include the ability to trace object allocations, analyze garbage
    collection efficacy, and detect memory leaks.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 使用CPU分析，该工具可以识别代码中消耗最多CPU时间的函数。还提供了调用树，显示了代码路径和整体资源使用情况（CPU和内存）。IntelliJ IDEA分析器的内存分析功能包括跟踪对象分配、分析垃圾收集效率以及检测内存泄漏的能力。
- en: Eclipse’s Test and Performance Tools Platform
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Eclipse的测试和性能工具平台
- en: 'The Eclipse IDE is popular for Java developers, and it previously had an embedded
    profiling tool called the **Test and Performance Tools Platform** (**TPTP**).
    It was provided as a plugin, available from the Eclipse Marketplace. The key features
    included are as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse IDE对于Java开发者来说很受欢迎，它之前有一个内置的分析工具，称为**测试和性能工具平台**（**TPTP**）。它作为插件提供，可在Eclipse市场获得。关键特性如下：
- en: CPU profiling
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CPU性能分析
- en: Memory profiling
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存分析
- en: Thread analysis
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线程分析
- en: Input/output profiling
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入/输出分析
- en: Network activity
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络活动
- en: TPTP is mentioned here so that developers with Eclipse are not left wondering
    what embedded profiling tools Eclipse has. TPTP was archived, likely due to the
    increasing power of the JDK built-in profiling tools.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在此处提及TPTP是为了让使用Eclipse的开发者不会对Eclipse内置的分析工具感到困惑。TPTP已被存档，可能是因为JDK内置分析工具功能的不断增强。
- en: NetBeans Profiler
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NetBeans分析器
- en: The NetBeans Profiler is integrated into the NetBeans IDE and has a top-level
    **Profile** menu item for easy configuration and access. The tool can conduct
    performance analysis in the categories of telemetry, methods, objects, threads,
    locks, and SQL queries.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: NetBeans分析器集成到NetBeans IDE中，并有一个顶级的**分析**菜单项，便于配置和访问。该工具可以在遥测、方法、对象、线程、锁和SQL查询等类别中进行性能分析。
- en: The following screenshot shows the four main components of the tool’s dashboard
    when **Telemetry profiling** is selected.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了在**遥测分析**被选中时，工具仪表板的四个主要组件。
- en: '![Figure 14.4: The NetBeans telemetry profiler window](img/B21942_14_4.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图14.4：NetBeans遥测分析器窗口](img/B21942_14_4.jpg)'
- en: 'Figure 14.4: The NetBeans telemetry profiler window'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.4：NetBeans遥测分析器窗口
- en: The object profiler, shown in the following figure, provides real-time analysis
    so that you can review your application’s performance at runtime.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 下图所示的对象分析器提供了实时分析，以便您可以在运行时审查应用程序的性能。
- en: '![Figure 14.5: The NetBeans object profiler window](img/B21942_14_5.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图14.5：NetBeans对象分析器窗口](img/B21942_14_5.jpg)'
- en: 'Figure 14.5: The NetBeans object profiler window'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.5：NetBeans对象分析器窗口
- en: Understanding the profiling tools that are integrated with your IDE can help
    you become more efficient with your time, as these integrated tools are the easiest
    to configure and use when compared to third-party tools, and in some cases, they
    are easier than using the profiling tools bundled with the JDK.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 了解与您的IDE集成的分析工具可以帮助您更有效地利用时间，因为这些集成工具与第三方工具相比，配置和使用起来最为简便，在某些情况下，甚至比使用JDK捆绑的分析工具还要容易。
- en: Additional profilers
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他分析器
- en: So far, we have looked at profiling tools that are built-in to the JDK and ones
    embedded in an IDE. There is a third category of profilers, ones that are external
    to the JDK and IDEs. This section reviews three of the most prevalent profilers
    in this category. These are specialized tools that can give us deeper insights,
    based on sophisticated analysis of our runtime applications.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经查看了一些内置在JDK和IDE中的分析工具。还有一个第三类分析器，它们是JDK和IDE之外的外部分析器。本节回顾了该类别中最普遍的三个分析器。这些是专门工具，可以根据我们对运行时应用程序的复杂分析提供更深入的见解。
- en: YourKit Java Profiler
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: YourKit Java Profiler
- en: 'YourKit Javak Profiler is a robust profiling tool that is available with an
    open source license. Advanced features and support require purchasing a license.
    The key features and capabilities of this tool are listed as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: YourKit Javak Profiler是一个具有开源许可的强大分析工具。高级功能和支持需要购买许可证。此工具的关键功能和能力如下：
- en: '**Continuous Integration**/**Continuous Delivery** (**CI**/**CD**) integration'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续集成**/**持续交付**（**CI**/**CD**）集成'
- en: CPU profiling
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CPU分析
- en: Database profiling
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库分析
- en: Input/output profiling
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入/输出分析
- en: Memory profiling
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存分析
- en: Remote server profiling
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 远程服务器分析
- en: Thread profiling
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线程分析
- en: JProfiler
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JProfiler
- en: 'The JProfiler profiling tool is a commercial application that is said to be
    an intuitive, all-in-one profiler for Java applications. It has a friendly, easy-to-use
    interface and powerful capabilities that include the following:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: JProfiler分析工具是一个商业应用程序，据说是一个直观的、适用于Java应用程序的全能分析器。它具有友好、易于使用的界面和以下强大功能：
- en: CPU profiling
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CPU分析
- en: Heap and object graph analysis
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 堆和对象图分析
- en: IDE integration
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IDE集成
- en: Memory profiling
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存分析
- en: Remove server profiling
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除服务器分析
- en: SQL profiling
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQL分析
- en: Thread profiling
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线程分析
- en: VisualVM plugins and extensions
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: VisualVM插件和扩展
- en: We previously covered VisualVM as a JDK-bundled profiling tool. It is featured
    in this section because there are a host of third-party plugins and extensions
    that can be used to enhance VisualVM.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前介绍了VisualVM作为JDK捆绑的分析工具。本节将其包括在内，因为有许多第三方插件和扩展可以用来增强VisualVM。
- en: 'The following list shows some of the plugins available:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表展示了可用的部分插件：
- en: '**Buffer Monitor**: Can be used to monitor direct buffer use.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓冲区监控器**：可用于监控直接缓冲区使用。'
- en: '**Heap Walker**: This plugin provides finite memory and heap analysis.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**堆分析器**：此插件提供有限内存和堆分析。'
- en: '**Kill Application**: This plugin facilitates terminating non-responsive monitoring
    processes.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**终止应用程序**：此插件便于终止无响应的监控进程。'
- en: '**Sampler plugin**: Provides detailed CPU and memory sampling options.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**采样插件**：提供详细的CPU和内存采样选项。'
- en: '**Startup Profiler**: This plugin facilitates the use of instrumented profiling
    from startups. This is useful for applications with a short runtime.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启动分析器**：此插件便于从启动时使用仪器分析。这对于运行时间较短的应用程序很有用。'
- en: '**Thread Inspector**: Provides advanced thread analysis.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**线程检查器**：提供高级线程分析。'
- en: '**Tracer**: This is a framework for detailed monitoring, using probes.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**追踪器**：这是一个使用探针进行详细监控的框架。'
- en: '**VisualGC**: Provides deep analysis and visualization for the garbage collector.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**VisualGC**：为垃圾收集器提供深入分析和可视化。'
- en: There are additional plugins and extensions for the VisualVM Profiler. In addition,
    developers can create their own custom plugins if needed.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 除了VisualVM分析器外，还有额外的插件和扩展。此外，如果需要，开发者可以创建自己的自定义插件。
- en: A comparative analysis of profiling tools
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析工具的比较分析
- en: 'One of the great things about using profiling tools is that we have several
    options available to us. This section reviews the top six profiling tools featured
    in this chapter, using the following categories:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 使用分析工具的一个好处是我们有多个选项可供选择。本节使用以下类别回顾了本章中介绍的六个顶级分析工具：
- en: Performance overhead
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能开销
- en: Accuracy
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准确性
- en: Ease of use
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 易用性
- en: Integration
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成
- en: Cost
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成本
- en: By following each category analysis, we will score each of these profiling tools
    to see how they stack up against each other.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 通过对每个类别的分析，我们将对每个这些分析工具进行评分，以查看它们之间的对比。
- en: Performance overhead
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 性能开销
- en: 'When comparing profiling tools, it is important to consider their performance
    overhead. This factor can help you select the right tool for your use case. Here
    is a review of the performance overhead for our six selected profiling tools:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 比较分析工具时，考虑它们的性能开销很重要。这个因素可以帮助你选择适合你用例的正确工具。以下是六个选定分析工具的性能开销回顾：
- en: '**IntelliJ IDEA Profiler**: This tool has moderate overhead and is suitable
    for development and testing; however, it is not ideal for production environments,
    especially with high-load applications.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IntelliJ IDEA Profiler**：这款工具的开销适中，适用于开发和测试；然而，它并不适合生产环境，尤其是在高负载应用中。'
- en: '**JMC**: Minimal overhead is one of JMC’s strongest features. This is especially
    evident when using JFR. JMC is designed for production use and typically has negligible
    impact on performance.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JMC**：最小开销是 JMC 最强的特点之一。这在使用 JFR 时尤为明显。JMC 设计用于生产使用，通常对性能的影响可以忽略不计。'
- en: '**JProfiler**: This tool has moderate overhead but a high level of detailed
    profiling analysis, giving developers a tough decision regarding the balance between
    detailed insights and increased overhead. Profiling with this tool is appropriate
    for development and testing environments and controlled production instances.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JProfiler**：这款工具的开销适中，但具有高度详细的分析能力，使得开发者需要在详细洞察和增加开销之间做出艰难的决定。使用此工具进行开发和测试环境以及受控的生产实例的剖析是合适的。'
- en: '**JVisualVM**: This profiling tool’s performance overhead varies between low
    and moderate, based on the depth of profiling desired. It is suitable for development
    and production environments.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JVisualVM**：该分析工具的性能开销介于低到中等之间，取决于所需的剖析深度。它适用于开发和生产环境。'
- en: '**NetBeans Profiler**: This tool has moderate overhead and is only suitable
    for non-production environments.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NetBeans Profiler**：这款工具的开销适中，仅适用于非生产环境。'
- en: '**YourKit Java Profiler**: This tool has a high level of configurability to
    help manage overhead. It is appropriate for both production and non-production
    environments.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**YourKit Java Profiler**：这款工具具有高度的可配置性，有助于管理开销。它适用于生产和非生产环境。'
- en: Accuracy
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准确度
- en: 'Not all profiling tools are 100% accurate, and it is important to have a firm
    understanding of your tool’s accuracy level. Here is a review of the accuracy
    of your featured profiling tools:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有分析工具都能达到100%的准确度，了解您工具的准确度水平非常重要。以下是您特色分析工具准确度的综述：
- en: '**IntelliJ IDEA Profiler**: This tool’s greatest accuracy is with CPU and memory
    profiling. Accuracy takes a dip when profiling threads, and it can increase performance
    overhead.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IntelliJ IDEA Profiler**：该工具在CPU和内存剖析方面具有最高的准确度。当剖析线程时，准确度会下降，并且可能会增加性能开销。'
- en: '**JMC**: This is a high-accuracy profiling tool that delivers precise results
    with minimal performance impact, even in production environments.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JMC**：这是一款高精度分析工具，即使在生产环境中也能以最小的性能影响提供精确的结果。'
- en: '**JProfiler**: This profiling tool provides highly accurate results along with
    detailed visualizations.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JProfiler**：这款分析工具提供高度准确的结果以及详细的可视化。'
- en: '**JVisualVM**: While this profiling tool provides accurate sampling and data,
    the need for high precision increases performance overhead.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JVisualVM**：虽然这款分析工具提供了准确采样和数据，但需要更高精度的需求会增加性能开销。'
- en: '**NetBeans Profiler**: This tool provides accurate CPU and memory profiling
    and real-time thread analysis.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NetBeans Profiler**：这款工具提供了准确的CPU和内存剖析以及实时线程分析。'
- en: '**YourKit Java Profiler**: This profiling tool renders highly accurate results
    in CPU, memory, and thread analysis.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**YourKit Java Profiler**：这款分析工具在CPU、内存和线程分析方面提供高度准确的结果。'
- en: Ease of use
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 易用性
- en: 'Ease of use is another important factor that we need to consider when selecting
    a profiling tool. If a tool is difficult to use and takes considerable time, it
    might not be the right tool for you. Here is a review of the ease of use for our
    featured tools:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 易用性是我们在选择分析工具时需要考虑的另一个重要因素。如果一个工具难以使用且需要大量时间，可能不是适合您的工具。以下是关于我们特色工具易用性的综述：
- en: '**IntelliJ IDEA Profiler**: This tool is seamlessly integrated into the IntelliJ
    IDEA IDE, making it intuitive and easy to use.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IntelliJ IDEA Profiler**：这款工具无缝集成到 IntelliJ IDEA IDE 中，使其直观且易于使用。'
- en: '**JMC**: This is an advanced tool that can require a concerted effort to learn.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JMC**：这是一款高级工具，可能需要集中精力学习。'
- en: '**JProfiler**: This tool is renowned for its ease of use. It is also thoroughly
    documented.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JProfiler**：这款工具以其易用性而闻名。它也经过了详尽的文档记录。'
- en: '**JVisualVM**: This profiling tool is beginner-friendly and has a simplistic
    user interface.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JVisualVM**：这款分析工具对初学者友好，具有简单的用户界面。'
- en: '**NetBeans Profiler**: This tool is integrated into the NetBeans IDE, making
    it easy to use.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NetBeans Profiler**：这款工具集成到 NetBeans IDE 中，使其易于使用。'
- en: '**YourKit Java Profiler**: This profiling tool has an intuitive user interface
    and is user-friendly.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**YourKit Java Profiler**：此分析工具具有直观的用户界面，易于使用。'
- en: Integration
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集成
- en: 'Developers tend to favor profiling tools that have deep integrations. Here
    is a review of that characteristic for each of our six selected profiling tools:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者倾向于选择具有深度集成的分析工具。以下是针对我们六个选定的分析工具的该特性的回顾：
- en: '**IntelliJ IDEA Profiler**: This tool is deeply integrated into the IntelliJ
    IDEA IDE and supports custom workflows.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IntelliJ IDEA Profiler**：此工具深度集成到 IntelliJ IDEA IDE 中，并支持自定义工作流程。'
- en: '**JMC**: JMC is bundled with the JDK, making integration with JVM-based applications
    seamless.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JMC**：JMC 与 JDK 捆绑，使得与基于 JVM 的应用程序的集成无缝。'
- en: '**JProfiler**: This tool easily integrates with the most popular build tools
    and IDEs.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JProfiler**：此工具可以轻松集成到最流行的构建工具和 IDE 中。'
- en: '**JVisualVM**: This tool is integrated with the IDE and is easy to use.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JVisualVM**：此工具与 IDE 集成，易于使用。'
- en: '**NetBeans Profiler**: This tool is fully integrated into the NetBeans IDE.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NetBeans Profiler**：此工具完全集成到 NetBeans IDE 中。'
- en: '**YourKit Java Profiler**: This profiling tool supports integration with the
    major IDEs and CI/CD.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**YourKit Java Profiler**：此分析工具支持与主要 IDE 和 CI/CD 集成。'
- en: Cost and licensing considerations
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 成本和许可考虑因素
- en: 'The cost of profiling tools can be a significant factor. Independent developers
    tend to favor free tools, while large teams might opt to pay for more robust tools.
    Here is the cost factor for our six tools:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 分析工具的成本可能是一个重要因素。独立开发者倾向于选择免费工具，而大型团队可能会选择支付更多功能强大的工具。以下是我们的六款工具的成本因素：
- en: '**IntelliJ IDEA Profiler**: This profiler is included with the IntelliJ IDEA
    Ultimate edition, which requires a paid subscription.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IntelliJ IDEA Profiler**：此分析器包含在 IntelliJ IDEA Ultimate 版本中，需要付费订阅。'
- en: '**JMC**: This tool is free for development and testing but might require payment
    for use in production.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JMC**：此工具在开发和测试中免费，但在生产中使用可能需要付费。'
- en: '**JProfiler**: This is a commercial tool that requires payment for use.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JProfiler**：这是一个需要付费使用的商业工具。'
- en: '**JVisualVM**: This tool is free and bundled with the JDK.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JVisualVM**：此工具免费，并捆绑在 JDK 中。'
- en: '**NetBeans Profiler**: This is a free tool that is integrated into the NetBeans
    IDE.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NetBeans Profiler**：这是一个集成到 NetBeans IDE 中的免费工具。'
- en: '**YourKit Java Profiler**: This is a commercial tool that requires payment
    for use.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**YourKit Java Profiler**：这是一个需要付费使用的商业工具。'
- en: The best use cases for each tool
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 每个工具的最佳用例
- en: 'It is likely that no single profiling tool will fit your needs every time.
    Each of our tools has a specific use case they are most suited for:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 很可能没有单个分析工具会每次都满足您的需求。我们的每个工具都有它们最适合的具体用例：
- en: '**IntelliJ IDEA Profiler**: This tool is best suited for IntelliJ IDEA users
    who want to use an integrated profiling tool during development'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IntelliJ IDEA Profiler**：此工具最适合希望在开发期间使用集成分析工具的 IntelliJ IDEA 用户。'
- en: '**JMC**: This tool is ideal for production environments because of its low
    overhead and its ability to provide detailed analysis, especially when using JFR'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JMC**：由于其低开销和提供详细分析的能力（尤其是在使用 JFR 时），此工具非常适合生产环境。'
- en: '**JProfiler**: This profiling tool is ideal for developers who want an easy-to-use,
    powerful tool that has advanced analysis capabilities'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JProfiler**：此分析工具非常适合希望有一个易于使用、功能强大且具有高级分析能力的开发者。'
- en: '**JVisualVM**: This tool is best suited for developers who want a free profiling
    option for CPU and memory analysis during the software development and testing
    phases'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JVisualVM**：此工具最适合希望在软件开发和测试阶段使用免费 CPU 和内存分析选项的开发者。'
- en: '**NetBeans Profiler**: This tool is ideal for NetBeans IDE users who want a
    reliable integrated profiling tool for CPU, memory, and thread analysis'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NetBeans Profiler**：此工具非常适合想要一个可靠的集成分析工具（用于 CPU、内存和线程分析）的 NetBeans IDE 用户。'
- en: '**YourKit Java Profiler**: This profiling tool is best suited for users who
    want in-depth profiling during all phases of the software development life cycle,
    including production'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**YourKit Java Profiler**：此分析工具最适合希望在软件开发生命周期的所有阶段进行深入分析的用户，包括生产阶段。'
- en: Scoring our profiling tools
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 评分我们的分析工具
- en: The following table rates the six featured profiling tools based on performance
    overhead, analysis accuracy, ease of use, integration, and cost. The scores range
    from 1 to 5, with 1 being the lowest and 5 being the highest possible score.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格根据性能开销、分析准确性、易用性、集成和成本对六个特色分析工具进行评分。评分范围从 1 到 5，1 为最低分，5 为最高分。
- en: '![Table 14.1: The profiling tool scoring matrix'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '![表14.1：剖析工具评分矩阵'
- en: '](img/B21942_14_6.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B21942_14_6.jpg)'
- en: 'Table 14.1: The profiling tool scoring matrix'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 表14.1：剖析工具评分矩阵
- en: As you can see, no single tool received a top score in every category. Based
    on this scoring, JMC received the highest score of 22, followed by JProfiler and
    YourKit Java Profiler at 21 points each. JVisualVM and NetBeans Profiler scored
    20, and the IntelliJ IDEA Profiler scored the lowest, with 19 points.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，没有单个工具在每个类别中都获得了最高分。根据这个评分，JMC获得了最高的22分，其次是JProfiler和YourKit Java剖析器，各得21分。JVisualVM和NetBeans剖析器得20分，IntelliJ
    IDEA剖析器得分最低，为19分。
- en: By understanding the strengths, limitations, and trade-offs of each profiling
    tool, you should be able to choose the most appropriate tool for your needs.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 通过了解每个剖析工具的优势、局限性和权衡，您应该能够选择最适合您需求的工具。
- en: Practical profiling strategies
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实践剖析策略
- en: The benefits of profiling our Java applications to help identify and resolve
    performance issues have been established. We will next explore effective profiling
    strategies so that you can optimize your Java applications efficiently. This section
    covers strategies to identify performance bottlenecks and differentiate profiling
    approaches between development and production environments. We will also look
    at how to implement continuous profiling for long-term performance management.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 剖析我们的Java应用程序以帮助识别和解决性能问题的益处已经得到证实。接下来，我们将探讨有效的剖析策略，以便您能够高效地优化Java应用程序。本节涵盖了识别性能瓶颈的策略，以及在不同开发和生产环境之间区分剖析方法。我们还将探讨如何实施持续剖析以进行长期性能管理。
- en: Identifying performance bottlenecks
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 识别性能瓶颈
- en: 'The primary goal of profiling is to identify performance bottlenecks. We can
    adopt several strategies to achieve this goal, including the following:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 剖析的主要目标是识别性能瓶颈。我们可以采用几种策略来实现这一目标，包括以下内容：
- en: Begin by monitoring CPU usage, memory consumption, and response times. These
    high-level metrics can help you identify areas that require deeper analysis.
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，监控CPU使用率、内存消耗和响应时间。这些高级指标可以帮助您确定需要进一步分析的区域。
- en: Consider using sampling profilers that can quickly identify methods that consume
    the most CPU time. Tools such as JVisualVM and IntelliJ IDEA Profiler provide
    this type of functionality. The goal is to use sampling to pinpoint issues without
    a significant impact on performance.
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑使用能够快速识别消耗最多CPU时间的方法的采样剖析器。例如，JVisualVM和IntelliJ IDEA剖析器提供此类功能。目标是使用采样来定位问题，而不会对性能产生重大影响。
- en: Once you have identified an area for deeper analysis, use instrumentation profiling,
    such as what is provided by JProfiler and YourKit Java Profiler. These tools can
    help you examine specific code paths and methods.
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦确定了需要进一步分析的领域，请使用如JProfiler和YourKit Java剖析器提供的仪器剖析。这些工具可以帮助您检查特定的代码路径和方法。
- en: Be sure to analyze your application’s thread activity. This is critical for
    applications that employ concurrent processing. Tools such as JMC and NetBeans
    Profiler have extensive thread analysis functionality. They can be used to detect
    thread contention, deadlocks, and even inefficient synchronization.
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一定要分析您应用程序的线程活动。这对于采用并发处理的应用程序至关重要。例如，JMC和NetBeans剖析器等工具具有广泛的线程分析功能。它们可以用来检测线程竞争、死锁以及甚至低效的同步。
- en: Use memory profilers to analyze object allocations, identify objects that are
    not collected by Java’s garbage collector, and capture heap dumps. Tools such
    as JProfiler and YourKit Java Profiler have this capability and help identify
    potential memory leaks.
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用内存剖析器来分析对象分配，识别Java垃圾收集器未回收的对象，并捕获堆转储。例如，JProfiler和YourKit Java剖析器具有这种功能，并有助于识别潜在的内存泄漏。
- en: Finally, if your application makes extensive use of database interactions or
    input/output operations, use profilers that can provide insight into JDBC calls
    and input/output. The aim is to identify inefficient queries and input/output
    bottlenecks.
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，如果你的应用程序大量使用数据库交互或输入/输出操作，请使用能够提供对JDBC调用和输入/输出洞察的剖析器。目标是识别低效的查询和输入/输出瓶颈。
- en: Profiling in development versus production
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发与生产中的剖析
- en: How and what we profile should be informed by our current environment. Profiling
    in a development environment should be approached differently than profiling a
    running application in production.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何以及剖析什么应该由我们的当前环境来指导。在开发环境中进行剖析的方法应与在生产环境中剖析运行中的应用程序的方法不同。
- en: The following table provides a comparative analysis of profiling in development
    and production environments, using 10 key aspects of profiling.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格提供了基于 10 个关键分析方面的开发环境和生产环境中分析的比较分析。
- en: '| **Aspect** | **Development profiling** | **Production profiling** |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| **方面** | **开发分析** | **生产分析** |'
- en: '| --- | --- | --- |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Primary focus | Identify and resolve performance issues | Monitor and resolve
    runtime performance issues |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| 主要关注点 | 识别和解决性能问题 | 监控和解决运行时性能问题 |'
- en: '| Access requirements | Direct access | Remote access |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| 访问要求 | 直接访问 | 远程访问 |'
- en: '| Frequency | Frequent profiling | Selective profiling based on observations
    |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| 频率 | 经常性分析 | 根据观察进行选择性分析 |'
- en: '| Performance impact | High overhead tolerated | Minimal overhead required
    |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| 性能影响 | 可以容忍高开销 | 需要最小开销 |'
- en: '| Profiling type | Detailed instrumentation | Sampling |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| 分析类型 | 详细仪器 | 抽样 |'
- en: '| Tools | IntelliJ IDEA Profiler, JProfiler, and YourKit Java Profiler | JMC
    and JVisualVM |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| 工具 | IntelliJ IDEA 分析器、JProfiler 和 YourKit Java 分析器 | JMC 和 JVisualVM |'
- en: '| Data granularity | High | Low |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
  zh: '| 数据粒度 | 高 | 低 |'
- en: '| Load simulation | Simulate realistic loads | Real-time user load |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
  zh: '| 负载模拟 | 模拟真实负载 | 实时用户负载 |'
- en: '| Automation | Integrated with CI/CD | Continuous monitoring |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
  zh: '| 自动化 | 集成到 CI/CD | 持续监控 |'
- en: 'Table 14.2: Profiling comparative analysis'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 表 14.2：分析比较分析
- en: Understanding the differences in profiling based on your application’s environment
    can help you conduct efficient profiling, subsequently allowing you to enhance
    your Java application’s performance.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 了解基于您的应用程序环境的分析差异可以帮助您进行有效的分析，从而允许您提高 Java 应用程序的性能。
- en: Continuous profiling
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持续分析
- en: 'We should profile throughout the development process and then continuously
    once our application is in production. Implementing continuous profiling includes
    the following aspects:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该在开发过程中进行分析，然后在我们应用程序投入生产后持续进行。实施持续分析包括以下方面：
- en: Establishing performance baselines so that you can compare future profiling
    results to them
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建立性能基线，以便您可以将其与未来的分析结果进行比较
- en: Integrating profiling with your CI/CD pipelines
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将分析集成到您的 CI/CD 管道中
- en: Ensuring you are monitoring key performance metrics including CPU use, memory
    use, and response times
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保您正在监控关键性能指标，包括 CPU 使用情况、内存使用情况和响应时间
- en: Storing your polling data so that you can conduct historical analysis
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储您的轮询数据，以便您可以进行历史分析
- en: In addition to routine monitoring, conducting full profiling audits at regular
    intervals
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除了常规监控外，定期进行全面的分析审计
- en: Ensuring to communicate profiling results with the development team so that
    they are informed and can enhance the performance of your current system, helping
    to make future applications more performant
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保与开发团队沟通分析结果，使他们了解情况，并提高您当前系统的性能，有助于使未来的应用程序性能更佳
- en: These practical profiling strategies can help identify and resolve performance
    bottlenecks. It is important to establish a formal profiling approach that can
    be meticulously followed.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 这些实用的分析策略可以帮助识别和解决性能瓶颈。建立一种正式的分析方法，可以细致地遵循，这一点非常重要。
- en: Case studies
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 案例研究
- en: This section details three case studies to illustrate the practical implementation
    of profiling tools in real-world scenarios.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 本节详细介绍了三个案例研究，以说明在现实场景中实际实施分析工具的实用方法。
- en: Case study 1 – profiling a large enterprise application
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 案例研究 1 – 分析大型企业应用
- en: '**Scenario**: A large global financial services company developed, tested,
    and deployed an enterprise application to handle their transactions and reporting.
    Recently, the application started experiencing performance degradation. This was
    especially evident during peak user transaction times.'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '**场景**：一家大型全球金融服务公司开发、测试和部署了一个企业应用来处理他们的交易和报告。最近，该应用开始出现性能下降。这在高峰用户交易时间尤为明显。'
- en: '**Profiling tools**: The development team selected JProfiler for its capability
    to provide detailed profiling and because it integrated with their development
    environment.'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '**分析工具**：开发团队选择了 JProfiler，因为它能够提供详细的分析，并且它与他们的开发环境集成。'
- en: '**Process implemented**: The company took a three-step approach to profiling:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '**实施过程**：该公司采取了三步走的方法进行分析：'
- en: They first conducted an initial analysis, looking at CPU use, memory use, and
    thread analysis.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 他们首先进行了初步分析，查看 CPU 使用情况、内存使用情况和线程分析。
- en: Next, they used the profiler data from *step 1* to identify bottlenecks.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，他们使用第1步的配置文件数据来识别瓶颈。
- en: The third step was to optimize their enterprise application. This optimization
    included rewriting inefficient algorithms, implementing more efficient data structures,
    optimizing object creation and disposal, and reducing thread contention by implementing
    a refined locking mechanism.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第三步是优化他们的企业应用。这次优化包括重写低效算法、实施更有效的数据结构、优化对象创建和销毁，以及通过实施精细的锁定机制减少线程竞争。
- en: '**Outcome**: Transaction times significantly improved, and memory consumption
    was now stable. Moreover, the improved application was now able to handle peak
    load times without network latency issues or impact on the user experience.'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '**结果**：交易时间显著改善，内存消耗现在稳定。此外，改进后的应用现在能够处理峰值负载时间，而不会出现网络延迟问题或影响用户体验。'
- en: Case study 2 – performance tuning in a microservices architecture
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 案例研究 2 – 在微服务架构中进行性能调整
- en: '**Scenario**: A technology company developed a large-scale e-commerce application
    using a microservices architecture. There are a lot of microservices with the
    primary ones handling user authentication, product inventories, product catalogs,
    payment transactions, and order processing. Staff and users have reported intermittent
    latency issues and occasional timeouts.'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '**场景**：一家科技公司使用微服务架构开发了一个大规模的电子商务应用。有许多微服务，其中主要的服务处理用户身份验证、产品库存、产品目录、支付交易和订单处理。员工和用户报告了间歇性的延迟问题和偶尔的超时。'
- en: '**Profiling tools**: The tech company selected JMC for profiling, based on
    its low overhead and ability to monitor applications in production using JFR.'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '**分析工具**：该科技公司选择JMC进行分析，因为它具有低开销，并且能够使用JFR在生产环境中监控应用程序。'
- en: '**Process implemented**: The company decided to enable JFR recordings on all
    microservices. Their plan was to collect detailed performance data without a significant
    impact on performance. Next, they used JMC to analyze the JFR data to identify
    resource usage patterns and potential hotspots.'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '**实施过程**：公司决定在所有微服务上启用JFR记录。他们的计划是在不显著影响性能的情况下收集详细性能数据。接下来，他们使用JMC分析JFR数据，以识别资源使用模式和潜在热点。'
- en: Analysis revealed their product catalog service had sporadic CPU usage spikes
    that impacted overall response times. Their thread profiling analysis shows that
    the order processing service caused timeouts, based on thread contention. They
    also reviewed network profiling data, which showed the payment transaction service’s
    database interactions had high latency.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 分析显示，他们的产品目录服务有间歇性的CPU使用高峰，影响了整体响应时间。他们的线程分析显示，订单处理服务由于线程竞争导致超时。他们还审查了网络分析数据，显示支付交易服务的数据库交互有高延迟。
- en: With profiling and analysis complete, the development team optimized their e-commerce
    application. Specifically, they optimized the product catalog service by implementing
    a caching mechanism. The order processing service was rewritten with an optimized
    thread management schema, using thread pools. Lastly, the payment transaction
    service’s database queries were optimized, and connection pooling was implemented.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成性能分析和配置文件后，开发团队优化了他们的电子商务应用。具体来说，他们通过实施缓存机制优化了产品目录服务。订单处理服务使用优化后的线程管理方案重写，采用了线程池。最后，支付交易服务的数据库查询得到优化，并实施了连接池。
- en: '**Outcome**: The technology company’s e-commerce system showed improved performance
    following the optimizations. Latency was reduced and it was significantly more
    stable, with few timeouts. The staff reported improved satisfaction and user complaints
    waned.'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '**结果**：经过优化后，该科技公司的电子商务系统性能得到改善。延迟减少，稳定性显著提高，超时情况很少。员工报告满意度提高，用户投诉减少。'
- en: Case study 3 – profiling and optimizing a high-throughput system
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 案例研究 3 – 分析和优化高吞吐量系统
- en: '**Scenario**: A communications company uses a system for high throughput and
    real-time data processing and analytics. Their system has significant performance
    degradation during high load times. This leads to delays in data processing and
    analysis operations.'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '**场景**：一家通信公司使用一个系统进行高吞吐量和实时数据处理与分析。在负载高峰期间，他们的系统性能显著下降。这导致数据处理和分析操作延迟。'
- en: '**Profiling tools**: The company selected the YourKit Java Profiler tool because
    it has comprehensive features, and it is ideal for high-throughput systems.'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '**分析工具**：公司选择了YourKit Java Profiler工具，因为它具有全面的功能，非常适合高吞吐量系统。'
- en: '**Process implemented**: The communication company’s development team adopted
    a three-step approach – conduct initial profiling, identify bottlenecks, and optimize.'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '**实施过程**：通信公司的开发团队采用了三步方法——进行初始配置文件、识别瓶颈和优化。'
- en: The initial profiling included a look at CPU and memory use. They focused on
    data processing and analytic components of their system. They also conducted a
    detailed thread analysis to help identify bottlenecks evident in thread processing.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 初始配置文件包括了对CPU和内存使用的分析。他们专注于系统的数据处理和分析组件。他们还进行了详细的线程分析，以帮助识别线程处理中明显的瓶颈。
- en: Their second step was to identify bottlenecks. Their CPU profiling reviewed
    that some of their data processing modules contained complex computations, which
    have a significant draw on CPU use. Their memory profiling results indicated that
    their analytics module had high memory usage. That same module showed frequent
    garbage collection events that negatively impacted the system’s overall performance.
    They also looked at thread analysis results, which showed thread contention during
    peak data loads, further reducing performance.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 他们的第二步是识别瓶颈。他们的CPU配置文件审查发现，他们的数据处理模块中包含了一些复杂的计算，这显著增加了CPU的使用。他们的内存配置文件结果显示，他们的分析模块内存使用量高。同样，该模块频繁的垃圾回收事件对系统的整体性能产生了负面影响。他们还分析了线程分析结果，结果显示在高峰数据负载期间存在线程竞争，进一步降低了性能。
- en: The company’s last step was to optimize its system. They optimized their data
    processing algorithms to improve the efficiency of their computations and enhanced
    parallel processing to take advantage of multi-core processors. Developers also
    optimized their analytics module by reducing object creation, improving data structures,
    and minimizing garbage collection. The team also optimized how their application
    managed threads. They introduced thread pools to reduce thread contention.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 公司的最后一步是对其系统进行优化。他们优化了数据处理算法以提高计算效率，并增强了并行处理以利用多核处理器。开发者还通过减少对象创建、改进数据结构和最小化垃圾回收来优化他们的分析模块。团队还优化了应用程序管理线程的方式。他们引入了线程池以减少线程竞争。
- en: '**Outcome**: The communication company’s high-throughput system realized significant
    performance improvements following the system optimizations. Their data processing
    times were reduced by 55% and latency during analytics processing was minimized.
    Their system can now handle high data loads efficiently and meet real-time data
    processing requirements.'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '**结果**：通信公司的高吞吐量系统在系统优化后实现了显著的性能提升。他们的数据处理时间减少了55%，分析处理期间的延迟最小化。他们的系统现在可以高效地处理高数据负载并满足实时数据处理需求。'
- en: The three case studies demonstrate a practical application of profiling strategies
    and tools in various contexts. They all used a similar three-step approach (profile,
    identify, optimize) and had successful outcomes.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 三个案例研究展示了在不同情境下使用配置文件策略和工具的实际应用。它们都采用了类似的三步方法（配置文件、识别、优化）并且取得了成功的成果。
- en: Future trends in Java profiling
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java配置文件的未来趋势
- en: The software development landscape is ever-shifting, and profiling tools and
    techniques are equally dynamic. As technological innovations emerge, so do tools
    to help developers address and manage them. This final section explores future
    trends in Java profiling, with a focus on profiling tools and integration with
    AI and ML. The section ends with a list of emerging standards and best practices.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 软件开发领域一直在不断变化，配置文件工具和技术同样具有动态性。随着技术创新的出现，帮助开发者应对和管理这些技术的工具也应运而生。本节探讨了Java配置文件的未来趋势，重点关注配置文件工具与人工智能和机器学习的集成。本节最后列出了新兴的标准和最佳实践。
- en: Advances in profiling tools
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置文件工具的进步
- en: 'Current profiling tools continue to be improved, with new versions frequently
    being released. It is also common for new profiling tools to be introduced periodically.
    The key advancements with profiling tools are in the following five areas:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 当前的配置文件工具持续得到改进，新版本经常发布。定期引入新的配置文件工具也是常见的。配置文件工具的关键进步体现在以下五个领域：
- en: '**Improved user interfaces**: We should see more intuitive interfaces and better
    visualizations.'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**改进的用户界面**：我们应该看到更直观的界面和更好的可视化。'
- en: '**Cloud-native profiling**: Cloud computing and distributed computing are the
    norm, and profiling tools are apt to cater to these environments to a greater
    extent.'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**云原生配置文件**：云计算和分布式计算已成为常态，配置文件工具更有可能适应这些环境。'
- en: '**Enhanced real-time profiling**: Profiling tools will enhance their real-time
    processing capabilities and continually decrease their impact on performance.'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**增强实时性能分析**：性能分析工具将增强其实时处理能力，并持续减少其对性能的影响。'
- en: '**Low-overhead instrumentation**: Profiling high-throughput systems can result
    in system latency. Future advances will decrease the impact these systems have
    on performance.'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**低开销的仪器化**：对高吞吐量系统进行性能分析可能会导致系统延迟。未来的进步将减少这些系统对性能的影响。'
- en: '**Unified monitoring and profiling**: The convergence of monitoring and profiling
    tools can be advantageous for development teams that want diagnostics that combine
    real-time monitoring and deep profiling data.'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**统一的监控和性能分析**：监控和性能分析工具的融合对于希望结合实时监控和深度性能数据的诊断的开发团队来说是有益的。'
- en: Integration with AI and machine learning
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与AI和机器学习集成
- en: 'AI and ML technologies can be leveraged by profiling tools. These technologies
    can help performance-tuning efforts. Here are key aspects of the use of AI and
    ML in performance tuning:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 性能分析工具可以利用AI和ML技术。这些技术可以帮助性能调优工作。以下是AI和ML在性能调优中使用的关键方面：
- en: Adaptive profiling
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自适应性能分析
- en: Automated anomaly detection
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动异常检测
- en: Intelligent optimization recommendations
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 智能优化建议
- en: Predictive performance modeling
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预测性能建模
- en: Root cause analysis
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根本原因分析
- en: Emerging standards and best practices
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新兴标准和最佳实践
- en: 'The following recommendations are intended to help guide your effective use
    of profiling tools and techniques as they exist today and as they evolve:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 以下建议旨在帮助指导您有效使用现有的性能分析工具和技术，以及它们的发展：
- en: Adopt a continuous profiling strategy.
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 采用持续性能分析策略。
- en: Be mindful of security and privacy considerations when profiling tools collect
    data.
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在性能分析工具收集数据时，注意安全和隐私考虑。
- en: Communicate and collaborate with your team. This includes their involvement
    in your profiling strategy, a review of the results, and optimization planning.
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与您的团队沟通和协作。这包括他们参与您的性能分析策略，审查结果，以及优化计划。
- en: Include your profiling efforts in a holistic performance management plan.
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将您的性能分析工作纳入整体性能管理计划。
- en: Standardize your profiling APIs so that you can introduce interoperability and
    integration simplification. These standards can help ensure that your profiling
    data is consistent and that you can effectively compare the standards across different
    tools and environments.
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准化您的性能分析API，以便您可以引入互操作性和集成简化。这些标准可以帮助确保您的性能分析数据是一致的，并且您可以有效地在不同工具和环境之间比较标准。
- en: It is important to stay abreast of changes to the profiling tools you use and
    to be cognizant of new tools and techniques as they are introduced. This awareness,
    coupled with adherence to best practices, can help ensure that you fully leverage
    profiling tools and techniques, resulting in high-performing Java applications.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要关注您使用的性能分析工具的变化，并意识到新工具和技术被引入的情况。这种意识，加上对最佳实践的遵守，可以帮助您充分利用性能分析工具和技术，从而实现高性能的Java应用程序。
- en: Summary
  id: totrans-270
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter took a thorough look at profiling tools and their role in Java
    application performance. We explored various profilers, including those bundled
    in the JDK and embedded in IDEs, and third-party tools such as JProfiler and YourKit
    Java Profiler. Coverage included practical profiling strategies to help identify
    performance bottlenecks, distinct profiling approaches required for development
    and performance environments, and the importance of continuous profiling to support
    long-term performance management. We introduced three real-world case studies
    to illustrate profiling tool applications. Finally, we examined future trends
    and best practices regarding Java profiling tools.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 本章全面探讨了性能分析工具及其在Java应用程序性能中的作用。我们探讨了各种性能分析器，包括包含在JDK中的和嵌入在IDE中的分析器，以及第三方工具如JProfiler和YourKit
    Java Profiler。涵盖了实用的性能分析策略，以帮助识别性能瓶颈，开发环境和性能环境所需的独特性能分析方法，以及持续性能分析对长期性能管理的重要性。我们介绍了三个真实案例研究，以说明性能分析工具的应用。最后，我们考察了关于Java性能分析工具的未来趋势和最佳实践。
- en: In the next chapter, we will examine how to optimize our databases and queries
    to enhance the performance of our Java applications. We will review database design
    considerations, purposeful SQL query generation, and several strategies, including
    normalization, indexing, connection pooling, caching, JDBC and ORM optimizations,
    transaction management, and testing.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何优化我们的数据库和查询，以增强我们的Java应用程序的性能。我们将回顾数据库设计考虑因素、有目的的SQL查询生成，以及包括规范化、索引、连接池、缓存、JDBC和ORM优化、事务管理和测试在内的几种策略。
- en: 'Part 5: Advanced Topics'
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5部分：高级主题
- en: The final part of the book addresses advanced topics that push the boundaries
    of Java performance optimization. It begins with strategies to optimize databases
    and SQL queries, followed by techniques for effective code monitoring and maintenance.
    You will learn about unit and performance testing to ensure that your applications
    meet performance standards. This part concludes with an exploration of leveraging
    **artificial intelligence** (**AI**) to enhance the performance of Java applications,
    providing a forward-looking perspective on future trends and technologies.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 书的最后一部分讨论了推动Java性能优化的边界的高级主题。它从优化数据库和SQL查询的策略开始，接着是有效的代码监控和维护技术。你将学习关于单元和性能测试的知识，以确保你的应用程序符合性能标准。本部分以探索利用**人工智能**（**AI**）来提高Java应用程序的性能结束，提供了对未来趋势和技术的前瞻性视角。
- en: 'This part has the following chapters:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包含以下章节：
- en: '[*Chapter 15*](B21942_15.xhtml#_idTextAnchor288), *Optimizing Your Databases
    and SQL Queries*'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第15章*](B21942_15.xhtml#_idTextAnchor288)，*优化你的数据库和SQL查询*'
- en: '[*Chapter 16*](B21942_16.xhtml#_idTextAnchor307), *Code Monitoring and Maintenance*'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第16章*](B21942_16.xhtml#_idTextAnchor307)，*代码监控和维护*'
- en: '[*Chapter 17*](B21942_17.xhtml#_idTextAnchor331), *Unit and Performance Testing*'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第17章*](B21942_17.xhtml#_idTextAnchor331)，*单元和性能测试*'
- en: '[*Chapter 18*](B21942_18.xhtml#_idTextAnchor345), *Leveraging Artificial Intelligence
    (AI) for High Performance Java Applications*'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第18章*](B21942_18.xhtml#_idTextAnchor345)，*利用人工智能（AI）提高高性能Java应用程序*'
