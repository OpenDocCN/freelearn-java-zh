["```java\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration(classes = MasterSpringMvc4Application.class)\n@WebAppConfiguration\npublic class MasterSpringMvc4ApplicationTests {\n\n    @Test\n    public void contextLoads() {\n    }\n}\n```", "```java\npackage masterSpringMvc.controller;\n\nimport masterSpringMvc.MasterSpringMvcApplication;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.SpringApplicationConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.test.context.web.WebAppConfiguration;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\nimport org.springframework.web.context.WebApplicationContext;\n\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;\nimport static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration(classes = MasterSpringMvcApplication.class)\n@WebAppConfiguration\npublic class HomeControllerTest {\n    @Autowired\n    private WebApplicationContext wac;\n\n    private MockMvc mockMvc;\n\n    @Before\n    public void setup() {\n        this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).build();\n    }\n\n    @Test\n    public void should_redirect_to_profile() throws Exception {\n        this.mockMvc.perform(get(\"/\"))\n                .andDo(print())\n                .andExpect(status().isFound())\n                .andExpect(redirectedUrl(\"/profile\"));\n    }\n}\n```", "```java\nimport org.springframework.mock.web.MockHttpSession;\nimport masterSpringMvc.profile.UserProfileSession;\n\n// put this test below the other one\n@Test\npublic void should_redirect_to_tastes() throws Exception {\n    MockHttpSession session = new MockHttpSession();\n    UserProfileSession sessionBean = new UserProfileSession();\n    sessionBean.setTastes(Arrays.asList(\"spring\", \"groovy\"));\n    session.setAttribute(\"scopedTarget.userProfileSession\", sessionBean);\n\n    this.mockMvc.perform(get(\"/\").session(session))\n        .andExpect(status().isFound())\n        .andExpect(redirectedUrl(\"/search/mixed;keywords=spring,groovy\"));\n}\n```", "```java\n@Test\npublic void should_redirect_to_tastes() throws Exception {\n\n    MockHttpSession session = new SessionBuilder().userTastes(\"spring\", \"groovy\").build();\n    this.mockMvc.perform(get(\"/\")\n        .session(session))\n        .andExpect(status().isFound())\n        .andExpect(redirectedUrl(\"/search/mixed;keywords=spring,groovy\"));\n}\n```", "```java\npublic class SessionBuilder {\n    private final MockHttpSession session;\n    UserProfileSession sessionBean;\n\n    public SessionBuilder() {\n        session = new MockHttpSession();\n        sessionBean = new UserProfileSession();\n        session.setAttribute(\"scopedTarget.userProfileSession\", sessionBean);\n    }\n\n    public SessionBuilder userTastes(String... tastes) {\n        sessionBean.setTastes(Arrays.asList(tastes));\n        return this;\n    }\n\n    public MockHttpSession build() {\n        return session;\n    }\n}\n```", "```java\npackage masterSpringMvc.search;\n\nimport masterSpringMvc.MasterSpringMvcApplication;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.springframework.boot.test.SpringApplicationConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.test.context.web.WebAppConfiguration;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\n\nimport java.util.Arrays;\n\nimport static org.hamcrest.Matchers.*;\nimport static org.mockito.Matchers.*;\nimport static org.mockito.Mockito.*;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration(classes = MasterSpringMvcApplication.class)\n@WebAppConfiguration\npublic class SearchControllerMockTest {\n    @Mock\n    private SearchService searchService;\n\n    @InjectMocks\n    private SearchController searchController;\n\n    private MockMvc mockMvc;\n\n    @Before\n    public void setup() {\n        MockitoAnnotations.initMocks(this);\n        this.mockMvc = MockMvcBuilders\n                .standaloneSetup(searchController)\n                .setRemoveSemicolonContent(false)\n                .build();\n    }\n\n    @Test\n    public void should_search() throws Exception {\n\n        when(searchService.search(anyString(), anyListOf(String.class)))\n                .thenReturn(Arrays.asList(\n                        new LightTweet(\"tweetText\")\n                ));\n\n        this.mockMvc.perform(get(\"/search/mixed;keywords=spring\"))\n                .andExpect(status().isOk())\n                .andExpect(view().name(\"resultPage\"))\n                .andExpect(model().attribute(\"tweets\", everyItem(\n                        hasProperty(\"text\", is(\"tweetText\"))\n                )));\n\n        verify(searchService, times(1)).search(anyString(), anyListOf(String.class));\n    }\n}\n```", "```java\npublic interface TwitterSearch {\n    List<LightTweet> search(String searchType, List<String> keywords);\n}\n```", "```java\npackage masterSpringMvc.search;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Primary;\n\nimport java.util.Arrays;\n\n@Configuration\npublic class StubTwitterSearchConfig {\n    @Primary @Bean\n    public TwitterSearch twitterSearch() {\n        return (searchType, keywords) -> Arrays.asList(\n                new LightTweet(\"tweetText\"),\n                new LightTweet(\"secondTweet\")\n        );\n    }\n}\n```", "```java\npackage masterSpringMvc.search;\n\nimport masterSpringMvc.MasterSpringMvcApplication;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.SpringApplicationConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.test.context.web.WebAppConfiguration;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\nimport org.springframework.web.context.WebApplicationContext;\n\nimport static org.hamcrest.Matchers.*;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration(classes = {\n        MasterSpringMvcApplication.class,\n        StubTwitterSearchConfig.class\n})\n@WebAppConfiguration\npublic class SearchControllerTest {\n    @Autowired\n    private WebApplicationContext wac;\n\n    private MockMvc mockMvc;\n\n    @Before\n    public void setup() {\n        this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).build();\n    }\n\n    @Test\n    public void should_search() throws Exception {\n\n        this.mockMvc.perform(get(\"/search/mixed;keywords=spring\"))\n                .andExpect(status().isOk())\n                .andExpect(view().name(\"resultPage\"))\n                .andExpect(model().attribute(\"tweets\", hasSize(2)))\n                .andExpect(model().attribute(\"tweets\",\n                                hasItems(\n                                        hasProperty(\"text\", is(\"tweetText\")),\n                                        hasProperty(\"text\", is(\"secondTweet\"))\n                                ))\n                );\n    }\n}\n```", "```java\ntestCompile 'com.jayway.jsonpath:json-path'\n```", "```java\npackage masterSpringMvc.search.api;\n\nimport masterSpringMvc.MasterSpringMvcApplication;\nimport masterSpringMvc.search.StubTwitterSearchConfig;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.SpringApplicationConfiguration;\nimport org.springframework.http.MediaType;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.test.context.web.WebAppConfiguration;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\nimport org.springframework.web.context.WebApplicationContext;\n\nimport static org.hamcrest.Matchers.*;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\nimport static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration(classes = {\n        MasterSpringMvcApplication.class,\n        StubTwitterSearchConfig.class\n})\n@WebAppConfiguration\npublic class SearchApiControllerTest {\n    @Autowired\n    private WebApplicationContext wac;\n\n    private MockMvc mockMvc;\n\n    @Before\n    public void setup() {\n        this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).build();\n    }\n\n    @Test\n    public void should_search() throws Exception {\n\n        this.mockMvc.perform(\n                get(\"/api/search/mixed;keywords=spring\")\n                        .accept(MediaType.APPLICATION_JSON))\n                .andDo(print())\n                .andExpect(status().isOk())\n                .andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))\n                .andExpect(jsonPath(\"$\", hasSize(2)))\n                .andExpect(jsonPath(\"$[0].text\", is(\"tweetText\")))\n                .andExpect(jsonPath(\"$[1].text\", is(\"secondTweet\")));\n    }\n}\n```", "```java\ntestCompile 'org.assertj:assertj-core:3.0.0'\n```", "```java\nvoid reset(User... users) {\n        userMap.clear();\n        for (User user : users) {\n                save(user);\n        }\n}\n```", "```java\npackage masterSpringMvc.user.api;\n\nimport masterSpringMvc.MasterSpringMvcApplication;\nimport masterSpringMvc.user.User;\nimport masterSpringMvc.user.UserRepository;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.SpringApplicationConfiguration;\nimport org.springframework.http.MediaType;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.test.context.web.WebAppConfiguration;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\nimport org.springframework.web.context.WebApplicationContext;\n\nimport static org.hamcrest.Matchers.*;\n   import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration(classes = MasterSpringMvcApplication.class)\n@WebAppConfiguration\npublic class UserApiControllerTest {\n\n    @Autowired\n    private WebApplicationContext wac;\n\n    @Autowired\n    private UserRepository userRepository;\n\n    private MockMvc mockMvc;\n\n    @Before\n    public void setup() {\n        this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).build();\n        userRepository.reset(new User(\"bob@spring.io\"));\n    }\n\n    @Test\n    public void should_list_users() throws Exception {\n        this.mockMvc.perform(\n                get(\"/api/users\")\n                        .accept(MediaType.APPLICATION_JSON)\n        )\n                .andExpect(status().isOk())\n                .andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))\n                .andExpect(jsonPath(\"$\", hasSize(1)))\n                .andExpect(jsonPath(\"$[0].email\", is(\"bob@spring.io\")));\n    }\n}\n```", "```java\nimport static org.assertj.core.api.Assertions.assertThat;\n\n// Insert this test below the previous one\n@Test\npublic void should_create_new_user() throws Exception {\n        User user = new User(\"john@spring.io\");\n        this.mockMvc.perform(\n                post(\"/api/users\")\n                        .contentType(MediaType.APPLICATION_JSON)\n                        .content(JsonUtil.toJson(user))\n        )\n                .andExpect(status().isCreated());\n\n        assertThat(userRepository.findAll())\n                .extracting(User::getEmail)\n                .containsOnly(\"bob@spring.io\", \"john@spring.io\");\n}\n```", "```java\nimport static org.assertj.core.api.Assertions.assertThat;\n```", "```java\npackage masterSpringMvc.utils;\n\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\nimport java.io.IOException;\n\npublic class JsonUtil {\n    public static byte[] toJson(Object object) throws IOException {\n        ObjectMapper mapper = new ObjectMapper();\n        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\n        return mapper.writeValueAsBytes(object);\n    }\n}\n```", "```java\n@Test\npublic void should_delete_user() throws Exception {\n        this.mockMvc.perform(\n                delete(\"/api/user/bob@spring.io\")\n                        .accept(MediaType.APPLICATION_JSON)\n        )\n                .andExpect(status().isOk());\n\n        assertThat(userRepository.findAll()).hasSize(0);\n}\n\n@Test\npublic void should_return_not_found_when_deleting_unknown_user() throws Exception {\n        this.mockMvc.perform(\n                delete(\"/api/user/non-existing@mail.com\")\n                        .accept(MediaType.APPLICATION_JSON)\n        )\n                .andExpect(status().isNotFound());\n}\n```", "```java\n@Test\npublic void put_should_update_existing_user() throws Exception {\n        User user = new User(\"ignored@spring.io\");\n        this.mockMvc.perform(\n                put(\"/api/user/bob@spring.io\")\n                        .content(JsonUtil.toJson(user))\n                        .contentType(MediaType.APPLICATION_JSON)\n        )\n                .andExpect(status().isOk());\n\n        assertThat(userRepository.findAll())\n                .extracting(User::getEmail)\n                .containsOnly(\"bob@spring.io\");\n}\n```", "```java\n   @RequestMapping(value = \"/user/{email}\", method = RequestMethod.PUT)\n    public ResponseEntity<User> updateUser(@PathVariable String email, @RequestBody User user) throws EntityNotFoundException {\n        User saved = userRepository.update(email, user);\n        return new ResponseEntity<>(saved, HttpStatus.CREATED);\n    }\n```", "```java\npackage masterSpringMvc.user.api;\n\nimport masterSpringMvc.MasterSpringMvcApplication;\nimport masterSpringMvc.user.User;\nimport masterSpringMvc.user.UserRepository;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.SpringApplicationConfiguration;\nimport org.springframework.http.MediaType;\nimport org.springframework.security.web.FilterChainProxy;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.test.context.web.WebAppConfiguration;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\nimport org.springframework.web.context.WebApplicationContext;\n\nimport java.util.Base64;\n\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration(classes = MasterSpringMvcApplication.class)\n@WebAppConfiguration\npublic class UserApiControllerAuthTest {\n\n    @Autowired\n    private FilterChainProxy springSecurityFilter;\n\n    @Autowired\n    private WebApplicationContext wac;\n\n    @Autowired\n    private UserRepository userRepository;\n\n    private MockMvc mockMvc;\n\n    @Before\n    public void setup() {\n        this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).addFilter(springSecurityFilter).build();\n        userRepository.reset(new User(\"bob@spring.io\"));\n    }\n\n    @Test\n    public void unauthenticated_cannot_list_users() throws Exception {\n        this.mockMvc.perform(\n                get(\"/api/users\")\n                        .accept(MediaType.APPLICATION_JSON)\n        )\n                .andExpect(status().isUnauthorized());\n    }\n\n    @Test\n    public void admin_can_list_users() throws Exception {\n        this.mockMvc.perform(\n                get(\"/api/users\")\n                        .accept(MediaType.APPLICATION_JSON)\n                        .header(\"Authorization\", basicAuth(\"admin\", \"admin\"))\n        )\n                .andExpect(status().isOk());\n    }\n\n    private String basicAuth(String login, String password) {\n        byte[] auth = (login + \":\" + password).getBytes();\n        return \"Basic \" + Base64.getEncoder().encodeToString(auth);\n    }\n}\n```", "```java\nconfigurations {\n    integrationTestCompile.extendsFrom testCompile\n    integrationTestRuntime.extendsFrom testRuntime\n}\n```", "```java\nsourceSets {\n    integrationTest {\n        compileClasspath += main.output + test.output\n        runtimeClasspath += main.output + test.output\n    }\n}\n```", "```java\ntask integrationTest(type: Test) {\n    testClassesDir = sourceSets.integrationTest.output.classesDir\n    classpath = sourceSets.integrationTest.runtimeClasspath\n    reports.html.destination = file(\"${reporting.baseDir}/integrationTests\")\n}\n```", "```java\ntestCompile 'org.fluentlenium:fluentlenium-assertj:0.10.3'\ntestCompile 'com.codeborne:phantomjsdriver:1.2.1'\ntestCompile 'org.seleniumhq.selenium:selenium-java:2.45.0'\n```", "```java\n+--- org.fluentlenium:fluentlenium-assertj:0.10.3\n|    +--- org.fluentlenium:fluentlenium-core:0.10.3\n|    |    \\--- org.seleniumhq.selenium:selenium-java:2.44.0 -> 2.45.0\n|    |         +--- org.seleniumhq.selenium:selenium-chrome-driver:2.45.0\n\n|    |         +--- org.seleniumhq.selenium:selenium-htmlunit-driver:2.45.0\n\n|    |         +--- org.seleniumhq.selenium:selenium-firefox-driver:2.45.0\n\n|    |         +--- org.seleniumhq.selenium:selenium-ie-driver:2.45.0\n\n|    |         +--- org.seleniumhq.selenium:selenium-safari-driver:2.45.0\n\n|    |         +--- org.webbitserver:webbit:0.4.14 (*)\n|    |         \\--- org.seleniumhq.selenium:selenium-leg-rc:2.45.0\n|    |              \\--- org.seleniumhq.selenium:selenium-remote-driver:2.45.0 (*)\n|    \\--- org.assertj:assertj-core:1.6.1 -> 3.0.0\n```", "```java\nconfigurations {\n    testCompile {\n        exclude module: 'selenium-safari-driver'\n        exclude module: 'selenium-ie-driver'\n        //exclude module: 'selenium-firefox-driver'\n        exclude module: 'selenium-htmlunit-driver'\n        exclude module: 'selenium-chrome-driver'\n    }\n}\n```", "```java\nimport masterSpringMvc.MasterSpringMvcApplication;\nimport masterSpringMvc.search.StubTwitterSearchConfig;\nimport org.fluentlenium.adapter.FluentTest;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.phantomjs.PhantomJSDriver;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.test.SpringApplicationConfiguration;\nimport org.springframework.boot.test.WebIntegrationTest;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration(classes = {\n        MasterSpringMvcApplication.class,\n        StubTwitterSearchConfig.class\n})\n@WebIntegrationTest(randomPort = true)\npublic class FluentIntegrationTest extends FluentTest {\n\n    @Value(\"${local.server.port}\")\n    private int serverPort;\n\n    @Override\n    public WebDriver getDefaultDriver() {\n        return new PhantomJSDriver();\n    }\n\n    public String getDefaultBaseUrl() {\n        return \"http://localhost:\" + serverPort;\n    }\n\n    @Test\n    public void hasPageTitle() {\n        goTo(\"/\");\n        assertThat(findFirst(\"h2\").getText()).isEqualTo(\"Login\");\n    }\n}\n```", "```java\njava.lang.IllegalStateException: The path to the driver executable must be set by the phantomjs.binary.path capability/system property/PATH variable; for more information, see https://github.com/ariya/phantomjs/wiki. The latest version can be downloaded from http://phantomjs.org/download.html\n\n```", "```java\npackage masterSpringMvc.auth;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.social.connect.ConnectionFactoryLocator;\nimport org.springframework.social.connect.UsersConnectionRepository;\nimport org.springframework.social.connect.web.ProviderSignInController;\nimport org.springframework.social.connect.web.SignInAdapter;\nimport org.springframework.web.context.request.NativeWebRequest;\nimport org.springframework.web.servlet.view.RedirectView;\n\n@Configuration\npublic class StubSocialSigninConfig {\n\n    @Bean\n    @Primary\n    @Autowired\n    public ProviderSignInController signInController(ConnectionFactoryLocator factoryLocator,\n                                                     UsersConnectionRepository usersRepository,\n                                                     SignInAdapter signInAdapter) {\n        return new FakeSigninController(factoryLocator, usersRepository, signInAdapter);\n    }\n\n    public class FakeSigninController extends ProviderSignInController {\n        public FakeSigninController(ConnectionFactoryLocator connectionFactoryLocator,\n                                    UsersConnectionRepository usersConnectionRepository,\n                                    SignInAdapter signInAdapter) {\n            super(connectionFactoryLocator, usersConnectionRepository, signInAdapter);\n        }\n\n        @Override\n        public RedirectView signIn(String providerId, NativeWebRequest request) {\n            UsernamePasswordAuthenticationToken authentication =\n                    new UsernamePasswordAuthenticationToken(\"geowarin\", null, null);\n            SecurityContextHolder.getContext().setAuthentication(authentication);\n            return new RedirectView(\"/\");\n        }\n    }\n}\n```", "```java\nimport masterSpringMvc.MasterSpringMvcApplication;\nimport masterSpringMvc.auth.StubSocialSigninConfig;\nimport masterSpringMvc.search.StubTwitterSearchConfig;\nimport org.fluentlenium.adapter.FluentTest;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.phantomjs.PhantomJSDriver;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.test.SpringApplicationConfiguration;\nimport org.springframework.boot.test.WebIntegrationTest;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.fluentlenium.core.filter.FilterConstructor.withName;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration(classes = {\n        MasterSpringMvcApplication.class,\n        StubTwitterSearchConfig.class,\n        StubSocialSigninConfig.class\n})\n@WebIntegrationTest(randomPort = true)\npublic class FluentIntegrationTest extends FluentTest {\n\n    @Value(\"${local.server.port}\")\n    private int serverPort;\n\n    @Override\n    public WebDriver getDefaultDriver() {\n        return new PhantomJSDriver();\n    }\n\n    public String getDefaultBaseUrl() {\n        return \"http://localhost:\" + serverPort;\n    }\n\n    @Test\n    public void hasPageTitle() {\n        goTo(\"/\");\n        assertThat(findFirst(\"h2\").getText()).isEqualTo(\"Login\");\n    }\n\n    @Test\n    public void should_be_redirected_after_filling_form() {\n        goTo(\"/\");\n        assertThat(findFirst(\"h2\").getText()).isEqualTo(\"Login\");\n\n        find(\"button\", withName(\"twitterSignin\")).click();\n assertThat(findFirst(\"h2\").getText()).isEqualTo(\"Your profile\");\n\n        fill(\"#twitterHandle\").with(\"geowarin\");\n        fill(\"#email\").with(\"geowarin@mymail.com\");\n        fill(\"#birthDate\").with(\"03/19/1987\");\n\n        find(\"button\", withName(\"addTaste\")).click();\n        fill(\"#tastes0\").with(\"spring\");\n\n        find(\"button\", withName(\"save\")).click();\n\n        takeScreenShot();\n        assertThat(findFirst(\"h2\").getText()).isEqualTo(\"Tweet results for spring\");\n        assertThat(findFirst(\"ul.collection\").find(\"li\")).hasSize(2);\n    }\n}\n```", "```java\npackage pages;\n\nimport org.fluentlenium.core.FluentPage;\nimport org.fluentlenium.core.domain.FluentWebElement;\nimport org.openqa.selenium.support.FindBy;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class LoginPage extends FluentPage {\n    @FindBy(name = \"twitterSignin\")\n    FluentWebElement signinButton;\n\n    public String getUrl() {\n        return \"/login\";\n    }\n\n    public void isAt() {\n        assertThat(findFirst(\"h2\").getText()).isEqualTo(\"Login\");\n    }\n\n    public void login() {\n        signinButton.click();\n    }\n}\n```", "```java\npackage pages;\n\nimport org.fluentlenium.core.FluentPage;\nimport org.fluentlenium.core.domain.FluentWebElement;\nimport org.openqa.selenium.support.FindBy;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class ProfilePage extends FluentPage {\n    @FindBy(name = \"addTaste\")\n    FluentWebElement addTasteButton;\n    @FindBy(name = \"save\")\n    FluentWebElement saveButton;\n\n    public String getUrl() {\n        return \"/profile\";\n    }\n\n    public void isAt() {\n        assertThat(findFirst(\"h2\").getText()).isEqualTo(\"Your profile\");\n    }\n\n    public void fillInfos(String twitterHandle, String email, String birthDate) {\n        fill(\"#twitterHandle\").with(twitterHandle);\n        fill(\"#email\").with(email);\n        fill(\"#birthDate\").with(birthDate);\n    }\n\n    public void addTaste(String taste) {\n        addTasteButton.click();\n        fill(\"#tastes0\").with(taste);\n    }\n\n    public void saveProfile() {\n        saveButton.click();\n    }\n}\n```", "```java\npackage pages;\n\nimport com.google.common.base.Joiner;\nimport org.fluentlenium.core.FluentPage;\nimport org.fluentlenium.core.domain.FluentWebElement;\nimport org.openqa.selenium.support.FindBy;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class SearchResultPage extends FluentPage {\n    @FindBy(css = \"ul.collection\")\n    FluentWebElement resultList;\n\n    public void isAt(String... keywords) {\n        assertThat(findFirst(\"h2\").getText())\n                .isEqualTo(\"Tweet results for \" + Joiner.on(\",\").join(keywords));\n    }\n\n    public int getNumberOfResults() {\n        return resultList.find(\"li\").size();\n    }\n}\n```", "```java\n@Page\nprivate LoginPage loginPage;\n@Page\nprivate ProfilePage profilePage;\n@Page\nprivate SearchResultPage searchResultPage;\n\n@Test\npublic void should_be_redirected_after_filling_form() {\n    goTo(\"/\");\n    loginPage.isAt();\n\n    loginPage.login();\n    profilePage.isAt();\n\n    profilePage.fillInfos(\"geowarin\", \"geowarin@mymail.com\", \"03/19/1987\");\n    profilePage.addTaste(\"spring\");\n\n    profilePage.saveProfile();\n\n    takeScreenShot();\n    searchResultPage.isAt();\n    assertThat(searchResultPage.getNumberOfResults()).isEqualTo(2);\n}\n```", "```java\napply plugin: 'java'\n```", "```java\napply plugin: 'groovy'\n```", "```java\ntestCompile 'org.codehaus.groovy:groovy-all:2.4.4:indy'\ntestCompile 'org.spockframework:spock-spring'\n```", "```java\npackage masterSpringMvc.controller\n\nimport masterSpringMvc.MasterSpringMvcApplication\nimport masterSpringMvc.search.StubTwitterSearchConfig\nimport org.springframework.beans.factory.annotation.Autowired\nimport org.springframework.boot.test.SpringApplicationContextLoader\nimport org.springframework.test.context.ContextConfiguration\nimport org.springframework.test.context.web.WebAppConfiguration\nimport org.springframework.test.web.servlet.MockMvc\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders\nimport org.springframework.web.context.WebApplicationContext\nimport spock.lang.Specification\n\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n\n@ContextConfiguration(loader = SpringApplicationContextLoader,\n        classes = [MasterSpringMvcApplication, StubTwitterSearchConfig])\n@WebAppConfiguration\nclass HomeControllerSpec extends Specification {\n    @Autowired\n    WebApplicationContext wac;\n\n    MockMvc mockMvc;\n\n    def setup() {\n        mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).build();\n    }\n\n    def \"User is redirected to its profile on his first visit\"() {\n        when: \"I navigate to the home page\"\n        def response = this.mockMvc.perform(get(\"/\"))\n\n        then: \"I am redirected to the profile page\"\n        response\n                .andExpect(status().isFound())\n                .andExpect(redirectedUrl(\"/profile\"))\n    }\n}\n```", "```java\npackage masterSpringMvc.search\n\nimport masterSpringMvc.MasterSpringMvcApplication\nimport org.springframework.boot.test.SpringApplicationContextLoader\nimport org.springframework.test.context.ContextConfiguration\nimport org.springframework.test.context.web.WebAppConfiguration\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders\nimport spock.lang.Specification\n\nimport static org.hamcrest.Matchers.*;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n\n@ContextConfiguration(loader = SpringApplicationContextLoader,\n        classes = [MasterSpringMvcApplication])\n@WebAppConfiguration\nclass SearchControllerMockSpec extends Specification {\n    def twitterSearch = Mock(TwitterSearch)\n    def searchController = new SearchController(twitterSearch)\n\n    def mockMvc = MockMvcBuilders.standaloneSetup(searchController)\n            .setRemoveSemicolonContent(false)\n            .build()\n\n    def \"searching for the spring keyword should display the search page\"() {\n        when: \"I search for spring\"\n        def response = mockMvc.perform(get(\"/search/mixed;keywords=spring\"))\n\n        then: \"The search service is called once\"\n        1 * twitterSearch.search(_, _) >> [new LightTweet('tweetText')]\n\n        and: \"The result page is shown\"\n        response\n                .andExpect(status().isOk())\n                .andExpect(view().name(\"resultPage\"))\n\n        and: \"The model contains the result tweets\"\n        response\n                .andExpect(model().attribute(\"tweets\", everyItem(\n                hasProperty(\"text\", is(\"tweetText\"))\n        )))\n    }\n}\n```", "```java\ntestCompile 'org.gebish:geb-spock:0.12.0'\n```", "```java\nimport org.openqa.selenium.Dimension\nimport org.openqa.selenium.firefox.FirefoxDriver\nimport org.openqa.selenium.phantomjs.PhantomJSDriver\n\nreportsDir = new File('./build/geb-reports')\ndriver = {\n        def driver = new FirefoxDriver()\n    // def driver = new PhantomJSDriver()\n    driver.manage().window().setSize(new Dimension(1024, 768))\n    return driver\n}\n```", "```java\nimport geb.Configuration\nimport geb.spock.GebSpec\nimport masterSpringMvc.MasterSpringMvcApplication\nimport masterSpringMvc.search.StubTwitterSearchConfig\nimport org.springframework.beans.factory.annotation.Value\nimport org.springframework.boot.test.SpringApplicationContextLoader\nimport org.springframework.boot.test.WebIntegrationTest\nimport org.springframework.test.context.ContextConfiguration\n\n@ContextConfiguration(loader = SpringApplicationContextLoader,\n        classes = [MasterSpringMvcApplication, StubTwitterSearchConfig])\n@WebIntegrationTest(randomPort = true)\nclass IntegrationSpec extends GebSpec {\n\n    @Value('${local.server.port}')\n    int port\n\n    Configuration createConf() {\n        def configuration = super.createConf()\n        configuration.baseUrl = \"http://localhost:$port\"\n        configuration\n    }\n\n    def \"User is redirected to the login page when not logged\"() {\n        when: \"I navigate to the home page\"\n        go '/'\n//        report 'navigation-redirection'\n\n        then: \"I am redirected to the profile page\"\n        $('h2', 0).text() == 'Login'\n    }\n}\n```", "```java\npackage geb.pages\n\nimport geb.Page\n\nclass LoginPage extends Page {\n\n    static url = '/login'\n    static at = { $('h2', 0).text() == 'Login' }\n    static content = {\n        twitterSignin { $('button', name: 'twitterSignin') }\n    }\n\n    void loginWithTwitter() {\n        twitterSignin.click()\n    }\n}\n```", "```java\npackage geb.pages\n\nimport geb.Page\n\nclass ProfilePage extends Page {\n\n    static url = '/profile'\n    static at = { $('h2', 0).text() == 'Your profile' }\n    static content = {\n        addTasteButton { $('button', name: 'addTaste') }\n        saveButton { $('button', name: 'save') }\n    }\n\n    void fillInfos(String twitterHandle, String email, String birthDate) {\n        $(\"#twitterHandle\") << twitterHandle\n        $(\"#email\") << email\n        $(\"#birthDate\") << birthDate\n    }\n\n    void addTaste(String taste) {\n        addTasteButton.click()\n        $(\"#tastes0\") << taste\n    }\n\n    void saveProfile() {\n        saveButton.click();\n    }\n}\n```", "```java\npackage geb.pages\n\nimport geb.Page\n\nclass SearchResultPage extends Page {\n    static url = '/search'\n    static at = { $('h2', 0).text().startsWith('Tweet results for') }\n    static content = {\n        resultList { $('ul.collection') }\n        results { resultList.find('li') }\n    }\n}\n```", "```java\nimport geb.Configuration\nimport geb.pages.LoginPage\nimport geb.pages.ProfilePage\nimport geb.pages.SearchResultPage\nimport geb.spock.GebSpec\nimport masterSpringMvc.MasterSpringMvcApplication\nimport masterSpringMvc.auth.StubSocialSigninConfig\nimport masterSpringMvc.search.StubTwitterSearchConfig\nimport org.springframework.beans.factory.annotation.Value\nimport org.springframework.boot.test.SpringApplicationContextLoader\nimport org.springframework.boot.test.WebIntegrationTest\nimport org.springframework.test.context.ContextConfiguration\n\n@ContextConfiguration(loader = SpringApplicationContextLoader,\n        classes = [MasterSpringMvcApplication, StubTwitterSearchConfig, StubSocialSigninConfig])\n@WebIntegrationTest(randomPort = true)\nclass IntegrationSpec extends GebSpec {\n\n    @Value('${local.server.port}')\n    int port\n\n    Configuration createConf() {\n        def configuration = super.createConf()\n        configuration.baseUrl = \"http://localhost:$port\"\n        configuration\n    }\n\n    def \"User is redirected to the login page when not logged\"() {\n        when: \"I navigate to the home page\"\n        go '/'\n\n        then: \"I am redirected to the login page\"\n        $('h2').text() == 'Login'\n    }\n\n    def \"User is redirected to its profile on his first visit\"() {\n        when: 'I am connected'\n        to LoginPage\n        loginWithTwitter()\n\n        and: \"I navigate to the home page\"\n        go '/'\n\n        then: \"I am redirected to the profile page\"\n        $('h2').text() == 'Your profile'\n    }\n\n    def \"After filling his profile, the user is taken to result matching his tastes\"() {\n        given: 'I am connected'\n        to LoginPage\n        loginWithTwitter()\n\n        and: 'I am on my profile'\n        to ProfilePage\n\n        when: 'I fill my profile'\n        fillInfos(\"geowarin\", \"geowarin@mymail.com\", \"03/19/1987\");\n        addTaste(\"spring\")\n\n        and: 'I save it'\n        saveProfile()\n\n        then: 'I am taken to the search result page'\n        at SearchResultPage\n        page.results.size() == 2\n    }\n}\n```"]