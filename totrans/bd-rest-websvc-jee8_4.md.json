["```java\n    @GET\n    public void calculate(@Suspended final AsyncResponse \n      asyncResponse) {\n```", "```java\n        asyncResponse.setTimeout(5, TimeUnit.SECONDS);\n\n        final String requestThreadName = getCurrentThreadName();\n\n        new Thread(() -> {\n            try {\n                // simulate heavy processing here\n                TimeUnit.SECONDS.sleep(3);\n            } catch (InterruptedException e) {\n                LOGGER.log(Level.WARNING, \"Could not wait for 3s.\", e);\n            }\n            final String responseThreadName = getCurrentThreadName();\n```", "```java\n            Map<String, String> response = new HashMap<>();\n            response.put(\"requestThread\", requestThreadName);\n            response.put(\"responseThread\", responseThreadName);\n\n            asyncResponse.resume(Response.ok(response)\n              .build());\n        }).start();\n    }\n```", "```java\n    private LinkedBlockingQueue<AsyncResponse> responses = \n      new LinkedBlockingQueue<>();\n\n    @GET\n    public void lock(@Suspended final AsyncResponse asyncResponse) \n      throws InterruptedException {\n        String currentThreadName = getCurrentThreadName();\n        LOGGER.log(Level.INFO, \"Locking {0} with thread {1}.\", \n          new Object[]{asyncResponse, currentThreadName});\n\n        responses.put(asyncResponse);\n```", "```java\n    @DELETE\n    public Response unlock() {\n        String currentThreadName = getCurrentThreadName();\n        AsyncResponse asyncResponse = responses.poll();\n\n```", "```java\n        if (asyncResponse != null) {\n            LOGGER.log(Level.INFO, \"Unlocking {0} with thread {1}.\", \n              new Object[]{asyncResponse, currentThreadName});\n            asyncResponse.resume(Response.ok(Collections.singletonMap(\n              \"currentThread\", currentThreadName)).build());\n        }\n\n        return Response.noContent().build();\n    }\n```", "```java\n        asyncResponse.setTimeout(5, TimeUnit.SECONDS);\n        asyncResponse.setTimeoutHandler((response) -> {\n            responses.remove(response);\n            response.resume(Response.status(Response.Status\n              .SERVICE_UNAVAILABLE).build());\n        });\n```", "```java\n@Resource\nprivate ManagedEcecutorService executorService;\n```", "```java\n        executorService.execute(() -> {\n            asyncResponse.resume(Response.ok(fibonacci(i)).build());\n            LOGGER.log(Level.INFO, \"Calculated Fibonacci for {0}.\", \n              asyncResponse);\n        });\n```", "```java\n        asyncResponse.setTimeout(10, TimeUnit.SECONDS);\n        asyncResponse.setTimeoutHandler((r) -> {\n            r.resume(Response.accepted(UUID.randomUUID()\n              .toString()).build()); //sending HTTP 202 (Accepted)\n        });\n```", "```java\n    static class LoggingCompletionCallback implements \n      CompletionCallback {\n\n        @Override\n        public void onComplete(Throwable throwable) {\n            LOGGER.log(Level.INFO, \"Completed processing.\", throwable);\n        }\n    }\n```", "```java\n    static class LoggingConnectionCallback implements \n      ConnectionCallback {\n\n        @Override\n        public void onDisconnect(AsyncResponse disconnected) {\n            LOGGER.log(Level.INFO, \"Client disconnected on {0}.\", \n              disconnected);\n        }\n```", "```java\n        asyncResponse.register(LoggingCompletionCallback.class);\n        asyncResponse.register(LoggingConnectionCallback.class);\n```", "```java\n    @GET\n    @Path(\"/{i}\")\n    public void completable(@Suspended final AsyncResponse \n      asyncResponse, @PathParam(\"i\") final int i) {\n        CompletableFuture\n                .runAsync(() -> fibonacci(i), executorService)\n                .thenApply(asyncResponse::resume);\n    }\n```", "```java\n    @Test\n    public void fibonacci17() throws Exception {\n        Future<Long> fibonacci = webTarget.path(\"/fibonacci/17\")\n          .request(MediaType.TEXT_PLAIN_TYPE).async()\n          .get(Long.class);\n        assertEquals(1597, (long) fibonacci.get());\n\n    }\n```", "```java\n    @Test\n    public void fibonacci17WithCallback() throws Exception {\n        Future<Long> fibonacci = webTarget.path(\"/fibonacci/17\")\n          .request(MediaType.TEXT_PLAIN_TYPE).async()\n          .get(new InvocationCallback<Long>() {\n            @Override\n            public void completed(Long aLong) {\n                LOGGER.log(Level.INFO, \n                  \"Completed Fibonacci 17 with {0}.\", aLong);\n            }\n\n            @Override\n            public void failed(Throwable throwable) {\n                LOGGER.log(Level.WARNING, \n                  \"Completed Fibonacci 17 with error.\", throwable);\n            }\n        });\n        assertEquals(1597, (long) fibonacci.get());\n    }\n```", "```java\n    @Test\n    public void fibonacci3_4_5_6_8_21() throws Exception {\n\n        CompletableFuture<Long> fibonacci =\n                Futures.toCompletable(webTarget.path(\"/fibonacci/{i}\")\n                  .resolveTemplate(\"i\", 3)\n                        .request(MediaType.TEXT_PLAIN_TYPE)\n                           .async().get(Long.class))\n                        .thenApply(i -> webTarget\n                           .path(\"/fibonacci/{i}\")\n                           .resolveTemplate(\"i\", i + 2)\n                                .request(MediaType.TEXT_PLAIN_TYPE)\n                                  .get(Long.class))\n                        .thenApply(i -> webTarget\n                          .path(\"/fibonacci/{i}\")\n        ...\n        ...\n        ...\n        assertEquals(10946, (long) fibonacci.get());\n    }\n```"]