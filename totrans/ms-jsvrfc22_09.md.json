["```java\n<context-param>\n <param-name>javax.faces.STATE_SAVING_METHOD</param-name>\n <param-value>server</param-value>\n</context-param>\n```", "```java\n<context-param>\n <param-name>javax.faces.PARTIAL_STATE_SAVING</param-name>\n <param-value>false</param-value>\n</context-param>\n```", "```java\n<context-param>\n <param-name>javax.faces.FULL_STATE_SAVING_VIEW_IDS</param-name>\n <param-value>/done.xhtml,/error.xhtml</param-value>\n</context-param>\n```", "```java\n    #{facesContext.application.stateManager.\n                               isSavingStateInClient(facesContext)}\n    ```", "```java\n    FacesContext facesContext = FacesContext.getCurrentInstance();\n    Application application = facesContext.getApplication();\n    StateManager stateManager = application.getStateManager();\n    logger.log(Level.INFO, \"Is view state saved on client ? {0}\", \n                    stateManager.isSavingStateInClient(facesContext));\n    ```", "```java\n<context-param>\n <param-name>com.sun.faces.numberOfLogicalViews</param-name>\n <param-value>2</param-value>\n</context-param>\n```", "```java\n<context-param>\n <param-name>com.sun.faces.numberOfViewsInSession</param-name>\n <param-value>4</param-value>\n</context-param>\n```", "```java\n@Override\npublic void writeState(FacesContext ctx, Object state,\n            StringBuilder stateCapture) throws IOException {\n\n   if (stateCapture != null) {\n       doWriteState(ctx,state,new StringBuilderWriter(stateCapture));\n   } else {\n       ResponseWriter writer = ctx.getResponseWriter();\n\n       writer.startElement(\"input\", null);\n       writer.writeAttribute(\"type\", \"hidden\", null);\n       writer.writeAttribute(\"name\", \n                         ResponseStateManager.VIEW_STATE_PARAM, null);\n       if (webConfig.isOptionEnabled(EnableViewStateIdRendering)) {\n           String viewStateId = Util.getViewStateId(ctx);\n           writer.writeAttribute(\"id\", viewStateId, null);\n       }\n       StringBuilder stateBuilder = new StringBuilder();\n       doWriteState(ctx,state,new StringBuilderWriter(stateBuilder));\n\n       WriteStateInDB writeStateInDB = new WriteStateInDB();\n       String client_id = \n          writeStateInDB.writeStateDB(stateBuilder.toString());\n\n       if (client_id != null) {   \n           writer.writeAttribute(\"value\", client_id, null);\n       } else {\n           writer.writeAttribute(\"value\", \n                                  stateBuilder.toString(), null);\n       }\n       if (webConfig.isOptionEnabled(AutoCompleteOffOnViewState)) {\n           writer.writeAttribute(\"autocomplete\", \"off\", null);\n       }\n       writer.endElement(\"input\");\n\n       writeClientWindowField(ctx, writer);\n       writeRenderKitIdField(ctx, writer);\n   }\n }\n```", "```java\n@Override\npublic Object getState(FacesContext ctx, String viewId) \n                                            throws IOException {\n\n String stateString = ClientSideStateHelper.getStateParamValue(ctx);\n\n if (stateString == null) {\n     return null;\n }\n\n if (\"stateless\".equals(stateString)) {\n     return \"stateless\";\n } else {\n     WriteStateInDB writeStateInDB = new WriteStateInDB();\n     stateString = writeStateInDB.readStateDB(stateString);\n     if (stateString == null) {\n         return null;\n     }\n }\n\n return doGetState(stateString);\n}\n```", "```java\npublic class CustomResponseStateManager extends ResponseStateManager {\n\n private StateHelper helper;\n\n public CustomResponseStateManager() {\n  WebConfiguration webConfig = WebConfiguration.getInstance();\n  String stateMode =\n         webConfig.getOptionValue(StateSavingMethod);\n  helper = ((StateManager.STATE_SAVING_METHOD_CLIENT.equalsIgnoreCase(stateMode)\n ? new CustomClientSideStateHelper()\n     : new ServerSideStateHelper()));\n }\n...\n```", "```java\npublic class CustomRenderKit extends RenderKitWrapper {\n\n private RenderKit renderKit;\n private ResponseStateManager responseStateManager = \n                              new CustomResponseStateManager();\n\n public CustomRenderKit() {}\n\n public CustomRenderKit(RenderKit renderKit) {\n  this.renderKit = renderKit;\n }\n\n @Override\n public synchronized ResponseStateManager getResponseStateManager() {\n\n  if (responseStateManager == null) {\n      responseStateManager = new CustomResponseStateManager();\n  }\n  return responseStateManager;\n }\n```", "```java\n @Override\n public RenderKit getWrapped() {\n  return renderKit;\n }\n}\n```", "```java\n<render-kit>\n <render-kit-class>\n   book.beans.CustomRenderKit\n </render-kit-class>\n</render-kit>\n```", "```java\npublic class WriteStateInDB {\n\n private DBCollection dbCollection;\n\n public WriteStateInDB() throws UnknownHostException {\n  Mongo mongo = new Mongo(\"127.0.0.1\", 27017);\n  DB db = mongo.getDB(\"jsf_db\");\n  dbCollection = db.getCollection((\"jsf\"));\n }\n\n protected String writeStateDB(String state) {\n\n //TTL Index        \n BasicDBObject index = new BasicDBObject(\"date\", 1);\n BasicDBObject options = new BasicDBObject(\"expireAfterSeconds\", \n                                    TimeUnit.MINUTES.toSeconds(1));\n        dbCollection.ensureIndex(index, options);\n\n BasicDBObject basicDBObject = new BasicDBObject();\n basicDBObject.append(\"date\", new Date());\n basicDBObject.append(\"state\", state);\n\n dbCollection.insert(basicDBObject);\n ObjectId id = (ObjectId) basicDBObject.get(\"_id\");\n\n return String.valueOf(id);\n\n }\n\n protected String readStateDB(String id) {\n\n  BasicDBObject query = new BasicDBObject(\"_id\", new ObjectId(id));\n  DBObject dbObj = dbCollection.findOne(query);\n  if (dbObj != null) {\n      return dbObj.get(\"state\").toString();\n  }\n  return null;\n\n  }\n}\n```", "```java\npublic class CustomStateManager extends StateManagerWrapper {\n\n private StateManager stateManager;\n\n public CustomStateManager() {\n }\n\n public CustomStateManager(StateManager stateManager) {\n  this.stateManager = stateManager;\n }\n\n @Override\n // ... override here the needed methods\n\n @Override\n public StateManager getWrapped() {\n  return stateManager;\n }   \n}\n```", "```java\n<application>\n <state-manager>\n   book.beans.CustomStateManager\n </state-manager>\n</application>\n```", "```java\n@WebFilter(filterName = \"LogoutFilter\", servletNames = {\"Faces Servlet\"})\npublic class LogoutFilter implements Filter {\n...\n@Override\npublic void doFilter(ServletRequest request, ServletResponse response,\n             FilterChain chain) throws IOException, ServletException {\n\n HttpServletRequest requestHTTP = (HttpServletRequest) request;\n HttpServletResponse responseHTTP = (HttpServletResponse) response;\n try {\n     String resourceURI = requestHTTP.getContextPath() + \n            requestHTTP.getServletPath() + \n            ResourceHandler.RESOURCE_IDENTIFIER;\n     String requestURI = requestHTTP.getRequestURI();\n\n     if (!requestURI.startsWith(resourceURI)) {                   \n         responseHTTP.setHeader(\"Expires\", \n                                \"Sat, 6 May 1995 12:00:00 GMT\");\n         responseHTTP.setHeader(\"Cache-Control\", \n                                \"no-store,no-cache,must-revalidate\");\n         responseHTTP.addHeader(\"Cache-Control\", \n                                \"post-check=0, pre-check=0\");\n         responseHTTP.setHeader(\"Pragma\", \"no-cache\");\n     }\n     chain.doFilter(request, response);\n } catch (IOException | ServletException t) {\n }\n}\n```", "```java\n<error-page>\n <exception-type>\n  javax.faces.application.ViewExpiredException\n </exception-type>\n <location>/faces/expired.xhtml</location>\n</error-page>\n```", "```java\n<h:body>\n Your session expired ...\n <h:link value=\"Go to Login Page ...\" outcome=\"index\" />         \n</h:body>\n```", "```java\n<context-param>\n <param-name>\n  com.sun.faces.enableRestoreView11Compatibility\n </param-name>\n <param-value>true</param-value>\n</context-param>\n```", "```java\n<context-param>\n <param-name>javax.faces.SERIALIZE_SERVER_STATE</param-name>\n <param-value>false</param-value>\n</context-param>\n```", "```java\n<f:view transient=\"true\">\n ...\n</f:view>   \n```", "```java\n@Named\n@ViewScoped\npublic class TimestampVSBean implements Serializable{\n\n private Timestamp timestamp;\n\n public TimestampVSBean() {\n  java.util.Date date = new java.util.Date();\n  timestamp = new Timestamp(date.getTime());\n }\n\n public Timestamp getTimestamp() {\n  return timestamp;\n }\n\n public void setTimestamp(Timestamp timestamp) {\n  this.timestamp = timestamp;\n }\n}\n```", "```java\n<f:view transient=\"true\">       \n <h:form>            \n  <h:commandButton value=\"Generate Timestamp\"/>\n </h:form>\n <hr/>\n Request Scoped Bean:<h:outputText value=\"#{timestampRSBean.timestamp}\"/>\n <hr/>\n View Scoped Bean:<h:outputText value=\"#{timestampVSBean.timestamp}\"/>  \n [keep an eye on this in stateless mode]   \n <hr/>\n Session Scoped Bean:<h:outputText value=\"#{timestampSSBean.timestamp}\"/>\n <hr/>\n Application Scoped Bean:<h:outputText value=\"#{timestampASBean.timestamp}\"/>\n <hr/>\n</f:view>\n```", "```java\n    <f:view transient=\"true\">\n      Is Stateless (using transient) ? #{facesContext.viewRoot.transient}  \n       ...\n    </f:view>\n    ```", "```java\n    Is Stateless (using stateless) ? \n    #{facesContext.postback ? facesContext.renderKit.responseStateManager.\n                isStateless(facesContext, null) : 'Not postback yet!'}\n    ```", "```java\n    FacesContext facesContext = FacesContext.getCurrentInstance();\n    UIViewRoot uiViewRoot = facesContext.getViewRoot();\n    logger.log(Level.INFO, \"Is stateless (using isTransient) ? {0}\",\n                                            uiViewRoot.isTransient());\n    logger.log(Level.INFO, \"Is stateless (using isStateless) ? {0}\", facesContext.getRenderKit().getResponseStateManager().isStateless(facesContext, null));\n    ```", "```java\n<p>Hi, <h:outputText value=\"#{loginbean.name}\" /></p>\n<p>Hi, #{loginbean.name}</p>\n```", "```java\n<p>Hi, <h:outputText value=\"#{loginbean.name}\" escape=\"false\" /></p>\n```"]