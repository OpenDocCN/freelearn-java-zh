["```java\n// Using JavaScript function\nfunction App() {\n  return <h1>Hello World</h1>;\n} \n```", "```java\n// Using ES6 class\nclass App extends React.Component {\n  render() {\n    return <h1>Hello World</h1>;\n  }\n} \n```", "```java\nfunction App() {\n  return (\n    <h1>Hello World</h1>\n    <h2>This is my first React component</h2>\n  );\n} \n```", "```java\n// Wrap elements inside the div\nfunction App() {\n  return (\n    <div>\n      <h1>Hello World</h1>\n      <h2>This is my first React component</h2>\n    </div>\n  );\n} \n```", "```java\n// Using fragments\nfunction App() {\n  return (\n    **<React.Fragment>**\n      <h1>Hello World</h1>\n      <h2>This is my first React component</h2>\n    <**/React.Fragment**>\n  );\n} \n```", "```java\n// Using fragments short syntax\nfunction App() {\n  return (\n    <>\n      <h1>Hello World</h1>\n      <h2>This is my first React component</h2>\n    </>\n  );\n} \n```", "```java\nimport React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App'\nimport './index.css'\nReactDOM.createRoot(document.getElementById('root')).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n) \n```", "```java\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nconst container = document.getElementById('root');\n// Create a root\nconst root = ReactDOM.createRoot(container);\n// Render an element to the root\nroot.render(<App />); \n```", "```java\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Vite + React</title>\n  </head>\n  <body>\n    **<****div****id****=****\"root\"****></****div****>**\n    <script type=\"module\" src=\"img/main.jsx\"></script>\n  </body>\n</html> \n```", "```java\nimport { useState } from 'react'\nimport reactLogo from './assets/react.svg'\nimport viteLogo from '/vite.svg'\nimport './App.css'\nfunction App() {\n  const [count, setCount] = useState(0)\n  return (\n    <div className=\"App\">\n      <div>\n        <a href=\"https://vitejs.dev\" target=\"_blank\">\n          <img src={viteLogo} className=\"logo\" alt=\"Vite logo\" />\n        </a>\n        <a href=\"https://reactjs.org\" target=\"_blank\">\n          <img src={reactLogo} className=\"logo react\" alt=\"React logo\" />\n        </a>\n      </div>\n      <h1>Hello React</h1>\n      <div className=\"card\">\n        <button onClick={() => setCount((count) => count + 1)}>\n          count is {count}\n        </button>\n        <p>\n          Edit <code>src/App.jsx</code> and save to test HMR\n        </p>\n      </div>\n      <p className=\"read-the-docs\">\n        Click on the Vite and React logos to learn more\n      </p>\n    </div>\n  )\n}\nexport default App \n```", "```java\nimport React from 'react' // Import default value\nimport { name } from â€¦ //  Import named value \n```", "```java\nexport default React // Default export\nexport { name }  //  Named export \n```", "```java\nconst keyword, the variable content cannot be reassigned:\n```", "```java\nconst PI = 3.14159; \n```", "```java\nlet count = 10;\nif (count > 5) {\n  const total = count * 2;\n  console.log(total); // Prints 20 to console\n}\nconsole.log(total); // Error, outside the scope \n```", "```java\nconst myObj = {foo:  3};\nmyObj.foo = 5; // This is ok \n```", "```java\nfunction(x) {\n  return x * 2;\n} \n```", "```java\nx => x * 2 \n```", "```java\nconst calc = x => x * 2 \n```", "```java\ncalc(5); // returns 10 \n```", "```java\nconst calcSum = (x, y) => x + y\n// function call\ncalcSum(2, 3); // returns 5 \n```", "```java\nconst calcSum = (x, y) => {\n  console.log('Calculating sum');\n  return x + y;\n} \n```", "```java\nconst sayHello = () => \"Hello\" \n```", "```java\nlet person = {firstName: 'John', lastName: 'Johnson'};\nlet greeting = \"Hello \" + ${person.firstName} + \" \" + ${person.lastName}; \n```", "```java `` ```", "```java\nlet person = {firstName: 'John', lastName: 'Johnson'};\nlet greeting = `Hello ${person.firstName} ${person.lastName}`; \n```", "```java\nconst person = {\n  firstName: 'John',\n  lastName: 'Johnson',\n  email: 'j.johnson@mail.com'\n}; \n```", "```java\nconst { firstName, lastName, email } = person; \n```", "```java\nconst firstName = person.firstName;\nconst lastName = person.lastName;\nconst email = person.email; \n```", "```java\nclass Person {\n  constructor(firstName, lastName) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n  }\n} \n```", "```java\nclass Employee extends Person {\n  constructor(firstName, lastName, title, salary) {\n    super(firstName, lastName);\n    this.title = title;\n    this.salary = salary;\n  }\n} \n```", "```java\nfunction App(props) {\n  return <h1>Hello World **{props.user}**</h1>;\n} \n```", "```java\n<Hello count=**{****2****+****2****}** /> \n```", "```java\n<div style={{ height: 20, width: 200 }}>\n  Hello\n</div> \n```", "```java\nconst divStyle = { color: 'red', height: 30 };\nconst MyComponent = () => (\n  <div style={divStyle}>Hello</div>\n); \n```", "```java\nimport './App.js';\n...\n<div **className**=\"App-header\"> This is my app</div> \n```", "```java\nfunction Hello() {\n  return <h1>Hello John</h1>;\n} \n```", "```java\nfunction Hello**(props)** {\n  return <h1>Hello **{props.user}**</h1>;\n} \n```", "```java\n<Hello user=\"John\" /> \n```", "```java\n<Hello firstName=\"John\" lastName=\"Johnson\" /> \n```", "```java\nfunction Hello(props) {\n  return <h1>Hello {props.firstName} {props.lastName}</h1>;\n} \n```", "```java\nfunction Hello({ firstName, lastName }) {\n  return <h1>Hello {firstName} {lastName}</h1>;\n} \n```", "```java\nconst [state, setState] = React.useState(initialValue); \n```", "```java\nconst [name, setName] = React.useState('Jim'); \n```", "```java\nimport React, { useState } from 'react'; \n```", "```java\nconst [name, setName] = useState('Jim'); \n```", "```java\n// Update name state value\nsetName('John'); \n```", "```java\n// Don't do this, UI won't re-render\nname = 'John'; \n```", "```java\n// Create two states: firstName and lastName\nconst [firstName, setFirstName] = useState('John');\nconst [lastName, setLastName] = useState('Johnson'); \n```", "```java\n// Update state values\nsetFirstName('Jim');\nsetLastName('Palmer'); \n```", "```java\nconst [name, setName] = useState({\n  firstName: 'John',  \n  lastName: 'Johnson'\n}); \n```", "```java\nsetName({ firstName: 'Jim', lastName: 'Palmer' }) \n```", "```java\nsetName({ ...name, firstName: 'Jim' }) \n```", "```java\n// Renders Hello John\nimport React, { useState } from 'react';\nfunction MyComponent() {\n  const [firstName, setFirstName] = useState('John');\n  return <div>Hello **{firstName}**</div>;\n} \n```", "```java\nconst [name, setName] = useState({\n  firstName: 'John',  \n  lastName: 'Johnson'\n});\nreturn <div>Hello **{name.firstName}**</div>; \n```", "```java\nfunction HeaderText(props) {\n  return (\n    <h1>\n      {props.text}\n    </h1>\n  )\n}\nexport default HeaderText; \nmemo():\n```", "```java\nimport React, { memo } from 'react';\nfunction HeaderText(props) {\n  return (\n    <h1>\n      {props.text}\n    </h1>\n  )\n}\nexport default memo(HeaderText); \n```", "```java\nfunction MyComponent(props) {\n  const isLoggedin = props.isLoggedin;\n  if (isLoggedin) {\n    return (\n      <Logout />\n    )\n  }\n  return (\n    <Login />\n  )\n} \n```", "```java\nfunction MyComponent(props) {\n  const isLoggedin = props.isLoggedin;\n  return (\n    <>\n      { isLoggedin ? <Logout /> : <Login /> }\n    </>\n  );\n} \n```", "```java\n    import { useState } from 'react';\n    function Counter() {\n      // count state with initial value 0\n      const [count, setCount] = useState(0);\n      return <div></div>;\n    };\n    export default Counter; \n    ```", "```java\n    import { useState }  from 'react';\n    function Counter() {\n      const [count, setCount] = useState(0);\n      return (\n        <div>\n          <p>Counter = {count}</p>\n          <button onClick={() => setCount(count + 1)}>\n            Increment\n          </button>\n        </div>\n      );\n    };\n    export default Counter; \n    ```", "```java\n**// Correct -> Function is called when button is pressed**\n<button onClick={() => setCount(count + 1)}>\n**// Wrong -> Function is called in render -> Infinite loop**\n<button onClick={setCount(count + 1)}> \n```", "```java\nsetCount(prevCount => prevCount + 1) \n```", "```java\nimport { useState } from 'react';\nfunction App() {\n  const [count, setCount] = useState(0);\n  const [count2, setCount2] = useState(0);\n  const increment = () => {\n    setCount(count + 1); // No re-rendering yet\n    setCount2(count2 + 1);\n    // Component re-renders after all state updates\n  }\n  return (\n    <>\n      <p>Counters: {count} {count2}</p>\n      <button onClick={increment}>Increment</button>\n    </>\n  );\n};\nexport default App; \n```", "```java\nimport { flushSync } from \"react-dom\";\nconst increment = () => {\n  flushSync( () => {\n    setCount(count + 1); // No batch update\n  });\n} \n```", "```java\nuseEffect(callback, [dependencies]) \n```", "```java\nuseEffect hook. Now, when the button is pressed, the count state value increases, and the component is re-rendered. After each render, the useEffect callback function is invoked and we can see Hello from useEffect in the console, as illustrated in the following code snippet:\n```", "```java\nimport { useState, useEffect } from 'react';\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  // Called after every render\n  useEffect(() => {\n    console.log('Hello from useEffect')\n  });\n  return (\n    <>\n      <p>{count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment\n      </button>\n    </>\n  );\n};\nexport default Counter; \n```", "```java\ncount state value is changed (meaning that the previous and current values differ), the useEffect callback function will be invoked. We can also define multiple states in the second argument. If any of these state values are changed, the useEffect hook will be invoked:\n```", "```java\n// Runs when count value is changed and component is re-rendered\nuseEffect(() => {\n  console.log('Counter value is now ' + count);\n}, [count]); \n```", "```java\n// Runs only after the first render\nuseEffect(() => {\n  console.log('Hello from useEffect')\n}, []); \n```", "```java\nunmounted):\n```", "```java\nuseEffect(() => {\n  console.log('Hello from useEffect');\n  return () => {\n    console.log('Clean up function');\n  });\n}, [count]); \n```", "```java\nconst ref = useRef(initialValue) \n```", "```java\nimport { useRef } from 'react';\nimport './App.css';\nfunction App() {\n  const inputRef = useRef(null);\n  return (\n    <>\n      <input ref={inputRef} />\n      <button onClick={() => inputRef.current.focus()}>\n        Focus input\n      </button>\n    </>\n  );\n}\nexport default App; \n```", "```java\n    // useTitle.js\n    function useTitle(title) {\n    } \n    ```", "```java\n    import { useEffect } from 'react';\n    function useTitle(title) {\n      useEffect(() => {\n        document.title = title;\n      }, [title]);\n    }\n    export default useTitle; \n    ```", "```java\n    **import** **useTitle** **from****'./useTitle'****;**\n    function Counter() {\n      return (\n        <>\n        </>\n      );\n    };\n    export default Counter; \n    ```", "```java\n    import React, { useState } from 'react';\n    import useTitle from './useTitle';\n    function App() {\n      const [count, setCount] = useState(0);\n      useTitle(`You clicked ${count} times`);\n      return (\n        <>\n          <p>Counter = {count}</p>\n          <button onClick={ () => setCount(count + 1) }>\n            Increment\n          </button>\n        </>\n      );\n    };\n    export default App; \n    ```", "```java\nimport React from 'react';\nconst AuthContext = React.createContext('');\nexport default AuthContext; \n```", "```java\nimport React from 'react';\nimport AuthContext from './AuthContext';\nimport MyComponent from './MyComponent';\nfunction App() {\n  // User is authenticated and we get the username\n  const userName = 'john';\n  return (\n    <AuthContext.Provider value={userName}>\n      <MyComponent />\n    </AuthContext.Provider>\n  );\n};\nexport default App; \n```", "```java\nimport React from 'react';\nimport AuthContext from './AuthContext';\nfunction MyComponent() {\n  const authContext = React.useContext(AuthContext);\n  return(\n    <>\n      Welcome {authContext}\n    </>\n  );\n}\nexport default MyComponent; \n```", "```java\nconst arr = [1, 2, 3, 4];\nconst resArr = arr.map(x => x * 2); // resArr = [2, 4, 6, 8] \n```", "```java\nimport React from 'react';\nfunction MyList() {\n  const data = [1, 2, 3, 4, 5];\n\n  return (\n    <>\n      <ul>\n        {\n        data.map((number) =>\n          <li>Listitem {number}</li>)\n        }\n      </ul>\n    </>\n  );\n};\nexport default MyList; \n```", "```java\nfunction MyList() {\n  const data = [1, 2, 3, 4, 5];\n  return (\n    <>\n      <ul>\n        {\n        data.map((number, **index**) =>\n          <li **key****=****{index}**>Listitem {number}</li>)\n        }\n      </ul>\n    </>\n  );\n};\nexport default MyList; \n```", "```java\nfunction MyTable() {\n  const data = [\n    {id: 1, brand: 'Ford', model: 'Mustang'},\n    {id: 2, brand: 'VW', model: 'Beetle'},\n    {id: 3, brand: 'Tesla', model: 'Model S'}];\n  return (\n    <>\n      <table>\n        <tbody>\n        {\n        data.map((item) =>\n          <tr key={item.id}>\n            <td>{item.brand}</td><td>{item.model}</td>\n          </tr>)\n        }\n        </tbody>\n      </table>\n    </>\n  );\n};\nexport default MyTable; \n```", "```java\nfunction MyComponent() {\n  // This is called when the button is pressed\n  const handleClick = () => {\n    alert('Button pressed');\n  }\n  return (\n    <>\n      <button onClick={handleClick}>Press Me</button>\n    </>\n  );\n};\nexport default MyComponent; \n```", "```java\n// Correct\n<button onClick={handleClick}>Press Me</button>\n// Wrong\n<button onClick={handleClick()}>Press Me</button> \n```", "```java\nfunction MyForm() {\n  // This is called when the form is submitted\n  const handleSubmit = (event) => {\n    event.preventDefault(); // Prevents default behavior\n    alert('Form submit');\n  }\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"submit\" value=\"Submit\" />\n    </form>\n  );\n};\nexport default MyForm; \n```", "```java\nimport { useState } from 'react';\nfunction MyForm() {\n  const [text, setText] = useState('');\n  // Save input element value to state when it has been changed\n  const handleChange = (event) => {\n    setText(event.target.value);\n  }\n  const handleSubmit = (event) => {\n    alert(`You typed: ${text}`);\n    event.preventDefault();\n  }\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" onChange={handleChange}\n          value={text}/>\n      <input type=\"submit\" value=\"Press me\"/>\n    </form>\n  );\n};\nexport default MyForm; \n```", "```java\nreturn (\n  <form onSubmit={handleSubmit}>\n    <input\n      type=\"text\"\n      onChange={event => setText(event.target.value)}\n      value={text}/\n    >\n    <input type=\"submit\" value=\"Press me\"/>\n  </form>\n); \n```", "```java\nuser state is an object with three attributes: firstName, lastName, and email:\n```", "```java\nconst [user, setUser] = useState({\n  firstName: '',\n  lastName: '',\n  email: ''\n}); \n```", "```java\n<input type=\"text\" **name=****\"lastName\"** onChange={handleChange}\n  **value={user.lastName****}/**> \n```", "```java\nconst handleChange = (event) => {\n  setUser({...user, [event.target.name]:\n      event.target.value});\n} \n```", "```java\nimport { useState } from 'react';\nfunction MyForm() {\n  const [user, setUser] = useState({\n    firstName: '',\n    lastName: '',\n    email: ''\n  });\n  // Save input box value to state when it has been changed\n  const handleChange = (event) => {\n    setUser({...user, [event.target.name]:\n        event.target.value});\n  }\n  const handleSubmit = (event) => {\n    alert(`Hello ${user.firstName} ${user.lastName}`);\n    event.preventDefault();\n  }\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>First name </label>\n      <input type=\"text\" name=\"firstName\" onChange=\n          {handleChange}\n        value={user.firstName}/><br/>\n      <label>Last name </label>\n      <input type=\"text\" name=\"lastName\" onChange=\n          {handleChange}\n        value={user.lastName}/><br/>\n      <label>Email </label>\n      <input type=\"email\" name=\"email\" onChange=\n          {handleChange}\n        value={user.email}/><br/>\n      <input type=\"submit\" value=\"Submit\"/>\n    </form>\n  );\n};\nexport default MyForm; \n```", "```java\nonChange event handler, we call the correct update function to save values into the states. In this case, we donâ€™t need the name input elementâ€™s name attribute:\n```", "```java\nimport { useState } from 'react';\nfunction MyForm() {\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [email, setEmail] = useState('');\n  const handleSubmit = (event) => {\n    alert('Hello ${firstName} ${lastName}');\n    event.preventDefault();\n  }\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>First name </label>\n      <input\n        onChange={e => setFirstName(e.target.value)}\n        value={firstName}/><br/>\n      <label>Last name </label>\n      <input\n        onChange={e => setLastName(e.target.value)}\n        value={lastName}/><br/>\n      <label>Email </label>\n      <input\n        onChange={e => setEmail(e.target.value)}\n        value={email}/><br/>\n      <input type=\"submit\" value=\"Press me\"/>\n    </form>\n  );\n};\nexport default MyForm; \n```"]