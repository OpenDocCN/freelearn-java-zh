- en: Chapter 4. Marvel Dashboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The previous two chapters covered Elasticsearch-head and Bigdesk, two open source
    monitoring tools. This chapter covers Marvel, a non-free tool for monitoring Elasticsearch.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unlike Elasticsearch-head and Bigdesk, Marvel continuously captures and saves
    performance metrics to an index. This lets users refer to historical data for
    analysis, as opposed to just real-time data analysis. In this chapter, we will
    look a bit closer at the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Marvel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrading Marvel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Marvel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Marvel index configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Marvel dashboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring node failures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Marvel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: See [Chapter 2](ch02.html "Chapter 2. Installation and the Requirements for
    Elasticsearch"), *Installation and the Requirements for Elasticsearch*, for instructions
    on how to install the Marvel Agent and the Marvel Kibana dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: 'Marvel stores its metrics data inside Elasticsearch. It is possible to store
    these metrics alongside production data in the same Elasticsearch cluster; however,
    this is inadvisable because:'
  prefs: []
  type: TYPE_NORMAL
- en: Marvel's data indices can grow quite large and, in a production setting, you
    won't want these indices affecting the performance of your primary cluster.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the primary cluster is experiencing issues, having Marvel on a separate cluster
    will allow you to more easily diagnose those issues.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If Marvel is running on a normal data node, it can inadvertently be configured
    to collect data on its own metrics indices. For example, if you log in to the
    Marvel dashboard and start querying the Marvel indices, these queries will then
    be logged back to the Marvel indices. This is probably not the intended behavior.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For these reasons, this chapter covers how to set up a separate Elasticsearch
    cluster for storing Marvel metrics data. Our primary Elasticsearch cluster from
    the last chapter contains three data nodes: `elasticsearch-node-01`, `elasticsearch-node-02`,
    and `elasticsearch-node-03`. We''ll add a new cluster with a single Elasticsearch
    node to store Marvel''s data.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to create a new Elasticsearch cluster for Marvel data:'
  prefs: []
  type: TYPE_NORMAL
- en: On a new host called `elasticsearch-marvel-01`, install Elasticsearch 2.3.2
    using the instructions from [Chapter 2](ch02.html "Chapter 2. Installation and
    the Requirements for Elasticsearch"), *Installation and the Requirements for Elasticsearch*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Configure Elasticsearch by editing the `elasticsearch.yml` configuration file
    to look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install Elasticsearch-head on `elasticsearch-marvel-01`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the Marvel Agent on the three primary Elasticsearch nodes (`elasticsearch-node-01`,
    `elasticsearch-node-02`, and `elasticsearch-node-03`). Log in to each host and
    run the following command to install Marvel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: As mentioned in [Chapter 2](ch02.html "Chapter 2. Installation and the Requirements
    for Elasticsearch"), *Installation and the Requirements for Elasticsearch*, make
    sure to restart each node after installing Marvel, in order to get the Marvel
    agent started.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following lines of configuration to the `elasticsearch.yml` in each
    of the original three `elasticsearch-node-0*` nodes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For a larger Marvel cluster with three nodes, for example, the configuration
    line might look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Install Kibana and the Marvel Kibana plugin on `elasticsearch-marvel-01` using
    the instructions found in [Chapter 2](ch02.html "Chapter 2. Installation and the
    Requirements for Elasticsearch"), *Installation and the Requirements for Elasticsearch*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Configure the Marvel Kibana plugin by editing `config/kibana.yml` to look like
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start Kibana on `elasticsearch-marvel-01` from the Kibana installation directory
    with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output from this command should look like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Setting up Marvel](img/B03798_04_01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Visit the Marvel dashboard on `elasticsearch-marvel-01` in a browser by going
    to `http://elasticsearch-marvel-01:5601/app/marvel`, as seen in the following
    screenshot:![Setting up Marvel](img/B03798_04_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down the page and click the **Show History** or **Hide History** button
    (highlighted in the next screenshot) to view shard activity for the `twitter`
    index:![Setting up Marvel](img/B03798_04_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open Elasticsearch-head on `elasticsearch-marvel-01` and view the indices automatically
    created by Marvel by visiting `http://elasticsearch-marvel-01:9200/_plugin/head/`:![Setting
    up Marvel](img/B03798_04_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `.marvel-2015.12.20` index contains historical data collected by Marvel.
    By default, Marvel creates one new index per day to store its data.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Server time synchronization**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The clocks on all Elasticsearch hosts must be synchronized or Marvel won''t
    show any data. Clock synchronization varies depending on server setup. On a cluster
    of Ubuntu hosts, run this command on all nodes to synchronize their clocks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Upgrading Marvel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Marvel can be upgraded on a rolling basis. This means that nodes are upgraded
    one at a time rather than having to shut down the entire cluster to perform an
    upgrade. For environments with a monitoring cluster and a production cluster,
    upgrade Marvel on the monitoring cluster before upgrading it on the production
    cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'To upgrade the Marvel Agent, run these steps on all nodes in the monitoring
    cluster (in this case, just `elasticsearch-marvel-01`), then for each node in
    the production cluster (`elasticsearch-node-01`, `elasticsearch-node-02`, and
    `elasticsearch-node-03`):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Optional: Disable shard allocation on all nodes.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Disabling shard allocation will make the upgrade faster because the cluster
    won't try to reallocate shards to other nodes when the node goes down for an upgrade.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Stop Elasticsearch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove the old Marvel plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the new Marvel plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start Elasticsearch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check logs for errors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once all nodes in the cluster are upgraded, re-enable shard allocation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Repeat all of these steps for the production cluster.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To upgrade the Marvel Kibana dashboard, run the following commands on `elasticsearch-marvel-01`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Uninstall the old Marvel Kibana plugin with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the new Marvel Kibana plugin. In this example, we are upgrading to
    Marvel 2.3.2:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Configuring Marvel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section covers how to configure the Marvel Agent and data index. Specifically,
    we cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting the Marvel data store location
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specifying which indices to monitor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data export frequency
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Marvel index configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Marvel agent configuration settings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section covers configuring the Marvel Agent. Configure the Agent by editing
    the `elasticsearch.yml` file on each node we are monitoring.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `marvel.agent.exporters` setting determines where the Agent will deliver
    its metrics to. By default, the Marvel agent will export data to the same Elasticsearch
    instance that it is installed on. In our example cluster, we are exporting data
    to `elasticsearch-marvel-01`, and the configuration value looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Other options for the `marvel.agent.exporters` settings include:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Other `elasticsearch.yml` configuration options are described here:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Option | Default Value | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `marvel.enabled` | `true` | Controls whether monitoring data will be exported
    from this node. |'
  prefs: []
  type: TYPE_TB
- en: '| `marvel.agent.interval` | `10s` | Time interval between monitoring data exports.
    Can be set to `-1` to disable exporting of data altogether. |'
  prefs: []
  type: TYPE_TB
- en: '| `marvel.agent.indices` | `_all List of` | Indices to export data from. Supports
    wildcard `*`, addition `+`, and subtraction `-` operators. For example, to export
    data only from nodes that start with `twitter_`, except for the index `twitter_development`,
    we would set this parameter to `+twitter_*,-twitter_development`. |'
  prefs: []
  type: TYPE_TB
- en: '| `marvel.agent.cluster.state.timeout` | `10m` | Timeout for collecting cluster
    state. |'
  prefs: []
  type: TYPE_TB
- en: '| `marvel.agent.cluster.stats.timeout` | `10m` | Timeout for collecting cluster
    statistics. |'
  prefs: []
  type: TYPE_TB
- en: '| `marvel.history.duration` | `7d` | Length of time to retain Marvel indices.
    The `marvel-agent` will automatically delete indices older than this value. Set
    to `-1` to disable automatic index deletion. |'
  prefs: []
  type: TYPE_TB
- en: 'After making any changes to `elasticsearch.yml`, restart Elasticsearch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Marvel index configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section covers how to configure the number of shards, replicas, and various
    other index settings used by Marvel. By default, each Marvel index uses one shard
    and one replica:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To view the default settings used by Marvel, run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will return a large JSON object. The settings that are important are `marvel.order`,
    `marvel.template`, and `marvel.settings`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For large Marvel clusters, consider increasing the number of shards to no more
    than the number of hosts in your cluster for optimal performance. For example,
    for a four-node Marvel monitoring cluster, increase the number of shards to four
    with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice the template is set to `.marvel*` in order to only alter Marvel's indices.
    Additionally, the `order` setting is `1` so this template, `marvel_01`, will have
    higher precedence than the default template `marvel`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, when checking the Marvel settings, we should see:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Understanding the Marvel dashboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section covers how to use the Marvel dashboard to better understand the
    state of your cluster.
  prefs: []
  type: TYPE_NORMAL
- en: To make monitoring our cluster more interesting, we'll stream more Twitter data
    into it using the `stream2es` program, and run random queries against the index
    using a custom bash script described in this section.
  prefs: []
  type: TYPE_NORMAL
- en: 'See [Chapter 3](ch03.html "Chapter 3. Elasticsearch-head and Bigdesk"), *Elasticsearch-head
    and Bigdesk* for detailed instructions on how to install and use `stream2es`,
    but, for quick reference, start `stream2es` using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we''ll simulate user interactions by running random queries against the
    `twitter` index. Create a new bash script called `run_queries.sh` with the following
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: This script queries the Elasticsearch `twitter` index with a random dictionary
    word once every second.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may need to install a dictionary on some Linux systems to get this to work.
    On Ubuntu, to get a dictionary of American English or British English words, run
    the following.
  prefs: []
  type: TYPE_NORMAL
- en: 'For American English:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'For British English:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now make the `run_queries.sh` script executable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'And finally, run the `run_queries.sh` script to start hitting our cluster with
    random queries once a second:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: After running `stream2es` and `run_queries.sh` for a few minutes, open Marvel
    and navigate to the Overview dashboard to explore the impact of these scripts
    on our cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Overview dashboard
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Overview** dashboard is the landing page of the Marvel Kibana dashboard.
    After running the `stream2es` command and `run_queries.sh` script mentioned previously
    for a few minutes, this dashboard will look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Overview dashboard](img/B03798_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here are the labels from the previous screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '| No. | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **1** | Dashboard title. |'
  prefs: []
  type: TYPE_TB
- en: '| **2** | Other Marvel dashboards. |'
  prefs: []
  type: TYPE_TB
- en: '| **3** | Page auto-refresh interval. |'
  prefs: []
  type: TYPE_TB
- en: '| **4** | Time filter. Defaults to **Last 1 hour**. |'
  prefs: []
  type: TYPE_TB
- en: '| **5** | Cluster information including cluster status, number of nodes, total
    memory, and number of documents. |'
  prefs: []
  type: TYPE_TB
- en: '| **6** | Current and historical search rate. Sample use case: see how heavy
    search traffic affects the cluster. |'
  prefs: []
  type: TYPE_TB
- en: '| **7** | Current and historical search latency. Sample use case: diagnose
    why queries are running slow. |'
  prefs: []
  type: TYPE_TB
- en: '| **8** | Current and historical indexing rate. Sample use case: diagnose why
    a bulk index operation failed. |'
  prefs: []
  type: TYPE_TB
- en: '| **9** | Current and historical indexing latency. Sample use case: diagnose
    why indexing operations are slow. |'
  prefs: []
  type: TYPE_TB
- en: '| **10** | Shard activity. Gives the status of shards when they are recovering.
    |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that `run_queries.sh` only runs one query per second, but the **Search
    Request Rate** chart shows an average of about three queries per second. This
    is because every time a query is run, it's actually being run against all three
    data nodes. The **Search Request Rate** chart shows the average queries per second
    across all data nodes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Any of Marvel''s charts can be filtered by time range by clicking and dragging
    on the chart, shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Overview dashboard](img/B03798_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is the label from the previous screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Number | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **1** | Click and drag on any chart to filter the chart by time. |'
  prefs: []
  type: TYPE_TB
- en: 'After applying a filter, the Marvel charts and cluster information banner will
    update to show the state of the cluster at the selected moment in time. In the
    following screenshot, we can see that the cluster was in a `yellow` state during
    the selected time period:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Overview dashboard](img/B03798_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Indices dashboard
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Indices** dashboard lets you examine historical data for a specific index,
    including:'
  prefs: []
  type: TYPE_NORMAL
- en: Search rate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Index rate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Index size
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Memory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Document count
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Field data size
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **Indices** dashboard is very similar to the **Overview** dashboard, except
    for the list of indices at the bottom of the page, as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Indices dashboard](img/B03798_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is the label from the preceding screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Number | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **1** | List of all indices in the cluster. |'
  prefs: []
  type: TYPE_TB
- en: 'Click on the `twitter` index at the bottom of this page to bring us to a page
    showing historical and real-time metrics for that particular index:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Indices dashboard](img/B03798_04_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here are the labels from the previous screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Number | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **1** | Index details. |'
  prefs: []
  type: TYPE_TB
- en: '| **2** | Historical and real-time search rate for the index. |'
  prefs: []
  type: TYPE_TB
- en: '| **3** | Historical and real-time indexing rate. |'
  prefs: []
  type: TYPE_TB
- en: '| **4** | Historical and real-time index size. |'
  prefs: []
  type: TYPE_TB
- en: '| **5** | Historical and real-time Lucene memory size. |'
  prefs: []
  type: TYPE_TB
- en: '| **6** | Historical and real-time document count. |'
  prefs: []
  type: TYPE_TB
- en: '| **7** | Historical and real-time field data size. Sample use case: diagnose
    `OutOfMemoryError` exceptions. |'
  prefs: []
  type: TYPE_TB
- en: '| **8** | Shard distribution for this index. Click on any of the nodes to go
    to the node details page, described in the next section. |'
  prefs: []
  type: TYPE_TB
- en: Nodes dashboard
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Nodes** dashboard provides an overview of the cluster''s health and node
    utilization, in addition to historical and real-time statistics for specific nodes.
    This dashboard is used to examine Elasticsearch issues such as:'
  prefs: []
  type: TYPE_NORMAL
- en: Nodes in the cluster that are down
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nodes that are running low on disk space
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nodes with high CPU and memory usage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Opening the **Nodes** dashboard brings us to the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Nodes dashboard](img/B03798_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This screenshot shows an overview of all nodes in the cluster, along with some
    real-time metrics. One advantage this page has over Elasticsearch-head is that
    if a node goes down, this page will identify that the node used to be part of
    the cluster but is currently offline. Elasticsearch-head on the other hand won't
    display the offline node at all.
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking on a specific node opens up a dashboard showing data only for that
    host. The next screenshot shows the node stats for `elasticsearch-node-02`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Nodes dashboard](img/B03798_04_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This page shows several historical and real-time metrics for the selected node:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Search Latency**: Historical analysis of search performance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Index Latency**: Historical analysis of data index performance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JVM Heap Usage**: High heap usage may indicate Java `OutOfMemoryError` exceptions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CPU Utilization**: High CPU utilization can be caused by a number of factors,
    but some common causes are running complex queries and shard movement.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**System Load Average**: This metric is a measure of the average amount of
    work performed by the node. This value should ideally be less than the number
    of CPU cores on the node.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Segment Count**: Number of Lucene segments. This statistic will vary from
    cluster to cluster, but if the value increases to higher than usual, try running
    a cluster optimization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Shard Legend**: Shows what shards are allocated to this node.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring node failures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned previously, Marvel keeps track of nodes even after they leave the
    cluster. This is useful when working with large clusters that have many nodes
    to keep track of.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will demonstrate how the Marvel **Nodes** dashboard displays node failures
    by shutting down `elasticsearch-node-01`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The **Nodes** dashboard in Marvel now looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Monitoring node failures](img/B03798_04_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here we can see Marvel indicates `elasticsearch-node-01` used to be part of
    the cluster, but is currently offline.
  prefs: []
  type: TYPE_NORMAL
- en: 'Elasticsearch-head, on the other hand, shows us the cluster in a `yellow` state,
    but does not indicate that `elasticsearch-node-01` was ever part of the cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Monitoring node failures](img/B03798_04_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Elasticsearch-head only displays `elasticsearch-node-02` and `elasticsearch-node-03`,
    not `elasticsearch-node-01`.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covered how to install and configure the Marvel Agent and the Marvel
    Kibana dashboard. Additionally, it covered setting up a secondary monitoring cluster
    for Marvel to store its metrics. Finally, the chapter talked about the various
    Marvel Kibana dashboard pages and discussed at a high level how to use those pages
    to diagnose cluster issues. The next chapter talks about another monitoring tool,
    Kopf, and goes into more detail about how to use Kibana.
  prefs: []
  type: TYPE_NORMAL
