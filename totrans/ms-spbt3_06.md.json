["```java\n    public Optional<Author> getAuthor(Long id) {\n    return Optional.empty();\n    }\n    ```", "```java\n    @Mock\n    private AuthorRepository authorRepository;\n    @Test\n    void givenExistingAuthorId_whenGetAuthor_thenReturnAuthor() {\n    Publisher defaultPublisher = Publisher.builder().name(\"Packt Publishing\").build();\n    Author savedAuthor = Author.builder()\n                    .id(1L)\n                    .name(\"Author Name\")\n                    .publisher(defaultPublisher)\n                    .biography(\"Biography of Author\")\n                    .build();\n        when(authorRepository.findById(1L)).thenReturn(Optional.of(savedAuthor));\n        Optional<Author> author = authorService.getAuthor(1L);\n        assertTrue(author.isPresent(), \"Author should be found\");\n        assertEquals(1L, author.get().getId(), \"Author ID should match\");\n    }\n    @Mock: This mocks the class and allows us to manipulate all its methods.\n    ```", "```java\n    public Optional<Author> getAuthor(long id) {\n           return authorRepository.findById(id);\n    }\n    ```", "```java\n    private Author savedAuthor;\n    @BeforeEach\n    void setup() {\n     Publisher defaultPublisher = Publisher.builder().name(\"Packt Publishing\").build();\n     savedAuthor = Author.builder()\n             .id(1L)\n             .name(\"Author Name\")\n             .publisher(defaultPublisher)\n             .biography(\"Biography of Author\")\n             .build();\n    }\n    ```", "```java\n    @Test\n    void givenExistingAuthorId_whenGetAuthor_thenReturnAuthor() {\n    when(authorRepository.findById(1L)).thenReturn(Optional.of(savedAuthor));\n        Optional<Author> author = authorService.getAuthor(1L);\n        assertTrue(author.isPresent(), \"Author should be found\");\n        assertEquals(1L, author.get().getId(), \"Author ID should match\");\n    }\n    ```", "```java\n        @DeleteMapping(\"/{id}\")\n        public ResponseEntity<Object> deleteAuthor(@PathVariable Long id) {\n            try {\n                authorService.deleteAuthor(id);\n                return ResponseEntity.ok().build();\n            } catch (EntityNotFoundException e) {\n                return ResponseEntity.notFound().build();\n            }\n        }\n    }\n    ```", "```java\n    assertThrows(EntityNotFoundException.class, () -> authorService.deleteAuthor(1L));\n    ```", "```java\n    verify(authorRepository).delete(savedAuthor);\n    verify(authorRepository, times(1)).delete(savedAuthor);\n    ```", "```java\n    @InjectMocks\n    private AuthorService authorService;\n    ```", "```java\n    @ExtendWith(MockitoExtension.class)\n    public class AuthorServiceTest\n    {}\n    ```", "```java\n    @BeforeEach\n    void setUp() {\n       // common setup code\n    }\n    ```", "```java\n@WebMvcTest(AuthorController.class)\n@Import(SecurityConfig.class)\nclass AuthorControllerTest {\n    @Autowired\n    private WebApplicationContext context;\n    private MockMvc mockMvc;\n    @MockBean\n    private AuthorService authorService;\n    @MockBean\n    private JwtDecoder jwtDecoder;\n    private final ObjectMapper objectMapper = new ObjectMapper();\n}\n```", "```java\n    @BeforeEach\n    public void setup() {\n        mockMvc = MockMvcBuilders\n                .webAppContextSetup(context)\n                .apply(springSecurity())\n                .build();\n    }\n```", "```java\n    @Test\n    @WithMockUser(username=\"testUser\", authorities={\"ROLE_ADMIN\"})\n    void testDeleteAuthorNotFoundWithAdminRole() throws Exception {\n        Long id = 1L;\n        doThrow(new EntityNotFoundException(\"Author not found with id: \" + id))\n                .when(authorService).deleteAuthor(id);\n        mockMvc.perform(delete(\"/authors/\" + id))\n                .andExpect(status().isNotFound());\n    }\n```", "```java\nspring.security.oauth2.client.registration.keycloak.client-id=bookstore-client\nspring.security.oauth2.client.registration.keycloak.client-secret=secret-client\nspring.security.oauth2.client.registration.keycloak.client-name=Keycloak\nspring.security.oauth2.client.registration.keycloak.provider=keycloak\nspring.security.oauth2.client.registration.keycloak.scope=openid,profile,email\nspring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code\nspring.security.oauth2.client.registration.keycloak.redirect-uri={baseUrl}/login/oauth2/code/keycloak\nspring.security.oauth2.client.provider.keycloak.issuer-uri=http://localhost:8180/auth/realms/BookStoreRealm\nspring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8180/auth/realms/BookStoreRealm\n```", "```java\n       private static final String POSTGRES_IMAGE = \"postgres:latest\";\n        private static final String MONGO_IMAGE = \"mongo:4.4.6\";\n        private static final String DATABASE_NAME = \"bookstore\";\n        private static final String DATABASE_USER = \"postgres\";\n        private static final String DATABASE_PASSWORD = \"yourpassword\";\n        private static final int WIREMOCK_PORT = 8180;\n        private static WireMockServer wireMockServer;\n    ```", "```java\n        @Container\n        static final PostgreSQLContainer<?> postgresqlContainer = initPostgresqlContainer();\n        @Container\n        static final MongoDBContainer mongoDBContainer = initMongoDBContainer();\n        private static PostgreSQLContainer<?> initPostgresqlContainer() {\n            PostgreSQLContainer<?> container = new PostgreSQLContainer<>(POSTGRES_IMAGE)\n                    .withDatabaseName(DATABASE_NAME)\n                    .withUsername(DATABASE_USER)\n                    .withPassword(DATABASE_PASSWORD);\n            container.start();\n            return container;\n        }\n        private static MongoDBContainer initMongoDBContainer() {\n            MongoDBContainer container = new MongoDBContainer(DockerImageName.parse(MONGO_IMAGE));\n            container.start();\n            return container;\n        }\n    ```", "```java\n        @DynamicPropertySource\n        static void properties(DynamicPropertyRegistry registry) {\n            registry.add(\"spring.datasource.url\", postgresqlContainer::getJdbcUrl);\n            registry.add(\"spring.datasource.username\", postgresqlContainer::getUsername);\n            registry.add(\"spring.datasource.password\", postgresqlContainer::getPassword);\n            registry.add(\"spring.data.mongodb.uri\", mongoDBContainer::getReplicaSetUrl);\n        }\n    ```", "```java\n@BeforeEach\nvoid clearData() { authorRepository.deleteAll(); }\n```", "```java\n@Test\n@WithMockUser(username=\"testUser\", authorities={\"ROLE_ADMIN\"})\nvoid testGetAuthor() throws Exception {\n    Author author = Author.builder().name(\"Author Name\").build();\n    authorRepository.save(author);\n    mockMvc.perform(get(\"/authors/\" + author.getId()))\n            .andExpect(status().isOk())\n            .andExpect(jsonPath(\"$.name\", is(author.getName())));\n}\n```", "```java\n@WebFluxTest(controllers = UserController.class,\n        excludeAutoConfiguration = {ReactiveSecurityAutoConfiguration.class, ReactiveOAuth2ClientAutoConfiguration.class})\nclass UserControllerTest {\n    @Autowired\n    private WebTestClient webTestClient;\n}\n```", "```java\n@MockBean\nprivate UserRepository userRepository;\nprivate User testUser;\n@MockBean\nprivate SecurityWebFilterChain securityWebFilterChain;\n@BeforeEach\nvoid setUp() {\n    testUser = new User(1L, \"Test User\", \"test@example.com\");\n}\n```", "```java\n@Test\nvoid getAllUsersTest() {\n    when(userRepository.findAll()).thenReturn(Flux.just(testUser));\n    webTestClient.get().uri(\"/users\")\n            .exchange()\n            .expectStatus().isOk()\n            .expectBodyList(User.class).hasSize(1);\n}\n```"]