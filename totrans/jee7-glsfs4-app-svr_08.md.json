["```java\n asadmin start-domain domain1\n\n```", "```java\npackage net.ensode.glassfishbook;\n\nimport javax.annotation.Resource;\nimport javax.jms.ConnectionFactory;\nimport javax.jms.JMSContext;\nimport javax.jms.JMSProducer;\nimport javax.jms.Queue;\n\npublic class MessageSender {\n\n @Resource(mappedName = \"jms/GlassFishBookConnectionFactory\")\n private static ConnectionFactory connectionFactory;\n\n @Resource(mappedName = \"jms/GlassFishBookQueue\")\n private static Queue queue;\n\n    public void produceMessages() {\n\n        JMSContext jmsContext = connectionFactory.createContext();\n        JMSProducer jmsProducer = jmsContext.createProducer();\n\n        String msg1 = \"Testing, 1, 2, 3\\. Can you hear me?\";\n        String msg2 = \"Do you copy?\";\n        String msg3 = \"Good bye!\";\n\n        System.out.println(\"Sending the following message: \"\n                + msg1);\n jmsProducer.send(queue, msg1);\n        System.out.println(\"Sending the following message: \"\n                + msg2);\n jmsProducer.send(queue, msg2);\n        System.out.println(\"Sending the following message: \"\n                + msg3);\n jmsProducer.send(queue, msg3);\n    }\n\n    public static void main(String[] args) {\n        new MessageSender().produceMessages();\n    }\n}\n```", "```java\nappclient -client jmsptpproducer.jar\n\n```", "```java\nSending the following message: Testing, 1, 2, 3\\. Can you hear me?\nSending the following message: Do you copy?\nSending the following message: Good bye!\n\n```", "```java\npackage net.ensode.glassfishbook;\n\nimport javax.annotation.Resource;\nimport javax.jms.ConnectionFactory;\nimport javax.jms.JMSConsumer;\nimport javax.jms.JMSContext;\nimport javax.jms.Queue;\n\npublic class MessageReceiver {\n\n @Resource(mappedName = \"jms/GlassFishBookConnectionFactory\")\n private static ConnectionFactory connectionFactory;\n @Resource(mappedName = \"jms/GlassFishBookQueue\")\n private static Queue queue;\n\n    public void getMessages() {\n        String message;\n        boolean goodByeReceived = false;\n\n JMSContext jmsContext = connectionFactory.createContext();\n JMSConsumer jMSConsumer = jmsContext.createConsumer(queue);\n\n        System.out.println(\"Waiting for messages...\");\n        while (!goodByeReceived) {\n message = jMSConsumer.receiveBody(String.class);\n\n            if (message != null) {\n                System.out.print(\"Received the following message: \");\n                System.out.println(message);\n                System.out.println();\n                if (message.equals(\"Good bye!\")) {\n                    goodByeReceived = true;\n                }\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        new MessageReceiver().getMessages();\n    }\n}\n```", "```java\nappclient -client target/jmsptpconsumer.jar \nWaiting for messages...\nReceived the following message: Testing, 1, 2, 3\\. Can you hear me?\n\nReceived the following message: Do you copy?\n\nReceived the following message: Good bye!\n\n```", "```java\npackage net.ensode.glassfishbook;\n\nimport javax.jms.JMSException;\nimport javax.jms.Message;\nimport javax.jms.MessageListener;\nimport javax.jms.TextMessage;\n\npublic class ExampleMessageListener implements MessageListener {\n\n  @Override\n  public void onMessage(Message message) {\n    TextMessage textMessage = (TextMessage) message;\n\n    try {\n      System.out.print(\"Received the following message: \");\n      System.out.println(textMessage.getText());\n      System.out.println();\n    } catch (JMSException e) {\n      e.printStackTrace();\n    }\n  }\n}\n```", "```java\npackage net.ensode.glassfishbook;\n\nimport javax.annotation.Resource;\nimport javax.jms.ConnectionFactory;\nimport javax.jms.JMSConsumer;\nimport javax.jms.JMSContext;\nimport javax.jms.Queue;\n\npublic class AsynchMessReceiver {\n\n @Resource(mappedName = \"jms/GlassFishBookConnectionFactory\")\n private static ConnectionFactory connectionFactory;\n @Resource(mappedName = \"jms/GlassFishBookQueue\")\n private static Queue queue;\n\n    public void getMessages() {\n        try {\n            JMSContext jmsContext = connectionFactory.createContext();\n            JMSConsumer jMSConsumer = jmsContext.createConsumer(queue);\n\n jMSConsumer.setMessageListener(\n new ExampleMessageListener());\n\n            System.out.println(\"The above line will allow the \"\n                    + \"MessageListener implementation to \"\n                    + \"receiving and processing messages\"\n                    + \" from the queue.\");\n            Thread.sleep(1000);\n            System.out.println(\"Our code does not have to block \"\n                    + \"while messages are received.\");\n            Thread.sleep(1000);\n            System.out.println(\"It can do other stuff \"\n                    + \"(hopefully something more useful than sending \"\n                    + \"silly output to the console. :)\");\n            Thread.sleep(1000);\n\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void main(String[] args) {\n        new AsynchMessReceiver().getMessages();\n    }\n}\n```", "```java\nappclient -client target/jmsptpasynchconsumer.jar \nThe above line will allow the MessageListener implementation to receive and process messages from the queue.\n\nReceived the following message: Testing, 1, 2, 3\\. Can you hear me?\n\nReceived the following message: Do you copy?\n\nReceived the following message: Good bye!\n\nOur code does not have to block while messages are received.\n\nIt can do other stuff (hopefully something more useful than sending silly output to the console. :)\n\n```", "```java\npackage net.ensode.glassfishbook;\n\nimport java.util.Enumeration;\n\nimport javax.annotation.Resource;\nimport javax.jms.ConnectionFactory;\nimport javax.jms.JMSContext;\nimport javax.jms.JMSException;\nimport javax.jms.Queue;\nimport javax.jms.QueueBrowser;\nimport javax.jms.TextMessage;\n\npublic class MessageQueueBrowser {\n\n @Resource(mappedName = \"jms/GlassFishBookConnectionFactory\")\n private static ConnectionFactory connectionFactory;\n @Resource(mappedName = \"jms/GlassFishBookQueue\")\n private static Queue queue;\n\n    public void browseMessages() {\n        try {\n            Enumeration messageEnumeration;\n            TextMessage textMessage;\n            JMSContext jmsContext = connectionFactory.createContext();\n QueueBrowser browser = jmsContext.createBrowser(queue);\n\n messageEnumeration = browser.getEnumeration();\n\n            if (messageEnumeration != null) {\n                if (!messageEnumeration.hasMoreElements()) {\n                    System.out.println(\"There are no messages \"\n                            + \"in the queue.\");\n                } else {\n                    System.out.println(\n                             \"The following messages are \"\n                             + \"in the queue\");\n while (messageEnumeration.hasMoreElements()) {\n textMessage = (TextMessage) messageEnumeration.nextElement();\n System.out.println(textMessage.getText());\n                    }\n                }\n            }\n        } catch (JMSException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void main(String[] args) {\n        new MessageQueueBrowser().browseMessages();\n    }\n}\n```", "```java\npackage net.ensode.glassfishbook;\n\nimport javax.annotation.Resource;\nimport javax.jms.ConnectionFactory;\nimport javax.jms.JMSContext;\nimport javax.jms.JMSProducer;\nimport javax.jms.Topic;\n\npublic class MessageSender {\n\n    @Resource(mappedName = \"jms/GlassFishBookConnectionFactory\")\n    private static ConnectionFactory connectionFactory;\n @Resource(mappedName = \"jms/GlassFishBookTopic\")\n    private static Topic topic;\n\n    public void produceMessages() {\n        JMSContext jmsContext = connectionFactory.createContext();\n        JMSProducer jmsProducer = jmsContext.createProducer();\n\n        String msg1 = \"Testing, 1, 2, 3\\. Can you hear me?\";\n        String msg2 = \"Do you copy?\";\n        String msg3 = \"Good bye!\";\n\n        System.out.println(\"Sending the following message: \"\n                + msg1);\n jmsProducer.send(topic, msg1);\n        System.out.println(\"Sending the following message: \"\n                + msg2);\n jmsProducer.send(topic, msg2);\n        System.out.println(\"Sending the following message: \"\n                + msg3);\n        jmsProducer.send(topic, msg3);\n\n    }\n\n    public static void main(String[] args) {\n        new MessageSender().produceMessages();\n    }\n}\n```", "```java\npackage net.ensode.glassfishbook;\n\nimport javax.annotation.Resource;\nimport javax.jms.ConnectionFactory;\nimport javax.jms.JMSConsumer;\nimport javax.jms.JMSContext;\nimport javax.jms.Topic;\n\npublic class MessageReceiver {\n\n    @Resource(mappedName = \"jms/GlassFishBookConnectionFactory\")\n    private static ConnectionFactory connectionFactory;\n @Resource(mappedName = \"jms/GlassFishBookTopic\")\n private static Topic topic;\n\n    public void getMessages() {\n        String message;\n        boolean goodByeReceived = false;\n\n        JMSContext jmsContext = connectionFactory.createContext();\n JMSConsumer jMSConsumer = jmsContext.createConsumer(topic);\n\n        System.out.println(\"Waiting for messages...\");\n        while (!goodByeReceived) {\n message = jMSConsumer.receiveBody(String.class);\n\n            if (message != null) {\n                System.out.print(\"Received the following message: \");\n                System.out.println(message);\n                System.out.println();\n                if (message.equals(\"Good bye!\")) {\n                    goodByeReceived = true;\n                }\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        new MessageReceiver().getMessages();\n    }\n}\n```", "```java\npackage net.ensode.glassfishbook;\n\nimport javax.annotation.Resource;\nimport javax.jms.Connection;\nimport javax.jms.ConnectionFactory;\nimport javax.jms.JMSConsumer;\nimport javax.jms.JMSContext;\nimport javax.jms.JMSException;\nimport javax.jms.MessageConsumer;\nimport javax.jms.Session;\nimport javax.jms.TextMessage;\nimport javax.jms.Topic;\n\npublic class MessageReceiver {\n\n @Resource(mappedName\n = \"jms/GlassFishBookDurableConnectionFactory\")\n    private static ConnectionFactory connectionFactory;\n    @Resource(mappedName = \"jms/GlassFishBookTopic\")\n    private static Topic topic;\n\n    public void getMessages() {\n        String message;\n        boolean goodByeReceived = false;\n\n        JMSContext jmsContext = connectionFactory.createContext();\n JMSConsumer jMSConsumer =\n jmsContext.createDurableConsumer(topic, \"Subscriber1\");\n\n        System.out.println(\"Waiting for messages...\");\n        while (!goodByeReceived) {\n            message = jMSConsumer.receiveBody(String.class);\n\n            if (message != null) {\n                System.out.print(\"Received the following message: \");\n                System.out.println(message);\n                System.out.println();\n                if (message.equals(\"Good bye!\")) {\n                    goodByeReceived = true;\n                }\n            }\n        }\n\n    }\n\n    public static void main(String[] args) {\n        new MessageReceiver().getMessages();\n    }\n}\n```"]