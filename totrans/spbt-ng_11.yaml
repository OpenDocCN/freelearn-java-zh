- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Building Reactive Forms
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建 Reactive Forms
- en: 'In the previous chapter, we have already learned how to structure our Angular
    application at the module and component level, which promotes the maintainability
    of code, especially in enterprise applications. We have organized modules into
    three categories: core modules, shared modules, and feature modules. We have also
    grouped components into two classifications: Smart and Dumb components, which
    separate components that retrieve data and have dependencies from components that
    are for presentation purposes only.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们已经学习了如何在模块和组件级别上构建我们的 Angular 应用程序结构，这促进了代码的可维护性，尤其是在企业应用程序中。我们将模块组织为三个类别：核心模块、共享模块和功能模块。我们还把组件分为两类：智能组件和哑组件，这区分了那些检索数据并具有依赖关系的组件和仅用于展示目的的组件。
- en: We have also discussed how to configure and implement Angular Material, which
    is a UI library that provides ready-to-use components and base styling for our
    Angular application.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还讨论了如何配置和实现 Angular Material，这是一个提供现成组件和基础样式的 UI 库，用于我们的 Angular 应用程序。
- en: In this chapter, we will now start learning how to build forms using reactive
    forms in Angular. We will understand form groups, form controls, and form arrays
    and create validations in our form.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们现在将开始学习如何使用 Angular 中的响应式表单来构建表单。我们将了解表单组、表单控件和表单数组，并在我们的表单中创建验证。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Understanding reactive forms
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解响应式表单
- en: Basic form controls
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本表单控件
- en: Grouping form controls
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单控件的分组
- en: Using the `FormBuilder` service to generate controls
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `FormBuilder` 服务生成控件
- en: Validating form input
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证表单输入
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Here is a link to the finished version of this chapter:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是本章完成版本的链接：
- en: '[https://github.com/PacktPublishing/Spring-Boot-and-Angular/tree/main/Chapter-11](https://github.com/PacktPublishing/Spring-Boot-and-Angular/tree/main/Chapter-11)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Spring-Boot-and-Angular/tree/main/Chapter-11](https://github.com/PacktPublishing/Spring-Boot-and-Angular/tree/main/Chapter-11)'
- en: Understanding reactive forms
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解响应式表单
- en: One of the advantages of the `@angular/forms` package once we have created our
    Angular application. There are two available ways to build forms. These are **template-driven
    forms** and **reactive forms**; them having their own form extension is advantageous
    to the developers as this does not require installing under packages to create
    forms.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们创建了 Angular 应用程序，`@angular/forms` 包的优势之一。有两种可用的方式来构建表单。这些是 **模板驱动的表单** 和
    **响应式表单**；它们各自拥有自己的表单扩展对开发者来说是有利的，因为这不需要在包下安装来创建表单。
- en: At the same time, we can make sure that every Angular application uses a single
    library for building forms. In this section, we will be focusing more on how to
    implement reactive forms in our application as this is the commonly used method
    in developing forms in Angular applications, but first, let’s discuss a basic
    introduction to the template-driven approach before proceeding to reactive forms.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，我们可以确保每个 Angular 应用程序使用单个库来构建表单。在本节中，我们将更多地关注如何在我们的应用程序中实现响应式表单，因为这是在 Angular
    应用程序中开发表单时常用的方法，但在继续之前，让我们先讨论模板驱动方法的简介。
- en: The template-driven approach
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模板驱动的方案
- en: Template-driven forms, as the name suggests, are forms declared and validated
    on the template (HTML). It uses the `ngForm` directives, which transforms the
    HTML form into a template-driven form and creates a top-level `FormGroup`, and
    the `ngModel` directive makes a `FormControl` for the form elements.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名所示，模板驱动的表单是在模板（HTML）中声明和验证的表单。它使用 `ngForm` 指令，将 HTML 表单转换为模板驱动的表单，并创建一个顶级
    `FormGroup`，而 `ngModel` 指令为表单元素创建一个 `FormControl`。
- en: 'To use template-driven forms, we must import `FormsModule` into the module
    where we want to use the template-driven forms. In the following code example,
    we have imported `FormsModule` into the `app.module.ts` file:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用模板驱动的表单，我们必须将 `FormsModule` 导入到我们想要使用模板驱动的表单的模块中。在下面的代码示例中，我们将 `FormsModule`
    导入了 `app.module.ts` 文件：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We must not forget to import `FormsModule` as our application will not recognize
    the `ngForm` and `ngModel` directives.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须记住导入 `FormsModule`，因为我们的应用程序将无法识别 `ngForm` 和 `ngModel` 指令。
- en: Creating a template-driven form
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建模板驱动的表单
- en: 'The first step in creating template-driven forms is to create an HTML form
    template. Let’s have a look at the following code example for an illustration
    of how to do this:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 创建模板驱动的表单的第一步是创建一个HTML表单模板。让我们看一下以下代码示例，以了解如何进行此操作：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the preceding code example, we have created our HTML form template and have
    added three form elements: the email, first name, and last name input, which will
    be our form controls. We have also enclosed the elements with a `<``form>` tag.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码示例中，我们已经创建了我们的HTML表单模板，并添加了三个表单元素：电子邮件、名字和姓氏输入，这些将成为我们的表单控件。我们还将这些元素包含在一个`<form>`标签中。
- en: 'After successfully creating an HTML form template, this form will be automatically
    converted into a template-driven form. It is not required for us to add the `ngForm`
    directive to the `form` tag as Angular finds all form tags in our application
    to convert it into a template-driven form, although we can still use the `ngForm`
    directive to be assigned in a local template variable for us to access the properties
    and method of the `ngForm` directive. We can also use the variable template for
    submitting our forms. Let’s have a look at the following code example:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功创建HTML表单模板后，此表单将自动转换为模板驱动的表单。我们不需要在`form`标签上添加`ngForm`指令，因为Angular会找到我们应用程序中的所有表单标签并将其转换为模板驱动的表单，尽管我们仍然可以使用`ngForm`指令将其分配给局部模板变量，以便我们访问`ngForm`指令的属性和方法。我们还可以使用该变量模板来提交我们的表单。让我们看一下以下代码示例：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, we can convert our elements into form controls by adding the `ngModel`
    directive to each input; this allows us to track the values, validation status,
    and user interaction of each form element. Let’s have a look at the following
    code example with the added form controls:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以通过为每个输入添加`ngModel`指令将我们的元素转换为表单控件；这允许我们跟踪每个表单元素的值、验证状态和用户交互。让我们看一下以下添加了表单控件的代码示例：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Lastly, we will add an `ngSubmit` event to submit the data of the form component.
    We will add the `ngSubmit` event to the `form` tag and add a method to the component
    class to receive the data. Let’s have a look at the following code example:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将添加一个`ngSubmit`事件来提交表单组件的数据。我们将`ngSubmit`事件添加到`form`标签中，并在组件类中添加一个方法来接收数据。让我们看一下以下代码示例：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the preceding code example, once the user has clicked the `onSubmit()` method,
    and it will display the form control values as a JSON object in our console; this
    will now allow us to use the form values in sending data implementing business
    logic.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码示例中，一旦用户点击了`onSubmit()`方法，它将在我们的控制台中显示表单控件值作为一个JSON对象；这将现在允许我们使用表单值来发送数据并实现业务逻辑。
- en: 'After successfully implementing all the steps, we will now have a final template
    for the template-driven form:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功实施所有步骤之后，我们现在将有一个模板驱动的表单的最终模板：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: When to use template-driven forms
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 何时使用模板驱动的表单
- en: 'Template-driven forms are very flexible and easy to implement in Angular applications.
    However, this approach has some limitations and can cause an impact in terms of
    maintainability; some of the best scenarios for using a template-driven approach
    in building forms are set out here:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 模板驱动的表单在Angular应用程序中非常灵活且易于实现。然而，这种方法有一些限制，可能会对可维护性产生影响；以下列出了使用模板驱动方法构建表单的最佳场景：
- en: It’s easier to use template-driven forms when migrating from AngularJS to Angular2,
    such that both use the `ngModel` directive.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当从AngularJS迁移到Angular2时，使用模板驱动的表单更容易，因为两者都使用`ngModel`指令。
- en: Template-driven forms are more suitable in simple and small forms that do not
    require complex validations since validation is applied at the template level.
    This could be a disadvantage as it will be hard to maintain validations on larger
    applications at the same time. It has limitations on applying validations to the
    form controls.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模板驱动的表单更适合于简单且小的表单，因为这些表单不需要复杂的验证，因为验证是在模板级别应用的。这可能会成为一个缺点，因为它将使得在更大的应用程序上同时维护验证变得困难。它对将验证应用于表单控件有一定的限制。
- en: In the second of the aforementioned scenarios, reactive forms are chosen over
    template-driven forms as complex forms can be handled better with reactive forms,
    especially in implementing validations. Let’s now understand the concept of reactive
    forms.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述第二种场景中，由于复杂表单可以用响应式表单更好地处理，特别是在实现验证方面，因此选择了响应式表单而不是模板驱动的表单。现在让我们了解响应式表单的概念。
- en: The reactive approach
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 响应式方法
- en: A reactive form is the second approach in building forms in Angular applications;
    this is the most commonly used approach as it is more effective in handling complex
    forms than template-driven forms. Reactive forms are also known as **model-driven
    forms**, in which we define the structure of our forms in the component class
    instead of defining it in the template.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式表单是构建 Angular 应用程序中表单的第二种方法；这是最常用的方法，因为它在处理复杂表单方面比模板驱动表单更有效。响应式表单也被称为**模型驱动表单**，在这种表单中，我们在组件类中定义表单的结构，而不是在模板中定义。
- en: We also define the validations in the class before we bind it in to our HTML
    form, which means that the logic and validation patterns will now be separated
    from the HTML template and will be maintained by the TypeScript side of our component.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们将它绑定到我们的 HTML 表单之前，我们在类中定义了验证，这意味着逻辑和验证模式现在将从 HTML 模板中分离出来，并由组件的 TypeScript
    部分维护。
- en: Using reactive forms
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用响应式表单
- en: The first step for us to use reactive forms is to import `ReactiveFormsModule`;
    this is usually imported into the root module or the shared module of the application.
    `ReactiveFormsModule` contains all directives—such as `formGroup` and `formControlName`—that
    will allow us to implement reactive forms; this is also found under the `@``angular/forms`
    package.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用响应式表单的第一步是导入 `ReactiveFormsModule`；这通常是在应用程序的根模块或共享模块中导入。`ReactiveFormsModule`
    包含所有指令——例如 `formGroup` 和 `formControlName`——这些指令将允许我们实现响应式表单；这也可以在 `@angular/forms`
    包下找到。
- en: 'After successfully importing `ReactiveFormsModule`, the next step is to create
    our HTML form template and create a model using `FormGroup`, `FormControl`, and
    `FormArray`. These are the three building blocks of reactive forms that we will
    use to bind our form templates and are outlined in more detail here:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功导入 `ReactiveFormsModule` 之后，下一步是创建我们的 HTML 表单模板，并使用 `FormGroup`、`FormControl`
    和 `FormArray` 创建一个模型。这些是响应式表单的三个构建块，我们将使用它们来绑定表单模板，并在此处更详细地说明：
- en: '`FormControl`: This represents a single form element inside a form; it stores
    the value of a form element that allows us to retrieve data from each input.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FormControl`：这代表表单内的单个表单元素；它存储表单元素的值，允许我们从每个输入中检索数据。'
- en: '`FormArray`: This is a collection of form controls that allows us to dynamically
    add and remove controls to accept more values from the form.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FormArray`：这是一个表单控件的集合，允许我们动态添加和删除控件以接受来自表单的更多值。'
- en: '`FormGroup`: This is a collection of form controls; it can also contain another
    form group or form arrays.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FormGroup`：这是一个表单控件的集合；它也可以包含另一个表单组或表单数组。'
- en: 'Assuming we have a `HeroesComponent`, we will create a `FormGroup` by writing
    the following code in the class component:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个 `HeroesComponent`，我们将在类组件中编写以下代码来创建一个 `FormGroup`：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the preceding code example, we have instantiated a new `FormGroup` and assigned
    it to the `userForm` variable; this is only a form group, and we have not yet
    added form controls to the model. To add a form control, we will place the following
    code:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码示例中，我们已经实例化了一个新的 `FormGroup` 并将其分配给 `userForm` 变量；这只是一个表单组，我们还没有向模型中添加表单控件。要添加表单控件，我们将放置以下代码：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We can see in the preceding example that we have added three form controls to
    our `FormGroup`; this can now be bound to the HTML form template in our application
    to capture the values and state of form elements.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们可以看到我们已经向 `FormGroup` 中添加了三个表单控件；现在我们可以将这些绑定到应用程序中的 HTML 表单模板，以捕获表单元素的值和状态。
- en: 'Let’s now create an HTML form template with `formGroup` and `formControlName`
    directives:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用 `formGroup` 和 `formControlName` 指令创建一个 HTML 表单模板：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the example code, we can see that the template is almost the same as the
    template-driven forms. The only difference is that we use `formGroup` and `formControlName`
    directives to bind our form. The `formGroup` directive is used to bind the `userFrom`
    form group in our component class; on the other hand, the `formControlName` directive
    is used to bind the values and the state of the form controls defined in the `userForm`
    form group. Lastly, we are still using the `ngSubmit` event to call a method when
    the **Submit** button in the form is clicked.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例代码中，我们可以看到模板几乎与模板驱动表单相同。唯一的区别是我们使用 `formGroup` 和 `formControlName` 指令来绑定我们的表单。`formGroup`
    指令用于绑定组件类中的 `userFrom` 表单组；另一方面，`formControlName` 指令用于绑定在 `userForm` 表单组中定义的表单控件的值和状态。最后，我们仍然使用
    `ngSubmit` 事件在表单中的**提交**按钮被点击时调用一个方法。
- en: We have now successfully created a reactive form in our application, but this
    only covers the basic features and concepts of reactive forms. In the following
    sections of this chapter, we will be discussing the functionalities and capabilities
    of form controls and form groups.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经在我们的应用程序中成功创建了一个响应式表单，但这仅涵盖了响应式表单的基本功能和概念。在本章的后续部分，我们将讨论表单控件和表单组的函数和功能。
- en: Basic form controls
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本表单控件
- en: This section will now discuss more of the concepts of form controls in reactive
    forms. We have already created an example of form controls in the previous section,
    but now, we will discover more about the functions and capabilities of form controls
    in Angular.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 本节现在将讨论更多关于响应式表单中表单控件的概念。我们已经在上一节创建了一个表单控件的示例，但现在，我们将发现更多关于 Angular 中表单控件的功能和能力。
- en: Form controls represent a single form element inside a form; they store the
    value of a form element that allows us to retrieve data of each input. This can
    be `input`, `textarea`, or any element that accepts values. When used in Angular,
    form controls can be instantiated by adding `new FormControl('')` code; we can
    see that it takes a single argument that defines the values of the control. These
    values can be `null` as form controls can be reset.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 表单控件代表表单内的单个表单元素；它们存储表单元素的值，使我们能够检索每个输入的数据。这可以是 `input`、`textarea` 或任何接受值的元素。在
    Angular 中，可以通过添加 `new FormControl('')` 代码来实例化表单控件；我们可以看到它接受一个参数，该参数定义了控件的值。这些值可以是
    `null`，因为表单控件可以被重置。
- en: Form controls are like the properties of a JSON object, but compared to JSON,
    each control has its methods that will help us control, modify, and validate the
    values.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 表单控件就像 JSON 对象的属性，但与 JSON 相比，每个控件都有其方法，这些方法将帮助我们控制、修改和验证值。
- en: Next, let’s have a look at the different methods and features of form controls.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们来看看表单控件的不同方法和功能。
- en: Form control methods
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表单控件方法
- en: 'Let’s have a look at the different form control methods and their parameters
    that we can use for modifying controls:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看我们可以用于修改控件的不同的表单控件方法和它们的参数：
- en: '`setValue()`: A method that sets the new value for the control.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setValue()`：设置控件新值的方法。'
- en: '**Parameters**:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**参数**：'
- en: '`value`: The new value assigned to the form control.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`value`：分配给表单控件的新的值。'
- en: '`options`: An object that defines the configuration of the controls on how
    it will propagate changes and emit events when the value changes. Here are the
    options that we can set in the form control:'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`options`：一个对象，定义了控件在值变化时如何传播更改和发出事件。以下是我们可以设置在表单控件中的选项：'
- en: '`onlySelf`: When set to `true`, the changes from the control will not affect
    the other controls.'
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onlySelf`：当设置为 `true` 时，控件的变化不会影响其他控件。'
- en: '`emitEvent`: When set to `true` or not supplied, `statusChanges` and `valueChanges`
    observables are emitted when the status and the value of the form control are
    updated.'
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`emitEvent`：当设置为 `true` 或未提供时，当表单控件的状体和值更新时，会发出 `statusChanges` 和 `valueChanges`
    可观察对象。'
- en: '`emitModelToViewChange`: When set to `true` or not supplied, a change from
    the form control will call the `onChange` event to update the view.'
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`emitModelToViewChange`：当设置为 `true` 或未提供时，表单控件的变化将调用 `onChange` 事件来更新视图。'
- en: '`emitViewToModelChange`: When set to `true` or not supplied, a change from
    the form control will call the `onModelChange` event to update the view.'
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`emitViewToModelChange`：当设置为 `true` 或未提供时，表单控件的变化将调用 `onModelChange` 事件来更新视图。'
- en: 'Here’s the code for using the `setValue()` method:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是使用 `setValue()` 方法的代码：
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`patchValue()`: Patches the value of a control. The parameters of the `patchValue`
    method are the same as the `setValue()` method.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`patchValue()`：修补控件的值。`patchValue` 方法的参数与 `setValue()` 方法相同。'
- en: 'Here’s the code for using the `patchValue()` method:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是使用 `patchValue()` 方法的代码：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`getRawValue()`: Retrieves the value of a form control. This is commonly used
    on disabled form controls.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getRawValue()`：检索表单控件的值。这通常用于禁用表单控件。'
- en: 'Here’s the code for using the `getRawValue()` method:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是使用 `getRawValue()` 方法的代码：
- en: '[PRE11]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`reset()`: Resets the form control from its default value. It will also mark
    the control as pristine and untouched.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reset()`：将表单控件重置为其默认值。它还将控件标记为原始的且未被修改的。'
- en: '**Parameters**:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**参数**：'
- en: '`formState`: Defines the initial value and the disabled state of the control.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`formState`：定义控件的初始值和禁用状态。'
- en: '`options`: An object that defines the configuration of the controls on how
    it will propagate changes and emit events when the value changes. We can set the
    following option in the form control:'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`options`: 一个对象，定义了控件如何传播更改以及在值更改时发出事件。我们可以在表单控件中设置以下选项：'
- en: '`onlySelf`: When set to `true`, changes from the control will not affect the
    other controls.'
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onlySelf`: 当设置为 `true` 时，控件的更改不会影响其他控件。'
- en: 'Here’s the code for using the `reset()` method:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是使用 `reset()` 方法的代码示例：
- en: '[PRE12]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`registerOnChange()`: Registers a listener to emit events once the form control
    value is changed.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`registerOnChange()`: 注册一个监听器，一旦表单控件的值改变就发出事件。'
- en: '**Parameters**:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**参数**：'
- en: '`function`: The method that is called when the value changes, as illustrated
    here:'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`function`: 当值改变时被调用的方法，如下所示：'
- en: '[PRE13]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`registerOnDisabledChange()`: Registers a listener to emit events once the
    `isDisabled` status of the control changes.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`registerOnDisabledChange()`: 注册一个监听器，一旦控制器的 `isDisabled` 状态改变就发出事件。'
- en: '**Parameters**:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**参数**：'
- en: '`function`: The method that is called when the disabled status changes, as
    illustrated here:'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`function`: 当禁用状态改变时被调用的方法，如下所示：'
- en: '[PRE14]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We have now learned about the different methods we can use in form controls.
    Now, let’s have a look at some examples of different usage of form controls.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经了解了可以在表单控件中使用的不同方法。现在，让我们看看一些不同用法的表单控件示例。
- en: Initializing form controls
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始化表单控件
- en: 'There are several ways to initialize our form controls. We can set the value,
    the disabled state, and the validators of a specific form control. Let’s have
    a look at the following examples:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以初始化我们的表单控件。我们可以设置特定表单控件的值、禁用状态和验证器。让我们看看以下示例：
- en: '**Initializing a form control with an** **initial value**:'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用初始值初始化表单控件**：'
- en: '[PRE15]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In the preceding code example, we instantiated a form control with a default
    value of `Hero`. We can access the value by accessing the `value` property inherited
    from `AbstractControl`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码示例中，我们使用默认值 `Hero` 实例化了一个表单控件。我们可以通过访问从 `AbstractControl` 继承的 `value`
    属性来访问该值。
- en: '**Initializing a form control with an initial value and the** **disabled state**:'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用初始值和禁用状态初始化表单控件**：'
- en: '[PRE16]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In the preceding code example, we instantiated a form control with an object
    value. This initializes the value and the disabled state of the form control.
    We can access the value by accessing the `status` property inherited from `AbstractControl`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码示例中，我们使用对象值实例化了一个表单控件。这初始化了表单控件的值和禁用状态。我们可以通过访问从 `AbstractControl` 继承的
    `status` 属性来访问该值。
- en: '**Initializing a form control with an initial value and an array of** **built-in
    validators**:'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用初始值和内置验证器数组初始化表单控件**：'
- en: '[PRE20]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We instantiated a form control with an empty string value in the preceding code
    example. With the second parameter of an array of validators, this will return
    an invalid status since there should not be an empty value and should be a valid
    email format.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码示例中，我们使用一个空字符串值实例化了一个表单控件。使用验证器数组的第二个参数，这将返回一个无效状态，因为不应该有空值，而应该是一个有效的电子邮件格式。
- en: Resetting form controls
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重置表单控件
- en: 'We can use the `reset()` method to reset the value and the disabled state of
    a form control. Let’s have a look at the following code examples of different
    usage:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `reset()` 方法重置表单控件的值和禁用状态。让我们看看以下不同用法的代码示例：
- en: '**Resetting controls to a** **specific value**:'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将控制器重置到** **特定值**：'
- en: '[PRE23]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In the preceding code example, we have used the `reset()` method with a parameter.
    The parameter allows us to reset the form control to a specific value.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码示例中，我们使用了一个参数的 `reset()` 方法。该参数允许我们将表单控件重置到特定值。
- en: '**Resetting controls to an** **initial value**:'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重置控制器到** **初始值**：'
- en: '[PRE27]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In the preceding code example, we used the `reset()` method without a parameter.
    This would reset the form control’s value with its initial value.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码示例中，我们使用不带参数的 `reset()` 方法。这将使用初始值重置表单控件的值。
- en: '**Resetting controls with a value and a** **disabled state**:'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用值和禁用状态重置控制器**：'
- en: '[PRE31]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: In the preceding code example, we have used an object parameter in calling the
    `reset()` method, and we have indicated the value and disabled state of the form
    control. In this case, it will disable the control and change the status to `DISABLED`.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码示例中，我们在调用 `reset()` 方法时使用了一个对象参数，并指出了表单控件的值和禁用状态。在这种情况下，它将禁用控件并将状态更改为
    `DISABLED`。
- en: Listening to events
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 监听事件
- en: 'In using form controls, we can listen to several events such as changing values
    and status. Let’s have a look at the following code examples on how to listen
    to events of form controls:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用表单控件时，我们可以监听多个事件，例如值变化和状态变化。让我们看看以下代码示例，了解如何监听表单控件的事件：
- en: '**Listening to** **value changes**:'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监听** **值变化**：'
- en: '[PRE34]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: In the preceding code example, we have called the `valueChanges` property that
    has an `Observable` type, which we can subscribe to listen to changes to the form
    control value. In this case, once we set the value of the form control, the `valueChanges`
    property will emit the new value.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码示例中，我们调用了具有 `Observable` 类型的 `valueChanges` 属性，我们可以订阅它来监听表单控件值的更改。在这种情况下，一旦我们设置了表单控件的值，`valueChanges`
    属性将发出新的值。
- en: '**Listening to** **status changes**:'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监听** **状态变化**：'
- en: '[PRE39]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: In the preceding code example, we have called the `statusChanges` property that
    has an `Observable` type, which we can subscribe to listen to changes to the form
    control status. In this case, once we disable the form control, this will emit
    the new status, which is `DISABLED`.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码示例中，我们调用了具有 `Observable` 类型的 `statusChanges` 属性，我们可以订阅它来监听表单控件状态的变化。在这种情况下，一旦我们禁用表单控件，这将发出新的状态，即
    `DISABLED`。
- en: We have already learned about the features and functionalities of form controls;
    now, we will discuss how to group form controls using form groups and form arrays.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学习了关于表单控件的功能和特性；现在，我们将讨论如何使用表单组和表单数组来分组表单控件。
- en: Grouping form controls
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分组表单控件
- en: 'This section will now discuss how to group form controls in our application.
    Forms contain several related controls, which is why it is necessary to group
    them for a better structure. Reactive forms provide two ways to group form controls,
    as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将讨论如何在我们的应用程序中分组表单控件。表单包含多个相关控件，因此有必要将它们分组以获得更好的结构。响应式表单提供了两种分组表单控件的方法，如下所示：
- en: '**Form group**: Creates a form with a fixed set of form controls. Form groups
    can also contain another set of form groups to handle complex forms.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**表单组**：创建一个具有固定表单控件集合的表单。表单组还可以包含另一组表单组来处理复杂表单。'
- en: '**Form array**: Creates a form with dynamic form controls. It can add and remove
    form controls and at the same time can contain other form arrays to handle complex
    forms.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**表单数组**：创建一个具有动态表单控件的表单。它可以添加和删除表单控件，同时还可以包含其他表单数组来处理复杂表单。'
- en: Creating form groups
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建表单组
- en: 'Form groups allow us to control the values and status of form controls by groups.
    We can also access a single form control inside a form group using its name. To
    create a form group, let’s follow the next steps:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 表单组允许我们通过组来控制表单控件的值和状态。我们还可以通过其名称在表单组内部访问单个表单控件。要创建一个表单组，请按照以下步骤进行：
- en: 'Let’s say we have a `HeroComponent`; for example, the first step is to import
    the `FormGroup` and `FormControl` classes from the `@angular/forms` package, like
    so:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设我们有一个 `HeroComponent`；例如，第一步是从 `@angular/forms` 包中导入 `FormGroup` 和 `FormControl`
    类，如下所示：
- en: '[PRE44]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The next step is to create a `FormGroup` instance. In this example, we want
    to create a new form group with `firstName`, `lastName`, and `knownAs` form controls:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是创建一个 `FormGroup` 实例。在这个例子中，我们想要创建一个新的表单组，包含 `firstName`、`lastName` 和 `knownAs`
    表单控件：
- en: '[PRE45]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: In the preceding code example, we have created a new form group named `heroForm`.
    Simultaneously, we have added three form controls as object parameters included
    in the `heroForm` form.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码示例中，我们创建了一个名为 `heroForm` 的新表单组。同时，我们在 `heroForm` 表单中添加了三个表单控件作为对象参数。
- en: 'The next step is to bind our form group instance with the form element in our
    view:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是将我们的表单组实例与视图中的表单元素绑定：
- en: '[PRE52]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: In the preceding code example, we have used the `formGroup` directive to bind
    our `heroForm` form in our form element. We must also bind each form control with
    the input elements by using the `formControlName` directive.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码示例中，我们使用了 `formGroup` 指令将我们的 `heroForm` 表单绑定到表单元素上。我们还必须使用 `formControlName`
    指令将每个表单控件与输入元素绑定。
- en: 'The last step is to get the value of the whole form group. We will use the
    `ngSubmit` event to call a method and will retrieve the form value by accessing
    the `value` property, like so:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步是获取整个表单组的值。我们将使用 `ngSubmit` 事件调用一个方法，并通过访问 `value` 属性来检索表单值，如下所示：
- en: '[PRE62]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: We have created and bound an example form group, but this is only a simple form
    group and introduces a linear structure of controls. Now, let’s create a form
    group that contains form groups.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建并绑定了一个示例表单组，但这只是一个简单的表单组，引入了控件的线性结构。现在，让我们创建一个包含表单组的表单组。
- en: Creating nested form groups
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建嵌套表单组
- en: Form groups can also have another form group instead of having a list of controls.
    Imagine a JSON object that has properties with the value of another JSON object.
    This cannot be handled by a simple linear of form controls, and we must create
    another set of form groups to take this kind of object.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 表单组也可以包含另一个表单组，而不是包含控件列表。想象一个具有另一个JSON对象值的属性的JSON对象。这不能通过简单的线性表单控件来处理，我们必须创建另一组表单组来处理这种类型的对象。
- en: 'Let’s follow the next steps to develop nested form groups:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下步骤开发嵌套表单组：
- en: 'We will be using the previous form example; in this case, we would want to
    add a new `address` property in our form, but instead of having it as a new instance
    of the form control, we will declare it as a new instance of the form group:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用之前的表单示例；在这种情况下，我们希望在我们的表单中添加一个新的`address`属性，但不是将其作为一个新的表单控件实例，而是将其声明为一个新的表单组实例：
- en: '[PRE69]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: In the preceding code example, we have added an `address` property as a new
    form group instance. We have also added new form controls inside the form group—namely,
    `street`, `city`, and `country`. This is now considered a nested form group.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码示例中，我们添加了一个`address`属性作为新的表单组实例。我们还在表单组内部添加了新的表单控件——即`street`、`city`和`country`。现在这被认为是一个嵌套的表单组。
- en: 'The next step is to bind the nested form group with our form element in the
    view:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是将嵌套表单组与视图中的表单元素绑定：
- en: '[PRE81]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: In the preceding code example, we have used the `formGroupName` directive to
    bind our address form group. Remember that this element should be inside the `heroForm`
    form group; we have also used the `formControlName` directive to bind the controls
    under the nested form group. Now, we can also use the `ngSubmit` event again and
    call the `value` property as we did in the previous example to get the value of
    the whole form.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码示例中，我们使用了`formGroupName`指令来绑定我们的地址表单组。请记住，这个元素应该位于`heroForm`表单组内部；我们还使用了`formControlName`指令来绑定嵌套表单组下的控件。现在，我们也可以再次使用`ngSubmit`事件，并调用`value`属性，就像在之前的示例中那样，以获取整个表单的值。
- en: We have created simple and complex forms using form groups. Let’s now discuss
    another way of grouping controls using form arrays.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用表单组创建了简单和复杂的表单。现在，让我们讨论另一种使用表单数组来分组控件的方法。
- en: Creating form arrays
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建表单数组
- en: 'Form arrays are helpful, especially if we want to add or remove controls in
    our form at runtime. This allows us to have flexible forms in our application
    and at the same time handle a more complex set of objects to process. To create
    a form array, let’s have a look at the following steps:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 表单数组很有用，特别是如果我们想在运行时添加或删除表单中的控件。这使我们能够在应用程序中拥有灵活的表单，同时处理更复杂的一组对象。要创建表单数组，让我们看看以下步骤：
- en: 'We will be using the previous form example; in this case, we would want to
    add a new `powers` property to our form and declare it as a new `FormArray` instance:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用之前的表单示例；在这种情况下，我们希望在我们的表单中添加一个新的`powers`属性，并将其声明为一个新的`FormArray`实例：
- en: '[PRE92]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: In the preceding code example, we have created a new `FormArray` instance inside
    our `heroForm` form group. This accepts an empty array having no form controls
    on initialization. We have also assigned the instance of the form array into a
    variable for us to access the array in our view.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码示例中，我们在`heroForm`表单组内部创建了一个新的`FormArray`实例。这个实例初始化时接受一个空数组，没有任何表单控件。我们还把这个表单数组的实例赋值给一个变量，以便我们在视图中访问这个数组。
- en: 'The next step is to create methods that can add and remove an instance of a
    form control in the form array:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是创建可以添加和删除表单数组中表单控件实例的方法：
- en: '[PRE105]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: In the preceding code example, we have created two methods that we will use
    for the form array. The `addPower()` method allows us to add a new form control
    instance in the power form array; this gets the instance of the form array by
    name and pushes a new form control instance.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码示例中，我们创建了两个方法，我们将使用这些方法来处理表单数组。`addPower()`方法允许我们在力量表单数组中添加一个新的表单控件实例；这个方法通过名称获取表单数组的实例，并推送一个新的表单控件实例。
- en: On the other hand, the `deletePower()` method gets the instance of the form
    array by name and removes a specific form control using the `removeAt()` method
    and the index of the control to be deleted.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，`deletePower()`方法通过名称获取表单数组的实例，并使用`removeAt()`方法和要删除的控件索引来删除特定的表单控件。
- en: 'The last step is to bind the form array instance with the form element in the
    view:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步是将表单数组实例与视图中的表单元素绑定：
- en: '[PRE113]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE127]'
- en: In the preceding code example, we have bound the powers to form an array with
    the view using the `formArrayName` directive. We have also used the `ngFor` directive
    to iterate all the controls inside the form array; we would also need to get the
    index of each control to pass it on to our `deletePower()` method.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码示例中，我们使用`formArrayName`指令将力量绑定到视图中的表单数组上。我们还使用了`ngFor`指令来迭代表单数组内的所有控件；我们还需要获取每个控件的索引，并将其传递给我们的`deletePower()`方法。
- en: 'After successfully creating the form arrays, we will now have a view of the
    form:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功创建表单数组后，我们现在将有一个表单的视图：
- en: '![Figure 11.1 – Hero form with a form group and form arrays](img/B18159_11_01.jpg)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
  zh: '![图11.1 – 带有表单组和表单数组的英雄表单](img/B18159_11_01.jpg)'
- en: Figure 11.1 – Hero form with a form group and form arrays
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.1 – 带有表单组和表单数组的英雄表单
- en: We have successfully created reactive forms using form groups and form arrays.
    Now, we will use the `FormBuilder` service to simplify the syntax in creating
    forms in our application.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功使用表单组和表单数组创建了响应式表单。现在，我们将使用`FormBuilder`服务来简化我们应用程序中创建表单的语法。
- en: Using the FormBuilder service to generate controls
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`FormBuilder`服务生成控件
- en: In the previous section, we successfully created reactive forms using form groups,
    form arrays, and form controls. However, as we can see from the syntax, creating
    forms becomes repetitive. We are always instantiating new instances of form controls,
    form arrays, and form groups, and this is not ideal in larger forms. `FormBuilder`
    provides the solution for this issue.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们成功使用了表单组、表单数组和表单控件创建了响应式表单。然而，正如我们从语法中看到的，创建表单变得重复。我们总是在实例化新的表单控件、表单数组和表单组实例，这在较大的表单中并不理想。`FormBuilder`为这个问题提供了解决方案。
- en: 'This is a service that can be injected into our components to generate groups,
    controls, and arrays without instantiating new ones. To create a reactive form
    using `FormBuilder`, we will be following the next steps:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个可以将它注入到我们的组件中以生成组、控件和数组而不需要实例化新对象的服务。要使用`FormBuilder`创建响应式表单，我们将遵循以下步骤：
- en: 'We will be transforming the form in the previous section using `FormBuilder`.
    The first step is to import the `FormBuilder` service into our component from
    `@angular/forms`:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用`FormBuilder`将上一节的表单进行转换。第一步是从`@angular/forms`导入`FormBuilder`服务到我们的组件中：
- en: '[PRE128]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE128]'
- en: 'The next step is to inject the `FormBuilder` service into our component:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是将`FormBuilder`服务注入到我们的组件中：
- en: '[PRE129]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE133]'
- en: 'The last step is now to create and generate controls using the methods of the
    `FormBuilder` service:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步是使用`FormBuilder`服务的`FormBuilder`方法创建和生成控件：
- en: '[PRE134]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE148]'
- en: We can see in the preceding example that our form has the same structure as
    the form we created in the previous section. The major difference is that we are
    using the methods of `FormBuilder` to create forms. We have used the `group()`
    method to generate form groups, the `array()` method to generate a form array,
    and an array with an empty string value to generate a control and set its default
    value.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在前面的示例中看到，我们的表单结构与上一节中创建的表单相同。主要区别在于我们正在使用`FormBuilder`的方法来创建表单。我们使用了`group()`方法来生成表单组，`array()`方法来生成表单数组，以及一个空字符串值的数组来生成控件并设置其默认值。
- en: The output for this code will be the same. `FormBuilder` methods are mainly
    for making our reactive forms clean and readable. Now, we will discuss how to
    add validations to our controls.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码的输出将相同。`FormBuilder`方法主要用于使我们的响应式表单更加简洁和易读。现在，我们将讨论如何为我们的控件添加验证。
- en: Validating form input
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证表单输入
- en: We have now created and simplified our reactive form in the previous section,
    but we want to make our forms accurate in accepting data and at the same time
    create a user-friendly experience for the user to let them know easily what the
    valid values for each control are. Now, we will learn how to add validations to
    our reactive forms.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们已经创建并简化了我们的响应式表单，但我们要使我们的表单在接收数据时更加准确，同时为用户提供一个用户友好的体验，让他们能够轻松地知道每个控件的有效值。现在，我们将学习如何为我们的响应式表单添加验证。
- en: In reactive forms, we are adding validators as parameters directly to the form
    controls in the component class instead of adding them as an attribute in the
    template.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: Built-in validators
  id: totrans-299
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Angular provides several built-in validator functions that we can use directly
    in our forms. Let’s have a look at some of these:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: '`static min(min: number)`—Requires the value of the control to be equal to
    or greater than the given number:'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE149]'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '`static required(control: AbstractControl<any, any>)`—Controls must not have
    a non-empty value:'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE158]'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '`static requiredTrue(control: AbstractControl<any, any>)`—Controls must have
    a value of `true`:'
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE162]'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '`static minLength(minLength: number)`—Used for arrays and strings, this requires
    that the length of the value should be equal to or greater than the given number:'
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE166]'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '`static maxLength(maxLength: number)`—Used for arrays and strings, this requires
    that the length of the value should be equal to or less than the given number:'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE170]'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE173]'
- en: Custom validators
  id: totrans-331
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Other than the built-in validators, we can also create custom validators, which
    is helpful if our forms require more complex verification and checking.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s have a look at the following example custom validator:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE174]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: In the preceding code example, we have created a new validator named `checkHasNumberValidator()`.
    The main use of this validator is to invalidate control values that have a number.
    We have retrieved the form control where the validator is assigned, then we have
    tested the value of the control and will return a custom error named `hasNumbers`
    if the regex is `true`.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: 'After successfully creating the custom validator, we can now use it in our
    controls, like so:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE175]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: In the preceding example code, we want our first name and last name field to
    be restricted to letters only. In this case, we have used `checkHasNumberValidator`
    as a second parameter for the `firstName` and `lastName` controls.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now proceed to the implementation of reactive forms.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: Implementing reactive forms in our project
  id: totrans-340
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have now successfully learned how to develop reactive forms using `FormBuilder`,
    and at the same time, added validations to our controls. Now, we will implement
    these reactive forms in our project.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to create our form group instance. Under the `anti-hero/components/anti-hero-form`
    file, we will create our form group using the `FormBuilder` service in the class
    component, and at the same time, we will create our form elements in our HTML
    template. Follow the next steps:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a form group instance by executing the following code:'
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE176]'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '[PRE181]'
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '[PRE182]'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '[PRE183]'
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '[PRE184]'
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '[PRE185]'
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '[PRE187]'
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '[PRE188]'
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '[PRE189]'
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '[PRE190]'
  id: totrans-358
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE190]'
- en: 'Then, create an HTML template, like so:'
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE191]'
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE191]'
- en: 'In the implemented code in our `component` class, the first thing we did was
    create a form group object. We have added several controls that resemble the properties
    of the anti-hero object. Our goal here is to use the same form for creating and
    updating an anti-hero detail. In this case, we have also added several `Input()`
    bindings and methods to our class to help the form identify which actions are
    currently being done:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: '`selectedId`: This will accept the ID of the anti-hero if the actions are updated.'
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`actionButtonLabel`: This will change depending on the action being done (`Create`
    or `Update`).'
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`checkAction()`: If `selectedId` has a value, this will change the value of
    `actionButtonLabel` to `"Update"`.'
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`patchDataValues()`: This will be used for patching the values of the selected
    anti-hero in the form controls.'
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`emitAction()`: Emits the value of the form and the action into the parent
    component.'
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clear()`: Calls the `reset()` method to clean the form.'
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The next step is to use the anti-hero form in our form page component. Under
    the `anti-hero/pages/form` file, we will place the anti-hero form in the HTML
    template, and at the same time, check the current route if it has the ID of the
    selected anti-hero in the parameters. Here are the steps:'
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the anti-hero form to the HTML template:'
  id: totrans-369
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE192]'
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE192]'
- en: 'Add the activated router to capture the ID:'
  id: totrans-371
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE193]'
  id: totrans-372
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '[PRE194]'
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '[PRE195]'
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '[PRE196]'
  id: totrans-375
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '[PRE197]'
  id: totrans-376
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '[PRE198]'
  id: totrans-377
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '[PRE199]'
  id: totrans-378
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE199]'
- en: 'The next step is now to create a route for our page form component. In the
    `anti-hero-routing.module.ts` file, we will add the following entry to our routes:'
  id: totrans-379
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE200]'
  id: totrans-380
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '[PRE201]'
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE201]'
- en: '[PRE202]'
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '[PRE203]'
  id: totrans-383
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '[PRE204]'
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '[PRE205]'
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-386
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE206]'
- en: '[PRE207]'
  id: totrans-387
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '[PRE208]'
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '[PRE209]'
  id: totrans-389
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '[PRE210]'
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE210]'
- en: '[PRE211]'
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE211]'
- en: '[PRE212]'
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE212]'
- en: In the preceding code example, we have created two routes that redirect to `FormComponent`.
    The first route is for the `create` action, which has a `baseURL/anti-heroes/form`
    route, and the second route is for the `update` action, which has a `baseURL/anti-heroes/form/:id`
    route. This means that we are using the same components for our two actions, and
    the `id` parameters act as our indicator of which action is currently being done.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
- en: 'The last step is to add navigations to the `list` component. We will add several
    methods that will call navigate methods to redirect us to the form component depending
    on the selected action, as follows:'
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`list.component.html`:'
  id: totrans-395
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE213]'
  id: totrans-396
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '[PRE214]'
  id: totrans-397
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '[PRE215]'
  id: totrans-398
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '[PRE216]'
  id: totrans-399
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE216]'
- en: 'selectAntiHero(data: {antiHero: AntiHero, action: TableActions}) {'
  id: totrans-400
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE217]'
  id: totrans-401
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE217]'
- en: <! – Please refer to the list.component.ts file in the GitHub repo, Thank you->
  id: totrans-402
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE218]'
  id: totrans-403
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE218]'
- en: this.router.navigate(['anti-heroes', 'form',
  id: totrans-404
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE219]'
  id: totrans-405
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE219]'
- en: data.antiHero.id]);
  id: totrans-406
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE220]'
  id: totrans-407
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE220]'
- en: '}'
  id: totrans-408
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE221]'
  id: totrans-409
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE221]'
- en: 'executeCommandBarAction(action: CommandBarActions) {'
  id: totrans-410
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE222]'
  id: totrans-411
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE222]'
- en: switch(action) {
  id: totrans-412
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE223]'
  id: totrans-413
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE223]'
- en: 'case CommandBarActions.Create: {'
  id: totrans-414
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE224]'
  id: totrans-415
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE224]'
- en: this.router.navigate(["anti-heroes", "form"]);
  id: totrans-416
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE225]'
  id: totrans-417
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE225]'
- en: return;
  id: totrans-418
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE226]'
  id: totrans-419
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE226]'
- en: '}'
  id: totrans-420
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE227]'
  id: totrans-421
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE227]'
- en: 'case CommandBarActions.DeleteAll: {'
  id: totrans-422
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE228]'
  id: totrans-423
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE228]'
- en: return;
  id: totrans-424
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE229]'
  id: totrans-425
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE229]'
- en: '}'
  id: totrans-426
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE230]'
  id: totrans-427
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE230]'
- en: 'default: ""'
  id: totrans-428
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE231]'
  id: totrans-429
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE231]'
- en: '}'
  id: totrans-430
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE232]'
  id: totrans-431
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE232]'
- en: '}'
  id: totrans-432
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE233]'
  id: totrans-433
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE233]'
- en: 'After accomplishing all the steps, we will now have the following form output:'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 11.2 – Form UI \uFEFFfor creating an anti-hero](img/B18159_11_02.jpg)"
  id: totrans-435
  prefs: []
  type: TYPE_IMG
- en: Figure 11.2 – Form UI for creating an anti-hero
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-437
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With this, we have reached the end of this chapter; let’s have a recap of the
    valuable things you have learned. You have learned about the concepts and implementation
    of Angular reactive forms, and we have implemented `FormGroup`, `FormBuilder`,
    and `formControlName` directives to bind input values to capture data in our form.
    We have also discussed how to group form controls for binding nested properties
    and create form arrays in our reactive forms. This is primarily useful if some
    objects we want to display have array values.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
- en: At the same time, we want to accept a list of entries from users. Lastly, we
    have also learned how to implement validations for form controls to handle and
    verify user input, which will be beneficial for the user experience and help avoid
    unexpected errors.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，我们希望接受用户输入的一列条目。最后，我们还学习了如何实现表单控件的有效性验证来处理和验证用户输入，这将有益于用户体验并有助于避免意外错误。
- en: In the next chapter, we will learn about the concepts and implementation of
    state management in Angular applications; we will discuss the idea of the Redux
    pattern and the **NgRx** library in terms of how they can improve the application
    architecture.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习 Angular 应用程序中状态管理的概念和实现；我们将讨论 Redux 模式以及 **NgRx** 库的想法，从它们如何改进应用程序架构的角度进行讨论。
