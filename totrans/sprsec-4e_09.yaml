- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Opening up to OAuth 2
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开放OAuth 2
- en: '**OAuth 2** is a very popular form of trusted identity management that allows
    users to manage their identity through a single trusted provider. This convenient
    feature provides users with the security of storing their password and personal
    information with the trusted OAuth 2 provider, optionally disclosing personal
    information upon request. Additionally, an OAuth 2-enabled website offers the
    confidence that the users providing OAuth 2 credentials are who they say they
    are.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**OAuth 2**是一种非常流行的受信任身份管理形式，它允许用户通过单个受信任的提供者来管理他们的身份。这个便捷的功能为用户提供将密码和个人信息存储在受信任的OAuth
    2提供者的安全性，并在请求时可选地披露个人信息。此外，OAuth 2启用网站提供信心，即提供OAuth 2凭证的用户就是他们所说的那个人。'
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Learning how to set up your own OAuth 2 application in less than 5 minutes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在5分钟内学习如何设置自己的OAuth 2应用程序
- en: Configuring the `JBCP calendar` application with a very rapid implementation
    of OAuth 2
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用非常快速的实施方式配置`JBCP日历`应用程序的OAuth 2
- en: Learning the conceptual architecture of OAuth 2 and how it provides your site
    with trustworthy user access
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习OAuth 2的概念架构以及它是如何为您的网站提供可信用户访问的
- en: Implementing OAuth 2-based user registration
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现基于OAuth 2的用户注册
- en: Experimenting with OAuth 2 attribute exchange for user profile functionality
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试OAuth 2属性交换以实现用户配置文件功能
- en: Configuring OAuth 2 support in `Spring Security`
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`Spring Security`中配置OAuth 2支持
- en: Executing the OAuth 2 provider connection workflow
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行OAuth 2提供者连接工作流程
- en: Integrating OpenID Connect providers with `Spring Security`
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将OpenID Connect提供者与`Spring Security`集成
- en: 'This chapter’s code in action link is here: [https://packt.link/ejucD](https://packt.link/ejucD).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章代码的实际链接在这里：[https://packt.link/ejucD](https://packt.link/ejucD)。
- en: The Promising World of OAuth 2
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OAuth 2的充满希望的世界
- en: As an application developer, you may have heard the term OAuth 2 thrown around
    a lot. OAuth 2 has been widely adopted by web service and software companies around
    the world and is integral to the way these companies interact and share information.
    But what exactly is it? In a nutshell, OAuth 2 is a protocol that allows distinct
    parties to share information and resources in a secure and reliable manner.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 作为应用程序开发者，你可能经常听到OAuth 2这个术语。OAuth 2已被全球的互联网服务和软件公司广泛采用，并且对于这些公司如何互动和共享信息至关重要。但究竟是什么呢？简单来说，OAuth
    2是一种协议，允许不同的实体以安全和可靠的方式共享信息和资源。
- en: What about OAuth 1.0?
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，OAuth 1.0呢？
- en: Built with the same motivation, OAuth 1.0 was designed and ratified in 2007\.
    However, it was criticized for being overly complex and also had issues with imprecise
    specifications, which led to insecure implementation. All of these issues contributed
    to the poor adoption of OAuth 1.0, and eventually led to the design and creation
    of OAuth 2.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 建立在相同动机的基础上，OAuth 1.0于2007年设计和批准。然而，它因过于复杂而受到批评，并且存在不精确的规范问题，这导致了不安全的实现。所有这些问题都导致了OAuth
    1.0的较差采用，并最终导致了OAuth 2的设计和创建。
- en: OAuth 2 is the successor to OAuth 1.0.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: OAuth 2是OAuth 1.0的后继者。
- en: It is also important to note that OAuth 2 is not backward compatible with OAuth
    1.0, and so OAuth 2 applications cannot integrate with OAuth 1.0 service providers.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要注意的是，OAuth 2与OAuth 1.0不向后兼容，因此OAuth 2应用程序不能与OAuth 1.0服务提供商集成。
- en: This type of login—through a trusted third party—has been in existence for a
    long time, in many different forms (for example, *Google Identity Provider* or
    *Microsoft Entra ID* became two of the more notable central login services on
    the web for some time).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的登录——通过受信任的第三方——已经存在很长时间了，以许多不同的形式（例如，*Google身份提供者*或*Microsoft Entra ID*曾一度成为网络上较著名的中央登录服务之一）。
- en: 'Here are the key concepts and components of OAuth 2.0:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是OAuth 2.0的关键概念和组件：
- en: '*Roles*:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '*角色*：'
- en: '**Resource Owner (RO)**: The entity that can grant access to a protected resource.
    Typically, this is the end-user.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源所有者 (RO)**：可以授予访问受保护资源的实体。通常，这是最终用户。'
- en: '**Client**: The application requesting access to the protected resource on
    behalf of the resource owner.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户端**: 代表资源所有者请求访问受保护资源的应用程序。'
- en: '**Authorization Server (AS)**: The server that authenticates the resource owner
    and issues access tokens after getting proper authorization.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**授权服务器 (AS)**：在获得适当的授权后，验证资源所有者并颁发访问令牌的服务器。'
- en: '**Resource Server (RS)**: The server hosting the protected resources that are
    being accessed.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源服务器 (RS)**：托管正在访问的保护资源的服务器。'
- en: '*Authorization Grant*:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*授权许可*:'
- en: OAuth 2.0 defines several authorization grant types, such as Authorization Code,
    Implicit, Resource Owner Password Credentials, and Client Credentials. The grant
    type determines the flow and the way the client obtains the access token.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OAuth 2.0定义了多种授权许可类型，例如授权代码、隐式、资源所有者密码凭证和客户端凭证。许可类型决定了流程和客户端获取访问令牌的方式。
- en: '*Access Token*:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*访问令牌*:'
- en: The access token is a credential representing the authorization granted to the
    client. It is used to access protected resources on behalf of the resource owner.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问令牌是代表授予客户端的授权的凭证。它用于代表资源所有者访问受保护的资源。
- en: '*Scope*:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*作用域*:'
- en: Scopes define the extent of the access that a client is requesting. It specifies
    what actions the client intends to perform on the resource server.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作用域定义了客户端请求的访问范围。它指定了客户端打算在资源服务器上执行的操作。
- en: '*Authorization Endpoint and* *Token Endpoint*:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*授权端点和* *令牌端点*:'
- en: The `Authorization Endpoint` facilitates communication with the resource owner
    to secure an authorization grant, while the Token Endpoint facilitates the exchange
    of this grant for an access token.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`授权端点`便于与资源所有者沟通以获得授权许可，而`令牌端点`便于将此许可交换为访问令牌。'
- en: '*Redirect URI*:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*重定向URI*:'
- en: After the resource owner grants permission, the `Authorization Server` redirects
    the user back to the client application using a redirect URI.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在资源所有者授予权限后，`授权服务器`使用重定向URI将用户重定向回客户端应用程序。
- en: Important note
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: You can refer to the OAuth 2.0 specification at [https://tools.ietf.org/html/rfc6749](https://tools.ietf.org/html/rfc6749).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以参考OAuth 2.0规范[https://tools.ietf.org/html/rfc6749](https://tools.ietf.org/html/rfc6749)。
- en: 'The following diagram illustrates the high-level relationship between a site
    integrating OAuth 2 during the login process and the Facebook OAuth 2 provider,
    for example:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示说明了在登录过程中集成OAuth 2的网站与Facebook OAuth 2提供者之间的高级关系，例如：
- en: '![Figure 9.1 – OAuth 2 during the login process and the Facebook OAuth 2 provider](img/B21757_09_01.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图9.1 – 登录过程中OAuth 2和Facebook OAuth 2提供者](img/B21757_09_01.jpg)'
- en: Figure 9.1 – OAuth 2 during the login process and the Facebook OAuth 2 provider
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.1 – 登录过程中OAuth 2和Facebook OAuth 2提供者
- en: We can see that submitting a form post will initiate a request to the OAuth
    provider, resulting in the provider displaying an authorization dialog asking
    the user to allow `jbcpcalendar` to gain permission to specific information from
    your OAuth provider account. This request contains a `uri` parameter called `code`.
    Once granted, the user is redirected back to `jbcpcalendar`, and the `code` parameter
    is included in the
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，提交表单将启动对OAuth提供者的请求，导致提供者显示一个授权对话框，要求用户允许`jbcpcalendar`从您的OAuth提供者账户获取特定信息的权限。此请求包含一个名为`code`的`uri`参数。一旦获得授权，用户将被重定向回`jbcpcalendar`，并且`code`参数包含在
- en: '`uri` parameter. Then, the request is redirected to the OAuth provider again,
    to authorize `jbcpcalendar`. The OAuth provider then responds with an `access_token`
    that can be used to access the user’s OAuth information that `jbcpcalendar` was
    granted access to.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`uri`参数。然后，请求再次重定向到OAuth提供者，以授权`jbcpcalendar`。OAuth提供者随后响应一个`access_token`，该令牌可用于访问`jbcpcalendar`被授权访问的用户OAuth信息。'
- en: Don’t trust OAuth 2 unequivocally!
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 不要无保留地信任OAuth 2！
- en: Here, you can see a fundamental assumption that can fool users of the system.
    It is possible for us to sign up for an OAuth 2 provider account, which would
    make it appear as though we were James Gosling, even though we obviously are not.
    Do not make the false assumption that just because a user has a convincing-sounding
    OAuth 2 (or OAuth 2 delegate provider), they are who they say they are without
    requiring additional forms of identification. Thinking about it another way, if
    someone came to your door just claiming he was James Gosling, would you let him
    in without verifying his ID?
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以看到一个可能会欺骗系统用户的根本假设。我们有可能注册OAuth 2提供者账户，这会让我们看起来像是詹姆斯·高斯林，尽管我们显然不是。不要错误地假设，仅仅因为用户有一个听起来令人信服的OAuth
    2（或OAuth 2代表提供者），他们就是他们所说的那个人，而不需要额外的身份识别形式。从另一个角度来看，如果有人来到你家门口，只声称他是詹姆斯·高斯林，你会不验证他的身份就让他进去吗？
- en: The OAuth 2-enabled application then redirects the user to the OAuth 2 provider,
    and the user presents their credentials to the provider, which is then responsible
    for making an access decision. Once the access decision has been made by the provider,
    the provider redirects the user to the originating site, which is now assured
    of the user’s authenticity. OAuth 2 is much easier to understand once you have
    tried it. Let’s add OAuth 2 to the `JBCP calendar` login screen now!
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: OAuth 2.0启用的应用然后将用户重定向到OAuth 2.0提供者，用户向提供者出示其凭证，提供者随后负责做出访问决定。一旦提供者做出访问决定，提供者将用户重定向回原始网站，此时原始网站可以确信用户的真实性。一旦你尝试过OAuth
    2.0，它就会变得容易理解。现在让我们将OAuth 2.0添加到`JBCP日历`登录界面！
- en: Why do we need OpenID Connect?
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们为什么需要OpenID Connect？
- en: '`RFC 6749` ([https://datatracker.ietf.org/doc/html/rfc6749](https://datatracker.ietf.org/doc/html/rfc6749))
    and `RFC 6750` ([https://datatracker.ietf.org/doc/html/rfc6750](https://datatracker.ietf.org/doc/html/rfc6750)).
    Its primary goal is to streamline the process of verifying user identity through
    authentication performed by an `Authorization Server`, allowing for the retrieval
    of user profile information in a manner that is both interoperable and akin to
    REST principles.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`RFC 6749` ([https://datatracker.ietf.org/doc/html/rfc6749](https://datatracker.ietf.org/doc/html/rfc6749))
    和 `RFC 6750` ([https://datatracker.ietf.org/doc/html/rfc6750](https://datatracker.ietf.org/doc/html/rfc6750))。其主要目标是简化通过`授权服务器`执行的认证来验证用户身份的过程，允许以既互操作又符合REST原则的方式检索用户配置文件信息。'
- en: This protocol empowers developers of applications and websites to initiate sign-in
    processes and receive credible assertions regarding users, ensuring consistency
    across various platforms, including web-based, mobile, and JavaScript clients.
    The specification suite is adaptable, supporting a variety of optional features
    such as the encryption of identity data, discovery of `OpenID Providers`, and
    session logout.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 此协议赋予应用和网站的开发者启动登录过程并接收关于用户的可信断言的权力，确保在各种平台（包括基于Web的、移动的和JavaScript客户端）之间的一致性。该规范套件是可定制的，支持各种可选功能，如身份数据的加密、`OpenID
    提供者`的发现和会话注销。
- en: 'For developers, OpenID Connect offers a secure and verifiable means of answering
    the crucial question: “Who is the individual presently using the connected browser
    or mobile app?” Notably, it alleviates the burden of handling passwords—typically
    associated with data breaches—by removing the need to set, store, and manage them.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 对于开发者来说，OpenID Connect提供了一种安全和可验证的方式来回答关键问题：“目前使用连接的浏览器或移动应用的是哪位个人？”值得注意的是，它通过消除设置、存储和管理密码的需要，减轻了处理密码——通常与数据泄露相关——的负担。
- en: How OpenID Connect Works
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OpenID Connect是如何工作的
- en: OpenID Connect facilitates the establishment of an Internet identity ecosystem
    by offering seamless integration, robust support, security, and privacy-preserving
    configuration. It emphasizes interoperability, extends support to a broad array
    of clients and devices, and allows any entity to function as an **OpenID** **Provider**
    (**OP**).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: OpenID Connect通过提供无缝集成、强大的支持、安全性和隐私保护配置，促进了互联网身份生态系统的建立。它强调互操作性，扩展了对广泛客户端和设备的支持，并允许任何实体作为**OpenID
    提供者**（**OP**）运行。
- en: 'Here are the key concepts and components of `OpenID Connect`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是`OpenID Connect`的关键概念和组件：
- en: '**RP**, short **for Relying Party**, refers to an application or website that
    delegates its user authentication function to an **Identity** **Provider** (**IDP**).'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RP**，即**信赖方**，指的是将用户身份验证功能委托给**身份提供者**（**IDP**）的应用或网站。'
- en: '**OP** or **IDP**: An OP is an entity that has implemented the OpenID Connect
    and OAuth 2.0 protocols. Sometimes, OPs are denoted by the role they fulfill,
    such as a **Security Token Service** (**STS**), **IDP**, or an **Suthorization
    Server(AS)**.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OP**或**IDP**：OP是一个实现了OpenID Connect和OAuth 2.0协议的实体。有时，OPs会根据其扮演的角色来表示，例如**安全令牌服务**（**STS**）、**IDP**或**授权服务器（AS**）。'
- en: '**Identity Token**: Serving as the outcome of an authentication process, an
    identity token includes, at a minimum, a user identifier (referred to as the *sub*
    or subject claim) and details about when and how the user authenticated. Additional
    identity data may also be included.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**身份令牌**：作为身份验证过程的成果，身份令牌至少包括用户标识符（称为*sub*或主题声明）以及关于用户何时以及如何进行身份验证的详细信息。还可以包括其他身份数据。'
- en: '**Client**: A client is software that requests tokens, either for user authentication
    or resource access (**RP**). Clients need to be registered with the OP and can
    take various forms, such as web applications, native mobile and desktop applications,
    etc.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户端**：客户端是请求令牌的软件，无论是用于用户身份验证还是资源访问（**RP**）。客户端需要在 OP 上注册，并且可以采取各种形式，如 Web
    应用程序、原生移动和桌面应用程序等。'
- en: '**User**: A user is an individual leveraging a registered client to access
    resources.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户**：用户是利用已注册客户端访问资源的个人。'
- en: After highlighting the OpenID Connect principles as a protocol built on top
    of the OAuth 2 protocol, we will be learning how to set up OAuth 2 in our `JBCP
    Calendar` application using some popular providers.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在强调 OpenID Connect 原则是建立在 OAuth 2 协议之上的协议之后，我们将学习如何使用一些流行的提供商在我们的 `JBCP 日历`
    应用程序中设置 OAuth 2。
- en: Signing up for an OAuth 2 application
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注册 OAuth 2 应用程序
- en: To get the full value out of the exercise in this section (and be able to test
    logging in), you will need to create an application with a service provider. Currently,
    Spring Social supports Twitter, Facebook, Google, LinkedIn, and GitHub, and the
    list is growing.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了充分利用本节中的练习（并能够测试登录），您需要创建一个服务提供商的应用程序。目前，Spring Social 支持 Twitter、Facebook、Google、LinkedIn
    和 GitHub，并且这个列表还在增长。
- en: To get the full value out of the exercises in this chapter, we recommend you
    have accounts with at least Google. We have set up accounts for the `jbcpcalendar`
    application, which we will be using for the remainder of this chapter.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了充分利用本章中的练习（并能够测试登录），我们建议您至少拥有 Google 账户。我们已经为 `jbcpcalendar` 应用程序设置了账户，我们将在本章的剩余部分使用它。
- en: 'Include the following additional dependencies in your `build.gradle` file if
    you are leveraging the **OAuth** **2** feature:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用 **OAuth** **2** 功能，请在您的 `build.gradle` 文件中包含以下附加依赖项：
- en: '[PRE0]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Important note
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: You should start with the source code in `chapter09.00-calendar`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该从 `chapter09.00-calendar` 中的源代码开始。
- en: In addition to the `Spring Security OAuth 2` dependencies, we will now explore
    the `JBCP` `Calendar` application.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `Spring Security OAuth 2` 依赖项之外，我们现在将探索 `JBCP` `Calendar` 应用程序。
- en: Enabling OAuth 2.0 Login with Spring Security
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Spring Security 启用 OAuth 2.0 登录
- en: We can see a common theme among the external authentication providers examined
    over the next several chapters. `Spring Security` provides comprehensive OAuth
    2 support. This section discusses how to integrate OAuth 2 into your servlet-based
    application.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几章中，我们可以看到外部身份验证提供商中存在的一个共同主题。`Spring Security` 提供了全面的 OAuth 2 支持。本节讨论了如何将
    OAuth 2 集成到您的基于 servlet 的应用程序中。
- en: The `OAuth 2.0 Login` feature lets an application have users log in to the application
    by using their existing account with an OAuth 2.0 Provider (such as GitHub) or
    `OpenID Connect 1.0 Provider` (such as Google).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`OAuth 2.0 登录` 功能允许应用程序让用户使用他们现有的 OAuth 2.0 提供商（如 GitHub）或 `OpenID Connect
    1.0 提供商`（如 Google）的账户登录到应用程序。'
- en: Important note
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: '`OAuth 2.0 Login` is implemented by using the `Authorization Code Grant`, as
    specified in the `OAuth 2.0 Authorization Framework`, which you can find here:
    [https://tools.ietf.org/html/rfc6749#section-4.1](https://tools.ietf.org/html/rfc6749#section-4.1)
    and `OpenID Connect Core 1.0`, found here: [https://openid.net/specs/openid-connect-core-1_0.xhtml#CodeFlowAuth](https://openid.net/specs/openid-connect-core-1_0.xhtml#CodeFlowAuth).'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`OAuth 2.0 登录` 通过使用 `授权码授权` 实现，如 `OAuth 2.0 授权框架` 中指定，您可以在[https://tools.ietf.org/html/rfc6749#section-4.1](https://tools.ietf.org/html/rfc6749#section-4.1)找到，以及
    `OpenID Connect Core 1.0`，您可以在[https://openid.net/specs/openid-connect-core-1_0.xhtml#CodeFlowAuth](https://openid.net/specs/openid-connect-core-1_0.xhtml#CodeFlowAuth)找到。'
- en: Initial Setup
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 初始设置
- en: 'This section shows how to configure the `OAuth 2.0 Login` sample by using Google
    as the `Authentication Provider` and covers the following topics:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 本节展示了如何通过使用 Google 作为 `身份验证提供者` 来配置 `OAuth 2.0 登录` 示例，并涵盖了以下主题：
- en: 'Follow the instructions on the OpenID Connect page here: [https://developers.google.com/identity/openid-connect/openid-connect](https://developers.google.com/identity/openid-connect/openid-connect),
    starting in the *Setting up OAuth* *2.0* section.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请遵循此处 OpenID Connect 页面上的说明：[https://developers.google.com/identity/openid-connect/openid-connect](https://developers.google.com/identity/openid-connect/openid-connect)，从
    *设置 OAuth* *2.0* 部分开始。
- en: After completing the `Obtain OAuth 2.0 credentials` instructions, you should
    have a new `OAuth Client` with credentials consisting of a **Client ID** and a
    **Client Secret**.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完成获取 OAuth 2.0 凭据的说明后，您应该有一个新的 `OAuth 客户端`，其凭据由一个 **客户端 ID** 和一个 **客户端密钥** 组成。
- en: This setup is important to configure our application as an **OAuth** **2** client.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 此配置对于将我们的应用程序配置为**OAuth 2**客户端非常重要。
- en: Setting the Redirect URI
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置重定向URI
- en: The redirect URI is the path in the application that the end-user’s user-agent
    is redirected back to after they have authenticated with Google and have granted
    access to the `OAuth Client` (created in the previous step) on the **Consent**
    page.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 重定向URI是在用户通过Google进行身份验证并授予对在**同意**页面上的`OAuth Client`（在上一步骤中创建）的访问权限后，最终用户的用户代理被重定向回应用程序中的路径。
- en: In this subsection, ensure that the Authorized redirect URIs field is set to
    `https://localhost:8443/login/oauth2/code/google`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在本小节中，请确保授权重定向URI字段设置为`https://localhost:8443/login/oauth2/code/google`。
- en: Important note
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The default redirect URI template is `{baseUrl}/login/oauth2/code/{registrationId}`.
    The `registrationId` is a unique identifier for the `ClientRegistration`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的重定向URI模板是`{baseUrl}/login/oauth2/code/{registrationId}`。`registrationId`是`ClientRegistration`的唯一标识符。
- en: 'If the `OAuth Client` runs behind a proxy server, you should check the proxy
    server configuration (follow this link: [https://docs.spring.io/spring-security/reference/features/exploits/http.xhtml#http-proxy-server](https://docs.spring.io/spring-security/reference/features/exploits/http.xhtml#http-proxy-server))
    to ensure the application is correctly configured. Also, see the supported URI
    template variables here: [https://docs.spring.io/spring-security/reference/servlet/oauth2/client/authorization-grants.xhtml#oauth2Client-auth-code-redirect-uri](https://docs.spring.io/spring-security/reference/servlet/oauth2/client/authorization-grants.xhtml#oauth2Client-auth-code-redirect-uri)
    for `redirect-uri`.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`OAuth Client`运行在代理服务器后面，您应该检查代理服务器配置（请参阅此链接：[https://docs.spring.io/spring-security/reference/features/exploits/http.xhtml#http-proxy-server](https://docs.spring.io/spring-security/reference/features/exploits/http.xhtml#http-proxy-server)），以确保应用程序配置正确。同时，请参阅此处支持的URI模板变量：[https://docs.spring.io/spring-security/reference/servlet/oauth2/client/authorization-grants.xhtml#oauth2Client-auth-code-redirect-uri](https://docs.spring.io/spring-security/reference/servlet/oauth2/client/authorization-grants.xhtml#oauth2Client-auth-code-redirect-uri)关于`redirect-uri`。
- en: Once the redirect URI is established, we will proceed to set up the `application.yml`
    configuration.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦建立了重定向URI，我们将继续设置`application.yml`配置。
- en: Configure application.yml
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置application.yml
- en: 'Now that you have a new `OAuth Client` with Google, you need to configure the
    application to use the `OAuth Client` for the authentication flow. To do so, go
    to `application.yml` and set the following configuration:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经有一个新的带有Google的`OAuth Client`，您需要配置应用程序以使用`OAuth Client`进行身份验证流程。为此，请转到`application.yml`并设置以下配置：
- en: '[PRE1]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We have configured here the following client properties:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在此配置了以下客户端属性：
- en: '`spring.security.oauth2.client.registration` is the base property prefix for
    `OAuth` `Client` properties.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring.security.oauth2.client.registration`是`OAuth` `Client`属性的基属性前缀。'
- en: Following the base property prefix is the ID for the `ClientRegistration`, such
    as Google.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在基属性前缀之后是`ClientRegistration`的ID，例如Google。
- en: After configuring the OAuth 2 client properties, we need to register a `SecurityFilterChain`
    bean.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置OAuth 2客户端属性后，我们需要注册一个`SecurityFilterChain` bean。
- en: Register a SecurityFilterChain Bean
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注册SecurityFilterChain Bean
- en: 'The following example shows how to register a `SecurityFilterChain` bean with
    `@EnableWebSecurity` and enable `OAuth 2.0 login` through `httpSecurity.oauth2Login()`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例显示了如何使用`@EnableWebSecurity`注册`SecurityFilterChain` bean并通过`httpSecurity.oauth2Login()`启用`OAuth
    2.0`登录：
- en: '[PRE2]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The next step after configuring the `SecurityFilterChain` bean is to update
    the `SpringSecurityUserContext` class.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 配置`SecurityFilterChain` bean之后的下一步是更新`SpringSecurityUserContext`类。
- en: Update the SpringSecurityUserContext class
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新SpringSecurityUserContext类
- en: The `getCurrentUser` in the `SpringSecurityUserContext` needs to reference the
    new authenticated user of type `DefaultOidcUser`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在`SpringSecurityUserContext`中的`getCurrentUser`需要引用新的已认证用户，类型为`DefaultOidcUser`。
- en: 'The following example shows how to adapt the current implementation to reference
    the `DefaultOidcUser` user type:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例显示了如何将当前实现适配以引用`DefaultOidcUser`用户类型：
- en: '[PRE3]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: After completing the previous steps, we will test the application.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 完成前一步骤后，我们将测试应用程序。
- en: Boot up the Application
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启动应用程序
- en: Launch the sample application and go to `https://localhost:8443/oauth2/authorization/google`.
    You will be redirected to the default login page, which displays a link for Google.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动示例应用程序并访问`https://localhost:8443/oauth2/authorization/google`。您将被重定向到默认登录页面，该页面显示一个Google链接。
- en: Click on the Google link, and you are then redirected to Google for authentication.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击Google链接，然后您将被重定向到Google进行认证。
- en: 'The `OAuth Client` retrieves your email address and basic profile information
    from the `UserInfo Endpoint` (find out more here: https://openid.net/specs/openid-connect-core-1_0.xhtml#UserInfo)
    and establishes an authenticated session.'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`OAuth Client`从`UserInfo Endpoint`（了解更多信息：https://openid.net/specs/openid-connect-core-1_0.xhtml#UserInfo）检索您的电子邮件地址和基本个人资料信息，并建立认证会话。'
- en: 'At this point, you should be able to complete a full login using the Google
    OAuth 2 provider. The redirects that occur are as follows. First, we initiate
    the OAuth 2 provider login as shown in the following screenshot:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 到目前为止，您应该能够使用Google OAuth 2提供者完成完整的登录。发生的重定向如下。首先，我们启动OAuth 2提供者登录，如下截图所示：
- en: '![Figure 9.2 – OAuth 2 Social login with Google](img/B21757_09_02.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图9.2 – 使用Google的OAuth 2社交登录](img/B21757_09_02.jpg)'
- en: Figure 9.2 – OAuth 2 Social login with Google
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.2 – 使用Google的OAuth 2社交登录
- en: 'After filling in the login details, the user is redirected to the `JBCP Calendar`
    application and automatically logged in using the provider display name:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写登录详细信息后，用户将被重定向到`JBCP Calendar`应用程序，并使用提供者显示名称自动登录：
- en: '![Figure 9.3 – Welcome page after successful authentication](img/B21757_09_03.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图9.3 – 认证成功后的欢迎页面](img/B21757_09_03.jpg)'
- en: Figure 9.3 – Welcome page after successful authentication
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.3 – 认证成功后的欢迎页面
- en: At this point, the user exists in the application and is authenticated but not
    authorized on all the web pages. The page `Create Event` can only be accessed
    by authenticated users.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，用户存在于应用程序中并且已经认证，但在所有网页上尚未授权。`创建事件`页面只能由认证用户访问。
- en: Important note
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Your code should now look like that in `chapter09.01-calendar`.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 您的代码现在应该看起来像`chapter09.01-calendar`中的那样。
- en: Customize the Login Page
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义登录页面
- en: By default, the OAuth 2.0 login page is auto-generated by the `DefaultLoginPageGeneratingFilter`.
    The default login page shows each configured `OAuth Client` with its `ClientRegistration.clientName`
    as a link, which is capable of initiating the `Authorization Request` (or OAuth
    2.0 Login).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，OAuth 2.0登录页面由`DefaultLoginPageGeneratingFilter`自动生成。默认登录页面显示每个配置的`OAuth
    Client`，其`ClientRegistration.clientName`作为链接，能够启动`授权请求`（或OAuth 2.0登录）。
- en: Important note
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: For `DefaultLoginPageGeneratingFilter` to show links for configured `OAuth Clients`,
    the registered `ClientRegistrationRepository` needs to also implement `Iterable<ClientRegistration>`.
    See `InMemoryClientRegistrationRepository` for reference.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使`DefaultLoginPageGeneratingFilter`显示配置的`OAuth Clients`的链接，注册的`ClientRegistrationRepository`也需要实现`Iterable<ClientRegistration>`。请参考`InMemoryClientRegistrationRepository`。
- en: 'The link’s destination for each `OAuth Client` defaults to the following:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`OAuth Client`的链接默认目的地如下：
- en: '[PRE4]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following code shows an example of adapting the `login.xhtml` form:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了如何适配`login.xhtml`表单：
- en: '[PRE5]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, you can use the login social button to authenticate your users with Google
    as an `Identity Provider`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以使用登录社交按钮使用Google作为`身份提供者`来认证您的用户。
- en: 'We need also to make sure the user is redirected to the `jbcpcalendar` application
    and automatically logged in. The following example shows how to adapt a `SecurityConfig.java`
    to have a proper redirection after successful authentication:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要确保用户被重定向到`jbcpcalendar`应用程序，并且自动登录。以下示例展示了如何将`SecurityConfig.java`适配以在认证成功后进行适当的重定向：
- en: '[PRE6]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: At this point, you should be able to complete a full login using Google’s OAuth
    2 provider. The redirects that occur are as follows. First, we initiate the OAuth
    2 provider login.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您应该能够使用Google的OAuth 2提供者完成完整的登录。发生的重定向如下。首先，我们启动OAuth 2提供者登录。
- en: '![Figure 9.4 – Login screen after successful authentication](img/B21757_09_04.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![图9.4 – 认证成功后的登录屏幕](img/B21757_09_04.jpg)'
- en: Figure 9.4 – Login screen after successful authentication
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.4 – 认证成功后的登录屏幕
- en: We are then redirected to the `JBCP` `Calendar` application.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们被重定向到`JBCP` `Calendar`应用程序。
- en: Important note
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Your code should now look like that in `chapter09.02-calendar`.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 您的代码现在应该看起来像`chapter09.02-calendar`中的那样。
- en: Additional OAuth 2 providers
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他OAuth 2提供者
- en: We have successfully integrated a single OAuth 2 provider using one of the popular
    OAuth 2 providers. There are several other providers available; we are going to
    add a few more providers so our users have more than one option. `Spring Security`
    currently supports the **Google**, **GitHub**, **Facebook**, and **Okta** providers
    natively. Including additional providers will require configuring custom provider
    properties.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功集成了一个OAuth 2提供者，使用了一个流行的OAuth 2提供者。还有其他几个提供者可供选择；我们将添加更多提供者，以便我们的用户有多个选项。`Spring
    Security`目前原生支持**Google**、**GitHub**、**Facebook**和**Okta**提供者。包括额外的提供者将需要配置自定义提供者属性。
- en: '`CommonOAuth2Provider` pre-defines a set of default client properties for a
    number of well-known providers that `Spring Security` supports natively, as mentioned
    previously.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`CommonOAuth2Provider`预先定义了一组默认客户端属性，适用于Spring Security原生支持的多个知名提供者，如前所述。'
- en: For example, the `authorization-uri`, `token-uri`, and `user-info-uri` do not
    change often for a provider. Therefore, it makes sense to provide default values,
    to reduce the required configuration.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，对于提供者，`authorization-uri`、`token-uri`和`user-info-uri`通常不会经常改变。因此，提供默认值是有意义的，可以减少所需的配置。
- en: As demonstrated previously when we configured a Google client, only the `client-id`
    and `client-secret` properties are required.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，当我们配置Google客户端时，只需要`client-id`和`client-secret`属性。
- en: 'In order to add GitHub providers to the `JBCP` `calendar` application:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将GitHub提供者添加到`JBCP`日历应用程序中：
- en: 'Register your application in GitHub by following the steps given here: [https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/creating-an-oauth-app](https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/creating-an-oauth-app).
    At the end, save the `client-id` and `client-secret`.'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下步骤在GitHub上注册您的应用程序：[https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/creating-an-oauth-app](https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/creating-an-oauth-app)。最后，保存`client-id`和`client-secret`。
- en: The `https://localhost:8443/login/oauth2/code/github`.
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`https://localhost:8443/login/oauth2/code/github`。'
- en: 'Additional application properties need to be set, and each configured provider
    will automatically be registered with the `client-id` and `client-secret` keys
    from the provider application, as follows:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 需要设置额外的应用程序属性，并且每个配置的提供者将自动使用提供者应用程序的`client-id`和`client-secret`键进行注册，如下所示：
- en: '[PRE7]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We can now add the new login options to our `login.xhtml` file to include the
    new provider `GitHub`:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以将新的登录选项添加到我们的`login.xhtml`文件中，包括新的提供者`GitHub`：
- en: '[PRE8]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now we have the required details to connect to the additional providers for
    the JBCP calendar, and we can restart the `JBCP calendar` application and test
    logging in with the other OAuth 2 providers.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们有了连接到JBCP日历的额外提供者的必要详细信息，我们可以重新启动`JBCP日历`应用程序并测试使用其他OAuth 2提供者进行登录。
- en: Important note
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Your code should now look like that in `chapter09.03-calendar`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 您的代码现在应该看起来像`chapter09.03-calendar`中的那样。
- en: 'When logging in now, we should be presented with additional provider options,
    as shown in the following screenshot:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 当现在登录时，我们应该看到额外的提供者选项，如下面的截图所示：
- en: '![Figure 9.5 – Social login options with Google and GitHub](img/B21757_09_05.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![图9.5 – 使用Google和GitHub的社交登录选项](img/B21757_09_05.jpg)'
- en: Figure 9.5 – Social login options with Google and GitHub
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.5 – 使用Google和GitHub的社交登录选项
- en: 'At this point, you should be able to complete a full login using the Google
    OAuth 2 provider. The redirects that occur are as follows. First, we initiate
    the OAuth 2 provider login as shown in the following screenshot:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您应该能够使用Google OAuth 2提供者完成完整的登录。发生的重定向如下。首先，我们启动OAuth 2提供者登录，如下面的截图所示：
- en: '![Figure 9.6 – OAuth 2 social login with GitHub](img/B21757_09_06.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![图9.6 – 使用GitHub的OAuth 2社交登录](img/B21757_09_06.jpg)'
- en: Figure 9.6 – OAuth 2 social login with GitHub
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.6 – 使用GitHub的OAuth 2社交登录
- en: 'We are then redirected to the provider authorization page, requesting the user
    to grant permission to the `jbcpcalendar` application as shown in the following
    screenshot:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将被重定向到提供者授权页面，请求用户授予对`jbcpcalendar`应用程序的权限，如下面的截图所示：
- en: '![Figure 9.7 – OAuth 2 GitHub consent screen](img/B21757_09_07.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![图9.7 – OAuth 2 GitHub同意屏幕](img/B21757_09_07.jpg)'
- en: Figure 9.7 – OAuth 2 GitHub consent screen
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.7 – OAuth 2 GitHub同意屏幕
- en: After authorizing the `jbcpcalendar` application, the user is redirected to
    the `jbcpcalendar` application and automatically logged in using the provider
    display name.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在授权`jbcpcalendar`应用程序后，用户将被重定向到`jbcpcalendar`应用程序，并使用提供者显示名称自动登录。
- en: Configuring Custom Provider Properties
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置自定义提供者属性
- en: There are some OAuth 2.0 Providers that support multi-tenancy, which results
    in different protocol endpoints for each tenant (or sub-domain).
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 有些OAuth 2.0提供者支持多租户，这导致每个租户（或子域）有不同的协议端点。
- en: For example, an `OAuth Client` registered with `OKTA` is assigned to a specific
    sub-domain and has its own protocol endpoints.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在`OKTA`注册的`OAuth客户端`被分配给一个特定的子域，并且有自己的协议端点。
- en: To get started, you’ll require an **Okta developer account**. You can set one
    up by visiting [https://developer.okta.com/signup](https://developer.okta.com/signup).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，你需要一个**Okta开发者账户**。你可以通过访问[https://developer.okta.com/signup](https://developer.okta.com/signup)来设置一个账户。
- en: 'For these cases, `Spring Boot 2.x` provides the following base property for
    configuring custom provider properties: `spring.security.oauth2.client.provider.[providerId]`.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些情况，`Spring Boot 2.x`提供了以下基础属性来配置自定义提供者属性：`spring.security.oauth2.client.provider.[providerId]`。
- en: 'The following code snippet shows an example:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码片段显示了一个示例：
- en: '[PRE9]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The base property (`spring.security.oauth2.client.provider.okta`) allows for
    the custom configuration of protocol endpoint locations.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 基础属性（`spring.security.oauth2.client.provider.okta`）允许自定义配置协议端点位置。
- en: 'We can now add the new login options to our `login.xhtml` file, to include
    with the new `OKTA` provider:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以将新的登录选项添加到我们的`login.xhtml`文件中，包括新的`OKTA`提供者：
- en: '[PRE10]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now we have the required details to connect to the additional providers for
    the JBCP calendar, and we can restart the `JBCP calendar` application and test
    logging in with the custom OAuth 2 `OKTA` providers.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了连接到JBCP日历的附加提供者的必要详细信息，我们可以重新启动`JBCP日历`应用程序并测试使用自定义OAuth 2 `OKTA`提供者进行登录。
- en: Important note
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Your code should now look like that in `chapter09.04-calendar`.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 你的代码现在应该看起来像`chapter09.04-calendar`中的那样。
- en: 'When logging in now, we should be presented with additional provider options,
    as shown in the following screenshot:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 现在登录时，我们应该会看到额外的提供者选项，如下面的截图所示：
- en: '![Figure 9.8 – Social login options with Google, GitHub, and OKTA](img/B21757_09_08.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![图9.8 – 使用Google、GitHub和OKTA的社会登录选项](img/B21757_09_08.jpg)'
- en: Figure 9.8 – Social login options with Google, GitHub, and OKTA
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.8 – 使用Google、GitHub和OKTA的社会登录选项
- en: Enabling Proof Key for Code Exchange (PKCE) support
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用代码交换证明密钥（PKCE）支持
- en: '**PKCE** stands for **Proof Key for Code Exchange**. It is a security feature
    used in OAuth 2.0 authorization flows to mitigate certain types of attacks, particularly
    those targeting the authorization code flow.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '**PKCE**代表**代码交换证明密钥**。它是在OAuth 2.0授权流程中用于减轻某些类型攻击的安全功能，尤其是针对授权代码流的攻击。'
- en: The traditional OAuth 2.0 authorization code flow, a client application redirects
    a user to an `Authorization Server`, the user authenticates and provides consent,
    and the `Authorization Server` issues an authorization code to the client. The
    client then exchanges this code for an access token.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的OAuth 2.0授权代码流，客户端应用程序将用户重定向到`授权服务器`，用户进行身份验证并提供同意，然后`授权服务器`向客户端颁发授权代码。然后客户端用这个代码交换访问令牌。
- en: PKCE is designed to prevent authorization code interception attacks. In these
    attacks, a malicious actor intercepts the authorization code as it’s being returned
    to the client, and then uses it to obtain an access token. PKCE adds an additional
    layer of security to this process.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: PKCE旨在防止授权代码截获攻击。在这些攻击中，恶意行为者截获授权代码，当它被返回给客户端时，然后使用它来获取访问令牌。PKCE为这个过程增加了额外的安全层。
- en: 'The following sequence diagram describes how PKCE works:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的序列图描述了PKCE的工作原理：
- en: '![Figure 9.9 – Social login options with Google, GitHub, and OKTA](img/B21757_09_09.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![图9.9 – 使用Google、GitHub和OKTA的社会登录选项](img/B21757_09_09.jpg)'
- en: Figure 9.9 – Social login options with Google, GitHub, and OKTA
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.9 – 使用Google、GitHub和OKTA的社会登录选项
- en: 'Public clients receive support through the utilization of PKCE. For further
    information on PKCE, refer to this link: [https://datatracker.ietf.org/doc/html/rfc7636](https://datatracker.ietf.org/doc/html/rfc7636).
    PKCE is automatically employed when the client operates in an untrusted environment
    (e.g., native or web browser-based applications), rendering it unable to uphold
    the secrecy of its credentials when the following conditions are true:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 公共客户端通过利用PKCE获得支持。有关PKCE的更多信息，请参阅此链接：[https://datatracker.ietf.org/doc/html/rfc7636](https://datatracker.ietf.org/doc/html/rfc7636)。当客户端在不受信任的环境中运行（例如，原生或基于Web浏览器的应用程序）时，PKCE会自动使用，在这种情况下，当以下条件成立时，它无法保持其凭证的秘密：
- en: '`client-secret` is omitted (or empty)'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`client-secret`被省略（或为空）'
- en: '`client-authentication-method` is set to `ClientAuthenticationMethod.NONE`)'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`client-authentication-method`设置为`ClientAuthenticationMethod.NONE`)'
- en: 'If the OAuth 2.0 Provider supports PKCE for confidential clients (find out
    more about confidential clients: [https://datatracker.ietf.org/doc/html/rfc6749#section-2.1](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)),
    you may (optionally) configure it using `DefaultServerOAuth2AuthorizationRequestResolver.setAuthorizationRequestCustomizer(OAuth2AuthorizationRequestCustomizers.withPkce()`.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 如果OAuth 2.0提供者支持为机密客户端使用PKCE（了解更多关于机密客户端的信息：[https://datatracker.ietf.org/doc/html/rfc6749#section-2.1](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)），你可以（可选地）使用`DefaultServerOAuth2AuthorizationRequestResolver.setAuthorizationRequestCustomizer(OAuth2AuthorizationRequestCustomizers.withPkce())`来配置它。
- en: 'The following example shows how to adapt a `SecurityConfig.java` to use PKCE
    by registering your own `OAuth2AuthorizationRequestResolver`:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了如何通过注册自己的`OAuth2AuthorizationRequestResolver`来适配`SecurityConfig.java`以使用PKCE：
- en: '[PRE11]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Important note
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Your code should now look like that in `chapter09.05-calendar`.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 你的代码现在应该看起来像`chapter09.05-calendar`中的那样。
- en: OpenID Connect 1.0 Logout
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OpenID Connect 1.0注销
- en: '`RP-Initiated Logout`, detailed at [https://openid.net/specs/openid-connect-rpinitiated-1_0.xhtml](https://openid.net/specs/openid-connect-rpinitiated-1_0.xhtml).'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '`RP-Initiated Logout`，详细说明见[https://openid.net/specs/openid-connect-rpinitiated-1_0.xhtml](https://openid.net/specs/openid-connect-rpinitiated-1_0.xhtml)。'
- en: 'In cases where the `OpenID Provider` supports both `end_session_endpoint` URL
    from the *OpenID Provider’s Discovery Metadata*. You can achieve this by configuring
    the `ClientRegistration` with the `issuer-uri`, as outlined in [https://openid.net/specs/openid-connect-session-1_0.xhtml#OPMetadata](https://openid.net/specs/openid-connect-session-1_0.xhtml#OPMetadata):'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在`OpenID提供者`支持从*OpenID提供者的发现元数据*中的`end_session_endpoint` URL的情况下。你可以通过配置`ClientRegistration`使用`issuer-uri`来实现这一点，如[https://openid.net/specs/openid-connect-session-1_0.xhtml#OPMetadata](https://openid.net/specs/openid-connect-session-1_0.xhtml#OPMetadata)中概述的那样：
- en: '[PRE12]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Also, you can configure `OidcClientInitiatedLogoutSuccessHandler`, which implements
    RP-Initiated Logout, as follows:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你可以配置`OidcClientInitiatedLogoutSuccessHandler`，它实现了RP-Initiated Logout，如下所示：
- en: '[PRE13]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Important note
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Your code should now look like that in `chapter09.06-calendar`.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 你的代码现在应该看起来像`chapter09.06-calendar`中的那样。
- en: Automatic User Registration
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动用户注册
- en: 'Many applications need to hold data about their users locally, even if authentication
    is delegated to an external provider. This can be done in two steps:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 许多应用程序需要在其本地保存有关其用户的数据，即使身份验证已委派给外部提供者。这可以通过以下两个步骤完成：
- en: 'Choose a backend for your database, and set up some repositories (using Spring
    Data, say) for a custom `User` object that suits your needs and can be populated,
    fully or partially, from external authentication. For our `JBCP Calendar` application,
    we will adapt `CalendarUser` to add the provider information as follows:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为你的数据库选择一个后端，并为一个适合你需求的自定义`User`对象设置一些仓库（例如使用Spring Data），该对象可以从外部身份验证完全或部分填充。对于我们的`JBCP日历`应用程序，我们将适配`CalendarUser`以添加提供者信息，如下所示：
- en: '[PRE14]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Implement and expose `OAuth2UserService` to call the `CalendarUser` object and
    implements `OAuth2User`.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`OAuth2UserService`并公开调用`CalendarUser`对象，实现`OAuth2User`。
- en: '[PRE15]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Implement and expose `OidcUserService` to call the `Authorization Server` as
    well as your database. Your implementation should return something that extends
    your custom User object and implements `OidcUser`.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`OidcUserService`以调用`授权服务器`以及你的数据库。你的实现应该返回一个扩展你的自定义用户对象并实现`OidcUser`的对象。
- en: '[PRE16]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Hint
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Include a new attribute within the User object to establish a connection with
    a distinct identifier from the external provider (distinct from the user’s name,
    yet uniquely associated with the account on the external platform).
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在用户对象中包含一个新属性，以与外部提供者的唯一标识符建立连接（与用户名不同，但与外部平台上的账户唯一关联）。
- en: One issue that would need to be resolved if supporting multiple providers is
    username conflicts between the various provider details returned.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 如果支持多个提供者，需要解决的一个问题是返回的各种提供者详情之间的用户名冲突。
- en: If you log in to the `JBCP calendar` application with each of the listed providers—which
    then query the data that was stored in `H2 database`—you will find the data could
    be similar, if not exactly the same, based on the user’s account details.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用列出的每个提供者登录到`JBCP日历`应用程序——然后查询存储在`H2数据库`中的数据——你会发现数据可能是相似的，如果不是完全相同的话，这取决于用户的账户详情。
- en: 'In the `CALENDAR_USERS` table, we have two possible issues:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在`CALENDAR_USERS`表中，我们有两个可能的问题：
- en: First, we use the email attribute of the `UserDetails` object as the `user ID`
    to find the `JBCP calendar` users. But the `user ID`, can be different than an
    email for some other providers.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们使用`UserDetails`对象的电子邮件属性作为`用户ID`来查找`JBCP日历`用户。但`用户ID`可能对于某些其他提供者来说与电子邮件不同。
- en: Second, it is still possible that the user identifier for two different providers
    will be the same.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二，仍然有可能两个不同提供者的用户标识符是相同的。
- en: We are not going to dive into the various ways to detect and correct this possible
    issue, but it is worth noting for future reference.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会深入探讨检测和纠正这一可能问题的各种方法，但值得将来参考。
- en: Important note
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Your code should now look like that in `chapter09.07-calendar`.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 您的代码现在应该看起来像`chapter09.07-calendar`中的那样。
- en: Mapping User Authorities
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 映射用户权限
- en: The `GrantedAuthoritiesMapper` receives a collection of granted authorities,
    including a unique authority of the `OAuth2UserAuthority` type with the corresponding
    string identifier `OAUTH2_USER` (or `OidcUserAuthority` with the string identifier
    `OIDC_USER`).
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`GrantedAuthoritiesMapper`接收一组已授予的权限，包括具有对应字符串标识符`OAUTH2_USER`（或具有字符串标识符`OIDC_USER`的`OidcUserAuthority`）的唯一权限的`OAuth2UserAuthority`类型。'
- en: 'We will provide a custom implementation of `GrantedAuthoritiesMapper` and configure
    it, as follows:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将提供一个自定义的`GrantedAuthoritiesMapper`实现，并按以下方式配置它：
- en: '[PRE17]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The following example shows how to adapt a `SecurityConfig.java` to use the
    `GrantedAuthoritiesMapper`:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了如何将`SecurityConfig.java`适配以使用`GrantedAuthoritiesMapper`：
- en: '[PRE18]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: With this implementation, you need to make sure the OIDC user roles already
    exist in the database.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在此实现中，您需要确保OIDC用户角色已经存在于数据库中。
- en: For our `JBCP calendar` application, let’s define a user with the admin role.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的`JBCP日历`应用程序，让我们定义一个具有管理员角色的用户。
- en: 'For example:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE19]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: At this stage, the user `calendarjbcp@gmail.com` has the admin role and can
    have access to the **All Events** page after successful authentication.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在此阶段，用户`calendarjbcp@gmail.com`具有管理员角色，并在成功认证后可以访问**所有活动**页面。
- en: Important note
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Your code should now look like that in `chapter09.08-calendar`.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 您的代码现在应该看起来像`chapter09.08-calendar`中的那样。
- en: Is OAuth 2 secure?
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OAuth 2是否安全？
- en: As support for OAuth 2 relies on the trustworthiness of the OAuth 2 provider
    and the verifiability of the provider’s response, security and authenticity are
    critical in order for the application to have confidence in the user’s OAuth 2-based
    login.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 由于OAuth 2的支持依赖于OAuth 2提供者的可信度和提供者响应的可验证性，因此为了使应用程序对基于OAuth 2的登录用户有信心，安全性和真实性至关重要。
- en: 'Fortunately, the designers of the OAuth 2 specification were very aware of
    this concern, and implemented a series of verification steps to prevent response
    forgery, replay attacks, and other types of tampering, which are explained as
    follows:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，OAuth 2规范的设计者非常清楚这一担忧，并实施了一系列验证步骤来防止响应伪造、重放攻击和其他类型的篡改，具体解释如下：
- en: '**Response forgery** is prevented due to a combination of a shared secret key
    (created by the OAuth 2-enabled site prior to the initial request) and a one-way
    hashed message signature on the response itself. A malicious user tampering with
    the data in any of the response fields without having access to the shared secret
    key—and signature algorithm—would generate an invalid response.'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**响应伪造**是通过结合共享密钥（在初始请求之前由启用OAuth 2的站点创建）和响应本身上的单向散列消息签名来防止的。恶意用户在没有访问共享密钥和签名算法的情况下篡改响应字段中的数据，将生成无效的响应。'
- en: '**Replay attacks** are prevented due to the inclusion of a nonce, or a one-time
    use, random key, which should be recorded by the OAuth 2-enabled site so that
    it cannot ever be reused. In this way, even a user attempting to reissue the response
    URL would be foiled because the receiving site would determine that the nonce
    had been previously used, and would invalidate the request.'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重放攻击**是通过包含一个nonce（一次性使用、随机密钥）来防止的，该密钥应由启用OAuth 2的站点记录，以确保它永远不会被重用。这样，即使尝试重新发布响应URL的用户也会被挫败，因为接收站点会确定nonce已被先前使用，并将使请求无效。'
- en: The most likely form of attack that could result in a compromised user interaction
    would be a **man-in-the-middle attack**, where a malicious user could intercept
    the user’s interaction between their computer and the OAuth 2 provider. A hypothetical
    attacker in this situation could be in a position to record the conversation between
    the user’s browser and the OAuth 2 provider, and record the secret key used when
    the request was initiated. The attacker, in this case, would need a very high
    level of sophistication and reasonably a complete implementation of the OAuth
    2 signature specification—in short, this is not likely to occur with any regularity.
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最可能导致用户交互受损的攻击形式可能是**中间人攻击**，恶意用户可能会拦截用户在计算机和OAuth 2提供者之间的交互。在这种假设的攻击情况下，攻击者可能能够记录用户浏览器和OAuth
    2提供者之间的对话，并记录在请求发起时使用的密钥。在这种情况下，攻击者需要非常高的复杂性和对OAuth 2签名规范的完整实现——简而言之，这种情况不太可能经常发生。
- en: Summary
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we reviewed OAuth 2, a relatively recent technology for user
    authentication and credentials management. OAuth 2 has a very wide reach on the
    web and has made great strides in usability and acceptance within the past year
    or two. Most public-facing sites on the modern web should plan on having some
    form of OAuth 2 support, and the `JBCP calendar` application is no exception!
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们回顾了OAuth 2，这是一种相对较新的用户身份验证和凭证管理技术。OAuth 2在互联网上具有非常广泛的应用范围，在过去一两年的时间里在可用性和接受度方面取得了巨大进步。现代网络上的大多数面向公众的网站都应该计划提供某种形式的OAuth
    2支持，`JBCP日历`应用程序也不例外！
- en: 'We learned about the following topics: the OAuth 2 authentication mechanism
    and its high-level architecture and key terminology. We also learned about OAuth
    2 login and automatic user registration with the `JBCP calendar` application.
    We also covered automatic login with OAuth 2 and the security of OAuth 2’s login
    responses.'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了以下主题：OAuth 2认证机制及其高级架构和关键术语。我们还学习了使用`JBCP日历`应用程序进行OAuth 2登录和自动用户注册。我们还涵盖了OAuth
    2的自动登录及其登录响应的安全性。
- en: We covered one of the simplest single sign-on mechanisms to implement with `Spring
    Security`. One of the downsides is that it does not support a standard mechanism
    for a single logout. In the next chapter, we will explore SAML, another standard,
    single sign-on protocol that also supports single logout.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 我们介绍了使用`Spring Security`实现的最简单的单点登录机制之一。其缺点之一是不支持标准的单点退出机制。在下一章中，我们将探讨SAML，这是一种另一种支持单点退出的标准单点登录协议。
