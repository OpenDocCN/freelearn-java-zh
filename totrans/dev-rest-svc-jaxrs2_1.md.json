["```java\n@Path(\"books\")\npublic class BooksResource {\n}\n```", "```java\n@GET\npublic String getGreeting() {\n  return \"Hello from Book resource\"\n}\n```", "```java\n@Produces(\"text/plain\")\n@GET\npublic String getGreeting() {\n  return \"Hello from Book resource\"\n}\n```", "```java\npublic Set<Class<?>> getClasses() ;\npublic Map<String, Object> getProperties();\npublic Set<Object> getSingletons();\n```", "```java\n@ApplicationPath(\"/library/\")\npublic class HelloWorldApplication extends Application {\n@Override\n  public Set<Class<?>> getClasses() {\n    Set<Class<?>> classes = new HashSet<Class<?>>();\n classes.add(BooksResource.class);\n    return classes;\n  }\n}\n```", "```java\ncurl -X GET http://localhost:8080/helloworld/books\n```", "```java\n@Path(\"/\")\npublic class Library {\n\n @Path(\"/books/{isbn}\")\n public Book getBook(@PathParam(\"isbn\") String isbn){\n    //return book\n  }\n}\n\npublic class Book {\n @Path(\"/author\")\n  public String getAuthor(){\n  }\n}\n```", "```java\nGET /books/123456789\n```", "```java\nGET /books/123456789/author\n```", "```java\n@POST\n@Consumes(MediaType.APPLICATION_XML)\n@Produces(MediaType.APPLICATION_XML)\npublic Response addBook(Book book) {\n  BooksCollection.addBook(book);\n  return    Response.ok(book).\n  type(MediaType.APPLICATION_XML_TYPE).build();\n}\n```", "```java\n@DELETE\n@Path(\"/{isbn}\")\npublic Book deleteBook(@PathParam(\"isbn\")String isbn) {\n  return BooksCollection.deleteBook(isbn);\n}\n```", "```java\nClient client = ClientBuilder.newClient();\nWebTarget target = client.target(URI);\n```", "```java\nString book = target.request().get(String.class);\n```", "```java\nResponse response = target.request()\npost(Entity.entity(new Book(\"Getting Started with RESTful Web Services\",\"111334444\",\"Enterprise Applications\"), MediaType.APPLICATION_XML_TYPE));\n```", "```java\nresponse = target.path(\"111334444\")\nrequest( MediaType.APPLICATION_XML_TYPE)\n.delete();\n```", "```java\n@XmlRootElement\npublic class Book {\n  public String name;\n  public String isbn;\n  public String getName() {\n    return name;\n  }\n  public String getIsbn() {\n    return isbn;\n  }\n  public Book(String name, String isbn) {\n    this.name=name;\n    this.isbn=isbn;\n  }\n  //JAXB requires this\n  public Book() {\n\n  }\n}\n```", "```java\n@Provider\npublic class SampleMessageBodyReader implements \nMessageBodyReader<Book> {\n}\n```", "```java\npublic boolean isReadable(Class<?> aClass, Type type, Annotation[] annotations, MediaType mediaType) {\n  return true;\n}\n```", "```java\npublic Book readFrom(Class<Book> bookClass, Type type, Annotation[] annotations,\nMediaType mediaType,\nMultivaluedMap<String, String> stringStringMultivaluedMap,\nInputStream inputStream) throws IOException, WebApplicationException {\n  try {\n\n Book book = (Book)unmarshaller.unmarshal(inputStream) ;\n    return book;\n  } catch (JAXBException e) {\n    e.printStackTrace();\n  }\n  return null;\n  }\n}\n```", "```java\npublic boolean isWriteable(Class<?> aClass, Type type, Annotation[] annotations, MediaType mediaType) {\n    return true;\n}\n```", "```java\n public long getSize(Book book, Class<?> aClass, Type type, Annotation[] annotations, MediaType mediaType) {\n        return -1;\n    }\n```", "```java\npublic void writeTo(Book book, \nClass<?> aClass, \nType type, Annotation[] annotations, \nMediaType mediaType,\nMultivaluedMap<String, Object> map,\nOutputStream outputStream) throws \nIOException, WebApplicationException {\n  try {\n\n    Marshaller marshaller = jaxbContext.createMarshaller();\n    marshaller.marshal(book, outputStream);\n  } catch (Exception e) {\n    e.printStackTrace();\n  }\n}\n```", "```java\nClient client = ClientBuilder.newClient();\nclient.register(MessageBodyReaderWriter.class).register(BooksResource.class);\nResponse response = target\n.request()\n.post(Entity.entity(new Book(\"Getting Started with RESTful Web Services\",\"13332233\"), MediaType.APPLICATION_XML_TYPE));\n\nBook  = response.readEntity(Book.class);\n```", "```java\n@Path(\"books\")\n@ValidateOnExecution(ExecutableType.GETTER_METHODS)\npublic class BooksResource {\n\n  @GET\n  @Path(\"{isbn}\")\n  @Consumes(MediaType.APPLICATION_XML)\n  @Produces(MediaType.APPLICATION_XML)\n @NotNull(message=\"Book does not exist for the\n ISBN requested\")\n  public Book getBook(\n  @PathParam(\"isbn\")String isbn)    {\n    return BooksCollection.getBook(isbn);\n\n  }\n}\n```", "```java\n@override\npublic Map<String,Object> getProperties() {\n  Map<String,Object> properties = new HashMap<String,Object>() ;\n properties.put(ServerProperties.BV_SEND_ERROR_IN_RESPONSE, true);\n return properties;\n}\n```", "```java\nList<ValidationError> errors = response.readEntity(new GenericType<List<ValidationError>>() {});\n```"]