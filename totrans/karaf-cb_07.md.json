["```java\ngetTransaction()\nbegin()  // demark beginning of transaction\ndoWork() // your business logic\nif (rollback) then rollback() else commit()\n```", "```java\n    karaf@root()>  feature:install jpa\n\n    ```", "```java\n    karaf@root()>  feature:install openjpa/2.2.2\n\n    ```", "```java\nkaraf@root()>  feature:install transaction\n\n```", "```java\n    <dependencies>\n      <dependency>\n        <groupId>org.apache.servicemix.bundles</groupId>\n        <artifactId>\n          org.apache.servicemix.bundles.commons-dbcp\n        </artifactId>\n        <version>1.4_3</version>\n      </dependency>\n      <dependency>\n        <groupId>org.osgi</groupId>\n        <artifactId>org.osgi.core</artifactId>\n        <version>5.0.0</version>\n      </dependency>\n      <dependency>\n        <groupId>org.osgi</groupId>\n        <artifactId>org.osgi.compendium</artifactId>\n        <version>5.0.0</version>\n      </dependency>\n      <dependency>\n        <groupId>org.osgi</groupId>\n        <artifactId>org.osgi.enterprise</artifactId>\n        <version>5.0.0</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.geronimo.specs</groupId>\n        <artifactId>geronimo-jpa_2.0_spec</artifactId>\n        <version>1.1</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.openjpa</groupId>\n        <artifactId>openjpa</artifactId>\n        <version>2.2.2</version>\n        <scope>test</scope>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.derby</groupId>\n        <artifactId>derby</artifactId>\n        <version>10.8.1.2</version>\n        <scope>provided</scope>\n      </dependency>\n    <!-- custom felix gogo command -->\n      <dependency>\n        <groupId>org.apache.karaf.shell</groupId>\n        <artifactId>\n          org.apache.karaf.shell.console\n        </artifactId>\n        <version>3.0.0</version>\n      </dependency>\n    </dependencies>\n    ```", "```java\n        <plugin>\n          <groupId>org.codehaus.mojo</groupId>\n          <artifactId>openjpa-maven-plugin</artifactId>\n          <configuration>\n            <addDefaultConstructor>\n              true\n            </addDefaultConstructor>\n            <enforcePropertyRestriction>\n              true\n            </enforcePropertyRestriction>\n          </configuration>\n          <executions>\n            <execution>\n              <id>enhancer</id>\n              <phase>process-classes</phase>\n              <goals>\n                <goal>enhance</goal>\n              </goals>\n            </execution>\n          </executions>\n          <dependencies>\n            <dependency>\n              <groupId>org.apache.openjpa</groupId>\n              <artifactId>openjpa</artifactId>\n              <version>2.2.2</version>\n            </dependency>\n            <dependency>\n              <groupId>org.slf4j</groupId>\n              <artifactId>slf4j-api</artifactId>\n              <version>1.6.1</version>\n            </dependency>\n          </dependencies>\n        </plugin>\n        ```", "```java\n        <plugin>\n          <groupId>org.apache.felix</groupId>\n          <artifactId>maven-bundle-plugin</artifactId>\n          <version>2.4.0</version>\n          <extensions>true</extensions>\n          <configuration>\n            <instructions>\n              <Bundle-SymbolicName>\n                ${project.artifactId}\n              </Bundle-SymbolicName>\n              <Meta-Persistence>\n                META-INF/persistence.xml\n              </Meta-Persistence>\n              <Bundle-Activator>\n                com.packt.jpa.demo.Activator\n              </Bundle-Activator>\n              <Export-Package>\n                com.packt.jpa.demo.api.*\n              </Export-Package>\n              <Import-Package>\n                org.osgi.service.blueprint;resolution:=optional,\n                javax.persistence;version=\"[1.1,2)\",\n                javax.persistence.criteria;version=\"[1.1,2)\",\n                javax.sql,\n                org.apache.commons.dbcp;version=\"[1.4,2)\",\n                org.apache.derby.jdbc,\n                org.apache.felix.service.command,\n                org.apache.felix.gogo.commands,\n                org.apache.karaf.shell.console,\n                *\n              </Import-Package>\n            </instructions>\n          </configuration>\n        </plugin>\n        ```", "```java\n    <persistence \n\n                 version=\"1.0\">\n\n      <persistence-unit name=\"recipe\" transaction-type=\"RESOURCE_LOCAL\">\n        <provider>\n          org.apache.openjpa.persistence.PersistenceProviderImpl\n        </provider>\n\n        <non-jta-data-source>\n          osgi:service/javax.sql.DataSource/ (osgi.jndi.service.name=jdbc/demo)\n        </non-jta-data-source>\n\n        <class>com.packt.jpa.demo.entity.Recipe</class>\n        <exclude-unlisted-classes>\n          true\n        </exclude-unlisted-classes>\n\n        <properties>\n\n          <!-- OpenJPA Properties -->\n          <property name=\"openjpa.ConnectionDriverName\" value=\"org.apache.derby.jdbc.ClientDriver.class\"/>\n          <property name=\"openjpa.ConnectionURL\" value=\"jdbc:derby://localhost:1527/demo;create=true\"/>\n          <property name=\"openjpa.Multithreaded\" value=\"true\"/>\n          <property name=\"openjpa.TransactionMode\" value=\"managed\"/>\n          <property name=\"openjpa.ConnectionFactoryMode\" value=\"managed\"/>\n          <property name=\"openjpa.LockManager\" value=\"pessimistic(VersionCheckOnReadLock=true,VersionUpdateOnWriteLock=true)\"/>\n          <property name=\"openjpa.LockTimeout\" value=\"30000\"/>\n          <property name=\"openjpa.jdbc.MappingDefaults\" value=\"ForeignKeyDeleteAction=restrict, JoinForeignKeyDeleteAction=restrict\"/>\n          <property name=\"openjpa.LockManager\" value=\"pessimistic(VersionCheckOnReadLock=true,VersionUpdateOnWriteLock=true)\"/>\n          <property name=\"openjpa.Log\" value=\"DefaultLevel=INFO, Runtime=INFO, Tool=INFO, SQL=INFO\"/>\n          <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"buildSchema\"/>\n          <property name=\"openjpa.jdbc.DBDictionary\" value=\"derby\"/>\n        </properties>\n      </persistence-unit>\n    </persistence>\n    ```", "```java\n    <blueprint default-activation=\"eager\"\n\n          >\n\n      <!-- Define RecipeBookService Services, and expose them. -->\n      <bean id=\"recipeBookService\" class=\"com.packt.jpa.demo.dao.RecipeBookServiceDAOImpl\">\n        <jpa:unit property=\"entityManagerFactory\" unitname=\"recipe\" />\n      </bean>\n\n      <service ref=\"recipeBookService\" interface=\"com.packt.jpa.demo.api.RecipeBookService\" />\n\n      <bean id=\"dataSource\" class=\"org.apache.derby.jdbc.ClientDataSource\" >\n        <property name=\"databaseName\" value=\"demo\"/>\n        <property name=\"createDatabase\" value=\"create\"/>\n      </bean>\n\n      <service id=\"demoDataSource\" ref=\"dataSource\" interface=\"javax.sql.DataSource\">\n        <service-properties>\n          <entry key=\"osgi.jndi.service.name\" value=\"jdbc/demo\"/>\n          <entry key=\"transactional\" value=\"false\"/>\n        </service-properties>\n      </service>\n    </blueprint>\n    ```", "```java\n        package com.packt.jpa.demo.api;\n\n        import java.util.Collection;\n        import com.packt.jpa.demo.entity.Recipe;\n\n        public interface RecipeBookService {\n\n          public Collection<Recipe> getRecipes();\n\n          public void addRecipe(String title, String ingredients);\n\n          public void deleteRecipe(String title);\n\n        }\n        ```", "```java\n        public class RecipeBookServiceDAOImpl implements RecipeBookService {\n\n          @PersistenceUnit(unitName=\"recipe\")\n          private EntityManagerFactory factory;\n\n          public void setEntityManagerFactory(EntityManagerFactory factory) {\n            this.factory = factory;\n          }\n\n          @Override\n          public List<Recipe> getRecipes() {\n            List<Recipe> result = new ArrayList<Recipe>();\n            EntityManager entityManager = factory.createEntityManager();\n            EntityTransaction entityTransaction = entityManager.getTransaction();\n            entityTransaction.begin();\n            result = entityManager.createQuery(\"select r from RECIPE r\", Recipe.class).getResultList();\n            entityTransaction.commit();\n            return result;\n          }\n\n          @Override\n          public void addRecipe(String title, String ingredients) {\n            EntityManager entityManager = factory.createEntityManager();\n            EntityTransaction entityTransaction = entityManager.getTransaction();\n            entityTransaction.begin();\n            entityManager.persist(new Recipe(title, ingredients));\n            entityTransaction.commit();\n        }\n\n          @Override\n          public void deleteRecipe(String title) {\n            EntityManager entityManager = factory.createEntityManager();\n            EntityTransaction entityTransaction = entityManager.getTransaction();\n            entityTransaction.begin();\n            entityManager.remove(entityManager.getReference(Recipe.class, title));\n            entityTransaction.commit();\n          }\n        }\n        ```", "```java\n        package com.packt.jpa.demo.entity;\n\n        import javax.persistence.Column;\n        import javax.persistence.Entity;\n        import javax.persistence.Id;\n        import javax.persistence.Table;\n\n        @Entity( name = \"RECIPE\" )\n        @Table( name = \"RECIPES\" )\n        public class Recipe {\n\n          @Id\n          @Column(nullable = false)\n          private String title;\n\n          @Column(length=10000)\n          private String ingredients;\n\n          public Recipe() {\n          }\n\n          public Recipe(String title, String ingredients) {\n            super();\n            this.title = title;\n            this.ingredients = ingredients;\n          }\n\n          public String getTitle() {\n            return title;\n          }\n          public void setTitle(String title) {\n            this.title = title;\n          }\n          public String getIngredients() {\n            return ingredients;\n          }\n          public void setIngredients(String ingredients) {\n            this.ingredients = ingredients;\n          }\n\n          public String toString() {\n            return \"\" + this.title + \" \" + this.ingredients;\n          }\n        }\n        ```", "```java\n    <!-- Apache Karaf Commands -->\n    <command-bundle >\n      <command>\n        <action class=\"com.packt.jpa.demo.commands.AddRecipe\">\n          <property name=\"recipeBookService\" ref=\"recipeBookService\"/>\n        </action>\n      </command>\n      <command>\n        <action class=\"com.packt.jpa.demo.commands.RemoveRecipe\">\n          <property name=\"recipeBookService\" ref=\"recipeBookService\"/>\n        </action>\n      </command>\n      <command>\n        <action class=\"com.packt.jpa.demo.commands.ListRecipes\">\n          <property name=\"recipeBookService\" ref=\"recipeBookService\"/>\n        </action>\n      </command>\n    </command-bundle>\n    ```", "```java\n        karaf@root()> install -s mvn:org.apache.derby/derbyclient/10.8.1.2\n\n        ```", "```java\n        karaf@root()> feature:install jndi\n\n        ```", "```java\n        karaf@root()> install –s mvn:com.packt/jpa-only/1.0.0-SNAPSHOT\n\n        ```", "```java\n    karaf@root()> test:addrecipe \"Simple Chocolate Chip Cookies\" \"2/3 cup butter, 1 cup brown sugar, 2 eggs, 2 tbsp milk, 2 cups flour, 1 tsp baking powder, 1/4 tsp baking soda, 1/2 tsp vanilla, 1 cup chocolate chips. Whip the butter and sugar together, then add in the eggs and beat well. In a second bowl combine the dry ingredients. Make sure to thoroughly mix together the flour, baking soda and powder. Add the dry ingredients, milk, and vanilla into the butter , sugar, and egg mixture. Beat until dough is consistent. You may now preheat your oven to 375F. Drop teaspoon full amounts of dough onto greased or lined cookie sheets. Bake for 10 to 12 minutes. This recipe should yield between three to four dozen cookies.\"\n    Executing command addrecipe\n    Recipe added!\n    karaf@root()>\n\n    ```", "```java\n    karaf@root()> test:listrecipes\n    Executing command list recipes\n     Simple Chocolate Chip Cookies 2/3 cup butter, 1 cup brown sugar, 2 eggs, 2 tbsp milk, 2 cups flour, 1 tsp baking powder, 1/4 tsp baking soda, 1/2 tsp vanilla, 1 cup chocolate chips. Whip the butter and sugar together, then add in the eggs and beat well. In a second bowl combine the dry ingredients. Make sure to thoroughly mix together the flour, baking soda and powder. Add the dry ingredients, milk, and vanilla into the butter , sugar, and egg mixture. Beat until dough is consistent. You may now preheat your oven to 375F. Drop teaspoon full amounts of dough onto greased or lined cookie sheets. Bake for 10 to 12 minutes. This recipe should yield between three to four dozen cookies.\n    karaf@root()>\n\n    ```", "```java\n    <persistence-unit name=\"recipe\" transaction-type=\"JTA\">\n\n      <provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\n\n      <jta-data-source>\n        osgi:service/javax.sql.XADataSource/(osgi.jndi.service.name=jdbc/demoxa)\n      </jta-data-source>\n      <non-jta-data-source>\n        osgi:service/javax.sql.DataSource/(transactional=false)\n      </non-jta-data-source>\n\n      <class>com.packt.jpa.demo.entity.Recipe</class>\n      <exclude-unlisted-classes>true</exclude-unlisted-classes>\n    ```", "```java\n    <!-- Define RecipeBookService Service, and expose them. -->\n    <bean id=\"recipeBookService\" class=\"com.packt.jpa.demo.dao.RecipeBookServiceDAOImpl\">\n      <tx:transaction method=\"*\" value=\"Required\" />\n      <jpa:context property=\"entityManager\" unitname=\"recipe\" />\n    </bean>\n    ```", "```java\n    <bean id=\"xaDataSource\" class=\"org.apache.derby.jdbc.ClientXADataSource\">\n      <property name=\"databaseName\" value=\"demo\"/>\n      <property name=\"createDatabase\" value=\"create\" />\n    </bean>\n    ```", "```java\n    <service ref=\"xaDataSource\" \n             interface=\"javax.sql.XADataSource\">\n      <service-properties>\n        <entry key=\"osgi.jndi.service.name\" value=\"jdbc/demoxa\"/>\n        <entry key=\"transactional\" value=\"true\"/>\n      </service-properties>\n    </service>\n\n    <!-- JTA Transaction Manager setup. -->\n    <reference id=\"txManager\" \n               interface=\"javax.transaction.TransactionManager\" \n               availability=\"mandatory\"/>\n    ```", "```java\n    public class RecipeBookServiceDAOImpl implements RecipeBookService {\n\n      private EntityManager em;\n\n      public void setEntityManager(EntityManager em) {\n        this.em = em;\n      }\n\n      @Override\n      public List<Recipe> getRecipes() {\n        List<Recipe> result = new ArrayList<Recipe>();\n        result = em.createQuery(\"select r from RECIPE r\", Recipe.class).getResultList();\n        return result;\n      }\n\n      @Override\n      public void addRecipe(String title, String ingredients) {\n        em.persist(new Recipe(title, ingredients));\n      }\n\n      @Override\n      public void deleteRecipe(String title) {\n        em.remove(em.getReference(Recipe.class, title));\n      }\n    }\n    ```", "```java\n    karaf@root()> feature:install transaction\n\n    ```", "```java\n    karaf@root()>  install –s mvn:com.packt/jpa-jta/1.0.0-SNAPSHOT\n\n    ```", "```java\n    karaf@root()> test:addrecipe \"Recipe-Title\" \"Ingredients.\"\n    Executing command addrecipe\n    Recipe added!\n    karaf@root()>\n\n    ```", "```java\n    karaf@root()> test:listrecipes\n    Executing command list recipes\n    Recipe-Title Ingredients.\n    karaf@root()>\n\n    ```"]