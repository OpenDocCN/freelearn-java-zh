["```java\nFROM jboss/wildfly:10.0.0.Final\n\nCOPY target/hello-cloud.war /opt/jboss/wildfly/standalone/deployments/\n```", "```java\n---\nkind: Service\napiVersion: v1\nmetadata:\n  name: hello-cloud\nspec:\n  selector:\n    app: hello-cloud\n  ports:\n    - port: 8080\n---\n```", "```java\n---\nkind: Deployment\napiVersion: apps/v1beta1\nmetadata:\n  name: hello-cloud\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: hello-cloud\n    spec:\n      containers:\n      - name: hello-cloud\n        image: docker.example.com/hello-cloud:1\n        imagePullPolicy: IfNotPresent\n        livenessProbe:\n          httpGet:\n            path: /\n            port: 8080\n        readinessProbe:\n          httpGet:\n            path: /hello-cloud/resources/hello\n            port: 8080\n      restartPolicy: Always\n---\n```", "```java\n---\nkind: Ingress\napiVersion: extensions/v1beta1\nmetadata:\n  name: hello-cloud\nspec:\n  rules:\n  - host: hello.example.com\n    http:\n      paths:\n      - path: /\n        backend:\n          serviceName: hello-cloud\n          servicePort: 8080\n---\n```", "```java\n---\nkind: ConfigMap\napiVersion: v1\nmetadata:\n  name: hello-cloud-config\ndata:\n  application.properties: |\n    hello.greeting=Hello from Kubernetes\n    hello.name=Java EE\n---\n```", "```java\n---\nkind: Deployment\napiVersion: apps/v1beta1\nmetadata:\n  name: hello-cloud\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: hello-cloud\n    spec:\n      containers:\n      - name: hello-cloud\n        image: docker.example.com/hello-cloud:1\n        imagePullPolicy: IfNotPresent\n        volumeMounts:\n        - name: config-volume\n          mountPath: /opt/config\n        livenessProbe:\n          httpGet:\n            path: /\n            port: 8080\n        readinessProbe:\n          httpGet:\n            path: /hello-cloud/resources/hello\n            port: 8080\n      volumes:\n      - name: config-volume\n        configMap:\n          name: hello-cloud-config\n      restartPolicy: Always\n---\n```", "```java\n# similar to previous example\n# ...\n        image: docker.example.com/hello-cloud:1\n        imagePullPolicy: IfNotPresent\n        env:\n        - name: GREETING_HELLO_NAME\n          valueFrom:\n            configMapRef:\n              name: hello-cloud-config\n              key: hello.name\n          livenessProbe:\n# ...\n```", "```java\n# similar to previous example\n# ...\n        image: docker.example.com/hello-cloud:1\n        imagePullPolicy: IfNotPresent\n        env:\n        - name: TOP_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: hello-cloud-secret\n              key: topsecret\n          livenessProbe:\n# ...\n```", "```java\n@ApplicationScoped\npublic class HelloCloudProcessor {\n\n    private Client client;\n    private WebTarget target;\n\n    @PostConstruct\n    private void initClient() {\n        client = ClientBuilder...\n        target = client.target(\"http://cloud-processor:8080/processor/resources/hello\");\n    }\n\n    public String processGreeting() {\n        ...\n    }\n}\n```", "```java\npublic class HelloGreeter {\n\n    @Inject\n    @Config(\"hello.greeting\")\n    String greeting;\n\n    @Inject\n    @Config(\"hello.name\")\n    String greetingName;\n\n    public String processGreeting() {\n        return greeting + \", \" + greetingName;\n    }\n}\n```", "```java\n@ApplicationScoped\npublic class ConfigurationExposer {\n\n    private final Properties properties = new Properties();\n\n    @PostConstruct\n    private void initProperties() {\n        try (InputStream inputStream =\n                new FileInputStream(\"/opt/config/application.properties\")) {\n            properties.load(inputStream);\n        } catch (IOException e) {\n            throw new IllegalStateException(\"Could not init configuration\", e);\n        }\n    }\n\n    @Produces\n    @Config(\"\")\n    public String exposeConfig(InjectionPoint injectionPoint) {\n        Config config = injectionPoint.getAnnotated().getAnnotation(Config.class);\n        if (config != null)\n            return properties.getProperty(config.value());\n        return null;\n    }\n}\n```", "```java\n@ApplicationScoped\npublic class CoffeePurchaser {\n\n    private Client client;\n\n    ...\n\n    @PreDestroy\n    public void closeClient() {\n        client.close();\n    }\n}\n```"]