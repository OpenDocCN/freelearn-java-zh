["```java\n// Repositories configuration block,\n// must be present to define and\n// configure repositories to get\n// dependencies in our build script.\nrepositories {\n\n  // Sample Maven repository with a\n  // custom location.\n  maven {\n    url 'http://mycompany.net/maven'\n  }\n\n}\n```", "```java\nrepositories {\n  // Define Bintray's JCenter\n  // repository, to find\n  // dependencies.\n  jcenter()\n}\n```", "```java\nrepositories {\n  jcenter {\n    // By default https is used as protocol,\n    // but we can change it with the url\n    // property.\n    url = 'http://jcenter.bintray.com'\n  }\n}\n```", "```java\nrepositories {\n  // Define multiple Maven repositories.\n  jcenter()\n\n  jcenter {\n    name 'Bintray JCenter legacy'\n    url = 'http://jcenter.bintray.com'\n  }\n}\n\ntask repositoriesInfo {\n  description 'Display information about repositories'\n\n  doFirst {\n    // Access repositories as collection.\n    project.repositories.each {\n      // Display name and URL for each\n      // repository.\n      println \"'${it.name}' uses URL ${it.url}\"\n    }\n  }\n}\n```", "```java\n$ gradle -q repositoriesInfo\n'BintrayJCenter' uses URL https://jcenter.bintray.com/\n'Bintray JCenter legacy' uses URL http://jcenter.bintray.com\n\n```", "```java\nrepositories {\n  // Define central Maven repository\n  // to use for dependencies.\n  mavenCentral()\n}\n```", "```java\nrepositories {\n  mavenCentral(\n    // Use http protocol for the\n    // central Maven repository.\n    url: 'http://repo1.maven.org/maven2/'\n  )\n}\n```", "```java\nrepositories {\n  // Define multiple Maven repositories.\n  mavenCentral()\n\n  mavenCentral(\n    name: 'HTTP Maven Central',\n    url:  'http://repo1.maven.org/maven2/'\n  )\n}\n\ntask repositoriesInfo {\n  description 'Display information about repositories'\n\n  doFirst {\n    // Access repositories as collection.\n    project.repositories.each {\n      // Display name and URL for each\n      // repository.\n      println \"'${it.name}' uses URL ${it.url}\"\n    }\n  }\n}\n```", "```java\n$ gradle -q repositoriesInfo\n'MavenRepo' uses URL https://repo1.maven.org/maven2/\n'HTTP Maven Central' uses URL http://repo1.maven.org/maven2/\n\n```", "```java\nrepositories {\n  // Define the local Maven cache as\n  // a repository for dependencies.\n  mavenLocal()\n}\n```", "```java\nrepositories {\n\n  // Define a custom Maven repository and\n  // set the url property so Gradle can look\n  // for the dependency module descripts\n  // and artifacts.\n  maven {\n    url = 'http://ourcompany.com/maven'\n    // Alternative syntax is to use\n    // the url method:\n    // url 'http://ourcompany.com/maven'\n  }\n\n}\n```", "```java\nrepositories {\n  maven {\n    // At this location at the least the\n    // dependency module descriptor files\n    // must be stored.\n    url 'http://ourcompany.com/maven'\n\n    // Define extra locations where artifacts\n    // can be found and downloaded.\n    artifactUrls 'http://ourcompany.com/jars'\n    artifactUrls 'http://ourcompany.com/lib'\n\n    // Alternative syntax is to use the\n    // artifactUrls property assignment:\n    // artifactUrls = [\n    //   'http://ourcompany.com/jars', 'http://ourcompany.com/lib'\n    // ]\n  }\n}\n```", "```java\nrepositories {\n  maven {\n    url 'http://ourcompany.com/maven'\n\n    // Here we assign the username and\n    // password to access the repository.\n    credentials {\n      username = 'developer'\n      password = 'secret'\n\n      // Alternate syntax is to use\n      // the username and password\n      // methods.\n      // username 'developer'\n      // password 'secret'\n    }\n  }\n}\n```", "```java\nrepositories {\n  maven {\n    name = 'Company Maven Repository'\n\n    url 'http://ourcompany.com/maven'\n\n    // Check that properties mavenUsername\n    // and mavenPassword are set when\n    // we run the script.\n    verifyProperty('mavenUsername')\n    verifyProperty('mavenPassword')\n\n    credentials {\n      // Use project properties instead\n      // of hard coded username and password.\n      username mavenUsername\n      password mavenPassword\n    }\n  }\n}\n\n/**\n* Helper method to check if project property\n* with the given name is set.\n*\n* @param propertyName Name of the property to check\n* @throws GradleException When property is not set.\n*/\nvoid verifyProperty(final String propertyName) {\n  if (!hasProperty(propertyName)) {\n    throw new GradleException(\"Property $propertyName must be set\")\n  }\n}\n```", "```java\n$ gradle -PmavenUsername=developer -PmavenPassword=secret\n\n```", "```java\nmavenUsername = developer\nmavenPassword = secret\n```", "```java\n// Run for all projects.\nallprojects {\n\n  // After the project is evaluated, we can access\n  // the repository by name.\n  afterEvaluate { project ->\n\n    // Check if project contains a repository\n    // with the given name.\n    if (project.repositories.any { it.name == 'Company Maven Repository' }) {\n\n      // Set credentials for custom Maven repository\n      // with the given name.\n      configure(project.repositories['Company Maven Repository']) {\n        credentials {\n          username 'developer'\n          password 'secret'\n        }\n      }\n\n    }\n\n  }\n\n}\n```", "```java\nrepositories {\n  maven {\n    name = 'Company Maven Repository'\n    url 'http://ourcompany.com/maven'\n\n    // Credentials are set via init script.\n  }\n}\n```", "```java\nrepositories {\n\n  // Define the directories jars and lib\n  // to be used as repositories.\n  flatDir {\n    name 'Local lib directory'\n    dirs \"${projectDir}/jars\", \"${projectDir}/lib\"\n  }\n\n  // Alternate syntax is using a Map\n  // with the flatDir method.\n  // flatDir name: 'Local lib directory',\n  //         dirs: [\"${projectDir}/jars\", \"${projectDir}/lib\"]\n\n}\n```", "```java\nrepositories {\n  flatDir name: 'Local lib directory',\n      dirs: [\"${projectDir}/lib\"]\n}\n\ndependencies {\n  traffic group: 'com.traffic', name: 'pedestrian',\n      version: '1.0', classifier: 'jdk16'\n}\n```", "```java\nrepositories {\n\n  // Define an Ivy repository with\n  // a URL and optional name property.\n  ivy {\n    name 'Ivy Repository'\n    url 'http://ourompany.com/repo'\n  }\n\n}\n```", "```java\nrepositories {\n\n  ivy {\n    // Set layout to maven.\n    layout 'maven'\n    name 'Ivy repository Maven layout'\n    url 'http://ourcompany.com/repo1'\n  }\n\n  ivy {\n    // Set layout to ivy.\n    layout 'ivy'\n    name 'Ivy repository'\n    url 'http://ourcompany.com/repo'\n  }\n\n}\n```", "```java\nrepositories {\n\n  ivy {\n    url 'http://ourcompany.com/repo'\n\n    // Here we define a custom pattern\n    // for the artifacts and Ivy XML files.\n    layout('pattern') {\n      // Define pattern with artifact method.\n      // This pattern is used for both Ivy XML files\n      // and artifacts.\n      artifact '[module]/[type]/[artifact]-[revision].[ext]'\n    }\n  }\n\n  ivy {\n    url 'http://ourcompany.com/repo1'\n\n    layout('pattern') {\n      // We can define multiple patterns. \n      // The order of the definitions\n      // defines search path.\n      artifact 'binaries/[organisation]/[module]/[artifact]-[revision].[ext]'\n      artifact 'signed-jars/[organisation]/[module]/[artifact]-[revision].[ext]'\n\n      // Seperate definition for Ivy XML files \n      // with ivy method.\n      ivy '[organisation]/[module]/metadata/ivy-[revision].xml'\n    }\n  }\n\n}\n```", "```java\nrepositories {\n\n  ivy {\n    url 'http://ourcompany.com/repo'\n\n    // Define pattern with artifact method.\n    // This pattern is used for both Ivy XML files\n    // and artifacts.\n    artifactPattern '[module]/[type]/[artifact]-[revision].[ext]'\n  }\n\n  ivy {\n    url 'http://ourcompany.com/repo1'\n\n    // We can define multiple patterns. The order of the definitions\n    // defines search path.\n    artifactPattern 'binaries/[organisation]/[module]/[artifact]-[revision].[ext]'\n    artifactPattern 'signed-jars/[organisation]/[module]/[artifact]-[revision].[ext]'\n\n    // Seperate definition for Ivy XML files with ivy method.\n    ivyPattern '[organisation]/[module]/metadata/ivy-[revision].xml'\n  }\n\n}\n```", "```java\nrepositories {\n  ivy {\n    url 'http://ourcompany.com/repo'\n\n    // Here we assign the username and\n    // password to access the repository.\n    credentials {\n      username = 'developer'\n      password = 'secret'\n\n      // Alternate syntax is to use\n      // the username and password\n      // methods.\n      // username 'developer'\n      // password 'secret'\n    }\n  }\n}\n```", "```java\nrepositories {\n  ivy {\n    // Use file protocol, for example an\n    // accessible network share or local directory.\n    url 'file://Volumes/shared/developers/repo'\n  }\n\n  maven {\n    url 'sftp://ourcompany.com:22/repo'\n\n    // With the sftp protocol we must provide\n    // the username and password.\n    credentials {\n      username 'developer'\n      password 'secret'\n    }\n  }\n}\n```"]