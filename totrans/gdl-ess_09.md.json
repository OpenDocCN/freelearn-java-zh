["```java\npackage com.packtpub.ge.qotd;\n\nimport java.util.Date;\n\ninterface QotdService {\n  String getQuote(Date day);\n}\n```", "```java\nqotd-groovy\n├── build.gradle\n└── src\n ├── main\n │   ├── groovy\n │   │   └── com\n │   │       └── packtpub\n │   │           └── ge\n │   │               └── qotd\n │   │                   └── GroovyQotdService.groovy\n │   └── java\n │       └── com\n │           └── packtpub\n │               └── ge\n │                   └── qotd\n │                       └── QotdService.java\n └── test\n └── groovy\n └── com\n └── packtpub\n └── ge\n └── qotd\n └── GroovyQotdServiceTest.groovy\n\n```", "```java\napply plugin: 'groovy'\n\nrepositories {\n  mavenCentral()\n}\n\ndependencies {\n  compile 'org.codehaus.groovy:groovy-all:2.4.5'\n  testCompile 'junit:junit:4.11'\n}\n```", "```java\npackage com.packtpub.ge.qotd\n\nclass GroovyQotdService implements QotdService {\n  List quotes\n\n  GroovyQotdService(List quotes) {\n    this.quotes = quotes\n  }\n\n  @Override\n  String getQuote(Date day) {\n    quotes[day[Calendar.DAY_OF_YEAR] % quotes.size()]\n  }\n}\n```", "```java\npackage com.packtpub.ge.qotd\n\nimport org.junit.Before\nimport org.junit.Test\n\nimport static org.junit.Assert.assertEquals\nimport static org.junit.Assert.assertNotSame\n\npublic class GroovyQotdServiceTest {\n\n  QotdService service\n  Date today, tomorrow, dayAfterTomorrow\n\n  def quotes = [\n    \"Be the change you wish to see in the world\" +\n      \" - Mahatma Gandhi\",\n    \"A person who never made a mistake never tried anything new\" +\n      \" - Albert Einstein\"\n  ]\n\n  @Before\n  public void setup() {\n    service = new GroovyQotdService(quotes)\n    today = new Date()\n    tomorrow = today + 1\n    dayAfterTomorrow = tomorrow + 1\n  }\n\n  @Test\n  void \"return same quote for same date\"() {\n    assertEquals(service.getQuote(today), service.getQuote(today))\n  }\n\n  @Test\n  void \"return different quote for different dates\"() {\n    assertNotSame(service.getQuote(today),\n      service.getQuote(tomorrow))\n  }\n\n  @Test\n  void \"repeat quotes\"() {\n    assertEquals(service.getQuote(today),\n      service.getQuote(dayAfterTomorrow))\n  }\n}\n```", "```java\n$ gradle test\n\n```", "```java\nqotd-scala\n├── build.gradle\n└── src\n ├── main\n │   ├── java\n │   │   └── com/packtpub/ge/qotd\n │   │                       └── QotdService.java\n │   └── scala\n │       └── com/packtpub/ge/qotd\n │                           └── ScalaQotdService.scala\n └── test\n └── scala\n └── com/packtpub/ge/qotd\n └── ScalaQotdServiceTest.scala\n\n```", "```java\napply plugin: 'scala'\n\nrepositories {\n  mavenCentral()\n}\n\ndependencies {\n  compile 'org.scala-lang:scala-library:2.11.7'\n  testCompile 'org.specs2:specs2-junit_2.11:2.4.15',\n    'junit:junit:4.11'\n}\n```", "```java\npackage com.packtpub.ge.qotd\n\nimport java.util.{Calendar, Date}\n\nclass ScalaQotdService(quotes: Seq[String]) extends QotdService {\n\n  def getQuote(day: Date) = {\n    val calendar = Calendar.getInstance()\n    calendar.setTime(day)\n\n    quotes(calendar.get(Calendar.DAY_OF_YEAR) % quotes.size)\n  }\n}\n```", "```java\npackage com.packtpub.ge.qotd\n\nimport java.util.{Calendar, Date}\n\nimport org.junit.runner.RunWith\nimport org.specs2.mutable._\nimport org.specs2.runner.JUnitRunner\n\n@RunWith(classOf[JUnitRunner])\nclass ScalaQotdServiceTest extends SpecificationWithJUnit {\n\n  def service = new ScalaQotdService(Seq(\n    \"Be the change you wish to see in the world\" +\n      \" - Mahatma Gandhi\",\n    \"A person who never made a mistake never tried anything new\" +\n      \" - Albert Einstein\"\n  ))\n\n  val today = new Date()\n  val tomorrow = incrementDay(today)\n  val dayAfterTomorrow = incrementDay(tomorrow)\n\n  \"Quote service\" should {\n    \"return same quote for same day in multiple invocations\" in {\n      service.getQuote(today) must be(service.getQuote(today))\n    }\n\n    \"return different quote for different days\" in {\n      service.getQuote(today) must not be (\n        service.getQuote(tomorrow))\n    }\n\n    \"repeat quote if total quotes are less than days in year\" in {\n      service.getQuote(today) must be(\n        service.getQuote(dayAfterTomorrow))\n    }\n  }\n\n  def incrementDay(date: Date) = {\n    val cal = Calendar.getInstance()\n    cal.setTime(date)\n    cal.add(Calendar.DATE, 1)\n    cal.getTime\n  }\n}\n```", "```java\n$ gradle test\n\n```"]