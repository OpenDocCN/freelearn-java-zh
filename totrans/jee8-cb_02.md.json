["```java\n<dependency>\n    <groupId>javax.enterprise</groupId>\n    <artifactId>cdi-api</artifactId>\n    <version>2.0</version>\n    <scope>provided</scope>\n</dependency> \n<dependency>\n    <groupId>javax</groupId>\n    <artifactId>javaee-web-api</artifactId>\n    <version>7.0</version>\n    <scope>provided</scope>\n</dependency>\n```", "```java\n@ApplicationPath(\"webresources\")\npublic class Application extends javax.ws.rs.core.Application {\n}\n```", "```java\npublic class User implements Serializable {\n\n    private String name;\n    private String email;\n\n    //DO NOT FORGET TO ADD THE GETTERS AND SETTERS\n}\n```", "```java\npublic class UserFactory implements Serializable{\n\n    @Produces\n    public User getUser() {\n        return new User(\"Elder Moraes\", \"elder@eldermoraes.com\");\n    }\n\n}\n```", "```java\npublic enum ProfileType {\n    ADMIN, OPERATOR;\n}\n```", "```java\n@Qualifier\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.TYPE, ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER})\npublic @interface Profile {\n    ProfileType value();\n}\n```", "```java\npublic interface UserProfile {\n    ProfileType type();\n}\n```", "```java\n@Profile(ProfileType.ADMIN)\npublic class ImplAdmin implements UserProfile{\n\n    @Override\n    public ProfileType type() {\n        System.out.println(\"User is admin\");\n        return ProfileType.ADMIN;\n    }   \n}\n```", "```java\n@Profile(ProfileType.OPERATOR)\n@Default\npublic class ImplOperator implements UserProfile{\n\n    @Override\n    public ProfileType type() {\n        System.out.println(\"User is operator\");\n        return ProfileType.OPERATOR;\n    }   \n}\n```", "```java\n@Path(\"userservice/\")\n@RequestScoped\npublic class UserService {\n\n    @Inject\n    private User user;\n\n    @Inject\n    @Profile(ProfileType.ADMIN)\n    private UserProfile userProfileAdmin;\n\n    @Inject\n    @Profile(ProfileType.OPERATOR)\n    private UserProfile userProfileOperator;\n\n    @Inject\n    private UserProfile userProfileDefault;\n\n    @Inject\n    private Event<User> userEvent;\n\n    ...\n```", "```java\n    @GET\n    @Path(\"getUser\")\n    public Response getUser(@Context HttpServletRequest request, \n            @Context HttpServletResponse response) \n            throws ServletException, IOException{\n\n        request.setAttribute(\"result\", user);\n        request.getRequestDispatcher(\"/result.jsp\")\n        .forward(request, response);\n        return Response.ok().build();\n    }\n```", "```java\n    @GET\n    @Path(\"getProfileAdmin\")\n    public Response getProfileAdmin(@Context HttpServletRequest request, \n            @Context HttpServletResponse response) \n            throws ServletException, IOException{\n\n            request.setAttribute(\"result\", \n            fireUserEvents(userProfileAdmin.type()));\n             request.getRequestDispatcher(\"/result.jsp\")\n             .forward(request, response);\n        return Response.ok().build();\n    }\n```", "```java\n    @GET\n    @Path(\"getProfileOperator\")\n    public Response getProfileOperator(@Context HttpServletRequest request, \n            @Context HttpServletResponse response) \n            throws ServletException, IOException{\n\n            request.setAttribute(\"result\", \n            fireUserEvents(userProfileOperator.type())); \n            request.getRequestDispatcher(\"/result.jsp\")\n            .forward(request, response);\n        return Response.ok().build();\n    }\n```", "```java\n    @GET\n    @Path(\"getProfileDefault\")\n    public Response getProfileDefault(@Context HttpServletRequest request, \n            @Context HttpServletResponse response) \n            throws ServletException, IOException{\n\n            request.setAttribute(\"result\", \n            fireUserEvents(userProfileDefault.type())); \n            request.getRequestDispatcher(\"/result.jsp\")\n            .forward(request, response);\n            return Response.ok().build();\n    }\n```", "```java\n    private ProfileType fireUserEvents(ProfileType type){\n        userEvent.fire(user);\n        userEvent.fireAsync(user);\n        return type;\n    }\n\n    public void sendUserNotification(@Observes User user){\n        System.out.println(\"sendUserNotification: \" + user);\n    }\n\n    public void sendUserNotificationAsync(@ObservesAsync User user){\n        System.out.println(\"sendUserNotificationAsync: \" + user);\n    }\n```", "```java\n<body>\n <a href=\"http://localhost:8080/ch02-\n cdi/webresources/userservice/getUser\">getUser</a>\n <br>\n <a href=\"http://localhost:8080/ch02-\n cdi/webresources/userservice/getProfileAdmin\">getProfileAdmin</a>\n <br>\n <a href=\"http://localhost:8080/ch02-\n cdi/webresources/userservice/getProfileOperator\">getProfileOperator</a>\n <br>\n <a href=\"http://localhost:8080/ch02-\n cdi/webresources/userservice/getProfileDefault\">getProfileDefault</a>\n</body>\n```", "```java\n<body>\n    <h1>${result}</h1>\n    <a href=\"javascript:window.history.back();\">Back</a>\n</body>\n```", "```java\n@Profile(ProfileType.ADMIN)\npublic class ImplAdmin implements UserProfile{\n   ...\n}\n\n@Profile(ProfileType.OPERATOR)\n@Default\npublic class ImplOperator implements UserProfile{\n   ...\n}\n```", "```java\n    @Inject\n    @Profile(ProfileType.ADMIN)\n    private UserProfile userProfileAdmin;\n\n    @Inject\n    @Profile(ProfileType.OPERATOR)\n    private UserProfile userProfileOperator;\n\n    @Inject\n    private UserProfile userProfileDefault;\n```", "```java\n    @GET\n    @Path(\"getUser\")\n    public Response getUser(@Context HttpServletRequest request, \n            @Context HttpServletResponse response) \n            throws ServletException, IOException{\n\n        request.setAttribute(\"result\", user);\n        request.getRequestDispatcher(\"/result.jsp\")\n        .forward(request, response);\n        return Response.ok().build();\n    }\n```", "```java\n    @Inject\n    private Event<User> userEvent;\n\n    ...\n\n    private ProfileType fireUserEvents(ProfileType type){\n        userEvent.fire(user);\n        userEvent.fireAsync(user);\n        return type;\n    }\n\n    public void sendUserNotification(@Observes User user){\n        System.out.println(\"sendUserNotification: \" + user);\n    }\n\n    public void sendUserNotificationAsync(@ObservesAsync User user){\n        System.out.println(\"sendUserNotificationAsync: \" + user);\n    }\n```", "```java\n        <dependency>\n            <groupId>javax.validation</groupId>\n            <artifactId>validation-api</artifactId>\n            <version>2.0.0.Final</version>\n        </dependency>\n        <dependency>\n            <groupId>org.hibernate.validator</groupId>\n            <artifactId>hibernate-validator</artifactId>\n            <version>6.0.1.Final</version>\n        </dependency> \n        <dependency>\n            <groupId>javax</groupId>\n            <artifactId>javaee-web-api</artifactId>\n            <version>7.0</version>\n            <scope>provided</scope>\n        </dependency>\n```", "```java\n@Named\n@RequestScoped\npublic class User {\n\n    @NotBlank (message = \"Name should not be blank\")\n    @Size (min = 4, max = 10,message = \"Name should be between \n    4 and 10 characters\")\n    private String name;\n\n    @Email (message = \"Invalid e-mail format\")\n    @NotBlank (message = \"E-mail shoud not be blank\")\n    private String email;\n\n    @PastOrPresent (message = \"Created date should be \n    past or present\")\n    @NotNull (message = \"Create date should not be null\")\n    private LocalDate created;\n\n    @Future (message = \"Expires should be a future date\")\n    @NotNull (message = \"Expires should not be null\")\n    private LocalDate expires;\n\n    //DO NOT FORGET TO IMPLEMENT THE GETTERS AND SETTERS\n\n    ...\n```", "```java\n    public void valid(){\n        FacesContext\n                .getCurrentInstance()\n                .addMessage(\n                    null, \n                    new FacesMessage(FacesMessage.SEVERITY_INFO,\n                    \"Your data is valid\", \"\"));\n    }\n```", "```java\n<h:body>\n <h:form>\n <h:outputLabel for=\"name\" value=\"Name\" />\n <h:inputText id=\"name\" value=\"#{user.name}\" />\n <br/>\n <h:outputLabel for=\"email\" value=\"E-mail\" />\n <h:inputText id=\"email\" value=\"#{user.email}\" />\n <br/>\n <h:outputLabel for=\"created\" value=\"Created\" />\n <h:inputText id=\"created\" value=\"#{user.created}\">\n     <f:convertDateTime type=\"localDate\" pattern=\"dd/MM/uuuu\" /> \n </h:inputText>\n <br/>\n <h:outputLabel for=\"expire\" value=\"Expire\" />\n <h:inputText id=\"expire\" value=\"#{user.expires}\">\n     <f:convertDateTime type=\"localDate\" pattern=\"dd/MM/uuuu\" /> \n </h:inputText>\n <br/>\n <h:commandButton value=\"submit\" type=\"submit\" action=\"#{user.valid()}\" />\n </h:form>\n</h:body>\n```", "```java\n    @NotBlank (message = \"Name should not be blank\")\n    @Size (min = 4, max = 10,message = \"Name should be between \n           4 and 10 characters\")\n    private String name;\n```", "```java\n    @Email (message = \"Invalid e-mail format\")\n    @NotBlank (message = \"E-mail shoud not be blank\")\n    private String email;\n```", "```java\n    @PastOrPresent (message = \"Created date should be past or present\")\n    @NotNull (message = \"Create date should not be null\")\n    private LocalDate created;\n```", "```java\n    @Future (message = \"Expires should be a future date\")\n    @NotNull (message = \"Expires should not be null\")\n    private LocalDate expires;\n```", "```java\n <h:inputText id=\"created\" value=\"#{user.created}\">\n     <f:convertDateTime type=\"localDate\" pattern=\"dd/MM/uuuu\" /> \n </h:inputText>\n\n ...\n\n <h:inputText id=\"expire\" value=\"#{user.expires}\">\n     <f:convertDateTime type=\"localDate\" pattern=\"dd/MM/uuuu\" /> \n </h:inputText>\n```", "```java\n        <dependency>\n            <groupId>javax.servlet</groupId>\n            <artifactId>javax.servlet-api</artifactId>\n            <version>4.0.0-b05</version>\n            <scope>provided</scope>\n        </dependency> \n        <dependency>\n            <groupId>javax</groupId>\n            <artifactId>javaee-web-api</artifactId>\n            <version>7.0</version>\n            <scope>provided</scope>\n        </dependency>\n```", "```java\npublic class User {\n\n    private String name;\n    private String email;\n\n    //DO NOT FORGET TO IMPLEMENT THE GETTERS AND SETTERS\n\n}\n```", "```java\n@WebServlet(name = \"UserServlet\", urlPatterns = {\"/UserServlet\"})\npublic class UserServlet extends HttpServlet {\n\n    private User user;\n\n    @PostConstruct\n    public void instantiateUser(){\n        user = new User(\"Elder Moraes\", \"elder@eldermoraes.com\");\n    }\n\n   ...\n```", "```java\n    @Override\n    public void init() throws ServletException {\n        System.out.println(\"Servlet \" + this.getServletName() + \n                           \" has started\");\n    }\n\n    @Override\n    public void destroy() {\n        System.out.println(\"Servlet \" + this.getServletName() + \n                           \" has destroyed\");\n    }\n```", "```java\n    @Override\n    protected void doGet(HttpServletRequest request, \n    HttpServletResponse response)\n            throws ServletException, IOException {\n        doRequest(request, response);\n    }\n\n    @Override\n    protected void doPost(HttpServletRequest request, \n    HttpServletResponse response)\n            throws ServletException, IOException {\n        doRequest(request, response);\n    }\n```", "```java\n    protected void doRequest(HttpServletRequest request, \n    HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/html;charset=UTF-8\");\n        try (PrintWriter out = response.getWriter()) {\n            out.println(\"<html>\");\n            out.println(\"<head>\");\n            out.println(\"<title>Servlet UserServlet</title>\");\n            out.println(\"</head>\");\n            out.println(\"<body>\");\n            out.println(\"<h2>Servlet UserServlet at \" + \n                         request.getContextPath() + \"</h2>\");\n            out.println(\"<h2>Now: \" + new Date() + \"</h2>\");\n            out.println(\"<h2>User: \" + user.getName() + \"/\" + \n                        user.getEmail() + \"</h2>\");\n            out.println(\"</body>\");\n            out.println(\"</html>\");\n        }\n    }\n```", "```java\n    <body>\n        <a href=\"<%=request.getContextPath()%>/UserServlet\">\n        <%=request.getContextPath() %>/UserServlet</a>\n    </body>\n```", "```java\n        <dependency>\n            <groupId>javax.servlet</groupId>\n            <artifactId>javax.servlet-api</artifactId>\n            <version>4.0.0-b07</version>\n            <scope>provided</scope>\n        </dependency> \n        <dependency>\n            <groupId>javax</groupId>\n            <artifactId>javaee-web-api</artifactId>\n            <version>7.0</version>\n            <scope>provided</scope>\n        </dependency>\n```", "```java\n@WebServlet(name = \"UserServlet\", urlPatterns = {\"/UserServlet\"})\npublic class UserServlet extends HttpServlet {\n\n    protected void doRequest(HttpServletRequest request, \n                             HttpServletResponse response)\n            throws ServletException, IOException {\n        request.getRequestDispatcher(\"/user.jsp\")\n        .forward(request, response);\n        System.out.println(\"Redirected to user.jsp\");\n    }\n\n    @Override\n    protected void doGet(HttpServletRequest request, \n                         HttpServletResponse response)\n            throws ServletException, IOException {\n        doRequest(request, response);\n    }\n\n    @Override\n    protected void doPost(HttpServletRequest request, \n                          HttpServletResponse response)\n            throws ServletException, IOException {\n        doRequest(request, response);\n    }\n}\n```", "```java\n@WebServlet(name = \"ProfileServlet\", urlPatterns = {\"/ProfileServlet\"})\npublic class ProfileServlet extends HttpServlet {\n\n    protected void doRequest(HttpServletRequest request, \n                             HttpServletResponse response)\n            throws ServletException, IOException {\n        request.getRequestDispatcher(\"/profile.jsp\").\n        forward(request, response);\n        System.out.println(\"Redirected to profile.jsp\");\n    }\n\n    @Override\n    protected void doGet(HttpServletRequest request, \n                         HttpServletResponse response)\n            throws ServletException, IOException {\n        doRequest(request, response);\n    }\n\n    @Override\n    protected void doPost(HttpServletRequest request, \n                          HttpServletResponse response)\n            throws ServletException, IOException {\n        doRequest(request, response);\n    }\n}\n```", "```java\n@WebFilter(filterName = \"PushFilter\", urlPatterns = {\"/*\"})\npublic class PushFilter implements Filter {\n\n    @Override\n    public void doFilter(ServletRequest request, \n    ServletResponse response,\n            FilterChain chain)\n            throws IOException, ServletException {\n\n        HttpServletRequest httpReq = (HttpServletRequest)request;\n        PushBuilder builder = httpReq.newPushBuilder();\n\n        if (builder != null){\n            builder\n                .path(\"resources/javaee-logo.png\")\n                .path(\"resources/style.css\")\n                .path(\"resources/functions.js\")\n                .push(); \n            System.out.println(\"Resources pushed\");\n        }\n\n        chain.doFilter(request, response);\n\n    }   \n}\n```", "```java\n<body>\n <a href=\"UserServlet\">User</a>\n <br/>\n <a href=\"ProfileServlet\">Profile</a>\n</body>\n```", "```java\n    <head>\n        <meta http-equiv=\"Content-Type\" content=\"text/html; \n         charset=UTF-8\">\n        <link rel=\"stylesheet\" type=\"text/css\"   \n         href=\"resources/style.css\">\n        <script src=\"img/functions.js\"></script>\n        <title>User Push</title>\n    </head>\n\n    <body>\n        <h1>User styled</h1>\n        <img src=\"img/javaee-logo.png\">\n        <br />\n        <button onclick=\"message()\">Message</button>\n        <br />\n        <a href=\"javascript:window.history.back();\">Back</a>\n    </body>\n```", "```java\n    <head>\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"resources/style.css\">\n        <script src=\"img/functions.js\"></script>\n        <title>User Push</title>\n    </head>\n\n    <body>\n        <h1>Profile styled</h1>\n        <img src=\"img/javaee-logo.png\">\n        <br />\n        <button onclick=\"message()\">Message</button>\n        <br />\n        <a href=\"javascript:window.history.back();\">Back</a>\n    </body>\n```", "```java\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"resources/style.css\">\n        <script src=\"img/functions.js\"></script>\n```", "```java\n        HttpServletRequest httpReq = (HttpServletRequest)request;\n        PushBuilder builder = httpReq.newPushBuilder();\n\n        if (builder != null){\n            builder\n                .path(\"resources/javaee-logo.png\")\n                .path(\"resources/style.css\")\n                .path(\"resources/functions.js\")\n                .push(); \n            System.out.println(\"Resources pushed\");\n        }\n```", "```java\n        <dependency>\n            <groupId>org.hibernate</groupId>\n            <artifactId>hibernate-entitymanager</artifactId>\n            <version>4.3.1.Final</version>\n        </dependency>\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.12</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.hamcrest</groupId>\n            <artifactId>hamcrest-core</artifactId>\n            <version>1.3</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>javax</groupId>\n            <artifactId>javaee-web-api</artifactId>\n            <version>7.0</version>\n            <scope>provided</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.openejb</groupId>\n            <artifactId>openejb-core</artifactId>\n            <version>4.7.4</version>\n            <scope>test</scope>\n        </dependency>\n```", "```java\n    <persistence-unit name=\"ch02-jta-pu\" transaction-type=\"JTA\">\n        <provider>org.hibernate.ejb.HibernatePersistence</provider>\n\n        <jta-data-source>userDb</jta-data-source>\n        <non-jta-data-source>userDbNonJta</non-jta-data-source>\n\n        <exclude-unlisted-classes>false</exclude-unlisted-classes>\n\n        <properties>\n            <property name=\"javax.persistence.schema-\n             generation.database.action\" \n             value=\"create\"/>\n        </properties>\n    </persistence-unit>\n```", "```java\n@Entity\npublic class User implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Long id;\n\n    private String name;\n    private String email;\n\n    protected User() {\n    } \n\n    public User(Long id, String name, String email) {\n        this.id = id;\n        this.name = name;\n        this.email = email;\n    }\n\n    //DO NOT FORGET TO IMPLEMENT THE GETTERS AND SETTERS\n}\n```", "```java\n@Stateful\npublic class UserBean {\n\n    @PersistenceContext(unitName = \"ch02-jta-pu\", \n    type = PersistenceContextType.EXTENDED)\n    private EntityManager em;\n\n    public void add(User user){\n        em.persist(user);\n    }\n\n    public void update(User user){\n        em.merge(user);\n    }\n\n    public void remove(User user){\n        em.remove(user);\n    }\n\n    public User findById(Long id){\n        return em.find(User.class, id);\n    }\n}\n```", "```java\npublic class Ch02JtaTest {\n\n    private EJBContainer ejbContainer;\n\n    @EJB\n    private UserBean userBean;\n\n    public Ch02JtaTest() {\n    }\n\n    @Before\n    public void setUp() throws NamingException {\n        Properties p = new Properties();\n        p.put(\"userDb\", \"new://Resource?type=DataSource\");\n        p.put(\"userDb.JdbcDriver\", \"org.hsqldb.jdbcDriver\");\n        p.put(\"userDb.JdbcUrl\", \"jdbc:hsqldb:mem:userdatabase\");\n\n        ejbContainer = EJBContainer.createEJBContainer(p);\n        ejbContainer.getContext().bind(\"inject\", this);\n    }\n\n    @After\n    public void tearDown() {\n        ejbContainer.close();\n    }\n\n    @Test\n    public void validTransaction() throws Exception{\n        User user = new User(null, \"Elder Moraes\", \n                             \"elder@eldermoraes.com\");\n\n        userBean.add(user);\n        user.setName(\"John Doe\");\n        userBean.update(user);\n\n        User userDb = userBean.findById(1L);\n        assertEquals(userDb.getName(), \"John Doe\");\n\n    }\n\n}\n```", "```java\n<persistence-unit name=\"ch02-jta-pu\" transaction-type=\"JTA\">\n```", "```java\n    @Test\n    public void validTransaction() throws Exception{\n        User user = new User(null, \"Elder Moraes\", \n        \"elder@eldermoraes.com\");\n\n        userBean.add(user);\n        user.setName(\"John Doe\");\n        userBean.update(user);\n\n        User userDb = userBean.findById(1L);\n        assertEquals(userDb.getName(), \"John Doe\");\n\n    }\n```", "```java\n@Stateful\npublic class UserBean {\n\n    @PersistenceContext(unitName = \"ch02-jta-pu\", \n                        type = PersistenceContextType.EXTENDED)\n    private EntityManager em;\n\n    ...\n}\n```", "```java\n        <dependency>\n            <groupId>javax</groupId>\n            <artifactId>javaee-web-api</artifactId>\n            <version>7.0</version>\n            <scope>provided</scope>\n        </dependency>\n```", "```java\n@Singleton\n@ConcurrencyManagement(ConcurrencyManagementType.CONTAINER)\n@Lock(LockType.READ)\n@AccessTimeout(value = 10000)\npublic class UserClassLevelBean {\n\n    private int userCount;\n\n    public int getUserCount() {\n        return userCount;\n    }\n\n    public void addUser(){\n        userCount++;\n    }\n\n}\n```", "```java\n@Singleton\n@ConcurrencyManagement(ConcurrencyManagementType.CONTAINER)\n@AccessTimeout(value = 10000)\npublic class UserMethodLevelBean {\n\n    private int userCount;\n\n    @Lock(LockType.READ)\n    public int getUserCount(){\n        return userCount;\n    }\n\n    @Lock(LockType.WRITE)\n    public void addUser(){\n        userCount++;\n    }\n}\n```", "```java\n@Singleton\n@ConcurrencyManagement(ConcurrencyManagementType.BEAN)\npublic class UserSelfManagedBean {\n\n    private int userCount;\n\n    public int getUserCount() {\n        return userCount;\n    }\n\n    public synchronized void addUser(){\n        userCount++;\n    }\n}\n```", "```java\n@ConcurrencyManagement(ConcurrencyManagementType.CONTAINER)\n```", "```java\n@Lock(LockType.READ)\n@AccessTimeout(value = 10000)\npublic class UserClassLevelBean {\n    ...\n}\n```", "```java\n    @Lock(LockType.READ)\n    public int getUserCount(){\n        return userCount;\n    }\n\n    @Lock(LockType.WRITE)\n    public void addUser(){\n        userCount++;\n    }\n```", "```java\n@ConcurrencyManagement(ConcurrencyManagementType.BEAN)\npublic class UserSelfManagedBean{\n\n    ...\n\n    public synchronized void addUser(){\n        userCount++;\n    }\n\n    ...\n}\n```", "```java\n        <dependency>\n            <groupId>org.hibernate</groupId>\n            <artifactId>hibernate-entitymanager</artifactId>\n            <version>4.3.1.Final</version>\n        </dependency>\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.12</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.hamcrest</groupId>\n            <artifactId>hamcrest-core</artifactId>\n            <version>1.3</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>javax</groupId>\n            <artifactId>javaee-web-api</artifactId>\n            <version>7.0</version>\n            <scope>provided</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.openejb</groupId>\n            <artifactId>openejb-core</artifactId>\n            <version>4.7.4</version>\n            <scope>test</scope>\n        </dependency>\n```", "```java\n@Entity\npublic class User implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Long id;\n\n    private String name;\n    private String email;\n\n    protected User() {\n    } \n\n    public User(Long id, String name, String email) {\n        this.id = id;\n        this.name = name;\n        this.email = email;\n    }\n\n    //DO NOT FORGET TO IMPLEMENT THE GETTERS AND SETTERS\n}\n```", "```java\n    <persistence-unit name=\"ch02-jpa-pu\" transaction-type=\"JTA\">\n        <provider>org.hibernate.ejb.HibernatePersistence</provider>\n        <jta-data-source>userDb</jta-data-source>\n\n        <exclude-unlisted-classes>false</exclude-unlisted-classes>\n\n        <properties>\n            <property name=\"javax.persistence.schema-\n             generation.database.action\" \n             value=\"create\"/>\n        </properties>\n    </persistence-unit>\n```", "```java\n@Stateless\npublic class UserBean {\n\n    @PersistenceContext(unitName = \"ch02-jpa-pu\", \n    type = PersistenceContextType.TRANSACTION)\n    private EntityManager em;\n\n    public void add(User user){\n        em.persist(user);\n    }\n\n    public void update(User user){\n        em.merge(user);\n    }\n\n    public void remove(User user){\n        em.remove(user);\n    }\n\n    public User findById(Long id){\n        return em.find(User.class, id);\n    }\n}\n```", "```java\npublic class Ch02JpaTest {\n\n    private EJBContainer ejbContainer;\n\n    @EJB\n    private UserBean userBean;\n\n    public Ch02JpaTest() {\n    }\n\n    @Before\n    public void setUp() throws NamingException {\n        Properties p = new Properties();\n        p.put(\"userDb\", \"new://Resource?type=DataSource\");\n        p.put(\"userDb.JdbcDriver\", \"org.hsqldb.jdbcDriver\");\n        p.put(\"userDb.JdbcUrl\", \"jdbc:hsqldb:mem:userdatabase\");\n\n        ejbContainer = EJBContainer.createEJBContainer(p);\n        ejbContainer.getContext().bind(\"inject\", this);\n    }\n\n    @After\n    public void tearDown() {\n        ejbContainer.close();\n    }\n\n    @Test\n    public void persistData() throws Exception{\n        User user = new User(null, \"Elder Moraes\", \n        \"elder@eldermoraes.com\");\n\n        userBean.add(user);\n        user.setName(\"John Doe\");\n        userBean.update(user);\n\n        User userDb = userBean.findById(1L);\n        assertEquals(userDb.getName(), \"John Doe\");\n\n    }\n\n}\n```", "```java\n<persistence-unit name=\"ch02-jpa-pu\" transaction-type=\"JTA\">\n```", "```java\n<provider>org.hibernate.ejb.HibernatePersistence</provider>\n```", "```java\n<jta-data-source>userDb</jta-data-source>\n```", "```java\n<exclude-unlisted-classes>false</exclude-unlisted-classes>\n```", "```java\n        <properties>\n            <property name=\"javax.persistence.schema-\n             generation.database.action\" \n             value=\"create\"/>\n        </properties>\n```", "```java\n@Stateless\npublic class UserBean {\n\n    @PersistenceContext(unitName = \"ch02-jpa-pu\", \n                        type = PersistenceContextType.TRANSACTION)\n    private EntityManager em;\n\n   ...\n\n}\n```", "```java\n    public void add(User user){\n        em.persist(user);\n    }\n```", "```java\n    public void update(User user){\n        em.merge(user);\n    }\n```", "```java\n    public void remove(User user){\n        em.remove(user);\n    }\n```", "```java\n    public User findById(Long id){\n        return em.find(User.class, id);\n    }\n```", "```java\n        <dependency>\n            <groupId>javax</groupId>\n            <artifactId>javaee-web-api</artifactId>\n            <version>7.0</version>\n            <scope>provided</scope>\n        </dependency>\n```", "```java\npublic class User {\n\n    private String name;\n    private String email;\n\n    //DO NOT FORGET TO IMPLEMENT THE GETTERS AND SETTERS\n}\n```", "```java\n@Singleton\n@Startup\npublic class UserCacheBean {\n\n    protected Queue<User> cache = null;\n\n    @PersistenceContext\n    private EntityManager em;\n\n    public UserCacheBean() {\n    }\n\n    protected void loadCache() {\n        List<User> list = em.createQuery(\"SELECT u FROM USER \n                                         as u\").getResultList();\n\n        list.forEach((user) -> {\n            cache.add(user);\n        });\n    }\n\n    @Lock(LockType.READ)\n    public List<User> get() {\n        return cache.stream().collect(Collectors.toList());\n    }\n\n    @PostConstruct\n    protected void init() {\n        cache = new ConcurrentLinkedQueue<>();\n        loadCache();\n    }\n}\n```", "```java\n@Singleton\n@Startup\npublic class UserCacheBean {\n\n    ...\n\n    @PostConstruct\n    protected void init() {\n        cache = new ConcurrentLinkedQueue<>();\n        loadCache();\n    }\n}\n```", "```java\n    protected void loadCache() {\n        List<User> list = em.createQuery(\"SELECT u FROM USER \n                                         as u\").getResultList();\n\n        list.forEach((user) -> {\n            cache.add(user);\n        });\n    }\n```", "```java\nprotected Queue<User> cache = null;\n\n...\n\ncache = new ConcurrentLinkedQueue<>();\n```", "```java\n    @Lock(LockType.READ)\n    public List<User> get() {\n        return cache.stream().collect(Collectors.toList());\n    }\n```", "```java\n        <dependency>\n            <groupId>org.hibernate</groupId>\n            <artifactId>hibernate-entitymanager</artifactId>\n            <version>5.2.10.Final</version>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>javax</groupId>\n            <artifactId>javaee-api</artifactId>\n            <version>7.0</version>\n            <scope>provided</scope>\n        </dependency>\n```", "```java\n  <persistence-unit name=\"ch02-batch-pu\" >\n    <provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>\n    <jta-data-source>java:app/userDb</jta-data-source>\n    <exclude-unlisted-classes>false</exclude-unlisted-classes>\n    <properties>\n      <property name=\"javax.persistence.schema- \n       generation.database.action\" \n       value=\"create\"/>\n      <property name=\"hibernate.transaction.jta.platform\" \n       value=\"org.hibernate.service.jta.platform\n       .internal.SunOneJtaPlatform\"/>\n    </properties>\n  </persistence-unit>\n```", "```java\n@Entity\n@Table(name = \"UserTab\")\npublic class User implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n\n    @Id\n    @NotNull\n    private Integer id;\n\n    private String name;\n\n    private String email;\n\n    public User() {\n    }\n\n    //DO NOT FORGET TO IMPLEMENT THE GETTERS AND SETTERS\n}\n```", "```java\n@Named\n@Dependent\npublic class UserReader extends AbstractItemReader {\n\n    private BufferedReader br;\n\n    @Override\n    public void open(Serializable checkpoint) throws Exception {\n        br = new BufferedReader(\n                new InputStreamReader(\n                        Thread.currentThread()\n                        .getContextClassLoader()\n                        .getResourceAsStream\n                        (\"META-INF/user.txt\")));\n    }\n\n    @Override\n    public String readItem() {\n        String line = null;\n\n        try {\n            line = br.readLine();\n        } catch (IOException ex) {\n            System.out.println(ex.getMessage());\n        }\n\n        return line;\n    }\n}\n```", "```java\n@Named\n@Dependent\npublic class UserProcessor implements ItemProcessor {\n\n    @Override\n    public User processItem(Object line) {\n        User user = new User();\n\n        StringTokenizer tokens = new StringTokenizer((String)\n        line, \",\");\n        user.setId(Integer.parseInt(tokens.nextToken()));\n        user.setName(tokens.nextToken());\n        user.setEmail(tokens.nextToken());\n\n        return user;\n    }\n}\n```", "```java\n@Named\n@Dependent\npublic class UserWriter extends AbstractItemWriter {\n\n    @PersistenceContext\n    EntityManager entityManager;\n\n    @Override\n    @Transactional\n    public void writeItems(List list) {\n        for (User user : (List<User>) list) {\n            entityManager.persist(user);\n        }\n    }\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"windows-1252\"?>\n<job id=\"userAccess\" \n\n     version=\"1.0\">\n    <step id=\"loadData\">\n        <chunk item-count=\"3\">\n            <reader ref=\"userReader\"/>\n            <processor ref=\"userProcessor\"/>\n            <writer ref=\"userWriter\"/>\n        </chunk>\n    </step>\n</job>\n```", "```java\n@Named\n@RequestScoped\npublic class UserBean {\n\n    @PersistenceContext\n    EntityManager entityManager;\n\n    public void run() {\n        try {\n            JobOperator job = BatchRuntime.getJobOperator();\n            long jobId = job.start(\"acess-user\", new Properties());\n            System.out.println(\"Job started: \" + jobId);\n        } catch (JobStartException ex) {\n            System.out.println(ex.getMessage());\n        }\n    }\n\n    public List<User> get() {\n        return entityManager\n                .createQuery(\"SELECT u FROM User as u\", User.class)\n                .getResultList();\n    }\n}\n```", "```java\n<h:body>\n <h:form>\n <h:outputLabel value=\"#{userBean.get()}\" />\n <br />\n <h:commandButton value=\"Run\" action=\"index\" actionListener=\"#{userBean.run()}\"/>\n <h:commandButton value=\"Reload\" action=\"index\"/>\n </h:form>\n</h:body>\n```", "```java\n    public void run() {\n        try {\n            JobOperator job = BatchRuntime.getJobOperator();\n            long jobId = job.start(\"acess-user\", new Properties());\n            System.out.println(\"Job started: \" + jobId);\n        } catch (JobStartException ex) {\n            System.out.println(ex.getMessage());\n        }\n    }\n```"]