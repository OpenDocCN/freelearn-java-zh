- en: '16'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '16'
- en: Code Monitoring and Maintenance
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码监控和维护
- en: Writing efficient code is not enough to ensure that our Java applications perform
    at a high level after the initial launch of our systems. We must adopt a robust
    strategy of coding monitoring and maintenance to ensure that our systems continue
    to perform at desired levels even as data and use volumes increase and environments
    change. This chapter focuses on the critical practices, and associated tools,
    of code monitoring and maintenance.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 编写高效的代码不足以确保我们的 Java 应用程序在系统初始发布后仍能以高水平运行。我们必须采用强大的代码监控和维护策略，以确保我们的系统即使在数据和使用量增加以及环境发生变化的情况下，也能继续以期望的水平运行。本章重点介绍了代码监控和维护的关键实践和相关工具。
- en: Our chapter starts with an exploration of **Application Performance Management**
    (**APM**) tools that we can use to conduct real-time monitoring and obtain diagnostic
    data to help us keep our applications running efficiently. Our APM tool exploration
    will include use cases and implementation strategies.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们本章从探索我们可以使用的**应用性能管理（APM**）工具开始，这些工具可以用于实时监控并获取诊断数据，帮助我们保持应用程序的高效运行。我们的 APM
    工具探索将包括用例和实施策略。
- en: The importance of **code reviews** is also covered with the goal of instilling
    a dedication to continual process improvement, specifically to continually maintain
    code quality. Insights into best practices and automation tools will provide you
    with knowledge on how you use selected tools and practices to identify potential
    issues in your code before they cause undesired system behavior and negatively
    impact the user experience.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码审查**的重要性也得到了涵盖，目的是培养对持续过程改进的奉献精神，特别是持续维护代码质量。对最佳实践和自动化工具的见解将为您提供有关如何使用所选工具和实践来识别代码中潜在问题的知识，从而在它们导致不期望的系统行为并负面影响用户体验之前。'
- en: The chapter also introduces the concept of logging and shares how effective
    it can be for monitoring applications. We will explore best practices, logging
    frameworks, and how to analyze log data. Our goal is to log the correct data and
    learn to use the logged data to identify optimization opportunities without introducing
    excessive system overhead.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章还介绍了日志记录的概念，并分享了它如何有效地用于监控应用程序。我们将探讨最佳实践、日志框架以及如何分析日志数据。我们的目标是记录正确的数据，并学会使用记录的数据来识别优化机会，而不会引入过多的系统开销。
- en: 'This chapter covers the following main topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了以下主要主题：
- en: APM tools
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: APM 工具
- en: Code reviews
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码审查
- en: Logging
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录
- en: Monitoring and alerting
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控和警报
- en: Maintenance strategies
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维护策略
- en: APM tools
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: APM 工具
- en: Java developers spend more time maintaining their systems than they do developing
    them. This is because our systems are in production longer than it takes to write
    and test our code. It stands to reason that we should approach **Application Performance
    Management** (**APM**) seriously and appreciate the crucial role it has in our
    ability to ensure our systems continue to perform optimally and maximize the user
    experience.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Java 开发者花费在维护系统上的时间比开发系统的时间多。这是因为我们的系统在生产中的时间比编写和测试代码的时间长。因此，我们应该认真对待**应用性能管理（APM**），并认识到它在确保我们的系统持续以最佳性能运行并最大化用户体验方面所起的至关重要作用。
- en: APM tool overview
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: APM 工具概述
- en: APM tools are designed to help us monitor our systems to manage their performance.
    These tools provide real-time insights into how our applications are performing.
    They can help us identify potential bottlenecks and possible optimization opportunities
    such as with resource use. The metrics generated by APM tools can be measured
    against baselines and give us a true picture of our system’s overall health.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: APM 工具旨在帮助我们监控系统，以管理其性能。这些工具提供了对我们应用程序性能的实时洞察。它们可以帮助我们识别潜在的瓶颈和可能的优化机会，例如资源使用。由
    APM 工具生成的度量标准可以与基线进行比较，并为我们提供系统整体健康状况的真实画面。
- en: 'The primary objectives of APM tools include the following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: APM 工具的主要目标包括以下内容：
- en: Ensuring application reliability
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保应用可靠性
- en: Ensuring application scalability
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保应用可扩展性
- en: Identifying performance issues
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别性能问题
- en: Providing actionable insights
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供可操作的见解
- en: Real-time application monitoring
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实时应用监控
- en: User interaction tracking
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户交互跟踪
- en: Let’s next look at the key features of APM tools.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看 APM 工具的关键特性。
- en: APM tool key features
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: APM 工具关键特性
- en: 'AMP tools range from basic to robust and can have a varied array of features.
    The top 10 key features of AMP tools are as follows, in no specific order:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: APM工具的范围从基础到强大，可以具有各种功能。以下是APM工具的10个关键功能，不分先后顺序：
- en: Provide configurable alerts based on performance thresholds
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据性能阈值提供可配置的警报
- en: Monitor system resource usage
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控系统资源使用情况
- en: Continuously monitor application performance such as response times
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续监控应用程序性能，如响应时间
- en: Identify performance bottlenecks by tracing individual transactions
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过跟踪单个事务来识别性能瓶颈
- en: Identify and log exceptions and errors with sufficient detail to support troubleshooting
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别并记录异常和错误，提供足够的详细信息以支持故障排除
- en: Track and measure user interactions such as transaction durations and load times
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟踪和测量用户交互，如事务持续时间和加载时间
- en: Conduct in-depth analysis
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进行深入分析
- en: Provide numeric and visual reporting of analytic data
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供分析数据的数字和可视化报告
- en: Integrate with other tools such as CI/CD pipelines
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与其他工具（如CI/CD管道）集成
- en: Automate performance management processes
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化性能管理流程
- en: Now that we have an appreciation for the importance of APM tools, their objectives,
    and their key features, let’s review five common APM tools used for Java application
    monitoring.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经认识到APM工具的重要性、它们的目标和关键特性，让我们回顾一下用于Java应用程序监控的五个常见APM工具。
- en: Popular APM tools
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 流行的事务性能管理（APM）工具
- en: There is a plethora of AMP tools available to Java application developers. The
    table that follows lists five common tools and provides a brief description and
    URL for each.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 可用于Java应用程序开发者的APM工具种类繁多。下表列出了五个常见工具，并为每个工具提供了简要描述和URL。
- en: '| **Tool** | **Description** | **URL** |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| **工具** | **描述** | **URL** |'
- en: '| **AppDynamics** | Strong performance monitor with great visibility into Java
    applications | [https://www.appdynamics.com/product/application-performance-monitoring](https://www.appdynamics.com/product/application-performance-monitoring)
    |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| **AppDynamics** | 具有出色Java应用程序可见性的强大性能监控工具 | [https://www.appdynamics.com/product/application-performance-monitoring](https://www.appdynamics.com/product/application-performance-monitoring)
    |'
- en: '| **Datadog** | Cloud-based monitoring and analytics tool | [https://www.dynatrace.com/monitoring/solutions/cloud-monitoring-cio-report/](https://www.dynatrace.com/monitoring/solutions/cloud-monitoring-cio-report/)
    |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| **Datadog** | 基于云的监控和分析工具 | [https://www.dynatrace.com/monitoring/solutions/cloud-monitoring-cio-report/](https://www.dynatrace.com/monitoring/solutions/cloud-monitoring-cio-report/)
    |'
- en: '| **Dynatrace** | Advanced tool that leverages AI for performance monitoring
    | [https://www.dynatrace.com/monitoring/platform/application-observability/](https://www.dynatrace.com/monitoring/platform/application-observability/)
    |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| **Dynatrace** | 利用人工智能进行性能监控的高级工具 | [https://www.dynatrace.com/monitoring/platform/application-observability/](https://www.dynatrace.com/monitoring/platform/application-observability/)
    |'
- en: '| **Elastic APM** | Open source performance monitoring tool | [https://www.elastic.co/observability/application-performance-monitoring](https://www.elastic.co/observability/application-performance-monitoring)
    |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| **Elastic APM** | 开源性能监控工具 | [https://www.elastic.co/observability/application-performance-monitoring](https://www.elastic.co/observability/application-performance-monitoring)
    |'
- en: '| **New Relic** | Perhaps the most commonly used tool, with extensive monitoring
    and analytics capabilities | [https://www.newrelic.com](https://www.newrelic.com)
    |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| **New Relic** | 可能是使用最广泛的工具，具有广泛的监控和分析功能 | [https://www.newrelic.com](https://www.newrelic.com)
    |'
- en: 'Table 16.1: Popular APM tools for Java applications'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 表16.1：Java应用程序的流行APM工具
- en: Note on URLs
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 关于URL的说明
- en: The URLs listed in the preceding table were valid at the time of this book’s
    initial publication date. If you find a link that is no longer valid, you can
    search for the tool name along with *APM tool for Java applications* (for example,
    *Dynatrace APM tool for Java applications*) to find the new link.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表中列出的URL在本书首次出版时是有效的。如果您发现链接已不再有效，您可以搜索工具名称加上*Java应用程序的APM工具*（例如，*Java应用程序的Dynatrace
    APM工具*）来找到新的链接。
- en: You should take the time to experiment with each APM tool to determine which
    one or ones you’d like to work with. Once you have an idea of which one(s) you
    will use, you can review the best practices presented in the next section.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该花时间尝试每个APM工具，以确定您想使用哪一个或哪几个。一旦您有了使用哪一个或哪几个的想法，您就可以查看下一节中提出的最佳实践。
- en: APM tool best practices
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: APM工具最佳实践
- en: 'Regardless of which APM tool you adopt, there are several best practices that
    can help you leverage your selected tool to support your monitoring efforts. Here
    are several best practices for you to consider:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您采用哪种APM工具，都有一些最佳实践可以帮助您充分利用所选工具来支持您的监控工作。以下是一些您可以考虑的最佳实践：
- en: Regularly analyze your performance data. This can help you identify trends and
    anomalies.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定期分析您的性能数据。这可以帮助您识别趋势和异常。
- en: Schedule and conduct periodic reviews of your APM configurations and performance
    data.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安排并定期审查您的APM配置和性能数据。
- en: Establish clear performance monitoring goals, aligning them with your organization’s
    objectives.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建立明确的表现监控目标，并与您的组织目标保持一致。
- en: Create your **Key Performance Indicators** (**KPIs**) and periodically review
    them for relevancy.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建您的**关键绩效指标**（**KPIs**），并定期审查它们的相关性。
- en: Establish a culture of performance awareness among your teams.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的团队中建立性能意识文化。
- en: Implement a comprehensive approach to instrumentation to ensure that everything
    that can be monitored is.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施全面的仪器化方法，确保可以监控到所有内容。
- en: Integrate APM tools with your DevOps processes.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将APM工具集成到您的DevOps流程中。
- en: Prioritize monitoring your most critical metrics such as error rates, response
    times, resource use, and so on.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优先监控您最关键的指标，如错误率、响应时间、资源使用等。
- en: Configure your APM tool to provide you with alerts and notifications for greater
    efficiency.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置您的APM工具，以便为您提供警报和通知，以提高效率。
- en: Following the best practices presented here can help you maximize the benefits
    of using APM tools.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循这里提出的最佳实践可以帮助您最大化使用APM工具的益处。
- en: Code reviews
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码审查
- en: Code reviews are a fundamental component of software development. As we previously
    suggested, code quality does not remain constant after it goes live. Environments
    change, new data is introduced, scaling can occur, and user behavior can change.
    This underscores the importance of conducting code reviews.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 代码审查是软件开发的基本组成部分。正如我们之前建议的，代码质量在上线后不会保持不变。环境会变化，新的数据会被引入，可能会发生扩展，用户行为也可能发生变化。这强调了进行代码审查的重要性。
- en: 'The purposes of code reviews are listed here:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 代码审查的目的如下：
- en: Ensuring consistency in adherence to standards and guidelines
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保遵守标准和指南的一致性
- en: Encouraging collaboration
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鼓励协作
- en: Facilitating knowledge transfer among teams and increasing individual buy-in
    to code quality
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 促进团队之间的知识转移，并增加个人对代码质量的承诺
- en: Increasing optimization
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提高优化
- en: Identifying defects and security vulnerabilities with quality assurance
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用质量保证识别缺陷和安全漏洞
- en: Next, let’s review some best practices when conducting code reviews.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们回顾一下进行代码审查时的最佳实践。
- en: Best practices
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最佳实践
- en: 'Here are some self-descriptive best practices to consider when conducting code
    reviews:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行代码审查时，以下是一些自我描述性的最佳实践供您考虑：
- en: Automate where possible
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽可能实现自动化
- en: Encourage constructive feedback
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鼓励建设性的反馈
- en: Establish coding standards
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建立编码标准
- en: Limit the size of code changes
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制代码更改的大小
- en: Prioritize critical code sections
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优先处理关键代码部分
- en: Set code review time limits
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设定代码审查时间限制
- en: Use checklists for reviewer consistency
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用清单以确保审阅者的统一性
- en: 'The first best practice suggests that you automate where possible. There are
    automated code review tools worth your independent research and analysis. Here
    is a list of these to review:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 第一项最佳实践建议您尽可能实现自动化。有一些自动代码审查工具值得您独立研究和分析。以下是一些供您审查的列表：
- en: '**Checkstyle**'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Checkstyle**'
- en: '**Code Climate**'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Code Climate**'
- en: '**FindBugs** and its successor, **SpotBugs**'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**FindBugs**及其继任者**SpotBugs**'
- en: '**PMD**'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PMD**'
- en: '**SonarQube**'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SonarQube**'
- en: Take your time reviewing the automation tools. Once you have selected the one
    you like best, experiment with it before officially adopting it for live projects.
    Next, let’s look at peer review processes.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细审查自动化工具。一旦您选择了最喜欢的一个，在正式将其用于实际项目之前，先对其进行实验。接下来，让我们看看同行评审流程。
- en: Peer review processes
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 同行评审流程
- en: 'Code review is often done by peers and it can be awkward if not approached
    properly. Here are some tips for conducting proper and efficient peer reviews:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 代码审查通常由同行进行，如果不正确处理，可能会显得尴尬。以下是一些进行正确和高效同行评审的建议：
- en: Assign reviewers who have the appropriate expertise and experience
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指派具有适当专业知识和经验的审阅者
- en: Rotate reviewers to mitigate complacency
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轮换审阅者以减轻懈怠
- en: Prepare for reviews by mandating in-code commenting standards
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过强制在代码中添加注释标准来为审查做准备
- en: Use code review tools (such as GitHub pull requests) to streamline the process
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用代码审查工具（如GitHub拉取请求）来简化流程
- en: Encourage an atmosphere of mutual respect and open communication
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鼓励相互尊重和开放沟通的氛围
- en: Follow up on all feedback
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟进所有反馈
- en: Following these tips can ease the awkwardness and improve the efficiency of
    peer reviews. Next, let’s look at some common pitfalls regarding code reviews.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循这些提示可以减轻尴尬并提高同行审查的效率。接下来，让我们看看一些关于代码审查的常见陷阱。
- en: Common pitfalls
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见陷阱
- en: There are several pitfalls when conducting code reviews, although they are overshadowed
    by the benefits we get from the process. This section examines the top five pitfalls
    experienced when conducting code reviews and suggests solutions.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行代码审查时存在几个陷阱，尽管这些陷阱被我们从过程中获得的益处所掩盖。本节将探讨进行代码审查时遇到的前五大陷阱，并提出解决方案。
- en: '| **Pitfall** | **Solution** |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| **陷阱** | **解决方案** |'
- en: '| Delayed reviews | Set clear timelines and integrate them into your development
    workflow. |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| 延迟审查 | 设定清晰的截止时间并将它们整合到你的开发工作流程中。|'
- en: '| Inconsistent standards | Establish clear guidelines and use checklists. |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| 标准不统一 | 建立明确的指南并使用清单。|'
- en: '| Lack of constructive feedback | Focus on providing constructive feedback.
    Be specific and ensure that feedback is actionable. |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| 缺乏建设性反馈 | 专注于提供建设性反馈。要具体，并确保反馈是可操作的。|'
- en: '| Neglecting automation tools | Use automation tools to your advantage. They
    can catch routine issues while your developers review more complex issues. |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| 忽视自动化工具 | 利用自动化工具的优势。它们可以在你的开发者审查更复杂问题时捕捉到常规问题。|'
- en: '| Overly long reviews | Keep reviews short and frequent. |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| 审查时间过长 | 保持审查简短且频繁。|'
- en: 'Table 16.2: Common code review pitfalls with solutions'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 表16.2：常见的代码审查陷阱及解决方案
- en: An understanding of these pitfalls can help ensure that your code reviews are
    seamlessly integrated into your workflows.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 了解这些陷阱可以帮助确保你的代码审查无缝集成到你的工作流程中。
- en: In the next section, we will review logging.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将审查日志。
- en: Logging
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日志
- en: Logging data is a fundamental component of code monitoring and maintenance.
    This data can reveal information about how our code performs, where it is failing,
    what security concerns there might be, and more. It involves recording information
    about how our program runs. We can use this information for audits, debugging,
    and monitoring.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 日志数据是代码监控和维护的基本组成部分。这些数据可以揭示有关我们的代码性能、失败的地方、可能存在的安全担忧等方面的信息。它涉及记录程序运行的信息。我们可以使用这些信息进行审计、调试和监控。
- en: 'The key aspects of logging include the following:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 日志的关键方面包括以下内容：
- en: '`DEBUG`, `ERROR`, and `INFO`.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DEBUG`、`ERROR`和`INFO`。'
- en: '**Log messages**: These are the narrative descriptions of application events.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志消息**：这是应用程序事件的叙述性描述。'
- en: '**Log rotation**: We rotate logs by archiving old logs and starting new ones.
    This prevents singular, large logs that can be difficult to manage and result
    in storage issues.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志轮转**：我们通过存档旧日志并开始新的日志来轮转日志。这防止了难以管理的大型日志，并可能导致存储问题。'
- en: '**Log targets**: Targets are the storage destinations for the logs.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志目标**：目标是日志的存储目的地。'
- en: Now that we have a fundamental understanding of logging, let’s review some best
    practices.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对日志有了基本了解，让我们来回顾一些最佳实践。
- en: Best practices
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最佳实践
- en: 'Our logging implementations should be focused on the relevancy of what is captured
    and on the efficiency of the system. With those goals in mind, here are some best
    practices regarding logging:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的日志实现应专注于所捕获内容的相关性和系统的效率。考虑到这些目标，以下是关于日志的一些最佳实践：
- en: Adopt a concise but descriptive mentality for logs. You will want them to be
    clear and not overly verbose.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对日志采用简洁但描述性的心态。你希望它们清晰，而不是过于冗长。
- en: Centralize your logs to facilitate aggregated and comprehensive processing.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将日志集中化以方便聚合和综合处理。
- en: Consider using a structured logging format such as JSON so they are easier to
    parse and analyze.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑使用结构化日志格式，如JSON，以便更容易解析和分析。
- en: Focus on log levels that are aligned with your systems’ most critical processes.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 专注于与你的系统最关键流程相一致的日志级别。
- en: Formalize your logging practices to include formats and naming conventions.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将你的日志实践规范化，包括格式和命名约定。
- en: Protect individually identifiable or other sensitive data from being included
    in logs.
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保护个人可识别信息或其他敏感数据不被包含在日志中。
- en: Review your logs regularly.
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定期审查你的日志。
- en: Next, we will review useful logging frameworks.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将审查有用的日志框架。
- en: Logging frameworks
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日志框架
- en: 'There are several logging frameworks that we can use for our Java applications.
    Developers typically select one after reviewing their options. Here is a list
    of some of the more popular frameworks:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用几个日志框架来为我们的Java应用程序服务。开发者通常在审查了他们的选项后选择一个。以下是一些更受欢迎的框架列表：
- en: '`java.util.logging`). While it only provides basic logging capabilities, we
    can use it without the need for additional libraries. It is a good framework to
    use if you are just getting started with logging.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java.util.logging`）。虽然它只提供基本的日志功能，但我们可以在不需要额外库的情况下使用它。如果您刚开始使用日志，这是一个很好的框架。'
- en: '**Log4j2**: This is an advanced framework that supports various configurations,
    log levels, types, and destinations.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Log4j2**：这是一个支持各种配置、日志级别、类型和目的地的先进框架。'
- en: '**Logback**: This framework provides a high-performance option compatible with
    **Simple Logging Facade for** **Java** (**SLF4J**).'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Logback**：这个框架提供了一个与**Java**的**Simple Logging Facade**（SLF4J）兼容的高性能选项。'
- en: '**SLF4J**: This framework provides an abstraction to support multiple logging
    frameworks such as Logback.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SLF4J**：这个框架提供了一个抽象层，以支持多个日志框架，如Logback。'
- en: '**Tinylog**: As the name suggests, this is a lightweight framework with low
    overhead. It is ideal for small applications.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Tinylog**：正如其名所示，这是一个轻量级框架，具有低开销。它非常适合小型应用程序。'
- en: These frameworks can help simplify our implementation and management of logging.
    Next, let’s look at key strategies for analyzing our logged data.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这些框架可以帮助简化我们的日志实现和管理。接下来，让我们看看分析我们日志数据的关键策略。
- en: Analyzing log data
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分析日志数据
- en: 'One of the primary reasons for logging systems data is to provide us with the
    ability to analyze it for the betterment of our system’s overall performance.
    Here are some strategies you can use for analyzing and managing your log data:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 日志系统数据的一个主要原因是提供给我们分析它的能力，以改善我们系统整体性能。以下是一些您可以用于分析和管理日志数据的策略：
- en: '**Aggregate**: Feed your logs into a central repository for more efficient
    analysis. There are several tools (such as **Logstash** and **Elasticsearch**)
    that can be used to help with this strategy.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**聚合**：将您的日志输入到一个中央存储库中，以便更有效地分析。有几个工具（如**Logstash**和**Elasticsearch**）可以帮助实现这一策略。'
- en: '**Analyze**: Use tools (such as **Datadog** and **Graylog**) to help analyze
    and visualize logged data. Use statistical analysis to gain deep insights.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分析**：使用工具（如**Datadog**和**Graylog**）来帮助分析和可视化日志数据。使用统计分析来获得深入见解。'
- en: '**Automate**: Use automated alerts to inform you of activity based on thresholds
    you set.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化**：使用基于您设置的阈值的自动警报来通知您活动情况。'
- en: '**Archive**: Archive logs to avoid log bloat.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存档**：存档日志以避免日志膨胀。'
- en: Following the best practices and leveraging selected frameworks and tools can
    help ensure your logging efforts are purposeful and efficient. Next, let’s look
    at how to set up monitoring and alerts.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循最佳实践并利用选定的框架和工具可以帮助确保您的日志工作是有目的和高效的。接下来，让我们看看如何设置监控和警报。
- en: Monitoring and alerting
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控和警报
- en: Our log data is always available when we want to review it, but more importantly,
    it can be used to provide us with automated alerts based on how we set things
    up. Effective monitoring and alerting are key operations for maintaining our Java
    applications and ensuring their high performance and security.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要回顾日志数据时，我们的日志数据总是可用的，但更重要的是，它可以基于我们如何设置来提供自动警报。有效的监控和警报是维护我们的Java应用程序并确保其高性能和安全性的关键操作。
- en: Monitoring and alerting can provide us with real-time insights into how our
    application is performing and promptly alert us to anything that requires immediate
    action.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 监控和警报可以帮助我们实时了解应用程序的性能，并及时提醒我们任何需要立即采取行动的问题。
- en: Monitoring system setup
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 监控系统设置
- en: 'The steps involved in setting up your monitoring system will depend on the
    frameworks and tools you select. Here is a six-step process that can be used irrespective
    of the frameworks and tools you select:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 设置监控系统的步骤将取决于您选择的框架和工具。以下是一个六步流程，无论您选择哪些框架和工具都可以使用：
- en: '**Identify key metrics**: You need to know what you want to collect so that
    what is collected is useful. Your critical metrics might include CPU usage, memory
    use, error rates, response times, and so on. Once you have identified your key
    metrics, you can establish performance goals.'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**识别关键指标**：您需要知道您想要收集什么，以便收集的内容是有用的。您的重要指标可能包括CPU使用率、内存使用、错误率、响应时间等。一旦您确定了关键指标，您就可以建立性能目标。'
- en: '**Select monitoring tools**: Select the monitoring tools (such as **Grafana**,
    **New Relic**, or **Prometheus**) that are the most appropriate for your application’s
    architecture and requirements.'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**选择监控工具**：选择最适合你的应用程序架构和要求的监控工具（例如**Grafana**、**New Relic**或**Prometheus**）。'
- en: '**Integrate monitoring agents**: Integrate monitoring agents into your Java
    application to collect performance data. Depending on your solution, you might
    add specific monitoring code, leverage built-in capabilities of existing frameworks,
    or use APIs.'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**集成监控代理**：将监控代理集成到你的Java应用程序中以收集性能数据。根据你的解决方案，你可能需要添加特定的监控代码，利用现有框架的内置功能，或者使用API。'
- en: '**Set up data collection**: Configure your monitoring system to collect and
    store performance data. Be mindful and ensure that the data collection operation
    is efficient and does not result in significant application overhead.'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**设置数据收集**：配置你的监控系统以收集和存储性能数据。要谨慎，并确保数据收集操作高效，不会导致显著的应用程序开销。'
- en: '**Visualize**: Create or use dashboards provided by your monitoring tools to
    visually represent the collected data. You can use tools such as Grafana to build
    interactive dashboards that can help you quickly understand your application’s
    performance status.'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**可视化**：创建或使用由你的监控工具提供的仪表板来直观地表示收集到的数据。你可以使用Grafana等工具构建交互式仪表板，这有助于你快速了解应用程序的性能状态。'
- en: '**Review and adjust**: Periodically review the effectiveness of your monitoring
    setup and make necessary adjustments. Reassess this each time you introduce a
    new component or service.'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**审查和调整**：定期审查你的监控设置的有效性，并做出必要的调整。每次引入新的组件或服务时，都要重新评估这一点。'
- en: Once your monitoring system has been set up, you will be ready to configure
    it to provide informative alerts.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的监控系统已经设置好，你就可以准备配置它以提供信息丰富的警报。
- en: Alert configuration
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 警报配置
- en: 'Configuring alerts involves setting thresholds and rules that trigger notifications
    when certain performance conditions are met. Follow these steps to set up an effective
    alert schema:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 配置警报涉及设置阈值和规则，当满足某些性能条件时触发通知。按照以下步骤设置有效的警报架构：
- en: '**Define criteria**: Identify the conditions that you want alerts for and be
    specific. For example, you might choose 92% CPU usage, increased response times,
    spikes in errors, and so on. You can base your thresholds on historical application
    data and performance benchmarks.'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**定义标准**：确定你想要警报的条件，并具体说明。例如，你可能会选择92%的CPU使用率、增加的响应时间、错误激增等。你可以根据历史应用程序数据和性能基准来设置你的阈值。'
- en: '**Set levels**: Categorize your alerts by severity (that is, **information**,
    **warning**, **critical**) so your team can prioritize their response efforts.'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**设置级别**：根据严重性（即**信息**、**警告**、**关键**）对警报进行分类，以便你的团队能够优先处理响应工作。'
- en: '**Configure channels**: Set up channels for alert notifications so your team
    is informed. You might simply use **SMS**, email, **Slack**, or **Discord**, or
    implement an incident management platform such as **PagerDuty**.'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**配置通道**：设置警报通知的通道，以便你的团队能够得到通知。你可能只需要使用**短信**、电子邮件、**Slack**或**Discord**，或者实施一个事故管理平台，如**PagerDuty**。'
- en: '**Fine-tune thresholds**: When setting up alerts, you want to avoid alert fatigue.
    This will require you to fine-tune your alert thresholds. Overwhelming your team
    with unnecessary alerts will negate the efficacy of your alert system.'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**微调阈值**：在设置警报时，你想要避免警报疲劳。这将需要你微调你的警报阈值。用不必要的警报淹没你的团队将抵消你的警报系统的有效性。'
- en: '**Test**: Regularly test your alert setup to ensure it works. You can even
    conduct drills to simulate performance situations to verify your system’s efficacy.'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**测试**：定期测试你的警报设置以确保其正常工作。你甚至可以进行演习来模拟性能情况，以验证你系统的有效性。'
- en: Once your alert system has been set up, you need to determine your response
    approach.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的警报系统已经设置好，你需要确定你的响应方法。
- en: Alert and incident response
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 警报和事故响应
- en: 'It is important to establish a formal approach to incident response. When establishing
    your alert response schema, consider the following questions:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 建立正式的事故响应方法很重要。在建立你的警报响应架构时，考虑以下问题：
- en: Which alerts warrant a response?
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哪些警报需要响应？
- en: Who responds to which alerts?
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谁响应哪些警报？
- en: What internal communication is necessary?
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要哪些内部沟通？
- en: What external communication is required?
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要哪些外部沟通？
- en: What follow-up actions are necessary?
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要哪些后续操作？
- en: A structured approach to responding to alerts and incidents can help ensure
    that critical issues are appropriately addressed. This can lead to rapid resolution
    and minimum downtime.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 采用结构化的方法来应对警报和事件，可以帮助确保关键问题得到适当的处理。这可以导致快速解决和最小化停机时间。
- en: 'Key components of an effective alert and incident response approach include
    the following:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 有效的警报和事件响应方法的关键组成部分包括以下内容：
- en: '**Alert acknowledgment**: When an alert is received, acknowledge it promptly.
    You may establish maximum response times for your team to follow.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**警报确认**：收到警报时，应立即确认。您可以为您团队设定最大响应时间。'
- en: '**Assessment**: Investigate each alert to understand the root causes. The goal
    is not only to fix a current issue but also to prevent the issue from repeating
    in the future.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**评估**：调查每个警报以了解根本原因。目标是不仅解决当前问题，还要防止问题在未来重复发生。'
- en: '**Execution of plans**: Ensure that your team follows predefined incident response
    plans through issue resolution. These plans should consist of documented step-by-step
    procedures for common issues and complex problems.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**计划的执行**：确保您的团队在问题解决过程中遵循预定义的事件响应计划。这些计划应包括针对常见问题和复杂问题的文档化步骤。'
- en: '**Communication**: Keep internal and external stakeholders informed about the
    incident status and resolution progress using predefined communication channels.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**沟通**：使用预定义的沟通渠道，让内部和外部利益相关者了解事件状态和解决进度。'
- en: '**Documentation**: After resolving the incident, the root cause(s), resolution
    steps, and lessons learned should be documented. When appropriate, conduct a post-incident
    review with your team to identify improvement opportunities.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文档**：在解决事件后，应记录根本原因、解决步骤和经验教训。在适当的情况下，与您的团队进行事件后审查，以确定改进机会。'
- en: When we set up a robust and purposeful monitoring and alerting system, we significantly
    increase our ability to effectively maintain and improve the performance of our
    Java applications, even as they scale.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们设置了一个强大而有目的的监控和警报系统时，我们显著提高了维护和改进Java应用程序性能的能力，即使它们在扩展。
- en: Maintenance strategies
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 维护策略
- en: We need a strategy to maintain our application’s code that goes beyond simply
    responding to system alerts. When we take a purposeful approach to code maintenance,
    we can ensure the sustained reliability, availability, and performance of our
    Java applications.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个策略来维护我们的应用程序代码，这超出了仅仅响应系统警报的范围。当我们采取有目的的代码维护方法时，我们可以确保Java应用程序的持续可靠性、可用性和性能。
- en: The main concept is to maintain a balance between scheduled maintenance and
    reactive maintenance. The table that follows provides insights into each approach
    and includes their advantages and best practices.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 主要概念是在计划维护和反应性维护之间保持平衡。下表提供了每种方法的见解，包括它们的优点和最佳实践。
- en: '|  | **Scheduled maintenance** | **Reactive maintenance** |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '|  | **预定维护** | **反应性维护** |'
- en: '| --- | --- | --- |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| **Approach details** | A planned approach to update code on scheduled intervals
    | Addressing issues as they arise |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| **方法细节** | 计划在预定间隔更新代码 | 随时解决出现的问题 |'
- en: '| **Advantages** |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| **优点** |'
- en: Predictable downtimes
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可预测的停机时间
- en: Reduced risks of failures
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 降低故障风险
- en: Continual optimization
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续优化
- en: '|'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Immediate issue resolution
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 立即解决问题
- en: Requires fewer resources compared to the scheduled maintenance approach
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相比于预定维护方法，需要的资源更少
- en: '|'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| **Best practices** |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| **最佳实践** |'
- en: Establish and follow the maintenance schedule
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建立并遵循维护计划
- en: Test changes during maintenance windows
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在维护窗口期间测试变更
- en: Communicate the plan to internal and external stakeholders
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将计划传达给内部和外部利益相关者
- en: '|'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Implement robust monitoring and alerting systems
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施强大的监控和警报系统
- en: Create incident response plans
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建事件响应计划
- en: Create documentation to support troubleshooting
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建文档以支持故障排除
- en: '|'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 'Table 16.3: Comparison of scheduled maintenance and reactive maintenance approaches'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 表16.3：预定维护和反应性维护方法比较
- en: Once you have established your maintenance approach, you should consider documentation
    and knowledge management. Let’s look at that in the next section.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您已经建立了维护方法，您应该考虑文档化和知识管理。让我们在下一节中看看这一点。
- en: Documentation and knowledge management
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文档化和知识管理
- en: Effective documentation and knowledge management is undeniably vital for maintaining
    a healthy code base. It can also help ensure smooth transitions during maintenance
    activities.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 有效的文档和知识管理对于维护健康的代码库无疑是至关重要的。它还可以帮助确保维护活动期间平稳过渡。
- en: 'Documentation should be comprehensive, especially for large systems. Comprehensive
    documentation should consist of the following main components:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 文档应该是全面的，特别是对于大型系统。全面的文档应包括以下主要组件：
- en: API documentation
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API 文档
- en: Code documentation
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码文档
- en: Configuration documentation
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置文档
- en: It is also important to have a knowledge-sharing component, which can include
    internal wikis and training for new team members. As systems are updated, the
    knowledge-sharing artifacts should be updated to ensure that they remain relevant.
    How knowledge is shared is almost as important as what is shared. Collaboration
    tools such as **Teams**, **SharePoint**, **Confluence**, and **GitHub wikis**
    can be used to facilitate collaborative document and knowledge sharing.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，拥有一个知识共享组件也很重要，这可能包括内部维基和为新团队成员提供培训。随着系统的更新，知识共享工件应进行更新，以确保它们保持相关性。知识共享的方式几乎与共享的内容一样重要。可以使用**团队**、**SharePoint**、**Confluence**和**GitHub
    维基**等协作工具来促进协作文档和知识共享。
- en: Maintenance strategies often include **refactoring**, which we will review in
    the next section.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 维护策略通常包括**重构**，我们将在下一节中对其进行回顾。
- en: Refactoring strategies
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重构策略
- en: Refactoring is the process of repurposing existing code without changing its
    external behavior. The purpose of refactoring is to improve the code’s readability,
    maintainability, and performance.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 重构是重新利用现有代码而不改变其外部行为的过程。重构的目的是提高代码的可读性、可维护性和性能。
- en: We can identify the need for refactoring through **code smells**, which are
    signs of poorly designed code, duplicate code, and large or long classes and methods.
    Performance bottlenecks and complex logic are additional indicators that code
    should be refactored.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过**代码异味**来识别重构的需求，这些异味是设计不良的代码、重复代码、大型或长类和方法等迹象。性能瓶颈和复杂逻辑也是代码应该重构的额外指标。
- en: 'The following techniques can be used for refactoring your code:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 以下技术可用于重构您的代码：
- en: Break down large classes and methods into smaller, more manageable components.
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将大型类和方法分解为更小、更易于管理的组件。
- en: Rename classes, methods, and variables so they are meaningful and self-describing.
    This added code clarity improves overall readability and maintainability.
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重命名类、方法和变量，使它们具有意义且自我描述。这种增加的代码清晰度提高了整体的可读性和可维护性。
- en: Remove unused code.
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除未使用的代码。
- en: Simplify complex conditional logic into clearer, more readable constructs.
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将复杂的条件逻辑简化为更清晰、更易读的结构。
- en: When refactoring our code, we should strive to refactor in small, incremental
    steps. This will minimize the risks of introducing new bugs. We should always
    write **unit tests** (see [*Chapter 17*](B21942_17.xhtml#_idTextAnchor331), *Unit
    and Performance Testing*) before and after refactoring. This helps us ensure that
    the functionality remains unchanged. Lastly, we should use a version control system
    to track our changes and support code **rollback** if necessary.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 当重构我们的代码时，我们应该努力以小步骤、增量方式进行重构。这将最小化引入新错误的风险。我们应该在重构前后始终编写**单元测试**（见[*第17章*](B21942_17.xhtml#_idTextAnchor331)，*单元和性能测试*）。这有助于我们确保功能保持不变。最后，我们应该使用版本控制系统来跟踪我们的更改，并在必要时支持代码**回滚**。
- en: Sometimes we inherit systems and must maintain legacy code. That is covered
    in the next section.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我们继承系统并必须维护遗留代码。这将在下一节中介绍。
- en: Legacy code
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 遗留代码
- en: Legacy code refers to older code bases. They are typically difficult to maintain
    due to outdated practices, lack of documentation, or deprecated technologies (that
    is, systems coded with the **Common Business Oriented** **Language** (**COBOL**)).
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 遗留代码是指较老的代码库。由于过时的实践、缺乏文档或已弃用的技术（即使用**通用商业面向** **语言**（**COBOL**）编写的系统），它们通常难以维护。
- en: When inheriting a legacy code base, we should first conduct a thorough code
    review to identify problematic areas, outdated dependencies, and security vulnerabilities.
    Armed with knowledge from the code review, we can prioritize critical sections
    of the code that require immediate attention or pose significant risks or security
    vulnerabilities.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 当继承遗留代码库时，我们应首先进行全面代码审查，以识别问题区域、过时的依赖项和安全漏洞。凭借代码审查的知识，我们可以优先考虑代码中需要立即关注或存在重大风险或安全漏洞的关键部分。
- en: 'When feasible, we should adopt a modernization strategy for the legacy code.
    This could include the following components:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 当可行时，我们应该采用针对遗留代码的现代化策略。这可能包括以下组件：
- en: Implementing incremental updates
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施增量更新
- en: Using code wrappers for new features
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用代码包装器实现新功能
- en: Automating testing for changes
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化变更的测试
- en: Documenting legacy code and changes to it
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录遗留代码及其变更
- en: Implementing a backup schema
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施备份方案
- en: Using a version control system
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用版本控制系统
- en: Isolating legacy components from the rest of the system
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将遗留组件从系统其余部分隔离
- en: Training your developers on the legacy code and your maintenance plan
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对开发者进行遗留代码和维修计划的培训
- en: Implementing these maintenance strategies can help you ensure the ongoing stability
    and performance of your Java applications. The strategies are aimed at making
    the code easier to update, maintain, and scale over time.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 实施这些维护策略可以帮助你确保Java应用程序的持续稳定性和性能。这些策略旨在使代码更容易更新、维护和随时间扩展。
- en: Summary
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter explored the essential practices and tools for effective code monitoring
    and maintenance, focusing on ensuring long-term performance, reliability, security,
    and scalability. We began with an overview of APM tools, detailing their key features
    such as real-time monitoring, transaction tracing, error tracking, and user experience
    monitoring. Popular APM tools for Java were reviewed, along with best practices
    for their implementation and use.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 本章探讨了有效代码监控和维护的基本实践和工具，重点关注确保长期性能、可靠性、安全性和可扩展性。我们首先概述了APM工具，详细介绍了它们的关键功能，如实时监控、事务跟踪、错误跟踪和用户体验监控。我们回顾了Java中流行的APM工具，以及它们的实施和使用最佳实践。
- en: We emphasized the importance of code reviews for the goal of maintaining high-quality
    code. We covered best practices, detailed the peer review process, and shared
    common pitfalls, offering avoidance solutions.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 我们强调了代码审查对于保持高质量代码的重要性。我们涵盖了最佳实践，详细说明了同行评审流程，并分享了常见的陷阱，提供了避免解决方案。
- en: The concept of logging was examined, starting with the fundamentals, including
    log levels, messages, and targets. We outlined best practices for effective logging,
    such as using appropriate levels, avoiding sensitive information, and centralizing
    logs. We also introduced popular logging frameworks for Java and discussed techniques
    for analyzing and managing log data.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 检查了日志的概念，从基础开始，包括日志级别、消息和目标。我们概述了有效日志记录的最佳实践，例如使用适当的级别、避免敏感信息以及集中日志。我们还介绍了Java中流行的日志框架，并讨论了分析和管理日志数据的技术。
- en: Monitoring and alerting were highlighted. We covered how to set up a comprehensive
    monitoring system, as well as alert configuration and incident response strategies.
    We concluded the chapter by covering maintenance strategies. We compared scheduled
    and reactive maintenance approaches, stressing the importance of proactive planning.
    We emphasized the role of documentation and knowledge management in maintaining
    healthy code bases. Finally, we explored effective refactoring strategies and
    provided guidance on how to deal with legacy code.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 强调了监控和警报。我们介绍了如何设置全面的监控系统，以及警报配置和事件响应策略。我们通过介绍维护策略来结束本章。我们比较了计划性和反应性维护方法，强调了主动规划的重要性。我们强调了文档和知识管理在维护健康代码库中的作用。最后，我们探讨了有效的重构策略，并提供了如何处理遗留代码的指导。
- en: In the next chapter, we will introduce strategies for creating and using unit
    and performance tests to help create and maintain high-performance Java applications.
    Specifically, we will look at unit testing, performance testing, and overarching
    strategies.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍创建和使用单元测试和性能测试的策略，以帮助创建和维护高性能的Java应用程序。具体来说，我们将探讨单元测试、性能测试和总体策略。
