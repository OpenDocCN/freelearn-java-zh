["```java\n@WebServlet(name = \"connexionServlet\", urlPatterns = {\"/connexionServlet\"})\npublic class ConnexionServlet extends HttpServlet {\n\n    Logger logger = Logger.getLogger(ConnexionServlet.class.getName());\n\n    protected void processRequest(HttpServletRequest request, HttpServletResponse response) {\n        response.setContentType(\"text/html;charset=UTF-8\");       \n        try (PrintWriter out = response.getWriter();){\n            out.println(\"<!DOCTYPE html>\");\n            out.println(\"<html>\");\n            out.println(\"<head>\");\n            out.println(\"<title>Online pre-registration site</title>\");            \n            out.println(\"</head>\");\n            out.println(\"<body>\");\n            out.write(\"        <form method=\\\"post\\\">\");\n            out.write(\"            <h4>Your name</h4>\");\n            out.write(\"            <input type=\\\"text\\\" name=\\\"param1\\\" />\");\n            out.write(\"            <h4>Your password</h4>\");\n            out.write(\"            <input type=\\\"password\\\" name=\\\"param2\\\" />\");\n            out.write(\"            <br/> <br/> <br/>\");\n            out.write(\"            <input type=\\\"submit\\\"  value=\\\"Sign it\\\"/>\");\n            out.write(\"            <input type=\\\"reset\\\" value=\\\"Reset\\\" />\");\n            out.write(\"        </form>\");\n            out.println(\"</body>\");\n            out.println(\"</html>\");\n\n            String name = request.getParameter(\"param1\");\n            String password = request.getParameter(\"param2\");\n\n            String location = request.getContextPath();\n\n            if(\"arnoldp\".equals(name) && \"123456\".equals(password)){\n                response.sendRedirect(location+\"/WelcomeServlet?name=\"+name);\n            }else if((name != null) && (password != null))\n                 response.sendRedirect(location+\"/ConnexionFailureServlet\"); \n\n        } catch(IOException ex){\n            logger.log(Level.SEVERE, null, ex);\n        }   \n    }\n\n    @Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        processRequest(request, response);\n    }\n\n    @Override\n    protected void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        processRequest(request, response);\n    }\n}\n```", "```java\nout.write(\"            <input type=\\\"submit\\\"  value=\\\"Sign it\\\"/>\");\n```", "```java\npublic class TraditionnalIOProcessing extends HttpServlet {\n\n    Logger logger = Logger.getLogger(TraditionnalIOProcessing.class.getName());\n\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) {\n        try (ServletInputStream input = request.getInputStream();\n                FileOutputStream outputStream = new FileOutputStream(\"MyFile\");) {\n\n            byte b[] = new byte[3072];\n            int data = input.read(b);\n\n            while (data != -1) {\n                outputStream.write(b);\n                data = input.read(b);\n            }\n        } catch (IOException ex) {\n            logger.log(Level.SEVERE, null, ex);\n        }\n    }\n}\n```", "```java\nprotected void doGet(HttpServletRequest request, HttpServletResponse response) {\n    try (ServletInputStream input = request.getInputStream();\n            FileOutputStream outputStream = new FileOutputStream(\"MyFile\");) {\n       AsyncContext context = request.startAsync();\n       input.setReadListener(new ReadListenerImpl(context, input,outputStream));\n    }catch (IOException ex) {\n       logger.log(Level.SEVERE, null, ex);\n    }\n}\n```", "```java\npublic class ReadListenerImpl implements ReadListener {\n\n    AsyncContext context;\n    ServletInputStream input;\n    FileOutputStream outputStream;\n\n    public ReadListenerImpl(AsyncContext c, ServletInputStream i, FileOutputStream f) {\n        this.context = c;\n        this.input = i;\n        outputStream = f;\n    }\n\n    @Override\n    public void onDataAvailable() throws IOException {\n        byte b[] = new byte[3072];\n        int data = input.read(b);\n        while (input.isReady() && data != -1) {\n            outputStream.write(b);\n            data = input.read(b);\n        }\n    }\n\n    @Override\n    public void onAllDataRead() throws IOException {\n        System.out.println(\"onAllDataRead\");\n    }\n\n    @Override\n    public void onError(Throwable t) {\n        System.out.println(\"onError : \" + t.getMessage());\n    }\n}\n```", "```java\nprotected void processRequest(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/html;charset=UTF-8\");        \n    try (PrintWriter out = response.getWriter();){\n            System.out.println(\"protocol : \"+request.getHeader(\"Upgrade\"));\n        if (\"CYPHER\".equals(request.getHeader(\"Upgrade\"))) {\n            response.setStatus(101);\n            response.setHeader(\"Upgrade\", \"CYPHER\");\n            response.setHeader(\"Connection\", \"Upgrade\");\n            CypherUpgradeHandler cHandler = request.upgrade(CypherUpgradeHandler.class);                \n        } else {\n            out.println(\"The \"+request.getHeader(\"Upgrade\")+\" protocol is not supported\");\n        }\n    } \n}\n```", "```java\npublic class CypherUpgradeHandler implements HttpUpgradeHandler{\n\n    Logger logger = Logger.getLogger(CypherUpgradeHandler.class.getName());\n    public void init(WebConnection wc) {\n        ServletInputStream input = null;\n        ServletOutputStream output = null;\n        try {\n            System.out.println(\"A client just logged in\");\n            input = wc.getInputStream();\n            // use input stream\n            output = wc.getOutputStream();\n            //use output stream\n        } catch (IOException ex) {\n            logger.log(Level.SEVERE, null, ex);\n        }        \n    }\n\n    public void destroy() {\n         System.out.println(\"A client just logged out\");\n    }    \n}\n```", "```java\n<h:form>             \n   <h:outputText \n     id=\"beanProperty\" \n     value=\"Bean property value : #{studentBean.identity}\" />\n  <br/>\n  <h:outputText \n       id=\"operator\" \n       value=\"operator : 3 + 12 = #{3 + 12}\"  />\n</h:form>\n```", "```java\nELProcessor el = new ELProcessor();\n\n//Simple EL evaluation\n out.println(\"<h1>'Welcome to the site!' : \"\n             + \"\" + el.eval(\"'Welcome to the site!'\") + \"</h1>\");\n//Definition of local repository bean\nel.defineBean(\"student\", new StudentBean());\n//Direct evaluation of EL expression \nout.println(\"<h1>\" + el.eval(\"'The id of : '+=student.lastName+=' \"\n             + \"is : '+=student.identity\") + \"</h1>\");\n//Function definition\nel.defineFunction(\"doub\", \"hex\", \"java.lang.Double\",\"toHexString\");\n//Access to a function defined\nout.println(\"<h1> The hexadecimal of 29 is : \"\n              + el.eval(\"doub:hex(29)\") + \"</h1>\");\n```", "```java\n    SetCollectionObject = '{'elements '}'\n    ```", "```java\n    ListCollectionObject = '['elements']'\n    ```", "```java\n    MapCollectionObject = '{' MapElements '}'\n    ```", "```java\npublic class ELTestMain {\n    static ELProcessor el = new ELProcessor();\n\n    public static void main(String[] args) {\n        List l = new ArrayList();\n        l.add(1); l.add(8); l.add(7); l.add(14); l.add(2);\n        el.defineBean(\"list\", l);\n\n        out.println(\"Evaluation of \" + l + \" is : \" + el.eval(\"list\"));\n        out.println(\"The ordering of: \" + l + \" is : \" \n                 + el.eval(\"list.stream().sorted().toList()\"));\n        out.println(\"List of number < 7 : \" \n                 + el.eval(\"list.stream().filter(s->s < 7).toList()\"));\n        out.println(\"The sum of : \" + l + \" is : \" \n                + el.eval(\"list.stream().sum()\"));\n    }\n}\n```", "```java\nELProcessor el = new ELProcessor();\n//static variable access\nout.println(\"<h1> The value of Integer.MIN_VALUE : \" \n                 + el.eval(\"Integer.MIN_VALUE\") + \"</h1>\");\n//static method access\nout.println(\"<h1> The value of Integer.parseInt('2') : \" \n                + el.eval(\"Integer.parseInt('2')\") + \"</h1>\");\n```", "```java\n<?xml version='1.0' encoding='UTF-8' ?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \n    \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html \n\n      >\n    <h:head>\n        <title>Online pre-registration site</title>\n    </h:head>\n    <h:body>\n        <f:view>            \n            <h:form >                \n                <dir align=\"center\" >\n                    <h:panelGrid columns=\"2\" style=\"border: solid blue\">\n                        <h:outputText value=\"First name  : \" />\n                        <h:inputText value=\"#{studentBean.firstName}\" />\n                        <h:outputText value=\"Last name : \" />\n                        <h:inputSecret value=\"#{studentBean.lastName}\" />\n                        <h:outputText value=\"Birth date: \" />\n                        <h:inputSecret value=\"#{studentBean.birthDate}\" />\n                        <h:outputText value=\"Birth place : \" />\n                        <h:inputSecret value=\"#{studentBean.birthPlace}\" />\n                        <h:outputText value=\"Nationality : \" />\n                        <h:selectOneMenu value=\"#{studentBean.nationality}\">\n                            <f:selectItems value=\"#{studentBean.nationalities}\" />\n                        </h:selectOneMenu>\n                        <h:outputText value=\"Gender : \" />\n                        <h:selectOneRadio value=\"#{studentBean.gender}\">\n                            <f:selectItem itemValue=\"M\" itemLabel=\"Male\" />\n                            <f:selectItem itemValue=\"F\" itemLabel=\"Female\" />                           \n                        </h:selectOneRadio>\n                        <h:outputText value=\"Language : \" />\n                        <h:selectOneMenu value=\"#{studentBean.language}\">\n                            <f:selectItems value=\"#{studentBean.languages}\" />\n                        </h:selectOneMenu>\n                        <dir align=\"right\">\n                            <h:panelGroup>\n                                <h:commandButton value=\"Validate\" \n                                                 action=\"#{studentBean.onclickValidateListener}\" />\n                                <h:commandButton value=\"Cancel\" \n                                                 actionListener=\"#{studentBean.onclickCancelListener}\"  />\n                            </h:panelGroup> \n                        </dir>\n                    </h:panelGrid>\n                </dir>  \n            </h:form>\n        </f:view>\n    </h:body>\n</html>\n```", "```java` By nesting the `<f:passThroughAttributes>` tag within a `UIComponent` tag for an EL value that is evaluated to `Map<String, Object>` (see `Pass through attributes 3` in the code that follows)  ```", "```java ```", "```java\n<!-- namespace -->\n<html ...\n      \">\n\n<h:form>\n    <!-- Pass through element -->\n    <input type=\"submit\" value=\"myButton\" \n     pte:actionListener=\"#{html5Bean.submitListener}\"/>\n</h:form>\n```", "```java\nsrc/main/webapp\n    WEB-INF/\n    contracts/\n        template1/\n            header.xhtml\n            footer.xhtml\n            style.css\n            logo.png\n            scripts.js\n        template2/\n            header.xhtml\n            footer.xhtml\n            style.css\n            logo.png\n            scripts.js\n        Template3/\n            header.xhtml\n            footer.xhtml\n            style.css\n            logo.png\n            scripts.js\n\n    index.xhtml\n    ...\n```", "```java\n<resource-library-contracts>\n    <contract-mapping>\n        <url-pattern>/templatepages/*</url-pattern>\n        <contracts>template1</contracts>\n    </contract-mapping>\n    <contract-mapping>\n        <url-pattern>*</url-pattern>\n        <contracts>template2</contracts>\n    </contract-mapping>\n</resource-library-contracts>\n```", "```java\n<?xml version='1.0' encoding='UTF-8' ?>\n<!DOCTYPE html>\n<html \n\n      >\n    <h:head>\n        <title>Resource Library Contracts</title>\n    </h:head>\n    <h:body>\n     <ui:insert name=\"header\" >\n       <img src=\"img/image.jpg\" width=\"400\" height=\"50\" alt=\"Header image\"/>                                               \n     </ui:insert>\n    </h:body>\n</html>\n```", "```java\n<f:view>\n    <h:form>               \n        <h:panelGrid border=\"1\" columns=\"3\" >        \n            <f:facet name=\"header\">\n                <ui:composition template=\"/header.xhtml\">\n\n                </ui:composition>\n            </f:facet>            \n            <f:facet name=\"footer\">\n                <ui:composition template=\"/footer.xhtml\">\n\n                </ui:composition>\n            </f:facet>\n        </h:panelGrid> \n    </h:form>\n</f:view> \n```", "```java\nwebapp\n  WEB-INF\n  inscriptionFlow\n      inscriptionFlow-flow.xml  \n  inscriptionFlow.xhtml\n  inscriptionFlow1.xhtml\n  inscriptionFlow2.xhtml\n  inscriptionFlow3.xhtml\n  inscriptionFlow4.xhtml\n  inscriptionFlow5.xhtml\n  ...\n   index.xhtml \n```", "```java\n<?xml version='1.0' encoding='UTF-8'?>\n<faces-config version=\"2.2\"\n\n    xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee \nhttp://xmlns.jcp.org/xml/ns/javaee/web-facesconfig_2_2.xsd\">\n\n    <flow-definition id=\"inscriptionFlow\">\n        <flow-return id=\"inscriptionFlowExit\">\n            <from-outcome>#{inscriptionFlowBean.exitValue}</from-outcome>          \n        </flow-return>        \n    </flow-definition>\n</faces-config> \n```", "```java\n<!-- inscriptionFlow1 view -->\n<f:view>\n<h:form>\n   <h1>Identification information</h1>\n   <p>Name : <h:inputText id=\"name\" \n           value=\"#{inscriptionFlowBean.name}\" /></p>\n\n  <p><h:commandButton value=\"Next\" action=\"inscriptionFlow2\" /></p>\n  <p><h:commandButton value=\"Back\" action=\"inscriptionFlow\" /></p>\n</h:form>\n</f:view>\n```", "```java\n@Named\n@FlowScoped(value=\"inscriptionFlow\")\npublic class InscriptionFlowBean {\n    //...\n}\nIf all settings have been made, you can call your inscriptionFlow  in the start page with a button as follows:\n<h:commandButton id=\"start\" value=\"Registration\" \n                              action=\"inscriptionFlow\">\n   <f:attribute name=\"toFlowDocumentId\" value=\"\"/>\n</h:commandButton>\n```", "```java\n<h:head>\n    <title>Facelet Title</title>\n</h:head>\n<h:body>\n    <f:view transient=\"true\">\n        <h:form>\n            Hello from Facelets\n        </h:form>\n    </f:view>\n</h:body>\n```"]