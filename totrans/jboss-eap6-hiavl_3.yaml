- en: Chapter 3. Setting Up a JBoss EAP6 Cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we have learned how to use the management console to
    deploy projects into JBoss EAP6 in both the standalone mode and domain mode. We
    also saw that the domain mode has helped us a lot when we needed to manage multiple
    servers. It achieved this goal by centralizing the management task into a domain
    controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'The domain mode provided by EAP6 is a good support to help us set up our cluster,
    but it''s still not the cluster itself. As we have seen in [Chapter 2](ch02.html
    "Chapter 2. Using JBoss EAP6"), *Using JBoss EAP6*, though servers are managed
    in a server group, they do not form a cluster. For the servers to form a cluster,
    we need to perform the following two tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the EAP6 servers properly to make sure the components related with
    clustering are all running in correct status
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a load balancer so that user requests can be dispatched to the different
    EAP6 servers contained in the cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we'll focus on the first task.
  prefs: []
  type: TYPE_NORMAL
- en: Designing a cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we have seen that EAP6 has provided two server groups
    in `domain.xml`. One is called **main-server-group** and the other is called **other-server-group**.
    In this chapter, we'll use the other-server-group to set the cluster, because
    it's using the `full-ha` profile, and this profile contains all the components
    we'll use to set up the cluster.
  prefs: []
  type: TYPE_NORMAL
- en: With a cluster, we can distribute the request load to multiple servers. With
    the EAP6 domain management function, we can deploy a project into multiple EAP6
    servers in the management console of the domain controller.
  prefs: []
  type: TYPE_NORMAL
- en: We will use three machines to set up a cluster in this book. Two of them will
    be used to run the EAP6 servers, and one of them will be used to run the load
    balancer. In this chapter, we will use two machines to run the EAP6 servers.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can also use virtualization to have all of them running in a single physical
    box. Just make sure they have independent IP addresses that can communicate with
    one another, and the firewalls are turned off.
  prefs: []
  type: TYPE_NORMAL
- en: 'The deployment process is shown in following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Designing a cluster](img/2432_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In this chapter, we''ll use two machines and install EAP6 on both of them,
    and we''ll talk about the load balancer in the next chapter. The deployment diagram
    of two EAP6 servers is shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Designing a cluster](img/2432_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The two machines are called **master** and **slave**. I have put the IP addresses
    of these two servers into the diagram for your reference. These addresses are
    used in my local environment. In the diagram, the EAP6 server on **master** will
    be configured as a domain controller, and the EAP6 server running on **slave**
    will accept the management of **master**.
  prefs: []
  type: TYPE_NORMAL
- en: In `domain/configuration/host.xml`, EAP6 has provided us with a default server
    that belongs to other-server-group. We'll rename this server on **master** as
    `master-server`, and rename the one on **slave** as `slave-server`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the EAP6 domain mode, each server instance is running in its own JVM process.
    The following are the processes that will be running on **master**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following are the processes that will be running on **slave**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The host controller running on **master** will act as the domain controller;
    the host controller running on **slave** will accept the management from the domain
    controller. In addition, both master-server and slave-server belong to other-server-group.
    When we deploy a project into other-server-group, the project will be deployed
    to both the servers, because they belong to the same server group, even though
    they are running on different machines and with different JVMs.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a server group
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section we''ll start doing some configurations in EAP6\. As we know,
    there are two server groups already set up for us in JBoss EAP6:'
  prefs: []
  type: TYPE_NORMAL
- en: main-server-group
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: other-server-group
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And in [Chapter 2](ch02.html "Chapter 2. Using JBoss EAP6"), *Using JBoss EAP6*,
    we have played with main-server-group. In this chapter we'll use other-server-group.
  prefs: []
  type: TYPE_NORMAL
- en: The main-server-group versus other-server-group
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The major difference is that they are using two different profiles. You can
    see this in `domain.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As shown in the preceding configuration, we don't define different profiles
    into different configuration files in the domain mode. Instead it's defined in
    different profile sections in `domain` `.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: Server configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now let's start configuring our server group. Because we need to configure two
    EAP6 instances on two different machines, let's go through them one by one. Let's
    start with **master**.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up master
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The EAP6 on **master** will be used as a domain controller. Let's start configuring
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring host.xml
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The first thing we should do is set the host name in `domain/configuration/host.xml`.
    Let''s set the hostname to `master`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then let''s set the server group and server. Because we don''t need to use
    main-server-group and its servers in this chapter, it''s better to turn them off
    to save some system resources. Open `host.xml` and set the `auto-start` option
    of **server-one** and **server-two** to `false`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The next time we start the EAP6 in the domain mode, these two servers won''t
    start. Then let''s rename `server-three` as `master-server` and set its `auto-start`
    to `true`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Please note that the port offset of `master-server` is `250`, and we'll use
    it to calculate the serving ports of `master-server`. The next thing we should
    do is to change the binding addresses of multiple sockets to public IP addresses.
    Because we'll use two EAP6 servers on two different machines to form a server
    group, we need to bind sockets to proper addresses to make sure they can communicate
    with each other.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Please note that the **slave** server will connect to the master's management
    interface to accept its management, so it should also be bound to public address
    as shown in the previous code snippet. We'll cover **slave** configuration in
    later sections.
  prefs: []
  type: TYPE_NORMAL
- en: The public address here means the IP address other than the loopback address.
    It should be an internal IP address only accessible from LAN. In a real-world
    scenario, the management interface won't be public. They would use only an internal
    network because of security reasons. So we usually put all the EAP6 servers in
    a LAN, and only open the load balancer to the public, and let it proxy user requests
    to the internal network. We'll discuss this in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a user account for slave server
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The two servers (master-server and slave-server) will be managed by the domain,
    and we need to use host controllers to connect to the domain. The communication
    between the two host controllers needs to be authenticated. If slave-server wants
    to connect to the domain controller, we need to set up a user account for the
    connection, which is enforced by the security requirement of JBoss EAP6.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll use `add-user.sh` in the `bin` directory to create a user for slave.
    The process is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a user account for slave server](img/2432_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following is the summary of the user we''ve created:'
  prefs: []
  type: TYPE_NORMAL
- en: The type of user is **Management User**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The user name is **slave**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The user password is set to **@packt000**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The user belongs to **ManagementRealm**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Is this new user going to be used for one AS process to connect to another
    AS process** is set to **yes**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The last point is important; we have set this user to be used for the AS process
    connection, and a secret value is generated for this user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the secret value that we''ll need for `slave-server` to connect to
    `master-server`. We need to enter this secret value into **slave** EAP6\. Another
    important thing is that the username here must be the same as the `name` attribute
    in `host.xml` of **slave** EAP6\. If you don''t follow this rule, you will receive
    the following error message when you try to start EAP6 on **slave**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: So this rule is enforced by EAP6.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up HornetQ
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'There is one more step to configure the **master** server. Open `domain.xml`
    and find the security setting of **HornetQ**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Both the `full-ha` and `full` profiles in `domain.xml` contains the settings
    of `hornetq-server`. Please make sure you are editing the configuration under
    the `full-ha` profile.
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the preceding setting to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'If you feel this is not very useful, you can also disable it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We won't cover the topics of HornetQ in this book. We just configure it properly
    to make sure the EAP6 server could start correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up slave
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now let's configure EAP6 on **slave**. Because it will accept the management
    from **master** EAP6, `domain.xml` on this server becomes useless. We just need
    to configure `host.xml`. Now let's have a look at it.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring host.xml
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Similar to the configuration on **master** EAP6, we first need to configure
    the name of the host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'As noted in the *Configuring host.xml* section of *Setting up a master*, the
    name here must be the same as the username of the account we have added in **master**
    EAP6\. Then we need to assign the secret value to `ManagementRealm`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Then host controller of **slave** will use this secret value for authentication.
    The next step is to set up `domain-controller`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: As shown before, the **slave** EAP6 will connect to the **master** EAP6 and
    use it as the domain controller.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember that `10.0.1.13` is the IP address of **master**, while `10.0.1.19`
    is the address of **slave**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to bind the interfaces of **slave** EAP6 to proper IP addresses
    so that the **master** EAP6 can communicate with it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Please note that we didn't change the binding for the `management` interface.
    Because the domain controller will undertake the management work, the local management
    on **slave** won't be used. So let's just leave it unchanged.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next we also turn off `server-one` and `server-two` to save some resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally let''s rename `server-three` as `slave-server` and set `auto-start`
    to `true`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: That's all we need to configure for slave EAP6.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring domain.xml on slave
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `domain.xml` on **slave** EAP6 is not used because the **master** EAP6 is
    acting as a domain controller and it will take the management tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the server group
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have properly set up the **master** and **slave** EAP6, it's time
    to run them for testing.
  prefs: []
  type: TYPE_NORMAL
- en: Running master
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First let''s run the following command on **master** EAP6:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'After the master server starts, let''s check the server output shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running master](img/2432_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot we can see that `master-server` has started. Then
    we can see that the management interface and admin console have also started.
    The log output is shown in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Running master](img/2432_03_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we can see that the multiple components related with cluster have started:'
  prefs: []
  type: TYPE_NORMAL
- en: The JGroups subsystem has started.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The AJP connector has started. Load balancers will use it for proxy requests.
    We'll cover this topic in the next chapter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The HTTP connector has started. Because the port offset for `master-server`
    is `250` and the HTTP port is bound to `8080`, 8080+250 = `8330`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mod_cluster` has started. We''ll learn about `mod_cluster` in [Chapter 5](ch05.html
    "Chapter 5. Load Balancing with mod_cluster"), *Load Balancing with mod_cluster*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The described process is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running master](img/2432_03_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Running slave
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now let''s start the **slave** server by using `domain.sh`. Its host controller
    will try to connect to the remote domain controller on **master**. After the **slave**
    server starts, we could check the console output from **master** EAP6 to confirm
    that the **slave** has been registered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Checking the server status
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now let's access the web manage console on **master** EAP6 at `http://master:9990`.
  prefs: []
  type: TYPE_NORMAL
- en: 'After logging in with the account `jbossadmin`, we can check the status of
    `master-server` and `slave-server`. Here is their status:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Checking the server status](img/2432_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As shown in the screenshots, both **master** and **slave** are shown in the
    management console. That means the domain controller is managing all the servers.
    Now let''s go to **slave** and try to access its management console. The result
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Checking the server status](img/2432_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can see that **slave** EAP6 is now under the management of the domain controller.
  prefs: []
  type: TYPE_NORMAL
- en: Project deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now let's deploy `cluster-demo1` into `other-server-group`.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying a project to other-server-group
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the previous chapter we already learned how to deploy a project into the
    server group, so I will briefly describe the process here:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the management console of **master** EAP6.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Manage Deployments** in the sidebar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Add** under the **Content Repository** tab and add **cluster-demo1.war**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow the instructions and save the deployment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Server Groups** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **View** of **other-server-group**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Assign** and select **cluster-demo1.war**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the deployment and click on **En/Disable** to start the **cluster-demo1.war**
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If everything goes fine, you should see the server output from both **master**
    and **slave**. The following is the output on master:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the output on **slave**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'With the help of the domain mode, the project is deployed into two servers
    that belong to the same group. Now we can verify that the project has been deployed
    to these two servers by using **cURL**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying a project to other-server-group](img/2432_03_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Clustering with the standalone mode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the preceding sections we saw that the domain mode provides us a central
    place to manage our servers. The question is, do we need to use the domain mode
    to build an EAP6 cluster? The answer is, not necessarily.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the standalone mode to build a cluster is perfectly fine. We just need
    to enable the relative subsystems that are needed for building the cluster. And
    EAP6 has provided us a set of configurations in the standalone mode. The `*-ha.xml`
    files contain the profiles for clustering. We can use them during the startup.
    The following is the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are some disadvantages of using the standalone mode in the clustering
    environment:'
  prefs: []
  type: TYPE_NORMAL
- en: We have to configure each EAP6 server separately
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is no centralized point to manage these servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'That means we must deploy the project to each EAP6 server separately, and make
    sure they are in sync during redeployment. In addition, if we run multiple standalone
    EAP6 servers on the same machine, we have to carefully set the offset for all
    the ports to prevent them from conflicting with one another. Apart from these
    disadvantages, there are some advantages of the standalone mode for clustering:'
  prefs: []
  type: TYPE_NORMAL
- en: You can configure each server independently. For example, we can turn off the
    HornetQ subsystem on server A, and enable it on servers B and C.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The server running in the standalone mode can be debugged easily. In the domain
    mode, EAP6 will spawn multiple processes: a process-controller process, a host-controller
    process, and multiple server processes (each server instance runs in its own JVM
    space), and it will add some difficulties for debugging.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we have looked at the configuration of the EAP6 cluster, and
    we have set up two EAP6 servers running in the domain mode to form a server group.
    Nevertheless, we haven''t finished all the work of building a cluster: Now we
    have two EAP6 servers running independently, and we still need a load balancer
    to dispatch user requests to these two servers. In the next chapter, let''s focus
    on setting up a load balancer.'
  prefs: []
  type: TYPE_NORMAL
