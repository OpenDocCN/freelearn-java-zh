["```java\npublic boolean equals(Object obj) {\n```", "```java\n    return (this == obj);\n```", "```java\n}\n```", "```java\n/**\n```", "```java\n* Whenever it is invoked on the same object more than once during\n```", "```java\n* an execution of a Java application, the hashCode method\n```", "```java\n* must consistently return the same integer...\n```", "```java\n* As far as is reasonably practical, the hashCode method defined\n```", "```java\n* by class Object returns distinct integers for distinct objects.\n```", "```java\n*/\n```", "```java\n@HotSpotIntrinsicCandidate\n```", "```java\npublic native int hashCode();\n```", "```java\npublic class Person {\n```", "```java\n  private int age;\n```", "```java\n  private String firstName, lastName;\n```", "```java\n  public Person(int age, String firstName, String lastName){\n```", "```java\n      this.age = age;\n```", "```java\n      this.lastName = lastName;\n```", "```java\n      this.firstName = firstName;\n```", "```java\n  }\n```", "```java\n  public int getAge() { return age; }\n```", "```java\n  public String getFirstName() { return firstName; }\n```", "```java\n  public String getLastName() { return lastName; }\n```", "```java\n}\n```", "```java\nPerson person1 = new Person(42, \"Nick\", \"Samoylov\");\n```", "```java\nPerson person2 = person1;\n```", "```java\nPerson person3 = new Person(42, \"Nick\", \"Samoylov\");\n```", "```java\nSystem.out.println(person1.equals(person2)); //prints: true\n```", "```java\nSystem.out.println(person1.equals(person3)); //prints: false\n```", "```java\nSystem.out.println(person1.hashCode());\n```", "```java\n                                            //prints: 777874839\n```", "```java\nSystem.out.println(person2.hashCode());\n```", "```java\n                                            //prints: 777874839\n```", "```java\nSystem.out.println(person3.hashCode());\n```", "```java\n                                            //prints: 596512129\n```", "```java\n@Override\n```", "```java\npublic boolean equals(Object o) {\n```", "```java\n    if (this == o) return true;\n```", "```java\n    if (o == null) return false;\n```", "```java\n    if(!(o instanceof Person)) return false;\n```", "```java\n    Person person = (Person)o;\n```", "```java\n    return getAge() == person.getAge() &&\n```", "```java\n       Objects.equals(getFirstName(), person.getFirstName()) &&\n```", "```java\n           Objects.equals(getLastName(), person.getLastName());\n```", "```java\n}\n```", "```java\n@Override\n```", "```java\npublic int hashCode() {\n```", "```java\n  return Objects.hash(getAge(), getFirstName(), getLastName());\n```", "```java\n}\n```", "```java\nPerson1 person1 = new Person1(42, \"Nick\", \"Samoylov\");\n```", "```java\nPerson1 person2 = person1;\n```", "```java\nPerson1 person3 = new Person1(42, \"Nick\", \"Samoylov\");\n```", "```java\nSystem.out.println(person1.equals(person2)); //prints: true\n```", "```java\nSystem.out.println(person1.equals(person3)); //prints: true\n```", "```java\nSystem.out.println(person1.hashCode());\n```", "```java\n                                           //prints: 2115012528\n```", "```java\nSystem.out.println(person2.hashCode());\n```", "```java\n                                           //prints: 2115012528\n```", "```java\nSystem.out.println(person3.hashCode());\n```", "```java\n                                           //prints: 2115012528\n```", "```java\n  public class Person2 implements Comparable<Person2> {\n```", "```java\n    private int age;\n```", "```java\n    private String firstName, lastName;\n```", "```java\n    public Person2(int age, String firstName, String lastName)\n```", "```java\n    {\n```", "```java\n        this.age = age;\n```", "```java\n        this.lastName = lastName;\n```", "```java\n        this.firstName = firstName;\n```", "```java\n    }\n```", "```java\n    public int getAge() { return age; }\n```", "```java\n    public String getFirstName() { return firstName; }\n```", "```java\n    public String getLastName() { return lastName; }\n```", "```java\n    @Override\n```", "```java\n    public int compareTo(Person2 p) {\n```", "```java\n        int result = Objects.compare(getFirstName(), \n```", "```java\n                  p.getFirstName(), Comparator.naturalOrder());\n```", "```java\n        if (result != 0) {\n```", "```java\n            return result;\n```", "```java\n        }\n```", "```java\n        result = Objects.compare(getLastName(), \n```", "```java\n                   p.getLastName(), Comparator.naturalOrder());\n```", "```java\n        if (result != 0) {\n```", "```java\n            return result;\n```", "```java\n        }\n```", "```java\n        return Objects.compare(age, p.getAge(), \n```", "```java\n                                    Comparator.naturalOrder());\n```", "```java\n    }\n```", "```java\n    @Override\n```", "```java\n    public String toString() {\n```", "```java\n        return firstName + \" \" + lastName + \", \" + age;\n```", "```java\n    }\n```", "```java\n  }\n```", "```java\nPerson2 p1 = new Person2(15, \"Zoe\", \"Adams\");\n```", "```java\nPerson2 p2 = new Person2(25, \"Nick\", \"Brook\");\n```", "```java\nPerson2 p3 = new Person2(42, \"Nick\", \"Samoylov\");\n```", "```java\nPerson2 p4 = new Person2(50, \"Ada\", \"Valentino\");\n```", "```java\nPerson2 p6 = new Person2(50, \"Bob\", \"Avalon\");\n```", "```java\nPerson2 p5 = new Person2(10, \"Zoe\", \"Adams\");\n```", "```java\nList<Person2> list = \n```", "```java\n       new ArrayList<>(List.of(p5, p2, p6, p1, p4, p3));\n```", "```java\nCollections.sort(list);\n```", "```java\nlist.stream().forEach(System.out::println); \n```", "```java\n@HotSpotIntrinsicCandidate\n```", "```java\nprotected native Object clone() throws CloneNotSupportedException;\n```", "```java\n/**\n```", "```java\n * Creates and returns a copy of this object.  The precise \n```", "```java\n * meaning of \"copy\" may depend on the class of the object.\n```", "```java\n ***/\n```", "```java\n  class Address {\n```", "```java\n    private String street, city;\n```", "```java\n    public Address(String street, String city) {\n```", "```java\n        this.street = street;\n```", "```java\n        this.city = city;\n```", "```java\n    }\n```", "```java\n    public void setStreet(String street){ \n```", "```java\n                                        this.street = street; }\n```", "```java\n    public String getStreet() { return street; }\n```", "```java\n    public String getCity() { return city; }\n```", "```java\n  }\n```", "```java\n  class Person3 implements Cloneable{\n```", "```java\n    private int age;\n```", "```java\n    private Address address;\n```", "```java\n    private String firstName, lastName;\n```", "```java\n    public Person3(int age, String firstName, \n```", "```java\n                            String lastName, Address address) {\n```", "```java\n        this.age = age;\n```", "```java\n        this.address = address;\n```", "```java\n        this.lastName = lastName;\n```", "```java\n        this.firstName = firstName;\n```", "```java\n    }\n```", "```java\n    public int getAge() { return age; }\n```", "```java\n    public Address getAddress() { return address; }\n```", "```java\n    public String getLastName() { return lastName; }\n```", "```java\n    public String getFirstName() { return firstName; }\n```", "```java\n    @Override\n```", "```java\n    public Person3 clone() throws CloneNotSupportedException{\n```", "```java\n        return (Person3) super.clone();\n```", "```java\n    }\n```", "```java\n  }\n```", "```java\nPerson3 p1 = new Person3(42, \"Nick\", \"Samoylov\",\n```", "```java\n                      new Address(\"25 Main Street\", \"Denver\"));\n```", "```java\nPerson3 p2 = p1.clone();\n```", "```java\nSystem.out.println(p1.getAge() == p2.getAge());\n```", "```java\n                                                        // true\n```", "```java\nSystem.out.println(p1.getLastName() == p2.getLastName()); \n```", "```java\n                                                        // true\n```", "```java\nSystem.out.println(p1.getLastName().equals(p2.getLastName())); \n```", "```java\n                                                        // true\n```", "```java\nSystem.out.println(p1.getAddress() == p2.getAddress());   \n```", "```java\n                                                        // true\n```", "```java\nSystem.out.println(p2.getAddress().getStreet());  \n```", "```java\n                                       //prints: 25 Main Street\n```", "```java\np1.getAddress().setStreet(\"42 Dead End\");\n```", "```java\nSystem.out.println(p2.getAddress().getStreet());  \n```", "```java\n                                          //prints: 42 Dead End\n```", "```java\n  public class Address implements Cloneable{\n```", "```java\n    private String street, city;\n```", "```java\n    public Address(String street, String city) {\n```", "```java\n        this.street = street;\n```", "```java\n        this.city = city;\n```", "```java\n    }\n```", "```java\n    public void setStreet(String street){ \n```", "```java\n                                        this.street = street; }\n```", "```java\n    public String getStreet() { return street; }\n```", "```java\n    public String getCity() { return city; }\n```", "```java\n    @Override\n```", "```java\n    public Address clone() throws CloneNotSupportedException {\n```", "```java\n        return (Address)super.clone();\n```", "```java\n    }\n```", "```java\n  }\n```", "```java\n  class Person4 implements Cloneable{\n```", "```java\n    private int age;\n```", "```java\n    private Address address;\n```", "```java\n    private String firstName, lastName;\n```", "```java\n    public Person4(int age, String firstName, \n```", "```java\n                            String lastName, Address address) {\n```", "```java\n        this.age = age;\n```", "```java\n        this.address = address;\n```", "```java\n        this.lastName = lastName;\n```", "```java\n        this.firstName = firstName;\n```", "```java\n    }\n```", "```java\n    public int getAge() { return age; }\n```", "```java\n    public Address getAddress() { return address; }\n```", "```java\n    public String getLastName() { return lastName; }\n```", "```java\n    public String getFirstName() { return firstName; }\n```", "```java\n    @Override\n```", "```java\n    public Person4 clone() throws CloneNotSupportedException{\n```", "```java\n        Person4 cl = (Person4) super.clone();\n```", "```java\n        cl.address = this.address.clone();\n```", "```java\n        return cl;\n```", "```java\n    }\n```", "```java\n  }\n```", "```java\nPerson4 p1 = new Person4(42, \"Nick\", \"Samoylov\",\n```", "```java\n                      new Address(\"25 Main Street\", \"Denver\"));\n```", "```java\nPerson4 p2 = p1.clone();\n```", "```java\nSystem.out.println(p1.getAge() == p2.getAge());         // true\n```", "```java\nSystem.out.println(p1.getLastName() == p2.getLastName()); \n```", "```java\n                                                        // true\n```", "```java\nSystem.out.println(p1.getLastName().equals(p2.getLastName())); \n```", "```java\n                                                        // true\n```", "```java\nSystem.out.println(p1.getAddress() == p2.getAddress());  \n```", "```java\n                                                       // false\n```", "```java\nSystem.out.println(p2.getAddress().getStreet()); \n```", "```java\n                                       //prints: 25 Main Street\n```", "```java\np1.getAddress().setStreet(\"42 Dead End\");\n```", "```java\nSystem.out.println(p2.getAddress().getStreet()); \n```", "```java\n                                       //prints: 25 Main Street\n```", "```java\nPerson4 p1 = new Person4(42, \"Nick\", \"Samoylov\",\n```", "```java\n                      new Address(\"25 Main Street\", \"Denver\"));\n```", "```java\nAddress address = new Address(p1.getAddress().getStreet(), \n```", "```java\n                                    p1.getAddress().getCity());\n```", "```java\nPerson4 p2 = new Person4(p1.getAge(), p1.getFirstName(), \n```", "```java\n                                    p1.getLastName(), address);\n```", "```java\nSystem.out.println(p1.getAge() == p2.getAge());\n```", "```java\n                                                        // true\n```", "```java\nSystem.out.println(p1.getLastName() == p2.getLastName()); \n```", "```java\n                                                        // true\n```", "```java\nSystem.out.println(p1.getLastName().equals(p2.getLastName())); \n```", "```java\n                                                        // true\n```", "```java\nSystem.out.println(p1.getAddress() == p2.getAddress());// false\n```", "```java\nSystem.out.println(p2.getAddress().getStreet()); \n```", "```java\n                                       //prints: 25 Main Street\n```", "```java\np1.getAddress().setStreet(\"42 Dead End\");\n```", "```java\nSystem.out.println(p2.getAddress().getStreet()); \n```", "```java\n                                       //prints: 25 Main Street\n```", "```java\n//Initialize variable\n```", "```java\nint i = 0;\n```", "```java\n// In case of x > 0, we are looking for a matching group \n```", "```java\n// because we would like to reuse the data from the account.\n```", "```java\n// If we find the matching group, we either cancel it and \n```", "```java\n// clone, or add the x value to the group, or bail out.\n```", "```java\n// If we do not find the matching group,\n```", "```java\n// we create a new group using data of the matched group.\n```", "```java\n    ./mvnw spring-boot:run \n    ```", "```java\n    .\\mvnw.cmd spring-boot:run \n    ```", "```java\njava.lang.ClassNotFoundException: org.apache.maven.wrapper.MavenWrapperMain \n```", "```java\nmvn -N io.takari:maven:wrapper \n```", "```java\n    ./mvnw clean package \n    ```", "```java\n    .\\mvnw.cmd clean package \n    ```", "```java\njava -jar target/spring-0.0.1-SNAPSHOT.jar \n```", "```java\ncurl –XPOST localhost:8083/ws/new                  \\ \n       -H 'Content-Type: application/json'         \\ \n       -d '{\"dob\":\"2002-08-14\",                    \\ \n            \"firstName\":\"Mike\",\"lastName\":\"Brown\"}' \n```", "```java\n  Person{id=42, dob=2002-08-14, firstName='Mike', \n                        lastName='Brown'} successfully updated. \n```", "```java\ncurl –XPUT localhost:8083/ws/update              \\ \n   -H 'Content-Type: application/json'           \\ \n   -d '{\"id\":42,\"dob\":\"2002-08-14\",              \\ \n            \"firstName\":\"Nick\",\"lastName\":\"Brown\"}' \n```", "```java\n  Person{id=42, dob=2002-08-14, firstName='Nick', \n```", "```java\n                        lastName='Brown'} successfully updated. \n```", "```java\n\ncurl localhost:8083/ws/delete/1 \n\n```", "```java\n  Person{id=42, dob=2002-08-14, firstName='Nick', \n```", "```java\n                        lastName='Brown'} successfully deleted. \n```", "```java\ncurl localhost:8083/ws/list \n```", "```java\npublic class ReactiveSystemDemo { \n```", "```java\n   public static void main(String... args) { \n```", "```java\n     Vertx vertx = Vertx.vertx(); \n```", "```java\n     RxHelper.deployVerticle(vertx,  \n```", "```java\n                    new MessageRcvVert(\"1\", \"One\")); \n```", "```java\n     RxHelper.deployVerticle(vertx,  \n```", "```java\n                    new MessageRcvVert(\"2\", \"One\")); \n```", "```java\n     RxHelper.deployVerticle(vertx,  \n```", "```java\n                    new MessageRcvVert(\"3\", \"Two\")); \n```", "```java\n     RxHelper.deployVerticle(vertx, \n```", "```java\n                    new HttpServerVert(8082)); \n```", "```java\n   } \n```", "```java\n } \n```"]