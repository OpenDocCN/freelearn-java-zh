["```java\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-test</artifactId>\n    <scope>test</scope>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-autoconfigure</artifactId>\n</dependency>\n```", "```java\n<!-- mongoDB dependencies -->\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-mongodb</artifactId>\n</dependency>\n<!-- Add support for Mongo Query DSL -->\n<dependency>\n    <groupId>com.querydsl</groupId>\n    <artifactId>querydsl-mongodb</artifactId>\n    <version>5.0.0</version>\n    <exclusions>\n        <exclusion>\n            <groupId>org.mongodb</groupId>\n            <artifactId>mongo-java-driver</artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\n<dependency>\n    <groupId>com.querydsl</groupId>\n    <artifactId>querydsl-apt</artifactId>\n    <version>5.0.0</version>\n</dependency>\n<!-- https://mvnrepository.com/artifact/javax.annotation/javax.annotation-api -->\n<dependency>\n    <groupId>javax.annotation</groupId>\n    <artifactId>javax.annotation-api</artifactId>\n    <version>1.3.2</version>\n</dependency>\n```", "```java\n<plugins>\n    <plugin>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-maven-plugin</artifactId>\n    </plugin>\n    <!-- Add plugin for Mongo Query DSL -->\n    <plugin>\n        <groupId>com.mysema.maven</groupId>\n        <artifactId>apt-maven-plugin</artifactId>\n        <version>1.1.3</version>\n        <dependencies>\n            <dependency>\n                <groupId>com.querydsl</groupId>\n                <artifactId>querydsl-apt</artifactId>\n                <version>5.0.0</version>\n            </dependency>\n        </dependencies>\n        <executions>\n            <execution>\n                <phase>generate-sources</phase>\n                <goals>\n                    <goal>process</goal>\n                </goals>\n                <configuration>\n                    <outputDirectory>target/generated-sources/apt</outputDirectory>\n                    <processor>org.springframework.data.mongodb.repository.support.MongoAnnotationProcessor</processor>\n                    <logOnlyOnError>false</logOnlyOnError>\n                </configuration>\n            </execution>\n        </executions>\n    </plugin>\n</plugins>\n```", "```java\n@SpringBootApplication(scanBasePackages = \"com.scalabledataarch.rest\")\npublic class RestDaaSApp {\n    public static void main(String[] args) {\n        SpringApplication.run(RestDaaSApp.class);\n    }\n}\n```", "```java\n@Configuration\n@EnableMongoRepositories(basePackages = \"com.scalabledataarch.rest.repository\")\npublic class MongoConfig {\n    @Value(value = \"${restdaas.mongoUrl}\")\n    private String mongoUrl;\n    @Value(value = \"${restdaas.mongoDb}\")\n    private String mongoDb;\n    @Bean\n    public MongoClient mongo() throws Exception {\n        final ConnectionString connectionString = new ConnectionString(mongoUrl);\n        final MongoClientSettings mongoClientSettings = MongoClientSettings.builder().applyConnectionString(connectionString).serverApi(ServerApi.builder()\n                .version(ServerApiVersion.V1)\n                .build()).build();\n        return MongoClients.create(mongoClientSettings);\n    }\n    @Bean\n    public MongoTemplate mongoTemplate() throws Exception {\n        return new MongoTemplate(mongo(), mongoDb);\n    }\n}\n```", "```java\nimport com.querydsl.core.annotations.QueryEntity;\nimport org.springframework.data.annotation.Id;\nimport org.springframework.data.mongodb.core.mapping.Document;\n@QueryEntity\n@Document(collection = \"newloanrequest\")\npublic class Application  {\n    @Id\n    private String _id;\n    private String applicationId;\n```", "```java\npublic interface ApplicationRepository extends MongoRepository<Application, String>, QuerydslPredicateExecutor<Application> {\n    @Query(\"{ 'applicationId' : ?0 }\")\n    Application findApplicationsById(String applicationId);\n    @Query(\"{ 'id' : ?0 }\")\n    List<Application> findApplicationsByCustomerId(String id);\n}\n```", "```java\n@RestController\n@RequestMapping(path = \"/rdaas\")\npublic class DaasController {\n...\n}\n```", "```java\n...\n@Autowired\nApplicationRepository applicationRepository;\n@GetMapping(path= \"/application/{applicationId}\", produces = \"application/json\")\npublic ResponseEntity<Application> getApplicationById(@PathVariable String applicationId){\n  Application application = applicationRepository.findById(applicationId).orElseGet(null);\n  return ResponseEntity.ok(application);\n}\n...\n```", "```java\nrestdaas:\n  mongoUrl: <mongo url>\n  mongoDb: newloanrequest\n```", "```java\n    FROM openjdk:11.0-jdk\n    VOLUME /tmp\n    RUN useradd -d /home/appuser -m -s /bin/bash appuser\n    USER appuser\n    ARG JAR_FILE\n    COPY ${JAR_FILE} app.jar\n    EXPOSE 8080\n    ENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]\n    ```", "```java\n    docker build -t apprestdaas:v1.0 .\n    ```", "```java\n    docker images\n    ```", "```java\n    aws configure\n    ```", "```java\n    aws ecr get-login-password --region <region>\n    ```", "```java\naws ecr get-login-password --region <region> | docker login --username AWS --password-stdin <accountid>.dkr.ecr.<region>.amazonaws.com\n```", "```java\n    docker tag apprestdaas:v10 <accountid>.dkr.ecr.<region>.amazonaws.com/restdaas:v1\n    ```", "```java\n    docker push <accountid>.dkr.ecr.us-east-2.amazonaws.com/restdaas:v1\n    ```"]