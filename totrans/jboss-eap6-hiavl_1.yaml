- en: Chapter 1. JBoss EAP6 Overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will learn the basic concepts about high availability and
    have an overview of the functions that JBoss EAP6 provides to us in this field.
    Then we'll learn how to install JBoss EAP6 and see its basic usages.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding high availability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To understand the term high availability, here is its definition from Wikipedia:'
  prefs: []
  type: TYPE_NORMAL
- en: '"High availability is a system design approach and associated service implementation
    that ensures that a prearranged level of operational performance will be met during
    a contractual measurement period. Users want their systems, for example, hospitals,
    production computers, and the electrical grid to be ready to serve them at all
    times. ... If a user cannot access the system, it is said to be unavailable."'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In the IT field, when we mention the words "high availability", we usually think
    of the uptime of the server, and technologies such as clustering and load balancing
    can be used to achieve this.
  prefs: []
  type: TYPE_NORMAL
- en: 'Clustering means to use multiple servers to form a group. From their perspective,
    users see the cluster as a single entity and access it as if it''s just a single
    point. The following figure shows the structure of a cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding high availability](img/2432OS_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To achieve the previously mentioned goal, we usually use a controller of the
    cluster, called load balancer, to sit in front of the cluster. Its job is to receive
    and dispatch user requests to a node inside the cluster, and the node will do
    the real work of processing the user requests. After the node processes the user
    request, the response will be sent to the load balancer, and the load balancer
    will send it back to the users. The following figure shows the workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding high availability](img/2432OS_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Besides load balancing user requests, the clustering system can also do failover
    inside itself.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Failover means when a node has crashed, the load balancer can switch to other
    running nodes to process user requests.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a cluster, some nodes may fail during runtime. If this happens, the requests
    to the failed nodes should be redirected to the healthy nodes. The process is
    shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding high availability](img/2432OS_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To make failover possible, the node in a cluster should be able to replicate
    user data from one to another.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In JBoss EAP6, the Infinispan module, which is a data-grid solution provided
    by the JBoss community, does the web session replication.
  prefs: []
  type: TYPE_NORMAL
- en: 'If one node fails, the user request could be redirected to another node; however,
    the session with the user won''t be lost. The following figure illustrates failover:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding high availability](img/2432OS_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To achieve the previously mentioned goals, the JBoss community has provided
    us a powerful set of tools. In the next section we'll have an overview on it.
  prefs: []
  type: TYPE_NORMAL
- en: JBoss EAP6 high availability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As a Java EE application server, JBoss EAP6 uses modules coming from different
    open source projects:'
  prefs: []
  type: TYPE_NORMAL
- en: Web server (JBossWeb)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EJB (JBoss EJB3)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web service (JBossWS/RESTEasy)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Messaging (HornetQ)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JPA and transaction management (Hibernate/Narayana)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As we can see, JBoss EAP6 uses many more open source projects, and each part
    may have its own consideration to achieve the goal of high availability. Now let''s
    have a brief on these parts with respect to high availability:'
  prefs: []
  type: TYPE_NORMAL
- en: JBoss Web, Apache httpd, mod_jk, and mod_cluster
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The clustering for a web server may be the most popular topic and is well understood
    by the majority. There are a lot of good solutions in the market.
  prefs: []
  type: TYPE_NORMAL
- en: For JBoss EAP6, the solution it adopted is to use Apache `httpd` as the load
    balancer. `httpd` will dispatch the user requests to the EAP server. Red Hat has
    led two open source projects to work with `httpd`, which are called `mod_jk` and
    `mod_cluster` . In this book we'll learn how to use these two projects.
  prefs: []
  type: TYPE_NORMAL
- en: EJB session bean
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JBoss EAP6 has provided the `@org.jboss.ejb3.annotation.Clustered` annotation
    that we can use on both the `@Stateless` and `@Stateful` session beans.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The clustered annotation is JBoss EAP6/WildFly specific implementation.
  prefs: []
  type: TYPE_NORMAL
- en: When using `@Clustered` with `@Stateless`, the session bean can be load balanced;
    and when `@Clustered` is used with the `@Stateful` bean, the state of the bean
    will be replicated in the cluster.
  prefs: []
  type: TYPE_NORMAL
- en: JBossWS and RESTEasy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JBoss EAP6 provides two web service solutions out of the box. One is JBossWS
    and the other is RESTEasy. JBossWS is a web service framework that implements
    the JAX-WS specification. RESTEasy is an implementation of the JAX-RS specification
    to help you to build RESTFul web services.
  prefs: []
  type: TYPE_NORMAL
- en: HornetQ
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: HornetQ is a high-performance messaging system provided by the JBoss community.
    The messaging system is designed to be asynchronous and has its own consideration
    on load balancing and failover.
  prefs: []
  type: TYPE_NORMAL
- en: Hibernate and Narayana
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the database and transaction management field, high availability is a huge
    topic. For example, each database vendor may have their own solutions on load
    balancing the database queries. For example, PostgreSQL has some open source solutions,
    for example, Slony and pgpool, which can let us replicate the database from master
    to slave and which distributes the user queries to different database nodes in
    a cluster.
  prefs: []
  type: TYPE_NORMAL
- en: In the ORM layer, Hibernate also has projects such as **Hibernate Shards** that
    can deploy a database in a distributed way.
  prefs: []
  type: TYPE_NORMAL
- en: JGroups and JBoss Remoting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JGroups and JBoss Remoting are the cornerstone of JBoss EAP6 clustering features,
    which enable it to support high availability. JGroups is a reliable communication
    system based on IP multicasting.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: JGroups is not limited to multicast and can use TCP too.
  prefs: []
  type: TYPE_NORMAL
- en: JBoss Remoting is the underlying communication framework for multiple parts
    in JBoss EAP6.
  prefs: []
  type: TYPE_NORMAL
- en: Domain management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Besides the topics discussed previously, JBoss EAP6 has also introduced a new
    feature called **domain management** . This feature can help us to centralize
    the management of the EAP6 servers deployed as a cluster. In later chapters of
    this book we'll learn how to use this feature.
  prefs: []
  type: TYPE_NORMAL
- en: Installing JBoss EAP6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous sections, we had an overview of high availability and what
    JBoss EAP6 provides to us in relation to this topic. It doesn''t matter if you
    haven''t understood all the things. We''ll touch these parts in this book step
    by step to help you build the whole picture. The first step is to install JBoss
    EAP6\. Please download `JBoss EAP 6.1.0.Final` from the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.jboss.org/jbossas/downloads/](http://www.jboss.org/jbossas/downloads/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Locate the **6.1.0.Final** version and download the ZIP file. After the ZIP
    file has been downloaded, extract it. The contents are shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing JBoss EAP6](img/2432OS_01_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: From the previous screenshot, we can see a JAR file named `jboss-modules.jar`.
    This JAR file will help us to load the components of the server. The components
    of the EAP6 server are located in the `modules` directory. This directory contains
    the components of EAP6 that could be loaded by `jboss-modules.jar`.
  prefs: []
  type: TYPE_NORMAL
- en: The `bin` directory contains the start script and other tools that we'll use
    later.
  prefs: []
  type: TYPE_NORMAL
- en: The `standalone` and `domain` directories are related with the EAP6 startup
    mode. We'll cover it in more detail in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: The JBoss EAP6 startup mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The startup mode is a new concept introduced in JBoss EAP6\. There are currently
    two modes provided by EAP6:'
  prefs: []
  type: TYPE_NORMAL
- en: The standalone mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The domain mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'And there are two startup scripts in the `bin` directory for these two modes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Let's see the meanings of these two modes.
  prefs: []
  type: TYPE_NORMAL
- en: The domain mode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The domain mode is a new concept introduced in EAP6\. A domain means a group
    of servers that can share configuration/deployment information, which is very
    useful in a clustering environment.
  prefs: []
  type: TYPE_NORMAL
- en: For example, we have the three JBoss EAP6 servers running, and they form a cluster.
    Suppose we have a project called `cluster-demo` and want to deploy it to the cluster.
    The traditional method is to deploy this project to each EAP6 instance manually.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, with the help of the domain management function in EAP6, we can
    now configure many EAP6 servers as a server group and deploy a project into this
    group. Then the project will be deployed into all the EAP6 servers that belong
    to this group. The domain mode provides a centralized management point to our
    cluster. The server group also shares the same configuration that is automatically
    distributed to all nodes. We'll see its usage in later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: The standalone mode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The standalone mode is like the traditional JBoss AS running mode, and it doesn't
    have any domain management features supported during runtime.
  prefs: []
  type: TYPE_NORMAL
- en: Starting JBoss EAP6 in the standalone mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s now try to start JBoss EAP6 in the standalone mode. Go to the `bin`
    directory and run `standalone.sh`. The server output is shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Starting JBoss EAP6 in the standalone mode](img/2432OS_01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now let's look at some details on the server output to understand the startup
    process.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the startup process
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can see several important things from the server output. The following is
    the first one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'From the previous log, we can see that not all the components are started during
    the EAP6 startup process. This design greatly speeds up the startup time of EAP6\.
    We can see that some services are started by default during the start process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding the startup process](img/2432OS_01_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: These components are called subsystems. These subsystems are configured in the
    `standalone.xml` file upon navigating through `standalone/configuration`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s see the actual command in `standalone.sh` that starts the EAP6 server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt Publishing books you have
    purchased from your account at [http://www.packtpub.com](http://www.packtpub.com).
    If you purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the previous command, we can see that `jboss-modules.jar` is the bootstrap
    JAR file for the whole EAP6 server, and the entry point is `org.jboss.as.standalone`,
    which is specified in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We'll see more details about the startup process later. Now let's check the
    configuration file of the standalone mode.
  prefs: []
  type: TYPE_NORMAL
- en: The standalone.xml file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The structure of `standalone.xml` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The standalone.xml file](img/2432OS_01_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As shown in the previous screenshot, **standalone.xml** defines multiple aspects
    of the standalone service. Let''s have a brief view:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **extensions** | This section contains a list of extension modules. The components
    listed here will be loaded by `jboss-modules`. |'
  prefs: []
  type: TYPE_TB
- en: '| **management** | This section contains the configuration related to management
    interfaces of EAP6 and its security settings. |'
  prefs: []
  type: TYPE_TB
- en: '| **profile** | In this section, we can configure the settings for each subsystem.
    Most of the subsystems are the components loaded in the extensions section, and
    some subsystems are required by EAP6 internally and loaded at startup by default.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **interfaces** | This section defines a list of named network interfaces.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **socket-binding group** | This section contains a list of socket-binding
    groups, including the set of interfaces that could be used by different modules.
    |'
  prefs: []
  type: TYPE_TB
- en: Alternative configuration files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Besides the default file `standalone.xml`, EAP6 has provided some other profiles
    for the standalone mode.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is only one profile per standalone configuration file. In contrast, multiple
    profiles could be defined in the domain configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can check them in the `standalone/configuration` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Alternative configuration files](img/2432OS_01_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'These files define the different profiles for different purposes. The following
    is a summary of their differences:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **standalone.xml** | This is the default setting of standalone mode. |'
  prefs: []
  type: TYPE_TB
- en: '| **standalone-full.xml** | Compared with the default settings, this profile
    has added the messaging subsystem (HornetQ and relative components). |'
  prefs: []
  type: TYPE_TB
- en: '| **standalone-ha.xml** | Compared with the default settings, this profile
    has added clustering-related components: `mod_cluster` and `JGroups`, replicable
    caches powered by Infinispan, and other relative components. |'
  prefs: []
  type: TYPE_TB
- en: '| **standalone-full-ha.xml** | Compared with the default setting, this profile
    provides a combination of functions in ''-full'' and ''-ha''. |'
  prefs: []
  type: TYPE_TB
- en: 'To use these alternative configurations during startup, we can use the `-c`
    option when calling `standalone.sh`. For example, if we want to use `standalone-ha.xml`,
    the command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Please note that the `-c` option assumes that the configuration is located at
    `$JBOSS_HOME/standalone/`.
  prefs: []
  type: TYPE_NORMAL
- en: The --help option
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Both `standalone.sh` and `domain.sh` provide us with the help document. We
    can always use the `--help` option to check it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Configuration files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the `bin` directory, there are several configuration files that will be
    included during the startup process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuration files](img/2432OS_01_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can put our own configuration into these files, and it will be included by
    the startup scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Starting JBoss EAP6 in the domain mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, let''s have a look at the domain mode. Use the following command
    in the `bin` directory to start the EAP6 server in the domain mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see that the startup process is different with the standalone mode.
    Firstly, there are many more components loaded in the domain mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'And in `domain.sh`, we can see that the startup command is also different:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Compared with the standalone mode, the entry point is no longer `org.jboss.as.standalone`;
    instead, it becomes `process-contoller`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'There is also a process called `host-controller`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The following figure shows the relationship of these processes when EAP6 is
    running in the domain mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Starting JBoss EAP6 in the domain mode](img/2432OS_01_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As in the domain mode, a lightweight **Process Controller** is started first,
    and then it spawns a **Host Controller** process that will control multiple server
    processes. This is because in the domain mode it allows multiple server instances
    to run at the same time, and each server will have its own JVM process.
  prefs: []
  type: TYPE_NORMAL
- en: The domain mode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we have seen previously, when EAP6 is running in the domain mode, multiple
    severs can run at the same time. In addition, these servers can belong to different
    server groups. The servers that belong to the same group will share the deployment
    and configuration information.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, we have a server group called the **main-server-group** , and
    in this group, we have two servers called **server-** **one** and **server-two**
    . If we deploy a project called `cluster-demo.war` in the **main-server-group**,
    then it will be deployed into both the servers at the same time. And if we change
    some settings in this group, the settings of these two servers will all get synced:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The domain mode](img/2432OS_01_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the previous example the two servers of the same group are in the same machine
    and the same EAP6 instance. But actually they can exist in different EAP6 servers,
    and the servers in the same group can be synced across the network.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Unlike the standalone mode, the domain mode uses two configuration files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`domain.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`host.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These configuration files are in the location `domain/configuration/`. Now let's
    have a look at `dom` `ain.xml` first.
  prefs: []
  type: TYPE_NORMAL
- en: The domain.xml file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The structure of the `domain.xml` file and its difference with `standalone.xml`
    are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The domain.xml file](img/2432OS_01_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we compare its structure with the standalone mode, we can see the differences.
    Firstly there are three sections in plural form:'
  prefs: []
  type: TYPE_NORMAL
- en: '**profiles**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**interfaces**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**socket-binding-groups**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The reason for this difference is easy to guess. In the domain mode, there are
    multiple servers running in different server groups, and EAP6 supports each server
    group to have its own set of settings. So, different profiles, interfaces, and
    socket-binding-groups will be needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, we can see a new section called **server-groups**. Here is its
    default setting in `domain.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous settings are shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The domain.xml file](img/2432OS_01_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this way, different server groups are bound to different settings.
  prefs: []
  type: TYPE_NORMAL
- en: The host.xml file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now let''s check `host.xml`. The following screenshot shows its structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The host.xml file](img/2432OS_01_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `host.xml` file is the setting file for the host controller. It has some
    parts similar to `standalone.xml` such as management and interfaces. Their purposes
    are also the same. Now let's see the **domain-controller** section.
  prefs: []
  type: TYPE_NORMAL
- en: The domain-controller section
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **domain-controller** section defines which host is used as the domain controller.
    The domain controller is actually a host controller, but it acts as the manager
    of the domain. The default **domain-controller** is set to `local`, which means
    EAP6 will use its host controller as its domain controller by default.
  prefs: []
  type: TYPE_NORMAL
- en: We can also define a remote host controller as the domain controller. Then multiple
    EAP6 could connect to the same domain controller and accept its management. Now
    let's see the **servers** section.
  prefs: []
  type: TYPE_NORMAL
- en: The servers section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The **servers** section is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The servers section](img/2432OS_01_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the domain mode, a host controller can manage several servers at the same
    time, and each server has their own name and belongs to a server group; these
    servers are bound to different sockets to avoid conflicts.
  prefs: []
  type: TYPE_NORMAL
- en: The **auto-start** option checks whether to start this server during the EAP6
    startup. We may choose which server to start during the EAP6 startup by this option.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **port-offset** option is used to bind different servers into different
    ports to avoid conflict. Let''s see the default configuration in `host.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the deployment diagram that shows the relationship between
    the previously discussed servers and server groups:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The servers section](img/2432OS_01_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here are the server group settings in `domain.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see that the **main-server-group** is bound to `full-sockets`, and the
    **other-server-group** is bound to `full-ha-sockets`. These two sockets are defined
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The `full-sockets` binds to the HTTP port 8080, and `port-offset` is 0\. So
    the web port used by **server-one** is 8080; for **server-two**, because its `port-offset`
    is 150, its web port is 8080 + 150 = 8230\. Similarly, the HTTP port used by **server-three**
    is 8080 + 250 = 8330.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s set **auto-start** for all three servers to `true` so that they
    will be started during the EAP6 startup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s start EAP6 in the domain mode by calling `domain.sh`. After EAP6
    starts, let''s try to access 8080, 8230, and 8330 with `telnet` commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: We can see all the servers are listening for connections now.
  prefs: []
  type: TYPE_NORMAL
- en: XSD documents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'JBoss EAP6 has provided the schema documents in `docs/schema`. Each schema
    has defined a namespace used by the EAP6 configuration file. For example, we can
    check the beginning of `standalone.xml` and see the xml namespace it''s using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see that the namespace used is `urn:jboss:domain:1.4`. Let''s find the
    defined namespace in the `docs/schema` directory by using the `grep` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see that `jboss-as-config_1_4.xsd` contains the definition of the xml
    namespace we are searching for. Now we can check the definitions for each element
    in this namespace. For example, if we want to understand the meaning of the **server**
    section in `standalone.xml`, we can check its definition in the `xsd` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: As we have seen in the previous code snippet, the `xsd` schemas are very useful
    documents. They can help us to understand the meaning of the elements in configuration
    files.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned the basic concepts of high availability, and
    we have learned how to install JBoss EAP6 and run it in different modes. We also
    learned about the two running modes of EAP6\. In the next chapter, we will learn
    to use the EAP6 management console, and we'll use it to deploy projects into EAP6.
  prefs: []
  type: TYPE_NORMAL
