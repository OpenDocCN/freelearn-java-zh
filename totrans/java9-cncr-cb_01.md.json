["```java\n        public class Calculator implements Runnable {\n\n```", "```java\n        @Override \n        public void run() { \n          long current = 1L; \n          long max = 20000L; \n          long numPrimes = 0L; \n\n          System.out.printf(\"Thread '%s': START\\n\",\n                            Thread.currentThread().getName()); \n          while (current <= max) { \n            if (isPrime(current)) { \n              numPrimes++; \n            } \n            current++; \n          } \n          System.out.printf(\"Thread '%s': END. Number of Primes: %d\\n\",\n                          Thread.currentThread().getName(), numPrimes); \n        }\n\n```", "```java\n        private boolean isPrime(long number) { \n          if (number <= 2) { \n            return true; \n          } \n          for (long i = 2; i < number; i++) { \n            if ((number % i) == 0) { \n              return false; \n            } \n          } \n          return true; \n        }\n\n```", "```java\n        public class Main { \n                public static void main(String[] args) {\n\n```", "```java\n        System.out.printf(\"Minimum Priority: %s\\n\",\n                          Thread.MIN_PRIORITY); \n        System.out.printf(\"Normal Priority: %s\\n\",\n                          Thread.NORM_PRIORITY); \n        System.out.printf(\"Maximun Priority: %s\\n\",\n                          Thread.MAX_PRIORITY);\n\n```", "```java\n        Thread threads[]; \n        Thread.State status[]; \n        threads = new Thread[10]; \n        status = new Thread.State[10]; \n        for (int i = 0; i < 10; i++) { \n        threads[i] = new Thread(new Calculator()); \n          if ((i % 2) == 0) { \n            threads[i].setPriority(Thread.MAX_PRIORITY); \n          } else { \n            threads[i].setPriority(Thread.MIN_PRIORITY); \n          } \n            threads[i].setName(\"My Thread \" + i); \n        }\n\n```", "```java\n        try (FileWriter file = new FileWriter(\".\\\\data\\\\log.txt\");\n        PrintWriter pw = new PrintWriter(file);) { \n\n          for (int i = 0; i < 10; i++) { \n            pw.println(\"Main : Status of Thread \" + i + \" : \" + \n                        threads[i].getState()); \n            status[i] = threads[i].getState(); \n          } \n          for (int i = 0; i < 10; i++) { \n            threads[i].start(); \n          }\n\n```", "```java\n            boolean finish = false; \n            while (!finish) { \n              for (int i = 0; i < 10; i++) { \n                if (threads[i].getState() != status[i]) { \n                  writeThreadInfo(pw, threads[i], status[i]); \n                  status[i] = threads[i].getState(); \n                } \n              } \n\n              finish = true; \n              for (int i = 0; i < 10; i++) { \n                finish = finish && (threads[i].getState() ==\n                                  State.TERMINATED); \n              } \n            } \n\n          } catch (IOException e) {\n            e.printStackTrace(); \n          } \n        }\n\n```", "```java\n        private static void writeThreadInfo(PrintWriter pw,\n                                            Thread thread,\n                                            State state) { \n          pw.printf(\"Main : Id %d - %s\\n\", thread.getId(),\n                     thread.getName()); \n          pw.printf(\"Main : Priority: %d\\n\", thread.getPriority()); \n          pw.printf(\"Main : Old State: %s\\n\", state); \n          pw.printf(\"Main : New State: %s\\n\", thread.getState()); \n          pw.printf(\"Main : ************************************\\n\"); \n        }\n\n```", "```java\n        public class PrimeGenerator extends Thread{\n\n```", "```java\n@Override \n        public void run() { \n          long number=1L; \n          while (true) { \n            if (isPrime(number)) { \n              System.out.printf(\"Number %d is Prime\\n\",number); \n            }\n\n```", "```java\n            if (isInterrupted()) { \n              System.out.printf(\"The Prime Generator has been\n                                 Interrupted\"); \n              return; \n            } \n            number++; \n          } \n        }\n\n```", "```java\n        public class Main { \n          public static void main(String[] args) {\n\n```", "```java\n        Thread task=new PrimeGenerator(); \n        task.start();\n\n```", "```java\n        try { \n          Thread.sleep(5000); \n        } catch (InterruptedException e) { \n          e.printStackTrace(); \n        } \n        task.interrupt();\n\n```", "```java\n          System.out.printf(\"Main: Status of the Thread: %s\\n\",\n                            task.getState()); \n          System.out.printf(\"Main: isInterrupted: %s\\n\",\n                            task.isInterrupted()); \n          System.out.printf(\"Main: isAlive: %s\\n\", task.isAlive()); \n        }\n\n```", "```java\n        public class FileSearch implements Runnable {\n\n```", "```java\n        private String initPath; \n        private String fileName; \n        public FileSearch(String initPath, String fileName) { \n          this.initPath = initPath; \n          this.fileName = fileName; \n        }\n\n```", "```java\n        @Override \n        public void run() { \n          File file = new File(initPath); \n          if (file.isDirectory()) { \n            try { \n              directoryProcess(file); \n            } catch (InterruptedException e) { \n              System.out.printf(\"%s: The search has been interrupted\",\n                                Thread.currentThread().getName()); \n            } \n          } \n        }\n\n```", "```java\n        private void directoryProcess(File file) throws\n                                  InterruptedException { \n          File list[] = file.listFiles(); \n          if (list != null) { \n            for (int i = 0; i < list.length; i++) { \n              if (list[i].isDirectory()) { \n                directoryProcess(list[i]); \n              } else { \n                fileProcess(list[i]); \n              } \n            } \n          } \n          if (Thread.interrupted()) { \n            throw new InterruptedException(); \n          } \n        }\n\n```", "```java\n        private void fileProcess(File file) throws \n                                    InterruptedException { \n          if (file.getName().equals(fileName)) { \n            System.out.printf(\"%s : %s\\n\",\n                              Thread.currentThread().getName(),\n                              file.getAbsolutePath()); \n          } \n          if (Thread.interrupted()) { \n            throw new InterruptedException(); \n          } \n        }\n\n```", "```java\n        public class Main { \n          public static void main(String[] args) {\n\n```", "```java\n        FileSearch searcher = new FileSearch(\"C:\\\\Windows\",\n                                             \"explorer.exe\");\n        Thread thread=new Thread(searcher); \n        thread.start();\n\n```", "```java\n          try { \n            TimeUnit.SECONDS.sleep(10); \n          } catch (InterruptedException e) { \n            e.printStackTrace(); \n          } \n          thread.interrupt(); \n        }\n\n```", "```java\n        public class ConsoleClock implements Runnable {\n\n```", "```java\n        @Override \n        public void run() {\n\n```", "```java\n          for (int i = 0; i < 10; i++) { \n            System.out.printf(\"%s\\n\", new Date()); \n            try { \n              TimeUnit.SECONDS.sleep(1); \n            } catch (InterruptedException e) { \n              System.out.printf(\"The FileClock has been interrupted\"); \n            } \n          } \n        }\n\n```", "```java\n        public class Main { \n          public static void main(String[] args) {\n\n```", "```java\n        FileClock clock=new FileClock(); \n        Thread thread=new Thread(clock); \n        thread.start();\n\n```", "```java\n        try { \n          TimeUnit.SECONDS.sleep(5); \n        } catch (InterruptedException e) { \n          e.printStackTrace(); \n        };\n\n```", "```java\n        thread.interrupt();\n\n```", "```java\n        public class DataSourcesLoader implements Runnable {\n\n```", "```java\n        @Override \n        public void run() { \n          System.out.printf(\"Beginning data sources loading: %s\\n\",\n                            new Date()); \n          try { \n            TimeUnit.SECONDS.sleep(4); \n          } catch (InterruptedException e) { \n            e.printStackTrace(); \n          } \n\n```", "```java\n          System.out.printf(\"Data sources loading has finished: %s\\n\",\n                            new Date()); \n        }\n\n```", "```java\n        public class Main { \n          public static void main(String[] args) {\n\n```", "```java\n       DataSourcesLoader dsLoader = new DataSourcesLoader(); \n       Thread thread1 = new Thread(dsLoader,\"DataSourceThread\");\n\n```", "```java\n        NetworkConnectionsLoader ncLoader = new NetworkConnectionsLoader(); \n        Thread thread2 = new Thread(ncLoader,\"NetworkConnectionLoader\");\n\n```", "```java\n        thread1.start(); \n        thread2.start();\n\n```", "```java\n       try { \n          thread1.join(); \n          thread2.join(); \n        } catch (InterruptedException e) { \n          e.printStackTrace(); \n        }\n\n```", "```java\n        System.out.printf(\"Main: Configuration has been loaded: %s\\n\",\n                          new Date());\n\n```", "```java\n        public class WriterTask implements Runnable {\n\n```", "```java\n        private Deque<Event> deque; \n        public WriterTask (Deque<Event> deque){ \n          this.deque=deque; \n        }\n\n```", "```java\n        @Override \n        public void run() { \n          for (int i=1; i<100; i++) { \n            Event event=new Event(); \n            event.setDate(new Date()); \n            event.setEvent(String.format(\"The thread %s has generated\n                           an event\", Thread.currentThread().getId())); \n            deque.addFirst(event); \n            try { \n              TimeUnit.SECONDS.sleep(1); \n            } catch (InterruptedException e) { \n              e.printStackTrace(); \n            } \n          } \n        }\n\n```", "```java\n        public class CleanerTask extends Thread {\n\n```", "```java\n        private Deque<Event> deque; \n        public CleanerTask(Deque<Event> deque) { \n          this.deque = deque; \n          setDaemon(true); \n        }\n\n```", "```java\n        @Override \n        public void run() { \n          while (true) { \n            Date date = new Date(); \n            clean(date); \n          } \n        }\n\n```", "```java\n        private void clean(Date date) { \n          long difference; \n          boolean delete; \n\n          if (deque.size()==0) { \n           return; \n          } \n          delete=false; \n          do { \n            Event e = deque.getLast(); \n            difference = date.getTime() - e.getDate().getTime(); \n            if (difference > 10000) { \n              System.out.printf(\"Cleaner: %s\\n\",e.getEvent()); \n              deque.removeLast(); \n              delete=true; \n            } \n          } while (difference > 10000); \n          if (delete){ \n            System.out.printf(\"Cleaner: Size of the queue: %d\\n\",\n                              deque.size()); \n          } \n        }\n\n```", "```java\n        public class Main { \n          public static void main(String[] args) {\n\n```", "```java\n        Deque<Event> deque=new ConcurrentLinkedDeque<Event>();\n\n```", "```java\n        WriterTask writer=new WriterTask(deque); \n        for (int i=0; i< Runtime.getRuntime().availableProcessors();\n             i++){ \n          Thread thread=new Thread(writer); \n          thread.start(); \n        } \n        CleanerTask cleaner=new CleanerTask(deque); \n        cleaner.start();\n\n```", "```java\n        public class ExceptionHandler implements UncaughtExceptionHandler { \n          @Override \n          public void uncaughtException(Thread t, Throwable e) { \n            System.out.printf(\"An exception has been captured\\n\"); \n            System.out.printf(\"Thread: %s\\n\",t.getId()); \n            System.out.printf(\"Exception: %s: %s\\n\",\n                              e.getClass().getName(),e.getMessage()); \n            System.out.printf(\"Stack Trace: \\n\"); \n            e.printStackTrace(System.out); \n            System.out.printf(\"Thread status: %s\\n\",t.getState()); \n          } \n        }\n\n```", "```java\n        public class Task implements Runnable { \n          @Override \n          public void run() { \n            int numero=Integer.parseInt(\"TTT\"); \n          } \n        }\n\n```", "```java\n        public class Main { \n          public static void main(String[] args) {\n\n```", "```java\n            Task task=new Task(); \n            Thread thread=new Thread(task); \n            thread.setUncaughtExceptionHandler(new ExceptionHandler()); \n            thread.start(); \n          } \n        }\n\n```", "```java\n        public class UnsafeTask implements Runnable{ \n          private Date startDate;\n\n```", "```java\n        @Override \n        public void run() { \n          startDate=new Date(); \n          System.out.printf(\"Starting Thread: %s : %s\\n\",\n                            Thread.currentThread().getId(),startDate); \n          try { \n            TimeUnit.SECONDS.sleep( (int)Math.rint(Math.random()*10)); \n          } catch (InterruptedException e) { \n            e.printStackTrace(); \n          } \n          System.out.printf(\"Thread Finished: %s : %s\\n\",\n                            Thread.currentThread().getId(),startDate); \n        }\n\n```", "```java\n        public class Main { \n          public static void main(String[] args) { \n            UnsafeTask task=new UnsafeTask(); \n            for (int i=0; i<10; i++){ \n              Thread thread=new Thread(task); \n              thread.start(); \n              try { \n                TimeUnit.SECONDS.sleep(2); \n              } catch (InterruptedException e) { \n                e.printStackTrace(); \n              } \n            } \n          } \n        }\n\n```", "```java\n        public class SafeTask implements Runnable {\n\n```", "```java\n           private static ThreadLocal<Date> startDate=new\n                                                ThreadLocal<Date>(){ \n          protected Date initialValue(){ \n            return new Date(); \n          } \n        };\n\n```", "```java\n        @Override \n        public void run() { \n          System.out.printf(\"Starting Thread: %s : %s\\n\",\n                       Thread.currentThread().getId(),startDate.get()); \n          try { \n            TimeUnit.SECONDS.sleep((int)Math.rint(Math.random()*10)); \n          } catch (InterruptedException e) { \n            e.printStackTrace(); \n          } \n          System.out.printf(\"Thread Finished: %s : %s\\n\",\n                       Thread.currentThread().getId(),startDate.get()); \n        }\n\n```", "```java\n        public class MyThreadGroup extends ThreadGroup { \n          public MyThreadGroup(String name) { \n            super(name); \n          }\n\n```", "```java\n        @Override \n        public void uncaughtException(Thread t, Throwable e) { \n          System.out.printf(\"The thread %s has thrown an Exception\\n\",\n                            t.getId()); \n          e.printStackTrace(System.out); \n          System.out.printf(\"Terminating the rest of the Threads\\n\"); \n          interrupt(); \n        }\n\n```", "```java\n        public class Task implements Runnable {\n\n```", "```java\n        @Override \n        public void run() { \n          int result; \n          Random random=new Random(Thread.currentThread().getId()); \n          while (true) { \n            result=1000/((int)(random.nextDouble()*1000000000)); \n            if (Thread.currentThread().isInterrupted()) { \n              System.out.printf(\"%d : Interrupted\\n\",\n                                Thread.currentThread().getId()); \n              return; \n            } \n          } \n        }\n\n```", "```java\n        public class Main { \n          public static void main(String[] args) {\n\n```", "```java\n        int numberOfThreads = 2 * Runtime.getRuntime()\n                                      .availableProcessors();\n\n```", "```java\n        MyThreadGroup threadGroup=new MyThreadGroup(\"MyThreadGroup\");\n\n```", "```java\n        Task task=new Task();\n\n```", "```java\n        for (int i = 0; i < numberOfThreads; i++) { \n          Thread t = new Thread(threadGroup, task); \n          t.start(); \n        }\n\n```", "```java\n        System.out.printf(\"Number of Threads: %d\\n\",\n                          threadGroup.activeCount()); \n        System.out.printf(\"Information about the Thread Group\\n\"); \n        threadGroup.list();\n\n```", "```java\n            Thread[] threads = new Thread[threadGroup.activeCount()]; \n            threadGroup.enumerate(threads); \n            for (int i = 0; i < threadGroup.activeCount(); i++) { \n              System.out.printf(\"Thread %s: %s\\n\", threads[i].getName(),\n                                threads[i].getState()); \n            } \n          } \n        }\n\n```", "```java\n       public class MyThreadFactory implements ThreadFactory {\n\n```", "```java\n        private int counter; \n        private String name; \n        private List<String> stats; \n\n        public MyThreadFactory(String name){ \n          counter=0; \n          this.name=name; \n          stats=new ArrayList<String>(); \n        }\n\n```", "```java\n        @Override \n        public Thread newThread(Runnable r) { \n          Thread t=new Thread(r,name+\"-Thread_\"+counter); \n          counter++; \n          stats.add(String.format(\"Created thread %d with name %s on %s\\n\",\n                                  t.getId(),t.getName(),new Date())); \n          return t; \n        }\n\n```", "```java\n        public String getStats(){ \n          StringBuffer buffer=new StringBuffer(); \n          Iterator<String> it=stats.iterator(); \n\n          while (it.hasNext()) { \n            buffer.append(it.next()); \n            buffer.append(\"\\n\"); \n          } \n\n          return buffer.toString(); \n        }\n\n```", "```java\n        public class Task implements Runnable { \n          @Override \n          public void run() { \n            try { \n              TimeUnit.SECONDS.sleep(1); \n            } catch (InterruptedException e) { \n              e.printStackTrace(); \n            } \n          } \n        }\n\n```", "```java\n        public class Main { \n          public static void main(String[] args) {\n\n```", "```java\n        MyThreadFactory factory=new MyThreadFactory(\"MyThreadFactory\"); \n        Task task=new Task();\n\n```", "```java\n        Thread thread; \n        System.out.printf(\"Starting the Threads\\n\"); \n        for (int i=0; i<10; i++){ \n           thread=factory.newThread(task); \n          thread.start(); \n        }\n\n```", "```java\n        System.out.printf(\"Factory stats:\\n\"); \n        System.out.printf(\"%s\\n\",factory.getStats());\n\n```", "```java\n    return new Thread(r);\n\n```"]