["```java\n**@SpringBootApplication**\npublic class MyApplication {\n  public static void main(String[] args) {\n    SpringApplication.run(MyApplication.class, args);\n  }\n} \n```", "```java\n@Component\npublic class MyComponentImpl implements MyComponent { ... \n```", "```java\npublic class AnotherComponent {\n  private final MyComponent myComponent;\n  **@Autowired**\n  public AnotherComponent(MyComponent myComponent) {\n    this.myComponent = myComponent;\n  } \n```", "```java\npackage se.magnus.myapp;\n@SpringBootApplication\n**@ComponentScan**({\"se.magnus.myapp\",**\"se.magnus.util\"** })\npublic class MyApplication { \n```", "```java\npackage se.magnus.util;\n@Component\npublic class **MyUtility** { ... \n```", "```java\npackage se.magnus.myapp.services;\npublic class AnotherComponent {\n private final MyUtility myUtility;\n @Autowired\n public AnotherComponent(**MyUtility** myUtility) {\n   this.myUtility = myUtility;\n } \n```", "```java\n**@Configuration**\npublic class SubscriberApplication {\n  @Bean\n  public **Filter** **logFilter****()** {\n    CommonsRequestLoggingFilter filter = new \n        CommonsRequestLoggingFilter();\n    filter.setIncludeQueryString(true);\n    filter.setIncludePayload(true);\n    filter.setMaxPayloadLength(5120);\n    return filter;\n  } \n```", "```java\n    tasks.withType(JavaCompile) {\n        options.compilerArgs += ['-Xlint:deprecation']\n    } \n    ```", "```java\n@Bean\nSecurityFilterChain defaultSecurityFilterChain(HttpSecurity http) throws Exception {\n  http\n    .authorizeRequests(authorizeRequests -> authorizeRequests\n      .antMatchers(\"/actuator/**\").permitAll() \n```", "```java\n@Bean\nSecurityFilterChain defaultSecurityFilterChain(HttpSecurity http) throws Exception {\n  http\n    .authorizeHttpRequests(authorizeRequests -> authorizeRequests\n      .requestMatchers(\"/actuator/**\").permitAll() \n```", "```java\nimplementation('org.springframework.boot:spring-boot-starter-webflux') \n```", "```java\n2023-03-09 15:23:43.592 INFO 17429 --- [ main] o.s.b.web.embedded.netty.NettyWebServer : Netty started on port(s): 8080 \n```", "```java\nimplementation('org.springframework.boot:spring-boot-starter-webflux') \n{\n **exclude** group: 'org.springframework.boot', module: **'spring-boot-**\n **starter-reactor-netty'**\n}\n**implementation**('org.springframework.boot:**spring-boot-starter-tomcat'**) \n```", "```java\n2023-03-09 18:23:44.182 INFO 17648 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat initialized with port(s): 8080 (http) \n```", "```java\nserver.port: 7001 \n```", "```java\n**@RestController**\npublic class MyRestService {\n  **@GetMapping**(value = \"/my-resource\", produces = \"application/json\")\n  List<Resource> listResources() {\n    …\n  } \n```", "```java\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.IdClass;\nimport jakarta.persistence.Table;\n@Entity\n@IdClass(ReviewEntityPK.class)\n@Table(name = \"review\")\npublic class ReviewEntity {\n @Id private int productId;\n @Id private int reviewId;\n private String author;\n private String subject;\n private String content; \n```", "```java\nimport org.springframework.data.annotation.Id;\nimport org.springframework.data.annotation.Version;\nimport org.springframework.data.mongodb.core.mapping.Document;\n@Document\npublic class RecommendationEntity {\n    @Id\n    private String id;\n    @Version\n    private int version;\n    private int productId;\n    private int recommendationId;\n    private String author;\n    private int rate;\n    private String content; \n```", "```java\nimport org.springframework.data.repository.CrudRepository;\npublic interface ReviewRepository extends \n  CrudRepository<**ReviewEntity**, **ReviewEntityPK**> {\n\n  Collection<ReviewEntity> **findByProductId**(int productId);\n} \n```", "```java\npublic class **ReviewEntityPK** implements Serializable {\n    public int productId;\n    public int reviewId;\n} \n```", "```java\nprivate final ReviewRepository repository;\n@Autowired\npublic ReviewService(ReviewRepository repository) {\n this.repository = repository;\n}\npublic void someMethod() {\n  repository.save(entity);\n  repository.delete(entity);\n  repository.findByProductId(productId); \n```", "```java\nimport org.springframework.data.repository.reactive.ReactiveCrudRepository;\nimport reactor.core.publisher.Flux;\npublic interface RecommendationRepository extends ReactiveCrudRepository<**RecommendationEntity**, String> {\n    Flux<RecommendationEntity> findByProductId(int productId);\n} \n```", "```java\n@Bean\npublic **Supplier**<String> myPublisher() {\n   return () -> new Date().toString();\n} \n```", "```java\n@Bean\npublic **Consumer**<String> mySubscriber() {\n   return s -> System.out.println(\"ML RECEIVED: \" + s);\n} \n```", "```java\n@Bean\npublic **Function**<String, String> myProcessor() {\n   return s -> \"ML PROCESSED: \" + s;\n} \n```", "```java\n**spring.cloud.function:**\n **definition**: myPublisher;myProcessor;mySubscriber \n```", "```java\nspring.cloud.stream.bindings:\n  myPublisher-out-0:\n    destination: myProcessor-in\n  myProcessor-in-0:\n    destination: myProcessor-in\n  myProcessor-out-0:\n    destination: myProcessor-out\n  mySubscriber-in-0:\n    destination: myProcessor-out \n```", "```java\nmyPublisher → myProcessor → mySubscriber \n```", "```java\nML RECEIVED: ML PROCESSED: Wed Mar 09 16:28:30 CET 2021\nML RECEIVED: ML PROCESSED: Wed Mar 09 16:28:31 CET 2021\nML RECEIVED: ML PROCESSED: Wed Mar 09 16:28:32 CET 2021\nML RECEIVED: ML PROCESSED: Wed Mar 09 16:28:33 CET 2021 \n```", "```java\n@Autowired\nprivate StreamBridge streamBridge;\n@PostMapping\nvoid **sampleCreateAPI**(@RequestBody String body) {\n  **streamBridge**.send(\"myProcessor-in-0\", body);\n} \n```", "```java\nFROM openjdk:17\nMAINTAINER Magnus Larsson <magnus.larsson.ml@gmail.com>\nEXPOSE 8080\nADD ./build/libs/*.jar app.jar\nENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"] \n```", "```java\nproduct:\n **build**: microservices/product-service\nrecommendation:\n **build**: microservices/recommendation-service\nreview:\n  **build**: microservices/review-service\ncomposite:\n  **build**: microservices/product-composite-service\n  **ports**:\n    - \"**8080:8080**\" \n```"]