- en: Chapter 5. Representations – RESTful Entities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our web service is now responding to requests that produce output by utilizing
    the `Response` class. We saw that there are methods of this class that take an
    object as a parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a representation class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to create the representations that will be produced by the REST
    resources of our application. A simple Java class is everything needed by Jersey,
    so it will consider the class as a RESTful representation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given that our web service needs to produce contact-related information in
    the JSON format, a sample response would look something like the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We will build our representation class around this JSON string. The class will
    have the necessary properties (`id`, `firstName`, `lastName`, and `phone`) along
    with their getter methods.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps for creating a representation class:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new package called `com.dwbook.phonebook.representations` and create
    a `Contact` class in it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the aforementioned contact properties as final members, also implementing
    their getters and a constructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The representation class for contacts is now ready. All that was required was
    just a plain Java class with the same properties as the JSON object that we wish
    our application to generate. In order for this to work though, the appropriate
    public getter methods are needed.
  prefs: []
  type: TYPE_NORMAL
- en: Our properties were declared final in order to be immutable, and for this reason,
    we also created a constructor that initializes the properties accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Instances of this class may now be used in our Jersey-based REST resources as
    the output. Jackson will handle the transformation from POJO to JSON transparently.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Any POJO can be used as a representation. Jackson constructs the JSON string
    recursively according to the getter methods of each class and their return type.
  prefs: []
  type: TYPE_NORMAL
- en: The Jackson Java JSON processor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Jackson is a powerful open source JSON data binder/parser and processor that
    facilitates the transformation of plain old Java objects to the JSON format and
    vice versa. Jersey uses Jackson for its transformation needs and is part of the
    `dropwizard-core` module; so, it is already included in our project setup.
  prefs: []
  type: TYPE_NORMAL
- en: JSON arrays
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Any instance of the `java.util.List` type will be converted to a JSON array.
    For example, if we wanted to store multiple phone numbers for a contact, we would
    have declared `private final List<String> phoneNumbers` in the representation
    class (with the appropriate modifications to the class constructor and the getter).
  prefs: []
  type: TYPE_NORMAL
- en: 'This would lead to JSON representations of the following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Ignoring properties
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can prevent a property from being a part of the JSON representation by adding
    the `@JsonIgnore` annotation to its getter.
  prefs: []
  type: TYPE_NORMAL
- en: This will cause Jackson to ignore a getter method that otherwise would be treated
    as a JSON property.
  prefs: []
  type: TYPE_NORMAL
- en: Serving representations through the Resource class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Consider the `ContactResource#getContact()` method we previously implemented.
    We use the `Response#ok(Object entity)` method in order to build the response
    to be sent to the client, passing it to `String` as a parameter, as shown in the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now, we have our `Representation` class ready, and we are going to utilize it
    and pass instances of it to the `#ok()` method.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to learn the serving of representation through
    the resource class:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the `ContactResource#getContact()` method accordingly in order to pass
    a `Contact` object in the `#ok()` method instead of `String`, as shown in the
    following code. You will need to import the `Contact` class first (`import com.dwbook.phonebook.representations.Contact`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, modify the method''s signature, splitting the `name` variable to `firstName`
    and `lastName` in order to be consistent with the `Contact` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Rebuild (`mvn package`) and run the application again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Navigate to `http://localhost:8080/contact/123` or perform a PUT request to
    the same URL. You will see that the response that the server is sending to our
    request is a JSON representation of the object we are passing to the `Response#ok()`
    method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We define the response sent to the client by using the `Response#ok()` method,
    which accepts an object as a parameter. Until now, we have been passing JSON strings
    directly. This is not an efficient way, as our application will be handling actual
    objects (the `Contact` instances), and there is no reason for manually creating
    JSON representations of them when this can be done automatically by Jackson.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are now using our `representation` class in order to map its properties to
    the response we are producing. We can also use the same class to map our input
    parameters. For instance, we could modify the `ContactResource#updateContact()`
    and `ContactResource#createContact()`methods to expect a `Contact` object as a
    parameter instead of using each of its properties explicitly.
  prefs: []
  type: TYPE_NORMAL
- en: Using cURL to perform HTTP requests
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using your browser, you can only perform GET requests. In order to effectively
    test our application though, we will need a tool capable of performing HTTP requests
    with the POST, PUT, and DELETE methods. cURL ([http://curl.haxx.se/](http://curl.haxx.se/))
    is a command-line tool that we can use to better comprehend the examples. You
    can download it from [http://curl.haxx.se/download.html](http://curl.haxx.se/download.html)
    by choosing the package that is compatible with your platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'Performing a GET request is as simple as the cURL. The following example will
    call the `#getContact()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![Using cURL to perform HTTP requests](img/9530OS_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The JSON string you are seeing in the second line is the server's response.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to perform a PUT request to update a contact, we will need to use
    the `-X` flag followed by the method name (that is `curl -X PUT` …). To send data
    to the server along with our request, a contact''s information in this case, use
    the `-d` flag as well along with the data. Note that since the `#updateContact()`
    method''s parameters are mapped to request parameters (with `@FormParam`), we
    need to send the data URL encoded. Take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using cURL to perform HTTP requests](img/9530OS_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we want to see a verbose output that includes the request''s and response''s
    headers, we can use the `-v` (long name --verbose) flag. Also, in case we need
    to set the value of a request header, we can use the `-H` (long name --header)
    flag followed by the header information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Mapping the request data to representations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The current way of reading the web service properties by mentioning each one
    of them (annotated) in the signatures of the `#createContact()` and `#updateContact()`
    methods is fine; however, it is not efficient in case of significant amount of
    input data. Imagine a case where we would need to add several additional properties
    in the `Contact` class. We would have to also update the method signatures as
    well, making them less readable and finally unmanageable. Generally, it is preferred
    to map the request data to the representation directly. To achieve this, we will
    update the relevant methods accordingly, removing the properties and adding a
    `contact` instance instead. Jackson will take care of the rest.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to map the request data:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the `ContactResource#createContact()` method, replacing its parameters
    with a single `contact` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `ContactResource#updateContact()` method, replacing its parameters
    with a single `contact` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Rebuild and run the application again. The application is now able to handle
    HTTP POST and PUT requests to the `/contact` and `/contact/{id}` endpoints respectively,
    having JSON strings on the request body instead of the named parameters. Note
    that the `Content-Type` header of the request will be set to `application/json`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By declaring a `Contact` instance as the parameter on a method that handles
    requests (that is, a method with Jersey annotations bound to URI), we force Jersey
    to parse the request body and deserialize (using Jackson) it to a `Contact` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'The PUT request we performed in the previous example can now be performed by
    sending the JSON data to the server and setting the appropriate header, as shown
    in the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![How it works…](img/9530OS_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In case a POST request is performed on `http://localhost:8080/contact` with
    the `{"firstName": "Alexandros", "lastName": "Dallas", "phone": "+3012345678"}`
    JSON data as the request''s body and the `Content-Type` header: `application/json`,
    the `contact` object within the `#createContact()` method will have its properties
    initialized accordingly, thanks to Jackson and its appropriate JAX-RS entity providers.
    Entity providers are components that process the payload that is included in an
    HTTP request and transform it to an object. This is similar to the transformation
    that happens when a `resource` method is returning an object and is transformed
    to a JSON object.'
  prefs: []
  type: TYPE_NORMAL
