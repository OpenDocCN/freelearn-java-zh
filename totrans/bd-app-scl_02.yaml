- en: Chapter 2. Creating Your App Architecture and Bootstrapping with SBT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned about Functional Programing and Scala. This
    chapter will be focused on **Simple Build Tool** (**SBT**) and Activator in order
    to Bootstrap complex Scala and Play framework projects. Using SBT and Activator,
    we can perform several development tasks such as building, running tests, and
    deploying the application (which will be covered in detail in [Chapter 10](part0116.xhtml#aid-3EK181
    "Chapter 10.  Scaling up"), *Scaling Up*). Let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will see the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: SBT basics--installation, structure, and dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Activator basics--creating projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overall architecture of our application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing SBT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SBT is the ultimate Scala solution for building and packing Scala applications.
    SBT has lots of plugins, such as Eclipse and IntelliJ IDEA projects generation,
    which help a great deal when we are doing Scala development. SBT is built in Scala
    in order to help you build your Scala applications. However, SBT can still be
    used to build Java applications if you wish.
  prefs: []
  type: TYPE_NORMAL
- en: 'The core features of SBT are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Scala-based build definition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Incremental compilation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuous compilation and testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Great support for testing libraries such as ScalaCheck, Specs, ScalaTest, and
    JUnit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: REPL integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parallel Task execution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will use SBT with the Typesafe Activator to Bootstrap our application later
    in this very chapter. Before doing so, we will play with SBT to learn the key
    concepts of setting up a build project for a Scala application. In this book,
    we will be using SBT version 0.13.11.
  prefs: []
  type: TYPE_NORMAL
- en: Installing SBT on Ubuntu Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Keep in mind that we need to have Java and Scala installed before installing
    SBT. If you don''t have Java and Scala installed, go back to [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Introduction to FP, Reactive, and Scala"), *Introduction to FP, Reactive,
    and Scala* and follow the installation instructions. Open a terminal window, and
    run the following commands in order to download and install SBT:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following content to the `~/bin/sbt/sbt` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'After saving the `~/bin/sbt/sbt` file, we need to give permission to execute
    the file with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to put SBT into the operational system path in order to be able
    to execute anywhere in the Linux terminal. We need to export SBT through the `PATH`
    command into the `~/.bashrc` file. Open the `~/.bashrc` file in your favorite
    editor, and add the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We need to source the file using `$ source ~/.bashrc.`
  prefs: []
  type: TYPE_NORMAL
- en: Now we can run SBT and move on with the installation. When you now type `$ sbt`
    on your console, SBT will download all the dependencies required for use to run
    itself.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with SBT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create folder named `hello-world-sbt`, and add the following project
    structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting started with SBT](img/image00235.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'For `build.properties`, you need to have the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'For `hello_world.scala`, we will use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: For now we will use an SBT DSL. However, since SBT is written Scala, we can
    use the `build.scala` format if we wish. This is handy in some cases, because
    we can use any kind of Scala code in order to make the build more dynamic and
    to reuse code and tasks.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will set some predefined variables, however, you can create your own variables,
    which can be used to avoid duplicate code. Finally, let''s see the `build.sbt`
    file content as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we have the name of the application, the version which
    will be used in the generated JAR file, and also the Scala version used on the
    application and the one used in the build process. We are ready to build this
    project, so open your terminal and type `$ sbt compile`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This instruction will make SBT compile our Scala code, and you should see something
    like this following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![Getting started with SBT](img/image00236.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Congratulations! SBT just compiled our Scala application. Now we can run the
    application using SBT. In order to do this, we just need to type `$ sbt run` as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![Getting started with SBT](img/image00237.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: SBT makes it easier to test and play with your Scala application, because SBT
    has a REPL like the Scala REPL we were playing with in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Introduction to FP, Reactive, and Scala"), *Introduction to FP, Reactive,
    and Scala*. The SBT REPL makes all the Scala code that you might have under the
    project available at the REPL.
  prefs: []
  type: TYPE_NORMAL
- en: Execute the command `$ sbt console.`
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting started with SBT](img/image00238.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Once you are into the REPL, you can type any Scala code. As you must've realized,
    I just called the main Scala application directly via `$ SbtScalaMainApp.main(null)`.
  prefs: []
  type: TYPE_NORMAL
- en: Adding dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Like any build tool, SBT allows you to resolve dependencies. SBT uses the Ivy
    / Maven2 patterns to resolve dependencies. So, if you are familiar with Maven2,
    Gradle, or Ant/Ivy, you will realize that setting SBT dependencies is the same,
    although with a different syntax. Dependencies are defined in the `build.sbt`
    file. There is no Scala development without unit tests. One of the most popular
    testing libraries is JUnit ([http://junit.org/junit4/](http://junit.org/junit4/)).
    JUnit works with Java and Scala projects. SBT will download and add JUnit to your
    Scala application `classpath` parameter. We need to edit the `build.sbt` file
    to add JUnit as a dependency as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'As I mentioned before, SBT uses the same pattern as Maven2 / Ivy with: group
    ID + artifactid + version. If you don''t know the pattern for the library you
    want to add, you can check out the Maven Repository website (they generate SBT
    configs as well) at the following link: [http://mvnrepository.com/artifact/junit/junit/4.12](http://mvnrepository.com/artifact/junit/junit/4.12).'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding dependencies](img/image00239.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: SBT has scope for dependencies. We don't want to ship JUnit as part of the source
    code dependency. That's why we have the `% Test` after the dependency definition.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have saved the file with the new content, you can run `$ sbt compile`.
    SBT will download JUnit for you and store the jar into the local Ivy repo files
    located at `/home/YOUR_USER/.ivy2/cache`. With the dependency in place, we can
    add more code and also use SBT to run our tests as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we just created a simple and straightforward calculator
    in Scala, which can add two integer numbers and also perform multiplication of
    two integers numbers. Now we can move on to the unit tests using JUnit. Tests
    need to be located in the `src/test/scala/` folder. Look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Okay, now we can just run the tests with the command `$ sbt test` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding dependencies](img/image00240.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see in the previous screenshot, all the tests are running. A test
    is created when we add the Java annotation `@Test`, and it needs to be a public
    function as well. There is one test, called `testMultiply0` , which fails, because
    it expects the result `4`, but `5` multiplied by `0` is zero, so the test is wrong.
    Let''s fix this method by changing assertion to accept zero, like in the following
    code, and rerun the `$sbt test` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '`$ sbt test` gives you the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding dependencies](img/image00241.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Hooray! All the tests passed. By default, SBT runs all your tests in parallel,
    which is great for speeding up build time - nobody likes to wait when doing builds,
    and Scala is not the fastest tech to build. However, you can disable parallel
    tests if you want by adding the following line into the `build.sbt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Generating Eclipse project files from SBT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SBT via plugins can generate Eclipse files. It's possible to add these plugins
    directly into your `build.sbt` file. However, there is a better solution. You
    can define global configurations, which are ideal, because you don't need to add
    in every simple `build.sbt` file you have. This also makes a lot of sense if you
    are working with multiple projects and/or you are working with open source projects
    because, as it is a matter of preference, people often do not versionate IDE files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the following directory if it exists, otherwise please create the following
    directory: `/home/YOUR_USER/.sbt/0.13/plugins`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now create the file `build.sbt` with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/home/YOUR_USER/.sbt/0.13/plugins/build.sbt` Global config file'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Once you save the file with this content, we can reload our SBT application
    by executing `$ sbt reload` , or quit the SBT console ( ***Ctrl*** + ***D*** )
    and open sbt again using `$ sbt.`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![Generating Eclipse project files from SBT](img/image00242.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now we can generate Eclipse files by using the command `$ eclipse`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Generating Eclipse project files from SBT](img/image00243.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Once the generation is done, you can import the .project file generated into
    Eclipse.
  prefs: []
  type: TYPE_NORMAL
- en: By default, Eclipse does not attach source folders when generating the Eclipse
    project. If you want the source code (of third-party deps like Junit), you need
    to add an extra line into your `build.sbt` project. Adding source folders is often
    a good idea, otherwise, you can't do proper debugging without the source code.
  prefs: []
  type: TYPE_NORMAL
- en: build.sbt
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The SBT Scala application imported into Eclipse is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Generating Eclipse project files from SBT](img/image00244.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Application distribution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this section, we will play with three different packaging solutions, which
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The default SBT packagers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SBT assembly plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SBT native packager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SBT can generate jars by default. It is also possible to generate RPMs, DEBs,
    and even docker images via SBT plugins. First of all, let's generate an executable
    jar. This is done by the task package in SBT. Open your SBT console, and run the `$
    sbt package`. However, we want to generate a `FAT` jar, which is a jar with all
    other dependencies (jars) of the application. In order to do that, we need to
    use another plugin called assembly.
  prefs: []
  type: TYPE_NORMAL
- en: '![Application distribution](img/image00245.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The SBT package can generate a jar, but it does not ship the dependencies.
    In order to use the assembly plugin, create the file `project/assembly.sbt`, and
    add the content as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'In our `build.sbt`, we need to import the assembly plugin, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$ build.sbt` (put into the top of the file)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Now we can run `$ sbt assembly` to generate our `FAT` jar.
  prefs: []
  type: TYPE_NORMAL
- en: '![Application distribution](img/image00246.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'There we go. Now we can run this as a normal Java application just using the
    command `java -jar` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Hello world SBT / Scala App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There is another useful plugin for packing the Scala application, which is
    `sbt-native-packager`. `sbt-native-packager` can generate packages for Linux OS
    like DEB and RPM files. Since this is a new plugin, we need to create a file called
    `plugins.sbt` in `project/` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'At the very end of your `build.sbt`, you need to add this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Now we can generate packages with `sbt-native-packager` using `$ sbt universal:packageBin`
    or `$ sbt universal:packageZipTarball` .
  prefs: []
  type: TYPE_NORMAL
- en: '![Hello world SBT / Scala App](img/image00247.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now we have a ZIP and a TGZ file with your application in the folder `hello-world-sbt/target/universal/`.
    Inside this ZIP/TGZ file, we have our application in a jar format with all the
    dependencies; for now we just have Scala, but if we had more, they would be there
    as well. There are SH and BAT scripts to run this application easily in Linux(SH)
    and Windows(BAT) respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '`sbt-native-packager` can also cook docker images. This is great, because that
    makes it easier to deploy applications into production environments. Our project
    is fully ready to bake docker images. We need to have docker installed on Linux;
    you can do so by running the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see something like the following screenshot if you''ve successfully
    installed Docker:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hello world SBT / Scala App](img/image00248.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now you can run `$ sbt`, and then generate your docker images by using the
    command `$ docker:publishLocal`. You will see an output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: You can confirm that there is a new docker image in your system just by running
    the command `$ docker ps:`
  prefs: []
  type: TYPE_NORMAL
- en: '![Hello world SBT / Scala App](img/image00249.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The very first image is our docker image generated by the `sbt-native-packager`
    plugin with our Scala application. Congratulations! You have a docker container
    running with your Scala application. SBT Native Packager is really powerful, yet
    simple to use. You can get more details on the official documentation site ([http://www.scala-sbt.org/sbt-native-packager/gettingstarted.html](http://www.scala-sbt.org/sbt-native-packager/gettingstarted.html)).
  prefs: []
  type: TYPE_NORMAL
- en: These are the basic things we need to know about SBT to build professional Scala
    applications. SBT has many other features and possibilities, which you can check
    it out at [http://www.scala-sbt.org/0.13/docs/index.html](http://www.scala-sbt.org/0.13/docs/index.html).
    Next, we will learn about Typesafe Activator, which is a wrapper around SBT that
    makes it easy to use with Play framework applications.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrapping our Play framework app with Activator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lightband (former Typesafe) has another tool called Activator ([https://www.lightbend.com/community/core-tools/activator-and-sbt](https://www.lightbend.com/community/core-tools/activator-and-sbt)),
    which is a wrapper on top of SBT. Activator makes it easier to create Reactive
    applications using Scala, Akka, and the Play framework. Don't worry about the
    Play framework right now, because we will cover that in greater detail in [Chapter
    3](part0052.xhtml#aid-1HIT81 "Chapter 3. Developing the UI with Play Framework"),
    *Developing the UI with Play Framework*. Akka will be covered in detail in [Chapter
    8](part0097.xhtml#aid-2SG6I1 "Chapter 8. Developing a Chat with Akka"), *Developing
    a chat with Akka*.
  prefs: []
  type: TYPE_NORMAL
- en: Let's download and install Activator, and Bootstrap our architecture. Remember,
    we need to have Java 8 and Scala 2.11 already installed. If you don't have Java
    8 or Scala 2.11, go back to [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Introduction
    to FP, Reactive, and Scala"), *Introduction to FP, Reactive, and Scala* and install
    them.
  prefs: []
  type: TYPE_NORMAL
- en: First of all, you need to download activator from here: [https://www.lightbend.com/activator/download](https://www.lightbend.com/activator/download)
  prefs: []
  type: TYPE_NORMAL
- en: I recommend that you download the minimal package, and let Activator download
    and install the rest of the other dependencies for you. You can download the minimal
    package here: [https://downloads.typesafe.com/typesafe-activator/1.3.10/typesafe-activator-1.3.10-minimal.zip](https://downloads.typesafe.com/typesafe-activator/1.3.10/typesafe-activator-1.3.10-minimal.zip).
  prefs: []
  type: TYPE_NORMAL
- en: 'For this book, we will be using version 1.3.10\. We need to put the `activator/bin`
    folder in the OS PATH.If you want, you can install Activator using the terminal,
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want, you can install Activator using the terminal, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to test your installation, execute this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command will Bootstrap an architecture for you with Scala, Akka,
    Play framework, and SBT.
  prefs: []
  type: TYPE_NORMAL
- en: Activator will ask you a series of questions like such as what templates you
    might like to use. There are a couple of templates for Java applications, Scala
    applications, Akka applications, and Play applications. For now, we will pick
    option `6) play-scala`.
  prefs: []
  type: TYPE_NORMAL
- en: The first time you run Activator, it could take some time, because it will download
    all the dependencies from the web. When Activator finishes, you should see a folder
    called `ReactiveWebStore` in your file system.
  prefs: []
  type: TYPE_NORMAL
- en: 'The command `$ activator new ReactiveWebStore` shows the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bootstrapping our Play framework app with Activator](img/image00250.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You should enter the `ReactiveWebStore` folder if you type `$ ll` into the
    console, and you should also see the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The content is explained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**app**: This is the Play framework application folder where we will do the
    Scala web development.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**build.sbt**: This is the build file; as you can see, Activator has generated
    the SBT build config for us.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**conf**: This holds the application config files such as logging and Scala/Play
    app config.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**project**: This is the SBT project folder where we define SBT plugins and
    SBT version.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**test**: This holds the test source code for our application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**public**: This holds static HTML assets like Images, CSS, and JavaScript
    code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**bin**: This holds a copy of the activator script for Linux/Mac and Windows.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**libexec**: This holds the Activator jar. This is pretty useful, because Activator
    has packed itself with our application. So, let''s say you push this application
    for GitHub - when someone needs to access this app and download it from GitHub,
    the SBT file will be there, so they won''t need to download it from the Internet.
    This is especially useful when you are provisioning and deploying applications
    in production, which this book will cover in detail in [Chapter 10](part0116.xhtml#aid-3EK181
    "Chapter 10.  Scaling up"), *Scaling Up*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Activator shell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activator allows you to run REPL like we did in Scala and SBT. In order to
    get REPL access, you need to type the following on the console:'
  prefs: []
  type: TYPE_NORMAL
- en: $ activator shell
  prefs: []
  type: TYPE_NORMAL
- en: '![Activator shell](img/image00251.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Activator has plenty of tasks that you can use. In order to know all the available
    commands, you can type `$ activator help` on the console.
  prefs: []
  type: TYPE_NORMAL
- en: '![Activator shell](img/image00252.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Activator - compiling, testing, and running
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s get to business now. We will compile, run tests, and run our web application
    using Activator and SBT. First of all, let''s compile. Type `$ activator compile`
    on the console as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Let's run our tests now with the command `$ activator test`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Activator - compiling, testing, and running](img/image00253.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Finally, it's time to run your application. Type `$ activator run` on the console.
  prefs: []
  type: TYPE_NORMAL
- en: '![Activator - compiling, testing, and running](img/image00254.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Open your web browser, and go to the URL: `http://localhost:9000`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see a screen like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Activator - compiling, testing, and running](img/image00255.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congratulations! You've just Bootstrapped your first Scala / Play framework
    first. Activator makes our life easier. As you can see, with three commands, we
    were able to get a site up and running. You could do the same with just SBT, however,
    it would take more time, because we would need to get all the dependencies, configure
    all the source code structure, and add some sample HTML and Scala code. Thanks
    to Activator, we don't need to do any of that. However, we can still change all
    the SBT files and configs as per our wish. Activator is not tight with Scala or
    our application code, since it is more like a template-based code generator.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be improving the application by adding validations,
    database persistence, Reactive Microservices calling using RxScala and Scala,
    and much more.
  prefs: []
  type: TYPE_NORMAL
