["```java\ncurl -O https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein\n# The next step just set up the lein script in your path, you can do it any way you wish\nmv lein ~/bin\necho \"export PATH=$PATH:~/bin/\">> ~/.bashrc\nsource ~/.bashrc\n# Everything should be running now, let's test it\nlein help\n\n```", "```java\nlein repl\n\n```", "```java\nnREPL server started on port 55995 on host 127.0.0.1 - nrepl://127.0.0.1:55995\nREPL-y 0.3.5, nREPL 0.2.6\n\n```", "```java\nlein repl :connect localhost:55995\n\n```", "```java\n\"Hello world\"\n```", "```java\n(println \"Hello world\")\n```", "```java\nuser=> (javadoc java.util.List)\n;; Should open the javadoc for java.util.List\n\nuser=> (doc doc)\n-------------------------\nclojure.repl/doc\n([name])\nMacro\n  Prints documentation for a var or special form given its name\nnil\n\nuser=> (source doc)\n(defmacro doc\n\"Prints documentation for a var or special form given its name\"\n  {:added \"1.0\"}\n  [name]\n  (if-let [special-name ('{& fn catch try finally try} name)]\n    (#'print-doc (#'special-doc special-name))\n    (cond\n      (special-doc-map name) `(#'print-doc (#'special-doc '~name))\n      (find-ns name) `(#'print-doc (#'namespace-doc (find-ns '~name)))\n      (resolve name) `(#'print-doc (meta (var ~name))))))\nnil\n```", "```java\nuser=> 2\n2\nuser=> 3\n3\nuser=> 4\n4\nuser=> (* *1 *2 *3) ;; We are multiplying over here the last three values\n24 ;;We get 24!\nuser=> (/ 1 0) ;; Let's try dividing by zero\nArithmeticException Divide by zero clojure.lang.Numbers.divide (Numbers.java:156)\nuser=> *e\n#<ArithmeticException java.lang.ArithmeticException: Divide by zero>\n\nuser=> (.getMessage *e)\n\"Divide by zero\"\n```", "```java\nlein new app getting-started\ncd getting-started\nlein run\n# Hello, world!\n\n```", "```java\nlein uberjar\njava -jar target/uberjar/getting-started-0.1.0-SNAPSHOT-standalone.jar\n# Hello, World!\n\n```", "```java\n(1 2 3 4)\n(println \"Hello world\")\n(one two three)\n(\"one\" two three)\n```", "```java\n(println \"Hello world\")\n(one two three)\n```", "```java\n(defn some-function [times parameter]\n\"Prints a string certain number of times\"\n  (dotimes [x times]\n    (println parameter)))\n```", "```java\n(println parameter)\n(dotimes [x times] (println parameter))\n(defn some-function [times parameter] (dotimes [x times] (println parameter)))\n```", "```java\n(* 1 2 3)\n(+ 5 9 7)\n(/ 4 5)\n(- 2 3 4)\n(map inc [1 2 3 4 5 6])\n```", "```java\n(op parameter-1parameter-2 â€¦.)\n```", "```java\n(+ 1 2 3)\n```", "```java\n(map inc [1 2 3 4 5 6])\n```", "```java\n(defn some-function [times parameter]\n\"Prints a string certain number of times\"\n  (dotimes [x times]\n    (println parameter)))\n```", "```java\n(defn hello\n  ([] (hello \"Clojure\"))\n  ([name] (str \"Hello \" name)))\n```", "```java\n(ns getting-started.core\n  (:gen-class))\n\n(defn hello\n  ([] (hello \"Clojure\"))\n  ([name] (str \"Hello \" name)))\n\n(defn -main\n\"I don't do a whole lot ... yet.\"\n  [& args]\n  (println \"Hello, World!\")\n  (println (hello))\n  (println (hello \"Edu\")))\n```"]