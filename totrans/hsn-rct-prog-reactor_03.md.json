["```java\nFlux<Long> fibonacciGenerator = Flux.generate(() -> Tuples.<Long, Long>of(0L, 1L),(state, sink) -> {\n  if (state.getT1() < 0)\n     sink.complete();\n  else  \n     sink.next(state.getT1());\n  return Tuples.of(state.getT2(), state.getT1() + state.getT2());\n});\nfibonacciGenerator.subscribe(t -> {\n  System.out.println(t);\n});\n```", "```java\nfibonacciGenerator.filter(a -> a%2 == 0).subscribe(t -> {\n    System.out.println(t);\n});\n```", "```java\nfibonacciGenerator.filterWhen(a -> Mono.just(a < 10)).subscribe(t -> {\n    System.out.println(t);\n});\n\n```", "```java\nfibonacciGenerator.take(10).subscribe(t -> {\n    System.out.println(t);\n});\n```", "```java\nfibonacciGenerator.takeLast(10).subscribe(t -> {\n    System.out.println(t);\n});\n```", "```java\nfibonacciGenerator.last().subscribe(t -> {\n    System.out.println(t);\n});\n```", "```java\nfibonacciGenerator.skip(10).subscribe(t -> {\n    System.out.println(t);\n});\nfibonacciGenerator.skip(Duration.ofMillis(10)).subscribe(t -> {\n    System.out.println(t);\n});\nfibonacciGenerator.skipUntil(t -> t > 100).subscribe(t -> {\n    System.out.println(t);\n});\n\n```", "```java\nclass RomanNumber {\n    TreeMap<Integer, String> romanMap= new TreeMap<>();\n    RomanNumber(){\n        romanMap.put(1000, \"M\");\n        romanMap.put(900, \"CM\");\n        romanMap.put(500, \"D\");\n        romanMap.put(400, \"CD\");\n        romanMap.put(100, \"C\");\n        romanMap.put(90, \"XC\");\n        romanMap.put(50, \"L\");\n        romanMap.put(40, \"XL\");\n        romanMap.put(10, \"X\");\n        romanMap.put(9, \"IX\");\n        romanMap.put(5, \"V\");\n        romanMap.put(4, \"IV\");\n        romanMap.put(1, \"I\");\n    }\n    String toRomanNumeral(int number) {\n        int l =  romanMap.floorKey(number);\n        if ( number == l ) {\n            return romanMap.get(number);\n        }\n        return romanMap.get(l) + toRomanNumeral(number-l);\n    }\n}\n```", "```java\nRomanNumber numberConvertor= new RomanNumber();\nfibonacciGenerator.skip(1).take(10).map(t-> numberConvertor.toRomanNumeral(t.intValue())).subscribe(t -> {\n    System.out.println(t);\n});\n```", "```java\nclass Factorization {\n    Collection<Integer> findfactor(int number) {\n        ArrayList<Integer> factors= new ArrayList<>();\n        for (int i = 1; i <= number; i++) {\n            if (number % i == 0) {\n                factors.add(i);\n            }\n        }\n        return factors;\n    }\n}\n```", "```java\nfibonacciGenerator.skip(1).take(10).map(t-> numberConvertor.findfactor(t.intValue())).subscribe(t -> {\n    System.out.println(t);\n});\n```", "```java\nFactorization numberConvertor= new Factorization();\nfibonacciGenerator.skip(1).take(10).flatMap(t-> Flux.fromIterable(numberConvertor.findfactor(t.intValue()))).subscribe(t -> {\n   System.out.println(t);\n});\n```", "```java\nfibonacciGenerator.take(10).repeat(2).subscribe(t -> {\n    System.out.println(t);\n}); \n```", "```java\npublic void testFibonacciCollect() {\n    Flux<Long> fibonacciGenerator = Flux.generate(\n            () -> Tuples.<Long, Long>of(0L, 1L),\n            (state, sink) -> {\n                sink.next(state.getT1());\n                return Tuples.of(state.getT2(), state.getT1() + state.getT2());\n            });\n      fibonacciGenerator.take(10).collectList().subscribe(t -> {\n         System.out.println(t);\n      });\n}\n```", "```java\nfibonacciGenerator.take(10).\ncollectSortedList((x,y)-> -1*Long.compare(x,y))\n.subscribe(t -> {\n   System.out.println(t);\n});\n```", "```java\nfibonacciGenerator.take(10)\n.collectMap(t -> t%2==0 ? \"even\": \"odd\")\n.subscribe(t -> {\n   System.out.println(t);\n});\n```", "```java\nfibonacciGenerator.take(10).reduce((x,y) -> x+y).subscribe(t -> {\n    System.out.println(t);\n});\n```", "```java\nfibonacciGenerator.take(10).all(x -> x > 0).subscribe(t -> {\n    System.out.println(t);\n});\n```", "```java\nfibonacciGenerator.take(10)\n .concatWith(Flux.just( new Long[]{-1L,-2L,-3L,-4L}))\n .subscribe(t -> {\n    System.out.println(t);\n});\n\n```"]