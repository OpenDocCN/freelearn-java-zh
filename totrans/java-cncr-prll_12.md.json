["```java\n    mvn io.quarkus:quarkus-maven-plugin:2.7.5.Final:create \\\n        -DprojectGroupId=com.example \\\n        -DprojectArtifactId=quarkus-serverless \\\n        -DclassName=\"com.example.ProductResource\" \\\n    ProductResource class is a RESTful resource that defines the endpoints for managing products within the application. Using JAX-RS annotations, it provides methods for retrieving all products, fetching the count of products, and getting details of individual products by ID. This class serves as the primary interface for client interactions with the product-related data in the application. It demonstrates Quarkus features such as dependency injection, metrics, and OpenAPI documentation:\n\n    ```", "```java\n\n    ```", "```java\n    @ApplicationScoped\n    public class ProductRepository {\n        @Inject\n        DynamoDbClient dynamoDbClient;\n        private static final String TABLE_NAME = \"Products\";\n        public void persist(Product product) {\n            Map<String, AttributeValue> item = new HashMap<>();\n            item.put(\"id\", AttributeValue.builder().s(\n                product.getId()).build());\n            item.put(\"name\", AttributeValue.builder().s(\n                product.getName()).build());\n            // Add other attributes\n            PutItemRequest request = PutItemRequest.builder()\n                    .tableName(TABLE_NAME)\n                    .item(item)\n                    .build();\n            dynamoDbClient.putItem(request);\n        }\n        // Additional methods omitted for brevity\n    }\n    ```", "```java\n    @ApplicationScoped\n    public class ImageAnalysisCoordinator implements RequestHandler<S3Event, String> {\n        @Inject\n        EcsClient ecsClient;\n        @Inject\n        S3Client s3Client;\n        @Override\n        public String handleRequest(S3Event s3Event,\n            Context context) {\n                String bucket = s3Event.getRecords().get(\n                    0).getS3().getBucket().getName();\n                String key = s3Event.getRecords().get(\n                    0).getS3().getObject().getKey();\n            RunTaskRequest runTaskRequest = RunTaskRequest.builder()\n                .cluster(\"your-fargate-cluster\")\n                .taskDefinition(\"your-task-definition\")\n                .launchType(\"FARGATE\")\n                .overrides(TaskOverride.builder()\n                    .containerOverrides(\n                        ContainerOverride.builder()\n                            .name(\"your-container-name\")\n                            .environment(\n                                KeyValuePair.builder()\n                                    .name(\"BUCKET\")\n                                    .value(bucket)\n                                    .build(),\n                                KeyValuePair.builder()\n                                    .name(\"KEY\")\n                                    .value(key)\n                                    .build())\n                                .build())\n                            .build())\n                    .build();\n            // Implementation omitted for brevity\n        }\n    }\n    ```", "```java\n    @Readiness\n    @ApplicationScoped\n    public class ProductHealthCheck implements HealthCheck {\n        @Inject\n        DynamoDbClient dynamoDbClient;\n        private static final String TABLE_NAME = \"Products\";\n        @Override\n        public HealthCheckResponse call() {\n            HealthCheckResponseBuilder responseBuilder =         HealthCheckResponse.named(\n                \"Product service health check\");\n            try {\n                dynamoDbClient.describeTable(DescribeTableRequest.            builder()\n                        .tableName(TABLE_NAME)\n                        .build());\n                return responseBuilder.up()\n                        .withData(\"table\", TABLE_NAME)\n                        .withData(\"status\", \"accessible\")\n                        .build();\n            } catch (DynamoDbException e) {\n                return responseBuilder.down()\n                        .withData(\"table\", TABLE_NAME)\n                        .withData(\"status\",\n                            \"inaccessible\")\n                        .withData(\"error\", e.getMessage())\n                        .build();\n            }\n        }\n    }\n    ```", "```java\n    <profiles>\n        <profile>\n            <id>native</id>\n            <activation>\n                <property>\n                    <name>native</name>\n                </property>\n            </activation>\n                <properties>\n                    <skipITs>false</skipITs>\n                    <quarkus.package.type>native</quarkus.package.type>\n                    <quarkus.native.enabled>true</quarkus.native.enabled>\n                </properties>\n            </profile>\n        </profiles>\n    ```", "```java\n    # Start with a GraalVM image for native building\n    FROM quay.io/quarkus/ubi-quarkus-native-image:21.0.0-java17 AS build\n    COPY src /usr/src/app/src\n    COPY pom.xml /usr/src/app\n    USER root\n    RUN chown -R quarkus /usr/src/app\n    USER quarkus\n    RUN mvn -f /usr/src/app/pom.xml -Pnative clean package\n    FROM registry.access.redhat.com/ubi8/ubi-minimal\n    WORKDIR /work/\n    COPY --from=build /usr/src/app/target/*-runner /work/application\n    RUN chmod 775 /work/application\n    EXPOSE 8080\n    CMD [\"./application\", \"-Dquarkus.http.host=0.0.0.0\"]\n    ```", "```java\ndocker build --platform linux/amd64 -t myapp:latest .\n```", "```java\n# you can include properties to optimize the application for running as a native image:\n# Disable reflection if not needed\nquarkus.native.enable-http-url-handler=true\n# Native image optimization\nquarkus.native.additional-build-args=-H:+ReportExceptionStackTraces\n# Example logging configuration for production\n%prod.quarkus.log.console.level=INFO\n```", "```java\nAWSTemplateFormatVersion: '2010-09-09'\nTransform: AWS::Serverless-2016-10-31\nDescription: >\n    quarkus-serverless\nResources:\n    QuarkusFunction:\n        Type: AWS::Serverless::Function\n        Properties:\n            Handler: com.example.LambdaHandler\n            Runtime: provided.al2\n            CodeUri: s3://your-s3-bucket-name/your-code.zip\n            MemorySize: 128\n            Timeout: 15\n            Policies:\n                - AWSLambdaBasicExecutionRole\n```", "```java\nmvn clean package -Pnative -Dquarkus.native.container-build=true\n```", "```java\nsam package --output-template-file packaged.yaml --s3-bucket your-s3-bucket-name\nsam deploy --template-file packaged.yaml --stack-name quarkus-serverless --capabilities CAPABILITY_IAM\n```", "```java\nFROM registry.access.redhat.com/ubi8/openjdk-17:1.14\nENV LANGUAGE='en_US:en'\n# We make four distinct layers so if there are application changes the library layers can be re-used\nCOPY --chown=185 target/quarkus-app/lib/ /deployments/lib/\nCOPY --chown=185 target/quarkus-app/*.jar /deployments/\nCOPY --chown=185 target/quarkus-app/app/ /deployments/app/\nCOPY --chown=185 target/quarkus-app/quarkus/ /deployments/quarkus/\nEXPOSE 8080\nUSER 185\nENV JAVA_OPTS=\"-Dquarkus.http.host=0.0.0.0 -Djava.util.logging.manager=org.jboss.logmanager.LogManager\"\nENV JAVA_APP_JAR=\"/deployments/quarkus-run.jar\"\nENTRYPOINT [ \"/opt/jboss/container/java/run/run-java.sh\" ]\n```", "```java\n@QuarkusMain\n@ApplicationScoped\npublic class FargateImageAnalyzer implements QuarkusApplication {\n    @Inject\n    S3Client s3Client;\n    @Inject\n    RekognitionClient rekognitionClient;\n    @Override\n    public int run(String... args) throws Exception {\n        String bucket = System.getenv(\"IMAGE_BUCKET\");\n        String key = System.getenv(\"IMAGE_KEY\");\n        try {\n            DetectLabelsRequest labelsRequest = DetectLabelsRequest.            builder()\n                    .image(Image.builder().s3Object(\n                        S3Object.builder().bucket(\n                            bucket).name(key).build()\n                            ).build())\n                    .maxLabels(10)\n                    .minConfidence(75F)\n                    .build();\n            DetectLabelsResponse labelsResult = rekognitionClient.            detectLabels(labelsRequest);\n            DetectFacesRequest facesRequest = DetectFacesRequest.            builder()\n                    .image(Image.builder().s3Object(\n                        S3Object.builder().bucket(\n                            bucket).name(key).build()\n                            ).build())\n                    .attributes(Attribute.ALL)\n                    .build();\n            DetectFacesResponse facesResult = rekognitionClient.            detectFaces(facesRequest);\n            String analysisResult =             generateAnalysisResult(labelsResult, facesResult);\n            s3Client.putObject(builder -> builder\n                    .bucket(bucket)\n                    .key(key + \"_detailed_analysis.json\")\n                    .build(),\n                    RequestBody.fromString(analysisResult));\n        } catch (Exception e) {\n            System.err.println(\"Error processing image: \" +             e.getMessage());\n            return 1;\n        }\n        return 0;\n    }\n    private String generateAnalysisResult(\n        DetectLabelsResponse labelsResult, DetectFacesResponse         facesResult) {\n            // Implement result generation logic\n            return \"Analysis result\";\n    }\n}\n```", "```java\nFROM quay.io/quarkus/ubi-quarkus-native-image:21.0.0-java17 AS build\nCOPY src /usr/src/app/src\nCOPY pom.xml /usr/src/app\nUSER root\nRUN chown -R quarkus /usr/src/app\nUSER quarkus\nRUN mvn -f /usr/src/app/pom.xml -Pnative clean package\nFROM registry.access.redhat.com/ubi8/ubi-minimal\nWORKDIR /work/\nCOPY --from=build /usr/src/app/target/*-runner /work/application\nRUN chmod 775 /work/application\nEXPOSE 8080\nCMD [\"./application\", \"-Dquarkus.http.host=0.0.0.0\"]\n```", "```java\n@ApplicationScoped\npublic class ImageAnalysisCoordinator implements RequestHandler<S3Event, String> {\n    @Inject\n    EcsClient ecsClient;\n    @Inject\n    S3Client s3Client;\n    @Override\n    public String handleRequest(S3Event s3Event,\n        Context context) {\n            String bucket = s3Event.getRecords().get(\n                0).getS3().getBucket().getName();\n            String key = s3Event.getRecords().get(\n                0).getS3().getObject().getKey();\n            RunTaskRequest runTaskRequest = RunTaskRequest.builder()\n                .cluster(\"your-fargate-cluster\")\n                .taskDefinition(\"your-task-definition\")\n                .launchType(\"FARGATE\")\n                .overrides(TaskOverride.builder()\n                    .containerOverrides(\n                        ContainerOverride.builder()\n                        .name(\"your-container-name\")\n             // Replace with your actual container name\n                        .environment(KeyValuePair.builder()\n                            .name(\"BUCKET\")\n                            .value(bucket)\n                            .build(),\n                        KeyValuePair.builder()\n                            .name(\"KEY\")\n                            .value(key)\n                            .build())\n                        .build())\n                    .build())\n                .build();\n                try {\n                    ecsClient.runTask(runTaskRequest);\n                    return \"Fargate task launched for image analysis:                     \" + bucket + \"/\" + key;\n                } catch (Exception e) {\n                     context.getLogger().log(\n                         \"Error launching Fargate task: \" +                          e.getMessage());\n                        return \"Error launching Fargate task\";\n                }\n        }\n}\n```", "```java\nmvn package -Pnative -Dquarkus.native.container-build=true\n```", "```java\ndocker build -f src/main/docker/Dockerfile.jvm -t quarkus-ai-image-analysis .\n```", "```java\n<!-- Akka Dependencies -->\n    <dependency>\n        <groupId>com.typesafe.akka</groupId>\n        <artifactId>akka-actor-typed_${\n            scala.binary.version}</artifactId>\n        <version>${akka.version}</version>\n    </dependency>\n    <dependency>\n        <groupId>com.typesafe.akka</groupId>\n        <artifactId>akka-stream_${scala.binary.version}</artifactId>\n        <version>${akka.version}</version>\n    </dependency>\n<!-- AWS SDK -->\n    <dependency>\n        <groupId>software.amazon.awssdk</groupId>\n        <artifactId>s3</artifactId>\n        <version>2.17.100</version>\n    </dependency>\n```", "```java\npublic class HighConcurrencyService {\n    public static void main(String[] args) {\n        ActorSystem<Void> actorSystem = ActorSystem.create(\n            Behaviors.empty(), \"high-concurrency-system\");\n        S3Client s3Client = S3Client.create();\n        ExecutorService executorService = Executors.        newCachedThreadPool();\n// Use a compatible thread pool\n        for (int i = 0; i < 1000; i++) {\n            final int index = i;\n            executorService.submit(() -> {\n                // Create and start the actor\n                Behavior<RequestHandlerActor.HandleRequest> behavior =                 RequestHandlerActor.create(s3Client);\n                var requestHandlerActor = actorSystem.systemActorOf(\n                    behavior, \"request-handler-\" + index,\n                    Props.empty());\n                // Send a request to the actor\n                requestHandlerActor.tell(\n                    new RequestHandlerActor.HandleRequest(\n                        \"example-bucket\",\n                        \"example-key-\" + index,\n                        \"example-content\"));\n            });\n        }\n        // Clean up\n        executorService.shutdown();\n        actorSystem.terminate();\n    }\n}\n```", "```java\npublic class RequestHandlerActor {\n    public static Behavior<HandleRequest> create(\n        S3Client s3Client) {\n            return Behaviors.setup(context ->\n                Behaviors.receiveMessage(message -> {\n            processRequest(s3Client, message.bucket,\n                message.key, message.content);\n            return Behaviors.same();\n        }));\n    }\n    private static void processRequest(S3Client s3Client,\n        String bucket, String key, String content) {\n            PutObjectRequest putObjectRequest = PutObjectRequest.            builder()\n                .bucket(bucket)\n                .key(key)\n                .build();\n        PutObjectResponse response = s3Client.putObject(\n            putObjectRequest,\n            RequestBody.fromString(content));\n        System.out.println(\n            \"PutObjectResponse: \" + response);\n    }\n    public static class HandleRequest {\n        public final String bucket;\n        public final String key;\n        public final String content;\n        public HandleRequest(String bucket, String key,\n            String content) {\n                this.bucket = bucket;\n                this.key = key;\n                this.content = content;\n        }\n    }\n}\n```", "```java\nFROM amazoncorretto:17-alpine as builder\nWORKDIR /workspace\nCOPY pom.xml .\nCOPY src ./src\nRUN ./mvnw package -DskipTests\nFROM amazoncorretto:17-alpine\nWORKDIR /app\nCOPY --from=builder /workspace/target/high-concurrency-microservice-1.0.0-SNAPSHOT.jar /app/app.jar\nENTRYPOINT [\"java\", \"-jar\", \"/app/app.jar\"]\n```", "```java\nFROM --platform=$BUILDPLATFORM amazoncorretto:17\nCOPY . /app\nWORKDIR /app\nRUN ./gradlew build\nCMD [\"java\", \"-jar\", \"app.jar\"]\n```", "```java\ndocker buildx build --platform linux/amd64,linux/arm64 -t myapp:latest --push .\n```", "```java\nimport com.google.cloud.spanner.*;\ntry (Spanner spanner = SpannerOptions.newBuilder(\n    ).build().getService()) {\n    DatabaseClient dbClient = spanner.getDatabaseClient(\n        DatabaseId.of(projectId, instanceId, databaseId));\n    try (ResultSet resultSet = dbClient\n        .singleUse() // Create a single-use read-only //transaction\n        .executeQuery(Statement.of(\"SELECT * FROM Users\"))){\n    while (resultSet.next()) {\n        System.out.printf(\"User ID: %d, Name: %s\\n\",\n            resultSet.getLong(\"UserId\"),\n            resultSet.getString(\"Name\"));\n        }\n    }}\n```", "```java\nserver.port=8080\nspring.datasource.url=jdbc:mysql://localhost:3306/mydb\nspring.datasource.username=root\nspring.datasource.password=password\n```", "```java\n        <project  \n            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n            <modelVersion>4.0.0</modelVersion>\n            <groupId>com.example</groupId>\n            <artifactId>myapp</artifactId>\n            <version>1.0-SNAPSHOT</version>\n            <dependencies>\n                <dependency>\n                    <groupId>org.springframework.boot</groupId>\n                    <artifactId>spring-boot-starter-web</artifactId>\n                </dependency>\n                <!-- Add other dependencies here -->\n            </dependencies>\n            <build>\n                <plugins>\n                    <plugin>\n                        <groupId>org.springframework.boot</groupId>\n                        <artifactId>spring-boot-maven-plugin</artifactId>\n                    </plugin>\n                </plugins>\n            </build>\n        </project>\n        ```", "```java\n        plugins {\n            id 'org.springframework.boot' version '2.5.4'\n            id 'io.spring.dependency-management' version '1.0.11.RELEASE'\n            id 'java'\n        }\n        group = 'com.example'\n        version = '1.0-SNAPSHOT'\n        sourceCompatibility = '11'\n        repositories {\n            mavenCentral()\n        }\n        dependencies {\n            implementation 'org.springframework.boot:spring-boot-starter-web'\n            // Add other dependencies here\n        }\n        test {\n            useJUnitPlatform()\n        }\n        ```", "```java\nmvn clean package\n```", "```java\ngradle clean build\n```", "```java\n    # Use an official OpenJDK runtime as a parent image (Java 21)\n    FROM openjdk:21-jre-slim\n    # Set the working directory\n    WORKDIR /app\n    # Copy the executable JAR file to the container\n    COPY target/myapp-1.0-SNAPSHOT.jar /app/myapp.jar\n    # Expose the port the app runs on\n    EXPOSE 8080\n    # Run the JAR file\n    ENTRYPOINT [\"java\", \"-jar\", \"myapp.jar\"]\n    ```", "```java\ndocker build -t myapp:1.0 .\n```", "```java\ndocker run -p 8080:8080 myapp:1.0\n```", "```java\n    {\n        \"Version\": \"2012-10-17\",\n        \"Statement\": [\n            {\n                \"Effect\": \"Allow\",\n                \"Principal\": {\n                    \"Service\": \"ec2.amazonaws.com\"\n                },\n                \"Action\": \"sts:AssumeRole\"\n            }\n        ]\n    ```", "```java\naws iam create-role --role-name aws-elasticbeanstalk-ec2-role --assume-role-policy-document file://trust-policy.json\n```", "```java\naws iam attach-role-policy --role-name aws-elasticbeanstalk-ec2-role-java --policy-arn arn:aws:iam::aws:policy/AWSElasticBeanstalkWebTier\naws iam attach-role-policy --role-name aws-elasticbeanstalk-ec2-role-javaa --policy-arn arn:aws:iam::aws:policy/AWSElasticBeanstalkMulticontainerDocker\naws iam attach-role-policy --role-name aws-elasticbeanstalk-ec2-role-java --policy-arn arn:aws:iam::aws:policy/AWSElasticBeanstalkWorkerTier\n```", "```java\naws iam create-instance-profile --instance-profile-name aws-elasticbeanstalk-ec2-role-java\n```", "```java\naws iam add-role-to-instance-profile --instance-profile-name aws-elasticbeanstalk-ec2-role-java --role-name aws-elasticbeanstalk-ec2-role-java\n```", "```java\naws elasticbeanstalk create-application --application-name MyJavaApp\n```", "```java\naws elasticbeanstalk create-environment --application-name MyJavaApp --environment-name my-env --solution-stack-name \"64bit Amazon Linux 2023 v4.2.6 running Corretto 21\"\n```", "```java\naws s3 cp target/my-application.jar s3://my-bucket/my-application.jar\n```", "```java\naws elasticbeanstalk create-application-version --application-name MyJavaApp --version-label my-app-v1 --description \"First version\" --source-bundle S3Bucket= my-bucket,S3Key= my-application.jar\n```", "```java\naws elasticbeanstalk update-environment --environment-name my-env --version-label my-app-v1\n```", "```java\naws elasticbeanstalk describe-environment-health --environment-name my-env --attribute-names All\n```", "```java\naws ecr create-repository --repository-name my-application\n```", "```java\naws ecr get-login-password --region <your-region> | docker login --username AWS --password-stdin <account-id>.dkr.ecr.<region>.amazonaws.com\n```", "```java\ndocker tag my-application:1.0                                                                                         <account-id>.dkr.ecr.<region>.amazonaws.com/my-application:1.0\n```", "```java\ndocker push <account-id>.dkr.ecr.<region>.amazonaws.com/ my-application:1.0\n```", "```java\n{\n    \"family\": \"my-application-task\",\n    \"networkMode\": \"awsvpc\",\n    \"requiresCompatibilities\": [\n        \"FARGATE\"\n    ],\n    \"cpu\": \"256\",\n    \"memory\": \"512\",\n    \"containerDefinitions\": [\n        {\n            \"name\": \"my-application\",\n            \"image\": \"<account-id>.dkr.ecr.<\n            region>.amazonaws.com/my-application:1.0\",\n            \"portMappings\": [\n            {\n                \"containerPort\": 8080,\n                \"protocol\": \"tcp\"\n            }\n            ],\n            \"essential\": true\n        }\n    ]\n}\n```", "```java\naws ecs register-task-definition --cli-input-json file://task-definition.json\n```", "```java\naws ecs create-cluster --cluster-name cloudapp-cluster\n```", "```java\naws ecs create-service \\\n    --cluster cloudapp-cluster \\\n    --service-name cloudapp-service \\\n    --task-definition cloudapp-task \\\n    --desired-count 1 \\\n    --launch-type FARGATE \\\n    --network-configuration \"awsvpcConfiguration={\n        subnets=[subnet-XXXXXXXXXXXXXXXXX],securityGroups=[\n            sg-XXXXXXXXXXXXXXXXX],assignPublicIp=ENABLED}\"\n```", "```java\naws iam create-role --role-name lambda-role --assume-role-policy-document file://trust-policy.json\n```", "```java\naws iam attach-role-policy --role-name lambda-role --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n```", "```java\naws lambda create-function \\\n    --function-name java-lambda-example \\\n    --runtime java17 \\\n    --role arn:aws:iam::<account-id>:role/lambda-role \\\n    --handler com.example.LambdaHandler::handleRequest \\\n    --zip-file fileb://target/lambda-example-1.0-SNAPSHOT.jar\n```", "```java\naws lambda invoke --function-name java-lambda-example --payload '{\"name\": \"World\"}' response.json\n```", "```java\ncat response.json\n```", "```java\naz login\n```", "```java\naz group create --name myResourceGroup --location eastus\n```", "```java\naz vm create --resource-group myResourceGroup --name myVM --image UbuntuLTS --admin-username azureuser --generate-ssh-keys\n```", "```java\naz vm open-port --port 8080 --resource-group myResourceGroup --name myVM\n```", "```java\nssh azureuser@<vm-ip-address>\n```", "```java\nsudo apt update\nsudo apt install openjdk-21-jre -y\n```", "```java\nscp target/myapp-1.0-SNAPSHOT.jar azureuser@<vm-ip-address>:/home/azureuser\nssh azureuser@<vm-ip-address>\njava -jar myapp-1.0-SNAPSHOT.jar\n```", "```java\naz acr create --resource-group myResourceGroup --name myACR --sku Basic\n```", "```java\naz acr login --name myACR\n```", "```java\ndocker tag myapp:1.0 myacr.azurecr.io/myapp:1.0\ndocker push myacr.azurecr.io/myapp:1.0\n```", "```java\naz aks create --resource-group myResourceGroup --name myAKSCluster --node-count 1 --enable-addons monitoring --generate-ssh-keys\n```", "```java\naz aks get-credentials --resource-group myResourceGroup --name myAKSCluster\n```", "```java\n    apiVersion: apps/v1\n    kind: Deployment\n    metadata:\n        name: myapp-deployment\n    spec:\n        replicas: 1\n        selector:\n            matchLabels:\n                app: myapp\n        template:\n            metadata:\n                labels:\n                    app: myapp\n            spec:\n                containers:\n                    - name: myapp\n                image: myacr.azurecr.io/myapp:1.0\n                ports:\n                    - containerPort: 8080\n    ```", "```java\nkubectl apply -f deployment.yaml\n```", "```java\nkubectl expose deployment myapp-deployment--type=LoadBalancer --port=8080\n```", "```java\nbrew tap azure/functions\nbrew install azure-functions-core-tools@4\n```", "```java\nfunc init MyFunctionApp --java\ncd MyFunctionApp\nfunc new\n```", "```java\nmvn clean package\n```", "```java\nfunc azure functionapp publish <FunctionAppName>\n```", "```java\ngcloud init\n```", "```java\ngcloud config set project YOUR_PROJECT_ID\n```", "```java\ngcloud compute instances create my-java-vm --zone=us-central1-a --machine-type=e2-medium --image-family=ubuntu-2004-lts --image-project=ubuntu-os-cloud\n```", "```java\ngcloud compute ssh my-java-vm --zone=us-central1-a\n```", "```java\nsudo apt update\nsudo apt install openjdk-17-jdk -y\n```", "```java\ngcloud compute scp your-app.jar my-java-vm:~ --zone=us-central1-a\n```", "```java\njava -jar your-app.jar\n```", "```java\ngcloud container clusters create my-cluster --num-nodes=3 --zone=us-central1-a\n```", "```java\ngcloud container clusters get-credentials my-cluster --zone=us-central1-a\n```", "```java\ndocker tag your-app:latest gcr.io/YOUR_PROJECT_ID/your-app:latest\ndocker push gcr.io/YOUR_PROJECT_ID/your-app:latest\n```", "```java\n    apiVersion: apps/v1\n    kind: Deployment\n    metadata:\n        name: your-app\n    spec:\n        replicas: 3\n        selector:\n            matchLabels:\n                app: your-app\n        template:\n            metadata:\n                labels:\n                    app: your-app\n        spec:\n            containers:\n                - name: your-app\n            image: gcr.io/YOUR_PROJECT_ID/your-app:latest\n            ports:\n            - containerPort: 8080\n    ```", "```java\nkubectl apply -f deployment.yaml\n```", "```java\nkubectl expose deployment your-app --type=LoadBalancer --port 80 --target-port 8080\n```", "```java\nmkdir my-java-function\ncd my-java-function\n```", "```java\nmvn archetype:generate -DgroupId=com.example -DartifactId=my-java-function -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false\n```", "```java\n    <dependency>\n      <groupId>com.google.cloud.functions</groupId>\n      <artifactId>functions-framework-api</artifactId>\n      <version>1.0.4</version>\n      <scope>provided</scope>\n    </dependency>\n    ```", "```java\n    package com.example;\n    import com.google.cloud.functions.HttpFunction;\n    import com.google.cloud.functions.HttpRequest;\n    import com.google.cloud.functions.HttpResponse;\n    import java.io.BufferedWriter;\n    public class Function implements HttpFunction {\n        @Override\n        public void service(HttpRequest request,\n            HttpResponse response) throws Exception {\n            BufferedWriter writer = response.getWriter();\n            writer.write(\"Hello, World!\");\n            }\n        }\n    ```", "```java\ngcloud functions deploy my-java-function --entry-point com.example.Function --runtime java17 --trigger-http --allow-unauthenticated\n```"]