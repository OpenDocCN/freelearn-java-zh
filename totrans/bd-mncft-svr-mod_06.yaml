- en: Chapter 6. Player Permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Player Permissions is one feature that nearly every Bukkit server administrator
    wants to have on their server. In vanilla Minecraft, you are either an **OP**
    (**operator**), or simply a regular player. With permissions, you can create an
    infinite number of ranks between the two. There are several permission plugins
    available, which can be found on the Bukkit or Spigot websites. In the past, developers
    had to write their own code in order to support one or more of these permission
    systems. Luckily, the Bukkit API now has a basis for player permissions, which
    makes our job easier. We no longer need to learn a new API for every permissions
    plugin that exists. We only need to support Bukkit''s universal permissions system,
    which we can be sure will not change drastically at any moment. In this chapter,
    you will do just that and install a permissions plugin that helps you organize
    each player''s permissions. By the end of this chapter, you will be able to control
    your server in a way that ensures that untrusted players will not be able to spoil
    the fun for everyone else. We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The benefits of using permissions on your server and in plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What a permission node is and how it is used by developers and server administrators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a permission node to the `plugin.yml` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assigning a permission node to one of your plugin's commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing player permissions in-game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and configuring a third-party permissions plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using permission nodes throughout your plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The benefits of permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Permissions** give you more control over the players on your server. They
    allow you to prevent abuse from untrusted players. With permissions, you can give
    each player a specific rank based on their role in the server and how trustworthy
    they are. Let''s say that you want to give a specific player the ability to teleport
    to the location of some other players. With permissions, you can do so without
    giving that same player the ability to spawn items, kick/ban other players, and
    even stop your server completely! The simplest example of a useful permission
    is not giving new players the permission to build. This prevents someone from
    logging on to your server with the sole intention of defacing the world. They
    will be unable to destroy your or other players'' buildings.'
  prefs: []
  type: TYPE_NORMAL
- en: When programming plugins, you can assign certain permissions to specific commands
    or actions. This allows you to give the benefits of your plugins to privileged
    people only. For example, you may want only your good friend and yourself to have
    the option of enchanting your items using the `enchant` command. The first step
    to accomplishing this is to know what permission nodes are and how they work.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding permission nodes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **permission node** is a `string` that usually contains multiple words separated
    by periods. These permission nodes are given to players to give them special privileges
    on the server. An example of this is `minecraft.command.give`, which is the permission
    node that is needed to execute the `give` command. As you can see, it can be broken
    down into three parts, namely, the creator (Minecraft), the category (command),
    and the specific privilege (the `give` command). You will find most permission
    nodes structured this way. For a plugin, its permission nodes begin with the name
    of the plugin. This helps prevent any collision of nodes. If two plugins were
    to use the same permission node, then an administrator cannot limit access to
    one node and not the other node. You will also find that many plugins' permission
    nodes are only two words long. This is done when the plugin does not have many
    permissions. Therefore, there is no need for categories. On the other hand, for
    large plugins, you may wish to include numerous nested categories.
  prefs: []
  type: TYPE_NORMAL
- en: To help you understand permission nodes, we will create a permission node for
    the `Enchanter` plugin. The first word of the permission node will be the name
    of the plugin, while the second word will be the name of the command. If the permission
    node is directly related to a specific command, then it is wise to use the command
    name within the permission node. This will make your permissions simple to understand
    and easy to remember. The permission node for the `enchant` command will be `enchanter.enchant`.
    If we expect this plugin to have several permissions, then we can use `enchanter.command.enchant`
    instead. Either permission node is fine, but we will use the former in our example.
    Note that most developers tend to keep their permission nodes in lowercase. This
    is optional, but it usually prevents errors when typing in the node later. Once
    we have decided upon a permission node, we must add it to `plugin.yml` in order
    to use it with a plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a permission node to plugin.yml
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the `Enchanter` project, open the `plugin.yml` file. Adding permission nodes
    is similar to how commands are added. On a new line, add `permissions:`. Ensure
    that this line is not indented at all. On the lines that follow, add each permission
    node that our plugin will use, followed by a colon. The next few lines will provide
    the attributes of the permission, such as its description. The following code
    is an example of how the `plugin.yml` file will look with the `enchant` permission
    node added. Ensure that the indentations are similar. Note that the version attribute
    should also be updated to indicate that this is a new and improved version of
    the `Enchanter` plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The default attribute can be set to `true`, `false`, `op`, or `not op`. This
    determines who will have this permission; `true` means that everyone will have
    this permission, `false` means that no one will have it, `op` means that only
    operators will have it, and `not op` means that everyone except for the operators
    will have it. Who has this permission can be further modified by using a permission
    plugin, which will be discussed later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Just like with commands, you can assign multiple permissions to a plugin. For
    more information on the `plugin.yml` file, visit [http://wiki.bukkit.org/Plugin_YAML](http://wiki.bukkit.org/Plugin_YAML).
  prefs: []
  type: TYPE_NORMAL
- en: Assigning a permission node to a plugin command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have created the permission node, we want to prevent players from
    using the `enchant` command if they do not have the `enchanter.enchant` node.
    This process is simple, as it only requires adding a few more lines to the `plugin.yml`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the `enchant` command, we will add two attributes, namely `permission`
    and `permission-message`. The `permission` attribute is simply the permission
    node that is needed to execute the command. The `permission-message` attribute
    is a message that the player will see if they do not have the necessary permissions.
    After these additions, the `plugin.yml` file will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You may want to add colors to the permission message. This can be done by using
    the `§` symbol. This is the character that Minecraft uses to indicate a color
    code. This symbol can be easily typed by holding *Alt* while pressing *2* and
    then *1*. A list of all the colors and their corresponding code can be found at
    [http://www.minecraftwiki.net/wiki/Formatting_codes](http://www.minecraftwiki.net/wiki/Formatting_codes).
    An example of the `permissions-message` line with color support looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![Assigning a permission node to a plugin command](img/00037.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Testing player permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can test the new addition to the plugin by building the `jar` file and installing
    it on your server, as discussed in [Chapter 4](part0033_split_000.html#VF2I1-b66e70deee6e4ed481db4b113e303f23
    "Chapter 4. Testing on the Spigot Server"), *Testing on the Spigot Server*. Ensure
    that you reload or restart the server so that the newest version of the plugin
    is used. Remember that the version number is printed on the console when the plugin
    is enabled.
  prefs: []
  type: TYPE_NORMAL
- en: 'By testing on your server, you will find out that you can enchant items through
    the plugin. Since you are an OP, you have the `enchanter.enchant` node by default.
    *De-OP* yourself by using the following console command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now, you will no longer be able to use the `/enchant` command.
  prefs: []
  type: TYPE_NORMAL
- en: Using a third-party permissions plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will most likely have trusted players on your server with whom you wish
    to share the use of the `/enchant` command. However, these players are not trusted
    enough to be an OP. In order to share the use of this command, you will need to
    use a permissions plugin. The permissions plugin will allow you to create multiple
    groups of players. Each group will have different permissions assigned to it.
    Each player that plays on your server can then be assigned to a specific group.
    As an example, you can have four permission groups, namely *default*, *trusted*,
    *mod*, and *admin*. The *default* group will have the basic permissions. A new
    player who joins the server will be put into the *default* group. The *trusted*
    group will have a few more privileges. They will have access to specific commands,
    such as setting the time of day in the server world and teleporting players. The
    *mod* group stands for "moderator", and it will have access to many other commands,
    such as kicking or banning a player. Finally, the `admin` group, which stands
    for "administrator", will have the `/give` command and the `/enchant` command.
  prefs: []
  type: TYPE_NORMAL
- en: There are several permission plugins available at [dev.bukkit.org](http://dev.bukkit.org).
    Each permission plugin is created by a different developer. They have various
    features depending on how the developer decided to program it. Most of the popular
    permissions plugins that are used today were actually created before permissions
    were added to the API. Because of this, they may not utilize all of Bukkit's features.
    They also include additional features that are no longer needed, such as permission
    groups. The plugin that we will use is the one that I have developed myself, and
    it is called `CodsPerms`. `CodsPerms` is a simple and basic permissions plugin.
    Because `CodsPerms` follows the rules of the Bukkit API, the group configuration
    that you will learn in this chapter can also be utilized for other permission
    plugins. Instructions on where to download `CodsPerms` can be found at [http://codisimus.com/codsperms](http://codisimus.com/codsperms).
  prefs: []
  type: TYPE_NORMAL
- en: Once you have the `jar` file of the plugin, install it on your server as you
    would install one of your own plugins. With the plugin installed, the `permission`
    command will be available to you. Executing the `/perm` command will inform you
    of the various commands that are now at your disposal.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You need to have the `permissions.manage` node in order to use the permission
    command. Until we fully set up the permission plugin, you can either run these
    commands from the console, or give yourself the OP status.
  prefs: []
  type: TYPE_NORMAL
- en: You will see that there are commands that can be used to give permission nodes
    to players as well as remove them. This is useful if you want to add single nodes,
    such as giving yourself the `permissions.manage` node, but you will not want to
    use those commands for everyone who joins your server. To resolve this, we will
    configure the groups that were presented earlier.
  prefs: []
  type: TYPE_NORMAL
- en: These groups will be created as a permission node that contains several other
    child permission nodes. This will allow us to give a player a single group node,
    and they will then inherit all of its children. We can create these parent nodes
    within the `permissions.yml` file located in the `root` directory (the same folder
    in which you placed `spigot.jar`). The `permissions.yml` file is a `YAML` file
    like `plugin.yml`. Therefore, you should be familiar with the formatting. You
    can edit this file with a text editor. If you wish to use NetBeans, you can open
    the file by navigating to **File** | **Open File…** or by dragging and dropping
    the file in the NetBeans window.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Editing a `YAML` file incorrectly will cause it to not load completely. The
    issue that you will most likely face with the `YAML` files is having a *tab* in
    your document rather than *spaces*. This will cause your file to not load properly.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code is a sample of how `permissions.yml` might look after creating
    the groups that were specified earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Every group can inherit the permission nodes of another group by simply adding
    that group permission node as one of their children. In this example, the `admin`
    group inherits all the permissions from the `mod` group, the `mod` group inherits
    all the permissions from the `trusted` group, and the `trusted` group inherits
    all the permissions from the `default` group. Therefore, the `admin` group also
    inherits the `default` group's permissions through parentage. In this sample file,
    we have `default` set to `true` for the `group.default` parent node. This means
    that each player on the server will automatically have the `group.default` permission
    node. Because of the child nodes, each player will also have `minecraft.command.kill`
    and `minecraft.command.list`. Adding permissions to the default group will eliminate
    the need to hand out permissions to each player who joins your server.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the permission nodes earlier included permissions for some Minecraft
    commands as well as the permission for the `Enchanter` plugin. There are many
    more permissions than have already been listed. These are a few that are commonly
    used. The rest of the permissions for the Minecraft and Bukkit commands can be
    found at [wiki.bukkit.org/CraftBukkit_commands](http://wiki.bukkit.org/CraftBukkit_commands).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have populated the permissions `YAML` file, you will have to reload
    the server in order for the changes to take effect. Now, you can assign players
    to different groups. Use the following command with your own username to add yourself
    to the trusted group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: You will have the permissions defined in `group.trusted` within the `permissions.yml`
    file. Try putting yourself in various groups and using the `/enchant` commands
    and various other commands. Ensure that you are not an OP, as it will give you
    all the permissions regardless of which group you are in. Also, keep in mind that
    you must manually remove yourself from groups. If a player in the `admin` group
    is added to the `trusted` group, they will still have administrator privileges
    until they are removed from the admin group.
  prefs: []
  type: TYPE_NORMAL
- en: Using permission nodes throughout your plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In some cases, you may want to check whether a player has a specific permission
    from within your code. With the addition of a universal permission system within
    Bukkit, this is very easy, regardless of the permission plugin that you are using.
    Looking at the Bukkit API documentation, you will see that the `Player` object
    contains a `hasPermission` method, which returns a Boolean response. The method
    requires a `string` value, which is the permission node that is being checked.
    We can place this method in an `if` statement, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This block of code is unnecessary for the plugin because Bukkit can automatically
    handle player permissions for commands. To have a look at how this is properly
    used, let''s go back to `MyFirstBukkitPlugin` and add a permission check. The
    following code is the modified `onEnable` method, which will only say `Hello`
    to the players who have the necessary permission:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Remember that you will also have to modify `plugin.yml` to add the permission
    node to your plugin.
  prefs: []
  type: TYPE_NORMAL
- en: You can also broadcast a message to only the players who have a specific permission
    node. The documentation on this can be found at [https://hub.spigotmc.org/javadocs/spigot/org/bukkit/Bukkit.html#broadcast(java.lang.String,%20java.lang.String)](https://hub.spigotmc.org/javadocs/spigot/org/bukkit/Bukkit.html#broadcast(java.lang.String,%20java.lang.String)).
  prefs: []
  type: TYPE_NORMAL
- en: Try adding some permission nodes to some other projects that were created in
    the previous chapters. For example, add the `creeperhiss.scare` permission node
    to the plugin that has the `/scare <player>` command. As an added challenge, add
    an option that allows a player to type `/scare all` if they want to scare all
    the players on the server. In this case, you could check each player for the `creeperhiss.hear`
    permission node. That way, only those players will hear the sound. This is a good
    example of a permission node that should be set to `not op` by default.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The existing plugins, after being modified, are now more flexible with the aid
    of a permission plugin. With `CodsPerms` running on your server, you can have
    multiple groups for players. You can create plugins that give certain players
    privileged commands, and yet these same players will be prevented from using commands
    that can be misused. This new knowledge of Bukkit permissions will give you an
    increased control over both your plugins and server. Now that you know how to
    program both commands and permissions, you are ready to dive into some of the
    more challenging and exciting sections of the Bukkit API. In the next chapter,
    you will learn how to automate your server and customize it by using the Bukkit
    event system.
  prefs: []
  type: TYPE_NORMAL
