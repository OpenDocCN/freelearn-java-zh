- en: Chapter 4. Operation Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter will illustrate all the tasks that are required to perform jBPM
    operations by walking you through the following topics (focusing on the jBPM KIE
    workbench and related tools):'
  prefs: []
  type: TYPE_NORMAL
- en: 'jBPM environment configuration: Git and Maven repositories, organizational
    units, and user management with basic administration and permissions by **role-based
    access control** (**RBAC**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New jBPM asset management feature and module deployment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Process and task management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jBPM auditing and history log analysis with a working example of BAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Job and command scheduling with jBPM Executor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This chapter requires a working knowledge of both Git and Maven, which play
    a central role in the KIE workbench architecture. You will be asked to work with
    Git and to deploy artifacts to Maven. Let us start by reviewing the typical software
    architecture of a jBPM 6.2 development system with the aim to shed some light
    on the new system components and the way they interact.
  prefs: []
  type: TYPE_NORMAL
- en: An overview of the KIE workbench, Git, and Maven
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At first, the jBPM 6.2 architecture may seem a bit hard to grasp, since several
    new components have been integrated to provide the developers with industry standard
    tools for making it easier to support source code management and building/deployment.
    The jBPM platform integrates with the Git and Maven repositories so that you can
    share Kie business assets and publish Kie modules to remote teams. Let us see
    how Git and Maven fit into the Kie platform (shown in the following image).
  prefs: []
  type: TYPE_NORMAL
- en: '![An overview of the KIE workbench, Git, and Maven](img/9578OS_04_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The KIE workbench manages assets from its Kie Git repositories (either brand
    new or cloned from remote repositories). All Kie Git repositories can be found
    in the `.niogit` folder. The Kie deployment process installs the modules into
    the Kie Maven repository (located in the `repositories/kie` folder). This repository
    is publicly accessible via either the Git or the SSH protocol.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Git
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The KIE workbench enables us to create a new empty Git bare repository or to
    clone a remote Git repository into a brand new Kie bare repository. However, the
    workbench does not allow us to import assets into an existing branch of a Kie
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '"Bare" repositories exist in Git as a way of having a central (mainly remote)
    repository that a number of people can push to. For details on the bare Git repository,
    please see the official Git documentation.'
  prefs: []
  type: TYPE_NORMAL
- en: We can manage repositories from the **Authoring** | **Administration** menu
    (**Repository** item). Let us now put Kie repositories to work.
  prefs: []
  type: TYPE_NORMAL
- en: Cloning a remote repository
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We are going to clone the `chapter 4-pizza` example repository from GitHub.
    It hosts two projects that we will use later in the chapter to experiment with
    the deployment process. To clone a remote repository, open the **Repositories**
    | **Clone Repository** dialog (see the following screenshot) and configure the
    parameters as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Repository Name**: `chapter4-pizza`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Organizational Unit**: Use the default provided by jBPM or create a new one
    (This is not relevant at this stage; let us set its value to `demo`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Git URL**: `https://github.com/masteringjbpm6/chapter4-pizza.git`![Cloning
    a remote repository](img/9578OS_04_12.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We have already said that both cloned and new repositories are placed in the
    `.niogit` folder that you can find in the KIE installation folder. In addition,
    all KIE repositories are shared by default at the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '`git://localhost:9418/{reposname}` or `ssh://localhost:8001/{reposname}`'
  prefs: []
  type: TYPE_NORMAL
- en: where `{reposname}` is the **Repository Name** that you provided in the dialog
    window (for example, `chapter4-pizza`).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Never clone repositories from the KIE `.niogit` folder directly; always use
    the repository URL.
  prefs: []
  type: TYPE_NORMAL
- en: The `.niogit` folder also contains the `system.git` Kie repository, which is
    used as a store for metadata and settings; we will look at it in an upcoming section.
  prefs: []
  type: TYPE_NORMAL
- en: Making changes and committing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Modifying the project assets from the KIE workbench means that your changes
    are going to be committed into the KIE Git repository. Let us edit the jBPM process
    definition and see what happens upon saving the asset. Open the **Authoring**
    | **Project Authoring** menu (**Project Explorer**) and change the path to `demo/chapter4-pizza/pizzadelivery`;
    you should have the **pizzadelivery** process listed under the **Business Processes**
    group (see the following screenshot).
  prefs: []
  type: TYPE_NORMAL
- en: '![Making changes and committing](img/9578OS_04_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Just drag and move, for instance, the process start node, and then, select
    the **Save** menu item. The system prompts you with a **Commit** comment; enter
    `workbench editing` and press **OK**. Now, if we go and check the `.niogit/chapter4-pizza.git`
    repository and issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see the following two commits (the older commit was the one performed
    during the GitHub repository initial creation, and the other is your last commit):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We can get the first commit files by specifying the commit ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Pushing to the remote repository
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let us now check the remote origin setting for our `chapter4` repository first
    by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The following information is printed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to update the remote origin GitHub branch (master), we issue the following
    push:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Since the repository is protected, you will be prompted for the repository
    username and password (we are using our account here):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Removed for clarity…
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The remote branch is finally updated.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For fixes and enhancements, we encourage you to contribute to our example GitHub
    repository; in case you want to experiment with the example projects on your own,
    please follow the next section.
  prefs: []
  type: TYPE_NORMAL
- en: New repository
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'By cloning our GitHub repository into a KIE repository, you cannot (as you
    are not a contributor) send changes upstream. Apart from forking on GitHub, creating
    a new empty Kie repository is the right choice if you want KIE to centrally manage
    your projects. To do so, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new KIE Git repository; remember to leave the **Managed Repository**
    option unchecked for the moment, since this turns your repository into a Maven
    aware repository making it hard to adjust it when projects are added from an external
    source (we are going to address it in the *Asset management example* paragraph).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clone the remote GitHub repository from the command line, using your preferred
    Git client.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change your Git working copy remote origin to the new Kie repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Commit and push to the Kie repository `master` branch.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please see the *Git cloning and managed repository* section for a complete example
    of repository creation and project setup from GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: jBPM 6.2 introduces a distinction between the plain Git repository (unmanaged)
    and a new kind of "smart" repository (managed) that we can create by setting the
    **Managed Repository** option in the **New Repository** dialog window.
  prefs: []
  type: TYPE_NORMAL
- en: Managing assets – managed repositories
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As we have seen, managing Git project sources and Maven with KIE might be challenging:
    cloning, committing, setting repository remotes, pushing upstream, and so on,
    and we did not even consider Git branching in our example. jBPM 6.2 simplifies
    the way repositories and project source code are managed by introducing a new
    feature (asset management) designed to drive the development, build, and release
    processes thanks to a set of jBPM workflow processes, which kick in at various
    stages. Managed repositories, in short, provide project Maven version control
    and Git branch management.'
  prefs: []
  type: TYPE_NORMAL
- en: Governance workflow
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The asset management workflows are not fully automatic; they also require a
    managing actor (who must be in the `kiemgmt` role; see the KIE workbench `roles.properties`
    file) to complete specific tasks in order to make the workflow progress (selecting
    assets to release and/or review) or present the user with informative data (such
    as error data). The workflows trigger only when the following pre-defined operations
    take place (remember, this only applies to managed repositories):'
  prefs: []
  type: TYPE_NORMAL
- en: '**Repository creation or configuration**: After the Git repository is created
    or when the repository **Configure** button is selected, the workflow can automatically
    add a `dev` branch and a `release` branch for you (the `master` branch is always
    the default one).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Asset promotion**: When a user thinks that his/her assets are ready to be
    released, he/she can submit them for a so-called **promotion** by selecting the
    **Promote** button. The promotion requires the managing user to select (Git cherry
    picking) and approve the submitted changes by promoting them to the Git release
    branch, or to delay the process for a later review.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Project build**: The user performs **Build**, selecting a specific repository
    branch. The build involves the compiling and installing of the project as a Maven
    module into the internal Kie repository.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Release**: The user performs **Release**. The release feature involves the
    building and deploying processes at the repository level. All of your repository
    projects are built and then, published to the Kie runtime (the **Deploy To Runtime**
    option) so that business assets can be used. We can only release from branches
    starting with the **release** label (for example, release-1.0.1).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please check Chapter 9 of the jBPM 6.2 User Guide for additional details on
    asset management workflows.
  prefs: []
  type: TYPE_NORMAL
- en: Git cloning and managed repository
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'jBPM 6.2 does not support importing into a managed repository; the naïve solution
    mimics what we have seen in the (unmanaged) *New repository* paragraph with slight
    variations; let us see how to import our GitHub `chapter4-managed` repository
    projects:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us create a multi-module repository; the settings for each step are as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Repository Name**: `ManagedVesuvio`, and **Organizational Unit**: `demo`
    (not relevant now).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Multi-project Repository** (checked), **Automatically Configure Branches**
    (checked), and **Project Settings** (leave defaults).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In Step 2, the specified Maven GAV will be the Maven parent module GAV `(demo:ManagedVesuvio:1.0.0-SNAPSHOT)`.
    Two additional branches are created: `dev-1.0.0` and `release-1.0.0`. If we were
    not selecting automatic branch management, only the default `master` branch would
    be available and the repository could not be released as a whole (see the *Releasing*
    section for additional hints).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Clone the `chapter4-managed` example projects:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new remote named `kievesuvio` (or if you prefer, replace the origin):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change into the `chapter4-managed` folder, and add the files and commit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get updates from the `master` branch and push to the KIE `ManagedVesuvio` `dev-1.0.0`
    branch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: At this stage, the `dev-1.0.0` branch is updated, but our `ManagedVesuvio` repository
    structure is not aware of the branch changes while the KIE Project **Explorer**
    is. This is due to the fact that the repository structure shows the Maven multi-module
    configuration (more details in the *Managed repository and Maven* section) and
    that its `pom.xml` file is stale. We have to add the `napoli` and `vesuvio` projects
    manually to it.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In File Explorer (**Authoring** | **Administration**), click on `pom.xml` and
    add the `<modules>` element as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After saving the file, KIE should pick up the projects and the repository structure
    should display our modules.
  prefs: []
  type: TYPE_NORMAL
- en: '![Git cloning and managed repository](img/9578OS_04_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The repository is now properly configured, and we are ready to tackle the asset
    management features.
  prefs: []
  type: TYPE_NORMAL
- en: Asset management example
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `napoli` and `vesuvio` projects each contain a basic process definition.
    The `napoli` process (`napoli.bpmn2`) includes the `vesuvio` process (`vesuvio.bpmn2`)
    as a reusable sub-process (more on BPMN2 elements in [Chapter 5](ch05.html "Chapter 5. BPMN
    Constructs"), *BPMN Constructs*). The users perform asset management tasks by
    selecting the appropriate button in the **Repository** | **Repository Structure**
    view (see the following screenshot) and by completing human tasks in the **Task**
    | **Task List** window.
  prefs: []
  type: TYPE_NORMAL
- en: '![Asset management example](img/9578OS_04_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The asset management tasks are assigned to users owning the `kiemgmt` role only;
    therefore, ensure that you log into the KIE workbench with the `admin` user since
    this is the only preset user owning this role.
  prefs: []
  type: TYPE_NORMAL
- en: Promoting assets
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'We submit the assets (the napoli and vesuvio modules) for promotion to the
    release branch:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select **Project** | **Authoring and Repository** | **Repository Structure**;
    select the **Promote** button and enter the target branch: `release-1.0.0`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Tasks** | **Task List** window, you should now be assigned a **Select
    Assets to Promote** task; click on it, **Claim** the task, **Promote All** assets,
    and **Complete** the task as shown in the following screenshot:![Promoting assets](img/9578OS_04_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Head back to **Repository Structure**, and by selecting the `release-1.0.0`
    branch, you should see the two promoted projects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Assets are now merged into the Git repository `release-1.0.0` branch.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Releasing
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'In **Repository Structure**, select the `release-1.0.0` branch and press the
    **Release** button. Optionally, bump the Release Version for the module, toggle
    **Deploy to Runtime** (user: `admin`, password: `admin`, Server URL: `default`),
    and then proceed.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`napoli` and `vesuvio` are now installed into the KIE Maven repository, and
    you can find them among your **Authoring** | **Artifact Repository** artifacts.
    In case you selected **Deploy to Runtime**, the contained process definitions
    would be made available in **Process Management** | **Process Definitions**.'
  prefs: []
  type: TYPE_NORMAL
- en: Building (single project)
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'The release process always runs through a build process for all the managed
    repository projects; the build/release process can also be performed, for all
    kind of repositories (managed/unmanaged), on the single project by the **Build**
    menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Build & Install**: Deploy the artifact to the Kie repository and the system
    Maven repository (if any)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Build & Deploy**: Perform the install step (see previously), and then, deploy
    the module to the Kie runtime: business artifacts are available for runtime usage'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will discuss more on deployments in the *KIE deployments* section
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Asset versioning history
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: All Git versioning information for the assets is available in the **Overview**
    tab. For instance, by clicking on the **napoli** process, we can see all the commit
    logs and we can load the previous Git versions for the assets with the **Select**
    and **Current** buttons (see the following screenshot; the comments may vary).
  prefs: []
  type: TYPE_NORMAL
- en: '![Asset versioning history](img/9578OS_04_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Managed repository and Maven
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The managed Git repositories are themselves stored as Maven modules in the `repositories/kie`
    repository. They can be Single Project or Multi-Project repositories; this affects
    the way that the Mavenized Kie projects are configured.
  prefs: []
  type: TYPE_NORMAL
- en: The Single Project repository contains a single Kie Maven project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Multi-Project repository contains a Maven multi-module project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The parent module `pom.xml` file shows that it is a `pom` (multi) module containing
    the `napoli` and `vesuvio` modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The `napoli` module `pom.xml` file shows that it depends on the `vesuvio` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please refer to [http://maven.apache.org/guides/mini/guide-multiple-modules.html](http://maven.apache.org/guides/mini/guide-multiple-modules.html)
    for an introduction to Maven multi-module management.
  prefs: []
  type: TYPE_NORMAL
- en: Governance process definitions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The jBPM asset management process definitions and their related business logic
    can be found in the Drools project called `guvnor-asset-mgmt`. This module is
    pre-deployed and is loaded by the KIE workbench; it is regularly listed in **Artifact
    Repository**, and you can find its process definitions in the **Deployments**
    | **Process Deployments** window and their running instances in the **Process
    Instances** window.
  prefs: []
  type: TYPE_NORMAL
- en: A final note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The KIE workbench project editor only lets you edit, build, and release the
    proper Kie modules and not plain Maven modules (which lack the `kmodule.xml` file).
    So, if you only have a single Kie module, it does not make much sense to clone
    a bunch of modules into a Kie multi-project managed repository; try to design
    your repository content with a grain of salt so that your Kie runtime and development
    environment is always clean and healthy. Now, instead of using the KIE workbench
    to complete the configuration for our next example (left for an exercise to the
    reader), we switch to an alternative tool, the KIE CLI (which stands for command
    line interface), and see different ways to perform the common operation tasks.
  prefs: []
  type: TYPE_NORMAL
- en: An overview of the kie-config-cli tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. Building Your First BPM Application"), *Building
    Your First BPM Application* (see the *Creating your first jBPM project* section)
    introduced several KIE console features (repositories and organizations management,
    module deployment, and so on). The KIE CLI utility provides the administrator/user
    with the tools to perform common tasks related to organizational units, repository,
    user permissions, and deployment management at the console/shell level.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The tool project is hosted at GitHub: [https://github.com/droolsjbpm/kie-wb-distributions/tree/master/kie-config-cli](https://github.com/droolsjbpm/kie-wb-distributions/tree/master/kie-config-cli).'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the tool distributions from the JBoss snapshot Maven repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://snapshots.jboss.org/maven2/org/kie/kie-config-cli](http://snapshots.jboss.org/maven2/org/kie/kie-config-cli).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The previous section explained in detail how KIE handles Git repositories for
    source projects, and we previewed the existence of a KIE system Git repository;
    the KIE CLI tool interfaces with it and operates in two modes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**online (default and recommended)**: Upon startup, it connects to the system
    repository by using the Git service embedded in `kie-wb`. All changes are local
    and published to the upstream only when the `push-changes` CLI command is explicitly
    executed. The `exit` command will publish all local changes; to discard local
    changes upon exiting the CLI, the `discard` command shall be used'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**offline**: Creates and manipulates the Kie system repository directly on
    the server (no discard option is available)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The system repository stores the private configuration/settings data for the
    KIE workbench: how editors behave, organizational groups, security, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: The system repository is located in the KIE `.niogit` folder (`.niogit/system.git`).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The core Git backend features are provided by the Red Hat Uberfire framework.
    [http://www.uberfireframework.org](http://www.uberfireframework.org).
  prefs: []
  type: TYPE_NORMAL
- en: By default, the KIE workbench monitors the `system.git` repository changes,
    thanks to its backend services, and updates its UI accordingly. We will continue
    our system repository description in the next section after our next example environment
    has been set up. We could have accomplished the job through the KIE workbench
    features, but we want you to go hands on and put the KIE console at work, getting
    acquainted in what is going on behind the curtains.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting (online mode)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After launching the tool (by the `kie-config-cli` script in the installation
    folder), let us start by connecting to the KIE system repository on the localhost.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SSH is to be preferred over the Git protocol for security reasons.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Creating an organizational unit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The organizational unit is required by the KIE workbench in order to create
    repositories and users and have RBAC rule control that is entitled to perform
    certain tasks.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Creating a repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have already seen how to clone a Git repository from the KIE workbench. Let
    us now create a new Git repository (local, bare, and unmanaged; no username/password
    required) in which we can store our new projects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Defining role-based access control rules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete the setup procedure for our example, we set some RBAC rules to
    our masterjbm6 repository; the organization has no roles set, so in order to constrain
    the access to the repository, we add roles to the repository object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Adding jBPM console users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`users.properties` and `roles.properties` define the users (with their roles)
    that are enabled to log into the jBPM console.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us edit `users.properties` and add two new users:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit `roles.properties` and associate the users with the roles that we have
    created in the previous step:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Adding the repository to an organization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each KIE Git repository must be bound to an organization; the organization is
    in charge of controlling accesses to it and giving organization users operation
    permissions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Pushing changes to system.git
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `push-changes` command sends changes to the KIE `system.git` repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: As a consequence, your KIE workbench gets a refresh, displaying the updated
    settings on your UI.
  prefs: []
  type: TYPE_NORMAL
- en: More on the system.git repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At this point, you should have an idea of what the `system.git` repository
    is for; as a final exercise, let us clone it and have a look inside it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember to never push changes to system repository from outside the KIE CLI
    tool; it would likely mess up the entire KIE workbench installation!
  prefs: []
  type: TYPE_NORMAL
- en: 'The system repository contains some entities (organizational units and repositories)
    and internal configuration files; here, we can find our brand new organization
    and repository description files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`masteringjbpm6.repository`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`packt.organizationalunit`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `masteringjbpm6.repository` file content is as follows (please note the
    `security:role` settings):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Now that we are done with our new KIE Git repositories and environment configuration,
    we are ready to tackle the new deployment feature and the Kie-Maven integration,
    the subject of our next example.
  prefs: []
  type: TYPE_NORMAL
- en: KIE deployments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The jBPM 6 platform introduced a brand new deployment process; the previous
    proprietary mechanism that leveraged the Guvnor packages (backed by a **Java Content
    Repository** (**JCR**) and the Drools `KnowledgeAgent` (`changeset.xml`) was replaced
    with the widely adopted Apache Maven tool. This greatly improved the development
    process both in terms of tool configuration (more convention/configuration oriented)
    and support, standardization, and deployment flexibility.
  prefs: []
  type: TYPE_NORMAL
- en: When you deploy your project, you physically create a KIE deployment unit (KJAR);
    this module is a Maven-enabled project and is a compressed standard Java archive
    that contains all the project's business assets (processes, workitem handlers,
    business rules, forms, and so on) as well as its knowledge session and runtime
    declarative metadata descriptor (`META-INF/kmodule.xml`).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `kmodule.xml` file is extensively covered in the official jBPM and Drools
    documentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The unique ID of a KIE module is built starting from its Maven GAV (GroupId,
    ArtifactId, Version) with the addition of the knowledge base name (the default
    knowledge base name is empty; we will return to this in [Chapter 6](ch06.html
    "Chapter 6. Core Architecture"), *Core Architecture*), for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The jBPM runtime resolves KJAR dependencies while automatically searching for
    other Maven modules in the configured Maven repositories (either by the project
    `pom.xml` file embedded in the KIE JAR or through the Maven `settings.xml` file)
    using the Drools KIE-CI components. You can alternatively use the `kie.maven.settings.custom`
    system property and point to any Maven `settings.xml` file.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Refer to [Chapter 6](ch06.html "Chapter 6. Core Architecture"), *Core Architecture*,
    particularly to the *Repositories and scanner* section, for detailed information
    on class loading and resolving module dependencies at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: 'The default KIE Maven repository artifacts (the `repositories/kie` folder)
    are remotely accessible at the following URL: `http://{jbpmconsole-host}:{port}/jbpm-console/maven2wb/`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us now summarize the core actions that are performed during the deployment
    process:'
  prefs: []
  type: TYPE_NORMAL
- en: Maven install of the module into the KIE Maven repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maven deploy of the module into your system Maven repository (the Maven `settings.xml`
    file from the Maven home is used, or the `kie.maven.settings.custom` system property
    is checked).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The jBPM database table called `DeploymentStore` is updated with the deployment
    descriptor (in the XML format). This change has been introduced with the jBPM
    6.2 release; prior to this, the deployment information was stored inside the `system.git`
    repository.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The release/deployment action never deploys the Kie module's dependencies; to
    avoid missing dependencies runtime errors, you have to provide the correct dependency
    artifacts by installing them into the Maven repository before you put your Kie
    module assets to work.
  prefs: []
  type: TYPE_NORMAL
- en: The following figure captures the standard Maven repository configuration when
    working with the KIE console; the KIE project is deployed into the internal KIE
    Maven repository first, which synchronizes with the remote **Maven Repository**,
    and then, it provides remote public access (HTTP) to any application in order
    to resolve its dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: '![KIE deployments](img/9578OS_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Artifacts and KIE modules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A KIE module may depend on a number of additional Maven artifacts. The KIE
    workbench provides you with a view of your KIE Maven repository by selecting the
    **Authoring** | **Artifact Repository** menu item. The **Path** column displays
    the Maven repository URL for the artifact; just to clarify, let us have a look
    at the `napoli` Kie module that we released from our `ManagedVesuvio` repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Artifact Name**: `napoli-1.0.0.jar`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Path**: `packt/napoli/1.0.0-SNAPSHOT/napoli-1.0.0.jar`'
  prefs: []
  type: TYPE_NORMAL
- en: 'This artifact is available at the following Maven artifact URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Remember that while **Artifact Repository** is a snapshot of the KIE Maven repository
    content, the KIE **Deploy** | **Deployments** menu item exclusively displays the
    valid KIE modules (KJARs), which are loaded and validated from the KIE console
    runtime.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`org.guvnor.m2repo.dir`: System properties set the path where the Maven repository
    folder will be stored; the default is `${jBPM-install-directory}/repositories/kie`.'
  prefs: []
  type: TYPE_NORMAL
- en: Deployment options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The KJAR artifacts must always be deployed to the KIE console's Maven repository
    so that we can centrally manage them and have the console behave consistently.
    Given this, thanks to both the introduction of the Maven repository style and
    the new breed of tools (the KIE console and the Eclipse BPMN tools), you can tailor
    the deployment process to your development environment with a nice degree of flexibility.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here you have some viable deployment options:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a project (Mavenized by default) from the KIE console into a configured
    KIE Git repository; Git clone and pull from Eclipse, continue the development
    from Eclipse (add business models and so on), push changes to KIE (the KIE console
    automatically refreshes its repository view); build and deploy from KIE.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a Maven project from Eclipse (remember to add the `kmodule.xml` file
    and the jBPM dependencies in `pom.xml`); create all your business artifacts, and
    develop a unit test from Eclipse; push to KIE; maybe make some fixes from KIE
    and then build and deploy.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a Maven project from Eclipse as in the previous solution; install with
    Maven (either from Eclipse or from the command line); have the KIE console advertise
    the new KIE deployment module uploading the new artifact from the console (**Deploy**
    | **Deployments**).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From the Kie console, create a repository clone from a remote Git repository;
    create a project, add assets, and then, save and commit. Deploy to Maven and push
    changes to the remote Git repository.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thanks to its Maven and Git integration, the KIE platform can fit very flexibly
    into a complex development environment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deployment by example – the Pizza projects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We had a preview of installing and deploying with the `ManagedVesuvio` repository
    release process where two KIE modules (one is dependent on the other) were released.
    Let us go hands on with a different module example: a KIE module (main project)
    and a plain module (dependency). These pizza example projects are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Pizzadelivery`: The KJAR module (it contains the process definition)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Pizzamodel`: A utility project with Java classes that model our business objects
    (Order, Pizza, and so on)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Pizzadelivery` project depends upon the `Pizzamodel` project. Let us start
    by reviewing the example process definition (we will use the same process for
    our BAM example solution later, in the closing paragraph).
  prefs: []
  type: TYPE_NORMAL
- en: The process definition – pizzadelivery
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The example process definition captures a typical takeaway pizza process:'
  prefs: []
  type: TYPE_NORMAL
- en: An order is placed and Nino manages the incoming order by phone (the **Handle
    Incoming Order** task).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Maria gets the order details from Nino and hands off a sticky note to the pizza
    makers (the **Order Assignment** task).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A pizza maker (either Mario or Luigi) starts preparing the pizza (the **Make
    the Pizza** task), while, at the same time, Maria assigns the order delivery to
    a pizza boy (the **Assign the Delivery** task). The completion of both the delivery
    assignment task and the making pizza task (parallel tasks, more on this in [Chapter
    5](ch05.html "Chapter 5. BPMN Constructs"), *BPMN Constructs*) means that the
    pizza is ready to be delivered.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Salvatore delivers the pizza (the **Pizza Delivery** task).![The process definition
    – pizzadelivery](img/9578OS_04_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deploying pizzas
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: First, we make the dependency available through Maven, and then, we deploy the
    module through the KIE workbench. Let us import the sources into our new KIE repository
    (the one we set up in the *Creating a repository* section).
  prefs: []
  type: TYPE_NORMAL
- en: Git and project configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'At this stage, you should be quite familiar with importing a source project
    into the KIE repository:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Clone the examples repository from our example GitHub repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the cloned repository projects to the local (unmanaged) `masteringjbpm6`
    repository section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'By issuing a `git remote` command, we see the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s now push only the sample KIE module project to the new remote (origin):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The aim here is to send the KIE console (through Git) only the KIE project,
    and not to create additional sources of issues. We are now going to provide the
    KIE `pizzadelivery` project Maven dependencies (`pizzamodel.jar`) through our
    Maven repository.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying the dependency
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By switching to **Project Authoring** | **Project Explorer**, we can find the
    PizzaDelivery project (navigate through the **packt/masteringjbpm6** repository
    breadcrumb). Press the **Open Project Editor** button, and by selecting the **Project
    Settings** | **Dependencies** item from the dropdown list, we see that the `pizzadelivery`
    module depends on the `pizzamodel` artifact (see the picture below), which is
    not present in the Maven repository yet.
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying the dependency](img/9578OS_04_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The **Messages** tab reports this issue, accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Unresolved dependency com.packt.masterjbpm6:pizzamodel:1.0.0-SNAPSHOT**'
  prefs: []
  type: TYPE_NORMAL
- en: Providing artifacts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'What is going on now should be clear: the KIE dependency mechanism (the "scanner"
    we will talk about it in [Chapter 6](ch06.html "Chapter 6. Core Architecture"),
    *Core Architecture*) cannot resolve the `pizzadelivery` project''s dependencies
    (loaded from its `pom.xml` file) while scanning through the available Maven repositories;
    to address the issue, we are going to supply the missing artifact with two steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Maven install: Executing an `mvn clean install` at the `pizzamodel` project
    root (or using the Eclipse **Run As Maven Build** integrated feature) performs
    the build and install of the artifact in our Maven repository so that the dependency
    can be resolved at runtime.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Artifact repository upload: Go to the Kie console **Authoring** | **Artifact
    Repository** page and click the **Upload** button; select the `pizzamodel` JAR
    file from your Maven repository folder (`com/packt/masterjbpm6`). The KIE console
    will copy the artifact to its internal Maven repository.![Providing artifacts](img/9578OS_04_02.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The artifact is now available, and if you hit the **Refresh** button in the
    **Messages** panel, the issue should be fixed.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We are now ready to deploy. In the **Projects Explorer** tab, select the **Tools**
    | **Project Editor** menu item. Check whether the `PizzaDelivery` module Maven
    GAV properties are correct and click the **Build & Deploy** button.
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying](img/9578OS_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Please note that during deployment, the KIE console will try to resolve and
    verify all of your project dependencies, potentially hitting a number of remote
    Maven repositories (depending on your configuration) and taking some time to finish.
    Ensure that your Internet connection is active or set up a Maven proxy repository
    (highly recommended).
  prefs: []
  type: TYPE_NORMAL
- en: 'The application server console traces the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember that you cannot deploy a deployment unit having the same ID (overwriting
    it), irrespective of whether it has active (running) process instances or not;
    an undeploy action is required (see the next section).
  prefs: []
  type: TYPE_NORMAL
- en: 'The logs confirm that the deployment was successfully completed; we can see
    our KJAR module listed in the **Deploy** | **Deployments** tab. Remember that
    for the deployment process to succeed (at least with jBPM releases up to 6.2),
    your `kmodule.xml` must either:'
  prefs: []
  type: TYPE_NORMAL
- en: Declare an empty `<kmodule>` element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Declare a `<ksession>` element with the following attributes: `type="stateful"
    default="true"`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Deploying](img/9578OS_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For the sake of thoroughness, check your jBPM data store for the deployment
    entry in the `DEPLOYMENTSTORE` table; we should see that a new row has been added.
  prefs: []
  type: TYPE_NORMAL
- en: 'The table row has a DEPLOYMENTID column: `com.packt.masterjbpm6:pizzadelivery:1.0.0`
    and a DEPLOYMENTUNIT column, which contains the actual deployment descriptor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: This is, actually, the third step of the deployment process (see the *KIE deployments*
    section).
  prefs: []
  type: TYPE_NORMAL
- en: Adding a KIE module manually
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Even though you have built and installed your KIE module from outside the KIE
    workbench (to your system Maven repository only, maybe using Eclipse IDE and a
    Maven install goal), you can always deploy it to KIE later. Manually adding a
    deployment unit means that you are making this (Maven installed) module available
    to the KIE runtime. From the **Deploy** | **Deployments** perspective, you can
    add new deployment units (the **New Deployment** button); just provide the Maven
    GAV for the project you want to deploy and, optionally, the knowledge base and
    the knowledge session name.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In addition to this, you can select the `ksession` runtime strategy that fits
    your requirements: a Singleton, Per Request, or Per Process instance (See [Chapter
    6](ch06.html "Chapter 6. Core Architecture"), *Core Architecture* for runtime
    strategies).'
  prefs: []
  type: TYPE_NORMAL
- en: The KIE workbench will provide a new `kmodule.xml` file and meta information,
    converting your plain JAR module to a new KIE module. You cannot create a new
    deployment unit if the matching Maven artifact is not available in the KIE Maven
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: Process and task management applied – the PizzaDelivery process
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The KIE workbench allows you to manage process instances and interact with
    process tasks. You can do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Send a signal to a specific process instance or a bulk signal (broadcast to
    all process instances).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Abort a specific process instance or perform a bulk abort—the abort terminates
    the instance(s) and all the pending tasks. All data pertaining to the process
    and its tasks are removed from the jBPM database tables.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get the process details— the details page includes the auditing log taken from
    the default jBPM database auditing tables (we will talk about auditing in the
    last section and in [Chapter 6](ch06.html "Chapter 6. Core Architecture"), *Core
    Architecture*).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Start, release, and complete a task.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Starting the Process
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Open the **Process Management** | **Process Definitions** tab and click the
    **Start** icon button next to our brand new deployed PizzaDelivery process definition;
    a new process instance starts.
  prefs: []
  type: TYPE_NORMAL
- en: Undeployment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The undeployment action removes the deployment unit's configuration file only
    from the jBPM database table, leaving the Maven artifact in place.
  prefs: []
  type: TYPE_NORMAL
- en: User management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We introduced the PizzaDelivery process in the example setup section; the process
    requires five different human actors:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Incoming orders management**: Nino'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Order assignments**: Maria'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pizza cooking**: Either Mario or Luigi'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Delivery assignments**: Maria'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pizza deliveries**: Salvatore'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In order to use the KIE console to exercise our first process instance, we need
    to add these process participants (the actors) to the KIE runtime. Edit the `user.properties`
    and the `roles.properties` files in the `$JBOSS_HOME\standalone\configuration`
    folder; these users will be automatically added by the KIE workbench to the task
    service database table (`ORGANIZATIONALENTITY`, more on this in [Chapter 6](ch06.html
    "Chapter 6. Core Architecture"), *Core Architecture*).
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the actors (specify the authentication password) to the `user.properties`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Specify a role for the users in the `roles.properties` file (the default role
    `user` is enough to perform tasks):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is no need to restart the application server to make it pick up the new
    settings.
  prefs: []
  type: TYPE_NORMAL
- en: Task management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete the process instance, perform the steps in the following order:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Log in as Nino**: **start** and **complete** the **Handle Incoming Order**
    task'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Log in as Maria**: **claim** and **complete** the **Assign Order** task'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Log in as Mario (or Luigi)**: **claim** and **complete** the **Make Pizza**
    task'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Log in as Maria**: **claim** and **complete** the **Assign Delivery** task'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Log in as Salvatore**: **claim** and **complete** the **Deliver the pizza**
    task'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All tasks are completed. The process instance ends and looking at the process
    instance detail tab, we can see the instance log traces (events are displayed
    in the reverse chronological order):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Instance log:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The `Split` log traces the activation of the parallel diverging gateway. The
    `Join` logs trace the activation of the parallel converging gateway's incoming
    connections. The trace logs are loaded from the `NODEINSTANCELOG` table.
  prefs: []
  type: TYPE_NORMAL
- en: As you may have realized, it is not that easy to perform a full test of a process
    definition from within the KIE workbench; switching from actors back and forth
    is a cumbersome and time-consuming task…just think about a complex process with
    a lot of human tasks and actors or groups. We will see how to overcome these issues
    by using test automation with the BAM example and in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Managing jobs and asynchronous commands' execution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Starting from jBPM 6, the platform features a new scheduler service (called
    `Executor`), which lets you schedule, execute, and manage asynchronous jobs tasks.
    Executor can be used either as a general-purpose Java batch scheduling facility
    or as a service able to execute asynchronous process tasks (see [Chapter 5](ch05.html
    "Chapter 5. BPMN Constructs"), *BPMN constructs*, the *Async task* section for
    more details). The asset management feature, for instance, internally schedules
    different types of commands (to get an idea, open the **Deploy** | **Jobs** window,
    as shown in the following screenshot): `CreateBranchCommand`, `ListCommitsCommand`,
    `BuildProjectCommand`, `MavenDeployProjectCommand`, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Managing jobs and asynchronous commands'' execution](img/9578OS_04_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Executor service executes preconfigured `Command` classes; a `Command` is
    a Java class that executes a set of business statements running outside the jBPM
    process context and communicating with Executor through a set of interfaces (`CommandContext`
    and `ExecutionResults`), which enforce parameter passing.
  prefs: []
  type: TYPE_NORMAL
- en: The `Job` classes are persisted in the `REQUESTINFO` jBPM database table, while
    the resulting errors problems are persisted in the `ERRORINFO` table.
  prefs: []
  type: TYPE_NORMAL
- en: Creating, scheduling, and launching a new Job
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The plain and simple, general-purpose `Job` definition (no jBPM context available)
    requires you to provide at least the class name for the class to schedule (see
    the following screenshot).
  prefs: []
  type: TYPE_NORMAL
- en: Type the class name `com.packt.masterjbpm6.command.SimpleCommand` into the **Type**
    field and `SimpleCommand` in the **Name** field. The `Job` class must be in the
    classpath for the KIE workbench application (`jbpm-console.war`), so either copy
    the `pizzamodel.jar` file in `WEB-INF/lib` for the exploded WAR or copy it in
    the `dependencies` folder of the jBPM setup folder and rebuild the console app
    by using the Ant target `install.jBPM-console.into.jboss` you can find in the
    jBPM `build.xml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Due On** (schedule) time and, optionally, the number of **Retries**
    (the number of times the `Job` class can be restarted after failure), and the
    parameters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The parameters (the contextual data) are passed upon execution to the `Job`
    instance through the `CommandContext` class. Parameters must be serializable.![Creating,
    scheduling, and launching a new Job](img/9578OS_04_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After being created, the task turns into the **QUEUED** state (as shown in
    the following screenshot) and will be executed at the scheduled time. The different
    Job statuses are as follows: **QUEUED**, **DONE**, **CANCELLED**, **ERROR**, **RETRYING**,
    and **RUNNING**.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating, scheduling, and launching a new Job](img/9578OS_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Process definition conversion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Conversion deals with moving a process definition from an old version format
    to a new version format. jBPM 6 gives us some (pretty much experimental) options
    when upgrading older process definitions to a new jBPM release format:'
  prefs: []
  type: TYPE_NORMAL
- en: Importing from the old proprietary jBPM JPDL 3/4 to BPMN2 with the jBPM web
    process designer menu function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ad hoc migration with `jBPM5migrationtoolproject` and `jbpmmigration-0.13.jar`
    or a newer release (API mapping is also supported)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The goal of the `jBPM5migrationtoolproject` project is to provide some migration
    tooling to the existing users of jBPM for moving from jBPM5.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The project home and Wiki pages are available here: [https://developer.jboss.org/wiki/jBPM5migrationtoolproject](https://developer.jboss.org/wiki/jBPM5migrationtoolproject).
    The project is hosted on GitHub: [https://github.com/droolsjbpm/jbpmmigration](https://github.com/droolsjbpm/jbpmmigration).'
  prefs: []
  type: TYPE_NORMAL
- en: Process definition versioning and instance upgrading
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Depending on enterprise business requirements and business organizations, the
    processes may change at a very variable rate over time; several business migration
    cases need to be addressed:'
  prefs: []
  type: TYPE_NORMAL
- en: A complex critical business process may take months to complete (maybe due to
    manual tasks), yet the business staff needs to make an updated process definition
    available as soon as possible because some old legacy systems must be integrated
    into the flow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The process definition needs a fix but a number of instances of that very same
    process definition are active and we do not want to abort them and have the user
    restart the workflow from the beginning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Apart from bumping the process definition version property (numeric), which
    is just a mnemonic and does not affect the process instance behavior, it''s good
    practice to name your process ID (string) in order to reflect the version number,
    since the engine itself does not provide any version tracking mechanism, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: This way you can have a flexible method of switching instantiations across different
    versions of the process definition while preserving auditing data and maintaining
    separation. Each instance is, in fact, bound to its process definition (by the
    ID), and this must not be overwritten until the instance is completed.
  prefs: []
  type: TYPE_NORMAL
- en: To support users in migrating a process instance across different process definitions,
    jBPM 6 features the `WorkflowProcessInstanceUpgrader` class.
  prefs: []
  type: TYPE_NORMAL
- en: The `WorkflowProcessInstanceUpgrader`.`upgradeProcessInstance` method first
    disconnects the process instance from the signals, and event handler management
    then traverses the process instance node-by-node trying to map the nodes to the
    target process definition nodes by getting `uniqueID` from the mapping data that
    you provide.
  prefs: []
  type: TYPE_NORMAL
- en: '`uniqueID` is an internal identifier generated by the engine by concatenating
    the IDs of the parent (container) elements of the node, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: This solution is, all in all, far from complete for complex process definitions;
    you are suggested to implement your own process migration whenever possible.
  prefs: []
  type: TYPE_NORMAL
- en: BAM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The business activity monitor (BAM) provides the tools to build out of the system,
    customizable KPI, which are useful for the management staff in taking proactive
    decisions. The term was defined by Gartner Inc. ([http://www.gartner.com/it-glossary/bam-business-activity-monitoring](http://www.gartner.com/it-glossary/bam-business-activity-monitoring))
    and refers to the real-time aggregation, analysis, and representations of the
    enterprise data (possibly relating it to the system stakeholders and the customers).
  prefs: []
  type: TYPE_NORMAL
- en: The BAM's target is to produce (near) real-time information about the status
    and the outcome of the operations, processes, and transactions of a jBPM business
    system; this supports the corporate management staff in taking reactive decisions
    (**Decision Support System** (**DSS**)), and it helps staff to identify critical
    areas (possible sources of problems).
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Enterprises with a JIT production business model must constantly monitor their
    manufacturing and procurement processes and relate them to incoming orders and
    business providers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Telco companies need to overview their services, providing operations in order
    to have an up-to-the-minute view of their customers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BAM typically needs to be integrated with BI/data warehouse tools; the first
    breed of tools is real time (data-oriented heterogeneous sources), while the second
    is historical business data. With the advent of NoSQL database engines, big data,
    and cloud-based platforms, this trend is today rapidly shifting away and turning
    to a new breed of tools handling streaming processing (real time) as well as batch
    processing (**Complex Event Processing** (**CEP**)).
  prefs: []
  type: TYPE_NORMAL
- en: BPM and BAM
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The primary jBPM source for BAM data is the engine audit service and the jBPM
    database tables.
  prefs: []
  type: TYPE_NORMAL
- en: Audit data may be relevant for some business systems and useless for others.
    The auditing and logging history data could be a demanding task for your system/platform
    software and be very expensive in terms of I/O and/or allocated resources (disk
    space, DB resources, and so on). The jBPM audit logging service database schema
    is just a default implementation; the type and amount of the default audit data
    may not meet your needs, and your business application might require a finer (or
    just different) level of information to be captured.
  prefs: []
  type: TYPE_NORMAL
- en: 'The jBPM audit service module (`jbpm-audit-6.2.0.jar`) provides the implementers
    with two ways to produce audit data by collecting the engine events:'
  prefs: []
  type: TYPE_NORMAL
- en: '**JPA**: Synchronous logger that is bound to the engine transaction and persists
    audit events as part of a runtime engine transaction'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JMS**: Asynchronous logger that can be configured to place messages on the
    queue either with respect to active transaction (only after the transaction is
    committed) or directly as they are generated'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please refer to [Chapter 6](ch06.html "Chapter 6. Core Architecture"), *Core
    Architecture*, for a thorough explanation of the jBPM auditing and logging services.
  prefs: []
  type: TYPE_NORMAL
- en: 'Carefully evaluate the impact of the required audit service granularity on
    the engine performance and plan your implementation accordingly; for production
    environments, consider the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Use a different database from the engine DB for your auditing data; this facilitates
    the DB management tasks (for example, no Foreign Key issues)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use asynchronous event processing for better throughput
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Where audit data really matters, some systems typically require the process
    history log to be maintained for a considerable amount of time (years); planning
    a reliable database strategy (backup/recovery) is a must. The following list provides
    you with some first-hand tips:'
  prefs: []
  type: TYPE_NORMAL
- en: '**No audit data required**: Turnoff JPA audit persistency options (configure
    the jBPM `persistence.xml` file)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Default audit data**: Enable JPA audit persistence'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Custom/finer level but no extra processing required**: Turnoff JPA audit
    options, and follow the custom audit implementation notes in [Chapter 6](ch06.html
    "Chapter 6. Core Architecture"), *Core Architecture*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Custom/finer level and extra processing required (BI)**: Turnoff JPA audit
    options, and follow the custom audit implementation notes in [Chapter 6](ch06.html
    "Chapter 6. Core Architecture"), *Core Architecture*; writing to a different database
    is suggested'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Please check [Chapter 6](ch06.html "Chapter 6. Core Architecture"), *Core Architecture*,
    for implementation details and samples.
  prefs: []
  type: TYPE_NORMAL
- en: Default history logs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The engine audit log/history information is stored in the `PROCESSINSTANCELOG`,
    `NODEINSTANCELOG`, and `VARIABLEINSTANCELOG` tables.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please check [Chapter 8](ch08.html "Chapter 8. Integrating jBPM with Enterprise
    Architecture"), *Integrating jBPM with Enterprise Architecture*, of the jBPM 6.1
    user guide for details regarding the jBPM database schema.
  prefs: []
  type: TYPE_NORMAL
- en: Lesser-known yet very handy tables for our BAM purposes are the `TASKEVENT`
    and `AUDITTAASKIMPL` tables.
  prefs: []
  type: TYPE_NORMAL
- en: The `TASKEVENT` and `AUDITTAASKIMPL` tables are managed by `org.jbpm.services.task.audit.JPATaskLifeCycleEventListener`,
    a task life cycle listener created and attached to the `TaskService` instance
    during runtime when JPA `EntityManager` is set.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `TASKEVENT` table logs the task event transitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Each row contains the key to the parent task (the **TASKID** column); you can
    take a look at an example full table dump file (`taskevent_dump.txt`) placed in
    the `pizzadelivery` Eclipse project. In the following paragraph, we will cover
    the BAM dashboard and build a customization example by using our PizzaDelivery
    business process audit data.
  prefs: []
  type: TYPE_NORMAL
- en: BAM and Dashbuilder – the pizza maker's performance index
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: jBPM 6 is shipped with a jBPM pre-configured web application built with Dashbuilder.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Dashbuilder is the Red Hat open source platform for building business dashboards
    and reports; at the time of writing this book, the latest dashboard release is
    6.2.0; please refer to the following product home site:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.dashbuilder.org](http://www.dashbuilder.org).'
  prefs: []
  type: TYPE_NORMAL
- en: The process and task dashboard is in no way a production-ready BAM platform
    but helps the jBPM system stakeholders (as well as the jBPM administrators) to
    get a consistent preview of the underlying auditing default data at nearly no
    cost.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please check Chapter 16 of the jBPM 6.2 user guide for an introduction to the
    jBPM dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: To illustrate a hands-on sample case, we will now generate some audit data and
    add a new chart (backed by a new data provider) on our jBPM dashboard; the chart
    will display the performance index of all the process actors with respect to the
    assigned tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Example projects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The book ships with several example Java projects; starting from this paragraph,
    we will use Maven projects that you can load and run into Eclipse without deploying
    them through the KIE workbench. The examples are jUnit-based test classes with
    single or multiple test methods each. To resolve all the required jBPM library
    dependencies, you can add the `org.jbpm:jbpm-test:6.2.0.Final` dependency to the
    `pom.xml` file generated by your Eclipse project.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring persistence
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The examples use Bitronix and the H2 database for persistence; the database
    connection settings can be configured for all the projects in the `localJBPM.properties`
    file. This file is found in the `test-common` project of the [Chapter 5](ch05.html
    "Chapter 5. BPMN Constructs"), *BPMN Constructs* examples onward and in the `Pizza`
    project for this chapter, in the `examples` folder. The main settings are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Please note that `persistence.datasource.name` must be equal to the persistence
    unit `jta-data-source` element in the project `persistence.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Generating audit data – ProcessBAM unit test
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We leverage the default jBPM JPA audit listener and generate some audit data
    by using our `PizzaDelivery` process. Import the Maven `Pizza` project into Eclipse
    and run the `ProcessBAM` unit test; this class manages five threads simulating
    the operations of the five process actors. It introduces some delay in the task
    completion just to get realistic audit data (the time is expressed in milliseconds;
    the test takes a couple of minutes to run).
  prefs: []
  type: TYPE_NORMAL
- en: The test also makes Luigi slightly slower than Mario in making pizzas, so we
    can bring this difference to notice when evaluating the KPI.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'A number of 10 `pizzadelivery` processes shall be created and all related tasks
    completed:'
  prefs: []
  type: TYPE_NORMAL
- en: 10 incoming orders managed by Nino
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 10 order assignments performed by Maria
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 10-pizza cooking shared (randomly) by Mario or Luigi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 10 delivery assignments performed by Maria
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 10 pizza deliveries performed by Salvatore
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let us see the steps required to configure and create the dashboard chart starting
    from the auditing data.
  prefs: []
  type: TYPE_NORMAL
- en: Writing the business query
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The query (H2 SQL syntax and functions) calculates the duration (from the STARTED
    to the COMPLETED task event transition, in milliseconds) for each task of the
    10 completed processes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Starting from this data provider query, we are going to define two KPIs:'
  prefs: []
  type: TYPE_NORMAL
- en: Total time spent on tasks by the user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Total number of tasks performed by the user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the data provider
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Log into the KIE workbench (admin/admin) and head to **Business Dashboard**
    (in the **Dashboards** menu):'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Administration** | **Data Providers** link from the left navigation
    menu pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new data provider: **name**=`pizzerianapoli`, **type**=`SQL query`,
    and as the **Query** field, paste the preceding SQL query; on pressing the **Attempt
    data load** button, the following message should appear:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The **Number of entries:50** message confirms that the query result is correct:
    10 processes with five tasks each gives 50 tasks. Click **Save** to confirm the
    data provider setting. Clicking on the **Edit data providers** button will open
    the data provider list of the defined columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the data provider](img/9578OS_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We are now ready to define the KPIs, but before that, we need a new blank page
    on the dashboard on which we are going to place the charts.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new dashboard page and the KPI panels
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let us create a dashboard page that is going to host the charts.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new page by clicking the **blank page** icon next to the **Page** list
    in the dashboard top toolbar (see the following screenshot):![Creating a new dashboard
    page and the KPI panels](img/9578OS_04_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the page settings (check the following screenshot), and click the **Create
    new page** button:![Creating a new dashboard page and the KPI panels](img/9578OS_04_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the new page in the left navigation menu, insert the page URL in **Page
    properties**, and save changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go back to the workspace and select the new page from the top page dropdown
    list; then, select the **Create a new panel in** **current page** item; a list
    with all of the available panels will pop up.![Creating a new dashboard page and
    the KPI panels](img/9578OS_04_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the **Create Panel** item (on top of the **Components** list) and drop
    it on the highlighted target page panel that you wish your KPI to display; the
    dropped item prompts you for the source data provider. Selecting our `pizzerianapoli`
    data provider brings the KPI configuration panel to the front.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The relevant settings details for the KPIs are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Total time spent on** **tasks by the user** KPI configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Data provider**: pizzerianapoli'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**KPI name**: Total Time spent on Tasks by User (ms)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bar Chart**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Domain (X Axis)**: userid'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Range (Y Axis)**: elapsed; Edit Range (Scalar function: sum)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Renderer**: Open Flash'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Chart type**: Box with perimeters'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Number of tasks performed by the user** KPI configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Data provider**: pizzerianapoli'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**KPI name**: Tasks By User'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bar Chart**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Domain (X Axis)**: userid'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Range (Y Axis)**: taskname; Edit Range (Scalar function: count)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Renderer**: NVD3![Creating a new dashboard page and the KPI panels](img/9578OS_04_11.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we previously highlighted, the audit data elapsed times are denoted in milliseconds;
    this makes it possible to simulate random delays and avoids taking ages to run
    the test.
  prefs: []
  type: TYPE_NORMAL
- en: Given the randomness of the delays and the "make pizza" task assignments (both
    Mario and Luigi are potential owners of the same tasks), you might have different
    audit data; elapsed times and total tasks for Mario and Luigi will change for
    each test execution.
  prefs: []
  type: TYPE_NORMAL
- en: The unit test, however, always makes Luigi slower than Mario, so the overall
    KPI value never changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Of particular note in the two KPIs is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Mario is the fastest pizza maker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Maria is the busiest employee (20 tasks: 10 order assignments + 10 delivery
    assignments); she must definitely improve her efficiency in order to not slow
    down the two pizza makers (waiting for her order assignments) and the pizzaboy
    (waiting for the delivery orders)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored the jBPM management features, discussing the new
    Git and Maven integration for project development and Kie module deployment, respectively.
    You should have a better understanding of the jBPM module management, and you
    should be able to create and configure BAM charts starting from the jBPM auditing
    data thanks to the off-the-shelf Red Hat Dashboard tool. The next chapter will
    dive into BPMN constructs and will provide you with practical process definition
    examples.
  prefs: []
  type: TYPE_NORMAL
