- en: Chapter 5. Spicing Up a Maven Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far we have built the base, and now we are finally ready to launch the rocket.
    Rocket! Exciting, isn''t it? Let''s put our knowledge from previous chapters to
    practice; we will use Maven to create a simple web application, MyDistance, which
    lets the user convert distance between different units. In the process of building
    this application, we will also learn to customize the project''s information and
    generate different artifacts. The topics that will be covered in this chapter
    are categorized as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the MyDistance project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the project information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The application code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a form to obtain an input
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the servlet
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a utility class
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Running an application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing unit tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running unit tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating site documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating unit tests—HTML reports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating javadocs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the MyDistance project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create the `MyDistance` application, we need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: From the menu, navigate to **File** | **New** | **Other...**. A new project
    wizard window appears. Search for `maven` in the textbox, select **Maven Project**,
    and click on the **Next** button, as shown in the following screenshot:![Creating
    the MyDistance project](img/00048.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A **New Maven Project** wizard appears; select the **Use default Workspace location**
    checkbox, and ensure the **Create a simple project (skip archetype selection)**
    checkbox is unchecked, as shown in the following screenshot:![Creating the MyDistance
    project](img/00049.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, choose an archetype from the new archetype wizard. Since we are building
    a web application, in **Filter**, search for `webapp`, choose **maven-archetype-webapp**,
    and click on **Next**, as shown in the following screenshot:![Creating the MyDistance
    project](img/00050.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Specify the Maven coordinates, also termed as **Group-Artifact-Version** (**GAV**)
    in technical parlance, with the following values, and click on **Finish**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Field | Value |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Group Id** | `com.packt.mvneclipse` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Artifact Id** | `MyDistance` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Version** | `0.0.1-SNAPSHOT` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Package** | `com.packt.chpt5.mydistance` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: 'Your screen will look like the following screenshot once you perform the previous
    step:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Creating the MyDistance project](img/00051.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: A snapshot in Maven indicates the current development copy, that is, the current
    snapshot of the code. Maven checks for a new SNAPSHOT version in a remote repository
    at a configured interval, for a default time of 24 hours. For more information
    on Maven versions, refer to [http://docs.oracle.com/middleware/1212/core/MAVEN/maven_version.htm](http://docs.oracle.com/middleware/1212/core/MAVEN/maven_version.htm).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The web application skeleton gets created and the structure would look like
    the following screenshot:![Creating the MyDistance project](img/00052.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Don't worry if you see a red cross that indicates an error in the project; we
    will learn more about it in the upcoming section, *Application code*.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the project information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we venture into further details of the code, let''s customize the project
    information. Let''s add information about the organization, license, and developers
    associated with it. To do this, let''s open the `pom` file and add the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For detailed information on the Maven model, visit [http://maven.apache.org/ref/3.2.1/maven-model/maven.html](http://maven.apache.org/ref/3.2.1/maven-model/maven.html).
  prefs: []
  type: TYPE_NORMAL
- en: Adding dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our project is a simple web application, and to begin, it will need JUnit as
    a dependency for testing and `log4j` for logging purposes. As we progress further,
    we will add more dependencies progressively; the idea of this section is to show
    how to add dependencies in the `pom` file. If we see our `pom` file, we can see
    that JUnit is already present as a dependency; so, let''s add `log4j` as a dependency
    by adding the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The complete resultant `pom` file would look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Adding resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to use `log4j` to log in to the file or console. Log4j is configured
    via the `log4j` properties file. Now let''s create the properties file. To do
    so, navigate to `src/main/resources`, right-click on resources and select **New**
    | **Other...**; a new wizard appears. Search for `file` in the **Filter** section,
    select **File**, and click on **Next**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding resources](img/00053.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, a **File** resource window appears; enter the filename as `log4j.properties`
    and make sure the parent folder is `MyDistance/src/main/resources` and click on
    **Finish**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding resources](img/00054.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Resources are placed in the `src/main/resources` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the file is created, add the following piece of code to set the different
    properties of `log4j`. It attaches the pattern layout to split out information
    on the console, writes a log to the `Mydistance.log` file, and is set to the `DEBUG`
    level, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: For more information on `log4j`, refer to [http://logging.apache.org/log4j/1.2/](http://logging.apache.org/log4j/1.2/).
  prefs: []
  type: TYPE_NORMAL
- en: The application code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The application is deliberately created in JSP or servlets to keep it simple
    and to avoid having familiarity with other frameworks to understand the example.
    Before we get into the basics of the application code, let''s solve the error
    that Eclipse complains of in step 5 of the *Creating a MyDistance Project* section.
    Add the following dependency in the `pom` file and the error should vanish:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The preceding dependency will also be required for writing servlets later in
    the *Adding a Servlet* section.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The scope is provided, which means that the container will provide this dependency,
    and Maven will not include it in this project's output or war file. We discussed
    scopes in more detail in [Chapter 4](part0031_split_000.html#page "Chapter 4. Building
    and Running a Project"), *Building and Running a Project*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The application will require the following additional files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`index.jsp`: This is a JSP file with a form that allows users to enter a distance,
    its unit, and the desired conversion unit'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DistanceServlet`: This is a servlet that processes the inputs from the form'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ConversionUtil`: This is a utility class that has a method to perform conversion
    between different units'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a form to get an input
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Under `src/main/webapp`, open the `index.jsp` file, and add the following code
    to get the distance, its unit, and conversion unit as input. The form consists
    of an input box, two radio buttons to choose units, and a button to initiate the
    conversion, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'If you like, you can add CSS styles to make the UI more pleasing. The preceding
    bare bones file results in something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a form to get an input](img/00055.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We want to calculate the value and show the corresponding result beneath it
    using Ajax (jQuery Ajax). To achieve this, add the following piece of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Adding a servlet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we add any Java files, create a folder, `java`, under `src/main` as
    Maven looks for Java files in this directory (all Java files should reside under
    it). Add the `DistanceServlet` servlet in the `com.packt.chpt5.mydistance` package.
    The servlet gets the request parameters, extracts it, and calls the corresponding
    conversion method in the utility class. The servlet would look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following lines in the `web.xml` file under `src/main/webapp/WEB-INF`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Adding a utility class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Add a utility class `ConversionUtil` in the `com.packt.chpt5.mydistance.util`
    package. A utility class contains methods to perform conversion across different
    distance units. Add the following code to the utility class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Running an application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we are done with coding. Let''s run the coding and see how it works. The
    project is a web application, so it requires a servlet container to run. We will
    use the Tomcat container here. Add the following build plugin for the Tomcat that
    can actually host a Tomcat instance right from Maven and no installation is required:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This will download all the dependencies from the repository. After the download
    is complete, right-click on the project, choose **Run As** | **Run Configurations...**,
    create the configuration in the configuration window specifying **Goals** as `tomcat7:run`,
    and click on **Run**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running an application](img/00056.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Tomcat plugin has the `run` goal, which compiles and runs the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, we can add any other container and run the application in it. The
    running application will be available at `http://localhost:8080/MyDistance/` and
    would look like the following screenshot (shown with a sample conversion):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running an application](img/00057.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Writing unit tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Writing unit tests is a part of good practice in software development. Maven's
    `test` phase executes unit tests and generates the corresponding report. In this
    section, we will learn about writing a simple unit test for our utility class
    `ConversionUtil`, and in the next section, we will see how to execute it and generate
    reports.
  prefs: []
  type: TYPE_NORMAL
- en: 'All the unit test classes should go under `src/test/java`. Create the corresponding
    folder in the `MyDistance` project. Once the folder is in place, right-click on
    it and navigate to **New** | **Other...**. Once the wizard window appears, type
    in `junit` in the **Filter** section, select **JUnit Test Case**, and click on
    **Next**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing unit tests](img/00058.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the window to follow, define the unit test class by filling in the following
    details and click on **Next**, as shown in the preceding screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Fields | Values |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **Source folder** | `MyDistance/src/test/java` |'
  prefs: []
  type: TYPE_TB
- en: '| **Package** | `com.packt.chpt5.mydistance.util` |'
  prefs: []
  type: TYPE_TB
- en: '| **Name** | `ConvertionUtilTest` |'
  prefs: []
  type: TYPE_TB
- en: '| **Class under test** | `com.packt.chpt5.mydistance.util.ConversionUtil` |'
  prefs: []
  type: TYPE_TB
- en: '![Writing unit tests](img/00059.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'A window to choose test methods will be shown, for which stubs will be generated
    as shown in the following screenshot. Make sure that all methods of the `ConversionUtil`
    class are checked and click on **Finish** as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing unit tests](img/00060.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `ConversionUtilTest` test class with the test method stubs will be generated.
    Edit the code of the class as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: For more information on JUnit test cases, refer to [http://junit.org/](http://junit.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Running unit tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Running the unit test in Maven is just specifying the phase test. To execute
    the unit test we wrote in the preceding section, right-click on the `MyDistance`
    project, select **Run As**, and click on **Maven Test**. It will run the unit
    tests against the class and generate the report in the `/target/surefire-reports/`
    folder, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running unit tests](img/00061.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can see the results of unit test execution in the `txt` and `xml` format.
  prefs: []
  type: TYPE_NORMAL
- en: Generating site documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the integral features of Maven is that it eases artifacts and site documentation
    generation. To generate site documentation, add the following dependency in the
    `pom` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'After adding the preceding dependencies, run the project with the goal as site,
    that is, in the **Run Configurations** window, specify **Goals** as `site`, as
    shown in following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Generating site documentation](img/00062.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the **Run** button and the documentation will be generated. The excerpts
    of the output in **Maven Console** would look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The documentation would be generated in the `target/site` folder and the expansion
    of the folder would look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Generating site documentation](img/00063.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'There is an HTML file for each type of detail ranging from `project-info`,
    `project reports`, `project summary`, `license`, `plugin`, and so on, and `index.html`
    being the start point that links every document. The **Project Summary** page
    is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Generating site documentation](img/00064.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: For more information on site and site plugins, please refer to [http://maven.apache.org/guides/mini/guide-site.html](http://maven.apache.org/guides/mini/guide-site.html)
    and [http://maven.apache.org/plugins/maven-site-plugin/](http://maven.apache.org/plugins/maven-site-plugin/).
  prefs: []
  type: TYPE_NORMAL
- en: Generating unit tests – HTML reports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the preceding section, we ran the unit tests, and the results were generated
    in the `txt` and `xml` format. Often, developers need to generate more readable
    reports. Also, as a matter of fact, the reports should be a part of site documentation
    for better collaboration and information available in one place. To generate an
    HTML report and make it a part of site documentation, add the dependency under
    the `reporting` element as `plugin` in the `pom` file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'After the addition shown in the preceding code, run the `site` phase from the
    previous section. The test reports would be available by navigating to **Project
    Documentation** | **Project Reports** | **Surefire Report** of the navigation
    in `index.html`, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Generating unit tests – HTML reports](img/00065.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Generating javadocs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We often need to generate API documentation of our code base. Having an API
    documentation increases collaboration, understanding, migration, and the transfer
    of knowledge becomes handy. To generate javadocs, add the following dependency
    in the `reporting` element as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'After making the preceding changes to the `pom` file, run the `site` phase
    from the previous section. The APIs will be generated in the `apidocs` and `testapidocs`
    folders under `target/site`. This can be navigated in the `index.html` file, under
    the **Project Reports** head with **JavaDocs** and the **Test JavaDocs** label,
    along with **Surefire-Reports** as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Generating javadocs](img/00066.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Well done! We have developed `MyDistance`, a distance conversion utility web
    application. During the course of development, we learned adding dependencies,
    writing unit tests, executing them, generating site documentation, and generating
    javadocs for them. In the next chapter, we will learn about multimodule projects
    with Maven.
  prefs: []
  type: TYPE_NORMAL
