- en: Chapter 5. Spicing Up a Maven Project
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章.为Maven项目增色
- en: 'So far we have built the base, and now we are finally ready to launch the rocket.
    Rocket! Exciting, isn''t it? Let''s put our knowledge from previous chapters to
    practice; we will use Maven to create a simple web application, MyDistance, which
    lets the user convert distance between different units. In the process of building
    this application, we will also learn to customize the project''s information and
    generate different artifacts. The topics that will be covered in this chapter
    are categorized as follows:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经构建了基础，现在我们终于准备好发射火箭了。火箭！激动人心，不是吗？让我们将前几章的知识付诸实践；我们将使用Maven创建一个简单的Web应用程序，MyDistance，它允许用户在不同单位之间转换距离。在构建此应用程序的过程中，我们还将学习如何自定义项目信息并生成不同的工件。本章将涵盖以下主题：
- en: Creating the MyDistance project
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建MyDistance项目
- en: Changing the project information
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改项目信息
- en: Adding dependencies
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加依赖项
- en: Adding resources
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加资源
- en: The application code
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序代码
- en: Adding a form to obtain an input
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加表单以获取输入
- en: Adding the servlet
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加servlet
- en: Adding a utility class
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加实用类
- en: Running an application
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行应用程序
- en: Writing unit tests
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写单元测试
- en: Running unit tests
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行单元测试
- en: Generating site documentation
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成站点文档
- en: Generating unit tests—HTML reports
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成单元测试—HTML报告
- en: Generating javadocs
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成javadoc
- en: Creating the MyDistance project
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建MyDistance项目
- en: 'To create the `MyDistance` application, we need to perform the following steps:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建`MyDistance`应用程序，我们需要执行以下步骤：
- en: From the menu, navigate to **File** | **New** | **Other...**. A new project
    wizard window appears. Search for `maven` in the textbox, select **Maven Project**,
    and click on the **Next** button, as shown in the following screenshot:![Creating
    the MyDistance project](img/00048.jpeg)
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从菜单中，导航到**文件** | **新建** | **其他...**。出现一个新的项目向导窗口。在文本框中搜索`maven`，选择**Maven项目**，然后点击**下一步**按钮，如下截图所示：![创建MyDistance项目](img/00048.jpeg)
- en: A **New Maven Project** wizard appears; select the **Use default Workspace location**
    checkbox, and ensure the **Create a simple project (skip archetype selection)**
    checkbox is unchecked, as shown in the following screenshot:![Creating the MyDistance
    project](img/00049.jpeg)
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 出现了一个**新Maven项目**向导；选中**使用默认工作区位置**复选框，并确保**创建简单项目（跳过存档选择）**复选框未选中，如下截图所示：![创建MyDistance项目](img/00049.jpeg)
- en: Next, choose an archetype from the new archetype wizard. Since we are building
    a web application, in **Filter**, search for `webapp`, choose **maven-archetype-webapp**,
    and click on **Next**, as shown in the following screenshot:![Creating the MyDistance
    project](img/00050.jpeg)
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，从新存档向导中选择一个存档。由于我们正在构建Web应用程序，在**过滤器**中搜索`webapp`，选择**maven-archetype-webapp**，然后点击**下一步**，如下截图所示：![创建MyDistance项目](img/00050.jpeg)
- en: 'Specify the Maven coordinates, also termed as **Group-Artifact-Version** (**GAV**)
    in technical parlance, with the following values, and click on **Finish**:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下值指定Maven坐标，也称为技术术语中的**组-工件-版本**（**GAV**），然后点击**完成**：
- en: '| Field | Value |'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 字段 | 值 |'
- en: '| --- | --- |'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| **Group Id** | `com.packt.mvneclipse` |'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **组ID** | `com.packt.mvneclipse` |'
- en: '| **Artifact Id** | `MyDistance` |'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **工件ID** | `MyDistance` |'
- en: '| **Version** | `0.0.1-SNAPSHOT` |'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **版本** | `0.0.1-SNAPSHOT` |'
- en: '| **Package** | `com.packt.chpt5.mydistance` |'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **包名** | `com.packt.chpt5.mydistance` |'
- en: 'Your screen will look like the following screenshot once you perform the previous
    step:'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行上一步操作后，您的屏幕将显示如下截图：
- en: '![Creating the MyDistance project](img/00051.jpeg)'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![创建MyDistance项目](img/00051.jpeg)'
- en: Note
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A snapshot in Maven indicates the current development copy, that is, the current
    snapshot of the code. Maven checks for a new SNAPSHOT version in a remote repository
    at a configured interval, for a default time of 24 hours. For more information
    on Maven versions, refer to [http://docs.oracle.com/middleware/1212/core/MAVEN/maven_version.htm](http://docs.oracle.com/middleware/1212/core/MAVEN/maven_version.htm).
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Maven中的快照表示当前的开发副本，即代码的当前快照。Maven在配置的间隔内，默认为24小时，在远程仓库中检查新的SNAPSHOT版本。有关Maven版本的更多信息，请参阅[http://docs.oracle.com/middleware/1212/core/MAVEN/maven_version.htm](http://docs.oracle.com/middleware/1212/core/MAVEN/maven_version.htm)。
- en: The web application skeleton gets created and the structure would look like
    the following screenshot:![Creating the MyDistance project](img/00052.jpeg)
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Web应用程序骨架将被创建，其结构如下截图所示：![创建MyDistance项目](img/00052.jpeg)
- en: Don't worry if you see a red cross that indicates an error in the project; we
    will learn more about it in the upcoming section, *Application code*.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看到表示项目中有错误的红色交叉，请不要担心；我们将在即将到来的*应用程序代码*部分中了解更多关于它的信息。
- en: Changing the project information
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改项目信息
- en: 'Before we venture into further details of the code, let''s customize the project
    information. Let''s add information about the organization, license, and developers
    associated with it. To do this, let''s open the `pom` file and add the following
    code:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入代码的更多细节之前，让我们自定义项目信息。让我们添加有关组织、许可证和与之相关的开发者的信息。为此，让我们打开`pom`文件并添加以下代码：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For detailed information on the Maven model, visit [http://maven.apache.org/ref/3.2.1/maven-model/maven.html](http://maven.apache.org/ref/3.2.1/maven-model/maven.html).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Maven模型的详细信息，请访问[http://maven.apache.org/ref/3.2.1/maven-model/maven.html](http://maven.apache.org/ref/3.2.1/maven-model/maven.html)。
- en: Adding dependencies
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加依赖项
- en: 'Our project is a simple web application, and to begin, it will need JUnit as
    a dependency for testing and `log4j` for logging purposes. As we progress further,
    we will add more dependencies progressively; the idea of this section is to show
    how to add dependencies in the `pom` file. If we see our `pom` file, we can see
    that JUnit is already present as a dependency; so, let''s add `log4j` as a dependency
    by adding the following code snippet:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的项目是一个简单的Web应用程序，为了开始，它将需要JUnit作为测试的依赖项，以及`log4j`用于日志记录。随着我们进一步进展，我们将逐步添加更多依赖项；本节的想法是展示如何在`pom`文件中添加依赖项。如果我们查看我们的`pom`文件，我们可以看到JUnit已经作为依赖项存在；因此，让我们通过添加以下代码片段将`log4j`作为依赖项添加：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The complete resultant `pom` file would look like the following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的`pom`文件将如下所示：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Adding resources
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加资源
- en: 'We are going to use `log4j` to log in to the file or console. Log4j is configured
    via the `log4j` properties file. Now let''s create the properties file. To do
    so, navigate to `src/main/resources`, right-click on resources and select **New**
    | **Other...**; a new wizard appears. Search for `file` in the **Filter** section,
    select **File**, and click on **Next**, as shown in the following screenshot:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`log4j`将日志记录到文件或控制台。`log4j`通过`log4j`属性文件进行配置。现在让我们创建属性文件。为此，导航到`src/main/resources`，右键单击资源并选择**新建**
    | **其他...**；出现一个新向导。在**过滤器**部分搜索`file`，选择**文件**，然后点击**下一步**，如下面的截图所示：
- en: '![Adding resources](img/00053.jpeg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![添加资源](img/00053.jpeg)'
- en: 'Next, a **File** resource window appears; enter the filename as `log4j.properties`
    and make sure the parent folder is `MyDistance/src/main/resources` and click on
    **Finish**, as shown in the following screenshot:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，出现一个**文件**资源窗口；输入文件名为`log4j.properties`，并确保父文件夹是`MyDistance/src/main/resources`，然后点击**完成**，如下面的截图所示：
- en: '![Adding resources](img/00054.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![添加资源](img/00054.jpeg)'
- en: Note
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Resources are placed in the `src/main/resources` folder.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 资源放置在`src/main/resources`文件夹中。
- en: 'Once the file is created, add the following piece of code to set the different
    properties of `log4j`. It attaches the pattern layout to split out information
    on the console, writes a log to the `Mydistance.log` file, and is set to the `DEBUG`
    level, as shown in the following code:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦文件创建完成，请添加以下代码片段来设置`log4j`的不同属性。它将模式布局附加到控制台以分割信息，并将日志写入`Mydistance.log`文件，并设置为`DEBUG`级别，如下面的代码所示：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: For more information on `log4j`, refer to [http://logging.apache.org/log4j/1.2/](http://logging.apache.org/log4j/1.2/).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`log4j`的更多信息，请参阅[http://logging.apache.org/log4j/1.2/](http://logging.apache.org/log4j/1.2/)。
- en: The application code
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序代码
- en: 'The application is deliberately created in JSP or servlets to keep it simple
    and to avoid having familiarity with other frameworks to understand the example.
    Before we get into the basics of the application code, let''s solve the error
    that Eclipse complains of in step 5 of the *Creating a MyDistance Project* section.
    Add the following dependency in the `pom` file and the error should vanish:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序故意创建在JSP或servlets中，以保持简单并避免熟悉其他框架来理解示例。在我们深入研究应用程序代码的基本知识之前，让我们解决在*创建MyDistance项目*部分的第5步中Eclipse抱怨的错误。在`pom`文件中添加以下依赖项，错误应该会消失：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The preceding dependency will also be required for writing servlets later in
    the *Adding a Servlet* section.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在*添加Servlet*部分稍后编写servlet时，也需要这个依赖项。
- en: Note
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The scope is provided, which means that the container will provide this dependency,
    and Maven will not include it in this project's output or war file. We discussed
    scopes in more detail in [Chapter 4](part0031_split_000.html#page "Chapter 4. Building
    and Running a Project"), *Building and Running a Project*.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 范围已提供，这意味着容器将提供此依赖项，Maven不会将其包含在此项目的输出或war文件中。我们已在[第4章](part0031_split_000.html#page
    "第4章。构建和运行项目")中更详细地讨论了范围，*构建和运行项目*。
- en: 'The application will require the following additional files:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序将需要以下附加文件：
- en: '`index.jsp`: This is a JSP file with a form that allows users to enter a distance,
    its unit, and the desired conversion unit'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index.jsp`：这是一个带有表单的JSP文件，允许用户输入距离、其单位和所需的转换单位'
- en: '`DistanceServlet`: This is a servlet that processes the inputs from the form'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DistanceServlet`：这是一个处理表单输入的servlet'
- en: '`ConversionUtil`: This is a utility class that has a method to perform conversion
    between different units'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ConversionUtil`：这是一个实用工具类，它有一个方法用于在不同单位之间进行转换'
- en: Adding a form to get an input
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加获取输入的表单
- en: 'Under `src/main/webapp`, open the `index.jsp` file, and add the following code
    to get the distance, its unit, and conversion unit as input. The form consists
    of an input box, two radio buttons to choose units, and a button to initiate the
    conversion, as shown in the following code:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在`src/main/webapp`下打开`index.jsp`文件，并添加以下代码以获取距离、其单位和转换单位作为输入。表单包括一个输入框、两个单选按钮用于选择单位以及一个按钮来启动转换，如下面的代码所示：
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If you like, you can add CSS styles to make the UI more pleasing. The preceding
    bare bones file results in something like this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果愿意，你可以添加CSS样式来使UI更加美观。前面的裸骨文件会产生类似以下的结果：
- en: '![Adding a form to get an input](img/00055.jpeg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![添加表单以获取输入](img/00055.jpeg)'
- en: 'We want to calculate the value and show the corresponding result beneath it
    using Ajax (jQuery Ajax). To achieve this, add the following piece of code:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想使用Ajax（jQuery Ajax）计算值并在其下方显示相应的结果。为此，添加以下代码片段：
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Adding a servlet
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加servlet
- en: 'Before we add any Java files, create a folder, `java`, under `src/main` as
    Maven looks for Java files in this directory (all Java files should reside under
    it). Add the `DistanceServlet` servlet in the `com.packt.chpt5.mydistance` package.
    The servlet gets the request parameters, extracts it, and calls the corresponding
    conversion method in the utility class. The servlet would look like the following:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加任何Java文件之前，在`src/main`下创建一个名为`java`的文件夹，因为Maven会在该目录中查找Java文件（所有Java文件都应该位于其中）。在`com.packt.chpt5.mydistance`包中添加`DistanceServlet`
    servlet。servlet获取请求参数，提取它，并调用实用工具类中的相应转换方法。servlet看起来如下所示：
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Add the following lines in the `web.xml` file under `src/main/webapp/WEB-INF`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在`src/main/webapp/WEB-INF`下的`web.xml`文件中添加以下行：
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Adding a utility class
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加实用工具类
- en: 'Add a utility class `ConversionUtil` in the `com.packt.chpt5.mydistance.util`
    package. A utility class contains methods to perform conversion across different
    distance units. Add the following code to the utility class:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在`com.packt.chpt5.mydistance.util`包中添加一个名为`ConversionUtil`的实用工具类。实用工具类包含执行不同距离单位转换的方法。将以下代码添加到实用工具类中：
- en: '[PRE9]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Running an application
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行应用程序
- en: 'Now we are done with coding. Let''s run the coding and see how it works. The
    project is a web application, so it requires a servlet container to run. We will
    use the Tomcat container here. Add the following build plugin for the Tomcat that
    can actually host a Tomcat instance right from Maven and no installation is required:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了编码。让我们运行代码并看看它的工作情况。该项目是一个Web应用程序，因此它需要一个servlet容器来运行。我们将在这里使用Tomcat容器。为Tomcat添加以下构建插件，该插件可以从Maven中实际托管Tomcat实例，无需安装：
- en: '[PRE10]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This will download all the dependencies from the repository. After the download
    is complete, right-click on the project, choose **Run As** | **Run Configurations...**,
    create the configuration in the configuration window specifying **Goals** as `tomcat7:run`,
    and click on **Run**, as shown in the following screenshot:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这将从存储库下载所有依赖项。下载完成后，右键单击项目，选择**运行方式** | **运行配置...**，在配置窗口中创建配置，指定**目标**为`tomcat7:run`，然后单击**运行**，如图所示：
- en: '![Running an application](img/00056.jpeg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![运行应用程序](img/00056.jpeg)'
- en: Note
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The Tomcat plugin has the `run` goal, which compiles and runs the application.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Tomcat插件具有`run`目标，它编译并运行应用程序。
- en: 'Similarly, we can add any other container and run the application in it. The
    running application will be available at `http://localhost:8080/MyDistance/` and
    would look like the following screenshot (shown with a sample conversion):'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以在任何其他容器中添加任何其他容器并运行应用程序。运行的应用程序将在`http://localhost:8080/MyDistance/`处可用，如下面的截图所示（显示了一个示例转换）：
- en: '![Running an application](img/00057.jpeg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![运行应用程序](img/00057.jpeg)'
- en: Writing unit tests
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写单元测试
- en: Writing unit tests is a part of good practice in software development. Maven's
    `test` phase executes unit tests and generates the corresponding report. In this
    section, we will learn about writing a simple unit test for our utility class
    `ConversionUtil`, and in the next section, we will see how to execute it and generate
    reports.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 编写单元测试是软件开发中的良好实践的一部分。Maven的`test`阶段执行单元测试并生成相应的报告。在本节中，我们将学习如何为我们的实用工具类`ConversionUtil`编写简单的单元测试，在下一节中，我们将看到如何执行它并生成报告。
- en: 'All the unit test classes should go under `src/test/java`. Create the corresponding
    folder in the `MyDistance` project. Once the folder is in place, right-click on
    it and navigate to **New** | **Other...**. Once the wizard window appears, type
    in `junit` in the **Filter** section, select **JUnit Test Case**, and click on
    **Next**, as shown in the following screenshot:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 所有单元测试类都应该放在`src/test/java`下。在`MyDistance`项目中创建相应的文件夹。一旦文件夹就位，右键单击它并导航到**新建**
    | **其他...**。一旦出现向导窗口，在**过滤器**部分输入`junit`，选择**JUnit测试用例**，然后点击**下一步**，如下面的截图所示：
- en: '![Writing unit tests](img/00058.jpeg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![编写单元测试](img/00058.jpeg)'
- en: 'In the window to follow, define the unit test class by filling in the following
    details and click on **Next**, as shown in the preceding screenshot:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的窗口中，通过填写以下详细信息来定义单元测试类，然后点击**下一步**，如下面的截图所示：
- en: '| Fields | Values |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| 字段 | 值 |'
- en: '| --- | --- |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| **Source folder** | `MyDistance/src/test/java` |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| **源文件夹** | `MyDistance/src/test/java` |'
- en: '| **Package** | `com.packt.chpt5.mydistance.util` |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| **包** | `com.packt.chpt5.mydistance.util` |'
- en: '| **Name** | `ConvertionUtilTest` |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| **名称** | `ConvertionUtilTest` |'
- en: '| **Class under test** | `com.packt.chpt5.mydistance.util.ConversionUtil` |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| **测试中的类** | `com.packt.chpt5.mydistance.util.ConversionUtil` |'
- en: '![Writing unit tests](img/00059.jpeg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![编写单元测试](img/00059.jpeg)'
- en: 'A window to choose test methods will be shown, for which stubs will be generated
    as shown in the following screenshot. Make sure that all methods of the `ConversionUtil`
    class are checked and click on **Finish** as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 将显示一个选择测试方法的窗口，将生成如下截图所示的存根。确保`ConversionUtil`类的所有方法都被选中，然后按照以下方式点击**完成**：
- en: '![Writing unit tests](img/00060.jpeg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![编写单元测试](img/00060.jpeg)'
- en: 'The `ConversionUtilTest` test class with the test method stubs will be generated.
    Edit the code of the class as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 将生成带有测试方法存根的`ConversionUtilTest`测试类。按照以下方式编辑类的代码：
- en: '[PRE11]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: For more information on JUnit test cases, refer to [http://junit.org/](http://junit.org/).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 关于JUnit测试用例的更多信息，请参阅[http://junit.org/](http://junit.org/).
- en: Running unit tests
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行单元测试
- en: 'Running the unit test in Maven is just specifying the phase test. To execute
    the unit test we wrote in the preceding section, right-click on the `MyDistance`
    project, select **Run As**, and click on **Maven Test**. It will run the unit
    tests against the class and generate the report in the `/target/surefire-reports/`
    folder, as shown in the following screenshot:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在Maven中运行单元测试只需指定测试阶段。要执行上一节中编写的单元测试，右键单击`MyDistance`项目，选择**运行方式**，然后点击**Maven测试**。它将对类运行单元测试，并在`/target/surefire-reports/`文件夹中生成报告，如下面的截图所示：
- en: '![Running unit tests](img/00061.jpeg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![运行单元测试](img/00061.jpeg)'
- en: You can see the results of unit test execution in the `txt` and `xml` format.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`txt`和`xml`格式中查看单元测试执行的结果。
- en: Generating site documentation
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成站点文档
- en: 'One of the integral features of Maven is that it eases artifacts and site documentation
    generation. To generate site documentation, add the following dependency in the
    `pom` file:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Maven的一个核心特性是它简化了构件和站点文档的生成。要生成站点文档，请在`pom`文件中添加以下依赖项：
- en: '[PRE12]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'After adding the preceding dependencies, run the project with the goal as site,
    that is, in the **Run Configurations** window, specify **Goals** as `site`, as
    shown in following screenshot:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加前面的依赖项后，以站点为目标运行项目，即在**运行配置**窗口中，将**目标**指定为`site`，如下面的截图所示：
- en: '![Generating site documentation](img/00062.jpeg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![生成站点文档](img/00062.jpeg)'
- en: 'Click on the **Run** button and the documentation will be generated. The excerpts
    of the output in **Maven Console** would look like the following:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**运行**按钮，文档将被生成。**Maven控制台**的输出摘录如下所示：
- en: '[PRE13]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The documentation would be generated in the `target/site` folder and the expansion
    of the folder would look like the following:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 文档将在`target/site`目录中生成，文件夹的扩展形式如下所示：
- en: '![Generating site documentation](img/00063.jpeg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![生成网站文档](img/00063.jpeg)'
- en: 'There is an HTML file for each type of detail ranging from `project-info`,
    `project reports`, `project summary`, `license`, `plugin`, and so on, and `index.html`
    being the start point that links every document. The **Project Summary** page
    is shown in the following screenshot:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 每种类型的细节都有一个HTML文件，从`project-info`、`project reports`、`project summary`、`license`、`plugin`等等，而`index.html`是链接每个文档的起点。以下截图显示了**项目摘要**页面：
- en: '![Generating site documentation](img/00064.jpeg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![生成网站文档](img/00064.jpeg)'
- en: For more information on site and site plugins, please refer to [http://maven.apache.org/guides/mini/guide-site.html](http://maven.apache.org/guides/mini/guide-site.html)
    and [http://maven.apache.org/plugins/maven-site-plugin/](http://maven.apache.org/plugins/maven-site-plugin/).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 关于网站和网站插件的更多信息，请参阅[http://maven.apache.org/guides/mini/guide-site.html](http://maven.apache.org/guides/mini/guide-site.html)和[http://maven.apache.org/plugins/maven-site-plugin/](http://maven.apache.org/plugins/maven-site-plugin/)。
- en: Generating unit tests – HTML reports
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成单元测试 - HTML报告
- en: 'In the preceding section, we ran the unit tests, and the results were generated
    in the `txt` and `xml` format. Often, developers need to generate more readable
    reports. Also, as a matter of fact, the reports should be a part of site documentation
    for better collaboration and information available in one place. To generate an
    HTML report and make it a part of site documentation, add the dependency under
    the `reporting` element as `plugin` in the `pom` file as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们运行了单元测试，结果以`txt`和`xml`格式生成。通常，开发者需要生成更易读的报告。实际上，报告应该是网站文档的一部分，以便更好地协作，并在一个地方提供信息。要生成HTML报告并将其作为网站文档的一部分，请在`pom`文件中的`reporting`元素下作为`plugin`添加依赖项，如下所示：
- en: '[PRE14]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'After the addition shown in the preceding code, run the `site` phase from the
    previous section. The test reports would be available by navigating to **Project
    Documentation** | **Project Reports** | **Surefire Report** of the navigation
    in `index.html`, as shown in the following screenshot:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码添加后，从上一节运行`site`阶段。测试报告可以通过在`index.html`中的导航到**项目文档** | **项目报告** | **Surefire报告**来获取，如下面的截图所示：
- en: '![Generating unit tests – HTML reports](img/00065.jpeg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![生成单元测试 - HTML报告](img/00065.jpeg)'
- en: Generating javadocs
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成javadoc
- en: 'We often need to generate API documentation of our code base. Having an API
    documentation increases collaboration, understanding, migration, and the transfer
    of knowledge becomes handy. To generate javadocs, add the following dependency
    in the `reporting` element as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们经常需要生成代码库的API文档。拥有API文档可以增加协作、理解、迁移，并且知识转移变得方便。要生成javadoc，请在`reporting`元素中添加以下依赖项，如下所示：
- en: '[PRE15]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'After making the preceding changes to the `pom` file, run the `site` phase
    from the previous section. The APIs will be generated in the `apidocs` and `testapidocs`
    folders under `target/site`. This can be navigated in the `index.html` file, under
    the **Project Reports** head with **JavaDocs** and the **Test JavaDocs** label,
    along with **Surefire-Reports** as shown in the following screenshot:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在对`pom`文件进行上述更改后，从上一节运行`site`阶段。API将在`target/site`目录下的`apidocs`和`testapidocs`文件夹中生成。这可以在`index.html`文件中导航，在**项目报告**标题下，有**JavaDocs**和**测试JavaDocs**标签，以及**Surefire-Reports**，如下面的截图所示：
- en: '![Generating javadocs](img/00066.jpeg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![生成javadoc](img/00066.jpeg)'
- en: Summary
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Well done! We have developed `MyDistance`, a distance conversion utility web
    application. During the course of development, we learned adding dependencies,
    writing unit tests, executing them, generating site documentation, and generating
    javadocs for them. In the next chapter, we will learn about multimodule projects
    with Maven.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！我们已经开发了`MyDistance`，一个距离转换实用程序网络应用程序。在开发过程中，我们学习了添加依赖项、编写单元测试、执行它们、生成网站文档以及为它们生成javadoc。在下一章中，我们将学习关于Maven的多模块项目。
