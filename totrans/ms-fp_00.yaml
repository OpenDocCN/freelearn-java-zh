- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Functional programming languages, such as Java, Scala, and Clojure, are attracting
    attention as an efficient way to handle the new requirements for programming multi-processor
    and high-availability applications. This book will teach you functional programming
    with the help of Scala. The book takes a thought-leadership approach, gently introducing
    you to functional programming and taking you all the way to becoming a master
    at the paradigm. Beginning with an introduction to functional programming, the
    book gradually moves forward teaching you how to write declarative code, making
    use of functional types and values. After covering the basics, we will discuss
    the more advanced concepts in functional programming.
  prefs: []
  type: TYPE_NORMAL
- en: We will cover the concepts of pure functions and type classes, problems they
    aim to solve, and how to use them in practice. We will see how libraries can be
    used for purely functional programming. We will look at the broad family of libraries
    for functional programming. Finally, we will discuss some of the more advanced
    patterns in the functional programming world, such as Monad Transformers and Tagless
    Final. After covering the purely functional approach to programming, we will look
    into the subject of parallel programming. We will introduce the Actor model and
    how it is implemented in the modern functional languages. By the end of this book,
    you will have mastered the concepts entailing functional programming alongside
    OOP to build robust applications.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are from an imperative and OOP background, this book will guide you through
    the world of functional programming, irrespective of which programming language
    you use.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](485603d0-9f5e-4644-bd73-c46a8a317448.xhtml), *The Declarative Programming
    Style*, covers the main idea of declarative style of abstracting away repeating
    algorithmic patterns and control flows so that, with one statement, it is possible
    to describe what otherwise would have been 10 lines of imperative code. Functional
    languages usually have an elaborate infrastructure to make such an approach especially
    relevant and usable. One good way to feel this difference is to have a look at
    the difference in programming with Java and Scala collections—the former employs
    the imperative style and latter the functional style.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](d5f23a0a-3dcb-433b-8bbe-b25ac17be59b.xhtml), *Functions and Lambdas*, will
    start with the concept familiar to an OOP programmer—a method. We will then explore
    some more advanced, functional concepts specific to functional programming—things
    such as lambdas, currying, generic type parameters, implicit arguments, and higher-order
    functions. We will see how higher-order functions may be useful to abstract control
    flow. Finally, we will look at the concept of partial functions.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](67d28304-c855-47aa-afb6-b74fa5a0dd28.xhtml), *Functional Data Structures*, explains
    a functional collections framework. It features a hierarchy of collections data
    types designed for different scenarios. It then moves to other data types that
    are not part of the collections framework but are often used in functional programming
    and hence deserve our attention. The data types are Option, Either, and Try. Finally,
    we will see how the data structures are separated from their behavior via an implicit
    mechanism, which is present in some advanced languages.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](939fdb5c-ce8e-49c7-9b0f-277210c5bf08.xhtml), *The Problem of Side
    Effects*, is about side effects that are ubiquitous in programming. Functional
    programming advocates for so-called pure functions—functions that do not produce
    any side effects, which means you can''t write a file from such a function, or
    contact the network. Why would functional programming advocate against functions
    that cause side effects? Is it possible to write a useful program using pure functions
    only? This chapter explores these questions.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](12028d44-3c88-45ce-8ae1-abfa9f64039e.xhtml), *Effect Types - Abstracting
    Away Side Effects*, provides solutions to the problems of working with side effects
    in a pure way. The solution presented by purely functional programming is to turn
    the side effects you encounter into functional data structures. We will explore
    the process of identifying side effects and turning them into such data structures.
    Then, we will quickly realize functions that produce side effects usually work
    one with another. We will hence explore how one can combine these functions using
    the concept of the Monad.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](d1cb3932-deb8-4434-b179-44ad364420ff.xhtml), *Effect Types in Practice*, focuses
    on the material of the [Chapter 3](67d28304-c855-47aa-afb6-b74fa5a0dd28.xhtml), *Functional
    Data Structures*, from a new perspective. We will see how functional data structures
    have a deeper meaning to the data types-that of representing phenomena as data.
    A phenomenon is something that happens, such as an exception or a delay. By representing
    it in data we are able to shield ourselves from the effects of the phenomenon
    while preserving the information about it.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](a23f2254-09d2-4335-8b5f-a3f9256eec14.xhtml), *The Idea of the Type
    Classes*, explore how the Type Class pattern logically emerges from practical
    needs encountered when working with effect types.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](baec5eab-0c98-4407-8f73-9a1a2b9726c4.xhtml), *Basic Type Classes
    and Their Usage*, outlines the most frequently encountered type classes and their
    family in general. After discussing the motivation for the creation of type class
    systems, we proceed further to examine their structure and a few basic type classes
    from them. Type classes such as Monad and Applicative are frequently used in functional
    programming, so they deserve some special attention.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](6b6045c0-bf4d-4ae9-adc1-fdaf23985329.xhtml), *Libraries for Pure
    Functional Programming*, discusses how to use the purely functional techniques
    (effect types and type classes) learned so far in order to develop server-side
    software. We will learn how to write concurrent, asynchronous software for responding
    to HTTP requests, contacting the database. We will also learn about the concurrency
    model modern functional programming offers.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](8cd4731e-73cd-4397-9a94-364549f62633.xhtml), *Patterns of Advanced
    Functional Programming*, explores how to combine effect types to get new effect
    types. You will see how to leverage the power of the compiler''s type system to
    check guarantees about the program on compile time.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 11](99eed1f4-ebef-4129-89ce-15276b06188b.xhtml), *Introduction to
    the Actor Model*, starts with examining the traditional model of concurrent programming
    in details. This model rises a bunch of problems such as race conditions and deadlocks,
    which make programming in it prone to errors that are particularly hard to debug.
    This chapter presents the idea of an Actor model that aims to solve these problems.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 12](90ba083e-160b-4871-a663-575dfc23d458.xhtml), *The Actor Model
    in Practice*, covers the fundamentals of the framework and its concepts. You will
    proceed to learn some of the patterns that emerge during actor-oriented programming
    and also see how Actors interoperate with other widespread concurrency primitives—Futures.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 13](a777bd51-25f3-4842-94a3-caee74788d01.xhtml), *Use Case - A Parallel
    Web Crawler*, examines a larger concurrent application written with the Actor
    model. One good such example is a web crawler application. A web crawler is an
    application that collects links from websites. Starting from a given website,
    it collects all the links on it, follows them, and recursively collects all the
    links from them. This chapter will examine how to implement such a larger application.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Appendix A](14208055-c972-47a3-a9f7-8733f60ee93d.xhtml), *Introduction to
    Scala,* isa short introduction to the Scala language, which is used for examples
    throughout the book.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before reading this book, readers need to know about the concepts of object-oriented
    and imperative programming.
  prefs: []
  type: TYPE_NORMAL
- en: To test the code of this book, you need Docker version 18.06 or higher and Git
    version 2.18.0 or higher.
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from your account at [www.packtpub.com](http://www.packtpub.com).
    If you purchased this book elsewhere, you can visit [www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files emailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the code files by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in or register at [www.packtpub.com](http://www.packtpub.com/support).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the SUPPORT tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Code Downloads & Errata.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name of the book in the Search box and follow the onscreen instructions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  prefs: []
  type: TYPE_NORMAL
- en: WinRAR/7-Zip for Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zipeg/iZip/UnRarX for Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7-Zip/PeaZip for Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/Mastering-Functional-Programming](https://github.com/PacktPublishing/Mastering-Functional-Programming). In
    case there's an update to the code, it will be updated on the existing GitHub
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at **[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)**.
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Download the color images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We also provide a PDF file that has color images of the screenshots/diagrams
    used in this book. You can download it here: [https://www.packtpub.com/sites/default/files/downloads/MasteringFunctionalProgramming_ColorImages.pdf](https://www.packtpub.com/sites/default/files/downloads/MasteringFunctionalProgramming_ColorImages.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`CodeInText`: Indicates code words in text, database table names, folder names,
    filenames, file extensions, pathnames, dummy URLs, user input, and Twitter handles.
    Here is an example: "The `instances` package contains the implementations of the
    type classes for basic data types that are present in the language core and the
    ones defined by the `Cats` library."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.
    For example, words in menus or dialog boxes appear in the text like this. Here
    is an example: "The for comprehension is shorthand for sequentially calling flatMap.
    This technique is called the **Monadic flow**."'
  prefs: []
  type: TYPE_NORMAL
- en: Warnings or important notes appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '**General feedback**: Email `feedback@packtpub.com` and mention the book title
    in the subject of your message. If you have questions about any aspect of this
    book, please email us at `questions@packtpub.com`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/submit-errata](http://www.packtpub.com/submit-errata),
    selecting your book, clicking on the Errata Submission Form link, and entering
    the details.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the Internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at `copyright@packtpub.com` with a
    link to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: Reviews
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Please leave a review. Once you have read and used this book, why not leave
    a review on the site that you purchased it from? Potential readers can then see
    and use your unbiased opinion to make purchase decisions, we at Packt can understand
    what you think about our products, and our authors can see your feedback on their
    book. Thank you!
  prefs: []
  type: TYPE_NORMAL
- en: For more information about Packt, please visit [packtpub.com](https://www.packtpub.com/).
  prefs: []
  type: TYPE_NORMAL
