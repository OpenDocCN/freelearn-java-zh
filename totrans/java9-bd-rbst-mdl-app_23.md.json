["```java\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?> \n    <project   \n\n      xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0  \n      http://maven.apache.org/xsd/maven-4.0.0.xsd\"> \n      <modelVersion>4.0.0</modelVersion> \n      <groupId>com.steeplesoft.sunago</groupId> \n      <artifactId>master</artifactId> \n      <version>1.0-SNAPSHOT</version> \n      <name>Sunago - Master</name> \n      <packaging>pom</packaging> \n    </project> \n```", "```java\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?> \n    <project   \n\n      xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0  \n      http://maven.apache.org/xsd/maven-4.0.0.xsd\"> \n      <modelVersion>4.0.0</modelVersion> \n      <parent> \n        <groupId>com.steeplesoft.sunago</groupId> \n        <artifactId>master</artifactId> \n        <version>1.0-SNAPSHOT</version> \n      </parent> \n      <artifactId>sunago</artifactId> \n      <name>Sunago - App</name> \n      <packaging>jar</packaging> \n    </project> \n```", "```java\n    @Override\n    public void start(Stage stage) throws Exception {\n      Parent root = fxmlLoader.load(\n        getClass().getResource(\"/fxml/sunago.fxml\"));\n\n        Scene scene = new Scene(root);\n        scene.getStylesheets().add(\"/styles/styles.css\");\n\n        stage.setTitle(\"Sunago, your social media aggregator\");\n        stage.setScene(scene);\n        stage.show();\n    }\n```", "```java\n    @FXML \n    private ListView<SocialMediaItem> entriesListView; \n```", "```java\n    @FXML \n    public void closeApplication(ActionEvent event) { \n      Platform.exit(); \n    } \n```", "```java\n    @FXML \n    public void showAbout(ActionEvent event) { \n      Alert alert = new Alert(Alert.AlertType.INFORMATION); \n      alert.setTitle(\"About...\"); \n      alert.setHeaderText(\"Sunago (συνάγω)\"); \n      alert.setContentText(\"(c) Copyright 2016\"); \n      alert.showAndWait(); \n    } \n```", "```java\n    @FXML \n    public void showPreferences(ActionEvent event) { \n      PreferencesController.showAndWait(); \n    } \n```", "```java\n    public interface SocialMediaItem { \n      String getProvider(); \n      String getTitle(); \n      String getBody(); \n      String getUrl(); \n      String getImage(); \n      Date getTimestamp(); \n    } \n```", "```java\n    entriesListView.setCellFactory(listView ->  \n      new SocialMediaItemViewCell()); \n```", "```java\n    entriesListView.setCellFactory( \n      new Callback<ListView<SocialMediaItem>,  \n      ListCell<SocialMediaItem>>() {  \n        @Override \n        public ListCell<SocialMediaItem> call( \n          ListView<SocialMediaItem> param) { \n            return new SocialMediaItemViewCell(); \n          } \n    }); \n```", "```java\n    private final ObservableList<SocialMediaItem> entriesList =  \n      FXCollections.observableArrayList(); \n```", "```java\n    entriesListView.setItems(entriesList); \n```", "```java\n    public class SocialMediaItemViewCell extends  \n      ListCell<SocialMediaItem> { \n      @Override \n      public void updateItem(SocialMediaItem item, boolean empty) { \n        super.updateItem(item, empty); \n        if (item != null) { \n          setGraphic(buildItemCell(item)); \n          this.setOnMouseClicked(me -> SunagoUtil \n            .openUrlInDefaultApplication(item.getUrl())); \n        } else { \n            setGraphic(null); \n          } \n      } \n\n      private Node buildItemCell(SocialMediaItem item) { \n        HBox hbox = new HBox(); \n        InputStream resource = item.getClass() \n          .getResourceAsStream(\"icon.png\"); \n        if (resource != null) { \n          ImageView sourceImage = new ImageView(); \n          sourceImage.setFitHeight(18); \n          sourceImage.setPreserveRatio(true); \n          sourceImage.setSmooth(true); \n          sourceImage.setCache(true); \n          sourceImage.setImage(new Image(resource)); \n          hbox.getChildren().add(sourceImage); \n        } \n\n        if (item.getImage() != null) { \n          HBox picture = new HBox(); \n          picture.setPadding(new Insets(0,10,0,0)); \n          ImageView imageView = new ImageView(item.getImage()); \n          imageView.setPreserveRatio(true); \n          imageView.setFitWidth(150); \n          picture.getChildren().add(imageView); \n          hbox.getChildren().add(picture); \n        } \n\n        Label label = new Label(item.getBody()); \n        label.setFont(Font.font(null, 20)); \n        label.setWrapText(true); \n        hbox.getChildren().add(label); \n\n        return hbox; \n      } \n\n    } \n```", "```java\n    @FXML \n    protected Button savePrefs; \n    @FXML \n    protected Button cancel; \n    @FXML \n    protected TabPane tabPane; \n```", "```java\n    public interface SunagoPreferences { \n      String getPreference(String key); \n      String getPreference(String key, String defaultValue); \n      Integer getPreference(String key, Integer defaultValue); \n      void putPreference(String key, String value); \n      void putPreference(String key, Integer value); \n    } \n```", "```java\n    public class SunagoProperties implements SunagoPreferences { \n      private Properties props = new Properties(); \n      private final String FILE = System.getProperty(\"user.home\")  \n        + File.separator + \".sunago.properties\"; \n\n      public SunagoProperties() { \n        try (InputStream input = new FileInputStream(FILE)) { \n          props.load(input); \n        } catch (IOException ex) { \n        } \n    } \n```", "```java\n    public SunagoProperties(int a) { \n      InputStream input = null; \n      try { \n        input = new FileInputStream(FILE); \n        props.load(input); \n      } catch  (IOException ex) { \n        // do something \n      } finally { \n          if (input != null) { \n            try { \n                input.close(); \n            } catch (IOException ex1) { \n                Logger.getLogger(SunagoProperties.class.getName()) \n                  .log(Level.SEVERE, null, ex1); \n            } \n          } \n        } \n    } \n```", "```java\n    @Override \n    public String getPreference(String key) { \n      return props.getProperty(key); \n    } \n\n    @Override \n    public String getPreference(String key, String defaultValue) { \n      String value = props.getProperty(key); \n      return (value == null) ? defaultValue : value; \n    } \n\n    @Override \n    public Integer getPreference(String key, Integer defaultValue) { \n      String value = props.getProperty(key); \n      return (value == null) ? defaultValue :  \n        Integer.parseInt(value); \n    } \n\n    @Override \n    public void putPreference(String key, String value) { \n      props.put(key, value); \n      store(); \n    } \n\n    @Override \n    public void putPreference(String key, Integer value) { \n      if (value != null) { \n        putPreference(key, value.toString()); \n      } \n    } \n```", "```java\n    private void store() { \n      try (OutputStream output = new FileOutputStream(FILE)) { \n        props.store(output, null); \n      } catch (IOException e) { } \n    } \n```", "```java\n    public class SunagoPreferencesImpl implements SunagoPreferences { \n      private final Preferences prefs = Preferences.userRoot() \n        .node(SunagoPreferencesImpl.class.getPackage() \n        .getName()); \n      @Override \n      public String getPreference(String key) { \n        return prefs.get(key, null); \n      } \n      @Override \n      public String getPreference(String key, String defaultValue) { \n        return prefs.get(key, defaultValue); \n      } \n\n      @Override \n      public Integer getPreference(String key,Integer defaultValue){ \n        return prefs.getInt(key, defaultValue); \n      } \n      @Override \n      public void putPreference(String key, String value) { \n        prefs.put(key, value); \n      } \n      @Override \n      public void putPreference(String key, Integer value) { \n        prefs.putInt(key, value); \n      } \n    } \n```", "```java\n    com.steeplesoft.sunago.app.SunagoPreferencesImpl \n    com.steeplesoft.sunago.app.SunagoProperties \n```", "```java\n    private static SunagoPreferences preferences; \n    public static synchronized \n          SunagoPreferences getSunagoPreferences() { \n        if (preferences == null) { \n          ServiceLoader<SunagoPreferences> spLoader =  \n            ServiceLoader.load(SunagoPreferences.class); \n          Iterator<SunagoPreferences> iterator = \n            spLoader.iterator(); \n          preferences = iterator.hasNext() ? iterator.next() : null; \n        } \n        return preferences; \n    } \n```", "```java\n    public abstract class SocialMediaPreferencesController { \n      public abstract Tab getTab(); \n      public abstract void savePreferences(); \n    } \n```", "```java\n    private List<SocialMediaPreferencesController> smPrefs =  \n      new ArrayList<>(); \n    @Override \n    public void initialize(URL url, ResourceBundle rb) { \n      itemCount.setText(SunagoUtil.getSunagoPreferences() \n       .getPreference(SunagoPrefsKeys.ITEM_COUNT.getKey(), \"50\")); \n      final ServiceLoader<SocialMediaPreferencesController>  \n       smPrefsLoader = ServiceLoader.load( \n         SocialMediaPreferencesController.class); \n       smPrefsLoader.forEach(smp -> smPrefs.add(smp)); \n       smPrefs.forEach(smp -> tabPane.getTabs().add(smp.getTab())); \n    } \n```", "```java\n    public class TwitterPreferencesController  \n      extends SocialMediaPreferencesController { \n        private final TwitterClient twitter; \n        private Tab tab; \n\n        public TwitterPreferencesController() { \n          twitter = new TwitterClient(); \n        } \n\n        @Override \n        public Tab getTab() { \n          if (tab == null) { \n            tab = new Tab(\"Twitter\"); \n            tab.setContent(getNode()); \n          } \n\n          return tab; \n    } \n```", "```java\n    private Node getNode() { \n      return twitter.isAuthenticated() ? buildConfigurationUI() : \n        buildConnectUI(); \n    } \n```", "```java\n    private Node buildConnectUI() { \n      HBox box = new HBox(); \n      box.setPadding(new Insets(10)); \n      Button button = new Button(MessageBundle.getInstance() \n       .getString(\"connect\")); \n      button.setOnAction(event -> connectToTwitter()); \n\n      box.getChildren().add(button); \n\n      return box; \n    } \n```", "```java\n    private void connectToTwitter() { \n      try { \n        RequestToken requestToken =  \n          twitter.getOAuthRequestToken(); \n        LoginController.showAndWait( \n          requestToken.getAuthorizationURL(), \n           e -> ((String) e.executeScript( \n             \"document.documentElement.outerHTML\")) \n              .contains(\"You've granted access to\"), \n               e -> { \n                 final String html =  \n                   \"<kbd aria-labelledby=\"code-desc\"><code>\"; \n                    String body = (String) e.executeScript( \n                      \"document.documentElement.outerHTML\"); \n                    final int start = body.indexOf(html) +  \n                     html.length(); \n                    String code = body.substring(start, start+7); \n                    saveTwitterAuthentication(requestToken, code); \n                    showConfigurationUI(); \n               }); \n      } catch (TwitterException ex) { \n        Logger.getLogger(getClass().getName()) \n          .log(Level.SEVERE, null, ex); \n      } \n    } \n```", "```java\n    public class LoginController implements Initializable { \n      @FXML \n      private WebView webView; \n      private Predicate<WebEngine> loginSuccessTest; \n      private Consumer<WebEngine> handler; \n\n      public static void showAndWait(String url,  \n       Predicate<WebEngine> loginSuccessTest, \n       Consumer<WebEngine> handler) { \n         try { \n           fxmlLoader loader = new fxmlLoader(LoginController \n             .class.getResource(\"/fxml/login.fxml\")); \n\n           Stage stage = new Stage(); \n           stage.setScene(new Scene(loader.load())); \n           LoginController controller =  \n              loader.<LoginController>getController(); \n           controller.setUrl(url); \n           controller.setLoginSuccessTest(loginSuccessTest); \n           controller.setHandler(handler); \n\n           stage.setTitle(\"Login...\"); \n           stage.initModality(Modality.APPLICATION_MODAL); \n\n           stage.showAndWait(); \n         } catch (IOException ex) { \n           throw new RuntimeException(ex); \n         } \n    } \n```", "```java\n    private void saveTwitterAuthentication(RequestToken requestToken,\n     String code) { \n       if (!code.isEmpty()) { \n         try { \n           AccessToken accessToken = twitter \n             .getAcccessToken(requestToken, code); \n           prefs.putPreference(TwitterPrefsKeys.TOKEN.getKey(),  \n             accessToken.getToken()); \n           prefs.putPreference(TwitterPrefsKeys.TOKEN_SECRET.getKey(),  \n             accessToken.getTokenSecret()); \n         } catch (TwitterException ex) { \n           Logger.getLogger(TwitterPreferencesController \n             .class.getName()).log(Level.SEVERE, null, ex); \n         } \n       } \n    } \n```", "```java\n    private void showConfigurationUI() { \n      getTab().setContent(buildConfigurationUI()); \n    } \n    private Node buildConfigurationUI() { \n      VBox box = new VBox(); \n      box.setPadding(new Insets(10)); \n\n      CheckBox cb = new CheckBox(MessageBundle.getInstance() \n        .getString(\"homeTimelineCB\")); \n      cb.selectedProperty().addListener( \n        (ObservableValue<? extends Boolean> ov,  \n          Boolean oldVal, Boolean newVal) -> { \n            showHomeTimeline = newVal; \n          }); \n\n      Label label = new Label(MessageBundle.getInstance() \n        .getString(\"userListLabel\") + \":\"); \n\n      ListView<SelectableItem<UserList>> lv = new ListView<>(); \n      lv.setItems(itemList); \n      lv.setCellFactory(CheckBoxListCell.forListView( \n        item -> item.getSelected())); \n      VBox.setVgrow(lv, Priority.ALWAYS); \n\n      box.getChildren().addAll(cb, label, lv); \n      showTwitterListSelection(); \n\n      return box;\n    } \n```", "```java\n    public abstract class SelectableItem<T> { \n      private final SimpleBooleanProperty selected =  \n        new SimpleBooleanProperty(false); \n      private final T item; \n      public SelectableItem(T item) { \n        this.item = item; \n      } \n      public T getItem() { \n        return item; \n      } \n      public SimpleBooleanProperty getSelected() { \n        return selected; \n      } \n    } \n```", "```java\n    private void showTwitterListSelection() { \n      List<SelectableItem<UserList>> selectable =  \n        twitter.getLists().stream() \n         .map(u -> new SelectableUserList(u)) \n         .collect(Collectors.toList()); \n      List<Long> selectedListIds = twitter.getSelectedLists(prefs); \n      selectable.forEach(s -> s.getSelected() \n        .set(selectedListIds.contains(s.getItem().getId()))); \n      itemList.clear(); \n      itemList.addAll(selectable); \n    } \n```", "```java\n    public void savePreferences() { \n      prefs.putPreference(TwitterPrefsKeys.HOME_TIMELINE.getKey(),  \n       Boolean.toString(showHomeTimeline)); \n      List<String> selectedLists = itemList.stream() \n       .filter(s -> s != null) \n       .filter(s -> s.getSelected().get()) \n       .map(s -> Long.toString(s.getItem().getId())) \n       .collect(Collectors.toList()); \n      prefs.putPreference(TwitterPrefsKeys.SELECTED_LISTS.getKey(),  \n       String.join(\",\", selectedLists)); \n    } \n```", "```java\n    public interface SocialMediaItem { \n      String getProvider(); \n      String getTitle(); \n      String getBody(); \n      String getUrl(); \n      String getImage(); \n      Date getTimestamp(); \n    } \n```", "```java\n    public class Tweet implements SocialMediaItem { \n      private final Status status; \n      private final String url; \n      private final String body; \n\n      public Tweet(Status status) { \n        this.status = status; \n        body = String.format(\"@%s: %s (%s)\",  \n          status.getUser().getScreenName(), \n          status.getText(), status.getCreatedAt().toString()); \n        url = String.format(\"https://twitter.com/%s/status/%d\", \n          status.getUser().getScreenName(), status.getId()); \n    } \n```", "```java\n    public String getImage() { \n      MediaEntity[] mediaEntities = status.getMediaEntities(); \n      if (mediaEntities.length > 0) { \n        return mediaEntities[0].getMediaURLHttps(); \n      } else { \n          Status retweetedStatus = status.getRetweetedStatus(); \n          if (retweetedStatus != null) { \n            if (retweetedStatus.getMediaEntities().length > 0) { \n              return retweetedStatus.getMediaEntities()[0] \n               .getMediaURLHttps(); \n            } \n          } \n        } \n      return null; \n    } \n```", "```java\n    public interface SocialMediaClient { \n      void authenticateUser(String token, String tokenSecret); \n      String getAuthorizationUrl(); \n      List<? Extends SocialMediaItem> getItems(); \n      boolean isAuthenticated(); \n    } \n```", "```java\n    private List<Tweet> processList(long listId) { \n      List<Tweet> tweets = new ArrayList<>(); \n\n      try { \n        final AtomicLong sinceId = new AtomicLong( \n          getSinceId(listId)); \n        final Paging paging = new Paging(1,  \n          prefs.getPreference(SunagoPrefsKeys. \n          ITEM_COUNT.getKey(), 50), sinceId.get()); \n        List<Status> statuses = (listId == HOMETIMELINE) ?  \n          twitter.getHomeTimeline(paging) : \n           twitter.getUserListStatuses(listId, paging); \n        statuses.forEach(s -> { \n          if (s.getId() > sinceId.get()) { \n            sinceId.set(s.getId()); \n          } \n          tweets.add(new Tweet(s)); \n        }); \n        saveSinceId(listId, sinceId.get()); \n      } catch (TwitterException ex) { \n          Logger.getLogger(TwitterClient.class.getName()) \n           .log(Level.SEVERE, null, ex); \n        } \n        return tweets; \n    } \n```", "```java\n    public class MessageBundle { \n      ResourceBundle messages =  \n        ResourceBundle.getBundle(\"Messages\", Locale.getDefault()); \n\n      private MessageBundle() { \n      } \n\n      public final String getString(String key) { \n        return messages.getString(key); \n      } \n\n      private static class LazyHolder { \n        private static final MessageBundle INSTANCE =  \n          new MessageBundle(); \n      } \n\n      public static MessageBundle getInstance() { \n        return LazyHolder.INSTANCE; \n      } \n    } \n```", "```java\n    ResourceBundle messages =  \n      ResourceBundle.getBundle(\"Messages\", Locale.getDefault()); \n```", "```java\n    homeTimelineCB=Include the home timeline \n    userListLabel=User lists to include \n    connect=Connect \n    twitter=Twitter \n```", "```java\n    userListLabel=Listas de usuarios para incluir \n```", "```java\n    <build> \n      <plugins> \n        <plugin> \n          <artifactId>maven-shade-plugin</artifactId> \n            <version>${plugin.shade}</version> \n              <executions> \n                <execution> \n                  <phase>package</phase> \n                    <goals> \n                      <goal>shade</goal> \n                    </goals> \n                  </execution> \n              </executions> \n        </plugin> \n      </plugins> \n    </build> \n```", "```java\n$ ll target/*.jar\n  total 348\n  -rwx------+ 1 jason None  19803 Nov 20 19:22 original-twitter-1.0-\n  SNAPSHOT.jar\n  -rwx------+ 1 jason None 325249 Nov 20 19:22 twitter-1.0-\n  SNAPSHOT.jar  \n```", "```java\n    <dependency> \n      <groupId>${project.groupId}</groupId> \n      <artifactId>api</artifactId> \n      <version>${project.version}</version> \n      <scope>provided</scope> \n    </dependency> \n```", "```java\n    <dependencies> \n      <dependency> \n        <groupId>${project.groupId}</groupId> \n        <artifactId>api</artifactId> \n        <version>${project.version}</version> \n      </dependency> \n      <dependency> \n        <groupId>${project.groupId}</groupId> \n        <artifactId>twitter</artifactId> \n        <version>${project.version}</version> \n      </dependency> \n    </dependencies> \n```", "```java\n    <ToolBar > \n      <items> \n        <Button fx:id=\"refreshButton\" /> \n        <Button fx:id=\"settingsButton\" /> \n      </items> \n    </ToolBar> \n```", "```java\n    @FXML \n    private Button refreshButton; \n    @FXML \n    private Button settingsButton; \n```", "```java\n    refreshButton.setGraphic(getButtonImage(\"/images/reload.png\")); \n    refreshButton.setOnAction(ae -> loadItemsFromNetworks()); \n    refreshButton.setTooltip(new Tooltip(\"Refresh\")); \n\n    settingsButton.setGraphic(getButtonImage(\"/images/settings.png\")); \n    settingsButton.setOnAction(ae -> showPreferences(ae)); \n    settingsButton.setTooltip(new Tooltip(\"Settings\")); \n```", "```java\n    private ImageView getButtonImage(String path) { \n      ImageView imageView = new ImageView( \n        new Image(getClass().getResourceAsStream(path))); \n      imageView.setFitHeight(32); \n      imageView.setPreserveRatio(true); \n      return imageView; \n    } \n```", "```java\n    private void loadItemsFromNetworks() { \n      List<SocialMediaItem> items = new ArrayList<>(); \n      clientLoader.forEach(smc -> { \n        if (smc.isAuthenticated()) { \n            items.addAll(smc.getItems()); \n        } \n      }); \n\n      items.sort((o1, o2) ->  \n        o2.getTimestamp().compareTo(o1.getTimestamp())); \n      entriesList.addAll(0, items); \n    } \n```", "```java\n    <artifactId>instagram</artifactId> \n    <name>Sunago - Instagram</name> \n    <packaging>jar</packaging> \n    <dependencies> \n      <dependency> \n        <groupId>${project.groupId}</groupId> \n        <artifactId>api</artifactId> \n        <version>${project.version}</version> \n        <scope>provided</scope> \n      </dependency> \n      <dependency> \n        <groupId>com.sachinhandiekar</groupId> \n        <artifactId>jInstagram</artifactId> \n        <version>1.1.8</version> \n      </dependency> \n    </dependencies> \n```", "```java\n    public Tab getTab() { \n      if (tab == null) { \n        tab = new Tab(); \n        tab.setText(\"Instagram\"); \n        tab.setContent(getNode()); \n      } \n\n      return tab; \n    } \n\n    private Node getNode() { \n      Node node = instagram.isAuthenticated() \n        ? buildConfigurationUI() : buildConnectUI(); \n      return node; \n    } \n```", "```java\n    private static final String CODE_QUERY_PARAM = \"code=\"; \n    private void showConnectWindow() { \n      LoginController.showAndWait(instagram.getAuthorizationUrl(), \n        e -> e.getLocation().contains(CODE_QUERY_PARAM), \n        e -> { \n          saveInstagramToken(e.getLocation()); \n          showInstagramConfig(); \n        }); \n    } \n```", "```java\n    private void saveInstagramToken(String location) { \n      int index = location.indexOf(CODE_QUERY_PARAM); \n      String code = location.substring(index +  \n        CODE_QUERY_PARAM.length()); \n      Token accessToken = instagram. \n        verifyCodeAndGetAccessToken(code); \n      instagram.authenticateUser(accessToken.getToken(),  \n        accessToken.getSecret()); \n    } \n```", "```java\n    public final class InstagramClient implements\n    SocialMediaClient { \n\n      private final InstagramService service; \n      private Instagram instagram; \n```", "```java\n    service = new InstagramAuthService() \n     .apiKey(apiKey) \n     .apiSecret(apiSecret) \n     .callback(\"http://blogs.steeplesoft.com\") \n     .scope(\"basic public_content relationships follower_list\") \n     .build(); \n```", "```java\n    @Override \n    public List<? extends SocialMediaItem> getItems() { \n      List<Photo> items = new ArrayList<>(); \n      try { \n        UserFeed follows = instagram.getUserFollowList(\"self\"); \n        follows.getUserList().forEach(u ->  \n          items.addAll(processMediaForUser(u))); \n      } catch (InstagramException ex) { \n        Logger.getLogger(InstagramClient.class.getName()) \n          .log(Level.SEVERE, null, ex); \n      } \n\n      return items; \n    } \n```", "```java\n    private List<Photo> processMediaForUser(UserFeedData u) { \n      List<Photo> userMedia = new ArrayList<>(); \n      try { \n        final String id = u.getId(); \n        instagram.getRecentMediaFeed(id, \n          prefs.getPreference(SunagoPrefsKeys.ITEM_COUNT \n            .getKey(), 50), \n          getSinceForUser(id), null, null, null).getData() \n            .forEach(m -> userMedia.add(new Photo(m))); \n        if (!userMedia.isEmpty()) { \n          setSinceForUser(id, userMedia.get(0).getId()); \n        } \n      } catch (InstagramException ex) { \n        Logger.getLogger(InstagramClient.class.getName()) \n          .log(Level.SEVERE, null, ex); \n      } \n      return userMedia; \n    } \n```", "```java\n    <dependency> \n      <groupId>${project.groupId}</groupId> \n      <artifactId>instagram</artifactId> \n      <version>${project.version}</version> \n    </dependency> \n```", "```java\n    #!/bin/bash \n    JARS=sunago-1.0-SNAPSHOT.jar \n    SEP=: \n    for JAR in `ls ~/.sunago/*.jar` ; do \n      JARS=\"$JARS$SEP$JAR\" \n    done \n\n    java -cp $JARS com.steeplesoft.sunago.app.Sunago \n```", "```java\n    public Sunago() throws Exception { \n      super(); \n      updateClassLoader(); \n    } \n```", "```java\n    private void updateClassLoader() { \n      final File[] jars = getFiles(); \n      if (jars != null) { \n        URL[] urls = new URL[jars.length]; \n        int index = 0; \n        for (File jar : jars) { \n          try { \n            urls[index] = jar.toURI().toURL(); \n            index++; \n          } catch (MalformedURLException ex) { \n              Logger.getLogger(Sunago.class.getName()) \n               .log(Level.SEVERE, null, ex); \n            } \n        } \n        Thread.currentThread().setContextClassLoader( \n          URLClassLoader.newInstance(urls)); \n      } \n    } \n```", "```java\n    private File[] getFiles() { \n      String pluginDir = System.getProperty(\"user.home\")  \n       + \"/.sunago\"; \n      return new File(pluginDir).listFiles(file -> file.isFile() &&  \n       file.getName().toLowerCase().endsWith(\".jar\")); \n    } \n```"]