["```java\npublic class Book {    private final String title;\n    private final String author;\n    private final String publisher;\n    private final String genre;\n    // constructor method\n    // builder inner class\n}\n```", "```java\nimport java.util.HashMap;import java.util.Map;\nimport java.util.Objects;\nimport java.util.Optional;\npublic enum Database {\n    INSTANCE;\n    private Map<String, Map<String, Object>> db = new\n      HashMap<>();\n    public Optional<Map<String, Object>> findById(String id) {\n        Objects.requireNonNull(id, \"id is required\");\n        return Optional.ofNullable(db.get(id));\n    }\n    public Map<String, Object> insert(String id,\n      Map<String, Object> entry) {\n        Objects.requireNonNull(id, \"id is required\");\n        Objects.requireNonNull(entry, \"entry is required\");\n        db.put(id, entry);\n        return entry;\n    }\n    public void delete(String id) {\n        Objects.requireNonNull(id, \"id is required\");\n        db.remove(id);\n    }\n    public Map<String, Object> update(String id,\n      Map<String, Object> entry) {\n        Objects.requireNonNull(id, \"id is required\");\n        Objects.requireNonNull(entry, \"entry is required\");\n        if (findById(id).isEmpty()) {\n            throw new IllegalArgumentException(\"The\n              database cannot be updated\");\n        }\n        return entry;\n    }\n}\n```", "```java\nBook book = BookSupplier.INSTANCE.get(); // 1// – - 2 – -\nMap<String, Object> entry = new HashMap<>();\nentry.put(\"title\", book.getTitle());\nentry.put(\"author\", book.getAuthor());\nentry.put(\"publisher\", book.getPublisher());\nentry.put(\"genre\", book.getGenre());\n// - - - -\nDatabase database = Database.INSTANCE; // 3\ndatabase.insert(book.getTitle(), entry); //4\nMap<String, Object> map = database.findById(book.getTitle())\n                .orElseThrow(); // 5\nBook entity = Book.builder()\n        .title((String) map.get(\"title\"))\n        .author((String) map.get(\"author\"))\n        .publisher((String) map.get(\"publisher\"))\n        .genre((String) map.get(\"genre\"))\n        .build(); // 6\nSystem.out.println(\"the entity result: \" + entity);\n```", "```java\nclass BookMapper {    private Database database = Database.INSTANCE;\n    public Optional<Book> findById(String id) {\n        Objects.requireNonNull(id, \"id is required\");\n        return database.findById(id)\n                .map(entity());\n    }\n    private Function<Map<String, Object>, Book> entity() {\n        return (map) ->\n            Book.builder()\n                    .title((String) map.get(\"title\"))\n                    .author((String) map.get(\"author\"))\n                    .publisher((String)\n                      map.get(\"publisher\"))\n                    .genre((String) map.get(\"genre\"))\n                    .build();\n    }\n    private Function<Book, Map<String, Object>> database() {\n        return (book) -> {\n            Map<String, Object> entry = new HashMap<>();\n            entry.put(\"title\", book.getTitle());\n            entry.put(\"author\", book.getAuthor());\n            entry.put(\"publisher\", book.getPublisher());\n            entry.put(\"genre\", book.getGenre());\n            return entry;\n        };\n    }\n}\n```", "```java\nBook book = BookSupplier.INSTANCE.get();BookMapper mapper = new BookMapper();\nmapper.insert(book);\nBook entity =\n  mapper.findById(book.getTitle()).orElseThrow();\nSystem.out.println(\"the entity result: \" + entity);\n```", "```java\npublic interface BookDAO {    Optional<Book> findById(String id);\n    void insert(Book book);\n    void update(Book book);\n    void deleteByTitle(String title);\n}\n```", "```java\npublic class BookMemory implements BookDAO {//..\n    @Override\n    public void update(Book book) {\n     mapper.update(book);\n    }\n//…\n}\n```", "```java\nBook book = BookSupplier.INSTANCE.get();BookDAO dao = new BookMemory();\ndao.insert(book);\nBook entity = dao.findById(book.getTitle()) .orElseThrow();\nSystem.out.println(\"the entity result: \" + entity);\n```", "```java\npublic interface Library {    Book register(Book book);\n    Optional<Book> findByTitle(String title);\n    void unregister(Book book);\n}\n```", "```java\npublic class LibraryMemory implements Library {    private final BookDAO dao;\n    public LibraryMemory(BookDAO dao) {\n        this.dao = dao;\n    }\n    @Override\n    public Book register(Book book) {\n        Objects.requireNonNull(book, \"book is required\");\n        if(dao.findByTitle(book.getTitle()).isPresent()) {\n            dao.update(book);\n        } else {\n            dao.insert(book);\n        }\n        return book;\n    }\n    @Override\n    public Book unregister(Book book) {\n        Objects.requireNonNull(book, \"book is required\");\n        dao.deleteByTitle(book.getTitle());\n        return book;\n    }\n    @Override\n    public Optional<Book> findByTitle(String title) {\n        Objects.requireNonNull(title, \"title is required\");\n        return dao.findByTitle(title);\n    }\n}\n```", "```java\nBook book = BookSupplier.INSTANCE.get();Library library = new LibraryMemory(new BookMemory());\nlibrary.register(book);\nOptional<Book> entity =\n  library.findByTitle(book.getTitle());\nSystem.out.println(\"the entity result: \" + entity);\n```", "```java\npublic class Book extends Model {    private final String title;\n    private final String author;\n    private final String publisher;\n    private final String genre;\n}\n```", "```java\nBook book = ...;book.insert();\nBook model = Book.findById(book.getId());\n```"]