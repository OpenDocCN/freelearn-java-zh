["```java\nspring init \\\n--boot-version=3.0.4 \\\n--type=gradle-project \\\n--java-version=17 \\\n--packaging=jar \\\n--name=product-service \\\n--package-name=se.magnus.microservices.core.product \\\n--groupId=se.magnus.microservices.core.product \\\n--dependencies=actuator,webflux \\\n--version=1.0.0-SNAPSHOT \\\nproduct-service \n```", "```java\nmkdir some-temp-folder\ncd some-temp-folder\n$BOOK_HOME/Chapter03/1-spring-init/create-projects.bash \n```", "```java\nmicroservices/\n├── product-composite-service \n├── product-service\n├── recommendation-service\n└── review-service \n```", "```java\nfind microservices/product-service -type f \n```", "```java\npackage se.magnus.microservices.core.product;\n@SpringBootApplication\npublic class ProductServiceApplication {\n   public static void main(String[] args) {\n      SpringApplication.run(ProductServiceApplication.class, args);\n   }\n} \n```", "```java\npackage se.magnus.microservices.core.product;\n**@SpringBootTest**\nclass ProductServiceApplicationTests {\n   @Test\n   void contextLoads() {\n   }\n} \n```", "```java\nplugins {\n    id 'java'\n    id 'org.springframework.boot' version '3.0.4'\n    id 'io.spring.dependency-management' version '1.1.0'\n} \n```", "```java\n**group** = 'se.magnus.microservices.composite.product'\n**version** = '1.0.0-SNAPSHOT'\n**sourceCompatibility** = '17'\nrepositories {\n    mavenCentral()\n}\n**dependencies** {\n    implementation 'org.springframework.boot:spring-boot-starter-actuator'\n    implementation 'org.springframework.boot:spring-boot-starter-webflux'\n    testImplementation 'org.springframework.boot:spring-boot-starter-test'\n    testImplementation 'io.projectreactor:reactor-test'\n}\n**tasks.named('test') {**\n **useJUnitPlatform()**\n**}** \n```", "```java\ncd microservices/product-composite-service; ./gradlew build; cd -; \\\ncd microservices/product-service;           ./gradlew build; cd -; \\\ncd microservices/recommendation-service;    ./gradlew build; cd -; \\\ncd microservices/review-service;            ./gradlew build; cd -; \n```", "```java\n    cat <<EOF > settings.gradle\n    include ':microservices:product-service'\n    include ':microservices:review-service'\n    include ':microservices:recommendation-service'\n    include ':microservices:product-composite-service'\n    EOF \n    ```", "```java\n    cp -r microservices/product-service/gradle .\n    cp microservices/product-service/gradlew .\n    cp microservices/product-service/gradlew.bat .\n    cp microservices/product-service/.gitignore . \n    ```", "```java\n    find microservices -depth -name \"gradle\" -exec rm -rfv \"{}\" \\; \n    find microservices -depth -name \"gradlew*\" -exec rm -fv \"{}\" \\; \n    ```", "```java\n    ./gradlew build \n    ```", "```java\ncd $BOOK_HOME/Chapter03/1-spring-init\n./gradlew build \n```", "```java\next {\n    springBootVersion = '3.0.4'\n}\ndependencies {\n    implementation platform(\"org.springframework.boot:spring-boot-dependencies:${springBootVersion}\") \n```", "```java\n$BOOK_HOME/Chapter03/2-basic-rest-services/api/src/main/java/se/magnus/api/core\n├── product\n│   ├── Product.java\n│   └── ProductService.java\n├── recommendation\n│   ├── Recommendation.java\n│   └── RecommendationService.java\n└── review\n    ├── Review.java\n    └── ReviewService.java \n```", "```java\npackage se.magnus.api.core.product;\npublic interface ProductService {\n    **@GetMapping**(\n        value    = \"/product/{productId}\",\n        produces = \"application/json\")\n     Product **getProduct****(****@PathVariable** int productId);\n} \n```", "```java\npublic class **Product** {\n  private final int productId;\n  private final String name;\n  private final int weight;\n  private final String serviceAddress;\n} \n```", "```java\n    dependencies {\n       implementation project(':api')\n       implementation project(':util') \n    ```", "```java\n    @SpringBootApplication\n    @ComponentScan(\"se.magnus\")\n    public class ProductServiceApplication { \n    ```", "```java\n    package se.magnus.microservices.core.product.services;\n    **@RestController**\n    public class ProductServiceImpl implements ProductService {\n    } \n    ```", "```java\n    private final ServiceUtil serviceUtil;\n    @Autowired\n    public ProductServiceImpl(ServiceUtil serviceUtil) {\n        this.serviceUtil = serviceUtil;\n    } \n    ```", "```java\n    @Override\n    public Product getProduct(int productId) {\n     return new Product(productId, \"name-\" + productId, 123, \n     serviceUtil.getServiceAddress());\n    } \n    ```", "```java\n    server.port: 7001\n    logging:\n      level:\n        root: INFO\n        se.magnus.microservices: DEBUG \n    ```", "```java\n    cd $BOOK_HOME/Chapter03/2-basic-rest-services\n    ./gradlew build\n    java -jar microservices/product-service/build/libs/*.jar & \n    ```", "```java\n    curl http://localhost:7001/product/123 \n    ```", "```java\n    kill $(jobs -p) \n    ```", "```java\njava -jar microservices/product-service/build/libs/*.jar \n```", "```java\njar {\n    enabled = false\n} \n```", "```java\n$BOOK_HOME/Chapter03/2-basic-rest-services/api\n└── src/main/java/se/magnus/api/composite\n    └── product\n        ├── ProductAggregate.java\n        ├── ProductCompositeService.java\n        ├── RecommendationSummary.java\n        ├── ReviewSummary.java\n        └── ServiceAddresses.java \n```", "```java\npackage se.magnus.api.composite.product;\npublic interface ProductCompositeService {\n    @GetMapping(\n        value    = \"/product-composite/{productId}\",\n        produces = \"application/json\")\n    ProductAggregate getProduct(@PathVariable int productId);\n} \n```", "```java\npackage se.magnus.api.composite.product;\npublic class ProductAggregate {\n    private final int productId;\n    private final String name;\n    private final int weight;\n    private final **List<RecommendationSummary> recommendations**;\n    private final **List<ReviewSummary> reviews**;\n    private final ServiceAddresses serviceAddresses; \n```", "```java\nserver.port: 7000\napp:\n  product-service:\n    host: localhost\n    port: 7001\n  recommendation-service:\n    host: localhost\n    port: 7002\n  review-service:\n    host: localhost\n    port: 7003 \n```", "```java\npackage se.magnus.microservices.composite.product.services;\n@Component\npublic class ProductCompositeIntegration implements ProductService, RecommendationService, ReviewService { \n```", "```java\n@Bean\nRestTemplate restTemplate() {\n   return new RestTemplate();\n} \n```", "```java\n    private final RestTemplate restTemplate;\n    private final ObjectMapper mapper;\n    private final String productServiceUrl;\n    private final String recommendationServiceUrl;\n    private final String reviewServiceUrl;\n    @Autowired\n    public ProductCompositeIntegration(\n      RestTemplate restTemplate,\n      ObjectMapper mapper,\n      @Value(\"${app.product-service.host}\") \n      String productServiceHost,\n\n      @Value(\"${app.product-service.port}\")\n      int productServicePort,\n      @Value(\"${app.recommendation-service.host}\")\n      String recommendationServiceHost,\n      @Value(\"${app.recommendation-service.port}\")\n      int recommendationServicePort,\n      @Value(\"${app.review-service.host}\")\n      String reviewServiceHost,\n      @Value(\"${app.review-service.port}\")\n      int reviewServicePort\n    ) \n    ```", "```java\n    {\n      this.restTemplate = restTemplate;\n      this.mapper = mapper;\n      productServiceUrl = \"http://\" + productServiceHost + \":\" + \n      productServicePort + \"/product/\";\n      recommendationServiceUrl = \"http://\" + recommendationServiceHost\n      + \":\" + recommendationServicePort + \"/recommendation?\n      productId=\"; reviewServiceUrl = \"http://\" + reviewServiceHost + \n      \":\" + reviewServicePort + \"/review?productId=\";\n    } \n    ```", "```java\n    public Product getProduct(int productId) {\n     String url = productServiceUrl + productId;\n     Product product = **restTemplate**.getForObject(url, Product.class);\n     return product;\n    }\n    public List<Recommendation> getRecommendations(int productId) {\n        String url = recommendationServiceUrl + productId;\n        List<Recommendation> recommendations = \n        **restTemplate**.exchange(url, GET, null, new \n        **ParameterizedTypeReference**<List<Recommendation>>() \n        {}).getBody();\n        return recommendations;\n    }\n    public List<Review> getReviews(int productId) {\n        String url = reviewServiceUrl + productId;\n        List<Review> reviews = **restTemplate**.exchange(url, GET, null,\n        new **ParameterizedTypeReference**<List<Review>>() {}).getBody();\n        return reviews;\n    } \n    ```", "```java\n    package se.magnus.microservices.composite.product.services;\n    @RestController\n    public class ProductCompositeServiceImpl implements ProductCompositeService { \n    ```", "```java\n    private final ServiceUtil serviceUtil;\n    private ProductCompositeIntegration integration;\n    @Autowired\n    public ProductCompositeServiceImpl(ServiceUtil serviceUtil, ProductCompositeIntegration integration) {\n        this.serviceUtil = serviceUtil;\n        this.integration = integration;\n    } \n    ```", "```java\n    @Override\n    public ProductAggregate getProduct(int productId) {\n\n      Product product = integration.getProduct(productId);\n      List<Recommendation> recommendations = \n      integration.getRecommendations(productId);\n      List<Review> reviews = integration.getReviews(productId);\n\n      return **createProductAggregate**(product, recommendations,\n      reviews, serviceUtil.getServiceAddress());\n    } \n    ```", "```java\n@ResponseStatus(**UNPROCESSABLE_ENTITY**)\n@ExceptionHandler(**InvalidInputException.class**)\npublic @ResponseBody HttpErrorInfo handleInvalidInputException(\n    ServerHttpRequest request, InvalidInputException ex) {\n    return createHttpErrorInfo(UNPROCESSABLE_ENTITY, request, ex);\n} \n```", "```java\nif (productId < 1) throw new **InvalidInputException**(\"Invalid productId: \n    \" + productId);\nif (productId == 13) throw new **NotFoundException**(\"No product found for \n    productId: \" + productId); \n```", "```java\ncatch (HttpClientErrorException ex) {\n    switch (HttpStatus.resolve(ex.getStatusCode().value())) {\n    case **NOT_FOUND**:\n        throw new NotFoundException(getErrorMessage(ex));\n    case **UNPROCESSABLE_ENTITY**:\n        throw new InvalidInputException(getErrorMessage(ex));\n    default:\n        LOG.warn(\"Got an unexpected HTTP error: {}, will rethrow it\", \n        ex.getStatusCode());\n        LOG.warn(\"Error body: {}\", ex.getResponseBodyAsString());\n        throw ex;\n    }\n} \n```", "```java\ncd $BOOK_HOME/Chapter03/2-basic-rest-services/\n./gradlew build \n```", "```java\njava -jar microservices/product-composite-service/build/libs/*.jar &\njava -jar microservices/product-service/build/libs/*.jar &\njava -jar microservices/recommendation-service/build/libs/*.jar &\njava -jar microservices/review-service/build/libs/*.jar & \n```", "```java\ncurl http://localhost:7000/product-composite/1 \n```", "```java\ncurl http://localhost:7000/product-composite/1 -s | jq . \n```", "```java\n# Verify that a 404 (Not Found) error is returned for a non-existing productId (13)\ncurl http://localhost:7000/product-composite/13 -i\n# Verify that no recommendations are returned for productId 113\ncurl http://localhost:7000/product-composite/113 -s | jq .\n# Verify that no reviews are returned for productId 213\ncurl http://localhost:7000/product-composite/213 -s | jq .\n# Verify that a 422 (Unprocessable Entity) error is returned for a productId that is out of range (-1)\ncurl http://localhost:7000/product-composite/-1 -i\n# Verify that a 400 (Bad Request) error is returned for a productId that is not a number, i.e. invalid format\ncurl http://localhost:7000/product-composite/invalidProductId -i \n```", "```java\nkill $(jobs -p) \n```", "```java\n@Autowired\nprivate **WebTestClient client**;\n@Test\nvoid getProductById() {\n  **client**.get()\n    .uri(\"/product-composite/\" + PRODUCT_ID_OK)\n    .accept(APPLICATION_JSON_UTF8)\n    .exchange()\n    .expectStatus().isOk()\n    .expectHeader().contentType(APPLICATION_JSON_UTF8)\n    .expectBody()\n    .jsonPath(\"$.productId\").isEqualTo(PRODUCT_ID_OK)\n    .jsonPath(\"$.recommendations.length()\").isEqualTo(1)\n    .jsonPath(\"$.reviews.length()\").isEqualTo(1);\n} \n```", "```java\n@Test\npublic void getProductNotFound() {\n  client.get()\n    .uri(\"/product-composite/\" + PRODUCT_ID_NOT_FOUND)\n    .accept(APPLICATION_JSON_UTF8)\n    .exchange()\n    **.expectStatus().isNotFound()**\n    .expectHeader().contentType(APPLICATION_JSON_UTF8)\n    .expectBody()\n    .jsonPath(\"$.path\").isEqualTo(\"/product-composite/\" + \n     PRODUCT_ID_NOT_FOUND)\n    **.jsonPath(****\"$.message\"****).isEqualTo(****\"NOT FOUND: \"** **+** \n **PRODUCT_ID_NOT_FOUND);**\n} \n```", "```java\nprivate static final int **PRODUCT_ID_OK** = 1;\nprivate static final int **PRODUCT_ID_NOT_FOUND** = 2;\nprivate static final int **PRODUCT_ID_INVALID** = 3;\n**@MockBean**\nprivate **ProductCompositeIntegration compositeIntegration**;\n@BeforeEach\nvoid setUp() {\n  when(compositeIntegration.getProduct(PRODUCT_ID_OK)).\n    thenReturn(new Product(PRODUCT_ID_OK, \"name\", 1, \"mock-address\"));\n  when(compositeIntegration.getRecommendations(PRODUCT_ID_OK)).\n    thenReturn(singletonList(new Recommendation(PRODUCT_ID_OK, 1, \n    \"author\", 1, \"content\", \"mock address\")));\n     when(compositeIntegration.getReviews(PRODUCT_ID_OK)).\n    thenReturn(singletonList(new Review(PRODUCT_ID_OK, 1, \"author\", \n    \"subject\", \"content\", \"mock address\")));\n  when(compositeIntegration.getProduct(PRODUCT_ID_NOT_FOUND)).\n    thenThrow(new NotFoundException(\"NOT FOUND: \" + \n    PRODUCT_ID_NOT_FOUND));\n  when(compositeIntegration.getProduct(PRODUCT_ID_INVALID)).\n    thenThrow(new InvalidInputException(\"INVALID: \" + \n    PRODUCT_ID_INVALID));\n} \n```", "```java\n./gradlew build \n```", "```java\n./gradlew test \n```", "```java\n# Verify that a normal request works, expect three recommendations and three reviews\nassertCurl 200 \"curl http://$HOST:${PORT}/product-composite/1 -s\"\nassertEqual 1 $(echo $RESPONSE | jq .productId)\nassertEqual 3 $(echo $RESPONSE | jq \".recommendations | length\")\nassertEqual 3 $(echo $RESPONSE | jq \".reviews | length\") \n```", "```java\n# Verify that a 404 (Not Found) error is returned for a non-existing productId (13)\nassertCurl 404 \"curl http://$HOST:${PORT}/product-composite/13 -s\" \n```", "```java\n    cd $BOOK_HOME/Chapter03/2-basic-rest-services\n    java -jar microservices/product-composite-service/build/libs/*.jar & \n    java -jar microservices/product-service/build/libs/*.jar &\n    java -jar microservices/recommendation-service/build/libs/*.jar &\n    java -jar microservices/review-service/build/libs/*.jar & \n    ```", "```java\n    ./test-em-all.bash \n    ```", "```java\n    kill $(jobs -p) \n    ```"]