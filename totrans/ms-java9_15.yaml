- en: Best Practices In Java 9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last chapter, we explored several changes regarding command-line flags
    in Java 9\. Specifically, we covered unified JVM logging, compiler control, new
    diagnostic commands, removal of the HPROF heap profiling agent, the removal of
    the **Java Heap Analysis Tool** (**JHAT**), command-line flag argument validation,
    and the ability to compile for older platform versions.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will focus on best practices with additional utilities
    provided with the Java 9 platform. Specifically, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Support for UTF-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unicode 7.0.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linux/AArch64 port
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multi-resolution images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common Locale Data Repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for UTF-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Unicode Transformation Format-8** (**UTF-8**) is a character set that encapsulates
    all Unicode characters using one to four 8-bit bytes. It is the byte-oriented
    encoded form of Unicode. UTF-8 is and has been the predominant character set for
    encoding web pages since 2009\. Here are some characteristics of UTF-8:'
  prefs: []
  type: TYPE_NORMAL
- en: Can encode all 1,112,064 Unicode code points
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uses one to four 8-bit bytes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accounts for nearly 90% of all web pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is backward compatible with ASCII
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is reversible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The pervasive use of UTF-8 underscores the importance of ensuring the Java platform
    fully supports UTF-8\. This mindset led to the Java Enhancement Proposal 226,
    **UTF-8 property resource bundles**. With Java 9 applications, we have the ability
    to specify property files that have UTF-8 encoding. The Java 9 platform includes
    changes to the `ResourceBundle` API to support UTF-8.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at the pre-Java 9 `ResourceBundle` class, followed by what
    changes were made to this class in the Java 9 platform.
  prefs: []
  type: TYPE_NORMAL
- en: The ResourceBundle class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following class provides developers with the ability to isolate locale-specific
    resources from a resource bundle. This class significantly simplifies localization
    and translation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Creating resource bundles needs a purposeful approach. For example, let''s
    imagine that we are creating a resource bundle that will support multiple languages
    for a business application. Our button labels, among other things, will be displayed
    differently depending on the current locale. So, for our example, we can create
    a resource bundle for our buttons. We can call it `buttonResources`. Then, for
    each locale, we can create a `buttonResource_<identifier>`. Here are some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '`buttonResource_ja`: for Japanese'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`buttonResource_uk`: for UK English'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`buttonResource_it`: for Italian'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`buttonResource_lh`: for Lithuanian'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can use a resource bundle with the same name as the base name for our default
    bundle. So, `buttonResource` would contain our default bundle.
  prefs: []
  type: TYPE_NORMAL
- en: 'To obtain a locale-specific object, we make a call to the `getBundle` method.
    An example follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the next sections we will examine the `ResourceBundle` class by looking at
    its nested class, field and constructor, and included methods.
  prefs: []
  type: TYPE_NORMAL
- en: The nested class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There is one nested class associated with the `ResourceBundle` class, that
    is the `ResourceBundle.Control` class. It provides callback methods that are used
    when the `ResourceBundle.getBundle` method is used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The `ResourceBundle.Control` class has the following fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '`public static final List<String> FORMAT_CLASS`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public static final List<String> FORMAT_DEFAULT`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public static final List<String> FORMAT_PROPERTIES`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public static final long TTL_DONT_CACHE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public static final long TTL_NO_EXPIRATION_CONTROL`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The class has a single, empty constructor and the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`getCandidateLocales()`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '| **Component** | **Details** |'
  prefs: []
  type: TYPE_TB
- en: '| Throws | `NullPointerException` (if `baseName` or `locale` is null) |'
  prefs: []
  type: TYPE_TB
- en: '| Parameters | `baseName`: a fully qualified class name`locale`: the desired
    locale |'
  prefs: []
  type: TYPE_TB
- en: '| Returns | List of candidate locales |'
  prefs: []
  type: TYPE_TB
- en: '`getControl()`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '| **Component** | **Details** |'
  prefs: []
  type: TYPE_TB
- en: '| Throws | `IllegalArgumentException` (if `formats` is unknown)`NullPointerException`
    (if `formats` is null) |'
  prefs: []
  type: TYPE_TB
- en: '| Parameters | `formats`: These are the formats that will be returned by the
    `ResourceBundle.Control.getFormats` method |'
  prefs: []
  type: TYPE_TB
- en: '| Returns | A `ResourceBundle.Control` that supports the formats specified
    |'
  prefs: []
  type: TYPE_TB
- en: '`getFallbackLocale()`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '| **Component** | **Details** |'
  prefs: []
  type: TYPE_TB
- en: '| Throws | `NullPointerException` (if `baseName` or `locale` is null) |'
  prefs: []
  type: TYPE_TB
- en: '| Parameters | `baseName`: a fully qualified class name`locale`: the desired
    locale that could not be found with the `ResourceBundle.getBundle` method |'
  prefs: []
  type: TYPE_TB
- en: '| Returns | The fallback locale |'
  prefs: []
  type: TYPE_TB
- en: '`getFormats()`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '| **Component** | **Details** |'
  prefs: []
  type: TYPE_TB
- en: '| Throws | `NullPointerException` (if `baseName` is null) |'
  prefs: []
  type: TYPE_TB
- en: '| Parameters | `baseName`: a fully qualified class name |'
  prefs: []
  type: TYPE_TB
- en: '| Returns | A list of Strings with their formats so the resource bundles can
    be loaded |'
  prefs: []
  type: TYPE_TB
- en: '`getNoFallbackControl()`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '| **Component** | **Details** |'
  prefs: []
  type: TYPE_TB
- en: '| Throws | `IllegalArgumentException` (if `formats` is unknown)`NullPointerException`
    (if `formats` is null) |'
  prefs: []
  type: TYPE_TB
- en: '| Parameters | `formats`: these are the formats that will be returned by the
    `ResourceBundle.Control.getFormats` method |'
  prefs: []
  type: TYPE_TB
- en: '| Returns | A `ResourceBundle.Control` that supports the formats specified
    without a fallback locale. |'
  prefs: []
  type: TYPE_TB
- en: '`getTimeToLive()`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '| **Component** | **Details** |'
  prefs: []
  type: TYPE_TB
- en: '| Throws | `NullPointerException` (if `baseName` is null) |'
  prefs: []
  type: TYPE_TB
- en: '| Parameters | `baseName`: a fully qualified class name`locale`: the desired
    locale |'
  prefs: []
  type: TYPE_TB
- en: '| Returns | Zero or a positive millisecond that is offset from the cached time
    |'
  prefs: []
  type: TYPE_TB
- en: '`needsReload()`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '| **Component** | **Details** |'
  prefs: []
  type: TYPE_TB
- en: '| Throws | `NullPointerException` (if any of the following listed parameters
    are null):'
  prefs: []
  type: TYPE_NORMAL
- en: '`baseName`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`locale`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`format`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`loader`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bundle`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameters | `baseName`: a fully qualified class name`locale`: the desired
    locale`format`: the resource bundle format`loader`: the `ClassLoader` that should
    be used to load the bundle`bundle`: the expired bundle`loadTime`: a time bundle
    was added to the cache |'
  prefs: []
  type: TYPE_TB
- en: '| Returns | `true`/`false` to indicate if the expired bundle needs to be reloaded
    |'
  prefs: []
  type: TYPE_TB
- en: '`newBundle()`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '| **Component** | **Details** |'
  prefs: []
  type: TYPE_TB
- en: '| Throws | `ClassCastException` (if the loaded class cannot be cast to `ResourceBundle`)`ExceptionInInitializerError`
    (if initialization fails)`IllegalAccessException` (if the class or constructor
    is not accessible)`IllegalArgumentException` (if the format is unknown)`InstantiationException`
    (if the class instantiation fails)`IOException` (resource reading error)`NullPointerException`
    (if any of the following listed parameters are null):'
  prefs: []
  type: TYPE_NORMAL
- en: '`baseName`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`locale`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`format`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`loader`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SecurityException` (if access to new instances is denied) |'
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameters | `baseName`: a fully qualified class name`locale`: the desired
    locale`format`: the resource bundle format`loader`: the `ClassLoader` that should
    be used to load the bundle`reload`: `true`/`false` flag indicating if the resource
    bundle has expired |'
  prefs: []
  type: TYPE_TB
- en: '| Returns | Instance of the resource bundle |'
  prefs: []
  type: TYPE_TB
- en: '`toBundleName()`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '| **Component** | **Details** |'
  prefs: []
  type: TYPE_TB
- en: '| Throws | `NullPointerException` (if `baseName` or `locale` is null) |'
  prefs: []
  type: TYPE_TB
- en: '| Parameters | `baseName`: a fully qualified class name`locale`: the desired
    locale |'
  prefs: []
  type: TYPE_TB
- en: '| Returns | The bundle name |'
  prefs: []
  type: TYPE_TB
- en: '`toResourceName()`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '| **Component** | **Details** |'
  prefs: []
  type: TYPE_TB
- en: '| Throws | `NullPointerException` (if `bundleName` or `suffix` is null) |'
  prefs: []
  type: TYPE_TB
- en: '| Parameters | `bundleName`: the name of the bundle`suffix`: the suffix for
    the file name |'
  prefs: []
  type: TYPE_TB
- en: '| Returns | The converted resource name |'
  prefs: []
  type: TYPE_TB
- en: Fields and constructors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `ResourceBundle` class has one field as described here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The parent bundle is searched by the `getObject` method when a specified resource
    is not found.
  prefs: []
  type: TYPE_NORMAL
- en: 'The constructor for the ResourceBundle class is as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `ResourceBundle` class has 18 methods, each described here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`clearCache()`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '| **Component** | **Details** |'
  prefs: []
  type: TYPE_TB
- en: '| Throws | None |'
  prefs: []
  type: TYPE_TB
- en: '| Parameters | None |'
  prefs: []
  type: TYPE_TB
- en: '| Returns | None |'
  prefs: []
  type: TYPE_TB
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '| **Component** | **Details** |'
  prefs: []
  type: TYPE_TB
- en: '| Throws | `NullPointerException` (if loader is null) |'
  prefs: []
  type: TYPE_TB
- en: '| Parameters | `loader`: the class loader |'
  prefs: []
  type: TYPE_TB
- en: '| Returns | None |'
  prefs: []
  type: TYPE_TB
- en: '`containsKey()`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '| **Component** | **Details** |'
  prefs: []
  type: TYPE_TB
- en: '| Throws | `NullPointerException` (if `key` is null) |'
  prefs: []
  type: TYPE_TB
- en: '| Parameters | `key`: resource key |'
  prefs: []
  type: TYPE_TB
- en: '| Returns | `true`/`false` depending on if the key is in the `ResourceBundle`
    or parent bundles |'
  prefs: []
  type: TYPE_TB
- en: '`getBundle()`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '| **Component** | **Details** |'
  prefs: []
  type: TYPE_TB
- en: '| Throws | `MissingResourceException` (if the resource bundle for the provided
    `baseName` is not found)`NullPointerException` (if `baseName` is null) |'
  prefs: []
  type: TYPE_TB
- en: '| Parameters | `baseName`: fully qualified class name |'
  prefs: []
  type: TYPE_TB
- en: '| Returns | Resource bundle based on the given `baseName` and the default locale
    |'
  prefs: []
  type: TYPE_TB
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '| **Component** | **Details** |'
  prefs: []
  type: TYPE_TB
- en: '| Throws | `IllegalArgumentException` (if the passed control performs improperly)`MissingResourceException`
    (if the resource bundle for the provided `baseName` is not found)`NullPointerException`
    (if `baseName` is null) |'
  prefs: []
  type: TYPE_TB
- en: '| Parameters | `baseName`: fully qualified class name`control`: the control
    provides information so the resource bundle can be loaded |'
  prefs: []
  type: TYPE_TB
- en: '| Returns | Resource bundle based on the given `baseName` and the default locale
    |'
  prefs: []
  type: TYPE_TB
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '| **Component** | **Details** |'
  prefs: []
  type: TYPE_TB
- en: '| Throws | `MissingResourceException` (if the resource bundle for the provided
    `baseName` is not found)`NullPointerException` (if `baseName` or `locale` is null)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Parameters | `baseName`: fully qualified class name`locale`: desired locale
    |'
  prefs: []
  type: TYPE_TB
- en: '| Returns | Resource bundle based on the given `baseName` and `locale` |'
  prefs: []
  type: TYPE_TB
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '| **Component** | **Details** |'
  prefs: []
  type: TYPE_TB
- en: '| Throws | `IllegalArgumentException` (if the passed control performs improperly)`MissingResourceException`
    (if the resource bundle for the provided `baseName` is not found in any of the
    locales)`NullPointerException` (if `baseName`, `control`, or `locale` is null)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Parameters | `baseName`: fully qualified class name`control`: the control
    provides information so the resource bundle can be loaded`targetLocale`: desired
    locale |'
  prefs: []
  type: TYPE_TB
- en: '| Returns | Resource bundle based on the given `baseName` and `locale` |'
  prefs: []
  type: TYPE_TB
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '| **Component** | **Details** |'
  prefs: []
  type: TYPE_TB
- en: '| Throws | `MissingResourceException` (if the resource bundle for the provided
    `baseName` is not found in any of the locales)`NullPointerException` (if `baseName`,
    `loader`, or `locale` is null) |'
  prefs: []
  type: TYPE_TB
- en: '| Parameters | `baseName`: fully qualified class name`locale`: desired locale`loader`:
    class loader |'
  prefs: []
  type: TYPE_TB
- en: '| Returns | Resource bundle based on the given `baseName` and `locale` |'
  prefs: []
  type: TYPE_TB
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '| **Component** | **Details** |'
  prefs: []
  type: TYPE_TB
- en: '| Throws | `IllegalArgumentException` (if the passed control performs improperly)`MissingResourceException`
    (if the resource bundle for the provided `baseName` is not found in any of the
    locales)`NullPointerException` (if `baseName`, `control`, `loader`, or `targetLocale`
    is null) |'
  prefs: []
  type: TYPE_TB
- en: '| Parameters | `baseName`: fully qualified class name`control`: the control
    providing information so the resource bundle can be loaded`loader`: class loader`targetLocale`:
    desired locale |'
  prefs: []
  type: TYPE_TB
- en: '| Returns | Resource bundle based on the given `baseName` and `locale` |'
  prefs: []
  type: TYPE_TB
- en: '`getKeys()`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '| **Component** | **Details** |'
  prefs: []
  type: TYPE_TB
- en: '| Throws | None |'
  prefs: []
  type: TYPE_TB
- en: '| Parameters | None |'
  prefs: []
  type: TYPE_TB
- en: '| Returns | Enumeration of keys in the `ResourceBundle` and parent bundles
    |'
  prefs: []
  type: TYPE_TB
- en: '`getLocale()`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '| **Component** | **Details** |'
  prefs: []
  type: TYPE_TB
- en: '| Throws | None |'
  prefs: []
  type: TYPE_TB
- en: '| Parameters | None |'
  prefs: []
  type: TYPE_TB
- en: '| Returns | the `locale` of the current resource bundle |'
  prefs: []
  type: TYPE_TB
- en: '`getObject()`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '| **Component** | **Details** |'
  prefs: []
  type: TYPE_TB
- en: '| Throws | `MissingResourceException` (if the resource for the provided key
    is not found)`NullPointerException` (if `key` is null) |'
  prefs: []
  type: TYPE_TB
- en: '| Parameters | `key`: this is the key for the desired object |'
  prefs: []
  type: TYPE_TB
- en: '| Returns | The object for the key provided |'
  prefs: []
  type: TYPE_TB
- en: '`getString()`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '| **Component** | **Details** |'
  prefs: []
  type: TYPE_TB
- en: '| Throws | `ClassCastException` (if the found object is not a key)`MissingResourceException`
    (if the resource for the provided key is not found)`NullPointerException` (if
    `key` is null) |'
  prefs: []
  type: TYPE_TB
- en: '| Parameters | `key`: this is the key for the desired `String` |'
  prefs: []
  type: TYPE_TB
- en: '| Returns | The `String` for the key provided |'
  prefs: []
  type: TYPE_TB
- en: '`getStringArray()`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '| **Component** | **Details** |'
  prefs: []
  type: TYPE_TB
- en: '| Throws | `ClassCastException` (if the found object is not a `String` array)`MissingResourceException`
    (if the resource for the provided key is not found)`NullPointerException` (if
    `key` is null) |'
  prefs: []
  type: TYPE_TB
- en: '| Parameters | `key`: this is the key for the desired `String` array |'
  prefs: []
  type: TYPE_TB
- en: '| Returns | The `String` array for the key provided |'
  prefs: []
  type: TYPE_TB
- en: '`handleGetObject()`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '| **Component** | **Details** |'
  prefs: []
  type: TYPE_TB
- en: '| Throws | `NullPointerException` (if `key` is null) |'
  prefs: []
  type: TYPE_TB
- en: '| Parameters | `key`: key for the desired `Object` |'
  prefs: []
  type: TYPE_TB
- en: '| Returns | The object for the given key |'
  prefs: []
  type: TYPE_TB
- en: '`handleKeySet()`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '| **Component** | **Details** |'
  prefs: []
  type: TYPE_TB
- en: '| Throws | None |'
  prefs: []
  type: TYPE_TB
- en: '| Parameters | None |'
  prefs: []
  type: TYPE_TB
- en: '| Returns | Set of keys in `ResourceBundle` |'
  prefs: []
  type: TYPE_TB
- en: '`keySet()`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '| **Component** | **Details** |'
  prefs: []
  type: TYPE_TB
- en: '| Throws | None |'
  prefs: []
  type: TYPE_TB
- en: '| Parameters | None |'
  prefs: []
  type: TYPE_TB
- en: '| Returns | Set of keys in `ResourceBundle` and its parent bundles |'
  prefs: []
  type: TYPE_TB
- en: '`setParent()`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '| **Component** | **Details** |'
  prefs: []
  type: TYPE_TB
- en: '| Throws | None |'
  prefs: []
  type: TYPE_TB
- en: '| Parameters | `parent`: the parent bundle for the current bundle |'
  prefs: []
  type: TYPE_TB
- en: '| Returns | None |'
  prefs: []
  type: TYPE_TB
- en: Changes in Java 9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The properties file format, based on ISO-8859-1, was previously supported by
    the Java platform. That format does not easily support escape characters, although
    it does provide an appropriate escape mechanism. The use of ISO-8859-1 requires
    conversion between the text characters and their escaped form.
  prefs: []
  type: TYPE_NORMAL
- en: The Java 9 platform includes a modified `ResourceBundle` class with the default
    file encoding set to UTF-8 vice ISO-8859-1\. This saves applications the time
    it takes to make the aforementioned escape mechanism conversions.
  prefs: []
  type: TYPE_NORMAL
- en: Unicode 7.0.0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Java Enhancement Proposal 227, titled Unicode 7.0, was created to indicate the
    need to update the appropriate APIs to support Unicode version 7.0\. That version
    of Unicode was released on June 16, 2014\. Previous to Java 9, Unicode version
    6.2 was the latest version supported.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can learn more about **Unicode version 7.0.0** at the official specification
    page at: [http://unicode.org/versions/Unicode7.0.0/](http://unicode.org/versions/Unicode7.0.0/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'At the time this book was published, the most recent Unicode standard was version
    10.0.0, released on June 20, 2017\. Interestingly, the Java 9 platform will support
    Unicode version 7.0.0, but not the more recent version 10.0.0 of the Unicode standard.
    In addition to the two Unicode specifications listed here, from version 7.0.0,
    will not be implemented by the Java 9 platform:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Unicode Technical Standard #10** (**UTS #10**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Unicode collation algorithm: details how to compare Unicode strings'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unicode Technical Standard #46** (**UTS #46**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unicode Internationalizing Domain Names for Applications** (**IDNA**) **Compatibility
    processing**: comprehensive mapping for text case and domain name variants'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The core of the Java 9 platform changes, specific to Unicode 7.0.0 support,
    includes the following Java classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`java.lang package`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Character
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: String
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`java.text.package`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bidi
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: BreakIterator
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Normalizer
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's take a quick look at each of those classes to help solidify our comprehension
    of the broad impact that support for Unicode 7.0.0 has on the Java 9 platform.
  prefs: []
  type: TYPE_NORMAL
- en: The java.lang package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `java.lang.package` provides fundamental classes used in nearly every Java
    application. In this section, we will look at the `Character` and `String` classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Character` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: This is one of the many core classes that has been around since the first version
    of Java. An object of the `Character` class consists of a single field of type
    `char`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `String` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Strings, another core originating class, are immutable character strings.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the `Character` and `String` classes to support a newer version of
    Unicode, version 7.0 for Java 9, is an important step to help keep Java relevant
    as the premier programming language.
  prefs: []
  type: TYPE_NORMAL
- en: The java.text package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Bidi`, `BreakIterator`, and `Normalizer` classes are not as widely used
    as the `Character` and `String` classes. Here is a brief overview of those classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Bidi` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: This class is used to implement Unicode's bidirectional algorithm. This is used
    to support Arabic or Hebrew.
  prefs: []
  type: TYPE_NORMAL
- en: For specific information on the *Unicode Bidirectional Algorithm*, visit [http://unicode.org/reports/tr9/](http://unicode.org/reports/tr9/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The `BreakIterator` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: This class is used for finding text boundaries.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Normalizer` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'This method contains two methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`isNormalized`: used to determine if `char` values of a given sequence are
    normalized'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`normalize`: normalizes a sequence of char values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additional significance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As previously stated, JDK 8 supports Unicode 6.2\. Version 6.3 was released
    on September 30, 2013 with the following listed highlights:'
  prefs: []
  type: TYPE_NORMAL
- en: Bidirectional behavior improvements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved Unihan data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Better support for Hebrew
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Version 7.0.0, released on June 16, 2014, introduced the following changes:'
  prefs: []
  type: TYPE_NORMAL
- en: Added 2,834 characters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Increased support for Azerbaijan, Russian, and high German dialects
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Pictographic symbols
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Historic scripts for several countries and regions
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Updates to the Unicode bidirectional algorithm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nearly 3,000 new Cantonese pronunciation entries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Major enhancements to the Indic script properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The vast changes to Unicode with version 6.3 and 7.0.0 underscores the importance
    of the Java 9 platform supporting 7.0.0 as opposed to 6.2, as with Java 8.
  prefs: []
  type: TYPE_NORMAL
- en: The Linux/AArch64 port
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Java Enhancement Proposal 237** (**JEP 237**) had a single goal of porting
    JDK 9 to Linux/AArch64\. In order to understand what this means to us as Java
    9 developers, let''s talk a bit about hardware.'
  prefs: []
  type: TYPE_NORMAL
- en: ARM is a British company that has been creating computing cores and architectures
    for over three decades. Their original name was **Acorn RISC Machine** (**ARM**),
    with **RISC** standing for **Reduced Instruction Set Computing**. Somewhere along
    the way, they changed their name to **Advanced RISC Machine** (**ARM**), and finally,
    to ARM Holdings or just ARM. They license their architectures to other companies.
    ARM reports that there have been over 100 billion ARM processors manufactured.
  prefs: []
  type: TYPE_NORMAL
- en: 'In late 2011, ARM came out with a new ARM architecture called ARMv8\. This
    architecture included a 64-bit optional architecture called AArch64, which, as
    you would expect, came with a new instruction set. Here is an abbreviated list
    of AArch64 features:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A64 instruction set:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 31 general purpose 64-bit registers
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Dedicated zero or stack pointer registers
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability to take 32-bit or 64-bit arguments
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Advanced SIMD (NEON) - enhanced:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 32x 128-bit registers
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports double-precision floating points
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: AES encrypt/decrypt and SHA-1/SHA-2 hashing
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: New exception system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Oracle did a great job of identifying this architecture as something that needs
    to be supported in the new Java 9 platform. The new AArch64 architecture is said
    to essentially be an entirely new design. JDK 9 has been successfully ported to
    Linux/AArch64 with the following implementations:'
  prefs: []
  type: TYPE_NORMAL
- en: Template interpreter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: C1 JIT compiler
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: C2 JIT compiler
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For information about the C1 and C2 JIT compilers, refer to [Chapter 14](e1747284-a850-4e00-b044-fd06c6eb266d.xhtml),
    *Command Line Flags*.
  prefs: []
  type: TYPE_NORMAL
- en: Multi-resolution Images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The purpose of Java Enhancement Proposal 251 was to create a new API that supports
    multi-resolution images. Specifically, to allow a multi-resolution image to encapsulate
    several resolution variants of the same image. This new API will be located in
    the `java.awt.image` package. The following diagram shows how multi-resolution
    can encapsulate a set of images, with different resolutions, into a single image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d9140aa9-25e1-43de-a17f-e20205c18383.png)'
  prefs: []
  type: TYPE_IMG
- en: This new API will give developers the ability to retrieve all image variants
    or retrieve a resolution-specific image. This is a powerful set of capabilities.
    The `java.awt.Graphics` class will be used to retrieve the desired variant from
    the multi-resolution image.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a quick look at the API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the preceding code example, the API contains the `getResolutionVariant`
    and `getResolutionVariants` that return an `Image` and a list of images respectively.
    Since `MultiResolutionImage` is an interface, we will need an abstract class to
    implement it.
  prefs: []
  type: TYPE_NORMAL
- en: Common Locale Data Repository (CLDR)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Java Enhancement Proposal 252, uses CLDR Locale Data by default, implements
    the decision to use locale data from the Unicode Common Locale Data Repository
    by default. CLDR is a key component of many software applications that supports
    multiple languages. It is touted as the largest locale data repository and is
    used by a plethora of large software providers to include Apple, Google, IBM,
    and Microsoft. The widespread use of CLDR has made it the unofficial industry
    standard repository for locale data. Making this the default repository in the
    Java 9 platform further solidifies it as the software industry standard.
  prefs: []
  type: TYPE_NORMAL
- en: 'Interestingly, CLDR was already part of JDK 8, but was not the default library.
    In Java 8, we had to enable CLDR by setting a system property as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: So, in Java 9, we no longer have to enable CLDR as it will be the default repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are additional locale data repositories in the Java 9 platform. They
    are listed here in their default lookup order:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Common Locale Data Repository** (**CLDR**).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: COMPAT - previously JRE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Service Provider Interface** (**SPI**).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To change the lookup order, we can change the `java.locale.providers` setting
    as illustrated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, `SPI` would be first, followed by `COMPAT`, and then
    `CLDR`.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we focused on best practices with additional utilities provided
    by the Java 9 platform. Specifically, we covered UTF-8 property files, Unicode
    7.0.0, Linux/AArch64 port, multi-resolution images, and Common Locale Data Repository.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, our final chapter, we will look at the future direction
    for the Java platform by looking ahead to what we can expect in Java 10.
  prefs: []
  type: TYPE_NORMAL
