["```java\n                    -- MySQL Script generated by MySQL Workbench \n                    -- Sun Mar  8 18:17:07 2015 \n                    -- Model: New Model    Version: 1.0 \n                    -- MySQL Workbench Forward Engineering \n\n                    SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0; \n                    SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0; \n                    SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES'; \n\n                    -- ----------------------------------------------------- \n                    -- Schema course_management \n                    -- ----------------------------------------------------- \n                    DROP SCHEMA IF EXISTS `course_management` ; \n\n                    -- ----------------------------------------------------- \n                    -- Schema course_management \n                    -- ----------------------------------------------------- \n                    CREATE SCHEMA IF NOT EXISTS `course_management` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ; \n                    USE `course_management` ; \n\n                    -- ----------------------------------------------------- \n                    -- Table `course_management`.`Teacher` \n                    -- ----------------------------------------------------- \n                    DROP TABLE IF EXISTS `course_management`.`Teacher` ; \n\n                    CREATE TABLE IF NOT EXISTS `course_management`.`Teacher` ( \n                      `id` INT NOT NULL AUTO_INCREMENT, \n                      `first_name` VARCHAR(45) NOT NULL, \n                      `last_name` VARCHAR(45) NULL, \n                      `designation` VARCHAR(45) NOT NULL, \n                      PRIMARY KEY (`id`)) \n                    ENGINE = InnoDB; \n\n                    -- ----------------------------------------------------- \n                    -- Table `course_management`.`Course` \n                    -- ----------------------------------------------------- \n                    DROP TABLE IF EXISTS `course_management`.`Course` ; \n\n                    CREATE TABLE IF NOT EXISTS `course_management`.`Course` ( \n                      `id` INT NOT NULL AUTO_INCREMENT, \n                      `name` VARCHAR(45) NOT NULL, \n                      `credits` INT NOT NULL, \n                      `Teacher_id` INT NULL, \n                      PRIMARY KEY (`id`), \n                      INDEX `fk_Course_Teacher_idx` (`Teacher_id` ASC), \n                      CONSTRAINT `fk_Course_Teacher` \n                        FOREIGN KEY (`Teacher_id`) \n                        REFERENCES `course_management`.`Teacher` (`id`) \n                        ON DELETE NO ACTION \n                        ON UPDATE NO ACTION) \n                    ENGINE = InnoDB; \n\n                    -- ----------------------------------------------------- \n                    -- Table `course_management`.`Student` \n                    -- ----------------------------------------------------- \n                    DROP TABLE IF EXISTS `course_management`.`Student` ; \n\n                    CREATE TABLE IF NOT EXISTS `course_management`.`Student` ( \n                      `id` INT NOT NULL AUTO_INCREMENT, \n                      `first_name` VARCHAR(45) NOT NULL, \n                      `last_name` VARCHAR(45) NULL, \n                      `enrolled_since` MEDIUMTEXT NOT NULL, \n                      PRIMARY KEY (`id`)) \n                    ENGINE = InnoDB; \n\n                    -- ----------------------------------------------------- \n                    -- Table `course_management`.`Course_Student` \n                    -- ----------------------------------------------------- \n                    DROP TABLE IF EXISTS `course_management`.`Course_Student` ; \n\n                    CREATE TABLE IF NOT EXISTS `course_management`.`Course_Student` ( \n                      `Course_id` INT NOT NULL, \n                      `Student_id` INT NOT NULL, \n                      PRIMARY KEY (`Course_id`, `Student_id`), \n                      INDEX `fk_Course_has_Student_Student1_idx` (`Student_id` ASC), \n                      INDEX `fk_Course_has_Student_Course1_idx` (`Course_id` ASC), \n                      CONSTRAINT `fk_Course_has_Student_Course1` \n                        FOREIGN KEY (`Course_id`) \n                        REFERENCES `course_management`.`Course` (`id`) \n                        ON DELETE NO ACTION \n                        ON UPDATE NO ACTION, \n                      CONSTRAINT `fk_Course_has_Student_Student1` \n                        FOREIGN KEY (`Student_id`) \n                        REFERENCES `course_management`.`Student` (`id`) \n                        ON DELETE NO ACTION \n                        ON UPDATE NO ACTION) \n                    ENGINE = InnoDB; \n\n                    SET SQL_MODE=@OLD_SQL_MODE; \n                    SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS; \n                    SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS; \n                    ```", "```java\n                        <project  \n\n                          xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 \n                         http://maven.apache.org/xsd/maven-4.0.0.xsd\"> \n                          <modelVersion>4.0.0</modelVersion> \n                          <groupId>packt.book.jee.eclipse</groupId> \n                          <artifactId>CourseManagementJDBC</artifactId> \n                          <version>1</version> \n                          <packaging>war</packaging> \n                          <dependencies> \n                            <dependency> \n                              <groupId>javax.servlet</groupId> \n                              <artifactId>javax.servlet-api</artifactId> \n                              <version>3.1.0</version> \n                        <scope>provided</scope> \n                            </dependency> \n                            <dependency> \n                              <groupId>javax.servlet</groupId> \n                              <artifactId>jstl</artifactId> \n                              <version>1.2</version> \n                            </dependency> \n                            <dependency> \n                              <groupId>mysql</groupId> \n                              <artifactId>mysql-connector-java</artifactId> \n                              <version>8.0.9-rc</version> \n                            </dependency> \n                            <dependency> \n                              <groupId>javax.servlet.jsp</groupId> \n                              <artifactId>jsp-api</artifactId> \n                              <version>2.2</version> \n                              <scope>provided</scope> \n                            </dependency> \n                          </dependencies> \n                        </project> \n                        ```", "```java\n                        package packt.book.jee.eclipse.ch4.bean; \n\n                        public class Course { \n                          private int id; \n                          private String name; \n                          private int credits; \n                          public int getId() { \n                            return id; \n                          } \n                          public void setId(int id) { \n                            this.id = id; \n                          } \n                          public String getName() { \n                            return name; \n                          } \n                          public void setName(String name) { \n                            this.name = name; \n                          } \n                          public int getCredits() { \n                            return credits; \n                          } \n                          public void setCredits(int credits) { \n                            this.credits = credits; \n                          } \n                        } \n                        ```", "```java\n                        package packt.book.jee.eclipse.ch4.bean; \n\n                        public class Person { \n                          private int id; \n                          private String firstName; \n                          private String lastName; \n\n                          public int getId() { \n                            return id; \n                          } \n                          public void setId(int id) { \n                            this.id = id; \n                          } \n                          public String getFirstName() { \n                            return firstName; \n                          } \n                          public void setFirstName(String firstName) { \n                            this.firstName = firstName; \n                          } \n                          public String getLastName() { \n                            return lastName; \n                          } \n                          public void setLastName(String lastName) { \n                            this.lastName = lastName; \n                          } \n                        } \n                        ```", "```java\n                        package packt.book.jee.eclipse.ch4.bean; \n\n                        public class Student extends Person { \n                          private long enrolledsince; \n\n                          public long getEnrolledsince() { \n                            return enrolledsince; \n                          } \n\n                          public void setEnrolledsince(long enrolledsince) { \n                            this.enrolledsince = enrolledsince; \n                          } \n                        } \n                        ```", "```java\n                        package packt.book.jee.eclipse.ch4.bean; \n\n                        public class Teacher extends Person { \n                          private String designation; \n\n                          public String getDesignation() { \n                            return designation; \n                          } \n\n                          public void setDesignation(String designation) { \n                            this.designation = designation; \n                          } \n                        } \n                        ```", "```java\n                        <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" \n                            pageEncoding=\"UTF-8\"%> \n                        <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %> \n\n                        <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"> \n                        <html> \n                        <head> \n                        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"> \n                        <title>Add Course</title> \n                        </head> \n                        <body> \n                          <c:set var=\"errMsg\" value=\"${null}\"/> \n                          <c:set var=\"displayForm\" value=\"${true}\"/> \n                            <c:if test=\"${\\\"POST\\\".equalsIgnoreCase(pageContext.request.method) \n                                && pageContext.request.getParameter(\\\"submit\\\") != null}\"> \n                            <jsp:useBean id=\"courseBean\" class=\"packt.book.jee.eclipse.ch4.bean.Course\"> \n                              <c:catch var=\"beanStorageException\"> \n                                <jsp:setProperty name=\"courseBean\" property=\"*\" /> \n                              </c:catch> \n                            </jsp:useBean> \n                            <c:choose> \n                              <c:when test=\"${!courseBean.isValidCourse() || beanStorageException != null}\"> \n                                <c:set var=\"errMsg\" value=\"Invalid course details. Please \n                                 try again\"/> \n                              </c:when> \n                              <c:otherwise> \n                                <c:redirect url=\"listCourse.jsp\"/> \n                              </c:otherwise> \n                            </c:choose> \n                          </c:if> \n\n                          <h2>Add Course:</h2> \n                          <c:if test=\"${errMsg != null}\"> \n                            <span style=\"color: red;\"> \n                              <c:out value=\"${errMsg}\"></c:out> \n                            </span> \n                          </c:if> \n                          <form method=\"post\"> \n                            Name: <input type=\"text\" name=\"name\"> <br> \n                            Credits : <input type=\"text\" name=\"credits\"> <br> \n                            <button type=\"submit\" name=\"submit\">Add</button> \n                          </form> \n\n                        </body> \n                        </html> \n                        ```", "```java\n                          public boolean isValidCourse() { \n                            return name != null && credits != 0; \n                          } \n                        ```", "```java\n                        <h2>Courses:</h2> \n                        ```", "```java\n                        try { \n                          Class.forName(\"com.mysql.cj.jdbc.Driver\"); \n                        } \n                        catch (ClassNotFoundException e) { \n                          //log excetion \n                          //either throw application specific exception or return \n                          return; \n                        } \n\n                        ```", "```java\n                        try { \n                          Connection con = \n                         DriverManager.getConnection(\"jdbc:mysql://localhost:3306/schema_name?\" + \n                              \"user=your_user_name&password=your_password\"); \n                        //perform DB operations and then close the connection \n                          con.close(); \n                        } \n                        catch (SQLException e) { \n                          //handle exception \n                        } \n                        https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-reference-configuration-properties.html.\n                        ```", "```java\n                        Statement stmt = null; \n                        ResultSet rs = null; \n                        try { \n                          stmt = con.createStatement(); \n                          rs = stmt.executeQuery(\"select * from Course\"); \n\n                          List<Course> courses = new ArrayList<Course>(); \n                          //Depending on the database that you connect to, you may have to  \n                          //call rs.first() before calling rs.next(). In the case of a MySQL \n                          //database, it is not necessary to call rs.first() \n                          while (rs.next()) { \n                            Course course = new Course(); \n                            course.setId(rs.getInt(\"id\")); \n                            course.setName(rs.getString(\"name\")); \n                            course.setCredits(rs.getInt(\"credits\")); \n                            courses.add(course); \n                          } \n                        } \n                        catch (SQLException e) { \n                          //handle exception \n                          e.printStackTrace(); \n                        } \n                        finally { \n                          try { \n                            if (rs != null) \n                            rs.close(); \n                            if (stmt != null) \n                            stmt.close(); \n                          } \n                          catch (SQLException e) { \n                            //handle exception \n                          } \n                        } \n                        ```", "```java\n                        rs = stmt.executeQuery(\"select id, name, credits as courseCredit from Course\"); \n                        ```", "```java\n                        course.setId(rs.getInt(1)); \n                        course.setName(rs.getString(2)); \n                        course.setCredits(rs.getInt(\"courseCredit\")); \n                        ```", "```java\n                        PreparedStatement stmt = null; \n                        int courseId = 10; \n                        ResultSet rs = null; \n                        try { \n                          stmt = con.prepareStatement(\"select * from Course where id = \n                           ?\"); \n                          stmt.setInt(1, courseId); \n                          rs = stmt.executeQuery(); \n\n                          Course course = null; \n                          if (rs.next()) { \n                            course = new Course(); \n                            course.setId(rs.getInt(\"id\")); \n                            course.setName(rs.getString(\"name\")); \n                            course.setCredits(rs.getInt(\"credits\")); \n                          } \n                        } \n                        catch (SQLException e) { \n                          //handle exception \n                          e.printStackTrace(); \n                        } \n                        finally { \n                          try { \n                            if (rs != null) \n                            rs.close(); \n                            if (stmt != null \n                            stmt.close(); \n                          } \n                        catch (SQLException e) { \n                            //handle exception \n                          } \n                        } \n                        ```", "```java\n                        PreparedStatement stmt = con.prepareStatement(\"insert into Course (id, name, credits) values (?,?,?)\"); \n\n                        con.setAutoCommit(false); \n                        try { \n                          for (Course course : courses) { \n                            stmt.setInt(1, course.getId()); \n                            stmt.setString(2, course.getName()); \n                            stmt.setInt(3, course.getCredits()); \n                            stmt.execute(); \n                          } \n                          //commit the transaction now \n                          con.commit(); \n                        } \n                        catch (SQLException e) { \n                          //rollback commit \n                          con.rollback(); \n                        } \n                        ```", "```java\n                          <dependency> \n                            <groupId>org.apache.tomcat</groupId> \n                            <artifactId>tomcat-jdbc</artifactId> \n                            <version>9.0.6</version> \n                          </dependency> \n                        ```", "```java\n                        db_host=localhost \n                        db_port=3306 \n                        db_name=course_management \n                        db_user_name=your_user_name \n                        db_password=your_password \n                        db_driver_class_name=com.mysql.cj.jdbc.Driver \n                        ```", "```java\n                        package packt.book.jee.eclipse.ch4.db.connection; \n\n                        // skipping imports to save space here\n\n                        /** \n                         * Singleton Factory class to create JDBC database connections \n                         * \n                         */ \n                        public class DatabaseConnectionFactory { \n                          //singleton instance \n                          private static DatabaseConnectionFactory conFactory = new \n                           DatabaseConnectionFactory(); \n\n                          private DataSource dataSource = null; \n\n                          //Make the construction private \n                          private DatabaseConnectionFactory() {} \n\n                          /** \n                           * Must be called before any other method in this class. \n                           * Initializes the data source and saves it in an instance \n                           variable \n                           * \n                           * @throws IOException \n                           */ \n                          public synchronized void init() throws IOException { \n                            //Check if init was already called \n                          if (dataSource != null) \n                            return; \n\n                            //load db.properties file first \n                            InputStream inStream = \n                         this.getClass().getClassLoader().getResourceAsStream(\"db.properties\"); \n                            Properties dbProperties = new Properties(); \n                            dbProperties.load(inStream); \n                            inStream.close(); \n\n                            //create Tomcat specific pool properties \n                            PoolProperties p = new PoolProperties(); \n                        p.setUrl(\"jdbc:mysql://\" + dbProperties.getProperty(\"db_host\") + \n                        \":\" + dbProperties.getProperty(\"db_port\") + \"/\" + \n                        dbProperties.getProperty(\"db_name\")); \n\n                        p.setDriverClassName(dbProperties.getProperty(\"db_driver_class_name\")); \n                            p.setUsername(dbProperties.getProperty(\"db_user_name\")); \n                            p.setPassword(dbProperties.getProperty(\"db_password\")); \n                            p.setMaxActive(10); \n\n                            dataSource = new DataSource(); \n                            dataSource.setPoolProperties(p); \n                          } \n\n                          //Provides access to singleton instance \n                          public static DatabaseConnectionFactory getConnectionFactory() { \n                            return conFactory; \n                          } \n\n                          //returns database connection object  \n                          public Connection getConnection () throws SQLException { \n                            if (dataSource == null) \n                              throw new SQLException(\"Error initializing datasource\"); \n                            return dataSource.getConnection(); \n                          } \n                        } \n                        ```", "```java\n                        package packt.book.jee.eclipse.ch4.servlet; \n                        import java.io.IOException; \n                        import javax.servlet.ServletConfig; \n                        import javax.servlet.ServletException; \n                        import javax.servlet.annotation.WebServlet; \n                        import javax.servlet.http.HttpServlet; \n\n                        import packt.book.jee.eclipse.ch4.db.connection.DatabaseConnectionFactory; \n\n                        @WebServlet(value=\"/initServlet\", loadOnStartup=1) \n                        public class InitServlet extends HttpServlet { \n                          private static final long serialVersionUID = 1L; \n\n                          public InitServlet() { \n                            super(); \n                          } \n\n                          public void init(ServletConfig config) throws ServletException { \n                            try { \n                              DatabaseConnectionFactory.getConnectionFactory().init(); \n                            } \n                            catch (IOException e) { \n                              config.getServletContext().log(e.getLocalizedMessage(),e); \n                            } \n                          } \n                        } \n                        ```", "```java\n                        Connection con = DatabaseConnectionFactory.getConnectionFactory().getConnection(); \n                        ```", "```java\n                        package packt.book.jee.eclipse.ch4.dao; \n\n                        import java.sql.Connection; \n                        import java.sql.PreparedStatement; \n                        import java.sql.ResultSet; \n                        import java.sql.SQLException; \n                        import java.sql.Statement; \n\n                        import packt.book.jee.eclipse.ch4.bean.Course; \n                        import packt.book.jee.eclipse.ch4.db.connection.DatabaseConnectionFactory; \n\n                        public class CourseDAO { \n\n                          public static void addCourse (Course course) throws SQLException \n                           { \n                            //get connection from connection pool \n                            Connection con = \n                         DatabaseConnectionFactory.getConnectionFactory().getConnection(); \n                            try { \n                              final String sql = \"insert into Course (name, credits) \n                               values (?,?)\";      //create the prepared statement with an option to get auto- \n                               generated keys      PreparedStatement stmt = con.prepareStatement(sql, \n                               Statement.RETURN_GENERATED_KEYS); \n                              //set parameters \n                              stmt.setString(1, course.getName()); \n                              stmt.setInt(2, course.getCredits()); \n\n                              stmt.execute(); \n\n                              //Get auto-generated keys \n                              ResultSet rs = stmt.getGeneratedKeys(); \n\n                              if (rs.next()) \n                                course.setId(rs.getInt(1)); \n\n                              rs.close(); \n                              stmt.close(); \n                            } \n                            finally { \n                              con.close(); \n                            } \n                          } \n                        } \n                        ```", "```java\n                        String sql = \"insert into Course (name, credits) values (?,?)\"; \n                        ```", "```java\n                        ResultSet rs = stmt.getGeneratedKeys(); \n                        ```", "```java\n                        public class Course { \n                        .... \n\n                          private CourseDAO courseDAO = new CourseDAO(); \n\n                        ... \n\n                          public void addCourse() throws SQLException { \n                            courseDAO.addCourse(this); \n                          } \n                        } \n                        ```", "```java\n                        <c:catch var=\"addCourseException\"> \n                          ${courseBean.addCourse()} \n                        </c:catch> \n                        <c:choose> \n                          <c:when test=\"${addCourseException != null}\"> \n                            <c:set var=\"errMsg\" value=\"${addCourseException.message}\"/> \n                          </c:when> \n                          <c:otherwise> \n                            <c:redirect url=\"listCourse.jsp\"/> \n                          </c:otherwise> \n                        </c:choose> \n                        ```", "```java\n                        ${courseBean.addCourse()} \n                        ```", "```java\n                        <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" \n                            pageEncoding=\"UTF-8\"%> \n                        <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %> \n\n                        <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \n                         \"http://www.w3.org/TR/html4/loose.dtd\"> \n                        <html> \n                        <head> \n                        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"> \n                        <title>Insert title here</title> \n                        </head> \n                        <body> \n                          <c:set var=\"errMsg\" value=\"${null}\"/> \n                          <c:set var=\"displayForm\" value=\"${true}\"/> \n                          <c:if \n                         test=\"${\"POST\".equalsIgnoreCase(pageContext.request.method) \n                        && pageContext.request.getParameter(\"submit\") != null}\"> \n                          <jsp:useBean id=\"courseBean\" \n                           class=\"packt.book.jee.eclipse.ch4.bean.Course\"> \n                            <c:catch var=\"beanStorageException\"> \n                            <jsp:setProperty name=\"courseBean\" property=\"*\" /> \n                            </c:catch> \n                            </jsp:useBean> \n                            <c:choose> \n                              <c:when test=\"${!courseBean.isValidCourse() || \n                               beanStorageException != null}\">      <c:set var=\"errMsg\" value=\"Invalid course details. Please \n                               try again\"/> \n                              </c:when> \n                              <c:otherwise> \n                                <c:catch var=\"addCourseException\"> \n                                ${courseBean.addCourse()} \n                                </c:catch> \n                                <c:choose> \n                                  <c:when test=\"${addCourseException != null}\"> \n                                  <c:set var=\"errMsg\" \n                                   value=\"${addCourseException.message}\"/> \n                                  </c:when> \n                                  <c:otherwise> \n                                    <c:redirect url=\"listCourse.jsp\"/> \n                                  </c:otherwise> \n                                </c:choose> \n                              </c:otherwise> \n                            </c:choose> \n                          </c:if> \n\n                          <h2>Add Course:</h2> \n                          <c:if test=\"${errMsg != null}\"> \n                            <span style=\"color: red;\"> \n                              <c:out value=\"${errMsg}\"></c:out> \n                            </span> \n                          </c:if> \n                          <form method=\"post\"> \n                            Name: <input type=\"text\" name=\"name\"> <br> \n                            Credits : <input type=\"text\" name=\"credits\"> <br> \n                            <button type=\"submit\" name=\"submit\">Add</button> \n                          </form> \n\n                        </body> \n                        </html> \n                        ```", "```java\n                        select course.id as courseId, course.name as courseName, \n                          course.credits as credits, Teacher.id as teacherId, \n                          Teacher.first_name as firstName,Teacher.last_name as lastName, \n                          Teacher.designation designation \n                        from Course left outer join Teacher on \n                        course.Teacher_id = Teacher.id \n                        order by course.name \n                        ```", "```java\n                        public List<Course> getCourses () throws SQLException { \n                          //get connection from connection pool \n                          Connection con = \n                         DatabaseConnectionFactory.getConnectionFactory().getConnection(); \n\n                          List<Course> courses = new ArrayList<Course>(); \n                          Statement stmt = null; \n                          ResultSet rs = null; \n                          try { \n                            stmt = con.createStatement(); \n\n                            //create SQL statement using left outer join \n                            StringBuilder sb = new StringBuilder(\"select course.id as \n                             courseId, course.name as courseName,\")      .append(\"course.credits as credits, Teacher.id as teacherId, \n                               Teacher.first_name as firstName, \")      .append(\"Teacher.last_name as lastName, Teacher.designation \n                               designation \") \n                              .append(\"from Course left outer join Teacher on \") \n                              .append(\"course.Teacher_id = Teacher.id \") \n                              .append(\"order by course.name\"); \n\n                        //execute the query \n                            rs = stmt.executeQuery(sb.toString()); \n\n                        //iterate over result set and create Course objects \n                        //add them to course list \n                            while (rs.next()) { \n                              Course course = new Course(); \n                              course.setId(rs.getInt(\"courseId\")); \n                              course.setName(rs.getString(\"courseName\")); \n                              course.setCredits(rs.getInt(\"credits\")); \n                              courses.add(course); \n\n                              int teacherId = rs.getInt(\"teacherId\"); \n                        //check whether teacher id was null in the table \n                              if (rs.wasNull()) //no teacher set for this course. \n                                continue; \n                              Teacher teacher = new Teacher(); \n                              teacher.setId(teacherId); \n                              teacher.setFirstName(rs.getString(\"firstName\")); \n                              teacher.setLastName(rs.getString(\"lastName\")); \n                              teacher.setDesignation(rs.getString(\"designation\")); \n                              course.setTeacher(teacher); \n                            } \n\n                            return courses; \n                          } \n                        finally { \n                          try {if (rs != null) rs.close();} catch (SQLException e) {} \n                          try {if (stmt != null) stmt.close();} catch (SQLException e) {} \n                          try {con.close();} catch (SQLException e) {} \n                          } \n                        } \n                        ```", "```java\n                        public List<Course> getCourses() throws SQLException { \n                          return courseDAO.getCourses(); \n                        } \n                        ```", "```java\n                        <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" \n                            pageEncoding=\"UTF-8\"%> \n                        <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %> \n\n                        <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"> \n                        <html> \n                        <head> \n                        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"> \n                        <title>Courses</title> \n                        </head> \n                        <body> \n                          <c:catch var=\"err\"> \n                            <jsp:useBean id=\"courseBean\" \n                             class=\"packt.book.jee.eclipse.ch4.bean.Course\"/> \n                            <c:set var=\"courses\" value=\"${courseBean.getCourses()}\"/> \n                          </c:catch> \n                          <c:choose> \n                            <c:when test=\"${err != null}\"> \n                              <c:set var=\"errMsg\" value=\"${err.message}\"/> \n                            </c:when> \n                            <c:otherwise> \n                            </c:otherwise> \n                          </c:choose> \n                          <h2>Courses:</h2> \n                          <c:if test=\"${errMsg != null}\"> \n                            <span style=\"color: red;\"> \n                              <c:out value=\"${errMsg}\"></c:out> \n                            </span> \n                          </c:if> \n                          <table> \n                            <tr> \n                              <th>Id</th> \n                              <th>Name</th> \n                              <th>Credits</th> \n                              <th>Teacher</th> \n                            </tr> \n                            <c:forEach items=\"${courses}\" var=\"course\"> \n                              <tr> \n                                <td>${course.id}</td> \n                                <td>${course.name}</td> \n                                <td>${course.credits}</td> \n                                <c:choose> \n                                  <c:when test=\"${course.teacher != null}\"> \n                                    <td>${course.teacher.firstName}</td> \n                                  </c:when> \n                                  <c:otherwise> \n                                    <td></td> \n                                  </c:otherwise> \n                                </c:choose> \n                              </tr> \n                            </c:forEach> \n                          </table> \n                        </body> \n                        </html> \n                        ```", "```java\n                        <c:catch var=\"err\"> \n                            <jsp:useBean id=\"courseBean\" \n                             class=\"packt.book.jee.eclipse.ch4.bean.Course\"/> \n                            <c:set var=\"courses\" value=\"${courseBean.getCourses()}\"/> \n                        </c:catch> \n                        ```", "```java\n                        String sql = \"insert into Course (name, credits, Teacher_id) values (?,?,?)\"; \n                        ```", "```java\n                        if (course.getTeacherId() == 0) \n                          stmt.setNull(3, Types.INTEGER); \n                        else \n                          stmt.setInt(3,course.getTeacherId()); \n                        ```", "```java\n                        public class Course { \n\n                          private int teacherId; \n                          public int getTeacherId() { \n                            return teacherId; \n                        } \n                          public void setTeacherId(int teacherId) { \n                            this.teacherId = teacherId; \n                          } \n                        } \n                        ```", "```java\n                        <jsp:useBean id=\"teacherBean\" class=\"packt.book.jee.eclipse.ch4.bean.Teacher\"/> \n                        <c:catch var=\"teacherBeanErr\"> \n                        <c:set var=\"teachers\" value=\"${teacherBean.getTeachers()}\"/> \n                        </c:catch> \n                        <c:if test=\"${teacherBeanErr != null}\"> \n                          <c:set var=\"errMsg\" value=\"${err.message}\"/> \n                        </c:if> \n                        ```", "```java\n                        Teacher : \n                        <select name=\"teacherId\"> \n                        <c:forEach items=\"${teachers}\" var=\"teacher\"> \n                        <option value=\"${teacher.id}\">${teacher.firstName} \n                        </option> \n                        </c:forEach> \n                        </select> \n                        ```", "```java\n                          <dependencies> \n                            <dependency> \n                              <groupId>javax.servlet</groupId> \n                              <artifactId>javax.servlet-api</artifactId> \n                              <version>3.1.0</version> \n                              <scope>provided</scope> \n                            </dependency> \n                            <dependency> \n                              <groupId>com.sun.faces</groupId> \n                              <artifactId>jsf-api</artifactId> \n                              <version>2.2.16</version> \n                            </dependency> \n                            <dependency> \n                              <groupId>com.sun.faces</groupId> \n                              <artifactId>jsf-impl</artifactId> \n                              <version>2.2.16</version> \n                            </dependency> \n                          </dependencies> \n                        ```", "```java\n                          <servlet> \n                            <servlet-name>JSFServlet</servlet-name> \n                            <servlet-class>javax.faces.webapp.FacesServlet</servlet-class> \n                            <load-on-startup>1</load-on-startup> \n                          </servlet> \n                          <servlet-mapping> \n                            <servlet-name>JSFServlet</servlet-name> \n                            <url-pattern>*.xhtml</url-pattern> \n                          </servlet-mapping> \n                        ```", "```java\n                        package packt.book.jee.eclipse.ch4.jpa.bean; \n\n                        import java.io.Serializable; \n                        import javax.faces.bean.ManagedBean; \n                        import javax.faces.bean.RequestScoped; \n\n                        @ManagedBean (name=\"course\") \n                        @RequestScoped \n                        public class Course implements Serializable { \n                          private static final long serialVersionUID = 1L; \n\n                          private int id; \n                          private String name; \n                          private int credits; \n                          private Teacher teacher; \n\n                          public int getId() { \n                            return id; \n                          } \n                          public void setId(int id) { \n                            this.id = id; \n                          } \n                          public String getName() { \n                            return name; \n                          } \n                          public void setName(String name) { \n                            this.name = name; \n                          } \n                          public int getCredits() { \n                            return credits; \n                          } \n                          public void setCredits(int credits) { \n                            this.credits = credits; \n                          } \n                          public boolean isValidCourse() { \n                            return name != null && credits != 0; \n                          } \n                          public Teacher getTeacher() { \n                            return teacher; \n                          } \n                          public void setTeacher(Teacher teacher) { \n                            this.teacher = teacher; \n                          } \n                        } \n                        ```", "```java\n                        package packt.book.jee.eclipse.ch4.jpa.bean; \n\n                        import java.io.Serializable; \n\n                        public class Person implements Serializable{ \n                          private static final long serialVersionUID = 1L; \n\n                          private int id; \n                          private String firstName; \n                          private String lastName; \n\n                          public int getId() { \n                            return id; \n                          } \n                          public void setId(int id) { \n                            this.id = id; \n                          } \n                          public String getFirstName() { \n                            return firstName; \n                          } \n                          public void setFirstName(String firstName) { \n                            this.firstName = firstName; \n                          } \n                          public String getLastName() { \n                            return lastName; \n                          } \n                          public void setLastName(String lastName) { \n                            this.lastName = lastName; \n                          } \n                        } \n                        ```", "```java\n                        package packt.book.jee.eclipse.ch4.jpa.bean; \n\n                        import javax.faces.bean.ManagedBean; \n                        import javax.faces.bean.RequestScoped; \n                        import java.util.Date; \n\n                        @ManagedBean (name=\"student\") \n                        @RequestScoped \n                        public class Student extends Person { \n                          private static final long serialVersionUID = 1L; \n\n                          private Date enrolledsince; \n\n                          public Date getEnrolledsince() { \n                            return enrolledsince; \n                          } \n\n                          public void setEnrolledsince(Date enrolledsince) { \n                            this.enrolledsince = enrolledsince; \n                          } \n                        } \n                        ```", "```java\n                        package packt.book.jee.eclipse.ch4.jpa.bean; \n\n                        import javax.faces.bean.ManagedBean; \n                        import javax.faces.bean.RequestScoped; \n\n                        @ManagedBean (name=\"teacher\") \n                        @RequestScoped \n                        public class Teacher extends Person { \n                          private static final long serialVersionUID = 1L; \n\n                          private String designation; \n\n                          public String getDesignation() { \n                            return designation; \n                          } \n\n                          public void setDesignation(String designation) { \n                            this.designation = designation; \n                          } \n                          public boolean isValidTeacher() { \n                            return getFirstName() != null; \n                          } \n                        } \n                        ```", "```java\n                        <html  \n\n                            > \n\n                          <h2>Add Course:</h2> \n                          <h:form> \n                            <h:outputLabel value=\"Name:\" for=\"name\"/> \n                              <h:inputText value=\"#{course.name}\" id=\"name\"/> <br/> \n                            <h:outputLabel value=\"Credits:\" for=\"credits\"/> \n                              <h:inputText value=\"#{course.credits}\" id=\"credits\"/> \n                            <br/> \n                            <h:commandButton value=\"Add\" action=\" \n                             #{courseServiceBean.addCourse} \"/> \n                          </h:form> \n\n                        </html> \n                        ```", "```java\n                        package packt.book.jee.eclipse.ch4.jpa.service_bean; \n\n                        import javax.faces.bean.ManagedBean; \n                        import javax.faces.bean.ManagedProperty; \n                        import javax.faces.bean.RequestScoped; \n\n                        import packt.book.jee.eclipse.ch4.jpa.bean.Course; \n\n                        @ManagedBean(name=\"courseServiceBean\") \n                        @RequestScoped \n                        public class CourseServiceBean { \n                          @ManagedProperty(value=\"#{course}\") \n                          private Course course; \n\n                          private String errMsg= null; \n\n                          public Course getCourse() { \n                            return course; \n                          } \n\n                          public void setCourse(Course course) { \n                            this.course = course; \n                          } \n\n                          public String getErrMsg() { \n                            return errMsg; \n                          } \n\n                          public void setErrMsg(String errMsg) { \n                            this.errMsg = errMsg; \n                          } \n\n                          public String addCourse() { \n                            return \"listCourse\"; \n                          } \n                        } \n                        ```", "```java\n                        EntityManagerFactory factory = \n                         Persistance.Persistence.createEntityManagerFactory(\"course_management\") \n                        EntityManager entityManager = factory.createEntityManager(); \n                        EntityTransaction txn = entityManager.getTransaction(); \n                        txn.begin(); \n                        entityManager. persist(course); \n                        txn.commit(); \n                        ```", "```java\n                              <dependency> \n                                <groupId>org.eclipse.persistence</groupId> \n                                <artifactId>eclipselink</artifactId> \n                                <version>2.5.2</version> \n                              </dependency> \n                              <dependency> \n                                <groupId>mysql</groupId> \n                                <artifactId>mysql-connector-java</artifactId> \n                                <version>5.1.34</version> \n                              </dependency> \n                              <dependency> \n                                <groupId>javax.validation</groupId> \n                                <artifactId>validation-api</artifactId> \n                                <version>1.1.0.Final</version> \n                              </dependency> \n                              <dependency> \n                                <groupId>javax.annotation</groupId> \n                                <artifactId>jsr250-api</artifactId> \n                                <version>1.0</version> \n                              </dependency> \n                        ```", "```java\n                        <?xml version=\"1.0\" encoding=\"UTF-8\"?> \n                        <persistence version=\"2.1\"   xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd\"> \n                          <persistence-unit name=\"CourseManagementJPA\" transaction-type=\"RESOURCE_LOCAL\"> \n                            <properties> \n                              <property name=\"javax.persistence.jdbc.driver\" \n                               value=\"com.mysql.jdbc.Driver\"/>      <property name=\"javax.persistence.jdbc.url\" \n                               value=\"jdbc:mysql://localhost/course_management_jpa\"/> \n                              <property name=\"javax.persistence.jdbc.user\" value=\"root\"/> \n                              <property name=\"javax.persistence.schema- \n                               generation.database.action\" value=\"create\"/>      <property name=\"javax.persistence.schema- \n                               generation.scripts.action\" value=\"create\"/> \n                        <property name=\"eclipselink.ddl-generation\" value=\"create- tables\"/> \n                              <property name=\"eclipselink.ddl-generation.output-mode\" value=\"both\"/> \n                            </properties> \n                          </persistence-unit> \n                        </persistence> \n                        ```", "```java\n                        @ManagedBean (name=\"course\") \n                        @RequestScoped \n                        @Entity \n                        public class Course implements Serializable \n                        ```", "```java\n                        @Entity(name=\"SchoolCourse\") \n                        ```", "```java\n                        @Id \n                        @GeneratedValue(strategy=GenerationType.IDENTITY) \n                        @Column(name=\"id\") \n                        private int id; \n                        ```", "```java\n                        @NotNull \n                        @Column(name=\"name\") \n                        private String name; \n                        ```", "```java\n                        @Min(1) \n                        @Column(name=\"credits\") \n                        private int credits;\n                        ```", "```java\n                        @Entity \n                        @Inheritance(strategy=TABLE_PER_CLASS) \n                        public abstract class Person implements Serializable { ... \n                        ```", "```java\n                          @Id \n                          @GeneratedValue(strategy=GenerationType.IDENTITY) \n                          @Column(name=\"id\") \n                          private int id; \n\n                          @Column(name = \"first_name\") \n                          @NotNull \n                          private String firstName; \n\n                          @Column(name = \"last_name\") \n                          private String lastName; \n                        ```", "```java\n                        @Entity \n                        @ManagedBean (name=\"student\") \n                        @RequestScoped \n                        public class Student extends Person implements Serializable\n                        ```", "```java\n                        @Temporal(DATE) \n                        @Column(name=\"enrolled_since\") \n                        private Date enrolledSince; \n                        ```", "```java\n                        @Entity \n                        @ManagedBean (name=\"teacher\") \n                        @RequestScoped \n                        public class Teacher extends Person implements Serializable \n                        ```", "```java\n                        @NotNull \n                        @Column(name=\"designation\") \n                        private String designation; \n                        ```", "```java\n                          @ManyToOne(cascade = { MERGE, REFRESH }) \n                          private Teacher teacher; \n                        ```", "```java\n                          @JoinColumn(name = \"teacher_id\", referencedColumnName = \"id\") \n                          @ManyToOne(cascade = { MERGE, REFRESH }) \n                          private Teacher teacher; \n                        ```", "```java\n                        private List<Student> students; \n                        public List<Student> getStudents() { \n                          return students; \n                        } \n                        public void setStudents(List<Student> students) { \n                          this.students = students; \n                        } \n                        ```", "```java\n                        @ManyToMany(cascade = { MERGE, REFRESH }, mappedBy = \"courses\") \n                        private List<Student> students; \n                        ```", "```java\n                        @ManyToMany(cascade = { MERGE, REFRESH }) \n                        @JoinTable(name = \"Course_Student\", joinColumns = @JoinColumn(name = \"student_id\", referencedColumnName = \"id\"), inverseJoinColumns = \n                         @JoinColumn(name = \"course_id\", referencedColumnName = \"id\")) \n\n                        List<Course> courses; \n                        ```", "```java\n                        package packt.book.jee.eclipse.ch4.jpa.service_bean; \n\n                        import javax.faces.bean.ApplicationScoped; \n                        import javax.faces.bean.ManagedBean; \n                        import javax.persistence.EntityManagerFactory; \n                        import javax.persistence.Persistence; \n\n                        //Load this bean eagerly, i.e., before any request is made \n                        @ManagedBean(name=\"emFactoryBean\", eager=true) \n                        @ApplicationScoped \n                        public class EntityManagerFactoryBean { \n\n                          private EntityManagerFactory entityManagerFactory; \n\n                          public EntityManagerFactoryBean() { \n                            entityManagerFactory = \n                         Persistence.createEntityManagerFactory(\"CourseManagementJPA\"); \n                          } \n\n                          public EntityManagerFactory getEntityManagerFactory() { \n                            return entityManagerFactory; \n                          } \n\n                        } \n                        ```", "```java\n                        entityManagerFactory = \n                         Persistence.createEntityManagerFactory(\"CourseManagementJPA\");\n                        ```", "```java\n                        private EntityManagerFactory factory; \n                        ```", "```java\n                        public CourseService(EntityManagerFactoryBean factoryBean) { \n                          this.factory = factoryBean.getEntityManagerFactory(); \n                        } \n                        ```", "```java\n                        public List<Course> getCourses() { \n                          EntityManager em = factory.createEntityManager(); \n                          CriteriaBuilder cb = em.getCriteriaBuilder(); \n                          CriteriaQuery<Course> cq = cb.createQuery(Course.class); \n                          TypedQuery<Course> tq = em.createQuery(cq); \n                          List<Course> courses = tq.getResultList(); \n                          em.close(); \n                          return courses; \n                        } \n                        ```", "```java\n                        public List<Course> getCourses() { \n                          EntityManager em = factory.createEntityManager(); \n                          List<Course> courses = em.createQuery(\"select crs from Course crs\").getResultList(); \n                          em.close(); \n                          return courses; \n                        } \n                        ```", "```java\n                        public void addCourse (Course course) { \n                          EntityManager em = factory.createEntityManager(); \n                          EntityTransaction txn = em.getTransaction(); \n                          txn.begin(); \n                          em.persist(course); \n                          txn.commit(); \n                        } \n                        ```", "```java\n                        package packt.book.jee.eclipse.ch4.jpa.service; \n\n                        // imports skipped\n\n                        import packt.book.jee.eclipse.ch4.jpa.bean.Course; \n                        import packt.book.jee.eclipse.ch4.jpa.service_bean.EntityManagerFactoryBean; \n\n                        public class CourseService { \n                          private EntityManagerFactory factory; \n\n                          public CourseService(EntityManagerFactoryBean factoryBean) { \n                            factory = factoryBean.getEntityManagerFactory(); \n                          } \n\n                          public List<Course> getCourses() { \n                            EntityManager em = factory.createEntityManager(); \n                            CriteriaBuilder cb = em.getCriteriaBuilder(); \n                            CriteriaQuery<Course> cq = cb.createQuery(Course.class); \n                            TypedQuery<Course> tq = em.createQuery(cq); \n                            List<Course> courses = tq.getResultList(); \n                            em.close(); \n                            return courses; \n                          } \n\n                        public void addCourse (Course course) { \n                            EntityManager em = factory.createEntityManager(); \n                            EntityTransaction txn = em.getTransaction(); \n                            txn.begin(); \n                            em.persist(course); \n                            txn.commit(); \n                        } \n\n                          public void updateCourse (Course course) { \n                            EntityManager em = factory.createEntityManager(); \n                            EntityTransaction txn = em.getTransaction(); \n                            txn.begin(); \n                            em.merge(course); \n                            txn.commit(); \n                          } \n\n                          public Course getCourse (int id) { \n                            EntityManager em = factory.createEntityManager(); \n                            return em.find(Course.class, id); \n                          } \n\n                          public void deleteCourse (Course course) { \n                            EntityManager em = factory.createEntityManager(); \n                            EntityTransaction txn = em.getTransaction(); \n                            txn.begin(); \n                            Course mergedCourse = em.find(Course.class, course.getId()); \n                            em.remove(mergedCourse); \n                            txn.commit(); \n                          } \n                        } \n                        ```", "```java\n                        public class StudentService { \n                          private EntityManagerFactory factory; \n\n                          public StudentService (EntityManagerFactoryBean factoryBean) { \n                            factory = factoryBean.getEntityManagerFactory(); \n                          } \n\n                          public void addStudent (Student student) { \n                            EntityManager em = factory.createEntityManager(); \n                            EntityTransaction txn = em.getTransaction(); \n                            txn.begin(); \n                            em.persist(student); \n                            txn.commit(); \n                          } \n\n                          public List<Student> getStudents() { \n                            EntityManager em = factory.createEntityManager(); \n                            CriteriaBuilder cb = em.getCriteriaBuilder(); \n                            CriteriaQuery<Student> cq = cb.createQuery(Student.class); \n                            TypedQuery<Student> tq = em.createQuery(cq); \n                            List<Student> students = tq.getResultList(); \n                            em.close(); \n                            return students; \n                          } \n\n                        } \n\n                        public class TeacherService { \n                          private EntityManagerFactory factory; \n\n                          public TeacherService (EntityManagerFactoryBean factoryBean) { \n                            factory = factoryBean.getEntityManagerFactory(); \n                          } \n\n                          public void addTeacher (Teacher teacher) { \n                            EntityManager em = factory.createEntityManager(); \n                            EntityTransaction txn = em.getTransaction(); \n                            txn.begin(); \n                            em.persist(teacher); \n                            txn.commit(); \n                          } \n\n                          public List<Teacher> getTeacher() { \n                            EntityManager em = factory.createEntityManager(); \n                            CriteriaBuilder cb = em.getCriteriaBuilder(); \n                            CriteriaQuery<Teacher> cq = cb.createQuery(Teacher.class); \n                            TypedQuery<Teacher> tq = em.createQuery(cq); \n                            List<Teacher> teachers = tq.getResultList(); \n                            em.close(); \n                            return teachers; \n                          } \n\n                          public Teacher getTeacher (int id) { \n                            EntityManager em = factory.createEntityManager(); \n                            return em.find(Teacher.class, id); \n                          } \n                        } \n                        ```", "```java\n                        private CourseService courseService ; \n                        ```", "```java\n                        @ManagedProperty(value=\"#{emFactoryBean}\") \n                        private EntityManagerFactoryBean factoryBean; \n                        ```", "```java\n                        @PostConstruct \n                        public void init() { \n                          courseService = new CourseService(factoryBean); \n                        } \n                        ```", "```java\n                        public String addCourse() { \n                          courseService.addCourse(course); \n                          return \"listCourse\"; \n                        } \n                        ```", "```java\n                        public List<Course> getCourses() { \n                          return courseService.getCourses(); \n                        } \n                        ```", "```java\n                        @ManagedBean(name=\"courseServiceBean\") \n                        @RequestScoped \n                        public class CourseServiceBean { \n\n                          private CourseService courseService ; \n\n                          @ManagedProperty(value=\"#{emFactoryBean}\") \n                          private EntityManagerFactoryBean factoryBean; \n\n                          @ManagedProperty(value=\"#{course}\") \n                          private Course course; \n\n                          private String errMsg= null; \n\n                          @PostConstruct \n                          public void init() { \n                            courseService = new CourseService(factoryBean); \n                          } \n\n                          public void setFactoryBean(EntityManagerFactoryBean factoryBean) \n                           { \n                            this.factoryBean = factoryBean; \n                          } \n\n                          public Course getCourse() { \n                            return course; \n                          } \n\n                          public void setCourse(Course course) { \n                            this.course = course; \n                          } \n\n                          public String getErrMsg() { \n                            return errMsg; \n                          } \n\n                          public void setErrMsg(String errMsg) { \n                            this.errMsg = errMsg; \n                          } \n\n                          public String addCourse() { \n                            courseService.addCourse(course); \n                            return \"listCourse\"; \n                          } \n\n                          public List<Course> getCourses() { \n                            return courseService.getCourses(); \n                          } \n\n                        } \n                        ```", "```java\n                        <html  \n\n                            > \n\n                            <h2>Courses:</h2> \n                            <h:form> \n                              <h:messages style=\"color:red\"/> \n                            <h:dataTable value=\"#{courseServiceBean.courses}\" \n                             var=\"course\"> \n                              <h:column> \n                                <f:facet name=\"header\">ID</f:facet> \n                                <h:outputText value=\"#{course.id}\"/> \n                              </h:column> \n                              <h:column> \n                                <f:facet name=\"header\">Name</f:facet> \n                                <h:outputText value=\"#{course.name}\"/> \n                              </h:column> \n                              <h:column> \n                                <f:facet name=\"header\">Credits</f:facet> \n                                <h:outputText value=\"#{course.credits}\" \n                                 style=\"float:right\" /> \n                              </h:column> \n                            </h:dataTable> \n                          </h:form> \n\n                          <h:panelGroup rendered=\"#{courseServiceBean.courses.size() == \n                           0}\"> \n                            <h3>No courses found</h3> \n                          </h:panelGroup> \n\n                          <c:if test=\"#{courseServiceBean.courses.size() > 0}\"> \n                            <b>Total number of courses \n                              <h:outputText value=\"#{courseServiceBean.courses.size()}\"/> \n                            </b> \n                          </c:if> \n                          <p/> \n                          <h:button value=\"Add\" outcome=\"addCourse\"/> \n                        </html> \n                        ```"]