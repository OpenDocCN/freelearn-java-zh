- en: Exploring RemoteWebDriver
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far, we have created our test cases and tried to execute them on various
    browsers. All of these tests were executed against the browsers that were installed
    on a local machine where the test cases reside. This may not be possible at all
    times. There is a high possibility that you may be working on Mac or Linux, but
    want to execute your tests on IE on a Windows machine. In this chapter, we will
    learn about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Executing test cases on a remote machine using `RemoteWebDriver`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A detailed explanation of the JSON wire protocol
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing RemoteWebDriver
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`RemoteWebDriver` is an implementation class of the `WebDriver` interface that
    a test-script developer can use to execute their test scripts via the `Selenium
    Standalone` server on a remote machine. There are two parts to `RemoteWebDriver`:
    a server and a client. Before we start working with them, let''s rewind and see
    what we''ve been doing.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram explains what we''ve done so far:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/30719c03-0e04-4716-9be2-69f48bed2798.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The test script using WebDriver client libraries, Chrome Driver (or IE Driver
    or Gecko Driver for Firefox), and Chrome browser (or IE browser or Firefox browser)
    is sitting on the same machine. The browser is loading the web application, which
    may or may not be hosted remotely; anyway, this is outside the scope of our discussion.
    We will discuss different scenarios of test-script execution, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9f9b2309-f26b-4929-ad9b-cd6e360623e4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The test script is located on a local machine, while the browsers are installed
    on a remote machine. In this scenario, `RemoteWebDriver` comes into the picture.
    As mentioned earlier, there are two components associated with `RemoteWebDriver`:
    the server and the client. Let''s start with the `Selenium Standalone server`.'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Selenium Standalone Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Selenium Standalone Server` is a component that listens on a port for various
    requests from a `RemoteWebDriver` client. Once it receives the requests, it forwards
    them to any of the following: Chrome Driver, IE Driver, or Gecko Driver for Firefox,
    whichever is requested by the `RemoteWebDriver` client.'
  prefs: []
  type: TYPE_NORMAL
- en: Downloading Selenium Standalone Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's download `Selenium Standalone Server` and start running it. You can download
    it from [https://www.seleniumhq.org/download/](https://www.seleniumhq.org/download/),
    but, for our purposes, let's download a specific version of it, as we are using
    WebDriver Version 3.12.0\. This server JAR should be downloaded to the remote
    machine on which the browsers are located. Also, make sure the remote machine
    has Java Runtime installed on it.
  prefs: []
  type: TYPE_NORMAL
- en: Running the server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open your command-line tool on the remote machine and navigate to the location
    where you have downloaded the JAR file. Now, to start Selenium Standalone Server,
    execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows what you should see in your console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e9117392-b178-47a6-8963-4e363111fbf2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now the server has started and is listening on the `<remote-machine-ip>:4444`
    address for remote connections from the `RemoteWebDriver` client. The previously
    seen image (the second image in the *Introducing* *RemoteWebDriver* section) will
    appear as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d7c3976d-4f18-41cf-aad9-7ae16e47f3c0.png)'
  prefs: []
  type: TYPE_IMG
- en: On the remote machine, Selenium Standalone Server will interface between the
    test script and the browsers, as shown in the preceding diagram. The test script
    will first establish a connection with Selenium Standalone Server that will forward
    the commands to the browser installed on the remote machine.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the RemoteWebDriver client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have our Selenium Standalone server up and running, it's time for
    us to create the `RemoteWebDriver` client. Fortunately, we don't have to do much
    to create a `RemoteWebDriver` client. It's nothing but the language-binding client
    libraries that serve as a `RemoteWebDriver` client. `RemoteWebDriver` will translate
    the test-script requests or commands to JSON payload and send them across to the
    `RemoteWebDriver` server using the JSON wire protocol.
  prefs: []
  type: TYPE_NORMAL
- en: When you execute your tests locally, the WebDriver client libraries talk to
    the Chrome Driver, IE Driver, or Gecko Driver directly. Now when you try to execute
    your tests remotely, the WebDriver client libraries talk to `Selenium Standalone
    Server` and the server talks to either the Chrome Driver, the IE Driver, or the
    Gecko Driver for Firefox requested by the test script, using the `DesiredCapabilities`
    class. We will explore the `DesiredCapabilities` class in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Converting an existing test script to use the RemoteWebDriver server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a test script that we have executed locally; that is, where the
    test scripts and the browser were on the same machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding test script creates an instance of Chrome Driver and launches
    the Chrome browser. Now, let''s try to convert this test script to use `Selenium
    Standalone Server` that we started earlier. Before we do that, let''s see the
    constructor of `RemoteWebDriver`, which is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The input parameters for the constructor include the address (hostname or IP)
    of `Selenium Standalone Server` running on the remote machine and the desired
    capabilities required for running the test (for example name of the browser and/or
    operating system). We will see these desired capabilities shortly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s modify the test script to use `RemoteWebDriver`. Replace `WebDriver
    driver = new ChromeDriver();` with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We have created a RemoteWebDriver instance that tries to connect to `http://10.172.10.1:4444/wd/hub`,
    where `Selenium Standalone Server` is running and listening for requests. Having
    done that, we also need to specify which browser your test case should get executed
    on. This can be done using the `DesiredCapabilities` instance.
  prefs: []
  type: TYPE_NORMAL
- en: For this example, the IP used is 10.172.10.1\. However, in your case, it will
    be different. You need to obtain the IP of the machine where the Selenium Standalone
    Server is running and replace the example IP used in this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before running tests, we need to restart the Selenium Standalone Server by
    specifying the path of ChromeDriver:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the following test with `RemoteWebDriver` will launch the Chrome browser
    and execute your test case on it. So the modified test case will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now execute this test script from your local machine to establish a connection
    between the `RemoteWebDriver` client and `Selenium Standalone Server`. The Server
    will launch the Chrome browser. The following is the output you will see in the
    console where the Server is running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6b54e3cf-5a6c-4f61-abac-8d6b778165a7.png)'
  prefs: []
  type: TYPE_IMG
- en: It says that a new session with the desired capabilities is being created. Once
    the session is established, a session ID will be printed to the console. At any
    point in time, you can view all of the sessions that are established with `Selenium
    Standalone Server` by navigating to the host or IP of the machine where the Selenium
    server is running `http://<hostnameOrIP>:4444/wd/hub`.
  prefs: []
  type: TYPE_NORMAL
- en: The Selenium Standalone Server, by default, listens to port number 4444\. We
    can change the default port by passing the `-port` argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'It will give the entire list of sessions that the server is currently handling.
    The screenshot of this is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cd32ba9e-6810-4a76-8226-ca4ddd3f1974.png)'
  prefs: []
  type: TYPE_IMG
- en: This is a very basic portal that lets the test-script developer see all of the
    sessions created by the server and perform some basic operations on it, such as
    terminating a session, taking a screenshot of a session, loading a script to a
    session, and seeing all of the desired capabilities of a session. The following
    screenshot shows all of the default desired capabilities of our current session.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see the popup by hovering over the **Capabilities** link, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ff1d725e-48d5-4db2-9690-69e0f4cdb72e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Those are the default desired capabilities that are set implicitly by the server
    for this session. Now we have successfully established a connection between our
    test script, which is using a `RemoteWebDriver` client on one machine, and the
    Selenium Standalone Server on another machine. The original diagram of running
    the test scripts remotely is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/69ede412-cc68-453c-894d-8d89bc552a16.png)'
  prefs: []
  type: TYPE_IMG
- en: Using RemoteWebDriver for Firefox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the Firefox browser to execute our test scripts is similar to using the
    Chrome browser, except for a couple of variations in how `GeckoDriver` is launched.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see this by changing the test script that we used for the Chrome browser
    to the following script, using `"firefox"`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Before you try to execute this code, restart `Selenium Standalone Server` to
    use `GeckoDriver`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Try executing the preceding test script now, and you should see the Firefox
    browser getting launched and executing your test commands. `Selenium Standalone
    Server` has started `GeckoDriver`, created a connection to it, and started executing
    the test-script commands.
  prefs: []
  type: TYPE_NORMAL
- en: Using RemoteWebDriver for Internet Explorer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For executing tests on the Internet Explorer driver, the steps are similar to
    what we did with the Chrome and Firefox browsers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see this by changing the test script that we used for the Chrome or
    Firefox browser to the following script, using `"internet explorer"`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Before you try to execute this code, restart `Selenium Standalone Server` to
    use `InternetExplorerDriver`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Try executing the preceding test script now, and you should see the Internet
    Explorer browser getting launched and executing your test commands. `Selenium
    Standalone Server` has started `InternetExplorerDriver`, created a connection
    with it, and started executing the test-script commands.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the JSON wire protocol
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In many places, we have mentioned that WebDriver uses the JSON wire protocol
    to communicate between client libraries and different driver (that is, Chrome
    Driver, IE Driver, Gecko Driver, and so on) implementations. In this section,
    we will see exactly what it is and which different JSON APIs a client library
    should implement to talk to the drivers.
  prefs: []
  type: TYPE_NORMAL
- en: '**JavaScript Object Notation (JSON)** is used to represent objects with complex
    data structures. It is used primarily to transfer data between a server and a
    client on the web. It has become an industry standard for various REST web services,
    offering a strong alternative to XML.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A sample JSON file, saved as a `.json` file, will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: A client can send a person's details to a server in the preceding JSON format,
    which the server can parse, and then create an instance of the person object for
    use in its execution. Later, the response can be sent back by the server to the
    client in the JSON format, the data of which the client can use to create an object
    of a class. This process of converting an object's data into the JSON format and
    JSON-formatted data into an object is called **serialization** and **de-serialization**,
    respectively, which is quite common in REST-based web services.
  prefs: []
  type: TYPE_NORMAL
- en: 'WebDriver uses the same approach to communicate between client libraries (language
    bindings) and drivers, such as Firefox Driver, IE Driver, and Chrome Driver. Similarly,
    the `RemoteWebDriver` client and `Selenium Standalone Server` use the JSON wire
    protocol to communicate among themselves. But all of these drivers use it under
    the hood, hiding all the implementation details from us and making our lives simpler.
    The list of APIs for various actions that we can take on a web page is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The complete documentation is available at [https://code.google.com/p/selenium/wiki/JsonWireProtocol](https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol).
    The client libraries will translate your test-script commands into the JSON format
    and send the requests to the appropriate WebDriver API. The WebDriver will parse
    these requests and take necessary actions on the web page. Let''s see that as
    an example. Suppose your test script has this code: `driver.get("http://www.google.com");`.'
  prefs: []
  type: TYPE_NORMAL
- en: The client library will translate that into JSON by building a JSON payload
    (JSON document) and post the request to the appropriate API. In this case, the
    API that handles the `driver. get(URL)` method is `/session/:sessionId/url`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code shows what happens in the client library layer behind the
    scenes before the request is sent to the driver; the request is sent to the RemoteWebDriver
    server running on 10.172.10.1:4444:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '`Selenium Standalone Server` will forward that request to the driver; the driver
    will execute the test-script commands that arrive in the preceding format on the
    web application, under the test that is loaded in the browser.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows the dataflow at each stage:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/533c2ac8-3e20-4933-b012-db2dfac4bc58.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding diagram shows the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first stage is communication between the test script and the client library.
    The data or command that flows between them is a call to the `get()` method of
    the driver: `driver.get("http://www.google.com");`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The client library, as soon as it receives the preceding command, will convert
    it into the JSON format and communicate with `Selenium Standalone Server.`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, `Selenium Standalone Server` forwards the JSON payload request to the
    Chrome Driver.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Chrome Driver will communicate with the Chrome browser natively, and then
    the browser will send a request for the asked URL to load.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about `RemoteWebDriver` and how to execute test
    scripts remotely on a different machine using `Selenium Standalone Server` and
    the `RemoteWebDriver` client. This enables Selenium WebDriver tests to be executed
    on remote machines with different browser and OS combinations. We also looked
    at the JSON wire protocol and how client libraries work behind the scenes to send
    and receive requests and responses to and from the drivers.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will extend the usage of Selenium Standalone Server
    and RemoteWebDriver to create a Selenium Grid for cross-browser and distributed
    testing.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With Selenium, we can execute tests on remote machine(s)— true or false
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which driver class is used to run tests on a remote machine?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explain desired capabilities.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What protocol is used between the Selenium test and Selenium Standalone Server?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the default port used by Selenium Standalone Server?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can check out the following link for more information about the topics
    covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Selenium WebDriver W3C specification explains the WebDriver Protocol and all
    the endpoints: [https://www.w3.org/TR/webdriver/](https://www.w3.org/TR/webdriver/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
