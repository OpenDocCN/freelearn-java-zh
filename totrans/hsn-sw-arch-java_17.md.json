["```java\n@GET\n    @Path(\"/hello\")\n    @Produces(MediaType.TEXT_PLAIN)\n    @Counted(name = \"callsNumber\", description = \"How many \n      calls received.\")\n    @Timed(name = \"callsTimer\", description = \"Time for \n      each call\", unit = MetricUnits.MILLISECONDS)\n    public String hello() throws InterruptedException {\n        int rand = (int)(Math.random() * 30);\n        Thread.sleep(rand*100);\n        return \"Hello RESTEasy\";\n    }\n```", "```java\n# HELP application_it_test_MetricsTest_callsNumber_total \n  How many calls received.\n# TYPE application_it_test_MetricsTest_callsNumber_total \n  counter\napplication_it_test_MetricsTest_callsNumber_total 4.0\n...\n# HELP application_it_test_MetricsTest_callsTimer_seconds \n  Time for each call\n# TYPE application_it_test_MetricsTest_callsTimer_seconds \n  summary\napplication_it_test_MetricsTest_callsTimer_seconds_count \n  4.0\n...\n```", "```java\n...\n# HELP base_memory_usedHeap_bytes Displays the amount of \n  used heap memory in bytes.\n# TYPE base_memory_usedHeap_bytes gauge\nbase_memory_usedHeap_bytes 9.4322688E7\n# HELP base_thread_count Displays the current number of \n  live threads including both daemon and non-daemon threads\n# TYPE base_thread_count gauge\nbase_thread_count 33.0\n...\n```", "```java\n@Liveness\npublic class MyLiveHealthCheck implements HealthCheck {\n    @Override\n    public HealthCheckResponse call() {\n        // do some checks\n        return HealthCheckResponse.up(\"Everything works\");\n    }\n}\n```", "```java\n@Readiness\npublic class MyReadyHealthCheck implements HealthCheck {\n    @Override\n    public HealthCheckResponse call() {\n        // do some checks\n        return HealthCheckResponse.up(\"Ready to take \n          calls\");\n    }\n}\n```", "```java\n@Startup\npublic class MyStartedHealthCheck implements HealthCheck {\n    @Override\n    public HealthCheckResponse call() {\n        // do some checks\nreturn HealthCheckResponse.up(\"Startup completed\");\n    }\n}\n```", "```java\n@Path(\"/trace\")\npublic class TracingTest {\n     @Inject\n    NameGuessService service;\n     @GET\n    @Produces(MediaType.TEXT_PLAIN)\n    public String hello() {\n        String name = service.guess();\n        return \"Hello \"+name;\n    }\n}\n```", "```java\n@ApplicationScoped\n@Traced\npublic class NameGuessService {\n    public String guess()\n    {\n        Random random = new Random();\n        String[] names = {\"Giuseppe\",\"Stefano\",\n          \"Filippo\",\"Luca\",\"Antonello\"};\n        return names[random.nextInt(names.length)];\n    }\n}\n```", "```java\nsudo docker run -p 5775:5775/udp -p 6831:6831/udp -p \n6832:6832/udp -p 5778:5778 -p 16686:16686 -p 14268:14268 \njaegertracing/all-in-one:latest\n```", "```java\n./mvnw compile quarkus:dev -Djvm.args=\"-\nDJAEGER_SERVICE_NAME=testservice -\nDJAEGER_SAMPLER_TYPE=const -DJAEGER_SAMPLER_PARAM=1\"\n```"]