["```java\ncase class Prompt(value: String)\ndef message(msg: String)(implicit prompt: Prompt) = {\n  println(msg)\n  println(s\"${prompt.value}>\")\n}\n```", "```java\nmessage(\"Welcome!\")(Prompt(\"action\"))\n```", "```java\nobject Defaults {\n  implicit val defaultPrompt = Prompt(\"action\")\n}\n```", "```java\nimport Defaults._\nmessage(\"Welcome!\")\nmessage(\"What do you want to do next?\")\n```", "```java\nobject Prompt {\n  implicit val defaultPrompt = Prompt(\"action\")\n}\nmessage(\"Welcome!\")\nmessage(\"What do you want to do next?\")\n```", "```java\nimplicit def intToIterable(i: Int): Traversable[Int] = \n  new Traversable[Int] {\n  override def foreach[U](f: Int => U): Unit = {\n    var value = i\n    var l = List.empty[Int]\n   do {\n      l = value % 10 :: l\n      value /= 10\n    } while (value != 0)\n    l.foreach(f)\n  }\n}\n```", "```java\nscala> intToIterable(123).size\nres0: Int = 3\nscala> 123.size\nres1: Int = 3\nscala> 123 ++ 456\nres2: Traversable[Int] = List(1, 2, 3, 4, 5, 6)\n```", "```java\ndef orderedSeq[A: Ordering](t: Traversable[A]) = t.toSeq.sorted\n```", "```java\norderedSeq(472).toList\n// Returns List(2, 4, 7)\n```", "```java\nimplicit class RichInt(val self: Int) extends AnyVal {\n  def toHexString: String = java.lang.Integer.toHexString(self)\n}\n```", "```java\nsealed trait JsValue\ncase class JsObject(fields: Map[String, JsValue]) extends JsValue\ncase class JsArray(elements: Vector[JsValue]) extends JsValue\ncase class JsString(value: String) extends JsValue\ncase class JsNumber(value: BigDecimal) extends JsValue\n\nsealed trait JsBoolean extends JsValue\ncase object JsTrue extends JsBoolean\ncase object JsFalse extends JsBoolean\n\ncase object JsNull extends JsValue\n```", "```java\ntrait JsonWriter[A] {\n  def write(value: A): JsValue\n}\n\nobject JsonWriter {\n  implicit object IntJsonWriter extends JsonWriter[Int] {\n    def write(value: Int): JsValue = JsNumber(value)\n  }\n\n  implicit object StringJsonWriter extends JsonWriter[String] {\n    def write(value: String): JsValue = JsString(value)\n  }\n}\n```", "```java\ndef toJson[A](value: A)(implicit jw: JsonWriter[A]) =\n  jw.write(value)\n```", "```java\ndef implicitly[T](implicit e: T) = e\n```", "```java\n    def toJson[A](value: A)(implicit jw: JsonWriter[A]): JsValue and \n    the JsonWriter trait as trait JsonWriter[A] { def write(value: A): JsValue }\n    ```"]