["```java\n<dependency>\n    <groupId>org.hibernate</groupId>\n    <artifactId>hibernate-core</artifactId>\n    <version>5.2.10.Final</version>\n</dependency>\n\n```", "```java\n<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\n            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n            xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence   \n           http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd\"\n             version=\"2.0\">\n        <persistence-unit name=\"jpa-example-pu\">\n          <properties>\n            <property name=\"javax.persistence.jdbc.url\" \n            value=\"jdbc:h2:tcp://localhost/~/h2-databases/demo\" />\n           <property name=\"javax.persistence.jdbc.user\" value=\"sa\" />\n           <property name=\"javax.persistence.jdbc.password\" value=\"\" />\n          </properties>\n        </persistence-unit>\n</persistence>\n\n```", "```java\npublic class JPAService {\n\n    private static EntityManagerFactory factory;\n\n    public static void init() {\n        if (factory == null) {\n            factory = Persistence.createEntityManagerFactory(\"jpa-\n             example-pu\");\n        }\n    }\n\n    public static void close() {\n        factory.close();\n    }\n\n    public static EntityManagerFactory getFactory() {\n        return factory;\n    }\n }\n```", "```java\n@WebListener\npublic class JpaExampleContextListener implements ServletContextListener {\n\n    @Override\n    public void contextInitialized(ServletContextEvent sce) {\n        JPAService.init();\n    }\n\n    @Override\n    public void contextDestroyed(ServletContextEvent sce) {\n        JPAService.close();\n    }\n}\n```", "```java\nEntityManager entityManager = JPAService.getFactory().createEntityManager();\nentityManager.getTransaction().begin();\n\n... run queries ...\n\nentityManager.getTransaction().commit();\nentityManager.close();\n```", "```java\nCREATE TABLE messages(id BIGINT auto_increment, content VARCHAR(255))\n```", "```java\npublic class Message {\n\n    private Long id;\n    private String content;\n\n    ... getters and setters ...\n}\n```", "```java\n@Entity\n@Table(name = \"messages\")\npublic class Message {\n\n @Id    private Long id;\n\n    private String content;\n\n    ... getters and setters ...\n}\n```", "```java\n@Id\n@GeneratedValue(strategy = GenerationType.IDENTITY)\nprivate Long id;\n\n```", "```java\n  public class Message {\n     ...\n\n     @Override\n     public boolean equals(Object o) {\n         if (this == o) return true;\n         if (o == null || getClass() != o.getClass()) return false;\n\n         Message message = (Message) o;\n\n        return id != null ? id.equals(message.id) : message.id == null;\n     }\n\n     @Override\n     public int hashCode() {\n         return id != null ? id.hashCode() : 0;\n     }\n\n     ...\n }\n```", "```java\nQuery query = entityManager.createQuery(\"select m from Message m\");\nList<Message> messages = query.getResultList();\n\n```", "```java\npublic class MessageRepository {\n\n    public static List<Message> findAll() {\n        EntityManager entityManager = null;\n        try {\n            entityManager =    \n            JPAService.getFactory().createEntityManager();\n            entityManager.getTransaction().begin();\n\n Query query = entityManager.createQuery(\"select m from   \n            Message m\");\n List<Message> messages = query.getResultList();\n\n            entityManager.getTransaction().commit();\n            return messages;\n\n        } finally {\n            if (entityManager != null) {\n                entityManager.close();\n            }\n        }\n     }\n\n }\n```", "```java\npublic class JPAService {\n    ...\n\n    public static <T> T runInTransaction(Function<EntityManager, T> \n      function) {\n        EntityManager entityManager = null;\n\n        try {\n            entityManager = \n            JPAService.getFactory().createEntityManager();\n            entityManager.getTransaction().begin();\n\n T result = function.apply(entityManager); \n            entityManager.getTransaction().commit();\n            return result;\n\n        } finally {\n            if (entityManager != null) {\n                entityManager.close();\n            }\n        }\n     }\n\n }\n```", "```java\npublic class MessageRepository {\n\n    public static List<Message> findAll() {\n return JPAService.runInTransaction(em ->\n em.createQuery(\"select m from Message m\").getResultList()\n );    }\n}\n```", "```java\npublic class MessageRepository {\n    ...\n\n    public static void save(Message message) {\n        JPAService.runInTransaction(em -> {\n            em.persist(message);\n            return null;\n        });\n    }\n}\n```", "```java\npublic class VaadinUI extends UI {\n\n    private Grid<Message> grid;\n    private TextField textField;\n    private Button button;\n\n    @Override\n    protected void init(VaadinRequest request) {\n        initLayout();\n        initBehavior();\n    }\n\n    private void initLayout() {\n        grid = new Grid<>(Message.class);\n        grid.setSizeFull();\n        grid.getColumn(\"id\").setWidth(100);\n\n        textField = new TextField();\n        textField.setPlaceholder(\"Enter a new message...\");\n        textField.setSizeFull();\n\n        button = new Button(\"Save\");\n\n        HorizontalLayout formLayout = new HorizontalLayout(textField, button);\n        formLayout.setWidth(\"100%\");\n        formLayout.setExpandRatio(textField, 1);\n\n        VerticalLayout layout = new VerticalLayout(grid, formLayout);\n        layout.setWidth(\"600px\");\n        setContent(layout);\n    }\n\n    private void initBehavior() {\n        // not yet implemented! Stay tuned!\n    }\n}\n```", "```java\npublic class VaadinUI extends UI {\n    ...\n\n    private void initBehavior() {\n button.addClickListener(e -> saveCurrentMessage());        update();\n    }\n\n    private void saveCurrentMessage() {\n        Message message = new Message();\n        message.setContent(textField.getValue());\n        MessageRepository.save(message);\n\n        update();\n        grid.select(message);\n        grid.scrollToEnd();\n    }\n\n    private void update() {\n grid.setItems(MessageRepository.findAll());\n        textField.clear();\n        textField.focus();\n    }\n}\n```", "```java\n<dependency>\n    <groupId>org.mybatis</groupId>\n    <artifactId>mybatis</artifactId>\n    <version>3.4.5</version>\n</dependency>\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\nPUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n    <environments default=\"development\">\n        <environment id=\"development\">\n            <transactionManager type=\"JDBC\"/>\n            <dataSource type=\"POOLED\">\n                <property name=\"driver\" value=\"org.h2.Driver\"/>\n                <property name=\"url\" \n                 value=\"jdbc:h2:tcp://localhost/~/h2-databases/demo\"/>\n                <property name=\"username\" value=\"sa\"/>\n                <property name=\"password\" value=\"\"/>\n            </dataSource>\n        </environment>\n    </environments>\n    <mappers>\n        <mapper  \n     class=\"packt.vaadin.datacentric.chapter06.mybatis.MessageMapper\"/>\n    </mappers>\n</configuration>\n\n```", "```java\npublic class MyBatisService {\n\n    private static SqlSessionFactory sqlSessionFactory;\n\n    public static void init() {\n        InputStream inputStream = MyBatisService.class.getResourceAsStream(\"/mybatis-config.xml\");\n        sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n    }\n\n    public static SqlSessionFactory getSqlSessionFactory() {\n        return sqlSessionFactory;\n    }\n}\n```", "```java\npublic interface MessageMapper {\n\n @Select(\"SELECT id, content FROM messages\")\n    List<Message> findAll();\n\n @Insert(\"INSERT INTO messages(content) VALUES (#{content})\")\n    @Options(useGeneratedKeys = true, keyProperty = \"id\")\n    void save(Message message);\n\n}\n```", "```java\npublic class MessageService {\n\n    public static List<Message> findAll() {\n        try (SqlSession session =   \n          MyBatisService.getSqlSessionFactory().openSession()) {\n            MessageMapper mapper = \n             session.getMapper(MessageMapper.class);\n            return mapper.findAll();\n        }\n    }\n\n    public static void save(Message message) {\n        try (SqlSession session = MyBatisService.getSqlSessionFactory().openSession()) {\n            MessageMapper mapper = session.getMapper(MessageMapper.class);\n            mapper.save(message);\n session.commit();        }\n    }\n}\n```", "```java\n<dependency>\n    <groupId>org.jooq</groupId>\n    <artifactId>jooq</artifactId>\n    <version>3.9.5</version>\n</dependency>\n<dependency>\n    <groupId>org.jooq</groupId>\n    <artifactId>jooq-codegen</artifactId>\n    <version>3.9.5</version>\n</dependency>\n\n```", "```java\ndatasource.url=jdbc:h2:tcp://localhost/~/h2-databases/demo\ndatasource.username=sa\ndatasource.password=\n\n```", "```java\nSELECT AUTHOR.FIRST_NAME, AUTHOR.LAST_NAME\nFROM AUTHOR\nORDER BY AUTHOR.LAST_NAME ASC\n```", "```java\ndslContext.select(AUTHOR.FIRST_NAME, AUTHOR.LAST_NAME)\n      .from(AUTHOR)\n      .orderBy(AUTHOR.LAST_NAME.asc()\n\n```", "```java\n<plugin>\n    <groupId>org.jooq</groupId>\n    <artifactId>jooq-codegen-maven</artifactId>\n    <version>3.9.5</version>\n    <executions>\n        <execution>\n            <goals>\n                <goal>generate</goal>\n            </goals>\n        </execution>\n    </executions>\n    <configuration>\n        <jdbc>\n            <url>${datasource.url}</url>\n            <user>${datasource.username}</user>\n            <password>${datasource.password}</password>\n        </jdbc>\n        <generator>\n            <database>\n                <name>org.jooq.util.h2.H2Database</name>\n            </database>\n            <target>\n               <packageName>packt.vaadin.datacentric.chapter06.jooq\n               </packageName>\n                <directory>target/generated-sources/jooq</directory>\n            </target>\n        </generator>\n    </configuration>\n</plugin>\n\n```", "```java\n<plugin>\n    <groupId>org.codehaus.mojo</groupId>\n    <artifactId>properties-maven-plugin</artifactId>\n    <version>1.0.0</version>\n    <executions>\n        <execution>\n            <phase>initialize</phase>\n            <goals>\n                <goal>read-project-properties</goal>\n            </goals>\n            <configuration>\n                <files>\n\n                <file>src/main/resources/datasource.properties</file>\n                </files>\n            </configuration>\n        </execution>\n    </executions>\n</plugin>\n\n```", "```java\nConnection connection = pool.getConnection();\nDSLContext dslContext = DSL.using(connection);\n```", "```java\nList<MessagesRecord> messages = dslContext.select()\n        .from(MESSAGES)\n        .fetchInto(MessagesRecord.class);\n```", "```java\npublic class MessageRepository {\n\n    public static List<MessagesRecord> findAll() {\n        try {\n            return JooqService.runWithDslContext(context ->\n                    context.select()\n                            .from(MESSAGES)\n                            .fetchInto(MessagesRecord.class)\n            );\n\n        } catch (SQLException e) {\n            e.printStackTrace();\n            return Collections.emptyList();\n        }\n    }\n\n    public static void save(MessagesRecord message) {\n        try {\n            JooqService.runWithDslContext(context ->\n                    context.insertInto(MESSAGES, MESSAGES.CONTENT)\n                            .values(message.getContent())\n                            .execute()\n            );\n\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n```", "```java\npublic class JooqService {\n    ...\n\n    public static <T> T runWithDslContext(Function<DSLContext, T> \n function) throws SQLException {\n        try (Connection connection = pool.getConnection(); DSLContext \n dslContext = DSL.using(connection)) {\n            T t = function.apply(dslContext);\n            return t;\n        }\n    }\n}\n```"]