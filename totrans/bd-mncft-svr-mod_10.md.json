["```java\nBukkitRunnable runnable = new BukkitRunnable();\n```", "```java\nBukkitRunnable runnable = new BukkitRunnable() {\n  @Override\n  public void run() {\n    for (World world : Bukkit.getWorlds()) {\n      //Set the time to noon\n      world.setTime(6000);\n    }\n  }\n};\n```", "```java\nrunnable.runTaskTimer(this, 0, 1200);\n```", "```java\npackage com.codisimus.alwaysday;\n\nimport org.bukkit.Bukkit;\nimport org.bukkit.World;\nimport org.bukkit.plugin.java.JavaPlugin;\nimport org.bukkit.scheduler.BukkitRunnable;\nimport org.bukkit.scheduler.BukkitTask;\n\npublic class AlwaysDay extends JavaPlugin {\n    BukkitTask dayLightTask;\n\n    @Override\n    public void onDisable() {\n\n        dayLightTask.cancel();\n\n    }\n\n  @Override\n  public void onEnable() {\n    BukkitRunnable bRunnable = new BukkitRunnable() {\n      @Override\n      public void run() {\n        for (World world : Bukkit.getWorlds()) {\n          //Set the time to noon\n          world.setTime(6000);\n        }\n      }\n    };\n\n    //Repeat task every 1200 ticks (1 minute)\n    dayLightTask = bRunnable.runTaskTimer(this, 0, 1200);\n  }\n}\n```", "```java\nstatic int warpDelay = 5; //in seconds\n```", "```java\nprivate static HashMap<String, BukkitTask>warpers = new HashMap<>();//Player UUID -> Warp Task\n```", "```java\n/**\n * Schedules a Player to be teleported after the delay time\n *\n * @param player The Player being teleported\n * @param loc The location of the destination\n */\npublic static void scheduleWarp(final Player player, final Location loc) {\n  //Inform the player that they will be teleported\n  player.sendMessage(\"You will be teleported in \"+ warpDelay + \" seconds\");\n\n  //Create a task to teleport the player\n  BukkitRunnable bRunnable = new BukkitRunnable() {\n    @Override\n    public void run() {\n      player.teleport(loc); \n\n      //Remove the player as a warper because they have already beenteleported\n      warpers.remove(player.getName());\n    }\n  };\n\n  //Schedule the task to run later\n  BukkitTask task = bRunnable.runTaskLater(plugin, 20L * warpDelay);\n\n  //Keep track of the player and their warp task\n  warpers.put(player.getUniqueId().toString(), task);\n}\n\n/**\n * Returns true if the player is waiting to be teleported\n *\n * @param player The UUID of the Player in question\n * @return true if the player is waiting to be warped\n */\npublic static boolean isWarping(String player) {\n  return warpers.containsKey(player);\n}\n\n/**\n * Cancels the warp task for the given player\n *\n * @param player The UUID of the Player whose warp task will be canceled\n */\npublic static void cancelWarp(String player) {\n  //Check if the player is warping\n  if (isWarping(player)) {\n    //Remove the player as a warper\n    //Cancel the task so that the player is not teleported\n    warpers.remove(player).cancel();\n  }\n}\n```", "```java\npackage com.codisimus.warper;\n\nimport org.bukkit.block.Block;\nimport org.bukkit.entity.Player;\nimport org.bukkit.event.EventHandler;\nimport org.bukkit.event.EventPriority;\nimport org.bukkit.event.Listener;\nimport org.bukkit.event.player.PlayerMoveEvent;\n\npublic class WarperPlayerListener implements Listener {\n  @EventHandler (priority = EventPriority.MONITOR)\n  public void onPlayerMove(PlayerMoveEvent event) {\n    Player player = event.getPlayer();\n    String playerUuid = player.getUniqueId().toString();\n\n    //We only care about this event if the player is flagged aswarping\n    if (Warper.isWarping(playerUuid)) {\n      //Compare the block locations rather than the player locations\n      //This allows a player to move their head without canceling thewarp\n      Block blockFrom = event.getFrom().getBlock();\n      Block blockTo = event.getTo().getBlock();\n\n      //Cancel the warp if the player moves to a different block\n      if (!blockFrom.equals(blockTo)) {\n        Warper.cancelWarp(playerUuid);\n        player.sendMessage(\"Warping canceled because you moved!\");\n      }\n    }\n  }\n}\n```", "```java\nBukkitRunnable saveRunnable = new BukkitRunnable() {\n  @Override\n  public void run() {\n    try {\n      //Write the configuration to our save file\n      config.save(new File(plugin.getDataFolder(), \"warps.yml\"));\n    } catch (Exception saveFailed) {\n      plugin.getLogger().log(Level.SEVERE, \"Save Failed!\", saveFailed);\n    }\n  }\n};\n\nsaveTask = saveRunnable.runTaskAsynchronously(plugin);\n```", "```java\nif (saveTask != null) {\n  saveTask.cancel();\n}\n```"]