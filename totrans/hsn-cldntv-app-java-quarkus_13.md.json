["```java\n@Incoming(\"channel\")\npublic void consume(Message<String> s) {   \n  // Consume message here:\n}\n```", "```java\n@Incoming(\"channel\")\npublic void consume(KafkaMessage<String> s) {     \n   // Consume message here:\n}\n```", "```java\n@Outgoing(\"channel\")\n public Message<String> produce() {\n   // Produce and return a Message implementation\n }\n```", "```java\n@Incoming(\"from\")\n@Outgoing(\"to\")\npublic String translate(String text) {\n   return MyTranslator.translate(text);\n}\n```", "```java\n<dependency>\n   <groupId>io.quarkus</groupId>\n   <artifactId>quarkus-smallrye-reactive-messaging-kafka</artifactId>\n</dependency>\n```", "```java\nsudo curl -L \"https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\n```", "```java\nchmod a+x /usr/local/bin/docker-compose\n```", "```java\ndocker-compose --version\n```", "```java\ndocker-compose version 1.24.1, build 1110ad01\n```", "```java\n@ApplicationScoped\npublic class QuoteGenerator {\n\n    private Random random = new Random();\n\n @Outgoing(\"stock-quote\")\n    public Flowable<String> generate() {\n       return Flowable.interval(2, TimeUnit.SECONDS)\n         .map(tick -> generateOrder(random.nextInt(2), \n          random.nextInt(5),   random.nextInt(100)));\n }\n\n    private String generateOrder(int type, int company, int amount) {\n       Jsonb jsonb = JsonbBuilder.create();\n       Operation operation = new Operation(type, Company.values()\n        [company], amount);\n       return jsonb.toJson(operation);\n    }\n}\n```", "```java\n{\"amount\":32,\"company\":\"Soylent\",\"type\":0}\n```", "```java\npublic enum Company {\n        Acme, Globex, Umbrella, Soylent, Initech\n}\n```", "```java\npublic class Operation {\n\n    public static final int SELL = 0;\n    public static final int BUY = 1;\n\n    private int amount;\n    private Company company;\n    private int type;\n\n    public Operation(int type, Company company, int amount) {\n        this.amount = amount;\n        this.company = company;\n        this.type = type;\n    }\n    // Getters/Setters method omitted for brevity\n}\n```", "```java\n@ApplicationScoped\npublic class QuoteConverter {\n    HashMap<String,Double> quotes;\n\n    private Random random = new Random();\n    @PostConstruct\n    public void init() {\n        quotes = new HashMap<>();\n        for (Company company: Company.values())\n        quotes.put(company.name(), new Double(random.nextInt\n        (100) + 50));\n\n    }\n\n @Incoming(\"stocks\")\n @Outgoing(\"in-memory-stream\")\n    @Broadcast\n    public String newQuote(String quoteJson) {\n        Jsonb jsonb = JsonbBuilder.create();\n\n        Operation operation = jsonb.fromJson(quoteJson, \n         Operation.class);\n        double currentQuote = \n         quotes.get(operation.getCompany().name());\n        double newQuote;\n        double change = (operation.getAmount() / 25);\n\n        if (operation.getType() == Operation.BUY) {\n              newQuote = currentQuote + change;\n        }\n        else  {\n            newQuote = currentQuote - change;\n        }\n        if (newQuote < 0) newQuote = 0;\n\n        quotes.replace(operation.getCompany().name(), newQuote);\n        Quote quote = new Quote(operation.getCompany().name(), \n         newQuote);\n\n        return jsonb.toJson(quote);\n\n    }\n\n}\n```", "```java\npublic class Quote {\n    String company;\n    Double value;\n\n    public Quote(String company, Double value) {\n        this.company = company;\n        this.value = value;\n    }\n\n   // Getters Setters method omitted for brevity\n}\n```", "```java\n@Path(\"/quotes\")\npublic class QuoteEndpoint {\n\n    @Inject\n@Channel(\"in-memory-stream\") \n    Publisher<String> quote;\n\n    @GET\n    @Path(\"/stream\")\n    @Produces(MediaType.SERVER_SENT_EVENTS)\n    @SseElementType(\"text/plain\")\n    public Publisher<String> stream() {\n\n        return quote;\n    }\n}\n```", "```java\n#Kafka destination\nmp.messaging.outgoing.stock-quote.connector=smallrye-kafka\nmp.messaging.outgoing.stock-quote.topic=stocks\nmp.messaging.outgoing.stock-quote.value.serializer=org.apache.kafka.common.serialization.StringSerializer\n\n#Kafka source\nmp.messaging.incoming.stocks.connector=smallrye-kafka\nmp.messaging.incoming.stocks.topic=stocks\nmp.messaging.incoming.stocks.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer\n```", "```java\n<script>\n    var source = new EventSource(\"/quotes/stream\");\n    source.onmessage = function (event) {\n    var data = JSON.parse(event.data);\n    var company = data['company'];\n    var value = data['value'];\n        document.getElementById(company).innerHTML = value;\n    };\n</script>\n```", "```java\ndocker-compose up\n```", "```java\nkafka_1      | [2019-10-20 07:05:36,276] INFO Kafka version : 2.1.0 (org.apache.kafka.common.utils.AppInfoParser)\n kafka_1      | [2019-10-20 07:05:36,277] INFO Kafka commitId : 809be928f1ae004e (org.apache.kafka.common.utils.AppInfoParser)\n kafka_1      | [2019-10-20 07:05:36,279] INFO [KafkaServer id=0] started (kafka.server.KafkaServer)\n```", "```java\ndocker ps --format '{{.Names}}'\n```", "```java\nkafka_kafka_1\nkafka_zookeeper_1\n```", "```java\nmvn install quarkus:dev\n```", "```java\ndocker stop $(docker ps -a -q)\n```", "```java\n6a538738088f\nf2d97de3520a\n```", "```java\ndocker ps --format '{{.Names}}'\n```", "```java\noc new-project kafka-demo\n```", "```java\nNow using project \"kafka-demo\" on server \"https://api.fmarchioni-openshift.rh.com:6443\".\n```", "```java\noc create -f strimzi/kafka-cluster-descriptor.yaml\n```", "```java\nkafka.kafka.strimzi.io/my-kafka created\n```", "```java\noc get pods \n```", "```java\nNAME                                                READY   STATUS    RESTARTS   AGE\nmy-kafka-entity-operator-58d546cf6c-dw85n           3/3     Running   0          5m50s\nmy-kafka-kafka-0                                    2/2     Running   1          6m27s\nmy-kafka-kafka-1                                    2/2     Running   1          6m27s\nmy-kafka-kafka-2                                    2/2     Running   0          6m27s\nmy-kafka-zookeeper-0                                2/2     Running   0          7m5s\nmy-kafka-zookeeper-1                                2/2     Running   0          7m5s\nmy-kafka-zookeeper-2                                2/2     Running   0          7m5s\nstrimzi-cluster-operator-v0.14.0-59744f8569-d7j44   1/1     Running   0          7m47s\n```", "```java\napiVersion: kafka.strimzi.io/v1beta1\n kind: Kafka\n metadata:\n   name: my-kafka\n```", "```java\noc create -f strimzi/kafka-topic-queue-descriptor.yaml\n```", "```java\nkafkatopic.kafka.strimzi.io/stocks created\n```", "```java\noc rsh my-kafka-kafka-0\n```", "```java\nsh-4.2$ ./bin/kafka-topics.sh --list --zookeeper localhost:2181\n```", "```java\nstocks\n```", "```java\noc get services -o=name\n```", "```java\nservice/my-kafka-kafka-bootstrap\nservice/my-kafka-kafka-brokers\nservice/my-kafka-zookeeper-client\nservice/my-kafka-zookeeper-nodes\n```", "```java\nmp.messaging.outgoing.stock-quote.connector=smallrye-kafka\nmp.messaging.outgoing.stock-quote.topic=stocks\nmp.messaging.outgoing.stock-quote.value.serializer=org.apache.kafka.common.serialization.StringSerializer\nmp.messaging.outgoing.stock-quote.bootstrap.servers=my-kafka-kafka-bootstrap:9092\n\nmp.messaging.incoming.stocks.connector=smallrye-kafka\nmp.messaging.incoming.stocks.topic=stocks\nmp.messaging.incoming.stocks.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer\nmp.messaging.incoming.stocks.bootstrap.servers=my-kafka-kafka-bootstrap:9092\n```", "```java\n@RegisterForReflection\npublic class Quote   { . . . }\n```", "```java\n#Build the native application\nmvn clean package -Pnative -Dnative-image.docker-build=true\n\n#Create a new build for it \noc new-build --binary --name=quarkus-kafka -l app=quarkus-kafka\n\n#Patch the Docker.native file \noc patch bc/quarkus-kafka -p \"{\\\"spec\\\":{\\\"strategy\\\":{\\\"dockerStrategy\\\":{\\\"dockerfilePath\\\":\\\"src/main/docker/Dockerfile.native\\\"}}}}\"\n\n#Deploy the application in the build\noc start-build quarkus-kafka --from-dir=. --follow\n\n# To instantiate the image as new app\noc new-app --image-stream=quarkus-kafka:latest\n\n# To create the route\noc expose service quarkus-kafka\n```", "```java\noc get pods\n```", "```java\nNAME                 READY   STATUS      RESTARTS    AGE\nkafka-demo-1-deploy   0/1     Completed   0          30s\nkafka-demo-1-p9qdr    1/1     Running     0          36s\n```", "```java\noc get routes\n```", "```java\nNAME            HOST/PORT                                                 PATH   SERVICES        PORT       TERMINATION   WILDCARD\nquarkus-kafka   quarkus-kafka-kafka-demo.apps.fmarchio-qe.qe.rh-ocs.com          quarkus-kafka   8080-tcp                 None\n```", "```java\ndocker-compose up\n```", "```java\nartemis_1  | 2019-10-26 17:20:47,584 INFO  [org.apache.activemq.artemis] AMQ241001: HTTP Server started at http://0.0.0.0:8161\nartemis_1  | 2019-10-26 17:20:47,584 INFO  [org.apache.activemq.artemis] AMQ241002: Artemis Jolokia REST API available at http://0.0.0.0:8161/console/jolokia\nartemis_1  | 2019-10-26 17:20:47,584 INFO  [org.apache.activemq.artemis] AMQ241004: Artemis Console available at http://0.0.0.0:8161/console\n```", "```java\ndocker ps --format '{{.Names}}'\n```", "```java\namqp_artemis_1\n```", "```java\n<dependency>\n      <groupId>io.quarkus</groupId>\n      <artifactId>quarkus-smallrye-reactive-messaging-amqp</artifactId>\n</dependency>\n```", "```java\namqp-username=quarkus\namqp-password=quarkus\n```", "```java\n mp.messaging.outgoing.stock-quote.connector=smallrye-amqp\n mp.messaging.outgoing.stock-quote.address=stocks\n mp.messaging.outgoing.stock-quote.durable=true\n```", "```java\n mp.messaging.incoming.stocks.connector=smallrye-amqp\n mp.messaging.incoming.stocks.durable=true  \n```", "```java\nmvn install quarkus:dev\n```", "```java\ndocker stop $(docker ps -a -q)\n```", "```java\n6a538738088f\nf2d97de3520a\n```", "```java\ndocker ps --format '{{.Names}}'\n```", "```java\noc new-project amq-demo\n```", "```java\nNow using project \"amq-demo\" on server \"https://api.fmarchioni-openshift.rh.com:6443\"\n```", "```java\noc new-app --name=artemis vromero/activemq-artemis:2.9.0-alpine -e ARTEMIS_USERNAME=quarkus -e ARTEMIS_PASSWORD=quarkus -e RESTORE_CONFIGURATION=true\n```", "```java\n--> Found container image 2fe0af6 (10 days old) from Docker Hub for \"vromero/activemq-artemis:2.9.0-alpine\"\n\n* An image stream tag will be created as \"artemis:2.9.0-alpine\" that will track this image\n* This image will be deployed in deployment config \"artemis\"\n* Ports 1883/tcp, 5445/tcp, 5672/tcp, 61613/tcp, 61616/tcp, 8161/tcp, 9404/tcp will be load balanced by service \"artemis\"\n* Other containers can access this service through the hostname \"artemis\"\n* This image declares volumes and will default to use non-persistent, host-local storage.\nYou can add persistent volumes later by running 'oc set volume dc/artemis --add ...'\n--> Creating resources ...\n imagestream.image.openshift.io \"artemis\" created\n deploymentconfig.apps.openshift.io \"artemis\" created\n service \"artemis\" created\n--> Succes\n```", "```java\noc get pods\n```", "```java\nNAME               READY   STATUS      RESTARTS   AGE\nartemis-1-deploy   0/1     Completed   0          80s\nartemis-1-p9qdr    1/1     Running     0          76s\n```", "```java\noc get services -o name\n```", "```java\nservice/artemis\n```", "```java\namqp-username=quarkus\namqp-password=quarkus\n\n# Configure the AMQP connector to write to the `stocks`  address\nmp.messaging.outgoing.stock-quote.connector=smallrye-amqp\nmp.messaging.outgoing.stock-quote.address=stocks\nmp.messaging.outgoing.stock-quote.durable=true\nmp.messaging.outgoing.stock-quote.host=artemis\nmp.messaging.outgoing.stock-quote.port=5672\n\n# Configure the AMQP connector to read from the `stocks` queue\nmp.messaging.incoming.stocks.connector=smallrye-amqp\nmp.messaging.incoming.stocks.durable=true\nmp.messaging.incoming.stocks.host=artemis\nmp.messaging.incoming.stocks.port=5672\n```", "```java\n#Build native image of the project\nmvn clean package -Pnative -Dnative-image.docker-build=true\n\n# Create a new binary build\noc new-build --binary --name=quarkus-amq -l app=quarkus-amq\n\n# Patch the native file \noc patch bc/quarkus-amq -p \"{\\\"spec\\\":{\\\"strategy\\\":{\\\"dockerStrategy\\\":{\\\"dockerfilePath\\\":\\\"src/main/docker/Dockerfile.native\\\"}}}}\"\n\n# Add project to the build\noc start-build quarkus-amq --from-dir=. --follow\n\n# To instantiate the image\noc new-app --image-stream=quarkus-amq:latest\n\n# To create the route\noc expose service quarkus-amq\n```", "```java\noc get pods\n```", "```java\n NAME                   READY   STATUS      RESTARTS   AGE\n artemis-1-deploy       0/1     Completed   0          9m9s\n artemis-1-p9qdr        1/1     Running     0          9m5s\n quarkus-amq-1-deploy   0/1     Completed   0          14s\n quarkus-amq-1-zbvrl    1/1     Running     0          10s\n```"]