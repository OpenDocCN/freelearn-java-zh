- en: Chapter 2. Building OpenJDK 6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Preparing CA certificates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building OpenJDK 6 on Ubuntu Linux 12.04 LTS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the minimum build environment for the most compatible Linux builds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Cygwin for Windows builds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building 32-bit FreeType libraries for OpenJDK 6 on Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building 64-bit FreeType libraries for OpenJDK 6 on Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building 32-bit OpenJDK 6 on Windows 7 SP1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building 64-bit OpenJDK 6 on Windows 7 x64 SP1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenJDK 6 is a free and open source implementation of the Java Platform, Standard
    Edition Version 6\. Currently, this project is actively maintained by the community
    with the leading role held by Red Hat, Inc.
  prefs: []
  type: TYPE_NORMAL
- en: Among all Java Platform versions, Java 6 had the longest lifetime. Its Reference
    Implementation Sun Java 6 was released in December 2006, and OpenJDK 7, the Reference
    Implementation of the next version of the Java Platform, wasn't out until July
    2011\. During these 5 years, a lot of applications were built on this platform
    version.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, during these years the authors of Reference Implementation, Sun Microsystems,
    were acquired by the Oracle Corporation, and so the product was renamed Oracle
    Java. In February 2013, Oracle ended public support for Oracle Java 6, but it
    didn''t mean the end of Java 6: Red Hat, Inc. took the leading role in OpenJDK
    6 and now it continues to release new versions on a regular basis.'
  prefs: []
  type: TYPE_NORMAL
- en: The OpenJDK 6 codebase differs greatly from both Oracle and Sun Java 6 and OpenJDK
    7 codebases. It started as a fork of OpenJDK 7 build 20, and the first version
    that passed the Java Compatibility Kit test suite was released before the general
    availability of OpenJDK 7\. The versioning scheme differs from the versioning
    of Oracle Java 6\. Each release doesn't have an update number and only has a build
    number, such as b01 and b02\. At the time of writing this book, the release from
    January 2014 is Version b30.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see the family tree of OpenJDK 6 in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction](img/8405_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Diagram reference: [https://blogs.oracle.com/darcy/entry/openjdk_6_genealogy](https://blogs.oracle.com/darcy/entry/openjdk_6_genealogy)'
  prefs: []
  type: TYPE_NORMAL
- en: OpenJDK 6 is supported on Linux, Windows, and Solaris operating systems. Only
    Windows and Linux versions will be discussed further. For both Linux and Windows
    operating systems, x86 and x86_64 architectures are supported. To conform with
    the OpenJDK terminology, the **i586** term will be used for x86 architecture and
    **amd64** will be used for the x86_64 one. OpenJDK 6 does not support cross compilation,
    so the i586 operating system must be used to build the i586 version, and the same
    is true for amd64\. The build process for both architectures is almost the same
    for the Linux version, but differs a lot for the Windows one.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing CA certificates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Public-key cryptography** is used widely on the Internet. When the web browser
    opens a secured website, it checks the server-side certificate against the website
    domain name. To perform such checks, all web browsers have a list of **Certificate
    Authority** (**CA**) certificates that may be used to sign server-side certificates
    of websites. Such checks may be disabled but they are a necessary part of secure
    web browsing, client banking, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: When website access is used by a Java program (for example, to download a file
    from a secure site), programs such as the browser in the preceding example should
    check the site certificate. Such a check is usually performed by the underlying
    SSL API implementation, and with the browser, the list of CA certificates must
    be available to the OpenJDK runtime.
  prefs: []
  type: TYPE_NORMAL
- en: Such a list is stored in the `openjdk_directory/jre/security/cacerts` file in
    the **Java KeyStore** (**JKS**) format. In official OpenJDK 6 tarballs, the `cacerts`
    file contains no certificates. If runtime with such empty file is used to access
    a secured website, an obscure exception will be thrown.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet will cause the exception with the root cause:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To prevent such an exception, a proper `cacerts` file should be prepared. It
    may be used during the OpenJDK build or added to the `jre/security` directory
    later. The list of CA certificates should be obtained and converted to the JKS
    format. To download and convert the CA list, we will need a recent version of
    the Ubuntu (or similar Linux-based) operating system with `cURL` and `keytool`
    utilities installed. You will also need `cat`, `awk`, and `csplit` standard utilities;
    these should be already installed as part of the `coreutils` package.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps will help us to prepare CA certificates:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the `cURL` utility:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the `keytool` utility as part of the prebuilt OpenJDK package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Download the CA list used by the Firefox web browser, preconverted in the PEM
    format from the `cURL` library website into the `cacert.pem` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Split the `cacert.pem` file into multiple files with the `cert_` prefix. Each
    file will contain a single CA certificate:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JKS keystore and load all CA certificates there using `keytool`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check the `cacerts` file''s contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now the `cacerts` file is ready to use.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A list of CA certificates used by the Firefox web browser is freely available
    as part of the open source security library from Mozilla called NSS. This list
    is available in text format at [http://mxr.mozilla.org/mozilla/source/security/nss/lib/ckfw/builtins/certdata.txt](http://mxr.mozilla.org/mozilla/source/security/nss/lib/ckfw/builtins/certdata.txt).
    We have used the same file but preconverted it in to PEM format, which is available
    at the cURL website.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `keytool` utility understands certificates in the PEM format, but it can
    only load certificates one-by-one, so the big PEM file is split beforehand. Also,
    the `keytool` utility has strict requirements from the PEM files: no text content
    is allowed before `/-----BEGIN CERTIFICATE-----/` and after `/-----END CERTIFICATE-----/`
    strings. The `awk` utility is used to strip unneeded prefixes and postfixes.'
  prefs: []
  type: TYPE_NORMAL
- en: Then the `csplit` utility is used to split the file using `/-----BEGIN CERTIFICATE-----/`
    separators.
  prefs: []
  type: TYPE_NORMAL
- en: Next, the split files are loaded into the keystore one by one. The keystore
    is created on the first certificate load.
  prefs: []
  type: TYPE_NORMAL
- en: The `changeit` password is used for this keystore, which may be quite an unsecure
    choice for the password. However, this does not matter for the `cacerts` file
    because the CA certificates contain only public keys and need not be hidden behind
    the password.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most of this recipe is not specific to the Ubuntu operating system; any Unix-like
    environment (for example, Cygwin on Windows) would suffice.
  prefs: []
  type: TYPE_NORMAL
- en: Bash scripts in this recipe can be replaced by any other scripting language
    such as Python or PowerShell.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of the CA list from Firefox, any other set of CA certificates may be
    used. Some CA certificates may be removed, for example a particular CA certificate
    not trusted by the user, or some additional CA certificates may be added, for
    example inner corporate CA certificates to access a company's intranet resources.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The source of the script used in this recipe is the `obuildfactory` project
    on GitHub at [https://github.com/hgomez/obuildfactory/blob/2075649116e32a5f0bbf8fc7b2791769387eda92/openjdk7/macosx/build.sh#L54](https://github.com/hgomez/obuildfactory/blob/2075649116e32a5f0bbf8fc7b2791769387eda92/openjdk7/macosx/build.sh#L54)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The cURL utility manual at [http://curl.haxx.se/docs/manpage.html](http://curl.haxx.se/docs/manpage.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The keytool utility manual at [http://docs.oracle.com/javase/6/docs/technotes/tools/windows/key](http://docs.oracle.com/javase/6/docs/technotes/tools/windows/key)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building OpenJDK 6 on Ubuntu Linux 12.04 LTS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The build process of OpenJDK relies heavily on Unix-like development tools.
    Linux-based operating systems usually have top notch support for such tools, so
    building OpenJDK on Linux can be simpler than on Windows. For major distributions
    such as Fedora or Ubuntu, build toolchain and all dependencies are already included
    in distributions as packages and can be installed easily.
  prefs: []
  type: TYPE_NORMAL
- en: Ubuntu 12.04 LTS was chosen for this book because it is one of the most popular
    Linux distributions. For readers running other operating Ubuntu 12.04, virtual
    images may be found online for the most popular virtualization tools, such as
    Oracle VirtualBox or VMware.
  prefs: []
  type: TYPE_NORMAL
- en: To build binaries for i586 and amd64 architectures, corresponding versions of
    Ubuntu should be used. Build instructions are exactly the same for both architectures,
    so they won't be mentioned further in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will need a clean Ubuntu 12.04 (server or desktop version)
    running.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps will help us to build OpenJDK:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install prepackaged binaries of OpenJDK 6:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install GCC toolchain and build dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Download and decompress official OpenJDK 6 build 30 tarball:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `jdk/make/javax/sound/jsoundalsa/Makefile` file with your favorite
    text editor and change line 68 from `LDFLAGS += -lasound` to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new text file `buildenv.sh` with the following environment settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Import the environment into the current shell session (note a dot and a space
    before it):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the build process from the `openjdk-6-src-b30-21_jan_2014` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Wait for the build to finish, and try to run the newly built binaries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Prepackaged binaries of OpenJDK 6 are required because some of the build steps
    are run using the external Java runtime.
  prefs: []
  type: TYPE_NORMAL
- en: The `build-dep` command is used to install all the dependencies that are required
    to build the specified package. As Ubuntu packaged OpenJDK 6 is quite close to
    the official OpenJDK 6, this command will install almost all of the required dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: The `libmotif-dev` package is the only additional package required. It contains
    the Motif GUI toolkit header files.
  prefs: []
  type: TYPE_NORMAL
- en: The `jdk/make/javax/sound/jsoundalsa/Makefile` file adjustment is required to
    conform with the Ubuntu 12.04 GCC 4.6 toolchain. It is not required for the original
    GCC 4.2 toolchain and may not be required for more recent OpenJDK 6 official sources,
    because this change is going to be included in OpenJDK 6 upstream.
  prefs: []
  type: TYPE_NORMAL
- en: The `tee` command is used to write output to the logfile and the screen simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: After a successful build on the amd64 platform, JDK files will be placed in
    `build/linux-amd64/j2sdk-image` and JRE files will be placed in `build/linux-amd64/j2re-image`.
    On the i586 platform, the `build/linux-i586` path will be used instead.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Javadoc generation takes a lot of time and is the most memory consuming step
    of the build. It may be skipped with an additional environment variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This build has generated a milestone tag and a build number `b00`. The predefined
    build number and milestone may be set using additional environment variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The `cacerts` file may be provided during the build using an additional environment
    variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: For amd64 builds, preinstalled Java provided by the `ALT_BOOTDIR` variable may
    be either the amd64 or i586 build. The i586 binaries consume less memory and may
    be used for amd64 builds on limited hardware.
  prefs: []
  type: TYPE_NORMAL
- en: The build process for OpenJDK 6 is effectively single-threaded; parallel builds
    (using `make -j N`) are not supported for this version.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The previous recipe *Preparing CA certificates*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The official build instructions for OpenJDK 6 at [http://hg.openjdk.java.net/jdk6/jdk6/raw-file/tip/README-builds.html](http://hg.openjdk.java.net/jdk6/jdk6/raw-file/tip/README-builds.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The source bundles of the current OpenJDK 6 version from Red Hat, Inc. at [https://java.net/projects/openjdk6/downloads](https://java.net/projects/openjdk6/downloads)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The source bundles of older versions of OpenJDK 6 from Oracle at [http://download.java.net/openjdk/jdk6/promoted/](http://download.java.net/openjdk/jdk6/promoted/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The mailing list thread about problems with `jsoundalsa` on Ubuntu 12.04 noted
    previously at [http://mail.openjdk.java.net/pipermail/jdk6-dev/2014-January/003222.html](http://mail.openjdk.java.net/pipermail/jdk6-dev/2014-January/003222.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the minimum build environment for the most compatible Linux builds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenJDK 6 on Linux was developed for and most excessively tested with those
    GCC toolchains available at that time. Modern Linux distributions have newer toolchains,
    for example, Ubuntu 12.04 has GCC 4.6\. Newer toolchains may have more advanced
    optimizations and provide slightly faster code, but older ones should be more
    stable for OpenJDK.
  prefs: []
  type: TYPE_NORMAL
- en: 'Oracle published the minimum build environment description for OpenJDK 6\.
    It says:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"Building with the MBE will generate the most compatible bits that install
    on, and run correctly on, the most variations of the same base OS and hardware
    architecture."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: We are going to build OpenJDK 6 on one of the minimum build environment platforms—Debian
    Linux 5.0 Lenny. The build instructions are exactly the same for i586 and amd64
    architectures, so they won't be mentioned further in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: The build steps are similar to the previous recipe so we'll concentrate on different
    steps.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will need Debian Lenny running. Installation images may be
    downloaded from the Debian CDImage archive. Lenny may not be compatible with some
    of the hardware on newer laptops, but should run fine with virtualization tools
    such as Oracle VirtualBox or VMware.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps will help us to set up the minimum build environment:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add archive repositories to the `/etc/apt/sources.list` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install OpenJDK 6 binaries and build dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Download and decompress Apache Ant:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new text file `buildenv.sh` with environment settings, and import
    its content into the current bash shell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Download and decompress the official OpenJDK 6 build 30 tarball:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the build process from the `openjdk-6-src-b30-21_jan_2014` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Wait for the build to finish.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Archive repository setup is required because the official Lenny repositories
    are no longer available.
  prefs: []
  type: TYPE_NORMAL
- en: A newer version of Apache Ant is required because the bundled Version 1.7.0
    in Lenny is too old and OpenJDK 6 requires Ant 1.7.1 or higher.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Other older Linux distributions such as Ubuntu 8.04 or Fedora 9 also may be
    used as the minimum build environment.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Building OpenJDK 6 on Ubuntu Linux 12.04 LTS* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The official build instructions for OpenJDK, 6 with the description of minimum
    build platforms, at [http://hg.openjdk.java.net/jdk6/jdk6/raw-file/tip/README-builds.html#MBE](http://hg.openjdk.java.net/jdk6/jdk6/raw-file/tip/README-builds.html#MBE)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Debian CDImages archive at [http://cdimage.debian.org](http://cdimage.debian.org)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Cygwin for Windows builds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like most of the other cross-platform open source projects, OpenJDK uses Unix-like
    tools for the build process. Tools such as `gmake`, `awk`, and `cpio` are ubiquitous
    for the Unix and Linux world and may be found on almost any Unix-like platform.
    However, these tools are based on Unix process behavior, and that becomes a problem
    when we want to run them on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Cygwin is a set of free and open source tools being developed by Red Had, Inc.
    and provides limited support for the Unix-like environment in Windows. It is required
    to build OpenJDK on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: OpenJDK requires Cygwin i586 for both i586 and amd64 builds. The installation
    procedure is the same for both Windows 7 SP1 i586 and Windows 7 SP1 amd64 so we
    won't mention architecture further in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To install and successfully use Cygwin, we'll need a clean installation of Windows
    7 SP1 without antivirus software running.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps will help us to install Cygwin:'
  prefs: []
  type: TYPE_NORMAL
- en: Download `setup-x86.exe` from the [http://cygwin.com/](http://cygwin.com/) website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the installer and choose [http://mirrors.kernel.org](http://mirrors.kernel.org)
    as a packages' mirror.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Choose the additional packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Perform the installation into the directory with the path in ASCII letters or
    numbers without spaces.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Any antivirus software (or similar software that may scan the memory of other
    applications) is prohibited because it may interfere with Cygwin. Cygwin uses
    complex techniques to simulate the fork functionality of Unix on Windows. These
    techniques may not work with antivirus scanners running.
  prefs: []
  type: TYPE_NORMAL
- en: Only the i586 version on Cygwin is supported to build OpenJDK. The amd64 Cygwin
    may or may not work.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Cygwin community hosts a lot of packages'' mirrors worldwide. We use the
    [https://www.kernel.org/](https://www.kernel.org/) mirror as one that should have
    the most complete set of prebuilt packages:'
  prefs: []
  type: TYPE_NORMAL
- en: The `binutils` package is required for the `ar` utility. This is a special kind
    of archiver that may be used to create and update static libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `m4` package is required to work with classic Unix macro processor scripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `cpio` utility is used as an archiver because it may be much faster than
    the more popular tar utility in some environments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `procps` package is required for the free utility, which is used to get
    information about free and used memory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: OpenJDK 6 can also be built using commercial MKS toolkit. This method provides
    shorter build times, but is not supported for OpenJDK 8 and above.
  prefs: []
  type: TYPE_NORMAL
- en: 'A Cygwin installation may be copied from one Windows box to another without
    installation. This may be useful for builds on clean Windows boxes. Besides the
    usual windows binaries, Cygwin uses special kinds of symlink files, for example,
    `bin/awk` actually points to `bin/gawk.exe`. These symlinks may be crippled if
    loaded into or from version control systems such as Git. This problem may be circumvented
    by replacing symlinks with copies of actual binaries with symlink names: `gawk.exe`
    to `awk.exe` and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The official build instructions for OpenJDK 6 with the list of required Cygwin
    packages at [http://hg.openjdk.java.net/jdk6/jdk6/raw-file/tip/README-builds.html#cygwin](http://hg.openjdk.java.net/jdk6/jdk6/raw-file/tip/README-builds.html#cygwin)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The list of applications that may interfere with Cygwin at [https://cygwin.com/faq/faq.html#faq.using.bloda](https://cygwin.com/faq/faq.html#faq.using.bloda)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Cygwin user's guide at [https://www.cygwin.com/cygwin-ug-net/cygwin-ug-net.html](https://www.cygwin.com/cygwin-ug-net/cygwin-ug-net.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building 32-bit FreeType libraries for OpenJDK 6 on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The majority of fonts used in modern software are encoded in vector format for
    proper scaling support. There are multiple standards for vector fonts, for example,
    Metafont from Professor Donald E. Knuth, Type1 from Adobe, TrueType from Apple
    and Microsoft, and OpenType from Adobe and Microsoft.
  prefs: []
  type: TYPE_NORMAL
- en: Rasterization of vector fonts is a remarkably complex task and most desktop
    software (such as web browsers or text processors) use third-party libraries to
    work with fonts.
  prefs: []
  type: TYPE_NORMAL
- en: Sun Microsystems licensed a third-party closed-source font library for use in
    Sun Java implementations. Sources of this library could not be released to public
    along with the initial release of OpenJDK. The Font Scaler Replacement Project
    was launched in the early days of OpenJDK to adopt an open source font library
    instead.
  prefs: []
  type: TYPE_NORMAL
- en: FreeType is a free and open source (under permissive license) font rasterization
    library. It is used widely in open source desktop software. FreeType was chosen
    by the OpenJDK team as a replacement for the closed-source font library and is
    now used by OpenJDK on all supported platforms. Prebuilt static and dynamic FreeType
    libraries are required for OpenJDK builds on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe we should have Windows 7 SP1 i586 running.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps will help us in building FreeType:'
  prefs: []
  type: TYPE_NORMAL
- en: Install Visual Studio.NET 2003 to the default installation path. Only Prerequisites
    and Visual C++ components are required.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the FreeType 2.5.2 source tarball from [http://freetype.org/](http://freetype.org/)
    and decompress it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the file `include\config\ftoption.h` and uncomment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change lines `/* #define FT_EXPORT(x) extern x */` and `/* #define FT_EXPORT_DEF(x)
    x */` to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the project file `builds\windows\visualc\freetype.dsw` in Visual Studio.NET
    2003.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change `Solution Configuration` to `Release Multithreaded` and build the solution.
    The `freetype252MT.lib` file will be placed into the `objs` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the file `freetype.lib` and save it for OpenJDK builds.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Project Properties** change **Configuration Type** to **Dynamic Library
    (.dll)** and build the solution. The `freetype.dll` and `freetype.exp` files will
    be placed into the `objs\release_mt` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The directory with three result files will be denoted by the `ALT_FREETYPE_LIB_PATH`
    environment variable during OpenJDK builds.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `FT_CONFIG_OPTION_SUBPIXEL_RENDERING` macro enables subpixel rendering functionality
    in FreeType implementation.
  prefs: []
  type: TYPE_NORMAL
- en: The `FT_EXPORT` and `FT_EXPORT_DEF` macros should be adjusted with the calling
    conventions for the current platform. We changed them to use Windows-specific
    calling conventions.
  prefs: []
  type: TYPE_NORMAL
- en: FreeType has no predefined project file for Visual Studio.NET 2003\. Instead,
    we are using the project file created for Visual Studio 6.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Building 64-bit FreeType libraries for OpenJDK 6 on Windows* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The FreeType official website [http://freetype.org/](http://freetype.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Professor Donald E. Knuth's interview covering Metafont and TrueType at [http://www.advogato.org/article/28.html](http://www.advogato.org/article/28.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The *OpenJDK: Font Scaler Replacement Project* page at [http://openjdk.java.net/projects/font-sc](http://openjdk.java.net/projects/font-sc)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building 64-bit FreeType libraries for OpenJDK 6 on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The FreeType build for Windows amd64 is similar to the i586 build but has a
    much more complex configuration. Contrary to the i586 version, the amd64 library
    can be built with freely available tools using Microsoft Visual Studio 2005 Express
    Edition with the Windows Server 2003 SP1 Platform SDK.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we need to have Windows 7 SP1 amd64 running.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps will help us in building FreeType:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the Visual Studio 2005 Express Edition from [http://www.microsoft.com/en-in/default.aspx](http://www.microsoft.com/en-in/default.aspx)
    and install it to the default location. The messages about Windows 7 compatibility
    problems may be ignored.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install `VS80sp1-KB926748-X86-INTL` and `VS80sp1-KB932232-X86-ENU` Visual Studio
    updates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download Windows Server 2003 SP1 Platform SDK from [http://www.microsoft.com/en-in/default.aspx](http://www.microsoft.com/en-in/default.aspx)
    and install it using the default installation path. AMD-64 components are required
    for the build.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Perform steps 2, 3, and 4 from the previous recipe to download and adjust FreeType
    sources.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Start** menu go to **Microsoft Platform SDK for Windows Server 2003
    SP1** | **Open Build Environment Window** | **Windows Server 2003 64-bit Build
    Environment** | **Set Win Svr 2003 x64 Build Env (Retail)**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the `cmd.exe` window that appears, run (the administrator permissions
    warning may be ignored):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the main menu navigate to **Tools** | **Options** | **Projects and Solutions**
    | **VC++ Directories** and adjust the following directories:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the FreeType solution at this path `freetype-2.5.2\builds\windows\vc2005\freetype.sln`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the menu, navigate to **Project** | **Properties** | **Configuration Properties**
    | **Configuration Manager** and choose **<New ...>** under **Active solution platform**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `new platform x64` and choose **Win32** from **Copy settings from**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Configuration Manager** form, navigate to **Active solution configuration**
    | **LIB Release Multithreaded** and then go to **Active solution platform** |
    **x64**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the same form, in the grid for the FreeType project, navigate to **Configuration**
    | **Release multithreaded** and leave the **Win32** value under the **Platform**
    menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Configuration Properties** menu, check whether **Configuration Type**
    is set to **Static Library (.lib)**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Configuration Properties** | **C/C++** | **Preprocessor** and
    change the **WIN32** value in the **Processor Definitions** string to **WIN64**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run **Build Solution** under **Build**, the `freetype252MT.lib` library will
    be placed into the `freetype-2.5.2\objs\win32\vc2005` directory. Rename it to
    `freetype.lib`, and save it for later.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Configuration Properties** menu, change **Configuration Type** to **Dynamic
    Library (.dll)** and choose **Apply**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Configuration Properties** | **Linker** | **Input** and put `bufferoverflowU.lib`
    into the **Additional Dependencies** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Configuration Properties** | **Linker** | **Command Line** and
    put `/MACHINE:AMD64` into the **Additional options** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clean and build the solution. Target libraries `freetype.dll` and `freetype.exp`
    will be placed into the `freetype-2.5.2\objs\release_mt` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The directory with three result files will be denoted by the `ALT_FREETYPE_LIB_PATH`
    environment variable during OpenJDK builds.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Visual Studio 2005 Express does not support amd64 architecture, so the setup
    to use amd64 compilers from Windows SDK takes most of this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Building 32-bit FreeType libraries for OpenJDK 6 on Windows* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The FreeType official website [http://freetype.org/](http://freetype.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building 32-bit OpenJDK 6 on Windows 7 SP1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Windows builds are much more cumbersome than Linux ones. Despite that, GCC toolchain
    is available on Windows. Through the MinGW project, OpenJDK uses official Microsoft
    compilers from Visual Studio and Windows SDK. This brings a lot of complications
    because the Microsoft toolchain doesn't work well with the Unix-like environment
    provided by Cygwin.
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio.NET 2003 is required to build i586 binaries. OpenJDK 6 on Windows
    i586 is the only version in this book that cannot be built using freely available
    tools. VS 2003 was chosen for OpenJDK 6 because it supports Windows 2000, which
    was critical at the time of Sun Java 6's development.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we should have Windows 7 SP1 i586 running with no antivirus
    software installed. Antivirus software is not allowed because it may interfere
    with the Cygwin runtime.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps will help us to build OpenJDK 6:'
  prefs: []
  type: TYPE_NORMAL
- en: Install Visual Studio.NET 2003 to the default installation path. Only the prerequisites
    and the Visual C++.NET component are required.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install or copy the preinstalled version of Cygwin to `c:\cygwin`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Download and install Microsoft DirectX 9.0 SDK (Summer 2004) to the default
    installation path. Note that this distribution is not available anymore from the
    [http://www.microsoft.com/en-in/default.aspx](http://www.microsoft.com/en-in/default.aspx)
    website. We can download it from some other places online and check the file details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Download Platform Software Development Kit Redistributable: Microsoft Layer
    for Unicode on Windows 95, 98, and Me Systems, 1.1.3790.0 from [http://www.microsoft.com/en-in/default.aspx](http://www.microsoft.com/en-in/default.aspx)
    and install it into the `c:\unicows` directory.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download `unicows.lib` from the `openjdk-unofficial-builds` GitHub project and
    put this into the `c:\unicows` directory too.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the Apache Ant version 1.8.4 ZIP distribution from the [http://apache.org/](http://apache.org/)
    website and decompress it into the `c:\ant` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download GNU make utility binary from the [http://www.cmake.org/](http://www.cmake.org/)
    website using [http://www.cmake.org/files/cygwin/make.exe-cygwin1.7](http://www.cmake.org/files/cygwin/make.exe-cygwin1.7),
    rename it to `make.exe`, and put it into the `c:\make` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the `c:\path_prepend` directory and copy the `find.exe` and `sort.exe`
    files from the Cygwin installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the prebuilt FreeType libraries from the `openjdk-unofficial-builds`
    GitHub project (directory `6_32`) and put the binaries into the `c:\freetype`
    directory and header files into the `c:\freetype\include` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install OpenJDK 6 binaries or Oracle Java 6 into `c:\jdk6`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Download the official OpenJDK 6 build 30 sources tarball from the [https://java.net/projects/openjdk6/downloads](https://java.net/projects/openjdk6/downloads)
    web page and decompress it into the `c:\sources` directory (warning: the tarball
    does not include the `root` directory)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `sa.make` file at `hotspot\make\windows\makefiles`, change line 100
    from `SA_CFLAGS = $(SA_CFLAGS) /ZI` to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `build.bat` batch file and write the following environment variables
    settings there:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run `build.bat` from Windows Explorer. The `cmd.exe` window should appear with
    bash launched.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the bash Command Prompt run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Launch another Cygwin console and run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Wait for the build to finish.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Cygwin installation is covered in the *Installing Cygwin for Windows builds*
    recipe of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Directories in the root of disk `C` are used here for brevity. Generally, arbitrary
    paths consisting of ASCII letters or numbers and without spaces can be used.
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio 2003 is not officially supported on Windows 7\. It warns about
    possible compatibility problems and may have glitches in the GUI interface, but
    its command-line tools work fine and the GUI interface is not needed for the OpenJDK
    build.
  prefs: []
  type: TYPE_NORMAL
- en: The newer version of DirectX SDK may also be used.
  prefs: []
  type: TYPE_NORMAL
- en: Different GNU make versions may have different problems on Windows. This particular
    version from the `cmake` project was tested on different Windows versions and
    works fine.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe uses prebuilt FreeType 2.4.10 libraries from the `openjdk-unofficial-builds`
    GitHub project. FreeType may be built from sources using Visual Studio 2003\.
    Please see the *Building 32-bit FreeType libraries for OpenJDK 6 on Windows* recipe
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: A patch for HotSpot serviceability `Makefile` file is required to circumvent
    the VS2003 bug discovered after one of the recent security updates. This change
    is going to be upstreamed into official OpenJDK 6 sources and may not be required
    for more recent source tarballs.
  prefs: []
  type: TYPE_NORMAL
- en: In environment settings, additional attention should be paid to the order of
    the contents of the `PATH` variable order. The `sort` and `find` Cygwin utilities
    go at the start of the `PATH` variable so they are not overshadowed by Windows
    utilities with the same name but a different functionality. The `make` utility
    is going goes before Cygwin to not be so they are not overshadowed by another
    version of make that may be included in the Cygwin installation.
  prefs: []
  type: TYPE_NORMAL
- en: The `chmod 777` command is required to fix Cygwin file permissions that may
    cause errors in later stages of the build.
  prefs: []
  type: TYPE_NORMAL
- en: The `make` output will be redirected to the `make.log` file. The `2>&1` statement
    ensures that both `stdout` and `stderr` will be redirected.
  prefs: []
  type: TYPE_NORMAL
- en: The `tail -f` command allows us to watch the contents of the `make.log` file
    as they are written during the build process.
  prefs: []
  type: TYPE_NORMAL
- en: The `pause > nul` command is added at the end of the batch file to prevent the
    `cmd.exe` window from disappearing in the case of runtime errors.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To build the most compatible binaries, the same recipe should be used, but the
    Windows 2000 operating system should be used instead of Windows 7.
  prefs: []
  type: TYPE_NORMAL
- en: In Windows 2000, the `chmod 777` command is not required.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Installing Cygwin for Windows builds* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Building OpenJDK 6 on Ubuntu Linux 12.04 LTS* recipe, for information about
    build tuning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Building 32-bit FreeType libraries for OpenJDK 6 on Windows* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Preparing CA certificates* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The official build instructions for OpenJDK 6 at [http://hg.openjdk.java.net/jdk6/jdk6/raw-file/tip/README-builds.html](http://hg.openjdk.java.net/jdk6/jdk6/raw-file/tip/README-builds.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The mailing list thread about the Serviceability HotSpot patch at [http://mail.openjdk.java.net/pipermail/jdk6-dev/2013-December/003163.html](http://mail.openjdk.java.net/pipermail/jdk6-dev/2013-December/003163.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building 64-bit OpenJDK 6 on Windows 7 x64 SP1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The amd64 build on Windows 7 is similar to the i586 build, but has additional
    complications.
  prefs: []
  type: TYPE_NORMAL
- en: Cygwin (at least the more common i586 version) works much worse on amd64 Windows.
    Due to a much bigger address space size, Cygwin fork techniques work much slower
    and are less reliable.
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio.NET 2003 does not support the amd64 architecture so the Windows
    Server 2003 SP1 Platform SDK is used instead.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we should have Windows 7 SP1 i586 running with no antivirus
    software installed. Antivirus software is not allowed because it may interfere
    with the Cygwin runtime.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps will help us to build OpenJDK:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the Windows Server 2003 SP1 Platform SDK from the Microsoft website
    and install it using the default installation path. AMD-64 and MDAC (Microsoft
    Data Access Services) components are required for the build.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Perform steps 2 to 11 from the *Building 32-bit OpenJDK 6 on Windows 7 SP1*
    recipe (for FreeType libraries use `6_64` directory).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Step 12 from the previous recipe is not required for the amd64 build and may
    be skipped.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `build.bat` batch file and write the following environment variables
    settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Follow steps 14 to 17 from the previous recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most of the notes from the i586 build are also valid for the amd64 build except
    those specific to VS2003.
  prefs: []
  type: TYPE_NORMAL
- en: Patch to serviceability `Makefile` is not required because that part of `Makefile`
    is specific to i586 builds.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To build the most compatible binaries, the same recipe should be used, but the
    Windows 2003 Server amd64 operating system should be used instead of Windows 7.
  prefs: []
  type: TYPE_NORMAL
- en: In Windows 2003, the `chmod 777` command is not required.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Installing Cygwin for Windows builds* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Building OpenJDK 6 on Ubuntu Linux 12.04 LTS* recipe, for information about
    build tuning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Building 64-bit FreeType libraries for OpenJDK 6 on Windows* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Preparing* *CA certificates* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The official build instructions for OpenJDK 6 at [http://hg.openjdk.java.net/jdk6/jdk6/raw-file/tip/README-builds.html](http://hg.openjdk.java.net/jdk6/jdk6/raw-file/tip/README-builds.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
