- en: Chapter 10. Contributing to OpenJDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Becoming a contributor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating a patch with webrev
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backporting OpenJDK v9 patches to OpenJDK v8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding OpenJDK groups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding OpenJDK projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Suggesting new JSRs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Suggesting new JEPs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The OpenJDK community consists of lots of people who have different roles and
    responsibilities in a project. Such a structure evolved as a consequence of the
    scale of the project and its significance, otherwise it wouldn''t be controllable
    and you wouldn''t be able to progress further. The way in which OpenJDK is managed
    and structured can be described in two hierarchies: one is functional and the
    other is governance. These two hierarchies intercept, but not much. The only role
    which is present in both is **JDK Lead**, which is an OpenJDK member appointed
    by Oracle to manage the Java release project.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Functional hierarchy controls the change and development process. It defines
    the relationship between all the community members who are involved in proposing
    and making changes in OpenJDK. On the whole, it can be represented by the structure
    shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction](img/8405_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A participant can be anyone who has participated in an OpenJDK project and this
    can be any type of participation. For example, it can be a discussion on the mailing
    list or creating a patch to fix a bug. Any participant can sign the **Oracle Contributor
    Agreement** (**OCA**) and become a contributor.
  prefs: []
  type: TYPE_NORMAL
- en: A contributor can work on any of the OpenJDK projects and be the **project author**
    if the project lead approves it. The project author can't push code into the repository
    and has to ask one of the project committers to do that. After an author gains
    the trust of the committers, he or she can be elected to become one of them. All
    code changes have to be approved before they go into the repository. This task
    is done by the project reviewers who are experienced committers and have a lot
    of authority. Some projects might not have the project reviewer's role.
  prefs: []
  type: TYPE_NORMAL
- en: Also, a contributor can become an OpenJDK member and participate in the OpenJDK
    groups. To become an OpenJDK member, the contributor needs to demonstrate a history
    of significant contribution and should be elected by the votes of the existing
    OpenJDK members. Being a member allows one to become an OpenJDK group member by
    joining one or more groups. Group members are nominated by existing group members
    so, to join a group, a member must have some history of contribution to that group.
    It is worth adding that the order of membership can be reversed—a contributor
    can be elected to become a group member and this can then become the route to
    be an OpenJDK member.
  prefs: []
  type: TYPE_NORMAL
- en: Each OpenJDK group is responsible for the area of JDK. For example, there is
    a *Swing Group*, *Security Group*, and so on. Each group has a group lead and
    group members. A group can sponsor projects, for example, as already mentioned,
    the Swing Group is a sponsor for projects such as *OpenJFX* and *Swing Application
    Framework*. As we mentioned earlier, any contributor can work on a sponsored project.
    The contributor is not required to be an Open JDK member or a group member to
    do this.
  prefs: []
  type: TYPE_NORMAL
- en: 'The governance structure is represented by the *Governing Board*, which consists
    of several roles, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Chair**: This role is appointed by Oracle. This person is the lead of the
    Governing Board.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Vice Chair**: This role is appointed by IBM'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OpenJDK Lead**: This role is appointed by Oracle. This person also leads
    the Java Release project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Two At-Large members**: These two members are chosen by a vote of the OpenJDK
    members.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The governing board's responsibility is to define new processes or refine existing
    ones, and update and support the Bylaws. The Governing Board is empowered to resolve
    procedural disputes within community, but it is not an executive body. The latter
    means that it has no direct authority over the technical or release decisions.
    Interestingly, the Governing Board and also the OpenJDK group can also sponsor
    projects.
  prefs: []
  type: TYPE_NORMAL
- en: For those who are interested in the details of the hierarchy of OpenJDK roles,
    groups, projects, and their relationships, it is worth taking a look at the *bylaws*
    ([http://openjdk.java.net/bylaws](http://openjdk.java.net/bylaws)), which cover
    all these things in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Becoming a contributor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Becoming a participant is very easy. The only thing that is required is to be
    interested in OpenJDK and, as a minimum, participate in discussions on mailing
    lists. Participants can ask OpenJDK members to add code into the code base, but
    they can't do it themselves. Contributors, however, have a more involved role,
    These people can submit patches and have more influence on the project.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get ready to follow this recipe is easy; all that is required is a desire
    to become a participant. It is important to understand that it is not a quick
    process and can easily take several weeks or even months. So, be patient and do
    not give up.
  prefs: []
  type: TYPE_NORMAL
- en: As preparing a patch requires running the Kron shell script, a machine needs
    to have that shell installed. If a Windows machine is used, then Cygwin is required
    on the system.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The next steps will describe how to become a participant of OpenJDK. Keep in
    mind that this is not a deterministic process and, in practice, it might either
    need a few additional steps or some of the following steps might not be required:'
  prefs: []
  type: TYPE_NORMAL
- en: The first step is to become visible to other members of the OpenJDK community.
    This can be achieved by participating in the discussions on mailing lists, and
    it would be good to suggest a couple of small fixes and ask one of the OpenJDK
    members or contributors to submit them. This will show that you are interested
    in OpenJDK and how to contribute to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, create an account in [Java.net](http://Java.net) by filling the form at
    [https://java.net/people/new](https://java.net/people/new). This account is needed
    for [Java.net](http://Java.net), OpenJDK bug tracking, and the source repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next step is to sign the **Oracle Contribution Agreement** (**OCA**). It
    needs to be downloaded from [http://www.oracle.com/technetwork/oca-405177.pdf](http://www.oracle.com/technetwork/oca-405177.pdf).
    Read the agreement carefully and understand it, before signing it. Luckily, it
    is just one page long. Then, sign it and e-mail the scan to `<[oracle-ca_us@oracle.com](mailto:oracle-ca_us@oracle.com)>`.
    It might take a couple of weeks to receive a response. So, if the stipulated time
    has passed and you still haven't heard back, then it is worth sending a reminder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you get back the OCA response from Oracle, it's time to find out what your
    contribution is going to be. Probably, the easiest thing is to find a bug and
    work on a fix for it. Bugs can be found on the OpenJDK JIRA at [https://bugs.openjdk.java.net/](https://bugs.openjdk.java.net/).
    Pick something that is not assigned to anyone. Be sure to choose something that
    will not require interface changes or any significant development.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Before doing the actual work, it would be a good idea to discuss the bug and
    the proposed fix on the mailing list for the appropriate project. It is recommended
    to use the format, `<bugid>: <bug_description>` as the subject, for example, `JDK-8042253:
    StressRedefine tests timeout`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Carry out a fix. It is good idea to do the jtreg regression test for any work
    that was done in the scope of the fix.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generate a patch for review using `webrev:[user@localhost hotspot]$ ksh ../make/scripts/webrev.ksh`.
    Make sure that the generated `webrev.zip` file is available for the relevant community.
    For example, it can be put on a file hosting with public access. Regular contributors
    prefer to use `cr.openjdk.java.net` for this purpose. For more details about webrev,
    see the *Generating a patch with webrev* recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To post a patch, use the format `RFR <bugid>: <bug_description>`, as the subject
    for the mailing list. For example, `RFR JDK-8042253 StressRedefine tests timeout`,
    where **RFR** refers to **Request for Review**. Give the description of the patch
    and provide a link to the `webrev` file generated in the previous step.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A review always means that there will be some cleanup, code changes, more tests,
    and so on. Carry out the updates, update `webrev`, and notify other members that
    changes have been made. Be ready since the process might need several iterations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once everyone agrees that the fix is of a good quality, the sponsor will push
    the fix into the repository. At this stage, you might be asked to produce a changeset.
    Note that this step can take several weeks to execute.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some additional information on the code review process is available at [http://openjdk.java.net/guide/codeReview.html](http://openjdk.java.net/guide/codeReview.html).
    There is also documentation available on the change process as a whole. It is
    worth having a look at it at [http://openjdk.java.net/guide/changePlanning.html](http://openjdk.java.net/guide/changePlanning.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating a patch with webrev
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Doing any update in a software product normally requires some kind of review
    process. The code should not be submitted into a repository unless someone else
    has already looked at it. In OpenJDK, the tool for this purpose is webrev, which
    allows you to create code reviews that can be shared with other members of the
    community.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Webrev is a Korn shell script, which means that Korn shell must be installed
    on the machine before you can use it. On a Linux machine, run `yum install ksh`
    or an equivalent command. On a Windows machine, ensure that `ksh` in included
    in the Cygwin installation.
  prefs: []
  type: TYPE_NORMAL
- en: Apart from the environment set up to create the patch review, some changes must
    be made in the source code as well. As an easy example, we can just modify some
    comments in a file, as discussed next. Open the file, `hotspot/src/os/linux/vm/jvm_linux.cpp`
    and update the header or just add a comment.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As webdev is a shell script, start by launching your shell and follow the given
    steps. It is assumed that the current folder is `jdk` source root and the amended
    file is `hotspot/src/os/linux/vm/jvm_linux.cpp`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, change the current folder to `hostpot`; it''s not strictly required,
    but it will make the webrev script do less work:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the webrev script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As can be seen from the output, it detected that `jvm_linux.cpp` was changed
    and generated review files which were put in the `hotspot/webrev` folder.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, in the `hotspot` folder, locate the `webrev.zip` file and make it available
    to anyone who is interested in the changes that you have just made. This file
    will have the same content as the `webrev` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you have already noticed, webrev is just a shell script and, if you need
    to see how it works, then it should be relatively easy to do so. All it does is
    scan your disk for changes and compare them with the parent Mercurial forest.
    Then, based on the comparison, it generates various reports and a patch file.
    Finally, all the files are packed into a ZIP file, which is easy to share with
    other community members or with anyone who just wants to have a look at the change.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Webrev has some command options which are displayed if you enter a command,
    which it doesn''t understand. For example, try to run this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This will print all the available command-line options and environment variables
    that can affect the execution of the script.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: More information and several examples are available on the [openjdk.java.net](http://openjdk.java.net)
    website at [http://openjdk.java.net/guide/webrevHelp.html](http://openjdk.java.net/guide/webrevHelp.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The overall OpenJDK code review process is described at [http://openjdk.java.net/guide/codeReview.html](http://openjdk.java.net/guide/codeReview.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backporting OpenJDK v9 patches to OpenJDK v8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the scope of one of the initiatives for the improvement of the source code
    structure ([https://bugs.openjdk.java.net/browse/JDK-8051619](https://bugs.openjdk.java.net/browse/JDK-8051619))
    there are some significant changes in the way how the source files are located
    in OpenJDK v9\. It means that if someone is making a patch for OpenJDK v9 and
    wants these changes to be applied to OpenJDK v8, he/she has to follow a special
    procedure. That procedure will do the required transformation in the path of changed
    files.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need a computer which can run bash shell, that is, a Linux or Windows computer
    with Cygwin and the source code of OpenJDK v9 and OpenJDK v8.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Following these steps, a developer can learn how to port changes from OpenJDK
    v9 to OpenJDK v8:'
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a special script that was created to help to port patches from OpenJDK
    v9 to OpenJDK v8\. This script is located in `common/bin/unshuffle_patch.sh`.
    Run this script with the `--help` argument to see its usage:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you can see the help output, it means that the script is available and should
    just work fine.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now. just make the required change in the source tree, commit the code, and
    generate a patch. For our example, we will edit the `Sockets.java` file. Just
    add a new line with a few comments in it as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, get the revision number of the changeset:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, export the changeset that we just created to a patch file in an extended
    GIT format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, run the script to make the patch compatible with the OpenJDK 8 source
    code tree:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, change the current folder to the `jdk` directory in the `jdk8u` source
    root, copy the updated patch to it, and apply it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: And that's it. Now all that is required is to commit the changes and then follow
    the normal process of making the changes in OpenJDK.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get some more information and to be up-to-date with the changes in the utilities,
    it is recommended that you visit its home page at [http://cr.openjdk.java.net/~chegar/docs/portingScript.html](http://cr.openjdk.java.net/~chegar/docs/portingScript.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding OpenJDK groups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenJDK groups look at wide areas of OpenJDK and define what projects are required
    to support these areas. For example, the Compiler Group's sponsored project Coin
    added new language features in JDK7, and the HotSpot Group's sponsored project
    Graal makes VM functionality available via a set of APIs. The groups usually have
    a much longer life than the projects and do not appear and disappear very often.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All that is required is a computer with access to the Internet, a web browser,
    and some patience.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps demonstrate documentation and some examples of groups on
    OpenJDK. They''ll also show what groups are, how they are managed, created, and
    what they do:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To become familiar with the definition of groups in OpenJDK, go to [http://openjdk.java.net/groups/](http://openjdk.java.net/groups/).
    There is information about various processes and procedures required to support
    groups and to make them function well. These procedures include the following
    topics:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Proposing a new group.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Nominating a contributor to become a group member.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Nominating a group member to become an OpenJDK member
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Nominating a group lead
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Each group has some web content that is available publically. It can be found
    on the left-hand side of [http://openjdk.java.net/](http://openjdk.java.net/),
    under **Groups**. Usually the content on a group's page has a relatively standard
    structure and contains information such as the introduction, a list of specifications
    supported by the group, documentation, some guidelines on how to contribute, where
    to find the source code, and so on. Also, there are links to the mailing lists,
    blogs, and contact details. As an example, take a look at the JMX Group webpage
    at [http://openjdk.java.net/groups/jmx/](http://openjdk.java.net/groups/jmx/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We also recommended that you have a look at the list of projects and see which
    groups they belong to. This will give some idea about the relationship between
    groups and projects. The list of projects can be found on the left-hand side of
    [http://openjdk.java.net/](http://openjdk.java.net/) under **Groups**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is worth spending some time exploring [http://openjdk.java.net/](http://openjdk.java.net/)
    to see what is available and which groups exist. As we have already mentioned,
    group creation doesn't happen very often and no new groups have been created since
    2007\. The last one was the Conformance Group, which was proposed in September
    2007\. You can find the proposal e-mail in the mailing list archive at [http://mail.openjdk.java.net/pipermail/announce/2007-September.txt](http://mail.openjdk.java.net/pipermail/announce/2007-September.txt).
    See the last message in that file.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding OpenJDK projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenJDK projects aim to deliver some kind of an artefact, which can be a source
    code, documentation, or something else. Projects are sponsored by one or more
    OpenJDK groups. By their nature, projects are much more short-lived than groups
    and often can cover the implementation of JEPs or JSRs.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe takes you through some sources of information that are available
    about OpenJDK projects and gives some high-level information about them:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Similar to OpenJDK Groups, there is a web page that gives some definitions
    about the projects and defines how they function. This page is available at [http://openjdk.java.net/projects/](http://openjdk.java.net/projects/).
    Among the list of procedures, you will find the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Becoming an Author
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Appointing a Contributor to be an Author
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Nominating a Contributor or Author to be a Committer
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Nominating a Committer to be a Reviewer
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Proposing a New Project
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Very similar to groups, each project also has its own page on [http://openjdk.java.net/](http://openjdk.java.net/).
    The list of projects and the links to their pages can be found on the left-hand
    side of the website under **Projects**. The project page is not very informative,
    but might have a link to a wiki, which usually contains lots of information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As an example of how projects are created, we can look at the proposal for the
    project *Sumatra*, which can be found at [http://mail.openjdk.java.net/pipermail/announce/2012-September/000135.html](http://mail.openjdk.java.net/pipermail/announce/2012-September/000135.html).
    This thread also contains the voting results and, therefore, the decision to create
    that project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As usual, it is recommended that you spend some time exploring [http://openjdk.java.net/](http://openjdk.java.net/)
    to see which projects are available.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Suggesting new JSRs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **Java Specification Request** (**JSR**) is the request for a change to the
    specifications of the Java language, APS, JVM, and so on. Such changes are governed
    by the **Java Community Process** (**JCP**), where every member of the community
    can register and participate in the review.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe is written as if you were submitting a JSR, but keep in mind that
    JSRs are not usually submitted by a single individual, but by a group of experts
    who come out with a proposal. The group has a Spec Lead who submits the JSR. So,
    this recipe is more about giving you a high-level understanding of the process,
    helping you to see how JSRs work, and what it is all about. To get some deeper
    insight, see the resources provided in the *See also* section.
  prefs: []
  type: TYPE_NORMAL
- en: In the following recipe, it can be seen that being a spec lead for JSR is not
    only a technical position, but it also involves doing lots of work with people
    and requires one to possess a good amount of soft and leadership skills. The leader
    has to push the project forward and has to be capable of handling difficult situations.
    There can be cases when some members of group of experts, for some reason, can't
    participate any more, or there is clash of personalities. The other possible situation
    is when the JSR itself faces complicated questions and is challenged by the other
    community members. Such questions have to be answered clearly and with enough
    knowledge and passion for people to believe that it's worth going forward and
    including that JSR into the JDK.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As this is a more procedural recipe, all that is required is a computer with
    access to the Internet and a web browser.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps, on a high-level, go through the stages of a JSR lifecycle,
    starting from the idea and finishing with the actual implemented change:'
  prefs: []
  type: TYPE_NORMAL
- en: As a start, it would be good to create a JCP account. This is required to submit
    a JSR proposal and to participate in any part of a JCP. The process is very simple.
    Just go to [https://jcp.org/en/home/index](https://jcp.org/en/home/index) and
    follow the steps in the registration link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is good idea to explore the site and see what's already available there.
    The list of all JSRs is available at [https://www.jcp.org/en/jsr/all](https://www.jcp.org/en/jsr/all).
    Since the whole list can have too much information, there are options to filter
    JSRs by their stage in the approval process ([https://www.jcp.org/en/jsr/stage](https://www.jcp.org/en/jsr/stage)),
    by technology ([https://www.jcp.org/en/jsr/tech](https://www.jcp.org/en/jsr/tech)),
    by committee ([https://www.jcp.org/en/jsr/ec](https://www.jcp.org/en/jsr/ec)),
    or by the platform ([https://www.jcp.org/en/jsr/platform](https://www.jcp.org/en/jsr/platform)).
    There is also a list of JSRs by the ballot results, where you can find the results
    of voting for each year at [https://www.jcp.org/en/jsr/vote_summary](https://www.jcp.org/en/jsr/vote_summary).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If your proposal is something worth doing, then, similar to all OpenJDK change
    processes, describe the proposal on the relevant mailing list. This will ensure
    that the whole thing makes sense and helps to improve the quality of the material.
    As a spec lead, you need to have followers, that is, a group of experts who will
    participate in the JCR and push it forward. Such people can be found on mailing
    lists, relevant forums, or can be anyone who has the right mindset to participate
    and feels that your idea is worth doing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To make an actual submission, fill the **Java Specification Request Proposal**,
    which is available at [https://jcp.org/en/jsr/proposal](https://jcp.org/en/jsr/proposal).
    After submission, the JSR has to go through the **JSR Approval Ballot**, which
    will determine whether the initial JSR submission should be approved.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next stage, the group has to start working as a team, push the proposal
    forward, discuss it, and answer questions from other members of the community.
    It would be a good idea to have regular team calls, and regular face-to-face discussions
    can also be beneficial. This stage is probably the most important one, as it forms
    the precise shape of the JSR.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All discussions have to be publically available and the expert group that has
    proposed the JSR has to publically answer all the raised questions. This also
    means that there has to be a publically available archive of all the communication
    on the matter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When all the responses for all the comments and questions have been received
    and the JSR is updated accordingly, it is ready for the final submission. The
    spec lead is responsible for completion and submitting the **Technology Compatibly
    Kit** (**TCK**) and the **Reference Implementation** (**RI**). If a JSR is targeted
    to several environments, then it might be required to submit a TCK and RI for
    each platform. The submission has to follow the process described in the *Final
    Release* section of the JCP 2 process at [https://jcp.org/en/procedures/jcp2#4](https://jcp.org/en/procedures/jcp2#4).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the final successful approval ballot, the spec lead will become the maintenance
    lead and the JSR will move to the maintenance stage. For details, see the *Maintenance*
    section of JCP 2 process at [https://jcp.org/en/procedures/jcp2#5](https://jcp.org/en/procedures/jcp2#5).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As the whole process is governed by JCP, it would be a good idea for you to
    go through the document at [https://jcp.org/en/procedures/jcp2](https://jcp.org/en/procedures/jcp2),
    which describes the latest version of the process. At the time of writing, the
    latest version was 2.9.
  prefs: []
  type: TYPE_NORMAL
- en: On the JCP website at [https://jcp.org/en/resources/speclead_life](https://jcp.org/en/resources/speclead_life),
    there is a good article about being a spec lead that has some good insights and
    advice. It covers almost all the aspects of the role, starting from the submission
    of a JSR, and ending with building a team and communicating with people. It is
    definitely worth reading.
  prefs: []
  type: TYPE_NORMAL
- en: As part of the JSR process, one is required to submit the **Technology Compatibility
    Kit** (**TCK**).This is the suite of tests that are designed to ensure that a
    particular implementation is compliant with the JSR. This piece can be considered
    as one of the most complicated parts of the JSR application. The most common tool
    to implement the set of tests is JT Harness, but there are also some cases where
    the TCK might be implemented based on JUnit or TestNG.
  prefs: []
  type: TYPE_NORMAL
- en: The next revision of JCP is going to update some of the current process. This
    revision is covered by JSR 358\. To get more information about it, visit its home
    page at [https://java.net/projects/jsr358/pages/Home](https://java.net/projects/jsr358/pages/Home)
    and the JRS page at [https://jcp.org/en/jsr/detail?id=358](https://jcp.org/en/jsr/detail?id=358).
  prefs: []
  type: TYPE_NORMAL
- en: Suggesting new JEPs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'JEP is the abbreviation for JDK Enhancement Proposal. It means a relatively
    big change in OpenJDK that requires significant implementation effort, but it
    doesn''t imply changes in the Java specification. The definition of JEP is covered
    in *JEP 1 JDK Enhancement-Proposal & Roadmap Process* which explains the details
    of definition of JEP, the process and the required documentation. As defined in
    JEP 1 ([http://openjdk.java.net/jeps/1](http://openjdk.java.net/jeps/1)), JEP
    has to meet at least one of the following criteria:'
  prefs: []
  type: TYPE_NORMAL
- en: It requires two or more weeks of engineering effort
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It makes a significant change to the JDK, or to the processes and the infrastructure
    by which it is developed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is in high demand by the developers or the customers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This recipe will cover the definition of JEPs, their lifecycle, and how to find
    the latest information about them. It will also go through steps that are required
    for the creation of a JEP. Such an approach will allow you to get a good understanding
    of the process and see what JEPs are.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe doesn't require any special tools. All you need is this book and,
    preferably, a computer with a web browser.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To start with, it is a good idea to have a look at what has already been submitted
    as JEPs. To get the full list of JEPs, just go to [http://openjdk.java.net/jeps/](http://openjdk.java.net/jeps/).
    There, you can find the complete list of JEPs with their status, name, and some
    more information about them. Here is an example of what you can see there:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/8405_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see from the list, the table of JEPs has several columns, which
    give a brief overview and some additional information. For example, the first
    column is the type of the JEP, `P` stands for `Process`, `F` for `Feature`, and
    so on. It is not that hard to find out the meaning of specific values if you click
    on **JEP** and have a look at its header:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/8405_10_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Assuming that we have something completely new that is not in the list, and
    which definitely has to become a part of OpenJDK:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to read through *JEP 1: JDK Enhancement-Proposal & Roadmap
    Process*, which is available at [http://openjdk.java.net/jeps/1](http://openjdk.java.net/jeps/1).
    This covers the process and some mechanics of the process.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The next step is to do some more reading. *JEP 2: JEP Template* contains the
    template of the JEP. This template has to be filled in with the proposal details.
    The details will cover the overview, testing, dependencies, and so on. It is worthwhile
    looking at other JEP examples to fill the template. There is also a sample draft,
    available at [http://cr.openjdk.java.net/~mr/jep/draft-mcimadamore-inference-01.md](http://cr.openjdk.java.net/~mr/jep/draft-mcimadamore-inference-01.md).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Before attempting to publish a JEP, it would be a good idea to submit the proposal
    to the appropriate OpenJDK mailing lists for discussion. This will help you to
    produce a high quality proposal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the proposal is ready for submission, send it to `<[jep-submit@openjdk.java.net](mailto:jep-submit@openjdk.java.net)>`.
    After this, assuming that the proposal has adequate quality, it will be available
    in the repository ([http://hg.openjdk.java.net/jep/jeps](http://hg.openjdk.java.net/jep/jeps))
    and the webpage which was mentioned in step 1 of this recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After this, there will be several rounds of updates and discussions, which might
    eventually result in the JEP being approved and having its status changed to `Candidate`.
    This means that it is accepted for inclusion and has a good chance of being funded
    for one of the next versions. It would be worth mentioning that a JEP can also
    be rejected, which means that it was decided that it was not worth implementing
    at all.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When a JEP is transferred to the status `Funded`, it means that the group or
    area lead is happy to fund it. This means that the actual implementation can now
    be initiated and will be included in one of the future versions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As was already mentioned earlier, the detailed process is described in *JEP
    1: JDK Enhancement-Proposal & Roadmap Process*. Similar to all OpenJDK changes,
    this process requires lots of involvement from the community and OpenJDK members.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*JEP 1: JDK Enhancement-Proposal & Roadmap Process* at [http://openjdk.java.net/jeps/1](http://openjdk.java.net/jeps/1)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*JEP 2: JEP Template* at [http://openjdk.java.net/jeps/2](http://openjdk.java.net/jeps/2)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It would be good for you to take a look at some exciting discussions of JEP
    on mailing lists at [http://mail.openjdk.java.net/pipermail/jdk9-dev/2014-May/000781.html](http://mail.openjdk.java.net/pipermail/jdk9-dev/2014-May/000781.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is a JEP at [http://cr.openjdk.java.net/~mr/jep/jep-2.0-02.html](http://cr.openjdk.java.net/~mr/jep/jep-2.0-02.html)
    that suggests some changes in the existing process. The current state is *Draft*,
    but eventually most of the proposals will be applied to the current process.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
