["```java\npublic class CH8StrongReferenceExample {\n  public static void main(String[] args) {\n    SampleCorgiObject sampleCorgiObject = new SampleCorgiObject();\n    System.out.println(sampleCorgiObject);\n  }\n  static class SampleCorgiObject {\n    @Override\n    public String toString() {\n      return \"This is a SampleCorigObject instance.\";\n    }\n  }\n}\n```", "```java\nimport java.lang.ref.SoftReference;\npublic class CH8SoftReferenceExample {\n  public static void main(String[] args) {\n    MyBougieObject myBougieObject = new MyBougieObject(\"Cached \n    Object\");\n    SoftReference<MyBougieObject> softReference = new \n    SoftReference<>(myBougieObject);\n    myBougieObject = null;\n```", "```java\n    MyBougieObject retrievedObject = softReference.get();\n    if (retrievedObject != null) {\n        System.out.println(\"Object retrieved from soft reference: \" \n          + retrievedObject);\n    } else {\n      System.out.println(\"The Object has been garbage collected by the \n      JVM.\");\n    }\n    System.gc();\n    retrievedObject = softReference.get();\n    if (retrievedObject != null) {\n      System.out.println(\"Object is still available after requesting \n      GC: \" + retrievedObject);\n    } else {\n      System.out.println(\"The Object has been garbage collected after \n      requesting GC.\");\n    }\n  }\n}\n```", "```java\nclass MyBougieObject {\n  private String name;\n  public MyBougieObject(String name) {\n    this.name = name;\n  }\n  @Override\n  public String toString() {\n    return name;\n  }\n}\n```", "```java\nObject retrieved from soft reference: Cached Object\nObject is still available after requesting GC: Cached Object\n```", "```java\nimport java.lang.ref.WeakReference;\npublic class CH8WeakReferenceExample {\n  public static void main(String[] args) {\n    CacheCorgiObject cacheCorgiObject = new CacheCorgiObject();\n    WeakReference<CacheCorgiObject> weakCacheCorgiObject = new \n    WeakReference<>(cacheCorgiObject);\n    System.out.println(\"Cache corgi object before GC: \" + \n    weakCacheCorgiObject.get());\n    cacheCorgiObject = null;\n    System.gc();\n    System.out.println(\"Cache corgi object after GC: \" + \n    weakCacheCorgiObject.get());\n  }\n}\nclass CacheCorgiObject {\n@Override\n  protected void finalize() {\n    System.out.println(\"CacheCorgiObject is being garbage collected\");\n  }\n}\n```", "```java\nCache corgi object before GC: CacheCorgiObject@7344699f\nCache corgi object after GC: null\nCacheCorgiObject is being garbage collected\n```", "```java\nimport java.lang.ref.PhantomReference;\nimport java.lang.ref.ReferenceQueue;\npublic class CH8PhantomReferenceExample {\n  public static void main(String[] args) throws InterruptedException {\n    ReferenceQueue<VeryImportantResource> queue = new \n    ReferenceQueue<>();\n    VeryImportantResource resource = new VeryImportantResource();\n    PhantomReference<VeryImportantResource> phantomResource = new \n    PhantomReference<>(resource, queue);\n    resource = null;\n    System.gc();\n    while (true) {\n      if (queue.poll() != null) {\n        System.out.println(\"ImportantResource has been garbage \n        collected and its phantom reference is enqueued\");\n        break;\n      }\n    }\n  }\n}\nclass VeryImportantResource {\n  @Override\n  protected void finalize() throws Throwable {\n    System.out.println(\"Finalizing VeryImportantResource\");\n    super.finalize();\n  }\n}\n```", "```java\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\npublic class CH8ThreadManagementExample {\n  public static void main(String[] args) {\n    ExecutorService executor = Executors.newFixedThreadPool(5);\n    for (int i = 0; i < 10; i++) {\n      final int taskId = i;\n      executor.submit(() -> {\n        System.out.println(\"Executing task \" + taskId + \" Thread: \" + \n        Thread.currentThread().getName());\n        try {\n          TimeUnit.SECONDS.sleep(1);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            System.out.println(\"Task \" + taskId + \" was interrupted\");\n        }\n      });\n    }\n    executor.shutdown();\n    try {\n      if (!executor.awaitTermination(60, TimeUnit.SECONDS)) {\n        executor.shutdownNow();\n        System.out.println(\"Executor did not terminate in the \n        specified time.\");\n        if (!executor.awaitTermination(60, TimeUnit.SECONDS))\n          System.err.println(\"Pool did not terminate\");\n      }\n    } catch (InterruptedException ie) {\n        executor.shutdownNow();\n        Thread.currentThread().interrupt();\n    }\n    System.out.println(\"Finished all threads\");\n  }\n}\n```"]