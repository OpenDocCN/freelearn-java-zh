["```java\n    package service.api; \n    public interface MyServiceInterface { \n      public void runService(); \n    } \n```", "```java\n        module service.api { \n          exports service.api; \n        } \n```", "```java\n        provides <interface-type> with <implementation-type>; \n```", "```java\n        module service.implA { \n          requires service.api;  \n          provides service.api.MyServiceInterface with \n           packt.service.impla.MyServiceImplA; \n        } \n```", "```java\n        uses <interface-type>; \n```", "```java\n        module consumer { \n          requires service.api; \n          uses service.api.MyServiceInterface; \n        } \n```", "```java\n        Iterable<MyServiceInterface> sortUtils =\n         ServiceLoader.load(MyServiceInterface.class);\n```", "```java\n        package packt.util; \n        import java.util.List; \n        public interface SortUtil { \n          public <T extends Comparable> List<T> sortList(List<T> list); \n        } \n```", "```java\n        module packt.sortutil { \n          exports packt.util; \n        } \n```", "```java\n        public class BubbleSortUtilImpl implements SortUtil { \n\n          public <T extends Comparable> List<T> sortList(\n           List<T> list) { \n             ...  \n             return list; \n          }''  \n        } \n```", "```java\n        public class JavaSortUtilImpl implements SortUtil { \n          public <T extends Comparable> List<T> sortList(\n           List<T> list) { \n             Collections.sort(list); \n             return list; \n          } \n        } \n```", "```java\n        module packt.sort.bubblesort { \n          requires packt.sortutil; \n          provides packt.util.SortUtil  \n           with packt.util.impl.bubblesort.BubbleSortUtilImpl; \n        } \n```", "```java\n        module packt.sort.javasort { \n          requires packt.sortutil; \n          provides packt.util.SortUtil  \n           with packt.util.impl.javasort.JavaSortUtilImpl; \n        }\n```", "```java\n        module packt.addressbook { \n          requires java.logging; \n          requires packt.addressbook.lib; \n          uses packt.util.SortUtil; \n        } \n```", "```java\n        Iterable<SortUtil> sortUtils =\n          ServiceLoader.load(SortUtil.class); \n```", "```java\n        for (SortUtil sortUtil : sortUtils) { \n          System.out.println(\"Found an instance of SortUtil\"); \n          sortUtil.sortList(contacts); \n        } \n```", "```java\n$ javac --module-source-path src -d out $(find . -name '*.java') \n$ java --module-path out -m packt.addressbook/packt.addressbook.Main \nApr 09, 2017 12:03:18 AM packt.addressbook.Main main \nINFO: Address book viewer application: Started \nFound an instance of SortUtil \nFound an instance of SortUtil \n[Charles Babbage, Tim Berners-Lee, Edsger Dijkstra, Ada Lovelace, Alan Turing] \nApr 09, 2017 12:03:19 AM packt.addressbook.Main main \nINFO: Address book viewer application: Completed \n```", "```java\n    public interface SortUtil { \n      public <T extends Comparable> List<T> sortList(List<T> list); \n      public int getIdealMaxInputLength(); \n    } \n```", "```java\n    public class BubbleSortUtilImpl implements SortUtil { \n      ... \n      public int getIdealMaxInputLength() { \n        return 4; \n      } \n```", "```java\n    public class JavaSortUtilImpl implements SortUtil { \n      ... \n      public int getIdealMaxInputLength() { \n        return Integer.MAX_VALUE; \n      } \n```", "```java\n    Iterable<SortUtil> sortUtils =\n      ServiceLoader.load(SortUtil.class); \n    for (SortUtil sortUtil : sortUtils) { \n      logger.info(\"Found an instance of SortUtil with ideal\n       max input: \" + sortUtil.getIdealMaxInputLength()); \n      if (contacts.size() < sortUtil.getIdealMaxInputLength()) { \n        sortUtil.sortList(contacts); \n        break; \n      } \n    } \n```", "```java\n$ java --module-path out -m packt.addressbook/packt.addressbook.Main \nApr 09, 2017 8:01:20 PM packt.addressbook.Main main \nINFO: Address book viewer application: Started \nApr 09, 2017 8:01:20 PM packt.addressbook.Main main \nINFO: Found an instance of SortUtil with ideal max input: 4 \nApr 09, 2017 8:01:20 PM packt.addressbook.Main main \nINFO: Found an instance of SortUtil with ideal max input: 2147483647 \n[Charles Babbage, Tim Berners-Lee, Edsger Dijkstra, Ada Lovelace, Alan Turing] \nApr 09, 2017 8:01:20 PM packt.addressbook.Main main \nINFO: Address book viewer application: Completed \n```", "```java\n    public static Iterable<SortUtil> getAllProviders() { \n      return ServiceLoader.load(SortUtil.class); \n    } \n\n    public static SortUtil getProviderInstance(int listSize) { \n      Iterable<SortUtil> sortUtils =\n        ServiceLoader.load(SortUtil.class); \n      for (SortUtil sortUtil : sortUtils) { \n        if (listSize < sortUtil.getIdealMaxInputLength()) { \n          return sortUtil; \n        } \n      } \n      return null; \n    } \n```", "```java\n    SortUtil sortUtil = SortUtil.getProviderInstance(contacts.size()); \n    sortUtil.sortList(contacts); \n```", "```java\n    module packt.sortutil { \n      exports packt.util; \n      uses packt.util.SortUtil; \n    } \n```", "```java\n    Stream<Provider<SortUtil>> providers =\n      ServiceLoader.load(SortUtil.class).stream();\n```", "```java\n    Stream<Provider<SortUtil>> providers = \n      ServiceLoader.load(SortUtil.class).stream() \n       .sorted(Comparator.comparing(p -> p.type().getName()));\n```", "```java\n    SortUtil util = providers.map(Provider::get)\n                             .findAny() \n                             .orElse(null);\n```", "```java\n    SortUtil util = providers.map(Provider::get)\n                             .findAny() \n                             .orElse(new DefaultSortImpl()); \n```"]