- en: Command Line Flags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we looked at several security changes to the JDK. Java
    9's security enhancements provide developers with the ability to write and maintain
    applications that implement security. Specifically, we covered datagram transport
    layer security, Keystores, improving security application performance, the TLS
    application-layer protocol negotiation extension, leveraging CPU instructions
    for GHASH and RSA, OCSP stapling for TLS, and DRBG-based `SecureRandom` implementations.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will explore several changes to the Java 9 platform with
    the common theme of command-line flags. Specifically, we will cover the following
    concepts:'
  prefs: []
  type: TYPE_NORMAL
- en: Unified JVM logging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compiler control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Diagnostic commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Heap profiling agent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing your JHAT
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Command-line flag argument validation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compiling for older platform versions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unified JVM Logging [JEP 158]
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Creating a unified logging schema for the JVM was the central goal of JEP-158\.
    Here is a comprehensive list of the goals of the JEP:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a JVM-wide set of command-line options for all logging operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use categorized tags for logging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Permit messages to have multiple tags, also referred to as tag sets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Provide six levels of logging:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Error
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Information
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Debug
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Trace
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Develop
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Select which messages are logged based on levels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optionally direct logging to the console or a file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Print one line at a time and do not support interleaving within the same line
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Permit output of multiple line logs (non-interleaved)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Format all logging messages so that they are easily human-read
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add decorations such as uptime, level, and tags
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Like levels, select which messages are logged based on decorations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Convert pre-Java 9 `tty>print` logging to use unified logging as the output
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Permit dynamic message configuration using `jcmd` and `MBeans`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Permit the ability to enable and disable individual log messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add ability to determine the order in which decorations are printed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The unified logging changes to the JVM can be grouped into the five categories
    listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: Command-line options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decorations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Levels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Output
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tags
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's briefly look at each of these categories.
  prefs: []
  type: TYPE_NORMAL
- en: Command-line options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The new command-line option, `-Xlog`, was added to the logging framework in
    Java 9\. This command-line option has an extensive array of parameters and possibilities.
    The basic syntax is simply `-Xlog` followed by an option. Here is the formal basic
    syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a basic example with the `all` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the extensive command-line syntax used to configure the new unified
    logging:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The following `-Xlog` examples are followed by a description:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, we are telling the JVM to take the following actions:'
  prefs: []
  type: TYPE_NORMAL
- en: Log all messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the `info` level
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide output to `stdout`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With this example, all `warning` messages will still be output to `stderr`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next example, shown here, logs messages at the `debug` level:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, we are telling the JVM to take the following actions:'
  prefs: []
  type: TYPE_NORMAL
- en: Log all messages tagged with, at a minimum, the `gc` and `rt` tags
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the `debug` level
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide output to `stdout`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The next example pushes the output to an external file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, we are telling the JVM to take the following actions:'
  prefs: []
  type: TYPE_NORMAL
- en: Disable all messages except those tagged with `rt` tags
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the `debug` level
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide output to a file named `rtdebug.txt`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decorations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the context of Java 9''s logging framework, decorations are metadata about
    the log message. Here is the alphabetic list of decorations that are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '**level**: The level associated with the logged message'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**pid**: PID = Processor IDentifier'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**tags**: The tag-set associated with the logged message'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**tid**: TID = Thread IDentifier'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**time**: Refers to current date and time using ISO-8601 format'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**timemillis**: Current time in milliseconds'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**timenanos**: Current time in nanoseconds'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**uptime**: Time, in seconds and milliseconds, since the JVM started'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**uptimemillis**: Time, in milliseconds, since the JVM started'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**uptimenanos**: Time, in nanoseconds, since the JVM started'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Decorations can be surpassed or included in unified logging output. Regardless
    of which decorations are used, they will appear in the output in the following
    order:'
  prefs: []
  type: TYPE_NORMAL
- en: time
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: uptime
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: timemillis
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: uptimemillis
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: timenanos
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: uptimenanos
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: pid
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: tid
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: level
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: tags
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Levels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Logged messages are individually associated with a verbosity level. As previously
    listed, the levels are **error**, **warning**, **information**, **debug**, **trace**,
    and **develop**. The following chart shows how the levels have an increasing level
    of verbosity in respect to how much information is logged. The **develop** level
    is for development purposes only and is not available in on-product application
    builds:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/51f2610d-700d-41b6-823b-56c4022a6c55.png)'
  prefs: []
  type: TYPE_IMG
- en: Output
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Java 9 logging framework supports three types of output with examples of
    direct use with the `-Xlog` command-line syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, we provide output to `stderr`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The following example provides output to `stdout`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The following example writes the output to a text file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Tags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The new logging framework consists of a set of tags identified in the JVM. These
    tags can be changed in source code if needed. The tags should be self-identifying,
    such as `gc` for garbage collection.
  prefs: []
  type: TYPE_NORMAL
- en: When more than one tag is grouped together, they form a tag-set. When we add
    our own tags via source code, each tag should be associated with a tag-set. This
    will help ensure the tags stay organized and easily human-readable.
  prefs: []
  type: TYPE_NORMAL
- en: Compiler control [JEP 165]
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Controlling Java Virtual Machine compilers might seem like an unnecessary task,
    but for many developers, this is an important aspect of testing. Java Enhancement
    Proposal 165 detailed a plan to implement runtime management of JVM compilers.
    This is accomplished with method-dependent compiler flags.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will start with a look at JVM compilation modes, then look
    at the compiler that can be controlled using the Java 9 platform.
  prefs: []
  type: TYPE_NORMAL
- en: Compilation modes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The changes in the Java 9 platform include granular control of both the c1
    and c2 JVM compliers. As you can see in the following illustration, the Java HotSpot
    JVM has two **Just-in-Time** (**JIT**) compilation modes--**c1** and **c2**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6378a448-1912-44bd-81a9-4accb01fb99d.png)'
  prefs: []
  type: TYPE_IMG
- en: The **C1** and **C2** compilation modes use different compilation techniques
    and, if used on the same code base, can produce different sets of machine code.
  prefs: []
  type: TYPE_NORMAL
- en: C1 compilation mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The C1 compilation mode inside Java HotSpot VM is typically used for applications
    that have the following characteristics:'
  prefs: []
  type: TYPE_NORMAL
- en: Quick startup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Increased optimization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Client-side
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: C2 compilation mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The second compilation mode, C2, is used by applications with the following
    listed characteristics:'
  prefs: []
  type: TYPE_NORMAL
- en: Long runtimes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server-side
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tiered compilation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Tiered compilation allows us to use both **c1** and **c2** compilation modes.
    Starting with Java 8, tiered compilation is the default process. As illustrated
    here, the **c1** mode is used at startup to help provide greater optimization.
    Then, once the app has sufficiently warmed up, the **c2** mode is employed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c749390b-2a49-46c9-90b0-ef1f9fd71074.png)'
  prefs: []
  type: TYPE_IMG
- en: Compiler control in Java 9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Java 9 comes with the promise of the ability to have finite control over JVM
    compilers and to make changes at runtime. These additional abilities do not degrade
    performance. This permits greater fidelity of testing and testing optimization
    as we can run small compiler tests without having to relaunch the entire JVM.
  prefs: []
  type: TYPE_NORMAL
- en: 'To control compiler operations, we need to create a directives file. These
    files contain compiler directives which consist of a set of options with values.
    Directive files essentially use a subset of JSON:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0fe04758-0407-4944-bd87-861f14ad54e6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The **JavaScript Object Notation** (**JSON**) format is used for data-interchange.
    The directive files have the following formatting differences from JSON:'
  prefs: []
  type: TYPE_NORMAL
- en: '`int` and `doubles` are the only supported number formats'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Double forward slash (`//`) can be used for comment lines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Trailing commas (`,`) can be used in arrays and objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Escape characters are not supported
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Option names are formatted as strings and do not have to be quoted
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can learn more about JSON at [http://www.json.org](http://www.json.org).
  prefs: []
  type: TYPE_NORMAL
- en: 'We can add our directive file using the following syntax at the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a shell example of a directives file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Diagnostic commands [JEP 228]
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Java Enhancement Proposal 228, **Add More Diagnostic Commands**, defined
    seven additional diagnostic commands to enhance the ability to diagnose the JDK
    and the JVM. The new diagnostic commands are detailed here.
  prefs: []
  type: TYPE_NORMAL
- en: The `print_codegenlist` command prints methods that are currently queued for
    compilation. Since c1 and c2 compilation modes are on separate queues, this command
    would need to be issued to a specific queue.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `dump_codelist` diagnostic command will print the following listed information
    for the compiled methods:'
  prefs: []
  type: TYPE_NORMAL
- en: Full signature
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Address range
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: State
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alive
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Nonentrant
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Zombie
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition, the `dump_codelist` diagnostic command allows the output to be
    directed to `stdout` or to a specified file. Output can be in XML form or standard
    text.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `print_codeblocks` command allows us to print:'
  prefs: []
  type: TYPE_NORMAL
- en: Code cache size
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code cache list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: List of blocks in the code cache
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Addresses for code blocks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Th `datadump_request` diagnostic command sends a dump request to the **Java
    Virtual Machine Tool Interface** (**JVMTI**). This replaces the **Java Virtual
    Machine Debug Interface** (**JVMDI**) and the **Java Virtual Machine Profiling
    Interface** (**JVMPI**) interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: With the `set_vmflag` command, we can set a command-line flag or option in the
    JVM or the libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Th `print_class_summary` diagnostic command prints a list of all loaded classes
    as well as the structure of their inheritance.
  prefs: []
  type: TYPE_NORMAL
- en: The `print_utf8pool` command prints all UTF-8 string constants.
  prefs: []
  type: TYPE_NORMAL
- en: Heap profiling agent [JEP 240]
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Java Enhancement Proposal 240 is titled *Remove the JVM TI hprof Agent*. Here
    are the key terms associated with this JEP and referenced in the title that might
    be new to you:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Tool Interface (TI)**: This is a native programming interface that allows
    tools to control the execution of applications that are being run inside the Java
    Virtual Machine. The interface also permits state inquiries. The full nomenclature
    for this tool is the Java Virtual Machine Tool Interface, or JVM TI.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Heap Profiling (HPROF)**: This is an internal JDK tool used for profiling
    a JVM''s use of CPUs and the heap. The most common exposure developers have to
    `hprof` is the file that is generated when following a crash. The generated file
    contains a heap dump.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Java 9 JDK does not contain the `hprof` agent. It was removed largely because
    there are superior alternatives available. Here is a table of the related functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **HPROF Functionality** | **Alternative** |'
  prefs: []
  type: TYPE_TB
- en: '| Allocation Profiler(heap=sites) | Java VisualVM |'
  prefs: []
  type: TYPE_TB
- en: '| CPU Profiler(cpu=samples)(cpu=times) | Java VisualVMJava Flight Recorder
    |'
  prefs: []
  type: TYPE_TB
- en: '| Heap Dumps(heap=dump) | Internal JVM functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '`GC.heap_dump(icmd <pid> GC.heap_dump)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jmap -dump`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Interestingly, when HPROF was originally created, it was not intended to be
    used in production. In fact, it was only meant to test code for the JVM Tool Interface.
    So, with the advent of the Java 9 platform, the HPROF library (`libhprof.so`)
    will no longer be part of the JDK.
  prefs: []
  type: TYPE_NORMAL
- en: Removing your JHAT [JEP 241]
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **Java Heap Analysis Tool** (**JHAT**) is used to parse Java heap dump
    files. The syntax for this heap dump file parsing tool is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a quick look at the options associated with the JHAT command:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Option** | **Description** | **Default** |'
  prefs: []
  type: TYPE_TB
- en: '| `-J<flag>` | This passes `<flag>` to the runtime system. | N/A |'
  prefs: []
  type: TYPE_TB
- en: '| `-stack<bool>` | Toggles tracking of object allocation call stack. | `true`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `-refs<bool>` | Toggles tracking of references to objects. | `true` |'
  prefs: []
  type: TYPE_TB
- en: '| `-port<port>` | Indicates the port for the JHAT HTTP server. | `7000` |'
  prefs: []
  type: TYPE_TB
- en: '| `-exclude<exclude-filename>` | Exclude indicated file from reachable objects
    query. | N/A |'
  prefs: []
  type: TYPE_TB
- en: '| `-baseline<filename>` | Specifies the baseline heap dump for use in comparisons.
    | N/A |'
  prefs: []
  type: TYPE_TB
- en: '| `-debug<int>` | Sets verbosity of output. | N/A |'
  prefs: []
  type: TYPE_TB
- en: '| `-version` | Simply outputs the JHAT release number. | N/A |'
  prefs: []
  type: TYPE_TB
- en: '| `-h``-help` | Provides help text. | N/A |'
  prefs: []
  type: TYPE_TB
- en: JHAT has been part of the Java platform since JDK-6 in an experimental form.
    It was not supported and has been deemed to be outdated. Starting with Java 9,
    this tool will no longer be part of the JDK.
  prefs: []
  type: TYPE_NORMAL
- en: JVM command-line flag argument validation [JEP 245]
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you have gained exposure to much of the command-line flag
    usage with the Java 9 platform. Java Enhancement Proposal 245, titled *Validate
    JVM Command-Line Flag Arguments*, was created to ensure all JVM command-line flags
    with arguments are validated. The primary goals of this effort were:'
  prefs: []
  type: TYPE_NORMAL
- en: Avoid JVM crashes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide error messages to inform of invalid flag arguments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As you can see from the following graphic, there was no attempt to auto-correct
    the flag argument errors; rather, just to identify the errors and prevent the
    JVM from crashing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/247f3f1f-0ca5-4e37-b4d7-36ee886d8fdf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A sample error message is provided here and indicates that the flag argument
    was out of range. This error would be displayed during the flag argument range
    check performed during the JVM''s initialization:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are some specifics regarding this change to the Java platform:'
  prefs: []
  type: TYPE_NORMAL
- en: Expand on the current `globals.hpp` source file to ensure complete flag default
    values and permissible ranges are documented
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Define a framework to support adding new JVM command-line flags in the future:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This will include value ranges and value sets
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: This will ensure the validity checking will apply to all newly added command-line
    flags
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Modify macro tables:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add min/max for optional range
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add constraint entries for the following:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure constraint checks are performed each time a flag changes
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: All manageable flags will continue to be checked while the JVM is running
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Compile for older platform versions [JEP 247]
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Java Compiler, `javac`, has been updated for Java 9 to ensure it can be
    used to compile Java programs to run on user-selected older versions of the Java
    platform. This was the focus of Java Enhancement Proposal 247, **Compile for Older
    Platform Versions**.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see in the following screenshot, `javac` has several options including
    `-source` and `-target`. The `javac` presented in the following screenshot is
    from Java 8:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b5ad87fc-702d-4aa3-abfc-9605980c9904.png)'
  prefs: []
  type: TYPE_IMG
- en: The `-source` option is used to dictate the Java version accepted by the compiler.
    The `-target` option informs which version of class files `javac` will produce.
    By default, `javac` generates class files in the most recent java version and
    that of the platform APIs. This can cause a problem when the compiled application
    uses APIs that are only available in the most recent platform version. This would
    render the application ineligible to run on older platform versions, despite what
    is dictated with the `-source` and `-target` options.
  prefs: []
  type: TYPE_NORMAL
- en: 'To address the aforementioned problem, a new command-line option is introduced
    with the Java 9 platform. This option is the `--release` option and, when used,
    will automatically configure javac to generate class files that link against a
    specific platform version. The following screenshot shows the `javac` options
    with the Java 9 platform. As you can see, the new `--release` option is included:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/83ad1148-a99c-48cc-ad34-2ab5c35f2d5e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is the syntax for the new option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we explored several changes to the Java 9 platform with the
    common theme of command-line flags. Specifically, we covered unified JVM logging,
    compiler control, new diagnostic commands, removal of the HPROF heap profiling
    agent, the removal of the JHAT, command-line flag argument validation, and the
    ability to compile for older platform versions.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will focus on best practices with additional utilities
    provided with the Java 9 platform. These will include UTF-8, Unicode 7.0, Linux,
    and more.
  prefs: []
  type: TYPE_NORMAL
