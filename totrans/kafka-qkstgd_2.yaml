- en: Message Validation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消息验证
- en: '[Chapter 1](0bde3875-cd30-435c-9b32-b96fccb2e6d0.xhtml), *Configuring Kafka*,
    focused on how to set up a Kafka cluster and run a command-line producer and a
    consumer. Having the event producer, we now have to process those events.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '[第一章](0bde3875-cd30-435c-9b32-b96fccb2e6d0.xhtml)，*配置Kafka*，专注于如何设置Kafka集群并运行命令行生产者和消费者。有了事件生产者，我们现在必须处理这些事件。'
- en: Before going into detail, let's present our case study. We need to model the
    systems of Monedero, a fictional company whose core business is cryptocurrency
    exchange. Monedero wants to base its IT infrastructure on an **enterprise service
    bus** (**ESB**) built with Apache Kafka. The Monedero IT department wants to unify
    the service backbone across the organization. Monedero also has worldwide, web-based,
    and mobile-app-based clients, so a real-time response is fundamental.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在详细说明之前，让我们先介绍我们的案例研究。我们需要对Monedero公司的系统进行建模，Monedero是一家虚构的公司，其核心业务是加密货币交易。Monedero希望将其IT基础设施建立在用Apache
    Kafka构建的**企业服务总线**（**ESB**）上。Monedero的IT部门希望统一整个组织的服务骨干。Monedero还有全球性的、基于网页的和基于移动应用的客户，因此实时响应是基本要求。
- en: Online customers worldwide browse the Monedero website to exchange their cryptocurrencies.
    There are a lot of use cases that customers can perform in Monedero, but this
    example is focused on the part of the exchange workflow specifically from the
    web application.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 全球在线客户浏览Monedero网站以交换他们的加密货币。客户在Monedero可以执行很多用例，但这个例子专注于从Web应用程序的具体交换工作流程部分。
- en: 'This chapter covers the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖以下主题：
- en: Modeling the messages in JSON format
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以JSON格式建模消息
- en: Setting up a Kafka project with Gradle
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Gradle设置Kafka项目
- en: Reading from Kafka with a Java client
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Java客户端从Kafka读取
- en: Writing to Kafka with a Java client
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Java客户端向Kafka写入
- en: Running a processing engine pipeline
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行处理引擎管道
- en: Coding a `Validator` in Java
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Java编写`Validator`
- en: Running the validation
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行验证
- en: Enterprise service bus in a nutshell
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 企业服务总线概述
- en: 'Event processing consists of taking one or more events from an event stream
    and applying actions over those events. In general, in an enterprise service bus,
    there are commodity services; the most common are the following:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 事件处理包括从一个事件流中取出一个或多个事件，并对这些事件应用动作。一般来说，在企业服务总线中，有商品服务；最常见的如下：
- en: Data transformation
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据转换
- en: Event handling
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件处理
- en: Protocol conversion
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 协议转换
- en: Data mapping
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据映射
- en: 'Message processing in the majority of cases involves the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，消息处理涉及以下内容：
- en: Message structure validation against a message schema
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据消息架构对消息结构进行验证
- en: Given an event stream, filtering the messages from the stream
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给定一个事件流，从流中过滤消息
- en: Message enrichment with additional data
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用附加数据丰富消息
- en: Message aggregation (composition) from two or more message to produce a new
    message
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从两个或多个消息中聚合（组合）以生成新的消息
- en: This chapter is about event validation. The chapters that follow are about composition
    and enrichment.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是关于事件验证的。接下来的章节将介绍组合和丰富。
- en: Event modeling
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件建模
- en: 'The first step in event modeling is to express the event in English in the
    following form:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 事件建模的第一步是将事件用以下形式的英语表达出来：
- en: Subject-verb-direct object
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 主语-动词-直接宾语
- en: 'For this example, we are modeling the event *customer consults the ETH price*:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个例子，我们正在建模事件*客户咨询ETH价格*：
- en: The subject in this sentence is *customer*, a noun in nominative case. The subject
    is the entity performing the action.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这句话的主语是*customer*，一个名词，在主格。主语是执行动作的实体。
- en: The verb in this sentence is *consults*; it describes the action performed by
    the subject.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这句话中的动词是*consults*；它描述了主语执行的动作。
- en: The direct object in this sentence is *ETH price*. The object is the entity
    in which the action is being done.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这句话的直接宾语是*ETH价格*。宾语是动作被执行的实体。
- en: 'We can represent our message in several message formats (covered in other sections
    of this book):'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用几种消息格式来表示我们的消息（本书的其他章节有所涉及）：
- en: '**JavaScript Object Notation** (**JSON**)'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JavaScript对象表示法**（**JSON**）'
- en: Apache Avro
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache Avro
- en: Apache Thrift
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache Thrift
- en: Protocol Buffers
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Protocol Buffers
- en: JSON is easily read and written by both humans and machines. For example, we
    could chose binary as the representation, but it has a rigid format and it was
    not designed for humans to read it; as counterweight, binary representation is
    very fast and lightweight in processing.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: JSON易于被人类和机器读取和写入。例如，我们可以选择二进制作为表示方式，但它有一个严格的格式，并且它不是为人类阅读而设计的；作为平衡，二进制表示在处理上非常快速和轻量级。
- en: '*Listing 2.1*, shows the representation of the `CUSTOMER_CONSULTS_ETHPRICE`
    event in JSON format:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表2.1*显示了`CUSTOMER_CONSULTS_ETHPRICE`事件在JSON格式中的表示：'
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 2.1: customer_consults_ETHprice.json'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 列表2.1：customer_consults_ETHprice.json
- en: 'For this example, the **Ethereum** (**ETH**) currency price is expressed in
    **Russian rouble** (**RUB**). This JSON message has four sections:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个例子，以太币（ETH）的价格是以俄罗斯卢布（RUB）表示的。这个JSON消息有四个部分：
- en: '`event`: This is a string with the event''s name.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event`: 这是一个包含事件名称的字符串。'
- en: '`customer`: This represents the person (in this case its `id` is `14862768`)
    consulting the Ethereum price. In this representation, there is a unique id for
    the customer, the name, and the browser `ipAddress`, which is the IP address of
    the computer the customer is logged on.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`customer`: 这代表咨询以太币价格的人（在这种情况下，其`id`为`14862768`）。在这个表示中，有一个唯一的客户ID、姓名和浏览器的`ipAddress`，这是客户登录的计算机的IP地址。'
- en: '`currency`: This contains the cryptocurrency name and the currency in which
    the price is expressed.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`currency`: 这包含加密货币的名称以及价格所表示的货币。'
- en: '`timestamp`: The timestamp in which the customer made the request (UTC).'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timestamp`: 客户请求时的戳记（UTC）。'
- en: 'From another perspective, the message has two parts: the metadata—this is the
    event name and the timestamp and two business entities, the customer and the currency.
    As we can see, this message can be read and understood by a human.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 从另一个角度来看，消息有两个部分：元数据——这是事件名称和戳记，以及两个业务实体，客户和货币。正如我们所见，这条消息可以被人类阅读和理解。
- en: 'Other messages from the same use case in JSON format could be as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 来自同一用例的其他消息，以JSON格式可能如下所示：
- en: '[PRE1]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This is another example:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这又是一个例子：
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'What happens if we want to represent our message in the Avro schema? Yes, the
    Avro schema of our message (note that it''s not the message, but the schema) is
    in *Listing 2.2*:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想在Avro模式中表示我们的消息会怎样呢？是的，我们的消息的Avro模式（注意，这不是消息，而是模式）在*列表2.2*中：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Listing 2.2: customer_consults_ethprice.avsc'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 列表2.2：customer_consults_ethprice.avsc
- en: 'For more information about the Avro schema, check the Apache Avro specification:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于Avro模式的信息，请查看Apache Avro规范：
- en: '[https://avro.apache.org/docs/1.8.2/spec.html](https://avro.apache.org/docs/1.8.2/spec.html)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://avro.apache.org/docs/1.8.2/spec.html](https://avro.apache.org/docs/1.8.2/spec.html)'
- en: Setting up the project
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置项目
- en: This time, we are going to build our project with Gradle. The first step is
    to download and install Gradle from [http://www.gradle.org/downloads](http://www.gradle.org/downloads).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我们将使用Gradle构建我们的项目。第一步是下载并安装Gradle，可以从[http://www.gradle.org/downloads](http://www.gradle.org/downloads)下载。
- en: Gradle only requires a Java JDK (version 7 or higher).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Gradle只需要Java JDK（版本7或更高）。
- en: 'macOS users can install Gradle with the `brew` command, as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: macOS用户可以使用`brew`命令安装Gradle，如下所示：
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The output is something like the following:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 输出类似于以下内容：
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Linux users can install Gradle with the `apt-get` command, as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Linux用户可以使用`apt-get`命令安装Gradle，如下所示：
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Unix users can install with sdkman, a tool for managing parallel versions of
    most Unix-based systems, as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Unix用户可以使用sdkman安装，这是一个用于管理大多数基于Unix系统的并行版本的工具，如下所示：
- en: '[PRE7]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To check that Gradle is installed correctly, type the following:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查Gradle是否正确安装，请输入以下内容：
- en: '[PRE8]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output is something like the following:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 输出类似于以下内容：
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The first step is to create a directory called `monedero` and, from that directory,
    execute the following:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是创建一个名为`monedero`的目录，然后从这个目录执行以下操作：
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output is something like the following:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 输出类似于以下内容：
- en: '[PRE11]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Gradle generates a skeleton project inside the directory. The directory should
    be similar to the following:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Gradle在目录内生成一个骨架项目。该目录应类似于以下内容：
- en: '`- build.gradle`'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`- build.gradle`'
- en: '`- gradle`'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`- gradle`'
- en: '`-- wrapper`'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-- wrapper`'
- en: '`--- gradle-wrapper.jar`'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--- gradle-wrapper.jar`'
- en: '`--- gradle-vreapper.properties`'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--- gradle-vreapper.properties`'
- en: '`- gradlew`'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`- gradlew`'
- en: '`- gradle.bat`'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`- gradle.bat`'
- en: '`- settings.gradle`'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`- settings.gradle`'
- en: '`- src`'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`- src`'
- en: '`-- main`'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-- main`'
- en: '`--- java`'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--- java`'
- en: '`----- Library.java`'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`----- Library.java`'
- en: '`-- test`'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-- test`'
- en: '`--- java`'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--- java`'
- en: '`----- LibraryTest.java`'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`----- LibraryTest.java`'
- en: The two Java files, `Library.java` and `LibraryTest.java`, can be deleted.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 可以删除两个Java文件，`Library.java`和`LibraryTest.java`。
- en: 'Now, modify the Gradle build file called `build.gradle`, and replace it with
    *Listing 2.3*:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，修改名为`build.gradle`的Gradle构建文件，并用*列表2.3*替换它：
- en: '[PRE12]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Listing 2.3: ProcessingEngine Gradle build file'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 列表2.3：ProcessingEngine Gradle构建文件
- en: 'This file shows the library dependencies for the engine:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件显示了引擎的库依赖项：
- en: '`kafka_2.12`, are the dependencies for Apache Kafka'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kafka_2.12`是Apache Kafka的依赖项'
- en: '`jackson-databind` is the library for JSON parsing and manipulation'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jackson-databind`是用于JSON解析和操作的库'
- en: 'To compile the sources and download the required libraries, type the command:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 要编译源代码并下载所需的库，请输入以下命令：
- en: '[PRE13]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The output is something like the following:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 输出类似于以下内容：
- en: '[PRE14]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The project can be created with Maven or SBT, even from an IDE (IntelliJ, Eclipse,
    Netbeans). But for simplicity here, it was created with Gradle.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 项目可以用Maven或SBT创建，甚至可以从IDE（IntelliJ、Eclipse、Netbeans）创建。但为了简单起见，这里使用Gradle创建。
- en: 'For more information about the build tools, visit the following links:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于构建工具的信息，请访问以下链接：
- en: 'Gradle''s main page: [http://www.gradle.org](http://www.gradle.org)'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gradle的主页：[http://www.gradle.org](http://www.gradle.org)
- en: 'Maven''s main page: [http://maven.apache.org](http://maven.apache.org)'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Maven的主页：[http://maven.apache.org](http://maven.apache.org)
- en: 'SBT''s main page: [http://www.scala-sbt.org/](http://www.scala-sbt.org/)'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SBT的主页：[http://www.scala-sbt.org/](http://www.scala-sbt.org/)
- en: Reading from Kafka
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从Kafka读取
- en: Now that we have our project skeleton, let's recall the project requirements
    for the stream processing engine. Remember that our event customer consults ETH
    price occurs outside Monedero and that these messages may not be well formed,
    that is, they may have defects. The first step in our pipeline is to validate
    that the input events have the correct data and the correct structure. Our project
    will be called `ProcessingEngine`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经有了我们的项目骨架，让我们回顾一下流处理引擎的项目要求。记住，我们的事件客户咨询ETH价格发生在Monedero之外，并且这些消息可能没有很好地形成，也就是说，它们可能有缺陷。我们管道的第一步是验证输入事件具有正确的数据和正确的结构。我们的项目将被称为`ProcessingEngine`。
- en: 'The `ProcessingEngine` specification shall create a pipeline application that
    does the following:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`ProcessingEngine`规范应创建一个执行以下操作的管道应用程序：'
- en: Reads each message from a Kafka topic called **input-messages**
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从名为**input-messages**的Kafka主题读取每条消息
- en: Validates each message, sending any invalid event to a specific Kafka topic
    called **invalid-messages**
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证每条消息，将任何无效事件发送到名为**invalid-messages**的特定Kafka主题
- en: Writes the correct messages in a Kafka topic called **valid-messages**
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将正确的消息写入名为**valid-messages**的Kafka主题
- en: 'These steps are detailed in *Figure 2.1*, the first sketch for the pipeline
    processing engine:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤在*图2.1*中详细说明，这是管道处理引擎的第一个草图：
- en: '![](img/aa921a59-34d9-4f98-9348-28e924f796e0.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/aa921a59-34d9-4f98-9348-28e924f796e0.png)'
- en: 'Figure 2.1: The processing engine reads events from the input-messages topic,
    validates the messages, and routes the defective ones to invalid-messages topic
    and the correct ones to valid-messages topic'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.1：处理引擎从输入消息主题读取事件，验证消息，并将有缺陷的消息路由到无效消息主题，正确的消息路由到有效消息主题
- en: 'The processing engine stream construction has two phases:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 处理引擎流构建有两个阶段：
- en: Create a simple Kafka worker that reads from the **input-messages** topic in
    Kafka and writes the events to another topic
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个简单的Kafka工作器，从Kafka的**input-messages**主题读取并写入另一个主题的事件
- en: Modify the Kafka worker to make the validation
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改Kafka工作器以进行验证
- en: So, let's proceed with the first step. Build a Kafka worker that reads individual
    raw messages from the **input-messages** topic. We say in the Kafka jargon that
    a consumer is needed. If you recall, in the first chapter we built a command-line
    producer to write events to a topic and a command-line consumer to read the events
    from that topic. Now, we will code the same consumer in Java.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们进行第一步。构建一个Kafka工作器，从**input-messages**主题读取单个原始消息。我们在Kafka术语中说需要一个消费者。如果你还记得，在第一章中我们构建了一个命令行生产者将事件写入主题，以及一个命令行消费者从该主题读取事件。现在，我们将用Java编写相同的消费者。
- en: For our project, a consumer is a Java interface that contains all of the necessary
    behavior for all classes that implement consumers.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的项目，消费者是一个Java接口，它包含所有实现消费者类的必要行为。
- en: 'Create a file called `Consumer.java` in the `src/main/java/monedero/` directory
    with the content of *Listing 2.4*:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在`src/main/java/monedero/`目录下创建一个名为`Consumer.java`的文件，其内容为*列表2.4*：
- en: '[PRE15]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Listing 2.4: Consumer.java'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 列表2.4：Consumer.java
- en: The consumer interface encapsulates the common behavior of the Kafka consumers.
    The consumer interface has the `createConfig` method that sets all of the properties
    needed by all of the Kafka consumers. Note that the deserializers are of the `StringDeserializer`
    type because the Kafka consumer reads Kafka key-value records where the value
    are of the type string.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 消费者接口封装了 Kafka 消费者的通用行为。消费者接口有一个 `createConfig` 方法，用于设置所有 Kafka 消费者所需的属性。请注意，反序列化器是
    `StringDeserializer` 类型，因为 Kafka 消费者读取的 Kafka 键值记录中的值是字符串类型。
- en: 'Now, create a file called `Reader.java` in the `src/main/java/monedero/` directory
    with the content of *Listing 2.5*:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在 `src/main/java/monedero/` 目录下创建一个名为 `Reader.java` 的文件，其内容为 *清单 2.5*：
- en: '[PRE16]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Listing 2.5: Reader.java'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 2.5：Reader.java
- en: 'The `Reader` class implements the consumer interface. So, `Reader` is a Kafka
    consumer:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`Reader` 类实现了消费者接口。因此，`Reader` 是一个 Kafka 消费者：'
- en: In line `//1`, `<String, String>` says that `KafkaConsumer` reads Kafka records
    where the key and value are both of the type string
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在行 `//1` 中，`<String, String>` 表示 `KafkaConsumer` 读取的 Kafka 记录中键和值都是字符串类型
- en: In line `//2`, the consumer subscribes to the Kafka topic specified in its constructor
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在行 `//2` 中，消费者订阅了其构造函数中指定的 Kafka 主题
- en: In line `//3`, there is a `while(true)` infinite loop for demonstrative purposes;
    in practice, we need to deal with more robust code maybe, implementing `Runnable`
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在行 `//3` 中，有一个用于演示目的的 `while(true)` 无限循环；在实际应用中，我们可能需要处理更健壮的代码，可能实现 `Runnable`
- en: In line `//4`, this consumer will be pooling data from the specified topics
    every 100 milliseconds
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在行 `//4` 中，这个消费者将每隔 100 毫秒从指定的主题中收集数据
- en: In line `//5`, the consumer sends the message to be processed by the producer
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在行 `//5` 中，消费者将待处理的消息发送给生产者
- en: This consumer reads all of the messages from the specified Kafka topic and sends
    them to the process method of the specified producer. All of the configuration
    properties are specified in the consumer interface, but specifically the `groupId`
    property is important because it associates the consumer with a specific consumer
    group.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 此消费者从指定的 Kafka 主题读取所有消息，并将它们发送到指定生产者的 process 方法。所有配置属性都在消费者接口中指定，但具体来说，`groupId`
    属性很重要，因为它将消费者与特定的消费者组关联起来。
- en: The consumer group is useful when we need to share the topic's events across
    all of the group's members. Consumer groups are also used to group or isolate
    different instances.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要在所有组成员之间共享主题的事件时，消费者组非常有用。消费者组还用于将不同的实例分组或隔离。
- en: 'To read more about the Kafka Consumer API, follow this link: [https://kafka.apache.org/20/javadoc/org/apache/kafka/clients/consumer/KafkaConsumer.html/](https://kafka.apache.org/20/javadoc/org/apache/kafka/clients/consumer/KafkaConsumer.html)'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 Kafka 消费者 API 的信息，请点击此链接：[https://kafka.apache.org/20/javadoc/org/apache/kafka/clients/consumer/KafkaConsumer.html/](https://kafka.apache.org/20/javadoc/org/apache/kafka/clients/consumer/KafkaConsumer.html)
- en: Writing to Kafka
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 写入 Kafka
- en: Our `Reader` invokes the `process()` method; this method belonging to the `Producer`
    class. As with the consumer interface, the producer interface encapsulates all
    of the common behavior of the Kafka producers. The two producers in this chapter
    implement this producer interface.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 `Reader` 调用了 `process()` 方法；这个方法属于 `Producer` 类。与消费者接口一样，生产者接口封装了 Kafka
    生产者的所有通用行为。本章中的两个生产者实现了这个生产者接口。
- en: 'In a file called `Producer.java`, located in the `src/main/java/monedero` directory,
    copy the content of *Listing 2.6*:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `src/main/java/monedero` 目录下，一个名为 `Producer.java` 的文件中，复制 *清单 2.6* 的内容：
- en: '[PRE17]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Listing 2.6: Producer.java'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 2.6：Producer.java
- en: 'The producer interface has the following observations:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 生产者接口有以下观察结果：
- en: An abstract method called process invoked in the `Reader` class
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `Reader` 类中调用的名为 process 的抽象方法
- en: A static method called write that sends a message to the producer in the specified
    topic
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个名为 write 的静态方法，它将消息发送到指定主题的生产者
- en: A static method called `createConfig`, where it sets all of the properties required
    for a generic producer
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个名为 `createConfig` 的静态方法，其中设置了通用生产者所需的全部属性
- en: As with the consumer interface, an implementation of the producer interface
    is needed. In this first version, we just pass the incoming messages to another
    topic without modifying the messages. The implementation code is in *Listing 2.7*
    and should be saved in a file called `Writer.java` in the `src/main/java/m` directory.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 与消费者接口一样，需要一个生产者接口的实现。在这个第一个版本中，我们只是将传入的消息传递到另一个主题，而不修改消息。实现代码在 *清单 2.7* 中，应保存为
    `src/main/java/m` 目录下的 `Writer.java` 文件。
- en: 'The following is the content of *Listing 2.7*, `Writer.java`:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为*列表2.7*，`Writer.java`的内容：
- en: '[PRE18]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Listing 2.7: Writer.java'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 列表2.7：Writer.java
- en: 'In this implementation of the `Producer` class, we see the following:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Producer`类的这个实现中，我们可以看到以下内容：
- en: The `createConfig` method is invoked to set the necessary properties from the
    producer interface
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`createConfig`方法被调用，以从生产者接口设置必要的属性'
- en: The process method writes each incoming message in the output topic. As the
    message arrives from the topic, it is sent to the target topic
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`process`方法将每条传入的消息写入输出主题。随着消息从主题到达，它被发送到目标主题'
- en: This producer implementation is very simple; it doesn't modify, validate, or
    enrich the messages. It just writes them to the output topic.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这个生产者实现非常简单；它不修改、验证或丰富消息。它只是将它们写入输出主题。
- en: 'To read more about the Kafka producer API, follow this link:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于Kafka生产者API的信息，请点击以下链接：
- en: '[https://kafka.apache.org/0110/javadoc/index.html?org/apache/kafka/clients/consumer/KafkaProducer.html](https://kafka.apache.org/0110/javadoc/index.html?org/apache/kafka/clients/consumer/KafkaProducer.html)'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://kafka.apache.org/0110/javadoc/index.html?org/apache/kafka/clients/consumer/KafkaProducer.html](https://kafka.apache.org/0110/javadoc/index.html?org/apache/kafka/clients/consumer/KafkaProducer.html)'
- en: Running the processing engine
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行处理引擎
- en: The `ProcessingEngine` class coordinates the `Reader` and `Writer` classes.
    It contains the main method to coordinate them. Create a new file called `ProcessingEngine.java`
    in the `src/main/java/monedero/` directory and copy therein the code in *Listing
    2.8*.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`ProcessingEngine`类协调`Reader`和`Writer`类。它包含协调它们的主方法。在`src/main/java/monedero/`目录下创建一个名为`ProcessingEngine.java`的新文件，并将*列表2.8*中的代码复制进去。'
- en: 'The following is the content of *Listing 2.8*, `ProcessingEngine.java`:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为*列表2.8*，`ProcessingEngine.java`的内容：
- en: '[PRE19]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Listing 2.8: ProcessingEngine.java'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 列表2.8：ProcessingEngine.java
- en: '`ProcessingEngine` receives four arguments from the command line:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`ProcessingEngine`从命令行接收四个参数：'
- en: '`args[0]` `servers`, the host and port of the Kafka broker'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`args[0]` `servers`，Kafka代理的主机和端口'
- en: '`args[1]` `groupId`, the consumer group of the consumer'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`args[1]` `groupId`，消费者的消费者组'
- en: '`args[2]` `sourceTopic`, `inputTopic` where `Reader` reads from'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`args[2]` `sourceTopic`，`inputTopic`，`Reader`从中读取'
- en: '`args[3]` `targetTopic`, `outputTopic` where `Writer` writes to'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`args[3]` `targetTopic`，`outputTopic`，`Writer`写入到'
- en: 'To build the project, run this command from the `monedero` directory:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建项目，从`monedero`目录运行以下命令：
- en: '[PRE20]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'If everything is OK, the output is something like the following:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切正常，输出将类似于以下内容：
- en: '[PRE21]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'To run the project, we need to open three different command-line windows. *Figure
    2.2* shows what the command-line windows should look:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行项目，我们需要打开三个不同的命令行窗口。*图2.2*显示了命令行窗口应该看起来是什么样子：
- en: '![](img/3a54e6f9-9d05-4ca0-9b0d-1d65736f1f7c.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3a54e6f9-9d05-4ca0-9b0d-1d65736f1f7c.jpg)'
- en: 'Figure 2.2: The three terminal windows to test the processing engine including
    message producer, message consumer, and the application itself'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.2：测试处理引擎的三个终端窗口，包括消息生产者、消息消费者以及应用程序本身
- en: 'In the first command-line terminal, move to the `Confluent` directory and start
    it, as follows:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第一个命令行终端中，切换到`Confluent`目录并启动它，如下所示：
- en: '[PRE22]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Once the control center (Zookeeper and Kafka included) is running in the same
    command-line terminal, generate the two necessary topics, as follows:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦控制中心（包括Zookeeper和Kafka）在同一命令行终端中运行，按照以下方式生成两个必要的主题：
- en: '[PRE23]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Recall, to display the topics running in our cluster type, use the following:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下，要显示我们集群中运行的主题，请使用以下命令：
- en: '[PRE24]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'If you had a mistyping error, to delete some topic (just in case), type the
    following:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有误输入，要删除某些主题（以防万一），请输入以下命令：
- en: '[PRE25]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In the same command-line terminal, start the console producer running the `input-topic`
    topic, as follows:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一命令行终端中，启动运行`input-topic`主题的控制台生产者，如下所示：
- en: '[PRE26]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This window is where the input messages are typed.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 这个窗口是输入消息的地方。
- en: 'In the second command-line terminal, start a console consumer listening to
    `output-topic` by typing the following:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第二个命令行终端中，通过输入以下内容启动监听`output-topic`的控制台消费者：
- en: '[PRE27]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In the third command-line terminal, start the processing engine. Go to the
    project root directory where the `gradle jar` command was executed and run, as
    follows:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第三个命令行终端中，启动处理引擎。转到执行`gradle jar`命令的项目根目录并运行，如下所示：
- en: '[PRE28]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Now, the show consists in reading all of the events from `input-topic` and writing
    them in `output-topic`.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，展示的内容包括从`input-topic`读取所有事件并将它们写入`output-topic`。
- en: 'Go to the first command-line terminal (the message producer) and send the following
    three messages (remember to type enter between messages and execute each one in
    just one line):'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 前往第一个命令行终端（消息生产者），发送以下三条消息（记得在消息之间按回车，并且每条消息只执行一行）：
- en: '[PRE29]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: If everything is working fine, the messages typed in the console-producer should
    be appearing in the console-consumer window, because the processing engine is
    copying from `input-topic` to `output-topic`.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切正常，控制台生产者中输入的消息应该出现在控制台消费者窗口中，因为处理引擎正在从 `input-topic` 复制到 `output-topic`。
- en: The next step is to move onto a more complex version involving message validation
    (this current chapter), message enrichment([Chapter 3](fa29d3d4-38ab-49c0-9e81-08bc59944488.xhtml),
    *Message Enrichment*), and message transformation ([Chapter 4](b444c6b4-4a8f-478c-9d3f-93a432d168b8.xhtml),
    *Serialization*).
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是将更复杂的版本涉及消息验证（当前章节）、消息丰富([第3章](fa29d3d4-38ab-49c0-9e81-08bc59944488.xhtml)，*消息丰富*)和消息转换([第4章](b444c6b4-4a8f-478c-9d3f-93a432d168b8.xhtml)，*序列化*)。
- en: Using the same suggestion made in the [Chapter 1](0bde3875-cd30-435c-9b32-b96fccb2e6d0.xhtml),
    *Configuring Kafka*, the replication-factor and partitions parameters where set
    to 1; try setting different values and see what happens when you stop one server.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[第1章](0bde3875-cd30-435c-9b32-b96fccb2e6d0.xhtml)中提出的相同建议，*配置 Kafka*，将复制因子和分区参数设置为
    1；尝试设置不同的值，并观察停止一个服务器时会发生什么。
- en: Coding a validator in Java
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用 Java 编写验证器
- en: 'The `Writer` class implements the producer interface. The idea is to modify
    that `Writer` and build a validation class with minimum effort. The `Validator`
    process is as follows:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`Writer` 类实现了生产者接口。想法是修改这个 `Writer` 并以最小的努力构建一个验证类。`Validator` 处理过程如下：'
- en: Read the Kafka messages from the **input-messages** topic
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从**输入消息**主题读取 Kafka 消息
- en: Validate the messages, sending defective messages to the **invalid-messages**
    topic
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证消息，将不合格的消息发送到**无效消息**主题
- en: Write the well-formed messages to **valid-messages** topic
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将格式良好的消息写入**有效消息**主题
- en: 'At the moment, for this example, the definition of a valid message is a message
    t0 which the following applies:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，对于这个例子，有效消息的定义是一个满足以下条件的消息：
- en: It is in JSON format
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是 JSON 格式
- en: 'It contains the four required fields: event, customer, currency, and timestamp'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它包含四个必需的字段：事件、客户、货币和时间
- en: 'If these conditions are not met, a new error message in JSON format is generated,
    sending it to the invalid-messages Kafka topic. The schema of this error message
    is very simple:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这些条件不满足，将生成一个新的 JSON 格式错误消息，并将其发送到无效消息 Kafka 主题。这个错误消息的架构非常简单：
- en: '[PRE30]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The first step is create a new `Validator.java` file in the `src/main/java/monedero/`
    directory, and copy therein the content of *Listing 2.9*.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是在 `src/main/java/monedero/` 目录中创建一个新的 `Validator.java` 文件，并复制其中 *列表 2.9*
    的内容。
- en: 'The following is the content of *Listing 2.9*, `Validator.java`:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为 *列表 2.9*，`Validator.java` 的内容：
- en: '[PRE31]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Listing 2.9: Validator.java'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2.9：Validator.java
- en: 'As with `Writer`, the `Validator` class also implements the `Producer` class,
    but with the following:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `Writer` 类一样，`Validator` 类也实现了 `Producer` 类，但如下：
- en: 'In line `//1`, its constructor takes two topics: the valid and the invalid-messages
    topic'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第 `//1` 行，其构造函数接受两个主题：有效消息主题和无效消息主题
- en: 'In line `//2`, the process method validates the fact that the message is in
    JSON format along with the existence of the fields: event, customer, currency,
    and timestamp'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第 `//2` 行，process 方法验证消息是否为 JSON 格式，以及字段：事件、客户、货币和时间的存在
- en: In line `//3`, in case the message doesn't have any required field, an error
    message is sent to the invalid-messages topic
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第 `//3` 行，如果消息没有任何必需的字段，则将错误消息发送到无效消息主题
- en: In line `//4`, in case the message is valid, the message is sent to the valid-messages
    topic
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第 `//4` 行，如果消息有效，则将消息发送到有效消息主题
- en: In line `//5`, in case the message is not in JSON format, an error message is
    sent to the invalid-messages topic
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第 `//5` 行，如果消息不是 JSON 格式，则将错误消息发送到无效消息主题
- en: Running the validation
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行验证
- en: At the moment, the `ProcessingEngine` class coordinates the `Reader` and `Writer`
    classes. It contains the main method to coordinate them. We have to edit the `ProcessingEngine`
    class located in the `src/main/java/monedero/` directory and change `Writer` with
    `Validator`, as in *Listing 2.10*.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，`ProcessingEngine` 类协调 `Reader` 和 `Writer` 类。它包含协调它们的主要方法。我们必须编辑位于 `src/main/java/monedero/`
    目录中的 `ProcessingEngine` 类，并将 `Writer` 替换为 `Validator`，如*列表 2.10*所示。
- en: 'The following is the content of *Listing 2.10*, `ProcessingEngine.java`:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为*列表2.10*，`ProcessingEngine.java`的内容：
- en: '[PRE32]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Listing 2.10: ProcessingEngine.java'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 列表2.10：ProcessingEngine.java
- en: '`ProcessingEngine` receives five arguments from the command line:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '`ProcessingEngine`从命令行接收五个参数：'
- en: '`args[0]` `servers`, indicates the host and port of the Kafka broker'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`args[0]` `servers`，表示Kafka代理的主机和端口'
- en: '`args[1]` `groupId`, indicates that the consumer is part of this Kafka consumer
    group'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`args[1]` `groupId`，表示消费者是这个Kafka消费者组的一部分'
- en: '`args[2]` `inputTopic`, the topic where `Reader` reads from'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`args[2]` `inputTopic`，`Reader`读取的主题'
- en: '`args[3]` `validTopic`, the topic where valid messages are sent'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`args[3]` `validTopic`，有效消息发送的主题'
- en: '`args[4]` `invalidTopic`, the topic where invalid messages are sent'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`args[4]` `invalidTopic`，无效消息发送的主题'
- en: 'To rebuild the project from the `monedero` directory, run the following command:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 要从`monedero`目录重新构建项目，运行以下命令：
- en: '[PRE33]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'If everything is OK, the output should be similar to the following:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切正常，输出应该类似于以下内容：
- en: '[PRE34]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'To run the project, we need four different command-line windows. *Figure 2.3*
    shows the command-line windows arrangement:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行项目，我们需要四个不同的命令行窗口。*图2.3*显示了命令行窗口的布局：
- en: '![](img/ee505494-9d3a-4107-8adb-6d2780afa3cf.jpg)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ee505494-9d3a-4107-8adb-6d2780afa3cf.jpg)'
- en: 'Figure 2.3: The four terminal windows to test the processing engine including:
    message producer, valid-message consumer, invalid-message consumer, and the processing
    engine itself'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.3：测试处理引擎的四个终端窗口，包括：消息生产者、有效消息消费者、无效消息消费者和处理引擎本身
- en: 'In the first command-line terminal, go to the Kafka installation directory
    and generate the two necessary topics:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第一个命令行终端中，进入Kafka安装目录并生成两个必要的主题：
- en: '[PRE35]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Then, start a console producer to the `input-topic` topic, as follows:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，启动一个向`input-topic`主题的控制台生产者，如下所示：
- en: '[PRE36]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This window is where the input messages are produced (typed).
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 这个窗口是输入消息被产生（输入）的地方。
- en: 'In the second command-line window, start a command-line consumer listening
    to the valid-messages topic, as follows:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第二个命令行窗口中，启动一个监听有效消息主题的命令行消费者，如下所示：
- en: '[PRE37]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'In the third command-line window, start a command-line consumer listening to
    invalid-messages topic, as follows:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第三个命令行窗口中，启动一个监听无效消息主题的命令行消费者，如下所示：
- en: '[PRE38]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'In the fourth command-line terminal, start up the processing engine. From the
    project root directory (where the `gradle jar` command were executed), run the
    following command:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第四个命令行终端中，启动处理引擎。从项目根目录（执行`gradle jar`命令的地方），运行以下命令：
- en: '[PRE39]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'From the first command-line terminal (the console producer), send the following
    three messages (remember to type enter between messages and execute each one in
    just one line):'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 从第一个命令行终端（控制台生产者），发送以下三条消息（记住在消息之间按回车，并且每条消息只执行一行）：
- en: '[PRE40]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: As these are valid messages, the messages typed in the producer console should
    appear in the valid-messages consumer console window.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些是有效消息，生产者控制台输入的消息应该出现在有效消息消费者控制台窗口中。
- en: 'Now try sending defective messages; first, try messages that are not in JSON
    format:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 现在尝试发送有缺陷的消息；首先，尝试不是JSON格式的消息：
- en: '[PRE41]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'This message should be received in the invalid messages topic (and displayed
    in the window), as in the following example:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 这条消息应该被接收在无效消息主题中（并在窗口中显示），如下所示：
- en: '[PRE42]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Then, let''s try something more complex, the first message but without a timestamp,
    as in the example:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，让我们尝试更复杂的事情，第一条消息但没有时间戳，就像在示例中那样：
- en: '[PRE43]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'This message should be received in the invalid messages topic, as follows:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 这条消息应该被接收在无效消息主题中，如下所示：
- en: '[PRE44]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: The message validation is complete and, as you can see, there is a lot more
    validation to do, for example, validation against JSON schemas, but this is covered
    in [Chapter 5](f7fa5729-8bf7-41c8-aba6-aa5f8663394f.xhtml), *Schema Registry*.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 消息验证已完成，如您所见，还有更多验证要做，例如，验证JSON模式，但这将在[第5章](f7fa5729-8bf7-41c8-aba6-aa5f8663394f.xhtml)，“模式注册”中介绍。
- en: The architecture detailed in *Figure 2.1* of this chapter will be used in [Chapter
    3](fa29d3d4-38ab-49c0-9e81-08bc59944488.xhtml), *Message Enrichment*.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中详细介绍的*图2.1*的架构将在[第3章](fa29d3d4-38ab-49c0-9e81-08bc59944488.xhtml)，“消息丰富”中使用。
- en: Summary
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter we learned how to model the messages in JSON format and how
    to set up a Kafka project with Gradle.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何对JSON格式的消息进行建模，以及如何使用Gradle设置Kafka项目。
- en: Also, we learned how to write to and read from Kafka with a Java client, how
    to run the processing engine, how to code a validator in Java, and how to run
    the message validation.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还学习了如何使用Java客户端向Kafka写入和读取数据，如何运行处理引擎，如何用Java编写验证器，以及如何运行消息验证。
- en: In [Chapter 3](fa29d3d4-38ab-49c0-9e81-08bc59944488.xhtml), *Message Enrichment*,
    the architecture of this chapter will be redesigned to incorporate message enrichment.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](fa29d3d4-38ab-49c0-9e81-08bc59944488.xhtml)“消息增强”中，本章的架构将被重新设计以包含消息增强。
