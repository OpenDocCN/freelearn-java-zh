["```java\n    import io.reactivex.Observable;\n\n    public class Launcher {\n\n      public static void main(String[] args) {\n\n        Observable<String> source = Observable.create(emitter -> {\n            emitter.onNext(\"Alpha\");\n            emitter.onNext(\"Beta\");\n            emitter.onNext(\"Gamma\");\n            emitter.onNext(\"Delta\");\n            emitter.onNext(\"Epsilon\");\n            emitter.onComplete();\n        });\n\n        source.subscribe(s -> System.out.println(\"RECEIVED: \" + s));\n      }\n    }\n```", "```java\n    RECEIVED: Alpha\n    RECEIVED: Beta\n    RECEIVED: Gamma\n    RECEIVED: Delta\n    RECEIVED: Epsilon\n```", "```java\n    import io.reactivex.Observable;\n\n      public class Launcher {\n\n      public static void main(String[] args) {\n\n        Observable<String> source = Observable.create(emitter -> {\n          try {\n            emitter.onNext(\"Alpha\");\n            emitter.onNext(\"Beta\");\n            emitter.onNext(\"Gamma\");\n            emitter.onNext(\"Delta\");\n            emitter.onNext(\"Epsilon\");\n            emitter.onComplete();\n          } catch (Throwable e) {\n            emitter.onError(e);\n          }\n        });\n\n        source.subscribe(s -> System.out.println(\"RECEIVED: \" + s),      Throwable::printStackTrace);\n      }\n   }\n```", "```java\n    import io.reactivex.Observable;\n\n    public class Launcher {\n    public static void main(String[] args) {\n      Observable<String> source = Observable.create(emitter -> {\n        try {\n          emitter.onNext(\"Alpha\");\n          emitter.onNext(\"Beta\");\n          emitter.onNext(\"Gamma\");\n          emitter.onNext(\"Delta\");\n          emitter.onNext(\"Epsilon\");\n          emitter.onComplete();\n        } catch (Throwable e) {\n          emitter.onError(e);\n        }\n      });\n      Observable<Integer> lengths = source.map(String::length);\n\n      Observable<Integer> filtered = lengths.filter(i -> i >= 5);\n\n      filtered.subscribe(s -> System.out.println(\"RECEIVED: \" +  \n      s));    \n     }\n    }\n```", "```java\n    RECEIVED: 5\n    RECEIVED: 5\n    RECEIVED: 5\n    RECEIVED: 7\n```", "```java\n    import io.reactivex.Observable;\n\n      public class Launcher {\n      public static void main(String[] args) {\n        Observable<String> source = Observable.create(emitter -> {\n          try {\n            emitter.onNext(\"Alpha\");\n            emitter.onNext(\"Beta\");\n            emitter.onNext(\"Gamma\");\n            emitter.onNext(\"Delta\");\n            emitter.onNext(\"Epsilon\");\n            emitter.onComplete();\n          } catch (Throwable e) {\n            emitter.onError(e);\n          }\n        });\n        source.map(String::length)\n        .filter(i -> i >= 5)\n          .subscribe(s -> System.out.println(\"RECEIVED: \" + s));\n       }\n    }\n```", "```java\n    RECEIVED: 5\n    RECEIVED: 5\n    RECEIVED: 5\n    RECEIVED: 7\n```", "```java\n    import io.reactivex.Observable;\n\n    public class Launcher {\n      public static void main(String[] args) {\n        Observable<String> source =\n          Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \n          \"Epsilon\");\n\n    source.map(String::length).filter(i -> i >= 5)\n          .subscribe(s -> System.out.println(\"RECEIVED: \" + s));\n      }\n    }\n```", "```java\n    import io.reactivex.Observable;\n    import java.util.Arrays;\n    import java.util.List;\n\n    public class Launcher {\n      public static void main(String[] args) {\n\n        List<String> items =\n          Arrays.asList(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Epsilon\");\n\n        Observable<String> source = Observable.fromIterable(items);\n        source.map(String::length).filter(i -> i >= 5)\n          .subscribe(s -> System.out.println(\"RECEIVED: \" + s));\n      }\n   }\n```", "```java\n    package io.reactivex;\n\n    import io.reactivex.disposables.Disposable;\n\n    public interface Observer<T> {\n      void onSubscribe(Disposable d);\n      void onNext(T value);\n      void onError(Throwable e);\n      void onComplete();\n   }\n```", "```java\n    import io.reactivex.Observable;\n    import io.reactivex.Observer;\n    import io.reactivex.disposables.Disposable;\n\n    public class Launcher {\n\n      public static void main(String[] args) {\n\n        Observable<String> source =\n          Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \n          \"Epsilon\");\n\n        Observer<Integer> myObserver = new Observer<Integer>() {\n          @Override\n          public void onSubscribe(Disposable d) {\n            //do nothing with Disposable, disregard for now \n          }\n\n          @Override\n          public void onNext(Integer value) {\n            System.out.println(\"RECEIVED: \" + value);\n          }\n\n          @Override\n          public void onError(Throwable e) {\n            e.printStackTrace();\n          }\n\n          @Override\n          public void onComplete() {\n            System.out.println(\"Done!\");\n          }\n         };\n\n         source.map(String::length).filter(i -> i >= 5)\n           .subscribe(myObserver);\n       }\n    }\n\n```", "```java\n    RECEIVED: 5\n    RECEIVED: 5\n    RECEIVED: 5\n    RECEIVED: 7\n    Done!\n```", "```java\n    Consumer<Integer> onNext = i ->  System.out.println(\"RECEIVED: \"          + i);\n\n    Action onComplete = () -> System.out.println(\"Done!\");\n\n    Consumer<Throwable> onError = Throwable::printStackTrace;\n\n```", "```java\n    import io.reactivex.Observable;\n\n    public class Launcher {\n\n      public static void main(String[] args) {\n\n        Observable<String> source =\n          Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\",\n          \"Epsilon\");\n\n        source.map(String::length).filter(i -> i >= 5)\n          .subscribe(i -> System.out.println(\"RECEIVED: \" + i),\n          Throwable::printStackTrace,\n() ->  System.out.println(\"Done!\"));\n      }\n   }\n\n```", "```java\n    RECEIVED: 5\n    RECEIVED: 5\n    RECEIVED: 5\n    RECEIVED: 7\n    Done!\n```", "```java\n    import io.reactivex.Observable;\n\n    public class Launcher {\n\n      public static void main(String[] args) {\n\n        Observable<String> source =\n          Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \n          \"Epsilon\");\n\n        source.map(String::length).filter(i -> i >= 5)\n          .subscribe(i -> System.out.println(\"RECEIVED: \" + i),\n            Throwable::printStackTrace);\n      }\n    }\n```", "```java\n    RECEIVED: 5\n    RECEIVED: 5\n    RECEIVED: 5\n    RECEIVED: 7\n\n```", "```java\n    import io.reactivex.Observable;\n\n    public class Launcher {\n\n      public static void main(String[] args) {\n\n        Observable<String> source =\n          Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\",\n          \"Epsilon\");\n\n        source.map(String::length).filter(i -> i >= 5)\n          .subscribe(i -> System.out.println(\"RECEIVED: \" + i));\n      }\n   }\n\n```", "```java\n      import io.reactivex.Observable;\n\n      public class Launcher {\n      public static void main(String[] args) {\n\n        Observable<String> source =\n          Observable.just(\"Alpha\",\"Beta\",\"Gamma\",\"Delta\",\"Epsilon\");\n\n        //first observer\n        source.subscribe(s -> System.out.println(\"Observer 1 Received: \n          \" + s));\n\n        //second observer\n        source.subscribe(s -> System.out.println(\"Observer 2 Received:\n          \" + s));\n\n      }\n    }\n```", "```java\n    Observer 1 Received: Alpha\n    Observer 1 Received: Beta\n    Observer 1 Received: Gamma\n    Observer 1 Received: Delta\n    Observer 1 Received: Epsilon\n    Observer 2 Received: Alpha\n    Observer 2 Received: Beta\n    Observer 2 Received: Gamma\n    Observer 2 Received: Delta\n    Observer 2 Received: Epsilon\n```", "```java\n    import io.reactivex.Observable;\n\n    public class Launcher {\n      public static void main(String[] args) {\n\n        Observable<String> source =\n          Observable.just(\"Alpha\",\"Beta\",\"Gamma\",\"Delta\",\"Epsilon\");\n\n        //first observer\n        source.subscribe(s -> System.out.println(\"Observer 1 Received:\n          \" + s));\n\n        //second observer\n        source.map(String::length).filter(i -> i >= 5)\n          .subscribe(s -> System.out.println(\"Observer 2 Received: \" + \n        s));\n\n      }\n   }\n```", "```java\n    Observer 1 Received: Alpha\n    Observer 1 Received: Beta\n    Observer 1 Received: Gamma\n    Observer 1 Received: Delta\n    Observer 1 Received: Epsilon\n    Observer 2 Received: 5\n    Observer 2 Received: 5\n    Observer 2 Received: 5\n    Observer 2 Received: 7\n```", "```java\n    import com.github.davidmoten.rx.jdbc.ConnectionProviderFromUrl;\n    import com.github.davidmoten.rx.jdbc.Database;\n    import rx.Observable;\n    import java.sql.Connection;\n\n    public class Launcher {\n      public static void main(String[] args) {\n        Connection conn = \n      new ConnectionProviderFromUrl(\"jdbc:sqlite:/home/thomas \n            /rexon_metals.db\").get();\n\n      Database db = Database.from(conn);\n\n        Observable<String> customerNames =\n          db.select(\"SELECT NAME FROM CUSTOMER\")\n          .getAs(String.class);\n\n        customerNames.subscribe(s -> System.out.println(s));\n      }\n   }\n\n```", "```java\n    LITE Industrial\n    Rex Tooling Inc\n    Re-Barre Construction\n    Prairie Construction\n    Marsh Lane Metal Works\n```", "```java\n    import io.reactivex.Observable;\n    import javafx.application.Application;\n    import javafx.beans.value.ChangeListener;\n    import javafx.beans.value.ObservableValue;\n    import javafx.scene.Scene;\n    import javafx.scene.control.Label;\n    import javafx.scene.control.ToggleButton;\n    import javafx.scene.layout.VBox;\n    import javafx.stage.Stage;\n\n     public class MyJavaFxApp extends Application {\n\n      @Override\n     public void start(Stage stage) throws Exception {\n\n      ToggleButton toggleButton = new ToggleButton(\"TOGGLE ME\");\n      Label label = new Label();\n\n      Observable<Boolean> selectedStates =\n        valuesOf(toggleButton.selectedProperty());\n\n      selectedStates.map(selected -> selected ? \"DOWN\" : \"UP\")\n        .subscribe(label::setText);\n\n      VBox vBox = new VBox(toggleButton, label);\n\n      stage.setScene(new Scene(vBox));\n      stage.show();\n     }\n\n     private static <T> Observable<T> valuesOf(final\n     ObservableValue<T> fxObservable) {\n       return Observable.create(observableEmitter -> {\n\n         //emit initial state\n         observableEmitter.onNext(fxObservable.getValue());\n\n         //emit value changes uses a listener\n         final ChangeListener<T> listener = (observableValue, prev,\n         current) -> observableEmitter.onNext(current);\n\n         fxObservable.addListener(listener);\n       });\n     }\n   }\n```", "```java\n    import io.reactivex.Observable;\n    import io.reactivex.observables.ConnectableObservable;\n\n    public class Launcher {\n      public static void main(String[] args) {\n\n        ConnectableObservable<String> source =\n\n         Observable.just(\"Alpha\",\"Beta\",\"Gamma\",\"Delta\",\"Epsilon\")\n         .publish();\n\n         //Set up observer 1\n         source.subscribe(s -> System.out.println(\"Observer 1: \" + s));\n\n        //Set up observer 2\n        source.map(String::length)\n          .subscribe(i -> System.out.println(\"Observer 2: \" + i));\n\n        //Fire!\n        source.connect();\n      }\n}\n```", "```java\n    Observer 1: Alpha\n    Observer 2: 5\n    Observer 1: Beta\n    Observer 2: 4\n    Observer 1: Gamma\n    Observer 2: 5\n    Observer 1: Delta\n    Observer 2: 5\n    Observer 1: Epsilon\n    Observer 2: 7\n```", "```java\n    import io.reactivex.Observable;\n\n    public class Launcher {\n      public static void main(String[] args) {\n        Observable.range(1,10)\n          .subscribe(s -> System.out.println(\"RECEIVED: \" + s));\n\n      }\n   }\n```", "```java\n    RECEIVED: 1\n    RECEIVED: 2\n    RECEIVED: 3\n    RECEIVED: 4\n    RECEIVED: 5\n    RECEIVED: 6\n    RECEIVED: 7\n    RECEIVED: 8\n    RECEIVED: 9\n    RECEIVED: 10\n```", "```java\n    import io.reactivex.Observable;\n\n    public class Launcher {\n      public static void main(String[] args) {\n        Observable.range(5,10)\n        .subscribe(s -> System.out.println(\"RECEIVED: \" + s));\n\n      }\n     }\n```", "```java\n    RECEIVED: 5\n    RECEIVED: 6\n    RECEIVED: 7\n    RECEIVED: 8\n    RECEIVED: 9\n    RECEIVED: 10\n    RECEIVED: 11\n    RECEIVED: 12\n    RECEIVED: 13\n    RECEIVED: 14\n```", "```java\n    import io.reactivex.Observable;\n\n    import java.util.concurrent.TimeUnit;\n\n     public class Launcher {\n      public static void main(String[]args) {\n\n        Observable.interval(1, TimeUnit.SECONDS)\n          .subscribe(s -> System.out.println(s + \" Mississippi\"));\n          sleep(5000);\n\n      }\n      public static void sleep(int millis) {\n        try {\n          Thread.sleep(millis);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        }\n      }\n    }\n```", "```java\n    0 Mississippi\n    1 Mississippi\n    2 Mississippi\n    3 Mississippi\n    4 Mississippi\n```", "```java\n    import io.reactivex.Observable;\n    import java.util.concurrent.TimeUnit;\n\n    public class Launcher {\n\n      public static void main(String[] args) {\n\n        Observable<Long> seconds = Observable.interval(1,   \n        TimeUnit.SECONDS);\n\n        //Observer 1\n        seconds.subscribe(l -> System.out.println(\"Observer 1: \" + l));\n\n        //sleep 5 seconds\n        sleep(5000);\n\n        //Observer 2\n        seconds.subscribe(l -> System.out.println(\"Observer 2: \" + l));\n\n        //sleep 5 seconds\n        sleep(5000);\n       }\n\n      public static void sleep(int millis) {\n        try {\n          Thread.sleep(millis);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        }\n       }\n    }\n```", "```java\n    Observer 1: 0\n    Observer 1: 1\n    Observer 1: 2\n    Observer 1: 3\n    Observer 1: 4\n    Observer 1: 5\n    Observer 2: 0\n    Observer 1: 6\n    Observer 2: 1\n    Observer 1: 7\n    Observer 2: 2\n    Observer 1: 8\n    Observer 2: 3\n    Observer 1: 9\n    Observer 2: 4\n```", "```java\n    import io.reactivex.Observable;\n    import io.reactivex.observables.ConnectableObservable;\n    import java.util.concurrent.TimeUnit;\n\n     public class Launcher {\n\n      public static void main(String[] args) {\n        ConnectableObservable<Long> seconds =\n          Observable.interval(1, TimeUnit.SECONDS).publish();\n\n        //observer 1\n        seconds.subscribe(l -> System.out.println(\"Observer 1: \" + l));\n        seconds.connect();\n\n        //sleep 5 seconds\n        sleep(5000);\n\n        //observer 2\n        seconds.subscribe(l -> System.out.println(\"Observer 2: \" + l));\n\n        //sleep 5 seconds\n        sleep(5000);\n\n      }\n\n      public static void sleep(int millis) {\n        try {\n          Thread.sleep(millis);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        }\n      }\n    }\n```", "```java\n    Observer 1: 0\n    Observer 1: 1\n    Observer 1: 2\n    Observer 1: 3\n    Observer 1: 4\n    Observer 1: 5\n    Observer 2: 5\n    Observer 1: 6\n    Observer 2: 6\n    Observer 1: 7\n    Observer 2: 7\n    Observer 1: 8\n    Observer 2: 8\n    Observer 1: 9\n    Observer 2: 9\n```", "```java\n    import io.reactivex.Observable;\n    import java.util.concurrent.Future;\n\n    public class Launcher {\n      public static void main(String[] args) {\n\n        Future<String> futureValue = ...;\n\n        Observable.fromFuture(futureValue)\n          .map(String::length)\n          .subscribe(System.out::println);\n      }\n    }\n```", "```java\n    import io.reactivex.Observable;\n\n    public class Launcher {\n      public static void main(String[] args) {\n\n        Observable<String> empty = Observable.empty();\n\n        empty.subscribe(System.out::println, \n          Throwable::printStackTrace,\n          () -> System.out.println(\"Done!\"));\n       }\n     }\n```", "```java\n    Done!\n```", "```java\n    import io.reactivex.Observable;\n\n    public class Launcher {\n      public static void main(String[] args) {\n\n        Observable<String> empty = Observable.never();\n\n        empty.subscribe(System.out::println,\n          Throwable::printStackTrace,\n            () -> System.out.println(\"Done!\"));\n\n        sleep(5000);\n\n      }\n\n      public static void sleep(int millis) {\n        try {\n          Thread.sleep(millis);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        }\n       }\n     } \n```", "```java\n    import io.reactivex.Observable;\n\n    public class Launcher {\n      public static void main(String[] args) {\n\n        Observable.error(new Exception(\"Crash and burn!\"))\n          .subscribe(i -> System.out.println(\"RECEIVED: \" + i),\n            Throwable::printStackTrace,\n              () ->  System.out.println(\"Done!\"));\n      }\n     }\n```", "```java\n    java.lang.Exception: Crash and burn!\n    at Launcher.lambda$main$0(Launcher.java:7)\n    at io.reactivex.internal.operators.observable.\n      ObservableError.subscribeActual(ObservableError.java:32)\n    at io.reactivex.Observable.subscribe(Observable.java:10514)\n    at io.reactivex.Observable.subscribe(Observable.java:10500)\n    ...\n```", "```java\n    import io.reactivex.Observable;\n\n    public class Launcher {\n      public static void main(String[] args) {\n\n        Observable.error(() -> new Exception(\"Crash and burn!\"))\n          .subscribe(i -> System.out.println(\"RECEIVED: \" + i),\n           Throwable::printStackTrace,\n           () ->  System.out.println(\"Done!\"));\n      }\n    }\n```", "```java\n    import io.reactivex.Observable;\n\n     public class Launcher {\n\n      private static int start = 1;\n      private static int count = 5;\n\n      public static void main(String[] args) {\n\n        Observable<Integer> source = Observable.range(start,count);\n\n        source.subscribe(i -> System.out.println(\"Observer 1: \" + i));\n\n        //modify count\n        count = 10;\n\n        source.subscribe(i -> System.out.println(\"Observer 2: \" + i));\n       }\n     }\n```", "```java\n    Observer 1: 1\n    Observer 1: 2\n    Observer 1: 3\n    Observer 1: 4\n    Observer 1: 5\n    Observer 2: 1\n    Observer 2: 2\n    Observer 2: 3\n    Observer 2: 4\n    Observer 2: 5\n```", "```java\n    import io.reactivex.Observable;\n\n    public class Launcher {\n\n      private static int start = 1;\n      private static int count = 5;\n\n      public static void main(String[] args) {\n\n        Observable<Integer> source = Observable.defer(() -> \n        Observable.range(start,count));\n\n        source.subscribe(i -> System.out.println(\"Observer 1: \" + i));\n\n        //modify count\n        count = 10;\n\n        source.subscribe(i -> System.out.println(\"Observer 2: \" + i));\n      }\n    }\n```", "```java\n    Observer 1: 1\n    Observer 1: 2\n    Observer 1: 3\n    Observer 1: 4\n    Observer 1: 5\n    Observer 2: 1\n    Observer 2: 2\n    Observer 2: 3\n    Observer 2: 4\n    Observer 2: 5\n    Observer 2: 6\n    Observer 2: 7\n    Observer 2: 8\n    Observer 2: 9\n    Observer 2: 10\n```", "```java\n    import io.reactivex.Observable;\n    public class Launcher {\n      public static void main(String[] args) {\n\n        Observable.just(1 / 0)\n        .subscribe(i -> System.out.println(\"RECEIVED: \" + i),\n        e -> System.out.println(\"Error Captured: \" + e));\n      }\n    }\n\n```", "```java\n    Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n    at Launcher.main(Launcher.java:6)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke\n      (NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.\n      invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at com.intellij.rt.execution.\n      application.AppMain.main(AppMain.java:147)\n```", "```java\n    import io.reactivex.Observable;\n\n    public class Launcher {\n    public static void main(String[] args) {\n\n        Observable.fromCallable(() -> 1 / 0)\n        .subscribe(i -> System.out.println(\"Received: \" + i),\n        e -> System.out.println(\"Error Captured: \" + e));\n      }\n    }\n\n```", "```java\n    Error Captured: java.lang.ArithmeticException: / by zero\n```", "```java\n    interface SingleObserver<T> {\n    void onSubscribe(Disposable d);\n    void onSuccess(T value);\n    void onError(Throwable error);\n    }\n```", "```java\n    import io.reactivex.Single;\n\n    public class Launcher {\n\n      public static void main(String[] args) {\n        Single.just(\"Hello\")\n          .map(String::length)\n          .subscribe(System.out::println, \n        Throwable::printStackTrace);\n      }\n    }\n\n```", "```java\n    import io.reactivex.Observable;\n\n     public class Launcher {\n\n      public static void main(String[] args) {\n        Observable<String> source = \n        Observable.just(\"Alpha\",\"Beta\",\"Gamma\");\n\n        source.first(\"Nil\") //returns a Single\n          .subscribe(System.out::println);\n       }\n     }\n```", "```java\nAlpha\n```", "```java\n      public interface MaybeObserver<T> {\n      void onSubscribe(Disposable d);\n      void onSuccess(T value);\n      void onError(Throwable e);\n      void onComplete();\n    }\n```", "```java\n    import io.reactivex.Maybe;\n\n    public class Launcher {\n\n      public static void main(String[] args) {\n\n        // has emission\n        Maybe<Integer> presentSource = Maybe.just(100);\n\n        presentSource.subscribe(s -> System.out.println(\"Process 1\n          received: \" + s),\n        Throwable::printStackTrace,\n        () -> System.out.println(\"Process 1 done!\"));\n\n        //no emission\n        Maybe<Integer> emptySource = Maybe.empty();\n\n        emptySource.subscribe(s -> System.out.println(\"Process 2\n          received: \" + s),\n        Throwable::printStackTrace,\n        () -> System.out.println(\"Process 2 done!\"));\n      }\n     }\n```", "```java\n    Process 1 received: 100\n    Process 2 done!\n```", "```java\n    import io.reactivex.Observable;\n\n    public class Launcher {\n\n      public static void main(String[] args) {\n\n        Observable<String> source =\n          Observable.just(\"Alpha\",\"Beta\",\"Gamma\",\"Delta\",\"Epsilon\");\n\n        source.firstElement().subscribe(\n          s -> System.out.println(\"RECEIVED \" + s),\n        Throwable::printStackTrace,\n        () -> System.out.println(\"Done!\"));\n      }\n    }\n```", "```java\n    RECEIVED Alpha\n```", "```java\n    interface CompletableObserver<T> {\n    void onSubscribe(Disposable d);\n    void onComplete();\n    void onError(Throwable error);\n    }\n```", "```java\n    import io.reactivex.Completable;\n\n    public class Launcher {\n\n      public static void main(String[] args) {\n\n        Completable.fromRunnable(() -> runProcess())\n        .subscribe(() -> System.out.println(\"Done!\"));\n\n      }\n      public static void runProcess() {\n        //run process here\n       }\n     }\n```", "```java\n    Done!\n```", "```java\n    package io.reactivex.disposables;\n\n    public interface Disposable {\n      void dispose();\n      boolean isDisposed();\n    }\n```", "```java\n    import io.reactivex.Observable;\n    import io.reactivex.disposables.Disposable;\n    import java.util.concurrent.TimeUnit;\n\n    public class Launcher {\n\n      public static void main(String[] args) {\n\n        Observable<Long> seconds =\n          Observable.interval(1, TimeUnit.SECONDS);\n\n        Disposable disposable =\n          seconds.subscribe(l -> System.out.println(\"Received: \" + l));\n\n        //sleep 5 seconds\n        sleep(5000);\n\n        //dispose and stop emissions\n        disposable.dispose();\n\n        //sleep 5 seconds to prove\n        //there are no more emissions\n        sleep(5000);\n\n      }\n\n      public static void sleep(int millis) {\n        try {\n          Thread.sleep(millis);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        }\n       }\n     }\n```", "```java\n    Observer<Integer> myObserver = new Observer<Integer>() {\n      private Disposable disposable;\n\n      @Override\n      public void onSubscribe(Disposable disposable) {\n        this.disposable = disposable;\n      }\n\n      @Override\n      public void onNext(Integer value) {\n        //has access to Disposable\n      }\n\n      @Override\n      public void onError(Throwable e) {\n        //has access to Disposable\n      }\n\n      @Override\n      public void onComplete() {\n        //has access to Disposable\n       }\n     };\n```", "```java\n    import io.reactivex.Observable;\n    import io.reactivex.disposables.Disposable;\n    import io.reactivex.observers.ResourceObserver;\n    import java.util.concurrent.TimeUnit;\n\n    public class Launcher {\n      public static void main(String[] args) {\n\n        Observable<Long> source =\n        Observable.interval(1, TimeUnit.SECONDS);\n\n         ResourceObserver<Long> myObserver = new  \n         ResourceObserver<Long>() {\n          @Override\n          public void onNext(Long value) {\n            System.out.println(value);\n          }\n\n          @Override\n          public void onError(Throwable e) {\n            e.printStackTrace();\n          }\n\n          @Override\n          public void onComplete() {\n            System.out.println(\"Done!\");\n          }\n        };\n\n        //capture Disposable\n        Disposable disposable = source.subscribeWith(myObserver);\n       }\n      }\n```", "```java\n    import io.reactivex.Observable;\n    import io.reactivex.disposables.CompositeDisposable;\n    import io.reactivex.disposables.Disposable;\n    import java.util.concurrent.TimeUnit;\n\n    public class Launcher {\n\n      private static final CompositeDisposable disposables\n        = new CompositeDisposable();\n\n      public static void main(String[] args) {\n\n        Observable<Long> seconds =\n        Observable.interval(1, TimeUnit.SECONDS);\n\n        //subscribe and capture disposables\n        Disposable disposable1 =\n          seconds.subscribe(l -> System.out.println(\"Observer 1: \" + \n          l));\n\n        Disposable disposable2 =\n          seconds.subscribe(l -> System.out.println(\"Observer 2: \" + \n         l));\n\n        //put both disposables into CompositeDisposable\n        disposables.addAll(disposable1, disposable2);\n\n        //sleep 5 seconds\n        sleep(5000);\n\n        //dispose all disposables\n        disposables.dispose();\n\n        //sleep 5 seconds to prove\n        //there are no more emissions\n        sleep(5000);\n\n      }\n\n      public static void sleep(int millis) {\n        try {\n          Thread.sleep(millis);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        }\n      }\n    }\n```", "```java\n    import io.reactivex.Observable;\n\n    public class Launcher {\n      public static void main(String[] args) {\n        Observable<Integer> source = \n        Observable.create(observableEmitter -> {\n          try {\n            for (int i = 0; i < 1000; i++) {\n              while (!observableEmitter.isDisposed()) {\n                observableEmitter.onNext(i);\n              } \n              if (observableEmitter.isDisposed()) \n                return;\n            }\n            observableEmitter.onComplete();\n          } catch (Throwable e) {\n            observableEmitter.onError(e);\n          }\n        });\n       }\n     }\n```", "```java\n    private static <T> Observable<T> valuesOf(final ObservableValue<T> \n    fxObservable) {\n      return Observable.create(observableEmitter -> {\n\n        //emit initial state\n        observableEmitter.onNext(fxObservable.getValue());\n\n        //emit value changes uses a listener\n        final ChangeListener<T> listener =\n          (observableValue, prev, current) ->  \n           observableEmitter.onNext(current);\n\n        //add listener to ObservableValue\n        fxObservable.addListener(listener);\n\n        //Handle disposing by specifying cancellable\n        observableEmitter.setCancellable(() -> \n       fxObservable.removeListener(listener));\n      });\n     }\n\n```"]