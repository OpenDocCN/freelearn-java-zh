["```java\n    Docker run --name postgresql-container -p 5434:5434 -e POSTGRES_PASSWORD=pass -d postgres\n    ```", "```java\n    public interface BlogRepository extends   CrudRepository<Blog, Long> {\n    ```", "```java\n    Blog findByAuthor(String author);\n    ```", "```java\n    }\n    ```", "```java\n@Entity\npublic class Villain {\n  @Id\n  @GeneratedValue(strategy = GenerationType.AUTO,\n                  generator   = \"UUID\")\n  @Column(nullable = false, updatable = false)\n  private UUID id;\n  @NotNull(message = \"First Name is required\")\n  private String firstName;\n  private String lastName;\n  private String house;\n  private String knownAs;\n}\n```", "```java\n@Repository\npublic interface VillainRepository extends CrudRepository<Villain, UUID> {\n  // custom composite repository here\n}\n```", "```java\n    @Service\n    ```", "```java\n    public class VillainService {\n    ```", "```java\n    private final VillainRepository villainRepository;\n    ```", "```java\n    @Autowired\n    ```", "```java\n    public VillainService (VillainRepository villainRepository) {\n    ```", "```java\n      this. villainRepository = villainRepository;\n    ```", "```java\n    }\n    ```", "```java\n      public Iterable<Villain> findAllVillains() {\n    ```", "```java\n        return villainRepository.findAll();\n    ```", "```java\n      }\n    ```", "```java\n      public Villain findVillainById(UUID id) {\n    ```", "```java\n        return findOrThrow(id);\n    ```", "```java\n      }\n    ```", "```java\npublic void removeVillainById(UUID id) {\n    villainRepository.deleteById(id);\n  }\n  public Villain addVillain(Villain villain) {\n    return villainRepository.save(villain);\n  }\n  public void updateVillain(UUID id, Villain villain) {\n    findOrThrow(id);\n    villainRepository.save(villain);\n  }\n  private Villain findOrThrow(final UUID id) {\n    return villainRepository\n      .findById(id)\n      .orElseThrow(\n        () -> new NotFoundException(\"Villain by id \" +\n          id + \" was not found\")\n      );\n  }\n}\n```", "```java\n<dependencies>\n   <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-data-jpa</artifactId>\n   </dependency>\n   <dependency>\n      <groupId>com.h2database</groupId>\n      <artifactId>h2</artifactId>\n      <scope>runtime</scope>\n   </dependency>\n   <dependency>\n      <groupId>org.postgresql</groupId>\n      <artifactId>postgresql</artifactId>\n      <scope>runtime</scope>\n   </dependency>\n   <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-test</artifactId>\n      <scope>test</scope>\n   </dependency>\n</dependencies>\n```", "```java\ndependencies {\n   implementation 'org.springframework.boot:spring-boot-\n   starter-data-jpa'\n   runtimeOnly 'com.h2database:h2'\n   runtimeOnly 'org.postgresql:postgresql'\n}\n```", "```java\nspring.datasource.url=jdbc:postgresql://localhost:5432/springDB\nspring.datasource.username=postgres\nspring.datasource.password=password\n```", "```java\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-jdbc</artifactId>\n</dependency>\n```", "```java\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.jdbc.core.JdbcTemplate;\n@SpringBootApplication\npublic class AwesomeJavaProject  {\n    @Autowired\n    private JdbcTemplate jdbcTemplate;\n    public static void main(String[] args) {\n        SpringApplication.run(AwesomeJavaProject .class,\n                              args);\n    }\n    @Override\n    public void run(String... args) throws Exception {\n        String sql = \"INSERT INTO blog (title, author,\n          body) VALUES (\"+ \"'Awesome Java Project',\n                        'Seiji Villafranca', 'This is an\n                         awesome blog for java')\";\n        int rows = jdbcTemplate.update(sql);\n    }\n}\n```", "```java\nspring.jpa.hibernate.ddl-auto=update\nspring.jpa.show-sql=true\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect\nspring.jpa.properties.hibernate.format_sql=true\n```", "```java\npackage net.codejava;\nimport javax.persistence.*;\n@Entity\n@Table(name = \"blog\")\npublic class Blog {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Integer id;\n    private String title;\n    private String body;\n    private String author;\n}\n```", "```java\npackage net.codejava;\nimport org.springframework.data.JPA.repository.JpaRepository;\npublic interface BlogRepository extends JpaRepository<Blog, Integer> {\n}\n```"]