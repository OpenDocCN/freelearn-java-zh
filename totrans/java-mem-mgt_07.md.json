["```java\nC:\\Users\\skennedy\\eclipse-workspace\\MemoryMgtBook\\src\\\n```", "```java\njava\n```", "```java\n-XX:+HeapDumpOnOutOfMemoryError\n```", "```java\n-XX:HeapDumpPath=C:\\Users\\skennedy\\eclipse-workspace\\MemoryMgtBook\\src\\ch7\n```", "```java\nch7.OutOfMemoryExample\n```", "```java\nPerson personObj = new Person();\n```", "```java\n// use personObj\n```", "```java\npersonObj = null;\n```", "```java\nString path = \"some path\";\n```", "```java\nFileReader fr = null;\n```", "```java\nBufferedReader br = null;\n```", "```java\ntry {\n```", "```java\n    fr = new FileReader(path);\n```", "```java\n    br = new BufferedReader(fr);\n```", "```java\n    System.out.println(br.readLine());\n```", "```java\n} catch(IOException e) {\n```", "```java\n    e.printStackTrace();\n```", "```java\n}\nare opening a FileReader and a BufferedReader class and dealing with the checked exceptions in the catch block. However, we never close them. This way, they don’t become eligible for garbage collection. Make sure to close them. This can be done in the finally block, like so:\n```", "```java\nString path = \"some path\";\n```", "```java\nFileReader fr = null;\n```", "```java\nBufferedReader br = null;\n```", "```java\ntry {\n```", "```java\n    fr = new FileReader(path);\n```", "```java\n    br = new BufferedReader(fr);\n```", "```java\n    System.out.println(br.readLine());\n```", "```java\n} catch(IOException e) {\n```", "```java\n    e.printStackTrace();\n```", "```java\n}\n```", "```java\nfinally {\n```", "```java\n    if(br != null) {\n```", "```java\n        br.close();\n```", "```java\n    }\n```", "```java\n    if(fr != null) {\n```", "```java\n        fr.close();\n```", "```java\n    }\n```", "```java\n}\n```", "```java\nString path = \"some path\";\n```", "```java\ntry (FileReader fr = new FileReader(path);\n```", "```java\n    BufferedReader br = new BufferedReader(fr)) {\n```", "```java\n                        System.out.println(br.readLine());\n```", "```java\n} catch(IOException e) {\n```", "```java\n    e.printStackTrace();\n```", "```java\n}\n```", "```java\nString strIntToChar = \"\";\n```", "```java\nfor(int i = 97; i < 123; i++) {\n```", "```java\n    strIntToChar += i + \": \" + (char)i + \"\\n\";\n```", "```java\n}\n```", "```java\nSystem.out.println(strIntToChar);\n```", "```java\n97: a\n```", "```java\n98: b\n```", "```java\n99: c\n```", "```java\n... omitted middle ...\n```", "```java\n120: x\n```", "```java\n121: y\n```", "```java\n122: z\n```", "```java\n97: a\n```", "```java\n98: b\n```", "```java\n97: a\n```", "```java\n98: b\n```", "```java\n99: c\n```", "```java\nStringBuilder sbIntToChar  = new StringBuilder(\"\");\n```", "```java\nfor(int i = 97; i < 123; i++) {\n```", "```java\n    sbIntToChar.append(i + \": \" + (char)i + \"\\n\");\n```", "```java\n}\n```", "```java\nSystem.out.println(sbIntToChar);\n```", "```java\npublic class AvoidingStaticCollections {\n```", "```java\n    public static List<Person> personList = new\n```", "```java\n        ArrayList<>();\n```", "```java\n    public static void addPerson(Person p) {\n```", "```java\n        personList.add(p);\n```", "```java\n    }\n```", "```java\n    // other code omitted\n```", "```java\n}\n```"]