- en: '5'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adding an API Description Using OpenAPI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The value of an API, such as a RESTful service, depends to a large extent on
    how easy it is to consume. Good and easily accessible documentation is an important
    part of whether an API is useful. In this chapter, we will learn how we can use
    the **OpenAPI Specification** to document APIs that we can make externally accessible
    from a microservice landscape.
  prefs: []
  type: TYPE_NORMAL
- en: As we mentioned in *Chapter 2*, *Introduction to Spring Boot*, the OpenAPI Specification,
    previously known as the Swagger specification, is one of the most commonly used
    specifications when it comes to documenting RESTful services. Many of the leading
    API gateways have native support for the OpenAPI Specification. We will learn
    how to use the open source project **springdoc-openapi** to produce such documentation.
    We will also learn how to embed an API documentation viewer, **Swagger UI viewer**,
    which can be used both to inspect the API documentation and also to make requests
    to the API.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, we will have OpenAPI-based API documentation for
    the external API that’s exposed by the `product-composite-service` microservice.
    The microservice will also expose a Swagger UI viewer that we can use to both
    visualize and test the API.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to using springdoc-openapi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding springdoc-openapi to the source code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building and starting the microservice landscape
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Trying out the OpenAPI documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For instructions on how to install the tools used in this book and how to access
    the source code for this book, refer to:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 21* installation instructions for mac OS'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Chapter 22* installation instructions for Microsoft Windows with WSL 2 and
    Ubuntu'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code examples in this chapter all come from the source code in `$BOOK_HOME/Chapter05`.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to view the changes that were applied to the source code in this
    chapter, that is, see what it took to create OpenAPI-based API documentation using
    springdoc-openapi, you can compare it with the source code for *Chapter 4*, *Deploying
    Our Microservices Using Docker*. You can use your favorite `diff` tool and compare
    the two folders, that is, `$BOOK_HOME/Chapter04` and `$BOOK_HOME/Chapter05`.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to using springdoc-openapi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using springdoc-openapi makes it possible to keep the documentation of the API
    together with the source code that implements the API. With springdoc-openapi,
    you can create the API documentation on the fly at runtime by inspecting Java
    annotations in the code. To me, this is an important feature. If the API documentation
    is maintained in a separate life cycle from the Java source code, they will diverge
    from each other over time. In many cases, this will happen sooner than expected
    (based on my own experience).
  prefs: []
  type: TYPE_NORMAL
- en: Before springdoc-openapi was created, another open source project, **SpringFox**
    ([http://springfox.github.io/springfox/](http://springfox.github.io/springfox/)),
    provided similar features. Over recent years, the SpringFox project has not been
    actively maintained and, as a reaction to that, the springdoc-openapi project
    was created. A migration guide for SpringFox users can be found at [https://springdoc.org/#migrating-from-springfox](https://springdoc.org/#migrating-from-springfox).
  prefs: []
  type: TYPE_NORMAL
- en: As always, it is important to separate the interface of a component from its
    implementation. In terms of documenting a RESTful API, we should add the API documentation
    to the Java interface that describes the API, and not to the Java class that implements
    the API. To simplify updating the textual parts of the API documentation (for
    example, longer descriptions), we can place the descriptions in property files
    instead of in the Java code directly.
  prefs: []
  type: TYPE_NORMAL
- en: Added to creating the API specification on the fly, springdoc-openapi also comes
    with an embedded API viewer called Swagger UI. We will configure the `product-composite-service`
    service to expose Swagger UI for its API.
  prefs: []
  type: TYPE_NORMAL
- en: Even though Swagger UI is very useful during development and test phases, it
    is typically not exposed in public for APIs in a production environment, for security
    reasons. In many cases, APIs are exposed publicly using an API gateway. Today,
    most API gateway products support exposing API documentation based on an OpenAPI
    document. So instead of exposing Swagger UI, the API’s OpenAPI documentation (generated
    by springdoc-openapi) is exported to an API Gateway that can publish the API documentation
    in a secure way.
  prefs: []
  type: TYPE_NORMAL
- en: If APIs are expected to be consumed by third-party developers, a developer portal
    can be set up containing documentation and tools, used for self-registration,
    for example. Swagger UI can be used in a developer portal to allow developers
    to learn about the API by reading the documentation and also trying out the APIs
    using a test instance.
  prefs: []
  type: TYPE_NORMAL
- en: In *Chapter 11*, *Securing Access to APIs*, we will learn how to lock down access
    to APIs using OAuth 2.1\. We will also learn how to configure the Swagger UI component
    to acquire OAuth 2.1 access tokens and use them when the user tries out the APIs
    through Swagger UI.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot is an example of what Swagger UI looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B19825_05_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.1: Swagger UI example'
  prefs: []
  type: TYPE_NORMAL
- en: Some, for now, unimportant parts of the screenshot have been replaced by “**…**”
    in the preceding figure. We will get back to these details later on in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: To enable springdoc-openapi to create the API documentation, we need to add
    some dependencies to our build files and add some annotations to the Java interfaces
    that define the RESTful services. As mentioned above, we will also place the descriptive
    parts of the API documentation in a property file.
  prefs: []
  type: TYPE_NORMAL
- en: If parts of the documentation have been placed in property files to simplify
    updating the API documentation, it is important that the property files are handled
    in the same life cycle and under the same version control as the source code.
    Otherwise, there is a risk that they will start to diverge from the implementation,
    that is, become out of date.
  prefs: []
  type: TYPE_NORMAL
- en: With springdoc-openapi introduced, let’s see how we can start using it by making
    the required changes in the source code.
  prefs: []
  type: TYPE_NORMAL
- en: Adding springdoc-openapi to the source code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To add OpenAPI-based documentation regarding the external API that’s exposed
    by the `product-composite-service` microservice, we need to change the source
    code in two projects:'
  prefs: []
  type: TYPE_NORMAL
- en: '`product-composite-service`: Here, we will set up a configuration of springdoc-openapi
    in the Java application class, `ProductCompositeServiceApplication`, and add some
    general information pertaining to the API.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`api`: Here, we will add annotations to the Java interface, `ProductCompositeService`,
    describing each RESTful service and its operations. At this stage, we only have
    one RESTful service with one operation, accepting HTTP GET requests to `/product-composite/{productId}`,
    which is used for requesting composite information regarding a specific product.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The actual texts that are used to describe the API operation will be placed
    in the default property file, `application.yml`, in the `product-composite-service`
    project.
  prefs: []
  type: TYPE_NORMAL
- en: Before we can start using springdoc-openapi, we need to add it as a dependency
    in the Gradle build files. So, let’s start with that!
  prefs: []
  type: TYPE_NORMAL
- en: Adding dependencies to the Gradle build files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The springdoc-openapi project is divided into a number of modules. For the
    `api` project, we only need the module that contains the annotations we will use
    to document the API. We can add it to the `api` project’s build file, `build.gradle`,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The `product-composite-service` project requires a more fully featured module
    that contains both the Swagger UI viewer and support for Spring WebFlux. We can
    add the dependency to the build file, `build.gradle`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: That is all the dependencies that need to be added; now for the configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Adding OpenAPI configuration and general API documentation to the ProductCompositeService
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To enable springdoc-openapi in the `product-composite-service` microservice,
    we have to add some configuration. To keep the source code compact, we will add
    it directly to the application class, `ProductCompositeServiceApplication.java`.
  prefs: []
  type: TYPE_NORMAL
- en: If you prefer, you can place the configuration of springdoc-openapi in a separate
    Spring configuration class.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to define a Spring bean that returns an `OpenAPI` bean. The
    source code looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'From the preceding code, we can see that the configuration contains general
    descriptive information about the API, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: The name, description, version, and contact information for the API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Terms of usage and license information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Links to external information regarding the API, if any
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `api` variables that are used to configure the `OpenAPI` bean are initialized
    from the property file using Spring `@Value` annotations. These are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The actual values are set in the property file, `application.yml`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The property file also contains some configuration for springdoc-openapi:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The configuration parameters have the following purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`springdoc.swagger-ui.path` and `springdoc.api-docs.path` are used to specify
    that the URLs used by the embedded Swagger UI viewer are available under the path
    `/openapi`. Later on in this book, when we add different types of edge servers
    in front and address security challenges, this will simplify the configuration
    of the edge servers used. Refer to the following chapters for more information:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Chapter 10*, *Using Spring Cloud Gateway to Hide Microservices behind an Edge
    Server*'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Chapter 11*, *Securing Access to APIs*'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Chapter 17*, *Implementing Kubernetes Features to Simplify the System Landscape*,
    the *Replacing the Spring Cloud Gateway* section'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Chapter 18*, *Using a Service Mesh to Improve Observability and Management*,
    the *Replacing Kubernetes Ingress controller with Istio Ingress Gateway* section'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`springdoc.packagesToScan` and `springdoc.pathsToMatch` control where in the
    code base springdoc-openapi will search for annotations. The narrower the scope
    we can give springdoc-openapi, the faster the scan will be performed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For details, refer to the application class `ProductCompositeServiceApplication.java`
    and the `application.yml` property file in the `product-composite-service` project.
    We can now proceed to see how to add API-specific documentation to the Java interface
    `ProductCompositeService.java` in the `api` project.
  prefs: []
  type: TYPE_NORMAL
- en: Adding API-specific documentation to the ProductCompositeService interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To document the actual API and its RESTful operations, we will add an `@Tag`
    annotation to the Java interface declaration in `ProductCompositeService.java`
    in the `api` project. For each RESTful operation in the API, we will add an `@Operation`
    annotation, along with `@ApiResponse` annotations on the corresponding Java method,
    to describe the operation and its expected responses. We will describe both successful
    and error responses.
  prefs: []
  type: TYPE_NORMAL
- en: As well as reading these annotations at runtime, springdoc-openapi will also
    inspect Spring annotations, such as the `@GetMapping` annotation, to understand
    what input arguments the operation takes and what the response will look like
    if a successful response is produced. To understand the structure of potential
    error responses, springdoc-openapi will look for `@RestControllerAdvice` and `@ExceptionHandler`
    annotations. In *Chapter 3*, *Creating a Set of Cooperating Microservices*, we
    added a utility class, `GlobalControllerExceptionHandler.java`, in the `util`
    project.
  prefs: []
  type: TYPE_NORMAL
- en: This class is annotated with `@RestControllerAdvice`. See the *The global REST
    controller exception handler* section for details. The exception handler takes
    care of `404` (`NOT_FOUND`) and `422` (`UNPROCESSABLE_ENTITY`) errors. To allow
    springdoc-openapi to also correctly document `400` (`BAD_REQUEST`) errors that
    Spring WebFlux generates when it discovers incorrect input arguments in a request,
    we have also added an `@ExceptionHandler` for `400` (`BAD_REQUEST`) errors in
    `GlobalControllerExceptionHandler.java`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The documentation of the API on the resource level, corresponding to the Java
    interface declaration, looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'For the API operation, we have extracted the actual text used in the `@Operation`
    and `@ApiResponse` annotations to the property file. The annotations contain property
    placeholders, like `${name-of-the-property}`, that springdoc-openapi will use
    to look up the actual text from the property file at runtime. The API operation
    is documented as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'From the preceding source code, springdoc-openapi will be able to extract the
    following information about the operation:'
  prefs: []
  type: TYPE_NORMAL
- en: The operation accepts HTTP GET requests to the URL `/product-composite/{productid}`,
    where the last part of the URL, `{productid}`, is used as an input parameter to
    the request.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A successful response will produce a JSON structure corresponding to the Java
    class, `ProductAggregate`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the event of an error, an HTTP error code of either `400`, `404`, or `422`
    will be returned together with error information in the body, as described by
    `@ExceptionHandler` in the Java class `GlobalControllerExceptionHandler.java`
    in the `util` project, as described above.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For the values specified in the `@Operation` and `@ApiResponse` annotations,
    we can use property placeholders directly, without using Spring `@Value` annotations.
    The actual values are set in the property file, `application.yml`, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'From the preceding configuration, we can learn the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A property placeholder such as `${api.responseCodes.ok.description}` will be
    translated to `OK`. Note the hierarchical structure of the YAML-based property
    file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: A multi-line value starts with `|` like the one for the property `api.get-composite-product.description.notes`.
    Also note that springdoc-openapi supports the provision of a multi-line description
    using **Markdown** syntax.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For details, see the service interface class `ProductCompositeService.java`
    in the `api` project and the property file, `application.yml`, in the `product-composite-service`
    project.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to find out more about how a YAML file is constructed, view the
    specification: [https://yaml.org/spec/1.2/spec.html](https://yaml.org/spec/1.2/spec.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Building and starting the microservice landscape
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we can try out the OpenAPI documentation, we need to build and start
    the microservice landscape!
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be done with the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You may run into an error message regarding port `8080` already being allocated.
    This will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'If this is the case, you might have forgotten to bring down the microservice
    landscape from the previous chapter. To find out the names of the executing containers,
    run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'A sample response when a microservice landscape from the previous chapter is
    still running is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'If you find containers from other chapters in the output from the command,
    for example, from *Chapter 4*, *Deploying Our Microservices Using Docker*, as
    in the preceding example, you need to jump over to the source code folder for
    that chapter and bring down its containers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you can bring up the missing container for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that only the missing container, `product-composite`, is started by the
    command since the other ones were already started successfully:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'To wait for the microservice landscape to start up and verify that it works,
    you can run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the test script, `test-em-all.bash`, has been extended with a set
    of tests that verifies that the Swagger UI endpoints work as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: With the successful startup of the microservices, we can move on and try out
    the OpenAPI documentation exposed by the `product-composite` microservice using
    its embedded Swagger UI viewer.
  prefs: []
  type: TYPE_NORMAL
- en: Trying out the OpenAPI documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To browse the OpenAPI documentation, we will use the embedded Swagger UI viewer.
    If we open the [http://localhost:8080/openapi/swagger-ui.html](http://localhost:8080/openapi/swagger-ui.html)
    URL in a web browser, we will see a web page that looks something like the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B19825_05_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.2: OpenAPI documentation with the Swagger UI viewer'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we can ascertain the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The general information we specified in the springdoc-openapi `OpenAPI` bean
    and a link to the actual OpenAPI document, **/openapi/v3/api-docs**, pointing
    to `http://localhost:8080/openapi/v3/api-docs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that this is the link to the OpenAPI document that can be exported to an
    API Gateway, as discussed in the *Introduction to using springdoc-openapi* section
    above.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A list of API resources; in our case, the **ProductComposite** API.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the bottom of the page, there is a section where we can inspect the schemas
    used in the API.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Proceed with the examination of the API documentation as follows.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **ProductComposite** API resource to expand it. You will get a
    list of operations that are available on the resource. You will only see one operation,
    **/product-composite/{productId}**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on it to expand it. You will see the documentation of the operation that
    we specified in the `ProductCompositeService` Java interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B19825_05_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.3: ProductComposite API documentation'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we can see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The one-line description of the operation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A section with details regarding the operation, including the input parameters
    it supports. Note how the Markdown syntax from the `notes` field in the `@ApiOperation`
    annotation has been nicely rendered!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you scroll down the web page, you will also find documentation regarding
    the expected responses and their structure, both for a normal **200** (**OK**)
    response…
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B19825_05_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.4: Documentation for a 200 response'
  prefs: []
  type: TYPE_NORMAL
- en: '…and the various 4xx error responses we defined earlier, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B19825_05_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.5: Documentation for 4xx responses'
  prefs: []
  type: TYPE_NORMAL
- en: For each documented potential error response, we can learn about its meaning
    and the structure of the response body.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we scroll back up to the parameter description, we will find the **Try it
    out** button. If we click on the button, we can fill in actual parameter values
    and send a request to the API by clicking on the **Execute** button. For example,
    if we enter `123` in the **productId**field, we will get the following response:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B19825_05_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.6: Response after sending a request for an existing product'
  prefs: []
  type: TYPE_NORMAL
- en: We will get an expected **200** (OK) as the response code and a JSON structure
    in the response body that we are already familiar with!
  prefs: []
  type: TYPE_NORMAL
- en: 'If we enter an incorrect input, such as `-1`, we will get a proper error code
    as the response code, **422**, and a corresponding JSON-based error description
    in the response body:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application, Teams  Description automatically generated](img/B19825_05_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.7: Response after sending a request with invalid input'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that the **message** field in the response body clearly points out the
    problem: **“Invalid productId: -1”**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to try calling the API without using the Swagger UI viewer, you
    can copy the corresponding `curl` command from the **Responses** section and run
    it in a Terminal window, as shown in the preceding screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Great, isn’t it?
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Good documenting of an API is essential for its acceptance, and OpenAPI is one
    of the most commonly used specifications when it comes to documenting RESTful
    services. springdoc-openapi is an open source project that makes it possible to
    create OpenAPI-based API documentation on the fly at runtime by inspecting Spring
    WebFlux and Swagger annotations. Textual descriptions of an API can be extracted
    from the annotations in the Java source code and placed in a property file for
    ease of editing. springdoc-openapi can be configured to bring an embedded Swagger
    UI viewer into a microservice, which makes it very easy to read about APIs that
    have been exposed by the microservice and also try them out from the viewer.
  prefs: []
  type: TYPE_NORMAL
- en: Now, what about bringing some life to our microservices by adding persistence,
    that is, the capability to save those microservices’ data in a database? To do
    this, we will need to add some more APIs so that we can create and delete the
    information that’s handled by the microservices. Head over to the next chapter
    to find out more!
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How does springdoc-openapi help us create API documentation for RESTful services?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What specification for documenting APIs does springdoc-openapi support?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the purpose of the springdoc-openapi `OpenAPI` bean?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name some annotations that springdoc-openapi reads at runtime to create the
    API documentation on the fly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'What does the code “`: |`" mean in a YAML file?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you repeat a call to an API that was performed using the embedded Swagger
    UI viewer without using the viewer again?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Join our community on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Join our community’s Discord space for discussion with the author and other
    readers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/SpringBoot3e](https://packt.link/SpringBoot3e)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code1849216352344398875.png)'
  prefs: []
  type: TYPE_IMG
