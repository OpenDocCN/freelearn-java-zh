- en: Chapter 9. jBPM in Production
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。生产中的jBPM
- en: In the previous chapters, we sailed through the various functional aspects of
    jBPM and also saw how we can extend and customize jBPM for adding more features.
    Now, it is production time, and there is a change in the perspective of how the
    application is viewed by its stakeholders.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们探讨了jBPM的各种功能方面，也看到了我们如何扩展和定制jBPM以添加更多功能。现在，是生产时间了，应用被其利益相关者看待的角度发生了变化。
- en: The important question now is not the functional characteristics, but the nonfunctional
    ones. People think about the stability and resilience of the application and not
    the flexibility that it gives. People think of how fast and cost-efficiently the
    application can be scaled so as to provision for more users and how less critical
    is the latency of a service.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的重要问题不是功能特性，而是非功能特性。人们考虑的是应用程序的稳定性和弹性，而不是它提供的灵活性。人们思考的是应用程序如何快速且成本效益地进行扩展，以便为更多用户提供服务，以及服务的延迟如何不那么关键。
- en: The mettle of the application is put under fire. jBPM is ready-to-use production
    software, and in this chapter, we will discuss various facilities available in
    jBPM to make it fit into the requirements of production software. The chapter
    is structured on the basis of the major qualities of a system that has to be taken
    care of in production.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的韧性受到考验。jBPM是现成的生产软件，在本章中，我们将讨论jBPM中可用的各种设施，使其符合生产软件的要求。本章的结构基于在生产中必须注意的系统的主要品质。
- en: 'We will discuss the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论以下主题：
- en: How to scale
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何进行扩展
- en: How to make applications secure
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使应用程序安全
- en: How to meet availability requirements
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何满足可用性要求
- en: How to incorporate new changes to the system
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将新的更改纳入系统
- en: How the system handles errors in runtime
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统如何处理运行时错误
- en: Scalability
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可扩展性
- en: Scalability can be described as the capacity of a system to handle growing volumes
    of service provisioning in a controlled and cost-efficient manner. In case of
    a BPM system, there are two major use cases where the requirement of scaling can
    arise.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 可扩展性可以描述为系统以受控和成本效益的方式处理不断增长的服务提供量的能力。在BPM系统中，有两个主要的使用场景可能会引发扩展的需求。
- en: Scaling the modeling facility, that is, the workbench
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展建模设施，即工作台
- en: Scaling the process runtime, with which the end customers of the application
    interact
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调整流程运行时间，这是应用程序的最终用户与之交互的部分
- en: 'Scaling an application typically involves two methods:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展应用程序通常涉及两种方法：
- en: '**Vertical scaling**: This is achieved by adding resources to the server that
    is providing the service'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**垂直扩展**：这是通过向提供服务的服务器添加资源来实现的'
- en: '**Horizontal scaling**: This is achieved by adding multiple servers to provision
    the same service'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**水平扩展**：这是通过添加多个服务器来提供相同的服务来实现的'
- en: Vertical scaling involves less complexity of implementation as it asks for improving
    the hardware (usually) and configuring the application to use these resources.
    However, vertical scaling is often limited by the constraints put by cost and
    technology in building the resources. In the context of jBPM, the resources that
    can be added are the memory, processor cores, and secondary storage mechanisms.
    jBPM doesn't provide out-of-the-box functionality to explicitly cater for these
    resource improvements, but there would be improvements in throughput and performance
    by taking advantage of the underlying platforms used by the jBPM, such as the
    application server on which jBPM is deployed and JVM on which the application
    server resides.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 垂直扩展在实现上涉及较少的复杂性，因为它要求提高硬件（通常是）并配置应用程序以使用这些资源。然而，垂直扩展通常受到在构建资源时成本和技术限制的限制。在jBPM的背景下，可以添加的资源包括内存、处理器核心和辅助存储机制。jBPM不提供现成的功能来明确地适应这些资源改进，但通过利用jBPM使用的底层平台，如jBPM部署的应用服务器和运行应用服务器的JVM，可以带来吞吐量和性能的提升。
- en: Within the scope of this book, it is obvious that horizontal scaling would need
    a better method, and the following sections purely concentrate on horizontally
    scaling of the jBPM functionality.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的范围内，显然横向扩展需要更好的方法，接下来的几节将纯粹专注于jBPM功能的横向扩展。
- en: Scaling the business process modeling facility
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展业务流程建模设施
- en: Scaling the modeling tool points to increasing the number of users that can
    perform modeling simultaneously. Users can choose either web tooling or Eclipse
    tooling for modeling purposes, and there can be scenarios where the modeling users
    create a single application or multiple applications.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展建模工具意味着增加可以同时执行建模的用户数量。用户可以选择用于建模的Web工具或Eclipse工具，并且可能存在建模用户创建单个应用程序或多个应用程序的场景。
- en: Given the previous factors and constraints, the most obvious way to increase
    the throughput of the modeling workbench service is to increase the number of
    units that provision the service. So, we add servers and jump to face the quintessential
    problems of clustering. Each server has a separate asset repository, and if the
    users collaborate to create the same application, we need to keep the assets in
    the repository sync always.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到先前的因素和约束，提高建模工作台服务吞吐量的最明显方法就是增加提供服务的单元数量。因此，我们增加了服务器，并跳转到面对集群的典型问题。每个服务器都有一个独立的资产库，如果用户协作创建相同的应用程序，我们需要确保库中的资产始终同步。
- en: The out-of-the-box facility that jBPM provides as the asset repository is the
    Git-backed **Virtual File System** (**VFS**), and in order to keep the file system
    in sync, jBPM suggests the use of Apache Helix, a cluster management framework.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: jBPM作为资产库提供的开箱即用功能是基于Git的**虚拟文件系统**（**VFS**），为了保持文件系统同步，jBPM建议使用Apache Helix，一个集群管理框架。
- en: 'The following diagram visualizes the deployment architecture in this scenario:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表展示了此场景中的部署架构：
- en: '![Scaling the business process modeling facility](img/9578OS_09_01.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![扩展业务流程建模设施](img/9578OS_09_01.jpg)'
- en: Apache Helix acts as a cluster management solution, which registers all servers
    to the cluster and enables the synchronization of the repositories.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Helix充当集群管理解决方案，将所有服务器注册到集群中并启用仓库的同步。
- en: Helix internally uses Apache ZooKeeper to manage the state of the system and
    manage the notifications between the nodes.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Helix内部使用Apache ZooKeeper来管理系统状态并管理节点之间的通知。
- en: The details of configuring VFS clustering are explicitly provided in the jBPM
    user guide; please refer to it for configuration details.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: VFS集群配置的详细信息已在jBPM用户指南中明确提供；请参阅它以获取配置详情。
- en: Apache Helix provides a set of functionalities that enable us to develop a fault-tolerant,
    scalable distributed system. For more details, see [http://helix.apache.org/Architecture.html](http://helix.apache.org/Architecture.html).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Helix提供了一套功能，使我们能够开发一个容错性强、可扩展的分布式系统。更多详情请参阅[http://helix.apache.org/Architecture.html](http://helix.apache.org/Architecture.html)。
- en: Scaling the process runtime
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展流程运行时
- en: When we talk about scaling any software application, it involves increasing
    the capacity of the system to serve an increasing number of user interactions.
    In BPM-based applications, along with the increase in user interactions, the complexity
    and content of the business processes factor in for an increase in the capacity
    of the system.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们谈论扩展任何软件应用时，它涉及到增加系统容量以服务越来越多的用户交互。在基于BPM的应用中，随着用户交互的增加，业务流程的复杂性和内容也会增加，从而增加了系统的容量。
- en: Factors and considerations
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 因素和考虑事项
- en: The following section highlights the factors involved in finalizing the deployment
    architecture of the system and discusses the consideration made in the jBPM architecture
    to meet these increasing requirements.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分强调了确定系统部署架构所涉及的因素，并讨论了jBPM架构在满足这些日益增长需求时所做的考虑。
- en: Number of processes/process instances
  id: totrans-33
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 进程数量/进程实例
- en: 'Yes, this is an obvious factor: the number of process definitions that are
    part of the application and the number of process instances created from these
    process definitions use the system capacity. The process definitions are stored
    in the asset repository, and we have already discussed this in the *Scaling the
    business process modeling facility* section, but the increase in process definitions
    directs to an increase in the number of process instances that have to be managed
    by the system. The reverse is also possible, that is, a relatively small number
    of process definitions but a large number of process instances.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，这是一个明显的因素：作为应用程序一部分的流程定义数量以及从这些流程定义创建的流程实例数量都会使用系统容量。流程定义存储在资产库中，我们已经在*扩展业务流程建模设施*部分讨论了这一点，但流程定义的增加会导致系统需要管理的流程实例数量增加。反之亦然，即相对较少的流程定义但大量的流程实例。
- en: 'Process instances carry the runtime state of the process execution and by default
    in memory. However, this is not an option in a real-world scenario where the availability
    of the runtime state is critical, and so, jBPM provides mechanisms to persist
    the process instances into a database. In the context of our discussion, we have
    to note that with an increase in the number of process instances, we have to do
    the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 流程实例携带流程执行的状态，默认情况下在内存中。然而，在运行时状态可用性至关重要的实际场景中，这并不是一个选项，因此jBPM提供了将流程实例持久化到数据库的机制。在我们讨论的上下文中，我们必须注意，随着流程实例数量的增加，我们必须做以下事情：
- en: Increase the capacity of the database
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增加数据库的容量
- en: Increase the capacity of the memory
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增加内存的容量
- en: 'The following diagram shows the schematic deployment architecture where there
    are multiple jBPM runtime instances having replicated VFS repositories for asset
    storage and a centralized database storing the runtime information:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了示意图部署架构，其中包含多个具有复制VFS存储库用于资产存储的jBPM运行时实例以及一个集中式数据库用于存储运行时信息：
- en: '![Number of processes/process instances](img/9578OS_09_02.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![流程/流程实例数量](img/9578OS_09_02.jpg)'
- en: The number of user interactions
  id: totrans-40
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 用户交互的数量
- en: 'User interactions with the process runtime are for the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 用户与流程运行时的交互包括以下内容：
- en: Interactions with the process engine for starting a process (creation of a process
    instance) or signaling an event to an already started process instance
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与流程引擎的交互以启动流程（创建流程实例）或向已启动的流程实例发送信号
- en: Interaction with the task service for handling the life cycle methods for human
    tasks
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与任务服务交互以处理人工任务的生命周期方法
- en: Note
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: One other possibility is the interactions to domain-specific asynchronous workitems,
    which needs its own capacity planning.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种可能性是与特定领域的异步工作项的交互，这需要自己的容量规划。
- en: Interactions with the process engine are performed through a dedicated KieSession
    API and come with a specific constraint; that is, interactions with a process
    instance can only be performed through the Kie session in which the process instance
    was created. Each interaction needs the instance of the Kie session where it was
    created, and jBPM provides multiple strategies for handling the scaling up of
    process interactions. jBPM allows you to choose the strategy while creating the
    runtime manager, which is in turn used to access the runtime engine and create
    sessions for interaction.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 通过专用的KieSession API与流程引擎交互，并带有特定的约束；即只能通过创建流程实例的Kie会话与流程实例进行交互。每次交互都需要创建它的Kie会话实例，jBPM提供了多种策略来处理流程交互的扩展。jBPM允许你在创建运行时管理器时选择策略，该管理器随后用于访问运行时引擎并创建用于交互的会话。
- en: Flavors of runtime manager
  id: totrans-47
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 运行时管理器的种类
- en: '**Singleton strategy**:'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单例策略**：'
- en: By choosing this strategy, we choose to maintain a single instance of the runtime
    instance and a single instance of Kie Session for all interactions. This is the
    easiest strategy and is most favorable for low and medium loads.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过选择此策略，我们选择维护单个运行时实例和单个Kie会话以处理所有交互。这是最简单的策略，并且对于低负载和中负载最有利。
- en: 'The singleton strategy can be programmatically chosen as follows:'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 单例策略可以通过以下方式编程选择：
- en: '[PRE0]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Further, if you are using jBPM console (KIE Workbench), you can configure the
    `<runtime-strategy>` deployment descriptor tag as `SINGLETON`. A sample deployment
    descriptor is shown as follows:'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，如果您使用jBPM控制台（KIE工作台），您可以配置`<runtime-strategy>`部署描述符标签为`SINGLETON`。以下是一个示例部署描述符：
- en: '[PRE1]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`SINGLETON` is the default strategy in the jBPM console.'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`SINGLETON`是jBPM控制台中的默认策略。'
- en: Note
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'We can override the default deployment descriptor by using a Java option during
    the start of the server as follows: `Dorg.kie.deployment.desc.location=file:/application/configuration/deployment-descriptor.xml`.'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以通过在服务器启动时使用Java选项来覆盖默认的部署描述符，如下所示：`Dorg.kie.deployment.desc.location=file:/application/configuration/deployment-descriptor.xml`。
- en: '**Per request strategy**:'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**按请求策略**：'
- en: A new instance of runtime manager is provided, and the session is created and
    maintained for the request scope.
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 提供了一个新的运行时管理器实例，并为请求范围创建了会话并维护。
- en: This strategy is stateless and ideal for horizontally scaling the jBPM process
    runtime instances, but the functionality in the process is limited to stateless
    facts, with no user interactions allowed other than the start process.
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这种策略是无状态的，非常适合水平扩展jBPM流程运行时实例，但流程中的功能仅限于无状态事实，不允许除了启动流程之外的用户交互。
- en: 'We can choose the per request strategy programmatically during the creation
    of runtime by the following code:'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以在创建运行时期间通过以下代码程序化地选择按请求策略：
- en: '[PRE2]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Further, for jBPM console, the deployment descriptor can be customized as follows:'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，对于jBPM控制台，部署描述符可以定制如下：
- en: '[PRE3]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Per process instance strategy**:'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**按流程实例策略**：'
- en: It is the most advanced strategy taking into consideration the tradeoff between
    the scalability of the system and the overhead it put. As the name indicates,
    ksession sticks to the process instance and lives as long as the process instance
    is alive. It does not have the scalability constraints in the singleton strategy,
    and although it has a high overhead, it doesn't have the overhead limitations
    and is not scalable as the per request strategy. Thus, the per process instance
    strategy is placed in the middle of the above two and is used in most of the cases
    where jBPM is used.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是考虑到系统可扩展性和开销之间的权衡而采取的最先进策略。正如其名所示，ksession会粘附在流程实例上，只要流程实例存在，ksession就会存在。它没有singleton策略中的可扩展性约束，尽管它有较高的开销，但它没有开销限制，并且不像按请求策略那样可扩展。因此，按流程实例策略位于上述两种策略的中间，并且在大多数使用jBPM的情况下使用。
- en: 'We can choose the per process instance strategy programmatically during the
    creation of runtime by the following line of code:'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以在创建运行时期间通过以下代码行程序化地选择按流程实例策略：
- en: '[PRE4]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Further, for the jBPM console, the deployment descriptor is customized as follows:'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，对于jBPM控制台，部署描述符被定制如下：
- en: '[PRE5]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Task service
  id: totrans-70
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 任务服务
- en: Task service is the dedicated component for managing human task services. The
    interactions with an application can be performed through the human tasks. jBPM
    provides a default implementation for the human task service, which is based on
    the WS-Human Task specification. The task service clients are light and go hand-in-hand
    with strategies that we have chosen for the runtime manager, and all the clients
    share the same database; therefore, scaling up of human tasks is in sync with
    the strategy chosen for the runtime manager and with the increase in the capacity
    of the database storage.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 任务服务是管理人工任务服务的专用组件。可以通过人工任务与应用程序进行交互。jBPM提供了一个基于WS-Human Task规范的默认人工任务服务实现。任务服务客户端轻量级，与我们所选择的运行时管理器策略相匹配，并且所有客户端共享相同的数据库；因此，人工任务的扩展与为运行时管理器选择的策略以及数据库存储容量的增加保持同步。
- en: Number of timer events
  id: totrans-72
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 计时器事件数量
- en: The functionality of timer events is achieved using the scheduler service. Multiple
    implementations of the scheduler service are provided by jBPM. The Quartz scheduler-based
    implementation is a fit in for a production environment. The Quartz scheduler
    supports the clustering mode, which provides both high availability and scalability,
    which works by maintaining the data or state of the schedules (or jobs) that it
    handles in a shared database between nodes.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 计时器事件的功能是通过调度服务实现的。jBPM提供了多个调度服务的实现。基于Quartz调度器的实现适合生产环境。Quartz调度器支持集群模式，提供高可用性和可扩展性，它通过在节点之间的共享数据库中维护它所处理调度（或作业）的数据或状态来实现。
- en: Note
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Quartz is an open source job scheduling library that can be integrated within
    a Java application. Quartz can be used to create scheduled tasks and provide support
    for JTA transactions and clustering. For more details, see [http://quartz-scheduler.org/](http://quartz-scheduler.org/).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Quartz 是一个开源的作业调度库，可以集成到 Java 应用程序中。Quartz 可以用于创建计划任务，并提供对 JTA 事务和集群的支持。有关更多详细信息，请参阅
    [http://quartz-scheduler.org/](http://quartz-scheduler.org/)。
- en: The Quartz scheduler can be enabled by providing the absolute path of the `quartz`
    definition file against the `org.quartz.properties` system property.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过提供 `quartz` 定义文件的绝对路径来启用 Quartz 调度程序，相对于 `org.quartz.properties` 系统属性。
- en: A sample `quartz` definition file is given as follows that is configured for
    use along with a PostgreSQL database.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 以下提供了一个示例 `quartz` 定义文件，该文件配置用于与 PostgreSQL 数据库一起使用。
- en: '[PRE6]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When using the Quartz scheduler, as a prerequisite, we would have to create
    the database schemas that are used by Quartz to persist its job data. The database
    scripts provided with the Quartz distribution (jBPM uses Quartz 1.8.5\. DB scripts)
    are usually located under `QUARTZ_HOME/docs/dbTables`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 Quartz 调度程序时，作为先决条件，我们必须创建 Quartz 用于持久化其作业数据的数据库模式。与 Quartz 分发版一起提供的数据库脚本（jBPM
    使用 Quartz 1.8.5。DB 脚本）通常位于 `QUARTZ_HOME/docs/dbTables`。
- en: 'The scheduler service can be configured programmatically by configuring `GlobalSchedulerService`
    in the runtime environment:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过在运行环境中对 `GlobalSchedulerService` 进行配置来程序化地配置调度程序服务：
- en: '[PRE7]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here, the `globalSchedulerService` object is an implementation of `org.jbpm.process.core.timer.GlobalSchedulerService`
    and the Quartz implementation is `org.jbpm.process.core.timer.impl.QuartzSchedulerService`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`globalSchedulerService` 对象是 `org.jbpm.process.core.timer.GlobalSchedulerService`
    的实现，而 Quartz 实现是 `org.jbpm.process.core.timer.impl.QuartzSchedulerService`。
- en: Availability
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可用性
- en: The availability of an application or system can be viewed as the total amount
    of time that it provides its services against the total time it is expected to
    do so. System availability is affected by multiple factors ranging from failure
    of the system due to hardware/software failures and the known downtime for maintenance
    and upgrades.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序或系统的可用性可以被视为它提供服务的总时间与它预期提供服务的总时间的比率。系统可用性受多种因素的影响，从硬件/软件故障导致的系统故障到维护和升级的已知停机时间。
- en: High availability is achieved in applications by having failover mechanisms
    using which the system can get back to its service provisioning state after a
    failure. A more optimized system would consider backup mechanisms, which it can
    immediately switch on to in a failure scenario, thus improving the availability.
    Scheduled maintenance can be done using a rolling upgrade to ensure high availability.
    The solutions are usually depicted in the form of deployment architecture, vary
    according to the software solution, and consider the trade-offs in non-functional
    requirements.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用故障转移机制，在应用程序中实现高可用性，该机制使得系统在发生故障后能够恢复到其服务提供状态。一个更优化的系统会考虑备份机制，在故障情况下可以立即切换，从而提高可用性。可以通过滚动升级进行计划维护以确保高可用性。这些解决方案通常以部署架构的形式表示，根据软件解决方案而变化，并考虑非功能性需求中的权衡。
- en: The following figure depicts the sample deployment architecture that can be
    applied to the jBPM workbench and runtime, which can cater to high-availability
    and high-throughput scenarios. The architecture considers a failover mechanism
    by having a persistent, distributed storage for all data and a load balancer with
    a passive backup to ensure the switching of nodes upon a partial failure (node
    failure). jBPM doesn't provide all the components needed in this deployment architecture
    but has to get third-party software and integrated. We discuss the applicability
    of these components in the subsequent sections.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了可以应用于 jBPM 工作台和运行时的示例部署架构，该架构可以满足高可用性和高吞吐量场景。该架构通过拥有所有数据的持久化、分布式存储和具有被动备份的负载均衡器来考虑故障转移机制，以确保在部分故障（节点故障）时切换节点。jBPM
    不提供此部署架构中所需的所有组件，但必须获取第三方软件并进行集成。我们将在后续章节中讨论这些组件的适用性。
- en: '![Availability](img/9578OS_09_03.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![可用性](img/9578OS_09_03.jpg)'
- en: Applicability to workbench
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对工作台适用性
- en: 'Thinking about the availability of the workspace, we need to consider the following
    two things:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑工作空间的可用性时，我们需要考虑以下两点：
- en: Availability of the web-based user interface for modeling
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于Web的用户界面建模的可用性
- en: Availability of the stores where the assets are created during the modeling
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在建模期间创建资产的存储库的可用性
- en: The service providing the web-based user interface is hosted on an application
    server, and the availability means availability provisions provided by the application
    server. Usually, the provisions are in the form of load balancer-based failover
    mechanisms, where the load balancer switches the traffic to another node when
    the node providing the service fails, and the failover mechanism ensures that
    the node will be back live within a certain timespan to provide the full potential
    throughput.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 提供基于网页的用户界面的服务托管在应用服务器上，其可用性指的是应用服务器提供的可用性配置。通常，这些配置是以基于负载均衡器的故障转移机制的形式存在，当提供服务的节点失败时，负载均衡器会将流量切换到另一个节点，并且故障转移机制确保节点将在一定时间范围内恢复，以提供完整的潜在吞吐量。
- en: Assets are stored in a virtual file system, and by default, it is a Git-based
    repository. As we have discussed in the *Scaling the business process modeling
    facility* section, the Git-based repository can be clustered and the assets synchronized.
    So, even if one node fails, the latest assets will be restored from the other
    nodes.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 资产存储在虚拟文件系统中，默认情况下，它是一个基于Git的仓库。正如我们在*扩展业务流程建模设施*部分所讨论的，基于Git的仓库可以集群化，并且资产可以同步。因此，即使一个节点失败，最新的资产也将从其他节点恢复。
- en: Applicability to continuous improvements in processes
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对流程持续改进的适用性
- en: From the perspective of the applications developed using the modeling facility,
    there can be continuous improvements in the application processes. The new version
    of a process can be deployed to the jBPM runtime in two ways.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 从使用建模设施开发的应用程序的角度来看，应用程序流程可以持续改进。流程的新版本可以通过两种方式部署到jBPM运行时。
- en: The new version of the process can be deployed as a new process definition,
    and the old one can be retired by removing it from the knowledge repository so
    that no new instance of this process version is deployed. However, this approach
    absolutely doesn't handle the existing process instances. Either they should be
    allowed to continue with the earlier versions or they should be aborted and reprocessed.
    The decisions on choosing the approach should be handled case-by-case on the basis
    of the business scenario that these process definitions are handling.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流程的新版本可以作为新的流程定义部署，旧版本可以通过从知识库中移除它来退役，这样就不会部署这个流程版本的新实例。然而，这种方法绝对不能处理现有的流程实例。它们应该被允许继续使用早期版本，或者应该被终止并重新处理。选择方法的决策应根据这些流程定义所处理的企业场景逐案处理。
- en: Using the process migration facility provided by jBPM. However, the facility
    is limited to process changes that are non-conflicting.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用jBPM提供的流程迁移设施。然而，该设施仅限于非冲突的流程更改。
- en: Thus, process upgrades are not a very smooth process and require careful handling.
    Further, to achieve availability, either the upgrades have to be done during low-traffic
    periods or we have to do a rolling upgrade.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，流程升级不是一个非常顺利的过程，需要谨慎处理。此外，为了实现可用性，升级必须在低流量期间进行，或者我们必须进行滚动升级。
- en: Applicability to the process runtime
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对流程运行时的适用性
- en: 'Availability of the process runtime involves the availability of services to
    interact with process instances such as process instance life cycles and user
    interactions. Similar to what we discussed about the workbench facility, there
    are two things we need to consider:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 流程运行时的可用性包括与流程实例交互的服务，如流程实例生命周期和用户交互。类似于我们关于工作台设施的讨论，有两件事情我们需要考虑：
- en: Availability of the process instance interactions
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流程实例交互的可用性
- en: Availability of the process instance data
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流程实例数据的可用性
- en: For the availability of the process instance interactions, we need to have a
    load balancing mechanism that can switch over the traffic of one node to another
    upon a failure. Further, we need to be able to persist the process instance data
    in a nonvolatile storage for a failover. As discussed in the *Scaling the process
    runtime* section, jBPM supports the persistence of runtime information in relational
    databases.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 对于流程实例交互的可用性，我们需要有一个负载均衡机制，在节点失败时可以将一个节点的流量切换到另一个节点。此外，我们需要能够将流程实例数据持久化到非易失性存储中以便故障转移。正如在*扩展流程运行时*部分所讨论的，jBPM支持在关系数据库中持久化运行时信息。
- en: Most of the popular relational databases have inbuilt support for availability
    using clustered storage. This can be utilized to make sure that the persisted
    process instance data can be made highly available.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数流行的关系型数据库都内置了对集群存储的支持，以确保可用性。这可以用来确保持久化流程实例数据可以具有高度可用性。
- en: Security
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全
- en: Security or application security in this context refers to protecting the services
    and data provided by jBPM from unauthorized access (authentication) and at the
    same time ensuring that the users can access the set of services and data authorized
    for them (authorization).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在此上下文中，安全或应用程序安全是指保护jBPM提供的服务和数据免受未经授权的访问（身份验证），同时确保用户可以访问授权给他们的服务和数据集（授权）。
- en: Another important perspective that we have to consider in a BPM system is providing
    non-repudiation for all the user interactions. jBPM supports this by providing
    an audit logging facility for all runtime data changes.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在BPM系统中，我们必须考虑的另一个重要方面是为所有用户交互提供不可否认性。jBPM通过提供所有运行时数据更改的审计日志功能来支持这一点。
- en: Note
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Non-repudiation assures that a user cannot deny performing an action or operation
    in the system.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 不可否认性确保用户不能否认在系统中执行的动作或操作。
- en: Securing the access of application assets
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保护应用程序资产访问
- en: jBPM, usually deployed in an application server, uses a JEE-compatible standard,
    that is, **Java Authentication and Authorization Service** (**JAAS**), for providing
    application security. The application server provides this service and a mechanism
    to register the users.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: jBPM通常部署在应用程序服务器中，使用JEE兼容的标准，即**Java认证和授权服务**（**JAAS**），来提供应用程序安全。应用程序服务器提供这项服务以及一个注册用户的机制。
- en: The default asset repository used to keep the application assets is the Git
    repository. Further, a Git repository ensures that a change to a repository handled
    by it (be it an addition of a file or a change of the file) is only allowed for
    an authorized person.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 用来保存应用程序资产的默认资产存储库是Git存储库。此外，Git存储库确保由它处理的存储库更改（无论是文件的添加还是文件更改）仅允许授权人员执行。
- en: Authentication is done for the users logging in through the workbench, and for
    making changes to the repository through Eclipse, the users have to use SSH.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 对通过工作台登录的用户进行身份验证，以及通过Eclipse对存储库进行更改的用户必须使用SSH。
- en: 'The workbench user management supports the following roles:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 工作台用户管理支持以下角色：
- en: '**Admin**: The role that has full access rights. The user who plays the role
    of admin manages the BPMS.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理员**：具有完全访问权限的角色。扮演管理员角色的用户管理BPMS。'
- en: '**Analyst**: The role that can do the modeling and is associated with a business
    analyst for creating processes, rules, entities, forms, and so on.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分析师**：可以进行建模并关联业务分析师以创建流程、规则、实体、表单等的角色。'
- en: '**Developer**: The role that carries the baton of the process artifacts from
    the business analyst and develops fully executable code with back-end services
    and handlers.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发者**：承担从业务分析师那里传递流程工件的角色，并使用后端服务和处理器开发完全可执行的代码。'
- en: '**Business user**: The role that performs operation management by using task
    management features. The person assigned to this role is the end user of the application,
    who avails the functionality provided by the application.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**业务用户**：通过使用任务管理功能执行操作管理的角色。被分配此角色的人是应用程序的最终用户，他们利用应用程序提供的功能。'
- en: '**View only user**: The role that can view the statistics of processes and
    their performance and is the primary user of the statistics dashboard.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仅查看用户**：可以查看流程及其性能统计信息的角色，是统计仪表板的初级用户。'
- en: Taking the example of jBPM installed in the JBoss application server (now renamed
    to WildFly), it provides utilities such as `add-user` to add the users and assign
    their roles.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 以安装在JBoss应用程序服务器（现更名为WildFly）中的jBPM为例，它提供了`add-user`等实用工具来添加用户并分配他们的角色。
- en: Securing the process runtime
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保护流程运行时
- en: The following subsections details the provisions for securing the process runtime,
    that is, securing the operation management specific operations.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的子节详细说明了保护流程运行时的规定，即保护特定于操作管理的操作。
- en: Access security specific to human tasks
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 专门针对人工任务的安全
- en: The workbench allows only authorized people to access the process runtime capabilities
    as discussed in the previous section. Apart from the process management access,
    inside each process definition, each human task is assigned to a user or a role
    (group).
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 工作台仅允许授权人员访问上一节中讨论的流程运行时功能。除了流程管理访问之外，在流程定义的每个部分中，每个人工任务都分配给一个用户或一个角色（组）。
- en: In an environment using the whole jBPM suite of software, including the process
    modeler, we can drive this by adding more roles or groups to the system by using
    the application server capabilities. In an embedded mode, jBPM provides an extension
    point for implementing an application-specific access security mechanism.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用包括流程模型器在内的整个jBPM软件套件的环境中，我们可以通过使用应用程序服务器的功能添加更多角色或组到系统中来驱动此操作。在嵌入式模式下，jBPM提供了一个实现特定于应用程序的访问安全机制的扩展点。
- en: 'This extension can be done by implementing the `org.kie.api.task.UserGroupCallback`
    interface and embedding the application-specific logic for validating the authorization
    of the users to perform tasks. The specific method that we need to implement for
    attaining this integration is as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过实现`org.kie.api.task.UserGroupCallback`接口并嵌入验证用户执行任务权限的应用特定逻辑来完成此扩展。为了实现此集成，我们需要实现以下特定方法：
- en: '[PRE8]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This interface method is used for determining whether the user attached to a
    task is valid. For integrating with our application, we can implement this method
    by using the logic or service used for authentication.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 此接口方法用于确定附加到任务的用户是否有效。为了与我们的应用程序集成，我们可以通过使用用于身份验证的逻辑或服务来实现此方法。
- en: '[PRE9]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This interface method is used for resolving whether the group or role attached
    to a task is valid.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 此接口方法用于解决附加到任务的组或角色是否有效。
- en: '[PRE10]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This is used for resolving the groups (or roles) that are valid for a user.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于解决对用户有效的组（或角色）。
- en: 'The `userGroupCallback` interface implementation can be attached to the process
    runtime by using the `HumanTaskService` factory. The code snippet for doing this
    is as follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过使用`HumanTaskService`工厂将`userGroupCallback`接口实现附加到流程运行时。执行此操作的代码片段如下：
- en: '[PRE11]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The advantage of this mechanism is that we are not constrained to the user
    management functionality provided by jBPM but can develop our own. Further, jBPM
    provides a set of pre-build `userGroupCallBack` functions that can be used in
    production:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 此机制的优势在于，我们不受jBPM提供的用户管理功能的限制，可以开发自己的。此外，jBPM提供了一组预构建的`userGroupCallBack`函数，可以在生产中使用：
- en: '`org.jbpm.services.task.identity.LDAPUserGroupCallbackImpl`, as the name indicates,
    can be used for configuring it with your LDAP service.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.jbpm.services.task.identity.LDAPUserGroupCallbackImpl`，正如其名称所示，可以用于配置与您的LDAP服务。'
- en: '`org.jbpm.services.task.identity.JAASUserGroupCallbackImpl`, as the name indicates,
    can be used for configuring it with your JAAS standard-specific user authentication
    mechanisms widely used in application server environments. jBPM provides adapters
    for Oracle WebLogic, IBM WebSphere, and JBoss application servers.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.jbpm.services.task.identity.JAASUserGroupCallbackImpl`，正如其名称所示，可以用于配置与您的JAAS标准特定用户认证机制，这些机制在应用程序服务器环境中广泛使用。jBPM为Oracle
    WebLogic、IBM WebSphere和JBoss应用程序服务器提供了适配器。'
- en: Note
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: LDAP (which stands for Lightweight Directory Access Protocol) is an open standard,
    widely used in small and medium organizations to share user information between
    services and systems.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: LDAP（代表轻量级目录访问协议）是一个开放标准，在小型和中型组织中广泛用于在服务和系统之间共享用户信息。
- en: Audit logging
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 审计日志
- en: In business domains using a BPM, the process defines the business itself. Using
    these processes, multiple systems and people in the organization interact with
    one another. In any organization, disputes regarding actions done by people or
    systems that drive these processes are common. From the perspective of application
    security, these scenarios are solved using non-repudiation mechanisms, which assure
    that no user or system can deny these actions. Audit logging is one of the widely
    used non-repudiation mechanisms, in which every action performed on the system
    is stored and is later used for resolving a dispute or analyzing the root cause
    of the dispute. Another advantage is that we can use this data to analyze and
    find out the performance and quality indicators of the business processes.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用BPM的业务领域，过程定义了业务本身。使用这些过程，组织中的多个系统和人员相互交互。在任何组织中，关于由人或系统执行的动作的争议都很常见。从应用安全的角度来看，这些场景通过不可抵赖机制来解决，这些机制确保没有任何用户或系统能够否认这些动作。审计日志是广泛使用的不可抵赖机制之一，其中系统上执行的每个动作都被存储，并随后用于解决争议或分析争议的根本原因。另一个优点是，我们可以使用这些数据来分析和找出业务流程的性能和质量指标。
- en: An audit log helps us to retrieve information about what happened to a process
    instance, when it happened, and who triggered it.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 审计日志帮助我们检索有关过程实例发生情况、发生时间以及谁触发了它的信息。
- en: 'jBPM provides a generic audit logging mechanism that comprehensively covers
    the life cycle of a business process. The audit log is stored as three data models:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: jBPM提供了一个通用的审计日志机制，全面覆盖业务流程的生命周期。审计日志以三个数据模型存储：
- en: '**Process instance log**: Stores the data corresponding to interactions with
    the process instance life cycle, for example, starting of a process instance,
    stopping of a process instance, or aborting a process instance. Using the attributes
    of the instance log, we can trace back the process definition, process version,
    process instance, user identity, and so on, which are associated with a life cycle
    change.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**过程实例日志**：存储与过程实例生命周期交互对应的数据，例如，过程实例的启动、停止或终止过程实例。使用实例日志的属性，我们可以回溯过程定义、过程版本、过程实例、用户身份等信息，这些信息与生命周期变更相关。'
- en: '**Node instance log**: Stores the data corresponding to the life cycle of a
    node in the process. A node refers usually to an activity in the business process.
    The attributes of this data help us to trace back to the process definition, process
    version, process instance, user identity, time, and workitem on which this incident
    occurred.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**节点实例日志**：存储与过程中节点生命周期对应的数据。节点通常指业务过程中的活动。这些数据的属性帮助我们回溯到过程定义、过程版本、过程实例、用户身份、时间以及发生此事件的工作项。'
- en: '**Variable instance log**: Stores the data corresponding to the changes in
    process variables in a process instance.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**变量实例日志**：存储与过程实例中过程变量变化对应的数据。'
- en: 'The following table lists the data available in the audit log data model:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了审计日志数据模型中可用的数据：
- en: '| Process instance log |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| 过程实例日志 |'
- en: '| --- |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| --- |'
- en: '| **Field** | **Type** | **Description** |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| **字段** | **类型** | **描述** |'
- en: '| ID | BIGINT(20) | Identity of the log table |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| ID | BIGINT(20) | 日志表的身份标识 |'
- en: '| Duration | BIGINT(20) | Lifetime of the process instance when the incident
    occurred |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| 持续时间 | BIGINT(20) | 事件发生时过程实例的生命周期 |'
- en: '| End date | DATETIME | Represents the time when the process instance ended,
    applicable only if the process instance is stopped or aborted |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| 结束日期 | DATETIME | 表示过程实例结束的时间，仅适用于过程实例停止或终止的情况 |'
- en: '| External ID | VARCHAR(255) | An external ID provided for the identification
    of a process instance from the domain data |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| 外部ID | VARCHAR(255) | 为从域数据中识别过程实例提供的标识符 |'
- en: '| User identity | VARCHAR(255) | Identity of the user who initiated the process
    instance. |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| 用户身份 | VARCHAR(255) | 启动过程实例的用户身份。 |'
- en: '| Outcome | VARCHAR(255) | Outcome of the process information, primarily used
    to store information such as error code, in case the process stops due to an error
    event |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| 结果 | VARCHAR(255) | 过程信息的结果，主要用于存储信息，如错误代码，以防因错误事件导致过程停止 |'
- en: '| Parent process instance ID | BIGINT(20) | The identifier of the parent process
    instance |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| 父过程实例ID | BIGINT(20) | 父过程实例的标识符 |'
- en: '| Process ID | VARCHAR(255) | Identifier of the process definition |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| 过程ID | VARCHAR(255) | 过程定义的标识符 |'
- en: '| Process instance ID | BIGINT(20) | Unique identifier of the process instance
    |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| 流程实例 ID | BIGINT(20) | 流程实例的唯一标识符 |'
- en: '| Process name | VARCHAR(255) | Name of the process definition |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| 流程名称 | VARCHAR(255) | 流程定义的名称 |'
- en: '| Process version | VARCHAR(255) | Version of the process definition |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| 流程版本 | VARCHAR(255) | 流程定义的版本 |'
- en: '| Start date | DATETIME | Date on which the process instance was started |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| 开始日期 | DATETIME | 流程实例启动的日期 |'
- en: '| Status | INT(11) | ![Audit logging](img/B02011_09_Table.jpg)The preceding
    table provides the possible values of this field and what they mean |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| 状态 | INT(11) | ![审计日志](img/B02011_09_Table.jpg)前表提供了该字段的可能值及其含义 |'
- en: '| **Node instance log** |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| **节点实例日志** |'
- en: '| **Field** | **Type** | **Description** |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| **字段** | **类型** | **描述** |'
- en: '| ID | BIGINT(20) | Unique identifier |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| ID | BIGINT(20) | 唯一标识符 |'
- en: '| Connection | VARCHAR(255) | Identifier of the sequence flow that led to this
    node instance |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| 连接 | VARCHAR(255) | 导致此节点实例的序列流的标识符 |'
- en: '| Log date | DATETIME | Date at which the node was triggered |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| 日志日期 | DATETIME | 触发节点的日期 |'
- en: '| External ID | VARCHAR(255) | External identifier associated with the process
    instance |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| 外部 ID | VARCHAR(255) | 与流程实例相关联的外部标识符 |'
- en: '| Node instance ID | VARCHAR(255) | Identifier of the node instance |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| 节点实例 ID | VARCHAR(255) | 节点实例的标识符 |'
- en: '| Node name | VARCHAR(255) | Name of the node from the process definition |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| 节点名称 | VARCHAR(255) | 来自流程定义的节点名称 |'
- en: '| Node type | BIGINT(20) | The type of node or activity, for example, service
    task |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| 节点类型 | BIGINT(20) | 节点或活动的类型，例如，服务任务 |'
- en: '| Process ID | VARCHAR(255) | Identifier of the process definition that this
    node is a part of |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| 流程 ID | VARCHAR(255) | 该节点所属的流程定义的标识符 |'
- en: '| Process Instance ID | BIGINT(20) | Identifier of the process instance that
    this node is a part of |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| 流程实例 ID | BIGINT(20) | 该节点所属的流程实例的标识符 |'
- en: '| Type | INT(11) | Indicates whether the log was updated on entry or exit |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | INT(11) | 指示日志是在进入还是退出时更新 |'
- en: '| Workitem ID | BIGINT(20) | Identifier of the workitem that this node refers
    to |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| 工作项 ID | BIGINT(20) | 该节点引用的工作项的标识符 |'
- en: '| **Variable instance log** |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| **变量实例日志** |'
- en: '| **Field** | **Type** | **Description** |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| **字段** | **类型** | **描述** |'
- en: '| ID | BIGINT(20) | Unique identifier |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| ID | BIGINT(20) | 唯一标识符 |'
- en: '| Log date | DATETIME | Time at which the change in this variable occurred
    |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| 日志日期 | DATETIME | 该变量变化发生的时间 |'
- en: '| External ID | VARCHAR(255) | External identifier associated with the process
    instance |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| 外部 ID | VARCHAR(255) | 与流程实例相关联的外部标识符 |'
- en: '| Old value | VARCHAR(255) | Previous value of the variable |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| 旧值 | VARCHAR(255) | 变量的前一个值 |'
- en: '| Process ID | VARCHAR(255) | Process ID of the definition |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| 流程 ID | VARCHAR(255) | 定义中的流程 ID |'
- en: '| Process instance ID | BIGINT(20) | Process instance identifier |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| 流程实例 ID | BIGINT(20) | 流程实例标识符 |'
- en: '| Value | VARCHAR(255) | Current value of the variable |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| 值 | VARCHAR(255) | 变量的当前值 |'
- en: '| Variable ID | VARCHAR(255) | Identifier, variable name |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| 变量 ID | VARCHAR(255) | 标识符，变量名 |'
- en: '| Variable instance ID | VARCHAR(255) | Additional information when a variable
    is defined on the composite node level to distinguish between top-level and embedded-level
    variables |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| 变量实例 ID | VARCHAR(255) | 在复合节点级别定义变量时的附加信息，用于区分顶层和嵌套层变量 |'
- en: Apart from its use for security, this log information can be analyzed to find
    out various performance indicators of the process and the organization. The dashboard
    builder can be used to build reports from these logs.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 除了用于安全之外，这些日志信息可以用来分析流程和组织的各种性能指标。仪表板构建者可以用来从这些日志中构建报告。
- en: Maintainability
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可维护性
- en: 'The maintainability of a system can be considered to be a measure to determine
    how easily the repair actions can be performed. When we say repair, we need to
    discuss the following:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 系统的可维护性可以被视为一个衡量指标，用来确定修复操作可以多么容易地执行。当我们说到修复时，我们需要讨论以下内容：
- en: The ease of fixing issues in a deployed system (if any)
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在部署系统中修复问题的容易程度（如果有）
- en: Improvements in the system to match the changing business needs
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统的改进以适应不断变化的企业需求
- en: Coping with infrastructure changes in the deployment environment
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应对部署环境中的基础设施变化
- en: In the system of our consideration, a BPM, changes in business logic are more
    frequent. So, one of the main factors from a maintainability perspective is the
    ease of improving the process executable. This is one area that jBPM excels in;
    as we have already discussed in earlier chapters, jBPM provides a full-fledged
    modeling, simulation, and deployment tooling environment. The actors, from this
    perspective, business analysts and developers, can use the tooling to model, simulate,
    test, and deploy the process changes.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们考虑的系统中，业务逻辑的变化更为频繁。因此，从可维护性的角度来看，主要因素之一是提高流程可执行性的容易程度。这是 jBPM 的一项优势；正如我们在前面的章节中已经讨论过的，jBPM
    提供了一个完整的建模、模拟和部署工具环境。从这个角度来看，参与者，即业务分析师和开发者，可以使用这些工具来建模、模拟、测试和部署流程变更。
- en: Another aspect is the infrastructure or the environment in which jBPM is deployed
    and maintained in production. jBPM supports multiple deployment architectures
    as discussed in [Chapter 8](ch08.html "Chapter 8. Integrating jBPM with Enterprise
    Architecture"), *Integrating jBPM with Enterprise Architecture*, and by default,
    it focuses on deployment in a JEE environment, where it is deployed inside a JEE
    application container, with persistent data storage in a conventional relational
    database.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个方面是 jBPM 在生产环境中部署和维护的基础设施或环境。jBPM 支持多种部署架构，如第 8 章[整合 jBPM 与企业架构](ch08.html
    "第 8 章。整合 jBPM 与企业架构")所述，默认情况下，它侧重于在 JEE 环境中的部署，其中它部署在一个 JEE 应用程序容器内部，持久数据存储在传统的关系型数据库中。
- en: 'The architecture of the system is based on the following standards:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 系统的架构基于以下标准：
- en: Modeling based on BPMN
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于 BPMN 的建模
- en: Simulation based on BPsim
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于 BPsim 的模拟
- en: Human tasks based on WS-HT
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于 WS-HT 的人类任务
- en: Persistence based on JPA
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于 JPA 的持久性
- en: Transaction management based on JTA
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于 JTA 的事务管理
- en: The advantage is that jBPM easily fits into our current production environment,
    and as the environment evolves, so does jBPM with its development community playing
    an active role in enterprise middleware architecture. Compliance to the standards
    and modularity of the system ensures that our client doesn't fall into a vendor
    lock-in scenario, with parts of the system being easily replaceable.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 优势在于 jBPM 可以轻松地适应我们当前的 生产环境，并且随着环境的演变，jBPM 也随之发展，其开发社区在 企业中间件架构中发挥着积极的作用。对标准和系统模块化的遵守确保了我们的客户不会陷入供应商锁定场景，系统的一部分可以轻松替换。
- en: In the previous chapters, we have already explained the "how" of the functionalities
    discussed in this section.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们已经解释了本节所讨论功能的“如何”。
- en: Fault tolerance
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容错性
- en: Fault tolerance indicates the ability to operate in a predictive manner, when
    one or more failures happen in the system. In Java-based applications, these faults
    are managed using exception handling mechanisms. jBPM is no exception; it uses
    the exception handling approach to be fault-tolerant.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 容错性表示在系统发生一个或多个故障时能够以预测方式运行的能力。在基于 Java 的应用程序中，这些故障是通过异常处理机制来管理的。jBPM 也不例外；它使用异常处理方法来实现容错性。
- en: Exception handling in process definitions
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 流程定义中的异常处理
- en: 'We can specify the occurrence and the handling mechanisms that happen in a
    business process using BPMN elements, as follows:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 BPMN 元素来指定业务流程中发生和处理的机制，如下所示：
- en: Error events can be used to specify the occurrence of an unexpected situation.
    Compared to Java programming, this is similar to throwing an error.
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用错误事件来指定意外情况的发生。与 Java 编程相比，这类似于抛出错误。
- en: Compensation can be used to specify what to do when an error has occurred; this
    is similar to the catch operation construct in a Java program.
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用补偿来指定当发生错误时应该做什么；这类似于 Java 程序中的 catch 操作结构。
- en: The advantage of using exception handling at a process level is that the exception
    scenarios are visible in the process, thus making the monitoring and analysis
    of these scenarios easier, thereby contributing to continuous improvements of
    the process.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在流程级别使用异常处理的优势在于，异常场景在流程中是可见的，从而使得对这些场景的监控和分析更加容易，从而有助于流程的持续改进。
- en: Exception handling for domain-specific processes
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 针对特定领域流程的异常处理
- en: 'When we define new custom workitem handlers that form custom, business-specific
    activities in a process, we can specify mechanisms to handle exception scenarios.
    jBPM by default provides the following decorators for handling an exception scenario
    in an activity:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们定义新的自定义工作项处理程序，这些处理程序在流程中形成自定义、业务特定的活动时，我们可以指定处理异常场景的机制。jBPM默认提供以下装饰器来处理活动中的异常场景：
- en: '`SignallingTaskHandlerDecorator`: This decorator catches an exception during
    the life cycle methods of an activity and signals the process instance using a
    configurable event. These events can be caught in the process definition, and
    subsequent actions can be taken. This decorator can be specified while registering
    the workitem handler to a session.'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SignallingTaskHandlerDecorator`：这个装饰器在活动的生命周期方法中捕获异常，并使用可配置的事件通知流程实例。这些事件可以在流程定义中被捕获，并采取后续行动。这个装饰器可以在将工作项处理程序注册到会话时指定。'
- en: 'For example:'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE12]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In this example, we register a handler for sending mails by using `MailServiceHandler.class`,
    and during exception scenarios, the `"Mail-Service-Failed"` event is signaled
    to the process instance.
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个示例中，我们通过使用`MailServiceHandler.class`注册一个发送邮件的处理程序，并在异常场景下，将`"Mail-Service-Failed"`事件通知给流程实例。
- en: '`LoggingTaskHandlerDcorator`: This decorator catches the exceptions during
    the life cycle methods of the activity of the logging mechanism. This feature
    can be used in less critical areas where a process exception can just be a warning
    in the log.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LoggingTaskHandlerDcorator`：这个装饰器在日志机制活动的生命周期方法中捕获异常。这个特性可以在不那么关键的区域使用，其中流程异常在日志中只是一个警告。'
- en: Summary
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed the non-functional characteristics of jBPM that
    are critical in building a production-ready application based on BPM. Further,
    we discussed sample deployment architectures that are possible with jBPM to meet
    various requirements and configurations, and customization available to include
    certain characteristics in the jBPM system.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了jBPM的非功能性特征，这些特征对于基于BPM构建生产就绪的应用至关重要。此外，我们还讨论了使用jBPM满足各种需求和配置的示例部署架构，以及可用于在jBPM系统中包含某些特性的定制选项。
