["```java\n    server = Network.createServer(Integer.parseInt(prop.getProperty(\"server.port\")));\n    server.start();\n    ```", "```java\n    client = Network.connectToServer(prop.getProperty(\"server.address\"), Integer.parseInt(prop.getProperty(\"server.port\")));\n    client.start();\n    ```", "```java\n    public void connectionAdded(Server server, HostedConnection conn) {\n      System.out.println(\"Player connected: \" + conn.getAddress());\n    }\n    ```", "```java\n    @Serializable()\n    public class ServerMessage extends AbstractMessage{\n        private String message;\n\n        public String getMessage() {\n            return message;\n        }\n\n        public void setMessage(String message) {\n            this.message = message;\n        }\n    }\n    ```", "```java\n    public class ServerMessageHandler implements MessageListener<Client>{\n\n        public void messageReceived(Client source, Message m) {\n            ServerMessage message = (ServerMessage) m;\n            System.out.println(\"Server message: \" + message.getMessage());\n        }\n    }\n    ```", "```java\n    ServerMessageHandler serverMessageHandler = new ServerMessageHandler();\n    client.addMessageListener(serverMessageHandler, ServerMessage.class);\n    ```", "```java\n    client.addMessageListener(serverMessageHandler);\n    ```", "```java\n    ServerMessage connMessage = new ServerMessage();\n    String message = \"Player connected from: \" + conn.getAddress();\n    connMessage.setMessage(message);\n    server.broadcast(connMessage);\n    ```", "```java\n    public static void main(String[] args ) throws Exception {\n      Serializer.registerClass(ServerMessage.class);\n    ```", "```java\nSerializer.registerClass(WelcomeMessage.class);\n```", "```java\n    public final static int GAME_WAITING = 0;\n    public final static int GAME_STARTED = 1;\n    public final static int GAME_ENDED = 2;\n    private int status = GAME_WAITING;\n    ```", "```java\n    public void placeShip(int playerId, int shipId, int x, int y, boolean horizontal){\n      Ship s = GameUtil.getShip(shipId);\n      Ship[][] board;\n      if(playerId == playerOne.getId()){\n        board = boardOne;\n        playerOne.increaseShips();\n      } else {\n        board = boardTwo;\n        playerTwo.increaseShips();\n      }\n      for(int i = 0;i < s.getSegments(); i++){\n        [verify segment is inside board bounds]\n      }\n    }\n    ```", "```java\n    public Ship applyMove(FireActionMessage action){\n      int x = action.getX();\n      int y = action.getY();\n      Ship ship = null;\n      if(action.getPlayerId() == playerOne.getId()){\n        ship = boardTwo[x][y];\n        if(ship != null){\n          ship.hit();\n          if(ship.isSunk()){\n            playerTwo.decreaseShips();\n          }\n        }\n      } else {\n          [replicate for playerTwo]\n    }\n      if(playerTwo.getShips() < 1 || playerOne.getShips() < 1){\n        status = GAME_ENDED;\n      }\n      if(action.getPlayerId() == playerTwo.getId()){\n        turn++;\n      }\n      return ship;\n    }\n    ```", "```java\n    private HashMap<Integer, Game> games = new HashMap<Integer, Game>();\n    ```", "```java\n    private HashMap<Integer, List<HostedConnection>> connectionFilters = new HashMap<Integer, List<HostedConnection>>();\n    ```", "```java\n    public void connectionAdded(Server server, HostedConnection conn) {\n      Game game = null;\n      if(games.isEmpty() || games.get(nextGameId - 1).getPlayerTwo() != null){\n        game = createGame();\n      } else {\n        game = games.get(nextGameId - 1);\n      }\n      addPlayer(game, conn);\n    }\n    ```", "```java\n    private Game createGame(){\n      Game game = new Game();\n      game.setId(nextGameId++);\n      games.put(game.getId(), game);\n      List<HostedConnection> connsForGame = new ArrayList<HostedConnection>();\n      connectionFilters.put(game.getId(), connsForGame);\n      return game;\n    }\n    ```", "```java\n    private void addPlayer(Game game, HostedConnection conn){\n      Player player = new Player();\n      player.setId(nextPlayerId++);\n    ```", "```java\n      WelcomeMessage welcomeMessage = new WelcomeMessage();\n      welcomeMessage.setMyPlayerId(player.getId());\n      server.broadcast(Filters.in(conn), welcomeMessage);\n    ```", "```java\n      if(game.getPlayerOne() == null){\n        game.setPlayerOne(player);\n      } else {\n        game.setPlayerTwo(player);\n      }\n    List<HostedConnection> connsForGame = connectionFilters.get(game.getId());\n    connsForGame.add(conn);\n    ```", "```java\n      GameStatusMessage waitMessage = new GameStatusMessage();\n      waitMessage.setGameId(game.getId());\n      waitMessage.setGameStatus(Game.GAME_WAITING);\n      waitMessage.setPlayerOneId(game.getPlayerOne() != null ? game.getPlayerOne().getId() : 0);\n      waitMessage.setPlayerTwoId(game.getPlayerTwo() != null ? game.getPlayerTwo().getId() : 0);\n      server.broadcast(Filters.in(connsForGame), waitMessage);\n    }\n    ```", "```java\n    public void messageReceived(Client source, Message m) {\n      if(m instanceof WelcomeMessage){\n        WelcomeMessage welcomeMess = ((WelcomeMessage)m);\n        Player p = gameClient.getThisPlayer();\n        p.setId(welcomeMessage.getMyPlayerId());\n    }\n    ```", "```java\n    else if(m instanceof GameStatusMessage){\n      int status = ((GameStatusMessage)m).getGameStatus();\n      switch(status){\n      case Game.GAME_WAITING:\n        if(game.getId() == 0 && ((GameStatusMessage)m).getGameId() > 0){\n             game.setId(((GameStatusMessage)m).getGameId());\n          }\n    ```", "```java\n    if(game.getPlayerOne() == null && ((GameStatusMessage)m).getPlayerOneId() > 0){\n      int playerOneId = ((GameStatusMessage)m).getPlayerOneId();\n      if(gameClient.getThisPlayer().getId() == playerOneId){\n        game.setPlayerOne(gameClient.getThisPlayer());\n        gameClient.placeShips();\n           } else {\n             Player otherPlayer = new Player();\n                 otherPlayer.setId(playerOneId);\n        game.setPlayerOne(otherPlayer);\n      }\n\n    }\n    game.setStatus(status);\n    ```", "```java\n    ClientMessageHandler messageHandler = new ClientMessageHandler(this, game);\n    client.addMessageListener(messageHandler);\n    ```", "```java\n    private static Ship[] ships = new Ship[]{new Ship(\"PatrolBoat\", 2), new Ship(\"Destroyer\", 3), new Ship(\"Submarine\", 3), new Ship(\"Battleship\", 4), new Ship(\"Carrier\", 5)};\n    ```", "```java\n    public void messageReceived(HostedConnection conn, Message m) {\n      if (m instanceof PlaceShipMessage){\n        PlaceShipMessage shipMessage = (PlaceShipMessage) m;\n        int gameId = shipMessage.getGameId();\n        Game game = gameServer.getGame(gameId);\n        game.placeShip( â€¦ );\n        if(game.getPlayerOne().getShips() == 5 && game.getPlayerTwo() != null&& game.getPlayerTwo().getShips() == 5){\n          gameServer.startGame(gameId);\n        }\n    ```", "```java\n    public Game startGame(int gameId){\n      Game game = games.get(gameId);\n      List<HostedConnection> connsForGame = connectionFilters.get(gameId);\n      GameStatusMessage startMessage = new GameStatusMessage();\n      startMessage.setGameId(game.getId());\n      startMessage.setGameStatus(Game.GAME_STARTED);\n      server.broadcast(Filters.in(connsForGame), startMessage);\n    ```", "```java\n      int startingPlayer = FastMath.nextRandomInt(1, 2);\n      TurnMessage turnMessage = new TurnMessage();\n\n      server.broadcast(Filters.in(connsForGame), turnMessage);\n      return game;\n    }\n    ```", "```java\n    if(m instanceof FireActionMessage){\n      FireActionMessage fireAction = (FireActionMessage) m;\n      int gameId = fireAction.getGameId();\n      Game game = gameServer.getGame(gameId);\n      if(game.getCurrentPlayerId() == fireAction.getPlayerId()){\n    ```", "```java\n        Ship hitShip = game.applyMove(fireAction);\n    ```", "```java\n                    TurnMessage turnMessage = new TurnMessage();\n                    turnMessage.setGameId(game.getId());\n                    game.setCurrentPlayerId(game.getCurrentPlayerId() == 1 ? 2 : 1);\n                    turnMessage.setActivePlayer(game.getCurrentPlayerId());\n                    gameServer.sendMessage(turnMessage);\n                }\n    ```", "```java\n    private Server server;\n    private int nextPlayerId = 1;\n    private Game game;\n    private HashMap<HostedConnection, ServerPlayerControl> playerMap = new HashMap<HostedConnection, ServerPlayerControl>();\n    ```", "```java\n    public static void main(String[] args ) throws Exception{\n      GameUtil.initialize();\n      FPSServer gameServer = new FPSServer();\n      AppSettings settings = new AppSettings(true);\n      settings.setFrameRate(30);\n      gameServer.setSettings(settings);\n      gameServer.start(JmeContext.Type.Headless);\n    }\n    ```", "```java\n    private void addPlayer(Game game, HostedConnection conn){\n      ServerPlayerControl player = new ServerPlayerControl();\n      player.setId(nextPlayerId++);\n      playerMap.put(conn, player);\n      game.addPlayer(player);\n    ```", "```java\n      Node s = new Node(\"\");\n      s.addControl(player);\n      rootNode.attachChild(s);\n    ```", "```java\n      WelcomeMessage welcomeMessage = new WelcomeMessage();\n      welcomeMessage.setMyPlayerId(player.getId());\n      server.broadcast(Filters.in(conn), welcomeMessage);\n    ```", "```java\n      Collection<NetworkedPlayerControl> players = game.getPlayers().values();\n      for(NetworkedPlayerControl p: players){\n        PlayerJoinMessage joinMessage = new PlayerJoinMessage();\n        joinMessage.setPlayerId(p.getId());\n        server.broadcast(Filters.in(conn), joinMessage);\n      }\n    ```", "```java\n      PlayerJoinMessage joinMessage = new PlayerJoinMessage();\n      joinMessage.setPlayerId(player.getId());\n      server.broadcast(joinMessage);\n    }\n    ```", "```java\n    public void simpleUpdate(float tpf) {\n      super.simpleUpdate(tpf);\n      Collection<NetworkedPlayerControl> players = game.getPlayers().values();\n      for(NetworkedPlayerControl p: players){\n        p.update(tpf);\n        PlayerUpdateMessage updateMessage = new PlayerUpdateMessage();\n        updateMessage.setPlayerId(p.getId());\n    updateMessage.setLookDirection(p.getSpatial().getLocalRotation());\n    updateMessage.setPosition(p.getSpatial().getLocalTranslation());\n        updateMessage.setYaw(p.getYaw());\n        server.broadcast(updateMessage);\n      }\n    }\n    ```", "```java\n    public void messageReceived(HostedConnection source, Message m) {\n      if(m instanceof PlayerMessage){\n        PlayerMessage message = (PlayerMessage)m;\n        NetworkedPlayerControl p = game.getPlayer(message.getPlayerId());\n        p.onMessageReceived(message);\n      }\n    }\n    ```", "```java\n    boolean forward = false, backward = false, leftRotate = false, rightRotate = false, leftStrafe = false, rightStrafe = false;\n    ```", "```java\n    public void onMessageReceived(PlayerMessage message) {\n      if(message instanceof PlayerActionMessage){\n        String action = ((PlayerActionMessage) message).getAction();\n        boolean value = ((PlayerActionMessage) message).isPressed();\n        float floatValue = ((PlayerActionMessage) message).getFloatValue();\n    ```", "```java\n    if (action.equals(\"StrafeLeft\")) {\n      leftStrafe = value;\n    } else if (action.equals(\"StrafeRight\")) {\n      rightStrafe = value;\n    }\n    ...\n    else if (action.equals(\"RotateLeft\")) {\n      rotate(floatValue);\n    } else if (action.equals(\"RotateRight\")) {\n      rotate(-floatValue);\n     }\n    ```", "```java\n    Properties prop = new Properties();   prop.load(getClass().getClassLoader().getResourceAsStream(\"network/resources/network.properties\"));\n            client = Network.connectToServer(prop.getProperty(\"server.name\"), Integer.parseInt(prop.getProperty(\"server.version\")), prop.getProperty(\"server.address\"), Integer.parseInt(prop.getProperty(\"server.port\")));\n    ```", "```java\n    public void simpleInitApp() {\n      InputAppState inputAppState = new InputAppState();\n      inputAppState.setClient(this);\n      stateManager.attach(inputAppState);\n    ```", "```java\n      Material playerMaterial  = new Material(assetManager, \"Common/MatDefs/Misc/Unshaded.j3md\");\n      playerGeometry = new Geometry(\"Player\", new Box(1f,1f,1f));\n      playerGeometry.setMaterial(playerMaterial);\n    ```", "```java\n      getFlyByCamera().setEnabled(false);\n      game = new Game();\n    ```", "```java\n    ClientMessageHandler messageHandler = new ClientMessageHandler(this, game);\n    client.addMessageListener(messageHandler);\n    ```", "```java\n    ClientPlayerControl player = new ClientPlayerControl();\n    player.setId(id);\n    final Node playerNode = new Node(\"Player Node\");\n            playerNode.attachChild(assetManager.loadModel(\"Models/Jaime/Jaime.j3o\"));//\n    playerNode.addControl(player);\n    ```", "```java\n    enqueue(new Callable(){\n      public Object call() throws Exception {\n        rootNode.attachChild(playerNode);\n        return null;\n      }\n    });\n    ```", "```java\n    public void setThisPlayer(ClientPlayerControl player){\n      this.thisPlayer = player;\n      CameraNode camNode = new CameraNode(\"CamNode\", cam);\n      camNode.setControlDir(CameraControl.ControlDirection.SpatialToCamera);\n      ((Node)player.getSpatial()).attachChild(camNode);\n    }\n    ```", "```java\n    public void destroy() {\n      super.destroy();\n      client.close();\n    }\n    ```", "```java\n    public void onMessageReceived(PlayerMessage message) {\n      if(message instanceof PlayerUpdateMessage){\n        PlayerUpdateMessage updateMessage = (PlayerUpdateMessage) message;\n      tempRotation.set(updateMessage.getLookDirection());\n      tempLocation.set(updateMessage.getPosition());\n    tempYaw = updateMessage.getYaw();\n      }\n    }\n    ```", "```java\n    spatial.setLocalTranslation(tempLocation);\n    spatial.setLocalRotation(tempRotation);\n    yaw = tempYaw;\n    ```", "```java\n    public void messageReceived(Client source, Message m) {\n      if(m instanceof WelcomeMessage){\n        ClientPlayerControl p = gameClient.createPlayer(((WelcomeMessage)m).getMyPlayerId());\n        gameClient.setThisPlayer(p);\n        game.addPlayer(gameClient.getThisPlayer());\n    ```", "```java\n    PlayerJoinMessage joinMessage = (PlayerJoinMessage) m;\n    int playerId = joinMessage.getPlayerId();\n    if(joinMessage.isLeaving()){\n       gameClient.removePlayer((ClientPlayerControl)   game.getPlayer(playerId));\n      game.removePlayer(playerId);\n    } else if(game.getPlayer(playerId) == null){\n      ClientPlayerControl p = gameClient.createPlayer(joinMessage.getPlayerId());\n      game.addPlayer(p);\n    }\n    ```", "```java\n      } else if (m instanceof PlayerUpdateMessage){\n        PlayerUpdateMessage updateMessage = (PlayerUpdateMessage) m;\n        int playerId = updateMessage.getPlayerId();\n        ClientPlayerControl p = (ClientPlayerControl) game.getPlayer(playerId);\n        if(p != null){\n          p.onMessageReceived(updateMessage);\n        }\n    ```", "```java\npublic void onAction(String name, boolean isPressed, float tpf) {\n  InputMapping input = InputMapping.valueOf(name);\n  PlayerActionMessage action = new PlayerActionMessage();\n  action.setAction(name);\n  action.setPressed(isPressed);\n  action.setPlayerId(client.getThisPlayer().getId());\n  client.send(action);\n}\n```", "```java\n    private Node loadLevel(String levelName){\n      return (Node) assetManager.loadModel(\"Scenes/\"+levelName + \".j3o\");\n    }\n    ```", "```java\n    levelNode = loadLevel(\"TestScene\");\n    rootNode.attachChild(levelNode);\n    game.setLevelName(\"TestScene\");\n    ```", "```java\n    LoadLevelMessage levelMessage = new LoadLevelMessage();\n    levelMessage.setLevelName(game.getLevelName());\n    server.broadcast(Filters.in(conn), levelMessage);\n    ```", "```java\n    public void loadLevel(final String levelName){\n      enqueue(new Callable(){\n        public Object call() throws Exception {\n          if(rootNode.hasChild(levelNode)){\n            rootNode.detachChild(levelNode);\n            }\n            levelNode = (Node) assetManager.loadModel(\"Scenes/\"+levelName + \".j3o\");\n            rootNode.attachChild(levelNode);\n            return null;\n        }\n      });\n    }\n    ```", "```java\n    else if (m instanceof LoadLevelMessage){\n      gameClient.loadLevel(((LoadLevelMessage)m).getLevelName());\n      game.setLevelName(((LoadLevelMessage)m).getLevelName());\n    }\n    ```", "```java\n    float factor = tpf / 0.03f; spatial.setLocalTranslation(spatial.getLocalTranslation().interpolateLocal(tempLocation, factor)); spatial.setLocalRotation(spatial.getLocalRotation().slerp(spatial.getLocalRotation(), tempRotation, factor));\n    ```", "```java\n    if(message.getAction().equals(\"Fire\") && message.isPressed()){\n      server.onFire(p);\n    }\n    ```", "```java\n    public void onFire(NetworkedPlayerControl player){\n      Vector3f direction = player.getSpatial().getWorldRotation().getRotationColumn(2);\n      direction.setY(-player.getYaw());\n      ServerBullet bullet = new ServerBullet(player.getSpatial().getWorldTranslation().add(0, 1, 0), direction);\n      bullet.setId(nextObjectId++);\n      bullets.add(bullet);\n    }\n    ```", "```java\n    int nrOfBullets = bullets.size();\n    for(int i = 0; i < nrOfBullets; i++){\n      ServerBullet bullet = bullets.get(i);\n      bullet.update(tpf);\n      BulletUpdateMessage update = new BulletUpdateMessage();\n      update.setId(bullet.getId());\n      update.setPosition(bullet.getWorldPosition());\n      update.setAlive(bullet.isAlive());\n      server.broadcast(update);\n      if(!bullet.isAlive()){\n        bullets.remove(bullet);\n        nrOfBullets--;\n        i--;\n      }\n    }\n    ```", "```java\n    if (m instanceof BulletUpdateMessage){\n      BulletUpdateMessage update = (BulletUpdateMessage) m;\n      ClientBullet bullet = gameClient.getBullet(update.getId());\n      if(bullet == null){\n        bullet = gameClient.createBullet(update.getId());\n      }\n      bullet.setPosition(update.getPosition());\n      if(!update.isAlive()){\n        gameClient.removeBullet(update.getId(), bullet.getSpatial());\n      }\n    }\n    ```", "```java\n    public ClientBullet createBullet(int id){\n      final ClientBullet bulletControl = new ClientBullet();\n      final Spatial g = assetManager.loadModel(\"Models/Banana/banana.j3o\");\n      g.rotate(FastMath.nextRandomFloat(), FastMath.nextRandomFloat(), FastMath.nextRandomFloat());\n      g.addControl(bulletControl);\n      bullets.put(id, bulletControl);\n      rootNode.attachChild(g);\n      return bulletControl;\n    }\n    ```", "```java\n    Collection<NetworkedPlayerControl> players = game.getPlayers().values();\n      for(NetworkedPlayerControl p: players){\n        p.update(tpf);\n      }\n    ```", "```java\n    Iterator<HostedConnection> it = playerMap.keySet().iterator();\n    while(it.hasNext()){\n      HostedConnection conn = it.next();\n      ServerPlayerControl player = playerMap.get(conn);\n      for(NetworkedPlayerControl otherPlayer: players){\n        float distance = player.getSpatial().getWorldTranslation().distance(otherPlayer.getSpatial().getWorldTranslation());\n      PlayerUpdateMessage updateMessage = null;\n      if(distance < 50){\n        updateMessage = createUpdateMessage(otherPlayer);\n        player.addVisiblePlayer(otherPlayer.getId());\n      } else if (player.removeVisiblePlayer(otherPlayer.getId())){\n        updateMessage = createUpdateMessage(otherPlayer);\n        updateMessage.setVisible(false);\n      }\n      if(updateMessage != null){\n        server.broadcast(Filters.in(conn), updateMessage);\n      }\n    }\n    ```", "```java\n    if(p.isVisible() && p.getSpatial().getParent() == null){\n      gameClient.getRootNode().attachChild(p.getSpatial());\n    } else if (!p.isVisible() && p.getSpatial().getParent() != null){\n      gameClient.getRootNode().detachChild(p.getSpatial());\n    }\n    ```"]