["```java\nimport os\nimport tweepy\n\nfrom .queue import publish_tweet\n\nconsumer_key = os.environ['TWITTER_CONSUMER_KEY']\nconsumer_secret = os.environ['TWITTER_CONSUMER_SECRET']\n\naccess_token = os.environ['TWITTER_ACCESS_TOKEN']\naccess_token_secret = os.environ['TWITTER_ACCESS_SECRET']\n\nclass PhotoStreamListener(tweepy.StreamListener):\n\n    def _get_media_urls(self, media):\n        if not media:\n            return []\n\n        return [m['media_url_https'] for m in media if m['type'] == \n        'photo']\n\n    def _get_hashtags(self, container):\n        hashtags = [h['text'] for h in container.get('hashtags', ())]\n        return [h for h in hashtags if '#' + h in self.tags]\n\n    def on_status(self, tweet):\n        container = tweet._json\n\n        entities = container.get('entities', {}).get('media')\n        extended_entities = container.get('extended_entities', \n        {}).get('media')\n        extended_tweet = container.get('extended_tweet', \n        {}).get('entities', {}).get('media')\n\n        all_urls = set()\n        for media in (entities, extended_entities, extended_tweet):\n            urls = self._get_media_urls(media)\n            all_urls.update(set(urls))\n\n        hashtags = self._get_hashtags(container.get('entities', {}))\n\n        if all_urls:\n            for url in all_urls:\n                publish_tweet({\n                    'text': tweet.text,\n                    'url': url,\n                    'hashtags': hashtags,\n                })\n\n    @staticmethod\n    def start(tags=None):\n        tags = tags or ['#dog', '#dogs', '#puppy', '#cat', '#kitty', \n        '#lolcat', '#kitten']\n\n        auth = tweepy.OAuthHandler(consumer_key, consumer_secret)\n        auth.set_access_token(access_token, access_token_secret)\n\n        api = tweepy.API(auth)\n\n        listener = PhotoStreamListener()\n        listener.tags = tags\n        stream = tweepy.Stream(auth=api.auth, listener=listener)\n        try:\n            stream.filter(track=tags)\n        except Exception as e:\n            print 'Shutting down'\n            print e\n```", "```java\npublish_tweet({\n    'text': tweet.text,\n    'url': url,\n    'hashtags': hashtags,\n})\n```", "```java\nservice: twitter-stream\n\nprovider:\n  name: aws\n  runtime: python2.7\n  memorySize: 128\n  region: ${env:AWS_REGION}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - sqs:*\n      Resource: \"arn:aws:sqs:${env:AWS_REGION}:*:${env:ENV}TwitterFirehoseQueue\"\n    - Effect: Allow\n      Action:\n        - rekognition:DetectLabels\n      Resource: \"*\"\n    - Effect: \"Allow\"\n      Action:\n        - \"dynamodb:*\"\n      Resource: \"arn:aws:dynamodb:${env:AWS_REGION}:*:table/${env:DYNAMODB_RESULTS_TABLE_NAME}\"\n  environment:\n    TWITTER_ACCESS_SECRET: ${env:TWITTER_ACCESS_SECRET}\n    TWITTER_ACCESS_TOKEN: ${env:TWITTER_ACCESS_TOKEN}\n    TWITTER_CONSUMER_KEY: ${env:TWITTER_CONSUMER_KEY}\n    TWITTER_CONSUMER_SECRET: ${env:TWITTER_CONSUMER_SECRET}\n    TWITTER_STREAM_QUEUE_NAME: ${env:ENV}TwitterFirehoseQueue\n    DYNAMODB_RESULTS_TABLE_NAME: ${env:DYNAMODB_RESULTS_TABLE_NAME}\n\npackage:\n  exclude:\n    - .git/**\n    - __pycache__/**\n    - \"**/__pycache__/**\"\n    - \"*.pyc\"\n    - \"*.swp\"\n\nresources:\n  Resources:\n    FirehoseSQS:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: ${env:ENV}TwitterFirehoseQueue\n        VisibilityTimeout: 30\n    DynamoResultsTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${env:DYNAMODB_RESULTS_TABLE_NAME}\n        AttributeDefinitions:\n          - AttributeName: url\n            AttributeType: S\n        KeySchema:\n          - AttributeName: url\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: ${env:DYNAMODB_TABLE_READ_IOPS}\n          WriteCapacityUnits: ${env:DYNAMODB_TABLE_WRITE_IOPS}\n\nfunctions:\n  Firehose:\n    handler: handler.firehose\n    timeout: 58\n    events:\n      - schedule: rate(1 minute)\n  Classify:\n    handler: handler.classify\n    timeout: 58\n    events:\n      - schedule: rate(1 minute)\n```", "```java\nimport boto3\nimport json\nimport os\nimport urllib2\n\nfrom decimal import Decimal\n\nTWITTER_STREAM_QUEUE_NAME = os.environ['TWITTER_STREAM_QUEUE_NAME']\n\nfrom .storage import ClassiferResults\n\n_sqs_client = None\n_s3_client = None\n_sqs_url = None\n\ndef get_sqs_client():\n    global _sqs_client\n    if _sqs_client is None:\n        _sqs_client = boto3.client('sqs')\n    return _sqs_client\n\ndef get_queue_url():\n    global _sqs_url\n    if _sqs_url is None:\n        client = get_sqs_client()\n        response =    \n        client.get_queue_url(QueueName=TWITTER_STREAM_QUEUE_NAME)\n        _sqs_url = response['QueueUrl']\n    return _sqs_url\n\ndef publish_tweet(payload):\n    msg = json.dumps(payload)\n    client = get_sqs_client()\n    sqs_url = get_queue_url()\n\n    return client.send_message(\n                QueueUrl=sqs_url,\n                MessageBody=msg)\n\ndef classify_photos():\n    rekognition = boto3.client('rekognition')\n    sqs = get_sqs_client()\n    sqs_url = get_queue_url()\n\n    while True:\n        response = sqs.receive_message(\n            QueueUrl=sqs_url,\n            MaxNumberOfMessages=10,\n        )\n        messages = response.get('Messages')\n        if not messages:\n            break\n\n        for msg in messages:\n            receipt = msg['ReceiptHandle']\n            body = json.loads(msg['Body'])\n\n            url = body['url']\n\n            # first check if we already have this image\n            classifier_store = ClassiferResults(url=url)\n            if classifier_store.exists:\n                print 'Deleting queue item due to duplicate image'\n                sqs.delete_message(QueueUrl=sqs_url, \n                ReceiptHandle=receipt)\n                continue\n\n            image_response = urllib2.urlopen(url)\n            results = rekognition.detect_labels(Image={'Bytes': \n            image_response.read()})\n\n            scores = [{\n                'Confidence': Decimal(l['Confidence']),\n                'Name': l['Name'],\n            } for l in results['Labels']]\n\n            classifier_store.upsert(\n                    text=body['text'],\n                    hashtags=body['hashtags'],\n                    scores=scores,\n                    labels=[l['Name'] for l in results['Labels']],\n            )\n\n            sqs.delete_message(QueueUrl=sqs_url, ReceiptHandle=receipt)\n```", "```java\n{\n    \"Labels\": [\n        {\n            \"Name\": \"Animal\",\n            \"Confidence\": 86.34986877441406\n        },\n        {\n            \"Name\": \"Cat\",\n            \"Confidence\": 86.34986877441406\n        },\n        {\n            \"Name\": \"Kitten\",\n            \"Confidence\": 86.34986877441406\n        },\n        {\n            \"Name\": \"Mammal\",\n            \"Confidence\": 86.34986877441406\n        },\n        {\n            \"Name\": \"Pet\",\n            \"Confidence\": 86.34986877441406\n        },\n        {\n            \"Name\": \"Manx\",\n            \"Confidence\": 82.7002182006836\n        },\n        {\n            \"Name\": \"Asleep\",\n            \"Confidence\": 54.48805618286133\n        },\n        {\n            \"Name\": \"Siamese\",\n            \"Confidence\": 52.179630279541016\n        }\n    ]\n}\n```", "```java\n>> import boto3\n>>> url = 'https://pbs.twimg.com/media/DSQYcgMWAAAwfXf.jpg'\n>>> dynamo = boto3.resource('dynamodb')\n>>> table = dynamo.Table('devTweetClassifierResults')\n>>> table.get_item(Key={'url': url})\n{u'hashtags': [u'cat', u'kitten', u'kitty'],\n u'labels': [u'Animal', u'Pet', u'Cat', u'Mammal', u'Manx'],\n u'scores': [{u'Confidence': Decimal('86.49568939208984375'),\n u'Name': u'Animal'},\n {u'Confidence': Decimal('86.49568939208984375'),\n u'Name': u'Pet'},\n {u'Confidence': Decimal('79.18183135986328125'),\n u'Name': u'Cat'},\n {u'Confidence': Decimal('79.18183135986328125'),\n u'Name': u'Mammal'},\n {u'Confidence': Decimal('79.18183135986328125'),\n u'Name': u'Manx'}],\n u'text': u'#cat #cats #kitten #kittens #nice #cute #cutie #cool #ilovecats #kitty #groomers #vets #photooftheday #mycat\\u2026 https://t.co/YXrs0JFb1d',\n u'url': u'https://pbs.twimg.com/media/DSQYcgMWAAAwfXf.jpg'}\n```"]