["```java\njboss/keycloak-openshift \n```", "```java\npackage org.packt.swarm.petstore;\n\nimport org.packt.swarm.petstore.api.CartItemView;\nimport org.packt.swarm.petstore.api.CatalogItemView;\nimport org.packt.swarm.petstore.cart.api.CartItem;\n\nimport javax.inject.Inject;\nimport javax.ws.rs.DELETE;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.POST;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.PathParam;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.QueryParam;\nimport javax.ws.rs.core.Context;\nimport javax.ws.rs.core.MediaType;\nimport javax.ws.rs.core.Response;\nimport javax.ws.rs.core.SecurityContext;\nimport java.util.List;\n\n@Path(\"/\")\npublic class GatewayResource {\n\n    @Inject\n    private GatewayService gatewayService;\n\n    @GET\n    @Path(\"/catalog/item\")\n    @Produces(MediaType.APPLICATION_JSON)\n    public Response getItems() {\n        List<CatalogItemView> result = gatewayService.getItems();\n        return Response.ok(result).build();\n    }\n\n @GET\n    @Path(\"/cart/{customerId}\")\n @Produces(MediaType.APPLICATION_JSON)\n public Response getCart(@PathParam(\"customerId\") String customerId) {\n List<CartItemView> cart = gatewayService.getCart(customerId);\n        return Response.ok(cart).build();\n    }\n @POST\n    @Path(\"/cart/{customerId}\")\n @Produces(MediaType.APPLICATION_JSON)\n public Response addToCart(@PathParam(\"customerId\") String customerId, CartItem item, @QueryParam(\"additive\") boolean additive) {\n gatewayService.addToCart(customerId, item, additive);\n        return Response.ok().build();\n    }\n @DELETE\n    @Path(\"/cart/{customerId}/{itemId}\")\n @Produces(MediaType.APPLICATION_JSON)\n public Response deleteFromCart(@PathParam(\"customerId\") String customerId, @PathParam(\"itemId\") String itemId) {\n gatewayService.deleteFromCart(customerId, itemId);\n        return Response.ok().build();\n    }\n\n    @POST\n    @Path(\"payment\")\n    @Produces(MediaType.APPLICATION_JSON)\n    public Response payment(@QueryParam(\"customerId\") int customerId, @Context  SecurityContext securityContext){\n        try {\n            String paymentUUID = gatewayService.buy(customerId);\n            return Response.ok(paymentUUID).build();\n        } catch (Exception e) {\n            return Response.status(Response.Status.BAD_REQUEST).build();\n        }\n    }\n\n}\n```", "```java\n(...)\n<dependency>\n    <groupId>org.wildfly.swarm</groupId>\n    <artifactId>keycloak</artifactId>\n    <version>${version.wildfly.swarm}</version> </dependency>\n(...)\n```", "```java\n{\n  \"realm\": \"petstore\",\n  \"auth-server-url\": \"${env.KEYCLOAK_URL}/auth\",\n  \"resource\": \"petstore-ui\"\n}\n```", "```java\npackage org.packt.swarm.petstore;\n\nimport org.jboss.shrinkwrap.api.Archive;\nimport org.wildfly.swarm.Swarm;\nimport org.wildfly.swarm.keycloak.Secured;\n\npublic class Main {\n\n    public static void main(String[] args) throws Exception {\n\n       (...)    \n\n        Archive<?> deployment = swarm.createDefaultDeployment();\n        secureDeployment(deployment);\n\n        swarm.deploy(deployment);\n    }\n\n    private static void secureDeployment(final Archive<?> deployment){\n        deployment.as(Secured.class)\n .protect(\"/cart/*\")\n .withMethod(\"POST\",\"GET\",\"DELETE\")\n .withRole(\"customer\");\n    }\n}\n```", "```java\npackage org.packt.swarm.petstore.security;\n\nimport org.keycloak.KeycloakPrincipal;\n\nimport javax.ws.rs.client.ClientRequestContext;\nimport javax.ws.rs.client.ClientRequestFilter;\nimport javax.ws.rs.core.Context;\nimport javax.ws.rs.core.HttpHeaders;\nimport javax.ws.rs.core.SecurityContext;\nimport javax.ws.rs.ext.Provider;\nimport java.io.IOException;\n\n//1\npublic class AuthTokenPropagationFilter implements ClientRequestFilter {\n\n    private static final String BEARER = \"Bearer\";\n\n    //2\n    @Context\n    SecurityContext securityContext;\n\n    @Override\n    public void filter(ClientRequestContext requestContext) throws IOException {\n        //3\n        KeycloakPrincipal keycloakPrincipal = (KeycloakPrincipal) securityContext.getUserPrincipal();\n        //4\n        if(keycloakPrincipal != null && keycloakPrincipal.getKeycloakSecurityContext()!=null) {\n            //5\n            String token = keycloakPrincipal.getKeycloakSecurityContext().getTokenString();\n            if(token != null) {\n            //6\n                requestContext.getHeaders().add(HttpHeaders.AUTHORIZATION, BEARER + \" \" + token);\n            }\n        }\n    }\n}\n```", "```java\npackage org.packt.swarm.petstore.proxy;\n\nimport org.packt.swarm.petstore.cart.api.CartItem;\nimport org.packt.swarm.petstore.security.AuthTokenPropagationFilter;\n\nimport javax.annotation.PostConstruct;\nimport javax.enterprise.context.ApplicationScoped;\nimport javax.ws.rs.client.Client;\nimport javax.ws.rs.client.ClientBuilder;\nimport javax.ws.rs.client.Entity;\nimport javax.ws.rs.client.WebTarget;\nimport javax.ws.rs.core.MediaType;\nimport java.util.Arrays;\nimport java.util.List;\n\n@ApplicationScoped\npublic class CartProxy {\n\n    (...)\n\n    public List<org.packt.swarm.petstore.cart.api.CartItem> getCart(String customerId){\n            Client client = ClientBuilder.newClient();\n            client.register(new AuthTokenPropagationFilter());\n            WebTarget target = client.target(targetPath + \"/cart/\" + customerId);\n            return Arrays.asList(target.request(MediaType.APPLICATION_JSON).get(org.packt.swarm.petstore.cart.api.CartItem[].class));\n    }\n\n    (...)\n\n}\n```", "```java\nswarm:\n  https:\n    only: true\n    port: 8443\n  http:\n    keystore:\n      path: keystore.jks\n      password: password\n    truststore:\n      path: truststore.jks\n      password: password\n\n```"]