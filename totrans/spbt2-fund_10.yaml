- en: Solutions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section contains the worked-out answers for the activities present at the
    end of each chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 1: The Spring Project and Framework'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following are the solutions for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity: Project Lombok in Action'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Steps for Completion**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `BeanData` class in the package that contains the `Application` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a private final String field named `Bean`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a private final String field named `BeanClass`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Insert the `@Data` and `@RequiredArgs` annotations in the class.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Take a look at the following screenshot:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/d8df7b58-1871-40f2-b6c6-eae2b6c87e48.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fill the data structure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the main application file that you enhanced with the loop over the Beans
    earlier.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a list for `BeanData` instances.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fill the list with the corresponding data for each Bean.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You can fetch the Bean from the context using the Bean name with the `getBean`
    method, for example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Print the `BeanData` list content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the Bean list is filled, add another loop right after that loops over
    the `BeanData` list.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `System.out.println` to output the name and class of the Bean using the
    generated `Getters`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Chapter 2: Building a Spring Application'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following are the solutions for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity: Autowiring and Configurations'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Steps for Completion**'
  prefs: []
  type: TYPE_NORMAL
- en: Create the `ConfigurationProperty` class `GreetingProperties` to read the configuration
    value for the suffix and add a property value to the configuration file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the greeting service
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inject the class in the service
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a public method that creates the greeting with the greeter's name as
    the parameter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Application class, add a config method which executes the greeting method
    and print out the result
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Advanced:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an autowired field in the Application class
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Execute greeting method when dependencies of the Application class are set using
    a different mechanism.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Chapter 3: Testing Spring Applications'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following are the solutions for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity: Writing Integration Tests'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Steps for Completion**'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new integration test class on your own for the `BlogService` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create various tests for the `retrievePagedBlogEntries` method of the `BlogService`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a happy path test (everything works as it should with simple test data).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create tests for interesting parameter combinations (for example values like
    0, -1 etc. with the behavior you expect.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fix the service code to make it match your expectations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Advanced: Create different types of tests, have a look at them and analyze
    the dis-/advantages. (Omit the type you created in *step 2*)'
  prefs: []
  type: TYPE_NORMAL
- en: unit-tests without mockito
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unit-tests with mockito
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: integration-tests without any mocking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: integration-tests with `MockBeans`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: integration-tests with `SpyBeans`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Go to [https://bit.ly/2MqhUZ4](https://bit.ly/2MqhUZ4) to access the code for
    the `BlogService` test files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 4: The MVC Pattern'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following are the solutions for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity: Create Your First Web MVC Controller'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Steps for Completion**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to [https://start.spring.io](https://start.spring.io) and enter the following
    values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Group: `com.packt.springboot`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Artifact: `blogmania`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the Search for dependencies field enter the following dependencies pressing
    enter after each:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Web, Thymeleaf, Devtools
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the following screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/60e6745d-b269-4de4-9176-e65a5b2ff0bf.png)'
  prefs: []
  type: TYPE_IMG
- en: Press Generate Project to download a ZIP file containing the initial project
    files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now unzip the downloaded file which is called `blog.zip` into your project folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the dependency for the Bootstrap webjars archive to the file `pom.xml` in
    the `<dependencies>` section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to [https://bit.ly/2QoVEBX](https://bit.ly/2QoVEBX) to access the code for
    the `pom.xml` file.
  prefs: []
  type: TYPE_NORMAL
- en: Create a file `welcome.html` in the `src/main/resource/templates` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to [https://bit.ly/2x6w90k](https://bit.ly/2x6w90k) to access the code for
    the `welcome.html` file.
  prefs: []
  type: TYPE_NORMAL
- en: Add a controller to render the view. Create the `WelcomeController` class in
    a package called `com.packt.springboot.blogmania.controller`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to [https://bit.ly/2OhxZlo](https://bit.ly/2OhxZlo) to access the code for
    the `WelcomeController.java` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now start the application by using Maven:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Use your browser to navigate to `http://localhost:8080`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ea6fd632-3d4f-4e1f-9c0f-f672fe8b0851.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Chapter 5: Displaying Information Using Web Pages'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following are the solutions for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity: Displaying the Details of a Blog-Post'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Steps for Completion**'
  prefs: []
  type: TYPE_NORMAL
- en: Create an `@Controller` annotated class. Name the class `BlogPostController`.
    Inject the `BlogPostService` as you have learned it in the previous chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a handling method to the `BlogPostController` called `displayBlogPostBySlug()`
    that gets the slug of the post to be retrieved from the query. Set the mapping
    to "`/{slug}`" and use a path variable slug to find the blog post. Throw a `BlogPostNotFoundException`
    when a blogpost with the given slug could not be found.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Retrieve the blog post from the `BlogPostService` by using the `findBySlug()`
    method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Return a `ModelAndView` instance from the `displayBlogPostBySlug()` method.
    Set the view name to **blogpost** and add the blog post returned from the `BlogPostService`
    as an attribute named `blogPost` to the model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to [https://bit.ly/2xaKvfc](https://bit.ly/2xaKvfc) to access the code for
    the `BlogPostController.java` file.
  prefs: []
  type: TYPE_NORMAL
- en: Create a view template file `src/main/resources/templates/blogposts/details.html`.
    You can use the file `empty.html` in the sample directory for the layout code
    of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to [https://bit.ly/2Qrh4OL](https://bit.ly/2Qrh4OL) to access the code for
    the `details.html` file.
  prefs: []
  type: TYPE_NORMAL
- en: Start the application using the `mvnw spring-boot:run` command
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the URL `http://localhost:8080/blogposts/my-first-post`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Obtain the following output screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/471580fe-82f9-4ebc-a1c8-6dbe83dc319b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Chapter 6: Passing Data Between the View and the Controller'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following are the solutions for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity: Creating a Page to Enter a New Blog Post'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Steps for Completion**'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project at [https://bit.ly/2Ft1iBQ](https://bit.ly/2Ft1iBQ).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the yet empty model class Category in the `package com.packt.springboot.blogmania.category`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to [https://bit.ly/2xadDDh](https://bit.ly/2xadDDh) to access the complete
    code for the `Category.java` file.
  prefs: []
  type: TYPE_NORMAL
- en: Add an attribute of type String called `name` to the model class and use Lombok
    annotations to generate all methods of a data class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the controller class called `CategoryController` in the same package as
    the Category class. You will find an empty Spring controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to [https://bit.ly/2x6YMKG](https://bit.ly/2x6YMKG) to access the complete
    code for the `CategoryController.java` file.
  prefs: []
  type: TYPE_NORMAL
- en: Add a field called `allCategories` of type `List<Category>` that will hold all
    available categories. Don’t forget to initialize the list (with an `ArrayList<>`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a method `renderCategoryForm()` to initialize a new empty category and add
    it to the model as an attribute named `category`. This method should be mapped
    to the get request with the URI "`/categories/new`". Render a view named "`/categories/form`".
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a method `addCategory()` with a post request mapping for "`/categories`".
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This method will receive a Category as a parameter and add it to the list of
    all categories. Return "`redirect:/`" as the view name.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Implement the currently empty method retrieveAllCategories() to return the list
    of all categories. You may want to return a copy of the list to prevent clients
    from changing the original list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the file called src/main/resources/categories/form.html that will contain
    the form for the category.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to [https://bit.ly/2NHbtFw](https://bit.ly/2NHbtFw) to access the complete
    code for the `form.html` file.
  prefs: []
  type: TYPE_NORMAL
- en: Add a form to enter the category name. Use the action `@{/categories}` in the
    form. Feel free to use Bootstrap to style the input elements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the file `src/main/resources/blogposts/form.html` containing the form to
    edit a blogpost.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to [https://bit.ly/2NHbtFw](https://bit.ly/2NHbtFw) to access the complete
    code for the `form.html` file.
  prefs: []
  type: TYPE_NORMAL
- en: Add a drop-down field to the form with `th:field="*{categoryName}"` to generate
    all options use the list of all categories available in a model attribute named
    categories.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the application and open your browser at `http://localhost:8080`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fe7875f7-4ff8-45e5-8fd5-8e949d0b286b.png)'
  prefs: []
  type: TYPE_IMG
- en: Now click on Add Category.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1e6afbd6-23b9-4367-af90-1d60f4b3e458.png)'
  prefs: []
  type: TYPE_IMG
- en: Enter a category title and click Save.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add as many more categories as you like.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on the plus sign (+) in the upper right.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/299d825b-ef52-4489-bbea-42f0b383f199.png)'
  prefs: []
  type: TYPE_IMG
- en: Enter a blog post and look at the list of categories.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After clicking Save, the selected category should appear under the blog post
    title.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b9f0f141-4dfb-43eb-b8c2-8c3561b58e0e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Chapter 7: RESTful APIs'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following are the solutions for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity: Creating a List of Blog Articles as a REST Resource'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Steps for Completion**'
  prefs: []
  type: TYPE_NORMAL
- en: Take the blogmania application and find the `BlogPostController`. Here you can
    see how individual blog articles are delivered for the web frontend. Another controller,
    `HomePageController`, adds all articles to the model. These two may serve as examples
    for the next steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write another controller, a REST controller this time, that gives a list of
    all the articles under the URL /api/blogposts To do that create a new class (preferably
    in the blogpost package) called `BlogPostRestController`, and make it a Spring
    REST controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: While you could add the full path to each method, we know that `/api/blogposts`
    will be the same for all methods that can come in this controller, so add that
    path at the class level.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The class will need one or two dependencies – add them to the class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a mapping function to get all the blog articles via REST. REST conventions
    say that this list resource will live under exactly the path we gave at the class
    level.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the application and use Postman to access `localhost:8080/api/blogposts`
    – you should now see the list of blog articles returned as a JSON list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/22bb439a-f0c7-47b6-818b-d9e6113655ec.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Chapter 8: Web Application Security'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following are the solutions for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity: Exploring Security Annotations'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Steps for Completion**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to the `HomePageController` and find the `homePage()` method. Add
    an annotation to limit access to users who have the role USER as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Restart the application and open the page in the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that we are immediately redirected to the login page. Log in with any of
    the predefined users; for instance, `peter/quinn` or `cate/sakai`.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the index page changed to reflect your user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Take a look at the following screenshots showing the name and role assigned:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/9ab817dd-357a-46bf-b264-4f7754ff636a.png)![](img/63ef0115-0a14-42a4-aae1-838e5338cdfc.png)'
  prefs: []
  type: TYPE_IMG
- en: Try to log out.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Find the `ShortMessageService` and its `findAll()` method. Add an annotation
    that limits the display to the articles that a user has written themselves:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Restart the application and open the page in the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 9: Persisting Data Using a Database'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following are the solutions for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity: Creating an SMS Application to Display Multiple Authors'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Steps for Completion**'
  prefs: []
  type: TYPE_NORMAL
- en: 'To start, in the `ShortMessage` class, change the author field to: List<Author>
    authors. To make the Java even compile, there needs to be a change in `ShortMessageRepository`
    when creating a `ShortMessage`: In a first step, just wrap the author using `Collections.singletonList()`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the next step, change the Thymeleaf view `index.html` to accept multiple
    authors. Note that the attribute is now called `msg.authors`. It is a bit of work
    to create a comma-separated list, but you can copy from the way the multiple authorities
    are shown a few lines above. To be complete, this has to be done twice: Once for
    the `fullName`, once for the username.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You may want to start the app now to verify that everything is displayed as
    it was before. Small steps like these are how software evolves.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now add a new Flyway migration `V03__authors.sql –` you need a new table `message_authors`,
    copy data from `short_message` and finally drop the `author_id column`. For reference,
    look it up again in the third section of this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now the `ShortMessageRepository` is not compatible with the database anymore.
    There are many ways to fix this. One quite easy way is to add the following at
    the start of the `retrieveAll` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Using this map from article IDs to authors, change the query and the implementation
    for the second `jdbcTemplate` execution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You may want to start the app now to verify that everything is displayed as
    it was before. Note that you are now getting the same display for a different
    data model and different data in the database!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To actually see some change, you can use the H2 console in another browser tab
    to add some co-authors and immediately see the results after reloading in the
    original tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new migration `V04__coauthors.sql` with some message – author links.
    When you start the application again, these are visible as in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/468095d5-7c63-40c1-8a56-3691cd1b2c3f.png)'
  prefs: []
  type: TYPE_IMG
- en: Solutions Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hope this section helped solve any obstacles that you had been facing while
    attempting these activities. Now you should be able to solve other such problems
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: Happy solving!
  prefs: []
  type: TYPE_NORMAL
