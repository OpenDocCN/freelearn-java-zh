- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Testing Your Backend
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试您的后端
- en: This chapter explains how to test your Spring Boot backend. The backend of an
    application is responsible for handling business logic and data storage. Proper
    testing of the backend ensures that the application works as intended, is secure,
    and is easier to maintain. We will create some unit and integration tests in relation
    to our backend, using the database application that we created earlier as a starting
    point.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章解释了如何测试您的 Spring Boot 后端。应用程序的后端负责处理业务逻辑和数据存储。适当的后端测试确保应用程序按预期工作，安全，并且更容易维护。我们将创建一些与我们的后端相关的单元和集成测试，以我们之前创建的数据库应用程序作为起点。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Testing in Spring Boot
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Spring Boot 中进行测试
- en: Creating test cases
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建测试用例
- en: Test-driven development
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试驱动开发
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The Spring Boot application that we created in the previous chapters is required.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前面章节中创建的 Spring Boot 应用程序是必需的。
- en: 'The following GitHub link will also be required: [https://github.com/PacktPublishing/Full-Stack-Development-with-Spring-Boot-3-and-React-Fourth-Edition/tree/main/Chapter06](https://github.com/PacktPublishing/Full-Stack-Development-with-Spring-Boot-3-and-React-Fourth-Edition/tree/main/Chapter06).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 GitHub 链接也将是必需的：[https://github.com/PacktPublishing/Full-Stack-Development-with-Spring-Boot-3-and-React-Fourth-Edition/tree/main/Chapter06](https://github.com/PacktPublishing/Full-Stack-Development-with-Spring-Boot-3-and-React-Fourth-Edition/tree/main/Chapter06)。
- en: Testing in Spring Boot
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Spring Boot 中进行测试
- en: 'The Spring Boot test starter package is automatically added to the `build.gradle`
    file by **Spring Initializr** when we create our project. The test starter dependency
    can be seen in the following snippet:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建项目时，**Spring Initializr** 会自动将 Spring Boot 测试启动器包添加到 `build.gradle` 文件中。测试启动器依赖项可以在以下代码片段中看到：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The Spring Boot test starter provides lots of handy libraries for testing, such
    as **JUnit**, **Mockito**, and **AssertJ**. Mockito is a mocking framework that
    is often used alongside testing frameworks like JUnit. AssertJ is a popular library
    for writing assertions in Java testing. In this book, we will use **JUnit 5**.
    The **JUnit Jupiter** module is part of JUnit 5 and provides annotations for more
    flexible testing.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot 测试启动器提供了许多方便的库用于测试，例如 **JUnit**、**Mockito** 和 **AssertJ**。Mockito
    是一个常与测试框架如 JUnit 一起使用的模拟框架。AssertJ 是一个流行的库，用于在 Java 测试中编写断言。在本书中，我们将使用 **JUnit
    5**。**JUnit Jupiter** 模块是 JUnit 5 的一部分，提供了更灵活的测试的注解。
- en: 'If you take a look at your project structure, you’ll see that it already has
    its own package created for test classes:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您查看项目结构，您会看到它已经为测试类创建了自己的包：
- en: ­![](img/B19818_06_01.png)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: ­![](img/B19818_06_01.png)
- en: 'Figure 6.1: Test classes'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.1：测试类
- en: 'By default, Spring Boot uses an in-memory database for testing. We are using
    **MariaDB** at this point in the book, but we can use H2 for testing if we add
    the following dependency to the `build.gradle` file:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Spring Boot 使用内存数据库进行测试。在本章中，我们使用 **MariaDB**，但如果我们向 `build.gradle` 文件中添加以下依赖项，我们也可以使用
    H2 进行测试：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This specifies that the H2 database will only be used to run tests; otherwise,
    the application will use the MariaDB database.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这指定了 H2 数据库将仅用于运行测试；否则，应用程序将使用 MariaDB 数据库。
- en: Remember to refresh your Gradle project in Eclipse after you have updated the
    `build.gradle` file.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在您更新了 `build.gradle` 文件后，请记住在 Eclipse 中刷新您的 Gradle 项目。
- en: Now, we can start to create test cases for our application.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以开始为我们的应用程序创建测试用例。
- en: Creating test cases
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建测试用例
- en: 'There are many different types of software tests, and each has its own specific
    objectives. Some of the most important test types are:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 软件测试有很多不同类型，每种类型都有自己的特定目标。一些最重要的测试类型包括：
- en: '**Unit tests**: Unit tests focus on the smallest component of software. This
    could be, for example, a function, and a unit test will ensure that it works correctly
    *in isolation*. **Mocking** is often used in unit testing to replace the dependencies
    of the unit that is being tested.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单元测试**：单元测试关注软件的最小组件。例如，这可能是一个函数，单元测试将确保它在隔离状态下正确工作。**模拟**在单元测试中经常被用来替换正在被测试的单元的依赖项。'
- en: '**Integration tests**: Integration tests focus on the interaction between individual
    components, ensuring that individual components work together as expected.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成测试**：集成测试关注各个组件之间的交互，确保各个组件按预期协同工作。'
- en: '**Functional tests**: Functional testing focuses on business scenarios that
    are defined in functional specifications. Test cases are designed to verify that
    software meets the specified requirements.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**功能测试**：功能测试侧重于在功能规范中定义的业务场景。测试用例旨在验证软件是否符合指定的要求。'
- en: '**Regression tests**: Regression tests are designed to verify that new code
    or code updates do not break existing functionality.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**回归测试**：回归测试旨在验证新代码或代码更新不会破坏现有功能。'
- en: '**Usability tests**: Usability tests verify that software is user-friendly,
    intuitive, and easy to use from an end-user perspective. Usability tests focus
    more on the frontend and user experience.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可用性测试**：可用性测试验证软件是否易于用户使用、直观且易于从最终用户的角度使用。可用性测试更侧重于前端和用户体验。'
- en: For unit and integration testing, we are using **JUnit**, a popular Java-based
    unit testing library. Spring Boot has built-in support for JUnit, making it easy
    to write tests for your application.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 对于单元和集成测试，我们使用**JUnit**，这是一个流行的基于Java的单元测试库。Spring Boot内置了对JUnit的支持，这使得编写应用程序的测试变得容易。
- en: 'The following source code shows an example skeleton for the Spring Boot test
    class. The `@SpringBootTest` annotation specifies that the class is a regular
    test class that runs Spring Boot-based tests. The `@Test` annotation before the
    method specifies to JUnit that the method can be run as a test case:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下源代码展示了Spring Boot测试类的示例框架。`@SpringBootTest`注解指定该类是一个常规测试类，用于运行基于Spring Boot的测试。方法前的`@Test`注解指定JUnit该方法可以作为测试用例运行：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Assertions** in unit testing are statements that can be used to verify whether
    the actual output of a code unit matches the expected output. In our case, the
    assertions are implemented using the **AssertJ** library that the `spring-boot-starter-test`
    artifact automatically includes. The AssertJ library provides an `assertThat()`
    method that you can use to write assertions. You pass an object or a value to
    the method, allowing you to compare values with the actual assertions. The AssertJ
    library contains multiple assertions for different data types. The next sample
    demonstrates some example assertions:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试中的**断言**是用于验证代码单元的实际输出是否与预期输出匹配的语句。在我们的案例中，断言是通过`spring-boot-starter-test`工件自动包含的**AssertJ**库实现的。AssertJ库提供了一个`assertThat()`方法，您可以使用它来编写断言。您将对象或值传递给该方法，允许您比较值与实际断言。AssertJ库包含多种针对不同数据类型的断言。下一个示例演示了一些示例断言：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can find all the different assertions in the AssertJ documentation: [https://assertj.github.io/doc](https://assertj.github.io/doc).'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在AssertJ文档中找到所有不同的断言：[https://assertj.github.io/doc](https://assertj.github.io/doc)。
- en: 'We will now create our initial unit test case, which checks that our controller
    instance is correctly instantiated and is not `null`. Proceed as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建我们的初始单元测试用例，该测试用例检查我们的控制器实例是否正确实例化且不是`null`。按照以下步骤进行：
- en: 'Open the `CardatabaseApplicationTests` test class that has already been made
    for your application by the Spring Initializr starter project. There is one test
    method called `contextLoads` in here, and this is where we will add the test.
    Write the following test, which checks that the instance of the controller was
    created and injected successfully. We use an AssertJ assertion to test that the
    injected controller instance is not `null`:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Spring Initializr启动项目为您的应用程序创建的`CardatabaseApplicationTests`测试类。这里有一个名为`contextLoads`的测试方法，我们将在这里添加测试。编写以下测试，该测试检查控制器实例是否已成功创建和注入。我们使用AssertJ断言来测试注入的控制器实例不是`null`：
- en: '[PRE4]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We use **field injection** here, which is well-suited for test classes because
    you will never instantiate your test classes directly. You can read more about
    dependency injection of test fixtures in the Spring documentation: [https://docs.spring.io/spring-framework/reference/testing/testcontext-framework/fixture-di.html](https://docs.spring.io/spring-framework/reference/testing/testcontext-framework/fixture-di.html).'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们在这里使用**字段注入**，这对于测试类来说非常适合，因为您永远不会直接实例化测试类。您可以在Spring文档中了解更多关于测试固定依赖注入的信息：[https://docs.spring.io/spring-framework/reference/testing/testcontext-framework/fixture-di.html](https://docs.spring.io/spring-framework/reference/testing/testcontext-framework/fixture-di.html)。
- en: 'To run tests in Eclipse, activate the test class in the **Project Explorer**
    and right-click. Select **Run As | JUnit test** from the menu. You should now
    see the **JUnit** tab in the lower part of the Eclipse workbench. The test results
    are shown in this tab, and the test case has been passed, as illustrated in the
    following screenshot:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在Eclipse中运行测试，请在**项目资源管理器**中激活测试类，然后右键单击。从菜单中选择**运行方式 | JUnit测试**。现在，您应该在Eclipse工作台的下部看到**JUnit**标签页。测试结果将显示在此标签页中，测试用例已通过，如下面的截图所示：
- en: '![](img/B19818_06_02.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19818_06_02.png)'
- en: 'Figure 6.2: JUnit test run'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.2：JUnit测试运行
- en: 'You can use the `@DisplayName` annotation to give a more descriptive name to
    your test case. The name defined in the `@DisplayName` annotation is shown in
    the JUnit test runner. The code is illustrated in the following snippet:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以使用`@DisplayName`注解为您的测试用例提供一个更具描述性的名称。在`@DisplayName`注解中定义的名称将在JUnit测试运行器中显示。以下代码片段展示了如何实现：
- en: '[PRE5]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, we will create integration tests for our owner repository to test **create**,
    **read**, **update**, and **delete** (**CRUD**) operations. This test verifies
    that our repository interacts correctly with a database. The idea is to simulate
    database interactions and verify that your repository methods behave as expected:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将为我们的所有者存储库创建集成测试，以测试**创建**、**读取**、**更新**和**删除**（**CRUD**）操作。此测试验证我们的存储库是否正确与数据库交互。想法是模拟数据库交互并验证您的存储库方法是否按预期行为：
- en: 'Create a new class called `OwnerRepositoryTest` in the root test package. Instead
    of the `@SpringBootTest` annotation, the `@DataJpaTest` annotation can be used
    if the test is focused on **Jakarta Persistence API** (**JPA**) components. When
    using this annotation, the H2 database and Spring Data are automatically configured
    for testing. SQL logging is also turned on. The code is illustrated in the following
    snippet:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在根测试包中创建一个名为`OwnerRepositoryTest`的新类。如果测试专注于**Jakarta Persistence API**（**JPA**）组件，则可以使用`@DataJpaTest`注解代替`@SpringBootTest`注解。使用此注解时，H2数据库和Spring
    Data将自动配置用于测试。SQL日志记录也被打开。以下代码片段展示了如何实现：
- en: '[PRE6]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In this example, we use the root package for all test classes and name our classes
    logically. Alternatively, you can create a similar package structure for your
    test classes as we did for our application classes.
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此示例中，我们使用根包为所有测试类命名，并逻辑地命名我们的类。或者，您可以为您的测试类创建与我们的应用程序类类似的包结构。
- en: 'We will add our first test case to test the addition of a new owner to the
    database. Add the following query to your `OwnerRepository.java` file. We will
    use this query in our test case:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将添加第一个测试用例以测试将新所有者添加到数据库中。将以下查询添加到您的`OwnerRepository.java`文件中。我们将在测试用例中使用此查询：
- en: '[PRE7]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'A new `Owner` object is created and saved to the database using the `save`
    method. Then, we check that the owner can be found. Add the following test case
    method code to your `OwnerRepositoryTest` class:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`save`方法创建一个新的`Owner`对象并将其保存到数据库中。然后，我们检查是否可以找到所有者。将以下测试用例方法代码添加到您的`OwnerRepositoryTest`类中：
- en: '[PRE8]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The second test case will test the deletion of the owner from the database.
    A new `Owner` object is created and saved to the database. Then, all owners are
    deleted from the database, and finally, the `count()` method should return zero.
    The following source code shows the test case method. Add the following method
    code to your `OwnerRepositoryTest` class:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二个测试用例将测试从数据库中删除所有者。创建一个新的`Owner`对象并将其保存到数据库中。然后，从数据库中删除所有所有者，最后`count()`方法应返回零。以下源代码显示了测试用例方法。将以下方法代码添加到您的`OwnerRepositoryTest`类中：
- en: '[PRE9]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Run the test cases and check the Eclipse **JUnit** tab to find out whether
    the tests passed. The following screenshot shows that they have indeed passed:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行测试用例并检查Eclipse的**JUnit**标签页，以确定测试是否通过。以下截图显示测试确实通过了：
- en: '![](img/B19818_06_03.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19818_06_03.png)'
- en: 'Figure 6.3: Repository test cases'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.3：存储库测试用例
- en: 'Next, we will demonstrate how to test your RESTful web service JWT authentication
    functionality. We will create an integration test that sends an actual HTTP request
    to the login endpoint and verifies the response:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将演示如何测试您的RESTful Web服务JWT身份验证功能。我们将创建一个集成测试，该测试向登录端点发送实际的HTTP请求并验证响应：
- en: 'Create a new class called `CarRestTest` in the root test package. To test the
    controllers or any endpoint that is exposed, we can use a `MockMvc` object. By
    using the `MockMvc` object, the server is not started, but the tests are performed
    in the layer where Spring handles HTTP requests, and therefore it mocks the real
    situation. `MockMvc` provides the `perform` method to send these requests. To
    test authentication, we have to add credentials to the request body. We print
    request and response details to the console using the `andDo()` method. Finally,
    we check that the response status is `Ok` using the `andExpect()` method. The
    code is illustrated in the following snippet:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在根测试包中创建一个名为`CarRestTest`的新类。为了测试控制器或任何公开的端点，我们可以使用一个`MockMvc`对象。通过使用`MockMvc`对象，服务器不会启动，但测试是在Spring处理HTTP请求的层中进行的，因此它模拟了真实情况。`MockMvc`提供了`perform`方法来发送这些请求。为了测试身份验证，我们必须在请求体中添加凭据。我们使用`andDo()`方法将请求和响应的详细信息打印到控制台。最后，我们使用`andExpect()`方法检查响应状态是否为`Ok`。代码在下面的代码片段中展示：
- en: '[PRE10]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, when we run the authentication tests, we will see that the test passes,
    as the following screenshot confirms:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，当我们运行身份验证测试时，我们会看到测试通过，如下面的截图所确认的：
- en: '![](img/B19818_06_04.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19818_06_04.png)'
- en: 'Figure 6.4: Login test'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.4：登录测试
- en: 'You can run all tests at once by selecting the test package from the Project
    Explorer and running the JUnit tests (**Run As** | **JUnit test**). In the image
    below, you can see the result when all test cases have been passed:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过从项目资源管理器中选择测试包并运行JUnit测试（**运行方式** | **JUnit测试**）来一次性运行所有测试。在下面的图片中，您可以查看所有测试用例都通过的结果：
- en: '![](img/B19818_06_05.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19818_06_05.png)'
- en: 'Figure 6.5: Running tests'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.5：运行测试
- en: Testing with Gradle
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Gradle进行测试
- en: 'All tests run automatically when you build your project using Gradle. We will
    go into more detail about building and deployment later in this book. In this
    section, we will only cover some basics:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用Gradle构建项目时，所有测试都会自动运行。我们将在本书的后面更详细地介绍构建和部署。在本节中，我们只介绍一些基础知识：
- en: 'You can run different predefined Gradle tasks using Eclipse. Open the **Window
    | Show View | Other…** Menu. That opens the **Show View** window, where you should
    select **Gradle Tasks**:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以使用Eclipse运行不同的预定义Gradle任务。打开**窗口 | 显示视图 | 其他…**菜单。这会打开**显示视图**窗口，在那里您应该选择**Gradle任务**：
- en: '![](img/B19818_06_06.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19818_06_06.png)'
- en: 'Figure 6.6: Gradle tasks'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.6：Gradle任务
- en: You should see the list of Gradle tasks, as shown in the following image. Open
    the `build` folder and double-click the **build** task to run it:![](img/B19818_06_07.png)
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到Gradle任务列表，如下面的图片所示。打开`build`文件夹，双击**build**任务来运行它：![](img/B19818_06_07.png)
- en: 'Figure 6.7: Build task'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.7：构建任务
- en: 'The Gradle build task creates a `build` folder in your project, where your
    Spring Boot project is built. The build process runs all the tests from your project.
    If any of the tests fail, the build process also fails. The build process creates
    a test summary report (an `index.html` file), which you can find in the `build\reports\tests\test`
    folder. If any of your tests fail, you can find the reason from the summary report.
    In the image below, you can see an example of a test summary report:'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Gradle构建任务在您的项目中创建一个`build`文件夹，Spring Boot项目在这里构建。构建过程会运行项目中的所有测试。如果任何测试失败，构建过程也会失败。构建过程会创建一个测试摘要报告（一个`index.html`文件），您可以在`build\reports\tests\test`文件夹中找到它。如果您的任何测试失败，您可以从摘要报告中找到原因。在下面的图片中，您可以看到一个测试摘要报告的示例：
- en: '![](img/B19818_06_08.png)'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/B19818_06_08.png)'
- en: 'Figure 6.8: Test summary'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.8：测试摘要
- en: 'The build task creates an executable `jar` file in the `\build\libs` folder.
    You can now run your built Spring Boot application using the following command
    in the `\build\libs` folder (you should have the JDK installed):'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建任务在`\build\libs`文件夹中创建一个可执行的`jar`文件。现在，您可以在`\build\libs`文件夹中使用以下命令运行构建的Spring
    Boot应用程序（您应该已经安装了JDK）：
- en: '[PRE11]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now, you can write unit and integration tests for your Spring Boot application.
    You have also learned how to run tests using the Eclipse IDE.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以为您Spring Boot应用程序编写单元和集成测试。您也已经学会了如何使用Eclipse IDE运行测试。
- en: Test-driven development
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试驱动开发
- en: '**Test-driven development** (**TDD**) is a practice in software development
    where you write tests before writing the actual code. The idea is to ensure that
    your code meets the criteria or requirements that are set. Let’s see one example
    of how TDD works in practice.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试驱动开发**（**TDD**）是一种软件开发实践，其中在编写实际代码之前先编写测试。其理念是确保您的代码满足设定的标准或要求。让我们看看TDD在实际中是如何工作的一个例子。'
- en: 'Our goal is to implement a service class that manages messages in our application.
    You can see the common steps of TDD below:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是实现一个服务类，用于管理我们应用程序中的消息。你可以在下面看到测试驱动开发（TDD）的常见步骤：
- en: The following code is not fully functioning. It is just an example for you to
    get a better idea of the TDD process.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码并不完全功能。它只是为你更好地了解测试驱动开发（TDD）过程的一个示例。
- en: 'The first functionality to be implemented is a service that can be used to
    add new messages. Therefore, in TDD, we will create a test for adding new messages
    to a list of messages. In the test code, we first create an instance of the message
    service class. Then, we create a test message that we want to add to the list.
    We call the `addMsg` method of the `messageService` instance, passing the `msg`
    as an argument. This method is responsible for adding messages to a list. Finally,
    the assertion checks if the message added to the list matches the expected message,
    `"Hello world"`:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先要实现的功能是添加新消息的服务。因此，在测试驱动开发（TDD）中，我们将为向消息列表添加新消息创建一个测试用例。在测试代码中，我们首先创建消息服务类的实例。然后，我们创建一个我们想要添加到列表中的测试消息。我们调用`messageService`实例的`addMsg`方法，并将`msg`作为参数传递。此方法负责将消息添加到列表中。最后，断言检查添加到列表中的消息是否与预期的消息`"Hello
    world"`匹配：
- en: '[PRE12]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now, we can run the test. It should fail because we haven’t implemented our
    service yet.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以运行测试。它应该失败，因为我们还没有实现我们的服务。
- en: 'Next, we will implement the `MessageService`, which should contain the `addMsg()`
    function that we are testing in our test case:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将实现`MessageService`，它应该包含我们在测试用例中测试的`addMsg()`函数：
- en: '[PRE13]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now, if you run the test again, it should pass if your code works as expected.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果你再次运行测试，如果代码按预期工作，它应该通过。
- en: If the test does not pass, you should refactor your code until it does.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果测试未通过，你应该重构你的代码，直到它通过。
- en: Repeat these steps for each new feature.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为每个新功能重复这些步骤。
- en: TDD is an iterative process that helps to ensure that your code works and that
    new features don’t break other parts of the software. This is also called **regression
    testing**. By writing a test before implementing the functionality, we can catch
    bugs early in the development phase. Developers should understand feature requirements
    and expected outcomes before actual development.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 测试驱动开发是一个迭代过程，有助于确保你的代码能够正常工作，并且新功能不会破坏软件的其他部分。这也被称为**回归测试**。通过在实现功能之前编写测试，我们可以在开发阶段早期捕捉到错误。开发者应该在实际开发之前理解功能需求和预期结果。
- en: At this point, we have covered the basics of testing in Spring Boot applications,
    and you have gained the knowledge you need to implement more test cases for your
    applications.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经涵盖了 Spring Boot 应用程序测试的基础知识，并且你已经获得了实施更多测试用例所需的知识。
- en: Summary
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we focused on testing the Spring Boot backend. We used JUnit
    for testing and implemented test cases for JPA and RESTful web service authentication.
    We created one test case for our owner repository to verify that repository methods
    behave as expected. We also tested the authentication process by using our RESTful
    API. Remember that testing is an ongoing process throughout the development life
    cycle. You should update and add tests to cover new features and changes when
    your application evolves. Test-driven development is one way of doing this.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们专注于测试 Spring Boot 后端。我们使用了 JUnit 进行测试，并实现了针对 JPA 和 RESTful Web 服务认证的测试用例。我们为我们的所有者存储库创建了一个测试用例，以验证存储库方法是否按预期行为。我们还通过使用我们的
    RESTful API 测试了认证过程。请记住，测试是整个开发生命周期中的一个持续过程。当你的应用程序发展时，你应该更新和添加测试用例以覆盖新功能和变更。测试驱动开发是实现这一目标的一种方法。
- en: In the next chapter, we will set up the environment and tools related to frontend
    development.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将设置与前端开发相关的环境和工具。
- en: Questions
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: How can you create unit tests with Spring Boot?
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何使用 Spring Boot 创建单元测试？
- en: What is the difference between unit and integration tests?
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单元测试和集成测试之间的区别是什么？
- en: How can you run and check the results of unit tests?
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何运行和检查单元测试的结果？
- en: What is TDD?
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是测试驱动开发（TDD）？
- en: Further reading
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'There are many other good resources available to learn about Spring Security
    and testing. A few are listed here:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多其他优秀的资源可以帮助你学习关于 Spring Security 和测试的知识。这里列出了一些：
- en: '*JUnit and Mockito Unit Testing for Java Developers*, by Matthew Speake ([https://www.packtpub.com/product/junit-and-mockito-unit-testing-for-java-developers-video/9781801078337](https://www.packtpub.com/product/junit-and-mockito-unit-testing-for-java-developers-video/9781801078337))'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《Java 开发者的 JUnit 和 Mockito 单元测试》*，作者 Matthew Speake ([https://www.packtpub.com/product/junit-and-mockito-unit-testing-for-java-developers-video/9781801078337](https://www.packtpub.com/product/junit-and-mockito-unit-testing-for-java-developers-video/9781801078337))'
- en: '*Mastering Software Testing with JUnit 5*, by Boni García ([https://www.packtpub.com/product/mastering-software-testing-with-junit-5/9781787285736](https://www.packtpub.com/product/mastering-software-testing-with-junit-5/9781787285736))'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《使用 JUnit 5 掌握软件测试》*，作者 Boni García ([https://www.packtpub.com/product/mastering-software-testing-with-junit-5/9781787285736](https://www.packtpub.com/product/mastering-software-testing-with-junit-5/9781787285736))'
- en: '*Java Programming MOOC: Introduction to testing*, by the University of Helsinki
    ([https://java-programming.mooc.fi/part-6/3-introduction-to-testing](https://java-programming.mooc.fi/part-6/3-introduction-to-testing))'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《赫尔辛基大学的 Java 编程 MOOC：测试简介》*，作者 赫尔辛基大学 ([https://java-programming.mooc.fi/part-6/3-introduction-to-testing](https://java-programming.mooc.fi/part-6/3-introduction-to-testing))'
- en: '*Master Java Unit Testing with Spring Boot and Mockito*, by In28Minutes Official
    ([https://www.packtpub.com/product/master-java-unit-testing-with-spring-boot-and-mockito-video/9781789346077](https://www.packtpub.com/product/master-java-unit-testing-with-spring-boot-and-mockito-video/9781789346077))'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《使用 Spring Boot 和 Mockito 掌握 Java 单元测试》*，作者 In28Minutes Official ([https://www.packtpub.com/product/master-java-unit-testing-with-spring-boot-and-mockito-video/9781789346077](https://www.packtpub.com/product/master-java-unit-testing-with-spring-boot-and-mockito-video/9781789346077))'
- en: Learn more on Discord
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Discord 上了解更多
- en: 'To join the Discord community for this book – where you can share feedback,
    ask the author questions, and learn about new releases – follow the QR code below:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 要加入这本书的 Discord 社区——在那里您可以分享反馈、向作者提问，并了解新书发布——请扫描下面的二维码：
- en: '[https://packt.link/FullStackSpringBootReact4e](https://packt.link/FullStackSpringBootReact4e)'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/FullStackSpringBootReact4e](https://packt.link/FullStackSpringBootReact4e)'
- en: '![](img/QR_Code10796108009382640.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code10796108009382640.png)'
