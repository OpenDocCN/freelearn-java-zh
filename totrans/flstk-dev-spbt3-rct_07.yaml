- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Testing Your Backend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter explains how to test your Spring Boot backend. The backend of an
    application is responsible for handling business logic and data storage. Proper
    testing of the backend ensures that the application works as intended, is secure,
    and is easier to maintain. We will create some unit and integration tests in relation
    to our backend, using the database application that we created earlier as a starting
    point.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Testing in Spring Boot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating test cases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test-driven development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Spring Boot application that we created in the previous chapters is required.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following GitHub link will also be required: [https://github.com/PacktPublishing/Full-Stack-Development-with-Spring-Boot-3-and-React-Fourth-Edition/tree/main/Chapter06](https://github.com/PacktPublishing/Full-Stack-Development-with-Spring-Boot-3-and-React-Fourth-Edition/tree/main/Chapter06).'
  prefs: []
  type: TYPE_NORMAL
- en: Testing in Spring Boot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Spring Boot test starter package is automatically added to the `build.gradle`
    file by **Spring Initializr** when we create our project. The test starter dependency
    can be seen in the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The Spring Boot test starter provides lots of handy libraries for testing, such
    as **JUnit**, **Mockito**, and **AssertJ**. Mockito is a mocking framework that
    is often used alongside testing frameworks like JUnit. AssertJ is a popular library
    for writing assertions in Java testing. In this book, we will use **JUnit 5**.
    The **JUnit Jupiter** module is part of JUnit 5 and provides annotations for more
    flexible testing.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you take a look at your project structure, you’ll see that it already has
    its own package created for test classes:'
  prefs: []
  type: TYPE_NORMAL
- en: ­![](img/B19818_06_01.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.1: Test classes'
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, Spring Boot uses an in-memory database for testing. We are using
    **MariaDB** at this point in the book, but we can use H2 for testing if we add
    the following dependency to the `build.gradle` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This specifies that the H2 database will only be used to run tests; otherwise,
    the application will use the MariaDB database.
  prefs: []
  type: TYPE_NORMAL
- en: Remember to refresh your Gradle project in Eclipse after you have updated the
    `build.gradle` file.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we can start to create test cases for our application.
  prefs: []
  type: TYPE_NORMAL
- en: Creating test cases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are many different types of software tests, and each has its own specific
    objectives. Some of the most important test types are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Unit tests**: Unit tests focus on the smallest component of software. This
    could be, for example, a function, and a unit test will ensure that it works correctly
    *in isolation*. **Mocking** is often used in unit testing to replace the dependencies
    of the unit that is being tested.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Integration tests**: Integration tests focus on the interaction between individual
    components, ensuring that individual components work together as expected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Functional tests**: Functional testing focuses on business scenarios that
    are defined in functional specifications. Test cases are designed to verify that
    software meets the specified requirements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Regression tests**: Regression tests are designed to verify that new code
    or code updates do not break existing functionality.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Usability tests**: Usability tests verify that software is user-friendly,
    intuitive, and easy to use from an end-user perspective. Usability tests focus
    more on the frontend and user experience.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For unit and integration testing, we are using **JUnit**, a popular Java-based
    unit testing library. Spring Boot has built-in support for JUnit, making it easy
    to write tests for your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following source code shows an example skeleton for the Spring Boot test
    class. The `@SpringBootTest` annotation specifies that the class is a regular
    test class that runs Spring Boot-based tests. The `@Test` annotation before the
    method specifies to JUnit that the method can be run as a test case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Assertions** in unit testing are statements that can be used to verify whether
    the actual output of a code unit matches the expected output. In our case, the
    assertions are implemented using the **AssertJ** library that the `spring-boot-starter-test`
    artifact automatically includes. The AssertJ library provides an `assertThat()`
    method that you can use to write assertions. You pass an object or a value to
    the method, allowing you to compare values with the actual assertions. The AssertJ
    library contains multiple assertions for different data types. The next sample
    demonstrates some example assertions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You can find all the different assertions in the AssertJ documentation: [https://assertj.github.io/doc](https://assertj.github.io/doc).'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now create our initial unit test case, which checks that our controller
    instance is correctly instantiated and is not `null`. Proceed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `CardatabaseApplicationTests` test class that has already been made
    for your application by the Spring Initializr starter project. There is one test
    method called `contextLoads` in here, and this is where we will add the test.
    Write the following test, which checks that the instance of the controller was
    created and injected successfully. We use an AssertJ assertion to test that the
    injected controller instance is not `null`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We use **field injection** here, which is well-suited for test classes because
    you will never instantiate your test classes directly. You can read more about
    dependency injection of test fixtures in the Spring documentation: [https://docs.spring.io/spring-framework/reference/testing/testcontext-framework/fixture-di.html](https://docs.spring.io/spring-framework/reference/testing/testcontext-framework/fixture-di.html).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To run tests in Eclipse, activate the test class in the **Project Explorer**
    and right-click. Select **Run As | JUnit test** from the menu. You should now
    see the **JUnit** tab in the lower part of the Eclipse workbench. The test results
    are shown in this tab, and the test case has been passed, as illustrated in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19818_06_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.2: JUnit test run'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use the `@DisplayName` annotation to give a more descriptive name to
    your test case. The name defined in the `@DisplayName` annotation is shown in
    the JUnit test runner. The code is illustrated in the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we will create integration tests for our owner repository to test **create**,
    **read**, **update**, and **delete** (**CRUD**) operations. This test verifies
    that our repository interacts correctly with a database. The idea is to simulate
    database interactions and verify that your repository methods behave as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new class called `OwnerRepositoryTest` in the root test package. Instead
    of the `@SpringBootTest` annotation, the `@DataJpaTest` annotation can be used
    if the test is focused on **Jakarta Persistence API** (**JPA**) components. When
    using this annotation, the H2 database and Spring Data are automatically configured
    for testing. SQL logging is also turned on. The code is illustrated in the following
    snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this example, we use the root package for all test classes and name our classes
    logically. Alternatively, you can create a similar package structure for your
    test classes as we did for our application classes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We will add our first test case to test the addition of a new owner to the
    database. Add the following query to your `OwnerRepository.java` file. We will
    use this query in our test case:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A new `Owner` object is created and saved to the database using the `save`
    method. Then, we check that the owner can be found. Add the following test case
    method code to your `OwnerRepositoryTest` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The second test case will test the deletion of the owner from the database.
    A new `Owner` object is created and saved to the database. Then, all owners are
    deleted from the database, and finally, the `count()` method should return zero.
    The following source code shows the test case method. Add the following method
    code to your `OwnerRepositoryTest` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the test cases and check the Eclipse **JUnit** tab to find out whether
    the tests passed. The following screenshot shows that they have indeed passed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19818_06_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.3: Repository test cases'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will demonstrate how to test your RESTful web service JWT authentication
    functionality. We will create an integration test that sends an actual HTTP request
    to the login endpoint and verifies the response:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new class called `CarRestTest` in the root test package. To test the
    controllers or any endpoint that is exposed, we can use a `MockMvc` object. By
    using the `MockMvc` object, the server is not started, but the tests are performed
    in the layer where Spring handles HTTP requests, and therefore it mocks the real
    situation. `MockMvc` provides the `perform` method to send these requests. To
    test authentication, we have to add credentials to the request body. We print
    request and response details to the console using the `andDo()` method. Finally,
    we check that the response status is `Ok` using the `andExpect()` method. The
    code is illustrated in the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, when we run the authentication tests, we will see that the test passes,
    as the following screenshot confirms:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19818_06_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.4: Login test'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can run all tests at once by selecting the test package from the Project
    Explorer and running the JUnit tests (**Run As** | **JUnit test**). In the image
    below, you can see the result when all test cases have been passed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19818_06_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.5: Running tests'
  prefs: []
  type: TYPE_NORMAL
- en: Testing with Gradle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'All tests run automatically when you build your project using Gradle. We will
    go into more detail about building and deployment later in this book. In this
    section, we will only cover some basics:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can run different predefined Gradle tasks using Eclipse. Open the **Window
    | Show View | Other…** Menu. That opens the **Show View** window, where you should
    select **Gradle Tasks**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19818_06_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.6: Gradle tasks'
  prefs: []
  type: TYPE_NORMAL
- en: You should see the list of Gradle tasks, as shown in the following image. Open
    the `build` folder and double-click the **build** task to run it:![](img/B19818_06_07.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 6.7: Build task'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The Gradle build task creates a `build` folder in your project, where your
    Spring Boot project is built. The build process runs all the tests from your project.
    If any of the tests fail, the build process also fails. The build process creates
    a test summary report (an `index.html` file), which you can find in the `build\reports\tests\test`
    folder. If any of your tests fail, you can find the reason from the summary report.
    In the image below, you can see an example of a test summary report:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B19818_06_08.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 6.8: Test summary'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The build task creates an executable `jar` file in the `\build\libs` folder.
    You can now run your built Spring Boot application using the following command
    in the `\build\libs` folder (you should have the JDK installed):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, you can write unit and integration tests for your Spring Boot application.
    You have also learned how to run tests using the Eclipse IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Test-driven development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Test-driven development** (**TDD**) is a practice in software development
    where you write tests before writing the actual code. The idea is to ensure that
    your code meets the criteria or requirements that are set. Let’s see one example
    of how TDD works in practice.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Our goal is to implement a service class that manages messages in our application.
    You can see the common steps of TDD below:'
  prefs: []
  type: TYPE_NORMAL
- en: The following code is not fully functioning. It is just an example for you to
    get a better idea of the TDD process.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first functionality to be implemented is a service that can be used to
    add new messages. Therefore, in TDD, we will create a test for adding new messages
    to a list of messages. In the test code, we first create an instance of the message
    service class. Then, we create a test message that we want to add to the list.
    We call the `addMsg` method of the `messageService` instance, passing the `msg`
    as an argument. This method is responsible for adding messages to a list. Finally,
    the assertion checks if the message added to the list matches the expected message,
    `"Hello world"`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, we can run the test. It should fail because we haven’t implemented our
    service yet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we will implement the `MessageService`, which should contain the `addMsg()`
    function that we are testing in our test case:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, if you run the test again, it should pass if your code works as expected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the test does not pass, you should refactor your code until it does.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat these steps for each new feature.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: TDD is an iterative process that helps to ensure that your code works and that
    new features don’t break other parts of the software. This is also called **regression
    testing**. By writing a test before implementing the functionality, we can catch
    bugs early in the development phase. Developers should understand feature requirements
    and expected outcomes before actual development.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we have covered the basics of testing in Spring Boot applications,
    and you have gained the knowledge you need to implement more test cases for your
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we focused on testing the Spring Boot backend. We used JUnit
    for testing and implemented test cases for JPA and RESTful web service authentication.
    We created one test case for our owner repository to verify that repository methods
    behave as expected. We also tested the authentication process by using our RESTful
    API. Remember that testing is an ongoing process throughout the development life
    cycle. You should update and add tests to cover new features and changes when
    your application evolves. Test-driven development is one way of doing this.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will set up the environment and tools related to frontend
    development.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How can you create unit tests with Spring Boot?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between unit and integration tests?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you run and check the results of unit tests?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is TDD?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are many other good resources available to learn about Spring Security
    and testing. A few are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '*JUnit and Mockito Unit Testing for Java Developers*, by Matthew Speake ([https://www.packtpub.com/product/junit-and-mockito-unit-testing-for-java-developers-video/9781801078337](https://www.packtpub.com/product/junit-and-mockito-unit-testing-for-java-developers-video/9781801078337))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Mastering Software Testing with JUnit 5*, by Boni García ([https://www.packtpub.com/product/mastering-software-testing-with-junit-5/9781787285736](https://www.packtpub.com/product/mastering-software-testing-with-junit-5/9781787285736))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Java Programming MOOC: Introduction to testing*, by the University of Helsinki
    ([https://java-programming.mooc.fi/part-6/3-introduction-to-testing](https://java-programming.mooc.fi/part-6/3-introduction-to-testing))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Master Java Unit Testing with Spring Boot and Mockito*, by In28Minutes Official
    ([https://www.packtpub.com/product/master-java-unit-testing-with-spring-boot-and-mockito-video/9781789346077](https://www.packtpub.com/product/master-java-unit-testing-with-spring-boot-and-mockito-video/9781789346077))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn more on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To join the Discord community for this book – where you can share feedback,
    ask the author questions, and learn about new releases – follow the QR code below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/FullStackSpringBootReact4e](https://packt.link/FullStackSpringBootReact4e)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code10796108009382640.png)'
  prefs: []
  type: TYPE_IMG
