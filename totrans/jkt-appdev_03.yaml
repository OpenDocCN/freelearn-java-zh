- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jakarta RESTful Web Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Representational State Transfer** (**REST**) is an architectural style in
    which web services are viewed as resources and can be identified by **Uniform
    Resource** **Identifiers** (**URIs**).'
  prefs: []
  type: TYPE_NORMAL
- en: Web services developed using the REST styles are known as RESTful web services.
    We can develop RESTful web services in Jakarta EE via the **Jakarta RESTful Web
    Services API**, commonly known as **Jakarta REST**. In this chapter, we will cover
    how to develop RESTful web services using Jakarta REST.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to RESTful web services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing a simple RESTful web service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing a RESTful web service client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Seamlessly converting between Java and JSON
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query and path parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server-sent events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Code samples for this chapter can be found at [https://github.com/PacktPublishing/Jakarta-EE-Application-Development/tree/main/ch03_src](https://github.com/PacktPublishing/Jakarta-EE-Application-Development/tree/main/ch03_src).
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to RESTful web services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: RESTful web services are very flexible. RESTful web services can consume several
    types of different MIME types, although they are typically written to consume
    and/or produce data in **JavaScript Object Notation** (**JSON**) format.
  prefs: []
  type: TYPE_NORMAL
- en: MIME types
  prefs: []
  type: TYPE_NORMAL
- en: MIME stands for Multipurpose Internet Mail Extensions; it is used to indicate
    the data type that is consumed or produced by RESTful web services.
  prefs: []
  type: TYPE_NORMAL
- en: 'Web services must support one or more of the following six HTTP methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '**GET** – By convention, a GET request is used to retrieve an existing resource'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**POST** – By convention, a POST request is used to update an existing resource'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PUT** – By convention, a PUT request is used to create or replace a new resource'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DELETE** – By convention, a DELETE request is used to delete an existing
    resource'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HEAD** – By convention, a HEAD request returns an HTTP header with no body'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PATCH** – By convention, a PATCH request is used for partial resource modification'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We develop a RESTful web service with Jakarta REST by creating a class with
    annotated methods that are invoked when our web service receives one of the preceding
    HTTP request methods. Once we have developed and deployed our RESTful web service,
    we need to develop a client that will send requests to our service. Frontend web
    technologies are frequently used to develop RESTful web service clients. However,
    Jakarta REST includes a standard client-side API that we can use to develop RESTful
    web service clients in Java.
  prefs: []
  type: TYPE_NORMAL
- en: Developing a simple RESTful web service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will develop a simple web service to illustrate how we can
    make methods in our service respond to the different HTTP request methods.
  prefs: []
  type: TYPE_NORMAL
- en: Developing a RESTful web service using Jakarta REST is simple and straightforward.
    Each of our RESTful web services needs to be invoked via its `@Path` annotation,
    which we need to use to decorate our RESTful web service resource class.
  prefs: []
  type: TYPE_NORMAL
- en: When developing RESTful web services, we need to develop methods that will be
    invoked when our web service receives an HTTP request. We need to implement methods
    to handle one or more of the six types of requests that RESTful web services handle
    – GET, POST, PUT, DELETE, HEAD and/or PATCH.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: We will only cover the most frequently used HTTP request types as implementing
    all HTTP request types is very similar.
  prefs: []
  type: TYPE_NORMAL
- en: Jakarta REST provides annotations that we can use to decorate methods in our
    web service. For example, `@GET`, `@POST`, `@PUT`, and `@DELETE` are used to implement
    the corresponding HTTP methods. Decorating a method in our web service with one
    of these annotations will make it respond to the corresponding HTTP method request.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, each method in our service must produce and/or consume a specific
    MIME type. The MIME type to be produced needs to be specified with the `@Produces`
    annotation. Similarly, the MIME type to be consumed must be specified with the
    `@``Consumes` annotation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example illustrates the concepts we have just explained:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Please note that this example does not *really* do anything. The purpose of
    the example is to illustrate how to make different methods in our RESTful web
    service resource class respond to the different HTTP methods.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that this class is annotated with the `@Path` annotation. This annotation
    designates the URI for our RESTful web service. The complete URI for our service
    will include the protocol, server name, port, context root, the REST resources
    path (see the next sub-section), and the value passed to this annotation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming our web service was deployed to a server called `example.com`, using
    the HTTP protocol on port `8080`, and has a context root of `jakartarestintro`
    and a REST resources path of `resources`, then the complete URI for our service
    would be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Since web browsers generate a GET request when pointed to a URL, we can test
    the GET method of our service simply by pointing the browser to our service’s
    URI.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that each of the methods in our class is annotated with one of the `@GET`,
    `@POST`, or `@PUT` annotations. These annotations make our methods respond to
    the corresponding HTTP method.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: HTTP DELETE requests typically require a parameter. We will cover them in the
    *Path and query parameters* section later in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, if our method returns data to the client, we declare the MIME
    type of the data to be returned in the `@Produces` annotation. In our example,
    only the `getCustomer()` method returns data to the client. We wish to return
    data in JSON format; therefore, we set the value of the `@Produces` annotation
    to the Jakarta REST-provided `MediaType.APPLICATION_JSON` constant, which has
    a value of `"application/json"`. Similarly, if our method needs to consume data
    from the client, we need to specify the MIME type of the data to be consumed;
    this is done via the `@Consumes` annotation. All methods except `getCustomer()`
    in our service consume data. In all cases, we expect the data to be in JSON format;
    therefore, we again specify `MediaType.APPLICATION_JSON` as the MIME type to be
    consumed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before moving on, it is worth mentioning that the `@Path` annotation can be
    used both at the class level and at the method level. Using the `@Path` annotation
    at the method level allows us to write multiple methods that handle the same HTTP
    request type in a single RESTful web service. For example, if we needed a second
    method in our example RESTful web service, we would simply add the `@Path` annotation
    to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The URI of this particular endpoint would be the value we used in our method-level
    `@Path` annotation, appended to the URI of our RESTful web service.
  prefs: []
  type: TYPE_NORMAL
- en: In our example, the URI of our RESTful web service would be something like [http://localhost:8080/jakartarestintro/resources/customer/](http://localhost:8080/jakartarestintro/resources/customer/),
    assuming we deployed to our local workstation and the server is listening on port
    `8080`.
  prefs: []
  type: TYPE_NORMAL
- en: The URI for the endpoint with the method-level annotation would then be `curl`
    http://localhost:8080/jakartarestintro/resources/customer/customername. Notice
    that the value of the method-level `@Path` annotation was appended to the “root”
    URI of our RESTful web service.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the REST resources path for our application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As briefly mentioned in the previous section, before successfully deploying
    a RESTful web service developed using Jakarta REST, we need to configure the REST
    resources path for our application. We can do this by developing a class that
    extends `jakarta.ws.rs.core.Application` and decorating it with the `@``ApplicationPath`
    annotation.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring via the @ApplicationPath annotation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To configure our REST resources path, all we need to do is write a class that
    extends `jakarta.ws.rs.core.Application`, and decorate it with the `@ApplicationPath`
    annotation; the value passed to this annotation is the REST resources path for
    our services.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code sample illustrates this process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the class does not have to implement any methods. It simply needs
    to extend `jakarta.ws.rs.Application` and be annotated with the `@ApplicationPath`
    annotation. The class must be public, may have any name, and may be placed in
    any package.
  prefs: []
  type: TYPE_NORMAL
- en: Testing our web service
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we mentioned earlier, web browsers send a GET request to any URLs we point
    them to. Therefore, the easiest way to test GET requests to our service is to
    simply point the browser to our service’s URI, as illustrated in *Figure 3**.1*.
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure \uFEFF3.1 – HTTP GET request from a web browser](img/B21231_3.1.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 3.1 – HTTP GET request from a web browser
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Firefox includes a JSON viewer that by default parses the JSON data and displays
    it in a user-friendly manner. To view the actual JSON string sent by our service
    in Firefox, we need to click on the **Raw** **Data** tab.
  prefs: []
  type: TYPE_NORMAL
- en: Web browsers only support HTTP GET and POST requests. To test a POST request
    through the browser, we would have to write a web application containing an HTML
    form that has an action attribute value of our service’s URI. Although trivial
    for a single service, it can become cumbersome to do this for every RESTful web
    service we develop.
  prefs: []
  type: TYPE_NORMAL
- en: Thankfully, there is a popular open source command-line utility called `curl`
    that we can use to test our web services. `curl` is included with most Linux distributions,
    and can be easily downloaded for Windows, macOS, and several other platforms.
    `curl` can be downloaded at [http://curl.haxx.se/](http://curl.haxx.se/).
  prefs: []
  type: TYPE_NORMAL
- en: '`curl` can send all HTTP request method types (GET, POST, PUT, DELETE, etc.)
    to our service. Our server’s response will simply be displayed on the command-line
    console. `curl` takes an `-X` command-line option, which allows us to specify
    what request method to send. To send a GET request, we simply need to type the
    following into the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Doing so results in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This, unsurprisingly, is the same output we saw when we pointed our browser
    to the service’s URI.
  prefs: []
  type: TYPE_NORMAL
- en: 'The default request method for `curl` is GET; therefore, the `-X` parameter
    in our preceding example is redundant. We could have achieved the same result
    by invoking the following command from the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'After submitting any of the two preceding commands and examining the application
    server log, we should see the output of the logging statements we added to the
    `getCustomer()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The exact location of the application server log depends on the Jakarta EE implementation
    we are using. For GlassFish, when using the default domain, it can be found at
    `[glassfish` `installation directory]/glassfish/domains/domain1/logs/server.log`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For all other request method types, we need to send some data to our service.
    This can be accomplished by the `--data` command-line argument to `curl`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We need to specify the MIME type via `curl`’s `-H` command-line argument using
    the format seen in the preceding example.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can verify that the preceding command worked as expected by inspecting the
    application server log:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We can test other request method types just as easily:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in the following output in the application server log:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '`curl` allows us to quickly test our RESTful web services. However, in a real
    application, we need to develop RESTful web service clients to invoke our RESTful
    web services and retrieve data from them. Jakarta REST provides a client API we
    can use for this purpose.'
  prefs: []
  type: TYPE_NORMAL
- en: Developing a RESTful web service client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although `curl` allows us to quickly test our RESTful web services and is a
    developer-friendly tool, we need a way for our Java applications to invoke the
    RESTful web services we develop. Jakarta REST includes a client-side API we can
    use to develop RESTful web service clients.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example illustrates how to use the Jakarta REST client API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The first thing we need to do is create an instance of `jakarta.ws.rs.client.Client`
    by invoking the static `newClient()` method on the `jakarta.ws.rs.client.ClientBuilder`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: We then invoke the `target()` method on our `Client` instance, passing the URI
    of our RESTful web service as a parameter. The `target()` method returns an instance
    of a class implementing the `jakarta.ws.rs.client.WebTarget` interface.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we invoke the `request()` method on our `WebTarget` instance.
    This method returns an implementation of the `jakarta.ws.rs.client.Invocation.Builder`
    interface.
  prefs: []
  type: TYPE_NORMAL
- en: In this particular example, we are sending an HTTP PUT request to our RESTful
    web service; therefore, at this point, we invoke the `put()` method of our `Invocation.Builder`
    implementation.
  prefs: []
  type: TYPE_NORMAL
- en: The first parameter of the `put()` method is a `jakarta.ws.rs.client.Entity`
    instance; we can create one on the fly by invoking the static `entity()` method
    on the `Entity` class. The first parameter for this method is the object we wish
    to pass to our RESTful web service, and the second parameter is the string representation
    of the MIME type of the data we will be passing to the RESTful web service. In
    our example, we are using the `MediaType.APPLICATION_JSON` constant, which resolves
    to `"application/json"`. The second parameter of the `put()` method is the type
    of response the client expects from the service. In our case we expect a `String`;
    therefore, we used `String.class` for this parameter. After we invoke the `put()`
    method, an HTTP PUT request is sent to our RESTful web service and the method
    we decorated with the `@Put` annotation (`createCustomer()` in our example) is
    invoked. There are similar `get()`, `post()`, and `delete()` methods we can invoke
    to send the corresponding HTTP requests to our RESTful web service.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve seen how to develop both RESTFul web services and clients, we’ll
    take a look at how Jakarta EE can seamlessly convert between Java and JSON.
  prefs: []
  type: TYPE_NORMAL
- en: Seamlessly converting between Java and JSON
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: RESTful web services transfer data in plain text, typically, but this is not
    limited to JSON-formatted data. In our examples so far, we have been sending and
    receiving JSON strings between our RESTful services and their clients.
  prefs: []
  type: TYPE_NORMAL
- en: Frequently, we would like to populate Java objects from the JSON data we receive,
    manipulate the data somehow, and then build a JSON string to send as a response.
    The population of Java objects from JSON, and the generation of JSON data from
    Java objects, is so common that the Jakarta REST implementation provides a way
    to do it seamlessly and automatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'In previous examples in this chapter, we have been sending and receiving raw
    JSON data as strings. Our sample data contains customer information such as first
    name, middle name, and last name. To make this data easier to manipulate, we would
    typically populate a Java object with this data; for example, we could parse the
    JSON data and populate an instance of the following Java class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Notice how the instance variable names of our `Customer` class match the names
    of the properties of our JSON data; Jakarta REST is smart enough to populate each
    variable with the corresponding JSON property. As long as the property names and
    variable names match, Jakarta REST can populate our Java object automatically
    (the types, needless to say, must match as well; an error would occur trying to
    populate a variable of the `Integer` type with a textual value, for example).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example illustrates how we can implement a RESTful web service
    that seamlessly converts the JSON data it receives to a Java object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Notice all we had to do was to change the type of the parameters for our methods
    to be of the `Customer` type (our simple example POJO); previously, they were
    of the `String` type. Similarly, we changed the type of the return value from
    `String` to `Customer`.
  prefs: []
  type: TYPE_NORMAL
- en: Notice we don’t have to do anything special in our code to populate the `Customer`
    object, or to generate a JSON string to send as a response; it is all taken care
    of behind the scenes by Jakarta REST.
  prefs: []
  type: TYPE_NORMAL
- en: 'To illustrate this seamless conversion, let’s use `curl` to send a request
    to our modified service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that in our `curl` command, we are sending JSON data to our Jakarta
    REST service. If we inspect the application server log, we can see the following
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: package com.ensode.jakartarestjavajsonclient;
  prefs: []
  type: TYPE_NORMAL
- en: //imports omitted for brevity
  prefs: []
  type: TYPE_NORMAL
- en: public class App {
  prefs: []
  type: TYPE_NORMAL
- en: public static void main(String[] args) {
  prefs: []
  type: TYPE_NORMAL
- en: App app = new App();
  prefs: []
  type: TYPE_NORMAL
- en: app.insertCustomer();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: public void insertCustomer() {
  prefs: []
  type: TYPE_NORMAL
- en: Customer customer = new Customer(456L, "Daniel",
  prefs: []
  type: TYPE_NORMAL
- en: '"Robert","Hanson");'
  prefs: []
  type: TYPE_NORMAL
- en: Client client = ClientBuilder.newClient();
  prefs: []
  type: TYPE_NORMAL
- en: client.target(
  prefs: []
  type: TYPE_NORMAL
- en: '"http://localhost:8080/"'
  prefs: []
  type: TYPE_NORMAL
- en: + "jakartarestjavajson/resources/customer").
  prefs: []
  type: TYPE_NORMAL
- en: request().put(
  prefs: []
  type: TYPE_NORMAL
- en: Entity.entity(customer, MediaType.APPLICATION_JSON),
  prefs: []
  type: TYPE_NORMAL
- en: Customer.class);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: com.ensode.jakartaeebook.javajson.service.CustomerResource.createCustomer()
    invoked|#]
  prefs: []
  type: TYPE_NORMAL
- en: customer = Customer{id=456, firstName=Daniel, middleName=Robert, lastName=Hanson}|#]
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: package com.ensode.jakartaeebook.queryparams.service;
  prefs: []
  type: TYPE_NORMAL
- en: //imports omitted for brevity
  prefs: []
  type: TYPE_NORMAL
- en: '@Path("customer")'
  prefs: []
  type: TYPE_NORMAL
- en: public class CustomerResource {
  prefs: []
  type: TYPE_NORMAL
- en: private static final Logger LOG =
  prefs: []
  type: TYPE_NORMAL
- en: Logger.getLogger(CustomerResource.class.getName());
  prefs: []
  type: TYPE_NORMAL
- en: private final Customer customer;
  prefs: []
  type: TYPE_NORMAL
- en: public CustomerResource() {
  prefs: []
  type: TYPE_NORMAL
- en: customer = new Customer(1L, "Samuel",
  prefs: []
  type: TYPE_NORMAL
- en: '"Joseph", "Willow");'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '@GET'
  prefs: []
  type: TYPE_NORMAL
- en: '@Produces(MediaType.APPLICATION_JSON)'
  prefs: []
  type: TYPE_NORMAL
- en: public Customer getCustomer(@QueryParam("id") Long id) {
  prefs: []
  type: TYPE_NORMAL
- en: LOG.log(Level.INFO,
  prefs: []
  type: TYPE_NORMAL
- en: '"{0}.getCustomer() invoked, id = {1}", new Object[]'
  prefs: []
  type: TYPE_NORMAL
- en: '{this.getClass().getCanonicalName(), id});'
  prefs: []
  type: TYPE_NORMAL
- en: return new Customer(id, "Dummy", null, "Customer");
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '@DELETE'
  prefs: []
  type: TYPE_NORMAL
- en: '@Consumes(MediaType.APPLICATION_JSON)'
  prefs: []
  type: TYPE_NORMAL
- en: public void deleteCustomer(@QueryParam("id") Long id) {
  prefs: []
  type: TYPE_NORMAL
- en: LOG.log(Level.INFO,
  prefs: []
  type: TYPE_NORMAL
- en: '"{0}.deleteCustomer() invoked, id = {1}",'
  prefs: []
  type: TYPE_NORMAL
- en: new Object[]
  prefs: []
  type: TYPE_NORMAL
- en: '{this.getClass().getCanonicalName(), id});'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: //additional methods deleted for brevity
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: curl -XGET -HContent-type:application/json http://localhost:8080/queryparams/resources/customer?id=1
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: com.ensode.jakartaeebook.queryparams.service.CustomerResource.getCustomer()
    invoked, id = 1|#]
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '{"firstName":"Dummy","id":1,"lastName":"Customer"}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: curl -XDELETE -HContent-type:application/json http://localhost:8080/queryparams/resources/customer?id=2
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: com.ensode.jakartaeebook.queryparams.service.CustomerResource.deleteCustomer()
    invoked, id = 2|#]
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: package com.ensode.jakartaeebook.queryparamsclient;
  prefs: []
  type: TYPE_NORMAL
- en: //imports omitted for brevity
  prefs: []
  type: TYPE_NORMAL
- en: public class App {
  prefs: []
  type: TYPE_NORMAL
- en: public static void main(String[] args) {
  prefs: []
  type: TYPE_NORMAL
- en: App app = new App();
  prefs: []
  type: TYPE_NORMAL
- en: app.getCustomer();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: public void getCustomer() {
  prefs: []
  type: TYPE_NORMAL
- en: Client client = ClientBuilder.newClient();
  prefs: []
  type: TYPE_NORMAL
- en: Customer customer = client.target(
  prefs: []
  type: TYPE_NORMAL
- en: '"http://localhost:8080/"'
  prefs: []
  type: TYPE_NORMAL
- en: + "queryparams/resources/customer").
  prefs: []
  type: TYPE_NORMAL
- en: queryParam("id", 1L).
  prefs: []
  type: TYPE_NORMAL
- en: request().get(Customer.class);
  prefs: []
  type: TYPE_NORMAL
- en: System.out.println(String.format(
  prefs: []
  type: TYPE_NORMAL
- en: '"Received the following customer information:\n%s",'
  prefs: []
  type: TYPE_NORMAL
- en: customer));
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: package com.ensode.jakartaeebook.pathparams.service;
  prefs: []
  type: TYPE_NORMAL
- en: //imports omitted for brevity
  prefs: []
  type: TYPE_NORMAL
- en: '@Path("/customer/")'
  prefs: []
  type: TYPE_NORMAL
- en: public class CustomerResource {
  prefs: []
  type: TYPE_NORMAL
- en: private static final Logger LOG =
  prefs: []
  type: TYPE_NORMAL
- en: Logger.getLogger(CustomerResource.class.getName());
  prefs: []
  type: TYPE_NORMAL
- en: private Customer customer;
  prefs: []
  type: TYPE_NORMAL
- en: public CustomerResource() {
  prefs: []
  type: TYPE_NORMAL
- en: customer = new Customer(1L, "William",
  prefs: []
  type: TYPE_NORMAL
- en: '"Daniel", "Graystone");'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '@GET'
  prefs: []
  type: TYPE_NORMAL
- en: '@Produces(MediaType.APPLICATION_JSON)'
  prefs: []
  type: TYPE_NORMAL
- en: '@Path("{id}/")'
  prefs: []
  type: TYPE_NORMAL
- en: public Customer getCustomer(@PathParam("id") Long id) {
  prefs: []
  type: TYPE_NORMAL
- en: return customer;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '@PUT'
  prefs: []
  type: TYPE_NORMAL
- en: '@Consumes(MediaType.APPLICATION_JSON)'
  prefs: []
  type: TYPE_NORMAL
- en: public void createCustomer(Customer customer) {
  prefs: []
  type: TYPE_NORMAL
- en: LOG.log(Level.INFO, "customer = {0}", customer);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '@POST'
  prefs: []
  type: TYPE_NORMAL
- en: '@Consumes(MediaType.APPLICATION_JSON)'
  prefs: []
  type: TYPE_NORMAL
- en: public void updateCustomer(Customer customer) {
  prefs: []
  type: TYPE_NORMAL
- en: LOG.log(Level.INFO, "customer= {0}", customer);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '@DELETE'
  prefs: []
  type: TYPE_NORMAL
- en: '@Consumes(MediaType.APPLICATION_JSON)'
  prefs: []
  type: TYPE_NORMAL
- en: '@Path("{id}/")'
  prefs: []
  type: TYPE_NORMAL
- en: public void deleteCustomer(@PathParam("id") Long id) {
  prefs: []
  type: TYPE_NORMAL
- en: LOG.log(Level.INFO, "customer = {0}", customer);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: curl -XGET -HContent-type:application/json http://localhost:8080/pathparams/resources/customer/1
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '{"firstName":"William","id":1,"lastName":"Graystone","middleName":"Daniel"}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: package com.ensode.jakartaeebook.pathparamsclient;
  prefs: []
  type: TYPE_NORMAL
- en: //imports omitted for brevity
  prefs: []
  type: TYPE_NORMAL
- en: public class App {
  prefs: []
  type: TYPE_NORMAL
- en: public static void main(String[] args) {
  prefs: []
  type: TYPE_NORMAL
- en: App app = new App();
  prefs: []
  type: TYPE_NORMAL
- en: app.getCustomer();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: public void getCustomer() {
  prefs: []
  type: TYPE_NORMAL
- en: Client client = ClientBuilder.newClient();
  prefs: []
  type: TYPE_NORMAL
- en: Customer customer = client.target(
  prefs: []
  type: TYPE_NORMAL
- en: http://localhost:8080/pathparams/resources/customer
  prefs: []
  type: TYPE_NORMAL
- en: '"http://localhost:8080/"'
  prefs: []
  type: TYPE_NORMAL
- en: + "pathparams/resources/customer").
  prefs: []
  type: TYPE_NORMAL
- en: path("{id}").
  prefs: []
  type: TYPE_NORMAL
- en: resolveTemplate("id", 1L).
  prefs: []
  type: TYPE_NORMAL
- en: request().get(Customer.class);
  prefs: []
  type: TYPE_NORMAL
- en: System.out.println("Received the following "
  prefs: []
  type: TYPE_NORMAL
- en: + "customer information:");
  prefs: []
  type: TYPE_NORMAL
- en: 'System.out.println("Id: " + customer.getId());'
  prefs: []
  type: TYPE_NORMAL
- en: 'System.out.println("First Name: " +'
  prefs: []
  type: TYPE_NORMAL
- en: customer.getFirstName());
  prefs: []
  type: TYPE_NORMAL
- en: 'System.out.println("Middle Name: " +'
  prefs: []
  type: TYPE_NORMAL
- en: customer.getMiddleName());
  prefs: []
  type: TYPE_NORMAL
- en: 'System.out.println("Last Name: " +'
  prefs: []
  type: TYPE_NORMAL
- en: customer.getLastName());
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '@Path("/{paramName1}/{paramName2}/")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: public String someMethod(
  prefs: []
  type: TYPE_NORMAL
- en: '@PathParam("paramName1") String param1,'
  prefs: []
  type: TYPE_NORMAL
- en: '@PathParam("paramName2") String param2)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: package com.ensode.jakartaeebook.serversentevents
  prefs: []
  type: TYPE_NORMAL
- en: // imports omitted for brevity
  prefs: []
  type: TYPE_NORMAL
- en: '@ApplicationScoped'
  prefs: []
  type: TYPE_NORMAL
- en: '@Path("serversentevents")'
  prefs: []
  type: TYPE_NORMAL
- en: public class SseResource {
  prefs: []
  type: TYPE_NORMAL
- en: private   SseBroadcaster sseBroadcaster;
  prefs: []
  type: TYPE_NORMAL
- en: private OutboundSseEvent.Builder eventBuilder;
  prefs: []
  type: TYPE_NORMAL
- en: private ScheduledExecutorService scheduledExecutorService;
  prefs: []
  type: TYPE_NORMAL
- en: private Double stockValue = 10.0;
  prefs: []
  type: TYPE_NORMAL
- en: //initialization and cleanup methods omitted for brevity
  prefs: []
  type: TYPE_NORMAL
- en: '@Context'
  prefs: []
  type: TYPE_NORMAL
- en: public void setSse(Sse sse) {
  prefs: []
  type: TYPE_NORMAL
- en: this.eventBuilder = sse.newEventBuilder();
  prefs: []
  type: TYPE_NORMAL
- en: this.sseBroadcaster = sse.newBroadcaster();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '@GET'
  prefs: []
  type: TYPE_NORMAL
- en: '@Path("subscribe")'
  prefs: []
  type: TYPE_NORMAL
- en: '@Produces(MediaType.SERVER_SENT_EVENTS)'
  prefs: []
  type: TYPE_NORMAL
- en: public void subscribe(@Context SseEventSink sseEventSink) {
  prefs: []
  type: TYPE_NORMAL
- en: LOG.info(String.format("%s.subscribe() invoked",
  prefs: []
  type: TYPE_NORMAL
- en: this.getClass().getName()));
  prefs: []
  type: TYPE_NORMAL
- en: this.sseBroadcaster.register(sseEventSink);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: public void sendEvents() {
  prefs: []
  type: TYPE_NORMAL
- en: scheduledExecutorService.scheduleAtFixedRate(() -> {
  prefs: []
  type: TYPE_NORMAL
- en: final OutboundSseEvent outboundSseEvent = eventBuilder
  prefs: []
  type: TYPE_NORMAL
- en: .name("ENSD stock ticker value")
  prefs: []
  type: TYPE_NORMAL
- en: .data(String.class, String.format("%.2f",
  prefs: []
  type: TYPE_NORMAL
- en: stockValue))
  prefs: []
  type: TYPE_NORMAL
- en: .build();
  prefs: []
  type: TYPE_NORMAL
- en: 'LOG.info(String.format("broadcasting event: %.2f",'
  prefs: []
  type: TYPE_NORMAL
- en: stockValue));
  prefs: []
  type: TYPE_NORMAL
- en: sseBroadcaster.broadcast(outboundSseEvent);
  prefs: []
  type: TYPE_NORMAL
- en: stockValue += 0.9;
  prefs: []
  type: TYPE_NORMAL
- en: '}, 5, 5, TimeUnit.SECONDS);'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: curl -XGET http://localhost:8080/serversentevents/resources/serversentevents/subscribe
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: com.ensode.jakartaeebook.serversentevents.SseResource.subscribe() invoked|#]
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'event: ENSD stock ticker value'
  prefs: []
  type: TYPE_NORMAL
- en: 'data: 10.00'
  prefs: []
  type: TYPE_NORMAL
- en: 'event: ENSD stock ticker value'
  prefs: []
  type: TYPE_NORMAL
- en: 'data: 10.90'
  prefs: []
  type: TYPE_NORMAL
- en: 'event: ENSD stock ticker value'
  prefs: []
  type: TYPE_NORMAL
- en: 'data: 11.80'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: package com.ensode.jakartaeebook.serversenteventsclient;
  prefs: []
  type: TYPE_NORMAL
- en: //imports omitted for brevity
  prefs: []
  type: TYPE_NORMAL
- en: public class App {
  prefs: []
  type: TYPE_NORMAL
- en: public static void main(String[] args) {
  prefs: []
  type: TYPE_NORMAL
- en: App app = new App();
  prefs: []
  type: TYPE_NORMAL
- en: app.listenForEvents();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: public void listenForEvents() {
  prefs: []
  type: TYPE_NORMAL
- en: final SseEventSource.Builder sseEventSourceBuilder;
  prefs: []
  type: TYPE_NORMAL
- en: final SseEventSource sseEventSource;
  prefs: []
  type: TYPE_NORMAL
- en: final Client client = ClientBuilder.newClient();
  prefs: []
  type: TYPE_NORMAL
- en: final WebTarget webTarget = client.target(
  prefs: []
  type: TYPE_NORMAL
- en: '"http://localhost:8080/serversentevents/"'
  prefs: []
  type: TYPE_NORMAL
- en: + "resources/serversentevents/subscribe");
  prefs: []
  type: TYPE_NORMAL
- en: sseEventSourceBuilder =
  prefs: []
  type: TYPE_NORMAL
- en: SseEventSource.target(webTarget);
  prefs: []
  type: TYPE_NORMAL
- en: sseEventSource = sseEventSourceBuilder.build();
  prefs: []
  type: TYPE_NORMAL
- en: sseEventSource.register((inboundSseEvent) -> {
  prefs: []
  type: TYPE_NORMAL
- en: System.out.println("Received the following event:");
  prefs: []
  type: TYPE_NORMAL
- en: 'System.out.println(String.format("Event name: %s",'
  prefs: []
  type: TYPE_NORMAL
- en: inboundSseEvent.getName()));
  prefs: []
  type: TYPE_NORMAL
- en: 'System.out.println(String.format("Event data: %s\n",'
  prefs: []
  type: TYPE_NORMAL
- en: inboundSseEvent.readData()));
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: sseEventSource.open();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Received the following event:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Event name: ENSD stock ticker value'
  prefs: []
  type: TYPE_NORMAL
- en: 'Event data: 10.00'
  prefs: []
  type: TYPE_NORMAL
- en: 'Received the following event:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Event name: ENSD stock ticker value'
  prefs: []
  type: TYPE_NORMAL
- en: 'Event data: 10.90'
  prefs: []
  type: TYPE_NORMAL
- en: 'Received the following event:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Event name: ENSD stock ticker value'
  prefs: []
  type: TYPE_NORMAL
- en: 'Event data: 11.80'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: <!DOCTYPE html>
  prefs: []
  type: TYPE_NORMAL
- en: <html>
  prefs: []
  type: TYPE_NORMAL
- en: <head>
  prefs: []
  type: TYPE_NORMAL
- en: <title>Stock Ticker Monitor</title>
  prefs: []
  type: TYPE_NORMAL
- en: <meta http-equiv="Content-Type" content="text/html;
  prefs: []
  type: TYPE_NORMAL
- en: charset=UTF-8">
  prefs: []
  type: TYPE_NORMAL
- en: </head>
  prefs: []
  type: TYPE_NORMAL
- en: <body onload="getStockTickerValues()">
  prefs: []
  type: TYPE_NORMAL
- en: <h2>Super fancy stock ticker monitor</h2>
  prefs: []
  type: TYPE_NORMAL
- en: <table cellspacing="0" cellpadding="0">
  prefs: []
  type: TYPE_NORMAL
- en: <tr>
  prefs: []
  type: TYPE_NORMAL
- en: '<td>ENSD Stock Ticker Value: </td>'
  prefs: []
  type: TYPE_NORMAL
- en: <td>&nbsp;<span id="stickerVal"></span></td>
  prefs: []
  type: TYPE_NORMAL
- en: </tr>
  prefs: []
  type: TYPE_NORMAL
- en: <tr>
  prefs: []
  type: TYPE_NORMAL
- en: <td></td><td><button>Buy!</button></td>
  prefs: []
  type: TYPE_NORMAL
- en: </tr>
  prefs: []
  type: TYPE_NORMAL
- en: </table>
  prefs: []
  type: TYPE_NORMAL
- en: <script>
  prefs: []
  type: TYPE_NORMAL
- en: function getStockTickerValues() {
  prefs: []
  type: TYPE_NORMAL
- en: var source = new EventSource(
  prefs: []
  type: TYPE_NORMAL
- en: '"resources/serversentevents/subscribe");'
  prefs: []
  type: TYPE_NORMAL
- en: source.addEventListener(
  prefs: []
  type: TYPE_NORMAL
- en: '''ENSD stock ticker value'', function (e) {'
  prefs: []
  type: TYPE_NORMAL
- en: console.log('event received', e);
  prefs: []
  type: TYPE_NORMAL
- en: document.getElementById(
  prefs: []
  type: TYPE_NORMAL
- en: '"stickerVal").innerHTML ='
  prefs: []
  type: TYPE_NORMAL
- en: event.data;
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: </script>
  prefs: []
  type: TYPE_NORMAL
- en: </body>
  prefs: []
  type: TYPE_NORMAL
- en: </html>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
