- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: Jakarta RESTful Web Services
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jakarta RESTful Web 服务
- en: '**Representational State Transfer** (**REST**) is an architectural style in
    which web services are viewed as resources and can be identified by **Uniform
    Resource** **Identifiers** (**URIs**).'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**表示性状态转移** (**REST**) 是一种架构风格，在这种风格中，Web 服务被视为资源，并且可以通过 **统一资源标识符** (**URIs**)
    来识别。'
- en: Web services developed using the REST styles are known as RESTful web services.
    We can develop RESTful web services in Jakarta EE via the **Jakarta RESTful Web
    Services API**, commonly known as **Jakarta REST**. In this chapter, we will cover
    how to develop RESTful web services using Jakarta REST.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 REST 风格开发的 Web 服务被称为 RESTful Web 服务。我们可以在 Jakarta EE 中通过 **Jakarta RESTful
    Web Services API**（通常称为 **Jakarta REST**）来开发 RESTful Web 服务。在本章中，我们将介绍如何使用 Jakarta
    REST 开发 RESTful Web 服务。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Introduction to RESTful web services
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RESTful Web 服务简介
- en: Developing a simple RESTful web service
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发简单的 RESTful Web 服务
- en: Developing a RESTful web service client
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发 RESTful Web 服务客户端
- en: Seamlessly converting between Java and JSON
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无缝地在 Java 和 JSON 之间转换
- en: Query and path parameters
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询和路径参数
- en: Server-sent events
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器发送事件
- en: Note
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Code samples for this chapter can be found at [https://github.com/PacktPublishing/Jakarta-EE-Application-Development/tree/main/ch03_src](https://github.com/PacktPublishing/Jakarta-EE-Application-Development/tree/main/ch03_src).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码示例可以在 [https://github.com/PacktPublishing/Jakarta-EE-Application-Development/tree/main/ch03_src](https://github.com/PacktPublishing/Jakarta-EE-Application-Development/tree/main/ch03_src)
    找到。
- en: Introduction to RESTful web services
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RESTful Web 服务简介
- en: RESTful web services are very flexible. RESTful web services can consume several
    types of different MIME types, although they are typically written to consume
    and/or produce data in **JavaScript Object Notation** (**JSON**) format.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: RESTful Web 服务非常灵活。虽然它们通常被编写为消费和/或生成 **JavaScript 对象表示法** (**JSON**) 格式的数据，但
    RESTful Web 服务可以消费多种不同类型的 MIME 类型。
- en: MIME types
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: MIME 类型
- en: MIME stands for Multipurpose Internet Mail Extensions; it is used to indicate
    the data type that is consumed or produced by RESTful web services.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: MIME 代表多用途互联网邮件扩展；它用于指示 RESTful Web 服务消费或生成的数据类型。
- en: 'Web services must support one or more of the following six HTTP methods:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Web 服务必须支持以下六种 HTTP 方法中的一种或多种：
- en: '**GET** – By convention, a GET request is used to retrieve an existing resource'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GET** – 按照惯例，GET 请求用于检索现有资源'
- en: '**POST** – By convention, a POST request is used to update an existing resource'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**POST** – 按照惯例，POST 请求用于更新现有资源'
- en: '**PUT** – By convention, a PUT request is used to create or replace a new resource'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PUT** – 按照惯例，PUT 请求用于创建或替换新资源'
- en: '**DELETE** – By convention, a DELETE request is used to delete an existing
    resource'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DELETE** – 按照惯例，DELETE 请求用于删除现有资源'
- en: '**HEAD** – By convention, a HEAD request returns an HTTP header with no body'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HEAD** – 按照惯例，HEAD 请求返回一个没有主体的 HTTP 头'
- en: '**PATCH** – By convention, a PATCH request is used for partial resource modification'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PATCH** – 按照惯例，PATCH 请求用于部分修改资源'
- en: We develop a RESTful web service with Jakarta REST by creating a class with
    annotated methods that are invoked when our web service receives one of the preceding
    HTTP request methods. Once we have developed and deployed our RESTful web service,
    we need to develop a client that will send requests to our service. Frontend web
    technologies are frequently used to develop RESTful web service clients. However,
    Jakarta REST includes a standard client-side API that we can use to develop RESTful
    web service clients in Java.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过创建一个类，并使用注解方法来装饰 RESTful Web 服务资源类，这些方法在 Web 服务接收到上述 HTTP 请求方法之一时被调用，来使用
    Jakarta REST 开发 RESTful Web 服务。一旦我们开发和部署了我们的 RESTful Web 服务，我们就需要开发一个客户端来向我们的服务发送请求。前端
    Web 技术通常用于开发 RESTful Web 服务客户端。然而，Jakarta REST 包含了一个标准的客户端 API，我们可以使用它来用 Java
    开发 RESTful Web 服务客户端。
- en: Developing a simple RESTful web service
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发简单的 RESTful Web 服务
- en: In this section, we will develop a simple web service to illustrate how we can
    make methods in our service respond to the different HTTP request methods.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将开发一个简单的 Web 服务来展示我们如何使我们的服务中的方法响应不同的 HTTP 请求方法。
- en: Developing a RESTful web service using Jakarta REST is simple and straightforward.
    Each of our RESTful web services needs to be invoked via its `@Path` annotation,
    which we need to use to decorate our RESTful web service resource class.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Jakarta REST 开发 RESTful Web 服务简单直接。我们的每个 RESTful Web 服务都需要通过其 `@Path` 注解来调用，我们需要使用它来装饰我们的
    RESTful Web 服务资源类。
- en: When developing RESTful web services, we need to develop methods that will be
    invoked when our web service receives an HTTP request. We need to implement methods
    to handle one or more of the six types of requests that RESTful web services handle
    – GET, POST, PUT, DELETE, HEAD and/or PATCH.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发RESTful Web服务时，我们需要开发当我们的Web服务收到HTTP请求时将被调用的方法。我们需要实现方法来处理RESTful Web服务处理的六种请求类型之一或多个——GET、POST、PUT、DELETE、HEAD和/或PATCH。
- en: Note
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We will only cover the most frequently used HTTP request types as implementing
    all HTTP request types is very similar.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将只介绍最常用的HTTP请求类型，因为实现所有HTTP请求类型非常相似。
- en: Jakarta REST provides annotations that we can use to decorate methods in our
    web service. For example, `@GET`, `@POST`, `@PUT`, and `@DELETE` are used to implement
    the corresponding HTTP methods. Decorating a method in our web service with one
    of these annotations will make it respond to the corresponding HTTP method request.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Jakarta REST提供了我们可以用来装饰我们Web服务中的方法的注解。例如，`@GET`、`@POST`、`@PUT`和`@DELETE`用于实现相应的HTTP方法。在我们的Web服务中用这些注解装饰一个方法，将使其能够响应相应的HTTP方法请求。
- en: Additionally, each method in our service must produce and/or consume a specific
    MIME type. The MIME type to be produced needs to be specified with the `@Produces`
    annotation. Similarly, the MIME type to be consumed must be specified with the
    `@``Consumes` annotation.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们服务中的每个方法都必须产生和/或消费一个特定的MIME类型。需要产生的MIME类型需要用`@Produces`注解来指定。同样，需要消费的MIME类型必须用`@Consumes`注解来指定。
- en: 'The following example illustrates the concepts we have just explained:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例说明了我们刚刚解释的概念：
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Please note that this example does not *really* do anything. The purpose of
    the example is to illustrate how to make different methods in our RESTful web
    service resource class respond to the different HTTP methods.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这个示例实际上并没有做什么。示例的目的是说明如何使我们的RESTful Web服务资源类中的不同方法响应不同的HTTP方法。
- en: Notice that this class is annotated with the `@Path` annotation. This annotation
    designates the URI for our RESTful web service. The complete URI for our service
    will include the protocol, server name, port, context root, the REST resources
    path (see the next sub-section), and the value passed to this annotation.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这个类使用了`@Path`注解。这个注解指定了我们的RESTful Web服务的URI。我们服务的完整URI将包括协议、服务器名称、端口、上下文根、REST资源路径（见下一小节）以及传递给此注解的值。
- en: 'Assuming our web service was deployed to a server called `example.com`, using
    the HTTP protocol on port `8080`, and has a context root of `jakartarestintro`
    and a REST resources path of `resources`, then the complete URI for our service
    would be the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们的Web服务部署到了一个名为`example.com`的服务器上，使用HTTP协议在端口`8080`上，并且有一个上下文根为`jakartarestintro`和REST资源路径为`resources`，那么我们服务的完整URI将是以下内容：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Since web browsers generate a GET request when pointed to a URL, we can test
    the GET method of our service simply by pointing the browser to our service’s
    URI.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Web浏览器在指向URL时会生成GET请求，因此我们可以通过将浏览器指向我们的服务URI来简单地测试我们服务的GET方法。
- en: Notice that each of the methods in our class is annotated with one of the `@GET`,
    `@POST`, or `@PUT` annotations. These annotations make our methods respond to
    the corresponding HTTP method.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到我们课程中的每个方法都使用`@GET`、`@POST`或`@PUT`注解之一进行了标注。这些注解使得我们的方法能够响应相应的HTTP方法。
- en: Note
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: HTTP DELETE requests typically require a parameter. We will cover them in the
    *Path and query parameters* section later in the chapter.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP DELETE请求通常需要一个参数。我们将在本章后面的“路径和查询参数”部分介绍它们。
- en: Additionally, if our method returns data to the client, we declare the MIME
    type of the data to be returned in the `@Produces` annotation. In our example,
    only the `getCustomer()` method returns data to the client. We wish to return
    data in JSON format; therefore, we set the value of the `@Produces` annotation
    to the Jakarta REST-provided `MediaType.APPLICATION_JSON` constant, which has
    a value of `"application/json"`. Similarly, if our method needs to consume data
    from the client, we need to specify the MIME type of the data to be consumed;
    this is done via the `@Consumes` annotation. All methods except `getCustomer()`
    in our service consume data. In all cases, we expect the data to be in JSON format;
    therefore, we again specify `MediaType.APPLICATION_JSON` as the MIME type to be
    consumed.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果我们的方法需要向客户端返回数据，我们可以在 `@Produces` 注解中声明要返回的数据的MIME类型。在我们的例子中，只有 `getCustomer()`
    方法向客户端返回数据。我们希望以JSON格式返回数据；因此，我们将 `@Produces` 注解的值设置为Jakarta REST提供的 `MediaType.APPLICATION_JSON`
    常量，其值为 `"application/json"`。同样，如果我们的方法需要从客户端消耗数据，我们需要指定要消耗的数据的MIME类型；这是通过 `@Consumes`
    注解来完成的。在我们的服务中，除了 `getCustomer()` 之外的所有方法都消耗数据。在所有情况下，我们期望数据以JSON格式；因此，我们再次指定
    `MediaType.APPLICATION_JSON` 作为要消耗的MIME类型。
- en: 'Before moving on, it is worth mentioning that the `@Path` annotation can be
    used both at the class level and at the method level. Using the `@Path` annotation
    at the method level allows us to write multiple methods that handle the same HTTP
    request type in a single RESTful web service. For example, if we needed a second
    method in our example RESTful web service, we would simply add the `@Path` annotation
    to it:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，值得提一下的是，`@Path` 注解可以在类级别和方法级别同时使用。在方法级别使用 `@Path` 注解允许我们在单个RESTful Web服务中编写多个处理相同HTTP请求类型的方法。例如，如果我们需要在我们的示例RESTful
    Web服务中添加第二个方法，我们只需简单地将 `@Path` 注解添加到它上面：
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The URI of this particular endpoint would be the value we used in our method-level
    `@Path` annotation, appended to the URI of our RESTful web service.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这个特定端点的URI将是我们在方法级 `@Path` 注解中使用的值，附加到我们RESTful Web服务的URI上。
- en: In our example, the URI of our RESTful web service would be something like [http://localhost:8080/jakartarestintro/resources/customer/](http://localhost:8080/jakartarestintro/resources/customer/),
    assuming we deployed to our local workstation and the server is listening on port
    `8080`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们的RESTful Web服务的URI可能类似于 [http://localhost:8080/jakartarestintro/resources/customer/](http://localhost:8080/jakartarestintro/resources/customer/)，假设我们部署到本地工作站，并且服务器正在监听端口
    `8080`。
- en: The URI for the endpoint with the method-level annotation would then be `curl`
    http://localhost:8080/jakartarestintro/resources/customer/customername. Notice
    that the value of the method-level `@Path` annotation was appended to the “root”
    URI of our RESTful web service.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法级注解的端点URI将是 `curl` http://localhost:8080/jakartarestintro/resources/customer/customername。请注意，方法级
    `@Path` 注解的值被附加到了我们RESTful Web服务的“根”URI上。
- en: Configuring the REST resources path for our application
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置我们应用的REST资源路径
- en: As briefly mentioned in the previous section, before successfully deploying
    a RESTful web service developed using Jakarta REST, we need to configure the REST
    resources path for our application. We can do this by developing a class that
    extends `jakarta.ws.rs.core.Application` and decorating it with the `@``ApplicationPath`
    annotation.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一小节简要提到的，在成功部署使用Jakarta REST开发的RESTful Web服务之前，我们需要为我们的应用配置REST资源路径。我们可以通过开发一个扩展
    `jakarta.ws.rs.core.Application` 的类，并用 `@ApplicationPath` 注解来装饰它来实现这一点。
- en: Configuring via the @ApplicationPath annotation
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过 `@ApplicationPath` 注解进行配置
- en: To configure our REST resources path, all we need to do is write a class that
    extends `jakarta.ws.rs.core.Application`, and decorate it with the `@ApplicationPath`
    annotation; the value passed to this annotation is the REST resources path for
    our services.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置我们的REST资源路径，我们只需要编写一个扩展 `jakarta.ws.rs.core.Application` 的类，并用 `@ApplicationPath`
    注解来装饰它；传递给这个注解的值是我们服务的REST资源路径。
- en: 'The following code sample illustrates this process:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码示例说明了这个过程：
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Notice that the class does not have to implement any methods. It simply needs
    to extend `jakarta.ws.rs.Application` and be annotated with the `@ApplicationPath`
    annotation. The class must be public, may have any name, and may be placed in
    any package.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，该类不需要实现任何方法。它只需要扩展 `jakarta.ws.rs.Application` 并用 `@ApplicationPath` 注解来注解；该类必须是公开的，可以有任何名称，并且可以放在任何包中。
- en: Testing our web service
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试我们的Web服务
- en: As we mentioned earlier, web browsers send a GET request to any URLs we point
    them to. Therefore, the easiest way to test GET requests to our service is to
    simply point the browser to our service’s URI, as illustrated in *Figure 3**.1*.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，网络浏览器会将GET请求发送到我们指向的任何URL。因此，测试我们的服务GET请求的最简单方法是将浏览器指向我们的服务URI，如图*图3.1*所示。
- en: "![Figure \uFEFF3.1 – HTTP GET request from a web browser](img/B21231_3.1.jpg)"
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图3.1 – 来自网络浏览器的HTTP GET请求](img/B21231_3.1.jpg)'
- en: Figure 3.1 – HTTP GET request from a web browser
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.1 – 来自网络浏览器的HTTP GET请求
- en: Note
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Firefox includes a JSON viewer that by default parses the JSON data and displays
    it in a user-friendly manner. To view the actual JSON string sent by our service
    in Firefox, we need to click on the **Raw** **Data** tab.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Firefox包含一个默认解析JSON数据并以用户友好的方式显示的JSON查看器。要在Firefox中查看我们的服务发送的实际JSON字符串，我们需要点击**原始数据**标签。
- en: Web browsers only support HTTP GET and POST requests. To test a POST request
    through the browser, we would have to write a web application containing an HTML
    form that has an action attribute value of our service’s URI. Although trivial
    for a single service, it can become cumbersome to do this for every RESTful web
    service we develop.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 网络浏览器仅支持HTTP GET和POST请求。要通过浏览器测试POST请求，我们必须编写一个包含具有我们的服务URI作为action属性值的HTML表单的Web应用程序。虽然对于一个单一的服务来说这很
    trivial，但对我们开发的每个RESTful Web服务来说，这样做可能会变得繁琐。
- en: Thankfully, there is a popular open source command-line utility called `curl`
    that we can use to test our web services. `curl` is included with most Linux distributions,
    and can be easily downloaded for Windows, macOS, and several other platforms.
    `curl` can be downloaded at [http://curl.haxx.se/](http://curl.haxx.se/).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，有一个流行的开源命令行工具`curl`，我们可以用它来测试我们的Web服务。`curl`包含在大多数Linux发行版中，并且可以轻松地下载到Windows、macOS和几个其他平台。`curl`可以在[http://curl.haxx.se/](http://curl.haxx.se/)下载。
- en: '`curl` can send all HTTP request method types (GET, POST, PUT, DELETE, etc.)
    to our service. Our server’s response will simply be displayed on the command-line
    console. `curl` takes an `-X` command-line option, which allows us to specify
    what request method to send. To send a GET request, we simply need to type the
    following into the command line:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`curl`可以向我们的服务发送所有HTTP请求方法类型（GET、POST、PUT、DELETE等）。我们的服务器响应将简单地显示在命令行控制台上。`curl`有一个`-X`命令行选项，允许我们指定要发送的请求方法。要发送GET请求，我们只需在命令行中输入以下内容：'
- en: '[PRE4]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Doing so results in the following output:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做会产生以下输出：
- en: '[PRE5]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This, unsurprisingly, is the same output we saw when we pointed our browser
    to the service’s URI.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不令人惊讶，这是我们指向服务URI时看到的相同输出。
- en: 'The default request method for `curl` is GET; therefore, the `-X` parameter
    in our preceding example is redundant. We could have achieved the same result
    by invoking the following command from the command line:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`curl`的默认请求方法是GET；因此，我们前面示例中的`-X`参数是多余的。我们可以通过从命令行调用以下命令来达到相同的结果：'
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After submitting any of the two preceding commands and examining the application
    server log, we should see the output of the logging statements we added to the
    `getCustomer()` method:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在提交上述两个命令之一并检查应用程序服务器日志后，我们应该看到我们添加到`getCustomer()`方法中的日志语句的输出：
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The exact location of the application server log depends on the Jakarta EE implementation
    we are using. For GlassFish, when using the default domain, it can be found at
    `[glassfish` `installation directory]/glassfish/domains/domain1/logs/server.log`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序服务器日志的确切位置取决于我们使用的Jakarta EE实现。对于GlassFish，当使用默认域时，它可以在`[glassfish` `安装目录]/glassfish/domains/domain1/logs/server.log`找到。
- en: 'For all other request method types, we need to send some data to our service.
    This can be accomplished by the `--data` command-line argument to `curl`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所有其他请求方法类型，我们需要向我们的服务发送一些数据。这可以通过`curl`的`--data`命令行参数来完成：
- en: '[PRE8]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We need to specify the MIME type via `curl`’s `-H` command-line argument using
    the format seen in the preceding example.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要通过`curl`的`-H`命令行参数指定MIME类型，格式如前例所示。
- en: 'We can verify that the preceding command worked as expected by inspecting the
    application server log:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过检查应用程序服务器日志来验证前面的命令是否按预期工作：
- en: '[PRE9]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can test other request method types just as easily:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以像测试其他请求方法类型一样轻松地测试：
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This results in the following output in the application server log:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致应用程序服务器日志中出现以下输出：
- en: '[PRE11]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`curl` allows us to quickly test our RESTful web services. However, in a real
    application, we need to develop RESTful web service clients to invoke our RESTful
    web services and retrieve data from them. Jakarta REST provides a client API we
    can use for this purpose.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`curl`允许我们快速测试我们的RESTful网络服务。然而，在实际应用中，我们需要开发RESTful网络服务客户端来调用我们的RESTful网络服务并从中检索数据。Jakarta
    REST提供了一个客户端API，我们可以用它来实现这个目的。'
- en: Developing a RESTful web service client
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发RESTful网络服务客户端
- en: Although `curl` allows us to quickly test our RESTful web services and is a
    developer-friendly tool, we need a way for our Java applications to invoke the
    RESTful web services we develop. Jakarta REST includes a client-side API we can
    use to develop RESTful web service clients.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`curl`允许我们快速测试我们的RESTful网络服务，并且是一个开发者友好的工具，但我们需要一种方法让我们的Java应用程序调用我们开发的RESTful网络服务。Jakarta
    REST包括一个客户端API，我们可以用它来开发RESTful网络服务客户端。
- en: 'The following example illustrates how to use the Jakarta REST client API:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例说明了如何使用Jakarta REST客户端API：
- en: '[PRE12]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The first thing we need to do is create an instance of `jakarta.ws.rs.client.Client`
    by invoking the static `newClient()` method on the `jakarta.ws.rs.client.ClientBuilder`
    class.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是通过在`jakarta.ws.rs.client.ClientBuilder`类上调用静态的`newClient()`方法来创建一个`jakarta.ws.rs.client.Client`实例。
- en: We then invoke the `target()` method on our `Client` instance, passing the URI
    of our RESTful web service as a parameter. The `target()` method returns an instance
    of a class implementing the `jakarta.ws.rs.client.WebTarget` interface.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们在`Client`实例上调用`target()`方法，将我们的RESTful网络服务的URI作为参数传递。`target()`方法返回一个实现`jakarta.ws.rs.client.WebTarget`接口的类的实例。
- en: At this point, we invoke the `request()` method on our `WebTarget` instance.
    This method returns an implementation of the `jakarta.ws.rs.client.Invocation.Builder`
    interface.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们在我们的`WebTarget`实例上调用`request()`方法。此方法返回`jakarta.ws.rs.client.Invocation.Builder`接口的实现。
- en: In this particular example, we are sending an HTTP PUT request to our RESTful
    web service; therefore, at this point, we invoke the `put()` method of our `Invocation.Builder`
    implementation.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个特定的例子中，我们正在向我们的RESTful网络服务发送一个HTTP PUT请求；因此，在这个点上，我们调用我们的`Invocation.Builder`实现的`put()`方法。
- en: The first parameter of the `put()` method is a `jakarta.ws.rs.client.Entity`
    instance; we can create one on the fly by invoking the static `entity()` method
    on the `Entity` class. The first parameter for this method is the object we wish
    to pass to our RESTful web service, and the second parameter is the string representation
    of the MIME type of the data we will be passing to the RESTful web service. In
    our example, we are using the `MediaType.APPLICATION_JSON` constant, which resolves
    to `"application/json"`. The second parameter of the `put()` method is the type
    of response the client expects from the service. In our case we expect a `String`;
    therefore, we used `String.class` for this parameter. After we invoke the `put()`
    method, an HTTP PUT request is sent to our RESTful web service and the method
    we decorated with the `@Put` annotation (`createCustomer()` in our example) is
    invoked. There are similar `get()`, `post()`, and `delete()` methods we can invoke
    to send the corresponding HTTP requests to our RESTful web service.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`put()`方法的第一个参数是一个`jakarta.ws.rs.client.Entity`实例；我们可以通过在`Entity`类上调用静态的`entity()`方法即时创建一个。此方法的第一个参数是我们希望传递给我们的RESTful网络服务的对象，第二个参数是我们将传递给RESTful网络服务的数据的MIME类型的字符串表示。在我们的例子中，我们使用`MediaType.APPLICATION_JSON`常量，它解析为`"application/json"`。`put()`方法的第二个参数是客户端期望从服务中获取的响应类型。在我们的情况下，我们期望一个`String`；因此，我们为这个参数使用了`String.class`。在我们调用`put()`方法后，一个HTTP
    PUT请求被发送到我们的RESTful网络服务，并且被`@Put`注解装饰的方法（在我们的例子中是`createCustomer()`）被调用。我们还可以调用类似的`get()`、`post()`和`delete()`方法来向我们的RESTful网络服务发送相应的HTTP请求。'
- en: Now that we’ve seen how to develop both RESTFul web services and clients, we’ll
    take a look at how Jakarta EE can seamlessly convert between Java and JSON.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了如何开发RESTful网络服务和客户端，我们将探讨Jakarta EE如何无缝地在Java和JSON之间转换。
- en: Seamlessly converting between Java and JSON
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无缝地在Java和JSON之间转换
- en: RESTful web services transfer data in plain text, typically, but this is not
    limited to JSON-formatted data. In our examples so far, we have been sending and
    receiving JSON strings between our RESTful services and their clients.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: RESTful网络服务通常以纯文本形式传输数据，但不仅限于JSON格式的数据。在我们之前的例子中，我们一直在我们的RESTful服务和它们的客户端之间发送和接收JSON字符串。
- en: Frequently, we would like to populate Java objects from the JSON data we receive,
    manipulate the data somehow, and then build a JSON string to send as a response.
    The population of Java objects from JSON, and the generation of JSON data from
    Java objects, is so common that the Jakarta REST implementation provides a way
    to do it seamlessly and automatically.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: 'In previous examples in this chapter, we have been sending and receiving raw
    JSON data as strings. Our sample data contains customer information such as first
    name, middle name, and last name. To make this data easier to manipulate, we would
    typically populate a Java object with this data; for example, we could parse the
    JSON data and populate an instance of the following Java class:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Notice how the instance variable names of our `Customer` class match the names
    of the properties of our JSON data; Jakarta REST is smart enough to populate each
    variable with the corresponding JSON property. As long as the property names and
    variable names match, Jakarta REST can populate our Java object automatically
    (the types, needless to say, must match as well; an error would occur trying to
    populate a variable of the `Integer` type with a textual value, for example).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example illustrates how we can implement a RESTful web service
    that seamlessly converts the JSON data it receives to a Java object:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Notice all we had to do was to change the type of the parameters for our methods
    to be of the `Customer` type (our simple example POJO); previously, they were
    of the `String` type. Similarly, we changed the type of the return value from
    `String` to `Customer`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Notice we don’t have to do anything special in our code to populate the `Customer`
    object, or to generate a JSON string to send as a response; it is all taken care
    of behind the scenes by Jakarta REST.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: 'To illustrate this seamless conversion, let’s use `curl` to send a request
    to our modified service:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Notice that in our `curl` command, we are sending JSON data to our Jakarta
    REST service. If we inspect the application server log, we can see the following
    output:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: package com.ensode.jakartarestjavajsonclient;
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: //imports omitted for brevity
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: public class App {
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: public static void main(String[] args) {
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: App app = new App();
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: app.insertCustomer();
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: public void insertCustomer() {
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: Customer customer = new Customer(456L, "Daniel",
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '"Robert","Hanson");'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: Client client = ClientBuilder.newClient();
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: client.target(
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '"http://localhost:8080/"'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: + "jakartarestjavajson/resources/customer").
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: request().put(
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: Entity.entity(customer, MediaType.APPLICATION_JSON),
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: Customer.class);
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: com.ensode.jakartaeebook.javajson.service.CustomerResource.createCustomer()
    invoked|#]
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: customer = Customer{id=456, firstName=Daniel, middleName=Robert, lastName=Hanson}|#]
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: package com.ensode.jakartaeebook.queryparams.service;
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: //imports omitted for brevity
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '@Path("customer")'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: public class CustomerResource {
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: private static final Logger LOG =
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: Logger.getLogger(CustomerResource.class.getName());
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: private final Customer customer;
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: public CustomerResource() {
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: customer = new Customer(1L, "Samuel",
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '"Joseph", "Willow");'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '@GET'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '@Produces(MediaType.APPLICATION_JSON)'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: public Customer getCustomer(@QueryParam("id") Long id) {
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: LOG.log(Level.INFO,
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '"{0}.getCustomer() invoked, id = {1}", new Object[]'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: '{this.getClass().getCanonicalName(), id});'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: return new Customer(id, "Dummy", null, "Customer");
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '@DELETE'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '@Consumes(MediaType.APPLICATION_JSON)'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: public void deleteCustomer(@QueryParam("id") Long id) {
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: LOG.log(Level.INFO,
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '"{0}.deleteCustomer() invoked, id = {1}",'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: new Object[]
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '{this.getClass().getCanonicalName(), id});'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: //additional methods deleted for brevity
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: curl -XGET -HContent-type:application/json http://localhost:8080/queryparams/resources/customer?id=1
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: com.ensode.jakartaeebook.queryparams.service.CustomerResource.getCustomer()
    invoked, id = 1|#]
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '{"firstName":"Dummy","id":1,"lastName":"Customer"}'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: curl -XDELETE -HContent-type:application/json http://localhost:8080/queryparams/resources/customer?id=2
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: com.ensode.jakartaeebook.queryparams.service.CustomerResource.deleteCustomer()
    invoked, id = 2|#]
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: package com.ensode.jakartaeebook.queryparamsclient;
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: //imports omitted for brevity
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: public class App {
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: public static void main(String[] args) {
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: App app = new App();
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: app.getCustomer();
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: public void getCustomer() {
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: Client client = ClientBuilder.newClient();
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: Customer customer = client.target(
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '"http://localhost:8080/"'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: + "queryparams/resources/customer").
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: queryParam("id", 1L).
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: request().get(Customer.class);
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: System.out.println(String.format(
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '"Received the following customer information:\n%s",'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: customer));
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: package com.ensode.jakartaeebook.pathparams.service;
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: //imports omitted for brevity
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: '@Path("/customer/")'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: public class CustomerResource {
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: private static final Logger LOG =
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: Logger.getLogger(CustomerResource.class.getName());
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: private Customer customer;
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: public CustomerResource() {
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: customer = new Customer(1L, "William",
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: '"Daniel", "Graystone");'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: '@GET'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '@Produces(MediaType.APPLICATION_JSON)'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: '@Path("{id}/")'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: public Customer getCustomer(@PathParam("id") Long id) {
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: return customer;
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: '@PUT'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '@Consumes(MediaType.APPLICATION_JSON)'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: public void createCustomer(Customer customer) {
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: LOG.log(Level.INFO, "customer = {0}", customer);
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: '@POST'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: '@Consumes(MediaType.APPLICATION_JSON)'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: public void updateCustomer(Customer customer) {
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: LOG.log(Level.INFO, "customer= {0}", customer);
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '@DELETE'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: '@Consumes(MediaType.APPLICATION_JSON)'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: '@Path("{id}/")'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: public void deleteCustomer(@PathParam("id") Long id) {
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: LOG.log(Level.INFO, "customer = {0}", customer);
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: curl -XGET -HContent-type:application/json http://localhost:8080/pathparams/resources/customer/1
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '{"firstName":"William","id":1,"lastName":"Graystone","middleName":"Daniel"}'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: package com.ensode.jakartaeebook.pathparamsclient;
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: //imports omitted for brevity
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: public class App {
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: public static void main(String[] args) {
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: App app = new App();
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: app.getCustomer();
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: public void getCustomer() {
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: Client client = ClientBuilder.newClient();
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: Customer customer = client.target(
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: http://localhost:8080/pathparams/resources/customer
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: '"http://localhost:8080/"'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: + "pathparams/resources/customer").
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: path("{id}").
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: resolveTemplate("id", 1L).
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: request().get(Customer.class);
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: System.out.println("Received the following "
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: + "customer information:");
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: 'System.out.println("Id: " + customer.getId());'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: 'System.out.println("First Name: " +'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: customer.getFirstName());
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: 'System.out.println("Middle Name: " +'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: customer.getMiddleName());
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: 'System.out.println("Last Name: " +'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: customer.getLastName());
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '@Path("/{paramName1}/{paramName2}/")'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: public String someMethod(
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: '@PathParam("paramName1") String param1,'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: '@PathParam("paramName2") String param2)'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: package com.ensode.jakartaeebook.serversentevents
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: // imports omitted for brevity
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: '@ApplicationScoped'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: '@Path("serversentevents")'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: public class SseResource {
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: private   SseBroadcaster sseBroadcaster;
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: private OutboundSseEvent.Builder eventBuilder;
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: private ScheduledExecutorService scheduledExecutorService;
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: private Double stockValue = 10.0;
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: //initialization and cleanup methods omitted for brevity
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: '@Context'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: public void setSse(Sse sse) {
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: this.eventBuilder = sse.newEventBuilder();
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: this.sseBroadcaster = sse.newBroadcaster();
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: '@GET'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: '@Path("subscribe")'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: '@Produces(MediaType.SERVER_SENT_EVENTS)'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: public void subscribe(@Context SseEventSink sseEventSink) {
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: LOG.info(String.format("%s.subscribe() invoked",
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: this.getClass().getName()));
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: this.sseBroadcaster.register(sseEventSink);
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: public void sendEvents() {
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: scheduledExecutorService.scheduleAtFixedRate(() -> {
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: final OutboundSseEvent outboundSseEvent = eventBuilder
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: .name("ENSD stock ticker value")
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: .data(String.class, String.format("%.2f",
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: stockValue))
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: .build();
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: 'LOG.info(String.format("broadcasting event: %.2f",'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: stockValue));
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: sseBroadcaster.broadcast(outboundSseEvent);
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: stockValue += 0.9;
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: '}, 5, 5, TimeUnit.SECONDS);'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: curl -XGET http://localhost:8080/serversentevents/resources/serversentevents/subscribe
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: com.ensode.jakartaeebook.serversentevents.SseResource.subscribe() invoked|#]
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'event: ENSD stock ticker value'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: 'data: 10.00'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: 'event: ENSD stock ticker value'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: 'data: 10.90'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: 'event: ENSD stock ticker value'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: 'data: 11.80'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: package com.ensode.jakartaeebook.serversenteventsclient;
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: //imports omitted for brevity
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: public class App {
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: public static void main(String[] args) {
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: App app = new App();
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: app.listenForEvents();
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: public void listenForEvents() {
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: final SseEventSource.Builder sseEventSourceBuilder;
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: final SseEventSource sseEventSource;
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: final Client client = ClientBuilder.newClient();
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: final WebTarget webTarget = client.target(
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: '"http://localhost:8080/serversentevents/"'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: + "resources/serversentevents/subscribe");
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: sseEventSourceBuilder =
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: SseEventSource.target(webTarget);
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: sseEventSource = sseEventSourceBuilder.build();
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: sseEventSource.register((inboundSseEvent) -> {
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: System.out.println("Received the following event:");
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: 'System.out.println(String.format("Event name: %s",'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: inboundSseEvent.getName()));
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: 'System.out.println(String.format("Event data: %s\n",'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: inboundSseEvent.readData()));
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: sseEventSource.open();
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Received the following event:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: 'Event name: ENSD stock ticker value'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: 'Event data: 10.00'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: 'Received the following event:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: 'Event name: ENSD stock ticker value'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: 'Event data: 10.90'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: 'Received the following event:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: 'Event name: ENSD stock ticker value'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: 'Event data: 11.80'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: <!DOCTYPE html>
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: <html>
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: <head>
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: <title>Stock Ticker Monitor</title>
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: <meta http-equiv="Content-Type" content="text/html;
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: charset=UTF-8">
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: </head>
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: <body onload="getStockTickerValues()">
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: <h2>Super fancy stock ticker monitor</h2>
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: <table cellspacing="0" cellpadding="0">
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: <tr>
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: '<td>ENSD Stock Ticker Value: </td>'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: <td>&nbsp;<span id="stickerVal"></span></td>
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: </tr>
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: <tr>
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: <td></td><td><button>Buy!</button></td>
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
- en: </tr>
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: </table>
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
- en: <script>
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
- en: function getStockTickerValues() {
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
- en: var source = new EventSource(
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
- en: '"resources/serversentevents/subscribe");'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: source.addEventListener(
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
- en: '''ENSD stock ticker value'', function (e) {'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
- en: console.log('event received', e);
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: document.getElementById(
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
- en: '"stickerVal").innerHTML ='
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
- en: event.data;
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
- en: </script>
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: </body>
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
- en: </html>
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
