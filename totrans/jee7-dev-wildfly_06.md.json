["```java\n<connection-factory name=\"InVmConnectionFactory\">\n      <connectors>\n        <connector-ref connector-name=\"in-vm\"/>\n   </connectors>\n   <entries>\n <entry name=\"java:/ConnectionFactory\"/>\n   </entries>\n</connection-factory>\n<connection-factory name=\"RemoteConnectionFactory\">\n   <connectors>\n     <connector-ref connector-name=\"http-connector\"/>\n   </connectors>\n   <entries>\n <entry name=\"java:jboss/exported/jms/RemoteConnectionFactory\"/>\n   </entries>\n</connection-factory>\n<pooled-connection-factory name=\"hornetq-ra\">\n<transaction mode=\"xa\"/>\n   <connectors>\n      <connector-ref connector-name=\"in-vm\"/>\n   </connectors>\n   <entries>\n <entry name=\"java:/JmsXA\"/>\n <entry name=\"java:jboss/DefaultJMSConnectionFactory\"/>\n    </entries>\n</pooled-connection-factory>\n```", "```java\n@Stateless\npublic class SampleEJB {\n\n @Resource(mappedName = \"java:/ConnectionFactory\")\n private ConnectionFactory cf; \n}\n```", "```java\nstandalone.sh –c standalone-full.xml\n```", "```java\n<jms-destinations>\n   <jms-queue name=\"TicketQueue\">\n      <entry name=\"java:jboss/jms/queue/ticketQueue\"/>\n         <durable>false</durable>\n   </jms-queue>\n</jms-destinations>\n```", "```java\npackage com.packtpub.wflydevelopment.chapter6.jms;\n\nimport javax.ejb.ActivationConfigProperty;\nimport javax.ejb.MessageDriven;\nimport javax.inject.Inject;\nimport javax.jms.JMSException;\nimport javax.jms.Message;\nimport javax.jms.MessageListener;\nimport java.util.logging.Logger;\n\n@MessageDriven(name = \"BookingQueueReceiver\", activationConfig = {\n @ActivationConfigProperty(propertyName = \"destinationLookup\",\n propertyValue = \"java:jboss/jms/queue/ticketQueue\"),  [1]\n @ActivationConfigProperty(propertyName = \"destinationType\",\n propertyValue = \"javax.jms.Queue\"),}\n)\npublic class BookingQueueReceiver implements MessageListener {\n\n    @Inject\n    private Logger logger;\n\n    @Override\n    public void onMessage(Message message) {\n        try {\n            final String text = message.getBody(String.class);\n            logger.info(\"Received message \" + text);\n        } catch (JMSException ex) {\n            logger.severe(ex.toString());\n        }\n    }\n}\n```", "```java\npackage com.packtpub.wflydevelopment.chapter6.jms;\n\nimport javax.jms.JMSDestinationDefinition;\n\n@JMSDestinationDefinition(\n        name = BookingQueueDefinition.BOOKING_QUEUE,\n        interfaceName = \"javax.jms.Queue\"\n)\npublic class BookingQueueDefinition {\n\n    public static final String BOOKING_QUEUE = \"java:global/jms/bookingQueue\";\n}\n```", "```java\npackage com.packtpub.wflydevelopment.chapter6.jms;\n\nimport javax.annotation.Resource;\nimport javax.enterprise.context.RequestScoped;\nimport javax.inject.Inject;\nimport javax.jms.JMSContext;\nimport javax.jms.Queue;\n\n@ApplicationScoped\npublic class BookingQueueProducer {\n\n    @Inject\n    private JMSContext context;\n    @Resource(mappedName = BookingQueueDefinition.BOOKING_QUEUE)\n    private Queue syncQueue;\n\n    public void sendMessage(String txt) {\n        context.createProducer().send(syncQueue, txt);\n    }\n}\n```", "```java\npackage com.packtpub.wflydevelopment.chapter6.jms;\n\nImport javax.annotation.Resource;\nImport javax.enterprise.context.ApplicationScoped;\nImport javax.jms.*;\nImport java.util.logging.Logger;\n\n@ApplicationScoped\npublic class BookingQueueProducer {\n\n    @Inject\n    private Logger logger;\n\n    @Resource(mappedName = \"java:/ConnectionFactory\")\n    private ConnectionFactorycf;\n\n    @Resource(mappedName = BookingQueueDefinition.BOOKING_QUEUE)\n    private Queue queueExample;  \n\n    public void sendMessage(String txt) {\n        try {\n            final Connection connection = cf.createConnection();\n            Session session = connection\n                  .createSession(false, Session.AUTO_ACKNOWLEDGE);\n\n            final MessageProducer publisher = \n                session.createProducer(queueExample);\n\n            connection.start();\n\n            final TextMessage message = \n                session.createTextMessage(txt);\n            publisher.send(message);\n        }\n        catch (Exception exc) {\n           logger.error(\"Error ! \"+exc);\n        }\n        finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (JMSException e) { \n                    logger.error(e); \n                } \n            }\n        }\n    }\n}\n```", "```java\npublic class BookerService implements Serializable {\n\n @Inject\n private BookingQueueProducer bookingQueueProducer;\n\n    // Some code\n\n    public void bookSeat(long seatId, int price) {\n        logger.info(\"Booking seat \" + seatId);\n\n        if (price > money) {\n            final FacesMessage m = \n                  new FacesMessage(FacesMessage.SEVERITY_ERROR, \n                    \"Not enough Money!\",\n                    \"Registration successful\");\n            facesContext.addMessage(null, m);\n            return;\n        }\n\n        ticketService.bookSeat(seatId);\n\n        final FacesMessage m = \n              new FacesMessage(FacesMessage.SEVERITY_INFO, \n                  \"Registered!\", \n                  \"Registration successful\");\n        facesContext.addMessage(null, m);\n        logger.info(\"Seat booked.\");\n\n        money = money - price;\n\n bookingQueueProducer.sendMessage(\"[JMS Message] User registered seat \" + seatId);\n    }\n    // Some code\n\n}\n```", "```java\n@ApplicationScoped\npublic class BookingCompletionListener implements CompletionListener {\n\n    @Inject\n    private Logger logger;\n\n @Override\n public void onCompletion(Message message) {\n        try {\n            final String text = message.getBody(String.class);\n            logger.info(\"Send was successful: \" + text));\n        } catch (Throwable e) {\n            logger.severe(\"Problem with message format\");\n        }\n    }\n\n @Override\n public void onException(Message message, Exception exception) {\n        try {\n            final String text = message.getBody(String.class);\n            logger.info(\"Send failed...\" + text);\n        } catch (Throwable e) {\n            logger.severe(\"Problem with message format\");\n        }\n    }\n}\n```", "```java\npublic void sendMessage(String txt) {\n    context.createProducer()\n        .setAsync(bookingCompletionListener).send(syncQueue, txt);\n}\n```", "```java\n[com.packtpub.wflydevelopment.chapter6.jms.BookingCompletionListener] (Thread-3 (HornetQ-client-global-threads-269763340)) Send was successful: [JMS Message] User registered seat 2 \n```", "```java\nstandalone.sh –c standalone-full.xml\n```", "```java\n@ApplicationScoped\npublic class BookingQueueProducer {\n\n    @Inject\n    private JMSContext context;\n\n    @Inject\n    private BookingCompletionListener bookingCompletionListener;\n\n    @Resource(mappedName = BookingQueueDefinition.BOOKING_QUEUE)\n    private Queue syncQueue;\n\n    public void sendMessage(String txt, Priority priority) {\n        context.createProducer()\n                .setAsync(bookingCompletionListener)\n                .setProperty(\"priority\", priority.toString())\n                .send(syncQueue, txt);\n    }\n} \n\npublic enum Priority {\n    LOW, HIGH\n}\n```", "```java\nbookingQueueProducer.sendMessage(\"[JMS Message] User registered seat \" + seatId, Priority.LOW);\n```", "```java\nbookingQueueProducer.sendMessage(\"Error during Transaction\", Priority. HIGH);\n```", "```java\n@MessageDriven(name = \"BookingQueueReceiver\", activationConfig = {\n        @ActivationConfigProperty(propertyName = \"destinationLookup\",\n                propertyValue = BookingQueueDefinition.BOOKING_QUEUE),\n        @ActivationConfigProperty(propertyName = \"destinationType\",\n                propertyValue = \"javax.jms.Queue\"),\n        @ActivationConfigProperty(propertyName = \"messageSelector\",\n propertyValue = \"priority = 'HIGH'\"),}\n)\npublic class BookingQueueReceiver implements MessageListener {\n\n    // Some code \n}\n```", "```java\n@MessageDriven(name = \" LowPriorityBookingQueueReceiver\", activationConfig = {\n        @ActivationConfigProperty(propertyName = \"destinationLookup\",\n                propertyValue = BookingQueueDefinition.BOOKING_QUEUE),\n        @ActivationConfigProperty(propertyName = \"destinationType\",\n                propertyValue = \"javax.jms.Queue\"),\n @ActivationConfigProperty(propertyName = \"messageSelector\",\n propertyValue = \"priority = 'LOW'\"),}\n)\npublic class LowPriorityBookingQueueReceiver implements MessageListener {\n\n    // Some code\n} \n```", "```java\nJMSContext context = connectionFactory.createContext(JMSContext.CLIENT_ACKNOWLEDGE)\n```", "```java\n$ cd doc/as\n\n```", "```java\nrar-info.bat /usr/doc/activemq-rar-5.9.0.rar\n\n```", "```java\njava -classpath ironjacamar-as.jar;..\\..\\lib\\ironjacamar-common-spi.jar;..\\..\\lib\\jboss-logging.jar;..\\..\\lib\\jboss-common-core.jar;..\\..\\lib\\ironjacamar-spec-api.jar;..\\..\\lib\\jandex.jar;..\\..\\lib\\ironjacamar-common-impl.jar;..\\..\\lib\\ironjacamar-common-api.jar;..\\..\\lib\\ironjacamar-core-impl.jar;..\\..\\lib\\ironjacamar-core-api.jar;..\\..\\lib\\ironjacamar-validator.jar;..\\..\\lib\\jandex.jar;..\\..\\lib\\validation-api.jar;..\\..\\lib\\hibernate-validator.jar;jboss-jms-api_2.0_spec-1.0.0.Final.jar;jboss-transaction-api_1.2_spec-1.0.0.Final.jar org.jboss.jca.as.rarinfo.Main %*\n\n```", "```java\n<ironjacamar>\n     <connection-definitions>\n        <connection-definition class-name=\"org.apache.activemq.ra.ActiveMQManagedConnectionFactory\" jndi-name=\"java:jboss/activemq/TopicConnectionFactory\" pool-name=\"TopicConnectionFactory\">\n     <pool>\n        <min-pool-size>1</min-pool-size>\n        <max-pool-size>200</max-pool-size>\n        <prefill>false</prefill>\n      </pool>\n      <security>\n        <application />\n      </security>\n      <timeout>\n        <blocking-timeout-millis>30000</blocking-timeout-millis>\n        <idle-timeout-minutes>3</idle-timeout-minutes>\n      </timeout>\n      <validation>\n        <background-validation>false</background-validation>\n        <use-fast-fail>false</use-fast-fail>\n      </validation> \n   </connection-definition>\n   <connection-definition class-name=\"org.apache.activemq.ra.ActiveMQManagedConnectionFactory\" jndi-name=\"java:jboss/activemq/QueueConnectionFactory\" pool-name=\"QueueConnectionFactory\">\n      <pool>\n        <min-pool-size>1</min-pool-size>\n        <max-pool-size>200</max-pool-size>\n        <prefill>false</prefill>\n      </pool>\n      <security>\n        <application />\n      </security>\n      <timeout>\n        <blocking-timeout-millis>30000</blocking-timeout-millis>\n        <idle-timeout-minutes>3</idle-timeout-minutes>\n      </timeout>\n      <validation>\n        <background-validation>false</background-validation>\n        <use-fast-fail>false</use-fast-fail>\n      </validation>\n    </connection-definition>\n    </connection-definitions>\n     <admin-objects>\n <admin-object class-name=\"org.apache.activemq.command.ActiveMQQueue\" jndi-name=\"java:jboss/activemq/queue/TicketQueue\">\n <config-property name=\"PhysicalName\">\n activemq/queue/TicketQueue\n </config-property>\n    </admin-object>\n    </admin-objects>\n</ironjacamar>\n```", "```java\n19:52:51,521 INFO  [org.jboss.as.connector.deployment] (MSC service thread 1-5) JBAS010401: Bound JCA AdminObject [java:jboss/activemq/queue/TicketQueue]\n19:52:51,521 INFO  [org.jboss.as.connector.deployment] (MSC service thread 1-5) JBAS010401: Bound JCA ConnectionFactory [java:jboss/jms/TopicConnectionFactory]\n19:52:51,521 INFO  [org.jboss.as.connector.deployment] (MSC service thread 1-8) JBAS010401: Bound JCA ConnectionFactory [java:jboss/jms/ConnectionFactory]\n19:52:51,542 INFO  [org.jboss.as.server] (DeploymentScanner-threads - 1) JBAS018559: Deployed \"activemq-rar-5.9.0.rar\" (runtime-name : \"activemq-rar-5.9.0.rar\")\n\n```", "```java\n         <dependency>\n            <groupId>org.jboss.ejb3</groupId>\n            <artifactId>jboss-ejb3-ext-api</artifactId>\n            <version>2.1.0</version>\n            <scope>provided</scope>\n        </dependency>\n```", "```java\n@MessageDriven(name = \"MDBService\", activationConfig = {\n @ActivationConfigProperty(propertyName = \"destination\",\n propertyValue = \"java:jboss/activemq/queue/TicketQueue\"),\n        @ActivationConfigProperty(propertyName = \"destinationType\",\n                propertyValue = \"javax.jms.Queue\"),}\n)\n@ResourceAdapter(value=\"activemq-rar-5.9.0.rar\")\npublic class BookingQueueReceiver implements MessageListener {\n\n    @Inject\n    private Logger logger;\n\n    @Override\n    public void onMessage(Message message) {\n        try {\n             final String text = message.getBody(String.class);\n            logger.info(\"Received message \" + text);\n        } catch (JMSException ex) {\n            logger.severe(ex.toString());\n        }\n    }\n}\n```", "```java\n19:59:59,452 INFO  [org.apache.activemq.ra.ActiveMQEndpointWorker] (ServerService Thread Pool -- 65) Starting\n19:59:59,458 INFO  [org.apache.activemq.ra.ActiveMQEndpointWorker] (default-threads - 1) Establishing connection to broker [tcp://localhost:61616]\n19:59:59,573 INFO  [javax.enterprise.resource.webcontainer.jsf.config] (MSC service thread 1-5) Initializing Mojarra 2.2.5-jbossorg-3 20140128-1641 for context '/ticket-agency-jms'\n19:59:59,618 INFO  [org.apache.activemq.ra.ActiveMQEndpointWorker] (default-threads - 1) Successfully established connection to broker [tcp://localhost:61616]\n20:00:00,053 INFO  [org.wildfly.extension.undertow] (MSC service thread 1-5) JBAS017534: Registered web context: /ticket-agency-jms\n20:00:00,081 INFO  [org.jboss.as.server] (DeploymentScanner-threads - 1) JBAS018559: Deployed \"ticket-agency-jms.war\" (runtime-name : \"ticket-agency-jms.war\")\n\n```"]