["```java\nrabbitmq-plugins enable rabbitmq_web_stomp\n```", "```java\n$ sudo rabbitmqctl add_vhost cc-dev-ws\nAdding vhost \"cc-dev-ws\" ...\n```", "```java\n$ sudo rabbitmqctl set_permissions -p cc-dev-ws cc-dev \".*\" \".*\" \".*\"\nSetting permissions for user \"cc-dev\" in vhost \"cc-dev-ws\" ..\n```", "```java\nssl_options.cacertfile = /path/to/tls/ca_certificate.pem\n\nssl_options.certfile = /path/to/tls/server_certificate.pem\n\nssl_options.keyfile = /path/to/tls/server_key.pem\n\nssl_options.verify = verify_peer\n\nssl_options.fail_if_no_peer_cert = true \n\nstomp.default_user = guest\n\nstomp.default_pass = guest\n\nstomp.implicit_connect = true\n```", "```java\nrabbitmqadmin declare queue name=taxi_information durable=true vhost=cc-dev-ws\n```", "```java\nrabbitmqadmin declare exchange name=taxi_exchange type=direct vhost=cc-dev-ws\n```", "```java\n<script src=”https://cdn.jsdelivr.net/npm/@stomp/stompjs@5.0.0/bundles/stomp.umd.min.js”></script>\n```", "```java\nlet stompClient;\n\nconst stompConfig = {\n  connectHeaders: {\n   login: username,\n    passcode: password,\n    host: 'cc-dev-ws' \n  },\n  brokerURL: brokerURL,\n  debug: function (str) {\n    console.log('STOMP: ' + str);\n  },\n  reconnectDelay: 200,\n  onConnect: function (frame) {\n    const subscription =\nstompClient.subscribe('/queue/taxi_information',       \n    function (message) {\n      const body = JSON.parse(message.body);\n      const latitude = body.latitude;\n      const longitude = body.longitude;\n    });\n  }\n};\n```", "```java\nstompClient = new StompJs.Client(stompConfig);\nstompClient.activate();\n```", "```java\nrabbitmqadmin declare exchange name=taxi_header_exchange type=headers --vhost cc-dev\n```", "```java\nrabbitmqadmin declare queue --name=taxi_information_with_headers durable=true --vhost cc-dev\n```", "```java\nimport pika\nimport json\n```", "```java\ncredentials = pika.PlainCredentials(\"cc-dev\", \"taxi123\")\nparameters = pika.ConnectionParameters(\n  host=\"127.0.0.1\",\n  port=5672,\n  virtual_host=\"cc-dev-ws\", \n  credentials=credentials)\n```", "```java\nconn = pika.BlockingConnection(parameters)\nassert conn.is_open\ntry:\n  ch = conn.channel()\n  assert ch.is_open\n  headers = {\"version\": \"0.1b\", \"system\": \"taxi\"}\n  properties = pika.BasicProperties(content_type='application/json',\nheaders=headers)\n  message = {\"latitude\": 0.0, \"longitude\": -1.0}\n  message = json.dumps(message)\n  ch.basic_publish(\n    exchange=\"taxi_header_exchange\",  \n    body=message,\n    properties=properties, routing_key=\"\")\nfinally:\n  conn.close()\n```"]