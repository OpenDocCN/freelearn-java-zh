- en: Chapter 11. Developing RESTful Web Services with JAX-RS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Representational State Transfer** (**REST**) is an architectural style in
    which web services are viewed as resources and can be identified by Uniform Resource
    Identifiers (URIs).'
  prefs: []
  type: TYPE_NORMAL
- en: Web services developed using REST are known as RESTful web services.
  prefs: []
  type: TYPE_NORMAL
- en: Java EE 6 added support to RESTful web services through the addition of the
    Java API for RESTful Web Services (JAX-RS). JAX-RS had been available as a standalone
    API for a while, it became part of Java EE in Version 6 of the specification.
    In this chapter, we will cover how to develop RESTful web services through the
    JAX-RS.API.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to RESTful web services and JAX-RS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing a simple RESTful web service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing a RESTful web service client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Path parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing RESTful web services and JAX-RS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: RESTful web services are very flexible. RESTful web services can consume several
    different kinds of MIME types, although they are typically written to consume
    and/or produce XML or JSON (JavaScript Object Notation).
  prefs: []
  type: TYPE_NORMAL
- en: 'Web services must support one or more of the following four HTTP methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`GET`: By convention, a `GET` request is used to retrieve an existing resource'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`POST`: By convention, a `POST` request is used to update an existing resource'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PUT`: By convention, a `PUT` request is used to create a new resource'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DELETE`: By convention, a `DELETE` request is used to delete an existing resource'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We develop a RESTful web service with JAX-RS by creating a class with annotated
    methods that are invoked when our web service receives one of the above HTTP request
    methods. Once we have developed and deployed our RESTful web service, we need
    to develop a client that will send requests to our service. JAX-RS 2.0 introduces
    a standard client-side API that we can use to develop RESTful web service clients.
  prefs: []
  type: TYPE_NORMAL
- en: Developing a simple RESTful web service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will develop a simple web service to illustrate how to make
    methods in our service respond to the different HTTP request methods.
  prefs: []
  type: TYPE_NORMAL
- en: Developing a RESTful web service using JAX-RS is simple and straightforward.
    Each of our RESTful web services needs to be invoked via its Unique Resource Identifier
    (URI). This URI is specified by the `@Path` annotation, which we need to use to
    decorate our RESTful web service resource class.
  prefs: []
  type: TYPE_NORMAL
- en: 'When developing RESTful web services, we need to develop methods that will
    be invoked when our web service receives an HTTP request. We need to implement
    methods to handle one or more of the four types of request that RESTful web services
    handle: `GET`, `POST`, `PUT`, and/or `DELETE`.'
  prefs: []
  type: TYPE_NORMAL
- en: The JAX-RS API provides four annotations that we can use to decorate methods
    in our web service; the annotations are appropriately named `@GET`, `@POST`, `@PUT`,
    and `@DELETE`. Decorating a method in our web service with one of these annotations
    will make it respond to the corresponding HTTP method.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, each method in our service must produce and/or consume a specific
    MIME type.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Multipurpose Internet Mail Extensions** (**MIME**) is a standard for transferring
    nonASCII text over the Internet. MIME was originally developed to send nontextual
    data over e-mail, but later, its use was expanded to include other forms of data
    transfer such as RESTful web services.'
  prefs: []
  type: TYPE_NORMAL
- en: The MIME type that is going to be produced needs to be specified with the `@Produces`
    annotation; similarly, the MIME type that is going to be consumed must be specified
    with the `@Consumes` annotation.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please note that this example does not really do anything; its purpose is to
    illustrate how to make different methods in our RESTful web service resource class
    respond to the different HTTP methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example illustrates the concepts we have just explained:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Notice that this class is annotated with the `@Path` annotation; this annotation
    designates the Uniform Resource Identifier (URI) for our RESTful web service.
    The complete URI for our service will include the protocol, server name, port,
    context root, the REST resources path (see the next subsection), and the value
    passed to this annotation.
  prefs: []
  type: TYPE_NORMAL
- en: Assuming our web service was deployed to a server called `example.com` using
    the HTTP protocol on port 8080, and has a context root called "jaxrsintro" and
    a REST resources path called `resources`, then the complete URI for our service
    would be `http://example.com:8080/jaxrsintro/resources/customer`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since web browsers generate a GET request when pointed to a URL, we can test
    the GET method of our service by simply pointing the browser to our service's
    URI.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that each of the methods in our class is annotated with one of the `@GET`,
    `@POST`, `@PUT`, or `@DELETE` annotations. These annotations make our methods
    respond to their corresponding HTTP method.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, if our method returns data to the client, we declare that the
    MIME type of the data should be returned in the `@Produces` annotation. In our
    example, only the `getCustomer()` method returns data to the client; we wish to
    return data in an XML format, therefore, we set the value of the `@Produces` annotation
    to `text/xml`. Similarly, if our method needs to consume data from the client,
    we need to specify the MIME type of the data to be consumed; this is done via
    the `@Consumes` annotation. All methods in our service except `getCustomer()`
    consume data; in all cases, we expect the data to be in XML, therefore, we again
    specify `text/xml` as the MIME type to be consumed.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the REST resources path for our application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As briefly mentioned in the previous section, before successfully deploying
    a RESTful web service developed using JAX-RS, we need to configure the REST resources
    path for our application. We can do this by developing a class that extends `javax.ws.rs.core.Application`
    and decorating it with the `@ApplicationPath` annotation.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring via the @ApplicationPath annotation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As mentioned in previous chapters, Java EE 6 added several new features to the
    Java EE specification so that in many cases it isn't necessary to write a `web.xml`
    deployment descriptor. JAX-RS is no different. We can configure the REST resources
    path in Java code via an annotation.
  prefs: []
  type: TYPE_NORMAL
- en: To configure our REST resources path without having to rely on a `web.xml` deployment
    descriptor, all we need to do is write a class that extends `javax.ws.ApplicationPath`
    and decorate it with the `@ApplicationPath` annotation; the value passed to this
    annotation is the REST resources path for our services.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code sample illustrates this process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the class does not have to implement any methods. It simply needs
    to extend `javax.ws.rs.Application` and be decorated with the `@ApplicationPath`
    annotation. The class must be public, may have any name, and may be placed in
    any package.
  prefs: []
  type: TYPE_NORMAL
- en: Testing our web service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we mentioned earlier, web browsers send a `GET` request to any URLs we point
    them to; therefore, the easiest way to test `GET` requests to our service is by
    simply pointing the browser to our service''s URI, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing our web service](img/6886_11_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Web browsers only support `GET` and `POST` requests. To test a `POST` request
    through the browser, we would have to write a web application containing an HTML
    form that has an action attribute value of our service's URI. Although this is
    simple to do for a single service, it can become cumbersome to do this for every
    RESTful web service we develop.
  prefs: []
  type: TYPE_NORMAL
- en: Thankfully, there is an open source command-line utility called `curl` that
    we can use to test our web services. The `curl` command is included with most
    Linux distributions and can be easily downloaded for Windows, Mac OS X, and several
    other platforms. The `curl` utility can be downloaded at [http://curl.haxx.se/](http://curl.haxx.se/).
  prefs: []
  type: TYPE_NORMAL
- en: '`curl` can send all four request method types (`GET`, `POST`, `PUT` and `DELETE`)
    to our service. Our server''s response will simply be displayed on the command-line
    console. `curl` takes the `-X` command-line option, which allows us to specify
    what request method to send; to send a `GET` request, we simply need to type the
    following into the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This, unsurprisingly, is the same output we saw when we pointed our browser
    to our service's URI.
  prefs: []
  type: TYPE_NORMAL
- en: 'The default request method for curl is `GET`, therefore, the `-X` parameter
    in our previous example is redundant; we could have achieved the same result by
    invoking the following command from the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: After submitting any of the two previous commands and examining the GlassFish
    log, we should see the output of the `System.out.println()` statements we added
    to the `getCustomer()` method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'For all other request method types, we need to send some data to our service.
    This can be accomplished by the `--data` command-line argument to the `curl` command,
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: As shown in this example, we need to specify the MIME type via the curl's `-H`
    command-line argument using the format shown in the example.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can verify that the previous command worked as expected by inspecting the
    GlassFish log by executing the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We can test other request method types just as easily by executing the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The GlassFish log shows the corresponding output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We can test the `delete` method by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Again the GlassFish log shows the corresponding output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Converting data between Java and XML with JAXB
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In our previous example, we processed raw XML data. In a real application, we
    would more than likely parse the XML data received from the client and use it
    to populate a Java object. Additionally, any XML data that we need to return to
    the client would have to be constructed from a Java object.
  prefs: []
  type: TYPE_NORMAL
- en: Converting data from Java to XML and back is such a common use case that the
    Java EE specification provides an API to do it. This API is the **Java API for
    XML Binding** (**JAXB**)**.**
  prefs: []
  type: TYPE_NORMAL
- en: 'JAXB makes converting data from Java to XML transparent and simple. All we
    need to do is decorate the class that we wish to convert to XML with the `@XmlRootElement`
    annotation. The following code example illustrates how to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: As shown in this example, other than the `@XmlRootElement` annotation at the
    class level, there is nothing unusual about the above Java class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have a class that we have decorated with the `@XmlRootElement` annotation,
    we need to change the parameter type of our web service from String to our custom
    class, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, the difference between this version of our RESTful web service
    and the previous one is that all parameter types and return values have been changed
    from `String` to `Customer`. JAXB takes care of converting our parameters and
    return types to and from XML as appropriate. When using JAXB, an object of our
    custom class is automatically populated with data from the XML data sent from
    the client, return values are similarly transparently converted to XML.
  prefs: []
  type: TYPE_NORMAL
- en: Developing a RESTful web service client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although `curl` allows us to quickly test our RESTful web services and is a
    developer friendly tool, it is not exactly user friendly; we shouldn't expect
    to have our user enter `curl` commands in their command line to use our web service.
    For this reason, we need to develop a client for our services. JAX-RS 2.0 introduces
    a standard client-side API that we can use to easily develop RESTful web service
    clients.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example illustrates how to use the JAX-RS client API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The first thing we need to do is create an instance of `javax.ws.rs.client.Client`
    by invoking the static `newClient()` method on the `javax.ws.rs.client.ClientBuilder`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: We then invoke the `target()` method on our `Client` instance, passing the URI
    of our RESTful web service as the parameter. The `target()` method returns an
    instance of a class implementing the `javax.ws.rs.client.WebTarget` interface.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we invoke the `request()` method on our `WebTarget` instance;
    this method returns an implementation of the `javax.ws.rs.client.Invocation.Builder`
    interface.
  prefs: []
  type: TYPE_NORMAL
- en: In this particular example, we are sending an `HTTP PUT` request to our RESTful
    web service; therefore, at this point, we invoke the `put()` method of our `Invocation.Builder`
    implementation. The first parameter of the `put()` method is an instance of `javax.ws.rs.client.Entity`.
    We can create an instance of `javax.ws.rs.client.Entity` on the fly by invoking
    the static `entity()` method on the `Entity` class. The first parameter for this
    method is the object we wish to pass to our RESTful web service and the second
    parameter is the String representation of the MIME type of the data we will be
    passing to the RESTful web service. The second parameter of the `put()` method
    is the type of response the client expects from the service. After we invoke the
    `put()` method, an `HTTP PUT` request is sent to our RESTful web service and the
    method we decorated with the `@Put` annotation (`createCustomer()` in our example)
    is invoked. There are similar `get()`, `post()`, and `delete()` methods we can
    invoke to send the corresponding HTTP requests to our RESTful web service.
  prefs: []
  type: TYPE_NORMAL
- en: Working with query and path parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In our previous examples, we have been working with a RESTful web service to
    manage a single `customer` object. In real life, this would obviously not be very
    helpful. The common case is to develop a RESTful web service to handle a collection
    of objects (customers, in our example). To determine which specific object in
    the collection we are working with, we can pass parameters to our RESTful web
    services. There are two types of parameters we can use: query and path.'
  prefs: []
  type: TYPE_NORMAL
- en: Query parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can add parameters to methods that will handle HTTP requests in our web service.
    Parameters decorated with the `@QueryParam` annotation will be retrieved from
    the request URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example illustrates how to use query parameters in our JAX-RS
    RESTful web services:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Notice that all we had to do was decorate the parameters with the `@QueryParam`
    annotation. This annotation allows JAX-RS to retrieve any query parameters matching
    the value of the annotation and assign its value to the parameter variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can add a parameter to the web service''s URL just like we pass parameters
    to any URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Sending query parameters via the JAX-RS client API
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The JAX-RS client API provides an easy and straightforward way of sending query
    parameters to RESTful web services. The following example illustrates how to do
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, all we need to do to pass a parameter is invoke the `queryParam()`
    method on the instance of `javax.ws.rs.client.WebTarget` returned by invoking
    the `target()` method on our `Client` instance. The first argument to this method
    is the parameter name and it must match the value of the `@QueryParam` annotation
    in the web service. The second parameter is the value that we need to pass to
    the web service. If our web service accepts multiple parameters, we can chain
    `queryParam()` method invocations, using one for each parameter that our RESTful
    web service expects.
  prefs: []
  type: TYPE_NORMAL
- en: Path parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another way we can pass parameters to our RESTful web services is via path
    parameters. The following example illustrates how to develop a JAX-RS RESTful
    web service that accepts path parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Any method that accepts a path parameter must be decorated with the `@Path`
    annotation. The `value` attribute of this annotation must be formatted as `"{paramName}/"`,
    where `paramName` is the parameter the method expects to receive. Additionally,
    method parameters must be decorated with the `@PathParam` annotation. The value
    of the `@PathParam` annotation must match the parameter name declared in the `@Path`
    annotation for the method.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can pass path parameters from the command line by adjusting our web service''s
    URI as appropriate; for example, to pass an `"id"` parameter of `1` to the `getCustomer()`
    method (which handles `HTTP GET` requests), we could do it from the command line
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'This returns the expected output of an XML representation of the `Customer`
    object returned by the `getCustomer()` method, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Sending path parameters via the JAX-RS Client API
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Sending path parameters to a web service via the JAX-RS client API is easy
    and straightforward; all we need to do is add a couple of method invocations to
    specify the path parameter and its value. The following example illustrates how
    to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we invoke the `path()` method on the instance of `WebTarget`
    returned by `client.target()`. This method appends the specified path to our `WebTarget`
    instance; the value of this method must match the value of the `@Path` annotation
    in our RESTful web service.
  prefs: []
  type: TYPE_NORMAL
- en: After invoking the `path()` method on our `WebTarget` instance, we need to invoke
    `resolveTemplate()`; the first parameter for this method is the name of the parameter
    (without the curly braces) and the second parameter is the value we wish to pass
    as a parameter to our RESTful web service.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we need to pass more than one parameter to one of our web services, we simply
    need to use the following format for the `@Path` parameter at the method level:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Then annotate the corresponding method arguments with the `@PathParam` annotation,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The web service can then be invoked by modifying the web service''s URI to
    pass the parameters in the order specified in the `@Path` annotation. For example,
    the following URI would pass the values `1` and `2` for `paramName1` and `paramName2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost:8080/contextroot/resources/customer/1/2`'
  prefs: []
  type: TYPE_NORMAL
- en: The previous URI will work both from the command line and through a web service
    client we have developed with the JAX-RS client API.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed how to develop RESTful web services using JAX-RS,
    a new addition to the Java EE specification.
  prefs: []
  type: TYPE_NORMAL
- en: We covered how to develop a RESTful web service by adding a few simple annotations
    to our code. We also explained how to automatically convert data between Java
    and XML by taking advantage of the Java API for XML Binding (JAXB).
  prefs: []
  type: TYPE_NORMAL
- en: We also discussed how to develop RESTful web service clients via the JAX-RS
    client API
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we covered how to pass parameters to our RESTful web services via the
    `@PathParam` and `@QueryParam` annotations.
  prefs: []
  type: TYPE_NORMAL
