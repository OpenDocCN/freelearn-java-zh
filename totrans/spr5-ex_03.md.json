["```java\ndocker pull mongo:3.4.10\n```", "```java\ndocker network create cms-application\n```", "```java\ndocker run -d --name mongodb --net cms-application -p 27017:27017 mongo:3.4.10\n```", "```java\ndocker pull postgres:9.6.6-alpine\n```", "```java\ndocker run -d --name postgres --net cms-application -p 5432:5432 -e POSTGRES_PASSWORD=cms@springfive\npostgres:9.6.6-alpine\n```", "```java\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-data-jpa</artifactId>\n</dependency>\n\n<dependency>\n  <groupId>org.postgresql</groupId>\n  <artifactId>postgresql</artifactId>\n  <version>42.1.4</version>\n</dependency>\n```", "```java\nspring:\n datasource:\n url: jdbc:postgresql://localhost:5432/postgres\n    username: postgres\n    password: cms@springfive\n    driver-class-name: org.postgresql.Driver\n  jpa:\n    show-sql: true\n    generate-ddl: true\n```", "```java\npackage springfive.cms.domain.models;\n\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\nimport lombok.Data;\nimport org.hibernate.annotations.GenericGenerator;\n\n@Data\n@Entity\n@Table(name = \"category\")\npublic class Category {\n\n  @Id\n  @GeneratedValue(generator = \"system-uuid\")\n @GenericGenerator(name = \"system-uuid\", strategy = \"uuid2\")\n  String id;\n\n  String name;\n\n}\n```", "```java\npackage springfive.cms.domain.repository;\n\nimport java.util.List;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport springfive.cms.domain.models.Category;\n\npublic interface CategoryRepository extends JpaRepository<Category, String> {\n\n  List<Category> findByName(String name);\n\n  List<Category> findByNameIgnoreCaseStartingWith(String name);\n\n}\n```", "```java\npackage springfive.cms.domain.service;\n\nimport java.util.List;\nimport java.util.Optional;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport springfive.cms.domain.exceptions.CategoryNotFoundException;\nimport springfive.cms.domain.models.Category;\nimport springfive.cms.domain.repository.CategoryRepository;\nimport springfive.cms.domain.vo.CategoryRequest;\n\n@Service\n@Transactional(readOnly = true)\npublic class CategoryService {\n\n  private final CategoryRepository categoryRepository;\n\n  public CategoryService(CategoryRepository categoryRepository) {\n    this.categoryRepository = categoryRepository;\n  }\n\n  @Transactional\n  public Category update(Category category) {\n    return this.categoryRepository.save(category);\n  }\n\n  @Transactional\n  public Category create(CategoryRequest request) {\n    Category category = new Category();\n    category.setName(request.getName());\n    return this.categoryRepository.save(category);\n  }\n\n  @Transactional\n  public void delete(String id) {\n    final Optional<Category> category = this.categoryRepository.findById(id);\n    category.ifPresent(this.categoryRepository::delete);\n  }\n\n  public List<Category> findAll() {\n    return this.categoryRepository.findAll();\n  }\n\n  public List<Category> findByName(String name) {\n    return this.categoryRepository.findByName(name);\n  }\n\n  public List<Category> findByNameStartingWith(String name) {\n    return this.categoryRepository.findByNameIgnoreCaseStartingWith(name);\n  }\n\n  public Category findOne(String id) {\n    final Optional<Category> category = this.categoryRepository.findById(id);\n    if (category.isPresent()) {\n      return category.get();\n    } else {\n      throw new CategoryNotFoundException(id);\n    }\n  }\n\n}\n```", "```java\nsudo apt-get install pgadmin3 -y\n```", "```java\nselect * from category;\n```", "```java\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-data-jpa</artifactId>\n</dependency>\n\n<dependency>\n  <groupId>org.postgresql</groupId>\n  <artifactId>postgresql</artifactId>\n  <version>42.1.4</version>\n</dependency>\n```", "```java\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-data-mongodb-reactive</artifactId>\n</dependency>\n```", "```java\npackage springfive.cms.domain.models;\n\nimport lombok.Data;\nimport org.springframework.data.annotation.Id;\nimport org.springframework.data.mongodb.core.mapping.Document;\n\n@Data\n@Document(collection = \"category\")\npublic class Category {\n\n  @Id\n  String id;\n\n  String name;\n\n}\n```", "```java\nspring:\n  data:\n    mongodb:\n      database: cms\n      host: localhost\n      port: 27017\n```", "```java\npackage springfive.cms.domain.repository;\n\nimport org.springframework.data.mongodb.repository.MongoRepository;\nimport springfive.cms.domain.models.Category;\n\npublic interface CategoryRepository extends MongoRepository<Category,String> {}\n```", "```java\ndocker run -d --link mongodb:mongo--net cms-application -p 8081:8081 mongo-express\n```", "```java\n<plugin>\n   <groupId>io.fabric8</groupId>\n   <artifactId>docker-maven-plugin</artifactId>\n   <version>0.21.0</version>\n   <configuration>\n      <images>\n         <image>\n            <name>springfivebyexample/${project.build.finalName}</name> \n            <build>\n               <from>openjdk:latest</from>\n               <entryPoint>java -Dspring.profiles.active=container -jar /application/${project.build.finalName}.jar</entryPoint>\n               <assembly>\n                  <basedir>/application</basedir>\n                  <descriptorRef>artifact</descriptorRef>\n                  <inline>\n                     <id>assembly</id>\n                     <files>\n                        <file>\n                           <source>target/${project.build.finalName}.jar</source>\n                        </file>\n                     </files>\n                  </inline>\n               </assembly>\n               <tags>\n                  <tag>latest</tag>\n               </tags>\n               <ports>\n                  <port>8080</port>\n               </ports>\n            </build>\n            <run>\n               <namingStrategy>alias</namingStrategy>\n            </run>\n            <alias>${project.build.finalName}</alias>\n         </image>\n      </images>\n   </configuration>\n</plugin>\n```", "```java\n<build>\n  <finalName>cms</finalName>\n  ....\n</build>\n```", "```java\nmvn clean install docker:build\n```", "```java\ndocker images\n```", "```java\ndocker push springfivebyexample/cms:latest\n```", "```java\nspring:\n  data:\n    mongodb:\n      database: cms\n      host: mongodb\n      port: 27017\n```", "```java\ndocker run -d --name cms --link mongodb:mongodb --net cms-application -p 8080:8080 springfivebyexample/cms:latest\n```", "```java\n/************************************************************************\n * Licensed under Public Domain (CC0)                                    *\n *                                                                       *\n * To the extent possible under law, the person who associated CC0 with  *\n * this code has waived all copyright and related or neighboring         *\n * rights to this code.                                                  *\n *                                                                       *\n * You should have received a copy of the CC0 legalcode along with this  *\n * work. If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.*\n ************************************************************************/\n\npackage org.reactivestreams;\n\n/**\n * A {@link Publisher} is a provider of a potentially unbounded number of sequenced elements, publishing them according to\n * the demand received from its {@link Subscriber}(s).\n * <p>\n * A {@link Publisher} can serve multiple {@link Subscriber}s subscribed {@link #subscribe(Subscriber)} dynamically\n * at various points in time.\n *\n * @param <T> the type of element signaled.\n */\npublic interface Publisher<T> {\n\n    public void subscribe(Subscriber<? super T> s);\n\n}\n```", "```java\n/************************************************************************\n * Licensed under Public Domain (CC0)                                    *\n *                                                                       *\n * To the extent possible under law, the person who associated CC0 with  *\n * this code has waived all copyright and related or neighboring         *\n * rights to this code.                                                  *\n *                                                                       *\n * You should have received a copy of the CC0 legalcode along with this  *\n * work. If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.*\n ************************************************************************/\n\npackage org.reactivestreams;\n\n/**\n * Will receive call to {@link #onSubscribe(Subscription)} once after passing an instance of {@link Subscriber} to {@link Publisher#subscribe(Subscriber)}.\n * <p>\n * No further notifications will be received until {@link Subscription#request(long)} is called.\n * <p>\n * After signaling demand:\n * <ul>\n * <li>One or more invocations of {@link #onNext(Object)} up to the maximum number defined by {@link Subscription#request(long)}</li>\n * <li>Single invocation of {@link #onError(Throwable)} or {@link Subscriber#onComplete()} which signals a terminal state after which no further events will be sent.\n * </ul>\n * <p>\n * Demand can be signaled via {@link Subscription#request(long)} whenever the {@link Subscriber} instance is capable of handling more.\n *\n * @param <T> the type of element signaled.\n */\npublic interface Subscriber<T> {\n\n    public void onSubscribe(Subscription s);\n\n    public void onNext(T t);\n\n    public void onComplete();\n}\n```", "```java\n@Test\npublic void coldBehavior(){\n  Category sports = new Category();\n  sports.setName(\"sports\");\n  Category music = new Category();\n  sports.setName(\"music\");\n  Flux.just(sports,music)\n      .doOnNext(System.out::println);\n}\n```", "```java\n @Test\n  public void coldBehaviorWithSubscribe(){\n    Category sports = new Category();\n    sports.setId(UUID.randomUUID().toString());\n    sports.setName(\"sports\");\n    Category music = new Category();\n    music.setId(UUID.randomUUID().toString());\n    music.setName(\"music\");\n    Flux.just(sports,music)\n        .doOnNext(System.out::println)\n        .subscribe();\n  }\n```", "```java\n@Test\npublic void testHotPublisher(){\n  UnicastProcessor<String> hotSource = UnicastProcessor.create();\n  Flux<Category> hotPublisher = hotSource.publish()\n      .autoConnect().map((String t) -> Category.builder().name(t).build());\n  hotPublisher.subscribe(category -> System.out.println(\"Subscriber 1: \"+ category.getName()));\n  hotSource.onNext(\"sports\");\n  hotSource.onNext(\"cars\");\n  hotPublisher.subscribe(category -> System.out.println(\"Subscriber 2: \"+category.getName()));\n  hotSource.onNext(\"games\");\n  hotSource.onNext(\"electronics\");\n  hotSource.onComplete();\n}\n```", "```java\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-data-mongodb-reactive</artifactId>\n</dependency>\n```", "```java\npackage springfive.cms.domain.repository;\n\nimport org.springframework.data.mongodb.repository.ReactiveMongoRepository;\nimport springfive.cms.domain.models.Category;\n\npublic interface CategoryRepository extends ReactiveMongoRepository<Category,String> {\n}\n```", "```java\npackage springfive.cms.domain.service;\n\nimport org.springframework.stereotype.Service;\nimport reactor.core.publisher.Flux;\nimport reactor.core.publisher.Mono;\nimport springfive.cms.domain.models.Category;\nimport springfive.cms.domain.repository.CategoryRepository;\nimport springfive.cms.domain.vo.CategoryRequest;\n\n@Service\npublic class CategoryService {\n\n  private final CategoryRepository categoryRepository;\n\n  public CategoryService(CategoryRepository categoryRepository) {\n    this.categoryRepository = categoryRepository;\n  }\n\n  public Mono<Category> update(String id,CategoryRequest category){\n    return this.categoryRepository.findById(id).flatMap(categoryDatabase -> {\n      categoryDatabase.setName(category.getName());\n      return this.categoryRepository.save(categoryDatabase);\n    });\n  }\n\n  public Mono<Category> create(CategoryRequest request){\n    Category category = new Category();\n    category.setName(request.getName());\n    return this.categoryRepository.save(category);\n  }\n\n  public void delete(String id){\n    this.categoryRepository.deleteById(id);\n  }\n\n  public Flux<Category> findAll(){\n    return this.categoryRepository.findAll();\n  }\n\n  public Mono<Category> findOne(String id){\n    return this.categoryRepository.findById(id);\n  }\n\n}\n```", "```java\n<dependency>\n  <groupId>io.springfox</groupId>\n  <artifactId>springfox-swagger2</artifactId>\n  <version>2.7.0</version>\n</dependency>\n\n<dependency>\n  <groupId>io.springfox</groupId>\n  <artifactId>springfox-swagger-ui</artifactId>\n\n  <version>2.7.0</version>\n</dependency>\n```", "```java\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n```", "```java\n<dependency>\n  <groupId>io.netty</groupId>\n  <artifactId>netty-transport-native-epoll</artifactId>\n</dependency>\n\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-webflux</artifactId>\n</dependency>\n```", "```java\npackage springfive.cms.domain.resources;\n\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.PutMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseStatus;\nimport org.springframework.web.bind.annotation.RestController;\nimport reactor.core.publisher.Flux;\nimport reactor.core.publisher.Mono;\nimport springfive.cms.domain.models.Category;\nimport springfive.cms.domain.service.CategoryService;\nimport springfive.cms.domain.vo.CategoryRequest;\n\n@RestController\n@RequestMapping(\"/api/category\")\npublic class CategoryResource {\n\n  private final CategoryService categoryService;\n\n  public CategoryResource(CategoryService categoryService) {\n    this.categoryService = categoryService;\n  }\n\n  @GetMapping(value = \"/{id}\")\n  public ResponseEntity<Mono<Category>> findOne(@PathVariable(\"id\") String id){\n    return ResponseEntity.ok(this.categoryService.findOne(id));\n  }\n\n  @GetMapping\n  public ResponseEntity<Flux<Category>> findAll(){\n    return ResponseEntity.ok(this.categoryService.findAll());\n  }\n\n  @PostMapping\n  public ResponseEntity<Mono<Category>> newCategory(@RequestBody CategoryRequest category){\n    return new ResponseEntity<>(this.categoryService.create(category), HttpStatus.CREATED);\n  }\n\n  @DeleteMapping(\"/{id}\")\n  @ResponseStatus(HttpStatus.NO_CONTENT)\n  public void removeCategory(@PathVariable(\"id\") String id){\n    this.categoryService.delete(id);\n  }\n\n  @PutMapping(\"/{id}\")\n  public ResponseEntity<Mono<Category>> updateCategory(@PathVariable(\"id\") String id,CategoryRequest category){\n    return new ResponseEntity<>(this.categoryService.update(id,category), HttpStatus.OK);\n  }\n\n}\n```", "```java\ncurl -H \"Content-Type: application/json\" -X POST -d '{\"name\":\"reactive\"}' http://localhost:8080/api/category\n```"]