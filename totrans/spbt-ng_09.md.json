["```java\n    public class JavaTest extends TestCase {\n    ```", "```java\n       protected int value1, value2;\n    ```", "```java\n       // will run before testSubtract and testMultiply\n    ```", "```java\n       protected void setUp(){\n    ```", "```java\n          value1 = 23;\n    ```", "```java\n          value2 = 10;\n    ```", "```java\n       }\n    ```", "```java\n       public void testSubtract(){\n    ```", "```java\n          double result = value1 - value2;\n    ```", "```java\n          assertTrue(result == 13);\n    ```", "```java\n       }\n    ```", "```java\n       public void testMultiply(){\n    ```", "```java\n          double result = value1 * value2;\n    ```", "```java\n          assertTrue(result == 230);\n    ```", "```java\n       }}\n    ```", "```java\n    //JUnit Suite Test\n    ```", "```java\n    @RunWith(Suite.class)\n    ```", "```java\n    @Suite.SuiteClasses({\n    ```", "```java\n       TestOne.class, TestTwo.class\n    ```", "```java\n    });\n    ```", "```java\n    public class JunitTestSuite {\n    ```", "```java\n    }\n    ```", "```java\n    public class TestOne {\n    ```", "```java\n       int x = 1;\n    ```", "```java\n       int y = 2;\n    ```", "```java\n       @Test\n    ```", "```java\n       public void TestOne() {\n    ```", "```java\n          assertEquals(x + y, 3);\n    ```", "```java\n       }\n    ```", "```java\n    }\n    ```", "```java\n    public class TestTwo {\n    ```", "```java\n       int x = 1;\n    ```", "```java\n       int y = 2;\n    ```", "```java\n       @Test\n    ```", "```java\n       public void TestTwo() {\n    ```", "```java\n          assertEquals(y - x, 1);\n    ```", "```java\n       }\n    ```", "```java\n    }\n    ```", "```java\n    public class JUnitTestRunner {\n    ```", "```java\n       public static void main(String[] args) {\n    ```", "```java\n          Result result =\n    ```", "```java\n            JUnitCore.runClasses(TestJunit.class);\n    ```", "```java\n          for (Failure failure : result.getFailures()) {\n    ```", "```java\n             System.out.println(failure.toString());\n    ```", "```java\n          }\n    ```", "```java\n          System.out.println(result.wasSuccessful());\n    ```", "```java\n       }\n    ```", "```java\n    }\n    ```", "```java\npublic class JunitAnnotationSequence {\n   //execute once before all test\n   @BeforeClass\n   public static void beforeClass() {\n      System.out.println(\"beforeClass()\");\n   }\n   //execute once after all test\n   @AfterClass\n   public static void  afterClass() {\n      System.out.println(\"afterClass()\");\n   }\n   //execute before each test\n   @Before\n   public void before() {\n      System.out.println(\"before()\");\n   }\n   //execute after each test\n   @After\n   public void after() {\n      System.out.println(\"after()\");\n   }\n   @Test\n   public void testMethod1() {\n      System.out.println(\"testMethod1()\");\n   }\n   @Test\n   public void testMethod2() {\n      System.out.println(\"testMethod2();\");\n   }\n}\n```", "```java\nbeforeClass()\nbefore()\ntestMethod1()\nafter()\nbefore()\ntestMethod2()\nafter()\nafterClass()\n```", "```java\n    Assert.assertTrue(condition)\n    ```", "```java\n    Assertions.assertThat(condition).isTrue()\n    ```", "```java\n    Assertions.assertThat(4 > 3).isTrue()\n    ```", "```java\n    Assertions.assertThat(11 > 100).isFalse()\n    ```", "```java\n    Assertions.assertThat('a').isLowerCase();\n    ```", "```java\n    Assertions.assertThat('a').isUpperCase();\n    ```", "```java\n    Assertions.assertThat('a').isEqualTo('a');\n    ```", "```java\n    Assertions.assertThat('a').isEqualTo('b');\n    ```", "```java\n    Assertions.assertThat('a').inUniCode();\n    ```", "```java\n    Interface Hero {}\n    ```", "```java\n    class Thor implements Hero {}\n    ```", "```java\n    Assertions.assertThat(Thor.class).isNotInterface()\n    ```", "```java\n    Interface Hero {}\n    ```", "```java\n    class Thor implements Hero {}\n    ```", "```java\n    Assertions.assertThat(Hero.class).isInterface()\n    ```", "```java\n    public class Hero {}\n    ```", "```java\n    protected class AntiHero {}\n    ```", "```java\n    Assertions.assertThat(Hero.class).isPublic()\n    ```", "```java\n    public class Hero {}\n    ```", "```java\n    protected class AntiHero {}\n    ```", "```java\n    Assertions.assertThat(Hero.class).isNotPublic()\n    ```", "```java\n    List test = List.asList(\"Thor\", \"Hulk\",\n    ```", "```java\n                            \"Dr. Strange\");\n    ```", "```java\n    assertThat(test).contains(\"Thor\");\n    ```", "```java\n    List test = new List();\n    ```", "```java\n    assertThat(test).isEmpty();\n    ```", "```java\n    List test = List.asList(\"Thor\", \"Hulk\",\n    ```", "```java\n                            \"Dr. Strange\");\n    ```", "```java\n    assertThat(test).isNotEmpty ();\n    ```", "```java\n    List test = List.asList(\"Thor\", \"Hulk\",\n    ```", "```java\n                            \"Dr. Strange\");\n    ```", "```java\n    assertThat(test).hasSize(3);\n    ```", "```java\n    File file = File.createTempFile(\"test\", \"txt\");\n    ```", "```java\n    assertThat(tmpFile).exists();\n    ```", "```java\n    File file = File.createTempFile(\"test\", \"txt\");\n    ```", "```java\n    assertThat(tmpFile).isFile();\n    ```", "```java\n    File file = File.createTempFile(\"test\", \"txt\");\n    ```", "```java\n    assertThat(tmpFile).canRead();\n    ```", "```java\n    File file = File.createTempFile(\"test\", \"txt\");\n    ```", "```java\n    assertThat(tmpFile).canWrite();\n    ```", "```java\n    Map<name, Hero> heroes = new HashMap<>();\n    ```", "```java\n    Heroes.put(stark, iron_man);\n    ```", "```java\n    Heroes.put(rogers, captain_america);\n    ```", "```java\n    Heroes.put(parker, spider_man);\n    ```", "```java\n    assertThat(heroes).contains(entry(stark, iron_man),\n    ```", "```java\n      entry(rogers, captain_america));\n    ```", "```java\n    Map<name, Hero> heroes = new HashMap<>();\n    ```", "```java\n    Heroes.put(stark, iron_man);\n    ```", "```java\n    Heroes.put(rogers, captain_america);\n    ```", "```java\n    Heroes.put(parker, spider_man);\n    ```", "```java\n    assertThat(heroes).contains(entry(stark, iron_man), entry(odinson, thor));\n    ```", "```java\n    Map<name, Hero> heroes = new HashMap<>();\n    ```", "```java\n    Heroes.put(stark, iron_man);\n    ```", "```java\n    Heroes.put(rogers, captain_america);\n    ```", "```java\n    Heroes.put(parker, spider_man);\n    ```", "```java\n    assertThat(heroes).hasSize(3);\n    ```", "```java\n    Map<name, Hero> heroes = new HashMap<>();\n    ```", "```java\n    assertThat(heroes).isEmpty();\n    ```", "```java\n    Map<name, Hero> heroes = new HashMap<>();\n    ```", "```java\n    Heroes.put(stark, iron_man);\n    ```", "```java\n    Heroes.put(rogers, captain_america);\n    ```", "```java\n    Heroes.put(parker, spider_man);\n    ```", "```java\n    assertThat(heroes).isNotEmpty();\n    ```", "```java\n<dependency>\n<groupId>com.h2database</groupId> <artifactId>h2</artifactId> <scope>runtime</scope>\n</dependency>\n```", "```java\nspring.datasource.url=jdbc:h2://mem:testdb;DB_CLOSE_DELAY=-1\nspring.datasource.username={username}\nspring.datasource.password={password}\nspring.datasource.driver-class-name=org.h2.Driver\nspring.jpa.hibernate.ddl-auto=create-drop\nspring.jpa.show-sql=true\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect\nspring.jpa.properties.hibernate.format_sql=true\n```", "```java\n@DataJpaTest\npublic class AntiHeroH2ServiceTest {\n    @Autowired\n    private AntiHeroRepository repo;\n    private AntiHeroService service;\n}\n```", "```java\n@BeforeEach\npublic void setup() {\n    service = new AntiHeroService(repo);\n}\n```", "```java\n@Test\npublic void shouldFindAllAntiHero() {\n    AntiHeroEntity antiHero = new AntiHeroEntity();\n    antiHero.setFirstName(\"Eddie\");\n    antiHero.setLastName(\"Brock\");\n    antiHero.setHouse(\"MCU\");\n    service.addAntiHero(antiHero);\n    Iterable<AntiHeroEntity> antiHeroList =\n      service.findAllAntiHeroes();\n    AntiHeroEntity savedAntiHero =\n      antiHeroList.iterator().next();\n    assertThat(savedAntiHero).isNotNull();\n}\n```", "```java\n@Test\npublic void shouldAddAntiHero() {\n    AntiHeroEntity antiHero = new AntiHeroEntity();\n    antiHero.setFirstName(\"Eddie\");\n    antiHero.setLastName(\"Brock\");\n    antiHero.setHouse(\"MCU\");\n    service.addAntiHero(antiHero);\n    Iterable<AntiHeroEntity> antiHeroList =\n      service.findAllAntiHeroes();\n    AntiHeroEntity savedAntiHero =\n      antiHeroList.iterator().next();\n    assertThat(antiHero).isEqualTo(savedAntiHero);\n}\n```", "```java\n@Test\npublic void shouldUpdateAntiHero() {\n    AntiHeroEntity antiHero = new AntiHeroEntity();\n    antiHero.setFirstName(\"Eddie\");\n    antiHero.setLastName(\"Brock\");\n    antiHero.setHouse(\"MCU\");\n    AntiHeroEntity savedAntiHero  =\n      service.addAntiHero(antiHero);\n    savedAntiHero.setHouse(\"San Francisco\");\n    service.updateAntiHero(savedAntiHero.getId(),\n                           savedAntiHero);\n    AntiHeroEntity foundAntiHero =\n      service.findAntiHeroById(savedAntiHero.getId());\n    assertThat(foundAntiHero.getHouse()).isEqualTo(\n      \"San Francisco\");\n}\n```", "```java\n@Test\npublic void shouldDeleteAntiHero() {\n    assertThrows(NotFoundException.class, new Executable() {\n        @Override\n        public void execute() throws Throwable {\n            AntiHeroEntity savedAntiHero  =\n              service.addAntiHero(antiHero);\n            service.removeAntiHeroById(\n              savedAntiHero.getId());\n            AntiHeroEntity foundAntiHero =\n              service.findAntiHeroById(\n                savedAntiHero.getId());\n            assertThat(foundAntiHero).isNull();\n        }\n    });\n}\n```", "```java\n@DataJpaTest\nclass UserRepositoryTest {\n    @Autowired\n    private UserRepository underTest;\n}\n```", "```java\n@Test\nvoid itShouldCheckWhenUserEmailExists() {\n    // give\n    String email = \"seiji@gmail.com\";\n    UserEntity user = new UserEntity(email, \"21398732478\");\n    underTest.save(user);\n    // when\n    boolean expected = underTest.selectExistsEmail(email);\n    // then\n    assertThat(expected).isTrue();\n}\n```", "```java\n@Test\nvoid itShouldFindUserWhenEmailExists() {\n    // give\n    String email = \"dennis@gmail.com\";\n    UserEntity user = new UserEntity(email, \"21398732478\");\n    underTest.save(user);\n    // when\n    UserEntity expected = underTest.findByEmail(email);\n    // then\n    assertThat(expected).isEqualTo(user);\n}\n```", "```java\npublic class HeroTester {\n   // injects the created Mock\n   @InjectMocks\n   HeroApp heroApp = new HeroApp();\n   // Creates the mock\n   @Mock\n   HeroService heroService;\n   @Test\n   public void getHeroHouseTest(){\n      when(heroService.getHouse())).thenReturn(\n        \"San Francisco \");\n   assertThat(heroApp.getHouse()).isEqualTo(\n     \"San Francisco\");\n }\n}\n```", "```java\npublic class HeroTester {\n   // injects the created Mock\n   @InjectMocks\n   HeroApp heroApp = new HeroApp();\n   // Creates the mock\n   @Mock\n   HeroService heroService;\n   @Test\n   public void getHeroHouseTest(){\n      when(heroService.getHouse())).thenReturn(\n        \"San Francisco \");\n   assertThat(heroApp.getHouse()).isEqualTo(\n     \"San Francisco\");\n   verify(heroService).getHouse();\n }\n}\n```", "```java\npublic class HeroTester {\n   // injects the created Mock\n   @InjectMocks\n   HeroApp heroApp = new HeroApp();\n   // Creates the mock\n   @Mock\n   HeroService heroService;\n   @Test\n   public void getHeroHouseTest(){\n     // gets the values of the house\n     when(heroService.getHouse())).thenReturn(\n       \"San Francisco \");\n    // gets the value of the name\n    when(heroService.getName())).thenReturn(\"Stark\");\n   // called one time\n   assertThat(heroApp.getHouse()).isEqualTo(\n     \"San Francisco\");\n   // called two times\n   assertThat(heroApp.getName()).isEqualTo(\"Stark\");\n   assertThat(heroApp.getName()).isEqualTo(\"Stark\");\n   verify(heroService, never()).getPowers();\n   verify(heroService, times(2)).getName();\n }\n}\n```", "```java\npublic class HeroTester {\n   // injects the created Mock\n   @InjectMocks\n   HeroApp heroApp = new HeroApp();\n   // Creates the mock\n   @Mock\n   HeroService heroService;\n   @Test\n   public void getHeroHouseTest(){\n   doThrow(new RuntimeException(\"Add operation not\n           implemented\")).when(heroService.getHouse()))\n   .thenReturn(\"San Francisco \")\n  assertThat(heroApp.getHouse()).isEqualTo(\n    \"San Francisco\");\n }\n}\n```", "```java\n@ExtendWith(MockitoExtension.class)\nclass AntiHeroServiceTest {\n    @Mock\n    private AntiHeroRepository antiHeroRepository;\n    @InjectMocks\n    private AntiHeroService underTest;\n}\n```", "```java\n@Test\nvoid canAddAntiHero() {\n    // given\n    AntiHeroEntity antiHero = new AntiHeroEntity(\n            UUID.randomUUID(),\n            \"Venom\",\n            \"Lakandula\",\n            \"Tondo\",\n            \"Datu of Tondo\",\n            new SimpleDateFormat(\n              \"dd-MM-yyyy HH:mm:ss z\").format(new Date())\n    );\n    // when\n    underTest.addAntiHero(antiHero);\n    // then\n    ArgumentCaptor<AntiHeroEntity>\n    antiHeroDtoArgumentCaptor =\n      ArgumentCaptor.forClass(\n            AntiHeroEntity.class\n    );\n    verify(antiHeroRepository).save(\n      antiHeroDtoArgumentCaptor.capture());\n    AntiHeroEntity capturedAntiHero =\n      antiHeroDtoArgumentCaptor.getValue();\n    assertThat(capturedAntiHero).isEqualTo(antiHero);\n}\n```"]