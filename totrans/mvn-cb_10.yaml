- en: Chapter 10. Java Development with Maven
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Building a JAR project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating an executable JAR
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating a JAR of the source code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating a JAR of the test classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a WAR project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building an EAR project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a pom project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running a web project with Jetty
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running a web project with Tomcat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Maven is primarily a build tool for Java projects. Java projects can generate
    different types of binaries. Typically, the output of a Java project is a JAR
    file. For web applications, Java classes combined with other type of files result
    in a WAR or EAR file as well. Maven provides plugins and lifecycle phases to generate
    various types of binary artifacts for Java projects.
  prefs: []
  type: TYPE_NORMAL
- en: Building a JAR project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The default type of artifact generated by Maven is JAR. If the `packaging` element
    is absent, or specified as `jar`, Maven considers it a JAR project. A JAR project
    combines all the source classes along with the necessary project resources to
    a single file. This JAR file can be distributed for it to be used elsewhere.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Maven is set up on your system and is verified for work. To do this, refer to
    [Chapter 1](ch01.html "Chapter 1. Getting Started"), *Getting Started*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open a simple Maven project, in our case `simple-project`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify that the type is absent or set to `jar`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following Maven command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Observe the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `package` option is part of Maven's default lifecycle. When Maven is run
    with the `package` option, it runs all the phases up to and prior to it, in order.
    Maven first compiles the project, runs the tests, and then, based on the packaging
    type, invokes the suitable plugin to package. In our case, as we specified the
    packaging as `jar`, Maven used the `jar` goal of the Maven JAR plugin to create
    a JAR artifact in the `target` folder.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Generating an executable JAR* recipe in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating an executable JAR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The JAR artifact generated by Maven works well when used as a dependency in
    another project. However, it cannot be run as an executable without manually specifying
    the main class and explicitly specifying the dependencies that the project uses
    in the classpath.
  prefs: []
  type: TYPE_NORMAL
- en: What if we want to create an executable JAR for the project? This may be useful
    when the JAR needs to be tested or the project is a simple tool that should be
    invoked without additional effort.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open a simple Maven project (`project-with-executable-jar`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following section in the `pom` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the plugin configuration to copy over the dependencies to the `target`
    folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Observe the `target` folder:![How to do it...](img/6124OS_10_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the generated JAR file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Observe the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have made the following configurations to the Maven JAR plugin in our `pom`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Added classpath**: This adds all the dependant JARs to the manifest classpath
    section'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Specified the main class**: This information is again updated in the manifest'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We also added the `copy-dependencies` goal of the Maven Dependency plugin to
    copy over the required dependencies to the folder where the executable JAR is
    generated.
  prefs: []
  type: TYPE_NORMAL
- en: When we then run the executable JAR, it uses the manifest file to determine
    the main class as well as the dependencies, loads them, and runs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us look at the manifest file generated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/6124OS_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Evidently, for this to work, the executable JAR should be accompanied by the
    dependencies that it uses. In the *Creating an assembly* recipe in [Chapter 11](ch11.html
    "Chapter 11. Advanced Maven Usage"), *Advanced Maven Usage*, we will learn how
    to create an assembly with all the dependencies, which can be distributed more
    easily.
  prefs: []
  type: TYPE_NORMAL
- en: Generating a JAR of the source code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For many projects, it is useful to generate a JAR of the source code along with
    the artifact. The source thus generated can be imported to IDEs and used for browsing
    and debugging. Typically, the artifacts of most open source projects are accompanied
    by sources and Javadocs.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open a project for which you want to generate and attach the source code (`project-with-source-code`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following plugin configuration to the `pom` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following Maven command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Observe the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Examine the `target` folder:![How to do it...](img/6124OS_10_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We added the Maven Source plugin to the `pom` file. We also configured the plugin
    to run the `jar-no-fork` goal during the package phase. The goal creates a JAR
    of the project source code and makes it available along with the project artifacts.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `jar-no-fork` goal is used to bind the goal to the build lifecycle. To
    run the plugin and create the JAR independent of the lifecycle, the `jar` goal
    can be used as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Subsequent phases (such as `install`) install the source artifact along with
    the project artifact.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'What if we want to attach the Javadoc instead of (or in addition to) sources?
    Let us do this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following plugin to the `pom` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Build the aggregator project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Observe the output:![There's more...](img/6124OS_10_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Maven runs the `jar` goal of the Maven Javadoc plugin in addition to the `jar-no-fork`
    goal of the Maven Source plugin. Both the JARs are now created, in addition to
    the project artifacts, and are now available for distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Besides sources, the test sources and test Javadocs can also be generated and
    attached, if relevant to the project.
  prefs: []
  type: TYPE_NORMAL
- en: Generating a JAR of the test classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There could be situations when you would want to use the test classes and resources
    of a project as a test dependency in another project. This is typically the case
    in multi-module projects, where a module depends on another module. There could
    be utility code in the test classes of a module that can be reused in another
    module.
  prefs: []
  type: TYPE_NORMAL
- en: One way to achieve this would be by creating a separate project to hold these
    classes. However, that is cumbersome and may be confusing as well.
  prefs: []
  type: TYPE_NORMAL
- en: Maven provides another way to achieve this.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open a project for which you want to create a test JAR (`project-with-test-jar`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following plugin configuration to the `pom` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following Maven command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Observe the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Examine the `target` folder:![How to do it...](img/6124OS_10_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We specified a `test-jar` goal to the Maven JAR plugin. This asks Maven to
    generate a JAR of test classes and resources. This JAR can be installed along
    with the project artifact. It can also be specified as a dependency in another
    project as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One thing to note though is the test JAR does not bring its transitive test-scoped
    dependencies with it if you add a dependency on this. These dependencies, if required,
    need to be specified by hand.
  prefs: []
  type: TYPE_NORMAL
- en: Building a WAR project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have been building projects that generate a JAR artifact. When it
    comes to web applications, we typically create WAR artifacts. Maven supports the
    building of WAR artifacts. The packaging type `.war` indicates to Maven that it
    is a WAR artifact. Maven automatically invokes the corresponding lifecycle bindings.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Run the following command from the command prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Observe the output:![How to do it...](img/6124OS_10_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the created `pom` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the command to build the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Observe the output:![How to do it...](img/6124OS_10_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check the `target` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We used the Maven Archetype plugin to bootstrap a simple web project. This generated
    a `pom` file along with other contents for a web application. When you examine
    the `pom` file, you will notice that the `packaging` type is set to `war`.
  prefs: []
  type: TYPE_NORMAL
- en: Maven uses this information to invoke the `war` goal of the Maven plugin to
    create a WAR of the project contents.
  prefs: []
  type: TYPE_NORMAL
- en: Also, observe that we specified the `finalName` element. Maven uses this to
    create the name of the WAR artifact. In the absence of this element, Maven uses
    the default name, which would have been `simple-webapp-1.0-SNAPSHOT.war`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Maven WAR plugin can be used in many ways. The default option creates a
    WAR file. During development, we would want to speed up things by generating the
    WAR file in exploded form. To do this, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `simple-webapp` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Examine the content of the `target` folder:![There's more...](img/6124OS_10_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Building an EAR project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Maven provides support to generate Java **EE Enterprise Archive** (**EAR**)
    files. These can be deployed in application servers such as JBoss, WebLogic, and
    WebSphere.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Run the following command from the command prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Observe the result:![How to do it...](img/6124OS_10_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Build the generated project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Observe the generated output:![How to do it...](img/6124OS_10_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `target` folder:![How to do it...](img/6124OS_10_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We used the Maven Archetype plugin to bootstrap a simple EAR project. It generated
    a multi-module project, which has an EJB module, web module, and a EAR module
    along with the aggregate pom file. When you examine the `pom` file of the EAR
    module, you will notice that the `packaging` type is set to `ear`.
  prefs: []
  type: TYPE_NORMAL
- en: Once built, Maven builds all the modules. In the EAR module, it uses the packaging
    information to invoke the `ear` goal of the Maven EAR plugin to create a EAR of
    the project contents.
  prefs: []
  type: TYPE_NORMAL
- en: Building a pom project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many reasons why you may want to make a pom file available as an artifact.
    One reason is the aggregate project. An aggregate project must have the `pom`
    packaging type. Another reason could be a pom, which can be imported as a dependency.
    Whatever the reason, Maven provides support to build a pom project.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open a simple pom project (`simple-pom-project`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Observe the `packaging` type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Build the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that only the `clean` goal is run.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Observe the output:![How to do it...](img/6124OS_10_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the default bindings for the `pom` packaging type:'
  prefs: []
  type: TYPE_NORMAL
- en: '`package: site:attach-descriptor`: This attaches a descriptor to the site report,
    if applicable'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`install: install:install`: This installs the project in the local repository'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`deploy: deploy:deploy`: This deploys the project to the remote repository'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we can see, Maven does not run any other goals for the `pom` packaging type.
    However, if it sees `module` elements, it invokes the specified Maven goals on
    all the defined modules.
  prefs: []
  type: TYPE_NORMAL
- en: Also, various configurations, including `pluginManagement` and `dependencyManagement`,
    get inherited by all of the child projects.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'What if you had a reason to compile some source files or run some tests even
    though the packaging type is `pom`? This may not be a usual scenario, but it can
    be done by explicitly invoking the relevant plugin goals in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the simple pom project (`simple-pom-project`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Observe the output:![There's more...](img/6124OS_10_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We now explicitly invoke the following goals:'
  prefs: []
  type: TYPE_NORMAL
- en: '`compiler:compile`: This compiles the source files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`compiler:testCompile`: This compiles test files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`surefire:test`: This runs tests'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jar:jar`: This creates a JAR artifact'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maven does not prevent us from doing this.
  prefs: []
  type: TYPE_NORMAL
- en: Running a web project with Jetty
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When developing web applications, it is good to have a quick way to check if
    the application deploys successfully without errors. IDEs allow users to hot-deploy
    applications. Maven provides a mechanism to quickly run the project using Jetty.
    Jetty is a popular open source application server that can be used to deploy web
    projects. The Maven Jetty plugin allows applications to be deployed to Jetty and
    runs them as part of the Maven build process.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open a simple web project (`simple-web-project`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following Maven command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Observe the result:![How to do it...](img/6124OS_10_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Access the web application from the browser by going to `http://localhost:8080`.![How
    to do it...](img/6124OS_10_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Maven Jetty plugin allows web applications to be deployed and tested using
    Jetty. The `run` goal is bound to the `package` phase. Maven runs all the phases
    prior to it. Jetty deploys the webapp from its sources; the webapp does not have
    to be built into a WAR. It looks for the relevant parts of the web application
    in the default Maven locations. Here are some instances:'
  prefs: []
  type: TYPE_NORMAL
- en: '`resources` in `src/main/webapp`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`classes` in `target/classes`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`web.xml` in `src/main/webapp/WEB-INF`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jetty uses default values to start the server.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As Jetty is not an official Maven plugin, we have explicitly specified `groupId`
    (`org.eclipse.jetty`) and `artifactId` (`jetty-maven-plugin`) instead of the short
    plugin prefix. To use the short plugin prefix, add the following in the settings
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, Maven can be invoked as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Maven Jetty plugin provides several goals and configurations to help develop
    web applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the WAR file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Jetty now builds the WAR file and then runs it:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![There''s more...](img/6124OS_10_16.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Run the exploded WAR file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Jetty now builds the WAR file, explodes it, and then runs it:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![There''s more...](img/6124OS_10_17.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'There are some other goals that can be used as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '`jetty:deploy-war`: This deploys an existing WAR file without building it'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jetty:start`: This starts the Jetty server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jetty:stop`: This stops the Jetty server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jetty:run-forked`: This runs the Jetty server in a Java virtual machine process
    different from Maven'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running a web project with Tomcat
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tomcat is a popular open source application server. The Maven Tomcat plugin
    supports the ability to build and deploy Maven projects in Tomcat. In fact, there
    are two Maven Tomcat plugins, one for Tomcat 6 and another for Tomcat 7.
  prefs: []
  type: TYPE_NORMAL
- en: Let us look at how to run a web project with Tomcat 7\. The steps will be identical
    for Tomcat 6, except that the plugin would be `tomcat6-maven-plugin` instead of
    `tomcat7-maven-plugin`, and the plugin prefix would be `tomcat6` instead of `tomcat7`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open a simple web project (`simple-web-project`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following Maven command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Observe the result:![How to do it...](img/6124OS_10_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Browse to the deployed webapp by visiting `http://localhost:8080/simple-webapp`:![How
    to do it...](img/6124OS_10_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Maven Tomcat plugin allows web applications to be deployed and tested using
    Apache Tomcat. The `run` goal is bound to the `package` phase. Maven runs all
    the phases prior to it.
  prefs: []
  type: TYPE_NORMAL
- en: Tomcat uses default values to start the server.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As this is not an official Maven plugin, we have explicitly specified the `groupId`
    (`org.apache.tomcat.maven`) and the `artifactId` (`tomcat7-maven-plugin`) instead
    of the short plugin prefix. To use the short plugin prefix, add the following
    in the settings file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Then Maven can be invoked as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Maven Tomcat7 plugin also supports goals to start and stop Tomcat, which
    can be used when running integration tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'It also supports the creation of an executable JAR using embedded Tomcat. Let
    us see how to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the web project for which you want to create an executable JAR (`project-with-executable-webapp`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following plugin and configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the JAR created in the `target` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Observe the output:![There's more...](img/6124OS_10_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What we have now is a distributable web application using embedded Tomcat.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is a bug due to which we need to use version 2.1 of the plugin rather
    than 2.2 for this to work.
  prefs: []
  type: TYPE_NORMAL
