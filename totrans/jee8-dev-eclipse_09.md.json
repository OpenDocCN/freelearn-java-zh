["```java\nInitialContext ctx = new InitialContext(); \nQueueConnectionFactory connectionFactory = (QueueConnectionFactory)initCtx.lookup(\"jndi_name_of_connection_factory\"); \n```", "```java\nQueueConnection con = connectionFactory.createQueueConnection(); \ncon.start(); \n```", "```java\nQueueSession session = con.createQueueSession(false, Session.AUTO_ACKNOWLEDGE); \n```", "```java\nQueue queue = (Queue)initCtx.lookup(\"jndi_queue_name\"); \n```", "```java\nQueueSender sender = session.createSender(queue); \n```", "```java\nTextMessage textMessage = session.createTextMessage(\"Test Message\");\n```", "```java\nsender.send(textMessage); \n```", "```java\ncon.close();\n```", "```java\n//create a new session before creating the receiver. \nQueueReceiver receiver = session.createReceiver(queue); \n```", "```java\nreceiver.setMessageListener(new MessageListener() { \n    @Override \n    public void onMessage(Message message) { \n        try { \n            String messageTxt = \n             ((TextMessage)message).getText(); \n            //process message \n        } catch (JMSException e) { \n            //handle exception \n        } \n    } \n}); \n```", "```java\nMessage message = receiver.receive(); //this blocks the thread till a message is received \n```", "```java\nMessage message = receiver.receive(timeout); // with timeout\n```", "```java\nMessage message = receiver.receiveNoWait(); //returns null if no message is available. \n```", "```java\ncon.close(); \n```", "```java\nimport java.io.Serializable; \npublic class CourseDTO implements Serializable { \n  private static final long serialVersionUID = 1L; \n  private int id; \n  private String name; \n  private int credits; \n\n  //getters and setters follow \n} \n```", "```java\nimport packt.jee.eclipse.jms.dto.CourseDTO; \n\npublic class CourseJSPBean { \n\n  private CourseDTO course = new CourseDTO(); \n\n  public void setId(int id) { \n    course.setId(id); \n  } \n  public String getName() { \n    return course.getName(); \n  } \n  public void setName(String name) { \n    course.setName(name); \n  } \n  public int getCredits() { \n    return course.getCredits(); \n  } \n  public void setCredits(int credits) { \n    course.setCredits(credits); \n  } \n  public void addCourse() { \n    //TODO: send CourseDTO object to a JMS queue \n  } \n} \n```", "```java\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" \n    pageEncoding=\"UTF-8\"%> \n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %> \n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \n \"http://www.w3.org/TR/html4/loose.dtd\"> \n<html> \n<head> \n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF- \n 8\"> \n<title>Add Course</title> \n</head> \n<body> \n  <!-- Check if form is posted --> \n  <c:if test=\"${\"POST\".equalsIgnoreCase(pageContext.request.method) \n      && pageContext.request.getParameter(\"submit\") != null}\"> \n\n    <!-- Create CourseJSPBean -->   \n    <jsp:useBean id=\"courseService\" class=\"packt.jee.eclipse.jms.jsp_beans.CourseJSPBean\" \n scope=\"page\"></jsp:useBean> \n\n    <!-- Set Bean properties with values from form submission --> \n    <jsp:setProperty property=\"name\" name=\"courseService\" \n     param=\"course_name\"/>    <jsp:setProperty property=\"credits\" name=\"courseService\" \n     param=\"course_credits\"/> \n\n    <!-- Call addCourse method of the bean --> \n    ${courseService.addCourse()} \n    <b>Course detailed are sent to a JMS Queue. It will be \n     processed later</b> \n  </c:if> \n\n  <h2>New Course:</h2> \n\n  <!-- Course data input form --> \n  <form method=\"post\"> \n    <table> \n      <tr> \n        <td>Name:</td> \n        <td> \n          <input type=\"text\" name=\"course_name\"> \n        </td> \n      </tr> \n      <tr> \n        <td>Credits:</td> \n        <td> \n          <input type=\"text\" name=\"course_credits\"> \n        </td> \n      </tr> \n      <tr> \n        <td colspan=\"2\"> \n          <button type=\"submit\" name=\"submit\">Add</button> \n        </td> \n      </tr> \n    </table> \n  </form> \n\n</body> \n</html> \n```", "```java\npackage packt.jee.eclipse.jms; \n\n//skipped imports \n\npublic class CourseQueueSender { \n  private QueueConnection connection; \n  private QueueSession session; \n  private Queue queue; \n\n  public CourseQueueSender() throws Exception { \n    //Create JMS Connection, session, and queue objects \n    InitialContext initCtx = new InitialContext(); \n    QueueConnectionFactory connectionFactory = \n     (QueueConnectionFactory)initCtx. \n          lookup(\"jms/CourseManagemenCF\"); \n    connection = connectionFactory.createQueueConnection(); \n    connection.start(); \n    session = connection.createQueueSession(false, \n     Session.AUTO_ACKNOWLEDGE); \n    queue = (Queue)initCtx.lookup(\"jms/courseManagementQueue\"); \n\n  } \n\n  public void close() { \n    if (connection != null) { \n      try { \n        connection.close(); \n      } catch (JMSException e) { \n        e.printStackTrace(); \n      } \n    } \n  } \n  @Override \n  protected void finalize() throws Throwable { \n    close(); //clean up \n    super.finalize(); \n  } \n\n  public void sendAddCourseMessage (CourseDTO course) throws \n   Exception { \n    //Send CourseDTO object to JMS Queue \n    QueueSender sender = session.createSender(queue); \n    ObjectMessage objMessage = \n     session.createObjectMessage(course); \n    sender.send(objMessage); \n  } \n} \n```", "```java\nProperties jndiProperties = new Properties(); \njndiProperties.setProperty(\"org.omg.CORBA.ORBInitialHost\", \n \"<remote_host>\"); \n//target ORB port. default is 3700 in GlassFish \njndiProperties.setProperty(\"org.omg.CORBA.ORBInitialPort\", \n \"3700\"); \n\nInitialContext ctx = new InitialContext(jndiProperties); \n```", "```java\n  public void addCourse(HttpServletRequest request) throws \n   Exception { \n    //get HTTP session \n    HttpSession session = request.getSession(true); \n\n    //look for instance of CourseQueueSender in Session \n    CourseQueueSender courseQueueSender = \n     (CourseQueueSender)session \n                        getAttribute(\"CourseQueueSender\"); \n    if (courseQueueSender == null) { \n      //Create instance of CourseQueueSender and save in Session \n      courseQueueSender = new CourseQueueSender(); \n      session.setAttribute(\"CourseQueueSender\", \n       courseQueueSender); \n    } \n\n    //TODO: perform input validation \n    if (courseQueueSender != null) { \n      try { \n        courseQueueSender.sendAddCourseMessage(course); \n      } catch (Exception e) { \n        e.printStackTrace(); \n        //TODO: log exception \n      } \n    } \n  } \n```", "```java\n<!-- Call addCourse method of the bean --> \n${courseService.addCourse(pageContext.request)} \n```", "```java\npublic class CourseQueueReceiver { \n\n  private QueueConnection connection; \n  private QueueSession session; \n  private Queue queue; \n\n  private String receiverName; \n\n  public CourseQueueReceiver(String name) throws Exception{ \n\n    //save receiver name \n    this.receiverName = name; \n\n    //look up JMS connection factory \n    InitialContext initCtx = new InitialContext(); \n    QueueConnectionFactory connectionFactory = \n (QueueConnectionFactory)initCtx.lookup(\"jms/CourseManagemenCF\"); \n\n    //create JMS connection \n    connection = connectionFactory.createQueueConnection(); \n    connection.start(); \n\n    //create JMS session \n    session = connection.createQueueSession(false, \n     Session.AUTO_ACKNOWLEDGE); \n    //look up queue \n    queue = (Queue)initCtx.lookup(\"jms/courseManagementQueue\"); \n\n    topicPublisher = new CourseTopicPublisher(); \n\n    QueueReceiver receiver = session.createReceiver(queue); \n    //register message listener \n    receiver.setMessageListener(new MessageListener() { \n\n      @Override \n      public void onMessage(Message message) { \n        //we expect ObjectMessage here; of type CourseDTO \n        //skipping validation \n        try { \n          CourseDTO course = (CourseDTO) \n           ((ObjectMessage)message).getObject();          //process addCourse action. For example, save it in the \n           database          System.out.println(\"Received addCourse message for Course name - \" + \n               course.getName() + \" in Receiver \" + receiverName); \n\n        } catch (Exception e) { \n          e.printStackTrace(); \n          //TODO: handle and log exception \n        } \n      } \n    }); \n  } \n\n  public void stop() { \n    if (connection != null) { \n      try { \n        connection.close(); \n      } catch (JMSException e) { \n        e.printStackTrace(); \n        //TODO: log exception \n      } \n    } \n  } \n}\n```", "```java\npackage packt.jee.eclipse.jms.servlet; \n\n//skipped imports \n\n@WebServlet(urlPatterns=\"/JMSReceiverInitServlet\", loadOnStartup=1) \npublic class JMSReceiverInitServlet extends HttpServlet { \n  private static final long serialVersionUID = 1L; \n\n  private CourseQueueReceiver courseQueueReceiver = null; \n\n    public JMSReceiverInitServlet() { \n        super(); \n    } \n\n    @Override \n    public void init(ServletConfig config) throws ServletException \n { \n      super.init(config); \n      try { \n      courseQueueReceiver = new CourseQueueReceiver(\"Receiver1\"); \n    } catch (Exception e) { \n      log(\"Error creating CourseQueueReceiver\", e); \n    } \n    } \n\n    @Override \n    public void destroy() { \n      if (courseQueueReceiver != null) \n        courseQueueReceiver.stop(); \n      super.destroy(); \n    } \n} \n```", "```java\n@WebServlet(urlPatterns=\"/JMSReceiverInitServlet\", loadOnStartup=1) \npublic class JMSReceiverInitServlet extends HttpServlet { \n  private CourseQueueReceiver courseQueueReceiver = null; \n  private CourseQueueReceiver courseQueueReceiver1 = null; \n\n    @Override \n    public void init(ServletConfig config) throws ServletException \n{ \n      super.init(config); \n      try { \n        //first instance of CourseQueueReceiver \n      courseQueueReceiver = new CourseQueueReceiver(\"Receiver1\"); \n      //create another instance of CourseQueueReceiver with a \n       different name \n      courseQueueReceiver1 = new CourseQueueReceiver(\"Receiver2\"); \n\n    } catch (Exception e) { \n      log(\"Error creating CourseQueueReceiver\", e); \n    } \n    } \n\n    @Override \n    public void destroy() { \n      if (courseQueueReceiver != null) \n        courseQueueReceiver.stop(); \n      if (courseQueueReceiver1 != null) \n        courseQueueReceiver1.stop(); \n      super.destroy(); \n    } \n\n    //rest of the code remains the same \n} \n```", "```java\npackage packt.jee.eclipse.jms; \n\n//skipped imports \n\npublic class CourseTopicPublisher { \n  private TopicConnection connection; \n  private TopicSession session; \n  private Topic topic; \n\n  public CourseTopicPublisher() throws Exception { \n    InitialContext initCtx = new InitialContext(); \n    TopicConnectionFactory connectionFactory = \n     (TopicConnectionFactory)initCtx. \n        lookup(\"jms/CourseManagemenCF\"); \n    connection = connectionFactory.createTopicConnection(); \n    connection.start(); \n    session = connection.createTopicSession(false, \n     Session.AUTO_ACKNOWLEDGE); \n    topic = (Topic)initCtx.lookup(\"jms/courseManagementTopic\"); \n  } \n\n  public void close() { \n    if (connection != null) { \n      try { \n        connection.close(); \n      } catch (JMSException e) { \n        e.printStackTrace();. \n      } \n    } \n  } \n\n  public void publishAddCourseMessage (CourseDTO course) throws \n   Exception { \n    TopicPublisher sender = session.createPublisher(topic); \n    ObjectMessage objMessage = \n     session.createObjectMessage(course); \n    sender.send(objMessage); \n  } \n} \n```", "```java\npublic class CourseQueueReceiver { \n\n  private CourseTopicPublisher topicPublisher; \n\n  public CourseQueueReceiver(String name) throws Exception{ \n\n    //code to lookup connection factory, create session, \n    //and look up queue remains unchanged. Skipping this code \n\n    //create topic publisher \n    topicPublisher = new CourseTopicPublisher(); \n\n    QueueReceiver receiver = session.createReceiver(queue); \n    //register message listener \n    receiver.setMessageListener(new MessageListener() { \n\n      @Override \n      public void onMessage(Message message) { \n        //we expect ObjectMessage here; of type CourseDTO \n        //Skipping validation \n        try { \n          //code to process message is unchanged. Skipping it \n\n          //publish message to topic \n          if (topicPublisher != null) \n            topicPublisher.publishAddCourseMessage(course); \n\n        } catch (Exception e) { \n          e.printStackTrace(); \n          //TODO: handle and log exception \n        } \n      } \n    }); \n  } \n\n  //remaining code is unchanged. Skipping it \n} \n```", "```java\npackage packt.jee.eclipse.jms; \n//skipping imports \npublic class CourseTopicSubscriber { \n\n  private TopicConnection connection; \n  private TopicSession session; \n  private Topic topic; \n\n  private String subscriberName; \n\n  public CourseTopicSubscriber(String name) throws Exception{ \n\n    this.subscriberName = name; \n\n    InitialContext initCtx = new InitialContext(); \n    TopicConnectionFactory connectionFactory = \n (TopicConnectionFactory)initCtx.lookup(\"jms/CourseManagemenCF\"); \n    connection = connectionFactory.createTopicConnection(); \n    connection.start(); \n    session = connection.createTopicSession(false, \n     Session.AUTO_ACKNOWLEDGE); \n    topic = (Topic)initCtx.lookup(\"jms/courseManagementTopic\"); \n\n    TopicSubscriber subscriber = session.createSubscriber(topic); \n    subscriber.setMessageListener(new MessageListener() { \n\n      @Override \n      public void onMessage(Message message) { \n        //we expect ObjectMessage here; of type CourseDTO \n        //skipping validation \n        try { \n          CourseDTO course = (CourseDTO) \n           ((ObjectMessage)message).getObject();          //process addCourse action. For example, save it in \n           database          System.out.println(\"Received addCourse notification for \n           Course name - \"              + course.getName() + \" in Subscriber \" + \n               subscriberName); \n\n        } catch (JMSException e) { \n          e.printStackTrace(); \n          //TODO: handle and log exception \n        } \n      } \n    }); \n  } \n\n  public void stop() { \n    if (connection != null) { \n      try { \n        connection.close(); \n      } catch (JMSException e) { \n        e.printStackTrace(); \n        //TODO: log exception \n      } \n    } \n  } \n} \n```", "```java\n@WebServlet(urlPatterns=\"/JMSReceiverInitServlet\", loadOnStartup=1) \npublic class JMSReceiverInitServlet extends HttpServlet { \n  private CourseQueueReceiver courseQueueReceiver = null; \n  private CourseTopicSubscriber courseTopicSubscriber = null; \n  private CourseQueueReceiver courseQueueReceiver1 = null; \n  private CourseTopicSubscriber courseTopicSubscriber1 = null; \n\n    @Override \n    public void init(ServletConfig config) throws ServletException \n { \n      super.init(config); \n      try { \n      courseQueueReceiver = new CourseQueueReceiver(\"Receiver1\"); \n      courseQueueReceiver1 = new CourseQueueReceiver(\"Receiver2\"); \n      courseTopicSubscriber = new \n       CourseTopicSubscriber(\"Subscriber1\");      courseTopicSubscriber1 = new \n       CourseTopicSubscriber(\"Subscriber2\"); \n\n    } catch (Exception e) { \n      log(\"Error creating CourseQueueReceiver\", e); \n    } \n    } \n\n    //remaining code is unchanged. Skipping it \n} \n```", "```java\n  <servlet> \n    <servlet-name>JSFServelt</servlet-name> \n    <servlet-class>javax.faces.webapp.FacesServlet</servlet-class> \n    <load-on-startup>1</load-on-startup> \n  </servlet> \n\n  <servlet-mapping> \n    <servlet-name>JSFServelt</servlet-name> \n    <url-pattern>*.xhtml</url-pattern> \n  </servlet-mapping> \n```", "```java\n<beans xmlns=\"http://java.sun.com/xml/ns/javaee\" \n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"\n    http://java.sun.com/xml/ns/javaee\n    http://java.sun.com/xml/ns/javaee/beans_1_0.xsd\">\n</beans>\n```", "```java\npackage packt.jee.eclipse.jms.jsf_bean;\n\nimport javax.enterprise.context.SessionScoped;\nimport javax.inject.Named;\n//skipped other imports \n\n@Named(\"courseMessageSender\")\n@SessionScoped\npublic class CourseManagedMsgSenderBean implements Serializable {\n\n  @Resource(name = \"jms/CourseManagementCF\")\n  private QueueConnectionFactory connectionFactory;\n  @Resource(lookup = \"jms/courseManagementQueue\")\n  private Queue queue;\n\n  QueueConnection connection;\n  QueueSession session;\n  Exception initException = null;\n\n  @PostConstruct\n  public void init() {\n    try {\n      connection = connectionFactory.createQueueConnection();\n      connection.start();\n      session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);\n    } catch (Exception e) {\n      initException = e;\n    }\n  }\n\n  @PreDestroy\n  public void cleanup() {\n    if (connection != null) {\n      try {\n        connection.close();\n      } catch (JMSException e) {\n        e.printStackTrace();\n        //TODO: log exception\n      }\n    }\n  }\n\n  public void addCourse(CourseDTO courseDTO) throws Exception {\n\n    if (initException != null)\n      throw initException;\n\n    QueueSender sender = session.createSender(queue);\n    ObjectMessage objMessage = session.createObjectMessage(courseDTO);\n    sender.send(objMessage);\n  }\n}\n```", "```java\npackage packt.jee.eclipse.jms.jsf_bean;\n\nimport javax.enterprise.context.RequestScoped;\nimport javax.inject.Inject;\nimport javax.inject.Named;\n\nimport packt.jee.eclipse.jms.dto.CourseDTO;;\n\n@Named(\"course\")\n@RequestScoped\npublic class CourseJSFBean {\n  private CourseDTO courseDTO = new CourseDTO();\n\n  @Inject\n  private CourseManagedMsgSenderBean courseMessageSender;\n\n  public String getName() {\n    return this.courseDTO.getName();\n  }\n  public void setName(String name) {\n    this.courseDTO.setName(name); \n  }\n  public int getCredits() {\n    return this.courseDTO.getCredits();\n  }\n  public void setCredits(int credits) {\n    this.courseDTO.setCredits(credits);;\n  }\n\n  public void addCourse() throws Exception {\n    //skipping validation\n    //TODO: handle exception properly and show error message\n    courseMessageSender.addCourse(courseDTO);\n  }\n}\n```", "```java\n<html  \n\n > \n\n<head> \n  <title>Add Course</title> \n</head> \n\n <body> \n  <h2>Course Details</h2> \n\n  <h:form> \n    <table> \n      <tr> \n        <td>Name:</td> \n        <td> \n          <h:inputText id=\"course_name\" value=\"#{course.name}\"/> \n        </td> \n      </tr> \n      <tr> \n        <td>Credits:</td> \n        <td> \n          <h:inputText id=\"course_credits\" \n           value=\"#{course.credits}\"/> \n        </td> \n      </tr> \n      <tr> \n        <td colspan=\"2\"> \n            <h:commandButton value=\"Submit\" \n             action=\"#{course.addCourse}\"/> \n        </td> \n      </tr> \n    </table> \n  </h:form> \n\n</body> \n\n</html> \n```", "```java\n@MessageDriven( \n    activationConfig = { \n      @ActivationConfigProperty(propertyName = \"destinationType\", \n            propertyValue = \"javax.jms.Queue\"), \n      @ActivationConfigProperty(propertyName = \"destination\", \n            propertyValue = \"CourseManagementQueue\") \n    }, \n    mappedName = \"jms/courseManagementQueue\") \npublic class CourseMDB implements MessageListener { \n\n    /** \n     * Default constructor. \n     */ \n    public CourseMDB() { \n        // TODO Auto-generated constructor stub \n    } \n\n  /** \n     * @see MessageListener#onMessage(Message) \n     */ \n    public void onMessage(Message message) { \n        System.out.println(\"addCourse message received in \n         CourseMDB\"); \n\n    } \n\n} \n```"]