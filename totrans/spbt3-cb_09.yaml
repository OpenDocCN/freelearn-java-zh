- en: '9'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Upgrading from Spring Boot 2.x to Spring Boot 3.0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most of the time invested in an application’s lifetime is related to maintenance.
    A successful application may last for years or decades. During this time, it may
    require upgrades for its evolution. You probably have an application that you
    want to evolve by taking advantage of the Spring Boot 3 features. In this chapter,
    we’ll use a sample application that I created using Spring Boot 2.6 and perform
    gradual upgrades in each recipe. The recipes in this chapter should be done in
    order, as we’ll use the outcome of one recipe as the starting point for the next.
    A couple of recipes won’t produce a working version, as there can be compilation
    errors to be fixed in the following recipes. The last recipe, *Using OpenRewrite
    for migration automation*, can be done without completing any previous recipes.
    However, it requires some of the manual actions explained in the previous recipes.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing Spring Security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting property changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrade the project to Spring Boot 3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrading Spring Data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing Actuator changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing web application changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using OpenRewrite for migration automation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we won’t need any additional tools apart from the JDK and the
    IDE, as in the previous chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that Spring Boot 3.0 requires Java 17 or a later version. To migrate
    an existing project to Spring Boot 3.0 and use Java 11, you must upgrade to Java
    17.
  prefs: []
  type: TYPE_NORMAL
- en: Before migrating to Spring Boot 3.0, I recommend that you upgrade to the latest
    Spring Boot 2 version, 2.7.x.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we’ll use a Spring Boot 2 sample and make changes to it until
    it’s finally migrated to the latest version of Spring Boot 3\. This application
    accesses a PostgreSQL database and a Cassandra database. We’ll run both servers
    using Docker. The official page for running Docker on your computer is [https://docs.docker.com/engine/install/](https://docs.docker.com/engine/install/).
    The application has some Testcontainers-based tests, so that you will need Docker
    on your computer.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run PostgreSQL on Docker, you can run the following command in your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You will need to create a database named `football`. You can do this by running
    the following PSQL command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To run Cassandra on Docker, you can run the following command in your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'All the recipes that will be demonstrated in this chapter can be found at:
    [https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook/tree/main/chapter9](https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook/tree/main/chapter9).'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will learn about preparing the application.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On each version of Spring Boot, some components are marked for deprecation,
    and normally, there is a proposal for change to avoid the deprecated components.
    As upgrading from Spring Boot 2 to Spring Boot 3 is a major change, upgrading
    to the latest Spring Boot 2 version is strongly recommended.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before migrating an application to Spring Boot 3, the following preparation
    is recommended:'
  prefs: []
  type: TYPE_NORMAL
- en: Upgrade the Spring Boot version to the latest 2.7.x available. At the time of
    writing this book, it is 2.7.18\. This will facilitate the upgrade to Spring Boot
    3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update the Java version to Java 17, the minimum supported version in Spring
    Boot 3.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Address all deprecated components.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this recipe, we’ll prepare a sample application that uses Spring 2.6 and
    Java 11\. By the end of the recipe, the application will use Spring 2.7.18, Java
    17, and all deprecated components and APIs will be addressed.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will prepare an application using Spring 2.6 and Java 11 in this recipe.
    The sample application is in the book’s GitHub repository at [https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook](https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook)
    in the `chapter9/football` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on your operating system, you may use different tools to manage the
    current JDK version. For instance, you can use SDKMAN! tool on Linux and Mac.
    You can install it by following the instructions on the project page at [https://sdkman.io/](https://sdkman.io/).
  prefs: []
  type: TYPE_NORMAL
- en: To run the application, you will need a PostgreSQL server running on your computer.
    To acquire this, follow the instructions in the *Technical* *requirements* section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s put the application at the starting line. Ready, steady, go!
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we’ll address all deprecation warnings. For instance, if you compile
    the football project by executing `mvn compile`, you will see one deprecation
    warning about the `DataSourceInitializationMode` class. If you open the documentation
    of that class at [https://docs.spring.io/spring-boot/docs/2.6.15/api/org/springframework/boot/jdbc/DataSourceInitializationMode.html](https://docs.spring.io/spring-boot/docs/2.6.15/api/org/springframework/boot/jdbc/DataSourceInitializationMode.html),
    you will see the following information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Deprecated.**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**since 2.6.0 for removal in 3.0.0 in favor** **of DatabaseInitializationMode**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can see this information directly in the editor if you use an IDE, such
    as IntelliJ or Visual Studio Code. For instance, in Visual Studio Code, you would
    see the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: "![Figure 9.1\uFEFF: Deprecation message in Visual Studio Code](img/B21646_09_1.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.1: Deprecation message in Visual Studio Code'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s replace `DataSourceInitializationMode` with `DatabaseInitializationMode`.
    This change is very straightforward, as just a simple replacement is enough. Other
    deprecation changes may require some code refactoring. Usually, the deprecated
    class documentation guides the implementation of the changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The next step will be updating the Spring Boot version to 2.7.18\. For that,
    open the `pom.xml` file and find the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That refers to the Spring Boot version in use. In the highlighted code, you
    can see that the actual version is 2.6.15\. Let’s update it to the latest version
    2 available. At the time of writing this book, it is 2.7.18.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you recompile the application, you will see some deprecation warnings related
    to Spring Security in the `SecurityConfiguration.java` file. We’ll fix those warnings
    in the *Upgrading Spring* *Security* recipe.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, update the Java version to Java 17\. You should ensure you are using the
    JDK 17:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are on Linux or Mac, you can use SDKMan!
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: On Windows, you may have to update the Java Home environment variable.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Regardless of the operating system, you can manage the Java version using the
    IDE:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For instance, in Visual Studio Code, you can follow the instructions at [https://code.visualstudio.com/docs/java/java-project#_configure-runtime-for-projects](https://code.visualstudio.com/docs/java/java-project#_configure-runtime-for-projects)
    to configure the Java runtime for your project.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In IntelliJ, you can follow the instructions at https://www.jetbrains.com/help/idea/sdk.html#manage_sdks
    for this purpose.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You should change the Java version in your project as well. For that, open
    the `pom.xml` file and look for the property `java.version`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Replace the `java.version` property with `17`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Build the application again and verify that the only deprecation warnings are
    related to Spring Security in the `SecurityConfiguration.java` file. Again, if
    there are other deprecation warnings, try to use the alternative solution proposed
    by the deprecation warning message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every time there is a new version, there can be components marked for deprecation,
    and as we saw in this recipe, usually, it’s also known in which version they will
    be removed from. It’s convenient to install the upgrades gradually and not skip
    intermediate versions. As we saw in this example, migrating all revision versions,
    such as 2.7.1, 2.7.2, and so on, is unnecessary. However, you should not skip
    minor versions, such as 2.7.x, as there can be new components marked for deprecation
    that will be removed in version 3\. Skipping the 2.7 upgrade won’t let you see
    the warning and the alternative replacement. Suddenly, you will find that the
    class you used is not found.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Spring Boot 3.0 uses Spring Framework 6.0\. If your project has explicit dependencies
    on prior versions, you will also need to upgrade them. You can find the migration
    guide for Spring Framework at [https://github.com/spring-projects/spring-framework/wiki/Upgrading-to-Spring-Framework-6.x](https://github.com/spring-projects/spring-framework/wiki/Upgrading-to-Spring-Framework-6.x).
  prefs: []
  type: TYPE_NORMAL
- en: Preparing Spring Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main change regarding security in Spring Boot 3 is the upgrading from Spring
    Security 5 to Spring Security 6\. There are many changes related to this upgrade,
    but in the recipe, we’ll focus on the most common one, which is how it’s configured.
  prefs: []
  type: TYPE_NORMAL
- en: In Spring Security 5, most of the settings were configured by extending the
    `WebSecurityConfigurerAdapter` class, and in Spring Security 6, those changes
    are applied by configuring specific beans in our application.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we’ll transform the `WebSecurityConfigurerAdapter` class into
    a configuration class that exposes the beans to apply an equivalent configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The starting point of this recipe is the outcome of the *Preparing the application*
    recipe. I prepared a working version in case you haven’t completed it yet. You
    can find it in the book’s GitHub repository at [https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook](https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook)
    in the `chapter9/recipe9-2/start` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s complete the preparation of our application by adapting the deprecated
    components related to Spring Security:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you compile the project as-is now, you will see that the `SecurityConfig`
    class contains some deprecation warnings. Let’s tackle them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `WebSecurityConfigurerAdapter` class is deprecated. Now, the application
    won’t extend any class.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `withDefaultPasswordEncoder` method is deprecated and not recommended for
    production environments. However, as the documentation states, it’s acceptable
    for demos and getting started. We won’t change it.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `SecurityConfig` class is annotated with `@EnableWebSecurity`. In addition,
    it should be annotated with `@Configuration`. It should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we’ll change the `configure` method that receives `AuthenticationManagerBuilder`
    as a parameter to create a method configuring an `InMemoryUserDetailsManager`
    bean:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we’ll replace the `configure` method that receives a `WebSecurity` with
    a method returning a `WebSecurityCustomizer` bean. It should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To complete the `SecurityConfig` class, we must replace the `configure` method
    receiving a `HttpSecurity` parameter with a method creating a `SecurityFilterChain`
    bean:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, if we execute the tests, we’ll realize that the tests related to controllers
    using the `@WebMvcTest` annotation no longer work as expected. We’ll include the
    `@Import` annotation in the `FootballControllerTest` and `SecurityControllerTest`
    classes to fix it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`FootballControllerTest`:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '`SecurityControllerTest`:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Finally, execute the tests and verify that all of them pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The main change is the deprecation of the `WebSecurityConfigurerAdapter` class.
    This class is removed in Spring Security 6 and, hence, from Spring Boot 3\. In
    this recipe, we prepared the application for a smooth security migration to upgrade
    the project to Spring Boot 3\. The new approach is to create beans for each security
    aspect we want to configure.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Security 6 introduces new methods to replace the `antMatcher` method;
    for instance, the `requestMatcher` method. To avoid more changes in this stage,
    we haven’t replaced the `antMatcher` method yet. But we’ll do that once we upgrade
    to Spring Boot 3, as it will be deprecated.
  prefs: []
  type: TYPE_NORMAL
- en: We keep using `withDefaultPasswordEncoder` in this recipe. Although it’s deprecated
    and not recommended for production environments, using it in development environments
    is acceptable. The deprecation warning is present in Spring Boot 2, and this method
    won’t be removed any time soon. Deprecation was introduced to warn about usage
    in production environments.
  prefs: []
  type: TYPE_NORMAL
- en: As the security settings are now defined as a configuration class annotated
    with `@Configuration`, importing them into our `@WebMvcTest` tests is necessary.
    The `@WebMvcTest` annotation only loads the MVC-related components, and it doesn’t
    load `SecurityConfig` by default. For that reason, importing them into our `@WebMvcTest`
    tests is necessary.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The upgrade from Spring Security 5 to Spring Security 6 includes more changes
    than the ones tackled in this recipe. You can find the full migration guide on
    the official website at [https://docs.spring.io/spring-security/reference/6.0/migration/index.html](https://docs.spring.io/spring-security/reference/6.0/migration/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: Detecting property changes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we learned in this book, one of the main tasks when developing a Spring Boot
    application is configuring its components. It’s important to note that every time
    a new component version is released, there may be changes to the properties. This
    is especially true when upgrading to a major version, such as from version 2.x
    to 3.0\. Typically, the changes are gradual. For example, a property might be
    marked as *deprecated* in one version, meaning it will be removed in a future
    version. Therefore, it’s recommended not to skip any versions when upgrading.
    For instance, if you plan to upgrade from version 2.6 to version 3.2, it’s best
    to upgrade first to version 2.7, then to 3.0, then 3.1, and finally 3.2.
  prefs: []
  type: TYPE_NORMAL
- en: To address the property changes between versions, Spring Boot provides a tool
    named Spring Boot Properties Migrator. It’s a dependency that analyzes the application
    environment during the application start-up and prints a diagnostic.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we’ll use the Spring Boot Properties Migrator in our project
    to detect the deprecated properties in the configuration file and fix them.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’ll start this recipe using the outcome of the *Preparing Spring Security*
    recipe. You can use the project I prepared as a starting point if you haven’t
    completed it yet. You can find it in the book’s GitHub repository at [https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook](https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook)
    in the `chapter9/recipe9-3/start` folder.
  prefs: []
  type: TYPE_NORMAL
- en: You will need the PostgreSQL server and Cassandra running on your computer to
    run the application. For instructions, see the *Technical requirements* section
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our application uses deprecated properties; let’s fix them with Spring Boot
    Properties Migrator!
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we’ll add the Spring Boot Properties Migrator dependency to our project.
    For that, open the `pom.xml` file and add the following dependency:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, you can run the application and see an error with the property in the
    properties file that should be migrated. For instance, I executed `mvn spring-boot:run`
    in the terminal and I received the following message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.2 – Error when executing the application with Spring Boot Properties
    Migration](img/B21646_09_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.2 – Error when executing the application with Spring Boot Properties
    Migration
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, we need to migrate the `spring.datasource.initialization-mode`
    property and use `spring.sql.init.mode` instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we’ll replace the `spring.datasource.initialization-mode` property with
    `spring.sql.init.mode`. To do this, open the `application.yml` file, find the
    `initialization-mode` property, and remove it. Then, add the `spring.sql.init.mode`
    property. The `spring` configuration should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `dataSourceInicitalizationMode` parameter of the `CustomDatasourceService`
    class references the `spring.datasource.initialization-mode` configuration property.
    We must point to the new property, `spring.sql.init.mode`. For that, replace the
    `@Value` annotation in the constructor with the new property. It should look like
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now that the changes are applied, let’s execute the application again. You can
    do it by running the `spring-boot:run` command in your terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will see that the application runs normally.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that the properties have been migrated, the last step is to remove the Spring
    Boot Properties Migration dependency. To do this, open the `pom.xml` file and
    remove the dependency you added in *step 1*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Spring Boot Properties Migration dependency first tries to map the deprecated
    properties to the new ones when possible and then prints a warning. Without direct
    mapping to a new property, it throws an error and prints the issue. In this recipe,
    we used a dependency that Spring Boot Properties Migration cannot map automatically.
    For that reason, there was an error. Once fixed, the Spring Boot Migration doesn’t
    show any additional errors.
  prefs: []
  type: TYPE_NORMAL
- en: As the Spring Boot Properties Migration performs an additional check upon application
    start-up, it can slow down the application. Removing the Spring Boot Properties
    Migration from your application is a good practice once the deprecated properties
    are fixed.
  prefs: []
  type: TYPE_NORMAL
- en: Upgrade the project to Spring Boot 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we’ll take the first steps in Spring Boot 3 by updating the
    references in our project. When we update to Spring Boot 3, we’ll see some compilation
    errors that need to be addressed; in this recipe, we’ll take the first steps toward
    fixing them.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Boot 3 depends on Jakarta EE 9 or a later version, while Spring Boot
    relies on Jakarta 7 and 8\. In Jakarta 9, all namespaces changed from `javax.*`
    to `jakarta.*`. This is probably the biggest impact that can be seen when upgrading
    to Spring Boot 3, as it requires changing many references in our projects.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we’ll finally upgrade our project to Spring Boot 3, which will
    require updating all `javax` namespace references to `jakarta`. We’ll also perform
    the latest updates to Spring Security. By the end of this recipe, the application
    won’t work yet; you must complete two recipes, *Upgrading Spring Data* and *Managing
    Actuator changes*, to make it work.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’ll use the outcome of the *Detecting property changes* recipe as the starting
    point for this recipe. You can use the version I prepared if you haven’t completed
    it yet. You can find it in the book’s GitHub repository at [https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook](https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook)
    in the `chapter9/recipe9-4/start` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’ll upgrade the application to Spring Boot 3, and we’ll see the Jakarta EE-related
    errors. Let’s fix them and start using Spring Boot 3!
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we’ll upgrade the project to use Spring Boot 3\. For that, open the
    `pom.xml` file and find the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You should replace the version property with the latest Spring Boot version,
    which, at the time of writing this book, is 3.2.4.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You will see that the project doesn’t compile, as all references to `javax.*`
    namespaces no longer work. To fix it, replace `javax` with `jakarta` in all files.
    There are a significant number of changes to make, so I recommend using the replace
    features of your favorite editor. For instance, you can use the **Search: Replace
    in files** command in Visual Studio Code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 9.3 \uFEFF: Replacing javax with jakarta in files in Visual Studio\
    \ Code](img/B21646_09_3.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.3 : Replacing javax with jakarta in files in Visual Studio Code'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you try to compile the project, you will see that there are still three
    files with compilation errors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`MatchEventEntity.java`: There are errors related to fields mapped as JSON
    in the database. This issue will be tackled in the *Upgrading Spring* *Data* recipe.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FootballConfig.java`: There are errors related to `HttpTrace`. This issue
    will be fixed in the *Managing Actuator* *changes* recipe.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SecurityConfig.java`: There are new errors related to Spring Security changes
    that we’ll fix in the following step.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To fix the issues with the `SecurityConfig` class, we need to do the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the `antMatchers` call with a `requestMatchers` call in the `webSecurityCustomizer`
    method. It should look like this:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `filterChain` method, we need to make several changes:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Replace `authorizeRequests` with `authorizeHttpRequests`.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Replace the `requestMatchers("/")` with `anyRequest()`.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Replace the `antMatchers` call with a `requestsMatchers`.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: We need to switch the call order in the previous two calls.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove the `and` call and just chain `authorizeHttpRequests` with the `httpBasic`
    call.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Jakarta EE was formerly `javax` to `jakarta`, allowing Jakarta EE to evolve
    independently from Oracle, as it keeps some Java trademarks. These changes only
    imply namespace changes, and there are no behavior changes. For that reason, the
    application works just by replacing the namespaces.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we moved from Spring Boot 2.7.18 directly to Spring Boot 3.2.4\.
    If we first moved to intermediate versions, we would see the Spring Security-related
    errors as deprecation warnings. As we know the mechanism for gradual deprecation
    and upgrades, I decided to skip the intermediate versions for brevity. I recommend
    that you perform gradual migrations in your projects. The deprecation warning
    messages can guide most of the changes. However, there’s a change that’s not very
    evident. In Spring Boot 6, the `permitAll` method is deprecated for `requestMatcher`
    and should be replaced by `anyRequest`, and this method should be called at the
    end of the chain; if you chain more matchers after, an exception is thrown during
    runtime.
  prefs: []
  type: TYPE_NORMAL
- en: Upgrading Spring Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring Boot 3 uses Hibernate 6.1 by default, while Spring Boot 2 uses Hibernate
    5\. Therefore, we need to prepare the application to match Hibernate 6.1.
  prefs: []
  type: TYPE_NORMAL
- en: Hibernate uses Jakarta EE, and that requires upgrading the `javax.*` namespaces
    to `jakarta.*`, but we already did this step in the *First step to Spring* *3.0*
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Some changes in Hibernate 6.1 are internal, but some APIs changed and should
    be upgraded in the application.
  prefs: []
  type: TYPE_NORMAL
- en: Some changes related to the configuration of Spring Data are specific to Cassandra.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we’ll make the necessary changes to align the sample application
    with Hibernate 6.1 and Cassandra.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’ll use the outcome of the *First step to Spring 3.0* recipe as the starting
    point for this recipe. You can use the version I created if you haven’t completed
    it yet. You can find it in the book’s GitHub repository at [https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook](https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook)
    in the `chapter9/recipe9-5/start` folder.
  prefs: []
  type: TYPE_NORMAL
- en: As explained in the previous recipes, the sample application uses a PostgreSQL
    server database and Cassandra, and the tests use Testcontainers. For that reason,
    you need Docker running on your computer.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s make the necessary Spring Data adjustments in our application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll start by fixing the configuration of our application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We’ll replace `PostgreSQL82Dialect` with `PostgreSQLDialect`. To do that, we’ll
    open the `application.yml` file, locate the `spring.jpa.database-platform` property,
    and then set the following value:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'spring:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'cassandra:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'keyspace-name: footballKeyspace'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'schema-action: CREATE_IF_NOT_EXISTS'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'contact-points: localhost'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'local-datacenter: datacenter1'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'session-name: cassandraSession'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'port: 9042'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Note that `cassandra` is now under `spring`. Previously, `cassandra` was under
    `spring.data`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The tests based on Testcontainers create a Cassandra container and then set
    the settings of the application context. The tests should be aligned with the
    new settings structure with `spring.cassandra` instead of `spring.data.cassandra`.
    You can apply this change by using the string replace features in your editor.
    For instance, you can use the **Search: Replace in files** feature in Visual Studio
    Code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 9.4 \uFEFF: Replacing spring.data.cassandra references in Visual Studio\
    \ Code](img/B21646_09_4.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.4 : Replacing spring.data.cassandra references in Visual Studio Code'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we’ll use the new capability in Hibernate 6 to define JSON fields for
    our entities. To do that, open the `MatchEventEntity` class and modify the annotation
    of the `details` field as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We replaced the *hypersistence utils* type to define the JSON field.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'As we no longer need the particular type to define the JSON field, you can
    remove the following dependency from the `pom.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: At this point, we want to leverage the project’s tests. However, there are some
    compilation errors related to the `httptrace` endpoint. We’ll now comment all
    the code in the `FootballConfig` class to avoid the compilation errors, and we’ll
    tackle this component in the *Managing Actuator* *changes* recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we’ll run the tests to verify that the application still works. You can
    run the tests from the IDE or just run the following Maven command in your terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will see that the tests related to the services succeed, but two tests,
    `findPlayerById` and `countPlayers`, fail. There are other tests related to the
    controllers that fail, but we’ll cover them in the *Managing web application changes*
    recipe. These tests fail due to some behavior changes in Hibernate 6\. Let’s fix
    them:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The `findPlayerById` method in the `DynamicQueriesService` class uses an ordinal
    parameter binding. The behavior of ordinal parameters was changed in Hibernate
    6\. To fix this issue, modify `findPlayerById` in the `DynamicQueriesService`
    class as follows:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: The change is subtle. In the query string, replace `?0` with `?1`; the parameter
    in the `setParameter` method is `1` instead of `0`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `countPlayers` test validates the method with the same name in the `DynamicQueriesService`
    class. To fix this test, do the following:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'First, change the `return` type of the `countPlayers` method in the `DynamicQueriesService`
    class from `BigInteger` to `Long`. It should look like this:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, update the test to match the return type with `Long`:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can rerun the services-related tests, and now they should succeed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Spring Data relies on Hibernate for most of its functionalities. In Spring Boot
    3, it uses Hibernate 6.1 by default. For that reason, most of the tasks related
    to the Spring Data upgrade are related to the Hibernate upgrade.
  prefs: []
  type: TYPE_NORMAL
- en: One of the changes related to the Hibernate upgrade is the change in the references
    from `javax.*` to `jakarta.*`. We haven’t explained that in this recipe, as it
    was already covered in the *First step to Spring 3.0* recipe; you should keep
    it in mind when upgrading to Spring Boot 3 or Hibernate 6.
  prefs: []
  type: TYPE_NORMAL
- en: In Hibernate 6, the property `spring.jpa.database-platform` no longer uses specific
    version values. For that reason, `PostgreSQL82Dialect` was deprecated and should
    be replaced with the database dialect without the version. As we use PostgreSQL
    as a relational database, we replaced `PostgreSQL82Dialect` with `PostgreSQLDialect`.
    If you use another database engine such as MySQL, you should use `MySQLDialect`
    without a version-specific dialect.
  prefs: []
  type: TYPE_NORMAL
- en: In Hibernate 6, the queries that return a `BIGINT` are now mapped to the `Long`
    type. In previous versions, they were incorrectly mapped to `BigInteger`. The
    result of the count clause is a `BIGINT`, so we need to change it in the `countPlayers`
    method. Even though the number of players in our application can be represented
    by an integer, if our tables were larger, it could cause a casting error in runtime.
  prefs: []
  type: TYPE_NORMAL
- en: Hibernate 6 changed how it binds the ordinal parameters and now uses 1-based
    ordering instead of 0-based ordering.
  prefs: []
  type: TYPE_NORMAL
- en: Hibernate 6 introduced the possibility of defining entity fields mapped as JSON
    parameters if the database supports it. Before Hibernate 6, it was necessary to
    use third-party libraries, such as Hypersistence. This excellent library developed
    by Vlad Mihalcea was handy in the previous versions for JSON field management,
    but it’s no longer necessary in Hibernate 6\. We can keep this dependency and
    upgrade it to the matching version for Hibernate 6\. You can find more information
    at [https://github.com/vladmihalcea/hypersistence-utils](https://github.com/vladmihalcea/hypersistence-utils).
  prefs: []
  type: TYPE_NORMAL
- en: There are other changes related to Spring Data that are not related to Hibernate.
    For instance, the `spring.data` prefix for the properties is now reserved for
    Spring Data; for that reason, `spring.data.cassandra` has moved to `spring.cassandra`.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we only covered the changes related to Spring Data for the features
    we used in this book. I recommend that you check the migration guide at [https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#data-access-changes](https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#data-access-changes).
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Spring Boot 3 introduced some capabilities that facilitate the usage of standard
    database technologies in our applications. Before Spring Boot 3, we could use
    alternative solutions, and it’s unnecessary to migrate them; however, it is worth
    knowing they exist. In this section, we’ll demonstrate two of them: stored procedures
    and union clauses in JQL.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use the `@Procedure` annotation instead of the `@Query` annotation.
    The `@Query` annotation must be native and use the `call` clause. For instance,
    you can modify the `getTotalPlayersWithMoreThanNMatches` method of the `PlayerRepository`
    interface as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Hibernate 6 JQL now supports the `Union` clause. For instance, we can write
    `findPlayersByMatchId` in the `MatchRepository` interface as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we covered some scenarios on the Hibernate 5 to 6 migration,
    but there are many more. If you find issues related to Hibernate in the migration
    of your projects, please take a look at the Hibernate migration guides:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hibernate 6.0 migration guide: [https://docs.jboss.org/hibernate/orm/6.0/migration-guide/migration-guide.html](https://docs.jboss.org/hibernate/orm/6.0/migration-guide/migration-guide.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Hibernate 6.1 migration guide: [https://docs.jboss.org/hibernate/orm/6.1/migration-guide/migration-guide.html](https://docs.jboss.org/hibernate/orm/6.1/migration-guide/migration-guide.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing Actuator changes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most of the Actuator changes are related to the default behavior of the exposed
    endpoints. For instance, the JMX endpoint behavior is aligned with the web endpoint
    behavior; for that reason, it only exposes the **Health** endpoint by default,
    while previously, all JMX endpoints were exposed by default. If your project relies
    on that functionality, you must expose it explicitly.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to Actuator’s default behavior, our project uses the `httptrace`
    endpoint, which changes the behavior and the required implementation. In this
    recipe, we’ll fix the `httptrace` endpoint and make the necessary configuration
    changes to keep the same behavior we had for Actuator.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start this recipe, you will need the outcome of the previous recipe, *Upgrading
    Spring Data*. In case you haven’t completed it yet, I prepared a version that
    you can find in the book’s GitHub repository at [https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook](https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook)
    in the `chapter9/recipe9-6/start` folder.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the requirements of our previous recipes, we’ll need a JMX client
    to explore the behavior of the Actuator’s JMX endpoints. We can use JConsole,
    which is part of the JDK.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We’ll first fix the `httptrace` endpoint, and then we’ll align the actuator
    to behave as in Spring Boot 2:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To fix the `httptrace` configuration, open the `application.yml` file and replace
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Replace the web endpoint `httptrace` with `httpexchanges`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Replace the `management.trace.http.enabled` with `management.httpexchanges.recording.enabled`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It should look like this:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, for the `FootballConfig` class, replace the `HttpTraceRepository` interface
    with `HttpExchangeRepository` and `InMemoryHttpTraceRepository` with `InMemoryHttpExchangeRepository`.
    Remember that we commented the contents of this class in the previous recipe to
    be able to compile the solution; now, we’ll tackle this component. The `FootballConfig`
    class should look as follows:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: We can now run the application and validate the new `httpexchanges` repository.
    To validate it, open it in your browser or execute a curl command with the address
    `http://localhost:8080/actuator/httpexchanges`. It should return the latest requests
    to our application.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next, we’ll validate whether the application exposes the same JMX endpoints
    as Spring Boot 2\. While the application is running, run the JConsole tool. For
    that, open your terminal and run `jconsole`. You will see that it shows a list
    of the Java applications running on your computer:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 9.5: JConsole process selection](img/B21646_09_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.5: JConsole process selection'
  prefs: []
  type: TYPE_NORMAL
- en: Select the application and click **Connect**. A message indicating that the
    secure connection failed may appear, suggesting that you connect insecurely. Use
    the insecure connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you open the `org.springframework.boot` namespace, only the **Health** endpoint
    appears:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.6: Default JMX endpoints exposed by Spring Boot 3](img/B21646_09_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.6: Default JMX endpoints exposed by Spring Boot 3'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before Spring Boot 3, all endpoints were enabled by default. To achieve the
    same behavior, open the `application.yml` file and set `management.endpoints.jmx.exposure.include=*`
    property. It should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'If you restart the application and connect to the application with JConsole,
    you will see that it now exposes all MBean endpoints, as in previous versions
    of Spring Boot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.7: All JMX endpoints exposed using Spring Boot 3](img/B21646_09_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.7: All JMX endpoints exposed using Spring Boot 3'
  prefs: []
  type: TYPE_NORMAL
- en: You can see the exposed endpoints in *Figure 9**.7*.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Spring Boot team changed the name of `httptrace` to avoid confusion with
    `Micrometer Tracing`. For that reason, it has been renamed to `http exchanges`.
    That change also impacted the repository supporting the implementation of the
    traces. In this example, we used an in-memory repository, which we used only for
    demonstration purposes. In a production environment, you will probably use a persistent
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: In Spring Boot 3, the JMX endpoint only exposes the **Health** endpoint to align
    with its web counterpart. Only the **Health** endpoint is exposed in the web endpoint
    in Spring Boot 3 and previous versions. Some endpoints can reveal sensitive information
    or provide unwanted access. All endpoints except the **Health** endpoint are not
    enabled to reduce the surface attack. In this recipe, we exposed all JMX endpoints.
    However, it’s recommended that you only expose the ones that are really necessary.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we covered some scenarios related to Actuator. Still, I recommend
    reviewing the Spring Boot 3 migration guide and verifying whether you use an Actuator
    feature from previous versions of Spring Boot that requires attention in Spring
    Boot 3\. You can find the guide at [https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#actuator-changes](https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#actuator-changes).
  prefs: []
  type: TYPE_NORMAL
- en: Managing web application changes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Web applications, and hence RESTful applications, as we mostly worked with
    in this book, have a few behavior changes between Spring Boot 2 and 3\. Some of
    them may impact your application. Some changes are related to internal components,
    and you won’t be affected unless your application relies on those internal components.
    The changes between Spring Boot 2 and 3 are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The `server.max-http-header-size` property is a setting that indicates the maximum
    size that the headers of the requests managed by the application may have. That
    property was managed differently depending on the embedded web server used. It
    has been deprecated in favor of `server.max-http-request-header-size,` and it’s
    managed consistently by all possible embedded web servers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The phases for graceful shutdown have changed. When an application is shut down,
    Spring Boot sends events in different phases, and the application can be subscribed
    to those events to perform custom shutdown actions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you use a Jetty-embedded web server instead of the default Tomcat, you will
    need to set the Servlet API to 5.0\. Jetty does not yet support the Servlet API
    6.0 used by default in Spring Boot 3.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Spring Framework 6 used by Spring Boot 3 removed the support for Apache
    HttpClient. If you used Apache HttpClient in your application in previous versions
    of Spring Boot, you may notice behavior changes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As mentioned, you won’t notice these changes unless your application explicitly
    relies on some of these features. However, there is a behavior change that may
    impact your application. In versions before Spring Boot 3, the URLs ending with
    a `/` would match with controllers without that trailing slash. For instance,
    `GET /teams` and `GET /teams/` would match the same controller in our application.
    In Spring Boot 3 `GET` `/teams/` will fail unless we prepare the application for
    that.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we’ll prepare our application to manage the trailing slash of
    the requests as in previous versions to ensure that the clients relying on our
    application are not impacted by the Spring Boot upgrade.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’ll use the outcome of the *Managing Actuator changes* recipe for this recipe.
    I prepared a completed version in case you haven’t done so yet. You may find it
    in the book’s GitHub repository at [https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook](https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook)
    in the `chapter9/recipe9-7/start` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s ensure our application consumers don’t get disrupted by our upgrade to
    Spring Boot 3!
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s add a custom web configuration. For that, create a file named `WebConfiguration`
    that implements the `WebMvcConfigurer` interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '@Override'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: public void configurePathMatch(PathMatchConfigurer configurer) {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: configurer.setUseTrailingSlashMatch(true);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, you can validate the application’s behavior by opening `http://localhost:8080/teams/`
    in your browser. You can check that it works with or without a trailing slash.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you run the application tests, you will realize that all of them have now
    succeeded, as only the tests related to trailing slash in the controller were
    still failing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Rather than relying on default behaviors that may change, the ending slash has
    been deprecated to enforce explicit matches for more stable and predictable applications
    as new versions appear.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Boot provides the mechanism to maintain the same behavior as previous
    versions. However, you probably realized that the `setUseTrailingSlashMatch` method
    is deprecated. This is to warn developers about this non-recommended behavior
    and enforce the move to explicit matches.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The same approach can be used with WebFlux. Instead of implementing `WebMvcConfigurer`,
    you would implement `WebFluxConfigurer`. It would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I recommend that you check the official guidelines for Spring Boot 3 migration
    at [https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#web-application-changes](https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#web-application-changes).
    As mentioned during the introduction of this recipe, if your application relies
    on some of the internal components impacted by the migration, you can find more
    details for fixing your issues.
  prefs: []
  type: TYPE_NORMAL
- en: Using OpenRewrite for migration automation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we made all migration upgrades manually. However, this approach
    can be too slow and error-prone in large code bases. Some tools try to automate
    this process, and the most popular one is OpenRewrite. OpenRewrite is a platform
    tool that aims to refactor any source code. According to its documentation, it
    aims to eliminate the technical debt of the developers’ repositories. It provides
    a mechanism to run recipes for source code refactoring. A popular open source
    recipe tackles the subject of this chapter: Spring Boot migrations.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’ll use the original sample targeting Spring Boot 2.6.15 in this recipe. You
    can find it in the book’s GitHub repository at [https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook](https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook)
    in the `chapter9/football` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’ll do the same upgrade from Spring 2.6 to Spring 3.2.4, automating most of
    the process. Seven recipes in one!
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by adding the OpenRewrite plugin to our project. To do that, add
    the following snippet to the plugins section of the `pom.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When writing this book, the latest version of the OpenRewrite plugin is 5.7.0\.
    Use the latest one when you try it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We are using the OpenRewrite recipe to upgrade to Spring 2.7 because we’ll do
    the upgrade gradually. In further steps, we’ll upgrade to Spring Boot 3.0, then
    3.1, and finally 3.2.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, we’ll execute the OpenRewrite plugin. For that, open your terminal in
    the root folder of the project and execute the following Maven command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will see that it makes some changes:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It upgrades the Spring Boot version to `2.7.18`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: It adds a test dependency to `org.junit.jupiterter:junit-jupiter`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: It replaces the property `spring.datasource.initialization-mode` with `spring.sql.init.mode`
    in the `application.yml` file only. Take note of this change, as we’ll need in
    the next step.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: It modifies the references to `org.junit` to `org.junit.jupiter` equivalents
    in the test classes.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s check if the upgrade to Spring Boot 2.7 works.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you run the tests, you will see that the tests that rely on Testcontainers
    don’t work. This is because OpenRewrite excluded some required dependencies for
    Testcontainers. To fix it, open `pom.xml` and remove the `exclusion` `junit` on
    the Testcontainers dependency:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: In this example, I just commented the `exclusions` section for clarity. In your
    code, you can remove it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once the exclusion is fixed, you will see that it cannot load the application
    context because it cannot resolve the `spring.datasource.initialization-mode`
    configuration. To fix it, open the `CustomDatasourceService` class and modify
    the `@Value` annotation used in the constructor. You should replace the `spring.datasource.initialization-mode`
    setting with the `spring.sql.init.mode` setting.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Rerun the tests and you will see that all of them succeed.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It’s time to start with Spring Boot 3.0\. To perform this upgrade, open the
    `pom.xml` file and modify `activeRecipes/recipe` to `org.openrewrite.java.spring.boot3.UpgradeSpringBoot_3_0`.
    The OpenRewrite plugin configuration should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, execute the plugin again. The changes performed by this upgrade are as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It replaced all `javax` references with `jakarta`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: It migrated the Spring Security changes. It properly migrated `UserDetailsManager`
    and `WebSecurityCustomizer`. However, as we’ll see in *step 7*, the `SecurityFilterChain`
    bean requires some adjustments.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It migrated the settings defined in the `application.yml` file:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: It replaced `management.trace.http.enabled` with `management.httpexchanges.recording.enabled`.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: It migrated the `spring.data.cassandra` settings to `spring.cassandra`.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the Spring Boot 3.0 upgrade, the application doesn’t compile. Let’s fix
    the compilation errors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `DataSourceInitializationMode` class has been removed in Spring Boot 3,
    but OpenRewrite has not migrated it. As we studied in the *Preparing the application*
    recipe, this change can be easily fixed by replacing `DataSourceInitializationMode`
    with `DatabaseInitializationMode`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Some Actuator changes were correctly applied, but others were not. The `application.yml`
    was correctly modified, replacing `management.trace.http.enabled` with `management.httpexchanges.recording.enabled`.
    However, `HttpTraceRepository` and `InMemoryHttpTraceRepository` were not migrated.
    You can replace them with `HttpExchangeRepository` and `InMemoryHttpExchangeRepository`.
    For more details, you can check out the *Managing Actuator* *changes* recipe.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In the `details` field in the `MatchEventEntity` class, replace the annotation
    `@Type(JsonType.class)` with `@JdbcTypeCode(SqlTypes.JSON)`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next, let’s fix the tests:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As explained in *step 3*, you should remove the `exclusion` `junit` from the
    Testcontainers dependency.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: As we no longer use the Hypersistence library, we can remove it from our project.
    For more details, check the *Upgrading Spring* *Data* recipe.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenRewrite properly migrated the `spring.data.cassandra.*` settings to `spring.cassandra.*`
    in the `application.yml` file. However, it didn’t modify the references in the
    tests. To fix it, just replace all references to `spring.data.cassandra` with
    `spring.cassandra`. See the *Upgrading Spring Data* recipe for more details.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The MVC tests don’t work. To fix them, we need to include the `@Import(SecurityConfig.class)`
    annotation in the `FootballControllerTest` and `SecurityControllerTest` classes.
    As mentioned previously, the `SecurityFilterChain` bean is migrated but requires
    some adjustments. As explained in the *Upgrade the project to Spring Boot 3* recipe,
    we need to switch the order of some calls. The method should look like this:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: OpenRewrite didn’t migrate `BigInteger` to `Long` and the parameter order binding
    we studied in the *Upgrading Spring Data* recipe. To fix it, apply both changes
    explained in the *Upgrading Spring* *Data* recipe.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The tests that check the trailing slash fail. If we want to keep the same behavior,
    we’ll need to add a `WebMvcConfigurer` as explained in the *Managing web application*
    *changes* recipe.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: After applying these fixes, both the tests and the application should work.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, let’s upgrade to Spring Boot 3.1\. For that, change the recipe in the
    `pom.xml` file to `org.openrewrite.java.spring.boot3.UpgradeSpringBoot_3_1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When writing this book, I found an issue related to the Testcontainers version
    when running this recipe. The message is similar to this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To avoid a runtime error, replace the `testcontainers.version` project variable
    in the `pom.xml` file with the real version in the Testcontainers dependencies.
    For instance, see this dependency:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace it with the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After executing the OpenRewrite plugin, you will see that only a few changes
    were applied to the `pom.xml` file. You will need to remove the `exclusion` `junit`
    on the Testcontainers dependency again.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the Spring Boot 3.1 upgrade, there are no compilation errors. However, some
    tests fail. This can be fixed just by changing `spring.jpa.database-platform`
    to `org.hibernate.dialect.PostgreSQLDialect` as explained in the *Upgrading Spring
    Data* recipe. Rerun the test after applying this fix; all of them should succeed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Lastly, upgrade to Spring Boot 3.2\. For that, change the OpenRewrite recipe
    to `org.openrewrite.java.spring.boot3.UpgradeSpringBoot_3_2`. Again, you will
    need to remove the `exclusion` `junit`, but this time, no other actions are required.
    If you run the tests, they should succeed, and the application will run smoothly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: OpenRewrite loads a representation of your code known as a **Lossless Semantic
    Trees** (**LSTs**) and then applies modifications to that representation by using
    **visitors**. Once the visitors are applied, OpenRewrite transforms the LSTs to
    code again. An OpenRewrite recipe is a set of visitors. For instance, one visitor
    changes the javax references to jakarta references in the LST, another visitor
    changes the Spring Data configuration settings, and so on, transforming the LSTs
    to the final upgraded version. Finally, the transformed LSTs are converted into
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Usually, one OpenRewrite recipe definition does the migration of one Spring
    Boot version to the next one, e.g., from 2.6 to 2.7\. The OpenRewrite Maven plugin
    detects all the recipes that it should apply from the current application version
    to the desired target version, and then it applies the recipes in order to make
    the upgrade gradual. For more information, see the *There’s* *more* section.
  prefs: []
  type: TYPE_NORMAL
- en: As you might realize, in this recipe, many scenarios are not covered by the
    existing recipes. The OpenRewrite recipes are open source and maintained by the
    community. They handle the most common migration scenarios. For this chapter,
    I tried to prepare a sample with some scenarios that are not very rare but not
    very common, such as Hibernate scenarios using the `BigInteger` class. In any
    case, it’s important to understand what changes are made to each upgrade so that
    if an error appears, we can fix it manually.
  prefs: []
  type: TYPE_NORMAL
- en: Having a good set of tests is always helpful, as they may help detect behavior
    changes between versions. In this chapter, we used extensive tests, specifically
    Testcontainers. They helped detect incompatibilities when accessing PostgreSQL
    and Cassandra.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we made a gradual upgrade, but you can run the migration directly
    by applying the OpenRewrite `org.openrewrite.java.spring.boot3.UpgradeSpringBoot_3_2`
    recipe. You must apply the same additional fixes performed during the gradual
    migration:'
  prefs: []
  type: TYPE_NORMAL
- en: Before executing the `OpenRewrite` plugin, replace the Testcontainers version
    using a variable with a constant version.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove the `exclusion` `junit` in the Testcontainers dependency.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Replace `DataSourceInitializationMode` with `DatabaseInitializationMode`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Replace `HttpTraceRepository` and `InMemoryHttpTraceRepository` with `HttpExchangeRepository`
    and `InMemoryHttpExchangeRepository`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Replace the annotation `@Type(JsonType.class)` with `@JdbcTypeCode(SqlTypes.JSON)`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Replace all references to `spring.data.cassandra` with `spring.cassandra`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add the `@Import(SecurityConfig.class)` annotation in the `FootballControllerTest`
    and `SecurityControllerTest` classes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix the `SecurityFilterChain` bean in the `SecurityConfig` class.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Replace the `BigInteger` class with `Long` and the parameter order binding in
    the class in the `DynamicQueriesService` class.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a `WebMvcConfigurer` if you want to keep the trailing slash behavior.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Replace `org.hibernate.dialect.PostgreSQL82Dialect` with `org.hibernate.dialect.PostgreSQLDialect`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I recommend visiting the OpenRewrite website at [https://docs.openrewrite.org](https://docs.openrewrite.org).
    There are many recipes that can be used to maintain our code, not only for Spring
    Boot migrations.
  prefs: []
  type: TYPE_NORMAL
- en: Other tools aim to automate the migration process as much as possible. For instance,
    the Spring team developed an experimental project named Spring Boot Migrator.
    You can find more information at [https://github.com/spring-projects-experimental/spring-boot-migrator](https://github.com/spring-projects-experimental/spring-boot-migrator).
  prefs: []
  type: TYPE_NORMAL
