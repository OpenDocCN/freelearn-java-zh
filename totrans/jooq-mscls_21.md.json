["```java\nAuthentication auth = SecurityContextHolder\n```", "```java\n  .getContext().getAuthentication();\n```", "```java\nString authority = auth.getAuthorities().iterator()\n```", "```java\n  .next().getAuthority();\n```", "```java\nString database = authority.substring(5).toLowerCase();\n```", "```java\nctx.configuration().derive(new Settings()\n```", "```java\n    .withRenderMapping(new RenderMapping()\n```", "```java\n      .withSchemata(\n```", "```java\n        new MappedSchema().withInput(\"development\")\n```", "```java\n                          .withOutput(database)))).dsl()\n```", "```java\n   .insertInto(PRODUCT, PRODUCT.PRODUCT_NAME, \n```", "```java\n               PRODUCT.QUANTITY_IN_STOCK)\n```", "```java\n   .values(\"Product\", 100)\n```", "```java\n   .execute();\n```", "```java\nString catalog = …;\n```", "```java\nSettings settings = new Settings()\n```", "```java\n    .withRenderMapping(new RenderMapping()\n```", "```java\n    .withCatalogs(new MappedCatalog()\n```", "```java\n    .withInput(\"development\")\n```", "```java\n    .withOutput(catalog))\n```", "```java\n    .withSchemata(…); // optional, if you need schema as well\n```", "```java\n<database>\n```", "```java\n  <schemata>\n```", "```java\n    <schema>\n```", "```java\n     <inputSchema>…</inputSchema>\n```", "```java\n     <outputSchema>…</outputSchema>\n```", "```java\n    </schema>\n```", "```java\n  </schemata>\n```", "```java\n</database>\n```", "```java\ndatabase {\n```", "```java\n  schemata {\n```", "```java\n    schema {\n```", "```java\n     inputSchema = '…'\n```", "```java\n     outputSchema = '…'\n```", "```java\n   }\n```", "```java\n  }\n```", "```java\n}\n```", "```java\nnew org.jooq.meta.jaxb.Configuration()\n```", "```java\n  .withGenerator(new Generator()\n```", "```java\n    .withDatabase(new Database()\n```", "```java\n      .withSchemata(\n```", "```java\n        new SchemaMappingType()\n```", "```java\n          .withInputSchema(\"...\")\n```", "```java\n          .withOutputSchema(\"...\")\n```", "```java\n      )\n```", "```java\n    )\n```", "```java\n  )\n```", "```java\n<database>\n```", "```java\n  <catalogs>\n```", "```java\n    <catalog>          \n```", "```java\n     <inputCatalog>…</inputCatalog>    \n```", "```java\n     <outputCatalog>…</outputCatalog>\n```", "```java\n     <!-- Optionally, if you need schema mapping -->\n```", "```java\n     <schemata>\n```", "```java\n     </schemata>\n```", "```java\n   </catalog>\n```", "```java\n </catalogs>\n```", "```java\n</database>\n```", "```java\ndatabase {\n```", "```java\n  catalogs {\n```", "```java\n   catalog {\n```", "```java\n    inputCatalog = '…'\n```", "```java\n    outputCatalog = '…'\n```", "```java\n    // Optionally, if you need schema mapping\n```", "```java\n    schemata {}\n```", "```java\n    }\n```", "```java\n  }\n```", "```java\n}\n```", "```java\nnew org.jooq.meta.jaxb.Configuration()\n```", "```java\n  .withGenerator(new Generator()\n```", "```java\n    .withDatabase(new Database()\n```", "```java\n      .withCatalogs(\n```", "```java\n        new CatalogMappingType()\n```", "```java\n          .withInputCatalog(\"...\")\n```", "```java\n          .withOutputCatalog(\"...\")\n```", "```java\n          // Optionally, if you need schema mapping\n```", "```java\n          .withSchemata()\n```", "```java\n      )\n```", "```java\n    )\n```", "```java\n  )\n```", "```java\nctx.configuration().derive(new Settings()\n```", "```java\n    .withRenderMapping(new RenderMapping()\n```", "```java\n      .withSchemata(\n```", "```java\n        new MappedSchema().withInput(\"development\")\n```", "```java\n                          .withOutput(database)\n```", "```java\n      .withTables(\n```", "```java\n        new MappedTable().withInput(\"product_dev\")\n```", "```java\n           .withOutput(\"product_\" + database))))).dsl()\n```", "```java\n   .insertInto(PRODUCT_DEV, PRODUCT_DEV.PRODUCT_NAME,  \n```", "```java\n               PRODUCT_DEV.QUANTITY_IN_STOCK)\n```", "```java\n   .values(\"Product\", 100)\n```", "```java\n   .execute();\n```", "```java\nAuthentication auth = SecurityContextHolder\n```", "```java\n     .getContext().getAuthentication();\n```", "```java\nif (auth != null && auth.isAuthenticated()) {\n```", "```java\n   String authority = auth.getAuthorities()\n```", "```java\n     .iterator().next().getAuthority();\n```", "```java\n   String database = authority.substring(5).toLowerCase();\n```", "```java\n   DSL.using(\n```", "```java\n    \"jdbc:mysql://localhost:3306/\" + database, \n```", "```java\n        \"root\", \"root\")\n```", "```java\n      .configuration().derive(new Settings()\n```", "```java\n         .withRenderCatalog(Boolean.FALSE)\n```", "```java\n         .withRenderSchema(Boolean.FALSE))\n```", "```java\n         .dsl()\n```", "```java\n      .insertInto(PRODUCT, PRODUCT.PRODUCT_NAME, \n```", "```java\n           PRODUCT.QUANTITY_IN_STOCK)\n```", "```java\n      .values(\"Product\", 100)\n```", "```java\n      .execute();\n```", "```java\n}\n```", "```java\n<outputSchemaToDefault>true</outputSchemaToDefault>\n```", "```java\noutputSchemaToDefault = true\n```", "```java\nString database = …;\n```", "```java\nDSL.using(\n```", "```java\n  \"jdbc:mysql://localhost:3306/\" + database, \n```", "```java\n      \"root\", \"root\")  \n```", "```java\n  .insertInto(PRODUCT, PRODUCT.PRODUCT_NAME, \n```", "```java\n              PRODUCT.QUANTITY_IN_STOCK)\n```", "```java\n  .values(\"Product\", 100)\n```", "```java\n  .execute();\n```", "```java\n<database>\n```", "```java\n <schemata>\n```", "```java\n   <schema>\n```", "```java\n    <inputSchema>db1</inputSchema>\n```", "```java\n   </schema>\n```", "```java\n   <schema>\n```", "```java\n    <inputSchema>db2</inputSchema>\n```", "```java\n   </schema>\n```", "```java\n </schemata>\n```", "```java\n</database>\n```", "```java\nctx.select().from(DB1.PRODUCTLINE).fetch();\n```", "```java\nctx.select().from(DB2.PRODUCT).fetch();\n```", "```java\nctx.select(DB1.PRODUCTLINE.PRODUCT_LINE,\n```", "```java\n   DB2.PRODUCT.PRODUCT_ID, DB2.PRODUCT.PRODUCT_NAME,   \n```", "```java\n   DB2.PRODUCT.QUANTITY_IN_STOCK)\n```", "```java\n   .from(DB1.PRODUCTLINE)\n```", "```java\n   .join(DB2.PRODUCT)\n```", "```java\n   .on(DB1.PRODUCTLINE.PRODUCT_LINE\n```", "```java\n     .eq(DB2.PRODUCT.PRODUCT_LINE))\n```", "```java\n   .fetch();\n```", "```java\nimport static jooq.generated.db1.Db1.DB1;\n```", "```java\nimport static jooq.generated.db2.Db2.DB2;\n```", "```java\n<plugin>\n```", "```java\n  <groupId>org.jooq</groupId>\n```", "```java\n  <artifactId>jooq-codegen-maven</artifactId> \n```", "```java\n  <executions>\n```", "```java\n    <execution>\n```", "```java\n      <id>generate-mysql</id>\n```", "```java\n      <phase>generate-sources</phase>\n```", "```java\n      <goals>\n```", "```java\n        <goal>generate</goal>\n```", "```java\n      </goals>                                  \n```", "```java\n      <configuration xmlns=\"... jooq-codegen-3.16.0.xsd\">     \n```", "```java\n        ... <!-- MySQL schema configuration -->\n```", "```java\n      </configuration>\n```", "```java\n    </execution>\n```", "```java\n    <execution>\n```", "```java\n      <id>generate-postgresql</id>\n```", "```java\n      <phase>generate-sources</phase>\n```", "```java\n      <goals>\n```", "```java\n        <goal>generate</goal>\n```", "```java\n      </goals>                    \n```", "```java\n      <configuration xmlns=\"...jooq-codegen-3.16.0.xsd\">   \n```", "```java\n        ... <!-- PostgreSQL schema configuration -->\n```", "```java\n      </configuration>\n```", "```java\n    </execution>\n```", "```java\n  </executions> \n```", "```java\n</plugin>\n```", "```java\nDSL.using(\n```", "```java\n \"jdbc:mysql://localhost:3306/classicmodels\", \n```", "```java\n    \"root\", \"root\")\n```", "```java\n   .select().from(mysql.jooq.generated.tables.Product.PRODUCT)\n```", "```java\n   .fetch();\n```", "```java\nDSL.using(\n```", "```java\n \"jdbc:postgresql://localhost:5432/classicmodels\", \n```", "```java\n         \"postgres\", \"root\")\n```", "```java\n   .select().from(\n```", "```java\n           postgresql.jooq.generated.tables.Product.PRODUCT)\n```", "```java\n   .fetch();\n```", "```java\n@Bean(name=\"mysqlDSLContext\")\n```", "```java\npublic DSLContext mysqlDSLContext(@Qualifier(\"configMySql\") \n```", "```java\n         DataSourceProperties properties) {\n```", "```java\n  return DSL.using(\n```", "```java\n    properties.getUrl(), properties.getUsername(), \n```", "```java\n    properties.getPassword());\n```", "```java\n}\n```", "```java\n@Bean(name=\"postgresqlDSLContext\")\n```", "```java\npublic DSLContext postgresqlDSLContext(\n```", "```java\n    @Qualifier(\"configPostgreSql\") \n```", "```java\n       DataSourceProperties properties) {\n```", "```java\n  return DSL.using(\n```", "```java\n    properties.getUrl(), properties.getUsername(), \n```", "```java\n    properties.getPassword());\n```", "```java\n}\n```", "```java\nprivate final DSLContext mysqlCtx;\n```", "```java\nprivate final DSLContext postgresqlCtx;\n```", "```java\npublic ClassicModelsRepository(\n```", "```java\n @Qualifier(\"mysqlDSLContext\") DSLContext mysqlCtx, \n```", "```java\n @Qualifier(\"postgresqlDSLContext\") DSLContext postgresqlCtx){\n```", "```java\n     this.mysqlCtx = mysqlCtx;\n```", "```java\n     this.postgresqlCtx = postgresqlCtx;\n```", "```java\n}\n```", "```java\n…\n```", "```java\nmysqlCtx.select().from(\n```", "```java\n  mysql.jooq.generated.tables.Product.PRODUCT).fetch();\n```", "```java\npostgresqlCtx.select().from(\n```", "```java\n  postgresql.jooq.generated.tables.Product.PRODUCT).fetch();\n```"]