["```java\nList<String> list = new ArrayList<String>();\n```", "```java\nSet<Integer> set = new HashSet<Integer>();\n```", "```java\nList<String> list = new ArrayList<>();\n```", "```java\nSet<Integer> set = new HashSet<>();\n```", "```java\nList<String> list = new ArrayList<>();\n```", "```java\nlist.add(\"abc\");\n```", "```java\nlist.add(42);   //compilation error\n```", "```java\n//Collection<String> coll \n```", "```java\n//        = List.of(\"s1\", null); //does not allow null\n```", "```java\nCollection<String> coll = List.of(\"s1\", \"s1\", \"s2\");\n```", "```java\n//coll.add(\"s3\");         //does not allow add element\n```", "```java\n//coll.remove(\"s1\");   //does not allow remove element\n```", "```java\n//((List<String>) coll).set(1, \"s3\");    \n```", "```java\n                       //does not allow modify element\n```", "```java\nSystem.out.println(coll);       //prints: [s1, s1, s2]\n```", "```java\n//coll = Set.of(\"s3\", \"s3\", \"s4\");     \n```", "```java\n                            //does not allow duplicate\n```", "```java\n//coll = Set.of(\"s2\", \"s3\", null);     \n```", "```java\n                                 //does not allow null\n```", "```java\ncoll = Set.of(\"s3\", \"s4\");\n```", "```java\nSystem.out.println(coll);  \n```", "```java\n                        //prints: [s3, s4] or [s4, s3]\n```", "```java\n//coll.add(\"s5\");         //does not allow add element\n```", "```java\n//coll.remove(\"s2\");   //does not allow remove element\n```", "```java\nList<String> list1 = new ArrayList<>();\n```", "```java\nlist1.add(\"s1\");\n```", "```java\nlist1.add(\"s1\");\n```", "```java\nSystem.out.println(list1);     //prints: [s1, s1]\n```", "```java\nSet<String> set1 = new HashSet<>();\n```", "```java\nset1.add(\"s1\");\n```", "```java\nset1.add(\"s1\");\n```", "```java\nSystem.out.println(set1);      //prints: [s1]\n```", "```java\nList<String> list1 = new ArrayList<>();\n```", "```java\nlist1.add(\"s1\");\n```", "```java\nlist1.add(\"s1\");\n```", "```java\nSystem.out.println(list1);      //prints: [s1, s1]\n```", "```java\nList<String> list2 = new ArrayList<>();\n```", "```java\nlist2.addAll(list1);\n```", "```java\nSystem.out.println(list2);      //prints: [s1, s1]\n```", "```java\nSet<String> set = new HashSet<>();\n```", "```java\nset.addAll(list1);\n```", "```java\nSystem.out.println(set);        //prints: [s1]\n```", "```java\nList<String> list1 = new ArrayList<>();\n```", "```java\nlist1.add(\"s1\");\n```", "```java\nlist1.add(\"s1\");\n```", "```java\nSystem.out.println(list1);     //prints: [s1, s1]\n```", "```java\nList<String> list2 = new ArrayList<>();\n```", "```java\nlist2.addAll(list1);\n```", "```java\nSystem.out.println(list2);      //prints: [s1, s1]\n```", "```java\nSet<String> set = new HashSet<>();\n```", "```java\nset.addAll(list1);\n```", "```java\nSystem.out.println(set);        //prints: [s1]\n```", "```java\nSet<String> set1 = new HashSet<>();\n```", "```java\nset1.add(\"s1\");\n```", "```java\nSet<String> set2 = new HashSet<>();\n```", "```java\nset2.add(\"s1\");\n```", "```java\nset2.add(\"s2\");\n```", "```java\nSystem.out.println(set1.addAll(set2)); //prints: true\n```", "```java\nSystem.out.println(set1);              //prints: [s1, s2]\n```", "```java\nSet<String> set = new HashSet<>();\n```", "```java\nSystem.out.println(set.add(\"s1\"));   //prints: true\n```", "```java\nSystem.out.println(set.add(\"s1\"));   //prints: false\n```", "```java\nSystem.out.println(set);             //prints: [s1]\n```", "```java\nSet<String> set1 = new HashSet<>();\n```", "```java\nset1.add(\"s1\");\n```", "```java\nset1.add(\"s2\");\n```", "```java\nSet<String> set2 = new HashSet<>();\n```", "```java\nset2.add(\"s1\");\n```", "```java\nset2.add(\"s2\");\n```", "```java\nSystem.out.println(set1.addAll(set2)); //prints: false\n```", "```java\nSystem.out.println(set1);              //prints: [s1, s2]\n```", "```java\nCollection<String> list1 = List.of(\"s1\", \"s1\", \"s2\");\n```", "```java\nSystem.out.println(list1);      //prints: [s1, s1, s2]\n```", "```java\nList<String> list2 = new ArrayList<>(list1);\n```", "```java\nSystem.out.println(list2);      //prints: [s1, s1, s2]\n```", "```java\nSet<String> set = new HashSet<>(list1);\n```", "```java\nSystem.out.println(set);        //prints: [s1, s2]\n```", "```java\nList<String> list3 = new ArrayList<>(set);\n```", "```java\nSystem.out.println(list3);      //prints: [s1, s2]\n```", "```java\n    Iterable<String> list = List.of(\"s1\", \"s2\", \"s3\");\n    System.out.println(list);       //prints: [s1, s2, s3]\n    for(String e: list){\n        System.out.print(e + \" \");  //prints: s1 s2 s3\n    }\n    ```", "```java\n    Iterable<String> list = List.of(\"s1\", \"s2\", \"s3\");\n    System.out.println(list);   //prints: [s1, s2, s3]\n    list.forEach(e -> System.out.print(e + \" \"));\n                                //prints: s1 s2 s3\n    ```", "```java\n    Collection<String> list1 = List.of(\"s1\", \"s2\", \"s3\");\n    System.out.println(list1);     //prints: [s1, s2, s3]\n    Collection<String> list2 = List.of(\"s1\", \"s2\", \"s3\");\n    System.out.println(list2);     //prints: [s1, s2, s3]\n    System.out.println(list1.equals(list2));  \n                                          //prints: true\n    Collection<String> list3 = List.of(\"s2\", \"s1\", \"s3\");\n    System.out.println(list3);     //prints: [s2, s1, s3]\n    System.out.println(list1.equals(list3));  \n                                          //prints: false\n    Collection<String> set1 = Set.of(\"s1\", \"s2\", \"s3\");\n    System.out.println(set1);   \n                //prints: [s2, s3, s1] or different order\n    Collection<String> set2 = Set.of(\"s2\", \"s1\", \"s3\");\n    System.out.println(set2);   \n                //prints: [s2, s1, s3] or different order\n    System.out.println(set1.equals(set2));  \n                                           //prints: true\n    Collection<String> set3 = Set.of(\"s4\", \"s1\", \"s3\");\n    System.out.println(set3);   \n                //prints: [s4, s1, s3] or different order\n    System.out.println(set1.equals(set3));  \n                                          //prints: false\n    ```", "```java\n    Collection<String> list = List.of(\"s1\", \"s2\", \"s3\");\n    System.out.println(list);    //prints: [s1, s2, s3]\n    List<String> list1 = List.copyOf(list);\n    //list1.add(\"s4\");                //run-time error\n    //list1.set(1, \"s5\");             //run-time error\n    //list1.remove(\"s1\");             //run-time error\n    Set<String> set = new HashSet<>();\n    System.out.println(set.add(\"s1\"));\n    System.out.println(set);          //prints: [s1]\n    Set<String> set1 = Set.copyOf(set);\n    //set1.add(\"s2\");                 //run-time error\n    //set1.remove(\"s1\");              //run-time error\n    Set<String> set2 = Set.copyOf(list);\n    System.out.println(set2);    //prints: [s1, s2, s3] \n    ```", "```java\n    List<String> list = List.of(\"s1\", \"s2\", \"s3\");\n    ListIterator<String> li = list.listIterator();\n    while(li.hasNext()){\n        System.out.print(li.next() + \" \");     \n                                  //prints: s1 s2 s3\n    }\n    while(li.hasPrevious()){\n        System.out.print(li.previous() + \" \");  \n                                   //prints: s3 s2 s1\n    }\n    ListIterator<String> li1 = list.listIterator(1);\n    while(li1.hasNext()){\n        System.out.print(li1.next() + \" \");       \n                                      //prints: s2 s3\n    }\n    ListIterator<String> li2 = list.listIterator(1);\n    while(li2.hasPrevious()){\n        System.out.print(li2.previous() + \" \");   \n                                          //prints: s1\n    }\n    ```", "```java\n    List<String> list = new ArrayList<>();\n    list.add(\"S2\");\n    list.add(\"s3\");\n    list.add(\"s1\");\n    System.out.println(list);     //prints: [S2, s3, s1]\n    list.sort(String.CASE_INSENSITIVE_ORDER);\n    System.out.println(list);     //prints: [s1, S2, s3]\n    //list.add(null);      //causes NullPointerException\n    list.sort(Comparator.naturalOrder());\n    System.out.println(list);     //prints: [S2, s1, s3]\n    list.sort(Comparator.reverseOrder());\n    System.out.println(list);     //prints: [s3, s1, S2]\n    list.add(null);\n    list.sort(Comparator.nullsFirst(Comparator\n                                       .naturalOrder()));\n    System.out.println(list);  \n                            //prints: [null, S2, s1, s3]\n    list.sort(Comparator.nullsLast(Comparator\n                                      .naturalOrder()));\n    System.out.println(list);         \n                            //prints: [S2, s1, s3, null]\n    Comparator<String> comparator = \n         (s1, s2) -> s1 == null ? -1 : s1.compareTo(s2);\n    list.sort(comparator);\n    System.out.println(list);         \n                             //prints: [null, S2, s1, s3]\n    Comparator<String> comparator = (s1, s2) -> \n     s1 == null ? -1 : s1.compareTo(s2);\n    list.sort(comparator);\n    System.out.println(list);    \n                                 //prints: [null, S2, s1, s3]\n    ```", "```java\nMap<Integer, String> map = Map.of(1, \"s1\", 2, \"s2\", 3, \"s3\");\n```", "```java\nfor(Integer key: map.keySet()){\n```", "```java\n    System.out.print(key + \", \" + map.get(key) + \", \");  \n```", "```java\n                                 //prints: 3, s3, 2, s2, 1, s1,\n```", "```java\n}\n```", "```java\nfor(Map.Entry e: map.entrySet()){\n```", "```java\n    System.out.print(e.getKey() + \", \" + e.getValue() + \", \"); \n```", "```java\n                                 //prints: 2, s2, 3, s3, 1, s1,\n```", "```java\n}\n```", "```java\nclass Person1 {\n```", "```java\n    private int age;\n```", "```java\n    private String name;\n```", "```java\n    public Person1(int age, String name) {\n```", "```java\n        this.age = age;\n```", "```java\n        this.name = name == null ? \"\" : name;\n```", "```java\n    }\n```", "```java\n    public void setName(String name){ this.name = name; }\n```", "```java\n    @Override\n```", "```java\n    public String toString() {\n```", "```java\n        return \"Person{age=\" + age +\n```", "```java\n                \", name=\" + name + \"}\";\n```", "```java\n    }\n```", "```java\n}\n```", "```java\nPerson1 p1 = new Person1(45, \"Bill\");\n```", "```java\nList<Person1> list = List.of(p1);\n```", "```java\n//list.add(new Person1(22, \"Bob\"));\n```", "```java\n                         //UnsupportedOperationException\n```", "```java\nSystem.out.println(list);    \n```", "```java\n                    //prints: [Person{age=45, name=Bill}]\n```", "```java\np1.setName(\"Kelly\");       \n```", "```java\nSystem.out.println(list);    \n```", "```java\n                   //prints: [Person{age=45, name=Kelly}]\n```", "```java\n    List<String> list1 = Arrays.asList(\"s1\",\"s2\");\n    List<String> list2 = Arrays.asList(\"s3\", \"s4\", \"s5\");\n    Collections.copy(list2, list1);\n    System.out.println(list2);    //prints: [s1, s2, s5]\n    ```", "```java\n    //List<String> list = \n             //List.of(\"a\", \"X\", \"10\", \"20\", \"1\", \"2\");\n    List<String> list = \n         Arrays.asList(\"a\", \"X\", \"10\", \"20\", \"1\", \"2\");\n    Collections.sort(list);\n    System.out.println(list);      \n                         //prints: [1, 10, 2, 20, X, a]\n    ```", "```java\nList<String> list = \n           Arrays.asList(\"a\", \"X\", \"10\", \"20\", \"1\", \"2\");\nCollections.sort(list);\nSystem.out.println(list);  //prints: [1, 10, 2, 20, X, a]\nlist.forEach(s -> {\n    for(int i = 0; i < s.length(); i++){\n       System.out.print(\" \" + \n                            Character.codePointAt(s, i));\n    }\n    if(!s.equals(\"a\")) {\n       System.out.print(\",\"); \n                   //prints: 49, 49 48, 50, 50 48, 88, 97\n    }\n});\n```", "```java\n    class Person  {\n        private int age;\n        private String name;\n        public Person(int age, String name) {\n            this.age = age;\n            this.name = name == null ? \"\" : name;\n        }\n        public int getAge() { return this.age; }\n        public String getName() { return this.name; }\n        @Override\n        public String toString() {\n            return \"Person{name=\" + name + \n                           \", age=\" + age + \"}\";\n        }\n    }\n    ```", "```java\n    class ComparePersons implements Comparator<Person> {\n        public int compare(Person p1, Person p2){\n            int result = p1.getName().compareTo(p2.getName());\n            if (result != 0) { return result; }\n            return p1.age - p2.getAge();\n        }\n    }\n    ```", "```java\nList<Person> persons = \n```", "```java\n      Arrays.asList(new Person(23, \"Jack\"),\n```", "```java\n                    new Person(30, \"Bob\"), \n```", "```java\n                    new Person(15, \"Bob\"));\n```", "```java\nCollections.sort(persons, new ComparePersons());\n```", "```java\nSystem.out.println(persons);    \n```", "```java\n                //prints: [Person{name=Bob, age=15}, \n```", "```java\n                //         Person{name=Bob, age=30}, \n```", "```java\n                //         Person{name=Jack, age=23}]\n```", "```java\n <dependency>\n```", "```java\n    <groupId>org.apache.commons</groupId>\n```", "```java\n    <artifactId>commons-collections4</artifactId>\n```", "```java\n    <version>4.4</version>\n```", "```java\n </dependency>\n```", "```java\nList<String> list = Arrays.asList(\"s0\", \"s1\");\n```", "```java\nSet<String> set = new HashSet<>(Arrays.asList(\"s0\", \"s1\");\n```", "```java\nString[] arr1 = {\"s1\", \"s2\"};\n```", "```java\nString[] arr2 = {\"s1\", \"s2\"};\n```", "```java\nSystem.out.println(arr1.equals(arr2));   //prints: false\n```", "```java\nSystem.out.println(Arrays.equals(arr1, arr2));     \n```", "```java\n                                         //prints: true\n```", "```java\nSystem.out.println(Arrays.deepEquals(arr1, arr2));  \n```", "```java\n                                         //prints: true\n```", "```java\nString[][] arr3 = {{\"s1\", \"s2\"}};\n```", "```java\nString[][] arr4 = {{\"s1\", \"s2\"}};\n```", "```java\nSystem.out.println(arr3.equals(arr4));   //prints: false\n```", "```java\nSystem.out.println(Arrays.equals(arr3, arr4));     \n```", "```java\n                                         //prints: false\n```", "```java\nSystem.out.println(Arrays.deepEquals(arr3, arr4));\n```", "```java\n                                         //prints: true\n```", "```java\n<dependency>\n```", "```java\n   <groupId>org.apache.commons</groupId>\n```", "```java\n   <artifactId>commons-lang3</artifactId>\n```", "```java\n   <version>3.12.0</version>\n```", "```java\n</dependency>\n```", "```java\nclass Person {\n```", "```java\n    private int age;\n```", "```java\n    private String name;\n```", "```java\n    public Person(int age, String name) {\n```", "```java\n        this.age = age;\n```", "```java\n        this.name = name;\n```", "```java\n    }\n```", "```java\n    public int getAge(){ return this.age; }\n```", "```java\n    public String getName(){ return this.name; }\n```", "```java\n    @Override\n```", "```java\n    public boolean equals(Object o) {\n```", "```java\n        if (this == o) return true;\n```", "```java\n        if (o == null) return false;\n```", "```java\n        if(!(o instanceof Person)) return false;\n```", "```java\n        Person = (Person)o;\n```", "```java\n        return age == person.getAge() &&\n```", "```java\n                Objects.equals(name, person.getName()); \n```", "```java\n    }\n```", "```java\n    @Override\n```", "```java\n    public int hashCode(){\n```", "```java\n        return Objects.hash(age, name);\n```", "```java\n    }\n```", "```java\n}\n```", "```java\nString[][] x1 = {{\"a\",\"b\"},{\"x\",\"y\"}};\n```", "```java\nString[][] x2 = {{\"a\",\"b\"},{\"x\",\"y\"}};\n```", "```java\nString[][] y =  {{\"a\",\"b\"},{\"y\",\"y\"}};\n```", "```java\nSystem.out.println(Objects.equals(x1, x2));\n```", "```java\n                                       //prints: false\n```", "```java\nSystem.out.println(Objects.equals(x1, y));  \n```", "```java\n                                       //prints: false\n```", "```java\nSystem.out.println(Objects.deepEquals(x1, x2));\n```", "```java\n                                       //prints: true\n```", "```java\nSystem.out.println(Objects.deepEquals(x1, y));\n```", "```java\n                                      //prints: false\n```", "```java\nSystem.out.println(Objects.hash(42) ==\n```", "```java\n               Objects.hashCode(42));    //prints: false\n```", "```java\nSystem.out.println(Objects.hash(\"abc\") ==\n```", "```java\n               Objects.hashCode(\"abc\")); //prints: false\n```", "```java\nSystem.out.println(Objects.hash(null));      //prints: 0\n```", "```java\nSystem.out.println(Objects.hashCode(null));  //prints: 0\n```", "```java\nSystem.out.println(Objects.hash(0));         //prints: 31\n```", "```java\nSystem.out.println(Objects.hashCode(0));     //prints: 0\n```", "```java\nclass Person implements Comparable<Person> {\n```", "```java\n    private int age;\n```", "```java\n    private String name;\n```", "```java\n    public Person(int age, String name) {\n```", "```java\n        this.age = age;\n```", "```java\n        this.name = name;\n```", "```java\n    }\n```", "```java\n    public int getAge(){ return this.age; }\n```", "```java\n    public String getName(){ return this.name; }\n```", "```java\n    @Override\n```", "```java\n    public int compareTo(Person p){\n```", "```java\n        int result = Objects.compare(name, p.getName(),\n```", "```java\n                                    Comparator.naturalOrder());\n```", "```java\n        if (result != 0) { \n```", "```java\n           return result;\n```", "```java\n        }\n```", "```java\n        return Objects.compare(age, p.getAge(),\n```", "```java\n                                    Comparator.naturalOrder());\n```", "```java\n    }\n```", "```java\n}\n```", "```java\nclass ComparePersons implements Comparator<Person> {\n```", "```java\n    public int compare(Person p1, Person p2){\n```", "```java\n        int result = Objects.compare(p1.getName(),\n```", "```java\n           p2.getName(), Comparator.naturalOrder());\n```", "```java\n        if (result != 0) { \n```", "```java\n           return result;\n```", "```java\n        }\n```", "```java\n        return Objects.compare(p1.getAge(), p2.getAge(),\n```", "```java\n                              Comparator.naturalOrder());\n```", "```java\n    }\n```", "```java\n}\n```", "```java\nList<String> list = Arrays.asList(\"s1\", null);\n```", "```java\nfor(String e: list){\n```", "```java\n    //String s = e.toString();  //NullPointerException\n```", "```java\n}\n```", "```java\nvoid someMethod(List<String> list){\n```", "```java\n    for(String e: list){\n```", "```java\n        String s = e == null ? \"null\" : e.toString();\n```", "```java\n    }\n```", "```java\nList<String> list = Arrays.asList(\"s1\", null);\n```", "```java\nfor(String e: list){\n```", "```java\n    String s = Objects.toString(e);\n```", "```java\n    System.out.print(s + \" \");          //prints: s1 null\n```", "```java\n}\n```", "```java\nfor(String e: list){\n```", "```java\n    String s = Objects.toString(e, \"element was null\");\n```", "```java\n    System.out.print(s + \" \");        \n```", "```java\n                                  //prints: s1 element was null\n```", "```java\n}\n```", "```java\n<dependency>\n```", "```java\n    <groupId>org.apache.commons</groupId>\n```", "```java\n    <artifactId>commons-lang3</artifactId>\n```", "```java\n    <version>3.12.0</version>\n```", "```java\n</dependency>\n```", "```java\nSystem.out.println(LocalDate.now()); \n```", "```java\n                    //prints: current date in format yyyy-MM-dd\n```", "```java\nSet<String> zoneIds = ZoneId.getAvailableZoneIds();\n```", "```java\nfor(String zoneId: zoneIds){\n```", "```java\n    System.out.println(zoneId);\n```", "```java\n}\n```", "```java\nAsia/Aden\n```", "```java\nEtc/GMT+9\n```", "```java\nAfrica/Nairobi\n```", "```java\nAmerica/Marigot\n```", "```java\nPacific/Honolulu\n```", "```java\nAustralia/Hobart\n```", "```java\nEurope/London\n```", "```java\nAmerica/Indiana/Petersburg\n```", "```java\nAsia/Yerevan\n```", "```java\nEurope/Brussels\n```", "```java\nGMT\n```", "```java\nChile/Continental\n```", "```java\nPacific/Yap\n```", "```java\nCET\n```", "```java\nEtc/GMT-1\n```", "```java\nCanada/Yukon\n```", "```java\nAtlantic/St_Helena\n```", "```java\nLibya\n```", "```java\nUS/Pacific-New\n```", "```java\nCuba\n```", "```java\nIsrael\n```", "```java\nGB-Eire\n```", "```java\nGB\n```", "```java\nMexico/General\n```", "```java\nUniversal\n```", "```java\nZulu\n```", "```java\nIran\n```", "```java\nNavajo\n```", "```java\nEgypt\n```", "```java\nEtc/UTC\n```", "```java\nSystemV/AST4ADT\n```", "```java\nAsia/Tokyo\n```", "```java\nZoneId = ZoneId.of(\"Asia/Tokyo\");\n```", "```java\nSystem.out.println(LocalDate.now(zoneId)); \n```", "```java\n           //prints: current date in Tokyo in format yyyy-MM-dd\n```", "```java\nLocalDate lc1 = LocalDate.parse(\"2023-02-23\");\n```", "```java\nSystem.out.println(lc1);           //prints: 2023-02-23\n```", "```java\nLocalDate lc2 = LocalDate.parse(\"20230223\",\n```", "```java\n                     DateTimeFormatter.BASIC_ISO_DATE);\n```", "```java\nSystem.out.println(lc2);           //prints: 2023-02-23\n```", "```java\nDateTimeFormatter frm =\n```", "```java\n              DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");\n```", "```java\nLocalDate lc3 =  LocalDate.parse(\"23/02/2023\", frm);\n```", "```java\nSystem.out.println(lc3);           //prints: 2023-02-23\n```", "```java\nLocalDate lc4 =  LocalDate.of(2023, 2, 23);\n```", "```java\nSystem.out.println(lc4);           //prints: 2023-02-23\n```", "```java\nLocalDate lc5 =  LocalDate.of(2023, Month.FEBRUARY, 23);\n```", "```java\nSystem.out.println(lc5);           //prints: 2023-02-23\n```", "```java\nLocalDate lc6 = LocalDate.ofYearDay(2023, 54);\n```", "```java\nSystem.out.println(lc6);           //prints: 2023-02-23\n```", "```java\nLocalDate lc = LocalDate.parse(\"2023-02-23\");\n```", "```java\nSystem.out.println(lc);                  //prints: 2023-02-23\n```", "```java\nSystem.out.println(lc.getYear());        //prints: 2023\n```", "```java\nSystem.out.println(lc.getMonth());       //prints: FEBRUARY\n```", "```java\nSystem.out.println(lc.getMonthValue());  //prints: 2\n```", "```java\nSystem.out.println(lc.getDayOfMonth());  //prints: 23\n```", "```java\nSystem.out.println(lc.getDayOfWeek());   //prints: THURSDAY\n```", "```java\nSystem.out.println(lc.isLeapYear());     //prints: false\n```", "```java\nSystem.out.println(lc.lengthOfMonth());  //prints: 28\n```", "```java\nSystem.out.println(lc.lengthOfYear());   //prints: 365\n```", "```java\nLocalDate lc = LocalDate.parse(\"2023-02-23\");\n```", "```java\nSystem.out.println(lc.withYear(2024));     //prints: 2024-02-23\n```", "```java\nSystem.out.println(lc.withMonth(5));       //prints: 2023-05-23\n```", "```java\nSystem.out.println(lc.withDayOfMonth(5));  //prints: 2023-02-05\n```", "```java\nSystem.out.println(lc.withDayOfYear(53));  //prints: 2023-02-22\n```", "```java\nSystem.out.println(lc.plusDays(10));       //prints: 2023-03-05\n```", "```java\nSystem.out.println(lc.plusMonths(2));      //prints: 2023-04-23\n```", "```java\nSystem.out.println(lc.plusYears(2));       //prints: 2025-02-23\n```", "```java\nSystem.out.println(lc.minusDays(10));      //prints: 2023-02-13\n```", "```java\nSystem.out.println(lc.minusMonths(2));     //prints: 2022-12-23\n```", "```java\nSystem.out.println(lc.minusYears(2));      //prints: 2021-02-23\n```", "```java\nLocalDate lc1 = LocalDate.parse(\"2023-02-23\");\n```", "```java\nLocalDate lc2 = LocalDate.parse(\"2023-02-22\");\n```", "```java\nSystem.out.println(lc1.isAfter(lc2));       //prints: true\n```", "```java\nSystem.out.println(lc1.isBefore(lc2));      //prints: false\n```", "```java\nSystem.out.println(LocalTime.now()); //prints: 21:15:46.360904\n```", "```java\nZoneId = ZoneId.of(\"Asia/Tokyo\");\n```", "```java\nSystem.out.println(LocalTime.now(zoneId)); \n```", "```java\n                                     //prints: 12:15:46.364378\n```", "```java\nLocalTime lt1 =  LocalTime.parse(\"20:23:12\");\n```", "```java\nSystem.out.println(lt1);                     //prints: 20:23:12\n```", "```java\nLocalTime lt2 = LocalTime.of(20, 23, 12);\n```", "```java\nSystem.out.println(lt2);                     //prints: 20:23:12\n```", "```java\nLocalTime lt2 =  LocalTime.of(20, 23, 12);\n```", "```java\nSystem.out.println(lt2);                     //prints: 20:23:12\n```", "```java\nSystem.out.println(lt2.getHour());           //prints: 20\n```", "```java\nSystem.out.println(lt2.getMinute());         //prints: 23\n```", "```java\nSystem.out.println(lt2.getSecond());         //prints: 12\n```", "```java\nSystem.out.println(lt2.getNano());           //prints: 0\n```", "```java\nLocalTime lt2 = LocalTime.of(20, 23, 12);\n```", "```java\nSystem.out.println(lt2.withHour(3));      //prints: 03:23:12\n```", "```java\nSystem.out.println(lt2.withMinute(10));   //prints: 20:10:12\n```", "```java\nSystem.out.println(lt2.withSecond(15));   //prints: 20:23:15\n```", "```java\nSystem.out.println(lt2.withNano(300)); \n```", "```java\n                                   //prints: 20:23:12.000000300\n```", "```java\nSystem.out.println(lt2.plusHours(10));    //prints: 06:23:12\n```", "```java\nSystem.out.println(lt2.plusMinutes(2));   //prints: 20:25:12\n```", "```java\nSystem.out.println(lt2.plusSeconds(2));   //prints: 20:23:14\n```", "```java\nSystem.out.println(lt2.plusNanos(200));\n```", "```java\n                                   //prints: 20:23:12.000000200\n```", "```java\nSystem.out.println(lt2.minusHours(10));   //prints: 10:23:12\n```", "```java\nSystem.out.println(lt2.minusMinutes(2));  //prints: 20:21:12\n```", "```java\nSystem.out.println(lt2.minusSeconds(2));  //prints: 20:23:10\n```", "```java\nSystem.out.println(lt2.minusNanos(200));\n```", "```java\n                                   //prints: 20:23:11.999999800\n```", "```java\nLocalTime lt2 =  LocalTime.of(20, 23, 12);\n```", "```java\nLocalTime lt4 =  LocalTime.parse(\"20:25:12\");\n```", "```java\nSystem.out.println(lt2.isAfter(lt4));       //prints: false\n```", "```java\nSystem.out.println(lt2.isBefore(lt4));      //prints: true\n```", "```java\nSystem.out.println(LocalDateTime.now());       \n```", "```java\n                     //prints: 2019-03-04T21:59:00.142804\n```", "```java\nZoneId = ZoneId.of(\"Asia/Tokyo\");\n```", "```java\nSystem.out.println(LocalDateTime.now(zoneId)); \n```", "```java\n                    //prints: 2019-03-05T12:59:00.146038\n```", "```java\nLocalDateTime ldt1 = \n```", "```java\n           LocalDateTime.parse(\"2020-02-23T20:23:12\");\n```", "```java\nSystem.out.println(ldt1);  //prints: 2020-02-23T20:23:12\n```", "```java\nDateTimeFormatter formatter =\n```", "```java\n     DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm:ss\");\n```", "```java\nLocalDateTime ldt2 =\n```", "```java\n  LocalDateTime.parse(\"23/02/2020 20:23:12\", formatter);\n```", "```java\nSystem.out.println(ldt2);  //prints: 2020-02-23T20:23:12\n```", "```java\nLocalDateTime ldt3 = \n```", "```java\n               LocalDateTime.of(2020, 2, 23, 20, 23, 12);\n```", "```java\nSystem.out.println(ldt3);  //prints: 2020-02-23T20:23:12\n```", "```java\nLocalDateTime ldt4 =\n```", "```java\n  LocalDateTime.of(2020, Month.FEBRUARY, 23, 20, 23, 12);\n```", "```java\nSystem.out.println(ldt4);  //prints: 2020-02-23T20:23:12\n```", "```java\nLocalDate ld = LocalDate.of(2020, 2, 23);\n```", "```java\nLocalTime lt = LocalTime.of(20, 23, 12);\n```", "```java\nLocalDateTime ldt5 = LocalDateTime.of(ld, lt);\n```", "```java\nSystem.out.println(ldt5); //prints: 2020-02-23T20:23:12\n```", "```java\nLocalDateTime ldt1 = LocalDateTime.parse(\"2023-02-23T20:23:12\");\n```", "```java\nLocalDateTime ldt2 = ldt1.plus(Period.ofYears(2));\n```", "```java\nSystem.out.println(ldt2);      //prints: 2025-02-23T20:23:12\n```", "```java\nLocalDateTime ldt = LocalDateTime.parse(\"2023-02-23T20:23:12\");\n```", "```java\nldt.minus(Period.ofYears(2));\n```", "```java\nldt.plus(Period.ofMonths(2));\n```", "```java\nldt.minus(Period.ofMonths(2));\n```", "```java\nldt.plus(Period.ofWeeks(2));\n```", "```java\nldt.minus(Period.ofWeeks(2));\n```", "```java\nldt.plus(Period.ofDays(2));\n```", "```java\nldt.minus(Period.ofDays(2));\n```", "```java\nldt.plus(Duration.ofHours(2));\n```", "```java\nldt.minus(Duration.ofHours(2));\n```", "```java\nldt.plus(Duration.ofMinutes(2));\n```", "```java\nldt.minus(Duration.ofMinutes(2));\n```", "```java\nldt.plus(Duration.ofMillis(2));\n```", "```java\nldt.minus(Duration.ofMillis(2));\n```", "```java\nLocalDate ld1 =  LocalDate.parse(\"2023-02-23\");\n```", "```java\nLocalDate ld2 =  LocalDate.parse(\"2023-03-25\");\n```", "```java\nPeriod = Period.between(ld1, ld2);\n```", "```java\nSystem.out.println(period.getDays());       //prints: 2\n```", "```java\nSystem.out.println(period.getMonths());     //prints: 1\n```", "```java\nSystem.out.println(period.getYears());      //prints: 0\n```", "```java\nSystem.out.println(period.toTotalMonths()); //prints: 1\n```", "```java\nperiod = Period.between(ld2, ld1);\n```", "```java\nSystem.out.println(period.getDays());       //prints: -2\n```", "```java\nLocalTime lt1 =  LocalTime.parse(\"10:23:12\");\n```", "```java\nLocalTime lt2 =  LocalTime.parse(\"20:23:14\");\n```", "```java\nDuration = Duration.between(lt1, lt2);\n```", "```java\nSystem.out.println(duration.toDays());     //prints: 0\n```", "```java\nSystem.out.println(duration.toHours());    //prints: 10\n```", "```java\nSystem.out.println(duration.toMinutes());  //prints: 600\n```", "```java\nSystem.out.println(duration.toSeconds());  //prints: 36002\n```", "```java\nSystem.out.println(duration.getSeconds()); //prints: 36002\n```", "```java\nSystem.out.println(duration.toNanos());    \n```", "```java\n                                       //prints: 36002000000000\n```", "```java\nSystem.out.println(duration.getNano());    //prints: 0.\n```", "```java\nvoid periodOfDayFromDateTime(String time, String pattern){\n```", "```java\n   LocalDateTime date = LocalDateTime.parse(time);\n```", "```java\n   DateTimeFormatter frm =\n```", "```java\n            DateTimeFormatter.ofPattern(pattern);\n```", "```java\n   System.out.print(date.format(frm));\n```", "```java\n} \n```", "```java\nvoid periodOfDayFromTime(String time, String pattern){\n```", "```java\n   LocalTime date = LocalTime.parse(time);\n```", "```java\n   DateTimeFormatter frm =\n```", "```java\n           DateTimeFormatter.ofPattern(pattern);\n```", "```java\n   System.out.print(date.format(frm));\n```", "```java\n}\n```", "```java\nperiodOfDayFromDateTime(\"2023-03-23T05:05:18.123456\", \n```", "```java\n           \"MM-dd-yyyy h a\"); //prints: 03-23-2023 5 AM\n```", "```java\nperiodOfDayFromDateTime(\"2023-03-23T05:05:18.123456\", \n```", "```java\n       \"MM-dd-yyyy h B\"); //prints: 03-23-2023 5 at night\n```", "```java\nperiodOfDayFromDateTime(\"2023-03-23T06:05:18.123456\", \n```", "```java\n                  \"h B\");   //prints: 6 in the morning\n```", "```java\nperiodOfDayFromTime(\"11:05:18.123456\", \"h B\"); \n```", "```java\n                            //prints: 11 in the morning\n```", "```java\nperiodOfDayFromTime(\"12:05:18.123456\", \"h B\"); \n```", "```java\n                          //prints: 12 in the afternoon\n```", "```java\nperiodOfDayFromTime(\"17:05:18.123456\", \"h B\"); \n```", "```java\n                          //prints: 5 in the afternoon\n```", "```java\nperiodOfDayFromTime(\"18:05:18.123456\", \"h B\"); \n```", "```java\n                          //prints: 6 in the evening\n```", "```java\nperiodOfDayFromTime(\"20:05:18.123456\", \"h B\"); \n```", "```java\n                          //prints: 8 in the evening\n```", "```java\nperiodOfDayFromTime(\"21:05:18.123456\", \"h B\"); \n```", "```java\n                         //prints: 9 at night\n```", "```java\n    List<String> list1 = Arrays.asList(\"s1\",\"s2\", \"s3\");\n    List<String> list2 = Arrays.asList(\"s3\", \"s4\");\n    Collections.copy(list1, list2);\n    System.out.println(list1);    \n    ```", "```java\n    Integer[][] ar1 = {{42}};\n    Integer[][] ar2 = {{42}};\n    System.out.print(Arrays.equals(ar1, ar2) + \" \"); \n    System.out.println(Arrays.deepEquals(arr3, arr4)); \n    ```", "```java\n    String[] arr1 = { \"s1\", \"s2\" };\n    String[] arr2 = { null };\n    String[] arr3 = null;\n    System.out.print(ArrayUtils.getLength(arr1) + \" \"); \n    System.out.print(ArrayUtils.getLength(arr2) + \" \"); \n    System.out.print(ArrayUtils.getLength(arr3) + \" \"); \n    System.out.print(ArrayUtils.isEmpty(arr2) + \" \"); \n    System.out.print(ArrayUtils.isEmpty(arr3));\n    ```", "```java\n     String str1 = \"\";\n     String str2 = null;\n     System.out.print((Objects.hash(str1) == \n                       Objects.hashCode(str2)) + \" \");\n     System.out.print(Objects.hash(str1) + \" \");\n     System.out.println(Objects.hashCode(str2) + \" \"); \n    ```", "```java\n    String[] arr = {\"c\", \"x\", \"a\"};\n    System.out.print(ObjectUtils.min(arr) + \" \");\n    System.out.print(ObjectUtils.median(arr) + \" \");\n    System.out.println(ObjectUtils.max(arr));\n    ```", "```java\n    LocalDate lc = LocalDate.parse(\"1900-02-23\");\n    System.out.println(lc.withYear(21)); \n    ```", "```java\n    LocalTime lt2 = LocalTime.of(20, 23, 12);\n    System.out.println(lt2.withNano(300));      \n    ```", "```java\n    LocalDate ld = LocalDate.of(2020, 2, 23);\n    LocalTime lt = LocalTime.of(20, 23, 12);\n    LocalDateTime ldt = LocalDateTime.of(ld, lt);\n    System.out.println(ldt);                \n    ```", "```java\n    LocalDateTime ldt = \n                  LocalDateTime.parse(\"2020-02-23T20:23:12\");\n    System.out.print(ldt.minus(Period.ofYears(2)) + \" \");\n    System.out.print(ldt.plus(Duration.ofMinutes(12)) + \" \");\n    System.out.println(ldt);\n    ```"]