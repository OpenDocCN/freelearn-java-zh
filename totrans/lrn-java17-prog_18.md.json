["```java\ndouble get(String id){\n```", "```java\n    try{\n```", "```java\n        TimeUnit.MILLISECONDS.sleep(100);\n```", "```java\n    } catch(InterruptedException ex){\n```", "```java\n        ex.printStackTrace();\n```", "```java\n    }\n```", "```java\n    return id * Math.random();\n```", "```java\n}\n```", "```java\nvoid getAverage(Stream<Integer> ids) {\n```", "```java\n    LocalTime start = LocalTime.now();\n```", "```java\n    double a = ids.mapToDouble(id -> new MeasuringSystem()\n```", "```java\n                  .get(id))\n```", "```java\n                  .average()\n```", "```java\n                  .orElse(0);\n```", "```java\n    System.out.println((Math.round(a * 100.) / 100.) + \" in \" +\n```", "```java\n       Duration.between(start, LocalTime.now()).toMillis() +  \n```", "```java\n                                                         \"ms\");\n```", "```java\n}\n```", "```java\nList<Integer> ids = IntStream.range(1, 11)\n```", "```java\n                             .mapToObj(i -> i)\n```", "```java\n                             .collect(Collectors.toList());\n```", "```java\ngetAverage(ids.stream());          //prints: 2.99 in 1030 ms\n```", "```java\ngetAverage(ids.parallelStream());  //prints: 2.34 in  214 ms\n```", "```java\nList<CompletableFuture<Double>> list = ids.stream()\n```", "```java\n     .map(id -> CompletableFuture.supplyAsync(() ->\n```", "```java\n  new MeasuringSystem().get(id))).collect(Collectors.toList());\n```", "```java\nLocalTime start = LocalTime.now();\n```", "```java\ndouble a = list.stream()\n```", "```java\n               .mapToDouble(cf -> cf.join().doubleValue())\n```", "```java\n               .average()\n```", "```java\n               .orElse(0);\n```", "```java\nSystem.out.println((Math.round(a * 100.) / 100.) + \" in \" +\n```", "```java\n  Duration.between(start, LocalTime.now()).toMillis() + \" ms\"); \n```", "```java\n                                         //prints: 2.92 in 6 ms\n```", "```java\nExecutorService pool = Executors.newFixedThreadPool(3);\n```", "```java\nList<CompletableFuture<Double>> list = ids.stream()\n```", "```java\n        .map(id -> CompletableFuture.supplyAsync(() -> \n```", "```java\n                         new MeasuringSystem().get(id), pool))\n```", "```java\n        .collect(Collectors.toList());\n```", "```java\n@FunctionalInterface\n```", "```java\npublic static interface Flow.Publisher<T> {\n```", "```java\n    public void subscribe(Flow.Subscriber<T> subscriber);\n```", "```java\n}\n```", "```java\npublic static interface Flow.Subscriber<T> {\n```", "```java\n    public void onSubscribe(Flow.Subscription subscription);\n```", "```java\n    public void onNext(T item);\n```", "```java\n    public void onError(Throwable throwable);\n```", "```java\n    public void onComplete();\n```", "```java\n}\n```", "```java\npublic static interface Flow.Subscription {\n```", "```java\n    public void request(long numberOfItems);\n```", "```java\n    public void cancel();\n```", "```java\n}\n```", "```java\npublic static interface Flow.Processor<T,R>\n```", "```java\n               extends Flow.Subscriber<T>, Flow.Publisher<R> {\n```", "```java\n}\n```", "```java\n<dependency>\n```", "```java\n    <groupId>io.reactivex.rxjava2</groupId>\n```", "```java\n    <artifactId>rxjava</artifactId>\n```", "```java\n    <version>2.2.21</version>\n```", "```java\n</dependency>\n```", "```java\ndouble a = IntStream.rangeClosed(1, 5)\n```", "```java\n                    .filter(i -> i % 2 == 0)\n```", "```java\n                    .mapToDouble(Double::valueOf)\n```", "```java\n                    .map(Math::sqrt)\n```", "```java\n                    .sum();\n```", "```java\nSystem.out.println(a);          //prints: 3.414213562373095\n```", "```java\nObservable.range(1, 5)\n```", "```java\n      .filter(i -> i % 2 == 0)\n```", "```java\n      .map(Math::sqrt)\n```", "```java\n      .reduce((r, d) -> r + d)\n```", "```java\n      .subscribe(System.out::println); \n```", "```java\n                                    //prints: 3.414213562373095\n```", "```java\nObservable<Double> observable = Observable.range(1, 5)\n```", "```java\n     .filter(i -> i % 2 == 0)\n```", "```java\n     .doOnNext(System.out::println)    //prints 2 and 4 twice\n```", "```java\n     .map(Math::sqrt);\n```", "```java\nobservable\n```", "```java\n     .reduce((r, d) -> r + d)\n```", "```java\n     .subscribe(System.out::println);  \n```", "```java\n                                    //prints: 3.414213562373095\n```", "```java\nobservable\n```", "```java\n     .reduce((r, d) -> r + d)\n```", "```java\n     .map(r -> r / 2)\n```", "```java\n     .subscribe(System.out::println);  \n```", "```java\n                                   //prints: 1.7071067811865475\n```", "```java\nObservable<Double> observable = Observable.range(1,5)\n```", "```java\n     .filter(i -> i % 2 == 0)\n```", "```java\n     .doOnNext(System.out::println)  //prints 2 and 4 only once\n```", "```java\n     .map(Math::sqrt)\n```", "```java\n     .cache();\n```", "```java\nobservable\n```", "```java\n     .reduce((r, d) -> r + d)\n```", "```java\n     .subscribe(System.out::println); \n```", "```java\n                                    //prints: 3.414213562373095\n```", "```java\nobservable\n```", "```java\n     .reduce((r, d) -> r + d)\n```", "```java\n     .map(r -> r / 2)\n```", "```java\n     .subscribe(System.out::println);  \n```", "```java\n                                   //prints: 1.7071067811865475\n```", "```java\nObservable<Integer> obs = Observable.range(1,5);\n```", "```java\nDouble d2 = obs.filter(i -> i % 2 == 0)\n```", "```java\n               .doOnNext(System.out::println)  //prints 2 and 4\n```", "```java\n               .map(Math::sqrt)\n```", "```java\n               .delay(100, TimeUnit.MILLISECONDS)\n```", "```java\n               .blockingLast();\n```", "```java\nSystem.out.println(d2);                        //prints: 2.0\n```", "```java\nList<Double> list = new ArrayList<>();\n```", "```java\nobs.filter(i -> i % 2 == 0)\n```", "```java\n   .doOnNext(System.out::println)  //prints 2 and 4\n```", "```java\n   .map(Math::sqrt)\n```", "```java\n   .delay(100, TimeUnit.MILLISECONDS)\n```", "```java\n   .subscribe(d -> {\n```", "```java\n        if(list.size() == 1){\n```", "```java\n            list.remove(0);\n```", "```java\n        }\n```", "```java\n        list.add(d);\n```", "```java\n   });\n```", "```java\nSystem.out.println(list);          //prints: []\n```", "```java\ntry {\n```", "```java\n    TimeUnit.MILLISECONDS.sleep(250);\n```", "```java\n} catch (InterruptedException e) {\n```", "```java\n    e.printStackTrace();\n```", "```java\n}\n```", "```java\nSystem.out.println(list);   //prints: [2.0]\n```", "```java\nFlowable<Integer> obs = Flowable.range(1,5);\n```", "```java\nDouble d2 = obs.filter(i -> i % 2 == 0)\n```", "```java\n        .doOnNext(System.out::println)  //prints 2 and 4\n```", "```java\n        .map(Math::sqrt)\n```", "```java\n        .delay(100, TimeUnit.MILLISECONDS)\n```", "```java\n        .blockingLast();\n```", "```java\nSystem.out.println(d2);                 //prints: 2.0\n```", "```java\nSingle<Integer> obs2 = Single.just(42);\n```", "```java\nint i2 = obs2.delay(100, TimeUnit.MILLISECONDS).blockingGet();\n```", "```java\nSystem.out.println(i2);                 //prints: 42\n```", "```java\nMaybe<Integer> obs3 = Maybe.just(42); \n```", "```java\nint i3 = obs3.delay(100, TimeUnit.MILLISECONDS).blockingGet(); \n```", "```java\nSystem.out.println(i3);                 //prints: 42 \n```", "```java\n(1) Completable obs = Completable.fromRunnable(() -> {\n```", "```java\n         System.out.println(\"Run\");           //prints: Run\n```", "```java\n         try {\n```", "```java\n              TimeUnit.MILLISECONDS.sleep(200);\n```", "```java\n         } catch (InterruptedException e) {\n```", "```java\n              e.printStackTrace();\n```", "```java\n         }\n```", "```java\n    });                                           \n```", "```java\n(2) Throwable ex = obs.blockingGet();\n```", "```java\n(3) System.out.println(ex);                   //prints: null\n```", "```java\n//(4) ex = obs.blockingGet(15, TimeUnit.MILLISECONDS);\n```", "```java\n// java.util.concurrent.TimeoutException: \n```", "```java\n//      The source did not signal an event for 15 milliseconds.\n```", "```java\n(5) ex = obs.blockingGet(150, TimeUnit.MILLISECONDS);\n```", "```java\n(6) System.out.println(ex);                   //prints: null\n```", "```java\n(7) obs.blockingAwait();\n```", "```java\n(8) obs.blockingAwait(15, TimeUnit.MILLISECONDS);\n```", "```java\nObservable<Long> cold = \n```", "```java\n        Observable.interval(10, TimeUnit.MILLISECONDS);\n```", "```java\ncold.subscribe(i -> System.out.println(\"First: \" + i));\n```", "```java\npauseMs(25);\n```", "```java\ncold.subscribe(i -> System.out.println(\"Second: \" + i));\n```", "```java\npauseMs(55);\n```", "```java\nvoid pauseMs(long ms){\n```", "```java\n    try {\n```", "```java\n        TimeUnit.MILLISECONDS.sleep(ms);\n```", "```java\n    } catch (InterruptedException e) {\n```", "```java\n        e.printStackTrace();\n```", "```java\n    }\n```", "```java\n}\n```", "```java\nConnectableObservable<Long> hot = \n```", "```java\n      Observable.interval(10, TimeUnit.MILLISECONDS).publish();\n```", "```java\nhot.connect();\n```", "```java\nhot.subscribe(i -> System.out.println(\"First: \" + i));\n```", "```java\npauseMs(25);\n```", "```java\nhot.subscribe(i -> System.out.println(\"Second: \" + i));\n```", "```java\npauseMs(55);\n```", "```java\nPublishProcessor<Integer> hot = PublishProcessor.create();\n```", "```java\nhot.observeOn(Schedulers.io(), true)\n```", "```java\n   .subscribe(System.out::println, Throwable::printStackTrace);\n```", "```java\nfor (int i = 0; i < 1_000_000; i++) {\n```", "```java\n    hot.onNext(i);\n```", "```java\n}\n```", "```java\nPublishProcessor<Integer> hot = PublishProcessor.create();\n```", "```java\nhot.observeOn(Schedulers.io(), true)\n```", "```java\n   .delay(10, TimeUnit.MILLISECONDS)\n```", "```java\n   .subscribe(System.out::println, Throwable::printStackTrace);\n```", "```java\nfor (int i = 0; i < 1_000_000; i++) {\n```", "```java\n    hot.onNext(i);\n```", "```java\n}\n```", "```java\nPublishProcessor<Integer> hot = PublishProcessor.create();\n```", "```java\nhot.onBackpressureDrop(v -> System.out.println(\"Dropped: \"+ v))\n```", "```java\n   .observeOn(Schedulers.io(), true)\n```", "```java\n   .subscribe(System.out::println, Throwable::printStackTrace);\n```", "```java\nfor (int i = 0; i < 1_000_000; i++) {\n```", "```java\n    hot.onNext(i);\n```", "```java\n}\n```", "```java\nObservable<Integer> obs = Observable.range(1,5);\n```", "```java\nList<Double> list = new ArrayList<>();\n```", "```java\nDisposable disposable =\n```", "```java\n     obs.filter(i -> i % 2 == 0)\n```", "```java\n        .doOnNext(System.out::println)     //prints 2 and 4\n```", "```java\n        .map(Math::sqrt)\n```", "```java\n        .delay(100, TimeUnit.MILLISECONDS)\n```", "```java\n        .subscribe(d -> {\n```", "```java\n            if(list.size() == 1){\n```", "```java\n                list.remove(0);\n```", "```java\n            }\n```", "```java\n            list.add(d);\n```", "```java\n        });\n```", "```java\nSystem.out.println(disposable.isDisposed()); //prints: false\n```", "```java\nSystem.out.println(list);                    //prints: []\n```", "```java\ntry {\n```", "```java\n    TimeUnit.MILLISECONDS.sleep(200);\n```", "```java\n} catch (InterruptedException e) {\n```", "```java\n    e.printStackTrace();\n```", "```java\n}\n```", "```java\nSystem.out.println(disposable.isDisposed());  //prints: true\n```", "```java\nSystem.out.println(list);                     //prints: [2.0]\n```", "```java\nObservable<Integer> obs = Observable.range(1,5);\n```", "```java\nList<Double> list = new ArrayList<>();\n```", "```java\nDisposable disposable =\n```", "```java\n     obs.filter(i -> i % 2 == 0)\n```", "```java\n        .doOnNext(System.out::println)       //prints 2 and 4\n```", "```java\n        .map(Math::sqrt)\n```", "```java\n        .delay(100, TimeUnit.MILLISECONDS)\n```", "```java\n        .subscribe(d -> {\n```", "```java\n            if(list.size() == 1){\n```", "```java\n                list.remove(0);\n```", "```java\n            }\n```", "```java\n            list.add(d);\n```", "```java\n        });\n```", "```java\nSystem.out.println(disposable.isDisposed()); //prints: false\n```", "```java\nSystem.out.println(list);                    //prints: []\n```", "```java\ndisposable.dispose();\n```", "```java\ntry {\n```", "```java\n    TimeUnit.MILLISECONDS.sleep(200);\n```", "```java\n} catch (InterruptedException e) {\n```", "```java\n    e.printStackTrace();\n```", "```java\n}\n```", "```java\nSystem.out.println(disposable.isDisposed()); //prints: true\n```", "```java\nSystem.out.println(list);                    //prints: []\n```", "```java\npublic static Observable<T> create(ObservableOnSubscribe<T> source)\n```", "```java\nvoid subscribe(ObservableEmitter<T> emitter)\n```", "```java\nObservableOnSubscribe<String> source = emitter -> {\n```", "```java\n    emitter.onNext(\"One\");\n```", "```java\n    emitter.onNext(\"Two\");\n```", "```java\n    emitter.onComplete();\n```", "```java\n};\n```", "```java\nObservable.create(source)\n```", "```java\n          .filter(s -> s.contains(\"w\"))\n```", "```java\n          .subscribe(v -> System.out.println(v),\n```", "```java\n                     e -> e.printStackTrace(),\n```", "```java\n                    () -> System.out.println(\"Completed\"));\n```", "```java\npauseMs(100); \n```", "```java\nObservable<String> obs = Observable.fromArray(\"one\", \"two\");\n```", "```java\nobs.map(s -> s.contains(\"w\") ? 1 : 0)\n```", "```java\n   .forEach(System.out::print);              //prints: 01\n```", "```java\nSystem.out.println();\n```", "```java\nList<String> os = new ArrayList<>();\n```", "```java\nList<String> noto = new ArrayList<>();\n```", "```java\nobs.flatMap(s -> Observable.fromArray(s.split(\"\")))\n```", "```java\n        .groupBy(s -> \"o\".equals(s) ? \"o\" : \"noto\")\n```", "```java\n        .subscribe(g -> g.subscribe(s -> {\n```", "```java\n            if (g.getKey().equals(\"o\")) {\n```", "```java\n                os.add(s);\n```", "```java\n            } else {\n```", "```java\n                noto.add(s);\n```", "```java\n            }\n```", "```java\n        }));\n```", "```java\nSystem.out.println(os);                  //prints: [o, o]\n```", "```java\nSystem.out.println(noto);                //prints: [n, e, t, w]\n```", "```java\nObservable<String> obs = Observable.just(\"onetwo\")\n```", "```java\n        .flatMap(s -> Observable.fromArray(s.split(\"\")));\n```", "```java\n// obs emits \"onetwo\" as characters           \n```", "```java\nobs.map(s -> {\n```", "```java\n            if(\"t\".equals(s)){\n```", "```java\n               NonBlockingOperators.pauseMs(15);\n```", "```java\n            }\n```", "```java\n            return s;\n```", "```java\n        })\n```", "```java\n        .debounce(10, TimeUnit.MILLISECONDS)\n```", "```java\n        .forEach(System.out::print);               //prints: eo\n```", "```java\nobs.distinct().forEach(System.out::print);      //prints: onetw\n```", "```java\nobs.elementAt(3).subscribe(System.out::println);   //prints: t\n```", "```java\nobs.filter(s -> s.equals(\"o\"))\n```", "```java\n   .forEach(System.out::print);                    //prints: oo\n```", "```java\nobs.firstElement().subscribe(System.out::println); //prints: o\n```", "```java\nobs.ignoreElements().subscribe(() -> \n```", "```java\n       System.out.println(\"Completed!\"));  //prints: Completed!\n```", "```java\nObservable.interval(5, TimeUnit.MILLISECONDS)\n```", "```java\n   .sample(10, TimeUnit.MILLISECONDS)\n```", "```java\n   .subscribe(v -> System.out.print(v + \" \")); \n```", "```java\n                                            //prints: 1 3 4 6 8 \n```", "```java\npauseMs(50);\n```", "```java\nObservable<String> obs1 = Observable.just(\"one\")\n```", "```java\n             .flatMap(s -> Observable.fromArray(s.split(\"\")));\n```", "```java\nObservable<String> obs2 = Observable.just(\"two\")\n```", "```java\n             .flatMap(s -> Observable.fromArray(s.split(\"\")));\n```", "```java\nObservable.concat(obs2, obs1, obs2)\n```", "```java\n          .subscribe(System.out::print);    //prints: twoonetwo\n```", "```java\nObservable.combineLatest(obs2, obs1, (x,y) -> \"(\"+x+y+\")\")\n```", "```java\n          .subscribe(System.out::print); //prints: (oo)(on)(oe)\n```", "```java\nSystem.out.println();\n```", "```java\nobs1.join(obs2, i -> Observable.timer(5, \n```", "```java\n                TimeUnit.MILLISECONDS),i -> Observable.timer(5, \n```", "```java\n                TimeUnit.MILLISECONDS),(x,y) -> \"(\"+x+y+\")\")\n```", "```java\n                                 .subscribe(System.out::print); \n```", "```java\n                 //prints: (ot)(nt)(et)(ow)(nw)(ew)(oo)(no)(eo)\n```", "```java\nObservable.merge(obs2, obs1, obs2)\n```", "```java\n          .subscribe(System.out::print);  \n```", "```java\n                       //prints: twoonetwo obs1.startWith(\"42\")\n```", "```java\n    .subscribe(System.out::print);         //prints: 42one\n```", "```java\nObservable.zip(obs1, obs2, obs1,  (x,y,z) -> \"(\"+x+y+z+\")\")\n```", "```java\n          .subscribe(System.out::print); \n```", "```java\n                                      //prints: (oto)(nwn)(eoe) \n```", "```java\nObservable<String> obs = Observable.just(\"one\")\n```", "```java\n              .flatMap(s -> Observable.fromArray(s.split(\"\")));\n```", "```java\nObservable.error(new RuntimeException(\"MyException\"))\n```", "```java\n  .flatMap(x -> Observable.fromArray(\"two\".split(\"\")))\n```", "```java\n  .subscribe(System.out::print,\n```", "```java\n      e -> System.out.println(e.getMessage()) \n```", "```java\n                                          //prints: MyException\n```", "```java\n  );\n```", "```java\nObservable.error(new RuntimeException(\"MyException\"))\n```", "```java\n          .flatMap(y -> Observable.fromArray(\"two\".split(\"\")))\n```", "```java\n          .onErrorResumeNext(obs)\n```", "```java\n          .subscribe(System.out::print);          //prints: one\n```", "```java\nObservable.error(new RuntimeException(\"MyException\"))\n```", "```java\n          .flatMap(z -> Observable.fromArray(\"two\".split(\"\")))\n```", "```java\n          .onErrorReturnItem(\"42\")\n```", "```java\n          .subscribe(System.out::print);          //prints: 42\n```", "```java\nObservable<String> obs = Observable.just(\"one\")\n```", "```java\n            .flatMap(s -> Observable.fromArray(s.split(\"\")));\n```", "```java\nobs.doOnComplete(() -> System.out.println(\"Completed!\")) \n```", "```java\n        .subscribe(v -> {\n```", "```java\n            System.out.println(\"Subscribe onComplete: \" + v);\n```", "```java\n        });        \n```", "```java\npauseMs(25);\n```", "```java\nObservable<String> obs = Observable.just(\"one\")\n```", "```java\n          .flatMap(s -> Observable.fromArray(s.split(\"\")));\n```", "```java\nobs.delay(5, TimeUnit.MILLISECONDS)\n```", "```java\n   .subscribe(System.out::print);           //prints: one\n```", "```java\npauseMs(10);\n```", "```java\nSystem.out.println(); //used here just to break the line\n```", "```java\nObservable source = Observable.range(1,5);\n```", "```java\nDisposable disposable = source.subscribe();\n```", "```java\nObservable.using(\n```", "```java\n  () -> disposable,\n```", "```java\n  x -> source,\n```", "```java\n  y -> System.out.println(\"Disposed: \" + y) \n```", "```java\n                               //prints: Disposed: DISPOSED\n```", "```java\n)\n```", "```java\n.delay(10, TimeUnit.MILLISECONDS)\n```", "```java\n.subscribe(System.out::print);              //prints: 12345\n```", "```java\npauseMs(25);\n```", "```java\nObservable<String> obs = Observable.just(\"one\")\n```", "```java\n              .flatMap(s -> Observable.fromArray(s.split(\"\")));\n```", "```java\nSingle<Boolean> cont = obs.contains(\"n\");\n```", "```java\nSystem.out.println(cont.blockingGet());          //prints: true\n```", "```java\nobs.defaultIfEmpty(\"two\")\n```", "```java\n   .subscribe(System.out::print);                 //prints: one\n```", "```java\nObservable.empty().defaultIfEmpty(\"two\")\n```", "```java\n          .subscribe(System.out::print);          //prints: two\n```", "```java\nSingle<Boolean> equal = Observable.sequenceEqual(obs, \n```", "```java\n                                 Observable.just(\"one\"));\n```", "```java\nSystem.out.println(equal.blockingGet());        //prints: false\n```", "```java\nequal = Observable.sequenceEqual(Observable.just(\"one\"), \n```", "```java\n                                 Observable.just(\"one\"));\n```", "```java\nSystem.out.println(equal.blockingGet());         //prints: true\n```", "```java\nequal = Observable.sequenceEqual(Observable.just(\"one\"), \n```", "```java\n                                 Observable.just(\"two\"));\n```", "```java\nSystem.out.println(equal.blockingGet());        //prints: false\n```", "```java\nFlowable<Double> obs = Flowable.fromArray(1.,2.,3.);\n```", "```java\nobs.onBackpressureBuffer().subscribe();\n```", "```java\n//or\n```", "```java\nobs.onBackpressureLatest().subscribe();\n```", "```java\n          Executors.newCachedThreadPool();\n```", "```java\n          Executors.newSingleThreadExecutor();\n```", "```java\n          Executors.newFixedThreadPool(int nThreads);\n```", "```java\n          Executors.newScheduledThreadPool(int poolSize);\n```", "```java\n          Executors.newWorkStealingPool(int parallelism);\n```", "```java\nObservable.fromArray(\"one\",\"two\",\"three\")\n```", "```java\n          .doAfterNext(s -> System.out.println(\"1: \" + \n```", "```java\n                Thread.currentThread().getName() + \" => \" + s))\n```", "```java\n          .flatMap(w -> Observable.fromArray(w.split(\"\"))\n```", "```java\n                           .observeOn(Schedulers.computation())\n```", "```java\n              //.flatMap(s -> {             \n```", "```java\n              //      CPU-intensive calculations go here\n```", "```java\n              // }  \n```", "```java\n                .doAfterNext(s -> System.out.println(\"2: \" + \n```", "```java\n                Thread.currentThread().getName() + \" => \" + s))\n```", "```java\n          )\n```", "```java\n          .subscribe(s -> System.out.println(\"3: \" + s));\n```", "```java\npauseMs(100);\n```", "```java\nObservable.fromArray(\"one\",\"two\",\"three\")\n```", "```java\n        .observeOn(Schedulers.computation())\n```", "```java\n        .doAfterNext(s -> System.out.println(\"1: \" + \n```", "```java\n                Thread.currentThread().getName() + \" => \" + s))\n```", "```java\n        .flatMap(w -> Observable.fromArray(w.split(\"\"))\n```", "```java\n                .observeOn(Schedulers.computation())\n```", "```java\n                .doAfterNext(s -> System.out.println(\"2: \" + \n```", "```java\n                Thread.currentThread().getName() + \" => \" + s))\n```", "```java\n        )\n```", "```java\n        .subscribe(s -> System.out.println(\"3: \" + s));\n```", "```java\npauseMs(100);\n```", "```java\nParallelFlowable src = \n```", "```java\n            Flowable.fromArray(\"one\",\"two\",\"three\").parallel();\n```", "```java\nsrc.runOn(Schedulers.computation())\n```", "```java\n   .doAfterNext(s -> System.out.println(\"1: \" + \n```", "```java\n                Thread.currentThread().getName() + \" => \" + s))\n```", "```java\n   .flatMap(w -> Flowable.fromArray(((String)w).split(\"\")))\n```", "```java\n   .runOn(Schedulers.computation())\n```", "```java\n   .doAfterNext(s -> System.out.println(\"2: \" + \n```", "```java\n                Thread.currentThread().getName() + \" => \" + s))\n```", "```java\n   .sequential()\n```", "```java\n   .subscribe(s -> System.out.println(\"3: \" + s));\n```", "```java\npauseMs(100);\n```", "```java\nObservable.just(\"a\", \"b\", \"c\")\n```", "```java\n          .doAfterNext(s -> System.out.println(\"1: \" + \n```", "```java\n                Thread.currentThread().getName() + \" => \" + s))\n```", "```java\n          .subscribeOn(Schedulers.computation())\n```", "```java\n          .subscribe(s -> System.out.println(\"2: \" + \n```", "```java\n               Thread.currentThread().getName() + \" => \" + s));\n```", "```java\npauseMs(100);\n```", "```java\nObservable.just(\"a\", \"b\", \"c\")\n```", "```java\n          .subscribeOn(Schedulers.computation())\n```", "```java\n          .doAfterNext(s -> System.out.println(\"1: \" + \n```", "```java\n                Thread.currentThread().getName() + \" => \" + s))\n```", "```java\n          .subscribe(s -> System.out.println(\"2: \" + \n```", "```java\n               Thread.currentThread().getName() + \" => \" + s));\n```", "```java\npauseMs(100);\n```", "```java\nObservable.just(\"a\", \"b\", \"c\")\n```", "```java\n          .subscribeOn(Schedulers.computation())\n```", "```java\n          .doAfterNext(s -> System.out.println(\"1: \" + \n```", "```java\n                Thread.currentThread().getName() + \" => \" + s))\n```", "```java\n          .observeOn(Schedulers.computation())\n```", "```java\n          .subscribe(s -> System.out.println(\"2: \" + \n```", "```java\n               Thread.currentThread().getName() + \" => \" + s));\n```", "```java\npauseMs(100);\n```"]