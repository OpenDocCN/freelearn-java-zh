- en: Mobile Testing on iOS and Android using Appium
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In all the previous chapters, we have worked on web applications that are loaded
    in desktop browsers. But with the increasing number of mobile users, businesses
    today have to serve their users on mobile devices as well. In this chapter, you
    will learn about the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The different types of mobile applications and testing tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to test mobile application using Selenium WebDriver, more specifically,
    with Appium
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing mobile applications on Android and iOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using cloud-based device labs for real device testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Appium` is an open source mobile-automation framework used to test mobile
    apps on iOS and Android platforms using the JSON wire protocol with Selenium WebDriver.
    Appium replaces the iPhoneDriver and AndroidDriver APIs in Selenium 2 that were
    used to test mobile web applications.'
  prefs: []
  type: TYPE_NORMAL
- en: Different forms of mobile applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are three different forms in which an application can reach a user on
    the mobile platform:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Native apps**: Native apps are purely specific to the target mobile platform.
    They are developed in the platform-supported languages and are very much tied
    to underlying SDKs. For iOS, applications are developed in the Objective-C or
    Swift programming language and are dependent on iOS SDK; similarly, for the Android
    platform, they are developed in Java or Kotlin and are dependent on Android SDK.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**m.site**: Also known as a mobile website, it is a mini version of your web
    application that loads on the browsers of your mobile devices. On iOS devices,
    it can be Safari or Chrome, and on Android devices, it can be the Android default
    browser or Chrome. For example, on your iOS or Android device, open your browser
    and type in [www.facebook.com](http://www.facebook.com). Before the page loads,
    you will observe that a URL redirection happens from [www.facebook.com](http://www.facebook.com)
    to [m.facebook.com](http://m.facebook.com). The Facebook application servers realize
    that the request has originated from a mobile device and start serving the mobile
    site rather than the desktop site. These m.sites use JavaScript and HTML5 to be
    developed like your normal web applications:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/897b1347-98fc-4c96-9ce4-2e6698ec15f6.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Hybrid apps**: The Hybrid app is a combination of the native app and the
    web app. When you develop a native app, some parts of it load HTML web pages into
    the app trying to make the user feel that they are using a native application.
    They generally use WebViews in native apps to load the web pages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, as a test-scripts developer, you have to test all these different applications
    on various mobile devices.
  prefs: []
  type: TYPE_NORMAL
- en: Available software tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To automate the testing of your applications on mobile devices, there are many
    software tools available. The following are some of the tools that are built based
    on Selenium WebDriver:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Appium**: A cross-platform and cross-technology mobile testing framework
    based on Selenium for native, hybrid, and mobile web applications. Appium enables
    the use and extension of the existing Selenium WebDriver framework to build mobile
    tests. As it uses Selenium WebDriver to drive the tests, we can use any language
    to create tests for which a Selenium client library exists. You can create and
    execute your test scripts against Android and iOS platforms without having to
    change the underlying driver. Appium can also work with Firefox OS platforms.
    In the rest of the chapter, we will see how we can work with Appium.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Selendroid**: This driver is similar to iOSDriver and can execute your native,
    hybrid, and m.site application test scripts on the Android platform. It uses the
    native UI Automator library provided by Google. The test scripts communicate with
    the Selendroid driver over the JSON wire protocol while using its favourite client-language
    bindings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating iOS and Android tests using Appium
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Appium is a popular and widely used tool that can be employed to automate mobile-app
    testing for both the Android and iOS platforms. It can be used to automate native,
    m.sites, and hybrid applications. It internally uses WebDriver's JSON wire protocol.
  prefs: []
  type: TYPE_NORMAL
- en: Automating iOS Application tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For automating iOS app tests, Appium uses XCTest or UI Automation (for older
    iOS versions):'
  prefs: []
  type: TYPE_NORMAL
- en: '**XCTest**: You can use XCTest to create and run unit tests, performance tests,
    and UI tests for your iOS applications built for iOS 9.3 and higher. It integrates
    with Xcode''s testing workflow for testing the iOS application. Appium internally
    uses XCTest for automating the iOS applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**UI Automation**: For testing apps developed for iOS 9.3 and lower, you need
    to use UI Automation. Appium receives the commands from test scripts over the
    JSON wire protocol. Appium sends these commands to Apple Instruments so that they
    can be executed on the app that is launched in a simulator or real device. While
    doing so, Appium translates the JSON commands into UI Automation JavaScript commands
    that can be understood by the instruments. The instruments take care of launching
    and closing the app in the simulator or device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Appium works as a Remote WebDriver and receives the commands from your test
    scripts over the JSON wire protocol. These commands are passed to XCTest or Apple
    Instruments to be executed on the app launched on a simulator or a real device.
    This process is shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0c2d9f49-39a1-4edd-b570-87d7c37113e5.png)'
  prefs: []
  type: TYPE_IMG
- en: After the command is executed against your app on the simulator or device, the
    target app sends the response to XCTest or UI Automation Instrument, which is
    transferred to Appium in the JavaScript response format. Appium translates the
    responses into Selenium WebDriver JSON wire protocol responses and sends them
    back to your test script.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main advantages of using Appium for your iOS automation testing are as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: It uses the iOS platform-supported XCTest or the UI Automation library and instruments
    provided by Apple itself.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Even though you are using the JavaScript library, you, and a test-script developer,
    and your tests are not really tied to it. You can use your own Selenium WebDriver
    client-language bindings, such as Java, Ruby, or Python, to develop your test
    scripts. Appium will take care of translating them into JavaScript for you.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You don't have to modify your native or hybrid apps for the purpose of testing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating Android application tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Automating Android tests for your Android apps is similar to automating iOS
    apps tests. Except for the fact that your target platform is changing, your test
    scripts will not undergo any change. The following diagram that shows the workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b060e218-e8e7-489f-8092-8666734b8978.png)'
  prefs: []
  type: TYPE_IMG
- en: Again, Appium works as a Remote WebDriver and receives the commands from your
    test scripts over the JSON wire protocol. These commands are passed to Google
    UI Automator, which comes with Android SDK, to be executed on the native app launched
    on a simulator or a real device. Before the commands are passed on the UI Automator,
    Appium translates the JSON commands into UI Automator commands that can be understood
    by UI Automator. This UI Automator will launch your app on the simulator or real
    device and start executing your test-script commands on it. After the command
    is executed against your app on the simulator or device, the target app sends
    the response to the UI Automator, which is transferred to Appium in the UI Automator
    response format. Appium translates the UI Automator responses into Selenium WebDriver
    JSON wire protocol responses and sends them back to your test script.
  prefs: []
  type: TYPE_NORMAL
- en: This is the high-level architecture that helps you understand how Appium works
    with Android and iOS devices to execute your test commands.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites for Appium
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start discussing some working examples for Appium, we need to install
    some prerequisite tools for the iOS and Android platforms. We need to set up Xcode
    and Android Studio for this purpose, for which I'll be showing the examples on
    macOS.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Xcode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To set up the Xcode, we will perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the latest Xcode from [https://developer.apple.com/xcode/](https://developer.apple.com/xcode/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After downloading it, install and open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to Preferences | Components to download and install command-line tools
    and iOS Simulators, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/438d70e8-cfdc-4060-be80-6bda85a9d803.png)'
  prefs: []
  type: TYPE_IMG
- en: If you are using a real device, you need a provisioning profile installed on
    the device and USB-debugging enabled on it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Try to launch the iPhone simulator and verify that it works. You can launch
    the simulator by navigating to Xcode | Open Developer Tool | iOS Simulator. The
    simulator should look similar to what is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e1de65ea-0d2c-4391-8e3d-bc078040fda4.png)'
  prefs: []
  type: TYPE_IMG
- en: Setting up Android SDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You need to install Android SDK from [https://developer.android.com/studio/](https://developer.android.com/studio/).
    Download and install Android Studio.
  prefs: []
  type: TYPE_NORMAL
- en: 'Launch the installed Android Studio. Now download any Android whose API level
    is 27, and install it. You can do that by navigating to Tools |  SDK Manager.
    You should see something similar to what is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6e2f86c0-47a9-4085-bf04-31a4a462123a.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, we are installing Android 8.1, which has an API level of 27.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Android Emulator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want to execute your test scripts on an Android Emulator, you have to
    create one. To create one, we will perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In Android Studio, open the AVD Manager by navigating to Tools | AVD Manager.
    It launches the AVD Manager, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d8b68ab6-50f7-47a3-8730-7f57528d7a1a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a new virtual device or emulator by clicking on the Create Virtual Device...
    button. You should see a window that will take all the necessary information from
    you, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d3cca45e-c895-4045-9731-cbb2c28f06e7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Launch the emulator to see whether it was created successfully. It might take
    several minutes for the Android Virtual Device to start. The following screenshot
    shows a started Android Emulator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6055aea8-1d4d-4ee3-8e7f-d7b6b53115e0.png)'
  prefs: []
  type: TYPE_IMG
- en: Installing Appium
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download Appium from [http://appium.io/.](http://appium.io/.) Click
    on the Download Appium button to download the Appium specific to your workstation
    platform. Here, I am using a Mac, so it will download the Appium DMG file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy Appium to the `Applications` folder, and try to launch it. The first time
    it is launched, it asks for your authorization to run the iOS simulators, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b5f94734-f809-46db-9359-e75f1348078c.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Launch to Start Server button. By default, it starts at `http://localhost:4723`.
    This is the remote URL to which your test scripts should direct the test commands.
  prefs: []
  type: TYPE_NORMAL
- en: Automating for iOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we have Appium running, so let''s create a test that will check the search
    test on the iPhone Safari browser. Let''s use the `DesiredCapabilities` class
    to provide capabilities to Appium for running tests on iPhone X and iOS 11.4,
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, the preceding code is similar to the test script for `RemoteWebDriver`.
    However, there are a few differences. The following code depicts that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The Appium Java Client library provides the `IOSDriver` class that supports
    executed tests on the iOS platform to run the tests with Appium. However, for
    Appium to use the desired platform, we need to pass a set of desired  The `platformName`
    capability is used by Appium to decide on which platform the test script should
    get executed. In this example, we used the iPhone X Simulator. To run the tests
    on an iPad, we can specify the iPad Simulator.
  prefs: []
  type: TYPE_NORMAL
- en: When running the tests on a real device, we need to specify the value of the
    iPhone or iPad for the device capability. Appium will pick the device that is
    connected to the Mac via USB. The last desired capability that we used is browserName,
    which is used by Appium to launch the Safari browser.
  prefs: []
  type: TYPE_NORMAL
- en: Automating for Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Testing apps on Android is similar to testing on iOS. For Android, we will use
    a real device instead of an emulator (a simulator is called an emulator in the
    Android community). We will use the same application to test in Chrome for Android.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this example, I am using the Samsung Galaxy S4 Android handset. We need
    to install the Google Chrome browser on the device. You can get Google Chrome
    at Google''s Play store in case it is not pre-installed on your device. Next,
    we need to connect the device to the machine on which the Appium server is running.
    Let''s run the following command to get a list of emulators or devices connected
    to the machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The`Android Debug Bridge` (ADB) is a command-line tool available in the Android
    SDK that lets you communicate with an emulator instance or an actual Android device
    connected to your computer. The `./adb devices` command will display a list of
    all the Android devices that are connected to the host, as per the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s modify the script we created for iOS to use the Android capabilities
    and AndroidDriver class to execute tests on real Android devices, as shown in
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we assigned the `platformName` capability value to
    `Android`, which will be used by Appium to run tests on Android. As we want to
    run the tests in Chrome for Android, we have mentioned Chrome in the browser capability
    section of the code. The other important change we made was using the `AndroidDriver`
    class from the Appium Java client libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Appium will use the first device from the list of devices that `adb` returns,
    as shown in the following screenshot. It will use the desired capabilities that
    we mentioned, and will launch the Chrome browser on the device and start executing
    the test-script commands.
  prefs: []
  type: TYPE_NORMAL
- en: Using Device Cloud to run tests on Real Devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Appium supports testing on mobile simulators, emulators, and real devices. To
    set up a mobile-testing lab with real devices requires capital investment as well
    as the maintenance of devices and infrastructure. Mobile phone manufacturers release
    new phone models and operating system updates almost every day and your application
    has to be compatible with the new launches.
  prefs: []
  type: TYPE_NORMAL
- en: To respond to these changes faster and keep the investment to a minimum, we
    can use Cloud-based mobile-testing labs. There are a number of vendors, such as
    Amazon Web Services, BrowserStack, and Sauce Labs, that provide cloud-based real-mobile-device
    labs to execute tests without requiring any upfront investment in real devices.
    You pay only for the amount of time used for testing. These vendors also allow
    you to run automated tests using Appium in their Device clouds.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will explore BrowserStack to run tests on its real-device
    Cloud:'
  prefs: []
  type: TYPE_NORMAL
- en: You need to have a BrowserStack account with a subscription to the **Automate**
    feature. You can sign up for a free trial account at [https://www.browserstack.com/](https://www.browserstack.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We need to get the desired capabilities from BrowserStack based on device combination.
    BrowserStack provides capability-suggestions based on the selected combination
    of devices and platforms. Go to [https://www.browserstack.com/automate/java](https://www.browserstack.com/automate/java)
    and select an OS and Device :'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1b973f88-79a8-4af1-804a-9f548829ccf4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Based on your selection, BrowserStack will auto-generate code using your username
    and access key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8b734eee-5357-4da2-9c8a-cfe2a7fe24a3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will not use the suggested code in step 3, and instead change our test as
    shown in the following code. Remember, you need to use the username and access
    key shown in the auto-generated code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the test from your IDE, and it will run in the BrowserStack cloud.
    You can monitor the tests in the BrowserStack dashboard where it will show you
    capabilities used, the status of each step, console logs, network logs, Appium
    logs, and a video of the execution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ddd572c8-832e-40f6-b531-f8025357dfe0.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed the different ways a business can reach out to
    its users on mobile platforms. We also learned about the various software tools
    that are created using Selenium WebDriver. Finally, we went through one of the
    upcoming software tools and modified our test script to work with iOS and Android
    platforms.
  prefs: []
  type: TYPE_NORMAL
- en: In the next [chapter](92f91d98-4a76-4ea5-90cd-840ba7fabb96.xhtml), we will see
    how to create parameterized and data-driven tests using `TestNG`. This will help
    us to reuse tests and increase test coverage.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are the different types of mobile apps?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which classes does the Appium Java Client library provide for testing iOS and
    Android applications?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the command to list the Android devices connected to a computer via
    USB ports?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the default port used by Appium Server?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can check out the following link for more information about the topics
    covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: For more examples of using Appium, please visit its website and GitHub forums
    at [http://appium.io/](http://appium.io/) and [https://github.com/appium/appium/tree/master/sample-code/java](https://github.com/appium/appium/tree/master/sample-code/java)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
