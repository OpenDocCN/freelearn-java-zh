- en: Chapter 9. Saving Your Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are many types of Bukkit plugins. Some of them require you to save data.
    By saving data, I am referring to saving information to the system''s hard drive.
    This is needed if the information must stay intact, even after the server restarts.
    At this point, none of the plugins that we created have this requirement. Examples
    of plugins that will save data are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Economy plugins must save information about how much money each player has
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Land protection plugins must save information about which plots of land are
    claimed and who their owner is
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Questing plugins must store all the information for each quest, such as who
    has completed it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are countless uses for saving data when a server is shut down. In this
    chapter, we will create a teleportation plugin that saves various warp locations
    to a file. Again, we will save these locations to a file so that we do not need
    to create them again after the server shuts down. You are already familiar with
    the YAML file format. Therefore, we will utilize the YAML configuration to save
    and load data. In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The type of data that you can save
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The data in a plugin that is worth saving and the frequency of saving it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Expanding a prewritten teleportation plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and using a `ConfigurationSerializable` object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving data in a YAML configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading the saved data from the YAML configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Types of data that can be saved
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You may recall, as discussed in the previous chapter, that only certain data
    types can be stored in a YAML file. These include primitive types, such as `int`
    and `boolean`, strings, lists, and types that implement `ConfigurationSerializable`,
    such as `ItemStack`.
  prefs: []
  type: TYPE_NORMAL
- en: For this reason, we can only save these specific types of data.
  prefs: []
  type: TYPE_NORMAL
- en: You may find yourself wanting to save other types of data such as a `Player`
    object, or in the case of the teleportation plugin, a `Location` object. These
    may not be stored directly, but they can usually be broken down in order to save
    the important values that are needed to load it later. As an example, you cannot
    save a `Player` object, but you can save the players' **UUID** (**Universal Unique
    Identifier**), which can be converted into a string. Each `Player` has one UUID.
    Hence, it is the only information that we need to be able to refer to that specific
    player later.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Storing a Players name is not an adequate solution, since the name provided
    in the Minecraft account can be changed.
  prefs: []
  type: TYPE_NORMAL
- en: A `Location` object also cannot be stored directly, but it can be broken down
    to its world, `x`, `y`, and `z` coordinates, `yaw`, and `pitch`. The `x, y, z,
    yaw`, and `pitch` values are simply numbers that can be stored. As for the world,
    it also has a UUID that will never change. Therefore, a location is broken down
    into one string (`world uuid`), three doubles (`x`, `y`, `z`), and two floats
    (`yaw` and `pitch`).
  prefs: []
  type: TYPE_NORMAL
- en: As you create your own plugins, you may have classes that you wish to store
    in a file, such as a `BankAccount` object. As mentioned earlier, we can do this
    with any class that implements `ConfigurationSerializable`. `ConfigurationSerializable`
    means that the object can be translated to a form that can be stored within a
    configuration. This configuration can then be written to a file. In the teleportation
    plugin, we will create a `location` object that does exactly this.
  prefs: []
  type: TYPE_NORMAL
- en: Which data to save and when
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We know what can be saved to a file, but what should we save? Writing data to
    a file uses disk space. Therefore, we want to save only what we need to. It is
    better to think, "Which information do I want to keep after the server shuts down?"
    For example, a banking plugin will want to keep the balance of each account. As
    another example, a **PvP** arena plugin will not care about having information
    about an arena match. It is quite likely that the match will simply be canceled
    as the server is shutting down. When considering the teleportation plugin, we
    will want to still have the locations of each warp after the server is shut down.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our next concern is when to save this information. Writing data to files has
    the potential to **lag** a server if it is a large amount of data. If you are
    unfamiliar with the term "lag", it is a phrase that is used to indicate that the
    server is running slowly. You know when this happens because the game becomes
    very choppy and players and mobs seem to move around sporadically. This is an
    unpleasant experience for everyone. Hence, you want to save your data only when
    you have to. There are three typical options for how often you want to save your
    data:'
  prefs: []
  type: TYPE_NORMAL
- en: Every time the data is modified
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Periodically, such as every hour
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the server/plugin is shut down
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These options are ordered by how safe they are. For instance, if your data is
    saved only when the server is shut down, then you run the risk of losing unsaved
    data in case the server crashes. If data is saved every hour, then in the worst
    case, you will lose only one hour's worth of data. For this reason, the first
    option should always be used when possible. The second and third options should
    be considered only if the plugin handles a large amount of data and/or the data
    is modified very often, such as several times every minute. The data of the teleportation
    plugin will only be modified when someone creates/deletes a warp or sets their
    home warp location. Therefore, we will invoke the `save` method every time the
    data is modified.
  prefs: []
  type: TYPE_NORMAL
- en: A sample teleportation plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this project, you will be given an incomplete teleportation plugin. You
    already know how to program most of this project. Therefore, we will discuss only
    the following three topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a class that implements `ConfigurationSerializable`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `save` method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `load` method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The rest of the plugin is provided and can be downloaded from [www.packtpub.com](http://www.packtpub.com),
    as mentioned in the preface. The code that you will be working on is Version 0.1
    of the plugin Warper. Go through the plugin and read the comments to try to understand
    everything that it does. Both `Maps` and `try/catch` blocks are used in this project.
    If you do not know what either of those are, that is okay. They will be explained
    when it is time to use them yourself. Note that the `SerializableLocation` class
    is the location class, which implements `ConfigurationSerializable`; we will discuss
    this next.
  prefs: []
  type: TYPE_NORMAL
- en: Writing a ConfigurationSerializable class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Serialization** is the process of translating data or objects into a form
    that can be written to a file. In the plugin Warper, we will need to save the
    Bukkit locations. Locations cannot be serialized themselves. Therefore, we will
    make our own class that holds the Bukkit `Location` object data and is able to
    convert it to and from a map. If you are new to maps, they are a very useful type
    of collection that we will use throughout this project. Maps have keys and values.
    Each key points to a specific value. The `Warper` plugin is a good example of
    how maps can be used. When teleporting, a player will choose a specific location
    to warp to by name. If all the warp locations were in a list, we would have to
    iterate through the list until the warp location with the correct name was found.
    With a map, we can pass the key (the name of the warp) to the map, and it will
    return the value (the warp location).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new class called `SerializableLocation`, which contains a private
    variable that holds the Bukkit `Location object`. The first constructor will require
    a `Location` object. We will also include a `getLocation` method. The following
    code is how the beginning of the new class looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you add `implements ConfigurationSerializable`, your IDE should warn you
    about implementing all the abstract methods. The method that you must override
    is `serialize`. This will return a map representation of your object. We already
    mentioned each piece of data that we will need. Now, we just have to assign each
    piece of data a name and put it in a map. To add data to a map, you can call the
    `put` method. This method requires two parameters, namely a key and a value of
    the key. A key is simply a name for the piece of data that allows us to reference
    it later. The value is the serializable data. To find out more about maps, you
    can read the **Javadoc** at [https://docs.oracle.com/javase/8/docs/api/java/util/Map.html](https://docs.oracle.com/javase/8/docs/api/java/util/Map.html).
    For the `serialize` method, we will need to get all the data that we mentioned
    earlier and put it in a map, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This handles the saving portion, but we still have to handle the loading. The
    simplest way to do this is by adding a constructor that takes the map as a parameter,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Loading is essentially the opposite of saving. We pull each value from the map
    and then use it to create the Bukkit `Location` object. As a safeguard, we will
    first verify that the world is actually loaded. If the world is not loaded, the
    location will not exist. We do not want the plugin to crash because of this. There
    is also no reason why you need to try loading the location of a nonexistent world,
    because no one will be able to teleport to it anyway.
  prefs: []
  type: TYPE_NORMAL
- en: Each object that you get from the map will have to be cast to its original type,
    which was done in the previous code. The `float` values are an exceptional case.
    Each of the `float` values will be read as a `double` value. The `double value`
    is similar to `float`, but it is more precise. Therefore, loading the `float`
    values as the `double` values and then converting them will not cause data loss.
  prefs: []
  type: TYPE_NORMAL
- en: 'Both of these methods will be used by Bukkit. As a programmer, you will only
    have to store this object in the YAML configuration. This can be done by simply
    using the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you can retrieve the data later by using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Bukkit uses the `serialize` method and the constructor to handle the rest.
  prefs: []
  type: TYPE_NORMAL
- en: 'The class name and path are used to reference this class. To see an example
    of this, take a look at the `ItemStack` object in the `config.yml` file for the
    `MobEnhancer` plugin. An example of this class has also been provided:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The path will of course have your own namespace, not `com.codisimus`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This works fine, but it may cause confusion, especially with long pathnames.
    However, there is a way to ask Bukkit to reference this class by using an alias.
    Perform the following two steps to complete this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `@SerializableAs` annotation just above the class, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Register your class within the `ConfigurationSerialization class`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This can be done in the `onEnable` method. Just ensure that it is executed before
    you attempt loading the data.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The serializable name must be unique. Therefore, it is better to include your
    plugin name rather than simply `Location`. That way, you can have a serializable
    location for another plugin without them conflicting.
  prefs: []
  type: TYPE_NORMAL
- en: Saving data to a YAML configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we are ready to complete the `save` method. We want to save data to a
    YAML file, much like how we did in `config.yml`. However, we do not want to save
    it to `config.yml`, because that serves a different purpose. The first thing that
    we will need to do is create a new YAML configuration, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will store all the information that we wish to save. This is done
    by setting objects to specific paths, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The acceptable types for `value` were mentioned earlier in this chapter. In
    the teleportation plugin, we have maps, which contain the `SerializableLocation`
    method. Maps can be added to a YAML configuration as long as they are a map of
    strings to an object that is `ConfigurationSerializable`. **Hashmaps** are added
    to a configuration in a different manner. You must create a configuration section
    using the map.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code shows how we will add the teleportation data to the configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Once all the data is stored, all that is left to do is write the configuration
    to the `save` file. This is done by invoking the `save` method on `config` and
    passing the file that we wish to use. Calling the `getDataFolder` method of the
    plugin will give us the directory in which we should store all the plugin data.
    This is also where `config.yml` is located. We can use this directory to reference
    the file in which we will save the data, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We will put all of these lines of code inside a `try` block to catch an exception
    that may occur. If you don''t already know about exceptions, they are thrown when
    there is some sort of error or when something unexpected occurs. A `try/catch`
    block can be used to prevent the error from causing your plugin to crash. In this
    case, an exception is thrown if the specified file cannot be written for some
    reason. This reason may be that the user has insufficient privileges or the file
    location cannot be found. Therefore, the `save` method with the `try` block is
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is a sample `warps.yml` file that will be created using the Warper
    plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Loading data from a YAML configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that the `save` method is complete, we are ready to write the `load` method.
    You are already familiar with loading data using the Bukkit configuration API.
    What we''ll do now is similar to retrieving values from `config.yml`, as discussed
    in the previous chapter. However, we must first manually load the configuration
    using the following code, which will be different. We should only do this if the
    file actually exists. The file will not exist the first time the plugin is used.
    Therefore, we do not want an error to occur in that situation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have the YAML configuration loaded, we can get values from it.
    The data has been placed into two unique configuration sections. We will loop
    through each key of both the sections in order to load all the locations. To get
    a specific object from a section, all that we need to do is call the `get` method
    and cast it to the correct object. You can see how this is done in the completed
    `load` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Now that the plugin is complete, you can test it on your server. Set a home
    location as well as some warp locations and then view the save file. Stop and
    then start the server again to verify that the plugin does indeed load the correct
    data.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The plugin that we created in this chapter invokes the `save` method whenever
    the data is modified. In the next chapter, you will learn how to periodically
    save data. If you wish to save data when the server is shut down, simply call
    the `save` method from the `onDisable` method of the plugin's `main` class. You
    can use your programming skills to expand this plugin. You can add permission
    nodes, which is done by simply adding them to `plugin.yml`. You can also add a
    `config.yml` file to modify messages or perhaps the amount of time that needs
    to be set for the upcoming warp delay. If you wish to incorporate a listener,
    you can listen for a `PlayerRespawnEvent`. Then, you can set a player's respawn
    location to their home. There are countless more ways to customize this plugin
    to your liking. Many teleportation plugins use a warp delay to prevent players
    from teleporting away from a fight. In the next chapter, we will expand this project
    by adding a warp delay using the Bukkit scheduler.
  prefs: []
  type: TYPE_NORMAL
