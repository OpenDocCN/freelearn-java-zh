["```java\nimport javax.ejb.Stateless;\nimport javax.inject.Inject;\n\n@Stateless\npublic class CarManufacturer {\n\n    @Inject\n    CarFactory carFactory;\n\n    @Inject\n    CarStorage carStorage;\n\n    public Car manufactureCar(Specification spec) {\n        Car car = carFactory.createCar(spec);\n        carStorage.store(car);\n        return car;\n    }\n}\n```", "```java\nimport javax.enterprise.inject.Produces;\n\npublic class CarFactoryProducer {\n\n    @Produces\n    public CarFactory exposeCarFactory() {\n        CarFactory factory = new BMWCarFactory();\n        // use custom logic\n        return factory;\n    }\n}\n```", "```java\nimport javax.enterprise.event.Event;\n\n@Stateless\npublic class CarManufacturer {\n\n    @Inject\n    CarFactory carFactory;\n\n    @Inject\n    Event<CarCreated> carCreated;\n\n    public Car manufactureCar(Specification spec) {\n        Car car = carFactory.createCar(spec);\n        carCreated.fire(new CarCreated(spec));\n        return car;\n    }\n}\n```", "```java\nimport javax.enterprise.event.Observes;\n\npublic class CreatedCarListener {\n\n    public void onCarCreated(@Observes CarCreated event) {\n        Specification spec = event.getSpecification();\n        // handle event\n    }\n}\n```", "```java\nimport javax.ejb.Singleton;\n\n@Singleton\npublic class CarStorage {\n\n    private final Map<String, Car> cars = new HashMap<>();\n\n    public void store(Car car) {\n        cars.put(car.getId(), car);\n    }\n}\n```", "```java\nimport javax.ejb.Lock;\nimport javax.ejb.LockType;\n\n@Singleton\npublic class CarStorage {\n\n    private final Map<String, Car> cars = new HashMap<>();\n\n    @Lock\n    public void store(Car car) {\n        cars.put(car.getId(), car);\n    }\n\n    @Lock(LockType.READ)\n    public Car retrieve(String id) {\n        return cars.get(id);\n    }\n}\n```", "```java\nimport javax.ejb.ConcurrencyManagement;\nimport javax.ejb.ConcurrencyManagementType;\n\n@Singleton\n@ConcurrencyManagement(ConcurrencyManagementType.BEAN)\npublic class CarStorage {\n\n    private final Map<String, Car> cars = new ConcurrentHashMap<>();\n\n    public void store(Car car) {\n        cars.put(car.getId(), car);\n    }\n\n    public Car retrieve(String id) {\n        return cars.get(id);\n    }\n}\n```", "```java\n@Stateless\npublic class CarEnthusiast {\n\n    @Inject\n    GermanCar car;\n\n    ...\n}\n```", "```java\n@BMW\npublic class BMWCar implements GermanCar {\n    ...\n}\n\n@Porsche\npublic class PorscheCar implements GermanCar {\n    ...\n}\n```", "```java\nimport javax.inject.Qualifier;\nimport java.lang.annotation.Documented;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\n\n@Qualifier\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface BMW {\n}\n```", "```java\n@Stateless\npublic class CarEnthusiast {\n\n    @Inject\n    @BMW\n    GermanCar car;\n\n    ...\n}\n```", "```java\nimport javax.enterprise.inject.Specializes;\n\n@Specializes\npublic class ElectricBMWCar extends BMWCar {\n    ...\n}\n```", "```java\npublic interface GermanCarManufacturer {\n    GermanCar manufactureCar();\n}\n```", "```java\n@BMW\npublic class BMWCarManufacturer implements GermanCarManufacturer {\n\n    @Override\n    public GermanCar manufactureCar() {\n        return new BMWCar();\n    }\n}\n\n@Porsche\npublic class PorscheCarManufacturer implements GermanCarManufacturer {\n\n    @Override\n    public GermanCar manufactureCar() {\n        return new PorscheCar();\n    }\n}\n```", "```java\n@Stateless\npublic class CarEnthusiast {\n\n    @Inject @BMW\n    GermanCarManufacturer carManufacturer;\n\n    // create German cars\n}\n```", "```java\npublic class Car {\n\n    ...\n\n    public LogBook createDriverLog() {\n        // create logbook statement\n    }\n}\n```", "```java\nimport javax.enterprise.inject.Produces;\n\npublic class BMWCarManufacturer {\n\n    ...\n\n    @Produces\n    @BMW\n    public GermanCar manufactureCar() {\n        // use properties\n        ...\n    }\n}\n```", "```java\npublic interface Coffee {\n\n    double getCaffeine();\n    double getCalories();\n}\n\npublic class CoffeeGarnish implements Coffee {\n\n    private final Coffee coffee;\n\n    protected CoffeeGarnish(Coffee coffee) {\n        this.coffee = coffee;\n    }\n\n    @Override\n    public double getCaffeine() {\n        return coffee.getCaffeine();\n    }\n\n    @Override\n    public double getCalories() {\n        return coffee.getCalories();\n    }\n}\n```", "```java\npublic class BlackCoffee implements Coffee {\n\n    @Override\n    public double getCaffeine() {\n        return 100.0;\n    }\n\n    @Override\n    public double getCalories() {\n        return 0;\n    }\n}\n```", "```java\npublic class MilkCoffee extends CoffeeGarnish {\n\n    protected MilkCoffee(Coffee coffee) {\n        super(coffee);\n    }\n\n    @Override\n    public double getCalories() {\n        return super.getCalories() + 20.0;\n    }\n}\n\npublic class SugarCoffee extends CoffeeGarnish {\n\n    protected SugarCoffee(Coffee coffee) {\n        super(coffee);\n    }\n\n    @Override\n    public double getCalories() {\n        return super.getCalories() + 30.0;\n    }\n}\n\npublic class CreamCoffee extends CoffeeGarnish {\n\n    protected CreamCoffee(Coffee coffee) {\n        super(coffee);\n    }\n\n    @Override\n    public double getCalories() {\n        return super.getCalories() + 100.0;\n    }\n}\n```", "```java\nCoffee coffee = new CreamCoffee(new SugarCoffee(new BlackCoffee()));\ncoffee.getCaffeine(); // 100.0\ncoffee.getCalories(); // 130.0\n```", "```java\npublic interface CoffeeMaker {\n    void makeCoffee();\n}\n\npublic class FilterCoffeeMaker implements CoffeeMaker {\n\n    @Override\n    public void makeCoffee() {\n        // brew coffee\n    }\n}\n```", "```java\nimport javax.decorator.Decorator;\nimport javax.decorator.Delegate;\nimport javax.enterprise.inject.Any;\n\n@Decorator\npublic class CountingCoffeeMaker implements CoffeeMaker {\n\n    private static final int MAX_COFFEES = 3;\n    private int count;\n\n    @Inject\n    @Any\n    @Delegate\n    CoffeeMaker coffeeMaker;\n\n    @Override\n    public void makeCoffee() {\n        if (count >= MAX_COFFEES)\n            throw new IllegalStateException(\"Reached maximum coffee limit.\");\n        count++;\n\n        coffeeMaker.makeCoffee();\n    }\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans \n\n        xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee\n        http://xmlns.jcp.org/xml/ns/javaee/beans_1_1.xsd\"\n        bean-discovery-mode=\"all\">\n    <decorators>\n        <class>com.example.coffee.CountingCoffeeMaker</class>\n    </decorators>\n</beans>\n```", "```java\npublic class CoffeeConsumer {\n\n    @Inject\n    CoffeeMaker coffeeMaker;\n\n    ...\n}\n```", "```java\npublic class BaristaCoffeeShop {\n\n    private BeanStore beanStore;\n    private Grinder grinder;\n    private EspressoMachine espressoMachine;\n    private Scale scale;\n    private Thermometer thermometer;\n    private Hygrometer hygrometer;\n\n    public GroundBeans grindBeans(Beans beans, double weight) { ... }\n\n    public Beans fetchBeans(BeanType type) { ... }\n\n    public double getTemperature() { ... }\n\n    public double getHumidity() { ... }\n\n    public Coffee makeEspresso(GroundBeans beans, Settings settings) { ... }\n}\n```", "```java\n@Stateless\npublic class Barista {\n\n    @Inject\n    BaristaCoffeeShop coffeeShop;\n\n    public Coffee makeCoffee() {\n        // check temperature & humidity\n        // calculate amount of beans & machine settings\n        // fetch & grind beans\n        // operate espresso machine\n    }\n}\n```", "```java\nimport java.util.function.Function;\n\npublic class Greeter {\n\n    private Function<String, String> strategy;\n\n    String greet(String name) {\n        return strategy.apply(name) + \", my name is Duke\";\n    }\n\n    public static void main(String[] args) {\n        Greeter greeter = new Greeter();\n\n        Function<String, String> formalGreeting = name -> \"Dear \" + name;\n        Function<String, String> informalGreeting = name -> \"Hey \" + name;\n\n        greeter.strategy = formalGreeting;\n        String greeting = greeter.greet(\"Java\");\n\n        System.out.println(greeting);\n    }\n\n}\n```", "```java\npublic class Greeter {\n\n    @Inject\n    Function<String, String> greetingStrategy;\n\n    public String greet(String name) {\n        return greetingStrategy.apply(name);\n    }\n}\n```", "```java\npublic class GreetingStrategyExposer {\n\n    private Function<String, String> formalGreeting = name -> \"Dear \" + name;\n    private Function<String, String> informalGreeting = name -> \"Hey \" + name;\n\n    @Produces\n    public Function<String, String> exposeStrategy() {\n        // select a strategy\n        ...\n        return strategy;\n    }\n}\n```", "```java\npublic interface GreetingStrategy {\n    boolean isAppropriate(LocalTime localTime);\n    String greet(String name);\n}\n\npublic class MorningGreetingStrategy implements GreetingStrategy {\n    @Override\n    public boolean isAppropriate(LocalTime localTime) {\n        ...\n    }\n\n    @Override\n    public String greet(String name) {\n        return \"Good morning, \" + name;\n    }\n}\n\npublic class AfternoonGreetingStrategy implements GreetingStrategy { ... }\npublic class EveningGreetingStrategy implements GreetingStrategy { ... }\n```", "```java\npublic class GreetingStrategySelector {\n\n    @Inject\n    @Any\n    Instance<GreetingStrategy> strategies;\n\n    @Produces\n    public Function<String, String> exposeStrategy() {\n        for (GreetingStrategy strategy : strategies) {\n            if (strategy.isAppropriate(LocalTime.now()))\n                return strategy::greet;\n        }\n        throw new IllegalStateException(\"Couldn't find an appropriate greeting\");\n    }\n}\n```", "```java\n{\n     \"name\": \"Java\",\n     \"author\": \"Duke\",\n     \"isbn\": \"123-2-34-456789-0\",\n     \"_links\": {\n         \"self\": \"https://api.example.com/books/12345\",\n         \"author\": \"https://api.example.com/authors/2345\",\n         \"related-books\": \"https://api.example.com/books/12345/related\"\n    }\n}\n```", "```java\n{\n    \"class\": [ \"book\" ],\n    \"properties\": {\n        \"isbn\": \"123-2-34-456789-0\",\n        \"name\": \"Java\",\n        \"author\": \"Duke\",\n        \"availability\": \"IN_STOCK\",\n        \"price\": 29.99\n    }\n    \"actions\": [\n        {\n            \"name\": \"add-to-cart\",\n            \"title\": \"Add Book to cart\",\n            \"method\": \"POST\",\n            \"href\": \"http://api.example.com/shopping-cart\",\n            \"type\": \"application/json\",\n            \"fields\": [\n                { \"name\": \"isbn\", \"type\": \"text\" },\n                { \"name\": \"quantity\", \"type\": \"number\" }\n            ]\n        }\n    ],\n    \"links\": [\n        { \"rel\": [ \"self\" ], \"href\": \"http://api.example.com/books/1234\" }\n    ]\n}\n```", "```java\nimport javax.ws.rs.Path;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\n\n@Path(\"users\")\n@Produces(MediaType.APPLICATION_JSON)\npublic class UsersResource {\n\n    @Inject\n    UserStore userStore;\n\n    @GET\n    public List<User> getUsers() {\n        return userStore.getUsers();\n    }\n}\n```", "```java\nimport javax.ws.rs.ApplicationPath;\nimport javax.ws.rs.core.Application;\n\n@ApplicationPath(\"resources\")\npublic class JAXRSConfiguration extends Application {\n    // no configuration required\n}\n```", "```java\nimport javax.ws.rs.Consumes;\nimport javax.ws.rs.PathParam;\nimport javax.ws.rs.POST;\nimport javax.ws.rs.core.Context;\nimport javax.ws.rs.core.Response;\nimport javax.ws.rs.core.UriInfo;\n\n@Path(\"users\")\n@Produces(MediaType.APPLICATION_JSON)\n@Consumes(MediaType.APPLICATION_JSON)\npublic class UsersResource {\n\n    @Inject\n    UserStore userStore;\n\n    @Context\n    UriInfo uriInfo;\n\n    @GET\n    public List<User> getUsers() {\n        return userStore.getUsers();\n    }\n\n    @GET\n    @Path(\"{id}\")\n    public User getUser(@PathParam(\"id\") long id) {\n        return userStore.getUser(id);\n    }\n\n    @POST\n    public Response createUser(User user) {\n        long id = userStore.create(user);\n\n        URI userUri = uriInfo.getBaseUriBuilder()\n                .path(UsersResource.class)\n                .path(UsersResource.class, \"getUser\")\n                .build(id);\n\n        return Response.created(userUri).build();\n    }\n\n}\n```", "```java\nimport javax.json.bind.annotation.JsonbProperty;\nimport javax.json.bind.annotation.JsonbTransient;\n\npublic class User {\n\n    @JsonbTransient\n    private long id;\n\n    @JsonbProperty(\"username\")\n    private String name;\n\n    ...\n}\n```", "```java\npublic class Book {\n\n    @JsonbTransient\n    private long id;\n\n    private String name;\n    private String author;\n    private String isbn;\n\n    @JsonbProperty(\"_links\")\n    private Map<String, URI> links;\n\n    ...\n}\n```", "```java\n@Path(\"books\")\n@Produces(MediaType.APPLICATION_JSON)\npublic class BooksResource {\n\n    @Inject\n    BookStore bookStore;\n\n    @Context\n    UriInfo uriInfo;\n\n    @GET\n    public List<Book> getBooks() {\n        List<Book> books = bookStore.getBooks();\n        books.forEach(this::addLinks);\n        return books;\n    }\n\n    @GET\n    @Path(\"{id}\")\n    public Book getBook(@PathParam(\"id\") long id) {\n        Book book = bookStore.getBook(id);\n        addLinks(book);\n        return book;\n    }\n\n    private void addLinks(Book book) {\n        URI selfUri = uriInfo.getBaseUriBuilder()\n                .path(BooksResource.class)\n                .path(BooksResource.class, \"getBook\")\n                .build(book.getId());\n\n        book.getLinks().put(\"self\", selfUri);\n        // other links\n    }\n}\n```", "```java\n[\n    {\n         \"name\": \"Java\",\n         \"author\": \"Duke\",\n         \"isbn\": \"123-2-34-456789-0\",\n         \"_links\": {\n             \"self\": \"https://api.example.com/books/12345\",\n             \"author\": \"https://api.example.com/authors/2345\",\n             \"related-books\": \"https://api.example.com/books/12345/related\"\n        }\n    },\n    ...\n]\n```", "```java\nimport javax.json.Json;\nimport javax.json.JsonObject;\n...\n\nJsonObject object = Json.createObjectBuilder()\n    .add(\"hello\", Json.createArrayBuilder()\n        .add(\"hello\")\n        .build())\n    .add(\"key\", \"value\")\n    .build();\n```", "```java\n{\n    \"hello\": [\n        \"hello\"\n    ],\n    \"key\": \"value\"\n}\n```", "```java\nimport javax.json.JsonArray;\nimport javax.json.stream.JsonCollectors;\n\n@Path(\"books\")\npublic class BooksResource {\n\n    @Inject\n    BookStore bookStore;\n\n    @Context\n    UriInfo uriInfo;\n\n    @GET\n    public JsonArray getBooks() {\n        return bookStore.getBooks().stream()\n                .map(this::buildBookJson)\n                .collect(JsonCollectors.toJsonArray());\n    }\n\n    @GET\n    @Path(\"{id}\")\n    public JsonObject getBook(@PathParam(\"id\") long id) {\n        Book book = bookStore.getBook(id);\n        return buildBookJson(book);\n    }\n\n    private JsonObject buildBookJson(Book book) {\n        URI selfUri = uriInfo.getBaseUriBuilder()\n                .path(BooksResource.class)\n                .path(BooksResource.class, \"getBook\")\n                .build(book.getId());\n\n        URI authorUri = ...\n\n        return Json.createObjectBuilder()\n                .add(\"name\", book.getName())\n                .add(\"author\", book.getName())\n                .add(\"isbn\", book.getName())\n                .add(\"_links\", Json.createObjectBuilder()\n                        .add(\"self\", selfUri.toString())\n                        .add(\"author\", authorUri.toString()))\n                .build();\n    }\n}\n```", "```java\npublic class EntityBuilder {\n\n    public JsonObject buildForBook(Book book, URI selfUri) {\n        return Json.createObjectBuilder()\n                ...\n    }\n}\n```", "```java\nimport javax.json.bind.annotation.JsonbTypeAdapter;\n\npublic class Employee {\n\n    @JsonbTransient\n    private long id;\n    private String name;\n    private String email;\n\n    @JsonbTypeAdapter(value = OrganizationTypeAdapter.class)\n    private Organization organization;\n\n    ...\n}\n```", "```java\nimport javax.json.bind.adapter.JsonbAdapter;\n\npublic class OrganizationTypeAdapter implements JsonbAdapter<Organization, String> {\n\n    @Inject\n    OrganizationStore organizationStore;\n\n    @Override\n    public String adaptToJson(Organization organization) {\n        return String.valueOf(organization.getId());\n    }\n\n    @Override\n    public Organization adaptFromJson(String string) {\n        long id = Long.parseLong(string);\n        Organization organization = organizationStore.getOrganization(id);\n\n        if (organization == null)\n            throw new IllegalArgumentException(\"Could not find organization for ID \" + string);\n\n        return organization;\n    }\n}\n```", "```java\nimport javax.validation.Valid;\nimport javax.validation.constraints.NotNull;\n\n@Path(\"users\")\n@Produces(MediaType.APPLICATION_JSON)\n@Consumes(MediaType.APPLICATION_JSON)\npublic class UsersResource {\n\n    ...\n\n    @POST\n    public Response createUser(@Valid @NotNull User user) {\n        ...\n    }\n}\n```", "```java\nimport javax.validation.constraints.Email;\nimport javax.validation.constraints.NotBlank;\n\npublic class User {\n\n    @JsonbTransient\n    private long id;\n\n    @NotBlank\n    private String name;\n\n    @Email\n    private String email;\n\n    ...\n}\n```", "```java\nimport javax.validation.ConstraintViolationException;\nimport javax.ws.rs.ext.ExceptionMapper;\nimport javax.ws.rs.ext.Provider;\n\n@Provider\npublic class ValidationExceptionMapper implements ExceptionMapper<ConstraintViolationException> {\n\n    @Override\n    public Response toResponse(ConstraintViolationException exception) {\n        Response.ResponseBuilder builder = Response.status(Response.Status.BAD_REQUEST);\n\n        exception.getConstraintViolations()\n                .forEach(v -> {\n                    builder.header(\"Error-Description\", ...);\n                });\n        return builder.build();\n    }\n}\n```", "```java\npublic class User {\n\n    @JsonbTransient\n    private long id;\n\n    @NotBlank\n    @UserNameNotTaken\n    private String name;\n\n    @Email\n    private String email;\n    ...\n}\n```", "```java\nimport javax.validation.Constraint;\nimport javax.validation.Payload;\n\n@Constraint(validatedBy = UserNameNotTakenValidator.class)\n@Documented\n@Retention(RUNTIME)\n@Target({METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER, TYPE_USE})\npublic @interface UserNameNotTaken {\n\n    String message() default \"\";\n\n    Class<?>[] groups() default {};\n    Class<? extends Payload>[] payload() default {};\n}\n```", "```java\nimport javax.validation.ConstraintValidator;\nimport javax.validation.ConstraintValidatorContext;\n\npublic class UserNameNotTakenValidator implements ConstraintValidator<UserNameNotTaken, String> {\n\n    @Inject\n    UserStore userStore;\n\n    public void initialize(UserNameNotTaken constraint) {\n        // nothing to do\n    }\n\n    public boolean isValid(String string, ConstraintValidatorContext context) {\n        return !userStore.isNameTaken(string);\n    }\n}\n```", "```java\n@Path(\"users\")\n@Produces(MediaType.APPLICATION_JSON)\n@Consumes(MediaType.APPLICATION_JSON)\npublic class UsersResource {\n\n    ...\n\n    @POST\n    public Response createUser(@Valid @ValidUser JsonObject json) {\n\n        User user = readUser(json);\n        long id = userStore.create(user);\n        ...\n    }\n\n    private User readUser(JsonObject object) {\n        ...\n    }\n}\n```", "```java\n@Constraint(validatedBy = ValidUserValidator.class)\n@Documented\n@Retention(RUNTIME)\n@Target({METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER, TYPE_USE})\npublic @interface ValidUser {\n\n    String message() default \"\";\n\n    Class<?>[] groups() default {};\n\n    Class<? extends Payload>[] payload() default {};\n}\n```", "```java\npublic class ValidUserValidator implements ConstraintValidator<ValidUser, JsonObject> {\n\n    public void initialize(ValidUser constraint) {\n        // nothing to do\n    }\n\n    public boolean isValid(JsonObject json, ConstraintValidatorContext context) {\n        ...\n    }\n}\n```", "```java\nimport javax.ejb.ApplicationException;\n\n@ApplicationException\npublic class GreetingException extends RuntimeException {\n\n    public GreetingException(String message) {\n        super(message);\n    }\n}\n```", "```java\nimport javax.annotation.PostConstruct;\nimport javax.annotation.PreDestroy;\nimport javax.enterprise.context.ApplicationScoped;\nimport javax.ws.rs.client.*;\nimport java.util.concurrent.TimeUnit;\n\n@ApplicationScoped\npublic class CoffeePurchaser {\n\n    private Client client;\n    private WebTarget target;\n\n    @PostConstruct\n    private void initClient() {\n        client = ClientBuilder.newClient();\n        target = client.target(\"http://coffee.example.com/beans/purchases/\");\n    }\n\n    public OrderId purchaseBeans(BeanType type) {\n        // construct purchase payload from type\n        Purchase purchase = ...\n\n        BeanOrder beanOrder = target\n                .request(MediaType.APPLICATION_JSON_TYPE)\n                .post(Entity.json(purchase))\n                .readEntity(BeanOrder.class);\n\n        return beanOrder.getId();\n    }\n\n    @PreDestroy\n    public void closeClient() {\n        client.close();\n    }\n}\n```", "```java\n@ApplicationScoped\npublic class CoffeePurchaser {\n\n    ...\n\n    @PostConstruct\n    private void initClient() {\n        client = ClientBuilder.newBuilder()\n                .connectTimeout(100, TimeUnit.MILLISECONDS)\n                .readTimeout(2, TimeUnit.SECONDS)\n                .build();\n        target = client.target(\"http://coffee.example.com/beans/purchases/\");\n    }\n\n    ...\n}\n```", "```java\nimport javax.interceptor.AroundInvoke;\nimport javax.interceptor.Interceptor;\nimport javax.interceptor.InvocationContext;\n\n@Interceptor\npublic class FailureToNullInterceptor {\n\n    @AroundInvoke\n    public Object aroundInvoke(InvocationContext context) {\n        try {\n            return context.proceed();\n        } catch (Exception e) {\n            ...\n            return null;\n        }\n    }\n}\n```", "```java\n{\n    ... example as shown before\n    ... properties of book resource\n    \"actions\": [\n        {\n            \"name\": \"add-to-cart\",\n            \"title\": \"Add Book to cart\",\n            \"method\": \"POST\",\n            \"href\": \"http://api.example.com/shopping-cart\",\n            \"type\": \"application/json\",\n            \"fields\": [\n                { \"name\": \"isbn\", \"type\": \"text\" },\n                { \"name\": \"quantity\", \"type\": \"number\" }\n            ]\n        }\n    ],\n    \"links\": ...\n}\n```", "```java\npublic class BookClient {\n\n    @Inject\n    EntityMapper entityMapper;\n\n    public Book retrieveBook(URI uri) {\n        Entity book = retrieveEntity(uri);\n        return entityMapper.decodeBook(uri, book.getProperties());\n    }\n\n    public void addToCart(Book book, int quantity) {\n        Entity bookEntity = retrieveEntity(book.getUri());\n\n        JsonObjectBuilder properties = Json.createObjectBuilder();\n        properties.add(\"quantity\", quantity);\n\n        Entity entity = entityMapper.encodeBook(book);\n        entity.getProperties().forEach(properties::add);\n\n        performAction(bookEntity, \"add-to-cart\", properties.build());\n    }\n\n    private Entity retrieveEntity(URI uri) {\n        ...\n    }\n\n    private void performAction(Entity entity, String actionName,\n            JsonObject properties) {\n        ...\n    }\n}\n```", "```java\ndata: This is a message\n\nevent: namedmessage\ndata: This message has an event name\n\nid: 10\ndata: This message has an id which will be sent as\n 'last event ID' if the client reconnects\n```", "```java\nimport javax.ws.rs.DefaultValue;\nimport javax.ws.rs.HeaderParam;\nimport javax.ws.rs.InternalServerErrorException;\nimport javax.ws.rs.core.HttpHeaders;\nimport javax.ws.rs.sse.*;\n\n@Path(\"events-examples\")\n@Singleton\npublic class EventsResource {\n\n    @Context\n    Sse sse;\n\n    private SseBroadcaster sseBroadcaster;\n    private int lastEventId;\n    private List<String> messages = new ArrayList<>();\n\n    @PostConstruct\n    public void initSse() {\n        sseBroadcaster = sse.newBroadcaster();\n\n        sseBroadcaster.onError((o, e) -> {\n            ...\n        });\n    }\n\n    @GET\n    @Lock(READ)\n    @Produces(MediaType.SERVER_SENT_EVENTS)\n    public void itemEvents(@HeaderParam(HttpHeaders.LAST_EVENT_ID_HEADER)\n                           @DefaultValue(\"-1\") int lastEventId,\n                           @Context SseEventSink eventSink) {\n\n        if (lastEventId >= 0)\n            replayLastMessages(lastEventId, eventSink);\n\n        sseBroadcaster.register(eventSink);\n    }\n\n    private void replayLastMessages(int lastEventId, SseEventSink eventSink) {\n        try {\n            for (int i = lastEventId; i < messages.size(); i++) {\n                eventSink.send(createEvent(messages.get(i), i + 1));\n            }\n        } catch (Exception e) {\n            throw new InternalServerErrorException(\"Could not replay messages \", e);\n        }\n    }\n\n    private OutboundSseEvent createEvent(String message, int id) {\n        return sse.newEventBuilder().id(String.valueOf(id)).data(message).build();\n    }\n\n    @Lock(WRITE)\n    public void onEvent(@Observes DomainEvent domainEvent) {\n        String message = domainEvent.getContents();\n        messages.add(message);\n\n        OutboundSseEvent event = createEvent(message, ++lastEventId);\n\n        sseBroadcaster.broadcast(event);\n    }\n}\n```", "```java\nimport java.util.function.Consumer;\n\npublic class SseClient {\n\n    private final WebTarget target = ClientBuilder.newClient().target(\"...\");\n    private SseEventSource eventSource;\n\n    public void connect(Consumer<String> dataConsumer) {\n        eventSource = SseEventSource.target(target).build();\n\n        eventSource.register(\n                item -> dataConsumer.accept(item.readData()),\n                Throwable::printStackTrace,\n                () -> System.out.println(\"completed\"));\n\n        eventSource.open();\n    }\n\n    public void disconnect() {\n        if (eventSource != null)\n            eventSource.close();\n    }\n}\n```", "```java\nimport javax.websocket.*;\nimport javax.websocket.server.ServerEndpoint;\n\n@ServerEndpoint(value = \"/chat\", decoders = ChatMessageDecoder.class, encoders = ChatMessageEncoder.class)\npublic class ChatServer {\n\n    @Inject\n    ChatHandler chatHandler;\n\n    @OnOpen\n    public void openSession(Session session) {\n        ...\n    }\n\n    @OnMessage\n    public void onMessage(ChatMessage message, Session session) {\n        chatHandler.store(message);\n    }\n\n    @OnClose\n    public void closeSession(Session session) {\n        ...\n    }\n}\n```", "```java\nimport javax.websocket.EncodeException;\nimport javax.websocket.Encoder;\nimport javax.websocket.EndpointConfig;\n\npublic class ChatMessageEncoder implements Encoder.Binary<ChatMessage> {\n\n    @Override\n    public ByteBuffer encode(ChatMessage object) throws EncodeException {\n        ...\n    }\n\n    ...\n}\n```", "```java\nimport javax.websocket.DecodeException;\nimport javax.websocket.Decoder;\nimport javax.websocket.EndpointConfig;\n\npublic class ChatMessageDecoder implements Decoder.Binary<ChatMessage> {\n\n    @Override\n    public ChatMessage decode(ByteBuffer bytes) throws DecodeException {\n        ...\n    }\n\n    ...\n}\n```", "```java\nimport javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n\n@Stateless\npublic class PersonAdministration {\n\n    @PersistenceContext\n    EntityManager entityManager;\n\n    public void createPerson(Person person) {\n        entityManager.persist(person);\n    }\n\n    public void updateAddress(long personId, Address newAddress) {\n        Person person = entityManager.find(Person.class, personId);\n\n        if (person == null)\n            throw new IllegalArgumentException(\"Could not find person with ID \" + personId);\n\n        person.setAddress(newAddress);\n    }\n}\n```", "```java\nimport javax.persistence.*;\n\n@Entity\n@Table(name = \"persons\")\npublic class Person {\n\n    @Id\n    @GeneratedValue\n    private long id;\n\n    @Basic(optional = false)\n    private String name;\n\n    @Embedded\n    private Address address;\n\n    ...\n}\n\n@Embeddable\npublic class Address {\n\n    @Basic(optional = false)\n    private String streetName;\n\n    @Basic(optional = false)\n    private String postalCode;\n\n    @Basic(optional = false)\n    private String city;\n\n    ...\n}\n```", "```java\nimport javax.persistence.CascadeType;\nimport javax.persistence.OneToMany;\nimport javax.persistence.OneToOne;\n\n@Entity\n@Table(name = \"cars\")\npublic class Car {\n\n    @Id\n    @GeneratedValue\n    private long id;\n\n    @OneToOne(optional = false, cascade = CascadeType.ALL)\n    private Engine engine;\n\n    @OneToMany(cascade = CascadeType.ALL)\n    private Set<Seat> seats = new HashSet<>();\n\n    ...\n}\n```", "```java\nimport javax.persistence.EnumType;\nimport javax.persistence.Enumerated;\n\n@Entity\n@Table(name = \"engines\")\npublic class Engine {\n\n    @Id\n    @GeneratedValue\n    private long id;\n\n    @Basic(optional = false)\n    @Enumerated(EnumType.STRING)\n    private EngineType type;\n\n    private double ccm;\n\n    ...\n}\n```", "```java\n@Entity\n@Table(name = \"seats\")\npublic class Seat {\n\n    @Id\n    @GeneratedValue\n    private long id;\n\n    @Basic(optional = false)\n    @Enumerated(EnumType.STRING)\n    private SeatMaterial material;\n\n    @Basic(optional = false)\n    @Enumerated(EnumType.STRING)\n    private SeatShape shape;\n\n    ...\n}\n```", "```java\npublic void replaceEngine(long carIdentifier, Engine engine) {\n    Car car = entityManager.find(Car.class, carIdentifier);\n    car.replaceEngine(engine);\n\n    // car is already managed, engine needs to be persisted\n    entityManager.persist(engine);\n}\n```", "```java\npublic void replaceEngine(long carIdentifier, Engine engine) {\n    Car car = entityManager.find(Car.class, carIdentifier);\n    car.replaceEngine(engine);\n\n    // merge operation is applied on the car and all cascading relations\n    entityManager.merge(car);\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<persistence version=\"2.2\" \n\n        xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/persistence\n        http://xmlns.jcp.org/xml/ns/persistence/persistence_2_2.xsd\">\n    <persistence-unit name=\"vehicle\" transaction-type=\"JTA\">\n    </persistence-unit>\n</persistence>\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<persistence version=\"2.2\" \n\n        xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/persistence\n        http://xmlns.jcp.org/xml/ns/persistence/persistence_2_2.xsd\">\n\n    <persistence-unit name=\"vehicle\" transaction-type=\"JTA\">\n        <jta-data-source>jdbc/VehicleDB</jta-data-source>\n    </persistence-unit>\n    <persistence-unit name=\"order\" transaction-type=\"JTA\">\n        <jta-data-source>jdbc/OrderDB</jta-data-source>\n    </persistence-unit>\n</persistence>\n```", "```java\n@Stateless\npublic class CarManagement {\n\n    @PersistenceContext(unitName = \"vehicle\")\n    EntityManager entityManager;\n\n    public void replaceEngine(long carIdentifier, Engine engine) {\n        Car car = entityManager.find(Car.class, carIdentifier);\n        car.replaceEngine(engine);\n\n        // merge operation is applied on the car and all cascading relations\n        entityManager.merge(car);\n    }\n}\n```", "```java\npublic class EntityManagerExposer {\n\n    @Produces\n    @VehicleDB\n    @PersistenceContext(unitName = \"vehicle\")\n    private EntityManager vehicleEntityManager;\n\n    @Produces\n    @OrderDB\n    @PersistenceContext(unitName = \"order\")\n    private EntityManager orderEntityManager;\n\n}\n```", "```java\npublic class CarManagement {\n\n    @Inject\n    @VehicleDB\n    EntityManager entityManager;\n\n    ...\n}\n```", "```java\n@Stateless\npublic class CarManufacturer {\n\n    ...\n\n    @Tracked(ProcessTracker.Category.MANUFACTURER)\n    public Car manufactureCar(Specification spec) {\n        ...\n    }\n}\n```", "```java\nimport javax.enterprise.util.Nonbinding;\nimport javax.interceptor.InterceptorBinding;\n\n@InterceptorBinding\n@Inherited\n@Documented\n@Target({TYPE, METHOD})\n@Retention(RUNTIME)\npublic @interface Tracked {\n\n    @Nonbinding\n    ProcessTracker.Category value();\n}\n```", "```java\nimport javax.annotation.Priority;\n\n@Tracked(ProcessTracker.Category.UNUSED)\n@Interceptor\n@Priority(Interceptor.Priority.APPLICATION)\npublic class TrackingInterceptor {\n\n    @Inject\n    ProcessTracker processTracker;\n\n    @AroundInvoke\n    public Object aroundInvoke(InvocationContext context) throws Exception {\n        Tracked tracked = resolveAnnotation(context);\n\n        if (tracked != null) {\n            ProcessTracker.Category category = tracked.value();\n            processTracker.track(category);\n        }\n\n        return context.proceed();\n    }\n\n    private Tracked resolveAnnotation(InvocationContext context) {\n        Function<AnnotatedElement, Tracked> extractor = c -> c.getAnnotation(Tracked.class);\n        Method method = context.getMethod();\n\n        Tracked tracked = extractor.apply(method);\n        return tracked != null ? tracked : extractor.apply(method.getDeclaringClass());\n    }\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans \n\n        xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee\n        http://xmlns.jcp.org/xml/ns/javaee/beans_1_1.xsd\"\n        bean-discovery-mode=\"all\">\n    <interceptors>\n        <class>com.example.cars.processes.TrackingInterceptor</class>\n    </interceptors>\n</beans>\n```", "```java\n@Stateless\npublic class CarManufacturer {\n\n    @Inject\n    @Config(\"car.default.color\")\n    String defaultColor;\n\n    public Car manufactureCar(Specification spec) {\n        // use defaultColor\n    }\n}\n```", "```java\n@Qualifier\n@Documented\n@Retention(RUNTIME)\npublic @interface Config {\n\n    @Nonbinding\n    String value();\n}\n```", "```java\nimport javax.enterprise.inject.spi.InjectionPoint;\nimport java.io.*;\nimport java.util.Properties;\n\n@ApplicationScoped\npublic class ConfigurationExposer {\n\n    private final Properties properties = new Properties();\n\n    @PostConstruct\n    private void initProperties() {\n        try (InputStream inputStream = ConfigurationExposer.class\n                .getResourceAsStream(\"/application.properties\")) {\n            properties.load(inputStream);\n        } catch (IOException e) {\n            throw new IllegalStateException(\"Could not init configuration\", e);\n        }\n    }\n\n    @Produces\n    @Config(\"\")\n    public String exposeConfig(InjectionPoint injectionPoint) {\n        Config config = injectionPoint.getAnnotated().getAnnotation(Config.class);\n        if (config != null)\n            return properties.getProperty(config.value());\n        return null;\n    }\n}\n```", "```java\n@Singleton\n@ConcurrencyManagement(ConcurrencyManagementType.BEAN)\npublic class CarStorage {\n\n    private final Map<String, Car> cars = new ConcurrentHashMap<>();\n\n    public void store(Car car) {\n        cars.put(car.getId(), car);\n    }\n\n    public Car retrieve(String id) {\n        return cars.get(id);\n    }\n}\n```", "```java\n@Singleton\n@Startup\n@ConcurrencyManagement(ConcurrencyManagementType.BEAN)\npublic class CarStorage {\n\n    ...\n\n    @PostConstruct\n    private void loadStorage() {\n        // load contents from file\n    }\n\n    @PreDestroy\n    private void writeStorage() {\n        // write contents to file\n    }\n}\n```", "```java\nimport javax.ejb.Asynchronous;\n\n@Asynchronous\n@Stateless\npublic class Calculator {\n\n    public void calculatePi(long decimalPlaces) {\n        // this may run for a long time\n    }\n}\n```", "```java\nimport javax.annotation.Resource;\nimport javax.enterprise.concurrent.ManagedExecutorService;\nimport java.util.Random;\nimport java.util.concurrent.CompletableFuture;\n\n@Stateless\npublic class Calculator {\n\n    @Resource\n    ManagedExecutorService mes;\n\n    public CompletableFuture<Double> calculateRandomPi(int maxDecimalPlaces) {\n        return CompletableFuture.supplyAsync(() -> new Random().nextInt(maxDecimalPlaces) + 1, mes)\n                .thenApply(this::calculatePi);\n    }\n\n    private double calculatePi(long decimalPlaces) {\n        ...\n    }\n}\n```", "```java\n@Stateless\npublic class CarManufacturer {\n\n    @Inject\n    CarFactory carFactory;\n\n    @Inject\n    Event<CarCreated> carCreated;\n\n    public Car manufactureCar(Specification spec) {\n        Car car = carFactory.createCar(spec);\n        carCreated.fireAsync(new CarCreated(spec));\n        return car;\n    }\n}\n```", "```java\nimport javax.enterprise.event.ObservesAsync;\n\npublic class CreatedCarListener {\n\n    public void onCarCreated(@ObservesAsync CarCreated event) {\n        // handle event asynchronously\n    }\n}\n```", "```java\nimport javax.ejb.Schedule;\nimport javax.ejb.Startup;\n\n@Singleton\n@Startup\npublic class PeriodicJob {\n\n    @Schedule(minute = \"*/10\", hour = \"*\", persistent = false)\n    public void executeJob() {\n        // this is executed every 10 minutes\n    }\n}\n```", "```java\n@ApplicationScoped\npublic class Periodic {\n\n    @Resource\n    ManagedScheduledExecutorService mses;\n\n    public void startAsyncJobs() {\n        mses.schedule(this::execute, 10, TimeUnit.SECONDS);\n        mses.scheduleAtFixedRate(this::execute, 60, 10, TimeUnit.SECONDS);\n    }\n\n    private void execute() {\n        ...\n    }\n}\n```", "```java\n@Path(\"users\")\n@Consumes(MediaType.APPLICATION_JSON)\npublic class UsersResource {\n\n    @Resource\n    ManagedExecutorService mes;\n\n    ...\n\n    @POST\n    public CompletionStage<Response> createUserAsync(User user) {\n        return CompletableFuture.supplyAsync(() -> createUser(user), mes);\n    }\n\n    private Response createUser(User user) {\n        userStore.create(user);\n\n        return Response.accepted().build();\n    }\n}\n```", "```java\nimport javax.ws.rs.container.AsyncResponse;\nimport javax.ws.rs.container.Suspended;\n\n@Path(\"users\")\n@Consumes(MediaType.APPLICATION_JSON)\npublic class UsersResource {\n\n    @Resource\n    ManagedExecutorService mes;\n\n    ...\n\n    @POST\n    public void createUserAsync(User user, @Suspended AsyncResponse response) {\n\n        response.setTimeout(5, TimeUnit.SECONDS);\n        response.setTimeoutHandler(r ->\n                r.resume(Response.status(Response.Status.SERVICE_UNAVAILABLE).build()));\n\n        mes.execute(() -> response.resume(createUser(user)));\n    }\n}\n```", "```java\nimport java.util.stream.Collectors;\n\n@ApplicationScoped\npublic class WeatherForecast {\n\n    private Client client;\n    private List<WebTarget> targets;\n\n    @Resource\n    ManagedExecutorService mes;\n\n    @PostConstruct\n    private void initClient() {\n        client = ClientBuilder.newClient();\n        targets = ...\n    }\n\n    public Forecast getAverageForecast() {\n        return invokeTargetsAsync()\n                .stream()\n                .map(CompletableFuture::join)\n                .reduce(this::calculateAverage)\n                .orElseThrow(() -> new IllegalStateException(\"No weather service available\"));\n    }\n\n    private List<CompletableFuture<Forecast>> invokeTargetsAsync() {\n        return targets.stream()\n                .map(t -> CompletableFuture.supplyAsync(() -> t\n                        .request(MediaType.APPLICATION_JSON_TYPE)\n                        .get(Forecast.class), mes))\n                .collect(Collectors.toList());\n    }\n\n    private Forecast calculateAverage(Forecast first, Forecast second) {\n        ...\n    }\n\n    @PreDestroy\n    public void closeClient() {\n        client.close();\n    }\n}\n```", "```java\npublic Forecast getAverageForecast() {\n    return invokeTargetsAsync()\n            .stream()\n            .reduce((l, r) -> l.thenCombine(r, this::calculateAverage))\n            .map(s -> s.toCompletableFuture().join())\n            .orElseThrow(() -> new IllegalStateException(\"No weather service available\"));\n}\n\nprivate List<CompletionStage<Forecast>> invokeTargetsAsync() {\n    return targets.stream()\n            .map(t -> t\n                    .request(MediaType.APPLICATION_JSON_TYPE)\n                    .rx()\n                    .get(Forecast.class))\n            .collect(Collectors.toList());\n}\n```"]