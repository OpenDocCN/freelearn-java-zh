- en: Chapter 9. Load-balancing Web Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we illustrated the basic concepts of how to cluster
    web applications. However, this is only part of the story. To further improve
    availability, we need to look at how to load-balance your WildFly servers.
  prefs: []
  type: TYPE_NORMAL
- en: Load balancing is the distribution of incoming traffic between servers that
    host the same application content. Load balancing improves application availability
    by ensuring that any single server does not take too much load, and that the application
    remains available should a single server fail.
  prefs: []
  type: TYPE_NORMAL
- en: Historically, the JBoss AS has inherited the load-balancing libraries from Tomcat,
    which was part of the application server's web module. The web module used `mod_jk`
    (an Apache module) to connect Tomcat to a web server, such as Apache. For those
    of you who are unfamiliar with Tomcat and Apache, Tomcat (also known as Apache
    Tomcat) is an open source servlet container, while Apache (also known as Apache2
    or Apache HTTPD) is an HTTP web server.
  prefs: []
  type: TYPE_NORMAL
- en: While you can still use `mod_jk` to connect Undertow to a web server, you should
    consider using the `mod_cluster` API. The `mod_cluster` API is an HTTPD-based
    load balancer that has several advantages over `mod_jk`, such as improved performance
    and reliability. We will cover the installation of both `mod_jk` and `mod_cluster`
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Having made this short introduction, next we will introduce the advantages
    of using a web server in front of your web applications. We will then continue
    by covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Connecting WildFly to Apache using `mod_jk` and `mod_proxy`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting WildFly to Apache using the `mod_cluster` API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Benefits of using the Apache web server with WildFly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In most real-world situations, it''s common to find the Apache web server as
    an entry point to your application server. Some advantages of this are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Speed**: Apache is generally faster at serving static content.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security**: By placing WildFly behind Apache, you only need to worry about
    connections from a single point of entry. WildFly can be configured to accept
    connections from a single IP (the server hosting Apache) and will not be accessible
    directly from the Internet. Essentially, Apache becomes a smart proxy server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Load balancing and clustering**: Using Apache as a frontend, you can distribute
    traffic to multiple WildFly server instances. If one of your servers fails, the
    communication transparently continues to another node in the cluster.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As stated previously, connecting Apache and WildFly can be done in one of two
    ways: by either using Tomcat''s `mod_jk` library or Apache''s `mod_proxy` libraries.
    As the installation of both `mod_jk` and `mod_proxy` does not differ from earlier
    AS releases, we will just include a quick setup guide for your reference.'
  prefs: []
  type: TYPE_NORMAL
- en: If, however, you are planning to set up a high-performance, dynamic cluster
    of web servers, you should consider migrating to the newer `mod_cluster` API,
    which is discussed in the following sections of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Using the mod_jk library
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `mod_jk` library is a common solution to front WildFly with the Apache
    web server. All requests first arrive at the Apache web server. Apache then accepts
    and processes any static resource requests, such as requests for HTML pages or
    graphical images. Then, with the help of `mod_jk`, Apache requests dynamic resources,
    such as JSPs or Servlets, to Undertow. The communication between Apache and Undertow
    is sent over the network using the AJP protocol, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the mod_jk library](img/6232OS_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Installing Apache
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The most common operating system for live environments is Linux. For this reason,
    we will demonstrate how to install `mod_jk` in Ubuntu. Bear in mind that the configuration
    may differ slightly depending on the flavor of Linux you use. These instructions
    work for Ubuntu Server.
  prefs: []
  type: TYPE_NORMAL
- en: 'You need to install Apache before attempting to install `mod_jk`. You can install
    Apache by issuing the following commands in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Make sure that you can view the Apache welcome page after completing the installation.
    Simply enter the IP of the server as the URL of your browser. Take a look at the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Apache](img/6232OS_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Installing mod_jk
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Next, we need to install `mod_jk`. The following command will install the module,
    enable it, and restart Apache:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You can then confirm that the module has been enabled by typing the following
    command. This will list all currently enabled modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you need to modify the virtual host within for the default configuration
    file, `default`, which can be found in the `/etc/apache2/sites-enabled` directory.
    The configuration shows the updated default configuration of the file. The line
    you need to add is highlighted in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `JkMount` directive tells Apache which URLs it should forward to the `mod_jk`
    module, which in turn forwards them to the Undertow web container. In the preceding
    example, all requests with the URL path `/*` are sent to the `mod_jk` connector.
    This means that all requests are sent. You can also forward specific URLs to `mod_jk`,
    for example, `/website*`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you forward all URLs, you may want to unmount one or two URLs so that static
    data can be served from Apache. This can be achieved using the `JkUmount` directive.
    For example, if you want Apache to serve static media files in the `images` directory,
    you will have a configuration like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, you need to configure the `mod_jk` workers file, `workers.properties`,
    which is found in the `/etc/libapache2-mod-jk` folder. This file specifies the
    IP addresses of the Undertow web servers, between which the load is balanced.
    Optionally, you can add a configuration that specifies how calls should be load-balanced
    across each of the servers. For a two-node setup, the file will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In the `workers.properties` file, each node is defined using the `worker.[n]`
    naming convention, where `n` represents an arbitrary name you choose for each
    web server container. For each worker, you must specify the hostname (or IP address)
    and the port number of the AJP13 connector running in the web server.
  prefs: []
  type: TYPE_NORMAL
- en: The load balancer type `lb` means that workers perform weighted round-robin
    load balancing with sticky sessions.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will need to restart Apache after modifying the `worker.properties` file.
    Take a look at the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In WildFly, the default configuration in the `ha` profiles already defines
    the AJP connector. If you are not using one of the `ha` profiles, for example,
    you are using `standalone.xml`, you need to add the following highlighted line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The AJP connector is also already defined in the `socket-binding-group` element
    in the ha profiles. Again, for the non-ha profiles, you will need the AJP configuration.
    In the following code snippet, you can see that the AJP connector is listening
    on port number 8009\. Have a look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Once you set up this configuration, you should refresh the page showing you
    the Apache welcome page. It will now show the WildFly welcome page. This proves
    that Apache is directing the requests to WildFly. Stop one of the WildFly servers
    and refresh the page once more. You will continue to see the WildFly welcome page,
    as all requests are now being directed to the other WildFly server.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring mod_proxy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In WildFly, there is support for an optional module named `mod_proxy`. When
    installed, it can be configured so that Apache acts as a proxy server. This can
    be used to forward requests to a particular web application server, such as WildFly,
    without having to configure a web connector, such as `mod_jk`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install and enable `mod_proxy`, you need to run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you need to include these two directives in your default site file. You
    need to do this for each web application that you wish to forward to WildFly for
    example, to forward an application with a context path of `/app`. Have a look
    at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This tells Apache to forward URLs matching `http://localhost/app/*` to the WildFly
    HTTP connector listening on port number 8080.
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring mod_proxy](img/6232OS_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As shown in the preceding diagram, Apache''s `mod_proxy` is TCP-based and uses
    HTTP, so you don''t need to add anything else within your WildFly configuration.
    On top of this, there is also support for another module, `mod_proxy_ajp`. This
    module can be used in much the same way as `mod_proxy` except that it uses the
    AJP protocol to proxy Apache requests to WildFly. Before you can use it, you will
    need to enable it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add the highlighted lines to your virtual host in the default site file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we simply redirect all traffic (`/`) to the web server listening on localhost
    at port number 8009\. Take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring mod_proxy](img/6232OS_09_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Again, if you use a non-ha profile, you need to add the AJP listener to your
    Undertow configuration, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you need to add the AJP port as a socket-binding element, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Load-balancing with mod_cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `mod_cluster` is an HTTP-based load balancer, which, like `mod_jk`, can
    be used to forward requests to a set of application server instances. There are
    several advantages of using `mod_cluster` over `mod_jk` or `mod_proxy`:'
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic clustering configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Better load balancing due to the ability to use server-side load metrics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Better integration with the application life cycle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AJP is optional
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When using a standard load balancer, such as `mod_jk`, you have to provide a
    static list of nodes that are used to spread load. This process is inconvenient,
    especially if you want to dynamically add or remove nodes depending on the amount
    of traffic around your application. In addition to this, using a flat cluster
    configuration can be tedious and prone to error, especially if you have a high
    number of nodes in your cluster.
  prefs: []
  type: TYPE_NORMAL
- en: When using `mod_cluster`, nodes are dynamically added to, or removed from, your
    cluster. To achieve this, each WildFly server communicates its life cycle state
    to Apache.
  prefs: []
  type: TYPE_NORMAL
- en: Apache sends UDP messages, the so-called advertisements, on a multicast group.
    Each of the WildFly servers in the cluster subscribes to this group. It is via
    this group that WildFly is informed about HTTP proxies (Apache in this case).
    Then, each WildFly instance notifies the HTTP proxies about their availability,
    and then the proxy adds them to a list of nodes. Should a WildFly server be removed,
    the other WildFly servers in the group will be notified.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram helps illustrate this concept:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Load-balancing with mod_cluster](img/6232OS_09_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Another key feature of `mod_cluster` resides in the load metrics. Load metrics
    are determined on the server side and are then sent to the Apache side as circumstances
    change. As a consequence, `mod_cluster` provides a far more robust architecture
    than traditional HTTPD-based load balancers, where metrics are statically held
    on the proxy.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information on how server-side load metrics are calculated, refer to
    the `mod_cluster` documentation at [http://docs.jboss.org/mod_cluster/1.2.0/html/java.load.html](http://docs.jboss.org/mod_cluster/1.2.0/html/java.load.html).
  prefs: []
  type: TYPE_NORMAL
- en: Another advantage of using `mod_cluster` is the ability to intercept life cycle
    events, such as undeployment and redeployment. As mentioned previously in this
    section, these are synchronized between Apache and the nodes in the cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Installing mod_cluster libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are two things to consider when installing and configuring `mod_cluster`.
    The first involves the WildFly configuration, and the second involves downloading
    and installing the `mod_cluster` libraries to Apache. We will look at WildFly
    first, as it is preconfigured, and then move on to the installation of `mod_cluster`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Bundled in your WildFly installation, you will find the mod_cluster 1.3.0 module.
    This subsystem is included as part of the clustering configuration in both the
    `standalone-ha.xml` and `domain.xml` configuration files, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding default configuration references its `socket-binding` through
    the `advertise-socket` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, note that the default configuration uses the AJP protocol. The `connector`
    property references the name of the Undertow listener that the `mod_cluster` reverse
    proxy will connect to. The following is the Undertow configuration with the `ajp-listener`
    highlighted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'You will also need to ensure that your interfaces are correctly configured
    to the IP of the server your WildFly server(s) is/are running on. Update your
    `hosts.xml` or `standalone-ha.xml` file, replacing the IP with the your server''s
    IP:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Let's now move on to the second part—the installation and configuration of `mod_cluster`
    within Apache.
  prefs: []
  type: TYPE_NORMAL
- en: If you do not have Apache installed, you should follow the instructions from
    earlier in this chapter (see the *Installing Apache* section). We first need to
    install the required Apache modules. These modules are used to interact with `mod_cluster`
    on WildFly.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we are using Apache 2.2, which requires Version 1.2.x of `mod_cluster`.
    If you are using Apache 2.4, then you can use a later version of `mod_cluster`,
    namely Version 1.3.x. You can also use Version 1.2.x, but it will need to be compiled
    for Apache 2.4\. To see your version of Apache, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At the time of writing, 1.3.x binaries were not available from the download
    site, so you might need to compile them from the source ([https://github.com/modcluster/mod_cluster/tree/master](https://github.com/modcluster/mod_cluster/tree/master))..
  prefs: []
  type: TYPE_NORMAL
- en: Please check the download site before deciding to go down the route of compiling
    the source. If you wish to compile the module, you should check [http://www.openlogic.com/blog/bid/247607/JBoss-AS7-Clustering-Using-mod_cluster-and-http-2-4-Part-1](http://www.openlogic.com/blog/bid/247607/JBoss-AS7-Clustering-Using-mod_cluster-and-http-2-4-Part-1).
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the download site ([http://mod-cluster.jboss.org/downloads](http://mod-cluster.jboss.org/downloads)),
    and select the binaries for your platform. Select **mod_cluster modules for httpd**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing mod_cluster libraries](img/6232OS_09_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the binaries have been downloaded, you need to extract the archive to
    the `module` directory in Apache. When you extract the downloaded archive, you
    should see the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mod_advertise.so`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mod_manager.so`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mod_proxy_cluster.so`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mod_slotmem.so`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can run the following commands to achieve this. The first one downloads
    the file from the `mod_cluster` website using the URL from the download page.
    The second one extracts the TAR file, and the final command copies the libraries
    to the `modules` directory.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The mod_cluster configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, we need to create two files within the `/etc/apache2/mods-available`
    directory. The first one is called `mod_cluster.load` and contains the list of
    libraries this module depends on. The following is the complete content of the
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `slotmen` module name has changed from `mod_slotmen.so` to `mod_cluster_slotmen.so`
    in Version 1.3.x.
  prefs: []
  type: TYPE_NORMAL
- en: This list contains the four libraries we just copied to the `module` folder,
    and the pre-existing `mod_proxy` libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Each of these modules performs a specific role within the load-balancing functionality.
    The core modules are `mod_proxy`, `mod_proxy_ajp`, and `mod_proxy_http`. They
    forward requests to cluster nodes using either the HTTP/HTTPS protocol or the
    AJP protocol.
  prefs: []
  type: TYPE_NORMAL
- en: Next, `mod_manager` is a module that reads information from WildFly and updates
    the shared memory information in conjunction with `mod_slotmem`. The `mod_proxy_cluster`
    is the module that contains the balancer for `mod_proxy`. Finally, `mod_advertise`
    is an additional module that allows HTTPD to advertise via multicast packets,
    the IP, and port number where the `mod_cluster` is listening.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next file we need to create is called `mod_cluster.conf`. This file is
    placed alongside `mod_cluster.load` within the `/etc/apache2/mods-available` directory,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: You have to replace the `127.0.1.1` IP address with the IP address that WildFly
    uses to connect to Apache. If your Apache and WildFly are on different servers,
    then it will be the IP of your Apache server. You also need to update the port
    value of 6666 with the one you want to use for communicating with WildFly.
  prefs: []
  type: TYPE_NORMAL
- en: 'As the configuration currently stands, the Apache virtual host allows incoming
    requests from:'
  prefs: []
  type: TYPE_NORMAL
- en: IP addresses with prefix `127.0.1`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The sub-network `127.0.1.0/24`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `CreateBalancers` directive configures how the HTTP balancers are created
    in virtual hosts. The possible values of `CreateBalancers` are `0`, `1`, and `2`,
    outlined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`0`: Creates balancers in all virtual hosts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`1`: Does not create any balancers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`2`: Creates a balancer for the main server only'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Setting `CreateBalancers` to `1` means that you must configure a balancer in
    the `ProxyPass` directive (shown further in the chapter). For more information,
    please see this link: [http://docs.jboss.org/mod_cluster/1.2.0/html/native.config.html#d0e485](http://docs.jboss.org/mod_cluster/1.2.0/html/native.config.html#d0e485)'
  prefs: []
  type: TYPE_NORMAL
- en: The `KeepAliveTimeout` directive allows the same connection to be reused within
    300 seconds. The number of requests per connection is unlimited since we are setting
    `MaxKeepAliveRequests` to `0`. The `ManagerBalancerName` directive provides the
    balancer name for your cluster (defaults to `mycluster`).
  prefs: []
  type: TYPE_NORMAL
- en: What is most important for us is the `ServerAdvertise` directive. It uses the
    advertise mechanism to tell WildFly to whom it should send the cluster information.
  prefs: []
  type: TYPE_NORMAL
- en: You can also refine the time elapsed between multicasting advertising messages
    with the `AdvertiseFrequency` directive, which defaults to 10 seconds.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Overview of the advertising** **mechanism**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The default multicast IP address and port used for advertising is `224.0.1.105:23364`.
    These values match the WildFly bindings defined in the following socket-binding
    named `modcluster`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'If you ever change these values in WildFly, you will also have to match it
    on the HTTPD side with the `AdvertiseGroup` directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The very last thing you need to configure is the virtual host in your site
    configuration file. Create a file called `wildfly` within the `/etc/apache2/sites-enabled`
    directory. Add the following highlighted code lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'As a final note, if you have not already enabled `proxy_ajp` and `proxy_http`,
    you will need to do so in order for `mod_cluster` to work, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'You can now enable the WildFly site:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, enable the `mod_cluster` module and restart Apache:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Testing mod_cluster
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To verify that everything works correctly, start your WildFly domain ensuring
    that your server group is using an `ha` profile. Deploy the application we used
    in [Chapter 4](ch04.html "Chapter 4. The Undertow Web Server"), *The Undertow
    Web Server*, to that same server group. If all is configured correctly, you should
    see the application when you navigate to the context root `chapter4` at `http://178.62.50.168/chapter4`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing mod_cluster](img/6232OS_09_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Managing mod_cluster via the CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a couple of tools that can be used to manage and retrieve runtime
    information from your cluster. Your first option is the command-line management
    interface, which allows you to investigate the `mod_cluster` subsystem.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first command you need to learn is `list-proxies`, which returns merely
    the hostnames (and port) of the connected proxies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'While this can be useful for a quick inspection of your cluster members, you
    can get more detailed information with the `read-proxies-info` command that actually
    sends an information message to the HTTPD server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The `mod_cluster` subsystem also allows us to use the `read-proxies-configuration`
    command, which provides more verbose information about your cluster. For the sake
    of brevity, we will omit printing its output.
  prefs: []
  type: TYPE_NORMAL
- en: 'The list of proxies that are part of your cluster can also be modified with
    the CLI. For example, you can use the `add-proxy` command to add a proxy that
    has not been captured by the mod_cluster''s `httpd` configuration. Have a look
    at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also remove proxies from the list using the corresponding `remove-proxy`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Managing your web contexts with the CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can use the CLI to manage your web contexts. For example, the `enable-context`
    command can be used to tell Apache that a particular web context is able to receive
    requests, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The corresponding `disable-context` command can be used to prevent Apache from
    sending *new* requests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'To stop Apache from sending requests from a web context, you can use the `stop-context`
    command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Adding native management capabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are not able (or simply don't want) to use the CLI, then you can also
    configure the Apache web server to provide a basic management interface through
    the browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to do that, all you need to add is the `mod_cluster_manager` application
    context, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: You can test your `mod_cluster` manager application by navigating to `http://192.168.10.1/http://192.168.10.1/mod_cluster_manager`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our example, the `mod_cluster` manager displays information about all the
    WildFly nodes that have been discovered through multicast announcements. Take
    a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding native management capabilities](img/6232OS_09_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the `mod_cluster` manager page, you have lots of useful information, such
    as the number of hosts that are currently active (in our example, two nodes) and
    the web contexts that are available. By default, all web contexts are mounted
    automatically (not requiring an explicit mount as for `mod_jk`), but you can exclude
    or include them by clicking on the **Disable**/**Enable** link, which is placed
    next to the web context.
  prefs: []
  type: TYPE_NORMAL
- en: Managing web contexts using the configuration file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the sake of completeness, we will add one more option that can be used
    to manage your web context using your application server configuration file. By
    default, all web contexts are enabled; however, you can exclude web contexts from
    the main configuration file using the `excluded-contexts` directive. Take a look
    at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Troubleshooting mod_cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Installing and enabling `mod_cluster` on Apache requires just a few steps to
    get working. However, should you have problems, you can allow a verbose output,
    which will cause an overview of your configuration to be displayed. Add the `AllowDisplay`
    directive to your `mod_cluster_manager` application context as highlighted as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'When adding this directive, you will get further information about the modules
    loaded into HTTPD. This output may help you narrow down any issues, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Troubleshooting mod_cluster](img/6232OS_09_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'One more possible cause of errors is a firewall preventing the broadcast of
    advertising messages. Remember that advertisement messages use the UDP port number
    23364 and the multicast address 224.0.1.105\. In order to verify if advertising
    is an issue, you can try to turn it off by setting the following in the HTTPD
    side:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'This directive should be matched on the application server side by the `proxy-list`
    element. This element defines the list of HTTPD servers with which the WildFly
    server will initially communicate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: If there is more than one proxy, then the `proxy-list` will contain a comma-separated
    list.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also check that `mod_cluster` is correctly advertising messages by
    running a test class `Advertise`, which can be found at [https://github.com/modcluster/mod_cluster/blob/master/test/java/Advertize.java](https://github.com/modcluster/mod_cluster/blob/master/test/java/Advertize.java).
    You will need to compile the class and then run it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'If the module, that is, advertizing, is correctly configured, you will see
    something like the following command lines displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Finally, don't forget to check the error log in the Apache `logs` directory
    for any errors.
  prefs: []
  type: TYPE_NORMAL
- en: Also, make sure that you have enabled the `mod_proxy_http` module, as `mod_cluster`
    will fail to work without it.
  prefs: []
  type: TYPE_NORMAL
- en: Load-balancing between nodes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will run a couple of tests in order to investigate how `mod_cluster` distributes
    the load between several different clients.
  prefs: []
  type: TYPE_NORMAL
- en: 'For these tests, we will use a very basic web application. The application
    source can be found with the source code for this book; the project is called
    `chapter9-balancer`. It contains a simple `index.jsp` page, which dumps a message
    on the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'After deploying the application, go to the URL `http://192.168.0.10/balancer/index.jsp`.
    After making several requests, you will see that each subsequent request is sent
    to the same server. This shows that `mod_cluster` follows a sticky-session policy.
    Have a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Load-balancing between nodes](img/6232OS_09_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For the purpose of our tests, we need a software application that can be used
    to launch several requests to our cluster. We will use JMeter, a Java desktop
    application, which is generally used to test load, test functional behavior, and
    measure performance. JMeter can be downloaded from [http://jmeter.apache.org/download_jmeter.cgi](http://jmeter.apache.org/download_jmeter.cgi).
  prefs: []
  type: TYPE_NORMAL
- en: In short, a JMeter test plan consists of one or more thread groups, logic controllers,
    listeners, timers, assertions, and configuration elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the purpose of our example, we will just create the following elements:'
  prefs: []
  type: TYPE_NORMAL
- en: A **Thread Group**, which is configured to run 100 subsequent requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An **HTTP Request** element that contains information about the web application's
    end point
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To do this, open JMeter and navigate to **Test Plan** | **Add** | **Threads**
    | **Thread Group**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Load-balancing between nodes](img/6232OS_09_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Set the number of threads (users) to 100\. Now right-click on the newly created
    **Thread Group** | **Add** | **Sampler** | **HTTP Request**. In here, add the
    server IP and path, as shown to the right-hand side of the following screenshot.
    The port number can be left blank as it defaults to port number 80\. Take a look
    at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Load-balancing between nodes](img/6232OS_09_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Additionally, you should add a **Listener** element that collates the test plan
    result into a table/graph in order for you to view the results. To do this, navigate
    to **HTTP Request** | **Add** | **Listener** | **View Results in Table**. Now,
    from the top menu, navigate to **Run** | **Start**, and the JMeter test will be
    executed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Running the test shows that the requests are roughly split between the two
    servers. Have a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Load-balancing between nodes](img/6232OS_09_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using load metrics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Various system load metrics are collected from each server. These statistics
    allow a normalized load value to be calculated for each server. When the cluster
    is under light load, the incoming requests are evenly distributed to each server
    node. As the load increases, the amount of traffic sent to a given node depends
    on its current load, that is, more traffic will be directed to the node that has
    the least load.
  prefs: []
  type: TYPE_NORMAL
- en: 'The default `mod_cluster` configuration is configured with a dynamic load provider,
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'You can customize load balancing by adding further `load-metric` elements.
    For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: The most important factors when computing load balancing are the `weight` and
    `capacity` properties. The `weight` (the default is `1`) indicates the impact
    of a metric with respect to the other metrics. In the previous example, the CPU
    metric will have twice the impact compared to the sessions that have a load factor
    metric of `1`.
  prefs: []
  type: TYPE_NORMAL
- en: The `capacity` property, on the other hand, can be used for a fine-grained control
    over the load metrics. By setting a different capacity to each metric, you can
    actually favor one node over another while preserving the metric weights.
  prefs: []
  type: TYPE_NORMAL
- en: 'The list of supported load metrics is summarized in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Metric | Factor used to compose metric |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| cpu | CPU load |'
  prefs: []
  type: TYPE_TB
- en: '| heap | Heap memory usage as a percentage of max heap size |'
  prefs: []
  type: TYPE_TB
- en: '| sessions | Number of web sessions |'
  prefs: []
  type: TYPE_TB
- en: '| requests | Number of requests/sec |'
  prefs: []
  type: TYPE_TB
- en: '| send-traffic | Number of outgoing requests in traffic |'
  prefs: []
  type: TYPE_TB
- en: '| receive-traffic | Number of incoming requests post traffic |'
  prefs: []
  type: TYPE_TB
- en: 'The preceding metrics can also be set using the CLI, for example, supposing
    that you want to add a metric that is based on the amount of heap used by the
    proxy. Don''t forget to reload the configuration when notified to do so (enter
    the `reload` command). Here''s what you need to issue:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also remove the metric using the `remove` command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: An example for setting dynamic metrics on a cluster
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the following example, we have a very simple cluster comprising two nodes.
    Each node has the same JVM operating defaults, and each one is running on two
    identical machines.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will, however, simulate memory-intensive operations on the first node so
    that the amount of heap memory used differs between each server, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![An example for setting dynamic metrics on a cluster](img/6232OS_09_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is a common scenario in web applications where different circumstances
    have a different impact on each server's memory, for example, holding data temporarily
    in the HTTP session.
  prefs: []
  type: TYPE_NORMAL
- en: 'In such a case, using a round-robin approach to distribute a request may lead
    to an "out-of-memory" scenario on some nodes in your cluster. You can try to mitigate
    this by simply modifying the configuration of the loading metrics, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: When using this configuration on both nodes, the heap memory usage has twice
    the impact of other enlisted metrics (operating system memory and CPU speed).
  prefs: []
  type: TYPE_NORMAL
- en: The outcome of this is that the second server handles 55 percent of the requests,
    while the first server handles 45 percent.
  prefs: []
  type: TYPE_NORMAL
- en: 'By setting the appropriate capacity, you can further achieve a better level
    of granularity to node-weighting, for example, by setting a higher capacity on
    the first server, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'You can set a lower capacity on the second one, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Then, the outcome of the test will be different, as the second server now delivers
    more responses than the first one, counterbalancing the weight metric.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The capacity of each metric defaults to 512 and should be configured such that
    `0 <= (load / capacity) >= 1`.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we showed various ways of distributing application load across
    a set of nodes. This is referred to as load balancing.
  prefs: []
  type: TYPE_NORMAL
- en: Load balancing requires a web server, such as Apache, which directs traffic
    to your various application servers.
  prefs: []
  type: TYPE_NORMAL
- en: In the first half of this chapter, we illustrated how to use the `mod_jk` and
    `mod_proxy` libraries in WildFly. The `mod_jk` library requires some configuration
    on both the HTTPD side and the AS side. The `mod_proxy` library is a more immediate
    solution and a preferred solution when using WildFly as it requires simply configuring
    the end points on the HTTPD side.
  prefs: []
  type: TYPE_NORMAL
- en: In the second half of the chapter, we looked at the recommended approach to
    load-balance calls between applications using `mod_cluster`.
  prefs: []
  type: TYPE_NORMAL
- en: The main advantage of using `mod_cluster` versus traditional load balancers
    is that it does not require a static list of worker nodes, rather, it registers
    application servers and their applications dynamically using a multicast-based
    advertising mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: This is especially useful in a cloud environment, where you cannot rely on a
    flat list of nodes. It is much more beneficial to add or remove nodes on the fly.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, another major benefit of `mod_cluster` is that you can use a dynamic
    set of metrics that are calculated on the server side to define the load between
    server nodes. For example, you can give priority to servers that have better specifications,
    such as higher RAM or better processing power.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to look at one of the most important parts
    of WildFly administration, that is, security.
  prefs: []
  type: TYPE_NORMAL
