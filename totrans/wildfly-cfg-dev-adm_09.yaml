- en: Chapter 9. Load-balancing Web Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we illustrated the basic concepts of how to cluster
    web applications. However, this is only part of the story. To further improve
    availability, we need to look at how to load-balance your WildFly servers.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Load balancing is the distribution of incoming traffic between servers that
    host the same application content. Load balancing improves application availability
    by ensuring that any single server does not take too much load, and that the application
    remains available should a single server fail.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Historically, the JBoss AS has inherited the load-balancing libraries from Tomcat,
    which was part of the application server's web module. The web module used `mod_jk`
    (an Apache module) to connect Tomcat to a web server, such as Apache. For those
    of you who are unfamiliar with Tomcat and Apache, Tomcat (also known as Apache
    Tomcat) is an open source servlet container, while Apache (also known as Apache2
    or Apache HTTPD) is an HTTP web server.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: While you can still use `mod_jk` to connect Undertow to a web server, you should
    consider using the `mod_cluster` API. The `mod_cluster` API is an HTTPD-based
    load balancer that has several advantages over `mod_jk`, such as improved performance
    and reliability. We will cover the installation of both `mod_jk` and `mod_cluster`
    in this chapter.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: 'Having made this short introduction, next we will introduce the advantages
    of using a web server in front of your web applications. We will then continue
    by covering the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Connecting WildFly to Apache using `mod_jk` and `mod_proxy`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting WildFly to Apache using the `mod_cluster` API
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Benefits of using the Apache web server with WildFly
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In most real-world situations, it''s common to find the Apache web server as
    an entry point to your application server. Some advantages of this are:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '**Speed**: Apache is generally faster at serving static content.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security**: By placing WildFly behind Apache, you only need to worry about
    connections from a single point of entry. WildFly can be configured to accept
    connections from a single IP (the server hosting Apache) and will not be accessible
    directly from the Internet. Essentially, Apache becomes a smart proxy server.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Load balancing and clustering**: Using Apache as a frontend, you can distribute
    traffic to multiple WildFly server instances. If one of your servers fails, the
    communication transparently continues to another node in the cluster.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As stated previously, connecting Apache and WildFly can be done in one of two
    ways: by either using Tomcat''s `mod_jk` library or Apache''s `mod_proxy` libraries.
    As the installation of both `mod_jk` and `mod_proxy` does not differ from earlier
    AS releases, we will just include a quick setup guide for your reference.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: If, however, you are planning to set up a high-performance, dynamic cluster
    of web servers, you should consider migrating to the newer `mod_cluster` API,
    which is discussed in the following sections of this chapter.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果您计划设置一个高性能、动态的Web服务器集群，您应该考虑迁移到较新的`mod_cluster` API，这在本章的后续部分中讨论。
- en: Using the mod_jk library
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用mod_jk库
- en: 'The `mod_jk` library is a common solution to front WildFly with the Apache
    web server. All requests first arrive at the Apache web server. Apache then accepts
    and processes any static resource requests, such as requests for HTML pages or
    graphical images. Then, with the help of `mod_jk`, Apache requests dynamic resources,
    such as JSPs or Servlets, to Undertow. The communication between Apache and Undertow
    is sent over the network using the AJP protocol, as shown in the following screenshot:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`mod_jk`库是使用Apache Web服务器作为WildFly前端的一个常见解决方案。所有请求首先到达Apache Web服务器。然后，Apache接受并处理任何静态资源请求，例如HTML页面或图形图像的请求。然后，借助`mod_jk`，Apache请求动态资源，如JSP或Servlet，到Undertow。Apache和Undertow之间的通信通过AJP协议在网络中发送，如下面的截图所示：'
- en: '![Using the mod_jk library](img/6232OS_09_01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![使用mod_jk库](img/6232OS_09_01.jpg)'
- en: Installing Apache
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装Apache
- en: The most common operating system for live environments is Linux. For this reason,
    we will demonstrate how to install `mod_jk` in Ubuntu. Bear in mind that the configuration
    may differ slightly depending on the flavor of Linux you use. These instructions
    work for Ubuntu Server.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对于实时环境，最常用的操作系统是Linux。因此，我们将演示如何在Ubuntu中安装`mod_jk`。请注意，根据您使用的Linux版本，配置可能略有不同。这些说明适用于Ubuntu服务器。
- en: 'You need to install Apache before attempting to install `mod_jk`. You can install
    Apache by issuing the following commands in the terminal:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试安装`mod_jk`之前，您需要安装Apache。您可以在终端中输入以下命令来安装Apache：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Make sure that you can view the Apache welcome page after completing the installation.
    Simply enter the IP of the server as the URL of your browser. Take a look at the
    following screenshot:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在完成安装后您可以看到Apache欢迎页面。只需将服务器的IP地址作为浏览器中的URL输入。请查看以下截图：
- en: '![Installing Apache](img/6232OS_09_02.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![安装Apache](img/6232OS_09_02.jpg)'
- en: Installing mod_jk
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装mod_jk
- en: 'Next, we need to install `mod_jk`. The following command will install the module,
    enable it, and restart Apache:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要安装`mod_jk`。以下命令将安装模块，启用它，并重新启动Apache：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can then confirm that the module has been enabled by typing the following
    command. This will list all currently enabled modules:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过输入以下命令来确认模块已被启用。这将列出所有当前启用的模块：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, you need to modify the virtual host within for the default configuration
    file, `default`, which can be found in the `/etc/apache2/sites-enabled` directory.
    The configuration shows the updated default configuration of the file. The line
    you need to add is highlighted in the following code:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您需要修改默认配置文件`default`中的虚拟主机，该文件位于`/etc/apache2/sites-enabled`目录下。配置显示了文件的更新默认配置。以下代码中需要添加的行已突出显示：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `JkMount` directive tells Apache which URLs it should forward to the `mod_jk`
    module, which in turn forwards them to the Undertow web container. In the preceding
    example, all requests with the URL path `/*` are sent to the `mod_jk` connector.
    This means that all requests are sent. You can also forward specific URLs to `mod_jk`,
    for example, `/website*`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`JkMount`指令告诉Apache它应该将哪些URL转发到`mod_jk`模块，该模块随后将它们转发到Undertow Web容器。在上面的示例中，所有URL路径为`/*`的请求都发送到`mod_jk`连接器。这意味着所有请求都被发送。您也可以将特定的URL转发到`mod_jk`，例如`/website*`。'
- en: 'If you forward all URLs, you may want to unmount one or two URLs so that static
    data can be served from Apache. This can be achieved using the `JkUmount` directive.
    For example, if you want Apache to serve static media files in the `images` directory,
    you will have a configuration like this:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您转发所有URL，您可能希望卸载一个或两个URL，以便从Apache服务器提供静态数据。这可以通过使用`JkUmount`指令来实现。例如，如果您希望Apache在`images`目录中提供静态媒体文件，您将有一个如下所示的配置：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, you need to configure the `mod_jk` workers file, `workers.properties`,
    which is found in the `/etc/libapache2-mod-jk` folder. This file specifies the
    IP addresses of the Undertow web servers, between which the load is balanced.
    Optionally, you can add a configuration that specifies how calls should be load-balanced
    across each of the servers. For a two-node setup, the file will look like this:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要配置`mod_jk`工作器文件，即`workers.properties`文件，该文件位于`/etc/libapache2-mod-jk`文件夹中。此文件指定了Undertow
    Web服务器的IP地址，在这些服务器之间进行负载均衡。可选地，你可以添加一个配置，指定如何在每个服务器之间进行负载均衡。对于双节点设置，文件将如下所示：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the `workers.properties` file, each node is defined using the `worker.[n]`
    naming convention, where `n` represents an arbitrary name you choose for each
    web server container. For each worker, you must specify the hostname (or IP address)
    and the port number of the AJP13 connector running in the web server.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在`workers.properties`文件中，每个节点使用`worker.[n]`命名约定定义，其中`n`代表你为每个Web服务器容器选择的任意名称。对于每个工作器，你必须指定Web服务器中运行的AJP13连接器的主机名（或IP地址）和端口号。
- en: The load balancer type `lb` means that workers perform weighted round-robin
    load balancing with sticky sessions.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 负载均衡器类型`lb`表示工作器执行带粘性会话的加权轮询负载均衡。
- en: 'You will need to restart Apache after modifying the `worker.properties` file.
    Take a look at the following command:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要在修改`worker.properties`文件后重启Apache。看看以下命令：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In WildFly, the default configuration in the `ha` profiles already defines
    the AJP connector. If you are not using one of the `ha` profiles, for example,
    you are using `standalone.xml`, you need to add the following highlighted line:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在WildFly中，`ha`配置文件中的默认配置已经定义了AJP连接器。如果你没有使用`ha`配置文件之一，例如，你正在使用`standalone.xml`，你需要添加以下高亮显示的行：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The AJP connector is also already defined in the `socket-binding-group` element
    in the ha profiles. Again, for the non-ha profiles, you will need the AJP configuration.
    In the following code snippet, you can see that the AJP connector is listening
    on port number 8009\. Have a look at the following code:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: AJP连接器也在`socket-binding-group`元素中定义了`ha`配置文件。同样，对于非`ha`配置文件，你需要AJP配置。在下面的代码片段中，你可以看到AJP连接器正在监听端口号8009。看看以下代码：
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Once you set up this configuration, you should refresh the page showing you
    the Apache welcome page. It will now show the WildFly welcome page. This proves
    that Apache is directing the requests to WildFly. Stop one of the WildFly servers
    and refresh the page once more. You will continue to see the WildFly welcome page,
    as all requests are now being directed to the other WildFly server.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦设置好此配置，你应该刷新显示Apache欢迎页面的页面。现在它将显示WildFly欢迎页面。这证明了Apache正在将请求定向到WildFly。停止一个WildFly服务器，再次刷新页面。你将看到WildFly欢迎页面，因为现在所有请求都被定向到另一个WildFly服务器。
- en: Configuring mod_proxy
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置mod_proxy
- en: In WildFly, there is support for an optional module named `mod_proxy`. When
    installed, it can be configured so that Apache acts as a proxy server. This can
    be used to forward requests to a particular web application server, such as WildFly,
    without having to configure a web connector, such as `mod_jk`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在WildFly中，支持一个名为`mod_proxy`的可选模块。安装后，它可以配置为Apache充当代理服务器。这可以用来将请求转发到特定的Web应用服务器，如WildFly，而无需配置如`mod_jk`的Web连接器。
- en: 'To install and enable `mod_proxy`, you need to run the following commands:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装和启用`mod_proxy`，你需要运行以下命令：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then, you need to include these two directives in your default site file. You
    need to do this for each web application that you wish to forward to WildFly for
    example, to forward an application with a context path of `/app`. Have a look
    at the following code:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你需要将这些两个指令包含在你的默认站点文件中。你需要为每个你希望转发到WildFly的Web应用程序这样做，例如，为了转发一个上下文路径为`/app`的应用程序。看看以下代码：
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This tells Apache to forward URLs matching `http://localhost/app/*` to the WildFly
    HTTP connector listening on port number 8080.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉Apache将匹配`http://localhost/app/*`的URL转发到监听在端口8080的WildFly HTTP连接器。
- en: '![Configuring mod_proxy](img/6232OS_09_03.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![配置mod_proxy](img/6232OS_09_03.jpg)'
- en: 'As shown in the preceding diagram, Apache''s `mod_proxy` is TCP-based and uses
    HTTP, so you don''t need to add anything else within your WildFly configuration.
    On top of this, there is also support for another module, `mod_proxy_ajp`. This
    module can be used in much the same way as `mod_proxy` except that it uses the
    AJP protocol to proxy Apache requests to WildFly. Before you can use it, you will
    need to enable it as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then, add the highlighted lines to your virtual host in the default site file:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here, we simply redirect all traffic (`/`) to the web server listening on localhost
    at port number 8009\. Take a look at the following screenshot:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring mod_proxy](img/6232OS_09_04.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
- en: 'Again, if you use a non-ha profile, you need to add the AJP listener to your
    Undertow configuration, as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then, you need to add the AJP port as a socket-binding element, as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Load-balancing with mod_cluster
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `mod_cluster` is an HTTP-based load balancer, which, like `mod_jk`, can
    be used to forward requests to a set of application server instances. There are
    several advantages of using `mod_cluster` over `mod_jk` or `mod_proxy`:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic clustering configuration
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Better load balancing due to the ability to use server-side load metrics
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Better integration with the application life cycle
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AJP is optional
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When using a standard load balancer, such as `mod_jk`, you have to provide a
    static list of nodes that are used to spread load. This process is inconvenient,
    especially if you want to dynamically add or remove nodes depending on the amount
    of traffic around your application. In addition to this, using a flat cluster
    configuration can be tedious and prone to error, especially if you have a high
    number of nodes in your cluster.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: When using `mod_cluster`, nodes are dynamically added to, or removed from, your
    cluster. To achieve this, each WildFly server communicates its life cycle state
    to Apache.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Apache sends UDP messages, the so-called advertisements, on a multicast group.
    Each of the WildFly servers in the cluster subscribes to this group. It is via
    this group that WildFly is informed about HTTP proxies (Apache in this case).
    Then, each WildFly instance notifies the HTTP proxies about their availability,
    and then the proxy adds them to a list of nodes. Should a WildFly server be removed,
    the other WildFly servers in the group will be notified.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram helps illustrate this concept:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '![Load-balancing with mod_cluster](img/6232OS_09_05.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
- en: Another key feature of `mod_cluster` resides in the load metrics. Load metrics
    are determined on the server side and are then sent to the Apache side as circumstances
    change. As a consequence, `mod_cluster` provides a far more robust architecture
    than traditional HTTPD-based load balancers, where metrics are statically held
    on the proxy.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information on how server-side load metrics are calculated, refer to
    the `mod_cluster` documentation at [http://docs.jboss.org/mod_cluster/1.2.0/html/java.load.html](http://docs.jboss.org/mod_cluster/1.2.0/html/java.load.html).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 关于服务器端负载指标如何计算的信息，请参阅`mod_cluster`文档中的[http://docs.jboss.org/mod_cluster/1.2.0/html/java.load.html](http://docs.jboss.org/mod_cluster/1.2.0/html/java.load.html)。
- en: Another advantage of using `mod_cluster` is the ability to intercept life cycle
    events, such as undeployment and redeployment. As mentioned previously in this
    section, these are synchronized between Apache and the nodes in the cluster.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`mod_cluster`的另一个优点是能够拦截生命周期事件，例如卸载和重新部署。如本节之前所述，这些事件在Apache和集群中的节点之间是同步的。
- en: Installing mod_cluster libraries
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装mod_cluster库
- en: There are two things to consider when installing and configuring `mod_cluster`.
    The first involves the WildFly configuration, and the second involves downloading
    and installing the `mod_cluster` libraries to Apache. We will look at WildFly
    first, as it is preconfigured, and then move on to the installation of `mod_cluster`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装和配置`mod_cluster`时，有两个需要考虑的事项。第一个涉及WildFly配置，第二个涉及下载和安装`mod_cluster`库到Apache。我们将首先查看WildFly，因为它已经预配置，然后继续到`mod_cluster`的安装。
- en: 'Bundled in your WildFly installation, you will find the mod_cluster 1.3.0 module.
    This subsystem is included as part of the clustering configuration in both the
    `standalone-ha.xml` and `domain.xml` configuration files, as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的WildFly安装中捆绑的，你会找到mod_cluster 1.3.0模块。此子系统作为集群配置的一部分包含在`standalone-ha.xml`和`domain.xml`配置文件中，如下所示：
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The preceding default configuration references its `socket-binding` through
    the `advertise-socket` element:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 上述默认配置通过`advertise-socket`元素引用其`socket-binding`：
- en: '[PRE16]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Also, note that the default configuration uses the AJP protocol. The `connector`
    property references the name of the Undertow listener that the `mod_cluster` reverse
    proxy will connect to. The following is the Undertow configuration with the `ajp-listener`
    highlighted:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请注意，默认配置使用AJP协议。`connector`属性引用了`mod_cluster`反向代理将要连接到的Undertow监听器的名称。以下是有`ajp-listener`高亮的Undertow配置：
- en: '[PRE17]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You will also need to ensure that your interfaces are correctly configured
    to the IP of the server your WildFly server(s) is/are running on. Update your
    `hosts.xml` or `standalone-ha.xml` file, replacing the IP with the your server''s
    IP:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要确保你的接口配置正确，指向你的WildFly服务器（们）运行的IP地址。更新你的`hosts.xml`或`standalone-ha.xml`文件，用你的服务器的IP地址替换IP：
- en: '[PRE18]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Let's now move on to the second part—the installation and configuration of `mod_cluster`
    within Apache.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们继续到第二部分——在Apache中安装和配置`mod_cluster`。
- en: If you do not have Apache installed, you should follow the instructions from
    earlier in this chapter (see the *Installing Apache* section). We first need to
    install the required Apache modules. These modules are used to interact with `mod_cluster`
    on WildFly.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有安装Apache，你应该遵循本章前面的说明（见*安装Apache*部分）。我们首先需要安装所需的Apache模块。这些模块用于与WildFly上的`mod_cluster`交互。
- en: 'In this example, we are using Apache 2.2, which requires Version 1.2.x of `mod_cluster`.
    If you are using Apache 2.4, then you can use a later version of `mod_cluster`,
    namely Version 1.3.x. You can also use Version 1.2.x, but it will need to be compiled
    for Apache 2.4\. To see your version of Apache, run the following command:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们使用Apache 2.2，它需要`mod_cluster`的1.2.x版本。如果你使用Apache 2.4，则可以使用`mod_cluster`的较新版本，即1.3.x版本。你也可以使用1.2.x版本，但需要为Apache
    2.4编译。要查看你的Apache版本，请运行以下命令：
- en: '[PRE19]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Tip
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: At the time of writing, 1.3.x binaries were not available from the download
    site, so you might need to compile them from the source ([https://github.com/modcluster/mod_cluster/tree/master](https://github.com/modcluster/mod_cluster/tree/master))..
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，1.3.x的二进制文件尚未从下载网站提供，因此你可能需要从源代码编译它们([https://github.com/modcluster/mod_cluster/tree/master](https://github.com/modcluster/mod_cluster/tree/master))。
- en: Please check the download site before deciding to go down the route of compiling
    the source. If you wish to compile the module, you should check [http://www.openlogic.com/blog/bid/247607/JBoss-AS7-Clustering-Using-mod_cluster-and-http-2-4-Part-1](http://www.openlogic.com/blog/bid/247607/JBoss-AS7-Clustering-Using-mod_cluster-and-http-2-4-Part-1).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在决定编译源代码之前，请先检查下载网站。如果你希望编译模块，你应该检查[http://www.openlogic.com/blog/bid/247607/JBoss-AS7-Clustering-Using-mod_cluster-and-http-2-4-Part-1](http://www.openlogic.com/blog/bid/247607/JBoss-AS7-Clustering-Using-mod_cluster-and-http-2-4-Part-1)。
- en: 'Go to the download site ([http://mod-cluster.jboss.org/downloads](http://mod-cluster.jboss.org/downloads)),
    and select the binaries for your platform. Select **mod_cluster modules for httpd**:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 访问下载网站 ([http://mod-cluster.jboss.org/downloads](http://mod-cluster.jboss.org/downloads))，并选择您平台上的二进制文件。选择
    **httpd 的 mod_cluster 模块**：
- en: '![Installing mod_cluster libraries](img/6232OS_09_06.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![安装 mod_cluster 库](img/6232OS_09_06.jpg)'
- en: 'Once the binaries have been downloaded, you need to extract the archive to
    the `module` directory in Apache. When you extract the downloaded archive, you
    should see the following files:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 下载完二进制文件后，您需要将其提取到 Apache 的 `module` 目录中。当您提取下载的存档时，应该看到以下文件：
- en: '`mod_advertise.so`'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mod_advertise.so`'
- en: '`mod_manager.so`'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mod_manager.so`'
- en: '`mod_proxy_cluster.so`'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mod_proxy_cluster.so`'
- en: '`mod_slotmem.so`'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mod_slotmem.so`'
- en: You can run the following commands to achieve this. The first one downloads
    the file from the `mod_cluster` website using the URL from the download page.
    The second one extracts the TAR file, and the final command copies the libraries
    to the `modules` directory.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下命令来完成此操作。第一个命令使用下载页面中的 URL 从 `mod_cluster` 网站下载文件。第二个命令提取 TAR 文件，最后一个命令将库复制到
    `modules` 目录。
- en: '[PRE20]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The mod_cluster configuration
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: mod_cluster 配置
- en: 'Next, we need to create two files within the `/etc/apache2/mods-available`
    directory. The first one is called `mod_cluster.load` and contains the list of
    libraries this module depends on. The following is the complete content of the
    file:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要在 `/etc/apache2/mods-available` 目录下创建两个文件。第一个文件名为 `mod_cluster.load`，其中包含该模块所依赖的库列表。以下是该文件的完整内容：
- en: '[PRE21]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Note
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备注
- en: The `slotmen` module name has changed from `mod_slotmen.so` to `mod_cluster_slotmen.so`
    in Version 1.3.x.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在 1.3.x 版本中，`slotmen` 模块名称已从 `mod_slotmen.so` 更改为 `mod_cluster_slotmen.so`。
- en: This list contains the four libraries we just copied to the `module` folder,
    and the pre-existing `mod_proxy` libraries.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 此列表包含我们刚刚复制到 `module` 文件夹中的四个库和现有的 `mod_proxy` 库。
- en: Each of these modules performs a specific role within the load-balancing functionality.
    The core modules are `mod_proxy`, `mod_proxy_ajp`, and `mod_proxy_http`. They
    forward requests to cluster nodes using either the HTTP/HTTPS protocol or the
    AJP protocol.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这些模块中的每一个都在负载均衡功能中扮演着特定的角色。核心模块是 `mod_proxy`、`mod_proxy_ajp` 和 `mod_proxy_http`。它们使用
    HTTP/HTTPS 协议或 AJP 协议将请求转发到集群节点。
- en: Next, `mod_manager` is a module that reads information from WildFly and updates
    the shared memory information in conjunction with `mod_slotmem`. The `mod_proxy_cluster`
    is the module that contains the balancer for `mod_proxy`. Finally, `mod_advertise`
    is an additional module that allows HTTPD to advertise via multicast packets,
    the IP, and port number where the `mod_cluster` is listening.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，`mod_manager` 是一个模块，它从 WildFly 读取信息，并与 `mod_slotmem` 一起更新共享内存信息。`mod_proxy_cluster`
    是包含 `mod_proxy` 负载均衡器的模块。最后，`mod_advertise` 是一个额外的模块，允许 HTTPD 通过多播数据包、IP 地址和 `mod_cluster`
    监听的端口号进行广告。
- en: 'The next file we need to create is called `mod_cluster.conf`. This file is
    placed alongside `mod_cluster.load` within the `/etc/apache2/mods-available` directory,
    as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个我们需要创建的文件名为 `mod_cluster.conf`。该文件位于 `/etc/apache2/mods-available` 目录中，与
    `mod_cluster.load` 文件并列，如下所示：
- en: '[PRE22]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: You have to replace the `127.0.1.1` IP address with the IP address that WildFly
    uses to connect to Apache. If your Apache and WildFly are on different servers,
    then it will be the IP of your Apache server. You also need to update the port
    value of 6666 with the one you want to use for communicating with WildFly.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须将 `127.0.1.1` IP 地址替换为 WildFly 用于连接 Apache 的 IP 地址。如果您的 Apache 和 WildFly
    在不同的服务器上，那么它将是您的 Apache 服务器 IP。您还需要将端口号 6666 更新为您想要与 WildFly 通信的端口号。
- en: 'As the configuration currently stands, the Apache virtual host allows incoming
    requests from:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 根据当前的配置，Apache 虚拟主机允许来自以下请求：
- en: IP addresses with prefix `127.0.1`
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前缀为 `127.0.1` 的 IP 地址
- en: The sub-network `127.0.1.0/24`
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子网络 `127.0.1.0/24`
- en: 'The `CreateBalancers` directive configures how the HTTP balancers are created
    in virtual hosts. The possible values of `CreateBalancers` are `0`, `1`, and `2`,
    outlined as follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`CreateBalancers` 指令配置了如何在虚拟主机中创建 HTTP 均衡器。`CreateBalancers` 的可能值为 `0`、`1`
    和 `2`，如下所述：'
- en: '`0`: Creates balancers in all virtual hosts'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0`：在所有虚拟主机中创建均衡器'
- en: '`1`: Does not create any balancers'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1`：不创建任何均衡器'
- en: '`2`: Creates a balancer for the main server only'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`2`：仅为主服务器创建均衡器'
- en: Note
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备注
- en: 'Setting `CreateBalancers` to `1` means that you must configure a balancer in
    the `ProxyPass` directive (shown further in the chapter). For more information,
    please see this link: [http://docs.jboss.org/mod_cluster/1.2.0/html/native.config.html#d0e485](http://docs.jboss.org/mod_cluster/1.2.0/html/native.config.html#d0e485)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: The `KeepAliveTimeout` directive allows the same connection to be reused within
    300 seconds. The number of requests per connection is unlimited since we are setting
    `MaxKeepAliveRequests` to `0`. The `ManagerBalancerName` directive provides the
    balancer name for your cluster (defaults to `mycluster`).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: What is most important for us is the `ServerAdvertise` directive. It uses the
    advertise mechanism to tell WildFly to whom it should send the cluster information.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: You can also refine the time elapsed between multicasting advertising messages
    with the `AdvertiseFrequency` directive, which defaults to 10 seconds.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Overview of the advertising** **mechanism**'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: 'The default multicast IP address and port used for advertising is `224.0.1.105:23364`.
    These values match the WildFly bindings defined in the following socket-binding
    named `modcluster`:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'If you ever change these values in WildFly, you will also have to match it
    on the HTTPD side with the `AdvertiseGroup` directive:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The very last thing you need to configure is the virtual host in your site
    configuration file. Create a file called `wildfly` within the `/etc/apache2/sites-enabled`
    directory. Add the following highlighted code lines:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'As a final note, if you have not already enabled `proxy_ajp` and `proxy_http`,
    you will need to do so in order for `mod_cluster` to work, as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'You can now enable the WildFly site:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now, enable the `mod_cluster` module and restart Apache:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Testing mod_cluster
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To verify that everything works correctly, start your WildFly domain ensuring
    that your server group is using an `ha` profile. Deploy the application we used
    in [Chapter 4](ch04.html "Chapter 4. The Undertow Web Server"), *The Undertow
    Web Server*, to that same server group. If all is configured correctly, you should
    see the application when you navigate to the context root `chapter4` at `http://178.62.50.168/chapter4`.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing mod_cluster](img/6232OS_09_07.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
- en: Managing mod_cluster via the CLI
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a couple of tools that can be used to manage and retrieve runtime
    information from your cluster. Your first option is the command-line management
    interface, which allows you to investigate the `mod_cluster` subsystem.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: 'The first command you need to learn is `list-proxies`, which returns merely
    the hostnames (and port) of the connected proxies:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'While this can be useful for a quick inspection of your cluster members, you
    can get more detailed information with the `read-proxies-info` command that actually
    sends an information message to the HTTPD server:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The `mod_cluster` subsystem also allows us to use the `read-proxies-configuration`
    command, which provides more verbose information about your cluster. For the sake
    of brevity, we will omit printing its output.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`mod_cluster` 子系统还允许我们使用 `read-proxies-configuration` 命令，该命令提供了有关您的集群的更多详细信息。为了简洁起见，我们将省略其输出的打印。'
- en: 'The list of proxies that are part of your cluster can also be modified with
    the CLI. For example, you can use the `add-proxy` command to add a proxy that
    has not been captured by the mod_cluster''s `httpd` configuration. Have a look
    at the following code:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 您的集群中包含的代理列表也可以使用 CLI 进行修改。例如，您可以使用 `add-proxy` 命令添加一个未被 mod_cluster 的 `httpd`
    配置捕获的代理。请查看以下代码：
- en: '[PRE31]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'You can also remove proxies from the list using the corresponding `remove-proxy`
    command:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以使用相应的 `remove-proxy` 命令从列表中移除代理：
- en: '[PRE32]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Managing your web contexts with the CLI
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 CLI 管理您的 Web 上下文
- en: 'You can use the CLI to manage your web contexts. For example, the `enable-context`
    command can be used to tell Apache that a particular web context is able to receive
    requests, as follows:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 CLI 来管理您的 Web 上下文。例如，可以使用 `enable-context` 命令告诉 Apache 某个特定的 Web 上下文能够接收请求，如下所示：
- en: '[PRE33]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The corresponding `disable-context` command can be used to prevent Apache from
    sending *new* requests:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 相应的 `disable-context` 命令可以用来防止 Apache 发送 *新* 请求：
- en: '[PRE34]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'To stop Apache from sending requests from a web context, you can use the `stop-context`
    command, as follows:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 要停止 Apache 从 Web 上下文中发送请求，您可以使用 `stop-context` 命令，如下所示：
- en: '[PRE35]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Adding native management capabilities
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加原生管理功能
- en: If you are not able (or simply don't want) to use the CLI, then you can also
    configure the Apache web server to provide a basic management interface through
    the browser.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您无法（或者只是不想）使用 CLI，那么您也可以配置 Apache 网络服务器通过浏览器提供基本的管理界面。
- en: 'In order to do that, all you need to add is the `mod_cluster_manager` application
    context, as follows:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，您只需要添加 `mod_cluster_manager` 应用程序上下文，如下所示：
- en: '[PRE36]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: You can test your `mod_cluster` manager application by navigating to `http://192.168.10.1/http://192.168.10.1/mod_cluster_manager`.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过导航到 `http://192.168.10.1/http://192.168.10.1/mod_cluster_manager` 来测试您的
    `mod_cluster` 管理员应用程序。
- en: 'In our example, the `mod_cluster` manager displays information about all the
    WildFly nodes that have been discovered through multicast announcements. Take
    a look at the following screenshot:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，`mod_cluster` 管理员显示了通过多播公告发现的全部 WildFly 节点的信息。请查看以下截图：
- en: '![Adding native management capabilities](img/6232OS_09_08.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![添加原生管理功能](img/6232OS_09_08.jpg)'
- en: In the `mod_cluster` manager page, you have lots of useful information, such
    as the number of hosts that are currently active (in our example, two nodes) and
    the web contexts that are available. By default, all web contexts are mounted
    automatically (not requiring an explicit mount as for `mod_jk`), but you can exclude
    or include them by clicking on the **Disable**/**Enable** link, which is placed
    next to the web context.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `mod_cluster` 管理员页面上，您有很多有用的信息，例如当前活跃的主机数量（在我们的示例中，两个节点）和可用的 Web 上下文。默认情况下，所有
    Web 上下文都会自动挂载（不需要像 `mod_jk` 那样显式挂载），但您可以通过点击旁边的 **禁用**/**启用** 链接来排除或包含它们。
- en: Managing web contexts using the configuration file
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用配置文件管理 Web 上下文
- en: 'For the sake of completeness, we will add one more option that can be used
    to manage your web context using your application server configuration file. By
    default, all web contexts are enabled; however, you can exclude web contexts from
    the main configuration file using the `excluded-contexts` directive. Take a look
    at the following code:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完整起见，我们将添加一个可以用来通过您的应用程序服务器配置文件管理 Web 上下文的选项。默认情况下，所有 Web 上下文都是启用的；然而，您可以使用
    `excluded-contexts` 指令从主配置文件中排除 Web 上下文。请查看以下代码：
- en: '[PRE37]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Troubleshooting mod_cluster
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: mod_cluster 故障排除
- en: 'Installing and enabling `mod_cluster` on Apache requires just a few steps to
    get working. However, should you have problems, you can allow a verbose output,
    which will cause an overview of your configuration to be displayed. Add the `AllowDisplay`
    directive to your `mod_cluster_manager` application context as highlighted as
    follows:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Apache 上安装和启用 `mod_cluster` 只需几个步骤即可开始工作。然而，如果您遇到问题，可以允许输出详细信息，这将导致显示您的配置概览。将
    `AllowDisplay` 指令添加到您的 `mod_cluster_manager` 应用程序上下文中，如下所示：
- en: '[PRE38]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'When adding this directive, you will get further information about the modules
    loaded into HTTPD. This output may help you narrow down any issues, as shown in
    the following screenshot:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '![Troubleshooting mod_cluster](img/6232OS_09_09.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
- en: 'One more possible cause of errors is a firewall preventing the broadcast of
    advertising messages. Remember that advertisement messages use the UDP port number
    23364 and the multicast address 224.0.1.105\. In order to verify if advertising
    is an issue, you can try to turn it off by setting the following in the HTTPD
    side:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'This directive should be matched on the application server side by the `proxy-list`
    element. This element defines the list of HTTPD servers with which the WildFly
    server will initially communicate:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: If there is more than one proxy, then the `proxy-list` will contain a comma-separated
    list.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also check that `mod_cluster` is correctly advertising messages by
    running a test class `Advertise`, which can be found at [https://github.com/modcluster/mod_cluster/blob/master/test/java/Advertize.java](https://github.com/modcluster/mod_cluster/blob/master/test/java/Advertize.java).
    You will need to compile the class and then run it as follows:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'If the module, that is, advertizing, is correctly configured, you will see
    something like the following command lines displayed:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Finally, don't forget to check the error log in the Apache `logs` directory
    for any errors.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: Also, make sure that you have enabled the `mod_proxy_http` module, as `mod_cluster`
    will fail to work without it.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: Load-balancing between nodes
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will run a couple of tests in order to investigate how `mod_cluster` distributes
    the load between several different clients.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: 'For these tests, we will use a very basic web application. The application
    source can be found with the source code for this book; the project is called
    `chapter9-balancer`. It contains a simple `index.jsp` page, which dumps a message
    on the console:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'After deploying the application, go to the URL `http://192.168.0.10/balancer/index.jsp`.
    After making several requests, you will see that each subsequent request is sent
    to the same server. This shows that `mod_cluster` follows a sticky-session policy.
    Have a look at the following screenshot:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: '![Load-balancing between nodes](img/6232OS_09_10.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
- en: For the purpose of our tests, we need a software application that can be used
    to launch several requests to our cluster. We will use JMeter, a Java desktop
    application, which is generally used to test load, test functional behavior, and
    measure performance. JMeter can be downloaded from [http://jmeter.apache.org/download_jmeter.cgi](http://jmeter.apache.org/download_jmeter.cgi).
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: In short, a JMeter test plan consists of one or more thread groups, logic controllers,
    listeners, timers, assertions, and configuration elements.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: 'For the purpose of our example, we will just create the following elements:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: A **Thread Group**, which is configured to run 100 subsequent requests
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An **HTTP Request** element that contains information about the web application's
    end point
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To do this, open JMeter and navigate to **Test Plan** | **Add** | **Threads**
    | **Thread Group**, as shown in the following screenshot:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '![Load-balancing between nodes](img/6232OS_09_11.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
- en: 'Set the number of threads (users) to 100\. Now right-click on the newly created
    **Thread Group** | **Add** | **Sampler** | **HTTP Request**. In here, add the
    server IP and path, as shown to the right-hand side of the following screenshot.
    The port number can be left blank as it defaults to port number 80\. Take a look
    at the following screenshot:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: '![Load-balancing between nodes](img/6232OS_09_12.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
- en: Additionally, you should add a **Listener** element that collates the test plan
    result into a table/graph in order for you to view the results. To do this, navigate
    to **HTTP Request** | **Add** | **Listener** | **View Results in Table**. Now,
    from the top menu, navigate to **Run** | **Start**, and the JMeter test will be
    executed.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: 'Running the test shows that the requests are roughly split between the two
    servers. Have a look at the following screenshot:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '![Load-balancing between nodes](img/6232OS_09_13.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
- en: Using load metrics
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Various system load metrics are collected from each server. These statistics
    allow a normalized load value to be calculated for each server. When the cluster
    is under light load, the incoming requests are evenly distributed to each server
    node. As the load increases, the amount of traffic sent to a given node depends
    on its current load, that is, more traffic will be directed to the node that has
    the least load.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: 'The default `mod_cluster` configuration is configured with a dynamic load provider,
    as shown in the following code:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'You can customize load balancing by adding further `load-metric` elements.
    For example:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The most important factors when computing load balancing are the `weight` and
    `capacity` properties. The `weight` (the default is `1`) indicates the impact
    of a metric with respect to the other metrics. In the previous example, the CPU
    metric will have twice the impact compared to the sessions that have a load factor
    metric of `1`.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: The `capacity` property, on the other hand, can be used for a fine-grained control
    over the load metrics. By setting a different capacity to each metric, you can
    actually favor one node over another while preserving the metric weights.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: 'The list of supported load metrics is summarized in the following table:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: '| Metric | Factor used to compose metric |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
- en: '| cpu | CPU load |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
- en: '| heap | Heap memory usage as a percentage of max heap size |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
- en: '| sessions | Number of web sessions |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
- en: '| requests | Number of requests/sec |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
- en: '| send-traffic | Number of outgoing requests in traffic |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
- en: '| receive-traffic | Number of incoming requests post traffic |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
- en: 'The preceding metrics can also be set using the CLI, for example, supposing
    that you want to add a metric that is based on the amount of heap used by the
    proxy. Don''t forget to reload the configuration when notified to do so (enter
    the `reload` command). Here''s what you need to issue:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'You can also remove the metric using the `remove` command, as follows:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: An example for setting dynamic metrics on a cluster
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the following example, we have a very simple cluster comprising two nodes.
    Each node has the same JVM operating defaults, and each one is running on two
    identical machines.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: 'We will, however, simulate memory-intensive operations on the first node so
    that the amount of heap memory used differs between each server, as shown in the
    following screenshot:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: '![An example for setting dynamic metrics on a cluster](img/6232OS_09_14.jpg)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
- en: This is a common scenario in web applications where different circumstances
    have a different impact on each server's memory, for example, holding data temporarily
    in the HTTP session.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: 'In such a case, using a round-robin approach to distribute a request may lead
    to an "out-of-memory" scenario on some nodes in your cluster. You can try to mitigate
    this by simply modifying the configuration of the loading metrics, as follows:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: When using this configuration on both nodes, the heap memory usage has twice
    the impact of other enlisted metrics (operating system memory and CPU speed).
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: The outcome of this is that the second server handles 55 percent of the requests,
    while the first server handles 45 percent.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: 'By setting the appropriate capacity, you can further achieve a better level
    of granularity to node-weighting, for example, by setting a higher capacity on
    the first server, as follows:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'You can set a lower capacity on the second one, as follows:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Then, the outcome of the test will be different, as the second server now delivers
    more responses than the first one, counterbalancing the weight metric.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-242
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The capacity of each metric defaults to 512 and should be configured such that
    `0 <= (load / capacity) >= 1`.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we showed various ways of distributing application load across
    a set of nodes. This is referred to as load balancing.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: Load balancing requires a web server, such as Apache, which directs traffic
    to your various application servers.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: In the first half of this chapter, we illustrated how to use the `mod_jk` and
    `mod_proxy` libraries in WildFly. The `mod_jk` library requires some configuration
    on both the HTTPD side and the AS side. The `mod_proxy` library is a more immediate
    solution and a preferred solution when using WildFly as it requires simply configuring
    the end points on the HTTPD side.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: In the second half of the chapter, we looked at the recommended approach to
    load-balance calls between applications using `mod_cluster`.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: The main advantage of using `mod_cluster` versus traditional load balancers
    is that it does not require a static list of worker nodes, rather, it registers
    application servers and their applications dynamically using a multicast-based
    advertising mechanism.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: This is especially useful in a cloud environment, where you cannot rely on a
    flat list of nodes. It is much more beneficial to add or remove nodes on the fly.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: Finally, another major benefit of `mod_cluster` is that you can use a dynamic
    set of metrics that are calculated on the server side to define the load between
    server nodes. For example, you can give priority to servers that have better specifications,
    such as higher RAM or better processing power.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to look at one of the most important parts
    of WildFly administration, that is, security.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
