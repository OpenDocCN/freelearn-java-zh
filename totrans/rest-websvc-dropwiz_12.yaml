- en: Appendix B. Deploying a Dropwizard Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录B. 部署Dropwizard应用程序
- en: Throughout this book, we have demonstrated and used the most important parts
    of a Dropwizard project. Our application is now ready, production ready. It is
    ready to be deployed on a server from where it can be accessed by everyone through
    the Internet.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我们展示了并使用了Dropwizard项目最重要的部分。我们的应用程序现在已准备好，可以投入生产。它已准备好部署到服务器，从那里可以通过互联网被每个人访问。
- en: Preparing the application for deployment
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备应用程序以进行部署
- en: As you may have guessed, our application does not have many dependencies. Just
    check for your `pom.xml` file and look for the section where `maven-compiler-plugin`
    is declared.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所猜，我们的应用程序没有很多依赖项。只需检查您的`pom.xml`文件，并查找声明`maven-compiler-plugin`的部分。
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: All that should be present on the server is the Java Runtime Environment of
    the version that is equal or greater to the one specified in the `<target>` element
    of the build plugin's configuration section.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器上应该只存在Java运行时环境，其版本等于或高于构建插件配置部分中`<target>`元素指定的版本。
- en: How to do it…
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'Once we confirm that our dependencies (the Java versions) are satisfied, we
    can upload the JAR file through an FTP and run the application in the same way
    as we already do:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们确认了我们的依赖项（Java版本）满足要求，我们就可以通过FTP上传JAR文件，并以与我们之前相同的方式运行应用程序：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works…
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In our `pom.xml` file, we have all the required Maven parameters declared along
    with `maven-shade-plugin`, which allows us to build a single JAR file that includes
    all the third-party modules and libraries our application uses. Just remember
    to upload your config file on the server as well or create a new one with a possibly
    different setting, such as database connection details.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`pom.xml`文件中，我们声明了所有必需的Maven参数，包括`maven-shade-plugin`，这使得我们可以构建一个包含我们应用程序使用的所有第三方模块和库的单个JAR文件。只需记住，也要将您的配置文件上传到服务器，或者创建一个新的配置文件，可能包含不同的设置，例如数据库连接详情。
- en: There's more…
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: There are many good reasons why you may wish to change the default port of your
    application from 8080 to something else.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多很好的理由，您可能希望将应用程序的默认端口从8080更改为其他端口。
- en: 'This can be achieved with just a few additions to your configuration file:
    `config.yaml`. However, in order for these settings to work, we will need to add
    ServiceResourceTransformer in the build configuration by adding the following
    entry in the pom.xml file, within the `<transformers> section: <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>`.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过对您的配置文件`config.yaml`进行少量添加来实现。然而，为了使这些设置生效，我们需要在构建配置中添加ServiceResourceTransformer，通过在pom.xml文件中的`<transformers>`部分添加以下条目来实现：`<transformer
    implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>`。
- en: 'Add the section `server` and configure its properties as shown in the following
    code:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 添加`server`部分，并按照以下代码配置其属性：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Multiple configuration files
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多个配置文件
- en: A good practice is to maintain different sets of configuration files (YAML)
    for your application per environment. For instance, you will probably be using
    different databases for test and production environments, and it's better to keep
    the connection information in different files. In addition, you may want to have
    a more verbose log level on your development or test environment than in production.
    Depending on the nature and the complexity of your application, there would for
    sure be many additional reasons that you and your application would benefit by.
    Luckily, Dropwizard offers many settings that can be tweaked to match your application's
    needs.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一种良好的实践是为您的应用程序的每个环境维护不同的配置文件集（YAML）。例如，您可能会为测试和生产环境使用不同的数据库，并且最好将连接信息保存在不同的文件中。此外，您可能希望在开发或测试环境中的日志级别比生产环境更详细。根据您应用程序的性质和复杂性，肯定会有许多其他原因让您和您的应用程序从中受益。幸运的是，Dropwizard提供了许多可以调整以匹配您应用程序需求的设置。
