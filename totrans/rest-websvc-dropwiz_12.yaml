- en: Appendix B. Deploying a Dropwizard Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this book, we have demonstrated and used the most important parts
    of a Dropwizard project. Our application is now ready, production ready. It is
    ready to be deployed on a server from where it can be accessed by everyone through
    the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the application for deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you may have guessed, our application does not have many dependencies. Just
    check for your `pom.xml` file and look for the section where `maven-compiler-plugin`
    is declared.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: All that should be present on the server is the Java Runtime Environment of
    the version that is equal or greater to the one specified in the `<target>` element
    of the build plugin's configuration section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once we confirm that our dependencies (the Java versions) are satisfied, we
    can upload the JAR file through an FTP and run the application in the same way
    as we already do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In our `pom.xml` file, we have all the required Maven parameters declared along
    with `maven-shade-plugin`, which allows us to build a single JAR file that includes
    all the third-party modules and libraries our application uses. Just remember
    to upload your config file on the server as well or create a new one with a possibly
    different setting, such as database connection details.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many good reasons why you may wish to change the default port of your
    application from 8080 to something else.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be achieved with just a few additions to your configuration file:
    `config.yaml`. However, in order for these settings to work, we will need to add
    ServiceResourceTransformer in the build configuration by adding the following
    entry in the pom.xml file, within the `<transformers> section: <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the section `server` and configure its properties as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Multiple configuration files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A good practice is to maintain different sets of configuration files (YAML)
    for your application per environment. For instance, you will probably be using
    different databases for test and production environments, and it's better to keep
    the connection information in different files. In addition, you may want to have
    a more verbose log level on your development or test environment than in production.
    Depending on the nature and the complexity of your application, there would for
    sure be many additional reasons that you and your application would benefit by.
    Luckily, Dropwizard offers many settings that can be tweaked to match your application's
    needs.
  prefs: []
  type: TYPE_NORMAL
