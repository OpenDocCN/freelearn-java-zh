["```java\n    . . . \n\n    class Example \n    {\n      int myInt;\n      . . . \n    }\n    . . . \n    class Sample \n    {\n      static final VarHandle VH_MYINT;\n\n      static \n      {\n        try \n        {\n          VH_MYINT =  \n            MethodHandles.lookup().in(Example.class)\n            .findVarHandle(Example.class, \"myInt\", int.class);\n        } \n        catch (Exception e) \n        {\n          throw new Error(e);\n        }\n      }\n    }\n\n    . . . \n```", "```java\n    public class Sample \n    {\n      private static volatile Sample myVolatileVariable; // a\n       volatile instance variable\n\n      public static Sample getVariable() // getter method\n      {\n        if (myVolatileVariable != null) \n        {\n          return myVolatileVariable;\n        }\n        // this section executes if myVolatileVariable == null\n        synchronized(Sample.class)\n        {\n          if (myVolatileVariable == null)\n          {\n            myVolatileVariable =  new Sample();\n          }\n        }\n    }\n```", "```java\n    @SupressWarnings\n```", "```java\n    @SafeVarargs // this is the annotation\n    static void methodName(...) \n    {\n\n      /*\n      The contents of the method or constructor must not \n      perform any unsafe or potentially unsafe operations \n      on the varargs parameter or parameters.\n      */\n\n    }\n```", "```java\n    try ( // open resources ) \n    {\n      // use resources\n    } catch (// error) \n    {  // handle exceptions\n    }\n    // automatically close resources\n```", "```java\n    try ( Scanner xmlScanner = new Scanner(new File(xmlFile));\n    {\n       while (xmlScanner.hasNext())\n       {\n          // read the xml document and perform needed operations\n       }\n      xmlScanner.close();\n    } catch (FileNotFoundException fnfe)\n      {\n         System.out.println(\"Your XML file was not found.\");\n      }\n```", "```java\n    Scanner xmlScanner = new Scanner(newFile(xmlFile));\n    try ( while (xmlScanner.hasNext())\n    {\n       {\n         // read the xml document and perform needed operations\n       }\n       xmlScanner.close();\n    } catch (FileNotFoundException fnfe)\n      {\n         System.out.println(\"Your XML file was not found.\");\n      }\n```", "```java\n    ArrayList<Student> roster = new ArrayList<Student>();\n```", "```java\n    ArrayList<Student> roster = new ArrayList<>();\n```", "```java\n    public interface Example<T> \n    {\n      void aMethod()\n      {\n        // interface code goes here\n      }\n    }\n\n    Example example = new Example<Integer>() \n    {\n      @Override\n      public void aMethod() \n      {\n        // code\n      }\n    };\n```", "```java\n    public interface Example<T> \n    {\n      void aMethod()\n      {\n        // interface code goes here\n      }\n    }\n\n    Example example = new Example<>() \n    {\n      @Override\n      public void aMethod() \n      {\n        // code\n      }\n    };\n```", "```java\n    public class Java9Tests \n    { \n      public static void main(String[] args) \n      {\n        int _ = 319;\n        if ( _ > 300 )\n        {\n          System.out.println(\"Your value us greater than 300.\"); \n        } \n        else \n        {\n          System.out.println(\"Your value is not greater than 300.\");\n        }\n      }\n    }\n```", "```java\n    . . . \n    public interface characterTravel\n    {\n      pubic default void walk()\n      {\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"Enter desired pacing: \");\n        int p = scanner.nextInt();\n        p = p +1;\n      }\n      public default void run()\n      {\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"Enter desired pacing: \");\n        int p = scanner.nextInt();\n        p = p +4;\n      }\n      public default void fastWalk()\n      {\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"Enter desired pacing: \");\n        int p = scanner.nextInt();\n        p = p +2;\n      }\n      public default void retreat()\n      {\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"Enter desired pacing: \");\n        int p = scanner.nextInt();\n        p = p - 1;\n      }\n      public default void fastRetreat()\n      {\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"Enter desired pacing: \");\n        int p = scanner.nextInt();\n        p = p - 4;\n      }\n    }\n```", "```java\n    . . . \n    public interface characterTravel\n    {\n      pubic default void walk()\n      {\n        characterTravel(\"walk\");\n      }\n      public default void run()\n      {\n        characterTravel(\"run\");\n      }\n      public default void fastWalk()\n      {\n        characterTravel(\"fastWalk\");\n      }\n      public default void retreat()\n      {\n        characterTravel(\"retreat\");\n      }\n      public default void fastRetreat()\n      {\n        characterTravel(\"fastRetreat\");\n      }\n      private default void characterTravel(String pace)\n      {\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"Enter desired pacing: \");\n        int p = scanner.nextInt();\n        if (pace.equals(\"walk\"))\n        {\n          p = p +1;\n        }\n        else if (pace.equals(\"run\"))\n        {\n          p = p + 4;\n        }\n        else if (pace.equals(\"fastWalk\"))\n        {\n          p = p + 2;\n        }\n        else if (pace.equals(\"retreat\"))\n        {\n          p = p - 1;\n        }\n        else if (pace.equals(\"fastRetreat\"))\n        {\n          p = p - 4;\n        }\n        else\n        {\n          //\n        }\n```", "```java\n    package samplePackage;\n\n    import static SamplePackage.OuterPackage.Nested.*;\n    import SamplePackage.Thing.*;\n\n    public class OuterPackage \n    {\n      public static class Nested implements Inner \n      { \n        // code\n      }\n    }\n\n    package SamplePackage.Thing;\n\n    public interface Inner \n    {\n      // code\n    }\n```"]