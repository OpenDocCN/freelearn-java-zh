- en: Data-Driven Testing with TestNG
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will see how to create data-driven tests using TestNG and
    Selenium WebDriver. We will look at the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is data-driven testing?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using TestNG suite parameters to parameterize tests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using TestNG data providers for data-driven testing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the CSV and Excel file formats for storing and reading test data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overview of data-driven testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By employing the data-driven testing approach, we can use a single test to
    verify different sets of test cases or test data by driving the test with input
    and expected values from an external data source instead of using the hardcoded
    values every time a test is run. This becomes useful when we have similar tests
    that consist of the same steps but differ in the input data and expected value
    or the application state. Here is an example of a set of login test cases with
    different combinations:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Description** | **Test data** | **Expected output** |'
  prefs: []
  type: TYPE_TB
- en: '| Test valid username and password | A pair of valid usernames and passwords
    | The user should log into the application with a success message |'
  prefs: []
  type: TYPE_TB
- en: '| Test invalid username and password | An invalid username and password | The
    user should be displayed the login error |'
  prefs: []
  type: TYPE_TB
- en: '| Valid username and invalid password | A valid username and an invalid password
    | The user should be displayed the login error |'
  prefs: []
  type: TYPE_TB
- en: We can create a single script that can handle the test data and the conditions
    from the preceding table. By using the data-driven testing approach, we separate
    the test data from the test logic by replacing the hardcoded test data with variables
    using the data from external sources, such as CSV or a spreadsheet file. This
    also helps to create reusable tests that can run with different sets of data,
    which can be kept outside of the test. Data-driven testing also helps in increasing
    the test coverage, as we can handle multiple test conditions while minimizing
    the amount of test code we need to write and maintain.
  prefs: []
  type: TYPE_NORMAL
- en: 'The benefits of data-driven testing are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: We can get greater test coverage while minimizing the amount of test code we
    need to write and maintain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It makes creating and running a lot of test conditions very easy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test data can be designed and created before the application is ready for testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data tables can also be used in manual testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selenium WebDriver, being a pure browser-automation API, does not provide built-in
    features to support data-driven testing. However, we can add support for data-driven
    testing using testing frameworks such as JUnit or TestNG. In this book, we are
    using TestNG as our testing framework and we will use parameterization features
    of TestNG to create data-driven tests in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Parameterizing Tests using suite parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In *[Chapter 1](9f647c33-1720-4d7b-973b-7d2ef9dad924.xhtml), Introducing WebDriver
    and WebElements*, we created a search test that performs a simple search on the
    application under test. This test searches for a given product and validates the
    title. We used a hardcoded value, `phones`, for the search, as shown in the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Instead of using hardcoded values, we can parameterize these values and provide
    them to the test method using the suite-parameter feature of TestNG. This will
    help to remove using hardcoded values in the test method and move them into TestNG
    suite files. The parameterized values can be used in multiple tests. When we need
    to change these values, we don't have to go to each test and make a change,the 
    instead we can simply change these in suite file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s look at steps for using the TestNG Parameters from the suite file.
    In *[Chapter 1](9f647c33-1720-4d7b-973b-7d2ef9dad924.xhtml),* we created a `testng.xml`
    file, which is located in the `src/test/resources/suites` folder. Let''s modify
    the file and add the parameter declaration, as highlighted in the following code
    snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We can add parameters in the TestNG suite file using the `<parameter>` tag.
    We have to provide the `name` and  `value` attributes for the parameter. In this
    example, we create two parameters: `searchWord` and `items`. These parameters
    store the search word and expected count of items returned by the application
    for that search word.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s modify the test to use parameters instead of hardcoded values.
    First, we need to use the `@Parameters` annotation before the `@Test` annotation
    for the test method. In the `@Parameters` annotation, we need to supply the exact
    names and order of the parameters declared in the suite file. In this case, we
    will supply `searchWord` and `items`. We also need to add arguments to the test
    method along with the required data type to map the XML parameters. In this case,
    the `String searchWord` and `int Items` arguments are added to the `searchProduct()`
    test method. Finally, we need to replace the hardcoded values with the arguments
    in the test method, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We have to run the parameterized tests via the testng.xml file for TestNG to
    read the parameters defined in the suite file and pass the values to the test
    method.
  prefs: []
  type: TYPE_NORMAL
- en: During execution, TestNG will use the parameters defined in the XML suite file
    and map these in the same order to the Java parameters in test methods using the `@Parameters`
    annotation. It will pass the parameter values from the suite file using the arguments
    added in the test method. TestNG will throw an exception if the number of parameters
    between XML and the `@Parameters` annotation does not match.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will see a programmatic parameterization, which offers
    us the ability to run tests with multiple rows of test data.
  prefs: []
  type: TYPE_NORMAL
- en: Parameterizing Tests with a Data Provider
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While suite parameters are useful for simple parameterization, they are not
    sufficient for creating data-driven tests with multiple test data values and reading
    data from external files, such as property files, CSV, Excel, or databases. In
    this case, we can use a `Data Provider` to supply the values need to test. A `Data
    Provider` is a method defined in the test class that returns an array of array
    of objects.  This method is annotated with the `@DataProvider` annotation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s modify the preceding test to use the `Data Provider`. Instead of using
    a single searchWord, we will now use three combinations of `searchWords` and expected
    `items` counts returned by the search. We will add a new method, named provider(),
    in the SearchTest class, as shown in following code, before the `@BeforeMethod`
    annotation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: When a method is annotated with `@DataProvider`, it becomes a data-feeder method
    by passing the test data to the test case. In addition to the `@DataProvider` annotation,
    we also need to provide a name for the `data provider`. In this example, we have
    given the name as `searchWords`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to update the `searchTest()` test method to link to the `data
    provider`. This is done with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Provide the name of the `data provider` in the `@Test` annotation
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add two arguments `String searchWord` and `int items` to the `searchProduct`
    method
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use method parameters to substitute hardcoded values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `provider()` method will become the data-feeder method, which returns an array
    of objects that are combinations of `searchWords` and expected `items` counts,
    and TestNG will pass the array of data rows to the test method.
  prefs: []
  type: TYPE_NORMAL
- en: 'TestNG will execute the test four times with different test combinations. TestNG
    also generates a well-formatted report at the end of the test execution. Here
    is an example of the test results with TestNG using the defined values. The `searchProduct`
    test is executed three times, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d5d4e50e-b3fa-41d7-8dfc-58f99bc684a7.png)'
  prefs: []
  type: TYPE_IMG
- en: Reading data from a CSV file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We saw a simple data-driven test TestNG. The test data was hardcoded in the
    test-script code. This could become difficult to maintain. It is recommended that
    we store the test data separately from the test scripts. Often, we use data from
    the production environment for testing. This data can be exported in the CSV format.
    We can read these CSV files in data-provider methods and pass the data to the
    test instead of hardcoded object arrays.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we will use the OpenCSV library to read a CSV file. OpenCSV
    is a simple Java library for reading CSV files in Java. You can find more details
    on OpenCSV at [http://opencsv.sourceforge.net/](http://opencsv.sourceforge.net/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s first create a CSV file, named `data.csv`, in the `src/test/resources/data`
    folder and copy the following combinations of `searchWords` and `items`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to add the OpenCSV dependency to the Maven pom.xml file. For
    this example, we will use the latest version, 3.4, as shown in the following code
    snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we need to modify the `provider()` method in the test class to read
    the contents of the CSV file and return them as an array of objects, as shown
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In the provide method, the CSV file will be parsed using the CSVReader class
    of the OpenCSV library. We need to provide the path of the CSV file, the delimiter
    character, and the header row number (this will skip while fetching the data),
    as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we will read each line of the CSV file ,copy it to an
    array of the object, and return it to the test method. The test method will be
    executed for each row in the CSV file.
  prefs: []
  type: TYPE_NORMAL
- en: Reading data from an Excel file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To maintain test cases and test data, Microsoft Excel is a favourite tool for
    testers. Compared to the CSV file format, Excel offers numerous features and a
    structured way to store data. A tester can create and maintain tables of test
    data in an Excel spreadsheet easily.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create an Excel spreadsheet, named `data.xlsx`, in the `src/test/resources/data`
    folder with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/af37aa88-2891-4ba1-9fd8-452979afabbb.png)'
  prefs: []
  type: TYPE_IMG
- en: In this section, we will use an Excel spreadsheet as your data source. We will
    use the Apache POI API, developed by the Apache Foundation, to manipulate the
    Excel spreadsheet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s modify the `provider()` method to use a helper class, called `SpreadsheetData`,
    to read the Excel file''s contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The `SpreadsheetData` class This is available in the source code bundle for
    this book. This class supports both the old .xls and newer .xlsx formats:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'When the test is executed, the `provider()` method will create an instance
    of the `SpreadsheetData` class. The `SpreadsheetData` class reads the contents
    of the Excel spreadsheet row by row in a collection and returns this collection
    back to the `provider()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: For each row in the test data collection returned by the `provider()` method,
    the test runner will instantiate the test case class, passing the test data as
    parameters to the test-class constructor, and then execute all the tests in the
    test class.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about an important technique to create parameterized
    and data-driven tests using TestNG features. This will help you to create highly-maintainable
    and robust tests with minimum coding effort and increased test coverage. We also
    looked at ways to read data from the CSV and Excel formats.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Explain what Data-driven Testing is.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Selenium supports data-driven testing— True or False?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are two methods in TestNG to create data-driven tests?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explain the `DataProvider` method in TestNG.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can check out the following links for more information about the topics
    covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Read more about TestNG data-driven features at [https://testng.org/doc/documentation-main.html#parameters](https://testng.org/doc/documentation-main.html#parameters)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read more about the Apache POI library at [https://poi.apache.org/](https://poi.apache.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
