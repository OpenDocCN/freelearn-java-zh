- en: Data-Driven Testing with TestNG
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 TestNG 进行数据驱动测试
- en: 'In this chapter, we will see how to create data-driven tests using TestNG and
    Selenium WebDriver. We will look at the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将了解如何使用 TestNG 和 Selenium WebDriver 创建数据驱动测试。我们将探讨以下主题：
- en: What is data-driven testing?
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是数据驱动测试？
- en: Using TestNG suite parameters to parameterize tests.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 TestNG 套件参数来参数化测试。
- en: Using TestNG data providers for data-driven testing.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 TestNG 数据提供者进行数据驱动测试。
- en: Using the CSV and Excel file formats for storing and reading test data.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 CSV 和 Excel 文件格式来存储和读取测试数据。
- en: Overview of data-driven testing
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据驱动测试概述
- en: 'By employing the data-driven testing approach, we can use a single test to
    verify different sets of test cases or test data by driving the test with input
    and expected values from an external data source instead of using the hardcoded
    values every time a test is run. This becomes useful when we have similar tests
    that consist of the same steps but differ in the input data and expected value
    or the application state. Here is an example of a set of login test cases with
    different combinations:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 通过采用数据驱动测试方法，我们可以通过使用来自外部数据源（而不是每次运行测试时都使用硬编码的值）的输入和预期值来驱动测试，从而使用单个测试验证不同的测试用例集或测试数据。这在当我们有类似的测试，这些测试由相同的步骤组成，但在输入数据、预期值或应用程序状态上有所不同时非常有用。以下是一个具有不同组合的登录测试用例集的示例：
- en: '| **Description** | **Test data** | **Expected output** |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| **描述** | **测试数据** | **预期输出** |'
- en: '| Test valid username and password | A pair of valid usernames and passwords
    | The user should log into the application with a success message |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| 测试有效的用户名和密码 | 一对有效的用户名和密码 | 用户应该以成功消息登录应用程序 |'
- en: '| Test invalid username and password | An invalid username and password | The
    user should be displayed the login error |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| 测试无效的用户名和密码 | 一个无效的用户名和密码 | 应向用户显示登录错误 |'
- en: '| Valid username and invalid password | A valid username and an invalid password
    | The user should be displayed the login error |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| 有效的用户名和无效的密码 | 一个有效的用户名和一个无效的密码 | 应向用户显示登录错误 |'
- en: We can create a single script that can handle the test data and the conditions
    from the preceding table. By using the data-driven testing approach, we separate
    the test data from the test logic by replacing the hardcoded test data with variables
    using the data from external sources, such as CSV or a spreadsheet file. This
    also helps to create reusable tests that can run with different sets of data,
    which can be kept outside of the test. Data-driven testing also helps in increasing
    the test coverage, as we can handle multiple test conditions while minimizing
    the amount of test code we need to write and maintain.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以创建一个单一的脚本，它可以处理测试数据和前表中所示的条件。通过使用数据驱动测试方法，我们通过使用来自外部源（如 CSV 或电子表格文件）的数据替换硬编码的测试数据，将测试数据与测试逻辑分离。这也帮助创建可重用的测试，这些测试可以与不同的数据集一起运行，这些数据集可以保留在测试之外。数据驱动测试还有助于提高测试覆盖率，因为我们可以在最小化需要编写和维护的测试代码量的同时处理多个测试条件。
- en: 'The benefits of data-driven testing are as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 数据驱动测试的好处如下：
- en: We can get greater test coverage while minimizing the amount of test code we
    need to write and maintain
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以在最小化需要编写和维护的测试代码量的同时获得更大的测试覆盖率
- en: It makes creating and running a lot of test conditions very easy
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使得创建和运行大量测试条件变得非常容易
- en: Test data can be designed and created before the application is ready for testing
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试数据可以在应用程序准备好测试之前设计和创建
- en: Data tables can also be used in manual testing
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据表也可以用于手动测试
- en: Selenium WebDriver, being a pure browser-automation API, does not provide built-in
    features to support data-driven testing. However, we can add support for data-driven
    testing using testing frameworks such as JUnit or TestNG. In this book, we are
    using TestNG as our testing framework and we will use parameterization features
    of TestNG to create data-driven tests in the following sections.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium WebDriver 作为一种纯浏览器自动化 API，不提供内置功能来支持数据驱动测试。然而，我们可以通过使用测试框架（如 JUnit
    或 TestNG）来添加对数据驱动测试的支持。在这本书中，我们使用 TestNG 作为我们的测试框架，我们将在以下章节中使用 TestNG 的参数化功能来创建数据驱动测试。
- en: Parameterizing Tests using suite parameters
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用套件参数参数化测试
- en: 'In *[Chapter 1](9f647c33-1720-4d7b-973b-7d2ef9dad924.xhtml), Introducing WebDriver
    and WebElements*, we created a search test that performs a simple search on the
    application under test. This test searches for a given product and validates the
    title. We used a hardcoded value, `phones`, for the search, as shown in the following
    code snippet:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在*[第1章](9f647c33-1720-4d7b-973b-7d2ef9dad924.xhtml)*“介绍WebDriver和WebElements”中，我们创建了一个搜索测试，该测试对正在测试的应用程序执行简单搜索。此测试搜索给定产品并验证标题。我们使用硬编码的值`phones`进行搜索，如下面的代码片段所示：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Instead of using hardcoded values, we can parameterize these values and provide
    them to the test method using the suite-parameter feature of TestNG. This will
    help to remove using hardcoded values in the test method and move them into TestNG
    suite files. The parameterized values can be used in multiple tests. When we need
    to change these values, we don't have to go to each test and make a change,the 
    instead we can simply change these in suite file.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以参数化这些值，并使用TestNG的套件参数功能将它们提供给测试方法。这将有助于从测试方法中移除硬编码的值，并将它们移动到TestNG套件文件中。参数化值可以在多个测试中使用。当我们需要更改这些值时，我们不必去每个测试并做出更改，而是可以简单地更改套件文件中的这些值。
- en: 'Now, let''s look at steps for using the TestNG Parameters from the suite file.
    In *[Chapter 1](9f647c33-1720-4d7b-973b-7d2ef9dad924.xhtml),* we created a `testng.xml`
    file, which is located in the `src/test/resources/suites` folder. Let''s modify
    the file and add the parameter declaration, as highlighted in the following code
    snippet:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看从套件文件中使用TestNG参数的步骤。在*[第1章](9f647c33-1720-4d7b-973b-7d2ef9dad924.xhtml)*中，我们创建了一个`testng.xml`文件，该文件位于`src/test/resources/suites`文件夹中。让我们修改这个文件并添加参数声明，如下面的代码片段所示：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We can add parameters in the TestNG suite file using the `<parameter>` tag.
    We have to provide the `name` and  `value` attributes for the parameter. In this
    example, we create two parameters: `searchWord` and `items`. These parameters
    store the search word and expected count of items returned by the application
    for that search word.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`<parameter>`标签在TestNG套件文件中添加参数。我们必须为参数提供`name`和`value`属性。在本例中，我们创建了两个参数：`searchWord`和`items`。这些参数存储搜索词和应用程序为该搜索词返回的预期项目数量。
- en: 'Now, let''s modify the test to use parameters instead of hardcoded values.
    First, we need to use the `@Parameters` annotation before the `@Test` annotation
    for the test method. In the `@Parameters` annotation, we need to supply the exact
    names and order of the parameters declared in the suite file. In this case, we
    will supply `searchWord` and `items`. We also need to add arguments to the test
    method along with the required data type to map the XML parameters. In this case,
    the `String searchWord` and `int Items` arguments are added to the `searchProduct()`
    test method. Finally, we need to replace the hardcoded values with the arguments
    in the test method, as shown in the following code snippet:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们修改测试以使用参数而不是硬编码的值。首先，我们需要在测试方法的`@Test`注解之前使用`@Parameters`注解。在`@Parameters`注解中，我们需要提供套件文件中声明的参数的确切名称和顺序。在本例中，我们将提供`searchWord`和`items`。我们还需要向测试方法添加参数以及所需的数据类型，以映射XML参数。在本例中，我们向`searchProduct()`测试方法添加了`String
    searchWord`和`int Items`参数。最后，我们需要在测试方法中将硬编码的值替换为参数，如下面的代码片段所示：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We have to run the parameterized tests via the testng.xml file for TestNG to
    read the parameters defined in the suite file and pass the values to the test
    method.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须通过testng.xml文件运行参数化测试，以便TestNG读取套件文件中定义的参数并将值传递给测试方法。
- en: During execution, TestNG will use the parameters defined in the XML suite file
    and map these in the same order to the Java parameters in test methods using the `@Parameters`
    annotation. It will pass the parameter values from the suite file using the arguments
    added in the test method. TestNG will throw an exception if the number of parameters
    between XML and the `@Parameters` annotation does not match.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行过程中，TestNG将使用XML套件文件中定义的参数，并使用`@Parameters`注解将这些参数映射到测试方法中的Java参数的相同顺序。它将通过在测试方法中添加的参数传递套件文件中的参数值。如果XML和`@Parameters`注解之间的参数数量不匹配，TestNG将抛出异常。
- en: In the next section, we will see a programmatic parameterization, which offers
    us the ability to run tests with multiple rows of test data.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看到程序化参数化，它为我们提供了运行具有多行测试数据的测试的能力。
- en: Parameterizing Tests with a Data Provider
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用数据提供程序参数化测试
- en: While suite parameters are useful for simple parameterization, they are not
    sufficient for creating data-driven tests with multiple test data values and reading
    data from external files, such as property files, CSV, Excel, or databases. In
    this case, we can use a `Data Provider` to supply the values need to test. A `Data
    Provider` is a method defined in the test class that returns an array of array
    of objects.  This method is annotated with the `@DataProvider` annotation.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然套件参数对于简单的参数化很有用，但它们不足以创建具有多个测试数据值的数据驱动测试，并从外部文件（如属性文件、CSV、Excel或数据库）中读取数据。在这种情况下，我们可以使用`Data
    Provider`来提供需要测试的值。`Data Provider`是在测试类中定义的一个方法，它返回一个对象数组的数组。此方法使用`@DataProvider`注解。
- en: 'Let''s modify the preceding test to use the `Data Provider`. Instead of using
    a single searchWord, we will now use three combinations of `searchWords` and expected
    `items` counts returned by the search. We will add a new method, named provider(),
    in the SearchTest class, as shown in following code, before the `@BeforeMethod`
    annotation:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修改前面的测试以使用`Data Provider`。现在，我们将使用由搜索返回的单个`searchWord`的三种组合以及预期的`items`计数。我们将在`@BeforeMethod`注解之前在`SearchTest`类中添加一个名为`provider()`的新方法，如下面的代码所示：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: When a method is annotated with `@DataProvider`, it becomes a data-feeder method
    by passing the test data to the test case. In addition to the `@DataProvider` annotation,
    we also need to provide a name for the `data provider`. In this example, we have
    given the name as `searchWords`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个方法被`@DataProvider`注解时，它通过传递测试数据到测试用例而成为一个数据提供方法。除了`@DataProvider`注解之外，我们还需要为`data
    provider`提供一个名称。在这个例子中，我们将其命名为`searchWords`。
- en: 'Next, we need to update the `searchTest()` test method to link to the `data
    provider`. This is done with the following steps:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要更新`searchTest()`测试方法以链接到`data provider`。这可以通过以下步骤完成：
- en: Provide the name of the `data provider` in the `@Test` annotation
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`@Test`注解中提供`data provider`的名称
- en: Add two arguments `String searchWord` and `int items` to the `searchProduct`
    method
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向`searchProduct`方法添加两个参数`String searchWord`和`int items`
- en: 'Use method parameters to substitute hardcoded values:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用方法参数替换硬编码的值：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `provider()` method will become the data-feeder method, which returns an array
    of objects that are combinations of `searchWords` and expected `items` counts,
    and TestNG will pass the array of data rows to the test method.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`provider()`方法将成为数据提供方法，它返回由`searchWords`和预期的`items`计数组合的对象数组，TestNG将传递数据行数组到测试方法。'
- en: 'TestNG will execute the test four times with different test combinations. TestNG
    also generates a well-formatted report at the end of the test execution. Here
    is an example of the test results with TestNG using the defined values. The `searchProduct`
    test is executed three times, as shown in the following screenshot:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: TestNG将执行四次测试，使用不同的测试组合。TestNG在测试执行结束时还会生成一个格式良好的报告。以下是一个使用定义的值通过TestNG进行测试结果的示例。`searchProduct`测试执行了三次，如下面的截图所示：
- en: '![](img/d5d4e50e-b3fa-41d7-8dfc-58f99bc684a7.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d5d4e50e-b3fa-41d7-8dfc-58f99bc684a7.png)'
- en: Reading data from a CSV file
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从CSV文件读取数据
- en: We saw a simple data-driven test TestNG. The test data was hardcoded in the
    test-script code. This could become difficult to maintain. It is recommended that
    we store the test data separately from the test scripts. Often, we use data from
    the production environment for testing. This data can be exported in the CSV format.
    We can read these CSV files in data-provider methods and pass the data to the
    test instead of hardcoded object arrays.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到了一个简单的数据驱动测试TestNG。测试数据被硬编码在测试脚本代码中。这可能会变得难以维护。建议我们将测试数据与测试脚本分开存储。通常，我们使用生产环境中的数据来进行测试。这些数据可以导出为CSV格式。我们可以在数据提供者方法中读取这些CSV文件，并将数据传递给测试，而不是硬编码的对象数组。
- en: In this example, we will use the OpenCSV library to read a CSV file. OpenCSV
    is a simple Java library for reading CSV files in Java. You can find more details
    on OpenCSV at [http://opencsv.sourceforge.net/](http://opencsv.sourceforge.net/).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用OpenCSV库来读取CSV文件。OpenCSV是一个简单的Java库，用于在Java中读取CSV文件。您可以在[http://opencsv.sourceforge.net/](http://opencsv.sourceforge.net/)找到更多关于OpenCSV的详细信息。
- en: 'Let''s first create a CSV file, named `data.csv`, in the `src/test/resources/data`
    folder and copy the following combinations of `searchWords` and `items`:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在`src/test/resources/data`文件夹中创建一个名为`data.csv`的CSV文件，并复制以下`searchWords`和`items`的组合：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, we need to add the OpenCSV dependency to the Maven pom.xml file. For
    this example, we will use the latest version, 3.4, as shown in the following code
    snippet:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要将 OpenCSV 依赖项添加到 Maven pom.xml 文件中。对于此示例，我们将使用最新版本 3.4，如下面的代码片段所示：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Finally, we need to modify the `provider()` method in the test class to read
    the contents of the CSV file and return them as an array of objects, as shown
    in the following code:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要修改测试类中的 `provider()` 方法，以读取 CSV 文件的内容，并将其作为对象的数组返回，如下面的代码所示：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the provide method, the CSV file will be parsed using the CSVReader class
    of the OpenCSV library. We need to provide the path of the CSV file, the delimiter
    character, and the header row number (this will skip while fetching the data),
    as shown in the following code snippet:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `provide` 方法中，将使用 OpenCSV 库的 `CSVReader` 类来解析 CSV 文件。我们需要提供 CSV 文件的路径、分隔符字符和标题行号（在获取数据时会跳过），如下面的代码片段所示：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the preceding code, we will read each line of the CSV file ,copy it to an
    array of the object, and return it to the test method. The test method will be
    executed for each row in the CSV file.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们将读取 CSV 文件的每一行，将其复制到对象的数组中，并将其返回给测试方法。测试方法将对 CSV 文件中的每一行执行。
- en: Reading data from an Excel file
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 Excel 文件中读取数据
- en: To maintain test cases and test data, Microsoft Excel is a favourite tool for
    testers. Compared to the CSV file format, Excel offers numerous features and a
    structured way to store data. A tester can create and maintain tables of test
    data in an Excel spreadsheet easily.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为了维护测试用例和测试数据，Microsoft Excel 是测试人员的首选工具。与 CSV 文件格式相比，Excel 提供了众多功能和一种结构化的方式来存储数据。测试人员可以轻松地在
    Excel 电子表格中创建和维护测试数据表。
- en: 'Let''s create an Excel spreadsheet, named `data.xlsx`, in the `src/test/resources/data`
    folder with the following contents:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `src/test/resources/data` 文件夹中创建一个名为 `data.xlsx` 的 Excel 电子表格，内容如下：
- en: '![](img/af37aa88-2891-4ba1-9fd8-452979afabbb.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/af37aa88-2891-4ba1-9fd8-452979afabbb.png)'
- en: In this section, we will use an Excel spreadsheet as your data source. We will
    use the Apache POI API, developed by the Apache Foundation, to manipulate the
    Excel spreadsheet.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用 Excel 电子表格作为数据源。我们将使用 Apache 基金会开发的 Apache POI API 来操作 Excel 电子表格。
- en: 'Let''s modify the `provider()` method to use a helper class, called `SpreadsheetData`,
    to read the Excel file''s contents:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修改 `provider()` 方法，使用一个名为 `SpreadsheetData` 的辅助类来读取 Excel 文件的内容：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `SpreadsheetData` class This is available in the source code bundle for
    this book. This class supports both the old .xls and newer .xlsx formats:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`SpreadsheetData` 类，这个类包含在本书的源代码包中。这个类支持旧版的 .xls 和较新的 .xlsx 格式：'
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'When the test is executed, the `provider()` method will create an instance
    of the `SpreadsheetData` class. The `SpreadsheetData` class reads the contents
    of the Excel spreadsheet row by row in a collection and returns this collection
    back to the `provider()` method:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当测试执行时，`provider()` 方法将创建 `SpreadsheetData` 类的一个实例。`SpreadsheetData` 类将按行逐行读取
    Excel 电子表格的内容到一个集合中，并将这个集合返回给 `provider()` 方法：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: For each row in the test data collection returned by the `provider()` method,
    the test runner will instantiate the test case class, passing the test data as
    parameters to the test-class constructor, and then execute all the tests in the
    test class.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `provider()` 方法返回的测试数据集合中的每一行，测试运行器将实例化测试用例类，将测试数据作为参数传递给测试类构造函数，然后执行测试类中的所有测试。
- en: Summary
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about an important technique to create parameterized
    and data-driven tests using TestNG features. This will help you to create highly-maintainable
    and robust tests with minimum coding effort and increased test coverage. We also
    looked at ways to read data from the CSV and Excel formats.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了使用 TestNG 功能创建参数化和数据驱动测试的重要技术。这将帮助您以最小的编码努力和增加的测试覆盖率创建高度可维护和健壮的测试。我们还探讨了从
    CSV 和 Excel 格式读取数据的方法。
- en: Questions
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Explain what Data-driven Testing is.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解释数据驱动测试是什么。
- en: Selenium supports data-driven testing— True or False?
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Selenium 支持数据驱动测试——对或错？
- en: What are two methods in TestNG to create data-driven tests?
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: TestNG 中创建数据驱动测试的两种方法是什么？
- en: Explain the `DataProvider` method in TestNG.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解释 TestNG 中的 `DataProvider` 方法。
- en: Further information
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步信息
- en: 'You can check out the following links for more information about the topics
    covered in this chapter:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以查看以下链接以获取有关本章涵盖主题的更多信息：
- en: Read more about TestNG data-driven features at [https://testng.org/doc/documentation-main.html#parameters](https://testng.org/doc/documentation-main.html#parameters)
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[https://testng.org/doc/documentation-main.html#parameters](https://testng.org/doc/documentation-main.html#parameters)了解更多关于TestNG数据驱动特性的信息
- en: Read more about the Apache POI library at [https://poi.apache.org/](https://poi.apache.org/)
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[https://poi.apache.org/](https://poi.apache.org/)了解更多关于Apache POI库的信息
