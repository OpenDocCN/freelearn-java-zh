["```java\n    package com.packt.patterninspring.chapter3.adapter.pattern; \n    import com.packt.patterninspring.chapter3.model.Account; \n    public interface PaymentGateway { \n      void doPayment(Account account1, Account account2); \n    } \n```", "```java\n    package com.packt.patterninspring.chapter3.adapter.pattern; \n    import com.packt.patterninspring.chapter3.model.Account; \n    public class PaymentGatewayImpl implements PaymentGateway{ \n      @Override \n      public void doPayment(Account account1, Account account2){ \n         System.out.println(\"Do payment using Payment Gateway\"); \n      } \n    } \n```", "```java\n    package com.packt.patterninspring.chapter3.adapter.pattern; \n    public interface AdvancedPayGateway { \n      void makePayment(String mobile1, String mobile2); \n    } \n```", "```java\n    package com.packt.patterninspring.chapter3.adapter.pattern; \n    import com.packt.patterninspring.chapter3.model.Account; \n    public class AdvancedPaymentGatewayAdapter implements \n       AdvancedPayGateway{ \n      private PaymentGateway paymentGateway; \n      public AdvancedPaymentGatewayAdapter(PaymentGateway\n         paymentGateway) { \n        this.paymentGateway = paymentGateway; \n      } \n      public void makePayment(String mobile1, String mobile2) { \n         Account account1 = null;//get account number by \n             mobile number mobile  \n         Account account2 = null;//get account number by \n            mobile number mobile  \n         paymentGateway.doPayment(account1, account2); \n      } \n    } \n```", "```java\n    package com.packt.patterninspring.chapter3.adapter.pattern; \n    public class AdapterPatternMain { \n      public static void main(String[] args) { \n        PaymentGateway paymentGateway = new PaymentGatewayImpl(); \n        AdvancedPayGateway advancedPayGateway = new \n           AdvancedPaymentGatewayAdapter(paymentGateway); \n        String mobile1 = null; \n        String mobile2 = null; \n        advancedPayGateway.makePayment(mobile1, mobile2); \n      } \n    } \n```", "```java\n    package com.packt.patterninspring.chapter3.bridge.pattern; \n    public interface Account { \n      Account openAccount(); \n      void accountType(); \n    } \n```", "```java\n    package com.packt.patterninspring.chapter3.bridge.pattern; \n    public class SavingAccount implements Account { \n      @Override \n      public Account openAccount() { \n         System.out.println(\"OPENED: SAVING ACCOUNT \"); \n         return new SavingAccount(); \n      } \n      @Override \n      public void accountType() { \n        System.out.println(\"##It is a SAVING Account##\"); \n      } \n    } \n```", "```java\n    package com.packt.patterninspring.chapter3.bridge.pattern; \n    public class CurrentAccount implements Account { \n      @Override \n      public Account openAccount() { \n        System.out.println(\"OPENED: CURRENT ACCOUNT \"); \n        return new CurrentAccount(); \n      } \n      @Override \n      public void accountType() { \n        System.out.println(\"##It is a CURRENT Account##\"); \n      } \n    } \n```", "```java\n    package com.packt.patterninspring.chapter3.bridge.pattern; \n    public abstract class Bank { \n      //Composition with implementor \n      protected Account account; \n      public Bank(Account account){ \n         this.account = account; \n      } \n      abstract Account openAccount(); \n    } \n```", "```java\n    package com.packt.patterninspring.chapter3.bridge.pattern; \n    public class IciciBank extends Bank { \n      public IciciBank(Account account) { \n        super(account); \n      } \n      @Override \n      Account openAccount() { \n        System.out.print(\"Open your account with ICICI Bank\"); \n        return account; \n      } \n    } \n```", "```java\n    package com.packt.patterninspring.chapter3.bridge.pattern; \n      public class HdfcBank extends Bank { \n        public HdfcBank(Account account) { \n          super(account); \n        } \n        @Override \n        Account openAccount() { \n          System.out.print(\"Open your account with HDFC Bank\"); \n          return account; \n        } \n      } \n```", "```java\n    package com.packt.patterninspring.chapter3.bridge.pattern; \n    public class BridgePatternMain { \n      public static void main(String[] args) { \n         Bank icici = new IciciBank(new CurrentAccount()); \n         Account current = icici.openAccount(); \n         current.accountType(); \n         Bank hdfc = new HdfcBank(new SavingAccount()); \n         Account saving = hdfc.openAccount(); \n         saving.accountType(); \n      } \n    } \n```", "```java\n    public interface Account { \n      void accountType(); \n    } \n```", "```java\n    public class SavingAccount implements Account{ \n      @Override \n      public void accountType() { \n        System.out.println(\"SAVING ACCOUNT\"); \n      } \n    } \n```", "```java\n    public class CurrentAccount implements Account { \n      @Override \n      public void accountType() { \n         System.out.println(\"CURRENT ACCOUNT\"); \n      } \n    } \n```", "```java\n     package com.packt.patterninspring.chapter3.composite.pattern; \n     import java.util.ArrayList; \n     import java.util.List; \n     import com.packt.patterninspring.chapter3.model.Account; \n     public class CompositeBankAccount implements Account { \n       //Collection of child accounts. \n       private List<Account> childAccounts = new ArrayList<Account>(); \n       @Override \n       public void accountType() { \n         for (Account account : childAccounts) { \n               account.accountType(); \n         } \n       } \n       //Adds the account to the composition. \n          public void add(Account account) { \n            childAccounts.add(account); \n          } \n          //Removes the account from the composition. \n          public void remove(Account account) { \n            childAccounts.remove(account); \n         } \n       } \n```", "```java\n    package com.packt.patterninspring.chapter3.composite.pattern; \n    import com.packt.patterninspring.chapter3.model.CurrentAccount; \n    import com.packt.patterninspring.chapter3.model.SavingAccount; \n    public class CompositePatternMain { \n      public static void main(String[] args) { \n         //Saving Accounts \n         SavingAccount savingAccount1 = new SavingAccount(); \n         SavingAccount savingAccount2 = new SavingAccount(); \n         //Current Account \n         CurrentAccount currentAccount1 = new CurrentAccount(); \n         CurrentAccount currentAccount2 = new CurrentAccount(); \n         //Composite Bank Account \n         CompositeBankAccount compositeBankAccount1 = new\n         CompositeBankAccount(); \n         CompositeBankAccount compositeBankAccount2 = new\n         CompositeBankAccount(); \n         CompositeBankAccount compositeBankAccount = new\n         CompositeBankAccount(); \n         //Composing the bank accounts \n         compositeBankAccount1.add(savingAccount1); \n         compositeBankAccount1.add(currentAccount1); \n         compositeBankAccount2.add(currentAccount2); \n         compositeBankAccount2.add(savingAccount2); \n         compositeBankAccount.add(compositeBankAccount2); \n         compositeBankAccount.add(compositeBankAccount1); \n         compositeBankAccount.accountType(); \n      } \n    } \n```", "```java\n    package com.packt.patterninspring.chapter3.decorator.pattern; \n    public interface Account { \n       String getTotalBenefits(); \n    } \n```", "```java\n    package com.packt.patterninspring.chapter3.decorator.pattern; \n    public class SavingAccount implements Account { \n      @Override \n      public String getTotalBenefits() { \n         return \"This account has 4% interest rate with per day\n           $5000 withdrawal limit\"; \n      } \n    } \n```", "```java\n    package com.packt.patterninspring.chapter3.decorator.pattern; \n    public class CurrentAccount implements Account { \n      @Override \n      public String getTotalBenefits() { \n         return \"There is no withdrawal limit for current account\"; \n      } \n    } \n```", "```java\n    package com.packt.patterninspring.chapter3.decorator.pattern; \n    public abstract class AccountDecorator implements Account { \n      abstract String applyOtherBenefits(); \n    } \n```", "```java\n    package com.packt.patterninspring.chapter3.decorator.pattern; \n    public class SeniorCitizen extends AccountDecorator { \n      Account account; \n      public SeniorCitizen(Account account) { \n         super(); \n         this.account = account; \n      } \n      public String getTotalBenefits() { \n         return account.getTotalBenefits() + \" other benefits are \n             \"+applyOtherBenefits(); \n      } \n      String applyOtherBenefits() { \n         return \" an medical insurance of up to $1,000 for Senior \n         Citizen\"; \n      } \n    } \n```", "```java\n    package com.packt.patterninspring.chapter3.decorator.pattern; \n    public class Privilege extends AccountDecorator { \n      Account account; \n      public Privilege(Account account) { \n         this.account = account; \n      } \n      public String getTotalBenefits() { \n         return account.getTotalBenefits() + \" other benefits are    \n            \"+applyOtherBenefits(); \n      } \n      String applyOtherBenefits() { \n        return \" an accident insurance of up to $1,600 and\n           an overdraft facility of $84\"; \n        } \n      } \n```", "```java\n    package com.packt.patterninspring.chapter3.decorator.pattern; \n    public class DecoratorPatternMain { \n      public static void main(String[] args) { \n         /*Saving account with no decoration*/ \n         Account basicSavingAccount = new SavingAccount(); \n         System.out.println(basicSavingAccount.getTotalBenefits()); \n         /*Saving account with senior citizen benefits decoration*/ \n         Account seniorCitizenSavingAccount = new SavingAccount(); \n         seniorCitizenSavingAccount = new \n            SeniorCitizen(seniorCitizenSavingAccount); \n         System.out.println\n        (seniorCitizenSavingAccount.getTotalBenefits()); \n         /*Saving account with privilege decoration*/ \n         Account privilegeCitizenSavingAccount = new SavingAccount(); \n         privilegeCitizenSavingAccount = new\n            Privilege(privilegeCitizenSavingAccount); \n         System.out.println\n        (privilegeCitizenSavingAccount.getTotalBenefits()); \n      } \n    } \n```", "```java\n    package com.packt.patterninspring.chapter3.facade.pattern; \n    public class PaymentService { \n      public static boolean doPayment(){ \n         return true; \n      } \n    } \n```", "```java\n   package com.packt.patterninspring.chapter3.facade.pattern; \n   import com.packt.patterninspring.chapter3.model.Account; \n   import com.packt.patterninspring.chapter3.model.SavingAccount; \n   public class AccountService { \n     public static Account getAccount(String accountId) { \n        return new SavingAccount(); \n     } \n   } \n```", "```java\n    package com.packt.patterninspring.chapter3.facade.pattern; \n    import com.packt.patterninspring.chapter3.model.Account; \n    public class TransferService { \n      public static void transfer(int amount, Account fromAccount,\n            Account toAccount) { \n        System.out.println(\"Transfering Money\"); \n      } \n    } \n```", "```java\n    package com.packt.patterninspring.chapter3.facade.pattern; \n    public interface BankingServiceFacade { \n       void moneyTransfer(); \n    } \n```", "```java\n    package com.packt.patterninspring.chapter3.facade.pattern; \n    import com.packt.patterninspring.chapter3.model.Account; \n    public class BankingServiceFacadeImpl implements \n        BankingServiceFacade{ \n      @Override \n      public void moneyTransfer() { \n         if(PaymentService.doPayment()){ \n               Account fromAccount = AccountService.getAccount(\"1\"); \n               Account toAccount   = AccountService.getAccount(\"2\"); \n               TransferService.transfer(1000, fromAccount, toAccount); \n         } \n      } \n    } \n```", "```java\n    package com.packt.patterninspring.chapter3.facade.pattern; \n    public class FacadePatternClient { \n      public static void main(String[] args) { \n        BankingServiceFacade serviceFacade = new \n          BankingServiceFacadeImpl(); \n        serviceFacade.moneyTransfer(); \n      } \n    } \n```", "```java\n    public interface Account { \n      void accountType(); \n    } \n```", "```java\n    public class SavingAccount implements Account{ \n       public void accountType() { \n          System.out.println(\"SAVING ACCOUNT\"); \n       } \n    } \n```", "```java\n    package com.packt.patterninspring.chapter2.proxy.pattern; \n    import com.packt.patterninspring.chapter2.model.Account; \n    import com.packt.patterninspring.chapter2.model.SavingAccount; \n    public class ProxySavingAccount implements Account{ \n      private Account savingAccount; \n      public void accountType() { \n         if(savingAccount == null){ \n               savingAccount = new SavingAccount(); \n         } \n         savingAccount.accountType(); \n      }  \n    } \n```"]