- en: Command Line Flags
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令行标志
- en: In the previous chapter, we looked at several security changes to the JDK. Java
    9's security enhancements provide developers with the ability to write and maintain
    applications that implement security. Specifically, we covered datagram transport
    layer security, Keystores, improving security application performance, the TLS
    application-layer protocol negotiation extension, leveraging CPU instructions
    for GHASH and RSA, OCSP stapling for TLS, and DRBG-based `SecureRandom` implementations.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们探讨了JDK的几个安全变化。Java 9的安全增强为开发者提供了编写和维护实现安全的应用程序的能力。具体来说，我们涵盖了数据报传输层安全、密钥库、提高安全应用性能、TLS应用层协议协商扩展、利用CPU指令进行GHASH和RSA、TLS的OCSP
    stapling以及基于DRBG的`SecureRandom`实现。
- en: 'In this chapter, we will explore several changes to the Java 9 platform with
    the common theme of command-line flags. Specifically, we will cover the following
    concepts:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨Java 9平台的一些变化，这些变化的共同主题是命令行标志。具体来说，我们将涵盖以下概念：
- en: Unified JVM logging
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 统一JVM日志
- en: Compiler control
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译器控制
- en: Diagnostic commands
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 诊断命令
- en: Heap profiling agent
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 堆分析代理
- en: Removing your JHAT
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除你的JHAT
- en: Command-line flag argument validation
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令行标志参数验证
- en: Compiling for older platform versions
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为旧平台版本编译
- en: Unified JVM Logging [JEP 158]
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 统一JVM日志 [JEP 158]
- en: 'Creating a unified logging schema for the JVM was the central goal of JEP-158\.
    Here is a comprehensive list of the goals of the JEP:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为JVM创建一个统一的日志架构是JEP-158的核心目标。以下是JEP目标的综合列表：
- en: Create a JVM-wide set of command-line options for all logging operations
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为所有日志操作创建一个JVM范围的命令行选项集
- en: Use categorized tags for logging
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用分类标签进行日志记录
- en: Permit messages to have multiple tags, also referred to as tag sets
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许消息具有多个标签，也称为标签集
- en: 'Provide six levels of logging:'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供六个日志级别：
- en: Error
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误
- en: Warning
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 警告
- en: Information
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信息
- en: Debug
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试
- en: Trace
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟踪
- en: Develop
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发
- en: Select which messages are logged based on levels
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据级别选择要记录的消息
- en: Optionally direct logging to the console or a file
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选地将日志直接输出到控制台或文件
- en: Print one line at a time and do not support interleaving within the same line
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每次打印一行，并且不支持同一行内的交错
- en: Permit output of multiple line logs (non-interleaved)
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许输出多行日志（非交错）
- en: Format all logging messages so that they are easily human-read
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 格式化所有日志消息，以便它们易于人类阅读
- en: Add decorations such as uptime, level, and tags
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加如运行时间、级别和标签等装饰
- en: Like levels, select which messages are logged based on decorations
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与级别一样，根据装饰选择要记录的消息
- en: Convert pre-Java 9 `tty>print` logging to use unified logging as the output
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Java 9之前的`tty>print`日志转换为使用统一日志作为输出
- en: Permit dynamic message configuration using `jcmd` and `MBeans`
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许使用`jcmd`和`MBeans`动态配置消息
- en: Permit the ability to enable and disable individual log messages
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许启用和禁用单个日志消息
- en: Add ability to determine the order in which decorations are printed
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加确定装饰打印顺序的能力
- en: 'The unified logging changes to the JVM can be grouped into the five categories
    listed here:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 统一日志对JVM的更改可以归纳为以下五个类别：
- en: Command-line options
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令行选项
- en: Decorations
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 装饰
- en: Levels
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 级别
- en: Output
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输出
- en: Tags
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标签
- en: Let's briefly look at each of these categories.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简要地看看这些类别。
- en: Command-line options
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令行选项
- en: 'The new command-line option, `-Xlog`, was added to the logging framework in
    Java 9\. This command-line option has an extensive array of parameters and possibilities.
    The basic syntax is simply `-Xlog` followed by an option. Here is the formal basic
    syntax:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 新的命令行选项`-Xlog`被添加到Java 9的日志框架中。这个命令行选项有一系列参数和可能性。基本语法是简单地`-Xlog`后跟一个选项。以下是正式的基本语法：
- en: '[PRE0]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here is a basic example with the `all` option:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个使用`all`选项的基本示例：
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here is the extensive command-line syntax used to configure the new unified
    logging:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是配置新统一日志的广泛命令行语法：
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following `-Xlog` examples are followed by a description:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以下`-Xlog`示例后面跟着一个描述：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the preceding example, we are telling the JVM to take the following actions:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们正在告诉JVM执行以下操作：
- en: Log all messages
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录所有消息
- en: Use the `info` level
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`info`级别
- en: Provide output to `stdout`
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供输出到`stdout`
- en: With this example, all `warning` messages will still be output to `stderr`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个示例，所有`warning`消息仍然会输出到`stderr`。
- en: 'The next example, shown here, logs messages at the `debug` level:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个示例，在此处展示，记录了`debug`级别的消息：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the preceding example, we are telling the JVM to take the following actions:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们正在告诉JVM执行以下操作：
- en: Log all messages tagged with, at a minimum, the `gc` and `rt` tags
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录所有带有至少`gc`和`rt`标签的消息
- en: Use the `debug` level
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`debug`级别
- en: Provide output to `stdout`
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供输出到`stdout`
- en: 'The next example pushes the output to an external file:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例将输出推送到外部文件：
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the preceding example, we are telling the JVM to take the following actions:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们正在告诉JVM执行以下操作：
- en: Disable all messages except those tagged with `rt` tags
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 禁用所有消息，除了带有`rt`标签的消息
- en: Use the `debug` level
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`debug`级别
- en: Provide output to a file named `rtdebug.txt`
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供输出到名为`rtdebug.txt`的文件
- en: Decorations
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Decorations
- en: 'In the context of Java 9''s logging framework, decorations are metadata about
    the log message. Here is the alphabetic list of decorations that are available:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java 9的日志框架的上下文中，装饰是关于日志消息的元数据。以下是可用的装饰字母列表：
- en: '**level**: The level associated with the logged message'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**level**：与记录的消息关联的级别'
- en: '**pid**: PID = Processor IDentifier'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pid**：PID = 处理器标识符'
- en: '**tags**: The tag-set associated with the logged message'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**tags**：与记录的消息关联的标签集'
- en: '**tid**: TID = Thread IDentifier'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**tid**：TID = 线程标识符'
- en: '**time**: Refers to current date and time using ISO-8601 format'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**time**：使用ISO-8601格式引用当前日期和时间'
- en: '**timemillis**: Current time in milliseconds'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**timemillis**：当前时间（以毫秒为单位）'
- en: '**timenanos**: Current time in nanoseconds'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**timenanos**：当前时间（以纳秒为单位）'
- en: '**uptime**: Time, in seconds and milliseconds, since the JVM started'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**uptime**：自JVM启动以来的时间（以秒和毫秒为单位）'
- en: '**uptimemillis**: Time, in milliseconds, since the JVM started'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**uptimemillis**：自JVM启动以来的时间（以毫秒为单位）'
- en: '**uptimenanos**: Time, in nanoseconds, since the JVM started'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**uptimenanos**：自JVM启动以来的时间（以纳秒为单位）'
- en: 'Decorations can be surpassed or included in unified logging output. Regardless
    of which decorations are used, they will appear in the output in the following
    order:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 装饰可以被超越或包含在统一的日志输出中。无论使用哪种装饰，它们都会按照以下顺序出现在输出中：
- en: time
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: time
- en: uptime
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: uptime
- en: timemillis
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: timemillis
- en: uptimemillis
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: uptimemillis
- en: timenanos
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: timenanos
- en: uptimenanos
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: uptimenanos
- en: pid
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: pid
- en: tid
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: tid
- en: level
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: level
- en: tags
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: tags
- en: Levels
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Levels
- en: 'Logged messages are individually associated with a verbosity level. As previously
    listed, the levels are **error**, **warning**, **information**, **debug**, **trace**,
    and **develop**. The following chart shows how the levels have an increasing level
    of verbosity in respect to how much information is logged. The **develop** level
    is for development purposes only and is not available in on-product application
    builds:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 记录的消息与一个详细的级别相关联。如前所述，级别包括**错误**、**警告**、**信息**、**调试**、**跟踪**和**开发**。以下图表显示了级别如何根据记录的信息量具有递增的详细程度。**开发**级别仅用于开发目的，并且在产品应用构建中不可用：
- en: '![](img/c21d072f-4b08-4ac1-9b5b-0f8e96bd8ba5.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c21d072f-4b08-4ac1-9b5b-0f8e96bd8ba5.png)'
- en: Output
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Output
- en: 'The Java 9 logging framework supports three types of output with examples of
    direct use with the `-Xlog` command-line syntax:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Java 9日志框架支持三种类型的输出，以下是用`-Xlog`命令行语法直接使用的示例：
- en: 'In the following example, we provide output to `stderr`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们提供输出到`stderr`：
- en: '[PRE6]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The following example provides output to `stdout`:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例将输出提供给`stdout`：
- en: '[PRE7]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following example writes the output to a text file:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例将输出写入文本文件：
- en: '[PRE8]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Tags
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Tags
- en: The new logging framework consists of a set of tags identified in the JVM. These
    tags can be changed in source code if needed. The tags should be self-identifying,
    such as `gc` for garbage collection.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 新的日志框架由JVM中标识的一组标签组成。如果需要，可以在源代码中更改这些标签。标签应该是自我标识的，例如`gc`代表垃圾回收。
- en: When more than one tag is grouped together, they form a tag-set. When we add
    our own tags via source code, each tag should be associated with a tag-set. This
    will help ensure the tags stay organized and easily human-readable.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当多个标签组合在一起时，它们形成一个标签集。当我们通过源代码添加自己的标签时，每个标签都应该与一个标签集相关联。这将有助于确保标签保持组织并易于人类阅读。
- en: Compiler control [JEP 165]
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Compiler control [JEP 165]
- en: Controlling Java Virtual Machine compilers might seem like an unnecessary task,
    but for many developers, this is an important aspect of testing. Java Enhancement
    Proposal 165 detailed a plan to implement runtime management of JVM compilers.
    This is accomplished with method-dependent compiler flags.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 控制Java虚拟机编译器可能看起来是一项不必要的任务，但对于许多开发者来说，这是测试的重要方面。Java增强提案165详细描述了实施JVM编译器运行时管理的计划。这是通过方法相关的编译器标志实现的。
- en: In this section, we will start with a look at JVM compilation modes, then look
    at the compiler that can be controlled using the Java 9 platform.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将从JVM编译模式开始介绍，然后探讨可以使用Java 9平台控制的编译器。
- en: Compilation modes
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编译模式
- en: 'The changes in the Java 9 platform include granular control of both the c1
    and c2 JVM compliers. As you can see in the following illustration, the Java HotSpot
    JVM has two **Just-in-Time** (**JIT**) compilation modes--**c1** and **c2**:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Java 9平台的变化包括对c1和c2 JVM编译器的细粒度控制。正如您在以下插图中所见，Java HotSpot JVM有两个**即时**（**JIT**）编译模式--**c1**和**c2**：
- en: '![](img/fbebf216-df20-4e3d-8776-59db2318f590.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fbebf216-df20-4e3d-8776-59db2318f590.png)'
- en: The **C1** and **C2** compilation modes use different compilation techniques
    and, if used on the same code base, can produce different sets of machine code.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**C1**和**C2**编译模式使用不同的编译技术，如果用于相同的代码库，可以产生不同的机器代码集。'
- en: C1 compilation mode
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C1编译模式
- en: 'The C1 compilation mode inside Java HotSpot VM is typically used for applications
    that have the following characteristics:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Java HotSpot VM内部的C1编译模式通常用于具有以下特性的应用程序：
- en: Quick startup
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速启动
- en: Increased optimization
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增加优化
- en: Client-side
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端
- en: C2 compilation mode
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C2编译模式
- en: 'The second compilation mode, C2, is used by applications with the following
    listed characteristics:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种编译模式，C2，被具有以下列出的特性的应用程序使用：
- en: Long runtimes
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 长运行时间
- en: Server-side
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器端
- en: Tiered compilation
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分层编译
- en: 'Tiered compilation allows us to use both **c1** and **c2** compilation modes.
    Starting with Java 8, tiered compilation is the default process. As illustrated
    here, the **c1** mode is used at startup to help provide greater optimization.
    Then, once the app has sufficiently warmed up, the **c2** mode is employed:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 分层编译允许我们使用**c1**和**c2**编译模式。从Java 8开始，分层编译是默认过程。如图所示，**c1**模式在启动时使用，以帮助提供更大的优化。然后，一旦应用程序足够热身，就采用**c2**模式：
- en: '![](img/9d2cf64e-b566-4e3b-bb0b-042455b9bcdc.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9d2cf64e-b566-4e3b-bb0b-042455b9bcdc.png)'
- en: Compiler control in Java 9
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java 9中的编译器控制
- en: Java 9 comes with the promise of the ability to have finite control over JVM
    compilers and to make changes at runtime. These additional abilities do not degrade
    performance. This permits greater fidelity of testing and testing optimization
    as we can run small compiler tests without having to relaunch the entire JVM.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Java 9承诺能够对JVM编译器进行有限的控制，并在运行时进行更改。这些额外的功能不会降低性能。这允许进行更精确的测试和测试优化，因为我们可以在不重新启动整个JVM的情况下运行小的编译器测试。
- en: 'To control compiler operations, we need to create a directives file. These
    files contain compiler directives which consist of a set of options with values.
    Directive files essentially use a subset of JSON:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 为了控制编译器操作，我们需要创建一个指令文件。这些文件包含编译器指令，由一组带有值的选项组成。指令文件本质上使用JSON的一个子集：
- en: '![](img/c1a98d14-0fb8-4462-ba76-c06a66a767a4.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c1a98d14-0fb8-4462-ba76-c06a66a767a4.png)'
- en: 'The **JavaScript Object Notation** (**JSON**) format is used for data-interchange.
    The directive files have the following formatting differences from JSON:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '**JavaScript对象表示法**（**JSON**）格式用于数据交换。指令文件与JSON有以下格式差异：'
- en: '`int` and `doubles` are the only supported number formats'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int`和`doubles`是唯一支持的数字格式'
- en: Double forward slash (`//`) can be used for comment lines
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 双斜杠（`//`）可用于注释行
- en: Trailing commas (`,`) can be used in arrays and objects
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组和对象中可以使用尾随逗号（`,`）
- en: Escape characters are not supported
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转义字符不受支持
- en: Option names are formatted as strings and do not have to be quoted
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选项名称格式化为字符串，不需要引用
- en: You can learn more about JSON at [http://www.json.org](http://www.json.org).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[http://www.json.org](http://www.json.org)了解更多关于JSON的信息。
- en: 'We can add our directive file using the following syntax at the command line:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在命令行使用以下语法添加我们的指令文件：
- en: '[PRE9]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here is a shell example of a directives file:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个指令文件的shell示例：
- en: '[PRE10]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Diagnostic commands [JEP 228]
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 诊断命令 [JEP 228]
- en: The Java Enhancement Proposal 228, **Add More Diagnostic Commands**, defined
    seven additional diagnostic commands to enhance the ability to diagnose the JDK
    and the JVM. The new diagnostic commands are detailed here.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: Java增强提案228，**添加更多诊断命令**，定义了七个额外的诊断命令，以增强诊断JDK和JVM的能力。新的诊断命令在此详细说明。
- en: The `print_codegenlist` command prints methods that are currently queued for
    compilation. Since c1 and c2 compilation modes are on separate queues, this command
    would need to be issued to a specific queue.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`print_codegenlist`命令打印当前排队编译的方法。由于c1和c2编译模式在不同的队列上，因此需要向特定队列发出此命令。'
- en: 'The `dump_codelist` diagnostic command will print the following listed information
    for the compiled methods:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`dump_codelist`诊断命令将打印以下列出的编译方法信息：'
- en: Full signature
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完整签名
- en: Address range
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地址范围
- en: State
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 状态
- en: Alive
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 活着
- en: Nonentrant
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非侵入式
- en: Zombie
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 僵尸
- en: In addition, the `dump_codelist` diagnostic command allows the output to be
    directed to `stdout` or to a specified file. Output can be in XML form or standard
    text.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`dump_codelist` 诊断命令允许将输出定向到 `stdout` 或指定的文件。输出可以是 XML 格式或标准文本。
- en: 'The `print_codeblocks` command allows us to print:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`print_codeblocks` 命令允许我们打印：'
- en: Code cache size
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码缓存大小
- en: Code cache list
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码缓存列表
- en: List of blocks in the code cache
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码缓存中的块列表
- en: Addresses for code blocks
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码块的地址
- en: Th `datadump_request` diagnostic command sends a dump request to the **Java
    Virtual Machine Tool Interface** (**JVMTI**). This replaces the **Java Virtual
    Machine Debug Interface** (**JVMDI**) and the **Java Virtual Machine Profiling
    Interface** (**JVMPI**) interfaces.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: Th `datadump_request` 诊断命令向 **Java 虚拟机工具接口**（**JVMTI**）发送转储请求。这取代了 **Java 虚拟机调试接口**（**JVMDI**）和
    **Java 虚拟机分析接口**（**JVMPI**）接口。
- en: With the `set_vmflag` command, we can set a command-line flag or option in the
    JVM or the libraries.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `set_vmflag` 命令，我们可以在 JVM 或库中设置命令行标志或选项。
- en: Th `print_class_summary` diagnostic command prints a list of all loaded classes
    as well as the structure of their inheritance.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: Th `print_class_summary` 诊断命令打印所有已加载类的列表以及它们的继承结构。
- en: The `print_utf8pool` command prints all UTF-8 string constants.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`print_utf8pool` 命令打印所有 UTF-8 字符串常量。'
- en: Heap profiling agent [JEP 240]
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 堆分析代理 [JEP 240]
- en: 'Java Enhancement Proposal 240 is titled *Remove the JVM TI hprof Agent*. Here
    are the key terms associated with this JEP and referenced in the title that might
    be new to you:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: Java 增强提案 240 的标题为 *移除 JVM TI hprof 代理*。以下是与此 JEP 相关并可能在标题中引用的术语，可能对您来说是新的：
- en: '**Tool Interface (TI)**: This is a native programming interface that allows
    tools to control the execution of applications that are being run inside the Java
    Virtual Machine. The interface also permits state inquiries. The full nomenclature
    for this tool is the Java Virtual Machine Tool Interface, or JVM TI.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工具接口（TI）**：这是一个本地编程接口，允许工具控制运行在 Java 虚拟机内部的应用程序的执行。该接口还允许状态查询。此工具的完整名称是 Java
    虚拟机工具接口，或 JVM TI。'
- en: '**Heap Profiling (HPROF)**: This is an internal JDK tool used for profiling
    a JVM''s use of CPUs and the heap. The most common exposure developers have to
    `hprof` is the file that is generated when following a crash. The generated file
    contains a heap dump.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**堆分析（HPROF）**：这是一个内部 JDK 工具，用于分析 JVM 对 CPU 和堆的使用。开发者最常接触到的 `hprof` 是在崩溃后生成的文件。生成的文件包含堆转储。'
- en: 'The Java 9 JDK does not contain the `hprof` agent. It was removed largely because
    there are superior alternatives available. Here is a table of the related functionality:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: Java 9 JDK 不包含 `hprof` 代理。它被移除主要是因为有更优越的替代方案。以下是相关功能表的列表：
- en: '| **HPROF Functionality** | **Alternative** |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| **HPROF 功能** | **替代方案** |'
- en: '| Allocation Profiler(heap=sites) | Java VisualVM |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| 分配分析器（heap=sites） | Java VisualVM |'
- en: '| CPU Profiler(cpu=samples)(cpu=times) | Java VisualVMJava Flight Recorder
    |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| CPU 分析器（cpu=samples）（cpu=times） | Java VisualVMJava Flight Recorder |'
- en: '| Heap Dumps(heap=dump) | Internal JVM functionality:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '| 堆转储（heap=dump） | 内部 JVM 功能：'
- en: '`GC.heap_dump(icmd <pid> GC.heap_dump)`'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GC.heap_dump(icmd <pid> GC.heap_dump)`'
- en: '`jmap -dump`'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jmap -dump`'
- en: '|'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Interestingly, when HPROF was originally created, it was not intended to be
    used in production. In fact, it was only meant to test code for the JVM Tool Interface.
    So, with the advent of the Java 9 platform, the HPROF library (`libhprof.so`)
    will no longer be part of the JDK.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，当 HPROF 最初创建时，它并不是打算在生产环境中使用。事实上，它只是为了测试 JVM 工具接口的代码。因此，随着 Java 9 平台的出现，HPROF
    库（`libhprof.so`）将不再包含在 JDK 中。
- en: Removing your JHAT [JEP 241]
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移除您的 JHAT [JEP 241]
- en: 'The **Java Heap Analysis Tool** (**JHAT**) is used to parse Java heap dump
    files. The syntax for this heap dump file parsing tool is as follows:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '**Java 堆分析工具**（**JHAT**）用于解析 Java 堆转储文件。此堆转储文件解析工具的语法如下：'
- en: '[PRE11]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here is a quick look at the options associated with the JHAT command:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这里快速查看与 JHAT 命令相关的选项：
- en: '| **Option** | **Description** | **Default** |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| **选项** | **描述** | **默认** |'
- en: '| `-J<flag>` | This passes `<flag>` to the runtime system. | N/A |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| `-J<flag>` | 将 `<flag>` 传递给运行时系统。 | N/A |'
- en: '| `-stack<bool>` | Toggles tracking of object allocation call stack. | `true`
    |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| `-stack<bool>` | 切换对对象分配调用堆栈的跟踪。 | `true` |'
- en: '| `-refs<bool>` | Toggles tracking of references to objects. | `true` |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| `-refs<bool>` | 切换对对象的引用跟踪。 | `true` |'
- en: '| `-port<port>` | Indicates the port for the JHAT HTTP server. | `7000` |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| `-port<port>` | 指示 JHAT HTTP 服务器的端口。 | `7000` |'
- en: '| `-exclude<exclude-filename>` | Exclude indicated file from reachable objects
    query. | N/A |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| `-exclude<exclude-filename>` | 从可达对象查询中排除指定的文件。 | N/A |'
- en: '| `-baseline<filename>` | Specifies the baseline heap dump for use in comparisons.
    | N/A |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| `-baseline<filename>` | 指定用于比较的基线堆转储。 | N/A |'
- en: '| `-debug<int>` | Sets verbosity of output. | N/A |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| `-debug<int>` | 设置输出详细程度。 | N/A |'
- en: '| `-version` | Simply outputs the JHAT release number. | N/A |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| `-version` | 简单地输出JHAT发布号。 | N/A |'
- en: '| `-h``-help` | Provides help text. | N/A |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| `-h` `-help` | 提供帮助文本。 | N/A |'
- en: JHAT has been part of the Java platform since JDK-6 in an experimental form.
    It was not supported and has been deemed to be outdated. Starting with Java 9,
    this tool will no longer be part of the JDK.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: JHAT自JDK-6以来一直是Java平台的一部分，以实验形式存在。它没有得到支持，并被认为已经过时。从Java 9开始，这个工具将不再包含在JDK中。
- en: JVM command-line flag argument validation [JEP 245]
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JVM命令行标志参数验证[JEP 245]
- en: 'In this chapter, you have gained exposure to much of the command-line flag
    usage with the Java 9 platform. Java Enhancement Proposal 245, titled *Validate
    JVM Command-Line Flag Arguments*, was created to ensure all JVM command-line flags
    with arguments are validated. The primary goals of this effort were:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您已经接触到了Java 9平台的大部分命令行标志用法。Java增强提案245，标题为*验证JVM命令行标志参数*，旨在确保所有带有参数的JVM命令行标志都得到验证。这项工作的主要目标是：
- en: Avoid JVM crashes
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免JVM崩溃
- en: Provide error messages to inform of invalid flag arguments
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供错误消息以通知无效的标志参数
- en: 'As you can see from the following graphic, there was no attempt to auto-correct
    the flag argument errors; rather, just to identify the errors and prevent the
    JVM from crashing:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 如以下图形所示，没有尝试自动纠正标志参数错误；而是仅仅识别错误并防止JVM崩溃：
- en: '![](img/f1063222-f613-4e35-8b74-2ab7485d80dc.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f1063222-f613-4e35-8b74-2ab7485d80dc.png)'
- en: 'A sample error message is provided here and indicates that the flag argument
    was out of range. This error would be displayed during the flag argument range
    check performed during the JVM''s initialization:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 这里提供了一个示例错误消息，表明标志参数超出了范围。这个错误会在JVM初始化期间执行的标志参数范围检查期间显示：
- en: '[PRE12]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here are some specifics regarding this change to the Java platform:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这个对Java平台的更改，以下是一些具体细节：
- en: Expand on the current `globals.hpp` source file to ensure complete flag default
    values and permissible ranges are documented
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展当前的`globals.hpp`源文件以确保完整的标志默认值和允许的范围得到文档记录
- en: 'Define a framework to support adding new JVM command-line flags in the future:'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义一个框架以支持未来添加新的JVM命令行标志：
- en: This will include value ranges and value sets
  id: totrans-196
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这将包括值范围和值集
- en: This will ensure the validity checking will apply to all newly added command-line
    flags
  id: totrans-197
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这将确保有效性检查将适用于所有新添加的命令行标志
- en: 'Modify macro tables:'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改宏表：
- en: Add min/max for optional range
  id: totrans-199
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为可选范围添加最小/最大值
- en: 'Add constraint entries for the following:'
  id: totrans-200
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为以下内容添加约束条目：
- en: Ensure constraint checks are performed each time a flag changes
  id: totrans-201
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保每次标志更改时都执行约束检查
- en: All manageable flags will continue to be checked while the JVM is running
  id: totrans-202
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当JVM运行时，所有可管理的标志将继续被检查
- en: Compile for older platform versions [JEP 247]
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为旧平台版本编译[JEP 247]
- en: The Java Compiler, `javac`, has been updated for Java 9 to ensure it can be
    used to compile Java programs to run on user-selected older versions of the Java
    platform. This was the focus of Java Enhancement Proposal 247, **Compile for Older
    Platform Versions**.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: Java编译器`javac`在Java 9中进行了更新，以确保它可以用来编译Java程序以在用户选择的旧版本的Java平台上运行。这是Java增强提案247，**为旧平台版本编译**的焦点。
- en: 'As you can see in the following screenshot, `javac` has several options including
    `-source` and `-target`. The `javac` presented in the following screenshot is
    from Java 8:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 如以下截图所示，`javac`有几个选项，包括`-source`和`-target`。以下截图中的`javac`来自Java 8：
- en: '![](img/a45da48e-a26e-46ea-b76a-ff52b0ba85a8.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a45da48e-a26e-46ea-b76a-ff52b0ba85a8.png)'
- en: The `-source` option is used to dictate the Java version accepted by the compiler.
    The `-target` option informs which version of class files `javac` will produce.
    By default, `javac` generates class files in the most recent java version and
    that of the platform APIs. This can cause a problem when the compiled application
    uses APIs that are only available in the most recent platform version. This would
    render the application ineligible to run on older platform versions, despite what
    is dictated with the `-source` and `-target` options.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '`-source`选项用于指定编译器接受的Java版本。`-target`选项通知`javac`将生成哪个版本的类文件。默认情况下，`javac`生成与最新java版本和平台API相对应的类文件。当编译的应用程序使用仅在最新平台版本中可用的API时，这可能会导致问题。这会使应用程序在旧平台版本上无法运行，尽管`-source`和`-target`选项已指定。'
- en: 'To address the aforementioned problem, a new command-line option is introduced
    with the Java 9 platform. This option is the `--release` option and, when used,
    will automatically configure javac to generate class files that link against a
    specific platform version. The following screenshot shows the `javac` options
    with the Java 9 platform. As you can see, the new `--release` option is included:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决上述问题，Java 9平台引入了一个新的命令行选项。这个选项是`--release`选项，当使用时，将自动配置javac以生成链接到特定平台版本的类文件。以下截图显示了Java
    9平台的`javac`选项。如您所见，新的`--release`选项已被包括在内：
- en: '![](img/f85e9e29-06fe-48cc-a36c-a87a4404d6a3.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f85e9e29-06fe-48cc-a36c-a87a4404d6a3.png)'
- en: 'Here is the syntax for the new option:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是新选项的语法：
- en: '[PRE13]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Summary
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter we explored several changes to the Java 9 platform with the
    common theme of command-line flags. Specifically, we covered unified JVM logging,
    compiler control, new diagnostic commands, removal of the HPROF heap profiling
    agent, the removal of the JHAT, command-line flag argument validation, and the
    ability to compile for older platform versions.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了Java 9平台的一些变化，主题是命令行标志。具体来说，我们涵盖了统一的JVM日志记录、编译器控制、新的诊断命令、移除HPROF堆分析代理、移除JHAT、命令行标志参数验证以及为旧平台版本编译的能力。
- en: In the next chapter, we will focus on best practices with additional utilities
    provided with the Java 9 platform. These will include UTF-8, Unicode 7.0, Linux,
    and more.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将关注Java 9平台提供的附加实用工具的最佳实践。这些将包括UTF-8、Unicode 7.0、Linux等。
