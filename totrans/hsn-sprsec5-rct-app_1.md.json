["```java\npublic interface Publisher<T> {\n  public void subscribe(Subscriber<? super T> s);\n}\n```", "```java\npublic interface Subscriber<T> {\n  public void onSubscribe(Subscription s);\n  public void onNext(T t);\n  public void onError(Throwable t);\n  public void onComplete();\n}\n```", "```java\npublic interface Subscription {\n  public void request(long n);\n  public void cancel();\n}\n```", "```java\npublic interface Processor<T, R> extends Subscriber<T>, Publisher<R> {\n}\n```", "```java\npublic abstract class Flux<T>\n extends Object\n implements Publisher<T>\n```", "```java\nFlux<String> emptyFlux = Flux.empty();\n```", "```java\nFlux<String> itemFlux = Flux.just(\"Spring”, \"Security”, \"Reactive”);\n```", "```java\nList<String> existingList = Arrays.asList(\"Spring”, \"Security”, \"Reactive”);\nFlux<String> listFlux = Flux.fromIterable(existingList);\n```", "```java\nFlux<Long> timer = Flux.interval(Duration.ofMillis(x));\n```", "```java\nFlux.error(new CreatedException());\n```", "```java\npublic abstract class Mono<T>\n    extends Object\n    implements Publisher<T>\n```", "```java\nMono<String> emptyMono = Mono.empty();\n```", "```java\nMono<String> itemMono = Mono.just(\"Spring Security Reactive”);\n```", "```java\nMono.error(new CreatedException());\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <web-app>\n    <filter>\n        <filter-name>springSecurityFilterChain</filter-name>\n        <filter-class>\n            org.springframework.web.filter.DelegatingFilterProxy\n        </filter-class>\n    </filter>\n\n    <filter-mapping>\n        <filter-name>springSecurityFilterChain</filter-name>\n        <url-pattern>/*</url-pattern>\n    </filter-mapping>\n </web-app>\n```"]