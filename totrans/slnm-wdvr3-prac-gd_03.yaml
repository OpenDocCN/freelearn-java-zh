- en: Using Java 8 Features with Selenium
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With Selenium 3.0 moving to Java 8, we can use some of the new features of
    Java 8, such as Stream API and Lambda or Anonymous functions to create scripts
    in a functional programming style. We do so by reducing the number of lines of
    code as well as reaping the benefits of the newer features of the language. In
    this chapter, we will cover these topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Java 8 Stream API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Stream API to collect and filter data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Stream API with Selenium WebDriver
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing Java 8 Stream API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Stream API is a new addition to the Collections API in Java 8\. The Stream
    API brings new ways to process collections of objects. A stream represents a sequence
    of elements and supports different kinds of operations (filter, sort, map, and
    collect) from a collection. We can chain these operations together to form a pipeline
    to query the data, as shown in this diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9ed58994-fc57-43d5-81c7-f6c243f5353e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can obtain a Stream from a collection using the `.stream()` method. For
    example, we have a dropdown of languages supported by the sample web application
    displayed in the header section. Let''s capture this in an `Array list`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If we have to print the list members, we will use a `for` loop in the following
    way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the streams **API** we can obtain the stream by calling the `.stream()` method
    on the `languages` array list and print the members in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: After obtaining the stream, we called the `forEach()` method, passing the action
    we wanted to take on each element, that is, output the member value on the console,
    using the `System.out.println` method.
  prefs: []
  type: TYPE_NORMAL
- en: Once we have obtained a Stream from a collection, we can use that stream to
    process the elements or members of the collection.
  prefs: []
  type: TYPE_NORMAL
- en: Stream.filter()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can filter a stream using the `filter()` method. Let''s filter the stream
    obtained from the `languages` list to filter items starting with **E**, as shown
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `filter()` method takes a Predicate as a parameter. The `predicate` interface
    contains a function called `boolean test(T t)` that takes a single parameter and
    returns a boolean. In the preceding example, we passed the lambda expression `item
    -> item.startsWith("E")` to the `test()` function.
  prefs: []
  type: TYPE_NORMAL
- en: When the `filter()` method is called on a Stream, the filter passed as a parameter
    to the `filter()` function is stored internally. The items are not filtered immediately.
  prefs: []
  type: TYPE_NORMAL
- en: The parameter passed to the `filter()` function determines what items in the
    stream should be processed and what should be excluded. If the `Predicate.test()`
    function returns `true` for an item, that means it should be processed. If `false`
    is returned, the item is not processed. In the preceding example, the `test()`
    function will return true for all items starting with the character `E`.
  prefs: []
  type: TYPE_NORMAL
- en: Stream.sort()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can sort a stream by calling the `sort()` function. Let''s use the `sort()`
    function on the `languages` list, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This will sort the elements in alphabetical order. We can provide a lambda expression
    to sort the elements using custom comparison logic.
  prefs: []
  type: TYPE_NORMAL
- en: Stream.map()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Streams provide a map() method to map the elements of a stream into another
    form. We can map the elements into a new object. Let''s take the previous example
    and convert the elements of languages list to uppercase, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This will map all elements that are strings in the language collection to their
    uppercase equivalents. Again, this doesn't actually perform the mapping; it only
    configures the stream for mapping. Once one of the stream processing methods is
    invoked, the mapping (and filtering) will be performed.
  prefs: []
  type: TYPE_NORMAL
- en: Stream.collect()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Streams provide the collect() method, among the other methods, for stream processing
    on the Stream interface. When the collect() method is invoked, filtering and mapping
    will take place, and the object resulting from those actions will be collected.
    Let''s take the previous example and obtain a new list of languages in uppercase,
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This example creates a stream, adds a map to convert the strings to uppercase,
    and collects all objects in a new list. We can also use the filter or sort method
    and collect the resulting list based on conditions applied in the filter method.
  prefs: []
  type: TYPE_NORMAL
- en: Stream.min() and Stream.max()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Streams API provides min() and max() methods—stream processing for finding
    the minimum or maximum value in the stream respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take an example in the context of the sample application we''re testing.
    We will create a simple Java class called `Product` that stores the name and price
    of products returned by the search. We want to find the product that has the minimum
    price and the one that has the maximum price. Our product class will have two
    members, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create a list of products returned by the search result, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We can call the `.min()` function by passing the comparison attribute, in this
    case, price, using the `.getPrice()` method. The `.min()` function will use the
    price attribute and return the element that has the lowest price, as shown in
    this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The `get()` method will return the object returned by the `min()` function.
    We will store this in an instance of Product. The `min()` function finds MADISON
    EARBUDS as the lowest-priced product, as shown in the following console output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'As opposed to the `min()` function, the `max()`  function will return the product
    with the highest price, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The `max()` function finds MP3 PLAYER WITH AUDIO as the highest-priced product:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The `min()` and `max()` functions return an optional instance, which has a `get()`
    method to obtain the object.  The `get()` method will return null if the stream
    has no elements.
  prefs: []
  type: TYPE_NORMAL
- en: Both the functions take a comparator as a parameter. The `Comparator.comparing()`
    method creates a comparator based on the lambda expression passed to it.
  prefs: []
  type: TYPE_NORMAL
- en: Stream.count()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The streams API provides a count method that returns the number of elements
    in the stream after filtering has been applied.  Let''s take the previous example
    to get a count of Products from the MADISON brand:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The `count()` method returns a `long`, which is the count of elements matching
    with the filter criteria. In this example, the following output will be displayed
    on the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Using Stream API with Selenium WebDriver
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have introduced Streams API and its various functions, let's see
    how we can use them in our tests.
  prefs: []
  type: TYPE_NORMAL
- en: Filtering and counting WebElements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start with a simple test to determine the links displayed on the home
    page of the sample application. We get all the links from the home page and print
    their count, followed by the count of links that are visible on the page, as shown
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we used the `findElements()` method along with `By.tagName`
    to get all the links from the home page. However, for finding out the visible
    links out of them, we used the `filter()` function with a predicate to test whether
    the links are displayed. This is done by calling the `isDisplayed()` method of
    the `WebElement` interface. The `isDisplayed` method will return `true` if the
    link is displayed; otherwise it will return `false`. Finally, we called the `count()`
    method to get the count of links returned by the `filter()` function. This will
    show the following output on the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Filtering element attributes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the example code, we will filter a list of images that have an empty `alt`
    attribute defined. This is useful if you want to check the accessibility of images
    displayed on the page. As per the accessibility guidelines, all images should
    have the `alt` attribute defined. This is done by filtering images, by testing
    the `getAttribute("alt")` method; it returns an empty string, as shown in the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The `filter()` function will return the list of all image elements that have
    an empty `alt` attribute defined.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Map function to get the text value from elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this example, we will modify the search test we created in earlier chapters
    to test the results containing the list of expected products, as shown in the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we created a list of all the matching products returned
    by the `findElements()` method. We then retrieved the text of each element by
    calling the `map()` function and mapped the return values to a list of strings.
    This is compared with the `expectedProductNames` list.
  prefs: []
  type: TYPE_NORMAL
- en: Filtering and performing actions on WebElements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s further modify the search test and find a product matching with a given
    name. We will then click on the product to open the product details page, as shown
    in this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we used the `filter()` function to find a specific product
    from the list of WebElements. We retrieved the first matching product, using the
    `findFirst()` function. This will return a `WebElement` representing the link
    element. We then clicked on the element to open the product details page in the
    browser.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, we can use Streams API in a number of ways to create functional, readable
    code with just a few lines.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this short chapter, we learned how to use Selenium 8 Stream API and Lambda
    functions to simplify the Selenium WebDriver code. This helps you to write code
    in a functional programming style, which is more fluent and readable. Streams
    are useful for working with the list of WebElements. We can collect and filter
    data with a stream easily.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore the features of WebDriver for taking screenshots,
    handling Windows and Frames, synchronization, and managing cookies.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which version of Java Streams API is introduced?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explain the filter function of Streams API.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which method of Streams API will return the number of matching elements from
    the filter() function?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can use the map() function to filter a list of WebElements by attribute
    values: True or false?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can check out the following links for more information about the topics
    covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Read more about Stream API at [https://www.oracle.com/technetwork/articles/java/ma14-java-se-8-streams-2177646.html](https://www.oracle.com/technetwork/articles/java/ma14-java-se-8-streams-2177646.html) and
    [https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html](https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html)
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: Read more about Lambda expressions at [https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html](https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
