["```java\n/* non type-safe Result<Record> */\n```", "```java\nResult<Record> result = ctx.fetch(\n```", "```java\n  \"SELECT customer_name, customer_number, credit_limit\n```", "```java\n   FROM customer\");\n```", "```java\n/* non type-safe Result<Record> */\n```", "```java\nResult<Record> result = ctx.resultQuery(\n```", "```java\n  \"SELECT customer_name, customer_number, credit_limit\n```", "```java\n   FROM customer\").fetch();\n```", "```java\n/* non type-safe values */\n```", "```java\nfor (Record record : result) {\n```", "```java\n  // get value by index\n```", "```java\n  Object r1 = record.get(0);\n```", "```java\n  // get value by name\n```", "```java\n  Object r2 = record.get(\"customer_number\");\n```", "```java\n  // get value by name and type\n```", "```java\n  BigDecimal r3 = record.getValue(\n```", "```java\n    \"credit_limit\", BigDecimal.class);\n```", "```java\n}\n```", "```java\n/* non type-safe Result<Record> */\n```", "```java\nResult<Record> result = ctx.select().from(CUSTOMER).fetch();\n```", "```java\n/* type-safe values */\n```", "```java\nfor (Record r : result) {\n```", "```java\n  String r1 = r.get(CUSTOMER.CUSTOMER_NAME);\n```", "```java\n  Long r2 = r.get(CUSTOMER.CUSTOMER_NUMBER);\n```", "```java\n  BigDecimal r3 = r.get(CUSTOMER.CREDIT_LIMIT);\n```", "```java\n  ...\n```", "```java\n}\n```", "```java\n/* type-safe Result<Record> */\n```", "```java\nResult<CustomerRecord> result = ctx.select().from(CUSTOMER)\n```", "```java\n  .fetch().into(CUSTOMER);\n```", "```java\n/* type-safe Result<Record> */\n```", "```java\nList<CustomerRecord> result = ctx.select().from(CUSTOMER)\n```", "```java\n  .fetch().into(CustomerRecord.class);\n```", "```java\n/* type-safe values */\n```", "```java\nfor (CustomerRecord r : result) {\n```", "```java\n  String r1 = r.getCustomerName();\n```", "```java\n  Long r2 = r.getCustomerNumber();\n```", "```java\n  BigDecimal r3 = r.getCreditLimit();\n```", "```java\n  ...\n```", "```java\n}\n```", "```java\n/* non type-safe Result<Record> */\n```", "```java\nResult<Record> result = ctx.select()\n```", "```java\n  .from(CUSTOMER)\n```", "```java\n  .join(CUSTOMERDETAIL)\n```", "```java\n    .on(CUSTOMER.CUSTOMER_NUMBER\n```", "```java\n      .eq(CUSTOMERDETAIL.CUSTOMER_NUMBER))\n```", "```java\n  .fetch();\n```", "```java\n/* type-safe values */\n```", "```java\nfor (Record r : result) {\n```", "```java\n  String r1 = r.get(CUSTOMER.CUSTOMER_NAME);\n```", "```java\n  Long r2 = r.get(CUSTOMER.CUSTOMER_NUMBER);\n```", "```java\n  BigDecimal r3 = r.get(CUSTOMER.CREDIT_LIMIT);\n```", "```java\n  ...\n```", "```java\n  String r4 = r.get(CUSTOMERDETAIL.CITY);\n```", "```java\n  String r5 = r.get(CUSTOMERDETAIL.COUNTRY);\n```", "```java\n  ...\n```", "```java\n}\n```", "```java\n/* type-safe Result<Record> via select() */        \n```", "```java\nResult<Record15<Long, String, String, String, \n```", "```java\n  String, Long, BigDecimal, Integer, Long, String, String, \n```", "```java\n  String, String, String, String>> result\n```", "```java\n  = ctx.select(CUSTOMER.CUSTOMER_NUMBER, \n```", "```java\n    CUSTOMER.CUSTOMER_NAME,CUSTOMER.CONTACT_FIRST_NAME, \n```", "```java\n    CUSTOMER.CONTACT_LAST_NAME,CUSTOMER.PHONE, \n```", "```java\n    CUSTOMER.SALES_REP_EMPLOYEE_NUMBER, \n```", "```java\n    CUSTOMER.CREDIT_LIMIT,CUSTOMER.FIRST_BUY_DATE,\n```", "```java\n    CUSTOMERDETAIL.CUSTOMER_NUMBER, \n```", "```java\n    CUSTOMERDETAIL.ADDRESS_LINE_FIRST,\n```", "```java\n    CUSTOMERDETAIL.ADDRESS_LINE_SECOND, \n```", "```java\n    CUSTOMERDETAIL.CITY,CUSTOMERDETAIL.COUNTRY, \n```", "```java\n    CUSTOMERDETAIL.POSTAL_CODE,CUSTOMERDETAIL.STATE)\n```", "```java\n      .from(CUSTOMER)\n```", "```java\n      .join(CUSTOMERDETAIL)\n```", "```java\n      .on(CUSTOMER.CUSTOMER_NUMBER.eq(\n```", "```java\n        CUSTOMERDETAIL.CUSTOMER_NUMBER))\n```", "```java\n      .fetch();\n```", "```java\n/* type-safe Result<Record>via into() */\n```", "```java\nResult<Record15<Long, String, String, String, \n```", "```java\n         String, Long, BigDecimal, Integer, Long, String,  \n```", "```java\n         String, String, String, String, String>> result =  \n```", "```java\n   ctx.select()\n```", "```java\n      .from(CUSTOMER)\n```", "```java\n      .join(CUSTOMERDETAIL)\n```", "```java\n         .on(CUSTOMER.CUSTOMER_NUMBER\n```", "```java\n            .eq(CUSTOMERDETAIL.CUSTOMER_NUMBER))\n```", "```java\n      .fetch()\n```", "```java\n      .into(CUSTOMER.CUSTOMER_NUMBER, \n```", "```java\n    CUSTOMER.CUSTOMER_NAME, CUSTOMER.CONTACT_FIRST_NAME, \n```", "```java\n    CUSTOMER.CONTACT_LAST_NAME,CUSTOMER.PHONE, \n```", "```java\n    CUSTOMER.SALES_REP_EMPLOYEE_NUMBER, CUSTOMER.CREDIT_LIMIT, \n```", "```java\n    CUSTOMER.FIRST_BUY_DATE, CUSTOMERDETAIL.CUSTOMER_NUMBER,   \n```", "```java\n    CUSTOMERDETAIL.ADDRESS_LINE_FIRST, \n```", "```java\n    CUSTOMERDETAIL.ADDRESS_LINE_SECOND, CUSTOMERDETAIL.CITY,\n```", "```java\n    CUSTOMERDETAIL.COUNTRY, CUSTOMERDETAIL.POSTAL_CODE,\n```", "```java\n    CUSTOMERDETAIL.STATE);\n```", "```java\nResult<CustomerRecord> rcr=result.into(CUSTOMER);\n```", "```java\nResult<CustomerdetailRecord> rcd=result.into(CUSTOMERDETAIL);\n```", "```java\n/* type-safe Result<Record> */\n```", "```java\nResult<CustomerRecord> result \n```", "```java\n  = ctx.selectFrom(CUSTOMER).fetch();\n```", "```java\n/* type-safe values */\n```", "```java\nfor (CustomerRecord r : result) {\n```", "```java\n  String r1 = r.getCustomerName();\n```", "```java\n  Long r2 = r.getCustomerNumber();\n```", "```java\n  BigDecimal r3 = r.getCreditLimit();\n```", "```java\n  ... \n```", "```java\n}\n```", "```java\n/* type-safe Result<Record> */\n```", "```java\nResult<Record3<Long, String, BigDecimal>> result = ctx.select(\n```", "```java\n    CUSTOMER.CUSTOMER_NUMBER, CUSTOMER.CUSTOMER_NAME,   \n```", "```java\n    CUSTOMER.CREDIT_LIMIT)\n```", "```java\n  .from(CUSTOMER)\n```", "```java\n  .fetch();\n```", "```java\n/* type-safe Result<Record> */\n```", "```java\nResult<Record5<Long, BigDecimal, String, String, String>>\n```", "```java\n  result = ctx.select(CUSTOMER.CUSTOMER_NUMBER,    \n```", "```java\n      CUSTOMER.CREDIT_LIMIT, CUSTOMERDETAIL.CITY,   \n```", "```java\n      CUSTOMERDETAIL.COUNTRY, CUSTOMERDETAIL.POSTAL_CODE)\n```", "```java\n    .from(CUSTOMER)\n```", "```java\n    .join(CUSTOMERDETAIL)\n```", "```java\n    .on(CUSTOMER.CUSTOMER_NUMBER\n```", "```java\n      .eq(CUSTOMERDETAIL.CUSTOMER_NUMBER))\n```", "```java\n    .fetch();\n```", "```java\n/* Define a type using CREATE TYPE */\n```", "```java\nCREATE TYPE \"evaluation_criteria\" AS (\"communication_ability\" \n```", "```java\n  INT, \"ethics\" INT, \"performance\" INT, \"employee_input\" INT);\n```", "```java\nCREATE TABLE \"manager\" (\n```", "```java\n  ...\n```", "```java\n  \"manager_evaluation\" evaluation_criteria DEFAULT NULL\n```", "```java\n  ...\n```", "```java\n);\n```", "```java\n/* type-safe Result<Record> */\n```", "```java\nResult<Record2<String, EvaluationCriteriaRecord>> result =\n```", "```java\n  ctx.select(MANAGER.MANAGER_NAME, MANAGER.MANAGER_EVALUATION)\n```", "```java\n     .from(MANAGER)\n```", "```java\n     .fetch();\n```", "```java\n/* type-safe values */\n```", "```java\nfor(Record2 r : result) {\n```", "```java\n  String r1 = r.get(MANAGER.MANAGER_NAME);\n```", "```java\n  Integer r2 = r.get(MANAGER.MANAGER_EVALUATION)\n```", "```java\n    .getCommunicationAbility();\n```", "```java\n  Integer r3 = r.get(MANAGER.MANAGER_EVALUATION)\n```", "```java\n    .getEthics();\n```", "```java\n  Integer r4 = r.get(MANAGER.MANAGER_EVALUATION)\n```", "```java\n    .getPerformance();\n```", "```java\n  Integer r5 = r.get(MANAGER.MANAGER_EVALUATION)\n```", "```java\n    .getEmployeeInput();\n```", "```java\n}\n```", "```java\n/* type-safe Result<Record> */\n```", "```java\nResult<ManagerRecord> result =\n```", "```java\n  ctx.select(MANAGER.MANAGER_NAME, MANAGER.MANAGER_EVALUATION)\n```", "```java\n     .from(MANAGER)\n```", "```java\n     .fetch()\n```", "```java\n     .into(MANAGER); // or, into(ManagerRecord.class)\n```", "```java\n/* type-safe values */\n```", "```java\nfor(ManagerRecord r : result) {\n```", "```java\n  String r1 =r.getManagerName();\n```", "```java\n  Integer r2 =r.getManagerEvaluation()\n```", "```java\n    .getCommunicationAbility();\n```", "```java\n  Integer r3 = r.getManagerEvaluation().getEthics();\n```", "```java\n  Integer r4 = r.getManagerEvaluation().getPerformance();\n```", "```java\n  Integer r5 = r.getManagerEvaluation().getEmployeeInput();\n```", "```java\n}\n```", "```java\nQuery query = ctx.query(\"DELETE FROM payment \n```", "```java\n  WHERE customer_number = 103\");\n```", "```java\nQuery query = ctx.deleteFrom(PAYMENT)\n```", "```java\n  .where(PAYMENT.CUSTOMER_NUMBER.eq(103L));  \n```", "```java\nint affectedRows = query.execute();\n```", "```java\nResultQuery<Record> resultQuery = ctx.resultQuery(\n```", "```java\n  \"SELECT job_title FROM employee WHERE office_code = '4'\");\n```", "```java\nResult<Record> fetched = resultQuery.fetch();\n```", "```java\nList<String> result = fetched.into(String.class);        \n```", "```java\nResultQuery<Record1<String>> resultQuery\n```", "```java\n  = ctx.select(EMPLOYEE.JOB_TITLE)\n```", "```java\n       .from(EMPLOYEE)\n```", "```java\n       .where(EMPLOYEE.OFFICE_CODE.eq(\"4\"));        \n```", "```java\nResult<Record1<String>> fetched = resultQuery.fetch();\n```", "```java\nList<String> result = fetched.into(String.class);       \n```", "```java\nfor (Record2<String, String> customer : ctx.select(\n```", "```java\n             CUSTOMER.CUSTOMER_NAME, CUSTOMER.PHONE)\n```", "```java\n       .from(CUSTOMER)) {\n```", "```java\n  System.out.println(\"Customer:\\n\" + customer);\n```", "```java\n}         \n```", "```java\nfor (CustomerRecord customer : ctx.selectFrom(CUSTOMER)\n```", "```java\n       .where(CUSTOMER.SALES_REP_EMPLOYEE_NUMBER.eq(1504L))) {\n```", "```java\n  System.out.println(\"Customer:\\n\" + customer);\n```", "```java\n}\n```", "```java\nDSL.select(\n```", "```java\n      ORDERDETAIL.ORDER_LINE_NUMBER, \n```", "```java\n      sum(ORDERDETAIL.QUANTITY_ORDERED).as(\"itemsCount\"),\n```", "```java\n      sum(ORDERDETAIL.PRICE_EACH\n```", "```java\n        .mul(ORDERDETAIL.QUANTITY_ORDERED)).as(\"total\"))\n```", "```java\n   .from(ORDERDETAIL)   \n```", "```java\n   .where((val(20).lt(ORDERDETAIL.QUANTITY_ORDERED)))\n```", "```java\n   .groupBy(ORDERDETAIL.ORDER_LINE_NUMBER)\n```", "```java\n   .orderBy(ORDERDETAIL.ORDER_LINE_NUMBER)\n```", "```java\n   .getSQL();\n```", "```java\nField<Integer> tc1 = ORDERDETAIL.ORDER_LINE_NUMBER;  \n```", "```java\nField<Integer> tc2 = ORDERDETAIL.QUANTITY_ORDERED; \n```", "```java\nField<BigDecimal> tc3 = ORDERDETAIL.PRICE_EACH;    \n```", "```java\nTableField<OrderdetailRecord,Integer>\n```", "```java\n   tfc1 = ORDERDETAIL.ORDER_LINE_NUMBER;\n```", "```java\nTableField<OrderdetailRecord,Integer>\n```", "```java\n   tfc2 = ORDERDETAIL.QUANTITY_ORDERED;\n```", "```java\nTableField<OrderdetailRecord,BigDecimal>\n```", "```java\n   tfc3 = ORDERDETAIL.PRICE_EACH;\n```", "```java\nField<Integer> uc1 = val(20);                  \n```", "```java\nDSL.select(tc1, sum(tc2).as(\"itemsCount\"),\n```", "```java\n           sum(tc3.mul(tc2)).as(\"total\"))\n```", "```java\n   .from(ORDERDETAIL)\n```", "```java\n   .where(uc1.lt(tc2))\n```", "```java\n   .groupBy(tc1)\n```", "```java\n   .orderBy(tc1)\n```", "```java\n   .getSQL();\n```", "```java\nField<BigDecimal> f1 = sum(tc2); // function expression\n```", "```java\nField<BigDecimal> m1 = tc3.mul(tc2); // arithmetic expression\n```", "```java\nField<BigDecimal> f2 = sum(m1);      // function expression\n```", "```java\nField<BigDecimal> a1 = f1.as(\"itemsCount\"); // alias expression\n```", "```java\nField<BigDecimal> a2 = f2.as(\"total\");      // alias expression\n```", "```java\nDSL.select(tc1, a1, a2)\n```", "```java\n   .from(ORDERDETAIL)\n```", "```java\n   .where(uc1.lt(tc2))\n```", "```java\n   .groupBy(tc1)\n```", "```java\n   .orderBy(tc1)\n```", "```java\n   .getSQL();\n```", "```java\n.from(ORDERDETAIL) // table expression ORDERDETAIL\n```", "```java\n// non type-safe table expression\n```", "```java\nTable<?> t1 = ORDERDETAIL; \n```", "```java\n// type-safe table expression  \n```", "```java\nTable<OrderdetailRecord> t1 = ORDERDETAIL;\n```", "```java\nDSL.select(tc1, a1, a2)\n```", "```java\n   .from(t1)\n```", "```java\n   .where(uc1.lt(tc2))\n```", "```java\n   .groupBy(tc1)\n```", "```java\n   .orderBy(tc1)\n```", "```java\n   .getSQL();\n```", "```java\nCondition c1 = uc1.lt(tc2); // condition\n```", "```java\nDSL.select(tc1, a1, a2)\n```", "```java\n   .from(t1)\n```", "```java\n   .where(c1)\n```", "```java\n   .groupBy(tc1)\n```", "```java\n   .orderBy(tc1)\n```", "```java\n   .getSQL();\n```", "```java\nCollection<? extends SelectField> sf = List.of(tc1, a1, a2);\n```", "```java\nDSL.select(sf) …\n```", "```java\nSelectSelectStep s1 = DSL.select(tc1, a1, a2);\n```", "```java\nSelectJoinStep s2 = s1.from(t1);\n```", "```java\nSelectConditionStep s3 = s2.where(c1);\n```", "```java\nSelectHavingStep s4 = s3.groupBy(tc1);\n```", "```java\nSelectSeekStep1 s5 = s4.orderBy(tc1);\n```", "```java\nreturn s5.getSQL();        \n```", "```java\nSelectSelectStep<Record3<Integer, BigDecimal, BigDecimal>>\n```", "```java\n  s1ts = DSL.select(tc1, a1, a2);\n```", "```java\nSelectJoinStep<Record3<Integer, BigDecimal, BigDecimal>>\n```", "```java\n  s2ts = s1ts.from(t1);\n```", "```java\nSelectConditionStep<Record3<Integer, BigDecimal, BigDecimal>>\n```", "```java\n  s3ts = s2ts.where(c1);\n```", "```java\nSelectHavingStep<Record3<Integer, BigDecimal, BigDecimal>>\n```", "```java\n  s4ts = s3ts.groupBy(tc1);\n```", "```java\nSelectSeekStep1<Record3<Integer, BigDecimal, BigDecimal>,   \n```", "```java\n  Integer> s5ts = s4ts.orderBy(tc1);\n```", "```java\nreturn s5ts.getSQL();\n```", "```java\nreturn ctx.fetch(s5); // or, s5ts\n```", "```java\nSelectSelectStep s1 = ctx.select(tc1, a1, a2);\n```", "```java\n// or\n```", "```java\nSelectSelectStep<Record3<Integer, BigDecimal, BigDecimal>>\n```", "```java\n   s1ts = ctx.select(tc1, a1, a2);\n```", "```java\nreturn s5.fetch(); // or, s5ts\n```", "```java\nprivate final DataSource ds; // injected DataSource\n```", "```java\n...\n```", "```java\nList<Office> result = DSL.using(ds, SQLDialect.MYSQL)\n```", "```java\n  .selectFrom(OFFICE)\n```", "```java\n  .where(OFFICE.TERRITORY.eq(territory))\n```", "```java\n  .fetchInto(Office.class);\n```", "```java\nprivate final DataSource ds; // injected DataSource\n```", "```java\n...\n```", "```java\nList<Office> result = DSL.using(ds, SQLDialect.MYSQL, \n```", "```java\n      new Settings().withRenderSchema(Boolean.FALSE))\n```", "```java\n  .selectFrom(OFFICE)\n```", "```java\n  .where(OFFICE.TERRITORY.eq(territory))\n```", "```java\n  .fetchInto(Office.class);\n```", "```java\nprivate final DSLContext ctx; // injected DSLContext\n```", "```java\n...\n```", "```java\nList<Office> result = ctx.configuration()\n```", "```java\n .set(new Settings().withRenderSchema(Boolean.FALSE)).dsl()\n```", "```java\n .selectFrom(OFFICE)\n```", "```java\n .where(OFFICE.TERRITORY.eq(territory))\n```", "```java\n .fetchInto(Office.class);\n```", "```java\nprivate final DSLContext ctx; // injected DSLContext\n```", "```java\n...\n```", "```java\nList<Office> result = ctx.configuration()\n```", "```java\n .derive(new Settings().withRenderSchema(Boolean.FALSE)).dsl()\n```", "```java\n .selectFrom(OFFICE)\n```", "```java\n .where(OFFICE.TERRITORY.eq(territory))\n```", "```java\n .fetchInto(Office.class);\n```", "```java\ntry ( Connection conn\n```", "```java\n  = DriverManager.getConnection(\n```", "```java\n   \"jdbc:mysql://localhost:3306/classicmodels\",\n```", "```java\n   \"root\", \"root\")) {\n```", "```java\n    List<Office> result = DSL.using(conn)\n```", "```java\n      .selectFrom(OFFICE)\n```", "```java\n      .where(OFFICE.TERRITORY.eq(territory))\n```", "```java\n      .fetchInto(Office.class);\n```", "```java\n    return result;\n```", "```java\n} catch (SQLException ex) { // handle exception }\n```", "```java\ntry (CloseableDSLContext cdctx = DSL.using(\n```", "```java\n    \"jdbc:mysql://localhost:3306/classicmodels\", \n```", "```java\n    \"root\", \"root\")) {\n```", "```java\n   List<Office> result = cdctx.selectFrom(OFFICE)\n```", "```java\n     .where(OFFICE.TERRITORY.eq(territory))\n```", "```java\n     .fetchInto(Office.class);\n```", "```java\n   return result;\n```", "```java\n}\n```", "```java\nString sql = DSL.using(SQLDialect.MYSQL)\n```", "```java\n                .selectFrom(OFFICE)\n```", "```java\n                .where(OFFICE.TERRITORY.eq(territory))\n```", "```java\n                .getSQL();\n```", "```java\npublic class EmployeeName implements Serializable {\n```", "```java\n  private String firstName;\n```", "```java\n  private String lastName;\n```", "```java\n  // constructors, getters, setters,... omitted for brevity\n```", "```java\n}\n```", "```java\npublic class EmployeeData implements Serializable {   \n```", "```java\n  private Long employeeNumber;    \n```", "```java\n  private int salary;\n```", "```java\n  private EmployeeName employeeName;\n```", "```java\n  // constructors, getters, setters,... omitted for brevity\n```", "```java\n}\n```", "```java\nSELECT employee_number, salary, first_name, last_name\n```", "```java\nFROM employee\n```", "```java\nList<EmployeeData> result\n```", "```java\n  = ctx.fetch(\"SELECT employee_number, first_name, \n```", "```java\n               last_name, salary FROM employee\")\n```", "```java\n    .map(\n```", "```java\n      rs -> new EmployeeData(\n```", "```java\n        rs.getValue(\"employee_number\", Long.class),\n```", "```java\n        rs.getValue(\"salary\", Integer.class),\n```", "```java\n        new EmployeeName(\n```", "```java\n          rs.getValue(\"first_name\", String.class),\n```", "```java\n          rs.getValue(\"last_name\", String.class))\n```", "```java\n      )\n```", "```java\n    );\n```", "```java\nList<EmployeeData> result\n```", "```java\n  = ctx.select(EMPLOYEE.EMPLOYEE_NUMBER, \n```", "```java\n          EMPLOYEE.FIRST_NAME,EMPLOYEE.LAST_NAME, \n```", "```java\n          EMPLOYEE.SALARY)\n```", "```java\n    .from(EMPLOYEE)\n```", "```java\n    .fetch()\n```", "```java\n    .map(\n```", "```java\n      rs -> new EmployeeData(\n```", "```java\n        rs.getValue(EMPLOYEE.EMPLOYEE_NUMBER),     \n```", "```java\n        rs.getValue(EMPLOYEE.SALARY),\n```", "```java\n        new EmployeeName(rs.getValue(EMPLOYEE.FIRST_NAME),\n```", "```java\n                         rs.getValue(EMPLOYEE.LAST_NAME))\n```", "```java\n      )\n```", "```java\n);\n```", "```java\nList<EmployeeData> result\n```", "```java\n  = ctx.select(EMPLOYEE.EMPLOYEE_NUMBER, EMPLOYEE.FIRST_NAME,\n```", "```java\n         EMPLOYEE.LAST_NAME, EMPLOYEE.SALARY)\n```", "```java\n       .from(EMPLOYEE)\n```", "```java\n  .fetch(\n```", "```java\n     rs -> new EmployeeData(\n```", "```java\n       rs.getValue(EMPLOYEE.EMPLOYEE_NUMBER),             \n```", "```java\n       rs.getValue(EMPLOYEE.SALARY),\n```", "```java\n       new EmployeeName(rs.getValue(EMPLOYEE.FIRST_NAME),\n```", "```java\n                        rs.getValue(EMPLOYEE.LAST_NAME))\n```", "```java\n     )\n```", "```java\n  );\n```", "```java\nList<EmployeeData> result = ctx.fetch(\"\"\"\n```", "```java\n  SELECT employee_number, salary, \n```", "```java\n         first_name AS `employeeName.firstName`,\n```", "```java\n         last_name AS `employeeName.lastName` \n```", "```java\n  FROM employee\"\"\").into(EmployeeData.class);\n```", "```java\nList<EmployeeData> result \n```", "```java\n  = ctx.select(EMPLOYEE.EMPLOYEE_NUMBER, EMPLOYEE.SALARY,\n```", "```java\n            EMPLOYEE.FIRST_NAME.as(\"employeeName.firstName\"), \n```", "```java\n            EMPLOYEE.LAST_NAME.as(\"employeeName.lastName\"))\n```", "```java\n       .from(EMPLOYEE)\n```", "```java\n       .fetchInto(EmployeeData.class);\n```", "```java\nctx.selectFrom(SALE)\n```", "```java\n   .orderBy(SALE.SALE_)\n```", "```java\n   // .fetch() - optional\n```", "```java\n   .forEach(System.out::println);\n```", "```java\nctx.selectFrom(SALE)\n```", "```java\n   .orderBy(SALE.SALE_)\n```", "```java\n   .fetch()\n```", "```java\n   .map(SaleRecord::getSale)\n```", "```java\n   .forEach(System.out::println);\n```", "```java\nctx.selectFrom(SALE)\n```", "```java\n   .orderBy(SALE.SALE_)\n```", "```java\n   .fetch(SaleRecord::getSale)\n```", "```java\n   .forEach(System.out::println);\n```", "```java\nctx.selectFrom(SALE)\n```", "```java\n   .orderBy(SALE.SALE_)\n```", "```java\n   .fetch(s -> s.getSale())\n```", "```java\n   .forEach(System.out::println);\n```", "```java\nreturn ctx.selectFrom(SALE)\n```", "```java\n          .orderBy(SALE.SALE_)\n```", "```java\n          .fetch(new RecordMapper<SaleRecord, Double>() {\n```", "```java\n             @Override\n```", "```java\n             public Double map(SaleRecord sr) {\n```", "```java\n                return sr.getSale();\n```", "```java\n             }\n```", "```java\n          });\n```", "```java\npublic class SaleStats implements Serializable {\n```", "```java\n  private double totalSale;\n```", "```java\n  private List<Double> sales;\n```", "```java\n  // constructor, getters, setters, ... omitted for brevity\n```", "```java\n}\n```", "```java\nSaleStats result = ctx.fetch(\n```", "```java\n    \"SELECT sale FROM sale\") // jOOQ fluent API ends here   \n```", "```java\n  .stream() // Stream fluent API starts here                   \n```", "```java\n  .collect(Collectors.teeing(\n```", "```java\n     summingDouble(rs -> rs.getValue(\"sale\", Double.class)),\n```", "```java\n     mapping(rs -> rs.getValue(\"sale\", Double.class), \n```", "```java\n     toList()), SaleStats::new));\n```", "```java\nSaleStats result = ctx.select(SALE.SALE_)\n```", "```java\n  .from(SALE)\n```", "```java\n  .fetch()  // jOOQ fluent API ends here                \n```", "```java\n  .stream() // Stream fluent API starts here                \n```", "```java\n  .collect(Collectors.teeing(\n```", "```java\n     summingDouble(rs -> rs.getValue(SALE.SALE_)),\n```", "```java\n     mapping(rs -> rs.getValue(SALE.SALE_), toList()),\n```", "```java\n     SaleStats::new));\n```", "```java\nList<Office> result = ctx.configuration()\n```", "```java\n  .set(new Settings().withRenderSchema(Boolean.FALSE)\n```", "```java\n                     .withMaxRows(5)\n```", "```java\n                     .withInListPadding(Boolean.TRUE)).dsl()\n```", "```java\n  .selectFrom(...)\n```", "```java\n  ...\n```", "```java\n  .fetchInto(Office.class);\n```", "```java\nctx.select(EMPLOYEE.JOB_TITLE, \n```", "```java\n           EMPLOYEE.OFFICE_CODE, SALE.SALE_)\n```", "```java\n   .from(EMPLOYEE)\n```", "```java\n   .join(SALE)\n```", "```java\n   // \"on\" clause is missing here\n```", "```java\n   .fetch();\n```", "```java\nctx.select(EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME)\n```", "```java\n   .from(EMPLOYEE)\n```", "```java\n   .union(select(CUSTOMER.CONTACT_FIRST_NAME, \n```", "```java\n                 CUSTOMER.CONTACT_LAST_NAME)\n```", "```java\n          .from(CUSTOMER))\n```", "```java\n   .join(CUSTOMER)\n```", "```java\n   // \"join\" is not allowed here\n```", "```java\n   .on(CUSTOMER.SALES_REP_EMPLOYEE_NUMBER\n```", "```java\n      .eq(EMPLOYEE.EMPLOYEE_NUMBER))\n```", "```java\n   .fetch();\n```", "```java\nctx.select(CUSTOMER.CUSTOMER_NAME, \n```", "```java\n           ORDER.ORDER_DATE,lead(ORDER.ORDER_DATE, 1)\n```", "```java\n   // missing over()\n```", "```java\n   .orderBy(ORDER.ORDER_DATE).as(\"NEXT_ORDER_DATE\"))\n```", "```java\n   .from(ORDER)\n```", "```java\n   .join(CUSTOMER)\n```", "```java\n      .on(ORDER.CUSTOMER_NUMBER\n```", "```java\n        .eq(CUSTOMER.CUSTOMER_NUMBER))\n```", "```java\n   .fetch();\n```", "```java\n// cast this field to the type of another field\n```", "```java\n<Z> Field<Z> cast(Field<Z> field);\n```", "```java\n// cast this field to a given DataType\n```", "```java\n<Z> Field<Z> cast(DataType<Z> type);\n```", "```java\n// cast this field to the default DataType for a given Class\n```", "```java\n<Z> Field<Z> cast(Class<? extends Z> type);\n```", "```java\n<T> Field<T> cast(Object object, Field<T> field);\n```", "```java\n<T> Field<T> cast(Object object, DataType<T> type);\n```", "```java\n<T> Field<T> cast(Object object, Class<? extends T> type);\n```", "```java\n<T> Field<T> castNull(Field<T> field);\n```", "```java\n<T> Field<T> castNull(DataType<T> type);\n```", "```java\n<T> Field<T> castNull(Class<? extends T> type);\n```", "```java\nResult<Record2<BigDecimal, LocalDateTime>> result =    \n```", "```java\nctx.select(PAYMENT.INVOICE_AMOUNT.as(\"invoice_amount\"),\n```", "```java\n           PAYMENT.CACHING_DATE.as(\"caching_date\"))\n```", "```java\n   .from(PAYMENT)\n```", "```java\n   .where(PAYMENT.CUSTOMER_NUMBER.eq(103L))\n```", "```java\n   .fetch();\n```", "```java\nResult<Record2<String, LocalDate>> result =   \n```", "```java\n  ctx.select(\n```", "```java\n         PAYMENT.INVOICE_AMOUNT.cast(String.class)\n```", "```java\n           .as(\"invoice_amount\"),\n```", "```java\n         PAYMENT.CACHING_DATE.cast(LocalDate.class)\n```", "```java\n           .as(\"caching_date\"))\n```", "```java\n     .from(PAYMENT)\n```", "```java\n     .where(PAYMENT.CUSTOMER_NUMBER.eq(103L))\n```", "```java\n     .fetch();\n```", "```java\nSELECT\n```", "```java\n  cast(`classicmodels`.`payment`.`invoice_amount` as char) \n```", "```java\n    as `invoice_amount`,\n```", "```java\n  cast(`classicmodels`.`payment`.`caching_date` as date) \n```", "```java\n    as `caching_date`\n```", "```java\nFROM`classicmodels`.`payment`\n```", "```java\nWHERE`classicmodels`.`payment`.`customer_number` = 103\n```", "```java\n// coerce this field to the type of another field\n```", "```java\n<Z> Field<Z> coerce(Field<Z> field);\n```", "```java\n// coerce this field to a given DataType\n```", "```java\n<Z> Field<Z> coerce(DataType<Z> type);\n```", "```java\n// coerce this field to the default DataType for a given Class\n```", "```java\n<Z> Field<Z> coerce(Class<? Extends Z> type);\n```", "```java\n<T> Field<T> coerce(Field<?> field,  DataType<T> as)\n```", "```java\n<T> Field<T> coerce(Field<?> field, Field<T> as)\n```", "```java\n<T> Field<T> coerce(Field<?> field, Class<T> as)\n```", "```java\n<T> Field<T> coerce(Object value, Field<T> as)\n```", "```java\n<T> Field<T> coerce(Object value, DataType<T> as)\n```", "```java\n<T> Field<T> coerce(Object value, Field<T> as)\n```", "```java\nResult<Record2<String, LocalDate>> result= ctx.select(\n```", "```java\n    PAYMENT.INVOICE_AMOUNT.coerce(String.class)\n```", "```java\n      .as(\"invoice_amount\"),\n```", "```java\n    PAYMENT.CACHING_DATE.coerce(LocalDate.class)\n```", "```java\n      .as(\"caching_date\"))\n```", "```java\n  .from(PAYMENT)\n```", "```java\n  .where(PAYMENT.CUSTOMER_NUMBER.eq(103L))\n```", "```java\n  .fetch();\n```", "```java\nSELECT\n```", "```java\n  `classicmodels`.`payment`.`invoice_amount` \n```", "```java\n    as `invoice_amount`,\n```", "```java\n  `classicmodels`.`payment`.`caching_date` \n```", "```java\n    as `caching_date`\n```", "```java\nFROM `classicmodels`.`payment`\n```", "```java\nWHERE `classicmodels`.`payment`.`customer_number` = 103\n```", "```java\nctx.resultQuery(\n```", "```java\n  \"SELECT first_name, last_name FROM employee\").fetch();\n```", "```java\nResult<Record2<String, String>> result = ctx.resultQuery(\n```", "```java\n    \"SELECT first_name, last_name FROM employee\")\n```", "```java\n  .coerce(EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME)\n```", "```java\n  .fetch();   \n```", "```java\nResult<Record2<BigDecimal, String>> result = ctx.select(\n```", "```java\n  PRODUCT.BUY_PRICE.coerce(SQLDataType.DECIMAL(10, 5))\n```", "```java\n    .as(\"buy_price\"),\n```", "```java\n  PRODUCT.PRODUCT_DESCRIPTION.coerce(SQLDataType.VARCHAR(10))\n```", "```java\n    .as(\"prod_desc\"))\n```", "```java\n  .from(PRODUCT)\n```", "```java\n  .where(PRODUCT.PRODUCT_ID.eq(1L))\n```", "```java\n  .fetch();\n```", "```java\nResult<Record2<BigDecimal, String>> result = ctx.select(\n```", "```java\n  PRODUCT.BUY_PRICE.cast(SQLDataType.DECIMAL(10, 5))\n```", "```java\n    .as(\"buy_price\"),\n```", "```java\n  PRODUCT.PRODUCT_DESCRIPTION.cast(SQLDataType.VARCHAR(10))\n```", "```java\n    .as(\"prod_desc\"))\n```", "```java\n  .from(PRODUCT)\n```", "```java\n  .where(PRODUCT.PRODUCT_ID.eq(1L))\n```", "```java\n  .fetch();\n```", "```java\npublic void printInvoicesPerDayCoerce(LocalDate day) {\n```", "```java\n  ctx.select(PAYMENT.INVOICE_AMOUNT)\n```", "```java\n     .from(PAYMENT)\n```", "```java\n     .where(PAYMENT.PAYMENT_DATE\n```", "```java\n       .coerce(LocalDate.class).eq(day))\n```", "```java\n     .fetch()\n```", "```java\n     .forEach(System.out::println);\n```", "```java\n}\n```", "```java\npublic void printInvoicesPerDayCast(LocalDate day) {\n```", "```java\n  ctx.select(PAYMENT.INVOICE_AMOUNT)\n```", "```java\n     .from(PAYMENT)\n```", "```java\n     .where(PAYMENT.PAYMENT_DATE\n```", "```java\n       .cast(LocalDate.class).eq(day))\n```", "```java\n     .fetch()\n```", "```java\n     .forEach(System.out::println);\n```", "```java\n}\n```", "```java\nSELECT `classicmodels`.`payment`.`invoice_amount`\n```", "```java\nFROM `classicmodels`.`payment`\n```", "```java\nWHERE cast(`classicmodels`.`payment`.`payment_date` as date) \n```", "```java\n  = { d '2003-04-09' }\n```", "```java\nctx.select(PRODUCT.PRODUCT_NAME)\n```", "```java\n   .from(PRODUCT)\n```", "```java\n   .orderBy(PRODUCT.PRODUCT_NAME.collate(\"latin1_spanish_ci\"))\n```", "```java\n   .fetch()\n```", "```java\n   .forEach(System.out::println);\n```", "```java\nConnection conn = ...;\n```", "```java\ntry (PreparedStatement stmt = conn.prepareStatement(\n```", "```java\n  \"\"\"SELECT first_name, last_name FROM employee \n```", "```java\n     WHERE salary > ? AND job_title = ?\"\"\")) {\n```", "```java\n     stmt.setInt(1, 5000);\n```", "```java\n     stmt.setString(2, \"Sales Rep\");\n```", "```java\n     stmt.executeQuery();\n```", "```java\n}\n```", "```java\nctx.select(EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME)\n```", "```java\n   .from(EMPLOYEE)\n```", "```java\n   .where(EMPLOYEE.SALARY.gt(5000)\n```", "```java\n     .and(EMPLOYEE.JOB_TITLE.eq(\"Sales Rep\")))\n```", "```java\n   .fetch();\n```", "```java\nSELECT \n```", "```java\n  `classicmodels`.`employee`.`first_name`, \n```", "```java\n  `classicmodels`.`employee`.`last_name` \n```", "```java\nFROM`classicmodels`.`employee` \n```", "```java\nWHERE (`classicmodels`.`employee`.`salary` > ? \n```", "```java\n       and `classicmodels`.`employee`.`job_title` = ?)\n```", "```java\nSELECT\n```", "```java\n  `classicmodels`.`employee`.`first_name`, \n```", "```java\n  `classicmodels`.`employee`.`last_name` \n```", "```java\nFROM `classicmodels`.`employee` \n```", "```java\nWHERE(`classicmodels`.`employee`.`salary` > 5000 \n```", "```java\n   and `classicmodels`.`employee`.`job_title` = 'Sales Rep')\n```", "```java\nctx.select(EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME)\n```", "```java\n   .from(EMPLOYEE)\n```", "```java\n   .where(EMPLOYEE.SALARY.gt(val(5000))\n```", "```java\n      .and(EMPLOYEE.JOB_TITLE.eq(val(\"Sales Rep\"))))\n```", "```java\n   .fetch();\n```", "```java\npublic void userInputValuesAsIndexedParams(\n```", "```java\n        int salary, String job) {\n```", "```java\n  ctx.select(EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME)\n```", "```java\n     .from(EMPLOYEE)\n```", "```java\n     .where(EMPLOYEE.SALARY.gt(salary)\n```", "```java\n        .and(EMPLOYEE.JOB_TITLE.eq(job)))\n```", "```java\n     .fetch();\n```", "```java\n}\n```", "```java\nctx.select(PAYMENT.INVOICE_AMOUNT)\n```", "```java\n   .from(PAYMENT)\n```", "```java\n   .where(val(LocalDateTime.now())\n```", "```java\n      .between(PAYMENT.PAYMENT_DATE)\n```", "```java\n         .and(PAYMENT.CACHING_DATE))\n```", "```java\n   .fetch(); \n```", "```java\npublic void usingValExplicitly(LocalDateTime date) {\n```", "```java\nctx.select(PAYMENT.INVOICE_AMOUNT)\n```", "```java\n     .from(PAYMENT)\n```", "```java\n     .where(val(date).between(PAYMENT.PAYMENT_DATE)\n```", "```java\n       .and(PAYMENT.CACHING_DATE))\n```", "```java\n     .fetch();\n```", "```java\n}\n```", "```java\nctx.select(CUSTOMER.CUSTOMER_NUMBER,\n```", "```java\n    concat(CUSTOMER.CONTACT_FIRST_NAME, val(\" \"), \n```", "```java\n           CUSTOMER.CONTACT_LAST_NAME))\n```", "```java\n   .from(CUSTOMER)\n```", "```java\n   .fetch();\n```", "```java\npublic void usingValExplicitly(float vat) {\n```", "```java\n    ctx.select(\n```", "```java\n    EMPLOYEE.SALARY, \n```", "```java\n         // jOOQ implicit val()\n```", "```java\n         EMPLOYEE.SALARY.mul(vat).as(\"vat_salary\"), \n```", "```java\n         // explicit val()\n```", "```java\n         val(vat).as(\"vat\"))\n```", "```java\n      .from(EMPLOYEE)\n```", "```java\n      .fetch();\n```", "```java\n    }\n```", "```java\nctx.select(val(10).sub(2).mul(val(7).div(3)).div(2).mod(10))\n```", "```java\n   .fetch();\n```", "```java\npublic void reusingVal(int salary) {\n```", "```java\n  Param<Integer> salaryParam = val(salary);\n```", "```java\n  ctx.select(EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME, \n```", "```java\n           salaryParam.as(\"base_salary\"))\n```", "```java\n     .from(EMPLOYEE)\n```", "```java\n     .where(salaryParam.eq(EMPLOYEE.SALARY))\n```", "```java\n       .and(salaryParam.mul(0.15).gt(10000))\n```", "```java\n     .fetch();\n```", "```java\n}    \n```", "```java\n// bind value from string query\n```", "```java\nctx.fetch(\"\"\"\n```", "```java\n       SELECT first_name, last_name\n```", "```java\n       FROM employee WHERE salary > ? AND job_title = ?\n```", "```java\n          \"\"\", 5000, \"Sales Rep\");                \n```", "```java\n// bind value from string query\n```", "```java\nctx.resultQuery(\"\"\"\n```", "```java\n        SELECT first_name, last_name\n```", "```java\n        FROM employee WHERE salary > ? AND job_title = ?\n```", "```java\n                \"\"\", 5000, \"Sales Rep\")\n```", "```java\n   .fetch();\n```", "```java\nctx.select(EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME)\n```", "```java\n   .from(EMPLOYEE)\n```", "```java\n   .where(EMPLOYEE.SALARY.gt(param(\"employeeSalary\", 5000))\n```", "```java\n      .and(EMPLOYEE.JOB_TITLE\n```", "```java\n         .eq(param(\"employeeJobTitle\", \"Sales Rep\"))))\n```", "```java\n   .fetch();\n```", "```java\npublic void userInputValuesAsNamedParams(\n```", "```java\n                     int salary, String job) {\n```", "```java\n  ctx.select(EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME)\n```", "```java\n     .from(EMPLOYEE)\n```", "```java\n     .where(EMPLOYEE.SALARY\n```", "```java\n       .gt(param(\"employeeSalary\", salary))\n```", "```java\n       .and(EMPLOYEE.JOB_TITLE\n```", "```java\n         .eq(param(\"employeeJobTitle\", job))))\n```", "```java\n     .fetch();\n```", "```java\n}\n```", "```java\nString sql = ctx.renderNamedParams(\n```", "```java\n  ctx.select(EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME)\n```", "```java\n     .from(EMPLOYEE)\n```", "```java\n     .where(EMPLOYEE.SALARY.gt(param(\"employeeSalary\", 5000))\n```", "```java\n     .and(EMPLOYEE.JOB_TITLE\n```", "```java\n        .eq(param(\"employeeJobTitle\", \"Sales Rep\"))))\n```", "```java\nSELECT\n```", "```java\n  `classicmodels`.`employee`.`first_name`, \n```", "```java\n  `classicmodels`.`employee`.`last_name` \n```", "```java\nFROM `classicmodels`.`employee` \n```", "```java\nWHERE (`classicmodels`.`employee`.`salary` > : employeeSalary\n```", "```java\n       and `classicmodels`.`employee`.`job_title` \n```", "```java\n         = : employeeJobTitle)\n```", "```java\nctx.select(CUSTOMER.CUSTOMER_NUMBER,\n```", "```java\n      concat(CUSTOMER.CONTACT_FIRST_NAME, inline(\" \"), \n```", "```java\n      CUSTOMER.CONTACT_LAST_NAME))\n```", "```java\n   .from(CUSTOMER)\n```", "```java\n   .fetch();\n```", "```java\npublic void inlineParamsViaSettings() {\n```", "```java\n  DSL.using(ds, SQLDialect.MYSQL,\n```", "```java\n        new Settings().withStatementType(\n```", "```java\n              StatementType.STATIC_STATEMENT))\n```", "```java\n     .select(EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME)\n```", "```java\n     .from(EMPLOYEE)\n```", "```java\n     .where(EMPLOYEE.SALARY.gt(5000)\n```", "```java\n       .and(EMPLOYEE.JOB_TITLE.eq(\"Sales Rep\")))\n```", "```java\n     .fetch();\n```", "```java\n}\n```", "```java\nctx.select(EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME)\n```", "```java\n   .from(EMPLOYEE)\n```", "```java\n   .where(EMPLOYEE.SALARY.gt(inline(5000))\n```", "```java\n   .and(EMPLOYEE.JOB_TITLE.eq(inline(\"Sales Rep\"))))\n```", "```java\n   .fetch();\n```", "```java\nSELECT\n```", "```java\n  `classicmodels`.`employee`.`first_name`, \n```", "```java\n  `classicmodels`.`employee`.`last_name` \n```", "```java\nFORM `classicmodels`.`employee` \n```", "```java\nWHERE (`classicmodels`.`employee`.`salary` > 5000 \n```", "```java\n   and `classicmodels`.`employee`.`job_title` = 'Sales Rep')\n```", "```java\n@Bean\n```", "```java\npublic Settings jooqSettings() {\n```", "```java\n  return new Settings().withParamType(ParamType.NAMED);   \n```", "```java\n}\n```", "```java\n@Bean\n```", "```java\npublic Settings jooqSettings() {\n```", "```java\n  return new Settings()\n```", "```java\n    .withStatementType(StatementType.STATIC_STATEMENT)\n```", "```java\n    .withParamType(ParamType.INLINED);\n```", "```java\n}\n```", "```java\nResultQuery query\n```", "```java\n  = ctx.select(EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME)\n```", "```java\n       .from(EMPLOYEE)\n```", "```java\n       .where(EMPLOYEE.SALARY.gt(5000)\n```", "```java\n         .and(EMPLOYEE.JOB_TITLE.eq(\"Sales Rep\")));\n```", "```java\nString sql = query.getSQL(ParamType.INDEXED);\nSELECT \n  `classicmodels`.`employee`.`first_name`, \n  `classicmodels`.`employee`.`last_name` \nFROM `classicmodels`.`employee` \nWHERE (`classicmodels`.`employee`.`salary` > ? \n    and `classicmodels`.`employee`.`job_title` = ?)\n```", "```java\nString sql = query.getSQL(ParamType.NAMED);\nSELECT \n  `classicmodels`.`employee`.`first_name`, \n  `classicmodels`.`employee`.`last_name` \nFROM `classicmodels`.`employee` \nWHERE (`classicmodels`.`employee`.`salary` > :1 \n    and `classicmodels`.`employee`.`job_title` = :2)\n```", "```java\nString sql = query.getSQL(ParamType.INLINED);\nString sql = query.getSQL(ParamType.NAMED_OR_INLINED);\nSELECT \n  `classicmodels`.`employee`.`first_name`, \n  `classicmodels`.`employee`.`last_name` \nFROM `classicmodels`.`employee` \nWHERE (`classicmodels`.`employee`.`salary` > 5000 and\n       `classicmodels`.`employee`.`job_title` = 'Sales Rep')\n```", "```java\nResultQuery query\n```", "```java\n  = ctx.select(EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME)\n```", "```java\n       .from(EMPLOYEE)\n```", "```java\n       .where(EMPLOYEE.SALARY.gt(5000))\n```", "```java\n       .and(EMPLOYEE.JOB_TITLE.eq(\"Sales Rep\"));\n```", "```java\n// wrap the value, 5000\n```", "```java\nParam<?> p1 = query.getParam(\"1\"); \n```", "```java\n// wrap the value, \"Sales Rep\"\n```", "```java\nParam<?> p2 = query.getParam(\"2\"); \n```", "```java\nResultQuery query\n```", "```java\n  = ctx.select(EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME)\n```", "```java\n       .from(EMPLOYEE)\n```", "```java\n       .where(EMPLOYEE.SALARY.gt(\n```", "```java\n          param(\"employeeSalary\", 5000)))\n```", "```java\n       .and(EMPLOYEE.JOB_TITLE.eq(\n```", "```java\n          param(\"employeeJobTitle\", \"Sales Rep\")));\n```", "```java\n// wrap the value, 5000\n```", "```java\nParam<?> p1 = query.getParam(\"employeeSalary\"); \n```", "```java\n// wrap the value, \"Sales Rep\"\n```", "```java\nParam<?> p2 = query.getParam(\"employeeJobTitle\"); \n```", "```java\npublic void extractBindValuesIndexedParams() {\n```", "```java\n  ResultQuery query\n```", "```java\n    = ctx.select(EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME)\n```", "```java\n         .from(EMPLOYEE)\n```", "```java\n         .where(EMPLOYEE.SALARY.gt(5000))\n```", "```java\n         .and(EMPLOYEE.JOB_TITLE.eq(\"Sales Rep\"));\n```", "```java\n  System.out.println(\"Bind values: \" \n```", "```java\n    + query.getBindValues());\n```", "```java\n}\n```", "```java\npublic void extractBindValuesNamedParams() {\n```", "```java\n  ResultQuery query = ctx.select(\n```", "```java\n            EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME)\n```", "```java\n    .from(EMPLOYEE)\n```", "```java\n    .where(EMPLOYEE.SALARY.gt(param(\"employeeSalary\", 5000))\n```", "```java\n    .and(EMPLOYEE.JOB_TITLE\n```", "```java\n       .eq(param(\"employeeJobTitle\", \"Sales Rep\"))));\n```", "```java\n  System.out.println(\"Bind values: \" \n```", "```java\n    + query.getBindValues());\n```", "```java\n}\n```", "```java\nQuery query = ctx.select(...)\n```", "```java\n                 .from(PAYMENT)                \n```", "```java\n                 .where(...);       \n```", "```java\nList<DelayedPayment> result = jdbcTemplate.query(query.getSQL(),\n```", "```java\n   query.getBindValues().toArray(), new BeanPropertyRowMapper\n```", "```java\n      (DelayedPayment.class));\n```", "```java\npublic void modifyingTheBindValueIndexedParam() {\n```", "```java\n  try ( ResultQuery query \n```", "```java\n    = ctx.select(EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME)\n```", "```java\n         .from(EMPLOYEE)\n```", "```java\n         .where(EMPLOYEE.SALARY.gt(5000))\n```", "```java\n         .and(EMPLOYEE.JOB_TITLE.eq(\"SalesRep\"))\n```", "```java\n         .keepStatement(true)) {\n```", "```java\n     // lazily create a new PreparedStatement\n```", "```java\n     Result result1 = query.fetch();\n```", "```java\n     System.out.println(\"Result 1: \" + result1);\n```", "```java\n     // set new bind values\n```", "```java\n     Param<?> p1 = query.getParam(\"1\"); \n```", "```java\n     Param<?> p2 = query.getParam(\"2\"); \n```", "```java\n     p1.setConverted(75000);\n```", "```java\n     p2.setConverted(\"VP Marketing\");\n```", "```java\n     // re-use the previous PreparedStatement\n```", "```java\n     Result result2 = query.fetch();\n```", "```java\n     System.out.println(\"Result 2: \" + result2);\n```", "```java\n   }\n```", "```java\n}\n```", "```java\npublic void modifyingTheBindValueIndexedParam() {\n```", "```java\n  try ( ResultQuery query \n```", "```java\n    = ctx.select(EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME)\n```", "```java\n         .from(EMPLOYEE)\n```", "```java\n         .where(EMPLOYEE.SALARY.gt(5000))\n```", "```java\n         .and(EMPLOYEE.JOB_TITLE.eq(\"Sales Rep\"))\n```", "```java\n         .keepStatement(true)) {\n```", "```java\n    // lazily create a new PreparedStatement\n```", "```java\n    Result result1 = query.fetch();\n```", "```java\n    System.out.println(\"Result 1: \" + result1);\n```", "```java\n    // set new bind values\n```", "```java\n    query.bind(1, 75000);\n```", "```java\n    query.bind(2, \"VP Marketing\");\n```", "```java\n    // re-use the previous PreparedStatement\n```", "```java\n    Result result2 = query.fetch();\n```", "```java\n    System.out.println(\"Result 2: \" + result2);\n```", "```java\n  }\n```", "```java\n}\n```", "```java\nParam<Object> phoneParam = DSL.param(\"phone\");             \n```", "```java\n// set the parameter value\n```", "```java\nphoneParam.setValue(\"(26) 642-7555\"); \n```", "```java\nctx.selectFrom(CUSTOMER)\n```", "```java\n   .where(phoneParam.eq(CUSTOMER.PHONE))\n```", "```java\n   .fetch();\n```", "```java\nParam<String> phoneParam = DSL.param(\"phone\", String.class);   \n```", "```java\nphoneParam.setValue(\"(26) 642-7555\");\n```", "```java\nParam<String> phoneParam\n```", "```java\n  = DSL.param(\"phone\", SQLDataType.VARCHAR);     \n```", "```java\nphoneParam.setValue(\"(26) 642-7555\");\n```", "```java\nParam<String> phoneParam = DSL.param(\"phone\", CUSTOMER.PHONE); \n```", "```java\nphoneParam.setValue(\"(26) 642-7555\");\n```", "```java\nParam<String> phoneParam\n```", "```java\n  = DSL.param(\"phone\", \"(26) 642-7555\");                \n```", "```java\n// changing the value is still possible\n```", "```java\nphoneParam.setValue(\"another_value\");\n```"]