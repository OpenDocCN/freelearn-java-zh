["```java\npackage packt\n\nimport io.gatling.core.Predef._\nimport io.gatling.http.Predef._\nimport scala.concurrent.duration._\n\nclass QuotesSimulation extends Simulation {\n  val httpConf = http.baseURL(\"http://benchmark.test.app.quote\n  -manager.io\")\n\n  val quotesScenario = scenario(\"QuotesScenario\")\n    .exec(http(\"quotes\")\n      .get(\"/quote-manager/api/quote\"))\n\n  setUp(\n    quotesScenario.inject(rampUsers(64) over (60 seconds))\n    ).protocols(httpConf)\n}\n```", "```java\n$ ./bin/gatling.sh \nGATLING_HOME is set to /home/rmannibucau/softwares/gatling-charts-highcharts-bundle-2.3.0\n18:12:52.364 [WARN ] i.g.c.ZincCompiler$ - Pruning sources from previous analysis, due to incompatible CompileSetup.\nChoose a simulation number:\n     [0] computerdatabase.BasicSimulation\n     [1] computerdatabase.advanced.AdvancedSimulationStep01\n     [2] computerdatabase.advanced.AdvancedSimulationStep02\n     [3] computerdatabase.advanced.AdvancedSimulationStep03\n     [4] computerdatabase.advanced.AdvancedSimulationStep04\n     [5] computerdatabase.advanced.AdvancedSimulationStep05\n     [6] packt.QuotesSimulation\n6\nSelect simulation id (default is 'quotessimulation'). Accepted characters are a-z, A-Z, 0-9, - and _\nquotessimulation\nSelect run description (optional)\nTest our quotes endpoint\nSimulation packt.QuotesSimulation started...\n```", "```java\n================================================================================\n2017-11-01 18:14:49 50s elapsed\n---- Requests ------------------------------------------------------------------\n> Global (OK=54 KO=0 )\n> quotes (OK=54 KO=0 )\n\n---- QuotesScenario ------------------------------------------------------------\n[############################################################## ] 84%\n waiting: 10 / active: 0 / done:54 \n================================================================================\n```", "```java\nSimulation packt.QuotesSimulation completed in 59 seconds\nParsing log file(s)...\nParsing log file(s) done\nGenerating reports...\n\n================================================================================\n---- Global Information --------------------------------------------------------\n> request count 64 (OK=64 KO=0 )\n> min response time 20 (OK=20 KO=- )\n> max response time 538 (OK=538 KO=- )\n> mean response time 63 (OK=63 KO=- )\n> std deviation 63 (OK=63 KO=- )\n> response time 50th percentile 53 (OK=53 KO=- )\n> response time 75th percentile 69 (OK=69 KO=- )\n> response time 95th percentile 98 (OK=98 KO=- )\n> response time 99th percentile 280 (OK=280 KO=- )\n> mean requests/sec 1.067 (OK=1.067 KO=- )\n---- Response Time Distribution ------------------------------------------------\n> t < 800 ms 64 (100%)\n> 800 ms < t < 1200 ms 0 ( 0%)\n> t > 1200 ms 0 ( 0%)\n> failed 0 ( 0%)\n================================================================================\n```"]