["```java\nkeytool -genkeypair -alias localhost -keyalg RSA -keysize 2048 -storetype PKCS12 -keystore edge.p12 -validity 3650 \n```", "```java\nserver.port: 8443\nserver.ssl:\n key-store-type: PKCS12\n key-store: classpath:keystore/edge.p12\n key-store-password: password\n key-alias: localhost \n```", "```java\n    cd $BOOK_HOME/Chapter11\n    mkdir keystore\n    keytool -genkeypair -alias localhost -keyalg RSA -keysize 2048 -storetype PKCS12 -keystore keystore/edge-test.p12 -validity 3650 \n    ```", "```java\n    gateway:\n      environment:\n        - SPRING_PROFILES_ACTIVE=docker\n        - SERVER_SSL_KEY_STORE=file:/keystore/edge-test.p12\n        - SERVER_SSL_KEY_STORE_PASSWORD=testtest\n      volumes:\n        - $PWD/keystore:/keystore\n      build: spring-cloud/gateway\n      mem_limit: 512m\n      ports:\n        - \"8443:8443\" \n    ```", "```java\n    docker-compose up -d --scale gateway=0\n    docker-compose up -d --scale gateway=1 \n    ```", "```java\n    implementation 'org.springframework.boot:spring-boot-starter-security' \n    ```", "```java\n        @Bean\n        public InMemoryUserDetailsManager userDetailsService() {\n          UserDetails user = User.withDefaultPasswordEncoder()\n              .username(username)\n              .password(password)\n              .roles(\"USER\")\n              .build();\n          return new InMemoryUserDetailsManager(user);\n        } \n        ```", "```java\n        @Autowired\n        public SecurityConfig(\n          @Value(\"${app.eureka-username}\") String username,\n          @Value(\"${app.eureka-password}\") String password\n        ) {\n          this.username = username;\n          this.password = password;\n        } \n        ```", "```java\n        @Bean\n        public SecurityFilterChain configure(HttpSecurity http) throws Exception {\n          http\n            // Disable CRCF to allow services to register themselves with Eureka\n            .csrf()\n              .disable()\n            .authorizeRequests()\n              .anyRequest().authenticated()\n              .and()\n              .httpBasic();\n          return http.build();\n        } \n        ```", "```java\n    app:\n     eureka-username: u\n     eureka-password: p \n    ```", "```java\n    @Value(\"${app.eureka-username}\")\n    private String username;\n\n    @Value(\"${app.eureka-password}\")\n    private String password;\n\n    @Autowired\n    public void setTestRestTemplate(TestRestTemplate testRestTemplate) {\n       this.testRestTemplate = testRestTemplate.withBasicAuth(username, password);\n    } \n    ```", "```java\napp:\n  eureka-username: u\n  eureka-password: p\n\neureka:\n  client:\n     serviceUrl:\n       defaultZone: \"http://${app.eureka-username}:${app.eureka-\n                     password}@${app.eureka-server}:8761/eureka/\" \n```", "```java\n    implementation 'org.springframework.boot:spring-boot-starter-security'\n    implementation 'org.springframework.security:spring-security-oauth2-resource-server'\n    implementation 'org.springframework.security:spring-security-oauth2-jose' \n    ```", "```java\n    @Configuration\n    @EnableWebFluxSecurity\n    public class SecurityConfig {\n\n      @Bean\n      SecurityWebFilterChain springSecurityFilterChain(\n          ServerHttpSecurity http) {\n        http\n          .authorizeExchange()\n            .pathMatchers(\"/actuator/**\").permitAll()\n            .anyExchange().authenticated()\n            .and()\n          .oauth2ResourceServer()\n            .jwt();\n        return http.build();\n      }\n    } \n    ```", "```java\n    app.auth-server: localhost\n    spring.security.oauth2.resourceserver.jwt.issuer-uri: http://${app.auth-server}:9999\n    ---\n    spring.config.activate.on-profile: docker\n    app.auth-server: auth-server \n    ```", "```java\ndocker-compose exec auth-server curl localhost:9999/.well-known/openid-configuration -s | jq -r .jwks_uri \n```", "```java\n    .pathMatchers(POST, \"/product-composite/**\")\n      .hasAuthority(\"SCOPE_product:write\")\n    .pathMatchers(DELETE, \"/product-composite/**\")\n      .hasAuthority(\"SCOPE_product:write\")\n    .pathMatchers(GET, \"/product-composite/**\")\n      .hasAuthority(\"SCOPE_product:read\") \n    ```", "```java\n        http.csrf().disable().authorizeExchange().anyExchange().permitAll(); \n        ```", "```java\n        @SpringBootTest( \n          classes = {TestSecurityConfig.class},\n          properties = {\"spring.main.allow-bean-definition-\n            overriding=true\"}) \n        ```", "```java\n    .pathMatchers(\"/openapi/**\").permitAll()\n    .pathMatchers(\"/webjars/**\").permitAll() \n    ```", "```java\n@SecurityRequirement(name = \"security_auth\") \n```", "```java\n    @SecurityScheme(\n      name = \"security_auth\", type = SecuritySchemeType.OAUTH2,\n      flows = @OAuthFlows(\n        authorizationCode = @OAuthFlow(\n          authorizationUrl = \"${springdoc.oAuthFlow.\n            authorizationUrl}\",\n          tokenUrl = \"${springdoc.oAuthFlow.tokenUrl}\", \n          scopes = {\n            @OAuthScope(name = \"product:read\", description =\n              \"read scope\"),\n            @OAuthScope(name = \"product:write\", description = \n              \"write scope\")\n          }\n    )))\n    public class OpenApiConfig {} \n    ```", "```java\n     swagger-ui:\n        oauth2-redirect-url: /swagger-ui/oauth2-redirect.html\n        oauth:\n          clientId: writer\n          clientSecret: secret-writer\n          useBasicAuthenticationWithAccessCodeGrant: true\n      oAuthFlow:\n        authorizationUrl: https://localhost:8443/oauth2/authorize\n        tokenUrl: https://localhost:8443/oauth2/token \n    ```", "```java\n.pathMatchers(\"/openapi/**\").permitAll()\n.pathMatchers(\"/webjars/**\").permitAll() \n```", "```java\nACCESS_TOKEN=$(curl -k https://writer:secret-writer@$HOST:$PORT/oauth2/token -d grant_type=client_credentials -d scope=\"product:read product:write\" -s | jq .access_token -r) \n```", "```java\n# Verify that a request without access token fails on 401, Unauthorized\nassertCurl 401 \"curl -k https://$HOST:$PORT/product-composite/$PROD_ID_REVS_RECS -s\"\n# Verify that the reader client with only read scope can call the read API but not delete API\nREADER_ACCESS_TOKEN=$(curl -k https://reader:secret-reader@$HOST:$PORT/oauth2/token -d grant_type=client_credentials -d scope=\"product:read\" -s | jq .access_token -r)\nREADER_AUTH=\"-H \\\"Authorization: Bearer $READER_ACCESS_TOKEN\\\"\"\nassertCurl 200 \"curl -k https://$HOST:$PORT/product-composite/$PROD_ID_REVS_RECS $READER_AUTH -s\"\nassertCurl 403 \"curl -k https://$HOST:$PORT/product-composite/$PROD_ID_REVS_RECS $READER_AUTH -X DELETE -s\" \n```", "```java\n    cd $BOOK_HOME/Chapter11\n    ./gradlew build && docker-compose build \n    ```", "```java\n    ./test-em-all.bash start \n    ```", "```java\ncurl -H \"accept:application/json\" https://u:p@localhost:8443/eureka/api/apps -ks | jq -r .applications.application[].instance[].instanceId \n```", "```java\ncurl -k https://writer:secret-writer@localhost:8443/oauth2/token -d grant_type=client_credentials -d scope=\"product:read product:write\" -s | jq . \n```", "```java\ncurl -k https://reader:secret-reader@localhost:8443/oauth2/token -d grant_type=client_credentials -d scope=\"product:read\" -s | jq . \n```", "```java\n    CODE=7XBs...0mmyk \n    ```", "```java\n    curl -k https://reader:secret-reader@localhost:8443/oauth2/token \\\n     -d grant_type=authorization_code \\\n     -d client_id=reader \\\n     -d redirect_uri=https://my.redirect.uri \\\n     -d code=$CODE -s | jq . \n    ```", "```java\n    curl -k https://writer:secret-writer@localhost:8443/oauth2/token \\\n      -d grant_type=authorization_code \\\n      -d client_id=writer \\\n      -d redirect_uri=https://my.redirect.uri \\\n      -d code=$CODE -s | jq . \n    ```", "```java\n    ACCESS_TOKEN=an-invalid-token\n    curl https://localhost:8443/product-composite/1 -k -H \"Authorization: Bearer $ACCESS_TOKEN\" -i \n    ```", "```java\n    ACCESS_TOKEN={a-reader-access-token}\n    curl https://localhost:8443/product-composite/1 -k -H \"Authorization: Bearer $ACCESS_TOKEN\" -i \n    ```", "```java\n    ACCESS_TOKEN={a-reader-access-token}\n    curl https://localhost:8443/product-composite/999 -k -H \"Authorization: Bearer $ACCESS_TOKEN\" -X DELETE -i \n    ```", "```java\n    cd $BOOK_HOME/Chapter11/auth0\n    ./setup-tenant.bash \n    ```", "```java\nspring.security.oauth2.resourceserver.jwt.issuer-uri: https://dev-ml.eu.auth0.com/ \n```", "```java\ncurl https://${TENANT}/.well-known/openid-configuration -s | jq \n```", "```java\ncd $BOOK_HOME/Chapter11\n./gradlew build && docker-compose up -d --build product-composite gateway \n```", "```java\n    ACCESS_TOKEN=$(curl -k https://writer:secret-writer@$HOST:$PORT/oauth2/token -d grant_type=client_credentials -d scope=\"product:read product:write\" -s | jq .access_token -r) \n    ```", "```java\n    export TENANT=...\n    export WRITER_CLIENT_ID=...\n    export WRITER_CLIENT_SECRET=...\n    ACCESS_TOKEN=$(curl -X POST https://$TENANT/oauth/token \\\n      -d grant_type=client_credentials \\\n      -d audience=https://localhost:8443/product-composite \\\n      -d scope=product:read+product:write \\\n      -d client_id=$WRITER_CLIENT_ID \\\n      -d client_secret=$WRITER_CLIENT_SECRET -s | jq -r .access_token) \n    ```", "```java\n    READER_ACCESS_TOKEN=$(curl -k https://reader:secret-reader@$HOST:$PORT/oauth2/token -d grant_type=client_credentials -d scope=\"product:read\" -s | jq .access_token -r) \n    ```", "```java\n    export READER_CLIENT_ID=...\n    export READER_CLIENT_SECRET=...\n    READER_ACCESS_TOKEN=$(curl -X POST https://$TENANT/oauth/token \\\n      -d grant_type=client_credentials \\\n      -d audience=https://localhost:8443/product-composite \\\n      -d scope=product:read \\\n      -d client_id=$READER_CLIENT_ID \\\n      -d client_secret=$READER_CLIENT_SECRET -s | jq -r .access_token) \n    ```", "```java\n./test-em-all.bash \n```", "```java\ndocker-compose logs product-composite | grep \"Authorization info\" \n```", "```java\nexport TENANT=...\nexport WRITER_CLIENT_ID=...\nexport WRITER_CLIENT_SECRET=...\ncurl -X POST https://$TENANT/oauth/token \\\n  -d grant_type=client_credentials \\\n  -d audience=https://localhost:8443/product-composite \\\n  -d scope=product:read+product:write \\\n  -d client_id=$WRITER_CLIENT_ID \\\n  -d client_secret=$WRITER_CLIENT_SECRET \n```", "```java\n    CODE=...\n    export TENANT=...\n    export WRITER_CLIENT_ID=...\n    export WRITER_CLIENT_SECRET=...\n    curl -X POST https://$TENANT/oauth/token \\\n     -d grant_type=authorization_code \\\n     -d client_id=$WRITER_CLIENT_ID \\\n     -d client_secret=$WRITER_CLIENT_SECRET  \\\n     -d code=$CODE \\\n     -d redirect_uri=https://my.redirect.uri -s | jq . \n    ```", "```java\nACCESS_TOKEN=...\ncurl https://localhost:8443/product-composite/1 -k -H \"Authorization: Bearer $ACCESS_TOKEN\" -i \n```", "```java\nACCESS_TOKEN=...\ncurl https://localhost:8443/product-composite/999 -k -H \"Authorization: Bearer $ACCESS_TOKEN\" -X DELETE -i \n```", "```java\nExport TENANT=...\ncurl -H \"Authorization: Bearer $ACCESS_TOKEN\" https://$TENANT/userinfo -s | jq \n```", "```java\ndocker-compose down \n```"]