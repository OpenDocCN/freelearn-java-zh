["```java\nimport javax.annotation.security.RolesAllowed;\n\n@Stateless\npublic class CarManufacturer {\n\n    ...\n\n    @RolesAllowed(\"worker\")\n    public Car manufactureCar(Specification spec) {\n        ...\n    }\n\n    @RolesAllowed(\"factory-admin\")\n    public void reconfigureMachine(...) {\n        ...\n    }\n```", "```java\nimport javax.security.enterprise.authentication.mechanism.http.*;\nimport javax.security.enterprise.identitystore.DatabaseIdentityStoreDefinition;\nimport javax.security.enterprise.identitystore.IdentityStore;\n\n@BasicAuthenticationMechanismDefinition(realmName = \"car-realm\")\n@DatabaseIdentityStoreDefinition(\n        dataSourceLookup = \"java:comp/UserDS\",\n        callerQuery = \"select password from users where name = ?\",\n        useFor = IdentityStore.ValidationType.VALIDATE\n)\npublic class SecurityConfig {\n    // nothing to configure\n}\n```", "```java\nimport javax.security.enterprise.AuthenticationException;\nimport javax.security.enterprise.authentication.mechanism.http.*;\nimport javax.security.enterprise.credential.UsernamePasswordCredential;\nimport javax.security.enterprise.identitystore.CredentialValidationResult;\nimport javax.security.enterprise.identitystore.IdentityStoreHandler;\n\n@ApplicationScoped\npublic class TestAuthenticationMechanism implements\n        HttpAuthenticationMechanism {\n\n    @Inject\n    IdentityStoreHandler identityStoreHandler;\n\n    @Override\n    public AuthenticationStatus validateRequest(HttpServletRequest request,\n            HttpServletResponse response,\n            HttpMessageContext httpMessageContext)\n            throws AuthenticationException {\n\n        // get the authentication information\n        String name = request.get...\n        String password = request.get...\n\n        if (name != null && password != null) {\n\n            CredentialValidationResult result = identityStoreHandler\n                    .validate(new UsernamePasswordCredential(name,\n                    password));\n\n            return httpMessageContext.notifyContainerAboutLogin(result);\n        }\n\n        return httpMessageContext.doNothing();\n    }\n}\n```", "```java\nimport javax.security.enterprise.identitystore.IdentityStore;\n\n@ApplicationScoped\npublic class TestIdentityStore implements IdentityStore {\n\n    public CredentialValidationResult validate(UsernamePasswordCredential\n            usernamePasswordCredential) {\n\n        // custom authentication or authorization\n        // if valid\n\n        return new CredentialValidationResult(username, roles);\n\n        // or in case of invalid credentials\n\n        return CredentialValidationResult.INVALID_RESULT;\n    }\n}\n```", "```java\n<security-constraint>\n    <web-resource-collection>\n        <web-resource-name>Protected pages</web-resource-name>\n        <url-pattern>/management</url-pattern>\n    </web-resource-collection>\n    <auth-constraint>\n        <role-name>admin-role</role-name>\n    </auth-constraint>\n</security-constraint>\n```", "```java\nimport javax.security.enterprise.SecurityContext;\n\n@Stateless\npublic class CompanyProcesses {\n\n    @Inject\n    SecurityContext securityContext;\n\n    public void executeProcess() {\n        executeUserProcess();\n        if (securityContext.isCallerInRole(\"admin\")) {\n            String name = securityContext.getCallerPrincipal().getName();\n            executeAdminProcess(name);\n        }\n    }\n\n    ...\n}\n```"]