- en: Chapter 1. Introduction to Monitoring Elasticsearch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Elasticsearch is a distributed and horizontally scalable full-text search engine
    with built-in data redundancy. It is a powerful and incredibly useful tool. However,
    as with any distributed system, problems may arise as it scales with more nodes
    and more data.
  prefs: []
  type: TYPE_NORMAL
- en: The information provided by Elasticsearch monitoring tools can drastically improve
    your ability to solve cluster issues and greatly increase cluster reliability
    and performance as a result. This chapter gives an overview of Elasticsearch and
    talks about why and how to monitor a cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, this chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: An overview of Elasticsearch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring Elasticsearch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resourcefulness and problem solving
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An overview of Elasticsearch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section gives a high-level overview of Elasticsearch and discusses some
    related full-text search products.
  prefs: []
  type: TYPE_NORMAL
- en: Learning more about Elasticsearch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Elasticsearch is a free and open source full-text search engine that is built
    on top of Apache Lucene. Out of the box, Elasticsearch supports horizontal scaling
    and data redundancy. Released in 2010, Elasticsearch quickly gained recognition
    in the full-text search space. Its scalability features helped the tool gain market
    share against similar technologies such as Apache Solr.
  prefs: []
  type: TYPE_NORMAL
- en: 'Elasticsearch is a persistent document store and retrieval system, and it is
    similar to a database. However, it is different from relational databases such
    as MySQL, PostgreSQL, and Oracle in many ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Distributed**: Elasticsearch stores data and executes queries across multiple
    data nodes. This improves scalability, reliability, and performance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fault tolerant**: Data is replicated across multiple nodes in an Elasticsearch
    cluster, so if one node goes down, data is still available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Full-text search**: Elasticsearch is built on top of Lucene, a full-text
    search technology, allowing it to understand and search natural language text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JSON document store**: Elasticsearch stores documents as JSON instead of
    as rows in a table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NoSQL**: Elasticsearch uses a JSON-based query language as opposed to a sequel
    query language (SQL).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Non-relational**: Unlike relational databases, Elasticsearch doesn''t support
    *JOINS* across tables.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Analytics**: Elasticsearch has built-in analytical capabilities, such as
    word aggregations, geospatial queries, and scripting language support.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dynamic Mappings**: A *mapping* in Elasticsearch is analogous to a *schema*
    in the relational database world. If the data type for a document field isn''t
    explicitly defined, Elasticsearch will dynamically assign a type to it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data distribution, redundancy, and fault tolerance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Figures 1.1* through *1.4* explain how Elasticsearch distributes data across
    multiple nodes and how it automatically recovers from node failures:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Data distribution, redundancy, and fault tolerance](img/B03798_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.1: Elasticsearch Data Distribution'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this figure, we have an Elasticsearch cluster made up of three nodes: `elasticsearch-node-01`,
    `elasticsearch-node-02`, and `elasticsearch-node-03`. Our data index, is broken
    into three pieces, called **shards**. These shards are labeled `0`, `1`, and `2`.
    Each shard is replicated once; this means that there is a redundant copy of all
    shards. The cluster is colored green because the cluster is in good health; all
    data shards and replicas are available.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s say that the `elasticsearch-node-03` host experiences a hardware failure
    and shuts down. The following figures show what happens to the cluster in this
    scenario:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Data distribution, redundancy, and fault tolerance](img/B03798_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.2: Node failure'
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 1.2* shows `elasticsearch-node-03` experiencing a failure, and the
    cluster entering a `yellow` state. This state means that there is at least one
    copy of each shard active in the cluster, but not all shard replicas are active.
    In our case, a copy of the `1` and `2` shards were on the node that failed, `elasticsearch-node-03`.
    A `yellow` state also warns us that if there''s another hardware failure, it''s
    possible that not all data shards will be available.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When `elasticsearch-node-03` goes down, Elasticsearch will automatically start
    rebuilding redundant copies of the `1` and `2` shards on the remaining nodes;
    in our case, this is `elasticsearch-node-01` and `elasticsearch-node-02`. This
    is shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Data distribution, redundancy, and fault tolerance](img/B03798_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.3: Cluster recovering'
  prefs: []
  type: TYPE_NORMAL
- en: Once Elasticsearch finishes rebuilding the data replicas, the cluster enters
    a `green` state once again. Now, all data and shards are available to query.
  prefs: []
  type: TYPE_NORMAL
- en: '![Data distribution, redundancy, and fault tolerance](img/B03798_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.4: Cluster recovered'
  prefs: []
  type: TYPE_NORMAL
- en: The cluster recovery process demonstrated in *Figures 1.3* and *1.4* happens
    automatically in Elasticsearch. No extra configuration or user action is required.
  prefs: []
  type: TYPE_NORMAL
- en: Full-text search
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Full-text** search refers to running keyword queries against natural-language
    text documents. A document can be something, such as a newspaper article, a blog
    post, a forum post, or a tweet. In fact, many popular newspapers, forums, and
    social media websites, such as The New York Times, Stack Overflow, and Foursquare,
    use Elasticsearch.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Assume that we were to store the following text string in Elasticsearch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A user can find this document by searching Elasticsearch using keywords, such
    as *demand* or *doubt*. Elasticsearch also supports word stemming. This means
    that if we searched for the word *define*, Elasticsearch would still find this
    document because the root word of *defined* is *define*.
  prefs: []
  type: TYPE_NORMAL
- en: 'This piece of text, along with some additional metadata, may be stored as follows
    in Elasticsearch in the JSON format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If we let Elasticsearch dynamically assign a mapping (think *schema*) to this
    document, it would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note that Elasticsearch was able to pick up that the `published` field looked
    like a date.
  prefs: []
  type: TYPE_NORMAL
- en: 'An Elasticsearch query that searches for this document looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Specifics about Elasticsearch mappings and the Search API are beyond the scope
    of this book, but you can learn more about them through the official Elasticsearch
    documentation at the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Elasticsearch** **Mappings**: [https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping.html](https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Elasticsearch Search** **API**: [https://www.elastic.co/guide/en/elasticsearch/reference/current/search-search.html](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-search.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Elasticsearch should not be your primary data store. It does not provide guarantees,
    such as the **Atomicity, Consistency, Isolation, and Durability** (**ACID**) of
    a traditional SQL data store, nor the reliability guarantees of other NoSQL databases
    such as HBase or Cassandra. Even though Elasticsearch has built-in data redundancy
    and fault tolerance, it's best practice to archive your data in a separate data
    store in order to re-index data into Elasticsearch if needed.
  prefs: []
  type: TYPE_NORMAL
- en: Similar technologies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section explains a few of the many open source full-text search engines
    available, and discusses how they match up to Elasticsearch.
  prefs: []
  type: TYPE_NORMAL
- en: Apache Lucene
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Apache Lucene ([https://lucene.apache.org/core/](https://lucene.apache.org/core/))
    is an open source full-text search Java library. As mentioned earlier, Lucene
    is Elasticsearch's underlying search technology. Lucene also provides Elasticsearch's
    analytics features such as text aggregations and geospatial search. Using Apache
    Lucene directly is a good choice if you perform full-text search in Java on a
    small scale, or are building your own full-text search engine.
  prefs: []
  type: TYPE_NORMAL
- en: 'The benefits of using Elasticsearch over Lucene are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: REST API instead of a Java API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JSON document store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Horizontal scalability, reliability, and fault tolerance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On the other hand, Lucene is much more lightweight and flexible to build custom
    applications that require full-text search integrated from the ground up.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Lucene.NET is a popular .NET port of the library written in C#
  prefs: []
  type: TYPE_NORMAL
- en: Solr
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Solr is another full-text search engine built on top of Apache Lucene. It has
    similar search, analytic, and scaling capabilities to Elasticsearch. For most
    applications that need a full-text search engine, choosing between Solr and Elasticsearch
    comes down to personal preference.
  prefs: []
  type: TYPE_NORMAL
- en: Ferret
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ferret is a full-text search engine for Ruby. It's similar to Lucene, but it
    is not as feature-rich. It's generally better used for Ruby applications that
    don't require the power (or complexity) of a search engine, such as Elasticsearch
    or Solr.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring Elasticsearch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Monitoring distributed systems is difficult because as the number of nodes,
    the number of users, and the amount of data increase, problems will begin to crop
    up.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, it may not be immediately obvious if there is an error. Often,
    the cluster will keep running and try to recover from the error automatically.
    As shown in *Figures 1.2*, *1.3*, and *1.4* earlier, a node failed, but Elasticsearch
    brought itself back to a `green` state without any action on our part. Unless
    monitored, failures such as these can go unnoticed. This can have a detrimental
    impact on system performance and reliability. Fewer nodes means less processing
    power to respond to queries, and, as in the previous example, if another node
    fails, our cluster won't be able to return to a `green` state.
  prefs: []
  type: TYPE_NORMAL
- en: 'The aspects of an Elasticsearch cluster that we''ll want to keep track of include
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Cluster health and data availability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node failures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Elasticsearch JVM memory usage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Elasticsearch cache size
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: System utilization (CPU, Memory, and Disk)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query response times
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query rate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data index times
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data index rate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Number of indices and shards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Index and shard size
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: System configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this book, we'll go over how to understand each of these variables in context
    and how understanding them can help diagnose, recover from, and prevent problems
    in our cluster. It's certainly not possible to preemptively stop all Elasticsearch
    errors. However, by proactively monitoring our cluster, we'll have a good idea
    of when things are awry and will be better positioned to take corrective action.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following chapters, we''ll go over everything from web-based cluster
    monitoring tools to Unix command line tools and log file monitoring. Some of the
    specific tools this book covers are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Elasticsearch-head
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bigdesk
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Marvel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kopf
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kibana
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nagios
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unix command-line tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These tools will give us the information we need to effectively diagnose, solve,
    and prevent problems with Elasticsearch.
  prefs: []
  type: TYPE_NORMAL
- en: Resourcefulness and problem solving
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Monitoring tools do a great job of telling you what is going on in your cluster,
    and they can often point out if there is a problem. However, these tools won''t
    give you a recipe for how to actually fix a problem. Resolving issues takes critical
    thinking, attention to detail, and persistence. Some of the problem-solving themes
    this book talks about are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Always try to recreate the problem
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Be on the lookout for configuration and user errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only make one configuration change at a time before testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This book also provides some real-world case studies that help you turn the
    information provided by monitoring tools into insights to resolve Elasticsearch
    issues.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter gave you an overview of Elasticsearch and why it''s important
    to proactively monitor a cluster. To summarize the points from the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Elasticsearch is an open source scalable, fast, and fault-tolerant search engine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Elasticsearch is built on top of Apache Lucene, the same library that powers
    Apache Solr
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring tools will help us get a better understanding of our cluster and
    will let us know when problems arise
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As helpful as monitoring tools are, it's up to us to actually diagnose and fix
    cluster issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next chapter, we'll cover how to get a simple Elasticsearch cluster running
    and loaded with data, and how to install several monitoring tools.
  prefs: []
  type: TYPE_NORMAL
