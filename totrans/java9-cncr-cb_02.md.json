["```java\n          public class ParkingCash { \n          private static final int cost=2; \n          private long cash; \n\n          public ParkingCash() { \n            cash=0; \n          }\n\n```", "```java\n        public void vehiclePay() { \n          cash+=cost; \n        }\n\n```", "```java\n          public void close() { \n            System.out.printf(\"Closing accounting\"); \n            long totalAmmount; \n            totalAmmount=cash; \n            cash=0; \n            System.out.printf(\"The total amount is : %d\",\n                              totalAmmount); \n          } \n        }\n\n```", "```java\n          public class ParkingStats { \n          private long numberCars; \n          private long numberMotorcycles; \n          private ParkingCash cash; \n\n          public ParkingStats(ParkingCash cash) { \n            numberCars = 0; \n            numberMotorcycles = 0; \n              this.cash = cash; \n          }\n\n```", "```java\n        public void carComeIn() { \n          numberCars++; \n        } \n\n        public void carGoOut() { \n          numberCars--; \n          cash.vehiclePay(); \n        }\n\n```", "```java\n        public void motoComeIn() { \n          numberMotorcycles++; \n        } \n\n        public void motoGoOut() { \n          numberMotorcycles--; \n          cash.vehiclePay(); \n        }\n\n```", "```java\n        public class Sensor implements Runnable { \n\n          private ParkingStats stats; \n\n          public Sensor(ParkingStats stats) { \n            this.stats = stats; \n          }\n\n```", "```java\n        @Override \n        public void run() { \n          for (int i = 0; i< 10; i++) { \n            stats.carComeIn(); \n            stats.carComeIn(); \n            try { \n              TimeUnit.MILLISECONDS.sleep(50); \n            } catch (InterruptedException e) { \n              e.printStackTrace(); \n            } \n            stats.motoComeIn(); \n            try { \n              TimeUnit.MILLISECONDS.sleep(50); \n            } catch (InterruptedException e) { \n              e.printStackTrace(); \n            }\n\n```", "```java\n\n            stats.motoGoOut(); \n            stats.carGoOut(); \n            stats.carGoOut(); \n          } \n        }\n\n```", "```java\n        public class Main { \n\n          public static void main(String[] args) { \n\n            ParkingCash cash = new ParkingCash(); \n            ParkingStats stats = new ParkingStats(cash); \n\n            System.out.printf(\"Parking Simulator\\n\");\n\n```", "```java\n        intnumberSensors=2 * Runtime.getRuntime()\n                                           .availableProcessors(); \n        Thread threads[]=new Thread[numberSensors]; \n        for (int i = 0; i<numberSensors; i++) { \n          Sensor sensor=new Sensor(stats); \n          Thread thread=new Thread(sensor); \n          thread.start(); \n          threads[i]=thread; \n        }\n\n```", "```java\n        for (int i=0; i<numberSensors; i++) { \n          try { \n            threads[i].join(); \n          } catch (InterruptedException e) { \n            e.printStackTrace(); \n          } \n        }\n\n```", "```java\n            System.out.printf(\"Number of cars: %d\\n\",\n                              stats.getNumberCars()); \n            System.out.printf(\"Number of motorcycles: %d\\n\",\n                               stats.getNumberMotorcycles()); \n            cash.close(); \n          } \n        }\n\n```", "```java\n        public synchronized void vehiclePay() { \n          cash+=cost; \n        }\n\n```", "```java\n        public void close() { \n          System.out.printf(\"Closing accounting\"); \n          long totalAmmount; \n          synchronized (this) { \n            totalAmmount=cash; \n            cash=0; \n          } \n          System.out.printf(\"The total amount is : %d\",totalAmmount); \n        }\n\n```", "```java\n        private final Object controlCars, controlMotorcycles; \n        public ParkingStats (ParkingCash cash) { \n          numberCars=0; \n          numberMotorcycles=0; \n          controlCars=new Object(); \n          controlMotorcycles=new Object(); \n          this.cash=cash; \n        }\n\n```", "```java\n        public void carComeIn() { \n          synchronized (controlCars) { \n            numberCars++; \n          } \n        } \n\n        public void carGoOut() { \n          synchronized (controlCars) { \n            numberCars--; \n          } \n          cash.vehiclePay(); \n        } \n\n```", "```java\n\n        public void motoComeIn() { \n          synchronized (controlMotorcycles) { \n            numberMotorcycles++; \n          } \n        } \n\n        public void motoGoOut() { \n          synchronized (controlMotorcycles) { \n            numberMotorcycles--; \n          } \n          cash.vehiclePay(); \n        }\n\n```", "```java\n    synchronized (this) { \n      // Java code \n    }\n\n```", "```java\n         public class EventStorage { \n\n          private int maxSize; \n          private Queue<Date> storage;\n\n```", "```java\n        public EventStorage(){ \n          maxSize=10; \n          storage=new LinkedList<>(); \n        }\n\n```", "```java\n        public synchronized void set(){ \n          while (storage.size()==maxSize){ \n            try { \n              wait(); \n            } catch (InterruptedException e) { \n              e.printStackTrace(); \n            } \n          } \n          storage.offer(new Date()); \n          System.out.printf(\"Set: %d\",storage.size()); \n          notify(); \n        }\n\n```", "```java\n        public synchronized void get(){ \n          while (storage.size()==0){ \n            try { \n              wait(); \n            } catch (InterruptedException e) { \n              e.printStackTrace(); \n            } \n          } \n          String element=storage.poll().toString(); \n          System.out.printf(\"Get: %d: %s\\n\",storage.size(),element); \n          notify(); \n\n        }\n\n```", "```java\n        public class Producer implements Runnable {\n\n```", "```java\n        private EventStorage storage; \n\n        public Producer(EventStorage storage){ \n          this.storage=storage; \n        }\n\n```", "```java\n        @Override \n        public void run() { \n          for (int i=0; i<100; i++){ \n            storage.set(); \n          } \n        }\n\n```", "```java\n        public class Consumer implements Runnable {\n\n```", "```java\n        private EventStorage storage; \n\n        public Consumer(EventStorage storage){ \n          this.storage=storage; \n        }\n\n```", "```java\n        @Override \n        public void run() { \n          for (int i=0; i<100; i++){ \n            storage.get(); \n          } \n        }\n\n```", "```java\n        public class Main { \n\n          public static void main(String[] args) {\n\n```", "```java\n        EventStorage storage=new EventStorage();\n\n```", "```java\n        Producer producer=new Producer(storage); \n        Thread thread1=new Thread(producer);\n\n```", "```java\n        Consumer consumer=new Consumer(storage); \n        Thread thread2=new Thread(consumer);\n\n```", "```java\n        thread2.start(); \n        thread1.start();\n\n```", "```java\n         public class PrintQueue {\n\n```", "```java\n        private Lock queueLock; \n        public PrintQueue(booleanfairMode) { \n          queueLock = new ReentrantLock(fairMode); \n        }\n\n```", "```java\n        public void printJob(Object document){\n\n```", "```java\n        queueLock.lock();\n\n```", "```java\n        try { \n          Long duration=(long)(Math.random()*10000); \n          System.out.println(Thread.currentThread().getName()+ \":\n                             PrintQueue: Printing a Job during \"+\n                             (duration/1000)+\" seconds\"); \n          Thread.sleep(duration); \n        } catch (InterruptedException e) { \n          e.printStackTrace(); \n        }\n\n```", "```java\n        finally { \n          queueLock.unlock(); \n        }\n\n```", "```java\n          queueLock.lock(); \n          try { \n            Long duration = (long) (Math.random() * 10000); \n            System.out.printf(\"%s: PrintQueue: Printing a Job during\n                               %d seconds\\n\", Thread.currentThread()\n                              .getName(),(duration / 1000)); \n            Thread.sleep(duration); \n          } catch (InterruptedException e) { \n            e.printStackTrace(); \n          } finally { \n          queueLock.unlock(); \n        }\n\n```", "```java\n        public class Job implements Runnable {\n\n```", "```java\n        private PrintQueue printQueue; \n\n        public Job(PrintQueue printQueue){ \n          this.printQueue=printQueue; \n        }\n\n```", "```java\n        @Override \n        public void run() { \n          System.out.printf(\"%s: Going to print a document\\n\",\n                            Thread.currentThread().getName()); \n          printQueue.printJob(new Object()); \n        System.out.printf(\"%s: The document has been printed\\n\",\n                          Thread.currentThread().getName()); \n        }\n\n```", "```java\n        public class Main { \n\n          public static void main (String args[]){\n\n```", "```java\n          System.out.printf(\"Running example with fair-mode =\n                             false\\n\"); \n          testPrintQueue(false); \n          System.out.printf(\"Running example with fair-mode = true\\n\"); \n          testPrintQueue(true); \n        }\n\n```", "```java\n        private static void testPrintQueue(Boolean fairMode) { \n          PrintQueue printQueue=new PrintQueue(fairMode);\n\n```", "```java\n        Thread thread[]=new Thread[10]; \n        for (int i=0; i<10; i++){ \n          thread[i]=new Thread(new Job(printQueue),\"Thread \"+ i); \n        }\n\n```", "```java\n        for (int i=0; i<10; i++){ \n          thread[i].start(); \n        }\n\n```", "```java\n        for (int i=0; i<10; i++) { \n          try { \n            thread[i].join(); \n          } catch (InterruptedException e) { \n            e.printStackTrace(); \n          } \n        }\n\n```", "```java\n        public class PricesInfo {\n\n```", "```java\n        private double price1; \n        private double price2;\n\n```", "```java\n        private ReadWriteLock lock;\n\n```", "```java\n        public PricesInfo(){ \n          price1=1.0; \n          price2=2.0; \n          lock=new ReentrantReadWriteLock(); \n        }\n\n```", "```java\n        public double getPrice1() { \n          lock.readLock().lock(); \n          double value=price1; \n          lock.readLock().unlock(); \n          return value; \n        }\n\n```", "```java\n        public double getPrice2() { \n          lock.readLock().lock(); \n          double value=price2; \n          lock.readLock().unlock(); \n          return value; \n        }\n\n```", "```java\n        public void setPrices(double price1, double price2) { \n          lock.writeLock().lock(); \n          System.out.printf(\"%s: PricesInfo: Write Lock Adquired.\\n\",\n                            new Date()); \n          try { \n            TimeUnit.SECONDS.sleep(10); \n          } catch (InterruptedException e) { \n            e.printStackTrace(); \n          } \n          this.price1=price1; \n          this.price2=price2; \n          System.out.printf(\"%s: PricesInfo: Write Lock Released.\\n\",\n                            new Date()); \n          lock.writeLock().unlock(); \n        }\n\n```", "```java\n        public class Reader implements Runnable {\n\n```", "```java\n        private PricesInfo pricesInfo; \n\n        public Reader (PricesInfo pricesInfo){ \n          this.pricesInfo=pricesInfo; \n        }\n\n```", "```java\n        @Override \n        public void run() { \n          for (int i=0; i<20; i++){ \n            System.out.printf(\"%s: %s: Price 1: %f\\n\",new Date(),\n                              Thread.currentThread().getName(),\n                              pricesInfo.getPrice1()); \n            System.out.printf(\"%s: %s: Price 2: %f\\n\",new Date(),\n                              Thread.currentThread().getName(),\n                              pricesInfo.getPrice2()); \n          } \n        }\n\n```", "```java\n        public class Writer implements Runnable {\n\n```", "```java\n        private PricesInfo pricesInfo; \n\n        public Writer(PricesInfo pricesInfo){ \n          this.pricesInfo=pricesInfo; \n        }\n\n```", "```java\n        @Override \n        public void run() { \n          for (int i=0; i<3; i++) { \n            System.out.printf(\"%s: Writer: Attempt to modify the\n                              prices.\\n\", new Date()); \n            pricesInfo.setPrices(Math.random()*10, Math.random()*8); \n            System.out.printf(\"%s: Writer: Prices have been\n                              modified.\\n\", new Date()); \n            try { \n              Thread.sleep(2); \n            } catch (InterruptedException e) { \n              e.printStackTrace(); \n            } \n          } \n        }\n\n```", "```java\n        public class Main { \n          public static void main(String[] args) {\n\n```", "```java\n        PricesInfo pricesInfo=new PricesInfo();\n\n```", "```java\n        Reader readers[]=new Reader[5]; \n        Thread threadsReader[]=new Thread[5]; \n\n        for (int i=0; i<5; i++){ \n          readers[i]=new Reader(pricesInfo); \n          threadsReader[i]=new Thread(readers[i]); \n        }\n\n```", "```java\n        Writer writer=new Writer(pricesInfo); \n        Thread  threadWriter=new Thread(writer);\n\n```", "```java\n        for (int i=0; i<5; i++){ \n          threadsReader[i].start(); \n        } \n        threadWriter.start();\n\n```", "```java\n        public class FileMock { \n\n          private String[] content; \n          private int index;\n\n```", "```java\n        public FileMock(int size, int length){ \n          content = new String[size]; \n          for (int i = 0; i< size; i++){ \n            StringBuilder buffer = new StringBuilder(length); \n            for (int j = 0; j < length; j++){ \n              int randomCharacter= (int)Math.random()*255; \n              buffer.append((char)randomCharacter); \n            } \n            content[i] = buffer.toString(); \n          } \n          index=0; \n        }\n\n```", "```java\n        public boolean hasMoreLines(){ \n          return index <content.length; \n        }\n\n```", "```java\n        public String getLine(){ \n          if (this.hasMoreLines()) { \n            System.out.println(\"Mock: \" + (content.length-index)); \n            return content[index++]; \n          } \n          return null; \n        }\n\n```", "```java\n        public class Buffer {\n\n```", "```java\n                  private final LinkedList<String> buffer;\n\n```", "```java\n                    private final int maxSize;\n\n```", "```java\n                    private final ReentrantLock lock;\n\n```", "```java\n                  private final Condition lines;\n\n                  private final Condition space;\n\n```", "```java\n                  private boolean pendingLines;\n\n```", "```java\n        public Buffer(int maxSize) { \n          this.maxSize = maxSize; \n          buffer = new LinkedList<>(); \n          lock = new ReentrantLock(); \n          lines = lock.newCondition(); \n          space = lock.newCondition(); \n          pendingLines =true; \n        }\n\n```", "```java\n        public void insert(String line) { \n          lock.lock(); \n          try { \n            while (buffer.size() == maxSize) { \n              space.await(); \n            } \n            buffer.offer(line); \n            System.out.printf(\"%s: Inserted Line: %d\\n\",\n                              Thread.currentThread().getName(),\n                              buffer.size()); \n            lines.signalAll(); \n          } catch (InterruptedException e) { \n            e.printStackTrace(); \n          } finally { \n            lock.unlock(); \n          } \n        }\n\n```", "```java\n        public String get() { \n          String line = null; \n          lock.lock(); \n          try { \n            while ((buffer.size() == 0) &&(hasPendingLines())) { \n              lines.await(); \n            } \n\n            if (hasPendingLines()) { \n              line = buffer.poll(); \n              System.out.printf(\"%s: Line Readed: %d\\n\",\n                                Thread.currentThread().getName(),\n                                buffer.size()); \n              space.signalAll(); \n            } \n          } catch (InterruptedException e) { \n            e.printStackTrace(); \n          } finally { \n            lock.unlock(); \n          } \n          return line; \n        }\n\n```", "```java\n        public synchronized void setPendingLines(boolean pendingLines) { \n          this.pendingLines = pendingLines; \n        }\n\n```", "```java\n        public synchronized boolean hasPendingLines() { \n          return pendingLines || buffer.size()>0; \n        }\n\n```", "```java\n        public class Producer implements Runnable {\n\n```", "```java\n        private FileMock mock; \n\n        private Buffer buffer;\n\n```", "```java\n        public Producer (FileMock mock, Buffer buffer){ \n          this.mock = mock; \n          this.buffer = buffer; \n        }\n\n```", "```java\n        @Override \n        public void run() { \n          buffer.setPendingLines(true); \n          while (mock.hasMoreLines()){ \n            String line = mock.getLine(); \n            buffer.insert(line); \n          } \n          buffer.setPendingLines(false); \n        }\n\n```", "```java\n        public class Consumer implements Runnable {\n\n```", "```java\n        private Buffer buffer; \n\n        public Consumer (Buffer buffer) { \n          this.buffer = buffer; \n        }\n\n```", "```java\n        @Override   \n        public void run() { \n          while (buffer.hasPendingLines()) { \n            String line = buffer.get(); \n            processLine(line); \n          } \n        }\n\n```", "```java\n        private void processLine(String line) { \n          try { \n            Random random = new Random(); \n            Thread.sleep(random.nextInt(100)); \n          } catch (InterruptedException e) { \n            e.printStackTrace(); \n          } \n        }\n\n```", "```java\n        public class Main { \n\n          public static void main(String[] args) {\n\n```", "```java\n        FileMock mock = new FileMock(100, 10);\n\n```", "```java\n        Buffer buffer = new Buffer(20);\n\n```", "```java\n        Producer producer = new Producer(mock, buffer); \n        Thread producerThread = new Thread(producer,\"Producer\");\n\n```", "```java\n        Consumer consumers[] = new Consumer[3]; \n        Thread consumersThreads[] = new Thread[3]; \n\n        for (int i=0; i<3; i++){ \n          consumers[i] = new Consumer(buffer); \n          consumersThreads[i] = new Thread(consumers[i],\"Consumer \"+i); \n        }\n\n```", "```java\n        producerThread.start(); \n        for (int i = 0; i< 3; i++){ \n          consumersThreads[i].start(); \n        }\n\n```", "```java\n         public class Writer implements Runnable { \n\n          private final Position position; \n          private final StampedLock lock; \n\n          public Writer (Position position, StampedLock lock) { \n            this.position=position; \n            this.lock=lock; \n          }\n\n```", "```java\n        @Override \n        public void run() { \n\n          for (int i=0; i<10; i++) { \n            long stamp = lock.writeLock(); \n\n            try { \n              System.out.printf(\"Writer: Lock acquired %d\\n\",stamp); \n              position.setX(position.getX()+1); \n              position.setY(position.getY()+1); \n              TimeUnit.SECONDS.sleep(1); \n            } catch (InterruptedException e) { \n              e.printStackTrace(); \n            } finally { \n              lock.unlockWrite(stamp); \n              System.out.printf(\"Writer: Lock released %d\\n\",stamp); \n            } \n\n            try { \n              TimeUnit.SECONDS.sleep(1); \n            } catch (InterruptedException e) { \n              e.printStackTrace(); \n            } \n          } \n\n        }\n\n```", "```java\n        public class Reader implements Runnable { \n\n          private final Position position; \n          private final StampedLock lock; \n\n          public Reader (Position position, StampedLock lock) { \n            this.position=position; \n            this.lock=lock; \n          }\n\n```", "```java\n        @Override \n        public void run() { \n          for (int i=0; i<50; i++) { \n            long stamp=lock.readLock(); \n            try { \n              System.out.printf(\"Reader: %d - (%d,%d)\\n\", stamp,\n                                position.getX(), position.getY()); \n              TimeUnit.MILLISECONDS.sleep(200); \n            } catch (InterruptedException e) { \n              e.printStackTrace(); \n            } finally { \n              lock.unlockRead(stamp); \n              System.out.printf(\"Reader: %d - Lock released\\n\", stamp); \n            } \n          } \n        }\n\n```", "```java\n        public class OptimisticReader implements Runnable { \n\n          private final Position position; \n          private final StampedLock lock; \n\n          public OptimisticReader (Position position, StampedLock lock) { \n            this.position=position; \n            this.lock=lock; \n          }\n\n```", "```java\n        @Override \n        public void run() { \n          long stamp; \n          for (int i=0; i<100; i++) { \n            try { \n              stamp=lock.tryOptimisticRead(); \n              int x = position.getX(); \n              int y = position.getY(); \n              if (lock.validate(stamp)) { \n                System.out.printf(\"OptmisticReader: %d - (%d,%d)\\n\",\n                                  stamp,x, y); \n              } else { \n                System.out.printf(\"OptmisticReader: %d - Not Free\\n\",\n                                  stamp); \n              } \n              TimeUnit.MILLISECONDS.sleep(200); \n            } catch (InterruptedException e) { \n              e.printStackTrace(); \n            } \n          } \n        }\n\n```", "```java\n        public class Main { \n\n          public static void main(String[] args) { \n\n            Position position=new Position(); \n            StampedLock lock=new StampedLock(); \n\n            Thread threadWriter=new Thread(new Writer(position,lock)); \n            Thread threadReader=new Thread(new Reader(position, lock)); \n            Thread threadOptReader=new Thread(new OptimisticReader\n                                               (position, lock)); \n\n            threadWriter.start(); \n            threadReader.start(); \n            threadOptReader.start(); \n\n            try { \n              threadWriter.join(); \n              threadReader.join(); \n              threadOptReader.join(); \n            } catch (InterruptedException e) { \n              e.printStackTrace(); \n            } \n          } \n        }\n\n```"]