["```java\nplugins {\n    id \"io.spring.dependency-management\" version \"1.0.1.RELEASE\"\n    id \"org.springframework.boot\" version \"2.0.3.RELEASE\"\n}\napply plugin: 'java'\n// Rest removed for Brevity\n\ndependencies {\n        compile 'org.springframework.boot:spring-boot-starter-webflux'\n        compile 'org.springframework:spring-context-support'\n        compile group: 'org.freemarker', name: 'freemarker', version: '2.3.28'\n}\n```", "```java\n@EnableWebFlux\n@Configuration\npublic class WebfluxConfig implements WebFluxConfigurer {\n\n   @Override\n    public void configureViewResolvers(ViewResolverRegistry registry) {\n        registry.freeMarker();\n   }\n\n    @Bean\n    public FreeMarkerConfigurer freeMarkerConfigurer() {\n        FreeMarkerConfigurer configurer = new FreeMarkerConfigurer();\n        configurer.setTemplateLoaderPath(\"classpath:/freemarker/\");\n        return configurer;\n    }\n}\n```", "```java\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>Reactor Sample</title>\n        <meta charset=\"UTF-8\"/>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n    </head>\n    <body>\n        <h1>Fibonacci Numbers</h1>\n        <ul style=\"list-style-type:circle\">\n        <#list series as number>\n          <li>${number}</li>\n        </#list>\n        </ul>\n    </body>\n</html>\n```", "```java\n@Controller\npublic class ReactiveController {\n\n// Rest removed for Brevity\n@GetMapping(\"/numbers\")\n    public String handleSeries(Model model) {\n        Flux<Long> fibonacciGenerator = Flux.generate(() -> Tuples.<Long,\n                Long>of(0L, 1L), (state, sink) -> {\n            if (state.getT1() < 0)\n                sink.complete();\n            else\n                sink.next(state.getT1());\n            return Tuples.of(state.getT2(), state.getT1() + state.getT2());\n        });\n        model.addAttribute(\"series\", fibonacciGenerator);\n        return \"numbers\";\n    }\n}\n```", "```java\n@Configuration\nclass FibonacciConfigurer {\n\n    // Rest removed  For Brevity\n\n     @Bean\n     RouterFunction<ServerResponse> fibonacciEndpoint() {\n         Flux<Long> fibonacciGenerator = Flux.generate(() -> Tuples.<Long,\n                 Long>of(0L, 1L), (state, sink) -> {\n             if (state.getT1() < 0)\n                 sink.complete();\n             else\n                 sink.next(state.getT1());\n             return Tuples.of(state.getT2(), state.getT1() + state.getT2());\n         });\n         Map<String, Flux> model = new HashMap<>();\n         model.put(\"series\",fibonacciGenerator);\n         RouterFunction<ServerResponse> fibonacciRoute =\n                 RouterFunctions.route(RequestPredicates.path(\"/fibonacci\"),\n                         request -> ServerResponse.ok().render(\"numbers\",model));\n         return fibonacciRoute;\n     }\n```", "```java\nplugins {\n    id \"io.spring.dependency-management\" version \"1.0.1.RELEASE\"\n    id \"org.springframework.boot\" version \"2.0.3.RELEASE\"\n}\napply plugin: 'java'\n// Rest removed for Brevity\n\ndependencies {\n        compile 'org.springframework.boot:spring-boot-starter-webflux'\n        compile \"org.springframework.boot:spring-boot-starter-thymeleaf\"\n}\n```", "```java\n@EnableWebFlux\n@Configuration\npublic class WebfluxConfig implements WebFluxConfigurer {\n    private final ISpringWebFluxTemplateEngine templateEngine;\n\n    public WebfluxConfig(ISpringWebFluxTemplateEngine templateEngine) {\n        this.templateEngine = templateEngine;\n    }\n\n    @Override\n    public void configureViewResolvers(ViewResolverRegistry registry) {\n        registry.viewResolver(thymeleafViewResolver());\n   }\n\n    @Bean\n    public ThymeleafReactiveViewResolver thymeleafViewResolver() {\n        final ThymeleafReactiveViewResolver viewResolver = new ThymeleafReactiveViewResolver();\n        viewResolver.setTemplateEngine(templateEngine);\n        return viewResolver;\n    }\n\n}\n```", "```java\n<!DOCTYPE html>\n\n<html >\n    <head>\n        <title>Reactor Sample</title>\n        <meta charset=\"UTF-8\"/>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n    </head>\n    <body>\n        <section class=\"container\">\n            <ul>\n                <li th:each=\"item : ${series}\" th:text=\"${item}\"></li>\n            </ul>\n        </section>\n    </body>\n</html>\n```", "```java\n@Controller\npublic class ReactiveController {\n\n// Rest removed for Brevity\n@GetMapping(\"/numbers\")\n    public String handleSeries(Model model) {\n        Flux<Long> fibonacciGenerator = Flux.generate(() -> Tuples.<Long,\n                Long>of(0L, 1L), (state, sink) -> {\n            if (state.getT1() < 0)\n                sink.complete();\n            else\n                sink.next(state.getT1());\n            return Tuples.of(state.getT2(), state.getT1() + state.getT2());\n        });\n        model.addAttribute(\"series\", fibonacciGenerator);\n        return \"numbers\";\n    }\n}\n```", "```java\n@Configuration\nclass FibonacciConfigurer {\n\n    // Rest removed  For Brevity\n\n     @Bean\n     RouterFunction<ServerResponse> fibonacciEndpoint() {\n         Flux<Long> fibonacciGenerator = Flux.generate(() -> Tuples.<Long,\n                 Long>of(0L, 1L), (state, sink) -> {\n             if (state.getT1() < 0)\n                 sink.complete();\n             else\n                 sink.next(state.getT1());\n             return Tuples.of(state.getT2(), state.getT1() + state.getT2());\n         });\n         Map<String, Flux> model = new HashMap<>();\n         model.put(\"series\",fibonacciGenerator);\n         RouterFunction<ServerResponse> fibonacciRoute =\n                 RouterFunctions.route(RequestPredicates.path(\"/fibonacci\"),\n                         request -> ServerResponse.ok().render(\"numbers\",model));\n         return fibonacciRoute;\n     }\n```", "```java\nplugins {\n    id \"io.spring.dependency-management\" version \"1.0.1.RELEASE\"\n    id \"org.springframework.boot\" version \"2.0.3.RELEASE\"\n}\napply plugin: 'java'\n// Rest removed for Brevity\n\ndependencies {\n        compile 'org.springframework.boot:spring-boot-starter-webflux'\n}\n```", "```java\n@EnableWebFlux\n@Configuration\npublic class WebfluxConfig implements WebFluxConfigurer {\n\n   @Override\n    public void configureViewResolvers(ViewResolverRegistry registry) {\n        registry.scriptTemplate();\n   }\n\n    @Bean\n    public ScriptTemplateConfigurer scrptTemplateConfigurer() {\n        ScriptTemplateConfigurer configurer = new ScriptTemplateConfigurer();\n        configurer.setEngineName(\"nashorn\");\n        configurer.setScripts(\"mustache.js\");\n        configurer.setRenderObject(\"Mustache\");\n        configurer.setResourceLoaderPath(\"classpath:/mustache/\");\n        configurer.setRenderFunction(\"render\");\n        return configurer;\n    }\n\n}\n```", "```java\n<!DOCTYPE html>\n\n<html>\n    <head>\n        <title>Reactor Sample</title>\n        <meta charset=\"UTF-8\"/>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n    </head>\n    <body>\n        <section class=\"container\">\n            {{#series}}\n            <div class=\"row\">\n                {{.}}\n            </div>\n            {{/series}}\n        </section>\n    </body>\n</html>\n```", "```java\n@Controller\npublic class ReactiveController {\n\n// Rest removed for Brevity\n@GetMapping(\"/numbers\")\n    public String handleSeries(Model model) {\n        Flux<Long> fibonacciGenerator = Flux.generate(() -> Tuples.<Long,\n                Long>of(0L, 1L), (state, sink) -> {\n            if (state.getT1() < 0)\n                sink.complete();\n            else\n                sink.next(state.getT1());\n            return Tuples.of(state.getT2(), state.getT1() + state.getT2());\n        });\n        model.addAttribute(\"series\", fibonacciGenerator);\n        return \"numbers.html\";\n    }\n}\n```", "```java\n@Configuration\nclass FibonacciConfigurer {\n\n    // Rest removed  For Brevity\n\n     @Bean\n     RouterFunction<ServerResponse> fibonacciEndpoint() {\n         Flux<Long> fibonacciGenerator = Flux.generate(() -> Tuples.<Long,\n                 Long>of(0L, 1L), (state, sink) -> {\n             if (state.getT1() < 0)\n                 sink.complete();\n             else\n                 sink.next(state.getT1());\n             return Tuples.of(state.getT2(), state.getT1() + state.getT2());\n         });\n         Map<String, Flux> model = new HashMap<>();\n         model.put(\"series\",fibonacciGenerator);\n         RouterFunction<ServerResponse> fibonacciRoute =\n                 RouterFunctions.route(RequestPredicates.path(\"/fibonacci\"),\n                         request -> ServerResponse.ok().render(\"numbers.html\",model));\n         return fibonacciRoute;\n     }\n```", "```java\npublic class WebfluxConfig implements WebFluxConfigurer {\n    //Rest Removed for Brevity\n    @Override\n    public void addResourceHandlers(ResourceHandlerRegistry registry) {\n        registry.addResourceHandler(\"/resources/**\")\n                .addResourceLocations(\"classpath:/static/\");\n    }\n}\n```", "```java\n<html >\n    <head>\n        <title>Reactor Sample</title>\n        <meta charset=\"UTF-8\"/>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n        <link rel=\"stylesheet\" href=\"/resources/bootstrap.min.css\">\n    </head>\n    <body>\n        <section class=\"container\">\n            <ul class=\"list-group\">\n                <li th:each=\"item : ${series}\" th:text=\"${item}\" class=\"list-group-item\"></li>\n            </ul>\n        </section>\n    </body>\n</html>\n```", "```java\npublic void readFibonacciNumbers() {\n  WebClient client = WebClient.create(\"http://localhost:8080\");\n  Flux<Long> result = client.get()\n          .uri(\"/fibonacci\").accept(MediaType.APPLICATION_JSON)\n          .retrieve()\n          .bodyToFlux(Long.class);\n  result.subscribe( x-> System.out.println(x));\n}\n```", "```java\npublic void readFibonacciNumbersUsingExchange() {\n        WebClient client = WebClient.create(\"http://localhost:8080\");\n        Flux<Long> result = client.get()\n                .uri(\"/fibonacci\").accept(MediaType.APPLICATION_JSON)\n                .exchange()\n                .flatMapMany(response -> response.bodyToFlux(Long.class));\n        result.subscribe( x-> System.out.println(x));\n    }\n```"]