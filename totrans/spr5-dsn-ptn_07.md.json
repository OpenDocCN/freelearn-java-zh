["```java\n        public List<Account> findByAccountNumber(Long accountNumber) { \n          List<Account> accountList = new ArrayList<Account>(); \n          Connection conn = null; \n          String sql = \"select account_name,\n          account_balance from ACCOUNT where account_number=?\"; \n          try { \n            DataSource dataSource = DataSourceUtils.getDataSource(); \n            conn = dataSource.getConnection(); \n            PreparedStatement ps = conn.prepareStatement(sql); \n            ps.setLong(1, accountNumber); \n            ResultSet rs = ps.executeQuery(); \n            while (rs.next()) { \n              accountList.add(new Account(rs.getString(\n                \"account_name\"), ...)); \n            } \n          } catch (SQLException e) { /* what to be handle here? */ } \n          finally { \n            try { \n              conn.close(); \n            } catch (SQLException e) { /* what to be handle here ?*/ } \n          } \n          return accountList; \n        } \n```", "```java\n        int count = jdbcTemplate.queryForObject(\"SELECT COUNT(*)\n         FROM ACCOUNT\", Integer.class); \n\n```", "```java\n        List<Account> results = jdbcTemplate.query(someSql,\n         new RowMapper<Account>() { \n           public Account mapRow(ResultSet rs, int row) throws \n            SQLException { \n              // map the current row to an Account object \n            } \n        }); \n```", "```java\n    DriverManagerDataSource dataSource = new DriverManagerDataSource(); \n    dataSource.setDriverClassName(\"org.h2.Driver\"); \n    dataSource.setUrl(\"jdbc:h2:tcp://localhost/bankDB\"); \n    dataSource.setUsername(\"root\"); \n    dataSource.setPassword(\"root\"); \n```", "```java\n    <bean id=\"dataSource\"\n     class=\"org.springframework.jdbc.datasource\n     .DriverManagerDataSource\"> \n     <property name=\"driverClassName\" value=\"org.h2.Driver\"/> \n     <property name=\"url\" value=\"jdbc:h2:tcp://localhost/bankDB\"/> \n     <property name=\"username\" value=\"root\"/> \n     <property name=\"password\" value=\"root\"/> \n    </bean> \n```", "```java\n    <jee:jndi-lookup id=\"dataSource\"\n     jndi-name=\"java:comp/env/jdbc/datasource\" /> \n```", "```java\n    @Bean \n    public JndiObjectFactoryBean dataSource() { \n      JndiObjectFactoryBean jndiObject = new JndiObjectFactoryBean(); \n      jndiObject.setJndiName(\"jdbc/datasource\"); \n      jndiObject.setResourceRef(true); \n      jndiObject.setProxyInterface(javax.sql.DataSource.class); \n      return jndiObject; \n    } \n```", "```java\n    <bean id=\"dataSource\" \n      class=\"org.apache.commons.dbcp.BasicDataSource\"\n       destroy-method=\"close\"> \n      <property name=\"driverClassName\" value=\"org.h2.Driver\"/> \n      <property name=\"url\" value=\"jdbc:h2:tcp://localhost/bankDB\"/> \n      <property name=\"username\" value=\"root\"/> \n      <property name=\"password\" value=\"root\"/> \n      <property name=\"initialSize\" value=\"5\"/> \n      <property name=\"maxActive\" value=\"10\"/> \n    </bean> \n```", "```java\n    @Bean \n    public BasicDataSource dataSource() { \n      BasicDataSource dataSource = new BasicDataSource(); \n      dataSource.setDriverClassName(\"org.h2.Driver\"); \n      dataSource.setUrl(\"jdbc:h2:tcp://localhost/bankDB\"); \n      dataSource.setUsername(\"root\"); \n      dataSource.setPassword(\"root\"); \n      dataSource.setInitialSize(5); \n      dataSource.setMaxActive(10); \n      return dataSource; \n    } \n```", "```java\n    <jdbc:embedded-database id=\"dataSource\" type=\"H2\"> \n     <jdbc:script location=\"schema.sql\"/> \n     <jdbc:script location=\"data.sql\"/> \n    </jdbc:embedded-database> \n```", "```java\n    @Bean \n    public DataSource dataSource(){ \n      EmbeddedDatabaseBuilder builder =\n        new EmbeddedDatabaseBuilder().setType(EmbeddedDatabaseType.H2); \n      builder.addScript(\"schema.sql\"); \n      builder.addScript(\"data.sql\"); \n      return builder.build(); \n    } \n```", "```java\n    package com.packt.patterninspring.chapter7.bankapp.dao; \n    public interface AccountDao { \n      Integer totalAccountsByBranch(String branchName); \n    } \n```", "```java\n    package com.packt.patterninspring.chapter7.bankapp.dao; \n\n    import org.springframework.jdbc.core.support.JdbcDaoSupport; \n    public class AccountDaoImpl extends JdbcDaoSupport implements\n     AccountDao { \n       @Override \n       public Integer totalAccountsByBranch(String branchName) { \n         String sql = \"SELECT count(*) FROM Account WHERE branchName =\n          \"+branchName; \n         return this.getJdbcTemplate().queryForObject(sql,\n          Integer.class); \n       } \n    } \n```", "```java\n    JdbcTemplate template = new JdbcTemplate(dataSource); \n```", "```java\n    @Bean \n    public JdbcTemplate jdbcTemplate(DataSource dataSource) { \n      return new JdbcTemplate(dataSource); \n    } \n```", "```java\n    package com.packt.patterninspring.chapter7.bankapp.repository; \n\n    import java.sql.ResultSet; \n    import java.sql.SQLException; \n\n    import javax.sql.DataSource; \n\n    import org.springframework.jdbc.core.JdbcTemplate; \n    import org.springframework.jdbc.core.RowMapper; \n    import org.springframework.stereotype.Repository; \n\n    import com.packt.patterninspring.chapter7.bankapp.model.Account; \n    @Repository \n    public class JdbcAccountRepository implements AccountRepository{ \n\n      JdbcTemplate jdbcTemplate; \n\n      public JdbcAccountRepository(DataSource dataSource) { \n        super(); \n        this.jdbcTemplate = new JdbcTemplate(dataSource); \n      } \n\n      @Override \n      public Account findAccountById(Long id){ \n        String sql = \"SELECT * FROM Account WHERE id = \"+id; \n        return jdbcTemplate.queryForObject(sql,\n         new RowMapper<Account>(){ \n           @Override \n           public Account mapRow(ResultSet rs, int arg1) throws\n           SQLException { \n             Account account = new Account(id); \n             account.setName(rs.getString(\"name\")); \n             account.setBalance(new Long(rs.getInt(\"balance\"))); \n             return account; \n           } \n         }); \n      } \n    } \n```", "```java\n      public interface RowMapper<T> { \n        T mapRow(ResultSet rs, int rowNum) \n        throws SQLException; \n      } \n```", "```java\n    package com.packt.patterninspring.chapter7.bankapp.rowmapper; \n\n    import java.sql.ResultSet; \n    import java.sql.SQLException; \n    import org.springframework.jdbc.core.RowMapper; \n    import com.packt.patterninspring.chapter7.bankapp.model.Account; \n    public class AccountRowMapper implements RowMapper<Account>{ \n      @Override \n      public Account mapRow(ResultSet rs, int id) throws SQLException { \n        Account account = new Account(); \n        account.setId(new Long(rs.getInt(\"id\"))); \n        account.setName(rs.getString(\"name\")); \n        account.setBalance(new Long(rs.getInt(\"balance\"))); \n        return account; \n      } \n    } \n```", "```java\n    public Account findAccountById(Long id){ \n      String sql = \"SELECT * FROM Account WHERE id = \"+id; \n      return jdbcTemplate.queryForObject(sql, new AccountRowMapper()); \n    } \n```", "```java\n    public List<Account> findAccountById(Long id){ \n      String sql = \"SELECT * FROM Account \"; \n      return jdbcTemplate.queryForList(sql, new AccountRowMapper()); \n    } \n```", "```java\n    public interface RowCallbackHandler { \n      void processRow(ResultSet rs) throws SQLException; \n    } \n```", "```java\n    package com.packt.patterninspring.chapter7.bankapp.callbacks; \n    import java.sql.ResultSet; \n    import java.sql.SQLException; \n    import org.springframework.jdbc.core.RowCallbackHandler; \n    public class AccountReportWriter implements RowCallbackHandler { \n      public void processRow(ResultSet resultSet) throws SQLException { \n        // parse current row from ResultSet and stream to output \n        //write flat file, XML \n      } \n    } \n```", "```java\n    @Override \n    public void generateReport(Writer out, String branchName) { \n      String sql = \"SELECT * FROM Account WHERE branchName = \"+\n       branchName; \n      jdbcTemplate.query(sql, new AccountReportWriter()); \n    } \n```", "```java\n    public interface ResultSetExtractor<T> { \n      T extractData(ResultSet rs) throws SQLException,\n      DataAccessException; \n    } \n```", "```java\n    package com.packt.patterninspring.chapter7.bankapp.callbacks; \n\n    import java.sql.ResultSet; \n    import java.sql.SQLException; \n    import java.util.ArrayList; \n    import java.util.List; \n\n    import org.springframework.dao.DataAccessException; \n    import org.springframework.jdbc.core.ResultSetExtractor; \n\n    import com.packt.patterninspring.chapter7.bankapp.model.Account; \n\n    public class AccountExtractor implements\n     ResultSetExtractor<List<Account>> { \n       @Override \n       public List<Account> extractData(ResultSet resultSet) throws\n        SQLException, DataAccessException { \n          List<Account> extractedAccounts = null; \n          Account account = null; \n          while (resultSet.next()) { \n            if (extractedAccounts == null) { \n              extractedAccounts = new ArrayList<>(); \n              account = new Account(resultSet.getLong(\"ID\"),\n               resultSet.getString(\"NAME\"), ...); \n            } \n            extractedAccounts.add(account); \n          } \n          return extractedAccounts; \n       } \n    } \n```", "```java\n    public List<Account> extractAccounts() { \n      String sql = \"SELECT * FROM Account\"; \n      return jdbcTemplate.query(sql, new AccountExtractor()); \n    } \n```", "```java\n    @Repository \n    public class JdbcAccountRepository implements AccountRepository{ \n      JdbcTemplate jdbcTemplate; \n\n      public JdbcAccountRepository(DataSource dataSource) { \n        super(); \n        this.jdbcTemplate = new JdbcTemplate(dataSource); \n      } \n      //... \n    } \n    Let's see some best practices to configure a database and write\n    the code for the DAO layer: \n```", "```java\n                  Connection.setAutoCommit(false); \n```"]