- en: Chapter 4. Building OpenJDK 8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Working with GNU Autoconf
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building OpenJDK 8 on Ubuntu Linux 12.04 LTS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using ccache to speed up the OpenJDK 8 build process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building OpenJDK 8 on Mac OS X
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building OpenJDK 8 on Windows 7 SP1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Java 8 specification brings a lot of innovations to the Java platform. Besides
    new language features such as functional interfaces and Lamda expression support,
    and library features such as streams and a new date/time API, OpenJDK 8 has a
    new build system. As this chapter is about building OpenJDK, we will explore the
    last innovation in depth.
  prefs: []
  type: TYPE_NORMAL
- en: For a long time, the Sun Java and OpenJDK build system grew around the release
    process. Requirements from the release engineers always came before the developers'
    requirements, and developers' requirements for the build process differ greatly
    from release ones. For the release preparation, the build process must be stable.
    Release builds are usually built from scratch, they always include the whole project
    and speed, and environment configuration complexities are not issues for them.
    On the contrary, partial, incremental, and fast as possible builds are required
    as air for the development. Also, build scripts must be as clean and manageable
    as possible to allow easy changes and fine tuning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Up to the time when OpenJDK 7 was released, the build process had all the following
    *misfeatures* of the huge cross-platform project, listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Complex environment setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No reliable incremental builds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Broken support for parallel builds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No support for compilation cache
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unreasonably slow builds in some parts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Different types of build scripts (some for GNU, some for Apache Ant)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implicit compilation of Java sources with limited source list selection abilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Too-strict checks for the environment (required for release, but encumbering
    in the non-standard environment)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Drops* of additional binary components'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dependency on specific versions of build tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No support for cross-compilation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Public access to the build caused by the appearance of the OpenJDK project triggered
    the evolution of the build system to become more developer and "casual builder"
    friendly. In the timeline of OpenJDK 7, the build process has undergone some cleanup,
    the builds became easier but fundamental issues stayed the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'At last, a huge effort was made during the OpenJDK 8 development. The build
    system was completely rewritten, with major parts of it rewritten from scratch.
    Besides the cleanup and restructuring of the Makefiles and the removal of Apache
    Ant, the main problems were addressed: speed, multicore support, partial and incremental
    builds, cross–compilation, and a much easier environment setup.'
  prefs: []
  type: TYPE_NORMAL
- en: The latter improvement was largely caused by the introduction of the prebuild
    step that prepares the project for the current environment. This build configuration
    step is performed using the GNU Autoconf build system. We will explore it more
    closely in the following recipe.
  prefs: []
  type: TYPE_NORMAL
- en: OpenJDK 8 is supported on Linux, Windows, Mac OS X, and Solaris operating systems.
    Only Windows, Linux, and Mac OS X versions will be discussed further. On both
    Linux and Windows operating systems, x86 and x86_64 architectures are supported.
    On Mac OS X, only x86_64 is supported.
  prefs: []
  type: TYPE_NORMAL
- en: Processor architecture configuration is changed in OpenJDK 8\. Previously the
    x86 architecture was named i586 and x86_64 was named amd64\. But now the x86 and
    x86_64 names are used as is. Also, due to the cross-compilation support, x86 versions
    can be built on x86_64 operating systems with minor configuration changes. So
    in this chapter, we will focus on x86_64 and will mention x86 builds where required.
  prefs: []
  type: TYPE_NORMAL
- en: Working with GNU Autoconf
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**GNU Autoconf**, or simply the GNU build system, is a suite of build tools
    designed to assist in making source code packages portable across multiple Unix-like
    systems.'
  prefs: []
  type: TYPE_NORMAL
- en: Autoconf contains multiple build-related tools and generally acts as a Makefile
    generator. Makefile templates are processed in the configure build step using
    environment information and configuration options specified by the user.
  prefs: []
  type: TYPE_NORMAL
- en: The Autoconf system is quite complex and there exists some controversy about
    its usage in modern projects. For some projects it may be too old, too complex,
    and too directed towards Unix-like systems compared to the cost of other platforms.
    But for OpenJDK, the highly cross-platform project that already heavily relies
    on Unix-like tools, autotool adoption for the configure build step is well justified.
  prefs: []
  type: TYPE_NORMAL
- en: The Autoconf system uses GNU make for the actual build step, but in contrast
    to the make tool, the whole Autoconf package is less portable, and a particular
    build setup may have restrictions on required versions of the Autoconf packages.
    Fortunately, this burden can be moved from developers to build system engineers.
    For the build configuration step, Autoconf generates a standalone shell script.
    Such a script, usually named `configure`, can not only be used without other build
    system tools, but also run in limited Unix-like environments such as Cygwin on
    the Windows platform.
  prefs: []
  type: TYPE_NORMAL
- en: In OpenJDK, the `configure` script is prepared beforehand and added to the source
    code tarball, so the build process does not require any of the autotools' build
    tools besides GNU make.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will explore the OpenJDK 8 build configuration with different
    options.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, you will need an operating system with a Unix-like environment:
    Linux, Mac OS X, or Windows with Cygwin installed. Please see the *Installing
    Cygwin for Windows builds* recipe from [Chapter 2](ch02.html "Chapter 2. Building
    OpenJDK 6"), *Building OpenJDK 6* about installing Cygwin.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following procedures will help us to configure the OpenJDK 8 build environment:'
  prefs: []
  type: TYPE_NORMAL
- en: Install the JDK 7 from Oracle or the prebuilt OpenJDK binaries.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download and decompress the official OpenJDK 8 source code archive (this archive
    was not available at the time of writing this book).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the build configuration script with the `--help` option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can now see the list of available configuration options. Let's try some
    of them.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Run the following command to directly specify the JDK to use as the boot JDK
    during the build:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command to take the default restrictions off the included
    cryptographic algorithm implementation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command to not generate debug symbols during the build and
    not include them in target distribution:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command to force bundle the FreeType libraries with OpenJDK
    on all platforms:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command to specify CA certificates to the `keystore` file.
    Please see the *Preparing CA certificates* recipe about preparing such a file
    in [Chapter 2](ch02.html "Chapter 2. Building OpenJDK 6"), *Building OpenJDK 6*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command to specify the milestone and build number for the
    build instead of the generated ones:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In OpenJDK, the configure script is not marked as executable by default due
    to the OpenJDK source repository policy. So `bash` is used explicitly to run the
    script in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: The `configure` script prepares the build configuration in the `build` directory.
    It performs a lot of checks and writes the environment-specific details, and the
    user provides options in the form of environment variables. These variables will
    be read automatically during the actual build.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: OpenJDK supports a lot of options; most of the options may be specified to configure
    the script simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following recipes in this chapter for actually building of OpenJDK 8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The official website of GNU Autoconf project at [http://www.gnu.org/software/autoconf/](http://www.gnu.org/software/autoconf/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The mailing list thread with a discussion about adopting Autoconf at [http://mail.openjdk.java.net/pipermail/build-infra-dev/2011-August/000030.html](http://mail.openjdk.java.net/pipermail/build-infra-dev/2011-August/000030.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building OpenJDK 8 Ubuntu Linux 12.04 LTS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe is similar to the recipe *Building OpenJDK 7 on Ubuntu Linux 12.04
    LTS* from [Chapter 3](ch03.html "Chapter 3. Building OpenJDK 7"), *Building OpenJDK
    7*.
  prefs: []
  type: TYPE_NORMAL
- en: The build process of OpenJDK relies heavily on Unix-like development tools.
    Linux-based operating systems usually have top notch support for such tools, so
    building OpenJDK on Linux (and on Mac OS X) can be simpler than on Windows. For
    major distributions such as Fedora or Ubuntu, the build toolchain and all the
    dependencies are already included in distributions as packages and can be installed
    easily.
  prefs: []
  type: TYPE_NORMAL
- en: Ubuntu 12.04 LTS was chosen for this book because it is one of the most popular
    Linux distributions. For readers running other operating systems, Ubuntu 12.04
    virtual images may be found online for the most popular virtualization tools like
    Oracle VirtualBox or VMware.
  prefs: []
  type: TYPE_NORMAL
- en: To build binaries for x86 and x86_64 architectures, corresponding versions of
    Ubuntu should be used. The build instructions are exactly the same for both architectures
    so they won't be mentioned further in this recipe. OpenJDK 8 supports cross-compilation,
    so the x86 version may be built on the x86_64 operating system. But such cross-compilation
    requires non-trivial library configurations and we will not use it in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: The minimum build environment that should produce the most compatible OpenJDK
    8 binaries on Linux is Oracle Linux 6.4 amd64 with GCC Version 4.7\. We will configure
    Ubuntu 12.04 to use GCC 4.7 to be close to the minimum build environment.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will need clean Ubuntu 12.04 (server or desktop version)
    running.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following procedures will help us to build OpenJDK 8:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the prepackaged binaries of OpenJDK 7:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the GCC toolchain and build dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add an additional packages repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the C and C++ compilers, Version 4.7:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go to the `/usr/bin` directory and set up default compiler-symbolic links:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Download and decompress the official OpenJDK 8 source code archive (this archive
    was not available at the time of writing this book)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the autotools configuration script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the build:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the build binaries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go back to the source''s root and build the compact profile''s images:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check the profiles images in the `build/linux-x86_64-normal-server-release/images`
    directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The prepackaged binaries of OpenJDK 7 are required because some of the build
    steps are run using the external Java runtime.
  prefs: []
  type: TYPE_NORMAL
- en: The `build-dep` command is used to install all the dependencies that are required
    to build the specified package. As Ubuntu packaged OpenJDK 6 is quite close to
    the official OpenJDK 6, this command will install almost all the required dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Ubuntu 12.04 does not have the GCC 4.7 compilers in a default packages repository,
    so additional repository configuration is required.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Default GCC 4.6 compilers also may be used to build OpenJDK 8.
  prefs: []
  type: TYPE_NORMAL
- en: OpenJDK 8 supports cross-compiling x86 binaries on a x86_64 host platform. But
    the `build-dep -a i386 openjdk-7` command to install all the required x86 dependencies
    won't work (some of the x86 dependencies are not installable on x86_64 OS) and
    manual dependencies installation may be non-trivial. It may be easier to build
    x86 binaries on a separate instance of x86 Ubuntu 12.04 using exactly the same
    steps from this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Working with GNU Autoconf* recipe from this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Preparing CA certificates* recipe from [Chapter 2](ch02.html "Chapter 2. Building
    OpenJDK 6"), *Building OpenJDK 6*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The official instructions about building OpenJDK 8 at [http://hg.openjdk.java.net/jdk8u/jdk8u/raw-file/2f40422f564b/README-builds.html](http://hg.openjdk.java.net/jdk8u/jdk8u/raw-file/2f40422f564b/README-builds.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unofficial instructions about building OpenJDK 8 packages for Linux distributions
    at [https://github.com/hgomez/obuildfactory/wiki/How-to-build-and-package-OpenJDK-8-on-Linux](https://github.com/hgomez/obuildfactory/wiki/How-to-build-and-package-OpenJDK-8-on-Linux)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using ccache to speed up the OpenJDK 8 build process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Besides the Java source code, the OpenJDK source repository contains a lot of
    native C and C++ source code. Native code compilation is much longer than Java
    and may take a lot of time. During development, the same code may be compiled
    multiple times with minor changes. Intermediate binary results for parts of the
    code may be completely equal between the compilations, but usually parts of the
    code are recompiled even if no changes are added in those parts. It is natural
    to expect a more clever approach to code recompiling from modern advanced compilation/linking
    toolchains.
  prefs: []
  type: TYPE_NORMAL
- en: The **ccache** tool provides such cleverness for native compilation. This tool
    caches the output of C/C++ compilation so that the next time, the same compilation
    can be avoided and the results can be taken from the cache. This can greatly speed
    up recompiling time. The detection is done by hashing different kinds of information
    that should be unique for the compilation, and then using the hash sum to identify
    the cached output.
  prefs: []
  type: TYPE_NORMAL
- en: OpenJDK 8 supported ccache on Linux and Mac OS X but did not support Windows
    at the time of writing this book.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will set up ccache for the OpenJDK 8 build on Ubuntu 12.04.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will need Ubuntu 12.04 (server or desktop version) set up
    to build OpenJDK 8 (please see the previous recipe).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following procedure will help us in enabling ccache:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the `ccache` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reconfigure the project, running the following command from the OpenJDK 8 source
    directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check this line in the `configure` script output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In OpenJDK 8, the `configure` script checks the cache availability and automatically
    enables its use during further builds.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For product-like builds when result binaries are going to be used in production,
    it may be safer to reconfigure the project disabling `ccache` with the `--disable-ccache`
    option.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The previous recipe *Building OpenJDK 8 on Ubuntu Linux 12.04 LTS* from this
    chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The official website of ccache at [http://ccache.samba.org/](http://ccache.samba.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building OpenJDK 8 on Mac OS X
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenJDK 8 supports Mac OS X platform as a first class citizen and building it
    (using a proper version of toolchain) is almost as easy as on Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Historically, Java had first class support on Mac OS X. JDK was based on the
    Sun code base but built by Apple and integrated finely into operating system environment.
    Up to Mac OS X 10.4 Tiger, graphical user interface applications written using
    the standard Swing toolkit had access to most of the Cocoa native interface features.
    Applications written in Java were felt to be very close to native ones, while
    still being cross-platform.
  prefs: []
  type: TYPE_NORMAL
- en: However, for the next releases, the level of Java support went down. Starting
    from Mac OS X 10.5 Leopard, newer Cocoa features became unsupported for Java.
    The release of Apple Java 6 was postponed (comparing to Sun releases for other
    platforms) for more than a year. Java 6 was released in December 2006 but was
    not available for Mac OS X users until April 2008\. Finally, in October 2010,
    Apple officially announced its decision to discontinue Java support. Apple Java
    6 is still being updated with security updates and may be installed on Mac OS
    X 10.9 Mavericks (the latest version at the time of writing this book) but no
    following Java versions will be released by Apple.
  prefs: []
  type: TYPE_NORMAL
- en: Third-party open source Java distributions do exist for Mac OS X. The most notable
    one is the SoyLatte X11-based port of the FreeBSD Java 1.6 patch set to Mac OS
    X Intel machines. SoyLatte predated OpenJDK, was licensed under the Java Research
    license and supported Java 6 builds. Now it is part of the OpenJDK BSD Port project.
  prefs: []
  type: TYPE_NORMAL
- en: Full support for Mac OS X on a par with other platforms was added in OpenJDK
    7 and was continued in OpenJDK 8.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will need clean Mac OS X 10.7.5 Lion (or any later version
    that supports Xcode 4) running.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following procedures will help us to build OpenJDK 8:'
  prefs: []
  type: TYPE_NORMAL
- en: Download Xcode 4.6.2 for Lion (April 15, 2013) from [https://developer.apple.com/xcode/](https://developer.apple.com/xcode/)
    (an Apple developer's account is required, registration is free) and install it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the Command Line Tools for Xcode, April 2013 (April 15, 2013) using
    the same download link as mentioned in the previous point, and install it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run this command from the terminal to set up the Command Line Tools:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Navigate to **Applications** | **Utilities** and run **X11.app** to set up the
    X-server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the JDK 7 Oracle distribution, or prebuilt OpenJDK binaries can be used.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download and decompress the official OpenJDK 8 source code archive (this archive
    is not available at the time of writing this book).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the autotools configuration script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the build:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the built binaries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Despite the Xcode Command Line Tools that are used for the main part of the
    native source, Xcode itself is also required to build the platform specific code.
  prefs: []
  type: TYPE_NORMAL
- en: OpenJDK on Mac OS X is moving from using the X11 server, but it is still required
    for Version 8 builds. Mac OS X 10.7 Lion has X11 preinstalled, it just needs to
    be run once to be configured for the build.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses the official Apple builds of GCC (and G++) Version 4.2 as compilers.
    After that version official Apple support for GCC was discontinued for licensing
    reasons. Clang—the open source compiler initially developed by Apple—is the default
    and preferred compiler in newer versions of Mac OS X.
  prefs: []
  type: TYPE_NORMAL
- en: Despite the initial developers' plans, OpenJDK 8 still requires GCC and cannot
    be built using Clang. This is the reason for using Version 4 of Xcode and not
    Version 5, which does not ship GCC at all. At the time of writing this book, Xcode
    5 and Clang support was being added to the OpenJDK 9 project. Such support may
    be backported to OpenJDK 8 later; if you want to build Version 8 with Clang, it
    is best to check the OpenJDK mailing lists for up-to-date information.
  prefs: []
  type: TYPE_NORMAL
- en: On Mac OS X 10.8 Mountain Lion, a 10.9 Mavericks X11 server should be installed
    separately using the XQuartz project.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Working with GNU Autoconf* recipe from this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Preparing CA certificates* recipe from [Chapter 2](ch02.html "Chapter 2. Building
    OpenJDK 6"), *Building OpenJDK 6*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Official instructions about building OpenJDK 8 at [http://hg.openjdk.java.net/jdk8u/jdk8u/raw-file/2f40422f564b/README-builds.html](http://hg.openjdk.java.net/jdk8u/jdk8u/raw-file/2f40422f564b/README-builds.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unofficial instructions about building OpenJDK 8 packages for Mac OS X at [https://github.com/hgomez/obuildfactory/wiki/Building-and-Packaging-OpenJDK8-for-OSX](https://github.com/hgomez/obuildfactory/wiki/Building-and-Packaging-OpenJDK8-for-OSX)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building OpenJDK 8 on Windows 7 SP1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The OpenJDK 8 build process on Windows platform included major improvements
    compared to Version 7\. Despite that, the build environment setup is still much
    more complex than on Linux and Mac OS X. Much of the complexity of the build comes
    from its usage of a Unix-like build environment through Cygwin tools.
  prefs: []
  type: TYPE_NORMAL
- en: The official compiler requirement for i586 builds is Microsoft Visual Studio
    C++ 2010 Professional Edition. The Express Edition of Visual Studio 2010 may also
    be used for the x86 build. For x86_64 builds, instead of Visual Studio 2010 Professional
    Edition, we will use the Microsoft Windows SDK Version 7.1 for Windows 7\. This
    SDK is available for free from the Microsoft website. It uses the same compiler
    as Visual Studio 2010 Express. It contains only the Command Line Tools (no GUI)
    but may be used as an external toolset from Visual Studio 2010 if GUI is desired.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we should have Windows 7 SP1 amd64 running with no antivirus
    software installed. Antivirus software is not allowed because it may interfere
    with Cygwin runtime.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following procedure will help us to build OpenJDK 8:'
  prefs: []
  type: TYPE_NORMAL
- en: Download Microsoft .NET Framework 4 from the Microsoft website and install it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the amd64 version of the Microsoft Windows SDK for Windows 7 (the `GRMSDKX_EN_DVD.iso`
    file) from the Microsoft website and install it to the default location. The `.NET
    Development` and `Common Utilities` components are not required.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download Visual Studio 2010 Express Edition from the Microsoft website and install
    it to the default location. Only the Visual C++ component is required.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Download and install the Microsoft DirectX 9.0 SDK (summer 2004) to the default
    installation path. Note that this distribution is not available any more on the
    Microsoft website. It may be downloaded from another place online, and the file
    details are as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Install or copy the preinstalled version of Cygwin to `c:\cygwin`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a `c:\path_prepend` directory and copy to it the `find.exe` and `sort.exe`
    files from the Cygwin installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the GNU make utility binary from the [http://www.cmake.org/](http://www.cmake.org/)
    website using [http://www.cmake.org/files/cygwin/make.exe-cygwin1.7](http://www.cmake.org/files/cygwin/make.exe-cygwin1.7),
    rename it to `make.exe`, and put it into the `c:\make` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the prebuilt FreeType libraries from the `openjdk-unofficial-builds
    GitHub` project (directory `7_64`) and put binaries into the `c:\freetype\lib`
    directory and header files into the `c:\freetype\include` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the OpenJDK 7 binaries or Oracle Java 7 into `c:\jdk7`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the official OpenJDK 8 source code archive (this archive was not available
    at the time of writing this book) and decompress it into the `c:\sources` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Write the following command into the `build.bat` text file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run `build.bat` from Windows Explorer. The `cmd.exe` window should appear with
    bash launched.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the bash Command Prompt run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Launch another Cygwin console and run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Wait for the build to finish.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following build binaries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Cygwin installation is covered in the recipe *Installing Cygwin for Windows
    builds* in [Chapter 2](ch02.html "Chapter 2. Building OpenJDK 6"), *Building OpenJDK
    6*. Directories in the root of disk C are used here for brevity. Generally, arbitrary
    paths consisting of ASCII letters or numbers without spaces can be used. Newer
    version of DirectX SDK also can be used.
  prefs: []
  type: TYPE_NORMAL
- en: Different GNU make versions may have different problems on Windows. This particular
    version from the cmake project was tested on different Windows versions and works
    fine.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe uses prebuilt FreeType 2.4.10 libraries from the `openjdk-unofficial-builds
    GitHub` project. FreeType may be built from sources using the same Windows SDK
    7.1 toolchain.
  prefs: []
  type: TYPE_NORMAL
- en: The `make` output will be redirected to the `make.log` file. The `2>&1` statement
    ensures that both `stdout` and `stderr` will be redirected.
  prefs: []
  type: TYPE_NORMAL
- en: The `tail -f` command allows us to watch the contents of the `make.log` file
    as they are written during the build process.
  prefs: []
  type: TYPE_NORMAL
- en: The `pause > nul` command added at the end of the batch file prevents the `cmd.exe`
    window from disappearing in the case of runtime errors.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `--with-target-bits=32` configure option can be used to build i586 binaries
    on the amd64 operating system. In this case, the x86 version of the FreeType libraries
    should be specified by the `--with-freetype` option and Express Edition of Visual
    Studio 2010 should be installed.
  prefs: []
  type: TYPE_NORMAL
- en: The `tee` command may be used instead of `>` and `tail` to write the build log
    to the file and console simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Working with GNU Autoconf* recipe from this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Preparing CA certificates* recipe from [Chapter 2](ch02.html "Chapter 2. Building
    OpenJDK 6"), *Building OpenJDK 6*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Installing Cygwin for Windows builds* recipe from [Chapter 2](ch02.html
    "Chapter 2. Building OpenJDK 6"), *Building OpenJDK 6*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Building 64-bit FreeType libraries for OpenJDK 7 on Windows* recipe from
    [Chapter 3](ch03.html "Chapter 3. Building OpenJDK 7"), *Building OpenJDK 7*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Official instructions about building OpenJDK 8 at [http://hg.openjdk.java.net/jdk8u/jdk8u/raw-file/2f40422f564b/README-builds.html](http://hg.openjdk.java.net/jdk8u/jdk8u/raw-file/2f40422f564b/README-builds.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
