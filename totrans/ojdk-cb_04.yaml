- en: Chapter 4. Building OpenJDK 8
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章：构建 OpenJDK 8
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Working with GNU Autoconf
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 GNU Autoconf
- en: Building OpenJDK 8 on Ubuntu Linux 12.04 LTS
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Ubuntu Linux 12.04 LTS 上构建 OpenJDK 8
- en: Using ccache to speed up the OpenJDK 8 build process
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 ccache 加速 OpenJDK 8 的构建过程
- en: Building OpenJDK 8 on Mac OS X
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Mac OS X 上构建 OpenJDK 8
- en: Building OpenJDK 8 on Windows 7 SP1
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Windows 7 SP1 上构建 OpenJDK 8
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: The Java 8 specification brings a lot of innovations to the Java platform. Besides
    new language features such as functional interfaces and Lamda expression support,
    and library features such as streams and a new date/time API, OpenJDK 8 has a
    new build system. As this chapter is about building OpenJDK, we will explore the
    last innovation in depth.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Java 8 规范为 Java 平台带来了许多创新。除了新的语言特性，如函数式接口和 Lambda 表达式支持，以及库特性，如流和新的日期/时间 API
    之外，OpenJDK 8 还有一个新的构建系统。由于本章是关于构建 OpenJDK 的，我们将深入探讨最后一个创新。
- en: For a long time, the Sun Java and OpenJDK build system grew around the release
    process. Requirements from the release engineers always came before the developers'
    requirements, and developers' requirements for the build process differ greatly
    from release ones. For the release preparation, the build process must be stable.
    Release builds are usually built from scratch, they always include the whole project
    and speed, and environment configuration complexities are not issues for them.
    On the contrary, partial, incremental, and fast as possible builds are required
    as air for the development. Also, build scripts must be as clean and manageable
    as possible to allow easy changes and fine tuning.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 很长一段时间里，Sun Java 和 OpenJDK 构建系统围绕着发布流程发展。发布工程师的需求总是优先于开发者的需求，并且开发者对构建过程的需求与发布需求大相径庭。对于发布准备，构建过程必须是稳定的。发布构建通常是从头开始构建的，它们总是包括整个项目，速度和环境配置的复杂性对他们来说不是问题。相反，需要部分、增量以及尽可能快的构建作为开发的生命线。此外，构建脚本必须尽可能干净和易于管理，以便于轻松更改和微调。
- en: 'Up to the time when OpenJDK 7 was released, the build process had all the following
    *misfeatures* of the huge cross-platform project, listed as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在 OpenJDK 7 发布之前，构建过程具有以下巨大的跨平台项目的所有以下*缺陷*，如下列出：
- en: Complex environment setup
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复杂的环境设置
- en: No reliable incremental builds
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有可靠的增量构建
- en: Broken support for parallel builds
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并行构建支持不完整
- en: No support for compilation cache
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不支持编译缓存
- en: Unreasonably slow builds in some parts
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在某些部分构建速度不合理
- en: Different types of build scripts (some for GNU, some for Apache Ant)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同类型的构建脚本（一些用于 GNU，一些用于 Apache Ant）
- en: Implicit compilation of Java sources with limited source list selection abilities
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有限的源列表选择能力下隐式编译 Java 源代码
- en: Too-strict checks for the environment (required for release, but encumbering
    in the non-standard environment)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对环境的检查过于严格（对于发布是必需的，但在非标准环境中则成为负担）
- en: '*Drops* of additional binary components'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*丢弃*额外的二进制组件'
- en: Dependency on specific versions of build tools
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖特定版本的构建工具
- en: No support for cross-compilation
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不支持交叉编译
- en: Public access to the build caused by the appearance of the OpenJDK project triggered
    the evolution of the build system to become more developer and "casual builder"
    friendly. In the timeline of OpenJDK 7, the build process has undergone some cleanup,
    the builds became easier but fundamental issues stayed the same.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 OpenJDK 项目的出现，公共访问构建导致构建系统变得更加适合开发者和“普通构建者”。在 OpenJDK 7 的时间线中，构建过程经历了一些清理，构建变得更加容易，但基本问题仍然相同。
- en: 'At last, a huge effort was made during the OpenJDK 8 development. The build
    system was completely rewritten, with major parts of it rewritten from scratch.
    Besides the cleanup and restructuring of the Makefiles and the removal of Apache
    Ant, the main problems were addressed: speed, multicore support, partial and incremental
    builds, cross–compilation, and a much easier environment setup.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在 OpenJDK 8 的开发过程中做出了巨大的努力。构建系统被完全重写，其中大部分是从头开始重写的。除了清理和重构 Makefiles 以及移除
    Apache Ant 之外，主要问题也得到了解决：速度、多核支持、部分和增量构建、交叉编译以及更简单的环境设置。
- en: The latter improvement was largely caused by the introduction of the prebuild
    step that prepares the project for the current environment. This build configuration
    step is performed using the GNU Autoconf build system. We will explore it more
    closely in the following recipe.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 后者的改进很大程度上是由于引入了预构建步骤，该步骤为当前环境准备项目。此构建配置步骤使用 GNU Autoconf 构建系统执行。我们将在下面的菜谱中更详细地探讨它。
- en: OpenJDK 8 is supported on Linux, Windows, Mac OS X, and Solaris operating systems.
    Only Windows, Linux, and Mac OS X versions will be discussed further. On both
    Linux and Windows operating systems, x86 and x86_64 architectures are supported.
    On Mac OS X, only x86_64 is supported.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: OpenJDK 8支持Linux、Windows、Mac OS X和Solaris操作系统。以下将进一步讨论Windows、Linux和Mac OS X版本。在Linux和Windows操作系统上，支持x86和x86_64架构。在Mac
    OS X上，仅支持x86_64。
- en: Processor architecture configuration is changed in OpenJDK 8\. Previously the
    x86 architecture was named i586 and x86_64 was named amd64\. But now the x86 and
    x86_64 names are used as is. Also, due to the cross-compilation support, x86 versions
    can be built on x86_64 operating systems with minor configuration changes. So
    in this chapter, we will focus on x86_64 and will mention x86 builds where required.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: OpenJDK 8中的处理器架构配置已更改。以前，x86架构被命名为i586，x86_64被命名为amd64。但现在x86和x86_64名称被直接使用。此外，由于交叉编译支持，x86版本可以在进行少量配置更改的x86_64操作系统上构建。因此，在本章中，我们将重点关注x86_64，并在需要时提及x86构建。
- en: Working with GNU Autoconf
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用GNU Autoconf
- en: '**GNU Autoconf**, or simply the GNU build system, is a suite of build tools
    designed to assist in making source code packages portable across multiple Unix-like
    systems.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**GNU Autoconf**，或简称为GNU构建系统，是一套构建工具，旨在帮助在不同类Unix系统之间使源代码包可移植。'
- en: Autoconf contains multiple build-related tools and generally acts as a Makefile
    generator. Makefile templates are processed in the configure build step using
    environment information and configuration options specified by the user.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Autoconf包含多个与构建相关的工具，通常充当Makefile生成器。Makefile模板在`configure`构建步骤中使用用户指定的环境信息和配置选项进行处理。
- en: The Autoconf system is quite complex and there exists some controversy about
    its usage in modern projects. For some projects it may be too old, too complex,
    and too directed towards Unix-like systems compared to the cost of other platforms.
    But for OpenJDK, the highly cross-platform project that already heavily relies
    on Unix-like tools, autotool adoption for the configure build step is well justified.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Autoconf系统相当复杂，关于其在现代项目中的使用存在一些争议。对于某些项目，它可能过于陈旧、过于复杂，并且与其他平台相比，过于倾向于类Unix系统。但对于OpenJDK这样的高度跨平台项目，它已经大量依赖于类Unix工具，因此在配置构建步骤中使用autotool是合理的。
- en: The Autoconf system uses GNU make for the actual build step, but in contrast
    to the make tool, the whole Autoconf package is less portable, and a particular
    build setup may have restrictions on required versions of the Autoconf packages.
    Fortunately, this burden can be moved from developers to build system engineers.
    For the build configuration step, Autoconf generates a standalone shell script.
    Such a script, usually named `configure`, can not only be used without other build
    system tools, but also run in limited Unix-like environments such as Cygwin on
    the Windows platform.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Autoconf系统使用GNU make进行实际的构建步骤，但与make工具相比，整个Autoconf包的可移植性较低，特定的构建设置可能对Autoconf包的版本有要求。幸运的是，这种负担可以从开发者转移到构建系统工程师。对于构建配置步骤，Autoconf生成一个独立的shell脚本。这样的脚本，通常命名为`configure`，不仅可以不使用其他构建系统工具而使用，还可以在有限的类Unix环境中运行，例如Windows平台上的Cygwin。
- en: In OpenJDK, the `configure` script is prepared beforehand and added to the source
    code tarball, so the build process does not require any of the autotools' build
    tools besides GNU make.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在OpenJDK中，`configure`脚本事先准备并添加到源代码tarball中，因此构建过程不需要除了GNU make之外的任何autotools构建工具。
- en: In this recipe, we will explore the OpenJDK 8 build configuration with different
    options.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将探索使用不同选项的OpenJDK 8构建配置。
- en: Getting ready
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For this recipe, you will need an operating system with a Unix-like environment:
    Linux, Mac OS X, or Windows with Cygwin installed. Please see the *Installing
    Cygwin for Windows builds* recipe from [Chapter 2](ch02.html "Chapter 2. Building
    OpenJDK 6"), *Building OpenJDK 6* about installing Cygwin.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，你需要一个具有类Unix环境的操作系统：Linux、Mac OS X，或者安装了Cygwin的Windows。请参阅[第2章](ch02.html
    "第2章。构建OpenJDK 6")中关于安装Cygwin的配方“*为Windows构建安装Cygwin”。
- en: How to do it...
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following procedures will help us to configure the OpenJDK 8 build environment:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助我们配置OpenJDK 8构建环境：
- en: Install the JDK 7 from Oracle or the prebuilt OpenJDK binaries.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Oracle安装JDK 7或预构建的OpenJDK二进制文件。
- en: Download and decompress the official OpenJDK 8 source code archive (this archive
    was not available at the time of writing this book).
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载并解压缩官方OpenJDK 8源代码存档（在撰写本书时，此存档不可用）。
- en: 'Run the build configuration script with the `--help` option:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `--help` 选项运行构建配置脚本：
- en: '[PRE0]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You can now see the list of available configuration options. Let's try some
    of them.
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您现在可以看到可用的配置选项列表。让我们尝试其中的一些。
- en: 'Run the following command to directly specify the JDK to use as the boot JDK
    during the build:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令以在构建期间直接指定要使用的 JDK 作为启动 JDK：
- en: '[PRE1]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Run the following command to take the default restrictions off the included
    cryptographic algorithm implementation:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令以取消包含的加密算法实现的默认限制：
- en: '[PRE2]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Run the following command to not generate debug symbols during the build and
    not include them in target distribution:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令以在构建过程中不生成调试符号，也不将它们包含在目标分发中：
- en: '[PRE3]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Run the following command to force bundle the FreeType libraries with OpenJDK
    on all platforms:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令以在所有平台上强制将 FreeType 库捆绑到 OpenJDK 中：
- en: '[PRE4]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Run the following command to specify CA certificates to the `keystore` file.
    Please see the *Preparing CA certificates* recipe about preparing such a file
    in [Chapter 2](ch02.html "Chapter 2. Building OpenJDK 6"), *Building OpenJDK 6*:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令以将 CA 证书指定给 `keystore` 文件。请参阅[第 2 章](ch02.html "第 2 章。构建 OpenJDK 6")中的*准备
    CA 证书*配方，*构建 OpenJDK 6*：
- en: '[PRE5]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Run the following command to specify the milestone and build number for the
    build instead of the generated ones:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令以指定构建的里程碑和构建号，而不是生成的那些：
- en: '[PRE6]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works...
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In OpenJDK, the configure script is not marked as executable by default due
    to the OpenJDK source repository policy. So `bash` is used explicitly to run the
    script in this recipe.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在 OpenJDK 中，由于 OpenJDK 源代码库策略，configure 脚本默认未标记为可执行。因此，在这个配方中，显式使用 `bash` 来运行脚本。
- en: The `configure` script prepares the build configuration in the `build` directory.
    It performs a lot of checks and writes the environment-specific details, and the
    user provides options in the form of environment variables. These variables will
    be read automatically during the actual build.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`configure` 脚本在 `build` 目录中准备构建配置。它执行许多检查并写入特定于环境的详细信息，用户以环境变量的形式提供选项。这些变量将在实际构建过程中自动读取。'
- en: There's more...
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: OpenJDK supports a lot of options; most of the options may be specified to configure
    the script simultaneously.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: OpenJDK 支持许多选项；大多数选项可以同时指定以配置脚本。
- en: See also
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The following recipes in this chapter for actually building of OpenJDK 8
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章以下配方用于实际构建 OpenJDK 8
- en: The official website of GNU Autoconf project at [http://www.gnu.org/software/autoconf/](http://www.gnu.org/software/autoconf/)
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GNU Autoconf 项目的官方网站[http://www.gnu.org/software/autoconf/](http://www.gnu.org/software/autoconf/)
- en: The mailing list thread with a discussion about adopting Autoconf at [http://mail.openjdk.java.net/pipermail/build-infra-dev/2011-August/000030.html](http://mail.openjdk.java.net/pipermail/build-infra-dev/2011-August/000030.html)
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于采用Autoconf的讨论的邮件列表线程，请参阅[http://mail.openjdk.java.net/pipermail/build-infra-dev/2011-August/000030.html](http://mail.openjdk.java.net/pipermail/build-infra-dev/2011-August/000030.html)
- en: Building OpenJDK 8 Ubuntu Linux 12.04 LTS
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建 OpenJDK 8 Ubuntu Linux 12.04 LTS
- en: This recipe is similar to the recipe *Building OpenJDK 7 on Ubuntu Linux 12.04
    LTS* from [Chapter 3](ch03.html "Chapter 3. Building OpenJDK 7"), *Building OpenJDK
    7*.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方与[第 3 章](ch03.html "第 3 章。构建 OpenJDK 7")中的*在 Ubuntu Linux 12.04 LTS 上构建 OpenJDK
    7*配方相似。
- en: The build process of OpenJDK relies heavily on Unix-like development tools.
    Linux-based operating systems usually have top notch support for such tools, so
    building OpenJDK on Linux (and on Mac OS X) can be simpler than on Windows. For
    major distributions such as Fedora or Ubuntu, the build toolchain and all the
    dependencies are already included in distributions as packages and can be installed
    easily.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: OpenJDK 的构建过程严重依赖于类 Unix 开发工具。基于 Linux 的操作系统通常对这些工具提供顶级支持，因此，在 Linux（以及 Mac
    OS X）上构建 OpenJDK 可能比在 Windows 上简单。对于像 Fedora 或 Ubuntu 这样的主要发行版，构建工具链和所有依赖项都已作为软件包包含在发行版中，可以轻松安装。
- en: Ubuntu 12.04 LTS was chosen for this book because it is one of the most popular
    Linux distributions. For readers running other operating systems, Ubuntu 12.04
    virtual images may be found online for the most popular virtualization tools like
    Oracle VirtualBox or VMware.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 选择 Ubuntu 12.04 LTS 作为本书的操作系统，因为它是最受欢迎的 Linux 发行版之一。对于运行其他操作系统的读者，可以在网上找到 Ubuntu
    12.04 虚拟镜像，用于最流行的虚拟化工具，如 Oracle VirtualBox 或 VMware。
- en: To build binaries for x86 and x86_64 architectures, corresponding versions of
    Ubuntu should be used. The build instructions are exactly the same for both architectures
    so they won't be mentioned further in this recipe. OpenJDK 8 supports cross-compilation,
    so the x86 version may be built on the x86_64 operating system. But such cross-compilation
    requires non-trivial library configurations and we will not use it in this recipe.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要为x86和x86_64架构构建二进制文件，应使用相应的Ubuntu版本。对于这两个架构，构建说明完全相同，因此在此配方中不会进一步提及。OpenJDK
    8支持交叉编译，因此x86版本可以在x86_64操作系统上构建。但这种交叉编译需要非平凡的库配置，我们在此配方中不会使用它。
- en: The minimum build environment that should produce the most compatible OpenJDK
    8 binaries on Linux is Oracle Linux 6.4 amd64 with GCC Version 4.7\. We will configure
    Ubuntu 12.04 to use GCC 4.7 to be close to the minimum build environment.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux上，应使用Oracle Linux 6.4 amd64和GCC版本4.7来构建应产生最兼容OpenJDK 8二进制的最小构建环境。我们将配置Ubuntu
    12.04使用GCC 4.7以接近最小构建环境。
- en: Getting ready
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will need clean Ubuntu 12.04 (server or desktop version)
    running.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此配方，我们需要运行干净的Ubuntu 12.04（服务器或桌面版本）。
- en: How to do it...
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following procedures will help us to build OpenJDK 8:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助我们构建OpenJDK 8：
- en: 'Install the prepackaged binaries of OpenJDK 7:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装OpenJDK 7的预包装二进制文件：
- en: '[PRE7]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Install the GCC toolchain and build dependencies:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装GCC工具链和构建依赖项：
- en: '[PRE8]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Add an additional packages repository:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加额外的软件包仓库：
- en: '[PRE9]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Install the C and C++ compilers, Version 4.7:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装C和C++编译器，版本4.7：
- en: '[PRE10]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Go to the `/usr/bin` directory and set up default compiler-symbolic links:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入`/usr/bin`目录并设置默认编译器符号链接：
- en: '[PRE11]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Download and decompress the official OpenJDK 8 source code archive (this archive
    was not available at the time of writing this book)
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载并解压缩官方OpenJDK 8源代码存档（此存档在撰写本书时不可用）
- en: 'Run the autotools configuration script:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行autotools配置脚本：
- en: '[PRE12]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Start the build:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始构建：
- en: '[PRE13]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Run the build binaries:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行构建二进制文件：
- en: '[PRE14]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Go back to the source''s root and build the compact profile''s images:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回源根目录并构建紧凑配置文件中的图像：
- en: '[PRE15]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Check the profiles images in the `build/linux-x86_64-normal-server-release/images`
    directory:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查`build/linux-x86_64-normal-server-release/images`目录中的配置文件图像：
- en: '[PRE16]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: How it works...
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The prepackaged binaries of OpenJDK 7 are required because some of the build
    steps are run using the external Java runtime.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 需要OpenJDK 7的预包装二进制文件，因为一些构建步骤是使用外部Java运行时运行的。
- en: The `build-dep` command is used to install all the dependencies that are required
    to build the specified package. As Ubuntu packaged OpenJDK 6 is quite close to
    the official OpenJDK 6, this command will install almost all the required dependencies.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`build-dep`命令用于安装构建指定包所需的所有依赖项。由于Ubuntu打包的OpenJDK 6与官方OpenJDK 6非常接近，此命令将安装几乎所有必需的依赖项。'
- en: Ubuntu 12.04 does not have the GCC 4.7 compilers in a default packages repository,
    so additional repository configuration is required.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Ubuntu 12.04默认包仓库中没有GCC 4.7编译器，因此需要额外的仓库配置。
- en: There's more...
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Default GCC 4.6 compilers also may be used to build OpenJDK 8.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的GCC 4.6编译器也可以用来构建OpenJDK 8。
- en: OpenJDK 8 supports cross-compiling x86 binaries on a x86_64 host platform. But
    the `build-dep -a i386 openjdk-7` command to install all the required x86 dependencies
    won't work (some of the x86 dependencies are not installable on x86_64 OS) and
    manual dependencies installation may be non-trivial. It may be easier to build
    x86 binaries on a separate instance of x86 Ubuntu 12.04 using exactly the same
    steps from this recipe.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: OpenJDK 8支持在x86_64宿主平台上交叉编译x86二进制文件。但`build-dep -a i386 openjdk-7`命令来安装所有必需的x86依赖项将不会工作（一些x86依赖项在x86_64
    OS上不可安装），手动依赖项安装可能相当复杂。在单独的x86 Ubuntu 12.04实例上使用与此配方中完全相同的步骤构建x86二进制文件可能更容易。
- en: See also
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Working with GNU Autoconf* recipe from this chapter
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自本章的*使用GNU Autoconf*配方
- en: The *Preparing CA certificates* recipe from [Chapter 2](ch02.html "Chapter 2. Building
    OpenJDK 6"), *Building OpenJDK 6*
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自[第2章](ch02.html "第2章。构建OpenJDK 6")的*准备CA证书*配方，*构建OpenJDK 6*
- en: The official instructions about building OpenJDK 8 at [http://hg.openjdk.java.net/jdk8u/jdk8u/raw-file/2f40422f564b/README-builds.html](http://hg.openjdk.java.net/jdk8u/jdk8u/raw-file/2f40422f564b/README-builds.html)
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于在[http://hg.openjdk.java.net/jdk8u/jdk8u/raw-file/2f40422f564b/README-builds.html](http://hg.openjdk.java.net/jdk8u/jdk8u/raw-file/2f40422f564b/README-builds.html)构建OpenJDK
    8的官方说明
- en: Unofficial instructions about building OpenJDK 8 packages for Linux distributions
    at [https://github.com/hgomez/obuildfactory/wiki/How-to-build-and-package-OpenJDK-8-on-Linux](https://github.com/hgomez/obuildfactory/wiki/How-to-build-and-package-OpenJDK-8-on-Linux)
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于在 Linux 发行版上构建 OpenJDK 8 软件包的非官方说明，请参阅 [https://github.com/hgomez/obuildfactory/wiki/How-to-build-and-package-OpenJDK-8-on-Linux](https://github.com/hgomez/obuildfactory/wiki/How-to-build-and-package-OpenJDK-8-on-Linux)
- en: Using ccache to speed up the OpenJDK 8 build process
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 ccache 加速 OpenJDK 8 构建过程
- en: Besides the Java source code, the OpenJDK source repository contains a lot of
    native C and C++ source code. Native code compilation is much longer than Java
    and may take a lot of time. During development, the same code may be compiled
    multiple times with minor changes. Intermediate binary results for parts of the
    code may be completely equal between the compilations, but usually parts of the
    code are recompiled even if no changes are added in those parts. It is natural
    to expect a more clever approach to code recompiling from modern advanced compilation/linking
    toolchains.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 Java 源代码外，OpenJDK 源代码库还包含大量的原生 C 和 C++ 源代码。原生代码编译比 Java 长得多，可能需要很长时间。在开发过程中，相同的代码可能会因为细微的变化而多次编译。代码部分的中间二进制结果可能在编译之间完全相同，但通常即使在这些部分没有添加更改，代码的部分也会被重新编译。自然地，人们会期望从现代高级编译/链接工具链中采用更聪明的代码重新编译方法。
- en: The **ccache** tool provides such cleverness for native compilation. This tool
    caches the output of C/C++ compilation so that the next time, the same compilation
    can be avoided and the results can be taken from the cache. This can greatly speed
    up recompiling time. The detection is done by hashing different kinds of information
    that should be unique for the compilation, and then using the hash sum to identify
    the cached output.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**ccache** 工具为原生编译提供了这样的智能。此工具缓存 C/C++ 编译的输出，以便下次可以避免相同的编译，并从缓存中获取结果。这可以大大加快重新编译的时间。检测是通过散列不同类型的信息来完成的，这些信息对于编译应该是唯一的，然后使用散列总和来识别缓存的输出。'
- en: OpenJDK 8 supported ccache on Linux and Mac OS X but did not support Windows
    at the time of writing this book.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: OpenJDK 8 支持 Linux 和 Mac OS X 上的 ccache，但在撰写本书时并未支持 Windows。
- en: In this recipe, we will set up ccache for the OpenJDK 8 build on Ubuntu 12.04.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将为 Ubuntu 12.04 上的 OpenJDK 8 构建设置 ccache。
- en: Getting ready
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will need Ubuntu 12.04 (server or desktop version) set up
    to build OpenJDK 8 (please see the previous recipe).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们需要设置 Ubuntu 12.04（服务器或桌面版本）以构建 OpenJDK 8（请参阅前面的配方）。
- en: How to do it...
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following procedure will help us in enabling ccache:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助我们启用 ccache：
- en: 'Install the `ccache` package:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 `ccache` 软件包：
- en: '[PRE17]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Reconfigure the project, running the following command from the OpenJDK 8 source
    directory:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 OpenJDK 8 源代码目录中运行以下命令重新配置项目：
- en: '[PRE18]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Check this line in the `configure` script output:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查 `configure` 脚本输出的这一行：
- en: '[PRE19]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: How it works...
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In OpenJDK 8, the `configure` script checks the cache availability and automatically
    enables its use during further builds.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在 OpenJDK 8 中，`configure` 脚本检查缓存可用性，并在后续构建过程中自动启用其使用。
- en: There's more...
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: For product-like builds when result binaries are going to be used in production,
    it may be safer to reconfigure the project disabling `ccache` with the `--disable-ccache`
    option.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 对于产品型构建，当结果二进制文件将用于生产时，可能更安全地重新配置项目，使用 `--disable-ccache` 选项禁用 `ccache`。
- en: See also
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考信息
- en: The previous recipe *Building OpenJDK 8 on Ubuntu Linux 12.04 LTS* from this
    chapter
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中关于 *在 Ubuntu Linux 12.04 LTS 上构建 OpenJDK 8* 的先前配方
- en: The official website of ccache at [http://ccache.samba.org/](http://ccache.samba.org/)
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ccache 的官方网站为 [http://ccache.samba.org/](http://ccache.samba.org/)
- en: Building OpenJDK 8 on Mac OS X
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Mac OS X 上构建 OpenJDK 8
- en: OpenJDK 8 supports Mac OS X platform as a first class citizen and building it
    (using a proper version of toolchain) is almost as easy as on Linux.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: OpenJDK 8 支持作为一等公民的 Mac OS X 平台，并且使用适当的工具链构建它几乎和 Linux 一样简单。
- en: Historically, Java had first class support on Mac OS X. JDK was based on the
    Sun code base but built by Apple and integrated finely into operating system environment.
    Up to Mac OS X 10.4 Tiger, graphical user interface applications written using
    the standard Swing toolkit had access to most of the Cocoa native interface features.
    Applications written in Java were felt to be very close to native ones, while
    still being cross-platform.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 从历史上看，Java 在 Mac OS X 上一直享有第一类支持。JDK 基于Sun代码库，但由Apple构建，并与操作系统环境紧密结合。直到 Mac
    OS X 10.4 Tiger，使用标准 Swing 工具包编写的图形用户界面应用程序可以访问大多数 Cocoa 本地界面功能。用 Java 编写的应用程序感觉非常接近本地应用程序，同时仍然是跨平台的。
- en: However, for the next releases, the level of Java support went down. Starting
    from Mac OS X 10.5 Leopard, newer Cocoa features became unsupported for Java.
    The release of Apple Java 6 was postponed (comparing to Sun releases for other
    platforms) for more than a year. Java 6 was released in December 2006 but was
    not available for Mac OS X users until April 2008\. Finally, in October 2010,
    Apple officially announced its decision to discontinue Java support. Apple Java
    6 is still being updated with security updates and may be installed on Mac OS
    X 10.9 Mavericks (the latest version at the time of writing this book) but no
    following Java versions will be released by Apple.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，对于下一个版本，Java 的支持水平下降了。从 Mac OS X 10.5 Leopard 开始，新的 Cocoa 功能不再支持 Java。Apple
    Java 6 的发布被推迟（与其他平台上的 Sun 发布相比）超过一年。Java 6 于 2006 年 12 月发布，但直到 2008 年 4 月才对 Mac
    OS X 用户可用。最后，在 2010 年 10 月，Apple 正式宣布其决定停止对 Java 的支持。Apple Java 6 仍在更新安全更新，并且可以安装在
    Mac OS X 10.9 Mavericks（撰写本书时的最新版本）上，但 Apple 不会发布后续的 Java 版本。
- en: Third-party open source Java distributions do exist for Mac OS X. The most notable
    one is the SoyLatte X11-based port of the FreeBSD Java 1.6 patch set to Mac OS
    X Intel machines. SoyLatte predated OpenJDK, was licensed under the Java Research
    license and supported Java 6 builds. Now it is part of the OpenJDK BSD Port project.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Mac OS X，存在第三方开源 Java 发行版。最著名的是基于 FreeBSD Java 1.6 补丁集的 SoyLatte X11 端口，用于
    Mac OS X Intel 机器。SoyLatte 早在 OpenJDK 之前就存在，采用 Java 研究许可，并支持 Java 6 构建。现在它是 OpenJDK
    BSD 端口项目的一部分。
- en: Full support for Mac OS X on a par with other platforms was added in OpenJDK
    7 and was continued in OpenJDK 8.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: OpenJDK 7 在其他平台上添加了对 Mac OS X 的全面支持，并在 OpenJDK 8 中继续。
- en: Getting ready
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will need clean Mac OS X 10.7.5 Lion (or any later version
    that supports Xcode 4) running.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们需要一个干净安装的 Mac OS X 10.7.5 Lion（或任何支持 Xcode 4 的后续版本）。
- en: How to do it...
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following procedures will help us to build OpenJDK 8:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助我们构建 OpenJDK 8：
- en: Download Xcode 4.6.2 for Lion (April 15, 2013) from [https://developer.apple.com/xcode/](https://developer.apple.com/xcode/)
    (an Apple developer's account is required, registration is free) and install it.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://developer.apple.com/xcode/](https://developer.apple.com/xcode/) 下载
    Xcode 4.6.2 for Lion（2013 年 4 月 15 日），需要 Apple 开发者账户（注册免费）并安装它。
- en: Download the Command Line Tools for Xcode, April 2013 (April 15, 2013) using
    the same download link as mentioned in the previous point, and install it.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用与前面提到的相同下载链接下载 Xcode 命令行工具，版本为 2013 年 4 月（2013 年 4 月 15 日），并安装它。
- en: 'Run this command from the terminal to set up the Command Line Tools:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从终端运行此命令以设置命令行工具：
- en: '[PRE20]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Navigate to **Applications** | **Utilities** and run **X11.app** to set up the
    X-server.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 **应用程序** | **实用工具** 并运行 **X11.app** 以设置 X 服务器。
- en: Install the JDK 7 Oracle distribution, or prebuilt OpenJDK binaries can be used.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 JDK 7 Oracle 发行版，或者可以使用预构建的 OpenJDK 二进制文件。
- en: Download and decompress the official OpenJDK 8 source code archive (this archive
    is not available at the time of writing this book).
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载并解压缩官方 OpenJDK 8 源代码存档（撰写本书时此存档不可用）。
- en: 'Run the autotools configuration script:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 autotools 配置脚本：
- en: '[PRE21]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Start the build:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始构建：
- en: '[PRE22]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Run the built binaries:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行构建的二进制文件：
- en: '[PRE23]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: How it works...
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Despite the Xcode Command Line Tools that are used for the main part of the
    native source, Xcode itself is also required to build the platform specific code.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管用于原生源主要部分的 Xcode 命令行工具，但还需要 Xcode 本身来构建特定平台的代码。
- en: OpenJDK on Mac OS X is moving from using the X11 server, but it is still required
    for Version 8 builds. Mac OS X 10.7 Lion has X11 preinstalled, it just needs to
    be run once to be configured for the build.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: Mac OS X 上的 OpenJDK 正在从使用 X11 服务器迁移，但对于版本 8 的构建仍然需要它。Mac OS X 10.7 Lion 预装了
    X11，只需运行一次即可配置用于构建。
- en: There's more...
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: This recipe uses the official Apple builds of GCC (and G++) Version 4.2 as compilers.
    After that version official Apple support for GCC was discontinued for licensing
    reasons. Clang—the open source compiler initially developed by Apple—is the default
    and preferred compiler in newer versions of Mac OS X.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 此菜谱使用官方的 Apple GCC (和 G++) 版本 4.2 构建。在此版本之后，由于许可原因，官方 Apple 对 GCC 的支持已停止。Clang——最初由
    Apple 开发的开源编译器——是较新版本 Mac OS X 的默认和首选编译器。
- en: Despite the initial developers' plans, OpenJDK 8 still requires GCC and cannot
    be built using Clang. This is the reason for using Version 4 of Xcode and not
    Version 5, which does not ship GCC at all. At the time of writing this book, Xcode
    5 and Clang support was being added to the OpenJDK 9 project. Such support may
    be backported to OpenJDK 8 later; if you want to build Version 8 with Clang, it
    is best to check the OpenJDK mailing lists for up-to-date information.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管最初的开发者计划如此，但 OpenJDK 8 仍然需要 GCC，不能使用 Clang 构建。这就是为什么使用 Xcode 的第 4 版而不是第 5
    版，因为第 5 版根本不包含 GCC。在撰写本书时，Xcode 5 和 Clang 支持正在添加到 OpenJDK 9 项目中。这种支持可能会后来回滚到 OpenJDK
    8；如果您想使用 Clang 构建 8 版本，最好检查 OpenJDK 邮件列表以获取最新信息。
- en: On Mac OS X 10.8 Mountain Lion, a 10.9 Mavericks X11 server should be installed
    separately using the XQuartz project.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Mac OS X 10.8 Mountain Lion 上，应单独安装 10.9 Mavericks X11 服务器，使用 XQuartz 项目。
- en: See also
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Windows 平台上构建 OpenJDK 8 的过程与版本 7 相比有重大改进。尽管如此，构建环境设置仍然比 Linux 和 Mac OS X 复杂得多。构建的大部分复杂性来自于它通过
    Cygwin 工具使用类似 Unix 的构建环境。
- en: The *Working with GNU Autoconf* recipe from this chapter
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章的 *使用 GNU Autoconf* 菜单
- en: The *Preparing CA certificates* recipe from [Chapter 2](ch02.html "Chapter 2. Building
    OpenJDK 6"), *Building OpenJDK 6*
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自 [第 2 章](ch02.html "第 2 章。构建 OpenJDK 6") 的 *准备 CA 证书* 菜单，*构建 OpenJDK 6*
- en: Official instructions about building OpenJDK 8 at [http://hg.openjdk.java.net/jdk8u/jdk8u/raw-file/2f40422f564b/README-builds.html](http://hg.openjdk.java.net/jdk8u/jdk8u/raw-file/2f40422f564b/README-builds.html)
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于在 [http://hg.openjdk.java.net/jdk8u/jdk8u/raw-file/2f40422f564b/README-builds.html](http://hg.openjdk.java.net/jdk8u/jdk8u/raw-file/2f40422f564b/README-builds.html)
    构建 OpenJDK 8 的官方说明
- en: Unofficial instructions about building OpenJDK 8 packages for Mac OS X at [https://github.com/hgomez/obuildfactory/wiki/Building-and-Packaging-OpenJDK8-for-OSX](https://github.com/hgomez/obuildfactory/wiki/Building-and-Packaging-OpenJDK8-for-OSX)
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于在 Mac OS X 上构建 OpenJDK 8 软件包的非官方说明 [https://github.com/hgomez/obuildfactory/wiki/Building-and-Packaging-OpenJDK8-for-OSX](https://github.com/hgomez/obuildfactory/wiki/Building-and-Packaging-OpenJDK8-for-OSX)
- en: Building OpenJDK 8 on Windows 7 SP1
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Windows 7 SP1 上构建 OpenJDK 8
- en: The OpenJDK 8 build process on Windows platform included major improvements
    compared to Version 7\. Despite that, the build environment setup is still much
    more complex than on Linux and Mac OS X. Much of the complexity of the build comes
    from its usage of a Unix-like build environment through Cygwin tools.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 与之相关的还有
- en: The official compiler requirement for i586 builds is Microsoft Visual Studio
    C++ 2010 Professional Edition. The Express Edition of Visual Studio 2010 may also
    be used for the x86 build. For x86_64 builds, instead of Visual Studio 2010 Professional
    Edition, we will use the Microsoft Windows SDK Version 7.1 for Windows 7\. This
    SDK is available for free from the Microsoft website. It uses the same compiler
    as Visual Studio 2010 Express. It contains only the Command Line Tools (no GUI)
    but may be used as an external toolset from Visual Studio 2010 if GUI is desired.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 i586 构建官方的编译器要求是 Microsoft Visual Studio C++ 2010 专业版。Visual Studio 2010
    的社区版也可以用于 x86 构建。对于 x86_64 构建，我们将使用 Microsoft Windows SDK 版本 7.1，适用于 Windows 7。此
    SDK 可从 Microsoft 网站免费获取。它使用与 Visual Studio 2010 Express 相同的编译器。它仅包含命令行工具（没有 GUI），但如果需要
    GUI，也可以作为 Visual Studio 2010 的外部工具集使用。
- en: Getting ready
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we should have Windows 7 SP1 amd64 running with no antivirus
    software installed. Antivirus software is not allowed because it may interfere
    with Cygwin runtime.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，我们应该有一个没有安装任何防病毒软件的 Windows 7 SP1 amd64 系统。不允许使用防病毒软件，因为它可能会干扰 Cygwin
    运行时。
- en: How to do it...
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following procedure will help us to build OpenJDK 8:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助我们构建 OpenJDK 8：
- en: Download Microsoft .NET Framework 4 from the Microsoft website and install it.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Microsoft 网站下载 Microsoft .NET Framework 4 并安装它。
- en: Download the amd64 version of the Microsoft Windows SDK for Windows 7 (the `GRMSDKX_EN_DVD.iso`
    file) from the Microsoft website and install it to the default location. The `.NET
    Development` and `Common Utilities` components are not required.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从微软网站下载 Windows 7 的 amd64 版本 Microsoft Windows SDK（`GRMSDKX_EN_DVD.iso` 文件）并将其安装到默认位置。不需要
    `.NET 开发` 和 `通用工具` 组件。
- en: Download Visual Studio 2010 Express Edition from the Microsoft website and install
    it to the default location. Only the Visual C++ component is required.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从微软网站下载 Visual Studio 2010 Express 版本并将其安装到默认位置。只需要 Visual C++ 组件。
- en: 'Download and install the Microsoft DirectX 9.0 SDK (summer 2004) to the default
    installation path. Note that this distribution is not available any more on the
    Microsoft website. It may be downloaded from another place online, and the file
    details are as follows:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 Microsoft DirectX 9.0 SDK（2004 年夏季）下载并安装到默认安装路径。请注意，此分发在微软网站上已不再可用。它可能可以从其他在线位置下载，文件详细信息如下：
- en: '[PRE24]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Install or copy the preinstalled version of Cygwin to `c:\cygwin`.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将预安装的 Cygwin 版本安装或复制到 `c:\cygwin`。
- en: Create a `c:\path_prepend` directory and copy to it the `find.exe` and `sort.exe`
    files from the Cygwin installation.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `c:\path_prepend` 目录，并将 Cygwin 安装中的 `find.exe` 和 `sort.exe` 文件复制到该目录。
- en: Download the GNU make utility binary from the [http://www.cmake.org/](http://www.cmake.org/)
    website using [http://www.cmake.org/files/cygwin/make.exe-cygwin1.7](http://www.cmake.org/files/cygwin/make.exe-cygwin1.7),
    rename it to `make.exe`, and put it into the `c:\make` directory.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 [http://www.cmake.org/](http://www.cmake.org/) 网站上的 [http://www.cmake.org/files/cygwin/make.exe-cygwin1.7](http://www.cmake.org/files/cygwin/make.exe-cygwin1.7)
    下载 GNU make 工具二进制文件，将其重命名为 `make.exe`，并将其放入 `c:\make` 目录。
- en: Download the prebuilt FreeType libraries from the `openjdk-unofficial-builds
    GitHub` project (directory `7_64`) and put binaries into the `c:\freetype\lib`
    directory and header files into the `c:\freetype\include` directory.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `openjdk-unofficial-builds GitHub` 项目（目录 `7_64`）下载预构建的 FreeType 库，并将二进制文件放入
    `c:\freetype\lib` 目录，将头文件放入 `c:\freetype\include` 目录。
- en: Install the OpenJDK 7 binaries or Oracle Java 7 into `c:\jdk7`.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 OpenJDK 7 二进制文件或 Oracle Java 7 安装到 `c:\jdk7`。
- en: Download the official OpenJDK 8 source code archive (this archive was not available
    at the time of writing this book) and decompress it into the `c:\sources` directory.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载官方 OpenJDK 8 源代码存档（此存档在本书编写时不可用）并将其解压缩到 `c:\sources` 目录。
- en: 'Write the following command into the `build.bat` text file:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下命令写入 `build.bat` 文本文件：
- en: '[PRE25]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Run `build.bat` from Windows Explorer. The `cmd.exe` window should appear with
    bash launched.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Windows 资源管理器运行 `build.bat`。应该会弹出一个带有 bash 启动的 `cmd.exe` 窗口。
- en: 'From the bash Command Prompt run the following commands:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 bash 命令提示符下运行以下命令：
- en: '[PRE26]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Launch another Cygwin console and run the following commands:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动另一个 Cygwin 控制台并运行以下命令：
- en: '[PRE27]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Wait for the build to finish.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待构建完成。
- en: 'Run the following build binaries:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下构建二进制文件：
- en: '[PRE28]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: How it works...
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Cygwin installation is covered in the recipe *Installing Cygwin for Windows
    builds* in [Chapter 2](ch02.html "Chapter 2. Building OpenJDK 6"), *Building OpenJDK
    6*. Directories in the root of disk C are used here for brevity. Generally, arbitrary
    paths consisting of ASCII letters or numbers without spaces can be used. Newer
    version of DirectX SDK also can be used.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: Cygwin 安装在 [第 2 章](ch02.html "第 2 章。构建 OpenJDK 6") 的配方 *为 Windows 构建安装 Cygwin*
    中有详细说明，*构建 OpenJDK 6*。这里使用磁盘 C 的根目录是为了简洁。通常，可以使用由 ASCII 字母或数字组成的任意路径，路径中不能有空格。也可以使用较新的
    DirectX SDK 版本。
- en: Different GNU make versions may have different problems on Windows. This particular
    version from the cmake project was tested on different Windows versions and works
    fine.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 不同版本的 GNU make 在 Windows 上可能存在不同的问题。这个来自 cmake 项目的特定版本在不同的 Windows 版本上进行了测试，并且运行良好。
- en: This recipe uses prebuilt FreeType 2.4.10 libraries from the `openjdk-unofficial-builds
    GitHub` project. FreeType may be built from sources using the same Windows SDK
    7.1 toolchain.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方使用来自 `openjdk-unofficial-builds GitHub` 项目的预构建 FreeType 2.4.10 库。FreeType
    可以使用相同的 Windows SDK 7.1 工具链从源代码构建。
- en: The `make` output will be redirected to the `make.log` file. The `2>&1` statement
    ensures that both `stdout` and `stderr` will be redirected.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '`make` 输出将被重定向到 `make.log` 文件。`2>&1` 语句确保 `stdout` 和 `stderr` 都将被重定向。'
- en: The `tail -f` command allows us to watch the contents of the `make.log` file
    as they are written during the build process.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`tail -f` 命令允许我们在构建过程中查看 `make.log` 文件的内容。'
- en: The `pause > nul` command added at the end of the batch file prevents the `cmd.exe`
    window from disappearing in the case of runtime errors.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在批处理文件末尾添加的 `pause > nul` 命令可以防止在运行时错误的情况下 `cmd.exe` 窗口消失。
- en: There's more...
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: The `--with-target-bits=32` configure option can be used to build i586 binaries
    on the amd64 operating system. In this case, the x86 version of the FreeType libraries
    should be specified by the `--with-freetype` option and Express Edition of Visual
    Studio 2010 should be installed.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `--with-target-bits=32` 配置选项在 amd64 操作系统上构建 i586 二进制文件。在这种情况下，应通过 `--with-freetype`
    选项指定 FreeType 库的 x86 版本，并且应安装 Visual Studio 2010 的 Express 版本。
- en: The `tee` command may be used instead of `>` and `tail` to write the build log
    to the file and console simultaneously.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `tee` 命令代替 `>` 和 `tail`，将构建日志同时写入文件和控制台。
- en: See also
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Working with GNU Autoconf* recipe from this chapter
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章的 *使用 GNU Autoconf 菜谱*
- en: The *Preparing CA certificates* recipe from [Chapter 2](ch02.html "Chapter 2. Building
    OpenJDK 6"), *Building OpenJDK 6*
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自 [第 2 章](ch02.html "第 2 章。构建 OpenJDK 6") 的 *准备 CA 证书* 菜谱，*构建 OpenJDK 6*
- en: The *Installing Cygwin for Windows builds* recipe from [Chapter 2](ch02.html
    "Chapter 2. Building OpenJDK 6"), *Building OpenJDK 6*
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自 [第 2 章](ch02.html "第 2 章。构建 OpenJDK 6") 的 *为 Windows 构建安装 Cygwin* 菜谱，*构建
    OpenJDK 6*
- en: The *Building 64-bit FreeType libraries for OpenJDK 7 on Windows* recipe from
    [Chapter 3](ch03.html "Chapter 3. Building OpenJDK 7"), *Building OpenJDK 7*
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自 [第 3 章](ch03.html "第 3 章。构建 OpenJDK 7") 的 *在 Windows 上构建 64 位 FreeType 库*
    菜谱，*构建 OpenJDK 7*
- en: Official instructions about building OpenJDK 8 at [http://hg.openjdk.java.net/jdk8u/jdk8u/raw-file/2f40422f564b/README-builds.html](http://hg.openjdk.java.net/jdk8u/jdk8u/raw-file/2f40422f564b/README-builds.html)
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于在 [http://hg.openjdk.java.net/jdk8u/jdk8u/raw-file/2f40422f564b/README-builds.html](http://hg.openjdk.java.net/jdk8u/jdk8u/raw-file/2f40422f564b/README-builds.html)
    构建 OpenJDK 8 的官方说明
