["```java\npublic interface Stack<E> {\n  void push(E value);\n  E pop();\n  E peek();\n}\n```", "```java\npublic class StackImplArray<E> implements Stack<E> {\n\n```", "```java\nprotected E[] array;\n  int top=-1;\n\n  public StackImplArray(int size){\n    array = (E[])new Object[size];\n  }\n}\n```", "```java\n@Override\npublic void push(E value) {\n```", "```java\n  if(top == array.length-1){\n    throw new NoSpaceException(\"No more space in stack\");\n  }\n```", "```java\n  top++;\n  array[top] = value;\n}\n```", "```java\npublic class NoSpaceException extends RuntimeException{\n  public NoSpaceException(String message) {\n    super(message);\n  }\n}\n```", "```java\n@Override\npublic E pop() {\n```", "```java\n  if(top==-1){\n    return null;\n  }\n```", "```java\n  top--;\n  return array[top+1];\n}\n```", "```java\n@Override\npublic E peek() {\n```", "```java\n  if(top==-1){\n    return null;\n  }\n```", "```java\n  return array[top];\n}\n```", "```java\npublic class StackImplLinkedList<E> implements Stack<E> {\n  protected LinkedList<E> list = getNewLinkedList();\n\n  protected LinkedList<E> getNewLinkedList(){\n    return new LinkedList<>();\n  }\n}\n```", "```java\n@Override\npublic void push(E value) {\n  list.appendFirst(value);\n}\n```", "```java\n@Override\npublic E pop() {\n  if(list.getLength()==0){\n    return null;\n  }\n  E value = list.getFirst();\n  list.removeFirst();\n  return value;\n}\n```", "```java\n@Override\npublic E peek() {\n  if(list.getLength()==0){\n    return null;\n  }\n  return list.getFirst();\n}\n```", "```java\npublic interface Queue<E> {\n  void enqueue(E value);\n  E dequeue();\n  E peek();\n}\n```", "```java\npublic class QueueImplArray<E>  implements Queue<E>{\n  protected E[] array;\n  protected int start=0;\n  protected int end=0;\n  protected int length=0;\n  public QueueImplArray(int size){\n    array = (E[]) new Object[size];\n  }\n}\n```", "```java\n@Override\npublic void enqueue(E value) {\n  if(length>=array.length){\n    throw new NoSpaceException(\"No more space to add an element\");\n  }\n  array[end] = value;\n```", "```java\n  end = (end+1) % array.length;\n  length++;\n}\n```", "```java\n@Override\npublic E dequeue() {\n  if(length<=0){\n    return null;\n  }\n  E value = array[start];\n  start = (start+1) % array.length;\n  length--;\n  return value;\n}\n```", "```java\n@Override\npublic E peek() {\n  if(length<=0){\n    return null;\n  }\n  return array[start];\n}\n```", "```java\npublic class QueueImplLinkedList<E> implements Queue<E>{\n  protected LinkedList<E> list = getNewLinkedList();\n\n  protected LinkedList<E> getNewLinkedList(){\n    return new LinkedList<>();\n  }\n```", "```java\n  @Override\n  public void enqueue(E value) {\n    list.appendLast(value);\n  }\n```", "```java\n  @Override\n  public E dequeue() {\n    if(list.getLength()==0){\n      return null;\n    }\n    E value = list.getFirst();\n    list.removeFirst();\n    return value;\n  }\n```", "```java\n  @Override\n  public E peek() {\n    if(list.getLength()==0){\n      return null;\n    }\n    return list.getFirst();\n  }\n}\n```", "```java\npublic interface DoubleEndedQueue<E> extends Stack<E> {\n  void inject(E value);\n  E eject();\n  E peekLast();\n}\n```", "```java\npublic class DoubleEndedQueueImplArray<E> extends QueueImplArray<E> implements DoubleEndedQueue<E> {\n```", "```java\n  public DoubleEndedQueueImplArray(int size) {\n    super(size);\n  }\n```", "```java\n  @Override\n  public void inject(E value) {\n    enqueue(value);\n  }\n```", "```java\n  @Override\n  public E eject() {\n    if (length <= 0) {\n      return null;\n    }\n```", "```java\n    end = (end + array.length - 1) % array.length;\n    E value = array[end];\n    length--;\n    return value;\n  }\n```", "```java\n  @Override\n  public E peekLast() {\n    if (length <= 0) {\n      return null;\n    }\n    return array[(end + array.length - 1) % array.length];\n  }\n```", "```java\n  @Override\n  public void push(E value) {\n    if (length >= array.length) {\n      throw new NoSpaceException(\"No more space to add an element\");\n    }\n```", "```java\n    start = (start + array.length - 1) % array.length;\n    array[start] = value;\n    length++;\n  }\n```", "```java\n  @Override\n  public E pop() {\n    return dequeue();\n  }\n}\n```", "```java\npublic class DoubleEndedQueueImplLinkedList<E> extends StackImplLinkedList<E> implements DoubleEndedQueue<E> {\n\n  @Override\n  protected LinkedList<E> getNewLinkedList() {\n    return new DoublyLinkedList<E>();\n  }\n```", "```java\n  @Override\n  public void inject(E value) {\n    list.appendLast(value);\n  }\n```", "```java\n  @Override \n  public E eject() {\n    if(list.getLength()==0){\n      return null;\n    }\n    E value = list.getLast();\n    list.removeLast();\n    return value;\n  }\n```", "```java\n  @Override\n  public E peekLast() {\n    if(list.getLength()==0){\n      return null;\n    }\n    return list.getLast();\n  }\n}\n```"]