["```java\nuser> map inc [1 2 3])\n(2 3 4)\n```", "```java\n    user> (map (fn [i] (* i 10)) [1 2 3 4 5])\n    ```", "```java\n    (10 20 30 40 50)\n    ```", "```java\n    user> (map count [\"Let's\" \"measure\" \"word\" \"length\" \"now\"])\n    ```", "```java\n    (5 7 4 6 3)\n    ```", "```java\n    user> (map (fn [w] (str w \": \" (count w))) [\"Let's\" \"measure\" \"word\" \"length\" \"now\"]) \n    ```", "```java\n    (\"Let's: 5\" \"measure: 7\" \"word: 4\" \"length: 6\" \"now: 3\")\n    ```", "```java\nuser> filter keyword? [\"a\" :b \"c\" :d \"e\" :f \"g\"])\n(:b :d :f)\n```", "```java\n    user> (odd? 5)\n    ```", "```java\n    true\n    ```", "```java\n    user> (odd? 6)\n    ```", "```java\n    false\n    ```", "```java\n    user> (filter odd? [1 2 3 4 5])\n    ```", "```java\n    (1 3 5)\n    ```", "```java\n    user> (remove odd? [1 2 3 4 5])\n    ```", "```java\n    (2 4)\n    ```", "```java\n    user> (filter (constantly true) [1 2 3 4 5])\n    (1 2 3 4 5)\n    user> (filter (constantly false) [1 2 3 4 5])\n    ()\n    ```", "```java\nuser> (take 3 [1 2 3 4 5])\n(1 2 3)\nuser> (drop 3 [1 2 3 4 5])\n(4 5)\n```", "```java\nUser> (take-while #(> 10 %) [2 9 4 12 3 99 1])\n(2 9 4)\nuser> (drop-while #(> 10 %) [2 9 4 12 3 99 1])\n(12 3 99 1)\n```", "```java\n    (def students [{:name \"Eliza\" :year 1994}\n                   {:name \"Salma\" :year 1995}\n                   {:name \"Jodie\" :year 1997}\n                   {:name \"Kaitlyn\" :year 2000}\n                   {:name \"Alice\" :year 2001}\n                   {:name \"Pippa\" :year 2002}\n                   {:name \"Fleur\" :year 2002}])\n    ```", "```java\n    #(< (:year %) 2000)\n    ```", "```java\n    user> (take-while #(< (:year %) 2000) students)\n    ({:name \"Eliza\", :year 1994}\n     {:name \"Salma\", :year 1995}\n     {:name \"Jodie\", :year 1997})\n    ```", "```java\n    user> (drop-while #(< (:year %) 2000) students)\n    ({:name \"Kaitlyn\", :year 2000}\n     {:name \"Alice\", :year 2001}\n     {:name \"Pippa\", :year 2002}\n     {:name \"Fleur\", :year 2002})\n    ```", "```java\nuser> (map (fn [n] (* 10 n))\n           (filter odd? [1 2 3 4 5]))\n```", "```java\n(10 30 50)\n```", "```java\nuser> (def filtered (filter odd? [1 2 3 4 5]))\nfiltered\nuser> (map (fn [n] (* 10 n)) filtered)\n(10 30 50)\n```", "```java\nuser> (->> [1 2 3 4 5]\n        (filter odd?)\n        (map (fn [n] (* 10 n))))\n(10 30 50)\n```", "```java\nuser> (->> [1 2 3 4 5]\n        (filter odd?))\n```", "```java\nuser> (filter odd? [1 2 3 4 5])\n```", "```java\nuser> (range 1 6)\n(1 2 3 4 5)\n```", "```java\nuser> (def our-seq (range 100))\n```", "```java\nuser> (first our-seq)\n0\n```", "```java\nuser> (last our-seq)\n99\n```", "```java\n    user> (defn our-range [limit]\n            (take-while #(< % limit) (iterate inc 0)))\n    ```", "```java\n    user> (our-range 5)\n    (0 1 2 3 4)\n    ```", "```java\n    user> (map #(* 10 %) (our-range 5))\n    (0 10 20 30 40)\n    ```", "```java\n    user> (map (fn [i] (print \".\") (* i 10)) (our-range 5)) \n    .(0\\. 10\\. 20\\. 30\\. 40)\n    ```", "```java\n    user> (def by-ten (map (fn [i] (print \".\") (* i 10)) (our-range 5)))\n    #'user/by-ten\n    ```", "```java\n    user> by-ten\n    .(0\\. 10\\. 20\\. 30\\. 40)   ;; this looks familiar!\n    ```", "```java\n(range)\n```", "```java\n(->> (range)\n     (map #(* 10 %))\n     (take 5))\n```", "```java\nvar ints = [];\nfor (var i = 0; i < 20; i++) {\n  ints.push(Math.round(Math.random() * 100));\n}\n```", "```java\n    user> (def our-randoms (repeatedly (partial rand-int 100)))\n    ```", "```java\n    user> (take 20 our-randoms) \n    ```", "```java\n    user> (defn some-random-integers [size]\n        (take size (repeatedly (fn [] (rand-int 100)))))\n    ```", "```java\n    user> (some-random-integers 12)\n    ```", "```java\n    (32 0 26 61 10 96 38 38 93 26 68 81)\n    ```", "```java\n(map (partial * 10) [1 2 3 4 5])\n```", "```java\nuser> (def apart (partial * 10))\n#'user/apart\nuser> (apart 5)\n50\n```", "```java\nuser> (:my-field {:my-field 42})\n42\n```", "```java\n{:id 9342\n :username \"speedy\"\n :current-points 45\n :remaining-lives 2\n :experience-level 5\n :status :active }\n```", "```java\n{:id 9342\n :username \"speedy\"\n :current-points 45\n :remaining-lives 2s\n :experience-level 5\n :status :active}\n```", "```java\n    user> (map (fn [player] (:current-points player)) game-users)\n    (45 67 33 59 12 0…)\n    ```", "```java\n    user> (map :current-points game-usersplayers)\n    (45 67 33 59 12 0…)\n    ```", "```java\n    user> (def alpha-set (set [:a :b :c]))\n    #'user/alpha-set\n    user> (alpha-set :z)\n    nil\n    user> (alpha-set :a)\n    :a\n    ```", "```java\n(hash-set :a :b :c)\n```", "```java\nuser> (def animal-names [\"turtle\" \"horse\" \"cat\" \"frog\" \"hawk\" \"worm\"])\n```", "```java\n(remove (fn [animal-name]\n             (or (= animal-name \"horse\")\n                 (= animal-name \"cat\")))\n         animal-names)             \n```", "```java\nuser> (remove #{\"horse\" \"cat\"} animal-names)\n```", "```java\n(\"turtle\" \"frog\" \"hawk\" \"worm\")\n```", "```java\n(require '[clojure.string :as string])\n(defn normalize [s] (string/trim (string/lower-case s)))\n```", "```java\nuser> (def normalizer (comp string/trim string/lower-case))\nuser> (normalizer \"  Some Information \")\n\"some information\"\n```", "```java\n(comp function-c function-b function-a)\n```", "```java\n(fn [x] (function c (function-b (function-a x))))\n```", "```java\nuser> (def remove-words #{\"and\" \"an\" \"a\" \"the\" \"of\" \"is\"}) \n#'user/remove-words\nuser> (remove (comp remove-words string/lower-case string/trim) [\"February\" \" THE \" \"4th\"])\n(\"February\" \"4th\")\n```", "```java\n(map :current-score game-users)\n```", "```java\n    (def keep-statuses #{:active :imprisoned :speed-boost})\n    ```", "```java\n    (filter (fn [player] (keep-statuses (:status player))) game-users)\n    ```", "```java\n    (comp keep-statuses :status)\n    ```", "```java\n    user> (->> game-users\n           (filter (comp #{:active :imprisoned :speed-boost} :status))\n           (map :current-points))\n    ```", "```java\nuser> (def alpha-lc [ \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"])\n#'user/alpha-lc\n```", "```java\nuser> (mapcat (fn [letter] [letter (clojure.string/upper-case letter)]) alpha-lc)\n(\"a\" \"A\" \"b\" \"B\" \"c\" \"C\" \"d\" \"D\" \"e\" \"E\" \"f\" \"F\" \"g\" \"G\" \"h\" \"H\" \"i\" \"I\" \"j\" \"J\")\n```", "```java\nuser> (map (fn [a b] (+ a b)) [5 8 3 1 2] [5 2 7 9 8])\n(10 10 10 10 10)\n```", "```java\nuser> (defn our-zipmap [xs ys]\n          (->> (map (fn [x y] [x y]) xs ys)\n               (into {})))\nuser> (our-zipmap [:a :b :c] [1 2 3])\n{:a 1, :b 2, :c 3}\n```", "```java\nuser> (def meals [\"breakfast\" \"lunch\" \"dinner\" \"midnight snack\"])\n```", "```java\nuser> (map (fn [idx meal] (str (inc idx) \". \" meal)) (range) meals)\n(\"1\\. breakfast\" \"2\\. lunch\" \"3\\. dinner\" \"4\\. midnight snack\")\n```", "```java\n(map-indexed (fn [idx meal] (str (inc idx) \". \" meal)) meals)\n```", "```java\nfor (var i = 0; i++; i < ourValues.length) {\n  if (ourValues[i + 1]) {\n    myFunction(ourValues[i], ourValues[i + 1]);\n  }\n}\n```", "```java\n(map (fn [x next-x] (do-something x next-x))\n     my-sequence\n     (rest my-sequence))\n```", "```java\n    (def temperature-by-day\n      [18 23 24 23 27 24 22 21 21 20 32 33 30 29 35 28 25 24 28 29 30])\n    ```", "```java\n    (map (fn [today yesterday] \n                   (cond (> today yesterday) :warmer\n                         (< today yesterday) :colder\n                         (= today yesterday) :unchanged))\n                 (rest temperature-by-day)\n                 temperature-by-day)\n    ```", "```java\n    (:warmer :warmer :colder :warmer :colder :colder :colder :unchanged :colder :warmer :warmer :colder :colder :warmer :colder :colder :colder :warmer :warmer :warmer)\n    ```", "```java\nuser> (apply max [3 9 6])\n9\n```", "```java\nuser> (max 3 9 6)\n9\n```", "```java\nuser> (let [a 5\n            b nil\n            c 18]\n        (+ a b c))\nExecution error (NullPointerException) at user/eval12115 (REPL:46).\nnull\n```", "```java\nuser> (let [a 5\n            b nil\n            c 18]\n        (apply + (filter integer? [a b c])))\n23\n```", "```java\n(apply min [])\nExecution error (ArityException) at chapterfive/eval13541 (REPL:103).\nWrong number of args (0) passed to: clojure.core/min\n```", "```java\nuser> (apply min 0 [])\n0\n```", "```java\n    user> (def temperature-by-day\n      [18 23 24 23 27 24 22 21 21 20 32 33 30 29 35 28 25 24 28 29 30])\n    #'user/temperature-by-day\n    ```", "```java\n    user> (let [total (apply + temperature-by-day)\n                c (count temperature-by-day)]\n            (/ total c))\n    26\n    ```", "```java\n(max-value-by-status :current-points :active game-users)\n(min-value-by-status :remaining-lives :imprisoned game-users)\n```", "```java\n(defn max-value-by-status [field status users]\n;; TODO: write code\n)\n```", "```java\n    {:deps\n     {org.clojure/data.csv {:mvn/version \"0.1.4\"}\n      semantic-csv {:mvn/version \"0.2.1-alpha1\"}}}\n    ```", "```java\n    user> (require '[clojure.data.csv :as csv])\n    nil\n    user> (require '[clojure.java.io :as io])\n    nil\n    user> (with-open [r (io/reader \"match_scores_1991-2016_unindexed_csv.csv\")]\n             (first (csv/read-csv r)))\n    [\"tourney_year_id\"\n     \"tourney_order\"\n     \"tourney_slug\"\n     \"tourney_url_suffix\"\n     \"tourney_round_name\"\n     \"round_order\"\n     \"match_order\"\n     \"winner_name\"\n     \"winner_player_id\"\n     \"winner_slug\"\n     \"loser_name\"\n     \"loser_player_id\"\n     \"loser_slug\"\n     \"winner_seed\"\n     \"loser_seed\"\n     \"match_score_tiebreaks\"\n     \"winner_sets_won\"\n     \"loser_sets_won\"\n     \"winner_games_won\"\n     \"loser_games_won\"\n     \"winner_tiebreaks_won\"\n     \"loser_tiebreaks_won\"\n     \"match_id\"\n     \"match_stats_url_suffix\"]\n    ```", "```java\n    user> (with-open [r (io/reader \"match_scores_1991-2016_unindexed_csv.csv\")]\n             (count (csv/read-csv r)))\n    91957\n    ```", "```java\n    user> (require '[clojure.data.csv :as csv])\n    nil\n    user> (require '[clojure.java.io :as io])\n    nil\n    ```", "```java\n    (with-open [r (io/reader \"match_scores_1991-2016_unindexed_csv.csv\")]\n      (->> (csv/read-csv r)\n           (map #(nth % 7))\n           (take 6)))\n    ```", "```java\n    Error printing return value (IOException) at java.io.BufferedReader/ensureOpen (BufferedReader.java:122).\n    Stream closed\n    ```", "```java\n    user> (with-open [r (io/reader \"match_scores_1991-2016_unindexed_csv.csv\")]\n        (->> (csv/read-csv r)\n             (map #(nth % 7))\n             (take 6)\n             doall))\n    ```", "```java\n    (\"winner_name\"\n     \"Nicklas Kulti\"\n     \"Michael Stich\"\n     \"Nicklas Kulti\"\n     \"Jim Courier\"\n     \"Michael Stich\")\n    ```", "```java\n    (ns packt-clj.tennis\n      (:require\n       [clojure.data.csv :as csv]\n       [clojure.java.io :as io]\n       [semantic-csv.core :as sc]))\n    ```", "```java\n    (defn first-match [csv]\n      (with-open [r (io/reader csv)]\n        (->> (csv/read-csv r)\n             sc/mappify\n             first)))\n    ```", "```java\n    (in-ns 'packt-clj.tennis)\n    (first-match \"match_scores_1991-2016_unindexed_csv.csv\")\n    ```", "```java\n    {:tourney_slug \"adelaide\",\n     :loser_slug \"michael-stich\",\n     :winner_sets_won \"2\",\n     :match_score_tiebreaks \"63 16 62\",\n     :loser_sets_won \"1\",\n     :loser_games_won \"11\",\n     :tourney_year_id \"1991-7308\",\n     :tourney_order \"1\",\n     :winner_seed \"\",\n     :loser_seed \"6\",\n     :winner_slug \"nicklas-kulti\",\n     :match_order \"1\",\n     :loser_name \"Michael Stich\",\n     :winner_player_id \"k181\",\n     :match_stats_url_suffix \"/en/scores/1991/7308/MS001/match-stats\",\n     :tourney_url_suffix \"/en/scores/archive/adelaide/7308/1991/results\",\n     :loser_player_id \"s351\",\n     :loser_tiebreaks_won \"0\",\n     :round_order \"1\",\n     :tourney_round_name \"Finals\",\n     :match_id \"1991-7308-k181-s351\",\n     :winner_name \"Nicklas Kulti\",\n     :winner_games_won \"13\",\n     :winner_tiebreaks_won \"0\"}\n    ```", "```java\n    (defn five-matches [csv]\n      (with-open [r (io/reader csv)]\n        (->> (csv/read-csv r)\n             sc/mappify\n             (map #(select-keys % [:tourney_year_id\n                                   :winner_name\n                                   :loser_name\n                                   :winner_sets_won\n                                   :loser_sets_won]))\n             (take 5)\n             doall)))\n    ```", "```java\n    (five-matches \"match_scores_1991-2016_unindexed_csv.csv\")\n    ```", "```java\n    ({:tourney_year_id \"1991-7308\",\n      :winner_name \"Nicklas Kulti\",\n      :loser_name \"Michael Stich\",\n      :winner_sets_won \"2\",\n      :loser_sets_won \"1\"}\n     {:tourney_year_id \"1991-7308\",\n      :winner_name \"Michael Stich\",\n      :loser_name \"Jim Courier\",\n      :winner_sets_won \"2\",\n      :loser_sets_won \"0\"}\n    ...etc.\n    ```", "```java\n    (defn five-matches-int-sets [csv]\n      (with-open [r (io/reader csv)]\n        (->> (csv/read-csv r)\n             sc/mappify\n             (map #(select-keys % [:tourney_year_id\n                                   :winner_name\n                                   :loser_name\n                                   :winner_sets_won\n                                   :loser_sets_won]))\n             (sc/cast-with {:winner_sets_won sc/->int\n                         :loser_sets_won sc/->int})\n             (take 5)\n             doall)))\n    ```", "```java\n    {:tourney_year_id \"1991-7308\",\n      :winner_name \"Nicklas Kulti\",\n      :loser_name \"Michael Stich\",\n      :winner_sets_won 2, ;; <----- Real integer!\n      :loser_sets_won 1}\n    ```", "```java\n    (defn federer-wins [csv]\n        (with-open [r (io/reader csv)]\n        (->> (csv/read-csv r)\n             sc/mappify\n             ;; TODO: keep writing code\n             (map #(select-keys % [:winner_name\n                                   :loser_name\n                                   :winner_sets_won\n                                   :loser_sets_won\n                                   :winner_games_won\n                                   :loser_games_won\n                                   :tourney_year_id\n                                   :tourney_slug]))\n             doall)))\n    ```", "```java\n    #(= \"Roger Federer\" (:winner_name %))\n    ```", "```java\n    (defn federer-wins [csv]\n        (with-open [r (io/reader csv)]\n        (->> (csv/read-csv r)\n             sc/mappify\n             (filter #(= \"Roger Federer\" (:winner_name %)))\n             (map #(select-keys % [:winner_name\n                                   :loser_name\n                                   :winner_sets_won\n                                   :loser_sets_won\n                                   :winner_games_won\n                                   :loser_games_won\n                                   :tourney_year_id\n                                   :tourney_slug]))\n             doall)))\n    ```", "```java\n    (defn match-query [csv pred]\n        (with-open [r (io/reader csv)]\n        (->> (csv/read-csv r)\n             sc/mappify\n             (filter pred)\n             (map #(select-keys % [:winner_name\n                                   :loser_name\n                                   :winner_sets_won\n                                   :loser_sets_won\n                                   :winner_games_won\n                                   :loser_games_won\n                                   :tourney_year_id\n                                   :tourney_slug]))\n             doall)))\n    ```", "```java\n    #(or (= \"Roger Federer\" (:winner_name %))\n         (= \"Roger Federer\" (:loser_name %)))\n    ```", "```java\n    #((hash-set (:winner_name %) (:loser_name %)) \"Roger Federer\")\n    ```", "```java\n    #(and \n       (or (= (:winner_name %) \"Roger Federer\")\n           (= (:winner_name %) \"Rafael Nadal\"))\n       (or (= (:loser_name %) \"Roger Federer\")\n           (= (:loser_name %) \"Rafael Nadal\")))\n    ```", "```java\n    #(= (hash-set (:winner_name %) (:loser_name %)) \n        #{\"Roger Federer\" \"Rafael Nadal\"})\n    ```", "```java\n    (defn match-query [csv pred]\n        (with-open [r (io/reader csv)]\n        (->> (csv/read-csv r)\n             sc/mappify\n             (sc/cast-with {:winner_sets_won sc/->int\n                            :loser_sets_won sc/->int\n                            :winner_games_won sc/->int\n                            :loser_games_won sc/->int})\n             (filter pred)\n             (map #(select-keys % [:winner_name\n                                   :loser_name\n                                   :winner_sets_won\n                                   :loser_sets_won\n                                   :winner_games_won\n                                   :loser_games_won\n                                   :tourney_year_id\n                                   :tourney_slug]))\n             doall)))\n    ```", "```java\n    #(and (= (hash-set (:winner_name %) (:loser_name %)) \n          #{\"Roger Federer\" \"Rafael Nadal\"})\n          (= 1 (- (:winner_sets_won %) (:loser_sets_won %))))\n    ```", "```java\n(defn rivalry-data [csv player-1 player-2])\n```", "```java\n:first-victory-player-1 \n:first-victory-player-2 \n:total-matches\n:total-victories-player-1 \n:total-victories-player-2\n:most-competitive-matches\n```", "```java\npackt-clj.tennis> (rivalry-data \"/Users/joseph/Documents/Packt/data/atp-world-tour-tennis-data_zip/data/match_scores_1968-1990_unindexed_csv.csv\" \"Boris Becker\" \"Jimmy Connors\"  )\n{:first-victory-player-1\n  {:winner_name \"Boris Becker\",\n  :loser_name \"Jimmy Connors\",\n  :winner_sets_won 2,\n  :loser_sets_won 1,\n  :winner_games_won 17,\n  :loser_games_won 16,\n  :tourney_year_id \"1986-411\",\n  :tourney_slug \"chicago\"},\n  :first-victory-player-2 nil,\n  :total-matches 5,\n  :total-victories-player-1 5,\n  :total-victories-player-2 0,\n  :most-competitive-matches\n  ({:winner_name \"Boris Becker\",\n  :loser_name \"Jimmy Connors\",\n  :winner_sets_won 2,\n  :loser_sets_won 1,\n  :winner_games_won 17,\n  :loser_games_won 16,\n  :tourney_year_id \"1986-411\",\n  :tourney_slug \"chicago\"}\n  {:winner_name \"Boris Becker\",\n  :loser_name \"Jimmy Connors\",\n  :winner_sets_won 2,\n  :loser_sets_won 1,\n  :winner_games_won 15,\n  :loser_games_won 15,\n  :tourney_year_id \"1986-428\",\n  :tourney_slug \"bolton\"}\n  {:winner_name \"Boris Becker\",\n  :loser_name \"Jimmy Connors\",\n  :winner_sets_won 2,\n  :loser_sets_won 1,\n  :winner_games_won 18,\n  :loser_games_won 14,\n  :tourney_year_id \"1987-311\",\n  :tourney_slug \"london\"}\n  {:winner_name \"Boris Becker\",\n  :loser_name \"Jimmy Connors\",\n  :winner_sets_won 2,\n  :loser_sets_won 1,\n  :winner_games_won 15,\n  :loser_games_won 14,\n  :tourney_year_id \"1987-605\",\n  :tourney_slug \"nitto-atp-finals\"})}\n```"]