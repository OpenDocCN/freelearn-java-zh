["```java\n    management:\n        endpoints:\n            web:\n                exposure:\n                    include: http://localhost:8080/actuator/health: This endpoint provides health information about your application. It is very useful in containerized environments such as Kubernetes to ensure that your application is up and running.\n    ```", "```java\n@Configuration\npublic class SecurityConfig {\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        return http\n                .authorizeHttpRequests(authorize ->\n                      authorize.requestMatchers(\"/actuator/**\")\n                         .hasRole(\"ADMIN\")\n                         .anyRequest().authenticated())\n                .oauth2ResourceServer(oauth2 -> oauth2.jwt(Customizer.withDefaults()))\n                .build();\n    }\n}\n```", "```java\n    public class FileLoader {\n        private String fileName;\n        private List<String> teams;\n        private String folder;\n        public FileLoader(String folder) {\n            this.folder = folder;\n        }\n    }\n    ```", "```java\n    private void loadFile(String fileName) throws Exception {\n           this.fileName = fileName;\n           ObjectMapper mapper = new ObjectMapper();\n           File file = new File(fileName);\n           teams = mapper.readValue(file,\n                   new TypeReference<List<String>>() {\n                   });\n     }\n    ```", "```java\n    public void loadFile() throws IOException {\n        Files.list(Paths.get(folder))\n             .filter(Files::isRegularFile)\n             .findFirst()\n             .ifPresent(file -> {\n                 try {\n                      loadFile(file.toString());\n                 } catch (Exception e) {\n                      e.printStackTrace();\n                 }\n            });\n    }\n    ```", "```java\n    @Endpoint(id = \"football\")\n    public class FootballCustomEndpoint {\n        private FileLoader fileLoader;\n        FootballCustomEndpoint(FileLoader fileLoader){\n            this.fileLoader = fileLoader;\n        }\n    }\n    ```", "```java\n    @ReadOperation\n    public String getFileVersion(){\n        return fileLoader.getFileName();\n    }\n    ```", "```java\n    @WriteOperation\n    public void refreshFile(){\n       try {\n           fileLoader.loadFile();\n       } catch (Exception e) {\n           e.printStackTrace();\n       }\n    }\n    ```", "```java\n    @Configuration\n    public class FootballConfiguration {\n        @Value(\"${football.folder}\")\n        private String folder;\n    }\n    ```", "```java\n    @Bean\n    public FileLoader fileLoader() throws IOException{\n        FileLoader fileLoader = new FileLoader(folder);\n        return fileLoader;\n    }\n    ```", "```java\n    @Bean\n    public FootballCustomEndpoint footballCustomEndpoint(FileLoader fileLoader){\n        return new FootballCustomEndpoint(fileLoader);\n    }\n    ```", "```java\n    @Component\n    public class DataInitializer implements ApplicationRunner {\n        private FileLoader fileLoader;\n        public DataInitializer(FileLoader fileLoader) {\n            this.fileLoader = fileLoader;\n        }\n        @Override\n        public void run(ApplicationArguments args) throws Exception {\n            fileLoader.loadFile();\n        }\n    }\n    ```", "```java\n    football:\n        folder: teams\n    ```", "```java\n    management:\n        endpoints:\n            web:\n                exposure:\n                    include: health,env,metrics,beans,loggers,teams in the root of the project and a file named 1.0.0.json. As content, add an array containing teams – for example, [ \"Argentina\", \"Australia\", \"Brazil\"].\n    ```", "```java\n    @RestController\n    @RequestMapping(\"/football\")\n    public class FootballController {\n        private FileLoader fileLoader;\n        public FootballController(FileLoader fileLoader){\n            this.fileLoader = fileLoader;\n        }\n        @GetMapping\n        public List<String> getTeams(){\n            return fileLoader.getTeams();\n        }\n    }\n    ```", "```java\n    curl http://localhost:8080/actuator/football\n    ```", "```java\n    [ \"Senegal\", \"Argentina\", \"Australia\", \"Brazil\"]\n    ```", "```java\n    curl --request POST http://localhost:8080/actuator/football\n    ```", "```java\ndocker run -e POSTGRES_USER=packt -e POSTGRES_PASSWORD=packt -p 5432:5432 --name postgresql postgres\n```", "```java\npsql -h localhost -U packt\n```", "```java\nCREATE DATABASE football;\n```", "```java\n    management:\n        endpoint:\n            health:\n                probes:\n                    enabled: true\n    ```", "```java\n    @Service\n    public class TradingService {\n    }\n    ```", "```java\n    private ApplicationEventPublisher applicationEventPublisher;\n    public TradingService(ApplicationEventPublisher applicationEventPublisher) {\n        this.applicationEventPublisher = applicationEventPublisher;\n    }\n    ```", "```java\n    public int getPendingOrders() {\n        Random random = new Random();\n        return random.nextInt(100);\n    }\n    ```", "```java\n    public int tradeCards(int orders) {\n        if (getPendingOrders() > 90) {\n            AvailabilityChangeEvent.publish(applicationEventPublisher, new Exception(\"There are more than 90 pending orders\"), LivenessState.BROKEN);\n        } else {\n            AvailabilityChangeEvent.publish(applicationEventPublisher, new Exception(\"working fine\"), LivenessState.CORRECT);\n        }\n        return orders;\n    }\n    ```", "```java\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-data-jdbc</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.postgresql</groupId>\n        <artifactId>postgresql</artifactId>\n        <scope>runtime</scope>\n    </dependency>\n    ```", "```java\n    spring:\n        datasource:\n            url: jdbc:postgresql://localhost:5432/football\n            username: packt\n            password: packt\n    ```", "```java\n    @Component\n    public class FootballHealthIndicator implements HealthIndicator {\n    }\n    ```", "```java\n    private JdbcTemplate template;\n    public FootballHealthIndicator(JdbcTemplate template) {\n        this.template = template;\n    }\n    ```", "```java\n    @Override\n    public Health health() {\n        try {\n            template.execute(\"SELECT 1\");\n            return Health.up().build();\n        } catch (DataAccessException e) {\n        return Health.down().withDetail(\"Cannot connect to database\", e).build();\n        }\n    }\n    ```", "```java\n    try {\n        Thread.sleep(10000);\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n    ```", "```java\n    watch curl http://localhost:8080/actuator/health/readiness\n    ```", "```java\n    watch curl http://localhost:8080/actuator/health/readiness\n    watch -n 1 -x curl --request POST -H \"Content-Type: application/json\" --data \"1\" http://localhost:8080/football\n    ```", "```java\nwatch curl http://localhost:8080/actuator/health\n```", "```java\ndocker stop postgresql\n```", "```java\ndocker run -d -p 9411:9411 openzipkin/zipkin\n```", "```java\n    <dependency>\n       <groupId>io.micrometer</groupId>\n       <artifactId>micrometer-tracing-bridge-otel</artifactId>\n    </dependency>\n    <dependency>\n       <groupId>io.opentelemetry</groupId>\n       <artifactId>opentelemetry-exporter-zipkin</artifactId>\n    </dependency>\n    ```", "```java\n    management\n        tracing:\n            sampling:\n                probability: 1.0\n    ```", "```java\n    spring:\n        application:\n            name: trading-service\n    ```", "```java\n    @GetMapping(\"ranking/{player}\")\n    public int getRanking(@PathVariable String player) {\n        logger.info(«Preparing ranking for player {}», player);\n        if (random.nextInt(100) > 97) {\n            throw new RuntimeException(\"It's not possible to get the ranking for player \" + player\n                  + \" at this moment. Please try again later.\");\n        }\n        return random.nextInt(1000);\n    }\n    ```", "```java\n            <dependency>\n               <groupId>io.micrometer</groupId>\n               <artifactId>micrometer-tracing-bridge-otel</artifactId>\n            </dependency>\n            <dependency>\n               <groupId>io.opentelemetry</groupId>\n               <artifactId>opentelemetry-exporter-zipkin</artifactId>\n            </dependency>\n            ```", "```java\n        @RestController\n        @RequestMapping(\"/players\")\n        public class PlayersController {\n        }\n        ```", "```java\n        private RestTemplate restTemplate;\n        public PlayersController(RestTemplateBuilder restTemplateBuilder) {\n           this.restTemplate = restTemplateBuilder.build();\n        }\n        ```", "```java\n        @GetMapping\n        public List<PlayerRanking> getPlayers() {\n           String url = \"http://localhost:8080/football/ranking\";\n           List<String> players = List.of(\"Aitana Bonmatí\", \"Alexia Putellas\", \"Andrea Falcón\");\n           return players.stream().map(player -> {\n              int ranking = this.restTemplate.getForObject(url + \"/\" + player, int.class);\n              return new PlayerRanking(player, ranking);\n           }).collect(Collectors.toList());\n        }\n        ```", "```java\n        management:\n            tracing:\n                sampling:\n                    probability: 1.0\n        spring:\n            application:\n                name: football-client\n        ```", "```java\n        server:\n          port: 8090\n        ```", "```java\n        watch curl http://localhost:8090/players\n        ```", "```java\nprivate final ObservationRegistry observationRegistry;\npublic FootballController(ObservationRegistry observationRegistry) {\n        this.observationRegistry = observationRegistry;\n}\n```", "```java\n@GetMapping(\"ranking/{player}\")\npublic int getRanking(@PathVariable String player) {\n   Observation collectObservation = Observation.createNotStarted(\"collect\", observationRegistry);\n   collectObservation.lowCardinalityKeyValue(\"player\", player);\n   collectObservation.observe(() -> {\n      try {\n          logger.info(\"Simulate a data collection for player {}\", player);\n          Thread.sleep(random.nextInt(1000));\n      } catch (InterruptedException e) {\n          e.printStackTrace();\n      }\n   });\n   Observation processObservation = Observation.createNotStarted(\"process\", observationRegistry);\n   processObservation.lowCardinalityKeyValue(\"player\", player);\n   processObservation.observe(() -> {\n            try {\n                logger.info(\"Simulate a data processing for player {}\", player);\n                Thread.sleep(random.nextInt(1000));\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        return random.nextInt(1000);\n    }\n```", "```java\n    management:\n        endpoints:\n            web:\n                exposure:\n                    include: health,env,loadTeams.jmx script. You can find it in the chapter3/recipe3-5/jmeter folder, as explained in the *Getting ready* section. This script makes a request to the application’s /football path and returns a list of teams. This process is executed by 30 threads infinitely.You can adjust some parameters of the load tests depending on the resources of your development computer. For instance, I used 30 threads to overload my computer, but maybe you need more or even fewer threads than that:\n    ```", "```java\n    {\n        \"name\": \"system.cpu.usage\",\n        \"description\": \"The \\\"recent cpu usage\\\" of the system the application is running in\",\n        \"measurements\": [\n            {\n                \"statistic\": \"VALUE\",\n                \"value\": 0.48494983277591974\n            }\n        ],\n        \"availableTags\": []\n    }\n    ```", "```java\n    @Service\n    public class DataService {\n        private JdbcTemplate jdbcTemplate;\n        public DataService(JdbcTemplate jdbcTemplate) {\n            this.jdbcTemplate = jdbcTemplate;\n        }\n    }\n    ```", "```java\n    public String getPlayerStats(String player) {\n        Random random = new Random();\n        jdbcTemplate.execute(\"SELECT pg_sleep(\" + random.nextDouble(1.0) + \")\");\n        return \"some complex stats for player \" + player;\n    }\n    Now, you can run the application.\n    ```", "```java\n    @Service\n    public class AuctionService {\n        private Map<String, String> bids = new ConcurrentHashMap<>();\n        private Counter bidReceivedCounter;\n        private Timer bidDuration;\n        Random random = new Random();\n        public AuctionService(MeterRegistry meterRegistry) {\n            meterRegistry.gauge(\"football.bids.pending\", bids, Map::size);\n            this.bidReceivedCounter = meterRegistry.counter(\"football.bids.receieved\");\n            this.bidDuration = meterRegistry.timer(\"football.bids.duration\");\n        }\n    }\n    ```", "```java\n    public void addBid(String player, String bid) {\n        bidDuration.record(() -> {\n            bids.put(player, bid);\n            bidReceivedCounter.increment();\n            try {\n                Thread.sleep(random.nextInt(20));\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            bids.remove(player);\n        });\n    }\n    ```", "```java\n    private AuctionService auctionService;\n    public FootballController(AuctionService auctionService) {\n       this.auctionService = auctionService;\n    }\n    ```", "```java\n    @PostMapping(\"/bid/{player}\")\n    public void addBid(@PathVariable String player, \n                                 @RequestBody String bid) {\n          auctionService.addBidAOP(player, bid);\n    }\n    ```", "```java\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-aop</artifactId>\n</dependency>\n```", "```java\n@Bean\nObservedAspect observedAspect(ObservationRegistry observationRegistry) {\n    return new ObservedAspect(observationRegistry);\n}\n```", "```java\n@Observed(name = \"football.auction\")\n@Service\npublic class AuctionService {\n}\n```", "```java\npublic void addBidAOP(String player, String bid) {\n    bids.put(bid, player);\n    try {\n        Thread.sleep(random.nextInt(20));\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n    bids.remove(bid);\n}\n```", "```java\n{\n    \"name\": \"football.auction\",\n    \"baseUnit\": \"seconds\",\n    \"measurements\": [\n        {\n            \"statistic\": \"COUNT\",\n            \"value\": 1648870\n        },\n        {\n            \"statistic\": \"TOTAL_TIME\",\n            \"value\": 15809.168264051\n        },\n        {\n            \"statistic\": \"MAX\",\n            \"value\": 0.02272261\n        }\n    ],\n    \"availableTags\": [\n        {\n            \"tag\": \"method\",\n            \"values\": [\n                \"addBidAOP\"\n            ]\n        },\n        {\n            \"tag\": \"error\",\n            \"values\": [\n                \"none\"\n            ]\n        },\n        {\n            \"tag\": \"class\",\n            \"values\": [\n                \"com.packt.footballobs.service.AuctionService\"\n            ]\n        }\n    ]\n}\n```", "```java\ncurl http://localhost:8080/football/bid/357669 \\\n--request POST \\\n--data \"200\"\n```", "```java\ndocker run -d --name prometheus -p 9090:9090 \\\n-v prometheus.yml:/etc/prometheus/prometheus.yml \\\nprom/prometheus\n```", "```java\ndocker run -d --name grafana -p 3000:3000 grafana/grafana\n```", "```java\n    <dependency>\n        <groupId>io.micrometer</groupId>\n        <artifactId>micrometer-registry-prometheus</artifactId>\n    </dependency>\n    ```", "```java\n    management:\n        endpoint:\n            health:\n                probes:\n                    enabled: true\n            prometheus:\n                enabled: true\n        endpoints:\n            web:\n                exposure:\n                    include: health,env,metrics,beans,loggers,football,prometheus\n    ```", "```java\n    ip addr show\n    ```", "```java\n    ipconfig\n    ```", "```java\n    global:\n      scrape_interval: 3s\n    scrape_configs:\n      - job_name: 'football_trading_app'\n        metrics_path: '/actuator/prometheus'\n        static_configs:\n          - targets: ['172.26.109.186:8080']\n    ```", "```java\n    docker run -d --name prometheus -p 9090:9090 \\\n    prom/prometheus image, exposing port 9090 and mounting the prometheus.yml file in the container filesystem at /etc/prometheus/prometheus.yml. $(pwd) is a command substitution in Linux that is used to insert the current directory.\n    ```", "```java\n    docker run -d --name grafana -p 3000:3000 grafana/grafana\n    ```", "```java\n    docker ps\n    ```", "```java\n    docker inspect 5affa2883c43 | grep IPAddress\n    ```", "```java\n    private static final Logger logger = LoggerFactory.getLogger(TradingService.class);\n    ```", "```java\n    public int getPendingOrders() {\n        logger.debug(\"Ensuring that pending orders can be calculated\");\n        Random random = new Random();\n        int pendingOrders = random.nextInt(100);\n        logger.info(pendingOrders + \" pending orders found\");\n        return pendingOrders;\n    }\n    ```", "```java\n    public int tradeCards(int orders) {\n        if (getPendingOrders() > 90) {\n            logger.warn(\"There are more than 90 orders, this can cause the system to crash\");\n            AvailabilityChangeEvent.publish(applicationEventPublisher, new Exception(\"There are more than 90 pending orders\"), LivenessState.BROKEN);\n        } else {\n            logger.debug(\"There are more less than 90 orders, can manage it\");\n            AvailabilityChangeEvent.publish(applicationEventPublisher, new Exception(\"working fine\"), LivenessState.CORRECT);\n            }\n        return orders;\n    }\n    ```", "```java\n    watch -n 1 -x curl --request POST -H \"Content-Type: application/json\" --data \"1\" http://localhost:8080/football\n    ```", "```java\n    curl --request POST \\\n    -H 'Content-Type: application/json' \\\n    -d '{\"configuredLevel\": \"DEBUG\"}' \\\n    http://localhost:8080/actuator/loggers/com.packt.footballobs.service.TradingService\n    ```", "```java\n    curl --request POST \\\n    -H 'Content-Type: application/json' \\\n    -d '{\"configuredLevel\": \"WARN\"}' \\\n    http://localhost:8080/actuator/loggers/com.packt.footballobs.service.TradingService\n    ```"]