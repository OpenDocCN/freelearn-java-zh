["```java\nString html =  \n`<HTML>                                      \n    <BODY> \n        <H1>Meaning of life</H1>  \n    </BODY> \n</HTML> \n`; \n```", "```java\n<HTML> \n   <BODY> \n          <H1>Meaning of life</H1>  \n   </BODY> \n</HTML>\n```", "```java\nString html = \"<HTML>\\n\\t<BODY>\\n\\t\\t<H1>Meaning in life</H1>\\n\\t</BODY>\\n</HTML>\"; \n```", "```java\nString html =  \"<HTML>\" + \n\"\\n\\t\" + \"<BODY>\" + \n\"\\n\\t\\t\" + \"<H1>Meaning of life</H1>\" + \n\"\\n\\t\" + \"</BODY>\" + \n\"\\n\" + \"</HTML>\";\n```", "```java\nString html =  \"<HTML>\" + \n                    \"\\n\\t\" + \"<BODY>\" + \n                        \"\\n\\t\\t\" + \"<H1>Meaning of life</H1>\" + \n                    \"\\n\\t\" + \"</BODY>\" + \n                \"\\n\" + \"</HTML>\"; \n```", "```java\n<HTML> \n   <BODY> \n          <H1>\\n - new line, \\t - tab</H1>  \n   </BODY> \n</HTML> \n```", "```java\nString html =  \"<HTML>\" + \n                    \"\\n\\t\" + \"<BODY>\" + \n                        \"\\n\\t\\t\" + \"<H1>\\\\n - new line, \\\\t - tab</H1>\" \n                        +  \n                    \"\\n\\t\" + \"</BODY>\" + \n                \"\\n\" + \"</HTML>\";\n```", "```java\n(\\w)(\\s+))[\\.] \n```", "```java\nString patternToMatch = \"(\\\\w)(\\\\s+)([\\\\.,])\";     // Isn't that a lot \n                                                   // to digest? \n                                                   // Does the regex  \n                                                   // pattern has\n                                                   // a single \n                                                   // backslash, or,\n                                                   // two of them? \n```", "```java\nString html =  \n`<HTML>                                      \n    <BODY> \n        <H1>Meaning of life</H1>  \n    </BODY> \n</HTML> \n`; \n```", "```java\nRawStringDelimeter {RawStringCharacters} RawStringDelimeter \n```", "```java `` ```", "```java\nString html =  \n``<HTML>                                      \n    <BODY> \n        <H1>I think I like ` as a delimiter!</H1>  \n    </BODY> \n</HTML> \n``; \n```", "```java\nString html =  \n```", "```java too(!)</H1>  \n    </BODY> \n</HTML> \n```", "```java\n\nIf there is a mismatch between the count of backticks in the opening and closing delimiters, the code won't compile.\n\n# Treating escape values\n\nThe Unicode and escape sequences are never interpreted in a raw string literal value.\n\nA lexer is a software program that performs **lexical analysis**. Lexical analysis is the process of tokenizing a stream of characters into words and tokens. As you read this line, you are analyzing this string lexically, using the spaces to separate chunks of letters as words.\n\nThis analysis is disabled for the raw string literals at the start of the opening backtick. It is re-enabled at the closing backtick.\n\nDon't replace the backtick in your string value with its Unicode escape (that is, `\\u0060 in`), for consistency. \n\nThe only exceptions to this rule are `CR` (carriage return—`\\u000D`) and `CRLF` (carriage return and line feed—`\\u000D\\u000A`). Both of these are translated to `LF` (line feed—`\\u000A`).\n\n# Raw string literals versus traditional string literals\n\nThe introduction of raw string literals will not change the interpretation of the traditional string literal values. This includes their multiline capabilities and how they handle the escape sequences and delimiters. A traditional string can include Unicode escapes (JLS 3.3) or escape sequences (JLS 3.10.6).\n\nA Java class file, that is, the Java bytecode, does not record whether a string constant was created using a traditional string or a raw string. Both traditional and raw string values are stored as instances of the `java.lang.String` class. \n\n# Interpreting escape sequences\n\nTo interpret escape sequences in multiline raw string values, Java will add methods to the `String` class—`unescape()` and `escape()`:\n\n```", "```java\n\nConsidering raw string literals at Oracle, work is in progress. Oracle is considering swapping the names of the methods `unescape()` and `escape()`, or even renaming them.\n\n# The unescape() method\n\nBy default, the raw string literals don't interpret the escape sequences. However, what if you want them to do so? When used with a raw string, the `unescape()` method will match the sequence of the characters following `\\` with the sequence of Unicode escapes and escape sequences, as defined in the **Java Language Specifications** (**JLS**). If a match is found, the escape sequence will not be used as a regular combination of letters; it will be used as an escape sequence.\n\nThe following code doesn't interpret `\\n` as a newline escape sequence:\n\n```", "```java\n\nThe output of the preceding code is as follows:\n\n```", "```java\n\nHowever, the following code will interpret `\\n` as a newline escape sequence:\n\n```", "```java\n\nThe output of the preceding code will provide the `eJava` and `Guru` string values on separate lines, as follows:\n\n```", "```java\n\nWhen interpreted as escape sequences, a combination of letters that is used to represent them, is counted as a control character of the length `1`. The output of the following code will be `1`:\n\n```", "```java\n\n# The escape() method\n\nThe `escape()` method will be used to invert the escapes. The following table shows how it will convert the characters:\n\n| **Original character** | **Converted character** |\n| Less than `' '` (space) | Unicode or character escape sequences |\n| Above `~` (tilde) | Unicode escape sequences |\n| `\"` (double quotes) | Escape sequence |\n| `'` (single quote) | Escape sequence |\n| `\\` (backslash) | Escape sequence |\n\nThe following example doesn't include a newline in the output:\n\n```", "```java\n\nThe output of the preceding code is as follows:\n\n```", "```java\n\nConsider the following code:\n\n```", "```java\n\nThe output of the preceding code is as follows (`•` is converted to its equivalent escape value):\n\n```", "```java\n\n# Managing margins\n\nSuppose that you have to import multiline text from a file in your Java code. How would you prefer to treat the margins of the imported text? You may have to align or indent the imported text. The text might use a custom newline delimiter (say, `[`), which you might prefer to strip from the text. To work with these requirements, a set of new methods, such as `align()`, `indent()`, and `transform()`, are being added to the `String` class, which we'll cover in the next section.\n\n# The align() method\n\nWhen you define a multiline string value, you might choose to format the string against the left margin or align it with the indentation used by the code. The string values are stored with the margin intact. The `align()` method will provide incidental indentation support; it will strip off any leading or trailing blank lines, then justify each line, without losing the indentations.\n\nThe following is an example:\n\n```", "```java\n\nThe output of the preceding code is as follows:\n\n```", "```java\n\n# The indent(int) method\n\nThe `indent(int)` method will enable developers to specify custom indentations for their multiline string values. You can pass a positive number, `i`, to `indent(int)`, to add `i` spaces (`U+0020`) to your text, or you can pass a negative number, to remove a given number of whitespaces from each line of your multiline text.\n\nAn example is as follows:\n\n```", "```java\n\nThe output of the preceding code is as follows:\n\n```", "```java\n\nThe `indent(int)` method can be used to add or remove whitespaces from each line in a multitext value. By passing a positive number, you can add whitespaces, and you can remove them by passing negative values.\n\n# The overloaded align(int) method\n\nThe `align(int)` method will first align the rows of a multistring value, and will then indent it with the specified spaces. The following is an example:\n\n```", "```java\n\nThe output of the preceding code is as follows (the text on each line is preceded by fifteen spaces):\n\n```", "```java\n\n# The detab(int) and entab methods\n\nA tab (`U+0009`) usually represents four whitespaces (`U+0020`). However, not all of the applications convert between tabs and whitespaces when they use text that includes a mix of whitespaces and tabs. To combat this challenge with the multiline text, the `String` class will include two methods, `detab(int)` and `entab(int)`, which will convert a tab to whitespaces, and vice versa:\n\n```", "```java\n\nLet's modify the preceding example, so that the content includes tabs instead of whitespaces, as follows:\n\n```", "```java\n\nThe output of the preceding code is as follows (each tab is converted to one whitespace):\n\n```", "```java\n\n# The transform() method\n\nSuppose that a file includes the following text, using `[` at the beginning of a new line:\n\n```", "```java\n\nNow, suppose that you must remove the delimiter, `[`, used at the beginning of all lines. You can use the `transform()` method to customize the margin management, adding the `String` class:\n\n```", "```java\n\nThe following is an example that uses the method `transform()` to remove the custom margin characters from the multiline text:\n\n```", "```java\n\nThe next section will include some common cases where using raw string literals over traditional strings will benefit you tremendously.\n\n# Common examples\n\nIf you have used stored JSON, XML data, database queries, or file paths as string literals, you know it is difficult to write and read such code. This section will highlight examples of how a traditional raw string will improve the readability of your code when working with these types of data.\n\n# JSON data\n\nSuppose that you have the following JSON data to be stored as a Java string:\n\n```", "```java\n\nThe following code shows how you would perform this action with the traditional `String` class, escaping the double quotes within the data by using `\\` and adding a newline escape sequence:\n\n```", "```java\n\nTo be honest, it took me quite a while to write the preceding code, escaping the double quotes with the backslash. As you can see, this code is not readable.\n\nThe following example shows how you can code the same JSON data using raw string literals, without giving up the code readability:\n\n```", "```java{\"plastic\": { \n  \"id\": \"98751\", \n  \"singleuse\": { \n    \"item\": [ \n      {\"value\": \"Water Bottle\", \"replaceWith\": \"Steel Bottle()\"}, \n      {\"value\": \"Straw\", \"replaceWith\": \"Ban Straws\"}, \n      {\"value\": \"Spoon\", \"replaceWith\": \"Steel Spoon\"} \n    ] \n  } \n}}```", "```java\n\n# XML data\n\nThe following code is an example of XML data that you might need to store using a Java string:\n\n```", "```java\n\nThe following code shows how you can define the preceding data as a `String` literal by using the appropriate escape sequences:\n\n```", "```java\n\nAgain, the escape sequences added to the preceding code (`\\` to escape `\"` and `\\n` to add newline) make it very difficult to read and understand the code. The following example shows how you can drop the programming-specific details from the data by using raw string literals:\n\n```", "```java \n<plastic id=\"98751\"> \n  <singleuse> \n    <item value=\"Water Bottle\" replaceWith=\"Steel bottle\" /> \n    <item value=\"Straw\" replaceWith=\"Ban Straws\" /> \n    <item value=\"spoon\" replaceWith=\"Steel Spoon\" /> \n  </singleuse> \n</plastic> \n```", "```java\n\n# File paths\n\nThe file paths on Windows OS use a backslash to separate the directories and their subdirectories. For instance, `C:\\Mala\\eJavaGuru` refers to the `eJavaGuru` subdirectory in the `Mala` directory in the `C:` drive. Here's how you can store this path by using a traditional string literal:\n\n```", "```java\n\nWith raw string literals, you can store the same file path as follows (changes are highlighted in bold):\n\n```", "```java\n\n# Database queries\n\nSuppose that you have to create an SQL query that includes the column names, table names, and literal values. The following code shows how you would typically write it, using traditional strings:\n\n```", "```java\n\nYou can also write the code as follows, using quotes around the column or table names, depending on the target database management system:\n\n```", "```java\n\nThe raw string literal values are much more readable, as shown in the following code:\n\n```", "```javaSELECT 'talk_title', 'speaker_name'  \n   FROM   'talks', 'speakers'  \n   WHERE  'talks.speaker_id' = 'speakers.speaker_id' \n   AND    'talks.duration' > 50  \n```"]