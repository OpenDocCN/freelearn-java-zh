- en: '4'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Java Object Pooling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our mission to make our Java applications highly performant includes a look
    at Java **object pooling**. This chapter dives into the concept of object pooling
    in Java and how to achieve high performance with them in your Java applications.
  prefs: []
  type: TYPE_NORMAL
- en: The chapter begins with an explanation of object pooling and how to implement
    an **object pool** in Java. Sample code is provided to help you understand object
    pooling operations specific to the Java programming language. You will also have
    the opportunity to learn about the advantages and disadvantages of object pooling
    in Java. Finally, the chapter shows how you can implement performance testing
    with Java object pools.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Jumping into the object pool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advantages and disadvantages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you should have a strong theoretical understanding
    of Java object pooling as well as hands-on implementation experience. This experience
    can help ensure you get high performance out of your Java applications.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To follow the examples and instructions in this chapter, you will need the ability
    to load, edit, and run Java code. If you have not set up your development environment,
    please refer back to [*Chapter 1*](B21942_01.xhtml#_idTextAnchor014).
  prefs: []
  type: TYPE_NORMAL
- en: 'The finished code for this chapter can be found here: [https://github.com/PacktPublishing/High-Performance-with-Java/tree/main/Chapter04](https://github.com/PacktPublishing/High-Performance-with-Java/tree/main/Chapter04).'
  prefs: []
  type: TYPE_NORMAL
- en: Jumping into the object pool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we jump into the object pool, let’s look at what an object pool is.
  prefs: []
  type: TYPE_NORMAL
- en: Object pool
  prefs: []
  type: TYPE_NORMAL
- en: An object pool is a collection (pool) of objects that can be reused.
  prefs: []
  type: TYPE_NORMAL
- en: Using object pools is an optimization approach that can positively impact the
    performance of an application. Instead of recreating objects every time we need
    them, we pool a collection of objects and simply recycle them. To help understand
    object pooling, consider a real-world example of a physical library. The library
    can lend out books (our objects) and return them to the collection (our pool)
    when the person is done with the book. This allows the library to reissue the
    book to the next person that needs it. Consider the alternative. If the library
    destroyed (garbage collection) the book after each use, it would have to create
    a new one each time it is needed. This would not be efficient.
  prefs: []
  type: TYPE_NORMAL
- en: Database example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A common object pooling implementation in Java programming is with database
    connections. The typical approach to database connections is to open a connection
    to the database and then perform the desired operations to update or query the
    database. The **open-query-close** process is used. The problem with this approach
    is that opening and closing databases frequently can impact the overall performance
    of the Java application. This processing overhead is something we should try to
    avoid.
  prefs: []
  type: TYPE_NORMAL
- en: The object pooling approach, with our database example, involves maintaining
    a pool of pre-created database requests that are idle. When the app signals a
    request for a database connection, one is used from the pool. The next section
    demonstrates how to create and use these pools in a Java application.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing an object pool in Java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Implementing an object pool, based on the database connection example from the
    previous section, involves a database connection class, an object pool class,
    and a class that contains a `main()` method. Let’s look at each of these individually.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This example simulates object pooling and does not connect to an actual database.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we have our `DBConnect` class. This is the class that we will pool:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As you can see by the preceding code, there are placeholders for functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we create a `DBConnectObjectPool` class to maintain a collection (pool)
    of `DBConnect` objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As shown in the preceding code, we assume a maximum number of connections. This
    is considered a best practice.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, we have a partial application to demonstrate how to use our object
    pool:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: When our application requests a database connection, one is provided from the
    pool. In the case when a connection is not available from the pool, a new one
    is created. We do check to ensure that we do not exceed the maximum number of
    allowed connections. Lastly, after a `DBConnect` object is used, it is returned
    to the object pool.
  prefs: []
  type: TYPE_NORMAL
- en: Advantages and disadvantages of object pooling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you understand what object pooling is and how to implement it in Java,
    we should consider if this is the right strategy for our application. With most
    application code optimization approaches, there are both advantages and disadvantages.
    This section looks at both.
  prefs: []
  type: TYPE_NORMAL
- en: Advantages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are several potential advantages of using object pooling. These advantages
    can be grouped into performance, resource management, and scalability categories.
  prefs: []
  type: TYPE_NORMAL
- en: Performance advantages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Implementing object pooling stands to allow us to avoid the overhead from object
    creation. This approach is especially useful in high transaction applications
    and when system response time is important. Through object pooling, we can help
    ensure our Java applications are able to be more performant by avoiding excessive
    object creation.
  prefs: []
  type: TYPE_NORMAL
- en: We can also experience consistent performance between app usage. For example,
    using object pooling should result in consistent app performance with both a minimal
    load and a heavy load. This predictable behavior is possible due to the stability
    of our application. That stability is enabled by avoiding frequent object creation
    and a heavy reliance on garbage collection.
  prefs: []
  type: TYPE_NORMAL
- en: Resource management advantages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the context of object pooling advantages, a resource refers to real time,
    processing load, and memory. Reducing the number of object creation and destruction
    operations is a benefit of the object pooling approach. The example used earlier
    in this chapter was with database connections. That example was used because database
    connection operations are notoriously resource hogs. The object pooling approach
    reduces the time it takes to perform these operations and is less resource intensive.
  prefs: []
  type: TYPE_NORMAL
- en: Another resource management advantage is that it increases our memory management
    schema. When object creation is not controlled, the amount of memory consumed
    is variable and could result in system errors.
  prefs: []
  type: TYPE_NORMAL
- en: Scalability advantages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The third category of advantages is the ability for our applications to be more
    scalable. This is especially true when we have applications with a large number
    of simultaneous users. It is also beneficial when dealing with database connections
    where the database is a shared resource. The object pool essentially serves as
    a buffer for those requests.
  prefs: []
  type: TYPE_NORMAL
- en: Another reason our applications that use object pooling are more scalable is
    the increased amount of control we have with our resources. In the database connection
    example presented earlier in this chapter, we set the maximum number of objects
    that could be in the pool.
  prefs: []
  type: TYPE_NORMAL
- en: Disadvantages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Unfortunately, there are more potential disadvantages to using object pooling
    than there are advantages. These disadvantages can be grouped into code complexity
    and resource management categories.
  prefs: []
  type: TYPE_NORMAL
- en: Code complexity disadvantages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Like with any non-standard programming approach, object pooling adds complexity
    to our code. We create our object pooling-related classes, which must contain
    algorithms to manage the object pool and interfaces with the main program. Although
    it is not apt to result in bloated code, it can make it difficult to maintain.
  prefs: []
  type: TYPE_NORMAL
- en: Object pooling, when implemented in a Java application, adds another component
    to test each time the system, connected systems, or data changes. This can be
    time and resource intensive.
  prefs: []
  type: TYPE_NORMAL
- en: Resource management disadvantages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is always a risk, especially during peak load times, of having enough
    available resources. When we set a maximum size of our object pools, they might
    not be sufficient to handle those peak load times. This can also be referred to
    as **resource starvation** because all objects in our pool have been allocated,
    preventing new requests from being queued. These delays can result in overall
    performance lag and user dissatisfaction.
  prefs: []
  type: TYPE_NORMAL
- en: Working with memory allocation and deallocation can be problematic. If we do
    not, for example, manage how objects are returned to the pool, there could be
    data loss. This could compound a situation where there are no objects available
    in the pool. Implementing error checking and exception handling becomes critical.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we need to maintain the balance of an object pool being too large or
    too small. If it is too small, it could result in extensive queue times for pooled
    objects. If the pool is too large, the application might overconsume memory, taking
    away from other areas of the application that could make use of it.
  prefs: []
  type: TYPE_NORMAL
- en: After looking at both the advantages and disadvantages, you should be able to
    determine whether object pooling is ideally suited for your application.
  prefs: []
  type: TYPE_NORMAL
- en: Performance testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we implement object pooling in our Java applications, we want to do three
    things:'
  prefs: []
  type: TYPE_NORMAL
- en: Ensure our program works
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prove that our implementation resulted in greater performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quantify the optimization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In previous sections, we looked at how to implement object pools in Java. In
    this section, we will look at how to design a performance test, how to implement
    the object pooling performance test, and how to analyze the testing results.
  prefs: []
  type: TYPE_NORMAL
- en: Designing a performance test
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After we decide to implement a performance test, our first action is to design
    the test. The questions we need to answer here include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: What is our goal?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What will we measure?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How will we measure?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What conditions will exist for our tests?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With these questions in mind, we can start designing our performance test. We
    should have a clear goal or set of goals for our performance test. We might, for
    example, want to focus on system memory, CPU load, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Once we have a specific goal, we must decide what to measure. In testing, what
    we measure are considered **key performance indicators** (**KPIs**). The performance
    testing of object pools might be memory usage, CPU use, data throughput, and response
    time. These are just some examples.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will need to set up our test environment and create test scenarios.
    The test environment closely replicates the production system. You might duplicate
    your system in a development environment, so the live system is not impacted.
    Likewise, the test scenarios should closely resemble the real-world use of your
    system. To the extent possible, we should create as many different scenarios as
    needed to represent what our live system handles.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you are ready to document your test plan and implement it. The
    next section covers how to implement a performance test.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a performance test
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Implementing your test plan should not be terribly difficult. Here, you are
    simply putting your plan into action. The test environment is established, and
    you run your test scenarios. As the test is running, you should be collecting
    the data for later analysis. Of critical importance is the ability to reproduce
    your test conditions to support future comparative tests.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at how a performance test might be written in Java using the database
    connection example from this chapter. We will set the goal of decreasing the time
    our application takes to obtain a database connection from our object pool and
    perform a simple operation on that database. Our test plan will compare the results
    of our test with the same test on a version of our application that does not implement
    an object pool.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our code starts with the class declaration and class variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will write the first part of the `main()` method. This first snippet
    of code will be how we perform the test with our object pool:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will write the code to test without using the object pool:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'With both sets of performance testing written, we need to add the ability to
    calculate and output the results. We generate the results by simply subtracting
    the `startTime` value from the `endTime` value and converting it to milliseconds.
    We then output the results to the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This simple example of an object pool performance test is intended to give you
    a general idea of how to code these tests. Every application is different and
    how you write your performance tests will vary.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing the results
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once our tests have concluded, we can analyze the results. How you analyze the
    results will depend on your goals and KPIs. The analysis task should not be rushed.
    Remember, you collected this data so it could help inform your decision on your
    object pool. The complexity will vary based on the performance test plan.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given the database connection example, we can simply add it to the bottom of
    our `DBConnectionPerformanceTest` class to compare the two sets of results. Here
    is the first section of that code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we simply check to see whether `totalTime_withPooling` is less
    than `totalTime_withoutPooling`. If this is the case, the relevant results are
    displayed on the console.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will check to see whether `totalTime_withPooling` is greater than
    `totalTime_withoutPooling`. The relevant results are displayed on the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Our final code snippet executes when the first two conditions are not met.
    This means that both tests took the same amount of time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: As with all testing, you should document your plan, the test results, your analysis,
    your conclusions, and your actions following the testing. This robust documentation
    approach will help you retain the history of your testing in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter took an in-depth look at Java object pooling. It was suggested
    that object pooling is an important technique for ensuring our Java applications
    perform at a high level. Armed with theoretical knowledge, the chapter explored
    the advantages and disadvantages of object pooling. We focused on areas such as
    memory, CPU use, and code complexity. Finally, we demonstrated how to create a
    performance testing plan, how to implement it, and how to analyze the results.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will focus on algorithm efficiencies. Our goal will
    be to ensure our algorithms have low time complexities. The chapter will demonstrate
    inefficient algorithms and how to transform them to support high performance.
  prefs: []
  type: TYPE_NORMAL
