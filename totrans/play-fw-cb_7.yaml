- en: Chapter 7. Deploying Play 2 Web Apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Deploying a Play application on Heroku
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying a Play application on AWS Elastic Beanstalk
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying a Play application with CoreOS and Docker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying a Play application with Dokku
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying a Play application with Nginx
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will explore various deployment options for a Play 2.0 web
    application. In the advent of numerous cloud-based services, such as **Infrastructure
    as a Service** (**IaaS**) and **Platform as a Service** (**PaaS**) service offerings,
    we are given multiple options on how we can deploy our Play 2.0 into different
    environments, be it for development, testing, integration, or production.
  prefs: []
  type: TYPE_NORMAL
- en: We explore this using popular developer services such as Heroku and Amazon web
    services. We will also look into using popular developer tools such as **Docker**
    and **Dokku** to deploy Play 2 web applications.
  prefs: []
  type: TYPE_NORMAL
- en: We will also use two different operating systems as our base operating system
    in **CentOS** and **CoreOS**.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we aim to show the contrast in the efforts required to deploy
    web apps with cloud services and manually deploying web apps with a raw virtual
    machine. We will also look at how modern tools allow developers to be more efficient
    by focusing more time on development instead of doing what to the infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying a Play application on Heroku
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will deploy a Play webapp on **Heroku**, specifically, the
    Heroku Cedar stack that supports the Play Framework. Deploying on Heroku requires
    some knowledge in Git, the popular source control management software.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, sign up for a Heroku account by visiting the following link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://signup.heroku.com/](https://signup.heroku.com/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Install the Heroku CLI tools (more information at [https://devcenter.heroku.com/articles/heroku-command](https://devcenter.heroku.com/articles/heroku-command)).
    Once installed, you should now be able to login to Heroku using the CLI tools
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create our Play webapp using the activator template, `computer-database-scala`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once our webapp has been generated, change into the project root of `play2-heroku`
    and initialize Git on the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new `heroku` app. The default app name will be assigned by Heroku,
    for this recipe, `shielded-dusk-8715`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add Heroku-specific configs in the project root directory. Optionally, you
    can create the file, `system.properties`, with the following contents, to specify
    that we will require JDK version 8:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the Heroku file, `Procfile`, which is the standard Heroku text-based
    file to declare your apps and to run commands and other environment variables,
    in the project root with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify the location of our new Heroku git remote with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add and commit our webapp boilerplate code to git:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, let''s deploy our webapp to Heroku by pushing our local repository
    to the git Heroku origin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using a web browser, we are now able to access the `computer-database-scala`
    webapp deployed in Heroku:![](img/F207fA9i.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The actual Heroku URL will differ; ensure that you replace your Heroku-generated
    app name on the URL, but for this recipe it should be deployed at:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://shielded-dusk-8715.herokuapp.com](https://shielded-dusk-8715.herokuapp.com)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we deployed a Play 2.0 web application in the popular PaaS,
    Heroku. Deploying to Heroku requires very minimal customization and configuration,
    which makes it very easy for developers to quickly deploy the Play 2.0 webapps
    in a solid platform such as Heroku's.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this recipe, we used the activator template `computer-database-scala` and
    used this as our sample web application, which we in turn, deployed to Heroku''s
    Cedar stack. After setting up our web application with the template boilerplate
    code, we added two files that serve as configuration files for Heroku:'
  prefs: []
  type: TYPE_NORMAL
- en: Procfile
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In **Procfile**, we specify the entry point for the web application, which
    Heroku uses to initialize and run the web app, in this recipe, `bin/play2-heroku`.
    We also specify here, the port number to be used by the web app, which is dictated
    by the Heroku runtime, specified in the environment variable, `${PORT}`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we set a jvm property used by Play to determine whether to execute
    database evolution scripts or not.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: system.properties
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: As an optional step, in `system.properties`, we simply specify the version of
    the JDK to utilize for our Play web application.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the official Git documentation for more information about Git and
    post-commit hooks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://git-scm.com/documentation/](http://git-scm.com/documentation/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks](http://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying a Play application on AWS Elastic Beanstalk
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will deploy a Play 2 web application on Amazon web services'
    Elastic Beanstalk. **Elastic Beanstalk** is Amazon's Platform-as-a-Service offering
    and allows developers to deploy web applications with the same ease as other PAAS
    offerings, such as Heroku.
  prefs: []
  type: TYPE_NORMAL
- en: We will package our Play 2 web application as a Docker image and upload it to
    Elastic Beanstalk as a ZIP package. We will mostly be interacting with the AWS
    management console using a web browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ensure that you have signed up for an account with AWS here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://aws.amazon.com](http://aws.amazon.com)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create our Play 2 web application using the activator template, `computer-database-scala`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit `conf/application.conf` to enable automatic database evolutions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit `build.sbt` to specify Docker settings for the web app, making note of
    the maintainer and `dockerExposedPorts` settings, using your own Docker Hub username
    and web app port, respectively:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new JSON config file specific to Elastic Beanstalk and Docker apps
    in the project root, `Dockerrun.aws.json.template`, with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Generate a Docker image using `activator`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Copy the `Dockerrun.aws.json.template` file to the Docker root in `target/docker`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Zip the `target/docker` directory in preparation for uploading to Elastic Beanstalk.
    Make a note of the location of the output ZIP file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Once the `docker` package is prepped up, head to the AWS management console
    and create an Elastic Beanstalk (EB) application, ensuring that we pick Docker
    as the platform:![](img/Qin8fjTn.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the initial EB application has been initialized, we will need to navigate
    to the **Configuration** tab and click on the cogwheel icon next to **instances**
    to edit the environment and select a different EC2 instance type, selecting **t2.medium**
    instead of **t2.micro** (selecting an instance type other than **t2.micro** means
    that you will be using a non-free EC2 instance):![](img/csOFqb5O.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once this environment change has been applied, navigate back to the dashboard
    page so we can proceed to uploading the `docker` package that we built earlier:![](img/iceaPPVu.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Deploy**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify the version label and deployment limits; for our recipe, we will keep
    the defaults. It will take a few minutes to upload and initialize but once the
    Play 2 web app has been deployed, we can access it from a web browser using the
    link next to **Default Environment** under the dashboard tab:![](img/dU0SP7IB.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we deployed a Play 2 web application to AWS Elastic Beanstalk.
    We packaged our Play 2 web app as a Docker image and zipped it before uploading
    on the AWS Management Console using a web browser. More information regarding
    sbt and Docker integration can be found here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/sbt/sbt-native-packager](https://github.com/sbt/sbt-native-packager)'
  prefs: []
  type: TYPE_NORMAL
- en: 'We made very minimal modifications to the `build.sbt` to specify the Docker-specific
    settings required during the build phase:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: We imported the necessary packages that contain the sbt and Docker integrations,
    and placed them at the top of the file, `build.sbt`. We then specified the maintainer
    and the port number to be used by the docker container, in this recipe, port number
    9000.
  prefs: []
  type: TYPE_NORMAL
- en: 'We added an Elastic Beanstalk-Docker configuration file in the project root,
    `Dockerrun.aws.json`, which specifies the run version and docker container port
    that we will be utilizing, in JSON format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: A final deployment configuration step worth noting is modifying the EC2 instance
    type set by default by Elastic Beanstalk from a `t2.micro` to a `t2.medium` instance
    type. A `t2.medium` instance is a non-free EC2 instance, which means you will
    incur costs for using this EC2 instance type. This is necessary as we may encounter
    JVM issues when using an instance type with less than 2 GB of RAM. Applying this
    environment change will require Elastic Beanstalk to reinitialize the environment
    and should take a few minutes to complete. We can then proceed to uploading and
    deploying our prepackaged Docker image using the AWS Management Console.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/pJPg4KCY.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once deployment on the AWS Management Console is completed, we are able to access
    the `computer-database-scala` web application from its Elastic Beanstalk URL by
    using a web browser.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the online documentation for more information about AWS Elastic Beanstalk:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://aws.amazon.com/elasticbeanstalk/developer-resources/](http://aws.amazon.com/elasticbeanstalk/developer-resources/)'
  prefs: []
  type: TYPE_NORMAL
- en: Deploying a Play application on CoreOS and Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will deploy a Play 2 web application using CoreOS and Docker.
    **CoreOS** is a new, lightweight operating system ideal for modern application
    stacks. Together with Docker, a software container management system, this forms
    a formidable deployment environment for Play 2 web applications that boasts of
    simplified deployments, isolation of processes, ease in scalability, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this recipe, we will utilize the popular cloud IaaS, Digital Ocean. Ensure
    that you sign up for an account here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://cloud.digitalocean.com/registrations/new](https://cloud.digitalocean.com/registrations/new)'
  prefs: []
  type: TYPE_NORMAL
- en: 'This recipe also requires Docker to be installed in the developer''s machine.
    Refer to the official Docker documentation regarding installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.docker.com/installation/](https://docs.docker.com/installation/)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new Digital Ocean droplet using CoreOS as the base operating system.
    Ensure that you use a droplet with at least 1 GB of RAM for the recipe to work.
    note that Digital Ocean does not have a free tier and are all paid instances:![](img/KOi8mtKo.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that you select the appropriate droplet region:![](img/pga8Ku9w.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select **CoreOS 607.0.0** and specify a **SSH key** to use. Visit the following
    link if you need more information regarding SSH key generation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys--2](https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys--2):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once the Droplet is created, make a special note of the Droplet's IP address
    which we will use to log in to the Droplet:![](img/BRPaz2bm.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, create a [Docker.com](http://Docker.com) account at [https://hub.docker.com/account/signup/](https://hub.docker.com/account/signup/)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new repository to house the **play2-deploy-73** docker image that we
    will use for deployment:![](img/Xt9p8c8H.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new Play 2 webapp using the activator template, `computer-database-scala`,
    and change into the project root:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit `conf/application.conf` to enable automatic database evolutions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit `build.sbt` to specify Docker settings for the web app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we build the Docker image and publish it to Docker Hub:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once the Docker image has been published, log in to the Digital Ocean droplet
    using SSH to pull the uploaded docker image. You will need to use the `core` user
    for your CoreOS Droplet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We are now ready to run our Docker image using the following `docker` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using a web browser, access the computer-database webapp using the IP address
    we made note of in an earlier step of this recipe (`http://192.241.239.43:9000/computers`):![](img/yqvN3YPu.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we deployed a Play 2 web application by packaging it as a Docker
    image and then installing and running the same Docker image in a Digital Ocean
    Droplet. Firstly, we will need an account on [DigitalOcean.com](http://DigitalOcean.com)
    and [Docker.com](http://Docker.com).
  prefs: []
  type: TYPE_NORMAL
- en: Once our accounts are ready and verified, we create a CoreOS-based droplet.
    CoreOS has Docker installed by default, so all we need to install in the droplet
    is the Play 2 web app Docker image.
  prefs: []
  type: TYPE_NORMAL
- en: The Play 2 web app Docker image is based on the activator template, `computer-database-scala`,
    which we named `play2-deploy-73`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We make two modifications to the boilerplate code. The first modification in
    `conf/application.conf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'This setting enables database evolutions by default. The other modification
    is to be made in `build.sbt`. We import the required packages that contain the
    Docker-specific settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The next settings are to specify the repository maintainer, the exposed Docker
    ports, and the Docker repository in [Docker.com](http://Docker.com); in this case,
    supply your own Docker Hub username as the maintainer and Docker repository values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now build Docker images using the `activator` command, which will generate
    all the necessary files for building a Docker image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will use the activator docker command to upload and publish to your
    specified [Docker.com](http://Docker.com) repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'To install the Docker image in our Digital Ocean Droplet, we first log in to
    the droplet using the `core` user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'We then use the docker command, `docker pull`, to download the play2-deploy-73
    image from [Docker.com](http://Docker.com), specifying the tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we can run the Docker image using the `docker run` command, exposing
    the container port `9000`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following links for more information on Docker and Digital Ocean:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.docker.com/whatisdocker/](https://www.docker.com/whatisdocker/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.digitalocean.com/community/tags/docker](https://www.digitalocean.com/community/tags/docker)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying a Play application with Dokku
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will use the Docker-based tool, Dokku, to manage our Play
    2 web application deployment. **Dokku** provides a very straightforward deployment
    interface, quite similar to Heroku's deployment interface and allows developers
    to quickly deploy Play 2 web apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will have Dokku running and will deploy our Play 2 web application in a
    Digital Ocean Droplet. We will need a Droplet with at least 2GB of RAM to run
    our sample webapp. Ensure that you sign up for a Digital Ocean account to follow
    this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://cloud.digitalocean.com/registrations/new](https://cloud.digitalocean.com/registrations/new)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Prepare your deployment droplet by creating a new 2GB RAM Droplet with **Dokku
    v0.3.15 on 14.04** or higher application option pre-installed:![](img/SD7Arw3g.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once droplet creation is completed, you can verify the Droplet settings on the
    dashboard, ensuring that it is configured with 2GB of RAM and making note of the
    assigned IP address for the droplet:![](img/e6asnGU0.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we will need to complete the Dokku installation by accessing the web port
    of our newly created droplet; this can be done by accessing the Droplet's assigned
    IP address using a web browser to confirm the Dokku settings, such as your public
    key, hostname, and so on:![](img/xAfGBbSl.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once our Droplet is set up, we need to prep our Play 2 web app using the activator
    template, `computer-database-scala`, in our local development machine and changing
    into the project root:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit `conf/application.conf` to enable automatic database evolutions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will need to initialize git on the project root:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We now add a new git remote to the codebase pointed at our Dokku Droplet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As the last deployment step, we push our commit to our Dokku remote. Dokku
    will then automatically deploy the web app using git post-commit hooks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can now use a web browser to access our Dokku-deployed Play 2 web application:
    `http://&lt;YOUR_DOKKU_IP_ADDRESS&gt;:&lt;YOUR_DOKKU_PORT&gt;`'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bu8g5ACy.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we looked into using Dokku to deploy our Play 2 web app on a
    Digital Ocean Droplet. After some very straightforward initializations and configurations,
    we were able to deploy our Play 2 web app with minimal friction and with ease.
  prefs: []
  type: TYPE_NORMAL
- en: 'Essential to this recipe is having a virtual machine pre-installed with Dokku.
    Dokku, the Docker-based deployment tool, provides developers with a very simple
    deployment process, which ultimately boils down to a `git push` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Dokku has git post-commit hooks configured to detect commits to the codebase,
    and subsequently, runs a deployment script for every detected code commit.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: This ease of use allows developers and non-developers alike to spin up dev and
    test instances quickly.
  prefs: []
  type: TYPE_NORMAL
- en: However, to get to this point in the development lifecycle, we will need to
    follow some steps to initialize and configure our Dokku setup. For this recipe,
    we relied on Digital Ocean, a popular cloud-based virtual machine provider, and
    its predefined Dokku application instance to spin up a ready-to-use Dokku VM instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next necessary steps would be configuring our Play 2 web app to be git-enabled
    by initializing the codebase, adding all codebase files to the git repository,
    and committing the initial state of the web app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, add some necessary application configurations for our sample application,
    specifically the `conf/application.conf` file with the following settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'We will need to commit this change to the local repo as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The final step now will be to push our commits to the Dokku instance we just
    created, which should then trigger a deployment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following links for more information on Dokku:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://progrium.viewdocs.io/dokku/index](http://progrium.viewdocs.io/dokku/index)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.digitalocean.com/community/tags/dokku](https://www.digitalocean.com/community/tags/dokku)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying a Play application with Nginx
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we will manually deploy a Play 2 web application using a CentOS
    6.5-based virtual machine with **Nginx** as the frontend server for our Play 2
    web applications. We will be utilizing Digital Ocean; ensure that you sign up
    for an account here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://cloud.digitalocean.com/registrations/new](https://cloud.digitalocean.com/registrations/new)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Log in to Digital Ocean and create a new Droplet, selecting CentOS as the base
    operating system and with at least 2GB of RAM:![](img/DGd7ZWCp.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **CentOS 6.5 x64** as the Droplet image and specify your **SSH Key**:![](img/ZNnshaYq.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the Droplet has been created, make a special note of the VM's IP address:![](img/a2pjImIu.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Log in to our newly created Centos-based Droplet using SSH:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a non-root user using the `adduser` command, assigning it with a password
    using the `passwd` command, and finally adding our new user to the `sudoers` group,
    which is a list of users with special system privileges:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Relog in to our Droplet using the non-root user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the necessary tools using `Yum`, the CentOS Package Manager, to proceed
    with our VM setup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install a JDK using the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify that we have the Oracle JDK installed and that it is accessible:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install `activator` using the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the official Nginx yum repository with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Install Nginx using `yum`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the custom configuration file to `/etc/nginx/conf.d/computer-database-scala.conf`
    with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Restart Nginx to load our new configs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Configure `iptables` to allow access to a minimum set of ports only (port 22
    and 80):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Clone the `computer-database-scala` Play2 web application in the directory
    `~/apps`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit `conf/application.conf` to enable automatic database evolutions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can now start the web app using `activator`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using a web browser, we will now be able to access the Play 2 web application
    using the droplet's IP address, in our case, `http://&lt;YOUR_DROPLET_IP ADDRESS&gt;/computers`:![](img/fPewBoU0.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can verify that Nginx is indeed serving our HTTP requests using `curl` and
    verifying with the response headers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we manually deployed a Play 2 web application on a remote CentOS-based
    virtual machine, which we initialized using Digital Ocean. We then proceeded to
    install and configure various software components, such as the Java Development
    Kit, Nginx, IPTables, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we have the necessary services installed and configured, we need to start
    our Play 2 web application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/q7gea01x.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We then successfully accessed our deployed Play 2 web application using a web
    browser and `curl` in the appropriate port, port 80\. We can also verify that
    we can only access the Play 2 web app via Nginx by attempting to access port 9000
    directly using `curl`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: In this chapter, we demonstrated how remarkably involved it is to manually deploy
    Play 2 applications, and, in contrast, how convenient and easy it is to use cloud
    services such as Heroku, AWS Beanstalk, and tools such as Docker and Dokku in
    deploying Play 2 applications in the cloud. While there could be merits to being
    able to deploy Play web applications manually, it is without question that Cloud
    PAAS services greatly boost a developer's productivity and efficiency, and allow
    developers to focus on actual software development.
  prefs: []
  type: TYPE_NORMAL
