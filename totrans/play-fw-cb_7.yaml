- en: Chapter 7. Deploying Play 2 Web Apps
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Deploying a Play application on Heroku
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying a Play application on AWS Elastic Beanstalk
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying a Play application with CoreOS and Docker
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying a Play application with Dokku
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying a Play application with Nginx
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will explore various deployment options for a Play 2.0 web
    application. In the advent of numerous cloud-based services, such as **Infrastructure
    as a Service** (**IaaS**) and **Platform as a Service** (**PaaS**) service offerings,
    we are given multiple options on how we can deploy our Play 2.0 into different
    environments, be it for development, testing, integration, or production.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: We explore this using popular developer services such as Heroku and Amazon web
    services. We will also look into using popular developer tools such as **Docker**
    and **Dokku** to deploy Play 2 web applications.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: We will also use two different operating systems as our base operating system
    in **CentOS** and **CoreOS**.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we aim to show the contrast in the efforts required to deploy
    web apps with cloud services and manually deploying web apps with a raw virtual
    machine. We will also look at how modern tools allow developers to be more efficient
    by focusing more time on development instead of doing what to the infrastructure.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Deploying a Play application on Heroku
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will deploy a Play webapp on **Heroku**, specifically, the
    Heroku Cedar stack that supports the Play Framework. Deploying on Heroku requires
    some knowledge in Git, the popular source control management software.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, sign up for a Heroku account by visiting the following link:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://signup.heroku.com/](https://signup.heroku.com/)'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Install the Heroku CLI tools (more information at [https://devcenter.heroku.com/articles/heroku-command](https://devcenter.heroku.com/articles/heroku-command)).
    Once installed, you should now be able to login to Heroku using the CLI tools
    as follows:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create our Play webapp using the activator template, `computer-database-scala`:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once our webapp has been generated, change into the project root of `play2-heroku`
    and initialize Git on the project:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create a new `heroku` app. The default app name will be assigned by Heroku,
    for this recipe, `shielded-dusk-8715`:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Add Heroku-specific configs in the project root directory. Optionally, you
    can create the file, `system.properties`, with the following contents, to specify
    that we will require JDK version 8:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create the Heroku file, `Procfile`, which is the standard Heroku text-based
    file to declare your apps and to run commands and other environment variables,
    in the project root with the following contents:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Verify the location of our new Heroku git remote with the following command:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Add and commit our webapp boilerplate code to git:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Finally, let''s deploy our webapp to Heroku by pushing our local repository
    to the git Heroku origin:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Using a web browser, we are now able to access the `computer-database-scala`
    webapp deployed in Heroku:![](img/F207fA9i.jpg)
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用网络浏览器，我们现在可以访问部署在Heroku上的`computer-database-scala`网络应用：![图片](img/F207fA9i.jpg)
- en: 'The actual Heroku URL will differ; ensure that you replace your Heroku-generated
    app name on the URL, but for this recipe it should be deployed at:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实际的Heroku URL可能会有所不同；请确保您在URL中替换了Heroku生成的应用名称，但在这个菜谱中，它应该部署在以下位置：
- en: '[https://shielded-dusk-8715.herokuapp.com](https://shielded-dusk-8715.herokuapp.com)'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://shielded-dusk-8715.herokuapp.com](https://shielded-dusk-8715.herokuapp.com)'
- en: How it works...
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we deployed a Play 2.0 web application in the popular PaaS,
    Heroku. Deploying to Heroku requires very minimal customization and configuration,
    which makes it very easy for developers to quickly deploy the Play 2.0 webapps
    in a solid platform such as Heroku's.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们在流行的PaaS平台Heroku上部署了Play 2.0网络应用。部署到Heroku需要非常少的定制和配置，这使得开发者能够轻松地将Play
    2.0网络应用快速部署到像Heroku这样的稳固平台上。
- en: 'For this recipe, we used the activator template `computer-database-scala` and
    used this as our sample web application, which we in turn, deployed to Heroku''s
    Cedar stack. After setting up our web application with the template boilerplate
    code, we added two files that serve as configuration files for Heroku:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们使用了activator模板`computer-database-scala`，并将其用作我们的示例网络应用，然后我们将其部署到Heroku的Cedar堆栈。在设置好网络应用模板的样板代码后，我们添加了两个文件，作为Heroku的配置文件：
- en: Procfile
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Procfile
- en: 'In **Procfile**, we specify the entry point for the web application, which
    Heroku uses to initialize and run the web app, in this recipe, `bin/play2-heroku`.
    We also specify here, the port number to be used by the web app, which is dictated
    by the Heroku runtime, specified in the environment variable, `${PORT}`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在**Procfile**中，我们指定了网络应用的入口点，Heroku使用它来初始化和运行网络应用，在这个菜谱中是`bin/play2-heroku`。我们还在这里指定了网络应用将使用的端口号，这由Heroku运行时决定，指定在环境变量`${PORT}`中：
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Finally, we set a jvm property used by Play to determine whether to execute
    database evolution scripts or not.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们设置了一个由Play使用的jvm属性，用于确定是否执行数据库演变脚本。
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: system.properties
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: system.properties
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As an optional step, in `system.properties`, we simply specify the version of
    the JDK to utilize for our Play web application.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 作为可选步骤，在`system.properties`中，我们简单地指定了用于我们的Play网络应用的JDK版本。
- en: There's more...
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Refer to the official Git documentation for more information about Git and
    post-commit hooks:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Git和post-commit钩子的更多信息，请参阅官方Git文档：
- en: '[http://git-scm.com/documentation/](http://git-scm.com/documentation/)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://git-scm.com/documentation/](http://git-scm.com/documentation/)'
- en: '[http://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks](http://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks](http://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks)'
- en: Deploying a Play application on AWS Elastic Beanstalk
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在AWS Elastic Beanstalk上部署Play应用
- en: In this recipe, we will deploy a Play 2 web application on Amazon web services'
    Elastic Beanstalk. **Elastic Beanstalk** is Amazon's Platform-as-a-Service offering
    and allows developers to deploy web applications with the same ease as other PAAS
    offerings, such as Heroku.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将部署一个Play 2网络应用到亚马逊网络服务的Elastic Beanstalk。**Elastic Beanstalk**是亚马逊的PaaS服务，允许开发者以与其他PAAS服务（如Heroku）相同的简便性部署网络应用。
- en: We will package our Play 2 web application as a Docker image and upload it to
    Elastic Beanstalk as a ZIP package. We will mostly be interacting with the AWS
    management console using a web browser.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将我们的Play 2网络应用打包成Docker镜像，并将其作为ZIP包上传到Elastic Beanstalk。我们将主要通过网络浏览器与AWS管理控制台进行交互。
- en: 'Ensure that you have signed up for an account with AWS here:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您已在以下位置注册了AWS账户：
- en: '[http://aws.amazon.com](http://aws.amazon.com)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://aws.amazon.com](http://aws.amazon.com)'
- en: How to do it...
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create our Play 2 web application using the activator template, `computer-database-scala`:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用activator模板创建我们的Play 2网络应用`computer-database-scala`：
- en: '[PRE12]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Edit `conf/application.conf` to enable automatic database evolutions:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`conf/application.conf`以启用自动数据库演变：
- en: '[PRE13]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Edit `build.sbt` to specify Docker settings for the web app, making note of
    the maintainer and `dockerExposedPorts` settings, using your own Docker Hub username
    and web app port, respectively:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`build.sbt`以指定网络应用的Docker设置，注意维护者和`dockerExposedPorts`设置，分别使用您的Docker Hub用户名和网络应用端口号：
- en: '[PRE14]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create a new JSON config file specific to Elastic Beanstalk and Docker apps
    in the project root, `Dockerrun.aws.json.template`, with the following contents:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目根目录中创建一个新的JSON配置文件，专门针对Elastic Beanstalk和Docker应用，文件名为`Dockerrun.aws.json.template`，内容如下：
- en: '[PRE15]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Generate a Docker image using `activator`:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`activator`生成Docker镜像：
- en: '[PRE16]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Copy the `Dockerrun.aws.json.template` file to the Docker root in `target/docker`:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Dockerrun.aws.json.template`文件复制到`target/docker`中的Docker根目录：
- en: '[PRE17]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Zip the `target/docker` directory in preparation for uploading to Elastic Beanstalk.
    Make a note of the location of the output ZIP file:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`target/docker`目录打包，以便上传到Elastic Beanstalk。注意输出ZIP文件的位置：
- en: '[PRE18]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Once the `docker` package is prepped up, head to the AWS management console
    and create an Elastic Beanstalk (EB) application, ensuring that we pick Docker
    as the platform:![](img/Qin8fjTn.jpg)
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦`docker`包准备就绪，前往AWS管理控制台创建一个Elastic Beanstalk (EB)应用程序，确保我们选择Docker作为平台！![Qin8fjTn](img/Qin8fjTn.jpg)
- en: Once the initial EB application has been initialized, we will need to navigate
    to the **Configuration** tab and click on the cogwheel icon next to **instances**
    to edit the environment and select a different EC2 instance type, selecting **t2.medium**
    instead of **t2.micro** (selecting an instance type other than **t2.micro** means
    that you will be using a non-free EC2 instance):![](img/csOFqb5O.jpg)
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦初始化了初始EB应用程序，我们需要导航到**配置**标签，点击**实例**旁边的齿轮图标来编辑环境并选择不同的EC2实例类型，选择**t2.medium**而不是**t2.micro**（选择除**t2.micro**之外的实例类型意味着您将使用非免费EC2实例）：![csOFqb5O](img/csOFqb5O.jpg)
- en: Once this environment change has been applied, navigate back to the dashboard
    page so we can proceed to uploading the `docker` package that we built earlier:![](img/iceaPPVu.jpg)
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦应用了此环境更改，导航回仪表板页面，以便我们可以上传我们之前构建的`docker`包：
- en: Click on **Deploy**.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**部署**。
- en: Specify the version label and deployment limits; for our recipe, we will keep
    the defaults. It will take a few minutes to upload and initialize but once the
    Play 2 web app has been deployed, we can access it from a web browser using the
    link next to **Default Environment** under the dashboard tab:![](img/dU0SP7IB.jpg)
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指定版本标签和部署限制；在我们的菜谱中，我们将保持默认设置。上传和初始化可能需要几分钟，但一旦Play 2网络应用程序已部署，我们就可以通过仪表板标签下**默认环境**旁边的链接使用网络浏览器访问它！![dU0SP7IB](img/dU0SP7IB.jpg)
- en: How it works...
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'In this recipe, we deployed a Play 2 web application to AWS Elastic Beanstalk.
    We packaged our Play 2 web app as a Docker image and zipped it before uploading
    on the AWS Management Console using a web browser. More information regarding
    sbt and Docker integration can be found here:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将Play 2网络应用程序部署到了AWS Elastic Beanstalk。我们将Play 2网络应用程序打包成Docker镜像，并打包后通过网络浏览器上传到AWS管理控制台。有关sbt和Docker集成的更多信息，请在此处查看：
- en: '[https://github.com/sbt/sbt-native-packager](https://github.com/sbt/sbt-native-packager)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/sbt/sbt-native-packager](https://github.com/sbt/sbt-native-packager)'
- en: 'We made very minimal modifications to the `build.sbt` to specify the Docker-specific
    settings required during the build phase:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对`build.sbt`文件进行了非常小的修改，以指定在构建阶段所需的特定Docker设置：
- en: '[PRE19]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We imported the necessary packages that contain the sbt and Docker integrations,
    and placed them at the top of the file, `build.sbt`. We then specified the maintainer
    and the port number to be used by the docker container, in this recipe, port number
    9000.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们导入了包含sbt和Docker集成的必要包，并将它们放在文件顶部，`build.sbt`。然后我们指定了docker容器将使用的维护者和端口号，在这个菜谱中，端口号为9000。
- en: 'We added an Elastic Beanstalk-Docker configuration file in the project root,
    `Dockerrun.aws.json`, which specifies the run version and docker container port
    that we will be utilizing, in JSON format:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在项目根目录中添加了一个Elastic Beanstalk-Docker配置文件，`Dockerrun.aws.json`，该文件指定了运行版本和我们将要使用的docker容器端口，格式为JSON：
- en: '[PRE20]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: A final deployment configuration step worth noting is modifying the EC2 instance
    type set by default by Elastic Beanstalk from a `t2.micro` to a `t2.medium` instance
    type. A `t2.medium` instance is a non-free EC2 instance, which means you will
    incur costs for using this EC2 instance type. This is necessary as we may encounter
    JVM issues when using an instance type with less than 2 GB of RAM. Applying this
    environment change will require Elastic Beanstalk to reinitialize the environment
    and should take a few minutes to complete. We can then proceed to uploading and
    deploying our prepackaged Docker image using the AWS Management Console.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，最后的部署配置步骤是修改Elastic Beanstalk默认设置的EC2实例类型，从`t2.micro`改为`t2.medium`实例类型。`t2.medium`实例是一个非免费EC2实例，这意味着您将使用此EC2实例类型时产生费用。这是必要的，因为我们可能会在使用小于2GB
    RAM的实例类型时遇到JVM问题。应用此环境更改将需要Elastic Beanstalk重新初始化环境，并可能需要几分钟才能完成。然后我们可以继续使用AWS管理控制台上传和部署我们预先打包的Docker镜像。
- en: '![](img/pJPg4KCY.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/pJPg4KCY.jpg)'
- en: Once deployment on the AWS Management Console is completed, we are able to access
    the `computer-database-scala` web application from its Elastic Beanstalk URL by
    using a web browser.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦在AWS管理控制台中完成部署，我们就可以通过Web浏览器访问`computer-database-scala` web应用程序的Elastic Beanstalk
    URL。
- en: There's more...
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'Refer to the online documentation for more information about AWS Elastic Beanstalk:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考在线文档以获取有关AWS Elastic Beanstalk的更多信息：
- en: '[http://aws.amazon.com/elasticbeanstalk/developer-resources/](http://aws.amazon.com/elasticbeanstalk/developer-resources/)'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '[AWS Elastic Beanstalk开发者资源](http://aws.amazon.com/elasticbeanstalk/developer-resources/)'
- en: Deploying a Play application on CoreOS and Docker
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在CoreOS和Docker上部署Play应用程序
- en: In this recipe, we will deploy a Play 2 web application using CoreOS and Docker.
    **CoreOS** is a new, lightweight operating system ideal for modern application
    stacks. Together with Docker, a software container management system, this forms
    a formidable deployment environment for Play 2 web applications that boasts of
    simplified deployments, isolation of processes, ease in scalability, and so on.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将使用CoreOS和Docker部署一个Play 2 web应用程序。**CoreOS**是一个新的、轻量级的操作系统，非常适合现代应用程序堆栈。与Docker软件容器管理系统结合使用，这形成了一个强大的部署环境，为Play
    2 web应用程序提供了简化的部署、进程隔离、易于扩展等功能。
- en: 'For this recipe, we will utilize the popular cloud IaaS, Digital Ocean. Ensure
    that you sign up for an account here:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个食谱，我们将使用流行的云IaaS，Digital Ocean。确保您在此处注册账户：
- en: '[https://cloud.digitalocean.com/registrations/new](https://cloud.digitalocean.com/registrations/new)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[Digital Ocean注册](https://cloud.digitalocean.com/registrations/new)'
- en: 'This recipe also requires Docker to be installed in the developer''s machine.
    Refer to the official Docker documentation regarding installation:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 此食谱还需要在开发者的机器上安装Docker。有关安装的官方Docker文档请参阅：
- en: '[https://docs.docker.com/installation/](https://docs.docker.com/installation/)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '[Docker安装指南](https://docs.docker.com/installation/)'
- en: How to do it...
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Create a new Digital Ocean droplet using CoreOS as the base operating system.
    Ensure that you use a droplet with at least 1 GB of RAM for the recipe to work.
    note that Digital Ocean does not have a free tier and are all paid instances:![](img/KOi8mtKo.jpg)
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用CoreOS作为基础操作系统创建一个新的Digital Ocean droplet。确保您使用至少有1 GB RAM的droplet，以便食谱可以正常工作。请注意，Digital
    Ocean没有免费层，所有都是付费实例![图片](img/KOi8mtKo.jpg)
- en: Ensure that you select the appropriate droplet region:![](img/pga8Ku9w.jpg)
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您选择了适当的droplet区域![图片](img/pga8Ku9w.jpg)
- en: 'Select **CoreOS 607.0.0** and specify a **SSH key** to use. Visit the following
    link if you need more information regarding SSH key generation:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**CoreOS 607.0.0**并指定要使用的**SSH密钥**。如果您需要有关SSH密钥生成的更多信息，请访问以下链接：
- en: '[https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys--2](https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys--2):'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[如何设置SSH密钥](https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys--2):'
- en: Once the Droplet is created, make a special note of the Droplet's IP address
    which we will use to log in to the Droplet:![](img/BRPaz2bm.jpg)
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦创建Droplet，请特别记录Droplet的IP地址，我们将使用它登录到Droplet![图片](img/BRPaz2bm.jpg)
- en: Next, create a [Docker.com](http://Docker.com) account at [https://hub.docker.com/account/signup/](https://hub.docker.com/account/signup/)
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在[Docker.com](http://Docker.com)上创建一个新的账户，[https://hub.docker.com/account/signup/](https://hub.docker.com/account/signup/)
- en: Create a new repository to house the **play2-deploy-73** docker image that we
    will use for deployment:![](img/Xt9p8c8H.jpg)
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的存储库来存放我们将用于部署的**play2-deploy-73** docker镜像![图片](img/Xt9p8c8H.jpg)
- en: 'Create a new Play 2 webapp using the activator template, `computer-database-scala`,
    and change into the project root:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用activator模板`computer-database-scala`创建一个新的Play 2 webapp，并切换到项目根目录：
- en: '[PRE21]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Edit `conf/application.conf` to enable automatic database evolutions:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`conf/application.conf`以启用自动数据库演变：
- en: '[PRE22]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Edit `build.sbt` to specify Docker settings for the web app:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`build.sbt`以指定web应用的Docker设置：
- en: '[PRE23]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Next, we build the Docker image and publish it to Docker Hub:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们构建Docker镜像并将其发布到Docker Hub：
- en: '[PRE24]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Once the Docker image has been published, log in to the Digital Ocean droplet
    using SSH to pull the uploaded docker image. You will need to use the `core` user
    for your CoreOS Droplet:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦Docker镜像发布，使用SSH登录到Digital Ocean droplet以拉取上传的docker镜像。您需要使用`core`用户登录您的CoreOS
    Droplet：
- en: '[PRE25]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We are now ready to run our Docker image using the following `docker` command:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经准备好使用以下`docker`命令运行我们的Docker镜像：
- en: '[PRE26]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Using a web browser, access the computer-database webapp using the IP address
    we made note of in an earlier step of this recipe (`http://192.241.239.43:9000/computers`):![](img/yqvN3YPu.jpg)
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用网页浏览器，通过我们在本菜谱早期步骤中记录的 IP 地址（`http://192.241.239.43:9000/computers`）访问 computer-database
    网页应用：![](img/yqvN3YPu.jpg)
- en: How it works...
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we deployed a Play 2 web application by packaging it as a Docker
    image and then installing and running the same Docker image in a Digital Ocean
    Droplet. Firstly, we will need an account on [DigitalOcean.com](http://DigitalOcean.com)
    and [Docker.com](http://Docker.com).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们通过打包成 Docker 镜像并在 Digital Ocean Droplet 中安装和运行相同的 Docker 镜像来部署 Play
    2 网页应用。首先，我们需要在 [DigitalOcean.com](http://DigitalOcean.com) 和 [Docker.com](http://Docker.com)
    上有一个账户。
- en: Once our accounts are ready and verified, we create a CoreOS-based droplet.
    CoreOS has Docker installed by default, so all we need to install in the droplet
    is the Play 2 web app Docker image.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们的账户准备就绪并经过验证，我们创建一个基于 CoreOS 的 droplet。CoreOS 默认安装了 Docker，所以我们只需要在 droplet
    中安装 Play 2 网页应用 Docker 镜像。
- en: The Play 2 web app Docker image is based on the activator template, `computer-database-scala`,
    which we named `play2-deploy-73`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Play 2 网页应用 Docker 镜像基于 activator 模板，`computer-database-scala`，我们将其命名为 `play2-deploy-73`。
- en: 'We make two modifications to the boilerplate code. The first modification in
    `conf/application.conf`:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对样板代码进行了两项修改。第一项修改在 `conf/application.conf` 中：
- en: '[PRE27]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This setting enables database evolutions by default. The other modification
    is to be made in `build.sbt`. We import the required packages that contain the
    Docker-specific settings:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 此设置默认启用数据库演变。其他修改需要在 `build.sbt` 中进行。我们导入包含 Docker 特定设置的所需包：
- en: '[PRE28]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The next settings are to specify the repository maintainer, the exposed Docker
    ports, and the Docker repository in [Docker.com](http://Docker.com); in this case,
    supply your own Docker Hub username as the maintainer and Docker repository values:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个设置是指定存储库维护者、暴露的 Docker 端口和 [Docker.com](http://Docker.com) 上的 Docker 存储库；在这种情况下，将您自己的
    Docker Hub 用户名作为维护者和 Docker 存储库值：
- en: '[PRE29]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We can now build Docker images using the `activator` command, which will generate
    all the necessary files for building a Docker image:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以使用 `activator` 命令构建 Docker 镜像，这将生成构建 Docker 镜像所需的所有文件：
- en: '[PRE30]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now, we will use the activator docker command to upload and publish to your
    specified [Docker.com](http://Docker.com) repository:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用 activator docker 命令上传并发布到您指定的 [Docker.com](http://Docker.com) 存储库：
- en: '[PRE31]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'To install the Docker image in our Digital Ocean Droplet, we first log in to
    the droplet using the `core` user:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 要在我们的 Digital Ocean Droplet 中安装 Docker 镜像，我们首先使用 `core` 用户登录到 droplet：
- en: '[PRE32]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We then use the docker command, `docker pull`, to download the play2-deploy-73
    image from [Docker.com](http://Docker.com), specifying the tag:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用 `docker pull` 命令从 [Docker.com](http://Docker.com) 下载 `play2-deploy-73`
    镜像，指定标签：
- en: '[PRE33]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Finally, we can run the Docker image using the `docker run` command, exposing
    the container port `9000`:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以使用 `docker run` 命令运行 Docker 镜像，暴露容器端口 `9000`：
- en: '[PRE34]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: There's more...
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'Refer to the following links for more information on Docker and Digital Ocean:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 参考以下链接获取有关 Docker 和 Digital Ocean 的更多信息：
- en: '[https://www.docker.com/whatisdocker/](https://www.docker.com/whatisdocker/)'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.docker.com/whatisdocker/](https://www.docker.com/whatisdocker/)'
- en: '[https://www.digitalocean.com/community/tags/docker](https://www.digitalocean.com/community/tags/docker)'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.digitalocean.com/community/tags/docker](https://www.digitalocean.com/community/tags/docker)'
- en: Deploying a Play application with Dokku
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Dokku 部署 Play 应用程序
- en: In this recipe, we will use the Docker-based tool, Dokku, to manage our Play
    2 web application deployment. **Dokku** provides a very straightforward deployment
    interface, quite similar to Heroku's deployment interface and allows developers
    to quickly deploy Play 2 web apps.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将使用基于 Docker 的工具 Dokku 来管理我们的 Play 2 网页应用部署。**Dokku** 提供了一个非常直接的部署界面，与
    Heroku 的部署界面非常相似，并允许开发者快速部署 Play 2 网页应用。
- en: 'We will have Dokku running and will deploy our Play 2 web application in a
    Digital Ocean Droplet. We will need a Droplet with at least 2GB of RAM to run
    our sample webapp. Ensure that you sign up for a Digital Ocean account to follow
    this recipe:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将运行 Dokku 并在 Digital Ocean Droplet 中部署我们的 Play 2 网页应用。我们需要一个至少有 2GB RAM 的
    Droplet 来运行我们的示例网页应用。确保您注册了 Digital Ocean 账户以遵循此菜谱：
- en: '[https://cloud.digitalocean.com/registrations/new](https://cloud.digitalocean.com/registrations/new)'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://cloud.digitalocean.com/registrations/new](https://cloud.digitalocean.com/registrations/new)'
- en: How to do it...
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Prepare your deployment droplet by creating a new 2GB RAM Droplet with **Dokku
    v0.3.15 on 14.04** or higher application option pre-installed:![](img/SD7Arw3g.jpg)
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过创建一个新的 2GB RAM Droplet 并预安装 **Dokku v0.3.15 on 14.04** 或更高版本的应用选项来准备你的部署 Droplet![img/SD7Arw3g.jpg](img/SD7Arw3g.jpg)
- en: Once droplet creation is completed, you can verify the Droplet settings on the
    dashboard, ensuring that it is configured with 2GB of RAM and making note of the
    assigned IP address for the droplet:![](img/e6asnGU0.jpg)
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦 Droplet 创建完成，你可以在仪表板上验证 Droplet 设置，确保它配置了 2GB 的 RAM，并记录分配给 Droplet 的 IP 地址![img/e6asnGU0.jpg](img/e6asnGU0.jpg)
- en: Next, we will need to complete the Dokku installation by accessing the web port
    of our newly created droplet; this can be done by accessing the Droplet's assigned
    IP address using a web browser to confirm the Dokku settings, such as your public
    key, hostname, and so on:![](img/xAfGBbSl.jpg)
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要通过访问新创建的 Droplet 的网络端口来完成 Dokku 安装；这可以通过使用网络浏览器访问 Droplet 分配的 IP 地址来完成，以确认
    Dokku 设置，如你的公钥、主机名等![img/xAfGBbSl.jpg](img/xAfGBbSl.jpg)
- en: 'Once our Droplet is set up, we need to prep our Play 2 web app using the activator
    template, `computer-database-scala`, in our local development machine and changing
    into the project root:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们的 Droplet 设置完成，我们需要使用 activator 模板 `computer-database-scala` 在本地开发机器上准备我们的
    Play 2 网络应用，并切换到项目根目录：
- en: '[PRE35]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Edit `conf/application.conf` to enable automatic database evolutions:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 `conf/application.conf` 以启用自动数据库演变：
- en: '[PRE36]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'We will need to initialize git on the project root:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要在项目根目录上初始化 git：
- en: '[PRE37]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'We now add a new git remote to the codebase pointed at our Dokku Droplet:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将向代码库添加一个新的 git 远程，指向我们的 Dokku Droplet：
- en: '[PRE38]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'As the last deployment step, we push our commit to our Dokku remote. Dokku
    will then automatically deploy the web app using git post-commit hooks:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为最后的部署步骤，我们将我们的提交推送到我们的 Dokku 远程。Dokku 将然后自动使用 git post-commit hooks 来部署网络应用：
- en: '[PRE39]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'We can now use a web browser to access our Dokku-deployed Play 2 web application:
    `http://&lt;YOUR_DOKKU_IP_ADDRESS&gt;:&lt;YOUR_DOKKU_PORT&gt;`'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以使用网络浏览器访问我们的 Dokku 部署的 Play 2 网络应用：`http://<YOUR_DOKKU_IP_ADDRESS>:<YOUR_DOKKU_PORT>`
- en: '![](img/bu8g5ACy.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![img/bu8g5ACy.jpg](img/bu8g5ACy.jpg)'
- en: How it works...
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we looked into using Dokku to deploy our Play 2 web app on a
    Digital Ocean Droplet. After some very straightforward initializations and configurations,
    we were able to deploy our Play 2 web app with minimal friction and with ease.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们探讨了使用 Dokku 在 Digital Ocean Droplet 上部署我们的 Play 2 网络应用。经过一些非常直接的初始化和配置后，我们能够以最小的摩擦和轻松的方式部署我们的
    Play 2 网络应用。
- en: 'Essential to this recipe is having a virtual machine pre-installed with Dokku.
    Dokku, the Docker-based deployment tool, provides developers with a very simple
    deployment process, which ultimately boils down to a `git push` command:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱的关键是预先在虚拟机上安装 Dokku。基于 Docker 的部署工具 Dokku 为开发者提供了一个非常简单的部署过程，最终归结为一个 `git
    push` 命令：
- en: '[PRE40]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Dokku has git post-commit hooks configured to detect commits to the codebase,
    and subsequently, runs a deployment script for every detected code commit.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: Dokku 配置了 git post-commit hooks 来检测对代码库的提交，随后对每个检测到的代码提交运行部署脚本。
- en: '[PRE41]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: This ease of use allows developers and non-developers alike to spin up dev and
    test instances quickly.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这种易用性使得开发者和非开发者都能快速启动开发和测试实例。
- en: However, to get to this point in the development lifecycle, we will need to
    follow some steps to initialize and configure our Dokku setup. For this recipe,
    we relied on Digital Ocean, a popular cloud-based virtual machine provider, and
    its predefined Dokku application instance to spin up a ready-to-use Dokku VM instance.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，要到达这个开发生命周期中的这个点，我们需要遵循一些步骤来初始化和配置我们的 Dokku 设置。对于这个菜谱，我们依赖于流行的云基础虚拟机提供商 Digital
    Ocean 和其预定义的 Dokku 应用程序实例来启动一个可用的 Dokku VM 实例。
- en: 'The next necessary steps would be configuring our Play 2 web app to be git-enabled
    by initializing the codebase, adding all codebase files to the git repository,
    and committing the initial state of the web app:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步必要的步骤是配置我们的 Play 2 网络应用以启用 git，通过初始化代码库，将所有代码库文件添加到 git 仓库，并提交网络应用的初始状态：
- en: '[PRE42]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Also, add some necessary application configurations for our sample application,
    specifically the `conf/application.conf` file with the following settings:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，为我们的示例应用添加一些必要的应用程序配置，特别是 `conf/application.conf` 文件，包含以下设置：
- en: '[PRE43]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'We will need to commit this change to the local repo as well:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要将此更改提交到本地仓库：
- en: '[PRE44]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The final step now will be to push our commits to the Dokku instance we just
    created, which should then trigger a deployment:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的最终步骤是将我们的提交推送到我们刚刚创建的 Dokku 实例，这将触发部署：
- en: '[PRE45]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: There's more...
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'Refer to the following links for more information on Dokku:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Dokku的更多信息，请参阅以下链接：
- en: '[http://progrium.viewdocs.io/dokku/index](http://progrium.viewdocs.io/dokku/index)'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://progrium.viewdocs.io/dokku/index](http://progrium.viewdocs.io/dokku/index)'
- en: '[https://www.digitalocean.com/community/tags/dokku](https://www.digitalocean.com/community/tags/dokku)'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.digitalocean.com/community/tags/dokku](https://www.digitalocean.com/community/tags/dokku)'
- en: Deploying a Play application with Nginx
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署使用Nginx的Play应用程序
- en: 'In this recipe, we will manually deploy a Play 2 web application using a CentOS
    6.5-based virtual machine with **Nginx** as the frontend server for our Play 2
    web applications. We will be utilizing Digital Ocean; ensure that you sign up
    for an account here:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将手动使用基于CentOS 6.5的虚拟机部署Play 2网络应用程序，其中**Nginx**作为我们的Play 2网络应用程序的前端服务器。我们将使用Digital
    Ocean；请确保您在此处注册账户：
- en: '[https://cloud.digitalocean.com/registrations/new](https://cloud.digitalocean.com/registrations/new)'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://cloud.digitalocean.com/registrations/new](https://cloud.digitalocean.com/registrations/new)'
- en: How to do it...
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Log in to Digital Ocean and create a new Droplet, selecting CentOS as the base
    operating system and with at least 2GB of RAM:![](img/DGd7ZWCp.jpg)
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录Digital Ocean并创建一个新的Droplet，选择CentOS作为基础操作系统，并至少有2GB的RAM：![](img/DGd7ZWCp.jpg)
- en: Select **CentOS 6.5 x64** as the Droplet image and specify your **SSH Key**:![](img/ZNnshaYq.jpg)
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**CentOS 6.5 x64**作为Droplet镜像，并指定您的**SSH密钥**：![](img/ZNnshaYq.jpg)
- en: Once the Droplet has been created, make a special note of the VM's IP address:![](img/a2pjImIu.jpg)
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦创建了水滴，请特别记下虚拟机的IP地址：![](img/a2pjImIu.jpg)
- en: 'Log in to our newly created Centos-based Droplet using SSH:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用SSH登录我们新创建的基于Centos的Droplet：
- en: '[PRE46]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Create a non-root user using the `adduser` command, assigning it with a password
    using the `passwd` command, and finally adding our new user to the `sudoers` group,
    which is a list of users with special system privileges:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`adduser`命令创建非root用户，使用`passwd`命令为其分配密码，最后将我们的新用户添加到`sudoers`组，该组是具有特殊系统权限的用户列表：
- en: '[PRE47]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Relog in to our Droplet using the non-root user:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用非root用户重新登录我们的Droplet：
- en: '[PRE48]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Install the necessary tools using `Yum`, the CentOS Package Manager, to proceed
    with our VM setup:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`Yum`，CentOS包管理器安装必要的工具，以继续我们的虚拟机设置：
- en: '[PRE49]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Install a JDK using the following commands:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令安装JDK：
- en: '[PRE50]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Verify that we have the Oracle JDK installed and that it is accessible:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证Oracle JDK是否已安装且可访问：
- en: '[PRE51]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Install `activator` using the following commands:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令安装`activator`：
- en: '[PRE52]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Add the official Nginx yum repository with the following command:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令添加官方Nginx yum仓库：
- en: '[PRE53]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Install Nginx using `yum`:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`yum`安装Nginx：
- en: '[PRE54]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Add the custom configuration file to `/etc/nginx/conf.d/computer-database-scala.conf`
    with the following content:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下内容将自定义配置文件添加到`/etc/nginx/conf.d/computer-database-scala.conf`：
- en: '[PRE55]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Restart Nginx to load our new configs:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重启Nginx以加载我们的新配置：
- en: '[PRE56]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Configure `iptables` to allow access to a minimum set of ports only (port 22
    and 80):'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置`iptables`仅允许访问最小的一组端口（端口22和80）：
- en: '[PRE57]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Clone the `computer-database-scala` Play2 web application in the directory
    `~/apps`:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`~/apps`目录中克隆`computer-database-scala` Play2网络应用程序：
- en: '[PRE58]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Edit `conf/application.conf` to enable automatic database evolutions:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`conf/application.conf`以启用自动数据库演变：
- en: '[PRE59]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'We can now start the web app using `activator`:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以使用`activator`启动web应用程序：
- en: '[PRE60]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Using a web browser, we will now be able to access the Play 2 web application
    using the droplet's IP address, in our case, `http://&lt;YOUR_DROPLET_IP ADDRESS&gt;/computers`:![](img/fPewBoU0.jpg)
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用网络浏览器，我们现在可以通过Droplet的IP地址访问Play 2网络应用程序，在我们的例子中，`http://&lt;YOUR_DROPLET_IP
    ADDRESS&gt;/computers`：![](img/fPewBoU0.jpg)
- en: 'We can verify that Nginx is indeed serving our HTTP requests using `curl` and
    verifying with the response headers:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`curl`和响应头验证Nginx确实在为我们提供HTTP请求服务：
- en: '[PRE61]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: How it works...
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In this recipe, we manually deployed a Play 2 web application on a remote CentOS-based
    virtual machine, which we initialized using Digital Ocean. We then proceeded to
    install and configure various software components, such as the Java Development
    Kit, Nginx, IPTables, and so on:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们手动在远程基于CentOS的虚拟机上部署了Play 2网络应用程序，我们使用Digital Ocean初始化了它。然后我们继续安装和配置各种软件组件，如Java开发工具包、Nginx、IPTables等：
- en: '[PRE62]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Once we have the necessary services installed and configured, we need to start
    our Play 2 web application:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们安装并配置了必要的服务，我们需要启动我们的Play 2网络应用程序：
- en: '[PRE63]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '![](img/q7gea01x.jpg)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![](img/q7gea01x.jpg)'
- en: 'We then successfully accessed our deployed Play 2 web application using a web
    browser and `curl` in the appropriate port, port 80\. We can also verify that
    we can only access the Play 2 web app via Nginx by attempting to access port 9000
    directly using `curl`:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 我们随后成功地在适当的端口，即端口80，使用网页浏览器和`curl`访问了我们部署的Play 2网络应用程序。我们还可以通过尝试使用`curl`直接访问端口9000来验证，我们只能通过Nginx访问Play
    2网络应用程序：
- en: '[PRE64]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: In this chapter, we demonstrated how remarkably involved it is to manually deploy
    Play 2 applications, and, in contrast, how convenient and easy it is to use cloud
    services such as Heroku, AWS Beanstalk, and tools such as Docker and Dokku in
    deploying Play 2 applications in the cloud. While there could be merits to being
    able to deploy Play web applications manually, it is without question that Cloud
    PAAS services greatly boost a developer's productivity and efficiency, and allow
    developers to focus on actual software development.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们展示了手动部署Play 2应用程序是多么复杂，而与之相比，使用云服务如Heroku、AWS Beanstalk以及Docker和Dokku等工具在云中部署Play
    2应用程序是多么方便和简单。虽然手动部署Play网络应用程序可能有其优点，但毫无疑问，云PAAS服务极大地提高了开发者的生产力和效率，并允许开发者专注于实际的软件开发。
