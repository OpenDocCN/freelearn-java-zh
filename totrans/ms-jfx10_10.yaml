- en: Mobile Testing on iOS and Android using Appium
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Appium在iOS和Android上进行移动测试
- en: 'In all the previous chapters, we have worked on web applications that are loaded
    in desktop browsers. But with the increasing number of mobile users, businesses
    today have to serve their users on mobile devices as well. In this chapter, you
    will learn about the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有前面的章节中，我们一直在处理在桌面浏览器中加载的Web应用程序。但随着移动用户数量的增加，今天的商业企业也必须在移动设备上为用户提供服务。在本章中，你将学习以下内容：
- en: The different types of mobile applications and testing tools
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同的移动应用程序和测试工具
- en: How to test mobile application using Selenium WebDriver, more specifically,
    with Appium
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Selenium WebDriver测试移动应用程序，特别是使用Appium
- en: Testing mobile applications on Android and iOS
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Android和iOS上测试移动应用程序
- en: Using cloud-based device labs for real device testing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用基于云的设备实验室进行真实设备测试
- en: '`Appium` is an open source mobile-automation framework used to test mobile
    apps on iOS and Android platforms using the JSON wire protocol with Selenium WebDriver.
    Appium replaces the iPhoneDriver and AndroidDriver APIs in Selenium 2 that were
    used to test mobile web applications.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`Appium`是一个开源的移动自动化框架，用于使用Selenium WebDriver的JSON线协议在iOS和Android平台上测试移动应用程序。Appium取代了Selenium
    2中用于测试移动Web应用程序的iPhoneDriver和AndroidDriver API。'
- en: Different forms of mobile applications
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不同形式的移动应用程序
- en: 'There are three different forms in which an application can reach a user on
    the mobile platform:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一个应用程序可以在移动平台上以三种不同的形式到达用户：
- en: '**Native apps**: Native apps are purely specific to the target mobile platform.
    They are developed in the platform-supported languages and are very much tied
    to underlying SDKs. For iOS, applications are developed in the Objective-C or
    Swift programming language and are dependent on iOS SDK; similarly, for the Android
    platform, they are developed in Java or Kotlin and are dependent on Android SDK.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**原生应用**：原生应用完全针对目标移动平台。它们使用平台支持的语言开发，并且与底层SDK紧密相关。对于iOS，应用程序使用Objective-C或Swift编程语言开发，并依赖于iOS
    SDK；同样，对于Android平台，它们使用Java或Kotlin开发，并依赖于Android SDK。'
- en: '**m.site**: Also known as a mobile website, it is a mini version of your web
    application that loads on the browsers of your mobile devices. On iOS devices,
    it can be Safari or Chrome, and on Android devices, it can be the Android default
    browser or Chrome. For example, on your iOS or Android device, open your browser
    and type in [www.facebook.com](http://www.facebook.com). Before the page loads,
    you will observe that a URL redirection happens from [www.facebook.com](http://www.facebook.com)
    to [m.facebook.com](http://m.facebook.com). The Facebook application servers realize
    that the request has originated from a mobile device and start serving the mobile
    site rather than the desktop site. These m.sites use JavaScript and HTML5 to be
    developed like your normal web applications:'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**m.site**：也称为移动网站，它是你Web应用程序的迷你版本，在移动设备的浏览器上加载。在iOS设备上，它可以是Safari或Chrome，在Android设备上，它可以是Android默认浏览器或Chrome。例如，在你的iOS或Android设备上，打开你的浏览器并输入[www.facebook.com](http://www.facebook.com)。在页面加载之前，你会观察到从[www.facebook.com](http://www.facebook.com)到[m.facebook.com](http://m.facebook.com)的URL重定向发生。Facebook应用程序服务器意识到请求是从移动设备发起的，并开始提供移动网站而不是桌面网站。这些m.site使用JavaScript和HTML5来开发，就像你的正常Web应用程序一样：'
- en: '![](img/897b1347-98fc-4c96-9ce4-2e6698ec15f6.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/897b1347-98fc-4c96-9ce4-2e6698ec15f6.png)'
- en: '**Hybrid apps**: The Hybrid app is a combination of the native app and the
    web app. When you develop a native app, some parts of it load HTML web pages into
    the app trying to make the user feel that they are using a native application.
    They generally use WebViews in native apps to load the web pages.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**混合应用**：混合应用是原生应用和Web应用的组合。当你开发原生应用时，其中一些部分会加载HTML网页到应用中，试图让用户感觉他们正在使用原生应用程序。它们通常在原生应用中使用WebView来加载网页。'
- en: Now, as a test-scripts developer, you have to test all these different applications
    on various mobile devices.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，作为一名测试脚本开发者，你必须在各种移动设备上测试所有这些不同的应用程序。
- en: Available software tools
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可用的软件工具
- en: 'To automate the testing of your applications on mobile devices, there are many
    software tools available. The following are some of the tools that are built based
    on Selenium WebDriver:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了自动化在移动设备上测试你的应用程序，有许多软件工具可供选择。以下是基于Selenium WebDriver构建的一些工具：
- en: '**Appium**: A cross-platform and cross-technology mobile testing framework
    based on Selenium for native, hybrid, and mobile web applications. Appium enables
    the use and extension of the existing Selenium WebDriver framework to build mobile
    tests. As it uses Selenium WebDriver to drive the tests, we can use any language
    to create tests for which a Selenium client library exists. You can create and
    execute your test scripts against Android and iOS platforms without having to
    change the underlying driver. Appium can also work with Firefox OS platforms.
    In the rest of the chapter, we will see how we can work with Appium.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Appium**：一个基于Selenium的跨平台和跨技术移动测试框架，适用于原生、混合和移动Web应用。Appium允许使用和扩展现有的Selenium
    WebDriver框架来构建移动测试。由于它使用Selenium WebDriver来驱动测试，我们可以使用任何存在Selenium客户端库的语言来创建测试。您可以在不改变底层驱动的情况下，针对Android和iOS平台创建和执行测试脚本。Appium还可以与Firefox
    OS平台协同工作。在本章的其余部分，我们将看到如何使用Appium。'
- en: '**Selendroid**: This driver is similar to iOSDriver and can execute your native,
    hybrid, and m.site application test scripts on the Android platform. It uses the
    native UI Automator library provided by Google. The test scripts communicate with
    the Selendroid driver over the JSON wire protocol while using its favourite client-language
    bindings.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Selendroid**：此驱动程序类似于iOSDriver，可以在Android平台上执行您的原生、混合和m.site应用程序测试脚本。它使用Google提供的原生UI
    Automator库。测试脚本通过使用其最喜欢的客户端语言绑定，通过JSON线协议与Selendroid驱动程序通信。'
- en: Automating iOS and Android tests using Appium
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Appium自动化iOS和Android测试
- en: Appium is a popular and widely used tool that can be employed to automate mobile-app
    testing for both the Android and iOS platforms. It can be used to automate native,
    m.sites, and hybrid applications. It internally uses WebDriver's JSON wire protocol.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Appium是一个流行的广泛使用的工具，可以用于自动化Android和iOS平台的移动应用测试。它可以用于自动化原生、m.sites和混合应用程序。它内部使用WebDriver的JSON线协议。
- en: Automating iOS Application tests
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化iOS应用程序测试
- en: 'For automating iOS app tests, Appium uses XCTest or UI Automation (for older
    iOS versions):'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于自动化iOS应用程序测试，Appium使用XCTest或UI Automation（对于较旧的iOS版本）：
- en: '**XCTest**: You can use XCTest to create and run unit tests, performance tests,
    and UI tests for your iOS applications built for iOS 9.3 and higher. It integrates
    with Xcode''s testing workflow for testing the iOS application. Appium internally
    uses XCTest for automating the iOS applications.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**XCTest**：您可以使用XCTest为针对iOS 9.3及以上版本构建的iOS应用程序创建和运行单元测试、性能测试和UI测试。它集成了Xcode的测试工作流程，用于测试iOS应用程序。Appium内部使用XCTest来自动化iOS应用程序。'
- en: '**UI Automation**: For testing apps developed for iOS 9.3 and lower, you need
    to use UI Automation. Appium receives the commands from test scripts over the
    JSON wire protocol. Appium sends these commands to Apple Instruments so that they
    can be executed on the app that is launched in a simulator or real device. While
    doing so, Appium translates the JSON commands into UI Automation JavaScript commands
    that can be understood by the instruments. The instruments take care of launching
    and closing the app in the simulator or device.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**UI Automation**：对于为iOS 9.3及以下版本开发的测试应用程序，您需要使用UI Automation。Appium通过JSON线协议从测试脚本接收命令。Appium将这些命令发送给Apple
    Instruments，以便在模拟器或真实设备上运行的程序执行。在此过程中，Appium将JSON命令转换为仪器可以理解的UI Automation JavaScript命令。仪器负责在模拟器或设备上启动和关闭应用程序。'
- en: 'Appium works as a Remote WebDriver and receives the commands from your test
    scripts over the JSON wire protocol. These commands are passed to XCTest or Apple
    Instruments to be executed on the app launched on a simulator or a real device.
    This process is shown in the following diagram:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Appium作为远程WebDriver工作，并通过JSON线协议从您的测试脚本接收命令。这些命令被传递给XCTest或Apple Instruments，以便在模拟器或真实设备上启动的应用程序上执行。此过程在以下图中展示：
- en: '![](img/0c2d9f49-39a1-4edd-b570-87d7c37113e5.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0c2d9f49-39a1-4edd-b570-87d7c37113e5.png)'
- en: After the command is executed against your app on the simulator or device, the
    target app sends the response to XCTest or UI Automation Instrument, which is
    transferred to Appium in the JavaScript response format. Appium translates the
    responses into Selenium WebDriver JSON wire protocol responses and sends them
    back to your test script.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令针对模拟器或设备上的您的应用程序执行后，目标应用程序会将响应发送给XCTest或UI Automation Instrument，这些响应以JavaScript响应格式传输到Appium。Appium将响应转换为Selenium
    WebDriver JSON线协议响应，并将它们发送回您的测试脚本。
- en: 'The main advantages of using Appium for your iOS automation testing are as
    follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Appium进行iOS自动化测试的主要优势如下：
- en: It uses the iOS platform-supported XCTest or the UI Automation library and instruments
    provided by Apple itself.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用iOS平台支持的XCTest或苹果公司本身提供的UI Automation库和仪器。
- en: Even though you are using the JavaScript library, you, and a test-script developer,
    and your tests are not really tied to it. You can use your own Selenium WebDriver
    client-language bindings, such as Java, Ruby, or Python, to develop your test
    scripts. Appium will take care of translating them into JavaScript for you.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽管您使用的是JavaScript库，但您、测试脚本开发人员和您的测试实际上并没有真正绑定到它。您可以使用自己的Selenium WebDriver客户端语言绑定，如Java、Ruby或Python，来开发您的测试脚本。Appium将负责将它们转换为JavaScript。
- en: You don't have to modify your native or hybrid apps for the purpose of testing.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您不需要修改您的原生或混合应用程序以进行测试目的。
- en: Automating Android application tests
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化Android应用程序测试
- en: 'Automating Android tests for your Android apps is similar to automating iOS
    apps tests. Except for the fact that your target platform is changing, your test
    scripts will not undergo any change. The following diagram that shows the workflow:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为您的Android应用程序自动化测试与自动化iOS应用程序测试类似。除了目标平台在变化之外，您的测试脚本不会经历任何变化。以下图表显示了工作流程：
- en: '![](img/b060e218-e8e7-489f-8092-8666734b8978.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b060e218-e8e7-489f-8092-8666734b8978.png)'
- en: Again, Appium works as a Remote WebDriver and receives the commands from your
    test scripts over the JSON wire protocol. These commands are passed to Google
    UI Automator, which comes with Android SDK, to be executed on the native app launched
    on a simulator or a real device. Before the commands are passed on the UI Automator,
    Appium translates the JSON commands into UI Automator commands that can be understood
    by UI Automator. This UI Automator will launch your app on the simulator or real
    device and start executing your test-script commands on it. After the command
    is executed against your app on the simulator or device, the target app sends
    the response to the UI Automator, which is transferred to Appium in the UI Automator
    response format. Appium translates the UI Automator responses into Selenium WebDriver
    JSON wire protocol responses and sends them back to your test script.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，Appium作为远程WebDriver，通过JSON协议从您的测试脚本接收命令。这些命令被传递给Android SDK附带的Google UI
    Automator以在模拟器或真实设备上执行。在将命令传递给UI Automator之前，Appium将JSON命令转换为UI Automator可以理解的命令。这个UI
    Automator将在模拟器或真实设备上启动您的应用程序，并开始执行您的测试脚本命令。在模拟器或设备上针对您的应用程序执行命令后，目标应用程序将响应发送给UI
    Automator，该响应以UI Automator响应格式传输到Appium。Appium将UI Automator响应转换为Selenium WebDriver
    JSON协议响应，并将它们发送回您的测试脚本。
- en: This is the high-level architecture that helps you understand how Appium works
    with Android and iOS devices to execute your test commands.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这是帮助您理解Appium如何与Android和iOS设备协同工作以执行测试命令的高级架构。
- en: Prerequisites for Appium
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Appium的先决条件
- en: Before we start discussing some working examples for Appium, we need to install
    some prerequisite tools for the iOS and Android platforms. We need to set up Xcode
    and Android Studio for this purpose, for which I'll be showing the examples on
    macOS.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始讨论Appium的一些工作示例之前，我们需要为iOS和Android平台安装一些先决工具。我们需要为此设置Xcode和Android Studio，我将展示在macOS上的示例。
- en: Setting up Xcode
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Xcode
- en: 'To set up the Xcode, we will perform the following steps:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了设置Xcode，我们将执行以下步骤：
- en: You can download the latest Xcode from [https://developer.apple.com/xcode/](https://developer.apple.com/xcode/).
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以从[https://developer.apple.com/xcode/](https://developer.apple.com/xcode/)下载最新的Xcode。
- en: After downloading it, install and open it.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载后，安装并打开它。
- en: 'Navigate to Preferences | Components to download and install command-line tools
    and iOS Simulators, as shown in the following screenshot:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到“首选项”|“组件”，以下载和安装命令行工具和iOS模拟器，如下面的截图所示：
- en: '![](img/438d70e8-cfdc-4060-be80-6bda85a9d803.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/438d70e8-cfdc-4060-be80-6bda85a9d803.png)'
- en: If you are using a real device, you need a provisioning profile installed on
    the device and USB-debugging enabled on it.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是真实设备，您需要在设备上安装配置文件，并启用USB调试。
- en: 'Try to launch the iPhone simulator and verify that it works. You can launch
    the simulator by navigating to Xcode | Open Developer Tool | iOS Simulator. The
    simulator should look similar to what is shown in the following screenshot:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试启动iPhone模拟器并验证它是否正常工作。您可以通过导航到Xcode | 打开开发者工具 | iOS模拟器来启动模拟器。模拟器应该看起来与以下截图所示类似：
- en: '![](img/e1de65ea-0d2c-4391-8e3d-bc078040fda4.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e1de65ea-0d2c-4391-8e3d-bc078040fda4.png)'
- en: Setting up Android SDK
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Android SDK
- en: You need to install Android SDK from [https://developer.android.com/studio/](https://developer.android.com/studio/).
    Download and install Android Studio.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要从[https://developer.android.com/studio/](https://developer.android.com/studio/)安装Android
    SDK。下载并安装Android Studio。
- en: 'Launch the installed Android Studio. Now download any Android whose API level
    is 27, and install it. You can do that by navigating to Tools | SDK Manager. You
    should see something similar to what is shown in the following screenshot:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 启动已安装的Android Studio。现在下载任何API级别为27的Android，并安装它。您可以通过导航到“工具 | SDK管理器”来完成此操作。您应该会看到以下截图所示的内容：
- en: '![](img/6e2f86c0-47a9-4085-bf04-31a4a462123a.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6e2f86c0-47a9-4085-bf04-31a4a462123a.png)'
- en: Here, we are installing Android 8.1, which has an API level of 27.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在安装Android 8.1，其API级别为27。
- en: Creating the Android Emulator
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Android模拟器
- en: 'If you want to execute your test scripts on an Android Emulator, you have to
    create one. To create one, we will perform the following steps:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在Android模拟器上执行测试脚本，您必须创建一个。要创建一个，我们将执行以下步骤：
- en: 'In Android Studio, open the AVD Manager by navigating to Tools | AVD Manager.
    It launches the AVD Manager, as shown in the following screenshot:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Android Studio中，通过导航到“工具 | AVD管理器”打开AVD管理器。它将启动AVD管理器，如下面的截图所示：
- en: '![](img/d8b68ab6-50f7-47a3-8730-7f57528d7a1a.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d8b68ab6-50f7-47a3-8730-7f57528d7a1a.png)'
- en: 'Create a new virtual device or emulator by clicking on the Create Virtual Device...
    button. You should see a window that will take all the necessary information from
    you, as shown in the following screenshot:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击“创建虚拟设备...”按钮创建一个新的虚拟设备或模拟器。你应该会看到一个窗口，它会从你那里获取所有必要的信息，如下面的截图所示：
- en: '![](img/d3cca45e-c895-4045-9731-cbb2c28f06e7.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d3cca45e-c895-4045-9731-cbb2c28f06e7.png)'
- en: 'Launch the emulator to see whether it was created successfully. It might take
    several minutes for the Android Virtual Device to start. The following screenshot
    shows a started Android Emulator:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动模拟器以查看是否创建成功。Android虚拟设备启动可能需要几分钟。以下截图显示了已启动的Android模拟器：
- en: '![](img/6055aea8-1d4d-4ee3-8e7f-d7b6b53115e0.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6055aea8-1d4d-4ee3-8e7f-d7b6b53115e0.png)'
- en: Installing Appium
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Appium
- en: You can download Appium from [http://appium.io/.](http://appium.io/.) Click
    on the Download Appium button to download the Appium specific to your workstation
    platform. Here, I am using a Mac, so it will download the Appium DMG file.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[http://appium.io/](http://appium.io/)下载Appium。点击“下载Appium”按钮以下载适用于您工作站平台的Appium。在这里，我使用的是Mac，因此它将下载Appium
    DMG文件。
- en: 'Copy Appium to the `Applications` folder, and try to launch it. The first time
    it is launched, it asks for your authorization to run the iOS simulators, as shown
    in the following screenshot:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 将Appium复制到“应用程序”文件夹中，并尝试启动它。第一次启动时，它会要求您授权运行iOS模拟器，如下面的截图所示：
- en: '![](img/b5f94734-f809-46db-9359-e75f1348078c.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b5f94734-f809-46db-9359-e75f1348078c.png)'
- en: Click on Launch to Start Server button. By default, it starts at `http://localhost:4723`.
    This is the remote URL to which your test scripts should direct the test commands.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“启动服务器”按钮。默认情况下，它将在`http://localhost:4723`启动。这是你的测试脚本应指向的远程URL。
- en: Automating for iOS
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化iOS
- en: 'Now we have Appium running, so let''s create a test that will check the search
    test on the iPhone Safari browser. Let''s use the `DesiredCapabilities` class
    to provide capabilities to Appium for running tests on iPhone X and iOS 11.4,
    as shown in the following code:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经运行了Appium，所以让我们创建一个测试，该测试将检查iPhone Safari浏览器上的搜索测试。让我们使用`DesiredCapabilities`类为Appium提供能力，以便在iPhone
    X和iOS 11.4上运行测试，如下面的代码所示：
- en: '[PRE0]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As you can see, the preceding code is similar to the test script for `RemoteWebDriver`.
    However, there are a few differences. The following code depicts that:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，前面的代码与`RemoteWebDriver`的测试脚本类似，但有一些不同。以下代码描述了这些差异：
- en: '[PRE1]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The Appium Java Client library provides the `IOSDriver` class that supports
    executed tests on the iOS platform to run the tests with Appium. However, for
    Appium to use the desired platform, we need to pass a set of desired The `platformName`
    capability is used by Appium to decide on which platform the test script should
    get executed. In this example, we used the iPhone X Simulator. To run the tests
    on an iPad, we can specify the iPad Simulator.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Appium Java客户端库提供了`IOSDriver`类，该类支持在iOS平台上执行测试，并使用Appium运行测试。然而，为了使Appium使用所需的平台，我们需要传递一组期望的`platformName`能力。在本文例中，我们使用了iPhone
    X模拟器。要在iPad上运行测试，我们可以指定iPad模拟器。
- en: When running the tests on a real device, we need to specify the value of the
    iPhone or iPad for the device capability. Appium will pick the device that is
    connected to the Mac via USB. The last desired capability that we used is browserName,
    which is used by Appium to launch the Safari browser.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在真实设备上运行测试时，我们需要指定iPhone或iPad的设备功能值。Appium将选择通过USB连接到Mac的设备。我们使用的最后一个所需功能是browserName，它由Appium用于启动Safari浏览器。
- en: Automating for Android
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化Android
- en: Testing apps on Android is similar to testing on iOS. For Android, we will use
    a real device instead of an emulator (a simulator is called an emulator in the
    Android community). We will use the same application to test in Chrome for Android.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android上测试应用程序与在iOS上测试类似。对于Android，我们将使用真实设备而不是仿真器（在Android社区中，仿真器被称为模拟器）。我们将使用相同的应用程序在Android的Chrome浏览器上进行测试。
- en: 'For this example, I am using the Samsung Galaxy S4 Android handset. We need
    to install the Google Chrome browser on the device. You can get Google Chrome
    at Google''s Play store in case it is not pre-installed on your device. Next,
    we need to connect the device to the machine on which the Appium server is running.
    Let''s run the following command to get a list of emulators or devices connected
    to the machine:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我使用的是三星Galaxy S4 Android手机。我们需要在设备上安装Google Chrome浏览器。如果您设备上没有预装Google
    Chrome，可以在Google的Play商店获取。接下来，我们需要将设备连接到运行Appium服务器的机器。让我们运行以下命令以获取连接到机器的仿真器或设备的列表：
- en: '[PRE2]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The`Android Debug Bridge` (ADB) is a command-line tool available in the Android
    SDK that lets you communicate with an emulator instance or an actual Android device
    connected to your computer. The `./adb devices` command will display a list of
    all the Android devices that are connected to the host, as per the following output:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`Android Debug Bridge`（ADB）是Android SDK中可用的命令行工具，允许您与连接到计算机的仿真器实例或实际Android设备进行通信。`./adb
    devices`命令将显示连接到主机的所有Android设备的列表，如下面的输出所示：'
- en: '[PRE3]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s modify the script we created for iOS to use the Android capabilities
    and AndroidDriver class to execute tests on real Android devices, as shown in
    the following code:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修改为iOS创建的脚本，以使用Android功能以及AndroidDriver类在真实Android设备上执行测试，如下面的代码所示：
- en: '[PRE4]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the preceding example, we assigned the `platformName` capability value to
    `Android`, which will be used by Appium to run tests on Android. As we want to
    run the tests in Chrome for Android, we have mentioned Chrome in the browser capability
    section of the code. The other important change we made was using the `AndroidDriver`
    class from the Appium Java client libraries.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们将`platformName`功能值分配给了`Android`，这将由Appium用于在Android上运行测试。由于我们想在Android的Chrome浏览器上运行测试，我们在代码的浏览器功能部分提到了Chrome。我们做出的另一个重要更改是使用Appium
    Java客户端库中的`AndroidDriver`类。
- en: Appium will use the first device from the list of devices that `adb` returns,
    as shown in the following screenshot. It will use the desired capabilities that
    we mentioned, and will launch the Chrome browser on the device and start executing
    the test-script commands.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Appium将使用`adb`返回的设备列表中的第一个设备，如下面的截图所示。它将使用我们提到的所需功能，并在设备上启动Chrome浏览器并开始执行测试脚本命令。
- en: Using Device Cloud to run tests on Real Devices
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用设备云在真实设备上运行测试
- en: Appium supports testing on mobile simulators, emulators, and real devices. To
    set up a mobile-testing lab with real devices requires capital investment as well
    as the maintenance of devices and infrastructure. Mobile phone manufacturers release
    new phone models and operating system updates almost every day and your application
    has to be compatible with the new launches.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Appium支持在移动模拟器、仿真器和真实设备上进行测试。要设置一个使用真实设备的移动测试实验室，需要资本投资以及设备和基础设施的维护。手机制造商几乎每天都会发布新的手机型号和操作系统更新，而您的应用程序必须与新发布的产品兼容。
- en: To respond to these changes faster and keep the investment to a minimum, we
    can use Cloud-based mobile-testing labs. There are a number of vendors, such as
    Amazon Web Services, BrowserStack, and Sauce Labs, that provide cloud-based real-mobile-device
    labs to execute tests without requiring any upfront investment in real devices.
    You pay only for the amount of time used for testing. These vendors also allow
    you to run automated tests using Appium in their Device clouds.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更快地应对这些变化并将投资降至最低，我们可以使用基于云的移动测试实验室。有许多供应商，如亚马逊网络服务、BrowserStack和Sauce Labs，提供基于云的实时移动设备实验室来执行测试，而不需要在前端设备上进行任何投资。您只需为测试使用的时间付费。这些供应商还允许您在他们的设备云中使用Appium运行自动化测试。
- en: 'In this section, we will explore BrowserStack to run tests on its real-device
    Cloud:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探索BrowserStack，以在其实时设备云上运行测试：
- en: You need to have a BrowserStack account with a subscription to the **Automate**
    feature. You can sign up for a free trial account at [https://www.browserstack.com/](https://www.browserstack.com/).
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要一个带有**Automate**功能订阅的BrowserStack账户。您可以在[https://www.browserstack.com/](https://www.browserstack.com/)上注册一个免费试用账户。
- en: 'We need to get the desired capabilities from BrowserStack based on device combination.
    BrowserStack provides capability-suggestions based on the selected combination
    of devices and platforms. Go to [https://www.browserstack.com/automate/java](https://www.browserstack.com/automate/java)
    and select an OS and Device :'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要根据设备组合从BrowserStack获取所需的配置能力。BrowserStack根据所选的设备和平台组合提供能力建议。请访问[https://www.browserstack.com/automate/java](https://www.browserstack.com/automate/java)并选择一个操作系统和设备：
- en: '![](img/1b973f88-79a8-4af1-804a-9f548829ccf4.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1b973f88-79a8-4af1-804a-9f548829ccf4.png)'
- en: 'Based on your selection, BrowserStack will auto-generate code using your username
    and access key:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据您的选择，BrowserStack将使用您的用户名和访问密钥自动生成代码：
- en: '![](img/8b734eee-5357-4da2-9c8a-cfe2a7fe24a3.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8b734eee-5357-4da2-9c8a-cfe2a7fe24a3.png)'
- en: 'We will not use the suggested code in step 3, and instead change our test as
    shown in the following code. Remember, you need to use the username and access
    key shown in the auto-generated code:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将不会使用步骤3中建议的代码，而是将测试更改为以下代码所示。请记住，您需要使用自动生成的代码中显示的用户名和访问密钥：
- en: '[PRE5]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Execute the test from your IDE, and it will run in the BrowserStack cloud.
    You can monitor the tests in the BrowserStack dashboard where it will show you
    capabilities used, the status of each step, console logs, network logs, Appium
    logs, and a video of the execution:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 从您的IDE执行测试，它将在BrowserStack云中运行。您可以在BrowserStack仪表板中监控测试，其中将显示使用的配置能力、每个步骤的状态、控制台日志、网络日志、Appium日志和执行的视频：
- en: '![](img/ddd572c8-832e-40f6-b531-f8025357dfe0.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ddd572c8-832e-40f6-b531-f8025357dfe0.png)'
- en: Summary
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed the different ways a business can reach out to
    its users on mobile platforms. We also learned about the various software tools
    that are created using Selenium WebDriver. Finally, we went through one of the
    upcoming software tools and modified our test script to work with iOS and Android
    platforms.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了企业如何在移动平台上接触其用户的不同方式。我们还了解了使用Selenium WebDriver创建的各种软件工具。最后，我们介绍了一种即将推出的软件工具，并修改了我们的测试脚本以与iOS和Android平台兼容。
- en: In the next [chapter](92f91d98-4a76-4ea5-90cd-840ba7fabb96.xhtml), we will see
    how to create parameterized and data-driven tests using `TestNG`. This will help
    us to reuse tests and increase test coverage.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到如何使用`TestNG`创建参数化和数据驱动的测试。这将帮助我们重用测试并提高测试覆盖率。
- en: Questions
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What are the different types of mobile apps?
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移动应用有哪些不同类型？
- en: Which classes does the Appium Java Client library provide for testing iOS and
    Android applications?
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Appium Java客户端库为测试iOS和Android应用程序提供了哪些类？
- en: What is the command to list the Android devices connected to a computer via
    USB ports?
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出通过USB端口连接到计算机的Android设备的命令是什么？
- en: What is the default port used by Appium Server?
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Appium服务器默认使用哪个端口？
- en: Further information
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多信息
- en: 'You can check out the following link for more information about the topics
    covered in this chapter:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以查看以下链接，获取有关本章涵盖主题的更多信息：
- en: For more examples of using Appium, please visit its website and GitHub forums
    at [http://appium.io/](http://appium.io/) and [https://github.com/appium/appium/tree/master/sample-code/java](https://github.com/appium/appium/tree/master/sample-code/java)
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 想要更多关于使用Appium的示例，请访问其网站和GitHub论坛[http://appium.io/](http://appium.io/)和[https://github.com/appium/appium/tree/master/sample-code/java](https://github.com/appium/appium/tree/master/sample-code/java)
