["```java\npublic static void main(String[] args) {\n        Map<String, Object>configs = new HashMap<String, Object>(1);\nconfigs.put(JsonGenerator.PRETTY_PRINTING, true);\nJsonGeneratorFactory factory = Json.createGeneratorFactory(configs);\nJsonGeneratorgenerator = factory.createGenerator(System.out);\n\ngenerator.writeStartObject()                    \n            .write(\"title\", \"Getting Started with RESTful Web Services\")  \n                .write(\"type\", \"paperback\")    \n                .write(\"author\", \"Bhakti Mehta, Masoud Kalali\")   \n                .write(\"publisher\", \"Packt\")            \n                .write(\"publication year\", \"2013\")     \n                .write(\"edition\",  \"1\")\n        .writeEnd()                             \n        .close();\n    }\n```", "```java\n{\n    \"title\":\" Getting Started with RESTful Web Services\",\n        \"type\":\" paperback\",\n        \"author\":\" Bhakti Mehta, Masoud Kalali\",\n        \"publisher\":\"Packt\",\n        \"edition\":\"1\"\n}\n```", "```java\ntry (JsonGenerator generator = factory.createGenerator(System.out);) \n       {\n        }\n```", "```java\nFileInputStreambooksInputfile = new FileInputStream(\"output.json\");\nJsonParser parser = Json.createParser(booksInputfile);\n            Event event = null;\n            while(parser.hasNext()) {\n                event = parser.next();\n                if(event == Event.KEY_NAME&&\"details\".equals(parser.getString())) {\n                    event = parser.next();\n                    break;\n                }\n            }\n            while(event != Event.END_OBJECT) {\n                switch(event) {\n                    case KEY_NAME: {\n                        System.out.print(parser.getString());\n                        System.out.print(\" = \");\n                        break;\n                    }\n                    case VALUE_NUMBER: {\n                        if(parser.isIntegralNumber()) {\n                          System.out.println(parser.getInt());\n                        } else {\n                          System.out.println(parser.getBigDecimal());\n                        }\n                       break;\n                    }\n                    case VALUE_STRING: {\n                         System.out.println(parser.getString());\n                        break;\n                    }\n                    default: {\n                    }\n                }\n                event = parser.next();\n            }\n```", "```java\nMap<String, Object>configs = new HashMap<String, Object>();        \nJsonBuilderFactory factory = Json.createBuilderFactory(configs);\nJsonObject book= factory.createObjectBuilder()\n.add(\"title\", \"Getting Started with RESTful Web Services\")\n.add(\"type\", \"paperback\")\n.add(\"author\", \"Bhakti Mehta, Masoud Kalali\")\n.add(\"publisher\", \"Packt\")\n.add(\"publication year\", \"2013\")\n.add(\"edition\", \"1\")\n.build();   \nconfigs.put(JsonGenerator.PRETTY_PRINTING, true);\nJsonWriter writer = Json.createWriterFactory(configs).createWriter(System.out);\nwriter.writeObject(book);\n```", "```java\n{\n    \"title\":\" Getting Started with RESTful Web Services\",\n        \"type\":\" paperback\",\n        \"author\":\" Bhakti Mehta, Masoud Kalali\",\n        \" publisher \":\" Packt\",\n        \" edition\":\"1\"\n}\n```", "```java\nMap<String, Object>configs = \nnew HashMap<String, Object>(1);        \nJsonReader  reader = \nJson.createReader(new FileInputStream(\"book.json\"));        \nJsonObject book=reader.readObject();       \n        String title = book.getString(\"title\");\nint edition = book.getString(\"edition\");\n```", "```java\npublic interface ReadListener extends EventListener { \n public void onDataAvailable(ServletRequest request); \n public void onAllDataRead(ServletRequest request); \n public void onError(Throwable t); \n}\n```", "```java\npublic interface WriteListener extends EventListener { \npublic void onWritePossible(ServletResponse response); \npublic void onError(Throwable t); \n}\n```", "```java\n@WebServlet(urlPatterns=\"/book-servlet\", asyncSupported=true)\npublic class BookServlet extends HttpServlet {\n    protected void doPost(HttpServletRequestreq, HttpServletResponse res)\n            throws IOException, ServletException {\nAsyncContext ac = req.startAsync();\nac.addListener(new AsyncListener() {\n            public void onComplete(AsyncEvent event) throws IOException {\nevent.getSuppliedResponse().getOutputStream().print(\"Async Operation Completed\");\n            }\n            public void onError(AsyncEvent event) {\nSystem.out.println(event.getThrowable());\n            }\n            public void onStartAsync(AsyncEvent event) {\nSystem.out.println(\"Async Operation Started\");\n            }\n            public void onTimeout(AsyncEvent event) {\nSystem.out.println(\"Async Operation Timedout\");\n            }\n        });\nServletInputStream input = req.getInputStream();\nReadListenerreadListener =  new ReservationRequestReadListener(input, res, ac);\ninput.setReadListener(readListener);\n    }\n}\n```", "```java\nclass ReservationRequestReadListener implements ReadListener {\n    private ServletInputStream input = null;\n    private HttpServletResponse response = null;\n    private AsyncContext context = null;    \n    private Queue queue = new LinkedBlockingQueue();\n\nReservationRequestReadListener(ServletInputStream in, HttpServletResponse r, AsyncContext c) {\nthis.input = in;\nthis.response = r;\nthis.context = c;\n    }\n\n    public void onDataAvailable() throws IOException {\nStringBuildersb = new StringBuilder();\nint read;\nbyte b[] = new byte[1024];\nwhile (input.isReady() && (read = input.read(b)) != -1) {\nString data = new String(b, 0, read);\nsb.append(data);\n        }\nqueue.add(sb.toString());\n    }\n\npublic void onAllDataRead() throws IOException {\nperformBusinessOperation();\nServletOutputStream output = response.getOutputStream();\nWriteListenerwriteListener = new ResponseWriteListener(output, queue, context);\noutput.setWriteListener(writeListener);\n    }\n\npublic void onError(Throwable t) {\ncontext.complete();        \n    }\n}\n```", "```java\nclass ResponseWriteListener implements WriteListener {\n    private ServletOutputStream output = null;\n    private Queue queue = null;\n    private AsyncContext context = null;\n\nResponseWriteListener(ServletOutputStreamsos, Queue q, AsyncContext c) {\nthis.output = sos;\nthis.queue = q;\nthis.context = c;\n    }\n\n    public void onWritePossible() throws IOException {\n        while (queue.peek() != null &&output.isReady()) {\n            String data = (String) queue.poll();\n            output.print(data);\n        }\n        if (queue.peek() == null) {\n            context.complete();\n        }\n    }\n\n    public void onError(final Throwable t) {\n           context.complete();\n           t.printStackTrace();\n    }\n}\n```", "```java\n@Path(\"/books/borrow\")\n@Stateless\npublic class BookResource {   \n  @Context private ExecutionContextctx;\n  @GET @Produce(\"application/json\")\n  @Asynchronous\n  public void borrow() {\n         Executors.newSingleThreadExecutor().submit( new Runnable() {\n         public void run() { \n         Thread.sleep(10000);     \n         ctx.resume(\"Hello async world!\"); \n         } });  \n         ctx.suspend();\t\t\n         return;\n  } \n} \n```", "```java\n@Path(\"/books/borrow\")\n@Stateless\npublic class BookResource {   \n  @GET @Produce(\"application/json\")\n  @Asynchronous\n  public void borrow(@Suspended AsyncResponsear) {\n  final String result = prepareResponse();\n  ar.resume(result)  } \n}   \n```", "```java\nFuture<Book> future = client.target(\"(\"books/borrow/borrow\")\n               .request()\n               .async()\n               .get(Book.class);\ntry {\n   Book book = future.get(30, TimeUnit.SECONDS);\n} catch (TimeoutException ex) {\n  System.err.println(\"Timeout occurred\");\n}\n```", "```java\n@Stateless\n@LocalBean\npublic class FTSSearch {\n\n    @Asynchronous\n    public Future<List<String>> search(String text, intdummyWait) {        \n        List<String> books = null;\n        try {\n           books= performSearch(text,dummyWait);\n        } catch (InterruptedException e) {\n            //handling exception\n        }\n        return new AsyncResult<List<String>>(books);        \n    }\n    private List<String>performSearch(String content, intdummyWait) throws InterruptedException{\nThread.sleep(dummyWait);\nreturn Arrays.asList(content);\n    }\n}\n```", "```java\n@WebServlet(name = \"FTSServlet\", urlPatterns = {\"/FTSServlet\"})\npublic class FTSServlet extends HttpServlet {\n\n    @EJB\nFTSSearchftsSearch;\n\n    @Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        Future<List<String>>wsResult = ftsSearch.search(\"WebSockets\", 5000);\n        Future<List<String>>sseResult = ftsSearch.search(\"SSE\", 1000);\n\n        while (!sseResult.isDone()) {\n            try {\nThread.sleep(500);\n                //perform other tasks... e.g. show progress status\n            } catch (InterruptedException ex) {\nLogger.getLogger(FTSServlet.class.getName()).log(Level.SEVERE, null, ex);\n            }\n        }\n\nresponse.setContentType(\"text/html;charset=UTF-8\");\nPrintWriter out = response.getWriter();\n        try {\n            /* TODO output your page here. You may use following sample code. */\nout.println(\"<!DOCTYPE html>\");\nout.println(\"<html>\");\nout.println(\"<head>\");\nout.println(\"<title>Servlet d</title>\");\nout.println(\"</head>\");\nout.println(\"<body>\");\nout.println(\"<h1>SSE Search result: \" + sseResult.get().get(0) + \"</h1>\");\n            while (!wsResult.isDone()) {\n                try {\nThread.sleep(500);\n                } catch (InterruptedException ex) {\nLogger.getLogger(FTSServlet.class.getName()).log(Level.SEVERE, null, ex);\n                }\n            }\nout.println(\"<h1>WS Search result: \" + wsResult.get().get(0) + \"</h1>\");\nout.println(\"</body>\");\nout.println(\"</html>\");\n        } catch (InterruptedException ex) {\nLogger.getLogger(FTSServlet.class.getName()).log(Level.SEVERE, null, ex);\n        } catch (ExecutionException ex) {\nLogger.getLogger(FTSServlet.class.getName()).log(Level.SEVERE, null, ex);\n        } finally {\nout.close();\n        }\n    }\n\n}\n```"]