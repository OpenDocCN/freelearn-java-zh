- en: Chapter 2. Your First Java EE Application on WildFly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter will provide you with a crash course in the new application server
    so that you will be able to create a deployable skeleton of our first Java EE
    7 application in the next chapter. More specifically, we will cover the following
    topics:'
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to the WildFly 8 core concepts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The anatomy of the WildFly 8 filesystem
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An introduction to the available management instruments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying your first Hello World application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WildFly 8 core concepts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have downloaded and installed WildFly 8, it is worth spending a
    few minutes familiarizing ourselves with some basic concepts. The architecture
    and most of the core ideas are taken straight from JBoss AS 7; although, there
    are some new mechanisms that were introduced with the newest version (for example,
    role-based security for the management system, reduced number of used ports, and
    a new patching system). Just like JBoss AS 7, WildFly can be run in two modes:
    the standalone mode and domain mode.'
  prefs: []
  type: TYPE_NORMAL
- en: In the **standalone** mode, each WildFly instance is an independent process
    (similar to the previous JBoss AS versions, such as Version 4, Version 5, Version
    6, and the standalone mode in Version 7). The standalone configuration files are
    located under the `standalone`/`configuration` directory of the application server.
  prefs: []
  type: TYPE_NORMAL
- en: In the **domain** mode, you can run multiple application servers and manage
    them from a central point. A domain can span multiple physical (or virtual) machines.
    On each machine, we can install several instances of WildFly that are under the
    control of a Host Controller process. The configuration files in the domain mode
    are located under the `domain`/`configuration` folder of the application server.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the process point of view, a domain is made up of three elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Domain Controller**: The domain controller is the management control point
    of your domain. A WildFly instance running in the domain mode will have at the
    most one process instance acting as a domain controller. The domain controller
    holds a centralized configuration, which is shared by the node instances that
    belong to that domain.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Host Controller**: This is the process that is responsible for coordinating
    the life cycle of server processes and the distribution of deployments from the
    domain controller to the server instances.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Application server nodes**: These are regular Java processes that map instances
    of the application server. Each server node, in turn, belongs to a server group.
    Domain groups are explained in detail when we will discuss the domain configuration
    file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additionally, when starting a domain, you will see another JVM process running
    on your machine. This is the Process Controller. It is a very lightweight process
    whose primary function is to spawn server processes and Host Controller processes,
    and manage their input/output streams. Since Process Controller is not configurable,
    we will not discuss it any further.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram depicts a typical domain deployment configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![WildFly 8 core concepts](img/00010.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see in the preceding diagram, one host (**Host1**) acts as a dedicated
    domain controller. This is a common practice adopted in domain-managed servers
    in order to logically and physically separate the administration unit from the
    servers where the applications are hosted.
  prefs: []
  type: TYPE_NORMAL
- en: 'The other hosts (**Host2** and **Host3**) contain the domain application servers,
    which are divided into two server groups: **main-server-group** and **other-server-group**.
    A server group is a logical set of server instances that will be managed and configured
    together. Each server group can, in turn, be configured with different profiles
    and deployments; for example, in the preceding domain, you can provide some services
    with **main-server-group** and other services with **other-server-group**.'
  prefs: []
  type: TYPE_NORMAL
- en: This has some advantages. For example, when you don't want to shut down your
    application for a new version, you can start by redeploying only one server group
    at a time. When one server is not fully operational, requests can be handled by
    the second one.
  prefs: []
  type: TYPE_NORMAL
- en: Getting into the details of the domain configuration is beyond the scope of
    this book; however, by the end of this chapter, we will see how to deploy application
    units in a domain using the command-line interface available in WildFly.
  prefs: []
  type: TYPE_NORMAL
- en: The WildFly 8 directory layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The difference between standalone and domain reflects in the directory layout
    of the application server is shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The WildFly 8 directory layout](img/00011.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see in the preceding diagram, the WildFly directory layout is divided
    into two main parts: the first one is pertinent to a standalone server mode and
    the other is dedicated to a domain server mode. Common to both server modes is
    the `modules` directory, which is the heart of the application server.'
  prefs: []
  type: TYPE_NORMAL
- en: WildFly is based on the `JBoss Modules` project, which provides an implementation
    of a modular (nonhierarchical) class loading and an execution environment for
    Java. In other words, rather than a single class loader that loads all JARs into
    a flat class path, each library becomes a module, which only links to the exact
    modules it depends on and nothing more. It implements a thread safe, fast, and
    highly concurrent delegating class loader model, coupled with an extensible module
    resolution system. This combines to form a unique, simple, and powerful system
    for application execution and distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table details the content of each folder present in the `root`
    folder of `JBOSS_HOME`:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Folder | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `bin` | This folder contains the startup scripts, startup configuration files,
    and various command-line utilities, such as vault, add-user, and Java diagnostic
    reports available for Unix and Windows environments |'
  prefs: []
  type: TYPE_TB
- en: '| `bin/client` | This folder contains a client Jar for use by the remote EJB
    and CLI and clients not using any build systems with automatic dependency management
    such as Maven, Ant with Ivy, or Gradle |'
  prefs: []
  type: TYPE_TB
- en: '| `bin/init.d` | New in WildFly, this folder contains scripts for Red Hat Linux
    and Debian, which registers WildFly as a Linux service |'
  prefs: []
  type: TYPE_TB
- en: '| `bin/service` | New in WildFly, this folder contains a script that allows
    to register WildFly as a Windows service |'
  prefs: []
  type: TYPE_TB
- en: '| `docs/examples` | This folder contains some sample standalone configurations
    such as a minimal standalone configuration (`standalone-minimalistic.xml`) |'
  prefs: []
  type: TYPE_TB
- en: '| `docs/schema` | This folder contains XML schema definition files |'
  prefs: []
  type: TYPE_TB
- en: '| `domain` | This folder contains the configuration files, deployment content,
    and writable areas used by the domain mode processes run from this installation
    |'
  prefs: []
  type: TYPE_TB
- en: '| `modules` | This folder contains all the modules installed on the application
    server |'
  prefs: []
  type: TYPE_TB
- en: '| `standalone` | This folder contains the configuration files, deployment content,
    and writable areas used by the single standalone servers run from this installation
    |'
  prefs: []
  type: TYPE_TB
- en: '| `appclient` | This folder contains the configuration files, deployment content,
    and writable areas used by the application client container run from this installation
    |'
  prefs: []
  type: TYPE_TB
- en: '| `welcome-content` | This folder contains the default Welcome page content
    |'
  prefs: []
  type: TYPE_TB
- en: 'Digging into the standalone mode tree, we can find folders that are pertinent
    to standalone independent processes. If you have experience with earlier server
    releases, you will find these folders quite intuitive to you:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Directory | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `configuration` | This directory contains the configuration files for the
    standalone server that runs from this installation. All configuration information
    for the running server is located here and is the single place for configuration
    modifications for the standalone server. |'
  prefs: []
  type: TYPE_TB
- en: '| `data` | This directory contains the persistent information written by the
    server to survive a restart of the server. |'
  prefs: []
  type: TYPE_TB
- en: '| `deployments` | The end user deployment content can be placed in this directory
    for automatic detection and deployment of that content into the server''s runtime.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `lib/ext` | This directory is the location for the installed library Jar
    files, referenced by the applications using the Extension-List mechanism. |'
  prefs: []
  type: TYPE_TB
- en: '| `log` | This directory contains the standalone server logfiles. |'
  prefs: []
  type: TYPE_TB
- en: '| `tmp` | This directory contains the location of the temporary files written
    by the server. |'
  prefs: []
  type: TYPE_TB
- en: The `domain` directory structure is quite similar to the standalone equivalent,
    with one important difference. As you can see from the following table, the `deployments`
    folder is not present since the domain mode does not support deploying content
    based on scanning a filesystem. We need to use the WildFly managed instruments
    (CLI and web admin console) in order to deploy applications to a domain.
  prefs: []
  type: TYPE_NORMAL
- en: '| Directory | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `configuration` | This directory contains the configuration files for the
    domain Host Controller and any servers running on this installation. All the configuration
    information for the servers managed within the domain is located here and is the
    single place for configuration information. |'
  prefs: []
  type: TYPE_TB
- en: '| `data/content` | This directory is an internal working area for the Host
    Controller, which controls this installation. This is where it internally stores
    the deployment content. This directory is not meant to be manipulated by the end
    users. It is created after the first server startup. |'
  prefs: []
  type: TYPE_TB
- en: '| `log` | This directory is the location where the Host Controller process
    writes its logs. The Process Controller, a small, lightweight process that actually
    spawns other Host Controller processes and any application server processes, also
    writes logs here. It is created after the first server startup. |'
  prefs: []
  type: TYPE_TB
- en: '| `servers` | This directory is a writable area used by each application server
    instance that runs from this installation. Each application server instance will
    have its own subdirectory, created when the server is first started. In each server''s
    subdirectory, the following subdirectories will be present:'
  prefs: []
  type: TYPE_NORMAL
- en: '`data`: This is the information written by the server that needs to survive
    a restart of the server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log`: This is the server''s logfiles'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tmp`: This is the location of the temporary files written by the server. This
    folder is created after the first server startup.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `tmp` | This directory contains the location of the temporary files written
    by the server. |'
  prefs: []
  type: TYPE_TB
- en: Managing the application server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'WildFly provides three different means to configure and manage servers: a web
    interface, a command-line client, and a set of XML configuration files. No matter
    what approach you choose, the configuration is always synchronized across the
    different views and finally persisted to the XML files. After saving the changes
    using the web interface, you will instantly see an updated XML file in your server''s
    configuration directory.'
  prefs: []
  type: TYPE_NORMAL
- en: Managing WildFly 8 with the web interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Wildfly 8 is secured out of the box and the default security mechanism is based
    on a username or password, making use of HTTP Digest. The reason for securing
    the server by default is that if the management interfaces are accidentally exposed
    on a public IP address, authentication is required to connect. For this reason,
    there is no default user in the distribution.
  prefs: []
  type: TYPE_NORMAL
- en: The users are stored in a properties file called `mgmt-users.properties` under
    standalone/configuration or domain/configuration depending on the running mode
    of the server. This file contains the username information along with a precalculated
    hash of the username, plus the name of the realm and user's password.
  prefs: []
  type: TYPE_NORMAL
- en: 'To manipulate the files and add users, the server has provided utilities such
    as `add-user.sh` and `add-user.bat` to add the users and generate hashes. So just
    execute the script and follow the guided process. This is shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Managing WildFly 8 with the web interface](img/00012.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In order to create a new user, you need to provide the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Type of user**: The type of user will be Management User, since it will manage
    the application server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Realm**: This must match the realm name used in the configuration, so unless
    you have changed the configuration to use a different realm name, leave this set
    to `ManagementRealm`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Username**: This is the username of the user you are adding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Password**: This is the user''s password.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User groups**: This is a list of comma-separated groups that should be assigned
    to the newly created user; they are used for the role-based access control and
    auditing system, which was introduced in WildFly. The information about user groups
    is stored in the `mgmt-groups.properties` file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the validation is successful, you will be asked to confirm whether you want
    to add the user; only then the `properties` files will be updated.
  prefs: []
  type: TYPE_NORMAL
- en: The final question (Is this new user going to be used to connect one AS process
    to another?) can be used to **add the slave Host Controllers** that authenticate
    against a master domain controller. This, in turn, requires adding the secret
    key to your slave host's configuration in order to authenticate with the master
    domain controller. (For more information about domain configuration, please visit
    [https://docs.jboss.org/author/display/WFLY8/Admin+Guide#AdminGuide-ManagedDomain](https://docs.jboss.org/author/display/WFLY8/Admin+Guide#AdminGuide-ManagedDomain).)
  prefs: []
  type: TYPE_NORMAL
- en: Launching the web console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have added at least one user, we can launch the web console at the
    default address, `http://<host>:9990/console` (keep in mind that you have to start
    the server first, for example, with `standalone.bat` or `standalone.sh`).
  prefs: []
  type: TYPE_NORMAL
- en: 'The login screen will be prompted. Enter data into the **User Name** and **Password**
    fields, which we had formerly created. This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Launching the web console](img/00013.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once logged in, you will be redirected to the web administration main screen.
    The web console, when running in the standalone mode, will be divided into three
    main tabs: **Configuration**, **Runtime**, and **Administration**. This is shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Launching the web console](img/00014.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The **Configuration** tab contains all the single subsystems that are part of
    a server profile. So, once you select the **Configuration** tab on the left frame,
    you can access all the subsystems and edit their configurations (in the previous
    screenshot, we saw the Data Sources subsystem).
  prefs: []
  type: TYPE_NORMAL
- en: 'The other tab named **Runtime** can be used for two main purposes: to manage
    the deployment of applications and check the server metrics. This is shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Launching the web console](img/00015.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The **Administration** tab has been introduced with WildFly and Red Hat JBoss
    EAP 6.2 and currently contains only the options associated with role based access
    control. You can now limit permissions of management users, for example, so that
    not every administrator can undeploy an application using the web console. By
    default, this feature is disabled. You have to enable it manually using the CLI
    mechanism. This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Launching the web console](img/00016.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Once you have learned how to access the web console, it is about time you try
    your first application example.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying your first application to WildFly 8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to test launch our first application, we will create a `HelloWorld`
    web project using Eclipse. The main part will be a `servlet` class, used to generate
    HTML markup. So, launch Eclipse and choose to create a new web project by navigating
    to **File** | **New** | **Dynamic Web Project**. This is shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying your first application to WildFly 8](img/00017.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Choose a name for your application and check the **Use default location** box
    if you want to create your project within the same location of your Eclipse workspace.
    If you have correctly configured a new WildFly server in Eclipse, you should see
    the **WildFly 8.0 Runtime** option selected by default, and **Target Runtime**
    and **Default Configuration** for **WildFly 8.0 Runtime** preselected in the **Configuration**
    box.
  prefs: []
  type: TYPE_NORMAL
- en: Select **3.1** as the Dynamic web module version, which makes development easy
    by using the Servlet 3.1 specifications, and also leave the **EAR membership**
    and **Add project to working sets** checkboxes unselected.
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Finish** to continue.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s add a quintessential simple servlet to our project, which merely
    dumps a **Hello World** message as an HTML page. From the **File** menu, go to
    **New** | **Servlet** and enter a meaningful name and package for your servlet,
    such as `TestServlet` as the name and `com.packtpub.wflydevelopment.chapter2`
    as the package name. This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying your first application to WildFly 8](img/00018.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The wizard will generate a basic servlet skeleton that needs to be enhanced
    with the following set of code lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The servlet will respond with a static HTML page (we defined the content type
    as Text/HTML with an UTF-8 charset) for every GET HTTP request that will be issued
    against its URL address.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice that `TextServlet` bears the `@WebServlet` annotation, which has been
    introduced by the Servlet 3.0 API, and it allows registering a servlet without
    using the `web.xml` configuration file. In our example, we used it to customize
    the servlet URL binding to employ `/test`, which would otherwise be defaulted
    by Eclipse to the class name.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will complete the application with the creation of a `JBoss` file descriptor
    named `jboss-web.xml in /WebContent/WEB-INF/` directory; although this is not
    mandatory, it can be used to redefine the context root, as shown in the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The schema definition file for `jboss-web.xml` is named `jboss-web_8_0.xsd`
    and can be located in the `JBOSS_HOME/docs/schema` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that creating `jboss-web.xml` makes the application non-portable
    to other Java EE Application Servers. The default application path when such a
    file is not defined is a concatenation of the application name and its version,
    for example, for application `TestServlet` with Version 1.0, it would be TestServlet-1.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will add the web application to the list of deployed resources by right-clicking
    on the Eclipse **Server** tab and selecting **Add and Remove**. This is shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying your first application to WildFly 8](img/00019.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, click on **Add** to add the project to the list of configured resources
    on the server as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying your first application to WildFly 8](img/00020.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If you have started WildFly from inside Eclipse, the resource will be automatically
    deployed by checking the flag to see whether the server has started, and publish
    changes immediately.
  prefs: []
  type: TYPE_NORMAL
- en: 'If, on the other hand, you have started the application server externally,
    then you can fully publish your resource by right-clicking on the application
    and selecting **Full Publish** as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying your first application to WildFly 8](img/00021.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, move to the browser and check that the application responds at the configured
    URL, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying your first application to WildFly 8](img/00022.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This example is also available in the form of a Maven (will be introduced in
    the next chapter) project in your Packt Publishing account.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced Eclipse deployment options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As it is, Eclipse has published a `HelloWorld.war` folder in `JBOSS_HOME/standalone/deployments`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You might have noticed that Eclipse has also added a marker file named `HelloWorld.war.dodeploy`.
    This step is necessary because, by default, exploded deployments in WildFly aren't
    automatically deployed. Autodeployment of the exploded content is disabled by
    default because the deployment scanner could try to deploy the copied directory
    partially, which would cause a lot of errors. The deployment of the exploded archives
    can be manually triggered with a marker file named `application.[jar/war/ear].dodeploy`.
  prefs: []
  type: TYPE_NORMAL
- en: Once the application is deployed, the application server replaces the `.dodeploy
    marker` file with `HelloWorld.war` deployed, or with a `HelloWorld.war.failed`
    file, should the deployment fail.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can change the default deployment options by double-clicking on WildFly
    8.0 (in the **Server** tab), and selecting the **Deployment** tab as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Advanced Eclipse deployment options](img/00023.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In the **Deployment** tab, you can choose to deploy your application on a custom
    deploy folder by checking the **Use a custom deploy folder** option and entering
    an appropriate value into the corresponding textbox.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that the custom deployment folder also needs to be defined in WildFly;
    check the next section for more information about it.
  prefs: []
  type: TYPE_NORMAL
- en: Also, take note of the **Deploy projects as compressed archives** option, which
    can be useful in some circumstances, for example, if you are distributing the
    application via other instruments such as the CLI, which can deploy only compressed
    archives.
  prefs: []
  type: TYPE_NORMAL
- en: Managing deployments with the web console
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Deploying the application using Eclipse is a straightforward task and is likely
    to be your option when you are developing apps. We will see here how to use the
    web console to deploy the application, which can be one more arrow in your quiver.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A typical scenario for this example could be if you are running the AS in the
    domain mode, or simply deploying your application on a remote WildFly instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start the web console and click on the **Runtime** tab. From the panel on the
    left, go to **Server** | **Manage Deployments** as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Managing deployments with the web console](img/00024.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the central panel, we can manage deployments using the **Add**, **Remove**,
    **En**/**Disable**, and **Update** buttons. Select the **Add** button to add a
    new deployment unit. In the next screen, pick up the file you want to deploy (for
    example, the `HelloWorld.war` artifact, which can be created from our test project
    in Eclipse by navigating to **File** | **Export** | **Web** | **WAR File**) from
    your local filesystem, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Managing deployments with the web console](img/00025.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Complete the wizard by verifying the deployment''s name and clicking on **Save**,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Managing deployments with the web console](img/00026.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, the deployment is listed in the Deployments table. It is, however, not
    enabled by default. Click on the **En**/**Disable** button to enable the deployment
    of the application, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Managing deployments with the web console](img/00027.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Changing the deployment scanner properties
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'As we have seen before, applications running in the standalone mode are scanned
    in the `deployments` folder by default. You can change this behavior (and also
    the deployment scanner''s properties) by clicking on the **Configuration** tab
    and navigating to **Subsystems** | **Core** | **Deployment Scanners** from the
    left menu. This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing the deployment scanner properties](img/00028.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In **Deployment Scanners**, you can set the core deployment''s attributes.
    You can click on the **Edit** button to define new values for these properties.
    Most of them are self-explanatory; however, the following table summarizes them:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Attribute | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `name` | This is the deployment scanner''s name (by default, the name `default`
    is provided). |'
  prefs: []
  type: TYPE_TB
- en: '| `path` | This is the absolute path where deployments are scanned. If the
    attribute `Path Relative to` is set, then it''s appended to the relative path
    definition. |'
  prefs: []
  type: TYPE_TB
- en: '| `Enabled` | This attribute determines whether the deployment scanner is enabled
    or not. |'
  prefs: []
  type: TYPE_TB
- en: '| `Path Relative to` | If included, this attribute must point to a system path
    that will be used to build the relative path expression. |'
  prefs: []
  type: TYPE_TB
- en: '| `Scan Interval` | This is the time frequency (in milliseconds) for which
    deployments will be scanned. |'
  prefs: []
  type: TYPE_TB
- en: '| `Auto-deploy Zipped` | Setting this to `true` will enable automatic deployments
    for zipped applications. Its default value is `true`. |'
  prefs: []
  type: TYPE_TB
- en: '| `Auto-deploy Exploded` | Setting this to `true` will enable automatic deployments
    for exploded applications. Its default value is `true`. |'
  prefs: []
  type: TYPE_TB
- en: '| `Deployment timeout` | This refers to the time-out after which a deployment
    action will be marked as `failed`. |'
  prefs: []
  type: TYPE_TB
- en: Deploying applications using the command-line interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another way to deploy an application is via the WildFly **Command-line Interface**
    (**CLI**), which can be started from `jboss-cli.bat` (or `jboss-cli.sh` for Linux
    users). Don''t be afraid of using a textual interface to manage your application
    server; as a matter of fact, the console provides built-in autocomplete features
    and you can display the available commands at any time by simply hitting the *Tab*
    key, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying applications using the command-line interface](img/00029.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you might have guessed, in order to deploy an application, you need to issue
    the `deploy` shell command. When used without arguments, the `deploy` shell command
    provides a list of applications that are currently deployed. Refer to the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If you feed a resource archive such as `.war` to shell, it will deploy it on
    the standalone server right away, as shown in the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see from the preceding command line, the CLI uses the folder where
    your deployments were actually launched at its initial location, which is `JBOSS_HOME/bin`
    by default. You can, however, use absolute paths when specifying the location
    of your archives; the CLI expansion facility (using the *Tab* key) makes this
    option fairly simple. This is demonstrated in the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'There is no error message after issuing the command; therefore, the application
    is deployed and activated so that the user can access it. If you want to just
    perform the deployment of the application and defer the activation to a later
    time, you have to add the `--disabled` switch, as shown in the following command
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to activate the application, simply issue another `deploy` shell command
    without the `--disabled` switch, as shown in the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Redeploying the application requires an additional flag for the `deploy` shell
    command. Use the `-f` argument to force the application''s redeployment, as shown
    in the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Undeploying the application can be done with the `undeploy` command, which
    takes the application that is deployed as an argument. This is shown in the following
    command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Deploying applications to a domain
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Deploying applications when running in the domain mode is slightly different
    from doing this in the standalone mode. The difference boils down to the fact
    that an application can be deployed just to one server group or to all the server
    groups. As a matter of fact, one reason why you might split your domain into different
    server groups might be that you are planning to offer different types of services
    (and hence applications) to each server group.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, in order to deploy your `HelloWorld.war` application to all server groups,
    issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'If, on the other hand, you want to undeploy an application from all server
    groups belonging to a domain, you have to issue the `undeploy` command, as shown
    in the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also deploy your application just to one server group of your domain
    by specifying one or more server groups (separated by a comma) with the `--server-groups`
    parameter, as shown in the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You can use the tab completion facility in order to complete the value for the
    list of `--server` groups elected for deployment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, suppose we wish to undeploy the application from just one server group.
    There can be two possible scenarios. If the application is available just on that
    server group, you will just need to feed the server group to the `--server-groups`
    flag, as shown in the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'On the other hand, if your application is available on other server groups
    as well, you need to provide the additional `--keep-content` flag; otherwise,
    the CLI will complain that it cannot delete an application that is referenced
    by other server groups, as shown in the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we went through a crash course on the application server,
    focusing on the available management instruments: the web interface and Command-line
    interface. We then saw how to use these tools to deploy a sample application to
    a standalone environment and domain environment.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will dive deep into Java EE 7 components, starting from
    Enterprise JavaBeans, which still plays an important role in the evolving scenario
    of Java Enterprise applications.
  prefs: []
  type: TYPE_NORMAL
