["```java\n    // valid JWT\n    ```", "```java\n    {\n    ```", "```java\n       \"token\": \"eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0QGdtYWl sLmNvbSIsImlhdCI6MTY1OTQyODk2MSwiZXhwIjoxNjU5NDY0OTYxfQ.WU_aZjmlfw--LCovx4cZ4_hcOTGiAgPnSaM0bjdv018\"\n    ```", "```java\n    }\n    ```", "```java\n ng g core/services/authenticate\n```", "```java\nexport class AuthenticateService {\n  constructor(private http: HttpClient) { }\n  // for login endpoint\n  login(data: {email: string, password: string}):\n    Observable<any> {\n    return this.http.post<any>(\n     `${environment.authURL}/authenticate`,\n      data).pipe(\n      tap((data: any) => data),\n      catchError(err => throwError(() => err))\n   )\n  }\n  // for register endpoint\n  register(data: {email: string, password: string}):\n    Observable<any> {\n    return this.http.post<any>(\n      `${environment.authURL}/register`, data).pipe(\n      tap((data: any) => data),\n      catchError(err => throwError(() => err))\n   )\n  }\n}\n```", "```java\n@Injectable()\nexport class HeaderInterceptor implements HttpInterceptor {\n  intercept(httpRequest: HttpRequest<any>, next:\n    HttpHandler): Observable<HttpEvent<any>> {\n    const Authorization = localStorage.getItem('token') ?\n      `Bearer ${localStorage.getItem('token')}` : '';\n    if(httpRequest.url.includes('api/v1'))\n    return next.handle(httpRequest.clone({ setHeaders: {\n      Authorization } }));\n    else\n    return next.handle(httpRequest);\n  }\n}\n```", "```java\n  providers: [\n    { provide: HTTP_INTERCEPTORS, useClass:\n               HeaderInterceptor, multi: true }\n  ],\n```", "```java\nng g m auth\n```", "```java\n@NgModule({\n  declarations: [\n  ],\n  imports: [\n    CommonModule,\n    MaterialModule,\n    FormsModule,\n    ReactiveFormsModule,\n    CoreModule,\n  ]\n});\n```", "```java\nng g c auth/components/auth-form\n```", "```java\nexport class AuthFormComponent {\n  @Input() error: string = \"\";\n  @Input() title: string = \"Login\"\n  @Output() submitEmitter = new EventEmitter();\n  form: FormGroup;\n  constructor(private fb: FormBuilder) {\n    this.form = this.fb.group({\n      email: [''],\n      password: ['']\n    })\n  }\n  submit() {\n    this.submitEmitter.emit(this.form.value);\n  }\n}\n```", "```java\nng g c auth/page/login auth/page/register\n```", "```java\n//TS File\nexport class LoginComponent{\n  constructor(private authService: AuthenticateService,\n    private router: Router) {\n  }\n  submit(data:{email:string, password:string}) {\n    this.authService.login(data).subscribe((data) => {\n      this.router.navigate(['/anti-heroes']);\n      localStorage.setItem('token', data.token);\n   });\n  }\n}\n// HTML File\n<app-auth-form (submitEmitter)=\"submit($event)\"></app-auth-form>\n```", "```java\n// TS File\nexport class RegisterComponent {\n  error: string = \"\";\n  constructor(private authService: AuthenticateService) {\n  }\n  submit(data: User) {\n    this.authService.register(data).subscribe((data) => {\n      this.router.navigate(['/']);\n    });\n  }\n}\n// HTML File\n<app-auth-form title=\"Register\" (submitEmitter)=\"submit($event)\"></app-auth-form>\n```", "```java\nng g m auth/auth-routing --flat\n```", "```java\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: LoginComponent\n  },\n  {\n    path: \"register\",\n    component: RegisterComponent\n  }\n];\n@NgModule({\n  declarations: [],\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AuthRoutingModule {}\n```", "```java\nconst routes: Routes = [\n  {\n    path: \"\",\n    redirectTo: \"login\",\n    pathMatch: \"full\",\n  },\n  {\n    path: \"login\",\n    loadChildren: () =>\n    import(\"./auth/auth.module\").then((m) => m.AuthModule),\n  },\n  {\n    path: \"anti-heroes\",\n    loadChildren: () =>\n      import(\"./anti-hero/anti-hero.module\").then((m) =>\n             m.AntiHeroModule),\n  }\n];\n```", "```java\nAccept:\napplication/json, text/plain, */*\nAccept-Encoding:\ngzip, deflate, br\nAccept-Language:\nen-AU,en-US;q=0.9,en;q=0.8,bs;q=0.7,fr-CA;q=0.6,fr;q=0.5,tl;q=0.4\nAuthorization:\nBearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0QGdtYWlsLmNvbSIsImlhdCI6MTY1OTY5ODM2NSwiZXhwIjoxNjU5NzM0MzY1fQ.2SDLmvQcME5Be9Xj-zTeRlc6kGfQVNCMIWUBOBS5afg\n```", "```java\nnpm install @auth0/angular-jwt --save\n```", "```java\n  isAuthenticated(): boolean {\n    const token = localStorage.getItem('token') ?? '';\n    // Check whether the token is expired and return\n    // true or false\n    return !this.jwtHelper.isTokenExpired(token);\n  }\n```", "```java\n imports: [\n    JwtModule.forRoot({})\n  ],\n```", "```java\n//login page (TS File)\nconstructor(private authService: AuthenticateService, private router: Router,) {\n    this.checkJWT();\n  }\ncheckJWT() {\n    if(this.authService.isAuthenticated()) {\n      this.router.navigate(['/anti-heroes'])\n    }\n  }\n```", "```java\nexport class AuthenticateService {\n… other functions\ndoLogout() {\n    let removeToken = localStorage.removeItem('token');\n    if (removeToken == null) {\n      this.router.navigate(['login']);\n    }\n  }\n```", "```java\n<p>\n    <mat-toolbar color=\"primary\">\n      <span>Angular CRUD</span>\n      <span class=\"example-spacer\"></span>\n      <button *ngIf=\"loggedIn\" (click)=\"submit('logout')\"\n        mat-icon-button>\n        <mat-icon>logout</mat-icon>\n      </button>\n    </mat-toolbar>\n  </p>\n```", "```java\n.example-spacer {\n    flex: 1 1 auto;\n  }\n```", "```java\nexport class NavbarComponent implements OnInit{\n  @Output() actionEmitter = new EventEmitter();\n  @Input() loggedIn = false;\n  submit(action: string) {\n    this.actionEmitter.emit(action);\n  }\n}\n```", "```java\n<app-navbar [loggedIn]=\"url != '/' && !url.includes('login')\" (actionEmitter)=\"submit($event)\"></app-navbar>\n<div class=\"container\">\n    <router-outlet></router-outlet>\n</div>\n```", "```java\nexport class AppComponent {\n  title = 'superheroes';\n  url: string = \"\";\n  constructor(private authService: AuthenticateService,\n              private router: Router){\n    this.getRoute();\n  }\n  submit(action: string) {\n    switch (action) {\n      case 'logout':\n        this.authService.doLogout();\n        break;\n      default:\n        break;\n    }\n  }\n  getRoute() {\n    this.router.events.subscribe(data => {\n    if(data instanceof NavigationEnd) {\n      this.url = data.url;\n    }\n   });\n  }\n}\n```", "```java\n        canActivate(route:ActivatedRouteSnapshot, state:RouterStateSnapshot):Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree\n        ```", "```java\n    export class AuthGuard implements CanActivate {,\n    ```", "```java\n    constructor(priavte auth: AuthService, private router: Router) {}\n    ```", "```java\n    canActivate(route: ActivatedRouteSnapshot, state:RouterStateSnapshot): Observable<boolean> |\n    ```", "```java\n    Promise<boolean> | boolean {\n    ```", "```java\n      // return true permitted in the route, else return\n    ```", "```java\n      // false\n    ```", "```java\n     }\n    ```", "```java\n    }\n    ```", "```java\n    // route-module file\n    ```", "```java\n    { path: 'hero',\n    ```", "```java\n     component: HeroComponent,\n    ```", "```java\n     canActivate: [AuthGuard]\n    ```", "```java\n    }\n    ```", "```java\n        canActivateChild(route:ActivatedRouteSnapshot, state:RouterStateSnapshot):Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree\n        ```", "```java\n    export class AuthGuard implements CanActivateChild {\n    ```", "```java\n    constructor(private auth: AuthService, private router: Router) {}\n    ```", "```java\n    canActivateChild(route: ActivatedRouteSnapshot, state:RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n    ```", "```java\n      // return true permitted in the route, else return\n    ```", "```java\n      // false\n    ```", "```java\n     }}\n    ```", "```java\n    {\n    ```", "```java\n      path: user',\n    ```", "```java\n      canActivateChild: [AuthGuard],\n    ```", "```java\n      component: UserComponent,\n    ```", "```java\n      children: [\n    ```", "```java\n       { path: ':id', component: ProfileComponent},\n    ```", "```java\n       { path: ':id/edit', component: SettingsComponent}]\n    ```", "```java\n    }\n    ```", "```java\n        canLoad(route:Route,segments:UrlSegment[]):Observable<boolean>|Promise<boolean>|boolean\n        ```", "```java\n    import { CanLoad, Route, Router } from '@angular/router';\n    ```", "```java\n    export class AuthGuard implements CanLoad {\n    ```", "```java\n    constructor(private router: Router) {}\n    ```", "```java\n    canLoad(route:Route,segments:UrlSegment[]):Observable <boolean>|Promise<boolean>|boolean {\n    ```", "```java\n     // return true or false based on a condition to load\n    ```", "```java\n     // a module or not\n    ```", "```java\n    }}\n    ```", "```java\n      {\n    ```", "```java\n        path: \"hero\",\n    ```", "```java\n        loadChildren: () =>\n    ```", "```java\n          import(\"./hero/hero.module\").then((m) =>\n    ```", "```java\n                 m.AntiHeroModule),\n    ```", "```java\n          canLoad: [AuthGuard]\n    ```", "```java\n      }\n    ```", "```java\n        canDeactivate(component: T, currentRoute: ActivatedRoute Snapshot, currentState: RouterStateSnapshot,nextState?: RouterStateSnapshot): Observable<boolean|UrlTree>|Promise<boolean|UrlTree>|boolean |UrlTree;\n        ```", "```java\n    // CanDeactivateGuard service\n    ```", "```java\n    import { Observable } from 'rxjs/Observable';\n    ```", "```java\n    import { CanDeactivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\n    ```", "```java\n    export interface CanComponentDeactivate {\n    ```", "```java\n    canDeactivate: () => Observable<boolean> | Promise<boolean> | boolean;\n    ```", "```java\n    }\n    ```", "```java\n    export class CanDeactivateGuard implements CanDeactivate<CanComponentDeactivate> {\n    ```", "```java\n      canDeactivate(component:CanComponentDeactivate,current Route:ActivatedRouteSnapshot, currentState:RouterState Snapshot, nextState?: RouterStateSnapshot): Observable <boolean> | Promise<boolean> | boolean {\n    ```", "```java\n      return component.canDeactivate();\n    ```", "```java\n    }\n    ```", "```java\n    }\n    ```", "```java\nexport class FormComponent implements OnInit, CanComponentDeactivate {\ncanDeactivate(): Observable<boolean> | Promise<boolean> | boolean {\n/* return true or false depends on a specific condition if you want to navigate away from this route or not.*/\n}\n}\n```", "```java\n    { path: ':id/edit', component: FormComponent, canDeactivate: [CanDeactivateGuard] }\n    ```", "```java\nng g g core/guards/auth\n```", "```java\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanLoad {\n  constructor(private router: Router, private auth:\n    AuthenticateService) {}\n  canLoad(route: Route, segments:UrlSegment[]):\n    Observable<boolean | UrlTree> | Promise<boolean |\n      UrlTree> | boolean | UrlTree {\n      if (!this.auth.isAuthenticated()) {\n        this. router.navigate(['login']);\n        return false;\n      }\n      return true;\n}\n}\n```", "```java\nconst routes: Routes = [\n… other routes here\n  {\n    path: \"anti-heroes\",\n    loadChildren: () =>\n      import(\"./anti-hero/anti-hero.module\").then((m) =>\n        m.AntiHeroModule),\n      canLoad: [AuthGuard]\n  }\n];\n```", "```java\nng g g core/guards/form\n```", "```java\nexport interface CanComponentDeactivate {\n  canDeactivate: () => Observable<boolean> |\n    Promise<boolean> | boolean;\n}\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormGuard implements CanDeactivate<unknown> {\n  canDeactivate(\n    component: CanComponentDeactivate,\n    currentRoute: ActivatedRouteSnapshot,\n    currentState: RouterStateSnapshot,\n    nextState?: RouterStateSnapshot): Observable<boolean |\n      UrlTree> | Promise<boolean | UrlTree> | boolean |\n      UrlTree {\n      return component.canDeactivate ?\n        component.canDeactivate() : true;\n  }\n}\n```", "```java\nexport class FormComponent implements OnInit, CanComponentDeactivate {\n   … other code implementation\n  canDeactivate(): Observable<boolean> | Promise<boolean> |\n    boolean {\n    const confirmation = window.confirm('Are you sure?');\n    return confirmation;\n  }\n   … other code implementation\n}\n```", "```java\nconst routes: Routes = [\n … other routes\n  {\n    path: \"form\",\n    children: [\n      {\n        path: \"\",\n        canDeactivate: [FormGuard],\n        component: FormComponent\n      },\n      {\n        path: \":id\",\n        canDeactivate: [FormGuard],\n        component: FormComponent\n      }\n    ]\n  },\n];\n```", "```java\nimport { createAction, props } from '@ngrx/store';\nexport enum AuthActions {\n LOGIN = '[AUTH] Login',\n SET_TOKEN = '[AUTH] Set Token',\n CREATE_USER = '[AUTH] Create User',\n AUTH_ERROR = '[AUTH] AUTH_ERROR',\n}\nexport const setToken = createAction(\n    AuthActions.SET_TOKEN,\n    props<{ token: string }>(),\n);\nexport const setError = createAction(\n    AuthActions.AUTH_ERROR,\n    props<{ error: any }>(),\n);\n```", "```java\n@Injectable()\n  loginUser$ = createEffect(() => {\n    return this.actions$.pipe(\n        ofType(AuthActions.LOGIN),\n        mergeMap(((data: {type: string, payload: User}) =>\n          this.authService.login(data.payload)\n          .pipe(\n            map(data => ({ type: AuthActions.SET_TOKEN,\n                           token: data.token })),\n            tap(() =>\n              this.router.navigate([\"anti-heroes\"])),\n            catchError(async (data) => ({ type:\n              AuthActions.AUTH_ERROR, error: data.error }))\n          ))\n        ))\n    }, {dispatch: true}\n```", "```java\n  createUser$ = createEffect(() => {\n    return this.actions$.pipe(\n        ofType(AuthActions.CREATE_USER),\n        mergeMap(((data: {type: string, payload: User}) =>\n          this.authService.register(data.payload)\n          .pipe(\n            tap(() =>  this.router.navigate([\"login\"])),\n            catchError(async (data) => ({ type:\n              AuthActions.AUTH_ERROR, error: data.error }))\n          ))\n        ))\n    }, {dispatch: true}\n  );\n```", "```java\nexport interface AuthState {\n    token: string;\n    error: any\n}\nexport const initialState: AuthState = {\n    token: \"\",\n    error: null\n}\nexport const authReducer = createReducer(\n  initialState,\n  on(setToken, (state, { token }) => { return {...state,\n     token}}),\n  on(setError, (state, { error }) => { return {...state,\n     error}}),\n  );\n```", "```java\nimport { createSelector, createFeatureSelector } from '@ngrx/store';\nimport { AppState } from 'src/app/state/app.state';\nimport { AuthState } from './auth.reducers';\nexport const selectAuthState = createFeatureSelector<AuthState>('authState')\nexport const selectError = () => createSelector(\n    selectAuthState,\n    (state: AuthState) => state.error\n)\n```", "```java\nnpm install ngrx-store-localstorage --save\n```", "```java\nimport { localStorageSync } from 'ngrx-store-localstorage';\nexport function localStorageSyncReducer(reducer: ActionReducer<any>): ActionReducer<any> {\n  return localStorageSync({keys: ['token']})(reducer);\n}\nconst metaReducers: Array<MetaReducer<any, any>> = [localStorageSyncReducer];\n@NgModule({\n  declarations: [\n   … declared components\n  ],\n  imports: [\n   … other imported modules\n    StoreModule.forFeature('authState', authReducer,\n     {metaReducers}),\n    EffectsModule.forFeature([AuthEffects]),\n  ]\n})\n```", "```java\nexport class LoginComponent{\n  error$ = this.store.select(selectError());\n  errorSub: Subscription | undefined;\n  constructor(private store: Store, private authService:\n    AuthenticateService, private router: Router,\n      private _snackBar: MatSnackBar) {\n    this.checkJWT();\n    this.getError();\n  }\n  submit(data: User) {\n    this.store.dispatch({type: AuthActions.LOGIN,\n                         payload: data})\n  }\n  ngOnDestroy(): void {\n    this.errorSub?.unsubscribe();\n  }\n  getError() {\n    this.error$.subscribe(data => {\n      if(data) {\n        this._snackBar.open(data.message, \"Error\");\n      }\n    })\n  }\n… other code implementation\n}\n```", "```java\nexport class RegisterComponent implements OnInit, OnDestroy {\n  error$ = this.store.select(selectError());\n  errorSub: Subscription | undefined;\n  constructor(private store: Store,  private _snackBar:\n              MatSnackBar) {\n    this.getError();\n  }\n  ngOnDestroy(): void {\n    this.errorSub?.unsubscribe();\n  }\n  submit(data: User) {\n    this.store.dispatch({type: AuthActions.CREATE_USER,\n                         payload: data})\n  }\n  getError() {\n    this.errorSub = this.error$.subscribe(data => {\n       if(data) {\n         this._snackBar.open(data.message, \"Error\");\n       }\n     })\n   }\n… other code implementation\n}\n```"]