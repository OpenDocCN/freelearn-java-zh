["```java\napply plugin: 'java'\napply plugin: 'application'\nsourceCompatibility = '1.8'\nmainClassName = 'monedero.ProcessingEngine'\nrepositories {\n  mavenCentral()\n}\nversion = '0.2.0'\ndependencies {\n    compile group: 'org.apache.kafka', name: 'kafka_2.12', version:                                                                                                                                              \n                                                            '2.0.0'\n    compile group: 'com.maxmind.geoip', name: 'geoip-api', version:                                         \n                                                            '1.3.1'\n    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.9.7'\n}\njar {\n  manifest {\n    attributes 'Main-Class': mainClassName\n  } from {\n    configurations.compile.collect {\n      it.isDirectory() ? it : zipTree(it)\n    }\n  }\n  exclude \"META-INF/*.SF\"\n  exclude \"META-INF/*.DSA\"\n  exclude \"META-INF/*.RSA\"\n}\n```", "```java\n$ gradle jar\n```", "```java\n...BUILD SUCCESSFUL in 8s\n2 actionable tasks: 2 executed\n```", "```java\n$ wget \"http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz\"\n```", "```java\n$ gunzip GeoLiteCity.dat.gz\n```", "```java\npackage monedero.extractors;\nimport com.maxmind.geoip.Location;\nimport com.maxmind.geoip.LookupService;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\npublic final class GeoIPService {\n  private static final String MAXMINDDB = \"/path_to_your_GeoLiteCity.dat_file\";\n  public Location getLocation(String ipAddress) {\n    try {\n      final LookupService maxmind = \n        new LookupService(MAXMINDDB, LookupService.GEOIP_MEMORY_CACHE);\n      return maxmind.getLocation(ipAddress);\n    } catch (IOException ex) {\n      Logger.getLogger(GeoIPService.class.getName()).log(Level.SEVERE, null, ex);\n    }\n    return null;\n  }\n}\n```", "```java\npackage monedero;\n\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.node.ObjectNode;\nimport com.maxmind.geoip.Location;\nimport monedero.extractors.GeoIPService;\nimport org.apache.kafka.clients.producer.KafkaProducer;\nimport java.io.IOException;\n\npublic final class Enricher implements Producer {\n  private final KafkaProducer<String, String> producer;\n  private final String validMessages;\n  private final String invalidMessages;\n  private static final ObjectMapper MAPPER = new ObjectMapper();\n  public Enricher(String servers, String validMessages, String \n    invalidMessages) {\n    this.producer = new KafkaProducer<> \n    (Producer.createConfig(servers));\n    this.validMessages = validMessages;\n    this.invalidMessages = invalidMessages;\n  }\n  @Override\n  public void process(String message) {\n    try {\n      // this method below is filled below  \n    } catch (IOException e) {\n      Producer.write(this.producer, this.invalidMessages, \"{\\\"error\\\": \\\"\"\n          + e.getClass().getSimpleName() + \": \" + e.getMessage() + \"\\\"}\");\n    }\n  }\n}\n```", "```java\n      final JsonNode root = MAPPER.readTree(message);\n      final JsonNode ipAddressNode =   \n        root.path(\"customer\").path(\"ipAddress\");\n      if (ipAddressNode.isMissingNode()) {\n        Producer.write(this.producer, this.invalidMessages,\n            \"{\\\"error\\\": \\\"customer.ipAddress is missing\\\"}\");\n      } else {\n        final String ipAddress = ipAddressNode.textValue();\n```", "```java\nfinal Location location = new GeoIPService().getLocation(ipAddress);\n```", "```java\n        ((ObjectNode) root).with(\"customer\").put(\"country\",  \n             location.countryName); \n        ((ObjectNode) root).with(\"customer\").put(\"city\", \n             location.city);\n```", "```java\n        Producer.write(this.producer, this.validMessages, \n           MAPPER.writeValueAsString(root));\n    }\n```", "```java\npackage monedero.extractors;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\npublic final class OpenExchangeService {\n  private static final String API_KEY = \"YOUR_API_KEY_VALUE_HERE\";  //1\n  private static final ObjectMapper MAPPER = new ObjectMapper();\n  public double getPrice(String currency) {\n    try {\n      final URL url = new URL(\"https://openexchangerates.org/api/latest.json?app_id=\" + API_KEY);  //2\n      final JsonNode root = MAPPER.readTree(url);\n      final JsonNode node = root.path(\"rates\").path(currency);   //3\n      return Double.parseDouble(node.toString());                //4\n    } catch (IOException ex) {\n   Logger.getLogger(OpenExchangeService.class.getName()).log(Level.SEVERE, null, ex);\n    }\n    return 0;\n  }\n}\n```", "```java\npackage monedero;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.node.ObjectNode;\nimport com.maxmind.geoip.Location;\nimport monedero.extractors.GeoIPService;\nimport monedero.extractors.OpenExchangeService; //1\nimport org.apache.kafka.clients.producer.KafkaProducer;\nimport java.io.IOException;\npublic final class Enricher implements Producer {\n  private final KafkaProducer<String, String> producer;\n  private final String validMessages;\n  private final String invalidMessages;\n  private static final ObjectMapper MAPPER = new ObjectMapper();\n  public Enricher(String servers, String validMessages, String invalidMessages) {\n    this.producer = new KafkaProducer<>(Producer.createConfig(servers));\n    this.validMessages = validMessages;\n    this.invalidMessages = invalidMessages;\n  }\n  @Override\n  public void process(String message) {\n    try {\n      final JsonNode root = MAPPER.readTree(message);\n      final JsonNode ipAddressNode = root.path(\"customer\").path(\"ipAddress\");\n      if (ipAddressNode.isMissingNode()) { //2\n        Producer.write(this.producer, this.invalidMessages,\n           \"{\\\"error\\\": \\\"customer.ipAddress is missing\\\"}\");\n      } else {\n        final String ipAddress = ipAddressNode.textValue();\n        final Location location = new GeoIPService().getLocation(ipAddress);\n        ((ObjectNode) root).with(\"customer\").put(\"country\", location.countryName);\n        ((ObjectNode) root).with(\"customer\").put(\"city\", location.city);\n        final OpenExchangeService oes = new OpenExchangeService(); //3\n        ((ObjectNode) root).with(\"currency\").put(\"rate\", oes.getPrice(\"BTC\"));//4\n        Producer.write(this.producer, this.validMessages, MAPPER.writeValueAsString(root)); //5\n      }\n    } catch (IOException e) {\n      Producer.write(this.producer, this.invalidMessages, \"{\\\"error\\\": \\\"\"\n          + e.getClass().getSimpleName() + \": \" + e.getMessage() + \"\\\"}\");\n    }\n  }\n}\n```", "```java\npackage monedero;\npublic class ProcessingEngine {\n  public static void main(String[] args){\n    String servers = args[0];\n    String groupId = args[1];\n    String sourceTopic = args[2];\n    String validTopic = args[3];\n    String invalidTopic = args[4];\n    Reader reader = new Reader(servers, groupId, sourceTopic);\n    Enricher enricher = new Enricher(servers, validTopic, invalidTopic);\n    reader.run(enricher);\n  }\n}\n```", "```java\n$ gradle jar\n```", "```java\n...\nBUILD SUCCESSFUL in 8s\n2 actionable tasks: 2 executed\n```", "```java\n$ bin/kafka-topics --create --zookeeper localhost:2181 --\nreplication-factor 1 --\npartitions 1 --topic valid-messages\n```", "```java\n$ bin/kafka-topics --create --zookeeper localhost:2181 --\nreplication-factor 1 --\npartitions 1 --topic invalid-messages\n```", "```java\n$ bin/kafka-console-producer --broker-list localhost:9092 --topic \ninput-topic\n```", "```java\n$ bin/kafka-console-consumer --bootstrap-server localhost:9092 --\nfrom-beginning -\n-topic valid-messages\n```", "```java\n$ bin/kafka-console-consumer --bootstrap-server localhost:9092 --\nfrom-beginning -\n-topic invalid-messages\n```", "```java\n$ java -jar ./build/libs/monedero-0.2.0.jar localhost:9092 foo \ninput-topic valid-\nmessages invalid-messages\n```", "```java\n{\"event\": \"CUSTOMER_CONSULTS_ETHPRICE\", \"customer\": {\"id\": \"14862768\", \"name\": \"Snowden, Edward\", \"ipAddress\": \"95.31.18.111\"}, \"currency\": {\"name\": \"ethereum\", \"price\": \"USD\"}, \"timestamp\": \"2018-09-28T09:09:09Z\"}\n{\"event\": \"CUSTOMER_CONSULTS_ETHPRICE\", \"customer\": {\"id\": \"13548310\", \"name\": \"Assange, Julian\", \"ipAddress\": \"185.86.151.11\"}, \"currency\": {\"name\": \"ethereum\", \"price\": \"USD\"}, \"timestamp\": \"2018-09-28T08:08:14Z\"}\n{\"event\": \"CUSTOMER_CONSULTS_ETHPRICE\", \"customer\": {\"id\": \"15887564\", \"name\": \"Mills, Lindsay\", \"ipAddress\": \"186.46.129.15\"}, \"currency\": {\"name\": \"ethereum\", \"price\": \"USD\"}, \"timestamp\": \"2018-09-28T19:51:35Z\"}\n```", "```java\n{\"event\": \"CUSTOMER_CONSULTS_ETHPRICE\", \"customer\": {\"id\": \"14862768\", \"name\": \"Snowden, Edward\", \"ipAddress\": \"95.31.18.111\", \"country\":\"Russian Federation\",\"city\":\"Moscow\"}, \"currency\": {\"name\": \"ethereum\", \"price\": \"USD\", \"rate\":0.0049}, \"timestamp\": \"2018-09-28T09:09:09Z\"}\n{\"event\": \"CUSTOMER_CONSULTS_ETHPRICE\", \"customer\": {\"id\": \"13548310\", \"name\": \"Assange, Julian\", \"ipAddress\": \"185.86.151.11\", \"country\":\"United Kingdom\",\"city\":\"London\"}, \"currency\": {\"name\": \"ethereum\", \"price\": \"USD\", \"rate\":0.049}, \"timestamp\": \"2018-09-28T08:08:14Z\"}\n{\"event\": \"CUSTOMER_CONSULTS_ETHPRICE\", \"customer\": {\"id\": \"15887564\", \"name\": \"Mills, Lindsay\", \"ipAddress\": \"186.46.129.15\", \"country\":\"Ecuador\",\"city\":\"Quito\"}, \"currency\": {\"name\": \"ethereum\", \"price\": \"USD\", \"rate\":0.049}, \"timestamp\": \"2018-09-28T19:51:35Z\"}\n```", "```java\npackage monedero.extractors;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\npublic class OpenWeatherService {\n  private static final String API_KEY = \"YOUR API_KEY_VALUE\"; //1\n  private static final ObjectMapper MAPPER = new ObjectMapper();\n  public double getTemperature(String lat, String lon) {\n    try {\n      final URL url = new URL(\n          \"http://api.openweathermap.org/data/2.5/weather?lat=\" + lat             + \"&lon=\"+ lon +\n          \"&units=metric&appid=\" + API_KEY); //2\n      final JsonNode root = MAPPER.readTree(url);\n      final JsonNode node = root.path(\"main\").path(\"temp\");/73\n      return Double.parseDouble(node.toString());\n    } catch (IOException ex) {\n      Logger.getLogger(OpenWeatherService.class.getName()).log(Level.SEVERE, null, ex);\n    }\n    return 0;\n  }\n}\n```"]