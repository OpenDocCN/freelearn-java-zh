- en: '14'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Styling the Frontend with MUI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter explains how to use **Material U**I (**MUI**) components in our
    frontend. We will use the `Button` component to show styled buttons. We will also
    use MUI icons and the `IconButton` component. The input fields in our modal forms
    will be replaced by `TextField` components.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the MUI `Button` component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the MUI `Icon` and `IconButton` components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the MUI `TextField` component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the end of the chapter, we will have a professional and polished user interface
    with minimal code changes in our React frontend.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Spring Boot application that we created in *Chapter 5*, *Securing Your Backend*,
    is required, together with the modification from *Chapter 12*, *Setting Up the
    Frontend for Our Spring Boot RESTful Web Service* (the unsecured backend).
  prefs: []
  type: TYPE_NORMAL
- en: We also need the React app that we used in *Chapter 13*, *Adding CRUD Functionalities*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code samples available at the following GitHub link will also be required:
    [https://github.com/PacktPublishing/Full-Stack-Development-with-Spring-Boot-3-and-React-Fourth-Edition/tree/main/Chapter14](https://github.com/PacktPublishing/Full-Stack-Development-with-Spring-Boot-3-and-React-Fourth-Edition/tree/main/Chapter14).'
  prefs: []
  type: TYPE_NORMAL
- en: Using the MUI Button component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our frontend already uses some Material UI components, such as `AppBar` and
    `Dialog`, but we are still using a lot of HTML elements without any styling. First,
    we will replace HTML button elements with the Material UI `Button` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following steps to implement the `Button` component in our **New
    car** and **Edit car** modal forms:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the MUI `Button` component into the `AddCar.tsx` and `EditCar.tsx` files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Change the buttons to use the `Button` component in the `AddCar` component.
    We are using `'``text``'` buttons, which is the default `Button` type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you want to use some other button type, such as `'``outlined``'`, you can
    change it by using the `variant` prop ([https://mui.com/material-ui/api/button/#Button-prop-variant](https://mui.com/material-ui/api/button/#Button-prop-variant)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following code shows the `AddCar` component’s `return` statements with
    the changes:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the buttons in the `EditCar` component to the `Button` component. We
    will set the **Edit** button’s `size` to `"``small``"` because the button is shown
    within the car grid. The following code shows the `EditCar` component’s `return`
    statements with the changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, the car list looks like the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19818_14_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.1: The Carlist buttons'
  prefs: []
  type: TYPE_NORMAL
- en: 'The modal form buttons should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19818_14_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.2: The form buttons'
  prefs: []
  type: TYPE_NORMAL
- en: Now, the buttons in the add and edit form have been implemented using the MUI
    `Button` component.
  prefs: []
  type: TYPE_NORMAL
- en: Using the MUI Icon and IconButton components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will use the `IconButton` component for the **EDIT** and
    **DELETE** buttons in the grid. MUI provides pre-built SVG icons that we have
    to install by using the following command in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Let’s first implement the **DELETE** button in the grid. The MUI `IconButton`
    component can be used to render icon buttons. The `@mui/icons-material` package,
    which we just installed, contains lots of icons that can be used with MUI.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find a list of icons available in the MUI documentation ([https://mui.com/material-ui/material-icons/](https://mui.com/material-ui/material-icons/)).
    There is a search functionality, and if you click any of the icons in the list,
    you can find the correct import statement for a specific icon:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19818_14_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.3: Material Icons'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need an icon for our **DELETE** button, so we will use an icon called `DeleteIcon`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `Carlist.tsx` file and add the following imports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we will render the `IconButton` component in our grid. We will modify
    the **DELETE** button in the code where we define the grid columns. Change the
    `button` element to the `IconButton` component and render the `DeleteIcon` inside
    the `IconButton` component. Set both the button and icon size to small. The icon
    buttons don’t have an accessible name, so we will use `aria-label` to define a
    string that labels our delete icon button. The `aria-label` attribute is only
    visible to assistive technologies such as screen readers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, the **DELETE** button in the grid should look like the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19818_14_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.4: The Delete icon button'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will implement the **EDIT** button using the `IconButton` component.
    Open the `EditCar.tsx` file and import the `IconButton` component and the `EditIcon`
    icon:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, render the `IconButton` and `EditIcon` in the `return` statement. The
    button and icon size are set to small, as with the delete buttons:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, you will see both buttons are rendered as icons, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19818_14_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.5: Icon buttons'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also add **tooltips** to our edit and delete icon buttons using the
    `Tooltip` component. The `Tooltip` component wraps the component to which you
    want to attach the tooltip. The following example shows how to add a tooltip to
    the edit button:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, import the `Tooltip` component by adding the following import to your
    `EditCar` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, use the `Tooltip` component to wrap the `IconButton` component. The `title`
    prop is used to define the text that is shown in the tooltip:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, if you hover your mouse over the edit button, you will see a tooltip,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19818_14_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.6: Tooltip'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will implement text fields using the MUI `TextField` component.
  prefs: []
  type: TYPE_NORMAL
- en: Using the MUI TextField component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we’ll change the text input fields in the modal forms to the
    MUI `TextField` and `Stack` components:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following import statements to the `CarDialogContent.tsx` file. `Stack`
    is a one-dimensional MUI layout component that we can use to set spaces between
    text fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, change the input elements to the `TextField` components in the add and
    edit forms. We are using the `label` prop to set the labels of the `TextField`
    components. There are three different variants (visual styles) of text input available,
    and we are using the `outlined` one, which is the default variant. The other variants
    are `standard` and `filled`. You can use the `variant` prop to change the value.
    The text fields are wrapped inside the `Stack` component to get some spacing between
    the components and to set the top margin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can read more about spacing and the units that are used at [https://mui.com/system/spacing/](https://mui.com/system/spacing/).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After the modifications, both the add and edit modal forms should look like
    the following because we are using the `CarDialogContent` component in both forms:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19818_14_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.7: Text fields'
  prefs: []
  type: TYPE_NORMAL
- en: Now, we have completed the styling of our frontend using MUI components.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we finalized our frontend using MUI, which is the React component
    library that implements Google’s Material Design. We replaced the buttons with
    the MUI `Button` and `IconButton` components. Our modal form got a new look with
    the MUI `TextField` component. After these modifications, our frontend looks more
    professional and uniform.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will focus on frontend testing.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is MUI?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you use different Material UI components?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you use MUI icons?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another good resource for learning about Material UI is the *MUI Design Resources*
    ([https://mui.com/material-ui/getting-started/design-resources/](https://mui.com/material-ui/getting-started/design-resources/).)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn more on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To join the Discord community for this book – where you can share feedback,
    ask the author questions, and learn about new releases – follow the QR code below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/FullStackSpringBootReact4e](https://packt.link/FullStackSpringBootReact4e)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code10796108009382640.png)'
  prefs: []
  type: TYPE_IMG
