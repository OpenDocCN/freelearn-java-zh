- en: '14'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '14'
- en: Styling the Frontend with MUI
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 MUI 设计前端
- en: This chapter explains how to use **Material U**I (**MUI**) components in our
    frontend. We will use the `Button` component to show styled buttons. We will also
    use MUI icons and the `IconButton` component. The input fields in our modal forms
    will be replaced by `TextField` components.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章解释了如何在我们的前端使用 **Material U**I （**MUI**）组件。我们将使用 `Button` 组件来显示样式化按钮。我们还将使用
    MUI 图标和 `IconButton` 组件。我们模态表单中的输入字段将被 `TextField` 组件替换。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Using the MUI `Button` component
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 MUI `Button` 组件
- en: Using the MUI `Icon` and `IconButton` components
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 MUI `Icon` 和 `IconButton` 组件
- en: Using the MUI `TextField` component
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 MUI `TextField` 组件
- en: At the end of the chapter, we will have a professional and polished user interface
    with minimal code changes in our React frontend.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，我们将拥有一个专业且光鲜的用户界面，React 前端中的代码更改最小。
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The Spring Boot application that we created in *Chapter 5*, *Securing Your Backend*,
    is required, together with the modification from *Chapter 12*, *Setting Up the
    Frontend for Our Spring Boot RESTful Web Service* (the unsecured backend).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在第 5 章，*保护后端*中创建的 Spring Boot 应用程序是必需的，以及第 12 章，*为我们的 Spring Boot RESTful
    Web 服务设置前端*（未加密的后端）中的修改。
- en: We also need the React app that we used in *Chapter 13*, *Adding CRUD Functionalities*.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要在第 13 章，*添加 CRUD 功能*中使用的 React 应用程序。
- en: 'The code samples available at the following GitHub link will also be required:
    [https://github.com/PacktPublishing/Full-Stack-Development-with-Spring-Boot-3-and-React-Fourth-Edition/tree/main/Chapter14](https://github.com/PacktPublishing/Full-Stack-Development-with-Spring-Boot-3-and-React-Fourth-Edition/tree/main/Chapter14).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下 GitHub 链接中可用的代码示例也将被需要：[https://github.com/PacktPublishing/Full-Stack-Development-with-Spring-Boot-3-and-React-Fourth-Edition/tree/main/Chapter14](https://github.com/PacktPublishing/Full-Stack-Development-with-Spring-Boot-3-and-React-Fourth-Edition/tree/main/Chapter14)。
- en: Using the MUI Button component
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 MUI Button 组件
- en: Our frontend already uses some Material UI components, such as `AppBar` and
    `Dialog`, but we are still using a lot of HTML elements without any styling. First,
    we will replace HTML button elements with the Material UI `Button` component.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的前端已经使用了一些 Material UI 组件，例如 `AppBar` 和 `Dialog`，但我们仍然在使用大量未加样式的 HTML 元素。首先，我们将用
    Material UI `Button` 组件替换 HTML 按钮元素。
- en: 'Execute the following steps to implement the `Button` component in our **New
    car** and **Edit car** modal forms:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以在我们的 **新汽车** 和 **编辑汽车** 模态表单中实现 `Button` 组件：
- en: 'Import the MUI `Button` component into the `AddCar.tsx` and `EditCar.tsx` files:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 MUI `Button` 组件导入到 `AddCar.tsx` 和 `EditCar.tsx` 文件中：
- en: '[PRE0]'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Change the buttons to use the `Button` component in the `AddCar` component.
    We are using `'``text``'` buttons, which is the default `Button` type.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `AddCar` 组件中的按钮更改为使用 `Button` 组件。我们正在使用 `'``text``'` 按钮，这是 `Button` 的默认类型。
- en: If you want to use some other button type, such as `'``outlined``'`, you can
    change it by using the `variant` prop ([https://mui.com/material-ui/api/button/#Button-prop-variant](https://mui.com/material-ui/api/button/#Button-prop-variant)).
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你想要使用其他按钮类型，例如 `'``outlined``'`，你可以通过使用 `variant` 属性来更改它（[https://mui.com/material-ui/api/button/#Button-prop-variant](https://mui.com/material-ui/api/button/#Button-prop-variant)）。
- en: 'The following code shows the `AddCar` component’s `return` statements with
    the changes:'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下代码显示了 `AddCar` 组件的 `return` 语句及其更改：
- en: '[PRE1]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Change the buttons in the `EditCar` component to the `Button` component. We
    will set the **Edit** button’s `size` to `"``small``"` because the button is shown
    within the car grid. The following code shows the `EditCar` component’s `return`
    statements with the changes:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `EditCar` 组件中的按钮更改为 `Button` 组件。我们将设置 **编辑** 按钮的 `size` 为 `"``small``"`，因为按钮是在汽车网格中显示的。以下代码显示了
    `EditCar` 组件的 `return` 语句及其更改：
- en: '[PRE2]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, the car list looks like the following screenshot:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，汽车列表看起来如下截图所示：
- en: '![](img/B19818_14_01.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19818_14_01.png)'
- en: 'Figure 14.1: The Carlist buttons'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.1：Carlist 按钮
- en: 'The modal form buttons should look like the following:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 模态表单按钮应如下所示：
- en: '![](img/B19818_14_02.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19818_14_02.png)'
- en: 'Figure 14.2: The form buttons'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.2：表单按钮
- en: Now, the buttons in the add and edit form have been implemented using the MUI
    `Button` component.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，添加和编辑表单中的按钮已经使用 MUI `Button` 组件实现。
- en: Using the MUI Icon and IconButton components
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 MUI 图标和 IconButton 组件
- en: 'In this section, we will use the `IconButton` component for the **EDIT** and
    **DELETE** buttons in the grid. MUI provides pre-built SVG icons that we have
    to install by using the following command in the terminal:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用`IconButton`组件在网格中的**EDIT**和**DELETE**按钮。MUI提供了预构建的SVG图标，我们必须通过在终端中使用以下命令来安装：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Let’s first implement the **DELETE** button in the grid. The MUI `IconButton`
    component can be used to render icon buttons. The `@mui/icons-material` package,
    which we just installed, contains lots of icons that can be used with MUI.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先在网格中实现**DELETE**按钮。MUI `IconButton`组件可以用来渲染图标按钮。我们刚刚安装的`@mui/icons-material`包包含许多可以与MUI一起使用的图标。
- en: 'You can find a list of icons available in the MUI documentation ([https://mui.com/material-ui/material-icons/](https://mui.com/material-ui/material-icons/)).
    There is a search functionality, and if you click any of the icons in the list,
    you can find the correct import statement for a specific icon:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在MUI文档中找到可用的图标列表（[https://mui.com/material-ui/material-icons/](https://mui.com/material-ui/material-icons/)）。有一个搜索功能，如果你点击列表中的任何图标，你可以找到特定图标的正确导入语句：
- en: '![](img/B19818_14_03.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19818_14_03.png)'
- en: 'Figure 14.3: Material Icons'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.3：Material Icons
- en: 'We need an icon for our **DELETE** button, so we will use an icon called `DeleteIcon`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个图标来为我们的**DELETE**按钮，所以我们将使用一个名为`DeleteIcon`的图标：
- en: 'Open the `Carlist.tsx` file and add the following imports:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Carlist.tsx`文件并添加以下导入：
- en: '[PRE4]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, we will render the `IconButton` component in our grid. We will modify
    the **DELETE** button in the code where we define the grid columns. Change the
    `button` element to the `IconButton` component and render the `DeleteIcon` inside
    the `IconButton` component. Set both the button and icon size to small. The icon
    buttons don’t have an accessible name, so we will use `aria-label` to define a
    string that labels our delete icon button. The `aria-label` attribute is only
    visible to assistive technologies such as screen readers:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将在我们的网格中渲染`IconButton`组件。我们将修改代码中定义网格列的**DELETE**按钮。将`button`元素改为`IconButton`组件，并在`IconButton`组件内渲染`DeleteIcon`。将按钮和图标的大小都设置为小。图标按钮没有可访问的名称，因此我们将使用`aria-label`来定义一个标签我们的删除图标按钮的字符串。`aria-label`属性仅对辅助技术（如屏幕阅读器）可见：
- en: '[PRE5]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, the **DELETE** button in the grid should look like the following screenshot:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，网格中的**DELETE**按钮应该看起来像下面的截图：
- en: '![](img/B19818_14_04.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19818_14_04.png)'
- en: 'Figure 14.4: The Delete icon button'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.4：删除图标按钮
- en: 'Next, we will implement the **EDIT** button using the `IconButton` component.
    Open the `EditCar.tsx` file and import the `IconButton` component and the `EditIcon`
    icon:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将使用`IconButton`组件实现**EDIT**按钮。打开`EditCar.tsx`文件并导入`IconButton`组件和`EditIcon`图标：
- en: '[PRE6]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Then, render the `IconButton` and `EditIcon` in the `return` statement. The
    button and icon size are set to small, as with the delete buttons:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在`return`语句中渲染`IconButton`和`EditIcon`。按钮和图标的大小设置为小，与删除按钮相同：
- en: '[PRE7]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Finally, you will see both buttons are rendered as icons, as shown in the following
    screenshot:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，你将看到两个按钮都作为图标渲染，如下面的截图所示：
- en: '![](img/B19818_14_05.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19818_14_05.png)'
- en: 'Figure 14.5: Icon buttons'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.5：图标按钮
- en: 'We can also add **tooltips** to our edit and delete icon buttons using the
    `Tooltip` component. The `Tooltip` component wraps the component to which you
    want to attach the tooltip. The following example shows how to add a tooltip to
    the edit button:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`Tooltip`组件为我们的编辑和删除图标按钮添加工具提示。`Tooltip`组件包裹你想要附加工具提示的组件。以下示例显示了如何为编辑按钮添加工具提示：
- en: 'First, import the `Tooltip` component by adding the following import to your
    `EditCar` component:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，通过在`EditCar`组件中添加以下导入来导入`Tooltip`组件：
- en: '[PRE8]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then, use the `Tooltip` component to wrap the `IconButton` component. The `title`
    prop is used to define the text that is shown in the tooltip:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，使用`Tooltip`组件包裹`IconButton`组件。`title`属性用于定义在工具提示中显示的文本：
- en: '[PRE9]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, if you hover your mouse over the edit button, you will see a tooltip,
    as shown in the following screenshot:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果你将鼠标悬停在编辑按钮上，你将看到一个工具提示，如下面的截图所示：
- en: '![](img/B19818_14_06.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19818_14_06.png)'
- en: 'Figure 14.6: Tooltip'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.6：Tooltip
- en: Next, we will implement text fields using the MUI `TextField` component.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用MUI `TextField`组件实现文本字段。
- en: Using the MUI TextField component
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MUI `TextField`组件
- en: 'In this section, we’ll change the text input fields in the modal forms to the
    MUI `TextField` and `Stack` components:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将将模态表单中的文本输入字段更改为MUI `TextField`和`Stack`组件：
- en: 'Add the following import statements to the `CarDialogContent.tsx` file. `Stack`
    is a one-dimensional MUI layout component that we can use to set spaces between
    text fields:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下导入语句添加到 `CarDialogContent.tsx` 文件中。`Stack` 是一个一维 MUI 布局组件，我们可以用它来设置文本字段之间的间距：
- en: '[PRE10]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then, change the input elements to the `TextField` components in the add and
    edit forms. We are using the `label` prop to set the labels of the `TextField`
    components. There are three different variants (visual styles) of text input available,
    and we are using the `outlined` one, which is the default variant. The other variants
    are `standard` and `filled`. You can use the `variant` prop to change the value.
    The text fields are wrapped inside the `Stack` component to get some spacing between
    the components and to set the top margin:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将添加和编辑表单中的输入元素更改为 `TextField` 组件。我们使用 `label` 属性来设置 `TextField` 组件的标签。有三种不同的文本输入变体（视觉样式）可用，我们使用的是
    `outlined` 变体，这是默认变体。其他变体是 `standard` 和 `filled`。你可以使用 `variant` 属性来更改值。文本字段被包裹在
    `Stack` 组件中，以便在组件之间获得一些间距并设置顶部边距：
- en: '[PRE11]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You can read more about spacing and the units that are used at [https://mui.com/system/spacing/](https://mui.com/system/spacing/).
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以在 [https://mui.com/system/spacing/](https://mui.com/system/spacing/) 上了解更多关于间距和所使用的单位的信息。
- en: 'After the modifications, both the add and edit modal forms should look like
    the following because we are using the `CarDialogContent` component in both forms:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改后，添加和编辑模态表单应该看起来如下，因为我们在这两个表单中都使用了 `CarDialogContent` 组件：
- en: '![](img/B19818_14_07.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图片 B19818_14_07](img/B19818_14_07.png)'
- en: 'Figure 14.7: Text fields'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.7：文本字段
- en: Now, we have completed the styling of our frontend using MUI components.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经使用 MUI 组件完成了前端样式的设计。
- en: Summary
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we finalized our frontend using MUI, which is the React component
    library that implements Google’s Material Design. We replaced the buttons with
    the MUI `Button` and `IconButton` components. Our modal form got a new look with
    the MUI `TextField` component. After these modifications, our frontend looks more
    professional and uniform.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用 MUI 最终完成了前端的设计，MUI 是一个实现谷歌 Material Design 的 React 组件库。我们用 MUI 的 `Button`
    和 `IconButton` 组件替换了按钮。我们的模态表单通过 MUI 的 `TextField` 组件获得了新的外观。经过这些修改后，我们的前端看起来更加专业和统一。
- en: In the next chapter, we will focus on frontend testing.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将专注于前端测试。
- en: Questions
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is MUI?
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: MUI 是什么？
- en: How can you use different Material UI components?
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何使用不同的 Material UI 组件？
- en: How do you use MUI icons?
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何使用 MUI 图标？
- en: Further reading
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: Another good resource for learning about Material UI is the *MUI Design Resources*
    ([https://mui.com/material-ui/getting-started/design-resources/](https://mui.com/material-ui/getting-started/design-resources/).)
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个了解 Material UI 的好资源是 *MUI 设计资源* ([https://mui.com/material-ui/getting-started/design-resources/](https://mui.com/material-ui/getting-started/design-resources/).)
- en: Learn more on Discord
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Discord 上了解更多
- en: 'To join the Discord community for this book – where you can share feedback,
    ask the author questions, and learn about new releases – follow the QR code below:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 要加入这本书的 Discord 社区——在那里你可以分享反馈、向作者提问，并了解新发布的内容——请扫描下面的二维码：
- en: '[https://packt.link/FullStackSpringBootReact4e](https://packt.link/FullStackSpringBootReact4e)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/FullStackSpringBootReact4e](https://packt.link/FullStackSpringBootReact4e)'
- en: '![](img/QR_Code10796108009382640.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![二维码](img/QR_Code10796108009382640.png)'
