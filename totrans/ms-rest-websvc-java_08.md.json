["```java\nGET /api/products?offset=50&limit=25\nGET https://<dc>.api.mailchimp.com/3.0/lists/{list_id}/members?count=100&offset=200 \n```", "```java\nGET https://api.github.com/repos/{owner}/{repo}/issues?page=2&per_page=30\nGET https://yoursubdomain.zendesk.com/api/v2/tickets.json?page=5&per_page=100 \n```", "```java\nGET /api/products?cursor=eyJpZCI6NzUsIm5hbWUiOiJQcm9kdWN0IDc1In0=&limit=25\nGET https://api.twitter.com/2/tweets?pagination_token=XYZ123&max_results=20 \n```", "```java\nGET https://www.reddit.com/r/{subreddit}/comments.json?limit=25&after=t3_abcdef\nGET https://api.linkedin.com/v2/connections?q=cursor&start=0&count=25&cursor=urn:li:person:123456789 Authorization: Bearer YOUR_ACCESS_TOKEN \n```", "```java\nHTTP/2 200 OK\nstatus: 200 OK\nX-Total-Count: 150\nX-Total-Pages: 15\nX-Current-Page: 3\nX-Page-Size: 10 \n```", "```java\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"Item 1\"\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Item 2\"\n    }\n  ],\n  \"pagination\": {\n    \"totalItems\": 150,\n    \"totalPages\": 15,\n    \"currentPage\": 3,\n    \"pageSize\": 10\n  }\n} \n```", "```java\n{\n  \"_links\": {\n    \"self\": { \"href\": \"/orders?offset=200&limit=20\" },\n    \"prev\": { \"href\": \"/orders?offset=180&limit=20\" },\n    \"next\": { \"href\": \"/orders?offset=220&limit=20\" },\n    \"first\": { \"href\": \"/orders?limit=20\" },\n    \"last\": { \"href\": \"/orders?offset=1000&limit=20\" }\n  },\n  \"totalCount\": 1020,\n  \"_embedded\": {\n    \"orders\": [\n      { ... },\n      { ... },\n      ... \n    ]\n  }\n} \n```", "```java\n    GET /customers?firstName=Peter or GET /products?category=electronics \n    ```", "```java\n    GET /customer?firstName=Peter&age=30 \n    ```", "```java\nGET /customer?minAge=35&maxAge=45 \n```", "```java\n    GET /products?price[gte]=100&price[lte]=500 \n    ```", "```java\n    GET /users?role[in]=admin,supervisor,user\n    GET /products?category[nin]=books,phones \n    ```", "```java\nGET /api/v1/products?page=2&limit=10&category=electronics&price_min=100&price_max=500&sort=price_asc \n```", "```java\n{\n  \"data\": [\n    {\n      \"id\": 101,\n      \"name\": \"Smartphone Model X\",\n      \"category\": \"electronics\",\n      \"price\": 250.00,\n      \"available\": true\n    },\n    {\n      \"id\": 102,\n      \"name\": \"Wireless Earbuds\",\n      \"category\": \"electronics\",\n      \"price\": 120.00,\n      \"available\": true\n    }\n    // Additional products...\n  ],\n  \"pagination\": {\n    \"totalItems\": 42,\n    \"totalPages\": 5,\n    \"currentPage\": 2,\n    \"pageSize\": 10\n  }\n} \n```", "```java\ncurl -X PUT -F \"file=@C:/path/of/your/file.jpeg\" http://localhost:8080/api/products/AK12345/photo\n// Single file upload Controller Method\n@PutMapping(\"/{productId}/photo\")\npublic ResponseEntity<String> uploadProductPhoto(\n@PathVariable(\"productId\") @ValidSku String productId,\n@RequestParam(\"file\") MultipartFile file) {\n\n// Implementation logic \n} \n```", "```java\ncurl -X POST -F \"file=@C:/path/of/your/file1.txt\" -F \"file=@C:/path/of/your/file2.txt\" http://localhost:8080/uploads \n```", "```java\n// Multiple files upload Controller Method\n@PostMapping(\"/uploads\")\npublic ResponseEntity<String> uploadFiles(@RequestParam(\"files\") MultipartFile[] files) {\n\n// Implementation logic \n} \n```", "```java\nprivate static final List<String> ALLOWED_CONTENT_TYPES = List.of(\"image/png\", \"image/jpeg\");\nString contentType = file.getContentType();\nif (!ALLOWED_CONTENT_TYPES.contains(contentType)) {\n    // report error using the 415 HTTP status code (Unsupported Media Type)\n} \n```", "```java\nprivate static final long MAX_FILE_SIZE = 10 * 1024 * 1024; // 10 MB\nif (file.getSize() > MAX_FILE_SIZE) { \n  throw new FileSizeLimitExceededException(\n    \"File size exceeds the allowable limit of 10 MB.\"); \n} \n```", "```java\nspring.servlet.multipart.max-file-size=10MB \nspring.servlet.multipart.max-request-size=10MB \n```", "```java\n// Extract the base name of the file, removing any path information\nString sanitizedFilename = FilenameUtils.getName(originalFilename);\n\n// Enforce character restrictions\nif (!sanitizedFilename.matches(\"^[a-zA-Z0-9._-]+$\")) {\n    throw new SecurityException(\"Invalid characters in file name.\");\n}\n\n// Limit file name length\nif (sanitizedFilename.length() > 100) {\n    throw new SecurityException(\"File name too long.\");\n}\n\n// Check allowed extensions\nList<String> allowedExtensions = Arrays.asList(\"jpg\", \"png\", \"pdf\");\nString extension = FilenameUtils.getExtension(sanitizedFilename);\nif (!allowedExtensions.contains(extension.toLowerCase())) {\n    throw new SecurityException(\"File type not allowed.\");\n}\n\n// Avoid leading dots and double extensions\nif (sanitizedFilename.startsWith(\".\") || sanitizedFilename.contains(\"..\")) {\n    throw new SecurityException(\"Invalid file name format.\");\n}\n\n// Ensure path is within the intended directory\nPath targetPath = Paths.get(\"/uploads/\")\n.resolve(sanitizedFilename)\n.normalize();\nif (!targetPath.startsWith(\"/uploads/\")) {\n    throw new SecurityException(\"Invalid file path.\");\n}\n\n// Optionally, add a unique prefix to avoid conflicts\nString uniqueFileName = UUID.randomUUID().toString() + \"_\" + sanitizedFilename; \n```", "```java\n{\n  \"id\": 123,\n  \"name\": \"John Doe\",\n  \"email\": \"johndoe@example.com\",\n  \"links\": [\n    {\n      \"rel\": \"self\",\n      \"href\": \"/users/123\",\n      \"method\": \"GET\"\n    },\n    {\n      \"rel\": \"edit\",\n      \"href\": \"/users/123\",\n      \"method\": \"PUT\"\n    },\n    {\n      \"rel\": \"delete\",\n      \"href\": \"/users/123\",\n      \"method\": \"DELETE\"\n    }\n  ]\n} \n```", "```java\n{\n  \"id\": 456,\n  \"name\": \"Jane Smith\",\n  \"email\": \"janesmith@example.com\",\n  \"links\": [\n    {\n      \"rel\": \"self\",\n      \"href\": \"/users/456\",\n      \"method\": \"GET\"\n    },\n    {\n      \"rel\": \"edit\",\n      \"href\": \"/users/456\",\n      \"method\": \"PUT\"\n    }\n  ]\n} \n```", "```java\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-hateoas</artifactId>\n</dependency> \n```", "```java\n@Configuration\npublic class ProductsApiConfiguration {\n    @Bean\n    public ProductsApi getProductsApi(ApiClient apiClient)\n    {     \n        return new ProductsApi(apiClient);\n    }\n\n    @Bean\n    public ApiClient getApiClient(RestClient restClient) {\n        return new ApiClient(restClient);\n    }\n\n    @Bean\n    public RestClient getRestClient() {\n        return RestClient.builder()\n\n       .requestFactory(customClientHttpRequestFactory())\n            .build();\n    }\n\n    private ClientHttpRequestFactory customClientHttpRequestFactory() {\n        Duration duration = Duration.ofSeconds(6);\n        ClientHttpRequestFactorySettings settings = \n            ClientHttpRequestFactorySettings.DEFAULTS\n            .withConnectTimeout(duration)\n            .withReadTimeout(duration);\n\n        return ClientHttpRequestFactories.get(settings);\n    }\n} \n```", "```java\nserver:\n  tomcat:\n    connection-timeout: 5000 \n```", "```java\n    <dependency>\n        <groupId>io.github.resilience4j</groupId>\n        <artifactId>resilience4j-spring-boot3</artifactId>\n        <version>2.2.0</version>\n    </dependency> \n    ```", "```java\n    resilience4j:\n      timelimiter:\n        instances:\n          productServiceGetById:\n            timeout-duration: 5s\n            cancel-running-future: true \n    ```", "```java\n    @Service\n    public class ProductsQueryUseCaseImpl implements ProductsQueryUseCase {\n        private final ProductsRepository productsRepository;\n        private final PhotoProductsRepository photoProductsRepository;\n        private final TimeLimiter timeLimiter;\n\n        public ProductsQueryUseCaseImpl(\n            ProductsRepository productsRepository,   \n            PhotoProductsRepository photoProductsRepository,   \n            TimeLimiterRegistry timeLimiterRegistry) {\n            this.productsRepository = productsRepository;\n            this.photoProductsRepository = photoProductsRepository;\n            this.timeLimiter = timeLimiterRegistry.timeLimiter(\n                \"productServiceGetById\");\n        }\n        @Override\n        public CompletableFuture<\n            Product> getProductByIdAsync(String productId) {\n                return timeLimiter.executeCompletionStage(\n                    Executors.newSingleThreadScheduledExecutor(), \n                    () -> CompletableFuture.supplyAsync(() ->     \n                        getProductById(productId)))\n                        .toCompletableFuture();\n        } \n    ```", "```java\n    @RestController\n    @RequestMapping(\"/api/products\")\n    @Validated\n    public class ProductsApiController implements ProductsApi {\n        @GetMapping(value = \"/{productId}\")\n        @Override\n        public ResponseEntity<ProductOutput> getProductById(\n            @PathVariable(\"productId\") @ValidSku String productId) {\n            try {\n                final var product = productsQueryUseCase\n                    .getProductByIdAsync(productId).get();\n                return ResponseEntity.status(HttpStatus.OK)\n                    .body(productMapper.toProductOutput(product));\n            } catch (ExecutionException ex) {\n                if (ex.getCause() instanceof TimeoutException) {\n                    throw new ResponseStatusException(\n                        HttpStatus.REQUEST_TIMEOUT, \n                        \"Timeout to access the product id: \n                         [%s]\".formatted(productId), ex);\n                }\n                throw new UnexpectedServerError(\n                    \"Error to access the product.\", ex);\n            } catch (Exception ex) {\n                throw new UnexpectedServerError(\n                    \"Error to access the product.\", ex);\n            }\n        }\n    } \n    ```", "```java\ncurl https://api.service.com/v1/orders \\\n  -u Ao24N7La2PDTkdtegf553lJI: \\\n  -H \"Idempotency-Key: AF1GvyNVeriLWuDU\" \\\n  -d description=\"My Order Test\" \n```", "```java\nCircuitBreakerRegistry circuitBreakerRegistry = CircuitBreakerRegistry.ofDefaults();\n\n// Configure the CircuitBreaker\nCircuitBreakerConfig circuitBreakerConfig = CircuitBreakerConfig.ofDefaults()\n        .failureRateThreshold(50) // 50% failure rate\n        .waitDurationInOpenState(Duration.ofSeconds(10))\n        .slowCallDurationThreshold(Duration.ofSeconds(5));\n\n// Create a CircuitBreaker instance\nCircuitBreaker circuitBreaker = circuitBreakerRegistry.circuitBreaker(\n    \"circuitService\", circuitBreakerConfig);\n\n// Use the CircuitBreaker to protect a downstream service call\ntry {\n    circuitBreaker.decorateSupplier(() -> downstreamService.call()).get();\n} catch (CircuitBreakerOpenException e) {\n    // Fallback or other suitable action\n} \n```"]