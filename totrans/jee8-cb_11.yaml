- en: Rising to the Cloud – Java EE, Containers, and Cloud Computing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter covers the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Building Java EE containers using Docker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Oracle Cloud for container orchestration in the cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Jelastic for container orchestration in the cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using OpenShift for container orchestration in the cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using AWS for container orchestration in the cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are two things that have happened in the computer industry that have changed
    it for good—**cloud computing** and **containers**. Cloud computing came first
    and changed the way to look at infrastructure, the way to consume software, and
    the way to grow many businesses. Now, computation is a commodity.
  prefs: []
  type: TYPE_NORMAL
- en: Containers change and are changing the way we build and deliver software. They
    are also the essential glue for DevOps and the way to take CI/CD to another level.
  prefs: []
  type: TYPE_NORMAL
- en: Put them together and you will have one of the most powerful environments in
    IT. But can Java EE take advantage of it? Of course! If an application server
    is an abstraction of Java EE applications, containers are an abstraction of the
    server, and once you have them built in a standard such as Docker, you have the
    power to use such tools to manage an application server.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will show you how to put your Java EE application inside a container
    and how to deliver this container with some of the best providers we have today.
  prefs: []
  type: TYPE_NORMAL
- en: Building Java EE containers using Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since day one, Java EE has been based on containers. If you doubt it, just
    have a look at this diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/75c65e0a-4eb7-41b4-bc1d-11ee5da34b4e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Java EE architecture: https://docs.oracle.com/javaee/6/tutorial/doc/bnacj.html'
  prefs: []
  type: TYPE_NORMAL
- en: It belongs to Oracle's official documentation for Java EE 6 and, actually, has
    been much the same architecture since the times of Sun.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you pay attention, you will notice that there are different containers:
    a web container, an EJB container, and an application client container. In this
    architecture, it means that the applications developed with those APIs will rely
    on many features and services provided by the container.'
  prefs: []
  type: TYPE_NORMAL
- en: When we take the Java EE application server and put it inside a Docker container,
    we are doing the same thing— it is relying on some of the features and services
    provided by the Docker environment.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will show you how to deliver a Java EE application in a container
    bundle, which is called an **appliance**.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, of course, you need the Docker platform installed in your environment.
    There are plenty of options, so I suggest you go the following link and get more
    details:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.docker.com/install/](https://docs.docker.com/install/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'And if you are not familiar with Docker commands, I recommend you have a look
    at this beautiful cheat sheet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://zeroturnaround.com/rebellabs/docker-commands-and-best-practices-cheat-sheet/](https://zeroturnaround.com/rebellabs/docker-commands-and-best-practices-cheat-sheet/)'
  prefs: []
  type: TYPE_NORMAL
- en: You'll also need to create an account at Docker Hub so you can store your own
    images. Check it out: [https://hub.docker.com/](https://hub.docker.com/).
  prefs: []
  type: TYPE_NORMAL
- en: It's free for public images.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To build your Java EE container, you''ll first need a Docker image. To build
    it, you''ll need a Dockerfile such as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This image will be our base image from which we will construct other images
    in this chapter. Now we need to build it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Go ahead and push it to your Docker Registry at Docker Hub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can create another image by customizing the previous one, and then
    put your app on it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the same folder, we have a Java EE application file (`app.war`) that will
    be deployed inside the container. Check the *See also* section to download all
    the files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you save your Dockerfile, you can build your image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can create the container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Wait a few seconds and open this URL in your browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost/app`'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s understand our first Dockerfile:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This `FROM` keyword will ask Docker to pull the `openjdk:8-jdk` image, but what
    does it mean?
  prefs: []
  type: TYPE_NORMAL
- en: It means that there's a registry somewhere where your Docker will find prebuilt
    images. If there's no image registry in your local environment, it will search
    for it in Docker Hub, the official and public Docker registry in the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: 'And when you say that you are using a pre-built image, it means that you don''t
    need to build, in our case, the whole Linux container from scratch. There''s already
    a template that you can rely on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Here are just some environment variables to help with the coding.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The `RUN` clause in Dockerfiles execute some bash commands inside the container
    when it has been created. Basically, what is happening here is that GlassFish
    is being downloaded and then prepared in the container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'For safety, we define the user that will hold the permissions for GlassFish
    files and processes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we are including a bash script inside the container to perform some GlassFish
    administrative tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'After copying the bash file into the container, we go to the final block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The `USER` clause defines the user that will be used from this point in the
    file. It's great because from there, all the tasks will be done by the `glassfish`
    user.
  prefs: []
  type: TYPE_NORMAL
- en: The `ENTRYPOINT` clause will execute the `docker-entrypoint.sh` script.
  prefs: []
  type: TYPE_NORMAL
- en: The `EXPOSE` clause will define the ports that will be available for containers
    that use this image.
  prefs: []
  type: TYPE_NORMAL
- en: And finally, the `CMD` clause will call the GlassFish script that will initialize
    the container.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s understand our second Dockerfile:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: We need to take into account the same considerations about the prebuilt image,
    but now the image was made by you. Congratulations!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we are building an environment variable to help with the deployment.
    It''s done in the same way as for Linux systems:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This `COPY` command will literally copy the `app.war` file to the folder defined
    in the `DEPLOYMENT_DIR` environment variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'From here, you are ready to build an image and create a container. The image
    builder is self-explanatory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s check the `docker run` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'If we break it down, this is what the various elements of the command mean:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-h`: Defines the host name of the container.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-p`: Defines which ports will be exposed and how it will be done. It is useful,
    for example, when more than one container is using the same port by default—you
    just use them differently.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`eldermoraes/gf-javaee-cookbook`: The reference to the image you just built.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The source code and files used in this recipe are at [https://github.com/eldermoraes/javaee8-cookbook/tree/master/chapter11/ch11-docker](https://github.com/eldermoraes/javaee8-cookbook/tree/master/chapter11/ch11-docker).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Oracle Cloud for container orchestration in the cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The best way to use containers in the cloud is by using a provider. Why? Because
    they can provide a good infrastructure and a nice service for a small price.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will show you how to get the container created in the first recipe
    of this chapter and deliver it using Oracle Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you don't have an account with Oracle Cloud you can register for a trial
    at [https://cloud.oracle.com/tryit](https://cloud.oracle.com/tryit).
  prefs: []
  type: TYPE_NORMAL
- en: That's all you need, beyond having created the Docker image in the first recipe
    of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After logging in to the platform, you will see this dashboard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/228152d8-3c64-49e3-bd88-b285baf6ba95.png)'
  prefs: []
  type: TYPE_IMG
- en: Oracle Cloud dashboard
  prefs: []
  type: TYPE_NORMAL
- en: 'Scroll down the page until you find Oracle Cloud Infrastructure - Container
    Service and click on it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/26384752-6510-48e9-8ff2-50f7f6b70e48.png)'
  prefs: []
  type: TYPE_IMG
- en: Container Service Access
  prefs: []
  type: TYPE_NORMAL
- en: 'On the main page of the container service (the following screenshot), click
    on the My Services URL link :'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d9d2699b-d36d-4e40-a883-76486a5a0c8b.png)'
  prefs: []
  type: TYPE_IMG
- en: Container Service Overview page
  prefs: []
  type: TYPE_NORMAL
- en: 'You will get to the Cloud Services dashboard. Click on Container Classic:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/50b2ad95-7047-40dc-a49e-7b08a90697f2.png)'
  prefs: []
  type: TYPE_IMG
- en: Cloud Services Dashboard
  prefs: []
  type: TYPE_NORMAL
- en: 'On the page that opens, click on the Open Service Console button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d25654b5-071d-48f3-aa1c-7eeaa701d5bd.png)'
  prefs: []
  type: TYPE_IMG
- en: Service Console Access
  prefs: []
  type: TYPE_NORMAL
- en: 'On the next page, click on the Create Instance button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/609a7b22-6314-4cb4-aabd-326166f7d7df.png)'
  prefs: []
  type: TYPE_IMG
- en: Container Cloud Service welcome page
  prefs: []
  type: TYPE_NORMAL
- en: 'Fill in the form like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/08f56395-ef9a-4fd3-be12-fcb4f4a4f260.png)'
  prefs: []
  type: TYPE_IMG
- en: Fields for instance creation
  prefs: []
  type: TYPE_NORMAL
- en: In the SSH Public Key field, you need to set a valid public key that has a private
    pair. Without it, you will not be able to log in to the service using SSH.
  prefs: []
  type: TYPE_NORMAL
- en: Click on Next.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the page that opens, confirm your data and click on the Create button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/860cffaa-fb25-4296-8f2f-c69f34232d10.png)'
  prefs: []
  type: TYPE_IMG
- en: Data confirmation
  prefs: []
  type: TYPE_NORMAL
- en: 'Then you''ll be back to the main page while the service is created (note the
    Creating service... label):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/05411a89-de1f-4987-8c07-8dfe0afc7d49.png)'
  prefs: []
  type: TYPE_IMG
- en: New service being created
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the service is created, click on the Options button and click on Container
    Console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e6a18614-6ee0-474a-8c96-6e8e30d8b4b8.png)'
  prefs: []
  type: TYPE_IMG
- en: Access to the Container Console
  prefs: []
  type: TYPE_NORMAL
- en: 'You are now in the dashboard of the service you have just created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ebfacede-59e1-41c8-8e38-f4928769c045.png)'
  prefs: []
  type: TYPE_IMG
- en: Container Cloud Service dashboard
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on Services (left side) and then New Service (right side):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8f0ddbd0-a930-481a-a07f-0da0b5ba6874.png)'
  prefs: []
  type: TYPE_IMG
- en: Services page
  prefs: []
  type: TYPE_NORMAL
- en: 'In the popup, give a name to the service (the Service Name field), and in the
    Image field you need to fill in the details of the pre-built image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fe89d645-a961-42ba-8e42-2a5088fdd054.png)'
  prefs: []
  type: TYPE_IMG
- en: Fields for service creation
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Available Options field, check the Ports option. It will open the Ports section
    under Environment Variables. Click on the Add button and fill in the form in the
    popup like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f6442c72-125f-4f55-83cf-12cb96c5b245.png)'
  prefs: []
  type: TYPE_IMG
- en: Ports forwarding
  prefs: []
  type: TYPE_NORMAL
- en: 'Now your service is on this list. Click on its Deploy button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b2189347-228b-4018-bdc3-e51269ed20a9.png)'
  prefs: []
  type: TYPE_IMG
- en: Services list
  prefs: []
  type: TYPE_NORMAL
- en: 'In the popup, fill in the form as shown in the screenshot and click on Deploy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/92dd3df2-c791-43cc-8f19-682ceff638fd.png)'
  prefs: []
  type: TYPE_IMG
- en: Popup for service deployment
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, just wait a moment until your new service is up and running:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5a3482c6-fab8-4f1d-904b-c9ee0366bdbb.png)'
  prefs: []
  type: TYPE_IMG
- en: Ongoing deployment
  prefs: []
  type: TYPE_NORMAL
- en: 'Once your deployment is done, it will become green and you will have information
    about the container you have created. Click on the link under the Container Name label:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fbc4027a-d269-465f-b649-6dba6960e4c6.png)'
  prefs: []
  type: TYPE_IMG
- en: Deployment done
  prefs: []
  type: TYPE_NORMAL
- en: 'You now will see details about your container:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/88aac31b-804a-4cb1-8725-f896914f0dc6.png)'
  prefs: []
  type: TYPE_IMG
- en: Container details
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the tab labeled Environment Variables and find a variable called OCCS_HOSTIPS.
    On the same line there''s an IP in the public_ip label. Copy it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6d86c4fb-3195-4e2e-8d88-346b5959e34e.png)'
  prefs: []
  type: TYPE_IMG
- en: Environment variable for the container
  prefs: []
  type: TYPE_NORMAL
- en: 'Use it to navigate to `http://[public_ip]:8080/app`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7fe72716-013a-47a3-a359-57f7f383b900.png)'
  prefs: []
  type: TYPE_IMG
- en: Test page for our application
  prefs: []
  type: TYPE_NORMAL
- en: If you can see the preceding image, you've made it! Now your container is orchestrated
    in the cloud using Oracle Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The reason why it's so simple is that you are using a platform that was designed
    to make it simple. So, all the heavy lifting that you'd have to do in your own
    infrastructure is done by the platform.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The reason why you should use a provider to orchestrate your containers in the
    cloud is not only because of the ease of creating services, but also because the
    platform will take care of keeping it up and running.
  prefs: []
  type: TYPE_NORMAL
- en: So, if your container goes wrong and needs to be stopped, restarted, or even
    killed and recreated, the platform will do it automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Using Jelastic for container orchestration in the cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The best way to use containers in the cloud is by using a provider. Why? Because
    they can provide you a good infrastructure and a nice service for a small price.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will show you how to get the container created in the first recipe
    of this chapter and deliver it using Jelastic.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you don't have an account with Jelastic, you can sign for a free trial at [https://jelastic.com/](https://jelastic.com/).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After logging into the platform you will get to this main page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/302510b6-df5d-4034-917d-55c810647e0c.png)'
  prefs: []
  type: TYPE_IMG
- en: Jelastic main page
  prefs: []
  type: TYPE_NORMAL
- en: 'First things first. Click on the Settings button (top right). It will open
    the Account settings section (bottom left):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b2e5d3cb-bcf3-45cc-a0f7-b01932b7eb50.png)'
  prefs: []
  type: TYPE_IMG
- en: Account settings
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on Public inside SSH Keychain and upload your public SSH key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/96734ee4-184b-4774-87c1-9089f8bf755d.png)'
  prefs: []
  type: TYPE_IMG
- en: SSH Public Key information
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure your SSH key is really uploaded, otherwise you will not be able to
    log into the platform using SSH:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f2d365f9-7b15-4c9e-a08f-c6b2f8150734.png)'
  prefs: []
  type: TYPE_IMG
- en: SSH confirmation
  prefs: []
  type: TYPE_NORMAL
- en: 'At the top of the page, click on the Marketplace button. Go on to the Other section
    and select Docker Engine CE. Click on Install:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8532dacd-b294-40c7-be3e-3b8727ddcb33.png)'
  prefs: []
  type: TYPE_IMG
- en: Marketplace popup
  prefs: []
  type: TYPE_NORMAL
- en: 'Give this environment a name and click on Install:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7c17ebbd-b819-466f-95be-9dcf37e54b41.png)'
  prefs: []
  type: TYPE_IMG
- en: Docker Engine CE configuration popup
  prefs: []
  type: TYPE_NORMAL
- en: 'Wait until it''s done:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/930cb813-5858-4933-9158-20b8f4d7cf72.png)'
  prefs: []
  type: TYPE_IMG
- en: Installation status
  prefs: []
  type: TYPE_NORMAL
- en: 'Once it''s finished, it will show a popup with the command you''ll have to
    use to log in to the platform. Copy it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c3c3a2fc-a519-4bac-b504-6f20b74e8ba8.png)'
  prefs: []
  type: TYPE_IMG
- en: Install confirmation and commands for connection
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a Terminal in your machine and paste the copied command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/904c954f-30f9-4fbd-bf89-29988a6952ab.png)'
  prefs: []
  type: TYPE_IMG
- en: Command execution on terminal
  prefs: []
  type: TYPE_NORMAL
- en: 'At the end of the output of the console window, there is the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5cb3c8b4-7b21-482f-b1e6-64f60ee04164.png)'
  prefs: []
  type: TYPE_IMG
- en: Environment variables output
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you can just run your command to create a container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Check the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d82697bb-a569-4106-b5cf-eb8ff8c27d60.png)'
  prefs: []
  type: TYPE_IMG
- en: Container log output
  prefs: []
  type: TYPE_NORMAL
- en: It's quite the same as if you were running in your own local machine, but you
    are actually running on the Jelastic platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if you go back to the main page you will see your environment up and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6433d7a0-1811-4c8f-8721-a176661bef14.png)'
  prefs: []
  type: TYPE_IMG
- en: Main page with the node created
  prefs: []
  type: TYPE_NORMAL
- en: 'Under the Docker Engine CE label there''s the URL of your environment. Just
    click on it and add `/app` to the end:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/58dacf77-831b-4f47-828c-5bd9fafad82d.png)'
  prefs: []
  type: TYPE_IMG
- en: Test page for our application
  prefs: []
  type: TYPE_NORMAL
- en: If you can see this page, congratulations! Your application is deployed on Jelastic.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The reason why it's so simple is because you are using a platform that's designed
    to make it simple. So all the heavy lifting that you'd need to do it in your own
    infrastructure is done by the platform.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The reason why you should use a provider to orchestrate your containers in the
    cloud is not only regarding the ease of creating services, but also because the
    platform will take care of keeping it up and running.
  prefs: []
  type: TYPE_NORMAL
- en: So if your container goes wrong and needs to be stopped, restarted, or even
    killed and recreated, the platform will do it automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Using OpenShift for container orchestration in the cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The best way to use containers in the cloud is by using a provider. Why? Because
    they can provide you a good infrastructure and a nice service for a small price.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will show you how to get the container created in the first recipe
    of this chapter and deliver it using OpenShift.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you don't have an account with OpenShift you can sign up for a free trial.
    Visit [https://www.openshift.com/](https://www.openshift.com/) and click on Sign
    up for free.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After logging in to the platform, you will see this main page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/368f4560-4ed3-4fe7-b6a6-f7b8432b22d0.png)'
  prefs: []
  type: TYPE_IMG
- en: Openshift main page
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the Create Project button and fill in the blanks. Click on Create:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4c2f74c8-5f75-42f0-b1ac-29ccaac48b67.png)'
  prefs: []
  type: TYPE_IMG
- en: Filling fields for a new project
  prefs: []
  type: TYPE_NORMAL
- en: 'Once your project is created, click on it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4142630c-5181-428a-8f9d-517b4d6bf178.png)'
  prefs: []
  type: TYPE_IMG
- en: Access for the new project
  prefs: []
  type: TYPE_NORMAL
- en: 'On the opened page, click on Add to Project (top right) and then Deploy Image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2140a434-7132-44d2-9da2-871ef7b62813.png)'
  prefs: []
  type: TYPE_IMG
- en: Project main page
  prefs: []
  type: TYPE_NORMAL
- en: In the popup select Image Name, fill in the form with our pre-built image (`eldermoraes/gf-javaee-cookbook`)
    and click on the Search icon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see a warning like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ec6e5dff-d3c0-4fc3-88c3-432f50898987.png)'
  prefs: []
  type: TYPE_IMG
- en: Image deployment popup
  prefs: []
  type: TYPE_NORMAL
- en: 'Let me save you time: don''t deploy it, because it will not work. The OpenShift
    platform demands that your container should run with a user other than `root`.
    So we need to build another image for it.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fortunately, it''s quite simple. The new Dockerfile is like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Then you build a new image based on this Dockerfile:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Then push this new image to the Docker Hub:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you are good to go:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2e516ce2-1405-459e-bade-2b27d422cae3.png)'
  prefs: []
  type: TYPE_IMG
- en: Image deployment popup
  prefs: []
  type: TYPE_NORMAL
- en: 'There are no warnings, so go ahead and click on Deploy. In the page that opens,
    click on the Continue to the project overview label:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8dd76dcc-1f3c-47fb-8cf3-6e44ceeba661.png)'
  prefs: []
  type: TYPE_IMG
- en: Image deployment confirmation
  prefs: []
  type: TYPE_NORMAL
- en: 'Watch the following page until the pod icon is blue. When it''s ready, click
    on the Create Route link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/aefa00fb-d707-4b2c-a730-3eaa1b90ec06.png)'
  prefs: []
  type: TYPE_IMG
- en: Monitoring the pod creation
  prefs: []
  type: TYPE_NORMAL
- en: 'In the popup, fill in the Path field with `/app` and in Target Port choose
    8080 -> 8080 (TCP):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c58cfe33-1742-4d7c-9239-b353aa184fc3.png)'
  prefs: []
  type: TYPE_IMG
- en: Route creation
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on Create and wait:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fac6f7e9-5167-409f-9b8a-0120be124fdf.png)'
  prefs: []
  type: TYPE_IMG
- en: Route confirmation
  prefs: []
  type: TYPE_NORMAL
- en: 'Once it''s done, click on the Overview menu (top left). In the same row as
    the application name, there''s a URL pointing to your container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/50660b6c-4fe6-40c0-a768-1fc917f04081.png)'
  prefs: []
  type: TYPE_IMG
- en: Test page for our application
  prefs: []
  type: TYPE_NORMAL
- en: If you can see the page, congratulations! Your application is now orchestrated
    at OpenShift.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The reason why it's so simple is because you are using a platform that's designed
    to make it simple. So all the heavy lifting that you'd need to do it in your own
    infrastructure is done by the platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'The change we''ve made to make the application run in the OpenShift is quite
    simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: First, we use the `root` user to change the permissions of `app.war`. Then the
    main point is to specify to use the `glassfish` user. This feature tells Docker
    that the internal process will be owned by the `glassfish` user, and not by `root`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The reason why you should use a provider to orchestrate your containers in the
    cloud is not only based on the ease of creating services, but also because the
    platform will take care of keeping it up and running.
  prefs: []
  type: TYPE_NORMAL
- en: So, if your container goes wrong and needs to be stopped, restarted, or even
    killed and recreated, the platform will do it automatically.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: See the full source code for this recipe at [https://github.com/eldermoraes/javaee8-cookbook/tree/master/chapter11/ch11-openshift](https://github.com/eldermoraes/javaee8-cookbook/tree/master/chapter11/ch11-openshift).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using AWS for container orchestration in the cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The best way to use containers in the cloud is by using a provider. Why? Because
    they can provide you with a good infrastructure and a nice service for a small
    price.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will show you how to get the container created in the first recipe
    of this chapter and deliver it using **Amazon Web Services** (**AWS**).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you don't have an account with AWS, register for a free trial at [https://aws.amazon.com/free/start-your-free-trial/](https://aws.amazon.com/free/start-your-free-trial/).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you log in to the platform, you will get to this main page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8a63ab0d-c44e-4501-be7e-008aba035300.png)'
  prefs: []
  type: TYPE_IMG
- en: AWS main page
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the Services menu (top left) and then Elastic Container Service (under
    the Compute menu):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5c3ff577-292c-4f81-adb0-54d9ee09ce19.png)'
  prefs: []
  type: TYPE_IMG
- en: Services list
  prefs: []
  type: TYPE_NORMAL
- en: 'On the page that opens, click on Get started:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3e1b8287-9eb3-4357-8646-8985b0231315.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting started page for ECS
  prefs: []
  type: TYPE_NORMAL
- en: 'Check only the Deploy a sample application onto an Amazon ECS Cluster option.
    Then click on Continue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/78975c46-cf2e-4a65-b319-5de753fd9ecc.png)'
  prefs: []
  type: TYPE_IMG
- en: First page for ECS creation
  prefs: []
  type: TYPE_NORMAL
- en: 'Fill in the blanks as follows, paying special attention to the Image field,
    where you will use our prebuilt image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/310023da-bd63-4c06-b353-d40afdc23e77.png)'
  prefs: []
  type: TYPE_IMG
- en: Task definition page
  prefs: []
  type: TYPE_NORMAL
- en: 'Scroll down the page and set Port mappings as shown here. Click on Continue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/406548fd-4414-4957-81cd-63009a81ce0e.png)'
  prefs: []
  type: TYPE_IMG
- en: Port mappings
  prefs: []
  type: TYPE_NORMAL
- en: 'Give the service a name and set the Desired number of tasks to `1`. Click on
    Next step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/10f8d9c5-61fb-4b46-91d8-c0a5f1363778.png)'
  prefs: []
  type: TYPE_IMG
- en: Service and network configuration
  prefs: []
  type: TYPE_NORMAL
- en: 'Configure the cluster as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1034a353-326b-4f3e-b9d3-f7bbfa20e541.png)'
  prefs: []
  type: TYPE_IMG
- en: Cluster configuration
  prefs: []
  type: TYPE_NORMAL
- en: 'Scroll down to the page and click on Launch instance & run service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ceb6e961-ebea-435a-be91-d2acf6dcba09.png)'
  prefs: []
  type: TYPE_IMG
- en: Launch instance
  prefs: []
  type: TYPE_NORMAL
- en: 'You can follow the status of the process on the following page. When it''s
    done, click on the View service button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/151d54ff-dfb2-4dd7-9e33-59fb2a516386.png)'
  prefs: []
  type: TYPE_IMG
- en: Launch status
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll see the details of your service on the following page. Click on the
    default > label:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/70f03884-2907-498c-af5c-967e15650dcd.png)'
  prefs: []
  type: TYPE_IMG
- en: Cluster information
  prefs: []
  type: TYPE_NORMAL
- en: 'On the page that opens, you can see more details about the cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6794bfaa-b88e-4a72-8ac1-43c28fbfe6d7.png)'
  prefs: []
  type: TYPE_IMG
- en: Cluster details
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the Tasks tab to see information about the tasks and the containers
    created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/38147487-2d04-422c-9e83-7ff5f1fac0a9.png)'
  prefs: []
  type: TYPE_IMG
- en: Container tasks
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the Container Instance label to see details about the container that
    has been created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5113f052-7a95-4e09-8681-076568961eb9.png)'
  prefs: []
  type: TYPE_IMG
- en: Container details
  prefs: []
  type: TYPE_NORMAL
- en: 'Check the Public IP label and copy the IP. It''s automatically mapped to the
    `8080` port. Use `http://[public-ip]/app` to try it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c4448c68-7c4d-4765-ab6d-2781088ebaa2.png)'
  prefs: []
  type: TYPE_IMG
- en: Test page for our application
  prefs: []
  type: TYPE_NORMAL
- en: If you can see the same screenshot, that's great! You are now orchestrating
    your container in AWS.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The reason why it's so simple is because you are using a platform that's designed
    to make it simple. So, all the heavy lifting that you'd make to do it in your
    own infrastructure is done by the platform.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The reason why you should use a provider to orchestrate your containers in the
    cloud is not only because of the ease of creating services, but also because the
    platform will take care of keeping it up and running.
  prefs: []
  type: TYPE_NORMAL
- en: So if your container goes wrong and needs to be stopped, restarted, or even
    killed and recreated, the platform will do it automatically.
  prefs: []
  type: TYPE_NORMAL
