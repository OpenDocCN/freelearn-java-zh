["```java\n<display-name>jersey-sse-twitter-sample</display-name>\n\n<servlet>\n  <servlet-name>Jersey application</servlet-name>\n  <servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>\n  <init-param>\n    <param-name>javax.ws.rs.Application</param-name>\n    <param-value>org.glassfish.jersey.sample.sse.MyApplication</param-value>\n  </init-param>\n  <load-on-startup>1</load-on-startup>\n  <async-supported>true</async-supported>\n</servlet>\n<servlet-mapping>\n  <servlet-name>Jersey application</servlet-name>\n  <url-pattern>/*</url-pattern>\n</servlet-mapping>\n```", "```java\npublic class MyApplication extends Application {\n\n  Set<Class<?>> classes = new HashSet<Class<?>>() {\n    { add(ServerSentEventsResource.class);\n      add(SseFeature.class);\n    }\n  };\n\n  @Override\n  public Set<Class<?>> getClasses() {\n    return classes;\n  }\n}\n```", "```java\n@Path(\"twittersse\")\npublic class ServerSentEventsResource {\n\n  static EventOutput eventOutput = new EventOutput();\n\n  @GET\n  @Produces(SseFeature.SERVER_SENT_EVENTS)\n public EventOutput getMessage() {\n    return eventOutput;\n  }\n\n  @POST\n  @Consumes(MediaType.TEXT_PLAIN)\n public void sendMessage(String message) throws IOException {\n    eventOutput.write(new OutboundEvent.Builder().name(\"custom-message\").data(String.class, message).build());\n  }\n}\n```", "```java\n@WebServlet(name = \"TestClient\", urlPatterns = {\"/TestClient\"}, asyncSupported = true)\npublic class TestClient extends HttpServlet {\n\n  private final static String TARGET_URI = \"http://localhost:8080/jersey-sse-twitter-sample/twittersse\";\n```", "```java\n/**\n* Processes requests for both HTTP\n* <code>GET</code> and\n* <code>POST</code> methods.\n*\n* @param request  servlet request\n* @param response servlet response\n* @throws ServletException if a servlet-specific error occurs\n* @throws IOException      if an I/O error occurs\n*/\n@Override\nprotected void service(final HttpServletRequest request, final HttpServletResponse response)\nthrows ServletException, IOException {\n  response.setContentType(\"text/html;charset=UTF-8\");\n\n  try {\n\n final AsyncContext asyncContext = request.startAsync();\n asyncContext.setTimeout(600000);\n asyncContext.addListener(new AsyncListener() {\n\n      @Override\n      public void onComplete(AsyncEvent event) throws IOException {\n      }\n\n      @Override\n      public void onTimeout(AsyncEvent event) throws IOException {\n        System.out.println(\"Timeout\" + event.toString());\n      }\n\n      @Override\n      public void onError(AsyncEvent event) throws IOException {\n        System.out.println(\"Error\" + event.toString());\n      }\n\n      @Override\n      public void onStartAsync(AsyncEvent event) throws IOException {\n      }\n    });\n\n Thread t = new Thread(new AsyncRequestProcessor(asyncContext));\n    t.start();\n\n    } catch (Exception e) {\n    e.printStackTrace();\n  }\n\n}\n```", "```java\nclass AsyncRequestProcessor implements Runnable {\n\n  private final AsyncContext context;\n\n  public AsyncRequestProcessor(AsyncContext context) {\n    this.context = context;\n  }\n\n  @Override\n  public void run() {\n    Client client = ClientBuilder.newClient();\n    context.getResponse().setContentType(\"text/html\");\n    final javax.ws.rs.client.WebTarget webTarget;\n    try {\n      final PrintWriter out = context.getResponse().getWriter();\n      webTarget = client.target(new URI(TARGET_URI));\n      out.println(\"<html>\");\n      out.println(\"<head>\");\n      out.println(\"<title>Glassfish SSE TestClient</title>\");\n      out.println(\"</head>\");\n      out.println(\"<body>\");\n      out.println(\"<h1>\");\n      out.println(\"Glassfish tweets\");\n      out.println(\"</h1>\");\n      // EventSource eventSource = new EventSource(webTarget, executorService) {\n        EventSource eventSource = new EventSource(webTarget) {\n          @Override\n          public void onEvent(InboundEvent inboundEvent) {\n            try {\n              //get the JSON data and parse it\n              JSONObject jsonObject = JSONObject.fromObject(inboundEvent.getData(String.class,\n              MediaType.APPLICATION_JSON_TYPE));\n              //get the JSON data and parse it\n              JsonReader jsonReader = Json.createReader (new ByteArrayInputStream(inboundEvent.getData(String.class,\n              MediaType.APPLICATION_JSON_TYPE).getBytes()));\n              JsonArray jsonArray = jsonReader.readArray();\n              for (int i = 0; i <jsonArray.size(); i++) {\n                JsonObject o = ((JsonObject)jsonArray.getJsonObject(i)) ;\n                out.println( o.get(\"text\"));\n                out.println(\"<br>\");\n                out.println(\"Created at \" + o.get(\"created_at\"));\n                out.println(\"<br>\");\n\n              }\n              out.println(\"</p>\");\n              out.flush();\n            } catch (IOException e) {\n              e.printStackTrace();\n            }\n          }\n        };\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n  }\n}\n```", "```java\n@Stateless\n@Named\npublic class TwitterBean {\n}\n```", "```java\n/**\n* Since twitter uses the v1.1 API we use twitter4j to get\n* the search results using OAuth\n* @return a JsonArray containing tweets\n* @throws TwitterException\n* @throws IOException\n*/\npublic JsonArray getFeedData() throws TwitterException, IOException {\n\n  Properties prop = new Properties();\n\n  //load a properties file\n  prop.load(this.getClass().getResourceAsStream(\"twitter4j.properties\"));\n\n  //get the property value and print it out\n  String consumerKey = prop.getProperty(\"oauth.consumerKey\");\n  String consumerSecret= prop.getProperty(\"oauth.consumerSecret\");\n  String accessToken = prop.getProperty(\"oauth.accessToken\");\n  String accessTokenSecret = prop.getProperty(\"oauth.accessTokenSecret\");\n  ConfigurationBuilder cb = new ConfigurationBuilder();\n  cb.setDebugEnabled(true)\n  .setOAuthConsumerKey(consumerKey)\n  .setOAuthConsumerSecret(consumerSecret)\n  .setOAuthAccessToken(accessToken)\n  .setOAuthAccessTokenSecret(accessTokenSecret);\n\n  TwitterFactory tf = new TwitterFactory(cb.build());\n  Twitter twitter = tf.getInstance();\n  Query query = new Query(\"glassfish\");\n  QueryResult result = twitter.search(query);\n  JsonArrayBuilder jsonArrayBuilder  = Json.createArrayBuilder();\n  for (Status status : result.getTweets()) {\n    jsonArrayBuilder\n    .add(Json.createObjectBuilder().\n    add(\"text\", status.getText())\n    .add(\"created_at\", status.getCreatedAt().toString()));\n  }\n  return jsonArrayBuilder.build() ;\n}\n```", "```java\nprivate final static String TARGET_URI = \"http://localhost:8080/jersey-sse-twitter-sample\";\n\n@Schedule(hour = \"*\", minute = \"*\", second = \"*/10\")\npublic void sendTweets() {\n\n  Client client = ClientBuilder.newClient();\n  try {\n    WebTarget webTarget= client.target(new URI(TARGET_URI)) ;\n    JsonArray statuses = null;\n\n statuses = getFeedData();\n    webTarget.path(\"twittersse\").request().post(Entity.json(statuses));\n  }(catch Exception e) {\n    e.printStackTrace();\n  }\n}\n```", "```java\n<servlet>\n  <servlet-name>org.sample.library.BookApplication</servlet-name>\n  <init-param>\n    <param-name>javax.json.stream.JsonGenerator.prettyPrinting</param-name>\n    <param-value>true</param-value>\n  </init-param>\n  <load-on-startup>1</load-on-startup>\n</servlet>\n\n<welcome-file-list>\n  <welcome-file>\n    index.html\n  </welcome-file>\n</welcome-file-list>\n<servlet-mapping>\n  <servlet-name>org.sample.library.BookApplication</servlet-name>\n  <url-pattern>/app/*</url-pattern>\n</servlet-mapping>\n```", "```java\npublic class BookApplication extends Application {\n\n  @Override\n  public Set<Class<?>> getClasses() {\n    Set<Class<?>> classes = new HashSet<Class<?>>();\n    classes.add(BooksResource.class);\n    classes.add(BookCollectionWriter.class);\n    classes.add(BookWriter.class);\n    return classes;\n  }\n}\n```", "```java\n@Override\npublic void writeTo(List<Book> books, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType, MultivaluedMap<String, Object> httpHeaders, OutputStream entityStream) throws IOException, WebApplicationException {\n  StringWriter writer = new StringWriter();\n if (mediaType.equals(MediaType.APPLICATION_JSON_TYPE)) {\n    JsonGenerator generator = Json.createGenerator(writer);\n    Map<String, Object> configs;\n    configs = new HashMap<String, Object>(1);\n    configs.put(JsonGenerator.PRETTY_PRINTING, true);\n\n    generator.writeStartArray();\n    for (Book book: books) {\n      generator.writeStartObject()\n      .write(\"Name\", book.getName())\n      .write(\" ISBN\", book.getIsbn())\n      .write(\"Author\",book.getAuthor()) .writeEnd();\n\n    }\n    generator.writeEnd();\n    generator.close();\n    entityStream.write(writer.toString().getBytes());\n } else if (mediaType.equals(MediaType.TEXT_PLAIN_TYPE)) {\n    StringBuilder stringBuilder = new StringBuilder(\"Book \");\n    for (Book book: books) {\n      stringBuilder.append(book.toString()).append(\"\\n\");\n    }\n    entityStream.write(stringBuilder.toString().getBytes());\n\n  }\n}\n```", "```java\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    <title>Library App</title>\n    <script src=\"img/main.js\">\n    </script>\n  </head>\n  <body>\n    <h1 id=\"helloMessage\">\n    </h1>\n\n    Please enter the following details:\n    <p>\n      Book Name:\n      <input type=\"text\" value=\"Game of thrones\" id=\"bookName\"/>\n    </p>\n    <br>\n    <button onclick=\"search_onclick()\">Search</button>\n    <button onclick=\"checkout_onclick()\">Checkout</button>\n    <button onclick=\"return_onclick()\">Return</button>\n    <button onclick=\"hold_onclick()\">Hold</button>\n    <button onclick=\"browse_onclick()\">Browse Collection</button>\n\n    <h2>Book Information</h2>\n    <h3>JAX-RS query sent by the Application:</h3>\n\n <div id=\"query\" style=\"border: 1px solid black; color: black; height: 6em; width: 80%\"></div>\n    <h3>Output from the JAX-RS query</h3>\n <div id=\"output\" style=\"border: 1px solid black; color: black; height: 18em; width: 80%\"></div>\n  </body>\n</html>\n```", "```java\nfunction sendBrowseRequest( ) {\n  var req = createRequest(); // defined above\n  // Create the callback:\n  req.onreadystatechange = function() {\n    if (req.readyState == 4) {\n      document.getElementById(\"query\").innerHTML=\"GET app/library/books\" ;\n      document.getElementById(\"output\").innerHTML=req.responseText;\n    }\n  }\n  req.open(\"GET\",\"app/library/books\" ,true);\n  req.send(null);\n}\n```", "```java\n@GET\n@Path(\"books\")\n@Produces({MediaType.TEXT_PLAIN, MediaType.APPLICATION_JSON})\npublic List<Book> browseCollection() {\n  return bookService.getBooks();\n} \n```", "```java\nvar wsUri = \"ws://localhost:8080/libraryApp/app/websockets\";\nfunction sendSearchWSRequest(book) {\n  websocket.send(book);\n  console.log(\"Searching for: \" + book);\n}\n```", "```java\n@ServerEndpoint(value=\"/app/websockets\")\npublic class BookWebSocket {\n  @OnMessage\n  public String searchBook(String name) {\n    return \"Found book \" + name;\n  }\n}\n```", "```java\nfunction sendCheckoutRequest( book) {\n  var req = createRequest(); // defined above\n  ;\n  // Create the callback:\n  req.onreadystatechange = function() {\n\n    if (req.readyState == 4) {\n      document.getElementById(\"query\").innerHTML=\"DELETE app/library/book/\" + encodeURI(book.trim());\n      document.getElementById(\"output\").innerHTML=req.responseText;\n\n    }\n  }\n  req.open(\"DELETE\",\"app/library/book/\" + book,true);\n  req.send(null);\n}\n```", "```java\n@DELETE\n@Path(\"book/{name}\")\n@Produces({MediaType.TEXT_PLAIN })\n@Consumes({MediaType.TEXT_PLAIN })\npublic Book checkoutBook(@PathParam(\"name\") String nameOfBook) {\n  return bookService.deleteBook(nameOfBook);\n\n}\n```", "```java\nfunction sendReturnRequest( book) {\n  var req = createRequest(); // defined above\n  ;\n  // Create the callback:\n  req.onreadystatechange = function() {\n\n    if (req.readyState == 4) {\n      document.getElementById(\"query\").innerHTML=\"POST app/library/book/\" + encodeURI(book.trim());\n      document.getElementById(\"output\").innerHTML=req.responseText;\n\n    }\n  }\n  req.open(\"POST\",\"app/library/book/\" + book,true);\n  req.send(null);\n}\n```", "```java\n@POST\n@Path(\"book/{name}\")\n@Produces({MediaType.TEXT_PLAIN })\n@Consumes({MediaType.TEXT_PLAIN })\npublic String returnBook(@PathParam(\"name\") String nameOfBook)      {\n\n  return \"Successfully returned Book \" + nameOfBook;\n}\n```", "```java\nfunction sendHoldRequest( book) {\n  var req = createRequest(); // defined above\n  ;\n  // Create the callback:\n  req.onreadystatechange = function() {\n\n    if (req.readyState == 4) {\n      document.getElementById(\"query\").innerHTML=\"POST app/library/hold/\" + encodeURI(book.trim());\n      document.getElementById(\"output\").innerHTML=req.responseText;\n\n    }\n  }\n  req.open(\"POST\",\"app/library/hold/\" + book,true);\n   req.send(null);\n\n}\n```", "```java\n/**\n* Asynchronously reply to placing a book on hold after sleeping for sometime\n*\n*/\n@POST\n@Produces({MediaType.TEXT_PLAIN})\n@Path(\"hold/{name}\")\npublic void asyncEcho(@PathParam(\"name\") final String name,  @Suspended final AsyncResponse ar) {\n  TASK_EXECUTOR.submit(new Runnable() {\n\n    public void run() {\n      try {\n        Thread.sleep(SLEEP_TIME_IN_MILLIS);\n      } catch (InterruptedException ex) {\n        ar.cancel();\n      }\n      ar.resume(\"Placed a hold for \" + name);\n    }\n  });\n}\n```", "```java\n@Singleton\npublic class BookService {\n\n  private static final HashMap<String,Book> books = new HashMap<String,Book>();\n\n  public static void addBook(Book book) {\n    books.put(book.getName(), book);\n  }\n\n  public static int getSize() {\n    return  books.size();\n  }\n\n  public static Book deleteBook(String isbn) {\n    return books.remove(isbn);\n  }\n\n  public static List<Book> getBooks() {\n    return new ArrayList<Book>(books.values());\n  }\n\n  public BookService() {\n    // initial content\n    addBook( new Book(\"Java EE development using GlassFish Aplication Server\",\"782345689\",\"David Heffinger\"));\n    addBook( new Book(\"Java 7 JAX-WS Web Services\",\"123456789\",\"Deepak Vohra\"));\n    addBook( new Book(\"Netbeans IDE7 CookBook\",\"2234555567\",\"Rhawi Dantas\"));\n    addBook( new Book(\"Getting Started with RESTful WebServices\",\"11233333\",\"Bhakti Mehta, Masoud Kalali\"));\n\n  }\n}\n```"]