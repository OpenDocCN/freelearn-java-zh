- en: Chapter 3. Handling Forms and Complex URL Mapping
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 3 章：处理表单和复杂 URL 映射
- en: Our application, as beautiful as it looks, would benefit from more informations
    about our users.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序看起来很漂亮，但我们可以从更多关于我们用户的信息中受益。
- en: We could as them to provide the topics they are interested in.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以要求他们提供他们感兴趣的领域。
- en: In this chapter, we will build a profile page. It will feature server- and client-side
    validation and file upload for a profile picture. We will save that information
    in the user session and also ensure that our audience is as large as possible
    by translating the application into several languages. Finally, we will display
    a summary of Twitter activity matching users' tastes.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将构建一个个人资料页面。它将具有服务器端和客户端验证以及个人照片的上传。我们将把信息保存到用户会话中，并确保我们的受众尽可能广泛，通过将应用程序翻译成多种语言。最后，我们将显示与用户口味匹配的
    Twitter 活动的摘要。
- en: Sounds good? Let's get started, we have some work to do.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 听起来不错？让我们开始吧，我们有一些工作要做。
- en: The profile page – a form
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 个人资料页面 – 一个表单
- en: Forms are the cornerstones of every web application. They have been the main
    way to get user input since the very beginning of the Internet!
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 表单是每个 Web 应用的基石。它们一直是获取用户输入的主要方式，自从互联网开始以来就是如此！
- en: 'Our first task here is to create a profile page like this one:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里的第一个任务是创建一个像这样的个人资料页面：
- en: '![The profile page – a form](img/2117_03_01.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![个人资料页面 – 一个表单](img/2117_03_01.jpg)'
- en: It will let the user enter some personal information as well as a list of tastes.
    These tastes will then be fed to our search engine.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 它将允许用户输入一些个人信息以及一系列口味。然后，这些口味将被输入到我们的搜索引擎中。
- en: 'Let''s create a new page in `templates/profile/profilePage.html`:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `templates/profile/profilePage.html` 中创建一个新页面：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note the `@{}` syntax that will construct the full path to a resource by prepending
    the server context path (in our case, `localhost:8080`) to its argument.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 `{@}` 语法，它将通过将服务器上下文路径（在我们的情况下，`localhost:8080`）添加到其参数之前来构建资源的完整路径。
- en: 'We will also create the associated controller named `ProfileController` in
    the `profile` package:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将在 `profile` 包中创建相关的控制器，命名为 `ProfileController`：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now, you can go to `http://localhost:8080` and behold a beautiful form that
    does nothing. That's because we didn't map any action to the post URL.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以访问 `http://localhost:8080` 并看到一个美丽的表单，但它什么也不做。那是因为我们没有将任何操作映射到 POST URL。
- en: 'Let''s create a **Data Transfer Object** (**DTO**) in the same package as our
    controller. We will name it `ProfileForm`. Its role will be to map the fields
    of our web form and describe validation rules:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在与我们的控制器相同的包中创建一个**数据传输对象**（**DTO**）。我们将命名为 `ProfileForm`。它的作用是将我们的网页表单的字段映射并描述验证规则：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This is a regular **Plain Old Java Object** (**POJO**). Don't forget to generate
    the getters and setters, without which our data binding will not work properly.
    Note that we have a list of tastes that we will not populate right now but a bit
    later.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个普通的**普通旧 Java 对象**（**POJO**）。别忘了生成获取器和设置器，没有它们我们的数据绑定将无法正常工作。注意，我们有一个口味列表，我们现在不会填充，稍后才会。
- en: Since we are using Java 8, the birth date of our user will be using the new
    Java date-time API (JSR 310). This API is much better than the old `java.util.Date`
    API because it makes strong distinctions between all the nuances of human dates
    and uses a fluent API and immutable data structures.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用的是 Java 8，用户的出生日期将使用新的 Java 日期时间 API（JSR 310）。这个 API 比旧的 `java.util.Date`
    API 好得多，因为它在人类日期的所有细微差别之间做出了强烈的区分，并使用流畅的 API 和不可变的数据结构。
- en: In our example, a `LocalDate` class is a simple day without time associated
    to it. It can be differentiated from the `LocalTime` class, which represents a
    time within a day, the `LocalDateTime` class, which represents both, or the `ZonedDateTime`
    class, which uses a time zone.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，`LocalDate` 类是一个没有与时间相关联的简单日期。它可以与表示一天中的时间的 `LocalTime` 类区分开来，或者表示两者的
    `LocalDateTime` 类，或者使用时区的 `ZonedDateTime` 类。
- en: Note
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you wish to learn more about the Java 8 date time API, refer to the Oracle
    tutorial available at [https://docs.oracle.com/javase/tutorial/datetime/TOC.html](https://docs.oracle.com/javase/tutorial/datetime/TOC.html).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要了解更多关于 Java 8 日期时间 API 的信息，请参考 Oracle 教程，该教程可在 [https://docs.oracle.com/javase/tutorial/datetime/TOC.html](https://docs.oracle.com/javase/tutorial/datetime/TOC.html)
    找到。
- en: Tip
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Good advice is to always generate the `toString` method of our data objects
    like this form. It is extremely useful for debugging.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 好的建议是始终生成我们数据对象的 `toString` 方法，就像这个表单一样。这对于调试非常有用。
- en: 'To instruct Spring to bind our field to this DTO, we will have to add some
    metadata in the `profilePage`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要指示Spring将我们的字段绑定到这个DTO，我们必须在`profilePage`中添加一些元数据。
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You will notice two things:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您将注意到两点：
- en: The `th:object` attribute in the form
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单中的`th:object`属性
- en: The `th:field` attributes in all the fields
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有字段中的`th:field`属性
- en: The first one will bind an object by its type to the controller. The second
    ones will bind the actual fields to our form bean attributes.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个将根据类型将对象绑定到控制器。第二个将实际字段绑定到我们的表单Bean属性。
- en: 'For the `th:object` field to work, we need to add an argument of the type `ProfileForm`
    to our request mapping methods:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使`th:object`字段生效，我们需要向我们的请求映射方法添加一个`ProfileForm`类型的参数：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We also added a mapping for the `POST` method that will be called when the form
    is submitted. At this point, if you try to submit the form with a date (for instance
    10/10/1980), it won't work at all and give you an error 400 and no useful logging
    information.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还添加了一个映射，用于处理表单提交时的`POST`方法。在此阶段，如果您尝试提交包含日期（例如1980/10/10）的表单，它将完全不起作用，并给您一个错误400，没有有用的日志信息。
- en: Tip
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Logging in Spring Boot**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**Spring Boot中的日志记录**'
- en: With Spring Boot, logging configuration is extremely simple. Just add `logging.level.{package}
    = DEBUG` to the `application.properties` file, where `{package}` is the fully
    qualified name of one of the classes or a package in your application. You can,
    of course, replace debug by any logging level you want. You can also add a classic
    logging configuration. Refer to [http://docs.spring.io/spring-boot/docs/current/reference/html/howto-logging.html](http://docs.spring.io/spring-boot/docs/current/reference/html/howto-logging.html)
    for more information.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Spring Boot，日志配置非常简单。只需将`logging.level.{package} = DEBUG`添加到`application.properties`文件中，其中`{package}`是您的应用程序中某个类或包的完全限定名称。当然，您可以用任何您想要的日志级别替换debug。您还可以添加经典的日志配置。有关更多信息，请参阅[http://docs.spring.io/spring-boot/docs/current/reference/html/howto-logging.html](http://docs.spring.io/spring-boot/docs/current/reference/html/howto-logging.html)。
- en: 'We will need to debug our application a little bit to understand what happened.
    Add this line to your file `application.properties`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要稍微调试一下我们的应用程序来了解发生了什么。将以下行添加到您的文件`application.properties`中：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `org.springframework.web` package is the base package of Spring MVC. This
    will allow us to see debug information generated by Spring web. If you submit
    the form again, you will see the following error in the log:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`org.springframework.web`包是Spring MVC的基础包。这将允许我们看到Spring web生成的调试信息。如果您再次提交表单，您将在日志中看到以下错误：'
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: To understand what's going on, we need to have a look at the `DateTimeFormatterRegistrar`
    class of Spring.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解发生了什么，我们需要查看Spring的`DateTimeFormatterRegistrar`类。
- en: In this class, you will see half a dozen parsers and printers for the JSR 310\.
    They will all fall back on the short style date format, which is either `MM/dd/yy`
    if you live in the US or `dd/MM/yy` otherwise.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个类中，您将看到针对JSR 310的六七种解析器和打印器。它们都将回退到短风格日期格式，如果您在美国，则是`MM/dd/yy`，否则是`dd/MM/yy`。
- en: This will instruct Spring Boot to create a `DateFormatter` class when our application
    starts.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这将指示Spring Boot在应用程序启动时创建一个`DateFormatter`类。
- en: We need to do the same thing in our case and create our own formatter since
    writing a year with two digits is a bit akward.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，我们需要做同样的事情并创建我们自己的格式化器，因为用两位数写年份有点尴尬。
- en: A `Formatter` in Spring is a class that can both `print` and `parse` an object.
    It will be used to decode and print a value from and to a String.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Spring中的`Formatter`是一个可以同时`打印`和`解析`对象的类。它将被用来从字符串解码和打印值。
- en: 'We will create a very simple formatter in the `date` package called `USLocalDateFormatter`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`date`包中创建一个非常简单的格式化器，名为`USLocalDateFormatter`：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This little class will allow us to parse the date in a more common format (with
    years in four digits) according to the user's locale.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这个小类将允许我们根据用户的区域设置以更常见的格式（四位数的年份）解析日期。
- en: 'Let''s create a new class in the `config` package called `WebConfiguration`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`config`包中创建一个名为`WebConfiguration`的新类：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This class extends the `WebMvcConfigurerAdapter`, which is a very handy class
    to customize the Spring MVC configuration. It provides a lot of common extension
    points that you can access by overriding methods such as the `addFormatters()`
    method.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类扩展了`WebMvcConfigurerAdapter`，这是一个非常方便的类，可以自定义Spring MVC配置。它提供了许多常见的扩展点，您可以通过重写方法（如`addFormatters()`方法）来访问。
- en: This time, submitting our form won't result in any error except if you don't
    type the date with the correct date format.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，提交我们的表单不会产生任何错误，除非你没有使用正确的日期格式输入日期。
- en: For the moment, it is impossible for the users to see the format in which they
    are supposed to enter their birth date, so let's add this information to the form.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，用户无法看到他们应该以何种格式输入出生日期，所以让我们将此信息添加到表单中。
- en: 'In the `ProfileController`, let''s add a `dateFormat` attribute:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ProfileController`中，让我们添加一个`dateFormat`属性：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `@ModelAttribute` annotation will allow us to expose a property to the web
    page, exactly like the `model.addAttribute()` method that we saw in the previous
    chapter.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`@ModelAttribute`注解将允许我们向网页公开一个属性，就像我们在上一章中看到的`model.addAttribute()`方法一样。'
- en: 'Now, we can use this information in our page by adding a placeholder to our
    date field:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以通过向我们的日期字段添加占位符来在我们的页面上使用这些信息：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This information will now be displayed to the user:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这些信息将显示给用户：
- en: '![The profile page – a form](img/2117_03_02.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![个人资料页面 – 表单](img/2117_03_02.jpg)'
- en: Validation
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证
- en: We wouldn't want our user to enter invalid or empty information and that's why
    we will need to add some validation logic to our `ProfileForm`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不希望用户输入无效或空的信息，这就是为什么我们需要在我们的`ProfileForm`中添加一些验证逻辑。
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As you can see, we added a few validation constraints. These annotations come
    from the JSR-303 specification, which specifies bean validation. The most popular
    implementation of this specification is `hibernate-validator`, which is included
    in Spring Boot.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们添加了一些验证约束。这些注解来自JSR-303规范，该规范指定了bean验证。该规范的流行实现是`hibernate-validator`，它包含在Spring
    Boot中。
- en: You can see that we use annotations coming from the `javax.validation.constraints`
    package (defined in the API) and some coming from the `org.hibernate.validator.constraints`
    package (additional constraints). Both work, I encourage you to take a look at
    what is available in those packages in the jars `validation-api` and `hibernate-validator`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到我们使用了来自`javax.validation.constraints`包（在API中定义）的注解和一些来自`org.hibernate.validator.constraints`包（附加约束）的注解。两者都有效，我鼓励你查看`validation-api`和`hibernate-validator`
    jar包中那些包中可用的内容。
- en: You can also take a look at the constraints available in the hibernate validator
    in the documentation at [http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#section-builtin-constraints](http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#section-builtin-constraints).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以查看hibernate validator文档中可用的约束，文档地址为[http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#section-builtin-constraints](http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#section-builtin-constraints)。
- en: 'We will need to add a few more things for validation to work. First, the controller
    needs to say that it wants a valid model on form submission. Adding the `javax.validation.Valid`
    annotation to the parameter representing the form does just that:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使验证工作，我们需要添加一些其他东西。首先，控制器需要表明它在表单提交时想要一个有效的模型。将`javax.validation.Valid`注解添加到表示表单的参数上就可以做到这一点：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note that we do not redirect the user if the form contains any errors. This
    will allow us to display them on the same web page.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果表单包含任何错误，我们不会重定向用户。这将允许我们在同一网页上显示它们。
- en: Speaking of which, we need to add a place on the web page where those errors
    will be displayed.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 说到这个，我们需要在网页上添加一个位置来显示那些错误。
- en: 'Add these lines just at the beginning of the form tag in `profilePage.html`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在`profilePage.html`表单标签的开始处添加这些行：
- en: '[PRE13]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This will iterate through every error found in the form and display them in
    a list. If you try to submit an empty form, you will see a bunch of errors:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这将遍历表单中找到的每个错误，并以列表形式显示它们。如果你尝试提交一个空表单，你会看到一堆错误：
- en: '![Validation](img/2117_03_03.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![验证](img/2117_03_03.jpg)'
- en: Note that the `@NotEmpty` check on the tastes will prevent the form from being
    submitted. Indeed, we do not yet have a way to provide them.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，对“口味”上的`@NotEmpty`检查将阻止表单提交。实际上，我们还没有提供它们的方法。
- en: Customize validation messages
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义验证消息
- en: 'These error messages are not very useful for our user yet. The first thing
    we need to do is to associate them properly to their respective fields. Let''s
    modify `profilePage.html`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这些错误消息对我们用户来说还不够有用。我们首先需要做的是将它们正确地关联到它们各自的字段上。让我们修改`profilePage.html`：
- en: '[PRE14]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You will notice that we added a `th:errors` tag below each field in the form.
    We also added a `th:errorclass` tag to each field. If the field contains an error,
    the associated css class will be added to the DOM.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到我们在表单中的每个字段下方添加了一个 `th:errors` 标签。我们还为每个字段添加了一个 `th:errorclass` 标签。如果字段包含错误，相关的
    CSS 类将被添加到 DOM 中。
- en: 'The validation looks much better already:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 验证看起来已经好多了：
- en: '![Customize validation messages](img/2117_03_04.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![自定义验证消息](img/2117_03_04.jpg)'
- en: The next thing we need to do is to customize the error messages to reflect the
    business rules of our application in a better way.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来需要做的是自定义错误消息，以便更好地反映我们应用程序的业务规则。
- en: Remember that Spring Boot takes care of creating a message source bean for us?
    The default location for this message source is in `src/main/resources/messages.properties`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 记住 Spring Boot 会为我们创建一个消息源 bean 吗？此消息源默认位置在 `src/main/resources/messages.properties`。
- en: 'Let''s create such a bundle, and add the following text:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建这样一个包，并添加以下文本：
- en: '[PRE15]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Tip
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'It can be very handy in development to configure the message source to always
    reload our bundles. Add the following property to `application.properties`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发过程中，将消息源配置为始终重新加载我们的包会非常有用。请将以下属性添加到 `application.properties` 文件中：
- en: '`spring.messages.cache-seconds=0`'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`spring.messages.cache-seconds=0`'
- en: 0 means always reload, whereas -1 means never reload.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 0 表示始终重新加载，而 -1 表示永不重新加载。
- en: 'The class responsible for resolving the error messages in Spring is `DefaultMessageCodesResolver`.
    In the case of field validation, this class tries to resolve the following messages
    in the given order:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 负责在 Spring 中解析错误消息的类是 `DefaultMessageCodesResolver`。在字段验证的情况下，该类会按照以下顺序尝试解析以下消息：
- en: code + "." + object name + "." + field
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: code + "." + object name + "." + field
- en: code + "." + field
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: code + "." + field
- en: code + "." + field type
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: code + "." + field type
- en: code
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: code
- en: 'In the preceding rules, the code part can be two things: an annotation type
    such as `Size` or `Email`, or an exception code such as `typeMismatch`. Remember
    when we got an exception caused by an incorrect date format? The associated error
    code was indeed `typeMismatch`.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的规则中，代码部分可以是两件事：一个注解类型，如 `Size` 或 `Email`，或者一个异常代码，如 `typeMismatch`。记得我们因为不正确的日期格式而引发异常吗？相关的错误代码确实是
    `typeMismatch`。
- en: 'With the preceding messages, we chose to be very specific. A good practice
    is to define default messages as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的消息中，我们选择非常具体。一个好的做法是如下定义默认消息：
- en: '[PRE16]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note the placeholders; each validation error has a number of arguments associated
    with it.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 注意占位符；每个验证错误都与一些参数相关联。
- en: 'The last way to declare error messages would involve defining the error message
    directly in the validation annotations as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 声明错误消息的最后一 种方式是直接在验证注解中定义错误消息，如下所示：
- en: '[PRE17]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: However, the downside of this method is that it is not compatible with internationalization.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种方法的一个缺点是不兼容国际化。
- en: Custom annotation for validation
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 验证的自定义注解
- en: For Java dates, there is an annotation called `@Past`, which ensures that a
    date is from the past.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Java 日期，有一个名为 `@Past` 的注解，它确保日期来自过去。
- en: 'We don''t want our user to pretend they are coming from the future, so we need
    to validate the birth date. To do this, we will define our own annotation in the
    `date` package:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不希望我们的用户假装他们是来自未来的，因此我们需要验证出生日期。为此，我们将在 `date` 包中定义自己的注解：
- en: '[PRE18]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Simple isn't it? This code will verify that our date is really from the past.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 简单吗？此代码将验证我们的日期确实来自过去。
- en: 'We can now add it to the `birthDate` field in the profile form:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以将其添加到配置文件中的 `birthDate` 字段：
- en: '[PRE19]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Internationalization
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 国际化
- en: Internationalization, frequently abbreviated i18n, is the process of designing
    an application that can be translated into various languages.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 国际化，通常缩写为 i18n，是设计一个可以翻译成各种语言的应用程序的过程。
- en: This generally involves placing translations in properties bundles with their
    names suffixed with the target locale, for instance, the `messages_en.properties`,
    `messages_en_US.properties`, and `messages_fr.properties` files.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常涉及将翻译放置在以目标区域设置命名的属性包中，例如，`messages_en.properties`、`messages_en_US.properties`
    和 `messages_fr.properties` 文件。
- en: The correct property bundle is resolved by trying the most specific locale first
    and then falling back to the less specific ones.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 通过首先尝试最具体的区域设置，然后回退到不太具体的区域设置，来解析正确的属性包。
- en: For U.S English, if you try to get a translation from a bundle named `x`, the
    application would first look in the `x_en_US.properties` file, then the `x_en.properties`
    file, and finally, the `x.properties` file.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 对于美国英语，如果您尝试从一个名为 `x` 的包中获取翻译，应用程序将首先查找 `x_en_US.properties` 文件，然后是 `x_en.properties`
    文件，最后是 `x.properties` 文件。
- en: The first thing we will do is translate our error messages into French. To do
    this, we will rename our existing `messages.properties` file to `messages_en.properties`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先要做的是将我们的错误消息翻译成法语。为此，我们将现有的 `messages.properties` 文件重命名为 `messages_en.properties`。
- en: 'We will also create a second bundle named `messages_fr.properties`:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将创建一个名为 `messages_fr.properties` 的第二个包：
- en: '[PRE20]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We saw in [Chapter 1](ch01.html "Chapter 1. Setting Up a Spring Web Application
    in No Time"), *Setting Up a Spring Web Application in No Time* that by default,
    Spring Boot uses a fixed `LocaleResolver` interface. The `LocaleResolver` is a
    simple interface with two methods:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第1章](ch01.html "第1章。快速设置Spring Web应用程序")中看到，*快速设置Spring Web应用程序*默认情况下，Spring
    Boot使用固定的 `LocaleResolver` 接口。`LocaleResolver` 是一个简单的接口，有两个方法：
- en: '[PRE21]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Spring provides a bunch of implementations of this interface, such as `FixedLocaleResolver`.
    This local resolver is very simple; we can configure the application locale via
    a property and cannot change it once it is defined. To configure the locale of
    our application, let''s add the following property to our `application.properties`
    file:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Spring提供了这个接口的多个实现，例如 `FixedLocaleResolver`。这个本地解析器非常简单；我们可以通过属性配置应用程序的区域设置，一旦定义就不能更改。要配置应用程序的区域设置，让我们将以下属性添加到我们的
    `application.properties` 文件中：
- en: '[PRE22]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This will add our validation messages in French.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这将添加我们的验证消息的法语版本。
- en: 'If we take a look at the different `LocaleResolver` interfaces that are bundled
    in Spring MVC, we will see the following:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看Spring MVC中捆绑的不同 `LocaleResolver` 接口，我们将看到以下内容：
- en: '`FixedLocaleResolver`: This fixes the locale defined in configuration. It cannot
    be changed once fixed.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FixedLocaleResolver`：这会固定配置中定义的区域设置。一旦固定，就不能更改。'
- en: '`CookieLocaleResolver`: This allows the locale to be retrieved and saved in
    a cookie.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CookieLocaleResolver`：这允许在cookie中检索和保存区域设置。'
- en: '`AcceptHeaderLocaleResolver`: This uses the HTTP header sent by the user''s
    browser to find the locale.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AcceptHeaderLocaleResolver`：这使用用户浏览器发送的HTTP头找到区域设置。'
- en: '`SessionLocaleResolver`: This finds and stores the locale in an HTTP session.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SessionLocaleResolver`：这会在HTTP会话中查找和存储区域设置。'
- en: These implementations cover a number of use cases, but in a more complex application
    one might implement `LocaleResolver` directly to allow more complex logic such
    as fetching the locale from the database and falling back to browser locale, for
    instance.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这些实现涵盖了多个用例，但在更复杂的应用程序中，有人可能会直接实现 `LocaleResolver` 以允许更复杂的逻辑，例如从数据库中获取区域设置并回退到浏览器区域设置，例如。
- en: Changing the locale
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改区域设置
- en: In our application, the locale is linked to the user. We will save their profile
    in session.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中，区域设置与用户相关联。我们将将其配置文件保存在会话中。
- en: 'We will allow the user to change the language of the site using a small menu.
    That''s why we will use the `SessionLocaleResolver`. Let''s edit `WebConfiguration`
    once more:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将允许用户通过一个小菜单更改站点的语言。这就是为什么我们将使用 `SessionLocaleResolver`。让我们再次编辑 `WebConfiguration`：
- en: '[PRE23]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: We declared a `LocaleChangeInterceptor` bean as a Spring MVC interceptor. It
    will intercept any request made to `Controller` and check for the `lang` query
    parameter. For instance, navigating to `http://localhost:8080/profile?lang=fr`
    would cause the locale to change.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们声明了一个 `LocaleChangeInterceptor` bean 作为Spring MVC拦截器。它将拦截对 `Controller` 的任何请求并检查
    `lang` 查询参数。例如，导航到 `http://localhost:8080/profile?lang=fr` 将导致区域设置更改。
- en: Tip
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Spring MVC Interceptors** can be compared to Servlet filters in a web application.
    Interceptors allow custom preprocessing, skipping the execution of a handler,
    and custom post-processing. Filters are more powerful, for example, they allow
    for exchanging the request and response objects that are handed down the chain.
    Filters are configured in a `web.xml` file, while interceptors are declared as
    beans in the application context.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '**Spring MVC拦截器**可以与Web应用程序中的Servlet过滤器相比较。拦截器允许自定义预处理、跳过处理器的执行以及自定义后处理。过滤器更强大，例如，它们允许交换传递给链的请求和响应对象。过滤器在
    `web.xml` 文件中配置，而拦截器则在应用程序上下文中声明为bean。'
- en: 'Now, we can change the locale by entering the correct URL ourselves, but it
    would be better to add a navigation bar allowing the user to change the language.
    We will modify the default layout (`templates/layout/default.html`) to add a drop-down
    menu:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This will allow the user to choose between the two supported languages.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing the locale](img/2117_03_05.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
- en: Translating the application text
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The last thing we need to do in order to have a fully bilingual application
    is to translate the titles and labels of our application. To do this, we will
    edit our web pages and use the `th:text` attribute, for instance, in `profilePage.html`:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The `th:text` attribute will replace the contents of a HTML element with an
    expression. Here, we use the `#{}` syntax, which indicates we want to display
    a message coming from a property source like `messages.properties`.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add the corresponding translations to our English bundle:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now to the French ones:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Some of the translations are not used yet, but will be used in just a moment.
    Et voilà! The French market is ready for the Twitter search flood.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: A list in a form
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We now want the user to enter a list of "tastes", which are, in fact, a list
    of keywords we will use to search tweets.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: 'A button will be displayed, allowing our user to enter a new keyword and add
    it to a list. Each item of this list will be an editable input text and will be
    removable thanks to a remove button:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '![A list in a form](img/2117_03_06.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
- en: Handling list data in a form can be a chore with some frameworks. However, with
    Spring MVC and Thymeleaf it is relatively straightforward, when you understand
    the principle.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines in the `profilePage.html` file right below the row
    containing the birth date, and just over the submit button:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The purpose of this snippet is to iterate over the `tastes` variable of our
    `LoginForm`. This can be achieved with the `th:each` attribute, which looks a
    lot like a `for…in` loop in java.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: Compared to the search result loop we saw earlier, the iteration is stored in
    two variables instead of one. The first one will actually contain each row of
    the data. The `rowStat` variable will contain additional information on the current
    state of the iteration.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: 'The strangest thing in the new piece of code is:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'This is quite a complicated syntax. You could come up with something simpler
    on your own, such as:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Well, that wouldn't work. The `${rowStat.index}` variable, which represents
    the current index of the iteration loop, needs to be evaluated before the rest
    of the expression. To achieve this, we need to use preprocessing.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: The expression surrounded by double underscores will be preprocessed, which
    means that it will be processed before the normal processing phase, allowing it
    to be evaluated twice.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: There are two new submit buttons on our form now. They all have a name. The
    global submit button we had earlier is called `save`. The two new buttons are
    called `addTaste` and `removeTaste`.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: 'On the controller side, this will allow us to easily discriminate the different
    actions coming from our form. Let''s add two new actions to our `ProfileController`:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制器端，这将使我们能够轻松区分来自我们表单的不同操作。让我们向我们的`ProfileController`添加两个新操作：
- en: '[PRE31]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: We added a `param` parameter to each of our post actions to differentiate them.
    The one we had previously is now bound to the `save` parameter.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为每个帖子操作添加了一个`param`参数来区分它们。我们之前有的现在绑定到`save`参数。
- en: 'When we click on a button, its name will automatically be added to the form
    data sent by the browser. Note that we specified a particular value with the remove
    button: `th:value="${rowStat.index}"`. This attribute will indicate which value
    the associated parameter should specifically take. A blank value will be sent
    if this attribute is not present. This means that when we click on the remove
    button, a `removeTaste` parameter will be added to the `POST` request, containing
    the index of the row we would like to remove. We can then get it back into the
    `Controller` with the following code:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们点击一个按钮时，它的名称将自动添加到浏览器发送的表单数据中。注意，我们为移除按钮指定了一个特定的值：`th:value="${rowStat.index}"`。这个属性将指示相关参数应该具体取哪个值。如果没有这个属性，将发送一个空白值。这意味着当我们点击移除按钮时，一个`removeTaste`参数将被添加到`POST`请求中，包含我们想要删除的行的索引。然后我们可以使用以下代码将其返回到`Controller`：
- en: '[PRE32]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The only downside with this method is that the whole form data will be sent
    every time we click on the button, even if it is not strictly required. Our form
    is small enough, so a tradeoff is acceptable.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的唯一缺点是，每次我们点击按钮时，即使它不是严格必需的，也会发送整个表单数据。由于我们的表单足够小，所以权衡是可以接受的。
- en: That's it! The form is now complete, with the possibility of adding one or more
    tastes.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！表单现在完整了，可以添加一个或多个口味。
- en: Client validation
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户端验证
- en: As a little bonus, client-side validation has become very easy nowadays with
    the HTML5 form validation specification. If your target browsers are Internet
    Explorer 10 and above, adding client-side validation is as easy as specifying
    the correct input type instead of just using text.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个小奖励，随着HTML5表单验证规范的推出，客户端验证现在变得非常简单。如果你的目标浏览器是Internet Explorer 10及以上版本，添加客户端验证就像指定正确的输入类型而不是仅仅使用文本一样简单。
- en: By adding the client-side validation, we can prevalidate the form and avoid
    overloading the server with requests that we know are incorrect. More information
    on the client-side validation specification is available at [http://caniuse.com/#search=validation](http://caniuse.com/#search=validation).
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加客户端验证，我们可以预先验证表单，避免服务器因我们知道是错误的请求而超载。有关客户端验证规范的更多信息，请参阅[http://caniuse.com/#search=validation](http://caniuse.com/#search=validation)。
- en: 'We can modify our inputs to enable simple client-side validation. The previous
    inputs, as shown in the following code:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以修改我们的输入以启用简单的客户端验证。以下代码显示了之前的输入：
- en: '[PRE33]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'This becomes:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这变成：
- en: '[PRE34]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: With this method, your browser will detect when the form is submitted and validate
    each attribute according to its type. The `required` attribute forces the user
    to enter a nonblank value. The `email` type enforces basic e-mail validation rules
    on the corresponding field.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种方法，您的浏览器将在表单提交时检测到并验证每个属性根据其类型。`required`属性强制用户输入非空白值。`email`类型强制对相应字段执行基本的电子邮件验证规则。
- en: '![Client validation](img/2117_03_07.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![客户端验证](img/2117_03_07.jpg)'
- en: Other types of validators also exist. Take a look at [http://www.the-art-of-web.com/html/html5-form-validation](http://www.the-art-of-web.com/html/html5-form-validation).
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 其他类型的验证器也存在。请参阅[http://www.the-art-of-web.com/html/html5-form-validation](http://www.the-art-of-web.com/html/html5-form-validation)。
- en: The downside of this method is that our add taste and remove taste buttons will
    now trigger validation. To fix this, we need to include a script at the bottom
    of the default layout, right after the jQuery declaration.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的缺点是，我们的添加口味和移除口味按钮现在将触发验证。为了解决这个问题，我们需要在默认布局的底部包含一个脚本，紧接在jQuery声明之后。
- en: 'However, it would be best to include it only on the profile page. To do this,
    we can add a new fragment section in the `layout/default.html` page, just before
    the end of the body tag:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，最好只将其包含在个人资料页面上。为此，我们可以在`layout/default.html`页面的末尾之前添加一个新的片段部分：
- en: '[PRE35]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This will allow us to include an additional script on each page if needed.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许我们在需要时在每个页面上包含一个额外的脚本。
- en: 'Now, we can add the following script to our profile page, just before closing
    the body tag:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在我们的个人资料页面中添加以下脚本，就在关闭body标签之前：
- en: '[PRE36]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Form validation won't be triggered when a `novalidate` attribute is present
    on the form. This little script will dynamically remove the `novalidate` attribute
    if the action of the form is named `save` if the name of the input is different,
    the `novalidate` attribute will always be added. Validation will thus be triggered
    only by the save button.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 当表单上存在 `novalidate` 属性时，表单验证不会被触发。这个小脚本会动态地移除 `novalidate` 属性，如果表单的动作名为 `save`，且输入框的名称不同，则
    `novalidate` 属性将始终被添加。因此，验证将仅由保存按钮触发。
- en: The check point
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查点
- en: Before moving on to the next chapter, let's check whether everything is in the
    right place.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在进入下一章之前，让我们检查一下所有内容是否都在正确的位置。
- en: 'In the Java sources, you should have the following:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Java 源代码中，你应该有以下内容：
- en: A new controller, the `ProfileController`
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个新的控制器，`ProfileController`
- en: 'Two new classes related to date: a date formatter and an annotation to validate
    `LocalDate`s'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个与日期相关的新的类：一个日期格式化器和用于验证 `LocalDate` 的注解
- en: A new `WebConfiguration` folder to customize Spring MVC's configuration
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个新的 `WebConfiguration` 文件夹，用于自定义 Spring MVC 的配置
- en: '![The check point](img/2117_03_08.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![检查点](img/2117_03_08.jpg)'
- en: 'In the resources, you should have a new template inside the profile directory
    and two new bundles:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在资源中，你应该在配置文件目录中有一个新的模板和两个新的包：
- en: '![The check point](img/2117_03_09.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![检查点](img/2117_03_09.jpg)'
- en: Summary
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to make a complete form. We created a model
    using Java 8 dates, and you learned how to format information coming from the
    user and display it accordingly.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何制作一个完整的表单。我们使用 Java 8 日期创建了一个模型，并学习了如何格式化来自用户的信息并相应地显示它。
- en: We ensured that the form was filled with valid information, with validator annotations,
    including our own. Also, we prevented obviously incorrect information from even
    hitting the server by including some client-side validation very easily.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们确保表单填写了有效的信息，包括我们的验证注解。此外，我们还通过包括一些客户端验证来防止显然错误的信息甚至到达服务器。
- en: Finally, we even translated the whole application into English and French, date
    formats included!
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们甚至将整个应用程序翻译成了英语和法语，包括日期格式！
- en: In the next chapter, we will build a space where the users will be able to upload
    their pictures and learn more about error handling in Spring MVC applications.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将构建一个空间，用户将能够上传他们的图片，并学习更多关于 Spring MVC 应用程序中错误处理的知识。
