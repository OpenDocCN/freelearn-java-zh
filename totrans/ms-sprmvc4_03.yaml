- en: Chapter 3. Handling Forms and Complex URL Mapping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our application, as beautiful as it looks, would benefit from more informations
    about our users.
  prefs: []
  type: TYPE_NORMAL
- en: We could as them to provide the topics they are interested in.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will build a profile page. It will feature server- and client-side
    validation and file upload for a profile picture. We will save that information
    in the user session and also ensure that our audience is as large as possible
    by translating the application into several languages. Finally, we will display
    a summary of Twitter activity matching users' tastes.
  prefs: []
  type: TYPE_NORMAL
- en: Sounds good? Let's get started, we have some work to do.
  prefs: []
  type: TYPE_NORMAL
- en: The profile page – a form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Forms are the cornerstones of every web application. They have been the main
    way to get user input since the very beginning of the Internet!
  prefs: []
  type: TYPE_NORMAL
- en: 'Our first task here is to create a profile page like this one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The profile page – a form](img/2117_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It will let the user enter some personal information as well as a list of tastes.
    These tastes will then be fed to our search engine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a new page in `templates/profile/profilePage.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note the `@{}` syntax that will construct the full path to a resource by prepending
    the server context path (in our case, `localhost:8080`) to its argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will also create the associated controller named `ProfileController` in
    the `profile` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now, you can go to `http://localhost:8080` and behold a beautiful form that
    does nothing. That's because we didn't map any action to the post URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a **Data Transfer Object** (**DTO**) in the same package as our
    controller. We will name it `ProfileForm`. Its role will be to map the fields
    of our web form and describe validation rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This is a regular **Plain Old Java Object** (**POJO**). Don't forget to generate
    the getters and setters, without which our data binding will not work properly.
    Note that we have a list of tastes that we will not populate right now but a bit
    later.
  prefs: []
  type: TYPE_NORMAL
- en: Since we are using Java 8, the birth date of our user will be using the new
    Java date-time API (JSR 310). This API is much better than the old `java.util.Date`
    API because it makes strong distinctions between all the nuances of human dates
    and uses a fluent API and immutable data structures.
  prefs: []
  type: TYPE_NORMAL
- en: In our example, a `LocalDate` class is a simple day without time associated
    to it. It can be differentiated from the `LocalTime` class, which represents a
    time within a day, the `LocalDateTime` class, which represents both, or the `ZonedDateTime`
    class, which uses a time zone.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you wish to learn more about the Java 8 date time API, refer to the Oracle
    tutorial available at [https://docs.oracle.com/javase/tutorial/datetime/TOC.html](https://docs.oracle.com/javase/tutorial/datetime/TOC.html).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Good advice is to always generate the `toString` method of our data objects
    like this form. It is extremely useful for debugging.
  prefs: []
  type: TYPE_NORMAL
- en: 'To instruct Spring to bind our field to this DTO, we will have to add some
    metadata in the `profilePage`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You will notice two things:'
  prefs: []
  type: TYPE_NORMAL
- en: The `th:object` attribute in the form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `th:field` attributes in all the fields
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first one will bind an object by its type to the controller. The second
    ones will bind the actual fields to our form bean attributes.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the `th:object` field to work, we need to add an argument of the type `ProfileForm`
    to our request mapping methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We also added a mapping for the `POST` method that will be called when the form
    is submitted. At this point, if you try to submit the form with a date (for instance
    10/10/1980), it won't work at all and give you an error 400 and no useful logging
    information.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Logging in Spring Boot**'
  prefs: []
  type: TYPE_NORMAL
- en: With Spring Boot, logging configuration is extremely simple. Just add `logging.level.{package}
    = DEBUG` to the `application.properties` file, where `{package}` is the fully
    qualified name of one of the classes or a package in your application. You can,
    of course, replace debug by any logging level you want. You can also add a classic
    logging configuration. Refer to [http://docs.spring.io/spring-boot/docs/current/reference/html/howto-logging.html](http://docs.spring.io/spring-boot/docs/current/reference/html/howto-logging.html)
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will need to debug our application a little bit to understand what happened.
    Add this line to your file `application.properties`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The `org.springframework.web` package is the base package of Spring MVC. This
    will allow us to see debug information generated by Spring web. If you submit
    the form again, you will see the following error in the log:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: To understand what's going on, we need to have a look at the `DateTimeFormatterRegistrar`
    class of Spring.
  prefs: []
  type: TYPE_NORMAL
- en: In this class, you will see half a dozen parsers and printers for the JSR 310\.
    They will all fall back on the short style date format, which is either `MM/dd/yy`
    if you live in the US or `dd/MM/yy` otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: This will instruct Spring Boot to create a `DateFormatter` class when our application
    starts.
  prefs: []
  type: TYPE_NORMAL
- en: We need to do the same thing in our case and create our own formatter since
    writing a year with two digits is a bit akward.
  prefs: []
  type: TYPE_NORMAL
- en: A `Formatter` in Spring is a class that can both `print` and `parse` an object.
    It will be used to decode and print a value from and to a String.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create a very simple formatter in the `date` package called `USLocalDateFormatter`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This little class will allow us to parse the date in a more common format (with
    years in four digits) according to the user's locale.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a new class in the `config` package called `WebConfiguration`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This class extends the `WebMvcConfigurerAdapter`, which is a very handy class
    to customize the Spring MVC configuration. It provides a lot of common extension
    points that you can access by overriding methods such as the `addFormatters()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: This time, submitting our form won't result in any error except if you don't
    type the date with the correct date format.
  prefs: []
  type: TYPE_NORMAL
- en: For the moment, it is impossible for the users to see the format in which they
    are supposed to enter their birth date, so let's add this information to the form.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `ProfileController`, let''s add a `dateFormat` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `@ModelAttribute` annotation will allow us to expose a property to the web
    page, exactly like the `model.addAttribute()` method that we saw in the previous
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can use this information in our page by adding a placeholder to our
    date field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This information will now be displayed to the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The profile page – a form](img/2117_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Validation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We wouldn't want our user to enter invalid or empty information and that's why
    we will need to add some validation logic to our `ProfileForm`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we added a few validation constraints. These annotations come
    from the JSR-303 specification, which specifies bean validation. The most popular
    implementation of this specification is `hibernate-validator`, which is included
    in Spring Boot.
  prefs: []
  type: TYPE_NORMAL
- en: You can see that we use annotations coming from the `javax.validation.constraints`
    package (defined in the API) and some coming from the `org.hibernate.validator.constraints`
    package (additional constraints). Both work, I encourage you to take a look at
    what is available in those packages in the jars `validation-api` and `hibernate-validator`.
  prefs: []
  type: TYPE_NORMAL
- en: You can also take a look at the constraints available in the hibernate validator
    in the documentation at [http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#section-builtin-constraints](http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#section-builtin-constraints).
  prefs: []
  type: TYPE_NORMAL
- en: 'We will need to add a few more things for validation to work. First, the controller
    needs to say that it wants a valid model on form submission. Adding the `javax.validation.Valid`
    annotation to the parameter representing the form does just that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Note that we do not redirect the user if the form contains any errors. This
    will allow us to display them on the same web page.
  prefs: []
  type: TYPE_NORMAL
- en: Speaking of which, we need to add a place on the web page where those errors
    will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add these lines just at the beginning of the form tag in `profilePage.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This will iterate through every error found in the form and display them in
    a list. If you try to submit an empty form, you will see a bunch of errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Validation](img/2117_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note that the `@NotEmpty` check on the tastes will prevent the form from being
    submitted. Indeed, we do not yet have a way to provide them.
  prefs: []
  type: TYPE_NORMAL
- en: Customize validation messages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'These error messages are not very useful for our user yet. The first thing
    we need to do is to associate them properly to their respective fields. Let''s
    modify `profilePage.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: You will notice that we added a `th:errors` tag below each field in the form.
    We also added a `th:errorclass` tag to each field. If the field contains an error,
    the associated css class will be added to the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: 'The validation looks much better already:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Customize validation messages](img/2117_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The next thing we need to do is to customize the error messages to reflect the
    business rules of our application in a better way.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that Spring Boot takes care of creating a message source bean for us?
    The default location for this message source is in `src/main/resources/messages.properties`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create such a bundle, and add the following text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It can be very handy in development to configure the message source to always
    reload our bundles. Add the following property to `application.properties`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`spring.messages.cache-seconds=0`'
  prefs: []
  type: TYPE_NORMAL
- en: 0 means always reload, whereas -1 means never reload.
  prefs: []
  type: TYPE_NORMAL
- en: 'The class responsible for resolving the error messages in Spring is `DefaultMessageCodesResolver`.
    In the case of field validation, this class tries to resolve the following messages
    in the given order:'
  prefs: []
  type: TYPE_NORMAL
- en: code + "." + object name + "." + field
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: code + "." + field
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: code + "." + field type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the preceding rules, the code part can be two things: an annotation type
    such as `Size` or `Email`, or an exception code such as `typeMismatch`. Remember
    when we got an exception caused by an incorrect date format? The associated error
    code was indeed `typeMismatch`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'With the preceding messages, we chose to be very specific. A good practice
    is to define default messages as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Note the placeholders; each validation error has a number of arguments associated
    with it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last way to declare error messages would involve defining the error message
    directly in the validation annotations as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: However, the downside of this method is that it is not compatible with internationalization.
  prefs: []
  type: TYPE_NORMAL
- en: Custom annotation for validation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For Java dates, there is an annotation called `@Past`, which ensures that a
    date is from the past.
  prefs: []
  type: TYPE_NORMAL
- en: 'We don''t want our user to pretend they are coming from the future, so we need
    to validate the birth date. To do this, we will define our own annotation in the
    `date` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Simple isn't it? This code will verify that our date is really from the past.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now add it to the `birthDate` field in the profile form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Internationalization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Internationalization, frequently abbreviated i18n, is the process of designing
    an application that can be translated into various languages.
  prefs: []
  type: TYPE_NORMAL
- en: This generally involves placing translations in properties bundles with their
    names suffixed with the target locale, for instance, the `messages_en.properties`,
    `messages_en_US.properties`, and `messages_fr.properties` files.
  prefs: []
  type: TYPE_NORMAL
- en: The correct property bundle is resolved by trying the most specific locale first
    and then falling back to the less specific ones.
  prefs: []
  type: TYPE_NORMAL
- en: For U.S English, if you try to get a translation from a bundle named `x`, the
    application would first look in the `x_en_US.properties` file, then the `x_en.properties`
    file, and finally, the `x.properties` file.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing we will do is translate our error messages into French. To do
    this, we will rename our existing `messages.properties` file to `messages_en.properties`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will also create a second bundle named `messages_fr.properties`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We saw in [Chapter 1](ch01.html "Chapter 1. Setting Up a Spring Web Application
    in No Time"), *Setting Up a Spring Web Application in No Time* that by default,
    Spring Boot uses a fixed `LocaleResolver` interface. The `LocaleResolver` is a
    simple interface with two methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Spring provides a bunch of implementations of this interface, such as `FixedLocaleResolver`.
    This local resolver is very simple; we can configure the application locale via
    a property and cannot change it once it is defined. To configure the locale of
    our application, let''s add the following property to our `application.properties`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This will add our validation messages in French.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we take a look at the different `LocaleResolver` interfaces that are bundled
    in Spring MVC, we will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`FixedLocaleResolver`: This fixes the locale defined in configuration. It cannot
    be changed once fixed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CookieLocaleResolver`: This allows the locale to be retrieved and saved in
    a cookie.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AcceptHeaderLocaleResolver`: This uses the HTTP header sent by the user''s
    browser to find the locale.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SessionLocaleResolver`: This finds and stores the locale in an HTTP session.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These implementations cover a number of use cases, but in a more complex application
    one might implement `LocaleResolver` directly to allow more complex logic such
    as fetching the locale from the database and falling back to browser locale, for
    instance.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the locale
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In our application, the locale is linked to the user. We will save their profile
    in session.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will allow the user to change the language of the site using a small menu.
    That''s why we will use the `SessionLocaleResolver`. Let''s edit `WebConfiguration`
    once more:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: We declared a `LocaleChangeInterceptor` bean as a Spring MVC interceptor. It
    will intercept any request made to `Controller` and check for the `lang` query
    parameter. For instance, navigating to `http://localhost:8080/profile?lang=fr`
    would cause the locale to change.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Spring MVC Interceptors** can be compared to Servlet filters in a web application.
    Interceptors allow custom preprocessing, skipping the execution of a handler,
    and custom post-processing. Filters are more powerful, for example, they allow
    for exchanging the request and response objects that are handed down the chain.
    Filters are configured in a `web.xml` file, while interceptors are declared as
    beans in the application context.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can change the locale by entering the correct URL ourselves, but it
    would be better to add a navigation bar allowing the user to change the language.
    We will modify the default layout (`templates/layout/default.html`) to add a drop-down
    menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This will allow the user to choose between the two supported languages.
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing the locale](img/2117_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Translating the application text
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The last thing we need to do in order to have a fully bilingual application
    is to translate the titles and labels of our application. To do this, we will
    edit our web pages and use the `th:text` attribute, for instance, in `profilePage.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The `th:text` attribute will replace the contents of a HTML element with an
    expression. Here, we use the `#{}` syntax, which indicates we want to display
    a message coming from a property source like `messages.properties`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add the corresponding translations to our English bundle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Now to the French ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Some of the translations are not used yet, but will be used in just a moment.
    Et voilà! The French market is ready for the Twitter search flood.
  prefs: []
  type: TYPE_NORMAL
- en: A list in a form
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We now want the user to enter a list of "tastes", which are, in fact, a list
    of keywords we will use to search tweets.
  prefs: []
  type: TYPE_NORMAL
- en: 'A button will be displayed, allowing our user to enter a new keyword and add
    it to a list. Each item of this list will be an editable input text and will be
    removable thanks to a remove button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A list in a form](img/2117_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Handling list data in a form can be a chore with some frameworks. However, with
    Spring MVC and Thymeleaf it is relatively straightforward, when you understand
    the principle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines in the `profilePage.html` file right below the row
    containing the birth date, and just over the submit button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The purpose of this snippet is to iterate over the `tastes` variable of our
    `LoginForm`. This can be achieved with the `th:each` attribute, which looks a
    lot like a `for…in` loop in java.
  prefs: []
  type: TYPE_NORMAL
- en: Compared to the search result loop we saw earlier, the iteration is stored in
    two variables instead of one. The first one will actually contain each row of
    the data. The `rowStat` variable will contain additional information on the current
    state of the iteration.
  prefs: []
  type: TYPE_NORMAL
- en: 'The strangest thing in the new piece of code is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'This is quite a complicated syntax. You could come up with something simpler
    on your own, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Well, that wouldn't work. The `${rowStat.index}` variable, which represents
    the current index of the iteration loop, needs to be evaluated before the rest
    of the expression. To achieve this, we need to use preprocessing.
  prefs: []
  type: TYPE_NORMAL
- en: The expression surrounded by double underscores will be preprocessed, which
    means that it will be processed before the normal processing phase, allowing it
    to be evaluated twice.
  prefs: []
  type: TYPE_NORMAL
- en: There are two new submit buttons on our form now. They all have a name. The
    global submit button we had earlier is called `save`. The two new buttons are
    called `addTaste` and `removeTaste`.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the controller side, this will allow us to easily discriminate the different
    actions coming from our form. Let''s add two new actions to our `ProfileController`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: We added a `param` parameter to each of our post actions to differentiate them.
    The one we had previously is now bound to the `save` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we click on a button, its name will automatically be added to the form
    data sent by the browser. Note that we specified a particular value with the remove
    button: `th:value="${rowStat.index}"`. This attribute will indicate which value
    the associated parameter should specifically take. A blank value will be sent
    if this attribute is not present. This means that when we click on the remove
    button, a `removeTaste` parameter will be added to the `POST` request, containing
    the index of the row we would like to remove. We can then get it back into the
    `Controller` with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The only downside with this method is that the whole form data will be sent
    every time we click on the button, even if it is not strictly required. Our form
    is small enough, so a tradeoff is acceptable.
  prefs: []
  type: TYPE_NORMAL
- en: That's it! The form is now complete, with the possibility of adding one or more
    tastes.
  prefs: []
  type: TYPE_NORMAL
- en: Client validation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a little bonus, client-side validation has become very easy nowadays with
    the HTML5 form validation specification. If your target browsers are Internet
    Explorer 10 and above, adding client-side validation is as easy as specifying
    the correct input type instead of just using text.
  prefs: []
  type: TYPE_NORMAL
- en: By adding the client-side validation, we can prevalidate the form and avoid
    overloading the server with requests that we know are incorrect. More information
    on the client-side validation specification is available at [http://caniuse.com/#search=validation](http://caniuse.com/#search=validation).
  prefs: []
  type: TYPE_NORMAL
- en: 'We can modify our inputs to enable simple client-side validation. The previous
    inputs, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'This becomes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: With this method, your browser will detect when the form is submitted and validate
    each attribute according to its type. The `required` attribute forces the user
    to enter a nonblank value. The `email` type enforces basic e-mail validation rules
    on the corresponding field.
  prefs: []
  type: TYPE_NORMAL
- en: '![Client validation](img/2117_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Other types of validators also exist. Take a look at [http://www.the-art-of-web.com/html/html5-form-validation](http://www.the-art-of-web.com/html/html5-form-validation).
  prefs: []
  type: TYPE_NORMAL
- en: The downside of this method is that our add taste and remove taste buttons will
    now trigger validation. To fix this, we need to include a script at the bottom
    of the default layout, right after the jQuery declaration.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, it would be best to include it only on the profile page. To do this,
    we can add a new fragment section in the `layout/default.html` page, just before
    the end of the body tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: This will allow us to include an additional script on each page if needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can add the following script to our profile page, just before closing
    the body tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Form validation won't be triggered when a `novalidate` attribute is present
    on the form. This little script will dynamically remove the `novalidate` attribute
    if the action of the form is named `save` if the name of the input is different,
    the `novalidate` attribute will always be added. Validation will thus be triggered
    only by the save button.
  prefs: []
  type: TYPE_NORMAL
- en: The check point
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before moving on to the next chapter, let's check whether everything is in the
    right place.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Java sources, you should have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A new controller, the `ProfileController`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Two new classes related to date: a date formatter and an annotation to validate
    `LocalDate`s'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A new `WebConfiguration` folder to customize Spring MVC's configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![The check point](img/2117_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the resources, you should have a new template inside the profile directory
    and two new bundles:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The check point](img/2117_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to make a complete form. We created a model
    using Java 8 dates, and you learned how to format information coming from the
    user and display it accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: We ensured that the form was filled with valid information, with validator annotations,
    including our own. Also, we prevented obviously incorrect information from even
    hitting the server by including some client-side validation very easily.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we even translated the whole application into English and French, date
    formats included!
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will build a space where the users will be able to upload
    their pictures and learn more about error handling in Spring MVC applications.
  prefs: []
  type: TYPE_NORMAL
