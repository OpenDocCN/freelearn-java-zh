["```java\n<!DOCTYPE html>\n<html \n\n      layout:decorator=\"layout/default\">\n<head lang=\"en\">\n    <title>Profile Picture Upload</title>\n</head>\n<body>\n<div class=\"row\" layout:fragment=\"content\">\n\n    <h2 class=\"indigo-text center\">Upload</h2>\n\n    <form th:action=\"@{/upload}\" method=\"post\" enctype=\"multipart/form-data\" class=\"col m8 s12 offset-m2\">\n\n        <div class=\"input-field col s6\">\n            <input type=\"file\" id=\"file\" name=\"file\"/>\n        </div>\n\n        <div class=\"col s6 center\">\n            <button class=\"btn indigo waves-effect waves-light\" type=\"submit\" name=\"save\" th:text=\"#{submit}\">Submit\n                <i class=\"mdi-content-send right\"></i>\n            </button>\n        </div>\n    </form>\n</div>\n</body>\n</html>\n```", "```java\npackage masterSpringMvc.profile;\n\nimport org.apache.tomcat.util.http.fileupload.IOUtils;\nimport org.springframework.core.io.FileSystemResource;\nimport org.springframework.core.io.Resource;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport java.io.*;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\n\n@Controller\npublic class PictureUploadController {\n    public static final Resource PICTURES_DIR = new FileSystemResource(\"./pictures\");\n\n    @RequestMapping(\"upload\")\n    public String uploadPage() {\n        return \"profile/uploadPage\";\n    }\n\n    @RequestMapping(value = \"/upload\", method = RequestMethod.POST)\n    public String onUpload(MultipartFile file) throws IOException {\n        String filename = file.getOriginalFilename();\n        File tempFile = File.createTempFile(\"pic\", getFileExtension(filename), PICTURES_DIR.getFile());\n\n        try (InputStream in = file.getInputStream();\n             OutputStream out = new FileOutputStream(tempFile)) {\n            IOUtils.copy(in, out);\n        }\n\n        return \"profile/uploadPage\";\n    }\n\n    private static String getFileExtension(String name) {\n        return name.substring(name.lastIndexOf(\".\"));\n    }\n}\n```", "```java\npackage masterSpringMvc.profile;\n\nimport org.apache.tomcat.util.http.fileupload.IOUtils;\nimport org.springframework.core.io.FileSystemResource;\nimport org.springframework.core.io.Resource;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.multipart.MultipartFile;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\n\nimport java.io.*;\n\n@Controller\npublic class PictureUploadController {\n    public static final Resource PICTURES_DIR = new FileSystemResource(\"./pictures\");\n\n    @RequestMapping(\"upload\")\n    public String uploadPage() {\n        return \"profile/uploadPage\";\n    }\n\n    @RequestMapping(value = \"/upload\", method = RequestMethod.POST)\n    public String onUpload(MultipartFile file, RedirectAttributes redirectAttrs) throws IOException {\n\n if (file.isEmpty() || !isImage(file)) {\n redirectAttrs.addFlashAttribute(\"error\", \"Incorrect file. Please upload a picture.\");\n return \"redirect:/upload\";\n }\n\n        copyFileToPictures(file);\n\n        return \"profile/uploadPage\";\n    }\n\n    private Resource copyFileToPictures(MultipartFile file) throws IOException {\n        String fileExtension = getFileExtension(file.getOriginalFilename());\n        File tempFile = File.createTempFile(\"pic\", fileExtension, PICTURES_DIR.getFile());\n        try (InputStream in = file.getInputStream();\n             OutputStream out = new FileOutputStream(tempFile)) {\n\n            IOUtils.copy(in, out);\n        }\n        return new FileSystemResource(tempFile);\n    }\n\n    private boolean isImage(MultipartFile file) {\n return file.getContentType().startsWith(\"image\");\n }\n\n    private static String getFileExtension(String name) {\n        return name.substring(name.lastIndexOf(\".\"));\n    }\n}\n```", "```java\n<div class=\"col s12 center red-text\" th:text=\"${error}\" th:if=\"${error}\">\n    Error during upload\n</div>\n```", "```java\n<div class=\"col m8 s12 offset-m2\">\n    <img th:src=\"img/uploadedPicture}\" width=\"100\" height=\"100\"/>\n</div>\n```", "```java\n@RequestMapping(value = \"/uploadedPicture\")\npublic void getUploadedPicture(HttpServletResponse response) throws IOException {\n    ClassPathResource classPathResource = new ClassPathResource(\"/images/anonymous.png\");\n    response.setHeader(\"Content-Type\", URLConnection.guessContentTypeFromName(classPathResource.getFilename()));\n    IOUtils.copy(classPathResource.getInputStream(), response.getOutputStream());\n}\n```", "```java\npackage masterSpringMvc.config;\n\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.core.io.Resource;\n\nimport java.io.IOException;\n@ConfigurationProperties(prefix = \"upload.pictures\")\npublic class PictureUploadProperties {\n    private Resource uploadPath;\n    private Resource anonymousPicture;\n\n    public Resource getAnonymousPicture() {\n        return anonymousPicture;\n    }\n\n    public void setAnonymousPicture(String anonymousPicture) {\n        this.anonymousPicture = new DefaultResourceLoader().getResource(anonymousPicture);\n    }\n\n    public Resource getUploadPath() {\n        return uploadPath;\n    }\n\n    public void setUploadPath(String uploadPath) {\n        this.uploadPath = new DefaultResourceLoader().getResource(uploadPath);\n    }\n}\n```", "```java\n@SpringBootApplication\n@EnableConfigurationProperties({PictureUploadProperties.class})\npublic class MasterSpringMvc4Application extends WebMvcConfigurerAdapter {\n  // code omitted\n}\n```", "```java\nupload.pictures.uploadPath=file:./pictures\nupload.pictures.anonymousPicture=classpath:/images/anonymous.png\n```", "```java\npackage masterSpringMvc.profile;\n\nimport masterSpringMvc.config.PictureUploadProperties;\nimport org.apache.tomcat.util.http.fileupload.IOUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.io.Resource;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.multipart.MultipartFile;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\n\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.*;\nimport java.net.URLConnection;\n\n@Controller\npublic class PictureUploadController {\n    private final Resource picturesDir;\n private final Resource anonymousPicture;\n\n @Autowired\n public PictureUploadController(PictureUploadProperties uploadProperties) {\n picturesDir = uploadProperties.getUploadPath();\n anonymousPicture = uploadProperties.getAnonymousPicture();\n }\n\n    @RequestMapping(value = \"/uploadedPicture\")\n    public void getUploadedPicture(HttpServletResponse response) throws IOException {\n        response.setHeader(\"Content-Type\", URLConnection.guessContentTypeFromName(anonymousPicture.getFilename()));\n IOUtils.copy(anonymousPicture.getInputStream(), response.getOutputStream());\n    }\n\n  private Resource copyFileToPictures(MultipartFile file) throws IOException {\n       String fileExtension = getFileExtension(file.getOriginalFilename());\n       File tempFile = File.createTempFile(\"pic\", fileExtension, picturesDir.getFile());\n       try (InputStream in = file.getInputStream();\n            OutputStream out = new FileOutputStream(tempFile)) {\n\n           IOUtils.copy(in, out);\n       }\n       return new FileSystemResource(tempFile);\n   }    \n// The rest of the code remains the same\n}\n```", "```java\n@ModelAttribute(\"picturePath\")\npublic Resource picturePath() {\n  return anonymousPicture;\n}\n```", "```java\n@RequestMapping(value = \"/uploadedPicture\")\npublic void getUploadedPicture(HttpServletResponse response, @ModelAttribute(\"picturePath\") Path picturePath) throws IOException {\n    response.setHeader(\"Content-Type\", URLConnection.guessContentTypeFromName(picturePath.toString()));\n    Files.copy(picturePath, response.getOutputStream());\n}\n```", "```java\n@RequestMapping(value = \"/upload\", method = RequestMethod.POST)\npublic String onUpload(MultipartFile file, RedirectAttributes redirectAttrs, Model model) throws IOException {\n\n    if (file.isEmpty() || !isImage(file)) {\n        redirectAttrs.addFlashAttribute(\"error\", \"Incorrect file. Please upload a picture.\");\n        return \"redirect:/upload\";\n    }\n\n    Resource picturePath = copyFileToPictures(file);\n model.addAttribute(\"picturePath\", picturePath);\n\n    return \"profile/uploadPage\";\n}\n```", "```java\n@Controller\n@SessionAttributes(\"picturePath\")\npublic class PictureUploadController {\n}\n```", "```java\n@ExceptionHandler(IOException.class)\npublic ModelAndView handleIOException(IOException exception) {\n    ModelAndView modelAndView = new ModelAndView(\"profile/uploadPage\");\n    modelAndView.addObject(\"error\", exception.getMessage());\n    return modelAndView;\n}\n```", "```java\n@RequestMapping(value = \"/upload\", method = RequestMethod.POST)\npublic String onUpload(MultipartFile file, RedirectAttributes redirectAttrs, Model model) throws IOException {\n    throw new IOException(\"Some message\");\n}\n```", "```java\n@Bean\npublic EmbeddedServletContainerCustomizer containerCustomizer() {\n    EmbeddedServletContainerCustomizer \nembeddedServletContainerCustomizer = new EmbeddedServletContainerCustomizer() {\n        @Override\n        public void customize(ConfigurableEmbeddedServletContainer container) {\n            container.addErrorPages(new ErrorPage(MultipartException.class, \"/uploadError\"));\n        }\n    };\n    return embeddedServletContainerCustomizer;\n}\n```", "```java\n@Bean\npublic EmbeddedServletContainerCustomizer containerCustomizer() {\n    EmbeddedServletContainerCustomizer embeddedServletContainerCustomizer\n            = container -> container.addErrorPages(new ErrorPage(MultipartException.class, \"/uploadError\"));\n    return embeddedServletContainerCustomizer;\n}\n```", "```java\n@Bean\npublic EmbeddedServletContainerCustomizer containerCustomizer() {\n    return container -> container.addErrorPages(new ErrorPage(MultipartException.class, \"/uploadError\"));\n}\n```", "```java\n@RequestMapping(\"uploadError\")\npublic ModelAndView onUploadError(HttpServletRequest request) {\n    ModelAndView modelAndView = new ModelAndView(\"uploadPage\");\n    modelAndView.addObject(\"error\", request.getAttribute(WebUtils.ERROR_MESSAGE_ATTRIBUTE));\n    return modelAndView;\n}\n```", "```java\nprivate final MessageSource messageSource;\n\n@Autowired\npublic PictureUploadController(PictureUploadProperties uploadProperties, MessageSource messageSource) {\n    picturesDir = uploadProperties.getUploadPath();\n    anonymousPicture = uploadProperties.getAnonymousPicture();\n    this.messageSource = messageSource;\n}\n```", "```java\n@ExceptionHandler(IOException.class)\npublic ModelAndView handleIOException(Locale locale) {\n    ModelAndView modelAndView = new ModelAndView(\"profile/uploadPage\");\n    modelAndView.addObject(\"error\", messageSource.getMessage(\"upload.io.exception\", null, locale));\n    return modelAndView;\n}\n\n@RequestMapping(\"uploadError\")\npublic ModelAndView onUploadError(Locale locale) {\n    ModelAndView modelAndView = new ModelAndView(\"profile/uploadPage\");\n    modelAndView.addObject(\"error\", messageSource.getMessage(\"upload.file.too.big\", null, locale));\n    return modelAndView;\n}\n```", "```java\nupload.io.exception=An error occurred while uploading the file. Please try again.\nupload.file.too.big=Your file is too big.\n```", "```java\nupload.io.exception=Une erreur est survenue lors de l'envoi du fichier. Veuillez réessayer.\nupload.file.too.big=Votre fichier est trop gros.\n```", "```java\npackage masterSpringMvc.profile;\n\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.context.annotation.ScopedProxyMode;\nimport org.springframework.stereotype.Component;\nimport java.io.Serializable;\nimport java.time.LocalDate;\nimport java.util.ArrayList;\nimport java.util.List;\n\n@Component\n@Scope(value = \"session\", proxyMode = ScopedProxyMode.TARGET_CLASS)\npublic class UserProfileSession implements Serializable {\n    private String twitterHandle;\n    private String email;\n    private LocalDate birthDate;\n    private List<String> tastes = new ArrayList<>();\n\n    public void saveForm(ProfileForm profileForm) {\n        this.twitterHandle = profileForm.getTwitterHandle();\n        this.email = profileForm.getEmail();\n        this.birthDate = profileForm.getBirthDate();\n        this.tastes = profileForm.getTastes();\n    }\n\n    public ProfileForm toForm() {\n        ProfileForm profileForm = new ProfileForm();\n        profileForm.setTwitterHandle(twitterHandle);\n        profileForm.setEmail(email);\n        profileForm.setBirthDate(birthDate);\n        profileForm.setTastes(tastes);\n        return profileForm;\n    }\n}\n```", "```java\n@Controller\npublic class ProfileController {\n\n    private UserProfileSession userProfileSession;\n    @Autowired\n    public ProfileController(UserProfileSession userProfileSession) {\n        this.userProfileSession = userProfileSession;\n    }\n\n    @ModelAttribute\n    public ProfileForm getProfileForm() {\n        return userProfileSession.toForm();\n    }\n\n    @RequestMapping(value = \"/profile\", params = {\"save\"}, method = RequestMethod.POST)\n    public String saveProfile(@Valid ProfileForm profileForm, BindingResult bindingResult) {\n        if (bindingResult.hasErrors()) {\n            return \"profile/profilePage\";\n        }\n        userProfileSession.saveForm(profileForm);\n        return \"redirect:/profile\";\n    }\n\n    // the rest of the code is unchanged\n}\n```", "```java\n@Controller\npublic class ProfileController {\n\n    @Autowired\n    private UserProfileSession userProfileSession;\n}\n```", "```java\n@Scope(value = \"session\", proxyMode = ScopedProxyMode.TARGET_CLASS)\n```", "```java\n<!DOCTYPE html>\n<html >\n<head lang=\"en\">\n    <meta charset=\"UTF-8\"/>\n    <title th:text=\"${status}\">404</title>\n\n    <link href=\"/webjars/materializecss/0.96.0/css/materialize.css\" type=\"text/css\" rel=\"stylesheet\"\n          media=\"screen,projection\"/>\n</head>\n<body>\n<div class=\"row\">\n    <h1 class=\"indigo-text center\" th:text=\"${error}\">Not found</h1>\n\n    <p class=\"col s12 center\" th:text=\"${message}\">\n        This page is not available\n    </p>\n</div>\n</body>\n</html>\n```", "```java\nsomeUrl/param?var1=value1&var2=value2\n```", "```java\nsomeUrl/param;var1=value1;var2=value2\n```", "```java\nsomeUrl/param;var1=value1,value2;var2=value3,value4\n```", "```java\nhttp://localhost:8080/search/popular;keywords=scala,java\n```", "```java\n@Override\npublic void configurePathMatch(PathMatchConfigurer configurer) {\n    UrlPathHelper urlPathHelper = new UrlPathHelper();\n    urlPathHelper.setRemoveSemicolonContent(false);\n    configurer.setUrlPathHelper(urlPathHelper);\n}\n```", "```java\npackage masterSpringMvc.search;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.social.twitter.api.Tweet;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.MatrixVariable;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.servlet.ModelAndView;\n\nimport java.util.List;\n\n@Controller\npublic class SearchController {\n    private SearchService searchService;\n    @Autowired\n    public SearchController(SearchService searchService) {\n        this.searchService = searchService;\n    }\n\n    @RequestMapping(\"/search/{searchType}\")\n    public ModelAndView search(@PathVariable String searchType, @MatrixVariable List<String> keywords) {\n        List<Tweet> tweets = searchService.search(searchType, keywords);\n        ModelAndView modelAndView = new ModelAndView(\"resultPage\");\n        modelAndView.addObject(\"tweets\", tweets);\n        modelAndView.addObject(\"search\", String.join(\",\", keywords));\n        return modelAndView;\n    }\n}\n```", "```java\npackage masterSpringMvc.search;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.social.twitter.api.Tweet;\nimport org.springframework.social.twitter.api.Twitter;\nimport org.springframework.stereotype.Service;\nimport java.util.List;\n\n@Service\npublic class SearchService {\n    private Twitter twitter;\n\n    @Autowired\n    public SearchService(Twitter twitter) {\n        this.twitter = twitter;\n    }\n\n    public List<Tweet> search(String searchType, List<String> keywords) {\n        return null;\n    }\n}\n```", "```java\nprivate SearchParameters.ResultType getResultType(String searchType) {\n    for (SearchParameters.ResultType knownType : SearchParameters.ResultType.values()) {\n        if (knownType.name().equalsIgnoreCase(searchType)) {\n            return knownType;\n        }\n    }\n    return SearchParameters.ResultType.RECENT;\n}\n```", "```java\nprivate SearchParameters createSearchParam(String searchType, String taste) {\n\n    SearchParameters.ResultType resultType = getResultType(searchType);\n    SearchParameters searchParameters = new SearchParameters(taste);\n    searchParameters.resultType(resultType);\n    searchParameters.count(3);\n    return searchParameters;\n}\n```", "```java\nList<SearchParameters> searches = keywords.stream()\n        .map(taste -> createSearchParam(searchType, taste))\n        .collect(Collectors.toList());\n```", "```java\nList<Tweet> tweets = searches.stream()\n        .map(params -> twitter.searchOperations().search(params))\n        .map(searchResults -> searchResults.getTweets())\n        .collect(Collectors.toList());\n```", "```java\nList<Tweet> tweets = searches.stream()\n        .map(params -> twitter.searchOperations().search(params))\n        .flatMap(searchResults -> searchResults.getTweets().stream())\n        .collect(Collectors.toList());\n```", "```java\npackage masterSpringMvc.search;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.social.twitter.api.SearchParameters;\nimport org.springframework.social.twitter.api.Tweet;\nimport org.springframework.social.twitter.api.Twitter;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n@Service\npublic class SearchService {\n    private Twitter twitter;\n\n    @Autowired\n    public SearchService(Twitter twitter) {\n        this.twitter = twitter;\n    }\n\n    public List<Tweet> search(String searchType, List<String> keywords) {\n        List<SearchParameters> searches = keywords.stream()\n                .map(taste -> createSearchParam(searchType, taste))\n                .collect(Collectors.toList());\n\n        List<Tweet> results = searches.stream()\n                .map(params -> twitter.searchOperations().search(params))\n                .flatMap(searchResults -> searchResults.getTweets().stream())\n                .collect(Collectors.toList());\n\n        return results;\n    }\n\n    private SearchParameters.ResultType getResultType(String searchType) {\n        for (SearchParameters.ResultType knownType : SearchParameters.ResultType.values()) {\n            if (knownType.name().equalsIgnoreCase(searchType)) {\n                return knownType;\n            }\n        }\n        return SearchParameters.ResultType.RECENT;\n    }\n\n    private SearchParameters createSearchParam(String searchType, String taste) {\n        SearchParameters.ResultType resultType = getResultType(searchType);\n        SearchParameters searchParameters = new SearchParameters(taste);\n        searchParameters.resultType(resultType);\n        searchParameters.count(3);\n        return searchParameters;\n    }\n}\n```", "```java\n<div class=\"row\">\n\n    <div class=\"col m8 s12 offset-m2\">\n        <img th:src=\"img/uploadedPicture}\" width=\"100\" height=\"100\"/>\n    </div>\n\n    <div class=\"col s12 center red-text\" th:text=\"${error}\" th:if=\"${error}\">\n        Error during upload\n    </div>\n\n    <form th:action=\"@{/profile}\" method=\"post\" enctype=\"multipart/form-data\" class=\"col m8 s12 offset-m2\">\n\n        <div class=\"input-field col s6\">\n            <input type=\"file\" id=\"file\" name=\"file\"/>\n        </div>\n\n        <div class=\"col s6 center\">\n            <button class=\"btn indigo waves-effect waves-light\" type=\"submit\" name=\"upload\" th:text=\"#{upload}\">Upload\n                <i class=\"mdi-content-send right\"></i>\n            </button>\n        </div>\n    </form>\n</div>\n```", "```java\nupload=Upload\n```", "```java\nUpload=Envoyer\n```", "```java\n@RequestMapping(value = \"/profile\", params = {\"upload\"}, method = RequestMethod.POST)\npublic String onUpload(@RequestParam MultipartFile file, RedirectAttributes redirectAttrs) throws IOException {\n\n    if (file.isEmpty() || !isImage(file)) {\n        redirectAttrs.addFlashAttribute(\"error\", \"Incorrect file. Please upload a picture.\");\n        return \"redirect:/profile\";\n    }\n\n    Resource picturePath = copyFileToPictures(file);\n    userProfileSession.setPicturePath(picturePath);\n\n    return \"redirect:profile\";\n}\n```", "```java\n@Component\n@Scope(value = \"session\", proxyMode = ScopedProxyMode.TARGET_CLASS)\npublic class UserProfileSession implements Serializable {\n    private URL picturePath;\n\n    public void setPicturePath(Resource picturePath) throws IOException {\n        this.picturePath = picturePath.getURL();\n    }\n\n    public Resource getPicturePath() {\n        return picturePath == null ? null : new UrlResource(picturePath);\n    }\n}\n```", "```java\npackage masterSpringMvc.profile;\n\nimport masterSpringMvc.config.PictureUploadProperties;\nimport org.apache.tomcat.util.http.fileupload.IOUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.MessageSource;\nimport org.springframework.core.io.FileSystemResource;\nimport org.springframework.core.io.Resource;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.multipart.MultipartFile;\nimport org.springframework.web.servlet.ModelAndView;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\n\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.*;\nimport java.net.URLConnection;\nimport java.util.Locale;\n\n@Controller\npublic class PictureUploadController {\n    private final Resource picturesDir;\n    private final Resource anonymousPicture;\n    private final MessageSource messageSource;\n    private final UserProfileSession userProfileSession;\n\n    @Autowired\n    public PictureUploadController(PictureUploadProperties uploadProperties,\n                                   MessageSource messageSource,\n                                   UserProfileSession userProfileSession) {\n        picturesDir = uploadProperties.getUploadPath();\n        anonymousPicture = uploadProperties.getAnonymousPicture();\n        this.messageSource = messageSource;\n        this.userProfileSession = userProfileSession;\n    }\n\n    @RequestMapping(value = \"/uploadedPicture\")\n    public void getUploadedPicture(HttpServletResponse response) throws IOException {\n        Resource picturePath = userProfileSession.getPicturePath();\n        if (picturePath == null) {\n            picturePath = anonymousPicture;\n        }\n        response.setHeader(\"Content-Type\", URLConnection.guessContentTypeFromName(picturePath.getFilename()));\n        IOUtils.copy(picturePath.getInputStream(), response.getOutputStream());\n    }\n\n    @RequestMapping(value = \"/profile\", params = {\"upload\"}, method = RequestMethod.POST)\n    public String onUpload(@RequestParam MultipartFile file, RedirectAttributes redirectAttrs) throws IOException {\n\n        if (file.isEmpty() || !isImage(file)) {\n            redirectAttrs.addFlashAttribute(\"error\", \"Incorrect file. Please upload a picture.\");\n            return \"redirect:/profile\";\n        }\n\n        Resource picturePath = copyFileToPictures(file);\n        userProfileSession.setPicturePath(picturePath);\n\n        return \"redirect:profile\";\n    }\n\n    private Resource copyFileToPictures(MultipartFile file) throws IOException {\n        String fileExtension = getFileExtension(file.getOriginalFilename());\n        File tempFile = File.createTempFile(\"pic\", fileExtension, picturesDir.getFile());\n        try (InputStream in = file.getInputStream();\n             OutputStream out = new FileOutputStream(tempFile)) {\n\n            IOUtils.copy(in, out);\n        }\n        return new FileSystemResource(tempFile);\n    }\n\n    @ExceptionHandler(IOException.class)\n    public ModelAndView handleIOException(Locale locale) {\n        ModelAndView modelAndView = new ModelAndView(\"profile/profilePage\");\n        modelAndView.addObject(\"error\", messageSource.getMessage(\"upload.io.exception\", null, locale));\n        modelAndView.addObject(\"profileForm\", userProfileSession.toForm());\n        return modelAndView;\n    }\n\n    @RequestMapping(\"uploadError\")\n    public ModelAndView onUploadError(Locale locale) {\n        ModelAndView modelAndView = new ModelAndView(\"profile/profilePage\");\n        modelAndView.addObject(\"error\", messageSource.getMessage(\"upload.file.too.big\", null, locale));\n        modelAndView.addObject(\"profileForm\", userProfileSession.toForm());\n        return modelAndView;\n    }\n\n    private boolean isImage(MultipartFile file) {\n        return file.getContentType().startsWith(\"image\");\n    }\n\n    private static String getFileExtension(String name) {\n        return name.substring(name.lastIndexOf(\".\"));\n    }\n}\n```", "```java\n@RequestMapping(value = \"/profile\", params = {\"save\"}, method = RequestMethod.POST)\npublic String saveProfile(@Valid ProfileForm profileForm, BindingResult bindingResult) {\n    if (bindingResult.hasErrors()) {\n        return \"profile/profilePage\";\n    }\n    userProfileSession.saveForm(profileForm);\n    return \"redirect:/search/mixed;keywords=\" + String.join(\",\", profileForm.getTastes());\n}\n```", "```java\npackage masterSpringMvc.controller;\n\nimport masterSpringMvc.profile.UserProfileSession;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\nimport java.util.List;\n\n@Controller\npublic class HomeController {\n    private UserProfileSession userProfileSession;\n\n    @Autowired\n    public HomeController(UserProfileSession userProfileSession) {\n        this.userProfileSession = userProfileSession;\n    }\n\n    @RequestMapping(\"/\")\n    public String home() {\n        List<String> tastes = userProfileSession.getTastes();\n        if (tastes.isEmpty()) {\n            return \"redirect:/profile\";\n        }\n        return \"redirect:/search/mixed;keywords=\" + String.join(\",\", tastes);\n    }\n}\n```"]