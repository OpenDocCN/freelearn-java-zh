- en: Chapter 12. Using Aspect-oriented Programming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Spring AOP aspect class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Measuring the execution time of methods using an around advice
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging method arguments using a before advice
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging methods' return values using an after-returning advice
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging exceptions using an after-throwing advice
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using an after advice to clean up resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making a class implement an interface at runtime using an introduction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting the execution order of the aspects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Aspect-oriented programming** (**AOP**) is about inserting and executing,
    at runtime, extra pieces of code at various points of the normal execution flow
    of a program. In AOP terminology, these pieces of code are methods that are called
    **advices** and the classes containing them are called **aspects**. AOP is complementary
    to object-oriented programming.'
  prefs: []
  type: TYPE_NORMAL
- en: This chapter is about the Spring AOP framework, which enables us to execute
    advices before and after methods of Spring beans (controller methods, service
    methods, and so on). For more extensive AOP functionality, **AspectJ** is the
    reference Java AOP framework and gets integrated seamlessly with Spring. However,
    it's more complex to use and requires a customized compilation process.
  prefs: []
  type: TYPE_NORMAL
- en: In the first recipe, we will create an aspect class and configure Spring to
    use it. We will use this aspect class in the following recipes, where we will
    go through the different types of advice offered by Spring AOP, using practical
    use cases.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Spring AOP aspect class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will create an aspect class and configure Spring to use it.
    We will use this aspect class and its configuration code in the following recipes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps for creating an aspect class:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the the AspectJ Weaver Maven dependency in `pom.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a Java package for the aspects of your application. For example, `com.springcookbook.aspect`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In your aspects package, create a class annotated with `@Component` and `@Aspect`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the Spring configuration, add `@EnableAspectJAutoProxy` and your aspects
    package to `@ComponentScan`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The AspectJ Weaver Maven dependency provides aspect annotations, so we can use
    regular Java classes to define aspects.
  prefs: []
  type: TYPE_NORMAL
- en: In the aspect class, `@Aspect` declares the class as an aspect. `@Component`
    allows it to be detected by Spring and instantiated as a bean.
  prefs: []
  type: TYPE_NORMAL
- en: In the Spring configuration, we included our aspect package in `@ComponentScan`,
    so the `@Component` classes in that package will be detected and instantiated
    as beans by Spring. `@EnableAspectJAutoProxy` in the Spring configuration will
    make Spring actually use the aspects and execute their advices.
  prefs: []
  type: TYPE_NORMAL
- en: Measuring the execution time of methods using an around advice
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An **around advice** is the most powerful type of advice; it can completely
    replace the target method by some different code. In this recipe, we will use
    it only to execute some extra code before and after the target method. With the
    before code, we will get the current time. With the after code, we will get the
    current time again, and will compare it to the previous time to calculate the
    total time the target method took to execute. Our target methods will be the controller
    methods of the controller classes in the controller package.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use the aspect class defined in the previous recipe, *Creating a Spring
    AOP aspect class*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps for measuring the execution time of controller methods:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the aspect class, create an advice method annotated with `@Around` and take
    `ProceedingJoinPoint` as an argument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In that advice method, measure the execution time of the target method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Log that execution time preceded by the target method name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Return the return value of the target method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To test the advice, you can use a controller method that takes a long time
    on purpose:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Test whether it''s working. When going to `/user_list` in your browser, you
    should see this in your server log:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `@Around` annotation preceding the advice method is a pointcut expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'A pointcut expression determines the target methods (the methods to which the
    advice will be applied). It works like a regular expression. Here, it matches
    all controller methods. In detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '`execution()` means we are targeting a method execution'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first asterisk means *any return type*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second asterisk means *any class* (from the `com.spring_cookbook.controllers`
    package)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third asterisk means *any method*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`(..)` means *any number of method arguments of any type*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `joinPoint.proceed()` instruction executes the target method. Skipping this
    will skip the execution of the target method. A **join point** is another AOP
    term. It's a moment in the execution flow of the program where an advice can be
    executed. With Spring AOP, a join point always designates a target method. To
    summarize, an advice method is applied at different join points, which are identified
    by a pointcut expression.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also use the `joinPoint` object to get the name of the current target method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Logging method arguments using a before advice
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **before advice** executes some extra code before the execution of the target
    method. In this recipe, we will log the arguments of the target method.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use the aspect class defined in the *Creating a Spring AOP aspect class*
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps for logging the methods'' arguments using a before advice:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In your aspect class, create an advice method annotated with `@Before` and
    take `JoinPoint` as an argument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In that method, get the list of arguments of the target method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Log the list of arguments preceded by the target method name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Test the advice using a controller method with arguments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check whether it''s working. When going to `/user_list` in your browser, you
    should see this in your server log:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `@Before` annotation preceding the advice method is a pointcut expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Refer to the *Measuring the execution time of methods using an around advice*
    recipe for more details.
  prefs: []
  type: TYPE_NORMAL
- en: The `joinPoint.getArgs()` instruction retrieves the argument's values of the
    target method.
  prefs: []
  type: TYPE_NORMAL
- en: Logging methods' return values using an after-returning advice
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An **after-returning advice** executes some extra code after the successful
    execution of the target method. In this recipe, we will log the return value of
    the target method.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use the aspect class defined in the *Creating a Spring AOP aspect class*
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps for logging the return value of methods using an after-returning
    advice:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In your aspect class, create an advice method annotated with `@AfterReturning`.
    Make it take a `JoinPoint` object and the return value of the target method as
    arguments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In that advice method, log the return value preceded by the target method name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Test the advice using a controller method that returns a value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check whether it''s working. When going to `/user_list` in your browser, you
    should see the following in your server log:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `@AfterReturning` annotation preceding the advice method is a pointcut
    expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Refer to the *Measuring the execution time of methods using an around advice*
    recipe for more details. The `returning` attribute is the name of the argument
    of the advice method to be used for the return value.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that if an exception is thrown during the execution of the target method,
    the after-returning advice won't be executed.
  prefs: []
  type: TYPE_NORMAL
- en: Logging exceptions using an after-throwing advice
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An **after-throwing advice** executes some extra code when an exception is thrown
    during the execution of the target method. In this recipe, we will just log the
    exception.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use the aspect class defined in the *Creating a Spring AOP aspect class*
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps for logging an exception using an after-throwing advice:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In your aspect class, create an advice method annotated with `@AfterThrowing`.
    Make it take a `JoinPoint` object and an `Exception` object as arguments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In that advice method, log the exception preceded by the target method name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Test the advice using a controller method throwing an exception:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check whether it''s working. When going to `/user_list` in your browser, you
    should see the following in your server log:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `@AfterThrowing` annotation preceding the advice method is a pointcut expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Refer to the *Measuring the execution time of methods using an around advice*
    recipe for more details. The `throwing` attribute is the name of the argument
    of the advice method to be used for the exception object thrown by the target
    method.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that if no exception is thrown during the execution of the target method,
    the after-throwing advice won't be executed.
  prefs: []
  type: TYPE_NORMAL
- en: Using an after advice to clean up resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An **after advice** executes some extra code after the execution of the target
    method, even if an exception is thrown during its execution. Use this advice to
    clean up resources by removing a temporary file or closing a database connection.
    In this recipe, we will just log the target method name.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use the aspect class defined in the *Creating a Spring AOP aspect class*
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps for using an after advice:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In your aspect class, create an advice method annotated with `@After`. Make
    it take `JoinPoint` as an argument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In that advice method, log the target method name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Test the advice using two controller methods: one executes normally and the
    other one throws an exception:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check whether it''s working. When going to `/user_list` or `/user_list2` in
    your browser, you should see this in your server log:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `@After` annotation preceding the advice method is a pointcut expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Refer to the *Measuring the execution time of methods using an around advice*
    recipe for more details.
  prefs: []
  type: TYPE_NORMAL
- en: Making a class implement an interface at runtime using an introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An **introduction** allows us to make a Java class (we will refer to it as the
    *target class*) implement an interface at runtime. With Spring AOP, introductions
    can be applied only to Spring beans (controllers, services, and so on). In this
    recipe, we will create an interface, its implementation, and make a Spring controller
    implement that interface at runtime using that implementation. To check whether
    it's working, we will also add a before advice to the controller method to execute
    a method from the interface implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use the aspect class defined in the *Creating a Spring AOP aspect class*
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps for using an introduction:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `Logging` interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an implementation class for it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In your aspect class, add a `Logging` attribute annotated with `@DeclareParents`.
    Add the implementation class to `@DeclareParents`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add an advice method annotated with `@Before`. Make it take a `Logging` object
    as an argument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the advice method, use the `Logging` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Test whether it''s working with a standard controller method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check whether it''s working. When going to `/user_list` in your browser, you
    should see the following in your server log:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the aspect class, the `@DeclareParents` annotation preceding the Logging
    attribute is a pointcut expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'This pointcut expression and the `Logging` attribute define that:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The introduction will be applied to all controller classes: `com.spring_cookbook.controllers.*+`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The introduction will make these controller classes implement the Logging interface:
    `public static Logging mixin;`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The introduction will make these controller classes use `LoggingConsole` as
    implementation of the Logging interface: `defaultImpl = LoggingConsole.class`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The before advice works the same way as in the *Measuring the execution time
    of methods using an around advice* recipe. It only takes one extra condition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: This means that the advice will be applied only to objects that implement the
    Logging interface.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the execution order of the aspects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When using several aspect classes, it can be necessary to set the order in which
    the aspects are executed. In this recipe, we will use two aspect classes with
    before advices targeting controller methods.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use the configuration from the *Creating a Spring AOP aspect class*
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use these two aspect classes containing an advice, which logs some
    text when it''s executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to set the execution order of the two aspect classes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add `@Order` with a number as parameter to the first aspect:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add `@Order` with another number as parameter to the second aspect:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Test whether it''s working. When going to `/user_list` in your browser, you
    should see this in your server log:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Switch the `@Order` numbers and check whether the execution order is changed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The aspects are executed in the ascending order set by `@Order`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's not possible to set an order between advice methods of the same aspect
    class. If it becomes necessary, create new aspect classes for those advices.
  prefs: []
  type: TYPE_NORMAL
