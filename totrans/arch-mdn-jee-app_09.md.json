["```java\n@Stateless\npublic class CarManufacturer {\n\n    @Inject\n    CarFactory carFactory;\n\n    @Inject\n    Event<CarCreated> carCreated;\n\n    @PersistenceContext\n    EntityManager entityManager;\n\n    public Car manufactureCar(Specification spec) {\n        Car car = carFactory.createCar(spec);\n        entityManager.merge(car);\n        carCreated.fire(new CarCreated(spec));\n        return car;\n    }\n\n}\n```", "```java\nimport javax.enterprise.event.TransactionPhase;\n\n@ApplicationScoped\npublic class ManufacturingStatistics {\n\n    public void carCreated(@Observes(during =\n TransactionPhase.AFTER_SUCCESS) Specification spec) {\n        // gather statistics about car creation with \n        // provided specification\n        // e.g. increase counters\n    }\n}\n```", "```java\nimport io.prometheus.client.Counter;\n\n@ApplicationScoped\npublic class ManufacturingStatistics {\n\n    private Counter createdCars;\n\n    @PostConstruct\n    private void initMetrics() {\n        createdCars = Counter.build(\"cars_manufactured_total\",\n \"Total number of manufactured cars\")\n                .labelNames(\"color\", \"engine\")\n                .register();\n    }\n\n    public void carCreated(@Observes(during =\n            TransactionPhase.AFTER_SUCCESS) Specification spec) {\n\n        createdCars.labels(spec.getColor().name(),\n spec.getEngine().name()).inc();\n    }\n\n}\n```", "```java\n...\ncars_manufactured_total{color=\"RED\", engine=\"DIESEL\"} 4.0\ncars_manufactured_total{color=\"BLACK\", engine=\"DIESEL\"} 1.0\n```", "```java\nimport javax.servlet.*;\nimport javax.servlet.annotation.WebFilter;\nimport javax.servlet.http.HttpServletRequest;\n\n@WebFilter(urlPatterns = \"/*\")\npublic class MetricsCollectorFilter implements Filter {\n\n    private Histogram requestDuration;\n\n    @Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n        requestDuration = Histogram.build(\"request_duration_seconds\",\n \"Duration of HTTP requests in seconds\")\n                .buckets(0.1, 0.4, 1.0)\n                .labelNames(\"request_uri\")\n                .register();\n    }\n\n    public void doFilter(ServletRequest req, ServletResponse res,\n FilterChain chain) throws IOException, ServletException {\n        if (!(req instanceof HttpServletRequest)) {\n            chain.doFilter(req, res);\n            return;\n        }\n\n        String url = ((HttpServletRequest) req).getRequestURI();\n        try (Histogram.Timer ignored = requestDuration\n .labels(url).startTimer()) {\n            chain.doFilter(req, res);\n        }\n    }\n\n    @Override\n    public void destroy() {\n        // nothing to do\n    }\n}\n```", "```java\npublic class LoggerExposer {\n\n    @Produces\n    public Consumer<Throwable> fatalErrorConsumer() {\n        return Throwable::printStackTrace;\n    }\n}\n```", "```java\npublic class ErrorLogger {\n\n    public void fatal(Throwable throwable) {\n        throwable.printStackTrace();\n    }\n}\n```", "```java\nimport io.opentracing.ActiveSpan;\nimport io.opentracing.Tracer;\n\n@Stateless\npublic class CarManufacturer {\n\n    @Inject\n    Tracer tracer;\n\n    public Car manufactureCar(Specification spec) {\n        try (ActiveSpan span = tracer.buildSpan(\"createCar\")\n                .withTag(\"color\", spec.getColor().name())\n                .withTag(\"engine\", spec.getEngine().name())\n                .startActive()) {\n\n            // perform business logic\n\n            span.log(\"Car successfully created\");\n        }\n    }\n}\n```", "```java\n@Stateless\npublic class CarManufacturer {\n\n    ...\n\n    @Traced(operation = \"createCar\")\n    public Car manufactureCar(Specification spec) {\n        // perform business logic\n    }\n}\n```"]