["```java\npublic class FinancialData {\n    private double amountBorrowed;\n    private double annualRate;\n    private double term;\n    private double monthlyPayment;\n    public FinancialData(double amountBorrowed,\n            double annualRate,\n            double term) {\n        this.amountBorrowed = amountBorrowed;\n        this.annualRate = annualRate;\n        this.term = term;\n        this.monthlyPayment = 0.0;\n    }\n    public FinancialData() {\n        this(0.0, 0.0, 0.0);\n    }\n    public double getAnnualRate() {\n        return annualRate;\n    }\n    public void setAnnualRate(double annualRate) {\n        this.annualRate = annualRate;\n    }\n// There are setters and getters for\n// the other three fields.\n```", "```java\n    @Override\n    public String toString() {\n            return \"FinancialData{\" + \"amountBorrowed=\" +\n            amountBorrowed + \", annualRate=\" +\n            annualRate + \", term=\" + term +\n            \", monthlyPayment=\" + monthlyPayment + '}';\n    }\n```", "```java\npublic class Calculation {\n    public void loanCalculator(FinancialData data) {\n        // Convert APR to monthly rate because payments are\n        // monthly\n        var monthlyRate = data.getAnnualRate() / 12.0;\n        // (1+rate)\n        var temp = 1.0 + monthlyRate;\n        // (1+rate)^term\n        temp = Math.pow(temp, -data.getTerm());\n        // 1 - (1+rate)^-term\n        temp = 1 - temp;\n        // rate / (1 - (1+rate)^-term)\n        temp = monthlyRate / temp;\n        // pv * (rate / 1 - (1+rate)^-term)\n        temp = data.getAmountBorrowed() * temp;\n        data.setMonthlyPayment(Math.abs(temp));\n    }\n}\n```", "```java\npublic class FinancialData {\n    private BigDecimal amountBorrowed;\n    private BigDecimal annualRate;\n    private BigDecimal term;\n    private BigDecimal monthlyPayment;\n    public FinancialData(BigDecimal amountBorrowed,\n            BigDecimal annualRate,\n            BigDecimal term) {\n        this.amountBorrowed = amountBorrowed;\n        this.annualRate = annualRate;\n        this.term = term;.\n```", "```java\n        this.monthlyPayment = BigDecimal.ZERO;\n    }\n```", "```java\n    public FinancialData() {\n        this(BigDecimal.ZERO, BigDecimal.ZERO,\n             BigDecimal.ZERO);\n    }\n    public BigDecimal getAnnualRate() {\n        return annualRate;\n    }\n    public void setAnnualRate(BigDecimal annualRate) {\n        this.annualRate = annualRate;\n    }\n// There are setters and getters for the other three\n// fields along with a toString method.\n```", "```java\npublic class Calculation {\n    public void loanCalculation(FinancialData data)\n                 throws ArithmeticException {\n        var monthlyRate = data.getAnnualRate().\n                      divide(new BigDecimal(\"12\"),\n                      MathContext.DECIMAL64);\n        // (1+rate)\n        var temp = BigDecimal.ONE.add(monthlyRate);\n        // (1+rate)^term\n        temp = temp.pow(data.getTerm().intValueExact());\n        // BigDecimal pow does not support negative\n        // exponents so divide 1 by the result\n```", "```java\n        temp = BigDecimal.ONE.divide(\n                   temp, MathContext.DECIMAL64);\n        // 1 - (1+rate)^-term\n        temp = BigDecimal.ONE.subtract(temp);\n        // rate / (1 - (1+rate)^-term)\n        temp = monthlyRate.divide(\n                   temp, MathContext.DECIMAL64);\n        // pv * (rate / 1 - (1+rate)^-term)\n        temp = data.getAmountBorrowed().multiply(temp);\n```", "```java\n        temp = temp.setScale(2, RoundingMode.HALF_EVEN);\n```", "```java\n        data.setMonthlyPayment(temp.abs());\n    }\n}\n```", "```java\n    public static void main(String[] args) {\n        var data = new FinancialData(\n               new BigDecimal(\"5000.0\"),\n               new BigDecimal(\"0.05\"),\n               new BigDecimal(\"60.0\"));\n        new Calculation().loanCalculation(data);\n```", "```java\n        if (data.getMonthlyPayment().equals(\n                 new BigDecimal(\"94.36\"))) {\n            System.out.printf(\"Test passed%n\");\n        } else {\n            System.out.printf(\"Test failed: %.2f %s%n\",\n                   data.getMonthlyPayment(), \"94.36\");\n        }\n    }\n```", "```java\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.junit</groupId>\n                <artifactId>junit-bom</artifactId>\n                <version>5.9.1</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n```", "```java\n    <dependency>\n        <groupId>org.junit.jupiter</groupId>\n        <artifactId>junit-jupiter</artifactId>\n        <scope>test</scope>\n    </dependency>\n```", "```java\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>\n                      maven-surefire-plugin\n                </artifactId>\n                <version>2.22.2</version>\n            </plugin>\n```", "```java\n<defaultGoal>test</defaultGoal>\n```", "```java\npackage com.kenfogel.calculationtest;\n```", "```java\nimport\n  com.kenfogel.loanbigdecimalunittest.business.Calculation;\nimport\n  com.kenfogel.loanbigdecimalunittest.data.FinancialData;\n```", "```java\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n```", "```java\nimport\n  static org.junit.jupiter.api.Assertions.assertEquals;\n```", "```java\nimport java.math.BigDecimal;\npublic class SimpleTest {\n    private Calculation calc;\n    private FinancialData data;\n```", "```java\n    @BeforeEach\n    public void init() {\n        calc = new Calculation();\n        data = new FinancialData();\n    }\n```", "```java\n    @Test\n    public void knownValueLoanCalculationTest () {\n        data.setAmountBorrowed(new BigDecimal(\"5000\"));\n        data.setAnnualRate(new BigDecimal(\"0.05\"));\n        data.setTerm(new BigDecimal(\"60\"));\n        calc.loanCalculation(data);\n        assertEquals(new BigDecimal(\"94.36\"),\n            data.getMonthlyPayment());\n    }\n}\n```", "```java\nimport static\n     org.junit.jupiter.api.Assertions.assertThrowsExactly;\n```", "```java\n    @Test\n    public void knownValueLoanExceptionTest() {\n        data.setAmountBorrowed(new BigDecimal(\"5000\"));\n        data.setAnnualRate(new BigDecimal(\"0.05\"));\n        data.setTerm(new BigDecimal(\"0\"));\n```", "```java\n        ArithmeticException ex =\n            assertThrowsExactly(ArithmeticException.class,\n            () -> {calc.loanCalculation(data);});\n        assertEquals(\"Division by zero\", ex.getMessage());\n    }\n```", "```java\npublic class ParameterizedTests {\n    private Calculation calc;\n    private FinancialData data;\n```", "```java\n    @BeforeEach\n    public void init() {\n        calc = new Calculation();\n    }\n```", "```java\n    @ParameterizedTest\n    @CsvSource({\n        \"5000, 0.05, 60, 94.36\",\n        \"3000, 0.05, 24, 131.61\",\n        \"20000, 0.05, 72, 322.10\"\n    })\n```", "```java\n    public void knownValueLoanCalculationTest_param (\n                     ArgumentsAccessor args) {\n```", "```java\n        data = buildBean(args);\n        calc.loanCalculation(data);\n```", "```java\n        assertEquals(new BigDecimal(args.getString(3)),\n                      data.getMonthlyPayment());\n    }\n```", "```java\n   private FinancialData buildBean(ArgumentsAccessor args){\n      return\n       new FinancialData(new BigDecimal(args.getString(0)),\n                        new BigDecimal(args.getString(1)),\n                        new BigDecimal(args.getString(2)));\n    }\n}\n```"]