- en: Chapter 7. Node Failure and Post-Mortem Analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, we learned how to troubleshoot common performance
    and reliability issues that come up when using Elasticsearch using case studies
    with real-world examples. This chapter explores some common causes of node and
    cluster failures. Specific topics covered are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: How to determine the root cause of a failure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to take corrective action for node failures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Case studies with real-world examples of diagnosing system failures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Diagnosing problems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Elasticsearch node failures can manifest in many different ways. Some of the
    symptoms of node failures are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: A node crashes during heavy data indexing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Elasticsearch process stops running for an unknown reason
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A cluster won't recover from a yellow or red state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query requests time out
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Index requests time out
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When a node in your cluster experiences problems such as these, it can be tempting
    to just restart Elasticsearch or the node itself and move on like nothing happened.
    However, without addressing the underlying issue, the problem is likely to resurface
    in the future. If you encounter scenarios such as the ones just listed, check
    the health of your cluster in the following manner:'
  prefs: []
  type: TYPE_NORMAL
- en: Check the cluster health with Elasticsearch-head or Kopf
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check the historical health with Marvel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check for Nagios alerts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check Elasticsearch log files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check system log files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check the system health using command-line tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These steps will help diagnose the root cause of problems in your cluster.
    In this section, we''ll look at some underlying causes that lead to node failure,
    including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Out-of-memory errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not enough system memory available
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resource contention
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running out of disk space
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OutOfMemoryError exceptions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If a node throws an `OutOfMemoryError`, the immediate fix is to restart it.
    However, it''s not always obvious when or why a node encounters this error. Symptoms
    include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Shard failures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Search query failures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Indexing failures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Often, there will be no immediate symptoms at all. Unfortunately, checking Elasticsearch-head,
    Marvel, and Bigdesk won't tell you outright that an `OutOfMemoryError` exception
    has occurred, but they can give us some warning signs that one *may* have occurred.
    To be sure that an `OutOfMemoryError` exception has occurred, check the Elasticsearch
    logs.
  prefs: []
  type: TYPE_NORMAL
- en: Shard failures
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One sign that an `OutOfMemoryError` exception has occurred is the appearance
    of shard failures in query responses. This response indicates shard failures in
    the `_shards.failed` key, and it describes the failure in `_shards.failures`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example query shows what a shard failure looks like in a query
    response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note that even though a shard failed in this query, it still returned results.
    However, because there are three total shards and only two returned data successfully,
    the query results are not representative of all data in the index.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sometimes, if the cluster is in a red state, for example, the `_shards` object
    will indicate fewer successful shards than the total available shards but won''t
    report an error. Take a look a the following code where `_shards.successful` is
    less than `_shards.total`, but `_shards.failed` is set to `0`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In both of these cases, the `hits.total` value is only representative of approximately
    two thirds of our actual total data count.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we encounter shard failures or shards that don''t return data successfully,
    it''s a good idea to use Elasticsearch-head to check the state of our cluster.
    Elasticsearch-head may look something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Shard failures](img/B03798_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Shards relocating in Elasticsearch-head
  prefs: []
  type: TYPE_NORMAL
- en: In this screenshot, we can see that all shards are now available, but the cluster
    is still recovering and there aren't any shards assigned to `elasticsearch-node-01`.
    At this point, we may also notice that the cluster takes a very long time to return
    to a green state, or possibly never returns to a green state. This problem may
    be due to a node that is out of heap space failing to relocate one of its shards
    to another node with more memory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, open Elasticsearch-kopf to get a more detailed view of our nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Shard failures](img/B03798_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Shards relocating in Elasticsearch-kopf
  prefs: []
  type: TYPE_NORMAL
- en: 'In Elasticsearch-kopf, we see high heap usage on `elasticsearch-node-01` and
    `elasticsearch-node-02`, which is a good indicator that an `OutOfMemoryError`
    exception has occurred. Checking the logs, we confirm that an `OutOfMemoryError`
    was thrown on `elasticsearch-node-01`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Shard failures](img/B03798_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Examining the Elasticsearch logs shows an OutOfMemoryError
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, we see several other Exceptions recorded in the log file that
    start appearing after the `OutOfMemoryError`, like in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Shard failures](img/B03798_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Additional errors in the Elasticsearch log related to OutOfMemoryError
  prefs: []
  type: TYPE_NORMAL
- en: 'Continuing to examine the log file, we see an error indicating shard failure
    due to the node running out of memory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Shard failures](img/B03798_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Shard failure errors in the Elasticsearch log
  prefs: []
  type: TYPE_NORMAL
- en: Slow queries
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Slow queries are another sign that an `OutOfMemoryError` has occurred. In the
    previous example, checking the slow-log file with the Unix `less` command on `elasticsearch-node-02`
    shows the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![Slow queries](img/B03798_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Slow queries may indicate that an error has occurred
  prefs: []
  type: TYPE_NORMAL
- en: 'Checking the Elasticsearch log on `elasticsearch-node-02`, we can verify that
    an `OutOfMemoryError` was captured:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Slow queries](img/B03798_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Verifying that Elasticsearch threw an exception
  prefs: []
  type: TYPE_NORMAL
- en: Resolving OutOfMemoryError exceptions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As mentioned earlier, when you see an `OutOfMemoryError`, it''s best to restart
    the node to prevent further exceptions. However, this is only a temporary fix.
    It''s important to also fix the underlying issue that is causing the error. Refer
    to [Chapter 6](ch06.html "Chapter 6. Troubleshooting Performance and Reliability
    Issues"), *Troubleshooting Performance and Reliability Issues*, for more strategies
    about solving `OutOfMemoryError` exceptions. A few strategies are listed, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Limit the size of the field data cache
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enable circuit breakers for the field data cache
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adjust the size and frequency of bulk data inserts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reduce the number of total shards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that `ES_HEAP_SIZE` is properly set
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that there is enough physical memory available to the machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After seeing errors in the log, we can correlate their timestamps with Marvel
    to see what kind of activity was going on when the error occurred. For example,
    let''s suppose that we see the following `OutOfMemoryError`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Resolving OutOfMemoryError exceptions](img/B03798_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: An OutOfMemoryError exception occurred at 4/29/2016 15:26:39
  prefs: []
  type: TYPE_NORMAL
- en: 'We can check Marvel''s activity around the `4/29/2016 15:26:39` timeframe.
    In this case, we''ll set it from `2016-04-29 15:25:00` to `2016-04-29 15:27:30`,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Resolving OutOfMemoryError exceptions](img/B03798_07_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Change the date range in Marvel
  prefs: []
  type: TYPE_NORMAL
- en: 'Although we see no search activities taking place in the index at the time
    of the collapse, a modest **Indexing Rate** is followed by a drop-off in indexing
    activity:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Resolving OutOfMemoryError exceptions](img/B03798_07_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Investigating with Marvel
  prefs: []
  type: TYPE_NORMAL
- en: The drop-off probably occurred after the `OutOfMemoryError`, and a heavy indexing
    load may have caused the error.
  prefs: []
  type: TYPE_NORMAL
- en: As `OutOfMemoryError` exceptions may not occur very frequently, it can be difficult
    to know for sure whether applying the fixes that we implemented successfully resolved
    the issue. To ensure that the issue is completely solved, it's best to find a
    way to reliably recreate the error. Then, adjust Elasticsearch configuration settings
    and load until you don't see the issue any more. It's often possible to recreate
    the issue by standing up a simple single-node cluster with a similar configuration
    and load as a node in the primary cluster. In the previous example, we might try
    to verify that data bulk loading caused the exception by indexing documents at
    a similar rate into a single-node test cluster in a controlled environment.
  prefs: []
  type: TYPE_NORMAL
- en: Elasticsearch process crashes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If the Elasticsearch process unexpectedly stops running, it may be because
    the operating system killed it. In these cases, the Elasticsearch log file may
    not have any useful information about the error, and we instead have to check
    the `syslog`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This can happen if Elasticsearch tries to claim more system memory than the
    memory available, and this is often a result of an improperly set `ES_HEAP_SIZE`
    or resource contention with other processes. If your cluster experiences this
    issue and there are other memory-heavy processes running on the cluster, it may
    be a good idea to move these processes off the Elasticsearch cluster. To verify
    that Elasticsearch was forcibly stopped by the operating system, check the `syslog`
    file at `/var/log/syslog`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Elasticsearch process crashes](img/B03798_07_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Operating-system killed Elasticsearch process due to running out of memory
  prefs: []
  type: TYPE_NORMAL
- en: 'Take the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This line indicates that the operating system killed the Elasticsearch process.
    In this case, we won't see any corresponding log entries in the Elasticsearch
    log files.
  prefs: []
  type: TYPE_NORMAL
- en: Disk space
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When a node runs out of disk space, it will stay in the cluster and can still
    handle index and search requests, but it offloads its shards to other nodes in
    the cluster. As the cluster reallocates shards, queries may run slow or timeout.
    Once shards are reallocated to other nodes in the cluster, you'll likely see some
    performance degradation as the cluster is operating with one less data node.
  prefs: []
  type: TYPE_NORMAL
- en: A node running out of disk space can be dangerous if all nodes are configured
    with the same amount of space. If one node runs out of space, it's likely that
    other nodes in the cluster are running low on disk space too. Once the cluster
    finishes reallocating shards to other nodes in the cluster, it can cause these
    nodes to run out of space as well. This causes a chain reaction that ultimately
    results in the entire cluster going down.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can check whether a node is running low on disk space using Kopf or Marvel
    or by configuring a Nagios alert. Additionally, we''ll see an error in the Elasticsearch
    log related to low disk space, as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Disk space](img/B03798_07_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Kopf shows that `elasticsearch-node-01` is low on disk space
  prefs: []
  type: TYPE_NORMAL
- en: Resolving the issue
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Disk space issues can be grouped into two categories:'
  prefs: []
  type: TYPE_NORMAL
- en: Elasticsearch has too much data loaded into it and is filling up the disk.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Something other than Elasticsearch data is filling up the disk, for example,
    a large log file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To resolve the first category issues, one solution is to increase the node''s
    storage capacity by adding another drive or volume to the node and configuring
    Elasticsearch to use the space. For example, if we mount additional storage at
    `/data`, update the `elasticsearch.yml` configuration file to use it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Restart Elasticsearch on the node. The node will then distribute its data across
    the two data directories.
  prefs: []
  type: TYPE_NORMAL
- en: For the second category, if the cause is external to Elasticsearch, removing
    the offending files to clear up disk space will be enough to get Elasticsearch
    going again. There's no need to restart the node.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some additional measures we can take to reduce disk space usage are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Add additional nodes to the cluster.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decrease shard replication; for example, from two replicas to one replica.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that individual shards don't grow too big by breaking large indices into
    smaller indices. For example, instead of storing all Twitter data in one index,
    create a new index every month to store new data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enable data compression (refer to [Chapter 6](ch06.html "Chapter 6. Troubleshooting
    Performance and Reliability Issues"), *Troubleshooting Performance and Reliability
    Issues* ).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reviewing some case studies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section discusses some real-world scenarios of Elasticsearch node failure
    and how to address them.
  prefs: []
  type: TYPE_NORMAL
- en: The ES process quits unexpectedly
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A few weeks ago we noticed in Marvel that the Elasticsearch process was down
    on one of our nodes. We restarted Elasticsearch on this node, and everything seemed
    to return to normal. However, checking Marvel later on in the week, we notice
    that the node is down again. We decide to look at the Elasticsearch log files,
    but don''t notice any exceptions. As we don''t see anything in the Elasticsearch
    log, we suspect that the operating system may have killed Elasticsearch. Checking
    `syslog` at `/var/log/syslog`, we see the error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This verifies that the operating system killed Elasticsearch because the system
    was running out of memory. We check the Elasticsearch configuration and don''t
    see any issues. This node is configured in the same way as the other nodes in
    the cluster. Next, we check for resource contention with other processes by running
    the `top` command and get the following results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The ES process quits unexpectedly](img/B03798_07_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: top showing resource contention
  prefs: []
  type: TYPE_NORMAL
- en: It looks like a MySQL server is also running on this node and is taking up a
    lot of system memory. We suspect that resource contention with MySQL is probably
    what's causing the operating system to kill Elasticsearch. We are able to move
    the MySQL database to its own dedicated host, and after a few weeks with no more
    memory issues, we can conclude that this resolved the problem.
  prefs: []
  type: TYPE_NORMAL
- en: Query requests slow and timing out
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Users of our corporate Elasticsearch-backed web application have started reporting
    that the search functionality is slow and sometimes doesn''t return at all. We
    are able to verify this by running a few searches on the web application, and
    we decide to use Kopf to investigate the issue. In Kopf, we notice that the disk
    indicator is red for one of our nodes, `elasticsearch-node-01`, as seen in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Query requests slow and timing out](img/B03798_07_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Kopf shows that `elasticsearch-node-01` is low on disk space
  prefs: []
  type: TYPE_NORMAL
- en: The red **disk** indicator for `elasticsearch-node-01` means that we are low
    on disk space. Also, all of the node's shards have been reallocated to other nodes.
    Checking the log of `elasticsearch-node-01` at `/var/log/elasticsearch/my_elasticsearch_cluster.log`,
    we confirm that the disk is full by seeing the **no space left on device** message.
    We are able to resolve the issue by adding an additional hard drive to all nodes
    in the cluster and configuring Elasticsearch to use the new space in the `elasticsearch.yml`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: To prevent this issue in the future, we decide to install Nagios using the instructions
    found in [Chapter 5](ch05.html "Chapter 5. System Monitoring"), *System Monitoring*,
    in order to send out e-mail alerts the next time the disk space gets low.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter looked into how to diagnose node failures, determine the root
    cause of the problem, and apply corrective action. Some key things we learned
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: Many errors, from shard failures to slow query performance, are caused by `OutOfMemoryError`
    exceptions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running out of disk space on one node can cause other nodes to run out of disk
    space as well when shards are reallocated
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running Elasticsearch alongside other services that require a lot of memory
    can result in the operating system killing Elasticsearch to free up memory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next chapter will talk about Elasticsearch 5.0, the next major release of
    the platform, and it will give you an overview of the various new monitoring tools
    that will accompany the Elasticsearch 5.0 release.
  prefs: []
  type: TYPE_NORMAL
