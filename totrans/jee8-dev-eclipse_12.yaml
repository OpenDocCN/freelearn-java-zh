- en: Deploying JEE Applications in the Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last chapter, we learned how to develop JEE microservices and deploy
    them in Docker containers.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn how to deploy JEE applications in the cloud,
    specifically in **Amazon Web Services** (**AWS**) cloud and Google Cloud Platform,
    using Eclipse tools. The focus is going to be more on using Eclipse tools to deploy
    JEE applications in the cloud, rather than learning about a specific cloud platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Deploying the JEE application in an AWS EC2 instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying the REST web service in AWS Beanstalk
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying a Docker container in Google Compute Engine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying a RESTful web service in Google App Engine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying in the cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many advantages to deploying applications in the cloud, such as scaling
    the application as per its load, and all the benefits of not having to maintain
    your own data center or physical machines. Other than hosting the application
    and flexibility, most cloud platforms also provide services like a database, file
    storage, messaging, and so on, which can be easily integrated into your applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deployment services provided by cloud platforms can be broadly classified as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Infrastructure as a service (IaaS)**: In this service, you get **virtual
    machines** (**VMs**) with complete control. You can install any software on them
    and set up load balancing, storage, network, and security. It is like having your
    own data center in the cloud. Examples of IaaS are Amazon **Elastic Compute Cloud**
    (**EC2**) and Google Compute Engine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Platform as a service (PaaS)**: In this service, you get VMs with OS and
    server software installed. Services like load balancing, security, network, and
    so on are also pre-configured for you (or made very easy to configure). Therefore,
    you can focus on just application deployment. You can take, for example, a WAR
    file and deploy it directly in a PaaS. Examples of PaaS are Amazon Elastic Beanstalk
    and Google App Engine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Though an IaaS offers more flexibility, it is more difficult to configure than
    a PaaS.
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections, we will see how to deploy JEE applications in the
    aforementioned types of services in AWS and Google Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This book, and this chapter in particular, explains deployment for development
    and testing, and not production. Deployment for production is a vast and complex
    topic and requires many considerations like security, scaling, and so on, which
    are not in the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: You need to have accounts with cloud service providers you want to use in order
    to use the services. Depending on the services you use and the load on your servers,
    deployment to the cloud could cost you a lot of money. However, almost all cloud
    providers offer their services for free so that you can try them out for a limited
    period of time. To follow examples in this chapter, make sure you have accounts
    with AWS Cloud ([https://aws.amazon.com/](https://aws.amazon.com/)) and Google
    Cloud Platform ([https://cloud.google.com](https://cloud.google.com)).
  prefs: []
  type: TYPE_NORMAL
- en: Deploying in AWS Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will first create a user group and a user within it in AWS. When you set
    permissions on a user group, all users in that group also get the same permissions.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the user group and user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will perform the following steps to create a user group:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the AWS Management Console ([https://console.aws.amazon.com/](https://console.aws.amazon.com/))
    and log in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Services | IAM (Identity & Access Management) from the menu at the top.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Groups from the list on the left-hand side.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the Create New Group button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow the wizard to specify the group's name and attach the access policy.
    Let’s name the group `aws_eclipse_users`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Administrator Access policy for the group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will perform the following steps to create a user:'
  prefs: []
  type: TYPE_NORMAL
- en: Select Users from the list on the left-hand side and click the Add User button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s set the User Name as aws_eclipse_user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Access Type options, select the AWS Management Console access option.
    The Require password reset option can be turned off if you so desire.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the Next: Permission button and then select the group we created previously,
    which is aws_eclipse_users.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow the steps on the page to complete the workflow, which ultimately leads
    to you creating the user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, you should have the aws_eclipse_users group with Administrator Access and the aws_eclipse_user
    user in that group.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to create an access key for the user. Go to the page that lists
    all users (click Users from the list on the left-hand side of the page) and click
    on the user aws_eclipse_user. Click on the Security credentials tab and then click
    the Create access key button. It creates an access key and displays Access key
    ID and Secret access key. Save this information for future use. AWS gives you
    the option to download the CSV file containing this information.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Both Access Key ID and Secret Access Key are required to access AWS services
    from Eclipse. This is the only place AWS shows the Secret Access Key. If you lose
    this information, it is not possible to get it back later, so make sure that you
    save this information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will add a security group and specify inbound traffic rules for the
    same. In the AWS Management Console, go to Services | EC2 | Network & Security
    | Security Groups page. Click Create Security Group button. Enter Security group
    name as `eclipse-dev`. Enter any description (this is a mandatory field). Then
    create following inbound rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Type | Protocol | Port Range | Source |'
  prefs: []
  type: TYPE_TB
- en: '| SSH | TCP | 22 | Anywhere (*see the note following this table*) |'
  prefs: []
  type: TYPE_TB
- en: '| Custom TCP | TCP | 8080 | Anywhere |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: SSH inbound rule above will give access to your EC2 instance from any IP. If
    you want to limit access, do not select source as Anywhere, but set specific IPs,
    selecting Custom.
  prefs: []
  type: TYPE_NORMAL
- en: Because this chapter explains how to deploy JEE applications in xloud for development
    and testing, Source is selected as Anywhere (any IP).
  prefs: []
  type: TYPE_NORMAL
- en: The preceding security group will provide SSH access to any external IP on port
    22 and TCP access on port 8080.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the AWS Toolkit for Eclipse
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will learn how to install the AWS Toolkit plugin in Eclipse.
    Go to the Eclipse menu''s Help | Eclipse Marketplace.... Search for the `AWS Toolkit`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00242.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.1: Installing the AWS Toolkit for Eclipse'
  prefs: []
  type: TYPE_NORMAL
- en: Install the plugin. We will see many features of this plugin later in this chapter.
    Visit [http://docs.aws.amazon.com/toolkit-for-eclipse/v1/user-guide/welcome.html](http://docs.aws.amazon.com/toolkit-for-eclipse/v1/user-guide/welcome.html)
    for the complete documentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to configure the plugin with the Access Key ID and Secret Access Key
    we created in the previous section. Open Eclipse Preferences and go to AWS Toolkit
    preferences:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00243.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.2: Setting the Access Key ID and Secret Access Key AWS Toolkit preferences'
  prefs: []
  type: TYPE_NORMAL
- en: You can use the default profile or create a new profile. Enter the Access Key
    ID and Secret Access Key and click the Apply and Close button. This information
    will be used by the Eclipse plugin to access information about your configuration
    in AWS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the authentication is successful, you can access most of the information
    that you can on the AWS Console web page from within Eclipse. Switch to the AWS
    Management perspective (select Window | Perspective | Open Perspective or click
    the Open Perspective toolbar button in the upper-right corner):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00244.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.3: AWS Management perspective'
  prefs: []
  type: TYPE_NORMAL
- en: Expand the Amazon EC2 category in AWS Explorer and you will see options for
    viewing EC2 AMIs, EC2 Instances, and more. **Amazon Machine Image** (**AMI**)
    can be considered a template from which multiple VM instances can be created.
  prefs: []
  type: TYPE_NORMAL
- en: Launching the EC2 instance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let's create an EC2 instance from an AMI. If the EC2 AMI view is not already
    open in the AWS Management perspective in Eclipse, right-click on the AMIs node
    in AWS Explorer (see *Figure 13.3*) and select the Open EC2 AMIs view. This view
    could take a long time to load, because there are many AMIs available. We will
    select a Linux AMI that is available in the Free Tier (during your trial period).
    Unfortunately, it is not easy to search for this AMI in the Eclipse view because
    the view does not display or allow you to search AMIs based on their description.
    This means that you can’t search AMIs by typing `linux` into the search box. Surprisingly,
    the filter options for platforms in the view do not show the Linux option either,
    at least at the time of writing this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to create an instance from AMI ID `ami-f63b1193` (you can see
    a better view of the list of AMIs when creating a new instance from the AWS Console
    web page). Type `ami-f63b1193` in the search box and you should see one result
    displayed in the view. Right-click on the AMI and select the Launch option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00245.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.4: Launching an instance from AMI'
  prefs: []
  type: TYPE_NORMAL
- en: Select the appropriate Instance Type. For this example, we will select the General
    Purpose Burstable Micro type.
  prefs: []
  type: TYPE_NORMAL
- en: Select an Availability Zone. See [https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions)
    for a list of availability zones.
  prefs: []
  type: TYPE_NORMAL
- en: Next, select a Key Pair to connect to the instance from your host machine. If
    no key pairs are listed, click on the plus icon and add a new key pair. You just
    need to specify the name of the key and the location on your machine where it
    will be saved.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, select a security group for the new instance. We will select the eclipse-dev
    security group (the wizard does not let you finish unless you select a Security
    Group and Key Pair). Click Finish. The new instance will be added to the list
    of instances in the EC2 Instances view. Note the status of the instance. When
    you have just created the instance, the status will be Pending. This will change
    to Running once the instance is successfully launched. Right-click on the instance
    to see the available menu options on the instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00246.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.5: The Context menu in the EC2 Instances view'
  prefs: []
  type: TYPE_NORMAL
- en: 'To open a shell to execute OS commands, select the Open Shell option from the
    pop-up menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00247.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.6: An opened shell in an AWS instance'
  prefs: []
  type: TYPE_NORMAL
- en: We are going to use this option (Open Shell) to execute commands in our instance.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the CourseManagement EJB application in the EC2 instance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 7](part0129.html#3R0OI0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55), *Creating
    JEE Applications with EJB*, we developed an EJB application for `CourseManagement`.
    We will see how to deploy this application in the EC2 instance that we created
    in the previous section. We will need to install GlassFish 5 and MySQL server
    in the instance. Although you can install these servers on separate instances
    (which is recommended for a production setup), we are going to install both of
    them in the same instance so that we can reduce the number of steps for creating
    a new instance. Let’s start by installing the GlassFish 5 Server.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the GlassFish 5 Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At the time of writing this chapter, the Linux instance that''s been created
    by AWS is preinstalled with JDK 7\. However, we have been using JDK 8 in this
    book. Therefore, we will start by uninstalling JDK 7 and installing JDK 8\. Open
    a shell in the instance from Eclipse (see the previous sections for details) and
    run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Commands** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '| Removes JDK 7 from the instance. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '| Installs JDK 8. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '| Downloads GlassFish 5. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '| Unzips the downloaded GlassFish 5 ZIP file. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '| Changes the password of the server. Default installation comes with an admin
    user and no password set. We need to set a password for the remote admin of the
    server to work. Note that the user ID is admin and that the old password is empty
    (no password). Set a new password, for example, `admin`. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '| Starts the server. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '| Checks if the server is up. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '| Enables the remote admin of the GlassFish 5 Server.  See the note following
    this table. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '| Creates a service so that it is started when the VM instance starts. After
    you run the `asadmin` command, run the `create-service` command at `asadmin>`
    prompt. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '| Stops and starts the server so that the preceding changes take effect. |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Between writing this chapter and publishing of the book, the functionality
    to enable secure admin broke in GlassFish 5 if used with JDK version above 1.8.0.151\.
    Remote access to GlassFish 5 administration console fails with the following error
    (logged on `glassfish/domains/domain1logs/server.log`):'
  prefs: []
  type: TYPE_NORMAL
- en: '`java.lang.NoClassDefFoundError: sun/security/ssl/SupportedEllipticPointFormatsExtension`'
  prefs: []
  type: TYPE_NORMAL
- en: You can refer to the GlassFish 5 bug at [https://github.com/javaee/glassfish/issues/22407](https://github.com/javaee/glassfish/issues/22407).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to instruct AWS to allow TCP requests at port `4848` (for admin),
    `8080` (for access web applications), and `3306` (for remote connection to MySQL
    server) on this instance. We will do this by setting inbound rules on the security
    group on the instance. Recall that in the previous section we had selected the
    eclipse-dev security group. We need to set inbound rules on this group. Unfortunately,
    we can’t do this from the Eclipse plugin (at the time of writing this book). Login
    to AWS Console on the web and go to Services | EC2 and then to NETWORK & SECURITY
    | Security Groups. Right-click on the security group eclipse-user and select the Edit
    inbound rules option. Add rules to allow TCP traffic from the IP of your machine
    (from where you will remotely access the instance; you can use sites like [https://www.whatismyip.com/what-is-my-public-ip-address/](https://www.whatismyip.com/what-is-my-public-ip-address/)
    to find the real IP address of your machine):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00248.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.7: Setting inbound rules on the security group'
  prefs: []
  type: TYPE_NORMAL
- en: Note that if your machine receives a dynamic IP, then you will have to update
    it on the preceding page.
  prefs: []
  type: TYPE_NORMAL
- en: You can now browse to the admin site of GlassFish 5 on your instance—go to `https://<your-instance-public-address>:4848`.
    You can find the public address from Eclipse view EC2 Instances, or from the AWS
    Console online.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the MySQL server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As mentioned previously, we will install the MySQL server in the same EC2 instance.
    You can also use an RDS instance from AWS, which is what Amazon recommends for
    MySQL databases. RDS has many advantages, but to keep things short, we will install
    MySQL in the same VM instance. Make sure that a shell is open on the instance,
    as explained earlier, and execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Commands** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '| Installs MySQL |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '| Activates the MySQL service |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '| Starts the MySQL service |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '| Sets the password |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '| Creates `course_management` database |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '| Creates a new user |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '| Logs in to MySQL from the command line |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '| Execute this at `mysql>` prompt to create a new user called `eclipse-user`
    |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '| Grants privileges to the new user |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '| Exits the MySQL console |'
  prefs: []
  type: TYPE_TB
- en: You can now connect to this instance of the MySQL server from your host machine.
    But before you try to connect to the server, make sure that you have set an inbound
    rule on the EC2 instance to allow a connection from your machine (IP) on port
    `3306` (see *Figure 13.7*). You can then either connect from the Terminal (command
    line) or use MySQL Workbench (see [Chapter 1](part0008.html#7K4G0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55),
    *Introducing JEE and Eclipse*<q class="calibre207">,</q> for more information
    on installing MySQL Workbench). Use the public DNS name of the instance to connect.
  prefs: []
  type: TYPE_NORMAL
- en: Create tables in this database as described in [Chapter 4](part0073.html#25JP20-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55),
    *Creating JEE Database Applications*. Alternatively, use `course_management.sql`,
    which is in the `CourseManagementEAR` folder in the source code for this chapter,
    to import the tables. In MySQL Workbench, select the Server | Data Import menu.
    Select Import from Self-Contained File and enter the path to `course_management.sql`.
    Select course_management as the Default Target Schema. Select Dump Structure and
    Data. Then, click the Start Import button.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the datasource in the GlassFish 5 Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To configure our data source in the GlassFish 5 Server, we first need to download
    the MySQL JDBC driver. You can find a link to download the driver at [https://dev.mysql.com/downloads/connector/j/](https://dev.mysql.com/downloads/connector/j/).
    Execute the following commands in the shell that is open for our EC2 instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Commands** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '| Downloads the driver |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '| Unzips the file |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '| Copies the driver JAR file to a folder in the GlassFish Server classpath
    |'
  prefs: []
  type: TYPE_TB
- en: Restart the EC2 instance (this is necessary so that GlassFish 5 can load the
    MySQL JAR file). Then, follow the instructions in the *Configuring the datasource
    in Glassfish* section in [Chapter 7](part0129.html#3R0OI0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55), *Creating
    JEE Applications with EJB*. Make sure that you use the domain name of your EC2
    instance instead of localhost (specifically in Additional Properties when setting
    up the JDBC Connection Pool) when configuring the datasource. You can access the
    Admin console of GlassFish 5 by browsing to `https://<enter_domain_name_of_ec2_instance>:4848`.
  prefs: []
  type: TYPE_NORMAL
- en: Once you configure the connection pool and JDBC datasource in the GlassFish
    Admin console, deploy `CourseManagementMavenEAR-1.ear`. This is the same EAR file
    we created in [Chapter 7](part0129.html#3R0OI0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55),
    *Creating JEE Applications with EJB*, in the `CourseManagementMavenEAR` project
    (and dependent projects). For your convenience, the same EAR file is made available
    in the `CourseManagementEAR` folder in the source code for this chapter. In the
    Admin console, click Applications from the left-hand menu bar. Then, click the Deploy
    button. Select `CourseManagementMavenEAR-1.ear` from the `CourseManagementEAR`
    folder and deploy the application.
  prefs: []
  type: TYPE_NORMAL
- en: Once the application is deployed successfully, you should be able to browse
    to `http://<ec2_instance_domain_name>:8080/CourseManagementMavenWebApp/course.xhtml`
    and see a list of Courses (or an empty list if there is no data).
  prefs: []
  type: TYPE_NORMAL
- en: You can save the preceding setup as a template by creating an AMI and creating
    future instances based on that AMI. To create an AMI from a running instance,
    browse to the AWS Console and select the Services | EC2 option. Then, go to the
    running instances list. Right-click on the instance you want to create an image
    from and select Create Image.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the CourseManagmenet REST service using Elastic Beanstalk
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Elastic Beanstalk (EBS) is a PaaS (Platform as a Service) offering from AWS
    ([https://aws.amazon.com/elasticbeanstalk/](https://aws.amazon.com/elasticbeanstalk/)).
    The idea is that you focus mostly on developing your application and leave configuration
    of servers (including installation of required software), load balancing, log
    file management, and so on to the PaaS provider. However, you do not have as much
    control over the servers in Elastic Beanstalk as you would when provisioning your
    own EC2 instances.
  prefs: []
  type: TYPE_NORMAL
- en: EBS provides preconfigured hosting solutions for different platforms, including
    one for Java. It provides servers with Tomcat preconfigured. You simply upload
    your WAR file and the application is deployed. In this section, we will learn
    how to deploy a RESTful web service in EBS.
  prefs: []
  type: TYPE_NORMAL
- en: Recall that we developed the `CourseManagmenetREST` service in [Chapter 9](part0176.html#57R300-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55),
    *Creating Web Services*. We will deploy the same service using EBS in a Tomcat
    EBS platform. Make sure that you have created the WAR file for the `CourseManagmenetREST`
    project—import the project in Eclipse, if you haven't already done so, right-click
    on the project in Project Explorer, and select Run As | Maven Install. This will
    create the `CourseManagementREST-1.war` file in the `target` folder. We will deploy
    this WAR file using EBS in a Tomcat server.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Elastic Beanstalk application from Eclipse
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will first create a server for the EBS Tomcat platform in Eclipse. Go to
    the Servers view in Eclipse. In the default JEE perspective, this view is located
    in one of the tabs at the bottom, below editors. Right-click it and select New
    | Server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00249.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.8: Adding the Elastic Beanstalk server in Eclipse'
  prefs: []
  type: TYPE_NORMAL
- en: 'From the Amazon Web Services group, select AWS Elastic Beanstalk for Tomcat
    8, or whichever is the latest Tomcat configuration that''s available. Keep the
    other default options. Click Next:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00250.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.9: Configuring the EBS application and environment'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the option to Create a new application. Let’s name this application
    `CourseManagementREST` and the environment `CourseManagementREST-env`. Since we
    are deploying a web application, either select Single Instance Web Server Environment or
    Load Balanced Web Server Environment from the Type drop-down box. The third type,
    Worker Environment, is normally used for long-running batch applications. Click
    Next. At this point, the plugin may warn you that the IAM operation is not allowed.
    Click OK to proceed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00251.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.10: Selecting the instance profile and service role for the EBS application'
  prefs: []
  type: TYPE_NORMAL
- en: 'Keep the default values on the Permissions page and click Next:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00252.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.11: Selecting the key pair for EBS deployment'
  prefs: []
  type: TYPE_NORMAL
- en: Check the Deploy with a key pair option and select a key from the list. If no
    key pairs are listed, click on the plus icon and add a new key pair. You just
    need to specify the name of the key and the location on your machine where it
    will be saved. Click Next.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have already imported the `CourseManagementREST` project from [Chapter
    9](part0176.html#57R300-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55), *Creating Web Services*,
    in the Eclipse workspace, then it will appear as an application that is available
    to deploy. Click the Add button to move it to the Configured list:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00253.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.12: Adding the application to deploy in EBS'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click Finish. The EBS server we just added should appear in the Servers view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00254.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.13: Servers view with the EBS server added'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the Start button (or right-click on the server and select the Start option).
    Eclipse asks for the version label for your deployment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00255.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.14: Setting the version label for EBS deployment'
  prefs: []
  type: TYPE_NORMAL
- en: Set the label (or keep the default one) and click OK. Once the server is started
    (you can check the status in the Servers view—make sure that the status is Started),
    browse to `http://<your-ebs-app-domain>/services/course/get/1`. You should see
    the XML output with details of course ID 1.
  prefs: []
  type: TYPE_NORMAL
- en: 'To find the domain name of your EBS server, double-click on the server in the Servers
    view. This will display server properties in the editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00256.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.15: EBS server properties'
  prefs: []
  type: TYPE_NORMAL
- en: You can find the domain name in the Environment URL link. Click on the other
    tabs to see more information about the configuration of your server. Clicking
    on the Log tab shows your server log, which will be useful for troubleshooting
    problems.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to see EC2 instances created by AWS for your Beanstalk application,
    click on the Environment Resources tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00257.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.16: EC2 instances in EBS'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the instance row and select Open Shell. This can also be useful
    for troubleshooting the application. Note that any changes (like installing software)
    you make to the EC2 instance in EBS will be lost when a new version of the app
    is deployed.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see EBS applications and environments in AWS Explorer in Eclipse:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00258.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.17: Browsing EBS applications and environments in AWS Explorer'
  prefs: []
  type: TYPE_NORMAL
- en: 'Login to the AWS Console and go to Services | Elastic Beanstalk to see all
    your applications and environments, including ones created from Eclipse:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00259.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.18: EBS dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: If you have a WAR file to deploy/update, click the Upload and Deploy button
    and select the WAR file you want to deploy.
  prefs: []
  type: TYPE_NORMAL
- en: You can modify the configuration of your environment by clicking the Configuration
    link, which is just below the Dashboard. Options in the configuration page allow
    you to modify settings for instances, capacity, the load balancer, security settings,
    and more. If your application uses a database, then you can configure that too.
  prefs: []
  type: TYPE_NORMAL
- en: You can browse the application, `CourseManagementREST`, by opening `<environment
    url in fig 13.15>/services/course/get/1`.
  prefs: []
  type: TYPE_NORMAL
- en: For some reason if the application does not get deployed properly from Eclipse
    then redeploy the application from AWS Console by click on Upload and Deploy button
    in *Fig 13.18* and browse to the WAR file created in the `target` folder of the
    project (if the WAR file was not created, then right-click on the project and
    select Run As | Maven Install).
  prefs: []
  type: TYPE_NORMAL
- en: Elastic Beanstalk can significantly save time in deploying applications to the
    cloud. It requires a lot less setup and configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying in Google Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will see how to deploy JEE applications in Google Compute
    Engine (IaaS offering) and Google App Engine (PaaS offering). Compute Engine ([https://cloud.google.com/compute/](https://cloud.google.com/compute/))
    can be considered an AWS EC2 counterpart, and App Engine ([https://cloud.google.com/appengine](https://cloud.google.com/appengine)
    ) an Elastic Beanstalk counterpart. You need to have a Google account to login
    to Cloud Console at [https://console.cloud.google.com](https://console.cloud.google.com).
    You need to have at least one project created in Google Cloud to deploy applications.
    When you login to the Cloud Console, it will prompt you to create a project if
    there are no projects already available:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00260.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.19: Creating a Google Cloud project from the Dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: All you need to enter in the Create Project page is the name of the project.
    The Project ID will be automatically selected for you. You should keep this Project
    ID handy, because many SDK commands need a Project ID as one of their parameters.
  prefs: []
  type: TYPE_NORMAL
- en: If you already have projects, but want to create a new project for this book,
    open the Google Cloud Console web page and go to the IAM & admin | Manage resources
    page. Click the Create Project link on the page.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Google Cloud Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setting up Google Cloud Tools requires multiple steps. Let’s start with installing
    the SDK.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Google Cloud SDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Download the SDK from [https://cloud.google.com/sdk/](https://cloud.google.com/sdk/).
    Unzip it and run the following command from the `bin` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: See [https://cloud.google.com/sdk/docs/initializing](https://cloud.google.com/sdk/docs/initializing)
    for more options regarding initializing the SDK.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Java extensions for the App Engine SDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Run the following command (make sure that the Cloud SDK is installed and configured):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: See [https://cloud.google.com/sdk/docs/managing-components](https://cloud.google.com/sdk/docs/managing-components)
    for details on managing Google Cloud components.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, set the default project name for `gcloud` commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Installing Google Cloud Tools for Eclipse
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install the plugin for Google Cloud in Eclipse, open Eclipse Marketplace (select
    the menu Help | Eclipse Marketplace...). Search for Google Cloud Tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00261.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.20: Installing the Google Cloud Tools plugin from the Marketplace'
  prefs: []
  type: TYPE_NORMAL
- en: Setting Eclipse Preferences for Google Cloud Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open Eclipse Preferences and go to the Google Cloud Tools preferences:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00262.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.21: Setting the SDK path in Google Cloud Tools preferences'
  prefs: []
  type: TYPE_NORMAL
- en: Enter the path to the folder where you unzipped the SDK in the SDK location field.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying the application in Google Compute Engine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will create an instance of a VM in Google Compute Engine
    and deploy a JEE application in it. Once we create a VM, we can follow the same
    steps we did to install the GlassFish Server and the *Course Management* application
    in the EC2 instance in the preceding *Installing the CourseManagement EJB application
    in an EC2 instance* section. But let’s deploy a different application in the Compute
    Engine. In the last chapter, we saw how to deploy JEE applications in Docker containers.
    So, let’s install Docker in a VM in Compute Engine and deploy the `CourseManagement`
    service in it. But first, let’s create a VM. Unfortunately, at the time of writing
    this book, Google Cloud Tools for Eclipse does not provide much support for working
    with Compute Engine. Therefore, we will be using either the Google Cloud Console
    web page or Terminal on the host machine.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a VM instance in Google Compute Engine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Login to the Google Cloud Console ([https://console.cloud.google.com](https://console.cloud.google.com))
    and go to the Compute Engine | VM Instances page. Click the Create Instance link.
    Create an instance using Debian GNU/Linux boot disk. Make sure to select the Allow
    HTTP traffic and Allow HTTPS traffic options.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker in a VM instance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the VM instances page, select the instance you want to use and drop down
    the SSH options (in the Connect column in the table):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00263.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.22: Opening an SSH connection to a VM instance'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select Open in browser window. This option opens a browser window and opens
    a SSH shell in the VM instance. Run the following commands in the shell to install
    Docker:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Command** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '| Gets the latest version of packages and dependencies |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '| Downloads the Docker installer script |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '| Runs the installer script |'
  prefs: []
  type: TYPE_TB
- en: See [https://docs.docker.com/install/linux/docker-ce/debian/](https://docs.docker.com/install/linux/docker-ce/debian/)
    for more information on installing Docker on a Debian distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once Docker is installed, we need to execute a few commands so that the Docker
    command can be called without using `sudo` (Docker runs as the root):'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Command** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '| Creates a Docker user group. It probably already exists. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '| Adds a current user to the Docker group. |'
  prefs: []
  type: TYPE_TB
- en: See [https://docs.docker.com/install/linux/linux-postinstall/#manage-docker-as-a-non-root-user](https://docs.docker.com/install/linux/linux-postinstall/#manage-docker-as-a-non-root-user)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: Log out of the shell and log back in (close the shell window and open a new
    shell window). If all of the preceding commands have been executed successfully,
    then you should be able to run the `docker ps` command without `sudo`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will install `docker-compose` in the instance (see [https://docs.docker.com/compose/install/](https://docs.docker.com/compose/install/)).
    Execute the following commands (the version number might be different in the command
    to install `docker-compose`):'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Command** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '| Downloads `docker-compose` |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '| Makes `docker-compose` executable |'
  prefs: []
  type: TYPE_TB
- en: 'We created `docker-compose` deployment configuration in [Chapter 12](part0229.html#6QCGQ0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55), *Microservices*.
    We will deploy the same in the VM instance we have created in this section. The
    source code for this chapter includes a folder named `coursemanagement-docker-compose`.
    Upload all files in that folder to the VM instance. You can either upload from
    the browser shell window or use the `gcloud` command from your host machine. In
    the browser shell, click on the Settings icon in the upper-right corner and select
    the Upload File option. Upload all of the files that are in the `coursemanagement-docker-compose`
    folder. To upload from Terminal, execute the following `gcloud` command after
    changing the folder to `coursemanagement-docker-compose`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: This command copies all of the files in the current folder (which in our case
    is `coursemanagement-docker-compose`) to the user’s home folder in the instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Whichever method you use to upload the files, make sure that you have the following
    files in the VM instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '`course-management-db.dockerfile`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`course-management-service.dockerfile`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`docker-compose.yml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`course-management-db.sql`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`coursemanagementspring-0.0.1-SNAPSHOT.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the browser shell for the VM instance, execute the following command to
    set up the database and REST service in Docker containers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: See [Chapter 12](part0229.html#6QCGQ0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55), *Microservices*,
    for more details on the preceding files and the command. Once the command is executed
    successfully, browse to `http://<instance_external_ip>/course_management/courses`.
    You will just see an empty JSON array, because there is no data in the database.
    You can find the external IP of your instance from the Compute Engine | VM Instances
    page.
  prefs: []
  type: TYPE_NORMAL
- en: Run the `docker-compose down` command to shut down the containers.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying the application in Google App Engine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: App Engine is Google’s **Platform as a Service** (**PaaS**) offering, similar
    to Elastic Beanstalk from Amazon. In the section <q class="calibre207">Creating
    Elastic Beanstalk application from Eclipse</q>, we deployed the `CourseManagementREST`
    service using Elastic Beanstalk. In this section, we will learn how to deploy
    the same service using Google App Engine.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s make a copy of the `CourseManagementREST` project. Right-click on the
    project in Eclipse Project Explorer and select Copy. Right-click anywhere in Project
    Explorer and select Paste. Eclipse will prompt you to name the project. Let’s
    name it `CourseManagementREST-GAE`. We will deploy this project using Google App
    Engine.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s configure our project as an App Engine project. Right-click on the CourseManagementREST-GAE
    project in Project Explorer and select Configure | Convert to App Engine Standard
    Project.
  prefs: []
  type: TYPE_NORMAL
- en: If you are creating a new project for deployment to Google App Engine, then
    go to the File | New | Google App Engine Standard Java Project menu. Or, go to
    the drop-down menu from the Google Cloud Platform icon in the toolbar and select
    Create New Project | Google App Engine Standard Java Project.
  prefs: []
  type: TYPE_NORMAL
- en: Before we deploy the project, remove `web.xml` from the `src/main/webapp/WEB-INF`
    folder. Google App Engine’s Java platform uses the Jetty server and it does not
    need `web.xml` for this deployment.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may see an error stating `web.xml is missing and <failOnMissingWebXml>
    is set to true pom.xml` after deleting `web.xml`. To suppress this error, add
    the following property in `pom.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<properties>`'
  prefs: []
  type: TYPE_NORMAL
- en: '`    <failOnMissingWebXml>false</failOnMissingWebXml>   `'
  prefs: []
  type: TYPE_NORMAL
- en: '`</properties>`'
  prefs: []
  type: TYPE_NORMAL
- en: 'To test this application locally, go to the Servers view, right-click on it,
    and select New | Server. Then, expand the Google group and select App Engine Standard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00264.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.23: Creating a local App Engine server'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click Next and add the CourseManagementREST-GAE project for deployment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00265.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.24: Adding the CourseManagementREST-GAE project for deployment'
  prefs: []
  type: TYPE_NORMAL
- en: Click Finish and start the server from the Server view. Then, browse to `http://localhost:8080/services/course/get/1`
    to verify that the application has been deployed properly.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you get errors regarding the JDK version in `pom.xml`, add the following
    section in `pom.xml`, above the dependencies section:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<properties>`'
  prefs: []
  type: TYPE_NORMAL
- en: '`  <maven.compiler.source>1.8</maven.compiler.source>`'
  prefs: []
  type: TYPE_NORMAL
- en: '`  <maven.compiler.target>1.8</maven.compiler.target>`'
  prefs: []
  type: TYPE_NORMAL
- en: '`</properties>`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you deploy this project to Google App Engine, you should make sure that
    an application has been created in Google App Engine. Browse to [https://console.cloud.google.com/appengine](https://console.cloud.google.com/appengine)
    and check if any application exists. If not, you can create an application from
    that page. Alternately, you can run the following command in Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'To deploy this project to Google App Engine, select the project in Project
    Explorer and the drop-down menu from the Google Cloud Platform toolbar button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00266.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.25: Deploying the project to Google App Engine'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the Deploy to App Engine Standard... menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00267.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.26: Setting deployment parameters for Google App Engine'
  prefs: []
  type: TYPE_NORMAL
- en: Select your Google account from the drop-down menu, if not already selected,
    and then select the Google Cloud project you want the application deployed to.
  prefs: []
  type: TYPE_NORMAL
- en: Once the project is deployed, browse to `https://<your_project_id>.appsport.com/services/course/get/1`
    to verify it.
  prefs: []
  type: TYPE_NORMAL
- en: To stop the application, you need to disable the application—open [https://console.cloud.google.com](https://console.cloud.google.com)
    and go to App Engine | Settings and click the Disable Application button.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about two types of cloud deployment services provided
    by Amazon and Google. One is IaaS and the other is PaaS. PaaS lets you deploy
    your application in a pre-configured environment, while IaaS gives you complete
    control over deployment configuration. The IaaS offering from Amazon is called
    EC2 and the one from Google is called Compute Engine. The PaaS offering from Amazon
    is called Elastic Beanstalk and the one from Google is called App Engine.
  prefs: []
  type: TYPE_NORMAL
- en: We deployed the `CourseManagement` EJB application in the GlassFish Server in
    an instance of Amazon EC2\. We then deployed the `CourseManagementREST` service
    in Elastic Beanstalk.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we deployed a Docker container with the `CourseManagement` service in
    an instance of Google Compute Engine. Lastly, we deployed the `CourseManagementREST`
    service in Google App Engine.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to secure JEE applications.
  prefs: []
  type: TYPE_NORMAL
