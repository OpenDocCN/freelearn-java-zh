["```java\n//build.gradle\ndependencies {\n...\n    // OAuth2 Configuration:\n    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'\n...\n}\n```", "```java\nspring:\n  security:\n    oauth2:\n      client:\n        registration:\n          google:\n            client-id: google-client-id\n            client-secret: google-client-secret\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/ SecurityConfig.java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http, PersistentTokenRepository persistentTokenRepository) throws Exception {\n       http.authorizeRequests( authz -> authz\n                    .requestMatchers(antMatcher(\"/webjars/**\")).permitAll()\n                    .requestMatchers(antMatcher(\"/css/**\")).permitAll()\n                    .requestMatchers(antMatcher(\"/favicon.ico\")).permitAll()\n                    // H2 console:\n                    .requestMatchers(antMatcher(\"/admin/h2/**\")).access(\"isFullyAuthenticated()\")\n                    .requestMatchers(antMatcher(\"/\")).permitAll()\n                    .requestMatchers(antMatcher(\"/login/*\")).permitAll()\n                    .requestMatchers(antMatcher(\"/logout\")).permitAll()\n                    .requestMatchers(antMatcher(\"/signup/*\")).permitAll()\n                    .requestMatchers(antMatcher(\"/errors/**\")).permitAll()\n                    .requestMatchers(antMatcher(\"/events/\")).hasRole(\"ADMIN\")\n                    .requestMatchers(antMatcher(\"/**\")).hasAnyAuthority(\"OIDC_USER\", \"OAUTH2_USER\", \"ROLE_USER\"))\n              .exceptionHandling(exceptions -> exceptions\n                    .accessDeniedPage(\"/errors/403\"))\n              .formLogin(form -> form\n                    .loginPage(\"/login/form\")\n                    .loginProcessingUrl(\"/login\")\n                    .failureUrl(\"/login/form?error\")\n                    .usernameParameter(\"username\")\n                    .passwordParameter(\"password\")\n                    .defaultSuccessUrl(\"/default\", true)\n                    .permitAll())\n              .logout(form -> form\n                    .logoutUrl(\"/logout\")\n                    .logoutSuccessUrl(\"/login/form?logout\")\n                    .permitAll())\n              // CSRF is enabled by default, with Java Config\n              .csrf(AbstractHttpConfigurer::disable);\n        // OAuth2 Config\n        http\n              .oauth2Login(withDefaults());\n        // For H2 Console\n        http.headers(headers -> headers.frameOptions(FrameOptionsConfig::disable));\n        return http.build();\n    }\n... Omitted for brevity\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/service/ SpringSecurityUserContext.java\n@Component\npublic class SpringSecurityUserContext implements UserContext {\n    private static final Logger logger = LoggerFactory\n            .getLogger(SpringSecurityUserContext.class);\n    private final CalendarService calendarService;\n    public SpringSecurityUserContext(final CalendarService calendarService) {\n      this.calendarService = calendarService;\n    }\n    @Override\n    public CalendarUser getCurrentUser() {\n       SecurityContext context = SecurityContextHolder.getContext();\n       Authentication authentication = context.getAuthentication();\n       if (authentication == null) {\n          return null;\n       }\n       String email;\n       if(authentication.getPrincipal() instanceof DefaultOidcUser oidcUser ) {\n          email = oidcUser.getEmail();\n       } else if (authentication.getPrincipal() instanceof DefaultOAuth2User oauth2User) {\n          email = oauth2User.getAttribute(\"email\");\n       } else {\n          User user = (User) authentication.getPrincipal();\n          email = user.getUsername();\n       }\n       if (email == null) {\n          return null;\n       }\n       CalendarUser result = calendarService.findUserByEmail(email);\n       if (result == null) {\n          throw new IllegalStateException(\n                \"Spring Security is not in synch with CalendarUsers. Could not find user with email \" + email);\n       }\n       logger.info(\"CalendarUser: {}\", result);\n       return result;\n    }\n}\n```", "```java\nOAuth2AuthorizationRequestRedirectFilter.DEFAULT_AUTHORIZATION_REQUEST_BASE_URI + \"/{registrationId}\"\n```", "```java\n//src/main/resources/templates/login.xhtml\n<div class=\"mb-3\">\n    <legend>Login With Google</legend>\n    <div class=\"mb-3\">\n        <a class=\"btn btn-danger\"\n           role=\"button\" th:href=\"@{/oauth2/authorization/google}\">Login with Google</a>\n    </div>\n</div>\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/ SecurityConfig.java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http, GrantedAuthoritiesMapper grantedAuthoritiesMapper) throws Exception {\n... omitted for brevity\n        // OAuth2 Login\n        http\n                .oauth2Login(oauth2 -> oauth2\n                        .loginPage(\"/login/form\")\n                        .defaultSuccessUrl(\"/default\", true));\n        return http.build();\n    }\n}\n```", "```java\n    //src/main/resources/application.yml\n    spring:\n      security:\n        oauth2:\n          client:\n            registration:\n              google:\n                client-id: google-client-id\n                client-secret: google-client-secret\n              github:\n                client-id: github-client-id\n                client-secret: github -client-secret\n    ```", "```java\n    //src/main/resources/templates/login.xhtml\n    <div class=\"mb-3\">\n        <legend>Login With Google</legend>\n        <div class=\"mb-3\">\n            <a class=\"btn btn-danger\"\n               role=\"button\" th:href=\"@{/oauth2/authorization/google}\">Login with Google</a>\n        </div>\n        <legend>Login With Github</legend>\n        <div class=\"mb-3\">\n            <a class=\"btn btn-dark\"\n               role=\"button\" th:href=\"@{/oauth2/authorization/github}\">Login with Github</a>\n        </div>\n    </div>\n    ```", "```java\nsecurity:\n  oauth2:\n    client:\n      registration:\n        okta:\n          client-id: okta-client-id\n          client-secret: okta-client-secret\n          scope: openid,profile,email\n      provider:\n        okta:\n          issuer-uri: https://your-subdomain.okta.com\n          authorization-uri: https://your-subdomain.okta.com/oauth2/v1/authorize\n          token-uri: https://your-subdomain.okta.com/oauth2/v1/token\n          user-info-uri: https://your-subdomain.okta.com/oauth2/v1/userinfo\n          user-name-attribute: sub\n          jwk-set-uri: https://your-subdomain.okta.com/oauth2/v1/keys\n```", "```java\n//src/main/resources/templates/login.xhtml\n... omitted for brevity\n<div class=\"mb-3\">\n    <legend>Login With Google</legend>\n    <div class=\"mb-3\">\n        <a class=\"btn btn-danger\"\n           role=\"button\" th:href=\"@{/oauth2/authorization/google}\">Login with Google</a>\n    </div>\n    <legend>Login With Github</legend>\n    <div class=\"mb-3\">\n        <a class=\"btn btn-dark\"\n           role=\"button\" th:href=\"@{/oauth2/authorization/github}\">Login with Github</a>\n    </div>\n    <legend>Login With OKTA</legend>\n    <div class=\"mb-3\">\n        <a class=\"btn btn-success\"\n           role=\"button\" th:href=\"@{/oauth2/authorization/okta}\">Login with OKTA</a>\n    </div>\n</div>\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/ SecurityConfig.java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http, OAuth2AuthorizationRequestResolver pkceResolver) throws Exception {\n... omitted for brevity\n        // OAuth2 Login\n        http\n                .oauth2Login(oauth2 -> oauth2\n                        .loginPage(\"/login/form\")\n                        .authorizationEndpoint(authorization -> authorization.authorizationRequestResolver(pkceResolver))\n                        .defaultSuccessUrl(\"/default\", true)\n                .userInfoEndpoint(userInfo -> userInfo\n                        .userAuthoritiesMapper(grantedAuthoritiesMapper)));\n        return http.build();\n    }\n    @Bean\n    public OAuth2AuthorizationRequestResolver pkceResolver(ClientRegistrationRepository clientRegistrationRepository) {\n       DefaultOAuth2AuthorizationRequestResolver resolver = new DefaultOAuth2AuthorizationRequestResolver(clientRegistrationRepository, OAuth2AuthorizationRequestRedirectFilter.DEFAULT_AUTHORIZATION_REQUEST_BASE_URI);\n       resolver.setAuthorizationRequestCustomizer(OAuth2AuthorizationRequestCustomizers.withPkce());\n       return resolver;\n    }\n}\n```", "```java\nspring:\n  security:\n    oauth2:\n      client:\n        registration:\n          okta:\n            client-id: okta-client-id\n            client-secret: okta-client-secret\n            ...\n        provider:\n          okta:\n            issuer-uri: https://dev-1234.oktapreview.com\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/ SecurityConfig.java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n    private ClientRegistrationRepository clientRegistrationRepository;\n    public SecurityConfig(ClientRegistrationRepository clientRegistrationRepository) {\n       this.clientRegistrationRepository = clientRegistrationRepository;\n    }\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http, OAuth2AuthorizationRequestResolver pkceResolver) throws Exception {\n       http.authorizeRequests(authz -> authz\n... omitted for brevity\n       // OAuth2 Login\n       http\n             .oauth2Login(oauth2 -> oauth2\n                   .loginPage(\"/login/form\")\n                   .authorizationEndpoint(authorization -> authorization.authorizationRequestResolver(pkceResolver))\n                   .defaultSuccessUrl(\"/default\", true))\n             .logout(logout -> logout\n                   .logoutSuccessHandler(oidcLogoutSuccessHandler()));\n       return http.build();\n    }\n    private LogoutSuccessHandler oidcLogoutSuccessHandler() {\n       OidcClientInitiatedLogoutSuccessHandler oidcLogoutSuccessHandler =\n             new OidcClientInitiatedLogoutSuccessHandler(this.clientRegistrationRepository);\n       // Sets the location that the End-User's User Agent will be redirected to\n       // after the logout has been performed at the Provider\n       oidcLogoutSuccessHandler.setPostLogoutRedirectUri(\"{baseUrl}\");\n       return oidcLogoutSuccessHandler;\n    }\n}\n```", "```java\n    @Entity\n    @Table(name = \"calendar_users\")\n    public class CalendarUser implements Principal, Serializable {\n    ... getter / setter omitted for brevity\n        @Id\n        @SequenceGenerator(name = \"EntityTwoSequence\", initialValue = 1000)\n        @GeneratedValue(generator = \"EntityTwoSequence\")\n        private Integer id;\n        private String firstName;\n        private String lastName;\n        private String email;\n        private String provider;\n        private String externalId;\n        @ManyToMany(fetch = FetchType.EAGER)\n        @JoinTable(name = \"user_role\",\n              joinColumns = @JoinColumn(name = \"user_id\"),\n              inverseJoinColumns = @JoinColumn(name = \"role_id\"))\n        private Set<Role> roles;\n        /**\n    }\n    ```", "```java\n    @Component\n    public class CalendarOAuth2UserService implements OAuth2UserService {\n        private final CalendarService calendarService;\n        public CalendarOAuth2UserService(CalendarService calendarService) {\n           this.calendarService = calendarService;\n        }\n        @Override\n        public OAuth2User loadUser(OAuth2UserRequest userRequest) throws OAuth2AuthenticationException {\n           DefaultOAuth2UserService delegate = new DefaultOAuth2UserService();\n           OAuth2User user = delegate.loadUser(userRequest);\n           String email = user.getAttribute(\"email\");\n           CalendarUser calendarUser = calendarService.findUserByEmail(email);\n           if (calendarUser ==null) {\n              calendarUser = new CalendarUser();\n              calendarUser.setEmail(email);\n              calendarUser.setProvider(userRequest.getClientRegistration().getRegistrationId());\n              if (\"github\".equals(userRequest.getClientRegistration().getRegistrationId())) {\n                 calendarUser.setExternalId(user.getAttribute(\"id\").toString());\n                 calendarUser.setFirstName( user.getAttribute(\"name\"));\n                 calendarUser.setLastName(user.getAttribute(\"name\"));\n              }\n           calendarService.createUser(calendarUser);\n           }\n           return user;\n        }\n    }\n    ```", "```java\n    @Component\n    public class CalendarOidcUserService extends OidcUserService {\n        private final CalendarService calendarService;\n        public CalendarOidcUserService(CalendarService calendarService) {\n           this.calendarService = calendarService;\n        }\n        @Override\n        public OidcUser loadUser(OidcUserRequest userRequest) throws OAuth2AuthenticationException {\n           OidcUser user = super.loadUser(userRequest);\n           String email = user.getEmail();\n           CalendarUser calendarUser = calendarService.findUserByEmail(email);\n           if (calendarUser == null) {\n              calendarUser = new CalendarUser();\n              calendarUser.setEmail(email);\n              calendarUser.setProvider(userRequest.getClientRegistration().getRegistrationId());\n              calendarUser.setExternalId(user.getAttribute(\"sub\"));\n              calendarUser.setFirstName(user.getGivenName());\n              calendarUser.setLastName(user.getFamilyName());\n           calendarService.createUser(calendarUser);\n           }\n           return user;\n        }\n    }\n    ```", "```java\n//src/main/java/com/packtpub/springsecurity/core/authority/ CalendarUserAuthoritiesMapper.java\n@Component\npublic class CalendarUserAuthoritiesMapper implements GrantedAuthoritiesMapper {\n    private CalendarUserRepository userRepository;\n    public CalendarUserAuthoritiesMapper(CalendarUserRepository userRepository) {\n       this.userRepository = userRepository;\n    }\n    @Override\n    public Collection<? extends GrantedAuthority> mapAuthorities(Collection<? extends GrantedAuthority> authorities) {\n       Set<GrantedAuthority> mappedAuthorities = new HashSet<>();\n       authorities.forEach(authority -> {\n          String email = null;\n          if (authority instanceof OidcUserAuthority oidcUserAuthority) {\n             OidcIdToken idToken = oidcUserAuthority.getIdToken();\n             mappedAuthorities.add(oidcUserAuthority);\n             email = idToken.getEmail();\n          }\n          else if (OAuth2UserAuthority.class.isInstance(authority)) {\n             OAuth2UserAuthority oauth2UserAuthority = (OAuth2UserAuthority) authority;\n             mappedAuthorities.add(oauth2UserAuthority);\n             Map<String, Object> userAttributes = oauth2UserAuthority.getAttributes();\n             email = (String) userAttributes.get(\"email\");\n          }\n          if (email != null) {\n             CalendarUser calendarUser = userRepository.findByEmail(email);\n             List<String> roles = calendarUser.getRoles().stream().map(Role::getName).toList();\n             List<GrantedAuthority> grantedAuthorityList = AuthorityUtils.createAuthorityList(roles.toArray(new String[0]));\n             mappedAuthorities.addAll(grantedAuthorityList);\n          }\n       });\n       return mappedAuthorities;\n    }\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/ SecurityConfig.java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n    @Bean\npublic SecurityFilterChain filterChain(HttpSecurity http, PersistentTokenRepository persistentTokenRepository,\n       GrantedAuthoritiesMapper grantedAuthoritiesMapper) throws Exception {\n... omitted for brevity\n      // OAuth2 Login\n      http\n            .oauth2Login(oauth2 -> oauth2\n                  .loginPage(\"/login/form\")\n                  .authorizationEndpoint(authorization -> authorization.authorizationRequestResolver(pkceResolver))\n                  .defaultSuccessUrl(\"/default\", true)\n            .userInfoEndpoint(userInfo -> userInfo\n                  .userAuthoritiesMapper(grantedAuthoritiesMapper)))\n            .logout(logout -> logout\n                  .logoutSuccessHandler(oidcLogoutSuccessHandler()));\n      return http.build();\n    }\n}\n```", "```java\n//src/main/resources/data.sql\ninsert into calendar_users(id,email,first_name,last_name) values (1,'calendarjbcp@gmail.com','Admin','1');\ninsert into user_role(user_id,role_id) values (1, 1);\n```"]