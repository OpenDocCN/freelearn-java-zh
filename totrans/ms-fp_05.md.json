["```java\ndef imperativeDivision(n1: Double, n2: Double): Double =\n  if (n2 == 0) throw new RuntimeException(\"Division by zero!\")\n  else n1 / n2\n```", "```java\ndef functionalDivision(n1: Double, n2: Double): Try[Double] =\n  if (n2 == 0) Failure(new RuntimeException(\"Division by zero!\"))\n  else Success(n1 / n2)\n```", "```java\ndef f1(x: Double): Try[Double] =\ndivide(2, x) match {\n  case Success(res) => res + 3\n  case f: Failure   => f\n}\n```", "```java\ndef f1Map(x: Double): Try[Double] =\n divide(2, x).map(r => r + 3)\n```", "```java\ndef f2Match(x: Double, y: Double): Try[Double] =\n  divide(2, x) match {\n    case Success(r1) => divide(r1, y) match {\n      case Success(r2) => Success(r2 + 3)\n      case f@Failure(_) => f\n    }\n    case f@Failure(_) => f\n  }\n```", "```java\ndef f2FlatMap(x: Double, y: Double): Try[Double] =\n  divide(2, x).flatMap(r1 => divide(r1, y))\n   .map(r2 => r2 + 3)\n```", "```java\nclass Dummy(val id: Int) {\n  val f: Int => String = x => s\"Number: $x; Dummy: $id\"\n}\n```", "```java\n// val f: Int => String = x => s\"Number: $x; Dummy: $id\"  // No `id` in scope, does not compile\n```", "```java\nval f1: Dummy => (Int => String) = d => (x => s\"Number: $x; Dummy: ${d.id}\")\n```", "```java\nval f2: Int => (Dummy => String) = x => (d => s\"Number: $x; Dummy: ${d.id}\")\n```"]