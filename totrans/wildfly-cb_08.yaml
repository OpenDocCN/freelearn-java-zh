- en: Chapter 8. Commanding the CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Invoking CLI commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking the WildFly version
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking WildFly operational mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting the OS version
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting the JVM version
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking the JVM options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking JVM memories – heap-size and all
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking the server status
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking the JNDI tree view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Invoking CLI commands declared in an external file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to use the CLI to grab the information that
    you need. The CLI also provides a method to execute commands outside it, by specifying
    the WildFly to connect to and the command to be executed. Furthermore, WildFly
    provides you with an HTTP API, which can be used to perform action and to also
    retrieve information. Most of this API is used to perform system monitoring.
  prefs: []
  type: TYPE_NORMAL
- en: As WildFly can be run in a standalone or domain mode, whenever it makes sense,
    we will use both modes because you may access the same information differently.
  prefs: []
  type: TYPE_NORMAL
- en: Within this chapter, we will simulate/use remote WildFly instances, just like
    the real scenario where you can apply the following recipes to connect to remote
    servers. It does not make sense trying the recipes in `localhost` without seeing
    any authentication and authorization issues.
  prefs: []
  type: TYPE_NORMAL
- en: To simulate a remote server, you can eventually use VirtualBox or Docker and
    then install WildFly as described in the first chapter.
  prefs: []
  type: TYPE_NORMAL
- en: I'm going to use WildFly running on a Linux container using the Docker tool
    version 1.5\. You can obviously use a real remote server, it would be the same;
    what counts is the WildFly platform being exposed
  prefs: []
  type: TYPE_NORMAL
- en: By the way, the last chapter of this book is all about running WildFly within
    a Linux container using Docker, so if you are totally new to Docker (where have
    you been hiding?), have a look at the last chapter of this book, or grab a definitely
    excellent Docker book, *The Docker Book*, *James Turnbull* at [http://www.dockerbook.com](http://www.dockerbook.com)
  prefs: []
  type: TYPE_NORMAL
- en: 'So, my Docker configuration says the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Thus, my remote WildFly instance will be bound to that IP along with the usual
    WildFly ports such as `8080`, `9990` and `9999`. The same management user is the
    one used throughout the book: `wildfly` as username and `cookbook.2015` as password.'
  prefs: []
  type: TYPE_NORMAL
- en: Invoking CLI commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to invoke CLI commands directly from your
    command line without accessing the CLI itself, let's say not in an interactive
    way. This technique might be helpful in case you have to script some processes,
    like stopping and starting servers in a sequence, deploying an application only
    if another one has already been deployed, and so on. Often times, you also need
    to monitor some state, thus you just need that number (as typically seen in Nagios).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Remember I'm running WildFly remotely, bound to `192.168.59.103` as IP. WildFly
    is already up and running.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'On your local PC, open a new terminal window and run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Obviously, you can extract just the information you need by using the `awk`
    command in the output (you can use whichever tool you are comfortable with), as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In case you are running WildFly in the domain mode, both the invocation and
    the result are the same.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Actually, there is not much to say or explain, just that the `jboss-cli.sh`
    script invokes the `org.jboss.as.cli.CommandLineMain` class of the `wildfly-cli-1.0.0.Beta2.jar`
    library, passing all the arguments. The `--command` basically disables the interactive
    mode, executes the statements, and prints the output in the standard output before
    returning back to the standard input.
  prefs: []
  type: TYPE_NORMAL
- en: 'What we have done is basically the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: By the way, you cannot manipulate the output.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: WildFly provides one more API, which is the HTTP API. Let's try it with some
    network command-line tools such as `curl`.
  prefs: []
  type: TYPE_NORMAL
- en: curl
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With a running WildFly instance, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On you local PC, open a new terminal window and execute the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, `curl` complains about a `Digest` authentication for the `ManagementRealm`,
    which is the one used by WildFly management interfaces.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s give the username `wildfly` and password `cookbook.2015` to the command,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Okay, it works; now remove the `--verbose` flag and execute the command again.
    You should get just `Kenny`, after entering the password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you do not want to enter the password, you can pass it as an argument as
    well, with all the security concerns this comes with. For this, do as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Checking the WildFly version
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn to check the version of WildFly that you are
    running by invoking a command to the CLI.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Remember I'm running WildFly remotely, bound to `192.168.59.103` as IP. WildFly
    is already up and running.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'On your local PC, open a new terminal window and execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Obviously, you can extract just the information you need by using the `awk`
    command in the output (you can use whichever tool you are comfortable with), as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In case you are running WildFly in the domain mode, the invocation and result
    would be the same.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here we are telling the `jboss-cli.sh` script to execute the command that we
    define within the `--command` parameter, and to return the result in the standard
    output.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the CLI, it would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: By the way, you cannot manipulate the output.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: WildFly provides one more API, which is the HTTP API. Let's try it with some
    network command-line tools such as `curl`.
  prefs: []
  type: TYPE_NORMAL
- en: curl
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With a running WildFly instance, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a new terminal window and run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see `curl` complains about a Digest authentication for the `ManagementRealm`,
    which is the one used by WildFly management interfaces.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s give the username `wildfly` and password `cookbook.2015` to the command,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Okay, it works; now remove the `--verbose` flag and execute the command again.
    You should get just `9.0.0.Beta2`, after entering the password.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you do not want to enter the password, you can pass it as an argument as
    well, with all the security concerns this comes with, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Checking WildFly operational mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn to check the operational mode that WildFly is
    running with by invoking a command to the CLI.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Remember I'm running WildFly remotely, bound to `192.168.59.103` as IP. WildFly
    is already up and running.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open a new terminal window and execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Obviously, you can extract just the information you need using the `awk` command
    in the output (you can use whichever tool you are comfortable with), as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In case you are running WildFly in the domain mode, the invocation is the same,
    but the result would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: That's it!
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here we are telling the `jboss-cli.sh` script to execute the command that we
    define within the `--command` parameter, and to return the result in the standard
    output.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the CLI, it would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: By the way, you cannot manipulate the output.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: WildFly provides one more API, which is the HTTP API. Let's try it with some
    network command-line tools such as `curl`.
  prefs: []
  type: TYPE_NORMAL
- en: curl
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With a running WildFly instance, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a new terminal window and execute the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, `curl` complains about a Digest authentication for `ManagementRealm`,
    which is the one used by WildFly management interfaces.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s give the username and password to the command, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Okay, it works; now remove the `--verbose` flag and execute the command again.
    You should get just `STANDALONE`, after entering the password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you do not want to enter the password, you can pass it as an argument as
    well, with all the security concerns this comes with, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Getting the OS version
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to get the OS version that WildFly is running
    on by invoking a command to the CLI.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Remember I'm running WildFly remotely, bound to `192.168.59.103` as IP. WildFly
    is already up and running.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open a new terminal window and run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Obviously, you can extract just the information you need using the `awk` command
    in the output (you can use whichever tool you are comfortable with), as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In case you are running WildFly in the domain mode, the invocation is done
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That's it!
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here we are telling the `jboss-cli.sh` script to execute the command that we
    define within the `--command` parameter, and to return the result in the standard
    output.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the CLI, it would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: By the way, you cannot manipulate the output.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: WildFly provides one more API, which is the HTTP API. Let's try it with some
    network command-line tools such as `curl`.
  prefs: []
  type: TYPE_NORMAL
- en: curl
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With a running WildFly instance, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a new terminal window and do as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, `curl` complains about a Digest authentication for `ManagementRealm`,
    which is the one used by WildFly management interfaces.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s give the username and password to the command, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Okay, it works; now remove the `--verbose` flag and execute the command again.
    You should get just the JSON output after entering the password, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Neat, but pretty ugly!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you want to prettify the JSON output and you do not want to enter the password
    (you can pass it as an argument as well, with all the security concerns this comes
    with), you can do as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That's the way I like it!
  prefs: []
  type: TYPE_NORMAL
- en: Getting the JVM version
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to get the JVM WildFly is running with by
    invoking a command to the CLI.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Remember I'm running WildFly remotely, bound to `192.168.59.103` as IP. WildFly
    is already up and running.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open a new terminal window and execute the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Obviously, you can extract just the information you need by using the `awk`
    command in the output (you can use whichever tool you are comfortable with), as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In case you are running WildFly in the domain mode, the invocation is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That's it!
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here we are telling the `jboss-cli.sh` script to execute the command that we
    define within the `--command` parameter, and to return the result in the standard
    output.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the CLI, it would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: By the way, you cannot manipulate the output.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: WildFly provides one more API, which is the HTTP API. Let's try it with some
    network command-line tools such as `curl`.
  prefs: []
  type: TYPE_NORMAL
- en: curl
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With a running WildFly instance, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a new terminal window and run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, `curl` complains about a Digest authentication for `ManagementRealm`,
    which is the one used by WildFly management interfaces.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s give the username and password to the command, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Okay, it works; now remove the `--verbose` flag and execute the command again.
    You should get just the output after entering the password, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you do not want to enter the password, you can pass it as an argument as
    well, with all the security concerns this comes with, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That's the way I like it!
  prefs: []
  type: TYPE_NORMAL
- en: More about the runtime type
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `runtime` type that we just used in the preceding steps, provides a lot
    of information that can be very helpful. Here is the complete list of all the
    information you can have in a pretty JSON format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, there is a lot of information, and with the `operation=attribute`
    directive, you can directly grab the attribute that you need. Otherwise use the
    `awk` command.
  prefs: []
  type: TYPE_NORMAL
- en: Checking the JVM options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to get the JVM options used to run WildFly
    by invoking a command to the CLI.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Remember I'm running WildFly remotely, bound to `192.168.59.103` as IP. WildFly
    is already up and running.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open a new terminal window and execute the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Obviously, you can extract just the information that you need by using the
    `awk` command in the output (you can use whichever tool you are comfortable with),
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In case you are running WildFly in the domain mode, the invocation is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That's it!
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here we are telling the `jboss-cli.sh` script to execute the command that we
    define within the `--command` parameter, and to return the result in the standard
    output.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the CLI, it would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Remember, you cannot manipulate the output.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: WildFly provides one more API, which is the HTTP API. Let's try it with some
    network command-line tools such as `curl`.
  prefs: []
  type: TYPE_NORMAL
- en: curl
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With a running WildFly instance, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a new terminal window and do as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, `curl` complains about a Digest authentication for the `ManagementRealm`,
    which is the one used by WildFly management interfaces.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s give the username and password to the command, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Okay, it works; now remove the `--verbose` flag and execute the command again.
    You should get just the JSON output, after entering the password, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Neat, but pretty ugly!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you want to prettify the JSON output and you do not want to enter the password
    (you can pass it as an argument as well, with all the security concerns this comes
    with), you can do as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That's the way I like it!
  prefs: []
  type: TYPE_NORMAL
- en: Checking JVM memories – heap-size and all
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to get the JVM memory information with regard
    to heap-size, non heap-size, metaspace size (PermGen until Java 7), eden, old,
    and survivor, by invoking a command to the CLI. There is a command for each of
    them.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Remember I'm running WildFly remotely, bound to `192.168.59.103` as IP. WildFly
    is already up and running.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will walk through the "`heap`", "`non-heap`", "`metaspace`" (PermGen until
    Java 7), "`eden`", "`old`", and the "`survivor`" area memories, separately.
  prefs: []
  type: TYPE_NORMAL
- en: Heap
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For information on heap memory, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a new terminal window and do as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Obviously, you can extract just the information you need using the `awk` command
    in the output (you can use whichever tool you are comfortable with), as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If you just need the number, which is a `long` datatype, use `$3` in the `print`
    statement.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In case you are running WildFly in the domain mode, the invocation is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That's it!
  prefs: []
  type: TYPE_NORMAL
- en: Non-heap
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For information on non-heap memory, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a new terminal window and execute the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Obviously, you can extract just the information you need by using the `awk`
    command in the output (you can use whichever tool you are comfortable with), as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In case you are running WildFly in the domain mode, the invocation is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That's it!
  prefs: []
  type: TYPE_NORMAL
- en: Metaspace or PermGen
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Metaspace is available since Java 1.8, while PermGen was available until Java
    1.7\. For the metaspace memory information, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a new terminal window and do as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Obviously, you can extract just the information you need by using the `awk`
    command in the output (you can use whichever tool you are comfortable with). However,
    in this case, you should better use the `read-attribute` syntax and then use the
    `awk` command for the information you want, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In case you are running WildFly in the domain mode, the invocation is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That's it!
  prefs: []
  type: TYPE_NORMAL
- en: Eden
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For information on eden memory, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a new terminal window and give the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Obviously, you can extract just the information that you need by using the
    `awk` command in the output (you can use whichever tool you are comfortable with).
    However, in this case, you should better use the `read-attribute` syntax and then
    `awk` the information you want, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In case you are running WildFly in the domain mode, the invocation is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That's it!
  prefs: []
  type: TYPE_NORMAL
- en: Old
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For information regarding old memory, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a new terminal window and execute the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Obviously, you can extract just the information you need by using the `awk`
    command in the output (you can use whichever tool you are comfortable with). However,
    in this case, you should better use the `read-attribute` syntax and then `awk`
    the information you want, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In case you are running WildFly in the domain mode, the invocation is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That's it!
  prefs: []
  type: TYPE_NORMAL
- en: Survivor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For information regarding survivor memory, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a new terminal window and give the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Obviously, you can extract just the information you need by using the `awk`
    command in the output (you can use whichever tool you are comfortable with). However,
    in this case, you should better use the `read-attribute` syntax and then `awk`
    the information you want, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In case you are running WildFly in the domain mode, the invocation is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That's it!
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here we are telling the `jboss-cli.sh` script to execute the command that we
    define within the `--command` parameter, and to return the result in the standard
    output.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the CLI, it would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: By the way, you cannot manipulate the output.
  prefs: []
  type: TYPE_NORMAL
- en: You can try the other memory spaces yourself, by replacing the memory name with
    the one that you are interested in.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: WildFly provides one more API, which is the HTTP API. Let's try it with some
    network command-line tools such as `curl`.
  prefs: []
  type: TYPE_NORMAL
- en: Here we will examine just the JVM heap memory, as an example.
  prefs: []
  type: TYPE_NORMAL
- en: Curl
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Perform the following steps using curl:'
  prefs: []
  type: TYPE_NORMAL
- en: 'With a running WildFly instance, open a new terminal window and execute the
    following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, `curl` complains about a Digest authentication for `ManagementRealm`,
    which is the one used by WildFly management interfaces.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s give the username and password to the command, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Okay, it works; now remove the `--verbose` flag and execute the command again.
    You should get just the JSON output, after entering the password, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Neat, but pretty ugly!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you want to prettify the JSON output and you do not want to enter the password
    (you can pass it as an argument as well, with all the security concerns this comes
    with), you can execute the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That's the way I like it!
  prefs: []
  type: TYPE_NORMAL
- en: Checking the server status
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to check the state of a running WildFly instance,
    by invoking a command to the CLI.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Remember I'm running WildFly remotely, bound to `192.168.59.103` as IP. WildFly
    is already up and running.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open a new terminal window and execute the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'You can extract just the information you need by using the `awk` command in
    the output (you can use whichever tool you are comfortable with), as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'In case you are running WildFly in the domain mode, the invocation is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: That's it!
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here we are telling the `jboss-cli.sh` script to execute the command that we
    define within the `--command` parameter, and to return the result in the standard
    output.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the CLI, it would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: By the way, you cannot manipulate the output.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: WildFly provides one more API, which is the HTTP API. Let's try it with some
    network command-line tools such as `curl`.
  prefs: []
  type: TYPE_NORMAL
- en: curl
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With a running WildFly instance, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a new terminal window and execute the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, `curl` complains about a Digest authentication for `ManagementRealm`,
    which is the one used by WildFly management interfaces.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s give the username and password to the command, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Okay, it works; now remove the `--verbose` flag and execute the command again.
    You should get just `running`, after entering the password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you do not want to enter the password, you can pass it as an argument as
    well, with all the security concerns this comes with. For this, execute the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Checking the JNDI tree view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to get the JNDI tree view of your WildFly
    instances, by invoking a command to the CLI. This might be useful in case you
    need to check whether some application context exits, if you need to know a datasource
    JNDI name, or if you need to lookup for an EJB.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Remember I'm running WildFly remotely, bound to `192.168.59.103` as IP. WildFly
    is already up and running.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open a new terminal window and execute the as following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Obviously, you can extract just the information you need by using the `awk`
    command in the output (you can use whichever tool you are comfortable with).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In case you are running WildFly in the domain mode, the invocation is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That's it!
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here we are telling the `jboss-cli.sh` script to execute the command that we
    define within the `--command` parameter, and to return the result in the standard
    output.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the CLI, it would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: The output would be the same as shown in the image of the *How to do it* section
    of this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Invoking CLI commands declared in an external file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to execute commands declared in a separate
    file, using the `jboss-cli.sh` script.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Remember I'm running WildFly remotely, bound to `192.168.59.103` as IP. WildFly
    is already up and running.
  prefs: []
  type: TYPE_NORMAL
- en: Create a file named `wildfly-cookbook.cli`, and insert the listing command `ls`
    into it. Place the file in your local `$WILDFLY_HOME` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Now it's time to invoke our commands through the CLI!
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open a new terminal window and execute the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here we are telling the `jboss-cli.sh` script to read the commands defined inside
    the `wildfly-cookbook.2015` file, by the `--file` directive. The CLI reads our
    `wildfly-cookbook.cli` file and executes its commands.
  prefs: []
  type: TYPE_NORMAL
- en: Using a file to store the commands needed to configure your WildFly instance
    is very useful to automate configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine a scenario where you need to scale a system automatically. Suppose you
    have all your applications' source code in a version-control-software repository
    such as `git`, along with the `.cli` configuration files. It would be a piece
    of cake to download your app, build it, configure your WildFly instance using
    the `.cli` files, deploy the app, and start the server!
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss how to stop and start a server, deploy
    an application using the CLI, and much more.
  prefs: []
  type: TYPE_NORMAL
