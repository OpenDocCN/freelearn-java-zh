["```java\n    Process p = Runtime.getRuntime().exec(\"/path/to/program\"); \n```", "```java\n    <build> \n      <plugins> \n        <plugin> \n          <groupId>org.apache.maven.plugins</groupId> \n          <artifactId>maven-compiler-plugin</artifactId> \n          <version>3.6.1</version> \n          <configuration> \n            <source>9</source> \n            <target>9</target> \n          </configuration> \n        </plugin> \n      </plugins> \n    </build> \n```", "```java\n    module procman.app { \n      requires javafx.controls; \n      requires javafx.fxml; \n    } \n```", "```java\n    public class ProcessManager extends Application { \n      @Override \n      public void start(Stage stage) throws Exception { \n        Parent root = FXMLLoader \n         .load(getClass().getResource(\"/fxml/procman.fxml\")); \n\n        Scene scene = new Scene(root); \n        scene.getStylesheets().add(\"/styles/Styles.css\"); \n\n        stage.setTitle(\"Process Manager\"); \n        stage.setScene(scene); \n        stage.show(); \n      } \n\n      public static void main(String[] args) { \n        launch(args); \n      } \n    } \n```", "```java\n    <BorderPane  \n\n      fx:controller=\"com.steeplesoft.procman.Controller\"> \n    </BorderPane> \n```", "```java\n    <center> \n        <TableView fx:id=\"processList\" \n               BorderPane.alignment=\"CENTER\"> \n        </TableView> \n    </center> \n```", "```java\n    public class Controller implements Initializable { \n      @FXML \n      private TableView<ProcessHandle> processList; \n      @Override \n      public void initialize(URL url, ResourceBundle rb) { \n      } \n    } \n```", "```java\n    <TableView fx:id=\"processList\" BorderPane.alignment=\"CENTER\">\n    ...\n```", "```java\n    <BorderPane  xmlns=\"http://javafx.com/javafx/8.0.60\"\n      xmlns:fx=\"http://javafx.com/fxml/1\" \n      fx:controller=\"com.steeplesoft.procman.Controller\">\n```", "```java\n    public String command(); \n```", "```java\n    String command = processHandle.info().command(); \n    if (command == null) { \n      command = \"<unknown>\"; \n    } \n```", "```java\n    String command = processHandle.info().command() \n     .orElse(\"<unknown>\"); \n```", "```java\n        alert.showAndWait() \n         .filter(b -> b instanceof ButtonType.OK) \n```", "```java\n        Optional<String> opts = Optional.of(\"hello\"); \n        Optional<String> upper = opts.map(s ->  \n         s.toUpperCase()); \n        Optional<Optional<String>> upper2 =  \n         opts.map(s -> Optional.of(s.toUpperCase())); \n```", "```java\n        Optional<String> upper3 = opts.flatMap(s ->      \n         Optional.of(s.toUpperCase())); \n```", "```java\n    ProcessHandle.allProcesses() \n     .collect(Collectors.toList()); \n```", "```java\n    @FXML \n    private TableView<ProcessHandle> processView; \n    final private ObservableList<ProcessHandle> processList =  \n      FXCollections.observableArrayList(); \n    // ... \n    processView.setItems(processList);      \n    processList.setAll(ProcessHandle.allProcesses() \n     .collect(Collectors.toList())); \n```", "```java\n    TableColumn<ProcessHandle, String> commandCol =  \n     new TableColumn<>(\"Command\"); \n    commandCol.setCellValueFactory(new  \n      Callback<TableColumn.CellDataFeatures<ProcessHandle, String>,  \n       ObservableValue<String>>() { \n         public ObservableValue<String> call( \n          TableColumn.CellDataFeatures<ProcessHandle,  \n           String> p) { \n             return new SimpleObjectProperty(p.getValue()\n              .info() \n              .command() \n              .map(Controller::afterLast) \n              .orElse(\"<unknown>\")); \n           } \n       }\n    ); \n```", "```java\n    TableColumn<ProcessHandle, String> commandCol =  \n     new TableColumn<>(\"Command\"); \n    commandCol.setCellValueFactory(data ->  \n     new SimpleObjectProperty(data.getValue().info().command() \n      .map(Controller::afterLast) \n      .orElse(\"<unknown>\"))); \n```", "```java\n    private <T> TableColumn<ProcessHandle, T>  \n      createTableColumn(String header, int width,  \n       Function<ProcessHandle, T> function) { \n         TableColumn<ProcessHandle, T> column = \n          new TableColumn<>(header); \n\n         column.setMinWidth(width); \n         column.setCellValueFactory(data ->  \n          new SimpleObjectProperty<T>( \n           function.apply(data.getValue()))); \n           return column; \n    } \n```", "```java\n    createTableColumn(\"Command\", 250,  \n      p -> p.info().command() \n      .map(Controller::afterLast) \n      .orElse(\"<unknown>\")) \n```", "```java\n    processView.getColumns().setAll( \n      createTableColumn(\"Command\", 250,  \n      p -> p.info().command() \n       .map(Controller::afterLast) \n       .orElse(\"<unknown>\")), \n      createTableColumn(\"PID\", 75, p -> p.getPid()), \n      createTableColumn(\"Status\", 150,  \n       p -> p.isAlive() ? \"Running\" : \"Not Running\"), \n      createTableColumn(\"Owner\", 150,  \n       p -> p.info().user() \n        .map(Controller::afterLast) \n        .orElse(\"<unknown>\")), \n      createTableColumn(\"Arguments\", 75,  \n       p -> p.info().arguments().stream() \n        .map(i -> i.toString()) \n        .collect(Collectors.joining(\", \")))); \n```", "```java\n    <MenuBar BorderPane.alignment=\"CENTER\"> \n      <menus> \n        <Menu mnemonicParsing=\"false\" text=\"File\"> \n          <items> \n            <MenuItem mnemonicParsing=\"false\" text=\"Close\" /> \n          </items> \n        </Menu> \n        <Menu mnemonicParsing=\"false\" text=\"Edit\"> \n          <items> \n            <MenuItem mnemonicParsing=\"false\" text=\"Delete\" /> \n          </items> \n        </Menu> \n        <Menu mnemonicParsing=\"false\" text=\"Help\"> \n          <items> \n            <MenuItem mnemonicParsing=\"false\" text=\"About\" /> \n          </items> \n        </Menu> \n      </menus> \n    </MenuBar> \n```", "```java\n    <Menu mnemonicParsing=\"true\" text=\"_File\"> \n      <items> \n        <MenuItem mnemonicParsing=\"true\"  \n          onAction=\"#runProcessHandler\"  \n          text=\"_New Process...\" /> \n        <MenuItem mnemonicParsing=\"true\"  \n          onAction=\"#killProcessHandler\"  \n          text=\"_Kill Process...\" /> \n        <MenuItem mnemonicParsing=\"true\"  \n          onAction=\"#closeApplication\"  \n          text=\"_Close\" /> \n      </items> \n    </Menu> \n```", "```java\n    @FXML \n    public void methodName(ActionEvent event) \n```", "```java\n    @FXML \n    public void closeApplication(ActionEvent event) { \n      Platform.exit(); \n    } \n```", "```java\n    @FXML \n    public void killProcessHandler(final ActionEvent event) { \n      new Alert(Alert.AlertType.CONFIRMATION,  \n      \"Are you sure you want to kill this process?\",  \n      ButtonType.YES, ButtonType.NO) \n       .showAndWait() \n       .filter(button -> button == ButtonType.YES) \n       .ifPresent(response -> { \n         ProcessHandle selectedItem =  \n          processView.getSelectionModel() \n           .getSelectedItem(); \n         if (selectedItem != null) { \n           selectedItem.destroy(); \n           processListUpdater.updateList(); \n         } \n       }); \n    } \n```", "```java\n    @FXML \n    public void runProcessHandler(final ActionEvent event) { \n      final TextInputDialog inputDlg = new TextInputDialog(); \n      inputDlg.setTitle(\"Run command...\"); \n      inputDlg.setContentText(\"Command Line:\"); \n      inputDlg.setHeaderText(null); \n      inputDlg.showAndWait().ifPresent(c -> { \n        try { \n          new ProcessBuilder(c).start(); \n        } catch (IOException e) { \n            new Alert(Alert.AlertType.ERROR,  \n              \"There was an error running your command.\") \n              .show(); \n          } \n      }); \n    } \n```", "```java\n    <TableView fx:id=\"processView\" BorderPane.alignment=\"CENTER\"> \n      <contextMenu> \n        <ContextMenu> \n          <items> \n            <MenuItem onAction=\"#killProcessHandler\"  \n               text=\"Kill Process...\"/> \n          </items> \n        </ContextMenu> \n      </contextMenu> \n    </TableView> \n```", "```java\n    private class ProcessListUpdater extends Thread { \n      private volatile boolean running = true; \n\n      public ProcessListRunnable() { \n        super(); \n        setDaemon(true); \n      } \n\n      public void shutdown() { \n        running = false; \n      } \n\n      @Override \n      public void run() { \n        while (running) { \n          updateList(); \n          try { \n            Thread.sleep(5000); \n          } catch (InterruptedException e) { \n              // Ignored \n            } \n        } \n      }  \n\n      public synchronized void updateList() { \n        processList.setAll(ProcessHandle.allProcesses() \n          .collect(Collectors.toList())); \n        processView.sort(); \n      } \n    } \n```", "```java\n    @Override \n    public void initialize(URL url, ResourceBundle rb) { \n      processListUpdater = new ProcessListUpdater(); \n      processListUpdater.start(); \n      // ... \n    } \n```", "```java\n    processListUpdater.shutdown(); \n```"]