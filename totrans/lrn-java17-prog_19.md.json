["```java\nclass SomeClass {\n```", "```java\n    public int someMethod(int m, int s) {\n```", "```java\n        int res = 0;\n```", "```java\n        for(int i = 0; i < m; i++){\n```", "```java\n            int n = i * i;\n```", "```java\n            if (n != 0 && n % s == 0) {\n```", "```java\n                res =+ n;\n```", "```java\n            }\n```", "```java\n        }\n```", "```java\n        return res;\n```", "```java\n    }\n```", "```java\n}\n```", "```java\npublic void testCode() {\n```", "```java\n   StopWatch stopWatch = new StopWatch();\n```", "```java\n   stopWatch.start();\n```", "```java\n   int xN = 100_000;\n```", "```java\n   int m = 1000;\n```", "```java\n   for(int x = 0; i < xN; x++) {\n```", "```java\n        int res = 0;\n```", "```java\n        for(int i = 0; i < m; i++){\n```", "```java\n            int n = i * i;\n```", "```java\n            if (n != 0 && n % 250_000 == 0) {\n```", "```java\n                res += n;\n```", "```java\n            }\n```", "```java\n        }\n```", "```java\n    }\n```", "```java\n    System.out.println(\"Average time = \" + \n```", "```java\n           (stopWatch.getTime() / xN /m) + \"ms\");\n```", "```java\n}\n```", "```java\npublic int testCode() {\n```", "```java\n   StopWatch stopWatch = new StopWatch();\n```", "```java\n   stopWatch.start();\n```", "```java\n   int xN = 100_000;\n```", "```java\n   int m = 1000;\n```", "```java\n   int res = 0;\n```", "```java\n   for(int x = 0; i < xN; x++) {\n```", "```java\n        for(int i = 0; i < m; i++){\n```", "```java\n            int n = i * i;\n```", "```java\n            if (n != 0 && n % 250_000 == 0) {\n```", "```java\n                res += n;\n```", "```java\n            }\n```", "```java\n        }\n```", "```java\n   }\n```", "```java\n   System.out.println(\"Average time = \" + \n```", "```java\n          (stopWatch.getTime() / xN / m) + \"ms\");\n```", "```java\n   return res;\n```", "```java\n}\n```", "```java\npublic void testCode() {\n```", "```java\n   StopWatch stopWatch = new StopWatch();\n```", "```java\n   stopWatch.start();\n```", "```java\n   int xN = 100_000;\n```", "```java\n   int m = 1000;\n```", "```java\n   SomeClass someClass = new SomeClass();\n```", "```java\n   for(int x = 0; i < xN; x++) {\n```", "```java\n        someClass.someMethod(m, 250_000);\n```", "```java\n    }\n```", "```java\n    System.out.println(\"Average time = \" + \n```", "```java\n          (stopWatch.getTime() / xN / m) + \"ms\");\n```", "```java\n}\n```", "```java\n<dependency>\n```", "```java\n    <groupId>org.openjdk.jmh</groupId>\n```", "```java\n    <artifactId>jmh-core</artifactId>\n```", "```java\n    <version>1.21</version>\n```", "```java\n</dependency>\n```", "```java\n<dependency>\n```", "```java\n    <groupId>org.openjdk.jmh</groupId>\n```", "```java\n    <artifactId>jmh-generator-annprocess</artifactId>\n```", "```java\n    <version>1.21</version>\n```", "```java\n</dependency>\n```", "```java\npublic class BenchmarkDemo {\n```", "```java\n    public static void main(String... args) throws Exception{\n```", "```java\n        org.openjdk.jmh.Main.main(args);\n```", "```java\n    }\n```", "```java\n    @Benchmark\n```", "```java\n    public void testTheMethod() {\n```", "```java\n        int res = 0;\n```", "```java\n        for(int i = 0; i < 1000; i++){\n```", "```java\n            int n = i * i;\n```", "```java\n            if (n != 0 && n % 250_000 == 0) {\n```", "```java\n                res += n;\n```", "```java\n            }\n```", "```java\n        }\n```", "```java\n    }\n```", "```java\n}\n```", "```java\n@BenchmarkMode(Mode.AverageTime)\n```", "```java\n@BenchmarkMode({Mode.Throughput, Mode.AverageTime, Mode.SampleTime, Mode.SingleShotTime}\n```", "```java\n@BenchmarkMode(Mode.All)\n```", "```java\n@OutputTimeUnit(TimeUnit.NANOSECONDS)\n```", "```java\n@Warmup(iterations = 5, time = 100, \n```", "```java\n                          timeUnit =  TimeUnit.MILLISECONDS)\n```", "```java\n@Measurement(iterations = 5, time = 100, \n```", "```java\n                           timeUnit = TimeUnit.MILLISECONDS)\n```", "```java\n@Fork(10)\n```", "```java\n@Fork(value = 10, warmups = 5)\n```", "```java\n@Fork(value = 10, jvmArgs = {\"-Xms2G\", \"-Xmx2G\"})\n```", "```java\n@Benchmark\n```", "```java\n@BenchmarkMode(Mode.All)\n```", "```java\n@OutputTimeUnit(TimeUnit.NANOSECONDS)\n```", "```java\npublic void testTheMethod0() {\n```", "```java\n    int res = 0;\n```", "```java\n    for(int i = 0; i < 1000; i++){\n```", "```java\n        int n = i * i;\n```", "```java\n        if (n != 0 && n % 250_000 == 0) {\n```", "```java\n            res += n;\n```", "```java\n        }\n```", "```java\n    }\n```", "```java\n}\n```", "```java\n@Benchmark\n```", "```java\n@BenchmarkMode(Mode.All)\n```", "```java\n@OutputTimeUnit(TimeUnit.NANOSECONDS)\n```", "```java\npublic void testTheMethod1() {\n```", "```java\n    SomeClass someClass = new SomeClass();\n```", "```java\n    int i = 1000;\n```", "```java\n    int s = 250_000;\n```", "```java\n    someClass.someMethod(i, s);\n```", "```java\n}\n```", "```java\n@State(Scope.Thread)\n```", "```java\npublic static class TestState {\n```", "```java\n    public int m = 1000;\n```", "```java\n    public int s = 250_000;\n```", "```java\n}\n```", "```java\n@Benchmark\n```", "```java\n@BenchmarkMode(Mode.All)\n```", "```java\n@OutputTimeUnit(TimeUnit.NANOSECONDS)\n```", "```java\npublic int testTheMethod3(TestState state) {\n```", "```java\n    SomeClass someClass = new SomeClass();\n```", "```java\n    return someClass.someMethod(state.m, state.s);\n```", "```java\n}\n```", "```java\n@Benchmark\n```", "```java\n@BenchmarkMode(Mode.All)\n```", "```java\n@OutputTimeUnit(TimeUnit.NANOSECONDS)\n```", "```java\npublic void testTheMethod4(TestState state, \n```", "```java\n                                       Blackhole blackhole){\n```", "```java\n  SomeClass someClass = new SomeClass();\n```", "```java\n  blackhole.consume(someClass.someMethod(state.m, state.s));\n```", "```java\n}\n```", "```java\nclass SomeClass{\n```", "```java\n     public int oneMethod(int m, int s) {\n```", "```java\n        int res = 0;\n```", "```java\n        for(int i = 0; i < m; i++){\n```", "```java\n            int n = i * i;\n```", "```java\n            if (n != 0 && n % s == 0) {\n```", "```java\n                res = anotherMethod(res, n);\n```", "```java\n            }\n```", "```java\n        }\n```", "```java\n        return res;\n```", "```java\n    }\n```", "```java\n    @CompilerControl(CompilerControl.Mode.EXCLUDE)\n```", "```java\n    private int anotherMethod(int res, int n){\n```", "```java\n        return res +=n;\n```", "```java\n    }\n```", "```java\n}\n```", "```java\n@State(Scope.Benchmark)\n```", "```java\npublic static class TestState1 {\n```", "```java\n    @Param({\"100\", \"1000\", \"10000\"})\n```", "```java\n    public int m;\n```", "```java\n    public int s = 250_000;\n```", "```java\n}\n```", "```java\n@Benchmark\n```", "```java\n@BenchmarkMode(Mode.All)\n```", "```java\n@OutputTimeUnit(TimeUnit.NANOSECONDS)\n```", "```java\npublic void testTheMethod6(TestState1 state, \n```", "```java\n                                       Blackhole blackhole){\n```", "```java\n  SomeClass someClass = new SomeClass();\n```", "```java\n  blackhole.consume(someClass.someMethod(state.m, state.s));\n```", "```java\n}\n```"]