- en: Chapter 1. Getting Started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the basic tasks related to getting started with
    Apache Maven:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Maven on Microsoft Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Maven on Mac OS X
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Maven on Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the JDK used by Maven
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a simple project with Maven
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a simple project with Maven
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the location of the Maven repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running Maven behind an HTTP proxy server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the standard directory layout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apache Maven is a popular tool for build automation, primarily Java projects.
    Maven addresses two aspects of building software. First, it describes how a software
    is built and, second, it describes its dependencies. It uses conventions for the
    build procedure. An XML file describes the software project being built, its dependencies
    on other external modules and components, the build order, directories, and required
    plugins. It comes with predefined targets to perform certain well-defined tasks,
    such as code compilation and its packaging. Maven dynamically downloads Java libraries
    and Maven plugins from one or more repositories, such as the **Maven Central Repository**,
    and stores them locally.
  prefs: []
  type: TYPE_NORMAL
- en: Ever since Maven 1.0 was released in 2004, it has gained popularity and is today
    the build tool for a large number of open source and commercial projects.
  prefs: []
  type: TYPE_NORMAL
- en: If you are reading this book, then you are not here to understand why Maven
    is required. You are here to explore Maven and unleash the potential that it offers.
    The objective of this book is to make the reader aware of Maven's various features,
    which include installation, configuration, and simple to complex usage by means
    of examples, illustrations, and working projects.
  prefs: []
  type: TYPE_NORMAL
- en: A brief comparison with other build automation tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s briefly discuss some build automation tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Make**: If you are from the C programming world, chances are you have used
    Make. Makefiles are not platform-independent. They are not natively compatible
    with Windows. Thus, they are unsuited to build Java projects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ant**: This is modeled after Make and has targets and dependencies. Each
    target has a set of tasks. Ant doesn''t have any conventions. It is procedural
    and does not have the concept of a build lifecycle. Maven has conventions, is
    declarative, and has a lifecycle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we will cover the basics of Maven—installing the software,
    verifying the installation, and creating, implementing, and building a simple
    Java project. We will also cover a few advanced items, such as changing the location
    of the repository or running Maven behind an HTTP proxy server as it could be
    relevant to those who have issues with the way Maven works by default.
  prefs: []
  type: TYPE_NORMAL
- en: Let us start by setting up Maven. We will cover how to do this on the three
    popular operating systems, namely Microsoft Windows, Mac OS X, and Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Maven on Microsoft Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the time of writing this book, Microsoft Windows 8.1 is the latest version
    of Microsoft Windows. While the screenshots and output will be for Microsoft Windows
    8.1, the steps are similar for earlier (and possibly later) versions as well.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As Maven requires a Java platform, first ensure that you have installed the
    Java environment on your system, **Java Development Kit** (**JDK**) specifically;
    **Java Runtime Environment** (**JRE**) is not sufficient.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can verify whether Java is installed on your system by opening **Add or
    Remove Programs**. If you see something similar to the following screenshot, JDK
    is installed on your system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/6124OS_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also verify the program folder structure from Microsoft Windows Explorer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/6124OS_01_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s start installing Java and Maven by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Set the variable `JAVA_HOME` to point to the Java installation that you want
    Maven to use; for example, you can do this by setting `JAVA_HOME` variable in
    the following way:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that this setting will not be persisted once the command prompt is closed.
    To persist this, set **Environment Variables...** using the **Control Panel**
    option, as described later for the `M2_HOME` variable.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If JDK is not installed on your system, now is the time to download and install
    it from the Oracle Java SE download page at [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once it is installed, ensure `JAVA_HOME` is set as described earlier.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we have set up Java, let us download and set up Maven.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Go to [http://maven.apache.org/](http://maven.apache.org/) and click on the
    **Download** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The links to the latest stable versions of Maven are displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The binaries are available in both, `.zip` and `.tar.gz` formats. Choose one
    of them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extract the downloaded binary to a folder you want Maven to reside in. In this
    case I have chosen `C:\software`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: It is best to avoid folders with spaces as some features of Maven or its plugins
    might not work.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Ensure the contents are similar to the following screenshot:![How to do it...](img/6124OS_01_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The preceding screenshot displays a list of directories contained in Maven.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s briefly discuss what these directories contain:'
  prefs: []
  type: TYPE_NORMAL
- en: The `bin` folder contains the batch files and shell scripts to run Maven on
    various platforms.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `boot` folder contains the jars required for Maven to start.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `conf` folder contains the default `settings.xml` file used by Maven.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `lib` folder contains the libraries used by Maven. It also contains an `ext`
    folder in which third-party extensions, which can extend or override the default
    Maven implementation, can be placed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now let us make sure we can run Maven from the command prompt by carrying out
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open **Control Panel**:![How to do it...](img/6124OS_01_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **Advanced system settings**:![How to do it...](img/6124OS_01_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Environment Variables...**. Add the `M2_HOME` variable and set it
    to the folder where Maven was extracted.![How to do it...](img/6124OS_01_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit the `PATH` variable to include Maven's `bin` folder:![How to do it...](img/6124OS_01_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A Maven installation is essentially a set of JAR files, configuration files,
    and a Microsoft Windows batch file, `mvn.bat`.
  prefs: []
  type: TYPE_NORMAL
- en: The `mvn` command essentially runs this batch file. It first checks for `JAVA_HOME`.
    This file is present in the `bin` folder of the Maven installation and, hence,
    it needs to be in `PATH`.
  prefs: []
  type: TYPE_NORMAL
- en: If the batch file does not find `JAVA_HOME`, it looks for `Java` in its `PATH`.
    This can lead to unexpected results, as typically the `Java` in `PATH` is usually
    the JRE and not the JDK.
  prefs: []
  type: TYPE_NORMAL
- en: The batch file then looks for `M2_HOME`, which is the location of the Maven
    installation. It does this so that it can load the libraries that are present.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, it also reads values specified in `MAVEN_OPTS`. This variable
    allows you to run Maven with an additional heap size and other Java parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Using the values for `JAVA_HOME`, `M2_HOME`, and `Maven_OPTS`, the batch file
    runs its main class `org.codehaus.plexus.classworlds.launcher.Launcher`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Verify your Maven installation using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a command prompt in Microsoft Windows and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following output should be displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a simple project with Maven* recipe in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Maven on Mac OS X
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let us look at the steps to install Maven on Mac OS X. This applies to the latest
    version of Mac OS X, namely Yosemite.
  prefs: []
  type: TYPE_NORMAL
- en: Earlier, Apple provided Java for Mac, but stopped doing so from Java 7 onwards.
    Apple Java is not available on recent versions of Mac OS X.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let us check if the Java environment is available on your Mac:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the terminal and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'See if you get an output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command to check if you have Java 8:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should give the following output if Java exists:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, my system has both Java 1.7 and 1.8.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Set `JAVA_HOME` to the desired JDK. This can be done in two ways, depending
    on what you desire:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If this is for the duration of the session, run the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If this is permanent, add the preceding line in `.bash_profile` in your `HOME`
    folder
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ensure you have the JDK installation and not JRE.
  prefs: []
  type: TYPE_NORMAL
- en: If Java is not present, download and install Java from the Oracle Java download
    page at [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: Once installed, verify the Java installation by following the preceding steps.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let us set up Maven on Mac OS X.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s download Maven from its official website by performing the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [http://maven.apache.org/](http://maven.apache.org/) and click on the
    **Download** link. Links to the latest stable versions of Maven will be displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The binaries are available in both `.zip` and `.tar.gz` formats. Choose one
    of them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extract the downloaded binary to the folder you want Maven to reside in. The
    typical location for the Mac is `/usr/local` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will need a super user (su) or administrator access to place the contents
    in the `/usr/local` folder. If you do not have access, you can place the contents
    in a subfolder of your `HOME` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Ensure the contents are similar to the following output by executing the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is shown as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the `M2_HOME` variable as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `PATH` to include Maven''s `bin` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Like `JAVA_HOME`, the preceding settings can be persisted by updating `.bash_profile`
    with the preceding lines.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding steps, we discussed the steps to download Maven from its official
    website. We will now discuss installing Maven using brew. Brew is a popular application
    on Mac OS X to install open source software. If you have brew installed on your
    Mac OS X, run the following command to install Maven:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for the preceding command will be displayed as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/6124OS_01_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Maven installation is essentially a set of JAR files, configuration files,
    and a Mac OS X shell script, namely `mvn`.
  prefs: []
  type: TYPE_NORMAL
- en: The `mvn` command essentially runs this script. It first checks for `JAVA_HOME`.
    This file is present in the `bin` folder of the Maven installation and, hence,
    it needs to be in `PATH`.
  prefs: []
  type: TYPE_NORMAL
- en: If the shell script does not find `JAVA_HOME`, it looks for `Java` in its `PATH`.
    This can lead to unexpected results, as typically the `Java` in `PATH` is usually
    the JRE installation and not JDK.
  prefs: []
  type: TYPE_NORMAL
- en: The shell script then looks for `M2_HOME`, which is the location for the Maven
    installation. It does this so that it can load the libraries that are present.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, it also reads values specified in `MAVEN_OPTS`. This variable
    allows you to run Maven with an additional heap size and other Java parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Using the values for `JAVA_HOME`, `M2_HOME`, and `MAVEN_OPTS`, the shell script
    runs its main class `org.codehaus.plexus.classworlds.launcher.Launcher`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Verify your Maven installation using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a command prompt and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The output for the preceding command should be displayed as shown in the following
    screenshot:![There's more...](img/6124OS_01_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a simple project with Maven* recipe in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Maven on Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let us look at the steps to install Maven on Linux.
  prefs: []
  type: TYPE_NORMAL
- en: While there are many flavors of Linux (Ubuntu, Fedora, RHEL, SUSE, CentOS, and
    so on), the steps to set up Maven are similar.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Maven needs Java, specifically the Java Development Kit (JDK). Using the following
    steps, let us check if it is installed in your Linux system, which is a bit tricky:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a terminal and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'See if you get an output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding output will still not tell you where your Java is installed, which
    is required to set `JAVA_HOME`. You can get this information by performing the
    next set of steps.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Check if `javac` works; it does only if JDK is installed, not JRE:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output for the preceding command is shown as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Find the location of the `javac` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output for the preceding command is shown as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the preceding output, `javac` is a symbolic link to the actual location
    of the file. Try to determine this location in the following way:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output for the preceding command is shown as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'By executing the preceding command, we again got the symbolic link. To get
    the path to the location of `javac`, we execute the following command again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output for the preceding command is shown as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We have now located the folder where JDK is installed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set `JAVA_HOME` to the preceding folder. This can be done in two ways, depending
    on what you desire:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If it is for the duration of the session, run the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If this is permanent, add the preceding line in `.bash_profile` in your `HOME`
    folder.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If Java is not present, download and install Java from the Oracle Java download
    page at [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: If you have an rpm-based Linux distribution, you can download and install `rpm`.
    Otherwise, you can download the `.tar.gz` format of the distribution and extract
    it to a folder of your choice.
  prefs: []
  type: TYPE_NORMAL
- en: In the earlier case, you know exactly where Java is installed and can set `JAVA_HOME`
    correspondingly. Once installed, verify the Java installation by following the
    preceding steps.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let us set up Maven on Linux.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To set up Maven on Linux, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [http://maven.apache.org/](http://maven.apache.org/) and click on the
    **Download** link. The links to latest stable versions of Maven will be displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The binaries are available in both `.zip` and `.tar.gz` formats. For Mac OS
    X and Linux, the preferred download format is `.tar.gz`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extract the downloaded binary to a folder you want Maven to reside in. The typical
    location in Linux is the `/usr/local` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You will need a super user (su) or administrator access to place contents in
    the `/usr/local` folder. If you do not have access, you can place this in a subfolder
    of your `HOME` folder.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Execute the following command, and ensure the contents of the `apache-maven-3.2.5`
    folder are similar to the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output for the preceding command is shown as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the `M2_HOME` variable as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update `PATH` to include Maven''s `bin` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Like `JAVA_HOME`, the preceding settings can be persisted by updating `.bash_profile`.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Maven installation is essentially a set of JAR files, configuration files,
    and a Linux shell script, namely `mvn`.
  prefs: []
  type: TYPE_NORMAL
- en: The `mvn` command essentially runs this script. It first checks for `JAVA_HOME`.
    This file is present in the `bin` folder of the Maven installation and hence needs
    to be in `PATH`.
  prefs: []
  type: TYPE_NORMAL
- en: If the shell script does not find `JAVA_HOME`, it looks for `java` in its `PATH`.
    This can lead to unexpected results, as typically, the `Java` in `PATH` is usually
    JRE and not JDK.
  prefs: []
  type: TYPE_NORMAL
- en: The shell script then looks for `M2_HOME`, which is the location of the Maven
    installation. It does this so that it can load the libraries that are present.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, it also reads values specified in `MAVEN_OPTS`. This variable
    allows you to run Maven with an additional heap size and other Java parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Using the values for `JAVA_HOME`, `M2_HOME`, and `MAVEN_OPTS`, the shell script
    runs its `org.codehaus.plexus.classworlds.launcher.Launcher` main class.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using the following steps, let''s confirm that Maven has been set up correctly,
    by running a Maven command:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a command prompt and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following output should be displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you get an error, recheck the installation steps and repeat them.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a simple project with Maven* recipe in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the JDK used by Maven
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is possible to have more than one version of JDK installed on your system.
    By following some simple steps, you can specify and/or change the JDK to be used
    by Maven.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will recall that, in the earlier section, we used Java SE 7\. Let us now
    change to Java SE 8\. To change the JDK version to Java SE 8 on Microsoft Windows,
    perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'From the command prompt, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Linux or Mac, the command will be:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, run the following command to check the version of Maven installed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To check the version of Maven installed on Microsoft Windows, run the following
    command from the command prompt. You should get the following output. The output
    will be similar for Linux and Mac:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output for the preceding command is shown as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Maven always uses the JDK specified by `JAVA_HOME`, no matter how many JDK installations
    are available on the system. This allows the user the flexibility to change JDKs
    as required or based on the project.
  prefs: []
  type: TYPE_NORMAL
- en: Hence, it is important to ensure `JAVA_HOME` is defined. In the absence of this
    variable, Maven attempts to detect the presence of Java from `PATH`. This is typically
    JRE and not JDK.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a simple project with Maven
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have set up Maven on our favorite operating system and verified
    that it works fine, it is time to create a simple Java project.
  prefs: []
  type: TYPE_NORMAL
- en: Maven makes it easy to bootstrap a new project by creating a bunch of files
    and folders following accepted conventions.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s start creating the first simple project using Maven, by performing the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a command prompt and change the directory to the folder in which you want
    to create your first Maven project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can change the `groupId` and `artifactId` values in the preceding command
    as per your requirement.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You will see Maven downloading a bunch of files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then it will start generating sources:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When Maven has completed generating sources, it will create the project that
    we want:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Did you get an while error running the preceding command to create your simple
    project?
  prefs: []
  type: TYPE_NORMAL
- en: One possibility is that your Maven is behind an HTTP proxy server. If so, see
    the *Running Maven behind an HTTP proxy server* recipe in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at the folder structure that is created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/6124OS_01_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You will notice the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: The Maven project configuration file `pom.xml` is created in the root of the
    `simple-project` folder. We will explore this file in detail in subsequent sections.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A bunch of folders are created:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src\main\java`: This is for Java source files'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src\test\java`: This is for Java test source files'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src\main\resources`: This is for resource files for the project'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src\test\resources`: This is for resource files for the test'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Within each of the preceding folders, a folder structure corresponding to the
    `groupId` (`org.packt.cookbook`) is created.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are essentially Maven conventions at work:'
  prefs: []
  type: TYPE_NORMAL
- en: Maven expects all Java source files to reside `in src\main\java`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Similarly, it expects all Java test files to reside in `src\test\java`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It expects all project resources to reside in `src\main\resources` and test
    resources to reside in `src\test\resources`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It expects that source files will typically have the same package structure
    as the `groupId` parameter (though this is not mandatory)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two sample classes, namely `App.java` and `AppTest.java`, are also created and
    it is not expected that they will be used beyond testing how Maven works
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `mvn` command that we used in the *Creating a simple project with Maven*
    recipe in this chapter, tries to invoke the `generate` goal of the `archetype`
    plugin with the specified command-line parameters.
  prefs: []
  type: TYPE_NORMAL
- en: The default Maven installation has minimal features. All features of Maven are
    available as Maven plugins. When given a plugin name, Maven knows where to download
    it from and then run it.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, Maven downloads the `archetype` plugin. This plugin, in turn,
    can depend on another plugin. In this case, the latter plugin gets downloaded.
    This happens in a recursive fashion and, at the end of the process, all the relevant
    plugins required to run the specified command are downloaded.
  prefs: []
  type: TYPE_NORMAL
- en: These plugins are placed in your local repository, which is a location in your
    system. Once downloaded, these are never downloaded again unless deleted.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Running Maven behind an HTTP proxy server* recipe in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a simple project with Maven
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let us now build the project that was created in the preceding section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To build the previously created simple project with Maven, perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the command prompt and run the following command, changing the directory
    to the folder the project was created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Observe the following things in the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Notice the following warning (we will see how to resolve this later in this
    book):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check if the sources are compiled:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check if the tests are run:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: A JAR file is now created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the `mvn package` command, the `package` parameter is a phase in the build
    lifecycle. Maven has a default build lifecycle that has a number of phases. Each
    phase will execute every phase prior to it in order along with the specified phase.
    In this case, the `package` phase executes in the following order:'
  prefs: []
  type: TYPE_NORMAL
- en: Validate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `validate` phase makes sure that the project (specifically the `pom.xml`
    file that describes the project) is in order and all the necessary information
    to run the project is available.
  prefs: []
  type: TYPE_NORMAL
- en: The `compile` phase compiles the sources.
  prefs: []
  type: TYPE_NORMAL
- en: The `test` phase compiles the test sources and then runs the test using a suitable
    test framework. In the earlier example, the **JUnit** framework is used to run
    the tests.
  prefs: []
  type: TYPE_NORMAL
- en: The `package` phase packages the artifacts to the format specified in the `pom.xml`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the location of the Maven repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are three types of Maven repositories:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Local**: This is the repository in your computer filesystem'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Remote**: This is the repository from where the required Maven files get
    downloaded'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mirrors**: These are repository managers, such as **Nexus** and **Artifactory**,
    that mirror various repositories'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You will have seen Maven downloading a number of files (called poms and jars).
    Let us see where they are located in your computer:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to your `HOME` folder (`C:\Users\username`) in the case of Microsoft Windows,
    `/Users/username` for Mac, and, `/home/username` (or a similar location) for Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will notice the `.m2` folder and within that, a subfolder called `repository`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Any folder that starts with a dot (`.`) is typically hidden from view. You will
    need to change your folder viewer settings to see it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You will see a number of folders and files that are used by Maven
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You may want to change this location for the following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: You may want to conserve space in the `C` drive and store these folders and
    files in the `D` drive on Microsoft Windows.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You may want to take a back up of the contents. Backup software usually backs
    up contents in specific folders of the filesystem.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your organization may have a policy for all users to store a local repository
    in the same folder.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To change the location of the Maven repository, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a file called `settings.xml` in the `.m2` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following contents to the settings.xml file that you just created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notice the highlighted part of the preceding code. We have changed the location
    of the repository contents to C:\software\maven. You can change it to any valid
    folder name.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Delete the `repository` subfolder and run the `mvn package` command again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will now notice that the `repository` folder is not created in the `.m2`
    folder. Instead, it is created in `C:\software\maven`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Maven determines the location of the local repository in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: If `settings.xml` exists in the user's `.m2` folder, which contains the `<localRepository>`
    tag, then Maven uses its contents to determine the location
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If not, Maven will check if `localRepository` is explicitly defined in the default
    `settings.xml`, present in the `conf` folder of the Maven installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If it is not present there, Maven will use the default value for the local repository,
    which is the user's `.m2` folder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running Maven behind an HTTP proxy server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most organizations do not allow devices in their network to access the Internet
    directly for security and other reasons. In such cases, typically, a proxy server
    comes into picture. The proxy server details are specified in the browser or any
    other location where access to the Internet is required.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s start running Maven behind an HTTP proxy server, by performing the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a `settings.xml` file in the `.m2` folder in your `HOME` directory, if
    it does not exist already.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code within the `settings` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If the proxy server does not need authentication, the `username` and `password`
    tags can be omitted.
  prefs: []
  type: TYPE_NORMAL
- en: The `nonProxyHosts` tag allows you to specify locations that can be accessed
    directly (for instance, your intranet). This can be skipped if not relevant.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Maven needs Internet access to download plugins and dependencies. When Maven
    runs, it reads the user's `settings.xml` file, if it exists. It checks for any
    active proxy settings and applies the same.
  prefs: []
  type: TYPE_NORMAL
- en: Maven uses the values in the proxy settings to download any artifacts from the
    repository. If there are no artifacts to be downloaded, then these values are
    not used.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The HTTP proxy server may work only in your organization's network. If you are
    running Maven from a different network, you may want to turn off the HTTP proxy
    server. This can be done by setting the `active` tag to `false` in the preceding
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the standard directory layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we built our sample Java project earlier, we saw files being compiled,
    tests being run, and a JAR being generated. We do not know where these artifacts
    were created.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s find where the artifacts were created by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the folder that has the sample Maven project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `target` subfolder that was created:![How to do it...](img/6124OS_01_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When Maven runs, it puts all the contents that it generates into a separate
    folder. This is to distinguish it from any user-generated content. Let us examine
    the contents of this folder:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `classes` folder: Compiled source files are placed in this folder. This
    folder will also contain resources, such as XML and property files that are part
    of the source, placed in `src/main/resources`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `test-classes` folder: Compiled test source files are available in this
    folder. In addition, it also contains test resources, which are files required
    for the purpose of testing, but not for running the project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `surefire-reports` folder: Test reports are separately placed in this folder.
    Typically, both XML and HTML report formats are available. The latter can be opened
    in the browser, while the former can be integrated with a code coverage tool.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The output `.jar` file: The generated project artifact is also present in this
    folder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two other folders—`maven-archiver` and `maven-status`—hold information used
    by Maven during the build.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
