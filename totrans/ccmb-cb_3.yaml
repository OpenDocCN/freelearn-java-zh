- en: Chapter 3. Enabling Fixtures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Tagging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ANDing and ORing Tags
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding Hooks to Cucumber code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tagging the Hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ANDing and ORing the Tagged Hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will discuss how to get control of what Features to run,
    and when to run them; for example, we may want to run only one set of Feature
    files like Sanity, or we may want to take a screenshot after each Scenario. This
    type of control is called **fixtures**. Cucumber allows us to enable fixtures
    via the concepts of Tags and Hooks. With knowledge of the concepts covered in
    this chapter, you will be able to write very effective and efficient fixtures.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will start with basic concepts of Tags and Hooks followed
    by ANDing and ORing them. Then we will cover the power of Tag and Hook combinations.
  prefs: []
  type: TYPE_NORMAL
- en: Tagging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s assume you are an automation architect and you have to run a specific
    set of Scenarios or Feature files. This situation may occur often: let''s say
    we have made changes to one functionality and now we want to run Features/Scenarios
    of that functionality only.'
  prefs: []
  type: TYPE_NORMAL
- en: Now let's understand how we can Tag some Scenarios as Sanity, some as Regression,
    and some as both. Let's see in our next section.
  prefs: []
  type: TYPE_NORMAL
- en: Now, there is the `home_page.feature` file and we want to Tag it as important.
    We also want to Tag some Scenarios as `sanity` and some as `regression` or some
    as both. So, how do we do this in a Cucumber project? Let's see in our next section.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s use the following Feature file for this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to simply write `@sanity` or `@regression` before the Scenario and
    `@important` in front of the Feature file. Refer to the highlighted text in the
    code. This is how our updated `home_page.feature` file should look:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the Command Prompt and go to the `project` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the following command to run the Feature file that has been tagged as `important`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We will explore this command in detail in the next chapter—use it as it is for
    time being.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We will get this output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00135.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Although there are many Feature files in our project, only the Feature file
    that is Tagged as important is run, and that's why all the Scenarios were also
    run.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, run the following command in the command prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This is the output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00136.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Now, only two Scenarios are executed and both the Scenarios that are executed
    are Tagged as `@sanity`. So it is clear that whichever Scenarios are mentioned
    while running Cucumber, only those Scenarios are run.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tags are used to organize Feature files and Scenarios. You Tag a Scenario by
    putting a word prefixed with the `@` character on the line before the `Scenario`
    keyword.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A Feature/Scenario can have multiple Tags; just separate them with spaces or
    put them on a different line.
  prefs: []
  type: TYPE_NORMAL
- en: Inheritance is when Tags are inherited. If a Feature file has a Tag, then Cucumber
    will assign that Tag to all Scenarios and all Scenario Outlines in that Feature
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can customize your run by using `--tags` when running Cucumber test cases
    from the Terminal. A few examples are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mvn test -Dcucumber.options="--tags @important"` will run all Scenarios (because
    we are running a Tag associated with Feature).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mvn test -Dcucumber.options="--tags @sanity"` will run Scenarios associated
    with `@sanity`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The `~` special character in front of any Tag tells Cucumber to ignore all the
    Scenarios associated with that Tag.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`mvn test -Dcucumber.options="--tags ~@important"` will run test cases that
    do not have the `@important` Tag associated with them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ANDing and ORing Tags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most of the time, changes are made to many functionalities simultaneously; so
    it becomes imperative for testers to test all those functionalities. Sometimes
    we have to run all the Scenarios marked as `@sanity` and `@regression` and sometimes
    we want to run all Scenarios for `feature1` or `feature2`. So how do we do this
    in Cucumber? Let's see that in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is the `Feature` file we will use for this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If we want to run the Scenarios which are Tagged `sanity` and `regression`
    both, then run the following command in the command prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This is the output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00137.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Running only one Scenario which is Tagged both `@sanity` and `@regression`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If we want to run, the Scenarios which are Tagged either `sanity` or `regression`,
    then run the following command in the command prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This is the output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00138.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Running the Scenarios that are tagged as either `@sanity` or `@regression`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the `home_page.feature` file to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If we want to run the Scenarios which are either Tagged `@sanity AND @wip`
    or `@regression AND @wip`, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This is the output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00139.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now let''s understand why we ANDed and ORed the Tags in the preceding section:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ANDing**: When we want to run the Scenarios with all the mentioned Tags.
    Tags have to be mentioned in separate `--tags` options; for example, `mvn test
    -Dcucumber.options="--tags @sanity --tags @Regression"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ORing**: When we want to run the Scenarios with either of the mentioned Tags.
    Tags have to be mentioned in single `–tags` options but should be comma separated;
    for example, `mvn test -Dcucumber.options="--tags @wip,@sanity"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: ANDing and ORing can be combined to achieve greater flexibility in achieving
    what to run.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Adding Hooks to Cucumber code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After finding out how to run a few selective Features, the next great thing
    is running some code before or after test Scenarios. These are very basic and
    desired Features for Test Automation Frameworks. Examples of this could be initializing
    the browser before the execution starts and closing the browser after the execution
    is complete. So how do we do this in Cucumber? Let's take a look at this in this
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, we are going to update the `home_page.feature` file to the
    one shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the `automation` package, create one java class `Hooks.java` and put the
    following code in it (focus on the bold and highlighted text):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, run the home`_page.feature` file from Eclipse itself and note the output:![How
    to do it…](img/image00140.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Hooks**: Cucumber allows us to run a piece of code at certain points in test
    case execution. This is implemented via Hooks. The real-life use of this involves
    initializing browsers before execution and closing the browser after execution.
    The Hooks code is generally kept in a file called `Hooks.java`, but this is not
    mandatory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**@Before**: The Before Hook is run before all the Scenarios of a `feature`
    file, including the background. If there are multiple `Before` Hooks, then they
    will be run in the order they are written.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**@After**: The After Hook is run after all Scenarios of a `feature` file.
    If there are multiple `After` Hooks, then they will be run in the order they are
    written.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is the order of execution:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Before Hook
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Background
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Scenario
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: After Hook
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although Hooks are run in the order they are written, the `order` parameter
    can be used to define custom execution. The default value is `10000`, and Cucumber
    runs `@Before` Hooks from low to high. A `@Before` Hook with an order of `100`
    will run before one with an order of `20`. An `@After` Hook runs from high to
    low—so an `@After` Hook with an order of `200` will run before one with an order
    of `100`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example: `@Before( order=5 )` and `@After( order =20)`'
  prefs: []
  type: TYPE_NORMAL
- en: Tagging the Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What if we want to execute some piece of code only before certain Scenarios
    and not before all Scenarios? Consider a situation where we want to invoke the
    Selenium Webdriver for the Scenarios related to browser automation and the `REST`
    Client code for Scenarios related to `REST` Services automation. How do we do
    this in Cucumber? Let's see this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, we are going to use update `home_page.feature` like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Update the code of the `Hooks.java` class with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the `home_page.feature` file from Eclipse and save the Cucumber exceptions
    in the `Step Definitions` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `home_page.feature` file again from Eclipse; this is the output you
    will see:![How to do it…](img/image00141.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tagged Hooks are combination of Hooks and Tags. Tagged Hooks are used when we
    want to perform some action only for specific and not all Scenarios. We have to
    add the Tag in parentheses after the Hook to transform it into a tagged Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: ANDing and ORing tagged Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just as we ANDed and ORed the Tags, same way we can `AND` and `OR` the combination
    of Tags and Hooks. Consider a situation where we need to perform certain Steps
    for Features, such as for `feature1` and `feature2` but not for other Features.
    How do we do this in Cucumber? Let's see this in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will update the `home_page.feature` file like this for this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: How to Do it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To run the Hook code before Scenarios Tagged with `@sanity` or `@regression`,
    add the following code to the `hooks.java` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the `feature` file from Eclipse and observe the output:![How to Do it](img/image00142.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The code will be run before all the Scenarios because all Scenarios are either
    Tagged `@sanity` or `@regression`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To run Hooks code for the Scenarios Tagged with `@sanity` `AND @regression`
    both, comment the earlier code in the `Hooks.java` file and add the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the `feature` file from Eclipse and observe the output:![How to Do it](img/image00143.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The code will be run before Scenario 3, which has both Tags `@sanity` and `@regression`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To run the Hooks code for Scenarios Tagged with `@important` but NOT `@regression`,
    comment the preceding code in the `Hooks.java` file and add the following code
    to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the `feature` file from Eclipse and observe the output:![How to Do it](img/image00144.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The code will be run before Scenario 1, which has the `@important` (by inheritance)
    and NOT the `@regression` Tag.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To run Hooks code for Scenarios Tagged with `(important AND regression` OR
    `(important AND wip)`, comment the earlier code in the `Hooks.java` file and add
    the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the `feature` file from Eclipse and observe the output:![How to Do it](img/image00145.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The code will be run before Scenarios 2 and 3, which have the `@important` (by
    inheritance) and `@regression` Tags.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now let's understand the concept of ANDing, ORing, and NOTing the Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: '**OR**: The Hooks code will be run when either of the mentioned Tags is associated
    with the Scenario. Tags are passed in a String and are comma separated. For example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**AND**: The Hooks code will be run when all the mentioned Tags are associated
    with the Scenario. Tags are passed as separate Tag Strings. For example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**NOT**: The Hooks code will be run when all of the mentioned Tags are not
    associated with the Scenario. Tags are passed as separate Tag Strings. For example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
