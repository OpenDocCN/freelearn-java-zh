- en: Chapter 2. Learning the Bukkit API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will be introduced to the **Bukkit** **API** and learn
    what it allows you to accomplish through programming plugins for a Spigot server.
    By the end of the chapter, you will most likely have numerous ideas for plugins
    that you will eventually be able to create yourself. This chapter will cover the
    following topics in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the purpose of an API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding the documentation of the Bukkit API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigating through Javadocs to find specific information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading and understanding the documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring and learning the features of the Bukkit API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**API** stands for **Application Programming Interface**. An API helps control
    how various software components are used. As mentioned in the previous chapter,
    Spigot includes the Minecraft code in a form that is easy for developers to utilize
    when creating plugins. Spigot has a lot of code that we need not access in order
    to create plugins. It also includes code that we should not tamper with, as it
    may cause the server to become unstable. Bukkit provides us with the interfaces
    that we can use to properly modify the game while restricting access to other
    portions of the code. An **interface** is essentially a shell of a class. It includes
    methods, but the methods are empty. The Spigot server contains classes for each
    interface. The classes implement the interfaces and fill each method with the
    appropriate code.'
  prefs: []
  type: TYPE_NORMAL
- en: To explain this better, let's imagine the Bukkit API as a menu to a pizza shop.
    The menu contains different types of pizza, such as pepperoni, Hawaiian, and meat
    lovers. These menu items represent the interfaces within the API, with each interface
    having a method named `makePizza`. At this point, these pizzas cannot be eaten,
    because they are merely a concept. They are just items on a menu. But let's say
    that a pizza shop named *All You Need is Pizza* decides to open up and they use
    this menu, or API. This pizza shop can represent CraftBukkit. The pizza shop creates
    recipes for each item on the menu. This is equivalent to writing code for each
    `makePizza` method within the three interfaces. Thus, these recipes are the classes
    that implement the interfaces. However, these classes are still just a concept.
    It is not until the `makePizza` method is called that you have an instance of
    that class. This instance, or object, will be the tangible pizza that you can
    actually eat. Now, imagine that there is another pizza shop named *Crazy Little
    Thing Called Pizza*, which opens across the street from *All You Need is Pizza*.
    This new pizza shop will represent Spigot. Crazy Little Thing Called Pizza uses
    the exact same menu, or API, as All You Need is Pizza. However, its recipes, or
    implementations of the methods, may be different.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using this same analogy, we can see the benefit of the API. As a customer,
    I can take a look at the menu and assemble an order. For example, I want to order
    a pepperoni pizza and a meat lovers pizza. Since I created my order based on the
    menu and both pizza shops implemented the same menu, either restaurant is able
    to fulfill my order. Likewise, a developer creates a plugin based on the Bukkit
    API. Both **CraftBukkit** and **Spigot** utilize the **Bukkit API**. Therefore,
    they will both support the plugin. The following diagram explains this relation
    between pizza and code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to APIs](img/00011.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Basically, Bukkit acts as a bridge between a plugin and the Spigot server. The
    Spigot team adds new classes, methods, and so on to the API as new features develop
    in Minecraft, but the preexisting code rarely changes. This ensures that Bukkit
    plugins will still function correctly months, or even years, from now even though
    new versions of Minecraft/Spigot are released. For example, if Minecraft were
    to change how an entity's health is handled, we would not see any difference.
  prefs: []
  type: TYPE_NORMAL
- en: The Spigot jar will account for this change by filling the `getHeath` method
    with the updated code. Then, when the plugin calls the `getHealth` method, it
    will function exactly as it had before the update. The addition of new Minecraft
    features, such as new items, is another example of how great the Bukkit API is.
    Let's say that we've created a plugin that gives food an expiration date. To check
    whether an item is food, we'll use the `isEdible` method. Minecraft continues
    to create new items. If one of these new items is **Pumpkin Bread**, Spigot will
    flag that type of item as edible and will therefore be given an expiration date
    by our plugin. A year from now, new food items will still be given expiration
    dates without us needing to change any of our code.
  prefs: []
  type: TYPE_NORMAL
- en: The Bukkit API documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Documentation of the Bukkit API can be found at [hub.spigotmc.org/javadocs/bukkit/](http://hub.spigotmc.org/javadocs/bukkit/).
    The Bukkit.jar file that you built in [Chapter 1](part0014_split_000.html#DB7S1-b66e70deee6e4ed481db4b113e303f23
    "Chapter 1. Deploying a Spigot Server"), *Deploying a Spigot Server* also contains
    the Spigot API, which can be found at [hub.spigotmc.org/javadocs/spigot/](http://hub.spigotmc.org/javadocs/spigot/).
    The Spigot API is a **superset** of the Bukkit API, which means that it contains
    all the classes, interfaces, and so on that are present in the Bukkit API, as
    well as some additional classes that are unique to the Spigot project. If you
    want your plugin to support Spigot and CraftBukkit servers, then you will want
    to develop by using the Bukkit API. If you choose to only support Spigot servers,
    then you can develop using the Spigot API. In this book, we will refer to the
    Bukkit API. However, using the Spigot API will yield the same results.
  prefs: []
  type: TYPE_NORMAL
- en: Navigating through the Bukkit API documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can go through the Bukkit API documentation to get a general idea of what
    we can modify on a Spigot server. Server-side plugins are different from client-side
    mods in that we are limited with what we are able to modify in the game using
    server-side plugins. For example, we cannot create a new type of block, but we
    can make lava blocks rain from the sky. We cannot make zombies look and sound
    like dinosaurs, but we can put a zombie on a leash, change its name to Fido, and
    have it not burn in the daylight. For the most part, you cannot change the visual
    aspect of the game, but you can change how it functions. This ensures that everyone
    who connects to the server with a standard Minecraft client will have the same
    experience.
  prefs: []
  type: TYPE_NORMAL
- en: 'For some more examples on what we can do, let''s have a look at the various
    pages of the API''s documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Navigating through the Bukkit API documentation](img/00012.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You will see that the classes and interfaces within the API are selectable in
    the lower left section of the **Javadoc**. Selecting a package in the upper left
    narrows the choices in the section below it. Each type, such as a class or interface,
    is organized into a package. These packages help group similar classes together.
    For example, `Cow`, `Player`, and `Zombie` are all types of entities and thus
    can be found in the `org.bukkit.entity` package. So, if I were to say that the
    `World` interface can be found at `org.bukkit.World`, then you will know that
    you can find `World` within the `org.bukkit` package. Knowing this will help you
    find the classes or interfaces that you are looking for. You can always use *Ctrl
    + F* to search for a specific word on the webpage. This can help in finding a
    specific class in a long list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at the `World` class and see what it has to offer. The classes
    are listed in alphabetical order. So, we will find **World** near the end of the
    list within the `org.bukkit` package. When you click on the `World` class link,
    all of its methods will be displayed in the main column of the site under the
    **Method Summary** header, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Navigating through the Bukkit API documentation](img/00013.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: A `World` object is an entire world on your server. By default, a Minecraft
    server has multiple worlds, including the main world, nether world, and end world.
    Spigot even allows you to add additional worlds. The methods that are listed in
    the `World` class can be applied to the specific world object. For example, the
    `Bukkit.getWorlds` method will give you a list of all the worlds that are on the
    server; each one is unique. Therefore, if you call the `getName` method on the
    first world, it may return `world` while, calling the same method on the second
    world may return `world_nether`.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Java documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s look at a method that is included in the `World` class to see what information
    it provides us. Click on the link to view the `createExplosion(Location loc, float
    power, boolean setFire)` method. You will be brought to a method description that
    is similar to the one shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding the Java documentation](img/00014.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The screenshot explains each parameter and the return value for the method.
    This method requires that we pass three parameters to it, which is explained as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Where the explosion should take place
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How powerful the explosion should be
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whether the explosion should cause the surrounding blocks to ignite in flames
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the returned value is `void`, then the method will not send any information
    back to us. In this example, the method returns a `boolean` value. On reading
    the documentation, you will learn that the returned value is whether or not the
    explosion actually occurred. If another plugin prevented the explosion from happening,
    then the `createExplosion` method will return `false`.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the Bukkit API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that you are familiar with the Bukkit API documentation, I advise you to
    look through it on your own. You will find interesting methods; many of these
    methods will spark ideas for cool plugins that you may want to make. Note that
    there may be additional links to view more methods for an object. For example,
    a `Player` is a type of **LivingEntity**. Therefore, you can call a **LivingEntity**
    method on a `Player` object. This inheritance is shown after the method summary,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploring the Bukkit API](img/00015.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you are ever going to try and think up an idea for a plugin, browsing through
    the API documentation will surely give you some ideas. I suggest reading the class
    pages, listed as follows, as they will be the classes that you will frequently
    use in your future plugins:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Class | Package | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `World` | `org.bukkit` | A world on the server |'
  prefs: []
  type: TYPE_TB
- en: '| `Player` | `org.bukkit.entity` | A person who is playing on the server |'
  prefs: []
  type: TYPE_TB
- en: '| `Entity` | `org.bukkit.entity` | A player, mob, item, projectile, vehicle,
    and so on |'
  prefs: []
  type: TYPE_TB
- en: '| `Block` | `org.bukkit.block` | A specific block in the world, such as a dirt
    block or a chest |'
  prefs: []
  type: TYPE_TB
- en: '| `Inventory` | `org.bukkit.inventory` | The inventory of a player, chest,
    furnace, and so on |'
  prefs: []
  type: TYPE_TB
- en: '| `ItemStack` | `org.bukkit.inventory` | An item that is in an inventory, which
    includes how many items are present |'
  prefs: []
  type: TYPE_TB
- en: '| `Location` | `org.bukkit` | The location of an entity or a block |'
  prefs: []
  type: TYPE_TB
- en: '| `Material` | `org.bukkit` | The type of a block or item, such as `DIRT`,
    `STONE`, or `DIAMOND_SWORD` |'
  prefs: []
  type: TYPE_TB
- en: '| `Bukkit` | `org.bukkit` | Contains many useful methods that can be called
    from anywhere in your code |'
  prefs: []
  type: TYPE_TB
- en: Now that you understand how to read the Bukkit Java documentation, you can find
    answers to the various questions that you may have. For example, what if you want
    to find out which methods you would call to get the Block that is at `x:20 y:64
    z:14` in the world that is named "world"?
  prefs: []
  type: TYPE_NORMAL
- en: First, you will need to retrieve the correct `World` object. The initial place
    that you may check is the Bukkit class, as listed in the previous table. You may
    check there because you can call these methods from anywhere in your code. Another
    option is to view the uses of the `World` class. This can be done by clicking
    on the **Use** link at the top of the **World** page. There, you can see all the
    methods that return a `World` object as well as methods that accept a `World`
    object as a parameter. To aid in searching through a page, remember that you can
    use *Ctrl + F*. Searching for *name* will lead you to the `Bukkit.getWorld` method,
    which takes the name of the world as a parameter and returns the actual `World`
    object.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have the `World` object, you will want to find a method that will give
    you the `Block` at a specific location. You could navigate to the World page and
    use *Ctrl + F* to search for *block*, *location*, *x*, *y*, or *z*. If none of
    these help you find a useful method, then you can always view the uses of Block
    in a way that is similar to how we viewed the uses of World. Either way, you will
    find the `World.getBlockAt` method, which can be called on the `World` object
    that you discovered in the previous step.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are a few additional challenges to guide you while exploring
    the Bukkit API on your own and becoming familiar with it:'
  prefs: []
  type: TYPE_NORMAL
- en: Which method would you call to check what time it is in a world?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which methods would you call to send a message to the player whose name is Steve?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which methods would you call to check whether the material of a block is flammable?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which method would you call to check whether a player has diamonds in their
    inventory?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which methods would you call to check whether a player is holding an item that
    is edible?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have any trouble figuring out any of the problems mentioned in the challenges
    or with any other portion of the Bukkit API you can ask help from the Spigot forums
    ([www.spigotmc.org/forums](http://www.spigotmc.org/forums)), the official IRC
    channel for Spigot ([www.spigotmc.org/pages/irc](http://www.spigotmc.org/pages/irc)),
    and the Minecraft forums ([www.minecraftforum.net](http://www.minecraftforum.net)).
  prefs: []
  type: TYPE_NORMAL
- en: You can also contact me directly or visit my website at [www.codisimus.com](http://www.codisimus.com).
    I am always interested in helping out a fellow developer.
  prefs: []
  type: TYPE_NORMAL
- en: You now have the knowledge required to begin programming your own Bukkit plugins.
    As we did in this chapter, we will have to refer to the documentation to find
    the required information. Being able to navigate and understand the API documentation
    will speed up the process of coding. If you are ever unsure of a section of the
    API, you now know how to find the information that you need. In the next chapter,
    we'll use the Bukkit API to begin writing code to create your first Bukkit plugin.
  prefs: []
  type: TYPE_NORMAL
