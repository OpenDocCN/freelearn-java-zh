["```java\nString str = \"Scala is a multi-paradigm language. Scala is scalable too.\"\nint count = 0;\nfor (stringy: str.split (\" \")) {\n    if (word.equals (stringy))\n        count++;\n}\nSystem.out.println (\"Word\" + word + \" occurred \" + count + \" times.\")\n```", "```java\nval str = \"Scala is a multi-paradigm language. Scala is scalable too.\"\nprintln (\"Word\" + word + \" occurred \" + str.split(\" \").filter(_ == word).size + \" times.\")\n```", "```java\npackage scala\ntrait Function1[A, B] {\n        def apply(x: A) : B\n}\n```", "```java\nval answer = new Functiona1[Int, Int] {\n        def apply(x: Int): Int = x * 2\n}\n```", "```java\nclass YearsAndMonths(years: Int, months: Int)\ndef age(birthdate: Date): YearsAndMonths = //Some Logic\n```", "```java\nval words = Map (\"Wisdom\" -> \"state of being wise\")\nprintln(words(\"Wisdom\"))\n\n> state of being wise\n```", "```java\nf : R -> N\n```", "```java\nsbt sbt-version\n[info] 0.13.11\n```", "```java\nsbt console\n```", "```java\npackage lsp\n\nobject First {\n  def main(args: Array[String]): Unit = {\n  val double: (Int => Int) = _ * 2\n    (1 to 10) foreach double .andThen(println)\n  }\n}\n```", "```java\n(1 to 10) foreach double .andThen(println)\n```", "```java\npackage lsp\n\nobject FirstApp extends App {\n val double: (Int => Int) = _ * 2\n  (1 to 10) foreach double .andThen(*print*)\n}\n```"]