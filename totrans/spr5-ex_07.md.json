["```java\n<dependency>\n  <groupId>org.springframework.cloud</groupId>\n  <artifactId>spring-cloud-config-server</artifactId>\n</dependency>\n```", "```java\npackage springfive.airline.configserver;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.config.server.EnableConfigServer;\n\n@EnableConfigServer\n@SpringBootApplication\npublic class ConfigServerApplication {\n\n  public static void main(String[] args) {\n    SpringApplication.run(ConfigServerApplication.class, args);\n  }\n\n}\n```", "```java\nserver:\n  port: 5000\n\nspring:\n  cloud:\n    config:\n      name: configserver\n      server:\n        git:\n          uri: https://github.com/PacktPublishing/Spring-5.0-By-Example search-paths: config-files*\n```", "```java\n<application-name>-<profile>.<properties|yaml>\n```", "```java\ninfo:\n  message: \"Testing my Config Server\"\n  status: \"It worked\"\n```", "```java\ncurl http://localhost:5000/dummy/default | jq\n```", "```java\npackage springfive.airline.eureka;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;\n\n@EnableEurekaServer\n@SpringBootApplication\npublic class EurekaApplication {\n\n  public static void main(String[] args) {\n    SpringApplication.run(EurekaApplication.class, args);\n  }\n\n}\n```", "```java\nserver:\n  port: 8761\n\neureka:\n  instance:\n    hostname: localhost\n    health-check-url-path: /actuator/health\n    status-page-url-path: /actuator/info \n  client:\n    registerWithEureka: false\n    fetchRegistry: false\nlogging:\n  level:\n    com.netflix.discovery: 'ON'\n    org.springframework.cloud: 'DEBUG'\n```", "```java\nspring:\n  application:\n    name: discovery\n  cloud:\n    config:\n      uri: http://localhost:5000\n      label: master\n```", "```java\n2018-01-07 14:42:42.636  INFO 11191 --- [      Thread-32] e.s.EurekaServerInitializerConfiguration : Started Eureka Server\n```", "```java\nversion: '3'\nservices:\n\n  rabbitmq:\n    hostname: rabbitmq\n    image: rabbitmq:3.7.0-management-alpine\n    ports:\n      - \"5672:5672\"\n      - \"15672:15672\"\n    networks:\n      - airline\n\n  mysql:\n    hostname: mysql\n    image: mysql:5.7.21\n    ports:\n      - \"3306:3306\"\n    environment:\n      - MYSQL_ROOT_PASSWORD=root\n      - MYSQL_DATABASE=zipkin\n    networks:\n      - airline\n\n  mongo:\n    hostname: mongo\n    image: mongo\n    ports:\n      - \"27017:27017\"\n    networks:\n      - airline  \n\n  redis:\n    hostname: redis\n    image: redis:3.2-alpine\n    ports:\n      - \"6379:6379\"\n    networks:\n      - airline\n\nnetworks:\n  airline:\n    driver: bridge\n```", "```java\n<dependency>\n <groupId>org.springframework.cloud</groupId>\n <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n</dependency>\n\n<dependency>\n <groupId>org.springframework.boot</groupId>\n <artifactId>spring-boot-starter-jdbc</artifactId>\n</dependency>\n\n<dependency>\n <groupId>mysql</groupId>\n <artifactId>mysql-connector-java</artifactId>\n <version>6.0.6</version>\n</dependency>\n```", "```java\npackage springfive.airline;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.netflix.eureka.EnableEurekaClient;\nimport org.springframework.cloud.sleuth.zipkin.stream.EnableZipkinStreamServer;\n\n@SpringBootApplication\n@EnableZipkinStreamServer\n@EnableEurekaClient\npublic class ZipkinServerApplication {\n\n public static void main(String[] args) {\n  SpringApplication.run(ZipkinServerApplication.class, args);\n }\n\n}\n```", "```java\nspring:\n  application:\n    name: zipkin\n  cloud:\n    config:\n      uri: http://localhost:5000\n      label: master\n```", "```java\nserver:\n  port: 9999\n\nspring:\n  rabbitmq:\n    port: 5672\n    host: localhost\n  datasource:\n    schema: classpath:/mysql.sql\n    url: jdbc:mysql://${MYSQL_HOST:localhost}/zipkin?autoReconnect=true\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    username: root\n    password: root\n    initialize: true\n    continue-on-error: true\n  sleuth:\n    enabled: false\n\nzipkin:\n  storage:\n    type: mysql\n\nlogging:\n  level:\n    ROOT: INFO\n\neureka:\n  client:\n    serviceUrl:\n      defaultZone: http://localhost:8761/eureka/\n```", "```java\n<dependency>\n <groupId>org.springframework.cloud</groupId>\n <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n</dependency>\n```", "```java\npackage springfive.airline.gateway;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.netflix.eureka.EnableEurekaClient;\n\n@EnableEurekaClient @SpringBootApplication\npublic class GatewayApplication {\n\n public static void main(String[] args) {\n  SpringApplication.run(GatewayApplication.class, args);\n }\n\n}\n```", "```java\nserver:\n  port: 8888\neureka:\n  client:\n    serviceUrl:\n      defaultZone: http://localhost:8761/eureka/\nlogging:\n  level: debug\n```", "```java\nspring:\n  application:\n      name: gateway\n  cloud:\n    config:\n      uri: http://localhost:5000\n      label: master\n```", "```java\npackage springfive.airline.gateway.infra.route;\n\nimport java.util.function.Function;\nimport org.springframework.cloud.gateway.route.RouteLocator;\nimport org.springframework.cloud.gateway.route.builder.PredicateSpec;\nimport org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;\nimport org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder.Builder;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class SampleRoute {\n\n  private Function<PredicateSpec, Builder> addCustomHeader = predicateSpec -> predicateSpec\n      .path(\"/headers\")\n      .addRequestHeader(\"Book\", \"Spring 5.0 By Example\")\n      .uri(\"http://httpbin.org:80\");\n\n  @Bean\n  public RouteLocator sample(RouteLocatorBuilder builder) {\n    return builder.routes()\n        .route(\"custom-request-header\", addCustomHeader)\n        .route(\"add-query-param\", r -> r.path(\"/get\").addRequestParameter(\"book\", \"spring5.0\")\n            .uri(\"http://httpbin.org:80\"))\n        .route(\"response-headers\", (r) -> r.path(\"/response-headers\")\n            .addResponseHeader(\"book\",\"spring5.0\")\n            .uri(\"http://httpbin.org:80\"))\n        .route(\"combine-and-change\", (r) -> r.path(\"/anything\").and().header(\"access-key\",\"AAA\")\n            .addResponseHeader(\"access-key\",\"BBB\")\n            .uri(\"http://httpbin.org:80\"))\n        .build();\n  }\n\n}\n```", "```java\ncurl http://localhost:8888/headers\n```", "```java\ncurl -v -H \"access-key: AAA\" http://localhost:8888/anything\n```", "```java\n<plugin>\n  <groupId>io.fabric8</groupId>\n  <artifactId>docker-maven-plugin</artifactId>\n  <version>0.21.0</version>\n  <configuration>\n    <images>\n      <image>\n        <name>springfivebyexample/${project.build.finalName}</name>\n        <build>\n          <from>openjdk:latest</from>\n          <entryPoint>java -Dspring.profiles.active=docker -jar /application/${project.build.finalName}.jar</entryPoint>\n          <assembly>\n            <basedir>/application</basedir>\n            <descriptorRef>artifact</descriptorRef>\n            <inline>\n              <id>assembly</id>\n              <files>\n                <file>\n                  <source>target/${project.build.finalName}.jar</source>\n                </file>\n              </files>\n            </inline>\n          </assembly>\n          <tags>\n            <tag>latest</tag>\n          </tags>\n          <ports>\n            <port>8761</port>\n          </ports>\n        </build>\n        <run>\n          <namingStrategy>alias</namingStrategy>\n        </run>\n        <alias>${project.build.finalName}</alias>\n      </image>\n    </images>\n  </configuration>\n</plugin>\n```", "```java\nmvn clean install docker:build\n```", "```java\nversion: '3'\nservices:\n\n  config:\n    hostname: config\n    image: springfivebyexample/config\n    ports:\n      - \"5000:5000\"\n    networks:\n      - airline\n\n  rabbitmq:\n    hostname: rabbitmq\n    image: rabbitmq:3.7.0-management-alpine\n    ports:\n      - \"5672:5672\"\n      - \"15672:15672\"\n    networks:\n      - airline\n\n  mysql:\n    hostname: mysql\n    image: mysql:5.7.21\n    ports:\n      - \"3306:3306\"\n    environment:\n      - MYSQL_ROOT_PASSWORD=root\n      - MYSQL_DATABASE=zipkin\n    networks:\n      - airline\n\n  redis:\n    hostname: redis\n    image: redis:3.2-alpine\n    ports:\n      - \"6379:6379\"\n    networks:\n      - airline\n\n  zipkin:\n    hostname: zipkin\n    image: springfivebyexample/zipkin\n    ports:\n      - \"9999:9999\"\n    networks:\n      - airline\n\nnetworks:\n  airline:\n    driver: bridge\n```", "```java\ndocker-compose -f docker-compose-infra-full.yaml up -d\n```", "```java\ndocker-compose -f docker-compose-infra-full.yaml ps\n```", "```java\ndocker-compose -f docker-compose-infra-full.yaml down\n```"]