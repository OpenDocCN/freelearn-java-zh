["```java\nUPDATE \"public\".\"office\"\nSET (\"address_first\", \"address_second\", \"phone\") =\n  (SELECT \"public\".\"employee\".\"first_name\",\n          \"public\".\"employee\".\"last_name\", ?\n   FROM \"public\".\"employee\"\n   WHERE \"public\".\"employee\".\"job_title\" = ? \n```", "```java\nString sql = \n \"UPDATE \\\"public\\\".\\\"office\\\"\\n\"\n+ \"SET (\\\"address_first\\\", \\\"address_second\\\", \\\"phone\\\") =\\n\"\n+ \"  (SELECT \\\"public\\\".\\\"employee\\\".\\\"first_name\\\",\\n\"\n+ \"          \\\"public\\\".\\\"employee\\\".\\\"last_name\\\", ?\\n\"\n+ \"   FROM \\\"public\\\".\\\"employee\\\"\\n\"\n+ \"   WHERE \\\"public\\\".\\\"employee\\\".\\\"job_title\\\" = ?\"; \n```", "```java\nStringBuilder sql = new StringBuilder();\nsql.append(\"UPDATE \\\"public\\\".\\\"office\\\"\\n\")\n   .append(\"SET ...\\n\")\n   .append(\"  (SELECT...\\n\")\n   ... \n```", "```java\nString sql = \"UPDATE \\\"public\\\".\\\"office\\\"\\n\"\n  .concat(\"SET...\\n\")\n  .concat(\"  (SELECT...\\n\")\n  ... \n```", "```java\nString sql = String.format(\"%s%s%s%s%s%s\", \n  \"UPDATE \\\"public\\\".\\\"office\\\"\\n\",\n  \"SET ...\\n\",\n  \"  (SELECT ...\\n\",\n  ... \n```", "```java\nString sql = String.join(\"\\n\"\n ,\"UPDATE \\\"public\\\".\\\"office\\\"\"\n ,\"SET (\\\"address_first\\\", \\\"address_second\\\", \\\"phone\\\") =\"\n ,\"  (SELECT \\\"public\\\".\\\"employee\\\".\\\"first_name\\\",\"\n ,\"          \\\"public\\\".\\\"employee\\\".\\\"last_name\\\", ?\"\n ,\"   FROM \\\"public\\\".\\\"employee\\\"\"\n ,\"   WHERE \\\"public\\\".\\\"employee\\\".\\\"job_title\\\" = ?;\"); \n```", "```java\nStringJoiner sql = new StringJoiner(\"\\n\");\nsql.add(\"UPDATE \\\"public\\\".\\\"office\\\"\")\n   .add(\"SET (\\\"address_first\\\", ..., \\\"phone\\\") =\")\n   .add(\"  (SELECT \\\"public\\\".\\\"employee\\\".\\\"first_name\\\",\")\n   ... \n```", "```java\nString sql = Stream.of(\n \"UPDATE \\\"public\\\".\\\"office\\\"\",\n \"SET (\\\"address_first\\\", \\\"address_second\\\", \\\"phone\\\") =\",\n \"  (SELECT \\\"public\\\".\\\"employee\\\".\\\"first_name\\\",\",\n \"          \\\"public\\\".\\\"employee\\\".\\\"last_name\\\", ?\",\n \"   FROM \\\"public\\\".\\\"employee\\\"\",\n \"   WHERE \\\"public\\\".\\\"employee\\\".\\\"job_title\\\" = ?;\")\n .collect(Collectors.joining(String.valueOf(\"\\n\"))); \n```", "```java\nString sql=\"\"\"\n           UPDATE \"public\".\"office\"\n           SET (\"address_first\", \"address_second\", \"phone\") =\n             (SELECT \"public\".\"employee\".\"first_name\",\n                     \"public\".\"employee\".\"last_name\", ?\n              FROM \"public\".\"employee\"\n              WHERE \"public\".\"employee\".\"job_title\" = ?\"\"\"; \n```", "```java\nString json = \"\"\"\n              {\n                \"widget\": {\n                  \"debug\": \"on\",\n                  \"window\": {\n                    \"title\": \"Sample Widget 1\",\n                    \"name\": \"back_window\"\n                  },\n                  \"image\": {\n                    \"src\": \"images\\\\sw.png\"\n                  },\n                  \"text\": {\n                    \"data\": \"Click Me\",\n                    \"size\": 39\n                  }\n                }\n              }\"\"\"; \n```", "```java\nString html = \"\"\"\n              <table>\n                <tr>\n                  <thcolspan=\"2\">Name</th>\n                  <th>Age</th>\n                </tr>\n                <tr>\n                  <td>John</td>\n                  <td>Smith</td>\n                  <td>22</td>\n                </tr>\n              <table>\"\"\"; \n```", "```java\nString tb = \"\"\"\n            I'm a text block\"\"\";\nString tb = \"\"\"\n            I'm a text block\n            \"\"\";\nString tb = \"\"\"\n            I'm a text block\"\"\";\nString tb = \"\"\"\n            I'm a text block\n            \"\"\";\nString tb = \"\"\"\n            I'm a text block\n            \"\"\"; \n```", "```java\nString tb = \"\"\"I'm a text block\"\"\";\nString tb = \"I'm a text block\"\"\";\nString tb = \"\"\"I'm a text block\";\nString tb = \"\"I'm a text block\"\"\";\nString tb = \"\"\"I'm a text block\"\";\nString tb = \"\"I'm a text block\n            \"\"\"; \n```", "```java\nString sql= \"\"\"\n            UPDATE \"public\".\"office\"\n            SET (\"address_first\", \"address_second\", \"phone\") =\n              (SELECT \"public\".\"employee\".\"first_name\",\n                      \"public\".\"employee\".\"last_name\", ?\n               FROM \"public\".\"employee\"\n               WHERE \"public\".\"employee\".\"job_title\" = ?)\"\"\"; \n```", "```java\nString sql = \"\"\"\n  UPDATE \"public\".\"office\"\n  SET (\"address_first\", \"address_second\", \"phone\") =\n    (SELECT \"public\".\"employee\".\"first_name\",\n            \"public\".\"employee\".\"last_name\", ?\n     FROM \"public\".\"employee\"\n     WHERE \"public\".\"employee\".\"job_title\" = ?\"\"\"; \n```", "```java\nString sql =                                         \"\"\"\n  UPDATE \"public\".\"office\"\n  SET (\"address_first\", \"address_second\", \"phone\") =\n    (SELECT \"public\".\"employee\".\"first_name\",\n            \"public\".\"employee\".\"last_name\", ?\n     FROM \"public\".\"employee\"\n     WHERE \"public\".\"employee\".\"job_title\" = ?       \"\"\"; \n```", "```java\nString sql= \"\"\" \n            UPDATE \"public\".\"office\"\n            SET (\"address_first\", \"address_second\", \"phone\") =\n              (SELECT \"public\".\"employee\".\"first_name\",\n                      \"public\".\"employee\".\"last_name\", ?\n               FROM \"public\".\"employee\"\n               WHERE \"public\".\"employee\".\"job_title\" = ?\n            \"\"\";\nString sql= \"\"\" \n  UPDATE \"public\".\"office\"\n  SET (\"address_first\", \"address_second\", \"phone\") =\n    (SELECT \"public\".\"employee\".\"first_name\",\n            \"public\".\"employee\".\"last_name\", ?\n     FROM \"public\".\"employee\"\n     WHERE \"public\".\"employee\".\"job_title\" = ?\n  \"\"\"; \n```", "```java\nString sql= \"\"\" \n            UPDATE \"public\".\"office\"\n            SET (\"address_first\", \"address_second\", \"phone\") =\n              (SELECT \"public\".\"employee\".\"first_name\",\n                      \"public\".\"employee\".\"last_name\", ?\n               FROM \"public\".\"employee\"\n               WHERE \"public\".\"employee\".\"job_title\" = ?\n\"\"\"; \n```", "```java\nString sql= \"\"\" \n            UPDATE \"public\".\"office\"\n            SET (\"address_first\", \"address_second\", \"phone\") =\n              (SELECT \"public\".\"employee\".\"first_name\",\n                      \"public\".\"employee\".\"last_name\", ?\n               FROM \"public\".\"employee\"\n               WHERE \"public\".\"employee\".\"job_title\" = ?\n                                              \"\"\"; \n```", "```java\nString json = \"\"\"\n--------------{\n--------------++\"widget\": {\n--------------++++\"debug\": \"on\",\n--------------++++\"window\": {\n--------------++++++\"title\": \"Sample Widget 1\",\n--------------++++++\"name\": \"back_window\"\n--------------++++},\n--------------++++\"image\": {\n--------------++++++\"src\": \"images\\\\sw.png\"\n--------------++++},\n--------------++++\"text\": {\n--------------++++++\"data\": \"Click Me\",\n--------------++++++\"size\": 39\n--------------++++}\n--------------++}\n--------------}\"\"\"; \n```", "```java\nString json = \"\"\"\n----------------------{\n----------------------++\"widget\": {\n----------------------++++\"debug\": \"on\",\n----------------------++++\"window\": {\n----------------------++++++\"title\": \"Sample Widget 1\",\n----------------------++++++\"name\": \"back_window\"\n----------------------++++},\n----------------------++++\"image\": {\n----------------------++++++\"src\": \"images\\\\sw.png\"\n----------------------++++},\n----------------------++++\"text\": {\n----------------------++++++\"data\": \"Click Me\",\n----------------------++++++\"size\": 39\n----------------------++++}\n----------------------++}\n----------------------}\"\"\"; \n```", "```java\nString json = \"\"\"\n--------------++++++++{\n--------------++++++++++\"widget\": {\n--------------++++++++++++\"debug\": \"on\",\n--------------++++++++++++\"window\": {\n--------------++++++++++++++\"title\": \"Sample Widget 1\",\n--------------++++++++++++++\"name\": \"back_window\"\n--------------++++++++++++},\n--------------++++++++++++\"image\": {\n--------------++++++++++++++\"src\": \"images\\\\sw.png\"\n--------------++++++++++++},\n--------------++++++++++++\"text\": {\n--------------++++++++++++++\"data\": \"Click Me\",\n--------------++++++++++++++\"size\": 39\n--------------++++++++++++}\n--------------++++++++++}\n--------------++++++++}\n              \"\"\"; \n```", "```java\nString json = \"\"\"\n-------+++++++{\n-------++++++++++\"widget\": {\n-------++++++++++++\"debug\": \"on\",\n-------++++++++++++\"window\": {\n-------++++++++++++++\"title\": \"Sample Widget 1\",\n-------++++++++++++++\"name\": \"back_window\"\n-------++++++++++++},\n-------++++++++++++\"image\": {\n-------++++++++++++++\"src\": \"images\\\\sw.png\"\n-------++++++++++++},\n-------++++++++++++\"text\": {\n-------++++++++++++++\"data\": \"Click Me\",\n-------++++++++++++++\"size\": 39\n-------++++++++++++}\n-------++++++++++}\n-------++++++++}\n       \"\"\"; \n```", "```java\nString json = \"\"\"\n--------------{\n--------------++++\"widget\": {\n--------------++++++++\"debug\": \"on\",\n--------------++++++++\"window\": {\n--------------+++++++++++++++++++++\"title\": \"Sample Widget 1\",\n--------------+++++++++++++++++++++\"name\": \"back_window\"\n--------------++++++++},\n--------------++++++++\"image\":  {\n--------------+++++++++++++++++++++\"src\": \"images\\\\sw.png\"\n--------------++++++++},\n--------------++++++++\"text\":   {\n--------------+++++++++++++++++++++\"data\": \"Click Me\",\n--------------+++++++++++++++++++++\"size\": 39\n--------------++++++++}\n--------------++++}\n--------------}\"\"\"; \n```", "```java\nString json = \"\"\"\n--------------********{\n--------------********++\"widget\": {\n--------------********++++\"debug\": \"on\",\n--------------********++++\"window\": {\n--------------********++++++\"title\": \"Sample Widget 1\",\n--------------********++++++\"name\": \"back_window\"\n--------------********++++},\n--------------********++++\"image\": {\n--------------********++++++\"src\": \"images\\\\sw.png\"\n--------------********++++},\n--------------********++++\"text\": {\n--------------********++++++\"data\": \"Click Me\",\n--------------********++++++\"size\": 39\n--------------********++++}\n--------------********++}\n--------------********}\"\"\".indent(8); \n```", "```java\nString poem = \"\"\"\n              I would want to establish strength; root-like,\n              anchored in the hopes of solidity.\n              Forsake the contamination of instability.\n              Prove I'm the poet of each line of prose.\"\"\"; \n```", "```java\nString poem = \"\"\"\n              I would want to establish strength; root-like,\n              anchored in the hopes of solidity.\n              Forsake the contamination of instability.\n              Prove I'm the poet of each line of prose.\\\n   \"\"\"; \n```", "```java\nString poem = \"\"\"\n              I would want to establish strength; root-like,\n              anchored in the hopes of solidity.\n              Forsake the contamination of instability.\n              Prove I'm the poet of each line of prose.\n   \"\"\".stripTrailing(); \n```", "```java\nString poem = \"\"\"\n              I would want to establish strength; root-like,\n              anchored in the hopes of solidity.\n              Forsake the contamination of instability.\n              Prove I'm the poet of each line of prose.\"\"\"\n  .indent(6)\n  .stripTrailing(); \n```", "```java\nString json = \"\"\"                     |Compiler:\n----{                                 |Line 01: 4  lws\n----++\"widget\": {                     |Line 02: 6  lws\n----++++\"debug\": \"on\",                |Line 03: 8  lws\n----++++\"window\": {                   |Line 04: 8  lws\n----++++++\"title\": \"Sample Widget 1\", |Line 05: 10 lws\n----++++++\"name\": \"back_window\"       |Line 06: 10 lws\n----++++},                            |Line 07: 8  lws\n----++++\"image\": {                    |Line 08: 8  lws\n----++++++\"src\": \"images\\\\sw.png\"     |Line 09: 10 lws\n----++++},                            |Line 10: 8  lws\n----++++\"text\": {                     |Line 11: 8  lws\n----++++++\"data\": \"Click Me\",         |Line 12: 10 lws\n----++++++\"size\": 39                  |Line 13: 10 lws\n----++++}                             |Line 14: 8  lws\n----++}                               |Line 15: 6  lws\n----}                                 |Line 16: 4  lws\n----\"\"\";                              |Line 17: 4  lws \n–\" sign.\n```", "```java\nSELECT \"public\".\"employee\".\"first_name\"\nFROM \"public\".\"employee\" \nWHERE \"public\".\"employee\".\"job_title\" = ? \n```", "```java\nString sql = \"\"\"\n             SELECT \"public\".\"employee\".\"first_name\" \\\n             FROM \"public\".\"employee\" \\\n             WHERE \"public\".\"employee\".\"job_title\" = ?\\\n             \"\"\"; \n```", "```java\nSELECT \"public\".\"employee\".\"first_name\" FROM \"public\".\"employee\" WHERE \"public\".\"employee\".\"job_title\" = ? \n```", "```java\nString sql = \"\"\"\n  UPDATE \"public\".\"office\" \\\n  SET (\"address_first\", \"address_second\", \"phone\") = \\\n    (SELECT \"public\".\"employee\".\"first_name\", \\\n            \"public\".\"employee\".\"last_name\", ? \\\n     FROM \"public\".\"employee\" \\\n     WHERE \"public\".\"employee\".\"job_title\" = ?\\\n  \"\"\"; \n```", "```java\nsql.trim().replaceAll(\" +\", \" \"); \n```", "```java\nString poem = \"\"\"\n                 An old silent pond...\n              A frog jumps into the pond,\n                 splash!! Silence again.\n              \"\"\"; \n```", "```java\nString poem = \"\"\"\n                 An old silent pond...\\s\\s\\s\n              A frog jumps into the pond,\n                splash!! Silence again.\\s\\s\n              \"\"\"; \n```", "```java\nString poem = \"\"\"\n                 An old silent pond...  \\s\n              A frog jumps into the pond,\n                splash!! Silence again. \\s\n              \"\"\"; \n```", "```java\nString txt = \"\"\"\n             She told me \n                    \\\"\"\"I have no idea what's going on\\\"\"\" \n             \"\"\"; \n```", "```java\nShe told me\n        \"\"\"I have no idea what's going on\"\"\" \n```", "```java\nString txt = \"\"\"\n             She told me \n                     \"I have no idea what's going on\"\n             \"\"\";\nString txt = \"\"\"\n             She told me \n                     \"\"I have no idea what's going on\"\" \n             \"\"\"; \n```", "```java\nString txt = \"\"\"\n             She told me \n                     \\\"I have no idea what's going on\\\"\n             \"\"\";\nString txt = \"\"\"\n             She told me \n                     \\\"\\\"I have no idea what's going on\\\"\\\" \n             \"\"\"; \n```", "```java\nString sql = \"\"\"\n             SELECT \"public\".\"employee\".\"first_name\",\\n\n                    \"public\".\"employee\".\"last_name\", ?\\n\n             FROM \"public\".\"employee\"\\n\n             WHERE \"public\".\"employee\".\"job_title\" = ?\n             \"\"\"; \n```", "```java\nString txt = \"\"\"\n               \\b\\bShe told me\\n\n             \\t\"\"I have no idea what's going on\"\" \n             \"\"\"; \n```", "```java\nString txt = \"\"\"\n             She told me\n                    \"\"I have no idea what's going on\"\" \n             \"\"\"; \n```", "```java\nString sql = \"\"\"\n  SELECT \\\\\"public\\\\\".\\\\\"employee\\\\\".\\\\\"first_name\\\\\",   \n         \\\\\"public\\\\\".\\\\\"employee\\\\\".\\\\\"last_name\\\\\", ?\n  FROM \\\\\"public\\\\\".\\\\\"employee\\\\\"\n  WHERE \\\\\"public\\\\\".\\\\\"employee\\\\\".\\\\\"job_title\\\\\" = ?\n  \"\"\"; \n```", "```java\nString newline = \"\\\\n\".translateEscapes();\nSystem.out.println((\"\\n\".equals(newline)) ? \"yes\" : \"no\"); \n```", "```java\nString address = \"\"\"\n                 JASON MILLER (\\\\\"BIGBOY\\\\\")\\\\n\n                 \\\\tMOUNT INC\\\\n\n                 \\\\t104 SEAL AVE\\\\n\n                 \\\\tMIAMI FL 55334 1200\\\\n\n                 \\\\tUSA\n                 \"\"\"; \n```", "```java\nString translatedAddress = address.translateEscapes(); \n```", "```java\nString fn = \"Jo\";\nString ln = \"Kym\";\nString str = \"<user><firstName>\" + fn\n  + \"</firstName><lastName>\" + ln + \"</lastName></user>\"; \n```", "```java\n// output\n<user><firstName>Jo</firstName><lastName>Kym</lastName></user> \n```", "```java\nString xml = \"\"\"\n            <user>\n               <firstName>\\\n            \"\"\"\n        + fn\n        + \"\"\"\n             </firstName>\n                <lastName>\\\n             \"\"\"\n         + ln\n         + \"\"\"\n             </lastName>\n             </user>\n             \"\"\"; \n```", "```java\nString xml = \"\"\"\n            <user>\n               <firstName>\n            \"\"\"\n        + fn.indent(4)\n        + \"\"\"\n               </firstName>\n               <lastName>\n            \"\"\"\n        + ln.indent(4)\n        + \"\"\"\n               </lastName>\n            </user>\n            \"\"\"; \n```", "```java\nStringBuilder sbXml = new StringBuilder();\nsbXml.append(\"\"\"\n            <user>\n               <firstName>\"\"\")\n       .append(fn)\n       .append(\"\"\"\n               </firstName>\n                  <lastName>\"\"\")\n       .append(ln)\n       .append(\"\"\"\n            </lastName>\n            </user>\"\"\"); \n```", "```java\nStringBuilder sbXml = new StringBuilder();\nsbXml.append(\"\"\"\n            <user>\n               <firstName>\n            \"\"\")\n      .append(fn.indent(4))\n      .append(\"\"\"\n             </firstName>\n             <lastName>\n           \"\"\")\n      .append(ln.indent(4))\n      .append(\"\"\"\n             </lastName>\n           </user>\n           \"\"\"); \n```", "```java\nString xml = MessageFormat.format(\"\"\"\n                           <user>\n                               <firstName>{0}</firstName>\n                               <lastName>{1}</lastName>\n                           </user>\n                           \"\"\", fn, ln); \n```", "```java\nString xml = MessageFormat.format(\"\"\"\n                           <user>\n                               <firstName>\n                                {0}\n                               </firstName>\n                               <lastName>\n                                {1}\n                               </lastName>\n                           </user>\n                           \"\"\", fn, ln); \n```", "```java\nString xml = String.format(\"\"\"\n                           <user>\n                               <firstName>%s</firstName>\n                               <lastName>%s</lastName>\n                           </user>\n                           \"\"\", fn, ln); \n```", "```java\nString xml = String.format(\"\"\"\n                           <user>\n                               <firstName>\n                                %s\n                               </firstName>\n                               <lastName>\n                                %s\n                               </lastName>\n                           </user>\n                           \"\"\", fn, ln); \n```", "```java\nString xml = \"\"\"\n             <user>\n                 <firstName>%s</firstName>\n                 <lastName>%s</lastName>\n             </user>\n             \"\"\".formatted(fn, ln); \n```", "```java\nString xml = \"\"\"\n             <user>\n                 <firstName>\n                  %s\n                 </firstName>\n                 <lastName>\n                  %s\n                 </lastName>\n             </user>\n             \"\"\".formatted(fn, ln); \n```", "```java\nString txt = \"\"\"\n             foo  /* some comment */\n             buzz //another comment\n             \"\"\".replace(\"some_regex\",\"\"); \n```", "```java\nString str = \"I love Java!\";\nString txt = \"\"\"\n             I love Java!\"\"\";\nSystem.out.println(str == txt);      // true\nSystem.out.println(str.equals(txt)); // true \ntrue twice. This means that an ordinary string literal and a text block are similar at runtime. We can define text blocks as string literals that span across multiple lines of text and use triple quotes as their opening and closing delimiter. How so? First, the instance produced from an ordinary string literal and a text block is of type java.lang.String. Second, we have to look at the compiler internals. Basically, the compiler adds strings to a special cached pool named a String Constant Pool (SCP) (more details about SCP are available in *Java Coding Problems*, *First Edition*, Problem 48, *Immutable string*) to optimize the memory usage, and starting with JDK 13, text blocks can be found in the same pool as strings.\n```", "```java\nString tom = \"Tom\";\nString jerry = \"\"\"\n               Jerry\"\"\";\nSystem.out.println(tom + \" and \" + jerry); // Tom and Jerry \n```", "```java\nSystem.out.println(tom.toUpperCase() + \" AND \" \n  + jerry.toUpperCase()); // TOM AND JERRY \n```", "```java\nString nameAndAddress\n  = \"Mark Janson;243 West Main St;Louisville;40202;USA\"; \n```", "```java\n(?<name>[ a-zA-Z]+);(?<address>[ 0-9a-zA-Z]+);(?<city>[ a-zA-Z]+);(?<zip>[\\\\d]+);(?<country>[ a-zA-Z]+)$ \n```", "```java\nPattern pattern = Pattern.compile(\"(?<name>[ a-zA-Z]+);(?<address>[ 0-9a-zA-Z]+);(?<city>[ a-zA-Z]+);(?<zip>[\\\\d]+);(?<country>[ a-zA-Z]+)$\"); \n```", "```java\nPattern pattern = Pattern.compile(\"\"\" \n         (?<name>[ a-zA-Z]+);\\ \n         (?<address>[ 0-9a-zA-Z]+);\\ \n         (?<city>[ a-zA-Z]+);\\ \n         (?<zip>[\\\\d]+);\\ \n         (?<country>[ a-zA-Z]+)$\"\"\"); \n```", "```java\nif (matcher.matches()) { \n\n  String name = matcher.group(\"name\"); \n  String address = matcher.group(\"address\"); \n  String city = matcher.group(\"city\"); \n  String zip = matcher.group(\"zip\"); \n  String country = matcher.group(\"country\"); \n} \n```", "```java\n// {country=5, city=3, zip=4, name=1, address=2} \nSystem.out.println(matcher.namedGroups()); \n```", "```java\nif (matcher.hasMatch()) { ... } \n```", "```java\nString[] result = Pattern.compile(\";+\") \n  .splitWithDelimiters(nameAndAddress, 0); \n```", "```java\n[Mark Janson, ;, 243 West Main St, ;,\nLouisville, ;, 40202, ;, USA] \n```", "```java\npublic static boolean isIsomorphic(String s1, String s2) {\n  // step 1\n  if (s1 == null || s2 == null\n                 || s1.length() != s2.length()) {\n    return false;\n  }\n  // step 2\n  Map<Character, Character> map = new HashMap<>();\n  // step 3(8)\n  for (int i = 0; i < s1.length(); i++) {\n    char chs1 = s1.charAt(i);\n    char chs2 = s2.charAt(i);\n    // step 4\n    if (map.containsKey(chs1)) {\n      // step 5\n      if (map.get(chs1) != chs2) {\n        return false;\n      }\n    } else {\n      // step 6\n      if (map.containsValue(chs2)) {\n        return false;\n      }\n      // step 7\n      map.put(chs1, chs2);\n    }\n  }\n  // step 9\n  return true;\n} \n```", "```java\nString str1 = \"I love\";\nString str2 = \"Java\";\nString str12 = str1 + \" \" + str2; \n```", "```java\npublic String intToStringV1(int v) {\n  return Integer.toString(v);\n} \n```", "```java\npublic String intToStringV2(int v) {\n  return \"\" + v;\n} \n```", "```java\npublic String intToStringV3(int v) {\n  return String.valueOf(v);\n} \n```", "```java\npublic String intToStringV4(int v) {\n  return String.format(\"%d\", v);\n} \n```", "```java\npublic String integerToStringV1(Integer vo) {\n  return Integer.toString(vo);\n} \n```", "```java\nLocalDate fiscalDate = LocalDate.now(); \ndouble value = 4552.2367; \nString employeeCode = \"RN4555\"; \n\nString jsonBlock = \"\"\" \n                 {\"sale\": { \n                     \"id\": 1, \n                     \"details\": { \n                         \"fiscal_year\": %d, \n                         \"employee_nr\": \"%s\", \n                         \"value\": %.2f  \n                     } \n                 } \n                 \"\"\".formatted( \n                  fiscalDate.getYear(), employeeCode, value); \n```", "```java\nimport static java.lang.StringTemplate.STR; \nString jsonBlockStr = STR.\"\"\" \n       {\"sale\": { \n           \"id\": 1, \n           \"details\": { \n               \"fiscal_year\": \\{fiscalDate.getYear()}, \n               \"employee_nr\": \"\\{employeeCode}\", \n               \"value\": \\{value}  \n           } \n       } \n       \"\"\"; \n```", "```java\n{\"sale\": { \n    \"id\": 1, \n    \"details\": { \n        \"fiscal_year\": 2023, \n        \"employee_nr\": \"RN4555\", \n        \"value\": 4552.2367 \n    } \n} \n```", "```java\nString jsonBlockFmt = FMT.\"\"\" \n       {\"sale\": { \n           \"id\": 1, \n           \"details\": { \n               \"fiscal_year\": \\{fiscalDate.getYear()}, \n               \"employee_nr\": \"\\{employeeCode}\", \n               \"value\": %.2f\\{value}  \n           } \n       } \n       \"\"\"; \n```", "```java\n... \n\"value\": 4552.24 \n... \n```", "```java\nStringTemplate templateRaw = RAW.\"\"\" \n           \"employee_nr\": \"\\{employeeCode}\", \n           \"\"\"; \n```", "```java\nLocalDate fiscalDate1 = LocalDate.of(2023, 2, 4); \nLocalDate fiscalDate2 = LocalDate.of(2024, 3, 12); \ndouble value1 = 343.23; \ndouble value2 = 1244.33; \nString jsonBlockRaw = STR.\"\"\"  \n       {\"sale\": { \n           \"id\": 1, \n           \"details\": { \n               \"fiscal_year\": \\{fiscalDate1.getYear()}, \n               \\{templateRaw.interpolate()}\\ \n               \"value\": \\{value1}      \n           } \n       }, \n       {\"sale\": { \n           \"id\": 2, \n           \"details\": { \n               \"fiscal_year\": \\{fiscalDate2.getYear()}, \n               \\{templateRaw.interpolate()}\\ \n               \"value\": \\{value2}     \n           } \n       }            \n       \"\"\"; \n```", "```java\nString employeeCodeString = templateRaw.interpolate(); \n```", "```java\n{\"sale\": { \n    \"id\": 1, \n    \"details\": { \n       \"fiscal_year\": 2023, \n       \"employee_nr\": \"RN4555\", \n       \"value\": 343.23 \n    } \n}, \n{\"sale\": { \n    \"id\": 2, \n     \"details\": { \n        \"fiscal_year\": 2024, \n        \"employee_nr\": \"RN4555\", \n        \"value\": 1244.33 \n     } \n} \n```", "```java\nList<String> trFragments = templateRaw.fragments(); \n```", "```java\nList<Object> trValues = templateRaw.values(); \n```", "```java\nR process(StringTemplate stringTemplate) throws E \n```", "```java\nprivate static final Pattern PHONE_PATTERN = Pattern.compile( \n  \"\\\\d{10}|(?:\\\\d{3}-){2}\\\\d{4}|\\\\(\\\\d{3}\\\\)\\\\d{3}-?\\\\d{4}\"); \n```", "```java\npublic class PhoneProcessor\n    implements Processor<String, IllegalArgumentException> { \n\n  private static final Pattern PHONE_PATTERN = ...; \n\n  @Override \n  public String process(StringTemplate stringTemplate)  \n    throws IllegalArgumentException { \n\n    StringBuilder sb = new StringBuilder(); \n    Iterator<String> fragmentsIter  \n      = stringTemplate.fragments().iterator(); \n\n    for (Object value : stringTemplate.values()) { \n      sb.append(fragmentsIter.next()); \n\n      if (!PHONE_PATTERN.matcher( \n            (CharSequence) value).matches()) { \n        throw new IllegalArgumentException( \n          \"This is not a valid phone number\"); \n      } \n\n      sb.append(value); \n    } \n\n    sb.append(fragmentsIter.next()); \n\n    return sb.toString(); \n  } \n} \n```", "```java\nPhoneProcessor pp = new PhoneProcessor();\nString workPhone = \"072-825-9009\"; \nString homePhone = \"(040)234-9670\"; \n\nString message = pp.\"\"\" \n   You can contact me at work at \\{workPhone}\n   or at home at \\{homePhone}. \n   \"\"\"; \n```", "```java\nYou can contact me at work at 072-825-9009 \nor at home at (040)234-9670. \n```", "```java\npublic class PhoneProcessor implements  \n    Processor<String, IllegalArgumentException> { \n\n  private static final Pattern PHONE_PATTERN = ...; \n\n  @Override \n  public String process(StringTemplate stringTemplate)  \n      throws IllegalArgumentException { \n\n    for (Object value : stringTemplate.values()) { \n\n      if (!PHONE_PATTERN.matcher( \n         (CharSequence) value).matches()) { \n       throw new IllegalArgumentException( \n         \"This is not a valid phone number\"); \n      } \n    } \n\n    return StringTemplate.interpolate( \n      stringTemplate.fragments(), stringTemplate.values()); \n  } \n} \n```", "```java\n{ \n  \"contact\": { \n    \"work\": \"072-825-9009\", \n    \"home\": \"(040)234-9670\" \n  } \n} \n```", "```java\n@Override \npublic JsonNode process(StringTemplate stringTemplate)  \n    throws IllegalArgumentException { \n\n  for (Object value : stringTemplate.values()) { \n\n    if (!PHONE_PATTERN.matcher( \n       (CharSequence) value).matches()) { \n      throw new IllegalArgumentException( \n        \"This is not a valid phone number\"); \n    } \n  } \n\n  ObjectMapper mapper = new ObjectMapper();\n\n  try { \n    return mapper.readTree(StringTemplate.interpolate( \n      stringTemplate.fragments(), stringTemplate.values())); \n  } catch (IOException ex) { \n      throw new RuntimeException(ex);\n  }\n} \n```", "```java\nPhoneProcessor pp = new PhoneProcessor(); \nString workPhone = \"072-825-9009\"; \nString homePhone = \"(040)234-9670\"; \n\nJsonNode jsonMessage = pp.\"\"\" \n  { \"contact\": { \n       \"work\": \"\\{workPhone}\", \n       \"home\": \"\\{homePhone}\" \n       } \n  }   \n  \"\"\"; \n```", "```java\nLocale roDep = new Locale(\"ro\", \"RO\"); // locale for Romania \n```", "```java\nLocale de = Locale.GERMANY; // de_DE \n```", "```java\nLocale locale = new Locale.Builder()\n  .setLanguage(\"ro\").setRegion(\"RO\").build(); \n```", "```java\nLocale locale = Locale.forLanguageTag(\"zh-cmn-Hans-CN\"); \n```", "```java\nLocale.LanguageRange lr1 \n  = new Locale.LanguageRange(\"de-*\", 1.0);\nLocale.LanguageRange lr2 \n  = new Locale.LanguageRange(\"ro-RO\", 0.5);\nLocale.LanguageRange lr3 \n  = new Locale.LanguageRange(\"en-*\", 0.0); \n```", "```java\nString rangeString = \"es-ES;q=1.0,es-MX;q=0.5,pt-BR;q=0.0\";\nList<Locale.LanguageRange> priorityList\n  = Locale.LanguageRange.parse(rangeString); \n```", "```java\nLocale ro = Locale.of(\"ro\", \"RO\"); // ro_RO \n```", "```java\nLocale de = Locale.of(\"de\" ,\"DE\", \"WIN\");\nLocale it = Locale.of(\"it\"); // similar to Locale.ITALIAN \n```", "```java\n// 7 ianuarie 2023, 14:57:42 EET\nDateFormat rodf = DateFormat.getDateTimeInstance(\n  DateFormat.LONG, DateFormat.LONG, ro);\n// 7\\. Januar 2023 um 15:05:29 OEZ\nDateFormat dedf = DateFormat.getDateTimeInstance(\n  DateFormat.LONG, DateFormat.LONG, de); \n```", "```java\n// 2023-01-07 15:31:22\nString ldt = LocalDateTime.now()\n  .format(DateTimeFormatter.ofPattern(\"y-MM-dd HH:mm:ss\")); \n```", "```java\nLocale.setDefault(Locale.GERMANY); \n```", "```java\n// 7\\. Januar 2023\nString ld = LocalDate.now().format(\n  DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG));\n// 15:49\nString lt = LocalTime.now().format(\n  DateTimeFormatter.ofLocalizedTime(FormatStyle.SHORT));\n// 07.01.2023, 15:49:30\nString ldt = LocalDateTime.now().format(\n  DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM)); \n```", "```java\n// Samstag, 7\\. Januar 2023 um 15:49:30 \n// Osteuropäische Normalzeit\nString zdt = ZonedDateTime.now().format(\n  DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL));\n// 07.01.2023, 15:49:30\nString odt = OffsetDateTime.now().format(\n  DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM));\n// 15:49:30\nString ot = OffsetTime.now().format(\n  DateTimeFormatter.ofLocalizedTime(FormatStyle.MEDIUM)); \n```", "```java\nLocale.setDefault(Locale.of(\"ro\", \"RO\")); \n```", "```java\n// 01.2023\nString ld = LocalDate.now().format(\n  DateTimeFormatter.ofLocalizedPattern(\"yMM\"));\n// 15:49\nString lt = LocalTime.now().format(\n  DateTimeFormatter.ofLocalizedPattern(\"Hm\"));\n// 01.2023, 15:49\nString ldt = LocalDateTime.now().format(\n  DateTimeFormatter.ofLocalizedPattern(\"yMMHm\")); \n```", "```java\n// 01.2023, 15:49:30 EET\nString zdt = ZonedDateTime.now().format(\n  DateTimeFormatter.ofLocalizedPattern(\"yMMHmsv\"));\n// 01.2023, 15:49:30\nString odt = OffsetDateTime.now().format(\n  DateTimeFormatter.ofLocalizedPattern(\"yMMHms\"));\n// 15:49:30\nString ot = OffsetTime.now().format(\n  DateTimeFormatter.ofLocalizedPattern(\"Hms\")); \n```", "```java\ndouble x = 0.8793331;\ndouble y = 12.22933;\ndouble z = 901.98334884433;\ndouble m1 = (x * y) * z;   // 9699.617442382583 \ndouble m2 = (x * (y * z)); // 9699.617442382581\n// m1 == m2 returns false \n```", "```java\npublic **strictfp** final class ScientificCalculator {\n  private ScientificCalculator() {\n    throw new AssertionError(\"Cannot be instantiated\");\n  }\n  public static double multiply(\n        final double v1, final double v2) {\n    return v1 * v2;\n  }\n  public static double division(\n        final double v1, final double v2) { \n    return v1 / v2;\n  }\n  // more computational methods\n} \n```", "```java\npublic **strictfp** interface Rectangle {\n  default double area(double length, double width) {\n    ...\n  } \n  double diagonal(double length, double width);\n  public class Trigonometry { \n    public static double smallAngleOfDiagonals(\n         double length, double width) {\n      ...\n    }\n    public static double bigAngleOfDiagonals(\n         double length, double width) {\n      ...\n    }\n  }\n} \n```", "```java\npublic class Main implements Rectangle {\n  @Override\n  public double diagonal(double length, double width) {\n    ...\n  }\n  public double perimeter(double length, double width) {\n    ...\n  }\n} \n```", "```java\npublic static void displayModifiers(\n                          Class clazz, String member) {\n  try {\n    int modifiers = clazz.getDeclaredMethod(member, \n      double.class, double.class).getModifiers();\n    System.out.println(member + \" has the following \n    modifiers: \" + Modifier.toString(modifiers));\n  } catch (NoSuchMethodException | SecurityException e) {\n    e.printStackTrace(System.out);\n  }\n} \n```", "```java\n// public\ndisplayModifiers(Main.class, \"diagonal\");\n// public\ndisplayModifiers(Main.class, \"perimeter\");\n// public abstract\ndisplayModifiers(Main.class.getInterfaces()[0], \"diagonal\");\n// public strictfp\ndisplayModifiers(Main.class.getInterfaces()[0], \"area\");\n// public static strictfp\ndisplayModifiers(Rectangle.Trigonometry.class,  \n  \"smallAngleOfDiagonals\");\n// public static strictfp\ndisplayModifiers(Rectangle.Trigonometry.class,  \n  \"bigAngleOfDiagonals\"); \n```", "```java\n@Override\n**strictfp** public double diagonal(double length, double width) {\n  ...\n}\n**strictfp** public double perimeter(double length, double width) {\n  ...\n} \n```", "```java\n|x| = x, |-x| = x \n```", "```java\n|-45| = 45, |30| = 30\n45 > 30, so the climber is closer to the sea level (0) \n```", "```java\nint x = -3;\nint absofx = Math.abs(x); // 3 \n```", "```java\nint x = Integer.MIN_VALUE; // -2,147,483,648    \nint absofx = Math.abs(x);  // -2,147,483,648 \n```", "```java\nlong x = Integer.MIN_VALUE; // -2,147,483,648    \nlong absofx = Math.abs(x);  // 2,147,483,648 \n```", "```java\nlong y = Long.MIN_VALUE;// -9,223,372,036,854,775,808\nlong absofy = Math.abs(y); // -9,223,372,036,854,775,808 \n```", "```java\nint absofxExact = Math.absExact(x);  // ArithmeticException\nlong absofyExact = Math.absExact(y); // ArithmeticException \n```", "```java\nIntUnaryOperator operatorInt = Math::absExact;\nLongUnaryOperator operatorLong = Math::absExact;\n// both throw ArithmeticException\nint absofxExactUo = operatorInt.applyAsInt(x);\nlong absofyExactUo = operatorLong.applyAsLong(y); \n```", "```java\n-4/-1 = 4, 4/-1 = -4 \n```", "```java\nint x = Integer.MIN_VALUE;\nint quotient = x/-1; // -2,147,483,648 \n```", "```java\nlong x = Integer.MIN_VALUE;\nlong quotient = x/-1; // 2,147,483,648 \n```", "```java\nlong y = Long.MIN_VALUE; // -9,223,372,036,854,775,808\nlong quotient = y/-1;    // -9,223,372,036,854,775,808 \n```", "```java\n// throw ArithmeticException\nint quotientExact = Math.divideExact(x, -1); \n```", "```java\n// throw ArithmeticException\nBinaryOperator<Integer> operator = Math::divideExact;\nint quotientExactBo = operator.apply(x, -1); \n```", "```java\nint x = Integer.MIN_VALUE; // or, x = Long.MIN_VALUE\nMath.floorDiv(x, -1); // -2,147,483,648\nMath.ceilDiv(x, -1);  // -2,147,483,648 \n```", "```java\n// throw ArtihmeticException\nint resultFloorExact = Math.floorDivExact(x, -1);\n// throw ArtihmeticException\nint resultCeilExact = Math.ceilDivExact(x, -1); \n```", "```java\n// throw ArithmeticException\nBinaryOperator<Integer> operatorf = Math::floorDivExact;\nint floorExactBo = operatorf.apply(x, -1);\n// throw ArithmeticException\nBinaryOperator<Integer> operatorc = Math::ceilDivExact;\nint ceilExactBo = operatorc.apply(x, -1); \n```", "```java\ndouble value = -9.33543545;\ndouble fractionalPart = value % 1;\ndouble integralPart = value - fractionalPart; \n```", "```java\nBigDecimal bd = BigDecimal.valueOf(value);\nint integralPart = bd.intValue();\ndouble fractionalPart = bd.subtract(\n       BigDecimal.valueOf(integralPart)).doubleValue(); \n```", "```java\ndouble v1 = 23.11;                    // false\ndouble v2 = 23;                       // true\ndouble v3 = 23.0;                     // true\ndouble v4 = Double.NaN;               // false\ndouble v5 = Double.NEGATIVE_INFINITY; // false\ndouble v6 = Double.POSITIVE_INFINITY; // false \n```", "```java\npublic static boolean isDoubleIntegerV1(double v) {\n  return v == (int) v;\n} \n```", "```java\npublic static boolean isDoubleIntegerV2(double v) {\n  return v % 1 == 0;\n} \n```", "```java\npublic static boolean isDoubleIntegerV3(double v) {\n  return ((Math.floor(v) == v) && Double.isFinite(v));\n} \n```", "```java\npublic static boolean isDoubleIntegerV4(double v) {\n  return (Math.floor(v) == Math.ceil(v) \n                        && Double.isFinite(v));\n} \n```", "```java\npublic static boolean isDoubleIntegerV5(double v) {\n  return ((Math.rint(v) == v) && Double.isFinite(v));\n} \n```", "```java\npublic static boolean isDoubleIntegerV6(double v) {\n  return DoubleMath.isMathematicalInteger(v);\n} \n```", "```java\nlong x = 234253490223L;\nlong y = -565951223449L;\nlong resultSigned = Math.multiplyHigh(x, y); // -7187 \n```", "```java\n// 234253483036\nlong resultUnsigned = Math.unsignedMultiplyHigh(x, y); \n```", "```java\n// using jOOU\nULong ux = ulong(234253490223L);  // 234253490223\nULong uy = ulong(-565951223449L); // 18446743507758328167 \n```", "```java\nlong uResultUnsigned = Math.unsignedMultiplyHigh(\n    ux.longValue(), uy.longValue()); \n```", "```java\nFloor_Modulus = dividend -\n  (floorDiv(dividend, divisor) * divisor)\nCeil_Modulus = dividend -\n  (ceilDiv(dividend, divisor) * divisor) \n```", "```java\nint dividend = 162;\nint divisor = 42;   // 162 % 42 = 36\nint fd = Math.floorDiv(dividend, divisor);\nint fmodJDK8 = dividend - (fd * divisor); // 36\nint cd = Math.ceilDiv(dividend, divisor);\nint cmodJDK18 = dividend - (cd * divisor); // -6 \n```", "```java\nint dividend = 162;\nint divisor = 42;\nint fmodJDK8 = Math.floorMod(dividend, divisor); // 36 \n```", "```java\nint cmodJDK18 = Math.ceilMod(dividend, divisor); // -6 \n```", "```java\ndividend == floorDiv(dividend, divisor) * divisor\n              + floorMod(dividend, divisor) \n```", "```java\ndividend == ceilDiv(dividend, divisor) * divisor \n              + ceilMod(dividend, divisor) \n```", "```java\npublic static List<Integer> factors(int v) {\n  List<Integer> factorsList = new ArrayList<>();\n  int s = 2;\n  while (v > 1) {\n    // each perfect division give us a prime factor\n    if (v % s == 0) {\n      factorsList.add(s);\n      v = v / s;\n    } else {\n      s++;\n    }\n  }\n  return factorsList;\n} \n```", "```java\npublic static double squareRootBabylonian(double v) {\n  double x = v / 2;\n  double y = 1;\n  double e = 0.000000000001; // precision\n  while (x - y > e) {\n    x = (x + y) / 2;\n    y = v / x;\n  }\n  return x;\n} \n```", "```java\nfloat v = 14.9877655f;\nint d = 5; \n```", "```java\npublic static float roundToDecimals(float v, int decimals) {\n  BigDecimal bd = new BigDecimal(Float.toString(v));\n  bd = bd.setScale(decimals, RoundingMode.HALF_UP);\n  return bd.floatValue();\n} \n```", "```java\npublic static float roundToDecimals(float v, int decimals) {\n  DecimalFormat df = new DecimalFormat();\n  df.setMaximumFractionDigits(decimals);\n  return Float.parseFloat(df.format(v));\n} \n```", "```java\npublic static float roundToDecimals(float v, int decimals) {\n  int factor = Integer.parseInt(\n               \"1\".concat(\"0\".repeat(decimals)));\n  return (float) Math.round(v * factor) / factor;\n} \n```", "```java\nprivate static final int MIN_PRESSURE = 10; \nprivate static final int MAX_PRESSURE = 50; \n\npublic static int adjust(int pressure) { \n\n  if (pressure < MIN_PRESSURE) { \n    return MIN_PRESSURE; \n  } \n\n  if (pressure > MAX_PRESSURE) { \n    return MAX_PRESSURE; \n  } \n\n  return pressure; \n} \n```", "```java\npublic static int adjust(int pressure) { \n\n  return Math.clamp(pressure, MIN_PRESSURE, MAX_PRESSURE);\n} \n```", "```java\nreturn (int) Math.min(max, Math.max(value, min)); \n```", "```java\nprivate static int divideByTwo(int d) {\n  if (d < 2) {\n    return 0;\n  }\n  return 1 + divideByTwo(d - 2);\n} \n```", "```java\npublic static int multiply(int p, int q) {\n  // p * 0 = 0, 0 * q = 0\n  if (p == 0 || q == 0) {\n    return 0;\n  }\n  int pqSquare = (int) Math.pow(p + q, 2);\n  int pSquare = (int) Math.pow(p, 2);\n  int qSquare = (int) Math.pow(q, 2);\n  int squareResult = pqSquare - pSquare - qSquare;\n  int result;\n  if (squareResult >= 0) {\n    result = divideByTwo(squareResult);\n  } else {\n    result = 0 - divideByTwo(Math.abs(squareResult));\n  }\n  return result;\n} \n```", "```java\n// before JDK 19, using PI\ndouble r = 21.33 / (2 * Math.PI);\n// starting with JDK 19, using TAU\ndouble r = 21.33 / Math.TAU; \n```", "```java\nRandomGenerator defaultGenerator\n  = RandomGenerator.getDefault();\n// start generating pseudo-random numbers\ndefaultGenerator.nextInt/Float/...();\ndefaultGenerator.ints/doubles/...(); \n```", "```java\nStream<RandomGeneratorFactory<RandomGenerator>> all \n     = RandomGeneratorFactory.all();\nObject[][] data = all.sorted(Comparator.comparing(\n                   RandomGeneratorFactory::group))\n   .map(f -> {\n      Object[] obj = new Object[]{\n        f.name(),\n        f.group(),\n        f.isArbitrarilyJumpable(),\n        f.isDeprecated(),\n        f.isHardware(),\n        f.isJumpable(),\n        f.isLeapable(),\n        f.isSplittable(),\n        f.isStatistical(),\n        f.isStochastic(),\n        f.isStreamable()\n     };\n     return obj;\n  }).toArray(Object[][]::new); \n```", "```java\nRandomGenerator generator\n  = RandomGenerator.of(\"L128X256MixRandom\");\nRandomGenerator generator \n  = RandomGeneratorFactory.of(\"Xoroshiro128PlusPlus\")\n                          .create(); \n```", "```java\nLeapableGenerator leapableGenerator\n  = LeapableGenerator.of(\"Xoshiro256PlusPlus\");\nLeapableGenerator leapableGenerator = RandomGeneratorFactory\n  .<LeapableGenerator>of(\"Xoshiro256PlusPlus\").create(); \n```", "```java\nSplittableRandom splittableGenerator = new SplittableRandom(); \n```", "```java\nRandomGenerator generator = RandomGeneratorFactory.all()\n  .filter(RandomGeneratorFactory::isLeapable)\n  .filter(RandomGeneratorFactory::isStatistical)\n  .findFirst()\n  .map(RandomGeneratorFactory::create)\n  .orElseThrow(() -> new RuntimeException(\n       \"Cannot find this kind of generator\")); \n```", "```java\nSplittableGenerator splittableRndL64X256 \n  = RandomGeneratorFactory\n     .<SplittableGenerator>of(\"L64X256MixRandom\").create();\nlong[] arr = new long[100_000_000];\nArrays.parallelSetAll(arr, \n                      x ->splittableRndL64X256.nextLong()); \n```", "```java\nSplittableRandom splittableRandom = new SplittableRandom();\nlong[] arr = new long[100_000_000];\nArrays.parallelSetAll(arr, x ->splittableRandom.nextLong()); \n```", "```java\nRandom rnd = new Random();\n// the ints() flavor returns an infinite stream\nint[] arrOfInts = rnd.ints(10).toArray(); // stream of 10 ints\n// or, shortly\nint[] arrOfInts = new Random().ints(10).toArray(); \n```", "```java\nSecureRandom secureRnd = SecureRandom.getInstanceStrong();\nint[] arrOfSecInts = secureRnd.ints(10).toArray();\n// or, shortly\nint[] arrOfSecInts = SecureRandom.getInstanceStrong()\n  .ints(10).toArray(); \n```", "```java\nThreadLocalRandom tlRnd = ThreadLocalRandom.current();\nint[] arrOfTlInts = tlRnd.ints(10).toArray();\n// or, shortly\nint[] arrOfTlInts = ThreadLocalRandom.current()\n  .ints(10).toArray(); \n```", "```java\nSupplier<Double> doubles = Math::random;\ndouble[] arrOfDoubles = Stream.generate(doubles)\n   .takeWhile(t -> t < 0.5d)\n   .mapToDouble(i -> i)\n   .toArray(); \n```", "```java\nStreamableGenerator streamableRnd\n   = StreamableGenerator.of(\"L128X1024MixRandom\");\nint[] arrOfStRndInts = streamableRnd.ints(10).toArray();\n// or, shortly\nStreamableGenerator.of(\"L128X1024MixRandom\")\n  .ints(10).toArray(); \n```", "```java\nStreamableGenerator streamableRnd\n   = StreamableGenerator.of(\"L128X1024MixRandom\");\nList<int[]> listOfArrOfIntsSG\n   = streamableRnd.rngs(5) // get 5 pseudo-random generators\n    .map(r -> r.ints(10))  // generate 10 ints per generator\n    .map(r -> r.toArray())\n    .collect(Collectors.toList()); \n```", "```java\nJumpableGenerator jumpableRnd\n   = JumpableGenerator.of(\"Xoshiro256PlusPlus\");\nList<int[]> listOfArrOfIntsJG = jumpableRnd.jumps(5)\n   .map(r -> {\n        JumpableGenerator jg = (JumpableGenerator) r;\n        int[] ints = new int[10];\n        for (int i = 0; i < 10; i++) {\n           ints[i] = jg.nextInt();\n           jg.jump();\n        }\n        return ints;\n   })\n   .collect(Collectors.toList()); \n```", "```java\nLeapableGenerator leapableRnd\n   = LeapableGenerator.of(\"Xoshiro256PlusPlus\");\nList<int[]> listOfArrOfIntsLG = leapableRnd.leaps(5)\n   .map(r -> {\n        LeapableGenerator lg = (LeapableGenerator) r;\n        int[] ints = new int[10];\n        for (int i = 0; i < 10; i++) {\n           ints[i] = lg.nextInt();\n           lg.leap();\n        }\n        return ints;\n   })\n   .collect(Collectors.toList()); \n```", "```java\nRandom legacyRnd = Random.from(\n   RandomGenerator.of(\"L128X256MixRandom\"));\n// or, like his\nRandom legacyRnd = Random.from(RandomGeneratorFactory.\n   of(\"Xoroshiro128PlusPlus\").create());\n// or, like this\nRandom legacyRnd = Random.from(RandomGeneratorFactory\n   .<RandomGenerator.SplittableGenerator>of(\n      \"L128X256MixRandom\").create()); \n```", "```java\nList<Integer> listOfInts = new CopyOnWriteArrayList<>();\nExecutorService executorService\n  = Executors.newCachedThreadPool();\nSplittableGenerator splittableGenerator\n  = RandomGeneratorFactory\n     .<SplittableGenerator>of(\"L128X256MixRandom\").create();\nsplittableGenerator.splits(10)\n  .forEach((anotherSplittableGenerator) -> {\n    executorService.submit(() -> {\n      int nextInt = anotherSplittableGenerator.nextInt(1_000);\n      logger.info(() -> \"Added in list \" \n          + nextInt + \" by generator \" \n          + anotherSplittableGenerator.hashCode()\n          + \" running in thread\"\n          + Thread.currentThread().getName());\n      listOfInts.add(nextInt);\n    });\n});\nshutdownExecutor(executorService); \n```", "```java\nINFO: Added in list 192 by generator 1420516714 running in threadpool-1-thread-3\nINFO: Added in list 366 by generator 1190794841 running in threadpool-1-thread-8\nINFO: Added in list 319 by generator 275244369 running in threadpool-1-thread-9\n... \n```"]