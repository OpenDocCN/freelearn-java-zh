- en: Chapter 1. Welcome to WildFly!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Software prerequisites
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading and installing WildFly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding WildFly's directory overview
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running WildFly in standalone mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running WildFly in domain mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running WildFly as a service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this first chapter, we will describe WildFly's history, its prerequisites,
    where to get it, and how to install it. We will also explain the standalone and
    domain running modes, that is, how to run them up.
  prefs: []
  type: TYPE_NORMAL
- en: 'JBoss.org community is a huge community, where people all over the world develop,
    test, and document pieces of code. There are a lot of projects in there other
    than JBoss AS or the recent WildFly such as Infinispan, Undertow, PicketLink,
    Arquillian, HornetQ, RESTeasy, AeroGear, and Vert.x. For a complete list of all
    projects, visit the following site: [http://www.jboss.org/projects/](http://www.jboss.org/projects/).'
  prefs: []
  type: TYPE_NORMAL
- en: Despite marketing reasons, as there is no preferred project, the community wanted
    to change the name of the JBoss AS project to something different that would not
    collide with the community name. The other reason was the Red Hat JBoss supported
    version named JBoss **Enterprise Application Platform** (**EAP**). This was another
    point towards replacing the JBoss AS name.
  prefs: []
  type: TYPE_NORMAL
- en: How did the community change the name? How would they have decided? Easy—ask
    us, the community, for new names. The election process started, people from the
    JBoss Community, **JBoss** **User Group** (**JBUGs**), **Java User Group** (**JUGs**),
    and related communities all over the world, expressed their preferences.
  prefs: []
  type: TYPE_NORMAL
- en: The new name for JBoss AS should have suggested Java application server capabilities
    and affinities such as integration, cloud, mobile, messaging, nimbleness, strength,
    open source, free spirit, and so on. You guessed the winner!
  prefs: []
  type: TYPE_NORMAL
- en: '*"A wild fly is extremely agile, lightweight, untamed and truly free."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The brand new name was announced during the JUDCon 2013 in Brazil. Zzzzhhh...
    Welcome to WildFly!
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s talk about the WildFly features and characteristics:'
  prefs: []
  type: TYPE_NORMAL
- en: WildFly replaces JBoss AS. The first version of WildFly was 8.0, which was based
    on JBoss AS 7.1\. To keep things simple the community decided to keep the same
    numbering.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WildFly has gained the Java EE 7 Full platform compatible implementations badge,
    which means it has the newest Java technologies. Easy development, better security,
    better integration, better management!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WildFly boots in seconds. All its services start up together, but just the ones
    that it needs. This is because there is a centralized metadata cache and a modular
    classloading system, which prevents the famous classpath hell.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another big change is the default web server; WildFly now utilizes Undertow.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*"Undertow is a flexible performant web server written in java, providing both
    blocking and non-blocking API''s based on NIO."*'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: It is lightweight, less then 1 MB for its core jar, and less then 4 MB at runtime.
    Undertow is embeddable, flexible; it supports WebSocket (HTTP upgrade protocols)
    and Servlet 3.1\. Later in the book, we will see how to configure and tune Undertow
    embedded in WildFly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With this new release of WildFly has been introduced a **Role Based Access Control**
    (**RBAC**) system. This new feature actually gives functionalities to define users,
    groups and roles. This way you will have not simply a Superuser, but a user to
    do its proper task without compromising on security. It's highly customizable
    and it can be integrated with most identity stores such as LDAPs and ADs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WildFly has just one configuration file, so that all your settings are centralized
    in one place.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can manage your configurations through the Admin Console (also known as
    Web Console), the **Command Line Interface** (**CLI**), the REST API and the Java
    API. All these tools give great powers to customize your management settings.
    Within this book we will concentrate mainly on the CLI and the Admin Console.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: WildFly has been built using Java SE 1.7; thus, it requires you to have at least
    a JRE version 1.7.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Having said that, let's start for real!
  prefs: []
  type: TYPE_NORMAL
- en: In the following recipes we will see what we need to start JBoss AS, ops, and
    WildFly, where to get it, what does its folder structure look like, and where
    to find its configuration files.
  prefs: []
  type: TYPE_NORMAL
- en: Software prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: WildFly runs on top of the Java platform. It needs at least a **Java Runtime
    Environment** (**JRE**) version 1.7 to run (further references to versions 1.7
    and 7 should be considered equal—the same applies for versions 1.8 and 8 as well),
    but it also works perfectly with the latest JRE version 8.
  prefs: []
  type: TYPE_NORMAL
- en: As we will also need to compile and build Java web applications, we will need
    the **Java Development Kit** (**JDK**), which provides the necessary tools to
    work with the Java source code. In the JDK panorama we can find the Oracle JDK,
    developed and maintained by Oracle, and OpenJDK, which relies on community contribution.
  prefs: []
  type: TYPE_NORMAL
- en: Nevertheless, after April 2015, Oracle will no longer post updates of Java SE
    7 to its public download sites, as mentioned at [http://www.oracle.com/technetwork/java/javase/downloads/eol-135779.html](http://www.oracle.com/technetwork/java/javase/downloads/eol-135779.html).
    Also, keep in mind that the Java Critical Patch Updates are released on a quarterly
    basis; thus, for reasons of stability and feature support, we will use the Oracle
    JDK 8, which is freely available for download at [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: While writing this book, the latest stable Oracle JDK is version 1.8.0_31 (as
    well as 8u31). Hereby, every reference to **Java Virtual Machine** (**JVM**),
    Java, JRE, and JDK will be intended Oracle JDK 1.8.0_31\. To keep things simple,
    if you don't mind, use that same version.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the JDK, we will need Apache Maven 3, which is a build tool for
    Java projects. It is freely available for download at [http://maven.apache.org/download.cgi](http://maven.apache.org/download.cgi).
    A generic download link can be found at [http://www.us.apache.org/dist/maven/maven-3/3.2.5/binaries/apache-maven-3.2.5-bin.tar.gz](http://www.us.apache.org/dist/maven/maven-3/3.2.5/binaries/apache-maven-3.2.5-bin.tar.gz).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To fully follow the recipes in the book, using the same environment is a fundamental
    requirement. As I cannot replicate the same recipe to suit different settings
    (such as Windows, Mac, and Linux), I'll use Linux (actually, Fedora 21) as the
    base operating system.
  prefs: []
  type: TYPE_NORMAL
- en: If you are running a different system and you want to carefully follow what's
    in the book, you can easily install and run Fedora 21 inside a virtual machine
    using the VirtualBox software, available at [https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads).
  prefs: []
  type: TYPE_NORMAL
- en: Choose the version that is compatible with your actual system. You can install
    Fedora 21 by downloading its image at [https://getfedora.org/en/workstation/](https://getfedora.org/en/workstation/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The installation of the above software is out of the scope of this book.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To install the Oracle JDK, you need to open your browser and point it to [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once there, click on the JDK download link, as depicted in the following image:![Getting
    ready](img/3744_01_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The link will take you to the download page, where you first need to mark the
    option of **Accept License Agreement** to enable the links, as depicted in the
    following screenshot:![Getting ready](img/3744_01_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you accept the agreement, all the links get activated. Choose the one that
    best fits your hardware and operating system.![Getting ready](img/3744_01_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I'm running a Fedora 21 Linux machine, with a 64-bit hardware support, thus
    I'll use the **jdk-8u40-linux-x64.tar.gz** bundle. I could have used the RPM bundle,
    but I prefer installing the archive version to better fit my needs in terms of
    paths; what goes where.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, we will create a folder named `WFC`, which stands for *WildFly Cookbook*
    to store the contents of all the necessary software, codes, and files to follow
    all the recipes of the book. Open your terminal application and run the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The `WFC` folder is used just to not interfere with your current environment.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Choose the package archive; once the download is complete, open your command
    line and extract its contents to the `WFC` folder as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will extract the Oracle JDK software into the `jdk1.8.0_40` folder, inside
    the `WFC` folder starting from your `home` folder. For convenience, we will use
    a different folder name, like `jdk8`, to refer to the preceding JDK installation
    folder. Run the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now we need to set the `JAVA_HOME` environment variable and make the JDK commands
    available from our shell (also terminal).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open a text editor of your choice, and add the following directives to the
    `.bash_profile` file placed in your `home` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding two commands will set the `JAVA_HOME` variable and export the
    `JAVA_HOME/bin` path into your **PATH** system variable, respectively. The tilde
    `~` symbol is a shortcut to the user home directory in Unix-like systems.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For the changes to take effect, you can either log out and log back in, or
    just issue the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Once you are done with the installation phase, test your new environment by
    executing the `java -version` command in your terminal application and you should
    see (more or less) the output as depicted in the following image:![How to do it…](img/3744_01_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we need to install Apache Maven 3\. If you haven''t downloaded it yet,
    click on the following link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[http://www.us.apache.org/dist/maven/maven-3/3.2.5/binaries/apache-maven-3.2.5-bin.tar.gz](http://www.us.apache.org/dist/maven/maven-3/3.2.5/binaries/apache-maven-3.2.5-bin.tar.gz)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Once the download is complete, open your command line and extract its content
    to the `WFC` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will extract the Apache Maven (also known as Maven) software into the
    `apache-maven-3.2.5` folder, inside the `WFC` folder, starting from your `home`
    folder. For convenience, we will use a different folder name, like `maven`, to
    refer to the preceding Maven installation folder. Run the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now we need to set the `M2_HOME` environment variable and make Maven's commands
    available from our shell (also terminal).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open a text editor of your choice, and add the following directives to the
    `.bash_profile` file placed in your `home` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding two commands will set the `M2_HOME` variable and export the `M2_HOME/bin`
    path into your **PATH** system variable, respectively. The tilde `~` symbol is
    a shortcut to the user home directory, in Unix-like systems.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For the changes to take effect, you can either log out and log back in, or
    just issue the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Once you are done with the installation phase, test your new environment by
    executing the `mvn -version` command in your terminal application and you should
    see (more or less) the output as depicted in the following image:![How to do it…](img/3744_01_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Last, but not the least, we will need to install the `git`, which is a distributed
    revision control system. It is mainly used with the source code, but it''s also
    used as a configuration repository. To install the `git` tool, we will rely on
    the `yum` software manager, which makes the installation process easy. Open a
    terminal and do as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once done, try to hit the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have the `git` installed, we can proceed to download the code repository
    (or repo) used for this book, available on my GitHub account at the following
    URL: [https://github.com/foogaro/wildfly-cookbook.git](https://github.com/foogaro/wildfly-cookbook.git).'
  prefs: []
  type: TYPE_NORMAL
- en: You can `git-clone` the repository or just download it as a ZIP archive. Either
    way, create a folder named `github` into the `WFC` folder and place the source
    into it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the `git-clone` command, do as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Once the `git` has done cloning the repo, you will find a new folder named `wildfly-cookbook`
    where you can find all the projects used for the book.
  prefs: []
  type: TYPE_NORMAL
- en: To build a project, just go into the proper folder and execute the `maven-package`
    command.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to build the project `example`, do as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The preceding commands builds the project, and generate the web application
    artifact into a folder named `target`. There you can find the application `example.war`,
    ready to be deployed.
  prefs: []
  type: TYPE_NORMAL
- en: 'OK, we have finally finished installing all the software that we will need
    and use within the book. Just to be sure you are not missing any piece, you should
    have an environment as depicted in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more…](img/3744_01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Downloading and installing WildFly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to get and install WildFly. As always, in
    the open source world you can do the same thing in different ways. WildFly can
    be installed using your preferred software manager or by downloading the bundle
    provided by the [http://wildfly.org](http://wildfly.org) site. We will choose
    the second way, as per the JDK.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Just open your favorite browser and point it to [http://wildfly.org/downloads/](http://wildfly.org/downloads/).
    You should see a page similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/3744_01_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: WildFly's download page
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing this book, the latest WildFly was version 9.0.0.Beta2\.
    The final version is now available and in use.
  prefs: []
  type: TYPE_NORMAL
- en: Now, download the latest version into the `WFC` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once the download is complete, open a terminal and extract its contents into
    the `WFC` folder, executing the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding command will first point to our `WildFly Cookbook` folder; it
    will then extract the WildFly archive from it. Listing our `WFC` folder, we should
    find the newly created WildFly' folder named `wildfly-9.0.0.Beta2`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To better remember and handle WildFly''s installation directory, rename it
    `wildfly`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: By the way, WildFly can be also installed using the traditional `YUM`, Fedora's
    software manager.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: In a production environment, you will *not* place the WildFly installation directory
    into the `home` folder of a specific user. Rather, you will be placing it into
    different paths, relative to the context you are working in.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now we need to create the `JBOSS_HOME` environment variable, which is used
    by WildFly itself as base directory when it starts up (probably in future releases,
    this will be updated to `WILDFLY_HOME`). We will also create the `WILDFLY_HOME`
    environment variable, which we will use throughout the whole book to reference
    WildFly''s installation directory. Thus, open the `.bash_profile` file, placed
    in your `home` folder, with your favorite text editor and add the following directives:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For the changes to take effect, you can either log out and log back in, or
    just issue the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you followed the first two recipes carefully, your .`bash_profile` file
    should look like the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/3744_01_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Understanding WildFly's directory overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have finished installing WildFly, let's look into its folders. This
    recipe is going to be a little theoretical.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your terminal and run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The output of your commands should be similar to the following image:![How to
    do it…](img/3744_01_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: WildFly's folders overview
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The preceding image depicts WildFly''s folders in the filesystem. Each is outlined
    in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Folder name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `appclient` | Configuration files, deployment content, and writable areas
    used by the application client container run from this installation. |'
  prefs: []
  type: TYPE_TB
- en: '| `bin` | Start up scripts, start up configuration files, and various command
    line utilities like Vault, add-user, and Java diagnostic report available for
    Unix and Windows environments. |'
  prefs: []
  type: TYPE_TB
- en: '| `bin/client` | Contains a client jar for use by non-maven based clients.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `docs/schema` | XML schema definition files. |'
  prefs: []
  type: TYPE_TB
- en: '| `docs/examples/configs` | Example configuration files representing specific
    use cases. |'
  prefs: []
  type: TYPE_TB
- en: '| `domain` | Configuration files, deployment content, and writable areas used
    by the domain mode processes run from this installation. |'
  prefs: []
  type: TYPE_TB
- en: '| `modules` | WildFly is based on a modular class loading architecture. The
    various modules used in the server are stored here. |'
  prefs: []
  type: TYPE_TB
- en: '| `standalone` | Configuration files, deployment content, and writable areas
    used by the single standalone server run from this installation. |'
  prefs: []
  type: TYPE_TB
- en: '| `welcome-content` | Default Welcome Page content. |'
  prefs: []
  type: TYPE_TB
- en: 'In the preceding table, I''ve emphasized the "domain" and the "standalone"
    folders which are those that determine the mode which WildFly will run in: standalone
    or domain. In the next few recipes, we will have an overview of them, and get
    a deep insight later in the book.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Hereby, whenever mentioned, WildFly's home will be intended as `$WILDFLY_HOME`.
  prefs: []
  type: TYPE_NORMAL
- en: Running WildFly in standalone mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: WildFly in the standalone mode means a WildFly instance is launched and managed
    on its own. You can have as many standalone WildFly instances as you like, but
    you will have to manage them separately. This means that every configuration,
    datasource, deployment, and module has to be managed once per instance.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The main difference between the standalone and domain modes is about management
    and not about capabilities. Capabilities are determined by the profile you choose
    to run WildFly with.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s have a look into the standalone folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Folder''s name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `configuration` | Configuration files used by the single standalone server
    run from this installation. |'
  prefs: []
  type: TYPE_TB
- en: '| `deployments` | Deployments content used by the single standalone server
    run from this installation. |'
  prefs: []
  type: TYPE_TB
- en: '| `lib` | Libraries used by the single standalone server run from this installation.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `log` | Log files created by the single standalone server run from this installation.
    |'
  prefs: []
  type: TYPE_TB
- en: So, the configuration folder contains all the configuration files. Yes, you
    can have more than one, but you will have to choose which one to run with. The
    `deployments` folder contains all your applications to deploy, deployed and undeployed
    (as we will see later, there is even a marker for failed deployments). The folder
    `lib` contains all the library jars referenced by your applications using the
    Extension-List mechanism. Lastly, the `log` folder contains WildFly's `server.log`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'As previously mentioned, in the `configuration` folder you will find the following
    files:'
  prefs: []
  type: TYPE_NORMAL
- en: '| File name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `standalone.xml (default)` | Java Enterprise Edition 7 web profile certified
    configuration with the required technologies. |'
  prefs: []
  type: TYPE_TB
- en: '| `standalone-ha.xml` | Java Enterprise Edition 7 web profile certified configuration
    with high availability. |'
  prefs: []
  type: TYPE_TB
- en: '| `standalone-full.xml` | Java Enterprise Edition 7 full profile certified
    configuration including all the required EE 7 technologies, including messaging—JMS.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `standalone-full-ha.xml` | Java Enterprise Edition 7 full profile certified
    configuration with high availability. |'
  prefs: []
  type: TYPE_TB
- en: Along the lines of Java EE 7 profiles, WildFly defines its own profiles. For
    the standalone mode, each file corresponds to a WildFly profile, that is, `standalone.xml`
    corresponds to the default profile, `standalone-ha.xml` corresponds to the `ha`
    profile, `standalone-full.xml` corresponds to the `full` profile, and `standalone-full-ha.xml`
    corresponds to the `full-ha` profile. The same WildFly profiles will be found
    in the domain mode as well.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s try running WildFly in the standalone mode with its default settings,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first few lines tell you where WildFly is located and the JVM options.
    What follows is the Undertow HTTP Listener, which is the component that processes
    the HTTP request, listening on `http://127.0.0.1:8080`. As a matter of fact, you
    can test that WildFly is running correctly by pointing to the previous address,
    and you should see something like the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/3744_01_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: WildFly's welcome content
  prefs: []
  type: TYPE_NORMAL
- en: Next are the logs about WildFly's management listeners which I have emphasized.
    The first listener is the HTTP management listener, which is actually an HTTP
    API used to invoke commands over HTTP. The second one is the Admin Console, which
    provides you with a Web Console to simplify most of WildFly's configuration. The
    HTTP management interface and the Admin Console are listening respectively on
    `http://127.0.0.1:9990/management` and `http://127.0.0.1:9990`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To access the Admin Console, open a browser and point it to `http://127.0.0.1:9990/`.
    What you should see is a page as depicted in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/3744_01_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: WildFly's management error page
  prefs: []
  type: TYPE_NORMAL
- en: WildFly is up and running, but the Admin Console is not visible at the moment
    because there is no user registered to the "security context" (the proper WildFly
    term is Realm) that the Admin Console belongs to. We will talk about security
    and realms later in this recipe and in the upcoming chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Hereby, whenever I use the term Admin Console or Web Console, they are to intend
    the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, the preceding screenshot tells you how to create a user to access
    the Admin Console. We need to create the admin user by using the `add-user.sh`
    script provided by WildFly in its `bin` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once again, open your command line (you should never close it, unless you are
    shutting down your PC) and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot is the result of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/3744_01_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Examining the script and its interaction:'
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding screenshot, the script first asks for a user type; in our case
    we need a management user. So just hit *Enter* or type `a` and then hit *Enter*.
    We do not need to create a user at the application level, used to create security
    context.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We specify the username, for example `wildfly`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then we need to enter the password following the specified policy. So we type
    `cookbook.2015` and hit *Enter*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We confirm the password provided in the previous step by re-entering it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We confirm that we want to add our user "wildfly" to the `ManagementRealm` realm.
    So we type `yes` and hit *Enter*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the final step, the script asks if the user will be used to connect one of
    the WildFly process to another one, or used to authenticate to an EJB. In this
    case, we type `no` and hit *Enter*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let''s point to the admin address `http://127.0.0.1:9990` again. The page
    now asks you to enter the username and the password. Specify `wildfly` as username
    and `cookbook.2015` as password, and you should see the WildFly Admin Console
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/3744_01_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: WildFly's Web Console
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will take a deep dive into the standalone mode soon. In [Chapter 2](ch02.html
    "Chapter 2. Running WildFly in Standalone Mode"), *Running WildFly in Standalone
    Mode*, there will be described in detail all the configuration files, which one
    you should use, and how to manage your instance with both the Admin Console and
    the CLI. We will also deploy both the management tools.
  prefs: []
  type: TYPE_NORMAL
- en: Running WildFly in domain mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Domain mode is something totally new since JBoss AS 4, 5, and 6\. It was
    first introduced in JBoss AS 7.
  prefs: []
  type: TYPE_NORMAL
- en: It's about grouping several WildFly instances into one single group, a server-group
    using the WildFly nomenclature. In fact, we group the WildFly server into one
    logical server-group, and all the WildFly instances will share the same configuration.
    By this we intend that they share the same WildFly profile (`default`, `ha`, `full`,
    and `full-ha`), same deployments, and so on. What will not be shared is specific
    instance configuration such as IP bind address, ports, and others.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose you have an application and you want it to deploy on four servers of
    your infrastructure (or test rather than preproduction or production). You will
    need to configure a server-group, associate the four server instances to it, and
    you are done. Dealing just with the server-group, all your settings and changes
    will be spread to all the related server instances. This was definitely a big
    miss in JBoss AS, but now we have it.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember that a server-group does *not* form a cluster in any way.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When dealing with domain mode, there are two new terms to know and understand:
    **domain controller** (**DC**) and **host controller** (**HC**).'
  prefs: []
  type: TYPE_NORMAL
- en: The first one, the DC, acts as the parent process, the "gran maestro" of an
    orchestra. Every single change is provided by the DC towards all the HCs of all
    server-groups. The DC configuration file is named `domain.xml`, whilst the HC
    configuration file is named `host.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To avoid confusion, it's better to clarify the terminology that we will use
    in the book. We might refer to the server running the domain controller as the
    "master" or the "domain". Alternatively, we might refer to a running WildFly instance
    that is not the domain, as the "host", or "slave".
  prefs: []
  type: TYPE_NORMAL
- en: One more thing to know is that contrary to the standalone mode where you have
    different files for different profiles, in the domain mode you end up with just
    one file (there is another one named `host.xml`, but we will talk about it soon)
    having all the profiles configured in for you. Profiles are the same as for the
    standalone mode. We will learn how to associate a profile to a server-group in
    the chapter dedicated to the domain mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at the `domain` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Folder''s name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `configuration` | Configuration files for the domain and for the host controller
    and any servers running off this installation. All configuration information for
    the servers managed within the domain is located here and is the single place
    for configuration information. |'
  prefs: []
  type: TYPE_TB
- en: '| `content` | An internal working area for the host controller that controls
    this installation. This is where it internally stores the deployment content.
    This directory is generated by WildFly when it starts and is not meant to be manipulated
    by the end users. Note that the domain mode does not support deploying content
    based on scanning a file system. |'
  prefs: []
  type: TYPE_TB
- en: '| `lib/ext` | Location for the installed library jars referenced by applications
    using the Extension-List mechanism. |'
  prefs: []
  type: TYPE_TB
- en: '| `log` | Location where the host controller process writes its logs. The process
    controller, a small lightweight process that actually spawns the other host controller
    processes and any application server processes also writes a log here. |'
  prefs: []
  type: TYPE_TB
- en: '| `servers` | Writable area used by each application server instance that runs
    from this installation. Each application server instance will have its own subdirectory,
    created when the server is first started. In each server''s subdirectory there
    will be the following subdirectories:'
  prefs: []
  type: TYPE_NORMAL
- en: '`data`: Information written by the server that needs to survive a restart of
    the server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log`: The server''s log files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tmp`: Location for temporary files written by the server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `tmp` | Location for temporary files written by the server |'
  prefs: []
  type: TYPE_TB
- en: '| `tmp/auth` | Special location used to exchange authentication tokens with
    local clients so they can confirm that they are local to the running AS process.
    |'
  prefs: []
  type: TYPE_TB
- en: 'So, the `configuration` folder contains all the configuration files. Let''s
    have a look at all of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '| File name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `domain.xml (default name)` | This is the main configuration file that includes
    all WildFly profiles plus all other configurations needed to run the AS. When
    WildFly starts, it will look for a file named `domain.xml` if not differently
    specified. |'
  prefs: []
  type: TYPE_TB
- en: '| `host.xml (default name)` | This is the host controller configuration file
    provided by the WildFly installation. In this you will find the entire specific
    configurations about server instances. When WildFly starts, it will look for a
    file named `host.xml` if not differently specified. |'
  prefs: []
  type: TYPE_TB
- en: '| `host-master.xml` | This is a host controller configuration example file
    provided by the WildFly installation. It shows you how to configure WildFly running
    only the domain controller. |'
  prefs: []
  type: TYPE_TB
- en: '| `host-slave.xml` | This is a host controller configuration example file provided
    by the WildFly installation used to configure WildFly running as slave and connecting
    to the domain controller. |'
  prefs: []
  type: TYPE_TB
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s try running WildFly in the domain mode with its default settings (two
    server-groups—first one with two instances named `server-one` and `server-two`,
    last one with one instance named `server-three` with auto-start disabled). Do
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The domain controller is responsible for initiating all local host controllers
    along with the configured instances. Now, opening the WildFly Admin Console, you
    can see an overview of the details of both your instances:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/3744_01_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: WildFly's runtime domain overview
  prefs: []
  type: TYPE_NORMAL
- en: From the domain perspective, you can see two server-groups named **main-server-group**
    with `full` profile and the **other-server-group** with `full-ha` profile. The
    latter is not running because its auto-start property is set to false.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This time, even if running in the domain mode for the first time, we did *not*
    have to create a new user, because we already did so while setting up the standalone
    mode.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will take a deep dive into the domain mode soon. In [Chapter 3](ch03.html
    "Chapter 3. Running WildFly in Domain Mode"), *Running WildFly in Domain Mode*,
    all configuration files will be described in detail apart from learning how to
    choose the correct profile and how to manage your instance with both the Admin
    Console and the CLI. We will analyze the domain and host controller processes.
    We will create various examples of server groups, running locally and in pseudo-different
    machines. We will also deploy both the management tools and analyze how this behaves
    in the domain mode.
  prefs: []
  type: TYPE_NORMAL
- en: Running WildFly as a service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to install WildFly as a service, actually
    having WildFly run automatically when the OS starts. If you want to run Wildfly
    manually on demand, you can skip this recipe, unless for knowledge purpose.
  prefs: []
  type: TYPE_NORMAL
- en: Most Unix-like systems have different "runlevels" (think about them as steps)
    for various stages of the system running phase. At the operating system level,
    a service can be activated only if other services have been successfully activated.
    Thus if you activate a service that needs network before this one is up and running,
    it gets faulty or useless. This is essentially what "runlevels" are for.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a list of runlevels:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rc1.d**: Single user mode'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rc2.d**: Single user mode with networking'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rc3.d**: Multi-user mode—boot up in text mode'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rc4.d**: Undefined'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rc5.d**: Multi-user mode—boot up in X Windows'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rc6.d**: Shutdown'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most production Linux systems boot using runlevel 3 (UI is not needed and it
    will be a waste of resources), but to reach all audiences, we will use level 2,
    3 and 5.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'WildFly comes with a predefined script, which can be used to run WildFly as
    a service. This script is located in the `bin/init.d` folder of the WildFly installation
    folder. So we just need to copy the file inside the `/etc/init.d` system folder
    and set it as a service, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'There is also one more file that we need to take a look at, and it is the `wildfly.conf`,
    placed into the same `bin/init.d` directory of the WildFly installation folder.
    The following is the file as is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The previous configuration file basically sets a series of parameters that tell
    `init-script` which WildFly mode to use, which configuration file, which user
    WildFly should run with, and so on. Any update should be placed into that file.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the moment, we will rely on the defaults, except for the user that we will
    mention explicitly by uncommenting the line `# JBOSS_USER=wildfly`, by removing
    the hash `#` symbol. You may have noticed that you can also specify the mode which
    WildFly will run with: domain or standalone.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We now need to create the `wildfly` user, and give the ownership of the WildFly
    `home` folder to the `wildfly` user. Do as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Now if you reboot your system, you will have WildFly up and running as a service
    with the default settings, launched by the `wildfly` user.
  prefs: []
  type: TYPE_NORMAL
