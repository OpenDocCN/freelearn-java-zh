- en: Chapter 1. Welcome to WildFly!
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. 欢迎来到WildFly！
- en: 'In this chapter, you will learn the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习以下食谱：
- en: Software prerequisites
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件先决条件
- en: Downloading and installing WildFly
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载和安装WildFly
- en: Understanding WildFly's directory overview
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解WildFly目录概述
- en: Running WildFly in standalone mode
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以独立模式运行WildFly
- en: Running WildFly in domain mode
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以域模式运行WildFly
- en: Running WildFly as a service
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以服务形式运行WildFly
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In this first chapter, we will describe WildFly's history, its prerequisites,
    where to get it, and how to install it. We will also explain the standalone and
    domain running modes, that is, how to run them up.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将描述WildFly的历史、其先决条件、如何获取它以及如何安装它。我们还将解释独立和域运行模式，即如何启动它们。
- en: 'JBoss.org community is a huge community, where people all over the world develop,
    test, and document pieces of code. There are a lot of projects in there other
    than JBoss AS or the recent WildFly such as Infinispan, Undertow, PicketLink,
    Arquillian, HornetQ, RESTeasy, AeroGear, and Vert.x. For a complete list of all
    projects, visit the following site: [http://www.jboss.org/projects/](http://www.jboss.org/projects/).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: JBoss.org社区是一个庞大的社区，世界各地的人们在这里开发、测试和编写代码片段。其中有很多项目，除了JBoss AS或最近的WildFly之外，如Infinispan、Undertow、PicketLink、Arquillian、HornetQ、RESTeasy、AeroGear和Vert.x。要查看所有项目的完整列表，请访问以下网站：[http://www.jboss.org/projects/](http://www.jboss.org/projects/)。
- en: Despite marketing reasons, as there is no preferred project, the community wanted
    to change the name of the JBoss AS project to something different that would not
    collide with the community name. The other reason was the Red Hat JBoss supported
    version named JBoss **Enterprise Application Platform** (**EAP**). This was another
    point towards replacing the JBoss AS name.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有营销原因，因为没有首选项目，社区希望将JBoss AS项目的名称改为不同的名称，以免与社区名称冲突。另一个原因是Red Hat JBoss支持的版本名为JBoss
    **企业应用平台**（**EAP**）。这又是一个取代JBoss AS名称的理由。
- en: How did the community change the name? How would they have decided? Easy—ask
    us, the community, for new names. The election process started, people from the
    JBoss Community, **JBoss** **User Group** (**JBUGs**), **Java User Group** (**JUGs**),
    and related communities all over the world, expressed their preferences.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 社区是如何改变名称的？他们是如何决定的？很简单——向我们，社区，提出新的名称。选举过程开始了，来自JBoss社区、**JBoss用户组**（**JBUGs**）、**Java用户组**（**JUGs**）以及世界各地的相关社区的人们都表达了自己的偏好。
- en: The new name for JBoss AS should have suggested Java application server capabilities
    and affinities such as integration, cloud, mobile, messaging, nimbleness, strength,
    open source, free spirit, and so on. You guessed the winner!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: JBoss AS的新名称应该暗示Java应用程序服务器的能力和亲和力，如集成、云、移动、消息、敏捷、强大、开源、自由精神等。你猜对了赢家！
- en: '*"A wild fly is extremely agile, lightweight, untamed and truly free."*'
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*"一只野蜂极其敏捷、轻量、野性十足，真正自由。"*'
- en: The brand new name was announced during the JUDCon 2013 in Brazil. Zzzzhhh...
    Welcome to WildFly!
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个全新的名字是在2013年巴西的JUDCon上宣布的。Zzzzhhh... 欢迎来到WildFly！
- en: 'Let''s talk about the WildFly features and characteristics:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们谈谈WildFly的功能和特性：
- en: WildFly replaces JBoss AS. The first version of WildFly was 8.0, which was based
    on JBoss AS 7.1\. To keep things simple the community decided to keep the same
    numbering.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WildFly取代了JBoss AS。WildFly的第一个版本是8.0，它基于JBoss AS 7.1。为了简化，社区决定保持相同的编号。
- en: WildFly has gained the Java EE 7 Full platform compatible implementations badge,
    which means it has the newest Java technologies. Easy development, better security,
    better integration, better management!
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WildFly获得了Java EE 7 Full平台兼容实现徽章，这意味着它拥有最新的Java技术。易于开发、更好的安全性、更好的集成、更好的管理！
- en: WildFly boots in seconds. All its services start up together, but just the ones
    that it needs. This is because there is a centralized metadata cache and a modular
    classloading system, which prevents the famous classpath hell.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WildFly启动只需几秒钟。所有服务一起启动，但只需启动它需要的那些。这是因为有一个集中的元数据缓存和模块化类加载系统，这可以防止著名的类路径地狱。
- en: Another big change is the default web server; WildFly now utilizes Undertow.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个重大变化是默认的Web服务器；现在WildFly使用Undertow。
- en: '*"Undertow is a flexible performant web server written in java, providing both
    blocking and non-blocking API''s based on NIO."*'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*"Undertow是一个灵活高效的Java编写的Web服务器，提供基于NIO的阻塞和非阻塞API。"*'
- en: It is lightweight, less then 1 MB for its core jar, and less then 4 MB at runtime.
    Undertow is embeddable, flexible; it supports WebSocket (HTTP upgrade protocols)
    and Servlet 3.1\. Later in the book, we will see how to configure and tune Undertow
    embedded in WildFly.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它轻量级，核心jar文件小于1 MB，运行时小于4 MB。Undertow是可嵌入的，灵活的；它支持WebSocket（HTTP升级协议）和Servlet
    3.1。在本书的后面，我们将看到如何配置和调整嵌入在WildFly中的Undertow。
- en: With this new release of WildFly has been introduced a **Role Based Access Control**
    (**RBAC**) system. This new feature actually gives functionalities to define users,
    groups and roles. This way you will have not simply a Superuser, but a user to
    do its proper task without compromising on security. It's highly customizable
    and it can be integrated with most identity stores such as LDAPs and ADs.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在WildFly的新版本中，引入了一个**基于角色的访问控制**（**RBAC**）系统。这个新功能实际上赋予了定义用户、组和角色的功能。这样，你将不仅仅有一个超级用户，而是一个能够完成其适当任务而不影响安全性的用户。它高度可定制，并且可以与大多数身份存储系统集成，如LDAPs和ADs。
- en: WildFly has just one configuration file, so that all your settings are centralized
    in one place.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WildFly只有一个配置文件，因此所有设置都集中在一个地方。
- en: You can manage your configurations through the Admin Console (also known as
    Web Console), the **Command Line Interface** (**CLI**), the REST API and the Java
    API. All these tools give great powers to customize your management settings.
    Within this book we will concentrate mainly on the CLI and the Admin Console.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以通过管理控制台（也称为Web控制台）、**命令行界面**（**CLI**）、REST API和Java API来管理你的配置。所有这些工具都赋予了你强大的自定义管理设置的能力。在本书中，我们将主要集中讨论CLI和管理控制台。
- en: Note
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: WildFly has been built using Java SE 1.7; thus, it requires you to have at least
    a JRE version 1.7.
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: WildFly是用Java SE 1.7构建的；因此，它要求你至少拥有JRE版本1.7。
- en: Having said that, let's start for real!
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，让我们开始吧！
- en: In the following recipes we will see what we need to start JBoss AS, ops, and
    WildFly, where to get it, what does its folder structure look like, and where
    to find its configuration files.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的菜谱中，我们将看到启动JBoss AS、ops和WildFly需要什么，在哪里获取，其文件夹结构是什么样的，以及在哪里可以找到其配置文件。
- en: Software prerequisites
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件先决条件
- en: WildFly runs on top of the Java platform. It needs at least a **Java Runtime
    Environment** (**JRE**) version 1.7 to run (further references to versions 1.7
    and 7 should be considered equal—the same applies for versions 1.8 and 8 as well),
    but it also works perfectly with the latest JRE version 8.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: WildFly运行在Java平台之上。它至少需要Java运行时环境（**JRE**）版本1.7才能运行（对版本1.7和7的进一步引用应视为相同——同样适用于版本1.8和8），但它也可以与最新的JRE版本8完美兼容。
- en: As we will also need to compile and build Java web applications, we will need
    the **Java Development Kit** (**JDK**), which provides the necessary tools to
    work with the Java source code. In the JDK panorama we can find the Oracle JDK,
    developed and maintained by Oracle, and OpenJDK, which relies on community contribution.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们还需要编译和构建Java网络应用程序，我们需要**Java开发工具包**（**JDK**），它提供了与Java源代码一起工作的必要工具。在JDK全景中，我们可以找到Oracle
    JDK，由Oracle开发和维护，以及OpenJDK，它依赖于社区贡献。
- en: Nevertheless, after April 2015, Oracle will no longer post updates of Java SE
    7 to its public download sites, as mentioned at [http://www.oracle.com/technetwork/java/javase/downloads/eol-135779.html](http://www.oracle.com/technetwork/java/javase/downloads/eol-135779.html).
    Also, keep in mind that the Java Critical Patch Updates are released on a quarterly
    basis; thus, for reasons of stability and feature support, we will use the Oracle
    JDK 8, which is freely available for download at [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，自2015年4月起，Oracle将不再向其公共下载站点发布Java SE 7的更新，如[http://www.oracle.com/technetwork/java/javase/downloads/eol-135779.html](http://www.oracle.com/technetwork/java/javase/downloads/eol-135779.html)中所述。此外，请记住，Java关键补丁更新是按季度发布的；因此，出于稳定性和功能支持的原因，我们将使用Oracle
    JDK 8，该版本可在[http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html)免费下载。
- en: While writing this book, the latest stable Oracle JDK is version 1.8.0_31 (as
    well as 8u31). Hereby, every reference to **Java Virtual Machine** (**JVM**),
    Java, JRE, and JDK will be intended Oracle JDK 1.8.0_31\. To keep things simple,
    if you don't mind, use that same version.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写这本书的时候，最新的稳定Oracle JDK版本是1.8.0_31（以及8u31）。因此，对**Java虚拟机**（**JVM**）、Java、JRE和JDK的所有引用都将是指Oracle
    JDK 1.8.0_31。为了简化问题，如果你不介意，请使用相同的版本。
- en: In addition to the JDK, we will need Apache Maven 3, which is a build tool for
    Java projects. It is freely available for download at [http://maven.apache.org/download.cgi](http://maven.apache.org/download.cgi).
    A generic download link can be found at [http://www.us.apache.org/dist/maven/maven-3/3.2.5/binaries/apache-maven-3.2.5-bin.tar.gz](http://www.us.apache.org/dist/maven/maven-3/3.2.5/binaries/apache-maven-3.2.5-bin.tar.gz).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To fully follow the recipes in the book, using the same environment is a fundamental
    requirement. As I cannot replicate the same recipe to suit different settings
    (such as Windows, Mac, and Linux), I'll use Linux (actually, Fedora 21) as the
    base operating system.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: If you are running a different system and you want to carefully follow what's
    in the book, you can easily install and run Fedora 21 inside a virtual machine
    using the VirtualBox software, available at [https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: Choose the version that is compatible with your actual system. You can install
    Fedora 21 by downloading its image at [https://getfedora.org/en/workstation/](https://getfedora.org/en/workstation/).
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The installation of the above software is out of the scope of this book.
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To install the Oracle JDK, you need to open your browser and point it to [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html).
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once there, click on the JDK download link, as depicted in the following image:![Getting
    ready](img/3744_01_01.jpg)
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The link will take you to the download page, where you first need to mark the
    option of **Accept License Agreement** to enable the links, as depicted in the
    following screenshot:![Getting ready](img/3744_01_02.jpg)
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you accept the agreement, all the links get activated. Choose the one that
    best fits your hardware and operating system.![Getting ready](img/3744_01_03.jpg)
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I'm running a Fedora 21 Linux machine, with a 64-bit hardware support, thus
    I'll use the **jdk-8u40-linux-x64.tar.gz** bundle. I could have used the RPM bundle,
    but I prefer installing the archive version to better fit my needs in terms of
    paths; what goes where.
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, we will create a folder named `WFC`, which stands for *WildFly Cookbook*
    to store the contents of all the necessary software, codes, and files to follow
    all the recipes of the book. Open your terminal application and run the following
    command:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The `WFC` folder is used just to not interfere with your current environment.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Choose the package archive; once the download is complete, open your command
    line and extract its contents to the `WFC` folder as follows:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This will extract the Oracle JDK software into the `jdk1.8.0_40` folder, inside
    the `WFC` folder starting from your `home` folder. For convenience, we will use
    a different folder name, like `jdk8`, to refer to the preceding JDK installation
    folder. Run the following command:'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将把Oracle JDK软件提取到`WFC`文件夹内的`jdk1.8.0_40`文件夹中，从您的`home`文件夹开始。为了方便，我们将使用不同的文件夹名，如`jdk8`，来指代先前的JDK安装文件夹。运行以下命令：
- en: '[PRE2]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now we need to set the `JAVA_HOME` environment variable and make the JDK commands
    available from our shell (also terminal).
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们需要设置`JAVA_HOME`环境变量，并使JDK命令可以从我们的shell（也称为终端）中可用。
- en: 'Open a text editor of your choice, and add the following directives to the
    `.bash_profile` file placed in your `home` folder:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您选择的文本编辑器，并将以下指令添加到位于您`home`文件夹中的`.bash_profile`文件中：
- en: '[PRE3]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The preceding two commands will set the `JAVA_HOME` variable and export the
    `JAVA_HOME/bin` path into your **PATH** system variable, respectively. The tilde
    `~` symbol is a shortcut to the user home directory in Unix-like systems.
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前两个命令将设置`JAVA_HOME`变量，并将`JAVA_HOME/bin`路径分别导出到您的**PATH**系统变量中。波浪线`~`符号是Unix-like系统中用户主目录的快捷方式。
- en: 'For the changes to take effect, you can either log out and log back in, or
    just issue the following command:'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了使更改生效，您可以注销并重新登录，或者只需发出以下命令：
- en: '[PRE4]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Once you are done with the installation phase, test your new environment by
    executing the `java -version` command in your terminal application and you should
    see (more or less) the output as depicted in the following image:![How to do it…](img/3744_01_04.jpg)
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装阶段完成后，通过在终端应用程序中执行`java -version`命令来测试您的新环境，您应该看到（或多或少）以下图片中所示的内容：![如何操作…](img/3744_01_04.jpg)
- en: 'Next, we need to install Apache Maven 3\. If you haven''t downloaded it yet,
    click on the following link:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要安装Apache Maven 3。如果您还没有下载，请点击以下链接：
- en: '[http://www.us.apache.org/dist/maven/maven-3/3.2.5/binaries/apache-maven-3.2.5-bin.tar.gz](http://www.us.apache.org/dist/maven/maven-3/3.2.5/binaries/apache-maven-3.2.5-bin.tar.gz)'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://www.us.apache.org/dist/maven/maven-3/3.2.5/binaries/apache-maven-3.2.5-bin.tar.gz](http://www.us.apache.org/dist/maven/maven-3/3.2.5/binaries/apache-maven-3.2.5-bin.tar.gz)'
- en: 'Once the download is complete, open your command line and extract its content
    to the `WFC` folder:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载完成后，打开您的命令行，将其内容提取到`WFC`文件夹中：
- en: '[PRE5]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This will extract the Apache Maven (also known as Maven) software into the
    `apache-maven-3.2.5` folder, inside the `WFC` folder, starting from your `home`
    folder. For convenience, we will use a different folder name, like `maven`, to
    refer to the preceding Maven installation folder. Run the following command:'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将把Apache Maven（也称为Maven）软件提取到`WFC`文件夹内的`apache-maven-3.2.5`文件夹中，从您的`home`文件夹开始。为了方便，我们将使用不同的文件夹名，如`maven`，来指代先前的Maven安装文件夹。运行以下命令：
- en: '[PRE6]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now we need to set the `M2_HOME` environment variable and make Maven's commands
    available from our shell (also terminal).
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们需要设置`M2_HOME`环境变量，并使Maven的命令可以从我们的shell（也称为终端）中可用。
- en: 'Open a text editor of your choice, and add the following directives to the
    `.bash_profile` file placed in your `home` folder:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您选择的文本编辑器，并将以下指令添加到位于您`home`文件夹中的`.bash_profile`文件中：
- en: '[PRE7]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The preceding two commands will set the `M2_HOME` variable and export the `M2_HOME/bin`
    path into your **PATH** system variable, respectively. The tilde `~` symbol is
    a shortcut to the user home directory, in Unix-like systems.
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前两个命令将设置`M2_HOME`变量，并将`M2_HOME/bin`路径分别导出到您的**PATH**系统变量中。波浪线`~`符号是Unix-like系统中用户主目录的快捷方式。
- en: 'For the changes to take effect, you can either log out and log back in, or
    just issue the following command:'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了使更改生效，您可以注销并重新登录，或者只需发出以下命令：
- en: '[PRE8]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Once you are done with the installation phase, test your new environment by
    executing the `mvn -version` command in your terminal application and you should
    see (more or less) the output as depicted in the following image:![How to do it…](img/3744_01_05.jpg)
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装阶段完成后，通过在终端应用程序中执行`mvn -version`命令来测试您的新环境，您应该看到（或多或少）以下图片中所示的内容：![如何操作…](img/3744_01_05.jpg)
- en: 'Last, but not the least, we will need to install the `git`, which is a distributed
    revision control system. It is mainly used with the source code, but it''s also
    used as a configuration repository. To install the `git` tool, we will rely on
    the `yum` software manager, which makes the installation process easy. Open a
    terminal and do as follows:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Once done, try to hit the following command:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: There's more…
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have the `git` installed, we can proceed to download the code repository
    (or repo) used for this book, available on my GitHub account at the following
    URL: [https://github.com/foogaro/wildfly-cookbook.git](https://github.com/foogaro/wildfly-cookbook.git).'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: You can `git-clone` the repository or just download it as a ZIP archive. Either
    way, create a folder named `github` into the `WFC` folder and place the source
    into it.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the `git-clone` command, do as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Once the `git` has done cloning the repo, you will find a new folder named `wildfly-cookbook`
    where you can find all the projects used for the book.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: To build a project, just go into the proper folder and execute the `maven-package`
    command.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to build the project `example`, do as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The preceding commands builds the project, and generate the web application
    artifact into a folder named `target`. There you can find the application `example.war`,
    ready to be deployed.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: 'OK, we have finally finished installing all the software that we will need
    and use within the book. Just to be sure you are not missing any piece, you should
    have an environment as depicted in the following image:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more…](img/3744_01_06.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
- en: Downloading and installing WildFly
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to get and install WildFly. As always, in
    the open source world you can do the same thing in different ways. WildFly can
    be installed using your preferred software manager or by downloading the bundle
    provided by the [http://wildfly.org](http://wildfly.org) site. We will choose
    the second way, as per the JDK.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Just open your favorite browser and point it to [http://wildfly.org/downloads/](http://wildfly.org/downloads/).
    You should see a page similar to the following screenshot:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/3744_01_07.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
- en: WildFly's download page
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing this book, the latest WildFly was version 9.0.0.Beta2\.
    The final version is now available and in use.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: Now, download the latest version into the `WFC` folder.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once the download is complete, open a terminal and extract its contents into
    the `WFC` folder, executing the following commands:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The preceding command will first point to our `WildFly Cookbook` folder; it
    will then extract the WildFly archive from it. Listing our `WFC` folder, we should
    find the newly created WildFly' folder named `wildfly-9.0.0.Beta2`.
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To better remember and handle WildFly''s installation directory, rename it
    `wildfly`, as follows:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: By the way, WildFly can be also installed using the traditional `YUM`, Fedora's
    software manager.
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In a production environment, you will *not* place the WildFly installation directory
    into the `home` folder of a specific user. Rather, you will be placing it into
    different paths, relative to the context you are working in.
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在生产环境中，你不会将 WildFly 安装目录放置在特定用户的 `home` 文件夹中。相反，你将把它放置在相对于你工作上下文的不同路径中。
- en: 'Now we need to create the `JBOSS_HOME` environment variable, which is used
    by WildFly itself as base directory when it starts up (probably in future releases,
    this will be updated to `WILDFLY_HOME`). We will also create the `WILDFLY_HOME`
    environment variable, which we will use throughout the whole book to reference
    WildFly''s installation directory. Thus, open the `.bash_profile` file, placed
    in your `home` folder, with your favorite text editor and add the following directives:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要创建 `JBOSS_HOME` 环境变量，这是 WildFly 在启动时用作基础目录的变量（可能在未来的版本中，这将更新为 `WILDFLY_HOME`）。我们还将创建
    `WILDFLY_HOME` 环境变量，我们将在整个书中使用它来引用 WildFly 的安装目录。因此，使用你喜欢的文本编辑器打开位于你的 `home` 文件夹中的
    `.bash_profile` 文件，并添加以下指令：
- en: '[PRE15]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'For the changes to take effect, you can either log out and log back in, or
    just issue the following command:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使更改生效，你可以要么注销并重新登录，要么只需发出以下命令：
- en: '[PRE16]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'If you followed the first two recipes carefully, your .`bash_profile` file
    should look like the following image:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仔细遵循了前两个食谱，你的 `.bash_profile` 文件应该看起来像以下图片：
- en: '![How to do it…](img/3744_01_08.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作…](img/3744_01_08.jpg)'
- en: Understanding WildFly's directory overview
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 WildFly 的目录概览
- en: Now that we have finished installing WildFly, let's look into its folders. This
    recipe is going to be a little theoretical.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了 WildFly 的安装，让我们来看看它的文件夹。这个食谱将稍微有些理论性。
- en: How to do it…
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Open your terminal and run the following commands:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的终端并运行以下命令：
- en: '[PRE17]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The output of your commands should be similar to the following image:![How to
    do it…](img/3744_01_09.jpg)
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你命令的输出应该类似于以下图片：![如何操作…](img/3744_01_09.jpg)
- en: WildFly's folders overview
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: WildFly 的文件夹概览
- en: How it works…
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作…
- en: 'The preceding image depicts WildFly''s folders in the filesystem. Each is outlined
    in the following table:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图片展示了文件系统中 WildFly 的文件夹。以下表格中概述了每个文件夹：
- en: '| Folder name | Description |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| 文件夹名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `appclient` | Configuration files, deployment content, and writable areas
    used by the application client container run from this installation. |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| `appclient` | 由该安装启动的应用客户端容器使用的配置文件、部署内容和可写区域。|'
- en: '| `bin` | Start up scripts, start up configuration files, and various command
    line utilities like Vault, add-user, and Java diagnostic report available for
    Unix and Windows environments. |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| `bin` | 包含启动脚本、启动配置文件以及 Unix 和 Windows 环境中可用的各种命令行工具，如 Vault、add-user 和 Java
    诊断报告。|'
- en: '| `bin/client` | Contains a client jar for use by non-maven based clients.
    |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| `bin/client` | 包含用于非 Maven 基础客户端的客户端 jar。|'
- en: '| `docs/schema` | XML schema definition files. |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| `docs/schema` | XML 架构定义文件。|'
- en: '| `docs/examples/configs` | Example configuration files representing specific
    use cases. |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| `docs/examples/configs` | 代表特定用例的示例配置文件。|'
- en: '| `domain` | Configuration files, deployment content, and writable areas used
    by the domain mode processes run from this installation. |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| `domain` | 由该安装启动的域模式进程使用的配置文件、部署内容和可写区域。|'
- en: '| `modules` | WildFly is based on a modular class loading architecture. The
    various modules used in the server are stored here. |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| `modules` | WildFly 基于模块化类加载架构。服务器中使用的各种模块存储在这里。|'
- en: '| `standalone` | Configuration files, deployment content, and writable areas
    used by the single standalone server run from this installation. |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| `standalone` | 由该安装启动的单个独立服务器使用的配置文件、部署内容和可写区域。|'
- en: '| `welcome-content` | Default Welcome Page content. |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| `welcome-content` | 默认欢迎页面内容。|'
- en: 'In the preceding table, I''ve emphasized the "domain" and the "standalone"
    folders which are those that determine the mode which WildFly will run in: standalone
    or domain. In the next few recipes, we will have an overview of them, and get
    a deep insight later in the book.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的表中，我强调了“domain”和“standalone”文件夹，这些文件夹决定了 WildFly 将运行在哪种模式下：独立模式或域模式。在接下来的几个食谱中，我们将概述它们，并在本书的后续部分进行深入了解。
- en: Note
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Hereby, whenever mentioned, WildFly's home will be intended as `$WILDFLY_HOME`.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，每当提到 WildFly 的家目录时，将指代 `$WILDFLY_HOME`。
- en: Running WildFly in standalone mode
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以独立模式运行 WildFly
- en: WildFly in the standalone mode means a WildFly instance is launched and managed
    on its own. You can have as many standalone WildFly instances as you like, but
    you will have to manage them separately. This means that every configuration,
    datasource, deployment, and module has to be managed once per instance.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The main difference between the standalone and domain modes is about management
    and not about capabilities. Capabilities are determined by the profile you choose
    to run WildFly with.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s have a look into the standalone folder:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '| Folder''s name | Description |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
- en: '| `configuration` | Configuration files used by the single standalone server
    run from this installation. |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
- en: '| `deployments` | Deployments content used by the single standalone server
    run from this installation. |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
- en: '| `lib` | Libraries used by the single standalone server run from this installation.
    |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
- en: '| `log` | Log files created by the single standalone server run from this installation.
    |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
- en: So, the configuration folder contains all the configuration files. Yes, you
    can have more than one, but you will have to choose which one to run with. The
    `deployments` folder contains all your applications to deploy, deployed and undeployed
    (as we will see later, there is even a marker for failed deployments). The folder
    `lib` contains all the library jars referenced by your applications using the
    Extension-List mechanism. Lastly, the `log` folder contains WildFly's `server.log`
    file.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: 'As previously mentioned, in the `configuration` folder you will find the following
    files:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '| File name | Description |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
- en: '| `standalone.xml (default)` | Java Enterprise Edition 7 web profile certified
    configuration with the required technologies. |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
- en: '| `standalone-ha.xml` | Java Enterprise Edition 7 web profile certified configuration
    with high availability. |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
- en: '| `standalone-full.xml` | Java Enterprise Edition 7 full profile certified
    configuration including all the required EE 7 technologies, including messaging—JMS.
    |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
- en: '| `standalone-full-ha.xml` | Java Enterprise Edition 7 full profile certified
    configuration with high availability. |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
- en: Along the lines of Java EE 7 profiles, WildFly defines its own profiles. For
    the standalone mode, each file corresponds to a WildFly profile, that is, `standalone.xml`
    corresponds to the default profile, `standalone-ha.xml` corresponds to the `ha`
    profile, `standalone-full.xml` corresponds to the `full` profile, and `standalone-full-ha.xml`
    corresponds to the `full-ha` profile. The same WildFly profiles will be found
    in the domain mode as well.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s try running WildFly in the standalone mode with its default settings,
    as follows:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: How it works…
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first few lines tell you where WildFly is located and the JVM options.
    What follows is the Undertow HTTP Listener, which is the component that processes
    the HTTP request, listening on `http://127.0.0.1:8080`. As a matter of fact, you
    can test that WildFly is running correctly by pointing to the previous address,
    and you should see something like the following image:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 前几行会告诉你WildFly的位置和JVM选项。接下来是Undertow HTTP监听器，它是处理HTTP请求的组件，监听于`http://127.0.0.1:8080`。实际上，你可以通过指向前面的地址来测试WildFly是否正在运行正确，你应该会看到以下类似图像：
- en: '![How it works…](img/3744_01_10.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作…](img/3744_01_10.jpg)'
- en: WildFly's welcome content
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: WildFly的欢迎内容
- en: Next are the logs about WildFly's management listeners which I have emphasized.
    The first listener is the HTTP management listener, which is actually an HTTP
    API used to invoke commands over HTTP. The second one is the Admin Console, which
    provides you with a Web Console to simplify most of WildFly's configuration. The
    HTTP management interface and the Admin Console are listening respectively on
    `http://127.0.0.1:9990/management` and `http://127.0.0.1:9990`.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是关于WildFly管理监听器的日志，我已强调。第一个监听器是HTTP管理监听器，它实际上是一个HTTP API，用于通过HTTP调用命令。第二个是管理控制台，它为你提供了一个Web控制台，以简化WildFly的大多数配置。HTTP管理接口和管理控制台分别监听于`http://127.0.0.1:9990/management`和`http://127.0.0.1:9990`。
- en: 'To access the Admin Console, open a browser and point it to `http://127.0.0.1:9990/`.
    What you should see is a page as depicted in the following image:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问管理控制台，打开浏览器并将它指向`http://127.0.0.1:9990/`。你应该会看到一个页面，如下面的图像所示：
- en: '![How it works…](img/3744_01_11.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作…](img/3744_01_11.jpg)'
- en: WildFly's management error page
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: WildFly的管理错误页面
- en: WildFly is up and running, but the Admin Console is not visible at the moment
    because there is no user registered to the "security context" (the proper WildFly
    term is Realm) that the Admin Console belongs to. We will talk about security
    and realms later in this recipe and in the upcoming chapters.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: WildFly正在运行，但此时管理控制台不可见，因为没有用户注册到属于管理控制台的安全上下文（WildFly的正确术语是域）。我们将在本食谱和随后的章节中讨论安全和域。
- en: Note
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Hereby, whenever I use the term Admin Console or Web Console, they are to intend
    the same thing.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，无论何时我使用“管理控制台”或“Web控制台”这个术语，它们都指的是同一件事。
- en: Furthermore, the preceding screenshot tells you how to create a user to access
    the Admin Console. We need to create the admin user by using the `add-user.sh`
    script provided by WildFly in its `bin` folder.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，前面的屏幕截图告诉你如何创建一个用户来访问管理控制台。我们需要通过使用WildFly在`bin`文件夹中提供的`add-user.sh`脚本来创建管理员用户。
- en: 'Once again, open your command line (you should never close it, unless you are
    shutting down your PC) and execute the following command:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 再次打开你的命令行（除非你正在关闭你的PC，否则你不应该关闭它）并执行以下命令：
- en: '[PRE19]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The following screenshot is the result of the preceding code:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的屏幕截图是前面代码的结果：
- en: '![How it works…](img/3744_01_12.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作…](img/3744_01_12.jpg)'
- en: 'Examining the script and its interaction:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 检查脚本及其交互：
- en: In the preceding screenshot, the script first asks for a user type; in our case
    we need a management user. So just hit *Enter* or type `a` and then hit *Enter*.
    We do not need to create a user at the application level, used to create security
    context.
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，脚本首先询问用户类型；在我们的情况下，我们需要一个管理用户。所以只需按*Enter*键或输入“a”然后按*Enter*键。我们不需要在应用级别创建用户，用于创建安全上下文。
- en: We specify the username, for example `wildfly`.
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们指定用户名，例如`wildfly`。
- en: Then we need to enter the password following the specified policy. So we type
    `cookbook.2015` and hit *Enter*.
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后我们需要输入符合指定策略的密码。所以我们输入`cookbook.2015`并按*Enter*键。
- en: We confirm the password provided in the previous step by re-entering it.
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们通过重新输入之前提供的密码来确认上一步提供的密码。
- en: We confirm that we want to add our user "wildfly" to the `ManagementRealm` realm.
    So we type `yes` and hit *Enter*.
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们确认要将我们的用户“wildfly”添加到`ManagementRealm`域。所以我们输入“yes”并按*Enter*键。
- en: In the final step, the script asks if the user will be used to connect one of
    the WildFly process to another one, or used to authenticate to an EJB. In this
    case, we type `no` and hit *Enter*.
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在最后一步，脚本会询问用户是否将用于连接WildFly的一个进程到另一个进程，或者用于对EJB进行认证。在这种情况下，我们输入“no”并按*Enter*键。
- en: 'Now, let''s point to the admin address `http://127.0.0.1:9990` again. The page
    now asks you to enter the username and the password. Specify `wildfly` as username
    and `cookbook.2015` as password, and you should see the WildFly Admin Console
    as follows:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/3744_01_13.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
- en: WildFly's Web Console
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will take a deep dive into the standalone mode soon. In [Chapter 2](ch02.html
    "Chapter 2. Running WildFly in Standalone Mode"), *Running WildFly in Standalone
    Mode*, there will be described in detail all the configuration files, which one
    you should use, and how to manage your instance with both the Admin Console and
    the CLI. We will also deploy both the management tools.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: Running WildFly in domain mode
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Domain mode is something totally new since JBoss AS 4, 5, and 6\. It was
    first introduced in JBoss AS 7.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: It's about grouping several WildFly instances into one single group, a server-group
    using the WildFly nomenclature. In fact, we group the WildFly server into one
    logical server-group, and all the WildFly instances will share the same configuration.
    By this we intend that they share the same WildFly profile (`default`, `ha`, `full`,
    and `full-ha`), same deployments, and so on. What will not be shared is specific
    instance configuration such as IP bind address, ports, and others.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: Suppose you have an application and you want it to deploy on four servers of
    your infrastructure (or test rather than preproduction or production). You will
    need to configure a server-group, associate the four server instances to it, and
    you are done. Dealing just with the server-group, all your settings and changes
    will be spread to all the related server instances. This was definitely a big
    miss in JBoss AS, but now we have it.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember that a server-group does *not* form a cluster in any way.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When dealing with domain mode, there are two new terms to know and understand:
    **domain controller** (**DC**) and **host controller** (**HC**).'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: The first one, the DC, acts as the parent process, the "gran maestro" of an
    orchestra. Every single change is provided by the DC towards all the HCs of all
    server-groups. The DC configuration file is named `domain.xml`, whilst the HC
    configuration file is named `host.xml`.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To avoid confusion, it's better to clarify the terminology that we will use
    in the book. We might refer to the server running the domain controller as the
    "master" or the "domain". Alternatively, we might refer to a running WildFly instance
    that is not the domain, as the "host", or "slave".
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: One more thing to know is that contrary to the standalone mode where you have
    different files for different profiles, in the domain mode you end up with just
    one file (there is another one named `host.xml`, but we will talk about it soon)
    having all the profiles configured in for you. Profiles are the same as for the
    standalone mode. We will learn how to associate a profile to a server-group in
    the chapter dedicated to the domain mode.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at the `domain` folder:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: '| Folder''s name | Description |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
- en: '| `configuration` | Configuration files for the domain and for the host controller
    and any servers running off this installation. All configuration information for
    the servers managed within the domain is located here and is the single place
    for configuration information. |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
- en: '| `content` | An internal working area for the host controller that controls
    this installation. This is where it internally stores the deployment content.
    This directory is generated by WildFly when it starts and is not meant to be manipulated
    by the end users. Note that the domain mode does not support deploying content
    based on scanning a file system. |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
- en: '| `lib/ext` | Location for the installed library jars referenced by applications
    using the Extension-List mechanism. |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
- en: '| `log` | Location where the host controller process writes its logs. The process
    controller, a small lightweight process that actually spawns the other host controller
    processes and any application server processes also writes a log here. |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
- en: '| `servers` | Writable area used by each application server instance that runs
    from this installation. Each application server instance will have its own subdirectory,
    created when the server is first started. In each server''s subdirectory there
    will be the following subdirectories:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '`data`: Information written by the server that needs to survive a restart of
    the server'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log`: The server''s log files'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tmp`: Location for temporary files written by the server'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: '| `tmp` | Location for temporary files written by the server |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
- en: '| `tmp/auth` | Special location used to exchange authentication tokens with
    local clients so they can confirm that they are local to the running AS process.
    |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
- en: 'So, the `configuration` folder contains all the configuration files. Let''s
    have a look at all of them:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: '| File name | Description |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
- en: '| `domain.xml (default name)` | This is the main configuration file that includes
    all WildFly profiles plus all other configurations needed to run the AS. When
    WildFly starts, it will look for a file named `domain.xml` if not differently
    specified. |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
- en: '| `host.xml (default name)` | This is the host controller configuration file
    provided by the WildFly installation. In this you will find the entire specific
    configurations about server instances. When WildFly starts, it will look for a
    file named `host.xml` if not differently specified. |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
- en: '| `host-master.xml` | This is a host controller configuration example file
    provided by the WildFly installation. It shows you how to configure WildFly running
    only the domain controller. |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
- en: '| `host-slave.xml` | This is a host controller configuration example file provided
    by the WildFly installation used to configure WildFly running as slave and connecting
    to the domain controller. |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
- en: How to do it...
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s try running WildFly in the domain mode with its default settings (two
    server-groups—first one with two instances named `server-one` and `server-two`,
    last one with one instance named `server-three` with auto-start disabled). Do
    as follows:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: How it works...
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The domain controller is responsible for initiating all local host controllers
    along with the configured instances. Now, opening the WildFly Admin Console, you
    can see an overview of the details of both your instances:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/3744_01_14.jpg)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
- en: WildFly's runtime domain overview
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: From the domain perspective, you can see two server-groups named **main-server-group**
    with `full` profile and the **other-server-group** with `full-ha` profile. The
    latter is not running because its auto-start property is set to false.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This time, even if running in the domain mode for the first time, we did *not*
    have to create a new user, because we already did so while setting up the standalone
    mode.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will take a deep dive into the domain mode soon. In [Chapter 3](ch03.html
    "Chapter 3. Running WildFly in Domain Mode"), *Running WildFly in Domain Mode*,
    all configuration files will be described in detail apart from learning how to
    choose the correct profile and how to manage your instance with both the Admin
    Console and the CLI. We will analyze the domain and host controller processes.
    We will create various examples of server groups, running locally and in pseudo-different
    machines. We will also deploy both the management tools and analyze how this behaves
    in the domain mode.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: Running WildFly as a service
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to install WildFly as a service, actually
    having WildFly run automatically when the OS starts. If you want to run Wildfly
    manually on demand, you can skip this recipe, unless for knowledge purpose.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: Most Unix-like systems have different "runlevels" (think about them as steps)
    for various stages of the system running phase. At the operating system level,
    a service can be activated only if other services have been successfully activated.
    Thus if you activate a service that needs network before this one is up and running,
    it gets faulty or useless. This is essentially what "runlevels" are for.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a list of runlevels:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: '**rc1.d**: Single user mode'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rc2.d**: Single user mode with networking'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rc3.d**: Multi-user mode—boot up in text mode'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rc4.d**: Undefined'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rc5.d**: Multi-user mode—boot up in X Windows'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rc6.d**: Shutdown'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most production Linux systems boot using runlevel 3 (UI is not needed and it
    will be a waste of resources), but to reach all audiences, we will use level 2,
    3 and 5.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'WildFly comes with a predefined script, which can be used to run WildFly as
    a service. This script is located in the `bin/init.d` folder of the WildFly installation
    folder. So we just need to copy the file inside the `/etc/init.d` system folder
    and set it as a service, as follows:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'There is also one more file that we need to take a look at, and it is the `wildfly.conf`,
    placed into the same `bin/init.d` directory of the WildFly installation folder.
    The following is the file as is:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The previous configuration file basically sets a series of parameters that tell
    `init-script` which WildFly mode to use, which configuration file, which user
    WildFly should run with, and so on. Any update should be placed into that file.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: 'For the moment, we will rely on the defaults, except for the user that we will
    mention explicitly by uncommenting the line `# JBOSS_USER=wildfly`, by removing
    the hash `#` symbol. You may have noticed that you can also specify the mode which
    WildFly will run with: domain or standalone.'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: 'We now need to create the `wildfly` user, and give the ownership of the WildFly
    `home` folder to the `wildfly` user. Do as follows:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Now if you reboot your system, you will have WildFly up and running as a service
    with the default settings, launched by the `wildfly` user.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
