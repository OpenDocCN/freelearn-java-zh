["```java\ndocker run -itd -e POSTGRES_USER=packt -e POSTGRES_PASSWORD=packt \\\n-p 5432:5432 --name postgresql postgres\n```", "```java\nCREATE DATABASE football;\n```", "```java\ndocker run -p 9042:9042 --name cassandra -d cassandra:latest\n```", "```java\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.6.15</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    ```", "```java\n    <properties>\n        <java.version>11</java.version>\n        <testcontainers.version>1.19.7</testcontainers.version>\n    </properties>\n    ```", "```java\n    @Configuration\n    @EnableWebSecurity\n    public class SecurityConfig\n    ```", "```java\n    @Bean\n    InMemoryUserDetailsManager userDetailsManager() {\n        UserDetails userAdmin = User.withDefaultPasswordEncoder()\n                .username(\"packt\")\n                .password(\"packt\")\n                .roles(\"ADMIN\")\n                .build();\n        UserDetails simpleUser = User.withDefaultPasswordEncoder()\n                .username(\"user1\")\n                .password(\"user1\")\n                .roles(\"USER\")\n                .build();\n        return new InMemoryUserDetailsManager(userAdmin, simpleUser);\n    }\n    ```", "```java\n    @Bean\n    WebSecurityCustomizer webSecurityCustomizer() {\n        return (web) -> web.ignoring()\n                .antMatchers(\"/security/public/**\");\n    }\n    ```", "```java\n    @Bean\n    SecurityFilterChain filterChain(HttpSecurity http)\n                                                 throws Exception {\n        return http\n                .authorizeRequests(authorizeRequests -> {\n                    try {\n                        authorizeRequests\n                                .antMatchers(\"/\").permitAll()\n                                .antMatchers(\"/security/private/**\")\n                                    .hasRole(\"ADMIN\")\n                                .and()\n                                .httpBasic();\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    }\n                }).build();\n    }\n    ```", "```java\n        @WebMvcTest(FootballController.class)\n        @Import(SecurityConfig.class)\n        class FootballControllerTest\n        ```", "```java\n        @WebMvcTest(SecurityController.class)\n        @Import(SecurityConfig.class)\n        class SecurityControllerTest\n        ```", "```java\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-properties-migrator</artifactId>\n        <scope>runtime</scope>\n    </dependency>\n    ```", "```java\n    spring:\n        application:\n            name: football\n        jpa:\n            database-platform: org.hibernate.dialect.PostgreSQLDialect\n            open-in-view: false\n        datasource:\n            url: jdbc:postgresql://localhost:5432/football\n            username: packt\n            password: packt\n            hikari:\n                maximum-pool-size: 4\n      sql:\n        init:\n    application.yml file. The complete file can be found in the book’s GitHub repository.\n    ```", "```java\n    public CustomDatasourceService(@Value(\"${spring.sql.init.mode}\") DatabaseInitializationMode dataSourceInitializationMode) {\n        this.dataSourceInitializationMode = dataSourceInitializationMode;\n    }\n    ```", "```java\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.7.18</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    ```", "```java\n        @Bean\n        WebSecurityCustomizer webSecurityCustomizer() {\n            return (web) -> web.ignoring()\n                    .requestMatchers(\"/security/public/**\");\n        }\n        ```", "```java\n        @Bean\n        SecurityFilterChain filterChain(HttpSecurity http)\n                                                     throws Exception {\n            return http\n                    .authorizeHttpRequests(authorizeRequests -> {\n                        authorizeRequests\n                                .requestMatchers(\"/security/private/**\")\n                                      .hasRole(\"ADMIN\")\n                                .anyRequest().permitAll();\n                    })\n                    .httpBasic(withDefaults())\n                    .build();\n        }\n        ```", "```java\n        spring:\n          jpa:\n            database-platform: spring.data.cassandra.* settings now should be spring.cassandra.*. In the same application.yml file, ensure that the cassandra settings are defined as follows:\n\n        ```", "```java\n\n        ```", "```java\n    @JdbcTypeCode(SqlTypes.JSON)\n    private MatchEventDetails details;\n    ```", "```java\n    <dependency>\n        <groupId>io.hypersistence</groupId>\n        <artifactId>hypersistence-utils-hibernate-55</artifactId>\n        <version>3.7.3</version>\n    </dependency>\n    ```", "```java\n    mvn test\n    ```", "```java\n        public Player findPlayerById(Integer id) {\n            Query query = em.createQuery(\n                            \"SELECT p FROM PlayerEntity p WHERE p.id=?1\",\n                            PlayerEntity.class);\n            query.setParameter(1, id);\n            return playerMapper.map((PlayerEntity)\n                                          query.getSingleResult());\n        }\n        ```", "```java\n        public Player findPlayerById(Integer id) {\n            Query query = em.createQuery(\n                    \"SELECT p FROM PlayerEntity p WHERE p.id=?1\",\n                    PlayerEntity.class);\n            query.setParameter(1, id);\n            return playerMapper\n                    .map((PlayerEntity) query.getSingleResult());\n        }\n        ```", "```java\n    @Test\n    void countPlayers() {\n        Long count = dynamicQueriesService.countPlayers();\n        assertThat(count, not(0));\n     }\n    ```", "```java\n@Procedure(\"FIND_PLAYERS_WITH_MORE_THAN_N_MATCHES\")\nInteger getTotalPlayersWithMoreThanNMatches(int num_matches);\n```", "```java\n@Query(\"SELECT p1 FROM MatchEntity m JOIN m.team1 t1 JOIN t1.players p1 WHERE m.id = ?1 UNION SELECT p2 FROM MatchEntity m JOIN m.team2 t2 JOIN t2.players p2 WHERE m.id = ?1\")\npublic List<PlayerEntity> findPlayersByMatchId(Integer matchId);\n```", "```java\n        management:\n          endpoints:\n            web:\n              exposure:\n                include: health,env,metrics,beans,loggers,httpexchanges\n          httpexchanges:\n            recording:\n              application.yml file.\n        ```", "```java\n        @Configuration\n        public class FootballConfig {\n            @Bean\n            public HttpExchangeRepository httpTraceRepository() {\n                return new InMemoryHttpExchangeRepository();\n            }\n        }\n        ```", "```java\nmanagement:\n    endpoints:\n        jmx:\n            exposure:\n                include: '*'\n```", "```java\n    @Configuration\n    public class WebConfiguration implements configurePathMatch method as follows:\n\n    ```", "```java\n\n    ```", "```java\n@Configuration\npublic class WebConfiguration implements WebFluxConfigurer {\n    @Override\n    public void configurePathMatching(PathMatchConfigurer configurer){\n      configurer.setUseTrailingSlashMatch(true);\n    }\n}\n```", "```java\n    <plugin>\n        <groupId>org.openrewrite.maven</groupId>\n        <artifactId>rewrite-maven-plugin</artifactId>\n        <version>5.27.0</version>\n        <configuration>\n            <activeRecipes>\n                <recipe>org.openrewrite.java.spring.boot2.UpgradeSpringBoot_2_7</recipe>\n            </activeRecipes>\n         </configuration>\n         <dependencies>\n             <dependency>\n                 <groupId>org.openrewrite.recipe</groupId>\n                 <artifactId>rewrite-spring</artifactId>\n                 <version>5.7.0</version>\n             </dependency>\n         </dependencies>\n    </plugin>\n    ```", "```java\n    ./mvnw rewrite:run\n    ```", "```java\n        <dependency>\n            <groupId>org.testcontainers</groupId>\n            <artifactId>junit-jupiter</artifactId>\n            <version>${testcontainers.version}</version>\n            <scope>test</scope>\n            <!-- <exclusions>\n                     <exclusion>\n                     <groupId>junit</groupId>\n                     <artifactId>junit</artifactId>\n                     </exclusion>\n              </exclusions> -->\n        </dependency>\n        ```", "```java\n    <configuration>\n        <activeRecipes>\n            <recipe>org.openrewrite.java.spring.boot3.UpgradeSpringBoot_3_0</recipe>\n        </activeRecipes>\n    </configuration>\n    ```", "```java\n        @Bean\n        SecurityFilterChain filterChain(HttpSecurity http)\n                                                      throws Exception {\n          http.authorizeHttpRequests(requests -> requests\n              .requestMatchers(\"/security/private/**\").hasRole(\"ADMIN\")\n              .requestMatchers(\"/**\").permitAll())\n              .httpBasic(withDefaults());\n          return http.build();\n        }\n        ```", "```java\n    [ERROR] Failed to execute goal org.openrewrite.maven:rewrite-maven-plugin:5.27.0:run (default-cli) on project football: Execution default-cli of goal org.openrewrite.maven:rewrite-maven-plugin:5.27.0:run failed: Error while visiting chapter9/recipe9-8/end/football/pom.xml: java.lang.IllegalStateException: Illegal state while comparing versions : [1.19.7] and [${testcontainers.version}.0.0.0.0.0.0]. Metadata = [null]\n    ```", "```java\n    <dependency>\n       <groupId>org.testcontainers</groupId>\n       <artifactId>junit-jupiter</artifactId>\n       <version>${testcontainers.version}</version>\n       <scope>test</scope>\n    </dependency>\n    ```", "```java\n    <dependency>\n       <groupId>org.testcontainers</groupId>\n       <artifactId>junit-jupiter</artifactId>\n       <version>1.19.7</version>\n       <scope>test</scope>\n    </dependency>\n    ```"]