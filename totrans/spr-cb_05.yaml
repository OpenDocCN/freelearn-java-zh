- en: Chapter 5. Using Forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Displaying and processing a form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting a submitted form value using a controller method argument
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting a form's default values using a model object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving form data in an object automatically
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using text, textarea, password, and hidden fields
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a select field
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a checkbox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a list of checkboxes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a list of radio buttons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validating a form using annotations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uploading a file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Displaying and processing a form is tedious. Spring helps with the initialization
    of the form, the generation of form widgets (text fields, checkboxes, and so on),
    and data retrieval when the form is submitted. Form validation is made simple
    with annotations in the model classes.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying and processing a form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To display a form and retrieve the data the user entered when it's submitted,
    use a first controller method to display the form. Use a second controller method
    to process the form data when the form is submitted.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to display and process a form:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a controller method to display the form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JSP with an HTML form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create another controller method to process the form when it''s submitted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first controller method displays the JSP containing the HTML form. For more
    details, refer to the *Using a JSP view* recipe in [Chapter 3](ch03.html "Chapter 3. Using
    Controllers and Views"), *Using Controllers and Views*.
  prefs: []
  type: TYPE_NORMAL
- en: The HTML form contains one text field. It's submitted via `POST`. The form's
    `action` attribute is absent, so the form will be submitted to the current page
    URL (`/addUser`).
  prefs: []
  type: TYPE_NORMAL
- en: The second controller method is called when the form is submitted. The value
    of the `firstName` form field is retrieved using `HttpServletRequest`. At the
    end, we will redirect to `/home`.
  prefs: []
  type: TYPE_NORMAL
- en: Both controller methods are mapped to the same `/addUser` URL. The first method
    is called for HTTP `GET` requests. The second method is called for HTTP `POST`
    requests (because of `method=RequestMethod.POST`).
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The two controller methods could have different URLs. For example, `/addUser`
    and `/addUserSubmit`. In this case, in the JSP, we would use the `action` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the second controller method, to avoid using the cumbersome `request.getParameter()`
    method for each form field, refer to the *Getting a submitted form value using
    a controller method argument* and *Saving form values into an object automatically*
    recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting a submitted form value using a controller method argument
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to get the submitted form data using controller
    method arguments. This is convenient for simple forms that are not related to
    a domain object.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Add an argument annotated with `@RequestParam` to the controller method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `userName` argument is initialized by Spring with the submitted value of
    the `name` form field.
  prefs: []
  type: TYPE_NORMAL
- en: '`@RequestParam` can also retrieve URL parameters, for example, `http://localhost:8080/springwebapp/processForm?name=Merlin`.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It''s also possible to add the standard `HttpServletRequest` object as an argument
    of the controller method and get the submitted value for `name` directly from
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Refer to the *Saving form values into an object automatically* recipe for more
    details.
  prefs: []
  type: TYPE_NORMAL
- en: Setting a form's default values using a model object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to display a form with initial values that
    the user can change.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create an object containing the default values in the controller. In the view,
    use Spring form tags to generate the form using that object:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the controller, add a method annotated with `@ModelAttribute`, which returns
    an object with default values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the controller, add a method to display the form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the JSP, use Spring form tags to generate the form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the controller, because of `@ModelAttribute`, the `defaultUser()` method
    is automatically called for each request of the controller. The returned `User`
    object is stored in the memory as `defaultUser`. In the JSP, `defaultUser` is
    used to initialize the form:'
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s set as `modelAttribute` of the `form:form` element:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Form fields get their values from the corresponding properties of `defaultUser`.
    For example, the `firstName` field will be initialized with the value returned
    by `defaultUser.getFirstName()`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving form data in an object automatically
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For forms directly related to a model object, for example, a form to add `User`,
    the submitted form data can be automatically saved in an instance of that object.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the controller method processing the form submission, add the object as
    an argument and make the field names in the JSP match its attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a `User` argument annotated with `@ModelAttribute` to the controller method
    processing the form submission:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the JSP, make sure that the form fields correspond to the existing attributes
    of the object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When the form is submitted, this is what goes on behind the scenes:'
  prefs: []
  type: TYPE_NORMAL
- en: A new `User` object is created
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The form values are injected into the object by matching the form field names
    to object attribute names, for example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The resulting object is given to the controller method through its `@ModelAttribute`
    argument
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Instead of making Spring create a new object, you can provide the name of a
    default one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, Spring will use the object returned by the corresponding `@ModelAttribute`
    method of the controller class to store the submitted form data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Using text, textarea, password, and hidden fields
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to display a text field, `textarea` field,
    `password` field, and `hidden` field using Spring form tags. When the form is
    submitted, we will retrieve the field value in a controller method.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to display and process text fields:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If a default value is necessary, use a `String` attribute of the default object
    (refer to the *Setting a form''s default values using a model object* recipe):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the JSP, use one of these Spring form tags:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the controller method processing the form submission, make sure that the
    `@ModelAttribute` object has a corresponding `String` attribute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Spring form tag generates the HTML form field and populates it with the
    default value defined in the default object. The `path` attribute corresponds
    to the attribute of the default object. When the form is submitted, the form field
    value is saved in the corresponding attribute of the `@ModelAttribute` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'For reference, this is the generated HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the default value is not actually used for the `password` field.
  prefs: []
  type: TYPE_NORMAL
- en: Using a select field
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to display a `select` field. When the form
    is submitted, retrieve the selected value in a controller method.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the controller, add a `@ModelAttribute` method returning a `Map` object
    that contains the `select` field options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If a default value is necessary, use a `String` attribute of the default object
    (refer to the *Setting a form''s default values using a model object* recipe)
    initialized with one of the `Map` keys:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the JSP, use a `form:select` element initialized with the `@ModelAttribute`
    Map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the controller that processes the form submission, make sure that the `@ModelAttribute`
    object (the one used to save the form values) has a corresponding `String` attribute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `form:select` tag generates an HTML `select` field and initializes it with
    the `@ModelAttribute` Map and the default value defined in the default object.
    The `path` attribute corresponds to the attribute of the default object. When
    the form is submitted, the selected value is saved in the corresponding attribute
    of the `@ModelAttribute` `User` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'For reference, this is the generated HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's not necessary to use a `Map` class for the `@ModelAttribute` object. A
    `List<String>` object or directly using fields of an existing class may be more
    convenient.
  prefs: []
  type: TYPE_NORMAL
- en: Using a List<String> object
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Instead of `Map`, it''s possible that you can use a `List<String>` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The JSP code stays the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'In the generated HTML code, the displayed text will be the same as the `value`
    attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Using a List<Object> object
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Instead of a `Map` object, you can use a `List<Object>` object. If, for example,
    `Country` was a class with `code` and `name String` attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The JSP code would specify these attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The generated HTML code would be the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Using a checkbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to display a checkbox and, when the form
    is submitted, retrieve its state (selected or not) in a controller method.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the `form:checkbox` element in the JSP and a `boolean` attribute to store
    its value when the form is submitted:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If a default value is necessary, use a `boolean` attribute of the default object
    (refer to the *Setting a form''s default values using a model object* recipe):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the JSP, use the `form:checkbox` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the controller that processes the form submission, make sure that the `@ModelAttribute`
    object has a corresponding `boolean` attribute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is the generated HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: If the checkbox is checked, `married=true` is sent when the form is submitted.
    If it's not checked, nothing is sent (this is the standard HTML behavior). That's
    why a `hidden` form field is also generated. The field `_married` will be sent
    with the value `on` regardless of the checkbox state. So, if the married field
    is not there, Spring will know to set its value to false.
  prefs: []
  type: TYPE_NORMAL
- en: Using a list of checkboxes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll learn how to display a list of checkboxes and when the
    form is submitted, how to retrieve the selected values in a controller method.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the controller, add a `@ModelAttribute` method returning a `Map` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If a default value is necessary, use a `String[]` attribute of the default
    object (refer to the *Setting a form''s default values using a model object* recipe)
    initialized with some of the `Map` keys:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the JSP, use a `form:checkboxes` element initialized with the `@ModelAttribute`
    Map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the controller that processes the form submission, make sure that the `@ModelAttribute`
    object (the one used to save the form values) has a corresponding `String[]` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Spring's `form:checkboxes` tag generates the checkboxes using the `Map` keys
    as values and the `Map` values as text displayed to the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'For reference, this is the generated HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: As in the previous recipe, a `hidden` form field is also generated. `_languages=on`
    will be sent regardless of the checkboxes state. So, if none are selected, Spring
    will know to set the value of the languages array to an empty `String[]` object.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To have more control on the generated HTML code (to avoid the `label` and `span`
    tags), it''s possible to use several `form:checkbox` elements with the same value
    for the `path` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The generated HTML code is similar, except for the `hidden` attribute, which
    is generated multiple times:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Using a list of radio buttons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll learn how to display a list of radio buttons. When the
    form is submitted, retrieve the selected value in a controller method.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the controller, add a `@ModelAttribute` method returning `Map` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If a default value is necessary, use a `String` attribute of the default object
    (refer to the *Setting a form''s default values using a model object* recipe)
    initialized with one of the `Map` keys:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the JSP, use a `form:radiobuttons` element initialized with the `@ModelAttribute`
    Map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the controller processing the form submission, make sure that the `@ModelAttribute`
    object (the one used to save the form values) has a corresponding `String` attribute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Spring's `form:radiobuttons` tag generates the radio buttons using the `Map`
    keys as values and the `Map` values as text displayed to the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'For reference, this is the generated HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To have more control of the generated HTML code (to avoid the `label` and `span`
    tags), it''s possible to use several `form:radiobutton` elements with the same
    value for the `path` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'The generated HTML code for the input fields is identical to the code generated
    by the `form:radiobutton` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Validating a form using annotations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, you''ll learn how to add form validation rules by adding constraints
    directly in model classes using annotations. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: We'll use constraint annotations from the Java bean annotation API and from
    Hibernate Validator (which is a project independent of Hibernate ORM).
  prefs: []
  type: TYPE_NORMAL
- en: If the validation fails, the form will be shown again to the user with the errors
    that are to be fixed.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Add constraint annotations to the model class. Check whether the validation
    was successful in the controller method. Add error tags in the JSP:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the Maven dependencies in `pom.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add constraints using annotations to the model class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the controller method processing the form submission, add `@Valid` to the
    result object argument and a `BindingResult` argument after it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In that same controller method, check whether the validation was successful:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add form errors tags in the form JSP:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The constraint annotations in the model class are used to validate the `User`
    object when the form is submitted. The errors are stored in the `BindingResult`
    object. When the form is displayed again, the `form:errors` elements will display
    them. An example of the generated HTML code with the errors is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Some common constraint annotations are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@Max(120)`: This field must have a value lower than or equal to the given
    number'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@Min(18)`: This field must have a value equal to or greater than the given
    number'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@NotNull`: This field must not be null'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@Valid`: This field must be a valid object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@NotBlank`: This `String` field must not be null and its trimmed length must
    be greater than 0'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@NotEmpty`: This collection field must not be null nor empty'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A full list of all the constraint annotations can be found here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.oracle.com/javaee/6/tutorial/doc/gircz.html](http://docs.oracle.com/javaee/6/tutorial/doc/gircz.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#section-builtin-constraints](http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#section-builtin-constraints)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To create a custom constraint annotation, refer to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#validator-customconstraints](http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#validator-customconstraints).'
  prefs: []
  type: TYPE_NORMAL
- en: Uploading a file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To allow a user to upload a file from an HTML form, we need to set the form
    encoding to `multipart/form-data`. On the server side, we will use the `fileupload`
    package from the Apache Commons library to process the uploaded file.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to upload a file from a form:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the Maven dependency for `fileupload` from Apache Commons in `pom.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the Spring configuration, declare a `MultipartResolver` bean with a size
    limit (in bytes) for the data to be uploaded:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the JSP, set the HTML form encoding to `multipart/form-data`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a file upload widget:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the controller method processing the form submission, add `MultipartFile`
    as a `@RequestParam` argument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save the uploaded file to a `files` folder in the `Tomcat` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the JSP, the `multipart/form-data` encoding is necessary for the form to
    be able to encode and send files.
  prefs: []
  type: TYPE_NORMAL
- en: In the controller, we will create the `files` folder if it doesn't exist. At
    this point, the uploaded file is in the server's memory. We still need to write
    it to the filesystem. We do that using the `formFile` argument. Note that if a
    file with the same name already exists, it will be overwritten.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To upload several files, you can have several form fields (file1, file2 and
    so on) and their corresponding arguments (formFile1, formFile2 and so on). It''s
    also possible to use the same field name for multiple file upload widgets (this
    is convenient to allow the user to upload an undetermined number of files):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, we''ll retrieve the files as an array of `MultipartFile` in the
    controller method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
