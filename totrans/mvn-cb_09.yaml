- en: Chapter 9. Multi-module Projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding project inheritance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding project aggregation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Combining inheritance and aggregation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing multi-module dependency management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing multi-module plugin management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selectively building modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reporting for multi-module projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Except for simple projects, most real-life projects have more than one module.
    Each of them can be developed independently. Some modules might depend on others.
    A project that uses these modules would want to ensure that it builds successfully
    with the appropriate versions of all the modules.
  prefs: []
  type: TYPE_NORMAL
- en: As we look at multiple modules, each module may use a number of dependencies.
    To avoid dependency hell, it is important that the versions of dependencies used
    by each module are managed well. There is also an opportunity to optimize on the
    dependencies and plugins to reduce the repetition of build scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding project inheritance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are times when you might want a project to use values from another `.pom`
    file. You may be building a large software product, so you do not want to repeat
    the dependency and other elements multiple times.
  prefs: []
  type: TYPE_NORMAL
- en: Maven provides a feature called **project inheritance** for this. Maven allows
    a number of elements specified in the parent pom file to be merged to the inheriting
    project. In fact, the super pom file is an example of project inheritance.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Maven is set up on your system and is verified to work. To do this, refer to
    [Chapter 1](ch01.html "Chapter 1. Getting Started"), *Getting Started*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open a project that has inheritance; project-with-inheritance in our case. This
    has a subfolder named `child`, which is the project that inherits from the parent.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the parent pom file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the pom file for `child` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following Maven command in the `child` subfolder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Observe the output:![How to do it...](img/6124OS_09_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We specified a `parent` element in the pom file of `child`. Here, we added the
    coordinates of the parent, namely `groupId`, `artifactId`, and `version`. We did
    not specify the `groupId` and `version` coordinates of the `child` project. We
    also did not specify any `properties` and `dependencies`.
  prefs: []
  type: TYPE_NORMAL
- en: In the parent pom file, we specified `properties` and `dependencies`.
  prefs: []
  type: TYPE_NORMAL
- en: Due to the relationship defined, when Maven runs on the `child` project, it
    inherits `groupId`, `version`, `properties`, and `dependencies` defined in the
    parent.
  prefs: []
  type: TYPE_NORMAL
- en: Interestingly, the parent pom file (`project-with-inheritance`) is oblivious
    to the fact that there is a `child` project.
  prefs: []
  type: TYPE_NORMAL
- en: However, this only works if the parent project is of the `pom` type.
  prefs: []
  type: TYPE_NORMAL
- en: How did Maven know where the parent pom is located? We did not specify a location
    in the pom file. This is because, by default, Maven looks for the parent pom in
    the parent folder of `child`. Otherwise, it attempts to download the parent pom
    from the repository.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'What if the parent pom is not in any repository? Also, what if it is in a different
    folder from the parent folder of the child? Let''s see what happens:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a child project, where the parent project is not in the `parent` folder
    but in a subfolder (in our case, `parent`):![There's more...](img/6124OS_09_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the pom file of the child project as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Build the `child` project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Maven now determines the location of the parent pom by virtue of the `relativePath`
    element, which indicates the folder where the parent pom is located. Using this,
    it builds the child project successfully.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding project aggregation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A key difference between inheritance and aggregation is that, aggregation is
    defined with a top-down approach, whereas inheritance is defined the other way
    around. In Maven, project aggregation is similar to project inheritance, except
    that the change is made in the parent pom instead of the child pom.
  prefs: []
  type: TYPE_NORMAL
- en: Maven uses the term **module** to define a child or subproject, which is part
    of a larger project. An aggregate project can build all the modules together.
    Also, a Maven command run on the parent pom or the pom file of the aggregate project
    will also apply to all the modules that it contains.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open a project that has aggregation; in our case `project-with-aggregation`.
    This has a subfolder named `aggregate-child`, which is the module that is aggregated
    by the parent project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the parent pom as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `module` section and specify the child:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following Maven command in the `parent` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Observe the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We specified the `child` project as a module in the aggregator pom. The child
    project is a normal Maven project, which has no information about the fact that
    there exists an aggregator pom.
  prefs: []
  type: TYPE_NORMAL
- en: When the aggregator project is built, it builds the child project in turn. You
    will notice the word `Reactor` in the Maven output. Reactor is a part of Maven,
    which allows it to execute a goal on a set of modules. While modules are discrete
    units of work; they can be gathered together using the reactor to build them simultaneously.
    The reactor determines the correct build order from the dependencies stated by
    each module.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As in the case of inheritance, what the module is, is not a subfolder of the
    aggregator project, but a sibling.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the `module` section as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Build the aggregator project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Maven now determines the location of the module by virtue of the path specified,
    which indicates the folder where the parent pom is located. By convention, the
    module name is expected to be identical to the folder name.
  prefs: []
  type: TYPE_NORMAL
- en: Combining inheritance and aggregation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By using the project inheritance feature of Maven, we can share common build
    attributes such as `properties` and `dependencies` across all children. We can
    also aggregate modules and build them together.
  prefs: []
  type: TYPE_NORMAL
- en: When project inheritance is used, the parent is not aware of the child. In the
    case of project aggregation, each module is not aware of the aggregation.
  prefs: []
  type: TYPE_NORMAL
- en: We will now see how to combine and get the benefits of both.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open a multi-module project; in our case, `simple-multi-module`. This has a
    subfolder `child`, which is the module that is aggregated by the parent project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the parent pom as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `module` section and specify the child:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the child pom to specify the `parent` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following Maven command in the parent folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Observe the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have specified the `parent` element in the `child` pom to indicate who the
    parent is. We have also specified the `child` project as a module in the parent
    pom. Thus, both the relationships—inheritance and aggregation—are defined.
  prefs: []
  type: TYPE_NORMAL
- en: When we build the parent project, it automatically builds the child by virtue
    of the `modules` element. At the same time, the child project can be built independently
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The child project need not necessarily be a subfolder of the parent project.
    If it is elsewhere, as we have seen in the earlier recipes, it can be one of the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`relativePath`: `relativePath` of the parent element should point to the appropriate
    location of the parent'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`module`: The `module` element should contain the appropriate path to the child
    project'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing multi-module dependency management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dependency management is a mechanism to centralize dependency information. When
    there are a set of projects (or modules) that inherit a common parent, all information
    about the dependency can be put in the parent pom and the projects can have simpler
    references to them. This makes it easy to maintain the dependencies across multiple
    projects and reduces the issues that typically arise due to multiple versions
    of the same dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open a multi-module project (`simple-multi-module`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a dependency for `junit` in the `dependencyManagement` section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `dependencies` section of the child project as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Ensure that the build completes successfully.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Run the Maven command to check the dependency:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Observe the results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Dependencies that are specified within the `dependencyManagement` section of
    the parent pom are available for use to all the child projects. The child project
    needs to choose the dependencies by explicitly specifying the required dependencies
    in the `dependencies` section. While doing this, the child projects can omit the
    `version` and `scope` information so that they are inherited from the parent.
  prefs: []
  type: TYPE_NORMAL
- en: You may ask, "Why have the `dependencyManagement` section when child projects
    inherit dependencies defined in the parent pom anyway?" The reason is, the parent
    centralizes dependencies across several projects. A child project typically needs
    only some of the dependencies that the parent defines and not all of them. The
    `dependencyManagement` section allows child projects to selectively choose these.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `dependencyManagement` section also helps address any surprises of Maven's
    dependency mediation. Dependency mediation is what determines what version of
    dependency will be used when multiple versions of an artifact are encountered.
    However, `dependencyManagement` takes precedence over dependency mediation and
    ensures that dependency mediation does not pick a version over the one specified
    in `dependencyManagement`.
  prefs: []
  type: TYPE_NORMAL
- en: It should be noted that dependencies on different versions are error prone and
    `dependencyManagement` cannot always save them from library version incompatibilities.
  prefs: []
  type: TYPE_NORMAL
- en: Performing multi-module plugin management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In multi-module projects, `pluginManagement` allows you to configure plugin
    information that can be used as required by child projects. The parent pom can
    define the configurations for various plugins used by different child projects.
    Each child project can chose the plugins that it needs for the build.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open a multi-module project (`simple-multi-module`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a configuration for the Maven build helper plugin in the `pluginManagement`
    section to copy additional resources:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command to build the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that the additional resources are not getting copied in the child project.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, use the corresponding plugin in the child project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Build the project again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Observe the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We defined the Maven build helper plugin to copy resources from additional folders
    in the `pluginManagement` section of the parent pom. It is not available to the
    child pom until the child uses the plugin. When the child project did not define
    the plugin, the plugin definition in the parent pom had no effect. When the child
    project defined the plugin, it took effect and the additional resources got copied
    over.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If a plugin is used as part of the build lifecycle, then its configuration
    in the `pluginManagement` section will take effect, even if not explicitly defined
    by the child. Let us see how this happens:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define the Maven compiler plugin in `pluginManagement` of the parent pom:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Without adding the plugin to the child pom, run the following command using
    Java 7:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Observe the error:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What happened here? Even though the child pom did not define the Maven Compiler
    plugin, the configuration for the Maven Compiler plugin in the `pluginManagement`
    section of the parent pom took effect because the `compile` goal was part of the
    build lifecycle. As the configuration stipulated a Java 8 target, the compilation
    failed.
  prefs: []
  type: TYPE_NORMAL
- en: 'What if we do not want to inherit specific plugin configurations? Maven provides
    a way to do this. Let us see how:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the preceding Maven Compiler plugin configuration as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now run the following using Java 7:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Observe that the project compiles without errors, though the plugin configuration
    specified Java 8.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is because the configuration was not inherited to the child module as we
    set the `inherited` element to `false`.
  prefs: []
  type: TYPE_NORMAL
- en: Selectively building modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a project has a number of modules, there may be situations when we might
    want to selectively build modules. One such situation could be because the module
    might run only on specific machines. Another reason could be that a module may
    have long-running tests that may make sense only in test servers.
  prefs: []
  type: TYPE_NORMAL
- en: Let us see how we can selectively build modules by using the **profile** feature
    of Maven.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open a multi-module project that has two modules (`two-multi-module`), namely
    `common-one` and `dev-two`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the parent pom, add one project to the `modules` section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a profile and include both modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the Maven command to build with the `dev` profile:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Observe the result:![How to do it...](img/6124OS_09_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the Maven command to build without profile:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Observe the result:![How to do it...](img/6124OS_09_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you have multiple modules and you want to control when specific ones should
    be built, the simplest way to achieve this is to define specific profiles and
    define modules within each of them. In our example, we created a `dev` profile
    to build both modules, `common-one` and `dev-two`. The default Maven build builds
    only the `common-one` module.
  prefs: []
  type: TYPE_NORMAL
- en: What we achieved is the ability to exclude or skip specific modules from build
    as required. As you saw, a profile can only extend the list of modules, so it
    cannot actually blacklist a module.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Similarly, we could define `pluginManagement` and `dependencyManagement` within
    profiles so that these take effect only for the profiles.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Maven also provides command-line options to build modules selectively. Here
    are some of them with examples based on the `two-multi-module` Maven project:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-pl –projects`: This is a comma-separated list of projects to be built. An
    example for this is as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`–am`: This stands for `--also-make`: This builds projects required by the
    list if the project list is specified:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`–amd`: This stands for `--also-make-dependants`. This builds projects that
    depend on projects on the list (if project list is specified):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`-rf`: This stands for `–resume-from`. This resumes build from a specific project
    (useful in the case of failures in a multi-module build):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Reporting for multi-module projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we talk about generating a site report for a multi-module project, we refer
    to generating this for each module of the project and the parent project. In the
    case of the site report for a multi-module project, a couple of factors need to
    be taken into account. The first one is to test if the links between the parent
    and the modules work correctly. The other is to check if certain site reports
    can be aggregated instead of being reported individually for each module.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open a multi-module project (`two-multi-module`) with two modules, one and two.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following command to the `reporting` section of the parent pom for
    `checkstyle`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the command to generate site report:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click on the **Checkstyle** link in the site report:![How to do it...](img/6124OS_09_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the `site` goal is run for a multi-module project, it generates the site
    report for all the modules in addition to the parent module. All the reports are
    separately generated for each module. However, plugins such as Checkstyle provide
    an option to generate aggregated report across all the modules of the project.
    This allows us to get a consolidated view of the Checkstyle violations across
    all the modules of the project.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Other reporting plugins such as FindBugs, PMD, and Cobertura support multi-module
    reporting. However, not all of them support the aggregation of reports. Other
    reporting plugins that allow aggregated reporting are Javadocs and JXR.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Though the site report generated for a multi-module project includes links to
    each child module, the links will not work correctly, as each module report is
    in the `target/site` folder of the respective module.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see how we can verify that the modules are correctly linked in the report:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a `distributionManagement` section in the parent pom:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command to generate site report:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command to stage the site:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the folder:![There's more...](img/6124OS_09_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will notice that the site data for both the modules are now subfolders
    of the project site folder. Opening the index page of `fullsite` will allow us
    to navigate to each module site and ensure that the links are working:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/6124OS_09_06.jpg)'
  prefs: []
  type: TYPE_IMG
