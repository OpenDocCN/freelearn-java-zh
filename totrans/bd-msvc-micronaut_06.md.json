["```java\n<!-- Micronaut security -->\n    <dependency>\n      <groupId>io.micronaut.security</groupId>\n      <artifactId>micronaut-security</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>io.micronaut.security</groupId>\n      <artifactId>micronaut-security-session</artifactId>\n    </dependency>\n…\n```", "```java\nsecurity:\n    enabled: true\n    authentication: session\n    session:\n      enabled: true\n    # Auth endpoint\n    endpoints:\n      login:\n        enabled: true\n      logout:\n        enabled: true\n```", "```java\nidentity-store:\n  users:\n    alice: alice@1\n    bob: bob@2\n    charlie: charlie@3\n  roles:\n    alice: ADMIN\n    bob: VIEW\n    charlie: VIEW\n```", "```java\n@ConfigurationProperties(\"identity-store\")\npublic class IdentityStore {\n    @MapFormat\n    Map<String, String> users;\n    @MapFormat\n    Map<String, String> roles;\n    public String getUserPassword(String username) {\n        return users.get(username);\n    }\n    public String getUserRole(String username) {\n        return roles.get(username);\n    }\n}\n```", "```java\n@Singleton\npublic class LocalAuthProvider implements AuthenticationProvider {\n    @Inject\n    IdentityStore store;\n    @Override\n    public Publisher<AuthenticationResponse> \n      authenticate(HttpRequest httpRequest, \n      AuthenticationRequest authenticationRequest) {\n        String username = \n         authenticationRequest.getIdentity().toString();\n        String password = \n         authenticationRequest.getSecret().toString();\n        if (password.equals(store.getUserPassword\n         (username))) {\n            UserDetails details = new UserDetails\n             (username, Collections.singletonList\n             (store.getUserRole(username)));\n            return Flowable.just(details);\n        } else {\n            return Flowable.just(new \n             AuthenticationFailed());\n        }\n    }\n}\n```", "```java\n@Controller(\"/api\")\n@Secured(SecurityRule.IS_ANONYMOUS)\npublic class PetResource {\n….\n}\n```", "```java\n# Intercept rules\n    intercept-url-map:\n      - pattern: /api/visits\n        access: isAnonymous()\n```", "```java\n@Controller(\"/api\")\n@Secured(SecurityRule.IS_AUTHENTICATED)\npublic class OwnerResource {\n…\n}\n```", "```java\ncurl –v \"POST\" \"http://localhost:8081/login\" –H 'Content-Type: application/json; charset=utf-8' –d '{\"username\":\"alice\",\"password\":\"alice@1\"}'\n```", "```java\n$ docker run -d --name keycloak -p 8888:8080 -e KEYCLOAK_USER=micronaut -e KEYCLOAK_PASSWORD=micronaut123 jboss/keycloak\n```", "```java\n<!-- Micronaut security -->\n    <dependency>\n      <groupId>io.micronaut.security</groupId>\n      <artifactId>micronaut-security</artifactId>\n      <version>${micronaut.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>io.micronaut.security</groupId>\n      <artifactId>micronaut-security-jwt</artifactId>\n    <version>${micronaut.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>io.micronaut.security</groupId>\n      <artifactId>micronaut-security-oauth2</artifactId>\n      <version>${micronaut.version}</version>\n    </dependency>\n…\n```", "```java\nsecurity:\n    authentication: idtoken\n    endpoints:\n      login:\n        enabled: true\n    redirect:\n      login-success: /secure/anonymous\n    token:\n      jwt:\n        enabled: true\n        signatures.jwks.keycloak:\n          url: http://localhost:8888/auth/realms/master/protocol/openid-connect/certs\n    oauth2.clients.keycloak:\n      grant-type: password\n      client-id: pet-clinic\n      client-secret: XXXXXXXXX\n      authorization:\n        url: http://localhost:8888/auth/realms/master/protocol/openid-connect/auth\n      token:\n        url: http://localhost:8888/auth/realms/master/protocol/openid-connect/token\n        auth-method: client_secret_post\n```", "```java\n@Controller(\"/api\")\n@Secured(SecurityRule.IS_AUTHENTICATED)\npublic class VetResource {\n...\n}\n```", "```java\nmicronaut:\n  ssl:\n    enabled: true\n    key-store:\n      type: PKCS12\n      path: file:cert.p12\n      password: Pass@w0rd\n```", "```java\n<!-- Micronaut security -->\n    <dependency>\n      <groupId>io.micronaut.security</groupId>\n      <artifactId>micronaut-security</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>io.micronaut.security</groupId>\n      <artifactId>micronaut-security-jwt</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>io.micronaut.security</groupId>\n      <artifactId>micronaut-security-oauth2</artifactId>\n    </dependency>\n…\n```", "```java\nsecurity:\n    authentication: idtoken\n    oauth2:\n      clients:\n        okta:\n          client-secret: HbheS-\n           q4P6oewQgT7uK58bgMbtHbCwcarzWuHB32\n          client-id: 0oa37vkb7Sq23P1kh5d6\n          openid:\n            issuer: https://dev-\n             4962048.okta.com/oauth2/default\n    endpoints:\n      logout:\n        get-allowed: true\n```", "```java\n@Controller(\"/api\")\n@Secured(SecurityRule.IS_AUTHENTICATED)\npublic class VetReviewResource {\n    ...\n}\n```", "```java\ncurl -k -u client_id:client_secret \\\n--location --request POST 'https://dev-4962048.okta.com//oauth2/default/v1/token' \\\n--header 'Accept: application/json' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'grant_type=password' \\\n--data-urlencode 'username=Alice' \\\n--data-urlencode 'password=Pass@w0rd' \\\n--data-urlencode 'scope=openid'\n```"]