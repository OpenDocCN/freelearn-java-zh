["```java\n> activator eclipse\n\n```", "```java\npackage scalatest\nimport org.scalatest.FunSuite\n\nclass Test01 extends FunSuite {\n  test(\"Very Basic\") {\n    assert(1 == 1)\n  }\n  test(\"Another Very Basic\") {\n    assert(\"Hello World\" == \"Hello World\")\n  }\n}\n```", "```java\n> activator\n> test-only <full name of the class to execute>\n\n```", "```java\n> test-only scalatest.Test01   (or scalatest.Test01.scala)\n[info] Test01:\n[info] - Very Basic (38 milliseconds)\n[info] - Another Very Basic (0 milliseconds)\n[info] ScalaTest\n[info] Run completed in 912 milliseconds.\n[info] Total number of tests run: 2\n[info] Suites: completed 1, aborted 0\n[info] Tests: succeeded 2, failed 0, canceled 0, ignored 0, pending 0\n[info] All tests passed.\n[info] Passed: Total 2, Failed 0, Errors 0, Passed 2\n[success] Total time: 9 s, completed Nov 11, 2013 6:12:14 PM\n\n```", "```java\nclass Test02 extends FunSuite {\n test(\"pass\") {\n assert(\"abc\" === \"abc\")\n }\n test(\"fail and show diff\") {\n assert(\"abc\" === \"abcd\") // provide reporting info\n }\n}\n\n```", "```java\n> test-only scalatest.Test02\n[info] Test02:\n[info] - pass (15 milliseconds)\n[info] - fail and show diff *** FAILED *** (6 milliseconds)\n[info]   \"abc[]\" did not equal \"abc[d]\" (Test02.scala:10)\n[info] â€¦\n[info] *** 1 TEST FAILED ***\n[error] Failed: Total 2, Failed 1, Errors 0, Passed 1\n\n```", "```java\n>~test-only scalatest.Test02\n\n```", "```java\nclass Test03 extends FunSuite {\n  test(\"Exception expected, does not fire, FAIL\") {\n    val msg = \"hello\"\n    intercept[IndexOutOfBoundsException] {\n      msg.charAt(0)\n    }\n  }\n  test(\"Exception expected, fires, PASS\") {\n    val msg = \"hello\"\n    intercept[IndexOutOfBoundsException] {\n      msg.charAt(-1)\n    }\n  }\n}\n```", "```java\nimport org.junit.runner.RunWith\nimport org.scalatest.junit.JUnitRunner\nimport org.scalatest.FunSuite\n@RunWith(classOf[JUnitRunner])\nclass MyTestSuite extends FunSuite {\n  // ...\n}\n```", "```java\nclass Test06 extends FeatureSpec with GivenWhenThen {\n\n  feature(\"The user can pop an element off the top of the stack\") \n  {\ninfo(\"As a programmer\")\n  info(\"I want to be able to pop items off the stack\")\n  info(\"So that I can get them in last-in-first-out order\")\n\n  scenario(\"pop is invoked on a non-empty stack\") {\n\n    given(\"a non-empty stack\")\n    val stack = new Stack[Int]\n    stack.push(1)\n    stack.push(2)\n    val oldSize = stack.size\n\n  when(\"when pop is invoked on the stack\")\n  val result = stack.pop()\n\n  then(\"the most recently pushed element should be returned\")\n  assert(result === 2)\n\n  and(\"the stack should have one less item than before\")\n  assert(stack.size === oldSize - 1)\n  }\n\n  scenario(\"pop is invoked on an empty stack\") {\n\n    given(\"an empty stack\")\n    val emptyStack = new Stack[Int]\n\n    when(\"when pop is invoked on the stack\")\n    then(\"NoSuchElementException should be thrown\")\n    intercept[NoSuchElementException] {\n    emptyStack.pop()\n    }\n\n  and(\"the stack should still be empty\")\n  assert(emptyStack.isEmpty)\n  }\n}\n}\n```", "```java\npackage scalatest\n\nimport org.scalatest._\nimport org.scalatest.Matchers\n\nclass Test07 extends FlatSpec with Matchers {\n\"This test\" should \"pass\" in {\n    true should be === true\n  }\n}\n```", "```java\npackage scalatest\nimport org.scalatest._\nobject ShouldWork extends FlatSpec with Matchers {\n\n  true should be === true\n\n}\n```", "```java\npackage scalatest\nimport org.scalatest._\n\nobject ShouldWork extends FlatSpec with Matchers {\n\n  true should be === false\n\n}\n```", "```java\npackage scalatest\nimport org.scalatest._\n\nobject ShouldMatchers extends FlatSpec with Matchers {\n\n  true should be === true\n\n  List(1,2,3,4) should have length(4)\n\n  List.empty should be (Nil)\n\n  Map(1->\"Value 1\", 2->\"Value 2\") should contain key (2)\n  Map(1->\"Java\", 2->\"Scala\") should contain value (\"Scala\")\n\n  Map(1->\"Java\", 2->\"Scala\") get 1 should be (Some(\"Java\"))\n\n  Map(1->\"Java\", 2->\"Scala\") should (contain key (2) and not contain value (\"Clojure\"))\n\n  3 should (be > (0) and be <= (5))\n\n  new java.io.File(\".\") should (exist)\n}\n```", "```java\nobject ShouldMatchers extends FlatSpec with Matchers {\n\n\"Hello\" should be (\"Hello\")\n\n\"Hello\" should (equal (\"Hej\")\n               or equal (\"Hell\")) //> org.scalatest.exceptions.TestFailedException:\n\n\"Hello\" should not be (\"Hello\")\n}\n```", "```java\nclass Test08 extends FlatSpec with Matchers with WebBrowser {\n\n  implicit val webDriver: WebDriver = new HtmlUnitDriver\ngo to \"http://www.amazon.com\"\nclick on \"twotabsearchtextbox\"\ntextField(\"twotabsearchtextbox\").value = \"Scala\"\nsubmit()\npageTitle should be (\"Amazon.com: Scala\")\npageSource should include(\"Scala Cookbook: Recipes\")\n}\n```", "```java\npackage scalatest\nimport org.scalatest._\nimport org.scalatest.selenium.WebBrowser\nimport org.openqa.selenium.htmlunit.HtmlUnitDriver\nimport org.openqa.selenium.firefox.FirefoxDriver\nimport org.openqa.selenium.WebDriver\nobject Functional extends FlatSpec with Matchers with WebBrowser {\nimplicit val webDriver: WebDriver = new HtmlUnitDriver\n  go to \"http://www.packtpub.com/\"\n  textField(\"keys\").value = \"Scala\"\n  submit()\n  pageTitle should be (\"Search | Packt Publishing\")\n  pageSource should include(\"Akka\")\n}\n```", "```java\nlibraryDependencies +=\"org.scalamock\" %% \"scalamock-scalatest-support\" % \"3.0.1\" % \"test\"\n```", "```java\nlibraryDependencies +=\n\"org.scalamock\" %% \"scalamock-specs2-support\" % \"3.0.1\" % \"test\"\n```", "```java\ntrait Currency {\n  lazy val rates : Map[String,BigDecimal] = {\n  val exchangeRates =\n    \"http://www.ecb.europa.eu/stats/eurofxref/eurofxref-daily.xml\"\n  for (\n    elem <- xml.XML.load(exchangeRates)\\\"Cube\"\\\"Cube\"\\\"Cube\")\n  yield\n    (elem\\\"@currency\").text -> BigDecimal((elem\\\"@rate\").text)\n  }.toMap ++ Map[String,BigDecimal](\"EUR\" -> 1)\n\n  def convert(amount:BigDecimal,from:String,to:String) =\n    amount / rates(from) * rates(to)\n}\n```", "```java\n<gesmes:Envelope \n>\n  <gesmes:subject>Reference rates</gesmes:subject>\n    <gesmes:Sender>\n      <gesmes:name>European Central Bank</gesmes:name>\n    </gesmes:Sender>\n    <Cube>\n      <Cube time=\"2013-11-15\">\n      <Cube currency=\"USD\" rate=\"1.3460\"/>\n      <Cube currency=\"JPY\" rate=\"134.99\"/>\n      <Cube currency=\"BGN\" rate=\"1.9558\"/>\n      <Cube currency=\"CZK\" rate=\"27.155\"/>\n      <Cube currency=\"DKK\" rate=\"7.4588\"/>\n      <Cube currency=\"GBP\" rate=\"0.83770\"/>\n           ...\n         ...\n    </Cube>\n  </Cube>\n</gesmes:Envelope>\n```", "```java\npackage se.chap4\n\nclass MoneyService(converter:Converter ) {\n\n  def sendMoneyToSweden(amount:BigDecimal,from:String): BigDecimal = {\n    val convertedAmount = converter.convert(amount,from,\"SEK\")\n    println(s\" $convertedAmount SEK are on their way...\")\n    convertedAmount\n  }\n\n  def sendMoneyToSwedenViaEngland(amount:BigDecimal,from:String): BigDecimal = {\n    val englishAmount = converter.convert(amount,from,\"GBP\")\n    println(s\" $englishAmount GBP are on their way...\")\n    val swedishAmount = converter.convert(englishAmount,\"GBP\",\"SEK\")\n    println(s\" $swedishAmount SEK are on their way...\")\n    swedishAmount\n  }\n}\n```", "```java\npackage se.chap4\n\nimport org.scalatest._\nimport org.junit.runner.RunWith\nimport org.scalatest.junit.JUnitRunner\n\n@RunWith(classOf[JUnitRunner])\nclass MoneyServiceTest extends FlatSpec with Matchers {\n\n\"Sending money to Sweden\" should \"convert into SEK\" in {\n    val moneyService = \n      new MoneyService(new ECBConverter)\n    val amount = 200\n    val from = \"EUR\"\n    val result = moneyService.sendMoneyToSweden(amount, from)\n    result.toInt should (be > (1700) and be <= (1800))\n  }\n\n\"Sending money to Sweden via England\" should \"convert into GBP then SEK\" in {\n    val moneyService = \n      new MoneyService(new ECBConverter)\n    val amount = 200\n    val from = \"EUR\"\n    val result = moneyService.sendMoneyToSwedenViaEngland(amount, from)\n    result.toInt should (be > (1700) and be <= (1800))\n  }\n}\n```", "```java\nclass ECBConverter extends Converter\n```", "```java\n> test\n[info] Compiling 1 Scala source to /Users/thomas/projects/internal/HttpSamples/target/scala-2.10/test-classes...\n 1792.2600 SEK are on their way...\n 167.70000 GBP are on their way...\n 1792.2600 SEK are on their way...\n[info] MoneyServiceTest:\n[info] Sending money to Sweden\n[info] - should convert into SEK\n[info] Sending money to Sweden via England\n[info] - should convert into GBP then SEK\n[info] Passed: : Total 2, Failed 0, Errors 0, Passed 2, Skipped 0\n[success] Total time: 1 s, completed\n\n```", "```java\npackage se.chap4\n\nimport org.scalatest._\nimport org.junit.runner.RunWith\nimport org.scalatest.junit.JUnitRunner\nimport org.scalamock.scalatest.MockFactory\n\n@RunWith(classOf[JUnitRunner])\nclass MockMoneyServiceTest extends FlatSpec with MockFactory with Matchers {\n\n\"Sending money to Sweden\" should \"convert into SEK\" in {\n\n    val converter = mock[Converter]\n    val moneyService = new MoneyService(converter)\n\n    (converter.convert _).expects(BigDecimal(\"200\"),\"EUR\",\"SEK\").returning(BigDecimal(1750))\n\n    val amount = 200\n    val from = \"EUR\"\n    val result = moneyService.sendMoneyToSweden(amount, from)\n    result.toInt should be (1750)\n  }\n}\n```", "```java\nresolver += Resolver.sonatypeRepo(\"releases\")\n\nlibraryDependencies ++= Seq(\n\"org.scalacheck\" %% \"scalacheck\" % \"1.11.0\" % \"test\")\n\n```", "```java\nimport org.scalacheck.Properties\nimport org.scalacheck.Prop.forAll\n\nobject StringSpecification extends Properties(\"String\") {\n\n  property(\"startsWith\") = forAll { (a: String, b: String) =>\n    (a+b).startsWith(a)\n  }\n\n  property(\"concatenate\") = forAll { (a: String, b: String) =>\n    (a+b).length > a.length && (a+b).length > b.length\n  }\n\n  property(\"substring\") = forAll { (a: String, b: String, c: String) =>\n    (a+b+c).substring(a.length, a.length+b.length) == b\n  }\n\n}\n```", "```java\n> test-only se.chap4.StringSpecification\n[info] + String.startsWith: OK, passed 100 tests.\n[info] ! String.concatenate: Falsified after 0 passed tests.\n[info] > ARG_0: \"\"\n[info] > ARG_1: \"\"\n[info] + String.substring: OK, passed 100 tests.\n[error] Failed: : Total 3, Failed 1, Errors 0, Passed 2, Skipped 0\n[error] Failed tests:\n[error] \tse.chap4.StringSpecification\n[error] (test:test-only) sbt.TestsFailedException: Tests unsuccessful\n[error] Total time: 1 s, completed Nov 19, 2013 4:30:37 PM\n>\n\n```", "```java\npackage se.chap4\n\nimport org.scalacheck._\nimport Arbitrary._\nimport Gen._\nimport Prop.forAll\n\nobject ConverterSpecification extends Properties(\"Converter\") with Converter {\n\n  val currencies = Gen.oneOf(\"EUR\",\"GBP\",\"SEK\",\"JPY\")\n\n  lazy val conversions: Gen[(BigDecimal,String,String)] = for {\n    amt <- arbitrary[Int] suchThat {_ >= 0}\n    from <- currencies\n    to <- currencies\n  } yield (amt,from,to)\n\n  property(\"Conversion to same value\") = forAll(currencies) { c:String =>\n    val amount = BigDecimal(200)\n    val convertedAmount = convert(amount,c,c)\n    convertedAmount == amount\n  }\n\n  property(\"Various currencies\") = forAll(conversions) { c =>\n    val convertedAmount = convert(c._1,c._2,c._3)\n    convertedAmount >= 0\n  }\n}\n```", "```java\n> ~test-only se.chap4.ConverterSpecification\n[info] + Converter.Conversion to same value: OK, passed 100 tests.\n[info] + Converter.Various currencies: OK, passed 100 tests.\n[info] Passed: : Total 2, Failed 0, Errors 0, Passed 2, Skipped 0\n[success] Total time: 1 s, completed Nov 19, 2013 9:40:40 PM\n1\\. Waiting for source changes... (press enter to interrupt)\n\n```", "```java\nval currencies = Gen.oneOf(\"EUR\",\"GBP\",\"SEK\",\"JPY\",\"DUMMY\")\n```", "```java\n[info] ! Converter.Conversion to same value: Exception raised on property evaluation.\n[info] > ARG_0: \"DUMMY\"\n[info] > Exception: java.util.NoSuchElementException: key not found: DUMMY\n[info] ! Converter.Various currencies: Exception raised on property evaluation.\n[info] > ARG_0: (1,,)\n[info] > ARG_0_ORIGINAL: (1,DUMMY,SEK)\n[info] > Exception: java.util.NoSuchElementException: key not found: \n[error] Error: Total 2, Failed 0, Errors 2, Passed 0, Skipped 0\n[error] Error during tests:\n[error] \tse.chap4.ConverterSpecification\n[error] (test:test-only) sbt.TestsFailedException: Tests unsuccessful\n[error] Total time: 1 s, completed Nov 19, 2013 9:48:36 PM\n2\\. Waiting for source changes... (press enter to interrupt)\n\n```"]