["```java\n    public static final int PERMISSION_REQUEST_CODE = 42; \n    @Override \n    protected void onCreate(Bundle savedInstanceState) { \n      super.onCreate(savedInstanceState); \n     // ... \n     ActivityCompat.requestPermissions(this, \n            new String[]{ \n                    Manifest.permission.SEND_SMS, \n                    Manifest.permission.RECEIVE_SMS, \n                    Manifest.permission.READ_CONTACTS \n            }, \n            PERMISSION_REQUEST_CODE); \n    } \n```", "```java\n    @Override \n    public void onRequestPermissionsResult(int requestCode, \n     String permissions[], int[] grantResults) { \n      switch (requestCode) { \n        case PERMISSION_REQUEST_CODE: { \n          if (grantResults.length != 3 \n           || grantResults[0] !=  \n                PackageManager.PERMISSION_GRANTED \n           || grantResults[1] !=  \n                PackageManager.PERMISSION_GRANTED \n           || grantResults[2] !=  \n                PackageManager.PERMISSION_GRANTED) { \n                  AlertDialog.Builder dialog =  \n                    new AlertDialog.Builder(this); \n                  dialog.setCancelable(false); \n                  dialog.setTitle(\"Error\"); \n                  dialog.setMessage(\"This app requires access\n                   to text messages and contacts. Click OK\n                   to close.\"); \n                  dialog.setPositiveButton(\"OK\",  \n                   new DialogInterface.OnClickListener() { \n                     @Override \n                     public void onClick(DialogInterface dialog,  \n                      int id) { \n                        finish(); \n                      } \n                  }); \n\n                  final AlertDialog alert = dialog.create(); \n                  alert.show(); \n                } \n        } \n      } \n    } \n```", "```java\n    protected boolean checkPermission(Permissions permission) { \n      return ContextCompat.checkSelfPermission(this,  \n        permission.permission) ==  \n        PackageManager.PERMISSION_GRANTED; \n   } \n```", "```java\n    public class DeskDroidService extends Service { \n      public DeskDroidService() { \n      } \n\n     @Override \n     public IBinder onBind(Intent intent) { \n       throw new UnsupportedOperationException( \n           \"Not yet implemented\"); \n     } \n    } \n```", "```java\n    <service \n      android:name=\".DeskDroidService\" \n      android:enabled=\"true\" \n      android:exported=\"false\" /> \n```", "```java\n    public int onStartCommand(Intent intent, int flags, int startId) { \n      super.onStartCommand(intent, flags, startId); \n    }  \n    public void onDestroy() { \n    } \n```", "```java\n    protected static Server server; \n    protected void startServer() { \n      WifiManager WifiMgr = (WifiManager) getApplicationContext() \n       .getSystemService(Service.Wifi_SERVICE); \n      if (WifiMgr.isWifiEnabled()) { \n        String ipAddress = Formatter. \n         formatIpAddress(WifiMgr.getConnectionInfo() \n          .getIpAddress()); \n        URI baseUri = UriBuilder.fromUri(\"http://\" + ipAddress) \n         .port(49152) \n         .build(); \n        ResourceConfig config =  \n          new ResourceConfig(SseFeature.class) \n           .register(JacksonFeature.class); \n        server = JettyHttpContainerFactory.createServer(baseUri, \n         config); \n      } \n    } \n```", "```java\n    <uses-permission android:name= \n      \"android.permission.ACCESS_WIFI_STATE\" /> \n```", "```java\n    private static final Object lock = new Object(); \n    public int onStartCommand(Intent intent, int flags, int startId) { \n      super.onStartCommand(intent, flags, startId); \n\n      synchronized (lock) { \n        if (server == null) { \n          startServer(); \n          messageReceiver = new BroadcastReceiver() { \n            @Override \n            public void onReceive(Context context,  \n             Intent intent) { \n               String code = intent.getStringExtra(\"code\"); \n               DeskDroidService.this.code = code; \n               Log.d(\"receiver\", \"Got code: \" + code); \n            } \n          }; \n          LocalBroadcastManager.getInstance(this). \n           registerReceiver( \n             messageReceiver,  \n              new IntentFilter(CODE_GENERATED)); \n        } \n      } \n\n      return Service.START_STICKY; \n    } \n```", "```java\n    startService(new Intent(this, DeskDroidService.class)); \n```", "```java\n    public class BootReceiver extends BroadcastReceiver { \n      @Override \n      public void onReceive(Context context, Intent intent) { \n        context.startService(new Intent(context,  \n         DeskDroidService.class)); \n      } \n    } \n```", "```java\n    <uses-permission android:name= \n      \"android.permission.RECEIVE_BOOT_COMPLETED\" /> \n    <receiver android:name=\".BootReceiver\" android:enabled=\"true\"> \n      <intent-filter> \n        <action android:name= \n        \"android.intent.action.BOOT_COMPLETED\" /> \n      </intent-filter> \n    </receiver> \n```", "```java\n    @Path(\"/\") \n    @Produces(MediaType.APPLICATION_JSON) \n    protected class DeskDroidResource { \n    } \n```", "```java\n    config.registerInstances(new DeskDroidResource()); \n```", "```java\n    @GET \n    @Path(\"conversations\") \n    public Response getConversations() { \n      List<Conversation> conversations = new ArrayList<>(); \n      Cursor cur = getApplication().getContentResolver() \n      .query(Telephony.Sms.Conversations.CONTENT_URI,  \n      null, null, null, null); \n      while (cur.moveToNext()) { \n        conversations.add(buildConversation(cur)); \n      } \n\n      Collections.sort(conversations, new ConversationComparator()); \n\n      return Response.ok(new GenericEntity<List<Conversation>>( \n      conversations) {}).build(); \n     } \n```", "```java\n    private Conversation buildConversation(Cursor cur) { \n      Conversation conv = new Conversation(); \n      final int threadId =  \n        cur.getInt(cur.getColumnIndex(\"thread_id\")); \n      conv.setThreadId(threadId); \n      conv.setMessageCount( \n        cur.getInt(cur.getColumnIndex(\"msg_count\"))); \n      conv.setSnippet(cur.getString(cur.getColumnIndex(\"snippet\"))); \n      final List<Message> messages =  \n        getSmsMessages(conv.getThreadId()); \n      Set<String> participants = new HashSet<>(); \n      for (Message message : messages) { \n        if (!message.isMine()) { \n          participants.add(message.getAddress()); \n        } \n      } \n      conv.setParticipants(participants); \n      conv.setMessages(messages); \n      return conv; \n    } \ngetSmsMessages() as follows:\n```", "```java\n    private List<Message> getSmsMessages(int threadId) { \n      List<Message> messages = new ArrayList<>(); \n      Cursor cur = null; \n      try { \n        cur = getApplicationContext().getContentResolver() \n         .query(Telephony.Sms.CONTENT_URI, \n         null, \"thread_id = ?\", new String[] \n         {Integer.toString(threadId)}, \n         \"date DESC\"); \n\n        while (cur.moveToNext()) { \n          Message message = new Message(); \n          message.setId(cur.getInt(cur.getColumnIndex(\"_id\"))); \n          message.setThreadId(cur.getInt( \n            cur.getColumnIndex(\"thread_id\"))); \n          message.setAddress(cur.getString( \n            cur.getColumnIndex(\"address\"))); \n          message.setBody(cur.getString( \n            cur.getColumnIndexOrThrow(\"body\"))); \n          message.setDate(new Date(cur.getLong( \n            cur.getColumnIndexOrThrow(\"date\")))); \n          message.setMine(cur.getInt( \n            cur.getColumnIndex(\"type\")) ==  \n              Telephony.Sms.MESSAGE_TYPE_SENT); \n          messages.add(message); \n        } \n      } catch (Exception e) { \n          e.printStackTrace(); \n      } finally { \n          if (cur != null) { \n            cur.close(); \n          } \n      } \n      return messages; \n    } \n```", "```java\n    cur = getApplicationContext().getContentResolver().query( \n      Telephony.Sms.CONTENT_URI, \n       null, \"thread_id = ?\", new String[] \n       {Integer.toString(threadId)}, \n       \"date DESC\"); \n```", "```java\n    return Response.ok(new GenericEntity<List<Conversation>>( \n      conversations) {}).build();\n```", "```java\n    $ curl http://192.168.0.2:49152/conversations | jq . \n    [ \n    { \n      \"messageCount\": 2, \n      \"messages\": [ \n        { \n          \"address\": \"5551234567\", \n          \"body\": \"Demo message\", \n          \"date\": 1493269498618, \n          \"id\": 301, \n          \"mine\": true, \n          \"threadId\": 89 \n        }, \n        { \n          \"address\": \"+15551234567\", \n          \"body\": \"Demo message\", \n          \"date\": 1493269498727, \n          \"id\": 302, \n          \"mine\": false, \n          \"threadId\": 89 \n        } \n      ], \n      \"participants\": [ \"+15551234567\" ], \n      \"snippet\": \"Demo message\", \n      \"threadId\": 89 \n    } \n    ] \n```", "```java\n    @POST \n    @Path(\"conversations\") \n    public Response sendMessage(Message message)  \n    throws InterruptedException { \n       final SmsManager sms = SmsManager.getDefault(); \n       final ArrayList<String> parts =  \n       sms.divideMessage(message.getBody()); \n       final CountDownLatch sentLatch =  \n       new CountDownLatch(parts.size()); \n       final AtomicInteger statusCode = new AtomicInteger( \n       Response.Status.CREATED.getStatusCode()); \n       final BroadcastReceiver receiver = new BroadcastReceiver() { \n       @Override \n       public void onReceive(Context context, Intent intent) { \n            if (getResultCode() != Activity.RESULT_OK) { \n                    statusCode.set( \n                        Response.Status.INTERNAL_SERVER_ERROR \n                            .getStatusCode()); \n            } \n             sentLatch.countDown(); \n          } \n        }; \n      registerReceiver(receiver,  \n      new IntentFilter(\"com.steeplesoft.deskdroid.SMS_SENT\")); \n      ArrayList<PendingIntent> sentPIs = new ArrayList<>(); \n      for (int i = 0; i < parts.size(); i++) { \n         sentPIs.add(PendingIntent.getBroadcast( \n            getApplicationContext(), 0, \n            new Intent(\"com.steeplesoft.deskdroid.SMS_SENT\"), 0)); \n      } \n      sms.sendMultipartTextMessage(message.getAddress(), null,  \n      parts, sentPIs, null); \n\n      sentLatch.await(5, TimeUnit.SECONDS); \n      unregisterReceiver(receiver); \n      return Response.status(statusCode.get()).build(); \n     } \n```", "```java\n        $ curl -v -X POST -H 'Content-type: application/json'\n        http://192.168.0.2:49152/conversations -d \n        '{\"address\":\"++15551234567\", \"body\":\"Lorem ipsum dolor sit \n         amet...\"}' \n        > POST /conversations HTTP/1.1 \n        > Content-type: application/json \n        > Content-Length: 482 \n        < HTTP/1.1 201 Created \n```", "```java\n    <BorderPane fx:id=\"borderPane\" minWidth=\"1024\" prefHeight=\"768\"  \n\n    fx:controller=\"com.steeplesoft.deskdroid.\n    desktop.DeskDroidController\"> \n```", "```java\n    <MenuBar BorderPane.alignment=\"CENTER\"> \n      <menus> \n        <Menu text=\"_File\"> \n            <items> \n                <MenuItem onAction=\"#connectToPhone\"  \n                    text=\"_Connect to Phone\" /> \n                <MenuItem onAction=\"#disconnectFromPhone\"  \n                    text=\"_Disconnect from Phone\" /> \n                <MenuItem onAction=\"#closeApplication\"  \n                    text=\"E_xit\"> \n                    <accelerator> \n                        <KeyCodeCombination alt=\"ANY\" code=\"F4\"  \n                            control=\"UP\" meta=\"UP\" shift=\"UP\"  \n                            shortcut=\"UP\" /> \n                    </accelerator> \n                </MenuItem> \n              </items> \n          </Menu> \n       </menus> \n    </MenuBar> \n```", "```java\n    <center> \n      <SplitPane dividerPositions=\"0.25\"  \n        BorderPane.alignment=\"CENTER\"> \n      <items> \n```", "```java\n    <VBox> \n      <children> \n        <ListView fx:id=\"convList\" VBox.vgrow=\"ALWAYS\" /> \n      </children> \n    </VBox> \n```", "```java\n     <VBox fx:id=\"convContainer\"> \n       <children> \n        <HBox> \n            <children> \n                <Button mnemonicParsing=\"false\"  \n                        onAction=\"#refreshConversations\"  \n                        text=\"Refresh Conversations\"> \n                    <HBox.margin> \n                        <Insets right=\"5.0\" /> \n                    </HBox.margin> \n                </Button> \n                <Button fx:id=\"newMessageBtn\"  \n                    text=\"New Message\" /> \n            </children> \n            <padding> \n                <Insets bottom=\"5.0\" left=\"5.0\"  \n                    right=\"5.0\" top=\"5.0\" /> \n            </padding> \n        </HBox> \n        <ListView fx:id=\"messageList\" VBox.vgrow=\"ALWAYS\" /> \n      </children> \n    </VBox> \n```", "```java\n    @FXML \n    private ListView<Conversation> convList; \n    private final ObservableList<Conversation> conversations =  \n    FXCollections.observableArrayList(); \n    private final SimpleObjectProperty<Conversation> conversation =  \n    new SimpleObjectProperty<>(); \n    @Override \n    public void initialize(URL url, ResourceBundle rb) { \n      convList.setCellFactory(list ->  \n      new ConversationCell(convList)); \n      convList.setItems(conversations); \n       convList.getSelectionModel().selectedItemProperty() \n            .addListener((observable, oldValue, newValue) -> { \n                conversation.set(newValue); \n                messages.setAll(newValue.getMessages()); \n                messageList.scrollTo(messages.size() - 1); \n     }); \n```", "```java\n    @FXML \n    private ListView<Message> messageList; \n    private final ObservableList<Message> messages =  \n    FXCollections.observableArrayList(); \n```", "```java\n    messageList.setCellFactory(list -> new MessageCell(messageList)); \n    messageList.setItems(messages); \n```", "```java\n    newMessageBtn.setOnAction(event -> sendNewMessage()); \n```", "```java\n    public class ConversationCell extends ListCell<Conversation> { \n```", "```java\n    @Override \n    protected void updateItem(Conversation conversation,  \n    boolean empty) { \n    super.updateItem(conversation, empty); \n    if (conversation != null) { \n        setWrapText(true); \n        final Participant participant =  \n            ConversationService.getInstance() \n                .getParticipant(conversation \n                    .getParticipant()); \n        HBox hbox = createWrapper(participant); \n\n        hbox.getChildren().add( \n            createConversationSnippet(participant,  \n                conversation.getSnippet())); \n        setGraphic(hbox); \n     } else { \n        setGraphic(null); \n     } \n    } \n```", "```java\n    protected HBox createWrapper(final Participant participant) { \n      HBox hbox = new HBox(); \n      hbox.setManaged(true); \n      ImageView thumbNail = new ImageView(); \n      thumbNail.prefWidth(65); \n      thumbNail.setPreserveRatio(true); \n      thumbNail.setFitHeight(65); \n      thumbNail.setImage(new Image( \n        ConversationService.getInstance() \n           .getParticipantThumbnail( \n               participant.getPhoneNumber()))); \n      hbox.getChildren().add(thumbNail); \n      return hbox; \n    } \n```", "```java\n    protected VBox createConversationSnippet( \n     final Participant participant, String snippet) { \n      VBox vbox = new VBox(); \n      vbox.setPadding(new Insets(0, 0, 0, 5)); \n      Label sender = new Label(participant.getName()); \n      sender.setWrapText(true); \n      Label phoneNumber = new Label(participant.getPhoneNumber()); \n      phoneNumber.setWrapText(true); \n      Label label = new Label(snippet); \n      label.setWrapText(true); \n      vbox.getChildren().addAll(sender, phoneNumber, label); \n      return vbox; \n    } \n```", "```java\n    public ConversationCell(ListView list) { \n      super(); \n      prefWidthProperty().bind(list.widthProperty().subtract(2)); \n      setMaxWidth(Control.USE_PREF_SIZE); \n    } \n```", "```java\n    convList.setCellFactory(list -> new ConversationCell(convList)); \n```", "```java\n    public class MessageCell extends ListCell<Message> { \n      public MessageCell(ListView list) { \n          prefWidthProperty() \n            .bind(list.widthProperty().subtract(20)); \n          setMaxWidth(Control.USE_PREF_SIZE); \n      } \n\n    @Override \n    public void updateItem(Message message, boolean empty) { \n        super.updateItem(message, empty); \n        if (message != null && !empty) { \n            if (message.isMine()) { \n                wrapMyMessage(message); \n            } else { \n                wrapTheirMessage(message); \n            } \n         } else { \n            setGraphic(null); \n        } \n    } \n```", "```java\n    private static final SimpleDateFormat DATE_FORMAT =  \n     new SimpleDateFormat(\"EEE, MM/dd/yyyy hh:mm aa\"); \n    private void wrapMyMessage(Message message) { \n     HBox hbox = new HBox(); \n     hbox.setAlignment(Pos.TOP_RIGHT); \n     createMessageBox(message, hbox, Pos.TOP_RIGHT); \n     setGraphic(hbox); \n    } \n    private void createMessageBox(Message message, Pane parent,  \n     Pos alignment) { \n       VBox vbox = new VBox(); \n       vbox.setAlignment(alignment); \n       vbox.setPadding(new Insets(0,0,0,5)); \n       Label body = new Label(); \n       body.setWrapText(true); \n       body.setText(message.getBody()); \n\n       Label date = new Label(); \n       date.setText(DATE_FORMAT.format(message.getDate())); \n\n       vbox.getChildren().addAll(body,date); \n       parent.getChildren().add(vbox); \n    } \nmy messages and *their* messages, so we use javafx.geometry.Pos to align the controls to the right or left, respectively.\n```", "```java\n    private void wrapTheirMessage(Message message) { \n      HBox hbox = new HBox(); \n      ImageView thumbNail = new ImageView(); \n      thumbNail.prefWidth(65); \n      thumbNail.setPreserveRatio(true); \n      thumbNail.setFitHeight(65); \n      thumbNail.setImage(new Image( \n            ConversationService.getInstance() \n                .getParticipantThumbnail( \n                    message.getAddress()))); \n      hbox.getChildren().add(thumbNail); \n      createMessageBox(message, hbox, Pos.TOP_LEFT); \n      setGraphic(hbox); \n   } \n```", "```java\n    public class ConversationService { \n      public static class LazyHolder { \n        public static final ConversationService INSTANCE =  \n            new ConversationService(); \n      } \n\n     public static ConversationService getInstance() { \n        return LazyHolder.INSTANCE; \n      } \n     private ConversationService() { \n        Configuration configuration = new ResourceConfig() \n                .register(JacksonFeature.class) \n                .register(SseFeature.class); \n        client = ClientBuilder.newClient(configuration); \n     } \n```", "```java\n    protected final Client client; \n    protected final Map<String, Participant> participants =  \n      new HashMap<>(); \n```", "```java\n    public List<Conversation> getConversations() { \n      List<Conversation> list; \n      try { \n       list = getWebTarget().path(\"conversations\") \n                .request(MediaType.APPLICATION_JSON) \n                .header(HttpHeaders.AUTHORIZATION,  \n                    getAuthorizationHeader()) \n                .get(new GenericType<List<Conversation>>() {}); \n       } catch (Exception ce) { \n        list = new ArrayList<>(); \n      } \n      return list; \n    } \n    public WebTarget getWebTarget() { \n    return client.target(\"http://\" \n            + preferences.getPhoneAddress() + \":49152/\"); \n    } \n```", "```java\n    public Participant getParticipant(String number) { \n      Participant p = participants.get(number); \n      if (p == null) { \n        Response response = getWebTarget() \n                .path(\"participants\") \n                .path(number) \n                .request(MediaType.APPLICATION_JSON) \n                .header(HttpHeaders.AUTHORIZATION,  \n                    getAuthorizationHeader()) \n                .get(Response.class); \n        if (response.getStatus() == 200) { \n            p = response.readEntity(Participant.class); \n            participants.put(number, p); \n            if (p.getThumbnail() != null) { \n                File thumb = new File(number + \".png\"); \n                try (OutputStream stream =  \n                        new FileOutputStream(thumb)) { \n                    byte[] data = DatatypeConverter \n                        .parseBase64Binary(p.getThumbnail()); \n                    stream.write(data); \n                } catch (IOException e) { \n                    e.printStackTrace(); \n                } \n             } \n          } \n       } \n     return p; \n   } \n```", "```java\n    try (OutputStream stream = new FileOutputStream(thumb)) \n```", "```java\n    @GET \n    @Path(\"participants/{address}\") \n    public Response getParticipant(@PathParam(\"address\")  \n    String address) { \n      Participant p = null; \n      try { \n        p = getContactsDetails(address); \n        } catch (IOException e) { \n        return Response.serverError().build(); \n       } \n      if (p == null) { \n        return Response.status(Response.Status.NOT_FOUND).build(); \n       } else { \n        return Response.ok(p).build(); \n       } \n    } \n```", "```java\n    protected Participant getContactsDetails(String address) throws \n     IOException { \n      Uri contactUri = Uri.withAppendedPath( \n        ContactsContract.PhoneLookup.CONTENT_FILTER_URI,  \n        Uri.encode(address)); \n        Cursor phones = deskDroidService.getApplicationContext() \n        .getContentResolver().query(contactUri, \n        new String[]{ \n          ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME, \n          \"number\", \n          ContactsContract.CommonDataKinds.Phone \n            .PHOTO_THUMBNAIL_URI}, \n            null, null, null); \n        Participant participant = new Participant(); \n        if (phones.moveToNext()) { \n          participant.setName(phones.getString(phones \n          .getColumnIndex( \n          ContactsContract.CommonDataKinds.Phone \n           .DISPLAY_NAME))); \n          participant.setPhoneNumber(phones.getString( \n            phones.getColumnIndex(\"number\"))); \n          String image_uri = phones.getString( \n            phones.getColumnIndex( \n              ContactsContract.CommonDataKinds.Phone \n               .PHOTO_THUMBNAIL_URI)); \n          if (image_uri != null) { \n            try (InputStream input = deskDroidService \n              .getApplicationContext().getContentResolver() \n              .openInputStream(Uri.parse(image_uri)); \n            ByteArrayOutputStream buffer = \n              new ByteArrayOutputStream()) { \n                int nRead; \n                byte[] data = new byte[16384]; \n\n                while ((nRead = input.read(data, 0,  \n                        data.length)) != -1) { \n                    buffer.write(data, 0, nRead); \n                } \n\n                buffer.flush(); \n                participant.setThumbnail(Base64 \n                    .encodeToString(buffer.toByteArray(),  \n                        Base64.DEFAULT)); \n            } catch (IOException e) { \n                e.printStackTrace(); \n              } \n            } \n        } \n        phones.close(); \n        return participant; \n    } \n```", "```java\n    newMessageBtn.setOnAction(event -> sendNewMessage()); \n```", "```java\n    private void sendNewMessage() { \n      Optional<String> result = SendMessageDialogController \n        .showAndWait(conversation.get()); \n      if (result.isPresent()) { \n        Conversation conv = conversation.get(); \n        Message message = new Message(); \n        message.setThreadId(conv.getThreadId()); \n        message.setAddress(conv.getParticipant()); \n        message.setBody(result.get()); \n        message.setMine(true); \n        if (cs.sendMessage(message)) { \n            conv.getMessages().add(message); \n            messages.add(message); \n        } else { \n            Alert alert = new Alert(AlertType.ERROR); \n            alert.setTitle(\"Error\"); \n            alert.setHeaderText( \n                \"An error occured while sending the message.\"); \n            alert.showAndWait(); \n        } \n      } \n    } \n```", "```java\n    public static Optional<String> showAndWait( \n      Conversation conversation) { \n      try { \n        FXMLLoader loader =  \n            new FXMLLoader(SendMessageDialogController.class \n                .getResource(\"/fxml/message_dialog.fxml\")); \n        Stage stage = new Stage(); \n        stage.setScene(new Scene(loader.load())); \n        stage.setTitle(\"Send Text Message\"); \n        stage.initModality(Modality.APPLICATION_MODAL); \n        final SendMessageDialogController controller =  \n            (SendMessageDialogController) loader.getController(); \n        controller.setConversation(conversation); \n        stage.showAndWait(); \n        return controller.getMessage(); \n      } catch (IOException ex) { \n          throw new RuntimeException(ex); \n      } \n    } \n```", "```java\n    public Optional<String> getMessage() { \n      return Optional.ofNullable(message); \n    } \n```", "```java\n    public boolean sendMessage(Message message) { \n      Response r = getWebTarget().path(\"conversations\") \n        .request() \n        .header(HttpHeaders.AUTHORIZATION, \n          getAuthorizationHeader()) \n        .post(Entity.json(message)); \n      return r.getStatus() == Response.Status.CREATED \n        .getStatusCode(); \n    } \n```", "```java\n    @POST \n    @Path(\"conversations\") \n    public Response sendMessage(Message message) throws\n    InterruptedException { \n      final SmsManager sms = SmsManager.getDefault(); \n      final ArrayList<String> parts =  \n        sms.divideMessage(message.getBody()); \n```", "```java\n    final CountDownLatch sentLatch = new CountDownLatch(parts.size()); \n    final AtomicInteger statusCode = \n      new AtomicInteger( \n        Response.Status.CREATED.getStatusCode()); \n    final BroadcastReceiver receiver = new BroadcastReceiver() { \n      @Override \n      public void onReceive(Context context, Intent intent) { \n        if (getResultCode() != Activity.RESULT_OK) { \n          statusCode.set(Response.Status. \n           INTERNAL_SERVER_ERROR.getStatusCode()); \n        } \n        sentLatch.countDown(); \n      } \n    }; \n    deskDroidService.registerReceiver(receiver,  \n      new IntentFilter(\"com.steeplesoft.deskdroid.SMS_SENT\")); \n    ArrayList<PendingIntent> sentPIs = new ArrayList<>(); \n    for (int i = 0; i < parts.size(); i++) { \n      sentPIs.add(PendingIntent.getBroadcast( \n        deskDroidService.getApplicationContext(), 0, \n        new Intent(\"com.steeplesoft.deskdroid.SMS_SENT\"), 0)); \n    } \n    sms.sendMultipartTextMessage(message.getAddress(), null,\n    parts, sentPIs, null); \n    sentLatch.await(5, TimeUnit.SECONDS); \n    deskDroidService.unregisterReceiver(receiver); \n    return Response.status(statusCode.get()).build(); \n```", "```java\n    @GET \n    @Path(\"status\") \n    @Produces(SseFeature.SERVER_SENT_EVENTS) \n    @Secure \n    public EventOutput streamStatus() { \n      final EventOutput eventOutput = new EventOutput(); \n      // ... \n      return eventOutput; \n    } \n```", "```java\n    final Thread thread = new Thread() { \n      @Override \n      public void run() { \n        final LinkedBlockingQueue<SmsMessage> queue =  \n          new LinkedBlockingQueue<>(); \n        BroadcastReceiver receiver = null; \n        try { \n          receiver = new BroadcastReceiver() { \n            @Override \n            public void onReceive(Context context,  \n             Intent intent) { \n               Bundle intentExtras = intent.getExtras(); \n               if (intentExtras != null) { \n                 Object[] sms = (Object[])  \n                  intentExtras.get(\"pdus\"); \n                 for (int i = 0; i < sms.length; ++i) { \n                   SmsMessage smsMessage =  \n                     SmsMessage.createFromPdu( \n                       (byte[]) sms[i]); \n                       queue.add(smsMessage); \n                 } \n               } \n            } \n          }; \n          deskDroidService.registerReceiver(receiver, \n           new IntentFilter( \n             \"android.provider.Telephony.SMS_RECEIVED\")); \n          while (!eventOutput.isClosed()) { \n            SmsMessage message = queue.poll(5,  \n             TimeUnit.SECONDS); \n            while (message != null) { \n              JSONObject json = new JSONObject() \n               .put(\"participant\", message. \n                getDisplayOriginatingAddress()) \n               .put(\"body\", message. \n                getDisplayMessageBody()); \n              eventOutput.write(new OutboundEvent.Builder() \n               .name(\"new-message\") \n               .data(json.toString()) \n               .build() \n              ); \n              message = queue.poll(); \n            } \n          } \n        } catch (JSONException | InterruptedException |  \n           IOException e) { \n          } finally { \n              try { \n                if (receiver != null) { \n                  deskDroidService.unregisterReceiver(receiver); \n                } \n                eventOutput.close(); \n              } catch (IOException ioClose) { \n                  // ... \n                } \n            } \n      } \n    }; \n    thread.setDaemon(true); \n    thread.start(); \n```", "```java\n    public void subscribeToNewMessageEvents( \n      Consumer<Message> callback) { \n        Thread thread = new Thread() { \n          @Override \n          public void run() { \n            stopListening = false; \n            EventInput eventInput = getWebTarget().path(\"status\") \n             .request() \n             .header(HttpHeaders.AUTHORIZATION,  \n              getAuthorizationHeader()) \n               .get(EventInput.class); \n            while (!eventInput.isClosed() && !stopListening) { \n              final InboundEvent inboundEvent =  \n                eventInput.read(); \n              if (inboundEvent == null) { \n                // connection has been closed \n                break; \n              } \n              if (\"new-message\".equals(inboundEvent.getName())){ \n                Message message =  \n                  inboundEvent.readData(Message.class); \n                if (message != null) { \n                  callback.accept(message); \n                } \n              } \n            } \n          } \n        }; \n        thread.setDaemon(true); \n        thread.start(); \n    } \n```", "```java\n    cs.subscribeToNewMessageEvents(this::handleMessageReceived); \n```", "```java\n    protected void handleMessageReceived(final Message message) { \n      Platform.runLater(() -> { \n        Optional<Conversation> optional = conversations.stream() \n          .filter(c -> Objects.equal(c.getParticipant(),  \n           message.getAddress())) \n          .findFirst(); \n        if (optional.isPresent()) { \n          Conversation c = optional.get(); \n          c.getMessages().add(message); \n          c.setSnippet(message.getBody()); \n          convList.refresh(); \n          if (c == conversation.get()) { \n            messages.setAll(c.getMessages()); \n            messageList.scrollTo(messages.size() - 1); \n          } \n        } else { \n            Conversation newConv = new Conversation(); \n            newConv.setParticipant(message.getAddress()); \n            newConv.setSnippet(message.getBody()); \n            newConv.setMessages(Arrays.asList(message)); \n            conversations.add(0, newConv); \n        } \n        final Taskbar taskbar = Taskbar.getTaskbar(); \n        if (taskbar.isSupported(Taskbar.Feature.USER_ATTENTION)) { \n          taskbar.requestUserAttention(true, false); \n        } \n        Toolkit.getDefaultToolkit().beep(); \n      }); \n    } \n```", "```java\nConversation's last message body). We also ask the Conversation list to refresh() itself to make sure the user interface reflects these changes. Finally, if the Conversation is the currently selected one, we update the message list and scroll to the bottom to make sure the new message shows.\n```", "```java\n    @NameBinding \n    @Retention(RetentionPolicy.RUNTIME) \n    @Target({ElementType.TYPE, ElementType.METHOD}) \n    public @interface Secure {} \n```", "```java\n    @GET @Path(\"conversations\") @Secure \n    public Response getConversations() { \n      ... \n      @POST @Path(\"conversations\") @Secure \n      public Response sendMessage(Message message)  \n       throws InterruptedException { \n         ... \n         @GET @Path(\"status\") @Produces(SseFeature.SERVER_SENT_EVENTS)  \n         @Secure \n         public EventOutput streamStatus() { \n           ... \n           @GET @Path(\"participants/{address}\") @Secure \n           public Response getParticipant( \n             @PathParam(\"address\") String address) { \n               ... \n```", "```java\n    @Provider \n    @Secure \n    @Priority(Priorities.AUTHENTICATION) \n    public class SecureFilter implements ContainerRequestFilter { \n      private DeskDroidService deskDroidService; \n\n      public SecureFilter(DeskDroidService deskDroidService) { \n        this.deskDroidService = deskDroidService; \n      } \n\n      @Override \n      public void filter(ContainerRequestContext requestContext)  \n        throws IOException { \n          try { \n            String authorizationHeader = requestContext. \n             getHeaderString(HttpHeaders.AUTHORIZATION); \n            String token = authorizationHeader. \n             substring(\"Bearer\".length()).trim(); \n            final Key key = KeyGenerator. \n             getKey(deskDroidService.getApplicationContext()); \n            final JwtParser jwtParser =  \n              Jwts.parser().setSigningKey(key); \n            jwtParser.parseClaimsJws(token); \n          } catch (Exception e) { \n              requestContext.abortWith(Response.status( \n                Response.Status.UNAUTHORIZED).build()); \n            } \n      } \n    } \n```", "```java\n    public class KeyGenerator { \n      private static Key key; \n      private static final Object lock = new Object(); \n\n      public static Key getKey(Context context) { \n        synchronized (lock) { \n          if (key == null) { \n            SharedPreferences sharedPref =  \n              context.getSharedPreferences( \n                context.getString( \n                  R.string.preference_deskdroid),  \n                   Context.MODE_PRIVATE); \n                  String signingKey = sharedPref.getString( \n                    context.getString( \n                      R.string.preference_signing_key), null); \n                  if (signingKey == null) { \n                    signingKey = UUID.randomUUID().toString(); \n                    final SharedPreferences.Editor edit =  \n                      sharedPref.edit(); \n                    edit.putString(context.getString( \n                      R.string.preference_signing_key), \n                       signingKey); \n                    edit.commit(); \n                  } \n                  key = new SecretKeySpec(signingKey.getBytes(),\n                   0, signingKey.getBytes().length, \"DES\"); \n          } \n        } \n\n        return key; \n      } \n    } \n```", "```java\n    @POST \n    @Path(\"authorize\") \n    @Consumes(MediaType.TEXT_PLAIN) \n    public Response getAuthorization(String clientCode) { \n      if (clientCode != null &&  \n        clientCode.equals(deskDroidService.code)) { \n          String jwt = Jwts.builder() \n           .setSubject(\"DeskDroid\") \n           .signWith(SignatureAlgorithm.HS512, \n            KeyGenerator.getKey( \n              deskDroidService.getApplicationContext())) \n               .compact(); \n          LocalBroadcastManager.getInstance( \n            deskDroidService.getApplicationContext()) \n           .sendBroadcast(new Intent( \n               DeskDroidService.CODE_ACCEPTED)); \n        return Response.ok(jwt).build(); \n      } \n      return Response.status(Response.Status.UNAUTHORIZED).build(); \n    } \n```", "```java\n    FloatingActionButton fab =  \n      (FloatingActionButton) findViewById(R.id.fab); \n    fab.setOnClickListener(new View.OnClickListener() { \n      @Override \n      public void onClick(View view) { \n        startActivityForResult(new Intent( \n          getApplicationContext(),  \n          AuthorizeClientActivity.class), 1); \n      } \n    }); \n```", "```java\n    WifiManager wifiMgr = (WifiManager) getApplicationContext(). \n     getSystemService(WIFI_SERVICE); \n    String ipAddress = Formatter.formatIpAddress(wifiMgr. \n     getConnectionInfo().getIpAddress()); \n```", "```java\n    String code = Integer.toString(100000 +  \n     new Random().nextInt(900000)); \n```", "```java\n    messageReceiver = new BroadcastReceiver() { \n      @Override \n      public void onReceive(Context context, Intent intent) { \n        clientAuthenticated(); \n      } \n    }; \n    LocalBroadcastManager.getInstance(this).registerReceiver( \n      messageReceiver, new IntentFilter( \n        DeskDroidService.CODE_ACCEPTED)); \n```", "```java\n    Intent intent = new Intent(DeskDroidService.CODE_GENERATED); \n    intent.putExtra(\"code\", code); \n    LocalBroadcastManager.getInstance(this).sendBroadcast(intent); \n```", "```java\n    protected void clientAuthenticated() { \n      LocalBroadcastManager.getInstance(this). \n        unregisterReceiver(messageReceiver); \n      setResult(2, new Intent()); \n      finish(); \n    } \n```", "```java\n    @FXML \n    protected void connectToPhone(ActionEvent event) { \n      ConnectToPhoneController.showAndWait(); \n      if (!preferences.getToken().isEmpty()) { \n        refreshAndListen(); \n      } \n    } \n```", "```java\n    @FXML \n    public void connectToPhone(ActionEvent event) { \n      String address = phoneAddress.getText(); \n      String code = securityCode.getText(); \n      preferences.setPhoneAddress(address); \n      final ConversationService conversationService =  \n        ConversationService.getInstance(); \n\n      conversationService.setPhoneAddress(address); \n      Optional<String> token = conversationService \n        .getAuthorization(code); \n      if (token.isPresent()) { \n        preferences.setToken(token.get()); \n        closeDialog(event); \n      } \n    } \n```", "```java\n    public Optional<String> getAuthorization(String code) { \n      Response response = getWebTarget().path(\"authorize\") \n       .request(MediaType.APPLICATION_JSON) \n       .post(Entity.text(code)); \n      Optional<String> result; \n      if(response.getStatus()==Response.Status.OK.getStatusCode()) { \n        token = response.readEntity(String.class); \n        result = Optional.of(token); \n      } else { \n          result = Optional.empty(); \n      } \n      return result; \n    } \n```"]