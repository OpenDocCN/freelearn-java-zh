["```java\n    @jvm.internal.value.DeriveValueType \n    public final class DoubleComplex { \n      public final double re, im; \n      private DoubleComplex(double re, double im) { \n        this.re = re; this.im = im; \n      } \n      ... // toString/equals/hashCode, accessors,\n       math functions, etc. \n    } \n```", "```java\n    AtomicInteger atomicInt = new AtomicInteger(42); \n```", "```java\n    var atomicInt = new AtomicInteger(42); \n```", "```java\n    enum Primitive<X> { \n      INT<Integer>(Integer.class, 0) { \n        int mod(int x, int y) { return x % y; } \n        int add(int x, int y) { return x + y; } \n      }, \n      FLOAT<Float>(Float.class, 0f)  { \n        long add(long x, long y) { return x + y; } \n      }, ... ; \n\n      final Class<X> boxClass; \n      final X defaultValue; \n\n      Primitive(Class<X> boxClass, X defaultValue) { \n        this.boxClass = boxClass; \n        this.defaultValue = defaultValue; \n      } \n    } \n```", "```java\n    Map<String, Integer> numbers = new HashMap<>(); \n    numbers.forEach((k, v) -> System.out.println(v*2)); \n```", "```java\n    numbers.forEach((_, v) -> System.out.println(v*2)); \n```", "```java\n    Map<String, Integer> numbers = new HashMap<>(); \n    String key = someMethod(); \n    numbers.forEach((key, value) ->  \n      System.out.println(value*2)); // error \n```", "```java\n    module com.example.foo \"1.0\" { \n      import com.example.bar \"2.1\"; \n    } \n```", "```java\n$ ceylonb new hello-world \nEnter project folder name [helloworld]: ceylon-helloworld \nEnter module name [com.example.helloworld]: \nEnter module version [1.0.0]: \nWould you like to generate Eclipse project files? (y/n) [y]: n \nWould you like to generate an ant build.xml? (y/n) [y]: n \n$ cd ceylon-helloworld \n$ ceylonb compile \nNote: Created module com.example.helloworld/1.0.0 \n$ ceylonb run com.example.helloworld/1.0.0 \nHello, World! \n```", "```java\n    void bar (String? Foo) { \n      if (exists foo) { \n        print (foo); \n      } \n    } \n```", "```java\n    void bar (String? Foo) { \n      if (is String foo) { \n        print (foo); \n      } \n    } \n```", "```java\n    public void someMethod (Object object) { \n      if (!(object instanceof Serializable) ||  \n        !(object instanceof Closeable)) { \n        // throw Exception \n      } \n    } \n```", "```java\n    void someMethod(Serializable&Closeable object) { \n      // ... \n    } \n```", "```java\n    Integer a = new Integer(1); \n    final String s = \"This is a string literal\"; \n```", "```java\n    var a = 1; \n    val s = \"This is a string literal\"; \n```", "```java\n    var a: Int  = 1; \n    val s: String = \"This is a string literal\"; \n```", "```java\n    var var1 : String = null; // error \n    var var2 : String? = null; // ok \n```", "```java\n    String city = null; \n    User user = getUser(); \n    if (user != null) { \n      Address address = user.getAddress(); \n      if (address != null) { \n        city address.getCity(); \n      } \n    } \n```", "```java\n    var city : String? = getUser()?.getAddress()?.getCity(); \n```", "```java\n    if (city != null) { \n      System.out.println(city.toUpperCase()); \n    } \n```", "```java\n    city?.let { \n      println(city.toUpperCase()) \n    } \n```"]