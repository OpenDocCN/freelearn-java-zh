["```java\n <dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n </dependency>\n```", "```java\n<spring-cloud.version>Greenwich.RC2</spring-cloud.version>\n```", "```java\n<dependencyManagement>\n    <dependencies>\n      <dependency>\n        <groupId>org.springframework.cloud</groupId>\n        <artifactId>spring-cloud-dependencies</artifactId>\n        <version>${spring-cloud.version}</version>\n        <type>pom</type>\n        <scope>import</scope>\n      </dependency>\n    </dependencies>\n  </dependencyManagement>\n\n<repositories>\n   <repository>\n     <id>spring-milestones</id>\n     <name>Spring Milestones</name>\n     <url>https://repo.spring.io/milestone</url>\n   </repository>\n</repositories>\n```", "```java\n@SpringBootApplication\n@EnableEurekaServer\npublic class EurekaDiscoveryServiceApplication {\n\n  public static void main(String[] args) {\n    SpringApplication.run(EurekaDiscoveryServiceApplication.class, args);\n  }\n}\n```", "```java\n#Configure this Discovery Server\neureka.client.registerWithEureka = false\neureka.client.fetch-registry=false\n\n#In case if Eureka port need to be changed from default 8080\nserver.port = 8761\n```", "```java\n@SpringBootApplication\n@EnableDiscoveryClient\npublic class UserServiceApplication {\n  public static void main(String[] args) {\n    SpringApplication.run(UserServiceApplication.class, args);\n  }\n}\n```", "```java\nspring.application.name=user-service\nserver.port=8791\n```", "```java\n@EnableZuulProxy\n@EnableDiscoveryClient\n@SpringBootApplication\npublic class ZuulApiGatewayApplication {\n  public static void main(String[] args) {\n    SpringApplication.run(ZuulApiGatewayApplication.class, args);\n  }\n}\n```", "```java\nspring.application.name=zuul-api-gateway\nserver.port=8781\n```", "```java\n    <dependency>\n      <groupId>org.springframework.cloud</groupId>\n      <artifactId>spring-cloud-config-server</artifactId>\n    </dependency>\n```", "```java\n@EnableConfigServer\n@SpringBootApplication\npublic class SpringCloudConfigServerApplication {\n  public static void main(String[] args) {\n    SpringApplication.run(SpringCloudConfigServerApplication.class, args);\n  }\n}\n```", "```java\nspring.application.name=spring-cloud-config-server\nserver.port=8901\n```", "```java\ngit init\n```", "```java\n{microserivce-name}.properties\n{microservice-name}-{active-profile}.properties\n```", "```java\ngit add -A\ngit commit -m \"Comment for commit\"\n```", "```java\n spring.cloud.config.server.git.uri=file://D:/projects/book_writing/git_central_config\n```", "```java\ncatalog.sample.data=Hello world !!\n```", "```java\nspring.cloud.config.uri=http://localhost:8901\n```", "```java\n@RestController\n@RequestMapping(\"/api/test\")\n@RefreshScope\npublic class TestRESTController {\n  Logger logger = LoggerFactory.getLogger(this.getClass());\n\n  @Value(\"${catalog.sample.data}\")\n  private String data;\n\n  @GetMapping(\"/getSampleData\")\n  public String getSampleData() {\n    logger.info(\" sample data value is -->\"+this.data);\n    return this.data;\n  }\n}\n```", "```java\n[restartedMain] c.c.c.ConfigServicePropertySourceLocator : Fetching config from server at : http://localhost:8901\n```", "```java\nmanagement.endpoints.web.exposure.include=*\n```", "```java\n[\n    \"config.client.version\",\n    \"catalog.sample.data\"\n]\n```", "```java\n @GetMapping(\"/get-inventory/{bookId}\")\n  public ResponseEntity<BookDTO> getInventory(@PathVariable(\"bookId\") Integer bookId) {\n    String url = \"http://localhost:8792/api/catalog/get-book/\"+bookId;\n    RestTemplate restTemplate = new RestTemplate();\n    ResponseEntity<BookDTO> returnValue = restTemplate.getForEntity(url, BookDTO.class);\n    return returnValue;\n  }\n```", "```java\n<dependency>\n   <groupId>org.springframework.cloud</groupId>\n   <artifactId>spring-cloud-starter-openfeign</artifactId>\n</dependency>\n```", "```java\n@SpringBootApplication\n@EnableDiscoveryClient\n@EnableFeignClients(basePackages=\"com.bookstore.inventory\")\npublic class InventoryServiceApplication {\n  public static void main(String[] args) {\n    SpringApplication.run(InventoryServiceApplication.class, args);\n  }\n}\n```", "```java\n@FeignClient(name=\"catalog-service\",url=\"http://localhost:8792\", path=\"/api/catalog\")\npublic interface CatalogServiceProxy {\n  @GetMapping(\"/get-book/{bookId}\")\n  public ResponseEntity<BookDTO> getInventory(@PathVariable(\"bookId\") Integer bookId);\n}\n```", "```java\n@RestController\n@RequestMapping(\"/api/inventory\")\npublic class InventoryRESTController {\n\n  @Autowired\n  CatalogServiceProxy catalogServiceProxy;\n\n  @GetMapping(\"/get-inventory/{bookId}\")\n  public ResponseEntity<BookDTO> getInventory(@PathVariable(\"bookId\") Integer bookId) {\n    return catalogServiceProxy.getInventory(bookId);\n  }\n}\n```", "```java\n<dependency>\n   <groupId>org.springframework.cloud</groupId>\n   <artifactId>spring-cloud-starter-netflix-ribbon</artifactId>\n</dependency>\n```", "```java\n@FeignClient(name=\"catalog-service\", path=\"/api/catalog\" )\n@RibbonClient(name=\"catalog-service\")\npublic interface CatalogServiceProxy {\n  @GetMapping(\"/get-book/{bookId}\")\n  public ResponseEntity<BookDTO> getInventory(@PathVariable(\"bookId\") Integer bookId);\n}\n```", "```java\ncatalog-service.ribbon.listOfServers=http://localhost:8792,http://localhost:8799\n```", "```java\n@Autowired\nprivate Environment env;\n\n@GetMapping(\"/get-book/{bookId}\")\n  public ResponseEntity<BookDTO> getBook(@PathVariable(\"bookId\") Integer bookId) {\n   ......\n      bookDto.setSmallDesc(bookObject.getSmallDesc());\n      bookDto.setTitle(bookObject.getTitle());\n      bookDto.setPort(env.getProperty(\"local.server.port\"));\n   ......\n}\n```", "```java\n@FeignClient(name=\"catalog-service\", path=\"/api/catalog\" )\n@RibbonClient(name=\"catalog-service\")\npublic interface CatalogServiceProxy {\n  @GetMapping(\"/get-book/{bookId}\")\n  public ResponseEntity<BookDTO> getInventory(@PathVariable(\"bookId\") Integer bookId);\n}\n```", "```java\n@LoadBalanced\n@Bean\nRestTemplate restTemplate() {\n    return new RestTemplate();\n}\n\n@Autowired\nRestTemplate restTemplate;\n\n```", "```java\n@Component\npublic class CustomPreFilter extends ZuulFilter {\n  private static Logger _logger = LoggerFactory.getLogger(ZuulFilter.class);\n\n  @Override\n  public boolean shouldFilter() {\n    return true;\n  }\n  @Override\n  public Object run() throws ZuulException {\n    HttpServletRequest request = RequestContext.\n                getCurrentContext().getRequest();\n    _logger.info(\"********** REQUEST STARTED ******************\");\n    _logger.info(\"Port :\"+ request.getLocalPort());\n    _logger.info(\"HTTP Method :\"+ request.getMethod());\n    return null;\n  }\n  @Override\n  public String filterType() {\n    return \"pre\";\n  }\n  @Override\n  public int filterOrder() {\n    return 0;\n  }\n}\n```", "```java\n@Component\npublic class CustomPostFilter extends ZuulFilter {\n  private static Logger _logger = LoggerFactory.getLogger(ZuulFilter.class);\n\n  @Override\n  public boolean shouldFilter() {\n    return true;\n  }\n  @Override\n  public Object run() throws ZuulException {\n    _logger.info(\"********* REQUEST ENDED *************\");\n    return null;\n  }\n  @Override\n  public String filterType() {\n    return \"post\";\n  }\n  @Override\n  public int filterOrder() {\n    return 0;\n  }\n}\n```", "```java\nhttp://<API_Gateway_Host>:<API_Gateway_Port>/{service-name}/{uri}\n```", "```java\no.s.web.servlet.DispatcherServlet : Completed initialization in 9 ms \ncom.netflix.zuul.ZuulFilter : ******************* REQUEST STARTED ***********\ncom.netflix.zuul.ZuulFilter : Port :8781 \ncom.netflix.zuul.ZuulFilter : HTTP Method :GET \n......... \ncom.netflix.zuul.ZuulFilter : ******************* REQUEST ENDED *************\n```", "```java\n@FeignClient(name=\"catalog-service\", path=\"/api/catalog\")\n@RibbonClient(name=\"catalog-service\")\npublic interface CatalogServiceProxy {\n...\n}\n```", "```java\n@FeignClient(name=\"zuul-api-gateway\", path=\"y/api/catalog\")\n@RibbonClient(name=\"catalog-service\")\npublic interface CatalogServiceProxy {\n....\n}\n```", "```java\n<dependency>\n  <groupId>org.springframework.cloud</groupId>\n  <artifactId>spring-cloud-starter-oauth2</artifactId>\n</dependency>\n<dependency>\n  <groupId>org.springframework.cloud</groupId>\n  <artifactId>spring-cloud-starter-security</artifactId>\n</dependency>\n```", "```java\n@Configuration\n@EnableAuthorizationServer\npublic class CustomAuthorizationConfig extends AuthorizationServerConfigurerAdapter {\n\n  @Autowired\n  @Qualifier(\"authenticationManager\")\n  private AuthenticationManager authenticationManager;\n\n  @Override\n  public void configure(ClientDetailsServiceConfigurer clients) throws Exception {\n    clients.inMemory()\n    .withClient(\"testClientId\")\n    .secret(new BCryptPasswordEncoder().encode(\"test123\"))\n    .authorizedGrantTypes(\"authorization_code\", \"refresh_token\", \"implicit\", \"password\", \"client_credentials\")\n    .scopes(\"registeredUser\",\"admin\")\n    .redirectUris(\"http://localhost:8781/inventory-test/api/inventory/home\")\n    .resourceIds(\"oauth2-server\");\n  }\n  @Bean\n  public JwtAccessTokenConverter accessTokenConverter() {\n    JwtAccessTokenConverter converter = new JwtAccessTokenConverter();\n    converter.setSigningKey(\"123\");\n    return converter;\n  }\n  @Bean\n  public TokenStore tokenStore() {\n    return new JwtTokenStore(accessTokenConverter());\n  }\n  @Override\n  public void configure(\n      AuthorizationServerEndpointsConfigurer endpoints)\n          throws Exception {\n     endpoints\n    .authenticationManager(authenticationManager)\n    .tokenServices(tokenServices())\n    .tokenStore(tokenStore())\n    .accessTokenConverter(accessTokenConverter());\n  }\n  @Bean(\"resourceServerTokenServices\")\n  @Primary\n  public DefaultTokenServices tokenServices() {\n    DefaultTokenServices defaultTokenServices = new\n        DefaultTokenServices();\n    defaultTokenServices.setTokenStore(tokenStore());\n    defaultTokenServices.setSupportRefreshToken(false);\n    defaultTokenServices.setAccessTokenValiditySeconds(120);\n    defaultTokenServices.setTokenEnhancer(accessTokenConverter());\n    return defaultTokenServices;\n  }\n\n}\n```", "```java\n@Configuration\n@EnableWebSecurity\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter{\n\n  @Override\n  @Bean(\"authenticationManager\")\n  public AuthenticationManager authenticationManagerBean() throws\n  Exception {\n    AuthenticationManager authenticationManager = \n        super.authenticationManagerBean();\n    return authenticationManager;\n  }\n  @Override\n  public void configure(WebSecurity web) throws Exception {\n    web.ignoring().antMatchers(\"/js/**\");\n    web.ignoring().antMatchers(\"/css/**\");\n  }\n  @Override\n  protected void configure(AuthenticationManagerBuilder auth)\n      throws Exception {\n    auth.inMemoryAuthentication()\n    .withUser(\"john\").password(\n        encoder().encode(\"999\")).authorities(\"USER\");\n  }\n  @Override\n  protected void configure(HttpSecurity http) throws Exception {\n    http\n    .authorizeRequests()\n    .antMatchers(\"/oauth/authorize\",\"/oauth/token\",\"/\").permitAll()\n    .and()\n    .formLogin().loginPage(\"/login\").permitAll();\n  }\n  @Bean(\"encoder\")\n  public BCryptPasswordEncoder encoder(){\n    return new BCryptPasswordEncoder();\n  }\n}\n```", "```java\n@EnableZuulProxy\n@EnableOAuth2Sso\n@EnableDiscoveryClient\n@SpringBootApplication\npublic class ZuulApiGatewayApplication {\n...\n}\n```", "```java\n@EnableResourceServer\npublic class ResourceServerConfig extends ResourceServerConfigurerAdapter{\n\n  private static final String RESOURCE_ID = \"oauth2-server\";\n  @Override\n  public void configure(ResourceServerSecurityConfigurer resources) {\n    resources\n    .tokenStore(tokenStore())\n    .resourceId(RESOURCE_ID);\n  }\n  @Override\n  public void configure(HttpSecurity http) throws Exception {\n    http\n    .requestMatcher(new RequestHeaderRequestMatcher(\"Authorization\"))\n    .authorizeRequests()\n    // Microservice specific end point configuration will go here.\n    .antMatchers(\"/**\").authenticated()\n    .and().exceptionHandling().accessDeniedHandler(new\n        OAuth2AccessDeniedHandler());\n  }\n  @Bean\n  public TokenStore tokenStore() {\n    return new JwtTokenStore(accessTokenConverter());\n  }\n  @Bean\n  public JwtAccessTokenConverter accessTokenConverter() {\n    JwtAccessTokenConverter converter = new JwtAccessTokenConverter();\n    converter.setSigningKey(\"123\");\n    return converter;\n  }\n}\n```", "```java\n#security.oauth2.sso.login-path=/login\nsecurity.oauth2.client.access-token-uri=http://localhost:9999/oauth/token\nsecurity.oauth2.client.user-authorization-uri=http://localhost:9999/oauth/authorize\nsecurity.oauth2.client.client-id=testClientId\nsecurity.oauth2.client.client-secret=test123\nsecurity.oauth2.client.scope=registeredUser,admin,openid\nsecurity.oauth2.client.grant-type=implicit\nsecurity.oauth2.resource.id=oauth2-server\nsecurity.oauth2.resource.jwt.key-value=123\n```"]