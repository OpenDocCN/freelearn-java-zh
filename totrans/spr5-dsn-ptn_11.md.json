["```java\n    <dependency> \n      <groupId>org.reactivestreams</groupId> \n      <artifactId>reactive-streams</artifactId> \n      <version>1.0.1</version> \n   </dependency> \n   <dependency> \n      <groupId>org.reactivestreams</groupId> \n      <artifactId>reactive-streams-tck</artifactId> \n      <version>1.0.1</version> \n   </dependency> \n```", "```java\n    <parent> \n       <groupId>org.springframework.boot</groupId> \n       <artifactId>spring-boot-starter-parent</artifactId> \n       <version>2.0.0.M3</version> \n       <relativePath/> <!-- lookup parent from repository --> \n    </parent> \n\n    <properties> \n       <project.build.sourceEncoding>UTF-\n        8</project.build.sourceEncoding> \n       <project.reporting.outputEncoding>UTF\n        -8</project.reporting.outputEncoding> \n       <java.version>1.8</java.version> \n    </properties> \n\n    <dependencies> \n       <dependency> \n          <groupId>org.springframework.boot</groupId> \n          <artifactId>spring-boot-starter-webflux</artifactId> \n       </dependency> \n\n       <dependency> \n          <groupId>org.springframework.boot</groupId> \n          <artifactId>spring-boot-starter-test</artifactId> \n          <scope>test</scope> \n       </dependency> \n       <dependency> \n          <groupId>io.projectreactor</groupId> \n          <artifactId>reactor-test</artifactId> \n          <scope>test</scope> \n       </dependency> \n    </dependencies> \n```", "```java\n    package com.packt.patterninspring.chapter11.\n      reactivewebapp.controller; \n\n    import org.reactivestreams.Publisher; \n    import org.springframework.beans.factory.annotation.Autowired; \n    import org.springframework.web.bind.annotation.GetMapping; \n    import org.springframework.web.bind.annotation.PathVariable; \n    import org.springframework.web.bind.annotation.PostMapping; \n    import org.springframework.web.bind.annotation.RequestBody; \n    import org.springframework.web.bind.annotation.RestController; \n\n    import com.packt.patterninspring.chapter11.\n      reactivewebapp.model.Account; \n    import  com.packt.patterninspring.chapter11.\n      reactivewebapp.repository.AccountRepository; \n\n    import reactor.core.publisher.Flux; \n    import reactor.core.publisher.Mono; \n\n    @RestController \n    public class AccountController { \n\n      @Autowired \n      private AccountRepository repository; \n\n      @GetMapping(value = \"/account\") \n      public Flux<Account> findAll() { \n        return repository.findAll().map(a -> new \n          Account(a.getId(), a.getName(),\n           a.getBalance(), a.getBranch())); \n      } \n\n      @GetMapping(value = \"/account/{id}\") \n      public Mono<Account> findById(@PathVariable(\"id\") Long id) { \n        return repository.findById(id) \n         .map(a -> new Account(a.getId(), a.getName(), a.getBalance(),\n            a.getBranch())); \n      } \n\n      @PostMapping(\"/account\") \n      public Mono<Account> create(@RequestBody \n        Publisher<Account> accountStream) { \n        return repository \n          .save(Mono.from(accountStream) \n          .map(a -> new Account(a.getId(), a.getName(), a.getBalance(),\n             a.getBranch()))) \n          .map(a -> new Account(a.getId(), a.getName(), a.getBalance(),\n             a.getBranch())); \n      } \n    } \n\n```", "```java\n    package com.packt.patterninspring.chapter11.web.reactive.function; \n\n    import static org.springframework.http.MediaType.APPLICATION_JSON; \n    import static org.springframework.web.reactive.\n      function.BodyInserters.fromObject; \n\n    import org.springframework.web.reactive.\n      function.server.ServerRequest; \n    import org.springframework.web.reactive.\n      function.server.ServerResponse; \n\n    import com.packt.patterninspring.chapter11.\n      web.reactive.model.Account; \n    import com.packt.patterninspring.chapter11.\n      web.reactive.repository.AccountRepository; \n\n    import reactor.core.publisher.Flux; \n    import reactor.core.publisher.Mono; \n\n    public class AccountHandler { \n\n      private final AccountRepository repository; \n\n      public AccountHandler(AccountRepository repository) { \n         this.repository = repository; \n      } \n\n      public Mono<ServerResponse> findById(ServerRequest request) { \n        Long accountId = Long.valueOf(request.pathVariable(\"id\")); \n        Mono<ServerResponse> notFound = \n          ServerResponse.notFound().build(); \n        Mono<Account> accountMono =\n         this.repository.findById(accountId); \n        return accountMono \n         .flatMap(account ->    ServerResponse.ok().contentType\n         (APPLICATION_JSON).body(\n            fromObject(account))) \n         .switchIfEmpty(notFound); \n      }  \n\n      public Mono<ServerResponse> findAll(ServerRequest request) { \n       Flux<Account> accounts = this.repository.findAll(); \n       return ServerResponse.ok().contentType\n       (APPLICATION_JSON).body(accounts, \n         Account.class); \n      } \n\n      public Mono<ServerResponse> create(ServerRequest request) { \n        Mono<Account> account = request.bodyToMono(Account.class); \n        return  ServerResponse.ok().build(this.\n        repository.save(account)); \n      } \n    } \n```", "```java\n    package com.packt.patterninspring.chapter11.\n      reactivewebapp.repository; \n\n    import com.packt.patterninspring.chapter11.\n      reactivewebapp.model.Account; \n\n    import reactor.core.publisher.Flux; \n    import reactor.core.publisher.Mono; \n\n    public interface AccountRepository { \n\n      Mono<Account> findById(Long id); \n\n      Flux<Account> findAll(); \n\n      Mono<Void> save(Mono<Account> account); \n    }\n```", "```java\n    package com.packt.patterninspring.chapter11.\n      web.reactive.repository; \n\n    import java.util.Map; \n    import java.util.concurrent.ConcurrentHashMap; \n\n    import org.springframework.stereotype.Repository; \n\n    import com.packt.patterninspring.chapter11.web.\n      reactive.model.Account; \n\n    import reactor.core.publisher.Flux; \n    import reactor.core.publisher.Mono; \n\n    @Repository \n    public class AccountRepositoryImpl implements AccountRepository { \n\n      private final Map<Long, Account> accountMap = new \n      ConcurrentHashMap<>();  \n\n      public AccountRepositoryImpl() { \n        this.accountMap.put(1000l, new Account(1000l,\n        \"Dinesh Rajput\", 50000l,\n          \"Sector-1\")); \n        this.accountMap.put(2000l, new Account(2000l, \n        \"Anamika Rajput\", 60000l,\n          \"Sector-2\")); \n        this.accountMap.put(3000l, new Account(3000l, \n        \"Arnav Rajput\", 70000l,\n           \"Sector-3\")); \n        this.accountMap.put(4000l, new Account(4000l,\n       \"Adesh Rajput\", 80000l,\n           \"Sector-4\")); \n      } \n\n      @Override \n      public Mono<Account> findById(Long id) { \n        return Mono.justOrEmpty(this.accountMap.get(id)); \n      } \n\n      @Override \n      public Flux<Account> findAll() { \n        return Flux.fromIterable(this.accountMap.values()); \n      } \n\n      @Override \n      public Mono<Void> save(Mono<Account> account) { \n        return account.doOnNext(a -> { \n          accountMap.put(a.getId(), a); \n          System.out.format(\"Saved %s with id %d%n\", a, a.getId()); \n        }).thenEmpty(Mono.empty()); \n         // return accountMono; \n      } \n    } \n```", "```java\n    package com.packt.patterninspring.chapter11.web.reactive.function; \n\n    //Imports here \n\n    public class Server { \n\n      public static final String HOST = \"localhost\"; \n\n      public static final int TOMCAT_PORT = 8080; \n      public static final int REACTOR_PORT = 8181; \n\n      //main method here, download code for GITHUB \n\n      public RouterFunction<ServerResponse> routingFunction() { \n         AccountRepository repository = new AccountRepositoryImpl(); \n         AccountHandler handler = new AccountHandler(repository); \n\n         return nest(path(\"/account\"), nest(accept(APPLICATION_JSON), \n           route(GET(\"/{id}\"), handler::findById) \n           .andRoute(method(HttpMethod.GET), handler::findAll) \n           ).andRoute(POST(\"/\").and(contentType\n           (APPLICATION_JSON)), handler::create)); \n      } \n\n      public void startReactorServer() throws InterruptedException { \n         RouterFunction<ServerResponse> route = routingFunction(); \n         HttpHandler httpHandler = toHttpHandler(route); \n\n         ReactorHttpHandlerAdapter adapter = new\n            ReactorHttpHandlerAdapter(httpHandler); \n         HttpServer server = HttpServer.create(HOST, REACTOR_PORT); \n         server.newHandler(adapter).block(); \n      } \n\n      public void startTomcatServer() throws LifecycleException { \n         RouterFunction<?> route = routingFunction(); \n         HttpHandler httpHandler = toHttpHandler(route); \n\n         Tomcat tomcatServer = new Tomcat(); \n         tomcatServer.setHostname(HOST); \n         tomcatServer.setPort(TOMCAT_PORT); \n         Context rootContext = tomcatServer.addContext(\"\",\n           System.getProperty(\"java.io.tmpdir\")); \n         ServletHttpHandlerAdapter servlet = new\n           ServletHttpHandlerAdapter(httpHandler); \n         Tomcat.addServlet(rootContext, \"httpHandlerServlet\", servlet); \n         rootContext.addServletMapping(\"/\", \"httpHandlerServlet\"); \n         tomcatServer.start(); \n      } \n    } \n```", "```java\n    package com.packt.patterninspring.chapter11.web.reactive.function; \n\n    //Imports here \n\n    public class Client { \n\n      private ExchangeFunction exchange = ExchangeFunctions.create(new\n        ReactorClientHttpConnector()); \n\n      public void findAllAccounts() { \n        URI uri = URI.create(String.format(\"http://%s:%d/account\",\n        Server.HOST,\n          Server.TOMCAT_PORT)); \n        ClientRequest request = ClientRequest.method(HttpMethod.GET,  \n        uri).build(); \n\n        Flux<Account> account = exchange.exchange(request) \n        .flatMapMany(response -> response.bodyToFlux(Account.class)); \n\n         Mono<List<Account>> accountList = account.collectList(); \n         System.out.println(accountList.block()); \n      } \n\n      public void createAccount() { \n        URI uri = URI.create(String.format(\"http://%s:%d/account\",\n        Server.HOST,\n           Server.TOMCAT_PORT)); \n        Account jack = new Account(5000l, \"Arnav Rajput\", 500000l,\n        \"Sector-5\"); \n\n        ClientRequest request = ClientRequest.method(HttpMethod.POST,\n        uri) \n        .body(BodyInserters.fromObject(jack)).build(); \n\n        Mono<ClientResponse> response = exchange.exchange(request); \n\n        System.out.println(response.block().statusCode()); \n      } \n    }   \n```"]