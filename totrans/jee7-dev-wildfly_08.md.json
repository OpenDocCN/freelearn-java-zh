["```java\nGET /ticket-agency-websockets/tickets HTTP/1.1\nUpgrade: websocket\nConnection: Upgrade\nHost: localhost:8080\nOrigin: http://localhost:8080Pragma: no-cache\nCache-Control: no-cache\nSec-WebSocket-Key: TrjgyVjzLK4Lt5s8GzlFhA==\nSec-WebSocket-Version: 13\nSec-WebSocket-Extensions: permessage-deflate; client_max_window_bits, x-webkit-deflate-frame\nUser-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1847.116 Safari/537.36\nCookie: [45 bytes were stripped]\n\n```", "```java\nHTTP/1.1 101 Switching Protocols\nX-Powered-By: Undertow 1\nServer: Wildfly 8\nOrigin: http://localhost:8080\nUpgrade: WebSocket\nSec-WebSocket-Accept: ZEAab1TcSQCmv8RsLHg4RL/TpHw=\nDate: Sun, 13 Apr 2014 17:04:00 GMT\nConnection: Upgrade\nSec-WebSocket-Location: ws://localhost:8080/ticket-agency-websockets/tickets\nContent-Length: 0\n\n```", "```java\npackage com.packtpub.wflydevelopment.chapter8.boundary;\n\nimport javax.websocket.EndpointConfig;\nimport javax.websocket.OnOpen;\nimport javax.websocket.Session;\nimport javax.websocket.server.ServerEndpoint;\nimport java.io.IOException;\n\n@ServerEndpoint(\"/hello\")\npublic class HelloEndpoint {\n\n    @OnOpen\n    public void open(Session session, EndpointConfig conf) throws IOException {\n        session.getBasicRemote().sendText(\"Hi!\");\n    }\n}\n```", "```java\n02:21:35,182 INFO  [io.undertow.websockets.jsr] (MSC service thread 1-7) UT026003: Adding annotated server endpoint class com.packtpub.wflydevelopment.chapter8.boundary.FirstEndpoint for path /hello\n02:21:35,401 INFO  [org.jboss.resteasy.spi.ResteasyDeployment] (MSC service thread 1-7) Deploying javax.ws.rs.core.Application: class com.packtpub.wflydevelopment.chapter8.webservice.JaxRsActivator$Proxy$_$$_WeldClientProxy\n02:21:35,437 INFO  [org.wildfly.extension.undertow] (MSC service thread 1-7) JBAS017534: Registered web context: /ticket-agency-websockets\n\n```", "```java\n@Singleton\npublic class SessionRegistry {\n\n    private final Set<Session> sessions = new HashSet<>();\n\n    @Lock(LockType.READ)\n    public Set<Session> getAll() {\n        return Collections.unmodifiableSet(sessions);\n    }\n\n    @Lock(LockType.WRITE)\n    public void add(Session session) {\n        sessions.add(session);\n    }\n\n    @Lock(LockType.WRITE)\n    public void remove(Session session) {\n        sessions.remove(session);\n    }\n}\n```", "```java\n@ServerEndpoint(\"/tickets\")\npublic class TicketEndpoint {\n\n @Inject\n private SessionRegistry sessionRegistry;\n\n @OnOpen\n    public void open(Session session, EndpointConfig conf) {\n        sessionRegistry.add(session);\n    }\n\n @OnClose\n    public void close(Session session, CloseReason reason) {\n        sessionRegistry.remove(session);\n    }\n\n    public void send(@Observes Seat seat) {\n sessionRegistry.getAll().forEach(session -> session.getAsyncRemote().sendText(toJson(seat)));\n    }\n\n    private String toJson(Seat seat) {\n final JsonObject jsonObject = Json.createObjectBuilder()\n .add(\"id\", seat.getId())\n .add(\"booked\", seat.isBooked())\n .build();\n        return jsonObject.toString();\n    }\n}\n```", "```java\nvar ws = new WebSocket(\"ws://localhost:8080/ticket-agency-websockets/tickets\");\nws.onmessage = function (message) {\n    var receivedData = message.data;\n    var bookedSeat = JSON.parse(receivedData);\n\n    $scope.$apply(function () {\n        for (var i = 0; i < $scope.seats.length; i++) {\n            if ($scope.seats[i].id === bookedSeat.id) {\n                $scope.seats[i].booked = bookedSeat.booked;\n                break;\n            }\n        }\n    });\n};\n```", "```java\nws.onopen = function (event) {\n    $scope.$apply(function () {\n        $scope.alerts.push({\n            type: 'info',\n            msg: 'Push connection from server is working'\n        });\n    });\n};\nws.onclose = function (event) {\n    $scope.$apply(function () {\n        $scope.alerts.push({\n            type: 'warning',\n            msg: 'Error on push connection from server '\n        });\n    });\n};\n```", "```java\n<dependency>\n    <groupId>com.google.code.gson</groupId>\n    <artifactId>gson</artifactId>\n    <version>2.3</version>\n</dependency>\n```", "```java\npublic class JSONEncoder implements Encoder.Text<Object> {\n\n    private Gson gson;\n\n    @Override\n    public void init(EndpointConfig config) {\n gson = new Gson(); [1]\n    }\n\n    @Override\n    public void destroy() {\n        // do nothing\n    }\n\n    @Override\n    public String encode(Object object) throws EncodeException {\n return gson.toJson(object); [2]\n    }\n}\n```", "```java\n@ServerEndpoint(value = \"/tickets\", encoders={JSONEncoder.class})[1]\npublic class TicketEndpoint {\n\n    @Inject\n    private SessionRegistry sessionRegistry;\n\n    @OnOpen\n    public void open(Session session, EndpointConfig conf) {\n        sessionRegistry.add(session);\n    }\n\n    @OnClose\n    public void close(Session session, CloseReason reason) {\n        sessionRegistry.remove(session);\n    }\n\n    public void send(@Observes Seat seat) {\n        sessionRegistry.getAll().forEach(session -> session.getAsyncRemote().sendObject(seat)); [2]\n    }\n}\n```"]