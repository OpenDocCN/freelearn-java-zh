- en: The MVC Pattern
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MVC 模式
- en: Today, we will learn how to build a web-based application in Spring that uses
    web pages to interact with the user. As an example, we will be using a simple
    blog application. For that, we will first look at the Model–View–Controller (MVC)
    design pattern and how we can benefit from it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，我们将学习如何在 Spring 中构建一个基于 Web 的应用程序，该应用程序使用网页与用户交互。作为一个例子，我们将使用一个简单的博客应用程序。为此，我们首先将查看模型-视图-控制器（MVC）设计模式以及我们如何从中受益。
- en: The MVC design pattern is a very commonly used application design model. This
    model breaks an application into three interconnected parts. This is done to reduce
    the time taken to create object-oriented applications that have user interfaces.
    This model allows for the decoupling of the different models, views, and controllers,
    thereby facilitating the reuse of code and the simultaneous development of different
    sections of the application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: MVC 设计模式是一个非常常用的应用程序设计模型。该模型将应用程序分解为三个相互关联的部分。这样做是为了减少创建具有用户界面的面向对象应用程序所需的时间。该模型允许不同模型、视图和控制器之间的解耦，从而促进代码的重用和应用程序不同部分的并行开发。
- en: 'By the end of this chapter, you will be able to:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将能够：
- en: Define the Model–View–Controller (MVC) pattern and its benefits
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义模型-视图-控制器（MVC）模式及其优点
- en: Explain the role of the model, the view, and the controller
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释模型、视图和控制器的作用
- en: Distinguish between a request-based and a component-based MVC
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区分基于请求和基于组件的 MVC
- en: Construct your first real-life Spring Web MVC application
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建你的第一个真实生活 Spring Web MVC 应用程序
- en: Introducing the MVC Pattern
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 MVC 模式
- en: When web applications are built with a **User Interface** (**UI**), it can be
    cumbersome to develop the application when multiple developers are involved. In
    addition, maintenance can be difficult if too many concerns are mixed in parts
    of the written code.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 **用户界面**（**UI**）构建 Web 应用程序时，如果涉及多个开发者，开发可能会变得繁琐。此外，如果太多关注点混合在代码的某些部分，维护也可能变得困难。
- en: A design pattern called MVC solves that problem. By separating the concerns
    for rendering and manipulating application data, it allows multiple programmers
    of a team to work on different aspects of the application in parallel. While one
    developer concentrates on the view, another one is able to implement the business
    logic.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一个名为 MVC 的设计模式解决了这个问题。通过分离渲染和操作应用程序数据的关注点，它允许团队中的多个程序员并行地工作在不同的应用程序方面。当一位开发者专注于视图时，另一位开发者能够实现业务逻辑。
- en: 'There are also patterns to solve common software development problems. A popular
    set of these patterns has been introduced in the book *Design Patterns: Elements
    of Reusable Object-Oriented Software*, by Erich Gamma, Richard Helm, Ralph Johnson,
    and John Vlissides.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 还有模式可以解决常见的软件开发问题。在 Erich Gamma、Richard Helm、Ralph Johnson 和 John Vlissides
    所著的《设计模式：可复用面向对象软件元素》一书中，介绍了一套流行的这些模式。
- en: If you're interested in the history of the MVC pattern, you can still find the
    original description of the MVC pattern on the pages of Trygve M H Reenskaug at
    [https://heim.ifi.uio.no/~trygver/themes/mvc/mvc-index.html](https://heim.ifi.uio.no/~trygver/themes/mvc/mvc-index.html).
    Additionally, the original MVC reports are available at [http://folk.uio.no/trygver/2007/MVC_Originals.pdf](http://folk.uio.no/trygver/2007/MVC_Originals.pdf).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你感兴趣 MVC 模式的历史，你仍然可以在 Trygve M H Reenskaug 的页面上找到 MVC 模式的原始描述：[https://heim.ifi.uio.no/~trygver/themes/mvc/mvc-index.html](https://heim.ifi.uio.no/~trygver/themes/mvc/mvc-index.html)。此外，原始的
    MVC 报告可在 [http://folk.uio.no/trygver/2007/MVC_Originals.pdf](http://folk.uio.no/trygver/2007/MVC_Originals.pdf)
    找到。
- en: The MVC Components
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MVC 组件
- en: 'The three components that are defined are as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 定义了以下三个组件：
- en: '**Model**: The application state or data.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型**：应用程序状态或数据。'
- en: '**View**: Renders the application data.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图**：渲染应用程序数据。'
- en: '**Controller**: Mediates between model, view, and the outside world.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制器**：在模型、视图和外部世界之间进行调解。'
- en: Comparing Model, View, and Controller
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比较模型、视图和控制器
- en: 'Take a look at the following table, which highlights the main concepts:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 请看以下表格，它突出了主要概念：
- en: '![](img/1613014f-6d55-4bdc-abb1-b62da0c71a1c.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1613014f-6d55-4bdc-abb1-b62da0c71a1c.png)'
- en: Interacting
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交互
- en: 'Now that we have learnt about the MVC components, let''s take a look at how
    they interact with one another:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学习了 MVC 组件，让我们看看它们是如何相互作用的：
- en: '![](img/2fa1d4b8-fa5d-453d-ac6c-fecfcdece32b.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2fa1d4b8-fa5d-453d-ac6c-fecfcdece32b.png)'
- en: 'A typical interaction consists of the following steps:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的交互包括以下步骤：
- en: The client makes a request to the controller.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端向控制器发送请求。
- en: The controller manipulates the model.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制器操作模型。
- en: The model updates the view.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型更新视图。
- en: The view is rendered and sent to the client.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图被渲染并发送到客户端。
- en: These steps illustrate the separation of concerns, as each component has a very
    well-defined task to accomplish.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤说明了关注点的分离，因为每个组件都有一个非常明确的任务要完成。
- en: MVC uses another design pattern called the **observer pattern**. It describes
    how a subject (the model) will update a number of observers (the view or parts
    of it) about changes that have been made.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: MVC使用另一种设计模式，称为**观察者模式**。它描述了主题（模型）如何更新多个观察者（视图或其部分）关于已进行的更改。
- en: 'If you want to learn more about the observer pattern, you can find more information
    in the book *Design Patterns: Elements of Reusable Object-Oriented Software*,
    which we mentioned previously. Another good starting point is the entry about
    this pattern at [https://springframework.guru/gang-of-four-designpatterns/observer-pattern/](https://springframework.guru/gang-of-four-designpatterns/observer-pattern/).'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于观察者模式的信息，你可以在我们之前提到的书中找到更多信息，即《设计模式：可重用面向对象软件元素》，另一个好的起点是关于此模式的条目[https://springframework.guru/gang-of-four-designpatterns/observer-pattern/](https://springframework.guru/gang-of-four-designpatterns/observer-pattern/)。
- en: Advantages and Disadvantages of the MVC Pattern
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MVC模式的优势和劣势
- en: 'The advantages of the MVC pattern include the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: MVC模式的优势包括以下内容：
- en: '**Simultaneous development**: Interfaces are well-defined and leverage developers
    with different skills.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**同时开发**：接口定义良好，并利用具有不同技能的开发者。'
- en: '**High cohesion**: Groups code that belongs together and that helps with maintenance,
    improvement, and refactoring.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高内聚**：将属于一起的代码分组，有助于维护、改进和重构。'
- en: '**Multiple views**: Implements separate views for different media and keeps
    a single implementation of business logic.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多个视图**：为不同的媒体实现单独的视图，并保持业务逻辑的单个实现。'
- en: '**Loosely coupled**: Only a small amount of knowledge is shared between components,
    and changes can be restricted to isolated parts of the implementation.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**松散耦合**：组件之间共享的知识量很小，并且更改可以限制在实现的孤立部分。'
- en: 'The disadvantages of the MVC pattern include the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: MVC模式的劣势包括以下内容：
- en: '**Navigating through the source code**: Source code can become very scattered.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**导航源代码**：源代码可能会变得非常分散。'
- en: '**Multiple implementations**: Developers have to keep track of multiple implementations.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多种实现**：开发者必须跟踪多种实现。'
- en: '**Understanding the pattern**: Developers have to understand the pattern.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**理解模式**：开发者必须理解该模式。'
- en: Request-Based versus Component-Based MVC
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于请求与基于组件的MVC对比
- en: There are different ways to implement the MVC pattern.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 有不同的方法来实现MVC模式。
- en: In the request-based MVC approach, the developer has to handle the incoming
    requests themselves. This means that data has to be converted and validated manually.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于请求的MVC方法中，开发者必须自己处理传入的请求。这意味着数据必须手动转换和验证。
- en: 'On the other hand, in a component-based MVC application, the framework will
    take care of the processing and builds components that resemble the parts rendered
    by the view:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，在基于组件的MVC应用程序中，框架将负责处理并构建与视图渲染的部分相似的组件：
- en: '![](img/49cd8c7a-41d9-4c46-87b1-a718a34211c9.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/49cd8c7a-41d9-4c46-87b1-a718a34211c9.png)'
- en: While the request-based MVC architecture requires a lot of boilerplate code,
    it gives you fine control over the whole process and output. When you have very
    complex requirements to your view, this approach may be the right choice.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然基于请求的MVC架构需要大量的样板代码，但它让你对整个过程和输出有很好的控制。当你对视图有非常复杂的要求时，这种方法可能是正确的选择。
- en: On the other hand, the request-based approach introduces more complexity, while
    the component-based method raises the developer's burden of component customization.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，基于请求的方法引入了更多的复杂性，而基于组件的方法增加了开发者对组件定制的负担。
- en: Spring Web MVC Basics
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Web MVC基础知识
- en: Now that we have learnt about the Model–View–Controller pattern, we will now
    take a look at how Spring Web MVC leverages this pattern to enable the development
    of web applications.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了模型-视图-控制器模式，我们将现在看看Spring Web MVC如何利用这个模式来启用Web应用程序的开发。
- en: When we talk about web applications, we usually mean that the view is rendered
    in a browser. But before getting into the details, we will have a short discussion
    about two different ways that such a front-end can be implemented.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们谈论Web应用时，我们通常是指视图在浏览器中渲染。但在深入细节之前，我们将简要讨论两种不同的前端实现方式。
- en: Single-Page Applications Versus Multi-Page Applications
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Single-Page Applications Versus Multi-Page Applications
- en: There are different ways to implement the client side of a web application that
    is also called the "frontend". The most commonly used architectures today are
    **Single-Page A****pplications** (**SPA**). Requests only change parts of the
    view.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 实现Web应用的客户端（也称为“前端”）有不同方式。今天最常用的架构是**单页应用（SPA**）。请求只更改视图的部分。
- en: In contrast, **Multi-Page Applications** (**MPA**) render a new page for every
    request.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，**多页应用（MPA**）为每个请求渲染一个新的页面。
- en: In an MPA, the HTML of the view gets rendered on the server and is then sent
    back to the browser. Each action taken by the user results in a request made to
    the server, which responds with another full page or view.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在MPA中，视图的HTML在服务器上渲染，然后发送回浏览器。用户的每个操作都会导致向服务器发出请求，服务器会响应另一个完整页面或视图。
- en: SPA versus MPA
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单页应用（SPA）与多页应用（MPA）
- en: 'Take a look at the following table that highlights the main concepts:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下以下表格，它突出了主要概念：
- en: '![](img/98401246-5187-439b-b3d6-59a5296af0d0.png)![](img/c130cbc5-45db-4194-83dd-5f08ac2842ae.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/98401246-5187-439b-b3d6-59a5296af0d0.png)![图片](img/c130cbc5-45db-4194-83dd-5f08ac2842ae.png)'
- en: In this chapter, we will be focusing on how to build a multi-page application.
    Next, you will get to know how to architect and implement an API that can build
    the back-end side of an SPA.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将关注如何构建多页应用。接下来，你将了解如何设计和实现一个可以构建SPA后端API的架构。
- en: Java Servlet API
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java Servlet API
- en: We will now discover the Java Servlet API that builds an important foundation
    for any kind of web application in the Java ecosystem.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将揭示Java Servlet API，它为Java生态系统中的任何类型的Web应用奠定了重要基础。
- en: Depending on the level of knowledge, you may choose to focus on this sub-section
    or go ahead to the next one.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 根据知识水平，你可以选择专注于这个子节或继续到下一个节。
- en: The Java Servlet API is an architecture that aims to process HTTP requests that
    are made to a so-called container. It is developed under the **Java Community
    Process** (**JCP**) and is currently available in Version 4.0.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Java Servlet API是一种旨在处理针对所谓容器发出的HTTP请求的架构。它是在Java Community Process（JCP）下开发的，目前可用版本为4.0。
- en: Popular containers that follow this specification are Apache Tomcat and Jetty.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循此规范的流行容器包括Apache Tomcat和Jetty。
- en: Servlet API Components
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Servlet API组件
- en: 'The following block diagram shows a typical relationship among the various
    components:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 以下块图显示了各种组件之间的典型关系：
- en: '![](img/59d3414e-4c34-4077-9920-b6f92a9affcf.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/59d3414e-4c34-4077-9920-b6f92a9affcf.png)'
- en: 'Take a look at the following table, which highlights the main concepts:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下以下表格，它突出了主要概念：
- en: '![](img/ab9d0b47-e1ed-4f67-bbe8-38c7782486ea.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ab9d0b47-e1ed-4f67-bbe8-38c7782486ea.png)'
- en: Spring Web MVC
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Web MVC
- en: As we have been looking at all the basic patterns and technologies that are
    required to build and understand a working web application, we are now going to
    see how all of this can be applied to a Spring Boot application.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们一直在查看构建和了解一个工作Web应用所需的所有基本模式和技术的，我们现在将看看所有这些如何应用于Spring Boot应用。
- en: Spring Boot uses "starter dependencies" to add various features and capabilities
    to an application. In our case, we want to implement a web application that will
    require a web server to run. We also need support for the MVC pattern. The Spring
    Framework includes all that is required for building rich and modern web applications
    based on the MVC design pattern.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot使用“启动依赖”来为应用添加各种功能和能力。在我们的案例中，我们想要实现一个需要Web服务器来运行的网络应用。我们还需要支持MVC模式。Spring框架包括构建基于MVC设计模式的丰富和现代Web应用所需的所有内容。
- en: To leverage these features, all that is required is to include the spring-boot-starter-web
    dependency in our Maven `pom.xml` file.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 要利用这些功能，只需在我们的Maven `pom.xml`文件中包含spring-boot-starter-web依赖项即可。
- en: Utilizing Spring Web MVC Starter
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用Spring Web MVC启动器
- en: 'The aim is to display an output on the web page using Spring Web MVC Starter.
    The steps for completion are as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是使用Spring Web MVC启动器在网页上显示输出。完成步骤如下：
- en: Open a CMD window and navigate to [https://bit.ly/2DmTaQA](https://bit.ly/2DmTaQA).
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个CMD窗口并导航到[https://bit.ly/2DmTaQA](https://bit.ly/2DmTaQA)。
- en: Make sure that your `JAVA_HOME` path is set correctly and start the project
    using the `mvnw spring-boot:run` command.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你的`JAVA_HOME`路径设置正确，并使用`mvnw spring-boot:run`命令启动项目。
- en: 'Take a look at the following screenshot:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下下面的截图：
- en: '![](img/f27559f7-b5e2-4bee-a3d5-cede5a82ae80.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f27559f7-b5e2-4bee-a3d5-cede5a82ae80.png)'
- en: Notice the application stopping immediately after startup.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 注意应用程序在启动后立即停止。
- en: Navigate the browser to `http://localhost:8080/hello.html`.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用浏览器导航到`http://localhost:8080/hello.html`。
- en: 'Take a look at the following screenshot:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下下面的截图：
- en: '![](img/5d450b7e-c18c-4e13-ac87-ee448f3638f5.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5d450b7e-c18c-4e13-ac87-ee448f3638f5.png)'
- en: The browser cannot connect to the server and therefore displays an error page.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器无法连接到服务器，因此显示了一个错误页面。
- en: 'Add the following dependency to your `pom.xml` file:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下依赖项添加到你的`pom.xml`文件中：
- en: '[PRE0]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Start the project again.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次启动项目。
- en: Navigate to `http://localhost:8080/hello.html` to see a greeting page.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`http://localhost:8080/hello.html`以查看问候页面。
- en: Press Ctrl+C to stop the program. You can safely ignore the error message here.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下Ctrl+C停止程序。你可以安全地忽略这里的错误消息。
- en: You have obtained the expected greeting page using Spring Web MVC Starter.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 你已使用Spring Web MVC Starter获得了预期的问候页面。
- en: 'Take a look at the following output screenshot:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下下面的输出截图：
- en: '![](img/239a6f9e-966e-4f56-a603-043a0a905570.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/239a6f9e-966e-4f56-a603-043a0a905570.png)'
- en: Go to [https://bit.ly/2OfiTwW](https://bit.ly/2OfiTwW) to access the code for
    the `WebstarterExerciseApplication.java` file.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 前往[https://bit.ly/2OfiTwW](https://bit.ly/2OfiTwW)访问`WebstarterExerciseApplication.java`文件的代码。
- en: The Embedded Web Server
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌入式Web服务器
- en: Thanks to the auto-configuration features of Spring Boot, the only thing you
    have to do is add the spring-boot-starter-web dependency to your Maven build file.
    By default, this will add an embedded Apache Tomcat server to your build. It will
    also build an executable JAR file that will start the server and deploy your application
    to it.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢Spring Boot的自动配置功能，你只需要在你的Maven构建文件中添加spring-boot-starter-web依赖项。默认情况下，这将向你的构建添加一个嵌入式的Apache
    Tomcat服务器。它还将构建一个可执行的JAR文件，该文件将启动服务器并将你的应用程序部署到它上面。
- en: 'If you prefer to use a different web server, you can choose to do so by excluding
    the spring-boot-starter-tomcat dependency and add one of the following dependencies
    instead:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望使用不同的Web服务器，你可以选择排除spring-boot-starter-tomcat依赖项，并添加以下依赖项之一：
- en: '![](img/c5f3b11d-a2b6-416e-8ab5-0a47d4cfcd73.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c5f3b11d-a2b6-416e-8ab5-0a47d4cfcd73.png)'
- en: Spring DispatcherServlet
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring DispatcherServlet
- en: Spring Web MVC handles incoming requests by providing a servlet called `DispatcherServlet`.
    It is also called a **Front Controller** since it is the first part of the controller
    that handles incoming requests and dispatches them to other controller implementations.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Web MVC通过提供一个名为`DispatcherServlet`的servlet来处理传入请求。它也被称为**前端控制器**，因为它是处理传入请求并将它们分派到其他控制器实现的第一部分控制器。
- en: 'By default, the `DispatcherServlet` will be called for every request that is
    made to a URL starting with `/`. You can change this so-called context path by
    setting the `server.servlet.contextPath` property in the application.properties
    file:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`DispatcherServlet`将对以`/`开头的每个请求进行调用。你可以通过在`application.properties`文件中设置`server.servlet.contextPath`属性来更改这个所谓的上下文路径：
- en: '`server.servlet.contextPath=/my-app`'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`server.servlet.contextPath=/my-app`'
- en: In the preceding example, the `DispatcherServlet`, and thus your application,
    will only respond to URLs starting with `/my-app`.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，`DispatcherServlet`以及你的应用程序将只响应以`/my-app`开头的URL。
- en: DispatcherServlet Interaction
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DispatcherServlet交互
- en: 'The following block diagram shows a typical relationship among the various
    components:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 以下块图显示了各种组件之间的典型关系：
- en: '![](img/36a3b584-6b32-4dfb-a664-fb06f0d097a9.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/36a3b584-6b32-4dfb-a664-fb06f0d097a9.png)'
- en: 'The `DispatcherServlet` does all the heavy lifting when it comes to handling
    incoming requests:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当处理传入请求时，`DispatcherServlet`做所有繁重的工作：
- en: Determines which controller to call depending on the request URI. For this,
    it uses a `HandlerMapping` that is able to retrieve the controller.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据请求URI确定要调用的控制器。为此，它使用一个能够检索控制器的`HandlerMapping`。
- en: Calls the controller method, optionally passing in the model
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用控制器方法，可选地传递模型
- en: When the controller has finished, it returns the name of a view
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当控制器完成时，它返回一个视图的名称
- en: Determines the view based on the name returned from the controller
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据控制器返回的名称确定视图
- en: Resolves the view
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解析视图
- en: Renders the view back to the client, passing in the model to be rendered
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将视图渲染回客户端，传递要渲染的模型
- en: This is a very simple view on what takes place for incoming requests. We will
    get into more detail later when we look at some of these components.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这是对传入请求发生的事情的非常简单的看法。我们将在查看这些组件的一些内容时进一步详细介绍。
- en: Controller as Components
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制器作为组件
- en: While the `DispatcherServlet` is the front controller of the application responding
    to each incoming request, the business logic is implemented in its own method.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`DispatcherServlet`是应用程序的前端控制器，响应每个传入请求，但业务逻辑在其自己的方法中实现。
- en: As we have discussed in the previous section, a `HandlerMapper` is used to map
    the request.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上一节中讨论的那样，`HandlerMapper`用于映射请求。
- en: By default, a `RequestMappingHandlerMapping` is installed, which finds methods
    annotated with `@RequestMapping` contained within Spring components annotated
    with `@Controller`. We will learn more about this kind of mapping in a later chapter.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，安装了一个`RequestMappingHandlerMapping`，它查找在带有`@Controller`注解的Spring组件中注有`@RequestMapping`的方法。我们将在后面的章节中了解更多关于此类映射的内容。
- en: Static Views with HTML and Assets
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用HTML和资源提供静态视图
- en: Every web application will require some kind of static view or asset. Take an
    "About" page, for example. However, since you cannot embed data from your model
    into this kind of page, you may not have much use for them. On the other hand,
    you will be required to serve some kind of static assets such as CSS files, JavaScript,
    or images. Spring Web MVC is able to serve this kind of content that is placed
    in a folder called `static`. If you're using a build tool such as Maven or Gradle,
    as we do, the full path will be `/src/main/resources/static` from the project
    root.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 每个Web应用程序都将需要某种类型的静态视图或资源。以“关于”页面为例。然而，由于您无法将模型中的数据嵌入此类页面，您可能不会对它们有太多用途。另一方面，您将需要提供一些静态资源，例如CSS文件、JavaScript或图像。Spring
    Web MVC能够提供放置在名为`static`的文件夹中的此类内容。如果您使用的是Maven或Gradle等构建工具，正如我们所做的那样，完整路径将从项目根目录的`/src/main/resources/static`。
- en: Adding Client-Side Web Libraries Through WebJars
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过WebJars添加客户端Web库
- en: Besides using the static folder to provide static assets, there is another mechanism
    called WebJars.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用静态文件夹提供静态资源外，还有一种称为WebJars的机制。
- en: A **WebJar** is a client-side web library packed as a Java-Archive. Examples
    of these libraries include JQuery for common JavaScript tasks related to web pages,
    or **Bootstrap**, a library to build responsive web designs. It can be easily
    downloaded and deployed as a dependency when using a build tool such as Maven.
    In addition, transitive dependencies will also be downloaded and provided automatically.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**WebJar**是一种打包为Java-Archive的客户端Web库。这些库的例子包括用于网页常见JavaScript任务的JQuery，或者**Bootstrap**，一个用于构建响应式Web设计的库。它可以通过使用Maven等构建工具轻松下载和部署作为依赖项。此外，传递依赖项也将自动下载和提供。'
- en: The content structure of a WebJar archive is standardized and includes folder
    structure as well as certain files that need to be present.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: WebJar存档的内容结构是标准化的，包括文件夹结构和需要存在的某些文件。
- en: If a WebJar is present on the classpath, Spring Boot will configure your application
    to map HTTP requests to `/webjars to the /META-INF/resources/webjars` folder.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果类路径上存在WebJar，Spring Boot将配置您的应用程序将HTTP请求映射到`/webjars`到`/META-INF/resources/webjars`文件夹。
- en: If you include multiple WebJars in your classpath, they will all be available
    under the same `/webjars URI`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在类路径中包含多个WebJars，它们都将位于相同的`/webjars URI`下。
- en: 'For example, you can include the WebJar of Bootstrap by adding the following
    dependency to your `pom.xml` file:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以通过在`pom.xml`文件中添加以下依赖项来包含Bootstrap的WebJar：
- en: '[PRE1]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To access the main CSS file for this library, include the following line in
    your HTML file:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此库的主要CSS文件，请在您的HTML文件中包含以下行：
- en: '[PRE2]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you can see, the library is referenced under the `/webjars` folder by its
    name (bootstrap). After this, the version number is added, followed by the path
    to the required resource, which depends on the library.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，该库通过其名称（bootstrap）在`/webjars`文件夹下引用。之后，添加版本号，然后是所需资源的路径，这取决于库。
- en: 'If you don''t want to add the library version to the URI, you can add the `webjar-locator`
    dependency to your `pom.xml` file:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不想将库版本添加到URI中，您可以将`webjar-locator`依赖项添加到您的`pom.xml`文件中：
- en: '[PRE3]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'With this dependency in place, you can change the link tag in your HTML file
    to the following:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在此依赖项就绪后，您可以将HTML文件中的链接标签更改为以下内容：
- en: '[PRE4]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Please note that after adding the webjars-locator, the mapping for static files
    in the `/static` folder will no longer work.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: If you want to learn more about the WebJar standard, visit [http://www.webjars.org](http://www.webjars.org)
    to find an exhaustive list of libraries including a search engine and snippets
    generator. There is also more information about the standard and its application
    in the documentation available on this site.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: Styling with Bootstrap
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The aim is to style a page using Bootstrap and WebJar. The steps for completion
    are as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: Go to the folder present at [https://bit.ly/2z8QQd6](https://bit.ly/2z8QQd6)[.](https://bit.ly/2z8QQd6)
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the application with `mvnw spring-boot:run`.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate the browser to `http://localhost:8080/hello.html`.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Notice that the page is unstyled.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: Navigate the browser to `http://localhost:8080/webjars/bootstrap/4.0.0-2/css/bootstrap.css`.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The browser will show an error page, since the resource is missing (**errorCode=404**).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following dependency to include the Bootstrap WebJar:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Restart the application.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate the browser to `http://localhost:8080/welcome.html` again.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The page now has some styling applied to it.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: Navigate the browser to `http://localhost:8080/webjars/bootstrap/4.0.0-2/css/bootstrap.css`.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Instead of the error page, you should now see some CSS.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: You will notice that you now have added styling to the web page using Bootstrap
    and WebJar.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://bit.ly/2Obb4Il](https://bit.ly/2Obb4Il) to access the code for
    the `WebstarterExerciseApplication.java` file.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: Transforming the Template Engine
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following block diagram shows a typical relationship among the various
    components:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6648d38f-798c-4374-a7c6-2988cadbdfcc.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
- en: In web applications, we expect views to be rendered as HTML pages. As the MVC
    pattern encourages us to separate the model from the view, there has to be an
    entity that transforms our model data into the final representation.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: This is where a template engine comes into play. As the name suggests, a template
    engine will take a template containing HTML with placeholders for the data derived
    from the model. It will then render the final HTML that gets sent to the client.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: Thymeleaf Snippet
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following block diagram shows a typical relationship among the various
    components:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/60e039c9-219b-4787-8484-bb47353d19a8.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
- en: 'As an example, imagine the following code snippet:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If our model contains an attribute called hello with the content Good Morning!,
    the template engine will render the following HTML code:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As with other frameworks, Spring Boot offers an easy way to add a template engine
    to your application.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: Passing Data Along with Models
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we've seen, an element called `model` is used to pass data between the controller
    and the view. Spring Web MVC is automatically passing the model between these
    components and provides many mechanisms to access and bind attributes. In addition,
    a lot of basic tasks such as conversion and validation are done by the framework.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: The model is bound to the current request and represented by an instance of
    the `org.springframework.ui.Model` class. Any object can be bound to the model.
    It's also possible to bind individual attributes of the model to method parameters
    when using annotated request handlers.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 模型绑定到当前请求，并由 `org.springframework.ui.Model` 类的实例表示。任何对象都可以绑定到模型。在注解请求处理器时，还可以将模型的单个属性绑定到方法参数。
- en: 'We will see how to use the model in *[Chapter 5](ae829ce0-b16f-454e-84c9-37eb73bc9de5.xhtml):
    Displaying Information Using Web Pages*, when we display dynamic information on
    web pages.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在 Web 页面上显示动态信息时，我们将看到如何在 *[第 5 章](ae829ce0-b16f-454e-84c9-37eb73bc9de5.xhtml)：使用
    Web 页面显示信息* 中使用模型。
- en: Spring Web MVC Controller
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Web MVC 控制器
- en: We will now see what Spring Web MVC includes, allowing us to implement the controllers
    of our application. The framework handles incoming requests and thus allows us
    to concentrate on the business logic.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将看看 Spring Web MVC 包含了哪些内容，使我们能够实现应用程序的控制器。该框架处理传入的请求，因此我们可以专注于业务逻辑。
- en: The @RequestMapping Annotation
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`@RequestMapping` 注解'
- en: We have seen that the `DispatcherServlet` uses a `HandlerMapping` to determine
    how incoming requests are handled.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到 `DispatcherServlet` 使用 `HandlerMapping` 来确定如何处理传入的请求。
- en: By default, Spring Web MVC will install and use a `RequestMappingHandlerMapping`
    that allows us to use annotations to determine which controller and method to
    use.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Spring Web MVC 将安装并使用 `RequestMappingHandlerMapping`，这允许我们使用注解来确定要使用哪个控制器和方法。
- en: 'The following block diagram shows a typical relationship between the various
    components:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 以下块图显示了各种组件之间的典型关系：
- en: '![](img/43043db1-d375-4532-9f84-05772aa85cca.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/43043db1-d375-4532-9f84-05772aa85cca.png)'
- en: Any component will be inspected for a `@RequestMapping` annotation. If this
    annotation is present, a mapping will be created depending on the path attribute.
    In addition, the method annotation specifies the HTTP method for the mapping.
    To make it more obvious that the given Bean is meant to be a controller, there
    is a special `@Controller` annotation that can be used on the class.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 任何组件都将检查 `@RequestMapping` 注解。如果存在此注解，将根据路径属性创建映射。此外，方法注解指定映射的 HTTP 方法。为了更明显地表明给定的
    Bean 旨在作为控制器，可以使用特殊的 `@Controller` 注解在类上。
- en: Since Spring 4.3, there have been convenience annotations for each HTTP method.
    These annotations are called `@GetMapping`, `@PostMapping`, and so on.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 自 Spring 4.3 以来，为每个 HTTP 方法都提供了便利注解。这些注解被称为 `@GetMapping`、`@PostMapping` 等。
- en: 'If the `@RequestMapping` annotation is present on the class level, it is used
    as a prefix for all methods that are annotated with `@RequestMapping` or any of
    the method-specific annotations:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `@RequestMapping` 注解位于类级别，它将用作所有标注了 `@RequestMapping` 或任何方法特定注解的方法的前缀：
- en: '[PRE8]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Go to [https://bit.ly/2MsHOvc](https://bit.ly/2MsHOvc) to access the complete
    code for the `@RequestMapping` annotation example.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 访问 [https://bit.ly/2MsHOvc](https://bit.ly/2MsHOvc) 以获取 `@RequestMapping` 注解示例的完整代码。
- en: Additional Annotations and Parameters for Handler Methods
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理方法额外的注解和参数
- en: There are additional annotations that can be applied to a handler method. We
    will take a look at the most important parameters here.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 可以应用于处理方法的额外注解。我们将在这里查看最重要的参数。
- en: '@RequestParam'
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`@RequestParam`'
- en: 'A request that is sent to the application can contain any number of parameters
    in the query. The parameters are delimited from the path by a question mark (`?`).
    These parameters are parsed automatically and can be passed to the handler method
    by using the `@RequestParam` annotation. If required, the value will be converted:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 发送到应用程序的请求可以包含查询中的任意数量的参数。这些参数通过问号（`?`）与路径分隔。这些参数会自动解析，并且可以通过使用 `@RequestParam`
    注解将它们传递给处理方法。如果需要，值将被转换：
- en: '[PRE9]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '@RequestHeader'
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`@RequestHeader`'
- en: 'The `@RequestHeader` annotation allows you to inject one or more HTTP headers
    into method parameters. This is done by annotating one or more method parameters
    with `@RequestHeader`:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '`@RequestHeader` 注解允许你将一个或多个 HTTP 头注入到方法参数中。这是通过在方法参数上标注 `@RequestHeader` 来实现的：'
- en: '[PRE10]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '@CookieValue'
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`@CookieValue`'
- en: 'This annotation allows you to retrieve the content of cookies:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 此注解允许你检索 cookie 的内容：
- en: '[PRE11]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '@PathVariable'
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`@PathVariable`'
- en: 'It is possible to use parts of a URL path as a parameter that gets passed into
    the handler method. This can be done by using the `@PathVariable` annotation.
    If required, the value will be converted:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 有可能使用URL路径的一部分作为参数传递给处理方法。这可以通过使用`@PathVariable`注解来实现。如果需要，值将被转换：
- en: '[PRE12]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '@ModelAttribute'
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '@ModelAttribute'
- en: When using the `@ModelAttribute` annotation on a parameter of a request handler
    method, you can inject an attribute that is bound to the model.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 当在请求处理方法的一个参数上使用`@ModelAttribute`注解时，您可以注入一个绑定到模型的属性。
- en: 'We will get into more details on how to work with this model in a future chapter:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在未来的章节中详细介绍如何使用此模型：
- en: '[PRE13]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '@RequestBody'
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '@RequestBody'
- en: 'Sometimes, you need to access the body of the request. By using `@RequestBody`
    in conjunction with a method parameter, you can inject the request body. The Spring
    Framework will try and convert the body to the given type. If you''re specifying
    a string, you will get access to the raw body:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您需要访问请求的主体。通过将`@RequestBody`与一个方法参数结合使用，您可以注入请求主体。Spring框架将尝试将主体转换为给定的类型。如果您指定了一个字符串，您将能够访问原始主体：
- en: '[PRE14]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '@ResponseBody'
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '@ResponseBody'
- en: 'Usually, a request handler method will return the name of the view to be rendered.
    If you want to return the rendered response body, you can annotate the method
    with `@ResponseBody`. In this case, the value that is returned will be sent as
    a response. In case the type of the returned value is not a string, it will be
    converted before it gets sent:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，请求处理方法将返回要渲染的视图的名称。如果您想返回渲染后的响应体，您可以给方法添加`@ResponseBody`注解。在这种情况下，返回的值将被发送作为响应。如果返回值的类型不是字符串，它将在发送之前被转换：
- en: '[PRE15]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Additional Content – Properties to Configure Web MVC
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 额外内容 - 配置Web MVC的属性
- en: One of the biggest strengths of Spring Boot is its automatic configuration using
    predefined values. However, in some cases, you need to alter parts of the configuration.
    For example, the servlet container will listen on port 8080 by default. This will
    allow you to install an HTTP server on the same machine. If you don't need a dedicated
    web server and want your application to be listening on port 80, you can configure
    the web container that is embedded by Spring Boot by setting `server. port=80`
    in your `application.properties` file.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot最大的优势之一是其使用预定义值进行自动配置。然而，在某些情况下，您需要更改配置的部分。例如，servlet 容器默认将监听8080端口。这将允许您在同一台机器上安装一个HTTP服务器。如果您不需要专用的Web服务器，并希望您的应用程序监听80端口，您可以通过在`application.properties`文件中设置`server.port=80`来配置Spring
    Boot嵌入的Web容器。
- en: 'The following table lists some common configuration properties that you can
    change to fit your needs:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 下表列出了您可以更改以满足您需求的常见配置属性：
- en: '![](img/a59b9b18-f52a-4564-9ea8-e7a86d9c9ad8.png)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a59b9b18-f52a-4564-9ea8-e7a86d9c9ad8.png)'
- en: You can find an exhaustive list of all available configuration properties in
    the Spring documentation at [https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#common-application-properties](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#common-application-properties).
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在Spring文档中找到所有可用配置属性的详尽列表，网址为[https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#common-application-properties](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#common-application-properties)。
- en: Filter
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过滤器
- en: We've learnt about filters in a previous section regarding the Servlet API.
    Filters are organized in a chain and called by the container before the actual
    servlet is called. Finally, they can process the response in the reverse order.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在关于Servlet API的先前部分学习了过滤器。过滤器被组织成链，并在实际servlet被调用之前由容器调用。最后，它们可以以相反的顺序处理响应。
- en: Spring Boot makes installing a filter very easy. As often is the case in Spring
    Boot, there are multiple ways to achieve this. First, you have to implement a
    Bean implementing the `javax.servlet.filter` interface. Instead of having to add
    a configuration into the `web.xml`, any Spring Bean that implements the filter
    interface will be automatically installed.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot使安装过滤器变得非常简单。在Spring Boot中，通常有多种方法可以实现这一点。首先，您必须实现一个实现`javax.servlet.filter`接口的Bean。您不需要在`web.xml`中添加配置，任何实现过滤器接口的Spring
    Bean都将自动安装。
- en: 'Take a look at the following code:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 看看以下代码：
- en: '[PRE16]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Go to [https://bit.ly/2xeD5b4](https://bit.ly/2xeD5b4) to access the complete
    code for the Filter code example.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 前往[https://bit.ly/2xeD5b4](https://bit.ly/2xeD5b4)访问Filter代码示例的完整代码。
- en: Configuring Spring Web MVC
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Spring Web MVC
- en: Writing and configuring a web application is always a comprehensive task. Thankfully,
    Spring Boot again takes care of the heavy lifting. But in many cases, you need
    to modify or, more importantly, extend the configuration. This includes additional
    mappings and security configuration.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: All available configuration methods are provided by the `WebMvcConfigurer` interface.
    Usually, the configuration methods are passed a configurer object that can then
    be used to modify a certain aspect.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: In prior versions of the Spring Framework, you had to implement a Bean extending
    the abstract `WebConfigurerAdapter` class. The adapter class is responsible for
    providing default implementations, so you could concentrate on the methods you
    wanted to customize.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: 'Since Version 5, this is no longer required. Instead, you can now provide an
    implementation of the `WebMvcConfigurer` interface with only the methods you want
    to override:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Activity: Creating Your First Web MVC Controller'
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Aim**'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: To set up a Spring Web MVC project, add a static welcome page, and create a
    controller pointing to the view.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '**Scenario**'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: You are asked to set up a web application that displays a static welcome page.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: '**Steps for Completion**'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to [https://start.spring.io](https://start.spring.io) and enter the required
    dependencies on the following screen:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Group: `com.packt.springboot`'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Artifact: `blogmania`'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Take a look at this screenshot:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0d9271ee-e3d2-4cd6-ac90-abade8eea5ca.png)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
- en: Download a ZIP file containing the initial project files.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unzip the downloaded file to the project folder.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the dependency for the Bootstrap Webjars archive.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the `welcome.html` file.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a controller to render the view.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now start the application by using the Maven command.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use your browser to navigate to `http://localhost:8080` to view the output.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Outcome**'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: The resulting Spring Web MVC project and posts are visible on the web page.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at this screenshot:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d7e30ccd-450b-4d42-9978-5ec0c873fab8.png)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
- en: Go to [https://bit.ly/2QpmQR9](https://bit.ly/2QpmQR9) to access the code for
    the `BlogManiaApplicationTests.java` file. To refer to the detailed steps, go
    to the *Solutions* section at the end of this book on page 252.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learnt about the Model-View-Controller (MVC) pattern.
    It separates the main concerns of a web application into a model, a view, and
    a controller.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: We then distinguished between a request- and a component-based MVC, which differs
    in how the framework handles incoming requests by either taking care of conversion,
    validation, and so on, or leaving the developer to handle these aspects, resulting
    in different code reusability.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we implemented our first Spring Web MVC application, to handle incoming
    requests and display a simple page output.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will apply the MVC pattern to Spring Boot.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
