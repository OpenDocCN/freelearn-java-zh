["```java\nconst sizes = [128, 256, 512, 1024];\nconst img = readSomeImage();\n\nsizes.forEach(function(size) {\n  img.resize(size, AUTO);\n})\n```", "```java\nconst sizes = [128, 256, 1024];\nconst lambda = new aws.Lambda();\n\nfor (var i=0; i<sizes.length; i++) {\n  var params = {\n    FunctionName: 'fanout-ResizeImage',\n    Payload: JSON.stringify({\"size\": sizes[i]})\n  }\n\n  lambda.invoke(params, function(error, data) {\n    if (error) {\n      callback(error)\n    } \n    else {\n      callback(null, 'success')\n    } \n  }); \n}\n```", "```java\nroot@4b26ed909d56:/code# sls create -t aws-nodejs -p serverless -n fanout\n```", "```java\nroot@4b26ed909d56:/code/serverless# yarn add jimp\nyarn add v1.3.2 \ninfo No lockfile found. \n[1/4] Resolving packages... \n[2/4] Fetching packages... \n[3/4] Linking dependencies... \n[4/4] Building fresh packages... \nsuccess Saved lockfile. \nsuccess Saved 88 new dependencies.\n....\nDone in 4.33s.\n\n```", "```java\n$ tree -L 1 .\n.\n├── handler.js\n├── node_modules\n├── package.json\n├── serverless.yml\n└── yarn.lock\n```", "```java\nfunctions:\n  UploadImage:\n    handler: handler.uploadImage\n    events:\n      - s3:\n          bucket: brianz-image-resize-fanout\n          event: s3:ObjectCreated:*\n  ResizeImage:\n    handler: handler.resizeImage\n```", "```java\nservice: fanout\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  region: ${env:AWS_REGION}\n  timeout: 30\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - lambda:InvokeFunction\n      Resource: \"arn:aws:lambda:${env:AWS_REGION}:*:function:fanout-${opt:stage}-ResizeImage\"\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n      Resource:\n        - \"arn:aws:s3:::brianz-image-resize-fanout-results/*\"\n\nfunctions:\n  UploadImage:\n    handler: handler.uploadImage\n    events:\n      - s3:\n          bucket: brianz-image-resize-fanout\n          event: s3:ObjectCreated:*\n  ResizeImage:\n    handler: handler.resizeImage\n\nplugins:\n  - serverless-prune-plugin\n```", "```java\n'use strict'; \n\nconst aws = require('aws-sdk');\nconst Jimp = require(\"jimp\");\n\nmodule.exports.uploadImage = (event, context, callback) => {\n  var params = { \n    FunctionName: 'fanout-dev-ResizeImage'\n    , InvocationType: \"Event\"\n  }\n\n  var sizes = [128, 256, 1024];\n\n  const s3Objects = event['Records'].map(function(r) {\n    return r[\"s3\"]\n  }) \n\n  const lambda = new aws.Lambda({\n    region: 'us-west-2'\n  }); \n\n  for (var i=0; i<sizes.length; i++) {\n    params['Payload'] = JSON.stringify({\n      \"size\": sizes[i]\n      , \"s3Objects\": s3Objects\n    }); \n\n    lambda.invoke(params, function(error, data) {\n      if (error) {\n        callback(error)\n      } else {\n        callback(null, 'success')\n      } \n    }); \n  }\n\n};\n```", "```java\nmodule.exports.resizeImage = (event, context, callback) => { \n\n  const size = event.size;\n  const S3 = new aws.S3();\n\n  event.s3Objects.map(function(s3Object) {\n    var bucket = s3Object.bucket.name;\n    var key = s3Object.object.key;\n    var parts = key.split('.');\n    var name = parts[0];\n    var suffix = parts[1];\n\n    function uploadToS3(err, buffer) {\n      const keyName = name + \"-\" + size + \".\" + suffix\n      var params = { \n        Body: buffer,\n        Bucket: bucket + '-results',\n        Key: keyName\n      } \n\n      S3.putObject(params, function(err, data) {\n        if ( err ) { \n          callback(err);\n        } else {\n          console.log('successfully uploaded resized image: ' + \n          keyName)\n          callback(null, \"success\");\n        } \n      })\n    }\n\n    S3.getObject({Bucket: bucket, Key: key}, function(err, data) {\n      if ( err ) {\n        console.log('Error reading S3 item: ' + bucket + ' ' + key);\n      } else {\n        Jimp.read(data.Body, function(err, buffer) {\n          buffer\n            .resize(size, Jimp.AUTO)\n            .getBuffer( Jimp.MIME_JPEG, uploadToS3 )\n        })\n      }\n    });\n\n    callback(null, \"success\");\n\n  });\n\n};\n```", "```java\n$ aws s3 cp 1186218980_878902b096_o.jpg s3://brianz-image-resize-fanout/ --acl public-read\nupload: ./1186218980_878902b096_o.jpg to s3://brianz-image-resize-fanout/1186218980_878902b096_o.jpg\n\n```", "```java\nroot@39152c09a5f4:/code/serverless# sls logs -f ResizeImage -s $ENV \nSTART RequestId: 5cc66bc4-e53e-11e7-ba30-f5d23778d6cb \n Version: $LATEST\nSTART RequestId: 5cc5f6f2-e53e-11e7-8ff7-c3f67f0d5aef \n Version: $LATEST\nSTART RequestId: 5cc6e173-e53e-11e7-9de2-85f253c2cf2b\n Version: $LATEST\n\n2017-12-20 04:29:34.608 (+00:00) 5cc6e173-e53e-11e7-9de2-85f253c2cf2b\n successfully uploaded resized image: 1186218980_878902b096_o.jpg-128.jpg\nEND RequestId: 5cc6e173-e53e-11e7-9de2-85f253c2cf2b\nREPORT RequestId: 5cc6e173-e53e-11e7-9de2-85f253c2cf2b\n Duration: 6059.70 ms Billed Duration: 6100 ms\n Memory Size: 1024 MB Max Memory Used: 424 MB\n\n2017-12-20 04:29:34.696 (+00:00) 5cc66bc4-e53e-11e7-ba30-f5d23778d6cb\n successfully uploaded resized image: 1186218980_878902b096_o.jpg-256.jpg\nEND RequestId: 5cc66bc4-e53e-11e7-ba30-f5d23778d6cb\nREPORT RequestId: 5cc66bc4-e53e-11e7-ba30-f5d23778d6cb \n Duration: 6302.95 ms Billed Duration: 6400 ms\n Memory Size: 1024 MB Max Memory Used: 426 MB\n\n2017-12-20 04:29:35.456 (+00:00) 5cc5f6f2-e53e-11e7-8ff7-c3f67f0d5aef\n successfully uploaded resized image: 1186218980_878902b096_o.jpg-1024.jpg\nEND RequestId: 5cc5f6f2-e53e-11e7-8ff7-c3f67f0d5aef\nREPORT RequestId: 5cc5f6f2-e53e-11e7-8ff7-c3f67f0d5aef\n Duration: 6980.45 ms Billed Duration: 7000 ms\n Memory Size: 1024 MB Max Memory Used: 481 MB\n```", "```java\n$ aws s3 ls s3://brianz-image-resize-fanout-results/1186218980_878902b096_o\n2017-12-20 04:29:36 1027150 1186218980_878902b096_o-1024.jpg\n2017-12-20 04:29:35 20795 1186218980_878902b096_o-128.jpg\n2017-12-20 04:29:35 78093 1186218980_878902b096_o-256.jpg\n```"]