- en: Chapter 3. Creating Your First Bukkit Plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Bukkit plugins that we will program will be written in the Java programming
    language. We will use an **IDE** (short for **Integrated Development Environment**)
    to write the plugins. An IDE is software that will aid us in writing the Java
    code. It has many tools and features that make programming much easier. For example,
    it automatically detects errors in code, it often tells us how to fix these errors
    and sometimes even does it for us, and it provides us with many shortcuts, such
    as a keystroke to compile code and build a JAR file so that the code can be executed.
    In this chapter, we will download and install an IDE and prepare it to create
    a new Bukkit plugin. We will cover the following topics and by the end of this
    chapter, we will have written our first plugin, which will be ready to be tested
    on our server:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing an IDE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding Bukkit as a library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `plugin.yml` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The plugin's `main` class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and calling new methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Expanding the code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing an IDE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, we will use NetBeans as our IDE. There are other popular IDEs
    too, such as Eclipse and IntelliJ IDEA. You can use a different IDE if you wish.
    However, in this chapter, it will be assumed that you are using NetBeans. No matter
    which IDE you choose, the Java code will be the same. Therefore, as long as you
    set up the code properly, you can use any IDE for the remaining chapters. If you
    are fairly new to programming, then I suggest that you use NetBeans for now, and
    after you are more comfortable with programming, try other IDEs and choose the
    one that you prefer.
  prefs: []
  type: TYPE_NORMAL
- en: 'The NetBeans IDE can be downloaded from [http://www.oracle.com/technetwork/java/javase/downloads/](http://www.oracle.com/technetwork/java/javase/downloads/).
    Downloading the program from Oracle will also allow us to download the required
    **Java Development Kit** (**JDK**) at the same time. You will see several download
    links. Click on the NetBeans link to visit the **JDK 8 with NetBeans** download
    page. Once you select **Accept License Agreement**, you will be allowed to download
    the software. The download link is located in a table that is similar to the one
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing an IDE](img/00016.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If your PC has a 64-bit Windows operating system, then you will want to use
    the link corresponding to **Windows x64**. If your PC has a 32-bit Windows operating
    system or you are unsure about whether it's a 64-bit or 32-bit Windows operating
    system, then download the **Windows x86** version.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you wish to check whether you are running a 64-bit version of Windows, then
    you can check it by viewing the **System** window in **Control Panel**.
  prefs: []
  type: TYPE_NORMAL
- en: Once it has finished downloading, install the software. During the installation
    process, you may be asked about whether you'd like to install **JUnit**. We will
    not be using **JUnit**. Therefore, you should select **Do not install JUnit**.
    In the next few screens of the installer, you will be asked about where you would
    like to install the two types of software. The default settings are fine. You
    can simply click on **Next**.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once it is installed, open NetBeans to begin the creation of the first project.
    You can create a new project by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the **File** menu and click on **New Project...**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We want to create a new **java application. Java Application** is already selected
    by default. Therefore, simply click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We must now name the first project. It is a good idea to avoid using spaces
    in a name. Let's name this project `MyFirstBukkitPlugin`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unless you want to store your project in another location, you can leave the
    default value of **Project Location**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that **Create Main Class** is checked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `main` class is where we will put the code that is needed to enable the
    plugin that we want to create. For this field, you must determine the package
    of your project. This usually involves your website's domain name in the reverse
    order. For example, Bukkit uses `org.bukkit` and I use `com.codisimus`. Assuming
    that you don't have your own domain name, you can use your e-mail address, such
    as `com.gmail.username`. You need to use something that will be unique. If two
    plugins were to have the same package, it might cause collisions in class names,
    and Java will have no way of knowing which class you are referring to. Using an
    e-mail address or a domain name that you own is a good way to ensure that other
    developers don't use the same package. For this same reason, you should exclude
    `bukkit` or `minecraft` from your package name. The package should also be in
    lowercase, as shown in the previous examples.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have a package, you need to name your main class. To avoid confusion,
    most Bukkit plugin developers use the project name as the main class name. The
    name of the main class should start with a capital letter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot is an example of how your forms should appear before
    clicking on **Finish**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a new project](img/00017.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Adding Bukkit as a library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have created the main class, we need to add the Bukkit API as the
    library for the project. You may recall, as discussed in the previous chapter,
    that the API includes the code that we can access to modify the Spigot server.
    You built the API JAR file when you built the Spigot jar in [Chapter 1](part0014_split_000.html#DB7S1-b66e70deee6e4ed481db4b113e303f23
    "Chapter 1. Deploying a Spigot Server"), *Deploying a Spigot Server*. If needed,
    refer to this chapter to retrieve the `Bukkit.jar file`. You will want to move
    it to a more permanent location. I suggest that you create a folder named `Libraries`
    and place the JAR file in this folder. The filename will most likely have a version
    appended to it. We will rename this file, which is similar to what we did for
    `spigot.jar`. This will help us easily update it in the future. Therefore, the
    new location of the `bukkit.jar file` will be similar to `C:\Users\Owner\Documents\NetBeansProjects\Libraries\bukkit.jar`.
    Remember your file location because, now that we have the Bukkit API, we can create
    a library for it in NetBeans.
  prefs: []
  type: TYPE_NORMAL
- en: 'In NetBeans, inside the **Projects** tab, you will see a **Libraries** folder.
    When you right-click on it, you will be presented with the **Add Library...**
    option. Click on it to bring up a list of the current libraries, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Bukkit as a library](img/00018.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'For the first project, we need to create the Bukkit library by performing the
    following steps. For future projects, it will already be present and we can simply
    select it:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Create...** and type **Bukkit** as the **Library Name**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next window, there is an **Add JAR/Folder...** button. Click on it to
    locate and add the `bukkit.jar` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Leave the **Sources** tab empty and then click on the **Javadoc** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add [https://hub.spigotmc.org/javadocs/spigot/](https://hub.spigotmc.org/javadocs/spigot/)
    in this tab and click on **OK**. This allows us to read some parts of the API
    documentation directly in the IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, you will be able to select **Bukkit** as a library and add it to the project.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that in order to update to a newer version of Bukkit, you can simply replace
    the current `bukkit.jar` file with the new one, just as you would do to update
    the `spigot.jar file` on your server. No additional modifications need to be done
    to your existing projects. However, you will have to compile the code in these
    projects to check whether any new errors are presented.
  prefs: []
  type: TYPE_NORMAL
- en: The essentials of a Bukkit plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each Bukkit plugin requires two specific files. These files are `plugin.yml`
    and the main class of the plugin. We will begin by creating the most basic versions
    of each of these files. All of your future projects will start with the creation
    of these two files.
  prefs: []
  type: TYPE_NORMAL
- en: The plugin.yml file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are ready to start programming a Bukkit plugin. The first file that we will
    create is `plugin.yml`. This is the file that the Spigot server will read to determine
    how to load a plugin. Right-click on **Source Packages** and click on **New |
    Other...**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The plugin.yml file](img/00019.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the window that appears, select **Other** under **Categories**. Then, select
    **YAML File** under **File Types**, as shown in the following screenshot, and
    click on **Next**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The plugin.yml file](img/00020.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Set the **File Name** as `plugin`, let the name of the folder be `src`, and
    click on **Finish**. Your project''s tree structure should now look like in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The plugin.yml file](img/00021.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The `plugin.yml` file was created in the default package. This is where it needs
    to be so that Spigot can find it. For now, we will fill in the `plugin.yml` file
    with the most basic settings. The `plugin.yml file` must include the name of your
    plugin, its version, and its `main` class. We have already determined the name
    and `main` class, and we will give it a `Version number of 0.1`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you wish to learn more about version numbers, Wikipedia has a great article
    on this at [http://en.wikipedia.org/wiki/Software_versioning](http://en.wikipedia.org/wiki/Software_versioning).
  prefs: []
  type: TYPE_NORMAL
- en: 'The simplest form of `plugin.yml` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: That is all that you need in this file, but some other fields that you may wish
    to add are `author`, `description`, and `website`. We are done with this file.
    You can save and close `plugin.yml`.
  prefs: []
  type: TYPE_NORMAL
- en: The plugin's main class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to modify the main class. Open `MyFirstBukkitPlugin.java` if it is
    not already open. We do not use the `main` method in plugins. Hence, we will delete
    that section of the code. Now, you will have an empty Java class, as shown in
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may see additional comments, but they will not affect how the program is
    executed They are there for anyone who may be reading the code to help them understand
    it. It is always a good idea to comment on the code that you write. If someone
    ends up reading your code, whether it is a fellow developer or yourself a week
    from now, they will thank you for adding comments.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing that we need to do is tell the IDE that this class is a Bukkit
    plugin. To do so, we will extend the `JavaPlugin` class by adding `extends JavaPlugin`
    immediately following the class name. The modified line will look like the following
    piece of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see that a squiggly line and a light bulb appear. This will happen
    a lot, and it usually means that you need to import something from the Bukkit
    API. The IDE will do this for you if you ask it to do so. Click on the light bulb
    and import `JavaPlugin` from the Bukkit library, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The plugin''s main class](img/00022.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This will automatically add a line of code near the top of your class. Right
    now, you can install this plugin on your server, but it will of course not do
    anything. Let''s program the plugin to broadcast a message to the server once
    it is enabled. This message will show up when the plugin is enabled as we test
    it. To do this, we will override the `onEnable` method. This method is executed
    when the plugin is enabled. Mimic the following code to add the method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: You will see another light bulb that will ask you to add the `@Override` annotation.
    Click on it to automatically add the line of code. If you were not prompted to
    add the override annotation, then you may have misspelled something in the method
    header.
  prefs: []
  type: TYPE_NORMAL
- en: We now have the base of all of your future plugins.
  prefs: []
  type: TYPE_NORMAL
- en: Making and calling new methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create a new method that will broadcast a message to the server. The
    following diagram labels the various parts of a method in case you are not familiar
    with them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making and calling new methods](img/00023.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a new method named `broadcastToServer`. We will place it in the `MyFirstBukkitPlugin`
    class under the `onEnable` method. We only want to call this method from inside
    the `MyFirstBukkitPlugin` class so that the access modifier will be `private`.
    If you want to call this method from other classes in the plugin, you can remove
    the modifier or change it to `public`. The method will not return anything and
    thus will have a return type of `void`. Finally, the method will have one parameter,
    namely a string named `msg`. After creating this second method, your class will
    look like the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will write the code within the body of the new method to accomplish its
    task. We want to broadcast a message to the server. We could call the `getServer`
    method on the plugin. However, for convenience, the `Bukkit` class contains a
    number of server methods in a static context. You may have come across the methods
    that we need when you were going through the `Bukkit` class of the API in the
    previous chapter; if you have not stumbled upon them, browse through the methods
    in the `Bukkit` class at [https://hub.spigotmc.org/javadocs/spigot/index.html?org/bukkit/Bukkit.html](https://hub.spigotmc.org/javadocs/spigot/index.html?org/bukkit/Bukkit.html)
    until you find the `broadcastMessage(String message)` method. We will call the
    `broadcastMessage` method from our own `broadcastToServer` method. In the IDE,
    type `Bukkit`, which is the name of the class, to indicate that you will be accessing
    the `Bukkit` class from a static context. Continue by typing a period (*.*) in
    order to call a method from that class. You will see that a list of available
    methods will appear, and we can simply scroll through them and choose the one
    that we want. This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making and calling new methods](img/00024.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Click to select the `broadcastMessage` method. The API documentation for the
    method will be displayed. Note that to the right of the method, it says **int**.
    This informs us that this method returns an `integer` type value. When you click
    on the **See Also:** link, as shown in the preceding screenshot, the documentation
    will tell us that the number that is returned is the number of players that the
    message was sent to. We don't really care about this number. Therefore, we will
    not assign it to a variable.
  prefs: []
  type: TYPE_NORMAL
- en: After selecting the method from the list, the IDE fills the parameters with
    variables that it believes we will use. In this case, it should use `msg` as the
    parameter. If not, simply type `msg` as parameter in `broadcastMessage method`
    This completes the broadcast method. Now, we can call it from the `onEnable` method.
    We will pass the `Hello World!` string as an argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'Adding this line of code will result in the class containing the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If we test this plugin, then it will print `Hello World!` once it is enabled.
  prefs: []
  type: TYPE_NORMAL
- en: Expanding your code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before testing the code, let''s improve on the `onEnable` method by implementing
    an `if` statement. If there is only one player online, then why not say hello
    to that specific player? We can get a collection of all the players that are online
    by calling `Bukkit.getOnlinePlayers`. If we wish to check whether the size of
    the collection is equal to 1, we can accomplish this by using an `if`/`else` statement.
    This is demonstrated in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Within the `if` statement, we will now get the first and the only object in
    the collection of players. Once we have it, we can continue by broadcasting `Hello`
    along with the player''s name. After completing the `if` statement, the entire
    class will look like the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you do not fully understand the `if` statement or the code provided, then
    I suggest that you go to my website to learn the basics of Java, which is a prerequisite
    that was mentioned in the preface of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Your first plugin is complete and ready to be tested on your server. In the
    next chapter, we will install your new plugin, learn how to test it, and discover
    when the `onEnable` method is executed by the server. Now that you are familiar
    with writing and calling methods, you can now create basic plugins. Each plugin
    that you create from now on will always start in a way that is similar to the
    way this one was started, that is, first create a new project and add Bukkit as
    a library then fill out the `plugin.yml` file and finally set up your main class
    as a `JavaPlugin` class with the `onEnable` method.
  prefs: []
  type: TYPE_NORMAL
