- en: Chapter 3. Creating Your First Bukkit Plugin
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章 创建您的第一个Bukkit插件
- en: 'The Bukkit plugins that we will program will be written in the Java programming
    language. We will use an **IDE** (short for **Integrated Development Environment**)
    to write the plugins. An IDE is software that will aid us in writing the Java
    code. It has many tools and features that make programming much easier. For example,
    it automatically detects errors in code, it often tells us how to fix these errors
    and sometimes even does it for us, and it provides us with many shortcuts, such
    as a keystroke to compile code and build a JAR file so that the code can be executed.
    In this chapter, we will download and install an IDE and prepare it to create
    a new Bukkit plugin. We will cover the following topics and by the end of this
    chapter, we will have written our first plugin, which will be ready to be tested
    on our server:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要编写的Bukkit插件将使用Java编程语言编写。我们将使用**IDE**（集成开发环境的缩写）来编写插件。IDE是一种软件，它将帮助我们编写Java代码。它有许多工具和功能，使编程变得更容易。例如，它自动检测代码中的错误，它经常告诉我们如何修复这些错误，有时甚至为我们修复，它还提供了许多快捷方式，例如编译代码和构建JAR文件的按键，以便代码可以执行。在本章中，我们将下载和安装IDE，并准备创建一个新的Bukkit插件。我们将涵盖以下主题，并在本章结束时，我们将编写我们的第一个插件，它将准备好在我们的服务器上进行测试：
- en: Installing an IDE
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装IDE
- en: Creating a new project
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建新项目
- en: Adding Bukkit as a library
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Bukkit添加为库
- en: The `plugin.yml` file
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`plugin.yml` 文件'
- en: The plugin's `main` class
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插件的`main`类
- en: Creating and calling new methods
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和调用新方法
- en: Expanding the code
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展代码
- en: Installing an IDE
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装IDE
- en: In this book, we will use NetBeans as our IDE. There are other popular IDEs
    too, such as Eclipse and IntelliJ IDEA. You can use a different IDE if you wish.
    However, in this chapter, it will be assumed that you are using NetBeans. No matter
    which IDE you choose, the Java code will be the same. Therefore, as long as you
    set up the code properly, you can use any IDE for the remaining chapters. If you
    are fairly new to programming, then I suggest that you use NetBeans for now, and
    after you are more comfortable with programming, try other IDEs and choose the
    one that you prefer.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们将使用NetBeans作为我们的IDE。还有其他流行的IDE，例如Eclipse和IntelliJ IDEA。如果您愿意，可以使用不同的IDE。然而，在本章中，我们将假设您正在使用NetBeans。无论您选择哪个IDE，Java代码都将相同。因此，只要您正确设置代码，您就可以在剩余的章节中使用任何IDE。如果您对编程相当新手，那么我建议您现在使用NetBeans，在您对编程更加熟悉之后，尝试其他IDE，并选择您喜欢的IDE。
- en: 'The NetBeans IDE can be downloaded from [http://www.oracle.com/technetwork/java/javase/downloads/](http://www.oracle.com/technetwork/java/javase/downloads/).
    Downloading the program from Oracle will also allow us to download the required
    **Java Development Kit** (**JDK**) at the same time. You will see several download
    links. Click on the NetBeans link to visit the **JDK 8 with NetBeans** download
    page. Once you select **Accept License Agreement**, you will be allowed to download
    the software. The download link is located in a table that is similar to the one
    shown in the following screenshot:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: NetBeans IDE可以从[http://www.oracle.com/technetwork/java/javase/downloads/](http://www.oracle.com/technetwork/java/javase/downloads/)下载。从Oracle下载程序也将允许我们同时下载所需的**Java开发工具包**（**JDK**）。您将看到几个下载链接。点击NetBeans链接访问**JDK
    8 with NetBeans**下载页面。一旦您选择**接受许可协议**，您就可以下载软件。下载链接位于一个类似于以下截图所示的表格中：
- en: '![Installing an IDE](img/00016.jpeg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![安装IDE](img/00016.jpeg)'
- en: If your PC has a 64-bit Windows operating system, then you will want to use
    the link corresponding to **Windows x64**. If your PC has a 32-bit Windows operating
    system or you are unsure about whether it's a 64-bit or 32-bit Windows operating
    system, then download the **Windows x86** version.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的PC运行的是64位Windows操作系统，那么您将想要使用对应于**Windows x64**的链接。如果您的PC运行的是32位Windows操作系统，或者您不确定是否是64位或32位Windows操作系统，那么请下载**Windows
    x86**版本。
- en: Tip
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you wish to check whether you are running a 64-bit version of Windows, then
    you can check it by viewing the **System** window in **Control Panel**.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想检查您是否正在运行64位版本的Windows，您可以通过查看**控制面板**中的**系统**窗口来检查。
- en: Once it has finished downloading, install the software. During the installation
    process, you may be asked about whether you'd like to install **JUnit**. We will
    not be using **JUnit**. Therefore, you should select **Do not install JUnit**.
    In the next few screens of the installer, you will be asked about where you would
    like to install the two types of software. The default settings are fine. You
    can simply click on **Next**.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 下载完成后，安装软件。在安装过程中，你可能会被问及是否想要安装**JUnit**。我们不会使用**JUnit**。因此，你应该选择**不安装JUnit**。在安装程序的下一几个屏幕中，你将被询问希望安装两种类型软件的位置。默认设置是合适的。你可以简单地点击**下一步**。
- en: Creating a new project
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新项目
- en: 'Once it is installed, open NetBeans to begin the creation of the first project.
    You can create a new project by performing the following steps:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，打开NetBeans开始创建第一个项目。你可以通过以下步骤创建一个新项目：
- en: Open the **File** menu and click on **New Project...**.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**文件**菜单并点击**新建项目...**。
- en: We want to create a new **java application. Java Application** is already selected
    by default. Therefore, simply click on **Next**.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们想要创建一个新的**Java应用程序**。默认情况下已经选中了**Java Application**。因此，只需点击**下一步**。
- en: We must now name the first project. It is a good idea to avoid using spaces
    in a name. Let's name this project `MyFirstBukkitPlugin`.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在需要命名第一个项目。避免在名称中使用空格是一个好主意。让我们将这个项目命名为`MyFirstBukkitPlugin`。
- en: Unless you want to store your project in another location, you can leave the
    default value of **Project Location**.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 除非你想要将你的项目存储在另一个位置，否则你可以保留**项目位置**的默认值。
- en: Ensure that **Create Main Class** is checked.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保已勾选**创建主类**。
- en: The `main` class is where we will put the code that is needed to enable the
    plugin that we want to create. For this field, you must determine the package
    of your project. This usually involves your website's domain name in the reverse
    order. For example, Bukkit uses `org.bukkit` and I use `com.codisimus`. Assuming
    that you don't have your own domain name, you can use your e-mail address, such
    as `com.gmail.username`. You need to use something that will be unique. If two
    plugins were to have the same package, it might cause collisions in class names,
    and Java will have no way of knowing which class you are referring to. Using an
    e-mail address or a domain name that you own is a good way to ensure that other
    developers don't use the same package. For this same reason, you should exclude
    `bukkit` or `minecraft` from your package name. The package should also be in
    lowercase, as shown in the previous examples.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`main`类是我们将放置所需代码以启用我们想要创建的插件的地方。对于这个字段，你必须确定你的项目包。这通常涉及到你的网站域名以相反的顺序。例如，Bukkit使用`org.bukkit`，而我使用`com.codisimus`。假设你没有自己的域名，你可以使用你的电子邮件地址，例如`com.gmail.username`。你需要使用一些独特的东西。如果两个插件有相同的包，可能会导致类名冲突，Java将无法知道你指的是哪个类。使用你拥有的电子邮件地址或域名是一个确保其他开发者不使用相同包的好方法。出于同样的原因，你应该将`bukkit`或`minecraft`排除在你的包名称之外。包名称也应该像前面的例子一样全部小写。'
- en: Once you have a package, you need to name your main class. To avoid confusion,
    most Bukkit plugin developers use the project name as the main class name. The
    name of the main class should start with a capital letter.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦有了包，你需要给你的主类命名。为了避免混淆，大多数Bukkit插件开发者使用项目名称作为主类名称。主类的名称应该以大写字母开头。
- en: 'The following screenshot is an example of how your forms should appear before
    clicking on **Finish**:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了点击**完成**之前你的表单应该呈现的样子：
- en: '![Creating a new project](img/00017.jpeg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![创建新项目](img/00017.jpeg)'
- en: Adding Bukkit as a library
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Bukkit作为库添加
- en: Now that we have created the main class, we need to add the Bukkit API as the
    library for the project. You may recall, as discussed in the previous chapter,
    that the API includes the code that we can access to modify the Spigot server.
    You built the API JAR file when you built the Spigot jar in [Chapter 1](part0014_split_000.html#DB7S1-b66e70deee6e4ed481db4b113e303f23
    "Chapter 1. Deploying a Spigot Server"), *Deploying a Spigot Server*. If needed,
    refer to this chapter to retrieve the `Bukkit.jar file`. You will want to move
    it to a more permanent location. I suggest that you create a folder named `Libraries`
    and place the JAR file in this folder. The filename will most likely have a version
    appended to it. We will rename this file, which is similar to what we did for
    `spigot.jar`. This will help us easily update it in the future. Therefore, the
    new location of the `bukkit.jar file` will be similar to `C:\Users\Owner\Documents\NetBeansProjects\Libraries\bukkit.jar`.
    Remember your file location because, now that we have the Bukkit API, we can create
    a library for it in NetBeans.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了主类，我们需要将Bukkit API作为项目的库添加。你可能还记得，在上一章讨论过，API包括我们可以访问以修改Spigot服务器的代码。你在[第1章](part0014_split_000.html#DB7S1-b66e70deee6e4ed481db4b113e303f23
    "第1章。部署Spigot服务器")中构建Spigot jar时构建了API JAR文件，*部署Spigot服务器*。如果需要，请参考此章节以检索`Bukkit.jar`文件。你可能希望将其移动到更永久的位置。我建议你创建一个名为`Libraries`的文件夹并将JAR文件放在这个文件夹中。文件名可能附加了一个版本号。我们将重命名此文件，这与我们对`spigot.jar`所做的一样。这将帮助我们将来更容易地更新它。因此，`bukkit.jar`文件的新位置将类似于`C:\Users\Owner\Documents\NetBeansProjects\Libraries\bukkit.jar`。请记住你的文件位置，因为我们现在有了Bukkit
    API，我们可以在NetBeans中为其创建一个库。
- en: 'In NetBeans, inside the **Projects** tab, you will see a **Libraries** folder.
    When you right-click on it, you will be presented with the **Add Library...**
    option. Click on it to bring up a list of the current libraries, as shown in the
    following screenshot:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在NetBeans中，在**项目**选项卡内，你会看到一个**库**文件夹。当你右键单击它时，你会看到一个**添加库...**选项。点击它以显示当前库的列表，如下面的截图所示：
- en: '![Adding Bukkit as a library](img/00018.jpeg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![将Bukkit添加为库](img/00018.jpeg)'
- en: 'For the first project, we need to create the Bukkit library by performing the
    following steps. For future projects, it will already be present and we can simply
    select it:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第一个项目，我们需要通过以下步骤创建Bukkit库。对于未来的项目，它将已经存在，我们只需选择它即可：
- en: Click on **Create...** and type **Bukkit** as the **Library Name**.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建...**并输入**Bukkit**作为**库名称**。
- en: In the next window, there is an **Add JAR/Folder...** button. Click on it to
    locate and add the `bukkit.jar` file.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个窗口中，有一个**添加JAR/Folder...**按钮。点击它以定位并添加`bukkit.jar`文件。
- en: Leave the **Sources** tab empty and then click on the **Javadoc** tab.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持**源**选项卡为空，然后点击**Javadoc**选项卡。
- en: Add [https://hub.spigotmc.org/javadocs/spigot/](https://hub.spigotmc.org/javadocs/spigot/)
    in this tab and click on **OK**. This allows us to read some parts of the API
    documentation directly in the IDE.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此选项卡中添加[https://hub.spigotmc.org/javadocs/spigot/](https://hub.spigotmc.org/javadocs/spigot/)并点击**确定**。这允许我们直接在IDE中阅读API文档的一些部分。
- en: Now, you will be able to select **Bukkit** as a library and add it to the project.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你将能够选择**Bukkit**作为库并将其添加到项目中。
- en: Note
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that in order to update to a newer version of Bukkit, you can simply replace
    the current `bukkit.jar` file with the new one, just as you would do to update
    the `spigot.jar file` on your server. No additional modifications need to be done
    to your existing projects. However, you will have to compile the code in these
    projects to check whether any new errors are presented.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，为了更新到Bukkit的新版本，你只需用新版本替换当前的`bukkit.jar`文件，就像你更新服务器上的`spigot.jar`文件一样。不需要对你的现有项目进行任何额外的修改。然而，你必须编译这些项目中的代码以检查是否有任何新的错误出现。
- en: The essentials of a Bukkit plugin
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Bukkit插件的基本要素
- en: Each Bukkit plugin requires two specific files. These files are `plugin.yml`
    and the main class of the plugin. We will begin by creating the most basic versions
    of each of these files. All of your future projects will start with the creation
    of these two files.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 每个Bukkit插件都需要两个特定的文件。这些文件是`plugin.yml`和插件的主类。我们将从创建这些文件的最低版本开始。你未来的所有项目都将从创建这两个文件开始。
- en: The plugin.yml file
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: plugin.yml文件
- en: 'We are ready to start programming a Bukkit plugin. The first file that we will
    create is `plugin.yml`. This is the file that the Spigot server will read to determine
    how to load a plugin. Right-click on **Source Packages** and click on **New |
    Other...**, as shown in the following screenshot:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经准备好开始编写Bukkit插件了。我们将创建的第一个文件是`plugin.yml`。这是Spigot服务器读取以确定如何加载插件的文件。在**源包**上右键单击，然后点击**新建
    | 其他...**，如下面的截图所示：
- en: '![The plugin.yml file](img/00019.jpeg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![plugin.yml文件](img/00019.jpeg)'
- en: 'In the window that appears, select **Other** under **Categories**. Then, select
    **YAML File** under **File Types**, as shown in the following screenshot, and
    click on **Next**:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在出现的窗口中，在**类别**下选择**其他**。然后，在**文件类型**下选择**YAML文件**，如下面的截图所示，然后点击**下一步**：
- en: '![The plugin.yml file](img/00020.jpeg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![plugin.yml文件](img/00020.jpeg)'
- en: 'Set the **File Name** as `plugin`, let the name of the folder be `src`, and
    click on **Finish**. Your project''s tree structure should now look like in the
    following screenshot:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 将**文件名**设置为`plugin`，让文件夹的名称为`src`，然后点击**完成**。现在，你的项目结构应该如下面的截图所示：
- en: '![The plugin.yml file](img/00021.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![plugin.yml文件](img/00021.jpeg)'
- en: The `plugin.yml` file was created in the default package. This is where it needs
    to be so that Spigot can find it. For now, we will fill in the `plugin.yml` file
    with the most basic settings. The `plugin.yml file` must include the name of your
    plugin, its version, and its `main` class. We have already determined the name
    and `main` class, and we will give it a `Version number of 0.1`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`plugin.yml`文件是在默认包中创建的。这就是它需要的位置，以便Spigot可以找到它。现在，我们将用最基本的设置填充`plugin.yml`文件。`plugin.yml`文件必须包含你插件的名称、版本和主类。我们已经确定了名称和主类，我们将给它一个`版本号0.1`。'
- en: Tip
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you wish to learn more about version numbers, Wikipedia has a great article
    on this at [http://en.wikipedia.org/wiki/Software_versioning](http://en.wikipedia.org/wiki/Software_versioning).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要了解更多关于版本号的信息，维基百科上有一篇关于这个主题的优秀文章，链接为[http://en.wikipedia.org/wiki/Software_versioning](http://en.wikipedia.org/wiki/Software_versioning)。
- en: 'The simplest form of `plugin.yml` is as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`plugin.yml`的最简单形式如下：'
- en: '[PRE0]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: That is all that you need in this file, but some other fields that you may wish
    to add are `author`, `description`, and `website`. We are done with this file.
    You can save and close `plugin.yml`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是在这个文件中你需要的所有内容，但你可以添加一些其他字段，比如`author`、`description`和`website`。我们已经完成了这个文件。你可以保存并关闭`plugin.yml`。
- en: The plugin's main class
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插件的主类
- en: 'We need to modify the main class. Open `MyFirstBukkitPlugin.java` if it is
    not already open. We do not use the `main` method in plugins. Hence, we will delete
    that section of the code. Now, you will have an empty Java class, as shown in
    the following code:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要修改主类。如果`MyFirstBukkitPlugin.java`文件还没有打开，请打开它。在插件中我们不使用`main`方法。因此，我们将删除该代码段。现在，你将拥有一个空白的Java类，如下面的代码所示：
- en: '[PRE1]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You may see additional comments, but they will not affect how the program is
    executed They are there for anyone who may be reading the code to help them understand
    it. It is always a good idea to comment on the code that you write. If someone
    ends up reading your code, whether it is a fellow developer or yourself a week
    from now, they will thank you for adding comments.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会看到一些额外的注释，但它们不会影响程序的执行。它们的存在是为了帮助任何可能阅读代码的人理解它。总是对所写的代码进行注释是一个好主意。如果有人最终阅读了你的代码，无论是其他开发者还是一周后的你自己，他们都会感谢你添加了注释。
- en: 'The first thing that we need to do is tell the IDE that this class is a Bukkit
    plugin. To do so, we will extend the `JavaPlugin` class by adding `extends JavaPlugin`
    immediately following the class name. The modified line will look like the following
    piece of code:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是告诉IDE这个类是一个Bukkit插件。要做到这一点，我们将在类名后立即添加`extends JavaPlugin`来扩展`JavaPlugin`类。修改后的行将如下所示：
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You will see that a squiggly line and a light bulb appear. This will happen
    a lot, and it usually means that you need to import something from the Bukkit
    API. The IDE will do this for you if you ask it to do so. Click on the light bulb
    and import `JavaPlugin` from the Bukkit library, as shown in the following screenshot:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到一条波浪线和一个小灯泡出现。这经常会发生，通常意味着你需要从Bukkit API中导入一些内容。如果你要求IDE这样做，它会为你完成。点击小灯泡并从Bukkit库中导入`JavaPlugin`，如下面的截图所示：
- en: '![The plugin''s main class](img/00022.jpeg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![插件的主类](img/00022.jpeg)'
- en: 'This will automatically add a line of code near the top of your class. Right
    now, you can install this plugin on your server, but it will of course not do
    anything. Let''s program the plugin to broadcast a message to the server once
    it is enabled. This message will show up when the plugin is enabled as we test
    it. To do this, we will override the `onEnable` method. This method is executed
    when the plugin is enabled. Mimic the following code to add the method:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这将自动在类顶部附近添加一行代码。目前，你可以在服务器上安装此插件，但它当然不会做任何事情。让我们编程插件，使其在启用后向服务器广播一条消息。当我们在测试时启用插件时，这条消息将显示出来。为此，我们将重写`onEnable`方法。此方法在插件启用时执行。模仿以下代码以添加方法：
- en: '[PRE3]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You will see another light bulb that will ask you to add the `@Override` annotation.
    Click on it to automatically add the line of code. If you were not prompted to
    add the override annotation, then you may have misspelled something in the method
    header.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到另一个灯泡，它会要求你添加`@Override`注解。点击它以自动添加代码行。如果你没有被提示添加重写注解，那么你可能在该方法标题中拼写错误了。
- en: We now have the base of all of your future plugins.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有了你未来所有插件的基石。
- en: Making and calling new methods
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和调用新方法
- en: 'Let''s create a new method that will broadcast a message to the server. The
    following diagram labels the various parts of a method in case you are not familiar
    with them:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个新的方法，该方法将向服务器广播一条消息。以下图表标注了方法的各个部分，以防你不熟悉它们：
- en: '![Making and calling new methods](img/00023.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![创建和调用新方法](img/00023.jpeg)'
- en: 'Create a new method named `broadcastToServer`. We will place it in the `MyFirstBukkitPlugin`
    class under the `onEnable` method. We only want to call this method from inside
    the `MyFirstBukkitPlugin` class so that the access modifier will be `private`.
    If you want to call this method from other classes in the plugin, you can remove
    the modifier or change it to `public`. The method will not return anything and
    thus will have a return type of `void`. Finally, the method will have one parameter,
    namely a string named `msg`. After creating this second method, your class will
    look like the following code:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`broadcastToServer`的新方法。我们将将其放置在`MyFirstBukkitPlugin`类中的`onEnable`方法下。我们只想在`MyFirstBukkitPlugin`类内部调用此方法，因此访问修饰符将是`private`。如果你想从插件中的其他类调用此方法，你可以移除修饰符或将其更改为`public`。该方法将不返回任何内容，因此将具有`void`返回类型。最后，该方法将有一个名为`msg`的字符串参数。创建此第二个方法后，你的类将看起来像以下代码：
- en: '[PRE4]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Tip
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从你购买的所有Packt Publishing书籍的账户中下载示例代码文件。[http://www.packtpub.com](http://www.packtpub.com)。如果你在其他地方购买了这本书，你可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便将文件直接通过电子邮件发送给你。
- en: 'We will write the code within the body of the new method to accomplish its
    task. We want to broadcast a message to the server. We could call the `getServer`
    method on the plugin. However, for convenience, the `Bukkit` class contains a
    number of server methods in a static context. You may have come across the methods
    that we need when you were going through the `Bukkit` class of the API in the
    previous chapter; if you have not stumbled upon them, browse through the methods
    in the `Bukkit` class at [https://hub.spigotmc.org/javadocs/spigot/index.html?org/bukkit/Bukkit.html](https://hub.spigotmc.org/javadocs/spigot/index.html?org/bukkit/Bukkit.html)
    until you find the `broadcastMessage(String message)` method. We will call the
    `broadcastMessage` method from our own `broadcastToServer` method. In the IDE,
    type `Bukkit`, which is the name of the class, to indicate that you will be accessing
    the `Bukkit` class from a static context. Continue by typing a period (*.*) in
    order to call a method from that class. You will see that a list of available
    methods will appear, and we can simply scroll through them and choose the one
    that we want. This is shown in the following screenshot:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在新方法的主体中编写代码以完成其任务。我们想要向服务器广播一条消息。我们可以调用插件的`getServer`方法。然而，为了方便，`Bukkit`类在静态上下文中包含了许多服务器方法。当你翻阅上一章中的`Bukkit`类API时，你可能已经遇到了这些方法；如果你没有遇到，请在[https://hub.spigotmc.org/javadocs/spigot/index.html?org/bukkit/Bukkit.html](https://hub.spigotmc.org/javadocs/spigot/index.html?org/bukkit/Bukkit.html)中浏览`Bukkit`类的所有方法，直到找到`broadcastMessage(String
    message)`方法。我们将从自己的`broadcastToServer`方法中调用`broadcastMessage`方法。在IDE中，输入`Bukkit`，这是类的名称，以表示你将从静态上下文中访问`Bukkit`类。继续输入一个点(*)以调用该类的方法。你会看到将出现一个可用方法的列表，我们可以简单地滚动它们并选择我们想要的。这将在以下屏幕截图中显示：
- en: '![Making and calling new methods](img/00024.jpeg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![制作和调用新方法](img/00024.jpeg)'
- en: Click to select the `broadcastMessage` method. The API documentation for the
    method will be displayed. Note that to the right of the method, it says **int**.
    This informs us that this method returns an `integer` type value. When you click
    on the **See Also:** link, as shown in the preceding screenshot, the documentation
    will tell us that the number that is returned is the number of players that the
    message was sent to. We don't really care about this number. Therefore, we will
    not assign it to a variable.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 点击选择`broadcastMessage`方法。该方法的API文档将会显示。注意，在方法右侧，它写着**int**。这告诉我们该方法返回一个`整数`类型的数据。当你点击**查看更多**链接，如前一张截图所示，文档会告诉我们返回的数字是消息发送到的玩家数量。我们并不关心这个数字。因此，我们不会将其分配给任何变量。
- en: After selecting the method from the list, the IDE fills the parameters with
    variables that it believes we will use. In this case, it should use `msg` as the
    parameter. If not, simply type `msg` as parameter in `broadcastMessage method`
    This completes the broadcast method. Now, we can call it from the `onEnable` method.
    We will pass the `Hello World!` string as an argument.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 从列表中选择方法后，IDE会填充它认为我们将使用的变量。在这种情况下，它应该使用`msg`作为参数。如果不是，只需在`broadcastMessage方法`中输入`msg`作为参数即可。这完成了广播方法。现在，我们可以从`onEnable`方法中调用它。我们将传递`Hello
    World!`字符串作为参数。
- en: 'Adding this line of code will result in the class containing the following
    code:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 添加这一行代码将导致包含以下代码的类：
- en: '[PRE5]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If we test this plugin, then it will print `Hello World!` once it is enabled.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们测试这个插件，那么一旦启用，它将打印一次`Hello World!`。
- en: Expanding your code
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展你的代码
- en: 'Before testing the code, let''s improve on the `onEnable` method by implementing
    an `if` statement. If there is only one player online, then why not say hello
    to that specific player? We can get a collection of all the players that are online
    by calling `Bukkit.getOnlinePlayers`. If we wish to check whether the size of
    the collection is equal to 1, we can accomplish this by using an `if`/`else` statement.
    This is demonstrated in the following code:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试代码之前，让我们通过实现一个`if`语句来改进`onEnable`方法。如果只有一个玩家在线，为什么不向那个特定的玩家打招呼呢？我们可以通过调用`Bukkit.getOnlinePlayers`来获取所有在线玩家的集合。如果我们想检查集合的大小是否等于1，我们可以通过使用`if`/`else`语句来完成。这在前面的代码中得到了演示：
- en: '[PRE6]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Within the `if` statement, we will now get the first and the only object in
    the collection of players. Once we have it, we can continue by broadcasting `Hello`
    along with the player''s name. After completing the `if` statement, the entire
    class will look like the following code:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在`if`语句中，我们现在将获取玩家集合中的第一个也是唯一的一个对象。一旦我们得到它，我们就可以通过广播`Hello`以及玩家的名字来继续操作。完成`if`语句后，整个类将看起来像以下代码：
- en: '[PRE7]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Tip
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you do not fully understand the `if` statement or the code provided, then
    I suggest that you go to my website to learn the basics of Java, which is a prerequisite
    that was mentioned in the preface of this book.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不完全理解`if`语句或提供的代码，那么我建议您访问我的网站学习Java的基础知识，这是本书前言中提到的先决条件。
- en: Summary
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Your first plugin is complete and ready to be tested on your server. In the
    next chapter, we will install your new plugin, learn how to test it, and discover
    when the `onEnable` method is executed by the server. Now that you are familiar
    with writing and calling methods, you can now create basic plugins. Each plugin
    that you create from now on will always start in a way that is similar to the
    way this one was started, that is, first create a new project and add Bukkit as
    a library then fill out the `plugin.yml` file and finally set up your main class
    as a `JavaPlugin` class with the `onEnable` method.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 您的第一个插件已经完成，并准备好在您的服务器上进行测试。在下一章中，我们将安装您的新插件，学习如何测试它，并了解服务器何时执行`onEnable`方法。现在您已经熟悉了编写和调用方法，您现在可以创建基本的插件。从现在开始，您创建的每个插件都将以类似于这个插件启动的方式开始，也就是说，首先创建一个新的项目，将Bukkit作为库添加，然后填写`plugin.yml`文件，最后将您的主体类设置为具有`onEnable`方法的`JavaPlugin`类。
