["```java\n    <dependency>\n      <groupId>org.junit.jupiter</groupId>\n      <artifactId>junit-jupiter-api</artifactId>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.junit.jupiter</groupId>\n      <artifactId>junit-jupiter-engine</artifactId>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>io.micronaut.test</groupId>\n      <artifactId>micronaut-test-junit5</artifactId>\n      <scope>test</scope>\n    </dependency>\n```", "```java\npublic final class TestUtil {\n    public static <T> void equalsVerifier(Class<T> clazz) \n     throws Exception {\n        T domainObject1 = \n         clazz.getConstructor().newInstance();\n        assertThat(domainObject1.toString()).isNotNull();\n        assertThat(domainObject1).isEqualTo(domainObject1);\n        assertThat(domainObject1.hashCode()).isEqualTo(domainObject1.hashCode());\n        // Test with an instance of another class\n        Object testOtherObject = new Object();\n        assertThat(domainObject1).isNotEqualTo(testOtherObject);\n        assertThat(domainObject1).isNotEqualTo(null);\n        // Test with an instance of the same class\n        T domainObject2 = \n         clazz.getConstructor().newInstance();\n        assertThat(domainObject1).isNotEqualTo(domainObject2);\n        /* HashCodes are equals because the objects are not persisted yet */\n        assertThat(domainObject1.hashCode()).isEqualTo(domainObject2.hashCode());\n    }\n}\n```", "```java\npublic class OwnerTest {\n    @Test\n    public void equalsVerifier() throws Exception {\n        TestUtil.equalsVerifier(Owner.class);\n        Owner owner1 = new Owner();\n        owner1.setId(1L);\n        Owner owner2 = new Owner();\n        owner2.setId(owner1.getId());\n        assertThat(owner1).isEqualTo(owner2);\n        owner2.setId(2L);\n        assertThat(owner1).isNotEqualTo(owner2);\n        owner1.setId(null);\n        assertThat(owner1).isNotEqualTo(owner2);\n    }\n}\n```", "```java\npublic class OwnerMapperTest {\n    private OwnerMapper;\n    @BeforeEach\n    public void setUp() {\n        ownerMapper = new OwnerMapperImpl();\n    }\n    @Test\n    public void testEntityFromId() {\n        Long id = 1L;\n        assertThat(ownerMapper.fromId(id).getId()).\n         isEqualTo(id);\n        assertThat(ownerMapper.fromId(null)).isNull();\n    }\n}\n```", "```java\n@Singleton\npublic class VetServiceImpl implements VetService {\n    private final VetRepository;\n    private final SpecialtyRepository;\n    private final VetMapper;\n    private final SpecialtyMapper;\n    public VetServiceImpl(VetRepository, \n     SpecialtyRepository, VetMapper, SpecialtyMapper \n     specialtyMapper) {\n        this.vetRepository = vetRepository;\n        this.specialtyRepository = specialtyRepository;\n        this.vetMapper = vetMapper;\n        this.specialtyMapper = specialtyMapper;\n    }\n    …\n}\n```", "```java\n@MicronautTest\nclass VetServiceTest {\n    @Inject\n    private VetRepository;\n    @Inject\n    private SpecialtyRepository;\n    @Inject\n    private VetMapper;\n    @Inject\n    private SpecialtyMapper;\n    @Inject\n    private VetService;\n    /** Mock beans */\n    @MockBean(VetRepositoryImpl.class)\n    VetRepository vetRepository() {\n        return mock(VetRepository.class);\n    }\n    @MockBean(SpecialtyRepositoryImpl.class)\n    SpecialtyRepository specialtyRepository() {\n        return mock(SpecialtyRepository.class);\n    }\n    …\n}\n```", "```java\n@Test\npublic void saveVet() throws Exception {\n    // Setup Specialty\n    Long specialtyId = 100L;\n    SpecialtyDTO = createSpecialtyDTO(specialtyId);\n    Specialty = specialtyMapper.toEntity(specialtyDTO);\n    // Setup VetDTO\n    Long vetId = 200L;\n    VetDTO = createVetDTO(vetId);\n    vetDTO.setSpecialties(Set.of(specialtyDTO));\n    Vet = vetMapper.toEntity(vetDTO);\n    // Stubbing\n    when(vetRepository.save(any(Vet.class))).thenReturn\n     (vetId);\n    when(specialtyRepository.findByName(anyString())).\n      thenReturn(specialty);\n    doNothing().when(vetRepository).saveVetSpecialty\n     (anyLong(), anyLong());\n    when(vetRepository.findById(anyLong())).thenReturn\n     (vet);\n    // Execution\n    VetDTO savedVetDTO = vetService.save(vetDTO);\n    verify(vetRepository, times(1)).save(any(Vet.class));\n    verify(specialtyRepository, \n     times(1)).findByName(anyString());\n    verify(vetRepository, times(1)).saveVetSpecialty\n     (anyLong(), anyLong());\n    verify(vetRepository, times(1)).findById(anyLong());\n    assertThat(savedVetDTO).isNotNull();\n    assertThat(savedVetDTO.getId()).isEqualTo(vetId);\n    assertThat(savedVetDTO.getSpecialties()).isNotEmpty();\n    assertThat(savedVetDTO.getSpecialties().size()).\n      isEqualTo(1);\n    assertThat(savedVetDTO.getSpecialties().stream().\n     findFirst().orElse(null).getId()).isEqualTo\n     (specialtyId);\n}\n```", "```java\npublic class SpecialtyServiceImpl implements SpecialtyService {\n    private final SpecialtyRepository;\n    private final SpecialtyMapper;\n    public SpecialtyServiceImpl(SpecialtyRepository \n    specialtyRepository, SpecialtyMapper specialtyMapper) {\n        this.specialtyRepository = specialtyRepository;\n        this.specialtyMapper = specialtyMapper;\n    }\n    …\n}\n```", "```java\n@MicronautTest\nclass SpecialtyServiceTest {\n    @Inject\n    private SpecialtyRepository;\n    @Inject\n    private SpecialtyMapper;\n    @Inject\n    private SpecialtyService;\n    @MockBean(SpecialtyRepositoryImpl.class)\n    SpecialtyRepository specialtyRepository() {\n        return spy(SpecialtyRepository.class);\n    }\n    …\n}\n```", "```java\n@Test\npublic void saveSpecialty() throws Exception {\n    // Setup Specialty\n    Long specialtyId = 100L;\n    SpecialtyDTO = createSpecialtyDTO(specialtyId);\n    Specialty = specialtyMapper.toEntity(specialtyDTO);\n    // Stubbing\n    doReturn(100L).when(specialtyRepository).save(any\n     (Specialty.class));\n    doReturn(specialty).when(specialtyRepository).findById\n     (anyLong());\n    // Execution\n    SpecialtyDTO savedSpecialtyDTO = \n       specialtyService.save(specialtyDTO);\n    verify(specialtyRepository, \n      times(1)).save(any(Specialty.class));\n    verify(specialtyRepository, \n      times(1)).findById(anyLong());\n    assertThat(savedSpecialtyDTO).isNotNull();\n    assertThat(savedSpecialtyDTO.getId()).isEqualTo\n       (specialtyId);\n}\n```", "```java\n@MicronautTest(transactional = false)\n@Property(name = \"micronaut.security.enabled\", value = \"false\")\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\npublic class VetResourceIntegrationTest {\n    @Inject\n    private VetMapper;\n    @Inject\n    private VetRepository;\n    @Inject\n    private SpecialtyRepository;\n    @Inject @Client(\"/\")\n    RxHttpClient client;\n    …\n}\n```", "```java\n@Test\n@Order(1)\npublic void createVet() throws Exception {\n    int databaseSizeBeforeCreate = \n     vetRepository.findAll().size();\n    VetDTO = vetMapper.toDto(vet);\n    // Create the Vet\n    HttpResponse<VetDTO> response = \n     client.exchange(HttpRequest.POST(\"/api/vets\", vetDTO), \n     VetDTO.class).blockingFirst();\n    assertThat(response.status().getCode()).isEqualTo\n      (HttpStatus.CREATED.getCode());\n    // Validate the Vet in the database\n    List<Vet> vetList = (List<Vet>) \n      vetRepository.findAll();\n    assertThat(vetList).hasSize(databaseSizeBeforeCreate + \n     1);\n    Vet testVet = vetList.get(vetList.size() - 1);\n    // Set id for further tests\n    vet.setId(testVet.getId());\n    assertThat(testVet.getFirstName()).isEqualTo\n     (DEFAULT_FIRST_NAME);\n    assertThat(testVet.getLastName()).isEqualTo\n     (DEFAULT_LAST_NAME);\n}\n```", "```java\n@Test\n@Order(3)\npublic void getAllVets() throws Exception {\n    // Get the vetList w/ all the vets\n    List<VetDTO> vets = client.retrieve(HttpRequest.GET\n      (\"/api/vets?eagerload=true\"), \n      Argument.listOf(VetDTO.class)).blockingFirst();\n    VetDTO testVet = vets.get(vets.size() - 1);\n    assertThat(testVet.getFirstName()).isEqualTo\n      (DEFAULT_FIRST_NAME);\n    assertThat(testVet.getLastName()).isEqualTo\n      (DEFAULT_LAST_NAME);\n}\n@Test\n@Order(4)\npublic void getVet() throws Exception {\n    // Get the vet\n    VetDTO testVet = \n      client.retrieve(HttpRequest.GET(\"/api/vets/\" + \n      vet.getId()), VetDTO.class).blockingFirst();\n    assertThat(testVet.getFirstName()).isEqualTo\n      (DEFAULT_FIRST_NAME);\n    assertThat(testVet.getLastName()).isEqualTo\n      (DEFAULT_LAST_NAME);\n}\n```", "```java\n@Test\n@Order(6)\npublic void updateVet() throws Exception {\n    int databaseSizeBeforeUpdate = \n      vetRepository.findAll().size();\n    // Update the vet\n    Vet updatedVet = vetRepository.findById(vet.getId());\n    updatedVet\n        .firstName(UPDATED_FIRST_NAME)\n        .lastName(UPDATED_LAST_NAME);\n    VetDTO updatedVetDTO = vetMapper.toDto(updatedVet);\n    @SuppressWarnings(\"unchecked\")\n    HttpResponse<VetDTO> response = \n     client.exchange(HttpRequest.PUT(\"/api/vets\", \n       updatedVetDTO), VetDTO.class)\n        .onErrorReturn(t -> (HttpResponse<VetDTO>) \n       ((HttpClientResponseException) \n        t).getResponse()).blockingFirst();\n    assertThat(response.status().getCode()).isEqualTo\n      (HttpStatus.OK.getCode());\n    // Validate the Vet in the database\n    List<Vet> vetList = (List<Vet>) \n     vetRepository.findAll();\n    assertThat(vetList).hasSize(databaseSizeBeforeUpdate);\n    Vet testVet = vetList.get(vetList.size() - 1);\n    assertThat(testVet.getFirstName()).isEqualTo\n      (UPDATED_FIRST_NAME);\n    assertThat(testVet.getLastName()).isEqualTo\n      (UPDATED_LAST_NAME);\n}\n```", "```java\n@Test\n@Order(8)\npublic void deleteVet() throws Exception {\n    int databaseSizeBeforeDelete = \n     vetRepository.findAll().size();\n    // Delete the vet\n    @SuppressWarnings(\"unchecked\")\n    HttpResponse<VetDTO> response = \n     client.exchange(HttpRequest.DELETE(\"/api/vets/\"+ \n     vet.getId()), VetDTO.class)\n        .onErrorReturn(t -> (HttpResponse<VetDTO>) \n        ((HttpClientResponseException) \n        t).getResponse()).blockingFirst();\n    assertThat(response.status().getCode()).isEqualTo\n     (HttpStatus.NO_CONTENT.getCode());\n    // Validate the database is now empty\n    List<Vet> vetList = (List<Vet>) \n     vetRepository.findAll();\n    assertThat(vetList).hasSize\n      (databaseSizeBeforeDelete - 1);\n}\n```", "```java\n   <!-- Test containers -->\n    <dependency>\n      <groupId>org.testcontainers</groupId>\n      <artifactId>junit-jupiter</artifactId>\n      <version>1.15.2</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.testcontainers</groupId>\n      <artifactId>mongodb</artifactId>\n      <version>1.15.2</version>\n      <scope>test</scope>\n    </dependency>\n```", "```java\npublic class AbstractContainerBaseTest {\n    public static final MongoDBContainer \n     MONGO_DB_CONTAINER;\n    static {\n        MONGO_DB_CONTAINER = new MongoDBContainer\n          (DockerImageName.parse(\"mongo:4.0.10\"));\n        MONGO_DB_CONTAINER.start();\n    }\n}\n```", "```java\n@Testcontainers\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\nclass VetReviewRepositoryIntegrationTest extends AbstractContainerBaseTest {\n    private VetReviewRepository;\n    @BeforeAll\n    void init() {\n        ApplicationContext context = \n         ApplicationContext.run(\n            PropertySource.of(\"test\", Map.of\n             (\"mongodb.uri\", \n             MONGO_DB_CONTAINER.getReplicaSetUrl()))\n        );\n        vetReviewRepository = \n         context.getBean(VetReviewRepository.class);\n    }\n    @BeforeEach\n    public void initTest() {\n        if (!MONGO_DB_CONTAINER.isRunning()) {\n            MONGO_DB_CONTAINER.start();\n        }\n    }\n    …\n}\n```", "```java\n@Test\n@Order(1)\npublic void saveVetReview() {\n    VetReview = new VetReview();\n    String reviewId = UUID.randomUUID().toString();\n    vetReview.setReviewId(reviewId);\n    vetReview.setVetId(1L);\n    vetReview.setRating(3D);\n    vetReview.setDateAdded(LocalDate.now());\n    vetReview.setComment(\"Good vet\");\n    vetReviewRepository.save(vetReview);\n    VetReview savedVetReview = \n       vetReviewRepository.findByReviewId(reviewId);\n    assertThat(savedVetReview).isNotNull();\n    assertThat(savedVetReview.getReviewId()).isEqualTo\n       (reviewId);\n}\n```"]