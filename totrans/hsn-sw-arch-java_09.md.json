["```java\n    /bin/standalone.sh\n    ```", "```java\n    ./jboss-cli.sh --connect\n    ```", "```java\n    deploy /pathToArtifact/myArtifact.war\n    ```", "```java\n    exit\n    ```", "```java\n@GET\n@Path(\"/serverSentExample \")\n@Produces(MediaType.SERVER_SENT_EVENTS)\npublic void serverSentExample(@Context SseEventSink \n  sseEventSink, @Context Sse sse)\n```", "```java\nOutboundSseEvent event = sse.newEventBuilder()\n.mediaType(MediaType.APPLICATION_JSON_TYPE)\n.data(MyEventData.class, myEventData)\n.build();\neventSink.send(event);\n...\neventSink.close();\n```", "```java\n     @GET\n  @Path(\"broadcast\")\n  public Response broadcast(@Context Sse sse) {\n    SseBroadcaster sseb = sse.newBroadcaster();\n    OutboundSseEvent event = sse.newEventBuilder()\n    .mediaType(MediaType.APPLICATION_JSON_TYPE)\n    .data(MyEventData.class, myEventData)\n    .build();\n    sseb.broadcast(event);  \n    ... \n}\n@GET\n    @Path(\"subscribe\")\n    @Produces(MediaType.SERVER_SENT_EVENTS)\n    public void subscribe(@Context SseEventSink \n      sseEventSink){\n         broadcaster = sse.newBroadcaster();\n    broadcaster.register(sseEventSink);\n    }\n```", "```java\nvar source = new EventSource('mySSEEndpoint');\nsource.onmessage = function(e) { ... do something...}\n```", "```java\nClient client = ClientBuilder.newBuilder().build();\nWebTarget target = client.target(\"mySSEBroadcastEndpoint\");\nSseEventSource source = \n  SseEventSource.target(target).build();\nsource.register(event -> { ... do something ... });\nsseEventSource.open();\n```", "```java\n@ServerEndpoint(\"/myWebSocket\")\npublic class WebSocketEndpoint {\n    @OnMessage\n    public String onMessage(String message) {\n        System.out.println(\"Message received: \"+ message);\n        return message;\n    }\n     @OnOpen\n  public void onOpen(Session session) {\n    System.out.println(\"Client connected\");\n//Session object can be stored and used to send messages \n  back\n  }\n\n  @OnClose\n  public void onClose() {\n    System.out.println(\"Connection closed\");\n  }\n    @OnError\n    public void onError(Session session, Throwable \n      throwable)\n    {\n        System.out.println(\"Error in session \" + \n          session.getId() + \" \" + throwable.getMessage());\n    }\n}\n```", "```java\n@Resource(mappedName = \"java:jboss/jms/queue/testQueue\")\nprivate Queue testQueue;\n@Inject\nJMSContext context;\n...\ncontext.createProducer().send(testQueue,msg);     \n...\n```", "```java\n@MessageDriven(name = \"TestMDB\", activationConfig = {\n  @ActivationConfigProperty(propertyName = \n   \"destinationLookup\", propertyValue = \"queue/TestQueue\"),\n  @ActivationConfigProperty(propertyName = \n    \"destinationType\", propertyValue = \"javax.jms.Queue\")})\npublic class TestMDB implements MessageListener {\n    public void onMessage(Message msg) {\n        TextMessage myMsg =(TextMessage) rcvMessage;\n          LOGGER.info(\"Received Message \" + myMsg\n            .getText());\n```", "```java\n@Entity\n@Table(name=\"MyTableName\")\npublic class MyPojo {\n@Id\n@GeneratedValue(strategy = GenerationType.IDENTITY)\nprivate int id;\n@Column(name=\"myColumn\")\nprivate String myField;\n...\n```", "```java\n@PersistenceContext(unitName=\"userDatabase\")\nprivate EntityManager em;\nQuery query = em.createQuery(\"Select p from MyPojo p\");\n(List<MyPojo>) query.getResultList();\nem.getTransaction().begin();\n        MyPojo pojo = new MyPojo();\n        pojo.setMyField (\"This is a test\");\n        em.persist(pojo);\nem.getTransaction().commit();\nem.close();\n...\n```", "```java\n    mvn io.quarkus:quarkus-maven plugin:1.12.2.Final\n    :create\n    ```", "```java\n    ./mvnw compile quarkus:dev\n    ```", "```java\nmvn clean package\n```", "```java\njava -jar ./quarkus-app/quarkus-run.jar\n```", "```java\nmvn clean package -Dquarkus.package.uber-jar=true\n```", "```java\n./mvnw package –Pnative\n```", "```java\n@ConfigProperty(name = \"test.myProperty\", \n  defaultValue=\"myDefault\") \nString myProperty;\n```", "```java\n%{profile}.mykey=value\n```", "```java\n./mvnw quarkus:add-extension -\n  Dextensions=\"io.quarkus:quarkus-resteasy\"\n```", "```java\n./mvnw quarkus:add-extension -Dextensions=\"undertow-\n  websockets\"\n```", "```java\n@Inject\nConnectionFactory connectionFactory;\n...\nJMSContext context = connectionFactory.\n  createContext(Session.AUTO_ACKNOWLEDGE)\ncontext.createProducer().send(context.createQueue(\"test\"),\"\n  myTestMessage\");\n```", "```java\nJMSContext context = connectionFactory.\n  createContext(Session.AUTO_ACKNOWLEDGE)) {\nJMSConsumer consumer = context.createConsumer\n  (context.createQueue(\"test\"));\nwhile (true) {\n      Message message = consumer.receive();\n      message.getBody(String.class);\n}\n```", "```java\n@Entity\npublic class MyPojo extends PanacheEntity {\n@Id\nprivate int id;\nprivate String myField;\n...\nMyPojo pojo = new MyPojo(); \n        pojo.setMyField (\"This is a test\"); \n        pojo.persist();\nMyPojo anotherPojo = MyPojo.findById(someId);\n```", "```java\n@Entity\npublic class MyPojo{\n@Id\nprivate int id;\nprivate String myField;\n...\npublic class MyPojoRepository implements \n  PanacheRepository<MyPojo> {\n   public Person findByMyField(String myField){\n       return find(\"myField\", myField).firstResult();\n   }\n...\n@Inject\nMyPojoRepository myPojoRepository;\nMyPojo pojo = new MyPojo(); \n        pojo.setMyField (\"This is a test\"); \n        myPojoRepository.persist(pojo);\nMyPojo anotherPojo = myPojoRepository.findById(someId);\n```", "```java\nCREATE TABLE payment ( \n   id  uuid default random_uuid() primary key,\n   date DATE  NOT NULL, \n   currency VARCHAR(20) NOT NULL, \n   sender  uuid NOT NULL, \n   recipient  uuid NOT NULL, \n   signature VARCHAR(50) NOT NULL, \n   amount DECIMAL  NOT NULL\n);\n```", "```java\njdbc:h2:tcp://localhost/~/test\n```", "```java\n@Entity\npublic class Payment {\n   @Id\n  private String id; \n  private Date date;\n  private String currency;\n  private String sender;\n  private String recipient;\n  private String signature;\n  private float amount;\n...\n```", "```java\n@PersistenceContext(unitName = \"hosawjPersistenceUnit\")\n    private EntityManager em;\n     public Payment create(Payment payment)\n    {\n        em.persist(payment);\n        return payment;\n    }\n    public Payment find(String id)\n    {\n        Payment payment=em.find(Payment.class, id);\n        return payment;\n    }\n```", "```java\n@Path(\"/payments\")\n@Consumes(MediaType.APPLICATION_JSON)\n@Produces(MediaType.APPLICATION_JSON)\npublic class PaymentResource {\n   @Inject\n    PaymentRepository repository;\n    @GET\n    @Path(\"/find/{id}\")\n    public Response find(@PathParam(\"id\") String id) {\n        Payment payment=repository.find(id);\n        if(payment==null)\n            throw new WebApplicationException\n              (Response.Status.NOT_FOUND);\n        else    \n         return Response.ok(payment).build();\n    }\n@POST\n    @Path(\"/create\")\n    public Response create(Payment payment) {\n        return Response.ok(repository.create(payment))\n          .build();\n    }\n```", "```java\n@ApplicationPath(\"rest\")\npublic class RestApplication extends Application\n...\n```", "```java\njava:jboss/datasources/ExampleDS\n```", "```java\n<property name=\"hibernate.dialect\" \n  value=\"org.hibernate.dialect.H2Dialect\" />\n```", "```java\ncurl -X POST -H 'Content-Type:application/json' \n-d '{\"id\":\"1ef43029-f1eb-4dd8-85c4-1c332b69173c\", \n\"date\":1616504158091, \"currency\":\"EUR\", \"sender\":\"giuseppe@\ntest.it\", \"recipient\":\"stefano@domain.com\", \n\"signature\":\"169e8dbf-90b0-4b45-b0f9-97789d66dee7\", \n\"amount\":100.0}'  http://127.0.0.1:8080/hosawj/rest/payments/\ncreate\n```", "```java\ncurl -H 'Content-Type:application/json' http://127.0.0.1:8080/\nhosawj/rest/payments/find/1ef43029-f1eb-4dd8-85c4-1c332b69173c\n```", "```java\nmvn io.quarkus:quarkus-maven-plugin:1.12.2.Final:create \n-DprojectGroupId=it.test -DprojectArtifactId=hosawj \n-DclassName=\"it.test.rest.PaymentResource.java\" -Dpath=\"/\npayments\" -Dextensions=\"io.quarkus:quarkus-resteasy\",\"io.\nquarkus:quarkus-resteasy-jackson\",\"io.quarkus:quarkus-\nhibernate-orm-panache\",\"io.quarkus:quarkus-jdbc-h2\"\n```", "```java\nquarkus.datasource.db-kind=h2 \nquarkus.datasource.jdbc.url=jdbc:h2:tcp://localhost/~/test;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE\nquarkus.datasource.username=sa\nquarkus.hibernate-orm.database.generation=drop-and-create \nquarkus.hibernate-orm.packages=it.test.model\n```", "```java\n./mvnw clean compile quarkus:dev\n```", "```java\n./mvnw quarkus:add-extension -Dextensions=\"quarkus-smallrye-\nopenapi\"\n```", "```java\n127.0.0.1:8080/q/openapi\n```", "```java\n127.0.0.1:8080/q/swagger-ui/\n```", "```java\n@ApplicationScoped\npublic class PaymentRepository implements \n  PanacheRepository<Payment>{\n    private Logger log =\n      Logger.getLogger(this.getClass().getName());\n     @Transactional\n    public Payment create(Payment payment)\n    {\n        log.info(\"Persisting \" + payment );\n        persist(payment);\n        return payment;\n    }\n        public Payment find(String id)\n    {\n        log.info(\"Looking for \" + id );\n        Payment payment=find(\"id\", id).firstResult();\n        log.info(\"Found \" + payment );\n        return payment;\n    }\n```"]