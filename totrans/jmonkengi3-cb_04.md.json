["```java\n    public enum Animation{\n      Idle(LoopMode.Loop, 0.2f),\n      Walk(LoopMode.Loop, 0.2f),\n      Run(LoopMode.Loop, 0.2f),\n      ...\n      SideKick(LoopMode.DontLoop, 0.1f);\n\n      Animation(LoopMode loopMode, float blendTime){\n        this.loopMode = loopMode;\n        this.blendTime = blendTime;\n      }\n      LoopMode loopMode;\n      float blendTime;\n    }\n    ```", "```java\n    public void setSpatial(Spatial spatial) {\n      super.setSpatial(spatial);\n      animControl = spatial.getControl(AnimControl.class);\n      mainChannel = animControl.createChannel();\n      animControl.addListener(this);\n    }\n    ```", "```java\n    public void setAnimation(Animation animation) {\n      if(mainChannel.getAnimationName() == null || !mainChannel.getAnimationName().equals(animation.name())){\n        mainChannel.setAnim(animation.name(), animation.blendTime);\n        mainChannel.setLoopMode(animation.loopMode);\n      }\n    }\n    ```", "```java\n    public void onAnimCycleDone(AnimControl control, AnimChannel channel, String animName) {\n      if(channel.getLoopMode() == LoopMode.DontLoop){\n        Animation newAnim = Animation.Idle;\n        Animation anim = Animation.valueOf(animName);\n        switch(anim){\n          case JumpStart:\n            newAnim = Animation.Jumping;\n            break;\n        }\n        setAnimation(newAnim);\n      }\n    }\n    ```", "```java\n    jaime.addControl(new AnimationManagerControl());\n    ```", "```java\n    public enum Channel{\n      Upper, Lower, All,\n    }\n    ```", "```java\n    public void setSpatial(Spatial spatial) {\n    super.setSpatial(spatial);\n      animControl = spatial.getControl(AnimControl.class);\n      upperChannel = animControl.createChannel();\n      lowerChannel = animControl.createChannel();\n      upperChannel.addFromRootBone(\"spine\");\n      lowerChannel.addBone(\"Root\");\n      lowerChannel.addFromRootBone(\"pelvis\");\n    ```", "```java\n    animControl.addListener(this);\n    ```", "```java\n    public void setAnimation(Animation animation, Channel channel){\n      switch(channel){\n        case Upper:\n          setAnimation(animation, upperChannel);\n          break;\n        ...\n      }\n    }\n    ```", "```java\n    public void onAction(String name, boolean isPressed, float tpf) {\n      if (name.equals(\"StrafeLeft\")) {\n        leftStrafe = isPressed;\n      }\n      ...\n      } else if (name.equals(\"Jump\") && isPressed) {\n        jumpStarted = true;\n        setAnimation(Animation.JumpStart);\n      }\n      if(jumpStarted || firing){\n        // Do nothing\n      } else if(forward || backward || rightStrafe || leftStrafe)  {\n        setAnimation(Animation.Walk);\n      } else {\n        setAnimation(Animation.Idle);\n      }\n    }\n    ```", "```java\n    public void onAction(String name, boolean isPressed, float tpf) {\n      if (name.equals(\"Anim1\") && isPressed) {\n        jaime.getControl(AnimationChannelsControl.class)\n    .setAnimation(Animation.Walk, Channel.All);\n      }\n    ...\n    }\n    ```", "```java\n    public void onAction(String binding, boolean value, float tpf) {\n      if (binding.equals(\"Jump\") && value) {\n        jumpStarted = true;\n        setAnimation(Animation.JumpStart);\n      }\n    }\n    ```", "```java\n    public void onAnimCycleDone(AnimControl control, AnimChannel channel, String animName) {\n      if(channel.getLoopMode() == LoopMode.DontLoop){\n        Animation newAnim = Animation.Idle;\n        Animation anim = Animation.valueOf(animName);\n        switch(anim){\n          case JumpStart:\n            newAnim = Animation.Jumping;\n            inAir = true;\n            break;\n        }\n        setAnimation(newAnim, channel);\n      }\n    }\n    ```", "```java\n    protected void controlUpdate(float tpf) {\n      if(inAir){\n        BetterCharacterControl charControl =spatial.getControl(BetterCharacterControl.class);\n        if(charControl != null && charControl.isOnGround()){\n          setAnimation(Animation.Idle);\n          jumpStarted = false;\n          inAir = false;\n        }\n      }\n    }\n    ```", "```java\n    public void setSpatial(Spatial spatial) {\n      super.setSpatial(spatial);\n      Bone spine = spatial.getControl(SkeletonControl.class).getSkeleton().getBone(\"spine\");\n      if(spine != null){\n        leaningBone = spine;\n        boneRotation = leaningBone.getLocalRotation().clone();\n      }\n    }\n    ```", "```java\n    protected void controlUpdate(float tpf) {\n      if(leanLeft && leanValue < maxLean){\n        leanValue += 0.5f * tpf;\n      } else if(!leanFree && leanValue > 0f){\n        leanValue -= 0.5f * tpf;\n      }\n      [mirror for right]\n      if(leanValue < 0.005f && leanValue > -0.005f){\n        leanValue = 0f;\n      }\n      if(leanValue != 0f){\n        lean(leanValue);\n      } else {\n        leaningBone.setUserControl(false);\n      }\n    }\n    ```", "```java\n    private void lean(float value){\n      FastMath.clamp(value, -maxLean, maxLean);\n\n      leaningBone.setUserControl(true);\n      Quaternion newQuat = boneRotation.add(new   Quaternion().fromAngles(-FastMath.QUARTER_PI * 0.35f, 0, -value));\n      newQuat.normalizeLocal();\n      leaningBone.setLocalRotation(newQuat);\n    }\n    ```", "```java\n    public enum PhonemeMouth{\n      AAAH, EEE, I, OH, OOOH, FUH, MMM, LUH, ESS, RESET;\n    };\n    ```", "```java\n    public enum ExpressionEyes{\n      NEUTRAL, HAPPY, ANGRY;\n    };\n    ```", "```java\n    mouthChannel = animControl.createChannel();\n    mouthChannel.addBone(\"LipSide.L\");\n    ...\n    ```", "```java\n    public void setPhoneme(PhonemeMouth p){\n      mouthChannel.setAnim(\"Phoneme_\" + p.name(), 0.2f);\n    }\n    public void setExpression(ExpressionEyes e){\n      eyeBrowChannel.setAnim(\"Expression_\" + e.name(), 0.2f);\n    }\n    ```", "```java\npublic void setupHelloCinematic() {\n  cinematicHello = new Cinematic((Node)jaime, 1f);\n  stateManager.attach(cinematicHello);\n  cinematicHello.addCinematicEvent(0.0f, new AnimationEvent(jaime, \"Expression_HAPPY\", LoopMode.Cycle, 2, 0.2f));\n  cinematicHello.addCinematicEvent(0.1f, new AnimationEvent(jaime, \"Phoneme_EEE\", LoopMode.Cycle, 1, 0.1f));\n  cinematicHello.addCinematicEvent(0.2f, new AnimationEvent(jaime, \"Phoneme_LUH\", LoopMode.Cycle, 1, 0.1f));\n  cinematicHello.addCinematicEvent(0.3f, new AnimationEvent(jaime, \"Phoneme_OOOH\", LoopMode.Cycle, 1, 0.1f));\n  cinematicHello.addCinematicEvent(0.7f, new AnimationEvent(jaime, \"Phoneme_RESET\", LoopMode.Cycle, 1, 0.2f));\n\n  cinematicHello.setSpeed(1.0f);\n  cinematicHello.setLoopMode(LoopMode.DontLoop);\n  cinematicHello.play();\n}\n```", "```java\n    if(enabled && lookAtObject != null){\n      leftEye.setUserControl(true);\n      rightEye.setUserControl(true);\n    ```", "```java\n    focusPoint.set(lookAtObject.getWorldTranslation().subtract(getSpatial().getWorldTranslation()));\n    ```", "```java\n    Vector3f eyePos = leftEye.getModelSpacePosition();\n    Vector3f direction = eyePos.subtract(focusPoint).negateLocal();\n    ```", "```java\n    Quaternion q = new Quaternion();\n    q.lookAt(direction, Vector3f.UNIT_Y);\n    q.addLocal(offsetQuat);\n    q.normalizeLocal();\n    ```", "```java\n    leftEye.setUserTransformsWorld(leftEye.getModelSpacePosition(), q);\n    rightEye.setUserTransformsWorld(rightEye.getModelSpacePosition(), q);\n    leftEye.setUserControl(false);\n    rightEye.setUserControl(false);\n    ```", "```java\nprivate float flickerTime = 0f;\nprivate float flickerAmount = 0.2f;\nprivate Vector3f flickerDirection = new Vector3f();\n```", "```java\nflickerTime += tpf * FastMath.nextRandomFloat();\nif(flickerTime > 0.5f){\n  flickerTime = 0;\n  flickerDirection.set(FastMath.nextRandomFloat() * flickerAmount, FastMath.nextRandomFloat() * flickerAmount, 0);\n}\ndirection.addLocal(flickerDirection);\n```", "```java\n    private Ray[] rays = new Ray[9];\n    private float okDistance = 0.3f;\n    private Spatial world;\n    private boolean nearEdge;\n    ```", "```java\n    for(int i = 0; i < 9; i++){\n      rays[i] = new Ray();\n      rays[i].setDirection(Vector3f.UNIT_Y.negate());\n    }\n    ```", "```java\n    Vector3f origo = getSpatial().getWorldTranslation();\n    rays[0].setOrigin(origo);\n    ```", "```java\n    float angle;\n    for(int i = 1; i < 9; i++){\n      float x = FastMath.cos(angle);\n      float z = FastMath.sin(angle);\n      rays[i].setOrigin(origo.add(x * 0.5f, 0, z * 0.5f));\n\n      collision = checkCollision(rays[i]);\n      if(!collision){\n        break;\n      }\n      angle += FastMath.QUARTER_PI;\n    }\n    private boolean checkCollision(Ray r){\n      CollisionResults collResuls = new CollisionResults();\n      world.collideWith(r, collResuls);\n      if(collResuls.size() > 0 && r.getOrigin().distance(collResuls.getClosestCollision().getContactPoint()) > okDistance){\n        return true;\n      }\n      return false;\n    }\n    ```", "```java\n    if(!collision && !nearEdge){\n      nearEdge = true; spatial.getControl(AnimationManagerControl.class).onAction(\"NearEdge\", true, 0);\n    } else if(collision && nearEdge){\n      nearEdge = false;  spatial.getControl(AnimationManagerControl.class).onAction(\"NearEdge\", false, 0);\n    }\n    ```", "```java\n    if (binding.equals(\"NearEdge\")) {\n      nearEdge = value;\n      if(nearEdge){\n        setAnimation(Animation.Jumping, Channel.Upper);\n      }\n    }\n    ```", "```java\n    setupJaime(spatial.getControl(KinematicRagdollControl.class));    spatial.getControl(KinematicRagdollControl.class).setIKThreshold(0.01f); spatial.getControl(KinematicRagdollControl.class).setLimbDampening(0.9f); spatial.getControl(KinematicRagdollControl.class).setIkRotSpeed(18);\n    ```", "```java\n    public void sampleTargetPositions(){\n      float offset = -1.9f;\n      for(Bone bone: targets){\n        Vector3f targetPosition = bone.getModelSpacePosition().add(spatial.getWorldTranslation());\n        CollisionResult closestResult = contactPointForBone(targetPosition, offset);\n        if(closestResult != null){\n                    spatial.getControl(KinematicRagdollControl.class).setIKTarget(bone, closestResult.getContactPoint().addLocal(0, 0.05f, 0), 2);\n        }\n      }\n    ```", "```java\n    spatial.getControl(KinematicRagdollControl.class).setIKMode();\n    ```", "```java\n    if(enabled){\n      sampleTargetPositions();\n    } else {\n                spatial.getControl(KinematicRagdollControl.class).removeAllIKTargets();\n                spatial.getControl(KinematicRagdollControl.class).setKinematicMode();\n    }\n    ```"]