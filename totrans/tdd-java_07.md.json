["```java\n@Test\npublic void oneIncorrectLetter() {\n    var word = new Word(\"A\");\n    var score = word.guess(\"Z\");\n    assertThat( score.letter(0) ).isEqualTo(Letter.INCORRECT);\n}\n```", "```java\npublic class Shapes {\n    private final List<Shape> allShapes = new ArrayList<>();\n    public void add(Shape s) {\n        allShapes.add(s);\n    }\n    public void draw(Graphics g) {\n        for (Shape s : allShapes) {\n            switch (s.getType()) {\n                case \"textbox\":\n                    var t = (TextBox) s;\ng.drawText(t.getText());\n                    break;\n                case \"rectangle\":\n                    var r = (Rectangle) s;\n                    for (int row = 0;\n                          row < r.getHeight();\n                          row++) {\n                        g.drawLine(0, r.getWidth());\n                    }\n            }\n        }\n    }\n}\n```", "```java\npackage shapes;\nimport java.util.ArrayList;\nimport java.util.List;\npublic class Shapes {\n    private final List<Shape> allShapes = new ArrayList<>();\n    public void add(Shape s) {\n        allShapes.add(s);\n    }\n    public void draw(Graphics g) {\n        for (Shape s : allShapes) {\n            switch (s.getType()) {\n                case \"textbox\":\n                    var t = (TextBox) s;\n                    t.draw(g);\n                    break;\n                case \"rectangle\":\n                    var r = (Rectangle) s;\n                    r.draw(g);\n            }\n        }\n    }\n}\n```", "```java\npublic class Rectangle {\n    private final int width;\n    private final int height;\n    public Rectangle(int width, int height){\n        this.width = width;\n        this.height = height;\n    }\n    public void draw(Graphics g) {\n        for (int row=0; row < height; row++) {\n            g.drawHorizontalLine(width);\n        }\n    }\n}\n```", "```java\npackage shapes;\nimport java.util.ArrayList;\nimport java.util.List;\npublic class Shapes {\n    private final List<Shape> allShapes = new ArrayList<>();\n    public void add(Shape s) {\n        allShapes.add(s);\n    }\n    public void draw(Graphics g) {\n        for (Shape s : allShapes) {\n            switch (s.getType()) {\n                case \"textbox\":\n                    var t = (TextBox) s;\n                    t.draw(g);\n                    break;\n                case \"rectangle\":\n                    var r = (Rectangle) s;\n                    r.draw(g);\n            }\n        }\n    }\n}\n```", "```java\npackage shapes;\npublic interface Shape {\n    void draw(Graphics g);\n}\n```", "```java\npublic class Rectangle implements Shape {\n    private final int width;\n    private final int height;\n    public Rectangle(int width, int height){\n        this.width = width;\n        this.height = height;\n    }\n    @Override\n    public void draw(Graphics g) {\n        for (int row=0; row < height; row++) {\n            g.drawHorizontalLine(width);\n        }\n    }\n}\n```", "```java\npublic class Shapes {\n    private final List<Shape> all = new ArrayList<>();\n    public void add(Shape s) {\n        all.add(s);\n    }\n    public void draw(Graphics graphics) {\n        all.forEach(shape->shape.draw(graphics));\n    }\n}\n```", "```java\npublic class Shapes {\n    private final List<Shape> all = new ArrayList<>();\n    private final Graphics graphics;\n    public Shapes(Graphics graphics) {\nthis.graphics = graphics;\n    }\n    public void add(Shape s) {\n        all.add(s);\n    }\n    public void draw() {\n        all.forEach(shape->shape.draw(graphics));\n    }\n}\n```", "```java\npublic class MaliciousShape implements Shape {\n    @Override\n    public void draw(Graphics g) {\n        try {\n            String[] deleteEverything = {\"rm\", \"-Rf\", \"*\"};\n            Runtime.getRuntime().exec(deleteEverything,null);\n            g.drawText(\"Nothing to see here...\");\n        } catch (Exception ex) {\n            // No action\n        }\n    }\n}\n```", "```java\npublic class TextBox implements Shape {\n    private final String text;\n    public TextBox(String text) {\n        this.text = text;\n    }\n    @Override\n    public void draw(Graphics g) {\n        g.drawText(text);\n    }\n}\n```", "```java\npublic class Shapes {\n    private final List<Shape> allShapes = new ArrayList<>();\n    public void add(Shape s) {\n        allShapes.add(s);\n    }\n    public void draw(Graphics g) {\n        for (Shape s : allShapes) {\n            switch (s.getType()) {\n                case \"textbox\":\n                    var t = (TextBox) s;\n                    g.drawText(t.getText());\n                    break;\n                case \"rectangle\":\n                    var r = (Rectangle) s;\n                    for (int row = 0;\n                          row < r.getHeight();\n                          row++) {\n                        g.drawLine(0, r.getWidth());\n                    }\n            }\n        }\n    }\n}\n```", "```java\npublic class Shapes {\n    private final List<Shape> all = new ArrayList<>();\n    private final Graphics graphics;\n    public Shapes(Graphics graphics) {\n        this.graphics = graphics;\n    }\n    public void add(Shape s) {\n        all.add(s);\n    }\n    public void draw() {\n        all.forEach(shape->shape.draw(graphics));\n    }\n}\n```", "```java\npublic class RightArrow implements Shape {\n  public void draw(Graphics g) {\n    g.drawText( \"   \\\" );\n    g.drawText( \"-----\" );\n    g.drawText( \"   /\" );\n  }\n}\n```", "```java\npackage shapes;\npublic class ShapesExample {\n    public static void main(String[] args) {\n        new ShapesExample().run();\n    }\n    private void run() {\n        Graphics console = new ConsoleGraphics();\n        var shapes = new Shapes(console);\n        shapes.add(new TextBox(\"Hello!\"));\n        shapes.add(new Rectangle(32,1));\n        shapes.add(new RightArrow());\n        shapes.draw();\n    }\n}\n```", "```java\ninterface Shape {\n  void draw(Graphics g);\n}\n```", "```java\npublic interface Graphics {\n    void drawText(String text);\n    void drawHorizontalLine(int width);\n}\n```", "```java\npublic class ConsoleGraphics implements Graphics {\n    @Override\n    public void drawText(String text) {\n        print(text);\n    }\n    @Override\n    public void drawHorizontalLine(int width) {\n        var rowText = new StringBuilder();\n        for (int i = 0; i < width; i++) {\n            rowText.append('X');\n        }\n        print(rowText.toString());\n    }\n    private void print(String text) {\n        System.out.println(text);\n    }\n}\n```"]