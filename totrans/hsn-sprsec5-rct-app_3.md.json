["```java\n<!-- SAML2 -->\n<dependency>\n   <groupId>org.springframework.security.extensions</groupId>\n   <artifactId>spring-security-saml2-core</artifactId>\n   <version>1.0.3.RELEASE</version>\n</dependency>\n<dependency>\n   <groupId>org.springframework.security.extensions</groupId>\n   <artifactId>spring-security-saml-dsl-core</artifactId>\n   <version>1.0.5.RELEASE</version>\n</dependency>\n```", "```java\nserver:\n port: 8443\n ssl:\n   enabled: true\n   key-alias: spring\n   key-store: src/main/resources/saml/keystore.jks\n   key-store-password: secret\n\nsecurity:\n saml2:\n   metadata-url: https://dev-858930.oktapreview.com/app/exkequgfgcSQUrK1N0h7/sso/saml/metadata\n\nspring:\n mvc:\n   view:\n     prefix: /WEB-INF/views/\n     suffix: .jsp\n```", "```java\n@EnableWebSecurity\n@Configuration\n@EnableGlobalMethodSecurity(securedEnabled = true)\npublic class SpringSecurityConfig extends WebSecurityConfigurerAdapter {\n\n   @Value(\"${security.saml2.metadata-url}\")\n   String metadataUrl;\n\n   @Override\n   protected void configure(HttpSecurity http) throws Exception {\n      http\n               .authorizeRequests()\n               .antMatchers(\"/saml/**\").permitAll()\n               .anyRequest().authenticated()\n               .and()\n               .apply(saml())\n               .serviceProvider()\n               .keyStore()\n               .storeFilePath(\"saml/keystore.jks\")\n               .password(\"secret\")\n               .keyname(\"spring\")\n               .keyPassword(\"secret\")\n               .and()\n               .protocol(\"https\")\n               .hostname(\"localhost:8443\")\n               .basePath(\"/\")\n               .and()\n               .identityProvider()\n               .metadataFilePath(metadataUrl)\n               .and();\n   }\n}\n```", "```java\nkeytool -genkey -v -keystore keystore.jks -alias spring -keyalg RSA -keysize 2048 -validity 10000\n```", "```java\nmvn spring-boot:run\n```", "```java\n<!-- LDAP -->\n<dependency>\n   <groupId>org.springframework</groupId>\n   <artifactId>spring-tx</artifactId>\n</dependency>\n<dependency>\n   <groupId>org.springframework.ldap</groupId>\n   <artifactId>spring-ldap-core</artifactId>\n</dependency>\n<dependency>\n   <groupId>org.springframework.security</groupId>\n   <artifactId>spring-security-ldap</artifactId>\n</dependency>\n<dependency>\n   <groupId>com.unboundid</groupId>\n   <artifactId>unboundid-ldapsdk</artifactId>\n</dependency>\n```", "```java\n@EnableWebSecurity\n@Configuration\n@EnableGlobalMethodSecurity(securedEnabled = true)\npublic class SpringSecurityConfig extends WebSecurityConfigurerAdapter {\n   private static final Logger LOG = \n                LoggerFactory.getLogger(SpringSecurityConfig.class);\n   @Override\n   protected void configure(HttpSecurity http) throws Exception {\n       http.authorizeRequests()    .antMatchers(\"/admins\").hasRole(\"ADMINS\")\n               .antMatchers(\"/users\").hasRole(\"USERS\")\n               .anyRequest().fullyAuthenticated()\n               .and()\n               .httpBasic(); // Use Basic authentication\n   }\n   @Override\n   public void configure(AuthenticationManagerBuilder auth) throws Exception {\n       auth\n               .ldapAuthentication()\n               .userDnPatterns(\"uid={0},ou=people\")\n               .userSearchBase(\"ou=people\")\n               .userSearchFilter(\"uid={0}\")\n               .groupSearchBase(\"ou=groups\")\n               .groupSearchFilter(\"uniqueMember={0}\")\n               .contextSource(contextSource())\n               .passwordCompare()\n               .passwordAttribute(\"userPassword\");\n   }\n   @Bean\n   public DefaultSpringSecurityContextSource contextSource() {\n       LOG.info(\"Inside configuring embedded LDAP server\");\n       DefaultSpringSecurityContextSource contextSource = new \n               DefaultSpringSecurityContextSource(\n               Arrays.asList(\"ldap://localhost:8389/\"), \"dc=packtpub,dc=com\");\n       contextSource.afterPropertiesSet();\n       return contextSource;\n   }\n}\n```", "```java\nspring:\n ldap:\n   # Embedded Spring LDAP\n   embedded:\n     base-dn: dc=packtpub,dc=com\n     credential:\n       username: uid=admin\n       password: secret\n     ldif: classpath:ldap/ldapschema.ldif\n     port: 8389\n     validation:\n       enabled: false\n mvc:\n   view:\n     prefix: /WEB-INF/views/\n     suffix: .jsp\n```", "```java\ndn: dc=packtpub,dc=com\nobjectclass: top\nobjectclass: domain\nobjectclass: extensibleObject\ndc: packtpub\n\ndn: ou=groups,dc=packtpub,dc=com\nobjectclass: top\nobjectclass: organizationalUnit\nou: groups\n\ndn: ou=people,dc=packtpub,dc=com\nobjectclass: top\nobjectclass: organizationalUnit\nou: people\n\ndn: uid=john,ou=people,dc=packtpub,dc=com\nobjectclass: top\nobjectclass: person\nobjectclass: organizationalPerson\nobjectclass: inetOrgPerson\ncn: Tomcy John\nuid: tjohn\nuserPassword: tjohn@password\n\ndn: cn=admins,ou=groups,dc=packtpub,dc=com\nobjectclass: top\nobjectclass: groupOfUniqueNames\ncn: admins\nou: admin\nuniqueMember: uid=tjohn,ou=people,dc=packtpub,dc=com\n\ndn: cn=users,ou=groups,dc=packtpub,dc=com\nobjectclass: top\nobjectclass: groupOfUniqueNames\ncn: users\nou: user\nuniqueMember: uid=tjohn,ou=people,dc=packtpub,dc=com\n```", "```java\nmvn spring-boot:run\n```", "```java\nunzip -a spring-boot-oauth-oidc-authentication.zip\n```", "```java\n<!-- Provided -->\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-tomcat</artifactId>\n  <scope>provided</scope>\n</dependency>\n<dependency>\n  <groupId>org.apache.tomcat.embed</groupId>\n  <artifactId>tomcat-embed-jasper</artifactId>\n  <scope>provided</scope>\n</dependency>\n<!-- OAuth -->\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-security</artifactId>\n</dependency>\n<dependency>\n  <groupId>org.springframework.security</groupId>\n  <artifactId>spring-security-oauth2-client</artifactId>\n</dependency>\n<dependency>\n  <groupId>org.springframework.security</groupId>\n  <artifactId>spring-security-oauth2-jose</artifactId>\n</dependency>\n```", "```java\n#Google app details\nspring.security.oauth2.client.registration.google.client-id=1085570125650-l8j2r88b5i5gbe3vkhtlf8j7u3hvdu78.apps.googleusercontent.com\nspring.security.oauth2.client.registration.google.client-secret=MdtcKp-ArG51FeqfAUw4K8Mp\n#Facebook app details\nspring.security.oauth2.client.registration.facebook.client-id=229630157771581\nspring.security.oauth2.client.registration.facebook.client-secret=e37501e8adfc160d6c6c9e3c8cc5fc0b\n#Github app details\nspring.security.oauth2.client.registration.github.client-id=<your client id>\nspring.security.oauth2.client.registration.github.client-secret=<your client secret>\n#Spring MVC details\nspring.mvc.view.prefix: /WEB-INF/views/\nspring.mvc.view.suffix: .jsp\n```", "```java\nspring.security.oauth2.client.registration.<provider_name>.client-id=<client id>\nspring.security.oauth2.client.registration.<provider_name>.client-secret=<client secret>\n```", "```java\n@ComponentScan(basePackageClasses=HomeController.class)\n```", "```java\n./mvnw spring-boot:run\n```"]