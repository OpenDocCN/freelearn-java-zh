- en: Understanding Classes, Objects, and Their Usage in Java
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we covered a short introduction to Java and how to
    install the editor that we will be typing our code in. We also wrote and executed
    our first code on the editor.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will go deeper into some basic concepts, such as strings
    and variables, and how they are different from each other. We will also see what
    methods are and how they are put to use with different code. We will discuss why
    objects are important in our code and how we can implement them.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Difference between strings and variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importance of classes and objects in Java
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Difference between strings and variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In [Chapter 1](89991415-42e6-424d-83e8-8009fdc38f8f.xhtml), *First Programming
    Steps in Java*, we printed a string and the variable. If we look closely, when
    we print a variable we are not using double quotes, but when we print a string,
    we are using them. This is because the value is already present in the variable,
    hence we need not use any double quotes. If we use them, Java considers it to
    be a string and the output will be printed as the letter `a` in the following
    example. If we run this and observe the output, the letter `a` will be printed
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/95c911f9-6b23-4f44-a268-444f52f7de93.png)'
  prefs: []
  type: TYPE_IMG
- en: Output displaying the value of a as per the code
  prefs: []
  type: TYPE_NORMAL
- en: 'If we don''t use double quotes, Java will check whether there is any variable
    defined with this letter. If so, it prints the value present in that variable.
    If there is no variable defined, then it gives an error. If we comment out the
    variable declaration, what we see is an error. Hovering the mouse over the variable,
    we will get a prompt saying Create a local variable ''a'', or we can use it by
    adding double quotes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/701160b8-1228-4ed6-a4ea-2c80aeadbda7.png)'
  prefs: []
  type: TYPE_IMG
- en: Quick fixes drop down with suggestions to correct the code error
  prefs: []
  type: TYPE_NORMAL
- en: In short, if we simply use double quotes, the variable will be treated as a
    string, but if we don't use double quotes, we must declare the variable somewhere.
    That is the difference between printing out strings and printing out variables.
  prefs: []
  type: TYPE_NORMAL
- en: Using methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Basically, methods are blocks in our Java class. Let''s write one block here
    as an example, and observe where the opened and closed brackets are placed. The
    following example shows one complete block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In this code, we have named the block of code `getData()` and `void` is the
    return type for this method.
  prefs: []
  type: TYPE_NORMAL
- en: If we are expecting to return a number from the method, and the number is an
    integer, then we have to write `integer` in place of `void`. The same applies
    with strings; if we are planning to return a string from the `getData()` method,
    then we have to declare it as a `string`. If we are not returning anything, that
    is, if we are simply writing a few lines of code, then we leave it as `void`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f19e2e43-91e8-49bf-9df8-a86691130e56.png)'
  prefs: []
  type: TYPE_IMG
- en: Return type is given as void for getData()
  prefs: []
  type: TYPE_NORMAL
- en: Here, we are not returning anything, so we keep it as `void`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add a `return 2;` line below `System.out.println(" I am in method");`.
    Here, we are returning a number that is an integer. That''s why we will receive
    an error here. If we hover our mouse over the error shown over `return 2;`, you
    will see a suggestion, Change method return type to ''int'':'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bbef302b-2ad0-4e6f-ac27-7403c44d3042.png)'
  prefs: []
  type: TYPE_IMG
- en: Quick fixes drop down with suggestions to correct the code error
  prefs: []
  type: TYPE_NORMAL
- en: On clicking on the suggestion, our IDE automatically modifies the return type
    to integer and the error disappears. The same is also the case with the string
    data type.
  prefs: []
  type: TYPE_NORMAL
- en: We will discuss the `public` access modifier later on in [Chapter 10](b0ee13be-6d61-427c-9dca-99750b6fafdd.xhtml), *The
    Importance of the final Keyword, Packages, and Modifiers*. There is a lot to discuss
    since there are different access modifiers in Java, such as `public`, `private`,
    `protected`, and `default`. We will take a look at each access modifier with appropriate
    examples so that they are explained in detail. For now, let's just accept all
    access modifiers as `public`.
  prefs: []
  type: TYPE_NORMAL
- en: Now you must be wondering why these methods are present in Java. What is their
    use?
  prefs: []
  type: TYPE_NORMAL
- en: Let's say that we are executing a 10-line block of code, for example, to add
    two integers on a page. Now every time we reach a page that requires us to add
    two integers, we have to write the 10 lines of code again. Maybe replicating the
    10 lines of code won't matter for one instance but what if we were to require
    this block of code for 10 instances throughout the entire project? So 10 pages
    and 10 lines of code makes 100 lines of code that we are replicating in a single
    Java program. So to avoid that, we write all the 10 lines of code into one block,
    and we name that block as, for example, `getData` or anything else. Thereafter,
    whenever we require the 10 lines of code that we typed, we can simply call the
    `getData` method. All the 10 lines of code will fall into that particular block,
    and it will get executed. In this case, we avoid writing the code 10 times; we
    write it only once in a method and call that method whenever it is required.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s explain this with an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding class, we will consider `" I am in method"` as the 10 lines
    of code that we were talking about earlier. We want to call this method, but here
    the `getData()` block is outside the `main` block, which means that the code cannot
    be executed. To execute it, we must move it inside the `main` block. In most cases,
    people just copy the code inside the `main` block and then receive an error since
    no methods are allowed inside the `main` block. The method should be written outside
    the main block, but inside the class. If we write something outside the class,
    there is no point since Java does not catch it. But if we write the method outside
    the `main` block, how do we get it inside the `main` block? For that, we need
    to create an object for the class where our method is defined. Here, our methods
    are defined in the `Firstclass` class, so we create an object for this class and
    with that object we can access the methods and variables present in the class.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll see what the objects are, where we use them, and
    how objects are used to call the methods and variables.
  prefs: []
  type: TYPE_NORMAL
- en: Importance of classes and objects in Java
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Objects are instances or references of a class. So we can call the methods and
    variables present in this class with the help of their objects. We cannot call
    methods and objects directly, we can only use them with the help of their objects. So
    first, we need to create objects for the class, and then we can call the method
    inside the `main` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the previous example to explain this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Since the `main` block is already in the class, why do we need to create an
    object again for this class and call it?
  prefs: []
  type: TYPE_NORMAL
- en: The answer is that there is no way that the `main` block will come to know about
    the method outside it until and unless we create an object to call the method.
    There is an exception for that, which is the `static` variable, saying that the
    method is static. So, in general, accessing other methods is only possible with
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an object in Java
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we need to allocate some memory for the object in the class. Memory
    can be allocated with the help of the `new` operator followed by the class name.
    Then we define an object name for it. The return type should always be the class
    name. This is the syntax for creating a memory allocation for a class. So the
    code for memory allocation for the preceding example will look something like
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here, we say `fn` is the object of the `Firstclass` class. Now that we have
    created an object, let's see how we can access it.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing an object in Java
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To access the method of the class, we write the object name and then `.` (dot).
    All the methods that qualify for the class are displayed in a drop-down—this is
    another great feature in Eclipse. We can just look for the method in the drop-down
    rather than searching for it through the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the example, we are using the `getData()` method. The rest of the methods
    shown are all built-in Java methods. Observe how the methods are displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6a444ef7-aadf-4fc7-85cc-748bcd5af95a.png)'
  prefs: []
  type: TYPE_IMG
- en: Drop-down showing all the class methods available to the editor to use
  prefs: []
  type: TYPE_NORMAL
- en: 'On clicking on `getData()`, the `getData()` block will be transferred to the
    line where the object was called, and when we run the program, the code will be
    executed as it is part of the `main` block. The accessing code will finally look
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s see what the final code for this example will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'So if we run the class given in the example, our result will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/816f4740-d7ba-4ca8-a963-eede62592cc2.png)'
  prefs: []
  type: TYPE_IMG
- en: Output displaying I am in method as per the code
  prefs: []
  type: TYPE_NORMAL
- en: '`I am in method` is what we see in the output; this is because control starts
    from the memory-allocation line, creates an object, and using the object we call
    the method of that class. Control goes back to the `getData()` block and completes
    the lines of code that are present in that particular block; it executes the print
    statement, and we see that it gets printed. This is why objects are powerful in
    calling a method.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The same technique can be used for calling integers. Let''s say we declare
    a variable in the `a` class and assign a value to it. We can print the variable
    value by adding the following line in the `main` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This is one way of using classes, objects, and methods in Java; basically we
    are encapsulating.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing a method in a different class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's say we face a situation where we are working with one class and we need
    to access an object in another class; this can be done in Java. Let's use an example
    to help explain this. Let's use two classes, `Firstclass()` (from the *Accessing
    an object in Java* section ), and we'll create a new class, called `secondclass()`.
    On creating a new class, the default code is created by the editor and we're able
    to add code in it. We add a random method, `public void setData()`, within which
    we print the `I am in second class method` statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we want the `setData()` method in the `Firstclass()` class. Basically
    we want to execute the `setData()` method in `Firstclass()`. And methods can be
    called only with the objects of that particular class. To do so, we create an
    object in the method that calls the method in the other class. We use similar
    code to what we used in the previous example to allocate memory for an object.
    The following code is added in the `main` method of `Firstclass()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: While typing the code in the `main` class, when we type `sn.` to call the method,
    we will again get all the choices of methods that there are in Java. Since we
    want to call `setData()`, we select it from the multiple options that are shared
    with us. This will successfully bring `setData()` into in the `main` method of
    `Firstclass()` by creating an object for the class.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we run the code, we will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5735c3cf-5d54-4ade-9e34-992f83229f8b.png)'
  prefs: []
  type: TYPE_IMG
- en: Output displaying I am in second class method as per the code
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We started off by discussing the difference between strings and variables, and
    how they appear in a code. We then saw what methods are and how can they be used
    to write our code. After that, we discussed the importance of classes and objects,
    and how they are used to call methods that execute a class. We learned how to
    allocate memory to an object and call the method of that object while executing
    the code.Finally, we learned how to access a method that is present in another
    class using objects.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter we will learn more about strings and have a look at the `String` class.
  prefs: []
  type: TYPE_NORMAL
