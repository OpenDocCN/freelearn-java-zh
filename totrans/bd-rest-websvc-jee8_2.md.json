["```java\n@Path(\"books\")\n@RequestScoped\npublic class BookResource {\n\n    @Inject\n    private Bookshelf bookshelf;\n\n    @GET\n    @Produces(MediaType.APPLICATION_JSON)\n    public Response books() {\n        return Response.ok(bookshelf.findAll()).build();\n    }\n```", "```java\n    @GET\n    @Path(\"/{isbn}\")\n    public Response get(@PathParam(\"isbn\") String isbn) {\n        Book book = bookshelf.findByISBN(isbn);\n        return Response.ok(book).build();\n    }\n```", "```java\n    @POST\n    @Consumes(MediaType.APPLICATION_JSON)\n    public Response create(Book book) {\n        if (bookshelf.exists(book.getIsbn())) {\n            return Response.status(Response.Status.CONFLICT).build();\n        }\n\n        bookshelf.create(book);\n        URI location = UriBuilder.fromResource(BookResource.class)\n                .path(\"/{isbn}\")\n                .resolveTemplate(\"isbn\", book.getIsbn())\n                .build();\n        return Response.created(location).build();\n    }\n```", "```java\n\n    @PUT\n    @Path(\"/{isbn}\")\n    public Response update(@PathParam(\"isbn\") String isbn, Book book) {\n        bookshelf.update(isbn, book);\n        return Response.ok().build();\n    }\n```", "```java\n    @DELETE\n    @Path(\"/{isbn}\")\n    public Response delete(@PathParam(\"isbn\") String isbn) {\n        bookshelf.delete(isbn);\n        return Response.ok().build();\n    }\n```", "```java\nFROM payara/micro:5-SNAPSHOT\n\nCOPY target/library-service.war /opt/payara/deployments\n```", "```java\n    @Path(\"/{isbn}/author\")\n    public AuthorResource author(@PathParam(\"isbn\") String isbn) {\n        Book book = bookshelf.findByISBN(isbn);\n        return new AuthorResource(book);\n    }\n```", "```java\n@Produces(MediaType.APPLICATION_JSON)\npublic class AuthorResource {\n    private final Book book;\n\n    AuthorResource(Book book) {\n        this.book = book;\n    }\n\n    @GET\n    public Author get() {\n        return book.getAuthor();\n    }\n}\n```", "```java\n@RequestScoped\npublic class BookResource {\n\n    @Inject\n    private Bookshelf bookshelf;\n    @Context\n    private ResourceContext context;\n\n    @Path(\"/{isbn}/loans\")\n    public LoanResource loans(@PathParam(\"isbn\") String isbn) {\n        LoanResource loanResource =     \n        context.getResource(LoanResource.class);\n        loanResource.setIsbn(isbn);\n\n        return loanResource;\n    }\n}\n\n```", "```java\n    @POST\n    @Consumes(MediaType.APPLICATION_JSON)\n    public Response create(Book book) {\n        if (bookshelf.exists(book.getIsbn())) {\n            return Response.status(Response.Status.CONFLICT).build();\n        }\n```", "```java\n @PUT\n @Path(\"/{isbn}\")\n public Response update(@PathParam(\"isbn\") String isbn, Book book) {\n if (!Objects.equals(isbn, book.getIsbn())) {\n            // return    \n            Response.status(Response.Status.BAD_REQUEST).build();\n```", "```java\n    @PUT\n    @Path(\"/{isbn}\")\n    public Response update(@PathParam(\"isbn\") String isbn, Book book) {\n        if (!Objects.equals(isbn, book.getIsbn())) {\n            // throw new WebApplicationException(\n            \"ISBN must match path parameter.\", \n            Response.Status.BAD_REQUEST);\n            throw new BadRequestException(\n            \"ISBN must match path parameter.\");\n        }\n```", "```java\n@Provider\npublic class PersistenceExceptionMapper implements ExceptionMapper<PersistenceException> {\n    @Override\n    public Response toResponse(PersistenceException exception) {\n        if (exception instanceof EntityNotFoundException) {\n            return Response.status(Status.NOT_FOUND).build();\n        } else {\n```", "```java\n            Map<String, String> response = new HashMap<>();\n            response.put(\"code\", \"ERR-4711\");\n            response.put(\"type\", \"DATABASE\");\n            response.put(\"message\", exception.getMessage());\n\n            return Response.status(Status.INTERNAL_SERVER_ERROR)\n                    .entity(response)\n                    .type(MediaType.APPLICATION_JSON).build();\n        }\n    }\n}\n```", "```java\n    <dependency>\n        <groupId>org.glassfish.jersey.core</groupId>\n        <artifactId>jersey-client</artifactId>\n        <version>${jersey.version}</version>\n        <scope>test</scope>\n    </dependency>\n    <dependency>\n        <groupId>org.glassfish.jersey.inject</groupId>\n        <artifactId>jersey-hk2</artifactId>\n        <version>${jersey.version}</version>\n        <scope>test</scope>\n    </dependency>\n    <dependency>\n        <groupId>org.glassfish.jersey.media</groupId>\n        <artifactId>jersey-media-json-binding</artifactId>\n        <version>${jersey.version}</version>\n        <scope>test</scope>\n    </dependency>\n```", "```java\npublic class LibraryServiceClient {\n\n    private static final Logger LOGGER = Logger.getAnonymousLogger();\n\n    public static void main(String[] args) {\n        // construct a JAX-RS client using the builder\n        Client client = ClientBuilder.newBuilder()\n                .connectTimeout(5, TimeUnit.SECONDS)\n                .readTimeout(5, TimeUnit.SECONDS)\n                .register(JsonBindingFeature.class)\n                .build();\n\n        // construct a web target for the library service\n        WebTarget api = client\n          .target(\"http://localhost:8080\")\n          .path(\"/library-service/api\");\n```", "```java\n        LOGGER.log(Level.INFO, \"Get list of books.\");\n        List<Book> books =  api.path(\"/books\").request()\n          .accept(MediaType.APPLICATION_JSON).get(bookList());\n        books.forEach(book -> LOGGER.log(Level.INFO, \"{0}\", book));\n\n        LOGGER.log(Level.INFO, \"Get unknown book by ISBN.\");\n        Response response = api.path(\"/books\")\n          .path(\"/{isbn}\").resolveTemplate(\"isbn\", \"1234567890\")\n          .request().accept(MediaType.APPLICATION_JSON).get();\n        assert response.getStatus() == 404;\n    private static GenericType<List<Book>> bookList() {\n        return new GenericType<List<Book>>() {\n        };\n    }\n}\n```", "```java\n        LOGGER.log(Level.INFO, \"Creating new {0}.\", book);\n        response = api.path(\"/books\")\n          .request(MediaType.APPLICATION_JSON)\n          .post(Entity.json(book));\n        assert response.getStatus() == 201;\n\n```", "```java\n        URI bookUri = response.getLocation();\n        LOGGER.log(Level.INFO, \"Get created book with URI {0}.\", \n          bookUri);\n        Book createdBook = client.target(bookUri)\n          .request().accept(MediaType.APPLICATION_JSON)\n          .get(Book.class);\n        assert book.equals(createdBook);\n```", "```java\n        LOGGER.log(Level.INFO, \"Delete book with URI {0}.\", bookUri);\n        response = client.target(bookUri).request().delete();\n        assert response.getStatus() == 200;\n\n        client.close();\n    }\n```", "```java\n    <dependency>\n        <groupId>org.glassfish.jersey.test-  \n          framework.providers</groupId>\n        <artifactId>jersey-test-framework-provider-\n          grizzly2</artifactId>\n        <version>${jersey.version}</version>\n        <scope>test</scope>\n    </dependency>\n```", "```java\npublic class VersionResourceTest extends JerseyTest {\n\n    @Override\n    protected Application configure() {\n        ResourceConfig config = new  \n          ResourceConfig(VersionResource.class);\n```", "```java\n    @Override\n    protected void configureClient(ClientConfig config) {\n        // for JSON-B marshalling\n        config.register(JsonBindingFeature.class);\n    }\n```", "```java\n    @Test\n    public void v1() {\n        Response response = target(\"/version/v1\").request().get();\n        assertThat(response.getStatus(), is(200));\n        assertThat(response.readEntity(String.class), is(\"v1.0\"));\n    }\n```", "```java\n        <dependency>\n            <groupId>org.testcontainers</groupId>\n            <artifactId>testcontainers</artifactId>\n            <version>1.5.1</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-simple</artifactId>\n            <version>1.7.25</version>\n            <scope>test</scope>\n        </dependency>\n```", "```java\n    @ClassRule\n    public static GenericContainer container = \n      new GenericContainer(new ImageFromDockerfile()\n            .withFileFromFile(\"Dockerfile\", \n              new File(basePath(), \"Dockerfile\"))\n            .withFileFromFile(\"target/library-service.war\", \n              new File(basePath(), \n              \"target/library-service.war\")))\n            .waitingFor(Wait.forHttp(\"\n              /library-service/api/application.wadl\")\n                    .withStartupTimeout(Duration.ofSeconds(90)))\n            .withLogConsumer(new Slf4jLogConsumer(\n              LoggerFactory.getLogger(\n              LibraryServiceContainerTest.class)))\n            .withExposedPorts(8080)\n            .withExtraHost(\"localhost\", \"127.0.0.1\");\n```", "```java\n    @Before\n    public void setUp() {\n        client = ClientBuilder.newBuilder()\n                .connectTimeout(5, TimeUnit.SECONDS)\n                .readTimeout(5, TimeUnit.SECONDS)\n                .register(JsonBindingFeature.class)\n                .build();\n\n        String uri = String.format(\"http://%s:%s/library-service/api\",\n                container.getContainerIpAddress(),   \n                  container.getMappedPort(8080));\n        api = client.target(uri);\n    }\n```", "```java\n>mvn integration-test\n```"]