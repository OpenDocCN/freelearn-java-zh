["```java\n<span class=\"strong\"><strong>    $ export JAVA_PATH=/YOUR/INSTALLATION/PATH</strong></span>\n<span class=\"strong\"><strong>    $ export PATH=$PATH:$JAVA_HOME/bin</strong></span>\n```", "```java\n<span class=\"strong\"><strong>    $ javac -version</strong></span>\n<span class=\"strong\"><strong>    javac 1.7.0_71</strong></span>\n <span class=\"strong\"><strong>    $ java -version</strong></span>\n<span class=\"strong\"><strong>    java version \"1.7.0_71\"</strong></span>\n<span class=\"strong\"><strong>    Java(TM) SE Runtime Environment (build 1.7.0_71-b14)</strong></span>\n<span class=\"strong\"><strong>    Java HotSpot(TM) 64-Bit Server VM (build 24.71-b01, mixed mode)</strong></span>\n```", "```java\n    <span class=\"strong\"><strong>    $ export ACTIVATOR_HOME=&lt;/YOUR/INSTALLATION/PATH&gt;</strong></span>\n    <span class=\"strong\"><strong>    $ export PATH=$PATH:$ACTIVATOR_HOME</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    $ activator --version</strong></span>\n    <span class=\"strong\"><strong>    sbt launcher version 0.13.5</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    $ activator new &lt;YOUR_APP_NAME&gt;</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    $ activator new foo_java play-java</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    $ activator new foo_scala play-scala</strong></span>\n    ```", "```java\n        <span class=\"strong\"><strong>    $ cd foo_java</strong></span>\n        <span class=\"strong\"><strong>    $ activator</strong></span>\n        ```", "```java\n        <span class=\"strong\"><strong>    $ cd foo_scala</strong></span>\n        <span class=\"strong\"><strong>    $ activator</strong></span>\n        ```", "```java\n        <span class=\"strong\"><strong>    [foo_java] $ run</strong></span>\n        ```", "```java\n        <span class=\"strong\"><strong>    [foo_scala] $ run</strong></span>\n        ```", "```java\n    <span class=\"strong\"><strong>    $ activator \"~run\"</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    $ activator \"run 9001\"</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    [foo_java] $ compile</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    [foo_scala] $ compile</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    $ cd foo_java</strong></span>\n    <span class=\"strong\"><strong>    $ activator compile</strong></span>\n    <span class=\"strong\"><strong>    $ activator run</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    $ cd foo_scala</strong></span>\n    <span class=\"strong\"><strong>    $ activator compile</strong></span>\n    <span class=\"strong\"><strong>    $ activator run</strong></span>\n    ```", "```java\n<span class=\"strong\"><strong>    $ activator eclipse</strong></span>\n<span class=\"strong\"><strong>    [info] Loading project definition from /private/tmp/foo_scala/project</strong></span>\n<span class=\"strong\"><strong>    [info] Set current project to foo_scala (in build file:/private/tmp/foo_scala/)</strong></span>\n<span class=\"strong\"><strong>    [info] About to create Eclipse project files for your project(s).</strong></span>\n<span class=\"strong\"><strong>    [info] Compiling 5 Scala sources and 1 Java source to /private/tmp/foo_scala/target/scala-2.11/classes...</strong></span>\n<span class=\"strong\"><strong>    [info] Successfully created Eclipse project files for project(s):</strong></span>\n<span class=\"strong\"><strong>    [info] foo_scala</strong></span>\n```", "```java\n<span class=\"strong\"><strong>    $ activator idea</strong></span>\n<span class=\"strong\"><strong>    [info] Loading project definition from /private/tmp/foo_java/project</strong></span>\n<span class=\"strong\"><strong>    [info] Set current project to foo_java (in build file:/private/tmp/foo_java/)</strong></span>\n<span class=\"strong\"><strong>    [info] Creating IDEA module for project 'foo_java' ...</strong></span>\n<span class=\"strong\"><strong>    [info] Running compile:managedSources ...</strong></span>\n<span class=\"strong\"><strong>    [info] Running test:managedSources ...</strong></span>\n<span class=\"strong\"><strong>    [info] Excluding folder target</strong></span>\n<span class=\"strong\"><strong>    [info] Created /private/tmp/foo_java/.idea/IdeaProject.iml</strong></span>\n<span class=\"strong\"><strong>    [info] Created /private/tmp/foo_java/.idea</strong></span>\n<span class=\"strong\"><strong>    [info] Excluding folder /private/tmp/foo_java/target/scala-2.11/cache</strong></span>\n<span class=\"strong\"><strong>    [info] Excluding folder /private/tmp/foo_java/target/scala-2.11/classes</strong></span>\n<span class=\"strong\"><strong>    [info] Excluding folder /private/tmp/foo_java/target/scala-2.11/classes_managed</strong></span>\n<span class=\"strong\"><strong>    [info] Excluding folder /private/tmp/foo_java/target/native_libraries</strong></span>\n<span class=\"strong\"><strong>    [info] Excluding folder /private/tmp/foo_java/target/resolution-cache</strong></span>\n<span class=\"strong\"><strong>    [info] Excluding folder /private/tmp/foo_java/target/streams</strong></span>\n<span class=\"strong\"><strong>    [info] Excluding folder /private/tmp/foo_java/target/web</strong></span>\n<span class=\"strong\"><strong>    [info] Created /private/tmp/foo_java/.idea_modules/foo_java.iml</strong></span>\n<span class=\"strong\"><strong>    [info] Created /private/tmp/foo_java/.idea_modules/foo_java-build.iml</strong></span>\n```", "```java\n    libraryDependencies ++= Seq(\n          jdbc,\n          \"mysql\" % \"mysql-connector-java\" % \"5.1.28\"\n        )\n    ```", "```java\n    <span class=\"strong\"><strong>    $ activator clean dependencies</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    $ activator \"~run\"</strong></span>\n    ```", "```java\n    public static Result hello() {\n          return ok(\"Hello World\");\n        }\n    ```", "```java\n    GET    /hello    controllers.Application.hello()\n    ```", "```java\n    <code class=\"literal\">http://localhost:9000/hello</code>\n    ```", "```java\n    <span class=\"strong\"><strong>    $ activator \"~run\"</strong></span>\n    ```", "```java\n    def hello = Action {\n          Ok(\"Hello World\")\n        }\n    ```", "```java\n    GET    /hello    controllers.Application.hello\n    ```", "```java\n    <code class=\"literal\">http://localhost:9000/hello</code>\n    ```", "```java\n    public static Result echo(String msg) {\n          return ok(\"Echoing \" + msg);\n        }\n    ```", "```java\n    GET    /echo/:msg    controllers.Application.echo(msg)\n    ```", "```java\n    <code class=\"literal\">http://localhost:9000/echo/foo</code>\n    ```", "```java\n    def echo(msg: String) = Action {\n          Ok(\"Echoing \" + msg)\n        }\n    ```", "```java\n    GET    /echo/:msg    controllers.Application.echo(msg)\n    ```", "```java\n    <code class=\"literal\">http://localhost:9000/echo/bar</code>\n    ```", "```java\n    public static Result helloRedirect() {\n          return redirect(controllers.routes.Application.echo(\"HelloWorldv2\"));\n        }\n    ```", "```java\n    GET    /v2/hello    controllers.Application.helloRedirect()\n    ```", "```java\n    <code class=\"literal\">http://localhost:9000/v2/hello</code>\n    ```", "```java\n    def helloRedirect() = Action {\n          Redirect(routes.Application.echo(\"HelloWorldv2\"))\n        }\n    ```", "```java\n    GET    /v2/hello    controllers.Application.helloRedirect\n    ```", "```java\n    <code class=\"literal\">http://localhost:9000/v2/hello</code>\n    ```", "```java\n    @(products: Collection[String])\n         &lt;h3&gt;@products.mkString(\",\")&lt;/h3&gt;\n    ```", "```java\n    private static final java.util.Map&lt;Integer, String&gt; productMap = new java.util.HashMap&lt;Integer, String&gt;();\n         static {\n          productMap.put(1, \"Keyboard\");\n          productMap.put(2, \"Mouse\");\n          productMap.put(3, \"Monitor\");\n        }\n         public static Result listProducts() {\n          return ok(products.render(productMap.values()));\n        }\n    ```", "```java\n    GET    /products    controllers.Application.listProducts\n    ```", "```java\n    <code class=\"literal\">http://localhost:9000/products</code>\n    ```", "```java\n    @(products: Seq[String])\n         &lt;h3&gt;@products.mkString(\",\")&lt;/h3&gt;\n    ```", "```java\n    private val productMap = Map(1 -&gt; \"Keyboard\", 2 -&gt; \"Mouse\", 3 -&gt; \"Monitor\")\n        def listProducts() = Action {\n          Ok(views.html.products(productMap.values.toSeq))\n        }\n    ```", "```java\n    GET    /products    controllers.Application.listProducts\n    ```", "```java\n    <code class=\"literal\">http://localhost:9000/products</code>\n    ```", "```java\n    @(products: Collection[String])\n         &lt;ul&gt;\n          @for(product &lt;- products) {\n            &lt;li&gt;@product&lt;/li&gt;\n          }\n        &lt;/ul&gt;\n    ```", "```java\n    @import tags._\n\n        @productsIterator(products)\n    ```", "```java\n    <code class=\"literal\">http://localhost:9000/products</code>\n    ```", "```java\n    @(products: Seq[String])\n         &lt;ul&gt;\n          @for(product &lt;- products) {\n            &lt;li&gt;@product&lt;/li&gt;\n      }\n        &lt;/ul&gt;\n    ```", "```java\n    @import tags._\n\n        @productsIterator(products)\n    ```", "```java\n    <code class=\"literal\">http://localhost:9000/products</code>\n    ```", "```java\n    @(title: String)(content: Html)\n      &lt;!DOCTYPE html&gt;\n      &lt;html lang=\"en\"&gt;\n        &lt;head&gt;\n          &lt;title&gt;@title&lt;/title&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n          &lt;header&gt;@header()&lt;/header&gt;\n          &lt;section class=\"content\"&gt;@content&lt;/section&gt;\n          &lt;footer&gt;@footer()&lt;/footer&gt;\n        &lt;/body&gt;\n      &lt;/html&gt;\n    ```", "```java\n    &lt;div&gt;\n        &lt;h1&gt;Acme Products Inc&lt;/h1&gt;\n      &lt;/div&gt;\n    ```", "```java\n    &lt;div&gt;\n        Copyright 2014\n      &lt;/div&gt;\n    ```", "```java\n    @(products: Collection[String])\n       @import tags._\n      @import common._\n       @mainLayout(title = \"Acme Products\") {\n        @productsIterator(products)\n      }\n    ```", "```java\n    <code class=\"literal\">http://localhost:9000/products</code>\n    ```", "```java\n    @(title: String)(content: Html)\n      &lt;!DOCTYPE html&gt;\n      &lt;html lang=\"en\"&gt;\n        &lt;head&gt;\n          &lt;title&gt;@title&lt;/title&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n          &lt;header&gt;@header()&lt;/header&gt;\n          &lt;section class=\"content\"&gt;@content&lt;/section&gt;\n          &lt;footer&gt;@footer()&lt;/footer&gt;\n        &lt;/body&gt;\n      &lt;/html&gt;\n    ```", "```java\n    &lt;div&gt;\n        &lt;h1&gt;Acme Products Inc&lt;/h1&gt;\n      &lt;/div&gt;\n    ```", "```java\n    &lt;div&gt;\n        Copyright 2014\n      &lt;/div&gt;\n    ```", "```java\n    @(products: Seq[String])\n       @import tags._\n      @import common._\n       @mainLayout(title = \"Acme Products\") {\n        @productsIterator(products)\n      }\n    ```", "```java\n    <code class=\"literal\">http://localhost:9000/products</code>\n    ```", "```java\n    <span class=\"strong\"><strong>    $ activator \"~run\"</strong></span>\n    ```", "```java\n    @(productMap: Map[Integer, String])\n        @for((id, name) &lt;- productMap) {\n          The Product '@name' has an ID of @id\n        }\n    ```", "```java\n    @(productMap: Map[Integer, String]) &lt;products&gt;\n        @for((id, name) &lt;- productMap) {\n          &lt;product id=\"@id\"&gt;@name&lt;/product&gt;\n        }\n        &lt;/products&gt;\n    ```", "```java\n    public static Result listProductsAsXML() {\n            return ok(views.xml.products.render(productMap));\n        }\n         public static Result listProductsAsTXT() {\n            return ok(views.txt.products.render(productMap));\n        }\n    ```", "```java\n    GET    /products.txt    controllers.Application.listProductsAsTXT()\n        GET    /products.xml    controllers.Application.listProductsAsXML()\n    ```", "```java\n    $ activator \"~run\"\n    ```", "```java\n    @(productMap: Map[Int, String])\n        @for((id, name) &lt;- productMap) {\n          The Product '@name' has an ID of @id\n        }\n    ```", "```java\n    @(productMap: Map[Int, String]) &lt;products&gt;\n        @for((id, name) &lt;- productMap) {\n          &lt;product id=\"@id\"&gt;@name&lt;/product&gt;\n        }\n        &lt;/products&gt;\n    ```", "```java\n    def listProductsAsTXT = Action {\n          Ok(views.txt.products(productMap))\n        }\n         def listProductsAsXML = Action {\n          Ok(views.xml.products(productMap))\n        }\n    ```", "```java\n    GET    /products.txt    controllers.Application.listProductsAsTXT\n        GET    /products.xml    controllers.Application.listProductsAsXML\n    ```", "```java\nevolutionplugin=disabled\n```", "```java\n    libraryDependencies ++= Seq(\n            javaJdbc,   javaEbean,\n            \"mysql\" % \"mysql-connector-java\" % \"5.1.28\"\n        )\n    ```", "```java\n    db.default.driver=com.mysql.jdbc.Driver\n        db.default.url=\"jdbc:mysql://&lt;YOUR_MYSQL_HOST&gt;/&lt;YOUR_DB&gt;\"\n        db.default.user=&lt;YOUR_USER&gt;\n        db.default.password=&lt;YOUR_PASSWORD&gt;\n         ebean.default=\"models.*\"\n    ```", "```java\n    # --- !Ups\n        CREATE TABLE Products (\n          id INT NOT NULL AUTO_INCREMENT,\n          name VARCHAR(100) NOT NULL,\n          PRIMARY KEY (id)\n        );\n       # --- !Downs\n        DROP TABLE Products;\n    ```", "```java\n    package models;\n         import java.util.*;\n        import javax.persistence.*;\n        import play.db.ebean.*;\n        import play.data.format.*;\n        import play.data.validation.*;\n         @Entity\n       @Table(name = \"Products\")\n        public class Product extends Model {\n\n        @Id\n        public Long id;\n\n        @Column\n        @Constraints.Required\n        public String name;\n         public static Finder&lt;Long, Product&gt; find = new Finder&lt;Long, Product&gt;(\n          Long.class, Product.class\n        );\n         public Long getId() {\n          return id;\n        }\n        public void setId(Long id) {\n          this.id = id;\n        }\n        public String getName() {\n          return name;\n        }\n        public void setName(String name) {\n          this.name = name;\n        }\n    }\n    ```", "```java\nProduct product = new Product();\n      product.name = \"Apple iPhone\";\n      product.save();\n```", "```java\nProduct forUpdate = Product.find.ref(1L);\n      forUpdate.name = \"Apple iPhone 6\";\n      forUpdate.update();Deleting a record:\n  Product.find.ref(1L).delete();\n```", "```java\nProduct p = Product.find.byId(1L);\n```", "```java\nList&lt;Product&gt; products = Product.find.all();\n```", "```java\nevolutionplugin=disabled\n```", "```java\n    libraryDependencies ++= Seq(\n          jdbc,\n          anorm,\n       \"mysql\" % \"mysql-connector-java\" % \"5.1.28\"\n        )\n    ```", "```java\n    db.default.driver= com.mysql.jdbc.Driver\n        db.default.url=\"jdbc:mysql://localhost/YOUR_DB\"\n        db.default.user=YOUR_USER\n        db.default.password=YOUR_PASSWORD\n    ```", "```java\n    # --- !Ups\n        CREATE TABLE Products (\n          id INT NOT NULL AUTO_INCREMENT,\n          name VARCHAR(100) NOT NULL,\n          PRIMARY KEY (id)\n        );\n     # --- !Downs\n        DROP TABLE Products;\n    ```", "```java\nDB.withConnection { implicit c =&gt;\n     SQL(\"INSERT INTO Products(id, name) VALUES ({id}, {name});\")\n        .on('id -&gt; product.id, 'name -&gt; product.name).executeInsert()\n   }\n```", "```java\n   DB.withConnection { implicit c =&gt;\n      SQL(\"UPDATE Products SET name = {name} WHERE id = {id}\")\n       .on('name -&gt; product.name, 'id -&gt; product.id).executeUpdate()\n   }\n```", "```java\n   DB.withConnection { implicit c =&gt;\n      SQL(\"DELETE FROM Products WHERE id={id};\")\n       .on('id -&gt; id).executeUpdate()\n   }Querying a record\n```", "```java\nDB.withConnection { implicit c =&gt;\n      SQL(\"SELECT * FROM Products WHERE id={id};\")\n       .on('id -&gt; id).executeQuery().singleOpt(defaultParser)\n    }\n```", "```java\nDB.withConnection { implicit c =&gt;\n     SQL(\"SELECT * FROM Products;\").executeQuery().list(defaultParser)\n   }\n```", "```java\npackage models\n     import play.api.db.DB\n    import play.api.Play.current\n    import anorm._\n    import anorm.SqlParser.{str, int}\n     case class Product(id: Long, name: String)\n     object Product {\n      val defaultParser = int(\"id\") ~ str(\"name\") map {\n          case id ~ name  =&gt; Product(id, name)\n         }\n       def save(product: Product) = {\n        DB.withConnection { implicit c =&gt;\n      SQL(\"INSERT INTO Products(id, name) VALUES ({id}, {name});\")\n                  .on('id -&gt; product.id, 'name -&gt; product.name).executeInsert()\n        }\n          }\n\n       def update(product: Product) = {\n        DB.withConnection { implicit c =&gt;\n               SQL(\"UPDATE Products SET name = {name} WHERE id = {id}\")\n                .on('name -&gt; product.name, 'id -&gt; product.id).executeUpdate()\n            }\n          }\n\n      def delete(id: Long) = {\n        DB.withConnection { implicit c =&gt;\n               SQL(\"DELETE FROM Products WHERE id={id};\")\n           .on('id -&gt; id).executeUpdate()\n        }\n          }\n\n      def get(id: Long) = {\n        DB.withConnection { implicit c =&gt;\n      SQL(\"SELECT * FROM Products WHERE id={id};\")\n        .on('id -&gt; id).executeQuery().singleOpt(defaultParser)\n        }\n          }\n\n      def all = {\n        DB.withConnection { implicit c =&gt;\n      SQL(\"SELECT * FROM Products;\").executeQuery().list(defaultParser)\n        }\n          }\n    }\n```", "```java\n    @(productForm: Form[models.Product])\n\n        @import common._\n         @mainLayout(title = \"New Product\") {\n\n          @if(flash.get(\"success\") != null) {\n            &lt;p&gt;@flash.get(\"success\")&lt;/p&gt;\n          }\n           @if(productForm.hasGlobalErrors) {\n            &lt;ul&gt;\n            @for(error &lt;- productForm.globalErrors) {\n              &lt;li&gt;@error.message&lt;/li&gt;\n            }\n            &lt;/ul&gt;\n          }\n           @helper.form(action = routes.Products.postForm()) {\n            @helper.inputText(productForm(\"id\"))\n            @helper.inputText(productForm(\"name\"))\n             &lt;input type=\"submit\"&gt;\n          }\n        }\n    ```", "```java\n    package controllers;\n         import play.*;\n        import play.mvc.*;\n        import play.data.*;\n        import views.html.*;\n        import models.*;\n         public class Products extends Controller {  \n       public static Result create() {\n          Form&lt;Product&gt; form = Form.form(Product.class);\n               return ok(views.html.product.form.render(form));\n           }\n            public static Result postForm() {\n              Form&lt;Product&gt; productForm = Form.form(Product.class).bindFromRequest();\n              if (productForm.hasErrors()) {\n              return badRequest(views.html.product.form.render(productForm));\n          } else {\n         Product product = productForm.get();\n              product.save();\n          flash(\"success\", \"Product saved!\");\n                  return redirect(controllers.routes.Products.create());\n          }\n           }\n        }\n    ```", "```java\n    GET    /products/new    controllers.Products.create()\n        POST   /products        controllers.Products.postForm()\n    ```", "```java\n    <code class=\"literal\">http://localhost:9000/product/new</code>\n    ```", "```java\n    @(productForm: Form[models.Product])(implicit flash: Flash)\n\n        @import common._\n         @mainLayout(title = \"New Product\") {\n          @flash.get(\"success\").map { message =&gt;\n            &lt;p&gt;@message&lt;/p&gt;\n          }\n           @if(productForm.hasGlobalErrors) {\n            &lt;ul&gt;\n            @for(error &lt;- productForm.globalErrors) {\n              &lt;li&gt;@error.message&lt;/li&gt;\n            }\n            &lt;/ul&gt;\n          }\n           @helper.form(action = routes.Products.postForm()) {\n            @helper.inputText(productForm(\"id\"))\n            @helper.inputText(productForm(\"name\"))\n             &lt;input type=\"submit\"&gt;\n          }\n        }\n    ```", "```java\n    import play.api._\n        import play.api.mvc._\n        import models._\n        import play.api.data._\n        import play.api.data.Forms._\n         val form = Form(\n          mapping(\n            \"id\" -&gt; longNumber,\n            \"name\" -&gt; text\n          )(Product.apply)(Product.unapply)\n        )\n\n        def create = Action { implicit request =&gt;\n          Ok(views.html.product.form(form))\n        }\n         def postForm = Action { implicit request =&gt;\n          form.bindFromRequest.fold(\n            formWithErrors =&gt; {\n              BadRequest(views.html.product.form(formWithErrors))\n            },\n            product =&gt; {Product.save(product)\n              Redirect(routes.Products.create).flashing(\"success\" -&gt; \"Product saved!\")\n            }\n          )\n        }\n    ```", "```java\n    GET    /products/new    controllers.Products.create\n        POST   /products        controllers.Products.postForm\n    ```", "```java\n    <code class=\"literal\">http://localhost:9000/product/new</code>\n    ```", "```java\n    public String validate() {\n          if (name.length() &lt; 3 || name.length() &gt; 100) {\n             return \"Name must be at least 3 characters or a maximum of 100 characters\";\n       }\n          return null;\n        }\n    ```", "```java\n    <code class=\"literal\">http://localhost:9000/products/new</code>\n    ```", "```java\n    val form = Form(\n          mapping(\n            \"id\" -&gt; longNumber,\n            \"name\" -&gt; nonEmptyText(minLength = 3, maxLength = 100)\n          )(Product.apply)(Product.unapply)\n        )\n    ```", "```java\n    <code class=\"literal\">http://localhost:9000/products/new</code>\n    ```", "```java\n    libraryDependencies += filters\n    ```", "```java\n    import play.GlobalSettings;\n        import play.api.mvc.EssentialFilter;\n        import play.filters.csrf.CSRFFilter;\n         public class Global extends GlobalSettings {\n            @Override\n            public &lt;T extends EssentialFilter&gt; Class&lt;T&gt;[] filters() {\n                return new Class[]{CSRFFilter.class};\n            }\n        }\n    ```", "```java\n    application.global=Global\n    ```", "```java\n    @(productForm: Form[models.Product])\n    ```", "```java\n    @helper.form(action = routes.Products.postForm()) {\n            @helper.CSRF.formField @* -Add the CSRF Token Helper Tag- *@\n        }\n    ```", "```java\n    <code class=\"literal\">http://localhost:9000/products/new</code>\n    ```", "```java\n    libraryDependencies += filters\n    ```", "```java\n    import play.api._\n         object Global extends GlobalSettings {\n        }\n    ```", "```java\n    application.global=Global\n    ```", "```java\n    import play.api.mvc._\n        import play.filters.csrf._\n         object Global extends WithFilters(CSRFFilter()) with GlobalSettings\n    ```", "```java\n    @(productForm: Form[models.Product])(implicit flash: Flash, request: play.api.mvc.Request[Any])\n    ```", "```java\n    @helper.form(action = routes.Products.postForm()) {\n            @helper.CSRF.formField @* -Add the CSRF Token Helper Tag- *@\n        }\n    ```", "```java\n    <code class=\"literal\">http://localhost:9000/products/new</code>\n    ```", "```java\n    import static org.junit.Assert.*;\n        import org.junit.Test;\n         public class ProductTest {\n\n          @Test\n          public void testString() {\n            String str = \"product\";\n            assertEquals(7, str.length());\n          }\n        }\n    ```", "```java\n    <span class=\"strong\"><strong>    $ activator</strong></span>\n    <span class=\"strong\"><strong>    [info] Loading project definition from /private/tmp/foo_java/project</strong></span>\n    <span class=\"strong\"><strong>    [info] Set current project to foo_java (in build file:/private/tmp/foo_java/)</strong></span>\n    <span class=\"strong\"><strong>    [foo_java] $ test-only ProductTest</strong></span>\n    <span class=\"strong\"><strong>    [info] Compiling 3 Java sources to /private/tmp/foo_java/target/scala-2.11/test-classes...</strong></span>\n    <span class=\"strong\"><strong>    [info] Passed: Total 1, Failed 0, Errors 0, Passed 1</strong></span>\n    <span class=\"strong\"><strong>    [success] Total time: 3 s, completed 09 29, 14 8:44:31 PM</strong></span>\n    ```", "```java\n    import org.specs2.mutable._\n         class ProductSpec extends Specification {\n           \"The 'product' string\" should {\n            \"contain seven characters\" in {\n              \"product\" must have size(7)\n            }\n          }\n        }\n    ```", "```java\n    <span class=\"strong\"><strong>    $ activator</strong></span>\n    <span class=\"strong\"><strong>    [info] Loading project definition from /private/tmp/foo_scala/project</strong></span>\n    <span class=\"strong\"><strong>    [info] Set current project to foo_scala (in build file:/private/tmp/foo_scala/)</strong></span>\n    <span class=\"strong\"><strong>    [foo_scala] $ test-only ProductSpec</strong></span>\n    <span class=\"strong\"><strong>    [info] ProductSpec</strong></span>\n    <span class=\"strong\"><strong>    [info]</strong></span>\n    <span class=\"strong\"><strong>    [info] The 'product' string should</strong></span>\n    <span class=\"strong\"><strong>    [info] + contain seven characters</strong></span>\n    <span class=\"strong\"><strong>    [info]</strong></span>\n    <span class=\"strong\"><strong>    [info] Total for specification ProductSpec</strong></span>\n    <span class=\"strong\"><strong>    [info] Finished in 24 ms</strong></span>\n    <span class=\"strong\"><strong>    [info] 1 example, 0 failure, 0 error</strong></span>\n    <span class=\"strong\"><strong>    [info] Passed: Total 1, Failed 0, Errors 0, Passed 1</strong></span>\n    <span class=\"strong\"><strong>    [success] Total time: 2 s, completed 09 29, 14 12:22:57 PM</strong></span>\n    ```", "```java\n    // add new imports\n        import static play.test.Helpers.*;\n        import models.*;\n        import play.test.*;\n         // add new test\n        @Test\n        public void testSavingAProduct() {\n          running(fakeApplication(), new Runnable() {\n            public void run() {\n\n         Product product = new Product();\n              product.name = \"Apple\";\n              product.save();\n              assertNotNull(product.getId());\n            }\n          });\n        }\n    ```", "```java\n    <span class=\"strong\"><strong>    [foo_java] $ test-only ProductTest</strong></span>\n    <span class=\"strong\"><strong>    [info] Passed: Total 2, Failed 0, Errors 0, Passed 2</strong></span>\n    <span class=\"strong\"><strong>    [success] Total time: 2 s, completed 09 29, 14 9:33:43 PM</strong></span>\n    ```", "```java\n    import models._\n        import play.api.test.WithApplication\n         \"models.Product\" should {\n          \"create a product with save()\" in new WithApplication {\n                    val product = Product(1, \"Apple\")\n            val productId = Product.save(product)\n               productId must not be None\n          }\n        }\n    ```", "```java\n    <span class=\"strong\"><strong>    [foo_scala] $ test-only ProductSpec</strong></span>\n    <span class=\"strong\"><strong>    [info] Compiling 1 Scala source to /private/tmp/foo_scala/target/scala-2.11/test-classes...</strong></span>\n    <span class=\"strong\"><strong>    [info] ProductSpec</strong></span>\n    <span class=\"strong\"><strong>    [info]</strong></span>\n    <span class=\"strong\"><strong>    [info] The 'product' string should</strong></span>\n    <span class=\"strong\"><strong>    [info] + contain seven characters</strong></span>\n    <span class=\"strong\"><strong>    [info]</strong></span>\n    <span class=\"strong\"><strong>    [info] models.Product should</strong></span>\n    <span class=\"strong\"><strong>    [info] + create a product with save()</strong></span>\n    <span class=\"strong\"><strong>    [info]</strong></span>\n    <span class=\"strong\"><strong>    [info] Total for specification ProductSpec</strong></span>\n    <span class=\"strong\"><strong>    [info] Finished in 1 second, 90 ms</strong></span>\n    <span class=\"strong\"><strong>    [info] 2 examples, 0 failure, 0 error</strong></span>\n    <span class=\"strong\"><strong>    [info] Passed: Total 2, Failed 0, Errors 0, Passed 2</strong></span>\n    <span class=\"strong\"><strong>    [success] Total time: 4 s, completed 09 29, 14 4:28:51 PM</strong></span>\n    ```", "```java\n    // add new imports\n        import play.mvc.*;\n        import static org.fest.assertions.Assertions.*;\n         //add new test\n        @Test\n        public void testProductListAsXml() {\n          Result result = callAction(controllers.routes.ref.Application.listProductsAsXML());   \n          assertThat(status(result)).isEqualTo(OK);\n          assertThat(contentType(result)).isEqualTo(\"application/xml\");\n          assertThat(contentAsString(result)).contains(\"products\");\n        }\n    ```", "```java\n    <span class=\"strong\"><strong>    [foo_java] $ test-only ProductTest</strong></span>\n    <span class=\"strong\"><strong>    [info] Compiling 1 Java source to /private/tmp/foo_java/target/scala-2.11/test-classes...</strong></span>\n    <span class=\"strong\"><strong>    [info] Passed: Total 3, Failed 0, Errors 0, Passed 3</strong></span>\n    <span class=\"strong\"><strong>    [success] Total time: 3 s, completed 09 29, 14 9:37:03 PM</strong></span>\n    ```", "```java\n    import controllers._\n        import play.api.test.FakeRequest\n        import play.api.test.Helpers._\n         \"controllers.Application\" should {\n          \"respond with XML for /products.xml requests\" in new WithApplication {\n            val result = controllers.Application.listProductsAsXML()(FakeRequest())\n             status(result) must equalTo(OK)\n            contentType(result) must beSome(\"application/xml\")\n            contentAsString(result) must contain(\"products\")\n          }\n        }\n    ```", "```java\n    <span class=\"strong\"><strong>    $ test-only ProductSpec</strong></span>\n    <span class=\"strong\"><strong>    [info] Compiling 1 Scala source to /private/tmp/foo_scala/target/scala-2.11/test-classes...</strong></span>\n    <span class=\"strong\"><strong>    [info] ProductSpec</strong></span>\n    <span class=\"strong\"><strong>    [info]</strong></span>\n    <span class=\"strong\"><strong>    [info] The 'product' string should</strong></span>\n    <span class=\"strong\"><strong>    [info] + contain seven characters</strong></span>\n    <span class=\"strong\"><strong>    [info]</strong></span>\n    <span class=\"strong\"><strong>    [info] models.Product should</strong></span>\n    <span class=\"strong\"><strong>    [info] + create a product with save()</strong></span>\n    <span class=\"strong\"><strong>    [info]</strong></span>\n    <span class=\"strong\"><strong>    [info] controllers.Application should</strong></span>\n    <span class=\"strong\"><strong>    [info] + respond with XML for /products.xml requests</strong></span>\n    <span class=\"strong\"><strong>    [info]</strong></span>\n    <span class=\"strong\"><strong>    [info] Total for specification ProductSpec</strong></span>\n    <span class=\"strong\"><strong>    [info] Finished in 1 second, 333 ms</strong></span>\n    <span class=\"strong\"><strong>    [info] 3 examples, 0 failure, 0 error</strong></span>\n    <span class=\"strong\"><strong>    [info] Passed: Total 3, Failed 0, Errors 0, Passed 3</strong></span>\n    <span class=\"strong\"><strong>    success] Total time: 4 s, completed 09 29, 14 5:23:41 PM</strong></span>\n    ```"]