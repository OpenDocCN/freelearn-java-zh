["```java\n{\n  \"interactionModel\": {\n    \"languageModel\": {\n      \"invocationName\": \"pet clinic\",\n      \"intents\": [\n        {\n          \"name\": \"AMAZON.CancelIntent\",\n          \"samples\": [\n            \"cancel\"\n          ]\n        ………………………\n        {\n          \"name\": \"PetClinicWelcomeIntent\",\n          \"slots\": [],\n          \"samples\": [\n            \"find near by pet clinics\",\n            \"find pet clinics\"\n          ]\n        }\n      ],\n      \"types\": []\n    }\n  }\n}\n```", "```java\n<dependencies>\n    <dependency>\n        <groupId>com.amazon.alexa</groupId>\n        <artifactId>ask-sdk</artifactId>\n        <version>2.20.2</version>\n    </dependency>\n</dependencies>\n```", "```java\ndependencies {\n    compile 'com.amazon.alexa:alexa-skills-kit:1.1.2'\n}\n```", "```java\npublic class LaunchRequestHandler implements RequestHandler {\n    @Override\n    public boolean canHandle(HandlerInput handlerInput) {\n        return handlerInput.matches\n        (requestType(LaunchRequest.class));\n    }\n    @Override\n    public Optional<Response> handle(HandlerInput \n     handlerInput) {\n        String speechText = \"Welcome to Pet Clinic, You can \n         say find near by Pet Clinics\";\n        return handlerInput.getResponseBuilder()\n                .withSpeech(speechText)\n                .withSimpleCard(\"PetClinic\", speechText)\n                .withReprompt(speechText)\n                .build();\n    }\n}\n```", "```java\npublic class PetClinicStreamHandler extends SkillStreamHandler {\n    private static Skill getSkill() {\n        return Skills.standard()\n                .addRequestHandlers(\n                        new CancelandStopIntentHandler(),\n                        new \n                         PetClinicWelcomeIntentHandler(),\n                        new HelpIntentHandler(),\n                        new LaunchRequestHandler(),\n                        new SessionEndedRequestHandler())\n                .withSkillId(\"amzn1.ask.skill.de392a0b-\n                 0a95-451a-a615-dcba1f9a42c6\")\n                .build();\n    }\n    public PetClinicStreamHandler() {\n        super(getSkill());\n    }\n}\n```", "```java\n<dependency>\n    <groupId>io.micronaut.aws</groupId>\n    <artifactId>micronaut-aws-alexa</artifactId>\n</dependency>\n```", "```java\n@Singleton\npublic class LaunchRequestHandler implements RequestHandler {\n    @Override\n    public boolean canHandle(HandlerInput handlerInput) {\n        return handlerInput.matches\n          (requestType(LaunchRequest.class));\n    }\n    @Override\n    public Optional<Response> handle(HandlerInput \n     handlerInput) {\n        String speechText = \"Welcome to Pet Clinic, You can \n         say find near by Pet Clinics\";\n        return handlerInput.getResponseBuilder()\n                .withSpeech(speechText)\n                .withSimpleCard(\"PetClinic\", speechText)\n                .withReprompt(speechText)\n                .build();\n    }\n}\n```", "```java\n@MicronautTest\npublic class LaunchRequestIntentHandlerTest {\n    @Inject\n    LaunchRequestHandler handler;\n    @Test\n    void testLaunchRequestIntentHandler() {\n        LaunchRequest request = \n         LaunchRequest.builder().build();\n        HandlerInput input = HandlerInput.builder()\n                .withRequestEnvelope\n                     (RequestEnvelope.builder()\n                        .withRequest(request)\n                        .build()\n                ).build();\n        assertTrue(handler.canHandle(input));\n        Optional<Response> responseOptional = \n          handler.handle(input);\n        assertTrue(responseOptional.isPresent());\n        Response = responseOptional.get();\n        assertTrue(response.getOutputSpeech() instanceof \n         SsmlOutputSpeech);\n        String speechText = \"Welcome to Pet Clinic, You can \n         say find near by Pet Clinics\";\n        String expectedSsml = \"<speak>\" + speechText + \n          \"</speak>\";\n        assertEquals(expectedSsml, ((SsmlOutputSpeech) \n         response.getOutputSpeech()).getSsml());\n        assertNotNull(response.getReprompt());\n        assertNotNull(response.getReprompt()\n          .getOutputSpeech());\n        assertTrue(response.getReprompt().getOutputSpeech() \n         instanceof SsmlOutputSpeech);\n        assertEquals(expectedSsml,((SsmlOutputSpeech) \n          response.getReprompt().getOutputSpeech())\n          .getSsml());\n        assertTrue(response.getCard() instanceof \n          SimpleCard);\n        assertEquals(\"PetClinic\", ((SimpleCard) \n          response.getCard()).getTitle());\n        assertEquals(speechText, ((SimpleCard) \n         response.getCard()).getContent());\n        assertFalse(response.getShouldEndSession());\n    }\n```", "```java\n    @Override\n    public Optional<Response> handle(HandlerInput \n       handlerInput) {\n        speechText =  service.getPetClinicLocation();\n        return handlerInput.getResponseBuilder()\n                .withSpeech(speechText)\n                .withSimpleCard(\"PetClinic\", speechText)\n                .withReprompt(speechText)\n                .build();\n    }\n```"]