["```java\n    package models \n    case class Product \n    ( var id:Option[Long], \n      var name:String, \n      var details:String, \n      var price:BigDecimal ) \n    { \n      override def toString:String =  \n      { \n        \"Product { id: \" + id.getOrElse(0) + \",name: \" + name + \", \n        details: \"+ details + \", price: \" + price + \"}\" \n      } \n    } \n\n```", "```java\n    package models \n\n    case class Review \n    (var id:Option[Long], \n      var productId:Option[Long], \n      var author:String, \n      var comment:String) \n    { \n      override def toString:String = { \n        \"Review { id: \" + id + \" ,productId: \" +  \n        productId.getOrElse(0) + \",author: \" + author + \",comment:  \n        \" + comment + \" }\" \n      } \n    } \n\n```", "```java\n    package models \n\n    case class Image \n    (var id:Option[Long], \n      var productId:Option[Long],  \n      var url:String){ \n        override def toString:String = { \n          \"Image { productId: \" + productId.getOrElse(0) + \",url: \"  \n          + url + \"}\" \n        } \n  } \n\n```", "```java\n    # Routes \n    # This file defines all application routes (Higher priority routes first) \n    # ~~~~ \n\n    GET / controllers.HomeController.index \n    GET /assets/*file controllers.Assets.at(path=\"/public\", file) \n\n    # \n    # Complete CRUD for Product \n    # \n    GET /product controllers.ProductController.index \n    GET /product/add controllers.ProductController.blank \n    POST /product/ controllers.ProductController.insert \n    POST /product/:id controllers.ProductController.update(id:Long) \n    POST /product:id/remove controllers.ProductController.remove(id:Long) \n    GET /product/details/:id controllers.ProductController.details(id:Long) \n\n    # \n    # Complete GRUD for Review \n    # \n    GET /review controllers.ReviewController.index \n    GET /review/add controllers.ReviewController.blank \n    POST /review/ controllers.ReviewController.insert \n    POST /review/:id controllers.ReviewController.update(id:Long) \n    POST /review:id/remove controllers.ReviewController.remove(id:Long) \n    GET /review/details/:id controllers.ReviewController.details(id:Long) \n\n    # \n    # Complete CRUD for Image \n    # \n    GET /image controllers.ImageController.index \n    GET /image/add controllers.ImageController.blank \n    POST /image/ controllers.ImageController.insert \n    POST /image/:id controllers.ImageController.update(id:Long) \n    POST /image:id/remove controllers.ImageController.remove(id:Long) \n    GET /image/details/:id controllers.ImageController.details(id:Long) \n\n```", "```java\n    @Singleton \n    class ProductController @Inject() (val messagesApi:MessagesApi,val \n    service:IProductService) extends Controller with I18nSupport { \n\n      val productForm: Form[Product] = Form( \n        mapping( \n          \"id\" -> optional(longNumber), \n          \"name\" -> nonEmptyText, \n          \"details\" -> text, \n          \"price\" -> bigDecimal \n        )(models.Product.apply)(models.Product.unapply)) \n\n      def index = Action { implicit request => \n        val products = service.findAll().getOrElse(Seq()) \n        Logger.info(\"index called. Products: \" + products) \n        Ok(views.html.product_index(products)) \n      } \n\n      def blank = Action { implicit request => \n        Logger.info(\"blank called. \") \n        Ok(views.html.product_details(None, productForm)) \n      } \n\n      def details(id: Long) = Action { implicit request => \n        Logger.info(\"details called. id: \" + id) \n        val product = service.findById(id).get \n        Ok(views.html.product_details(Some(id),  \n        productForm.fill(product))) \n      } \n\n      def insert()= Action { implicit request => \n        Logger.info(\"insert called.\") \n        productForm.bindFromRequest.fold( \n          form => { \n            BadRequest(views.html.product_details(None, form)) \n          }, \n        product => { \n          val id = service.insert(product) \n          Redirect(routes.ProductController.index).flashing(\"success\"  \n          -> Messages(\"success.insert\", id)) \n        }) \n      } \n\n      def update(id: Long) = Action { implicit request => \n        Logger.info(\"updated called. id: \" + id) \n        productForm.bindFromRequest.fold( \n          form => { \n            Ok(views.html.product_details(Some(id),  \n            form)).flashing(\"error\" -> \"Fix the errors!\") \n          }, \n          product => { \n            service.update(id,product) \n            Redirect(routes.ProductController.index). \n            flashing(\"success\" -> Messages(\"success.update\",  \n            product.name)) \n          }) \n      } \n\n      def remove(id: Long)= Action { \n        service.findById(id).map { product => \n        service.remove(id) \n        Redirect(routes.ProductController.index).flashing(\"success\" ->  \n        Messages(\"success.delete\", product.name)) \n      }.getOrElse(NotFound) \n\n      } \n    } \n\n```", "```java\n    success.delete = OK '{0}' deleted! \n    success.insert = OK '{0}' created! \n    success.update = OK '{0}' updated! \n    error.notFound = Nothing Found with ID {0,number,0} \n    error.number = Not a valid number \n    error.required = Missing value here \n\n```", "```java\n    @Singleton \n    class ReviewController @Inject() \n    (val messagesApi:MessagesApi, \n      val productService:IProductService, \n      val service:IReviewService) \n    extends Controller with I18nSupport { \n      val reviewForm:Form[Review] = Form( \n        mapping( \n          \"id\" -> optional(longNumber), \n          \"productId\" -> optional(longNumber), \n          \"author\" -> nonEmptyText, \n          \"comment\" -> nonEmptyText \n        )(models.Review.apply)(models.Review.unapply)) \n\n      def index = Action { implicit request => \n        val reviews = service.findAll().getOrElse(Seq()) \n        Logger.info(\"index called. Reviews: \" + reviews) \n        Ok(views.html.review_index(reviews)) \n      } \n\n      def blank = Action { implicit request => \n        Logger.info(\"blank called. \") \n        Ok(views.html.review_details(None,  \n          reviewForm,productService.findAllProducts)) \n      } \n\n      def details(id: Long) = Action { implicit request => \n        Logger.info(\"details called. id: \" + id) \n        val review = service.findById(id).get \n        Ok(views.html.review_details(Some(id),  \n        reviewForm.fill(review),productService.findAllProducts)) \n      } \n\n      def insert()= Action { implicit request => \n        Logger.info(\"insert called.\") \n        reviewForm.bindFromRequest.fold( \n        form => { \n          BadRequest(views.html.review_details(None,  \n          form,productService.findAllProducts)) \n      }, \n      review => { \n        if (review.productId==null ||   \n        review.productId.getOrElse(0)==0) { \n          Redirect(routes.ReviewController.blank).flashing(\"error\" ->  \n          \"Product ID Cannot be Null!\") \n        }else { \n          Logger.info(\"Review: \" + review) \n          if (review.productId==null ||  \n          review.productId.getOrElse(0)==0) throw new  \n          IllegalArgumentException(\"Product  Id Cannot Be Null\") \n          val id = service.insert(review) \n          Redirect(routes.ReviewController.index).flashing(\"success\" - \n          > Messages(\"success.insert\", id)) \n        } \n      }) \n    } \n\n    def update(id: Long) = Action { implicit request => \n      Logger.info(\"updated called. id: \" + id) \n      reviewForm.bindFromRequest.fold( \n        form => { \n          Ok(views.html.review_details(Some(id),  \n            form,productService.findAllProducts)).flashing(\"error\" ->  \n          \"Fix the errors!\") \n        }, \n        review => { \n          service.update(id,review) \n          Redirect(routes.ReviewController.index).flashing(\"success\" - \n          >Messages(\"success.update\", review.productId)) \n        }) \n      } \n\n      def remove(id: Long)= Action { \n        service.findById(id).map { review => \n          service.remove(id) \n          Redirect(routes.ReviewController.index).flashing(\"success\" - \n          >Messages(\"success.delete\", review.productId)) \n        }.getOrElse(NotFound) \n      } \n\n    } \n\n```", "```java\n    @Singleton \n    class ImageController @Inject() \n    (val messagesApi:MessagesApi, \n      val productService:IProductService, \n      val service:IImageService) \n    extends Controller with I18nSupport { \n\n      val imageForm:Form[Image] = Form( \n        mapping( \n          \"id\" -> optional(longNumber), \n          \"productId\" -> optional(longNumber), \n          \"url\" -> text \n        )(models.Image.apply)(models.Image.unapply)) \n\n        def index = Action { implicit request => \n          val images = service.findAll().getOrElse(Seq()) \n          Logger.info(\"index called. Images: \" + images) \n          Ok(views.html.image_index(images)) \n        } \n\n        def blank = Action { implicit request => \n          Logger.info(\"blank called. \") \n          Ok(views.html.image_details(None,  \n          imageForm,productService.findAllProducts)) \n        } \n\n        def details(id: Long) = Action { implicit request => \n          Logger.info(\"details called. id: \" + id) \n          val image = service.findById(id).get \n          Ok(views.html.image_details(Some(id),  \n          imageForm.fill(image),productService.findAllProducts)) \n        } \n\n        def insert()= Action { implicit request => \n          Logger.info(\"insert called.\") \n          imageForm.bindFromRequest.fold( \n            form => { \n              BadRequest(views.html.image_details(None, form,  \n              productService.findAllProducts)) \n            }, \n            image => { \n              If (image.productId==null ||  \n              image.productId.getOrElse(0)==0) { \n                Redirect(routes.ImageController.blank). \n                flashing(\"error\" -> \"Product ID Cannot be Null!\") \n              }else { \n                if (image.url==null || \"\".equals(image.url)) image.url  \n                = \"/assets/images/default_product.png\" \n                val id = service.insert(image) \n                Redirect(routes.ImageController.index). \n                flashing(\"success\" -> Messages(\"success.insert\", id)) \n              } \n            }) \n        } \n\n        def update(id: Long) = Action { implicit request => \n          Logger.info(\"updated called. id: \" + id) \n          imageForm.bindFromRequest.fold( \n            form => { \n              Ok(views.html.image_details(Some(id), form,  \n              null)).flashing(\"error\" -> \"Fix the errors!\") \n            }, \n            image => { \n              service.update(id,image) \n              Redirect(routes.ImageController.index). \n              flashing(\"success\" -> Messages(\"success.update\",  \n              image.id)) \n            }) \n        } \n\n    def remove(id: Long)= Action { \n      service.findById(id).map { image => \n        service.remove(id) \n        Redirect(routes.ImageController.index).flashing(\"success\"  \n        -> Messages(\"success.delete\", image.id)) \n      }.getOrElse(NotFound) \n    } \n} \n\n```", "```java\n    package services \n\n    import java.util.concurrent.atomic.AtomicLong \n    import scala.collection.mutable.HashMap \n\n    trait BaseService[A] { \n\n      var inMemoryDB = new HashMap[Long,A] \n      var idCounter = new AtomicLong(0) \n\n      def insert(a:A):Long \n      def update(id:Long,a:A):Boolean  \n      def remove(id:Long):Boolean  \n      def findById(id:Long):Option[A]  \n      def findAll():Option[List[A]] \n    } \n\n```", "```java\n    package services \n\n    import models.Product \n    import javax.inject._ \n\n    trait IProductService extends BaseService[Product]{ \n      def insert(product:Product):Long \n      def update(id:Long,product:Product):Boolean \n      def remove(id:Long):Boolean \n      def findById(id:Long):Option[Product] \n      def findAll():Option[List[Product]] \n      def findAllProducts():Seq[(String,String)] \n    } \n\n    @Singleton \n    class ProductService extends IProductService{ \n\n      def insert(product:Product):Long = { \n        val id = idCounter.incrementAndGet() \n        product.id = Some(id) \n        inMemoryDB.put(id, product) \n        id \n      } \n\n      def update(id:Long,product:Product):Boolean = { \n        validateId(id) \n        product.id = Some(id) \n        inMemoryDB.put(id, product) \n        true \n      } \n\n      def remove(id:Long):Boolean = { \n        validateId(id) \n        inMemoryDB.remove(id) \n        true \n      } \n\n      def findById(id:Long):Option[Product] = { \n        inMemoryDB.get(id) \n      } \n\n      def findAll():Option[List[Product]] = { \n        if (inMemoryDB.values == Nil ||  \n        inMemoryDB.values.toList.size==0) return None \n        Some(inMemoryDB.values.toList) \n      } \n\n      private def validateId(id:Long):Unit = { \n        val entry = inMemoryDB.get(id) \n        if (entry==null) throw new RuntimeException(\"Could not find  \n        Product: \" + id) \n      } \n\n      def findAllProducts():Seq[(String,String)] = { \n        val products:Seq[(String,String)] = this \n        .findAll() \n        .getOrElse(List(Product(Some(0),\"\",\"\",0))) \n        .toSeq \n        .map { product => (product.id.get.toString,product.name) } \n        return products \n      } \n    } \n\n```", "```java\n    package services \n\n    import javax.inject._ \n    import models.Image \n    import scala.collection.mutable.HashMap \n    import java.util.concurrent.atomic.AtomicLong \n\n    trait IImageService extends BaseService[Image]{ \n      def insert(image:Image):Long \n      def update(id:Long,image:Image):Boolean \n      def remove(id:Long):Boolean \n      def findById(id:Long):Option[Image] \n      def findAll():Option[List[Image]] \n} \n\n    @Singleton \n    class ImageService extends IImageService{ \n\n      def insert(image:Image):Long = { \n        val id = idCounter.incrementAndGet(); \n        image.id = Some(id) \n        inMemoryDB.put(id, image) \n        id \n      } \n\n      def update(id:Long,image:Image):Boolean = { \n        validateId(id) \n        image.id = Some(id) \n        inMemoryDB.put(id, image) \n        true \n      } \n\n      def remove(id:Long):Boolean = { \n        validateId(id) \n        inMemoryDB.remove(id) \n        true \n      } \n\n      def findById(id:Long):Option[Image] = { \n        inMemoryDB.get(id) \n      } \n\n      def findAll():Option[List[Image]] = { \n        if (inMemoryDB.values.toList == null ||  \n        inMemoryDB.values.toList.size==0) return None \n        Some(inMemoryDB.values.toList) \n      } \n\n      private def validateId(id:Long):Unit = { \n        val entry = inMemoryDB.get(id) \n        If (entry==null) throw new RuntimeException(\"Could not find  \n        Image: \" + id) \n      } \n\n    } \n\n```", "```java\n    package services \n\n    import javax.inject._ \n    import models.Review \n    import scala.collection.mutable.HashMap \n    import java.util.concurrent.atomic.AtomicLong \n\n    trait IReviewService extends BaseService[Review]{ \n      def insert(review:Review):Long \n      def update(id:Long,review:Review):Boolean \n      def remove(id:Long):Boolean \n      def findById(id:Long):Option[Review] \n      def findAll():Option[List[Review]] \n    } \n\n    @Singleton \n    class ReviewService extends IReviewService{ \n\n      def insert(review:Review):Long = { \n        val id = idCounter.incrementAndGet(); \n        review.id = Some(id) \n        inMemoryDB.put(id, review) \n        id \n      } \n\n      def update(id:Long,review:Review):Boolean = { \n        validateId(id) \n        review.id = Some(id) \n        inMemoryDB.put(id, review) \n        true \n      } \n\n      def remove(id:Long):Boolean = { \n        validateId(id) \n        inMemoryDB.remove(id) \n        true \n      } \n\n      def findById(id:Long):Option[Review] = { \n        inMemoryDB.get(id) \n      } \n\n      def findAll():Option[List[Review]] = { \n        if (inMemoryDB.values.toList == null ||  \n        inMemoryDB.values.toList.size==0) return None \n        Some(inMemoryDB.values.toList) \n      } \n\n      private def validateId(id:Long):Unit = { \n        val entry = inMemoryDB.get(id) \n        If (entry==null) throw new RuntimeException(\"Could not find  \n        Review: \" + id) \n      } \n    } \n\n```", "```java\n    import com.google.inject.AbstractModule \n    import java.time.Clock \n    import services.{ApplicationTimer} \n    import services.IProductService \n    import services.ProductService \n    import services.ReviewService \n    import services.IReviewService \n    import services.ImageService \n    import services.IImageService \n\n    /** \n    * This class is a Guice module that tells Guice how to bind several \n    * different types. This Guice module is created when the Play \n    * application starts. \n\n    * Play will automatically use any class called `Module` that is in \n    * the root package. You can create modules in other locations by \n    * adding `play.modules.enabled` settings to the `application.conf` \n    * configuration file. \n    */ \n    class Module extends AbstractModule { \n\n      override def configure() = { \n        // Use the system clock as the default implementation of Clock \n        bind(classOf[Clock]).toInstance(Clock.systemDefaultZone) \n        // Ask Guice to create an instance of ApplicationTimer  \n        // when the application starts. \n        bind(classOf[ApplicationTimer]).asEagerSingleton() \n        bind(classOf[IProductService]).to(classOf[ProductService]). \n        asEagerSingleton() \n        bind(classOf[IReviewService]).to(classOf[ReviewService]). \n        asEagerSingleton() \n        bind(classOf[IImageService]).to(classOf[ImageService]). \n        asEagerSingleton() \n      } \n    } \n\n```", "```java\n    Ok(views.html.product_details(None, productForm)) \n\n```", "```java\n    val product = service.findById(id).get \n    Ok(views.html.product_details(Some(id), productForm.fill(product))) \n\n```", "```java\n    @(title: String)(content: Html)(implicit flash: Flash) \n\n    <!DOCTYPE html> \n      <html lang=\"en\"> \n        <head> \n          <title>@title</title> \n          <link rel=\"shortcut icon\" type=\"image/png\"  \n          href=\"@routes.Assets.at(\"images/favicon.png\")\"> \n          <link rel=\"stylesheet\" media=\"screen\"  \n          href=\"@routes.Assets.at(\"stylesheets/main.css\")\"> \n          <link rel=\"stylesheet\" media=\"screen\"  \n          href=\"@routes.Assets.at(\"stylesheets/bootstrap.min.css\")\"> \n          <script src=\"img/@routes.Assets.at(\"javascripts/jquery- \n          1.9.0.min.js\")\" type=\"text/javascript\"></script> \n          <script src=\"img/@routes.Assets.at(\"javascripts/bootstrap.js\")\"  \n          type=\"text/javascript\"></script> \n          <script src=\"img/@routes.Assets.at(\"javascripts/image.js\")\"  \n          type=\"text/javascript\"></script> \n        </head> \n        <body> \n          <center><a href='/'><img height='42' width='42'  \n          src='@routes.Assets.at(\"images/rws.png\")'></a> \n          <h3>@title</h3></center> \n          <div class=\"container\"> \n            @alert(alertType: String) = { \n              @flash.get(alertType).map { message => \n                <div class=\"alert alert-@alertType\"> \n                  <button type=\"button\" class=\"close\" data- \n                  dismiss=\"alert\">&times;</button> \n                  @message \n                </div> \n              } \n            } \n          @alert(\"error\") \n          @alert(\"success\") \n          @content \n          <a href=\"/\"></a><BR> \n          <button type=\"submit\" class=\"btn btn-primary\"  \n          onclick=\"window.location.href='/'; \" > \n          Reactive Web Store - Home \n          </button> \n        </div> \n      </body> \n    </html> \n\n```", "```java\n    @(title: String)(content: Html)(implicit flash: Flash) \n\n```", "```java\n    @(products:Seq[Product])(implicit flash: Flash) \n\n    @main(\"Products\") { \n\n      @if(!products.isEmpty) { \n        <table class=\"table table-striped\"> \n          <tr> \n            <th>Name</th> \n            <th>Details</th> \n            <th>Price</th> \n            <th></th> \n          </tr> \n          @for(product <- products) { \n            <tr> \n              <td><a href=\"@routes.ProductController. \n              details(product.id.get)\">@product.name</a></td> \n              <td>@product.details</td> \n              <td>@product.price</td> \n              <td><form method=\"post\" action= \n              \"@routes.ProductController.remove(product.id.get)\"> \n              <button class=\"btn btn-link\" type=\"submit\"> \n              <i class=\"icon-trash\"></i>Delete</button> \n              </form></td> \n            </tr> \n          } \n        </table> \n      } \n      <p><a href=\"@routes.ProductController.blank\" class= \n      \"btn btn-success\"><i class=\"icon-plus icon-white\"> \n      </i>Add Product</a></p> \n    } \n\n```", "```java\n    @(products:Seq[Product])(implicit flash: Flash) \n\n```", "```java\n    @(id: Option[Long],product:Form[Product])(implicit flash:Flash) \n\n    @import play.api.i18n.Messages.Implicits._ \n    @import play.api.Play.current \n\n    @main(\"Product: \" + product(\"name\").value.getOrElse(\"\")){  \n\n      @if(product.hasErrors) { \n        <div class=\"alert alert-error\"> \n          <button type=\"button\" class=\"close\" data- \n          dismiss=\"alert\">&times;</button> \n          Sorry! Some information does not look right. Could you  \n          review it please and re-submit? \n        </div> \n      } \n\n      @helper.form(action = if (id.isDefined)  \n        routes.ProductController.update(id.get) else  \n        routes.ProductController.insert)  \n      { \n        @helper.inputText(product(\"name\"),    '_label -> \"Product  \n        Name\") \n        @helper.inputText(product(\"details\"), '_label -> \"Product  \n        Details\") \n        @helper.inputText(product(\"price\"),   '_label -> \"Price\") \n        <div class=\"form-actions\"> \n          <button type=\"submit\" class=\"btn btn-primary\"> \n            @if(id.isDefined) { Update Product } else { New Product } \n          </button> \n        </div> \n      } \n\n    } \n\n```", "```java\n    @(id: Option[Long],product:Form[Product])(implicit flash:Flash) \n\n```", "```java\n    @import play.api.i18n.Messages.Implicits._ \n    @import play.api.Play.current \n\n```", "```java\n    @main(\"Product: \" + product(\"name\").value.getOrElse(\"\")){ .. } \n\n```", "```java\n    @if(product.hasErrors) { \n      <div class=\"alert alert-error\"> \n        <button type=\"button\" class=\"close\" data- \n        dismiss=\"alert\">&times;</button> \n        Sorry! Some information does not look right. Could you review  \n        it please and re-submit? \n      </div> \n    } \n\n```", "```java\n    @helper.form(action = if (id.isDefined) \n    routes.ProductController.update(id.get) else \n    routes.ProductController.insert) { \n      @helper.inputText(product(\"name\"),    '_label -> \"Product Name\") \n      @helper.inputText(product(\"details\"), '_label -> \"Product  \n      Details\") \n      @helper.inputText(product(\"price\"),   '_label -> \"Price\") \n      <div class=\"form-actions\"> \n        <button type=\"submit\" class=\"btn btn-primary\"> \n          @if(id.isDefined) { Update Product } else { New Product } \n        </button> \n      </div> \n    } \n\n```", "```java\n    @helper.inputText(product(\"name\"),    '_label -> \"Product Name\") \n    @helper.inputText(product(\"details\"), '_label -> \"Product Details\") \n    @helper.inputText(product(\"price\"),   '_label -> \"Price\") \n\n```", "```java\n    @(reviews:Seq[Review])(implicit flash: Flash) \n\n    @main(\"Reviews\") { \n\n      @if(!reviews.isEmpty) { \n        <table class=\"table table-striped\"> \n          <tr> \n            <th>ProductId</th> \n            <th>Author</th> \n            <th>Comment</th> \n            <th></th> \n          </tr> \n          @for(review <- reviews) { \n            <tr> \n              <td><a href=\"@routes.ReviewController.details \n              (review.id.get)\">@review.productId</a></td> \n              <td>@review.author</td> \n              <td>@review.comment</td> \n              <td> \n              <form method=\"post\" action=\"@routes.ReviewController. \n              remove(review.id.get)\"> \n                <button class=\"btn btn-link\" type=\"submit\"><i class= \n                \"icon-trash\"></i>Delete</button> \n              </form></td> \n            </tr> \n          } \n        </table> \n      } \n      <p><a href=\"@routes.ReviewController.blank\" class=\"btn btn- \n      success\"><i class=\"icon-plus icon-white\"></i>Add Review</a></p> \n    } \n\n```", "```java\n    @(id: Option[Long],review:Form[Review],products:\n    Seq[(String,String)])(implicit flash:Flash) \n\n    @import play.api.i18n.Messages.Implicits._ \n    @import play.api.Play.current \n\n    @main(\"review: \" + review(\"name\").value.getOrElse(\"\")){  \n\n      @if(review.hasErrors) { \n        <div class=\"alert alert-error\"> \n          <button type=\"button\" class=\"close\" data- \n          dismiss=\"alert\">&times;</button> \n          Sorry! Some information does not look right. Could you  \n          review it please and re-submit? \n        </div> \n      } \n\n      @helper.form(action = if (id.isDefined)  \n      routes.ReviewController.update(id.get) else  \n      routes.ReviewController.insert) { \n        @helper.select( \n          field = review(\"productId\"), \n          options = products, \n          '_label -> \"Product Name\",  \n          '_default -> review(\"productId\").value.getOrElse(\"Choose  \n          One\")) \n          @helper.inputText(review(\"author\"),     '_label -> \"Author\") \n          @helper.inputText(review(\"comment\"),    '_label ->  \n          \"Comment\") \n          <div class=\"form-actions\"> \n            <button type=\"submit\" class=\"btn btn-primary\"> \n            @if(id.isDefined) { Update review } else { New review } \n          </button> \n          </div> \n      } \n\n    } \n\n```", "```java\n    @(images:Seq[Image])(implicit flash:Flash) \n    @main(\"Images\") { \n      @if(!images.isEmpty) { \n        <table class=\"table table-striped\"> \n          <tr> \n            <th>ProductID</th> \n            <th>URL</th> \n            <th></th> \n          </tr> \n          @for(image <- images) { \n            <tr> \n              <td><a href=\"@routes.ImageController.details \n              (image.id.get)\">@image.id</a></td> \n              <td>@image.productId</td> \n              <td>@image.url</td> \n              <td><form method=\"post\" action= \n              \"@routes.ImageController.remove(image.id.get)\"> \n                <button class=\"btn btn-link\" type=\"submit\"> \n                <i class=\"icon-trash\"></i>Delete</button> \n              </form></td> \n            </tr> \n          } \n        </table> \n      } \n      <p><a href=\"@routes.ImageController.blank\" class= \n      \"btn btn-success\"><i class=\"icon-plus icon-white\"> \n      </i>Add Image</a></p> \n    } \n\n    Image Details UI [image_details.scala.html] \n\n    @(id: Option[Long],image:Form[Image],products:Seq[(String,String)])\n    (implicit flash:Flash) \n    @import play.api.i18n.Messages.Implicits._ \n    @import play.api.Play.current \n    @main(\"Image: \" + image(\"productId\").value.getOrElse(\"\")){  \n      @if(image.hasErrors) { \n        <div class=\"alert alert-error\"> \n          <button type=\"button\" class=\"close\" data- \n          dismiss=\"alert\">&times;</button> \n          Sorry! Some information does not look right. Could you image  \n          it please and re-submit? \n        </div> \n      } \n\n      @helper.form(action = if (id.isDefined)  \n      routes.ImageController.update(id.get) else  \n      routes.ImageController.insert) { \n        @helper.select(field = image(\"productId\"), \n          options = products, \n          '_label -> \"Product Name\",  \n          '_default -> image(\"productId\").value.getOrElse(\"Choose  \n          One\") \n        ) \n        @helper.inputText(  \n          image(\"url\"),  \n          '_label       -> \"URL\", \n          '_placeholder -> \"/assets/images/default_product.png\", \n          'onchange     -> \"javascript:loadImage();\" \n        ) \n        Visualization<br> \n        <img id=\"imgProduct\" height=\"42\" width=\"42\"  \n        src=\"img/@image(\"url\").value\"></img> \n        <div class=\"form-actions\"> \n          <button type=\"submit\" class=\"btn btn-primary\"> \n            @if(id.isDefined) { Update Image } else { New Image } \n          </button> \n        </div> \n      } \n\n    } \n\n```"]