- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modularity is coming to Java with Java 9, and it's a big deal! Unlike other
    Java releases that come with added features to the language that you can optionally
    use in your code, the Java Platform Modular System is a complete change in the
    way we think about, design, and write Java applications.
  prefs: []
  type: TYPE_NORMAL
- en: This book is a detailed guide and a hands-on companion to help you learn about
    and write modular code in Java. After reading and working through the code in
    this book, you'll have a deep understanding of Java 9 modularity, its features,
    the impact on the platform, and how you can use this new paradigm to build modular
    applications yourself.
  prefs: []
  type: TYPE_NORMAL
- en: This book has been carefully designed to provide a gentle introduction to the
    topics, while gradually ramping up the scope and complexity of the topics covered.
    This is not a reference book. For example, when I introduce a concept or a feature,
    I don't provide all possible details or syntax combinations in an attempt to be
    comprehensive. My primary goal while writing this book is to help you grasp the
    concepts and gain a deep understanding of Java modularity. The ordering of topics
    and discussions in this book has been carefully crafted to make sure you always
    have the necessary knowledge to understand the topic being covered. Thus, this
    book benefits greatly from being read sequentially. Having said that, if you are
    already aware of some of the topics and you want to jump to a specific topic,
    you should be able to do that too. A handy index is provided at the end of the
    book for this purpose.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](part0021.html#K0RQ0-ed2405f4162b4f86b565edd6b6d679fb), *Introducing
    Java 9 Modularity*, covers the status quo of code structuring and management in
    Java 8 and before. It outlines the challenges and pitfalls in maintaining and
    organizing large code bases over time, with the example of a large Java code base
    everyone is familiar with--the JDK. It then introduces Project Jigsaw and explains
    how the concept of modularity attempts to solve the challenges outlined in the
    previous chapter. It discusses the module-based changes to the JDK structure as
    well as the ability to create modules in application code.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](part0033.html#VF2I0-ed2405f4162b4f86b565edd6b6d679fb), *Creating
    Your First Java Module*, gets you started on a sample code project that is written
    without using the module construct. It then guides you step-by-step through creating
    your first Java 9 module. It introduces you to the module keyword, the module-info.java
    class and how to define a custom Java module. It then covers compiling and running
    a module. It explains the structure of the .class files and how the runtime uses
    the same module definition to infer the module structure.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](part0048.html#1DOR00-ed2405f4162b4f86b565edd6b6d679fb), *Handling
    Inter-Module Dependencies*, shows how modules can hardly work well in isolation.
    They are designed to be parts of a bigger unit and are meant to work with each
    other. This chapter covers creating a second module and having the modules depend
    on each other. You''ll learn how to define such a relationship in Java 9, as well
    as how to compile and run a multi-module application.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](part0058.html#1NA0K0-ed2405f4162b4f86b565edd6b6d679fb), *Introducing
    the Modular JDK*, switches our attention to the Java platform, specifically the
    JDK. You''ll learn about the important changes to the JDK that has resulted from
    the modularization of the platform. You''ll learn about the modules that come
    out of the box with the JDK. You''ll also learn about the tools and techniques
    to browse and get more information about any of those modules.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](part0081.html#2D7TI0-ed2405f4162b4f86b565edd6b6d679fb), *Using
    Platform APIs*, teaches you how to use the platform modules in the sample application
    through a hands-on step-by-step guide. You''ll understand some of the challenges
    that you may typically face when depending on platform modules and how to solve
    them.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](part0095.html#2QJ5E0-ed2405f4162b4f86b565edd6b6d679fb), *Module
    Resolution, Readability, and Accessibility*, delves deep into inter-module dependencies
    and how you can control the level of encapsulation for their modules and libraries.
    It continues the module resolution discussion of the previous chapter by adding
    two new criteria that influences the encapsulation and availability of Java elements--accessibility
    and readability.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](part0110.html#38STS0-ed2405f4162b4f86b565edd6b6d679fb), *Introducing
    Services*, looks at a vital element of coupling that exists between two modules
    in the sample application and how that prevents the extensibility and "plugging-in"
    of new modules. It explains the new Java 9 services, provides step-by-step instructions
    to encapsulate implementation classes, and uses ServiceLoader to look them up.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](part0124.html#3M85O0-ed2405f4162b4f86b565edd6b6d679fb), *Understanding
    Linking and Using jlink*, introduces the static linking step in the Java 9 development
    process and what happens during it. It explains how linking plays an important
    part when developing modules in Java 9\. It then provides step-by-step instructions
    to create a runtime image for the sample project, how to optimize it, and how
    to execute the image.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](part0134.html#3VPBC0-ed2405f4162b4f86b565edd6b6d679fb), *Module
    Design Patterns and Strategies*, covers several best practices when it comes to
    building modular applications in Java.Â Now that you have a good understanding
    of the Java module system features and how it works, the next question is when
    and how to use them? You''ll learn how to establish module scopes and boundaries,
    how to define good module interfaces, and how to tackle some common challenges
    when building a modular application.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](part0161.html#4PHAI0-ed2405f4162b4f86b565edd6b6d679fb), *Preparing
    Your Code for Java 9*, walks you through getting an old sample code base (written
    in Java 7) ready to be migrated to Java 9\. It illustrates the optional nature
    of Java modules and how a classpath-based code is automatically assigned to an
    "unnamed" module. It then provides step-by-step instructions to get legacy code
    to compile and run in Java 9\. It also shows you how to handle issues with usage
    of encapsulated types, and how to work around them.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 11](part0172.html#5410O0-ed2405f4162b4f86b565edd6b6d679fb), *Migrating
    Your Code to Java 9*, walks you through upgrading legacy code to use the new modularity
    features of Java 9\. You''ll learn how to form a migration strategy for your code,
    as well as how to deal with dependencies that are not compatible with Java 9\.
    You''ll learn how to use Java 9 features that are designed to assist such migration,
    such as automatic modules and command-line overrides.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 12](part0187.html#5IAP60-ed2405f4162b4f86b565edd6b6d679fb), *Using
    Build Tools and Testing Java Modules*, covers two important aspects of Java programming--build
    tool integration and unit testing. You''ll learn to use Maven to structure your
    projects and align Maven''s multi-module project concepts with Java 9 modular
    applications. You''ll also learn how to test Java modules using JUnit.'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To follow the example code in this book, you'll need a computer running a reasonably
    recent version of Windows, macOS, or Linux. You'll also need a text editor to
    edit the code. I highly recommend using a text editor that allows you to open
    multiple files at a time and switch between them easily.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are a Java developer who has been coding Java applications, and you want
    to learn about the new modularity features in Java 9, you are the perfect audience
    for this book. You may working on a Java 9 modular project, or may be tasked with
    the effort to migrate an existing Java code base to Java 9, or you may have found
    the buzz around modularity in Java intriguing and want to learn more; either way,
    this is the right book for you!
  prefs: []
  type: TYPE_NORMAL
- en: This book assumes you are familiar with the Java programming language and have
    written some Java code before. It also assumes you are comfortable with the command-line
    interface in your operating system of choice. The commands you need to run will
    be provided in the book.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of text styles that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "We''ll
    first call theÂ `getContacts()`Â method on an instance ofÂ `ContactUtil`Â to get the
    hardcodedÂ `Contact`Â list."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows. Lines beginning with
    `$Â ` indicate an input command. The input command might be broken into several
    lines to aid readability, but needs to be entered as one continuous line at prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, for example, in menus or dialog boxes, appear in the text like
    this: "Click onÂ FileÂ |Â New Project, you''ll see aÂ New ProjectÂ overlay with a new
    option in theÂ `Java`Â category--Java Modular Project."'
  prefs: []
  type: TYPE_NORMAL
- en: Warnings or important notes appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Reader feedback
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome. Let us know what you think about
    this book--what you liked or disliked. Reader feedback is important for us as
    it helps us develop titles that you will really get the most out of.
  prefs: []
  type: TYPE_NORMAL
- en: To send us general feedback, simply email `feedback@packtpub.com`, and mention
    the book's title in the subject of your message.
  prefs: []
  type: TYPE_NORMAL
- en: If there is a topic that you have expertise in and you are interested in either
    writing or contributing to a book, see our author guide at [www.packtpub.com/authors](http://www.packtpub.com/authors).
  prefs: []
  type: TYPE_NORMAL
- en: Customer support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you are the proud owner of a Packt book, we have a number of things
    to help you to get the most from your purchase.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the example code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from your account at [http://www.packtpub.com](http://www.packtpub.com).
    If you purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files emailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the code files by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in or register to our website using your email address and password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hover the mouse pointer on the SUPPORT tab at the top.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Code Downloads & Errata.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name of the book in the Search box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the book for which you're looking to download the code files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose from the drop-down menu where you purchased this book from.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Code Download.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  prefs: []
  type: TYPE_NORMAL
- en: WinRAR / 7-Zip for Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zipeg / iZip / UnRarX for macOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7-Zip / PeaZip for Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/koushikkothagal/Modular-Programming-in-Java-9](https://github.com/koushikkothagal/Modular-Programming-in-Java-9).
    We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Errata
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although we have taken every care to ensure the accuracy of our content, mistakes
    do happen. If you find a mistake in one of our books--maybe a mistake in the text
    or the code--we would be grateful if you could report this to us. By doing so,
    you can save other readers from frustration and help us improve subsequent versions
    of this book. If you find any errata, please report them by visiting [http://www.packtpub.com/submit-errata](http://www.packtpub.com/submit-errata),
    selecting your book, clicking on the Errata Submission Form link, and entering
    the details of your errata. Once your errata are verified, your submission will
    be accepted and the errata will be uploaded to our website or added to any list
    of existing errata under the Errata section of that title.
  prefs: []
  type: TYPE_NORMAL
- en: To view the previously submitted errata, go to [https://www.packtpub.com/books/content/support](https://www.packtpub.com/books/content/support)
    and enter the name of the book in the search field. The required information will
    appear under the Errata section.
  prefs: []
  type: TYPE_NORMAL
- en: Piracy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Piracy of copyrighted material on the internet is an ongoing problem across
    all media. At Packt, we take the protection of our copyright and licenses very
    seriously. If you come across any illegal copies of our works in any form on the
    internet, please provide us with the location address or website name immediately
    so that we can pursue a remedy.
  prefs: []
  type: TYPE_NORMAL
- en: Please contact us at `copyright@packtpub.com` with a link to the suspected pirated
    material.
  prefs: []
  type: TYPE_NORMAL
- en: We appreciate your help in protecting our authors and our ability to bring you
    valuable content.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have a problem with any aspect of this book, you can contact us at `questions@packtpub.com`,
    and we will do our best to address the problem.
  prefs: []
  type: TYPE_NORMAL
