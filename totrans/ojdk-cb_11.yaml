- en: Chapter 11. Troubleshooting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigating through the process workflow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Submitting a defect to the OpenJDK bug systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a patch using NetBeans
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a code review
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenJDK's openness is its most valuable feature in our fast-paced world. We
    can be sure that it will never vanish and be forgotten when it is needed. If its
    support is discontinued, we can support it ourselves. We could fix bugs independently,
    since the code is open.
  prefs: []
  type: TYPE_NORMAL
- en: However, OpenJDK, as well as the Oracle Java implementation, still contains
    a lot of issues. Some of them are security issues and should be fixed as soon
    as possible. Some of the issues may be almost invisible or even valuable only
    for a virtually nonexistent percent of customers. They might never be fixed in
    production JDK, but everyone has an opportunity to try to do it for himself/herself.
  prefs: []
  type: TYPE_NORMAL
- en: OpenJDK in the past used a Bugzilla bug tracker to track bugs. Bugzilla is a
    well-known, but morally outdated project, initially written in 1998 by Terry Weissman.
    It was open source from the beginning, and it is used even now by thousands of
    people around the world. It is very simple and easy to use.
  prefs: []
  type: TYPE_NORMAL
- en: However, some time ago, the OpenJDK foundation decided to switch from Bugzilla
    to JIRA, a proprietary but powerful bug tracking system mostly written in Java.
    JIRA provides support for different types of workflow, such as Scrum, Kanban,
    and custom Agile workflows, as well as incorporating all the Bugzilla features.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes there are opportunities to enlarge the OpenJDK functionality and create
    a fully-functioning JSR prototype to contribute to OpenJDK development with great
    benefits to your projects. Sometimes you need to switch to other implementations,
    such as GNU classpath, or even merge some solutions into your specific version.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will see how the process workflow is organized, what steps
    are needed to be followed, and how to cope with the community process. Also, we
    will see how to submit a bug, and create a patch on it.
  prefs: []
  type: TYPE_NORMAL
- en: Navigating through the process workflow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The knowledge of process workflows, and of how things are done in complex projects
    like OpenJDK, is critical for a developer. In this recipe, we will explain how
    things are done while contributing to OpenJDK. We will explain how the work is
    organized, and how the team co-operates.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will need an Internet connection and a browser.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will go through the OpenJDK process workflow and see what to do to contribute
    to OpenJDK. There are a few initial steps to be followed before you start with
    the workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, you need to become a contributor. To do so, you need to sign an Oracle
    Contributor Agreement, and e-mail it to Oracle.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You may find these links useful:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How to become a contributor at [http://openjdk.java.net/contribute/](http://openjdk.java.net/contribute/)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Know what is discussed at [http://mail.openjdk.java.net/mailman/listinfo](http://mail.openjdk.java.net/mailman/listinfo)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Then you need to find something interesting to work with.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, you are free to discuss and submit patches using the JIRA bug tracking
    system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s suppose that you''ve found a bug:'
  prefs: []
  type: TYPE_NORMAL
- en: When the bug is found, check whether it's already in JIRA.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Issues** and search for issues. You will see the following screen:![How
    to do it...](img/8405OT_11_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the highlighted section, you can see a filter panel. Use it in combination
    with the keyword search. Also, notice the **Switch to Advanced** link in the right
    corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the bug is not present already in JIRA, create a JIRA issue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: JIRA is a commonly used bug tracker tool. You can find how to add issues at
    [https://confluence.atlassian.com/display/JIRA/](https://confluence.atlassian.com/display/JIRA/).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you don't know how to resolve the issue, this is the successful ending of
    your involvement here. The OpenJDK team will be grateful to know all usable information
    about this problem. If you have anything to add, you are welcome to post information
    in comments.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: However, if you feel that you can resolve the issue, comment on it and indicate
    that you are working on the solution. In some circumstances, you need to wait
    until the JIRA ticket is assigned to you. Individual workflows use different approaches
    in this regards.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, resolve the solution and create the patch.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The patch creating process is described in the *Creating a patch using NetBeans*
    recipe in this chapter. you will also find some useful information about building,
    debugging, and editing OpenJDK code in [Chapter 8](ch08.html "Chapter 8. Hacking
    OpenJDK"), *Hacking OpenJDK*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you are a committer (for example, you have the commit right to the OpenJDK
    repository), you are free to create a code review using webrev (use information
    from [https://bitbucket.org/adoptopenjdk/betterrev](https://bitbucket.org/adoptopenjdk/betterrev)
    to learn how to create a code review). When it is approved, you may commit your
    changes to the repository and mark your issue as resolved.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are not a committer, you can also create a webrev review, but the commit
    process differs slightly. You might push your code changes to the Bitbucket repository
    along with a `pull` request. It is described in detail in the *Creating a code
    review* recipe. Read more about the OpenJDK testing process in [Chapter 9](ch09.html
    "Chapter 9. Testing OpenJDK"), *Testing OpenJDK*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: OpenJDK has an established workflow, which can differ from one project to another.
    In all cases, though there are rules of teamwork, one should follow them in order
    to make the work productive.
  prefs: []
  type: TYPE_NORMAL
- en: Under the hood of this process, there are other team members whose function
    is to review and test the changes.
  prefs: []
  type: TYPE_NORMAL
- en: Submitting a defect to the OpenJDK bug systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will show you how to submit a defect to OpenJDK bug systems. This
    bug system is used by people who do not have developer access to OpenJDK. For
    OpenJDK developers, there is JIRA.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will consider the necessary steps to submit a defect to OpenJDK.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will describe some prerequisites to fill a bug report:'
  prefs: []
  type: TYPE_NORMAL
- en: First, do a quick search for bugs. It is possible that a similar or even identical
    bug has already been created. Even if you have something more to say on the subject,
    please do it in the existing topic without creating a new one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, think about the defect's reproducibility. There is a need to describe
    in detail how to reproduce your defect and cases in which it can and cannot be
    reproduced.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Also, you can make and add logs, traces, and other debug information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Please include the fullest possible logs, without cutouts. Even one string in
    the log may be critical.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Also, you may include screenshots along with your logs, especially when you
    are describing an UI issue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try to include as much system information as possible. For example, for the
    *Sumatra* project, even your graphics card driver version may be helpful.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If we need to report an issue without referring to code pieces to describe
    it generally and not specifically, we can fill the standard bug report as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: Fill the fields as shown in the following screenshot:![How to do it...](img/8405OT_11_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then click on **Continue**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will then be required to provide some information to receive the feedback
    from the team:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/8405OT_11_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The OpenJDK project has a bug report system for non-developers to which you
    can submit your changes where it's convenient. However, it has a JIRA bug tracker,
    which is used by developers to work in more complex ways with various bugs.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a patch using NetBeans
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will show you how to create a patch of the OpenJDK project using
    NetBeans.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need a configured development environment. It is preferable that you
    use NetBeans since NetBeans is a standard tool for developing and debugging OpenJDK.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will do a simple patch creation with Mercurial and NetBeans by following
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the OpenJDK project with NetBeans.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make some changes in the project code as shown:![How to do it...](img/8405OT_11_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, follow the chain of context menus, as shown in the preceding screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **OK** button.![How to do it...](img/8405OT_11_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your patch will be saved to the specified directory. Later, you can apply patches
    using the **Apply Diff Patch** item in the Mercurial context menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: NetBeans calls a program that exports a diff (your uncommitted changes versus
    the head revision in the repository) to a file that can be read and applied when
    needed.
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Also, diffs between different divisions can also be exported. To do that, simply
    click on the highlighted item:'
  prefs: []
  type: TYPE_NORMAL
- en: '![See also...](img/8405OT_11_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a code review
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenJDK uses webrev as the code review tool. The process of creating a code
    review and handling lies on the shoulders of the AdoptOpenJDK community, which
    developed a web tool called **Betterrev**. Review Board along with the Mercurial
    plugin can be used as well. It automatically generates code reviews, synchronizes
    with Oracle repository, and performs other useful tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will need a computer capable of building OpenJDK and which can handle a large
    amount of code. Also, we will need a development environment installed, as described
    in [Chapter 8](ch08.html "Chapter 8. Hacking OpenJDK"), *Hacking OpenJDK*. We
    will also need Internet access.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will create a code review using the Betterrev tool, by following the given
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: First, let's clone a repository from Bitbucket.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the Betterrev Bitbucket at [https://bitbucket.org/adoptopenjdk/betterrev/src](https://bitbucket.org/adoptopenjdk/betterrev/src):![How
    to do it...](img/8405OT_11_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fork it, using the highlighted button:![How to do it...](img/8405OT_11_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify the repository name in the **Name** field, and add a description if
    needed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **This is a private repository** checkbox if you want to make your
    repository private.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Fork repository** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will see the following screen for a while. It will take some time, but don't
    worry, all is going well.![How to do it...](img/8405OT_11_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make changes that has to be reviewed in the code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Commit them to your local repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Perform a pull request as shown:![How to do it...](img/8405OT_11_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Betterrev will automatically generate a review for your issue.
  prefs: []
  type: TYPE_NORMAL
