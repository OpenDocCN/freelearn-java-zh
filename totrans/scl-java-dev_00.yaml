- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When I tell people around me that I now program in Scala rather than Java,
    I often get the question, "So, in simple words, what is the main advantage of
    using Scala compared to Java?" I tend to respond with this: "With Scala, you reason
    and program closer to the domain, closer to plain English". **Raising the level
    of abstraction** is often the terminology employed to describe programs in a more
    readable and natural way for humans to understand rather than the zeros and ones
    understood by computers.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As computer systems that are encountered in telecom, manufacturing or financial
    applications mature and grow, different forms of complexity tend to emerge, which
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Complexity due to the addition of supported features, for example, the variety
    of contract alternatives in an insurance system or the introduction of complicated
    algorithms to solve new challenges in our evolving society
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Complexity to offset the limitations of technologies; for instance, making a
    system distributed to handle larger loads or improve reliability and response
    time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accidental complexity, which is introduced because of factors other than the
    problem at stake, such as integration between legacy systems and not really compatible
    technologies, short-term workarounds to reach the consumer market in a quicker
    way, or misunderstanding how a large system is designed as a whole when many resources
    with different backgrounds and styles are contributing in a short period of time
    to a large code base
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third complexity is clearly unwanted and should be reduced to a minimum
    if not eliminated, whereas the other two should remain manageable. Scala tackles
    all of them, and the complexity of the business domain is something that will
    be manageable only if a system can be described in code as if it was described
    in well-written English.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the past few years, the ability of many languages to express behaviors in
    a more concise way than the traditional object-oriented way is largely due to
    the increasing popularity of **functional programming** (**FP**), a paradigm that
    has been around for a very long time but until recently thought of as a competitor
    to the so-called imperative programming languages such as C or Java. Michael Feathers
    nicely outlined the apparent duality between the two in the following statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '"OO makes code understandable by encapsulating moving parts. FP makes code
    understandable by minimizing moving parts."'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The former focuses on breaking a large system into smaller, reusable parts.
    These parts are easy to reason about as they are modeled according to real-life
    objects. They use interfaces between them and are meant to encapsulate a mutating
    state. The latter emphasizes on the combination of functions that have ideally
    no side effects. It means that their result depends only on their input arguments,
    leading to minimizing or removing a mutating state in a program.
  prefs: []
  type: TYPE_NORMAL
- en: The declarative nature of FP, supported by Scala, aims at writing code to express
    "what is to be done" rather than "how to do it". Moreover, the FP approach tends
    to make algorithms more concise by composing (combining functions together), whereas
    the imperative approach tends to introduce side effects, that is, changes in the
    program state that will make it more difficult to see the algorithm, in its whole,
    in a concise way.
  prefs: []
  type: TYPE_NORMAL
- en: This book will show Java developers that Scala is a significant yet natural
    evolution from Java by reasoning at a higher level of abstraction. Making the
    transition should ultimately lead to a more robust, maintainable, and fun software.
  prefs: []
  type: TYPE_NORMAL
- en: The intent of this book is not so much about exploring the design or deep features
    of the language as well as its exhaustive syntax; there are already a number of
    excellent books about the Scala language, notably by the creator of the language
    himself, Martin Odersky, and people working with him at Typesafe.
  prefs: []
  type: TYPE_NORMAL
- en: Our aim is to concentrate on helping current Java developers to get started
    and feel comfortable using the language, and to make their daily job more productive
    and fun.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](ch01.html "Chapter 1. Programming Interactively within Your Project"),
    *Programming Interactively within Your Project*, provides a short introduction
    about the **JVM** (**Java Virtual Machine**) and some of the key features that
    have made Java successful. We will then start getting our hands dirty and experiment
    with the Scala **REPL** (short for, **Read Eval Print Loop**), a powerful tool
    to program interactively. We will introduce some of the powerful constructs of
    Scala that make programming not only enjoyable but also intuitive and productive.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. Code Integration"), *Code Integration*, is
    about making Scala and Java code collaborate under the same code base. Topics
    of interest in this chapter are interoperability between Java and Scala collections,
    and wrapping existing Java libraries with Scala. Moreover, we will touch on the
    topic of coding style, in particular, by comparing the well-established Java coding
    best practices to the more recent Scala guidelines.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.html "Chapter 3. Understanding the Scala Ecosystem"), *Understanding
    the Scala Ecosystem*, helps you to know the Scala development ecosystem and its
    surrounding tools, most of which are being more or less inherited from Java. In
    particular, Java frameworks such as Maven, and IDEs such as Eclipse, cannot be
    overlooked. In addition to the essential elements of the development cycle, we
    will cover Scala-specific tools such as SBT, Scala Worksheets, and the introduction
    of Typesafe''s Activator and its templates.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](ch04.html "Chapter 4. Testing Tools"), *Testing Tools*, is a follow-up
    on the essential tools of a Scala developer, focusing on reviewing most of the
    useful tools for unit, integration, and functional testing of test data as well
    automated property-based testing.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](ch05.html "Chapter 5. Getting Started with the Play Framework"),
    *Getting Started with the Play Framework*, will give you a concrete introduction
    to the Play Framework, where we will show you some of the cool features of Play
    that make one want to migrate from a more traditional servlet/J2EE model.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](ch06.html "Chapter 6. Database Access and the Future of ORM"),
    *Database Access and the Future of ORM*, covers tackling the persistence of data
    in relational databases, whether you want to reuse well-established technologies
    such as JPA/Hibernate, or move to more innovative yet promising alternatives such
    as **SLICK** (**Scala Language-Integration Connection Kit**), an interesting alternative
    to traditional ORM merely based on the power of the Scala language. Moreover,
    we will see how to reverse-engineer the existing relational databases into Play
    CRUD applications as a starting point in migrating Java projects.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](ch07.html "Chapter 7. Working with Integration and Web Services"),
    *Working with Integration and Web Services*, covers technologies that are found
    everywhere in today''s Java development. In this chapter, we will explore how
    integrating with the external systems applies to the Scala world and what the
    benefits are. Topics included in this chapter relate to Web Services through SOAP
    XML, REST, and JSON.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](ch08.html "Chapter 8. Essential Properties of Modern Applications
    – Asynchrony and Concurrency"), *Essential Properties of Modern Applications –
    Asynchrony and Concurrency*, refers to two aspects of scalable applications''
    development. To achieve better performance, software projects are often encouraged
    to introduce asynchronous invocations and concurrent code. Through this chapter,
    we will show that the more functional side of Scala can make this complexity more
    manageable and maintainable. We will also introduce the Akka framework, a toolkit
    to simplify the development of concurrent applications.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](ch09.html "Chapter 9. Building Reactive Web Applications"), *Building
    Reactive Web Applications*, takes the previous chapter one step further and introduces
    a new class of applications that has emerged in the market: reactive applications.
    They are characterized by their interactivity, the ability to push information
    to end users, elasticity to adapt to changes in load, and the ability to recover
    from failures. The aim of this chapter is to build such an app in Play using concepts
    learned throughout the book as well as emerging technologies such as WebSockets.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](ch10.html "Chapter 10. Scala Goodies"), *Scala Goodies*, concludes
    this book with some perspectives on the future of web development. For example,
    Java developers are more and more exposed to JavaScript on the client side, whether
    they like it or not. Another example is the emergence of **Domain Specific Languages**
    (**DSLs**), a nontrivial task to achieve in Java.'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As Scala runs on the Java Platform **JVM** (short for Java Virtual Machine),
    you will be able to write and execute the code provided in the book on any computer
    that supports the Java standard edition. To set up the tools that you need, refer
    to [Chapter 1](ch01.html "Chapter 1. Programming Interactively within Your Project"),
    *Programming Interactively within Your Project* and [Chapter 3](ch03.html "Chapter 3. Understanding
    the Scala Ecosystem"), *Understanding the Scala Ecosystem*
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is obviously targeted mostly for developers. We want to help Java
    programmers to get started and feel comfortable with both the syntax of the language
    and the tools. We will achieve this by exploring progressively some of the new
    concepts brought by Scala, in particular, how to unify the best of Object-Oriented
    and functional programming without giving away any of the established and mature
    technologies built around Java for the past fifteen years.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of styles of text that distinguish between
    different kinds of information. Here are some examples of these styles, and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "We
    can include other contexts through the use of the `include` directive."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, in menus or dialog boxes for example, appear in the text like this:
    "Out of curiosity, you may click on the **Code view & Open in IDE** tab and then
    on the **Run** tab."'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Reader feedback
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome. Let us know what you think about
    this book—what you liked or may have disliked. Reader feedback is important for
    us to develop titles that you really get the most out of.
  prefs: []
  type: TYPE_NORMAL
- en: To send us general feedback, simply send an e-mail to `<[feedback@packtpub.com](mailto:feedback@packtpub.com)>`,
    and mention the book title via the subject of your message.
  prefs: []
  type: TYPE_NORMAL
- en: If there is a topic that you have expertise in and you are interested in either
    writing or contributing to a book, see our author guide on [www.packtpub.com/authors](http://www.packtpub.com/authors).
  prefs: []
  type: TYPE_NORMAL
- en: Customer support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you are the proud owner of a Packt book, we have a number of things
    to help you to get the most from your purchase.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the example code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: Errata
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although we have taken every care to ensure the accuracy of our content, mistakes
    do happen. If you find a mistake in one of our books—maybe a mistake in the text
    or the code—we would be grateful if you would report this to us. By doing so,
    you can save other readers from frustration and help us improve subsequent versions
    of this book. If you find any errata, please report them by visiting [http://www.packtpub.com/submit-errata](http://www.packtpub.com/submit-errata),
    selecting your book, clicking on the **errata** **submission** **form** link,
    and entering the details of your errata. Once your errata are verified, your submission
    will be accepted and the errata will be uploaded on our website, or added to any
    list of existing errata, under the Errata section of that title. Any existing
    errata can be viewed by selecting your title from [http://www.packtpub.com/support](http://www.packtpub.com/support).
  prefs: []
  type: TYPE_NORMAL
- en: Piracy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Piracy of copyright material on the Internet is an ongoing problem across all
    media. At Packt, we take the protection of our copyright and licenses very seriously.
    If you come across any illegal copies of our works, in any form, on the Internet,
    please provide us with the location address or website name immediately so that
    we can pursue a remedy.
  prefs: []
  type: TYPE_NORMAL
- en: Please contact us at `<[copyright@packtpub.com](mailto:copyright@packtpub.com)>`
    with a link to the suspected pirated material.
  prefs: []
  type: TYPE_NORMAL
- en: We appreciate your help in protecting our authors, and our ability to bring
    you valuable content.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can contact us at `<[questions@packtpub.com](mailto:questions@packtpub.com)>`
    if you are having a problem with any aspect of the book, and we will do our best
    to address it.
  prefs: []
  type: TYPE_NORMAL
