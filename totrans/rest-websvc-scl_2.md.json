["```java\n  lazy val finchVersion = \"0.7.0\"\n\n  val backendDeps = Seq(\n    \"com.github.finagle\" %% \"finch-core\" % finchVersion\n  )\n```", "```java\npackage org.restwithscala.chapter2.gettingstarted\n\nimport io.finch.route._\nimport com.twitter.finagle.Httpx\n\nobject HelloFinch extends App {\n\n  Httpx.serve(\":8080\", (Get / \"hello\" /> \"Hello, Finch!\").toService)\n\n  println(\"Press <enter> to exit.\")\n  Console.in.read.toChar\n}\n```", "```java\n$ sbt runCH02-HelloFinch\n[info] Loading project definition from /Users/jos/dev/git/rest-with-scala/project\n[info] Set current project to rest-with-scala (in build file:/Users/jos/dev/git/rest-with-scala/)\n[info] Running org.restwithscala.chapter2.gettingstarted.HelloFinch \nJun 26, 2015 9:38:00 AM com.twitter.finagle.Init$$anonfun$1 apply$mcV$sp\nINFO: Finagle version 6.25.0 (rev=78909170b7cc97044481274e297805d770465110) built at 20150423-135046\nPress <enter> to exit.\n\n```", "```java\n$ sbt runCH02-runCH02Step1\n[info] Loading project definition from /Users/jos/dev/git/rest-with-scala/project\n[info] Set current project to rest-with-scala (in build file:/Users/jos/dev/git/rest-with-scala/)\n[info] Running org.restwithscala.chapter2.steps.FinchStep1 \nJun 26, 2015 10:19:11 AM com.twitter.finagle.Init$$anonfun$1 apply$mcV$sp\nINFO: Finagle version 6.25.0 (rev=78909170b7cc97044481274e297805d770465110) built at 20150423-135046\nPress <enter> to exit.\n\n```", "```java\npackage org.restwithscala.chapter2.steps\n\nimport com.twitter.finagle.Httpx\nimport io.finch.request._\nimport io.finch.route._\nimport io.finch.{Endpoint => _}\n\nobject FinchStep1 extends App {\n\n  // handle a single post using a RequestReader\n  val taskCreateAPI = Post / \"tasks\" /> (\n    for {\n      bodyContent <- body\n    } yield s\"created task with: $bodyContent\")\n\n  // Use matchers and extractors to determine which route to call\n  // For more examples, see the source file.\n  val taskAPI = Get / \"tasks\" />\n            \"Get a list of all the tasks\" | Get / \"tasks\" / long />\n            ( id => s\"Get a single task with id: $id\" ) | Put / \"tasks\" / long />\n            ( id => s\"Update an existing task with id  $id to \" ) | Delete / \"tasks\" / long />\n            ( id => s\"Delete an existing task with $id\" )\n\n  // a simple server that combines the two routes\n  val server = Httpx.serve(\":8080\", \n            (taskAPI :+: taskCreateAPI).toService )\n\n  println(\"Press <enter> to exit.\")\n  Console.in.read.toChar\n\n  server.close()\n}\n```", "```java\nobject FinchStep2 extends App {\n\n  val matchTask: Matcher = \"tasks\"\n  val matchTaskId = matchTask / long\n\n  // handle a single post using a RequestReader\n  val taskCreateAPI =\n        Get / matchTask /> GetAllTasks() :+:\n       Post / matchTask /> CreateNewTask() :+:\n     Delete / matchTaskId /> DeleteTask :+:\n        Get / matchTaskId /> GetTask :+:\n        Put / matchTaskId /> UpdateTask\n\n  val taskAPI = ...\n\n  val server = Httpx.serve(\":8080\", \n                          (taskAPI :+: taskCreateAPI).toService )\n\n  println(\"Press <enter> to exit.\")\n  Console.in.read.toChar\n\n  server.close()\n\n  sealed trait BaseTask {\n\n    def getRequestToTaskReader(id: Long): RequestReader[Task] = {\n      ( RequestReader.value(id) :: \n        param(\"title\") :: \n        body :: \n        RequestReader.value(None:Option[Person]) ::\n        RequestReader.value(List.empty[Note]) ::\n        RequestReader.value(Status(\"\"))\n        ).as[Task]\n    }\n  }\n\n  case class CreateNewTask() extends Service[Request, String] \n                                                   with BaseTask {\n\n    def apply(req: Request): Future[String] = {\n      val p = for {\n        task <- getRequestToTaskReader(-1)(req)\n        stored <- TaskService.insert(task)\n      } yield stored\n\n      p.map(_.toString)\n    }\n  }\n\n  case class DeleteTask(id: Long) \n                          extends Service[Request, HttpResponse] {\n\n    def apply(req: Request): Future[HttpResponse] = \n      TaskService.delete(id).map {\n        case Some(task) => Ok()\n        case None => NotFound()\n      }\n  }\n\n  case class GetAllTasks() extends Service[Request, HttpResponse] {\n\n    def apply(req: Request): Future[HttpResponse] = {\n      for {\n        tasks <- TaskService.all\n      } yield Ok(tasks.mkString(\":\"))\n    }\n  }\n\n  case class GetTask(taskId: Long) \n                           extends Service[Request, HttpResponse] {\n    def apply(req: Request): Future[HttpResponse] = {\n      TaskService.select(taskId).map {\n        case Some(task) => Ok(task.toString)\n        case None => NotFound()\n      }\n    }\n  }\n\n  case class UpdateTask(taskId: Long) \n             extends Service[Request, HttpResponse] with BaseTask {\n    def apply(req: Request): Future[HttpResponse] =\n      for {\n        task <- getRequestToTaskReader(taskId)(req)\n        stored <- TaskService.update(task)\n      } yield stored match {\n        case Some(task) => Ok(task.toString)\n        case None => NotFound()\n      }\n  }\n}\n```", "```java\n$ sbt runCH02-runCH02Step2\n[info] Loading project definition from /Users/jos/dev/git/rest-with-scala/project\n[info] Set current project to rest-with-scala (in build file:/Users/jos/dev/git/rest-with-scala/)\n[info] Compiling 1 Scala source to /Users/jos/dev/git/rest-with-scala/chapter-02/target/scala-2.11/classes...\n[info] Running org.restwithscala.chapter2.steps.FinchStep2 \nJun 27, 2015 10:26:49 AM com.twitter.finagle.Init$$anonfun$1 apply$mcV$sp\nINFO: Finagle version 6.25.0 (rev=78909170b7cc97044481274e297805d770465110) built at 20150423-135046\nPress <enter> to exit.\n\n```", "```java\n  val matchTask: Matcher = \"tasks\"\n  val taskCreateAPI = Post / matchTask /> CreateNewTask()\n\n  ...\n\n  sealed trait BaseTask {\n\n    def getRequestToTaskReader(id: Long): RequestReader[Task] = {\n      ( RequestReader.value(id) :: \n        param(\"title\") :: \n        body :: \n        RequestReader.value(None:Option[Person]) ::\n        RequestReader.value(List.empty[Note]) ::\n        RequestReader.value(Status(\"\"))\n        ).as[Task]\n    }\n  }\n\n  case class CreateNewTask() extends Service[Request, String] \n                                                   with BaseTask {\n\n    override def apply(req: Request): Future[String] = {\n      val p = for {\n        task <- getRequestToTaskReader(-1)(req)\n        stored <- TaskService.insert(task)\n      } yield stored\n\n      p.map(_.toString)\n    }\n  }\n```", "```java\n    def getRequestToTaskReader(id: Long): RequestReader[Task] = {\n      ( RequestReader.value(id) :: \n        param(\"title\") :: \n        body :: \n        RequestReader.value(Option.empty[Person]) ::\n        RequestReader.value(List.empty[Note]) ::\n        RequestReader.value(Status(\"\"))\n        ).as[Task]\n    }\n```", "```java\ncase class Task(id: Long, title: String, content: String, \n                assignedTo: Option[Person], notes: List[Note],\n                status: Status)\n```", "```java\nimplicit val moneyDecoder: DecodeRequest[Money] = \n         DecodeRequest(s => Try(new Money(s.toDouble)))\n```", "```java\n$ sbt runCH02-runCH02Step3\n[info] Loading project definition from /Users/jos/dev/git/rest-with-scala/project\n[info] Set current project to rest-with-scala (in build file:/Users/jos/dev/git/rest-with-scala/)\n[info] Running org.restwithscala.chapter2.steps.FinchStep3 \nJun 27, 2015 1:58:20 PM com.twitter.finagle.Init$$anonfun$1 apply$mcV$sp\nINFO: Finagle version 6.25.0 (rev=78909170b7cc97044481274e297805d770465110) built at 20150423-135046\nPress <enter> to exit.\n\n```", "```java\n  lazy val finchVersion = \"0.7.0\"\n\n  val backendDeps = Seq(\n    \"com.github.finagle\" %% \"finch-core\" % finchVersion,\n    \"com.github.finagle\" %% \"finch-argonaut\" % finchVersion\n  )\n```", "```java\nimplicit def personDecoding: DecodeJson[Person] = jdecode1L(Person.apply)(\"name\")\n\nimplicit def personEncoding: EncodeJson[Person] = jencode1L((u: Person) => (u.name))(\"name\")\n\nimplicit def statusDecoding: DecodeJson[Status] = jdecode1L(Status.apply)(\"status\")\n\nimplicit def statusEncoding: EncodeJson[Status] = jencode1L((u: Status) => (u.status))(\"status\")\n\nimplicit def noteDecoding: DecodeJson[Note] = jdecode2L(Note.apply)(\"id\", \"content\")\n\nimplicit def noteEncoding: EncodeJson[Note] = jencode2L((u: Note) => (u.id, u.content))(\"id\", \"content\")\n\nimplicit def taskDecoding: DecodeJson[Task] = jdecode6L(Task.apply)\n    (\"id\", \"title\", \"content\", \"assignedTo\", \"notes\", \"status\") \nimplicit def taskEncoding: EncodeJson[Task] = jencode6L( (u: Task) => (u.id, u.title, u.content,\n                u.assignedTo, u.notes, u.status))\n  (\"id\", \"title\", \"content\", \"assignedTo\", \"notes\", \"status\" )\n```", "```java\nval matchTask: Matcher = \"tasks\"\nval matchTaskId = matchTask / long\n\nval taskCreateAPI =\n        Get / matchTask /> GetAllTasks() :+:\n       Post / matchTask /> CreateNewTask() :+:\n     Delete / matchTaskId /> DeleteTask \n\n  ...\n\n  case class CreateNewTask() extends Service[Request, HttpResponse] {\n\n    def apply(req: Request): Future[HttpResponse] = {\n      for {\n        task <- body.as[Task].apply(req)\n        stored <- TaskService.insert(task)\n      } yield Ok(stored)\n    }\n  }\n\n  case class DeleteTask(id: Long) \n           extends Service[Request, HttpResponse] {\n    def apply(req: Request): Future[HttpResponse] =\n                                       TaskService.delete(id).map {\n      case Some(task) => Ok()\n      case None => NotFound()\n    }\n  }\n\n  case class GetAllTasks() extends Service[Request, HttpResponse] {\n    def apply(req: Request): Future[HttpResponse] = {\n      for {\n        tasks <- TaskService.all\n      } yield Ok(tasks)\n    }\n  }\n```", "```java\n$ sbt runCH02-runCH02Step4\n[info] Loading project definition from /Users/jos/dev/git/rest-with-scala/project\n[info] Set current project to rest-with-scala (in build file:/Users/jos/dev/git/rest-with-scala/)\n[info] Compiling 1 Scala source to /Users/jos/dev/git/rest-with-scala/chapter-02/target/scala-2.11/classes...\n[info] Running org.restwithscala.chapter2.steps.FinchStep4 \nJun 28, 2015 2:10:12 PM com.twitter.finagle.Init$$anonfun$1 apply$mcV$sp\nINFO: Finagle version 6.25.0 (rev=78909170b7cc97044481274e297805d770465110) built at 20150423-135046\nPress <enter> to exit.\n\n```", "```java\n// uses the following route\n// Get / matchTask / \"search\" /> SearchTasks()\n\ncase class SearchParams(status: String, text: Option[String])\n\ncase class SearchTasks() extends Service[Request, HttpResponse] {\n\n    def getSearchParams: RequestReader[SearchParams] = (\n          param(\"status\") ::\n          paramOption(\"text\").should(beLongerThan(5))\n        ).as[SearchParams]\n\n    def apply(req: Request): Future[HttpResponse] = {\n      (for {\n        searchParams <- getSearchParams(req)\n        tasks <- TaskService.search\n                   (searchParams.status, searchParams.text)\n      } yield Ok(tasks)).handle({case t: Throwable => \n                                         BadRequest(errorToJson(t))})\n    }\n\n    def errorToJson(t: Throwable):Json = t match {\n\n      case NotPresent(ParamItem(param)) =>\n        Json(\"error\" -> Json.jString(\"param not found\"), \n                                     \"param\" -> Json.jString(param))\n      case NotValid(ParamItem(param), rule) =>\n        Json(\"error\" -> Json.jString(\"param not valid\"), \n                                     \"param\" -> Json.jString(param), \n                                     \"rule\" -> Json.jString(rule))\n      case RequestErrors(errors) =>\n                          Json.array(errors.map(errorToJson(_)):_*)\n      case error:Throwable => Json(\"error\" -> \n                          Json.jString(error.toString))\n    }\n  }\n```", "```java\n    def getSearchParams: RequestReader[SearchParams] = (\n          param(\"status\") ::\n          paramOption(\"text\").should(beLongerThan(5))\n        ).as[SearchParams]\n```", "```java\n    val shouldBeLowerCase = ValidationRule[String](\"be lowercase\") {!_.exists((c: Char) => c.isUpper) }\n\n    def getSearchParams: RequestReader[SearchParams] = (\n          param(\"status\") ::\n          paramOption(\"text\").should(beLongerThan(5) and shouldBeLowerCase)\n        ).as[SearchParams]\n```", "```java\n  Ok.withCharset(Some(\"UTF-8\"))\n    .withContentType(Some(\"text/plain\"))\n    .withHeaders((\"header1\" -> \"header1Value\"),\n                 (\"header2\" -> \"header2Value\"))(\"body\")\n```"]