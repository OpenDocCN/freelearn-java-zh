["```java\n…\nimport { FormsModule } from '@angular/forms';\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```", "```java\n<form>\n  <p>\n    <label for=\"email\">Email </label>\n    <input type=\"text\" id=\"email\" name=\"email\">\n  </p>\n  <p>\n    <label for=\"firstname\">First Name</label>\n    <input type=\"text\" id=\"firstname\" name=\"firstname\">\n  </p>\n  <p>\n    <label for=\"lastname\">Last Name</label>\n    <input type=\"text\" id=\"lastname\" name=\"lastname\">\n  </p>\n  <button type=\"submit\">Submit</button>\n</form>\n```", "```java\n<form #userForm=\"ngForm\">\n```", "```java\n<form #userForm=\"ngForm\">\n  <p>\n    <label for=\"firstname\">First Name</label>\n    <input type=\"text\" name=\"firstname\" ngModel>\n  </p>\n  <p>\n    <label for=\"lastname\">Last Name</label>\n    <input type=\"text\" name=\"lastname\" ngModel>\n  </p>\n  <p>\n    <label for=\"email\">Email </label>\n    <input type=\"text\" id=\"email\" name=\"email\" ngModel>\n  </p>\n</form>\n```", "```java\n<!—HTML template -- >\n<form #userForm=\"ngForm\" (ngSubmit)=\"onSubmit(userForm)\">\n<!—typescript file (Component class) -- >\nonSubmit(contactForm) {\n    console.log(userForm.value);\n }\n```", "```java\n<form #userForm=\"ngForm\"(ngSubmit)=\"onSubmit(userForm)\">>\n  <p>\n    <label for=\"firstname\">First Name</label>\n    <input type=\"text\" name=\"firstname\" ngModel>\n  </p>\n  <p>\n    <label for=\"lastname\">Last Name</label>\n    <input type=\"text\" name=\"lastname\" ngModel>\n  </p>\n  <p>\n    <label for=\"email\">Email </label>\n    <input type=\"text\" id=\"email\" name=\"email\" ngModel>\n  </p>\n <button type=\"submit\">Submit</button>\n</form>\n```", "```java\nuserForm = new FormGroup({})\n```", "```java\nuserForm = new FormGroup({\n  email: new FormControl(),\n  firstName: new FormControl(),\n  lastName: new FormControl(),\n});\n```", "```java\n<form [formGroup]=\"userForm\" (ngSubmit)=\"onSubmit()\">\n   <p>\n    <label for=\"email\">Email </label>\n    <input type=\"text\" id=\"email\" name=\"email\"\n      formControlName=\"email\">\n  </p>\n  <p>\n    <label for=\"firstname\">First Name </label>\n    <input type=\"text\" id=\"firstname\" name=\"firstName\"\n      formControlName=\"firstname\">\n  </p>\n  <p>\n    <label for=\"lastname\">Last Name </label>\n    <input type=\"text\" id=\"lastname\" name=\"lastname\"\n      formControlName=\"lastName\">\n  </p>\n  <p>\n    <button type=\"submit\">Submit</button>\n  </p>\n</form>\n```", "```java\nsetValue(value: TValue, options?: { onlySelf?: boolean; emitEvent?: boolean; emitModelToViewChange?: boolean; emitViewToModelChange?: boolean; }): void\n```", "```java\npatchValue(value: TValue, options?: { onlySelf?: boolean; emitEvent?: boolean; emitModelToViewChange?: boolean; emitViewToModelChange?: boolean; }): void\n```", "```java\ngetRawValue(): TValue\n```", "```java\nreset(formState?: TValue | FormControlState<TValue>, options?: { onlySelf?: boolean; emitEvent?: boolean; }): void\n```", "```java\n    registerOnChange(fn: Function): void\n    ```", "```java\n    registerOnDisabledChange(fn: (isDisabled: boolean) => void): void\n    ```", "```java\n    const control = new FormControl('Hero!'); console.log(control.value); // Hero\n    ```", "```java\n    const control = new FormControl({ value: 'Hero', disabled: true });\n    ```", "```java\n    // get the status\n    ```", "```java\n    console.log(control.value, control.status); //Hero,\n    ```", "```java\n                                                //DISABLED\n    ```", "```java\n    const control = new FormControl('', [Validators.email, Validators.required);\n    ```", "```java\n    // get the status\n    ```", "```java\n    console.log(control.status); // INVALID\n    ```", "```java\n    const control = new FormControl('Tony Stark')\n    ```", "```java\n    console.log(control.value); // Tony Stark\n    ```", "```java\n    control.reset('Iron Man');\n    ```", "```java\n    console.log(control.value); // Iron Man\n    ```", "```java\n    const control = new FormControl('Tony Stark')\n    ```", "```java\n    console.log(control.value); // Tony Stark\n    ```", "```java\n    control.reset();\n    ```", "```java\n    console.log(control.value); // Tony Stark\n    ```", "```java\n    const control = new FormControl('Tony Stark'); console.log(control.value); // Tony Stark console.log(control.status); // VALID\n    ```", "```java\n    control.reset({ value: 'Iron Man', disabled: true });\n    ```", "```java\n    console.log(control.value); // Iron Man console.log(control.status); // DISABLED\n    ```", "```java\n    control = new FormControl('');\n    ```", "```java\n    this.control.valueChanges.subscribe((data) => {\n    ```", "```java\n          console.log(data); // Iron Man\n    ```", "```java\n        });\n    ```", "```java\n    this.control.setValue('Iron Man')\n    ```", "```java\n    control = new FormControl('');\n    ```", "```java\n    this.control.statusChanges.subscribe((data) => {\n    ```", "```java\n          console.log(data); // DISABLED\n    ```", "```java\n        });\n    ```", "```java\n    This.control.disable ()\n    ```", "```java\n    import { FormGroup, FormControl } from '@angular/forms';\n    ```", "```java\n    export class HeroComponent {\n    ```", "```java\n      heroForm = new FormGroup({\n    ```", "```java\n          firstName: new FormControl(''),\n    ```", "```java\n          lastName: new FormControl(''),\n    ```", "```java\n          knownAs: new FormControl('')\n    ```", "```java\n    });\n    ```", "```java\n    }\n    ```", "```java\n    <form [formGroup]=\" heroForm \">\n    ```", "```java\n      <label for=\"first-name\">First Name: </label>\n    ```", "```java\n      <input id=\"first-name\" type=\"text\"\n    ```", "```java\n        formControlName=\"firstName\">\n    ```", "```java\n      <label for=\"last-name\">Last Name: </label>\n    ```", "```java\n      <input id=\"last-name\" type=\"text\"\n    ```", "```java\n        formControlName=\"lastName\">\n    ```", "```java\n      <label for=\"known-as\">Known As: </label>\n    ```", "```java\n      <input id=\"known-as\" type=\"text\"\n    ```", "```java\n        formControlName=\"knownAs\"> </form>\n    ```", "```java\n    //hero.component.html\n    ```", "```java\n    <form [formGroup]=\"heroForm\" (ngSubmit)=\"onSubmit()\">\n    ```", "```java\n    //hero.component.ts\n    ```", "```java\n    onSubmit() {\n    ```", "```java\n    // Will display value of form group in a form of JSON\n    ```", "```java\n     console.warn(this.heroForm.value);\n    ```", "```java\n    }\n    ```", "```java\n    export class HeroComponent {\n    ```", "```java\n     heroForm = new FormGroup({\n    ```", "```java\n          firstName: new FormControl(''),\n    ```", "```java\n    lastName: new FormControl(''),\n    ```", "```java\n    knownAs: new FormControl('')\n    ```", "```java\n    address: new FormGroup({\n    ```", "```java\n        street: new FormControl('')\n    ```", "```java\n        city: new FormControl('')\n    ```", "```java\n        country: new FormControl('')\n    ```", "```java\n    })\n    ```", "```java\n    });\n    ```", "```java\n    }\n    ```", "```java\n      <div formGroupName=\"address\">\n    ```", "```java\n            <label for=\"street\">Street: </label>\n    ```", "```java\n            <input id=\"street\" type=\"text\"\n    ```", "```java\n              formControlName=\"street\">\n    ```", "```java\n            <label for=\"city\">City: </label>\n    ```", "```java\n            <input id=\"city\" type=\"text\"\n    ```", "```java\n              formControlName=\"city\">\n    ```", "```java\n            <label for=\"country\">Country: </label>\n    ```", "```java\n            <input id=\"country\" type=\"text\"\n    ```", "```java\n              formControlName=\"country\">\n    ```", "```java\n        </div>\n    ```", "```java\n    export class HeroComponent implements OnInit {\n    ```", "```java\n     powerFormArray: FormArray;\n    ```", "```java\n     constructor() {\n    ```", "```java\n        this.powerFormArray=\n    ```", "```java\n          this.heroForm.get(\"powers\") as FormArray;\n    ```", "```java\n     }\n    ```", "```java\n    ngOnInit() {\n    ```", "```java\n        heroForm = new FormGroup({\n    ```", "```java\n            ... controls from previous example\n    ```", "```java\n            powers: new FormArray([])\n    ```", "```java\n       })\n    ```", "```java\n     }\n    ```", "```java\n    }\n    ```", "```java\n     addPower() {\n    ```", "```java\n        (this.form.get(\"powers\") as FormArray).push(new\n    ```", "```java\n          FormControl());\n    ```", "```java\n      }\n    ```", "```java\n      deletePower(i: number) {\n    ```", "```java\n        (this.form.get(\"powers\") as\n    ```", "```java\n          FormArray).removeAt(i);\n    ```", "```java\n      }\n    ```", "```java\n    <ng-container formArrayName=\"powers\">\n    ```", "```java\n       <label for=\"tags\">Tags</label>\n    ```", "```java\n       <div class=\"input-group mb-3\" *ngFor=\"let _ of\n    ```", "```java\n         powerFormArray.controls; index as i\">\n    ```", "```java\n          <input type=\"text\" class=\"form-control\"\n    ```", "```java\n             [formControlName]=\"i\" placeholder=\"Power\n    ```", "```java\n              Name\">\n    ```", "```java\n          <button (click)=\"deletePower(i)\"\n    ```", "```java\n            class=\"btn btn-danger\"\n    ```", "```java\n            type=\"button\">Delete</button>\n    ```", "```java\n    </div>\n    ```", "```java\n          <button class=\"btn btn-info me-md-2\"\n    ```", "```java\n            type=\"button\" (click)=\"addPower()\">\n    ```", "```java\n            Add</button>\n    ```", "```java\n    </ng-container>\n    ```", "```java\n    import { FormBuilder } from '@angular/forms';\n    ```", "```java\n    export class HeroComponent implements OnInit {\n    ```", "```java\n     powerFormArray: FormArray;\n    ```", "```java\n    constructor(private fb: FormBuilder) {}\n    ```", "```java\n    ... code implementation\n    ```", "```java\n    }\n    ```", "```java\n    export class HeroComponent implements OnInit {\n    ```", "```java\n     heroForm = this.fb.group({\n    ```", "```java\n          firstName: [''],\n    ```", "```java\n         lastName: [''],\n    ```", "```java\n         knownAs: [''],\n    ```", "```java\n         address:  this.fb.group({\n    ```", "```java\n            street: [''],\n    ```", "```java\n            city: [''],\n    ```", "```java\n            country: [''],\n    ```", "```java\n        }),\n    ```", "```java\n          powers: this.fb.array([])\n    ```", "```java\n    });\n    ```", "```java\n    constructor(private fb: FormBuilder) {}\n    ```", "```java\n    ... code implementation\n    ```", "```java\n    }\n    ```", "```java\n    form = this.fb.group({\n    ```", "```java\n      name: [10, [Validators.min(4)]]\n    ```", "```java\n    });\n    ```", "```java\n    console.log(this.form.status) // returns VALID\n    ```", "```java\n    static max(max: number) – requires the value of the control to be equal to or less than the given number.\n    ```", "```java\n    form = this.fb.group({\n    ```", "```java\n      name: [3, [Validators.max (4)]]\n    ```", "```java\n    });\n    ```", "```java\n    console.log(this.form.status) // returns VALID\n    ```", "```java\n    form = this.fb.group({\n    ```", "```java\n      name: ['test value', [Validators.required]]\n    ```", "```java\n    });\n    ```", "```java\n    console.log(this.form.status) // returns VALID\n    ```", "```java\n    form = this.fb.group({\n    ```", "```java\n      name: [true, [Validators.requiredTrue]]\n    ```", "```java\n    });\n    ```", "```java\n    console.log(this.form.status) // returns VALID\n    ```", "```java\n    form = this.fb.group({\n    ```", "```java\n      name: ['test', [Validators.minLength (4)]]\n    ```", "```java\n    });\n    ```", "```java\n    console.log(this.form.status) // returns VALID\n    ```", "```java\n    form = this.fb.group({\n    ```", "```java\n      name: ['test', [Validators.maxLength (4)]]\n    ```", "```java\n    });\n    ```", "```java\n    console.log(this.form.status) // returns VALID\n    ```", "```java\nimport { AbstractControl, ValidationErrors, ValidatorFn } from \"@angular/forms\";\nexport function checkHasNumberValidator(): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors |\n      null => {\n      const error = /\\d/.test(control.value);\n      return error ? {hasNumbers: {value: control.value}} :\n        null;\n    };\n}\n```", "```java\nheroForm = this.fb.group({\n     firstName: ['', [checkHasNumberValidator]],\n     lastName: ['', [checkHasNumberValidator]],\n     knownAs: [''],\n     address:  this.fb.group({\n        street: [''],\n        city: [''],\n        country: [''],\n    }),\n      powers: this.fb.array([])\n});\n```", "```java\n    export class AntiHeroFormComponent implements OnInit {\n    ```", "```java\n      @Input() selectedId = \"\";\n    ```", "```java\n      @Input() actionButtonLabel: string = 'Create';\n    ```", "```java\n      form: FormGroup;\n    ```", "```java\n      constructor(private fb: FormBuilder) {\n    ```", "```java\n        this.form = this.fb.group({\n    ```", "```java\n          id: [''],\n    ```", "```java\n          firstName: [''],\n    ```", "```java\n          lastName: [''],\n    ```", "```java\n          house: [''],\n    ```", "```java\n          knownAs: ['']\n    ```", "```java\n        })\n    ```", "```java\n       }\n    ```", "```java\n    <! – Please refer to the anti-hero-form.component.ts file in the GitHub repo, Thank you ->\n    ```", "```java\n    }\n    ```", "```java\n    <! – Please refer to the anti-hero-form.component.html file in the GitHub repo, Thank you ->\n    ```", "```java\n    <app-anti-hero-form [selectedId]=\"id\"></app-anti-hero-form>\n    ```", "```java\n    export class FormComponent implements OnInit {\n    ```", "```java\n      id = \"\";\n    ```", "```java\n      constructor(private router: ActivatedRoute) { }\n    ```", "```java\n      ngOnInit(): void {\n    ```", "```java\n        this.id = this.router.snapshot.params['id'];\n    ```", "```java\n      }\n    ```", "```java\n    }\n    ```", "```java\n      {\n    ```", "```java\n        path: \"form\",\n    ```", "```java\n        children: [\n    ```", "```java\n          {\n    ```", "```java\n            path: \"\",\n    ```", "```java\n            component: FormComponent\n    ```", "```java\n          },\n    ```", "```java\n          {\n    ```", "```java\n            path: \":id\",\n    ```", "```java\n            component: FormComponent\n    ```", "```java\n          }\n    ```", "```java\n        ]\n    ```", "```java\n      },\n    ```", "```java\n        <!-- Dumb component command bar -->\n        ```", "```java\n        <app-anti-hero-command-bar (action)=\"executeCommandBarAction($event)\"></app-anti-hero-command-bar>\n        ```", "```java\n        <!-- Dumb component anti hero list -->\n        ```", "```java\n        <app-anti-hero-list [antiHeroes]=\"antiHeroes\" list.component.ts:\n\n        ```", "```java\n\n        ```", "```java\n\n        ```", "```java\n\n        ```", "```java\n\n        ```", "```java\n\n        ```", "```java\n\n        ```", "```java\n\n        ```", "```java\n\n        ```", "```java\n\n        ```", "```java\n\n        ```", "```java\n\n        ```", "```java\n\n        ```", "```java\n\n        ```", "```java\n\n        ```", "```java\n\n        ```", "```java\n\n        ```", "```java\n\n        ```"]