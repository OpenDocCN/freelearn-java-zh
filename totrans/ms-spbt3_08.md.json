["```java\nversion: '2'\nservices:\n  zookeeper:\n    image: zookeeper\n    ports:\n      - \"2181:2181\"\n    networks:\n      - kafka-network\n  kafka:\n    image: confluentinc/cp-kafka\n    depends_on:\n      - zookeeper\n    ports:\n      - \"9092:9092\"\n    environment:\n      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181\n      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092\n      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1\n    networks:\n      - kafka-network\nnetworks:\n  kafka-network:\n    driver: bridge\n```", "```java\ndocker-compose up -d\n```", "```java\n    server.port:8181\n    ```", "```java\n@RestController\npublic class EventProducerController {\n    private final KafkaTemplate<String, String> kafkaTemplate;\n    @Autowired\n    public EventProducerController(KafkaTemplate<String, String> kafkaTemplate) {\n        this.kafkaTemplate = kafkaTemplate;\n    }\n    @GetMapping(\"/message/{message}\")\n    public String trigger(@PathVariable String message) {\n        kafkaTemplate.send(\"messageTopic\", message);\n        return \"Hello, Your message has been published: \" + message;\n    }\n}\n```", "```java\nspring.kafka.bootstrap-servers=localhost:9092\nspring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer\nspring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer\n```", "```java\nimport org.springframework.kafka.annotation.KafkaListener;\nimport org.springframework.stereotype.Component;\n@Component\npublic class MessageConsumer {\n    @KafkaListener(topics = \"messageTopic\", groupId = \"consumer_1_id\")\n    public void listen(String message) {\n        System.out.println(\"Received message: \" + message);\n    }\n}\n```", "```java\nspring.kafka.bootstrap-servers=localhost:9092\nspring.kafka.consumer.group-id= consumer_1_id\nspring.kafka.consumer.auto-offset-reset=earliest\nspring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer\nspring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer\n```", "```java\n    8282. This can be configured in the application.properties file with the following line:\n\n    ```", "```java\n\n    Start the application through your IDE or by running `./gradlew bootRun` in the terminal within the project directory.\n    ```", "```java\n    server.port=8181\n    ```", "```java\n    http://localhost:8282/message/hello-world\n    ```", "```java\n    Received message: hello-world\n    Received message: hello-world-2\n    Received message: hello-world-3\n    ```", "```java\n      kafka-manager:\n        image: hlebalbau/kafka-manager:latest\n        depends_on:\n          - zookeeper\n          - kafka\n        ports:\n          - \"9000:9000\"\n        environment:\n          ZK_HOSTS: zookeeper:2181\n        networks:\n          - kafka-network\n    ```", "```java\n    -d flag runs them in detached mode, so they’ll run in the background.\n    ```"]