["```java\nURL url = new URL(\"http://acme.com/\");\nBufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n\nString line;\nwhile ((line = in.readLine()) != null) {\n  System.out.println(line);\n}\nin.close();\n```", "```java\nvertx.createHttpClient().getNow(80, \"acme.com\", \"\", response -> {\n   response.bodyHandler(System.out::println);\n });\n```", "```java\n<dependency>\n    <groupId>io.quarkus</groupId>\n    <artifactId>quarkus-vertx</artifactId>\n</dependency>\n```", "```java\n@Inject io.vertx.core.Vertx vertx;\n```", "```java\nfile.path=/tmp/customer.json\n\n```", "```java\npublic class CustomerRepository {\n    @Inject io.vertx.core.Vertx vertx;\n    @ConfigProperty(name = \"file.path\" )\n    String path;\n```", "```java\npublic CompletionStage<String> writeFile( ) {\n\n    JsonArrayBuilder jsonArray = javax.json.Json.createArrayBuilder();\n    for (Customer customer:customerList) {\n        jsonArray.add(javax.json.Json.createObjectBuilder().\n                 add(\"id\", customer.getId())\n                .add(\"name\", customer.getName())\n                .add(\"surname\", customer.getSurname()).build());\n    }\n\n    JsonArray array = jsonArray.build();\n    CompletableFuture<String> future = new CompletableFuture<>();\n\n    vertx.fileSystem().writeFile(path, Buffer.buffer(array\n\n    .toString()), handler -> {\n        if (handler.succeeded()) {\n            future.complete(\"Written JSON file in \" +path);\n        } else {\n            System.err.println(\"Error while writing in file:\n             \" + handler.cause().getMessage());\n        }\n    });\n    return future;\n}\n```", "```java\npublic CompletionStage<String> readFile() {\n    CompletableFuture<String> future = new CompletableFuture<>();\n    long start = System.nanoTime();\n\n    // Delay reply by 100ms\n    vertx.setTimer(100, l -> {\n        // Compute elapsed time in milliseconds\n        long duration = MILLISECONDS.convert(System.nanoTime() -\n         start, NANOSECONDS);\n\n        vertx.fileSystem().readFile(path, ar -> {\n            if (ar.succeeded()) {\n                String response = ar.result().toString(\"UTF-8\");\n                future.complete(response);\n            } else {\n                future.complete(\"Cannot read the file: \" + \n                ar.cause().getMessage());\n            }\n        });\n\n    });\n\n    return future;\n}\n```", "```java\nvertx.setPeriodic(1000, l -> {\n  // This code will be called every second\n  System.out.println(\"timer fired!\");\n});\n```", "```java\n@GET\n@Path(\"writefile\")\n@Produces(\"text/plain\")\npublic CompletionStage<String> writeFile() {\n    return customerRepository.writeFile();\n}\n\n@GET\n@Path(\"readfile\")\npublic CompletionStage<String> readFile() {\n    return customerRepository.readFile();\n}\n```", "```java\n$scope.writefile = function () {\n\n$http({\n    method: 'GET',\n    url: SERVER_URL+'/writefile'\n  }).then(_successStage, _error);\n};\n\nscope.readfile = function () {\n\n  $http({\n    method: 'GET',\n    url: SERVER_URL+'/readfile'\n  }).then(_successStage, _error);\n};\n\nfunction _successStage(response) {\n   _clearForm()\n   $scope.jsonfile = JSON.stringify(response.data);\n}\n```", "```java\n<a ng-click=\"writefile()\" class=\"myButton\">Write File</a>  \n<a ng-click=\"readfile()\"  class=\"myButton\">Read File</a> \n```", "```java\n<div ng-app=\"displayfile\"  >\n        <span ng-bind=\"jsonfile\"></span>\n</div>\n```", "```java\nmvn install quarkus:dev\n```", "```java\nObservable.just(\"Hello world!\").subscribe(System.out::println);\n```", "```java\nFlowable.just(\"Hello world!\").subscribe(System.out::println);\n\n```", "```java\nObservable.just(2, 3, 4, 4, 2, 1)\n        .distinct()\n        .subscribe(System.out::println);\n```", "```java\n2,3,4,1\n```", "```java\nObservable.just(1, 2, 3, 4, 5, 6)  \n     .distinct()\n     .filter(x -> x % 2 == 0)\n     .subscribe(System.out::println);\n```", "```java\n2,4\n```", "```java\n@Inject io.vertx.reactivex.core.Vertx vertx;\n```", "```java\npublic CompletionStage<String> writeFile() {\n    CompletableFuture<String> future = new CompletableFuture<>();\n    StringBuffer sb = new StringBuffer(\"id,name,surname\");\n    sb.append(System.lineSeparator());\n\n    Observable.fromIterable(customerList)\n            .map(c -> c.getId() + \",\" + c.getName() + \",\" + \n             c.getSurname() + System.lineSeparator())\n            .subscribe(\n                    data ->   sb.append(data),\n                    error -> System.err.println(error),\n                    () ->  vertx.fileSystem().writeFile(path, \n                     Buffer.buffer(sb.toString()), handler -> {\n                        if (handler.succeeded()) {\n                            future.complete(\"File written in \"+path);\n                        } else {\n                            System.err.println(\"Error while \n                            writing in file: \" + handler.cause()\n                            .getMessage());\n\n                        }\n                    }));\n\n    return future;\n}\n```", "```java\npublic CompletionStage<String> readFile() {\n\n    CompletableFuture<String> future = new CompletableFuture<>();\n    StringBuffer sb = new StringBuffer();\n\n    vertx.fileSystem().rxReadFile(path)\n            .flatMapObservable(buffer -> \n              Observable.fromArray(buffer.toString().split(System.\n              lineSeparator())))\n            .skip(1)\n            .map(s -> s.split(\",\"))\n            .map(data-> new Customer(Integer.\n             parseInt(data[0]),data[1],data[2]))\n            .subscribe(\n                    data ->  sb.append(data.toString()),\n                    error -> System.err.println(error),\n                    () -> future.complete(sb.toString()));\n\n    return future;\n\n}\n```", "```java\npublic String toString() {\n    return \"Customer{\" +\n            \"id=\" + id +\n            \", name='\" + name + '\\'' +\n            \", surname='\" + surname + '\\'' +\n            '}';\n}\n```", "```java\n@GET\n@Path(\"readfile\")\n@Produces(\"text/plain\")\npublic CompletionStage<String> readFile() {\n    return customerRepository.readFile();\n}\n```", "```java\n@Inject EventBus bus;\n```", "```java\n@GET\n@Path(\"/call\")\n@Produces(\"text/plain\")\npublic CompletionStage<String> call(@QueryParam(\"id\") Integer customerId) {\n    return bus.<String>send(\"callcustomer\", \n    customerRepository.findCustomerById(customerId))\n            .thenApply(Message::body)\n            .exceptionally(Throwable::getMessage);\n```", "```java\n@ApplicationScoped\npublic class CustomerService {\n\n        @ConsumeEvent(\"callcustomer\")\n        public String reply(Customer c) {\n            return \"Hello! I am \" + c.getName() + \" \" \n             +c.getSurname() + \". How are you doing?\";\n        }\n}\n```", "```java\n<a ng-click=\"call( customer )\" class=\"myButton\">Call</a>\n```", "```java\n$scope.call = function (customer) {\n\n  $http({\n    method: 'GET',\n    url: SERVER_URL+'/call/?id='+customer.id\n  }).then(_callCustomer, _error);\n};\n\n function _callCustomer(response) {\n   window.alert(response.data);\n}\n```", "```java\n@Path(\"/streaming\")\npublic class StreamingEndpoint {\n\n    @Inject io.vertx.axle.core.Vertx vertx;\n\n    @Inject CustomerRepository customerRepository;\n    @GET\n    @Produces(MediaType.SERVER_SENT_EVENTS)\n    public Publisher<String> stream() {\n\n        return\n                ReactiveStreams.fromPublisher\n                (vertx.periodicStream(2000).\n                 toPublisher())\n                        .map(l -> String.format\n                    (\"Number of Customers %s . \n                    Last one added: %s %n\",customerRepository.\n                    findAll().size(),\n                                customerRepository.findAll().size()\n                                 > 0 ? \n                                (customerRepository.findAll().\n                                get(customerRepository.findAll().\n                                size() -1)).toString()  : \"N/A\"))\n                        .buildRs();\n\n    }\n}\n```", "```java\n<a ng-click=\"stats()\" class=\"myButton\">Stats</a></div>\n\n```", "```java\n$scope.stats = function () {\n\n  var eventSource = new EventSource(\"/streaming\");\n  eventSource.onmessage = function (event) {\n  var container = document.getElementById(\"divcontainer\");\n  var paragraph = document.createElement(\"p\");\n  paragraph.innerHTML = event.data;\n  container.appendChild(paragraph);\n};\n```", "```java\n<div id=\"divcontainer\" style=\"width: 800px; height: 200px; overflow-y: scroll;\">\n```", "```java\npublisher\n   .subscribe(new Subscriber<String>() {\n     volatile Subscription subscription;\n\n     @Override\n     public void onSubscribe(Subscription subscription) {\n       this.subscription = subscription;\n     }\n\n     @Override\n     public void onNext(String s) {\n       // when no more event is needed\n subscription.cancel();\n     }\n\n     @Override\n     public void onError(Throwable throwable) {\n       // handle error\n     }\n\n     @Override\n     public void onComplete() {\n       // handle complete\n     }\n});\n```", "```java\n<dependency>\n  <groupId>io.quarkus</groupId>\n  <artifactId>quarkus-reactive-pg-client</artifactId>\n</dependency>\n```", "```java\nvertx-reactive:postgresql://<Host>:<Port>/<DBName>\n\n```", "```java\nquarkus.datasource.url=vertx-reactive:postgresql://localhost:5432/quarkusdb\nquarkus.datasource.username=quarkus\nquarkus.datasource.password=quarkus\n```", "```java\npublic class CustomerEndpoint {\n\n    @Inject PgPool client;\n    @Inject Vertx vertx;\n```", "```java\n@PostConstruct\nprivate void initdb() {\n\n    client.query(\"DROP TABLE IF EXISTS CUSTOMER\")\n            .thenCompose(r -> client.query(\"CREATE SEQUENCE IF\n              NOT EXISTS  customerId_seq\"))\n            .thenCompose(r -> client.query(\"CREATE TABLE CUSTOMER\n             (id SERIAL PRIMARY KEY, name TEXT NOT NULL,surname\n             TEXT NOT NULL)\"))\n            .thenCompose(r -> client.query(\"INSERT INTO CUSTOMER\n             (id, name, surname) VALUES ( nextval('customerId\n              _seq'), 'John','Doe')\"))\n            .thenCompose(r -> client.query(\"INSERT INTO CUSTOMER\n              (id, name, surname) VALUES ( nextval('customerId\n                _seq'), 'Fred','Smith')\"))\n            .toCompletableFuture()\n            .join();\n}\n```", "```java\n@GET\npublic CompletionStage<Response> getAll() {\n    return Customer.findAll(client).thenApply(Response::ok)\n            .thenApply(ResponseBuilder::build);\n}\n\n@POST\npublic CompletionStage<Response> create(Customer customer) {\n    return customer.create(client).thenApply(Response::ok)\n            .thenApply(ResponseBuilder::build);\n }\n\n@PUT\npublic CompletionStage<Response> update(Customer customer) {\n    return customer.update(client)\n            .thenApply(updated -> updated ? Status.OK : \n             Status.NOT_FOUND)\n            .thenApply(status -> Response.status(status).build());\n}\n\n@DELETE\npublic CompletionStage<Response> delete(@QueryParam(\"id\") Long customerId) {\n    return Customer.delete(client, customerId)\n            .thenApply(deleted -> deleted ? Status.NO_CONTENT : \n             Status.NOT_FOUND)\n            .thenApply(status -> Response.status(status).build());\n}\n```", "```java\npublic CompletionStage<Long> create(PgPool client) {\n    return client.preparedQuery(\"INSERT INTO CUSTOMER (id, name, \n     surname) VALUES ( nextval('customerId_seq'), $1,$2)\n     RETURNING (id)\", Tuple.of(name,surname))\n            .thenApply(pgRowSet -> pgRowSet.iterator()\n            .next().getLong(\"id\"));\n}\n```", "```java\npublic CompletionStage<Boolean> update(PgPool client) {\n    return client.preparedQuery(\"UPDATE CUSTOMER SET name = $1,\n     surname = $2 WHERE id = $3\", Tuple.of(name, surname, id))\n            .thenApply(pgRowSet -> pgRowSet.rowCount() == 1);\n}\n```", "```java\npublic static CompletionStage<Boolean> delete(PgPool client, Long id) {\n    return client.preparedQuery(\"DELETE FROM CUSTOMER WHERE\n     id = $1\", Tuple.of(id))\n            .thenApply(pgRowSet -> pgRowSet.rowCount() == 1);\n}\n```", "```java\npublic static CompletionStage<List<Customer>> findAll(PgPool client) {\n    return client.query(\"SELECT id, name, surname FROM CUSTOMER \n    ORDER BY name ASC\").thenApply(pgRowSet -> {\n        List<Customer> list = new ArrayList<>(pgRowSet.size());\n        for (Row row : pgRowSet) {\n            list.add(from(row));\n        }\n        return list;\n    });\n}\n```", "```java\n$ docker run --ulimit memlock=-1:-1 -it --rm=true --memory-swappiness=0 --name quarkus_test -e POSTGRES_USER=quarkus -e POSTGRES_PASSWORD=quarkus -e POSTGRES_DB=quarkusdb -p 5432:5432 postgres:10.5\n```", "```java\nmvn  install quarkus:dev\n```", "```java\n$ docker ps\n CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES\n 6b1b13b0547f        postgres:10.5       \"docker-entrypoint...\"   2 minutes ago       Up 2 minutes        0.0.0.0:5432->5432/tcp   quarkus_test\n```", "```java\n$ docker exec -it 6b1b13b0547f /bin/bash\n\n root@6b1b13b0547f:/# psql -U postgres\n psql (10.5 (Debian 10.5-2.pgdg90+1))\n Type \"help\" for help.\n```", "```java\n postgres=# \\dt;\n List of relations\n Schema |   Name   | Type  |  Owner \n --------+----------+-------+----------\n public | customer | table | postgres\n (1 row)\n```", "```java\npostgres=# select * from customer;\n id | name | surname\n ----+------+---------\n 5 | John | Doe\n 6 | Fred | Smith\n (2 rows)\n```"]