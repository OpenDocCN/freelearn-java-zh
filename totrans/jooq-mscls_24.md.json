["```java\n// set DEBUG level globally\n```", "```java\nlogging.level.root=DEBUG \n```", "```java\n// or, set DEBUG level only for jOOQ\n```", "```java\nlogging.level.org.jooq.tools.LoggerListener=DEBUG\n```", "```java\n…\n```", "```java\n<!-- SQL execution logging is logged to the \n```", "```java\n     LoggerListener logger at DEBUG level -->\n```", "```java\n<logger name=\"org.jooq.tools.LoggerListener\" \n```", "```java\n        level=\"debug\" additivity=\"false\">\n```", "```java\n  <appender-ref ref=\"ConsoleAppender\"/>\n```", "```java\n</logger>\n```", "```java\n<!-- Other jOOQ related debug log output -->\n```", "```java\n<logger name=\"org.jooq\" level=\"debug\" additivity=\"false\">\n```", "```java\n  <appender-ref ref=\"ConsoleAppender\"/>\n```", "```java\n</logger>\n```", "```java\n…\n```", "```java\nctx.configuration().derive(\n```", "```java\n       new Settings().withExecuteLogging(Boolean.FALSE))\n```", "```java\n   .dsl()\n```", "```java\n   .select(PRODUCT.PRODUCT_NAME, PRODUCT.PRODUCT_VENDOR)\n```", "```java\n   .from(PRODUCT).fetch();\n```", "```java\n<configuration xmlns=\"...\">\n```", "```java\n  <logging>WARN</logging>\n```", "```java\n</configuration>\n```", "```java\nprivate static final Logger log = \n```", "```java\n        LoggerFactory.getLogger(...);\n```", "```java\nvar result = ctx.select(...)...\n```", "```java\n                   .fetch();\n```", "```java\nlog.debug(\"Result set:\\n\" + result.format\n```", "```java\n    (result.size()));      \n```", "```java\npublic class MyLoggerListener extends DefaultExecuteListener {\n```", "```java\n private static final JooqLogger log = \n```", "```java\n    JooqLogger.getLogger(LoggerListener.class);\n```", "```java\n @Override\n```", "```java\n public void resultEnd(ExecuteContext ctx) {\n```", "```java\n  Result<?> result = ctx.result();\n```", "```java\n  if (result != null) {\n```", "```java\n    logMultiline(\"Total Fetched result\", \n```", "```java\n                  result.format(), Level.FINE, result.size());\n```", "```java\n    log.debug(\"Total fetched row(s)\", result.size());\n```", "```java\n  }\n```", "```java\n }\n```", "```java\n // inspired from jOOQ source code \n```", "```java\n private void logMultiline(String comment,  \n```", "```java\n           String message, Level level, int size) {\n```", "```java\n   // check the bundled code\n```", "```java\n }\n```", "```java\n}\n```", "```java\nBinding variable 1 : 5000 (integer /* java.lang.Integer */)\n```", "```java\nBinding variable 2 : 223113 (bigint /* java.lang.Long */)\n```", "```java\n...\n```", "```java\n... : [1] as integer /* java.lang.Integer */ - [5000]\n```", "```java\n... : [vintageCars] as bigint /* java.lang.Long */ - [223113]\n```", "```java\n...\n```", "```java\n@Override\n```", "```java\npublic void resultEnd(ExecuteContext ecx) {\n```", "```java\n if (ecx.query() != null && ecx.query() instanceof Select) {\n```", "```java\n  Result<?> result = ecx.result();\n```", "```java\n  if (result != null && !result.isEmpty()) {\n```", "```java\n   final int x = result.indexOf(PRODUCT.PRODUCT_ID);\n```", "```java\n   final int y = result.indexOf(PRODUCT.BUY_PRICE);\n```", "```java\n   if (x != -1 && y != -1) {\n```", "```java\n    ChartFormat cf = new ChartFormat()\n```", "```java\n     .category(x)\n```", "```java\n     .values(y)\n```", "```java\n     .shades('x');\n```", "```java\n    String[] chart = result.formatChart(cf).split(\"\\n\");\n```", "```java\n    log.debug(\"Start Chart\", \"\");\n```", "```java\n    for (int i = 0; i < chart.length; i++) {\n```", "```java\n     log.debug(\"\", chart[i]);\n```", "```java\n    }\n```", "```java\n    log.debug(\"End Chart\", \"\");\n```", "```java\n   } else {\n```", "```java\n     log.debug(\"Chart\", \"The chart cannot be \n```", "```java\n                         constructed (missing data)\");\n```", "```java\n   }\n```", "```java\n  }\n```", "```java\n }\n```", "```java\n}\n```", "```java\nconfiguration.settings()\n```", "```java\n .withExecuteListenerEndInvocationOrder(\n```", "```java\n    InvocationOrder.REVERSE);\n```", "```java\nctx.data().put(EMPLOYEE.getQualifiedName(), \"\");\n```", "```java\nctx.data().put(SALE.getQualifiedName(), \"\");\n```", "```java\nprivate static class TablesExtractor \n```", "```java\n      extends DefaultVisitListener {\n```", "```java\n @Override\n```", "```java\n public void visitEnd(VisitContext vcx) {\n```", "```java\n  if (vcx.renderContext() != null) {\n```", "```java\n    if (vcx.queryPart() instanceof Table) {\n```", "```java\n     Table<?> t = (Table<?>) vcx.queryPart();\n```", "```java\n     vcx.configuration().data()\n```", "```java\n            .putIfAbsent(t.getQualifiedName(), \"\");\n```", "```java\n    }\n```", "```java\n  }\n```", "```java\n }\n```", "```java\n}\n```", "```java\npublic class MyLoggerListener extends DefaultExecuteListener {\n```", "```java\n ...\n```", "```java\n @Override\n```", "```java\n public void renderEnd(ExecuteContext ecx) {\n```", "```java\n  if (ecx.query() != null &&\n```", "```java\n      !ecx.configuration().data().isEmpty()) {\n```", "```java\n   ...\n```", "```java\n   Configuration configuration = ecx.configuration()\n```", "```java\n             .deriveAppending(new TablesExtractor());\n```", "```java\n   ...\n```", "```java\n   if (configuration.data().keySet().containsAll(tables)) {\n```", "```java\n    ...\n```", "```java\n   }\n```", "```java\n   ...\n```", "```java\n}\n```", "```java\npublic class ClassicmodelsTest {\n```", "```java\n public static DSLContext ctx;\n```", "```java\n @BeforeAll\n```", "```java\n public static void setup() {\n```", "```java\n  // Initialise your data provider\n```", "```java\n  MockDataProvider provider = new ClassicmodelsMockProvider();\n```", "```java\n  MockConnection connection = new MockConnection(provider);\n```", "```java\n  // Pass the mock connection to a jOOQ DSLContext\n```", "```java\n  ClassicmodelsTest.ctx = DSL.using(\n```", "```java\n                    connection, SQLDialect.MYSQL);\n```", "```java\n  // Optionally, you may want to disable jOOQ logging\n```", "```java\n  ClassicmodelsTest.ctx.configuration().settings()\n```", "```java\n          .withExecuteLogging(Boolean.FALSE);\n```", "```java\n }\n```", "```java\n // add tests here\n```", "```java\n}\n```", "```java\npublic class ClassicmodelsMockProvider \n```", "```java\n                  implements MockDataProvider {\n```", "```java\n private static final String ACCEPTED_SQL =  \n```", "```java\n    \"(SELECT|UPDATE|INSERT|DELETE).*\";\n```", "```java\n ...\n```", "```java\n @Override\n```", "```java\n public MockResult[] execute(MockExecuteContext mex) \n```", "```java\n   throws SQLException {\n```", "```java\n  // The DSLContext can be used to create \n```", "```java\n  // org.jooq.Result and org.jooq.Record objects\n```", "```java\n  DSLContext ctx = DSL.using(SQLDialect.MYSQL);\n```", "```java\n  // So, here we can have maximum 3 results\n```", "```java\n  MockResult[] mock = new MockResult[3];\n```", "```java\n  // The execute context contains SQL string(s), \n```", "```java\n  // bind values, and other meta-data\n```", "```java\n  String sql = mex.sql();\n```", "```java\n  // Exceptions are propagated through the JDBC and jOOQ APIs\n```", "```java\n  if (!sql.toUpperCase().matches(ACCEPTED_SQL)) {\n```", "```java\n   throw new SQLException(\"Statement not supported: \" + sql);\n```", "```java\n  } \n```", "```java\n  // From this point forward, you decide, whether any given \n```", "```java\n  // statement returns results, and how many\n```", "```java\n  ...\n```", "```java\n}\n```", "```java\n@Test\n```", "```java\npublic void sampleTest() {\n```", "```java\n Result<Record2<Long, String>> result = \n```", "```java\n   ctx.select(PRODUCT.PRODUCT_ID, PRODUCT.PRODUCT_NAME)\n```", "```java\n      .from(PRODUCT)\n```", "```java\n      .where(PRODUCT.PRODUCT_ID.eq(1L))\n```", "```java\n      .fetch();\n```", "```java\n assertThat(result, hasSize(equalTo(1)));\n```", "```java\n assertThat(result.getValue(0, PRODUCT.PRODUCT_ID), \n```", "```java\n   is(equalTo(1L)));\n```", "```java\n assertThat(result.getValue(0, PRODUCT.PRODUCT_NAME), \n```", "```java\n   is(equalTo(\"2002 Suzuki XREO\")));\n```", "```java\n}\n```", "```java\nprivate static final String SELECT_ONE_RESULT_ONE_RECORD =  \n```", "```java\n \"select ... where `classicmodels`.`product`.`product_id`=?\";\n```", "```java\n...\n```", "```java\n} else if (sql.equals(SELECT_ONE_RESULT_ONE_RECORD)) {\n```", "```java\n  Result<Record2<Long, String>> result\n```", "```java\n    = ctx.newResult(PRODUCT.PRODUCT_ID, PRODUCT.PRODUCT_NAME);\n```", "```java\n  result.add(\n```", "```java\n    ctx.newRecord(PRODUCT.PRODUCT_ID, PRODUCT.PRODUCT_NAME)\n```", "```java\n       .values(1L, \"2002 Suzuki XREO\"));\n```", "```java\n   mock[0] = new MockResult(-1, result);\n```", "```java\n}\n```", "```java\npublic class ClassicmodelsIT {\n```", "```java\n private static DSLContext ctx;\n```", "```java\n @BeforeAll\n```", "```java\n public static void setup() {\n```", "```java\n  ctx = DSL.using(\"jdbc:mysql://localhost:3306/\n```", "```java\n    classicmodels\" + \"?allowMultiQueries=true\", \"root\", \"root\");\n```", "```java\n }\n```", "```java\n @Test\n```", "```java\n ...\n```", "```java\n}\n```", "```java\n@JooqTest\n```", "```java\n@ActiveProfiles(\"test\") // profile is optional\n```", "```java\npublic class ClassicmodelsIT {\n```", "```java\n @Autowired\n```", "```java\n private DSLContext ctx;\n```", "```java\n // optional, if you need more control of Spring transactions\n```", "```java\n @Autowired\n```", "```java\n private TransactionTemplate template;\n```", "```java\n @Test\n```", "```java\n ...\n```", "```java\n}\n```", "```java\n@JooqTest\n```", "```java\n@ActiveProfiles(\"test\")\n```", "```java\n@TestInstance(Lifecycle.PER_CLASS)\n```", "```java\npublic class ClassicmodelsIT {\n```", "```java\n @Autowired\n```", "```java\n private DSLContext ctx;\n```", "```java\n // optional, if you need more control of Spring transactions\n```", "```java\n @Autowired\n```", "```java\n private TransactionTemplate template;\n```", "```java\n @BeforeAll\n```", "```java\n public void setup() {\n```", "```java\n  ctx.settings()\n```", "```java\n  // .withExecuteLogging(Boolean.FALSE) // optional\n```", "```java\n     .withRenderNameCase(RenderNameCase.UPPER)\n```", "```java\n     .withRenderMapping(new RenderMapping()\n```", "```java\n     .withSchemata(\n```", "```java\n       new MappedSchema().withInput(\"classicmodels\")\n```", "```java\n                         .withOutput(\"PUBLIC\")));\n```", "```java\n }\n```", "```java\n @Test\n```", "```java\n ...\n```", "```java\n}\n```", "```java\n@JooqTest\n```", "```java\n@Testcontainers\n```", "```java\n@ActiveProfiles(\"test\")\n```", "```java\npublic class ClassicmodelsIT {\n```", "```java\n private static DSLContext ctx;\n```", "```java\n // optional, if you need more control of Spring transactions\n```", "```java\n @Autowired\n```", "```java\n private TransactionTemplate template;\n```", "```java\n @Container\n```", "```java\n private static final MySQLContainer sqlContainer = \n```", "```java\n   new MySQLContainer<>(\"mysql:8.0\")\n```", "```java\n     .withDatabaseName(\"classicmodels\")\n```", "```java\n     .withStartupTimeoutSeconds(1800) \n```", "```java\n     .withCommand(\"--authentication-\n```", "```java\n                     policy=mysql_native_password\");\n```", "```java\n @BeforeAll\n```", "```java\n public static void setup() throws SQLException {\n```", "```java\n  // load into the database the schema and data   \n```", "```java\n  Flyway flyway = Flyway.configure()\n```", "```java\n    .dataSource(sqlContainer.getJdbcUrl(), \n```", "```java\n      sqlContainer.getUsername(), sqlContainer.getPassword())\n```", "```java\n    .baselineOnMigrate(true)     \n```", "```java\n    .load();        \n```", "```java\n  flyway.migrate();\n```", "```java\n  // obtain a connection to MySQL\n```", "```java\n  Connection conn = sqlContainer.createConnection(\"\");\n```", "```java\n  // intialize jOOQ DSLContext\n```", "```java\n  ctx = DSL.using(conn, SQLDialect.MYSQL);\n```", "```java\n }\n```", "```java\n // this is optional since is done automatically anyway\n```", "```java\n @AfterAll\n```", "```java\n public static void tearDown() {\n```", "```java\n  if (sqlContainer != null) {\n```", "```java\n   if (sqlContainer.isRunning()) {\n```", "```java\n     sqlContainer.stop();\n```", "```java\n   }\n```", "```java\n  }\n```", "```java\n }\n```", "```java\n @Test\n```", "```java\n ...\n```", "```java\n}\n```", "```java\n...\n```", "```java\nvar containerDelegate = \n```", "```java\n  new JdbcDatabaseDelegate(sqlContainer, \"\");\n```", "```java\nScriptUtils.runInitScript(containerDelegate, \n```", "```java\n  \"integration/migration/V1.1__CreateTest.sql\");\n```", "```java\nScriptUtils.runInitScript(containerDelegate, \n```", "```java\n  \"integration/migration/afterMigrate.sql\");\n```", "```java\n...\n```"]