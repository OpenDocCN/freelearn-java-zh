["```java\n    public record Card(String cardId, String album,\n                       String player, int ranking) {\n    }\n    ```", "```java\n    @RequestMapping(\"/cards\")\n    @RestController\n    public class CardsController\n    ```", "```java\n        @GetMapping\n        public Flux<Card> getCards() {\n            return Flux.fromIterable(\n                    List.of(\n                        new Card(\"1\", \"WWC23\", \"Ivana Andres\", 7),\n                        new Card(\"2\", \"WWC23\", \"Alexia Putellas\", 1)));\n        }\n        ```", "```java\n        @GetMapping(\"/{cardId}\")\n        public Mono<Card> getCard(@PathVariable String cardId) {\n           return Mono.just(new Card(cardId, \"WWC23\", \"Superplayer\", 1));\n        }\n        ```", "```java\n    public class SampleException extends RuntimeException {\n        public SampleException(String message) {\n            super(message);\n        }\n    }\n    ```", "```java\n    @GetMapping(\"/exception\")\n    public Mono<Card> getException() {\n        throw new SampleException(\"This is a sample exception\");\n    }\n    @ExceptionHandler(SampleException.class)\n    public ProblemDetail handleSampleException(SampleException e) {\n        ProblemDetail problemDetail = ProblemDetail\n                   .forStatusAndDetail(HttpStatus.BAD_REQUEST,\n                                       e.getMessage());\n        problemDetail.setTitle(\"sample exception\");\n        return problemDetail;\n    }\n    ```", "```java\n    ./mvnw spring-boot:run\n    ```", "```java\n    curl http://localhost:8080/cards\n    ```", "```java\n    public class CardsHandler {\n        public Flux<Card> getCards() {\n            return Flux.fromIterable(List.of(\n                      new Card(\"1\", \"WWC23\", \"Ivana Andres\", 7),\n                      new Card(\"2\", \"WWC23\", \"Alexia Putellas\", 1)));\n        }\n        public Mono<Card> getCard(String cardId) {\n            return Mono.just(\n                 new Card(cardId, \"WWC23\", \"Superplayer\", 1));\n        }\n    }\n    ```", "```java\n    @Configuration\n    public class CardsRouterConfig {\n        @Bean\n        CardsHandler cardsHandler() {\n            return new CardsHandler();\n        }\n        @Bean\n        RouterFunction<ServerResponse> getCards() {\n            return route(GET(\"/cards\"), req ->\n                 ok().body(cardsHandler().getCards(), Card.class));\n        }\n        @Bean\n        RouterFunction<ServerResponse> getCard(){\n            return route(GET(\"/cards/{cardId}\"), req ->\n                 ok().body(\n                    cardsHandler().getCard(\n                        req.pathVariable(\"cardId\")), Card.class));\n        }\n    }\n    ```", "```java\n    server:\n        port: 8090\n    footballservice:\n        url: http://localhost:8080\n    ```", "```java\n    public record Card(String cardId, String album,\n                       String player, int ranking) {\n    }\n    ```", "```java\n    @RequestMapping(\"/consumer\")\n    @RestController\n    public class ConsumerController {\n        private final WebClient webClient;\n        public ConsumerController(@Value(\"${footballservice.url}\")\n                                   String footballServiceUrl) {\n            this.webClient = WebClient.create(footballServiceUrl);\n        }\n    }\n    ```", "```java\n    @GetMapping(\"/cards\")\n    public Flux<Card> getCards() {\n        return webClient.get()\n                .uri(\"/cards\").retrieve()\n                .bodyToFlux(Card.class);\n    }\n    ```", "```java\n    @GetMapping(\"/cards/{cardId}\")\n    public Mono<Card> getCard(@PathVariable String cardId) {\n        return webClient.get()\n                .uri(\"/cards/\" + cardId).retrieve()\n                .onStatus(code -> code.is4xxClientError(),\n                        response -> Mono.empty())\n                .bodyToMono(Card.class);\n    }\n    ```", "```java\n    @GetMapping(\"/error\")\n    public Mono<String> getFailedRequest() {\n        return webClient.get()\n                .uri(\"/invalidpath\")\n                .exchangeToMono(response -> {\n                    if (response.statusCode()\n                           .equals(HttpStatus.NOT_FOUND))\n                        return Mono.just(\"Server returned 404\");\n                    else if (response.statusCode()\n                           .equals(HttpStatus.INTERNAL_SERVER_ERROR))\n                        return Mono.just(\"Server returned 500: \"\n                                + response.bodyToMono(String.class));\n                    else\n                        return response.bodyToMono(String.class);\n                });\n    }\n    ```", "```java\n    ./mvnw spring-boot:run\n    ```", "```java\n    curl http://localhost:8090/consumer/cards\n    curl http://localhost:8090/consumer/cards/7\n    curl http://localhost:8090/consumer/error\n    ```", "```java\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-test</artifactId>\n        <scope>test</scope>\n    </dependency>\n    <dependency>\n        <groupId>io.projectreactor</groupId>\n        <artifactId>reactor-test</artifactId>\n        <scope>test</scope>\n    </dependency>\n    ```", "```java\n        @WebFluxTest(CardsController.class)\n        public class CardsControllerTests\n        ```", "```java\n        @Autowired\n        WebTestClient webTestClient;\n        ```", "```java\n        @Test\n        void testGetCards() {\n            webTestClient.get()\n                    .uri(\"/cards\").exchange()\n                    .expectStatus().isOk()\n                    .expectBodyList(Card.class);\n        }\n        ```", "```java\n        @Test\n        void testGetException() {\n            webTestClient.get()\n                    .uri(\"/cards/exception\").exchange()\n                    .expectStatus().isBadRequest()\n                    .expectBody(ProblemDetail.class);\n        }\n        ```", "```java\n    <dependency>\n        <groupId>com.github.tomakehurst</groupId>\n        <artifactId>wiremock-standalone</artifactId>\n        <version>3.0.1</version>\n        <scope>test</scope>\n    </dependency>\n    ```", "```java\n    @SpringBootTest(\n          webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,\n          classes = {ConsumerApplication.class,\n                  ConsumerController.class,\n                  ConsumerControllerTests.Config.class})\n    public class ConsumerControllerTests\n    ```", "```java\n    @TestConfiguration\n    static class Config {\n        @Bean\n        public WireMockServer webServer() {\n            WireMockServer wireMockServer = new WireMockServer(7979);\n            wireMockServer.start();\n            return wireMockServer;\n        }\n    }\n    ```", "```java\n    @DynamicPropertySource\n    static void setProperties(DynamicPropertyRegistry registry) {\n        registry.add(\"footballservice.url\",\n                     () -> \"http://localhost:7979\");\n    }\n    ```", "```java\n    @Autowired\n    private WebTestClient webTestClient;\n    @Autowired\n    private WireMockServer server;\n    ```", "```java\n    @Test\n    public void getCards()\n    ```", "```java\n    server.stubFor(WireMock.get(WireMock.urlEqualTo(\"/cards\"))\n            .willReturn(\n                    WireMock.aResponse()\n                      .withStatus(200)\n                      .withHeader(\"Content-Type\", \"application/json\")\n                      .withBody(\"\"\"\n                      [\n                          {\n                              \"cardId\": \"1\",\n                              \"album\": \"WWC23\",\n                              \"player\": \"Ivana Andres\",\n                              \"ranking\": 7\n                          },\n                          {\n                              \"cardId\": \"2\",\n                              \"album\": \"WWC23\",\n                              \"player\": \"Alexia Putellas\",\n                              \"ranking\": 1\n                           }\n                      ]\"\"\")));\n    ```", "```java\n    webTestClient.get().uri(\"/consumer/cards\")\n            .exchange().expectStatus().isOk()\n            .expectBodyList(Card.class).hasSize(2)\n            .contains(new Card(\"1\", \"WWC23\", \"Ivana Andres\", 7),\n                    new Card(\"2\", \"WWC23\", \"Alexia Putellas\", 1));\n    ```", "```java\ndocker run -itd -e POSTGRES_USER=packt -e POSTGRES_PASSWORD=packt -p 5432:5432 --name postgresql postgres\n```", "```java\n    spring:\n        application:\n            name: football\n        r2dbc:\n            url: r2dbc:postgresql://localhost:5432/football\n            username: packt\n            password: packt\n    ```", "```java\n    @Table(name = \"cards\")\n    public class CardEntity {\n        @Id\n        private Long id;\n        private Optional<Long> albumId;\n        private Long playerId;\n        private Long ownerId;\n    }\n    ```", "```java\n    public interface CardsRepository extends\n                           ReactiveCrudRepository<CardEntity, Long> {\n    }\n    ```", "```java\n    public Mono<PlayerEntity> findByName(String name);\n    ```", "```java\n    @Service\n    public class PlayersService {\n        private final PlayersRepository playersRepository;\n        public PlayersService(PlayersRepository playersRepository) {\n            this.playersRepository = playersRepository;\n        }\n    }\n    ```", "```java\n    public Mono<Player> getPlayer(Long id) {\n        return playersRepository.findById(id)\n                .map(PlayerMapper::map);\n    }\n    public Mono<Player> getPlayerByName(String name) {\n        return playersRepository.findByName(name)\n                .map(PlayerMapper::map);\n    }\n    ```", "```java\n    @Service\n    public class CardsService {\n        private final CardsRepository cardsRepository;\n        private final PlayersRepository playersRepository;\n        private final AlbumsRepository albumsRepository;\n        public CardsService(CardsRepository cardRepository,\n                            PlayersRepository playersRepository,\n                            AlbumsRepository albumsRepository) {\n            this.cardsRepository = cardRepository;\n            this.playersRepository = playersRepository;\n            this.albumsRepository = albumsRepository;\n        }\n    }\n    ```", "```java\n    public Mono<Card> getCard(Long cardId) {\n        return cardsRepository.findById(cardId)\n                .flatMap(this::retrieveRelations)\n                .switchIfEmpty(Mono.empty());\n    }\n    ```", "```java\n    protected Mono<Card> retrieveRelations(CardEntity cardEntity) {\n        Mono<PlayerEntity> playerEntityMono =\n               playersRepository.findById(cardEntity.getPlayerId());\n        Mono<Optional<AlbumEntity>> albumEntityMono;\n        if(cardEntity.getAlbumId() != null\n           && cardEntity.getAlbumId().isPresent()){\n            albumEntityMono = albumsRepository.findById(\n                            cardEntity.getAlbumId().get())\n                    .map(Optional::of);\n        } else {\n            albumEntityMono = Mono.just(Optional.empty());\n        }\n        return Mono.zip(playerEntityMono, albumEntityMono)\n                .map(tuple ->\n                        CardMapper.map(cardEntity,\n                                tuple.getT2(), tuple.getT1()));\n    }\n    ```", "```java\n    <dependency>\n        <groupId>org.flywaydb</groupId>\n        <artifactId>flyway-core</artifactId>\n    </dependency>\n    ```", "```java\n    <dependency>\n        <groupId>org.testcontainers</groupId>\n        <artifactId>junit-jupiter</artifactId>\n        <scope>test</scope>\n    </dependency>\n    <dependency>\n        <groupId>org.testcontainers</groupId>\n        <artifactId>postgresql</artifactId>\n        <scope>test</scope>\n    </dependency>\n    ```", "```java\n    spring:\n        r2dbc:\n            url: r2dbc:postgresql://localhost:5432/football\n            username: packt\n            password: packt\n        flyway:\n            url: jdbc:postgresql://localhost:5432/football\n            user: packt\n            password: packt\n    ```", "```java\n    @Testcontainers\n    @SpringBootTest\n    @ContextConfiguration(initializers = PlayersServiceTest.Initializer.class)\n    class PlayersServiceTest {\n        @Autowired\n        private PlayersService playersService;\n        static PostgreSQLContainer<?> postgreSQLContainer = new PostgreSQLContainer<>(\"postgres:latest\")\n                .withDatabaseName(\"football\")\n                .withUsername(\"football\")\n                .withPassword(\"football\");\n        static class Initializer\n                implements ApplicationContextInitializer<ConfigurableApplicationContext> {\n            public void initialize(ConfigurableApplicationContext configurableApplicationContext) {\n                TestPropertyValues.of(\n                        \"spring.flyway.url=\" + postgreSQLContainer.getJdbcUrl(),\n                        \"spring.flyway.user=\" + postgreSQLContainer.getUsername(),\n                        \"spring.flyway.password=\" + postgreSQLContainer.getPassword(),\n                        \"spring.r2dbc.url=\" + postgreSQLContainer.getJdbcUrl().replace(\"jdbc:\", \"r2dbc:\"),\n                        \"spring.r2dbc.username=\" + postgreSQLContainer.getUsername(),\n                        \"spring.r2dbc.password=\" + postgreSQLContainer.getPassword())\n                        .applyTo(configurableApplicationContext.getEnvironment());\n            }\n        }\n        @BeforeAll\n        public static void startContainer() {\n            postgreSQLContainer.start();\n        }\n    ```", "```java\ndocker run -p 5672:7672 -p 15672:15672 \\\n-e RABBITMQ_DEFAULT_USER=packt \\\n-e RABBITMQ_DEFAULT_PASS=packt \\\nrabbitmq:3-management\n```", "```java\n    <dependency>\n        <groupId>org.springframework.cloud</groupId>\n        <artifactId>spring-cloud-stream-binder-rabbit</artifactId>\n    </dependency>\n    ```", "```java\n    public record MatchEvent(Long id, Long matchId,\n                             LocalDateTime eventTime, int type,\n                             String description, Long player1,\n                             Long player2) { }\n    ```", "```java\n    @Bean\n    public Supplier<MatchEvent> matchEvents() {\n        Random random = new Random();\n        return () -> {\n            return MatchEvent.builder()\n                    .withMatchId(1L)\n                    .withType(random.nextInt(0, 10))\n                    .withEventTime(LocalDateTime.now())\n                    .withDescription(\"random event\")\n                    .withPlayer1(null)\n                    .withPlayer2(null)\n                    .build();\n        };\n    }\n    ```", "```java\n    spring:\n      rabbitmq:\n        host: localhost\n        username: packt\n        password: packt\n        port: 5672\n      cloud:\n        stream:\n          bindings:\n            matchEvents-out-0:\n              destination: match-events-topic\n    ```", "```java\n    @Bean\n    public Consumer<MatchEvent> processMatchEvent() {\n        return value -> {\n            System.out.println(\"Processing MatchEvent: \"\n                               + value.type());\n        };\n    }\n    ```", "```java\n    spring:\n      rabbitmq:\n        host: localhost\n        username: packt\n        password: packt\n        port: 5672\n      cloud:\n        stream:\n          function:\n            bindings:\n              processMatchEvent-in-0: input\n          bindings:\n            input:\n              destination: match-events-topic\n              group: timeline\n    ```", "```java\n@Service\npublic class MatchService {\n    private StreamBridge streamBridge;\n    private final String bindingName;\n    public MatchService(StreamBridge streamBridge,\n            @Value(\"${spring.cloud.stream.bindings.matchEvents-out-0.destination}\") String bindingName) {\n        this.streamBridge = streamBridge;\n        this.bindingName = bindingName;\n    }\n}\n```", "```java\npublic void createEvent(MatchEvent matchEvent) {\n    streamBridge.send(bindingName, matchEvent);\n}\n```", "```java\n    @Bean\n    public Supplier<Message<MatchEvent>> matchEvents() {\n        Random random = new Random();\n        return () -> {\n            MatchEvent matchEvent = MatchEvent.builder()\n                    .withMatchId(1L)\n                    .withType(random.nextInt(0, 10))\n                    .withEventTime(LocalDateTime.now())\n                    .withDescription(\"random event\")\n                    .withPlayer1(null)\n                    .withPlayer2(null)\n                    .build();\n            MessageBuilder<MatchEvent> messageBuilder =\n                           MessageBuilder.withPayload(matchEvent);\n            if (matchEvent.type() == 2) {\n                 messageBuilder.setHeader(\"eventType\",\n                                          \"football.goal\");\n            } else {\n                 messageBuilder.setHeader(\"eventType\",\n                                          \"football.event\");\n            }\n            return messageBuilder.build();\n          };\n    }\n    ```", "```java\n    spring:\n      cloud:\n        stream:\n          rabbit:\n            bindings:\n              matchEvents-out-0:\n                producer:\n                  score.\n    ```", "```java\n    @Bean\n    public Consumer<MatchEvent> processGoals() {\n        return value -> {\n            logger.info(\"Processing goal from player {} at {} \",\n                         value.player1(), value.eventTime());\n        };\n    }\n    ```", "```java\n    spring:\n      cloud:\n        stream:\n          rabbit:\n            bindings:\n              input:\n                consumer:\n                  bindingRoutingKey: football.goal.#\n          function:\n            bindings:\n              processGoals-in-0: input\n          bindings:\n            input:\n              destination: match-events-topic\n              group: score\n    ```", "```java\n    @Bean\n    public Consumer<MatchEvent> processGoals() {\n        Random random = new Random();\n        return value -> {\n            if (random.nextInt(0, 10) < 8) {\n                logger.error(\"I'm sorry, I'm crashing...\");\n                throw new RuntimeException(\"Error processing goal\");\n            }\n            logger.info(\"Processing a goal from player {} at {} \",\n                         value.player1(), value.eventTime());\n        };\n    }\n    ```", "```java\n    spring:\n      cloud:\n        stream:\n          rabbit:\n            bindings:\n              input:\n                consumer:\n                  bindingRoutingKey: football.goal.#\n                  match-events-topic.score.dlq. It’s bound to the dead-letter exchange (DLX).\n    ```"]