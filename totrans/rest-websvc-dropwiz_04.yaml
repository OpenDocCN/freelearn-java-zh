- en: Chapter 4. Creating and Adding REST Resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Up until this point, our application doesn't really do much. This is because
    it lacks configured REST resources. A REST resource is something that one can
    refer to as an entity, and in our case, a set of URI templates with a common base
    URL that one can interact with using common HTTP methods.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a resource class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are building a phonebook application, and thus we need to implement the necessary
    functionalities for storing and managing contacts. We will create the resource
    class for the phonebook service. This class will be responsible for handling HTTP
    requests and generating JSON responses. The resource class will initially provide
    the endpoints for retrieving, creating, updating, and deleting contacts.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that we are not yet dealing with structured data or interacting
    with a database, and thus contact-related information transmitted to and from
    our application does not follow a specific format.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps for creating a resource class:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new package, `com.dwbook.phonebook.resources,` and add a `ContactResource`
    class in it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the required packages, `javax.ws.rs.*` and `javax.ws.rs.core.*.wdasdasd`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Specify the URI template of the resource by annotating the class with the `@Path`
    annotation and also specify the response `Content-Type` header using the `@Produces`
    annotation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In order to add a method that will return the information regarding a stored
    contact, create the `#getContact()`method. This method will return a `javax.ws.rs.core.Response`
    object, which is a simple but efficient way of manipulating the actual HTTP response
    sent to the client that performs the request. Add the `@GET` and `@PATH` annotations
    as shown in the following code snippet. This will bind the method to HTTP GET
    requests to `/contact/{id}`. The `{id}` part of the URI represents a variable,
    and is bound to the `int id` parameter of the same method via the `@PathParam`
    annotation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Similarly, we need to implement appropriate methods for creating, deleting,
    and updating contacts. The `#createContact()` method for creating contacts will
    be bound to HTTP POST requests to the `/contact` URI. Since nothing is appended
    to our base URI, this method does not need to be annotated with `@Path`. This
    method will return a `Response` object as well, like all of our resource''s methods
    will, indicating that a new contact has been created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For deleting existing contacts, the HTTP client needs to send an HTTP DELETE
    request to a particular contact''s URI. Due to this, the respective method''s
    URI will be exactly the same as the one for retrieving a single contact. Add the
    `#deleteContact()` method to our resource class, as shown in the following code
    snippet. We will also need to indicate that the requested URI does not have content
    anymore:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The updates to existing contacts are generally performed by HTTP PUT requests
    to a contact''s endpoint. The `#updateContact()` method is going to handle such
    requests and indicate that the update was successful, returning the appropriate
    `Response` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the implemented resource to our Dropwizard application''s environment by
    modifying the `run` method in the `App` class via the `JerseyEnvironment#register()`
    method, as shown in the following code. You also need to add an import clause
    on top of the `App.java` file for the `ContactResource` class (import `com.dwbook.phonebook.resources.ContactResource`).
    You should also see that in order to access our application''s Jersey environment,
    you may use the `Environment#jersey()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Rebuild (with `mvn package` ) and run the application `java -jar target/dwbook-phonebook-1.0-SNAPSHOT.jar
    server config.yaml`. You will see a message indicating that our (Jersey based)
    Dropwizard application is starting along with a list of configured resources,
    in this case, the resources defined in our `com.dwbook.phonebook.resources.ContactResource`
    class.![How to do it...](img/9530OS_04_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Point your browser at `http://localhost:8``080/contact/100` and see the results;
    it will generate a dummy JSON representation with the ID 100, which you provided
    in the URL (a path parameter, which will work with any integer).![How to do it...](img/9530OS_04_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The service is running and listening to incoming requests. You can shut it down
    by pressing *Ctrl* + *C* in your terminal. After a few seconds, the service will
    stop.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The resource class is the most important part of a RESTful Web Service, as it
    is the place where you define the resources and their URIs you wish to expose.
  prefs: []
  type: TYPE_NORMAL
- en: The `@Produces` annotation defines the content type of the responses the class
    methods generate. Despite of defining the value of the HTTP `Content-Type` header,
    it is also used to instruct Jackson to transform the representations to the appropriate
    format, JSON in this case; thus the `MediaType.APPLICATION_JSON` definition. In
    case we would want to return an XML document as the response, we should use `MediaType.APPLICATION_XML`
    instead.
  prefs: []
  type: TYPE_NORMAL
- en: We use the `@Path` annotation to define a URI template. By applying it and bringing
    it on to the level of a class, we define that the base URI of our resources will
    be `/contact`. We used this annotation for the `#getContact` method as well, specifying
    the`/{id}` template. This leads on to the complete URI that will trigger the execution
    of `#getContact` being `/contact/{id}`.
  prefs: []
  type: TYPE_NORMAL
- en: The `{id}` part of the URI is a path parameter, which we mapped to the `int
    id` argument using the `@PathParam` annotation. `PathParam` takes the name of
    the path parameter as its parameter, which in this case is `id`.
  prefs: []
  type: TYPE_NORMAL
- en: Jersey will intercept every incoming HTTP request and try to match it with the
    defined URI template in order to find which resource class method to invoke.
  prefs: []
  type: TYPE_NORMAL
- en: It is generally a good practice to define the base URI at the class level, and
    additionally, more specific URI templates per method.
  prefs: []
  type: TYPE_NORMAL
- en: In order to configure our application to use the resources we created, we had
    to add them to the execution environment, post initialization, in the `#run()`
    method of the `App` class.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A representation is an entity; something that one can refer to. A representation
    can be created, updated, deleted, and returned. A REST resource is an endpoint
    that accepts HTTP requests for such operations.
  prefs: []
  type: TYPE_NORMAL
- en: We used the `@GET` annotation for the `#getContact()` method. This implies that
    the method is bound to, and only to, the HTTP GET verb. We used this verb because
    we were returning data about an entity without modifying it in any way.
  prefs: []
  type: TYPE_NORMAL
- en: HTTP verbs – RESTful convention
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Generally, a RESTful Web Service uses four fundamental HTTP methods (verbs)
    mapped to CRUD operations:'
  prefs: []
  type: TYPE_NORMAL
- en: POST for creating a resource
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PUT for updating a resource
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DELETE for deleting a resource
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GET for returning the representation of a resource
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GET is an idempotent operation; if given the same input, it will return the
    same results without modifying the requesting entity in any case.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can map HTTP verbs to a resource method (for example, `#getContact()`) using
    an appropriate annotation (such as `@POST`, `@PUT`, `@DELETE`, and `@GET`).
  prefs: []
  type: TYPE_NORMAL
- en: HTTP response codes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another important RESTful Web Service design principle, apart from CRUD operations
    being mapped to specific HTTP methods, is the usage of specific response codes
    according to the request and the outcome of the action it triggered.
  prefs: []
  type: TYPE_NORMAL
- en: According to this convention, when a new entity is created successfully, our
    application would respond indicating `201 Created` as the HTTP Response Status
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, when an entity is successfully deleted, our application would send
    the `204 No Content` code. The `204 No Content` code may also be used in other
    cases where the response we send to the client does not include an entity, and
    not only in cases where we delete resources.
  prefs: []
  type: TYPE_NORMAL
- en: For most cases though, when our application is returning data while responding
    to GET requests, the `200 OK` response code is sufficient.
  prefs: []
  type: TYPE_NORMAL
- en: We used the response class in our implementation in order to include specific
    response codes to our application's responses.
  prefs: []
  type: TYPE_NORMAL
- en: The Response class
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `javax.ws.rs.Response` class, instances of which all of our methods return,
    provides a set of `ResponseBuilder` methods that we can use for constructing the
    data we return to the client that performs the HTTP request to our service.
  prefs: []
  type: TYPE_NORMAL
- en: The method `Response#ok()` accepts an `Object` instance as the parameter, which
    is then serialized to our service's response format (defined by the `@Produces`
    annotation) accordingly. The usage of this method returns an `HTTP 200 OK` response
    code to the client.
  prefs: []
  type: TYPE_NORMAL
- en: The `Response#noContent()` method returns an HTTP `204 No Content` response
    code to the client, indicating that no content is applicable to this request.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, the `Response#created()` method is used to send a `201 Created`
    response code along with the URI of the newly created resource. The URI (or null)
    can be passed as a parameter to this method and will be used as the value for
    the `Location` header of the response.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Response` class has a number of useful methods like these, but it also
    enables us to set custom response codes without necessarily using one of the predefined
    methods. To do so, you can use the `Response#status()` method by providing it
    with the appropriate response code, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, we are able to use the `ResponseBuilder#entity()` method in order
    to set the appropriate response payload. The `#entity()` method accepts `Object`
    as the parameter and processes it in a way similar to the `Response#created()`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: What should be noted is that all these methods return a `ResponseBuilder` instance
    and can be chained as well. In order to build the `Response` object, we must use
    the `ResponseBuilder#build()` method.
  prefs: []
  type: TYPE_NORMAL
