- en: Chapter 4. Creating and Adding REST Resources
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章 创建和添加REST资源
- en: Up until this point, our application doesn't really do much. This is because
    it lacks configured REST resources. A REST resource is something that one can
    refer to as an entity, and in our case, a set of URI templates with a common base
    URL that one can interact with using common HTTP methods.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的应用程序实际上并没有做很多事情。这是因为它缺少配置的REST资源。REST资源是人们可以称之为实体的东西，在我们的案例中，是一组URI模板，具有共同的基URL，人们可以使用常见的HTTP方法与之交互。
- en: Creating a resource class
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建资源类
- en: We are building a phonebook application, and thus we need to implement the necessary
    functionalities for storing and managing contacts. We will create the resource
    class for the phonebook service. This class will be responsible for handling HTTP
    requests and generating JSON responses. The resource class will initially provide
    the endpoints for retrieving, creating, updating, and deleting contacts.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在构建一个电话簿应用程序，因此我们需要实现存储和管理联系人的必要功能。我们将创建电话簿服务的资源类。此类将负责处理HTTP请求并生成JSON响应。资源类最初将提供检索、创建、更新和删除联系人的端点。
- en: Please note that we are not yet dealing with structured data or interacting
    with a database, and thus contact-related information transmitted to and from
    our application does not follow a specific format.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们目前还没有处理结构化数据或与数据库交互，因此从我们的应用程序传输到和从应用程序传输的联系人相关信息不遵循特定的格式。
- en: How to do it...
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Perform the following steps for creating a resource class:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 创建资源类的以下步骤：
- en: Create a new package, `com.dwbook.phonebook.resources,` and add a `ContactResource`
    class in it.
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的包，`com.dwbook.phonebook.resources,`并在其中添加一个`ContactResource`类。
- en: 'Import the required packages, `javax.ws.rs.*` and `javax.ws.rs.core.*.wdasdasd`:'
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入所需的包，`javax.ws.rs.*`和`javax.ws.rs.core.*.wdasdasd`：
- en: '[PRE0]'
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Specify the URI template of the resource by annotating the class with the `@Path`
    annotation and also specify the response `Content-Type` header using the `@Produces`
    annotation:'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用`@Path`注解指定资源的URI模板，并使用`@Produces`注解指定响应`Content-Type`头：
- en: '[PRE1]'
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In order to add a method that will return the information regarding a stored
    contact, create the `#getContact()`method. This method will return a `javax.ws.rs.core.Response`
    object, which is a simple but efficient way of manipulating the actual HTTP response
    sent to the client that performs the request. Add the `@GET` and `@PATH` annotations
    as shown in the following code snippet. This will bind the method to HTTP GET
    requests to `/contact/{id}`. The `{id}` part of the URI represents a variable,
    and is bound to the `int id` parameter of the same method via the `@PathParam`
    annotation:'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了添加一个将返回存储联系人信息的方法的步骤，创建`#getContact()`方法。此方法将返回一个`javax.ws.rs.core.Response`对象，这是一种简单但有效的方式来操作发送给执行请求的客户端的实际HTTP响应。添加`@GET`和`@PATH`注解，如以下代码片段所示。这将使方法绑定到`/contact/{id}`的HTTP
    GET请求。URI的`{id}`部分代表一个变量，并通过`@PathParam`注解绑定到同一方法的`int id`参数：
- en: '[PRE2]'
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Similarly, we need to implement appropriate methods for creating, deleting,
    and updating contacts. The `#createContact()` method for creating contacts will
    be bound to HTTP POST requests to the `/contact` URI. Since nothing is appended
    to our base URI, this method does not need to be annotated with `@Path`. This
    method will return a `Response` object as well, like all of our resource''s methods
    will, indicating that a new contact has been created:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样，我们需要实现创建、删除和更新联系人的适当方法。创建联系人的`#createContact()`方法将绑定到`/contact` URI的HTTP
    POST请求。由于我们的基本URI没有附加任何内容，因此此方法不需要使用`@Path`注解。此方法也将返回一个`Response`对象，就像我们所有资源的方法一样，表示已创建新的联系人：
- en: '[PRE3]'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'For deleting existing contacts, the HTTP client needs to send an HTTP DELETE
    request to a particular contact''s URI. Due to this, the respective method''s
    URI will be exactly the same as the one for retrieving a single contact. Add the
    `#deleteContact()` method to our resource class, as shown in the following code
    snippet. We will also need to indicate that the requested URI does not have content
    anymore:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于删除现有联系人，HTTP客户端需要向特定联系人的URI发送HTTP DELETE请求。因此，相应方法的URI将与检索单个联系人的URI完全相同。将`#deleteContact()`方法添加到我们的资源类中，如以下代码片段所示。我们还需要表明请求的URI不再包含内容：
- en: '[PRE4]'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The updates to existing contacts are generally performed by HTTP PUT requests
    to a contact''s endpoint. The `#updateContact()` method is going to handle such
    requests and indicate that the update was successful, returning the appropriate
    `Response` object:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现有联系人的更新通常是通过向联系人的端点发送 HTTP PUT 请求来完成的。`#updateContact()` 方法将处理此类请求并指示更新成功，返回适当的
    `Response` 对象：
- en: '[PRE5]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Add the implemented resource to our Dropwizard application''s environment by
    modifying the `run` method in the `App` class via the `JerseyEnvironment#register()`
    method, as shown in the following code. You also need to add an import clause
    on top of the `App.java` file for the `ContactResource` class (import `com.dwbook.phonebook.resources.ContactResource`).
    You should also see that in order to access our application''s Jersey environment,
    you may use the `Environment#jersey()` method:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过修改 `App` 类中的 `run` 方法并通过 `JerseyEnvironment#register()` 方法将实现的资源添加到我们的 Dropwizard
    应用程序环境中，如以下代码所示。您还需要在 `App.java` 文件顶部添加一个导入语句来导入 `ContactResource` 类（导入 `com.dwbook.phonebook.resources.ContactResource`）。您还应该看到，为了访问我们的应用程序的
    Jersey 环境，您可以使用 `Environment#jersey()` 方法：
- en: '[PRE6]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Rebuild (with `mvn package` ) and run the application `java -jar target/dwbook-phonebook-1.0-SNAPSHOT.jar
    server config.yaml`. You will see a message indicating that our (Jersey based)
    Dropwizard application is starting along with a list of configured resources,
    in this case, the resources defined in our `com.dwbook.phonebook.resources.ContactResource`
    class.![How to do it...](img/9530OS_04_01.jpg)
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `mvn package` 重建应用程序并运行 `java -jar target/dwbook-phonebook-1.0-SNAPSHOT.jar
    server config.yaml`。您将看到一条消息，指示我们的（基于 Jersey 的）Dropwizard 应用程序正在启动，以及配置的资源列表，在这种情况下，是我们在
    `com.dwbook.phonebook.resources.ContactResource` 类中定义的资源。![如何操作...](img/9530OS_04_01.jpg)
- en: Point your browser at `http://localhost:8``080/contact/100` and see the results;
    it will generate a dummy JSON representation with the ID 100, which you provided
    in the URL (a path parameter, which will work with any integer).![How to do it...](img/9530OS_04_02.jpg)
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的浏览器指向 `http://localhost:8080/contact/100` 并查看结果；它将生成一个 ID 为 100 的虚拟 JSON
    表示，这是您在 URL 中提供的（一个路径参数，它将适用于任何整数）。![如何操作...](img/9530OS_04_02.jpg)
- en: The service is running and listening to incoming requests. You can shut it down
    by pressing *Ctrl* + *C* in your terminal. After a few seconds, the service will
    stop.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 服务正在运行并监听传入的请求。您可以通过在终端中按 *Ctrl* + *C* 来关闭它。几秒钟后，服务将停止。
- en: How it works…
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The resource class is the most important part of a RESTful Web Service, as it
    is the place where you define the resources and their URIs you wish to expose.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 资源类是 RESTful Web 服务最重要的部分，因为它是定义您希望公开的资源及其 URI 的地方。
- en: The `@Produces` annotation defines the content type of the responses the class
    methods generate. Despite of defining the value of the HTTP `Content-Type` header,
    it is also used to instruct Jackson to transform the representations to the appropriate
    format, JSON in this case; thus the `MediaType.APPLICATION_JSON` definition. In
    case we would want to return an XML document as the response, we should use `MediaType.APPLICATION_XML`
    instead.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Produces` 注解定义了类方法生成的响应的内容类型。尽管它定义了 HTTP `Content-Type` 头的值，但它也用于指示 Jackson
    将表示转换为适当的格式，在这种情况下是 JSON；因此有 `MediaType.APPLICATION_JSON` 的定义。如果我们想返回 XML 文档作为响应，我们应该使用
    `MediaType.APPLICATION_XML`。'
- en: We use the `@Path` annotation to define a URI template. By applying it and bringing
    it on to the level of a class, we define that the base URI of our resources will
    be `/contact`. We used this annotation for the `#getContact` method as well, specifying
    the`/{id}` template. This leads on to the complete URI that will trigger the execution
    of `#getContact` being `/contact/{id}`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `@Path` 注解来定义 URI 模板。通过应用它并将其提升到类的级别，我们定义了资源的基 URI 将是 `/contact`。我们还使用了此注解来指定
    `#getContact` 方法，指定了 `/{id}` 模板。这导致触发 `#getContact` 执行的完整 URI 是 `/contact/{id}`。
- en: The `{id}` part of the URI is a path parameter, which we mapped to the `int
    id` argument using the `@PathParam` annotation. `PathParam` takes the name of
    the path parameter as its parameter, which in this case is `id`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: URI 的 `{id}` 部分是一个路径参数，我们使用 `@PathParam` 注解将其映射到 `int id` 参数。`PathParam` 使用路径参数的名称作为其参数，在这种情况下是
    `id`。
- en: Jersey will intercept every incoming HTTP request and try to match it with the
    defined URI template in order to find which resource class method to invoke.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Jersey 将拦截每个传入的 HTTP 请求并尝试将其与定义的 URI 模板匹配，以找到要调用的资源类方法。
- en: It is generally a good practice to define the base URI at the class level, and
    additionally, more specific URI templates per method.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在类级别定义基本 URI 是一个好习惯，并且还可以为每个方法定义更具体的 URI 模板。
- en: In order to configure our application to use the resources we created, we had
    to add them to the execution environment, post initialization, in the `#run()`
    method of the `App` class.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为了配置我们的应用程序使用我们创建的资源，我们必须在 `App` 类的 `#run()` 方法初始化后将其添加到执行环境中。
- en: There's more…
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: A representation is an entity; something that one can refer to. A representation
    can be created, updated, deleted, and returned. A REST resource is an endpoint
    that accepts HTTP requests for such operations.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 表示是一个实体；可以引用的东西。表示可以创建、更新、删除和返回。REST 资源是接受此类操作的 HTTP 请求的端点。
- en: We used the `@GET` annotation for the `#getContact()` method. This implies that
    the method is bound to, and only to, the HTTP GET verb. We used this verb because
    we were returning data about an entity without modifying it in any way.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为 `#getContact()` 方法使用了 `@GET` 注解。这意味着该方法绑定到，并且仅绑定到 HTTP GET 动词。我们使用这个动词是因为我们返回了关于实体的数据，但没有以任何方式修改它。
- en: HTTP verbs – RESTful convention
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: HTTP 动词 – RESTful 约定
- en: 'Generally, a RESTful Web Service uses four fundamental HTTP methods (verbs)
    mapped to CRUD operations:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，RESTful Web 服务使用四种基本的 HTTP 方法（动词）映射到 CRUD 操作：
- en: POST for creating a resource
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: POST 用于创建资源
- en: PUT for updating a resource
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PUT 用于更新资源
- en: DELETE for deleting a resource
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DELETE 用于删除资源
- en: GET for returning the representation of a resource
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GET 用于返回资源的表示
- en: GET is an idempotent operation; if given the same input, it will return the
    same results without modifying the requesting entity in any case.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: GET 是一个幂等操作；如果给定相同的输入，它将在任何情况下返回相同的结果，而不会修改请求实体。
- en: Tip
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You can map HTTP verbs to a resource method (for example, `#getContact()`) using
    an appropriate annotation (such as `@POST`, `@PUT`, `@DELETE`, and `@GET`).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用适当的注解（例如 `@POST`、`@PUT`、`@DELETE` 和 `@GET`）将 HTTP 动词映射到资源方法（例如，`#getContact()`）。
- en: HTTP response codes
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: HTTP 响应代码
- en: Another important RESTful Web Service design principle, apart from CRUD operations
    being mapped to specific HTTP methods, is the usage of specific response codes
    according to the request and the outcome of the action it triggered.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 CRUD 操作映射到特定的 HTTP 方法之外，另一个重要的 RESTful Web 服务设计原则是根据请求和触发的操作结果使用特定的响应代码。
- en: According to this convention, when a new entity is created successfully, our
    application would respond indicating `201 Created` as the HTTP Response Status
    code.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 根据这个约定，当新实体成功创建时，我们的应用程序会响应，表示 HTTP 响应状态代码为 `201 Created`。
- en: Similarly, when an entity is successfully deleted, our application would send
    the `204 No Content` code. The `204 No Content` code may also be used in other
    cases where the response we send to the client does not include an entity, and
    not only in cases where we delete resources.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，当实体成功删除时，我们的应用程序会发送 `204 No Content` 代码。`204 No Content` 代码也可以在其他情况下使用，当我们发送给客户端的响应不包含实体时，而不仅仅是在我们删除资源的情况下。
- en: For most cases though, when our application is returning data while responding
    to GET requests, the `200 OK` response code is sufficient.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数情况，当我们的应用程序在响应 GET 请求时返回数据，`200 OK` 响应代码就足够了。
- en: We used the response class in our implementation in order to include specific
    response codes to our application's responses.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在我们的实现中使用了响应类，以便在我们的应用程序响应中包含特定的响应代码。
- en: The Response class
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 响应类
- en: The `javax.ws.rs.Response` class, instances of which all of our methods return,
    provides a set of `ResponseBuilder` methods that we can use for constructing the
    data we return to the client that performs the HTTP request to our service.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`javax.ws.rs.Response` 类，我们所有方法都返回其实例，提供了一套 `ResponseBuilder` 方法，我们可以使用这些方法来构建返回给执行
    HTTP 请求到我们服务的客户端的数据。'
- en: The method `Response#ok()` accepts an `Object` instance as the parameter, which
    is then serialized to our service's response format (defined by the `@Produces`
    annotation) accordingly. The usage of this method returns an `HTTP 200 OK` response
    code to the client.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`Response#ok()` 方法接受一个 `Object` 实例作为参数，然后根据我们的服务响应格式（由 `@Produces` 注解定义）相应地进行序列化。使用此方法将返回
    `HTTP 200 OK` 响应代码给客户端。'
- en: The `Response#noContent()` method returns an HTTP `204 No Content` response
    code to the client, indicating that no content is applicable to this request.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`Response#noContent()` 方法返回一个 HTTP `204 No Content` 响应代码给客户端，表示没有内容适用于此请求。'
- en: On the other hand, the `Response#created()` method is used to send a `201 Created`
    response code along with the URI of the newly created resource. The URI (or null)
    can be passed as a parameter to this method and will be used as the value for
    the `Location` header of the response.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，`Response#created()`方法用于发送一个`201 Created`响应代码，并附带新创建资源的URI。URI（或null）可以作为参数传递给此方法，并将其用作响应的`Location`头部的值。
- en: 'The `Response` class has a number of useful methods like these, but it also
    enables us to set custom response codes without necessarily using one of the predefined
    methods. To do so, you can use the `Response#status()` method by providing it
    with the appropriate response code, as shown in the following example:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`Response`类有多个类似的有用方法，但它还允许我们设置自定义响应代码，而无需使用预定义方法之一。为此，你可以通过提供适当的响应代码来使用`Response#status()`方法，如下例所示：'
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Additionally, we are able to use the `ResponseBuilder#entity()` method in order
    to set the appropriate response payload. The `#entity()` method accepts `Object`
    as the parameter and processes it in a way similar to the `Response#created()`
    method:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以使用`ResponseBuilder#entity()`方法来设置适当响应负载。`#entity()`方法接受`Object`作为参数，并以类似于`Response#created()`方法的方式处理它：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: What should be noted is that all these methods return a `ResponseBuilder` instance
    and can be chained as well. In order to build the `Response` object, we must use
    the `ResponseBuilder#build()` method.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 应该注意的是，所有这些方法都返回一个`ResponseBuilder`实例，并且也可以进行链式调用。为了构建`Response`对象，我们必须使用`ResponseBuilder#build()`方法。
