- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Documenting APIs with the OpenAPI Specification
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned how to develop our Spring Boot application.
    First, we configured our application to run on the server using IntelliJ. Then,
    we developed the different parts of the REST application, such as the models and
    entities, which serve as the objects; the services, which hold the business logic
    and call the JPA repository to perform CRUD operations in the database; and the
    controllers, which define the endpoints. We also learned how to apply Redis, which
    adds a caching mechanism to improve the performance of our REST APIs.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will focus on creating the documentation for our Spring Boot project.
    We will focus on configuring `springdoc-openapi` and Swagger UI and generating
    documentation on the fly for the endpoints that we have developed.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up `springdoc-openapi`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Swagger UI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following link will take you to the finished version of this chapter: [https://github.com/PacktPublishing/Spring-Boot-and-Angular/tree/main/Chapter-06/superheroes](https://github.com/PacktPublishing/Spring-Boot-and-Angular/tree/main/Chapter-06/superheroes).'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up springdoc-openapi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will configure `springdoc-openapi` in our Spring Boot application.
    Since we developed our REST APIs in the previous chapter, the next thing we need
    to do is create documentation for our endpoints. This is an essential part, especially
    in the development industry, as this will tell the developers what endpoints can
    be implemented, what the required requests and their formats are, and what response
    body to expect when calling the endpoint. This also reduces errors and conflicts
    regarding the API integration as the available endpoints are transparent. However,
    the major drawback of creating documentation manually is that it is tedious and
    error-prone. This is where `springdoc-openapi` comes into the picture.
  prefs: []
  type: TYPE_NORMAL
- en: First, let’s discuss what `springdoc-openapi` is. `springdoc-openapi` is a library
    that automates the generation of API documentation in Spring Boot projects. This
    automation is possible as the library uses annotations, class structures, and
    Spring configurations to identify the available APIs.
  prefs: []
  type: TYPE_NORMAL
- en: '`springdoc-openapi` can generate the necessary documentation in JSON/YAML and
    HTML APIs that can be viewed with a newly generated URL on our application. It
    also supports several frameworks and protocols, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`spring-boot`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JSR-303, specifically for `@NotNull`, `@Min`, `@Max`, and `@Size`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`swagger-ui`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OAuth 2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let’s discuss the properties and plugins of `springdoc-openapi`.
  prefs: []
  type: TYPE_NORMAL
- en: The properties of springdoc-openapi
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can modify the behavior and settings of `.springdoc-openapi` based on our
    preference. It has different properties, as we can set their values under the
    `application.properties` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some of the commonly used properties in `springdoc-openapi`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`springdoc.swagger-ui.path`: The default value is `/swagger-ui.html`. It defines
    the path to access the HTML documentation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`springdoc.swagger-UI.enabled`: The default value is `true`. It enables or
    disables the `swagger-UI` endpoint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`springdoc.swagger-ui.configUrl`: The default value is `/v3/api-docs/swagger-config`.
    It is a URL that retrieves an external configuration document.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`springdoc.swagger-ui.layout`: The default value is `BaseLayout`. It’s the
    top-level layout used by Swagger UI to display the documentation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`springdoc.swagger-ui.tryItOutEnabled`: The default value is `false`. It enables
    or disables the **Try it out** section, where the user can test the endpoints.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`springdoc.swagger-ui.filter`: The default value is `false`. It enables or
    disables filtering and adds a textbox to place the filter criteria. It can be
    a Boolean or a string; this will act as the filter expression.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`springdoc.swagger-ui.operationsSorter`: This applies a sort to the operations
    list of the API. The value can be `''alpha''` (sort by paths alphanumerically),
    `''method''` (sort by HTTP method), or a function that will identify the sorting
    criteria.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`springdoc.swagger-ui.tagsSorter`: This applies a sort to the operations list
    of the API. The value can be `''alpha''` (sort by paths alphanumerically) or a
    function that will identify the sorting criteria.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The plugins of springdoc-openapi
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`springdoc-openapi` also has plugins that we can use to generate the documentation.
    Let’s take a look.'
  prefs: []
  type: TYPE_NORMAL
- en: springdoc-openapi-maven-plugin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`springdoc-openapi-maven-plugin` generates a JSON and YAML OpenAPI description
    during build time. The plugin also works in the integration phase. To enable the
    plugin, we need to add the following declaration to the `<plugin>` section of
    the `pom.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We just added the `spring-boot-maven-plugin` plugin. Copy the preceding code
    and paste it into your `.``pom` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s add version 1.4 of `springdoc-openapi-maven-plugin` just below the
    `spring-boot-maven-plugin` plugin code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also customize the behavior of `openapi-maven-plugin` by specifying
    the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`attachArtifact`: The default value is `false`. It deploys the API documentation
    to the repository.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`apiDocsUrl`: The default value is `http://localhost:8080/v3/api-docs`. This
    is the local URL to the generated JSON or YAML description.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`outputDir`: The default value is `project.build.directory`. This is where
    the OpenAPI description is generated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`outputFileName`: The default value is `openapi.json`. This specifies the filename
    when the OpenAPI description is generated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skip`: This skips execution if it is set to `true`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`headers`: The default value is `empty`. It specifies the list of headers to
    send in the request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following code example shows how to use these properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example XML code, we have added several properties to apply
    custom configuration for OpenAPI. We have manually set the output filename, directory,
    and headers for generating the API documentation.
  prefs: []
  type: TYPE_NORMAL
- en: springdoc-openapi-gradle-plugin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`springdoc-openapi-gradle-plugin` generates the OpenAPI specification for a
    Spring Boot application from a Gradle build. To enable the plugin, we must place
    the following code in our `plugins` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the plugins and dependencies have been added, the following tasks will
    be created:'
  prefs: []
  type: TYPE_NORMAL
- en: '`generateOpenApiDocs`: The job that will be run to generate the OpenAPI documentation.
    `generateOpenApiDocs` makes a REST call to the application’s documentation URL
    to store the OpenAPI docs in JSON format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`forkedSpringBootRun`: The Spring Boot application runs in the background using
    this task.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can also customize the behavior of `openapi-graven-plugin` by specifying
    the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`apiDocsUrl`: The URL where the Open API documentation can be downloaded'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`outputDir`: The directory where the documentation is generated'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`outputFileName`: The name of the generated output file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`waitTimeInSeconds`: The time to wait in seconds for the Spring Boot application
    to start before calling the REST APIs to generate the OpenAPI documentation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`forkProperties`: A system property that’s required for running your Spring
    Boot application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`groupedApiMappings`: A set of URLs from where the OpenAPI documentation can
    be downloaded'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To use these properties, we must specify them using `generateOpenApiDocs`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: With that, we have learned about the properties and plugins that we can use
    in OpenAPI docs. Now, let’s configure the plugin for our Spring Boot application.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring springdoc-openapi
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, we will install and configure `springdoc-openapi` in our Spring Boot application.
    First, we must add the dependency to the previous project we made. Go to the `pom.xml`
    file and add the following XML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'After successfully installing the OpenAPI dependency, we can run our Spring
    Boot project. Once the server has started, we can go to `http://localhost:8080/v3/api-docs/`
    to access the OpenAPI documentation in JSON format. You will see that all of your
    endpoints and their associated HTTP requests are displayed as JSON objects. The
    following is a snippet of the generated JSON documentation for our project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here, we can see that the generated JSON object displays the available endpoints
    in our project. It is shown together with the operation ID, which is the default
    name of the method; it also specifies the parameters with the types required and
    the possible responses of the endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: We have used the default URL where OpenAPI can be accessed. We can change the
    URL using the application’s `springdoc.api-docs.path property.properties` file.
    For example, we have set it to `springdoc.api-docs.path=rest-docs`, which means
    we can now access the JSON document using `http://localhost:8080/rest-docs/`.
  prefs: []
  type: TYPE_NORMAL
- en: We can also access the YAML version of the documentation by accessing `http://localhost:8080/v3/api-docs.yaml`.
  prefs: []
  type: TYPE_NORMAL
- en: With that, we have successfully generated the documentation for our endpoints
    using `springdoc-openapi`. In the next section, we will learn how to configure,
    access, and use Swagger UI.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Swagger UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Swagger UI** is a documentation tool that allows users to call the available
    APIs in your project directly from a browser. This is a more interactive tool
    that enables a more detailed and practical use of the APIs. Swagger UI is also
    open source, enabling more communities to support the tool.'
  prefs: []
  type: TYPE_NORMAL
- en: Installing and using Swagger UI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Swagger UI is already included under the `springdoc-openapi-ui` dependency.
    We have already included the OpenAPI extension code by adding the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The OpenAPI dependency includes the Swagger UI extension; we can access the
    UI with the following URL: `http://localhost:8080/swagger-ui.html`. This will
    open the Swagger UI’s **OpenAPI** **definition** page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1 – The Swagger UI’s OpenAPI definition page](img/B18159_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.1 – The Swagger UI’s OpenAPI definition page
  prefs: []
  type: TYPE_NORMAL
- en: Here, we can see that our Swagger UI has been accessed successfully. Our created
    endpoints in the Spring Boot project are also displayed, together with their HTTP
    methods. Let’s discuss the different parts of the Swagger UI documentation.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing we can see in Swagger UI is that it contains text input, alongside
    the `v3/api-docs`. This means that the JSON documentation we have generated using
    the OpenAPI library is being used by Swagger to get the available endpoints.
  prefs: []
  type: TYPE_NORMAL
- en: We can change this and access the URL that contains the OpenAPI documentation
    in JSON or YAML format. The next component we will see is the list of available
    endpoints in our project. In the preceding example, the five endpoints we have
    developed are listed in Swagger UI. This is not a list as the Swagger UI tool
    is interactive, allowing us to try the available endpoints.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s have a look at the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2 – POST request for anti-heroes](img/B18159_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.2 – POST request for anti-heroes
  prefs: []
  type: TYPE_NORMAL
- en: 'We can expand the `/api/v1/anti-heroes` endpoint to create a new Anti-Hero
    object in our database since this is using the `POST` HTTP method. The schema
    of the object we need to pass in our request body is specified. It defines both
    the names and the types of properties. In this case, the Anti-Hero entity has
    the following schema:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The possible responses are also specified in the example endpoint. The possible
    response has a status of `200`, which specifies success. It will also return the
    newly created entity in the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'We want to test the endpoint and insert some example data into the database.
    To do this, we must click the **Try it out** button, which can be found at the
    top right, and click the **Execute** button to call the endpoint. Once the API
    call is successful, we will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.3 – Response from the POST request](img/B18159_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.3 – Response from the POST request
  prefs: []
  type: TYPE_NORMAL
- en: Here, we can see that the API returned successfully as it returned a **Code**
    of **200** and the newly created entity in the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can check whether our endpoint has successfully inserted the data into our
    table by accessing `pgAdmin`, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.4 – Verifying whether data has been inserted from the POST request](img/B18159_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.4 – Verifying whether data has been inserted from the POST request
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding example, we can see that our data has been inserted successfully
    into our table. Now, we can test the other available endpoints by getting, updating,
    or deleting the data we have created in the database.
  prefs: []
  type: TYPE_NORMAL
- en: We have successfully navigated through the Swagger UI tool and interacted with
    the available endpoints, but we can also modify Swagger UI based on our preferences
    and requirements by using properties, similar to what we can do with the OpenAPI
    documentation. We can also modify the URL to access Swagger UI; for example, we
    can place `springdoc.swagger-ui.path=/{custom-path}.html` in the `application.properties`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: The other behavior we can also modify is the sorting behavior of our endpoints.
    We can change how the endpoints are arranged in the list in terms of `alpha` (arranged
    alphanumerically) or `method` (arranged by methods), or we can use a custom function
    to change the sorting method. For this, we can place `springdoc.swagger-ui.operationsSorter=(sort
    behavior`) in the `application.properties` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we will use `springdoc.swagger-ui.operationsSorter=method`.
    We will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.5 – Endpoints arranged by methods](img/B18159_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.5 – Endpoints arranged by methods
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, our endpoints are now arranged by the HTTP methods.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying pagination information in Swagger UI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Swagger UI can also be integrated with endpoints that use pagination. We can
    specify the page number, the size of the list on each page, and the sorting expression.
    For us to integrate the pagination parameters in Swagger UI, we need to add the
    `springdoc-open-data-rest` dependency.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the library, we must add the following code to our `pom.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'After successfully adding the library, let’s modify our `getAntiHeroes` method
    under `AntiHeroesController` so that we have a working pagination feature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let’s expand `api/v1/anti-heroes`, which uses the `GET` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.6 – GET method for anti-heroes](img/B18159_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.6 – GET method for anti-heroes
  prefs: []
  type: TYPE_NORMAL
- en: Here, we can see that the **Parameters** section has a **pageable** property
    and that we can specify the page we want to retrieve, the size of each page, and
    the sorting expression. Now, we can execute it to retrieve the data from the database.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With this, we have reached the end of this chapter. Let’s recap the valuable
    things you have learned.
  prefs: []
  type: TYPE_NORMAL
- en: First, you learned about the available features and properties of `springdoc-openapi`
    and how to configure and use the OpenAPI specification to generate the JSON and
    YAML documentation for our API calls. You also learned how to access Swagger UI,
    an interactive documentation tool for calling APIs directly in a browser. We simulated
    this to send test calls and modify certain behaviors, such as the domain URL and
    the sorting order. This newly acquired knowledge for generating documentation
    for APIs is very useful in real-world applications. This knowledge is used by
    developers to easily identify the available APIs that can be consumed, as well
    as their parameters and object responses.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about the concept of **Cross-Origin Resource
    Sharing** (**CORS**), Spring Security, and **JSON Web** **Tokens** (**JWTs**).
  prefs: []
  type: TYPE_NORMAL
