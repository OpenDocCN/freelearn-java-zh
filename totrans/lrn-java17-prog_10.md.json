["```java\nclass MyThread extends Thread {\n```", "```java\n    private String parameter;\n```", "```java\n    public MyThread(String parameter) {\n```", "```java\n        this.parameter = parameter;\n```", "```java\n    }\n```", "```java\n    public void run() {\n```", "```java\n        while(!\"exit\".equals(parameter)){\n```", "```java\n           System.out.println((isDaemon() ? \"daemon\" \n```", "```java\n              : \"  user\") + \" thread \" + this.getName() + \n```", "```java\n              \"(id=\" + this.getId() + \") parameter: \" +\n```", "```java\n                                               parameter);\n```", "```java\n            pauseOneSecond();\n```", "```java\n        }\n```", "```java\n        System.out.println((isDaemon() ? \"daemon\" \n```", "```java\n              : \"  user\") + \" thread \" + this.getName() + \n```", "```java\n              \"(id=\" + this.getId() + \") parameter: \" +\n```", "```java\n                                               parameter);\n```", "```java\n    }\n```", "```java\n    public void setParameter(String parameter) {\n```", "```java\n        this.parameter = parameter;\n```", "```java\n    }\n```", "```java\n}\n```", "```java\nprivate static void pauseOneSecond(){\n```", "```java\n    try {\n```", "```java\n        TimeUnit.SECONDS.sleep(1);\n```", "```java\n    } catch (InterruptedException e) {\n```", "```java\n        e.printStackTrace();\n```", "```java\n    }\n```", "```java\n}\n```", "```java\npublic static void main(String... args) {\n```", "```java\n    MyThread thr1 = new MyThread(\"One\");\n```", "```java\n    thr1.start();\n```", "```java\n    MyThread thr2 = new MyThread(\"Two\");\n```", "```java\n    thr2.setDaemon(true);\n```", "```java\n    thr2.start();\n```", "```java\n    pauseOneSecond();\n```", "```java\n    thr1.setParameter(\"exit\");\n```", "```java\n    pauseOneSecond();\n```", "```java\n    System.out.println(\"Main thread exists\");\n```", "```java\n}\n```", "```java\nclass MyRunnable implements Runnable {\n```", "```java\n    private String parameter, name;\n```", "```java\n    public MyRunnable(String name) {\n```", "```java\n        this.name = name;\n```", "```java\n    }\n```", "```java\n    public void run() {\n```", "```java\n        while(!\"exit\".equals(parameter)){\n```", "```java\n            System.out.println(\"thread \" + this.name + \n```", "```java\n                              \", parameter: \" + parameter);\n```", "```java\n            pauseOneSecond();\n```", "```java\n        }\n```", "```java\n        System.out.println(\"thread \" + this.name +\n```", "```java\n                              \", parameter: \" + parameter);\n```", "```java\n    }\n```", "```java\n    public void setParameter(String parameter) {\n```", "```java\n        this.parameter = parameter;\n```", "```java\n    }\n```", "```java\n}\n```", "```java\npublic static void main(String... args) {\n```", "```java\n    MyRunnable myRunnable1 = new MyRunnable(\"One\");\n```", "```java\n    MyRunnable myRunnable2 = new MyRunnable(\"Two\");\n```", "```java\n    Thread thr1 = new Thread(myRunnable1);\n```", "```java\n    thr1.start();\n```", "```java\n    Thread thr2 = new Thread(myRunnable2);\n```", "```java\n    thr2.setDaemon(true);\n```", "```java\n    thr2.start();\n```", "```java\n    pauseOneSecond();\n```", "```java\n    myRunnable1.setParameter(\"exit\");\n```", "```java\n    pauseOneSecond();\n```", "```java\n    System.out.println(\"Main thread exists\");\n```", "```java\n}\n```", "```java\nclass MyRunnable implements Runnable {\n```", "```java\n   private String name;\n```", "```java\n   public MyRunnable(String name) {\n```", "```java\n      this.name = name;\n```", "```java\n   }\n```", "```java\n   public void run() {\n```", "```java\n      try {\n```", "```java\n            while (true) {\n```", "```java\n           System.out.println(this.name + \n```", "```java\n                                     \" is working...\");\n```", "```java\n           TimeUnit.SECONDS.sleep(1);\n```", "```java\n         }\n```", "```java\n      } catch (InterruptedException e) {\n```", "```java\n        System.out.println(this.name + \n```", "```java\n                      \" was interrupted\\n\" + this.name + \n```", "```java\n            \" Thread.currentThread().isInterrupted()=\" +\n```", "```java\n                  Thread.currentThread().isInterrupted());\n```", "```java\n      }\n```", "```java\n   }\n```", "```java\n}\n```", "```java\nExecutorService pool = Executors.newCachedThreadPool();\n```", "```java\nString[] names = {\"One\", \"Two\", \"Three\"};\n```", "```java\nfor (int i = 0; i < names.length; i++) {\n```", "```java\n    pool.execute(new MyRunnable(names[i]));\n```", "```java\n}\n```", "```java\nSystem.out.println(\"Before shutdown: isShutdown()=\" +\n```", "```java\n            pool.isShutdown() + \", isTerminated()=\" + \n```", "```java\n                                pool.isTerminated());\n```", "```java\npool.shutdown(); \n```", "```java\n           // New threads cannot be added to the pool\n```", "```java\n//pool.execute(new MyRunnable(\"Four\"));    \n```", "```java\n                          //RejectedExecutionException\n```", "```java\nSystem.out.println(\"After shutdown: isShutdown()=\" +\n```", "```java\n           pool.isShutdown() + \", isTerminated()=\" + \n```", "```java\n                               pool.isTerminated());\n```", "```java\ntry {\n```", "```java\n  long timeout = 100;\n```", "```java\n  TimeUnit timeUnit = TimeUnit.MILLISECONDS;\n```", "```java\n  System.out.println(\"Waiting all threads completion for \"\n```", "```java\n                      + timeout + \" \" + timeUnit + \"...\");\n```", "```java\n         // Blocks until timeout, or all threads complete\n```", "```java\n         // execution, or the current thread is\n```", "```java\n         // interrupted, whichever happens first.\n```", "```java\n  boolean isTerminated = \n```", "```java\n                pool.awaitTermination(timeout, timeUnit);\n```", "```java\n  System.out.println(\"isTerminated()=\" + isTerminated);\n```", "```java\n  if (!isTerminated) {\n```", "```java\n    System.out.println(\"Calling shutdownNow()...\");\n```", "```java\n    List<Runnable> list = pool.shutdownNow();\n```", "```java\n    System.out.println(list.size() + \" threads running\");\n```", "```java\n    isTerminated = \n```", "```java\n                pool.awaitTermination(timeout, timeUnit);\n```", "```java\n    if (!isTerminated) {\n```", "```java\n     System.out.println(\"Some threads are still running\");\n```", "```java\n    }\n```", "```java\n    System.out.println(\"Exiting\");\n```", "```java\n  }\n```", "```java\n} catch (InterruptedException ex) {\n```", "```java\n    ex.printStackTrace();\n```", "```java\n}\n```", "```java\nclass MyRunnable implements Runnable {\n```", "```java\n   private String name;\n```", "```java\n   public MyRunnable(String name) {\n```", "```java\n      this.name = name;\n```", "```java\n   }\n```", "```java\n   public void run() {\n```", "```java\n      try {\n```", "```java\n         while (true) {\n```", "```java\n             System.out.println(this.name + \" is working...\");\n```", "```java\n             TimeUnit.SECONDS.sleep(1);\n```", "```java\n         }\n```", "```java\n      } catch (InterruptedException e) {\n```", "```java\n         Thread.currentThread().interrupt();\n```", "```java\n         System.out.println(this.name + \n```", "```java\n           \" was interrupted\\n\" + this.name + \n```", "```java\n           \" Thread.currentThread().isInterrupted()=\" + \n```", "```java\n                Thread.currentThread().isInterrupted());\n```", "```java\n      }\n```", "```java\n   }\n```", "```java\n}\n```", "```java\nThreadPoolExecutor (int corePoolSize, \n```", "```java\n                    int maximumPoolSize, \n```", "```java\n                    long keepAliveTime, \n```", "```java\n                    TimeUnit unit, \n```", "```java\n                    BlockingQueue<Runnable> workQueue, \n```", "```java\n                    ThreadFactory threadFactory, \n```", "```java\n                    RejectedExecutionHandler handler)\n```", "```java\n    class MyRunnable implements Runnable {\n       private String name;\n       public MyRunnable(String name) {\n         this.name = name;\n       }\n       public void run() {\n          try {\n             System.out.println(this.name + \n                                      \" is working...\");\n             TimeUnit.MILLISECONDS.sleep(100);\n             System.out.println(this.name + \" is done\");\n          } catch (InterruptedException e) {\n             Thread.currentThread().interrupt();\n             System.out.println(this.name + \n                          \" was interrupted\\n\" + this.name + \n                \" Thread.currentThread().isInterrupted()=\" +\n                    Thread.currentThread().isInterrupted());\n          }\n       }\n    }\n    ```", "```java\nvoid shutdownAndTerminate(ExecutorService pool){\n  try {\n    long timeout = 100;\n    TimeUnit timeUnit = TimeUnit.MILLISECONDS;\n    System.out.println(\"Waiting all threads \" + \n             \"completion for \" + timeout + \" \" + \n                               timeUnit + \"...\");\n     //Blocks until timeout or all threads complete\n     // execution, or the current thread is\n     // interrupted, whichever happens first.\n    boolean isTerminated = \n          pool.awaitTermination(timeout, timeUnit);\n    System.out.println(\"isTerminated()=\" +\n                                     isTerminated);\n    if(!isTerminated) {\n      System.out.println(\"Calling shutdownNow()...\");\n      List<Runnable> list = pool.shutdownNow();\n      System.out.println(list.size() + \n                                 \" threads running\");\n       isTerminated = \n            pool.awaitTermination(timeout, timeUnit);\n       if (!isTerminated) {\n          System.out.println(\"Some threads are still running\");\n       }\n       System.out.println(\"Exiting\");\n     }\n  } catch (InterruptedException ex) {\n      ex.printStackTrace();\n   }\n}\n```", "```java\nExecutorService pool = Executors.newSingleThreadExecutor();\nFuture future = pool.submit(new MyRunnable(\"One\"));\nSystem.out.println(future.isDone());         \n                                          //prints: false\nSystem.out.println(future.isCancelled());    \n                                          //prints: false\ntry{\n    System.out.println(future.get());        \n                                           //prints: null\n    System.out.println(future.isDone());     \n                                           //prints: true\n    System.out.println(future.isCancelled());\n                                          //prints: false\n} catch (Exception ex){\n    ex.printStackTrace();\n} finally {\n    shutdownAndTerminate(pool);\n}\n```", "```java\n    class Result {\n        private String name;\n        private double result;\n        public Result(String name, double result) {\n            this.name = name;\n            this.result = result;\n        }\n        @Override\n        public String toString() {\n            return \"Result{name=\" + name +\n                    \", result=\" + result + \"}\";\n        }\n    }\n    ```", "```java\nExecutorService pool = \n                Executors.newSingleThreadExecutor();\nFuture<Result> future = \n            pool.submit(new MyRunnable(\"Two\"), \n                            new Result(\"Two\", 42.));\nSystem.out.println(future.isDone());   \n                                     //prints: false\nSystem.out.println(future.isCancelled());     \n                                      //prints: false\ntry{\n    System.out.println(future.get());         \n                                       //prints: null\n    System.out.println(future.isDone());      \n                                       //prints: true\n    System.out.println(future.isCancelled());\n                                      //prints: false\n} catch (Exception ex){\n    ex.printStackTrace();\n} finally {\n    shutdownAndTerminate(pool);\n}\n```", "```java\n    class MyCallable implements Callable {\n       private String name;\n       public MyCallable(String name) {\n            this.name = name;\n       }\n       public Result call() {\n          try {\n             System.out.println(this.name + \n                                           \" is working...\");\n             TimeUnit.MILLISECONDS.sleep(100);\n             System.out.println(this.name + \" is done\");\n             return new Result(name, 42.42);\n          } catch (InterruptedException e) {\n             Thread.currentThread().interrupt();\n             System.out.println(this.name + \n                          \" was interrupted\\n\" + this.name + \n                \" Thread.currentThread().isInterrupted()=\" +\n                    Thread.currentThread().isInterrupted());\n          }\n          return null;\n       }\n    ```", "```java\ninterface Calculator {\n```", "```java\n    String getDescription();\n```", "```java\n    double calculate(int i);\n```", "```java\n}\n```", "```java\nclass CalculatorNoSync implements Calculator{\n```", "```java\n    private double prop;\n```", "```java\n    private String description = \"Without synchronization\";\n```", "```java\n    public String getDescription(){ return description; }\n```", "```java\n    public double calculate(int i){\n```", "```java\n        try {\n```", "```java\n            this.prop = 2.0 * i;\n```", "```java\n            TimeUnit.MILLISECONDS.sleep(i);\n```", "```java\n            return Math.sqrt(this.prop);\n```", "```java\n        } catch (InterruptedException e) {\n```", "```java\n            Thread.currentThread().interrupt();\n```", "```java\n            System.out.println(\"Calculator was interrupted\");\n```", "```java\n        }\n```", "```java\n        return 0.0;\n```", "```java\n    }\n```", "```java\n}\n```", "```java\nvoid invokeAllCallables(Calculator c){\n```", "```java\n    System.out.println(\"\\n\" + c.getDescription() + \":\");\n```", "```java\n    ExecutorService pool = Executors.newFixedThreadPool(2);\n```", "```java\n    List<Callable<Result>> tasks = \n```", "```java\n                              List.of(new MyCallable(\"One\", c), \n```", "```java\n                                     new MyCallable(\"Two\", c));\n```", "```java\n    try{\n```", "```java\n        List<Future<Result>> futures = pool.invokeAll(tasks);\n```", "```java\n        List<Result> results = new ArrayList<>();\n```", "```java\n        while (results.size() < futures.size()){\n```", "```java\n            TimeUnit.MILLISECONDS.sleep(5);\n```", "```java\n            for(Future future: futures){\n```", "```java\n                if(future.isDone()){\n```", "```java\n                    results.add((Result)future.get());\n```", "```java\n                }\n```", "```java\n            }\n```", "```java\n        }\n```", "```java\n        for(Result result: results){\n```", "```java\n            System.out.println(result);\n```", "```java\n        }\n```", "```java\n    } catch (Exception ex){\n```", "```java\n        ex.printStackTrace();\n```", "```java\n    } finally {\n```", "```java\n        shutdownAndTerminate(pool);\n```", "```java\n    }\n```", "```java\n}\n```", "```java\n    class MyCallable implements Callable<Result> {\n        private String name;\n        private Calculator calculator;\n        public MyCallable(String name, \n                          Calculator calculator) {\n            this.name = name;\n            this.calculator = calculator;\n        }\n        public Result call() {\n            double sum = 0.0;\n            for(int i = 1; i < 20; i++){\n                sum += calculator.calculate(i);\n            }\n            return new Result(name, sum);\n        }\n    }\n    ```", "```java\nclass CalculatorAtomicRef implements Calculator {\n```", "```java\n    private AtomicReference<Double> prop = \n```", "```java\n                              new AtomicReference<>(0.0);\n```", "```java\n    private String description = \"Using AtomicReference\";\n```", "```java\n    public String getDescription(){ return description; }\n```", "```java\n    public double calculate(int i){\n```", "```java\n       try {\n```", "```java\n          Double currentValue = prop.get();\n```", "```java\n          TimeUnit.MILLISECONDS.sleep(i);\n```", "```java\n          boolean b = \n```", "```java\n           this.prop.compareAndSet(currentValue, 2.0 * i);\n```", "```java\n          //System.out.println(b); \n```", "```java\n                            //prints: true for one thread \n```", "```java\n                            //and false for another thread\n```", "```java\n           return Math.sqrt(this.prop.get());\n```", "```java\n       } catch (InterruptedException e) {\n```", "```java\n         Thread.currentThread().interrupt();\n```", "```java\n         System.out.println(\"Calculator was interrupted\");\n```", "```java\n       }\n```", "```java\n       return 0.0;\n```", "```java\n    }\n```", "```java\n}\n```", "```java\nclass CalculatorSyncMethod implements Calculator {\n```", "```java\n    private double prop;\n```", "```java\n    private String description = \"Using synchronized method\";\n```", "```java\n    public String getDescription(){ return description; }\n```", "```java\n    synchronized public double calculate(int i){\n```", "```java\n       try {\n```", "```java\n           //there may be some other code here\n```", "```java\n           synchronized (this) {\n```", "```java\n              this.prop = 2.0 * i;\n```", "```java\n              TimeUnit.MILLISECONDS.sleep(i);\n```", "```java\n              return Math.sqrt(this.prop);\n```", "```java\n           }\n```", "```java\n       } catch (InterruptedException e) {\n```", "```java\n         Thread.currentThread().interrupt();\n```", "```java\n         System.out.println(\"Calculator was interrupted\");\n```", "```java\n       }\n```", "```java\n       return 0.0;\n```", "```java\n    }\n```", "```java\n}\n```", "```java\nclass CalculatorSyncBlock implements Calculator {\n```", "```java\n    private double prop;\n```", "```java\n    private String description = \"Using synchronized block\";\n```", "```java\n    public String getDescription(){\n```", "```java\n        return description;\n```", "```java\n    }\n```", "```java\n    public double calculate(int i){\n```", "```java\n        try {\n```", "```java\n            //there may be some other code here\n```", "```java\n            synchronized (this) {\n```", "```java\n                this.prop = 2.0 * i;\n```", "```java\n                TimeUnit.MILLISECONDS.sleep(i);\n```", "```java\n                return Math.sqrt(this.prop);\n```", "```java\n            }\n```", "```java\n        } catch (InterruptedException e) {\n```", "```java\n            Thread.currentThread().interrupt();\n```", "```java\n            System.out.println(\"Calculator was interrupted\");\n```", "```java\n        }\n```", "```java\n        return 0.0;\n```", "```java\n    }\n```", "```java\n}\n```", "```java\nList<String> list = Arrays.asList(\"One\", \"Two\");\n```", "```java\nSystem.out.println(list);\n```", "```java\ntry {\n```", "```java\n    for (String e : list) {\n```", "```java\n        System.out.println(e);  //prints: One\n```", "```java\n        list.add(\"Three\");      //UnsupportedOperationException\n```", "```java\n    }\n```", "```java\n} catch (Exception ex) {\n```", "```java\n    ex.printStackTrace();\n```", "```java\n}\n```", "```java\nSystem.out.println(list);       //prints: [One, Two]\n```", "```java\nList<String> list = \n```", "```java\n       new CopyOnWriteArrayList<>(Arrays.asList(\"One\", \"Two\"));\n```", "```java\nSystem.out.println(list);\n```", "```java\ntry {\n```", "```java\n    for (String e : list) {\n```", "```java\n        System.out.print(e + \" \"); //prints: One Two\n```", "```java\n        list.add(\"Three\");         //adds element Three\n```", "```java\n    }\n```", "```java\n} catch (Exception ex) {\n```", "```java\n    ex.printStackTrace();\n```", "```java\n}\n```", "```java\nSystem.out.println(\"\\n\" + list);\n```", "```java\n                             //prints: [One, Two, Three, Three]\n```"]