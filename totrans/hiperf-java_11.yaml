- en: '11'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hypertext Transfer Protocols
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Hypertext Transfer Protocol** (**HTTP**) is the foundational protocol used
    for information exchange on the web. It empowers communication between client
    computers and servers. HTTP’s applicability to Java is primarily due to Java web
    applications.'
  prefs: []
  type: TYPE_NORMAL
- en: This chapter starts with an introduction to HTTP within the context of Java.
    Once the fundamentals have been addressed, the chapter moves on to a practical
    approach to using built-in and third-party HTTP-related libraries. Using HTTP
    for API integrations is also covered. The chapter also looks at security concerns
    with using HTTP and touches on the use of HTTPS. The concluding section focuses
    on performance optimizations for our Java applications when employing HTTP. By
    the end of this chapter, you should have a firm understanding of how HTTP impacts
    performance in Java applications and be comfortable with your future HTTP implementations.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to HTTP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java web applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using HTTP in Java
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security considerations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance optimization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To follow the examples and instructions in this chapter, you will need to have
    the ability to load, edit, and run Java code. If you have not set up your development
    environment, refer to [*Chapter 1*](B21942_01.xhtml#_idTextAnchor014), *Peeking*
    *I**nside the Java Virtual* *Machine (JVM)*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The finished code for this chapter can be found here: [https://github.com/PacktPublishing/High-Performance-with-Java/tree/main/Chapter11](https://github.com/PacktPublishing/High-Performance-with-Java/tree/main/Chapter11).'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to HTTP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HTTP was released around 1990, so you are likely familiar with at least the
    basic concept of enabling client and server communication. The World Wide Web
    was built on HTTP, and HTTP is still the foundation for the web today.. Understanding
    this protocol is important if you plan to build a web application, especially
    in Java. We will explore HTTP in the context of Java in this section.
  prefs: []
  type: TYPE_NORMAL
- en: HTTP core components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: HTTP is a stateless protocol that uses a communication model called **request-response**.
    Each request-response exchange is independent of all others, making this a very
    simple protocol. Today’s web services rely heavily on HTTP.
  prefs: []
  type: TYPE_NORMAL
- en: Stateless protocol
  prefs: []
  type: TYPE_NORMAL
- en: A stateless protocol is one where the receiver does not need to retain or track
    information about the information being sent. No session information is saved.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are four basic components of HTTP:'
  prefs: []
  type: TYPE_NORMAL
- en: First is the **request and response pair**. This pair represents the core of
    all web communication. A client sends a request for information, such as loading
    a web page, and the server sends back either a response with the requested information
    or another action result such as an error.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both the requests and responses contain **headers** that provide metadata. This
    HTTP component includes information such as the type of content being sent, what
    was requested, authentication details, and other information.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A third HTTP component is **status codes**. When servers respond to a client’s
    request, they provide a status code to characterize the outcome of the request.
    These codes are categorized by a numbered series as indicated in the table that
    follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| **Category** | **Type** **of response** | **Example** |'
  prefs: []
  type: TYPE_TB
- en: '| 100 series | Informational responses | 100 Continue |'
  prefs: []
  type: TYPE_TB
- en: '| 200 series | Successful responses | 200 OK |'
  prefs: []
  type: TYPE_TB
- en: '| 300 series | Redirection messages | 301 Moved permanently |'
  prefs: []
  type: TYPE_TB
- en: '| 400 series | Client errors | 404 Not found |'
  prefs: []
  type: TYPE_TB
- en: '| 500 series | Server errors | 500 Internal server error |'
  prefs: []
  type: TYPE_TB
- en: Table 11.1 – HTTP status codes and examples
  prefs: []
  type: TYPE_NORMAL
- en: 'The fourth HTTP component is **methods**. There are several request methods
    that HTTP uses to perform required actions. Here is a list of the most common
    HTTP methods:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| **Method** | **Functionality** |'
  prefs: []
  type: TYPE_TB
- en: '| `DELETE` | Deletes a resource |'
  prefs: []
  type: TYPE_TB
- en: '| `GET` | Retrieves a resource |'
  prefs: []
  type: TYPE_TB
- en: '| `HEAD` | Retrieves a resource’s header |'
  prefs: []
  type: TYPE_TB
- en: '| `POST` | Submits data to a resource |'
  prefs: []
  type: TYPE_TB
- en: '| `PUT` | Updates a resource |'
  prefs: []
  type: TYPE_TB
- en: Table 11.2 – HTTP methods
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a fundamental understanding of HTTP, let’s examine the significance
    of this protocol to Java developers.
  prefs: []
  type: TYPE_NORMAL
- en: Java and HTTP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a plethora of libraries and `HttpClient`, for example, helps simplify
    our use of HTTP operations. Learning how to use available APIs and libraries is
    important, especially when we are concerned with how our Java applications perform.
  prefs: []
  type: TYPE_NORMAL
- en: One of the reasons HTTP knowledge is so important is that most API integrations
    involve HTTP communications. This requires us to understand how to formulate an
    HTTP request, how to handle response status codes, and how to parse the responses.
  prefs: []
  type: TYPE_NORMAL
- en: Java developers should also master HTTP when developing web applications. HTTP
    is the underlying protocol used for client-server communications. This underscores
    the importance of HTTP knowledge for Java developers.
  prefs: []
  type: TYPE_NORMAL
- en: Another reason why Java developers should seek to fully understand HTTP is that
    it plays a significant role in overall program performance. HTTP lacks complexity
    but is nevertheless a critical protocol for developing web apps, microservices,
    applets, and other application types.
  prefs: []
  type: TYPE_NORMAL
- en: Java web applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A Java web application is a server-side application used to create dynamic
    websites. We create websites that interact with Java web applications to dynamically
    generate content based on user input. Common examples include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: E-commerce platforms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enterprise applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Online banking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Information management systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Social media platforms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud-based applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Educational platforms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Healthcare applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gaming servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Internet of Things** (**IoT**) applications'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These examples demonstrate the versatility of using Java to develop and deploy
    high-performance web applications. As you might expect, HTTP is a foundational
    component of these Java web applications.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s next review the basic architecture for Java web applications, so we can
    understand HTTP’s role.
  prefs: []
  type: TYPE_NORMAL
- en: Java web application architecture
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Most Java web applications are comprised of four tiers, making it a multi-tier
    architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Client tier**: The client tier is what the user sees, normally via a web
    browser. These web pages usually consist of **Hypertext Markup Language** (**HTML**),
    **Cascading Style Sheets** (**CSS**), and **JavaScript** (**JS**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Web tier (or server tier)**: This tier receives and processes the HTTP requests.
    We can use several technologies such as **JavaServer Pages** (**JSP**) to accomplish
    this.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Business tier**: The business tier is where our application logic resides.
    This is where data is processed, computations are performed, and logic-based decisions
    are made. The link between this tier and the web tier is extensive.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data tier**: The data tier is a critical part of the backend system. This
    tier is responsible for managing databases and ensuring data security and persistence.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Key technologies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Key technologies worth mentioning are serverlets, JSPs, Spring Framework, and
    Jarkata EE:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Serverlets**: Java programs that run on web servers are referred to as serverlets.
    This specialty software sits between the client’s HTTP requests and the applications
    and/or databases on the web servers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JSP**: JSPs are text documents used to execute on the server and generate
    content for dynamic web pages. JSPs are typically used in conjunction with serverlets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Spring Framework**: Spring is a Java application framework that is commonly
    used for developing Java web applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Jakarta EE**: **Jakarta Enterprise Edition** (**Jakarta EE**) is a set of
    application specifications that extend the Java **Standard Edition** (**SE**).
    It includes specifications for web services and distributed computing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Steps for creating a simple Java web application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are six basic steps to creating Java web applications. Please note that
    this is an abbreviated approach and will vary based on your application needs,
    such as the need for databases, APIs, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: The first step is to establish your development environment. This will consist
    of an **Integrated Development Environment** (**IDE**) such as Visual Studio Code,
    the most recent **Java Software Development Kit** (**JDK**), and a web server
    such as Apache Tomcat.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next step is to create a new web application project in your IDE. This step
    includes creating the project’s file directory structure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we will write the code for our Java serverlet to handle HTTP requests.
    During this step, we will also define the routes that our serverlets will respond
    to. This is often defined using URLs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we will be creating the JSP pages or templates we plan to use to generate
    HTML content. This is the content we will send back to the client.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we will create the business logic to implement at the core of our application.
    We can accomplish this through a series of Java classes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Lastly, we package our application into a **Web Application Archive** (**WAR**),
    which is like a **Java Application Archive** (**JAR**) but for web applications,
    and deploy it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When developing Java web applications, we should create them with distinct boundaries
    between the presentation, business, and data access layers. This approach will
    help with modularity, scalability, and maintainability. It is also advisable to
    use frameworks such as Spring and Jakarta EE. Doing so can simplify our development
    efforts and provide inherent support for web application development.
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic web pages are the norm and expected by users, so embracing Java web
    application technologies is important for all Java developers.
  prefs: []
  type: TYPE_NORMAL
- en: Using HTTP in Java
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As Java developers, we can use HTTP to create dynamic web applications. These
    will use HTTP to communicate between the browser and server. Java includes `HttpClient`,
    a Java library that makes working with HTTP requests and processing responses
    efficient. Let’s look at an example.
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding code employs the `HttpClient` library to create a `GET` request,
    which retrieves data from a specific resource (simulated in our example):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The preceding example sends a `GET` request to a simulated URL and prints both
    the status code and the body of the response.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let’s look at a method for making a `POST` request. This type of request
    can be used to submit data to a specific resource using JSON. In our example,
    this will be a simulated resource:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This example simply sends a `POST` request to a simulated URL with a JSON package
    that contains user information.
  prefs: []
  type: TYPE_NORMAL
- en: Making use of the `HttpClient` library can simplify the process of developing
    code that interacts with web services.
  prefs: []
  type: TYPE_NORMAL
- en: API integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we build Java web applications, we can integrate with external APIs to
    extend the functionality of our applications. An example would be a weather service
    API that can be used to display the local temperature on a site. For this section,
    we will focus on the **Representational State Transfer** (**RESTful**) services
    because those are the most common type of web API.
  prefs: []
  type: TYPE_NORMAL
- en: The RESTful APIs use standard HTTP methods, such as the `GET` and `POST` examples
    from the previous section. As you would expect, RESTful APIs communicate primarily
    through HTTP data exchanges using JSON and XML formats.
  prefs: []
  type: TYPE_NORMAL
- en: When we implement an API, we first learn what its required request methods are,
    as well as the prescribed format for requests and responses. It is increasingly
    common for APIs to require authentication, so that might be something you will
    need to contend with using API keys or other authorization techniques.
  prefs: []
  type: TYPE_NORMAL
- en: 'The example that follows demonstrates a simple application that implements
    a weather API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Our example sends a `GET` request to an API, passing the city as a query parameter.
    The JSON response would contain the applicable weather data, which is printed
    on the system’s display.
  prefs: []
  type: TYPE_NORMAL
- en: API integration can be considered a core component of many Java web applications
    based on its wide applicability.
  prefs: []
  type: TYPE_NORMAL
- en: Security considerations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Whenever we add functionality to our Java applications that sends information
    external to our application or receives information from external sources, security
    becomes a paramount concern. This is especially true when we integrate APIs and
    HTTP into our Java applications. Let’s look at nine best practices that we can
    use to help ensure our HTTP communications are secure as well as when working
    with APIs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Use HTTPS instead of HTTP**: If your Java web application handles sensitive,
    protected, or private information, you should use **HTTP Secure** (**HTTPS**)
    instead of HTTP when transmitting requests and responses. This will help prevent
    tampering and data interception. This will require you to obtain **Secure Sockets
    Layer** (**SSL**) certificates for your servers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Do not trust input**: We should always validate input to our systems to include
    user input and data passed to our applications programmatically. We should not
    assume that this data is in the right format. After we validate the data, we may
    have to clean it so it can be used in our application. This approach can help
    mitigate nefarious operations such as **SQL injections**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authenticate**: Whenever possible, identify the users and systems that your
    application interacts with. The previously mentioned API keys come into play here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authorize**: Once a user or system has been authenticated, we should ensure
    that they have permission to perform specific operations in your application.
    Not every user will have the same level of authority.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Protect API keys**: We have already mentioned the importance of API keys
    and their applicability to addressing security concerns. API keys are like passwords;
    we must protect them from exploitation. We do not want to hardcode these keys
    in our applications; instead, we should store them in encrypted configuration
    files, so they are protected from unauthorized eyes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use security headers**: We have the option of using **HTTP security headers**.
    Here are some details:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Content Security Policy** (**CSP**): This helps prevent XSS attacks by explicitly
    identifying resources that are permitted to be loaded'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HTTP Strict Transport Security** (**HSTS**): This can be used to enforce
    secure server connections'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Treat sensitive data carefully**: This should go without saying, but sensitive
    data deserves special attention. For example, never transmit sensitive data in
    URLs, because they can be logged and then leaked. Also, ensure that sensitive
    data (such as passwords) is encrypted or hashed when you store it. Additionally,
    use a technique such as **tokenization** to securely handle payment information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Update dependencies**: We should periodically check that our dependencies
    and Java libraries are up to date. We do not want to use older versions of components
    that might have known vulnerabilities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Log and monitor**: As with all of our software, we want to ensure we implement
    proper logging and then monitor operations to ensure the logs do not contain sensitive
    information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security should always be at the forefront of developers’ minds. It is especially
    important when working with HTTP and external APIs. Adhering to the nine best
    practices discussed in this section is a good start to developing a security strategy
    for your Java web applications.
  prefs: []
  type: TYPE_NORMAL
- en: Performance optimization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have sufficiently covered what HTTP is, its applicability to Java,
    and some techniques and best practices, let’s consider performance-related issues
    specific to using HTTP with Java. Our goals for looking at performance issues
    are to enhance the user experience and improve our application’s scalability,
    resilience, and maintainability.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at seven specific areas regarding performance optimization when
    using HTTP in our Java applications:'
  prefs: []
  type: TYPE_NORMAL
- en: The first area focuses on the `HttpClient` library includes support for connection
    pooling.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can use `HTTP Keep-Alive` to keep connections open for multiple requests
    to a common host. This will reduce the number of communication handshakes and
    improve latency.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can often leverage asynchronous requests (that is, API calls) to improve
    application flow.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Caching** is another area to look at to help optimize performance. There
    are a few caching strategies that can be used to improve performance:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cache at the application level for frequently accessed data. The specifics depend
    on your application and what data it uses. There are even caching frameworks such
    as Caffeine that can be used.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Using HTTP caching headers (that is, Cache-Control) can help you control response
    caching.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If your Java web application deals with static content (that is, images), you
    can consider using **Content Delivery Networks** (**CDNs**) to cache your content
    closer to your users (i.e., storing data on servers in specific geographic areas).
    This approach can significantly shorten load times for users.*   A third area
    to consider is **optimizing data transfers**. There are two specific approaches
    to improving data transfers that are worth considering:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: To the fullest possible extent, we should minimize data requests. Obviously,
    the fewer data requests there are, the better our applications will perform. Achieving
    this takes a purposeful approach to API integration design. We can use specific
    API endpoints to only obtain data necessary for the task instead of a bloated
    package.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are data compression tools we can use to decrease the size of the HTTP
    responses. This approach has become commonplace, so your web server is apt to
    support this type of compression.*   **API performance** is a fourth area of concern.
    Here are two techniques for optimizing API performance:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: When possible and applicable, implement rate limitations on your APIs. This
    can help prevent abuse and denial of service attacks. It can also help maintain
    service quality.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If your application and APIs support batch requests, it is worth implementing.
    This can have a profound impact on system performance.*   **Code optimization**
    is a fifth area of concern. Profiling tools such as VisualVM and JProfiler can
    be employed to help identify performance bottlenecks. The tools can be used to
    target memory and CPU operations. See [*Chapter 14*](B21942_14.xhtml#_idTextAnchor250),
    *Profiling Tools*, for more information.*   **SQL optimization** is another area
    of concern. SQL queries can be optimized to reduce database load and execution
    time. A thorough review of database schemas can help identify additional opportunities
    for optimization. See [*Chapter 15*](B21942_15.xhtml#_idTextAnchor288), *Optimizing
    Databases and SQL Queries*, for additional information.*   Our last area of performance
    concern when dealing with HTTP in Java is **scalability**. The two major techniques
    in this area are load balancing to help improve application availability and microservices
    architecture for better performance.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimizing every aspect of our Java applications is important if we are to achieve
    our goal of developing high-performance applications. Working with HTTP in Java
    represents a unique set of challenges and opportunities for optimization.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter highlighted the role that HTTP plays in Java web application development.
    The purpose of HTTP was stated as being to facilitate dynamic web applications.
    Our coverage of this topic showed that HTTP can be used efficiently and securely.
    We also looked at Java web applications, API integrations, security, and performance
    optimization strategies. Since the fields of HTTP and Java web application development
    are so vibrant, it is important to be aware of changes and updates as they become
    available.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter, [*Chapter 12*](B21942_12.xhtml#_idTextAnchor205), *Frameworks
    for Optimization*, introduces strategies for using asynchronous input/output,
    buffered input/output, and batch operations to create high-performance Java applications.
    The chapter also covers frameworks for microservices and cloud-native applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 4: Frameworks, Libraries, and Profiling'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Leveraging the right frameworks and libraries can greatly enhance application
    performance. This part examines various frameworks designed for optimization and
    introduces performance-focused libraries that can be integrated into Java projects.
    Additionally, it provides a guide to using profiling tools for the identification
    and resolution of performance bottlenecks. The chapters in this section are designed
    to equip you with the tools and knowledge needed to fine-tune your applications
    for maximum efficiency.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part has the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B21942_12.xhtml#_idTextAnchor205), *Frameworks for Optimization*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 13*](B21942_13.xhtml#_idTextAnchor227), *Performance-Focused Libraries*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 14*](B21942_14.xhtml#_idTextAnchor250), *Profiling Tools*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
