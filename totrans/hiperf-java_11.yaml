- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Hypertext Transfer Protocols
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 超文本传输协议
- en: '**Hypertext Transfer Protocol** (**HTTP**) is the foundational protocol used
    for information exchange on the web. It empowers communication between client
    computers and servers. HTTP’s applicability to Java is primarily due to Java web
    applications.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**超文本传输协议**（**HTTP**）是用于网络信息交换的基础协议。它使客户端计算机和服务器之间的通信成为可能。HTTP 对 Java 的适用性主要归因于
    Java 网络应用程序。'
- en: This chapter starts with an introduction to HTTP within the context of Java.
    Once the fundamentals have been addressed, the chapter moves on to a practical
    approach to using built-in and third-party HTTP-related libraries. Using HTTP
    for API integrations is also covered. The chapter also looks at security concerns
    with using HTTP and touches on the use of HTTPS. The concluding section focuses
    on performance optimizations for our Java applications when employing HTTP. By
    the end of this chapter, you should have a firm understanding of how HTTP impacts
    performance in Java applications and be comfortable with your future HTTP implementations.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章从 Java 上下文中的 HTTP 介绍开始。一旦解决了基础知识，章节将转向使用内置和第三方 HTTP 相关库的实用方法。本章还涵盖了使用 HTTP
    进行 API 集成，并探讨了使用 HTTP 的安全顾虑，以及 HTTPS 的使用。最后一节专注于在采用 HTTP 时对 Java 应用程序进行性能优化。到本章结束时，你应该对
    HTTP 如何影响 Java 应用程序的性能有一个牢固的理解，并且对未来的 HTTP 实现感到舒适。
- en: 'This chapter covers the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了以下主要主题：
- en: Introduction to HTTP
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP 简介
- en: Java web applications
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 网络应用程序
- en: Using HTTP in Java
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Java 中使用 HTTP
- en: API integration
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API 集成
- en: Security considerations
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全考虑
- en: Performance optimization
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能优化
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To follow the examples and instructions in this chapter, you will need to have
    the ability to load, edit, and run Java code. If you have not set up your development
    environment, refer to [*Chapter 1*](B21942_01.xhtml#_idTextAnchor014), *Peeking*
    *I**nside the Java Virtual* *Machine (JVM)*.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要遵循本章中的示例和说明，你需要具备加载、编辑和运行 Java 代码的能力。如果你还没有设置你的开发环境，请参阅[*第 1 章*](B21942_01.xhtml#_idTextAnchor014)，*窥探
    Java 虚拟机 (JVM)*。
- en: 'The finished code for this chapter can be found here: [https://github.com/PacktPublishing/High-Performance-with-Java/tree/main/Chapter11](https://github.com/PacktPublishing/High-Performance-with-Java/tree/main/Chapter11).'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的完整代码可以在以下链接找到：[https://github.com/PacktPublishing/High-Performance-with-Java/tree/main/Chapter11](https://github.com/PacktPublishing/High-Performance-with-Java/tree/main/Chapter11).
- en: Introduction to HTTP
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP 简介
- en: HTTP was released around 1990, so you are likely familiar with at least the
    basic concept of enabling client and server communication. The World Wide Web
    was built on HTTP, and HTTP is still the foundation for the web today.. Understanding
    this protocol is important if you plan to build a web application, especially
    in Java. We will explore HTTP in the context of Java in this section.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP 大约在 1990 年发布，因此你很可能至少熟悉了客户端和服务器通信的基本概念。万维网建立在 HTTP 之上，HTTP 仍然是今天网络的基础。如果你计划构建一个网络应用程序，特别是使用
    Java，理解这个协议是很重要的。在本节中，我们将探讨 Java 中的 HTTP。
- en: HTTP core components
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTTP 核心组件
- en: HTTP is a stateless protocol that uses a communication model called **request-response**.
    Each request-response exchange is independent of all others, making this a very
    simple protocol. Today’s web services rely heavily on HTTP.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP 是一种无状态协议，使用称为**请求-响应**的通信模型。每个请求-响应交换都是独立的，这使得它成为一个非常简单的协议。今天的网络服务在很大程度上依赖于
    HTTP。
- en: Stateless protocol
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 无状态协议
- en: A stateless protocol is one where the receiver does not need to retain or track
    information about the information being sent. No session information is saved.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 无状态协议是指接收者不需要保留或跟踪发送的信息。没有保存会话信息。
- en: 'There are four basic components of HTTP:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP 有四个基本组成部分：
- en: First is the **request and response pair**. This pair represents the core of
    all web communication. A client sends a request for information, such as loading
    a web page, and the server sends back either a response with the requested information
    or another action result such as an error.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先是**请求和响应对**。这对表示了所有网络通信的核心。客户端发送一个请求以获取信息，例如加载网页，服务器则发送回包含所需信息的响应或另一个操作结果，如错误。
- en: Both the requests and responses contain **headers** that provide metadata. This
    HTTP component includes information such as the type of content being sent, what
    was requested, authentication details, and other information.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求和响应都包含提供元数据的**头部**。这个HTTP组件包括发送内容类型、请求内容、认证细节和其他信息。
- en: 'A third HTTP component is **status codes**. When servers respond to a client’s
    request, they provide a status code to characterize the outcome of the request.
    These codes are categorized by a numbered series as indicated in the table that
    follows:'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个HTTP组件是**状态码**。当服务器响应客户端的请求时，它们会提供一个状态码来描述请求的结果。这些代码按照下表所示按编号系列分类：
- en: '| **Category** | **Type** **of response** | **Example** |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| **类别** | **响应类型** | **示例** |'
- en: '| 100 series | Informational responses | 100 Continue |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| 100系列 | 信息性响应 | 100 Continue |'
- en: '| 200 series | Successful responses | 200 OK |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| 200系列 | 成功响应 | 200 OK |'
- en: '| 300 series | Redirection messages | 301 Moved permanently |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 300系列 | 重定向消息 | 301 永久移动 |'
- en: '| 400 series | Client errors | 404 Not found |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 400系列 | 客户端错误 | 404 未找到 |'
- en: '| 500 series | Server errors | 500 Internal server error |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 500系列 | 服务器错误 | 500 内部服务器错误 |'
- en: Table 11.1 – HTTP status codes and examples
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 表11.1 – HTTP状态码及示例
- en: 'The fourth HTTP component is **methods**. There are several request methods
    that HTTP uses to perform required actions. Here is a list of the most common
    HTTP methods:'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第四个HTTP组件是**方法**。HTTP使用几种请求方法来执行所需操作。以下是常见HTTP方法的列表：
- en: '| **Method** | **Functionality** |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| **方法** | **功能** |'
- en: '| `DELETE` | Deletes a resource |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `DELETE` | 删除资源 |'
- en: '| `GET` | Retrieves a resource |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `GET` | 获取资源 |'
- en: '| `HEAD` | Retrieves a resource’s header |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `HEAD` | 获取资源的头部 |'
- en: '| `POST` | Submits data to a resource |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `POST` | 向资源提交数据 |'
- en: '| `PUT` | Updates a resource |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `PUT` | 更新资源 |'
- en: Table 11.2 – HTTP methods
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 表11.2 – HTTP方法
- en: Now that we have a fundamental understanding of HTTP, let’s examine the significance
    of this protocol to Java developers.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对HTTP有了基本了解，让我们来探讨这个协议对Java开发者的意义。
- en: Java and HTTP
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java和HTTP
- en: There are a plethora of libraries and `HttpClient`, for example, helps simplify
    our use of HTTP operations. Learning how to use available APIs and libraries is
    important, especially when we are concerned with how our Java applications perform.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多库和例如`HttpClient`这样的库可以帮助简化我们对HTTP操作的使用。学习如何使用可用的API和库非常重要，尤其是在我们关注Java应用程序性能时。
- en: One of the reasons HTTP knowledge is so important is that most API integrations
    involve HTTP communications. This requires us to understand how to formulate an
    HTTP request, how to handle response status codes, and how to parse the responses.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP知识之所以如此重要，其中一个原因是大多数API集成都涉及HTTP通信。这要求我们了解如何构建HTTP请求，如何处理响应状态码，以及如何解析响应。
- en: Java developers should also master HTTP when developing web applications. HTTP
    is the underlying protocol used for client-server communications. This underscores
    the importance of HTTP knowledge for Java developers.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Java开发者开发Web应用程序时也应该精通HTTP。HTTP是客户端-服务器通信的基础协议。这强调了HTTP知识对Java开发者的重要性。
- en: Another reason why Java developers should seek to fully understand HTTP is that
    it plays a significant role in overall program performance. HTTP lacks complexity
    but is nevertheless a critical protocol for developing web apps, microservices,
    applets, and other application types.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Java开发者应该全面理解HTTP的另一个原因是它在整体程序性能中起着重要作用。HTTP缺乏复杂性，但仍然是开发Web应用、微服务、小程序和其他应用程序类型的关键协议。
- en: Java web applications
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java Web应用程序
- en: 'A Java web application is a server-side application used to create dynamic
    websites. We create websites that interact with Java web applications to dynamically
    generate content based on user input. Common examples include the following:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Java Web应用程序是一种服务器端应用程序，用于创建动态网站。我们创建与Java Web应用程序交互的网站，根据用户输入动态生成内容。常见示例包括以下内容：
- en: E-commerce platforms
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子商务平台
- en: Enterprise applications
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 企业应用程序
- en: Online banking
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在线银行
- en: Information management systems
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信息管理系统
- en: Social media platforms
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 社交媒体平台
- en: Cloud-based applications
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于云的应用程序
- en: Educational platforms
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 教育平台
- en: Healthcare applications
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 医疗保健应用程序
- en: Gaming servers
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏服务器
- en: '**Internet of Things** (**IoT**) applications'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**物联网**（**IoT**）应用程序'
- en: These examples demonstrate the versatility of using Java to develop and deploy
    high-performance web applications. As you might expect, HTTP is a foundational
    component of these Java web applications.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这些示例展示了使用Java开发和部署高性能Web应用的灵活性。正如你所预期的那样，HTTP是这些Java Web应用的基础组件。
- en: Let’s next review the basic architecture for Java web applications, so we can
    understand HTTP’s role.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们接下来回顾Java Web应用程序的基本架构，以便我们理解HTTP的作用。
- en: Java web application architecture
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java Web应用程序架构
- en: 'Most Java web applications are comprised of four tiers, making it a multi-tier
    architecture:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数Java Web应用程序由四个层次组成，使其成为一个多层级架构：
- en: '**Client tier**: The client tier is what the user sees, normally via a web
    browser. These web pages usually consist of **Hypertext Markup Language** (**HTML**),
    **Cascading Style Sheets** (**CSS**), and **JavaScript** (**JS**).'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户端层**：客户端层是用户所见到的部分，通常通过Web浏览器。这些网页通常由**超文本标记语言**（**HTML**）、**层叠样式表**（**CSS**）和**JavaScript**（**JS**）组成。'
- en: '**Web tier (or server tier)**: This tier receives and processes the HTTP requests.
    We can use several technologies such as **JavaServer Pages** (**JSP**) to accomplish
    this.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Web层（或服务器层）**：这一层接收并处理HTTP请求。我们可以使用多种技术，如**Java服务器页面**（**JSP**）来完成这项任务。'
- en: '**Business tier**: The business tier is where our application logic resides.
    This is where data is processed, computations are performed, and logic-based decisions
    are made. The link between this tier and the web tier is extensive.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**业务层**：业务层是我们应用程序逻辑所在的地方。在这里，数据处理、计算执行和基于逻辑的决策被做出。这一层与Web层之间的联系非常广泛。'
- en: '**Data tier**: The data tier is a critical part of the backend system. This
    tier is responsible for managing databases and ensuring data security and persistence.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据层**：数据层是后端系统的关键部分。这一层负责管理数据库，确保数据安全和持久性。'
- en: Key technologies
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关键技术
- en: 'Key technologies worth mentioning are serverlets, JSPs, Spring Framework, and
    Jarkata EE:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的关键技术包括Servlets、JSPs、Spring框架和Jakarta EE：
- en: '**Serverlets**: Java programs that run on web servers are referred to as serverlets.
    This specialty software sits between the client’s HTTP requests and the applications
    and/or databases on the web servers.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Servlets**：运行在Web服务器上的Java程序被称为Servlet。这种特殊软件位于客户端的HTTP请求和Web服务器上的应用程序和/或数据库之间。'
- en: '**JSP**: JSPs are text documents used to execute on the server and generate
    content for dynamic web pages. JSPs are typically used in conjunction with serverlets.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JSP**：JSP是用于在服务器上执行并生成动态网页内容的文本文档。JSP通常与Servlets一起使用。'
- en: '**Spring Framework**: Spring is a Java application framework that is commonly
    used for developing Java web applications.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Spring框架**：Spring是一个常用的Java应用程序框架，用于开发Java Web应用程序。'
- en: '**Jakarta EE**: **Jakarta Enterprise Edition** (**Jakarta EE**) is a set of
    application specifications that extend the Java **Standard Edition** (**SE**).
    It includes specifications for web services and distributed computing.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Jakarta EE**：**Jakarta企业版**（**Jakarta EE**）是一组应用程序规范，它扩展了Java **标准版**（**SE**）。它包括关于Web服务和分布式计算的规范。'
- en: Steps for creating a simple Java web application
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建简单Java Web应用程序的步骤
- en: 'There are six basic steps to creating Java web applications. Please note that
    this is an abbreviated approach and will vary based on your application needs,
    such as the need for databases, APIs, and so on:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 创建Java Web应用程序有六个基本步骤。请注意，这是一个简化的方法，并且将根据你的应用程序需求而变化，例如对数据库、API等的需要：
- en: The first step is to establish your development environment. This will consist
    of an **Integrated Development Environment** (**IDE**) such as Visual Studio Code,
    the most recent **Java Software Development Kit** (**JDK**), and a web server
    such as Apache Tomcat.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是建立你的开发环境。这包括一个**集成开发环境**（**IDE**），如Visual Studio Code，最新的**Java软件开发工具包**（**JDK**），以及一个Web服务器，如Apache
    Tomcat。
- en: The next step is to create a new web application project in your IDE. This step
    includes creating the project’s file directory structure.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是在你的IDE中创建一个新的Web应用程序项目。这一步包括创建项目的文件目录结构。
- en: Next, we will write the code for our Java serverlet to handle HTTP requests.
    During this step, we will also define the routes that our serverlets will respond
    to. This is often defined using URLs.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将编写Java Servlet的代码来处理HTTP请求。在这一步中，我们还将定义Servlet将响应的路线。这通常使用URL定义。
- en: Next, we will be creating the JSP pages or templates we plan to use to generate
    HTML content. This is the content we will send back to the client.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将创建我们计划用于生成HTML内容的JSP页面或模板。这是我们发送回客户端的内容。
- en: Next, we will create the business logic to implement at the core of our application.
    We can accomplish this through a series of Java classes.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将创建业务逻辑，这是我们应用程序的核心。我们可以通过一系列Java类来实现这一点。
- en: Lastly, we package our application into a **Web Application Archive** (**WAR**),
    which is like a **Java Application Archive** (**JAR**) but for web applications,
    and deploy it.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将我们的应用程序打包成一个**Web应用程序存档**（**WAR**），它类似于**Java应用程序存档**（**JAR**），但用于Web应用程序，并将其部署。
- en: When developing Java web applications, we should create them with distinct boundaries
    between the presentation, business, and data access layers. This approach will
    help with modularity, scalability, and maintainability. It is also advisable to
    use frameworks such as Spring and Jakarta EE. Doing so can simplify our development
    efforts and provide inherent support for web application development.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发Java Web应用程序时，我们应该创建具有明确边界的应用程序，这些边界分别位于表示层、业务层和数据访问层之间。这种方法有助于模块化、可扩展性和可维护性。还建议使用Spring和Jakarta
    EE等框架。这样做可以简化我们的开发工作，并为Web应用程序开发提供内在支持。
- en: Dynamic web pages are the norm and expected by users, so embracing Java web
    application technologies is important for all Java developers.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 动态网页是标准，并且用户期望如此，因此拥抱Java Web应用程序技术对所有Java开发者来说都很重要。
- en: Using HTTP in Java
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Java中使用HTTP
- en: As Java developers, we can use HTTP to create dynamic web applications. These
    will use HTTP to communicate between the browser and server. Java includes `HttpClient`,
    a Java library that makes working with HTTP requests and processing responses
    efficient. Let’s look at an example.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 作为Java开发者，我们可以使用HTTP来创建动态Web应用程序。这些应用程序将使用HTTP在浏览器和服务器之间进行通信。Java包括`HttpClient`库，这是一个Java库，它使得处理HTTP请求和响应变得高效。让我们来看一个例子。
- en: 'The preceding code employs the `HttpClient` library to create a `GET` request,
    which retrieves data from a specific resource (simulated in our example):'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 上一段代码使用了`HttpClient`库来创建一个`GET`请求，该请求从特定的资源（在我们的例子中是模拟的）检索数据：
- en: '[PRE0]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding example sends a `GET` request to a simulated URL and prints both
    the status code and the body of the response.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 上一段示例向一个模拟的URL发送一个`GET`请求，并打印出响应的状态码和正文。
- en: 'Next, let’s look at a method for making a `POST` request. This type of request
    can be used to submit data to a specific resource using JSON. In our example,
    this will be a simulated resource:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看制作`POST`请求的方法。这种请求类型可以用来使用JSON向特定资源提交数据。在我们的例子中，这将是一个模拟的资源：
- en: '[PRE1]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This example simply sends a `POST` request to a simulated URL with a JSON package
    that contains user information.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子简单地向一个模拟的URL发送一个`POST`请求，其中包含一个包含用户信息的JSON包。
- en: Making use of the `HttpClient` library can simplify the process of developing
    code that interacts with web services.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 利用`HttpClient`库可以简化与Web服务交互的代码开发过程。
- en: API integration
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API集成
- en: When we build Java web applications, we can integrate with external APIs to
    extend the functionality of our applications. An example would be a weather service
    API that can be used to display the local temperature on a site. For this section,
    we will focus on the **Representational State Transfer** (**RESTful**) services
    because those are the most common type of web API.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们构建Java Web应用程序时，我们可以集成外部API来扩展我们应用程序的功能。一个例子是天气服务API，可以用来在网站上显示当地温度。对于本节，我们将重点关注**表示状态转换**（**RESTful**）服务，因为这些是最常见的Web
    API类型。
- en: The RESTful APIs use standard HTTP methods, such as the `GET` and `POST` examples
    from the previous section. As you would expect, RESTful APIs communicate primarily
    through HTTP data exchanges using JSON and XML formats.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: RESTful API使用标准的HTTP方法，例如上一节中的`GET`和`POST`示例。正如你所期望的，RESTful API主要通过HTTP数据交换使用JSON和XML格式进行通信。
- en: When we implement an API, we first learn what its required request methods are,
    as well as the prescribed format for requests and responses. It is increasingly
    common for APIs to require authentication, so that might be something you will
    need to contend with using API keys or other authorization techniques.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们实现一个API时，我们首先了解其所需请求方法，以及请求和响应的指定格式。API需要认证的情况越来越普遍，因此你可能需要使用API密钥或其他授权技术来应对这一点。
- en: 'The example that follows demonstrates a simple application that implements
    a weather API:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例演示了一个实现天气API的简单应用程序：
- en: '[PRE2]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Our example sends a `GET` request to an API, passing the city as a query parameter.
    The JSON response would contain the applicable weather data, which is printed
    on the system’s display.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的示例向API发送一个`GET`请求，将城市作为查询参数传递。JSON响应将包含适用的天气数据，这些数据将打印在系统的显示上。
- en: API integration can be considered a core component of many Java web applications
    based on its wide applicability.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: API集成可以被认为是许多基于Java的Web应用程序的核心组件，因为它的适用性非常广泛。
- en: Security considerations
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全考虑
- en: 'Whenever we add functionality to our Java applications that sends information
    external to our application or receives information from external sources, security
    becomes a paramount concern. This is especially true when we integrate APIs and
    HTTP into our Java applications. Let’s look at nine best practices that we can
    use to help ensure our HTTP communications are secure as well as when working
    with APIs:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们向我们的Java应用程序添加发送信息到应用程序外部或从外部源接收信息的函数时，安全性就成为一个至关重要的关注点。这在我们将API和HTTP集成到Java应用程序中时尤其如此。让我们看看我们可以使用的九个最佳实践，以确保我们的HTTP通信既安全，又在与API一起工作时安全：
- en: '**Use HTTPS instead of HTTP**: If your Java web application handles sensitive,
    protected, or private information, you should use **HTTP Secure** (**HTTPS**)
    instead of HTTP when transmitting requests and responses. This will help prevent
    tampering and data interception. This will require you to obtain **Secure Sockets
    Layer** (**SSL**) certificates for your servers.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用HTTPS而不是HTTP**：如果你的Java Web应用程序处理敏感的、受保护的或私人信息，你应该在发送请求和响应时使用**HTTP安全**（**HTTPS**）而不是HTTP。这将有助于防止篡改和数据拦截。这将要求你为你的服务器获取**安全套接字层**（**SSL**）证书。'
- en: '**Do not trust input**: We should always validate input to our systems to include
    user input and data passed to our applications programmatically. We should not
    assume that this data is in the right format. After we validate the data, we may
    have to clean it so it can be used in our application. This approach can help
    mitigate nefarious operations such as **SQL injections**.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不要信任输入**：我们应该始终验证我们的系统输入，包括用户输入和以编程方式传递给我们的应用程序的数据。我们不应假设这些数据是正确的格式。在验证数据后，我们可能需要清理它，以便可以在我们的应用程序中使用。这种方法可以帮助减轻诸如**SQL注入**等恶意操作。'
- en: '**Authenticate**: Whenever possible, identify the users and systems that your
    application interacts with. The previously mentioned API keys come into play here.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**认证**：尽可能识别你的应用程序与之交互的用户和系统。前面提到的API密钥在这里发挥作用。'
- en: '**Authorize**: Once a user or system has been authenticated, we should ensure
    that they have permission to perform specific operations in your application.
    Not every user will have the same level of authority.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**授权**：一旦用户或系统经过认证，我们应该确保他们有权在你的应用程序中执行特定操作。并非每个用户都将拥有相同的权限级别。'
- en: '**Protect API keys**: We have already mentioned the importance of API keys
    and their applicability to addressing security concerns. API keys are like passwords;
    we must protect them from exploitation. We do not want to hardcode these keys
    in our applications; instead, we should store them in encrypted configuration
    files, so they are protected from unauthorized eyes.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**保护API密钥**：我们已经提到了API密钥的重要性及其在解决安全问题的适用性。API密钥就像密码一样；我们必须保护它们免受利用。我们不希望将这些密钥硬编码到我们的应用程序中；相反，我们应该将它们存储在加密的配置文件中，这样它们就可以免受未经授权的眼睛的侵害。'
- en: '**Use security headers**: We have the option of using **HTTP security headers**.
    Here are some details:'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用安全头**：我们有使用**HTTP安全头**的选项。以下是一些详细信息：'
- en: '**Content Security Policy** (**CSP**): This helps prevent XSS attacks by explicitly
    identifying resources that are permitted to be loaded'
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内容安全策略**（**CSP**）：这通过明确标识允许加载的资源来帮助防止XSS攻击'
- en: '**HTTP Strict Transport Security** (**HSTS**): This can be used to enforce
    secure server connections'
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HTTP严格传输安全**（**HSTS**）：这可以用来强制执行安全的服务器连接'
- en: '**Treat sensitive data carefully**: This should go without saying, but sensitive
    data deserves special attention. For example, never transmit sensitive data in
    URLs, because they can be logged and then leaked. Also, ensure that sensitive
    data (such as passwords) is encrypted or hashed when you store it. Additionally,
    use a technique such as **tokenization** to securely handle payment information.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**谨慎处理敏感数据**：这一点不言而喻，但敏感数据值得特别注意。例如，永远不要在URL中传输敏感数据，因为它们可能会被记录下来，然后泄露。此外，确保在存储敏感数据（如密码）时对其进行加密或散列。另外，使用如**令牌化**等技术来安全地处理支付信息。'
- en: '**Update dependencies**: We should periodically check that our dependencies
    and Java libraries are up to date. We do not want to use older versions of components
    that might have known vulnerabilities.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更新依赖项**：我们应该定期检查我们的依赖项和Java库是否是最新的。我们不希望使用可能存在已知漏洞的组件的旧版本。'
- en: '**Log and monitor**: As with all of our software, we want to ensure we implement
    proper logging and then monitor operations to ensure the logs do not contain sensitive
    information.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**记录和监控**：与我们的所有软件一样，我们希望确保我们实施适当的记录，然后监控操作以确保日志中不包含敏感信息。'
- en: Security should always be at the forefront of developers’ minds. It is especially
    important when working with HTTP and external APIs. Adhering to the nine best
    practices discussed in this section is a good start to developing a security strategy
    for your Java web applications.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性始终应该是开发者心中的首要任务。当与HTTP和外部API一起工作时，这一点尤为重要。遵循本节中讨论的九项最佳实践是开发Java Web应用程序安全策略的好起点。
- en: Performance optimization
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 性能优化
- en: Now that we have sufficiently covered what HTTP is, its applicability to Java,
    and some techniques and best practices, let’s consider performance-related issues
    specific to using HTTP with Java. Our goals for looking at performance issues
    are to enhance the user experience and improve our application’s scalability,
    resilience, and maintainability.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经充分介绍了HTTP是什么，它在Java中的应用，以及一些技术和最佳实践，让我们考虑使用Java时与性能相关的问题。我们查看性能问题的目标是提升用户体验，并提高我们应用程序的可扩展性、弹性和可维护性。
- en: 'Let’s look at seven specific areas regarding performance optimization when
    using HTTP in our Java applications:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看在使用HTTP进行Java应用程序时，与性能优化相关的七个具体领域：
- en: The first area focuses on the `HttpClient` library includes support for connection
    pooling.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个领域侧重于`HttpClient`库，包括对连接池的支持。
- en: We can use `HTTP Keep-Alive` to keep connections open for multiple requests
    to a common host. This will reduce the number of communication handshakes and
    improve latency.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以使用`HTTP Keep-Alive`来保持与常见主机的多个请求的连接打开。这将减少通信握手次数并提高延迟。
- en: We can often leverage asynchronous requests (that is, API calls) to improve
    application flow.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们经常可以利用异步请求（即API调用）来改善应用程序流程。
- en: '**Caching** is another area to look at to help optimize performance. There
    are a few caching strategies that can be used to improve performance:'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓存**是另一个需要关注的领域，以帮助优化性能。有一些缓存策略可以用来提高性能：'
- en: Cache at the application level for frequently accessed data. The specifics depend
    on your application and what data it uses. There are even caching frameworks such
    as Caffeine that can be used.
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在应用程序级别缓存频繁访问的数据。具体取决于您的应用程序及其使用的数据。甚至还有如Caffeine之类的缓存框架可以使用。
- en: Using HTTP caching headers (that is, Cache-Control) can help you control response
    caching.
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用HTTP缓存头（即Cache-Control）可以帮助您控制响应缓存。
- en: 'If your Java web application deals with static content (that is, images), you
    can consider using **Content Delivery Networks** (**CDNs**) to cache your content
    closer to your users (i.e., storing data on servers in specific geographic areas).
    This approach can significantly shorten load times for users.*   A third area
    to consider is **optimizing data transfers**. There are two specific approaches
    to improving data transfers that are worth considering:'
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您的Java Web应用程序处理静态内容（即图像），您可以考虑使用**内容分发网络**（**CDNs**）来将内容缓存得更靠近您的用户（即在特定地理区域的服务器上存储数据）。这种方法可以显著缩短用户的加载时间。*   另一个需要考虑的领域是**优化数据传输**。有两个具体的方法值得考虑来改进数据传输：
- en: To the fullest possible extent, we should minimize data requests. Obviously,
    the fewer data requests there are, the better our applications will perform. Achieving
    this takes a purposeful approach to API integration design. We can use specific
    API endpoints to only obtain data necessary for the task instead of a bloated
    package.
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在尽可能的范围内，我们应该最小化数据请求。显然，数据请求越少，我们的应用程序性能越好。实现这一点需要针对API集成设计采取有目的的方法。我们可以使用特定的API端点仅获取完成任务所需的数据，而不是使用庞大的数据包。
- en: 'There are data compression tools we can use to decrease the size of the HTTP
    responses. This approach has become commonplace, so your web server is apt to
    support this type of compression.*   **API performance** is a fourth area of concern.
    Here are two techniques for optimizing API performance:'
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: When possible and applicable, implement rate limitations on your APIs. This
    can help prevent abuse and denial of service attacks. It can also help maintain
    service quality.
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当可能且适用时，在您的API上实施速率限制。这有助于防止滥用和拒绝服务攻击。同时也有助于维护服务质量。
- en: If your application and APIs support batch requests, it is worth implementing.
    This can have a profound impact on system performance.*   **Code optimization**
    is a fifth area of concern. Profiling tools such as VisualVM and JProfiler can
    be employed to help identify performance bottlenecks. The tools can be used to
    target memory and CPU operations. See [*Chapter 14*](B21942_14.xhtml#_idTextAnchor250),
    *Profiling Tools*, for more information.*   **SQL optimization** is another area
    of concern. SQL queries can be optimized to reduce database load and execution
    time. A thorough review of database schemas can help identify additional opportunities
    for optimization. See [*Chapter 15*](B21942_15.xhtml#_idTextAnchor288), *Optimizing
    Databases and SQL Queries*, for additional information.*   Our last area of performance
    concern when dealing with HTTP in Java is **scalability**. The two major techniques
    in this area are load balancing to help improve application availability and microservices
    architecture for better performance.
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你的应用程序和API支持批量请求，那么实现它是值得的。这可以在系统性能上产生深远的影响。*   **代码优化**是另一个需要关注的领域。可以使用VisualVM和JProfiler等性能分析工具来帮助识别性能瓶颈。这些工具可以用来针对内存和CPU操作。详见[*第14章*](B21942_14.xhtml#_idTextAnchor250)，*性能分析工具*，获取更多信息。*   **SQL优化**是另一个需要关注的领域。SQL查询可以被优化以减少数据库负载和执行时间。对数据库模式的彻底审查可以帮助识别更多的优化机会。详见[*第15章*](B21942_15.xhtml#_idTextAnchor288)，*优化数据库和SQL查询*，获取更多信息。*   当我们在Java中处理HTTP时，我们关注的最后一个性能领域是**可伸缩性**。这个领域中的两个主要技术是负载均衡，有助于提高应用程序的可用性，以及微服务架构，以获得更好的性能。
- en: Optimizing every aspect of our Java applications is important if we are to achieve
    our goal of developing high-performance applications. Working with HTTP in Java
    represents a unique set of challenges and opportunities for optimization.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 优化我们Java应用程序的每一个方面对于实现开发高性能应用程序的目标至关重要。在Java中使用HTTP代表了一组独特的挑战和优化机会。
- en: Summary
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter highlighted the role that HTTP plays in Java web application development.
    The purpose of HTTP was stated as being to facilitate dynamic web applications.
    Our coverage of this topic showed that HTTP can be used efficiently and securely.
    We also looked at Java web applications, API integrations, security, and performance
    optimization strategies. Since the fields of HTTP and Java web application development
    are so vibrant, it is important to be aware of changes and updates as they become
    available.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 本章强调了HTTP在Java Web应用程序开发中所扮演的角色。HTTP的目的被表述为促进动态Web应用程序的发展。我们对这个主题的覆盖表明，HTTP可以被高效且安全地使用。我们还探讨了Java
    Web应用程序、API集成、安全性和性能优化策略。由于HTTP和Java Web应用程序开发领域都非常活跃，因此了解相关变化和更新变得尤为重要。
- en: The next chapter, [*Chapter 12*](B21942_12.xhtml#_idTextAnchor205), *Frameworks
    for Optimization*, introduces strategies for using asynchronous input/output,
    buffered input/output, and batch operations to create high-performance Java applications.
    The chapter also covers frameworks for microservices and cloud-native applications.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章，[*第12章*](B21942_12.xhtml#_idTextAnchor205)，*优化框架*，介绍了使用异步输入/输出、缓冲输入/输出和批量操作来创建高性能Java应用程序的策略。本章还涵盖了微服务和云原生应用程序的框架。
- en: 'Part 4: Frameworks, Libraries, and Profiling'
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四部分：框架、库和性能分析
- en: Leveraging the right frameworks and libraries can greatly enhance application
    performance. This part examines various frameworks designed for optimization and
    introduces performance-focused libraries that can be integrated into Java projects.
    Additionally, it provides a guide to using profiling tools for the identification
    and resolution of performance bottlenecks. The chapters in this section are designed
    to equip you with the tools and knowledge needed to fine-tune your applications
    for maximum efficiency.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 利用合适的框架和库可以显著提升应用程序的性能。本部分将探讨为优化设计的各种框架，并介绍可集成到Java项目中的以性能为导向的库。此外，它还提供了使用性能分析工具来识别和解决性能瓶颈的指南。本节中的章节旨在为您提供调整应用程序以实现最大效率所需的工具和知识。
- en: 'This part has the following chapters:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包含以下章节：
- en: '[*Chapter 12*](B21942_12.xhtml#_idTextAnchor205), *Frameworks for Optimization*'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第12章*](B21942_12.xhtml#_idTextAnchor205)，*优化框架*'
- en: '[*Chapter 13*](B21942_13.xhtml#_idTextAnchor227), *Performance-Focused Libraries*'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第13章*](B21942_13.xhtml#_idTextAnchor227)，*以性能为导向的库*'
- en: '[*Chapter 14*](B21942_14.xhtml#_idTextAnchor250), *Profiling Tools*'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第14章*](B21942_14.xhtml#_idTextAnchor250)，*性能分析工具*'
