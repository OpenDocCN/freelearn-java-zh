["```java\npublic class SimplestStringListSortTest { \n    @Test \n    public void canSortStrings() { \n        ArrayList actualNames = new ArrayList(Arrays.asList( \n                \"Johnson\", \"Wilson\", \n                \"Wilkinson\", \"Abraham\", \"Dagobert\" \n        )); \n        Collections.sort(actualNames); \n        Assert.assertEquals(new ArrayList<String>(Arrays.<String>asList( \n                \"Abraham\", \"Dagobert\", \"Johnson\", \"Wilkinson\", \"Wilson\")), actualNames); \n    } \n}\n\n```", "```java\n$ mvn -Dtest=SimplestStringListSortTest test\n\n```", "```java\n<project> \n... \n    <modules> \n        <module>SortInterface</module> \n        <module>bubble</module> \n        <module>quick</module> \n    </modules> \n</project>\n\n```", "```java\n$ tree \n   |-SortInterface \n   |---src/main/java/packt/java9/by/example/ch03 \n   |-bubble \n   |---src \n   |-----main/java/packt/java9/by/example/ch03/bubble \n   |-----test/java/packt/java9/by/example/ch03/bubble \n   |-quick/src/ \n   |-----main/java \n   |-----test/java\n\n```", "```java\n<dependencies> \n    <dependency> \n        <groupId>packt.java9.by.example</groupId> \n        <artifactId>SortInterface</artifactId> \n    </dependency> \n    <dependency> \n        <groupId>junit</groupId> \n        <artifactId>junit</artifactId> \n    </dependency> \n</dependencies>\n\n```", "```java\n<dependencies> \n    <dependency> \n        <groupId>packt.java9.by.example</groupId> \n        <artifactId>SortInterface</artifactId> \n        <version>1.0.0-SNAPSHOT</version> \n    </dependency> \n    <dependency> \n        <groupId>junit</groupId> \n        <artifactId>junit</artifactId> \n        <version>4.12</version> \n    </dependency> \n</dependencies>\n\n```", "```java\n<dependencyManagement> \n    <dependencies> \n        <dependency> \n            <groupId>packt.java9.by.example</groupId> \n            <artifactId>SortInterface</artifactId> \n            <version>${project.version}</version> \n        </dependency> \n        <dependency> \n            <groupId>junit</groupId> \n            <artifactId>junit</artifactId> \n            <version>4.12</version> \n            <scope>test</scope> \n        </dependency> \n    </dependencies> \n</dependencyManagement>\n\n```", "```java\n<version>${project.version}</version>\n\n```", "```java\npackage packt.java9.by.example.ch03; \n\npublic interface Sort { \n    void sort(SortableCollection collection); \n}\n\n```", "```java\npackage packt.java9.by.example.ch03; \n\npublic interface SortableCollection { \n}\n\n```", "```java\npackage packt.java9.by.example.ch03.bubble; \n\nimport packt.java9.by.example.ch03.*; \nimport java.util.Comparator; \n\npublic class BubbleSort implements Sort { \n    @Override \n    public void sort(SortableCollection collection) { \n        int n = collection.size(); \n        while (n > 1) { \n            for (int j = 0; j < n - 1; j++) { \n                if (comparator.compare(collection.get(j), \n                        collection.get(j + 1)) > 0) { \n                    swapper.swap(j, j + 1); \n                } \n            } \n            n--; \n        } \n    }\n\n```", "```java\n    private Comparator comparator = null; \n\n    @Override \n    public void setComparator(Comparator comparator) { \n        this.comparator = comparator; \n    } \n\n    private Swapper swapper = null; \n\n    @Override \n    public void setSwapper(Swapper swapper) { \n        this.swapper = swapper; \n    } \n}\n\n```", "```java\npublic interface Sort { \n    void sort(SortableCollection collection); \n    void setSwapper(Swapper swap); \n    void setComparator(Comparator compare); \n}\n\n```", "```java\nimport java.util.Comparator;\n\n```", "```java\npackage packt.java9.by.example.ch03; \n\npublic interface Swapper { \n    void swap(int i, int j); \n}\n\n```", "```java\npackage packt.java9.by.example.ch03; \n\npublic interface SortableCollection { \n    Object get(int i); \n    int size(); \n}\n\n```", "```java\n<dependencyManagement> \n    <dependencies> \n        ... \n        <dependency> \n            <groupId>junit</groupId> \n            <artifactId>junit</artifactId> \n            <version>4.12</version> \n            <scope>test</scope> \n        </dependency> \n    </dependencies> \n</dependencyManagement>\n\n```", "```java\npackage packt.java9.by.example.ch03.bubble; \n\n// imports deleted from print \n\npublic class BubbleSortTest { \n\n    @Test \n    public void canSortStrings() { \n        ArrayList actualNames = new ArrayList(Arrays.asList( \n                \"Johnson\", \"Wilson\", \n                \"Wilkinson\", \"Abraham\", \"Dagobert\" \n        ));\n\n```", "```java\n        SortableCollection namesCollection = new SortableCollection() { \n\n            @Override \n            public Object get(int i) { \n                return actualNames.get(i); \n            } \n\n            @Override \n            public int size() { \n                return actualNames.size(); \n            } \n        };\n\n```", "```java\n        class SwapActualNamesArrayElements implements Swapper { \n            @Override \n            public void swap(int i, int j) { \n                final Object tmp = actualNames.get(i); \n                actualNames.set(i,actualNames.get(j)); \n                actualNames.set(j, tmp); \n\n            } \n        }\n\n```", "```java\n        Comparator stringCompare = new Comparator() { \n            @Override \n            public int compare(Object first, Object second) { \n                final String f = (String) first; \n                final String s = (String) second; \n                return f.compareTo(s); \n            } \n        };\n\n```", "```java\n        Sort sort = new BubbleSort(); \n        sort.setComparator(stringCompare); \n        sort.setSwapper(new SwapActualNamesArrayElements()); \n        sort.sort(namesCollection);\n\n```", "```java\n        Assert.assertEquals(Arrays.asList(\"Abraham\", \"Dagobert\", \"Johnson\", \"Wilkinson\", \"Wilson\"), actualNames); \n    } \n\n}\n\n```", "```java\npackage packt.java9.by.example.ch03.bubble; \n\nimport packt.java9.by.example.ch03.SortableCollection; \n\nimport java.util.ArrayList; \n\npublic class ArrayListSortableCollection implements SortableCollection { \n    final private ArrayList actualNames; \n\n    ArrayListSortableCollection(ArrayList actualNames) { \n        this.actualNames = actualNames; \n    } \n\n    @Override \n    public Object get(int i) { \n        return actualNames.get(i); \n    } \n\n    @Override \n    public int size() { \n        return actualNames.size(); \n    } \n}\n\n```", "```java\npackage packt.java9.by.example.ch03.bubble; \n\nimport packt.java9.by.example.ch03.Swapper; \n\nimport java.util.ArrayList; \n\npublic class ArrayListSwapper implements Swapper { \n    final private ArrayList actualNames; \n\n    ArrayListSwapper(ArrayList actualNames) { \n        this.actualNames = actualNames; \n    } \n\n    @Override \n    public void swap(int i, int j) { \n        Object tmp = actualNames.get(i); \n        actualNames.set(i, actualNames.get(j)); \n        actualNames.set(j, tmp); \n    } \n}\n\n```", "```java\npackage packt.java9.by.example.ch03.bubble; \n\n// ... imports deleted from print ... \npublic class BubbleSortTest { \n    @Test \n    public void canSortStrings() { \n        ArrayList actualNames = new ArrayList(Arrays.asList( \n                \"Johnson\", \"Wilson\", \n                \"Wilkinson\", \"Abraham\", \"Dagobert\" \n        )); \n        ArrayList expectedResult = new ArrayList(Arrays.asList( \n                \"Abraham\", \"Dagobert\", \n                \"Johnson\", \"Wilkinson\", \"Wilson\" \n        )); \n        SortableCollection names = \n                new ArrayListSortableCollection(actualNames); \n        Sort sort = new BubbleSort(); \n        sort.setComparator( \n                new StringComparator()); \n        sort.setSwapper( \n                new ArrayListSwapper(actualNames)); \n        sort.sort(names); \n        Assert.assertEquals(expectedResult, actualNames); \n    } \n}\n\n```", "```java\n@Test \npublic void canNotSortMixedElements() { \n    ArrayList actualNames = new ArrayList(Arrays.asList( \n            42, \"Wilson\", \n            \"Wilkinson\", \"Abraham\", \"Dagobert\" \n    )); \n... the rest of the code is the same as the previous test\n\n```", "```java\njava.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.String \n    at packt.java9.by.example.ch03.bubble.StringComparator.compare(StringComparator.java:9) \n    at packt.java9.by.example.ch03.bubble.BubbleSort.sort(BubbleSort.java:13) \n    at packt.java9.by.example.ch03.bubble.BubbleSortTest.canNotSortMixedElements(BubbleSortTest.java:49) \n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) \n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) \n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) \n    at java.lang.reflect.Method.invoke(Method.java:498) \n... some lines deleted from the print \n    at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:141) \n    at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:112) \n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) \n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) \n... some lines deleted from the print \n    at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85) \n    at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115) \n    at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)\n\n```", "```java\npackage packt.java9.by.example.ch03.bubble; \nimport java.util.Comparator; \npublic class StringComparator implements Comparator { \n    @Override \n    public int compare(Object first, Object second) { \n        try { \n            final String f = (String) first; \n            final String s = (String) second; \n            return f.compareTo(s); \n        } catch (ClassCastException cce) { \n            throw new NonStringElementInCollectionException ( \n                    \"There are mixed elements in the collection.\", cce); \n        } \n    } \n}\n\n```", "```java\npackage packt.java9.by.example.ch03.bubble; \n\npublic class NonStringElementInCollectionException extends RuntimeException { \n    public NonStringElementInCollectionException (String message, Throwable cause) { \n        super(message, cause); \n    } \n}\n\n```", "```java\npublic class NonStringElementInCollectionException extends Exception\n\n```", "```java\npublic int compare(Object first, Object second) throws NonStringElementInCollectionException\n\n```", "```java\npackage packt.java9.by.example.ch03; \npublic interface SortableCollection { \n    Object get(int i); \n    int size(); \n}\n\n```", "```java\npackage packt.java9.by.example.ch03; \n\npublic interface SortableCollection<E> { \n    E get(int i); \n    int size(); \n}\n\n```", "```java\npackage packt.java9.by.example.ch03; \nimport java.util.Comparator; \npublic interface Sort<E> { \n    void sort(SortableCollection<E> collection); \n    void setSwapper(Swapper swap); \n    void setComparator(Comparator<E> compare); \n}\n\n```", "```java\npackage packt.java9.by.example.ch03.bubble; \nimport packt.java9.by.example.ch03.*; \nimport java.util.Comparator; \npublic class BubbleSort<E> implements Sort<E> { \n    @Override \n    public void sort(SortableCollection<E> collection) { \n        ... sort code same as before \n    } \n    private Comparator<E> comparator = null; \n    @Override \n    public void setComparator(Comparator<E> comparator) { \n        this.comparator = comparator; \n    } \n        ... method swapper same as before \n}\n\n```", "```java\n@Test \npublic void canSortStrings() { \n    ArrayList<String> actualNames = new ArrayList< >(Arrays.asList( \n            \"Johnson\", \"Wilson\", \n            \"Wilkinson\", \"Abraham\", \"Dagobert\" \n    )); \n    ArrayList<String> expectedResult = new ArrayList<>(Arrays.asList( \n            \"Abraham\", \"Dagobert\", \n            \"Johnson\", \"Wilkinson\", \"Wilson\" \n    )); \n    SortableCollection<String> names = \n            new ArrayListSortableCollection<>(actualNames); \n    Sort<String> sort = new BubbleSort<>(); \n    sort.setComparator(String::compareTo); \n    sort.setSwapper(new ArrayListSwapper<>(actualNames)); \n    sort.sort(names); \n    Assert.assertEquals(expectedResult, actualNames); \n}\n\n```", "```java\n@Test(expected = RuntimeException.class) \npublic void throwsWhateverComparatorDoes () { \n    ArrayList<String> actualNames = new ArrayList<>(Arrays.asList( \n            42, \"Wilson\", \n            \"Wilkinson\", \"Abraham\", \"Dagobert\" \n    )); \n    SortableCollection<String> names = \n            new ArrayListSortableCollection<>(actualNames); \n    Sort<String> sort = new BubbleSort<>(); \n    sort.setComparator((String a, String b) -> { \n        throw new RuntimeException(); \n    }); \n    final Swapper neverInvoked = null; \n    sort.setSwapper(neverInvoked);  \n    sort.sort(names); \n}\n\n```", "```java\nactualNames.set(0,42);\n\n```", "```java\n((ArrayList)actualNames).set(0,42);\n\n```", "```java\n@Test(expected = RuntimeException.class) \npublic void throwsWhateverComparatorDoes() { \n    ArrayList<String> actualNames = new ArrayList<>(Arrays.asList( \n            \"\", \"Wilson\", \n            \"Wilkinson\", \"Abraham\", \"Dagobert\" \n    )); \n    ((ArrayList) actualNames).set(0, 42); \n    SortableCollection<String> names = \n            new ArrayListSortableCollection<>(actualNames); \n    Sort<String> sort = new BubbleSort<>(); \n    sort.setComparator((a, b) -> { \n        throw new RuntimeException(); \n    }); \n    final Swapper neverInvoked = null; \n    sort.setSwapper(neverInvoked); \n    sort.sort(names); \n}\n\n```", "```java\npublic int partition(SortableCollection<E> sortable, int start, int end, E pivot);\n\n```", "```java\npackage packt.java9.by.example.ch03.qsort; \n\nimport packt.java9.by.example.ch03.SortableCollection; \nimport packt.java9.by.example.ch03.Swapper; \n\nimport java.util.Comparator; \n\npublic class Partitioner<E> { \n\n    private final Comparator<E> comparator; \n    private final Swapper swapper; \n    public Partitioner(Comparator<E> comparator, Swapper swapper){ \n        this.comparator = comparator; \n        this.swapper = swapper; \n    } \n\n    public int partition(SortableCollection<E> sortable, int start, int end, E pivot){ \n        return 0; \n    } \n}\n\n```", "```java\npackage packt.java9.by.example.ch03.support; \nimport packt.java9.by.example.ch03.SortableCollection; \npublic class ArrayWrapper<E> implements SortableCollection<E> { \n    private final E[] array; \n    public ArrayWrapper(E[] array) { \n        this.array = array; \n    } \n    public E[] getArray() { \n        return array; \n    } \n    @Override \n    public E get(int i) { \n        return array[i]; \n    } \n    @Override \n    public int size() { \n        return array.length; \n    } \n}\n\n```", "```java\npackage packt.java9.by.example.ch03.support; \nimport packt.java9.by.example.ch03.Swapper; \npublic class ArraySwapper<E> implements Swapper { \n    private final E[] array; \n    public ArraySwapper(E[] array) { \n        this.array = array; \n    } \n    @Override \n    public void swap(int k, int r) { \n        final E tmp = array[k]; \n        array[k] = array[r]; \n        array[r] = tmp; \n    } \n}\n\n```", "```java\npackage packt.java9.by.example.ch03.qsort; \n\n// imports deleted from print \n\npublic class PartitionerTest {\n\n```", "```java\n    private void assertSmallElements(Integer[] array, int cutIndex, Integer pivot) { \n        for (int i = 0; i < cutIndex; i++) { \n            Assert.assertTrue(array[i] < pivot); \n        } \n    }\n\n```", "```java\n    private void assertLargeElemenents(Integer[] array, int cutIndex, Integer pivot) { \n        for (int i = cutIndex; i < array.length; i++) { \n            Assert.assertTrue(pivot <= array[i]); \n        } \n    }\n\n```", "```java\n    @Test \n    public void partitionsIntArray() { \n        Integer[] partitionThis = new Integer[]{0, 7, 6}; \n        Swapper swapper = new ArraySwapper<>(partitionThis); \n        Partitioner<Integer> partitioner = \n                new Partitioner<>((a, b) -> a < b ? -1 : a > b ? +1 : 0, swapper); \n        final Integer pivot = 6; \n        final int cutIndex = partitioner.partition(new ArrayWrapper<>(partitionThis), 0, 2, pivot); \n        Assert.assertEquals(1, cutIndex); \n        assertSmallElements(partitionThis, cutIndex, pivot); \n        assertLargeElemenents(partitionThis, cutIndex, pivot); \n    } \n}\n\n```", "```java\npublic int partition(SortableCollection<E> sortable, int start, int end, E pivot){ \n    int small = start; \n    int large = end; \n    while( large > small ){ \n        while( comparator.compare(sortable.get(small), pivot) < 0 && small < large ){ \n            small ++; \n        } \n        while( comparator.compare(sortable.get(large), pivot) >= 0 && small < large ){ \n            large--; \n        } \n        if( small < large ){ \n            swapper.swap(small, large); \n        } \n    } \n    return large; \n}\n\n```", "```java\n@Test \npublic void partitionsIntArray() { \n    Integer[] partitionThis = new Integer[]{0, 7, 6, 2}; \n    Swapper swapper = new ArraySwapper<>(partitionThis); \n    Partitioner<Integer> partitioner = \n            new Partitioner<>((a, b) -> a < b ? -1 : a > b ? +1 : 0, swapper); \n    final Integer pivot = 6; \n    final int cutIndex = partitioner.partition(new ArrayWrapper<>(partitionThis), 0, partitionThis.length-1, pivot); \n    Assert.assertEquals(2, cutIndex); \n    final Integer[] expected = new Integer[]{0, 2, 6, 7}; \n    Assert.assertArrayEquals(expected,partitionThis); \n}\n\n```", "```java\npackage packt.java9.by.example.ch03.qsort; \n\n// imports deleted from the print \n\npublic class Qsort<E>  { \n// constructor injected final fields deleted from the print \n    public void qsort(SortableCollection<E> sortable, int start, int end) { \n        if (start < end) { \n            final E pivot = sortable.get(start); \n            final Partitioner<E> partitioner = new Partitioner<>(comparator, swapper); \n            int cutIndex = partitioner.partition(sortable, start, end, pivot); \n            if (cutIndex == start) { \n                cutIndex++; \n            } \n            qsort(sortable, start, cutIndex - 1); \n            qsort(sortable, cutIndex, end); \n        } \n    } \n}\n\n```", "```java\npublic class NonRecursiveQuickSort<E> { \n    // injected final fields and constructor deleted from print  \n    private static class Stack { \n        final int begin; \n        final int fin; \n        public Stack(int begin, int fin) { \n            this.begin = begin; \n            this.fin = fin; \n        } \n    } \n\n    public void qsort(SortableCollection<E> sortable, int start, int end) { \n        final List<Stack> stack = new LinkedList<>(); \n        final Partitioner<E> partitioner = new Partitioner<>(comparator, swapper); \n        stack.add(new Stack(start, end)); \n        int i = 1; \n        while (!stack.isEmpty()) { \n            Stack iter = stack.remove(0); \n            if (iter.begin < iter.fin) { \n                final E pivot = sortable.get(iter.begin); \n                int cutIndex = partitioner.partition(sortable, iter.begin, iter.fin, pivot); \n                if( cutIndex == iter.begin ){ \n                    cutIndex++; \n                } \n                stack.add(new Stack(iter.begin, cutIndex - 1)); \n                stack.add(new Stack(cutIndex, iter.fin)); \n            } \n        } \n    } \n}\n\n```", "```java\npublic class QuickSort<E> implements Sort<E> { \n    public void sort(SortableCollection<E> sortable) { \n        int n = sortable.size(); \n        Qsort<E> qsort = new Qsort<>(comparator,swapper); \n        qsort.qsort(sortable, 0, n-1); \n    } \n// ... setter injectors were deleted from the print \n}\n\n```", "```java\n@Test \npublic void canSortStrings() { \n    final String[] actualNames = new String[]{ \n            \"Johnson\", \"Wilson\", \n            \"Wilkinson\", \"Abraham\", \"Dagobert\" \n    }; \n    final String[] expected = new String[]{\"Abraham\", \"Dagobert\", \"Johnson\", \"Wilkinson\", \"Wilson\"}; \n    Sort<String> sort = new QuickSort<>(); \n    sort.setComparator(String::compareTo); \n    sort.setSwapper(new ArraySwapper<String>(actualNames)); \n    sort.sort(new ArrayWrapper<>(actualNames)); \n    Assert.assertArrayEquals(expected, actualNames); \n}\n\n```", "```java\nmodule packt.java9.by.example.ch03{ \n        exports packt.java9.by.example.ch03; \n        }\n\n```", "```java\n<build> ... \n    <plugins> ... \n        <plugin> \n            <groupId>org.apache.maven.plugins</groupId> \n            <artifactId>maven-compiler-plugin</artifactId> \n            <version>3.5.1</version> \n            <configuration> \n                <source>1.9</source> \n                <target>1.9</target> \n            </configuration> \n        </plugin> \n...\n\n```", "```java\nmodule packt.java9.by.example.ch03.quick{ \n        exports packt.java9.by.example.ch03.quick; \n        requires packt.java9.by.example.ch03; \n        }\n\n```", "```java\npackage packt.java9.by.example.ch03.main; \n\n// ... imports deleted from the print \n\npublic class Main { \n    public static void main(String[] args) throws IOException { \n        String fileName = args[0]; \n        BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(new File(fileName)))); \n        List<String> lines = new LinkedList<>(); \n        String line; \n        while ((line = br.readLine()) != null) { \n            lines.add(line); \n        } \n        br.close(); \n        String[] lineArray = lines.toArray(new String[0]); \n        Sort<String> sort = new QuickSort<>(); \n        Qsort<String> qsort = new Qsort<>(String::compareTo,new ArraySwapper<>(lineArray)); \n        sort.setComparator(String::compareTo); \n        sort.setSwapper(new ArraySwapper<>(lineArray)); \n        sort.sort(new ArrayWrapper<>(lineArray)); \n        for (final String outLine : lineArray) { \n            System.out.println(outLine); \n        } \n    } \n}\n\n```", "```java\nmodule packt.java9.by.example.ch03.main{ \n        requires packt.java9.by.example.ch03.quick; \n        requires packt.java9.by.example.ch03; \n        requires packt.java9.by.example.ch03.support; \n        }\n\n```", "```java\n    java -cp Main/target/Main-1.0.0-SNAPSHOT.jar:SortInterface/target/SortInterface-1.0.0-SNAPSHOT.jar:quick/target/quick-1.0.0-SNAPSHOT.jar:SortSupportClasses/target/SortSupportClasses-1.0.0-SNAPSHOT.jar packt.java9.by.example.ch03.main.Main pom.xml \n\n```", "```java\n    [ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.5.1:compile (default-compile) on project Main: Compilation failure: Compilation failure:\n[ERROR] .../Main/src/main/java/packt/java9/by/example/ch03/main/Main.java:[4,41] package packt.java9.by.example.ch03.qsort does not exist\n[ERROR] .../Main/src/main/java/packt/java9/by/example/ch03/main/Main.java:[25,9] cannot find symbol\n\n```"]