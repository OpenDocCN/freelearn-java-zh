["```java\n        public class CreateGuiDemo extends Application{\n          public void start(Stage stage){\n            //to implement in new steps\n          }\n        }\n```", "```java\n        public class CreateGuiDemo extends Application{\n          public void start(Stage stage){\n            //to implement in new steps\n          }\n          public static void main(String[] args){\n            //launch the JavaFX application\n          }\n        }\n```", "```java\n        GridPane gridPane = new GridPane();\n        gridPane.setAlignment(Pos.CENTER);\n        gridPane.setHgap(10);\n        gridPane.setVgap(10);\n        gridPane.setPadding(new Insets(25, 25, 25, 25));\n```", "```java\n        Text appTitle = new Text(\"Age calculator\");\n        appTitle.setFont(Font.font(\"Arial\", FontWeight.NORMAL, 15));\n        gridPane.add(appTitle, 0, 0, 2, 1);\n```", "```java\n        Label nameLbl = new Label(\"Name\");\n        TextField nameField = new TextField();\n        gridPane.add(nameLbl, 0, 1);\n        gridPane.add(nameField, 1, 1);\n```", "```java\n        Label dobLbl = new Label(\"Date of birth\");\n        gridPane.add(dobLbl, 0, 2);\n        DatePicker dateOfBirthPicker = new DatePicker();\n        gridPane.add(dateOfBirthPicker, 1, 2);\n```", "```java\n        Button ageCalculator = new Button(\"Calculate\");\n        gridPane.add(ageCalculator, 1, 3);\n```", "```java\n        Text resultTxt = new Text();\n        resultTxt.setFont(Font.font(\"Arial\", FontWeight.NORMAL, 15));\n        gridPane.add(resultTxt, 0, 5, 2, 1);\n```", "```java\n        ageCalculator.setOnAction((event) -> {\n          String name = nameField.getText();\n          LocalDate dob = dateOfBirthPicker.getValue();\n          if ( dob != null ){\n            LocalDate now = LocalDate.now();\n            Period period = Period.between(dob, now);\n            StringBuilder resultBuilder = new StringBuilder();\n            if ( name != null && name.length() > 0 ){\n              resultBuilder.append(\"Hello, \")\n                         .append(name)\n                         .append(\"n\");\n            }\n            resultBuilder.append(String.format(\n              \"Your age is %d years %d months %d days\",\n              period.getYears(), \n              period.getMonths(), \n              period.getDays())\n            );\n            resultTxt.setText(resultBuilder.toString());\n          }\n        });\n```", "```java\n        Scene scene = new Scene(gridPane, 300, 250);\n```", "```java\n        stage.setTitle(\"Age calculator\");\n        stage.setScene(scene);\n        stage.show();\n```", "```java\n        public static void main(String[] args) {\n          Application.launch(args);\n        }\n```", "```java\nageCalculator.setOnAction((event) -> {\n  //event handling code here\n});\n```", "```java\nLocalDate now = LocalDate.now();\nPeriod period = Period.between(dob, now);\n```", "```java\nstage.setScene(scene);\nstage.show();\n```", "```java\n        <GridPane alignment=\"CENTER\" hgap=\"10.0\" vgap=\"10.0\"\n\n          fx:controller=\"com.packt.FxmlController\">\n        </GridPane>\n```", "```java\n        <padding>\n          <Insets bottom=\"25.0\" left=\"25.0\" right=\"25.0\" top=\"25.0\" />\n        </padding>\n```", "```java\n        <Text style=\"-fx-font: NORMAL 15 Arial;\" text=\"Age calculator\"\n          GridPane.columnIndex=\"0\" GridPane.rowIndex=\"0\" \n          GridPane.columnSpan=\"2\" GridPane.rowSpan=\"1\">\n        </Text>\n```", "```java\n        <Label text=\"Name\" GridPane.columnIndex=\"0\" \n          GridPane.rowIndex=\"1\">\n        </Label>\n        <TextField fx:id=\"nameField\" GridPane.columnIndex=\"1\" \n          GridPane.rowIndex=\"1\">\n        </TextField>\n```", "```java\n        <Label text=\"Date of Birth\" GridPane.columnIndex=\"0\" \n          GridPane.rowIndex=\"2\">\n        </Label>\n        <DatePicker fx:id=\"dateOfBirthPicker\" GridPane.columnIndex=\"1\" \n          GridPane.rowIndex=\"2\">\n        </DatePicker>\n```", "```java\n        <Button onAction=\"#calculateAge\" text=\"Calculate\"\n          GridPane.columnIndex=\"1\" GridPane.rowIndex=\"3\">\n        </Button>\n```", "```java\n        <Text fx:id=\"resultTxt\" style=\"-fx-font: NORMAL 15 Arial;\"\n          GridPane.columnIndex=\"0\" GridPane.rowIndex=\"5\"\n          GridPane.columnSpan=\"2\" GridPane.rowSpan=\"1\"\n        </Text>\n```", "```java\n        public class FxmlController {\n          //to implement in next few steps\n        }\n```", "```java\n        @FXML private Text resultTxt;\n        @FXML private DatePicker dateOfBirthPicker;\n        @FXML private TextField nameField;\n```", "```java\n        @FXML\n        public void calculateAge(ActionEvent event){\n          String name = nameField.getText();\n          LocalDate dob = dateOfBirthPicker.getValue();\n          if ( dob != null ){\n            LocalDate now = LocalDate.now();\n            Period period = Period.between(dob, now);\n            StringBuilder resultBuilder = new StringBuilder();\n            if ( name != null && name.length() > 0 ){\n              resultBuilder.append(\"Hello, \")\n                           .append(name)\n                           .append(\"n\");\n            }\n            resultBuilder.append(String.format(\n              \"Your age is %d years %d months %d days\", \n              period.getYears(), \n              period.getMonths(), \n              period.getDays())\n            );\n            resultTxt.setText(resultBuilder.toString());\n          }\n        }\n```", "```java\n        public class FxmlGuiDemo extends Application{ \n          //code to launch the UI + provide main() method\n        }\n```", "```java\n        @Override\n        public void start(Stage stage) throws IOException{\n          FXMLLoader loader = new FXMLLoader();\n          Pane pane = (Pane)loader.load(getClass()\n              .getModule()\n              .getResourceAsStream(\"com/packt/fxml_age_calc_gui.fxml\")\n          );\n\n          Scene scene = new Scene(pane,300, 250);\n          stage.setTitle(\"Age calculator\");\n          stage.setScene(scene);\n          stage.show();\n        }\n```", "```java\n        public static void main(String[] args) {\n          Application.launch(args);\n        }\n```", "```java\nPane pane = (Pane)loader.load(getClass()\n    .getModule()\n    .getResourceAsStream(\"com/packt/fxml_age_calc_gui.fxml\")\n );\n```", "```java\n@FXML private Text resultTxt;\n@FXML private DatePicker dateOfBirthPicker;\n@FXML private TextField nameField;\n```", "```java\n<Text fx:id=\"resultTxt\" style=\"-fx-font: NORMAL 15 Arial;\"\n  GridPane.columnIndex=\"0\" GridPane.rowIndex=\"5\" \n  GridPane.columnSpan=\"2\" GridPane.rowSpan=\"1\">\n</Text>\n```", "```java\n<button style=\"background-color: blue;\"></button>\n```", "```java\n        #btn1 { background-color: blue; }\n```", "```java\n        .blue-btn { background-color: blue; }\n```", "```java\n        GridPane gridPane = new GridPane();\n        gridPane.setAlignment(Pos.CENTER);\n        gridPane.setHgap(10);\n        gridPane.setVgap(10);\n        gridPane.setPadding(new Insets(25, 25, 25, 25));\n```", "```java\n        Button primaryBtn = new Button(\"Primary\");\n        primaryBtn.getStyleClass().add(\"btn\");\n        primaryBtn.getStyleClass().add(\"btn-primary\");\n        gridPane.add(primaryBtn, 0, 1);\n```", "```java\n        .btn{\n          -fx-border-radius: 4px;\n          -fx-border: 2px;\n          -fx-font-size: 18px;\n          -fx-font-weight: normal;\n          -fx-text-align: center;\n        }\n        .btn-primary {\n          -fx-text-fill: #fff;\n          -fx-background-color: #337ab7;\n          -fx-border-color: #2e6da4;\n        }\n```", "```java\n        Button successBtn = new Button(\"Sucess\");\n        successBtn.getStyleClass().add(\"btn\");\n        successBtn.getStyleClass().add(\"btn-success\");\n        gridPane.add(successBtn, 1, 1);\n```", "```java\n        .btn-success {\n          -fx-text-fill: #fff;\n          -fx-background-color: #5cb85c;\n          -fx-border-color: #4cae4c;\n        }\n```", "```java\n        Button dangerBtn = new Button(\"Danger\");\n        dangerBtn.getStyleClass().add(\"btn\");\n        dangerBtn.getStyleClass().add(\"btn-danger\");\n        gridPane.add(dangerBtn, 2, 1);\n```", "```java\n        .btn-danger {\n          -fx-text-fill: #fff;\n          -fx-background-color: #d9534f;\n          -fx-border-color: #d43f3a;\n        }\n```", "```java\n        Label label = new Label(\"Default Label\");\n        label.getStyleClass().add(\"badge\");\n        gridPane.add(label, 0, 2);\n\n        Label infoLabel = new Label(\"Info Label\");\n        infoLabel.getStyleClass().add(\"badge\");\n        infoLabel.getStyleClass().add(\"badge-info\");\n        gridPane.add(infoLabel, 1, 2);\n```", "```java\n        .badge{\n          -fx-label-padding: 6,7,6,7;\n          -fx-font-size: 12px;\n          -fx-font-weight: 700;\n          -fx-text-fill: #fff;\n          -fx-text-alignment: center;\n          -fx-background-color: #777;\n          -fx-border-radius: 4;\n        }\n\n        .badge-info{\n          -fx-background-color: #3a87ad;\n        }\n        .badge-warning {\n          -fx-background-color: #f89406;\n        }\n```", "```java\n        TextField bigTextField = new TextField();\n        bigTextField.getStyleClass().add(\"big-input\");\n        gridPane.add(bigTextField, 0, 3, 3, 1);\n```", "```java\n        .big-input{\n          -fx-text-fill: red;\n          -fx-font-size: 18px;\n          -fx-font-style: italic;\n          -fx-font-weight: bold;\n        }\n```", "```java\n        ToggleGroup group = new ToggleGroup();\n        RadioButton bigRadioOne = new RadioButton(\"First\");\n        bigRadioOne.getStyleClass().add(\"big-radio\");\n        bigRadioOne.setToggleGroup(group);\n        bigRadioOne.setSelected(true);\n        gridPane.add(bigRadioOne, 0, 4);\n        RadioButton bigRadioTwo = new RadioButton(\"Second\");\n        bigRadioTwo.setToggleGroup(group);\n        bigRadioTwo.getStyleClass().add(\"big-radio\");\n        gridPane.add(bigRadioTwo, 1, 4);\n```", "```java\n        .big-radio{\n          -fx-text-fill: green;\n          -fx-font-size: 18px;\n          -fx-font-weight: bold;\n          -fx-background-color: yellow;\n          -fx-padding: 5;\n        }\n```", "```java\n        Scene scene = new Scene(gridPane, 600, 500);\n        scene.getStylesheets().add(\"com/packt/stylesheet.css\");\n        stage.setTitle(\"Age calculator\");\n        stage.setScene(scene);\n        stage.show();\n```", "```java\n        public static void main(String[] args) {\n          Application.launch(args);\n        }\n```", "```java\nprimaryBtn.getStyleClass().add(\"btn\");\nprimaryBtn.getStyleClass().add(\"btn-primary\");\n```", "```java\n.btn{\n  -fx-border-radius: 4px;\n  -fx-border: 2px;\n  -fx-font-size: 18px;\n  -fx-font-weight: normal;\n  -fx-text-align: center;\n}\n.btn-primary {\n  -fx-text-fill: #fff;\n  -fx-background-color: #337ab7;\n  -fx-border-color: #2e6da4;\n}\n```", "```java\n\"F\";18;4;4;\"at_home\";\"teacher\";\"no\";\"5\";\"6\";6\n\"F\";17;1;1;\"at_home\";\"other\";\"no\";\"5\";\"5\";6\n\"F\";15;1;1;\"at_home\";\"other\";\"yes\";\"7\";\"8\";10\n\"F\";15;4;2;\"health\";\"services\";\"yes\";\"15\";\"14\";15\n\"F\";16;3;3;\"other\";\"other\";\"yes\";\"6\";\"10\";10\n\"M\";16;4;3;\"services\";\"other\";\"yes\";\"15\";\"15\";15\n```", "```java\n        GridPane gridPane = new GridPane();\n        gridPane.setAlignment(Pos.CENTER);\n        gridPane.setHgap(10);\n        gridPane.setVgap(10);\n        gridPane.setPadding(new Insets(25, 25, 25, 25));\n```", "```java\n        StudentDataProcessor sdp = new StudentDataProcessor();\n        List<Student> students = sdp.loadStudent();\n```", "```java\n        private Map<ParentEducation, IntSummaryStatistics> summarize(\n          List<Student> students,\n          Function<Student, ParentEducation> classifier,\n          ToIntFunction<Student> mapper\n        ){\n          Map<ParentEducation, IntSummaryStatistics> statistics =\n            students.stream().collect(\n              Collectors.groupingBy(\n                classifier,\n                Collectors.summarizingInt(mapper)\n              )\n          );\n          return statistics;\n        }\n```", "```java\n        private XYChart.Series<String,Number> getSeries(\n            String seriesName,\n            Map<ParentEducation, IntSummaryStatistics> statistics\n        ){\n          XYChart.Series<String,Number> series = new XYChart.Series<>();\n          series.setName(seriesName);\n          statistics.forEach((k, v) -> {\n            series.getData().add(\n              new XYChart.Data<String, Number>(\n                k.toString(),v.getAverage()\n              )\n            );\n          });\n          return series;\n        }\n```", "```java\n        private BarChart<String, Number> getAvgGradeByEducationBarChart(\n          List<Student> students,\n          Function<Student, ParentEducation> classifier\n        ){\n          final CategoryAxis xAxis = new CategoryAxis();\n          final NumberAxis yAxis = new NumberAxis();\n          final BarChart<String,Number> bc = \n                new BarChart<>(xAxis,yAxis);\n          xAxis.setLabel(\"Education\");\n          yAxis.setLabel(\"Grade\");\n          bc.getData().add(getSeries(\n            \"G1\",\n            summarize(students, classifier, Student::getFirstTermGrade)\n          ));\n          bc.getData().add(getSeries(\n            \"G2\",\n            summarize(students, classifier, Student::getSecondTermGrade)\n          ));\n          bc.getData().add(getSeries(\n            \"Final\",\n            summarize(students, classifier, Student::getFinalGrade)\n          ));\n          return bc;\n        }\n```", "```java\n        BarChart<String, Number> avgGradeByMotherEdu = \n                        getAvgGradeByEducationBarChart(\n          students, \n          Student::getMotherEducation\n        );\n        avgGradeByMotherEdu.setTitle(\"Average grade by Mother's\n                                      Education\");\n        gridPane.add(avgGradeByMotherEdu, 1,1);\n```", "```java\n        BarChart<String, Number> avgGradeByFatherEdu = \n                      getAvgGradeByEducationBarChart(\n          students, \n          Student::getFatherEducation\n        );\n        avgGradeByFatherEdu.setTitle(\"Average grade by Father's \n                                      Education\");\n        gridPane.add(avgGradeByFatherEdu, 2,1);\n```", "```java\n        Scene scene = new Scene(gridPane, 800, 600);\n        stage.setTitle(\"Bar Charts\");\n        stage.setScene(scene);\n        stage.show();\n```", "```java\nfinal CategoryAxis xAxis = new CategoryAxis();\nfinal NumberAxis yAxis = new NumberAxis();\nfinal BarChart<String,Number> bc = new BarChart<>(xAxis,yAxis);\nxAxis.setLabel(\"Education\");\nyAxis.setLabel(\"Grade\");\n```", "```java\nXYChart.Data item = new XYChart.Data(\"Cat1\", \"12\");\n```", "```java\nXYChart.Series<String,Number> series = new XYChart.Series<>();\nseries.setName(\"My series\");\nseries.getData().add(\n  new XYChart.Data<String, Number>(\"Cat1\", 12)\n);\nseries.getData().add(\n  new XYChart.Data<String, Number>(\"Cat2\", 3)\n);\nseries.getData().add(\n  new XYChart.Data<String, Number>(\"Cat3\", 16)\n);\n```", "```java\nbc.getData().add(series);\nScene scene = new Scene(bc, 800, 600);\nstage.setTitle(\"Bar Charts\");\nstage.setScene(scene);\nstage.show();\n```", "```java\nMap<ParentEducation, IntSummaryStatistics> statistics =\n        students.stream().collect(\n  Collectors.groupingBy(\n    classifier,\n    Collectors.summarizingInt(mapper)\n  )\n);\n```", "```java\n        GridPane gridPane = new GridPane();\n        gridPane.setAlignment(Pos.CENTER);\n        gridPane.setHgap(10);\n        gridPane.setVgap(10);\n        gridPane.setPadding(new Insets(25, 25, 25, 25));\n```", "```java\n        StudentDataProcessor sdp = new StudentDataProcessor();\n        List<Student> students = sdp.loadStudent();\n```", "```java\n        private PieChart getStudentCountByOccupation(\n            List<Student> students,\n            Function<Student, String> classifier\n        ){\n          Map<String, Long> occupationBreakUp = \n                  students.stream().collect(\n            Collectors.groupingBy(\n              classifier,\n              Collectors.counting()\n            )\n          );\n          List<PieChart.Data> pieChartData = new ArrayList<>();\n          occupationBreakUp.forEach((k, v) -> {\n            pieChartData.add(new PieChart.Data(k.toString(), v));\n          });\n          PieChart chart = new PieChart(\n            FXCollections.observableList(pieChartData)\n          );\n          return chart;\n        }\n```", "```java\n        PieChart motherOccupationBreakUp = getStudentCountByOccupation(\n          students, Student::getMotherJob\n        );\n        motherOccupationBreakUp.setTitle(\"Mother's Occupation\");\n        gridPane.add(motherOccupationBreakUp, 1,1);\n\n        PieChart fatherOccupationBreakUp = getStudentCountByOccupation(\n          students, Student::getFatherJob\n        );\n        fatherOccupationBreakUp.setTitle(\"Father's Occupation\");\n        gridPane.add(fatherOccupationBreakUp, 2,1);\n```", "```java\n        Scene scene = new Scene(gridPane, 800, 600);\n        stage.setTitle(\"Pie Charts\");\n        stage.setScene(scene);\n        stage.show();\n```", "```java\n        public static void main(String[] args) {\n          Application.launch(args);\n        }\n```", "```java\n        Map<String, Long> occupationBreakUp = \n                    students.stream().collect(\n          Collectors.groupingBy(\n            classifier,\n            Collectors.counting()\n          )\n        );\n```", "```java\n        List<PieChart.Data> pieChartData = new ArrayList<>();\n        occupationBreakUp.forEach((k, v) -> {\n          pieChartData.add(new PieChart.Data(k.toString(), v));\n        });\n        PieChart chart = new PieChart(\n          FXCollections.observableList(pieChartData)\n        );\n```", "```java\n        public class OilPrice{\n          public String period;\n          public Double value;\n        }\n```", "```java\n        private List<OilPrice> getOilData(String oilType)\n                throws IOException{\n          Scanner reader = new Scanner(getClass()\n                      .getModule()\n                      .getResourceAsStream(\"com/packt/\"+oilType)\n          );\n          List<OilPrice> data = new LinkedList<>();\n          while(reader.hasNext()){\n            String line = reader.nextLine();\n            String[] elements = line.split(\"t\");\n            OilPrice op = new OilPrice();\n            op.period = elements[0];\n            op.value = Double.parseDouble(elements[1]);\n            data.add(op);\n          }\n          Collections.reverse(data);\n          return data;\n        }\n```", "```java\n        private XYChart.Series<String,Number> getSeries(\n          String seriesName, List<OilPrice> data\n        ) throws IOException{\n          XYChart.Series<String,Number> series = new XYChart.Series<>();\n          series.setName(seriesName);\n          data.forEach(d -> {\n            series.getData().add(new XYChart.Data<String, Number>(\n              d.period, d.value\n            ));\n          });\n          return series;\n        }\n```", "```java\n        @Override\n        public void start(Stage stage) throws IOException {\n          //code to be added here from the next few steps\n        }\n```", "```java\n        GridPane gridPane = new GridPane();\n        gridPane.setAlignment(Pos.CENTER);\n        gridPane.setHgap(10);\n        gridPane.setVgap(10);\n        gridPane.setPadding(new Insets(25, 25, 25, 25));\n```", "```java\n        final CategoryAxis xAxis = new CategoryAxis();\n        final NumberAxis yAxis = new NumberAxis();\n        xAxis.setLabel(\"Month\");\n        yAxis.setLabel(\"Price\");\n```", "```java\n        final LineChart<String,Number> lineChart = \n        new LineChart<>(xAxis,yAxis);\n```", "```java\n        List<OilPrice> crudeOil = getOilData(\"crude-oil\");\n```", "```java\n        List<OilPrice> brentOil = getOilData(\"brent-oil\");\n```", "```java\n        lineChart.getData().add(getSeries(\"Crude Oil\", crudeOil));\n        lineChart.getData().add(getSeries(\"Brent Oil\", brentOil));\n```", "```java\n        gridPane.add(lineChart, 1, 1);\n```", "```java\n        Scene scene = new Scene(gridPane, 800, 600);\n```", "```java\n        stage.setTitle(\"Line Charts\");\n        stage.setScene(scene);\n        stage.show();\n```", "```java\n        public static void main(String[] args) {\n          Application.launch(args);\n        }\n```", "```java\nfinal CategoryAxis xAxis = new CategoryAxis();\nfinal NumberAxis yAxis = new NumberAxis();\nxAxis.setLabel(\"Category\");\nyAxis.setLabel(\"Price\");\nfinal LineChart<String,Number> lineChart = new LineChart<>(xAxis,yAxis);\n```", "```java\nXYChart.Series<String,Number> series =  new XYChart.Series<>();\nseries.setName(\"Series 1\");\n```", "```java\nseries.getData().add(new XYChart.Data<String, Number>(\"Cat 1\", 10));\nseries.getData().add(new XYChart.Data<String, Number>(\"Cat 2\", 20));\nseries.getData().add(new XYChart.Data<String, Number>(\"Cat 3\", 30));\nseries.getData().add(new XYChart.Data<String, Number>(\"Cat 4\", 40));\n```", "```java\nlineChart.getData().add(series);\n```", "```java\nXYChart.Series<String, Number> series2 = new XYChart.Series<>();\nseries2.setName(\"Series 2\");\nseries2.getData().add(new XYChart.Data<String, Number>(\"Cat 1\", 40));\nseries2.getData().add(new XYChart.Data<String, Number>(\"Cat 2\", 30));\nseries2.getData().add(new XYChart.Data<String, Number>(\"Cat 3\", 20));\nseries2.getData().add(new XYChart.Data<String, Number>(\"Cat 4\", 10));\nlineChart.getData().add(series2);\n```", "```java\n        public class OilPrice{\n          public String period;\n          public Double value;\n        }\n```", "```java\n        private List<OilPrice> getOilData(String oilType)\n                  throws IOException{\n          Scanner reader = new Scanner(getClass()\n                           .getModule()\n                           .getResourceAsStream(\"com/packt/\"+oilType)\n          );\n          List<OilPrice> data = new LinkedList<>();\n          while(reader.hasNext()){\n            String line = reader.nextLine();\n            String[] elements = line.split(\"t\");\n            OilPrice op = new OilPrice();\n            op.period = elements[0];\n            op.value = Double.parseDouble(elements[1]);\n            data.add(op);\n          }\n          Collections.reverse(data);\n          return data;\n        }\n```", "```java\n        private XYChart.Series<String,Number> getSeries(\n          String seriesName, List<OilPrice> data\n        ) throws IOException{\n          XYChart.Series<String,Number> series = new XYChart.Series<>();\n          series.setName(seriesName);\n          data.forEach(d -> {\n            series.getData().add(new XYChart.Data<String, Number>(\n              d.period, d.value\n            ));\n          });\n          return series;\n        }\n```", "```java\n        @Override\n        public void start(Stage stage) throws IOException {\n          //code to be added here from the next few steps\n        }\n```", "```java\n        GridPane gridPane = new GridPane();\n        gridPane.setAlignment(Pos.CENTER);\n        gridPane.setHgap(10);\n        gridPane.setVgap(10);\n        gridPane.setPadding(new Insets(25, 25, 25, 25));\n```", "```java\n        final CategoryAxis xAxis = new CategoryAxis();\n        final NumberAxis yAxis = new NumberAxis();\n        xAxis.setLabel(\"Month\");\n        yAxis.setLabel(\"Price\");\n```", "```java\n        final AreaChart<String,Number> areaChart = \n                        new AreaChart<>(xAxis,yAxis);\n```", "```java\n        List<OilPrice> crudeOil = getOilData(\"crude-oil\");\n```", "```java\n        List<OilPrice> brentOil = getOilData(\"brent-oil\");\n```", "```java\n        areaChart.getData().add(getSeries(\"Crude Oil\", crudeOil));\n        areaChart.getData().add(getSeries(\"Brent Oil\", brentOil));\n```", "```java\n        gridPane.add(areaChart, 1, 1);\n```", "```java\n        Scene scene = new Scene(gridPane, 800, 600);\n```", "```java\n        stage.setTitle(\"Area Charts\");\n        stage.setScene(scene);\n        stage.show();\n```", "```java\n        public static void main(String[] args) {\n          Application.launch(args);\n        }\n```", "```java\n        private List<StoreVisit> getData() throws IOException{\n          Scanner reader = new Scanner(getClass()\n                        .getModule()\n                        .getResourceAsStream(\"com/packt/store\")\n          );\n          List<StoreVisit> data = new LinkedList<>();\n          while(reader.hasNext()){\n            String line = reader.nextLine();\n            String[] elements = line.split(\",\");\n            StoreVisit sv = new StoreVisit(elements);\n            data.add(sv);\n          }\n          return data;\n        }\n```", "```java\n        private Integer getMaxSale(List<StoreVisit> data){\n          return data.stream()\n                     .mapToInt(StoreVisit::getSales)\n                     .max()\n                     .getAsInt();\n        }\n```", "```java\n        GridPane gridPane = new GridPane();\n        gridPane.setAlignment(Pos.CENTER);\n        gridPane.setHgap(10);\n        gridPane.setVgap(10);\n        gridPane.setPadding(new Insets(25, 25, 25, 25));\n```", "```java\n        final NumberAxis xAxis = new NumberAxis();\n        final NumberAxis yAxis = new NumberAxis();\n        xAxis.setLabel(\"Hour\");\n        yAxis.setLabel(\"Visits\");\n```", "```java\n        final BubbleChart<Number,Number> bubbleChart = \n                          new BubbleChart<>(xAxis,yAxis);\n```", "```java\n        List<StoreVisit> data = getData();\n        Integer maxSale = getMaxSale(data);\n        XYChart.Series<Number,Number> series = \n                       new XYChart.Series<>();\n        series.setName(\"Store Visits\");\n        data.forEach(sv -> {\n          series.getData().add(\n            new XYChart.Data<Number, Number>(\n              sv.hour, sv.visits, (sv.sales/(maxSale * 1d)) * 2\n            )\n          );\n        });\n```", "```java\n        bubbleChart.getData().add(series);\n        gridPane.add(bubbleChart, 1, 1);\n```", "```java\n        Scene scene = new Scene(gridPane, 600, 400);\n        stage.setTitle(\"Bubble Charts\");\n        stage.setScene(scene);\n        stage.show();\n```", "```java\nNZ,0.2,0\nNZ,20.3,120\nNZ,30.6,158\nNZ,40.5,204\n```", "```java\n        private Map<String, List<FallOfWicket>> getFallOfWickets() \n                throws IOException{\n          Scanner reader = new Scanner(getClass()\n                           .getModule()\n                           .getResourceAsStream(\"com/packt/wickets\")\n          );\n          Map<String, List<FallOfWicket>> data = new HashMap<>();\n          while(reader.hasNext()){\n            String line = reader.nextLine();\n            String[] elements = line.split(\",\");\n            String country = elements[0];\n            if ( !data.containsKey(country)){\n              data.put(country, new ArrayList<FallOfWicket>());\n            }\n            data.get(country).add(new FallOfWicket(elements));\n          }\n          return data;\n        }\n```", "```java\n        private XYChart.Series<Number, Number> getSeries(\n          List<FallOfWicket> data, String seriesName\n        ){\n          XYChart.Series<Number,Number> series = new XYChart.Series<>();\n          series.setName(seriesName);\n          data.forEach(s -> {\n            series.getData().add(\n              new XYChart.Data<Number, Number>(s.over, s.score)\n            );\n          });\n          return series;\n        }\n```", "```java\n        GridPane gridPane = new GridPane();\n        gridPane.setAlignment(Pos.CENTER);\n        gridPane.setHgap(10);\n        gridPane.setVgap(10);\n        gridPane.setPadding(new Insets(25, 25, 25, 25));\n```", "```java\n        Map<String, List<FallOfWicket>> fow = getFallOfWickets();\n```", "```java\n        final NumberAxis xAxis = new NumberAxis();\n        final NumberAxis yAxis = new NumberAxis();\n        xAxis.setLabel(\"Age\");\n        yAxis.setLabel(\"Marks\");\n        final ScatterChart<Number,Number> scatterChart = \n                           new ScatterChart<>(xAxis,yAxis);\n```", "```java\n        scatterChart.getData().add(getSeries(fow.get(\"NZ\"), \"NZ\"));\n        scatterChart.getData().add(getSeries(fow.get(\"IND\"), \"IND\"));\n```", "```java\n        gridPane.add(scatterChart, 1, 1);\n        Scene scene = new Scene(gridPane, 600, 400);\n```", "```java\n        stage.setTitle(\"Bubble Charts\");\n        stage.setScene(scene);\n        stage.show();\n```", "```java\n        public static void main(String[] args) {\n          Application.launch(args);\n        }\n```", "```java\nXYChart.Series<Number,Number> series  = new XYChart.Series<>();\nseries.getData().add(new XYChart.Data<Number, Number>(xValue, yValue));\n```", "```java\n        public class BrowserDemo extends Application{\n          public static void main(String[] args) {\n            Application.launch(args);\n          }\n          @Override\n          public void start(Stage stage) {\n            //this will have all the JavaFX related code\n          }\n        }\n```", "```java\n        WebView webView = new WebView();\n```", "```java\n        WebEngine webEngine = webView.getEngine();\n        webEngine.load(\"http://www.google.com/\");\n```", "```java\n        TextField webAddress = new TextField(\"http://www.google.com/\");\n```", "```java\n        webEngine.getLoadWorker().stateProperty().addListener(\n          new ChangeListener<State>() {\n            public void changed(ObservableValue ov, \n                                State oldState, State newState) {\n              if (newState == State.SUCCEEDED) {\n                stage.setTitle(webEngine.getTitle());\n                webAddress.setText(webEngine.getLocation());\n              }\n            }\n          }\n        );\n```", "```java\n        Button goButton = new Button(\"Go\");\n        goButton.setOnAction((event) -> {\n          String url = webAddress.getText();\n          if ( url != null && url.length() > 0){\n            webEngine.load(url);\n          }\n        });\n```", "```java\n        Button prevButton = new Button(\"Prev\");\n        prevButton.setOnAction(e -> {\n          webEngine.executeScript(\"history.back()\");\n        });\n```", "```java\n        Button nextButton = new Button(\"Next\");\n        nextButton.setOnAction(e -> {\n          WebHistory wh = webEngine.getHistory();\n          Integer historySize = wh.getEntries().size();\n          Integer currentIndex = wh.getCurrentIndex();\n          if ( currentIndex < (historySize - 1)){\n            wh.go(1);\n          }\n        });\n```", "```java\n        Button reloadButton = new Button(\"Refresh\");\n        reloadButton.setOnAction(e -> {\n          webEngine.reload();\n        });\n```", "```java\n        HBox addressBar = new HBox(10);\n        addressBar.setPadding(new Insets(10, 5, 10, 5));\n        addressBar.setHgrow(webAddress, Priority.ALWAYS);\n        addressBar.getChildren().addAll(\n          prevButton, nextButton, reloadButton, webAddress, goButton\n        );\n```", "```java\n        Label websiteLoadingStatus = new Label();\n        webEngine.getLoadWorker().workDoneProperty().addListener(\n                            new ChangeListener<Number>(){\n          public void changed(ObservableValue ov, Number oldState,\n                              Number newState) {\n            if (newState.doubleValue() != 100.0){\n              websiteLoadingStatus.setText(\"Loading \" + \n              webAddress.getText());\n            }else{\n              websiteLoadingStatus.setText(\"Done\");\n            }\n          }\n        });\n```", "```java\n        VBox root = new VBox();\n        root.getChildren().addAll(\n          addressBar, webView, websiteLoadingStatus\n        );\n```", "```java\n        Scene scene = new Scene(root);\n```", "```java\n        Rectangle2D primaryScreenBounds = \n                    Screen.getPrimary().getVisualBounds();\n        stage.setTitle(\"Web Browser\");\n        stage.setScene(scene);\n        stage.setX(primaryScreenBounds.getMinX());\n        stage.setY(primaryScreenBounds.getMinY());\n        stage.setWidth(primaryScreenBounds.getWidth());\n        stage.setHeight(primaryScreenBounds.getHeight());\n        stage.show();\n```", "```java\nmodule gui{\n  requires javafx.controls;\n  requires javafx.web;\n  opens com.packt;\n}\n```", "```java\nwebEngine.getLoadWorker().stateProperty().addListener( \n  new ChangeListener<State>() {\n    public void changed(ObservableValue ov, \n      State oldState, State newState) {\n        //event handler code here\n    }\n  }\n);\n\nwebEngine.getLoadWorker().workDoneProperty().addListener(\n  new ChangeListener<Number>(){\n    public void changed(ObservableValue ov, \n      Number oldState, Number newState) {\n        //event handler code here\n    }\n  }\n);\n```", "```java\n        public class EmbedAudioVideoDemo extends Application{\n          public static void main(String[] args) {\n            Application.launch(args);\n          }\n          @Override\n          public void start(Stage stage) {\n            //this will have all the JavaFX related code\n          }\n        }\n```", "```java\n        File file = new File(\"sample_video1.mp4\");\n        Media media = new Media(file.toURI().toString());\n```", "```java\n        MediaPlayer mediaPlayer = new MediaPlayer(media);\n```", "```java\n        mediaPlayer.statusProperty().addListener(\n                    new ChangeListener<Status>() {\n          public void changed(ObservableValue ov, \n                              Status oldStatus, Status newStatus) {\n            System.out.println(oldStatus +\"->\" + newStatus);\n          }\n        });\n```", "```java\n        MediaView mediaView = new MediaView(mediaPlayer);\n```", "```java\n        mediaView.setFitWidth(350);\n        mediaView.setFitHeight(350); \n```", "```java\n        Button pauseB = new Button(\"Pause\");\n        pauseB.setOnAction(e -> {\n          mediaPlayer.pause();\n        });\n\n        Button playB = new Button(\"Play\");\n        playB.setOnAction(e -> {\n          mediaPlayer.play();\n        });\n\n        Button stopB = new Button(\"Stop\");\n        stopB.setOnAction(e -> {\n          mediaPlayer.stop();\n        });\n```", "```java\n        HBox controlsBox = new HBox(10);\n        controlsBox.getChildren().addAll(pauseB, playB, stopB);\n```", "```java\n        VBox vbox = new VBox();\n        vbox.getChildren().addAll(mediaView, controlsBox);\n```", "```java\n        Scene scene = new Scene(vbox);\n        stage.setScene(scene);\n        // Name and display the Stage.\n        stage.setTitle(\"Media Demo\");\n```", "```java\n        stage.setWidth(400);\n        stage.setHeight(400);\n        stage.show();\n```", "```java\nmodule gui{\n  requires javafx.controls;\n  requires javafx.media;\n  opens com.packt;\n}\n```", "```java\nFile file = new File(\"sample_video1.mp4\");\nMedia media = new Media(file.toURI().toString());\n```", "```java\nMediaPlayer mediaPlayer = new MediaPlayer(media);\n```", "```java\nMediaView mediaView = new MediaView(mediaPlayer);\n```", "```java\n        public class EffectsDemo extends Application{\n          public static void main(String[] args) {\n            Application.launch(args);\n          }\n          @Override\n          public void start(Stage stage) {\n            //code added here in next steps\n          }\n        }\n```", "```java\n        GridPane gridPane = new GridPane();\n        gridPane.setAlignment(Pos.CENTER);\n        gridPane.setHgap(10);\n        gridPane.setVgap(10);\n        gridPane.setPadding(new Insets(25, 25, 25, 25));\n```", "```java\n        Rectangle r1 = new Rectangle(100,25, Color.BLUE);\n        Rectangle r2 = new Rectangle(100,25, Color.RED);\n        Rectangle r3 = new Rectangle(100,25, Color.ORANGE);\n```", "```java\n        r1.setEffect(new BoxBlur(10,10,3));\n        r2.setEffect(new MotionBlur(90, 15.0));\n        r3.setEffect(new GaussianBlur(15.0));\n```", "```java\n        gridPane.add(r1,1,1);\n        gridPane.add(r2,2,1);\n        gridPane.add(r3,3,1);\n```", "```java\n        Circle c1 = new Circle(20, Color.BLUE);\n        Circle c2 = new Circle(20, Color.RED);\n        Circle c3 = new Circle(20, Color.GREEN);\n```", "```java\n        c1.setEffect(new DropShadow(0, 4.0, 0, Color.YELLOW));\n        c2.setEffect(new InnerShadow(0, 4.0, 4.0, Color.ORANGE));\n```", "```java\n        gridPane.add(c1,1,2);\n        gridPane.add(c2,2,2);\n        gridPane.add(c3,3,2);\n```", "```java\n        Text t = new Text(\"Reflection Sample\");\n        t.setFont(Font.font(\"Arial\", FontWeight.BOLD, 20));\n        t.setFill(Color.BLUE);\n```", "```java\n        Reflection reflection = new Reflection();\n        reflection.setFraction(0.8);\n        t.setEffect(reflection);\n```", "```java\n        gridPane.add(t, 1, 3, 3, 1);\n```", "```java\n        Scene scene = new Scene(gridPane, 500, 300);\n```", "```java\n        stage.setScene(scene);\n        stage.setTitle(\"Effects Demo\");\n        stage.show();\n```", "```java\nBoxBlur boxBlur = new BoxBlur(10,10,3);\n```", "```java\nMotionBlur motionBlur = new MotionBlur(90, 15.0);\n```", "```java\nGaussianBlur gb = new GaussianBlur(15.0);\n```", "```java\nDropShadow dropShadow = new DropShadow(0, 4.0, 0, Color.YELLOW);\nInnerShadow innerShadow = new InnerShadow(0, 4.0, 4.0, Color.ORANGE);\n```", "```java\nReflection reflection = new Reflection();\nreflection.setFraction(0.8);\n```", "```java\n         Iterator iterator = ImageIO.getImageReadersByFormatName(\"tiff\");\n```", "```java\n         ImageReader reader = (ImageReader) iterator.next();\n```", "```java\n        try(ImageInputStream is = \n                 new FileImageInputStream(new File(\"sample.tif\"))) {\n          //image reading code here.\n        } catch (Exception ex){\n          //exception handling\n        }\n```", "```java\n         reader.setInput(is, false, true);\n```", "```java\n         System.out.println(\"Number of Images: \" + \n                            reader.getNumImages(true));\n         System.out.println(\"Height: \" + reader.getHeight(0));\n         System.out.println(\"Width: \" + reader.getWidth(0));\n         System.out.println(reader.getFormatName());\n```"]