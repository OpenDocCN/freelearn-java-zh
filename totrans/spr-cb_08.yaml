- en: Chapter 8. Running Batch Jobs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring Spring Batch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a job
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing a job from the command line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing a job from a controller method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using job parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing a system command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scheduling a job
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a read/process/write step
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading an XML file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating a CSV file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading from a database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit testing batch jobs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **batch job** is a task executed outside the normal web application workflow
    (receiving an HTTP request and sending back an HTTP response). It can be executed
    by the web server as a separate process. It can also be launched directly from
    the command line.
  prefs: []
  type: TYPE_NORMAL
- en: 'Typically, a batch job either:'
  prefs: []
  type: TYPE_NORMAL
- en: Imports or exports data at a scheduled time. For example, importing a CSV file
    in the database every night.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executes some code asynchronously to avoid long page loads. For example, processing
    a video uploaded by the user or generating a big file that will be downloaded
    by the user.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Spring Batch provides a structure to define, run, and monitor batch jobs. A
    **Job** is defined as a sequence of steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction](img/5807OS_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A **Job Instance** is the combination of a **job** and some **parameters**.
    For example, the day's date and the name of the file to process. A **Job Execution**
    is created for a job instance. If the job execution fails, another job execution
    can be created for the same job instance.
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction](img/5807OS_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'A **Job Execution** generates a **Step Execution** for each step of the job.
    If a step execution fails, another step execution can be created for that same
    step:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction](img/5807OS_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Installing and configuring Spring Batch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring automatically saves some metadata (start time, end time, and status)
    about jobs and their steps in a job repository, which consists of several database
    tables. In this recipe, we'll create these tables. We will also create a Spring
    configuration class dedicated to batch jobs.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to install and configure Spring Batch:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the Maven dependencies for Spring Batch in `pom.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the Maven dependencies for Spring JDBC and Spring Transaction in `pom.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the Maven dependency for your database in `pom.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the database, create the tables for Spring Batch's job repository. The SQL
    code can be found inside the spring-batch-core dependency in the `org.springframework.batch.core`
    package. It's also available online at [https://github.com/spring-projects/spring-batch/tree/master/spring-batch-core/src/main/resources/org/springframework/batch/core](https://github.com/spring-projects/spring-batch/tree/master/spring-batch-core/src/main/resources/org/springframework/batch/core).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a Java package for your Spring Batch classes. For example, `com.spring_cookbook.batch`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a Spring configuration class for Spring Batch with the `@EnableBatchProcessing`
    annotation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `DataSource` bean with the database connection details to the configuration
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the configuration class, the `@EnableBatchProcessing` annotation enables
    Spring Batch and provides reasonable defaults for batch jobs, which can be overridden
    if necessary (the default `JobLauncher` object, the default `TransactionManager`
    object, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a job
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'll create a job that will simply execute some Java code. It will be a job
    with only one step. The step will be a `Tasklet` object (a single task, as opposed
    to a read-process-write step, which we'll cover later). We will execute this job
    in two different ways in the next two recipes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a `Tasklet` class, which you will use to define a step and the job:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `Task1` class implementing `Tasklet`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Task1` class, add an `execute()` method with the code to be executed
    for the job:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the configuration class, add an autowired `JobBuilderFactory` attribute
    and an autowired `StepBuilderFactory` attribute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the `step1` bean, which will execute our code, from the `Task1` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the `job1` bean that will execute `step1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We defined a `job1` job executing the `step1` step, which will call the `execute()`
    method in the `Task1` class.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To execute more than one step, use the `next()` method in the job definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Executing a job from the command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A simple and robust way to execute a job is to use the command-line interface.
    This allows you to use a standard `cron` job (use the `AT` command on Windows)
    to schedule it, so that the job will be executed even if the web application is
    down. It's also convenient for testing and debugging a job.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll use the job defined in the *Creating a job* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to execute the job from the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Declare the `maven-assembly-plugin` in `pom.xml` (under `build`/`plugins`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Generate a JAR file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute the job by running the JAR file generated in the `target` folder, with
    the class where the job is defined (`BatchConfig`) and the job name (`job1`) as
    arguments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The console output should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A job can be executed only once for a given set of parameters. To be able to
    execute the job again, just add a parameter using the `parameterName=parameterValue`
    syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, the console output will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'When testing and debugging the job, you can use a Unix timestamp to automatically
    get a different parameter value each time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'A job can be also be executed directly without having to generate a JAR file
    first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Executing a job from a controller method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's convenient to launch a job from a controller method when that job is triggered
    by a user action. For example, launching a job to process a video just uploaded
    by the user.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll use the job defined in the *Creating a job* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to execute the job from a controller method:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the Spring Batch configuration class to the `getServletConfigClasses()`method
    in your class extending `AbstractAnnotationConfigDispatcherServletInitializer`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In your controller class, add a `JobLauncher` attribute and `Job` attribute
    both autowired:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the controller method, define the job parameters and launch the job:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We declared `BatchConfig` in the `ServletInitializer` class to make our Spring
    Batch configuration available to the controller methods.
  prefs: []
  type: TYPE_NORMAL
- en: In the controller method, the job parameters are the same as those in the command
    line.
  prefs: []
  type: TYPE_NORMAL
- en: Using job parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll learn how to retrieve and use a job parameter value in
    `Tasklet`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll use the job defined in the *Creating a job* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to use the job parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Task1` class, add `@StepScope` to the `execute()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `execute()` method, retrieve a job parameter value by using the job
    parameter name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the job with a parameter named `test`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `String` test will contain the `hello` parameter value passed on the command
    line. This recipe will also work if the job is launched from a controller method.
  prefs: []
  type: TYPE_NORMAL
- en: Executing a system command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A step can consist of just an execution of a system command. Spring Batch provides
    a convenient class for this, `SystemCommandTasklet`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll use the job defined in the *Creating a job* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Spring Batch''s configuration file, add a `SystemCommandTasklet` bean. Declare
    the system command to be executed (here, we used the touch Unix command to create
    an empty file), the directory to execute it from, and the maximum time allowed
    for its execution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `SystemCommandTasklet` class will execute a command from the working directory
    and kill the process if it exceeds the timeout value.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For a more advanced use of system commands (for example, to get the output of
    the system command) extend `SystemCommandTasklet` and override its `execute()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: Scheduling a job
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some jobs need to be executed regularly-every night, every hour, and so on.
    Spring makes this easy with the `@Scheduled` annotation.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use the job defined in the *Creating a job* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to schedule the job:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If it''s not done already, add the Spring Batch configuration class to the
    `getServletConfigClasses()`method in your class extending `AbstractAnnotationConfigDispatcherServletInitializer`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `@EnableScheduling` annotation to the Spring Batch configuration class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add an autowired `JobLauncher` field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a method annotated with `@Scheduled` with a `fixedDelay` attribute in ms:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In that method, run the job:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The job will start getting executed again and again with a 10-second (10000
    ms) interval as soon as the web application is deployed. The `job` parameter with
    the `new Date()`value is used to set a different parameter value for each launch.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `fixedDelay` attribute sets a delay of 10 seconds after a job has finished
    its execution before launching the next one. To actually run a job every 10 seconds,
    use `fixedRate`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s also possible to use a regular `cron` expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Creating a read/process/write step
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A read/process/write step is a common type of step where some data is read
    somewhere, processed in some way, and finally, saved somewhere else. In this recipe,
    we''ll read a CSV file of users, increment their age, and save the modified users
    in a database as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a read/process/write step](img/5807OS_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is our CSV file of users, `input_data.txt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'For each line of the CSV file, we''ll create a `User` object. So, make sure
    that the `User` class exists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Each `User` object will be saved in the database. Make sure that the `user`
    table exists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to process the CSV file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Spring Batch configuration class, add a method returning a `LineMapper`
    object, which generates an `User` object from a line in the CSV file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `reader()` method returning a `FlatFileItemReader` object, which will
    read a CSV file (whose path is the file path of the CSV file), and use the previously
    defined `LineMapper` object to generate users:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a class implementing `ItemProcessor` with a `process()` method that
    takes a `User` object, increments its `age`, and returns the modified `User` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Back in the Batch configuration class, define a `UserProcessorIncrementAge`
    bean:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a `Datasource` bean with the database connection details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `writer()` bean that will take a `User` object and save it in the database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `JobBuilderFactory` field and a `StepBuilderFactory` field, both autowired:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a step calling our `reader()`, `processor()`, and `writer()` methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a job with the previous defined step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute the job with the path to the CSV file as parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the `reader()` method, we used `FlatFileItemReader`, which is a class provided
    by Spring Batch for reading CSV files. Each line is processed by `LineMapper`,
    which takes a line and returns an object. In this recipe, we used `DefaultLineMapper`,
    which converts a line to `Fieldset` (using `DelimitedLineTokenizer`) and then
    saves each field in an object (all of this is done behind the scenes by `BeanWrapperFieldSetMapper`).
  prefs: []
  type: TYPE_NORMAL
- en: In the `writer()` method, we supplied the SQL query, which will create the user
    in the database. The values come automatically from the `User` object, thanks
    to the `BeanPropertyItemSqlParameterSourceProvider` class. For example, `:firstName`
    will get its value from the `User` object's `firstName` field.
  prefs: []
  type: TYPE_NORMAL
- en: In the `step1()` method, we declared the reader, processor, and writer methods.
    The `chunk()` method allows the data to be processed and saved by groups (in chunks).
    This is more efficient for large sets of data.
  prefs: []
  type: TYPE_NORMAL
- en: The `@StepScope` annotation is necessary for the `reader()` and `writer()` methods,
    to allow them to access the job parameters. Otherwise, they are executed too early
    in the job initialization process.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The reader-processor-writer separation makes it easy to swap one component with
    another. For example, if our CSV file becomes an XML file one day, we will only
    have to update the `reader()` method. In the next recipes, we will cover other
    types of readers and writers.
  prefs: []
  type: TYPE_NORMAL
- en: A processor is not required in a read/process/write job, so skip it if you don't
    need it. It also doesn't need to return an object from the same class. For example,
    it could take a `UserCSV` object, which would be a direct mapping of a line of
    the CSV file and return an actual `User` object. This would allow you to keep
    the CSV reader straightforward and separate the code converting its data to an
    actual `User` object, your real domain object, making that code easier to understand
    and maintain.
  prefs: []
  type: TYPE_NORMAL
- en: Our reader and writer code is short enough, so we will put it directly in the
    Spring Batch configuration. However, it could be moved to separate classes.
  prefs: []
  type: TYPE_NORMAL
- en: Reading an XML file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll learn to read an XML file as part of a read/process/write
    step.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll read this XML file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'For each person''s record in the XML file, a `User` object will be created.
    Make sure that the `User` class exists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To parse the XML file, use `StaxEventItemReader`, which is provided by Spring
    Batch. To generate `User` objects, use `XStreamMarshaller`, a class from the Spring
    Object/XML Mapping project. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the Maven dependency for Spring Object/XML Mapping in `pom.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `reader()` method returning a `StaxEventItemReader` object to read the
    XML file and generate `User` objects from its contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute the job with the path to the XML file as a parameter. For example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`XStreamMarshaller` generates a `User` automatically for each person''s record.
    This is configured with the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Note that the `User` fields have to match the XML fields (`firstName` and `age`).
  prefs: []
  type: TYPE_NORMAL
- en: Generating a CSV file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Write a CSV file as part of a read/process/write step.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will generate a CSV file from `User` objects. Make sure that the `User`
    class exists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use `FlatFileItemWriter` provided by Spring Batch:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a `writer()` method that will get the fields of a `User` object, build
    a comma-separated line with them, and write the line to a CSV file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute the job with the path to the output CSV file as a parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The resulting CSV file will look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`BeanWrapperFieldExtractor` extracts the declared fields (`firstName` and `age`)
    from the `User` object. `DelimitedLineAggregator` builds a comma-separated line
    with them. `FlatFileItemWriter` writes the line to the file.'
  prefs: []
  type: TYPE_NORMAL
- en: Reading from a database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows you how to read data from a database as part of a read/process/write
    step.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Each user will be read from the database. Make sure that the `user` database
    table exists with some data in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'For each user row in the database, we''ll create a `User` object. Make sure
    that the `User` class exists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Make sure that the `Datasource` bean is defined with the database connection
    information.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Add a `reader()` method returning `JdbcCursorItemReader`-a class provided by
    Spring Batch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A SQL query is executed to get users from the database. `BeanPropertyRowMapper`
    generates `User` objects from the result. Note that the SQL result''s columns
    (`first_name`, `age`) have to match the User fields (`firstName` and `age`). If
    the database table has different column names, use SQL aliases to ensure that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Unit testing batch jobs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring Batch provides different ways to test a batch job; the whole job, only
    one step, or just a `Tasklet` class can be tested.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to unit test batch jobs:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the Maven dependency for `spring-batch-test` in `pom.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the unit test class, if using JUnit, load the Spring Batch configuration
    class like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If using TestNG, load the Spring Batch configuration class as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add an autowired `JobLauncherTestUtils` field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This is how you can test an entire job, check its exit status, and the number
    of steps that were executed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This is how you can test a specific step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This is how you can test Tasklet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Spring Batch configuration class has to be loaded, so that the test methods
    can access the job and its steps. `JobLauncherTestUtils` is a helper class that
    is used to easily execute a job or one of its steps.
  prefs: []
  type: TYPE_NORMAL
