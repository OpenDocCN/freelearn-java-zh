- en: Chapter 6. JSON Processing with JSON-P
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**JSON**, or the **JavaScript Object Notation**, is a human-readable data interchange
    format. As its name implies, JSON is derived from JavaScript. Java EE 7 introduced
    JSON-P, the Java API for JSON Processing as **Java Specification Request** (**JSR**)
    353.'
  prefs: []
  type: TYPE_NORMAL
- en: Traditionally, XML has been the format of choice for data interchange between
    disparate systems. While XML is undoubtedly very popular, JSON has been gaining
    ground in recent years as an arguably simpler format for data exchange. Several
    Java libraries exist for parsing and generating JSON data from Java code. Java
    EE standardized this functionality via the Java API for JSON Processing.
  prefs: []
  type: TYPE_NORMAL
- en: JSON-P includes two APIs for processing JSON—the Model API and the Streaming
    API; both of these APIs will be covered in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The JSON-P Model API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating JSON data with the Model API
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Parsing JSON data with the Model API
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The JSON-P Streaming API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating JSON data with the Streaming API
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Parsing JSON data with the Streaming API
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The JSON-P Model API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The JSON-P Model API allows us to generate a preloaded, fully traversable, in-memory
    representation of a JSON object. This API is more flexible than the Streaming
    API discussed in the *The JSON-P Streaming API* section. However, the JSON-P Model
    API is slower and requires more memory, which can be a concern when handling large
    volumes of data.
  prefs: []
  type: TYPE_NORMAL
- en: Generating JSON data with the Model API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At the heart of the JSON-P Model API is the `JsonObjectBuilder` class. This
    class has several overloaded `add()` methods that can be used to add properties
    and their corresponding values to the generated JSON data.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code sample illustrates how to generate JSON data using the Model
    API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Our example is a CDI named bean that corresponds to a larger JSF application;
    the other parts of the application are not shown since they are not relevant to
    the discussion. The complete sample application is included as part of this book's
    example code download.
  prefs: []
  type: TYPE_NORMAL
- en: As can be seen in the previous example, we generate an instance of `JsonObject`
    by invoking the `add()` method on `JsonObjectBuilder`. In our example, we see
    how we can add `String` values to our `JsonObject` by invoking the `add()` method
    on `JsonObjectBuilder`. The first parameter of the `add()` method is the property
    name of the generated JSON object, and the second parameter corresponds to the
    value of the said property. The return value of the `add()` method is another
    instance of `JsonObjectBuilder`; therefore, invocations to the `add()` method
    can be chained as shown in the example.
  prefs: []
  type: TYPE_NORMAL
- en: Once we have added all the desired properties, we need to invoke the `build()`
    method of `JsonObjectBuilder`, which returns an instance of a class implementing
    the `JsonObject` interface.
  prefs: []
  type: TYPE_NORMAL
- en: In many cases, we may want to generate a `String` representation of the JSON
    object we created so that it can be processed by another process or service. We
    can do this by creating an instance of a class implementing the `JsonWriter` interface;
    invoking the static `createWriter()` method of the `Json` class, and passing an
    instance of `StringWriter` as its sole parameter. Once we have an instance of
    the `JsonWriter` implementation, we need to invoke its `writeObject()` method,
    passing our `JsonObject` instance as its sole parameter.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, our `StringWriter` instance will have the `String` representation
    of our JSON object as its value. So, invoking its `toString()` method will return
    a `String` value containing our JSON object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our specific example will generate a JSON string that looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Although we added only `String` objects to our JSON object in our example, we
    are not limited to this type of value. `JsonObjectBuilder` has several overloaded
    versions of its `add()` method, allowing us to add several different types of
    values to our JSON objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table summarizes all of the available versions of the `add()`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '| JsonObjectBuilder methods | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `add(String name, BigDecimal value)` | This method adds a `BigDecimal` value
    to our JSON object. |'
  prefs: []
  type: TYPE_TB
- en: '| `add(String name, BigInteger value)` | This method adds a `BigInteger` value
    to our JSON object. |'
  prefs: []
  type: TYPE_TB
- en: '| `add(String name, JsonArrayBuilder value)` | This method adds an array to
    our JSON object. A `JsonArrayBuilder` implementation allows us to create JSON
    arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| `add(String name, JsonObjectBuilder value)` | This method adds another JSON
    object to our original JSON object (the property values for JSON objects can be
    other JSON objects). The added `JsonObject` implementation is built from the provided
    `JsonObjectBuilder` parameter. |'
  prefs: []
  type: TYPE_TB
- en: '| `add(String name, JsonValue value)` | This method adds another JSON object
    to our original JSON object (the property values for JSON objects can be other
    JSON objects). |'
  prefs: []
  type: TYPE_TB
- en: '| `add(String name, String value)` | This method adds a `String` value to our
    JSON object. |'
  prefs: []
  type: TYPE_TB
- en: '| `add(String name, boolean value)` | This method adds a `boolean` value to
    our JSON object. |'
  prefs: []
  type: TYPE_TB
- en: '| `add(String name, double value)` | This method adds a `double` value to our
    JSON object. |'
  prefs: []
  type: TYPE_TB
- en: '| `add(String name, int value)` | This method adds an `int` value to our JSON
    object. |'
  prefs: []
  type: TYPE_TB
- en: '| `add(String name, long value)` | This method adds a `long` value to our JSON
    object. |'
  prefs: []
  type: TYPE_TB
- en: In all cases, the first parameter of the `add()` method corresponds to the name
    of the property in our JSON object and the second parameter corresponds to the
    value of the property.
  prefs: []
  type: TYPE_NORMAL
- en: Parsing JSON data with the Model API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the last section, we saw how to generate JSON data from our Java code with
    the Model API. In this section, we will see how we can read and parse the existing
    JSON data. The following code sample illustrates how to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: To parse an existing JSON string, we need to create a `StringReader` object,
    passing a `String` object containing the JSON data to be parsed as a parameter.
    We then pass the resulting `StringReader` instance to the static `createReader()`
    method of the `Json` class. This method invocation will return an instance of
    `JsonReader`. We can then obtain an instance of `JsonObject` by invoking the `readObject()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: In our example, we used the `getString()` method to obtain the values for all
    the properties in our JSON object; the first and only argument for this method
    is the name of the property we wish to retrieve. Unsurprisingly, the return value
    is the value of the property.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to the `getString()` method, there are several other similar methods
    to obtain the values of other types. The following table summarizes these methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '| JsonObject methods | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `get(Object key)` | This method returns an instance of a class implementing
    the `JsonValue` interface. |'
  prefs: []
  type: TYPE_TB
- en: '| `getBoolean(String name)` | This method returns a `boolean` value corresponding
    to the given key. |'
  prefs: []
  type: TYPE_TB
- en: '| `getInt(String name)` | This method returns an `int` value corresponding
    to the given key. |'
  prefs: []
  type: TYPE_TB
- en: '| `getJsonArray(String name)` | This method returns the instance of a class
    implementing the `JsonArray` interface that corresponds to the given key. |'
  prefs: []
  type: TYPE_TB
- en: '| `getJsonNumber(String name)` | This method returns the instance of a class
    implementing the `JsonNumber` interface that corresponds to the given key. |'
  prefs: []
  type: TYPE_TB
- en: '| `getJsonObject(String name)` | This method returns the instance of a class
    implementing the `JsonObject` interface that corresponds to the given key. |'
  prefs: []
  type: TYPE_TB
- en: '| `getJsonString(String name)` | This method returns the instance of a class
    implementing the `JsonString` interface that corresponds to the given key. |'
  prefs: []
  type: TYPE_TB
- en: '| `getString(String Name)` | This method returns a `String` corresponding to
    the given key. |'
  prefs: []
  type: TYPE_TB
- en: In all cases, the `String` parameter of the method corresponds to the key name
    and the return value is the JSON property value that we wish to retrieve.
  prefs: []
  type: TYPE_NORMAL
- en: The JSON-P Streaming API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The JSON-P Streaming API allows the sequential reading of a JSON object from
    a stream (a subclass of `java.io.OutputStream`, or a subclass of `java.io.Writer`).
    It is faster and more memory efficient than the Model API. However, the tradeoff
    is that it is more limited, since the JSON data needs to be read sequentially
    and we cannot access specific JSON properties directly, the way the Model API
    allows.
  prefs: []
  type: TYPE_NORMAL
- en: Generating JSON data with the Streaming API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The JSON Streaming API has a `JsonGenerator` class that we can use to generate
    JSON data and write it to a stream. This class has several overloaded `write()`
    methods which can be used to add properties and their corresponding values to
    the generated JSON data.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code sample illustrates how to generate JSON data using the Streaming
    API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We create an instance of `JsonGenerator` by invoking the `createGenerator()`
    static method of the `Json` class. The JSON-P Streaming API provides two overloaded
    versions of the `createGenerator()` method; one takes an instance of a class that
    extends `java.io.Writer` (such as `StringWriter`, which we used in our example),
    and the other takes an instance of a class that extends `java.io.OutputStream`.
  prefs: []
  type: TYPE_NORMAL
- en: Before we can start adding properties to the generated JSON stream, we need
    to invoke the `writeStartObject()` method on `JsonGenerator`. This method writes
    the JSON start object character (represented by an opening curly brace (`{`) in
    JSON strings) and returns another instance of `JsonGenerator`, allowing us to
    chain the `write()` invocations to add properties to our JSON stream.
  prefs: []
  type: TYPE_NORMAL
- en: The `write()` method in `JsonGenerator` allows us to add properties to the JSON
    stream that we generate. Its first parameter is a `String` corresponding to the
    name of the property we add, and the second parameter is the value of the property.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our example, we are adding only the `String` values to the JSON stream that
    we create; however, we are not limited to `Strings`. The JSON-P Streaming API
    provides several overloaded `write()` methods that allow us to add several different
    types of data to our JSON stream. The following table summarizes all of the available
    versions of the `write()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '| JsonGenerator write() methods | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `write(String name, BigDecimal value)` | This method writes a `BigDecimal`
    value to our JSON stream. |'
  prefs: []
  type: TYPE_TB
- en: '| `write(String name, BigInteger value)` | This method writes a `BigInteger`
    value to our JSON stream. |'
  prefs: []
  type: TYPE_TB
- en: '| `write(String name, JsonValue value)` | This method writes a JSON object
    to our JSON stream (the property values for JSON streams can be other JSON objects).
    |'
  prefs: []
  type: TYPE_TB
- en: '| `write(String name, String value)` | This method writes a `String` value
    to our JSON stream. |'
  prefs: []
  type: TYPE_TB
- en: '| `write(String name, boolean value)` | This method writes a `boolean` value
    to our JSON stream. |'
  prefs: []
  type: TYPE_TB
- en: '| `write(String name, double value)` | This method writes a `double` value
    to our JSON stream. |'
  prefs: []
  type: TYPE_TB
- en: '| `write(String name, int value)` | This method writes an `int` value to our
    JSON stream. |'
  prefs: []
  type: TYPE_TB
- en: '| `write(String name, long value)` | This method writes a `long` value to our
    JSON stream. |'
  prefs: []
  type: TYPE_TB
- en: In all cases, the first parameter of the `write()` method corresponds to the
    name of the property we are adding to our JSON stream, and the second parameter
    corresponds to the value of the property.
  prefs: []
  type: TYPE_NORMAL
- en: Once we are done adding properties to our JSON stream, we need to invoke the
    `writeEnd()` method on `JsonGenerator`; this method adds the JSON end object character
    (represented by a closing curly brace (`}`) in JSON strings).
  prefs: []
  type: TYPE_NORMAL
- en: At this point, our stream or reader is populated with the JSON data we generated;
    what we do with it depends on our application logic. In our example, we simply
    invoked the `toString()` method of our `StringReader` class to obtain the `String`
    representation of the JSON data we created.
  prefs: []
  type: TYPE_NORMAL
- en: Parsing JSON data with the Streaming API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the last section, we saw how to generate JSON data from our Java code with
    the Streaming API. In this section, we will see how we can read and parse the
    existing JSON data we receive from a stream. The following code sample illustrates
    how to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The first thing we need to do in order to read JSON data using the Streaming
    API is to create an instance of `JsonParser` by invoking the static `createJsonParser()`
    method on the `Json` class. There are two overloaded versions of the `createJsonParser()`
    method; one takes an instance of a class that extends `java.io.InputStream`, and
    the other takes an instance of a class that extends `java.io.Reader`. In our example,
    we use the latter by passing an instance of `java.io.StringReader`, which is a
    subclass of `java.io.Reader`.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to loop through the JSON data to obtain the data to be parsed.
    We can achieve this by invoking the `hasNext()` method on `JsonParser`, which
    returns `true` if there is more data to be read and returns `false` otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: We then need to read the next piece of data in our stream. The `JsonParser.next()`
    method returns an instance of `JsonParser.Event` that indicates the type of data
    we just read. In our example, we check only for key names (that is, "`firstName`",
    "`lastName`", and "`email`") and the corresponding string values. We can check
    for the type of data we just read by comparing the event returned by `JsonParser.next()`
    against several values defined in the `Event` enum defined in `JsonParser`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table summarizes all of the possible constants that can be returned
    by `JsonParser.next()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '| JsonParser Event constants | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Event.START_OBJECT` | This constant indicates the start of a JSON object.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Event.END_OBJECT` | This constant indicates the end of a JSON object. |'
  prefs: []
  type: TYPE_TB
- en: '| `Event.START_ARRAY` | This constant indicates the start of an array |'
  prefs: []
  type: TYPE_TB
- en: '| `Event.END_ARRAY` | This constant indicates the end of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| `Event.KEY_NAME` | This constant indicates the name of a JSON property that
    was read. We can obtain the key name by invoking `getString()` on `JsonParser`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Event.VALUE_TRUE` | This constant indicates that a `boolean` value of `true`
    was read. |'
  prefs: []
  type: TYPE_TB
- en: '| `Event.VALUE_FALSE` | This constant indicates that a `boolean` value of `false`
    was read. |'
  prefs: []
  type: TYPE_TB
- en: '| `Event.VALUE_NULL` | This constant indicates that a `null` value was read.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Event.VALUE_NUMBER` | This constant indicates that a numeric value was read.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Event.VALUE_STRING` | This constant indicates that a string value was read.
    |'
  prefs: []
  type: TYPE_TB
- en: 'As shown in the example, the `String` values can be retrieved by invoking `getString()`
    on `JsonParser`. Numeric values can be retrieved in several different formats;
    the following table summarizes the methods in `JsonParser` that can be used to
    retrieve numeric values:'
  prefs: []
  type: TYPE_NORMAL
- en: '| JsonParser methods | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `getInt()` | This method retrieves the numeric value as `int`. |'
  prefs: []
  type: TYPE_TB
- en: '| `getLong()` | This method retrieves the numeric value as `long`. |'
  prefs: []
  type: TYPE_TB
- en: '| `getBigDecimal()` | This method retrieves the numeric value as an instance
    of `java.math.BigDecimal`. |'
  prefs: []
  type: TYPE_TB
- en: '`JsonParser` also provides a convenience `isIntegralNumber()` method that returns
    `true` if the numeric value can be safely cast to an `int` or a `long` type.'
  prefs: []
  type: TYPE_NORMAL
- en: What we do with the values we obtain from the stream depends on our application
    logic. In our example, we place them in `Map` and then use the said `Map` to populate
    a Java class.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we covered the Java API for JSON Processing (JSON-P). We covered
    both major JSON-P''s APIs: the Model API and the Streaming API.'
  prefs: []
  type: TYPE_NORMAL
- en: We illustrated how to generate JSON data via JSON-P's Model API, specifically
    the `JsonBuilder` class. We also covered how to parse JSON data via JSON-P's Model
    API via the `JsonReader` class.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, we explained how to generate JSON data via JSON-P's Streaming
    API by employing the `JsonGenerator` class.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we covered how to parse JSON data via JSON-P's Streaming API, specifically
    via the `JsonParser` class.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will cover the Java API for WebSocket.
  prefs: []
  type: TYPE_NORMAL
