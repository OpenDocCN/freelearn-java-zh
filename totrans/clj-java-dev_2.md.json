["```java\njava:\n    lang:\n        String.class\n        ….\n    io:\n        IOException.class\n        …\n    util:\n        List.class\n```", "```java\nlein new app ns-playground\n\n```", "```java\n(ns ns-playground.core\n  (:gen-class))\n\n(defn -main\n\"I don't do a whole lot ... yet.\"\n  [& args]\n  (println \"Hello, World!\"))\n;; Code for src/ns_playground/core.clj\n```", "```java\n(ns ns-playground.hello)\n```", "```java\n(:import java.util.List)\n```", "```java\n(:import [java.util ArrayList HashMap])\n```", "```java\n(:require [some.package :refer [a-function another-function]])\n```", "```java\n(:require [some.package :refer [:all]])\n```", "```java\n(:require [some.package :as s])\n\n;; And then use everything in the package like this:\n\n(s/a-function 5)\n```", "```java\n(:require [some.package :as s :refer [a-function]])\n```", "```java\n(ns ns-playground.hello\n  (:import [java.util Date]))\n\n(def addition +)\n\n(defn current-date []\n\"Returns the current date\"\n  (new Date))\n\n(defn <3 [love & loved-ones]\n\"Creates a sequence of all the {loved-ones} {loved} loves\"\n  (for [loved-one loved-ones]\n    (str love \" love \" loved-one)))\n\n(defn sum-something [something & nums]\n\"Adds something to all the remaining parameters\"\n  (apply addition something nums))\n\n(def sum-one (partial sum-something 1))\n```", "```java\n*ns*\n=> #<Namespace ns-playground.core>\n```", "```java\n(in-ns 'ns-playground.hello)\n=> #<Namespace ns-playground.hello>\n```", "```java\n(str \"Hello\"\"\"\"world\")\n=>\"Hello world\"\n```", "```java\n(for [el [\"element1\"\"element2\"\"element3\"]] el)\n=> (\"element1\"\"element2\"\"element3\")\n\n(for [el [\"element1\"\"element2\"\"element3\"]]\n  (str \"Hello \" el))\n=> (\"Hello element1\"\"Hello element2\"\"Hello element3\")\n```", "```java\n(<3 \"They\"\"tea\")\n=> (\"They love tea\")\n\n(clojure.repl/doc <3)\nns-playground.hello/<3\n([& loved-ones])\n  Creates a sequence of all the {loved-ones} {loved} loves\n```", "```java\nuser=user\ntest=password\nsample=5\n```", "```java\n(require '[clojure.java.io :as io])\n(io/resource \"test.properties\")\n=> #<URL file:/Users/iamedu/Clojure4Java/ns-playground/resources/test.properties>\n(io/input-stream (io/resource \"test.properties\"))\n=> #<BufferedInputStream java.io.BufferedInputStream@2f584e71>\n;; Let's now load it into a properties object\n(import [java.util Properties])\n=> java.util.Properties\n(def props (Properties.)) ;; Don't worry about the weird syntax, we will look it soon.\n=> #'ns-playground.core/props\n(.load props (io/input-stream (io/resource \"test.properties\")))\nprops\n=> {\"user\"\"user\", \"sample\"\"5\", \"test\"\"password\"}\n```", "```java\n(defn read-properties [path]\n  (let [resource (io/resource path)\n        is (io/input-stream resource)\n        props (Properties.)]\n    (.load props is)\n    (.close is)\n    props))\n=> #'ns-playground.core/read-properties\n(read-properties \"test.properties\")\n=> {\"user\"\"user\", \"sample\"\"5\", \"test\"\"password\"}\n```", "```java\n(ns ns-playground.hello\n  (:require [clojure.java.io :as io])\n  (:import [java.util Date Properties]))\n\n(def addition +)\n\n(defn current-date []\n\"Returns the current date\"\n  (new Date))\n\n(defn <3 [love & loved-ones]\n\"Creates a sequence of all the {loved-ones} {loved} loves\"\n  (for [loved-one loved-ones]\n    (str love \" love \" loved-one)))\n\n(defn sum-something [something & nums]\n\"Adds something to all the remaining parameters\"\n  (apply addition something nums))\n\n(defn read-properties [path]\n  (let [resource (io/resource path)\n        is (io/input-stream resource)\n        props (Properties.)]\n    (.load props is)\n    props))\n\n(def sum-one (partial sum-something 1))\n```", "```java\n(ns ns-playground.core-test\n  (:require [clojure.test :refer :all]\n            [ns-playground.core :refer :all]))\n(deftest a-test\n  (testing \"FIXME, I fail.\"\n(is (= 0 1))))\n```", "```java\nlein test\n\n```", "```java\nlein test ns-playground.core-test\n\nlein test :only ns-playground.core-test/a-test\n\nFAIL in (a-test) (core_test.clj:7)\nFIXME, I fail.\nexpected: (= 0 1)\n  actual: (not (= 0 1))\n\nRan 1 tests containing 1 assertions.\n1 failures, 0 errors.\nTests failed.\n```", "```java\n    (ns ns-playground.hello-test\n      (:import [java.util Date])\n      (:require [clojure.test :refer :all]\n                [ns-playground.hello :as hello :refer [<3]]\n                [ns-playground.core :refer :all]))\n\n    (defn- lazy-contains? [col element]\n      (not (empty? (filter #(= element %) col))))\n\n    (deftest a-test\n      (testing \"DONT FIXME, I don't fail.\"\n        (is (= 42 42))))\n\n    (deftest current-date-is-date\n      (testing \"Test that the current date is a date\"\n        (is (instance? Date (hello/current-date)))))\n\n    (deftest check-loving-collection\n      (testing \"Check that I love clojure and you\"\n        (let [loving-seq (<3 \"I\"\"Clojure\"\"you\"\"doggies\"\"chocolate\")]\n          (is (not (lazy-contains? loving-seq \"I love Vogons\")))\n          (is (lazy-contains? loving-seq \"I love Clojure\"))\n          (is (lazy-contains? loving-seq \"I love doggies\"))\n          (is (lazy-contains? loving-seq \"I love chocolate\"))\n          (is (lazy-contains? loving-seq \"I love you\")))))\n    ```", "```java\n(ns ns-playground.core-test\n  (:import [java.util Date])\n  (:require [clojure.test :refer :all]\n            [ns-playground.hello :as hello :refer [<3]]\n            [ns-playground.core :refer :all]))\n```", "```java\n    (defn- lazy-contains? [col element]\n      (not (empty? (filter #(= element %) col))))\n    ```", "```java\n#(= element %)\n```", "```java\n(fn [e1]\n  (= element e1))\n```", "```java\n(filter #(= element %) col)\n```", "```java\n;; This returns only the even numbers in the collection\n(filter even? [1 2 3 4])\n;;=> (2 4)\n```", "```java\n(empty? (filter #(= element %) col))\n```", "```java\n(not (empty? (filter #(= element %) col)))\n```", "```java\nList<T> filteredElements = new ArrayList<T>();\nfor(T e1 : col) {\n    if(e1 == element) {\n        filteredElements.add(e1);\n    }\n}\nreturn !filteredElements.isEmpty();\n```", "```java\n(deftest current-date-is-date\n  (testing \"Test that the current date is a date\"\n    (is (instance? Date (hello/current-date)))))\n```", "```java\n(deftest check-loving-collection\n  (testing \"Check that I love clojure and you\"\n    (let [loving-seq (<3 \"I\"\"Clojure\"\"you\"\"doggies\"\"chocolate\")]\n      (is (not (lazy-contains? loving-seq \"I love Vogons\")))\n      (is (lazy-contains? loving-seq \"I love Clojure\"))\n      (is (lazy-contains? loving-seq \"I love doggies\"))\n      (is (lazy-contains? loving-seq \"I love chocolate\"))\n      (is (lazy-contains? loving-seq \"I love you\")))))\n```"]