- en: Deploying and Managing Applications on Major Java EE Servers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter covers the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Apache TomEE usage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GlassFish usage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WildFly usage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most important skills you should have as a Java EE developer is knowing
    how to work with the most used Java EE application servers in the market.
  prefs: []
  type: TYPE_NORMAL
- en: As we've stated in previous chapters, the standards involved in the Java EE
    ecosystem allow you to reuse most of the knowledge you already have no matter
    which server you are using.
  prefs: []
  type: TYPE_NORMAL
- en: However, when we are talking about deployment and some administration tasks,
    things could be different (and usually are). The differences are not in the way
    they work, but in the way they are done.
  prefs: []
  type: TYPE_NORMAL
- en: So, in this chapter, we will cover some important and common tasks for Apache
    TomEE, GlassFish, and WildFly.
  prefs: []
  type: TYPE_NORMAL
- en: Apache TomEE usage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have already used Apache Tomcat, you can consider yourself ready to use
    Apache TomEE. It is based on the Tomcat's core and implements the Java EE specs.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, you need to download it to your environment. At the time of writing,
    TomEE has no Java EE 8 compatible version (actually, there is only GlassFish 5).
    However, the tasks covered here shouldn't change in future versions as they are
    not attached to the Java EE specs.
  prefs: []
  type: TYPE_NORMAL
- en: To download it, just visit [http://tomee.apache.org/downloads.html](http://tomee.apache.org/downloads.html). This
    recipe in based on version 7.0.2 Plume.
  prefs: []
  type: TYPE_NORMAL
- en: Wherever possible, we will focus on doing tasks using the configuration files.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to the following detailed tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying EAR, WAR, and JAR files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For EAR and WAR files, the deployment folder is:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$TOMEE_HOME/webapps`'
  prefs: []
  type: TYPE_NORMAL
- en: 'For JAR files, the folder is:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$TOMEE_HOME/lib`'
  prefs: []
  type: TYPE_NORMAL
- en: Creating datasources and a connection pool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To create a datasource and a connection pool to help you use databases in your
    project, edit the `$TOMEE_HOME/conf/tomee.xml` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `<tomee>` node, insert a child node like this one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The example targets PostgreSQL, so you will need to perform some changes for
    another database. Of course, you will also need to change the other parameters
    according to your needs.
  prefs: []
  type: TYPE_NORMAL
- en: Logging setup and rotate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To configure the logging for Apache TomEE, edit the `$TOMEE_HOME/conf/logging.properties` file.
    The file works with handlers like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: So, you can define the logging level, directory, and prefix according to your
    needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you need to configure log rotation, just add these lines to your handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we are defining this file to rotate on every 1024 kilobytes
    (1 MB) and keep the last 10 files on our disk.
  prefs: []
  type: TYPE_NORMAL
- en: Starting and stopping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To start the Apache TomEE, just execute this script:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$TOMEE_HOME/bin/startup.sh`'
  prefs: []
  type: TYPE_NORMAL
- en: 'To stop it, execute the following script:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$TOMEE_HOME/bin/shutdown.sh`'
  prefs: []
  type: TYPE_NORMAL
- en: Session clustering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want to build a cluster using Apache TomEE nodes, you need to edit the `$TOMEE_HOME/conf/server.xml`
    file. Then, find this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Insert a child node, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This block will set up your server to run in a dynamic discovery cluster. What
    this means is that every server that runs in the same network using this configuration
    will become a new member in the cluster and so will share the alive sessions.
  prefs: []
  type: TYPE_NORMAL
- en: All these parameters are so important, so I really recommend you to keep all
    of them unless you are absolutely sure of what you are doing.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The best way to set up a Java EE cluster today is using containers (specially
    Docker containers). So, I'd recommend that you have a look at [Chapter 11](1f37c3b8-6cbe-436f-a427-f6c76b15de5a.xhtml),
    *Rising to the Cloud – Java EE, Containers, and Cloud Computing*. If you mix the
    content of that chapter with the content of this one, you will have a powerful
    environment for your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'To allow your application to share its session with all the nodes in the cluster,
    you need to edit the `web.xml` file, find the `web-app` node, and insert this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Without it, your session clustering will not work. You also need to keep all
    objects that you are holding in the session as serializable.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For more information about Apache TomEE visit [http://tomee.apache.org/](http://tomee.apache.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GlassFish usage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The great thing about GlassFish is that it is the **Reference Implementation** (**RI**).
    So, whenever you have a new version of Java EE, being a developer, you already
    have the respective GlassFish version to try it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, you need to download it to your environment. At the time of writing,
    GlassFish 5 is the only Java EE 8 server that has been released.
  prefs: []
  type: TYPE_NORMAL
- en: To download it, just visit [https://javaee.github.io/glassfish/download](https://javaee.github.io/glassfish/download).
    This recipe in based on version 5 (Java EE 8 compatible).
  prefs: []
  type: TYPE_NORMAL
- en: Wherever possible, we will focus on doing the tasks using the configuration
    files.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to the following detailed tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying EAR, WAR, and JAR files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For EAR and WAR files, the deployment folder is:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$GLASSFISH_HOME/glassfish/domains/[domain_name]/autodeploy`'
  prefs: []
  type: TYPE_NORMAL
- en: Usually `domain_name` is `domain1`, unless you've changed it in the installation
    process.
  prefs: []
  type: TYPE_NORMAL
- en: 'For JAR files, the folder is:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$GLASSFISH_HOME/glassfish/lib`'
  prefs: []
  type: TYPE_NORMAL
- en: Creating datasources and a connection pool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a datasource and a connection pool to help you use databases in your
    project, edit the `$GLASSFISH_HOME/glassfish/domains/[domain_name]/config/domain.xml`
    file. Inside the `<resources>` node, insert a child node like this one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, look for this node:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Add this child to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The example targets MySQL, so you will need to perform some changes for another
    database. Of course, you will also need to change the other parameters according
    to your needs.
  prefs: []
  type: TYPE_NORMAL
- en: Logging setup and rotate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To configure logging for GlassFish, edit the `$GLASSFISH_HOME/glassfish/domains/domain1/config/logging.properties` file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The file works with handlers like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: So, you can define the logging level, directory, format, and more according
    to your needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you need to configure log rotation, you have to focus on these lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we are defining this file to rotate on every 2000 kilobytes
    (2 MB) and will not rotate on date change. There's no limit for history files.
  prefs: []
  type: TYPE_NORMAL
- en: Starting and stopping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To start GlassFish, just execute this script:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$GLASSFISH_HOME/bin/asadmin start-domain --verbose`'
  prefs: []
  type: TYPE_NORMAL
- en: 'To stop it, excecute the following script:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$GLASSFISH_HOME/bin/asadmin stop-domain`'
  prefs: []
  type: TYPE_NORMAL
- en: Session clustering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building a cluster using GlassFish is a little tricky and involves using both
    command line and the admin panel, but it is completely doable! Let's check it
    out.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you need two or more instances (called nodes) up and running. You can
    do it in any way you like—each one running in a different machine, using virtual
    machines or containers (my favorite option). Either way you choose, the way of
    getting the cluster up is the same:'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, get your first node and open its admin panel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`https://[hostname]:4848`'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the Clusters option in the left menu and then click on the New button. 
    Name the cluster `myCluster` and click on the OK button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select your cluster from the list. In the opened page, select the Instances option
    in the tab and then click on New. Name the instance `node1` and click on OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, go the General tab and click on the Start Cluster button. Voilá! Your cluster
    is up and running with your first node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, go to the second machine (VM, container, other server, or any server)
    with GlassFish already installed and run this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This will set the second machine as a member of the cluster. If you refresh
    the Cluster page on the first machine, you will see the new member (`node2`).
  prefs: []
  type: TYPE_NORMAL
- en: You will notice that `node2` has stopped. Click on it and in the new page click
    on the Node link (it will usually show the hostname of `node2`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the opened page, change the Type value to `SSH`. Some new fields will show
    up in a `SSH` section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change SSH User Authentication to `SSH Password` and fill the SSH User Password field
    with the proper password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Save button. If you run some SSH error (usually `connection refused`),
    set the Force option to Enabled, and click on Save button again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go back to the command line on the machine hosting `node2` and run this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: If everything went well, your `node2` should be up and running and you should
    now have a real cluster. You can repeat these steps how ever many times you need
    to add new nodes to your cluster.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A common issue for this clustering with GlassFish arises when you don't have
    the SSH service running in your nodes; as there are tons of options of them for
    many operating systems, we won't cover each one of them here.
  prefs: []
  type: TYPE_NORMAL
- en: The best way to set up a Java EE cluster today is using containers (specially
    Docker containers). So, I'd recommend that you have a look at [Chapter 11](1f37c3b8-6cbe-436f-a427-f6c76b15de5a.xhtml), *Rising
    to the Cloud – Java EE, Containers, and Cloud Computing*. If you mix that content
    with this, you will have a powerful environment for your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'To allow your application to share its session with all the nodes in the cluster,
    you need to edit the `web.xml` file, find the `web-app` node, and insert this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Without it, your session clustering will not work. You need also to keep all
    objects that you are holding in the session as serializable.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, there's a commercial version of GlassFish, which is Payara Server.
    If you are looking for support and other commercial perks, you should take a look
    at it.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For more information about GlassFish, visit [https://javaee.github.io/glassfish/](https://javaee.github.io/glassfish/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WildFly usage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: WildFly is another great Java EE implementation. It was known as **JBoss AS**,
    but changed its name some years ago (although we still have the JBoss EAP as the
    *enterprise-production ready* version). As its administration and use are slightly
    different from Apache TomEE and GlassFish, it's worth having a proper look at
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, you need to download it to your environment. At the time of writing,
    WildFly has no Java EE 8-compatible version (actually there is only GlassFish
    5). However, the tasks covered here shouldn't change in a future version, as they
    are not attached to the Java EE specs. To download it, just visit [http://wildfly.org/downloads/](http://wildfly.org/downloads/).
  prefs: []
  type: TYPE_NORMAL
- en: This recipe in based on version 11.0.0.Final (Java EE7 Full and Web Distribution).
  prefs: []
  type: TYPE_NORMAL
- en: Wherever possible, we will focus on doing the tasks using the configuration
    files.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to the following detailed tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying EAR, WAR, and JAR files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For EAR and WAR files, the deployment folder is:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$WILDFLY_HOME/standalone/deployments`'
  prefs: []
  type: TYPE_NORMAL
- en: For JAR files (like JDBC connections, for example), WildFly creates a flexible
    folder structure. So, the best way to distribute them is using its UI, as we will
    show in the connection pool topic (the next one).
  prefs: []
  type: TYPE_NORMAL
- en: Creating datasources and a connection pool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Take the following steps to create your datasources and connection pool:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a datasource and a connection pool to help you use databases in your
    project, start WildFly and visit the following URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:9990/`'
  prefs: []
  type: TYPE_NORMAL
- en: Click on Deployments and then click on the Add button. In the opened page, select
    Upload a new deployment and click on the Next button. In the opened page, select
    the proper JDBC connector (we will use MySQL for this recipe) and click on Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify the information in the opened page and click on Finish.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that your JDBC connector is available in the server, you can go ahead and
    create your datasource. Go to Home in the administration panel and click on the
    Configuration option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the opened page, follow this path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Subsystems | Datasources | Non-XA | Datasource | Add
  prefs: []
  type: TYPE_NORMAL
- en: 'In the opened window select MySQL Datasource and click on Next. Then, fill
    the fields like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Name: `MySqlDS`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JNDI Name: `java:/MySqlDS`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on Next. In the next page, click on Detected Driver, select the proper
    MySQL connector (the one you just uploaded) and click on Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The last step is to fill the connection settings fields, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connection URL: `jdbc:mysql://localhost:3306/sys`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Username: `root`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Password: `mysql`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on the Next button, review the information, and click on Finish. Your
    newly created connection will appear in the datasources list. You can click on
    the dropdown list and select Test to check whether everything is working well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Logging setup and rotate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To configure the logging for WildFly, edit the `$WILDFLY_HOME/standalone/configuration/standalone.xml` file.
  prefs: []
  type: TYPE_NORMAL
- en: To customize the logging properties, find the `<profile>` node and then find `<subsystem
    xmlns='urn:jboss:domain:logging:3.0'>` inside it.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is based on handles like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, it will rotate daily:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want it to rotate based on the size, you should remove the preceding
    handler and then insert this one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In this case, the log will rotate when the file reaches 2 MB and will keep a
    history of five files in the backup.
  prefs: []
  type: TYPE_NORMAL
- en: Starting and stopping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To start GlassFish, just execute this script:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$WILDFLY_HOME/bin/standalone.sh`'
  prefs: []
  type: TYPE_NORMAL
- en: 'To stop it, execute this script:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$WILDFLY_HOME/bin/jboss-cli.sh --connect command=:shutdown`'
  prefs: []
  type: TYPE_NORMAL
- en: Session clustering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you go to the `$WILDFLY_HOME/standalone/configuration` folder, you will
    see these files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`standalone.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`standalone-ha.xml `'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`standalone-full.xml `'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`standalone-full-ha.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`standalone.xml` is the default, with all default configuration. To build a
    cluster, we need to use the `standalone-ha.xml` file (`ha` comes from **high availability**),
    so rename it to end it as `standalone.xml`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, you start the server. You should not do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead, you should do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: You should now do the same in whatever other nodes (machines, VMs, containers,
    and so on) that you want to get into the cluster. Of course, they need to be in
    the same network.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The best way to set up a Java EE cluster today is using containers (specially
    Docker containers). So, I'd recommend that you have a look at the [Chapter 11](1f37c3b8-6cbe-436f-a427-f6c76b15de5a.xhtml),  *Rising
    to the Cloud – Java EE, Containers, and Cloud Computing* chapter. If you mix that
    content with this, you will have a powerful environment for your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'To allow your application to share its session with all nodes in the cluster,
    you need to edit the `web.xml` file, find the `web-app` node, and insert this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Without it, your session clustering will not work.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For more information about WildFly, visit [http://wildfly.org/](http://wildfly.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
