["```java\nprivate static final org.SLF4J.Logger log = org.SLF4J.LoggerFactory.getLogger(LogClass.class);\n```", "```java\npublic class LoggerExample {\n   public static void main(String[] args) {\n      //Creating the Logger object\n      Logger logger =\n        LoggerFactory.getLogger(LoggerExample.class);\n      String name = \"seiji\";\n      //Logger using info level\n      logger.info(\"Hello {}, here is your log\", name);\n   }\n```", "```java\nINFO: Hello seiji, here is your log\n```", "```java\npublic class LoggerExample {\n   public static void main(String[] args) {\n      //Creating the Logger object\n      Logger logger =\n      LoggerFactory.getLogger(LoggerExample.class);\n      Integer x = 3;\n      Integer y = 5;\n      //Logging the information\n      logger.info(\"The two numbers are {} and {}\", x, y);\n      logger.info(\"The sum of the two number is\" + (x +\n                   y));\n   }\n```", "```java\nINFO: The two numbers are 3 and 5\nINFO: The sum of the two numbers is 8\n```", "```java\n    Profiler profiler = new Profiler(\"ExampleProfiler\");\n    ```", "```java\n    profiler.start(\"Example1\");\n    ```", "```java\n    class.methodExample();\n    ```", "```java\n    TimeInstrument tm = profiler.stop();\n    ```", "```java\nLogger log = LogManager.getLogger(ExampleClass.class);\n```", "```java\n    14:25:30 Example log message\n    ```", "```java\npublic class Log4j2Marker {\n    private static Logger LOGGER =\n      LoggerFactory.getLogger(Log4j2Marker.class);\n    private static final Marker IMPORTANT =\n      MarkerFactory.getMarker(\"IMPORTANT\");\n    public static void main(String[] args) {\n        LOGGER.info(\"Message without a marker\");\n        LOGGER.info(IMPORTANT,\"Message with marker\"\n    }\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <property name=\"LOGS\" value=\"./logs\" />\n    <!—Please refer to the logback-spring.xml of\n       the GitHub repo. Thank you. -->\n    <!-- LOG everything at INFO level -->\n    <root level=\"info\">\n        <appender-ref ref=\"RollingFile\" />\n        <appender-ref ref=\"Console\" />\n    </root>\n    <logger name=\"com.example\" level=\"trace\"\n     additivity=\"false\">\n        <appender-ref ref=\"RollingFile\" />\n        <appender-ref ref=\"Console\" />\n    </logger>\n</configuration>\n```", "```java\n    <dependency>\n    ```", "```java\n       <groupId>org.springframework.boot</groupId>\n    ```", "```java\n       <artifactId>spring-boot-starter-Log4j2</artifactId>\n    ```", "```java\n    </dependency>\n    ```", "```java\n<exclusions>\n   <exclusion>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>\n        spring-boot-starter-logging</artifactId>\n   </exclusion>\n</exclusions>\n```", "```java\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    ```", "```java\n    <Configuration>\n    ```", "```java\n        <!—Please refer to the log4j2-spring.xml  of the\n    ```", "```java\n           GitHub repo. -->\n    ```", "```java\n        <Loggers>\n    ```", "```java\n            <Root level=\"info\">\n    ```", "```java\n                <AppenderRef ref=\"Console\" />\n    ```", "```java\n                <AppenderRef ref=\"RollingFile\" />\n    ```", "```java\n            </Root>\n    ```", "```java\n            <Logger name=\"com.example\"\n    ```", "```java\n              level=\"trace\"></Logger>\n    ```", "```java\n        </Loggers>\n    ```", "```java\n    </Configuration>\n    ```", "```java\nprivate static final Logger LOGGER = LoggerFactory.getLogger(AntiHeroController.class);\n```", "```java\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n```", "```java\npublic List<AntiHeroDto> getAntiHeroes(Pageable pageable) {\n    int toSkip = pageable.getPageSize() *\n                 pageable.getPageNumber();\n    //SLF4J\n    LOGGER.info(\"Using SLF4J: Getting anti hero\n                list - getAntiHeroes()\");\n    // Mapstruct is another dto mapper, but it's not\n    // straightforward\n    var antiHeroList = StreamSupport\n              .stream(\n                service.findAllAntiHeroes().spliterator(),\n                false)\n            .skip(toSkip).limit(pageable.getPageSize())\n            .collect(Collectors.toList());\n    return antiHeroList\n            .stream()\n            .map(this::convertToDto)\n            .collect(Collectors.toList());\n}\n```", "```java\n    public class LogExample {\n    ```", "```java\n           private static final org.SLF4J.Logger log =\n    ```", "```java\n             org.SLF4J.LoggerFactory.getLogger(\n    ```", "```java\n              LogExample.class);\n    ```", "```java\n       }\n    ```", "```java\n    public class LogExample {\n    ```", "```java\n      private static final org.SLF4J.Logger log =\n    ```", "```java\n         org.SLF4J.LoggerFactory.getLogger(\n    ```", "```java\n           LogExample.class);\n    ```", "```java\n       }\n    ```", "```java\n//LOMBOK SLF4J\nlog.info(\"Using SLF4J Lombok: Getting anti-hero list - getAntiHeroes()\");\n```"]