- en: Chapter 2. Making Smart Routers with Apache Camel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Apache Camel modules into Apache Karaf
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing Camel Contexts in Karaf
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying Camel Context information in Karaf
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Starting and stopping Camel Contexts in Karaf
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing routes in Karaf
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying route information in Karaf
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Starting, stopping, suspending, and resuming routes in Karaf
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing endpoints in Karaf
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making a pure Java-based Camel Router for deployment in Karaf
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Blueprint-based Camel Router for deployment in Karaf
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding Configuration Admin to a Blueprint-based Camel Router
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a managed service factory implementation of a Camel Router
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apache Karaf provides a friendly OSGi-based container environment to deploy,
    manage, and most importantly, enjoy your applications. One of the more common
    projects to be hosted on Karaf is the Apache Camel-based router. In this chapter,
    we'll explore recipes to help make using Camel on Karaf quick, easy, and fun.
  prefs: []
  type: TYPE_NORMAL
- en: Before we proceed, let's take a closer look at Apache Camel.
  prefs: []
  type: TYPE_NORMAL
- en: 'Apache Camel provides a rule-based routing and mediation engine for Java, implementing
    **Enterprise Integration Patterns** (**EIPs**) as described in *Enterprise Integration
    Patterns: Designing, Building, and Deploying Messaging Solutions*, *Gregor Hohpe
    and Bobby Woolf*, *Addison Wesley*. One of the key features of the Camel library
    is its domain-specific language to configure routers and mediation. This allows
    for type-safe completion of rules in an integrated development environment, thereby
    greatly saving time and reducing complexity.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The purpose of this chapter is to explore the Apache Camel-Apache Karaf integration.
    For more in-depth exploration of Enterprise Integration Patterns and Camel, read
    *Apache Camel Developer's Cookbook*, *Instant Apache Camel Messaging System*,
    or *Instant Apache Camel Message Routing*, all by Packt Publishing.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Apache Camel modules into Apache Karaf
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we can begin to explore how to build Camel-Karaf smart routers, we must
    first install all the required Camel modules into the Karaf container.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The ingredients of this recipe include the Apache Karaf distribution kit, access
    to JDK, and Internet connectivity.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we add an URL to the Camel feature to our Karaf installation feature
    repository using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Alternatively, you can use the `feature:repo-add camel 2.12.2` command.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Upon adding the feature URL, Karaf will then be ready to install all Apache
    Camel dependencies. If you'd like to see all of the install targets, issue the
    `feature:list | grep –i camel` command.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The next step is installing the base Camel feature into Karaf. We install a
    feature by executing the `feature:install` command and the feature''s name, as
    shown in the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We can verify the installation by executing the `list –t 0 | grep camel` command,
    which will list all the installed Camel components in Karaf (camel-core, camel-karaf-commands,
    camel-spring, and camel-blueprint).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Apache Camel community maintains an Apache Karaf features descriptor for
    each release of their project. When the descriptor file is added (using the `feature:repo-add`
    command) to Karaf, the container processes its content, making each feature''s
    target available to be installed. The following diagram shows how various Camel
    bundles are deployed on top of a base Karaf system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/5081OS_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When a particular feature, in this case Camel, is installed (using the `feature:install`
    command), Karaf will use the appropriate URL handlers to obtain the required resources
    and install them into the container, and will then attempt to bring them to a
    `Started` state. If you execute `list –t 0` on the Karaf console, you will see
    Camel and all other artifacts deployed into the container. We can depict the integration
    of Camel components into Karaf more simply by illustrating the key Camel artifacts
    being deployed atop a standard Karaf installation.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Deploying applications as a feature* recipe of [Chapter 1](ch01.html "Chapter 1. Apache
    Karaf for System Builders"), *Apache Karaf for System Builders*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing Camel Contexts in Karaf
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The installation of Apache Camel into Apache Karaf includes a set of custom
    Camel commands as part of the `camel-karaf-commands` bundle. The Camel community
    has developed and maintained these commands for the benefit of Karaf users, and
    as such have helped to fully integrate Camel into the Karaf experience. These
    commands are listed in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Listing Camel Contexts in Karaf](img/5081OS_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As of Apache Camel 2.12.2, there are 18 Camel-Karaf commands (as shown in the
    previous screenshot), and in the following recipes, we'll explore the most commonly
    used commands.
  prefs: []
  type: TYPE_NORMAL
- en: One common task Camel users want to perform is to list all of the Camel Contexts
    deployed into a Karaf container.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The ingredients of this recipe include the Apache Karaf distribution kit, access
    to JDK, Maven, and a source code editor.
  prefs: []
  type: TYPE_NORMAL
- en: A sample Camel application has been developed for this recipe, and is available
    at [https://github.com/jgoodyear/ApacheKarafCookbook/tree/master/chapter2/chapter2-recipe2](https://github.com/jgoodyear/ApacheKarafCookbook/tree/master/chapter2/chapter2-recipe2).
    Building the application requires executing a Maven install and then deploying
    the assembled bundle into Karaf (using the `install –s mvn:com.packt/sample` command).
  prefs: []
  type: TYPE_NORMAL
- en: Follow the instructions in the *Installing Apache Camel modules into Apache
    Karaf* recipe to provide the base requirements to operate the sample code. We'll
    reuse this recipe's resources several times.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To list all of the Camel Contexts deployed in Karaf, execute the `camel:context-list`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the previous command invocation, we observe the sample Camel Router's context
    name displayed (in this example, the context name was set in Blueprint—see the
    recipe's source code for details).
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the `camel-karaf-commands` bundle is installed into Karaf via the Camel
    feature, the Camel commands become automatically available on the Karaf console.
    Under the hood, the Camel command Blueprint descriptor is instantiated and the
    various Camel-Karaf commands are wired into the container.
  prefs: []
  type: TYPE_NORMAL
- en: When the `context-list` command is executed, the context IDs of each Camel Context
    deployed is displayed along with their current status, and if available, their
    uptime.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Apache Camel community maintains updated information on their commands,
    which you can find at [http://camel.apache.org/karaf.html](http://camel.apache.org/karaf.html).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Displaying Camel Context information in Karaf* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying Camel Context information in Karaf
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Karaf can display detailed information about individual Camel Contexts deployed
    in the container using the `camel:context-info` command. Context-wide statistics,
    behaviors, contained components, and more can be discovered using this command.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Follow the instructions in the *Listing Camel Contexts in Karaf* recipe's *Getting
    ready* section for this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the following `camel:context-info` command on the Karaf console to retrieve
    context information—a small warning, there may be a lot of output generated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The preceding `camel:context-info` invocation demonstrates that a large quantity
    of data is available about each context; it is not uncommon for users to capture
    this output for analysis.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `context-info` command hooks into Camel's own facilities to access context
    information. Upon retrieval, the data is then formatted for display on Karaf's
    console.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Starting and* *stopping Camel Contexts in Karaf* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Starting and stopping Camel Contexts in Karaf
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Starting and stopping the bundle that contains a Camel Context can be very clumsy;
    you can use the `camel:context-start` and `camel:context-stop` commands to manage
    specific contexts.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Follow the instructions under the *Listing Camel Contexts in Karaf* recipe's
    *Getting ready* section for this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Managing Camel Contexts in Karaf is easy, but requires you to become familiar
    with two commands, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`camel:context-start contextName`: This command is used to start a context'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`camel:context-stop contextName`: This command is used to stop a context'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following Camel command invocations demonstrate the result of stopping
    a context:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The context commands operate on the Camel framework and do not represent the
    OSGi life cycle. Depending upon your application, a stopped context may result
    in the need to restart its host bundle.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Listing routes in Karaf* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing routes in Karaf
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is common to deploy dozens of Camel routes into an Apache Karaf container.
    To make administrating these routes easier, Apache Camel has provided a command
    to list all Camel-deployed routes by their ID.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Follow the instructions in the *Listing Camel Contexts in Karaf* recipe's *Getting
    ready* section for this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the `camel:route-list` command to list all routes deployed in Karaf as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The preceding invocation gathers and displays all the routes deployed in the
    container on Karaf's console.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the `route-list` command is executed, the route IDs of each route in each
    Camel Context are displayed along with their current status.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When developing routes, assign a descriptive ID to help make administration
    easier.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Displaying* *route information in Karaf* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying route information in Karaf
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apache Camel provides mechanisms to gather information surrounding the routes
    deployed inside a Camel Context. The `route-info` command has been provided to
    display route properties, statistics, and definitions to Karaf's console.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Follow the instructions in the *Listing Camel Contexts in Karaf* recipe's *Getting
    ready* section for this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the following `camel:route-info routeId` command to display information
    on a Camel route to Karaf''s console; similar to the `camel:context-info` command,
    this command may generate a lot of output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The preceding invocation shows the output generated when our sample Camel application's
    route is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Apache Camel provides mechanisms to track route statistics; the `route-info`
    command connects to these facilities to provide route information. Note the appending
    of `8` to various IDs in the route definition—this is generated by Camel to help
    differentiate different components and avoid name collisions. The original route
    definitions will not carry this value.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Starting, stopping, suspending, and resuming routes in Karaf* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Starting, stopping, suspending, and resuming routes in Karaf
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apache Camel provides users with fine-grained control of routes deployed inside
    a Camel Context, and as such, has provided Karaf with access to these controls.
    These management facilities are separate from OSGi's life cycle model, allowing
    users to select small portions of the Camel code that is currently being executed
    to start, stop, suspend, and resume operations.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Follow the instructions in the *Listing Camel Contexts in Karaf* recipe's *Getting
    ready* section for this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Managing Camel routes in Karaf is easy, and requires you to become familiar
    with four commands, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`camel:route-start routeName`: This command is used to start a route'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`camel:route-stop routeName`: This command is used to stop a route'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`camel:route-suspend routeName`: This command is used to suspend a route'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`camel:route-resume routeName`: This command is used to resume a suspended
    route'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To make these commands clear, let's review how to use them with the supplied
    sample Camel application from the *Listing Camel Contexts in Karaf* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following invocation, we list all the Camel routes deployed in Karaf
    and then issue a stop order upon `CamelRoute-timerToLog` (our sample Camel application).
    We can observe that it changes the status of the route from `Started` to `Stopped`.
    This can be done using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We can then issue the `route-start` command to return the route to the `Started`
    state, as shown in the following command snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now suspend the route via the `route-suspend` command and confirm that
    the named route enters the `Suspended` state, as shown in the following command
    snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we can issue the `route-resume` command to return the suspended route
    to the `Started` state, as shown in the following command snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Camel route management commands are working from the point of view of the
    Camel Context, independently of the OSGi life cycle. During the execution of the
    commands, the host bundle's OSGi status is unaffected. This provides users with
    a fine-grained management approach, allowing a host bundle to remain running with
    its context(s), only manipulating one or more routes.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Starting and stopping Camel Contexts in Karaf* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing endpoints in Karaf
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apache Camel users use endpoints to denote URIs from which events and information
    come from or go to. In Karaf, the `endpoint-list` command has been provided to
    help simplify tracking these URIs.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Follow the instructions in the *Listing Camel Contexts in Karaf* recipe's *Getting
    ready* section for this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the `camel:endpoint-list` command to list all endpoints in Karaf (use the
    `camel:endpoint-list context-name` command if you want to restrict output to one
    context''s routes). This is shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding invocation, all endpoints found in Karaf are displayed (in
    this example, the endpoints were set in Blueprint—see the recipe's source code
    for details).
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the endpoint list command is executed, all routes in every Camel Context
    are scanned and listed to Karaf's console.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating our own custom Karaf command using a Maven archetype* recipe of
    [Chapter 1](ch01.html "Chapter 1. Apache Karaf for System Builders"), *Apache
    Karaf for System Builders*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making a pure Java-based Camel Router for deployment in Karaf
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Developing our first Camel Router for deployment in Karaf doesn't necessarily
    require using a handful of frameworks and libraries. In this recipe, we'll make
    a Camel router using pure Java code with just a sprinkling of OSGi and Camel libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The ingredients of this recipe include the Apache Karaf distribution kit, access
    to JDK, Maven, and a source code editor. The sample code for this recipe is available
    at [https://github.com/jgoodyear/ApacheKarafCookbook/tree/master/chapter2/chapter2-recipe3](https://github.com/jgoodyear/ApacheKarafCookbook/tree/master/chapter2/chapter2-recipe3).
    Follow the instructions in the *Installing Apache Camel modules into Apache Karaf*
    recipe to provide the base requirements to operate the sample code.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first step is creating a Maven-based project. A `pom.xml` file containing
    the essential Maven coordinate information and bundle packaging directive will
    suffice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The next step is adding Apache Camel and OSGi dependencies to the POM file.
    We need to add the `camel-core` and `org.osgi.core` artifacts'' dependencies to
    the POM file. This is described in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For Apache Karaf 3.0.0, we use Camel Version 2.12.2 and OSGi Version 5.0.0.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, we add our build configuration, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We use `maven-bundle-plugin` to build our bundle, adding the `Bundle-Activator`
    instruction. When the bundle is deployed into Karaf, the OSGi container will call
    the start and stop methods contained within the `com.packt.Activator` class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The next step is implementing OSGi BundleActivator. Now that we have established
    a base project structure, we can implement our Java code. We'll start by creating
    the `Activator.java` file in the `src/main/java/com/packt` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `Activator` class we write will implement the BundleActivator interface.
    The BundleActivator interface implements the methods the OSGi container calls
    when starting or stopping a bundle. We''ll use the bundle''s start and stop methods
    to control the creation of a Camel Context, the addition of a Camel route, and
    the actual start and stop of the router. For more details on Apache Camel, visit
    [http://camel.apache.org](http://camel.apache.org). Consider the following code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When our Activator interface is started, we will create a new `CamelContext`
    object, then attempt to add a `MyRouteBuilder` function (this creates a Camel
    route), and then start the context and the routes it contains. Consider the following
    code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When our Activator interface is stopped, we first check whether our `CamelContext`
    object is null and then attempt to call the `stop` function upon it. When the
    context is stopped, all routes contained within it are also stopped.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, we implement our Camel Router. Our Camel router is defined in a custom
    router builder, which we extend from Camel''s `RouteBuilder` class. This is shown
    in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `MyRouteBuilder` class extends the Camel `RouteBuilder` class, which provides
    the router configuration interface. We add a Camel route definition to the `configure`
    method using the Java-based DSL.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The next step is building and deploying our Camel Router into Karaf. Now that
    we have implemented our build configuration (POM file), tied it into the OSGi
    runtime (the `Activator` class), and implemented our Camel Router (the `MyRouteBuilder`
    class), we can proceed to compile and deploy the code into Karaf. Our first step
    is to invoke `mvn install`, and then we execute `install –s mvn:com.packt/osgi`
    (`mvn:groupId/artifactId`) on the Karaf console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As the final step, we're ready to test out our Camel Router! Once our router
    bundle is installed and active in Karaf, you'll see a `src/data` folder created
    in the `KARAF_HOME` folder. Our sample router configuration processes XML-based
    recipe files. When it sees a cookie recipe (`<recipe>cookie</recipe>`), it places
    a copy of it in the `KARAF_HOME/target/messages/cookies` folder; otherwise, it
    places that copy in the `KARAF_HOME/target/message/other` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our pure Java-based Camel Router works by taking advantage of OSGi''s BundleActivator
    start and stop interfaces and direct use of the Apache Camel library. When deployed
    into Karaf, we can visualize the relevant components as shown in the following
    diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/5081OS_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When a bundle is started in an OSGi container, it will have its `Bundle-Activator`
    class' `start` method called. Our sample project configures this to the `com.packt.Activator`
    class. We reuse the Activator's start and stop methods to control a Camel Context,
    which contains a Camel Router as built by our `RouteBuilder` class implementation.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a Blueprint-based Camel Router for deployment in Karaf* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Blueprint-based Camel Router for deployment in Karaf
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Blueprint provides a dependency injection framework for OSGi. Many users will
    find that it has similarities with the Spring framework. However, Blueprint has
    been designed to deal with the dynamic runtime of OSGi where services come and
    go regularly.
  prefs: []
  type: TYPE_NORMAL
- en: The standard Apache Camel-Karaf feature contains the required Camel-Blueprint
    libraries for users to immediately start using Blueprint to wire together their
    routes. In this recipe, we'll build a Camel Router, taking advantage of the Blueprint
    Inversion of Control framework.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The ingredients of this recipe include the Apache Karaf distribution kit, access
    to JDK, Maven, and a source code editor. The sample code for this recipe is available
    at [https://github.com/jgoodyear/ApacheKarafCookbook/tree/master/chapter2/chapter2-recipe4](https://github.com/jgoodyear/ApacheKarafCookbook/tree/master/chapter2/chapter2-recipe4).
    Follow the instructions in the *Installing Apache Camel modules into Apache Karaf*
    recipe's *Getting ready* section to provide the base requirements to operate the
    sample code.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Apache Camel community has provided its users with a Maven archetype to
    generate a Blueprint-based OSGi Camel Router:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is generating a Camel Blueprint project with a Maven archetype.
    We can create our project by invoking the archetype as shown in the following
    command snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: During the generation process, you will be asked to supply a `groupId`, `artifactId`,
    and project `version` value.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This archetype invocation will produce a POM file, Java source for a Hello interface
    and to implement HelloBean, a Blueprint descriptor XML file, and a sample unit
    test. The interface and the bean component are purely for sample purposes; in
    a real-world development scenario, you will delete these artifacts.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The next step is building and deploying the project into Karaf. To build the
    project, we invoke the `mvn install` command. This will populate your local `m2`
    repository with our bundle. To install the sample, execute the following command
    on the Karaf console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding command, we substitute your Maven coordinates in the format
    `mvn:{groupId}/{artifactID}/{version}`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The last step is verifying the router function. Once installed and started
    (using the `start BundleID` command), you will observe the following entries in
    your Karaf logfile:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When our project bundle is deployed into Karaf, the project''s dependencies
    are resolved, and upon start, the Blueprint descriptor file is processed and objects
    are instantiated and populated into the Blueprint container. The following diagram
    highlights the high-level view of the deployed components in Karaf:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/5081OS_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Given a successful instantiation of the services deployed into the Blueprint
    container, the `CamelContext` object embedded within the container is automatically
    started.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Apache Camel project also provides a Camel-Spring library in its standard
    feature deployment. The Spring framework can be made to work in a Karaf environment,
    but it's generally preferred to use Blueprint or Declarative Services.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding Configuration Admin to a Blueprint-based Camel Router* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding Configuration Admin to a Blueprint-based Camel Router
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Blueprint allows us to externalize some configuration elements from our code;
    we can take this to the next level by taking advantage of the OSGi configuration
    administration service (generally referred to as Configuration Admin).
  prefs: []
  type: TYPE_NORMAL
- en: The Configuration Admin service provides configuration properties to services
    in an OSGi container. In Apache Karaf, this functionality is improved by including
    the Apache Felix File Install directory-based management agent. File Install monitors
    a directory and can automatically install and start a bundle or make a configuration
    file update to Configuration Admin.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Apache Felix File Install provides the magic behind Karaf's `deploy` and `etc`
    folders, automatically handling files as they are added, removed, or updated.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll integrate the Configuration Admin service into our Blueprint-based
    Camel project.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The ingredients of this recipe include the Apache Karaf distribution kit, access
    to JDK, Maven, and a source code editor. The sample code for this recipe is available
    at [https://github.com/jgoodyear/ApacheKarafCookbook/tree/master/chapter2/chapter2-recipe5](https://github.com/jgoodyear/ApacheKarafCookbook/tree/master/chapter2/chapter2-recipe5).
    Follow the instructions in the *Installing Apache Camel modules into Apache Karaf*
    recipe to provide the base requirements to operate the sample code.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Apache Camel community has provided its users with a Maven archetype to
    generate a Blueprint-based OSGi Camel Router. We''ll use this as a starting point
    to build our project, adding in the required bits for Configuration Admin support:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is generating a Camel Blueprint project with a Maven archetype.
    We can create our project by invoking the archetype as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: During the generation process, you will be asked to supply a `groupId`, `artifactId`,
    and project `version` value.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This will produce a POM file, Java source for a Hello interface and to implement
    HelloBean, a Blueprint descriptor XML file, and a sample unit test.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we have a basic project structure, let's modify it to use Configuration
    Admin. As we're using Blueprint, we only need to modify the descriptor file found
    in the `src/main/resources/OSGI-INF/blueprint` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Our first modification is to add an additional namespace for Configuration
    Admin, as shown in the following code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We'll use the namespace `cm` to access configuration management.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The next step is modifying the bean wiring in the Blueprint file to use a Configuration
    Admin variable. We update the provided `HelloBean` bean to accept a configuration
    variable, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Variables use the syntax `${variable-name}`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, we can add our reference to Configuration Admin, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we set the configuration management behavior to reload applications with
    configuration updates. Then, we provide default values to a pair of variables
    we'll use in the Blueprint file. We also set a `persistent-id` placeholder that
    we can use in conjunction with Karaf's `etc` folder to provide dynamic external
    configuration. In the preceding code, we can create a `recipe.cfg` file in the
    `etc` folder that contains the `greeting` and `result` properties.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: When writing an Apache Karaf feature descriptor, you can add a configuration
    file(s) to the list of resources the feature will install.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The next step is updating the Camel Context in Blueprint to use a Configuration
    Admin variable. This can be done as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Our Camel route contains one direct modification: the introduction of a `{{result}}`
    variable. Camel uses double curly braces syntax for external variables. The `helloBean`
    reference remains unchanged. However, its runtime behavior is to now use a default
    variable from the Blueprint descriptor or a value provided by Configuration Admin.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The next step is building and deploying the project into Karaf. To build the
    project, we invoke the `mvn install` command. This will populate your local `m2`
    repository with our bundle. To install the sample, execute the following command
    on the Karaf console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding command, we substitute your Maven coordinates in the `mvn:{groupId}/{artifactID}/{version}`
    format.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The last step is verifying the router function. Once the router is installed
    and started, you will observe entries of the following form in your Karaf logfile:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Changing variable values requires editing the Blueprint file and refreshing
    the bundle in Karaf. However, changes to values in the configuration file will
    be picked up almost instantly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe extends the *Creating a Blueprint-based Camel Router for deployment
    in Karaf* recipe by introducing Configuration Admin to the design. The following
    diagram highlights the high-level view of the deployed components in Karaf:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/5081OS_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The addition of Configuration Admin to Blueprint exposes the Camel route to
    external configuration. This external configuration appears as Java properties
    files in Karaf's `etc` folder.
  prefs: []
  type: TYPE_NORMAL
- en: So, how do we associate the properties file to the Configuration Admin reference
    in our Blueprint specification? This is accomplished by setting the persistence
    ID in the Configuration Admin property placeholder's Blueprint definition. In
    our demo code, we use the persistence ID recipe—in our `etc` folder, we'd use
    a corresponding file named `recipe.cfg`.
  prefs: []
  type: TYPE_NORMAL
- en: How do we use the property name-value pairs? We include the default name-value
    pairs in the Blueprint definition. These are automatically overridden by Configuration
    Admin if values are available. We access their values using single curly braces
    in beans and double curly braces in Blueprint-defined Camel Contexts.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a managed service factory implementation of a Camel Router* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a managed service factory implementation of a Camel Router
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll introduce the power of the OSGi pattern ManagedServiceFactory
    interface to Apache Camel smart routers. This pattern will allow us to manage
    multiple service instances, or in our case, Camel routes, via configuration. In
    fact, we'll produce a new router instance for each configuration we supply our
    service factory!
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The ingredients of this recipe include the Apache Karaf distribution kit, access
    to JDK, Maven, and a source code editor. The sample code for this recipe is available
    at [https://github.com/jgoodyear/ApacheKarafCookbook/tree/master/chapter2/chapter2-recipe6](https://github.com/jgoodyear/ApacheKarafCookbook/tree/master/chapter2/chapter2-recipe6).
    Follow the instructions in the *Installing Apache Camel modules into Apache Karaf*
    recipe to provide the base requirements to operate the sample code.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe will be somewhat more complex than our previous recipes. It is
    strongly urged that you follow along with the provided example code:'
  prefs: []
  type: TYPE_NORMAL
- en: First, create a Blueprint-based Camel project using the handy Maven archetype
    we've used in the previous recipes (see the *Creating a Blueprint-based Camel
    Router for deployment in Karaf* recipe). We'll use this as a base to build our
    project, removing and/or modifying resources as required.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The next step is adding dependencies to the POM file. We''ll edit the POM file,
    adding dependencies on the OSGi core and compendium, as shown in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For Apache Karaf 3.0.0, we use the OSGi core and compendium version 5.0.0.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, we prune the generated project structure. We'll remove the prepopulated
    `blueprint.xml` file, the `main` folder, and the `test` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we'll implement our ManagedServiceFactory interface in the `src/main/java`
    folder. To do this, we'll create a factory class that implements the ManagedServiceFactory
    interface and plug a dispatcher into this framework, which will handle building
    and executing of Camel routes. We'll cover the intricacies of these classes in
    the *How it works…* section of this recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The OSGi compendium rev 5 ManagedServiceFactory interface can be found at the
    OSGi Alliance website at [http://www.osgi.org/javadoc/r5/cmpn/org/osgi/service/cm/ManagedServiceFactory.html](http://www.osgi.org/javadoc/r5/cmpn/org/osgi/service/cm/ManagedServiceFactory.html).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, we create a Blueprint file in the `src/main/resources` folder that wires
    together Configuration Admin, a Camel Context, and our `Factory` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The Blueprint file in the preceding code contains the general structural elements
    required; we will cover the details of these entries in the *How it works…* section
    of this recipe.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The next step is building and deploying the router into Karaf. We build and
    deploy this assembly as a bundle into Karaf and provision it with configuration
    files in the `etc` folder. The configuration files each take the form of `PID-name.cfg`,
    with their contents being Java-style properties.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To build our sample project, execute the `mvn install` command. Deployment
    will require the following two commands:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Our managed service factory implementation of a Camel Router is now ready for
    use. The last step is creating a configuration for our router instances. Consider
    a sample configuration of the `etc/com.packt.hellofactory-test1.cfg` file with
    the following entries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also, consider the `etc/com.packt.hellofactory-test2.cfg` file with the following
    entries:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On running appropriate commands, these sample configurations will produce the
    following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now that we've reviewed a high-level process to build a managed service factory
    implementation of a Camel Router, let's dive deep into how and why this works.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Bundles implementing the ManagedServiceFactory interface connect into the Configuration
    Admin service's capability to build and configure instances of the bundle. In
    our sample project, we use this functionality to create new route instances based
    upon the provided configurations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each service (route) instance is represented by a factory configuration called
    PID. When a given PID is updated, Configuration Admin will call the factory''s
    updated method. If a new PID is passed in, then a new instance is created; if
    the PID exists, then its configuration is updated. The following diagram highlights
    the high-level view of the deployed components in Karaf:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/5081OS_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When we deploy the Camel components and the sample project into Karaf, we''ll
    wire the MSF bundle and Configuration Admin via Blueprint. Under the hood, the
    MSF bundle is composed of three classes: `HelloConstants`, `HelloDispatcher`,
    and `HelloFactory`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `HelloFactory` class implements the ManagedServiceFactory interface. In
    our sample project, we override the `getName()`, `updated(String pid, Dictionary
    dict)`, and `deleted(String pid)` methods. We then provide the initialization
    and destruction methods to clean up after our routers. Finally, we provide setters
    to wire in our PID, `bundleContext`, and `camelContext` objects. Let''s take a
    closer look at the core interface implementation in the `HelloFactory` class.
    Consider the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'We override the `getName()` method, returning our configuration PID, as shown
    in the preceding code. Consider the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `updated` method in the preceding code, we begin by setting up our `HelloDispatcher`
    engine. A map of `<PID, HelloDispatcher>` is maintained, which we use to internally
    track our Camel Routers. If we have a PID entry for the dispatcher, then we safely
    destroy the existing engine so that a new one can be constructed. Now, consider
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'We then verify the presence of the required configuration entries in the properties
    dictionary provided by Configuration Admin. These dictionaries are constructed
    when configuration files are placed in Karaf''s `etc` folder. Have a look at the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The `updated` method then creates and configures a new `HelloDispatcher` object
    and then starts operating it. Now, consider the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The `deleted` method safely cleans up all currently executing `HelloDispatcher`
    objects (our routers) when a PID is removed.
  prefs: []
  type: TYPE_NORMAL
- en: To integrate the `HelloFactory` object into the container, we included the `init`
    and `destroy` methods. The `init` call is used to register the ManagedServiceFactory
    interface with the register service and establish a ServiceTracker wiring (which
    is a utility class that simplifies working with service references from the service
    registry) between the ManagedServiceFactory interface bundle and the Configuration
    Admin service. The `destroy` call's main function is to clean up by unregistering
    the bundle safely from the registerService and close its `ServiceTracker` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `HelloDispatcher` object implements our Camel Router. We provide start
    and stop methods that handle integration of our Camel route instance into an existing
    Camel Context. We also provide methods to set our parameters and specify the Camel
    Context we want to deploy our route into. Finally, we provide a mechanism from
    which our Camel route will be constructed. Let''s take a closer look at the route
    builder in the `HelloDispatcher` object. This is shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The preceding route uses a timer component to generate an event every 10 seconds
    and then sends a message to a log. The configuration elements provide a `routeId`
    based on the name parameter, and the log message contains the `greeting` and `name`
    parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, `HelloConstants` is a utility class that provides our configuration
    parameter name constants.
  prefs: []
  type: TYPE_NORMAL
- en: 'The wiring of the ManagedServiceFactory bundle to Configuration Admin happens
    inside our Blueprint XML file. Let''s take a closer look at the three important
    sections of this descriptor file, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The `cm` namespace is used to set up configuration management. Consider the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Our Camel Context is created as our route container. This context will be shared
    by each route instance we introduce to the system. Consider the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we wire together our `HelloFactory` object to the Blueprint context,
    Configuration Admin services, and to our shared Camel Context. We also wire in
    our factory''s `init` and `destroy` methods. The following diagram illustrates
    the three instances of the Camel route, each producing a different message based
    upon their configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/5081OS_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once our ManagedServiceFactory bundle, Blueprint file, and Configuration Admin
    services are wired together and started, it will now accept configurations and
    instantiate routes. In Karaf, you can add configuration files of the `pid-name.cfg`
    format to the `etc` folder. For example, in our sample project, our configuration
    files are named `com.packt.hellofactory-test1.cfg`, `com.packt.hellofactory-test2.cfg`,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information on ActiveMQ and CXF, read [Chapter 3](ch03.html "Chapter 3. Deploying
    a Message Broker with Apache ActiveMQ"), *Deploying a Message Broker with Apache
    ActiveMQ,* and [Chapter 4](ch04.html "Chapter 4. Hosting a Web Server with Pax
    Web"), *Hosting a Web Server with Pax Web*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
