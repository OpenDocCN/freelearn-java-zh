["```java\nPOST /transfer HTTP/1.1 Host: bank.example.com\nCookie: JSESSIONID=randomid; Domain=bank.example.com; Secure; HttpOnly\nContent-Type: application/x-www-form-urlencoded amount=100.00&routingNumber=1234&account=9876&_csrf=<secure-random token>\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n...\n    http.csrf(AbstractHttpConfigurer::disable);\n    return http.build();\n}\n```", "```java\n<form action=\"https://example.com/secureTransaction\" method=\"post\" enctype=\"text/plain\">\n    <input name='{\"amount\":100,\"routingNumber\":\"maliciousRoutingNumber\", \"account\":\"evilsAccountNumber\", \"ignore_me\":\"' value='test\"}' type='hidden'>\n    <input type=\"submit\" value=\"Win Money!\"/>\n</form>\n```", "```java\n{\n  \"amount\": 100,\n  \"routingNumber\": \"maliciousRoutingNumber\",\n  \"account\": \"maliciousAccountNumber\",\n  \"ignore_me\": \"=test\"\n}\n```", "```java\n<form action=\"https://example.com/secureTransaction.json\" method=\"post\" enctype=\"text/plain\">\n    <input name='{\"amount\":100,\"routingNumber\":\"maliciousRoutingNumber\", \"account\":\"maliciousAccountNumber\", \"ignore_me\":\"' value='test\"}' type='hidden'>\n    <input type=\"submit\" value=\"Win Money!\"/>\n</form>\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n...\n    http.csrf(Customizer.withDefaults());\n    return http.build();\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n...\n    http\n       .csrf(csrf -> csrf\n             .ignoringRequestMatchers(toH2Console())\n             .disable());\n    return http.build();\n}\n```", "```java\n<c:url var=\"logoutUrl\" value=\"/logout\"/>\n<form action=\"${logoutUrl}\"\n      method=\"post\">\n    <input type=\"submit\"\n           value=\"Log out\" />\n    <input type=\"hidden\"\n           name=\"${_csrf.parameterName}\"\n           value=\"${_csrf.token}\"/>\n</form>\n```", "```java\n<form method=\"post\" action=\"/logout\">\n    <sec:csrfInput />\n    ...\n</form>\n```", "```java\n//src/main/webapp/WEB-INF/templates/fragments/header.xhtml\n<form th:action=\"@{/logout}\" method=\"post\">\n    <input type=\"submit\" value=\"Logout\" class=\"btn btn-outline-light\" />\n</form></li>\n```", "```java\n<form class=\"form-horizontal\" method=\"POST\" action=\"/login\">\n    <input type=\"hidden\" name=\"_csrf\" value=\"eEOF9AiMgfLo353Q19oTxLz5JFiNDUwbVnp-UiIExznGwFV9HiK2xGq_4sLFvfng4fcn9oTNCTrpay82YEhLNBBhpV_x8DFM\"/>\n...\n</form>\n```", "```java\n<html>\n<head>\n    <meta name=\"_csrf\" th:content=\"${_csrf.token}\"/>\n    <!-- default header name is X-CSRF-TOKEN -->\n    <meta name=\"_csrf_header\" th:content=\"${_csrf.headerName}\"/>\n    <!-- ... -->\n</head>\n```", "```java\n<!DOCTYPE html>\n<html>\n<head>\n    <title>CSRF Protected JavaScript Page</title>\n    <meta name=\"description\" content=\"This is the description for this page\"/>\n    <sec:csrfMetaTags/>\n    <script type=\"text/javascript\">\n        var csrfParameter = $(\"meta[name='_csrf_parameter']\").attr(\"content\");\n        var csrfHeader = $(\"meta[name='_csrf_header']\").attr(\"content\");\n        var csrfToken = $(\"meta[name='_csrf']\").attr(\"content\");\n        // using XMLHttpRequest directly to send an x-www-form-urlencoded request\n        var ajax = new XMLHttpRequest();\n        ajax.open(\"POST\", \"https://www.example.org/do/something\", true);\n        ajax.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded data\");\n        ajax.send(csrfParameter + \"=\" + csrfToken + \"&name=John&...\");\n        // using XMLHttpRequest directly to send a non-x-www-form-urlencoded request\n        var ajax = new XMLHttpRequest();\n        ajax.open(\"POST\", \"https://www.example.org/do/something\", true);\n        ajax.setRequestHeader(csrfHeader, csrfToken);\n        ajax.send(\"...\");\n    </script>\n</head>>\n<body>\n...\n</body>\n</html>\n```", "```java\n// using JQuery to send an x-www-form-urlencoded request\nvar data = {};\ndata[csrfParameter] = csrfToken;\ndata[\"name\"] = \"John\";\n...\n$.ajax({\n    url: \"https://www.example.org/do/something\",\n    type: \"POST\",\n    data: data,\n    ...\n});\n// using JQuery to send a non-x-www-form-urlencoded request\nvar headers = {};\nheaders[csrfHeader] = csrfToken;\n$.ajax({\n    url: \"https://www.example.org/do/something\",\n    type: \"POST\",\n    headers: headers,\n    ...\n});\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n    @Bean\n    public SecurityFilterChain securityFilterChain(HttpSecurity http, CustomAccessDeniedHandler accessDeniedHandler) throws Exception {\n       http\n             // ...\n             .exceptionHandling(exceptionHandlin) -> exceptionHandling\n                   .accessDeniedHandler(accessDeniedHandler);\n             );\n       return http.build();\n    }\n    @Bean\n    public CustomAccessDeniedHandler accessDeniedHandler(){ return new AccessDeniedHandlerImpl();\n    }\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n    @Bean\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n       http\n             // ...\n             .logout(logout -> logout\n                   .logoutRequestMatcher(new AntPathRequestMatcher(\"/logout\"))\n             );\n       return http.build();\n    }\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n       http\n             // ...\n             .headers(headers -> headers.disable());\n       return http.build();\n    }\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n@Bean\nSecurityFilterChain springSecurityFilterChain(HttpSecurity http) throws Exception {\n    http\n          .headers(headers -> headers\n                .xssProtection(XXssConfig::disable)\n          );\n    return http.build();\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n@Bean\nSecurityFilterChain springSecurityFilterChain(HttpSecurity http) throws Exception {\n    http\n          .headers(headers -> headers\n                .xssProtection(xssProtection -> xssProtection.headerValue(XXssProtectionHeaderWriter.HeaderValue.ENABLED_MODE_BLOCK))\n          );\n    return http.build();\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n@Bean\nSecurityFilterChain springSecurityFilterChain(HttpSecurity http) throws Exception {\n    http\n          .headers(headers -> headers\n                .frameOptions(FrameOptionsConfig::sameOrigin));\n    return http.build();\n}\n```", "```java\nCache-Control: no-cache, no-store, max-age=0, must-revalidate Pragma: no-cache\nExpires: 0\n```", "```java\nX-Content-Type-Options: nosniff\n```", "```java\nStrict-Transport-Security: max-age=31536000 ; includeSubDomains ; preload\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n       http\n             // ...\n             .headers(headers -> headers\n                   .httpStrictTransportSecurity(hsts -> hsts\n                         .includeSubDomains(true)\n                         .preload(true)\n                         .maxAgeInSeconds(31536000)\n                   )\n             );\n       return http.build();\n    }\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n       http\n             // ...\n             .headers(headers -> headers\n                   .httpPublicKeyPinning(hpkp -> hpkp\n                         .includeSubDomains(true)\n                         .reportUri(\"https://example.net/pkp-report\")\n                         .addSha256Pins(\"d6qzRu9zOECb90Uez27xWltNsj0e1Md7GkYYkVoZWmM=\", \"E9CZ9INDbd+2eRQozYqqbQ2yXLVKB9+xcprMF+44U1g=\")\n                   )\n             );\n       return http.build();\n    }\n}\n```", "```java\nX-Frame-Options: DENY\n```", "```java\nX-XSS-Protection: 1; mode=block\n```", "```java\nContent-Security-Policy: script-src 'self' https://trustedscripts.example.com; object-src https://trustedplugins.example.com; report-uri /csp-report-endpoint/\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n       http\n             // ...\n             .headers(headers -> headers\n                   .contentSecurityPolicy(csp -> csp\n                         .policyDirectives(\"script-src 'self' https://trustedscripts.example.com; object-src https://trustedplugins.example.com; report-uri /csp-report-endpoint/\")\n                   )\n             );\n       return http.build();\n    }\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n       http\n             // ...\n             .headers(headers -> headers\n                   .contentSecurityPolicy(csp -> csp\n                         .policyDirectives(\"script-src 'self' https://trustedscripts.example.com; object-src https://trustedplugins.example.com; report-uri /csp-report-endpoint/\")\n                         .reportOnly()\n                   )\n             );\n       return http.build();\n    }\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n       http\n             // ...\n             .headers(headers -> headers\n                   .referrerPolicy(referrer -> referrer\n                         .policy(ReferrerPolicy.SAME_ORIGIN)\n                   )\n             );\n       return http.build();\n    }\n}\n```", "```java\nFeature-Policy: geolocation 'self'\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n       http\n             // ...\n             .headers(headers -> headers\n                   .featurePolicy(\"geolocation 'self'\")\n             );\n       return http.build();\n    }\n}\n```", "```java\nPermissions-Policy: geolocation=(self)\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n       http\n             // ...\n             .headers(headers -> headers\n                   .featurePolicy(\"geolocation 'self'\")\n             );\n       return http.build();\n    }\n}\n```", "```java\nClear-Site-Data: \"cache\", \"cookies\"\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n       http\n       // ...\n       .logout((logout) -> logout\n             .addLogoutHandler(new HeaderWriterLogoutHandler(new ClearSiteDataHeaderWriter(CACHE, COOKIES)))\n       );\n       return http.build();\n    }\n}\n```", "```java\nX-Content-Security-Policy: default-src 'self' X-WebKit-CSP: default-src 'self'\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n@Bean\npublic SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n    http.headers(headers -> headers\n          .addHeaderWriter(\n                new StaticHeadersWriter(\"X-Content-Security-Policy\", \"default-src 'self'\"))\n          .addHeaderWriter(\n                new StaticHeadersWriter( \"X-WebKit-CSP\",\"default-src 'self'\");\n    return http.build();\n  }\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n       http\n             // ...\n             .headers(headers -> headers\n                   .frameOptions(FrameOptionsConfig::sameOrigin\n                   )\n             );\n       return http.build();\n    }\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n       RequestMatcher matcher = new AntPathRequestMatcher(\"/login\");\n       DelegatingRequestMatcherHeaderWriter headerWriter =\n             new DelegatingRequestMatcherHeaderWriter(matcher,new XFrameOptionsHeaderWriter());\n       http\n             // ...\n             .headers(headers -> headers\n                   .frameOptions(frameOptions -> frameOptions.disable())\n                   .addHeaderWriter(headerWriter)\n             );\n       return http.build();\n    }\n}\n```", "```java\n//build.gradle\ndependencies {\n...\ntestImplementation 'org.springframework.boot:spring-boot-starter-test'\ntestImplementation 'org.springframework.security:spring-security-test'\n}!\n```", "```java\n//build.gradle\ndependencies {\n...\n    // spring-webflux\n    implementation 'org.springframework.boot:spring-boot-starter-webflux'\n    // spring-security\n    implementation 'org.springframework.boot:spring-boot-starter-security'...\n}!\n```", "```java\n    //com/packtpub/springsecurity/service/UserDetailsServiceImpl.java\n    @Service\n    public class UserDetailsServiceImpl implements ReactiveUserDetailsService {\n        private final CalendarUserRepository userRepository;\n        public UserDetailsServiceImpl(CalendarUserRepository userRepository) {\n           this.userRepository = userRepository;\n        }\n        @Override\n        public Mono<UserDetails> findByUsername(String username) {\n           return userRepository.findByEmail(username)\n                 .flatMap(user -> {\n                    Set<GrantedAuthority> grantedAuthorities = new HashSet<>();\n                    for (Role role : user.getRoles()) {\n                       grantedAuthorities.add(new SimpleGrantedAuthority(role.getName()));\n                    }\n                    return Mono.just(new User(user.getEmail(), user.getPassword(), grantedAuthorities));\n                 });\n        }\n    }\n    ```", "```java\n    //com/packtpub/springsecurity/configuration/SecurityConfig.java\n    @Configuration\n    @EnableWebFluxSecurity\n    public class SecurityConfig {\n    ...\n    }\n    ```", "```java\n    //com/packtpub/springsecurity/configuration/SecurityConfig.java\n    @Bean\n    public ReactiveAuthenticationManager reactiveAuthenticationManager(final ReactiveUserDetailsService userDetailsService,\n           final PasswordEncoder passwordEncoder) {\n        UserDetailsRepositoryReactiveAuthenticationManager authenticationManager = new UserDetailsRepositoryReactiveAuthenticationManager(userDetailsService);\n        authenticationManager.setPasswordEncoder(passwordEncoder);\n        return authenticationManager;\n    }\n    ```", "```java\n    //com/packtpub/springsecurity/configuration/SecurityConfig.java\n    @Bean\n    public SecurityWebFilterChain filterChain(ServerHttpSecurity http)  {\n        http.authorizeExchange(exchanges -> exchanges\n                    .pathMatchers(\"/webjars/**\").permitAll()\n                    .pathMatchers(\"/css/**\").permitAll()\n                    .pathMatchers(\"/favicon.ico\").permitAll()\n                    // H2 console:\n                    .pathMatchers(\"/admin/h2/**\").permitAll()\n                    .pathMatchers(\"/\").permitAll()\n                    .pathMatchers(\"/login/*\").permitAll()\n                    .pathMatchers(\"/logout\").permitAll()\n                    .pathMatchers(\"/signup/*\").permitAll()\n                    .pathMatchers(\"/errors/**\").permitAll()\n                    .pathMatchers(\"/admin/*\").hasRole(\"ADMIN\")\n                    .pathMatchers(\"/events/\").hasRole(\"ADMIN\")\n                    .pathMatchers(\"/**\").hasRole(\"USER\"));\n        http.formLogin(Customizer.withDefaults());\n        http.exceptionHandling(exceptions -> exceptions\n              .accessDeniedHandler(new HttpStatusServerAccessDeniedHandler(HttpStatus.FORBIDDEN)));\n        return http.build();\n    }\n    ```"]