["```java\nreturn ResponseEntity.ok()\n    .contentType(\n        MediaType.valueOf(photo.getPhotoContentType()))\n    .cacheControl(\n        CacheControl.maxAge(20, TimeUnit.SECONDS))\n    .body(photo.getPhoto()); \n```", "```java\ncurl -v -X PUT http://localhost:8080/api/products/AK12345 -d '{\"name\":\"testprod235\",\"description\":\"test description\",\"price\":123.45}' -H 'Content-Type: application/json'\ncurl -v -F \"file=@/home/mv/Documents/image.jpeg\" -X PUT http://localhost:8080/api/products/AK12345/photo \n```", "```java\n<img src=\"img/photo\"/> \n```", "```java\nprivate String getHashString(byte[] bytes) {\n    try {\n        MessageDigest md =\n            MessageDigest.getInstance(\"SHA-1\");\n        return Base64.getEncoder().encodeToString(\n            md.digest(bytes));\n    } catch (NoSuchAlgorithmException e) {\n        throw new RuntimeException(e);\n    }\n} \n```", "```java\n return ResponseEntity.ok()\n           .contentType(MediaType.valueOf(\n               photo.getPhotoContentType()))\n           .eTag(getHashString(photo.getPhoto()))\n           .body(photo.getPhoto()); \n```", "```java\ncurl -v -F \"file=@/home/mv/Documents/image2.jpeg\" -X PUT http://localhost:8080/api/products/AK12345/photo \n```", "```java\n public ResponseEntity<OrderResponseDto> ordersPost(\n        OrderRequestBodyDto orderRequestBody) {\n            // ^ involves deserialization from JSON (CPU usage)\n            final var order = ordersCommandUseCase.createOrder(\n                orderMapper.toOrderRequest(orderRequestBody));\n            return ResponseEntity.status(HttpStatus.CREATED)\n            .body(orderMapper.toOrderResponse(order));\n            // ^ involves serialization to JSON (CPU usage)\n        } \n```", "```java\n public Order createOrder(OrderRequest orderRequest) {\n        updateProductPrice(orderRequest.products());\n            // ^ involves I/O\n        Order order = orderMapper.toOrder(orderRequest);\n        return ordersRepository.save(// involves I/O\n            OrderEntity.fromOrder(order, null));\n        }\n    private void updateProductPrice(List<Product> products) {\n        products.forEach(orderProduct -> {\n            ProductDetails catalogueProduct =\n            productsQueryUseCase.getProductById(\n                // ^ involves I/O\n                orderProduct.getProductSKU());\n            orderProduct.setPrice(\n                catalogueProduct.price());\n        });\n    } \n```", "```java\nspring.threads.virtual.enabled=true \n```", "```java\ntry (ExecutorService es = Executors.newVirtualThreadPerTaskExecutor()) {\n    es.submit(()-> { /* task 1 */ });\n    es.submit(()-> { /* task 2 */ });\n    // ...\n}; \n```", "```java\n <dependency>\n            <groupId>io.gatling</groupId>\n            <artifactId>gatling-app</artifactId>\n            <version>3.7.2</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>io.gatling.highcharts</groupId>\n            <artifactId>gatling-charts-highcharts</artifactId>\n            <version>3.7.2</version>\n            <scope>test</scope>\n        </dependency> \n```", "```java\npublic CreateOrderSimulation() {\n    setUp(POST_SCENARIO_BUILDER.injectOpen(\n        rampUsersPerSec(10).to(300)\n        .during(Duration.ofSeconds(10)),\n        constantUsersPerSec(300)\n        .during(Duration.ofSeconds(80)))\n    .protocols(HTTP_PROTOCOL_BUILDER))\n    .assertions(\n        global().responseTime().max().lte(5000),\n        global().successfulRequests().percent().gt(90d));\n} \n```", "```java\n try {\n            TimeUnit.SECONDS.sleep(1);\n        } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n        } \n```", "```java\nPUT http://localhost:8080/api/products/AK21101\nContent-Type: application/json\n{\n    \"name\": \"Keyboard\",\n    \"description\": \"Ergonomic Keyboard\",\n    \"price\": 60\n} \n```", "```java\n hikari:\n#       maximum-pool-size: 500\nthreads:\n    virtual:\n#       enabled: true \n```", "```java\nmvn gatling:test \n```", "```java\nthreads:\n    virtual:\n        enabled: true \n```", "```java\njava.sql.SQLTransientConnectionException: HikariPool-1 - Connection is not available, request timed out after 30000ms. \n```", "```java\nhikari:\n    maximum-pool-size: 500 \n```"]