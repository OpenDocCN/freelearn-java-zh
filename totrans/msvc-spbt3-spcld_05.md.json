["```java\nimplementation 'org.springdoc:springdoc-openapi-starter-common:2.0.2' \n```", "```java\nimplementation 'org.springdoc:springdoc-openapi-starter-webflux-ui:2.0.2' \n```", "```java\n@Bean\npublic OpenAPI getOpenApiDocumentation() {\n  return **new****OpenAPI****()**\n    .info(new Info().title(apiTitle)\n      .description(apiDescription)\n      .version(apiVersion)\n      .contact(new Contact()\n        .name(apiContactName)\n        .url(apiContactUrl)\n        .email(apiContactEmail))\n      .termsOfService(apiTermsOfService)\n      .license(new License()\n        .name(apiLicense)\n        .url(apiLicenseUrl)))\n    .externalDocs(new ExternalDocumentation()\n      .description(apiExternalDocDesc)\n      .url(apiExternalDocUrl));\n} \n```", "```java\n @Value(\"${api.common.version}\")         String apiVersion;\n  @Value(\"${api.common.title}\")           String apiTitle;\n  @Value(\"${api.common.description}\")     String apiDescription;\n  @Value(\"${api.common.termsOfService}\")  String apiTermsOfService;\n  @Value(\"${api.common.license}\")         String apiLicense;\n  @Value(\"${api.common.licenseUrl}\")      String apiLicenseUrl;\n  @Value(\"${api.common.externalDocDesc}\") String apiExternalDocDesc;\n  @Value(\"${api.common.externalDocUrl}\")  String apiExternalDocUrl;\n  @Value(\"${api.common.contact.name}\")    String apiContactName;\n  @Value(\"${api.common.contact.url}\")     String apiContactUrl;\n  @Value(\"${api.common.contact.email}\")   String apiContactEmail; \n```", "```java\napi:\n  common:\n    version: 1.0.0\n    title: Sample API\n    description: Description of the API...\n    termsOfService: MY TERMS OF SERVICE\n    license: MY LICENSE\n    licenseUrl: MY LICENSE URL\n    externalDocDesc: MY WIKI PAGE\n    externalDocUrl: MY WIKI URL\n    contact:\n      name: NAME OF CONTACT\n      url: URL TO CONTACT\n      email: contact@mail.com \n```", "```java\nspringdoc:\n  swagger-ui.path: /openapi/swagger-ui.html\n  api-docs.path: /openapi/v3/api-docs\n  packagesToScan: se.magnus.microservices.composite.product\n  pathsToMatch: /** \n```", "```java\n@Tag(name = \"ProductComposite\", description = \n  \"REST API for composite product information.\")\npublic interface ProductCompositeService { \n```", "```java\n@Operation( \n  summary = \n    \"${api.product-composite.get-composite-product.description}\",\n  description = \n    \"${api.product-composite.get-composite-product.notes}\")\n@ApiResponses(value = {\n  @ApiResponse(responseCode = \"200\", description = \n    \"${api.responseCodes.ok.description}\"),\n  @ApiResponse(responseCode = \"**400**\", description = \n    \"${api.responseCodes.badRequest.description}\"),\n  @ApiResponse(responseCode = \"**404**\", description =   \n    \"${api.responseCodes.notFound.description}\"),\n  @ApiResponse(responseCode = \"**422**\", description =   \n    \"${api.responseCodes.unprocessableEntity.description}\")\n})\n**@GetMapping**(\n  value = **\"/product-composite/{productId}\"**,\n  produces = \"application/json\")\nProductAggregate getProduct**(****@PathVariable****int** **productId)**; \n```", "```java\n**api:**\n**responseCodes:**\n**ok.description:****OK**\n    badRequest.description: Bad Request, invalid format of the request. See response message for more information\n    notFound.description: Not found, the specified id does not exist\n    unprocessableEntity.description: Unprocessable entity, input parameters caused the processing to fail. See response message for more information\n  product-composite:\n    get-composite-product:\n      description: Returns a composite view of the specified product id\n      notes: **|**\n        # Normal response\n        If the requested product id is found the method will return information regarding:\n        1\\. Base product information\n        1\\. Reviews\n        1\\. Recommendations\n        1\\. Service Addresses\\n(technical information regarding the addresses of the microservices that created the response)\n        # Expected partial and error responses\n        In the following cases, only a partial response be created (used to simplify testing of error conditions)\n        ## Product id 113\n        200 - Ok, but no recommendations will be returned\n        ## Product id 213\n        200 - Ok, but no reviews will be returned\n        ## Non-numerical product id\n        400 - A **Bad Request** error will be returned\n        ## Product id 13\n        404 - A **Not Found** error will be returned\n        ## Negative product ids\n        422 - An **Unprocessable Entity** error will be returned \n```", "```java\n    api:\n      responseCodes:\n        ok.description: OK \n    ```", "```java\ncd $BOOK_HOME/Chapter05\n./gradlew build && docker-compose build && docker-compose up -d \n```", "```java\nERROR: for product-composite Cannot start service product-composite: driver failed programming external connectivity on endpoint chapter05_product-composite_1 (0138d46f2a3055ed1b90b3b3daca92330919a1e7fec20351728633222db5e737): Bind for 0.0.0.0:8080 failed: port is already allocated \n```", "```java\n docker ps --format {{.Names}} \n```", "```java\nchapter05_review_1\nchapter05_product_1\nchapter05_recommendation_1\nchapter04_review_1\nchapter04_product-composite_1\nchapter04_product_1\nchapter04_recommendation_1 \n```", "```java\ncd ../Chapter04\ndocker-compose down \n```", "```java\ncd ../Chapter05\ndocker-compose up -d \n```", "```java\nStarting chapter05_product-composite_1 ... done \n```", "```java\n./test-em-all.bash \n```", "```java\n# Verify access to Swagger and OpenAPI URLs\necho \"Swagger/OpenAPI tests\"\nassertCurl 302 \"curl -s  http://$HOST:$PORT/openapi/swagger-ui.html\"\nassertCurl 200 \"curl -sL http://$HOST:$PORT/openapi/swagger-ui.html\"\nassertCurl 200 \"curl -s  http://$HOST:$PORT/openapi/webjars/swagger-ui/index.html?configUrl=/v3/api-docs/swagger-config\"\nassertCurl 200 \"curl -s  http://$HOST:$PORT/openapi/v3/api-docs\"\nassertEqual \"3.0.1\" \"$(echo $RESPONSE | jq -r .openapi)\"\nassertEqual \"http://$HOST:$PORT\" \"$(echo $RESPONSE | jq -r '.servers[0].url')\"\nassertCurl 200 \"curl -s  http://$HOST:$PORT/openapi/v3/api-docs.yaml\" \n```", "```java\ncurl -X GET \"http://localhost:8080/product-composite/123\" -H \"accept: application/json\" \n```"]