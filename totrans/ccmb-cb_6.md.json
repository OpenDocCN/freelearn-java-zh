["```java\n    <project   \n        xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n      <modelVersion>4.0.0</modelVersion>\n      <groupId>CucumberWebAutomation</groupId>\n      <artifactId>CucumberWebAutomation</artifactId>\n      <version>0.0.1-SNAPSHOT</version>\n      <name>CucumberWebAutomation</name>\n      <description>Cucumber+Selenium project</description>\n    </project>\n    ```", "```java\n    <properties>\n      <selenium.version>2.45.0</selenium.version>\n      <cucumber.version>1.2.2</cucumber.version>\n    </properties>\n    ```", "```java\n    <dependencies>\n      <!-- cucumber -->\n      <dependency>\n        <groupId>info.cukes</groupId>\n        <artifactId>cucumber-java</artifactId>\n        <version>${cucumber.version}</version>\n        <scope>test</scope>\n      </dependency>\n      <dependency>\n        <groupId>info.cukes</groupId>\n        <artifactId>cucumber-junit</artifactId>\n        <version>${cucumber.version}</version>\n        <scope>test</scope>\n      </dependency>\n\n      <!-- Selenium -->\n      <dependency>\n        <groupId>org.seleniumhq.selenium</groupId>\n        <artifactId>selenium-java</artifactId>\n        <version>${selenium.version}</version>\n      </dependency>\n    </dependencies>\n    ```", "```java\n    package com.cucumber.automation.bdt.cucumberOptions;\n\n    import org.junit.runner.RunWith;\n\n    import cucumber.api.CucumberOptions;\n    import cucumber.api.junit.Cucumber;\n\n    @RunWith(Cucumber.class)\n    @CucumberOptions(\n\n      features = \"src/test/java/com/cucumber/automation/bdt/features\",\n        glue = \"com.cucumber.automation.bdt.stepDefinitions\",\n          plugin = { \n            \"pretty\",\n              \"html:target/cucumber\",\n      }\n    )\n    public class RunCukeTest {\n    }\n    ```", "```java\n    Feature: login Page\n      In order to test login page\n      As a Registered user\n      I want to specify the login conditions\n\n      Scenario: login without username and password\n        Given user is on github homepage\n        When user clicks on Sign in button\n        Then user is displayed login screen\n        When user clicks Sign in button\n        Then user gets an error message \"Incorrect username or password.\"\n    ```", "```java\n    package com.cucumber.automation.bdt.stepDefinitions;\n\n    import cucumber.api.java.en.Given;\n    import cucumber.api.java.en.Then;\n    import cucumber.api.java.en.When;\n\n    public class GithubLoginSD {\n\n      @Given(\"^user is on github homepage$\")\n      public void user_is_on_github_homepage()  {  \n\n      }\n\n      @When(\"^user clicks on Sign in button$\")\n      public void user_clicks_on_Sign_in_button()  {  \n\n      }\n\n      @Then(\"^user is displayed login screen$\")\n      public void user_is_displayed_login_screen()  {\n\n      }\n\n      @When(\"^user clicks Sign in button$\")\n      public void user_clicks_Sign_in_button()  {  \n\n      }\n\n      @Then(\"^user gets an error message \\\"(.*?)\\\"$\")\n      public void user_gets_an_error_message(String arg1)  {\n\n      }\n\n    }\n    ```", "```java\n    package com.cucumber.automation.utils;\n\n    import java.net.MalformedURLException;\n    import java.util.concurrent.TimeUnit;\n\n    import org.openqa.selenium.WebDriver;\n    import org.openqa.selenium.firefox.FirefoxDriver;\n    import org.openqa.selenium.support.ui.WebDriverWait;\n\n    public class DriverFactory {\n\n      public static WebDriver driver = null;\n      public static WebDriverWait waitVar = null;\n\n      public static String baseURL = \"https://github.com/\";\n\n      /**\n       *  This function is to invoke Selenium Webdriver\n       * \n       * @throws MalformedURLException\n       * @throws InterruptedException\n       */\n      public void createDriver() throws MalformedURLException,\n      InterruptedException {\n\n        driver = new FirefoxDriver();\n\n        driver.manage().window().maximize();\n        driver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);\n\n        driver.get(baseURL);\n\n        waitVar = new WebDriverWait(driver, 15);\n      }\n\n      /**\n       * This function is to close driver instance\n       */\n      public void teardown() {\n        driver.quit();\n      }\n    }\n    ```", "```java\n    package com.cucumber.automation.bdt.stepDefinitions;\n\n    import java.net.MalformedURLException;\n\n    import com.cucumber.automation.utils.DriverFactory;\n\n    import cucumber.api.java.After;\n    import cucumber.api.java.Before;\n\n    public class Hooks {\n\n      DriverFactory df = new DriverFactory();\n\n    @Before\n      public void beforeScenario() throws MalformedURLException, InterruptedException{\n\n      df.createDriver();\n      }\n\n    @After\n      public void afterScenario(){\n      df.teardown();\n      }\n    }\n    ```", "```java\n    package com.cucumber.automation.web.pages;\n\n    import static org.junit.Assert.assertEquals;\n\n    import org.openqa.selenium.By;\n    import org.openqa.selenium.support.ui.ExpectedConditions;\n\n    import com.cucumber.automation.utils.DriverFactory;\n\n    public class LoginPage extends DriverFactory {\n\n      /**\n       * All locators will be mentioned here\n       * \n       * For this example i am not using properties file for reading locators\n       */\n\n      By SigninLink = By.linkText(\"Sign in\");\n      By marketingSection = By.className(\"marketing-section-signup\");\n      By loginSection = By.className(\"auth-form-body\");\n      By SigninButton = By.name(\"commit\");\n      By errorMessage = By.xpath(\"//div[@id='site-container']/div/div\");\n\n      /**\n       * All functions related to behavior will follow now\n       */\n    public void ishomepageDisplayed() {\n      waitVar.until(ExpectedConditions.presenceOfElementLocated(SigninLink));\n\n      driver.findElement(SigninLink).isDisplayed();\n      driver.findElement(marketingSection).isDisplayed();\n    }\n\n    public void clickSigninLink() {\n      driver.findElement(SigninLink).click();\n    }\n\n    public void isloginsectionDisplayed() {\n      waitVar.until(ExpectedConditions.presenceOfElementLocated(loginSection));\n      waitVar.until(ExpectedConditions.presenceOfElementLocated(SigninButton));\n    }\n\n    public void clickSigninButton() {\n      driver.findElement(SigninButton).click();\n    }\n\n    public void verifyErrorMessage(String msg) {\n      waitVar.until(ExpectedConditions.presenceOfElementLocated(errorMessage));\n\n      assertEquals(msg, driver.findElement(errorMessage).getText());\n    }\n    }\n    ```", "```java\n    package com.cucumber.automation.bdt.stepDefinitions;\n\n    import com.cucumber.automation.web.pages.LoginPage;\n\n    import cucumber.api.java.en.Given;\n    import cucumber.api.java.en.Then;\n    import cucumber.api.java.en.When;\n\n    public class GithubLoginSD {\n\n      LoginPage lp = new LoginPage();\n\n      @Given(\"^user is on github homepage$\")\n      public void user_is_on_github_homepage()  {  \n        lp.ishomepageDisplayed();\n      }\n\n      @When(\"^user clicks on Sign in button$\")\n      public void user_clicks_on_Sign_in_button()  {  \n        lp.clickSigninLink();\n      }\n\n      @Then(\"^user is displayed login screen$\")\n      public void user_is_displayed_login_screen()  {\n        lp.isloginsectionDisplayed();\n      }\n\n      @When(\"^user clicks Sign in button$\")\n      public void user_clicks_Sign_in_button()  {  \n        lp.clickSigninButton();\n      }\n\n      @Then(\"^user gets an error message \\\"(.*?)\\\"$\")\n      public void user_gets_an_error_message(String arg1)  {\n        lp.verifyErrorMessage(arg1);\n      }\n\n    }\n    ```", "```java\n    <project   \n        xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n      <modelVersion>4.0.0</modelVersion>\n      <groupId>CucumberMobileAutomation</groupId>\n      <artifactId>CucumberMobileAutomation</artifactId>\n      <version>0.0.1-SNAPSHOT</version>\n      <name>CucumberMobileAutomation</name>\n      <description>Cucumber+Appium project</description>\n\n    </project>\n    ```", "```java\n    <properties>\n      <appium.version>2.2.0</appium.version>\n      <cucumber.version>1.2.2</cucumber.version>\n    </properties>\n    ```", "```java\n    <dependencies>\n      <!-- cucumber -->\n      <dependency>\n        <groupId>info.cukes</groupId>\n        <artifactId>cucumber-java</artifactId>\n        <version>${cucumber.version}</version>\n        <scope>test</scope>\n      </dependency>\n      <dependency>\n        <groupId>info.cukes</groupId>\n        <artifactId>cucumber-junit</artifactId>\n        <version>${cucumber.version}</version>\n        <scope>test</scope>\n      </dependency>\n\n      <!--  Appium -->\n      <dependency>\n          <groupId>io.appium</groupId>\n          <artifactId>java-client</artifactId>\n          <version>${appium.version}</version>\n      </dependency>\n    </dependencies>\n    ```", "```java\n    package com.cucumber.automation.bdt.cucumberOptions;\n\n    import org.junit.runner.RunWith;\n\n    import cucumber.api.CucumberOptions;\n    import cucumber.api.junit.Cucumber;\n\n    @RunWith(Cucumber.class)\n    @CucumberOptions(\n\n      features = \"src/test/java/com/cucumber/automation/bdt/features\",\n          glue = \"com.cucumber.automation.bdt.stepDefinitions\",\n            plugin = { \n              \"pretty\",\n                \"html:target/cucumber\",\n            }\n    )\n    public class RunCukeTest {\n    }\n    ```", "```java\n    Feature: Agile NCR App\n      In order to look at Agile NCR Conference\n      As a Registered user\n      I want to specify the flow to Agenda and Speakers\n\n    Scenario: Agenda\n      Given user is on AgileNCR Home Page\n      Then user gets an option Agenda\n      When user selects Agenda\n      Then user is on Agenda Screen\n      When user chooses to go back\n      Then user is on AgileNCR Home Page\n    ```", "```java\n    package com.cucumber.automation.bdt.stepDefinitions;\n\n    import cucumber.api.java.en.Given;\n    import cucumber.api.java.en.Then;\n    import cucumber.api.java.en.When;\n\n    public class AgileNCRSD {\n\n      @Given(\"^user is on AgileNCR Home Page$\")\n      public void user_is_on_AgileNCR_Home_Page()  {\n\n      }\n\n      @Then(\"^user gets an option Agenda$\")\n      public void user_gets_an_option_Agenda()  {\n\n      }\n\n      @When(\"^user selects Agenda$\")\n      public void user_selects_Agenda()  {\n\n      }\n\n      @Then(\"^user is on Agenda Screen$\")\n      public void user_is_on_Agenda_Screen()  {\n\n      }\n\n      @When(\"^user chooses to go back$\")\n      public void user_chooses_to_go_back()  {\n\n      }\n\n    }\n    ```", "```java\n    package com.cucumber.automation.utils;\n\n    import io.appium.java_client.android.AndroidDriver;\n\n    import java.io.File;\n    import java.net.MalformedURLException;\n    import java.net.URL;\n\n    import org.openqa.selenium.remote.DesiredCapabilities;\n    import org.openqa.selenium.support.ui.WebDriverWait;\n\n    public class AppiumFactory {\n\n      public static AndroidDriver driver = null;\n      public static WebDriverWait waitVar = null;\n\n      /**\n       * This function is to invoke Appium\n       * \n       * @throws MalformedURLException\n       * @throws InterruptedException\n       */\n      public void createDriver() throws MalformedURLException {\n\n        // set up appium\n        final File classpathRoot = new File(System.getProperty(\"user.dir\"));\n        final File appDir = new File(classpathRoot, \"src/test/resources/apps\");\n        final File app = new File(appDir, \"com.xebia.eventsapp_2.1.apk\");\n\n        final DesiredCapabilities capabilities = new DesiredCapabilities();\n        capabilities.setCapability(\"platformName\", \"Android\");\n        capabilities.setCapability(\"deviceName\", \"Android Emulator\");\n        capabilities.setCapability(\"platformVersion\", \"4.4\");\n        capabilities.setCapability(\"app\", app.getAbsolutePath());\n\n        driver = new AndroidDriver(new URL(\"http://127.0.0.1:4723/wd/hub\"),\n        capabilities);\n\n        waitVar = new WebDriverWait(driver, 90);\n\n      }\n\n      /**\n       * This function is to close driver instance\n       */\n      public void teardown() {\n        driver.quit();\n      }\n    }\n    ```", "```java\n    package com.cucumber.automation.bdt.stepDefinitions;\n\n    import java.net.MalformedURLException;\n    import com.cucumber.automation.utils.AppiumFactory;\n    import cucumber.api.java.After;\n    import cucumber.api.java.Before;\n\n    public class Hooks {\n\n      AppiumFactory df = new AppiumFactory();\n\n    @Before\n      public void beforeScenario() throws MalformedURLException, InterruptedException{\n        df.createDriver();\n      }\n\n    @After\n      public void afterScenario(){\n        df.teardown();\n      }\n    }\n    ```", "```java\n    package com.cucumber.automation.mobile.pages.android;\n\n    import static org.junit.Assert.assertTrue;\n    import org.openqa.selenium.By;\n    import org.openqa.selenium.support.ui.ExpectedConditions;\n    import com.cucumber.automation.utils.AppiumFactory;\n\n    public class HomePage extends AppiumFactory {\n\n      /**\n       * All locators will be mentioned here\n       * \n       * For this example i am not using properties file for reading locators\n       */\n        By homePageImage = By.id(\"com.xebia.eventsapp:id/home_banner_imageView\");\n        By agendaButton = By.id(\"com.xebia.eventsapp:id/home_agenda_title\");\n\n        By backButton = By.id(\"android:id/home\");\n\n      /**\n       * All functions related to behavior will follow now\n       */\n      public void verifyHomePage(){\n        waitVar.until(ExpectedConditions.presenceOfElementLocated(homePageImage));\n        assertTrue(driver.findElement(homePageImage).isDisplayed());\n      }\n\n      public void verifyHomePageOptions(){\n        waitVar.until(ExpectedConditions.presenceOfElementLocated(homePageImage));\n        waitVar.until(ExpectedConditions.elementToBeClickable(agendaButton));\n\n        assertTrue(driver.findElement(agendaButton).isDisplayed());\n      }\n\n      public void clickAgenda(){\n        driver.findElement(agendaButton).click();\n      }\n    }\n    ```", "```java\n    package com.cucumber.automation.mobile.pages.android;\n\n    import static org.junit.Assert.*;\n    import org.openqa.selenium.By;\n    import org.openqa.selenium.support.ui.ExpectedConditions;\n    import com.cucumber.automation.utils.AppiumFactory;\n\n    public class AgendaPage extends AppiumFactory {\n\n      // All the locators for Agenda page will be defined here\n      By title = By.id(\"com.xebia.eventsapp:id/action_bar_custom_title\");\n      By AgendaList = By.className(\"android.widget.LinearLayout\");\n\n      By backButton = By.id(\"android:id/home\");\n\n      // All the behavior of Agenda page will be defined here in functions\n      public void verifyAgendaPage() {\n\n        waitVar.until(ExpectedConditions.presenceOfElementLocated(title));\n\n        assertEquals(\"Agenda\", driver.findElement(title).getText());\n        assertTrue(driver.findElements(AgendaList).size() >= 0);\n      }\n\n      public void clickBack() {\n        driver.findElement(backButton).click();\n      }\n\n    }\n    ```", "```java\n    package com.cucumber.automation.bdt.stepDefinitions;\n\n    import com.cucumber.automation.mobile.pages.android.AgendaPage;\n    import com.cucumber.automation.mobile.pages.android.HomePage;\n\n    import cucumber.api.java.en.Given;\n    import cucumber.api.java.en.Then;\n    import cucumber.api.java.en.When;\n\n    public class AgileNCRSD {\n\n      HomePage hp = new HomePage();\n      AgendaPage ap = new AgendaPage();\n\n      @Given(\"^user is on AgileNCR Home Page$\")\n      public void user_is_on_AgileNCR_Home_Page() {\n        hp.verifyHomePage();\n      }\n\n      @Then(\"^user gets an option Agenda$\")\n      public void user_gets_an_option_Agenda() {\n        hp.verifyHomePageOptions();\n      }\n\n      @When(\"^user selects Agenda$\")\n      public void user_selects_Agenda() {\n        hp.clickAgenda();\n      }\n\n      @Then(\"^user is on Agenda Screen$\")\n      public void user_is_on_Agenda_Screen() {\n        ap.verifyAgendaPage();\n      }\n\n      @When(\"^user chooses to go back$\")\n      public void user_chooses_to_go_back() {\n        ap.clickBack();\n      }\n\n    }\n    ```", "```java\n    <project  \n        xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n      <modelVersion>4.0.0</modelVersion>\n      <groupId>CucumberRESTAutomation</groupId>\n      <artifactId>CucumberRESTAutomation</artifactId>\n      <version>0.0.1-SNAPSHOT</version>\n      <name>CucumberRESTAutomation</name>\n      <description>Cucumber+HTTP Client project</description>\n    </project>\n    ```", "```java\n    <properties>\n      <http.version>4.4.1</http.version>\n      <cucumber.version>1.2.2</cucumber.version>\n    </properties>\n    ```", "```java\n    <dependencies>\n      <!-- cucumber -->\n      <dependency>\n        <groupId>info.cukes</groupId>\n        <artifactId>cucumber-java</artifactId>\n        <version>${cucumber.version}</version>\n        <scope>test</scope>\n      </dependency>\n      <dependency>\n        <groupId>info.cukes</groupId>\n        <artifactId>cucumber-junit</artifactId>\n        <version>${cucumber.version}</version>\n        <scope>test</scope>\n      </dependency>\n\n      <!-- HTTPClient -->\n      <dependency>\n        <groupId>org.apache.httpcomponents</groupId>\n        <artifactId>httpclient</artifactId>\n        <version>${http.version}</version>\n      </dependency>\n    </dependencies>\n    ```", "```java\n    package com.cucumber.automation.bdt.cucumberOptions;\n\n    import org.junit.runner.RunWith;\n\n    import cucumber.api.CucumberOptions;\n    import cucumber.api.junit.Cucumber;\n\n    @RunWith(Cucumber.class)\n    @CucumberOptions(\n\n      features = \"src/test/java/com/cucumber/automation/bdt/features\",\n      glue = \"com.cucumber.automation.bdt.stepDefinitions\",\n      plugin = { \n        \"pretty\",\n          \"html:target/cucumber\",\n      } \n    )\n    public class RunCukeTest {\n    }\n    ```", "```java\n    Feature: SOA Test\n      In order to test rest services\n      As a Registered user\n      I want to specify the rest services test conditions\n\n      Scenario: GET Request - GIT Hub User details\n        When user sends a GET request with \"https://api.github.com/users/ShankarGarg\"\n        Then status code should be 200\n        And response type should be \"json\"\n        And response contains user name \"Shankar Garg\"\n\n      Scenario: POST Request - Register a user\n        When user sends a POST request to \"https://selfsolve.apple.com/wcResults.do\" with following details\n          | key    | value        |\n          | sn     | C2WGC14ADRJ7 |\n          | cn     |              |\n          | locale |              |\n          | caller |              |\n          | num    | 12345        |\n        Then status code should be 200\n        And response type should be \"html\"\n        And response contains user name \"C2WGC14ADRJ7\"\n    ```", "```java\n    package com.cucumber.automation.bdt.stepDefinitions;\n\n    import cucumber.api.DataTable;\n    import cucumber.api.java.en.Then;\n    import cucumber.api.java.en.When;\n\n    public class RestServicesSD {\n\n      @When(\"^user sends a GET request with \\\"(.*?)\\\"$\")\n      public void user_sends_a_GET_request_with(String arg1) {\n      }\n\n      @Then(\"^status code should be (\\\\d+)$\")\n      public void status_code_should_be(int arg1) {\n      }\n\n      @Then(\"^response type should be \\\"(.*?)\\\"$\")\n      public void response_type_should_be(String arg1) {\n      }\n\n      @Then(\"^response contains user name \\\"(.*?)\\\"$\")\n      public void response_contains_user_name(String arg1) {\n      }\n\n      @When(\"^user sends a POST request to \\\"(.*?)\\\" with follwoing details$\")\n      public void user_sends_a_POST_request_to_with_follwoing_details(\n          String arg1, DataTable arg2) {\n        }\n\n    }\n    ```", "```java\n    package com.cucumber.automation.REST;\n\n    import static org.junit.Assert.*;\n\n    import java.io.IOException;\n    import java.util.ArrayList;\n    import java.util.List;\n\n    import org.apache.http.HttpEntity;\n    import org.apache.http.HttpResponse;\n    import org.apache.http.NameValuePair;\n    import org.apache.http.ParseException;\n    import org.apache.http.client.ClientProtocolException;\n    import org.apache.http.client.HttpClient;\n    import org.apache.http.client.config.RequestConfig;\n    import org.apache.http.client.entity.UrlEncodedFormEntity;\n    import org.apache.http.client.methods.HttpGet;\n    import org.apache.http.client.methods.HttpPost;\n    import org.apache.http.client.methods.HttpUriRequest;\n    import org.apache.http.entity.ContentType;\n    import org.apache.http.impl.client.DefaultHttpClient;\n    import org.apache.http.impl.client.HttpClientBuilder;\n    import org.apache.http.message.BasicNameValuePair;\n    import org.apache.http.util.EntityUtils;\n\n    import cucumber.api.DataTable;\n\n    public class RESTFactory {\n\n      @SuppressWarnings(\"deprecation\")\n      HttpClient client = new DefaultHttpClient();\n      static HttpResponse httpResponse = null;\n      static String responseString = null;\n      String getURL = \"\";\n\n      public void getRequest(String url) throws ClientProtocolException, IOException{\n        RequestConfig requestConfig = RequestConfig.custom().setConnectionRequestTimeout(20000).setConnectTimeout(20000).setSocketTimeout(20000).build();\n        HttpClientBuilder builder = HttpClientBuilder.create().setDefaultRequestConfig(requestConfig);\n        getURL = url;\n        HttpUriRequest request = new HttpGet( url );\n\n        httpResponse = builder.build().execute( request );\n\n      }\n\n      public void verifyStatusCode(int statusCode) throws ClientProtocolException, IOException {\n        assertEquals(statusCode, httpResponse.getStatusLine().getStatusCode());\n      }\n\n      public void verifyResponseType(String type){\n        String mimeType = ContentType.getOrDefault(httpResponse.getEntity()).getMimeType();\n        assertTrue( mimeType.contains(type) );\n      }\n\n      public void verifyResponseData(String responseData) throws ParseException, IOException{\n        HttpEntity entity = httpResponse.getEntity();\n        responseString = EntityUtils.toString(entity, \"UTF-8\");\n\n        assertTrue(responseString.contains(responseData));\n      }\n\n      public void postRequest(String url, DataTable payloadTable) throws ClientProtocolException, IOException{\n        List<List<String>> payload = payloadTable.raw();\n\n        HttpPost post = new HttpPost(url);\n        List<NameValuePair> urlParameters = new ArrayList<NameValuePair>(1);\n\n        for (int i=1; i<payload.size();i++){\n          urlParameters.add(new BasicNameValuePair(payload.get(i).get(0), payload.get(i).get(1)));\n        }\n\n        post.setEntity(new UrlEncodedFormEntity(urlParameters));\n\n        httpResponse = client.execute(post);\n      }\n    }\n    ```", "```java\n    package com.cucumber.automation.bdt.stepDefinitions;\n\n    import java.io.IOException;\n\n    import org.apache.http.ParseException;\n    import org.apache.http.client.ClientProtocolException;\n\n    import com.cucumber.automation.REST.RESTFactory;\n\n    import cucumber.api.DataTable;\n    import cucumber.api.java.en.Then;\n    import cucumber.api.java.en.When;\n\n    public class RestServicesSD {\n\n      RESTFactory rt = new RESTFactory();\n\n      @When(\"^user sends a GET request with \\\"(.*?)\\\"$\")\n      public void user_sends_a_GET_request_with(String url) throws ClientProtocolException, IOException {rt.getRequest(url);\n    }\n\n      @Then(\"^status code should be (\\\\d+)$\")\n      public void status_code_should_be(int statuscode) throws ClientProtocolException, IOException {\n        rt.verifyStatusCode(statuscode);\n      }\n\n      @Then(\"^response type should be \\\"(.*?)\\\"$\")\n      public void response_type_should_be(String type) {\n        rt.verifyResponseType(type);\n      }\n\n      @Then(\"^response contains user name \\\"(.*?)\\\"$\")\n      public void response_contains_user_name(String userName) throws ParseException, IOException {\n        rt.verifyResponseData(userName);\n      }\n\n      @When(\"^user sends a POST request to \\\"(.*?)\\\" with follwoing details$\")\n      public void user_sends_a_POST_request_to_with_follwoing_details(String url, DataTable payload) throws ClientProtocolException, IOException {\n        rt.postRequest(url, payload);\n      }\n    }\n    ```"]