["```java\npublic class Program {\n    public static void main(String... args){\n        System.out.println(\"Hello Program!\");\n    }\n}\n```", "```java\n...\npublic static void main(java.lang.String...);\ndescriptor: ([Ljava/lang/String;)V\nflags: (0x0089) ACC_PUBLIC, ACC_STATIC, ACC_VARARGS\nCode:\nstack=2, locals=1, args_size=1\n        0: getstatic     #7      // Field java/lang/\n            System.out:Ljava/io/PrintStream;\n        3: ldc           #13       // String Hello Program!\n...\n```", "```java\nInt valueIntLiteral = 42;\nInteger valueIntWrapper = valueIntLiteral;\n```", "```java\nbyte byteNumber = 1;\nshort shortNumber = byteNumber;\nint intNumber = shortNumber;\n```", "```java\nString t1=\"text1\";\nString t2=\"text1\";\nString t3= new String(\"text1\");\nString t4 = t3.intern();\n```", "```java\n1 == t2 => true\nt1 == t3 => false\nt3 == t4 => false\nt1 == t4 => true\n```", "```java\nString t5 = new StringBuilder()\n        .append(\"value\")\n        .append(42)\n        .toString();\nString t6 = \"value42\";\n```", "```java\nt5 == t6 => false\n```", "```java\nint[]     array1;        \nbyte[][]  array2;        \nObject[]  array3;        \nCollection<?>[] array4;\n```", "```java\nint[] a1 = {1,2,3,4};\na1[0] = a1.length;\nint e1 = a1[0];\na1.length == 4 => TRUE \na1 instanceof Object => TRUE\n```", "```java\nDouble sin = Math.sin(90);\ndouble abs = Math.abs(-10);\ndouble sqrt = Math.sqrt(2);\n```", "```java\nRandom randomNumberWithRange = new Random();\nint upperBound = 10;\nint randomIntInRange = randomNumberWithRange.\nnextInt(upperBound);\ndouble randomDoubleInRange = randomNumberWithRange.\nnextDouble(upperBound);\n```", "```java\nList<String> list = Arrays.asList(\"one\", \"two\", \n    \"forty_two\");\nlist.forEach(System.out::println);\n```", "```java\nPredicate<Integer> numberTest = new Predicate<Integer>() {\n    @Override\n    public boolean test(Integer e) {\n        return e > 2;\n    }\n};\nString result = Stream.of(1,2,3, 42)\n        //.filter(e -> e > 2) //Anonymous class example\n        .filter(numberTest)\n        .map(e -> \"element\" + e)\n        .collect(Collectors.joining(\",\"));\nSystem.out.println(\"result: \" + result);\n```", "```java\n$ java –list-modules          \njava.base@17     \njava.compiler@17 \njava.datatransfer@17\n<more>\n```", "```java\n$ java –describe-module java.logging\njava.logging@17\nexports java.util.logging\nrequires java.base mandated\nprovides jdk.internal.logger.DefaultLoggerFinder with \n    sun.util.logging.internal.LoggingProviderImpl\n<more> \n```", "```java\nModule java.logging {\n    exports java.util.logging;\n    provides jdk.internal.logger.DefaultLoggerFinder with\n        sun.util.logging.internal.LoggingProviderImpl;\n}\n```", "```java\nmodule-example\n├── example\n│   └── ExampleMain.java\n└── module-info.java\n```", "```java\n// file module-info.java\nmodule module.example {\n    exports example;\n}\n// file ExampleMain.java\npackage example;\npublic class ExampleMain {\n    public static void main(String[] args) {\n        System.out.println(\"Welcome to JMPS!\");\n    }\n}\n```", "```java\n$ javac -d ./out ./module-example/module-info.java \n    ./module-example/example/ExampleMain.java\n$ jar –create -file module-example.jar -C ./out .\n$ java –module-path ./module-example.jar –module \n    module.example/example.ExampleMain\n```", "```java\n   Welcome to JMPS!\n\n$ java –module-path ./module-example.jar –describe-module \n    module.example\n```", "```java\nmodule.example\nexports example\nrequires java.base mandated\n```", "```java\nConsumer<Integer> consumer = (var number) -> {\n    var result = number + 1;\n    System.out.println(\"result:\" + result);\n};\nIntStream.of(1, 2, 3).boxed().forEach(consumer);\n```", "```java\nVar inputNumber = 42;\nString textNumber = switch (inputNumber){\n    case 22,42 -> String.valueOf(inputNumber);\n    default -> throw new RuntimeException(\"not allowed\");\n};\nSystem.out.printf(\"\"\"\n        number:'%s'\n        %n\"\"\", textNumber);\n```", "```java\nObject obj = \"text\";\nif(obj instanceof String s){\n    System.out.println(s.toUpperCase());\n}\n```", "```java\nprivate record Example(int number, String text){\n    private String getTogether(){\n        return number + text;\n    }\n}\n```", "```java\npublic sealed interface Vehicle permits Car, Bus {\n    void start();\n    void stop();\n}\npublic non-sealed class Car extends NormalEngine implements \n    Vehicle {\n    public String toString(){\n        return \"Car{running=\"+ super.running +'}';\n    }\n}\n```", "```java\nPublic class Motorbike implements Vehicle{\n    public void start() {}\n    public void stop() {}\n}\n```", "```java\nMotorbike.java:2: error: class is not allowed to extend \nsealed class: Vehicle (as it is not listed in its permits \nclause)\n```", "```java\nPublic final class Bus extends SlowEngine implements \n    Vehicle {}\n```", "```java\nObject variable = 42;\nString text = switch (variable){\n    case Integer i -> \"number\"+i;\n    default -> \"text\";\n};\n```", "```java\npublic class Multithreaded Program {\n    public static void main(String[] args) {\n        var t = new Thread(() -> {\n            while(true){System.out.println(\"Welcome \n                Thread!\");}\n        });\n        t.setDaemon(true);\n        t.start();\n    }\n}\n```", "```java\nExecutorService executorService = \n    Executors.newSingleThreadExecutor();\nvar runnable = new Runnable(){\n    @Override\n    public void run() {\n        System.out.println(\"Welcome Runnable\");\n    }\n};\nexecutorService.execute(runnable);\nexecutorService.execute(() -> System.out.println(\"Welcome \n    Runnable\"));\n```", "```java\nvar futureCallable = executorService.submit(callable);\nFuture<String> futureCallableAnonymous = executor.submit(() \n    -> \"Welcome to Future\");\nSystem.out.println(\"\"\"\n        futureCallable:'%s',\n        futureCallableAnonymous:'%s'\n        \"\"\".formatted(futureCallable.get(), \n            futureCallableAnonymous.get()));\n```"]