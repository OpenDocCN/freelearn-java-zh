["```java\nDirectProcessor<Long> data = DirectProcessor.create();\ndata.take(2).subscribe(t -> System.out.println(t));\ndata.onNext(10L);\ndata.onNext(11L);\ndata.onNext(12L);\n```", "```java\nDirectProcessor<Long> data = DirectProcessor.create();\ndata.subscribe(t -> System.out.println(t),\n        e -> e.printStackTrace(),\n        () -> System.out.println(\"Finished 1\"));\ndata.onNext(10L);\ndata.onComplete();\ndata.subscribe(t -> System.out.println(t),\n        e -> e.printStackTrace(),\n        () -> System.out.println(\"Finished 2\"));\ndata.onNext(12L);\n\n```", "```java\nDirectProcessor<Long> data = DirectProcessor.create();\ndata.subscribe(t -> System.out.println(t),\n        e -> e.printStackTrace(),\n        () -> System.out.println(\"Finished\"),\n        s -> s.request(1));\ndata.onNext(10L);\ndata.onNext(11L);\ndata.onNext(12L);\n```", "```java\nUnicastProcessor<Long> data = UnicastProcessor.create();\ndata.subscribe(t -> {\n    System.out.println(t);\n});\ndata.sink().next(10L);\n```", "```java\nEmitterProcessor<Long> data = EmitterProcessor.create(1);\ndata.subscribe(t -> System.out.println(t));\nFluxSink<Long> sink = data.sink();\nsink.next(10L);\nsink.next(11L);\nsink.next(12L);\ndata.subscribe(t -> System.out.println(t));\nsink.next(13L);\nsink.next(14L);\nsink.next(15L);\n```", "```java\nReplayProcessor<Long> data = ReplayProcessor.create(3);\ndata.subscribe(t -> System.out.println(t));\nFluxSink<Long> sink = data.sink();\nsink.next(10L);\nsink.next(11L);\nsink.next(12L);\nsink.next(13L);\nsink.next(14L);\ndata.subscribe(t -> System.out.println(t));\n```", "```java\nTopicProcessor<Long> data = TopicProcessor.<Long>builder()\n        .executor(Executors.newFixedThreadPool(2)).build();\ndata.subscribe(t -> System.out.println(t));\ndata.subscribe(t -> System.out.println(t));\nFluxSink<Long> sink= data.sink();\nsink.next(10L);\nsink.next(11L);\nsink.next(12L);\n```", "```java\nWorkQueueProcessor<Long> data = WorkQueueProcessor.<Long>builder().build();\ndata.subscribe(t -> System.out.println(\"1\\. \"+t));\ndata.subscribe(t -> System.out.println(\"2\\. \"+t));\nFluxSink<Long> sink= data.sink();\nsink.next(10L);\nsink.next(11L);\nsink.next(12L);\n```", "```java\nFlux<Long> fibonacciGenerator = Flux.generate(\n        () -> Tuples.<Long, Long>of(0L, 1L),\n        (state, sink) -> {\n            sink.next(state.getT1());\n            return Tuples.of(state.getT2(), state.getT1() + state.getT2());\n        });\n\nfibonacciGenerator.take(5).subscribe(t -> System.out.println(\"1\\. \"+t));\nfibonacciGenerator.take(5).subscribe(t -> System.out.println(\"2\\. \"+t));\n```", "```java\nfinal UnicastProcessor<Long> hotSource = UnicastProcessor.create();\nfinal Flux<Long> hotFlux = hotSource.publish().autoConnect();\nhotFlux.take(5).subscribe(t -> System.out.println(\"1\\. \" + t));\nCountDownLatch latch = new CountDownLatch(2);\nnew Thread(() -> {\n    int c1 = 0, c2 = 1;\n    while (c1 < 1000) {\n        hotSource.onNext(Long.valueOf(c1));\n        int sum = c1 + c2;\n        c1 = c2;\n        c2 = sum;\n        if(c1 == 144) {\n            hotFlux.subscribe(t -> System.out.println(\"2\\. \" + t));\n        }\n    }\n    hotSource.onComplete();\n    latch.countDown();\n}).start();\nlatch.await();\n```"]