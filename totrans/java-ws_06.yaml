- en: 6\. Libraries, Packages, and Modules
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6. 库、包和模块
- en: Overview
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 概述
- en: This chapter will introduce you to the various ways of packaging and bundling
    Java code, as well as the tools required to help build your own Java projects.
    The first step is learning how to organize your code into packages, so that you
    can build a **Java ARchive** (**JAR**) file from those packages. From there, you
    will practice creating an executable JAR file using Java build tools like Maven
    and Gradle, which will further help you to include third-party open source libraries
    in your projects. By the end of this chapter, you will be well equipped to create
    your own Java module to group your packages together.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将向您介绍打包和捆绑Java代码的各种方法，以及帮助构建您自己的Java项目的工具。第一步是学习如何将代码组织到包中，这样您就可以从这些包中构建一个**Java
    ARchive**（**JAR**）文件。从那里，您将练习使用Maven和Gradle等Java构建工具创建可执行JAR文件，这将进一步帮助您在项目中包含第三方开源库。到本章结束时，您将准备好创建自己的Java模块来组合您的包。
- en: Introduction
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Any sophisticated Java application will require many separate Java classes.
    Java provides several ways to help you organize your classes; one of which is
    the concept of packages. You can collect multiple compiled packages together into
    a Java library, or a **Java ARchive** (**JAR**) file. Furthermore, you can use
    modules to provide a higher level of abstraction in your code, exposing only those
    elements that you consider appropriate.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 任何复杂的Java应用程序都将需要许多独立的Java类。Java提供了几种帮助您组织类的方法；其中之一就是包的概念。您可以将多个编译包组合成一个Java库，或者一个**Java
    ARchive**（**JAR**）文件。此外，您可以使用模块在代码中提供更高层次的抽象，仅暴露您认为适当的元素。
- en: When you start to create larger applications, you'll want to take advantage
    of Java's handy build tools—of which Maven and Gradle are the most popular. Build
    tools make it easier to build large projects that might depend on other projects
    and libraries. Build tools also provide standard ways to run tests, as well as
    packaging the project.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 当您开始创建较大的应用程序时，您将想要利用Java的便捷构建工具——其中Maven和Gradle是最受欢迎的。构建工具使得构建可能依赖于其他项目和库的大型项目更加容易。构建工具还提供了运行测试和打包项目的标准方式。
- en: Both Maven and Gradle help significantly with the inclusion of third-party open-source
    libraries in your applications. There are thousands of such libraries available.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Maven和Gradle在将第三方开源库包含到您的应用程序中方面提供了显著的帮助。有数千个这样的库可供使用。
- en: Organizing Code into Packages
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将代码组织到包中
- en: Java packages together related classes, interfaces, enums (a data type that
    contains a data type that contains a fixed group of constants), and annotations
    (contain metadata). In other words, a package is a collection of Java types brought
    together under a common name. Using a common name makes it easier to find code
    in larger projects, and helps to keep your code separate from other, perhaps similar,
    code. For example, more than one package might contain a class named `Rectangle`,
    so referring to the appropriate package will allow you to specify which `Rectangle`
    class you're looking for. Packages allow you to organize your code, which becomes
    more and more important as you work on larger and larger applications.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Java包将相关的类、接口、枚举（包含固定组常量的数据类型）和注解（包含元数据）组合在一起。换句话说，包是一组以共同名称汇集的Java类型。使用共同名称使得在较大的项目中查找代码更加容易，并有助于将您的代码与其他可能相似的代码分开。例如，可能不止一个包包含名为`Rectangle`的类，因此引用适当的包将允许您指定您正在寻找的哪个`Rectangle`类。包允许您组织您的代码，随着您处理越来越大的应用程序，这一点变得越来越重要。
- en: Java's API includes hundreds of classes divided into packages, such as `java.math`
    and `java.net`. As you'd expect, `java.math` has mathematics-related classes,
    and `java.net` has networking-related classes.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Java的API包括数百个类，这些类被分为包，例如`java.math`和`java.net`。正如您所期望的，`java.math`包含与数学相关的类，而`java.net`包含与网络相关的类。
- en: Importing Classes
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导入类
- en: When you use Java classes from packages other than `java.lang`, you need to
    import them using an `import` statement. The Java compiler imports all classes
    in the `java.lang` package by default. Everything else is up to you.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用`java.lang`包之外的包中的Java类时，您需要使用`import`语句来导入它们。Java编译器默认导入`java.lang`包中的所有类。其余的则由您自己决定。
- en: 'Here''s an example:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个例子：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This code imports two types from the `java.time` package, `DayOfWeek` and `LocalDateTime`.
    Now, `DayOfWeek` is a Java `enum` representing days of the week. `LocalDateTime`
    is a class that holds a date and a time.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码从 `java.time` 包中导入了两种类型，`DayOfWeek` 和 `LocalDateTime`。现在，`DayOfWeek` 是一个表示星期的
    Java `enum`，而 `LocalDateTime` 是一个包含日期和时间的类。
- en: 'Once you import these types, you can use them in your code, as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你导入了这些类型，你就可以在代码中使用它们，如下所示：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Exercise 1: Importing Classes'
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 1：导入类
- en: In this exercise, we will display the current day of the week and use the `java.time`
    package to extract system date and time.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将显示当前是星期几，并使用 `java.time` 包提取系统日期和时间。
- en: In IntelliJ, select `File`, `New`, and then `Project` from the `File` menu.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 IntelliJ 中，从 `文件` 菜单中选择 `文件`、`新建`，然后选择 `项目`。
- en: In the `New Project` Dialog, select a Java project. Click `Next`.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `新建项目` 对话框中，选择一个 Java 项目。点击 `下一步`。
- en: Check the box to create the project from a template. Click on `Command Line
    App`. Click `Next`.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开复选框以从模板创建项目。点击 `命令行应用`。点击 `下一步`。
- en: Name the project `chapter06`.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将项目命名为 `chapter06`。
- en: For the project's location, click the button with three dots (`…`), and then
    select the source folder you created previously.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于项目的位置，点击带有三个点 (`…`) 的按钮，然后选择你之前创建的源文件夹。
- en: Enter `com.packtpub.chapter06` as the base package name. We'll do more with
    packages later in this chapter.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `com.packtpub.chapter06` 作为基本包名输入。我们将在本章后面更多地使用包。
- en: Click `Finish`.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 `完成`。
- en: IntelliJ will create a project named `chapter06`, as well as an `src` folder
    inside `chapter06`. This is where your Java code will reside. Inside this folder,
    IntelliJ will create subfolders for `com`, `packtpub`, and `chapter06`.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: IntelliJ 将创建一个名为 `chapter06` 的项目，并在 `chapter06` 内部创建一个 `src` 文件夹。这是你的 Java 代码将驻留的地方。在这个文件夹内，IntelliJ
    将为 `com`、`packtpub` 和 `chapter06` 创建子文件夹。
- en: 'IntelliJ also creates a class named `Main`:'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: IntelliJ 还会创建一个名为 `Main` 的类：
- en: '[PRE2]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Rename the class named `Main` to `Example01`.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将名为 `Main` 的类重命名为 `Example01`。
- en: Double-click in the text editor window on the word `Main`.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本编辑器窗口中双击单词 `Main`。
- en: Right-click and select `Refactor` | `Rename…` from the menu.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击并从菜单中选择 `重构` | `重命名…`。
- en: Enter `Example01` and press *Enter*.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 `Example01` 并按 *Enter*。
- en: 'You will now see the following code:'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你现在会看到以下代码：
- en: '[PRE3]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now enter the following code inside the `main()` method:'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，在 `main()` 方法内输入以下代码：
- en: '[PRE4]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'IntelliJ should offer the option to import the two types, `DayOfWeek` and `LocalDateTime`.
    If, for some reason, you click the wrong button, you can add the following lines
    after the package statement and prior to the definition of the class:'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: IntelliJ 应该会提供导入两种类型 `DayOfWeek` 和 `LocalDateTime` 的选项。如果由于某种原因你点击了错误的按钮，你可以在包声明之后和类定义之前添加以下几行：
- en: '[PRE5]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, click on the green arrow just to the left of the text editor window that
    points to the class name, `Example01`. Select the first menu choice, `Run` `Example01.main()`.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击文本编辑器窗口左侧指向类名 `Example01` 的绿色箭头。选择第一个菜单选项，`运行` `Example01.main()`。
- en: 'In the `Run` window, you''ll see the path to your Java program, and then some
    output such as this:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `运行` 窗口中，你会看到你的 Java 程序的路径，然后是一些输出，如下所示：
- en: '[PRE6]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You should see the current day of the week.
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该能看到当前是星期几。
- en: The package statement identifies the package in which this code resides. See
    the *Creating a Package* section later in this chapter for more information on
    this topic.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 包声明标识了此代码所在的包。请参阅本章后面的 `创建包` 部分，了解更多关于此主题的信息。
- en: Fully Qualified Class Names
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 完全限定类名
- en: 'You don''t have to use `import` statements. Instead, you can use the fully
    qualified class name, as shown here:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你不必使用 `import` 语句。相反，你可以使用完全限定类名，如下所示：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The fully qualified name includes both the package and the type name. the following
    example would also give us the same result as the *Exercise 01*, *Importing Classes*.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 完全限定名称包括包和类型名称。以下示例也会给出与 *练习 01*、*导入类* 相同的结果。
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Usually, importing classes and types makes your code easier to read and requires
    less typing. In large projects, you will find very long package names. Placing
    these long names in front of every declaration will make your code much harder
    to read. Most Java developers will import classes, unless you have two classes
    with the same name but stored in separate packages.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，导入类和类型会使你的代码更容易阅读，并且需要更少的输入。在大型项目中，你会找到非常长的包名。将这些长名称放在每个声明的前面会使你的代码难以阅读。大多数
    Java 开发者都会导入类，除非你有两个具有相同名称但存储在不同包中的类。
- en: Note
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Most IDEs, such as IntelliJ, can find most classes for you, and will offer to
    import the class.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 IDE，如 IntelliJ，可以为您找到大多数类，并将提供导入类的建议。
- en: Importing All Classes in a Package
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导入包中的所有类
- en: 'You can import all classes in a package using an asterisk, `*`, to represent
    all the classes in a package, as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用星号 `*` 来导入包中的所有类，如下所示：
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The asterisk is considered a wildcard character and imports all public types
    from the given package, in this case, `java.time`. The Java compiler will automatically
    import any types from this package that you use in your code.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 星号被视为通配符字符，并导入给定包中的所有公共类型，在本例中为 `java.time`。Java 编译器将自动导入您在代码中使用此包中的任何类型。
- en: Note
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Using the wildcard imports may bring in different classes to the ones you intended.
    Some packages use common class names, such as `Event`, `Duration`, or `Distance`,
    that may conflict with type names you want to use. So, if you use the wildcard
    import, you may end up with the wrong class imported. Normally, it is best to
    import only the types that you require.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用通配符导入可能会引入您未打算引入的不同类。一些包使用常见的类名，如 `Event`、`Duration` 或 `Distance`，这些可能与您想要使用的类型名称冲突。因此，如果您使用通配符导入，您可能会导入错误的类。通常，最好只导入您需要的类型。
- en: '`Example03.java` shows how to use wildcard imports:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`Example03.java` 展示了如何使用通配符导入：'
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'When you run this program, you will see output like the following, depending
    on the day of the week:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行此程序时，您将看到如下输出，具体取决于星期几：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Dealing with Duplicated Names
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理重复名称问题
- en: If, for some reason, you have to use two different classes with the same name,
    you'll need to use the fully qualified class names.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出于某种原因，您必须使用两个具有相同名称的不同类，您将需要使用完全限定的类名。
- en: 'When you work with third-party libraries, you may find that there are multiple
    classes in your project with the same name. `StringUtils`, for example, is defined
    in multiple packages in multiple libraries. In this case, use the fully qualified
    class names to disambiguate. Here is an example:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当您与第三方库一起工作时，您可能会发现您的项目中存在多个具有相同名称的类。例如，`StringUtils` 在多个库的多个包中定义。在这种情况下，使用完全限定的类名来消除歧义。以下是一个示例：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: These are two classes with the same basic name, `StringUtils`, that come from
    different third-party libraries. You will learn more about third-party libraries
    later on in this chapter.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个类具有相同的基本名称 `StringUtils`，它们来自不同的第三方库。您将在本章后面了解更多关于第三方库的内容。
- en: Static Imports
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 静态导入
- en: Many classes define constants, usually defined as `static` `final` fields. You
    can use these constants by importing the enclosing class and then referencing
    them from the class name, as shown in *Chapter 3*, *Object-Oriented Programming*.
    For example, Java defines the end of time with the `MAX` constant in the `LocalDateTime`
    class.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 许多类定义了常量，通常定义为 `static` `final` 字段。您可以通过导入封装类然后从类名引用它们来使用这些常量，如 *第 3 章*，*面向对象编程*
    中所示。例如，Java 使用 `LocalDateTime` 类中的 `MAX` 常量定义时间的结束。
- en: '`Example04.java` shows how to statically import `LocalDateTime`. `MAX` to see
    when the universe will end, at least according to the company behind Java:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`Example04.java` 展示了如何静态导入 `LocalDateTime` 的 `MAX`，以查看宇宙何时结束，至少根据 Java 背后的公司的说法：'
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'When you run this program, you will see the following output:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行此程序时，您将看到以下输出：
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Creating a Package
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个包
- en: 'As discussed earlier, once you start writing more complex Java programs, you
    will want to bundle your code together in a package. To create a package, you
    should observe the following steps:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，一旦您开始编写更复杂的 Java 程序，您将希望将您的代码捆绑到一个包中。要创建一个包，您应该遵循以下步骤：
- en: Name your package.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 命名您的包。
- en: Create the appropriate source directory for the package.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为包创建适当的源目录。
- en: Create classes and other types, as needed, in the new package.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据需要，在新的包中创建类和其他类型。
- en: Naming Your Package
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命名您的包
- en: Technically, you can name your Java packages anything you want, so long as you
    stick to the rules for naming variables and types in Java. Don't use characters
    that Java will interpret as code. For example, you cannot use a hyphen, -, in
    a Java package name. The Java compiler will think you are performing subtraction.
    You cannot use Java's reserved words, such as `class`, either.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术上讲，您可以命名您的 Java 包任何您想要的名字，只要您遵守 Java 中变量和类型的命名规则。不要使用 Java 会解释为代码的字符。例如，您不能在
    Java 包名称中使用连字符，-。Java 编译器会认为您正在进行减法操作。您也不能使用 Java 的保留词，如 `class`。
- en: 'Typically, you''ll use your organization''s domain name in reverse for your
    package names. For example, if the domain name is `packtpub.com`, then your package
    names would start with `com.packtpub`. You will almost always want to add descriptive
    names after the domain part to allow you to organize your code. For example, if
    you were making a medical application that pulled data from a fitness tracking
    device, you might create packages such as the following:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，您会使用您组织的域名反向作为包名。例如，如果域名是`packtpub.com`，那么您的包名将始于`com.packtpub`。您几乎总是希望在域名部分之后添加描述性名称，以便您组织代码。例如，如果您正在制作一个从健身追踪设备中提取数据的医疗应用程序，您可能会创建以下包：
- en: '`com.packtpub.medical.heartrate`'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`com.packtpub.medical.heartrate`'
- en: '`com.packtpub.medical.tracker`'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`com.packtpub.medical.tracker`'
- en: '`com.packtpub.medical.report`'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`com.packtpub.medical.report`'
- en: '`com.packtpub.medical.ui`'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`com.packtpub.medical.ui`'
- en: Use names that make sense for your organization, as well as for the purpose
    of the classes in the package.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 使用对您的组织以及包中类的目的都有意义的名称。
- en: The reason for using your organization's domain name is, in part, to prevent
    your Java packages from having the same name as packages in third-party libraries.
    The domain names are already made unique by domain name registrars. Using the
    domain names in reverse makes for more understandable names for packages as you
    delve deeper and deeper into the package tree, such as `com.packtpub.medical.report.daily.exceptions`.
    Furthermore, this convention helps separate packages from multiple organizations.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 使用您组织的域名的原因之一是，防止您的Java包与第三方库中的包具有相同的名称。域名注册商已经使域名变得独特。将域名反向使用可以使包的名称在深入包树时更加易于理解，例如`com.packtpub.medical.report.daily.exceptions`。此外，这个约定有助于将包与多个组织区分开来。
- en: Note
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The classes provided with Java APIs reside in packages starting with `java`
    or `javax`. Don't use these names for your packages.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Java API提供的类位于以`java`或`javax`开头的包中。不要使用这些名称为您的包命名。
- en: Generally, you'll want to group classes, interfaces, enums, and annotations
    that are related to the same package.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，您会希望将相关的类、接口、枚举和注解分组到同一个包中。
- en: Directories and Packages
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目录和包
- en: Java makes heavy use of directories to define packages. Every dot in a package
    name, such as `java.lang`, indicates a sub-folder.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Java大量使用目录来定义包。包名中的每个点，如`java.lang`，都表示一个子目录。
- en: In the IntelliJ project you created for this chapter, you also created a package
    named `com.packtpub.chapter06`. Using IntelliJ's `Project` pane, you can see the
    folders created for the package.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在您为本章创建的IntelliJ项目中，您还创建了一个名为`com.packtpub.chapter06`的包。使用IntelliJ的`项目`窗格，您可以看到为该包创建的文件夹。
- en: Click on the gear icon in the `Project` pane.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`项目`窗格中点击齿轮图标。
- en: Uncheck the `Compact Middle Packages` option.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消选择`紧凑中间包`选项。
- en: 'You will now see a folder for `com.packtpub.chapter06`, as shown in *Figure
    6.1*:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您现在将看到`com.packtpub.chapter06`的文件夹，如图*6.1*所示：
- en: '![Figure 6.1: IntelliJ''s Project pane can show the individual folders that
    make up a Java package'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.1：IntelliJ的项目窗格可以显示构成Java包的各个文件夹]'
- en: '](img/C13927_06_01.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/C13927_06_01.jpg]'
- en: 'Figure 6.1: IntelliJ''s Project pane can show the individual folders that make
    up a Java package'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1：IntelliJ的项目窗格可以显示构成Java包的各个文件夹
- en: Note
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The folder structure might vary based on the number of examples you have tried
    out in this chapter.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 文件夹结构可能因您在本章中尝试的示例数量而有所不同。
- en: Normally, you'll want to leave IntelliJ's `Compact Middle Packages` setting
    on, as it makes the project organization easier to see at a glance.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，您会希望保持IntelliJ的`紧凑中间包`设置，因为它使得项目组织在直观上更容易看到。
- en: 'Exercise 2: Creating a Package for a Fitness Tracking App'
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习2：为健身追踪应用创建包
- en: We've created a package, `com.packtpub.chapter06`, that acts as a catch-all
    for examples in this chapter. In this exercise, we'll create another package to
    gather together a related set of classes.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已创建一个名为`com.packtpub.chapter06`的包，作为本章示例的通用容器。在这个练习中，我们将创建另一个包来收集相关的一组类。
- en: 'When creating an application that interacts with a fitness tracker, you want
    a package for classes that relate to tracking daily steps. Users will define a
    goal for the number of steps they want to take in a day, say 10,000\. The tracker
    will record the number of steps taken so far, along with a collection of the daily
    totals:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建一个与健身追踪器交互的应用程序时，你希望有一个用于跟踪每日步数的类包。用户将为每天想要走的步数设定一个目标，比如10,000步。追踪器将记录已走的步数，以及每日总步数的集合：
- en: In the IntelliJ Project pane for the `chapter06` project created previously,
    click the gear icon. Make sure `Flatten Packages` and `Hide Empty Middle Packages`
    are both selected.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在之前创建的`chapter06`项目中，在IntelliJ项目面板中点击齿轮图标。确保`Flatten Packages`和`Hide Empty Middle
    Packages`都已被选中。
- en: Remain in the `Project` pane, and right-click on the `src` folder. Select `New`,
    and then `Package`. Enter the `com.packtpub.steps` package name, and then click
    `OK`. This is our new package.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持处于`Project`面板中，并在`src`文件夹上右键点击。选择`New`，然后选择`Package`。输入`com.packtpub.steps`包名，然后点击`OK`。这是我们新的包。
- en: Right-click on the `com.packtpub.steps` package, select `New`, and then select
    `Java Class`. Enter the `Steps` class name.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packtpub.steps`包上右键点击，选择`New`，然后选择`Java Class`。输入`Steps`类名。
- en: 'Enter the following field definitions:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下字段定义：
- en: '[PRE15]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Allow IntelliJ to import `java.time.LocalDate`, or simply enter the following
    code after the package statement and before the definition of the class:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 允许IntelliJ导入`java.time.LocalDate`，或者简单地在包声明之后、类定义之前输入以下代码：
- en: '[PRE16]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Right-click within the class definition. Choose `Generate…` from the menu. Then,
    select `Constructor`. Select both `steps` and the `date`, and then click `OK`.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在类定义内右键点击。从菜单中选择`Generate…`。然后选择`Constructor`。选择`steps`和`date`，然后点击`OK`。
- en: 'You''ll see a brand-new constructor, as follows:'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你将看到一个全新的构造函数，如下所示：
- en: '[PRE17]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Right-click within the class definition again. Choose `Generate…`, and then
    select `Getter and Setter`. Select both `steps` and the `date`, and then click
    `OK`. You''ll now see the getter and setter methods:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次在类定义内右键点击。选择`Generate…`，然后选择`Getter and Setter`。选择`steps`和`date`，然后点击`OK`。你现在将看到getter和setter方法：
- en: '[PRE18]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We now have our first class in the new package. Next, we'll create another class.
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们现在有了新包中的第一个类。接下来，我们将创建另一个类。
- en: Right-click on the `com.packtpub.steps` package in the `Project` pane, select
    `New`, and then select `Java Class`. Enter the `DailyGoal` class name.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目面板中，在`com.packtpub.steps`包上右键点击，选择`New`，然后选择`Java Class`。输入`DailyGoal`类名。
- en: 'Enter the following field definition:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下字段定义：
- en: '[PRE19]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note that we default the daily steps goal to 10,000 steps.
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，我们默认每日步数目标为10,000步。
- en: Right-click within the class definition. Choose `Generate…` from the menu. Then,
    select `Constructor`, followed by `dailyGoal`, and then click `OK`.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在类定义内右键点击。从菜单中选择`Generate…`。然后选择`Constructor`，接着选择`dailyGoal`，然后点击`OK`。
- en: 'Define the following method, which is used to determine whether a `Steps` object
    has achieved the daily goal:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义以下方法，用于确定`Steps`对象是否实现了每日目标：
- en: '[PRE20]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Right-click on the `com.packtpub.steps` package in the `Project` pane, select
    `New`, and then select `Java Class`. Enter the `WeeklySteps` class name.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目面板中，在`com.packtpub.steps`包上右键点击，选择`New`，然后选择`Java Class`。输入`WeeklySteps`类名。
- en: 'Enter the following fields:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下字段：
- en: '[PRE21]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: You will need to import `java.util.List` and `java.util.ArrayList`.
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你需要导入`java.util.List`和`java.util.ArrayList`。
- en: Right-click within the class definition again. Choose `Generate…`, and then
    select `Getter and Setter`. Select both `dailySteps` and `dailyGoal`, and then
    click `OK`. You'll now see the getter and setter methods.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次在类定义内右键点击。选择`Generate…`，然后选择`Getter and Setter`。选择`dailySteps`和`dailyGoal`，然后点击`OK`。你现在将看到getter和setter方法。
- en: To use this new class, we'll add some methods to determine the best day (the
    day with the greatest number of steps), total the steps, and format the output.
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要使用这个新类，我们将添加一些方法来确定最佳日（步数最多的一天），总计步数，并格式化输出。
- en: 'Enter the following method to determine the best day for steps:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下方法以确定最佳步数日：
- en: '[PRE22]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now, enter the following method to total the weekly number of steps:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，输入以下方法以总计每周步数：
- en: '[PRE23]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Note that both methods iterate over `dailySteps`. These two methods could be
    combined into one.
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，这两个方法都会遍历`dailySteps`。这两个方法可以合并为一个。
- en: In a real fitness tracking application, you would probably have a smartphone
    or a web user interface. For this example, though, we'll simply generate a string
    of the results of the weekly steps.
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在一个真实的健身跟踪应用程序中，你可能会有一个智能手机或Web用户界面。然而，在这个例子中，我们将简单地生成每周步骤结果的字符串。
- en: 'Enter the following method:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下方法：
- en: '[PRE24]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This method uses `StringBuilder` and `DayOfWeek`, both part of the Java API.
    An encouraging message, `YAY!`, appears with each day the user met the step goal.
    The best day also gets an uplifting message.
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此方法使用`StringBuilder`和`DayOfWeek`，它们都是Java API的一部分。每当用户达到步骤目标时，都会出现一个鼓励的信息“YAY!”。最好的日子也会得到一个振奋人心的信息。
- en: 'To help initialize the weekly step data, we''ll create a convenience method
    (a method that exists to simplify our code and reduce typing):'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了帮助初始化每周步骤数据，我们将创建一个便利方法（一个存在以简化我们的代码并减少输入的方法）：
- en: '[PRE25]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'To test the entire step-tracking package, we''ll create a `main()` method that
    shows how everything fits together:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了测试整个步骤跟踪包，我们将创建一个`main()`方法，以展示一切是如何结合在一起的：
- en: '[PRE26]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Normally, you would put this type of code into a unit test, which is a special
    code designed to make sure your classes and algorithms are correct. Refer to *Chapter
    18*, *Unit Testing*, for more information on unit testing.
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通常，你会将此类代码放入单元测试中，这是一种特殊的代码，用于确保你的类和算法是正确的。有关单元测试的更多信息，请参阅*第18章*，*单元测试*。
- en: Click on the green arrow just to the left of the text editor window that points
    to the `WeeklySteps` class name. Select the first menu choice, `Run 'WeeklySteps.main()'`.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击位于文本编辑器窗口左侧的绿色箭头，该箭头指向`WeeklySteps`类名。选择第一个菜单选项，`运行 'WeeklySteps.main()'`。
- en: 'You''ll see output along the lines of the following, for a week of fitness
    data (in the year 2021):'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你将看到类似以下内容的输出，对于2021年的一周健身数据（在2021年）：
- en: '[PRE27]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Now that you have an idea of the basics of Java code organization, we will look
    into a special kind of file known as the Java Archive.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了Java代码组织的基本知识，我们将探讨一种特殊类型的文件，称为Java归档。
- en: Building JAR Files
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建JAR文件
- en: A JAR file, short for Java Archive, holds multiple files and provides a platform-neutral
    way to distribute Java code. For a Java library, a JAR file will contain the compiled
    .class files, and perhaps additional files, such as the configuration data, certificates,
    and image files, called resources, that are required by the library. Specialized
    versions of JAR files are used to package and deploy server-side Java applications.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: JAR文件，即Java归档，包含多个文件，并提供了一种平台无关的方式来分发Java代码。对于一个Java库，JAR文件将包含编译后的.class文件，以及可能的其他文件，如配置数据、证书和图像文件，这些文件被称为资源，是库所必需的。专门版本的JAR文件用于打包和部署服务器端Java应用程序。
- en: A **WAR** file, short for **web archive**, contains the compiled Java code and
    resources for a web application. An **EAR** file, short for **enterprise archive**,
    contains the compiled Java code and resources for a full server-side **Java Enterprise
    Edition** (**JavaEE**) application. Under the hood, a JAR file is a compressed
    ZIP file.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '**WAR**文件，即**Web归档**，包含Web应用程序的编译Java代码和资源。**EAR**文件，即**企业归档**，包含完整服务器端**Java企业版**（**JavaEE**）应用程序的编译Java代码和资源。在底层，JAR文件是一个压缩的ZIP文件。'
- en: 'To build a JAR file, we can use the following command:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建一个JAR文件，我们可以使用以下命令：
- en: '[PRE28]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The `c` option tells the `jar` command to create a new JAR file. The `f` option
    specifies the filename of the new JAR file. This filename should appear immediately
    after the options. Finally, you list all the files to place in the JAR file, typically,
    `.class` files.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`c`选项告诉`jar`命令创建一个新的JAR文件。`f`选项指定新JAR文件的文件名。此文件名应紧接在选项之后出现。最后，你列出要放入JAR文件中的所有文件，通常是.class文件。'
- en: Note
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `v` option (part of `cvf`) stands for verbose; that is, it is optional,
    and tells the JAR tool to output verbose output while it works.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`v`选项（`cvf`的一部分）代表详细；也就是说，它是可选的，告诉JAR工具在执行时输出详细输出。'
- en: 'Exercise 3: Building a JAR File'
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习3：构建JAR文件
- en: 'In this exercise, we''ll compile the Java code for the `com.packtpub.steps`
    package and then build a JAR file:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将编译`com.packtpub.steps`包的Java代码，然后构建一个JAR文件：
- en: 'In the Terminal pane in IntelliJ, run the following commands:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在IntelliJ的终端面板中运行以下命令：
- en: '[PRE29]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The `javac` command created `.class` files in the `com/packtpub/steps` folder.
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`javac`命令在`com/packtpub/steps`文件夹中创建了.class文件。'
- en: 'Next, create a JAR file with the following command:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用以下命令创建一个JAR文件：
- en: '[PRE30]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This command will generate output because we are using the verbose option:'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此命令将生成输出，因为我们使用了详细选项：
- en: '[PRE31]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: You'll then see the new JAR file, `chapter6.jar`, in the current directory.
    By convention, use the `.jar` filename extension for JAR files.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到当前目录中的新 JAR 文件，`chapter6.jar`。按照惯例，为 JAR 文件使用 `.jar` 文件名扩展名。
- en: Note
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The name jar, and the command-line syntax, are based on a much earlier UNIX
    and Linux tool called `tar`.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 名称 `jar` 和命令行语法基于一个更早的 UNIX 和 Linux 工具，名为 `tar`。
- en: 'Like with all compressed files, we will have to decompress the JAR files too,
    before we start using them. To extract all the files from a JAR file, use the
    `jar xvf` command:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 就像所有压缩文件一样，在我们开始使用它们之前，我们也必须解压缩 JAR 文件。要从 JAR 文件中提取所有文件，请使用 `jar xvf` 命令：
- en: '[PRE32]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: In this case, `chapter6.jar` is the name of the JAR file.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`chapter6.jar` 是 JAR 文件的名称。
- en: Note
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The JAR command-line options are treated in order. In this case, the `f` option
    requires a filename parameter. If you add another option that also requires a
    parameter (such as `e`, mentioned later in *Exercise 04, Building an Executable
    JAR File*), then the filename needs to come before that additional parameter.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: JAR 命令行选项按顺序处理。在这种情况下，`f` 选项需要一个文件名参数。如果您添加另一个也需要参数的选项（例如后面在 *练习 04，构建可执行 JAR
    文件* 中提到的 `e`），那么文件名需要在该附加参数之前。
- en: 'To see what is inside a JAR file, use the `jar tf` command. In this case, you
    can see inside your new JAR file by running the following command from the Terminal
    pane:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看 JAR 文件内部的内容，请使用 `jar tf` 命令。在这种情况下，您可以通过从终端面板运行以下命令来查看您的新 JAR 文件内部：
- en: '[PRE33]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'You will see a listing of the files in the JAR file as the output:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到 JAR 文件中的文件列表作为输出：
- en: '[PRE34]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Notice how the `jar` command created a folder named `META-INF` and a file named
    `MANIFEST.MF` in that folder.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 `jar` 命令如何在其中创建一个名为 `META-INF` 的文件夹和一个在该文件夹中的名为 `MANIFEST.MF` 的文件。
- en: 'By default, the `jar` command will create a `MANIFEST.MF` file with the following
    content:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`jar` 命令将创建一个包含以下内容的 `MANIFEST.MF` 文件：
- en: '[PRE35]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The file lists a version number, and the version of Java created that file—in
    this case, Java 11 from Oracle.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 文件列出了一个版本号，以及创建该文件的 Java 版本——在这种情况下，来自 Oracle 的 Java 11。
- en: Defining the Manifest
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义清单
- en: The `MANIFEST.MF` file is used to provide information to Java tools regarding
    the content of the JAR file. You can add versioning information, electronically
    sign the JAR file, and so on. Probably the most useful thing to add to a JAR file's
    manifest is to identify the `main` class. This option names the class with a `main()`
    method that you would want to run from the JAR file. In essence, this creates
    an executable JAR file.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`MANIFEST.MF` 文件用于向 Java 工具提供有关 JAR 文件内容的信息。您可以添加版本信息，电子签名 JAR 文件等。可能添加到 JAR
    文件清单中最有用的事情是标识 `main` 类。此选项命名具有 `main()` 方法的类，您希望从 JAR 文件中运行。本质上，这创建了一个可执行 JAR
    文件。'
- en: 'An executable JAR file allows you to run the Java application inside the JAR
    file with a command such as this:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 可执行 JAR 文件允许您使用如下命令在 JAR 文件内运行 Java 应用程序：
- en: '[PRE36]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'To do this, you need to create an entry in the `MANIFEST.MF` file that defines
    the main class. For example, for the `WeeklySteps` Java class, you''d create an
    entry in the `MANIFEST.MF` file with the following:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，您需要在 `MANIFEST.MF` 文件中创建一个条目，以定义主类。例如，对于 `WeeklySteps` Java 类，您会在 `MANIFEST.MF`
    文件中创建一个条目，如下所示：
- en: '[PRE37]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Exercise 4: Building an Executable JAR File'
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 4：构建可执行 JAR 文件
- en: 'In this exercise, we''ll add a Main-Class entry to the `MANIFEST.MF` file inside
    a JAR file:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将在 JAR 文件内的 `MANIFEST.MF` 文件中添加一个 Main-Class 条目：
- en: 'Recreate the JAR file with the following command (all on one line):'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令重新创建 JAR 文件（所有内容都在一行上）：
- en: '[PRE38]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The `e` option defines an entry point, in other words, the Main-Class header.
    Since the JAR command-line options are dealt with in a sequential order, this
    means that you provide the JAR filename first, and then the name of the main class
    (the entry point). These options can easily be mixed up.
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`e` 选项定义了一个入口点，换句话说，就是 Main-Class 标头。由于 JAR 命令行选项按顺序处理，这意味着您首先提供 JAR 文件名，然后是主类（入口点）的名称。这些选项很容易混淆。'
- en: 'With this `jar` command, you''ll see output like the following:'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用此 `jar` 命令，您将看到如下输出：
- en: '[PRE39]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Now we can run our Java application from the JAR file:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以从 JAR 文件中运行我们的 Java 应用程序：
- en: '[PRE40]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'This command should generate the output shown in *Exercise 02*, *Creating a
    Package for a Fitness Tracking App*:'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此命令应生成 *练习 02*，*为健身追踪应用程序创建包* 中所示的输出：
- en: '[PRE41]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Note
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: You can find out more about the jar command, as well as the other Java tools,
    at [https://packt.live/2MYsN6N](https://packt.live/2MYsN6N).
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以在 [https://packt.live/2MYsN6N](https://packt.live/2MYsN6N) 上了解更多关于 jar 命令以及其他
    Java 工具的信息。
- en: Manually building a JAR file when you have a single package isn't that difficult.
    When you start to add more and more packages though, manually building JAR files
    and manipulating the contents becomes quite cumbersome. There are much easier
    ways to do this—most notably, by using a Java build tool that can aid in making
    JAR files.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 当你只有一个包时，手动构建 JAR 文件并不困难。但是，当你开始添加越来越多的包时，手动构建 JAR 文件和操作内容变得相当繁琐。有更简单的方法来做这件事——最显著的是，通过使用可以帮助构建
    JAR 文件的 Java 构建工具。
- en: Build Tools
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建工具
- en: 'As applications become more and more complex, you''ll find it essential to
    use a Java build tool. Build tools allow you to do the following:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 随着应用程序变得越来越复杂，你会发现使用 Java 构建工具变得至关重要。构建工具允许你做以下事情：
- en: Build Java applications that span multiple packages.
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建跨多个包的 Java 应用程序。
- en: Make your builds easier to run and maintain.
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使构建更容易运行和维护。
- en: Make your builds consistent.
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使构建保持一致。
- en: Create a library or multiple libraries from your code.
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从你的代码中创建库或多个库。
- en: Download and include third-party libraries in your applications.
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载并将第三方库包含到你的应用程序中。
- en: These items just scratch the surface of what Java build tools can do for you.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是 Java 构建工具能为你做的事情的一小部分。
- en: 'The two main Java build tools are as follows:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 两个主要的 Java 构建工具有以下几种：
- en: '**Maven**, which issues XML configuration files'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Maven**，它生成 XML 配置文件'
- en: '**Gradle**, which uses a Groovy-based, domain-specific language for configuration'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Gradle**，它使用基于 Groovy 的领域特定语言进行配置'
- en: Note
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: Refer to [https://packt.live/33Iqprj](https://packt.live/33Iqprj) for more on
    Maven, and [https://packt.live/35PNREO](https://packt.live/35PNREO) for more on
    Gradle.
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关 Maven 的更多信息，请参阅[https://packt.live/33Iqprj](https://packt.live/33Iqprj)，有关
    Gradle 的更多信息，请参阅[https://packt.live/35PNREO](https://packt.live/35PNREO)。
- en: Maven
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Maven
- en: Maven has very specific ideas about how your software projects should be structured.
    For example, Maven expects your source code to go into a folder named `src`. In
    general, it is best not to fight Maven's expectations.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 对你的软件项目的结构有非常具体的要求。例如，Maven 预期你的源代码将放入名为 `src` 的文件夹中。一般来说，最好是不要与 Maven
    的期望作斗争。
- en: Note
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Refer to [https://packt.live/2nVNI1A](https://packt.live/2nVNI1A) for more on
    Maven's expectations about the directory structure for your projects.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 Maven 对项目目录结构的期望的更多信息，请参阅[https://packt.live/2nVNI1A](https://packt.live/2nVNI1A)。
- en: 'Exercise 5: Creating a Maven Project'
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 5：创建 Maven 项目
- en: 'IntelliJ provides some very handy features when working with Maven. We''ll
    now use those features to create a Maven project:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: IntelliJ 在与 Maven 一起工作时提供了一些非常实用的功能。我们现在将使用这些功能来创建 Maven 项目：
- en: In IntelliJ, go to the `File` menu, select `New`, and then `Project…`.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 IntelliJ 中，转到“文件”菜单，选择“新建”，然后选择“项目…”。
- en: 'In the `New Project` dialog, select `Maven`. Then, click `Next`, as shown in
    *Figure 6.2*:![Figure 6.2: Selecting Maven when creating a Maven project'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“新建项目”对话框中，选择“Maven”。然后，点击“下一步”，如图 *图 6.2* 所示：![图 6.2：创建 Maven 项目时选择 Maven
- en: '](img/C13927_06_02.jpg)'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C13927_06_02.jpg)'
- en: 'Figure 6.2: Selecting Maven when creating a Maven project'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.2：创建 Maven 项目时选择 Maven
- en: 'On the next screen, you''ll need to enter three values, as shown in *Figure
    6.3*:'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在下一屏，你需要输入三个值，如图 *图 6.3* 所示：
- en: '![Figure 6.3: Entering GroupId, ArtifactId, and Version'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 6.3：输入 GroupId、ArtifactId 和版本'
- en: '](img/C13927_06_03.jpg)'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C13927_06_03.jpg)'
- en: 'Figure 6.3: Entering GroupId, ArtifactId, and Version'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.3：输入 GroupId、ArtifactId 和版本
- en: For `GroupId`, enter `com.packtpub.steps`.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于 `GroupId`，输入 `com.packtpub.steps`。
- en: '`GroupId` in Maven identifies the overall project. Normally, you''ll use the
    main package name for your work as `GroupId`.'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Maven 中的 `GroupId` 用来标识整个项目。通常，你将使用你的主要包名作为 `GroupId`。
- en: For `ArtifactId`, enter steps.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于 `ArtifactId`，输入 steps。
- en: '`ArtifactId` is the name you want for any JAR file you create, without the
    version number. Maven will add the version information for you.'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`ArtifactId` 是你为任何 JAR 文件想要的名字，不包括版本号。Maven 会为你添加版本信息。'
- en: Leave the `Version` as `1.0-SNAPSHOT`.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `Version` 保持为 `1.0-SNAPSHOT`。
- en: Note
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: In Maven, SNAPSHOT versions represent work in progress. When you come to make
    a release, you'll normally remove the SNAPSHOT portion of the version information.
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Maven 中，SNAPSHOT 版本表示正在进行中的工作。当你准备发布时，你通常会从版本信息中移除 SNAPSHOT 部分。
- en: Click `Next`.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“下一步”。
- en: On the next screen, it will default the IntelliJ project name to steps (from
    `ArtifactId`). Select a project location on disk and then click `Finish`.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一屏，IntelliJ 将默认将项目名称设置为 steps（来自 `ArtifactId`）。在磁盘上选择一个项目位置，然后点击“完成”。
- en: You now have a Maven project.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经有一个 Maven 项目了。
- en: In the `Project` pane, note the directory structure created. You will find an
    `src` folder. This holds the project source code. Under `src`, you'll see folders
    called `main` and `test`. The `main` folder is where your Java source code resides.
    The `test` folder is where your unit tests reside. Unit tests are Java classes
    that test the main code.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在`项目`面板中，注意创建的目录结构。您将找到一个`src`文件夹。这个文件夹包含项目的源代码。在`src`下，您会看到名为`main`和`test`的文件夹。`main`文件夹是Java源代码所在的位置。`test`文件夹是单元测试所在的位置。单元测试是测试主代码的Java类。
- en: Note
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Refer to *Chapter 18*, *Unit Testing*, for more information on unit tests.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 参考第18章*单元测试*以获取有关单元测试的更多信息。
- en: In both the main and test folders, you'll see folders named `java`. This indicates
    Java source code (as opposed to Groovy or Kotlin code, for example).
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在主文件夹和测试文件夹中，您会看到名为`java`的文件夹。这表示Java源代码（例如，与Groovy或Kotlin代码相对）。
- en: '*Figure 6.4* shows the directory structure with the `src/main/java` and `src/test/java`
    folders:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6.4*显示了包含`src/main/java`和`src/test/java`文件夹的目录结构：'
- en: '![Figure 6.4: The src/main/java and src/test/java folders for a Maven project'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.4：Maven项目的src/main/java和src/test/java文件夹'
- en: '](img/C13927_06_04.jpg)'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C13927_06_04.jpg)'
- en: 'Figure 6.4: The src/main/java and src/test/java folders for a Maven project'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.4：Maven项目的src/main/java和src/test/java文件夹
- en: When Maven builds your project, compiling the code and building JAR files, it
    incorporates the output of the build in a folder named target.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 当Maven构建您的项目时，编译代码和构建JAR文件，它将构建输出包含在名为`target`的文件夹中。
- en: You'll also see a file named `pom.xml`. Short for **Project Object Model**,
    **POM** provides Maven's configuration, which tells Maven what you want to build
    and how to do it.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 您还会看到一个名为`pom.xml`的文件。简称为**项目对象模型**，**POM**提供了Maven的配置，它告诉Maven您想构建什么以及如何构建。
- en: 'The default POM created by IntelliJ, `pom.xml`, has the following content:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: IntelliJ默认创建的POM文件`pom.xml`包含以下内容：
- en: '[PRE42]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: You should see `groupId`, `artifactId`, and the version information you entered
    when creating the project in IntelliJ.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到在IntelliJ中创建项目时输入的`groupId`、`artifactId`和版本信息。
- en: 'Exercise 6: Adding Java Sources to the Maven Project'
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习6：将Java源代码添加到Maven项目
- en: 'We''ll now add the Java source to the Maven project as follows:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将Java源代码添加到Maven项目中，如下所示：
- en: Start by going to the `src/main/java` folder.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先转到`src/main/java`文件夹。
- en: Right-click, select `New`, and then select `Package`.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击，选择`新建`，然后选择`包`。
- en: Enter `com.packtpub.steps` as the package name.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`com.packtpub.steps`作为包名输入。
- en: Next, bring in the three source files from `Exercise 02`. You can copy the files
    from before.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，从`Exercise 02`中引入三个源文件。您可以复制之前的文件。
- en: Copy `Steps.java`, `DailyGoal.java`, and `WeeklySteps.java` into this project.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Steps.java`、`DailyGoal.java`和`WeeklySteps.java`复制到这个项目中。
- en: 'Now, let''s have a look at the three files. First, here''s `Steps.java`:'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，让我们看看这三个文件。首先，这是`Steps.java`：
- en: '[PRE43]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Here is `DailyGoal.java`:'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里是`DailyGoal.java`：
- en: '[PRE44]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'And here is `WeeklySteps.java`:'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里是`WeeklySteps.java`：
- en: '[PRE45]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Call up `Steps.java` in the IntelliJ editor window.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在IntelliJ编辑器窗口中调用`Steps.java`。
- en: You'll notice that a number of errors appear in the project. This is because
    Maven does not default to using Java 12\. The next step fixes this.
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您会注意到项目中出现了一些错误。这是因为Maven默认不使用Java 12。下一步将解决这个问题。
- en: Call up `pom.xml` in the IntelliJ editor window.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在IntelliJ编辑器窗口中调用`pom.xml`。
- en: 'Enter the following after `groupId`, `artifactId`, and `version`:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`groupId`、`artifactId`和`version`之后输入以下内容：
- en: '[PRE46]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: As you enter this configuration, notice how IntelliJ offers to help you type
    in the XML elements.
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当您输入此配置时，注意IntelliJ如何提供帮助您输入XML元素。
- en: When you finish, IntelliJ will display an alert that Maven projects need to
    be imported. Click on `Import Changes`.
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您完成时，IntelliJ将显示一个警告，表明Maven项目需要导入。单击`导入更改`。
- en: The red error lines for `Steps` and `WeeklySteps` should disappear.
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Steps`和`WeeklySteps`的红色错误行应该消失。'
- en: You should now be able to build your project. This is covered in *Exercise 07,
    Building the Maven Project.*
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您应该能够构建您的项目。这将在*练习07，构建Maven项目*中介绍。
- en: 'Exercise 7: Building the Maven Project'
  id: totrans-274
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习7：构建Maven项目
- en: Now that we have added the Java sources, we will build the Maven project.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经添加了Java源代码，我们将构建Maven项目。
- en: First, go to the `steps` project, and then click on the `Maven` tab near the
    top-right corner of the IntelliJ window.
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，转到`steps`项目，然后单击IntelliJ窗口右上角附近的`Maven`选项卡。
- en: Expand the `steps` project.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开`steps`项目。
- en: Expand `Lifecycle`.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开`生命周期`。
- en: 'You will now see a list of Maven goals, as shown in *Figure 6.5*:'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您现在将看到一个Maven目标列表，如图*图6.5*所示：
- en: '![Figure 6.5: IntelliJ''s Maven pane'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 6.5：IntelliJ 的 Maven 选项卡'
- en: '](img/C13927_06_05.jpg)'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C13927_06_05.jpg)'
- en: 'Figure 6.5: IntelliJ''s Maven pane'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.5：IntelliJ 的 Maven 选项卡
- en: Double-click on package. In the `Run` pane, you will see a lot of output. Maven
    is a very verbose tool by default. The project is now built.
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击 `package`。在 `运行` 窗格中，你会看到很多输出。Maven 默认是一个非常冗长的工具。项目现在已构建。
- en: Look in the target directory. You will see the output of the build.
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看目标目录。你会看到构建的输出。
- en: Maven creates a JAR file named steps-`1.0-SNAPSHOT.jar`. This holds all the
    compiled `.class` files.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 创建的 JAR 文件名为 steps-`1.0-SNAPSHOT.jar`。它包含了所有编译后的 `.class` 文件。
- en: The Maven-created JAR file is not an executable JAR, though. *Exercise 08*,
    *Creating an Executable JAR with Maven* will show you how to configure Maven to
    create an executable JAR.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Maven 创建的 JAR 文件并不是可执行的 JAR 文件。*练习 08*，*使用 Maven 创建可执行 JAR* 将会展示如何配置 Maven
    以创建一个可执行 JAR。
- en: 'Exercise 8: Creating an Executable JAR with Maven'
  id: totrans-287
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 8：使用 Maven 创建可执行 JAR
- en: In this exercise, we will create an executable JAR with Maven.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将使用 Maven 创建一个可执行 JAR。
- en: In the `Steps` project, call up `pom.xml` in the IntelliJ editor window.
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `步骤` 项目中，在 IntelliJ 编辑器窗口中打开 `pom.xml`。
- en: 'Enter the following after the `<plugin>` section for the Maven compiler plugin:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Maven 编译器插件的 `<plugin>` 部分之后输入以下内容：
- en: '[PRE47]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: This configuration brings in the Maven shade plugin, which provides one of the
    main ways to create an executable JAR. The shade plugin will also create a JAR
    with all the necessary dependencies, such as third-party libraries, which makes
    this Maven plugin pretty handy.
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此配置引入了 Maven shade 插件，它提供了创建可执行 JAR 的主要方法之一。shade 插件还会创建一个包含所有必要依赖项的 JAR 文件，例如第三方库，这使得这个
    Maven 插件非常实用。
- en: Run the package goal in the `Maven` pane.
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Maven` 选项卡中运行 `package` 目标。
- en: You will see a lot more output.
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你将看到很多输出。
- en: Switch to the `Terminal` pane.
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 `终端` 窗格。
- en: 'Change to the `target` directory:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 `target` 目录：
- en: '[PRE48]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Run the executable JAR:'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行可执行 JAR：
- en: '[PRE49]'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'You will see output such as the following:'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你将看到如下输出：
- en: '[PRE50]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: There is a lot more to Maven. This exercise has just touched the surface of
    this build tool.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 有很多内容。这个练习只是触及了构建工具的表面。
- en: Note
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Refer to [https://packt.live/33Iqprj](https://packt.live/33Iqprj) for a number
    of tutorials on Maven.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考 [https://packt.live/33Iqprj](https://packt.live/33Iqprj) 了解有关 Maven 的多个教程。
- en: Using Gradle
  id: totrans-305
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Gradle
- en: While Maven can do a lot for you, it is often inflexible and confusing, especially
    for larger projects. Trying to solve those problems led to the creation of Gradle.
    For example, in Maven, each POM file builds one thing, such as a JAR file. With
    Gradle, you can perform additional tasks with the same build file (Gradle's equivalent
    of a POM file).
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Maven 可以为你做很多事情，但它通常不够灵活，有时还会让人困惑，尤其是在大型项目中。试图解决这些问题导致了 Gradle 的诞生。例如，在 Maven
    中，每个 POM 文件构建一个东西，比如一个 JAR 文件。使用 Gradle，你可以使用同一个构建文件（Gradle 的 POM 文件等价物）执行额外的任务。
- en: Gradle is a lot more flexible than Maven, and generally—but not always—easier
    to understand.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: Gradle 比 Maven 更灵活，通常——但并非总是——更容易理解。
- en: 'Exercise 9: Creating a Gradle Project'
  id: totrans-308
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 9：创建 Gradle 项目
- en: In this exercise, we will create a Gradle project.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将创建一个 Gradle 项目。
- en: First, go to IntelliJ, and, in the `File` menu, select `New` and then `Project`.
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，打开 IntelliJ，然后在 `文件` 菜单中选择 `新建`，然后选择 `项目`。
- en: 'Select `Gradle` and, in the right-hand pane, leave Java checked, as shown in
    *Figure 6.6*:![Figure 6.6: Selecting Gradle when creating a new project'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '选择 `Gradle`，在右侧窗格中，保持 Java 选中，如图 *图 6.6* 所示：![图 6.6: 创建新项目时选择 Gradle'
- en: '](img/C13927_06_06.jpg)'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C13927_06_06.jpg)'
- en: 'Figure 6.6: Selecting Gradle when creating a new project'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.6：创建新项目时选择 Gradle
- en: 'Click `Next`. Enter `GroupId`, `ArtifactId`, and `Version`, much like you did
    for the Maven project, as shown in *Figure 6.7*:![Figure 6.7: Entering GroupId,
    ArtifactId, and Version'
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '点击 `下一步`。输入 `GroupId`、`ArtifactId` 和 `Version`，就像你在 Maven 项目中做的那样，如图 *图 6.7*
    所示：![图 6.7: 输入 GroupId、ArtifactId 和 Version'
- en: '](img/C13927_06_07.jpg)'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C13927_06_07.jpg)'
- en: 'Figure 6.7: Entering GroupId, ArtifactId, and Version'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '图 6.7: 输入 GroupId、ArtifactId 和 Version'
- en: Enter `com.packtpub.steps` for `GroupId`.
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 `GroupId` 输入 `com.packtpub.steps`。
- en: Enter `steps-gradle` for `ArtifactId`.
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 `ArtifactId` 输入 `steps-gradle`。
- en: Leave the version information at `1.0-SNAPSHOT`.
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将版本信息保留在 `1.0-SNAPSHOT`。
- en: Note that Gradle uses the same mechanism as Maven for identifying dependencies.
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，Gradle 使用与 Maven 相同的机制来识别依赖项。
- en: Click `Next`.
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 `下一步`。
- en: Leave all the default options. Create a separate module for each source set,
    and use the default gradle wrapper.
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保留所有默认选项。为每个源集创建一个单独的模块，并使用默认的 gradle wrapper。
- en: Click `Next`.
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 `下一步`。
- en: On the next screen, it will default the IntelliJ project name to steps-gradle
    (from `ArtifactId`). Select a project location on disk and then click `Finish`.
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个屏幕上，IntelliJ 会默认将 IntelliJ 项目名称设置为 steps-gradle（从 `ArtifactId`）。在磁盘上选择一个项目位置，然后点击
    `Finish`。
- en: IntelliJ will build things for a bit, and then you can look at the new project
    directory.
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: IntelliJ 会构建一段时间，然后你可以查看新的项目目录。
- en: IntelliJ creates Gradle projects along very similar lines to Maven projects.
    You will see the same `main` and `test` folders inside `src`, for example.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: IntelliJ 创建的 Gradle 项目与 Maven 项目非常相似。例如，你会在 `src` 里面看到相同的 `main` 和 `test` 文件夹。
- en: 'You''ll also see two new files:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 你还会看到两个新文件：
- en: '`build.gradle` provides the main configuration file for Gradle.'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`build.gradle` 文件为 Gradle 提供了主要的配置文件。'
- en: '`settings.gradle` contains some additional settings.'
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`settings.gradle` 包含一些额外的设置。'
- en: 'The `build.gradle` file generated by IntelliJ holds the following configuration:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: IntelliJ 生成的 `build.gradle` 文件包含以下配置：
- en: '[PRE51]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Exercise 10: Building an Executable JAR with Gradle'
  id: totrans-332
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 10：使用 Gradle 构建可执行 JAR
- en: In this exercise, we'll add the same three Java classes as used in the Maven
    example, and then configure the `build.gradle` file to create an executable JAR
    file. We'll work in the `steps-gradle` project created in the previous exercise.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将添加与 Maven 示例中相同的三个 Java 类，然后配置 `build.gradle` 文件以创建一个可执行 JAR 文件。我们将在这个之前练习中创建的
    `steps-gradle` 项目中工作。
- en: In the `steps-gradle` project, go to the `src/main/java` folder.
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `steps-gradle` 项目中，转到 `src/main/java` 文件夹。
- en: Right-click, and select `New` and then `Package`.
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击，然后选择 `New` 并选择 `Package`。
- en: Enter `com.packtpub.steps` as the package name.
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将包名输入为 `com.packtpub.steps`。
- en: Next, bring in the three source files from `Exercise 02`. You can copy the files
    from before.
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，从 `Exercise 02` 中引入三个源文件。你可以复制之前的文件。
- en: Call up the `build.gradle` file in the IntelliJ text editor.
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 IntelliJ 文本编辑器中调用 `build.gradle` 文件。
- en: 'Set `sourceCompatibility` to 12:'
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `sourceCompatibility` 设置为 12：
- en: '[PRE52]'
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Add the following section at the end of the `build.gradle` file:'
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `build.gradle` 文件的末尾添加以下部分：
- en: '[PRE53]'
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Click on the `Gradle` tab near the top-right corner of the IntelliJ window.
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 IntelliJ 窗口右上角附近的 `Gradle` 选项卡。
- en: Expand the `steps-gradle` project, then `Tasks`, and then `build`.
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开并进入 `steps-gradle` 项目，然后是 `Tasks`，再然后是 `build`。
- en: Double-click on `ASSEMBLE` to build the project.
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击 `ASSEMBLE` 来构建项目。
- en: You'll see that Gradle outputs much less text than Maven. When it's done, you'll
    see a build directory. This is similar to the target directory used by Maven.
    The Java `.class` files and JAR files are placed in the build directory.
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你会看到 Gradle 输出的文本比 Maven 少得多。完成后，你会看到一个构建目录。这与 Maven 使用的目标目录类似。Java `.class`
    文件和 JAR 文件都放在构建目录中。
- en: Switch to the `Terminal` pane.
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 `Terminal` 面板。
- en: 'Change to the `build/libs` directory:'
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 `build/libs` 目录：
- en: '[PRE54]'
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Run the executable JAR:'
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行可执行 JAR：
- en: '[PRE55]'
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: You should see the same output as before.
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该会看到与之前相同的输出。
- en: As with Maven, there are a lot more things you can do with Gradle.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Maven 一样，你可以用 Gradle 做很多事情。
- en: Note
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 备注
- en: You can read more about Gradle at [https://packt.live/2P3Hjg2](https://packt.live/2P3Hjg2).
    You can find more on how Gradle handles Java projects at [https://packt.live/2Mv5CBZ](https://packt.live/2Mv5CBZ).
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [https://packt.live/2P3Hjg2](https://packt.live/2P3Hjg2) 上了解更多关于 Gradle
    的信息。你可以在 [https://packt.live/2Mv5CBZ](https://packt.live/2Mv5CBZ) 上找到更多关于 Gradle
    处理 Java 项目的信息。
- en: Using Third-Party Libraries
  id: totrans-356
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用第三方库
- en: One of the best things about developing with Java is the thousands of open source
    third-party libraries available. A third-party library is a group of ready-made
    packages that you can use in your own programs. This means you can implement specific
    functionality without having to code it from scratch.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Java 进行开发最美好的事情之一是成千上万的开源第三方库可用。第三方库是一组现成的包，你可以在自己的程序中使用。这意味着你可以实现特定的功能，而无需从头编写代码。
- en: Everything from the Spring Boot framework to logging libraries and simple utilities
    can be found online. And, to make things easier, both the Maven and Gradle build
    tools support the downloading of third-party libraries and the incorporation of
    these libraries into your project.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Spring Boot 框架到日志库和简单的实用工具，你都可以在网上找到。而且，为了使事情更简单，Maven 和 Gradle 构建工具都支持下载第三方库并将这些库集成到你的项目中。
- en: Finding the Libraries
  id: totrans-359
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查找库
- en: There is a huge set of third-party libraries available for Java. To see a description
    of some, a good starting point is [https://packt.live/2qnRAcx](https://packt.live/2qnRAcx),
    which lists many Java libraries and frameworks.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Java，有大量的第三方库可用。要查看一些库的描述，一个好的起点是 [https://packt.live/2qnRAcx](https://packt.live/2qnRAcx)，它列出了许多
    Java 库和框架。
- en: The `Spring`, `Hibernate`, `Apache`, `Eclipse`, and `BouncyCastle` projects
    provide a huge number of libraries. They can all be found at the link mentioned
    previously, and are good places to search for whatever functionality you're looking
    for.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '`Spring`、`Hibernate`、`Apache`、`Eclipse` 和 `BouncyCastle` 项目提供了大量的库。它们都可以在之前提到的链接中找到，并且是寻找所需功能的好地方。'
- en: 'Before selecting an open source library, you will want to take a look at the
    following topics:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择开源库之前，您可能想查看以下主题：
- en: '**Documentation** – Good documentation not only helps you learn how to use
    the library, but acts as a good indicator for the maturity of the library. Can
    you understand how to use the library? If not, this library is probably not for
    you.'
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文档** – 良好的文档不仅有助于您学习如何使用库，而且可以作为库成熟度的良好指标。您能理解如何使用库吗？如果不能，这个库可能不适合您。'
- en: '**Community** – An active community shows that the library is being used. It
    also provides a glimpse into how the library''s maintainers treat people who ask
    questions. Look for mailing lists and discussion groups about the library.'
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**社区** – 一个活跃的社区表明库正在被使用。它还提供了对库维护者如何对待提问者的一个了解。寻找有关该库的邮件列表和讨论组。'
- en: '**Momentum** – Check to see how often the library gets updates. You''ll want
    to choose libraries that are under active development.'
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动力** – 检查库更新的频率。您希望选择处于积极开发中的库。'
- en: '**Does it work for you**? – Always try each library to see that it actually
    works for your project and that you can understand how to use the library.'
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**它适合您吗**？ – 总是尝试每个库，以确保它确实适用于您的项目，并且您能够理解如何使用该库。'
- en: '**License** – Can you legally use this library? Make sure first. Refer to [https://packt.live/2MTZfqD](https://packt.live/2MTZfqD)
    for a listing of the most common open source licenses. Read the license and see
    whether this will work for your organization. If the license looks too weird or
    restrictive, avoid the library.'
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**许可证** – 您能否合法使用这个库？首先确保这一点。参考 [https://packt.live/2MTZfqD](https://packt.live/2MTZfqD)
    了解最常见的开源许可证列表。阅读许可证，看看它是否适合您的组织。如果许可证看起来很奇怪或限制性太强，请避免使用该库。'
- en: Note
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: Always look at the license for any open source library to make sure your organization
    can legally use the library in the manner you want to use it.
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 总是查看任何开源库的许可证，以确保您的组织可以合法地以您想要的方式使用该库。
- en: Once you find a library that looks promising, the next step is to import the
    library into your application.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦找到一个看起来很有希望的库，下一步就是将库导入到您的应用程序中。
- en: Adding a Project Dependency
  id: totrans-371
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加项目依赖
- en: 'A third-party library that you include in your project is called a dependency.
    Think of this as meaning your project now depends on this library. Both Maven
    and Gradle identify dependencies similarly. You''ll need the following:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 您在项目中包含的第三方库被称为依赖项。将此视为您的项目现在依赖于这个库。Maven 和 Gradle 都以类似的方式识别依赖项。您需要以下内容：
- en: GroupId
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GroupId
- en: ArtifactId
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ArtifactId
- en: Version information
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本信息
- en: A repository where the build tool can download the library
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个构建工具可以从中下载库的仓库
- en: The most commonly used third-party open source libraries can be downloaded from
    a large repository called `Maven Central`, located at [https://packt.live/2pvXmZs](https://packt.live/2pvXmZs).
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 最常用的第三方开源库可以从一个名为 `Maven Central` 的庞大仓库中下载，该仓库位于 [https://packt.live/2pvXmZs](https://packt.live/2pvXmZs)。
- en: You can search for the group, artifact, and version information on a handy site
    located at [https://packt.live/33UlfZF](https://packt.live/33UlfZF).
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在位于 [https://packt.live/33UlfZF](https://packt.live/33UlfZF) 的便捷网站上搜索组、工件和版本信息。
- en: A good, useful open source library is `Apache Commons Lang`, which contains
    handy classes for working with strings and numbers.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好用的开源库是 `Apache Commons Lang`，它包含了一些方便的类，用于处理字符串和数字。
- en: 'Exercise 11: Adding a Third-Party Library Dependency'
  id: totrans-380
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 11：添加第三方库依赖项
- en: In this exercise, we'll add the Apache Commons Lang library to the Gradle project
    created in *Exercises 09 and 10* previously. In these exercises, we'll add just
    one to simplify the entire setup.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将向之前在 *练习 09 和 10* 中创建的 Gradle 项目添加 Apache Commons Lang 库。在这些练习中，我们将只添加一个，以简化整个设置。
- en: 'In large, complex projects, you will often see a lot of dependencies. The concepts
    used here apply when you start adding more dependencies:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 在大型、复杂的项目中，你经常会看到很多依赖项。这里使用的概念在你开始添加更多依赖项时同样适用：
- en: Search on [https://packt.live/33UlfZF](https://packt.live/33UlfZF) for Apache
    Commons Lang. You should find the page on this library at [https://packt.live/33JnQ8n](https://packt.live/33JnQ8n).
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[https://packt.live/33UlfZF](https://packt.live/33UlfZF)上搜索Apache Commons Lang。你应该能在[https://packt.live/33JnQ8n](https://packt.live/33JnQ8n)找到这个库的页面。
- en: Look for the latest released version. At the time of writing, the version is
    3.8.1.
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找最新发布的版本。在撰写本文时，版本是3.8.1。
- en: Notice how many releases there are. This library seems to be under active development.
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意有多少个发布版本。这个库似乎正在积极开发中。
- en: Click on the `3.8.1` link.
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`3.8.1`链接。
- en: Look at the license information. The Apache license is compatible with most
    organizations.
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看许可信息。Apache许可证与大多数组织兼容。
- en: On this page, you will see a set of tabs for different Java build tools, with
    the Maven tab selected by default. Inside the tab, you'll see the group, artifact,
    and version information in the format used in a Maven POM file.
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个页面上，你会看到一组用于不同Java构建工具的标签页，默认选中Maven标签页。在标签页内，你会看到在Maven POM文件中使用的格式显示的组、工件和版本信息。
- en: Click on the `Gradle` tab to see the same information formatted for Gradle,
    as shown in *Figure 6.8*:![](img/C13927_06_08.jpg)
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`Gradle`选项卡以查看格式化的相同信息，如图6.8所示：![](img/C13927_06_08.jpg)
- en: 'Figure 6.8: Using the Gradle tab to see the Gradle dependency information'
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.8：使用Gradle选项卡查看Gradle依赖信息
- en: Copy this text and add it to the dependencies block in your `build.gradle` file.
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制此文本并将其添加到你的`build.gradle`文件中的依赖块。
- en: 'Change the word *compile* to *implementation*:'
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将单词`*compile*`改为`*implementation*`：
- en: '[PRE56]'
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: The compile dependency in Gradle is replaced by the implementation dependency
    in more recent versions of Gradle.
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Gradle的较新版本中，编译依赖已被实现依赖所取代。
- en: In the IntelliJ alert that states that Gradle projects need to be imported,
    click `Import Changes`.
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在IntelliJ的提示需要导入Gradle项目的警告中，点击`导入更改`。
- en: We now have the library in the project. We next need to do two things. First,
    we need to configure Gradle to build an executable JAR with all the dependencies.
    Second, we need to use the new dependency—the new library—in our code.
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们已经在项目中有了这个库。接下来我们需要做两件事。首先，我们需要配置Gradle以构建一个包含所有依赖项的可执行JAR文件。其次，我们需要在我们的代码中使用这个新依赖项——这个新库。
- en: The next step is to add the Gradle shadow plugin to the project. This plugin
    combines your code in a project (along with any third-party libraries and other
    dependencies) into a single JAR file that holds everything needed.
  id: totrans-397
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下一步是将Gradle shadow插件添加到项目中。此插件将项目中的代码（以及任何第三方库和其他依赖项）合并到一个单独的JAR文件中，其中包含所需的一切。
- en: Note
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: You can find more information on the Gradle shadow plugin at [https://packt.live/33Irb7H](https://packt.live/33Irb7H)
    and [https://packt.live/31qGIYs](https://packt.live/31qGIYs).
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以在[https://packt.live/33Irb7H](https://packt.live/33Irb7H)和[https://packt.live/31qGIYs](https://packt.live/31qGIYs)找到关于Gradle
    shadow插件的更多信息。
- en: Call up `build.gradle` in the IntelliJ text editor.
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在IntelliJ文本编辑器中调用`build.gradle`。
- en: 'Replace the `plugins` block with the following:'
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`plugins`块替换为以下内容：
- en: '[PRE57]'
  id: totrans-402
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: This tells Gradle to bring the shadow plugin into our project.
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这告诉Gradle将shadow插件引入我们的项目。
- en: Go to the Gradle pane in IntelliJ. Click the `Refresh` icon (the two circular
    arrows).
  id: totrans-404
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往IntelliJ中的Gradle面板。点击`刷新`图标（两个圆形箭头）。
- en: Expand the new shadow tasks.
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开新的shadow任务。
- en: Double-click on `shadowJar`.
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击`shadowJar`。
- en: This will build a new JAR file, `steps-gradle-1.0-SNAPSHOT-all.jar`, that contains
    the project code, along with all the dependencies. Notice that the format is artifact
    Id – version – `all.jar`.
  id: totrans-407
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将构建一个新的JAR文件，`steps-gradle-1.0-SNAPSHOT-all.jar`，其中包含项目代码以及所有依赖项。注意，格式是工件ID
    - 版本 - `all.jar`。
- en: Switch to the `Terminal` pane.
  id: totrans-408
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到`终端`面板。
- en: 'Enter the following commands:'
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令：
- en: '[PRE58]'
  id: totrans-410
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: You will then see the output of the `Steps` application.
  id: totrans-411
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你将看到`Steps`应用程序的输出。
- en: In this exercise, we have added a third-party dependency library. Next, we'll
    use the new library in the application.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们添加了一个第三方依赖库。接下来，我们将在应用程序中使用这个新库。
- en: Using the Apache Commons Lang Library
  id: totrans-413
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Apache Commons Lang库
- en: When using a new library, it is usually good to start with a look at the documentation.
    For a Java utility library, Javadoc is a good first place to start.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用新库时，通常最好先查看文档。对于Java实用库，Javadoc是一个好的起点。
- en: For the Apache Commons Lang library, you can find the Javadoc at [https://packt.live/32wkrJR](https://packt.live/32wkrJR).
    Open the first package, `org.apache.commons.lang3`.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Apache Commons Lang 库，您可以在 [https://packt.live/32wkrJR](https://packt.live/32wkrJR)
    找到 Javadoc。打开第一个包，`org.apache.commons.lang3`。
- en: In this package, you'll find a really handy set of utility classes, including
    the excellent `StringUtils` class. `StringUtils` provides a number of methods
    for working with strings. And, better yet, the methods are null safe, so if you
    pass in a null string, your code won't throw an exception.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个包中，您会发现一组非常实用的实用工具类，包括出色的 `StringUtils` 类。`StringUtils` 提供了处理字符串的多种方法。而且，更好的是，这些方法是空安全，所以如果您传递一个
    null 字符串，您的代码不会抛出异常。
- en: Open the `StringUtils` Javadoc. You will see a lot of good documentation relating
    to this class.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `StringUtils` 的 Javadoc。您将看到许多与这个类相关的良好文档。
- en: 'Exercise 12: Using the Apache Commons Lang Library'
  id: totrans-418
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 12：使用 Apache Commons Lang 库
- en: In this exercise, we'll use two methods of the handy `StringUtils` class, `leftPad()`
    and `rightPad()`. These methods ensure that a string has a certain length by padding
    space characters on the left or right.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将使用 `StringUtils` 类的两个实用方法，`leftPad()` 和 `rightPad()`。这些方法通过在左侧或右侧填充空格字符来确保字符串具有特定的长度。
- en: 'We''ll use these methods to make the `Steps` application output look a bit
    better:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用这些方法使 `Steps` 应用程序的输出看起来更好：
- en: In IntelliJ, call up the `WeeklySteps` class into the text editor.
  id: totrans-421
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 IntelliJ 中，将 `WeeklySteps` 类调入文本编辑器。
- en: Scroll down to the `format()` method.
  id: totrans-422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动到 `format()` 方法。
- en: 'Replace that method with the following code:'
  id: totrans-423
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将该方法替换为以下代码：
- en: '[PRE59]'
  id: totrans-424
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: This code pads out the days of the week to a consistent length. It does the
    same to the daily steps count.
  id: totrans-425
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这段代码将一周中每一天的日期填充到一致长度。它对每日步数计数也做了同样处理。
- en: Run the `shadowJar` build task again from the Gradle pane.
  id: totrans-426
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次从 Gradle 面板运行 `shadowJar` 构建任务。
- en: 'In the Terminal pane, in the `build/libs` directory, run the following command:'
  id: totrans-427
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端面板中，在 `build/libs` 目录下，运行以下命令：
- en: '[PRE60]'
  id: totrans-428
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'You will see output that is now better aligned:'
  id: totrans-429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您将看到现在输出已经对齐得更好：
- en: '[PRE61]'
  id: totrans-430
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Just about every Java project you work on will require more than one dependency.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎您所工作的每个 Java 项目都将需要多个依赖项。
- en: Using Modules
  id: totrans-432
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用模块
- en: Java packages allow you to gather together related classes (and other types).
    You can then bundle a number of packages into a JAR file, creating a library you
    can use.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: Java 包允许您将相关的类（以及其他类型）聚集在一起。然后您可以将多个包打包成一个 JAR 文件，创建一个可以使用的库。
- en: Modules go a step further and allow you encapsulate your libraries efficiently.
    This means you can declare which of a module's public classes (and other types)
    can be accessed outside the module.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 模块更进一步，允许您有效地封装您的库。这意味着您可以声明模块的哪些公共类（以及其他类型）可以在模块外部访问。
- en: Note
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Java version 9 and higher supports modules called the **Java Platform Module
    System**, or **JPMS**.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: Java 9 及更高版本支持称为 **Java 平台模块系统**（**JPMS**）的模块。
- en: In addition, modules can declare explicit dependencies on other modules. This
    helps clean up the mess of Java classpaths. Instead of searching the classpath
    for classes, a module will search directly for a named dependent module. This
    really helps when you bring in a lot of dependencies. With a large Java application,
    some libraries may depend on different versions of the same libraries, causing
    all sorts of problems. Instead, each module allows you to isolate its dependencies
    from the rest of the application.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，模块可以声明对其他模块的显式依赖。这有助于清理 Java 类路径的混乱。而不是在类路径中搜索类，模块将直接搜索一个命名的依赖模块。这在引入大量依赖项时非常有帮助。对于大型
    Java 应用程序，某些库可能依赖于同一库的不同版本，导致各种问题。相反，每个模块都允许您将它的依赖项与其他应用程序部分隔离开来。
- en: Modules look in what is called a module path. The module path just lists modules,
    not classes.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 模块会查找所谓的模块路径。模块路径只列出模块，不列出类。
- en: Within a module, packages in a module can be exported. If a package in a module
    is not exported, then no other module can use that package.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个模块中，可以导出模块中的包。如果一个模块中的包没有被导出，那么其他模块就不能使用该包。
- en: A module that wants to use code from another module must indicate that it requires
    the other module. Inside a module, your code can only make use of packages that
    are exported in the dependent module.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 想要从另一个模块使用代码的模块必须指明它需要该模块。在一个模块内部，您的代码只能使用依赖模块中导出的包。
- en: Note
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: When you start using modules, you'll want to convert each Java library you create
    into one or more modules. You can only have one module per JAR file.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始使用模块时，你将希望将你创建的每个Java库转换为一个或多个模块。每个JAR文件只能有一个模块。
- en: Note
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The original project that created Java's module system was called PROJECT JIGSAW.
    Refer to [https://packt.live/32yH1le](https://packt.live/32yH1le) for more on
    modules. A big part of the effort was to add modules to the **Java Development
    Kit**, or **JDK**. This allows you to create smaller JDKs aimed at mobile platforms,
    for example.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 创建Java模块系统的原始项目被称为PROJECT JIGSAW。有关模块的更多信息，请参阅[https://packt.live/32yH1le](https://packt.live/32yH1le)。这项工作的大部分努力是向**Java开发工具包**（或**JDK**）添加模块。这允许你创建针对移动平台等的小型JDK。
- en: To see all the modules that make up the JDK, use the java command.
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看构成JDK的所有模块，请使用java命令。
- en: 'From the IntelliJ Terminal pane, run the following command:'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 从IntelliJ终端面板运行以下命令：
- en: '[PRE62]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'You will see a lot of modules in the output (shortened here):'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在输出中看到很多模块（这里已缩短）：
- en: '[PRE63]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: The modules with names starting with java are classes that we consider part
    of the JDK, that is, classes you can use in your Java code. Modules with names
    starting with jdk are modules that are required internally by the JDK. You should
    not use those classes.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 以java开头的模块是我们认为属于JDK的类，即你可以在Java代码中使用这些类的类。以jdk开头的模块是JDK内部需要的模块。你不应该使用这些类。
- en: Creating Modules
  id: totrans-451
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建模块
- en: A module groups together a set of Java packages and additional resources (files).
    Each module requires a `module-info.java` file, which specifies what the module
    exports as well as what other modules are required.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 一个模块将一组Java包和附加资源（文件）组合在一起。每个模块都需要一个`module-info.java`文件，该文件指定了模块导出什么以及需要哪些其他模块。
- en: 'Exercise 13: Creating a Project for a Module'
  id: totrans-453
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习13：为模块创建项目
- en: 'In this exercise, we''ll create an IntelliJ project that we can use to explore
    Java modules and then create a Java module inside the project:'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将创建一个IntelliJ项目，我们可以使用它来探索Java模块，然后在项目中创建一个Java模块：
- en: From the `File` menu, select `New` and then `Project…`.
  id: totrans-455
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`文件`菜单中选择`New`，然后选择`Project…`。
- en: Select a `Java` project and click `Next`, as shown in *Figure 6.9*:![](img/C13927_06_09.jpg)
  id: totrans-456
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个`Java`项目并点击`Next`，如图6.9所示：![](img/C13927_06_09.jpg)
- en: 'Figure 6.9: Selecting a Java project'
  id: totrans-457
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.9：选择Java项目
- en: Do not specify a project template. Click `Next`, as shown in *Figure 6.10*:![](img/C13927_06_10.jpg)
  id: totrans-458
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不要指定项目模板。点击`Next`，如图6.10所示：![](img/C13927_06_10.jpg)
- en: 'Figure 6.10: Do not select a project template'
  id: totrans-459
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.10：不要选择项目模板
- en: Name the project modules.
  id: totrans-460
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 命名项目模块。
- en: Click `Finish`. You now have an empty Java project. The next step will be to
    create a very simple module.
  id: totrans-461
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`Finish`。你现在有一个空的Java项目。下一步将是创建一个非常简单的模块。
- en: From the `File` menu, select `New` and then `Module…`.
  id: totrans-462
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`文件`菜单中选择`New`，然后选择`Module…`。
- en: Make sure Java is selected. Click `Next`.
  id: totrans-463
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保选择了Java。点击`Next`。
- en: Enter `com.packtpub.day.module` for the module name. Make sure that the content
    root and the file location both show `com.packtpub.day.module` under the modules
    folder.
  id: totrans-464
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`com.packtpub.day.module`作为模块名输入。确保内容根和文件位置都在模块文件夹下的`com.packtpub.day.module`。
- en: Click `Finish`. You now have a module.
  id: totrans-465
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`Finish`。你现在有一个模块了。
- en: It can be confusing at first that the module name, `com.packtpub.day.module`,
    gets created as a single directory.
  id: totrans-466
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 初始时可能会觉得模块名`com.packtpub.day.module`被创建为一个单独的目录可能会令人困惑。
- en: Note
  id: totrans-467
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: Normally, with packages, each dot in the name indicates a separate subfolder.
    With modules, you get a folder name with dots.
  id: totrans-468
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通常，在包中，每个点号在名称中代表一个单独的子文件夹。在模块中，你得到一个带有点号的文件夹名。
- en: IntelliJ has created a folder named `com.packtpub.day`.module in the project,
    and also an `src` folder under `com.packtpub.day.module`.
  id: totrans-469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: IntelliJ在项目中创建了一个名为`com.packtpub.day`.module的文件夹，并在`com.packtpub.day.module`下创建了一个`src`文件夹。
- en: Right-click on the `src` folder under `com.packtpub.day` module.
  id: totrans-470
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`com.packtpub.day`模块下的`src`文件夹。
- en: Select `New` and then `Package`.
  id: totrans-471
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`New`，然后选择`Package`。
- en: Enter `com.packtpub.day` as the name of the package.
  id: totrans-472
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`com.packtpub.day`作为包名输入。
- en: Right-click on the new package, `com.packtpub.day`, select `New`, and then `Java
    class`. Name the class `Today`.
  id: totrans-473
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击新包`com.packtpub.day`，选择`New`，然后选择`Java class`。将类命名为`Today`。
- en: 'In the text editor window, add a method to the new class:'
  id: totrans-474
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本编辑器窗口中，向新类添加一个方法：
- en: '[PRE64]'
  id: totrans-475
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: This method returns the day of the week for the current day as a string.
  id: totrans-476
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此方法返回当前日期的星期几作为字符串。
- en: Right-click on the package `com.packtpub.day`, select `New`, and then select
    `module-info.java`.
  id: totrans-477
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击包`com.packtpub.day`，选择`New`，然后选择`module-info.java`。
- en: 'In the text editor, add the following `exports` line inside the `module` block:'
  id: totrans-478
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本编辑器中，在`module`块内添加以下`exports`行：
- en: '[PRE65]'
  id: totrans-479
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '`com.packtpub.day` module exports one package, `com.packtpub.day`. Anything
    else added to this module will be hidden.'
  id: totrans-480
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`com.packtpub.day`模块导出一个包，`com.packtpub.day`。添加到此模块的任何其他内容都将被隐藏。'
- en: Now that we have a module, the next step is to use this module in another module.
    This will show how modules can control what classes get exported for use by other
    modules, and what classes remain private within the module. The modules exist
    side by side, but both need to be included in your project's module path—the module
    equivalent of Java's classpath.
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有一个模块了，下一步是将此模块用于另一个模块。这将展示模块如何控制哪些类被导出供其他模块使用，以及哪些类在模块内部保持私有。模块并排存在，但两者都需要包含在你的项目模块路径中——这是Java类路径的模块等价物。
- en: 'Exercise 14: Creating a Second Module Using the First One'
  id: totrans-482
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习14：使用第一个模块创建第二个模块
- en: Next, we'll create a second very simple module that uses the `com.packtpub.day`
    module created previously.
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个第二个非常简单的模块，该模块使用之前创建的`com.packtpub.day`模块。
- en: From the `File` menu, select `New` and then `Module…`.
  id: totrans-484
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`文件`菜单中选择`新建`然后`模块…`。
- en: Make sure Java is selected, and then click `Next`.
  id: totrans-485
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保已选择Java，然后点击`下一步`。
- en: Name this module `com.packtpub.message.module`.
  id: totrans-486
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此模块命名为`com.packtpub.message.module`。
- en: Click `Finish`.
  id: totrans-487
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`完成`。
- en: Right-click on the `src` folder under `com.packtpub.message` module.
  id: totrans-488
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`com.packtpub.message`模块下的`src`文件夹。
- en: Select `New` and then `Package`.
  id: totrans-489
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`新建`然后`包`。
- en: Name the `package com.packtpub.message` and click `OK`.
  id: totrans-490
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`包`命名为`com.packtpub.message`并点击`确定`。
- en: Right-click on the `com.packtpub.message` package. Select `New` and `module-info.java`.
  id: totrans-491
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`com.packtpub.message`包。选择`新建`然后`module-info.java`。
- en: Right-click on the `com.packtpub.message` package. Select `New` and `Java Class`.
  id: totrans-492
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`com.packtpub.message`包。选择`新建`然后`Java类`。
- en: Name the class `Message`.
  id: totrans-493
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将类命名为`Message`。
- en: 'In the text editor, edit the `Message` class and import the `Today` class:'
  id: totrans-494
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本编辑器中，编辑`Message`类并导入`Today`类：
- en: '[PRE66]'
  id: totrans-495
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Also in the text editor, create a `main()` method as follows:'
  id: totrans-496
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本编辑器中，创建一个如下所示的`main()`方法：
- en: '[PRE67]'
  id: totrans-497
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Edit the `module-info.java` file in the `com.packtpub.message.module` module.
    Add the following `requires` statement:'
  id: totrans-498
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`com.packtpub.message.module`模块中的`module-info.java`文件。添加以下`requires`语句：
- en: '[PRE68]'
  id: totrans-499
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: The `requires` statement will show an error. We need to add the `com.packtpub.day.module`
    module as a dependency within the IntelliJ project.
  id: totrans-500
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`requires`语句将显示错误。我们需要在IntelliJ项目中将`com.packtpub.day.module`模块作为依赖项添加。'
- en: From the `File` menu, select `Project Structure`.
  id: totrans-501
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`文件`菜单中选择`项目结构`。
- en: Click on `Modules`.
  id: totrans-502
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`模块`。
- en: Select `message.module` under `com.packtpub`.
  id: totrans-503
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packtpub`下选择`message.module`。
- en: Click the `Dependencies` tab.
  id: totrans-504
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`依赖项`选项卡。
- en: Click the `+` icon at the bottom of the dialog window and select `Module Dependency…`.
  id: totrans-505
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在对话框窗口底部点击`+`图标并选择`模块依赖…`。
- en: Select com.`packtpub.day.module` and click `OK`.
  id: totrans-506
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`com.packtpub.day.module`并点击`确定`。
- en: You should see the new module dependency added, as shown in Figure 6.11.
  id: totrans-507
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该看到新模块依赖项已添加，如图6.11所示。
- en: Click `OK` in the previous dialog. The error should no longer be present.
  id: totrans-508
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在之前的对话框中点击`确定`。错误应该不再存在。
- en: In the `Message` class, click the green arrow to the left of the class definition,
    and select `Run 'Message.main()'`.
  id: totrans-509
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Message`类中，点击类定义左侧的绿色箭头，并选择`运行'Message.main()'`。
- en: 'You will see output like this:'
  id: totrans-510
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你将看到如下输出：
- en: '[PRE69]'
  id: totrans-511
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '![Figure 6.11: The IntelliJ project structure dialog showing the new module
    dependency on the com.packtpub.day.module module'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.11：IntelliJ项目结构对话框显示对com.packtpub.day.module模块的新模块依赖](img/C13927_06_11.jpg)'
- en: '](img/C13927_06_11.jpg)'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/C13927_06_11.jpg](img/C13927_06_11.jpg)'
- en: 'Figure 6.11: The IntelliJ project structure dialog showing the new module dependency
    on the com.packtpub.day.module module'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.11：IntelliJ项目结构对话框显示对com.packtpub.day.module模块的新模块依赖](img/C13927_06_11.jpg)'
- en: 'Activity 1: Tracking Summer High Temperatures'
  id: totrans-515
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动一：跟踪夏季高温
- en: Studies on changing climate have determined what summer high temperatures will
    be like in the year 2100.
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 关于气候变化的研究已经确定了2100年夏季高温将是什么样的。
- en: You can see this information for many world cities at [https://packt.live/33IrCyR](https://packt.live/33IrCyR).
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://packt.live/33IrCyR](https://packt.live/33IrCyR)上看到许多世界城市的此类信息。
- en: Create an application to display how high summer temperatures are projected
    to be in the year 2100 with no major emission cuts, or with moderate emission
    cuts.
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个应用程序，显示在不进行重大排放削减或进行适度排放削减的情况下，预计2100年夏季高温将有多高。
- en: 'To do this, follow these steps:'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成此操作，请按照以下步骤：
- en: Create a new Gradle project in IntelliJ.
  id: totrans-520
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在IntelliJ中创建一个新的Gradle项目。
- en: Bring in the Guava third-party library as a dependency. Refer to [https://packt.live/2qkLutt](https://packt.live/2qkLutt)
    for more on Guava.
  id: totrans-521
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Guava第三方库作为依赖项引入。有关Guava的更多信息，请参阅[https://packt.live/2qkLutt](https://packt.live/2qkLutt)。
- en: Create a class named `City` that holds the name of a city, the name of the country
    where the city is located, and its summer high temperature. Remember that IntelliJ
    can generate getter and setter methods for you.
  id: totrans-522
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `City` 的类，该类包含城市的名称、城市所在国家的名称以及其夏季高温。请记住，IntelliJ可以为你生成getter和setter方法。
- en: Create a class named `SummerHigh` that holds a base city, along with the city
    that most closely matches the 2100 summer projections if no emission cuts are
    made, and the city that matches the 2100 summer projections if moderate emission
    cuts are made (based on data from Climate Central).
  id: totrans-523
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `SummerHigh` 的类，该类包含一个基础城市，以及在没有减少排放的情况下最接近2100年夏季预测的城市，以及如果适度减少排放则匹配2100年夏季预测的城市（基于Climate
    Central的数据）。
- en: Create a class named `SummerHighs` to hold the overall data store. This class
    should have methods to retrieve the data by city name (regardless of case) or
    country name (regardless of case).
  id: totrans-524
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `SummerHighs` 的类来存储整体数据存储。这个类应该有通过城市名称（不考虑大小写）或国家名称（不考虑大小写）检索数据的方法。
- en: 'Use a Guava Table to hold the underlying `SummerHigh` data, using a Table like
    this:'
  id: totrans-525
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Guava Table来存储底层的 `SummerHigh` 数据，使用如下所示的Table：
- en: '[PRE70]'
  id: totrans-526
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Create a `Main` class that takes in either a city or a country name, looks up
    the appropriate data, and then prints it out. Use a command-line parameter of
    `-city` for a city lookup and `-country` for a country lookup.
  id: totrans-527
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `Main` 类，它接受一个城市或国家名称，查找适当的数据，然后打印出来。使用命令行参数 `-city` 进行城市查找，使用 `-country`
    进行国家查找。
- en: The entire code base for the project should be incorporated in an executable
    JAR. Run this JAR from the IntelliJ Terminal pane.
  id: totrans-528
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 应该将项目的整个代码库合并到一个可执行的JAR中。从IntelliJ终端面板运行此JAR。
- en: 'You should be able to run this JAR similarly to the following:'
  id: totrans-529
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该能够像以下这样运行这个JAR：
- en: '[PRE71]'
  id: totrans-530
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'You should generate output like the following:'
  id: totrans-531
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 应该生成如下所示的输出：
- en: '[PRE72]'
  id: totrans-532
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Add a temperature converter class that can output the temperatures in degrees
    Fahrenheit instead of Celsius.
  id: totrans-533
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个温度转换类，使其能够输出华氏度而不是摄氏度。
- en: Add a `-f` command-line option that tells the application to return temperatures
    in degrees Fahrenheit.
  id: totrans-534
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个 `-f` 命令行选项，告诉应用程序以华氏度返回温度。
- en: Create a class called `TempConverter` to perform the conversion.
  id: totrans-535
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `TempConverter` 的类来执行转换。
- en: 'Use the following formula to convert the unit of temperature:'
  id: totrans-536
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下公式来转换温度单位：
- en: '[PRE73]'
  id: totrans-537
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'You should then be able to run the application:'
  id: totrans-538
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该能够运行应用程序：
- en: '[PRE74]'
  id: totrans-539
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'You should then see the temperature output in degrees Fahrenheit. Here''s an
    example:'
  id: totrans-540
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该看到以华氏度输出的温度。以下是一个示例：
- en: '[PRE75]'
  id: totrans-541
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Note
  id: totrans-542
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: Refer to [https://packt.live/2pvYxbk](https://packt.live/2pvYxbk) for more information
    on the `Table` class. `row()` and `column()` methods. We use this class to allow
    lookups by city or country.
  id: totrans-543
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关 `Table` 类的更多信息，请参阅[https://packt.live/2pvYxbk](https://packt.live/2pvYxbk)。`row()`
    和 `column()` 方法。我们使用这个类来允许通过城市或国家进行查找。
- en: '**Summertime High Temperatures**'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: '**夏季高温**'
- en: Here are some selected cities from the Climate Central map. Each city is listed
    with its summertime high temperature. Feel free to include these cities in your
    program. You can add more cities from Climate Central if you like.
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 这里列出了来自Climate Central地图的一些选定城市。每个城市都列出了其夏季高温。请随意将这些城市包含在你的程序中。如果你喜欢，还可以添加更多来自Climate
    Central的城市。
- en: '**London, United Kingdom, 20.4 °C**:'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: '**伦敦，英国，20.4 °C**：'
- en: Will be like Paris, France, 22.7 °C, with moderate emission cuts.
  id: totrans-547
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将类似于巴黎，法国，22.7 °C，适度减少排放。
- en: Will be like Milan, Italy, 25.2 °C, with no emission cuts.
  id: totrans-548
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将类似于米兰，意大利，25.2 °C，没有减少排放。
- en: '**Stockholm, Sweden, 19.3 °C**:'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: '**斯德哥尔摩，瑞典，19.3 °C**：'
- en: Will be like Vilnius, Lithuania, 21.7 °C, with moderate emission cuts.
  id: totrans-550
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将类似于维尔纽斯，立陶宛，21.7 °C，适度减少排放。
- en: Will be like Kiev, Ukraine, 24.2 °C, with no emission cuts.
  id: totrans-551
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将类似于基辅，乌克兰，24.2 °C，没有减少排放。
- en: '**Barcelona, Spain, 25.7 °C**:'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: '**巴塞罗那，西班牙，25.7 °C**：'
- en: Will be like Madrid, Spain, 28.9 °C, with moderate emission cuts.
  id: totrans-553
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将类似于马德里，西班牙，28.9 °C，适度减少排放。
- en: Will be like Izmir, Turkey, 32.2 °C, with no emission cuts.
  id: totrans-554
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将类似于伊兹密尔，土耳其，32.2 °C，没有减少排放。
- en: '**New York, US, 27.7 °C**:'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: '**纽约，美国，27.7 °C**：'
- en: Will be like Belize City, Belize, 31.3 °C, with moderate emission cuts.
  id: totrans-556
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将类似于伯利兹城，伯利兹，31.3 °C，适度减少排放。
- en: Will be like Juarez, Mexico, 34.4 °C, with no emission cuts.
  id: totrans-557
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将类似于华雷斯，墨西哥，34.4 °C，没有减少排放。
- en: '**Tokyo, Japan, 26.2 °C**:'
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: '**东京，日本，26.2 °C**：'
- en: Will be like Beijing, China, 29.0 °C, with moderate emission cuts.
  id: totrans-559
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将与中国的北京一样，气温为29.0°C，有适度的排放削减。
- en: Will be like Wuhan, China, 31.2 °C, with no emission cuts.
  id: totrans-560
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将与中国的武汉一样，气温为31.2°C，没有排放削减。
- en: Note
  id: totrans-561
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: The solution to this activity can be found on page 542.
  id: totrans-562
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个活动的解决方案可以在第542页找到。
- en: Summary
  id: totrans-563
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we saw how packages allow you to better organize your code,
    which becomes essential when working on large projects. When you use classes from
    another package, you need to import these classes into your code.
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了如何通过包来更好地组织你的代码，这在处理大型项目时变得至关重要。当你使用来自另一个包的类时，你需要将这些类导入到你的代码中。
- en: When you create your own packages, place your code into packages based on the
    purpose of the code and name these packages based on your organization's internet
    domain name. For example, you might create packages called `com.packtpub.medical.report`
    and `com.packtpub.medical.heartrate`.
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建自己的包时，将你的代码放入基于代码目的的包中，并根据你组织的互联网域名来命名这些包。例如，你可能创建名为`com.packtpub.medical.report`和`com.packtpub.medical.heartrate`的包。
- en: You will often incorporate your Java code into a JAR file. A JAR file is like
    a compiled library of Java code. Executable JAR files contain the name of a Java
    class with a `main()` method that you can run with the `java-jar` command.
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: 你经常会将你的Java代码集成到一个JAR文件中。JAR文件就像是一个编译后的Java代码库。可执行JAR文件包含一个具有`main()`方法的Java类名，你可以使用`java-jar`命令来运行它。
- en: Java build tools such as Maven or Gradle help a lot when working on large projects.
    These two build tools also support downloading and using third-party open source
    Java libraries—libraries that are used in just about every large Java project.
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在大型项目中工作时，Java构建工具如Maven或Gradle非常有帮助。这两个构建工具还支持下载和使用第三方开源Java库——这些库几乎在每一个大型Java项目中都会用到。
- en: Modules form a newer way to separate code. In the next chapter, we shall cover
    relational databases and using Java with databases.
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 模块是一种新的代码分离方式。在下一章中，我们将介绍关系型数据库以及如何使用Java与数据库结合。
