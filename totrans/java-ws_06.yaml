- en: 6\. Libraries, Packages, and Modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Overview
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will introduce you to the various ways of packaging and bundling
    Java code, as well as the tools required to help build your own Java projects.
    The first step is learning how to organize your code into packages, so that you
    can build a **Java ARchive** (**JAR**) file from those packages. From there, you
    will practice creating an executable JAR file using Java build tools like Maven
    and Gradle, which will further help you to include third-party open source libraries
    in your projects. By the end of this chapter, you will be well equipped to create
    your own Java module to group your packages together.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Any sophisticated Java application will require many separate Java classes.
    Java provides several ways to help you organize your classes; one of which is
    the concept of packages. You can collect multiple compiled packages together into
    a Java library, or a **Java ARchive** (**JAR**) file. Furthermore, you can use
    modules to provide a higher level of abstraction in your code, exposing only those
    elements that you consider appropriate.
  prefs: []
  type: TYPE_NORMAL
- en: When you start to create larger applications, you'll want to take advantage
    of Java's handy build tools—of which Maven and Gradle are the most popular. Build
    tools make it easier to build large projects that might depend on other projects
    and libraries. Build tools also provide standard ways to run tests, as well as
    packaging the project.
  prefs: []
  type: TYPE_NORMAL
- en: Both Maven and Gradle help significantly with the inclusion of third-party open-source
    libraries in your applications. There are thousands of such libraries available.
  prefs: []
  type: TYPE_NORMAL
- en: Organizing Code into Packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Java packages together related classes, interfaces, enums (a data type that
    contains a data type that contains a fixed group of constants), and annotations
    (contain metadata). In other words, a package is a collection of Java types brought
    together under a common name. Using a common name makes it easier to find code
    in larger projects, and helps to keep your code separate from other, perhaps similar,
    code. For example, more than one package might contain a class named `Rectangle`,
    so referring to the appropriate package will allow you to specify which `Rectangle`
    class you're looking for. Packages allow you to organize your code, which becomes
    more and more important as you work on larger and larger applications.
  prefs: []
  type: TYPE_NORMAL
- en: Java's API includes hundreds of classes divided into packages, such as `java.math`
    and `java.net`. As you'd expect, `java.math` has mathematics-related classes,
    and `java.net` has networking-related classes.
  prefs: []
  type: TYPE_NORMAL
- en: Importing Classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you use Java classes from packages other than `java.lang`, you need to
    import them using an `import` statement. The Java compiler imports all classes
    in the `java.lang` package by default. Everything else is up to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This code imports two types from the `java.time` package, `DayOfWeek` and `LocalDateTime`.
    Now, `DayOfWeek` is a Java `enum` representing days of the week. `LocalDateTime`
    is a class that holds a date and a time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you import these types, you can use them in your code, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Exercise 1: Importing Classes'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, we will display the current day of the week and use the `java.time`
    package to extract system date and time.
  prefs: []
  type: TYPE_NORMAL
- en: In IntelliJ, select `File`, `New`, and then `Project` from the `File` menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `New Project` Dialog, select a Java project. Click `Next`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the box to create the project from a template. Click on `Command Line
    App`. Click `Next`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the project `chapter06`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the project's location, click the button with three dots (`…`), and then
    select the source folder you created previously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `com.packtpub.chapter06` as the base package name. We'll do more with
    packages later in this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click `Finish`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: IntelliJ will create a project named `chapter06`, as well as an `src` folder
    inside `chapter06`. This is where your Java code will reside. Inside this folder,
    IntelliJ will create subfolders for `com`, `packtpub`, and `chapter06`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'IntelliJ also creates a class named `Main`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Rename the class named `Main` to `Example01`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Double-click in the text editor window on the word `Main`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click and select `Refactor` | `Rename…` from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `Example01` and press *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will now see the following code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now enter the following code inside the `main()` method:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'IntelliJ should offer the option to import the two types, `DayOfWeek` and `LocalDateTime`.
    If, for some reason, you click the wrong button, you can add the following lines
    after the package statement and prior to the definition of the class:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, click on the green arrow just to the left of the text editor window that
    points to the class name, `Example01`. Select the first menu choice, `Run` `Example01.main()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Run` window, you''ll see the path to your Java program, and then some
    output such as this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You should see the current day of the week.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The package statement identifies the package in which this code resides. See
    the *Creating a Package* section later in this chapter for more information on
    this topic.
  prefs: []
  type: TYPE_NORMAL
- en: Fully Qualified Class Names
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You don''t have to use `import` statements. Instead, you can use the fully
    qualified class name, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The fully qualified name includes both the package and the type name. the following
    example would also give us the same result as the *Exercise 01*, *Importing Classes*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Usually, importing classes and types makes your code easier to read and requires
    less typing. In large projects, you will find very long package names. Placing
    these long names in front of every declaration will make your code much harder
    to read. Most Java developers will import classes, unless you have two classes
    with the same name but stored in separate packages.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Most IDEs, such as IntelliJ, can find most classes for you, and will offer to
    import the class.
  prefs: []
  type: TYPE_NORMAL
- en: Importing All Classes in a Package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can import all classes in a package using an asterisk, `*`, to represent
    all the classes in a package, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The asterisk is considered a wildcard character and imports all public types
    from the given package, in this case, `java.time`. The Java compiler will automatically
    import any types from this package that you use in your code.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Using the wildcard imports may bring in different classes to the ones you intended.
    Some packages use common class names, such as `Event`, `Duration`, or `Distance`,
    that may conflict with type names you want to use. So, if you use the wildcard
    import, you may end up with the wrong class imported. Normally, it is best to
    import only the types that you require.
  prefs: []
  type: TYPE_NORMAL
- en: '`Example03.java` shows how to use wildcard imports:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'When you run this program, you will see output like the following, depending
    on the day of the week:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Dealing with Duplicated Names
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If, for some reason, you have to use two different classes with the same name,
    you'll need to use the fully qualified class names.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you work with third-party libraries, you may find that there are multiple
    classes in your project with the same name. `StringUtils`, for example, is defined
    in multiple packages in multiple libraries. In this case, use the fully qualified
    class names to disambiguate. Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: These are two classes with the same basic name, `StringUtils`, that come from
    different third-party libraries. You will learn more about third-party libraries
    later on in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Static Imports
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many classes define constants, usually defined as `static` `final` fields. You
    can use these constants by importing the enclosing class and then referencing
    them from the class name, as shown in *Chapter 3*, *Object-Oriented Programming*.
    For example, Java defines the end of time with the `MAX` constant in the `LocalDateTime`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: '`Example04.java` shows how to statically import `LocalDateTime`. `MAX` to see
    when the universe will end, at least according to the company behind Java:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'When you run this program, you will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Creating a Package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As discussed earlier, once you start writing more complex Java programs, you
    will want to bundle your code together in a package. To create a package, you
    should observe the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Name your package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the appropriate source directory for the package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create classes and other types, as needed, in the new package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Naming Your Package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Technically, you can name your Java packages anything you want, so long as you
    stick to the rules for naming variables and types in Java. Don't use characters
    that Java will interpret as code. For example, you cannot use a hyphen, -, in
    a Java package name. The Java compiler will think you are performing subtraction.
    You cannot use Java's reserved words, such as `class`, either.
  prefs: []
  type: TYPE_NORMAL
- en: 'Typically, you''ll use your organization''s domain name in reverse for your
    package names. For example, if the domain name is `packtpub.com`, then your package
    names would start with `com.packtpub`. You will almost always want to add descriptive
    names after the domain part to allow you to organize your code. For example, if
    you were making a medical application that pulled data from a fitness tracking
    device, you might create packages such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`com.packtpub.medical.heartrate`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`com.packtpub.medical.tracker`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`com.packtpub.medical.report`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`com.packtpub.medical.ui`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use names that make sense for your organization, as well as for the purpose
    of the classes in the package.
  prefs: []
  type: TYPE_NORMAL
- en: The reason for using your organization's domain name is, in part, to prevent
    your Java packages from having the same name as packages in third-party libraries.
    The domain names are already made unique by domain name registrars. Using the
    domain names in reverse makes for more understandable names for packages as you
    delve deeper and deeper into the package tree, such as `com.packtpub.medical.report.daily.exceptions`.
    Furthermore, this convention helps separate packages from multiple organizations.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The classes provided with Java APIs reside in packages starting with `java`
    or `javax`. Don't use these names for your packages.
  prefs: []
  type: TYPE_NORMAL
- en: Generally, you'll want to group classes, interfaces, enums, and annotations
    that are related to the same package.
  prefs: []
  type: TYPE_NORMAL
- en: Directories and Packages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Java makes heavy use of directories to define packages. Every dot in a package
    name, such as `java.lang`, indicates a sub-folder.
  prefs: []
  type: TYPE_NORMAL
- en: In the IntelliJ project you created for this chapter, you also created a package
    named `com.packtpub.chapter06`. Using IntelliJ's `Project` pane, you can see the
    folders created for the package.
  prefs: []
  type: TYPE_NORMAL
- en: Click on the gear icon in the `Project` pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncheck the `Compact Middle Packages` option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will now see a folder for `com.packtpub.chapter06`, as shown in *Figure
    6.1*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.1: IntelliJ''s Project pane can show the individual folders that
    make up a Java package'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C13927_06_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.1: IntelliJ''s Project pane can show the individual folders that make
    up a Java package'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The folder structure might vary based on the number of examples you have tried
    out in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, you'll want to leave IntelliJ's `Compact Middle Packages` setting
    on, as it makes the project organization easier to see at a glance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 2: Creating a Package for a Fitness Tracking App'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We've created a package, `com.packtpub.chapter06`, that acts as a catch-all
    for examples in this chapter. In this exercise, we'll create another package to
    gather together a related set of classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'When creating an application that interacts with a fitness tracker, you want
    a package for classes that relate to tracking daily steps. Users will define a
    goal for the number of steps they want to take in a day, say 10,000\. The tracker
    will record the number of steps taken so far, along with a collection of the daily
    totals:'
  prefs: []
  type: TYPE_NORMAL
- en: In the IntelliJ Project pane for the `chapter06` project created previously,
    click the gear icon. Make sure `Flatten Packages` and `Hide Empty Middle Packages`
    are both selected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remain in the `Project` pane, and right-click on the `src` folder. Select `New`,
    and then `Package`. Enter the `com.packtpub.steps` package name, and then click
    `OK`. This is our new package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the `com.packtpub.steps` package, select `New`, and then select
    `Java Class`. Enter the `Steps` class name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following field definitions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Allow IntelliJ to import `java.time.LocalDate`, or simply enter the following
    code after the package statement and before the definition of the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Right-click within the class definition. Choose `Generate…` from the menu. Then,
    select `Constructor`. Select both `steps` and the `date`, and then click `OK`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You''ll see a brand-new constructor, as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Right-click within the class definition again. Choose `Generate…`, and then
    select `Getter and Setter`. Select both `steps` and the `date`, and then click
    `OK`. You''ll now see the getter and setter methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We now have our first class in the new package. Next, we'll create another class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Right-click on the `com.packtpub.steps` package in the `Project` pane, select
    `New`, and then select `Java Class`. Enter the `DailyGoal` class name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following field definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that we default the daily steps goal to 10,000 steps.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Right-click within the class definition. Choose `Generate…` from the menu. Then,
    select `Constructor`, followed by `dailyGoal`, and then click `OK`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Define the following method, which is used to determine whether a `Steps` object
    has achieved the daily goal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Right-click on the `com.packtpub.steps` package in the `Project` pane, select
    `New`, and then select `Java Class`. Enter the `WeeklySteps` class name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You will need to import `java.util.List` and `java.util.ArrayList`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Right-click within the class definition again. Choose `Generate…`, and then
    select `Getter and Setter`. Select both `dailySteps` and `dailyGoal`, and then
    click `OK`. You'll now see the getter and setter methods.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To use this new class, we'll add some methods to determine the best day (the
    day with the greatest number of steps), total the steps, and format the output.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Enter the following method to determine the best day for steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, enter the following method to total the weekly number of steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that both methods iterate over `dailySteps`. These two methods could be
    combined into one.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In a real fitness tracking application, you would probably have a smartphone
    or a web user interface. For this example, though, we'll simply generate a string
    of the results of the weekly steps.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Enter the following method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This method uses `StringBuilder` and `DayOfWeek`, both part of the Java API.
    An encouraging message, `YAY!`, appears with each day the user met the step goal.
    The best day also gets an uplifting message.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To help initialize the weekly step data, we''ll create a convenience method
    (a method that exists to simplify our code and reduce typing):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To test the entire step-tracking package, we''ll create a `main()` method that
    shows how everything fits together:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Normally, you would put this type of code into a unit test, which is a special
    code designed to make sure your classes and algorithms are correct. Refer to *Chapter
    18*, *Unit Testing*, for more information on unit testing.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the green arrow just to the left of the text editor window that points
    to the `WeeklySteps` class name. Select the first menu choice, `Run 'WeeklySteps.main()'`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You''ll see output along the lines of the following, for a week of fitness
    data (in the year 2021):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now that you have an idea of the basics of Java code organization, we will look
    into a special kind of file known as the Java Archive.
  prefs: []
  type: TYPE_NORMAL
- en: Building JAR Files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A JAR file, short for Java Archive, holds multiple files and provides a platform-neutral
    way to distribute Java code. For a Java library, a JAR file will contain the compiled
    .class files, and perhaps additional files, such as the configuration data, certificates,
    and image files, called resources, that are required by the library. Specialized
    versions of JAR files are used to package and deploy server-side Java applications.
  prefs: []
  type: TYPE_NORMAL
- en: A **WAR** file, short for **web archive**, contains the compiled Java code and
    resources for a web application. An **EAR** file, short for **enterprise archive**,
    contains the compiled Java code and resources for a full server-side **Java Enterprise
    Edition** (**JavaEE**) application. Under the hood, a JAR file is a compressed
    ZIP file.
  prefs: []
  type: TYPE_NORMAL
- en: 'To build a JAR file, we can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The `c` option tells the `jar` command to create a new JAR file. The `f` option
    specifies the filename of the new JAR file. This filename should appear immediately
    after the options. Finally, you list all the files to place in the JAR file, typically,
    `.class` files.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `v` option (part of `cvf`) stands for verbose; that is, it is optional,
    and tells the JAR tool to output verbose output while it works.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3: Building a JAR File'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we''ll compile the Java code for the `com.packtpub.steps`
    package and then build a JAR file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Terminal pane in IntelliJ, run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `javac` command created `.class` files in the `com/packtpub/steps` folder.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, create a JAR file with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This command will generate output because we are using the verbose option:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You'll then see the new JAR file, `chapter6.jar`, in the current directory.
    By convention, use the `.jar` filename extension for JAR files.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The name jar, and the command-line syntax, are based on a much earlier UNIX
    and Linux tool called `tar`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Like with all compressed files, we will have to decompress the JAR files too,
    before we start using them. To extract all the files from a JAR file, use the
    `jar xvf` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: In this case, `chapter6.jar` is the name of the JAR file.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The JAR command-line options are treated in order. In this case, the `f` option
    requires a filename parameter. If you add another option that also requires a
    parameter (such as `e`, mentioned later in *Exercise 04, Building an Executable
    JAR File*), then the filename needs to come before that additional parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see what is inside a JAR file, use the `jar tf` command. In this case, you
    can see inside your new JAR file by running the following command from the Terminal
    pane:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see a listing of the files in the JAR file as the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Notice how the `jar` command created a folder named `META-INF` and a file named
    `MANIFEST.MF` in that folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the `jar` command will create a `MANIFEST.MF` file with the following
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The file lists a version number, and the version of Java created that file—in
    this case, Java 11 from Oracle.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the Manifest
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `MANIFEST.MF` file is used to provide information to Java tools regarding
    the content of the JAR file. You can add versioning information, electronically
    sign the JAR file, and so on. Probably the most useful thing to add to a JAR file's
    manifest is to identify the `main` class. This option names the class with a `main()`
    method that you would want to run from the JAR file. In essence, this creates
    an executable JAR file.
  prefs: []
  type: TYPE_NORMAL
- en: 'An executable JAR file allows you to run the Java application inside the JAR
    file with a command such as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'To do this, you need to create an entry in the `MANIFEST.MF` file that defines
    the main class. For example, for the `WeeklySteps` Java class, you''d create an
    entry in the `MANIFEST.MF` file with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Exercise 4: Building an Executable JAR File'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we''ll add a Main-Class entry to the `MANIFEST.MF` file inside
    a JAR file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Recreate the JAR file with the following command (all on one line):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `e` option defines an entry point, in other words, the Main-Class header.
    Since the JAR command-line options are dealt with in a sequential order, this
    means that you provide the JAR filename first, and then the name of the main class
    (the entry point). These options can easily be mixed up.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'With this `jar` command, you''ll see output like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we can run our Java application from the JAR file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This command should generate the output shown in *Exercise 02*, *Creating a
    Package for a Fitness Tracking App*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can find out more about the jar command, as well as the other Java tools,
    at [https://packt.live/2MYsN6N](https://packt.live/2MYsN6N).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Manually building a JAR file when you have a single package isn't that difficult.
    When you start to add more and more packages though, manually building JAR files
    and manipulating the contents becomes quite cumbersome. There are much easier
    ways to do this—most notably, by using a Java build tool that can aid in making
    JAR files.
  prefs: []
  type: TYPE_NORMAL
- en: Build Tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As applications become more and more complex, you''ll find it essential to
    use a Java build tool. Build tools allow you to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Build Java applications that span multiple packages.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make your builds easier to run and maintain.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make your builds consistent.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a library or multiple libraries from your code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Download and include third-party libraries in your applications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These items just scratch the surface of what Java build tools can do for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'The two main Java build tools are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Maven**, which issues XML configuration files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Gradle**, which uses a Groovy-based, domain-specific language for configuration'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Refer to [https://packt.live/33Iqprj](https://packt.live/33Iqprj) for more on
    Maven, and [https://packt.live/35PNREO](https://packt.live/35PNREO) for more on
    Gradle.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Maven
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Maven has very specific ideas about how your software projects should be structured.
    For example, Maven expects your source code to go into a folder named `src`. In
    general, it is best not to fight Maven's expectations.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [https://packt.live/2nVNI1A](https://packt.live/2nVNI1A) for more on
    Maven's expectations about the directory structure for your projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 5: Creating a Maven Project'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'IntelliJ provides some very handy features when working with Maven. We''ll
    now use those features to create a Maven project:'
  prefs: []
  type: TYPE_NORMAL
- en: In IntelliJ, go to the `File` menu, select `New`, and then `Project…`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `New Project` dialog, select `Maven`. Then, click `Next`, as shown in
    *Figure 6.2*:![Figure 6.2: Selecting Maven when creating a Maven project'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C13927_06_02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 6.2: Selecting Maven when creating a Maven project'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'On the next screen, you''ll need to enter three values, as shown in *Figure
    6.3*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.3: Entering GroupId, ArtifactId, and Version'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13927_06_03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 6.3: Entering GroupId, ArtifactId, and Version'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For `GroupId`, enter `com.packtpub.steps`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`GroupId` in Maven identifies the overall project. Normally, you''ll use the
    main package name for your work as `GroupId`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For `ArtifactId`, enter steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`ArtifactId` is the name you want for any JAR file you create, without the
    version number. Maven will add the version information for you.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Leave the `Version` as `1.0-SNAPSHOT`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In Maven, SNAPSHOT versions represent work in progress. When you come to make
    a release, you'll normally remove the SNAPSHOT portion of the version information.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click `Next`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next screen, it will default the IntelliJ project name to steps (from
    `ArtifactId`). Select a project location on disk and then click `Finish`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You now have a Maven project.
  prefs: []
  type: TYPE_NORMAL
- en: In the `Project` pane, note the directory structure created. You will find an
    `src` folder. This holds the project source code. Under `src`, you'll see folders
    called `main` and `test`. The `main` folder is where your Java source code resides.
    The `test` folder is where your unit tests reside. Unit tests are Java classes
    that test the main code.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Refer to *Chapter 18*, *Unit Testing*, for more information on unit tests.
  prefs: []
  type: TYPE_NORMAL
- en: In both the main and test folders, you'll see folders named `java`. This indicates
    Java source code (as opposed to Groovy or Kotlin code, for example).
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 6.4* shows the directory structure with the `src/main/java` and `src/test/java`
    folders:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.4: The src/main/java and src/test/java folders for a Maven project'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C13927_06_04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.4: The src/main/java and src/test/java folders for a Maven project'
  prefs: []
  type: TYPE_NORMAL
- en: When Maven builds your project, compiling the code and building JAR files, it
    incorporates the output of the build in a folder named target.
  prefs: []
  type: TYPE_NORMAL
- en: You'll also see a file named `pom.xml`. Short for **Project Object Model**,
    **POM** provides Maven's configuration, which tells Maven what you want to build
    and how to do it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The default POM created by IntelliJ, `pom.xml`, has the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: You should see `groupId`, `artifactId`, and the version information you entered
    when creating the project in IntelliJ.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 6: Adding Java Sources to the Maven Project'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll now add the Java source to the Maven project as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Start by going to the `src/main/java` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click, select `New`, and then select `Package`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `com.packtpub.steps` as the package name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, bring in the three source files from `Exercise 02`. You can copy the files
    from before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy `Steps.java`, `DailyGoal.java`, and `WeeklySteps.java` into this project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let''s have a look at the three files. First, here''s `Steps.java`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is `DailyGoal.java`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And here is `WeeklySteps.java`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Call up `Steps.java` in the IntelliJ editor window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You'll notice that a number of errors appear in the project. This is because
    Maven does not default to using Java 12\. The next step fixes this.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Call up `pom.xml` in the IntelliJ editor window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following after `groupId`, `artifactId`, and `version`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you enter this configuration, notice how IntelliJ offers to help you type
    in the XML elements.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When you finish, IntelliJ will display an alert that Maven projects need to
    be imported. Click on `Import Changes`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The red error lines for `Steps` and `WeeklySteps` should disappear.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You should now be able to build your project. This is covered in *Exercise 07,
    Building the Maven Project.*
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 7: Building the Maven Project'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have added the Java sources, we will build the Maven project.
  prefs: []
  type: TYPE_NORMAL
- en: First, go to the `steps` project, and then click on the `Maven` tab near the
    top-right corner of the IntelliJ window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand the `steps` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand `Lifecycle`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will now see a list of Maven goals, as shown in *Figure 6.5*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.5: IntelliJ''s Maven pane'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13927_06_05.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 6.5: IntelliJ''s Maven pane'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Double-click on package. In the `Run` pane, you will see a lot of output. Maven
    is a very verbose tool by default. The project is now built.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Look in the target directory. You will see the output of the build.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Maven creates a JAR file named steps-`1.0-SNAPSHOT.jar`. This holds all the
    compiled `.class` files.
  prefs: []
  type: TYPE_NORMAL
- en: The Maven-created JAR file is not an executable JAR, though. *Exercise 08*,
    *Creating an Executable JAR with Maven* will show you how to configure Maven to
    create an executable JAR.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 8: Creating an Executable JAR with Maven'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, we will create an executable JAR with Maven.
  prefs: []
  type: TYPE_NORMAL
- en: In the `Steps` project, call up `pom.xml` in the IntelliJ editor window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following after the `<plugin>` section for the Maven compiler plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This configuration brings in the Maven shade plugin, which provides one of the
    main ways to create an executable JAR. The shade plugin will also create a JAR
    with all the necessary dependencies, such as third-party libraries, which makes
    this Maven plugin pretty handy.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run the package goal in the `Maven` pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will see a lot more output.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Switch to the `Terminal` pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change to the `target` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the executable JAR:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will see output such as the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There is a lot more to Maven. This exercise has just touched the surface of
    this build tool.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [https://packt.live/33Iqprj](https://packt.live/33Iqprj) for a number
    of tutorials on Maven.
  prefs: []
  type: TYPE_NORMAL
- en: Using Gradle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While Maven can do a lot for you, it is often inflexible and confusing, especially
    for larger projects. Trying to solve those problems led to the creation of Gradle.
    For example, in Maven, each POM file builds one thing, such as a JAR file. With
    Gradle, you can perform additional tasks with the same build file (Gradle's equivalent
    of a POM file).
  prefs: []
  type: TYPE_NORMAL
- en: Gradle is a lot more flexible than Maven, and generally—but not always—easier
    to understand.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 9: Creating a Gradle Project'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, we will create a Gradle project.
  prefs: []
  type: TYPE_NORMAL
- en: First, go to IntelliJ, and, in the `File` menu, select `New` and then `Project`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select `Gradle` and, in the right-hand pane, leave Java checked, as shown in
    *Figure 6.6*:![Figure 6.6: Selecting Gradle when creating a new project'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C13927_06_06.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 6.6: Selecting Gradle when creating a new project'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click `Next`. Enter `GroupId`, `ArtifactId`, and `Version`, much like you did
    for the Maven project, as shown in *Figure 6.7*:![Figure 6.7: Entering GroupId,
    ArtifactId, and Version'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C13927_06_07.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 6.7: Entering GroupId, ArtifactId, and Version'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Enter `com.packtpub.steps` for `GroupId`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `steps-gradle` for `ArtifactId`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Leave the version information at `1.0-SNAPSHOT`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that Gradle uses the same mechanism as Maven for identifying dependencies.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click `Next`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Leave all the default options. Create a separate module for each source set,
    and use the default gradle wrapper.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click `Next`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next screen, it will default the IntelliJ project name to steps-gradle
    (from `ArtifactId`). Select a project location on disk and then click `Finish`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: IntelliJ will build things for a bit, and then you can look at the new project
    directory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: IntelliJ creates Gradle projects along very similar lines to Maven projects.
    You will see the same `main` and `test` folders inside `src`, for example.
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll also see two new files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`build.gradle` provides the main configuration file for Gradle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`settings.gradle` contains some additional settings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `build.gradle` file generated by IntelliJ holds the following configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Exercise 10: Building an Executable JAR with Gradle'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, we'll add the same three Java classes as used in the Maven
    example, and then configure the `build.gradle` file to create an executable JAR
    file. We'll work in the `steps-gradle` project created in the previous exercise.
  prefs: []
  type: TYPE_NORMAL
- en: In the `steps-gradle` project, go to the `src/main/java` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click, and select `New` and then `Package`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `com.packtpub.steps` as the package name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, bring in the three source files from `Exercise 02`. You can copy the files
    from before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Call up the `build.gradle` file in the IntelliJ text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set `sourceCompatibility` to 12:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following section at the end of the `build.gradle` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click on the `Gradle` tab near the top-right corner of the IntelliJ window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand the `steps-gradle` project, then `Tasks`, and then `build`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on `ASSEMBLE` to build the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You'll see that Gradle outputs much less text than Maven. When it's done, you'll
    see a build directory. This is similar to the target directory used by Maven.
    The Java `.class` files and JAR files are placed in the build directory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Switch to the `Terminal` pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change to the `build/libs` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the executable JAR:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You should see the same output as before.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As with Maven, there are a lot more things you can do with Gradle.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about Gradle at [https://packt.live/2P3Hjg2](https://packt.live/2P3Hjg2).
    You can find more on how Gradle handles Java projects at [https://packt.live/2Mv5CBZ](https://packt.live/2Mv5CBZ).
  prefs: []
  type: TYPE_NORMAL
- en: Using Third-Party Libraries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the best things about developing with Java is the thousands of open source
    third-party libraries available. A third-party library is a group of ready-made
    packages that you can use in your own programs. This means you can implement specific
    functionality without having to code it from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: Everything from the Spring Boot framework to logging libraries and simple utilities
    can be found online. And, to make things easier, both the Maven and Gradle build
    tools support the downloading of third-party libraries and the incorporation of
    these libraries into your project.
  prefs: []
  type: TYPE_NORMAL
- en: Finding the Libraries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is a huge set of third-party libraries available for Java. To see a description
    of some, a good starting point is [https://packt.live/2qnRAcx](https://packt.live/2qnRAcx),
    which lists many Java libraries and frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: The `Spring`, `Hibernate`, `Apache`, `Eclipse`, and `BouncyCastle` projects
    provide a huge number of libraries. They can all be found at the link mentioned
    previously, and are good places to search for whatever functionality you're looking
    for.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before selecting an open source library, you will want to take a look at the
    following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Documentation** – Good documentation not only helps you learn how to use
    the library, but acts as a good indicator for the maturity of the library. Can
    you understand how to use the library? If not, this library is probably not for
    you.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Community** – An active community shows that the library is being used. It
    also provides a glimpse into how the library''s maintainers treat people who ask
    questions. Look for mailing lists and discussion groups about the library.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Momentum** – Check to see how often the library gets updates. You''ll want
    to choose libraries that are under active development.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Does it work for you**? – Always try each library to see that it actually
    works for your project and that you can understand how to use the library.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**License** – Can you legally use this library? Make sure first. Refer to [https://packt.live/2MTZfqD](https://packt.live/2MTZfqD)
    for a listing of the most common open source licenses. Read the license and see
    whether this will work for your organization. If the license looks too weird or
    restrictive, avoid the library.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Always look at the license for any open source library to make sure your organization
    can legally use the library in the manner you want to use it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once you find a library that looks promising, the next step is to import the
    library into your application.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Project Dependency
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A third-party library that you include in your project is called a dependency.
    Think of this as meaning your project now depends on this library. Both Maven
    and Gradle identify dependencies similarly. You''ll need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: GroupId
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ArtifactId
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Version information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A repository where the build tool can download the library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The most commonly used third-party open source libraries can be downloaded from
    a large repository called `Maven Central`, located at [https://packt.live/2pvXmZs](https://packt.live/2pvXmZs).
  prefs: []
  type: TYPE_NORMAL
- en: You can search for the group, artifact, and version information on a handy site
    located at [https://packt.live/33UlfZF](https://packt.live/33UlfZF).
  prefs: []
  type: TYPE_NORMAL
- en: A good, useful open source library is `Apache Commons Lang`, which contains
    handy classes for working with strings and numbers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 11: Adding a Third-Party Library Dependency'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, we'll add the Apache Commons Lang library to the Gradle project
    created in *Exercises 09 and 10* previously. In these exercises, we'll add just
    one to simplify the entire setup.
  prefs: []
  type: TYPE_NORMAL
- en: 'In large, complex projects, you will often see a lot of dependencies. The concepts
    used here apply when you start adding more dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: Search on [https://packt.live/33UlfZF](https://packt.live/33UlfZF) for Apache
    Commons Lang. You should find the page on this library at [https://packt.live/33JnQ8n](https://packt.live/33JnQ8n).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Look for the latest released version. At the time of writing, the version is
    3.8.1.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Notice how many releases there are. This library seems to be under active development.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the `3.8.1` link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Look at the license information. The Apache license is compatible with most
    organizations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On this page, you will see a set of tabs for different Java build tools, with
    the Maven tab selected by default. Inside the tab, you'll see the group, artifact,
    and version information in the format used in a Maven POM file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the `Gradle` tab to see the same information formatted for Gradle,
    as shown in *Figure 6.8*:![](img/C13927_06_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 6.8: Using the Gradle tab to see the Gradle dependency information'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Copy this text and add it to the dependencies block in your `build.gradle` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the word *compile* to *implementation*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The compile dependency in Gradle is replaced by the implementation dependency
    in more recent versions of Gradle.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the IntelliJ alert that states that Gradle projects need to be imported,
    click `Import Changes`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We now have the library in the project. We next need to do two things. First,
    we need to configure Gradle to build an executable JAR with all the dependencies.
    Second, we need to use the new dependency—the new library—in our code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The next step is to add the Gradle shadow plugin to the project. This plugin
    combines your code in a project (along with any third-party libraries and other
    dependencies) into a single JAR file that holds everything needed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can find more information on the Gradle shadow plugin at [https://packt.live/33Irb7H](https://packt.live/33Irb7H)
    and [https://packt.live/31qGIYs](https://packt.live/31qGIYs).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Call up `build.gradle` in the IntelliJ text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the `plugins` block with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This tells Gradle to bring the shadow plugin into our project.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Go to the Gradle pane in IntelliJ. Click the `Refresh` icon (the two circular
    arrows).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand the new shadow tasks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on `shadowJar`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will build a new JAR file, `steps-gradle-1.0-SNAPSHOT-all.jar`, that contains
    the project code, along with all the dependencies. Notice that the format is artifact
    Id – version – `all.jar`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Switch to the `Terminal` pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You will then see the output of the `Steps` application.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In this exercise, we have added a third-party dependency library. Next, we'll
    use the new library in the application.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Apache Commons Lang Library
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When using a new library, it is usually good to start with a look at the documentation.
    For a Java utility library, Javadoc is a good first place to start.
  prefs: []
  type: TYPE_NORMAL
- en: For the Apache Commons Lang library, you can find the Javadoc at [https://packt.live/32wkrJR](https://packt.live/32wkrJR).
    Open the first package, `org.apache.commons.lang3`.
  prefs: []
  type: TYPE_NORMAL
- en: In this package, you'll find a really handy set of utility classes, including
    the excellent `StringUtils` class. `StringUtils` provides a number of methods
    for working with strings. And, better yet, the methods are null safe, so if you
    pass in a null string, your code won't throw an exception.
  prefs: []
  type: TYPE_NORMAL
- en: Open the `StringUtils` Javadoc. You will see a lot of good documentation relating
    to this class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 12: Using the Apache Commons Lang Library'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, we'll use two methods of the handy `StringUtils` class, `leftPad()`
    and `rightPad()`. These methods ensure that a string has a certain length by padding
    space characters on the left or right.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll use these methods to make the `Steps` application output look a bit
    better:'
  prefs: []
  type: TYPE_NORMAL
- en: In IntelliJ, call up the `WeeklySteps` class into the text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down to the `format()` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace that method with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This code pads out the days of the week to a consistent length. It does the
    same to the daily steps count.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run the `shadowJar` build task again from the Gradle pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Terminal pane, in the `build/libs` directory, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will see output that is now better aligned:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Just about every Java project you work on will require more than one dependency.
  prefs: []
  type: TYPE_NORMAL
- en: Using Modules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Java packages allow you to gather together related classes (and other types).
    You can then bundle a number of packages into a JAR file, creating a library you
    can use.
  prefs: []
  type: TYPE_NORMAL
- en: Modules go a step further and allow you encapsulate your libraries efficiently.
    This means you can declare which of a module's public classes (and other types)
    can be accessed outside the module.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Java version 9 and higher supports modules called the **Java Platform Module
    System**, or **JPMS**.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, modules can declare explicit dependencies on other modules. This
    helps clean up the mess of Java classpaths. Instead of searching the classpath
    for classes, a module will search directly for a named dependent module. This
    really helps when you bring in a lot of dependencies. With a large Java application,
    some libraries may depend on different versions of the same libraries, causing
    all sorts of problems. Instead, each module allows you to isolate its dependencies
    from the rest of the application.
  prefs: []
  type: TYPE_NORMAL
- en: Modules look in what is called a module path. The module path just lists modules,
    not classes.
  prefs: []
  type: TYPE_NORMAL
- en: Within a module, packages in a module can be exported. If a package in a module
    is not exported, then no other module can use that package.
  prefs: []
  type: TYPE_NORMAL
- en: A module that wants to use code from another module must indicate that it requires
    the other module. Inside a module, your code can only make use of packages that
    are exported in the dependent module.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: When you start using modules, you'll want to convert each Java library you create
    into one or more modules. You can only have one module per JAR file.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The original project that created Java's module system was called PROJECT JIGSAW.
    Refer to [https://packt.live/32yH1le](https://packt.live/32yH1le) for more on
    modules. A big part of the effort was to add modules to the **Java Development
    Kit**, or **JDK**. This allows you to create smaller JDKs aimed at mobile platforms,
    for example.
  prefs: []
  type: TYPE_NORMAL
- en: To see all the modules that make up the JDK, use the java command.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the IntelliJ Terminal pane, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see a lot of modules in the output (shortened here):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: The modules with names starting with java are classes that we consider part
    of the JDK, that is, classes you can use in your Java code. Modules with names
    starting with jdk are modules that are required internally by the JDK. You should
    not use those classes.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Modules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A module groups together a set of Java packages and additional resources (files).
    Each module requires a `module-info.java` file, which specifies what the module
    exports as well as what other modules are required.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 13: Creating a Project for a Module'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we''ll create an IntelliJ project that we can use to explore
    Java modules and then create a Java module inside the project:'
  prefs: []
  type: TYPE_NORMAL
- en: From the `File` menu, select `New` and then `Project…`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a `Java` project and click `Next`, as shown in *Figure 6.9*:![](img/C13927_06_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 6.9: Selecting a Java project'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Do not specify a project template. Click `Next`, as shown in *Figure 6.10*:![](img/C13927_06_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 6.10: Do not select a project template'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Name the project modules.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click `Finish`. You now have an empty Java project. The next step will be to
    create a very simple module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the `File` menu, select `New` and then `Module…`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure Java is selected. Click `Next`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `com.packtpub.day.module` for the module name. Make sure that the content
    root and the file location both show `com.packtpub.day.module` under the modules
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click `Finish`. You now have a module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It can be confusing at first that the module name, `com.packtpub.day.module`,
    gets created as a single directory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Normally, with packages, each dot in the name indicates a separate subfolder.
    With modules, you get a folder name with dots.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: IntelliJ has created a folder named `com.packtpub.day`.module in the project,
    and also an `src` folder under `com.packtpub.day.module`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Right-click on the `src` folder under `com.packtpub.day` module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select `New` and then `Package`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `com.packtpub.day` as the name of the package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the new package, `com.packtpub.day`, select `New`, and then `Java
    class`. Name the class `Today`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the text editor window, add a method to the new class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This method returns the day of the week for the current day as a string.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Right-click on the package `com.packtpub.day`, select `New`, and then select
    `module-info.java`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the text editor, add the following `exports` line inside the `module` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`com.packtpub.day` module exports one package, `com.packtpub.day`. Anything
    else added to this module will be hidden.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we have a module, the next step is to use this module in another module.
    This will show how modules can control what classes get exported for use by other
    modules, and what classes remain private within the module. The modules exist
    side by side, but both need to be included in your project's module path—the module
    equivalent of Java's classpath.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 14: Creating a Second Module Using the First One'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, we'll create a second very simple module that uses the `com.packtpub.day`
    module created previously.
  prefs: []
  type: TYPE_NORMAL
- en: From the `File` menu, select `New` and then `Module…`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure Java is selected, and then click `Next`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name this module `com.packtpub.message.module`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click `Finish`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the `src` folder under `com.packtpub.message` module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select `New` and then `Package`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the `package com.packtpub.message` and click `OK`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the `com.packtpub.message` package. Select `New` and `module-info.java`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the `com.packtpub.message` package. Select `New` and `Java Class`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the class `Message`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the text editor, edit the `Message` class and import the `Today` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also in the text editor, create a `main()` method as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the `module-info.java` file in the `com.packtpub.message.module` module.
    Add the following `requires` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `requires` statement will show an error. We need to add the `com.packtpub.day.module`
    module as a dependency within the IntelliJ project.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: From the `File` menu, select `Project Structure`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on `Modules`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select `message.module` under `com.packtpub`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the `Dependencies` tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the `+` icon at the bottom of the dialog window and select `Module Dependency…`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select com.`packtpub.day.module` and click `OK`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should see the new module dependency added, as shown in Figure 6.11.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click `OK` in the previous dialog. The error should no longer be present.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `Message` class, click the green arrow to the left of the class definition,
    and select `Run 'Message.main()'`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see output like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 6.11: The IntelliJ project structure dialog showing the new module
    dependency on the com.packtpub.day.module module'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C13927_06_11.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.11: The IntelliJ project structure dialog showing the new module dependency
    on the com.packtpub.day.module module'
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 1: Tracking Summer High Temperatures'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Studies on changing climate have determined what summer high temperatures will
    be like in the year 2100.
  prefs: []
  type: TYPE_NORMAL
- en: You can see this information for many world cities at [https://packt.live/33IrCyR](https://packt.live/33IrCyR).
  prefs: []
  type: TYPE_NORMAL
- en: Create an application to display how high summer temperatures are projected
    to be in the year 2100 with no major emission cuts, or with moderate emission
    cuts.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Gradle project in IntelliJ.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Bring in the Guava third-party library as a dependency. Refer to [https://packt.live/2qkLutt](https://packt.live/2qkLutt)
    for more on Guava.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a class named `City` that holds the name of a city, the name of the country
    where the city is located, and its summer high temperature. Remember that IntelliJ
    can generate getter and setter methods for you.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a class named `SummerHigh` that holds a base city, along with the city
    that most closely matches the 2100 summer projections if no emission cuts are
    made, and the city that matches the 2100 summer projections if moderate emission
    cuts are made (based on data from Climate Central).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a class named `SummerHighs` to hold the overall data store. This class
    should have methods to retrieve the data by city name (regardless of case) or
    country name (regardless of case).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use a Guava Table to hold the underlying `SummerHigh` data, using a Table like
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a `Main` class that takes in either a city or a country name, looks up
    the appropriate data, and then prints it out. Use a command-line parameter of
    `-city` for a city lookup and `-country` for a country lookup.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The entire code base for the project should be incorporated in an executable
    JAR. Run this JAR from the IntelliJ Terminal pane.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should be able to run this JAR similarly to the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should generate output like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add a temperature converter class that can output the temperatures in degrees
    Fahrenheit instead of Celsius.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a `-f` command-line option that tells the application to return temperatures
    in degrees Fahrenheit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a class called `TempConverter` to perform the conversion.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the following formula to convert the unit of temperature:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should then be able to run the application:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should then see the temperature output in degrees Fahrenheit. Here''s an
    example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Refer to [https://packt.live/2pvYxbk](https://packt.live/2pvYxbk) for more information
    on the `Table` class. `row()` and `column()` methods. We use this class to allow
    lookups by city or country.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Summertime High Temperatures**'
  prefs: []
  type: TYPE_NORMAL
- en: Here are some selected cities from the Climate Central map. Each city is listed
    with its summertime high temperature. Feel free to include these cities in your
    program. You can add more cities from Climate Central if you like.
  prefs: []
  type: TYPE_NORMAL
- en: '**London, United Kingdom, 20.4 °C**:'
  prefs: []
  type: TYPE_NORMAL
- en: Will be like Paris, France, 22.7 °C, with moderate emission cuts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Will be like Milan, Italy, 25.2 °C, with no emission cuts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stockholm, Sweden, 19.3 °C**:'
  prefs: []
  type: TYPE_NORMAL
- en: Will be like Vilnius, Lithuania, 21.7 °C, with moderate emission cuts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Will be like Kiev, Ukraine, 24.2 °C, with no emission cuts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Barcelona, Spain, 25.7 °C**:'
  prefs: []
  type: TYPE_NORMAL
- en: Will be like Madrid, Spain, 28.9 °C, with moderate emission cuts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Will be like Izmir, Turkey, 32.2 °C, with no emission cuts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**New York, US, 27.7 °C**:'
  prefs: []
  type: TYPE_NORMAL
- en: Will be like Belize City, Belize, 31.3 °C, with moderate emission cuts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Will be like Juarez, Mexico, 34.4 °C, with no emission cuts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tokyo, Japan, 26.2 °C**:'
  prefs: []
  type: TYPE_NORMAL
- en: Will be like Beijing, China, 29.0 °C, with moderate emission cuts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Will be like Wuhan, China, 31.2 °C, with no emission cuts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The solution to this activity can be found on page 542.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw how packages allow you to better organize your code,
    which becomes essential when working on large projects. When you use classes from
    another package, you need to import these classes into your code.
  prefs: []
  type: TYPE_NORMAL
- en: When you create your own packages, place your code into packages based on the
    purpose of the code and name these packages based on your organization's internet
    domain name. For example, you might create packages called `com.packtpub.medical.report`
    and `com.packtpub.medical.heartrate`.
  prefs: []
  type: TYPE_NORMAL
- en: You will often incorporate your Java code into a JAR file. A JAR file is like
    a compiled library of Java code. Executable JAR files contain the name of a Java
    class with a `main()` method that you can run with the `java-jar` command.
  prefs: []
  type: TYPE_NORMAL
- en: Java build tools such as Maven or Gradle help a lot when working on large projects.
    These two build tools also support downloading and using third-party open source
    Java libraries—libraries that are used in just about every large Java project.
  prefs: []
  type: TYPE_NORMAL
- en: Modules form a newer way to separate code. In the next chapter, we shall cover
    relational databases and using Java with databases.
  prefs: []
  type: TYPE_NORMAL
