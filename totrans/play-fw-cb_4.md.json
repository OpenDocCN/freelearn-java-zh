["```java\n    <span class=\"strong\"><strong>    activator \"~run\"</strong></span>\n    ```", "```java\n    package controllers;\n         import java.util.*;\n        import play.data.Form;\n        import play.mvc.*;\n        import models.Product;\n        import static play.libs.Json.toJson;\n         public class Products extends Controller {\n            public static Map&lt;String, Product&gt; products = new HashMap&lt;String, Product&gt;();\n             @BodyParser.Of(BodyParser.Json.class)\n            public static Result create() {\n                try {\n                    Form&lt;Product&gt; form = Form.form(Product.class).bindFromRequest();\n                     if (form.hasErrors()) {\n                        return badRequest(form.errorsAsJson());\n                    } else {\n                        Product product = form.get();\n                        products.put(product.getSku(), product);\n                        return created(toJson(product));\n                    }\n                 } catch (Exception e) {\n                    return internalServerError(e.getMessage());\n                }\n            }\n        }\n    ```", "```java\n    package models;\n         import play.data.validation.Constraints;\n         public class Product implements java.io.Serializable {\n            @Constraints.Required\n            private String sku;\n             @Constraints.Required\n            private String title;\n             public String getSku() {\n                return sku;\n            }\n            public void setSku(String sku) {\n                this.sku = sku;\n            }\n            public String getTitle() {\n                return title;\n            }\n            public void setTitle(String title) {\n                this.title = title;\n            }\n        }\n    ```", "```java\n    POST    /api/products       controllers.Products.create\n    ```", "```java\n    <span class=\"strong\"><strong>    $ curl -v -X POST http://localhost:9000/api/products --data '{\"sku\":\"abc\",   \"title\":\"Macbook Pro Retina\"}' --header \"Content-type: application/json\"</strong></span>\n    <span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>    *   Trying ::1...</strong></span>\n    <span class=\"strong\"><strong>    * Connected to localhost (::1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>    &gt; POST /api/products HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>    &gt; Content-type: application/json</strong></span>\n    <span class=\"strong\"><strong>    &gt; Content-Length: 43</strong></span>\n    <span class=\"strong\"><strong>    &gt;</strong></span>\n    <span class=\"strong\"><strong>    * upload completely sent off: 43 out of 43 bytes</strong></span>\n    <span class=\"strong\"><strong>    &lt; HTTP/1.1 201 Created</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Type: application/json; charset=utf-8</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Length: 42</strong></span>\n    <span class=\"strong\"><strong>    &lt;</strong></span>\n    <span class=\"strong\"><strong>    * Connection #0 to host localhost left intact</strong></span>\n    <span class=\"strong\"><strong>    {\"sku\":\"abc\",\"title\":\"Macbook Pro Retina\"}%</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    activator \"~run\"</strong></span>\n    ```", "```java\n    package controllers\n         import models.Product\n        import play.api.libs.json.{JsError, Json}\n        import play.api.libs.json.Json._\n        import play.api.mvc._\n         object Products extends Controller {\n          implicit private val productWrites = Json.writes[Product]\n          implicit private val productReads = Json.reads[Product]\n          private val products: scala.collection.mutable.ListBuffer[Product] = scala.collection.mutable.ListBuffer[Product]()\n           def create = Action(BodyParsers.parse.json) { implicit request =&gt;\n            val post = request.body.validate[Product]\n            post.fold(\n              errors =&gt; BadRequest(Json.obj(\"message\" -&gt; JsError.toFlatJson(errors))),\n              p =&gt; {\n                try {\n                  products += p\n                  Created(Json.toJson(p))\n                } catch {\n                  case e: Exception =&gt; InternalServerError(e.getMessage)\n                }\n              }\n            )\n          }\n        }\n    ```", "```java\n    package models\n         case class Product(sku: String, title: String)\n    ```", "```java\n    POST    /api/products       controllers.Products.create\n    ```", "```java\n    <span class=\"strong\"><strong>    $ curl -v -X POST http://localhost:9000/api/products --data '{\"sku\":\"abc\",   \"title\":\"Macbook Pro Retina\"}' --header \"Content-type: application/json\"</strong></span>\n    <span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>    *   Trying ::1...</strong></span>\n    <span class=\"strong\"><strong>    * Connected to localhost (::1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>    &gt; POST /api/products HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>    &gt; Content-type: application/json</strong></span>\n    <span class=\"strong\"><strong>    &gt; Content-Length: 43</strong></span>\n    <span class=\"strong\"><strong>    &gt;</strong></span>\n    <span class=\"strong\"><strong>    * upload completely sent off: 43 out of 43 bytes</strong></span>\n    <span class=\"strong\"><strong>    &lt; HTTP/1.1 201 Created</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Type: application/json; charset=utf-8</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Length: 42</strong></span>\n    <span class=\"strong\"><strong>    &lt;</strong></span>\n    <span class=\"strong\"><strong>    * Connection #0 to host localhost left intact</strong></span>\n    <span class=\"strong\"><strong>    {\"sku\":\"abc\",\"title\":\"Macbook Pro Retina\"}%</strong></span>\n    ```", "```java\n// Java \n    @Constraints.Required\n    private String sku;\n```", "```java\ncase class Product(sku: String, title: String)\n```", "```java\n// Java \n    if (form.hasErrors()) {\n        return badRequest(form.errorsAsJson());\n    }\n     // Scala \n    errors =&gt; BadRequest(Json.obj(\"message\" -&gt; JsError.toFlatJson(errors))),\n```", "```java\n// Java \n    return created(toJson(product));\n     // Scala \n    Created(Json.toJson(p))\n```", "```java\n<span class=\"strong\"><strong>    $ curl -v -X POST http://localhost:9000/api/products --data '{\"sku\":\"abc\"}' --header \"Content-type: application/json\"</strong></span>\n<span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n<span class=\"strong\"><strong>    *   Trying ::1...</strong></span>\n<span class=\"strong\"><strong>    * Connected to localhost (::1) port 9000 (#0)</strong></span>\n<span class=\"strong\"><strong>    &gt; POST /api/products HTTP/1.1</strong></span>\n<span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n<span class=\"strong\"><strong>    &gt; Host: localhost:9000</strong></span>\n<span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n<span class=\"strong\"><strong>    &gt; Content-type: application/json</strong></span>\n<span class=\"strong\"><strong>    &gt; Content-Length: 44</strong></span>\n<span class=\"strong\"><strong>    &gt;</strong></span>\n<span class=\"strong\"><strong>    * upload completely sent off: 44 out of 44 bytes</strong></span>\n<span class=\"strong\"><strong>    &lt; HTTP/1.1 400 Bad Request</strong></span>\n<span class=\"strong\"><strong>    &lt; Content-Type: application/json; charset=utf-8</strong></span>\n<span class=\"strong\"><strong>    &lt; Content-Length: 36</strong></span>\n<span class=\"strong\"><strong>    &lt;</strong></span>\n<span class=\"strong\"><strong>    * Connection #0 to host localhost left intact</strong></span>\n<span class=\"strong\"><strong>    {\"title\":[\"This field is required\"]}%</strong></span>\n```", "```java\n    <span class=\"strong\"><strong>    activator \"~run\"</strong></span>\n    ```", "```java\n    public static Result index() {\n            return ok(toJson(products));\n        }\n    ```", "```java\n    GET     /api/products       controllers.Products.index\n    ```", "```java\n    <span class=\"strong\"><strong>    $ curl -v http://localhost:9000/api/products</strong></span>\n    <span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>    *   Trying ::1...</strong></span>\n    <span class=\"strong\"><strong>    * Connected to localhost (::1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>    &gt; GET /api/products HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>    &gt;</strong></span>\n    <span class=\"strong\"><strong>    &lt; HTTP/1.1 200 OK</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Type: application/json; charset=utf-8</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Length: 50</strong></span>\n    <span class=\"strong\"><strong>    &lt;</strong></span>\n    <span class=\"strong\"><strong>    * Connection #0 to host localhost left intact</strong></span>\n    <span class=\"strong\"><strong>    {\"abc\":{\"sku\":\"abc\",\"title\":\"Macbook Pro Retina\"},\"def\":{\"sku\":\"def\",\"title\":\"iPad Air\"}}%</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    activator \"~run\"</strong></span>\n    ```", "```java\n    def index = Action {\n          Ok(toJson(products))\n        }\n    ```", "```java\n    <span class=\"strong\"><strong>    GET     /api/products       controllers.Products.index</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    $ curl -v http://localhost:9000/api/products</strong></span>\n    <span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>    *   Trying ::1...</strong></span>\n    <span class=\"strong\"><strong>    * Connected to localhost (::1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>    &gt; GET /api/products HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>    &gt;</strong></span>\n    <span class=\"strong\"><strong>    &lt; HTTP/1.1 200 OK</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Type: application/json; charset=utf-8</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Length: 50</strong></span>\n    <span class=\"strong\"><strong>    &lt;</strong></span>\n    <span class=\"strong\"><strong>    * Connection #0 to host localhost left intact</strong></span>\n    <span class=\"strong\"><strong>    {\"abc\":{\"sku\":\"abc\",\"title\":\"Macbook Pro Retina\"},\"def\":{\"sku\":\"def\",\"title\":\"iPad Air\"}}%</strong></span>\n    ```", "```java\n// Java \n    return ok(toJson(products));\n     // Scala \n    Ok(toJson(products))\n```", "```java\n<span class=\"strong\"><strong>    # Empty product list  </strong></span>\n <span class=\"strong\"><strong>    $ curl -v http://localhost:9000/api/products</strong></span>\n<span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n<span class=\"strong\"><strong>    *   Trying ::1...</strong></span>\n<span class=\"strong\"><strong>    * Connected to localhost (::1) port 9000 (#0)</strong></span>\n<span class=\"strong\"><strong>    &gt; GET /api/products HTTP/1.1</strong></span>\n<span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n<span class=\"strong\"><strong>    &gt; Host: localhost:9000</strong></span>\n<span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n<span class=\"strong\"><strong>    &gt;</strong></span>\n<span class=\"strong\"><strong>    &lt; HTTP/1.1 200 OK</strong></span>\n<span class=\"strong\"><strong>    &lt; Content-Type: application/json; charset=utf-8</strong></span>\n<span class=\"strong\"><strong>    &lt; Content-Length: 2</strong></span>\n<span class=\"strong\"><strong>    &lt;</strong></span>\n<span class=\"strong\"><strong>    * Connection #0 to host localhost left intact</strong></span>\n<span class=\"strong\"><strong>    []%</strong></span>\n```", "```java\n    <span class=\"strong\"><strong>    activator \"~run\"</strong></span>\n    ```", "```java\n    @BodyParser.Of(BodyParser.Json.class)\n        public static Result edit(String id) {\n            try {\n                Product product = products.get(id);\n                 if (product != null) {\n                    Form&lt;Product&gt; form = Form.form(Product.class).bindFromRequest();\n                    if (form.hasErrors()) {\n                        return badRequest(form.errorsAsJson());\n                    } else {\n                        Product productForm = form.get();\n                        product.setTitle(productForm.getTitle());\n                        products.put(product.getSku(), product);\n                         return ok(toJson(product));\n                    }\n                } else {\n                    return notFound();\n                }\n            } catch (Exception e) {\n                return internalServerError(e.getMessage());\n            }\n        }\n    ```", "```java\n    PUT     /api/products/:id   controllers.Products.edit(id: String)\n    ```", "```java\n    <span class=\"strong\"><strong>    $ curl -v -X PUT http://localhost:9000/api/products/def --data '{\"sku\":\"def\", \"title\":\"iPad 3 Air\"}' --header \"Content-type: application/json\"</strong></span>\n    <span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>    *   Trying ::1...</strong></span>\n    <span class=\"strong\"><strong>    * Connected to localhost (::1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>    &gt; PUT /api/products/def HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>    &gt; Content-type: application/json</strong></span>\n    <span class=\"strong\"><strong>    &gt; Content-Length: 35</strong></span>\n    <span class=\"strong\"><strong>    &gt;</strong></span>\n    <span class=\"strong\"><strong>    * upload completely sent off: 35 out of 35 bytes</strong></span>\n    <span class=\"strong\"><strong>    &lt; HTTP/1.1 200 OK</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Type: application/json; charset=utf-8</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Length: 34</strong></span>\n    <span class=\"strong\"><strong>    &lt;</strong></span>\n    <span class=\"strong\"><strong>    * Connection #0 to host localhost left intact</strong></span>\n    <span class=\"strong\"><strong>    {\"sku\":\"def\",\"title\":\"iPad 3 Air\"}%</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    activator \"~run\"</strong></span>\n    ```", "```java\n    def edit(id: String) = Action(BodyParsers.parse.json) { implicit request =&gt;\n          val post = request.body.validate[Product]\n          post.fold(\n            errors =&gt; BadRequest(Json.obj(\"message\" -&gt; JsError.toFlatJson(errors))),\n            p =&gt; {\n              products.find(_.sku equals id) match {\n                case Some(product) =&gt; {\n                  try {\n                    products -= product\n                    products += p\n                     Ok(Json.toJson(p))\n                  } catch {\n                    case e: Exception =&gt; InternalServerError(e.getMessage)\n                  }\n                }\n                case None =&gt; NotFound\n              }\n            }\n          )\n        }\n    ```", "```java\n    PUT     /api/products/:id   controllers.Products.edit(id: String)\n    ```", "```java\n    <span class=\"strong\"><strong>    $ curl -v -X PUT http://localhost:9000/api/products/def --data '{\"sku\":\"def\", \"title\":\"iPad 3 Air\"}' --header \"Content-type: application/json\"</strong></span>\n    <span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>    *   Trying ::1...</strong></span>\n    <span class=\"strong\"><strong>    * Connected to localhost (::1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>    &gt; PUT /api/products/def HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>    &gt; Content-type: application/json</strong></span>\n    <span class=\"strong\"><strong>    &gt; Content-Length: 35</strong></span>\n    <span class=\"strong\"><strong>    &gt;</strong></span>\n    <span class=\"strong\"><strong>    * upload completely sent off: 35 out of 35 bytes</strong></span>\n    <span class=\"strong\"><strong>    &lt; HTTP/1.1 200 OK</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Type: application/json; charset=utf-8</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Length: 34</strong></span>\n    <span class=\"strong\"><strong>    &lt;</strong></span>\n    <span class=\"strong\"><strong>    * Connection #0 to host localhost left intact</strong></span>\n    <span class=\"strong\"><strong>    {\"sku\":\"def\",\"title\":\"iPad 3 Air\"}%</strong></span>\n    ```", "```java\n// Java\n    @BodyParser.Of(BodyParser.Json.class)\n     // Scala\n    def edit(id: String) = Action(BodyParsers.parse.json) { implicit request =&gt;\n```", "```java\n// Java \n    return notFound();\n     // Scala \n    case None =&gt; NotFound\n```", "```java\n// Java \n    if (form.hasErrors()) {\n      return badRequest(form.errorsAsJson());\n    }\n     // Scala \n    errors =&gt; BadRequest(Json.obj(\"message\" -&gt; JsError.toFlatJson(errors))),\n```", "```java\n<span class=\"strong\"><strong># Passing an invalid Product ID:</strong></span>\n <span class=\"strong\"><strong>$ curl -v -X PUT http://localhost:9000/api/products/XXXXXX</strong></span>\n<span class=\"strong\"><strong>* Hostname was NOT found in DNS cache</strong></span>\n<span class=\"strong\"><strong>*   Trying ::1...</strong></span>\n<span class=\"strong\"><strong>* Connected to localhost (::1) port 9000 (#0)</strong></span>\n<span class=\"strong\"><strong>&gt; PUT /api/products/XXXXXX HTTP/1.1</strong></span>\n<span class=\"strong\"><strong>&gt; User-Agent: curl/7.37.1</strong></span>\n<span class=\"strong\"><strong>&gt; Host: localhost:9000</strong></span>\n<span class=\"strong\"><strong>&gt; Accept: */*</strong></span>\n<span class=\"strong\"><strong>&gt;</strong></span>\n<span class=\"strong\"><strong>&lt; HTTP/1.1 404 Not Found</strong></span>\n<span class=\"strong\"><strong>&lt; Content-Length: 0</strong></span>\n<span class=\"strong\"><strong>&lt;</strong></span>\n<span class=\"strong\"><strong>* Connection #0 to host localhost left intact</strong></span>\n <span class=\"strong\"><strong># PUT requests with form validation error</strong></span>\n <span class=\"strong\"><strong>$ curl -v -X PUT http://localhost:9000/api/products/def --data '{}'  --header \"Content-type: application/json\"</strong></span>\n<span class=\"strong\"><strong>* Hostname was NOT found in DNS cache</strong></span>\n<span class=\"strong\"><strong>*   Trying ::1...</strong></span>\n<span class=\"strong\"><strong>* Connected to localhost (::1) port 9000 (#0)</strong></span>\n<span class=\"strong\"><strong>&gt; PUT /api/products/def HTTP/1.1</strong></span>\n<span class=\"strong\"><strong>&gt; User-Agent: curl/7.37.1</strong></span>\n<span class=\"strong\"><strong>&gt; Host: localhost:9000</strong></span>\n<span class=\"strong\"><strong>&gt; Accept: */*</strong></span>\n<span class=\"strong\"><strong>&gt; Content-type: application/json</strong></span>\n<span class=\"strong\"><strong>&gt; Content-Length: 2</strong></span>\n<span class=\"strong\"><strong>&gt;</strong></span>\n<span class=\"strong\"><strong>* upload completely sent off: 2 out of 2 bytes</strong></span>\n<span class=\"strong\"><strong>&lt; HTTP/1.1 400 Bad Request</strong></span>\n<span class=\"strong\"><strong>&lt; Content-Type: application/json; charset=utf-8</strong></span>\n<span class=\"strong\"><strong>&lt; Content-Length: 69</strong></span>\n<span class=\"strong\"><strong>&lt;</strong></span>\n<span class=\"strong\"><strong>* Connection #0 to host localhost left intact</strong></span>\n<span class=\"strong\"><strong>{\"title\":[\"This field is required\"],\"sku\":[\"This field is required\"]}%</strong></span>\n```", "```java\n    <span class=\"strong\"><strong>    activator \"~run\"</strong></span>\n    ```", "```java\n    public static Result delete(String id) {\n            try {\n                Product product = products.get(id);\n                 if (product != null) {\n                    products.remove(product);\n                     return noContent();\n                } else {\n                    return notFound();\n                }\n            } catch (Exception e) {\n                return internalServerError(e.getMessage());\n            }\n        }\n    ```", "```java\n    DELETE  /api/products/:id   controllers.Products.delete(id: String)\n    ```", "```java\n    <span class=\"strong\"><strong>    $ curl -v -X DELETE http://localhost:9000/api/products/def</strong></span>\n    <span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>    *   Trying ::1...</strong></span>\n    <span class=\"strong\"><strong>    * Connected to localhost (::1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>    &gt; DELETE /api/products/def HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>    &gt;</strong></span>\n    <span class=\"strong\"><strong>    &lt; HTTP/1.1 204 No Content</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Length: 0</strong></span>\n    <span class=\"strong\"><strong>    &lt;</strong></span>\n    <span class=\"strong\"><strong>    * Connection #0 to host localhost left intact</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    activator \"~run\"</strong></span>\n    ```", "```java\n    def delete(id: String) = BasicAuthAction {\n        products.find(_.sku equals id) match {\n          case Some(product) =&gt; {\n            try {\n              products -= product\n              NoContent\n            } catch {\n              case e: Exception =&gt; InternalServerError(e.getMessage)\n            }\n          }\n          case None =&gt; NotFound\n        }\n      }\n    ```", "```java\n    DELETE  /api/products/:id   controllers.Products.delete(id: String)\n    ```", "```java\n    <span class=\"strong\"><strong>    $ curl -v -X DELETE http://localhost:9000/api/products/def</strong></span>\n    <span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>    *   Trying ::1...</strong></span>\n    <span class=\"strong\"><strong>    * Connected to localhost (::1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>    &gt; DELETE /api/products/def HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>    &gt;</strong></span>\n    <span class=\"strong\"><strong>    &lt; HTTP/1.1 204 No Content</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Length: 0</strong></span>\n    <span class=\"strong\"><strong>    &lt;</strong></span>\n    <span class=\"strong\"><strong>    * Connection #0 to host localhost left intact</strong></span>\n    ```", "```java\n// Java \n    return notFound();\n     // Scala \n    case None =&gt; NotFound\n```", "```java\n// Java \n    return noContent();\n     // Scala \n    NoContent\n```", "```java\n<span class=\"strong\"><strong>    $ curl -v -X DELETE http://localhost:9000/api/products/XXXXXX</strong></span>\n<span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n<span class=\"strong\"><strong>    *   Trying ::1...</strong></span>\n<span class=\"strong\"><strong>    * Connected to localhost (::1) port 9000 (#0)</strong></span>\n<span class=\"strong\"><strong>    &gt; DELETE /api/products/asd HTTP/1.1</strong></span>\n<span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n<span class=\"strong\"><strong>    &gt; Host: localhost:9000</strong></span>\n<span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n<span class=\"strong\"><strong>    &gt;</strong></span>\n<span class=\"strong\"><strong>    &lt; HTTP/1.1 404 Not Found</strong></span>\n<span class=\"strong\"><strong>    &lt; Content-Length: 0</strong></span>\n<span class=\"strong\"><strong>    &lt;</strong></span>\n<span class=\"strong\"><strong>    * Connection #0 to host localhost left intact</strong></span>\n```", "```java\n    <span class=\"strong\"><strong>    activator \"~run\"</strong></span>\n    ```", "```java\n    package controllers;\n         import org.apache.commons.codec.binary.Base64;\n        import play.mvc.Http;\n        import play.mvc.Result;\n        import play.mvc.Security;\n         public class BasicAuthenticator extends Security.Authenticator {\n            private static final String AUTHORIZATION = \"authorization\";\n            private static final String WWW_AUTHENTICATE = \"WWW-Authenticate\";\n            private static final String REALM = \"Basic realm=\\\"API Realm\\\"\";\n             @Override\n            public String getUsername(Http.Context ctx) {\n                try {\n                    String authHeader = ctx.request().getHeader(AUTHORIZATION);\n                     if (authHeader != null) {\n                        ctx.response().setHeader(WWW_AUTHENTICATE, REALM);\n                        String auth = authHeader.substring(6);\n                        byte[] decodedAuth = Base64.decodeBase64(auth);\n                        String[] credentials = new String(decodedAuth, \"UTF-8\").split(\":\");\n                         if (credentials != null &amp;&amp; credentials.length == 2) {\n                            String username = credentials[0];\n                            String password = credentials[1];\n                            if (isAuthenticated(username, password)) {\n                                return username;\n                            } else {\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                 } catch (Exception e) {\n                    return null;\n                }\n            }\n            private boolean isAuthenticated(String username, String password) {\n                return username != null &amp;&amp; username.equals(\"ned\") &amp;&amp;\n                    password != null &amp;&amp; password.equals(\"flanders\");\n            }\n             @Override\n            public Result onUnauthorized(Http.Context context) {\n                return unauthorized();\n            }\n        }\n    ```", "```java\n    <span class=\"strong\"><strong>    @Security.Authenticated(BasicAuthenticator.class)</strong></span>\n        public static Result create() \n     <span class=\"strong\"><strong>    @Security.Authenticated(BasicAuthenticator.class)</strong></span>\n        public static Result index() \n     <span class=\"strong\"><strong>    @Security.Authenticated(BasicAuthenticator.class)</strong></span>\n        public static Result edit(String id)\n     <span class=\"strong\"><strong>    @Security.Authenticated(BasicAuthenticator.class)</strong></span>\n        public static Result delete(String id)\n    ```", "```java\n    <span class=\"strong\"><strong>    $  curl -v http://localhost:9000/api/products</strong></span>\n    <span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>    *   Trying 127.0.0.1...</strong></span>\n    <span class=\"strong\"><strong>    * Connected to localhost (127.0.0.1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>    &gt; GET /api/products HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>    &gt;</strong></span>\n    <span class=\"strong\"><strong>    &lt; HTTP/1.1 401 Unauthorized</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Length: 0</strong></span>\n    <span class=\"strong\"><strong>    &lt;</strong></span>\n    <span class=\"strong\"><strong>    * Connection #0 to host localhost left intact</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    $  curl -v -u \"ned:flanders\" http://localhost:9000/api/products</strong></span>\n    <span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>    *   Trying 127.0.0.1...</strong></span>\n    <span class=\"strong\"><strong>    * Connected to localhost (127.0.0.1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>    * Server auth using Basic with user 'ned'</strong></span>\n    <span class=\"strong\"><strong>    &gt; GET /api/products HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; Authorization: Basic bmVkOmZsYW5kZXJz</strong></span>\n    <span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>    &gt;</strong></span>\n    <span class=\"strong\"><strong>    &lt; HTTP/1.1 200 OK</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Type: application/json; charset=utf-8</strong></span>\n    <span class=\"strong\"><strong>    &lt; WWW-Authenticate: Basic realm=\"API Realm\"</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Length: 2</strong></span>\n    <span class=\"strong\"><strong>    &lt;</strong></span>\n    <span class=\"strong\"><strong>    * Connection #0 to host localhost left intact</strong></span>\n    <span class=\"strong\"><strong>    {}%</strong></span>\n    ```", "```java\n    activator \"~run\"\n    ```", "```java\n    package controllers\n         import controllers.Products._\n        import org.apache.commons.codec.binary.Base64\n        import play.api.mvc._\n        import scala.concurrent.Future\n         object BasicAuthAction extends ActionBuilder[Request] {\n          def invokeBlock[A](request: Request[A], block: (Request[A]) =&gt; Future[Result]) = {\n            try {\n              request.headers.get(\"authorization\") match {\n                case Some(headers) =&gt; {\n                  val auth = headers.substring(6)\n                  val decodedAuth = Base64.decodeBase64(auth)\n                  val credentials = new String(decodedAuth, \"UTF-8\").split(\":\")\n                   if (credentials != null &amp;&amp; credentials.length == 2 &amp;&amp;\n                      isAuthenticated(credentials(0), credentials(1))) {\n                    block(request)\n                  } else {\n                    unauthorized\n                  }\n                }\n                case None =&gt; unauthorized\n              }\n            } catch {\n              case e: Exception =&gt; Future.successful(InternalServerError(e.getMessage))\n            }\n          }\n           def unauthorized = Future.successful(Unauthorized.withHeaders(\"WWW-Authenticate\" -&gt; \"Basic realm=\\\"API Realm\\\"\"))\n           def isAuthenticated(username: String, password: String) = username != null &amp;&amp; username.equals(\"ned\") &amp;&amp; password != null &amp;&amp; password.equals(\"flanders\")\n        }\n    ```", "```java\n    def index = BasicAuthAction \n         def create = BasicAuthAction(BodyParsers.parse.json)\n         def edit(id: String) = BasicAuthAction(BodyParsers.parse.json)\n         def delete(id: String) = BasicAuthAction\n    ```", "```java\n    <span class=\"strong\"><strong>    $  curl -v http://localhost:9000/api/products</strong></span>\n    <span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>    *   Trying 127.0.0.1...</strong></span>\n    <span class=\"strong\"><strong>    * Connected to localhost (127.0.0.1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>    &gt; GET /api/products HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>    &gt;  </strong></span>\n    <span class=\"strong\"><strong>    &lt; HTTP/1.1 401 Unauthorized</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Length: 0</strong></span>\n    <span class=\"strong\"><strong>    &lt;</strong></span>\n    <span class=\"strong\"><strong>    * Connection #0 to host localhost left intact</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    $  curl -v -u \"ned:flanders\" http://localhost:9000/api/products</strong></span>\n    <span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>    *   Trying 127.0.0.1...</strong></span>\n    <span class=\"strong\"><strong>    * Connected to localhost (127.0.0.1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>    * Server auth using Basic with user 'ned'</strong></span>\n    <span class=\"strong\"><strong>    &gt; GET /api/products HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; Authorization: Basic bmVkOmZsYW5kZXJz</strong></span>\n    <span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>    &gt;</strong></span>\n    <span class=\"strong\"><strong>    &lt; HTTP/1.1 200 OK</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Type: application/json; charset=utf-8</strong></span>\n     <span class=\"strong\"><strong>    &lt; Content-Length: 2</strong></span>\n    <span class=\"strong\"><strong>    &lt;</strong></span>\n    <span class=\"strong\"><strong>    * Connection #0 to host localhost left intact</strong></span>\n    <span class=\"strong\"><strong>    {}%</strong></span>\n    ```", "```java\n// Java\n    String authHeader = ctx.request().getHeader(AUTHORIZATION);\n    if (authHeader != null) {\n        ctx.response().setHeader(WWW_AUTHENTICATE, REALM);\n        String auth = authHeader.substring(6);\n        byte[] decodedAuth = Base64.decodeBase64(auth);\n        String[] credentials = new String(decodedAuth, \"UTF-8\").split(\":\");\n    }\n     // Scala \n    request.headers.get(\"authorization\") match {\n        case Some(headers) =&gt; {\n          val auth = headers.substring(6)\n          val decodedAuth = Base64.decodeBase64(auth)\n          val credentials = new String(decodedAuth, \"UTF-8\").split(\":\")\n        }\n    }\n```", "```java\n// Java\n    if (credentials != null &amp;&amp; credentials.length == 2) {\n     String username = credentials[0];\n        String password = credentials[1];\n        if (isAuthenticated(username, password)) {\n            return username;\n        } else {\n            return null;\n        }\n    }\n     // Scala\n    if (credentials != null &amp;&amp; credentials.length == 2 &amp;&amp;\n          isAuthenticated(credentials(0), credentials(1))) {\n        block(request)\n    } else {\n        unauthorized\n    }\n```", "```java\n// Java\n    @Security.Authenticated(BasicAuthenticator.class)\n    public static Result index() {\n        return ok(toJson(products));\n    }\n     // Scala \n    def index = BasicAuthAction {\n        Ok(toJson(products))\n    }\n```", "```java\n<span class=\"strong\"><strong>    $ curl -v http://localhost:9000/api/products</strong></span>\n<span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n<span class=\"strong\"><strong>    *   Trying ::1...</strong></span>\n<span class=\"strong\"><strong>    * Connected to localhost (::1) port 9000 (#0)</strong></span>\n<span class=\"strong\"><strong>    &gt; GET /api/products HTTP/1.1</strong></span>\n<span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n<span class=\"strong\"><strong>    &gt; Host: localhost:9000</strong></span>\n<span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n<span class=\"strong\"><strong>    &gt;</strong></span>\n<span class=\"strong\"><strong>    &lt; HTTP/1.1 401 Unauthorized</strong></span>\n<span class=\"strong\"><strong>    &lt; WWW-Authenticate: Basic realm=\"API Realm\"</strong></span>\n<span class=\"strong\"><strong>    &lt; Content-Length: 0</strong></span>\n<span class=\"strong\"><strong>    &lt;</strong></span>\n<span class=\"strong\"><strong>    * Connection #0 to host localhost left intact</strong></span>\n```", "```java\n    <span class=\"strong\"><strong>    activator \"~run\"</strong></span>\n    ```", "```java\n    libraryDependencies ++= Seq(\n            javaWs\n        )\n    ```", "```java\n    package controllers;\n         import com.fasterxml.jackson.databind.JsonNode;\n        import play.libs.F;\n        import play.libs.F.Promise;\n        import play.libs.ws.WS;\n        import play.mvc.Controller;\n        import play.mvc.Result;\n         public class WebClient extends Controller {\n            public static Promise&lt;Result&gt; getTodos() {\n                Promise&lt;play.libs.ws.WSResponse&gt; todos = WS.url(\"http://jsonplaceholder.typicode.com/todos\").get();\n                return todos.map(\n                    new F.Function&lt;play.libs.ws.WSResponse, Result&gt;() {\n                        public Result apply(play.libs.ws.WSResponse res) {\n                            JsonNode json = res.asJson();\n                            return ok(\"Todo Title: \" + json.findValuesAsText(\"title\"));\n                        }\n                    }\n                );\n            }\n        }\n    ```", "```java\n    GET     /client/get_todos   controllers.WebClient.getTodos\n    ```", "```java\n    <span class=\"strong\"><strong>    $ curl -v http://localhost:9000/client/get_todos</strong></span>\n    <span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>    *   Trying ::1...</strong></span>\n    <span class=\"strong\"><strong>    * Connected to localhost (::1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>    &gt; GET /client/get_todos HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>    &gt;</strong></span>\n    <span class=\"strong\"><strong>    &lt; HTTP/1.1 200 OK</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Type: text/plain; charset=utf-8</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Length: 8699</strong></span>\n    <span class=\"strong\"><strong>    &lt;</strong></span>\n    <span class=\"strong\"><strong>    Todo Title: [delectus aut autem, quis ut nam facilis et officia qui, fugiat veniam minus, et porro tempora, laboriosam mollitia et enim quasi adipisci quia provident illum, qui ullam ratione quibusdam voluptatem quia omnis, illo expedita</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    activator \"~run\"</strong></span>\n    ```", "```java\n    libraryDependencies ++= Seq(\n            ws\n        )\n    ```", "```java\n    package controllers\n         import play.api.libs.concurrent.Execution.Implicits.defaultContext\n        import play.api.Play.current\n        import play.api.libs.ws.WS\n        import play.api.mvc.{Action, Controller}\n         object WebClient extends Controller {\n          def getTodos = Action.async {\n            WS.url(\"http://jsonplaceholder.typicode.com/todos\").get().map { res =&gt;\n              Ok(\"Todo Title: \" + (res.json \\\\ \"title\").map(_.as[String]))\n            }\n          }\n        }\n    ```", "```java\n    GET     /client/get_todos   controllers.WebClient.getTodos\n    ```", "```java\n    <span class=\"strong\"><strong>    $ curl -v http://localhost:9000/client/get_todos</strong></span>\n    <span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>    *   Trying ::1...</strong></span>\n    <span class=\"strong\"><strong>    * Connected to localhost (::1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>    &gt; GET /client/get_todos HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>    &gt;</strong></span>\n    <span class=\"strong\"><strong>    &lt; HTTP/1.1 200 OK</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Type: text/plain; charset=utf-8</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Length: 8699</strong></span>\n    <span class=\"strong\"><strong>    &lt;</strong></span>\n    <span class=\"strong\"><strong>    Todo Title: [delectus aut autem, quis ut nam facilis et officia qui, fugiat veniam minus, et porro tempora, laboriosam mollitia et enim quasi adipisci quia provident illum, qui ullam ratione quibusdam voluptatem quia omnis, illo expedita</strong></span>\n    ```", "```java\n// Java  \n    Promise&lt;play.libs.ws.WSResponse&gt; todos = WS.url(\"http://jsonplaceholder.typicode.com/todos\").get();\n    // Scala \nWS.url(\"http://jsonplaceholder.typicode.com/todos\").get()\n```", "```java\n// Java \n    return todos.map(\n      new F.Function&lt;play.libs.ws.WSResponse, Result&gt;() {\n        public Result apply(play.libs.ws.WSResponse res) {\n          JsonNode json = res.asJson();\n          return ok(\"Todo Title: \" + json.findValuesAsText(\"title\"));\n        }\n      }\n    );\n     // Scala \n    Ok(\"Todo Title: \" + (res.json \\\\ \"title\").map(_.as[String]))\n```", "```java\n    <span class=\"strong\"><strong>    activator \"~run\"</strong></span>\n    ```", "```java\n    tw.consumerKey=\"YOUR TWITTER DEV CONSUMER KEY HERE\"\n        tw.consumerSecret=\"YOUR TWITTER DEV CONSUMER SECRET HERE\"\n        tw.accessToken=\"YOUR TWITTER DEV ACCESS TOKEN HERE\"\n        tw.accessTokenSecret=\"YOUR TWITTER DEV ACCESS TOKEN SECRET HERE\"\n    ```", "```java\n    // Add additional imports at the top section of the class file \n        import play.Play;\n        import play.libs.oauth.OAuth;\n        import play.libs.oauth.OAuth.OAuthCalculator;\n        import play.libs.ws.WSResponse;\n        import java.util.HashMap;\n        import java.util.Iterator;\n        import java.util.Map;\n         // Add the Action method\n        public static Promise&lt;Result&gt; getTweets(String hashtag) {\n            final String url = \"https://api.twitter.com/1.1/search/tweets.json?q=%40\" + hashtag;\n            final OAuth.ConsumerKey consumerInfo = new OAuth.ConsumerKey(\n                Play.application().configuration().getString(\"tw.consumerKey\"),\n                Play.application().configuration().getString(\"tw.consumerSecret\")\n            );\n            final OAuth.RequestToken tokens = new OAuth.RequestToken(\n                Play.application().configuration().getString(\"tw.accessToken\"),\n                Play.application().configuration().getString(\"tw.accessTokenSecret\")\n            );\n             Promise&lt;play.libs.ws.WSResponse&gt; twRequest = WS.url(url).sign(new OAuthCalculator(consumerInfo, tokens)).get();\n            return twRequest.map(\n                new F.Function&lt;WSResponse, Result&gt;(){\n                    @Override\n                    public Result apply(WSResponse res) throws Throwable {\n                        Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();\n                        JsonNode root = res.asJson();\n                         for (JsonNode json : root.get(\"statuses\")) {\n                            map.put(\n             json.findValue(\"user\").findValue(\"screen_name\").asText(),\n                                json.findValue(\"text\").asText()\n                            );\n                        }\n                         return ok(views.html.tweets.render(map));\n                    }\n                }\n            );\n        }\n    ```", "```java\n    GET /client/get_tweets/:hashtag controllers.WebClient.getTweets(hashtag)\n    ```", "```java\n    @(tweets: Map[String, String])\n         &lt;ul&gt;\n          @tweets.map { tw =&gt;\n            &lt;li&gt;&lt;strong&gt;@@@tw._1&lt;/strong&gt; says &lt;i&gt;\"@tw._2\"&lt;/i&gt;&lt;/li&gt;\n          }\n        &lt;/ul&gt;\n    ```", "```java\n    <span class=\"strong\"><strong>    activator \"~run\"</strong></span>\n    ```", "```java\n    tw.consumerKey=\"YOUR TWITTER DEV CONSUMER KEY HERE\"\n        tw.consumerSecret=\"YOUR TWITTER DEV CONSUMER SECRET HERE\"\n        tw.accessToken=\"YOUR TWITTER DEV ACCESS TOKEN HERE\"\n        tw.accessTokenSecret=\"YOUR TWITTER DEV ACCESS TOKEN SECRET HERE\"\n    ```", "```java\n    def getTweets(hashtag: String) = Action.async {\n          import play.api.Play\n           val consumerInfo = ConsumerKey(\n            Play.application.configuration.getString(\"tw.consumerKey\").get,\n            Play.application.configuration.getString(\"tw.consumerSecret\").get\n          )\n          val tokens = RequestToken(\n            Play.application.configuration.getString(\"tw.accessToken\").get,\n            Play.application.configuration.getString(\"tw.accessTokenSecret\").get\n          )\n          val url = \"https://api.twitter.com/1.1/search/tweets.json?q=%40\" + hashtag\n           WS.url(url).sign(OAuthCalculator(consumerInfo, tokens)).get().map { res =&gt;\n            val tweets = ListBuffer[(String, String)]()\n            (res.json \\ \"statuses\").as[List[JsObject]].map { tweet =&gt;\n              tweets += ((\n                (tweet \\ \"user\" \\ \"screen_name\").as[String],\n                (tweet \\ \"text\").as[String]\n              ))\n            }\n             Ok(views.html.tweets(tweets.toList))\n          }\n        }\n    ```", "```java\n    GET /client/get_tweets/:hashtag controllers.WebClient.getTweets(hashtag)\n    ```", "```java\n    @(tweets: List[(String, String)])\n         &lt;ul&gt;\n          @tweets.map { tw =&gt;\n            &lt;li&gt;&lt;strong&gt;@@@tw._1&lt;/strong&gt; says &lt;i&gt;\"@tw._2\"&lt;/i&gt;&lt;/li&gt;\n          }\n        &lt;/ul&gt;\n    ```", "```java\n// Java\n    final OAuth.ConsumerKey consumerInfo = new OAuth.ConsumerKey(\n        Play.application().configuration().getString(\"tw.consumerKey\"),\n        Play.application().configuration().getString(\"tw.consumerSecret\")\n    );\n    final OAuth.RequestToken tokens = new OAuth.RequestToken(\n        Play.application().configuration().getString(\"tw.accessToken\"),\n        Play.application().configuration()\n    .getString(\"tw.accessTokenSecret\")\n    );\n     // Scala \n    val consumerInfo = ConsumerKey(\n      Play.application.configuration.getString(\"tw.consumerKey\").get,\n      Play.application.configuration.getString(\"tw.consumerSecret\").get\n    )\n    val tokens = RequestToken(\n      Play.application.configuration.getString(\"tw.accessToken\").get,\n      Play.application.configuration.getString(\"tw.accessTokenSecret\").get\n    )\n```", "```java\n// Java\n    Promise&lt;play.libs.ws.WSResponse&gt; twRequest = \nWS.url(url).sign(new OAuthCalculator(consumerInfo, tokens)).get();\n     // Scala \n    WS.url(url).sign(OAuthCalculator(consumerInfo, tokens)).get()\n```", "```java\n// Java \n    Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();\n    JsonNode root = res.asJson();\n     for (JsonNode json : root.get(\"statuses\")) {\n      map.put(\n        json.findValue(\"user\")\n          .findValue(\"screen_name\").asText(),\n        json.findValue(\"text\").asText()\n      );\n    }\n     return ok(views.html.tweets.render(map));\n     // Scala \n    val tweets = ListBuffer[(String, String)]()\n    (res.json \\ \"statuses\").as[List[JsObject]].map { tweet =&gt;\n      tweets += ((\n        (tweet \\ \"user\" \\ \"screen_name\").as[String],\n        (tweet \\ \"text\").as[String]\n      ))\n    }\n     Ok(views.html.tweets(tweets.toList))\n```"]