["```java\nbuildscript {\n    repositories {\n        maven { url 'https://repo.spring.io/libs-snapshot' }\n    }\n\n    dependencies {\n        classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.0.3.RELEASE'\n        compile 'org.springframework.boot:spring-boot-starter-webflux'\n\n    }\n}\n\napply plugin: 'org.springframework.boot'\napply plugin: 'java'\napply plugin: 'io.spring.dependency-management'\n```", "```java\n@RestController\npublic class ReactiveController {\n\n @GetMapping(\"/fibonacci\")\n @ResponseBody\n public Publisher<Long>fibonacciSeries() {\n Flux<Long> fibonacciGenerator = Flux.generate(() -> Tuples.<Long,\n   Long>of(0L, 1L), (state, sink) -> {\n   if (state.getT1() < 0)\n   sink.complete();\n   else\n   sink.next(state.getT1());\n   return Tuples.of(state.getT2(), state.getT1() + state.getT2());\n });\n return fibonacciGenerator;\n }\n\n}\n```", "```java\npublic class ReactiveController\n```", "```java\n@SpringBootApplication\n@Configuration\n@ComponentScan(\"com.sample.web\")\n@EnableWebFlux\npublic class ReactorMain {\n public static void main(String[] args){\n  SpringApplication.run(ReactorMain.class, args);\n }\n}\n```", "```java\n@GetMapping(\"/contact/{deptId}/employee/{empId}\")\npublic Employee findEmployee(@PathVariable Long deptId, @PathVariable Long empId) {\n// Find the employee.\n}\n```", "```java\n@GetMapping(\"/contact/employee\")\npublic Employee findEmployee(@RequstParam(\"deptId\")Long deptId, @RequstParam(\"empId\") Long empId) {\n// Find the employee.\n}\n```", "```java\n@GetMapping(\"/fibonacci\")\npublic List<Long> fibonacci(@RequestHeader(\"Accept-Encoding\") String encoding) {\n// Determine Series\n}\n```", "```java\n@PostMapping(\"/department\")\npublic void createDept(@RequestBody Mono<Department> dept) {\n// Add new department\n}\n```", "```java\n@PostMapping(\"/department\")\npublic void createdept(@ModelAttribute Department dept) {\n// Add new department\n}\n```", "```java\n@RestController\npublic class ReactiveController {\n @ExceptionHandler\n public String handleError(RuntimeException ex) {\n // ...\n }\n}\n```", "```java\nHandlerFunction<ServerResponse> helloHandler = request -> {\n            Optional<String>name=request.queryParam(\"name\");\n            return ServerResponse.ok().body(fromObject(\"Hello to \" +name.orElse(\"the world.\")));\n        };\n```", "```java\nRouterFunction<ServerResponse> route =          RouterFunctions.route(RequestPredicates.path(\"/hello\"),hellowHandler);\n```", "```java\npublic interface RequestPredicate {\n boolean test(ServerRequest var1);\n default RequestPredicate and(RequestPredicate other) {..  }\n default RequestPredicate negate() {..}\n default RequestPredicate or(RequestPredicate other) {..}\n default Optional<ServerRequest> nest(ServerRequest request) {..}\n}\n```", "```java\nhelloRoute.filter((request, next) -> {\n    if (request.headers().acceptCharset().contains(Charset.forName(\"UTF-8\"))) {\n        return next.handle(request);\n    }\n    else {\n        return ServerResponse.status(HttpStatus.BAD_REQUEST).build();\n    }\n});\n```", "```java\nHttpHandler httpHandler = RouterFunctions.toHttpHandler(helloRoute);\nReactorHttpHandlerAdapter adapter = new ReactorHttpHandlerAdapter(httpHandler);\nHttpServer server = HttpServer.create(\"127.0.0.1\", 8080);\nserver.newHandler(adapter).block();\n```", "```java\nHttpHandler httpHandler =  RouterFunctions.toHttpHandler(helloRoute);\nUndertowHttpHandlerAdapter adapter = new UndertowHttpHandlerAdapter(httpHandler);\nUndertow server = Undertow.builder().addHttpListener(8080, \"127.0.0.1\").setHandler(adapter).build();\nserver.start();\n```", "```java\nHttpHandler httpHandler = RouterFunctions.toHttpHandler(helloRoute);\nServlet servlet = new TomcatHttpHandlerAdapter(httpHandler);\nTomcat server = new Tomcat();\nFile root = new File(System.getProperty(\"java.io.tmpdir\"));\nContext rootContext = server.addContext(\"\", root.getAbsolutePath());\nTomcat.addServlet(rootContext, \"ctx\", servlet);\nrootContext.addServletMappingDecoded(\"/\", \"ctx\");\nserver.setHost(host);\nserver.setPort(port);\nserver.start();\n```", "```java\n@Configuration\nclass FibonacciConfigurer {\n\n    @Bean\n    RouterFunction<ServerResponse> fibonacciEndpoint() {\n        Flux<Long> fibonacciGenerator = Flux.generate(() -> Tuples.<Long,\n                Long>of(0L, 1L), (state, sink) -> {\n            if (state.getT1() < 0)\n                sink.complete();\n            else\n                sink.next(state.getT1());\n            return Tuples.of(state.getT2(), state.getT1() + state.getT2());\n        });\n        RouterFunction<ServerResponse> fibonacciRoute =\n                RouterFunctions.route(RequestPredicates.path(\"/fibonacci\"),\n                        request -> ServerResponse.ok().body(fromPublisher(fibonacciGenerator, Long.class)));\n        return fibonacciRoute;\n    }\n}\n```", "```java\n@SpringBootApplication\n@Configuration\n@ComponentScan(\"com.sample.web\")\n@EnableWebFlux\npublic class ReactorMain {\n    public static void main(String[] args) {\n        SpringApplication.run(ReactorMain.class, args);\n    }\n}\n```", "```java\ngradlew bootrun\n```"]