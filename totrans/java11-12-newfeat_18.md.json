["```java\nfinal class Emp { \n    private String name; \n    private int age; \n\n    public Emp(String name, int age) { \n        this.name = name; \n        this.age = age; \n    } \n\n    // accessor methods - getName, getAge \n    public String getName() { \n        return name; \n    } \n\n    public int getAge() { \n        return age; \n    } \n\n    // mutator methods - setName, setAge \n    public void setName() { \n        this.name = name; \n    } \n\n    public void setAge() { \n        this.age = age; \n    } \n\n    public boolean equals(Object obj) { \n        if (obj == null || (!(obj instanceof Emp))) \n            return false; \n        else { \n            if ( ( ((Emp)obj).getName().equals(this.name) && \n                 ( ((Emp)obj).getAge() ) == this.age)) { \n                return true; \n            } \n            else \n                return false; \n        } \n    } \n\n    public String toString() { \n        return name + \":\" + age; \n    } \n    public int hashCode() { \n        // ..code \n    } \n} \n```", "```java\ninterface EmpDAO { \n    Emp read(); \n    void write(Emp emp); \n    List<Emp> getAllEmp(); \n} \n```", "```java\nrecord Emp(String name, int age) { }      // data class - one liner \n                                          // code \n```", "```java\nfinal class Emp extends java.lang.DataClass {\n     final String name; final int age; \n         public Emp(String name, int age) {\n         this.name = name; this.age = age; } // deconstructor // public        \n        // accessor methods // default implementation of equals,     \n       // hashCode, and toString } \n```", "```java\nrecord Emp(String name, int age) { }       \n```", "```java\nclass Size { \n    public final static int SMALL = 1; \n    public final static int MEDIUM = 2; \n    public final static int LARGE = 3; \n}\n```", "```java\nenum Size {SMALL, MEDIUM, LARGE} \nclass SmallTShirt { \n    Size size = Size.SMALL; \n    //..other code \n} \n```", "```java\ninterface Garment {} \nrecord Button(float radius, Color color); \nrecord Shirt(Button button, double price); \nrecord Trousers(float length, Button button, double price); \nrecord Cap(..) \n\nswitch (garment) { \n     case Shirt(Button(var a1, var a2), Color a3): ... \n     case Trousers(float a1, Button(var a2, var a3), double a4): ... \n     .... \n}\n```", "```java\nswitch (garment) { \n     case Shirt(Button a1, Color a2): ... \n     case Trousers(float a1, Button a2, double a3): ... \n     .... \n}  \n```", "```java\nrecord Emp(String name, int age) { }\n\nfinal class Emp extends java.lang.DataClass { \n    final String name; \n    final int age; \n\n    public Emp(String name, int age) { \n        this.name = name; \n        this.age = age; \n    } \n\n    // deconstructor \n    // public accessor methods \n    // default implementation of equals, hashCode, and toString \n} \n\n```", "```java\nabstract record JVMLanguage(String name, int year); \nrecord Conference(String name, String venue, DateTime when); \n```", "```java\nabstract record Emp(String name, int age); \nrecord Manager(String name, int age, String country) extends Emp(name, age); \n```", "```java\ninterface Organizer {} \ninterface Speaker { \n   abstract void conferenceTalk(); \n} \n\nabstract record Emp(String name, int age); \n\nrecord Manager(String name, int age, String country)  \n   extends Emp(name, age)                    // subclass a record\n   implements Organizer;                     // implement one interface\n\nrecord Programmer(String name, int age, String programmingLang)  \n   extends Emp(name, age)                    // subclass a record\n   implements Organizer, Speaker {           // implementing multiple \n                                             // interfaces\n        public void conferenceTalk() {       // implement abstract \n                                             // method\n            //.. code                        // from interface Speaker\n        } \n    };\n```", "```java\nrecord Emp(String name, int age) { \n    private String style; \n    Emp(String name, int age) { \n        //.. initialize name and age \n        if (age => 15 && age =< 30) style = \"COOL\"; \n        else if (age >= 31 && age <= 50) style = \"SAFE\"; \n        else if (age >= 51) style = \"ELEGANT\"; \n    } \n    public String getStyle() { \n        return style; \n    } \n}\n```", "```java\nrecord Emp(String name, int age) { \n    // override default constructor \n    @Override \n    public Emp(String name, int age) { \n        // validate age \n        if (age > 70) \n            throw new IllegalArgumentException(\"Not employable above 70             \n            years\"); \n        else { \n            // call default constructor \n            default.this(name, age); \n        } \n    } \n} \n```", "```java\nrecord Emp(String name, int age) { \n    // overloading constructor \n    public Emp(String name, String style) { \n            this.name = name; \n            if (style.equals(\"COOL\") age = 20; \n            else if (style.equals(\"SAFE\") age = 30; \n            else if (style.equals(\"ELEGANT\") age = 50; \n            else age = 70; \n        } \n    } \n    public String fancyOutput() {                 // additional method \n        return \"My style is COOL\"; \n    } \n} \n```"]