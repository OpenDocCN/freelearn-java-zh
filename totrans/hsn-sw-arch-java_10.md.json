["```java\nfrom(platformHttp(\"/camel/hello\"))\n.unmarshal()\n.json(JsonLibrary.Jackson, MyClass.class)\n.marshal()\n.jacksonxml()\n.to(file(\"/myfilePath?fileName=camelTest.xml\"));\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<myTag>\n  <mySubTag myAttribute=\"myValue\" >my content</mySubTag>\n</myTag>\n```", "```java\n{\n     \"myKey\":\"myValue\", \n     \"myOtherKey\": 42,\n     \"mySubObject\":\n          {\n               \"mySubKey\": \"mySubValue\",\n               \"myArray\":[ \"value1\", \"value2\", \"value3\" ]\n          }\n}\n```", "```java\n---\nmyKey: myValue\nmyOtherKey: 42\nmySubObject:\n  mySubKey: mySubValue\n  myArray:\n  - value1\n  - value2\n  - value3\n```", "```java\nsyntax = \"proto3\";\n\noption java_outer_classname = \"MyPojoProto\";\noption java_package = \" it.test\";\n\nmessage MyPojo {\n    string myField = 1;\n    repeated string myList = 2;\n    int32 myNumber = 3;\n}\n```", "```java\n...\n    int port = 9783;\n    server = ServerBuilder.forPort(port)\n        .addService(new PingImpl())\n        .build()\n        .start();\n    logger.info(\"Server started, listening on \" + port+\" \n      ...\");\n    server.awaitTermination();\n... \n  static class PingImpl extends PingGrpc.PingImplBase {\n    @Override\n    public void send(PingRequest req, \n      StreamObserver<PingReply> responseObserver) {\n      logger.info(\"Received request \" + req.getMsg() + \" \n        ...\");\n      PingReply reply = PingReply.newBuilder().setMsg(\"pong \n        \" + req.getMsg()).build();\n      responseObserver.onNext(reply);\n      responseObserver.onCompleted();\n    }\n  }\n...\n```", "```java\n...\nString message = \"Ciao!\";\nString target = \"localhost:9783\";\nManagedChannel channel = \n  ManagedChannelBuilder.forTarget(target)\n.usePlaintext()\n.build();\nblockingStub = PingGrpc.newBlockingStub(channel);\nlogger.info(\"Trying to ping with message \" + message + \" \n  ...\");\nPingRequest request = \n  PingRequest.newBuilder().setMsg(message).build();\nPingReply response;\nresponse = blockingStub.send(request);\nlogger.info(\"Received response: \" + response.getMsg());\n...\n```", "```java\nsyntax = \"proto3\";\n\noption java_multiple_files = true;\noption java_package = \"it.test\";\noption java_outer_classname = \"GrpcTestProto\";\noption objc_class_prefix = \"HLW\";\n\npackage grpctest;\n\nservice Ping {\n  // Sends a greeting\n  rpc Send (PingRequest) returns (PingReply) {}\n}\n\nmessage PingRequest {\n  string msg = 1;\n}\n\nmessage PingReply {\n  string msg = 1;\n}\n```", "```java\nquery {\n  payments{\n    date\n    amount\n    recipient\n  }\n}\n```", "```java\nquery {\n  getPayments(recipient: \"giuseppe\") {\n    amount\n    data\n  }\n}\n```", "```java\npublic class Payment {\n    private String id; \n    private Date date;\n    private String currency;\n    private String sender;\n    private String recipient;\n    private String signature;\n    private float amount;\n...\n```", "```java\n@ApplicationScoped\npublic class PaymentSettlement extends EndpointRouteBuilder \n{\n     @Override\n    public void configure() throws Exception {\n        from(platformHttp(\"/camel/settlement\"))\n        .unmarshal()\n        .json(JsonLibrary.Jackson, Payment.class)\n        .setHeader(\"PaymentID\", simple(\"${body.id}\"))\n        .marshal()\n        .jacksonxml()\n        .to(file(\"{{settlement.path}}?fileName=\n          ${header.PaymentID}.xml\"));\n    }\n}\n```", "```java\n{\n    \"id\":\"1ef43029-f1eb-4dd8-85c4-1c332b69173c\", \n    \"date\":1616504158091, \n    \"currency\":\"EUR\", \n    \"sender\":\"giuseppe@test.it\", \n    \"recipient\":\"stefano@domain.com\", \n    \"signature\":\"169e8dbf-90b0-4b45-b0f9-97789d66dee7\", \n    \"amount\":10.0\n}\n```", "```java\nfrom(platformHttp(\"/camel/settlement\")) \n        .unmarshal() \n        .json(JsonLibrary.Jackson, Payment.class) \n        .setHeader(\"PaymentID\", simple(\"${body.id}\")) \n        .setHeader(\"Amount\", simple(\"${body.amount}\"))\n        .marshal() \n        .jacksonxml() \n            .filter(simple(\"${header.amount} > 10\"))\n            .to(file(\"{{settlement.path}}?fileName=\n              ${header.PaymentID}.xml\"));\n```", "```java\nfrom(platformHttp(\"/camel/settlement\"))\n        .unmarshal()\n        .json(JsonLibrary.Jackson, Payment.class)\n        .setHeader(\"PaymentID\", simple(\"${body.id}\"))\n        .setHeader(\"Amount\", simple(\"${body.amount}\"))\n        .marshal()\n        .jacksonxml()\n            .choice()   \n                .when(simple(\"${header.amount} > 10\"))\n                    .to(file(\"{{settlement.path}}?fileName=\n                      ${header.PaymentID}.xml\"))\n                .otherwise()    \n                    .log(\"No settlement needed\")\n        .end();\n```", "```java\nPOST http://localhost:8080/customer-check HTTP/1.1\ncontent-type: application/json\n\n{\n    \"customer\":{\n        \"name\":\"Giuseppe\",\n        \"surname\":\"Bonocore\",\n        \"age\":37,\n        \"taxCode\":\"dads213213fasfasf\"\n    }\n}\n```", "```java\nPOST http://localhost:8080/customer_onboarding HTTP/1.1\ncontent-type: application/json\n\n{\n    \"customer\":{\n        \"name\":\"Giuseppe\",\n        \"surname\":\"Bonocore\",\n        \"age\":37,\n        \"taxCode\":\"dads213213fasfasf\"\n    }\n}\n```"]