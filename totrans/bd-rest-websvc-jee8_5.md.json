["```java\n    @GET\n    @Produces(MediaType.SERVER_SENT_EVENTS)\n    public void openEventStream(\n      @Context final SseEventSink eventSink) {\n        this.eventSink = eventSink;\n    }\n```", "```java\n    @POST\n    public void sendEvent(String message, @Context Sse sse) {\n        final SseEventSink localSink = eventSink;\n        if (localSink == null) return;\n\n        // send simple event\n        OutboundSseEvent event = sse.newEvent(message);\n        localSink.send(event);\n```", "```java\n        // send simple string event\n        OutboundSseEvent stringEvent = sse.newEvent(\n          \"stringEvent\", message + \" From server.\");\n        localSink.send(stringEvent);\n```", "```java\n        // send primitive long event using builder\n        OutboundSseEvent primitiveEvent = sse.newEventBuilder()\n                .name(\"primitiveEvent\")\n```", "```java\n                .data(System.currentTimeMillis()).build();\n        localSink.send(primitiveEvent);\n```", "```java\n    @JsonbPropertyOrder({\"time\", \"message\"})\n    public static class JsonbSseEvent {\n        String message;\n        LocalDateTime today = LocalDateTime.now();\n        public JsonbSseEvent(String message) {\n            this.message = message;}\n        public String getMessage() {\n            return message;}\n        public void setMessage(String message) {\n            this.message = message;}\n        public LocalDateTime getToday() {\n            return today;}\n        public void setToday(LocalDateTime today) {\n            this.today = today;}\n    }\n}\n```", "```java\n        // send JSON-B marshalling to send event\n        OutboundSseEvent jsonbEvent = sse.newEventBuilder()\n                .name(\"jsonbEvent\")\n                .data(new JsonbSseEvent(message))\n                .mediaType(MediaType.APPLICATION_JSON_TYPE)\n                .build();\n        localSink.send(jsonbEvent);\n    }\n```", "```java\n    @DELETE\n    public void closeEventStream() throws IOException {\n        final SseEventSink localSink = eventSink;\n        if (localSink != null) {\n            this.eventSink.close();\n        }\n        this.eventSink = null;\n    }\n```", "```java\n    @Before\n    public void setUp() {\n        client = ClientBuilder.newBuilder()\n                .connectTimeout(5, TimeUnit.SECONDS)\n                .readTimeout(30, TimeUnit.SECONDS)\n                .build();\n\n        executorService = Executors.newSingleThreadScheduledExecutor();\n    }\n```", "```java\n        webTarget = client.target(\"http://localhost:8080\")\n                    .path(\"/sse-service/api/events\");\n```", "```java\n    @After\n    public void tearDown() {\n        client.close();\n        executorService.shutdown();\n    }\n```", "```java\n    @Test\n    public void receiveSse() throws Exception {\n\n        executorService.scheduleWithFixedDelay(() -> {\n            webTarget.request().post(Entity.entity(\n              \"Hello SSE JAX-RS client.\", \n              MediaType.TEXT_PLAIN_TYPE));\n        }, 250, 500, TimeUnit.MILLISECONDS);\n```", "```java\n        try (SseEventSource eventSource = SseEventSource\n          .target(webTarget).build()) {\n            eventSource.register((e) -> LOGGER.log(Level.INFO, \n                    \"Recieved event {0} with data {1}.\",\n                    new Object[]{e.getName(), e.readData()}));\n            eventSource.open();\n\n            TimeUnit.SECONDS.sleep(5);\n        }\n    }\n```", "```java\n<h2>Messages</h2>\n<div id=\"messages\"></div>\n<script>\n    if (typeof(EventSource) !== \"undefined\") {\n        var source = new EventSource(\n          \"http://localhost:8080/sse-service/api/events\");\n        source.onmessage = function (event) {\n            document.getElementById(\"messages\").innerHTML += \n              event.data + \"<br>\";\n        };\n```", "```java\n<script>\n    if (typeof(EventSource) !== \"undefined\") {\n        var source = new EventSource(\n           \"http://localhost:8080/sse-service/api/events\");\n        source.onmessage = function (event) {\n            document.getElementById(\"messages\")\n            .innerHTML += event.data + \"<br>\";\n        };\n    ...\n    ...\n        source.addEventListener(\"jsonbEvent\", function (e) {\n            document.getElementById(\"jsonbEvents\")\n            .innerHTML += e.data + \"<br>\";\n        }, false);\n    } else {\n        document.getElementById(\"jsonbEvents\").innerHTML = \n        \"Sorry, your browser does not support server-sent events...\";\n    }\n```", "```java\n    @Context\n    private Sse sse;\n    private SseBroadcaster sseBroadcaster;\n\n    @PostConstruct\n    public void initialize() {\n        sseBroadcaster = sse.newBroadcaster();\n    }\n```", "```java\n    @GET\n    @Produces(MediaType.SERVER_SENT_EVENTS)\n    public void fetch(@Context SseEventSink sseEventSink) {\n        sseBroadcaster.register(sseEventSink);\n    }\n```", "```java\n    @POST\n    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)\n    public Response broadcast(@FormParam(\"message\") String message) {\n        OutboundSseEvent broadcastEvent = sse.newEvent(\n          \"message\", message);\n        sseBroadcaster.broadcast(broadcastEvent);\n        return Response.noContent().build();\n    }\n```", "```java\n<form action=\"/sse-service/api/broadcast\" method=\"post\">\n    Message <input type=\"text\" name=\"message\"/>\n    <input type=\"submit\" value=\"Submit\"/>\n</form>\n```"]