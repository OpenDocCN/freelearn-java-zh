["```java\njava –jar demo-swarm.jar\n```", "```java\n<dependency>\n  <groupId>mysql</groupId>\n  <artifactId>mysql-connector-java</artifactId>\n  <version>8.0.8-dmr</version>\n</dependency>\n```", "```java\n<persistence-unit name=\"coursemanagement\" transaction-type=\"RESOURCE_LOCAL\">\n  <properties>\n    <provider>org.eclipse.persistence.jpa.PersistenceProvider</provider>\n       <class>packt.book.jeeeclipse.wildflyswarm.coursemanagement.rest.Course</class>\n    <property name=\"javax.persistence.jdbc.driver\" value=\"com.mysql.cj.jdbc.Driver\"/>\n    <property name=\"javax.persistence.jdbc.url\" value=\"jdbc:mysql://localhost/course_management\"/>\n    <property name=\"javax.persistence.jdbc.user\" value=\"<enter_your_user_name> \"/>\n    <property name=\"javax.persistence.jdbc.password\" value=\"<enter_your_password> \"/>\n  </properties>\n</persistence-unit>\n```", "```java\npackage packt.book.jeeeclipse.wildflyswarm.coursemanagement.rest;\n\n// skipping imports to save space\n\n@Entity\n@Table(name=\"\\\"Course\\\"\")\n@NamedQuery(name=\"Course.findAll\", query=\"SELECT c FROM Course c\")\npublic class Course implements Serializable {\n  private static final long serialVersionUID = 2550281519279297343L;\n\n  @Id\n  @GeneratedValue(strategy=GenerationType.IDENTITY)\n  @Column(name=\"id\")\n  private int id;\n\n  @NotNull\n  @Column(name=\"name\")\n  private String name;\n\n  @Min(1)\n  @Column(name=\"credits\")\n  private int credits;\n\n  // skipping getter and setters to save space\n}\n```", "```java\npackage packt.book.jeeeclipse.wildflyswarm.coursemanagement.rest;\n\n// skipping imports to save space\n\n@ApplicationScoped\npublic class CourseManagementJPAFactory {\n  private EntityManager _entityManager;\n\n  public EntityManager getEntityManager() {\n    if (_entityManager != null) return _entityManager;\n\n    EntityManagerFactory factory = Persistence.createEntityManagerFactory(\"coursemanagement\");\n\n    _entityManager = factory.createEntityManager();\n\n    return _entityManager;\n }\n}\n```", "```java\npackage packt.book.jeeeclipse.wildflyswarm.coursemanagement.rest;\n// skipping imports to save space\n\n@ApplicationScoped\n@Path(\"/course_management\")\npublic class CourseManagementEndpoint {\n  @Inject\n  private CourseManagementJPAFactory jpaFactory;\n\n  @GET\n  @Path(\"/courses\")\n  @Produces(MediaType.APPLICATION_JSON)\n  public List<Course> doGet() {\n    EntityManager entityManager = jpaFactory.getEntityManager();\n    TypedQuery<Course> courseQuery = entityManager.createNamedQuery(\"Course.findAll\", Course.class);\n    List<Course> courses = courseQuery.getResultList();\n    return courses;\n  }\n}\n```", "```java\nspring.datasource.url = jdbc:mysql://localhost/course_management?autoReconnect=true&useSSL=false\nspring.datasource.driver-class-name = com.mysql.cj.jdbc.Driver\nspring.datasource.username=<your_user_name>\nspring.datasource.password=<your_passwod>\nspring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl\n```", "```java\npackage packt.book.jeeeclipse.springboot.coursemanagementspring;\nimport org.springframework.data.repository.CrudRepository;\npublic interface CourseRepository extends CrudRepository<Course, Long>{\n}\n```", "```java\npackage com.example.demo;\n// skipping imports to save space\n\n@RestController\npublic class CourseController {\n  @Autowired\n  private CourseRepository courseRepository;\n\n  @RequestMapping(value = \"/course_management/courses\", method = RequestMethod.GET)\n  public Iterable<Course> getCourses() {\n    return courseRepository.findAll();\n  }\n}\n```", "```java\ndocker run –name <container_name> <options> <base_image> <command_to_run>\n```", "```java\ndocker run -name my-ubuntu -it ubuntu bash\n```", "```java\ndocker build <options> <folder_of_dockerfile>\n```", "```java\ndocker build -t image_name\n```", "```java\ndocker ps\n```", "```java\ndocker ps -a\n```", "```java\ndocker start -i <container>\n```", "```java\ndocker rm <container>\n```", "```java\ndocker exec <options> <container> <command>\n```", "```java\ndocker exec –it my_container bash\n```", "```java\ndocker images\n```", "```java\ndocker rmi <image_ids>\n```", "```java\ndocker inspect <container>\n```", "```java\ndocker network create --driver bridge coursemanagement\n```", "```java\ndocker run --name course-management-mysql -e MYSQL_ROOT_PASSWORD=your_password –p 3306:3306 --network=coursemanagement -d mysql\n```", "```java\ndocker run --name course-management-mysql -e MYSQL_ROOT_PASSWORD=your_password -d –p 3306:3306 --network=coursemanagement mysql:5.5.58\n```", "```java\ndocker run --name course-management-mysql -e MYSQL_ROOT_PASSWORD=your_password –p 3305:3306 --network=coursemanagement –d mysql\n```", "```java\nmysql -h 127.0.0.1 –u root -p\n```", "```java\ndocker pull mysql\n```", "```java\n<property name=\"javax.persistence.jdbc.url\" value=\"jdbc:mysql://course-management-mysql/course_management?autoReconnect=true&amp;useSSL=false\"/>\n```", "```java\nFROM openjdk:8\nENV swarm.http.port 8080\nRUN mkdir microservices\nCOPY ./target/coursemanagement-swarm.jar ./microservices\nEXPOSE 8080\nENTRYPOINT java -jar -Djava.net.preferIPv4Stack=true ./microservices/coursemanagement-swarm.jar\n```", "```java\n FROM mysql:5.7\n COPY ./course-management-db.sql /docker-entrypoint-initdb.d\n ENV MYSQL_ROOT_PASSWORD root\n```", "```java\nFROM openjdk:8\nRUN mkdir microservices\nCOPY ./coursemanagementspring-0.0.1-SNAPSHOT.jar ./microservices\nEXPOSE 8080\nENTRYPOINT java -jar -Djava.net.preferIPv4Stack=true ./microservices/coursemanagementspring-0.0.1-SNAPSHOT.jar\n```", "```java\nversion: \"3\"\nservices: \n  course-managemnt-db:\n    build: \n      context: .\n      dockerfile: course-management-db.dockerfile\n    container_name: course-management-mysql\n    ports:\n      - 3306:3306\n  course-management-service:\n    build:\n      context: .\n      dockerfile: course-management-service.dockerfile\n    container_name: course-management-service\n    ports:\n      - 80:8080\n    depends_on:\n      - course-managemnt-db  \n```", "```java\ndocker-compose up\n```", "```java\ndocker-compose up –d\n```", "```java\ndocker-compose down\n```", "```java\ndocker-compose build\n```"]