["```java\n@Controller\npublic String greet()\n{\n  return \"Greetings, Earthling\";\n}\n```", "```java\npackage uk.co.xenonique.basic.mvc;\nimport javax.enterprise.context.RequestScoped;\nimport javax.inject.Named;\n@Named(value=\"user\")\n@RequestScoped\npublic class User {\n  private String name;\n  public User() {}\n  public String getName() {return name; }\n  public void setName(String name) {this.name = name; }\n}\n```", "```java\npackage uk.co.xenonique.basic.mvc;\n/* ... */\nimport javax.mvc.Controller;\nimport javax.mvc.Viewable;\nimport javax.ws.rs.*;\n\n@Path(\"/hello\")\n@Stateless\npublic class AlienGreetings {\n  @Inject User user;\n\n  @GET\n  @Controller\n  @Path(\"simple1\")\n  @Produces(\"text/html\")\n  public String simple1( @QueryParam(\"name\") String name )\n  {\n    user.setName(name);\n    return \"/hello.jsp\";\n  }\n}\n```", "```java\n  @GET\n  @Controller\n  @Path(\"simple2\")\n  @Produces(\"text/html\")\n  public Viewable simple2( @QueryParam(\"name\") String name )\n  {\n    user.setName(name);\n    return new Viewable(\"/hello.jsp\");\n  }\n```", "```java\n  @GET\n  @Controller\n  @Path(\"simple3\")\n  @Produces(\"text/html\")\n  @View(\"/hello.jsp\")\n  public void simple3( @QueryParam(\"name\") String name )\n  {\n    user.setName(name);\n  }\n```", "```java\n  @POST\n  @Controller\n  @Path(\"webform\")\n  @Produces(\"text/html\")\n  public Viewable helloWebForm( @FormParam(\"name\") String name )\n  {\n    user.setName(name);\n    return new Viewable(\"/hello.jsp\");\n  }\n```", "```java\n  @GET\n  @Controller\n  @Path(\"view/{name}\")\n  @Produces(\"text/html\")\n  public Viewable helloWebPath( @PathParam(\"name\") String name )\n  {\n    user.setName(name);\n    return new Viewable(\"/hello.jsp\");\n  }\n```", "```java\n<%@ page import=\"uk.co.xenonique.basic.mvc.AlienGreetings\" %>\n<!DOCTYPE html>\n<html>\n<head> ...\n  <link href=\"${pageContext.request.contextPath}/styles/bootstrap.css\" rel=\"stylesheet\">\n  <link href=\"${pageContext.request.contextPath}/styles/main.css\" rel=\"stylesheet\">\n</head>\n<body>\n  <div class=\"main-content\"> ...\n    <div class=\"other-content\">\n      <h2>Simple MVC Controller</h2>\n      <p>\n        HTTP GET Request with query parameter and invocation of \n        <code><%= AlienGreetings.class.getSimpleName() %>\n        </code> with HTML Form:<br>\n        <a href=\"${pageContext.request.contextPath}\n          /rest/hello/simple1?name=James\" \n          class=\"btn btn-primary\"> Person called James\n        </a>\n      </p>\n      <p>...\n        <a href=\"${pageContext.request.contextPath}\n          /rest/hello/simple2?name=Patricia\" \n          class=\"btn btn-primary\"> Person called Patricia\n        </a>\n      </p>\n      <p>...\n        <a href=\"${pageContext.request.contextPath}\n          /rest/hello/simple3?name=Aliiyah\" \n          class=\"btn btn-primary\"> Person called Aliiyah\n        </a>\n      </p>\n      <p>      \n        <form action=\"${pageContext.request.contextPath}\n          /rest/hello/webform\"method=\"POST\" >\n          <div class=\"form-group\">\n            <label for=\"elementName\">Name</label>\n            <input type=\"text\" class=\"form-control\" \n              id=\"elementName\" name=\"name\" placeholder=\"Jane Doe\">\n          </div>\n        </form>\n      </p>\n      ...\n    </div>\n  </body>\n</html>\n```", "```java\n<div class=\"main-content\">\n  <div class=\"page-header\">\n    <h1> Java EE 8 MVC - Hello</h1>\n    <p> Model View Controller </p>\n  </div>\n  <div class=\"other-content\">\n    <div class=\"jumbotron\">\n      <p> Hello ${user.name} </p>\n    </div>\n    <p> How are you?</p>\n  </div>\n</div>\n```", "```java\n@Path(\"/hello2\")\n@Stateless\npublic class PhobosGreetings {\n  @Inject\n  Models models;\n\n  @GET\n  @Controller\n  @Path(\"simple2\")\n  @Produces(\"text/html\")\n  public Viewable simple1(  @QueryParam(\"name\") String name )\n  {\n    models.put(\"users\", new User(name));\n    return new Viewable(\"/hello2.jsp\");\n  }\n}\n```", "```java\n@Path(\"redirect\")\n@Stateless\n@Controller\npublic class RedirectController {\n  @GET\n  @Path(\"string\")\n  public String getString() {\n      return \"redirect:redirect/here\";\n  }\n\n  @GET\n  @Path(\"response1\")\n  public Response getResponse1() {\n    return Response.seeOther(\n      URI.create(\"redirect/here\")).build();\n  }\n\n  @GET\n  @Path(\"deliberateError1\")\n  public Response getErrorResponse1() {\n    return Response.status(Response.Status.BAD_REQUEST)\n      .entity(\"/error.jsp\").build();\n  }\n\n  @GET\n  @Path(\"here\")\n  @Produces(\"text/html\")\n  public String getRedirectedView() {\n    return \"redirected.jsp\";\n  }\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app  ...>\n  ...\n  <servlet>\n    <servlet-name>javax.ws.rs.core.Application</servlet-name>\n    <init-param>\n      <param-name>javax.mvc.engine.ViewEngine.viewFolder</param-name>\n      <param-value>/</param-value>\n    </init-param>\n    <load-on-startup>1</load-on-startup>\n    <async-supported>true</async-supported>\n  </servlet>...\n</web-app>\n```", "```java\npackage uk.co.xenonique.basic.mvc;\nimport com.github.jknack.handlebars.*;\nimport javax.servlet.*;\n/* ... other imports omitted */\n\n@WebServlet(\"/compiled\")\npublic class CompileInlineServlet extends HttpServlet {\n  @Override\n  protected void doGet(HttpServletRequest request, HttpServletResponse response)\n    throws ServletException, IOException\n  {\n    final Handlebars handlebars = new Handlebars();\n    final Template template = handlebars.compileInline(\n         \"Hello {{this}}!\");\n    final String text = template.apply(\"Handlebars.java\");\n    response.setContentType(\"text/plain\");\n    response.getOutputStream().println(text);\n  }\n}\n```", "```java\nHello {{this}}!\n```", "```java\nHello Handlebars.java!\n```", "```java\n<div class=\"trade-entry\">\n  <h1>{{title}}</h1>\n  <div class=\"trade-detail\">\n    {{detail}}\n  </div>\n</div>\n```", "```java\npackage uk.co.xenonique.basic.mvc;\nimport com.github.jknack.handlebars.*;\nimport com.github.jknack.handlebars.io.*;\n/* ... imports omitted */\n\n@WebServlet(\"/tradeinfo\")\npublic class TradeInfoServlet extends HttpServlet {\n  @Override\n  protected void doGet(HttpServletRequest request,\n     HttpServletResponse response)\n      throws ServletException, IOException\n  {\n    final TemplateLoader loader = \n      new ServletContextTemplateLoader(\n         request.getServletContext());\n    final Handlebars handlebars = new Handlebars(loader);\n    final Template template = handlebars.compile(\"trade\");\n    final Map<String,String> context = \n        new HashMap<String,String>() {{\n      put(\"title\", \"12345FUND-EURO-FUTURE6789\");\n      put(\"detail\", \"Nominal 1.950250M EUR\");\n      put(\"trade-date\", \"23-07-2015\");\n      put(\"maturity-date\", \"23-07-2018\");\n    }};\n    final String text = template.apply(context);\n    response.setContentType(\"text/html\");\n    response.getOutputStream().println(text);\n  }\n}\n```", "```java\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\n<html>\n<body>\n<meta http-equiv=\"refresh\" content=\"0; \n  url=${pageContext.request.contextPath}/rest/welcome\" />\n</body>\n</html>\n```", "```java\n@Path(\"/welcome\")\n@Stateless\npublic class WelcomeController {\n  @Inject Models models;\n\n  @GET\n  @Controller\n  @Produces(\"text/html\")\n  public Viewable welcome()\n  {\n    models.put(\"pageTitle\", \"Handlebars.java Java EE 8 MVC\" );\n    models.put(\"title\", \"Welcome\");\n    return new Viewable(\"/welcome.hbs\");\n  }\n}\n```", "```java\n<!DOCTYPE html>\n<html>\n{{> header }}\n<body>\n  {{> navbar }}\n\n  <div class=\"main-content\">\n    ...\n  </div>\n\n  {{> footer}}\n</body>\n{{> bottom }}\n</html>\n```", "```java\npackage uk.co.xenonique.basic.mvc;\nimport com.github.jknack.handlebars.*;\nimport com.github.jknack.handlebars.io.*;\nimport com.oracle.ozark.engine.ViewEngineBase;\n// ... other imports ommitted\n\n@ApplicationScoped\npublic class MyHandlebarsViewEngine extends ViewEngineBase {\n  @Inject private ServletContext servletContext;\n\n  @Override\n  public boolean supports(String view) {\n    return view.endsWith(\".hbs\") || view.endsWith(\".handlebars\");\n  }\n\n  @Override\n  public void processView(ViewEngineContext context) throws ViewEngineException {\n    final Models models = context.getModels();\n    final String viewName = context.getView();\n\n    try (PrintWriter writer = context.getResponse().getWriter();\n         InputStream resourceAsStream = \n         servletContext.getResourceAsStream(resolveView(context));\n         InputStreamReader in = \n            new InputStreamReader(resourceAsStream, \"UTF-8\");\n       BufferedReader buffer = new BufferedReader(in);) {\n      final String viewContent = buffer.lines()\n        .collect(Collectors.joining());\n      final TemplateLoader loader = \n        new ServletContextTemplateLoader(servletContext);\n      final Handlebars handlebars = new Handlebars(loader);\n      models.put(\"webContextPath\", \n         context.getRequest().getContextPath());\n      models.put(\"page\", context.getRequest().getRequestURI());\n      models.put(\"viewName\", viewName);\n      models.put(\"request\", context.getRequest());\n      models.put(\"response\", context.getResponse());\n      handlebars.registerHelper(\"formatDecimal\", new Helper<BigDecimal>() {\n          @Override\n          public CharSequence apply(BigDecimal number, Options options) throws IOException {\n            final DecimalFormat formatter = \n               new DecimalFormat(\"###0.##\");\n            return formatter.format(number.doubleValue());\n          }\n      });\n      Template template = handlebars.compileInline(viewContent);\n      template.apply(models, writer);\n    } catch (IOException e) {\n        throw new ViewEngineException(e);\n    }\n  }\n}\n```", "```java\n@Entity\n@NamedQueries({\n  @NamedQuery(name=\"Product.findAll\",\n    query = \"select p from Product p order by p.name\"),\n  @NamedQuery(name=\"Product.findById\",\n    query = \"select p from Product p where p.id = :id\"),\n})\npublic class Product {\n  @Id\n  @GeneratedValue(strategy = GenerationType.AUTO)\n  private Integer id;\n  @NotEmpty @Size(max=64) private String name;\n  @NotEmpty @Size(max=256) private String description;\n  @NotNull @DecimalMin(\"0.010\") private BigDecimal price;\n\n  public Product() { this(null, null, null); }\n\n  public Product(String name, String description, BigDecimal price) {\n    this.name = name;\n    this.description = description;\n    this.price = price;\n  }\n  /* ... */\n}\n```", "```java\n@Path(\"/products\")\n@Stateless\npublic class ProductController {\n  @Inject Models models;\n  @Inject ValidatorFactory validatorFactory;\n  @Inject FormErrorMessage formError;\n  @EJB ProductService productService;\n\n  private void defineCommonModelProperties(String title ) {\n    models.put(\"pageTitle\", \"Handlebars.java Java EE 8 MVC\" );\n    models.put(\"title\", title);\n  }\n\n  private void retrieveAll() {\n    final List<Product> products = productService.findAll();\n    models.put(\"products\", products );\n    models.put(\"title\", \"Products\");\n  }\n\n  @GET\n  @Controller\n  @Path(\"list\")\n  @Produces(\"text/html\")\n  public Viewable listProducts()\n  {\n    retrieveAll();\n    defineCommonModelProperties(\"Products\");\n    return new Viewable(\"/products.hbs\");\n  }\n  /* ... */\n}\n```", "```java\n<div class=\"other-content\">\n  <div class=\"jumbotron\">\n      <p> {{title}} </p>\n  </div>\n\n  <p>\n    <a href=\"{{webContextPath}}/rest/products/preview-create\" \n      class=\"btn-primary btn\">Add New Product</a>\n  </p>\n\n  <table class=\"product-container-table table table-bordered table-responsive table-striped\">\n    <tr>\n      <th> Product Name </th>\n      <th> Description </th>\n      <th> Unit Price </th>\n      <th> Action </th>\n    </tr>\n\n    {{#each products}}\n      <tr>\n        <td> {{this.name}} </td>\n        <td> {{this.description}} </td>\n        <td> {{formatDecimal this.price}} </td>\n        <td>\n          <a class=\"btn\" href=\"{{webContextPath}}/rest/products/view/{{this.id}}\" ><i class=\"glyphicon glyphicon-edit\"></i></a>\n          <a class=\"btn\" href=\"{{webContextPath}}/rest/products/preview-delete/{{this.id}}\" ><i class=\"glyphicon glyphicon-trash\"></i></a>\n        </td>\n      </tr>\n    {{/each}}\n  </table>\n</div>\n```", "```java\n  @GET\n  @Controller\n  @Path(\"view/{id}\")\n  @Produces(\"text/html\")\n  public Viewable retrieveProduct( @PathParam(\"id\") int id )\n  {\n      final List<Product> products = productService.findById(id);\n      models.put(\"product\", products.get(0) );\n      defineCommonModelProperties(\"Product\");\n      return new Viewable(\"/edit-product.hbs\");\n  }\n```", "```java\n@POST\n@Controller\n@Path(\"edit/{id}\")\n@Produces(\"text/html\")\npublic Response editProduct( \n  @PathParam(\"id\") int id,\n  @FormParam(\"action\") String action,\n  @FormParam(\"name\") String name,\n  @FormParam(\"description\") String description,\n  @FormParam(\"price\") BigDecimal price)\n{\n  defineCommonModelProperties(\"Edit Product\");\n  if (\"Save\".equalsIgnoreCase(action)) {\n    final List<Product> products = \n      productService.findById(id);\n    final Product product2 = new Product(\n      name, description, price );\n    final Set<ConstraintViolation<Product>> set = \n      validatorFactory.getValidator().validate(product2);\n    if (!set.isEmpty()) {\n      final ConstraintViolation<?> cv = set.iterator().next();\n      final String property = cv.getPropertyPath().toString();\n      formError.setProperty(\n        property.substring(property.lastIndexOf('.') + 1));\n      formError.setValue(cv.getInvalidValue());\n      formError.setMessage(cv.getMessage());\n      models.put(\"formError\",formError);\n      return Response.status(BAD_REQUEST).\n         entity(\"error.hbs\").build();\n    }\n    final Product product = products.get(0);\n    product.setName(name);\n    product.setDescription(description);\n    product.setPrice(price);\n    productService.saveProduct(product);\n    models.put(\"product\", product);\n  }\n  retrieveAll();\n  return Response.status(OK).entity(\"/products.hbs\").build();\n}\n```", "```java\n@Named(\"error\")\n@RequestScoped\npublic class FormErrorMessage {\n  private String property;\n  private Object value;\n  private String message;\n\n  /* ... getters and setters omitted */\n}\n```", "```java\n<div class=\"page-header\">\n  <h1> {{pageTitle}} </h1>\n</div>\n<div class=\"other-content\"> ...\n  <div class=\"main-content\" >\n    <table class=\"table table-stripped table-bordered table-responsive\">\n      <tr>\n        <th>Name</th><th>Value</th>\n      </tr>\n      <tr>\n        <td>Property</td> <td>{{formError.property}}</td>\n      </tr>\n      <tr>\n        <td>Message</td> <td>{{formError.message}}</td>\n      </tr>\n      <tr>\n        <td>Value</td> <td>{{formError.value}}</td>\n      </tr>\n    </table>\n  </div> ...\n</div>\n```", "```java\n@POST\n@Controller\n@Path(\"alt-edit/{id}\")\n@Produces(\"text/html\")\npublic Response altEditProduct( \n  @PathParam(\"id\") int id,\n  @FormParam(\"action\") String action,\n  @NotNull @NotEmpty @FormParam(\"name\") String name,\n  @NotNull @NotEmpty @FormParam(\"description\") String description,\n  @NotNull @DecimalMin(\"0.0\") @FormParam(\"price\") BigDecimal price )\n{\n  defineCommonModelProperties(\"Edit Product\");\n  if (\"Save\".equalsIgnoreCase(action)) {\n    final List<Product> products = productService.findById(id);\n    final Product product = products.get(0);\n    product.setName(name);\n    product.setDescription(description);\n    product.setPrice(price);\n    productService.saveProduct(product);\n    models.put(\"product\", product);\n  }\n  retrieveAll();\n  return Response.status(OK).entity(\"/products.hbs\").build();\n}\n```", "```java\npackage uk.co.xenonique.basic.mvc;\nimport javax.annotation.Priority;\nimport javax.mvc.*;\nimport javax.ws.rs.*;\n/* ... other import omitted ... */\nimport static javax.ws.rs.core.Response.Status.*;\n\n@Provider\n@Priority(Priorities.USER)\npublic class ConstraintViolationExceptionMapper\n  implements ExceptionMapper<ConstraintViolationException> {\n  @Context HttpServletRequest request;\n\n  @Override\n  public Response toResponse(\n    final ConstraintViolationException exception) {\n    final Models models = new com.oracle.ozark.core.ModelsImpl();\n    final ConstraintViolation<?> cv = \n      exception.getConstraintViolations().iterator().next();\n    final String property = cv.getPropertyPath().toString();\n    final FormErrorMessage formError = new FormErrorMessage();\n    formError.setProperty(\n      property.substring(property.lastIndexOf('.') + 1));\n    formError.setValue(cv.getInvalidValue());\n    formError.setMessage(cv.getMessage());\n    models.put(\"formError\",formError);\n    request.setAttribute(\"formError\", formError);\n    final Viewable viewable = new Viewable(\"error.hbs\", models);\n    return Response.status(BAD_REQUEST).entity(viewable).build();\n  }\n}\n```", "```java\npackage javax.mvc.binding;\npublic interface BindingResult {\n  boolean isFailed();\n  List<String> getAllMessages();\n  Set<BindingError> getAllBindingErrors();\n  BindingError getBindingError(String param);\n  Set<ConstraintViolation<?>> getViolations(String param);\n  ConstraintViolation<?> getViolation(String param);\n}\n```", "```java\npackage javax.mvc.binding;\npublic interface BindingError {\n  String getMessage();\n  String getMessageTemplate();\n  String getParamName();\n}\n```", "```java\n@Path(\"/products\")\n@Stateless\npublic class ProductController {\n  @Inject BindingResult br;\n\n  /* ... */\n\n  @POST\n  @Controller\n  @Path(\"edit/{id}\")\n  @Produces(\"text/html\")\n  @ValidateOnExecution(type = ExecutableType.NONE)\n  public Response editProduct( \n    @PathParam(\"id\") int id,\n    @FormParam(\"action\") String action,\n    @Valid @BeanParam Product incomingProduct)\n  {\n    defineCommonModelProperties(\"Edit Product\");\n    if (\"Save\".equalsIgnoreCase(action)) {\n      Set<ConstraintViolation<?>> set = vr.getAllViolations();\n      if (!set.isEmpty()) {\n        final ConstraintViolation<?> cv = set.iterator().next();\n        final String property = cv.getPropertyPath().toString();\n        formError.setProperty(\n            property.substring(property.lastIndexOf('.') + 1));\n        formError.setValue(cv.getInvalidValue());\n        formError.setMessage(cv.getMessage());\n        models.put(\"formError\",formError);\n        return Response.status(BAD_REQUEST).\n          entity(\"error.hbs\").build();\n      }\n      final List<Product> products = productService.findById(id);\n      final Product product = products.get(0);\n      product.setName(incomingProduct.getName());\n      product.setDescription(incomingProduct.getDescription());\n      product.setPrice(incomingProduct.getPrice());\n      productService.saveProduct(product);\n      models.put(\"product\", product);\n    }\n    retrieveAll();\n    return Response.status(OK).entity(\"/products.hbs\").build();\n  }\n}\n```"]