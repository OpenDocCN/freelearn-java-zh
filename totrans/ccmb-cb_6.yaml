- en: Chapter 6. Building Cucumber Frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Building a Web Automation framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a Mobile Automation framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a REST Automation framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cucumber is a platform to implement BDD and not automate applications. For automating
    applications, different APIs are available like Selenium Webdriver for the Web,
    Appium for mobile, and HTTP Client for REST Services. Until now, we have learned
    various Cucumber Features so that we can build a robust automation framework but
    we also need to integrate Cucumber with the APIs mentioned earlier so that we
    can have frameworks which automate real-time applications.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn how to build frameworks to automate Web, REST,
    and Mobile applications.
  prefs: []
  type: TYPE_NORMAL
- en: Building a Web Automation framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Selenium** is a Web Automation tool that has made life a lot easier for testers
    because of its capabilities and powers, and is the number one choice for testers
    to automate websites. That''s the reason we have also chosen Selenium for our
    framework.'
  prefs: []
  type: TYPE_NORMAL
- en: When we create a framework, we should keep in mind that adding new test cases
    and making changes to existing test cases should be fairly easy and simple.
  prefs: []
  type: TYPE_NORMAL
- en: Let's learn how we can create a robust Web Automation framework using Cucumber
    and Selenium, along with keeping maintainability and scalability in mind.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install Firefox on your system as per the version supported by the latest Selenium
    version. For more information on Selenium and browser support, visit the web page
    at [http://docs.seleniumhq.org/about/platforms.jsp](http://docs.seleniumhq.org/about/platforms.jsp).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s first understand the test case that we will use in this framework. We
    will test the login functionality of [https://github.com/](https://github.com/).
    The following is the test case flow:'
  prefs: []
  type: TYPE_NORMAL
- en: We open [https://github.com/](https://github.com/) and click on **Sign in**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We don't enter the username and password and click on **Sign in**:![How to do
    it…](img/image00174.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We verify the error message we get:![How to do it…](img/image00175.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will create a simple Maven project using the Eclipse Maven plugin. Click
    on **New** in the Eclipse menu and follow the screenshots to create the Maven
    project named `CucumberWebAutomation`:![How to do it…](img/image00176.jpeg)![How
    to do it…](img/image00177.jpeg)![How to do it…](img/image00178.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Since it is a Maven project, we will update the `pom.xml` file for adding the
    dependencies of Cucumber and Selenium. As of now, this is what `pom.xml` looks
    like:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will add the `properties` tag and define properties for the Cucumber and
    Selenium versions so that when we need to update the dependency version, we will
    need to do it only at one place. Add the following code to `pom.xml` inside the
    `<project>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: To check latest dependency version on Maven central repository, refer to [http://search.maven.org/](http://search.maven.org/).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We will add dependency for Cucumber-JVM for BDD and Selenium-JVM for web automation.
    Please add the following code to `pom.xml` after the `</properties>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We will create the project structure and will keep similar files in the same
    package. Follow the steps shown in this screenshot and create the packages as
    mentioned:![How to do it…](img/image00179.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Since it is a Cucumber project, we are going to add the `RunCukeTest.java`
    file to specify the configuration, such as the location of Feature files, the
    location of Step Definitions, the output location, and so on. Add the following
    class to the `CucumberOptions` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now it''s time to add a Feature file to specify the requirements. We will add
    the `github_login.feature` file to the package features. This is how our Feature
    file look likes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The next step is to add Step Definitions. The simplest way would be to run
    the project once and use the suggestions given by Cucumber. Add a `GithubLoginSD.java`
    file to the `stepDefinitions` package and it should have the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we need to add Selenium functions, which can be used to invoke the Firefox
    browser and close the browser once the execution finishes. I am keeping this file
    very basic for simplicity purposes. Create the `DriverFactory.java` class in the
    `utils` package, and the code should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we need to hook this code so that the browser can be initiated before each
    scenario and closed after each scenario. Create a `Hooks.java` file in the `stepdefinitions`
    package with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now we will implement **Page Object Model** (**POM**) so that maintaining and
    extending the Selenium code will be fairly simple. I am also keeping the POM simple;
    you are free to extend it in your projects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will add the `page` object for the GitHub login page in the `web.pages`
    package and the code will look like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will have to update the Step Definition files for the Selenium functions
    that we have just written. After adding all the functions, the code should look
    like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Our framework is ready to be executed. We can run this framework either from
    Eclipse or from the command line. Let's run this from the command line using `mvn
    test`. The following is the output:![How to do it…](img/image00180.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have integrated Cucumber, Selenium, Maven, Java and Page Objects to design
    our Web Automation Framework. Cucumber is for implementing BDD, so that nontechnical
    people can also directly contribute to the development—Selenium for web automation,
    Java as a programming language, and Maven as a build tool.
  prefs: []
  type: TYPE_NORMAL
- en: Page Objects is a framework design approach for maintaining and accessing components
    and controls spread across test Scenarios. Page Objects creates a DSL for our
    tests so that if something changes on the page, we don't need to change the test;
    we just need to update the object that represents the page.
  prefs: []
  type: TYPE_NORMAL
- en: Building a Mobile Automation framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Appium** is an open source Mobile Automation tool that has made life a lot
    easier for testers because it supports both Android and iOS. It has extended Selenium
    API, so all the Selenium advantages plus the advantage of running test cases on
    multiple platforms makes it an obvious choice for mobile automation.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's learn how we can create a robust mobile automation framework using Cucumber
    and Appium, along with keeping maintainability and scalability in mind using the
    Page Object Model.
  prefs: []
  type: TYPE_NORMAL
- en: I am just giving a demo of Android app automation; the same project and framework
    can be used for iOS automation as well. I will also create placeholders for iOS
    packages for your reference, if you want to use a single framework for both Android
    and iOS apps.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Download and install Appium on your system and for more information, refer to
    [http://appium.io/downloads.html](http://appium.io/downloads.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download and install Android SDK Manager from [http://developer.android.com/tools/help/sdk-manager.html](http://developer.android.com/tools/help/sdk-manager.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download and install Android AVD Manager from [http://developer.android.com/tools/help/avd-manager.html](http://developer.android.com/tools/help/avd-manager.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create one Android virtual device to run the app. For more information, refer
    to [http://developer.android.com/tools/devices/managing-avds.html](http://developer.android.com/tools/devices/managing-avds.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Running Android on Windows or running test cases on Appium is out of the scope
    of this book. Readers are expected to have basic mobile automation knowledge.
    We will focus on creating the Cucumber Appium framework.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s first understand the test case that we will use in this framework. We
    will use Agile NCR app for Android for this recipe. Let me walk-through the test
    Steps:'
  prefs: []
  type: TYPE_NORMAL
- en: We open the **Agile NCR** app and verify the home page:![How to do it…](img/image00181.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We click on the **AGENDA** option and verify the **AGENDA** screen:![How to
    do it…](img/image00182.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We click on the Back button and verify the home page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: I have included this application in the project that can be found on GitHub.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We are going to create a simple Maven project using the Eclipse Maven plugin.
    Use the same steps mentioned in first recipe to create the project and name it
    `CucumberMobileAutomation`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Since it is a Maven project, we will update the `pom.xml` file to add the dependencies
    of Cucumber and Appium. As of now, this is what the `pom.xml` file looks like:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will add the `properties` tag and define the properties for the Cucumber
    and Appium versions, so that when we need to update the dependency version, we
    will need to do it only at one place. Add the following code to `pom.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: To check the latest dependency version on Maven central repository, refer to
    [http://search.maven.org/](http://search.maven.org/).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We will add dependency for Cucumber-JVM for BDD and Appium-Java for mobile
    automation. Add the following code to `pom.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We will create the project structure and keep similar files in the same package.
    I am going to use the packages added for Android, and use the packages added for
    iOS are for reference purpose. Follow the steps shown in this screenshot and create
    the packages as mentioned:![How to do it…](img/image00183.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Since it is a Cucumber project, we are going to add the `RunCukeTest.java`
    file to specify the configuration, such as the location of Feature files, location
    of step definitions, and output location, and so on. Add the following class to
    the `CucumberOptions` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now it''s time to add a feature file to specify the requirements. We will add
    the `agile_ncr.feature` file to the package features. This is how our feature
    file look likes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The next step is to add Step Definitions. The simplest way would be to run
    the project once and use the suggestions given by Cucumber. Add the file `AgileNCRSD.java`
    to the `stepDefinitions` package, and it should contain the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, add the `.apk` file needed to run the `app` to the apps folder in `src/test/resources`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, we need to add the Appium functions, which can be used to invoke the
    Android app and close the app once the execution finishes. I am keeping this file
    very basic for simplicity purposes. Create the `AppiumFactory.java` class in the
    `utils` package and the code should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we need to hook this code so that the browser can be initiated before
    each scenario and closed after each scenario. Create a `Hooks.java` file in the
    `stepdefinitions` package with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, we will implement the POM, so that maintaining and extending Appium code
    will be fairly simple. I am also keeping the POM simple; you are free to extend
    it in your projects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will add two page objects, one for `HomePage` and the other for `AgendaPage`.
    The code for `HomePage.java` looks like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The code for `AgendaPage.java` looks like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will have to update the Step Definition files for the Selenium functions
    that we have just written. After adding all the functions, the code should look
    like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Our framework is ready. Before we can start the execution, we need to start
    the Appium server. Start the Appium server with the default settings, as shown
    in the following screenshot:![How to do it…](img/image00184.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can run this framework either from Eclipse or from the command line. Let's
    run this from the command line using `mvn test`. The following is the output:![How
    to do it…](img/image00185.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have integrated Cucumber, Appium, Maven, Java, and Page Objects to design
    our Mobile Automation framework. Cucumber is for implementing BDD, so that nontechnical
    people can also directly contribute to the development—Appium for web automation,
    Java as a programming language, and Maven as a build tool.
  prefs: []
  type: TYPE_NORMAL
- en: Page Objects is a framework design approach for maintaining and accessing components
    and controls spread across test Scenarios. Page Object creates a DSL for our tests;
    thus, if something changes on the page, we don't need to change the test; we just
    need to update the object that represents the page.
  prefs: []
  type: TYPE_NORMAL
- en: Building a REST Automation framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HTTP Client is an open source REST services library developed by Apache. I am
    using HTTP Client for this framework because this is a pure Java implementation
    and is very easy to use. We need to create an instance of the HTTP client and
    then just use one of the already defined functions.
  prefs: []
  type: TYPE_NORMAL
- en: Since there is no UI involved and there is a limit to the functions that we
    need to use, there is no need for the POM in this framework. Let's learn how we
    can create a robust REST automation framework using Cucumber and HTTP Client.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I am just giving a demo of REST Services automation, the same project and framework
    can be used for SOAP automation as well.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's first understand the test case that we will use in this framework. I am
    going to test the `GET` and `POST` methods. Let me walk-through the test Steps.
  prefs: []
  type: TYPE_NORMAL
- en: Send a `GET` request to the GitHub URL at [https://api.github.com/users/ShankarGarg](https://api.github.com/users/ShankarGarg)
    to verify the user details.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Send a `POST` request to the Apple service center at [https://selfsolve.apple.com/wcResults.do](https://selfsolve.apple.com/wcResults.do)
    to register your device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are going to create a simple Maven project using the Eclipse Maven plugin.
    Use the same steps mentioned in first recipe to create the project and name it
    `CucumberRESTAutomation`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Since it is a Maven project, we will update the `pom.xml` file for adding dependencies
    of Cucumber and Appium. As of now, this is how the `pom.xml` file looks like:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will add the `properties` tag and define the properties for the Cucumber
    and Appium versions, so that when we need to update the dependency version we
    will need to do it only at one place. Add the following code to `pom.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: To check the latest dependency version on Maven central repository, refer to
    [http://search.maven.org/](http://search.maven.org/).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We will add dependency for Cucumber-JVM for BDD, Appium-java for mobile automation.
    Add the following code to `pom.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We will create the project structure and will keep similar files in the same
    package. Follow the steps shown in this screenshot and create the packages as
    mentioned:![How to do it…](img/image00186.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Since it is a Cucumber project, we are going to add the `RunCukeTest.java`
    file to specify the configuration, such as the location of feature files, the
    location of step definitions, the output location, and so on. Add the following
    class to the `CucumberOptions` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now it''s time to add the feature file to specify the requirements. We will
    add the `REST_Services.feature` file to the package features. This is how our
    feature file look likes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The next step is to add Step Definitions. The simplest way would be run the
    project once and use the suggestions given by Cucumber. Add a `RESTServicesSD.java`
    file to the `stepDefinitions` package and it should have the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now we need to add the HTTP Client functions, which can be used to send the
    `GET` and `POST` methods. For demonstration purposes, I am keeping the minimum
    required functions in the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Readers are expected to know the basics about REST Services—the different functions
    such as `GET` and `POST` methods.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We don't need any hooks files here because we don't need to invoke any browsers/apps
    before or after the test cases. If need be, we can always add the file later.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We don't need the Page Object Model here because there are no UI pages that
    we need to maintain.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will have to update the Step Definition files for the HTTP functions that
    we have just written. After adding all the functions, the code should look like
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Our framework is ready and we can run this framework from either Eclipse or
    the Terminal. Let's run this from the command line using `mvn test`. The following
    is the output:![How to do it…](img/image00187.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have integrated Cucumber, HTTP Client, Maven, Java and Page Objects to design
    our REST Services automation framework. Cucumber is for implementing BDD, so that
    nontechnical people can also directly contribute to the development—HTTP Client
    for REST automation, Java as a programming language, and Maven as a build tool.
  prefs: []
  type: TYPE_NORMAL
