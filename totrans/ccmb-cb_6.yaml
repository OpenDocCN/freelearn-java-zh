- en: Chapter 6. Building Cucumber Frameworks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 章：构建 Cucumber 框架
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下食谱：
- en: Building a Web Automation framework
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建 Web 自动化框架
- en: Building a Mobile Automation framework
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建 Mobile 自动化框架
- en: Building a REST Automation framework
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建 REST 自动化框架
- en: Introduction
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Cucumber is a platform to implement BDD and not automate applications. For automating
    applications, different APIs are available like Selenium Webdriver for the Web,
    Appium for mobile, and HTTP Client for REST Services. Until now, we have learned
    various Cucumber Features so that we can build a robust automation framework but
    we also need to integrate Cucumber with the APIs mentioned earlier so that we
    can have frameworks which automate real-time applications.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Cucumber 是一个实现 BDD 的平台，而不是自动化应用程序。对于自动化应用程序，有各种 API 可用，如用于 Web 的 Selenium Webdriver、用于移动的
    Appium 和用于 REST 服务的 HTTP Client。到目前为止，我们已经学习了各种 Cucumber 功能，以便我们可以构建一个健壮的自动化框架，但我们还需要将
    Cucumber 与前面提到的 API 集成，以便我们可以拥有自动化实时应用程序的框架。
- en: In this chapter, we will learn how to build frameworks to automate Web, REST,
    and Mobile applications.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何构建自动化 Web、REST 和移动应用程序的框架。
- en: Building a Web Automation framework
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建 Web 自动化框架
- en: '**Selenium** is a Web Automation tool that has made life a lot easier for testers
    because of its capabilities and powers, and is the number one choice for testers
    to automate websites. That''s the reason we have also chosen Selenium for our
    framework.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**Selenium** 是一个 Web 自动化工具，由于其功能和力量，它让测试人员的生活变得更加容易，并且是测试人员自动化网站的首选。这就是我们为什么也选择了
    Selenium 作为我们的框架。'
- en: When we create a framework, we should keep in mind that adding new test cases
    and making changes to existing test cases should be fairly easy and simple.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建一个框架时，我们应该记住添加新的测试用例和修改现有测试用例应该是相对简单和容易的。
- en: Let's learn how we can create a robust Web Automation framework using Cucumber
    and Selenium, along with keeping maintainability and scalability in mind.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们学习如何使用 Cucumber 和 Selenium 创建一个健壮的 Web 自动化框架，同时考虑到可维护性和可扩展性。
- en: Getting ready
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Install Firefox on your system as per the version supported by the latest Selenium
    version. For more information on Selenium and browser support, visit the web page
    at [http://docs.seleniumhq.org/about/platforms.jsp](http://docs.seleniumhq.org/about/platforms.jsp).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 根据最新 Selenium 版本支持的版本，在您的系统上安装 Firefox。有关 Selenium 和浏览器支持的更多信息，请访问 [http://docs.seleniumhq.org/about/platforms.jsp](http://docs.seleniumhq.org/about/platforms.jsp)
    的网页。
- en: How to do it…
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Let''s first understand the test case that we will use in this framework. We
    will test the login functionality of [https://github.com/](https://github.com/).
    The following is the test case flow:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先了解在这个框架中我们将使用的测试用例。我们将测试 [https://github.com/](https://github.com/) 的登录功能。以下是测试用例流程：
- en: We open [https://github.com/](https://github.com/) and click on **Sign in**.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们打开 [https://github.com/](https://github.com/) 并点击 **登录**。
- en: We don't enter the username and password and click on **Sign in**:![How to do
    it…](img/image00174.jpeg)
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们没有输入用户名和密码，然后点击 **登录**：![如何操作…](img/image00174.jpeg)
- en: We verify the error message we get:![How to do it…](img/image00175.jpeg)
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们验证我们得到的错误信息：![如何操作…](img/image00175.jpeg)
- en: We will create a simple Maven project using the Eclipse Maven plugin. Click
    on **New** in the Eclipse menu and follow the screenshots to create the Maven
    project named `CucumberWebAutomation`:![How to do it…](img/image00176.jpeg)![How
    to do it…](img/image00177.jpeg)![How to do it…](img/image00178.jpeg)
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用 Eclipse Maven 插件创建一个简单的 Maven 项目。在 Eclipse 菜单中点击 **新建**，然后按照截图创建名为 `CucumberWebAutomation`
    的 Maven 项目：![如何操作…](img/image00176.jpeg)![如何操作…](img/image00177.jpeg)![如何操作…](img/image00178.jpeg)
- en: 'Since it is a Maven project, we will update the `pom.xml` file for adding the
    dependencies of Cucumber and Selenium. As of now, this is what `pom.xml` looks
    like:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于这是一个 Maven 项目，我们将更新 `pom.xml` 文件以添加 Cucumber 和 Selenium 的依赖项。目前，`pom.xml`
    的样子如下：
- en: '[PRE0]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We will add the `properties` tag and define properties for the Cucumber and
    Selenium versions so that when we need to update the dependency version, we will
    need to do it only at one place. Add the following code to `pom.xml` inside the
    `<project>` tag:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将添加 `properties` 标签并定义 Cucumber 和 Selenium 的版本属性，这样当我们需要更新依赖项版本时，我们只需在一个地方进行操作。将以下代码添加到
    `<project>` 标签内的 `pom.xml` 中：
- en: '[PRE1]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To check latest dependency version on Maven central repository, refer to [http://search.maven.org/](http://search.maven.org/).
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要检查 Maven 中央仓库上的最新依赖项版本，请参阅 [http://search.maven.org/](http://search.maven.org/)。
- en: 'We will add dependency for Cucumber-JVM for BDD and Selenium-JVM for web automation.
    Please add the following code to `pom.xml` after the `</properties>` tag:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将为Cucumber-JVM（BDD）和Selenium-JVM（网络自动化）添加依赖。请在`pom.xml`文件中的`</properties>`标签之后添加以下代码：
- en: '[PRE2]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We will create the project structure and will keep similar files in the same
    package. Follow the steps shown in this screenshot and create the packages as
    mentioned:![How to do it…](img/image00179.jpeg)
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将创建项目结构，并将相似的文件保存在同一个包中。按照此截图所示的步骤创建所需的包：![如何操作…](img/image00179.jpeg)
- en: 'Since it is a Cucumber project, we are going to add the `RunCukeTest.java`
    file to specify the configuration, such as the location of Feature files, the
    location of Step Definitions, the output location, and so on. Add the following
    class to the `CucumberOptions` package:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于这是一个Cucumber项目，我们将添加`RunCukeTest.java`文件来指定配置，例如特性文件的位置、步骤定义的位置、输出位置等。将以下类添加到`CucumberOptions`包中：
- en: '[PRE3]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now it''s time to add a Feature file to specify the requirements. We will add
    the `github_login.feature` file to the package features. This is how our Feature
    file look likes:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是时候添加一个特性文件来指定需求了。我们将把`github_login.feature`文件添加到`features`包中。这是我们的特性文件的样子：
- en: '[PRE4]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The next step is to add Step Definitions. The simplest way would be to run
    the project once and use the suggestions given by Cucumber. Add a `GithubLoginSD.java`
    file to the `stepDefinitions` package and it should have the following code:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是添加步骤定义。最简单的方法是运行一次项目，并使用Cucumber给出的建议。在`stepDefinitions`包中添加一个名为`GithubLoginSD.java`的文件，并包含以下代码：
- en: '[PRE5]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now we need to add Selenium functions, which can be used to invoke the Firefox
    browser and close the browser once the execution finishes. I am keeping this file
    very basic for simplicity purposes. Create the `DriverFactory.java` class in the
    `utils` package, and the code should look like this:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要添加Selenium函数，这些函数可以在执行完成后调用Firefox浏览器并关闭浏览器。出于简单起见，我将保持此文件非常基础。在`utils`包中创建`DriverFactory.java`类，代码应该如下所示：
- en: '[PRE6]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now we need to hook this code so that the browser can be initiated before each
    scenario and closed after each scenario. Create a `Hooks.java` file in the `stepdefinitions`
    package with the following code:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要挂钩此代码，以便在每个场景之前启动浏览器，在每个场景之后关闭浏览器。在`stepdefinitions`包中创建一个名为`Hooks.java`的文件，并包含以下代码：
- en: '[PRE7]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now we will implement **Page Object Model** (**POM**) so that maintaining and
    extending the Selenium code will be fairly simple. I am also keeping the POM simple;
    you are free to extend it in your projects.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将实现**页面对象模型**（**POM**），这样维护和扩展Selenium代码将会相对简单。我也将POM保持得相对简单；你可以在你的项目中自由扩展它。
- en: 'We will add the `page` object for the GitHub login page in the `web.pages`
    package and the code will look like this:'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将在`web.pages`包中添加GitHub登录页面的`page`对象，代码将如下所示：
- en: '[PRE8]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We will have to update the Step Definition files for the Selenium functions
    that we have just written. After adding all the functions, the code should look
    like this:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将不得不更新我们刚刚编写的Selenium函数的步骤定义文件。添加所有函数后，代码应该看起来像这样：
- en: '[PRE9]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Our framework is ready to be executed. We can run this framework either from
    Eclipse or from the command line. Let's run this from the command line using `mvn
    test`. The following is the output:![How to do it…](img/image00180.jpeg)
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的框架已经准备好执行。我们可以从Eclipse或命令行运行此框架。让我们使用`mvn test`从命令行运行它。以下是将显示的输出：![如何操作…](img/image00180.jpeg)
- en: How it works…
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: We have integrated Cucumber, Selenium, Maven, Java and Page Objects to design
    our Web Automation Framework. Cucumber is for implementing BDD, so that nontechnical
    people can also directly contribute to the development—Selenium for web automation,
    Java as a programming language, and Maven as a build tool.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经将Cucumber、Selenium、Maven、Java和页面对象集成到我们的Web自动化框架设计中。Cucumber用于实现BDD，这样非技术人员也可以直接参与到开发中来——Selenium用于网络自动化，Java作为编程语言，Maven作为构建工具。
- en: Page Objects is a framework design approach for maintaining and accessing components
    and controls spread across test Scenarios. Page Objects creates a DSL for our
    tests so that if something changes on the page, we don't need to change the test;
    we just need to update the object that represents the page.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 页面对象是一种框架设计方法，用于维护和访问分散在测试场景中的组件和控制。页面对象为我们的测试创建了一个领域特定语言（DSL），这样如果页面上有东西发生变化，我们不需要更改测试；我们只需要更新代表页面的对象。
- en: Building a Mobile Automation framework
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建移动自动化框架
- en: '**Appium** is an open source Mobile Automation tool that has made life a lot
    easier for testers because it supports both Android and iOS. It has extended Selenium
    API, so all the Selenium advantages plus the advantage of running test cases on
    multiple platforms makes it an obvious choice for mobile automation.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**Appium** 是一个开源的移动自动化工具，它使测试人员的生活变得更加容易，因为它支持 Android 和 iOS。它扩展了 Selenium
    API，因此所有 Selenium 的优势加上在多个平台上运行测试用例的优势，使其成为移动自动化的明显选择。'
- en: Let's learn how we can create a robust mobile automation framework using Cucumber
    and Appium, along with keeping maintainability and scalability in mind using the
    Page Object Model.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们学习如何使用 Cucumber 和 Appium 创建一个健壮的移动自动化框架，同时考虑到使用页面对象模型来保持可维护性和可扩展性。
- en: I am just giving a demo of Android app automation; the same project and framework
    can be used for iOS automation as well. I will also create placeholders for iOS
    packages for your reference, if you want to use a single framework for both Android
    and iOS apps.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我只是演示 Android 应用程序自动化；相同的项目和框架也可以用于 iOS 自动化。如果需要，我还会为 iOS 包创建占位符供您参考，以便您可以使用单个框架同时为
    Android 和 iOS 应用程序进行自动化。
- en: Getting ready
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Download and install Appium on your system and for more information, refer to
    [http://appium.io/downloads.html](http://appium.io/downloads.html).
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的系统上下载并安装 Appium，更多信息请参阅 [http://appium.io/downloads.html](http://appium.io/downloads.html)。
- en: Download and install Android SDK Manager from [http://developer.android.com/tools/help/sdk-manager.html](http://developer.android.com/tools/help/sdk-manager.html).
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [http://developer.android.com/tools/help/sdk-manager.html](http://developer.android.com/tools/help/sdk-manager.html)
    下载并安装 Android SDK Manager。
- en: Download and install Android AVD Manager from [http://developer.android.com/tools/help/avd-manager.html](http://developer.android.com/tools/help/avd-manager.html).
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [http://developer.android.com/tools/help/avd-manager.html](http://developer.android.com/tools/help/avd-manager.html)
    下载并安装 Android AVD Manager。
- en: Create one Android virtual device to run the app. For more information, refer
    to [http://developer.android.com/tools/devices/managing-avds.html](http://developer.android.com/tools/devices/managing-avds.html).
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 Android 虚拟设备来运行应用程序。更多信息请参阅 [http://developer.android.com/tools/devices/managing-avds.html](http://developer.android.com/tools/devices/managing-avds.html)。
- en: Note
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Running Android on Windows or running test cases on Appium is out of the scope
    of this book. Readers are expected to have basic mobile automation knowledge.
    We will focus on creating the Cucumber Appium framework.
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Windows 上运行 Android 或在 Appium 上运行测试用例超出了本书的范围。我们期望读者具备基本的移动自动化知识。我们将专注于创建
    Cucumber Appium 框架。
- en: How to do it…
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Let''s first understand the test case that we will use in this framework. We
    will use Agile NCR app for Android for this recipe. Let me walk-through the test
    Steps:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先了解在这个框架中我们将使用的测试用例。我们将使用 Android 的 Agile NCR 应用程序来完成这个菜谱。让我一步步说明测试步骤：
- en: We open the **Agile NCR** app and verify the home page:![How to do it…](img/image00181.jpeg)
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们打开 **Agile NCR** 应用程序并验证主页：![如何操作…](img/image00181.jpeg)
- en: We click on the **AGENDA** option and verify the **AGENDA** screen:![How to
    do it…](img/image00182.jpeg)
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们点击 **议程** 选项并验证 **议程** 屏幕：![如何操作…](img/image00182.jpeg)
- en: We click on the Back button and verify the home page.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们点击后退按钮并验证主页。
- en: Note
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: I have included this application in the project that can be found on GitHub.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我已经将此应用程序包含在可在 GitHub 上找到的项目中。
- en: We are going to create a simple Maven project using the Eclipse Maven plugin.
    Use the same steps mentioned in first recipe to create the project and name it
    `CucumberMobileAutomation`.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用 Eclipse Maven 插件创建一个简单的 Maven 项目。使用第一道菜中提到的相同步骤创建项目，并将其命名为 `CucumberMobileAutomation`。
- en: 'Since it is a Maven project, we will update the `pom.xml` file to add the dependencies
    of Cucumber and Appium. As of now, this is what the `pom.xml` file looks like:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于这是一个 Maven 项目，我们将更新 `pom.xml` 文件以添加 Cucumber 和 Appium 的依赖项。到目前为止，`pom.xml`
    文件看起来是这样的：
- en: '[PRE10]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We will add the `properties` tag and define the properties for the Cucumber
    and Appium versions, so that when we need to update the dependency version, we
    will need to do it only at one place. Add the following code to `pom.xml`:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将添加 `properties` 标签并定义 Cucumber 和 Appium 的版本属性，这样当我们需要更新依赖项版本时，我们只需在一个地方进行操作。将以下代码添加到
    `pom.xml` 文件中：
- en: '[PRE11]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To check the latest dependency version on Maven central repository, refer to
    [http://search.maven.org/](http://search.maven.org/).
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要检查 Maven 中央仓库上的最新依赖版本，请参阅 [http://search.maven.org/](http://search.maven.org/)。
- en: 'We will add dependency for Cucumber-JVM for BDD and Appium-Java for mobile
    automation. Add the following code to `pom.xml`:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将为 Cucumber-JVM 添加依赖以实现 BDD，并为移动自动化添加 Appium-Java。将以下代码添加到 `pom.xml` 中：
- en: '[PRE12]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We will create the project structure and keep similar files in the same package.
    I am going to use the packages added for Android, and use the packages added for
    iOS are for reference purpose. Follow the steps shown in this screenshot and create
    the packages as mentioned:![How to do it…](img/image00183.jpeg)
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将创建项目结构，并将类似文件保存在相同的包中。我将使用为 Android 添加的包，并将为 iOS 添加的包作为参考。按照此截图所示的步骤操作，创建以下包：![如何操作…](img/image00183.jpeg)
- en: 'Since it is a Cucumber project, we are going to add the `RunCukeTest.java`
    file to specify the configuration, such as the location of Feature files, location
    of step definitions, and output location, and so on. Add the following class to
    the `CucumberOptions` package:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于这是一个 Cucumber 项目，我们将添加 `RunCukeTest.java` 文件来指定配置，例如 Feature 文件的位置、步骤定义的位置和输出位置等。将以下类添加到
    `CucumberOptions` 包中：
- en: '[PRE13]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now it''s time to add a feature file to specify the requirements. We will add
    the `agile_ncr.feature` file to the package features. This is how our feature
    file look likes:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是时候添加一个特性文件来指定需求了。我们将添加 `agile_ncr.feature` 文件到 `features` 包中。这是我们的特性文件的样子：
- en: '[PRE14]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The next step is to add Step Definitions. The simplest way would be to run
    the project once and use the suggestions given by Cucumber. Add the file `AgileNCRSD.java`
    to the `stepDefinitions` package, and it should contain the following code:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是添加步骤定义。最简单的方法是运行一次项目并使用 Cucumber 提供的建议。将文件 `AgileNCRSD.java` 添加到 `stepDefinitions`
    包中，它应该包含以下代码：
- en: '[PRE15]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now, add the `.apk` file needed to run the `app` to the apps folder in `src/test/resources`.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将运行 `app` 所需的 `.apk` 文件添加到 `src/test/resources` 中的 apps 文件夹。
- en: 'Then, we need to add the Appium functions, which can be used to invoke the
    Android app and close the app once the execution finishes. I am keeping this file
    very basic for simplicity purposes. Create the `AppiumFactory.java` class in the
    `utils` package and the code should look like this:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要添加 Appium 功能，这些功能可以用来调用 Android 应用并在执行完成后关闭应用。为了简化，我保持这个文件非常基础。在 `utils`
    包中创建 `AppiumFactory.java` 类，代码应该如下所示：
- en: '[PRE16]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, we need to hook this code so that the browser can be initiated before
    each scenario and closed after each scenario. Create a `Hooks.java` file in the
    `stepdefinitions` package with the following code:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要挂钩此代码，以便在每个场景之前启动浏览器，在每个场景之后关闭浏览器。在 `stepdefinitions` 包中创建一个 `Hooks.java`
    文件，包含以下代码：
- en: '[PRE17]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now, we will implement the POM, so that maintaining and extending Appium code
    will be fairly simple. I am also keeping the POM simple; you are free to extend
    it in your projects.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将实现 POM，这样维护和扩展 Appium 代码将会相对简单。我也将 POM 保持得相对简单；你可以在你的项目中自由扩展它。
- en: 'We will add two page objects, one for `HomePage` and the other for `AgendaPage`.
    The code for `HomePage.java` looks like this:'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将添加两个页面对象，一个用于 `HomePage`，另一个用于 `AgendaPage`。`HomePage.java` 的代码如下所示：
- en: '[PRE18]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The code for `AgendaPage.java` looks like this:'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`AgendaPage.java` 的代码如下所示：'
- en: '[PRE19]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We will have to update the Step Definition files for the Selenium functions
    that we have just written. After adding all the functions, the code should look
    like this:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将不得不更新我们刚刚编写的 Selenium 函数的步骤定义文件。添加所有函数后，代码应该如下所示：
- en: '[PRE20]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Our framework is ready. Before we can start the execution, we need to start
    the Appium server. Start the Appium server with the default settings, as shown
    in the following screenshot:![How to do it…](img/image00184.jpeg)
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的框架已经准备好了。在我们开始执行之前，我们需要启动 Appium 服务器。使用默认设置启动 Appium 服务器，如下截图所示：![如何操作…](img/image00184.jpeg)
- en: We can run this framework either from Eclipse or from the command line. Let's
    run this from the command line using `mvn test`. The following is the output:![How
    to do it…](img/image00185.jpeg)
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以从 Eclipse 或命令行运行此框架。让我们使用 `mvn test` 从命令行运行它。以下是输出：![如何操作…](img/image00185.jpeg)
- en: How it works…
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: We have integrated Cucumber, Appium, Maven, Java, and Page Objects to design
    our Mobile Automation framework. Cucumber is for implementing BDD, so that nontechnical
    people can also directly contribute to the development—Appium for web automation,
    Java as a programming language, and Maven as a build tool.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经集成了 Cucumber、Appium、Maven、Java 和页面对象来设计我们的移动自动化框架。Cucumber 用于实现 BDD，这样非技术人员也可以直接参与到开发中——Appium
    用于网页自动化，Java 作为编程语言，Maven 作为构建工具。
- en: Page Objects is a framework design approach for maintaining and accessing components
    and controls spread across test Scenarios. Page Object creates a DSL for our tests;
    thus, if something changes on the page, we don't need to change the test; we just
    need to update the object that represents the page.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Page Objects 是一种用于维护和访问分散在测试场景中的组件和控制的框架设计方法。Page Object 为我们的测试创建了一个 DSL；因此，如果页面上有东西发生变化，我们不需要更改测试；我们只需要更新代表页面的对象。
- en: Building a REST Automation framework
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建REST自动化框架
- en: HTTP Client is an open source REST services library developed by Apache. I am
    using HTTP Client for this framework because this is a pure Java implementation
    and is very easy to use. We need to create an instance of the HTTP client and
    then just use one of the already defined functions.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP 客户端是由 Apache 开发的开源 REST 服务库。我使用 HTTP 客户端来构建这个框架，因为它是一个纯 Java 实现，非常易于使用。我们需要创建一个
    HTTP 客户端实例，然后只需使用已定义的其中一个函数即可。
- en: Since there is no UI involved and there is a limit to the functions that we
    need to use, there is no need for the POM in this framework. Let's learn how we
    can create a robust REST automation framework using Cucumber and HTTP Client.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 由于没有涉及 UI，并且我们对需要使用的功能有限制，因此在这个框架中不需要 POM。让我们学习如何使用 Cucumber 和 HTTP 客户端创建一个健壮的
    REST 自动化框架。
- en: Note
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: I am just giving a demo of REST Services automation, the same project and framework
    can be used for SOAP automation as well.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我只是演示 REST 服务自动化，同样的项目和框架也可以用于 SOAP 自动化。
- en: How to do it…
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: Let's first understand the test case that we will use in this framework. I am
    going to test the `GET` and `POST` methods. Let me walk-through the test Steps.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先了解在这个框架中我们将使用的测试用例。我将测试 `GET` 和 `POST` 方法。让我一步步说明测试步骤。
- en: Send a `GET` request to the GitHub URL at [https://api.github.com/users/ShankarGarg](https://api.github.com/users/ShankarGarg)
    to verify the user details.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向 GitHub URL [https://api.github.com/users/ShankarGarg](https://api.github.com/users/ShankarGarg)
    发送 `GET` 请求以验证用户详情。
- en: Send a `POST` request to the Apple service center at [https://selfsolve.apple.com/wcResults.do](https://selfsolve.apple.com/wcResults.do)
    to register your device.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向 Apple 服务中心 [https://selfsolve.apple.com/wcResults.do](https://selfsolve.apple.com/wcResults.do)
    发送 `POST` 请求以注册您的设备。
- en: We are going to create a simple Maven project using the Eclipse Maven plugin.
    Use the same steps mentioned in first recipe to create the project and name it
    `CucumberRESTAutomation`.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用 Eclipse Maven 插件创建一个简单的 Maven 项目。按照第一道菜谱中提到的步骤创建项目，并将其命名为 `CucumberRESTAutomation`。
- en: 'Since it is a Maven project, we will update the `pom.xml` file for adding dependencies
    of Cucumber and Appium. As of now, this is how the `pom.xml` file looks like:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于这是一个 Maven 项目，我们将更新 `pom.xml` 文件以添加 Cucumber 和 Appium 的依赖项。到目前为止，`pom.xml`
    文件看起来是这样的：
- en: '[PRE21]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We will add the `properties` tag and define the properties for the Cucumber
    and Appium versions, so that when we need to update the dependency version we
    will need to do it only at one place. Add the following code to `pom.xml`:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将添加 `properties` 标签并定义 Cucumber 和 Appium 版本的属性，这样当我们需要更新依赖项版本时，我们只需在一个地方进行更新。将以下代码添加到
    `pom.xml` 中：
- en: '[PRE22]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Note
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To check the latest dependency version on Maven central repository, refer to
    [http://search.maven.org/](http://search.maven.org/).
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要检查 Maven 中央仓库上的最新依赖项版本，请参阅 [http://search.maven.org/](http://search.maven.org/)。
- en: 'We will add dependency for Cucumber-JVM for BDD, Appium-java for mobile automation.
    Add the following code to `pom.xml`:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将为 Cucumber-JVM 添加依赖项以支持 BDD，为 Appium-java 添加依赖项以支持移动自动化。将以下代码添加到 `pom.xml`
    中：
- en: '[PRE23]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: We will create the project structure and will keep similar files in the same
    package. Follow the steps shown in this screenshot and create the packages as
    mentioned:![How to do it…](img/image00186.jpeg)
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将创建项目结构，并将类似文件放在同一个包中。按照此截图中的步骤创建以下包：![如何操作…](img/image00186.jpeg)
- en: 'Since it is a Cucumber project, we are going to add the `RunCukeTest.java`
    file to specify the configuration, such as the location of feature files, the
    location of step definitions, the output location, and so on. Add the following
    class to the `CucumberOptions` package:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于这是一个 Cucumber 项目，我们将向 `CucumberOptions` 包添加 `RunCukeTest.java` 文件以指定配置，例如特征文件的位置、步骤定义的位置、输出位置等。将以下类添加到
    `CucumberOptions` 包中：
- en: '[PRE24]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now it''s time to add the feature file to specify the requirements. We will
    add the `REST_Services.feature` file to the package features. This is how our
    feature file look likes:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是时候添加特征文件以指定需求了。我们将添加 `REST_Services.feature` 文件到 `features` 包中。这是我们的特征文件看起来是这样的：
- en: '[PRE25]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The next step is to add Step Definitions. The simplest way would be run the
    project once and use the suggestions given by Cucumber. Add a `RESTServicesSD.java`
    file to the `stepDefinitions` package and it should have the following code:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是添加步骤定义。最简单的方法是运行一次项目，并使用 Cucumber 提供的建议。在 `stepDefinitions` 包中添加一个 `RESTServicesSD.java`
    文件，并应包含以下代码：
- en: '[PRE26]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Now we need to add the HTTP Client functions, which can be used to send the
    `GET` and `POST` methods. For demonstration purposes, I am keeping the minimum
    required functions in the file.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要添加 HTTP 客户端函数，这些函数可以用来发送 `GET` 和 `POST` 方法。为了演示目的，我在文件中保留了所需的最小函数。
- en: '[PRE27]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Note
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Readers are expected to know the basics about REST Services—the different functions
    such as `GET` and `POST` methods.
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预期读者了解关于 REST 服务的基础知识——例如 `GET` 和 `POST` 方法等不同功能。
- en: We don't need any hooks files here because we don't need to invoke any browsers/apps
    before or after the test cases. If need be, we can always add the file later.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在这里不需要任何钩子文件，因为我们不需要在测试用例之前或之后调用任何浏览器/应用程序。如果需要，我们总是可以稍后添加该文件。
- en: We don't need the Page Object Model here because there are no UI pages that
    we need to maintain.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在这里不需要页面对象模型，因为没有需要维护的 UI 页面。
- en: 'We will have to update the Step Definition files for the HTTP functions that
    we have just written. After adding all the functions, the code should look like
    this:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要更新我们刚刚编写的 HTTP 函数的步骤定义文件。在添加所有函数后，代码应如下所示：
- en: '[PRE28]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Our framework is ready and we can run this framework from either Eclipse or
    the Terminal. Let's run this from the command line using `mvn test`. The following
    is the output:![How to do it…](img/image00187.jpeg)
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的框架已经准备就绪，我们可以从 Eclipse 或终端运行此框架。让我们使用 `mvn test` 命令行来运行它。以下是将显示的输出：![如何操作…](img/image00187.jpeg)
- en: How it works…
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: We have integrated Cucumber, HTTP Client, Maven, Java and Page Objects to design
    our REST Services automation framework. Cucumber is for implementing BDD, so that
    nontechnical people can also directly contribute to the development—HTTP Client
    for REST automation, Java as a programming language, and Maven as a build tool.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经集成了 Cucumber、HTTP 客户端、Maven、Java 和页面对象来设计我们的 REST 服务自动化框架。Cucumber 用于实现行为驱动开发（BDD），以便非技术人员也可以直接参与开发——HTTP
    客户端用于 REST 自动化，Java 作为编程语言，Maven 作为构建工具。
