["```java\nlein new cljs-start reagi-game\n\n```", "```java\n   [org.clojure/clojurescript \"0.0-2138\"]\n   [reagi \"0.10.0\"]\n   [rm-hull/monet \"0.1.12\"]\n```", "```java\ncd reagi-game/\nlein repl\nCompiling ClojureScript.\nCompiling \"dev-resources/public/js/reagi_game.js\" from (\"src/cljs\" \"test/cljs\" \"dev-resources/tools/repl\")...\nuser=> (run)\n2014-06-14 19:21:40.381:INFO:oejs.Server:jetty-7.6.8.v20121106\n2014-06-14 19:21:40.403:INFO:oejs.AbstractConnector:Started SelectChannelConnector@0.0.0.0:3000\n#<Server org.eclipse.jetty.server.Server@51f6292b>\n\n```", "```java\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>bREPL Connection</title>\n    <!--[if lt IE 9]>\n        <script src=\"img/html5.js\"></script>\n        <![endif]-->\n  </head>\n\n  <body>\n <canvas id=\"canvas\" width=\"800\" height=\"600\"></canvas>\n    <script src=\"img/reagi_game.js\"></script>\n  </body>\n</html>\n```", "```java\n(ns reagi-game.entities\n  (:require [monet.canvas :as canvas]\n            [monet.geometry :as geom]))\n```", "```java\n(defn shape-x [shape]\n  (-> shape :pos deref :x))\n\n(defn shape-y [shape]\n  (-> shape :pos deref :y))\n\n(defn shape-angle [shape]\n  @(:angle shape))\n\n(defn shape-data [x y angle]\n  {:pos   (atom {:x x :y y})\n   :angle (atom angle)})\n```", "```java\n(defn ship-entity [ship]\n  (canvas/entity {:x (shape-x ship) \n                  :y (shape-y ship) \n                  :angle (shape-angle ship)}\n                 (fn [value]\n                   (-> value\n                       (assoc :x     (shape-x ship))\n                       (assoc :y     (shape-y ship))\n                       (assoc :angle (shape-angle ship))))\n                 (fn [ctx val]\n                   (-> ctx\n                       canvas/save\n                       (canvas/translate (:x val) (:y val))\n                       (canvas/rotate (:angle val))\n                       (canvas/begin-path)\n                       (canvas/move-to 50 0)\n                       (canvas/line-to 0 -15)\n                       (canvas/line-to 0 15)\n                       (canvas/fill)\n                       canvas/restore))))\n```", "```java\n(fn [value]\n  (-> value\n      (assoc :x     (shape-x ship))\n      (assoc :y     (shape-y ship))\n      (assoc :angle (shape-angle ship))))\n```", "```java\n(fn [ctx val]\n   (-> ctx\n       canvas/save\n       (canvas/translate (:x val) (:y val))\n       (canvas/rotate (:angle val))\n       (canvas/begin-path)\n       (canvas/move-to 50 0)\n       (canvas/line-to 0 -15)\n       (canvas/line-to 0 15)\n       (canvas/fill)\n       canvas/restore))\n```", "```java\n(declare move-forward!)\n\n(defn make-bullet-entity [monet-canvas key shape]\n  (canvas/entity {:x (shape-x shape) \n                  :y (shape-y shape) \n                  :angle (shape-angle shape)}\n                 (fn [value]\n                   (when (not \n                           (geom/contained? \n                             {:x 0 :y 0\n                              :w (.-width (:canvas monet-canvas))\n                              :h (.-height (:canvas monet-canvas))}\n                             {:x (shape-x shape) \n                              :y (shape-y shape) \n                              :r 5}))\n                     (canvas/remove-entity monet-canvas key))\n                   (move-forward! shape)\n                   (-> value\n                       (assoc :x     (shape-x shape))\n                       (assoc :y     (shape-y shape))\n                       (assoc :angle (shape-angle shape))))\n                 (fn [ctx val]\n                   (-> ctx\n                       canvas/save\n                       (canvas/translate (:x val) (:y val))\n                       (canvas/rotate (:angle val))\n                       (canvas/fill-style \"red\")\n                       (canvas/circle {:x 10 :y 0 :r 5})\n                       canvas/restore))))\n```", "```java\n(fn [value]\n  (when (not \n         (geom/contained? \n          {:x 0 :y 0\n           :w (.-width (:canvas monet-canvas))\n           :h (.-height (:canvas monet-canvas))}\n          {:x (shape-x shape) \n           :y (shape-y shape) \n           :r 5}))\n    (canvas/remove-entity monet-canvas key))\n  (move-forward! shape)\n  (-> value\n      (assoc :x     (shape-x shape))\n      (assoc :y     (shape-y shape))\n      (assoc :angle (shape-angle shape))))\n```", "```java\n(fn [ctx val]\n                   (-> ctx\n                       canvas/save\n                       (canvas/translate (:x val) (:y val))\n                       (canvas/rotate (:angle val))\n                       (canvas/fill-style \"red\")\n                       (canvas/circle {:x 10 :y 0 :r 5})\n                       canvas/restore))\n```", "```java\n(def speed 200)\n\n(defn calculate-x [angle]\n  (* speed (/ (* (Math/cos angle)\n                 Math/PI)\n              180)))\n\n(defn calculate-y [angle]\n  (* speed (/ (* (Math/sin angle)\n                 Math/PI)\n              180)))\n\n(defn move! [shape f]\n  (let [pos (:pos shape)]\n    (swap! pos (fn [xy]\n                 (-> xy\n                     (update-in [:x]\n                                #(f % (calculate-x\n                                       (shape-angle shape))))\n                     (update-in [:y]\n                                #(f % (calculate-y\n                                       (shape-angle shape)))))))))\n```", "```java\n(defn move-forward! [shape]\n  (move! shape +))\n\n(defn move-backward! [shape]\n  (move! shape -))\n```", "```java\n(defn rotate! [shape f]\n  (swap! (:angle shape) #(f % (/ (/ Math/PI 3) 20))))\n\n(defn rotate-right! [shape]\n  (rotate! shape +))\n\n(defn rotate-left! [shape]\n  (rotate! shape -))\n```", "```java\n(defn fire! [monet-canvas ship]\n  (let [entity-key (keyword (gensym \"bullet\"))\n        data (shape-data (shape-x ship)\n                         (shape-y ship)\n                         (shape-angle ship))\n        bullet (make-bullet-entity monet-canvas\n                                   entity-key\n                                   data)]\n    (canvas/add-entity monet-canvas entity-key bullet)))\n```", "```java\n(ns reagi-game.core\n  (:require [monet.canvas :as canvas]\n            [reagi.core :as r]\n            [clojure.set :as set]\n            [reagi-game.entities :as entities\n             :refer [move-forward! move-backward! rotate-left! rotate-right! fire!]]))\n```", "```java\n(def UP    38)\n(def RIGHT 39)\n(def DOWN  40)\n(def LEFT  37)\n(def FIRE  32) ;; space\n(def PAUSE 80) ;; lower-case P\n```", "```java\nvar keysPressed = {};\n\ndocument.addEventListener('keydown', function(e) {\n   keysPressed[e.keyCode] = true;\n}, false);\ndocument.addEventListener('keyup', function(e) {\n   keysPressed[e.keyCode] = false;\n}, false);\n```", "```java\nfunction gameLoop() {\n   if (keyPressed[UP] && keyPressed[LEFT]) {\n      // update ship position\n   }\n   // ...\n}\n```", "```java\n(defn keydown-stream []\n  (let [out (r/events)]\n    (set! (.-onkeydown js/document) \n          #(r/deliver out [::down (.-keyCode %)]))\n    out))\n\n(defn keyup-stream []\n  (let [out (r/events)]\n    (set! (.-onkeyup   js/document) \n          #(r/deliver out [::up (.-keyCode %)]))\n    out))\n```", "```java\n(def active-keys-stream\n  (->> (r/merge (keydown-stream) (keyup-stream))\n       ...\n       ))\n```", "```java\n(def active-keys-stream\n  (->> (r/merge (keydown-stream) (keyup-stream))\n      (r/reduce (fn [acc [event-type key-code]]\n          (condp = event-type\n              ::down (conj acc key-code)\n              ::up (disj acc key-code)\n              acc))\n          #{})\n      (r/sample 25)))\n```", "```java\n(->> active-keys-stream\n     (r/filter (partial some #{UP}))\n     (r/map (fn [_] (.log js/console \"Pressed up...\"))))\n```", "```java\n(->> active-keys-stream\n     (r/filter (partial some #{FIRE}))\n     (r/map (fn [_] (.log js/console \"Pressed fire...\"))))\n```", "```java\nuser> (def numbers #{12 13 14})\n#'user/numbers\nuser> (some #{12} numbers)\n12\nuser> (some #{15} numbers)\nnil\n```", "```java\n(defn filter-map [pred f & args]\n  (->> active-keys-stream\n       (r/filter (partial some pred))\n       (r/map (fn [_] (apply f args)))))\n```", "```java\n(filter-map #{FIRE}  fire! monet-canvas ship)\n(filter-map #{UP}    move-forward!  ship)\n(filter-map #{DOWN}  move-backward! ship)\n(filter-map #{RIGHT} rotate-right!  ship)\n(filter-map #{LEFT}  rotate-left!   ship)\n```", "```java\n(defn pause! [_]\n  (if @(:updating? monet-canvas)\n    (canvas/stop-updating monet-canvas)\n    (canvas/start-updating monet-canvas)))\n\n(->> active-keys-stream\n     (r/filter (partial some #{PAUSE}))\n (r/throttle 100)\n     (r/map pause!))\n```", "```java\n(ns reagi-game.core\n  (:require [monet.canvas :as canvas]\n            [reagi.core :as r]\n            [clojure.set :as set]\n            [reagi-game.entities :as entities\n             :refer [move-forward! move-backward! rotate-left! rotate-right! fire!]]))\n\n(def canvas-dom (.getElementById js/document \"canvas\"))\n\n(def monet-canvas (canvas/init canvas-dom \"2d\"))\n\n(def ship (entities/shape-data (/ (.-width (:canvas monet-canvas)) 2)\n                               (/ (.-height (:canvas monet-canvas)) 2)\n                               0))\n\n(def ship-entity (entities/ship-entity ship))\n\n(canvas/add-entity monet-canvas :ship-entity ship-entity)\n(canvas/draw-loop monet-canvas)\n\n(def UP    38)\n(def RIGHT 39)\n(def DOWN  40)\n(def LEFT  37)\n(def FIRE  32) ;; space\n(def PAUSE 80) ;; lower-case P\n\n(defn keydown-stream []\n  (let [out (r/events)]\n    (set! (.-onkeydown js/document) #(r/deliver out [::down (.-keyCode %)]))\n    out))\n\n(defn keyup-stream []\n  (let [out (r/events)]\n    (set! (.-onkeyup   js/document) #(r/deliver out [::up (.-keyCode %)]))\n    out))\n\n(def active-keys-stream\n  (->> (r/merge (keydown-stream) (keyup-stream))\n      (r/reduce (fn [acc [event-type key-code]]\n          (condp = event-type\n              ::down (conj acc key-code)\n              ::up (disj acc key-code)\n              acc))\n          #{})\n      (r/sample 25)))\n\n(defn filter-map [pred f & args]\n  (->> active-keys-stream\n       (r/filter (partial some pred))\n       (r/map (fn [_] (apply f args)))))\n\n(filter-map #{FIRE}  fire! monet-canvas ship)\n(filter-map #{UP}    move-forward!  ship)\n(filter-map #{DOWN}  move-backward! ship)\n(filter-map #{RIGHT} rotate-right!  ship)\n(filter-map #{LEFT}  rotate-left!   ship)\n\n(defn pause! [_]\n  (if @(:updating? monet-canvas)\n    (canvas/stop-updating monet-canvas)\n    (canvas/start-updating monet-canvas)))\n\n(->> active-keys-stream\n     (r/filter (partial some #{PAUSE}))\n     (r/throttle 100)\n     (r/map pause!))\n```", "```java\nlein repl\nCompiling ClojureScript.\nCompiling \"dev-resources/public/js/reagi_game.js\" from (\"src/cljs\" \"test/cljs\" \"dev-resources/tools/repl\")...\nuser=> (run)\n2014-06-14 19:21:40.381:INFO:oejs.Server:jetty-7.6.8.v20121106\n2014-06-14 19:21:40.403:INFO:oejs.AbstractConnector:Started SelectChannelConnector@0.0.0.0:3000\n#<Server org.eclipse.jetty.server.Server@51f6292b>\n\n```", "```java\nlein cljsbuild auto\nCompiling \"dev-resources/public/js/reagi_game.js\" from (\"src/cljs\" \"test/cljs\" \"dev-resources/tools/repl\")...\nSuccessfully compiled \"dev-resources/public/js/reagi_game.js\" in 13.23869 seconds.\n\n```"]