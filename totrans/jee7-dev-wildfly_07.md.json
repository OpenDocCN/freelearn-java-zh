["```java\npackage com.packtpub.wflydevelopment.chapter7.boundary;\n\npublic class CalculatePowerWebService {\n\n    public double calculatePower(double base, double exponent) {\n        return Math.pow(base, exponent);\n    }\n}\n```", "```java\npackage com.packtpub.wflydevelopment.chapter7.webservice;\n\nimport javax.jws.WebMethod;\nimport javax.jws.WebParam;\nimport javax.jws.WebResult;\nimport javax.jws.WebService;\nimport javax.jws.soap.SOAPBinding;\n\n@WebService(targetNamespace = \"http://www.packtpub.com/\",\n serviceName = \"CalculatePowerService\")\n@SOAPBinding(style = SOAPBinding.Style.RPC)\npublic class CalculatePowerWebService {\n\n    @WebMethod\n    @WebResult(name = \"result\")\n    public double calculatePower(@WebParam(name = \"base\") double base,\n                                 @WebParam(name = \"exponent\") double exponent) {\n        return Math.pow(base, exponent);\n    }\n}\n```", "```java\nmvn package wildfly:deploy \n\n```", "```java\n14:25:37,195 INFO  [org.jboss.weld.deployer] (MSC service thread 1-11) JBAS016005: Starting Services for CDI deployment: ticket-agency-ws.war\n14:25:37,198 INFO  [org.jboss.ws.cxf.metadata] (MSC service thread 1-11) JBWS024061: Adding service endpoint metadata: id=com.packtpub.wflydevelopment.chapter7.boundary.CalculatePowerWebService\n address=http://localhost:8080/ticket-agency-ws/CalculatePowerService\n implementor=com.packtpub.wflydevelopment.chapter7.boundary.CalculatePowerWebService\n serviceName={http://www.packtpub.com/}CalculatePowerService\n portName={http://www.packtpub.com/}CalculatePowerWebServicePort\n annotationWsdlLocation=null\n wsdlLocationOverride=null\n mtomEnabled=false\n\n```", "```java\npackage com.packtpub.wflydevelopment.chapter7.boundary;\n\nimport javax.jws.WebService;\nimport java.util.List;\n\n@WebService\npublic interface TicketWebService {\n\n    List<SeatDto> getSeats();\n\n    void bookSeat(int seatId);\n}\n```", "```java\npackage com.packtpub.wflydevelopment.chapter7.boundary;\n\nimport javax.inject.Inject;\nimport javax.jws.WebMethod;\nimport javax.jws.WebParam;\nimport javax.jws.WebResult;\nimport javax.jws.WebService;\nimport java.io.Serializable;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n@WebService(targetNamespace = \"http://www.packtpub.com/\", serviceName = \"TicketWebService\")\npublic class DefaultTicketWebService implements TicketWebService, Serializable {\n\n    @Inject\n    private TheatreBox theatreBox;\n\n    @WebMethod\n @WebResult(name = \"listSeats\")\n    public List<SeatDto> getSeats() {\n        return theatreBox.getSeats()\n                         .stream()\n                         .map(SeatDto::fromSeat)\n                         .collect(Collectors.toList());\n    }\n\n @WebMethod\n    public void bookSeat(@WebParam(name = \"seatId\") int seatId) {\n        theatreBox.buyTicket(seatId);\n    }\n}\n```", "```java\n00:43:12,033 INFO  [org.jboss.ws.cxf.metadata] (MSC service thread 1-13) JBWS024061: Adding service endpoint metadata: id=com.packtpub.wflydevelopment.chapter7.boundary.DefaultTicketWebService\n address=http://localhost:8080/ticket-agency-ws/TicketWebService\n implementor=com.packtpub.wflydevelopment.chapter7.boundary.DefaultTicketWebService\n serviceName={http://www.packtpub.com/}TicketWebService\n portName={http://www.packtpub.com/}DefaultTicketWebServicePort\n annotationWsdlLocation=null\n wsdlLocationOverride=null\n mtomEnabled=false\n\n```", "```java\npackage com.packtpub.wflydevelopment.chapter7.webservice;\n\nimport com.packtpub.wflydevelopment.chapter7.boundary.SeatDto;\nimport com.packtpub.wflydevelopment.chapter7.boundary.TicketWebService;\n\nimport javax.xml.namespace.QName;\nimport javax.xml.ws.Service;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.logging.Logger;\n\npublic class TicketWebServiceTestApplication {\n\n    private static final Logger logger = Logger.getLogger(TicketWebServiceTestApplication.class.getName());\n\n    public static void main(String[] args) throws MalformedURLException {\n        final int seatId = 1;\n        logger.info(\"TEST SOAP WS Service\");\n        final URL wsdlURL = new URL(\"http://localhost:8080/ticket-agency-ws/TicketWebService?wsdl\");\n        final QName SERVICE_NAME = new QName(\"http://www.packtpub.com/\", \"TicketWebService\");\n        final Service service = Service.create(wsdlURL, SERVICE_NAME);\n        final TicketWebService infoService = service.getPort(TicketWebService.class);\n\n        logger.info(\"Got the Service: \" + infoService);\n\n        infoService.bookSeat(seatId);\n        logger.info(\"Ticket Booked with JAX-WS Service\");\n\n        final List<SeatDto> list = infoService.getSeats();\n\n        dumpSeatList(list);\n    }\n\n    private static void dumpSeatList(Collection<SeatDto> list) {\n        logger.info(\"================= Available Ticket List ================\");\n        list.stream().forEach(seat -> logger.info(seat.toString()));\n    }\n}\n```", "```java\napr 01, 2014 1:08:44 AM com.packtpub.wflydevelopment.chapter7.webservice.TicketWebServiceTestApplication main\nINFO: TEST SOAP WS Service\napr 01, 2014 1:08:44 AM com.packtpub.wflydevelopment.chapter7.webservice.TicketWebServiceTestApplication main\nINFO: Got the Service: JAX-WS RI 2.2.9-b130926.1035 svn-revision#8c29a9a53251ff741fca1664a8221dc876b2eac8: Stub for http://localhost:8080/ticket-agency-ws/TicketWebService\napr 01, 2014 1:08:44 AM com.packtpub.wflydevelopment.chapter7.webservice.TicketWebServiceTestApplication main\nINFO: Ticket Booked with JAX-WS Service\napr 01, 2014 1:08:44 AM com.packtpub.wflydevelopment.chapter7.webservice.TicketWebServiceTestApplication dumpSeatList\nINFO: ================= Available Ticket List ================\napr 01, 2014 1:08:44 AM com.packtpub.wflydevelopment.chapter7.webservice.TicketWebServiceTestApplication lambda$dumpSeatList$0\nINFO: SeatDto [id=1, name=Stalls, price=40, booked=true]\napr 01, 2014 1:08:44 AM com.packtpub.wflydevelopment.chapter7.webservice.TicketWebServiceTestApplication lambda$dumpSeatList$0\nINFO: SeatDto [id=2, name=Stalls, price=40, booked=false]\nâ€¦\n\n```", "```java\n@Path(\"/users\")\npublic class UserResource {\n\n @GET\n    public String handleGETRequest() { . . .}\n\n @POST\n    public String handlePOSTRequest(String payload) { . . . }\n}\n```", "```java\n@ApplicationPath(\"/rest\")\npublic class JaxRsActivator extends Application {\n\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app  \n    xsi:schemaLocation=\"http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_3_0.xsd\" version=\"3.0\">\n    <servlet>\n        <servlet-name>javax.ws.rs.core.Application</servlet-name>\n        <load-on-startup>1</load-on-startup>\n    </servlet>\n    <servlet-mapping>\n        <servlet-name>javax.ws.rs.core.Application</servlet-name>\n        <url-pattern>/rest/*</url-pattern>\n    </servlet-mapping>\n</web-app>\n```", "```java\npackage com.packtpub.wflydevelopment.chapter7.boundary;\n\n@Path(\"/seat\")\n@Produces(MediaType.APPLICATION_JSON)\n@RequestScoped\npublic class SeatsResource {\n\n    @Inject\n    private TheatreBooker theatreBooker;\n\n    @Inject\n    private TheatreBox theatreBox;\n\n @GET\n    public Collection<SeatDto> getSeatList() {\n        return theatreBox.getSeats()\n                 .stream()\n                 .map(SeatDto::fromSeat)\n                 .collect(Collectors.toList());\n    }\n\n @POST\n    @Path(\"/{id}\")\n    public Response bookPlace(@PathParam(\"id\") int id) {\n        try {\n            theatreBooker.bookSeat(id);\n            return Response.ok(SeatDto.fromSeat(theatreBox.getSeat(id)))\n             .build();\n        } catch (Exception e) {\n            final Entity<String> errorMessage = Entity\n                                         .json(e.getMessage());\n            return Response.status(Response.Status.BAD_REQUEST)\n                       .entity(errorMessage).build();\n        }\n    }\n}\n```", "```java\n@POST\n@Path(\"/{id}\")\npublic Response bookPlace(@PathParam(\"id\") int id)\n```", "```java\npackage com.packtpub.wflydevelopment.chapter7.boundary;\n\n@Path(\"/account\")\n@Produces(MediaType.APPLICATION_JSON)\n@RequestScoped\npublic class AccountResource {\n\n    @Inject\n    private TheatreBooker theatreBooker;\n\n    @GET\n    public AccountDto getAccount() {\n        return AccountDto\n                 .fromAccount(theatreBooker.getCurrentAccount());\n    }\n\n    @POST\n    public Response renew() {\n        theatreBooker.createCustomer();\n        return Response\n        .ok(AccountDto.fromAccount(theatreBooker.getCurrentAccount()))\n        .build();\n    }\n}\n```", "```java\npackage com.packtpub.wflydevelopment.chapter7.entity;\n\npublic class Account {\n\n    private final int balance;\n\n    public Account(int initialBalance) {\n        this.balance = initialBalance;\n    }\n\n    public Account charge(int amount) {\n        final int newBalance = balance - amount;\n        if (newBalance < 0) {\n            throw new IllegalArgumentException(\"Debit value on account!\");\n        }\n        return new Account(newBalance);\n    }\n\n    public int getBalance() {\n        return balance;\n    }\n\n    @Override\n    public String toString() {\n        return \"Account [balance = \" + balance + \"]\";\n    }\n}\n```", "```java\n    private Account currentAccount;\n\n    @PostConstruct\n    public void createCustomer() {\n        currentAccount = new Account(100);\n    }\n\n    public void bookSeat(int seatId) {\n        logger.info(\"Booking seat \" + seatId);\n        final int seatPrice = theatreBox.getSeatPrice(seatId);\n\n        if (seatPrice > currentAccount.getBalance()) {\n            throw new IllegalArgumentException(\"Not enough money!\");\n        }\n\n        theatreBox.buyTicket(seatId);\n        currentAccount = currentAccount.charge(seatPrice);\n\n        logger.info(\"Seat booked.\");\n    }\n\n    public Account getCurrentAccount() {\n        return currentAccount;\n    }\n```", "```java\npackage com.packtpub.wflydevelopment.chapter7.controller;\n\nimport java.io.IOException;\nimport java.util.logging.Logger;\n\nimport javax.inject.Inject;\nimport javax.ws.rs.container.ContainerRequestContext;\nimport javax.ws.rs.container.ContainerRequestFilter;\nimport javax.ws.rs.container.ContainerResponseContext;\nimport javax.ws.rs.container.ContainerResponseFilter;\nimport javax.ws.rs.ext.Provider;\n\n@Provider\npublic class LoggingRestFilter implements ContainerRequestFilter, ContainerResponseFilter {\n\n    @Inject\n    private Logger logger;\n\n    @Override\n    public void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext)\n            throws IOException {\n        logger.info(responseContext.getStatusInfo().toString());\n    }\n\n    @Override\n    public void filter(ContainerRequestContext requestContext) throws IOException {\n        logger.info(requestContext.getMethod() + \" on \" + requestContext.getUriInfo().getPath());\n    }\n}\n```", "```java\nmvn package wildfly:deploy\n\n```", "```java\n[{\"id\":0,\"name\":\"Stalls\",\"price\":40,\"booked\":false},{\"id\":1,\"name\":\"Stalls\",\"price\":40,\"booked\":false},{\"id\":2,\"name\":\"Stalls\",\"price\":40,\"booked\":false},{\"id\":3,\"name\":\"Stalls\",\"price\":40,\"booked\":false},{\"id\":4,\"name\":\"Stalls\",\"price\":40,\"booked\":false},\n. . . . . .\n```", "```java\n{\"balance\":100}\n```", "```java\n19:52:45,906 INFO  [com.packtpub.wflydevelopment.chapter7.controller.LoggingRestFilter] (default task-10) GET on /seat\n19:52:45,909 INFO  [com.packtpub.wflydevelopment.chapter7.controller.LoggingRestFilter] (default task-10) OK\n20:29:04,275 INFO  [com.packtpub.wflydevelopment.chapter7.controller.LoggingRestFilter] (default task-14) GET on /account\n20:29:04,313 INFO  [com.packtpub.wflydevelopment.chapter7.controller.LoggingRestFilter] (default task-14) OK\n\n```", "```java\nClient restclient = ClientBuilder.newClient();\nWebTarget seatResource = restclient.target(APPLICATION_URL + \"seat\");\nCollection<SeatDto> seats = seatResource.request().get(new GenericType<Collection<SeatDto>>() {});\n```", "```java\npublic class RestServiceTestApplication {\n    private static final String APPLICATION_URL = \"http://localhost:8080/ticket-agency-ws/rest/\";\n\n    private WebTarget accountResource;\n    private WebTarget seatResource;\n\n    public static void main(String[] args) {\n        new RestServiceTestApplication().runSample();\n    }\n\n    public RestServiceTestApplication() {\n        Client restclient = ClientBuilder.newClient();\n\n        accountResource = restclient.target(APPLICATION_URL + \"account\");\n        seatResource = restclient.target(APPLICATION_URL + \"seat\");\n    }\n\n    public void runSample() {\n        printAccountStatusFromServer();\n\n        System.out.println(\"=== Current status: \");\n        Collection<SeatDto> seats = getSeatsFromServer();\n        printSeats(seats);\n\n        System.out.println(\"=== Booking: \");\n        bookSeats(seats);\n\n        System.out.println(\"=== Status after booking: \");\n        Collection<SeatDto> bookedSeats = getSeatsFromServer();\n        printSeats(bookedSeats);\n\n        printAccountStatusFromServer();\n    }\n\n    private void printAccountStatusFromServer() {\n AccountDto account = accountResource.request().get(AccountDto.class);\n        System.out.println(account);\n    }\n\n    private Collection<SeatDto> getSeatsFromServer() {\n return seatResource.request().get(new GenericType<Collection<SeatDto>>() { });\n    }\n\n    private void printSeats(Collection<SeatDto> seats) {\n        seats.forEach(System.out::println);\n    }\n\n    private void bookSeats(Collection<SeatDto> seats) {\n        for (SeatDto seat : seats) {\n            try {\n                String idOfSeat = Integer.toString(seat.getId());\n                seatResource.path(idOfSeat).request().post(Entity.json(\"\"), String.class);\n                System.out.println(seat + \" booked\");\n            } catch (WebApplicationException e) {\n                Response response = e.getResponse();\n                StatusType statusInfo = response.getStatusInfo();\n                System.out.println(seat + \" not booked (\" + statusInfo.getReasonPhrase() + \"):\" response.readEntity(JsonObject.class). getString(\"entity\"));\n            }\n        }\n    }\n}\n```", "```java\nFuture<Collection<SeatDto>> future = seatResource.request()\n        .async().get(new GenericType<Collection<SeatDto>>() {});\n```", "```java\nCompletableFuture.<Collection<SeatDto>> supplyAsync(() -> {\n    try {\n        return future.get();\n    } catch (Exception e) {\n        e.printStackTrace();\n        throw new IllegalArgumentException(e);\n    }\n}).thenAccept(seats -> seats.forEach(System.out::println));\n```", "```java\n<properties>\n   . . .\n    <version.resteasy-client>3.0.6.Final</version.resteasy-client>\n</properties>\n\n<dependencies>\n    <dependency>\n        <groupId>org.jboss.resteasy</groupId>\n        <artifactId>resteasy-client</artifactId>\n        <version> ${version.resteasy-client}</version>\n    </dependency>\n\n    <dependency>\n        <groupId>org.jboss.resteasy</groupId>\n        <artifactId>resteasy-json-p-provider</artifactId>\n        <version> ${version.resteasy-client}</version>\n    </dependency>\n\n    <dependency>\n        <groupId>org.jboss.resteasy</groupId>\n        <artifactId>resteasy-jackson-provider</artifactId>\n        <version> ${version.resteasy-client}</version>\n    </dependency>\n\n    <dependency>\n        <groupId>com.packtpub.wflydevelopment.chapter7</groupId>\n        <artifactId>ticket-agency-ws</artifactId>\n        <version>1.0</version>\n    </dependency>\n</dependencies>\n```", "```java\nAccountDto [balance=100]\n=== Current status: \nSeatDto [id=1, name=Stalls, price=40, booked=false]\nSeatDto [id=2, name=Stalls, price=40, booked=false]\nSeatDto [id=3, name=Stalls, price=40, booked=false]\nSeatDto [id=4, name=Stalls, price=40, booked=false]\nSeatDto [id=5, name=Stalls, price=40, booked=false]\nSeatDto [id=6, name=Circle, price=20, booked=false]\nSeatDto [id=7, name=Circle, price=20, booked=false]\nâ€¦\n\n```", "```java\n<dependency>\n    <groupId>org.webjars</groupId>\n    <artifactId>bootstrap</artifactId>\n    <version>3.2.0</version>\n</dependency>\n<dependency>\n    <groupId>org.webjars</groupId>\n    <artifactId>angularjs</artifactId>\n    <version>1.3.0-rc.1</version>\n</dependency>\n<dependency>\n    <groupId>org.webjars</groupId>\n    <artifactId>angular-ui-bootstrap</artifactId>\n    <version>0.11.0-2</version>\n</dependency>\n```", "```java\n<!doctype html>\n<html lang=\"en\" ng-app=\"ticketApp\">\n<head>\n    <meta charset=\"utf-8\">\n    <title>Ticket Service</title>\n    <link rel=\"stylesheet\" href=\"\"webjars/bootstrap/3.2.0/css/bootstrap.css\">\n    <link rel=\"stylesheet\" href=\"\"webjars/bootstrap/3.2.0/css/bootstrap-theme.css\">\n    <style>\n        body {\n            padding-top: 60px;\n        }\n    </style>\n</head>\n<body>\n\n<div class=\"navbar navbar-inverse navbar-fixed-top\" role=\"navigation\">\n</div>\n\n<div class=\"container\" ng-controller=\"SeatCtrl\">\n    <footer>\n        <p class=\"text-muted\">&copy; Packt Publishing 2014</p>\n    </footer>\n</div>\n\n<script src=\"img/angular.js\"></script>\n<script src=\"img/angular-resource.js\"></script>\n<script src=\"img/angular-route.js\"></script>\n<script src=\"img/ui-bootstrap-tpls.js\"></script>\n\n<script src=\"img/app.js\"></script>\n<script src=\"img/seat.js\"></script>\n<script src=\"img/seatservice.js\"></script>\n<script src=\"img/accountservice.js\"></script>\n</body>\n</html>\n```", "```java\n'use strict';\nangular.module('ticketApp', [ 'ngResource', 'ngRoute', 'ui.bootstrap' ])\n    .config(function ($routeProvider) {\n        $routeProvider.when('/', {\n            controller: 'SeatCtrl'\n        }).otherwise({\n            redirectTo: '/'\n        });\n    });\n```", "```java\n'use strict';\nangular.module('ticketApp').service('SeatService',\n    function SeatService($resource) {\n        return $resource('rest/seat/:seatId', {\n            seatId: '@id'\n        }, {\n query: {\n method: 'GET',\n isArray: true\n },\n book: {\n method: 'POST'\n }\n        });\n    });\n```", "```java\n'use strict';\nangular.module('ticketApp').service('AccountService',\n    function AccountService($resource) {\n        return $resource('rest/account', {}, {\n query: {\n method: 'GET',\n isArray: false\n },\n reset: {\n method: 'POST'\n }\n        });\n    });\n```", "```java\n'use strict';\nangular.module('ticketApp').controller(\n    'SeatCtrl',\n    function ($scope, SeatService, AccountService) {\n $scope.seats = SeatService.query();\n $scope.account = AccountService.query();\n\n        $scope.alerts = [];\n\n $scope.bookTicket = function (seat) {\n seat.$book({}, function success() {\n                $scope.account.$query();\n            }, function err(httpResponse) {\n                $scope.alerts.push({\n                    type: 'danger',\n                    msg: 'Error booking ticket for seat '\n                        + httpResponse.config.data.id + ': '\n                        + httpResponse.data.entity\n                });\n            });\n        };\n        $scope.closeAlert = function (index) {\n            $scope.alerts.splice(index, 1);\n        };\n        $scope.clearWarnings = function () {\n            $scope.alerts.length = 0;\n        };\n        $scope.resetAccount = function () {\n $scope.account.$reset();\n        };\n    });\n```", "```java\n   <alert ng-repeat=\"alert in alerts\" type=\"alert.type\"\n           close=\"closeAlert($index)\">{{alert.msg}}\n    </alert>\n\n    <div class=\"panel panel-default\">\n        <div class=\"panel-heading\">\n            <h3 class=\"panel-title\">Ticket booking</h3>\n        </div>\n        <div class=\"panel-body\">\n            <p>\n Remaining money: <span class=\"badge\">{{account.balance}}</span>\n            </p>\n            <br/>\n\n            <button type=\"button\" class=\"btn btn-primary btn-xs\"\n                    ng-click=\"clearWarnings()\">Clear warnings\n            </button>\n\n            <button type=\"button\" class=\"btn btn-warning btn-xs\"\n                    ng-click=\"resetAccount()\">Reset account\n            </button>\n        </div>\n        <table class=\"table table-hover table-striped\">\n            <thead><th>ID</th><th>Name</th><th>Price</th><th>Booked</th>       <th>Book</th></thead>\n            <tbody>\n            <tr ng-repeat=\"seat in seats\">\n <td>{{seat.id}}</td>\n <td>{{seat.name}}</td>\n <td>${{seat.price}}</td>\n                <td><span\n                        class=\"glyphicon glyphicon-{{seat.booked ? 'ok' :'remove'}}\"></span></td>\n                <td>\n                    <button type=\"button\"\n                            class=\"btn btn-primary {{seat.booked? 'disabled' :''}} btn-xs\" ng-click=\"bookTicket(seat)\">Book\n                    </button>\n                </td>\n            </tr>\n            </tbody>\n        </table>\n```"]