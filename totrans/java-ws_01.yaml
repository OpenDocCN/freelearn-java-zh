- en: 1\. Getting Started
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1. 入门
- en: Overview
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we will be covering the fundamentals of Java. You will first
    learn to write and compile your first "Hello World!" program—traditionally the
    first step to practicing any new language. We will then discuss the differences
    between the **command-line interface** (**CLI**) and **Graphical User Interface**
    (**GUI**), and the relative benefits of both. By the end of this chapter, you
    will understand the basic concepts behind variables, know how to hold data within
    them, and, even, how to comment on your own code.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍 Java 的基础知识。你将首先学习如何编写和编译你的第一个 "Hello World!" 程序——这是学习任何新语言的第一个传统步骤。然后，我们将讨论
    **命令行界面**（**CLI**）和 **图形用户界面**（**GUI**）之间的区别，以及两者的相对优势。到本章结束时，你将理解变量背后的基本概念，了解如何在其中存储数据，甚至如何对你的代码进行注释。
- en: Introduction
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: When learning how to program in almost any programming language, the first example
    you will typically test is called "hello world." It is the simplest application
    possible; the aim is to write the expression "hello world" to whatever user interface
    the programming environment offers. Executing this program will introduce you
    to the basics of writing code using the IntelliJ editor, utilizing different types
    of data to be printed to the user interface and adding comments to your code.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习如何使用几乎任何编程语言进行编程时，你通常会测试的第一个示例被称为 "hello world"。这是可能的最简单应用程序；目的是将 "hello
    world" 表达式写入编程环境提供的任何用户界面。执行此程序将向你介绍使用 IntelliJ 编辑器编写代码的基础，利用不同类型的数据打印到用户界面，以及如何对你的代码添加注释。
- en: When writing your first program, you will also discover how Java's syntax is
    constructed and how it relates to other languages such as C or C++. Understanding
    the syntax is key to starting to read code. You will learn how to distinguish
    where commands and functions begin and end, how parameters are passed over between
    blocks of code, and how to leave comments that will help you when revisiting your
    software in the future.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 当你编写第一个程序时，你也会发现 Java 的语法是如何构建的，以及它与 C 或 C++ 等其他语言的关系。理解语法是开始阅读代码的关键。你将学习如何区分命令和函数的开始和结束，如何在代码块之间传递参数，以及如何添加注释，这些注释将有助于你在将来回顾你的软件时。
- en: This chapter covers the basics of writing and testing programs as a first step
    toward building all the code that you will find in this book.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了编写和测试程序的基础，这是构建本书中所有代码的第一步。
- en: Writing, Compiling, and Executing Your Hello World Program
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写、编译和执行你的 "Hello World!" 程序
- en: In the preface, you saw how to install the IntelliJ development environment.
    While it is possible to write Java code with literally any text editor, we believe
    it is good to see how to create applications using state-of-the-art tools such
    as the aforementioned software package.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在前言中，你看到了如何安装 IntelliJ 开发环境。虽然你可以用任何文本编辑器编写 Java 代码，但我们认为看到如何使用像上述软件包这样的最先进工具来创建应用程序是很好的。
- en: 'However, prior to guiding you step by step through getting your first program
    to run, we should take a look at the code that will become your first executable
    running on Java. The following code listing shows the program. Read through it,
    and we will later revise what each one of the parts is doing:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在一步一步地指导你运行第一个程序之前，我们应该先看看将成为你第一个在 Java 上运行的可执行代码。以下代码列表显示了程序。阅读它，我们稍后会修订每个部分的功能：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The first line is what we call a class definition. All programs in Java are
    called `main`. In this program, you can see how the `Main` class contains a method
    called `main` that will be printing the sentence "Hello World!" to the system's
    default output.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行是我们所说的类定义。Java 中的所有程序都被称作 `main`。在这个程序中，你可以看到 `Main` 类包含一个名为 `main` 的方法，这个方法会将句子
    "Hello World!" 打印到系统的默认输出。
- en: 'The code included in the class definition (`public class Main`) indicates that
    the class itself is public, which means that it will be accessible from other
    programs running on your computer. The same happens for the method definition
    (`public static void main(String[] args)`). There is, however, a series of other
    things that require our attention:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 包含在类定义（`public class Main`）中的代码表明，这个类本身是公开的，这意味着它可以从你电脑上运行的其他程序中访问。同样，方法定义（`public
    static void main(String[] args)`）也是这样。然而，还有一些其他的事情需要我们注意：
- en: '`static` signifies that there is nothing in the system instantiating the `main`
    method. Because of the way the Java Virtual Machine works, the `main` method needs
    to be static, or it will not be possible to execute it.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`static`表示系统中没有实例化`main`方法。由于Java虚拟机的工作方式，`main`方法必须是静态的，否则将无法执行它。'
- en: '`void` indicates that the `main` method will not be returning anything to any
    code calling it. Methods could, in fact, send an answer to a piece of code executing
    it, as we will see later in the book.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`void`表示`main`方法不会向调用它的任何代码返回任何内容。实际上，方法可以向执行它的代码发送答案，正如我们将在本书后面看到的那样。'
- en: '`main` is the name of the method. You cannot assign this a different name,
    since it is the method that makes the program executable and needs to be named
    this way.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`main`是方法的名称。你不能给它赋予不同的名称，因为这个方法是使程序可执行的方法，需要这样命名。'
- en: '`String[] args` are the parameters of the `main` method. Parameters are passed
    as a list of strings. In other words, the program could take arguments from other
    parts within your computer and use them as data. In the particular case of the
    `main` method, these are strings that could be entered on the **command-line interface**
    (**CLI**) when calling the program.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String[] args`是`main`方法的参数。参数作为字符串列表传递。换句话说，程序可以从计算机内的其他部分获取参数并用作数据。在`main`方法的具体情况下，这些是在调用程序时可以在**命令行界面**（CLI）中输入的字符串。'
- en: 'Exercise 1: Creating Your Hello World Program in Java'
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习1：在Java中创建你的Hello World程序
- en: IntelliJ provides you with a pre-made "hello world" template. Templates help
    you to get started faster with your code, as they provide the components you may
    need to speed up development. Templates can also be used for educational purposes;
    this is the case when it comes to testing "hello world."
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: IntelliJ为你提供了一个预先制作的“Hello World”模板。模板可以帮助你更快地开始编写代码，因为它们提供了你可能需要的组件来加速开发。模板也可以用于教育目的；当测试“Hello
    World”时就是这种情况。
- en: 'For this first exercise, start with the editor. We will leave some options
    as they are by default. We will later see how to personalize some of the options
    to better suit our needs:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个第一个练习，我们从编辑器开始。我们将保留一些默认选项不变。我们稍后会看到如何根据我们的需求个性化一些选项：
- en: 'Open IntelliJ and you will see a window giving you several options. Click on
    `Create New Project`. It should be the first option in the list:![Figure 1.1:
    Creating a new project on IntelliJ IDE'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开IntelliJ，你会看到一个窗口提供给你几个选项。点击`创建新项目`。它应该是列表中的第一个选项：![图1.1：在IntelliJ IDE中创建新项目
- en: '](img/C13927_01_01.jpg)'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C13927_01_01.jpg)'
- en: 'Figure 1.1: Creating a new project on IntelliJ IDE'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图1.1：在IntelliJ IDE中创建新项目
- en: 'A new interface should appear. The default options here are meant for creating
    a Java program, so you just need to click `Next`:![Figure 1.2: Creating a new
    Java project'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应该出现一个新的界面。这里的默认选项是为了创建一个Java程序，所以你只需点击`下一步`：![图1.2：创建新的Java项目
- en: '](img/C13927_01_02.jpg)'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C13927_01_02.jpg)'
- en: 'Figure 1.2: Creating a new Java project'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图1.2：创建新的Java项目
- en: 'Check the box to create the project from a template. Click on `Java Hello World`
    and then click `Next`:![Figure 1.3: Create a Java Hello World project from template'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打勾以从模板创建项目。点击`Java Hello World`然后点击`下一步`：![图1.3：从模板创建Java Hello World项目
- en: '](img/C13927_01_03.jpg)'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C13927_01_03.jpg)'
- en: 'Figure 1.3: Create a Java Hello World project from template'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图1.3：从模板创建Java Hello World项目
- en: 'Name the project `chapter01`. Then, click `Finish`:![Figure 1.4: Create a Hello
    World Project'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将项目命名为`chapter01`。然后，点击`完成`：![图1.4：创建Hello World项目
- en: '](img/C13927_01_04.jpg)'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C13927_01_04.jpg)'
- en: 'Figure 1.4: Create a Hello World Project'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图1.4：创建Hello World项目
- en: 'As we haven''t chosen a folder to store the projects (intentionally), IntelliJ
    will offer you the possibility to create a default project folder inside your
    user space. Click `OK`:![Figure 1.5: Default project folder option on IntelliJ
    IDE'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们没有选择存储项目的文件夹（故意为之），IntelliJ会提供在用户空间内创建默认项目文件夹的可能性。点击`确定`：![图1.5：IntelliJ
    IDE中的默认项目文件夹选项
- en: '](img/C13927_01_05.jpg)'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C13927_01_05.jpg)'
- en: 'Figure 1.5: Default project folder option on IntelliJ IDE'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图1.5：IntelliJ IDE中的默认项目文件夹选项
- en: 'You will see a popup with tips on how to use the software. If you have never
    used a development environment of this type before, then this is a good way to
    get information about how it functions every time IntelliJ boots up. Choose your
    preferences and then click `Close`:![Figure 1.6: Tip on how to use the IDE'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将看到一个弹出窗口，其中包含有关如何使用该软件的提示。如果你以前从未使用过这种类型的开发环境，那么这是了解每次IntelliJ启动时如何工作的好方法。选择你的首选项，然后点击`关闭`：![图1.6：如何使用IDE的提示
- en: '](img/C13927_01_06.jpg)'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片 C13927_01_06.jpg]'
- en: 'Figure 1.6: Tip on how to use the IDE'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图1.6：如何使用IDE的提示
- en: IntelliJ reminds you regarding the possibility of using a special tab dedicated
    to learning more about the environment in relation to programming. Click `Got
    It`.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: IntelliJ会提醒你有关使用专门用于学习更多关于编程环境信息的特殊标签页的可能性。点击`明白了`。
- en: 'The editor presents a menu bar, a code navigation bar, a project navigation
    area, and the actual editor where you can see the code we explained earlier. Now
    it is time to test it. Click on the `Run` button (this is the triangle on the
    right-hand side of the code navigation bar).![Figure 1.7: Execute the program
    by clicking on the Run button'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑器显示一个菜单栏、代码导航栏、项目导航区域以及实际的编辑器，在这里你可以看到我们之前解释过的代码。现在，是时候测试它了。点击`运行`按钮（这是代码导航栏右侧的三角形）。![图1.7：通过点击运行按钮执行程序
- en: '](img/C13927_01_07.jpg)'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片 C13927_01_07.jpg]'
- en: 'Figure 1.7: Execute the program by clicking on the Run button'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图1.7：通过点击运行按钮执行程序
- en: 'When the program runs, a terminal window unfolds at the bottom of IntelliJ.
    Here, you can see how the software called your JVM, the program''s outcome, and
    a line from the editor reading `Process finished with exit code 0`, which means
    that no errors occurred.![Figure 1.8: JVM showing the output'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当程序运行时，IntelliJ底部的终端窗口展开。在这里，你可以看到软件如何调用JVM，程序的结果，以及编辑器中的一行显示`Process finished
    with exit code 0`，这意味着没有发生错误。![图1.8：JVM显示输出
- en: '](img/C13927_01_08.jpg)'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片 C13927_01_08.jpg]'
- en: 'Figure 1.8: JVM showing the output'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.8：JVM显示输出
- en: Note
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Since we took all the options by default for this example, you will see that
    our program is called `Main.java`. In the following chapter, we will see how to
    create programs that we then name ourselves.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在这个例子中默认选择了所有选项，所以你会看到我们的程序被命名为`Main.java`。在下一章中，我们将看到如何创建我们自己命名的程序。
- en: Basic Syntax and Naming Conventions
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本语法和命名约定
- en: The first thing you will have noticed in the `hello world` program, when it
    comes to syntax, is how we group the code into blocks marked within sets of curly
    braces—`{` and `}`. The `Main` class contains the `main` method. In other words,
    `main` is nested inside `Main`. This is how classes are defined in Java – in principle,
    they contain all of the methods they are going to use.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在`hello world`程序中，当你关注语法时，首先会注意到我们如何将代码分组到由花括号`{`和`}`标记的块中。`Main`类包含`main`方法。换句话说，`main`被嵌套在`Main`中。这就是Java中定义类的方式——原则上，它们包含它们将要使用到的所有方法。
- en: Another aspect of the Java syntax is that capitalization matters. If a command
    is defined as `Print`, it differs from another command called `print`, and the
    compiler will identify them as different. Capitalization falls under a convention,
    an unwritten rule among programmers on how names should be formatted in Java.
    You will have noticed that the class is called `HelloWorld`. In Java, the convention
    establishes that methods, classes, variables, and so on should be named by joining
    words together using capitals as a way to mark the separation between words. In
    addition, the names of classes should start with capitals.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Java语法的另一个方面是大小写很重要。如果一个命令被定义为`Print`，它不同于另一个名为`print`的命令，编译器会将它们识别为不同的。大小写属于一种约定，是程序员之间关于Java中命名格式的一种不成文规则。你会注意到类被命名为`HelloWorld`。在Java中，约定规定方法、类、变量等应该通过使用大写字母来连接单词，以此作为单词分隔的标记。此外，类的名称应该以大写字母开头。
- en: Note
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: When you are starting off, it is easy to get confused between syntax, which
    is rigid and must be respected for the compiler to function, and conventions,
    which are intended for developers to better understand how code is supposed to
    function.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当你刚开始时，很容易混淆语法，语法是严格的，必须遵守，以便编译器能够运行，以及约定，约定是为了让开发者更好地理解代码应该如何工作。
- en: 'To some extent, the Java compiler doesn''t care about whitespace characters,
    but there is a convention about using them to make code more readable. The first
    code listing you saw (`Example01.java`) can be rewritten as follows, and will
    have the exact same result once compiled and executed:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在一定程度上，Java编译器不关心空白字符，但有一个关于使用它们的约定，可以使代码更易读。你看到的第一个代码列表（`Example01.java`）可以重写如下，一旦编译和执行，将产生完全相同的结果：
- en: '[PRE1]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `System.out.println("Hello World!")` function call will print out the expected
    message on the CLI. The command is nested inside the `main(String[] args)` method
    definition, which is nested inside the `class` definition. You could add more
    blank spaces, but it will not affect the functionality of the program. This is
    part of the syntax of Java, but also of other programming languages such as C,
    C++, and Scala.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`System.out.println("Hello World!")` 函数调用将在CLI上打印出预期的消息。该命令嵌套在 `main(String[]
    args)` 方法定义中，该方法定义又嵌套在 `class` 定义中。你可以添加更多空白字符，但这不会影响程序的功能。这是Java语法的一部分，也是其他编程语言（如C，C++和Scala）的一部分。'
- en: Also, note that "`Hello World!`" is a `String`, a type of data. The following
    section will explore what types of data can be sent as parameters to the `System.out.println()`
    method call.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请注意，“`Hello World!`” 是一个 `String`，一种数据类型。下一节将探讨哪些类型的数据可以作为参数发送到 `System.out.println()`
    方法调用。
- en: Printing Out Different Data Types
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 打印不同数据类型
- en: 'In Java, it is common to define methods that have the capability to use different
    sets of parameters. For example, the `System.out.println()` method can print other
    types of data that are not just pieces of text. You could, as an example, try
    to print out a simple number and see the result. `Example03.java` adds a couple
    of lines to the code to showcase different types of data:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中，定义具有使用不同参数集的能力的方法是很常见的。例如，`System.out.println()` 方法可以打印出不仅仅是文本的其他类型的数据。例如，你可以尝试打印出一个简单的数字并查看结果。`Example03.java`
    在代码中添加了几行，以展示不同类型的数据：
- en: '[PRE2]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The previous example will print out four lines to the CLI, representing the
    different arguments given to the `System.out.println()` method. The outcome will
    look as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的例子将在CLI上打印出四行，代表发送给 `System.out.println()` 方法的不同参数。结果将如下所示：
- en: '[PRE3]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You see six different types of data in this result: some text, a character,
    an integer number, two different kinds of decimal numbers, and a truth statement.
    In the Java programming language, we define those types of data as `String`, `char`,
    `int`, `float`, `double`, and `boolean`, respectively. There is a lot more to
    learn about data types, but let''s first introduce a new topic: **variables**.
    This will help to understand why data types are important.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你在这个结果中看到了六种不同的数据类型：一些文本，一个字符，一个整数，两种不同的十进制数，和一个布尔陈述。在Java编程语言中，我们分别将这些数据类型定义为
    `String`，`char`，`int`，`float`，`double` 和 `boolean`。关于数据类型还有很多东西要学习，但让我们首先介绍一个新主题：**变量**。这将有助于理解数据类型为什么很重要。
- en: Variables and Variable Types
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变量和变量类型
- en: Variables are human-readable names given to slots of your computer memory. Each
    one of those slots can store some data, such as a number, a piece of text, a password,
    or the value of the temperature outside. This kind of data is what we call a **variable
    type**. There are as many variable types as there are data types in our programming
    language. The type of data we are using defines the amount of memory allocated
    to store the data. A byte (which is made up of 8 bits) is smaller than an integer
    (which is made up of 32 bits). A **string** comprises several characters, hence
    making it bigger than an integer.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 变量是赋予计算机内存槽位的可读性名称。每个槽位都可以存储一些数据，例如一个数字，一段文本，一个密码，或室外温度的值。这类数据就是我们所说的**变量类型**。在我们的编程语言中，变量类型和数据类型的数量一样多。我们使用的数据类型定义了分配给存储数据的内存量。一个字节（由8位组成）比一个整数（由32位组成）小。一个**字符串**由多个字符组成，因此比整数大。
- en: '`byte`, `int` (short for integer), `String`, and `char` (short for character)
    are variable types. To make use of a variable, you need to define it for the compiler
    to understand that it needs it in order to allocate some space for storing data.
    The variable definition is done by first determining its type, followed by the
    variable''s name, and then you can optionally initialize it with a certain value.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`byte`, `int`（整数简称），`String` 和 `char`（字符简称）是变量类型。为了使用变量，你需要为编译器定义它，以便编译器知道它需要为存储数据分配一些空间。变量定义是通过首先确定其类型，然后是变量的名称，然后你可以选择性地用某个值初始化它。'
- en: 'The following code listing shows how to define a couple of variables of different
    types:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码列表显示了如何定义几个不同类型的变量：
- en: '[PRE4]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This next exercise will take you through how to modify the code listing from
    `Example03.java` in order to print out the values coming from the variables.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个练习将指导你如何修改 `Example03.java` 中的代码列表，以便打印出变量的值。
- en: 'Exercise 2: Printing Different Types of Data'
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 2：打印不同类型的数据
- en: 'In this exercise, we shall declare variables of different data types and print
    it as an output. To do so, perform the following steps:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将声明不同数据类型的变量并将它们打印为输出。为此，执行以下步骤：
- en: 'Open IntelliJ. If you didn''t get to try the code listing from `Example03.java`,
    let''s start by creating a new project using the `HelloWorld` template:![Figure
    1.9: Create a new Java project](img/C13927_01_09.jpg)'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 IntelliJ。如果你还没有尝试 `Example03.java` 中的代码列表，让我们先使用 `HelloWorld` 模板创建一个新的项目：![图
    1.9：创建一个新的 Java 项目](img/C13927_01_09.jpg)
- en: 'Figure 1.9: Create a new Java project'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 1.9：创建一个新的 Java 项目
- en: 'Once you have reached the step where you have the code generated by the development
    environment, copy all of the code, erase it, and paste in the code from the `Example03.java`
    listing instead:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你到达由开发环境生成的代码步骤，复制所有代码，将其擦除，然后粘贴 `Example03.java` 列表中的代码：
- en: Try out the code, and check that the outcome is what it should be, as explained
    in *Printing Out Different Data Types*.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试运行代码，并检查结果是否符合 *打印不同数据类型* 中解释的内容。
- en: 'Start by declaring a new variable of the `String` type and initialize it:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，声明一个 `String` 类型的变量并初始化它：
- en: '[PRE5]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, substitute the text in the first `System.out.println()` command with
    the variable. As the variable is linked to the piece of memory containing the
    string, executing the program will give the same result:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将第一个 `System.out.println()` 命令中的文本替换为变量。由于变量链接到包含字符串的内存块，执行程序将给出相同的结果：
- en: '[PRE6]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Continue by declaring a variable of the `char` type, another of the `int` type,
    one of the `double` type, and finally, one of the `boolean` type. Proceed to use
    the variable names instead of the values when printing out to the CLI:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续声明一个 `char` 类型的变量，另一个 `int` 类型的变量，一个 `double` 类型的变量，最后，一个 `boolean` 类型的变量。在打印到
    CLI 时，使用变量名而不是值：
- en: '[PRE7]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: With this example, not only have you learned about different types of data and
    the variables that store this data, but also about how methods can handle more
    than one data type.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个例子，你不仅学习了不同类型的数据以及存储这些数据的变量，还学习了方法如何处理多种数据类型。
- en: Note
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Notice how the float type, when defined, requires the letter f to be appended
    after the number. This way, Java will be able to distinguish between these two
    types of decimal variables.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到当定义 `float` 类型时，需要在数字后面附加字母 f。这样，Java 就能区分这两种类型的十进制变量。
- en: Primitive versus Reference Data Types
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原始数据类型与引用数据类型
- en: Some data types are built on top of others. For example, strings are made of
    sequences of characters, so, in a sense, without characters, there would be no
    strings. You could say that characters are more core to the language than strings
    are. Like characters, there are other data types that are used to define the properties
    of a programming language. These data types, fundamental for the construction
    of the language itself, are what we call primitive data types.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 一些数据类型建立在其他类型之上。例如，字符串是由字符序列组成的，所以，从某种意义上说，没有字符就没有字符串。可以说字符比字符串对语言更核心。像字符一样，还有其他用于定义编程语言特性的数据类型。这些对于语言本身构建来说是基本的数据类型，我们称之为基本数据类型。
- en: 'The following table describes some of the basic types of variables you will
    find in Java, along with their characteristics:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 下表描述了你在 Java 中会发现的一些基本变量类型及其特性：
- en: '![Figure 1.10: Basic types in Java'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.10：Java 中的基本类型'
- en: '](img/C13927_01_10.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.9：创建一个新的 Java 项目](img/C13927_01_10.jpg)'
- en: 'Figure 1.10: Basic types in Java'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.10：Java 中的基本类型
- en: The eight primitive data types represent `byte`, `short`, `int`, and `long`),
    `float` and `double`), and `char`). *Exercise 2, Printing Different Types of Data*
    showcased how to use variables from some of these types within our programs.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 八种基本数据类型包括 `byte`、`short`、`int` 和 `long`)、`float` 和 `double`)、以及 `char`)。*练习
    2，打印不同类型的数据* 展示了如何在我们的程序中使用这些类型中的变量。
- en: Note
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: String is not a primitive data type. It is what we call a reference data type.
    A mnemotechnic that could help you remember why it is called "reference" is that
    it is not linking to the actual data, but to the position in memory where the
    data is stored; hence, it is "a reference." There are other reference data types
    that you will be introduced to later in the book. Note that `float` and `double`
    are not precise enough to deal with some uses of decimal numbers, such as currencies.
    Java has a high-precision decimal data type called `BigDecimal`, but it is not
    a primitive type.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串不是原始数据类型。我们称之为引用数据类型。一个有助于你记住为什么它被称为“引用”的记忆法是，它不是链接到实际数据，而是链接到数据存储在内存中的位置；因此，它是“一个引用。”本书后面你还将介绍其他引用数据类型。请注意，`float`和`double`在处理一些十进制数的用途（如货币）时不够精确。Java
    有一个高精度的十进制数据类型称为`BigDecimal`，但它不是原始类型。
- en: 'Null'
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 空值（Null）
- en: In the same way that primitive data types have a default value, reference data
    types, which could be made of any kind of data, have a common way to express that
    they contain no data. As an example of a reference typed variable, the default
    value for a string that is defined as `empty` is `null`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 与原始数据类型有默认值一样，引用数据类型（可以是任何类型的数据）有一个共同的方式来表达它们不包含数据。作为一个引用类型变量的例子，定义为`empty`的字符串的默认值是`null`。
- en: Null is a lot more complex than that, though—it can also be used to determine
    termination. Continuing with the example of the string, when stored in memory,
    it will be made of an array of characters ending with `null`. In this way, it
    will be possible to iterate within a string, since there is a common way to signify
    that you have reached its end.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，空值比这要复杂得多——它还可以用来确定终止。继续以字符串的例子为例，当存储在内存中时，它将是一个以`null`结尾的字符数组。这样，就可以在字符串内进行迭代，因为有一个共同的方式来表示你已经到达了它的末尾。
- en: 'It is possible to modify the content of the computer memory during the execution
    of a program. We do this using variables in code. The next code listing will show
    you how to create an empty variable of the `String` type and modify its value
    while the program is running:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在程序执行过程中，可以修改计算机内存的内容。我们通过在代码中使用变量来实现这一点。接下来的代码示例将向您展示如何在程序运行时创建一个空的`String`类型变量并修改其值：
- en: '[PRE8]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The previous example shows how to declare an empty string, how its value can
    be modified throughout the program, and how the program will cope with displaying
    the content of an empty string. It literally prints out the word `null` on the
    CLI. See the full outcome of the program:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的例子展示了如何声明一个空字符串，如何在程序中修改其值，以及程序将如何处理显示空字符串的内容。它实际上会在 CLI 上打印出单词`null`。请查看程序的完整输出：
- en: '[PRE9]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The program declares an empty variable, and by assigning new values to it, overwrites
    the variable's contents with new content.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 程序声明了一个空变量，并通过给它赋新值，用新内容覆盖了变量的内容。
- en: Chars and Strings
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符和字符串
- en: As explained in *Primitive versus Reference Data Types*, strings are made of
    sequences of characters. A character is a symbol representing a letter in the
    alphabet, a digit, a human-readable symbol such as the exclamation mark, or even
    symbols invisible to the eye, such as the blank space, end-of-line, or tabulation
    characters. Strings are variables that refer to a part of the memory containing
    a one-dimensional array of characters.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如同在*原始数据类型与引用数据类型*中解释的那样，字符串由字符序列组成。一个字符是一个代表字母表中的字母、数字、人类可读的符号（如感叹号）或甚至肉眼看不见的符号（如空白空间、换行符或制表符）的符号。字符串是变量，它引用内存中包含一维字符数组的部分。
- en: 'Java allows the use of the mathematical composition of characters into strings.
    Let''s take the previous example that printed the message "`Joe . . . went fishing`."
    Let''s modify this so that it will add the different parts of the string together
    instead of overwriting the variable at each step:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Java 允许使用字符的数学组合来创建字符串。让我们以之前打印消息"`Joe . . . went fishing`"的例子为例。让我们修改它，使其将字符串的不同部分相加，而不是在每一步覆盖变量：
- en: '[PRE10]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The outcome for this program will be the following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序的输出结果将是以下内容：
- en: '[PRE11]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: What happens here is that the program prints the string as we make it grow longer
    by appending new parts to it. However, the result is a non-desired one (unless
    you really want the program to print `null` in front of the string).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里发生的情况是，程序通过向字符串中追加新部分来使其变长，并打印出字符串。然而，结果是不可预期的（除非你真的想让程序在字符串前打印出`null`）。
- en: Now it is time to see what happens when you do not declare a variable properly.
    Modify the previous code listing, and observe the outcome from the development
    environment.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候看看当你没有正确声明变量时会发生什么了。修改之前的代码列表，并从开发环境中观察结果。
- en: 'Exercise 3: Declaring Strings'
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 3：声明字符串
- en: 'Modify the code example from `Example05.java` to see how the development environment
    will respond to the non-valid declaration of a variable. To do so, perform the
    following steps:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 修改 `Example05.java` 中的代码示例，以查看开发环境将如何响应变量声明的无效性。为此，请执行以下步骤：
- en: Start by creating a program using the `HelloWorld` template and overwrite all
    of the code with the listing from the `Example05.java` file.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，使用 `HelloWorld` 模板创建一个程序，并用 `Example05.java` 文件中的列表覆盖所有代码。
- en: Try the program. You should get the outcome presented earlier in this section.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试运行程序。你应该得到本节前面展示的结果。
- en: 'Modify the line where the string is declared to be as follows:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将声明字符串的行修改如下：
- en: '[PRE12]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'When executing the program, you will get an error as the result:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当执行程序时，你会得到一个错误作为结果：
- en: '[PRE13]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Declare the string to be empty, as in, containing no characters. You can do
    this by using the following line of code to declare the string:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明字符串为空，即不包含任何字符。你可以通过以下代码行声明字符串：
- en: '[PRE14]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'After making this modification, the program''s result will be as follows:'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在进行此修改后，程序的结果将如下所示：
- en: '[PRE15]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Doing Some Math
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进行一些数学运算
- en: You could say that the code presented in the `Example05.java` file's listing
    represents a way to *add* strings. This operation of adding strings is called
    *concatenation*. At the same time, it is possible to run all kinds of simple and
    complex mathematical operations using variables as part of the equation.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以说，`Example05.java` 文件中的代码列表代表了一种 *添加* 字符串的方法。这种添加字符串的操作称为 *连接*。同时，还可以使用变量作为方程的一部分执行各种简单和复杂的数学运算。
- en: 'The basic mathematical operators in Java are addition (+), subtraction (-),
    multiplication (*), and division (/). An example of some operations being performed
    is presented here:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Java 中的基本数学运算符是加法 (+), 减法 (-), 乘法 (*), 和除法 (/)。这里展示了某些操作是如何执行的示例：
- en: '[PRE16]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The order in which operations will be performed is that of normal math: multiplication
    and division first, followed by addition and subtraction. If nesting is needed,
    you could use braces:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 操作的顺序是正常数学的顺序：先乘除，后加减。如果需要嵌套，可以使用花括号：
- en: '[PRE17]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'There are other mathematical operators, such as square root (`sqrt()`), minimum
    (`min()`), and round up a number (`round()`). Calling to some of these more advanced
    operations will require calling the methods from the `Math` library within Java.
    Let''s see some example code that will execute some mathematical operations to
    see how this works, later using this to try and solve a simple equation from trigonometry:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他数学运算符，例如平方根 (`sqrt()`), 最小值 (`min()`), 和向上取整 (`round()`)。调用这些更高级的操作需要调用
    Java 中的 `Math` 库中的方法。让我们看看一些示例代码，它将执行一些数学运算以了解这是如何工作的，稍后我们将使用这些方法尝试解决一个简单的三角学方程：
- en: '[PRE18]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In the preceding example, you declare a variable of the `float` type and print
    it. Next, you declare a variable of the `int` type and initialize it with the
    result of rounding the previous variable, which eliminates the fractional part
    of the number. You can see that `round()` is part of Java's `Math` library and
    therefore has to be called this way.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，你声明了一个 `float` 类型的变量并打印它。接下来，你声明了一个 `int` 类型的变量，并用上一步变量四舍五入的结果初始化它，这样就消除了数字的小数部分。你可以看到
    `round()` 是 Java 的 `Math` 库的一部分，因此必须这样调用。
- en: '`Math.round()` and `System.out.println()` are examples of calls to methods
    that belong to the standard Java libraries `Math` and `System`, respectively.
    Java comes with a plethora of useful methods that will make your interaction with
    the software quick and easy. We will look at them later in the book.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`Math.round()` 和 `System.out.println()` 分别是调用属于标准 Java 库 `Math` 和 `System`
    的方法的示例。Java 提供了大量的有用方法，这将使你与软件的交互变得快速而简单。我们将在本书的后面部分探讨它们。'
- en: 'Exercise 4: Solving a Simple Trigonometry Problem'
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 4：解决一个简单的三角学问题
- en: 'The goal of this exercise is to solve the hypotenuse of a right triangle, given
    the lengths of the other two sides. Note that the formula for calculating the
    hypotenuse of a right-angled triangle is as follows: *h*2 *= a*2 *+ b*2'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 本练习的目标是求解直角三角形的斜边长度，给定其他两边的长度。请注意，计算直角三角形斜边的公式如下：*h*2 *= a*2 *+ b*2
- en: '![Figure 1.11: A right angled triangle with sides as a and b and h as the hypotenuse'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.11：一个直角三角形，边长为a和b，h为斜边]'
- en: '](img/C13927_01_11.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/C13927_01_11.jpg)'
- en: 'Figure 1.11: A right angled triangle with sides as a and b and h as the hypotenuse'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.11：一个直角三角形，边长为a和b，h为斜边
- en: 'To do this, perform the following steps:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，请执行以下步骤：
- en: Take, once more, the `HelloWorld` template as a point of departure for the exercise,
    create the program, and then let's build a new program by modifying its contents.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次以`HelloWorld`模板作为练习的出发点，创建程序，然后通过修改其内容来构建一个新的程序。
- en: 'Declare the values to each one of the problem''s variables. Initialize the
    one corresponding to the hypotenuse with `0`. Make all the variables of the `double`
    type:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明每个问题变量的值。将对应斜边的变量初始化为`0`。将所有变量声明为`double`类型：
- en: '[PRE19]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Given that the addition of the squares of `a` and `b` equals the square of
    `h`, rewrite the equation as follows:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于`a`和`b`的平方和等于`h`的平方，将方程重写如下：
- en: '[PRE20]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The `sqrt()` method is used to obtain the square root of a number.
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`sqrt()`方法用于获取一个数的平方根。'
- en: 'Add the necessary code to print out the result:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加必要的代码以打印出结果：
- en: '[PRE21]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The expected outcome of this program should be the following:'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该程序的预期结果应该是以下内容：
- en: '[PRE22]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Programming languages typically offer more than one way to solve a problem.
    In this particular case, you could solve the calculation of the square of the
    `a` and `b` variables by using the `Math.pow()` method. This will calculate the
    power of a base by an exponent that is given as a parameter:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编程语言通常提供多种解决问题的方法。在这个特定的情况下，你可以通过使用`Math.pow()`方法来解决变量`a`和`b`的平方的计算。这将通过参数给出的指数来计算基数的幂：
- en: '[PRE23]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The form of the final program, given all the modifications, is as follows:'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 经过所有修改后的最终程序形式如下：
- en: '[PRE24]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Comments Help You to Share Code
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注释有助于你共享代码
- en: Until now, you have just been writing programs and testing them. But if you
    intend to be part of a large software project where you will collaborate with
    others in the making of an application, you will have to share your code with
    others. Sharing code is an important part of the work of the contemporary developer,
    and, in order to share code, you will have to annotate it so that others can understand
    why you decided to solve certain challenges the way you did in your code.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你只是编写程序并测试它们。但如果你打算参与一个大型软件项目，你将在其中与其他人合作开发应用程序，你必须与他人共享你的代码。共享代码是当代开发者工作的重要部分，为了共享代码，你必须对代码进行注释，以便他人可以理解你为什么以你代码中的方式解决某些挑战。
- en: 'There are two ways to comment code in Java: inline comments, which are marked
    using a double-slash, `//`; and more extensive comments, typically used at the
    beginning of large blocks of code, which are marked with an opening tag comprising
    a slash and an asterisk, `/*`, and a closing tag comprising an asterisk and a
    slash, `*/`.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中，有两种方式来注释代码：内联注释，使用双斜杠`//`标记；以及更广泛的注释，通常用于大块代码的开头，使用由斜杠和星号组成的开始标签`/*`和由星号和斜杠组成的结束标签`*/`。
- en: 'The following example showcases how to add comments to the resulting program
    from the previous exercise:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了如何对上一个练习的结果程序添加注释：
- en: '[PRE25]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: In the previous example, we commented both the opening of the program and each
    one of the lines. The idea is to highlight different ways to comment code—inline,
    before a line, at the beginning of the code. You will notice some special things
    in the comments; for instance, the opening comment includes the author of the
    code (eventually, you will also include your contact information) as well as a
    copyright notice, letting people know to what extent they are allowed to reuse
    your code.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们注释了程序的开头和每一行。目的是突出不同的代码注释方式——内联注释、行前注释、代码开头注释。你会在注释中注意到一些特殊的东西；例如，开头注释包括代码的作者（最终，你也会包括你的联系信息）以及版权声明，让人们知道他们可以多大程度上重新使用你的代码。
- en: Note
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Copyright notices for code depend on a specific company's policies most of the
    time, and vary for almost every project. Be careful when adding these to your
    code.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的版权声明通常取决于特定公司的政策，并且几乎每个项目都有所不同。在添加这些到你的代码时要小心。
- en: CLI versus GUI
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命令行界面（CLI）与图形用户界面（GUI）
- en: In this book, we are going to be using the CLI as a way to test and deploy code.
    On the other hand, we will be writing the code using the IntelliJ development
    environment, which has a **Graphical User Interface** (**GUI**). We are intentionally
    avoiding making programs that will be using a GUI to interact with users. Java,
    in its current form, is mostly used as a service running on a server, and therefore
    the generation of GUIs is not the main goal behind the use of Java.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们将使用 CLI 作为测试和部署代码的方式。另一方面，我们将使用 IntelliJ 开发环境编写代码，它有一个 **图形用户界面**（**GUI**）。我们有意避免编写将使用
    GUI 与用户交互的程序。Java 在当前形式下，主要用于作为在服务器上运行的服务，因此生成 GUI 不是使用 Java 的主要目标。
- en: Up to this point, this book has invited you to run the code from the IntelliJ
    environment. The following exercise will help you to create a fully compiled application
    and run it from the CLI.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，这本书已经邀请你从 IntelliJ 环境中运行代码。接下来的练习将帮助你创建一个完全编译的应用程序并在 CLI 中运行它。
- en: 'Exercise 5: Running the Code from the CLI'
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 5：从 CLI 运行代码
- en: 'We will start from the creation of the `HelloWorld` example. We will compile
    it and then look for it from a terminal window. You have to remember which folder
    you created your program in, as we will be executing it from there. In this example,
    we called the folder `chapter01`. If you named it differently, you will have to
    remember to use the correct folder name when necessary in the code for this exercise:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从创建 `HelloWorld` 示例开始。我们将编译它，然后从终端窗口中查找它。你必须记住你创建程序所在的文件夹，因为我们将从那里执行它。在这个例子中，我们将文件夹命名为
    `chapter01`。如果你给它起了不同的名字，你将不得不记住在代码中必要的时候使用正确的文件夹名称：
- en: Click on the `Build Project` button (this is the hammer on the toolbar), and
    check that the system is not throwing any errors. If there are any, the console
    at the bottom of the window will open up, indicating the possible errors.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 `构建项目` 按钮（这是工具栏上的锤子），检查系统没有抛出任何错误。如果有任何错误，窗口底部的控制台将打开，指示可能的错误。
- en: 'Next, open the terminal within the editor, and you will see a button at the
    bottom of the environment''s window. This will show a CLI starting at the location
    where the program was created. You can see the contents of the folder by typing
    the `ls` command:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在编辑器内打开终端，你将在环境窗口的底部看到一个按钮。这将显示一个从程序创建位置开始的 CLI。你可以通过输入 `ls` 命令来查看文件夹的内容：
- en: '[PRE26]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: There will be two different folders and one file. We are interested in checking
    the folder named `out`. It is the one containing the compiled version of our program.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将有两个不同的文件夹和一个文件。我们感兴趣的是检查名为 `out` 的文件夹。它是包含我们程序编译版本的文件夹。
- en: 'Navigate to that folder by issuing the `cd out` command. This folder contains
    a single subfolder called `production` – enter it, as well as the subsequent `chapter01`
    subfolder:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入 `cd out` 命令导航到该文件夹。这个文件夹包含一个名为 `production` 的单个子文件夹——进入它，以及随后的 `chapter01`
    子文件夹：
- en: '[PRE27]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Once at the right folder, you will find a file called `Main.class`. This is
    the compiled version of your program. To execute it, you need to call the `java
    Main` command. You will see the program''s outcome directly at the CLI:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦到达正确的文件夹，你将找到一个名为 `Main.class` 的文件。这是你程序的编译版本。要执行它，你需要调用 `java Main` 命令。你将直接在
    CLI 中看到程序的结果：
- en: '[PRE28]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Activity 1: Obtaining the Minimum of Two Numbers'
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 1：获取两个数字的最小值
- en: 'Write a program that will check two numbers entered as variables and print
    out the message "`The minimum of numbers: XX and YY is ZZ`", where `XX`, `YY`,
    and `ZZ` represent the values of the two variables and the result of the operation,
    respectively. To do this, perform the following steps:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个程序，该程序将检查作为变量输入的两个数字，并打印出消息 "`两个数字的最小值：XX 和 YY 是 ZZ`"，其中 `XX`、`YY` 和 `ZZ`
    分别代表两个变量的值和操作的结果。为此，执行以下步骤：
- en: 'Declare 3 double variables: `a`, `b`, and `m`. Initialize them with the values
    `3`, `4` and `0` respectively.'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明 3 个双精度变量：`a`、`b` 和 `m`。分别用 `3`、`4` 和 `0` 初始化它们。
- en: Create a `String` variable `r`, it should contain the output message to be printed.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `String` 变量 `r`，它应该包含要打印的输出消息。
- en: Use the `min()` method to obtain the minimum of the two numbers and store the
    value in m.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `min()` 方法获取两个数字的最小值并将值存储在 m 中。
- en: Print the results.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印结果。
- en: Note
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: The solution for the activity can be found on page 532.
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 活动的解决方案可以在第 532 页找到。
- en: Summary
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter introduced you to the use of the IntelliJ development environment,
    which is the basic tool that will be used throughout the book. Many of IntelliJ's
    features are common in other tools, along with the language used in menus and
    the overall programming interface.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 本章向你介绍了IntelliJ开发环境的使用，这是本书中将使用的基工具。IntelliJ的许多功能在其他工具中也很常见，包括菜单中使用的语言和整体编程界面。
- en: 'You have seen some basic aspects of Java''s syntax: how classes are defined,
    how code is nested inside curly braces, and how semicolons end each one of the
    commands. Comments help make the code more readable, both for others with whom
    you may collaborate and for yourself when reviewing your code in the future.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经看到了Java语法的一些基本方面：如何定义类，如何将代码嵌套在花括号内，以及分号如何结束每个命令。注释有助于使代码更易于阅读，无论是与其他可能合作的开发者，还是在你未来回顾代码时。
- en: The primitive types offer a collection of possible variable types to be used
    in your programs to carry data, store the results of operations, and transfer
    information between different blocks of code.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 原始类型提供了一组可能的变量类型，这些类型可以在你的程序中使用，用于携带数据、存储操作结果以及在代码的不同块之间传输信息。
- en: 'All examples in this chapter are built from modifying an initial example that
    we used as a point of departure: "hello world"—that is, printing a string on the
    CLI. In later chapters, you will learn how to create your own classes from scratch,
    name them according to your needs, and store them in different folders. The next
    chapter will specifically cover statements in Java that control the flow of the
    programs.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的所有示例都是基于修改我们用作出发点的初始示例构建的：“hello world”——即，在命令行界面打印一个字符串。在后面的章节中，你将学习如何从头创建自己的类，根据你的需求命名它们，并将它们存储在不同的文件夹中。下一章将专门介绍Java中控制程序流程的语句。
- en: KAY34
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: KAY34
