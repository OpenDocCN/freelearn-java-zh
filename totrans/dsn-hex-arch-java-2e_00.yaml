- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, solving problems and expressing our ideas through code is challenging.
    What looks like an obvious solution in our minds may look unnecessarily complex
    in the minds of others. But that’s alright if we are open to new ideas and perspectives
    because we set our minds to learning unexpected things when we have a persistent
    attitude and a willingness to embrace everything that comes.
  prefs: []
  type: TYPE_NORMAL
- en: I was not expecting it when I was first introduced to hexagonal architecture.
  prefs: []
  type: TYPE_NORMAL
- en: I remember working in a company where most of the software was developed by
    consultants. Those folks would come, deliver their code, and leave. Although my
    team and I tried to establish specific standards to ensure consistency in the
    applications we were responsible for, the harsh reality was that we needed more
    knowledge to maintain our applications properly. Given the number of systems and
    the different approaches and architectures employed to build them, it took a lot
    of work to maintain and add new features to such systems. That’s when a teammate
    told me about the hexagonal architecture and how it could help us tackle hard-to-maintain
    software problems.
  prefs: []
  type: TYPE_NORMAL
- en: At that time, there weren’t many books covering the hexagonal architecture.
    Most of the resources were scattered on the internet through video courses and
    articles explaining how someone implemented hexagonal architecture. The lack of
    resources was a considerable obstacle, but using an architecture that could improve
    software maintainability was very attractive to me. So, I kept researching and
    experimenting in my own job with the ideas, which would ultimately lead to me
    writing the first edition of this book.
  prefs: []
  type: TYPE_NORMAL
- en: I am fortunate to have had the opportunity to write the first, and now the second,
    edition of a book dealing with such a fascinating topic as hexagonal architecture.
    The second edition has allowed me to employ hexagonal architecture ideas with
    more recent versions of Java and Quarkus. This edition preserves the fundamentals
    from the previous one while exploring modern Java’s new and cool features. Also,
    this edition explores how hexagonal architecture can be used with the acclaimed
    SOLID principles and how it relates to the widely used layered architecture.
  prefs: []
  type: TYPE_NORMAL
- en: Concepts such as ports, adapters, and use cases are combined with **Domain-Driven
    Design** (**DDD**) elements such as entities and value objects to provide an in-depth
    guide explaining how to assemble those concepts to untangle the exciting puzzle
    of designing highly change-tolerable applications with hexagonal architecture.
    Considering the contemporary cloud-native practices that dictate most enterprise
    development today, we deep dive into Quarkus to learn how to blend hexagonal architecture
    ideas with cloud-native development, which enables us to create enterprise-grade
    hexagonal applications ready to be deployed in any major cloud provider.
  prefs: []
  type: TYPE_NORMAL
- en: So, I encourage you to have a persistent attitude and a willingness to embrace
    everything that comes and embark with me on this fascinating journey to explore
    hexagonal architecture.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is suited for Java architects and Java developers at senior and intermediate
    levels. The reader is expected to have previous knowledge of object-oriented language
    principles and be acquainted with the Java programming language. Previous professional
    Java experience is also recommended, as this book is concerned with problems that
    usually happen in enterprise software development projects using Java.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B19777_01.xhtml#_idTextAnchor014), *Why Hexagonal Architecture?*,
    starts by discussing how software that is not well organized and lacks sound architectural
    principles may work fine but will present a high risk of developing technical
    debt. As new features are added, the software tends to become more complex to
    maintain because there is no common ground to guide the addition or change of
    features. Based on this problem, this chapter explains why hexagonal architecture
    helps tackle technical debt by establishing an approach where business code is
    decoupled from technology code, allowing the former to evolve without dependency
    on the latter.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B19777_02.xhtml#_idTextAnchor038), *Wrapping Business Rules inside
    the Domain Hexagon*, follows a domain-driven approach and describes what domain
    entities are, what role they play within hexagonal architecture, and how they
    wrap business rules and data in simple Java POJOs. It explains why domain entities
    are the most important part of code and why they should not depend on anything
    other than other domain entities. Finally, it explains how business rules inside
    a domain entity can be implemented using the Specification design pattern.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B19777_03.xhtml#_idTextAnchor066), *Handling Behavior with Ports
    and Uses Cases*, covers what use cases are, explaining that they are used to define
    software intent with interfaces describing things the software can do. Then, it
    explains what input ports are and the classes that implement use case interfaces,
    and specifies in concrete ways how the software intent should be accomplished.
    It talks about output ports and their role in abstractly defining the behavior
    of operations that need to get data from outside the software. Finally, this chapter
    explains how use cases and ports are grouped in what’s called the Application
    hexagon.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B19777_04.xhtml#_idTextAnchor083), *Creating Adapters to Interact
    with the Outside World*, shows how adapters allow the software to integrate with
    different technologies. It explains that the same port can have multiple adapters.
    Input adapters, bound to input ports, enable the application to expose its functionalities
    through different communication protocols, such as REST, gRPC, or WebSocket. Output
    adapters, bound to output ports, allow the application to communicate with varying
    data sources, whether it be databases or even message queues or other applications.
    Finally, the chapter shows how all adapters are grouped in the Framework hexagon.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B19777_05.xhtml#_idTextAnchor096), *Exploring the Nature of Driving
    and Driven Operations*, explains that driver operations drive the software behavior
    by starting one of its exposed functions. It details the driver operations life
    cycle, showing how a request is captured on the Framework hexagon through an input
    adapter and then handed down to an input port on the Application hexagon until
    it reaches the entities from the Domain hexagon. It shows that a use case starts
    driven operations from the Application hexagon when the software needs to get
    data from outside, going from an output port to an output adapter to fulfill the
    use case needs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B19777_06.xhtml#_idTextAnchor126), *Building the Domain Hexagon*,
    shows how to start developing a telco’s network and topology inventory application
    by first creating the Domain hexagon as a Java module. Then, this chapter shows
    how business rules and data are mapped to domain entities’ classes and methods.
    The business rules are arranged in different algorithms with the aim of the Specification
    design pattern. Finally, it shows how to unit test the Domain hexagon.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B19777_07.xhtml#_idTextAnchor152), *Building the Application
    Hexagon*, starts by adding the Application hexagon as the second Java module on
    the application. It then explains how to create the use case interface that describes
    the software’s operations to manage the network and topology inventory. It shows
    how to implement the use case with an input port, giving a detailed description
    of how the code should be arranged. It details the creation of an output port
    interface and its role in obtaining data from external sources. Finally, it explains
    how to test the Application hexagon.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B19777_08.xhtml#_idTextAnchor174), *Building the Framework Hexagon*,
    starts by adding the Framework hexagon as the third Java module on the application.
    Then, it teaches you how to create an input adapter and how it will carry out
    its operations through an input port. After that, an output adapter is created
    through the implementation of an output port. The output adapter will show how
    data can be fetched from external sources and converted to be dealt with in Domain
    hexagon terms. Finally, the chapter explains how to test the Framework hexagon.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B19777_09.xhtml#_idTextAnchor192), *Applying Dependency Inversion
    with Java Modules*, talks a little bit about Java modules, explaining why they
    are important to enforce the hexagonal architecture principles related to dependency
    inversion. It explains that Java modules don’t allow cyclic dependencies and because
    of that, there is no way to make two modules depend on each other at the same
    time. You will learn how to configure the module descriptor in the hexagonal application.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B19777_10.xhtml#_idTextAnchor213), *Adding Quarkus to a Modularized
    Hexagonal Application*, briefly explains the Quarkus framework and its main features.
    Then, it advances to show how to add Quarkus to the hexagonal application that
    was developed in the previous chapters. It introduces the creation of a fourth
    module, called Bootstrap, which serves to get the application started and is used
    to group the Domain, Application, and Framework modules.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B19777_11.xhtml#_idTextAnchor228), *Leveraging CDI Beans to
    Manage Ports and Use Cases*, explains how to transform the already developed ports
    and use cases into CDI beans, leveraging enterprise Java’s power in the hexagonal
    architecture. It starts by explaining what CDI beans are, then it shows how to
    implement them on input and output ports. Finally, the chapter describes how to
    adjust the application framework tests to use Quarkus CDI bean test features.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B19777_12.xhtml#_idTextAnchor244), *Using RESTEasy Reactive
    to Implement Input Adapters*, starts by comparing reactive and imperative approaches
    for REST endpoints, detailing why the reactive approach performs better. It explains
    how to implement input adapters with Quarkus RESTEasy Reactive capabilities by
    explaining how to add the correct annotations and inject the proper dependencies
    to call input ports. In order to expose the hexagonal application APIs, this chapter
    explains how to add OpenAPI and Swagger UI. Finally, it shows how to test the
    reactive input port with Quarkus test tools.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 13*](B19777_13.xhtml#_idTextAnchor263), *Persisting Data with Output
    Adapters and Hibernate Reactive*, talks about Hibernate Reactive and how it helps
    Quarkus to provide reactive capabilities for data persistence. It explains how
    to create a reactive output adapter to persist data to a MySQL database. Finally,
    it shows how to test the reactive output adapter with Quarkus test tools.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 14*](B19777_14.xhtml#_idTextAnchor286), *Setting Up Dockerfile and
    Kubernetes Objects for Cloud Deployment*, explains how to create a Dockerfile
    for the hexagonal application based on Quarkus. It explains in detail how to package
    all the modules and dependencies in one single Docker image. It then shows how
    to create Kubernetes objects such as Deployment and Service for the hexagonal
    application and test them in a minikube local Kubernetes cluster.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 15*](B19777_15.xhtml#_idTextAnchor305), *Comparing Hexagonal Architecture
    with Layered Architecture*, describes layered architecture and explores how layers
    handle specific system responsibilities, such as persistence and presentation.
    We then develop an application using layered architecture principles. Finally,
    to highlight the differences between layered and hexagonal architecture, we refactor
    the previously layer-based application into a hexagonal one.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 16*](B19777_16.xhtml#_idTextAnchor324), *Using SOLID Principles with
    Hexagonal Architecture*, starts by reviewing SOLID principles and observing how
    each principle helps to build applications with improved maintainability. Then,
    it explores how SOLID principles can be applied to a system developed with hexagonal
    architecture. Finally, it presents some common design patterns that can be used
    while building a hexagonal system.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 17*](B19777_17.xhtml#_idTextAnchor348), *Good Design Practices for
    Your Hexagonal Application*, talks about some good practices you can adopt while
    creating each hexagon for your application. Starting with the Domain hexagon,
    we focus on DDD aspects to clarify the business problems the application is supposed
    to solve. Then, we move on to a discussion about the alternative ways to set up
    use cases and ports in the Application hexagon. Finally, we discuss the consequences
    of having to maintain multiple adapters.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The examples provided are based on Java 17, but you should be able to run them
    with more recent Java versions. Maven 3.8 is required to build the example projects.
    Docker is also needed for the examples of running the application inside a container.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Software/hardware covered in** **the book** | **Operating** **system requirements**
    |'
  prefs: []
  type: TYPE_TB
- en: '| Maven 3.8 | Windows, macOS, or Linux |'
  prefs: []
  type: TYPE_TB
- en: '| Java 17 SE Development Kit | Windows, macOS, or Linux |'
  prefs: []
  type: TYPE_TB
- en: '| Docker | Windows, macOS, or Linux |'
  prefs: []
  type: TYPE_TB
- en: '| Postman | Windows, macOS, or Linux |'
  prefs: []
  type: TYPE_TB
- en: '| Newman | Windows, macOS, or Linux |'
  prefs: []
  type: TYPE_TB
- en: '| Kafka | macOS or Linux |'
  prefs: []
  type: TYPE_TB
- en: You will need Postman, Newman, and Kafka to run the examples in [*Chapter 5*](B19777_05.xhtml#_idTextAnchor096).
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are using the digital version of this book, we advise you to type
    the code yourself or access the code from the book’s GitHub repository (a link
    is available in the next section). Doing so will help you avoid any potential
    errors related to the copying and pasting** **of code.**'
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from GitHub at [https://github.com/PacktPublishing/-Designing-Hexagonal-Architecture-with-Java---Second-Edition](https://github.com/PacktPublishing/-Designing-Hexagonal-Architecture-with-Java---Second-Edition).
    If there’s an update to the code, it will be updated in the GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`Code in text`: Indicates code words in text, database table names, folder
    names, filenames, file extensions, pathnames, dummy URLs, user input, and Twitter
    handles. Here is an example: “Mount the downloaded `WebStorm-10*.dmg` disk image
    file as another disk in your system.”'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.
    For instance, words in menus or dialog boxes appear in **bold**. Here is an example:
    “Select **System info** from the **Administration** panel.”'
  prefs: []
  type: TYPE_NORMAL
- en: Tips or important notes
  prefs: []
  type: TYPE_NORMAL
- en: Appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '**General feedback**: If you have questions about any aspect of this book,
    email us at [customercare@packtpub.com](mailto:customercare@packtpub.com) and
    mention the book title in the subject of your message.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/support/errata](http://www.packtpub.com/support/errata)
    and fill in the form.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at [copyright@packt.com](mailto:copyright@packt.com)
    with a link to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com).'
  prefs: []
  type: TYPE_NORMAL
- en: Share Your Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you’ve read *Designing Hexagonal Architecture with Java, Second Edition*,
    we’d love to hear your thoughts! Please [click here to go straight to the Amazon
    review page](https://packt.link/r/1837635110) for this book and share your feedback.
  prefs: []
  type: TYPE_NORMAL
- en: Your review is important to us and the tech community and will help us make
    sure we’re delivering excellent quality content.
  prefs: []
  type: TYPE_NORMAL
- en: Download a free PDF copy of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thanks for purchasing this book!
  prefs: []
  type: TYPE_NORMAL
- en: Do you like to read on the go but are unable to carry your print books everywhere?
  prefs: []
  type: TYPE_NORMAL
- en: Is your eBook purchase not compatible with the device of your choice?
  prefs: []
  type: TYPE_NORMAL
- en: Don’t worry, now with every Packt book you get a DRM-free PDF version of that
    book at no cost.
  prefs: []
  type: TYPE_NORMAL
- en: Read anywhere, any place, on any device. Search, copy, and paste code from your
    favorite technical books directly into your application.
  prefs: []
  type: TYPE_NORMAL
- en: The perks don’t stop there, you can get exclusive access to discounts, newsletters,
    and great free content in your inbox daily
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these simple steps to get the benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: Scan the QR code or visit the link below
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19777_QR_Free_PDF.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[https://packt.link/free-ebook/9781837635115](https://packt.link/free-ebook/9781837635115)'
  prefs: []
  type: TYPE_NORMAL
- en: Submit your proof of purchase
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That’s it! We’ll send your free PDF and other benefits to your email directly
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Part 1: Architecture Fundamentals'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this part, you will gain a solid understanding of hexagonal architecture
    elements: domain entities, use cases, ports, and adapters. Starting with a discussion
    about why we would apply hexagonal architecture principles to our project, we
    progressively advance our exploration by learning how to organize problem domain
    code with domain-driven design techniques.'
  prefs: []
  type: TYPE_NORMAL
- en: Then, we examine the important role use cases and ports play in expressing system
    behaviors. Moving ahead, we explore how adapters allow the hexagonal system to
    be compatible with different protocols and technologies. Finally, we close this
    part by discussing how driving and driven operations influence the behaviors of
    a hexagonal system.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part has the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B19777_01.xhtml#_idTextAnchor014), *Why Hexagonal Architecture?*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B19777_02.xhtml#_idTextAnchor038), *Wrapping Business Rules inside
    the Domain Hexagon*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B19777_03.xhtml#_idTextAnchor066), *Handling Behavior with Ports
    and Use Cases*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B19777_04.xhtml#_idTextAnchor083), *Creating Adapters to Interact
    with the Outside World*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B19777_05.xhtml#_idTextAnchor096), *Exploring the Nature of Driving
    and Driven Operations*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
