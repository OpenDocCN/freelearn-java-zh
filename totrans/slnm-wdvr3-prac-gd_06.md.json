["```java\npublic class IAmTheEventListener implements WebDriverEventListener {\n    @Override\n    public void beforeAlertAccept(WebDriver webDriver) {\n    }\n\n    @Override\n    public void afterAlertAccept(WebDriver webDriver) {\n\n    }\n\n    @Override\n    public void afterAlertDismiss(WebDriver webDriver) {\n\n    }\n\n    @Override\n    public void beforeAlertDismiss(WebDriver webDriver) {\n    }\n\n    @Override\n    public void beforeNavigateTo(String url, WebDriver webDriver) {\n        System.out.println(\"Before Navigate To \" + url);\n    }\n\n    @Override\n    public void afterNavigateTo(String s, WebDriver webDriver) {\n        System.out.println(\"Before Navigate Back. Right now I'm at \"\n                + webDriver.getCurrentUrl());\n    }\n\n    @Override\n    public void beforeNavigateBack(WebDriver webDriver) {\n    }\n\n    @Override\n    public void afterNavigateBack(WebDriver webDriver) {\n    }\n\n    @Override\n    public void beforeNavigateForward(WebDriver webDriver) {\n    }\n\n    @Override\n    public void afterNavigateForward(WebDriver webDriver) {\n    }\n\n    @Override\n    public void beforeNavigateRefresh(WebDriver webDriver)     {\n    }\n\n    @Override\n    public void afterNavigateRefresh(WebDriver webDriver) {\n    }\n\n    @Override\n    public void beforeFindBy(By by, WebElement webElement, WebDriver webDriver) {\n    }\n\n    @Override\n    public void afterFindBy(By by, WebElement webElement, WebDriver webDriver) {\n    }\n\n    @Override\n    public void beforeClickOn(WebElement webElement, WebDriver webDriver) {\n    }\n\n    @Override\n    public void afterClickOn(WebElement webElement, WebDriver webDriver) {\n    }\n\n    @Override\n    public void beforeChangeValueOf(WebElement webElement, WebDriver webDriver, CharSequence[] charSequences) {\n\n    }\n\n    @Override\n    public void afterChangeValueOf(WebElement webElement, WebDriver webDriver, CharSequence[] charSequences) {\n\n    }\n\n    @Override\n    public void beforeScript(String s, WebDriver webDriver)     {\n    }\n\n    @Override\n    public void afterScript(String s, WebDriver webDriver)     {\n    }\n\n    @Override\n    public void onException(Throwable throwable, WebDriver webDriver) {\n    }\n}\n```", "```java\npackage com.example;\n\nimport org.openqa.selenium.WebDriver;\nimport    org.openqa.selenium.support.events.AbstractWebDriverEventListener;\n\npublic class IAmTheEventListener2 extends AbstractWebDriverEventListener {\n\n    @Override\n    public void beforeNavigateTo(String url, WebDriver driver) {\n        System.out.println(\"Before Navigate To \"+ url);\n    }\n    @Override\n    public void beforeNavigateBack(WebDriver driver) {\n        System.out.println(\"Before Navigate Back. Right now I'm at \"\n                + driver.getCurrentUrl());\n    }\n}\n```", "```java\nWebDriver driver = new ChromeDriver();\n```", "```java\nEventFiringWebDriver eventFiringDriver = \n        new EventFiringWebDriver(driver);\nIAmTheEventListener eventListener = \n        new IAmTheEventListener();\n```", "```java\npublic class IAmTheDriver {\n    public static void main(String... args){\n\n        System.setProperty(\"webdriver.chrome.driver\",\n                \"./src/test/resources/drivers/chromedriver\");\n\n        WebDriver driver = new ChromeDriver();\n\n        try {\n            EventFiringWebDriver eventFiringDriver = new\n                    EventFiringWebDriver(driver);\n            IAmTheEventListener eventListener = new IAmTheEventListener();\n            eventFiringDriver.register(eventListener);\n            eventFiringDriver.get(\"http://www.google.com\");\n            eventFiringDriver.get(\"http://www.facebook.com\");\n            eventFiringDriver.navigate().back();\n        } finally {\n            driver.close();\n            driver.quit();\n        }\n    }\n}\n```", "```java\n@Override\npublic void beforeNavigateTo(String url, WebDriver driver) {\n    System.out.println(\"Before Navigate To: \" + url\n            + \" and Current url is: \" + driver.getCurrentUrl());\n}\n\n@Override\npublic void afterNavigateTo(String url, WebDriver driver) {\n    System.out.println(\"After Navigate To: \" + url\n            + \" and Current url is: \" + driver.getCurrentUrl());\n}\n\n@Override\npublic void beforeNavigateBack(WebDriver driver) {\n    System.out.println(\"Before Navigate Back. Right now I'm at \" + driver.getCurrentUrl());\n}\n\n@Override\npublic void afterNavigateBack(WebDriver driver) {\n    System.out.println(\"After Navigate Back. Right now I'm at \" + driver.getCurrentUrl());\n}\n```", "```java\nBefore Navigate To: http://www.google.com and Current url is: data:,\n After Navigate To: http://www.google.com and Current url is: https://www.google.com/?gws_rd=ssl\n Before Navigate To: http://www.facebook.com and Current url is: https://www.google.com/?gws_rd=ssl\n After Navigate To: http://www.facebook.com and Current url is: https://www.facebook.com/\n Before Navigate Back. Right now I'm at https://www.facebook.com/\n After Navigate Back. Right now I'm at https://www.google.com/?gws_rd=ssl\n```", "```java\npublic class RegisteringMultipleListeners {\n    public static void main(String... args){\n\n        System.setProperty(\"webdriver.chrome.driver\",\n                \"./src/test/resources/drivers/chromedriver\");\n\n        WebDriver driver = new ChromeDriver();\n\n        try {\n            EventFiringWebDriver eventFiringDriver = new\n                    EventFiringWebDriver(driver);\n            IAmTheEventListener eventListener = new IAmTheEventListener();\n            IAmTheEventListener2 eventListener2 = new\n                    IAmTheEventListener2();\n            eventFiringDriver.register(eventListener);\n            eventFiringDriver.register(eventListener2);\n            eventFiringDriver.get(\"http://www.google.com\");\n            eventFiringDriver.get(\"http://www.facebook.com\");\n            eventFiringDriver.navigate().back();\n        } finally {\n            driver.close();\n            driver.quit();\n        }\n    }\n}\n```", "```java\nBefore Navigate To: http://www.google.com and Current url is: data:,\n Before Navigate To http://www.google.com\n After Navigate To: http://www.google.com and Current url is: https://www.google.com/?gws_rd=ssl\n Before Navigate To: http://www.facebook.com and Current url is: https://www.google.com/?gws_rd=ssl\n Before Navigate To http://www.facebook.com\n After Navigate To: http://www.facebook.com and Current url is: https://www.facebook.com/\n Before Navigate Back. Right now I'm at https://www.facebook.com/\n Before Navigate Back. Right now I'm at https://www.facebook.com/\n After Navigate Back. Right now I'm at https://www.google.com/?gws_rd=ssl\n```", "```java\npublic void beforeChangeValueOf(WebElement element, WebDriver driver)\n```", "```java\npublic void afterChangeValueOf(WebElement element, WebDriver driver)\n```", "```java\npublic void beforeClickOn(WebElement element, WebDriver driver)\n```", "```java\npublic void afterClickOn(WebElement element, WebDriver driver)\n```", "```java\npublic void beforeFindBy(By by, WebElement element, WebDriver driver)\n```", "```java\npublic void afterFindBy(By by, WebElement element, WebDriver driver)\n```", "```java\npublic void beforeNavigateBack(WebDriver driver)\n```", "```java\npublic void afterNavigateBack(WebDriver driver)\n```", "```java\npublic void onException(java.lang.Throwable throwable, WebDriver driver)\n```", "```java\npublic EventFiringWebDriver unregister(WebDriverEventListener eventListener)\n```", "```java\npublic class IAmTheEventListener2 extends AbstractWebDriverEventListener {\n\n    @Override\n    public void beforeNavigateTo(String url, WebDriver driver) {\n        System.out.println(\"Before Navigate To \"+ url);\n    }\n\n    @Override\n    public void beforeNavigateBack(WebDriver driver) {\n        System.out.println(\"Before Navigate Back. Right now I'm at \"\n                + driver.getCurrentUrl());\n    }\n\n    @Override\n    public void afterNavigateTo(String to, WebDriver driver) {\n try {\n JavascriptExecutor jsExecutor = (JavascriptExecutor) driver;\n            URL url = new URL(\"https://raw.githubusercontent.com/GoogleChrome/\" +\n \"accessibility-developer-tools/stable/dist/js/axs_testing.js\");\n            String script = IOUtils.toString(url.openStream(), StandardCharsets.UTF_8);\n            jsExecutor.executeScript(script);\n            String report = (String) jsExecutor.executeScript(\"var results = axs.Audit.run();\" +\n \"return axs.Audit.createReport(results);\");\n            System.out.println(\"### Accessibility Report for \" +  driver.getTitle() + \"####\");\n            System.out.println(report);\n            System.out.println(\"### END ####\");\n\n        } catch (MalformedURLException e) {\n e.printStackTrace();\n        } catch (IOException e) {\n e.printStackTrace();\n        }\n }\n}\n```", "```java\n### Accessibility Report for Google####\n *** Begin accessibility audit results ***\n An accessibility audit found\n Warnings:\n Warning: AX_FOCUS_01 (These elements are focusable but either invisible or obscured by another element) failed on the following element:\n #hplogo > DIV > .fOwUFe > A\n See https://github.com/GoogleChrome/accessibility-developer-tools/wiki/Audit-Rules#-ax_focus_01--these-elements-are-focusable-but-either-invisible-or-obscured-by-another-element for more information.\nWarning: AX_TEXT_02 (Images should have an alt attribute) failed on the following element:\n #hplogo > DIV > .fOwUFe > A > .fJOQGe\n See https://github.com/GoogleChrome/accessibility-developer-tools/wiki/Audit-Rules#-ax_text_02--images-should-have-an-alt-attribute-unless-they-have-an-aria-role-of-presentation for more information.\n...\n *** End accessibility audit results ***\n ### END ####\n```", "```java\n@Override\npublic void afterNavigateTo(String to, WebDriver driver) {\n    try {\n\n        JavascriptExecutor jsExecutor = (JavascriptExecutor) driver;\n\n        // Get the Load Event End\n        long loadEventEnd = (Long) jsExecutor.executeScript(\"return window.performance.timing.loadEventEnd;\");\n        // Get the Navigation Event Start\n        long navigationStart = (Long) jsExecutor.executeScript(\"return window.performance.timing.navigationStart;\");\n        // Difference between Load Event End and Navigation Event Start is // Page Load Time\n        System.out.println(\"Page Load Time is \" + (loadEventEnd - navigationStart)/1000 + \" seconds.\");\n\n    } catch (MalformedURLException e) {\n        e.printStackTrace();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n```"]