["```java\ndependencies { \n    ... \n    compile(\"org.springframework.boot:spring-boot-starter-\n    data-rest\") \n    // compile(\"org.springframework.boot:spring-boot-starter-\n    jetty\") //   \n    Need to use Jetty instead of Tomcat \n    compile(\"org.springframework.boot:spring-boot-starter- \n    actuator\") \n    compile project(':db-count-starter') \n    ... \n} \n```", "```java\nspringBoot { \n    buildInfo { \n        properties { \n            additional = [ \n                'description' : project.description \n            ] \n        } \n    } \n} \n\n```", "```java\nversion=0.0.1-SNAPSHOT \ndescription=BookPub Catalog Application\n```", "```java\npublic class DbCountHealthIndicator implements HealthIndicator { \n    private CrudRepository repository; \n\n    public DbCountHealthIndicator(CrudRepository repository) { \n        this.repository = repository; \n    } \n\n    @Override \n    public Health health() { \n        try { \n            long count = repository.count(); \n            if (count >= 0) { \n                return Health.up().withDetail(\"count\", \n                count).build(); \n            } else { \n                return Health.unknown().withDetail(\"count\",  \n                count).build(); \n            } \n        } catch (Exception e) { \n            return Health.down(e).build(); \n        } \n    } \n} \n```", "```java\n@Import({DbCountAutoConfiguration.class, \n        HealthIndicatorAutoConfiguration.class})\n```", "```java\n@Autowired \nprivate HealthAggregator healthAggregator; \n@Bean \npublic HealthIndicator dbCountHealthIndicator(Collection<CrudRepository> repositories) { \n    CompositeHealthIndicator compositeHealthIndicator = new \n      CompositeHealthIndicator(healthAggregator); \n    for (CrudRepository repository : repositories) { \n        String name = DbCountRunner.getRepositoryName\n         (repository.getClass()); \n        compositeHealthIndicator.addHealthIndicator(name, new  \n          DbCountHealthIndicator(repository)); \n    } \n    return compositeHealthIndicator; \n} \n```", "```java\n@ManagementContextConfiguration \npublic class ManagementConfiguration  \n       implements WebMvcConfigurer { \n  @Override \n  public void configureMessageConverters( \n              List<HttpMessageConverter<?>> converters) { \n    HttpMessageConverter c = new \n     MappingJackson2HttpMessageConverter( \n        Jackson2ObjectMapperBuilder.json(). \n        propertyNamingStrategy(PropertyNamingStrategy.SNAKE_CAS). \n        build() \n        ); \n    converters.add(c); \n  } \n} \n```", "```java\norg.springframework.boot.actuate.autoconfigure.web.ManagementContextConfiguration=com.example.bookpub.ManagementConfiguration \n```", "```java\n@ComponentScan(excludeFilters =  \n    @ComponentScan.Filter( \n        type = FilterType.ANNOTATION,  \n        classes = ManagementContextConfiguration.class \n    ) \n) \n```", "```java\nmanagement.server.port=8081 \nmanagement.endpoints.web.exposure.include=*\n```", "```java\ncompile(\"de.codecentric:spring-boot-admin-server:2.0.0-SNAPSHOT\") \ncompile(\"de.codecentric:spring-boot-admin-server-ui:2.0.0-SNAPSHOT \") \n```", "```java\nmaven { url \"https://oss.sonatype.org/content/repositories/snapshots/\" } \n```", "```java\n@SpringBootApplication \n@EnableAdminServer \npublic class SpringBootAdminWebApplication { \n\n  public static void main(String[] args) { \n    SpringApplication.run( \n                      SpringBootAdminWebApplication.class, \n                      args); \n  } \n} \n```", "```java\nserver.port: 8090 \nspring.application.name: Spring Boot Admin Web \nspring.cloud.config.enabled: false \nspring.jackson.serialization.indent_output: true\n```", "```java\npublic class DbCountMetrics implements MeterBinder { \n    private Collection<CrudRepository> repositories; \n\n    public DbCountMetrics(Collection<CrudRepository> repositories) \n    { \n        this.repositories = repositories; \n    } \n\n    @Override \n    public void bindTo(MeterRegistry registry) { \n        for (CrudRepository repository : repositories) { \n            String name = DbCountRunner.getRepositoryName\n              (repository.getClass()); \n            String metricName = \"counter.datasource.\"  \n                              + name; \n            Gauge.builder(metricName, repository, \n                          CrudRepository::count) \n                 .tags(\"name\", name) \n                 .description(\"The number of entries in \"  \n                             + name + \"repository\") \n                 .register(registry); \n        } \n    } \n} \n```", "```java\n@Bean \npublic DbCountMetrics\n  dbCountMetrics(Collection<CrudRepository> repositories) { \n    return new DbCountMetrics(repositories); \n} \n```", "```java\npropertyNamingStrategy( \n    PropertyNamingStrategy.LOWER_CAMEL_CASE \n)\n```", "```java\nspring.application.name=BookPub Catalog Application \nserver.port=8080 \nspring.boot.admin.client.url=http://localhost:8090\n```", "```java\n<configuration> \n  <include \n     resource=\"org/springframework/boot/logging/logback/base.xml\"/> \n  <jmxConfigurator/>  \n</configuration> \n```", "```java\nmeterRegistry.counter(\"objectName.methodName.invoked\").increment();\n```", "```java\nlong start = System.currentTimeMillis();\n```", "```java\nlong end = System.currentTimeMillis();.\n```", "```java\nGauge.builder(metricName, repository, CrudRepository::count)\n```", "```java\n{\"request\": \n  {\"mbean\":\"Tomcat:name=\"http-nio-8080\",type=ThreadPool\", \n   \"attribute\":\"maxThreads\", \n   \"type\":\"read\" \n  }, \n \"value\":200,\"timestamp\":1436740537,\"status\":200}\n```", "```java\ndependencies { \n    ... \n    compile(\"org.springframework.boot:spring-boot-starter-actuator\") \n    compile(\"io.github.anand1st:sshd-shell-spring-boot-starter:3.2.1\") \n    compile(\"de.codecentric:spring-boot-admin-starter-client:2.0.0-SNAPSHOT\") \n    compile(\"org.jolokia:jolokia-core:+\") \n    ... \n} \n```", "```java\nsshd.shell.enabled=true \nmanagement.endpoint.shutdown.enabled=true\n```", "```java\n********** User password not set. Use following password to login: \n8f20cf10-7d67-42ac-99e4-3a4a77ca6c5f ********** \n```", "```java\nEnter 'help' for a list of supported commands \napp> \n```", "```java\n    {\n      \"status\" : \"UP\",\n      \"details\" : {\n        \"dbCount\" : {\n          \"status\" : \"UP\",\n          \"details\" : {\n            \"ReviewerRepository\" : {\n              ...\n            },\n            \"PublisherRepository\" : {\n              ...\n            },\n            \"AuthorRepository\" : {\n              ...\n            },\n            \"BookRepository\" : {\n              ...\n            }\n          }\n        },\n        \"diskSpace\" : {\n          \"status\" : \"UP\",\n          \"details\" : {\n            \"total\" : 249795969024,\n            \"free\" : 14219882496,\n            \"threshold\" : 10485760\n          }\n        },\n        \"db\" : {\n          \"status\" : \"UP\", \n          \"details\" : { \"database\" : \"H2\", \"hello\" : 1 }\n        }\n      }\n    }\n\n```", "```java\npackage com.example.bookpub.command;\n\nimport com.example.bookpub.entity.Publisher;\nimport com.example.bookpub.repository.PublisherRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\nimport sshd.shell.springboot.autoconfiguration.SshdShellCommand;\nimport sshd.shell.springboot.console.ConsoleIO;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n@Component\n@SshdShellCommand(value = \"publishers\", description = \"Publisher management. Type 'publishers' for supported subcommands\")\npublic class PublishersCommand {\n    @Autowired\n    private PublisherRepository repository;\n\n    @SshdShellCommand(value = \"list\", description = \"List of publishers\")\n    public String list(String _arg_) {\n        List list = new ArrayList();\n\n        repository.findAll().forEach(publisher ->\n            list.add(publisher);\n        );\n\n        return ConsoleIO.asJson(list);\n    }\n\n    @SshdShellCommand(value = \"add\", description = \"Add a new publisher. Usage: publishers add <name>\")\n    public String add(String name) {\n        Publisher publisher = new Publisher(name);\n        try {\n            publisher = repository.save(publisher);\n            return ConsoleIO.asJson(publisher);\n        } catch (Exception e) {\n            return String.format(\"Unable to add new publisher named %s%n%s\", name, e.getMessage());\n        }\n    }\n\n    @SshdShellCommand(value = \"remove\", description = \"Remove existing publisher. Usage: publishers remove <id>\")\n    public String remove(String id) {\n        try {\n            repository.deleteById(Long.parseLong(id));\n            return ConsoleIO.asJson(String.format(\"Removed publisher %s\", id));\n        } catch (Exception e) {\n            return String.format(\"Unable to remove publisher with id %s%n%s\", id, e.getMessage());\n        }\n    }\n} \n\n```", "```java\napp> publishers \nSupported subcommand for publishers \nadd       Add a new publisher. Usage: publishers add <name> \nlist      List of publishers \nremove    Remove existing publisher. Usage: publishers remove <id>\n```", "```java\n{ \n  \"id\" : 2, \n  \"name\" : \"Fictitious Books\" \n} \n```", "```java\n[ { \n  \"id\" : 1, \n  \"name\" : \"Packt\" \n}, { \n  \"id\" : 2, \n  \"name\" : \"Fictitious Books\" \n} ] \n```", "```java\n[ { \n  \"id\" : 1, \n  \"name\" : \"Packt\" \n} ] \n```", "```java\n@Component \n@Order(3) \npublic class JsonPathUserInputProcessor \n             extends BaseUserInputProcessor { \n\n    private final Pattern pattern = Pattern.compile(\"[\\w\\W]+\\s?\\|\\s?jq (.+)\"); \n\n    @Override \n    public Optional<UsageInfo> getUsageInfo() { \n        return Optional.of(new UsageInfo(Arrays.<UsageInfo.Row>asList( \n                new UsageInfo.Row(\"jq <arg>\", \"JSON Path Query <arg> in response output of command execution\"), \n                new UsageInfo.Row(\"\", \"Example usage: help | jq $.<name>\")))); \n    } \n\n    @Override \n    public Pattern getPattern() { \n        return pattern; \n    } \n\n    @Override \n    public void processUserInput(String userInput) throws   \n      InterruptedException, ShellException{ \n        String[] part = splitAndValidateCommand(userInput, \"\\|\", 2); \n        Matcher matcher = pattern.matcher(userInput); \n        Assert.isTrue(matcher.find(), \"Unexpected error\"); \n        String jsonQuery = matcher.group(1).trim(); \n        try { \n            String output = processCommands(part[0]); \n            Object response = JsonPath.read(output, jsonQuery); \n            ConsoleIO.writeJsonOutput(response); \n        } catch (Exception e) { \n            ConsoleIO.writeOutput(String.format(\"Unable to process \n            query %s%n%s\", jsonQuery, e.getMessage())); \n        } \n    } \n} \n```", "```java\npublishers list | jq $..[?(@.name =~ /Pa.*/i)]\n```", "```java\n[ {\n    \"id\" : 1,\n    \"name\" : \"Packt\"\n} ]\n```", "```java\nsshd.shell.username=remote\nsshd.shell.password=shell\n\n```", "```java\ncompile(\"io.micrometer:micrometer-registry-graphite:latest.release\") \n```", "```java\n@Configuration \n@ConditionalOnClass(GraphiteMeterRegistry.class) \npublic class MonitoringConfiguration { \n\n    private static final Pattern blacklistedChars = \n                         Pattern.compile(\"[{}(),=\\[\\]/]\"); \n\n    @Bean \n    public MeterRegistryCustomizer<GraphiteMeterRegistry>  \n                              meterRegistryCustomizer() { \n        return registry -> { \n           registry.config() \n             .namingConvention(namingConvention()); \n        }; \n    } \n\n    @Bean \n    public HierarchicalNameMapper hierarchicalNameMapper(){ \n        return (id, convention) -> { \n            String prefix = \"bookpub.app.\"; \n            String tags = \"\"; \n\n            if (id.getTags().iterator().hasNext()) { \n                tags = \".\"  \n                        + id.getConventionTags(convention) \n                        .stream() \n                        .map(t -> t.getKey() + \".\"  \n                                                + t.getValue() \n                        ) \n                        .map(nameSegment ->  \n                                 nameSegment.replace(\" \", \"_\") \n                        ) \n                        .collect(Collectors.joining(\".\")); \n            } \n\n            return prefix  \n                   + id.getConventionName(convention)  \n                   + tags; \n        }; \n    } \n\n    @Bean \n    public NamingConvention namingConvention() { \n        return new NamingConvention() { \n            @Override \n            public String name(String name,  \n                               Meter.Type type,  \n                               String baseUnit) { \n                return format(name); \n            } \n\n            @Override \n            public String tagKey(String key) { \n                return format(key); \n            } \n\n            @Override \n            public String tagValue(String value) { \n                return format(value); \n            } \n\n            private String format(String name) { \n                String sanitized = \n                   Normalizer.normalize(name, \n                                    Normalizer.Form.NFKD); \n                // Changes to the original  \n                // GraphiteNamingConvention to use \"dot\"  \n                // instead of \"camelCase\" \n                sanitized =  \n                   NamingConvention.dot.tagKey(sanitized); \n\n                return blacklistedChars \n                           .matcher(sanitized) \n                           .replaceAll(\"_\"); \n            } \n        }; \n    } \n} \n```", "```java\nmanagement.metrics.export.graphite.enabled=true \nmanagement.metrics.export.graphite.host=localhost \nmanagement.metrics.export.graphite.port=2003 \nmanagement.metrics.export.graphite.protocol=plaintext \nmanagement.metrics.export.graphite.rate-units=seconds \nmanagement.metrics.export.graphite.duration-units=milliseconds \nmanagement.metrics.export.graphite.step=1m \n```", "```java\nString prefix = \"bookpub.app.\"; \n... \nreturn prefix + id.getConventionName(convention) + tags; \n```", "```java\nrequire 'httparty' \n\nrepos = ['AuthorRepository', 'ReviewerRepository', 'BookRepository', 'PublisherRepository'] \n\nSCHEDULER.every '10s' do \n  data = JSON.parse(HTTParty.get(\"http://localhost:8081/metrics\").body) \n  repo_counts = [] \n\n  repos.each do |repo| \n    current_count = data[\"counter.datasource.#{repo}\"] \n    repo_counts << { label: repo, value: current_count } \n  end \n\n  send_event('repositories', { items: repo_counts }) \nend \n```", "```java\nrequire 'httparty' \nrequire 'date' \n\neden_key = \"bookpub.app.jvm.memory.used.area.heap.id.PS_Eden_Space\" \nsurvivor_key = \"bookpub.app.jvm.memory.used.area.heap.id.PS_Survivor_Space\" \noldgen_key = \"bookpub.app.jvm.memory.used.area.heap.id.PS_Old_Gen\" \n\nSCHEDULER.every '60s' do \n  data = JSON.parse(HTTParty.get(\"http://localhost:8888/render/?from=-11minutes&target=#{eden_key}&target=#{survivor_key}&target=#{oldgen_key}&format=json&maxDataPoints=11\").body) \n\n  data.each do |metric| \n    target = metric[\"target\"] \n    # Remove the last data point, which typically has empty value \n    data_points = metric[\"datapoints\"][0...-1] \n    if target == eden_key \n      points = [] \n      data_points.each_with_index do |entry, idx| \n        value = entry[0] rescue 0 \n        points << { x: entry[1], y: value.round(0)} \n      end \n      send_event('heap_eden', points: points) \n    elsif target == survivor_key \n      current_survivor = data_points.last[0] rescue 0 \n      current_survivor = current_survivor / 1048576 \n      send_event(\"heap_survivor\", { value: \n                   current_survivor.round(2)}) \n    elsif target == oldgen_key \n      current_oldgen = data_points.last[0] rescue 0 \n      last_oldgen = data_points[-2][0] rescue 0 \n      send_event(\"heap_oldgen\", { \n                   current: current_oldgen.round(2), \n                   last: last_oldgen.round(2)\n                 }) \n    end \n  end \nend \n```", "```java\n/render/?from=-11minutes&target= bookpub.app.jvm.memory.used.area.heap.id.PS_Eden_Space &target= bookpub.app.jvm.memory.used.area.heap.id.PS_Survivor_Space &target= bookpub.app.jvm.memory.used.area.heap.id.PS_Old_Gen &format=json&maxDataPoints=11\n\n```"]