- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Working with Arrays
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Arrays are an essential data structure that you can use to store multiple values
    in one variable. Mastering arrays will not only make your code more organized
    and efficient but also open the door to more advanced programming techniques.
    Once you add arrays to the mix, you can level up the data structures of your applications.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we’ll explore arrays and equip you with the skills needed to
    effectively work with this fundamental data structure. You’ll learn how to create,
    manipulate, and iterate over arrays to solve a wide range of programming challenges.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an overview of what we’ll cover in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: What arrays are and how to use them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Declaring and initializing arrays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing array elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting the length of an array and understanding the bounds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Different ways to loop through arrays and process their elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with multidimensional arrays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing common operations with arrays using the `Arrays` class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you’ll have a solid foundation in working with arrays,
    enabling you to tackle more complex programming tasks with confidence. So, let’s
    dive in!
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code for this chapter can be found on GitHub at [https://github.com/PacktPublishing/Learn-Java-with-Projects/tree/main/ch6](https://github.com/PacktPublishing/Learn-Java-with-Projects/tree/main/ch6).
  prefs: []
  type: TYPE_NORMAL
- en: Arrays – what, when, and why?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far, we’ve only seen single values, such as `int`, `double`, and `String`.
    Imagine we want to calculate an average result. That would look something like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This code isn’t very scalable. If we were to add a fourth result, we would
    need to do three things in order to make this work:'
  prefs: []
  type: TYPE_NORMAL
- en: Declare and initialize a fourth variable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add this fourth variable to the total
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Divide by `4` instead of `3`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is a hassle, and it is error-prone. If we knew arrays, we could alter this
    by only changing one element of our code. Let’s see what arrays are. Then, we
    will rewrite this example once we get to iterate over arrays.
  prefs: []
  type: TYPE_NORMAL
- en: Java can’t do basic math?!
  prefs: []
  type: TYPE_NORMAL
- en: If you were to run the previous code snippet, you’d see something interesting.
    If I asked you to calculate the average, you’d say 8.2, and you would be right.
    If we ask Java to do it, it says 8.200000000000001.
  prefs: []
  type: TYPE_NORMAL
- en: You may wonder whether there is any use in learning Java at all if it can’t
    do basic calculations. This is not just a Java problem; this is a general computer
    problem. It has to translate decimal numbers into binary numbers – much like you
    can’t express 1/3 in decimal numbers exactly (0.33333).
  prefs: []
  type: TYPE_NORMAL
- en: Arrays explained
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Alright, so **arrays** can be a solution to structure our code better in specific
    situations. But what are they? An array is a data structure that can store a fixed-size,
    ordered collection of elements of the same data type. The elements in an array
    are stored in contiguous memory locations, making it easier for the computer to
    access and manipulate the data.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we haven’t seen a lot of situations yet where we would need them. We
    are really going to level up the complexity of our logic now as we learn how to
    work with arrays.
  prefs: []
  type: TYPE_NORMAL
- en: When to use arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So, let’s talk about when to use arrays. In our example earlier, where we calculated
    the average, an array would mean we wouldn’t need three separate variables to
    store our three results. We would store them in one variable of the double array
    type instead. This makes it easier to handle the data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Arrays (as well as other types of ways to store multiple values in one variable,
    which we’ll see later) are used for various reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Organizing data**: Arrays can help organize and manage large amounts of data
    in a structured way'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Simplifying code**: Using arrays can simplify your code by reducing the number
    of variables needed to store and manipulate data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Improving performance**: Accessing and modifying elements in an array is
    faster than using other data structures because elements are stored in contiguous
    memory locations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Being able to work with arrays is going to be a great tool in your Java toolbox!
    Let’s see how we can declare and initialize them.
  prefs: []
  type: TYPE_NORMAL
- en: Declaring and initializing arrays
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are different ways to declare and initialize arrays in Java. What you’ll
    need will depend a lot on the specific situation. So, let’s just start with the
    basics of declaring arrays.
  prefs: []
  type: TYPE_NORMAL
- en: Declaring arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To declare an array in Java, you need to specify the data type of the elements,
    followed by square brackets (`[]`) and the array’s name. Take the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here, `int[]` is the data type of the array, and `ages` is the name of the array.
    Right now, we can’t add any values to the array, because it hasn’t been initialized
    yet. This is different from initializing variables, which we have seen so far.
    Let’s see how to initialize arrays next.
  prefs: []
  type: TYPE_NORMAL
- en: Initializing arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After declaring an array, it needs to be initialized. We do this by specifying
    its size and allocating memory for the elements. We can use the `new` keyword
    to do this, followed by the data type, and then specify the size of the array
    inside the square brackets. Take the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This code initializes the `ages` variable to hold an array of integers with
    a size of `5`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also declare and initialize an array in a single line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here, we first declare the array on the left-hand side and initialize it on
    the right-hand side. We can also assign its values directly with a special short
    syntax, which we will explore next.
  prefs: []
  type: TYPE_NORMAL
- en: Short syntax for array initialization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can use Java’s shortcut syntax for declaring and initializing arrays with
    specific values. Instead of declaring and initializing the array separately, we
    can use curly braces (`{}`) to specify the elements directly. Take a look at the
    following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This code creates an array of integers and initializes it with the specified
    values. The size of the array is determined by the number of elements inside the
    curly braces.
  prefs: []
  type: TYPE_NORMAL
- en: 'Actually, our previous arrays had values already as well, because when you
    create an array using the `new` keyword, Java automatically initializes the elements
    with default values based on their data type. The default values are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Numeric types (`byte`, `short`, `int`, `long`, `float`, `double`): `0` or `0.0`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`char`: ‘`\u0000`’ (the Unicode `null` character)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`boolean`: `false`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Reference types (objects and arrays): `null`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, say you create an array of integers with a size of `3`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Java initializes the elements with the default value of `0`, because `int` is
    numeric. So far, we have seen how to declare and initialize arrays. It’s now time
    to learn how to access the elements in an array and update the values.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing elements in an array
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to access elements in an array, we need to use their **index**. The
    index represents the position in the array. This allows us to retrieve the value
    at a certain position and assign it a new value. Let’s first talk about indexing.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding indexing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Java, arrays use zero-based indexing, which means the first element has
    an index of `0`, the second element has an index of `1`, and so on. Take a look
    at our example of the `ages` array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This means that the first element (`31`) has an index of `0` and the last element
    has an index of `4`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1 – Indexing explained with the ages array](img/B19793_06_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.1 – Indexing explained with the ages array
  prefs: []
  type: TYPE_NORMAL
- en: We count the length of an array like we normally do, starting with `1`. So,
    the length of this array would be `5`. The last element in the array has an index
    equal to the array’s length minus `1`. For an array with a length of N, the valid
    indexes are in the range of 0 to N-1.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to know how to use the index because that way we can access
    the elements in the array.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing array elements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To access an element in an array, you can use the array’s name, followed by
    the index of the desired element inside square brackets. For example, to access
    the first element of our array named `ages`, you can use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This will store the value `31` in the `age` variable. In order to access the
    second element, you’d have to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We can also access the element and store another value in the element using
    the index.
  prefs: []
  type: TYPE_NORMAL
- en: Printing arrays
  prefs: []
  type: TYPE_NORMAL
- en: 'If we print the variable holding the array, we can get something like this:
    `[I@28a418fc`'
  prefs: []
  type: TYPE_NORMAL
- en: This is not going to be very helpful. So, mind that you’re printing what the
    `toString()` method is returning. This is not customized for the array and is
    not very useful. What we most likely want to see is the elements inside the array.
    There is a way to print the content of arrays. We’ll see this when we cover the
    built-in methods for dealing with arrays.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying array elements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Modifying the elements is also done with the index. It looks a lot like assigning
    a variable as we did before. For example, to change the value of the last element
    in our array, named `ages`, we can use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We can only access elements that are there. If we try to get an element that
    is not there, we get an exception (error) message.
  prefs: []
  type: TYPE_NORMAL
- en: Working with length and bounds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To avoid getting exceptions, we need to stay within the bounds of the array.
    Indexes always start at `0`, and they end at the length of the array minus `1`.
    If you try to access an element outside this range, you’ll get `ArrayIndexOutOfBoundsException`.
    The key to avoiding this is working with the length of the array.
  prefs: []
  type: TYPE_NORMAL
- en: Determining the length of an array
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can determine the length of an array using the `length` property. The `length`
    property returns the number of elements in the array. For example, to get the
    length of our `ages` array, we can use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The length of the array starts counting at `1`. Therefore, the length of our
    `ages` array is `5`. The maximum index is `4`.
  prefs: []
  type: TYPE_NORMAL
- en: Dealing with the bounds of an array
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you try to access or modify an array element using an invalid index (an index
    that is less than 0 or greater than or equal to the array’s length), Java throws
    `ArrayIndexOutOfBoundsException`. This exception is a runtime error, which means
    it occurs when the program is running, not when we compile it. We’ll learn more
    about exceptions in [*Chapter 11*](B19793_11.xhtml#_idTextAnchor266).
  prefs: []
  type: TYPE_NORMAL
- en: 'To prevent `ArrayIndexOutOfBoundsExceptions`, we should always validate array
    indexes before using them to access or modify array elements. We can do this by
    checking whether the index is within the valid range (`0` to array length - 1).
    Here’s an example that demonstrates how to validate an array index:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This code snippet checks whether the index is within the valid range before
    accessing the array element. If the index is invalid, the program prints an error
    message instead of throwing an exception.
  prefs: []
  type: TYPE_NORMAL
- en: We can also use the loops we learned about in the previous chapter to iterate
    over the elements in an array and access or modify their values.
  prefs: []
  type: TYPE_NORMAL
- en: Iterating over arrays
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are different methods to iterate over arrays. We will have a look at the
    use of the traditional `for` loop and the enhanced `for` loop (also known as the
    `for-each` loop).
  prefs: []
  type: TYPE_NORMAL
- en: Using the for loop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can use the traditional `for` loop to iterate over an array by using an
    index variable. The loop starts at index `0` and continues until the index reaches
    the length of the array. Here’s an example that demonstrates how to use a `for`
    loop to iterate over an array and print its elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point, we know enough to revisit the example that we saw at the beginning
    of the chapter, calculating the average of several results. Instead of having
    separate primitives, we’re now going to have an array. Here is what it will look
    like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: If we now want to add a result, we only need to alter it in one place. We just
    add the result to the `results` array. Since we loop over all the elements, we
    don’t need to add an extra variable to calculate the total result. Also, since
    we use the length, we don’t need to change `3` to `4`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also use loops to modify the values of the array. Here’s an example
    that demonstrates how to double the value of each element in an array using a
    `for` loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the elements in the array are doubled in the first `for` loop.
    In the second `for` loop, they are printed. As you can tell by the output, the
    values did double!
  prefs: []
  type: TYPE_NORMAL
- en: Let’s have a look at the enhanced `for` loop and how we can use that to iterate
    over arrays.
  prefs: []
  type: TYPE_NORMAL
- en: Using the for each loop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can also the `for-each` loop, also known as the enhanced for loop, to iterate
    over arrays. This special `for` loop simplifies the process of iterating over
    arrays (and other iterable objects). The `for-each` loop automatically iterates
    over the elements in the array and does not require an index variable. Here’s
    an example that demonstrates how to use the `for-each` loop to iterate over an
    array and print its elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The `for-each` loop requires a temporary variable that is used to store the
    current element during each iteration. In our example, this is `int result`. It
    is logical to call it `result`, since it is one element in the `results` array.
    But this is not necessary for the functionality; I could have also called it `x`,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The output would have been exactly the same. I like to read the line of code
    that says `for (int x : results)` in my head like this: for every element `x`
    in `results`, do whatever is in the code block.'
  prefs: []
  type: TYPE_NORMAL
- en: So there are two ways to loop over arrays, let’s talk about which one to choose
    when.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing between the regular loop and the enhanced for loop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can use the regular `for` loop and the (enhanced) `for-each` loop to iterate
    over an array. These two approaches have some differences and there’s a reason
    for choosing one or the other.
  prefs: []
  type: TYPE_NORMAL
- en: When you need to have the index available, you should use the traditional `for`
    loop since this uses an index variable to access the elements in the array, while
    the `for-each` loop directly accesses the elements without using an index variable.
  prefs: []
  type: TYPE_NORMAL
- en: The `for-each` loop does not allow you to modify the array elements during iteration,
    as it does not provide access to the index variable. If you need to modify the
    array elements during iteration, you should use the traditional `for` loop.
  prefs: []
  type: TYPE_NORMAL
- en: If you only want to read the variables and you don’t need the index, you typically
    want to go for the `for-each` loop because the syntax is easier.
  prefs: []
  type: TYPE_NORMAL
- en: Alright, so now we know how to iterate over arrays. Let’s make the data structure
    slightly more complicated and learn about multidimensional arrays.
  prefs: []
  type: TYPE_NORMAL
- en: Handling multidimensional arrays
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **multidimensional array** is an array of arrays. In Java, you can create
    arrays with two or more dimensions. The most common type of multidimensional array
    is the two-dimensional array, also known as a matrix or a table, where the elements
    are arranged in rows and columns.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see how to create multidimensional arrays.
  prefs: []
  type: TYPE_NORMAL
- en: Declaring and initializing multidimensional arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To declare a two-dimensional array, you need to specify the data type of the
    elements, followed by two sets of square brackets (`[][]`) and the name of the
    array. Take the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Just like the one-dimensional array, we initialize a two-dimensional array
    with the use of the `new` keyword, followed by the data type and the size of each
    dimension inside the square brackets, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This code initializes a matrix of `3` rows and `4` columns. The type is `int`,
    so we know that the values of the matrix are integers.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also declare and initialize a multidimensional array in a single line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use the short syntax as well. To initialize a multidimensional array
    with specific values, we use the nested curly braces (`{}`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Just like the one-dimensional arrays, Java determines the length by the provided
    values. This matrix has three inner arrays (three rows) each with four elements
    (four columns). Accessing and modifying the elements in a multidimensional array
    is similar, but we now need to provide two indices.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing and modifying elements of multidimensional arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To access or modify the elements of a multidimensional array, you need to specify
    the indexes of each dimension inside square brackets. For example, to access the
    element in the first row and second column of a two-dimensional array named `matrix`,
    you can use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'To modify the same element, you can use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '*Figure 6**.2* shows how the indexing works for our two-dimensional array,
    `matrix`.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2 – The index of the rows and columns for array matrix](img/B19793_06_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.2 – The index of the rows and columns for array matrix
  prefs: []
  type: TYPE_NORMAL
- en: 'So, if we want to get to the element with value `12` and store it in a `last`
    variable, our code will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: We can also iterate over all the variables in a multidimensional array. Let’s
    see how that is done.
  prefs: []
  type: TYPE_NORMAL
- en: Iterating over multidimensional arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Since a multidimensional array is just an array in an array, we can use nested
    loops to iterate over multidimensional arrays. Here’s an example that demonstrates
    how we can use a nested `for` loop to iterate over a two-dimensional array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'All we do at this point is just print the element. This is something we can
    also do with the enhanced `for` loop to iterate over multidimensional arrays.
    Here’s an example that demonstrates how to do that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be the same as in the previous example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the outer `for-each` loop iterates over the rows of the two-dimensional
    array. The row is an array itself as well, which is why the type is `int[]`. The
    inner `for-each` loop iterates over the elements within each row. These are integers.
  prefs: []
  type: TYPE_NORMAL
- en: Both traditional nested `for` loops and nested `for-each` loops can be used
    to iterate over multidimensional arrays. It’s a matter of preference and whether
    you need to access the index of the elements.
  prefs: []
  type: TYPE_NORMAL
- en: Arrays can go very many levels deep, but that doesn’t really change the basic
    principles. For example, for a four-dimensional array, you’ll have `[][][][]`
    behind the type and you need a nested loop of four levels to iterate over all
    the elements.
  prefs: []
  type: TYPE_NORMAL
- en: Java helps us deal with arrays in different ways. Let’s look at some built-in
    methods for arrays that we can use.
  prefs: []
  type: TYPE_NORMAL
- en: Using Java’s built-in methods for arrays
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Working with arrays is very common. Usually, for very common things, Java has
    built-in functionality. We can do many common things we’d like to do with arrays
    with the use of the methods on the built-in `Arrays` class.
  prefs: []
  type: TYPE_NORMAL
- en: Built-in Arrays class for working with arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The built-in `Arrays` class is a helper class in the `java.util` package. It
    offers many utility methods to help us efficiently work with arrays. We’ll explore
    some common array manipulation tasks using the `Arrays` class.
  prefs: []
  type: TYPE_NORMAL
- en: The toString() method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A highly useful operation you may want to perform on an array is to convert
    it into a `String`, which can be invaluable for debugging and logging purposes.
    To achieve this, the `Arrays` class offers a dedicated method called `toString()`.
    It’s important to note that this method is static, allowing us to call it directly
    on the `Arrays` class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the `results` array is converted to a string that represents
    the array’s elements, enclosed by square brackets and separated by commas. There
    are many such methods on the `Arrays` class! Let’s explore the `sort` method next.
  prefs: []
  type: TYPE_NORMAL
- en: The sort() method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A common operation you want to do on an array is to sort the array. Here’s
    an example that shows how to sort the values of an array with the `sort` method
    from the `Arrays` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the `results` array is unsorted at first. We can call the methods
    on the `Arrays` class directly on the `Arrays` class because they’re static. For
    integer values, it sorts them from low to high by default. We can alter this behavior,
    but we don’t have the knowledge we need to do that just yet.
  prefs: []
  type: TYPE_NORMAL
- en: We print the array with another built-in method, namely `toString`. This translates
    the array into something that we can understand.
  prefs: []
  type: TYPE_NORMAL
- en: When the array is sorted, we can use the `binarySearch` method to find a value.
  prefs: []
  type: TYPE_NORMAL
- en: The binarySearch() method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can also search for a value in an array. We are going to use the built-in
    `binarySearch` method to do this. Very importantly, this can only be done with
    sorted arrays because of how the search algorithm works. Here’s an example of
    how to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The `binarySearch` method requires the input array to be sorted beforehand.
    The `binarySearch` algorithm is meant for finding a target value within a sorted
    array. Instead of searching the array element by element, it divides the array
    into halves repeatedly until it finds the target or the remaining portion to search
    becomes empty. When the value at the half is bigger, it knows it needs to move
    towards the left side of the array, when it’s smaller it knows it needs to move
    towards the right. That’s why it’s a must that the array is sorted. The `binarySearch`
    method returns the index of the target value if found. If the target wasn’t found,
    it returns a negative value, which represents the insertion point. So, say we
    updated our code to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'This would result in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: This is because it would have been at the fourth position in the array (not
    the fourth index!).
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see how we can give all the elements in the array a specific value with
    the `fill` method.
  prefs: []
  type: TYPE_NORMAL
- en: The fill() method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Sometimes, you want to create an array of the same values programmatically.
    Here’s an example of how this can be done. We use the `fill` method from the `Arrays`
    class. Here’s how to do it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The `fill` method sets all elements in the array to the specified value. Sometimes
    we need to create a copy of our array or resize it. In that case, we can use the
    `copyOf` method.
  prefs: []
  type: TYPE_NORMAL
- en: The copyOf() method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sometimes you need to create a copy of an array, for example, when you want
    to end it to another location in the application, but you don’t want this to affect
    your original array.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is an example of how we can create a copy of an array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'We can prove we copied the array with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'If we didn’t create a copy but just stored it in another variable instead,
    it would alter both arrays. The preceding code snippet will give the following
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'But say we have this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'It will give us this output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, this alters both the variables holding the array. This is because
    both variables, `copiedResults` and `results`, have the same array object that
    they’re pointing to. So, if you change it in one place, it changes for both. That’s
    why you sometimes need to create copies of arrays.
  prefs: []
  type: TYPE_NORMAL
- en: So, the `copyOf` method creates a new array with the same elements as the original
    array, whereas this second method just creates a new variable that points to the
    same array object. We can also use it to resize the array by passing in a second
    argument.
  prefs: []
  type: TYPE_NORMAL
- en: Resizing arrays with copyOf()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Arrays have a fixed size, but sometimes you need to alter the size nonetheless.
    The `Arrays.copyOf()` method that we just saw is also useful for resizing arrays.
    To resize an array, you can create a new array with the desired size and copy
    the elements from the original array to the new array. All you need to do is give
    it a second argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example that demonstrates how to resize:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we resized `originalArray`, which had a length of `5`, to a
    new length of `7`. The new array contains the elements of the original array,
    followed by default values (`0` for `int`) to fill the remaining positions.
  prefs: []
  type: TYPE_NORMAL
- en: This is not something you should be doing constantly. It can be inefficient
    in terms of performance. If you would need to resize your array a lot, it’s worth
    having a look at [*Chapter 13*](B19793_13.xhtml#_idTextAnchor317) where we learn
    about **collections**.
  prefs: []
  type: TYPE_NORMAL
- en: The equals() method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The last built-in method we’re going to discuss is the `equals()` method. This
    method can determine whether two arrays have the same values. With this built-in
    method, you can compare two arrays for equality. Here’s how to go about it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: The `equals()` method compares two arrays element by element to check whether
    they have the same values in the same order. It returns `true` if the arrays are
    equal; otherwise, it returns `false`.
  prefs: []
  type: TYPE_NORMAL
- en: Well done!
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ve done a great job learning arrays! At this point, you’re ready to understand
    this programming joke:'
  prefs: []
  type: TYPE_NORMAL
- en: Why did the Java developer quit their job?
  prefs: []
  type: TYPE_NORMAL
- en: Because they couldn’t get “arrays!”
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Arrays are incredibly useful for storing and managing similar types of data,
    such as a list of dinosaur names, dinosaur weights, and visitors’ favorite snacks.
    Arrays are helpful and they enable us to manage more complex data in Mesozoic
    Eden. Try out the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The unique appeal of our park lies in the diversity of our dinosaur species.
    (And also in that we have dinosaurs at all.) Create an array that holds the names
    of all the dinosaur species in the park. This list will help us in inventory management.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Every visitor has their favorite dinosaur, and for many, it’s the heaviest one.
    Write a program that finds this star’s weight in an array of dinosaur weights.
    This information can then be highlighted in our park tours and educational programs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Dinosaurs come in all sizes, and the smallest ones hold a special place in the
    hearts of children. Write a program that finds this smallest dinosaur in an array
    of dinosaur weights.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Running a dinosaur park is not a one-man show and requires a dedicated team
    of employees. Create an array of park employee names and print out the names using
    an enhanced `for` loop. This will help us to appreciate and manage our staff more
    effectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To ensure the well-being of our dinosaur inhabitants, it’s essential to monitor
    their average age. This data can help inform our care and feeding programs to
    better suit the age profile of our dinosaurs. Write a program that calculates
    this using an array of dinosaur ages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our park is meticulously divided into various sections to facilitate visitor
    navigation and dinosaur housing. Create a two-dimensional array representing the
    park map, with each cell containing an array of Strings indicating an enclosure
    or facility for a certain section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The enjoyment of a park tour depends significantly on comfortable seating arrangements.
    Use nested loops to print out a seating chart for a park tour bus from a two-dimensional
    array. This will help us ensure that every guest has a pleasant journey throughout
    the park.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Project – Dino tracker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Safety always comes first. That’s why keeping track of all our dinosaur residents
    is of utmost importance. The park managers need to have an easy-to-use system
    for managing information about their slightly exotic pets.
  prefs: []
  type: TYPE_NORMAL
- en: For this project, you’ll be creating a Dino tracker. This is a simple tracking
    system that maintains records of each dinosaur’s name, age, species, and enclosure
    number. This will be done using fixed arrays – four arrays in total, one for each
    attribute.
  prefs: []
  type: TYPE_NORMAL
- en: Assume you have room for 10 dinosaurs in your park for now, so each array should
    have a length of 10\. Each dinosaur will correspond to an index in the array.
    For example, if the dinosaur “Rex” is in the first position of the name array,
    his age, species, and enclosure number will also be in the first position of their
    respective arrays.
  prefs: []
  type: TYPE_NORMAL
- en: You’re going to print information about all the dinosaurs and print their average
    age and weight after that.
  prefs: []
  type: TYPE_NORMAL
- en: 'I realize this might be a lot. If you need some extra guidance, here are some
    steps to guide you through the process:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dinoNames`, `dinoAges`, `dinoSpecies`, and `dinoEnclosures`. Each should have
    a size of 10.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Dinosaur1`, `Dinosaur2`, and so on as names.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Displaying details**: Write a loop that goes through the arrays and prints
    out the details of each dinosaur in a readable format.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`dinoAges` array and divide by the number of dinosaurs. And, of course, this
    process is similar for weight, but using the weight array.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have explored arrays in Java. Arrays are data structures
    that allow us to store multiple values of the same data type in a contiguous block
    of memory. They provide an efficient way to organize lists of data.
  prefs: []
  type: TYPE_NORMAL
- en: We began by discussing the declaration and initialization of arrays. We learned
    about different ways to declare and initialize arrays, including using the shortcut
    syntax for array initialization. We also covered how to initialize arrays with
    default values.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we discussed how to access and modify array elements using indexes.
    We learned about the importance of the array length and that we can find out the
    length by using the `length` property. We also talked about avoiding `ArrayIndexOutOfBoundsExceptions`
    by validating array indexes.
  prefs: []
  type: TYPE_NORMAL
- en: We then looked at iterating over arrays using both the traditional `for` loop
    and the enhanced `for` loop (the `for-each` loop).
  prefs: []
  type: TYPE_NORMAL
- en: After this, we explored multidimensional arrays, which are arrays of arrays,
    and learned how to declare, initialize, and access their elements. We also discussed
    how to iterate over multidimensional arrays.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we covered common array operations with the use of the `Arrays` class
    and its built-in methods. We saw how to sort arrays, search for elements in a
    sorted array, fill an array with a specific value, copy and resize an array, and
    compare arrays.
  prefs: []
  type: TYPE_NORMAL
- en: By mastering these concepts, you now have a solid foundation for working with
    arrays in Java. This understanding will help you store and manipulate data more
    efficiently in your Java programs. We ended by looking at some built-in methods.
    In the next chapter, you’re going to learn how to write your own methods.
  prefs: []
  type: TYPE_NORMAL
