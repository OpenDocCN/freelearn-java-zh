["```java\nuid=admin1,ou=users,dc=example,dc=com\n```", "```java\n//build.gradle\ndependencies {\n...\n// LDAP\n    implementation 'org.springframework.security:spring-security-ldap'\n...\n}\n```", "```java\n//build.gradle\ndependencies {\n...\n// LDAP\n    implementation 'com.unboundid:unboundid-ldapsdk'\n...\n}\n```", "```java\nspring:\n   ldap:\n     base: dc=jbcpcalendar,dc=com\n     embedded:\n       ldif: classpath:/ldif/calendar.ldif\n       baseDn: ${spring.ldap.base}\n       port: 33389\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n@Bean\nAuthenticationManager authenticationManager(BaseLdapPathContextSource contextSource, LdapAuthoritiesPopulator authorities) {\n    LdapBindAuthenticationManagerFactory factory = new LdapBindAuthenticationManagerFactory(contextSource);\n    factory.setUserSearchBase(\"\");\n    factory.setUserSearchFilter(\"(uid={0})\");\n    factory.setLdapAuthoritiesPopulator(authorities);\n    return factory.createAuthenticationManager();\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n@Bean\nLdapAuthoritiesPopulator authorities(BaseLdapPathContextSource contextSource) {\n    String groupSearchBase = \"ou=Groups\";\n    DefaultLdapAuthoritiesPopulator authorities =\n          new DefaultLdapAuthoritiesPopulator(contextSource, groupSearchBase);\n    authorities.setGroupSearchFilter(\"(uniqueMember={0})\");\n    return authorities;\n}\n```", "```java\nforeach group in groups:\nauthority = (\"ROLE_\"+group).upperCase()\ngrantedAuthority = new GrantedAuthority(authority)\n```", "```java\n@Bean\nAuthenticationManager authenticationManager(BaseLdapPathContextSource contextSource, LdapAuthoritiesPopulator authorities) {\n    LdapPasswordComparisonAuthenticationManagerFactory factory = new LdapPasswordComparisonAuthenticationManagerFactory(\n          contextSource, new LdapShaPasswordEncoder());\n    factory.setUserSearchBase(\"\");\n    factory.setUserSearchFilter(\"(uid={0})\");\n    factory.setLdapAuthoritiesPopulator(authorities);\n    factory.setPasswordAttribute(\"userPassword\");\n    return factory.createAuthenticationManager();\n}\n```", "```java\n{SHA}5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n@Bean\nLdapAuthoritiesPopulator authorities(BaseLdapPathContextSource contextSource) {\n    String groupSearchBase = \"ou=Groups\";\n    DefaultLdapAuthoritiesPopulator authorities =\n          new DefaultLdapAuthoritiesPopulator(contextSource, groupSearchBase);\n    authorities.setGroupSearchFilter(\"(uniqueMember={0})\");\n    return authorities;\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/web/controllers/AccountControll er.java\n@Controller\npublic class AccountController {\n    @RequestMapping(\"/accounts/my\")\n    public String view(Model model) {\n        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n        if(authentication == null) {\n            throw new IllegalStateException(\"authentication cannot be null. Make sure you are logged in.\");\n        }\n        Object principal = authentication.getPrincipal();\n        model.addAttribute(\"user\", principal);\n        model.addAttribute(\"isLdapUserDetails\", principal instanceof LdapUserDetails);\n        model.addAttribute(\"isLdapPerson\", principal instanceof Person);\n        model.addAttribute(\"isLdapInetOrgPerson\", principal instanceof InetOrgPerson);\n        return \"accounts/show\";\n    }\n}\n```", "```java\n//src/main/resources/templates/accounts/show.xhtml\n<dl>\n    <dt>Username</dt>\n    <dd id=\"username\" th:text=\"${user.username}\">ChuckNorris</dd>\n    <dd>&nbsp;</dd>\n    <dt>DN</dt>\n    <dd id=\"dn\" th:text=\"${user.dn}\"></dd>\n    <dd>&nbsp;</dd>\n    <span th:if=\"${isLdapPerson}\">\n        <dt>Description</dt>\n        <dd id=\"description\" th:text=\"${user.description}\"></dd>\n        <dd>&nbsp;</dd>\n        <dt>Telephone</dt>\n        <dd id=\"telephoneNumber\" th:text=\"${user.telephoneNumber}\"></dd>\n        <dd>&nbsp;</dd>\n        <dt>Full Name(s)</dt>\n        <span th:each=\"cn : ${user.cn}\">\n            <dd th:text=\"${cn}\"></dd>\n        </span>\n        <dd>&nbsp;</dd>\n    </span>\n    <span th:if=\"${isLdapInetOrgPerson}\">\n        <dt>Email</dt>\n        <dd id=\"email\" th:text=\"${user.mail}\"></dd>\n        <dd>&nbsp;</dd>\n        <dt>Street</dt>\n        <dd id=\"street\" th:text=\"${user.street}\"></dd>\n        <dd>&nbsp;</dd>\n    </span>\n</dl>\n```", "```java\n//src/main/resources/templates/fragments/header.xhtml\n<li class=\"nav-item\">\n    <a class=\"nav-link\" th:href=\"@{/accounts/my}\">Welcome <span class=\"navbar-text\"\n                                      th:text=\"${#authentication.name}\"></span></a>\n</li>\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n@Bean\nAuthenticationManager authenticationManager(BaseLdapPathContextSource contextSource, LdapAuthoritiesPopulator authorities) {\n    LdapPasswordComparisonAuthenticationManagerFactory factory = new LdapPasswordComparisonAuthenticationManagerFactory(\n          contextSource, new LdapShaPasswordEncoder());\n    factory.setUserSearchBase(\"\");\n    factory.setUserDetailsContextMapper(new InetOrgPersonContextMapper());\n    factory.setUserSearchFilter(\"(uid={0})\");\n    factory.setLdapAuthoritiesPopulator(authorities);\n    factory.setPasswordAttribute(\"telephoneNumber\");\n    return factory.createAuthenticationManager();\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n@Bean\nAuthenticationManager authenticationManager(BaseLdapPathContextSource contextSource, LdapAuthoritiesPopulator authorities) {\n    LdapBindAuthenticationManagerFactory factory = new LdapBindAuthenticationManagerFactory(contextSource);\n    factory.setUserSearchBase(\"\");\n    factory.setUserSearchFilter(\"(uid={0})\");\n    factory.setLdapAuthoritiesPopulator(authorities);\n    factory.setUserDetailsContextMapper(new InetOrgPersonContextMapper());\n    return factory.createAuthenticationManager();\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n@Bean\npublic UserDetailsService userDetailsService(BaseLdapPathContextSource contextSource, LdapAuthoritiesPopulator authorities) {\n    return new LdapUserDetailsService(new FilterBasedLdapUserSearch(\"\", \"(uid={0})\", contextSource), authorities);\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/web/controllers/AccountControll er.java\n@Controller\npublic class AccountController {\n    private final UserDetailsService userDetailsService;\n    public AccountController(UserDetailsService userDetailsService) {\n       if (userDetailsService == null) {\n          throw new IllegalArgumentException(\"userDetailsService cannot be null\");\n       }\n       this.userDetailsService = userDetailsService;\n    }\n    @RequestMapping(\"/accounts/my\")\n    public String view(Model model) {\n       Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n       if(authentication == null) {\n          throw new IllegalStateException(\"authentication cannot be null. Make sure you are logged in.\");\n       }\n       Object principal = userDetailsService.loadUserByUsername(authentication.getName());\n       model.addAttribute(\"user\", principal);\n       model.addAttribute(\"isLdapUserDetails\", principal instanceof LdapUserDetails);\n       model.addAttribute(\"isLdapPerson\", principal instanceof Person);\n       model.addAttribute(\"isLdapInetOrgPerson\", principal instanceof InetOrgPerson);\n       return \"accounts/show\";\n    }\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n@Bean\nAuthenticationManager authenticationManager(LdapAuthoritiesPopulator authorities) {\n    BaseLdapPathContextSource contextSource=  new DefaultSpringSecurityContextSource(\n          List.of(\"ldap://localhost:\" + LDAP_PORT + \"/\"), \"dc=jbcpcalendar,dc=com\"){{\n       setUserDn(\"uid=admin,ou=system\");\n       setPassword(\"secret\");\n    }};\n    LdapPasswordComparisonAuthenticationManagerFactory factory = new LdapPasswordComparisonAuthenticationManagerFactory(\n          contextSource, new LdapShaPasswordEncoder());\n    factory.setUserSearchBase(\"\");\n    factory.setUserDetailsContextMapper(new InetOrgPersonContextMapper());\n    factory.setUserSearchFilter(\"(uid={0})\");\n    factory.setLdapAuthoritiesPopulator(authorities);\n    factory.setPasswordAttribute(\"userPassword\");\n    return factory.createAuthenticationManager();\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\nprivate BaseLdapPathContextSource getDefaultSpringSecurityContextSource () {\n    DefaultSpringSecurityContextSource defaultSpringSecurityContextSource =     new DefaultSpringSecurityContextSource(\n          List.of(\"ldap://localhost:\" + LDAP_PORT), \"dc=jbcpcalendar,dc=com\");\n    defaultSpringSecurityContextSource.setUserDn(\"uid=admin,ou=system\");\n    defaultSpringSecurityContextSource.setPassword(\"secret\");\n    defaultSpringSecurityContextSource.afterPropertiesSet();\n    return defaultSpringSecurityContextSource;\n}\n@Bean\nLdapAuthoritiesPopulator authorities() {\n    String groupSearchBase = \"ou=Groups\";\n    DefaultLdapAuthoritiesPopulator authorities =\n          new DefaultLdapAuthoritiesPopulator(this.getDefaultSpringSecurityContextSource(), groupSearchBase);\n    authorities.setGroupSearchFilter(\"(uniqueMember={0})\");\n    return authorities;\n}\n@Bean\nAuthenticationManager authenticationManager(LdapAuthoritiesPopulator authorities) {\n    LdapPasswordComparisonAuthenticationManagerFactory factory = new LdapPasswordComparisonAuthenticationManagerFactory(\n          this.getDefaultSpringSecurityContextSource(), new LdapShaPasswordEncoder());\n    factory.setUserSearchBase(\"\");\n    factory.setUserDetailsContextMapper(new InetOrgPersonContextMapper());\n    factory.setUserSearchFilter(\"(uid={0})\");\n    factory.setLdapAuthoritiesPopulator(authorities);\n    factory.setPasswordAttribute(\"userPassword\");\n    return factory.createAuthenticationManager();\n}\n@Bean\npublic UserDetailsService userDetailsService(LdapAuthoritiesPopulator authorities) {\n    return new LdapUserDetailsService(new FilterBasedLdapUserSearch(\"\", \"(uid={0})\", this.getDefaultSpringSecurityContextSource()), authorities);\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n@Bean\npublic DefaultSpringSecurityContextSource contextSource() {\n    DefaultSpringSecurityContextSource defaultSpringSecurityContextSource =     new DefaultSpringSecurityContextSource(\n          List.of(\"ldap://localhost:\" + LDAP_PORT), \"dc=jbcpcalendar,dc=com\");\n    defaultSpringSecurityContextSource.setUserDn(\"uid=admin,ou=system\");\n    defaultSpringSecurityContextSource.setPassword(\"secret\");\n    return defaultSpringSecurityContextSource;\n}\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/ SecurityConfig.java\n    @Bean\n    public BindAuthenticator bindAuthenticator(FilterBasedLdapUserSearch userSearch, BaseLdapPathContextSource contextSource){\n        BindAuthenticator bindAuthenticator = new BindAuthenticator(contextSource);\n        bindAuthenticator.setUserSearch(userSearch);\n        return bindAuthenticator;\n    }\n    @Bean\n    public FilterBasedLdapUserSearch filterBasedLdapUserSearch(BaseLdapPathContextSource contextSource){\n        return new FilterBasedLdapUserSearch(\"\", //user-search-base\n              \"(uid={0})\", //user-search-filter\n              contextSource); //ldapServer\n    }\n    ```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/ SecurityConfig.java\n    @Bean\n    public LdapAuthoritiesPopulator authoritiesPopulator(BaseLdapPathContextSource contextSource){\n        DefaultLdapAuthoritiesPopulator defaultLdapAuthoritiesPopulator = new DefaultLdapAuthoritiesPopulator(contextSource,\"ou=Groups\");\n        defaultLdapAuthoritiesPopulator.setGroupSearchFilter(\"(uniqueMember={0})\");\n        return defaultLdapAuthoritiesPopulator;\n    }\n    @Bean\n    public UserDetailsContextMapper userDetailsContextMapper(){\n        return new InetOrgPersonContextMapper();\n    }\n    ```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/ SecurityConfig.java\n    @Bean\n    public UserDetailsService userDetailsService(FilterBasedLdapUserSearch filterBasedLdapUserSearch,\n           LdapAuthoritiesPopulator authoritiesPopulator, UserDetailsContextMapper userDetailsContextMapper) {\n        LdapUserDetailsService ldapUserDetailsService = new LdapUserDetailsService(filterBasedLdapUserSearch, authoritiesPopulator);\n        ldapUserDetailsService.setUserDetailsMapper(userDetailsContextMapper);\n        return ldapUserDetailsService;\n    }\n    ```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n@Bean\npublic BindAuthenticator bindAuthenticator(FilterBasedLdapUserSearch userSearch, BaseLdapPathContextSource contextSource){\n    BindAuthenticator bindAuthenticator = new BindAuthenticator(contextSource);\n    bindAuthenticator.setUserSearch(userSearch);\n    return bindAuthenticator;\n}\n@Bean\npublic FilterBasedLdapUserSearch filterBasedLdapUserSearch(BaseLdapPathContextSource contextSource){\n    return new FilterBasedLdapUserSearch(\"\", //user-search-base\n          \"(uid={0})\", //user-search-filter\n          contextSource); //ldapServer\n}\n@Bean\npublic LdapAuthoritiesPopulator authoritiesPopulator(UserDetailsService userDetailsService){\n    return new UserDetailsServiceLdapAuthoritiesPopulator(userDetailsService);\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n@Bean\npublic UserDetailsManager userDetailsService() {\n    InMemoryUserDetailsManager manager = new InMemoryUserDetailsManager();\n    manager.createUser(User.withUsername(\"user1@example.com\").password(\"user1\").roles(\"USER\").build());\n    manager.createUser(User.withUsername(\"admin1@example.com\").password(\"admin1\").roles(\"USER\", \"ADMIN\").build());\n    return manager;\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/ SecurityConfig.java\n@Bean\npublic LdapAuthenticationProvider authenticationProvider(BindAuthenticator ba,\n       LdapAuthoritiesPopulator lap,\n       UserDetailsContextMapper cm){\n    LdapAuthenticationProvider ldapAuthenticationProvider =  new LdapAuthenticationProvider(ba, lap);\n    ldapAuthenticationProvider.setUserDetailsContextMapper(cm);\n    return ldapAuthenticationProvider;\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/web/controllers/AccountController.java\n@Controller\npublic class AccountController {\n    @RequestMapping(\"/accounts/my\")\n    public String view(Model model) {\n       Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n       if(authentication == null) {\n          throw new IllegalStateException(\"authentication cannot be null. Make sure you are logged in.\");\n       }\n       Object principal = authentication.getPrincipal();\n       model.addAttribute(\"user\", principal);\n       model.addAttribute(\"isLdapUserDetails\", principal instanceof LdapUserDetails);\n       model.addAttribute(\"isLdapPerson\", principal instanceof Person);\n       model.addAttribute(\"isLdapInetOrgPerson\", principal instanceof InetOrgPerson);\n       return \"accounts/show\";\n    }\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n@Bean\npublic AuthenticationProvider authenticationProvider(){\n    ActiveDirectoryLdapAuthenticationProvider ap = new ActiveDirectoryLdapAuthenticationProvider(\n          \"corp.jbcpcalendar.com\",\n          \"ldap://corp.jbcpcalendar.com\");\n    ap.setConvertSubErrorCodesToExceptions(true);\n    return ap;\n}\n@Bean\npublic DefaultSpringSecurityContextSource contextSource() {\n    DefaultSpringSecurityContextSource defaultSpringSecurityContextSource =     new DefaultSpringSecurityContextSource(\n          List.of(\"ldap://corp.jbcpcalendar.com\"), \"dc=corp,dc=jbcpcalendar,dc=com\");\n    defaultSpringSecurityContextSource.setUserDn(\"CN=bnl,CN=Users,DC=corp,DC=jbcpcalendar,DC=com\");\n    defaultSpringSecurityContextSource.setPassword(\"admin123!\");\n    return defaultSpringSecurityContextSource;\n}\n@Bean\npublic FilterBasedLdapUserSearch filterBasedLdapUserSearch(BaseLdapPathContextSource contextSource) {\n    return new FilterBasedLdapUserSearch(\"CN=Users\", //user-search-base\n          \"(sAMAccountName={0})\", //user-search-filter\n          contextSource); //ldapServer\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.ja\n@Bean\npublic AuthenticationProvider authenticationProvider(){\n    ActiveDirectoryLdapAuthenticationProvider ap = new ActiveDirectoryLdapAuthenticationProvider(\n          \"corp.jbcpcalendar.com\",\n          \"ldap://corp.jbcpcalendar.com\");\n    ap.setConvertSubErrorCodesToExceptions(true);\n    return ap;\n}\n```"]