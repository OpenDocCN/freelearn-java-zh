- en: '15'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '15'
- en: Jakarta Faces Application
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jakarta Faces 应用
- en: Jakarta Faces, now just called Faces, is one of two client rendering techniques
    available in web applications. The other is **Jakarta Server Pages** (**JSP**).
    In this chapter, we will examine a Faces web application that, like our Swing
    and JavaFX examples, allows you to perform three common finance calculations.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Jakarta Faces，现在简称 Faces，是网络应用中两种客户端渲染技术之一。另一种是**Jakarta Server Pages**（**JSP**）。在本章中，我们将检查一个
    Faces 网络应用，就像我们的 Swing 和 JavaFX 示例一样，允许你执行三个常见的财务计算。
- en: The JSP rendering approach permits the placement of Java source code on an HTML
    page. Before a JSP page can be rendered, the file is converted into a servlet
    by the application server. If you have 50 JSP pages, then there will be 50 servlets
    on the application server. The typical approach in designing an application is
    to use JSP for rendering by mixing standard HTML, expression language code to
    access data or call Java methods, and Java source code. These files end with a
    `.jsp` extension. While you can do processing on the page, the common approach
    is to have a JSP page call upon a servlet for processing and to decide which JSP
    page to return to the browser.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: JSP 渲染方法允许在 HTML 页面上放置 Java 源代码。在 JSP 页面可以渲染之前，该文件由应用服务器转换为 servlet。如果你有 50
    个 JSP 页面，那么应用服务器上将有 50 个 servlets。在应用设计中的典型方法是用 JSP 进行渲染，通过混合标准 HTML、表达式语言代码来访问数据或调用
    Java 方法，以及 Java 源代码。这些文件以 `.jsp` 扩展名结尾。虽然你可以在页面上进行处理，但常见的方法是让 JSP 页面调用 servlet
    进行处理，并决定将哪个 JSP 页面返回给浏览器。
- en: The Faces approach is quite different. First off, the framework provides the
    Faces servlet. All requests for a `.jsf` page are processed by this servlet. While
    a JSP application is usually a combination of `.jsp` pages and servlets, a Faces
    application does not require any servlets, though they can be used. In the place
    of servlets, Faces allows you to use a `Calculations` and `FinanceBean` classes
    from [*Chapter 13*](B19088_13.xhtml#_idTextAnchor254), *Desktop Graphical User
    Interface Coding with Swing and JavaFX*, by adding some annotations to the code.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Faces 方法相当不同。首先，框架提供了 Faces servlet。所有对 `.jsf` 页面的请求都由这个 servlet 处理。虽然 JSP 应用通常是
    `.jsp` 页面和 servlets 的组合，但 Faces 应用不需要任何 servlets，尽管它们也可以使用。在 servlets 的位置，Faces
    允许你通过在代码中添加一些注解来使用来自 [*第 13 章*](B19088_13.xhtml#_idTextAnchor254)，《使用 Swing 和
    JavaFX 编写桌面图形用户界面编码》，的 `Calculations` 和 `FinanceBean` 类。
- en: A Faces page contains Facelets along with any standard HTML tag. Facelets is
    the `pom` file. See the *Further reading* section for examples of these third-party
    libraries.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 Faces 页面包含 Facelets 以及任何标准 HTML 标签。Facelets 是 `pom` 文件。请参阅 *进一步阅读* 部分以获取这些第三方库的示例。
- en: We will interact with most objects by employing `new`. Instead, the CDI framework
    instantiates an object upon first use and determines whether it needs to be garbage
    collected or not. We can also use `if` statement.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过使用 `new` 来与大多数对象交互。相反，CDI 框架在首次使用时实例化一个对象，并确定是否需要垃圾回收。我们也可以使用 `if` 语句。
- en: 'This chapter will now take you through how our Financial Calculator is written
    using Faces, CDI, and BV. We will examine the following topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章现在将带你了解我们的金融计算器是如何使用 Faces、CDI 和 BV 编写的。我们将探讨以下主题：
- en: Configuring a Faces application
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 Faces 应用
- en: Creating an object managed by CDI and validated with BV
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建由 CDI 管理并通过 BV 验证的对象
- en: Using XHTML, Facelets, and Jakarta Expression Language for rendering pages
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 XHTML、Facelets 和 Jakarta 表达语言渲染页面
- en: Understanding the life cycle of a Faces page
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 Faces 页面的生命周期
- en: By the end of this chapter, you will understand how a Faces web application
    is constructed. With this knowledge, you will be able to evaluate other web application
    frameworks, such as Spring and Vaadin.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将了解如何构建 Faces 网络应用。有了这些知识，你将能够评估其他网络应用框架，如 Spring 和 Vaadin。
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For this chapter, you’ll need the following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，你需要以下内容：
- en: Java 17
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 17
- en: A text editor
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本编辑器
- en: Maven 3.8.6 or a newer version installed
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Maven 3.8.6 或更高版本
- en: GlassFish 7.0 application server
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GlassFish 7.0 应用服务器
- en: Web browser
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络浏览器
- en: Sample code for this chapter is available at [https://github.com/PacktPublishing/Transitioning-to-Java/tree/chapter15](https://github.com/PacktPublishing/Transitioning-to-Java/tree/chapter15).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的示例代码可在 [https://github.com/PacktPublishing/Transitioning-to-Java/tree/chapter15](https://github.com/PacktPublishing/Transitioning-to-Java/tree/chapter15)
    找到。
- en: Configuring a Faces application
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 Faces 应用
- en: 'Here is what the web version of the Financial Calculator app looks like:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这是金融计算器应用的网页版本看起来是这样的：
- en: '![Figure 15.1 – The Financial Calculator web page](img/B19088_15_01.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图15.1 – 财务计算器网页](img/B19088_15_01.jpg)'
- en: Figure 15.1 – The Financial Calculator web page
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.1 – 财务计算器网页
- en: 'Configuring a Faces project begins with the same setup as any basic web application,
    such as what we saw in the previous chapter. The Maven folder setup is identical.
    In the `WEB-INF` folder, we have three required XML configuration files and one
    that is optional. Let us begin with `beans.xml`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 配置Faces项目开始于任何基本Web应用程序相同的设置，例如我们在上一章中看到的。Maven文件夹设置是相同的。在`WEB-INF`文件夹中，我们有三个必需的XML配置文件和一个可选的。让我们从`beans.xml`开始：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This looks strange because there is only one tag, `beans`. Before the widespread
    usage of annotations, listing every bean or class was necessary to enable CDI.
    The `bean-discovery-mode` tag defines any bean with a CDI annotation is now subject
    to the CDI. Prior to Jakarta EE 10, the discovery mode to use was `all`. The current
    best practice is to use `annotated` rather than `all`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来很奇怪，因为只有一个标签`beans`。在注解广泛使用之前，列出每个bean或类是必要的，以便启用CDI。`bean-discovery-mode`标签定义了任何带有CDI注解的bean现在都受CDI的影响。在Jakarta
    EE 10之前，要使用的发现模式是`all`。当前的最好实践是使用`annotated`而不是`all`。
- en: 'The next configuration file is `faces-config.xml`. In this file, you can define
    application properties. Some of these properties can be navigation rules to determine
    to which page should a submit request go next, bean objects that should be instantiated,
    and message bundles for i18n support. In this example, we are only using this
    file to define the message bundle for this application:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个配置文件是`faces-config.xml`。在此文件中，您可以定义应用程序属性。其中一些属性可以是导航规则，以确定提交请求应转到哪个页面，需要实例化的bean对象，以及用于i18n支持的消息包。在此示例中，我们只使用此文件来定义此应用程序的消息包：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can see in `base-name` the package and base file name for the message bundles.
    Under `var` you can see the name of the identifier we can use on a Faces XHTML
    page. Bundles in Faces are identical to how we created resource bundles that are
    configured for desktop applications with a key followed by a value. To refer to
    a value from a message bundle, we use expression language such as `#{msgs.result}`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`base-name`中看到消息包的包和基本文件名。在`var`下，您可以看到我们可以在Faces XHTML页面中使用的标识符的名称。Faces中的包与我们为桌面应用程序配置的资源包的方式相同，后面跟着一个键和一个值。要引用消息包中的值，我们使用表达式语言，如`#{msgs.result}`。
- en: The last required configuration file is the `web.xml` file. It can fulfill the
    same responsibilities as we saw in the previous chapter. In addition, we can modify
    how Faces performs. For simplicity, I have removed the opening and closing tags
    as they are identical to the previous chapter’s version.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 最后必需的配置文件是`web.xml`文件。它可以承担我们在上一章中看到的相同职责。此外，我们还可以修改Faces的执行方式。为了简单起见，我已经删除了开闭标签，因为它们与上一章的版本相同。
- en: 'The first param, `PROJECT_STAGE`, configures the framework error handling.
    Using the `Development` error messages carries more information than a small code
    of slower performance. Typically, you will change this to `Production` when the
    code is complete:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数`PROJECT_STAGE`配置框架错误处理。使用`Development`错误消息比小段代码和较慢的性能携带更多信息。通常，代码完成后，你会将其更改为`Production`：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The next param determines whether comments in the Faces page will be in the
    HTML sent to the browser or not:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个参数确定Faces页面中的注释是否在发送到浏览器的HTML中：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The server will destroy a session object and send it for garbage collection
    if it is explicitly destroyed or the session timeout is reached:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果服务器明确销毁会话对象或会话超时，则会销毁该会话对象并将其发送到垃圾回收：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'When referring to a website by its name rather than a specific page, then this
    is the page that will be displayed. In Faces, it should always be a `.``xhtml`
    file:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当通过网站名称而不是特定页面来引用网站时，则此页面将被显示。在Faces中，它应该始终是一个`.xhtml`文件：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The last and optional configuration file is `glassfish-web.xml`. We can provide
    configuration information for database connection pooling, security information,
    and other items that the application server is responsible for in this file. In
    my example projects, I have removed this file as we do not require it.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个可选的配置文件是`glassfish-web.xml`。我们可以在该文件中提供数据库连接池、安全信息以及其他应用程序服务器负责的配置信息。在我的示例项目中，我已经删除了此文件，因为我们不需要它。
- en: With a project organized and configuration files in place, we are ready to start
    on our application. Before we concern ourselves with the web page design, we need
    to set up the POJOs that our application will require and configure them to work
    under the care of CDI.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目组织就绪并放置配置文件后，我们就可以开始我们的应用程序了。在我们关注网页设计之前，我们需要设置应用程序所需并配置它们在CDI的照顾下工作。
- en: Creating an object managed by Context Dependency Injection and validated with
    Bean Validation
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建由上下文依赖注入管理的对象并使用Bean Validation进行验证
- en: Only two Java classes are used in this program, and they are nearly identical
    to what we used in [*Chapter 13*](B19088_13.xhtml#_idTextAnchor254), *Desktop
    Graphical User Interface Coding with Swing and JavaFX*. They are both subject
    to CDI, and the data class also uses BV. Rather than show the entire code for
    these beans we saw in [*Chapter 13*](B19088_13.xhtml#_idTextAnchor254), we will
    only look at what needs to be changed.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个程序中只使用了两个Java类，它们与我们用于[*第13章*](B19088_13.xhtml#_idTextAnchor254)中，*使用Swing和JavaFX进行桌面图形用户界面编码*所用的几乎相同。它们都受CDI控制，数据类也使用了BV。我们不会展示这些在[*第13章*](B19088_13.xhtml#_idTextAnchor254)中看到的bean的完整代码，我们只会看看需要更改的部分。
- en: FinanceBean
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: FinanceBean
- en: 'The first annotation, `@Named`, defines this class as under the control of
    CDI. Before CDI was widely used, JSF had its own CDI-like implementation that
    used the `@ManagedBean` annotation. This is considered obsolete and should no
    longer be used. The name in the parenthesis, `money`, is an alias we can use in
    the expression language:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个注解`@Named`定义了此类受CDI控制。在CDI广泛使用之前，JSF有自己的CDI-like实现，使用了`@ManagedBean`注解。这被认为是过时的，不应再使用。括号中的名称`money`是我们可以在表达式语言中使用的别名：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Scopes
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 范围
- en: 'When an object managed by CDI in a Jakarta application is created or destroyed,
    and other classes may access it, it is referred to as the Scope. There are the
    following types:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当在Jakarta应用程序中由CDI管理的对象被创建或销毁，并且其他类可能访问它时，它被称为范围。有以下几种类型：
- en: '`@RequestScoped`: This means that the server will create a new object for every
    request, and the previous object from a previous request is sent out for garbage
    collection for each user.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@RequestScoped`：这意味着服务器将为每个请求创建一个新的对象，并且每个用户的前一个请求对象都会被发送出去进行垃圾回收。'
- en: '`@SessionScoped`: This means that objects created upon the first request remain
    in place and are only destroyed explicitly or when the session timer ends for
    each user.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@SessionScoped`：这意味着在第一次请求创建的对象将保持原位，并且只有当会话计时器结束时或明确销毁时，才会销毁。'
- en: '`@ApplicationScoped`: These objects are available to every session for all
    users.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@ApplicationScoped`：这些对象对所有用户的每个会话都可用。'
- en: '`@ViewScoped`: This is the final scope. Beans created with this scope are tied
    to a Faces page. As long as you do not change the view, such as by having a link
    or button that calls upon another page, then the bean remains valid.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@ViewScoped`：这是最终的范围。使用此范围创建的bean与一个Faces页面相关联。只要你不更改视图，例如通过有一个链接或按钮调用另一个页面，那么bean仍然有效。'
- en: 'Now back to the code:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在回到代码：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Each of the BigDecimal variables has been declared with BV annotations. In
    this example, we are setting a minimum and maximum value. The `message` attribute
    is the key to a separate message bundle that is named `ValidationMessages`. Just
    like ordinary bundles, you need a default and then one for each supported language.
    These validation bundles are expected to be found in the `resources` folder and
    not in any folders below it:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 每个BigDecimal变量都使用BV注解声明。在这个例子中，我们设置了一个最小值和最大值。`message`属性是名为`ValidationMessages`的单独消息包的键。就像普通包一样，你需要一个默认的，然后为每种支持的语言提供一个。这些验证包预计将在`resources`文件夹中找到，而不是在任何子文件夹中：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here are two new fields not found in the original `FinanceBean` class. The
    first is the `calculationType` field that defines which of the three calculation
    formulas are used. It is also used to update the name of `Label` of the first
    input field:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在原始的`FinanceBean`类中找不到的两个新字段。第一个是`calculationType`字段，它定义了使用哪三个计算公式中的哪一个。它还用于更新第一个输入字段的`Label`名称：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The new text must be shown in the first input label when the calculation type
    changes. This will be read from the resource bundle:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当计算类型更改时，必须在第一个输入标签中显示新的文本。这将从资源包中读取：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here in the constructor, we define the calculation as `loan` and initialize
    `msgs`:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在构造函数中，我们将计算定义为`loan`并初始化`msgs`：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The remaining methods in this data class are just the usual getters and setters.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 此数据类中剩余的方法只是常规的getter和setter。
- en: 'One last point about CDI and BV is that they can be used in any type of Java
    application that includes the CDI and/or BV library. That library is part of Jakarta,
    so there is no specific reference to it in the `pom` file. To use just CDI, BV,
    or both in your application, add the following to your `pom` file:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 关于CDI和BV的最后一点是，它们可以用于任何包含CDI和/或BV库的Java应用程序。该库是Jakarta的一部分，因此在`pom`文件中没有特定的引用。要在您的应用程序中使用CDI、BV或两者，请将以下内容添加到您的`pom`文件中：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: With a data bean called a backing bean in Faces, in place, we can now look at
    the `Calculations` class.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在Faces中，有一个称为后端bean的数据bean，现在我们可以查看`Calculations`类。
- en: Calculations
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计算
- en: The `Calculations` class is also mostly unchanged. The formulas in all three
    calculation methods are the same. The first change is that the `FinanceBean` object
    is now a class field that is instantiated by CDI rather than a parameter passed
    to each method. The second change is that calls for a calculation are made to
    a method that, in turn, selects the appropriate calculation method. Let us look
    at this now.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`Calculations`类也基本没有变化。所有三个计算方法中的公式都是相同的。第一个变化是`FinanceBean`对象现在是一个由CDI实例化的类字段，而不是传递给每个方法的参数。第二个变化是计算调用到一个方法，该方法反过来选择适当的计算方法。现在让我们看看这个。'
- en: 'The class begins with the annotation that defines this as a CDI-managed bean.
    The scope is `@RequestScope`. A CDI bean is instantiated either when it is injected
    into another class, as we will see next, or upon first use on a Faces page:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 类以定义此为CDI管理bean的注解开始。作用域为`@RequestScope`。CDI bean是在将其注入到另一个类时实例化的，正如我们接下来将要看到的，或者是在Faces页面上首次使用时：
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'With the `@Inject` annotation, CDI will check whether this object currently
    exists. If it does, then a reference to it is assigned to a variable named `money`.
    If it does not exist, then it will be instantiated before passing the reference
    into `money`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`@Inject`注解，CDI将检查此对象当前是否存在。如果存在，则将其引用分配给名为`money`的变量。如果不存在，则将在将引用传递给`money`之前实例化它：
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This method will be called from the Faces page:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法将从Faces页面调用：
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This is the start of one of the calculations that uses the class field to get
    the user input and where the result will be stored:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用类字段获取用户输入并将结果存储的地方的计算过程之一：
- en: '[PRE16]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We have only scratched the surface of CDI and BV. See *Further reading* to find
    additional information on these features. Now let’s move on to Faces rendering
    of web pages.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只是对CDI和BV的表面进行了探讨。参见*进一步阅读*以获取有关这些功能的更多信息。现在让我们继续到Faces的网页渲染。
- en: Using XHTML, Facelets, and Expression Language for rendering pages
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用XHTML、Facelets和表达式语言来渲染页面
- en: Faces applications use files with an `xhtml` extension. This extension means
    that either HTML or custom tags, called Facelets, must adhere to the rules of
    XML. This means that every tag must be closed. HTML allows for tags such as `<br>`
    and `<p>,` while to use these tags in XHTML, there must be an opening tag followed
    by a closing tag. Tags can also be self-closing by ending in a forward slash such
    as `<br/>` or `<p/>`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Faces应用程序使用扩展名为`xhtml`的文件。此扩展名意味着HTML或自定义标签（称为Facelets）必须遵循XML的规则。这意味着每个标签都必须关闭。HTML允许使用`<br>`和`<p>`等标签，而在XHTML中使用这些标签时，必须有一个开标签后跟一个闭标签。标签也可以通过以正斜杠结尾来自动关闭，例如`<br/>`或`<p/>`。
- en: Let us look at the `index.xhtml` file that is responsible for the user interface.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看负责用户界面的`index.xhtml`文件。
- en: 'We begin by declaring that this file is in the XHTML format:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先声明此文件是XHTML格式：
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'XML documents are checked to ensure all tags are valid. The five namespaces
    listed here represent the common set of tags available in Faces:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: XML文档将被检查以确保所有标签都是有效的。这里列出的五个命名空间代表了Faces中可用的常见标签集合：
- en: '[PRE18]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Here we see our first Facelet, the `h:head` tag. When this file is processed
    by the Faces framework, each Facelet is a call to a Java method that returns a
    valid HTML string and, if needed, JavaScript:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们看到我们的第一个Facelet，即`h:head`标签。当此文件被Faces框架处理时，每个Facelet都是一个调用Java方法的过程，该方法返回一个有效的HTML字符串，如果需要，还可以返回JavaScript：
- en: '[PRE19]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Here we see our first Expression Language statement. In this case, we are retrieving
    the text from the messages bundle defined in the `faces-config.xml` file. Notice
    also that we are using an HTML tag and a title, and these tags are preserved in
    the HTML generated from processing the Faces page. In any situation where a Facelet
    matches an HTML tag, you should always use the Facelet:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们看到我们的第一个表达式语言语句。在这种情况下，我们正在从 `faces-config.xml` 文件中定义的消息包中检索文本。请注意，我们还在使用一个HTML标签和一个标题，并且这些标签在处理
    Faces 页面生成的HTML中被保留。在任何Facelet与HTML标签匹配的情况下，您都应该始终使用Facelet：
- en: '[PRE20]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Here we can see the Facelets for radio button input. When we call upon a method
    in expression language without ending the call with parenthesis, we are indicating
    that we want either `getCalculationType()` or `setCalculationType()`. We must
    use a method’s full name followed by parenthesis if it is not a setter or getter:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们可以看到单选按钮输入的 Facelets。当我们调用表达式语言中的方法而不以括号结束调用时，我们表示我们想要 `getCalculationType()`
    或 `setCalculationType()`。如果不是setter或getter，我们必须使用方法的全名后跟括号：
- en: '[PRE21]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The common use of radio buttons is to provide a choice required when the form
    is submitted. In the design of this application, I wanted the fields to be cleared
    and the form rendered again. This re-rendering will also change the text of the
    input label of the first label. The `valueChange` event indicates that an Ajax
    partial submit will occur that will call upon the `money.clear()` method to reset
    all values to zero. The `render="@form"` attribute will result in the page being
    re-rendered:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 单选按钮的常见用途是在表单提交时提供所需的选择。在这个应用程序的设计中，我希望字段被清除，并且表单重新渲染。这种重新渲染还将更改第一个标签的输入标签文本。`valueChange`
    事件表示将发生一个Ajax部分提交，这将调用 `money.clear()` 方法将所有值重置为零。`render="@form"` 属性将导致页面重新渲染：
- en: '[PRE22]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Here we are using `panelGrid`, which creates an HTML table. You indicate the
    number of columns, while the number of rows is determined by the number of either
    HTML tags or Facelets. The first value every two rows is a non-breaking space.
    This will consume a cell in the table but display nothing:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里使用 `panelGrid`，它创建一个HTML表格。您指定列数，而行数由HTML标签或Facelets的数量决定。每两行中的第一个值是一个非换行符。这将消耗一个表格单元格，但不会显示任何内容：
- en: '[PRE23]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The second value is `h:message`. This Facelet defaults to a blank entry. If
    an error occurs such as invalid input or a value out of range, then a message
    will appear above the input field. You can use either a `style` attribute to write
    the CSS in this attribute or use `styleclass` to refer to a class in the CSS file:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个值是 `h:message`。这个Facelet默认为空白条目。如果发生错误，如无效输入或值超出范围，则会在输入字段上方显示一条消息。您可以使用
    `style` 属性在此属性中编写CSS，或者使用 `styleclass` 来引用CSS文件中的类：
- en: '[PRE24]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Here is what will appear if the user enters invalid or unconverted input. The
    appearance of these messages, along with everything else on a Faces page, can
    be styled with CSS:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户输入无效或未转换的输入，就会出现以下情况。这些消息以及 Faces 页面上的其他一切都可以使用 CSS 进行样式化：
- en: '![Figure 15.2 – The h:message output](img/B19088_15_02.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图15.2 – h:message 输出](img/B19088_15_02.jpg)'
- en: Figure 15.2 – The h:message output
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.2 – h:message 输出
- en: The text for this input label is retrieved from `FinanceBean` rather than from
    a message bundle directly. This is how the label can change based on the radio
    button choice.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这个输入标签的文本是从 `FinanceBean` 而不是直接从消息包中检索的。这就是标签可以根据单选按钮选择而改变的原因。
- en: Each `h:inputText` field contains a `f:ajax` Facelet. This will issue a partial
    submit, allowing the string you entered to be converted to `BigDecimal` and then
    checked whether it is in range. Otherwise, these checks will only occur when a
    **Submit** button is pressed. There is nothing more annoying than filling in a
    form only to discover several input errors after the **Submit** button is pressed.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 `h:inputText` 字段包含一个 `f:ajax` Facelet。这将触发部分提交，允许将您输入的字符串转换为 `BigDecimal`
    并检查它是否在范围内。否则，这些检查只有在按下 **提交** 按钮时才会发生。没有什么比填写完表格后，在按下 **提交** 按钮后才发现几个输入错误更令人烦恼的了。
- en: 'The Faces framework takes care of the conversion from `String` to `BigDecimal`.
    If this fails due to the presence of invalid characters, the matching `h:message`
    field will appear with a message from the message bundle file. The `converterMessage`
    attribute contains the key value for the bundle:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Faces 框架负责将 `String` 转换为 `BigDecimal`。如果由于存在无效字符而失败，则匹配的 `h:message` 字段将显示来自消息包文件的错误消息。`converterMessage`
    属性包含包的键值：
- en: '[PRE25]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: There are two more rows on this form that I have removed in the text as they
    are nearly identical to the previous one.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在文本中，我移除了这个表单上的两行，因为它们几乎与上一个相同。
- en: 'At the bottom of our form are two buttons. One invokes the `Calculations` class
    to generate the answer, while the second resets all the fields and makes `Load`
    the choice in the radio button:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们表单的底部有两个按钮。一个调用`Calculations`类来生成答案，而另一个重置所有字段并使单选按钮中的`Load`成为选择：
- en: '[PRE26]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This is a basic application, but it should give you a sense of how Faces applications
    work.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个基本的应用程序，但它应该能给您一个关于Faces应用程序如何工作的感觉。
- en: Deploying a Faces web application
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署Faces Web应用程序
- en: Like every sample program in this book that is built with Maven, all you need
    to do is open a terminal/console window in the `project` folder. At the prompt,
    you just need to enter `mvn`. Assuming that there are no errors, you should find
    your project in the target folder.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 就像本书中用Maven构建的每个示例程序一样，您只需要在`project`文件夹中打开一个终端/控制台窗口。在提示符下，您只需输入`mvn`。假设没有错误，您应该在目标文件夹中找到您的项目。
- en: 'You can copy this file and paste it into the `autodeploy` folder discussed
    in the previous chapter. The other option is to deploy the application from the
    GlassFish console:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将此文件复制并粘贴到上一章中讨论的`autodeploy`文件夹中。另一种选择是从GlassFish控制台部署应用程序：
- en: '![Figure 15.3 – Deploying from the server](img/B19088_15_03.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图15.3 – 从服务器部署](img/B19088_15_03.jpg)'
- en: Figure 15.3 – Deploying from the server
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.3 – 从服务器部署
- en: Selecting **Deploy an Application** will bring you to a form where you can upload
    your application to the server. With our application up and running, let us take
    a deeper look into what happens when we interact with a Faces page.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 选择**部署应用程序**将带您到一个表单，您可以在其中上传应用程序到服务器。随着我们的应用程序运行起来，让我们更深入地了解当我们与Faces页面交互时会发生什么。
- en: Understanding the life cycle of a Faces page
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Faces页面生命周期
- en: In [*Chapter 14*](B19088_14.xhtml#_idTextAnchor281), *Server-Side Coding with
    Jakarta*, we saw the basic life cycle of web apps that employ servlets. Simply
    put, a submit request is made to a servlet, the servlet receives data from the
    page in the form of a request object, and you code whatever tasks are necessary,
    and then a response is returned either from the servlet or as an HTML or JSP page.
    Faces works differently from this.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第14章*](B19088_14.xhtml#_idTextAnchor281)中，我们看到了使用servlet的Web应用程序的基本生命周期。简单来说，一个提交请求被发送到servlet，servlet以请求对象的形式从页面接收数据，然后您编写必要的任务，然后从servlet或HTML或JSP页面返回响应。Faces与这不同。
- en: 'There are six parts to the life cycle of a Faces page that begins with a request
    for a `.jsf` page. Here is a diagram that shows the steps in the Faces life cycle:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 一个从`.jsf`页面请求开始的Faces页面生命周期有六个部分。以下是一个显示Faces生命周期步骤的图表：
- en: '![Figure 15.4 – The Faces life cycle](img/B19088_15_04.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图15.4 – Faces生命周期](img/B19088_15_04.jpg)'
- en: Figure 15.4 – The Faces life cycle
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.4 – Faces生命周期
- en: 'Let’s review each part:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾每一部分：
- en: '**Restore View**: When a request arrives, it is checked for a query string.
    If it is not present, then this is likely the first time this page is requested.
    This means that the page can be rendered without the need to go through any of
    the other phases.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**恢复视图**：当一个请求到达时，会检查查询字符串。如果不存在，那么这很可能是第一次请求这个页面。这意味着页面可以在不经过其他任何阶段的情况下渲染。'
- en: '`String` variables. This allows for validating and converting the data before
    it is assigned to the bean associated with this request. Beans that are associated
    with a page are called backing beans.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String`变量。这允许在将数据分配给与请求关联的bean之前对其进行验证和转换。与页面关联的bean被称为后端bean。'
- en: '`String` to `BigDecimal` or `double`. You can also write your own custom converters.
    If anything goes wrong in the conversion, the remaining phases are ignored, and
    the `h:message` is invoked to present an error message.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String`到`BigDecimal`或`double`。您也可以编写自己的自定义转换器。如果在转换过程中出现任何问题，则忽略剩余的阶段，并调用`h:message`来显示错误消息。'
- en: After the conversion comes validation. There are standard validator facelets
    as well as letting you write a custom validator. BV, if used, is also invoked
    here. If the validation fails, then, like a failed conversion, the life cycle
    jumps to Render Response.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 转换之后是验证。有标准的验证器facelets，以及允许您编写自定义验证器。如果使用BV，它也会在这里被调用。如果验证失败，那么，就像失败的转换一样，生命周期会跳转到渲染响应。
- en: '**Update Model Values**: In this phase, after a successful conversion and validation,
    the values are assigned to the backing bean.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Invoke Application**: Many tags have an action attribute that allows you
    to call upon methods in a backing bean. With the data now in the backing bean,
    these methods can be called.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Render Response**: Here, the Faces page is rendered as HTML and JavaScript.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is possible to write a phase listener class that you can use to add additional
    tasks in most phases. Understanding the life cycle is critical to developing Faces
    pages.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter was a brief introduction to Jakarta Faces, the supporting frameworks
    such as CDI and BV, and how to deploy an application. Looking at the life cycle
    should give you an understanding of what the Faces servlet is doing. While web
    page rendering is most commonly the domain of JavaScript frameworks, Faces should
    be considered as an alternative to the JavaScript approach. Its integration with
    CDI and BV makes it a solid foundation for web apps. BV can ensure that all validation
    is done on the server. This does not preclude using validation in JS. However,
    with a simple tool such as `curl`, you could easily submit invalid data if validation
    only occurred on the client side in JS.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: In our next and final chapter, we will look at how Java applications can be
    packaged for easy deployment to a server or distributed for easy use as a desktop
    application.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'PrimeFaces – Facelet library: [https://www.primefaces.org/](https://www.primefaces.org/)'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OmniFaces – Faces utility methods: [https://omnifaces.org/](https://omnifaces.org/)'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Spring: [https://spring.io/](https://spring.io/)'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Vaadin: [https://vaadin.com/](https://vaadin.com/)'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Jakarta Tutorial: [https://eclipse-ee4j.github.io/jakartaee-tutorial/](https://eclipse-ee4j.github.io/jakartaee-tutorial/)'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Part 4:Packaging Java Code
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This part is about how you distribute your code. You will learn how to create
    a custom Java runtime and package it with an application in a single file installer.
    The distribution of an entire environment, including Java, an application server,
    and your app using Docker, the first step to cloud deployment, is the final topic.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: 'This part contains the following chapter:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 16*](B19088_16.xhtml#_idTextAnchor315), *Deploying Java in Standalone
    Packages and Containers*'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
