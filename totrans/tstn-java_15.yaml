- en: '15'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jakarta Faces Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jakarta Faces, now just called Faces, is one of two client rendering techniques
    available in web applications. The other is **Jakarta Server Pages** (**JSP**).
    In this chapter, we will examine a Faces web application that, like our Swing
    and JavaFX examples, allows you to perform three common finance calculations.
  prefs: []
  type: TYPE_NORMAL
- en: The JSP rendering approach permits the placement of Java source code on an HTML
    page. Before a JSP page can be rendered, the file is converted into a servlet
    by the application server. If you have 50 JSP pages, then there will be 50 servlets
    on the application server. The typical approach in designing an application is
    to use JSP for rendering by mixing standard HTML, expression language code to
    access data or call Java methods, and Java source code. These files end with a
    `.jsp` extension. While you can do processing on the page, the common approach
    is to have a JSP page call upon a servlet for processing and to decide which JSP
    page to return to the browser.
  prefs: []
  type: TYPE_NORMAL
- en: The Faces approach is quite different. First off, the framework provides the
    Faces servlet. All requests for a `.jsf` page are processed by this servlet. While
    a JSP application is usually a combination of `.jsp` pages and servlets, a Faces
    application does not require any servlets, though they can be used. In the place
    of servlets, Faces allows you to use a `Calculations` and `FinanceBean` classes
    from [*Chapter 13*](B19088_13.xhtml#_idTextAnchor254), *Desktop Graphical User
    Interface Coding with Swing and JavaFX*, by adding some annotations to the code.
  prefs: []
  type: TYPE_NORMAL
- en: A Faces page contains Facelets along with any standard HTML tag. Facelets is
    the `pom` file. See the *Further reading* section for examples of these third-party
    libraries.
  prefs: []
  type: TYPE_NORMAL
- en: We will interact with most objects by employing `new`. Instead, the CDI framework
    instantiates an object upon first use and determines whether it needs to be garbage
    collected or not. We can also use `if` statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will now take you through how our Financial Calculator is written
    using Faces, CDI, and BV. We will examine the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a Faces application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an object managed by CDI and validated with BV
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using XHTML, Facelets, and Jakarta Expression Language for rendering pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the life cycle of a Faces page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will understand how a Faces web application
    is constructed. With this knowledge, you will be able to evaluate other web application
    frameworks, such as Spring and Vaadin.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this chapter, you’ll need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Java 17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A text editor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maven 3.8.6 or a newer version installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GlassFish 7.0 application server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sample code for this chapter is available at [https://github.com/PacktPublishing/Transitioning-to-Java/tree/chapter15](https://github.com/PacktPublishing/Transitioning-to-Java/tree/chapter15).
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a Faces application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here is what the web version of the Financial Calculator app looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.1 – The Financial Calculator web page](img/B19088_15_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.1 – The Financial Calculator web page
  prefs: []
  type: TYPE_NORMAL
- en: 'Configuring a Faces project begins with the same setup as any basic web application,
    such as what we saw in the previous chapter. The Maven folder setup is identical.
    In the `WEB-INF` folder, we have three required XML configuration files and one
    that is optional. Let us begin with `beans.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This looks strange because there is only one tag, `beans`. Before the widespread
    usage of annotations, listing every bean or class was necessary to enable CDI.
    The `bean-discovery-mode` tag defines any bean with a CDI annotation is now subject
    to the CDI. Prior to Jakarta EE 10, the discovery mode to use was `all`. The current
    best practice is to use `annotated` rather than `all`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next configuration file is `faces-config.xml`. In this file, you can define
    application properties. Some of these properties can be navigation rules to determine
    to which page should a submit request go next, bean objects that should be instantiated,
    and message bundles for i18n support. In this example, we are only using this
    file to define the message bundle for this application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You can see in `base-name` the package and base file name for the message bundles.
    Under `var` you can see the name of the identifier we can use on a Faces XHTML
    page. Bundles in Faces are identical to how we created resource bundles that are
    configured for desktop applications with a key followed by a value. To refer to
    a value from a message bundle, we use expression language such as `#{msgs.result}`.
  prefs: []
  type: TYPE_NORMAL
- en: The last required configuration file is the `web.xml` file. It can fulfill the
    same responsibilities as we saw in the previous chapter. In addition, we can modify
    how Faces performs. For simplicity, I have removed the opening and closing tags
    as they are identical to the previous chapter’s version.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first param, `PROJECT_STAGE`, configures the framework error handling.
    Using the `Development` error messages carries more information than a small code
    of slower performance. Typically, you will change this to `Production` when the
    code is complete:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The next param determines whether comments in the Faces page will be in the
    HTML sent to the browser or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The server will destroy a session object and send it for garbage collection
    if it is explicitly destroyed or the session timeout is reached:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'When referring to a website by its name rather than a specific page, then this
    is the page that will be displayed. In Faces, it should always be a `.``xhtml`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The last and optional configuration file is `glassfish-web.xml`. We can provide
    configuration information for database connection pooling, security information,
    and other items that the application server is responsible for in this file. In
    my example projects, I have removed this file as we do not require it.
  prefs: []
  type: TYPE_NORMAL
- en: With a project organized and configuration files in place, we are ready to start
    on our application. Before we concern ourselves with the web page design, we need
    to set up the POJOs that our application will require and configure them to work
    under the care of CDI.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an object managed by Context Dependency Injection and validated with
    Bean Validation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Only two Java classes are used in this program, and they are nearly identical
    to what we used in [*Chapter 13*](B19088_13.xhtml#_idTextAnchor254), *Desktop
    Graphical User Interface Coding with Swing and JavaFX*. They are both subject
    to CDI, and the data class also uses BV. Rather than show the entire code for
    these beans we saw in [*Chapter 13*](B19088_13.xhtml#_idTextAnchor254), we will
    only look at what needs to be changed.
  prefs: []
  type: TYPE_NORMAL
- en: FinanceBean
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first annotation, `@Named`, defines this class as under the control of
    CDI. Before CDI was widely used, JSF had its own CDI-like implementation that
    used the `@ManagedBean` annotation. This is considered obsolete and should no
    longer be used. The name in the parenthesis, `money`, is an alias we can use in
    the expression language:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Scopes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When an object managed by CDI in a Jakarta application is created or destroyed,
    and other classes may access it, it is referred to as the Scope. There are the
    following types:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@RequestScoped`: This means that the server will create a new object for every
    request, and the previous object from a previous request is sent out for garbage
    collection for each user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@SessionScoped`: This means that objects created upon the first request remain
    in place and are only destroyed explicitly or when the session timer ends for
    each user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@ApplicationScoped`: These objects are available to every session for all
    users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@ViewScoped`: This is the final scope. Beans created with this scope are tied
    to a Faces page. As long as you do not change the view, such as by having a link
    or button that calls upon another page, then the bean remains valid.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now back to the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Each of the BigDecimal variables has been declared with BV annotations. In
    this example, we are setting a minimum and maximum value. The `message` attribute
    is the key to a separate message bundle that is named `ValidationMessages`. Just
    like ordinary bundles, you need a default and then one for each supported language.
    These validation bundles are expected to be found in the `resources` folder and
    not in any folders below it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are two new fields not found in the original `FinanceBean` class. The
    first is the `calculationType` field that defines which of the three calculation
    formulas are used. It is also used to update the name of `Label` of the first
    input field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The new text must be shown in the first input label when the calculation type
    changes. This will be read from the resource bundle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Here in the constructor, we define the calculation as `loan` and initialize
    `msgs`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The remaining methods in this data class are just the usual getters and setters.
  prefs: []
  type: TYPE_NORMAL
- en: 'One last point about CDI and BV is that they can be used in any type of Java
    application that includes the CDI and/or BV library. That library is part of Jakarta,
    so there is no specific reference to it in the `pom` file. To use just CDI, BV,
    or both in your application, add the following to your `pom` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: With a data bean called a backing bean in Faces, in place, we can now look at
    the `Calculations` class.
  prefs: []
  type: TYPE_NORMAL
- en: Calculations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Calculations` class is also mostly unchanged. The formulas in all three
    calculation methods are the same. The first change is that the `FinanceBean` object
    is now a class field that is instantiated by CDI rather than a parameter passed
    to each method. The second change is that calls for a calculation are made to
    a method that, in turn, selects the appropriate calculation method. Let us look
    at this now.
  prefs: []
  type: TYPE_NORMAL
- en: 'The class begins with the annotation that defines this as a CDI-managed bean.
    The scope is `@RequestScope`. A CDI bean is instantiated either when it is injected
    into another class, as we will see next, or upon first use on a Faces page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'With the `@Inject` annotation, CDI will check whether this object currently
    exists. If it does, then a reference to it is assigned to a variable named `money`.
    If it does not exist, then it will be instantiated before passing the reference
    into `money`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This method will be called from the Faces page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the start of one of the calculations that uses the class field to get
    the user input and where the result will be stored:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: We have only scratched the surface of CDI and BV. See *Further reading* to find
    additional information on these features. Now let’s move on to Faces rendering
    of web pages.
  prefs: []
  type: TYPE_NORMAL
- en: Using XHTML, Facelets, and Expression Language for rendering pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Faces applications use files with an `xhtml` extension. This extension means
    that either HTML or custom tags, called Facelets, must adhere to the rules of
    XML. This means that every tag must be closed. HTML allows for tags such as `<br>`
    and `<p>,` while to use these tags in XHTML, there must be an opening tag followed
    by a closing tag. Tags can also be self-closing by ending in a forward slash such
    as `<br/>` or `<p/>`.
  prefs: []
  type: TYPE_NORMAL
- en: Let us look at the `index.xhtml` file that is responsible for the user interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'We begin by declaring that this file is in the XHTML format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'XML documents are checked to ensure all tags are valid. The five namespaces
    listed here represent the common set of tags available in Faces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we see our first Facelet, the `h:head` tag. When this file is processed
    by the Faces framework, each Facelet is a call to a Java method that returns a
    valid HTML string and, if needed, JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we see our first Expression Language statement. In this case, we are retrieving
    the text from the messages bundle defined in the `faces-config.xml` file. Notice
    also that we are using an HTML tag and a title, and these tags are preserved in
    the HTML generated from processing the Faces page. In any situation where a Facelet
    matches an HTML tag, you should always use the Facelet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we can see the Facelets for radio button input. When we call upon a method
    in expression language without ending the call with parenthesis, we are indicating
    that we want either `getCalculationType()` or `setCalculationType()`. We must
    use a method’s full name followed by parenthesis if it is not a setter or getter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The common use of radio buttons is to provide a choice required when the form
    is submitted. In the design of this application, I wanted the fields to be cleared
    and the form rendered again. This re-rendering will also change the text of the
    input label of the first label. The `valueChange` event indicates that an Ajax
    partial submit will occur that will call upon the `money.clear()` method to reset
    all values to zero. The `render="@form"` attribute will result in the page being
    re-rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we are using `panelGrid`, which creates an HTML table. You indicate the
    number of columns, while the number of rows is determined by the number of either
    HTML tags or Facelets. The first value every two rows is a non-breaking space.
    This will consume a cell in the table but display nothing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The second value is `h:message`. This Facelet defaults to a blank entry. If
    an error occurs such as invalid input or a value out of range, then a message
    will appear above the input field. You can use either a `style` attribute to write
    the CSS in this attribute or use `styleclass` to refer to a class in the CSS file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is what will appear if the user enters invalid or unconverted input. The
    appearance of these messages, along with everything else on a Faces page, can
    be styled with CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.2 – The h:message output](img/B19088_15_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.2 – The h:message output
  prefs: []
  type: TYPE_NORMAL
- en: The text for this input label is retrieved from `FinanceBean` rather than from
    a message bundle directly. This is how the label can change based on the radio
    button choice.
  prefs: []
  type: TYPE_NORMAL
- en: Each `h:inputText` field contains a `f:ajax` Facelet. This will issue a partial
    submit, allowing the string you entered to be converted to `BigDecimal` and then
    checked whether it is in range. Otherwise, these checks will only occur when a
    **Submit** button is pressed. There is nothing more annoying than filling in a
    form only to discover several input errors after the **Submit** button is pressed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Faces framework takes care of the conversion from `String` to `BigDecimal`.
    If this fails due to the presence of invalid characters, the matching `h:message`
    field will appear with a message from the message bundle file. The `converterMessage`
    attribute contains the key value for the bundle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: There are two more rows on this form that I have removed in the text as they
    are nearly identical to the previous one.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the bottom of our form are two buttons. One invokes the `Calculations` class
    to generate the answer, while the second resets all the fields and makes `Load`
    the choice in the radio button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: This is a basic application, but it should give you a sense of how Faces applications
    work.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying a Faces web application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Like every sample program in this book that is built with Maven, all you need
    to do is open a terminal/console window in the `project` folder. At the prompt,
    you just need to enter `mvn`. Assuming that there are no errors, you should find
    your project in the target folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can copy this file and paste it into the `autodeploy` folder discussed
    in the previous chapter. The other option is to deploy the application from the
    GlassFish console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.3 – Deploying from the server](img/B19088_15_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.3 – Deploying from the server
  prefs: []
  type: TYPE_NORMAL
- en: Selecting **Deploy an Application** will bring you to a form where you can upload
    your application to the server. With our application up and running, let us take
    a deeper look into what happens when we interact with a Faces page.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the life cycle of a Faces page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 14*](B19088_14.xhtml#_idTextAnchor281), *Server-Side Coding with
    Jakarta*, we saw the basic life cycle of web apps that employ servlets. Simply
    put, a submit request is made to a servlet, the servlet receives data from the
    page in the form of a request object, and you code whatever tasks are necessary,
    and then a response is returned either from the servlet or as an HTML or JSP page.
    Faces works differently from this.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are six parts to the life cycle of a Faces page that begins with a request
    for a `.jsf` page. Here is a diagram that shows the steps in the Faces life cycle:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.4 – The Faces life cycle](img/B19088_15_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.4 – The Faces life cycle
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s review each part:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Restore View**: When a request arrives, it is checked for a query string.
    If it is not present, then this is likely the first time this page is requested.
    This means that the page can be rendered without the need to go through any of
    the other phases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`String` variables. This allows for validating and converting the data before
    it is assigned to the bean associated with this request. Beans that are associated
    with a page are called backing beans.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`String` to `BigDecimal` or `double`. You can also write your own custom converters.
    If anything goes wrong in the conversion, the remaining phases are ignored, and
    the `h:message` is invoked to present an error message.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After the conversion comes validation. There are standard validator facelets
    as well as letting you write a custom validator. BV, if used, is also invoked
    here. If the validation fails, then, like a failed conversion, the life cycle
    jumps to Render Response.
  prefs: []
  type: TYPE_NORMAL
- en: '**Update Model Values**: In this phase, after a successful conversion and validation,
    the values are assigned to the backing bean.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Invoke Application**: Many tags have an action attribute that allows you
    to call upon methods in a backing bean. With the data now in the backing bean,
    these methods can be called.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Render Response**: Here, the Faces page is rendered as HTML and JavaScript.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is possible to write a phase listener class that you can use to add additional
    tasks in most phases. Understanding the life cycle is critical to developing Faces
    pages.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter was a brief introduction to Jakarta Faces, the supporting frameworks
    such as CDI and BV, and how to deploy an application. Looking at the life cycle
    should give you an understanding of what the Faces servlet is doing. While web
    page rendering is most commonly the domain of JavaScript frameworks, Faces should
    be considered as an alternative to the JavaScript approach. Its integration with
    CDI and BV makes it a solid foundation for web apps. BV can ensure that all validation
    is done on the server. This does not preclude using validation in JS. However,
    with a simple tool such as `curl`, you could easily submit invalid data if validation
    only occurred on the client side in JS.
  prefs: []
  type: TYPE_NORMAL
- en: In our next and final chapter, we will look at how Java applications can be
    packaged for easy deployment to a server or distributed for easy use as a desktop
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'PrimeFaces – Facelet library: [https://www.primefaces.org/](https://www.primefaces.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OmniFaces – Faces utility methods: [https://omnifaces.org/](https://omnifaces.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Spring: [https://spring.io/](https://spring.io/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Vaadin: [https://vaadin.com/](https://vaadin.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Jakarta Tutorial: [https://eclipse-ee4j.github.io/jakartaee-tutorial/](https://eclipse-ee4j.github.io/jakartaee-tutorial/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Part 4:Packaging Java Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This part is about how you distribute your code. You will learn how to create
    a custom Java runtime and package it with an application in a single file installer.
    The distribution of an entire environment, including Java, an application server,
    and your app using Docker, the first step to cloud deployment, is the final topic.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part contains the following chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 16*](B19088_16.xhtml#_idTextAnchor315), *Deploying Java in Standalone
    Packages and Containers*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
