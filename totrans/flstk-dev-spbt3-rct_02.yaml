- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Setting Up the Environment and Tools – Backend
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置环境和工具 – 后端
- en: In this book, we will learn about full stack development using Spring Boot in
    the backend and React in the frontend. The first part of this book focuses on
    backend development. The second part of this book focuses on frontend programming
    with React. In the third part, we will *implement* the frontend.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将学习使用 Spring Boot 在后端和 React 在前端进行全栈开发。本书的第一部分侧重于后端开发。本书的第二部分侧重于使用 React
    的前端编程。在第三部分，我们将**实现**前端。
- en: In this chapter, we will set up the environment and tools needed for backend
    programming with Spring Boot. Spring Boot is a modern Java-based backend framework
    that makes development faster than traditional Java-based frameworks. With Spring
    Boot, you can make a standalone web application that has an embedded application
    server.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将设置用于使用 Spring Boot 进行后端编程的环境和工具。Spring Boot 是一个基于现代 Java 的后端框架，它使开发速度比传统的基于
    Java 的框架更快。使用 Spring Boot，你可以创建一个具有嵌入式应用服务器的独立 Web 应用程序。
- en: There are a lot of different **integrated development environment** (**IDE**)
    tools that you can use to develop Spring Boot applications. In this chapter, we
    will install **Eclipse**, which is an open-source IDE for multiple programming
    languages. We will create our first Spring Boot project by using the **Spring
    Initializr** project starter page. Reading the console logs is a crucial skill
    when developing Spring Boot applications, which we will also cover.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多不同的**集成开发环境**（**IDE**）工具可用于开发 Spring Boot 应用程序。在本章中，我们将安装**Eclipse**，这是一个适用于多种编程语言的开源
    IDE。我们将通过使用**Spring Initializr**项目启动页面来创建我们的第一个 Spring Boot 项目。在开发 Spring Boot
    应用程序时，阅读控制台日志是一项关键技能，我们也将涉及这一点。
- en: 'In this chapter, we will look into the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下主题：
- en: Installing Eclipse
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Eclipse
- en: Understanding Gradle
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 Gradle
- en: Using Spring Initializr
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Spring Initializr
- en: Installing MariaDB
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 MariaDB
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The **Java software development kit** (**JDK**), version 17 or higher, is necessary
    to use with Eclipse and Spring Boot 3\. In this book, we are using the Windows
    operating system, but all tools are available for Linux and macOS as well. You
    can get the JDK installation package from Oracle ([https://www.oracle.com/java/technologies/downloads/](https://www.oracle.com/java/technologies/downloads/))
    or you can use OpenJDK versions as well. You can check the version of the installed
    Java SDK by typing the `java –version` command in your terminal.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要与 Eclipse 和 Spring Boot 3 一起使用，需要**Java 软件开发工具包**（**JDK**），版本 17 或更高。在本书中，我们使用的是
    Windows 操作系统，但所有工具也适用于 Linux 和 macOS。您可以从 Oracle（[https://www.oracle.com/java/technologies/downloads/](https://www.oracle.com/java/technologies/downloads/））获取
    JDK 安装包，或者您也可以使用 OpenJDK 版本。您可以通过在终端中输入 `java –version` 命令来检查已安装的 Java SDK 版本。
- en: Download the code for this chapter from GitHub at [https://github.com/PacktPublishing/Full-Stack-Development-with-Spring-Boot-3-and-React-Fourth-Edition/tree/main/Chapter01](https://github.com/PacktPublishing/Full-Stack-Development-with-Spring-Boot-3-and-React-Fourth-Edition/tree/main/Chapter01).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从 GitHub 下载本章的代码：[https://github.com/PacktPublishing/Full-Stack-Development-with-Spring-Boot-3-and-React-Fourth-Edition/tree/main/Chapter01](https://github.com/PacktPublishing/Full-Stack-Development-with-Spring-Boot-3-and-React-Fourth-Edition/tree/main/Chapter01)。
- en: Installing Eclipse
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Eclipse
- en: '**Eclipse** is an open-source programming IDE developed by the Eclipse Foundation.
    An installation package or installer can be downloaded from [https://www.eclipse.org/downloads](https://www.eclipse.org/downloads).
    Eclipse is available for Windows, Linux, and macOS. You can also use other IDE
    tools like IntelliJ or VS Code if you are familiar with them.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**Eclipse**是由 Eclipse 基金会开发的开放源代码编程 IDE。可以从[https://www.eclipse.org/downloads](https://www.eclipse.org/downloads)下载安装包或安装程序。Eclipse
    可用于 Windows、Linux 和 macOS。如果您熟悉其他 IDE 工具，如 IntelliJ 或 VS Code，您也可以使用它们。'
- en: 'You can either download a ZIP package of Eclipse or an installer package that
    executes the installation wizard. In the installer, you should select **Eclipse
    IDE for Enterprise Java and Web Developers**, as shown in the following screenshot:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以下载 Eclipse 的 ZIP 包或执行安装向导的安装包。在安装程序中，您应选择**适用于企业 Java 和 Web 开发者的 Eclipse
    IDE**，如下面的截图所示：
- en: '![](img/B19818_01_01.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19818_01_01.png)'
- en: 'Figure 1.1: Eclipse installer'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1：Eclipse 安装程序
- en: If using the ZIP package, you have to extract the package to your local disk,
    and it will contain an executable `eclipse.exe` file, which you can run by double-clicking
    on the file. You should download the **Eclipse IDE for Enterprise Java and Web
    Developers** package.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用 ZIP 包，您必须将其提取到您的本地磁盘上，它将包含一个可执行的 `eclipse.exe` 文件，您可以通过双击文件来运行它。您应该下载 **Eclipse
    IDE for Enterprise Java and Web Developers** 包。
- en: 'Eclipse is an IDE for multiple programming languages, such as Java, C++, and
    Python. Eclipse contains different **perspectives** for your needs, which are
    a set of views and editors in the Eclipse workbench. The following screenshot
    shows common perspectives for Java development:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse 是一个支持多种编程语言的 IDE，如 Java、C++ 和 Python。Eclipse 包含不同的 **视角**以满足您的需求，这些视角是
    Eclipse 工作台中的一组视图和编辑器。以下截图显示了 Java 开发中常见的视角：
- en: '![](img/B19818_01_02.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19818_01_02.png)'
- en: 'Figure 1.2: Eclipse workbench'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2：Eclipse 工作台
- en: On the left-hand side, we have the **Project Explorer**, where we can see our
    project structure and resources. The **Project Explorer** is also used to open
    files by double-clicking on them. The files will be opened in the editor, which
    is in the middle of the workbench. The **Console** view can be found in the lower
    section of the workbench. This view is really important because it shows application
    logging messages.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧，我们有 **项目资源管理器**，我们可以在这里看到我们的项目结构和资源。**项目资源管理器**也用于通过双击文件来打开文件。文件将在工作台中间的编辑器中打开。**控制台**视图可以在工作台的下半部分找到。这个视图非常重要，因为它显示了应用程序的日志消息。
- en: IMPORTANT NOTE
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'You can get **Spring Tool Suite** (**STS**) for Eclipse if you want, but we
    are not going to use it in this book because the plain Eclipse installation is
    enough for our purposes. STS is a set of plugins that makes Spring application
    development simple, and you can find more information about it here: [https://spring.io/tools](https://spring.io/tools).'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想，您可以为 Eclipse 获取 **Spring Tool Suite** (**STS**)，但在这本书中我们不会使用它，因为纯 Eclipse
    安装就足够我们使用了。STS 是一系列插件，可以使 Spring 应用程序开发变得简单，您可以在以下链接中找到更多关于它的信息：[https://spring.io/tools](https://spring.io/tools)。
- en: Now that we have installed Eclipse, let’s take a quick look at what Gradle is
    and how it helps us.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了 Eclipse，让我们快速了解一下 Gradle 是什么以及它如何帮助我们。
- en: Understanding Gradle
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Gradle
- en: '**Gradle** is a build automation tool that makes the software development process
    simpler and also unifies the development process. It manages our project dependencies
    and handles the build process.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**Gradle** 是一个构建自动化工具，它使软件开发过程变得更简单，并统一了开发过程。它管理我们的项目依赖关系并处理构建过程。'
- en: IMPORTANT NOTE
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: You can also use another project management tool called **Maven** with Spring
    Boot, but we will focus on using Gradle in this book because it’s faster and more
    flexible than Maven.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用另一个名为 **Maven** 的项目管理工具与 Spring Boot 一起使用，但我们将专注于本书中使用 Gradle，因为它比 Maven
    更快、更灵活。
- en: We don’t need to perform any installations to use Gradle in our Spring Boot
    project since we are utilizing the Gradle wrapper within our project.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 Spring Boot 项目中使用 Gradle 不需要执行任何安装，因为我们正在项目中使用 Gradle 包装器。
- en: 'The Gradle configuration is done in the project’s `build.gradle` file. The
    file can be customized to fit the specific needs of the project and can be used
    to automate tasks such as building, testing, and deploying the software. The `build.gradle`
    file is an important part of the Gradle build system and is used to configure
    and manage the build process for a software project. The `build.gradle` file typically
    includes information about the project’s dependencies, like external libraries
    and frameworks that are needed for the project to compile. You can use either
    the Kotlin or Groovy programming languages to write `build.gradle` files. In this
    book, we are using **Groovy**. The following is one example of a Spring Boot project’s
    `build.gradle` file:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Gradle 配置是在项目的 `build.gradle` 文件中完成的。该文件可以根据项目的具体需求进行自定义，并可用于自动化构建、测试和部署软件等任务。`build.gradle`
    文件是 Gradle 构建系统的重要组成部分，用于配置和管理软件项目的构建过程。`build.gradle` 文件通常包含有关项目依赖信息，如项目编译所需的外部库和框架。您可以使用
    Kotlin 或 Groovy 编程语言编写 `build.gradle` 文件。在本书中，我们使用 **Groovy**。以下是一个 Spring Boot
    项目 `build.gradle` 文件的示例：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `build.gradle` file typically contains the following parts:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`build.gradle` 文件通常包含以下部分：'
- en: '**Plugins**: The `plugins` block defines the Gradle plugins that are used in
    the project. In this block, we can define the version of Spring Boot.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**插件**：`plugins` 块定义了项目中使用的 Gradle 插件。在这个块中，我们可以定义 Spring Boot 的版本。'
- en: '**Repositories**: The `repositories` block defines the dependency repositories
    that are used to resolve dependencies. We are using the Maven Central repository,
    from which Gradle pulls the dependencies.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仓库**：`repositories` 块定义了用于解析依赖项的依赖项仓库。我们使用 Maven Central 仓库，Gradle 从中拉取依赖项。'
- en: '**Dependencies:** The `dependencies` block specifies the dependencies that
    are used in the project.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**依赖项**：`dependencies` 块指定了项目中使用的依赖项。'
- en: '**Tasks:** The `tasks` block defines the tasks that are part of the build process,
    such as testing.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**任务**：`tasks` 块定义了构建过程中的任务，例如测试。'
- en: Gradle is often used from the command line, but we are using the Gradle wrapper
    and Eclipse, which handles all the Gradle operations we need. The wrapper is a
    script that invokes a declared version of Gradle, and it standardizes your project
    to a given Gradle version. Therefore, we are not focusing on Gradle command-line
    usage here. The most important thing is to understand the structure of the `build.gradle`
    file and how to add new dependencies to it. We will learn how to add dependencies
    using Spring Initializr in the next section. Later in this book, we will also
    add new dependencies manually to the `build.gradle` file.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Gradle 通常从命令行使用，但我们使用 Gradle 包装器和 Eclipse，它们处理我们需要的所有 Gradle 操作。包装器是一个脚本，它调用声明的
    Gradle 版本，并将您的项目标准化为给定的 Gradle 版本。因此，我们在此不关注 Gradle 命令行使用。最重要的是理解 `build.gradle`
    文件的结构以及如何向其中添加新的依赖项。我们将在下一节学习如何使用 Spring Initializr 添加依赖项。在本书的后续章节中，我们还将手动将新的依赖项添加到
    `build.gradle` 文件中。
- en: In the next section, we will create our first Spring Boot project and see how
    we can run it using the Eclipse IDE.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将创建我们的第一个 Spring Boot 项目，并查看我们如何使用 Eclipse IDE 运行它。
- en: Using Spring Initializr
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Spring Initializr
- en: We will create our backend project using **Spring** **Initializr**, a web-based
    tool that’s used to create Spring Boot projects. Then, we will learn how to run
    our Spring Boot project using the Eclipse IDE. At the end of this section, we
    will also look at how you can use Spring Boot logging.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 **Spring Initializr** 创建我们的后端项目，这是一个基于网络的工具，用于创建 Spring Boot 项目。然后，我们将学习如何使用
    Eclipse IDE 运行我们的 Spring Boot 项目。在本节的最后，我们还将探讨如何使用 Spring Boot 日志。
- en: Creating a project
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建项目
- en: 'To create our project using Spring Initalizr, complete the following steps:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Spring Initalizr 创建我们的项目，请完成以下步骤：
- en: 'Open Spring Initializr by navigating to [https://start.spring.io](https://start.spring.io)
    using your web browser. You should see the following page:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过您的网络浏览器导航到 [https://start.spring.io](https://start.spring.io) 打开 Spring Initializr。您应该看到以下页面：
- en: '![](img/B19818_01_03.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19818_01_03.png)'
- en: 'Figure 1.3: Spring Initializr'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3：Spring Initializr
- en: We will generate a **Gradle - Groovy** project with **Java** and the latest
    stable **Spring Boot 3.1.x** version. If you are using a newer major or minor
    version, you should check the release notes about what’s changed. In the **Group**
    field, we will define our group ID (**com.packt**), which will also become a base
    package in our Java project. In the **Artifact** field, we will define an artifact
    ID (**cardatabase**), which will also be the name of our project in Eclipse.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将生成一个 **Gradle - Groovy** 项目，包含 **Java** 和最新的稳定版 **Spring Boot 3.1.x**。如果您使用的是更新的主要或次要版本，您应该检查发布说明以了解有哪些变化。在
    **组** 字段中，我们将定义我们的组 ID（**com.packt**），这也会成为我们 Java 项目的基包。在 **工件** 字段中，我们将定义一个工件
    ID（**cardatabase**），这也会成为我们在 Eclipse 中的项目名称。
- en: IMPORTANT NOTE
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要提示
- en: Select the correct Java version in Spring Initializr. In this book, we are using
    Java version 17\. In Spring Boot 3, the Java baseline is Java 17.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Spring Initializr 中选择正确的 Java 版本。在本章中，我们使用 Java 版本 17。在 Spring Boot 3 中，Java
    基准是 Java 17。
- en: 'By clicking the **ADD DEPENDENCIES…** button, we will select the starters and
    dependencies that are needed in our project. Spring Boot provides starter packages
    that simplify your Gradle configuration. Spring Boot starters are actually a set
    of dependencies that you can include in your project. We will start our project
    by selecting two dependencies: **Spring Web** and **Spring Boot DevTools**. You
    can type the dependencies into the search field or select from a list that appears,
    as illustrated in the following screenshot:![](img/B19818_01_04.png)'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击**添加依赖项…**按钮，我们将选择项目中需要的启动器和依赖项。Spring Boot提供简化Gradle配置的启动包。Spring Boot启动包实际上是一组你可以包含在项目中的依赖项。我们将通过选择两个依赖项来开始我们的项目：**Spring
    Web**和**Spring Boot DevTools**。你可以在搜索字段中输入依赖项，或者从出现的列表中选择，如图下所示：![](img/B19818_01_04.png)
- en: 'Figure 1.4: Adding dependencies'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图1.4：添加依赖项
- en: The **Spring Boot DevTools** dependency gives us the Spring Boot developer tools,
    which provide an automatic restart functionality. This makes development much
    faster because the application is automatically restarted when changes have been
    saved.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**Spring Boot DevTools**依赖项为我们提供了Spring Boot开发者工具，这些工具提供了自动重启功能。这使得开发变得更快，因为当更改已保存时，应用程序会自动重启。'
- en: 'The **Spring Web** starter pack is a base for full stack development and provides
    an embedded Tomcat server. After you have added dependencies, your **Dependencies**
    section in Spring Initializr should look like this:'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**Spring Web**启动包是全栈开发的基石，并提供了内嵌的Tomcat服务器。在你添加了依赖项之后，Spring Initializr中的**依赖项**部分应该看起来像这样：'
- en: '![](img/B19818_01_05.png)'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/B19818_01_05.png)'
- en: 'Figure 1.5: Spring Initializr dependencies'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图1.5：Spring Initializr依赖项
- en: Finally, click on the **GENERATE** button, which generates a project starter
    ZIP package for us.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，点击**生成**按钮，这将为我们生成一个项目启动ZIP包。
- en: Next, we will learn how to run our project using the Eclipse IDE.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将学习如何使用Eclipse IDE运行我们的项目。
- en: Running the project
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行项目
- en: 'Perform the following steps to run the Gradle project in the Eclipse IDE:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以在Eclipse IDE中运行Gradle项目：
- en: Extract the project ZIP package that we created in the previous section and
    open **Eclipse**.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提取我们在上一节中创建的项目ZIP包，并打开**Eclipse**。
- en: 'We are going to import our project into the Eclipse IDE. To start the import
    process, select the **File | Import** menu and the import wizard will be opened.
    The following screenshot shows the first page of the wizard:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将把我们的项目导入到Eclipse IDE中。要开始导入过程，选择**文件 | 导入**菜单，导入向导将被打开。以下截图显示了向导的第一页：
- en: '![](img/B19818_01_06.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19818_01_06.png)'
- en: 'Figure 1.6: Import wizard (step 1)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.6：导入向导（步骤1）
- en: 'In the first phase, you should select **Existing Gradle Project** from the
    list under the **Gradle** folder, and then click the **Next >** button. The following
    screenshot shows the second step of the import wizard:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第一阶段，你应该从**Gradle**文件夹下的列表中选择**现有Gradle项目**，然后点击**下一步 >**按钮。以下截图显示了导入向导的第二步：
- en: '![](img/B19818_01_07.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19818_01_07.png)'
- en: 'Figure 1.7: Import wizard (step 2)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.7：导入向导（步骤2）
- en: In this phase, click the **Browse...** button and select the extracted project
    folder.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个阶段，点击**浏览...**按钮并选择提取的项目文件夹。
- en: 'Click the **Finish** button to finalize the import. If everything ran correctly,
    you should see the `cardatabase` project in the Eclipse IDE **Project Explorer**.
    It takes a while before the project is ready because all the dependencies will
    be downloaded by Gradle after importing them. You can see the progress of the
    dependency download in the bottom-right corner of Eclipse. The following screenshot
    shows the Eclipse IDE **Project Explorer** after a successful import:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**完成**按钮以完成导入。如果一切运行正确，你应该在Eclipse IDE的**项目资源管理器**中看到`cardatabase`项目。项目准备需要一段时间，因为所有依赖项将在导入后由Gradle下载。你可以在Eclipse的右下角看到依赖项下载的进度。以下截图显示了成功导入后的Eclipse
    IDE**项目资源管理器**：
- en: '![](img/B19818_01_08.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19818_01_08.png)'
- en: 'Figure 1.8: Project Explorer'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.8：项目资源管理器
- en: The **Project Explorer** also shows the package structure of our project. In
    the beginning, there is only one package called `com.packt.cardatabase`. Under
    that package is our main application class, called `CardatabaseApplication.java`.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**项目资源管理器**也显示了我们的项目包结构。一开始，只有一个名为`com.packt.cardatabase`的包。在该包下面是我们的主应用程序类，名为`CardatabaseApplication.java`。'
- en: Now, we don’t have any functionality in our application, but we can run it and
    see whether everything has started successfully. To run the project, open the
    main class by double-clicking on it, as shown in the following screenshot, and
    then click the **Run** button (the play icon) in the Eclipse toolbar. Alternatively,
    you can select the **Run** menu and click **Run as | Java Application**:![](img/B19818_01_09.png)
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们的应用程序没有任何功能，但我们可以运行它并查看是否一切已成功启动。要运行项目，通过双击它打开主类，如图所示，然后在 Eclipse 工具栏中点击
    **运行** 按钮（播放图标）。或者，您可以选择 **运行** 菜单并点击 **运行方式 | Java 应用程序**：![](img/B19818_01_09.png)
- en: 'Figure 1.9: The Cardatabase project'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 1.9：Cardatabase 项目
- en: You can see the **Console** view open in Eclipse, which contains important information
    about the execution of the project. As we discussed before, this is the view where
    all log text and error messages appear, so it is really important to check the
    content of the view when something goes wrong.
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以在 Eclipse 中看到 **控制台** 视图已打开，其中包含有关项目执行的重要信息。正如我们之前讨论的，这是所有日志文本和错误消息出现的视图，因此当出现问题时检查视图的内容非常重要。
- en: 'If the project was executed correctly, you should see the started `CardatabaseApplication`
    class in the text at the end of the console. The following screenshot shows the
    content of the Eclipse console after our Spring Boot project has been started:'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果项目执行正确，您应该在控制台末尾的文本中看到已启动的 `CardatabaseApplication` 类。以下截图显示了我们的 Spring Boot
    项目启动后 Eclipse 控制台的内容：
- en: '![](img/B19818_01_10.png)'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/B19818_01_10.png)'
- en: 'Figure 1.10: Eclipse console'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 1.10：Eclipse 控制台
- en: 'You can also run your **Spring Boot Gradle** project from the command prompt
    or terminal using the following command (in your project folder):'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以使用以下命令（在您的项目文件夹中）从命令提示符或终端运行您的 **Spring Boot Gradle** 项目：
- en: '[PRE1]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the root of our project, there is the `build.gradle` file, which is the
    Gradle configuration file for our project. If you look at the dependencies inside
    the file, you can see that there are now dependencies that we selected on the
    Spring Initializr page. There is also a test dependency included automatically,
    as illustrated in the following code snippet:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的项目根目录中，有一个 `build.gradle` 文件，这是我们的项目 Gradle 配置文件。如果您查看文件中的依赖项，您会看到现在有我们在
    Spring Initializr 页面上选择的依赖项。还有一个自动包含的测试依赖项，如下面的代码片段所示：
- en: '[PRE2]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the following chapters, we are going to add more functionality to our application,
    and then we will add more dependencies manually to the `build.gradle` file.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将向我们的应用程序添加更多功能，然后我们将手动将更多依赖项添加到 `build.gradle` 文件中。
- en: 'Let’s look at the Spring Boot `main` class more carefully:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看看 Spring Boot 的 `main` 类：
- en: '[PRE3]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'At the beginning of the class, there is the `@SpringBootApplication` annotation,
    which is actually a combination of multiple annotations:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在类开始处有 `@SpringBootApplication` 注解，这实际上是多个注解的组合：
- en: '| **Annotation** | **Description** |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| **注释** | **描述** |'
- en: '| `@EnableAutoConfiguration` | This enables Spring Boot’s automatic configuration,
    so your project will automatically be configured based on dependencies. For example,
    if you have the `spring-boot-starter-web` dependency, Spring Boot assumes that
    you are developing a web application and configures your application accordingly.
    |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `@EnableAutoConfiguration` | 这启用了 Spring Boot 的自动配置，因此您的项目将根据依赖项自动进行配置。例如，如果您有
    `spring-boot-starter-web` 依赖项，Spring Boot 假设您正在开发一个 Web 应用程序，并相应地配置您的应用程序。|'
- en: '| `@ComponentScan` | This enables the Spring Boot component scan to find all
    the components of your application. |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| `@ComponentScan` | 这启用了 Spring Boot 组件扫描以找到您应用程序的所有组件。|'
- en: '| `@Configuration` | This defines a class that can be used as a source of bean
    definitions. |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| `@Configuration` | 这定义了一个可以用作 bean 定义源的类。|'
- en: 'Table 1.1: SpringBootApplication annotations'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 表 1.1：SpringBootApplication 注解
- en: The execution of the application starts from the `main()` method, as in standard
    Java applications.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的执行从 `main()` 方法开始，就像标准 Java 应用程序一样。
- en: IMPORTANT NOTE
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: It is recommended that you locate the main application class in the root package
    above other classes. All packages under the package containing the application
    class will be covered by Spring Boot’s component scan. A common reason for an
    application not working correctly is due to Spring Boot being unable to find critical
    classes.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 建议您将主应用程序类定位在根包中，位于其他类之上。包含应用程序类的所有包都将由 Spring Boot 的组件扫描覆盖。应用程序无法正常工作的一个常见原因是
    Spring Boot 无法找到关键类。
- en: Spring Boot development tools
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Spring Boot 开发工具
- en: 'Spring Boot development tools make the application development process simpler.
    The most important feature of the development tools is automatic restart whenever
    files on the `classpath` are modified. Projects will include the developer tools
    if the following dependency is added to the Gradle `build.gradle` file:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot 开发工具使应用程序开发过程更简单。开发工具最重要的功能是在`classpath`上的文件被修改时自动重启。如果将以下依赖项添加到
    Gradle 的 `build.gradle` 文件中，项目将包括开发工具：
- en: '[PRE4]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Development tools are disabled when you create a fully packaged production
    version of your application. You can test automatic restart by adding one comment
    line to your main class, as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当您创建应用程序的完整打包生产版本时，开发工具将被禁用。您可以通过在主类中添加一条注释行来测试自动重启，如下所示：
- en: '[PRE5]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: After saving the file, you can see in the console that the application has restarted.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件后，您可以在控制台中看到应用程序已重启。
- en: Logs and problem-solving
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日志和问题解决
- en: 'Logging can be used to monitor your application flow, and it is a good way
    to capture unexpected errors in your program code. The Spring Boot starter package
    provides the **Logback**, which we can use for logging without any configuration.
    The following sample code shows how you can use logging. The Logback uses **Simple
    Logging Façade for Java** (**SLF4J**) as its native interface:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 日志可以用来监控您的应用程序流程，并且是捕获程序代码中意外错误的好方法。Spring Boot 启动包提供了 **Logback**，我们可以用于日志记录而无需任何配置。以下示例代码展示了如何使用日志。Logback
    使用 **Simple Logging Façade for Java** （**SLF4J**）作为其原生接口：
- en: '[PRE6]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `logger.info` method prints a log message to the console. Log messages
    can be seen in the console after you run a project, as shown in the following
    screenshot:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`logger.info` 方法将日志消息打印到控制台。运行项目后，您可以在控制台中看到日志消息，如下截图所示：'
- en: '![](img/B19818_01_11.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19818_01_11.png)'
- en: 'Figure 1.11: Log message'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.11：日志消息
- en: 'There are seven different levels of logging: `TRACE`, `DEBUG`, `INFO`, `WARN`,
    `ERROR`, `FATAL`, and `OFF`. You can configure the level of logging in your Spring
    Boot `application.properties` file. The file can be found in the `/resources`
    folder inside your project, as illustrated in the following screenshot:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 日志有七个不同的级别：`TRACE`、`DEBUG`、`INFO`、`WARN`、`ERROR`、`FATAL`和`OFF`。您可以在 Spring Boot
    的 `application.properties` 文件中配置日志级别。该文件位于项目内部的 `/resources` 文件夹中，如下截图所示：
- en: '![](img/B19818_01_12.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19818_01_12.png)'
- en: 'Figure 1.12: Application properties file'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.12：应用程序属性文件
- en: 'If we set the logging level to `DEBUG`, we can see log messages from levels
    that are log level `DEBUG` or higher (that is `DEBUG`, `INFO`, `WARN`, and `ERROR`).
    In the following example, we set the log level for the root, but you can also
    set it at the package level:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将日志级别设置为 `DEBUG`，我们就可以看到来自日志级别 `DEBUG` 或更高（即 `DEBUG`、`INFO`、`WARN` 和 `ERROR`）的日志消息。在以下示例中，我们设置了根的日志级别，但您也可以在包级别设置它：
- en: '[PRE7]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now, when you run the project, you can no longer see `TRACE` messages. The `TRACE`
    level contains all application behavior details, which is not needed unless you
    need full visibility of what is happening in your application. It might be a good
    setting for a development version of your application. The default logging level
    is `INFO` if you don’t define anything else.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当您运行项目时，您将无法再看到 `TRACE` 消息。`TRACE` 级别包含所有应用程序行为细节，除非您需要完全了解应用程序中发生的事情，否则不需要。这可能是一个开发版本应用程序的好设置。如果您没有定义其他任何内容，默认日志级别是
    `INFO`。
- en: 'There is one common failure that you might encounter when running a Spring
    Boot application. Spring Boot uses Apache Tomcat ([http://tomcat.apache.org/](http://tomcat.apache.org/))
    as an application server by default, which runs on port `8080` by default. You
    can change the port in the `application.properties` file. The following setting
    will start Tomcat on port `8081`:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行 Spring Boot 应用程序时，您可能会遇到一个常见的失败情况。Spring Boot 默认使用 Apache Tomcat ([http://tomcat.apache.org/](http://tomcat.apache.org/))
    作为应用程序服务器，默认情况下在端口 `8080` 上运行。您可以在 `application.properties` 文件中更改端口。以下设置将在端口 `8081`
    上启动 Tomcat：
- en: '[PRE8]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If the port is occupied, the application won’t start, and you will see the
    following **APPLICATION FAILED TO START** message in the console:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果端口被占用，应用程序将无法启动，您将在控制台中看到以下 **APPLICATION FAILED TO START** 消息：
- en: '![](img/B19818_01_13.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19818_01_13.png)'
- en: 'Figure 1.13: Port already in use'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.13：端口已被占用
- en: If this happens, you will have to stop the process that is listening on port
    `8080` or use another port in your Spring Boot application. You can avoid this
    by clicking the **Terminate** button (red square) in the Eclipse console before
    running the application.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果发生这种情况，你必须停止监听端口`8080`的进程或在你Spring Boot应用程序中使用另一个端口。你可以在运行应用程序之前点击Eclipse控制台中的**终止**按钮（红色方块）来避免这种情况。
- en: In the next section, we will install a **MariaDB** database to use as a database
    in our backend.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将安装一个**MariaDB**数据库，作为我们后端的数据库使用。
- en: Installing MariaDB
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装MariaDB
- en: In *Chapter 3*, *Using JPA to Create and Access a Database*, we are going to
    use MariaDB, so you will need to install it locally on your computer. MariaDB
    is a widely used open-source relational database. MariaDB is available for Windows,
    Linux, and macOS, and you can download the latest stable community server at [https://mariadb.com/downloads/community/](https://mariadb.com/downloads/community/).
    MariaDB is developed under a *GNU* *General Public License, version 2 (GPLv2)*
    license.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在**第3章**，**使用JPA创建和访问数据库**中，我们将使用MariaDB，因此你需要在你的计算机上本地安装它。MariaDB是一个广泛使用的开源关系型数据库。MariaDB适用于Windows、Linux和macOS，你可以在[https://mariadb.com/downloads/community/](https://mariadb.com/downloads/community/)下载最新的稳定社区服务器。MariaDB是在*GNU*
    *通用公共许可证，版本2 (GPLv2)* 许可下开发的。
- en: 'The following steps guide you to install MariaDB:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤指导你安装MariaDB：
- en: 'For Windows, there is the **Microsoft Installer** (**MSI**), which we will
    use here. Download the installer and execute it. Install all features from the
    installation wizard, as illustrated in the following screenshot:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于Windows，有**Microsoft Installer**（**MSI**），我们将在这里使用它。下载安装程序并执行它。从安装向导中安装所有功能，如下面的截图所示：
- en: '![](img/B19818_01_14.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19818_01_14.png)'
- en: 'Figure 1.14: MariaDB installation (step 1)'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.14：MariaDB安装（步骤1）
- en: 'In the next step, you should give a password for the root user. This password
    is needed in the next chapter when we connect our application to the database.
    The process is illustrated in the following screenshot:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一步中，你应该为root用户设置一个密码。这个密码在下一章我们将应用程序连接到数据库时需要。过程如下面的截图所示：
- en: '![](img/B19818_01_15.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19818_01_15.png)'
- en: 'Figure 1.15: MariaDB installation (step 2)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.15：MariaDB安装（步骤2）
- en: 'In the next phase, we can use the default settings, as illustrated in the following
    screenshot:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个阶段，我们可以使用默认设置，如下面的截图所示：
- en: '![](img/B19818_01_16.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19818_01_16.png)'
- en: 'Figure 1.16: MariaDB installation (step 3)'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.16：MariaDB安装（步骤3）
- en: Now, the installation will start, and MariaDB will be installed on your local
    computer. The installation wizard will install **HeidiSQL** for us. This is an
    easy-to-use, graphical database client. We will use this to add a new database
    and make queries to our database. You can also use the Command Prompt included
    in the installation package.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，安装将开始，MariaDB 将安装在你的本地计算机上。安装向导将为我们安装**HeidiSQL**。这是一个易于使用的图形数据库客户端。我们将使用它来添加新的数据库并对我们的数据库进行查询。你也可以使用安装包中包含的命令提示符。
- en: 'Open **HeidiSQL** and log in using the password that you gave in the installation
    phase. You should then see the following screen:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**HeidiSQL**，使用安装阶段提供的密码登录。然后你应该会看到以下屏幕：
- en: '![](img/B19818_01_17.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19818_01_17.png)'
- en: 'Figure 1.17: HeidiSQL'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.17：HeidiSQL
- en: IMPORTANT NOTE
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: HeidiSQL is only available for Windows. If you are using Linux or macOS, you
    can use DBeaver ([https://dbeaver.io/](https://dbeaver.io/)) instead.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: HeidiSQL仅适用于Windows。如果你使用Linux或macOS，可以使用DBeaver([https://dbeaver.io/](https://dbeaver.io/))代替。
- en: We now have everything needed to start the implementation of the backend.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经拥有了开始实现后端所需的一切。
- en: Summary
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we installed the tools that are needed for backend development
    with Spring Boot. For Java development, we set up Eclipse, a widely used programming
    IDE. We created a new Spring Boot project using the Spring Initializr page. After
    creating the project, it was imported to Eclipse and executed. We also covered
    how to solve common problems with Spring Boot and how to find important error
    and log messages. Finally, we installed a MariaDB database, which we are going
    to use in the following chapters.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们安装了使用Spring Boot进行后端开发所需的工具。对于Java开发，我们设置了广泛使用的编程IDE Eclipse。我们使用Spring
    Initializr页面创建了一个新的Spring Boot项目。创建项目后，将其导入Eclipse并执行。我们还介绍了如何解决Spring Boot的常见问题以及如何查找重要的错误和日志消息。最后，我们安装了一个MariaDB数据库，我们将在下一章中使用它。
- en: In the next chapter, we will understand what **dependency injection** (**DI**)
    is and how it can be used with the Spring Boot framework.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将了解什么是 **依赖注入**（**DI**）以及它如何与 Spring Boot 框架一起使用。
- en: Questions
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is Spring Boot?
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是 Spring Boot？
- en: What is the Eclipse IDE?
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是 Eclipse IDE？
- en: What is Gradle?
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是 Gradle？
- en: How do we create a Spring Boot project?
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何创建一个 Spring Boot 项目？
- en: How do we run a Spring Boot project?
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何运行 Spring Boot 项目？
- en: How do we use logging with Spring Boot?
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何使用 Spring Boot 进行日志记录？
- en: How do we find error and log messages in Eclipse?
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何在 Eclipse 中查找错误和日志消息？
- en: Further reading
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Packt has other resources for learning about Spring Boot, as listed here:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Packt 提供了其他关于学习 Spring Boot 的资源，如下所示：
- en: '*Learning Spring Boot 3.0, Third Edition*, by Greg L. Turnquist ([https://www.packtpub.com/product/learning-spring-boot-30-third-edition/9781803233307](https://www.packtpub.com/product/learning-spring-boot-30-third-edition/9781803233307))'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《学习 Spring Boot 3.0 第三版》*，作者：Greg L. Turnquist ([https://www.packtpub.com/product/learning-spring-boot-30-third-edition/9781803233307](https://www.packtpub.com/product/learning-spring-boot-30-third-edition/9781803233307))'
- en: '*Microservices with Spring Boot 3 and Spring Cloud*, *Third Edition*, by Magnus
    Larsson ([https://www.packtpub.com/product/microservices-with-spring-boot-3-and-spring-cloud-third-edition/9781805128694](https://www.packtpub.com/product/microservices-with-spring-boot-3-and-spring-cloud-third-edition/9781805128694))'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《使用 Spring Boot 3 和 Spring Cloud 的微服务》第三版*，作者：Magnus Larsson ([https://www.packtpub.com/product/microservices-with-spring-boot-3-and-spring-cloud-third-edition/9781805128694](https://www.packtpub.com/product/microservices-with-spring-boot-3-and-spring-cloud-third-edition/9781805128694))'
- en: Learn more on Discord
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Discord 上了解更多
- en: 'To join the Discord community for this book – where you can share feedback,
    ask the author questions, and learn about new releases – follow the QR code below:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 要加入本书的 Discord 社区——在那里您可以分享反馈、向作者提问，并了解新版本——请扫描下面的二维码：
- en: '[https://packt.link/FullStackSpringBootReact4e](https://packt.link/FullStackSpringBootReact4e)'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/FullStackSpringBootReact4e](https://packt.link/FullStackSpringBootReact4e)'
- en: '![](img/QR_Code10796108009382640.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code10796108009382640.png)'
