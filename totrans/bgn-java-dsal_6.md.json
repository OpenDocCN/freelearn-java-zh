["```java\npublic class AdjacencyListGraph {\n  ArrayList<Integer>[] adj;\n  public AdjacencyListGraph(int nodes) {\n    this.adj = new ArrayList[nodes];\n    for (int i = 0; i < nodes; i++)\n    this.adj[i] = new ArrayList<>();\n  }\n  public void addEdge(int u, int v) {\n    adj[u].add(v);\n  }\n}  \n```", "```java\nArrayList<Edge>[] adj;\npublic AdjacencyListWeightedGraph(int nodes) {  \n  this.adj = new ArrayList[nodes];\n  for (int i = 0; i < nodes; i++)\n  this.adj[i] = new ArrayList<>();\n}\npublic void addEdge(int u, int v, int weight) {\n  this.adj[u].add(new Edge(u, v, weight));\n}  \n```", "```java\npublic class AdjacencyMatrixGraph {\n  int[][] adj;\n  public AdjacencyMatrixGraph(int nodes) {\n    this.adj = new int[nodes][nodes];\n  }\n  public void addEdge(int u, int v) {\n    this.adj[u][v] = 1;\n  }\n}  \n```", "```java\nQueue<Integer> q = new LinkedList<>();\nq.add(start);\nwhile (!q.isEmpty()) {\n  int current = q.remove();\n  for (int i = 0; i < this.adj[current].size(); i++) {\n    int next = this.adj[current].get(i);\n    if (!visited[next]) {\n      visited[next] = true;\n      parent[next] = current;\n      q.add(next);\n    }\n  }\n}  \n```", "```java\npublic void dfsVisit(int u, boolean[] visited, int[] parent) {\n  visited[u] = true;\n  for (int i = 0; i < adj[u].size(); i++) {\n    int next = adj[u].get(i);\n    if (!visited[next]) {\n      parent[next] = u;\n      dfsVisit(next, visited, parent);\n    }\n  }\n} \n```", "```java\nwhile (!notVisited.isEmpty()) {\n  Vertex v = getBestEstimate(notVisited);\n  notVisited.remove(v);\n  visited.add(v);\n  for (Edge e : adj[v.u]) {\n    if (!visited.contains(e.v)) {\n      Vertex next = vertices[e.v];\n      if (v.distance + e.weight < next.distance) {\n        next.distance = v.distance + e.weight;\n        parent[next.u] = v.u;\n      } \n    }\n  } \n}  \n```", "```java\nPriorityQueue<Node> pq = new PriorityQueue<>();\npq.add(new Node(source, 0));\nwhile (!pq.isEmpty()) {\n  Node v = pq.remove();\n  if (!vertices[v.u].visited) {\n    vertices[v.u].visited = true;\n    for (Edge e : adj[v.u]) {\n      Vertex next = vertices[e.v];\n      if (v.distance + e.weight < next.distance) {\n        next.distance = v.distance + e.weight;\n        parent[next.u] = v.u;\n        pq.add(new Node(next.u, next.distance));\n      }\n    }\n  } \n} \n```", "```java\npublic void run() {\n  for (int k = 0; k < adj.length; k++) {\n    for (int i = 0; i < adj.length; i++) {\n      if (adj[i][k] >= Integer.MAX_VALUE)\n        continue;\n      for (int j = 0; j < adj.length; j++) {\n        if (adj[k][j] >= Integer.MAX_VALUE)\n          continue;\n        adj[i][j] = Math.min(adj[i][j], adj[i][k] + adj[k][j]);\n      }\n    }\n  }\n}  \n```"]