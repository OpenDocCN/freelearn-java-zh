["```java\ndocker-compose -f docker-compose-base.yml up\n```", "```java\ndocker-compose -f docker-compose-base.yml up\n```", "```java\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-cache</artifactId>\n    </dependency>\n    ```", "```java\n    @EnableCaching\n    @SpringBootApplication\n    public class FootballApplication {\n    ```", "```java\n    @Cacheable(value = \"players\")\n    public Player getPlayer(Integer id) {\n        return playerRepository.findById(id).map(p -> playerMapper.map(p)).orElse(null);\n    }\n    ```", "```java\n    @Cacheable(value = \"players\")\n    @GetMapping(\"/{id}\")\n    public Player getPlayer(@PathVariable Integer id) {\n        return footballService.getPlayer(id);\n    }\n    ```", "```java\ndocker-compose -f docker-compose-redis.yml up\n```", "```java\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-data-redis</artifactId>\n    </dependency>\n    ```", "```java\n    <dependency>\n        <groupId>com.fasterxml.jackson.datatype</groupId>\n        <artifactId>jackson-datatype-jsr310</artifactId>\n        <version>2.16.1</version>\n    </dependency>\n    ```", "```java\n    @Configuration\n    public class RedisConfig {\n        @Bean\n        public RedisCacheConfiguration cacheConfiguration() {\n            ObjectMapper mapper = new ObjectMapper();\n            mapper.registerModule(new JavaTimeModule());\n            Jackson2JsonRedisSerializer<Player> serializer = new Jackson2JsonRedisSerializer<>(mapper, Player.class);\n            return RedisCacheConfiguration.defaultCacheConfig()\n                    .entryTtl(Duration.ofMinutes(10))\n                    .disableCachingNullValues()\n                    .serializeValuesWith(SerializationPair.fromSerializer(serializer));\n        }\n    }\n    ```", "```java\n    @CacheEvict(value = \"players\", key = \"#id\")\n    public Player updatePlayerPosition(Integer id,\n                                       String position)\n    ```", "```java\n    static GenericContainer<?> redisContainer = new GenericContainer<>(\"FootballServiceTest.Initializer class, by adding the properties to configure the connection to Redis:\n\n    ```", "```java\n\n    ```", "```java\n    @BeforeAll\n    public static void startContainer() {\n        postgreSQLContainer.start();\n        redisContainer.start();\n    }\n    ```", "```java\n    @RequestMapping(\"/teams\")\n    @RestController\n    public class TeamController {\n        @GetMapping\n        public List<String> getTeams() {\n            return List.of(\"Spain\", \"Zambia\", \"Brazil\");\n        }\n    }\n    ```", "```java\n    mvnw -Pnative spring-boot:build-image\n    ```", "```java\n    docker run --rm -p 8080:8080 footballnative:0.0.1-SNAPSHOT\n    ```", "```java\n    curl http://localhost:8080/teams\n    ```", "```java\n    <plugin>\n        <groupId>org.graalvm.buildtools</groupId>\n        <artifactId>native-maven-plugin</artifactId>\n    </plugin>\n    ```", "```java\n    <plugin>\n        <groupId>org.hibernate.orm.tooling</groupId>\n        <artifactId>hibernate-enhance-maven-plugin</artifactId>\n        <version>${hibernate.version}</version>\n        <executions>\n            <execution>\n                <id>enhance</id>\n                <goals>\n                    <goal>enhance</goal>\n                </goals>\n                 <configuration>\n                     <enableLazyInitialization>true</enableLazyInitialization>\n                     <enableDirtyTracking>true</enableDirtyTracking>\n                     <enableAssociationManagement>true</enableAssociationManagement>\n                 </configuration>\n             </execution>\n         </executions>\n    </plugin>\n    ```", "```java\n        sdk use java 21-graalce\n        ```", "```java\n        java -version\n        ```", "```java\n    ./mvnw package\n    ```", "```java\n    java -Dspring.aot.enabled=true -agentlib:native-image-agent=config-output-dir=src/main/resources/META-INF/native-image -jar target/football-0.0.1-SNAPSHOT.jar\n    ```", "```java\n    mvn localhost, you will need to specify some settings as environment variables. To make it easier for you, I’ve prepared a Docker Compose file. I named it docker-compose-all.yml, and you can find it in the book’s GitHub repository.On my computer, the native version takes just 1.29 seconds to be ready to accept requests, compared to 6.62 seconds for the JVM version.\n    ```", "```java\n    java -version\n    ```", "```java\n    mvn -Pnative native:compile\n    ```", "```java\n    cd target\n    ./football\n    ```", "```java\n    ./mvnw -Pnative package\n    ```", "```java\n    mkdir target/native\n    ```", "```java\n    cd target/native\n    ```", "```java\n    jar -xvf ../football-0.0.1-SNAPSHOT.jar\n    ```", "```java` n' ':'` ``.\n\n    Then, to execute the `native-image` tool, you should execute the following command:\n\n    ```", "```java\n\n5.  Now, you have our application built as a native executable. You can execute it just by executing the following command in your terminal:\n\n    ```"]