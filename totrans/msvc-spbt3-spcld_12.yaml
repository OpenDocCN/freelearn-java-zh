- en: '12'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Centralized Configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will learn how to use the **Spring Cloud Config Server**
    to centralize managing the configuration of our microservices. As already described
    in *Chapter 1*, *Introduction to Microservices*, an increased number of microservices
    typically comes with an increased number of configuration files that need to be
    managed and updated.
  prefs: []
  type: TYPE_NORMAL
- en: With the Spring Cloud Config Server, we can place the configuration files for
    all our microservices in a central configuration repository, which will make it
    much easier to handle them. Our microservices will be updated to retrieve their
    configuration from the configuration server at startup.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to the Spring Cloud Config Server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a config server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring clients of a config server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Structuring the configuration repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Trying out the Spring Cloud Config Server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For instructions on how to install tools used in this book and how to access
    the source code for this book, see:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 21*, *Installation Instructions for macOS*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Chapter 22*, *Installation Instructions for Microsoft Windows with WSL 2 and
    Ubuntu*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code examples in this chapter all come from the source code in `$BOOK_HOME/Chapter12`.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to view the changes applied to the source code in this chapter,
    that is, see what it took to add a configuration server to the microservice landscape,
    you can compare it with the source code for *Chapter 11*, *Securing Access to
    APIs*. You can use your favorite `diff` tool and compare the two folders `$BOOK_HOME/Chapter11`
    and `$BOOK_HOME/Chapter12`.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to the Spring Cloud Config Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Spring Cloud Config Server (shortened to **Config Server**) will be added
    to the existing microservice landscape behind the edge server, in the same way
    as for the other microservices:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19825_12_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.1: Adding a config server to the system landscape'
  prefs: []
  type: TYPE_NORMAL
- en: 'When it comes to setting up a config server, there are a number of options
    to consider:'
  prefs: []
  type: TYPE_NORMAL
- en: Selecting a storage type for the configuration repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deciding on the initial client connection, either to the config server or to
    the discovery server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing the configuration, both against unauthorized access to the API and
    by avoiding storing sensitive information in plain text in the configuration repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Letâ€™s go through each option one by one and also introduce the API exposed by
    the config server.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting the storage type of the configuration repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As already described in *Chapter 8*, *Introduction to Spring Cloud*, the config
    server supports the storing of configuration files in a number of different backends,
    for example:'
  prefs: []
  type: TYPE_NORMAL
- en: Git repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Local filesystem
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HashiCorp Vault
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JDBC database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we will use a local filesystem. To use the local filesystem,
    the config server needs to be launched with the native Spring profile enabled.
    The location of the configuration repository is specified using the `spring.cloud.config.server.native.searchLocations`
    property.
  prefs: []
  type: TYPE_NORMAL
- en: Deciding on the initial client connection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default, a client connects first to the config server to retrieve its configuration.
    Based on the configuration, it connects to the discovery server, Netflix Eureka
    in our case, to register itself. It is also possible to do this the other way
    around, that is, the client first connects to the discovery server to find a config
    server instance and then connects to the config server to get its configuration.
    There are pros and cons to both approaches.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, the clients will first connect to the config server. With this
    approach, it will be possible to store the configuration of the discovery server
    in the config server.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about the other alternative, see [https://docs.spring.io/spring-cloud-config/docs/4.0.1/reference/html/#discovery-first-bootstrap](https://docs.spring.io/spring-cloud-config/docs/4.0.1/reference/html/#discovery-first-bootstrap).
  prefs: []
  type: TYPE_NORMAL
- en: One concern with connecting to the config server first is that the config server
    can become a single point of failure. If the clients connect first to a discovery
    server, such as Netflix Eureka, there can be multiple config server instances
    registered so that a single point of failure can be avoided. When we learn about
    the **service** concept in Kubernetes later on in this book, starting with *Chapter
    15*, *Introduction to Kubernetes*, we will see how we can avoid a single point
    of failure by running multiple containers, for example, config servers, behind
    each Kubernetes service.
  prefs: []
  type: TYPE_NORMAL
- en: Securing the configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Configuration information will, in general, be handled as sensitive information.
    This means that we need to secure the configuration information both in transit
    and at rest. From a runtime perspective, the config server does not need to be
    exposed to the outside through the edge server. During development, however, it
    is useful to be able to access the API of the config server to check the configuration.
    In production environments, it is recommended to lock down external access to
    the config server.
  prefs: []
  type: TYPE_NORMAL
- en: Securing the configuration in transit
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When the configuration information is asked for by a microservice, or anyone
    using the API of the config server, it will be protected against eavesdropping
    by the edge server since it already uses HTTPS.
  prefs: []
  type: TYPE_NORMAL
- en: To ensure that the API user is a known client, we will use HTTP basic authentication.
    We can set up HTTP basic authentication by using Spring Security in the config
    server and specifying the environment variables `SPRING_SECURITY_USER_NAME` and
    `SPRING_SECURITY_USER_PASSWORD` with the permitted credentials.
  prefs: []
  type: TYPE_NORMAL
- en: Securing the configuration at rest
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To avoid a situation where someone with access to the configuration repository
    can steal sensitive information, such as passwords, the config server supports
    the encryption of configuration information when stored on disk. The config server
    supports the use of both symmetric and asymmetric keys. Asymmetric keys are more
    secure but harder to manage.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will use a symmetric key. The symmetric key is given to
    the config server at startup by specifying an environment variable, `ENCRYPT_KEY`.
    The encrypted key is just a plain text string that needs to be protected in the
    same way as any sensitive information.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about the use of asymmetric keys, see [https://docs.spring.io/spring-cloud-config/docs/4.0.1/reference/html/#_key_management](https://docs.spring.io/spring-cloud-config/docs/4.0.1/reference/html/#_key_management).
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the config server API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The config server exposes a REST API that can be used by its clients to retrieve
    their configuration. In this chapter, we will use the following endpoints in the
    API:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/actuator`: The standard actuator endpoint exposed by all microservices. As
    always, these should be used with care. They are very useful during development
    but must be locked down before being used in production.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/encrypt` and `/decrypt`: Endpoints for encrypting and decrypting sensitive
    information. These must also be locked down before being used in production.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/{microservice}/{profile}`: Returns the configuration for the specified microservice
    and the specified Spring profile.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will see some sample uses for the API when we try out the config server.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a config server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Setting up a config server on the basis of the decisions discussed is straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a Spring Boot project using Spring Initializr, as described in *Chapter
    3*, *Creating a Set of Cooperating Microservices*. Refer to the *Using Spring
    Initializr to generate skeleton code* section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the dependencies, `spring-cloud-config-server` and `spring-boot-starter-security`,
    to the Gradle build file, `build.gradle`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the annotation `@EnableConfigServer` to the application class, `ConfigServerApplication`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the configuration for the config server to the default property file, `application.yml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The most important configuration is to specify where to find the configuration
    repository, indicated using the `spring.cloud.config.server.native.searchLocations`
    property.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Add a routing rule to the edge server to make the API of the config server accessible
    from outside the microservice landscape.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a Dockerfile and a definition of the config server to the three Docker Compose
    files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Externalize sensitive configuration parameters to the standard Docker Compose
    environment file, `.env`. The parameters are described below, in the *Configuring
    the config server for use with Docker* section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the config server to the common build file, `settings.gradle`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The source code for the Spring Cloud Config Server can be found in `$BOOK_HOME/Chapter12/spring-cloud/config-server`.
  prefs: []
  type: TYPE_NORMAL
- en: Now, letâ€™s look into how to set up the routing rule referred to in *step 5*
    and how to configure the config server added in Docker Compose, as described in
    *steps 6* and *7*.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a routing rule in the edge server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To be able to access the API of the config server from outside the microservice
    landscape, we add a routing rule to the edge server. All requests to the edge
    server that begin with `/config` will be routed to the config server with the
    following routing rule:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `RewritePath` filter in the routing rule will remove the leading part, `/config`,
    from the incoming URL before it sends it to the config server.
  prefs: []
  type: TYPE_NORMAL
- en: 'The edge server is also configured to permit all requests to the config server,
    delegating the security checks to the config server. The following line is added
    to the `SecurityConfig` class in the edge server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'With this routing rule in place, we can use the API of the config server; for
    example, run the following command to ask for the configuration of the `product`
    service when it uses the `docker` Spring profile:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We will run this command when we try out the config server later on.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the config server for use with Docker
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Dockerfile of the config server looks the same as for the other microservices,
    except for the fact that it exposes port `8888` instead of port `8080`.
  prefs: []
  type: TYPE_NORMAL
- en: 'When it comes to adding the config server to the Docker Compose files, it looks
    a bit different from what we have seen for the other microservices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are the explanations for the preceding source code:'
  prefs: []
  type: TYPE_NORMAL
- en: The Spring profile, `native`, is added to signal to the config server that the
    config repository is based on local files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The environment variable `ENCRYPT_KEY` is used to specify the symmetric encryption
    key that will be used by the config server to encrypt and decrypt sensitive configuration
    information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The environment variables `SPRING_SECURITY_USER_NAME` and `SPRING_SECURITY_USER_PASSWORD`
    are used to specify the credentials to be used for protecting the APIs using basic
    HTTP authentication.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `volumes` declaration will make the `config-repo` folder accessible in the
    Docker container at `/config-repo`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The values of the three preceding environment variables, marked in the Docker
    Compose file with `${...}`, are fetched by Docker Compose from the `.env` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The information stored in the `.env` file, that is, the username, password,
    and encryption key, is sensitive and must be protected if used for something other
    than development and testing. Also, note that losing the encryption key will lead
    to a situation where the encrypted information in the config repository cannot
    be decrypted!
  prefs: []
  type: TYPE_NORMAL
- en: Configuring clients of a config server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To be able to get their configurations from the config server, our microservices
    need to be updated. This can be done with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Add the `spring-cloud-starter-config` and `spring-retry` dependencies to the
    Gradle build file, `build.gradle`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move the configuration file, `application.yml`, to the config repository and
    rename it with the name of the client as specified by the property `spring.application.name`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a new `application.yml` file to the `src/main/resources` folder. This file
    will be used to hold the configuration required to connect to the config server.
    Refer to the following *Configuring connection information* section for an explanation
    of its content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add credentials for accessing the config server to the Docker Compose files,
    for example, the `product` service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Disable the use of the config server when running Spring Boot-based automated
    tests. This is done by adding `spring.cloud.config.enabled=false` to the `@DataMongoTest`,
    `@DataJpaTest`, and `@SpringBootTest` annotations. They look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Configuring connection information
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As mentioned previously, the `src/main/resources/application.yml` file now
    holds the client configuration that is required to connect to the config server.
    This file has the same content for all clients of the config server, except for
    the application name, as specified by the `spring.application.name` property (in
    the following example, set to `product`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This configuration will make the client do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Connect to the config server using the `http://localhost:8888` URL when it runs
    outside Docker, and using the `http://config-server:8888` URL when running in
    a Docker container
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use HTTP Basic authentication, based on the value of the `CONFIG_SERVER_USR`
    and `CONFIG_SERVER_PWD` properties, as the clientâ€™s username and password
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try to reconnect to the config server during startup up to 20 times, if required
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the connection attempt fails, the client will initially wait for 3 seconds
    before trying to reconnect
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The wait time for subsequent retries will increase by a factor of 1.3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The maximum wait time between connection attempts will be 10 seconds
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the client canâ€™t connect to the config server after 20 attempts, its startup
    will fail
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This configuration is generally good for resilience against temporary connectivity
    problems with the config server. It is especially useful when the whole landscape
    of microservices and its config server are started up at once, for example, when
    using the `docker-compose up` command. In this scenario, many of the clients will
    be trying to connect to the config server before it is ready, and the `retry`
    logic will make the clients connect to the config server successfully once it
    is up and running.
  prefs: []
  type: TYPE_NORMAL
- en: Structuring the configuration repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After moving the configuration files from each clientâ€™s source code to the configuration
    repository, we will have some common configuration in many of the configuration
    files, for example, for the configuration of actuator endpoints and how to connect
    to Eureka, RabbitMQ, and Kafka.
  prefs: []
  type: TYPE_NORMAL
- en: 'The common parts have been placed in a common configuration file named `application.yml`.
    This file is shared by all clients. The configuration repository contains the
    following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The configuration repository can be found in `$BOOK_HOME/Chapter12/config-repo`.
  prefs: []
  type: TYPE_NORMAL
- en: Trying out the Spring Cloud Config Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now it is time to try out the config server:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we will build from source and run the test script to ensure that everything
    fits together.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we will try out the config server API to retrieve the configuration for
    our microservices.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, we will see how we can encrypt and decrypt sensitive information, for
    example, passwords.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building and running automated tests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So, now we build and run verification tests of the system landscape, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Build the Docker images with the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the system landscape in Docker and run the usual tests with the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Getting the configuration using the config server API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As described previously, we can reach the API of the config server through
    the edge server by using the URL prefix, `/config`. We also have to supply credentials
    as specified in the `.env` file for HTTP Basic authentication. For example, to
    retrieve the configuration used for the `product` service when it runs as a Docker
    container, that is, having activated the Spring profile `docker`, run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Expect a response with the following structure (many of the properties in the
    response are replaced by `...` to increase readability):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The explanations for this response are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The response contains properties from a number of **property sources**, one
    per property file and Spring profile that matched the API request. The property
    sources are returned in priority order; if a property is specified in multiple
    property sources, the first property in the response takes precedence. The preceding
    sample response contains the following property sources, in the following priority
    order:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/config-repo/product.yml`, for the `docker` Spring profile'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/config-repo/product.yml`, for the `default` Spring profile'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/config-repo/application.yml`, for the `docker` Spring profile'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/config-repo/application.yml`, for the `default` Spring profile'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, the port used will be `8080` and not `7001`, since `"server.port":
    8080` is specified before `"server.port": 7001` in the preceding response.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Sensitive information, such as the passwords to Eureka and RabbitMQ, are returned
    in plain text, for example, `"p"` and `"guest"`, but they are encrypted on disk.
    In the configuration file, `application.yml`, they are specified as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Encrypting and decrypting sensitive information
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Information can be encrypted and decrypted using the `/encrypt` and `/decrypt`
    endpoints exposed by the config server. The `/encrypt` endpoint can be used to
    create encrypted values to be placed in the `property` file in the config repository.
    Refer to the example in the previous section, where the passwords to Eureka and
    RabbitMQ are stored encrypted on disk. The `/decrypt` endpoint can be used to
    verify encrypted information that is stored on disk in the config repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'To encrypt the `hello world` string, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It is important to use the `--data-urlencode` flag when using `curl` to call
    the `/encrypt` endpoint, to ensure the correct handling of special characters
    such as `+`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Expect a response along the lines of the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B19825_12_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.2: An encrypted value of a configuration parameter'
  prefs: []
  type: TYPE_NORMAL
- en: 'To decrypt the encrypted value, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Expect the `hello world` string as the response:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B19825_12_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.3: A decrypted value of a configuration parameter'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to use an encrypted value in a configuration file, you need to
    prefix it with `{cipher}` and wrap it in `''''`. For example, to store the encrypted
    version of `hello world`, add the following line in a YAML-based configuration
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: When the config server detects values in the format `'{cipher}...'`, it tries
    to decrypt them using its encryption key before sending them to a client.
  prefs: []
  type: TYPE_NORMAL
- en: 'These tests conclude the chapter on centralized configuration. Wrap it up by
    shutting down the system landscape:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have seen how we can use the Spring Cloud Config Server
    to centralize managing the configuration of our microservices. We can place the
    configuration files in a common configuration repository and share common configurations
    in a single configuration file while keeping microservice-specific configuration
    in microservice-specific configuration files. The microservices have been updated
    to retrieve their configuration from the config server at startup and are configured
    to handle temporary outages while retrieving their configuration from the config
    server.
  prefs: []
  type: TYPE_NORMAL
- en: The config server can protect configuration information by requiring authenticated
    usage of its API with HTTP basic authentication and can prevent eavesdropping
    by exposing its API externally through the edge server that uses HTTPS. To prevent
    intruders who obtained access to the configuration files on disk from gaining
    access to sensitive information such as passwords, we can use the config server
    `/encrypt` endpoint to encrypt the information and store it encrypted on disk.
  prefs: []
  type: TYPE_NORMAL
- en: While exposing the APIs from the config server externally is useful during development,
    they should be locked down before use in production.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how we can use **Resilience4j** to mitigate
    the potential drawbacks of overusing synchronous communication between microservices.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What API call can we expect from a review service to the config server during
    startup to retrieve its configuration?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The review service was started up using the following command: `docker compose
    up -d`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What configuration information should we expect back from an API call to the
    config server using the following command?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What types of repository backend does Spring Cloud Config support?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we encrypt sensitive information on disk using the Spring Cloud Config
    Server?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we protect the config server API from misuse?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Mention some pros and cons for clients that first connect to the config server
    as opposed to those that first connect to the discovery server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
