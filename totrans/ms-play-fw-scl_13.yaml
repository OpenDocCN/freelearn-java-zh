- en: Chapter 13. Writing Play Plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to make our applications manageable, we break them down into independent
    modules. These modules can also be extracted into individual projects/libraries.
  prefs: []
  type: TYPE_NORMAL
- en: A Play plugin is nothing but another module with an additional ability—of binding
    tasks before starting, on starting and/or stopping a Play application. In this
    chapter, we will see how to write custom plugins.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Plugin definition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plugin declaration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exposing services through plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tips for writing a plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plugin definition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A Play plugin can be defined by extending `play.api.plugin`, which is defined
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we might be in a situation where we need to send an e-mail when an application
    is started or stopped so that the administrator can later use this time interval
    to monitor the application''s performance and check why it stopped. We could define
    a plugin to do this for us:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also define plugins that make use of other libraries. We might need
    to build a plugin that builds a connection pool to `Cassandra` (a NoSQL database)
    on startup and allows users to use this pool later on. To build this plugin, we
    will use the `cassandra-driver` for Java. Our plugin will then be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, `CassandraConnection` is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `cassandra-driver` node is declared as a library dependency and its classes
    are imported where they're required.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The dependency on Play in the `build` definition of the plugin should be marked
    as provided, since the application using the plugin will already have a dependency
    on Play, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Plugin declaration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have defined a plugin, let''s see how the Play Framework identifies
    and enables it for the application. `ApplicationProvider` for the production and
    development mode (static and reloadable applications, respectively) both rely
    on `DefaultApplication`, which is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The `trait WithDefaultPlugins` line is responsible for binding the plugins
    to application''s life cycle. It is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: So, we should declare our plugin class in a file with the `play.plugins` name.
    All the plugin declarations obtained from one or more `play.plugins` files are
    combined and sorted. Each declared plugin has a priority assigned to it, which
    is used for sorting. Once sorted, the plugins are loaded in order prior to the
    application's startup.
  prefs: []
  type: TYPE_NORMAL
- en: 'The priorities should be set based on the dependencies of a plugin. The suggested
    priorities are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`100`: This priority is set when a plugin has no dependencies, such as the
    messages plugin (used for `i18n`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`200`: This priority is set for the plugins that create and manage the DB connection
    pools'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`300-500`: This priority is set for the plugins that depend on a database,
    such as JPA, Ebean, and evolutions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`10000` is reserved for a global plugin intentionally so that it loads after
    all the other plugins have been loaded. This allows developers to use other plugins
    in the global object without additional configuration.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The default `play.plugins` file just has a basic plugin declaration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'A few more plugin declarations from the Play modules are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Generally, Play plugins need to be specified as library dependencies in the
    application's `build` definition. Some plugins are bundled with a `play.plugins`
    file. However, for those without it, we will need to set the priority in our application's
    `conf/play.plugins` file.
  prefs: []
  type: TYPE_NORMAL
- en: Exposing services through plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Some plugins need to provide users with helper methods to simplify transactions,
    whereas others need not do anything besides some tasks to be added in the application''s
    life cycle. For example, our `NotifierPlugin` just sends e-mails on start and
    stop. Then, the methods of our `CassandraPlugin` can be accessed using the `plugin`
    method of `play.api.Application`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, the plugin can also provide a helper object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: A list of available modules is maintained at [https://www.playframework.com/documentation/2.3.x/Modules](https://www.playframework.com/documentation/2.3.x/Modules).
  prefs: []
  type: TYPE_NORMAL
- en: Tips for writing a plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some tips for writing a plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: Before you start writing a plugin, check if you really need one to solve your
    problem. If your problem does not require meddling with the application's life
    cycle, it's better to write a library.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While writing/updating a plugin, simultaneously build an example Play application
    that uses the plugin. This will allow you to check the functionality of it thoroughly
    with only the additional overheads of publishing the plugin locally for every
    change made.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the plugin exposes some services, try to provide a helper object. This makes
    it easier to maintain the API's consistency and also simplifies the developer
    experience.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, most of the plugins provided by Play (such as `akka`, `jdbc`, `ws`,
    and so on) provide helper objects through which the API is available. Internal
    changes to the plugin do not affect the public API exposed through these objects.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If and where possible, try and back up the plugin with sufficient tests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Document the API and/or special cases. This might come in handy in future for
    everyone who uses the plugin.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Play plugins provide us with the flexibility to perform specific tasks at
    a desired stage in the application's life cycle. Play has some plugins that are
    commonly required by most applications, such as web services, authentication,
    and so on. We discussed how the Play plugins work and how we can build custom
    plugins to meet different requirements.
  prefs: []
  type: TYPE_NORMAL
