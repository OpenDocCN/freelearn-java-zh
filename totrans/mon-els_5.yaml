- en: Chapter 5. System Monitoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The previous two chapters focused on Elasticsearch monitoring tools, including
    Elasticsearch-head, Bigdesk, and Marvel. This chapter will introduce another monitoring
    tool, **Kopf**. We will also discuss **Elasticsearch, Logstash, and Kibana** (**ELK**),
    Nagios, and various GNU/Linux command line tools in terms of general purpose system
    monitoring.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers these topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring Elasticsearch with Kopf
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring an Elasticsearch, Logstash, and Kibana (ELK) stack for system log
    file aggregation and analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: System-level monitoring of a cluster using Nagios
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GNU/Linux command line tools for system and process management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with Kopf
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kopf is a web-based cluster management tool like Elasticsearch-head, but has
    a more modern look and a few different features. With Kopf, users can check the
    state of nodes and indices, run REST queries, and perform basic management tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Kopf
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Kopf works on Elasticsearch 0.90.x and up. Use the following table to determine
    which Kopf version is best suited to your cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Elasticsearch Version | Kopf Branch |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 0.90.x | 0.90 |'
  prefs: []
  type: TYPE_TB
- en: '| 1.x | 1.0 |'
  prefs: []
  type: TYPE_TB
- en: '| 2.x | 2.0 |'
  prefs: []
  type: TYPE_TB
- en: 'To install Kopf, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install Kopf on at least one node in your cluster as an Elasticsearch plugin
    with the following command, replacing `{branch}` with the value from the `branch`
    column in the preceding table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This example will install Kopf on `elasticsearch-node-01`. Since this node
    is running Elasticsearch 2.3.2, the command will look like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To open Kopf, browse to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see something like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Installing Kopf](img/B03798_05_01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Kopf cluster page
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| No. | Description |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **1** | Titlebar and cluster state |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **2** | Cluster summary |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **3** | Display filters |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **4** | Node and index actions |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **5** | Indices |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **6** | Nodes |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **7** | Shard allocations |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: The green title bar on this page indicates that the cluster is in a `green`
    state. Likewise, the title bar changes to yellow or red if it enters either of
    those states.
  prefs: []
  type: TYPE_NORMAL
- en: All Kopf dashboard pages also show the indicators listed on the top of this
    screenshot, including number of nodes, indices, shards, documents, and total index
    size.
  prefs: []
  type: TYPE_NORMAL
- en: The cluster page
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The screenshot in the previous section shows the Kopf cluster page. The Elasticsearch
    cluster''s nodes, indices, and shard allocations are listed on this page. This
    page also provides the following administrative capabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: Closing and opening indices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimizing indices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refreshing indices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clearing index caches
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting indices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disabling/enabling shard allocation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewing index settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewing index mappings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Like the **Cluster Overview** tab in Elasticsearch-head, the Kopf **cluster**
    page is a great first stop when diagnosing Elasticsearch issues. It will inform
    you of the cluster state, whether a node is down, and if the node has a high heap/disk/CPU/load.
  prefs: []
  type: TYPE_NORMAL
- en: The nodes page
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The **nodes** page, shown in the following screenshot, provides figures for
    load, CPU usage, JVM heap usage, disk usage, and uptime for all nodes in the cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The nodes page](img/B03798_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Kopf nodes page
  prefs: []
  type: TYPE_NORMAL
- en: This page, like the **cluster** page, is a good starting point when diagnosing
    Elasticsearch issues.
  prefs: []
  type: TYPE_NORMAL
- en: The rest page
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Kopf **rest** page is a general-purpose tool for running arbitrary queries
    against Elasticsearch. You can run any query in the Elasticsearch API using this
    page. The following screenshot is running a simple **Search** **API** query against
    the Elasticsearch cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The rest page](img/B03798_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Kopf rest page
  prefs: []
  type: TYPE_NORMAL
- en: The **rest** page is useful for everything from testing query syntax to retrieving
    cluster metrics, and can help in gauging and optimizing query performance. For
    example, if a particular query is running slowly, use the **rest** page to test
    different variations of the query and determine which query components have the
    highest performance impact.
  prefs: []
  type: TYPE_NORMAL
- en: The more dropdown
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The **more** dropdown has a variety of other cluster management tools, including:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Tool Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Create Index | Create an index and assign a number of shards, replicas, mapping,
    and other settings |'
  prefs: []
  type: TYPE_TB
- en: '| Cluster Settings | Configure cluster, routing, and recovery settings |'
  prefs: []
  type: TYPE_TB
- en: '| Aliases | View existing and create new index aliases |'
  prefs: []
  type: TYPE_TB
- en: '| Analysis | Test and verify index analyzers |'
  prefs: []
  type: TYPE_TB
- en: '| Percolator | View existing and create new percolator queries |'
  prefs: []
  type: TYPE_TB
- en: '| Warmers | View existing and create new index warmer queries |'
  prefs: []
  type: TYPE_TB
- en: '| Snapshot | Create new index snapshots on the local filesystem, URL, S3, HDFS,
    or Azure |'
  prefs: []
  type: TYPE_TB
- en: '| Index Templates | View existing and create new index templates |'
  prefs: []
  type: TYPE_TB
- en: '| Cat APIs | Run a subset of all possible Elasticsearch API "Cat" methods |'
  prefs: []
  type: TYPE_TB
- en: '| Hot Threads | Query for Elasticsearch "Hot" threads |'
  prefs: []
  type: TYPE_TB
- en: 'The following screenshot shows the **HOT THREADS** page. This page is helpful
    when diagnosing slow search and indexing performance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The more dropdown](img/B03798_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Hot Threads
  prefs: []
  type: TYPE_NORMAL
- en: Working with Logstash and Kibana
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Logstash is a utility for aggregating and normalizing log files from disparate
    sources and storing them in an Elasticsearch cluster. Once logs are stored in
    Elasticsearch, we will use Kibana, the same tool Marvel's user interface is built
    on, to view and explore our aggregated logs.
  prefs: []
  type: TYPE_NORMAL
- en: ELK
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Elasticsearch community refers to the Elasticsearch, Logstash, and Kibana
    tool combination as the ELK stack. This section shows how to load NGINX server
    logs into ELK, but there are many other potential use cases for these technologies.
  prefs: []
  type: TYPE_NORMAL
- en: 'ELK can help us explore NGINX server logs by:'
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing server traffic over time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plotting server visits by location on a map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Searching logs by resource extension (HTML, JS, CSS, and so on), IP address,
    byte count, or user-agent strings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering web requests that result in internal server errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding attackers in a distributed denial of service attack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other uses for ELK include:'
  prefs: []
  type: TYPE_NORMAL
- en: Logging all Elasticsearch queries in a web application for future performance
    analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Aggregating server system logs into one location for analysis and visualization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging operations from a data processing or ingestion pipeline for future analysis
    and auditing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although this example will store aggregate log data from Logstash directly into
    Elasticsearch, it's important to ensure that these aggregated logs do not affect
    the performance of the production cluster. To avoid this potential performance
    problem, we'll configure Logstash to route logs to a secondary monitoring cluster;
    in our case, this is the `elasticsearch-marvel-01` node.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Logstash
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It doesn''t matter what host Logstash lives on, since it can redirect logs
    to any Elasticsearch instance. Since Kibana will be installed on `elasticsearch-marvel-01`,
    we''ll put Logstash there as well:'
  prefs: []
  type: TYPE_NORMAL
- en: 'From `elasticsearch-marvel-01`, run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Loading NGINX logs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now let''s load some sample NGINX logs into Elasticsearch using Logstash. While
    Logstash has built-in parsers for many different log types (Apache, Linux syslogs,
    and so on), it doesn''t natively support NGINX logs. This means that users have
    to explicitly tell Logstash how to deal with these files. To address this, follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Put some sample NGINX log files in `/opt/logstash/``logs:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Loading NGINX logs](img/B03798_05_05.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: NGINX log files for Logstash
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a new file on `/opt/logstash/patterns/nginx.grok` on `elasticsearch-marvel-01`
    with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then create a Logstash configuration file at `/opt/logstash/logstash.conf`
    with the following content:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This configuration tells Logstash to read all `access.log*` files from the filesystem
    using our newly defined `nginx` format, identifies the timestamp column used by
    our NGINX format, tells Logstash to use a Geo IP lookup on the visitor's IP address,
    and finally tells Logstash to save logs to the Elasticsearch host instance at
    `elasticsearch-marvel-01:9200`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Read more about the Logstash configuration file format at: [https://www.elastic.co/guide/en/logstash/current/configuration.html](https://www.elastic.co/guide/en/logstash/current/configuration.html).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now run Logstash, specifying the configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After a few minutes, Logstash will load all of the data into Elasticsearch.
    The new index created in Kopf should now be viewable.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The next section will focus on exploring the data in Kibana.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Loading NGINX logs](img/B03798_05_06.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Viewing Logstash index from Kopf
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This process will go much faster if the `geoip` configuration setting from the
    `logstash.conf` configuration file is removed.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Kibana
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Follow these steps to install Kibana on your system:'
  prefs: []
  type: TYPE_NORMAL
- en: Determine the appropriate version of Kibana to download from [https://www.elastic.co/downloads/kibana](https://www.elastic.co/downloads/kibana).
    Since this example is using Elasticsearch 2.3.2, we'll install Kibana 4.5.4.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Download and unpackage Kibana on `elasticsearch-marvel-01` in the `/opt/kibana/`
    directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit Kibana''s `conf/kibana.yml` file to point to the correct Elasticsearch
    host. In this case, change this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now start Kibana:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Visit `http://elasticsearch-marvel-01:5601/` to view the Kibana landing page.
    It should look like the following screenshot:![Installing Kibana](img/B03798_05_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring Kibana
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Notice `logstash-*` is already selected by default, so just click the **Create**
    button to continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the **Discover** tab to start exploring your log data:![Installing
    Kibana](img/B03798_05_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for data in Kibana
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You may not see any data here at first. This is because all of the data loaded
    is more than 15 minutes old.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the date range filter in the upper-right of the page, by default set to
    **Last 15 Minutes**. Now select a more appropriate range, such as **This Month**.
    You should now start to see some results:![Installing Kibana](img/B03798_05_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Viewing log data from this month
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The `default _source` column is a little hard to read, so specify some columns
    from the left-hand side of the page: `http_user_agent`, `remote_addr`, and `status`.
    Clicking on any of these selected columns will run an aggregation query displaying
    the most commonly occurring values for each field:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Kibana](img/B03798_05_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Applying search filters to Kibana results
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Visualize** page lets us create arbitrary data visualizations. As an
    example, we''ll create two sample visualizations: a Tile map to plot the geolocated
    IP addresses in our dataset, and a Vertical bar chart for displaying counts of
    different HTTP status codes in the log files. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: First, configure the Tile map visualization as shown here:![Installing Kibana](img/B03798_05_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Geospatial visualization of Kibana results
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Save** to save your changes, and create the Vertical bar chart:![Installing
    Kibana](img/B03798_05_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Breakdown by HTTP status code
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After saving this chart, go to the **Dashboard** page in order to display both
    components on the same page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the two components by clicking the **Add Visualization** button. Move
    them around the dashboard to resize and reorder them until you get something like
    this:![Installing Kibana](img/B03798_05_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Kibana dashboard view
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Learn more about Kibana and Logstash by visiting the official Elasticsearch
    documentation at:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[https://www.elastic.co/videos/kibana-logstash](https://www.elastic.co/videos/kibana-logstash)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.elastic.co/products/kibana](https://www.elastic.co/products/kibana)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.elastic.co/products/logstash](https://www.elastic.co/products/logstash)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with Nagios
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nagios is a system monitoring and alerting tool. This section will focus on
    configuring a simple Nagios installation that monitors the nodes in our Elasticsearch
    cluster, as well as the Elasticsearch process on those. If a node or process shuts
    down, Nagios will send us an alert.
  prefs: []
  type: TYPE_NORMAL
- en: It's a good idea to install Nagios on a host outside of the Elasticsearch clusters
    in order to avoid affecting the monitoring process due to other things going on
    in the system, such as high Elasticsearch load. Create a new host for Nagios and
    call it `elasticsearc` `h-nagios-01.`
  prefs: []
  type: TYPE_NORMAL
- en: Installing Nagios
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In addition to the dedicated Nagios host, `elasticsearch-nagios-01`, install
    the **Nagios Remote Plugin Executor** (**NRPE**) server on all of the Elasticsearch
    cluster nodes in order to monitor the Elasticsearch process. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command on each of the Elasticsearch nodes: `elasticsearch-node-01`,
    `elasticsearch-node-02`, `elasticsearch-node-03`, and `elasticsea``rch-marvel-01`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then install Nagios on the new host `elasticsearch-nagios-01`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This process will ask you to enter a password. Make sure you remember it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now a Nagios plugin is needed to ensure that Elasticsearch is running. There
    are several plugins available, but this book uses a simple script available on
    GitHub: [https://github.com/orthecreedence/check_elasticsearch](https://github.com/orthecreedence/check_elasticsearch).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To download and install this script on `elasticsearch-nagios-01`, run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add a Nagios command to run this plugin. On `elasticsearch-nagios-01`,
    create a new file, `/etc/nagios-plugins/config/elasticsearch.cfg`, with this content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Lastly, specify which hosts to monitor for the Nagios server. Be sure to have
    it monitor the Elasticsearch process on those hosts, using the `check_elasticsearch`
    utility, by editing the configuration file `/etc/nagios3/conf.d/localhost_nagios2.cfg`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, configure `elasticsearch-node-01`, `elasticsearch-node-02`, `elasticsearch-node-03`,
    and `elasticsearch-marvel-01` to allow our Nagios host `elasticsearch-nagios-01`
    to collect metrics:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the `allowed_hosts` setting to include the `elasticsearch-nagios-01` IP
    address; in our case, this is `192.168.56.130`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now restart the NRPE server on all nodes in our Elasticsearch clusters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And finally, restart `nagios3` on `elasticsearch-nagios-01`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open a web browser to see the Nagios web administration portal, with the username
    `nagiosadmin` and the password you entered earlier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After giving Nagios a few minutes to collect metrics on all nodes, click on
    the **Hosts** sidebar link to see the state of all nodes in the clusters:![Installing
    Nagios](img/B03798_05_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Viewing Elasticsearch hosts in Nagios
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Services** in the left-hand menu to see the state of the Elasticsearch
    process on each node:![Installing Nagios](img/B03798_05_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Viewing Elasticsearch status in Nagios
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice that in `elasticsearch-marvel-01`, the Elasticsearch process is in a
    yellow **WARNING** state. This means that the cluster is in a `yellow` state,
    because there is only one node in the Marvel cluster and not all shards are replicated.
  prefs: []
  type: TYPE_NORMAL
- en: Now we'll demonstrate what Nagios does when one node shuts down and we stop
    the Elasticsearch process on a different node.
  prefs: []
  type: TYPE_NORMAL
- en: 'Shut down `elasticsearch-node-01` and disable Elasticsearch on `elasticsearch-node-02`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The next time Nagios polls for the cluster state (this will take a few minutes),
    the following will display on the Nagios web dashboard''s services page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Nagios](img/B03798_05_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Error reporting in Nagios
  prefs: []
  type: TYPE_NORMAL
- en: Nagios now indicates that `elasticsearch-node-01` is down and that it can't
    connect to the Elasticsearch process on `elasticsearch-node-02`. Nagios also indicates
    Elasticsearch has entered a `red` state on `elasticsearch-node-03` because not
    all shards are available. Nagios will send `admin@your-domain.com` an email about
    the warnings and errors, based on our previous configuration. Things will return
    to normal after starting `elasticsearch-node-01` and restarting Elasticsearch
    on `elast` `icsearch-node-02`.
  prefs: []
  type: TYPE_NORMAL
- en: Command line tools for system and process management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The command line is an invaluable tool for system monitoring. In this section,
    we'll go over a few basic GNU/Linux command line utilities for system and process
    management. Knowing these tools is essential for anyone managing an Elasticsearch
    cluster on GNU/Linux.
  prefs: []
  type: TYPE_NORMAL
- en: top
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `top` command lists processes with the highest CPU and memory. This tool
    is useful to determine whether a process other than Elasticsearch is hogging resources,
    or to check whether Elasticsearch is using an abnormal amount of CPU or memory.
  prefs: []
  type: TYPE_NORMAL
- en: The `top` command refreshes automatically, so you only have to run it once and
    watch.
  prefs: []
  type: TYPE_NORMAL
- en: 'When running the command, you should see the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![top](img/B03798_05_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The top command
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Press *Shift*+*M* while `top` is running to sort processes by those using the
    most memory instead of CPU.
  prefs: []
  type: TYPE_NORMAL
- en: tail
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `tail -f` command is useful for viewing log files in real time. Use it
    to view Elasticsearch log files as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '![tail](img/B03798_05_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '"tailing" Elasticsearch log files'
  prefs: []
  type: TYPE_NORMAL
- en: grep
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `grep` command is a general purpose text search tool. One useful application
    of `grep` is to search through a directory of log files for a specific string.
    To *grep* or search `/var/log/elasticsearch` for all logged exceptions, run the
    following command with the `-r` (recursive) and `-i` (case insensitive search)
    options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Assuming there are some exceptions logged in your Elasticsearch log files,
    you should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![grep](img/B03798_05_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '"grepping" log files for exceptions'
  prefs: []
  type: TYPE_NORMAL
- en: ps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the `ps` command along with the `grep` command to see whether a particular
    process is running. This is a useful sanity check if you are running into issues
    stopping or starting Elasticsearch (or another process).
  prefs: []
  type: TYPE_NORMAL
- en: 'To check whether Elasticsearch is running, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will output nothing if Elasticsearch is not running. If it''s
    running, you should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ps](img/B03798_05_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using ps to view the Elasticsearch process
  prefs: []
  type: TYPE_NORMAL
- en: kill
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the `kill` command stop a process that won''t shut down gracefully. For
    example, to shut down the Elasticsearch process listed previously, run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '![kill](img/B03798_05_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Kill the Elasticsearch process and verify it with the ps command
  prefs: []
  type: TYPE_NORMAL
- en: free
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `free` command tells us how much memory is in use on a system. Its usage
    is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Running this command will yield something similar to:'
  prefs: []
  type: TYPE_NORMAL
- en: '![free](img/B03798_05_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The free command shows the amount of RAM on the system
  prefs: []
  type: TYPE_NORMAL
- en: This output means that we are using 333 MB of our available 490 MB memory store.
  prefs: []
  type: TYPE_NORMAL
- en: du and df
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `du` and `df` commands tell us how much disk space is available on the
    host. Use `du` to see how much data is stored in the current directory, as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a result similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![du and df](img/B03798_05_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The du command calculates the size of a directory
  prefs: []
  type: TYPE_NORMAL
- en: In this case, there are 15 MB of log files in `/var/log/elasticsearch/`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use `df` to see how much disk space is available across the system, as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a result similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![du and df](img/B03798_05_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Disk usage on elasticsearch-node-01
  prefs: []
  type: TYPE_NORMAL
- en: The output here says there is `1.3G` of available storage left on the `/` mount
    point.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that in both of these commands, the `-h` flag stands for **human readable**,
    meaning they will output values in terms of KB, MB, or GB, as opposed to just
    bytes.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter examined the Elasticsearch monitoring tool Kopf, the Elasticsearch,
    Logstash, and Kibana (ELK) log aggregation stack, the system monitoring tool Nagios,
    and various GNU/Linux command line utilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some takeaways are:'
  prefs: []
  type: TYPE_NORMAL
- en: Kopf is an Elasticsearch monitoring tool similar to Elasticsearch-head, but
    provides a few different metrics.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Elasticsearch, Logstash, and Kibana (ELK) stack is a tool for searching,
    analyzing, enriching, and visualizing log files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consider using a tool such as Nagios to monitor an Elasticsearch cluster. Nagios
    can be configured to send out email notifications when a process goes down or
    if the node itself goes down.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a few GNU/Linux command tools, we can gather many of the same metrics
    provided by the various Elasticsearch monitoring tools.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next chapter will discuss troubleshooting Elasticsearch performance and
    reliability issues. The monitoring tools discussed in this chapter will be useful
    when tackling the real-world problems outlined in upcoming chapters.
  prefs: []
  type: TYPE_NORMAL
