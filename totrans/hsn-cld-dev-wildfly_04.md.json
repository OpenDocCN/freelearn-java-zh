["```java\nmvn clean wildfly-swarm:run -Dswarm.http.port=12345\n```", "```java\n(...)\n\n    <dependencies>\n <!-- 2 -->\n <dependency>\n            <groupId>org.wildfly.swarm</groupId>\n            <artifactId>jaxrs</artifactId>\n            <version>${version.wildfly.swarm}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.wildfly.swarm</groupId>\n            <artifactId>cdi</artifactId>\n            <version>${version.wildfly.swarm}</version> </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <artifactId>maven-war-plugin</artifactId>\n                <version>${version.war.plugin}</version>\n                <configuration>\n                    <failOnMissingWebXml>false</failOnMissingWebXml>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.wildfly.swarm</groupId>\n                <artifactId>wildfly-swarm-plugin</artifactId>\n                <version>${version.wildfly.swarm}</version>\n <!-- 1 -->\n <configuration>\n                    <mainClass>org.packt.swarm.petstore.catalog.Main</mainClass> </configuration>\n                <executions>\n                    <execution>\n                        <phase>package</phase>\n                        <goals>\n                            <goal>package</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n```", "```java\npackage org.packt.swarm.petstore.catalog;\n\nimport org.jboss.logging.Logger;\nimport org.wildfly.swarm.Swarm;\n\npublic class Main {\n\n    public static void main(String[] args) throws Exception {\n //1\n        new Swarm().start().deploy();\n        //2\n        Logger.getLogger(Main.class).info(\"I'M HERE!\");\n    }\n}\n```", "```java\n(...)\n\n    <dependencies>\n        <dependency>\n            <groupId>org.jboss.spec.javax.ws.rs</groupId>\n            <artifactId>jboss-jaxrs-api_2.0_spec</artifactId>\n            <scope>provided</scope>\n        </dependency>\n        <dependency>\n            <groupId>javax.enterprise</groupId>\n            <artifactId>cdi-api</artifactId>\n            <scope>provided</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.wildfly.swarm</groupId>\n            <artifactId>jaxrs</artifactId>\n            <version>${version.wildfly.swarm}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.wildfly.swarm</groupId>\n            <artifactId>cdi</artifactId>\n            <version>${version.wildfly.swarm}</version>\n        </dependency>\n <!-- 1 -->\n        <dependency>\n            <groupId>org.wildfly.swarm</groupId>\n            <artifactId>undertow</artifactId>\n            <version>${version.wildfly.swarm}</version> </dependency>\n        <dependency>\n            <groupId>org.jboss.logging</groupId>\n            <artifactId>jboss-logging</artifactId>\n            <version>3.3.0.Final</version>\n            <scope>provided</scope>\n        </dependency>\n\n    </dependencies>\n\n(...)\n```", "```java\npackage org.packt.swarm.petstore.catalog;\n\nimport org.wildfly.swarm.Swarm;\nimport org.wildfly.swarm.undertow.UndertowFraction;\n\npublic class Main {\n\n    public static void main(String[] args) throws Exception {\n //1\n        UndertowFraction undertowFraction = new UndertowFraction();\n        //2\n        undertowFraction.applyDefaults();\n        //3\n        undertowFraction.httpPort(12345);\n        //4\n        Swarm swarm = new Swarm();\n        //5\n        swarm.fraction(undertowFraction);\n        //6\n        swarm.start().deploy();\n    }\n}\n```", "```java\npackage org.packt.swarm.petstore;\n\nimport org.jboss.logging.Logger;\nimport org.wildfly.swarm.Swarm;\n\npublic class Main {\n\n    public static void main(String[] args) throws Exception {\n        new Swarm().start().deploy();\n    }\n}\n```", "```java\nmvn clean wildfly-swarm:run -Dswarm.http.port=12345\n```", "```java\npackage org.packt.swarm.petstore;\n\nimport org.jboss.logging.Logger;\nimport org.wildfly.swarm.Swarm;\n\npublic class Main {\n\n public static void main(String[] args) throws Exception {\n //1\n new Swarm(args).start().deploy();\n Logger.getLogger(Main.class).info(\"I'M HERE!\");\n }\n}\n```", "```java\n(...)\n\n    <properties>\n        (...)\n <version.hibernate.api>1.0.0.Final</version.hibernate.api>\n        <version.h2>1.4.187</version.h2>\n    </properties>\n\n    (...)\n\n    <dependencies>\n        (...)\n        <dependency>\n            <groupId>org.wildfly.swarm</groupId>\n            <artifactId>cdi</artifactId>\n            <version>${version.wildfly.swarm}</version>\n        </dependency>\n //1\n <dependency>\n            <groupId>org.wildfly.swarm</groupId>\n            <artifactId>datasources</artifactId>\n            <version>${version.wildfly.swarm}</version>\n        </dependency>\n        //2\n        <dependency>\n            <groupId>org.wildfly.swarm</groupId>\n            <artifactId>jpa</artifactId>\n            <version>${version.wildfly.swarm}</version>\n        </dependency>\n        //3\n        <dependency>\n            <groupId>org.hibernate.javax.persistence</groupId>\n            <artifactId>hibernate-jpa-2.1-api</artifactId>\n            <version>${version.hibernate.api}</version>\n        </dependency>\n        //4\n        <dependency>\n            <groupId>com.h2database</groupId>\n            <artifactId>h2</artifactId>\n            <version>${version.h2}</version>\n        </dependency> \n    </dependencies>\n\n   (...)\n\n</project>\n```", "```java\npackage org.packt.swarm.petstore.catalog.model;\n\nimport com.fasterxml.jackson.annotation.JsonIgnore;\n\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport javax.persistence.NamedQueries;\nimport javax.persistence.NamedQuery;\nimport javax.persistence.Table;\n\n//1\n@Entity\n//2\n@Table(name = \"item\")\n//3\n@NamedQueries({\n @NamedQuery(name=\"Item.findById\",\n                query=\"SELECT i FROM Item i WHERE i.itemId = :itemId\"),\n})\npublic class Item {\n\n //4\n    @Id\n    @JsonIgnore\n    private int id;\n\n    //5\n    @Column(length = 30)\n private String itemId;\n\n    //6\n    @Column(length = 30)\n private String name;\n    @Column\n    private int quantity;\n\n    @Column\n    private String description;\n\n    public String getItemId() {\n        return itemId;\n    }\n\n    public void setItemId(String itemId) {\n        this.itemId = itemId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getQuantity() {\n        return quantity;\n    }\n\n    public void setQuantity(int quantity) {\n        this.quantity = quantity;\n    }\n\n    public String getDescription() {\n        return description;\n    }\n\n    public void setDescription(String description) {\n        this.description = description;\n    }\n}\n```", "```java\npackage org.packt.swarm.petstore.catalog;\n\nimport org.packt.swarm.petstore.catalog.model.Item;\n\nimport javax.enterprise.context.ApplicationScoped;\nimport javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n\n@ApplicationScoped\npublic class CatalogService {\n\n //1\n @PersistenceContext(unitName = \"CatalogPU\")\n private EntityManager em;\n\n //2\n\n public Item searchById(String itemId) {\n return em.createNamedQuery(\"Item.findById\", Item.class).setParameter(\"itemId\", itemId).getSingleResult();\n>    }\n\n}\n```", "```java\npackage org.packt.swarm.petstore.catalog;\n\nimport org.wildfly.swarm.Swarm;\nimport org.wildfly.swarm.datasources.DatasourcesFraction;\n\npublic class Main {\n\n    public static void main(String[] args) throws Exception {\n        DatasourcesFraction datasourcesFraction = new DatasourcesFraction()\n //1\n                .jdbcDriver(\"h2\", (d) -> {\n d.driverClassName(\"org.h2.Driver\");\n                    d.xaDatasourceClass(\"org.h2.jdbcx.JdbcDataSource\");\n                    d.driverModuleName(\"com.h2database.h2\");\n                }) //2\n                .dataSource(\"CatalogDS\", (ds) -> {\n ds.driverName(\"h2\");\n                    ds.connectionUrl(\"jdbc:h2:mem:test;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE\");\n                    ds.userName(\"sa\");\n                    ds.password(\"sa\");\n                });\n\n        Swarm swarm = new Swarm();\n        swarm.fraction(datasourcesFraction);\n        swarm.start().deploy();\n    }\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<persistence\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        version=\"2.1\"\n        xmlns=\"http://xmlns.jcp.org/xml/ns/persistence\"\n        xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd\">\n <!-- 1 -->\n    <persistence-unit name=\"CatalogPU\" transaction-type=\"JTA\">\n        <!-- 2 -->\n        <jta-data-source>java:jboss/datasources/CatalogDS</jta-data-source>\n        <properties>\n            <!-- 3 -->\n            <property name=\"javax.persistence.schema-generation.database.action\" value=\"drop-and-create\"/>\n            <property name=\"javax.persistence.schema-generation.create-source\" value=\"metadata\"/>\n            <property name=\"javax.persistence.schema-generation.drop-source\" value=\"metadata\"/>\n            <!-- 4 -->\n            <property name=\"javax.persistence.sql-load-script-source\" value=\"META-INF/load.sql\"/>\n        </properties>\n    </persistence-unit>\n</persistence>\n```", "```java\nINSERT INTO ITEM(id, itemId, name, description, quantity) VALUES (1, 'turtle', 'turtle',  'Slow friendly reptile. Let your busy self see how it spends a hundred years of his life laying on sand and swimming.', 5);\nINSERT INTO ITEM(id, itemId, name, description, quantity) VALUES (2, 'hamster', 'hamster', 'Energetic rodent - great as a first pet. Will be your only inmate that takes his fitness training serviously.', 10);\nINSERT INTO ITEM(id, itemId, name, description, quantity) VALUES (3, 'goldfish', 'goldfish', 'With its beauty it will be the decoration of you aquarium. Likes gourmet fish feed and postmodern poetry.', 3);\nINSERT INTO ITEM(id, itemId, name, description, quantity) VALUES (4, 'lion', 'lion', 'Big cat with fancy mane. Loves playing the tag and cuddling with other animals and people.', 9);\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- 1 -->\n<module  name=\"com.h2database.h2\">\n\n  <resources>\n    <!-- 2 -->\n    <artifact name=\"com.h2database:h2:1.4.187\"/>\n  </resources>\n  <!-- 3 -->\n  <dependencies>\n    <module name=\"javax.api\"/>\n    <module name=\"javax.transaction.api\"/>\n    <module name=\"javax.servlet.api\" optional=\"true\"/>\n </dependencies>\n</module>\n\n```", "```java\n(...)\n\n    <dependencies>\n        <dependency>\n            <groupId>org.jboss.spec.javax.ws.rs</groupId>\n            <artifactId>jboss-jaxrs-api_2.0_spec</artifactId>\n            <scope>provided</scope>\n        </dependency>\n <!-- 1 -->\n        <dependency>\n            <groupId>org.wildfly.swarm</groupId>\n            <artifactId>jaxrs</artifactId>\n            <version>${version.wildfly.swarm}</version> </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <artifactId>maven-war-plugin</artifactId>\n                <version>${version.war.plugin}</version>\n                <configuration>\n                    <failOnMissingWebXml>false</failOnMissingWebXml>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.wildfly.swarm</groupId>\n                <artifactId>wildfly-swarm-plugin</artifactId>\n                <version>${version.wildfly.swarm}</version>\n <!-- 2 -->\n                <configuration>\n                    <mainClass>org.packt.swarm.petstore.catalog.Main</mainClass> </configuration>\n                <executions>\n                    <execution>\n                        <goals>\n                            <goal>package</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n\n(...)\n```", "```java\npackage org.packt.swarm.petstore.catalog;\n\nimport org.jboss.shrinkwrap.api.ShrinkWrap;\nimport org.wildfly.swarm.Swarm;\nimport org.wildfly.swarm.jaxrs.JAXRSArchive;\n\npublic class Main {\n\n    public static void main(String[] args) throws Exception {\n\n        Swarm swarm = new Swarm();\n        swarm.start();\n\n //1\n        JAXRSArchive deployment = ShrinkWrap.create(JAXRSArchive.class, \"deployment.war\");\n        //2\n        deployment.addClasses(CatalogApplication.class, CatalogResource.class, Item.class);\n        swarm.deploy(deployment);\n    }\n}\n```", "```java\npackage org.packt.swarm.petstore.catalog;\n\nimport org.jboss.shrinkwrap.api.Archive;\nimport org.wildfly.swarm.Swarm;\n\npublic class Main {\n\n public static void main(String[] args) throws Exception {\n\n Swarm swarm = new Swarm();\n swarm.start();\n\n //1\n Archive<?> deployment = swarm.createDefaultDeployment();\n swarm.deploy(deployment);\n\n }\n\n}\n```", "```java\n(...)\n\n    <!-- 1 -->\n    <dependencies>\n        <dependency>\n            <groupId>org.wildfly.swarm</groupId>\n            <artifactId>undertow</artifactId>\n            <version>${version.wildfly.swarm}</version>\n        </dependency>\n </dependencies>\n\n(...)\n```", "```java\n<html>\n<body>\n<h1>Hello World!</h1>\n</body>\n</html>\n```", "```java\npackage org.packt.swarm.petstore.catalog;\n\nimport org.jboss.shrinkwrap.api.ShrinkWrap;\nimport org.wildfly.swarm.Swarm;\nimport org.wildfly.swarm.undertow.WARArchive;\n\npublic class Main {\n\n    public static void main(String[] args) throws Exception {\n\n        Swarm swarm = new Swarm();\n\n //1\n        WARArchive deployment = ShrinkWrap.create(WARArchive.class);\n        //2\n        deployment.staticContent(\"webpage\");\n\n        swarm.start().deploy(deployment);\n\n    }\n}\n```", "```java\n<subsystem xmlns=\"urn:jboss:domain:datasources:4.0\">\n    <datasources>\n        <drivers>\n            <driver name=\"h2\" module=\"com.h2database.h2\">\n                <driver-class>org.h2.Driver</driver-class>\n                <xa-datasource-class>org.h2.jdbcx.JdbcDataSource</xa-datasource-class>\n            </driver>\n        </drivers>\n        <datasource jndi-name=\"java:jboss/datasources/CatalogDS\" pool-name=\"CatalogDS\" enabled=\"true\" use-java-context=\"true\">\n            <connection-url>jdbc:h2:mem:test;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE</connection-url>\n            <driver>h2</driver>\n        </datasource>\n        <datasource jndi-name=\"java:jboss/datasources/ExampleDS\" pool-name=\"ExampleDS\" enabled=\"true\" use-java-context=\"true\">\n            <connection-url>jdbc:h2:mem:test;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE</connection-url>\n            <driver>h2</driver>\n            <security>\n                <user-name>sa</user-name>\n                <password>sa</password>\n            </security>\n        </datasource>\n    </datasources>\n</subsystem>\n```", "```java\npackage org.packt.swarm.petstore.catalog;\n\nimport org.jboss.shrinkwrap.api.Archive;\nimport org.wildfly.swarm.Swarm;\nimport org.wildfly.swarm.datasources.DatasourcesFraction;\nimport org.wildfly.swarm.jaxrs.JAXRSArchive;\nimport org.wildfly.swarm.undertow.UndertowFraction;\nimport org.wildfly.swarm.undertow.WARArchive;\n\nimport java.net.URL;\n\npublic class Main {\n\n    public static void main(String[] args) throws Exception {\n\n        Swarm swarm = new Swarm();\n\n //1\n        ClassLoader cl = Main.class.getClassLoader();\n        URL xmlConfig = cl.getResource(\"datasources.xml\");\n\n //2\n        swarm.withXmlConfig(xmlConfig);\n\n        swarm.start().deploy();\n\n    }\n```", "```java\nswarm:\n  http:\n    port: 12345\n```", "```java\npackage org.packt.swarm.petstore.catalog;\n\nimport org.wildfly.swarm.Swarm;\n\nimport java.net.URL;\n\npublic class Main {\n\n    public static void main(String[] args) throws Exception {\n\n        Swarm swarm = new Swarm();\n\n        //1\n ClassLoader cl = Main.class.getClassLoader();\n        URL yamlConfig = cl.getResource(\"http-port.yml\");\n\n        //2\n        swarm.withConfig(yamlConfig);\n\n        swarm.start().deploy();\n    }\n}\n```", "```java\nswarm:\n  http:\n    port: 8080\n---\nproject:\n    stage: test\nswarm:\n    http:\n        port: 12345\n---\nproject:\n    stage: QA\nswarm:\n    http:\n        port: 12346\n```", "```java\nmvn wildfly-swarm:run -Dswarm.project.stage=QA\n```", "```java\nswarm:\n  datasources:\n    data-sources:\n      CatalogDS:\n        driver-name: h2\n        connection-url: jdbc:h2:mem:test;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE\n        user-name: sa\n        password: sa\n    jdbc-drivers:\n          h2:\n            driver-class-name: org.h2.Driver\n            xa-datasource-name: org.h2.jdbcx.JdbcDataSource\n            driver-module-name: com.h2database.h2\n\n```", "```java\npackage org.packt.swarm.petstore.catalog;\n\nimport org.wildfly.swarm.Swarm;\n\nimport java.net.URL;\n\npublic class Main {\n\n    public static void main(String[] args) throws Exception {\n        Swarm swarm = new Swarm();\n\n //1\n ClassLoader cl = Main.class.getClassLoader();\n        URL ymlConfig = cl.getResource(\"datasources.yml\");\n\n        swarm.withConfig(ymlConfig);\n\n        swarm.start().deploy();\n    }\n}\n```", "```java\npackage org.packt.swarm.petstore.catalog;\n\nimport org.jboss.shrinkwrap.api.Archive;\nimport org.wildfly.swarm.Swarm;\nimport org.wildfly.swarm.datasources.DatasourcesFraction;\nimport org.wildfly.swarm.undertow.UndertowFraction;\n\npublic class Main {\n\n public static void main(String[] args) throws Exception {\n Swarm swarm = new Swarm();\n\n //1\n ClassLoader cl = Main.class.getClassLoader();\n URL xmlConfig = cl.getResource(\"standalone.xml\");\n swarm.withXMLFile(xmlFile);\n\n //2\n UndertowFraction undertowFraction = new UndertowFraction();\n undertowFraction.applyDefaults();\n undertowFraction.httpPort(12345);\n swarm.fraction(undertowFraction);\n\n //3\n Archive<?> deployment = swarm.createDefaultDeployment();\n deployment.addModule(\"com.h2database.h2\");\n\n //4\n swarm.start().deploy();\n }\n\n}\n```"]