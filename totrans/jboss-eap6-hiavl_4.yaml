- en: Chapter 4. Load Balancing with mod_jk
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we set up two EAP6 servers running in domain mode with
    the `full-ha` profile. In this chapter, let's set up a load balancer that could
    dispatch user requests to these two EAP6 servers.
  prefs: []
  type: TYPE_NORMAL
- en: 'The load balancer we use in this chapter is called mod_jk provided by the Apache
    community. It''s easy to use and yet very powerful. The following diagram shows
    how it works:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Load Balancing with mod_jk](img/2432OS_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following are some notes regarding the previous diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: mod_jk is a dynamic library that can be used as an Apache httpd module. In this
    chapter, we'll learn how to use it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AJP13 is a binary protocol used by mod_jk to proxy user requests to JBoss EAP6
    servers. AJP13 stands for Apache JServ Protocol 1.3 and is widely used by Tomcat,
    Jetty, and other web servers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When Apache httpd receives user requests, the mod_jk module will wrap the HTTP
    request into AJP13 format and pass it to JBoss EAP6, and the AJP connector in
    JBoss EAP6 will receive the proxy request from httpd. Then, EAP6 will process
    the request and send the response back to Apache httpd. Finally, Apache httpd
    will process the AJP response from JBoss EAP6 and transform it into the real HTTP
    response and send it back to a user.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In practice, we usually bind the load balancer to the public IP address so it
    can listen to user requests from the Internet and put the EAP6 worker nodes in
    the local network. In addition, we should also bind a local IP address for the
    load balancer so it can communicate with EAP6 servers. Users just need to communicate
    with the load balancer to access the service, and they don't need to understand
    the architecture behind the load balancer. In addition, exposing the internal
    architecture of a cluster to the public is unnecessary and could introduce a potential
    security risk.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing a machine to install Apache httpd
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we have seen in the previous chapter, our cluster deployment structure will
    be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Preparing a machine to install Apache httpd](img/2432OS_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We have configured the two EAP6 servers in the previous chapter. Now, we will
    install Apache httpd and mod_jk on a machine as the load balancer, and let''s
    call it `lb`. This machine will have two IP addresses:'
  prefs: []
  type: TYPE_NORMAL
- en: A public IP address that will serve user requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A local IP address that can communicate with JBoss EAP6 servers in the local
    network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If your computer has just one local IP address, you can use it to serve both
    user requests and to communicate with EAP6 servers. But in practice, we usually
    hide the clustering architecture behind a firewall.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Compiling and installing Apache httpd
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let's learn how to compile and install Apache httpd. You may ask why we
    need to compile the Apache httpd by ourselves. There are multiple reasons. Usually,
    the httpd is provided by different platforms that have different versions and
    different configurations. For example, if you are using Ubuntu Linux and I'm using
    MacOS, our httpd versions will be different and our configurations of httpd will
    also be different.
  prefs: []
  type: TYPE_NORMAL
- en: In practice, compiling httpd, mod_jk, and mod_cluster is also common. This is
    because sometimes the newer versions of mod_jk and mod_cluster are released in
    the source code format before the binary format. So, we need to build them by
    ourselves.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading httpd
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, let's download the source code of Apache httpd from its website. We'll
    use the httpd 2.2.x in this book. This branch is currently the most stable version
    to work with mod_jk and mod_cluster. At the time of this writing, the newest version
    in 2.2.x branch is httpd 2.2.25, so let's use this to build our load balancer.
    Please note that the versions of httpd, mod_jk, and mod_cluster are very important,
    so please stick to the versions we used in this book or you may waste time on
    some bugs. You can download httpd 2.2.25 from [http://archive.apache.org/dist/httpd/httpd-2.2.25.tar.gz](http://archive.apache.org/dist/httpd/httpd-2.2.25.tar.gz).
  prefs: []
  type: TYPE_NORMAL
- en: 'After downloading it, please extract it to a directory that you have full access
    to. I''ve extracted it to `/packt/`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Because we'll use the absolute path in some situations, please don't put the
    source in a very deep path, or you'll create unnecessary difficulties when referring
    to your absolute path.
  prefs: []
  type: TYPE_NORMAL
- en: Compiling httpd
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To compile httpd, first let''s have a look at the contents of the sources shown
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Compiling httpd](img/2432OS_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the contents, there is a file called `configure` that will detect your system
    settings and generate the build script `Makefile` for you. Let''s run it first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'As shown in the previous code snippet, we have provided several options to
    the `configure` script. Let''s check them one by one:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `prefix=/packt/httpd` | The `prefix` option defines the binaries install
    location. |'
  prefs: []
  type: TYPE_TB
- en: '| `with-mpm=worker` | MPM is the httpd process engine. The `worker` engine
    currently works stable with httpd 2.2.x, so we''ll use it. |'
  prefs: []
  type: TYPE_TB
- en: '| `enable-mods-shared=most` | This option will compile the modules into the
    shared library. If we don''t enable it, the modules will be compiled as a static-linked
    library and we cannot disable them separately with the `LoadModule` directive
    in `httpd.conf` later. |'
  prefs: []
  type: TYPE_TB
- en: '| `enable-maintainer-mode` | An option to control the `Automake` tool. |'
  prefs: []
  type: TYPE_TB
- en: '| `with-expat=builtin` | Expat is an XML parser library written in C. |'
  prefs: []
  type: TYPE_TB
- en: '| `enable-ssl` | The SSL library will be needed in the chapter that concerns
    the SSL support in the clustering environment. |'
  prefs: []
  type: TYPE_TB
- en: '| `enable-proxy` | The `proxy` library is a dependency of mod_cluster. We''ll
    learn about mod_cluster in the next chapter. |'
  prefs: []
  type: TYPE_TB
- en: '| `enable-proxy-http` | `proxy-http` is needed by mod_cluster. |'
  prefs: []
  type: TYPE_TB
- en: '| `enable-proxy-ajp` | `proxy-ajp` is needed by mod_jk and mod_cluster. |'
  prefs: []
  type: TYPE_TB
- en: '| `disable-proxy-balancer` | `proxy-balancer` conflicts with mod_cluster, so
    we must disable it. |'
  prefs: []
  type: TYPE_TB
- en: 'After understanding the meaning of these options, please run the `configure`
    command with the preceding options. Now let''s run `make` to compile httpd:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Wait a few minutes and the compiling should finish.
  prefs: []
  type: TYPE_NORMAL
- en: Installing httpd
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After compiling it, use the following command to install the compiled binaries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, the compiled binaries are installed in the directory we've set
    the `--prefix` option. For me, it is `/packt/httpd`.
  prefs: []
  type: TYPE_NORMAL
- en: Starting httpd
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, let''s try to start httpd to see if it''s installed correctly. Go to the
    `bin` directory of your installed httpd and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We have used the `-k` option with the start command to tell httpd to start and
    the `-f` option with the full path of `httpd.conf` to make sure that the httpd
    server is using the configuration file we installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are using the `sudo` command because we need the root access to bind the
    httpd service to port 80\. If the server starts successfully, it will show some
    warnings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The warning is caused by the missing config of `ServerName` in `httpd.conf`.
    We''ll configure it correctly later. Now, let''s check the log output. Go to the
    logs directory and check `error_log`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The `error_log` file can help us to check if there are any errors when you
    run the httpd server. Here, we have used the tail command to check the tail contents
    of this log, and the `-f` option will keep updating the contents of `error_log`
    into the console. So, please keep the console window open; we can always check
    for any error when we are playing around with httpd. Now, we can use the cURL
    command to test the httpd service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, the HTTP service is up. Now, let's stop the httpd server and
    do some basic configurations in `httpd.con` `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Stopping httpd
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The command to stop httpd is similar to the command that starts it; only replace
    `start` with `stop`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'From `error_log`, we can see that the server has stopped:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Configuring httpd
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, let''s do some basic configuration for httpd. The first step is to back
    up your original `httpd.conf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s a good habit to keep an original copy of your configuration; in case
    we mess it up, we can restore it later. The next step is to open `http.conf` with
    your favorite editor and find the following code line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to change it for httpd to listen to the public address:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: I've configured this IP address on the machine lb, and it will be used to listen
    to user requests. Note that it's a good habit to bind httpd to specific IP addresses
    and ports to prevent potential security risks. Besides the public IP address,
    the machine lb also has a local IP address, `10.0.1.32`. The former one will be
    used for public access from users; the latter one sits in the same LAN with the
    two EAP6 servers. If your machine doesn't have two IP addresses, it's okay to
    just use the single address for both purposes. Just keep in mind, in practice,
    we usually put the clustering architecture behind a firewall.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s go to the next step. We need to find the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s put our own server name under this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s all we need to configure in `httpd.conf` for now. Let''s save the configuration
    and quit editing. Next, we need to make sure the hostname lb is mapped to our
    public IP address. For a Linux-like environment, we can put the mapping in `/etc/hosts`.
    Open the `httpd.conf` file and add the following line at the bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'After saving the configuration file, we can use the `ping` command to test
    the hostname:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s start httpd to check our configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'If you still keep the tail `-f logs/error_log` console opened, you can check
    it immediately to see if there are any errors during startup. If everything goes
    fine, we can access the httpd server by the hostname now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'As shown in the previous code snippet, the hostname lb is bound to the httpd
    server. In addition, during the httpd server startup, note that the warning **httpd:
    Could not reliably determine the server''s fully qualified domain name** disappeared.
    That''s because we have configured `ServerName` in `httpd.conf`.'
  prefs: []
  type: TYPE_NORMAL
- en: As we have configured httpd, the next step is to learn to use mod_jk.
  prefs: []
  type: TYPE_NORMAL
- en: Compiling and installing mod_jk
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The full name of mod_jk is Apache Tomcat Connector. It was originally designed
    to proxy HTTP requests from httpd to Tomcat, but as it is a standard AJP connector,
    it can be used on web containers that support the AJP protocol. Because JBoss
    EAP6 supports the AJP13 protocol, we can use mod_jk as its connector.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To save some typing, in the following text I'll use JK to refer to mod_jk.
  prefs: []
  type: TYPE_NORMAL
- en: Installing JK
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The download page of JK is at [http://tomcat.apache.org/download-connectors.cgi](http://tomcat.apache.org/download-connectors.cgi).
  prefs: []
  type: TYPE_NORMAL
- en: 'At the time of this writing, the newest version is 1.2.37, and it''s the version
    we''ll use in this book. Please download the 1.2.37 source bundle from the previously
    mentioned website and unzip it after download. After all this is finished, let''s
    have a look at the contents of the source package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'As we can see, mod_jk contains many components, but we only need to build the
    codes in the native directory. Let''s go into this directory and run the `configure`
    script inside:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Please note that we have been provided with the`—with-apxs` option to configure,
    because during the building process, it needs the httpd binaries. The configuration
    process is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s install it by running `make install`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: I have trimmed the log output and just left the important parts. From the previous
    log, we can see that the compiled shared binary `mod_jk.so` has been copied to
    `/packt/httpd/modules/`. Because we have set the httpd path using the `--with-apxs`
    option, during the installation process, the build script knows where to put the
    compiled binary.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of the log, JK has reminded us to configure `httpd.conf` to enable
    it. In the following section, we will perform this task.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring JK
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the JK source, there is a directory called `conf`. In this directory, JK
    has provided us some sample configuration files that we can refer to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s copy these files into httpd. First, let us create a new directory called
    `conf.d` in httpd:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, let''s copy the configuration file from JK source to `conf.d`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'We want httpd to load `conf.d/httpd-jk.conf` during startup. To achieve this
    goal, please open `conf/httpd.conf` and find many lines starting with `LoadModule`.
    At the bottom of these `LoadModule` directives, let''s put a new code line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The modification is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring JK](img/2432OS_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `Include` directive will tell httpd to load the files with suffix `.conf`
    in `conf.d` during startup. As we have put `httpd-jk.conf` into `conf.d`, it will
    be loaded during the httpd startup. Now let's move to JK configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring httpd-jk.conf
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We need to configure the JK properly. Please open the `httpd-jk.conf` in `conf.d`
    and let''s check some important configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: As shown in the previous code line, we can see that the `mod_jk.so` library
    is loaded.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, JK will find `workers.properties` in the `conf` directory. This
    property file is used to define our cluster structure. Let''s copy the sample
    `config` file named `workers.properties.minimal` from the JK source directory
    to `conf.d`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Later, we''ll go through the details in this file. Now, let''s go back to check
    `httpd-jk.conf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The `JkLogFile` directive defines the logfile used by JK.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The `JkLogLevel` directive defines the log level of JK. You can change it to
    `debug` to see more details when JK is running.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the JK shared memory file. Just keep it as it is. Now, let''s see the
    following two JK modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The previously mentioned two locations are for JK management components. We
    can define them in `workers.properties`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see that `jk-status` and `jk-manager` are actually the same thing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Just one of them is `read_only`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The other one can accept the management command. In this book, we''ll just
    configure JK using the configuration file and won''t cover the topic of `jk-manager`
    usages. Now, let''s go back to the configuration file. The access scope of `jk-status`
    and `jk-manager` are defined in the `Location` settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'That means we can only access `/jk-status` and `/jk-manager` from the localhost.
    This is secure because we don''t want these management components to be accessed
    remotely. To support it, we need to add a line in `conf/httpd.conf`. Under the
    existing `Listen` section, add another directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'It should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring httpd-jk.conf](img/2432OS_04_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This will let httpd to accept connection from the localhost. That's all we need
    to do to enable management consoles. Now, let's check `worker` `s.properties`.
  prefs: []
  type: TYPE_NORMAL
- en: The workers.properties configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will define our cluster structure in `workers.properties` that we''ve copied
    to the `conf` directory. The content of this file is straightforward, which is
    shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The first line of configuration defines two workers: `lb` and `jk-status`.
    We know that `jk-status` is used for mounting the management component of JK,
    and its type is `status`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For the worker `lb`, we see that its type is `lb`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The `lb` type defines a load balancer in JK, and it can be used to dispatch
    user requests to worker nodes. We see that the example provided by JK has one
    worker node called `node1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, `node1` is a node that supports the AJP13 protocol:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The preceding configuration needs to be modified. We have two worker nodes,
    which are the two EAP6 servers running on master and slave, and their IP addresses
    are `10.0.1.13` and `10.0.1.19` as we know.
  prefs: []
  type: TYPE_NORMAL
- en: 'We know the two EAP6 servers are running in the domain mode and we are using
    `other-server-group`, and master is running as the domain controller. So let''s
    check `domain.xml` on master:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'The `other-server-group` uses the `full-ha-sockets` binding group. And the
    AJP port is bound to 8009\. But don''t forget the `port-offset` settings in `host.xml`
    on master and slave. On the master system, we have the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'On the slave system, we have the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'So their bound AJP ports are *8009 + 250 = 8259*. According to the settings
    in these two worker nodes, let''s modify the configuration in `workers.properties`.
    The following comprises the full contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'In the previous configuration file, we configured our two EAP6 servers as the
    worker nodes of `lb`. The following diagram shows their relationship:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The workers.properties configuration](img/2432OS_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After configuring `workers.properties`, we need to go back to `conf.d/httpd-jk.conf`
    to add a mount point to our cluster. Under the `JkWorkersFile` directive, add
    the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'The configuration is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The workers.properties configuration](img/2432OS_04_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It will tell httpd to redirect all the HTTP requests to `lb`, and `lb` will
    proxy the request to EAP6 servers with the AJP13 protocol. That's all for the
    configuration. Now let's test our cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Please shut down the httpd server and then restart it. If you have followed
    all the instructions in the previous sections, the server should start correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that you have started two EAP6 servers in the domain mode, and the
    project `cluster-demo1` has been deployed to `other-server-group`. We'll use these
    two worker nodes for testing.
  prefs: []
  type: TYPE_NORMAL
- en: As we have bound the public IP address of the load balancer to the hostname
    `lb`, let's access it by the hostname. Open a web browser and enter the URL `http://lb`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If everything goes well, we should see the EAP home page now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing the cluster](img/2432OS_04_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'From the previous screenshot, we see that the request is forwarded to the EAP6
    servers. Now let''s try to access `cluster-demo1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'We can check the server output of the two EAP6 servers to see which is actually
    processing this request. In my cluster, this request is handled by `master-server`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s shut down the EAP6 server that is serving this request. For my cluster,
    I press *Ctrl* + *C* on my `master-server` to shut down:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, I use `cURL` to access the load balancer again. The request is forwarded
    to another EAP server. It is `slave-server` processing the user request this time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: From the users' perspective, they are not affected by one worker node shutdown
    in the cluster.
  prefs: []
  type: TYPE_NORMAL
- en: The jk-status module
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Finally, let''s have a brief look at the `jk-status` module. Open your web
    browser from the machine of your load balancer. Then, access the `jk-status` by
    its URL: `http://localhost/jk-status`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will see the status of two worker nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The jk-status module](img/2432OS_04_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: From the previous screenshot, we can check the running statuses of the two EAP6
    servers and how many requests they have processed.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned how to use JK as a load balancer to proxy user
    requests. As you can see, JK is very easy to use and yet powerful. It relies on
    `workers.properties` to define the structure of the cluster. When a worker node
    in a cluster crashes, JK will failover the user requests to other nodes in the
    cluster. We haven't touched all the features that JK has provided to us, for example,
    a fine-grained route matching and the usage of `jk-status` for management tasks.
    You can refer to the JK online document for these topics.
  prefs: []
  type: TYPE_NORMAL
