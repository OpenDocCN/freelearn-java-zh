["```java\ndef weatherImperative(eventId: Int): Unit = {\n  val evt = getEvent(eventId)  // Will block\n  val weather = getWeather(evt.time, evt.location)  // Will block\n  if (weather == \"bad\") notifyUser() // Will block\n}\n```", "```java\ncase class Event(time: Long, location: String)\ndef getEvent(id: Int): Event = {\n  Thread.sleep(1000)  // Simulate delay\n  Event(System.currentTimeMillis, \"New York\")\n}\ndef getWeather(time: Long, location: String): String = {\n  Thread.sleep(1000) // Simulate delay\n  \"bad\"\n}\ndef notifyUser(): Unit = Thread.sleep(1000) // Simulate delay\n```", "```java\n// Business logic methods\ndef notifyThread(weather: String): Thread = thread {\n  if (weather == \"bad\") notifyUser()\n}\ndef weatherThread(evt: Event): Thread = thread {\n  val weather = getWeather(evt.time, evt.location)\n  runThread(notifyThread(weather))\n}\nval eventThread: Thread = thread {\n  val evt = getEvent(eventId)\n  runThread(weatherThread(evt))\n}\n```", "```java\n// Utility methods\ndef thread(op: => Unit): Thread =\nnew Thread(new Runnable { def run(): Unit = { op }})\ndef runThread(t: Thread): Unit = t.start()\n```", "```java\n// Run the app\nrunThread(eventThread)  // Prints \"The user is notified\"\n```", "```java\ndef weatherFuture(eventId: Int): Unit = {\n  implicit val context =   ExecutionContext.fromExecutorService(Executors.newFixedThreadPool(5))\n  Future { getEvent(eventId) }\n  .onSuccess { case evt =>\n  Future { getWeather(evt.time, evt.location) }\n  .onSuccess { case weather => Future { if (weather == \"bad\") notifyUser } }\n}\n```", "```java\ndef weatherFutureFlatmap(eventId: Int): Future[Unit] = {\n  implicit val context =   ExecutionContext.fromExecutorService(Executors.newFixedThreadPool(5))\n  for {\n    evt  <- Future { getEvent(eventId) }\n    weather <- Future { getWeather(evt.time, evt.location) }\n     _  <- Future { if (weather == \"bad\") notifyUser() }\n  } yield ()\n}\n```", "```java\ndef weatherFutureFlatmapDesugared(eventId: Int): Future[Unit] = {\n  implicit val context =   ExecutionContext.fromExecutorService(Executors.newFixedThreadPool(5))\n  Future { getEvent(eventId) }\n  .flatMap { evt => Future { getWeather(evt.time, evt.location) } }\n  .flatMap { weather => Future { if (weather == \"bad\") notifyUser() } }\n}\n```", "```java\ndef functionalDivision(n1: Double, n2: Double): Try[Double] =\n  if (n2 == 0) Failure(new RuntimeException(\"Division by zero!\"))\n  else Success(n1 / n2)\n```", "```java\ndef division(n1: Double, n2: Double): Either[String, Double] =\n if (n2 == 0) Left(\"Division by zero!\")\n else Right(n1 / n2)\n println(division(1, 0))  // Left(\"Division by Zero\")\n println(division(2, 2))  // Right(1.0)\n```", "```java\ndef createUser(u: User, c: Connection): Int = ???\ndef createAccount(a: Account, c: Connection): Int = ???\n```", "```java\nclass Connection\ncase class User(id: Option[Int], name: String)\ncase class Account(id: Option[Int], ownerId: Int, balance: Double)\n```", "```java\ndef registerNewUser(name: String, c: Connection): Int = {\n  val uid   = createUser(User(None, name), c)\n  val accId = createAccount(Account(None, uid, 0), c)\n  accId\n}\n```", "```java\ndef createUserFunc   (u: User ): Connection => Int = ???\ndef createAccountFunc(a: Account): Connection => Int = ???\n```", "```java\ndef registerNewUserFunc(name: String): Connection => Int = { c:  Connection =>\n  val uid   = createUserFunc(User(None, name))(c)\n  val accId = createAccountFunc(Account(None, uid, 0))(c)\n  accId\n}\n```", "```java\ndef createUserReader   (u: User ): Reader[Connection, Int] = Reader { _ => 0 }  // Dummy implementation, always returns 0\ndef createAccountReader(a: Account): Reader[Connection, Int] = Reader { _ => 1 }  // Dummy implementation, always returns 1\ndef registerNewUserReader(name: String): Reader[Connection, Int] =\ncreateUserReader(User(None, name)).flatMap { uid =>\ncreateAccountReader(Account(None, uid, 0)) }\n```", "```java\ncase class Reader[A, B](f: A => B) {\n  def apply(a: A): B = f(a)\n  def flatMap[C](f2: B => Reader[A, C]): Reader[A, C] =\n   Reader { a => f2(f(a))(a) }\n}\n```", "```java\nval reader: Reader[Connection, Int] = registerNewUserReader(\"John\")\nval accId = reader(new Connection)\nprintln(s\"Success, account id: $accId\") // Success, account id: 1\n```"]