["```java\n    public int add(int x, int y) { \n      return x + y; \n    } \n```", "```java\n    (int x, int y) → x + y \n```", "```java\n    (x, y) → x + y \n```", "```java\n    Runnable r = new Runnable() { \n      public void run() { \n        System.out.println(\"Do some work\"); \n      } \n    }; \n    Thread t = new Thread(r); \n    t.start(); \n```", "```java\n    Thread t = new Thread(() ->\n      System.out.println(\"Do some work\")); \n    t.start(); \n```", "```java\n    Runnable r = () { \n      // Acquire database connection \n      // Do something really expensive \n    }; \n    Thread t = new Thread(r); \n    t.start(); \n```", "```java\n    List<Student> students = getStudents(); \n    students.sort((one, two) -> one.getGrade() - two.getGrade()); \n```", "```java\n    saveButton.setOnAction((event) -> saveAndClose()); \n```", "```java\n    public <T> interface Validator<T> { \n      boolean isValid(T value); \n    } \n    cardProcessor.setValidator((card) \n    card.getNumber().startsWith(\"1234\")); \n```", "```java\n    double sum = 0.0; \n    int count = 0; \n    for (Map.Entry<Student, Integer> g : grades.entrySet()) { \n      if (\"F\".equals(g.getKey().getGender())) { \n        count++; \n        sum += g.getValue(); \n      } \n    } \n    double avg = sum / count; \n```", "```java\n    double avg = grades.entrySet().stream() \n     .filter(e -> \"F\".equals(e.getKey().getGender())) // 1 \n     .mapToInt(e -> e.getValue()) // 2 \n     .average() // 3 \n     .getAsDouble(); //4 \n```", "```java\n    public interface Speaker { \n      void saySomething(String message); \n    } \n    public class SpeakerImpl implements Speaker { \n      public void saySomething(String message) { \n        System.out.println(message); \n      } \n    } \n```", "```java\n    public interface Speaker { \n      void saySomething(String message); \n      default public void sayHello() { \n        System.out.println(\"Hello\"); \n      } \n      default public void sayGoodbye() { \n        System.out.println(\"Good bye\"); \n      } \n    } \n```", "```java\n    module com.packt.j9blueprints.intro { \n      requires com.foo; \n      exports com.packt.j9blueprints.intro.model; \n      exports com.packt.j9blueprints.intro.api; \n    } \n```", "```java\n$ jshell \n|  Welcome to JShell -- Version 9-ea \n|  For an introduction type: /help intro \n\njshell> List<String> names = Arrays.asList(new String[]{\"Tom\", \"Bill\", \"Xavier\", \"Sarah\", \"Adam\"}); \nnames ==> [Tom, Bill, Xavier, Sarah, Adam] \n\njshell> names.stream().sorted().forEach(System.out::println); \nAdam \nBill \nSarah \nTom \nXavier \n```", "```java\n$ datecalc \"2016-07-04 + 2 weeks\" \n2016-07-18 \n$ datecalc \"2016-07-04 + 35 days\" \n2016-08-08 \n$ datecalc \"12:00CST to PST\" \n10:00PST \n```", "```java\n    [ \n      { \n        \"serverName\": \"mail.server.com\", \n        \"serverPort\": \"993\", \n        \"useSsl\": true, \n        \"userName\": \"me@example.com\", \n        \"password\": \"password\", \n        \"rules\": [ \n           {\"type\": \"move\", \n               \"sourceFolder\": \"Inbox\", \n               \"destFolder\": \"Folder1\", \n               \"matchingText\": \"someone@example.com\"}, \n            {\"type\": \"delete\", \n               \"sourceFolder\": \"Ads\", \n               \"olderThan\": 180} \n         ] \n      } \n    ] \n```"]