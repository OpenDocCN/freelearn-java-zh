["```java\npublic interface Entity < T > {\n\n    public T getId();\n}  \n```", "```java\nimport javax.persistence.*;\nimport javax.validation.constraints.NotNull;\nimport java.util.Objects;\n\n@javax.persistence.Entity(name = \"Employee\")\npublic class Employee implements Entity<Long> {\n\n    @Id\n    @GeneratedValue\n    @Column(name = \"id\")\n    private Long id;\n\n    @NotNull\n    @Column(name=\"name\")\n    private String name;\n\n    @Column(name=\"address\")\n    private String address;\n\n    @NotNull\n    @Column(name=\"salary\")\n    private Double salary;\n\n    public Employee(){}\n\n    public Employee( String name, String address, Double salary){\n\n        this.name = name;\n        this.address = address;\n        this.salary = salary;\n\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getAddress() {\n        return address;\n    }\n\n    public void setAddress(String address) {\n        this.address = address;\n    }\n\n    public Double getSalary() {\n        return salary;\n    }\n\n    public void setSalary(Double salary) {\n        this.salary = salary;\n    }\n\n    @Override\n    public Long getId() {\n        return this.id;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Employee employee = (Employee) o;\n        return Objects.equals(id, employee.id);\n    }\n\n    @Override\n    public int hashCode() {\n\n        return Objects.hash(id);\n    }\n}        \n\n```", "```java\nimport javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\nimport javax.persistence.TypedQuery;\nimport java.lang.reflect.ParameterizedType;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\n\npublic abstract class AbstractDao <T extends Entity>{\n\n    //EntityManager that provide JPA functionalities\n    @PersistenceContext\n    protected EntityManager em;\n\n    //Get the type of Subclass that implements Entity interface\n    protected Class<T> getType() {\n        ParameterizedType genericType = (ParameterizedType) \n        this.getClass().getGenericSuperclass();\n        return (Class<T>) genericType.getActualTypeArguments()[0];\n    }\n\n    //Find entity filtering by id.\n    public Optional<T> findById ( T entity ){\n\n        return Optional.ofNullable( em.find( (Class<T>) \n        entity.getClass(), entity.getId() ) );\n\n    }\n\n    public Optional<T> persist (T entity ){\n\n        em.persist( entity );\n        return Optional.of( entity );\n\n    }\n\n    public Optional<T> update ( T entity ){\n\n        return Optional.ofNullable( em.merge( entity ) );\n\n    }\n\n    public void delete ( T entity ){\n        em.remove( entity );\n    }\n\n    protected List<T> listWithNamedQuery(String namedQuery, Map<String, \n    Object> parameters){\n\n        TypedQuery<T> query = em.createNamedQuery( namedQuery, \n        getType() );\n        parameters.keySet().stream().forEach( key-> query.setParameter( \n        key, parameters.get( key ) ) );\n        return query.getResultList();\n\n    }\n\n    protected Optional<T> findWithNamedQuery(String namedQuery, \n    Map<String, Object> parameters){\n\n        TypedQuery<T> query = em.createNamedQuery( namedQuery, \n        getType() );\n        parameters.keySet().stream().forEach( key-> query.setParameter( \n        key, parameters.get( key ) ) );\n        return Optional.ofNullable(query.getSingleResult());\n\n    }\n\n}\n```", "```java\nimport javax.ejb.Stateless;\nimport java.util.Collections;\nimport java.util.List;\n\n@Stateless\npublic class EmployeeDao extends AbstractDao <Employee> {\n\n    public List<Employee> findByName(String name ){\n\n        return this.listWithNamedQuery(\"Employee.findByName\",\n                                       Collections.singletonMap( \n                                       \"name\", name ) );\n\n    }\n\n    public List<Employee> findAll(){\n\n        return this.listWithNamedQuery(\"Employee.findAll\",\n                                        Collections.emptyMap());\n\n    }\n\n}\n```", "```java\nimport com.packt.javaee8.dao.EmployeeDao;\nimport com.packt.javaee8.entity.Employee;\n\nimport javax.ejb.Stateless;\nimport javax.inject.Inject;\nimport java.util.List;\nimport java.util.Optional;\n\n@Stateless\npublic class EmployeeBusiness{\n\n    @Inject\n    protected EmployeeDao employeeDao;\n\n    public List<Employee> listByName( String name ){\n\n        return employeeDao.findByName( name );\n\n    }\n\n    public boolean save ( Employee employee ){\n\n        return employeeDao.persist( employee ).isPresent();\n\n    }\n\n    public List<Employee> listAll(){\n\n        return employeeDao.findAll();\n\n    }\n\n    public Optional<Employee> findById(Employee employee ){\n        return employeeDao.findById(employee);\n    }\n}\n```", "```java\nimport javax.inject.Qualifier;\nimport static java.lang.annotation.ElementType.FIELD;\nimport static java.lang.annotation.ElementType.METHOD;\nimport static java.lang.annotation.ElementType.PARAMETER;\nimport static java.lang.annotation.ElementType.TYPE;\nimport static java.lang.annotation.RetentionPolicy.RUNTIME;\n\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.Target;\n\n@Qualifier\n@Retention(RUNTIME)\n@Target({TYPE, METHOD, FIELD, PARAMETER})\n\npublic @interface Persistence {\n}\n```", "```java\nimport javax.ejb.Singleton;\nimport javax.enterprise.inject.Produces;\nimport java.util.HashSet;\nimport java.util.Set;\n\n@Singleton\npublic class PersistenceManagerFactory {\n\n    Set<StageManager>  stateManagers = new HashSet<StageManager>();\n\n    public @Produces @Persistence PersistenceManager \n    getPersistenceManager(){\n\n        //Logic to build PersistenceManager\n        return new PersistenceManager();\n\n    }\n\n}\n```", "```java\nimport javax.annotation.PostConstruct;\nimport javax.inject.Inject;\nimport java.util.LinkedHashSet;\nimport java.util.Optional;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\npublic class PersistenceManager {\n\n    private Set<StageManager> stateManagers;\n\n    @Inject @Transactional Transaction transaction;\n\n    @PostConstruct\n    public void init(){\n        stateManagers = new LinkedHashSet<StageManager>();\n\n    }\n\n    public Optional<Entity> persist ( Entity entity ) {\n\n        if ( entity instanceof Employee ){\n            stateManagers.add( new EmployeeStageManager( (Employee) \n            entity ) );\n        }\n\n        return Optional.ofNullable(entity);\n    }\n\n    public void begin() throws Exception {\n\n        if( !transaction.isOpened() ){\n            transaction.begin();\n        }\n        else{\n\n            throw new Exception( \"Transaction already is opened\" );\n\n        }\n    }\n\n    public Optional<Entity> load(Object id){\n\n        Entity  entity = stateManagers.stream()\n                .filter( e-> e.getEntity().getId().equals( id ) )\n                .map( s->s.getEntity() )\n                .findFirst()\n                .orElseGet( ()-> new EmployeeStoreManager().load( id ) );\n\n        if( Optional.ofNullable(entity).isPresent()\n                && stateManagers.stream().map( s->s.getEntity() \n          ).collect( Collectors.toList() ).contains( entity ) )\n                stateManagers.add( new EmployeeStageManager( (Employee) \n                entity) );\n\n        return Optional.ofNullable(entity);\n\n    }\n\n    public void commit() throws Exception {\n\n        if( transaction.isOpened() ){\n            stateManagers.stream().forEach( s-> s.flush() );\n            transaction.commit();\n        }\n        else{\n\n            throw new Exception( \"Transaction is not opened\" );\n\n        }\n    }\n\n    public void rollback() throws Exception {\n\n        if( transaction.isOpened() ) {\n            stateManagers = new LinkedHashSet<StageManager>();\n            transaction.rollback();\n        }\n\n        else {\n\n            throw new Exception( \"Transaction is not opened\" );\n\n        }\n    }\n}\n```", "```java\nimport com.packt.javaee8.entity.Employee;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class EmployeeStoreManager {\n\n    private Map<Object, Employee> dataSource = new HashMap<>();\n\n    public void storeNew ( Employee employee ) throws Exception {\n\n        if( dataSource.containsKey( employee.getId() ) ) throw new Exception( \"Data already exist\" );\n\n        dataSource.put( employee.getId(), employee );\n    }\n\n    public void update ( Employee employee ) throws Exception {\n\n        if( !dataSource.containsKey( employee.getId() ) ) throw new Exception( \"Data not exist\" );\n\n        dataSource.put( employee.getId(), employee );\n    }\n\n    public void delete ( Employee employee ) throws Exception {\n\n        if( !dataSource.containsKey( employee.getId() ) ) throw new Exception( \"Data not exist\" );\n\n        dataSource.remove( employee.getId() );\n\n    }\n\n    public Employee load(Object key){\n\n        return dataSource.get( key );\n\n    }\n\n}\n```", "```java\npublic interface StageManager {\n\n    public void flush();\n\n    public void load();\n\n    public Entity getEntity();\n}\n```", "```java\npublic class EmployeeStageManager implements StageManager {\n\n    private boolean isNew;\n\n    private Employee employee;\n\n    public EmployeeStageManager ( Employee employee ){\n\n        this.employee = employee;\n\n    }\n\n    public void flush(){\n\n        EmployeeStoreManager employeeStoreManager = new EmployeeStoreManager();\n\n        if( isNew ){\n            try {\n                employeeStoreManager.storeNew( employee );\n            } catch ( Exception e ) {\n                e.printStackTrace();\n            }\n            isNew = false;\n        }\n        else {\n            try {\n                employeeStoreManager.update( employee );\n            } catch ( Exception e ) {\n                e.printStackTrace();\n            }\n        }\n\n    }\n\n    public void load() {\n        EmployeeStoreManager storeManager =\n                new EmployeeStoreManager();\n        Employee empl = storeManager.load( employee.getId() );\n        updateEmployee( empl );\n    }\n\n    private void updateEmployee( Employee empl ) {\n\n        employee.setId( empl.getId() );\n        employee.setAddress( empl.getAddress() );\n        employee.setName( empl.getName() );\n        employee.setSalary( empl.getSalary() );\n\n        isNew = false;\n\n    }\n\n    public Entity getEntity() {\n\n        return employee;\n\n    }\n\n}\n```", "```java\nimport javax.inject.Qualifier;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.Target;\n\nimport static java.lang.annotation.ElementType.*;\nimport static java.lang.annotation.RetentionPolicy.RUNTIME;\n\n@Qualifier\n@Retention(RUNTIME)\n@Target({TYPE, METHOD, FIELD, PARAMETER})\npublic @interface Transactional {\n}\n```", "```java\nimport javax.ejb.Singleton;\nimport javax.enterprise.inject.Produces;\n\n@Singleton\npublic class TransactionFactory {\n\n    public @Produces @Transactional Transaction getTransaction(){\n        //Logic to create Transations.\n        return new Transaction();\n    }\n}\n```", "```java\npackage com.packt.javaee8.domainstore;\n\nimport javax.annotation.PostConstruct;\n\npublic class Transaction {\n\n    private boolean opened;\n\n    @PostConstruct\n    public void init(){\n        this.opened = false;\n    }\n\n    public void commit() throws Exception {\n        if( !opened ) throw new Exception(\"Transaction is not opened\");\n        opened = false;\n    }\n\n    public void rollback() throws Exception {\n        if( !opened ) throw new Exception(\"Transaction is not opened\");\n        opened = false;\n    }\n\n    public void begin() throws Exception {\n        if( opened ) throw new Exception(\"Transaction already is opened\");\n        opened = true;\n    }\n\n    public boolean isOpened(){\n        return opened;\n    }\n}\n```", "```java\nimport javax.ejb.Stateless;\nimport javax.inject.Inject;\nimport java.util.Optional;\n\n@Stateless\npublic class EmployeeBusiness{\n\n   @Inject @Persistence\n   protected PersistenceManager persistenceManager;\n\n   public boolean save ( Employee employee ) throws Exception {\n\n       //Begin Transaction \n       persistenceManager.begin();\n       persistenceManager.persist(employee);\n       //End Transaction\n       persistenceManager.commit();       \n\n       return true;\n\n   }\n\n   public Optional<Employee> findById(Employee employee ){\n        return Optional.ofNullable( (Employee) persistenceManager.load(employee.getId()).get());\n    }\n\n}\n```", "```java\n@MessageDriven (mappedName = \"myQueue\")\npublic class BeanMessage implements MessageListener {\n   @Override\n   public void onMessage (Message message) {\n      try {\n         // message process\n      }catch (JMSException ex) {\n         // handle exception\n      }\n   }\n}\n```", "```java\n@Stateless \npublic class MyBean\n    @Asynchronous\n    public void veryTimeConsumingProcess1 (SomeFilterBean filter) {\n        //código para cadastrar um pedido\n    }\n    @Asynchronous\n    public Future veryTimeConsumingProcess2 (SomeFilterBean filter) {\n        //autoriza demora .....\n    }\n}\n```", "```java\npublic class SomeProducer {\n\n @Inject private Event<BeanTO> someEvent;\n\n public void finalizaCompra() {\n BeanTO bean = new BeanTO(...);\n someEvent.fireAsync(bean);\n }\n}\n```", "```java\npublic class SomeObserver {\n\n public void doSomething (@ObservesAsync BeanTO bean) {\n // do some task with bean (like send email, calling another business process, etc.\n }\n}\n```", "```java\npublic class MessageSender {\n   @Inject\n   @JMSConnectionFactory(\"jms/connectionFactory\")\n   JMSContext context;\n\n   @Resource(mappedName = \"jms/myQueue\")\n   Destination queue;\n\n   public void sendSomeMessage (String message) {\n      context.createProducer().send(queue, message);\n   }\n}\n```", "```java\n@MessageDriven(\n activationConfig = { @ActivationConfigProperty(\n propertyName = \"destinationType\", propertyValue = \"javax.jms.Queue\")\n })\npublic class EmailService implements MessageListener {\n    @Resource\n    private MessageDrivenContext mdc;\n\n    public void onMessage (Message message) {\n    try {\n        String str = message.getBody (String.class);\n    } \n    catch (JMSException ex){\n        // handling exception ...\n        mdc.setRollbackOnly();\n    }   \n}\n```", "```java\n@javax.ejb.Stateless\npublic AcademicServiceBean {\n @javax.ejb.Asynchronous \n public Future requestTestReview( Test test) { \n // ...\n } \n }\n```", "```java\n@Named \n@SessionScope\npublic TestController { \n    @Inject\n    private AcademicServiceBean academicBean; \n    private Future statusTestReview;\n\n    public void requestTestReview(){ \n/* get Test object which has the test data,    like: test date; student who made the test; discipline, etc.*/\n        Test testToBeReviewed = ...;\n        this.statusTestReview = academicBean.requestTestReview (testToBeReviewed); \n    }\n\n    public Future<TestReview> checkTestReviewStatus()\n     { \n         // ...\n     }\n}\n```", "```java\npublic class SeminarProducer {\n    @Inject private Event<Seminar> seminarEvent;\n    public void sendEmailProcess(Date date, String title, String description) {\n        Seminar seminar = new Seminar(date, title, description);\n        seminarEvent.fireAsync(seminar);\n    }\n}\n```", "```java\npublic class SeminarServiceBean {\n\n public void inviteToSeminar (@ObservesAsync Seminar seminar) {\n // sen email for the college students inviting for the seminar\n }\n}\n```", "```java\npublic class StatisticControlingBean {\n\n public void generateStatistic (@ObservesAsync Seminar seminar) {\n // create some statistic data\n }\n} \n```"]