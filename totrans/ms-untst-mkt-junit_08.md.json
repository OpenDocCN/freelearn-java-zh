["```java\n    package com.packt.database.model;\n\n    public class PhoneEntry implements Serializable {\n\n      private static final long serialVersionUID = 1L;\n\n      private String phoneNumber;\n      private String firstName;\n      private String lastName;\n\n      // getters and setters\n    }\n    ```", "```java\n    package com.packt.database.dao;\n\n    import java.util.List;\n    import com.packt.database.model.PhoneEntry;\n\n    public interface PhoneBookDao {\n      boolean create(PhoneEntry entry);\n\n      boolean update(PhoneEntry entryToUpdate);\n\n      List<PhoneEntry> searchByNumber(String number);\n\n      List<PhoneEntry> searchByFirstName(String firstName);\n\n      List<PhoneEntry> searchByLastName(String lastName);\n\n      boolean delete(String number);\n    }\n    ```", "```java\n    public class PhoneBookDerbyDao implements PhoneBookDao {\n\n      private String driver = \"org.apache.derby.jdbc.EmbeddedDriver\";\n      private String protocol = \"jdbc:derby:\";\n      private String userId = \"dbo\";\n      private String dbName = \"phoneBook\";\n\n      public PhoneBookDerbyDao() {\n        loadDriver();\n      }\n\n      protected void loadDriver() {\n        try {\n          Class.forName(driver).newInstance();\n        } catch (ClassNotFoundException cnfe) {\n          cnfe.printStackTrace(System.err);\n        } catch (InstantiationException ie) {\n          ie.printStackTrace(System.err);\n        } catch (IllegalAccessException iae) {\n          iae.printStackTrace(System.err);\n        }\n      }\n\n      protected Connection getConnection() throws SQLException {\n        Connection conn = null;\n        Properties props = new Properties();        \n        props.put(\"user\", userId);\n        conn = DriverManager.getConnection(protocol + dbName + \";create=true\",props);\n        conn.setAutoCommit(false);\n        return conn;\n      }\n    }\n    ```", "```java\n      @Override\n      public boolean create(PhoneEntry entry) {\n        PreparedStatement preparedStmt = null;\n        Connection conn = null;\n        try {\n        conn = getConnection();\n        preparedStmt = conn.prepareStatement(\"insert into PhoneBook values (?,?,?)\");\n\n        preparedStmt.setString(1, entry.getPhoneNumber());\n        preparedStmt.setString(2, entry.getFirstName());\n        preparedStmt.setString(3, entry.getLastName());\n        preparedStmt.executeUpdate();\n        // Note that it can cause problems on some dbs if //autocommit mode is on\n        conn.commit();\n          return true;\n        } catch (SQLException e) {\n          e.printStackTrace();\n        } finally {\n\n          if (preparedStmt != null) {\n            try {\n              preparedStmt.close();\n            } catch (SQLException e) {\n              e.printStackTrace();\n            }\n          }\n\n          if (conn != null) {\n            try {\n              conn.close();\n            } catch (SQLException e) {\n              e.printStackTrace();\n            }\n          }\n        }\n\n        return false;\n      }\n    ```", "```java\n    @RunWith(MockitoJUnitRunner.class )\n    public class PhoneBookDerbyDaoTest {\n      @Mock\n      Connection connection;\n\n      class TestablePhoneBookDerbyDao extends PhoneBookDerbyDao{\n        protected void loadDriver() {\n        }\n\n        protected Connection getConnection() throws SQLException {\n          return connection;\n        }\n      }\n    }\n    ```", "```java\n      @Mock\n       Connection connection;\n      @Mock\n      PreparedStatement statement;\n\n      PhoneBookDerbyDao dao;\n\n      @Before\n      public void setUp(){\n        dao = new TestablePhoneBookDerbyDao();\n      }\n    ```", "```java\n      @Test\n      public void creates_phone_entry() throws Exception {\n        //Setting up sample object\n        PhoneEntry johnDoe= new PhoneEntry();\n        johnDoe.setFirstName(\"John\");\n        johnDoe.setLastName(\"Doe\");\n        johnDoe.setPhoneNumber(\"123\");\n\n        //Stubbing the connection obj to return the mocked statement\n        when(connection.prepareStatement(anyString())).thenReturn(statement;\n\n        //Calling the actual method\n        boolean succeed = dao.create(johnDoe);\n        assertTrue(succeed);\n\n        //Creating argument captors  \n        ArgumentCaptor<String> stringArgCaptor = ArgumentCaptor.forClass(String.class);\n        ArgumentCaptor<Integer> intArgCaptor = ArgumentCaptor.forClass(Integer.class);\n\n        //verifying that the mocked statement's setString is //invoked 3 times for firstName, lastName and //phoneNumber  \n        verify(statement, new Times(3)).setString(intArgCaptor.\n        capture(), stringArgCaptor.capture());\n\n        //Verify the arguments passed to the statement object\n        assertEquals(\"123\", stringArgCaptor.getAllValues().get(0));\n        assertEquals(\"John\", stringArgCaptor.getAllValues().get(1));\n        assertEquals(\"Doe\", stringArgCaptor.getAllValues().get(2));\n\n        verify(connection).prepareStatement(stringArgCaptor.capture());\n        assertEquals(PhoneBookDerbyDao.INSERT_INTO_PHONE_BOOK_VALUES    stringArgCaptor.getValue());\n\n        //verify that the mock resources were used and closed\n        verify(statement).executeUpdate();\n        verify(connection).commit();\n        verify(statement).close();\n        verify(connection).close();\n\n    }\n    ```", "```java\n      @Override\n      public List<PhoneEntry> searchByNumber(String number) {\n        PreparedStatement preparedStmt = null;\n        Connection conn = null;\n        ResultSet resultSet = null;\n        List<PhoneEntry> entries = new ArrayList<PhoneEntry>();\n        try {\n          conn = getConnection();\n          preparedStmt = conn.prepareStatement(\"SELECT * FROM PhoneBook where num=?\");\n\n          preparedStmt.setString(1, number);\n          resultSet = preparedStmt.executeQuery();\n          while (resultSet.next()) {\n            PhoneEntry entry = new PhoneEntry();\n            entry.setFirstName(resultSet.getString(\"fname\"));\n            entry.setLastName(resultSet.getString(\"lname\"));\n            entry.setPhoneNumber(resultSet.getString(\"num\"));\n            entries.add(entry);\n          }\n          return entries;\n        } catch (SQLException e) {\n          e.printStackTrace();\n        } finally {\n\n          try {\n            if (resultSet != null) {\n              resultSet.close();\n              resultSet = null;\n            }\n          } catch (SQLException e) {\n            e.printStackTrace();\n          }\n\n          if (preparedStmt != null) {\n            try {\n              preparedStmt.close();\n            } catch (SQLException e) {\n              e.printStackTrace();\n            }\n          }\n\n          if (conn != null) {\n            try {\n              conn.close();\n            } catch (SQLException e) {\n              e.printStackTrace();\n            }\n          }\n        }\n        return null;\n      }\n    ```", "```java\n      @Test\n      public void retrieves_phone_entry() throws Exception {\n\n        //Stub JDBC resources to return mock objects\n        when(mockConn.prepareStatement(anyString())).      thenReturn(mockPrepStmt);\n        when(mockPrepStmt.executeQuery()).      thenReturn(mockResultSet);\n        when(mockResultSet.next()).thenReturn(true).      thenReturn(false);\n\n        //Stub the resultSet to return value\n        when(mockResultSet.getString(\"fname\")).thenReturn(\"John\");\n        when(mockResultSet.getString(\"lname\")).thenReturn(\"Doe\");\n        when(mockResultSet.getString(\"num\")).thenReturn(\"123\");\n\n        //Execute  \n        List<PhoneEntry> phoneEntries = dao.searchByNumber(\"123\");\n\n        assertEquals(1, phoneEntries.size());\n        PhoneEntry johnDoe = phoneEntries.get(0);\n\n        //verify mapping\n        assertEquals(\"John\", johnDoe.getFirstName());\n        assertEquals(\"Doe\", johnDoe.getLastName());\n        assertEquals(\"123\", johnDoe.getPhoneNumber());\n\n        //Verify Resource Clean up \n        verify(mockResultSet).close();\n        verify(mockPrepStmt).close();\n        verify(mockConn).close();\n      }\n    ```", "```java\n      public class PhoneBookDerbySpringDao  implements\n        PhoneBookDao {\n\n      private final JdbcTemplate jdbcTemplate;\n\n        public PhoneBookDerbySpringDao(JdbcTemplate jdbcTemplate) {\n        this.jdbcTemplate = jdbcTemplate;\n        }\n\n        @Override\n        public boolean create(PhoneEntry entry) {\n          int rowCount = jdbcTemplate.update(\"insert into PhoneBook values (?,?,?)\",\n     new Object[]{entry.getPhoneNumber(), entry.getFirstName(),\n     entry.getLastName()\n     });\n          return rowCount == 1;\n        }\n      }\n    ```", "```java\n    @RunWith(MockitoJUnitRunner.class)\n    public class PhoneBookDerbySpringDaoTest {\n\n      @Mock\n      JdbcTemplate mockJdbcTemplate;\n\n      PhoneBookDerbySpringDao springDao;\n\n      @Before\n      public void init() {\n        springDao = new PhoneBookDerbySpringDao(mockJdbcTemplate);\n      }\n\n      @Test\n      public void creates_PhoneEntry() throws Exception {\n        //create PhoneEntry\n        String charlsPhoneNumber = \"1234567\";\n        String charlsFirstName = \"Charles\";\n        String charlsLastName = \"Doe\";\n\n        PhoneEntry charles = new PhoneEntry();\n        charles.setFirstName(charlsFirstName);\n        charles.setLastName(charlsLastName);\n        charles.setPhoneNumber(charlsPhoneNumber);\n\n        //Stub jdbcTemplate's update to return 1\n        when(mockJdbcTemplate.update(anyString(), anyObject(), anyObject(), anyObject())).thenReturn(1);\n\n        //Execute\n        assertTrue(springDao.create(charles));\n\n        //Create argument capture\n        ArgumentCaptor<Object> varArgs = ArgumentCaptor.forClass(Object.class);\n\n        ArgumentCaptor<String> strArg = ArgumentCaptor.forClass(String.class);\n\n        //Verify update method was called and capture args\n        verify(mockJdbcTemplate).update(strArg.capture(),varArgs.capture(),varArgs.capture(), varArgs.capture());\n\n        //Verify 1st dynamic argument was the phone number\n        assertEquals(charlsPhoneNumber, varArgs.getAllValues().get(0));\n        //Verify the name arguments\n        assertEquals(charlsFirstName, \n          varArgs.getAllValues().get(1));\n        assertEquals(charlsLastName, varArgs.getAllValues().get(2));\n      }\n    }\n    ```", "```java\n    conn = DriverManager.getConnection(url, props);\n    conn.setAutoCommit(false);\n    statement = conn.createStatement();\n    statement.execute(\"create table PhoneBook      (num varchar(50), fname varchar(40),lname varchar(40))\");\n    conn.commit();\n```", "```java\n    public class PhoneBookDerbyJdbcDaoIntegrationTest {\n      PhoneBookDerbyDao jdbcDao;\n\n      @Before\n      public void init() {\n        jdbcDao = new PhoneBookDerbyDao();\n      }\n\n      @Test\n      public void integration() throws Exception {\n        PhoneEntry entry = new PhoneEntry();\n        entry.setFirstName(\"john\");\n        entry.setLastName(\"smith\");\n        entry.setPhoneNumber(\"12345\");\n\n        assertTrue(jdbcDao.create(entry));\n        List<PhoneEntry> phoneEntries = \n        jdbcDao.searchByFirstName(\"john\");\n\n        //verify create\n        assertFalse(phoneEntries.isEmpty());\n\n        //modify last name\n        entry.setLastName(\"doe\");\n\n        //update\n        assertTrue(jdbcDao.update(entry));\n\n        //retrieve\n        phoneEntries = jdbcDao.searchByFirstName(\"john\");\n\n        //verify update\n        assertFalse(phoneEntries.isEmpty());\n        assertEquals(\"doe\", phoneEntries.get(0).getLastName());\n\n        //delete\n        jdbcDao.delete(entry.getPhoneNumber());\n\n        //retrieve\n        phoneEntries = jdbcDao.searchByFirstName(\"john\");\n\n        //verify delete\n        assertTrue(phoneEntries.isEmpty());\n      }\n\n    }\n    ```", "```java\n    <beans \n\n      xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\">\n\n      <bean id=\"dataSource\" class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n        <property name=\"driverClassName\" value=\"org.apache.derby.jdbc.EmbeddedDriver\"/>\n        <property name=\"url\" value=\"jdbc:derby:derbyDB;create=true\"/>\n        <property name=\"username\" value=\"dbo\"/>\n      </bean> \n\n      <bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n        <constructor-arg ref=\"dataSource\"/>\n      </bean>\n\n      <bean id=\"jdbcTemplate\" class=\"org.springframework.jdbc.core.JdbcTemplate\">\n        <property name=\"dataSource\" ref=\"dataSource\"/>\n      </bean>\n    </beans>\n    ```", "```java\n    @ContextConfiguration({ \"classpath:integration.xml\" })\n    @TransactionConfiguration(transactionManager = \"transactionManager\", defaultRollback = true)\n    @Transactional\n    @RunWith(SpringJUnit4ClassRunner.class)\n    public class PhoneBookDerbySpringDaoIntegrationTest {\n\n      @Autowired\n      JdbcTemplate jdbcTemplate;\n\n      PhoneBookDerbySpringDao springDao;\n\n      @Before\n      public void init() {\n        springDao = new PhoneBookDerbySpringDao(jdbcTemplate);\n      }\n\n      @Test\n      public void integration() throws Exception {\n        PhoneEntry entry = newEntry(\"12345\", \"John\", \"Smith\");\n\n        //create\n        assertTrue(springDao.create(entry));\n\n        //retrieve\n        List<PhoneEntry> phoneEntries = \n          springDao.searchByFirstName(\"John\");\n\n        //verify create\n        assertFalse(phoneEntries.isEmpty());\n\n        //modify last name\n        entry.setLastName(\"Kallis\");\n\n        //update\n        assertTrue(springDao.update(entry));\n\n        //retrieve\n        phoneEntries = springDao.searchByFirstName(\"John\");\n\n        //verify update\n        assertFalse(phoneEntries.isEmpty());\n        assertEquals(\"Kallis\", \n          phoneEntries.get(0).getLastName());\n\n        //delete\n        springDao.delete(entry.getPhoneNumber());\n\n        //retrieve\n        phoneEntries = springDao.searchByFirstName(\"John\");\n\n        //verify delete\n        assertTrue(phoneEntries.isEmpty());\n      }\n    }\n    ```", "```java\nINFO: Began transaction (1): transaction manager [org.springframework.jdbc.datasource.DataSourceTransactionManager@569c60]; rollback [true]\nApr 11, 2014 10:02:25 PM org.springframework.test.context.transaction.TransactionalTestExecutionListener endTransaction\nINFO: Rolled back transaction after test execution for test context [[TestContext@134eb84 testClass = PhoneBookDerbySpringDaoIntegrationTest, testInstance = com.packt.database.dao.PhoneBookDerbySpringDaoIntegrationTest@1522de2, testMethod = integration@PhoneBookDerbySpringDaoIntegrationTest, testException = [null], mergedContextConfiguration = [MergedContextConfiguration@425743 testClass = PhoneBookDerbySpringDaoIntegrationTest, locations = '{classpath:integration.xml}', classes = '{}', activeProfiles = '{}', contextLoader = 'org.springframework.test.context.support.DelegatingSmartContextLoader']]]\n\n```"]