["```java\n RABBITMQ_URI=\"amqp://user:password@host/vhost\"\n```", "```java\nRABBITMQ_URI=\"amqp://cc-dev:taxi123@localhost/cc-dev-vhost\"\n```", "```java\n# Require client library\nrequire \"bunny\"\n```", "```java\nconnection = Bunny.new ENV['RABBITMQ_URI']\n# Start a session with RabbitMQ \nconnection.start\n```", "```java\nbegin\n  connection = Bunny.new ENV['RABBITMQ_URI']\n  connection.start\nrescue Bunny::TCPConnectionFailed => e\n  puts \"Connection to server failed\"\nend\n```", "```java\n# Declare a channel\nchannel = connection.create_channel\n```", "```java\n# 1\\. Require client library\nrequire \"bunny\"\n\n# 2\\. Read RABBITMQ_URI from ENV\nconnection = Bunny.new ENV[\"'RABBITMQ_URI\"]\n\n# 3\\. Start a communication session with RabbitMQ\nconnection.start\nchannel = connection.create_channel\n\ndef on_start(channel)\n # 4\\. Declare a queue for a given taxi\n queue = channel.queue(\"taxi.1\", durable: true)\n # 5\\. Declare a direct exchange, taxi-direct\n exchange = channel.direct(\"taxi-direct\", durable: true, auto_delete: true)\n\n # 6\\. Bind the queue to the exchange\n queue.bind(exchange, routing_key: \"taxi.1\")\n\n # 7\\. Return the exchange\n exchange\nend\n\nexchange = on_start(channel)                  \n```", "```java\ndef order_taxi(taxi, exchange)\n  payload = \"example-message\"\n  message_id = rand\n exchange.publish(payload,\n    routing_key: taxi,\n    content_type: \"application/json\",\n    content_encoding: \"UTF-8\",\n    persistent: true,\n    message_id: message_id)\nend\n\nexchange = on_start(channel)\norder_taxi(\"taxi.1\", exchange)\n```", "```java\n# example_consumer.rb\n# 1\\. Require client library\nrequire \"bunny\"\n\n# 2\\. Read RABBITMQ_URI from ENV\nconnection = Bunny.new ENV[\"RABBITMQ_URI\"]\n\n# 3\\. Start a communication session with RabbitMQ\nconnection.start\nchannel = connection.create_channel\n\n# Method for the processing\ndef process_order(info)\n\n  puts \"Handling taxi order\"\n  puts info\n  sleep 5.0\n  puts \"Processing done\"\nend\n\ndef taxi_subscribe(channel, taxi)\n  # 4\\. Declare a queue for a given taxi\n  queue = channel.queue(taxi, durable: true)\n\n  # 5\\. Declare a direct exchange, taxi-direct\n  exchange = channel.direct(\"taxi-direct\", durable: true, auto_delete: true)\n\n  # 6\\. Bind the queue to the exchange\n  queue.bind(exchange, routing_key: taxi)\n\n  # 7\\. Subscribe from the queue\n  queue.subscribe(block: true, manual_ack: false) do |delivery_info, properties, payload|\n    process_order(payload)\n  end\nend\n\ntaxi = \"taxi.1\"\ntaxi_subscribe(channel, taxi)                            \n```", "```java\ndef on_start(channel)\n  # Declare and return the topic exchange, taxi-topic\n  channel.topic(\"taxi-topic\", durable: true, auto_delete: true)\nend\n```", "```java\n# Publishing an order to the exchange\ndef order_taxi(type, exchange)\n  payload = \"example-message\"\n  message_id = rand\n  exchange.publish(payload,\n                   routing_key: type,\n                   content_type: \"application/json\",\n                   content_encoding: \"UTF-8\",\n                   persistent: true,\n                   message_id: message_id)\nend\n\nexchange = on_start(channel)\n# Order will go to any eco taxi\norder_taxi('taxi.eco', exchange) \n# Order will go to any eco taxi\norder_taxi('taxi.eco', exchange) \n# Order will go to any taxi\norder_taxi('taxi', exchange) \n# Order will go to any taxi\norder_taxi('taxi', exchange) \n```", "```java\n# example_consumer.rb\n\ndef taxi_topic_subscribe(channel, taxi, type)\n  # Declare a queue for a given taxi\n  queue = channel.queue(taxi, durable: true)\n\n  # Declare a topic exchange\n  exchange = channel.topic('taxi-topic', durable: true, auto_delete: true)\n\n  # Bind the queue to the exchange\n  queue.bind(exchange, routing_key: type)\n\n  # Bind the queue to the exchange to make sure the taxi will get any order\n  queue.bind(exchange, routing_key: 'taxi')\n\n  # Subscribe from the queue\n  queue.subscribe(block:true,manual_ack: false) do |delivery_info, properties, payload|\n    process_order(payload)\n  end\nend\n\ntaxi = \"taxi.3\"\ntaxi_topic_subscribe(channel, taxi, \"taxi.eco.3\")\n```"]