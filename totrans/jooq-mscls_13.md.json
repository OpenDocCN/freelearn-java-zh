["```java\ntry (BufferedWriter bw = Files.newBufferedWriter(\n```", "```java\n  Paths.get(\"result.txt\"), StandardCharsets.UTF_8,\n```", "```java\n  StandardOpenOption.CREATE_NEW, StandardOpenOption.WRITE)) {\n```", "```java\n ctx.select(PRODUCTLINE.PRODUCT_LINE, PRODUCT.PRODUCT_ID,  \n```", "```java\n            PRODUCT.PRODUCT_NAME)\n```", "```java\n    .from(PRODUCTLINE)\n```", "```java\n    .join(PRODUCT).onKey()\n```", "```java\n    .fetch()\n```", "```java\n    .format(bw, new TXTFormat().maxRows(25).minColWidth(20)); \n```", "```java\n} catch (IOException ex) { // handle exception }\n```", "```java\n{\n```", "```java\n \"fields\": [\n```", "```java\n  {\"schema\": \"public\", \"table\": \"productline\", \"name\": \n```", "```java\n   \"product_line\", \"type\": \"VARCHAR\"},\n```", "```java\n  {\"schema\": \"public\", \"table\": \"product\", \"name\": \n```", "```java\n   \"product_id\", \"type\": \"BIGINT\"},\n```", "```java\n  {\"schema\": \"public\", \"table\": \"product\", \"name\": \n```", "```java\n   \"product_name\", \"type\": \"VARCHAR\"}\n```", "```java\n ],\n```", "```java\n \"records\": [\n```", "```java\n  [\"Vintage Cars\", 80, \"1936 Mercedes Benz 500k Roadster\"],\n```", "```java\n  [\"Vintage Cars\", 29, \"1932 Model A Ford J-Coupe\"],\n```", "```java\n  ...  \n```", "```java\n ]\n```", "```java\n}\n```", "```java\n[\n```", "```java\n  [\"Vintage Cars\", 80, \"1936 Mercedes Benz 500k Roadster\"],\n```", "```java\n  [\"Vintage Cars\", 29, \"1932 Model A Ford J-Coupe\"],\n```", "```java\n  ...\n```", "```java\n]\n```", "```java\nJSONFormat jsonFormat = new JSONFormat()\n```", "```java\n   .indent(4)      // defaults to 2\n```", "```java\n   .header(false)  // default to true\n```", "```java\n   .newline(\"\\r\")  // \"\\n\" is default\n```", "```java\n   .recordFormat(\n```", "```java\n      JSONFormat.RecordFormat.OBJECT); // defaults to ARRAY    \n```", "```java\ntry ( BufferedWriter bw = Files.newBufferedWriter(\n```", "```java\n  Paths.get(\"resultObject.json\"), StandardCharsets.UTF_8,\n```", "```java\n  StandardOpenOption.CREATE_NEW, StandardOpenOption.WRITE)) {\n```", "```java\n  ctx.select(PRODUCTLINE.PRODUCT_LINE, PRODUCT.PRODUCT_ID, \n```", "```java\n             PRODUCT.PRODUCT_NAME)\n```", "```java\n     .from(PRODUCTLINE)\n```", "```java\n     .join(PRODUCT).onKey()                    \n```", "```java\n     .fetch()\n```", "```java\n     .formatJSON(bw, jsonFormat);\n```", "```java\n} catch (IOException ex) { // handle exception }\n```", "```java\n[\n```", "```java\n  {\n```", "```java\n    \"product_line\": \"Vintage Cars\",\n```", "```java\n    \"product_id\": 80,\n```", "```java\n    \"product_name\": \"1936 Mercedes Benz 500k Roadster\"\n```", "```java\n  },  \n```", "```java\n…\n```", "```java\n]\n```", "```java\n[\"Classic Cars\",2,\"1952 Alpine Renault 1300\"]\n```", "```java\n{\"product_line\":\"Classic Cars\",\"product_id\":2,\n```", "```java\n \"product_name\":\"1952 Alpine Renault 1300\"}\n```", "```java\n<result xmlns=\"http:...\">\n```", "```java\n<fields>\n```", "```java\n  <field schema=\"public\" table=\"productline\" \n```", "```java\n           name=\"product_line\" type=\"VARCHAR\"/>\n```", "```java\n  <field schema=\"public\" table=\"product\" \n```", "```java\n           name=\"product_id\" type=\"BIGINT\"/>\n```", "```java\n  <field schema=\"public\" table=\"product\" \n```", "```java\n           name=\"product_name\" type=\"VARCHAR\"/>\n```", "```java\n</fields>\n```", "```java\n<records>\n```", "```java\n  <record xmlns=\"http:...\">\n```", "```java\n    <value field=\"product_line\">Vintage Cars</value>\n```", "```java\n    <value field=\"product_id\">80</value>\n```", "```java\n    <value field=\"product_name\">1936 Mercedes Benz ...</value>\n```", "```java\n  </record>\n```", "```java\n  ...\n```", "```java\n</records>\n```", "```java\n</result>\n```", "```java\nctx.select(PRODUCTLINE.PRODUCT_LINE, \n```", "```java\n           PRODUCT.PRODUCT_ID, PRODUCT.PRODUCT_NAME)\n```", "```java\n   .from(PRODUCTLINE)\n```", "```java\n   .join(PRODUCT).onKey()\n```", "```java\n   .fetch()\n```", "```java\n   .formatXML();\n```", "```java\n<result>\n```", "```java\n <record>\n```", "```java\n  <value field=\"product_line\">Vintage Cars</value>\n```", "```java\n  <value field=\"product_id\">80</value>\n```", "```java\n  <value field=\"product_name\">1936 Mercedes Benz ...</value>\n```", "```java\n </record>\n```", "```java\n...\n```", "```java\n</result>\n```", "```java\n<record xmlns=\"http:...\">\n```", "```java\n  <value>Vintage Cars</value>\n```", "```java\n  <value>29</value>\n```", "```java\n  <value>1932 Model A Ford J-Coupe</value>\n```", "```java\n</record>\n```", "```java\nctx.select(MANAGER.MANAGER_ID, MANAGER.MANAGER_EVALUATION)\n```", "```java\n   .from(MANAGER)\n```", "```java\n   .fetch()\n```", "```java\n   .formatXML(new XMLFormat()\n```", "```java\n    .header(false)\n```", "```java\n    .recordFormat(XMLFormat.RecordFormat.COLUMN_NAME_ELEMENTS))\n```", "```java\n<record xmlns=\"http...\">\n```", "```java\n <manager_id>1</manager_id>\n```", "```java\n <manager_evaluation>\n```", "```java\n  <record xmlns=\"http...\">\n```", "```java\n    <communication_ability>67</communication_ability>\n```", "```java\n    <ethics>34</ethics>\n```", "```java\n    <performance>33</performance>\n```", "```java\n    <employee_input>66</employee_input>\n```", "```java\n  </record>\n```", "```java\n </manager_evaluation>\n```", "```java\n</record>\n```", "```java\n<record>\n```", "```java\n  <value field=\"product_line\">Classic Cars</value>\n```", "```java\n  <value field=\"product_id\">2</value>\n```", "```java\n  <value field=\"product_name\">1952 Alpine Renault 1300</value>\n```", "```java\n</record>\n```", "```java\n<Record3<String, Long, String> oneResult = …;\n```", "```java\nString xml = oneResult.formatXML(new XMLFormat().recordFormat(\n```", "```java\n             XMLFormat.RecordFormat.COLUMN_NAME_ELEMENTS));\n```", "```java\n<record xmlns=\"http://...\">\n```", "```java\n  <product_line>Classic Cars</product_line>\n```", "```java\n  <product_id>2</product_id>\n```", "```java\n  <product_name>1952 Alpine Renault 1300</product_name>\n```", "```java\n</record>\n```", "```java\nctx.select(MANAGER.MANAGER_NAME, MANAGER.MANAGER_EVALUATION)\n```", "```java\n   .from(MANAGER)\n```", "```java\n   .fetch()\n```", "```java\n   .formatHTML();\n```", "```java\n<table>\n```", "```java\n <thead>\n```", "```java\n  <tr>\n```", "```java\n   <th>manager_name</th>\n```", "```java\n   <th>manager_evaluation</th>\n```", "```java\n  </tr>\n```", "```java\n </thead>\n```", "```java\n <tbody>\n```", "```java\n  <tr>\n```", "```java\n   <td>Joana Nimar</td>\n```", "```java\n   <td>(67, 34, 33, 66)</td>\n```", "```java\n  </tr>\n```", "```java\n  ...\n```", "```java\n<h1>Joana Nimar</h1>\n```", "```java\n<table>\n```", "```java\n <thead>\n```", "```java\n  <tr>\n```", "```java\n   <th>communication_ability</th>\n```", "```java\n   <th>ethics</th>\n```", "```java\n   <th>performance</th>\n```", "```java\n   <th>employee_input</th>\n```", "```java\n  </tr>\n```", "```java\n </thead>\n```", "```java\n <tbody>\n```", "```java\n  <tr>\n```", "```java\n   <td>67</td>\n```", "```java\n   <td>34</td>\n```", "```java\n   <td>33</td>\n```", "```java\n   <td>66</td>\n```", "```java\n  </tr>\n```", "```java\n </tbody>\n```", "```java\n</table>\n```", "```java\nctx.select(MANAGER.MANAGER_NAME, MANAGER.MANAGER_EVALUATION)\n```", "```java\n   .from(MANAGER)\n```", "```java\n   .fetch()\n```", "```java\n   .stream()\n```", "```java\n   .map(e -> \"<h1>\".concat(e.value1().concat(\"</h1>\"))\n```", "```java\n                   .concat(e.value2().formatHTML()))\n```", "```java\n   .collect(joining(\"<br />\"))\n```", "```java\ncity,country,dep_id,dep_name\n```", "```java\nBucharest,\"\",\"\",\"\"\n```", "```java\nCampina,Romania,3,Accounting\n```", "```java\nCampina,Romania,14,IT\n```", "```java\n…\n```", "```java\nctx.select(OFFICE.CITY, OFFICE.COUNTRY,   \n```", "```java\n           DEPARTMENT.DEPARTMENT_ID.as(\"dep_id\"),  \n```", "```java\n           DEPARTMENT.NAME.as(\"dep_name\"))\n```", "```java\n   .from(OFFICE).leftJoin(DEPARTMENT).onKey().fetch()\n```", "```java\n   .formatCSV('\\t', \"N/A\");\n```", "```java\nCity       country    dep_id     dep_name\n```", "```java\nBucharest  N/A        N/A        N/A\n```", "```java\nCampina    Romania    3          Accounting\n```", "```java\n…\n```", "```java\nHamburg    Germany    N/A        N/A\n```", "```java\nLondon     UK         N/A        N/A\n```", "```java\nNYC        USA        4          Finance\n```", "```java\n...\n```", "```java\nParis      France     2          Sales\n```", "```java\ntry (BufferedWriter bw = Files.newBufferedWriter(\n```", "```java\n  Paths.get(\"result.csv\"), StandardCharsets.UTF_8,\n```", "```java\n  StandardOpenOption.CREATE_NEW, StandardOpenOption.WRITE)) {\n```", "```java\n  ctx.select(OFFICE.CITY, OFFICE.COUNTRY,\n```", "```java\n             DEPARTMENT.DEPARTMENT_ID, DEPARTMENT.NAME)\n```", "```java\n    .from(OFFICE).leftJoin(DEPARTMENT).onKey()\n```", "```java\n    .fetch()\n```", "```java\n     .formatCSV(bw, new CSVFormat()\n```", "```java\n        .delimiter(\"|\").nullString(\"{null}\"));\n```", "```java\n} catch (IOException ex) { // handle exception }\n```", "```java\ntry (BufferedWriter bw = Files.newBufferedWriter(\n```", "```java\n Paths.get(\"result2Chart.txt\"), StandardCharsets.UTF_8,\n```", "```java\n StandardOpenOption.CREATE_NEW, StandardOpenOption.WRITE)) {\n```", "```java\n ctx.select(PRODUCT.PRODUCT_ID, PRODUCT.BUY_PRICE, \n```", "```java\n            field(\"avg_price\"), PRODUCT.MSRP)\n```", "```java\n  .from(PRODUCT, lateral(select(\n```", "```java\n        avg(ORDERDETAIL.PRICE_EACH).as(\"avg_price\"))  \n```", "```java\n       .from(ORDERDETAIL)\n```", "```java\n       .where(PRODUCT.PRODUCT_ID.eq(ORDERDETAIL.PRODUCT_ID))))\n```", "```java\n    .limit(5).fetch()\n```", "```java\n    .formatChart(bw, cf);\n```", "```java\n} catch (IOException ex) { // handle exception }\n```", "```java\nDecimalFormat decimalFormat = new DecimalFormat(\"#.#\");\n```", "```java\nChartFormat cf = new ChartFormat()\n```", "```java\n .showLegends(true, true)      // show legends  \n```", "```java\n .display(ChartFormat.Display.DEFAULT) // or,\n```", "```java\n                               // HUNDRED_PERCENT_STACKED\n```", "```java\n .categoryAsText(true)         // category as text\n```", "```java\n .type(ChartFormat.Type.AREA)  // area chart type\n```", "```java\n .shades('a', 'b', 'c')        // shades of PRODUCT.BUY_PRICE, \n```", "```java\n                               // PRODUCT.MSRP, \n```", "```java\n                               // avg(ORDERDETAIL.PRICE_EACH)\n```", "```java\n .values(1, 2, 3)              // value source column numbers\n```", "```java\n .numericFormat(decimalFormat);// numeric format\n```", "```java\ntry (BufferedWriter bw = Files.newBufferedWriter(\n```", "```java\n  Paths.get(\"resultInserts.txt\"), StandardCharsets.UTF_8,\n```", "```java\n  StandardOpenOption.CREATE_NEW, StandardOpenOption.WRITE)) {\n```", "```java\n  ctx.select(PRODUCT.PRODUCT_ID, PRODUCT.BUY_PRICE, \n```", "```java\n             field(\"avg_price\"), PRODUCT.MSRP)\n```", "```java\n     .from(PRODUCT, lateral(select(\n```", "```java\n       avg(ORDERDETAIL.PRICE_EACH).as(\"avg_price\")) \n```", "```java\n       .from(ORDERDETAIL)\n```", "```java\n       .where(PRODUCT.PRODUCT_ID.eq(ORDERDETAIL\n```", "```java\n         .PRODUCT_ID))))\n```", "```java\n     .limit(5)\n```", "```java\n     .fetch()\n```", "```java\n     .formatInsert(bw, table(\"product_stats\"));\n```", "```java\n} catch (IOException ex) { // handle exception }\n```", "```java\nINSERT INTO product_stats VALUES (29, 108.06, 114.23, 127.13);\n```", "```java\nBatchBindStep batch(String sql)\n```", "```java\nBatchBindStep batch(Query query)\n```", "```java\nBatch batch(String... queries)\n```", "```java\nBatch batch(Query... queries)\n```", "```java\nBatch batch(Queries queries)\n```", "```java\nBatch batch(Collection<? extends Query> queries)\n```", "```java\nBatch batch(String sql, Object[]... bindings)\n```", "```java\nBatch batch(Query query, Object[]... bindings)\n```", "```java\nint[] result = ctx.batch(\n```", "```java\n  ctx.insertInto(SALE, SALE.FISCAL_YEAR, SALE.EMPLOYEE_NUMBER, \n```", "```java\n         SALE.SALE_, SALE.FISCAL_MONTH, SALE.REVENUE_GROWTH)\n```", "```java\n     .values(2005, 1370L, 1282.64, 1, 0.0),\n```", "```java\n  ctx.insertInto(SALE, SALE.FISCAL_YEAR, SALE.EMPLOYEE_NUMBER,\n```", "```java\n           SALE.SALE_, SALE.FISCAL_MONTH, SALE.REVENUE_GROWTH)\n```", "```java\n     .values(2004, 1370L, 3938.24, 1, 0.0),\n```", "```java\n  ...\n```", "```java\n ).execute();\n```", "```java\nint[] result = ctx.batch(\n```", "```java\n  ctx.insertInto(SALE, SALE.FISCAL_YEAR,SALE.EMPLOYEE_NUMBER,  \n```", "```java\n        SALE.SALE_, SALE.FISCAL_MONTH, SALE.REVENUE_GROWTH)\n```", "```java\n     .values((Integer) null, null, null, null, null))\n```", "```java\n     .bind(2005, 1370L, 1282.64, 1, 0.0)\n```", "```java\n     .bind(2004, 1370L, 3938.24, 1, 0.0)\n```", "```java\n     ...\n```", "```java\n .execute();\n```", "```java\nint[] result = ctx.configuration().derive(new  \n```", "```java\n Settings().withStatementType(StatementType.STATIC_STATEMENT))\n```", "```java\n .dsl().batch(\n```", "```java\n    ctx.insertInto(SALE, SALE.FISCAL_YEAR,   \n```", "```java\n          SALE.EMPLOYEE_NUMBER, SALE.SALE_, SALE.FISCAL_MONTH,  \n```", "```java\n          SALE.REVENUE_GROWTH)\n```", "```java\n       .values((Integer) null, null, null, null, null))\n```", "```java\n       .bind(2005, 1370L, 1282.64, 1, 0.0)\n```", "```java\n       .bind(2004, 1370L, 3938.24, 1, 0.0)\n```", "```java\n   ...\n```", "```java\n   .execute();\n```", "```java\nList<SimpleSale> sales = List.of(\n```", "```java\n   new SimpleSale(2005, 1370L, 1282.64, 1, 0.0),\n```", "```java\n   new SimpleSale(2004, 1370L, 3938.24, 1, 0.0),\n```", "```java\n   new SimpleSale(2004, 1370L, 4676.14, 1, 0.0));\n```", "```java\nBatchBindStep batch = ctx.batch(ctx.insertInto(SALE, \n```", "```java\n      SALE.FISCAL_YEAR, SALE.EMPLOYEE_NUMBER, SALE.SALE_,    \n```", "```java\n      SALE.FISCAL_MONTH, SALE.REVENUE_GROWTH)\n```", "```java\n   .values((Integer) null, null, null, null, null));\n```", "```java\nsales.forEach(s -> batch.bind(s.getFiscalYear(), \n```", "```java\n    s.getEmployeeNumber(), s.getSale(), \n```", "```java\n    s.getFiscalMonth(),s.getRevenueGrowth()));\n```", "```java\nbatch.execute();\n```", "```java\nint[] result = ctx.batch(\n```", "```java\n ctx.insertInto(SALE, SALE.FISCAL_YEAR,SALE.EMPLOYEE_NUMBER, \n```", "```java\n      SALE.SALE_, SALE.FISCAL_MONTH, SALE.REVENUE_GROWTH)\n```", "```java\n    .values(2005, 1370L, 1282.64, 1, 0.0),\n```", "```java\n ctx.insertInto(SALE, SALE.FISCAL_YEAR, SALE.EMPLOYEE_NUMBER,\n```", "```java\n  SALE.SALE_, SALE.FISCAL_MONTH, SALE.REVENUE_GROWTH)\n```", "```java\n   .values(2004, 1370L, 3938.24, 1, 0.0),                    \n```", "```java\n ...\n```", "```java\n ctx.update(EMPLOYEE).set(EMPLOYEE.SALARY,   \n```", "```java\n   EMPLOYEE.SALARY.plus(1_000))\n```", "```java\n    .where(EMPLOYEE.SALARY.between(100_000, 120_000)),\n```", "```java\n ctx.update(EMPLOYEE).set(EMPLOYEE.SALARY, \n```", "```java\n   EMPLOYEE.SALARY.plus(5_000))\n```", "```java\n    .where(EMPLOYEE.SALARY.between(65_000, 80_000)),\n```", "```java\n ...\n```", "```java\n ctx.deleteFrom(BANK_TRANSACTION)\n```", "```java\n    .where(BANK_TRANSACTION.TRANSACTION_ID.eq(1)),\n```", "```java\n ctx.deleteFrom(BANK_TRANSACTION)\n```", "```java\n    .where(BANK_TRANSACTION.TRANSACTION_ID.eq(2)),\n```", "```java\n ...   \n```", "```java\n ).execute();\n```", "```java\nSaleRecord sr1 = new SaleRecord(…, 2005, 1223.23, 1370L, …);\n```", "```java\nSaleRecord sr2 = new SaleRecord(…, 2004, 5483.33, 1166L, …);\n```", "```java\nSaleRecord sr3 = new SaleRecord(…, 2005, 9022.21, 1370L, …);\n```", "```java\nint[] result = ctx.batchInsert(sr3, sr1, sr2).execute();\n```", "```java\nList<SaleRecord> sales = List.of(sr3, sr1, sr2);\n```", "```java\nint[] result = ctx.batchInsert(sales).execute();\n```", "```java\nSaleRecord sr1 = new SaleRecord(…);\n```", "```java\nSaleRecord sr2 = new SaleRecord(…);\n```", "```java\nBankTransactionRecord bt1 = new BankTransactionRecord(…);\n```", "```java\nSaleRecord sr3 = new SaleRecord(…);\n```", "```java\nSaleRecord sr4 = new SaleRecord(…);\n```", "```java\nBankTransactionRecord bt2 = new BankTransactionRecord(…);\n```", "```java\nSaleRecord sr1 = new SaleRecord();\n```", "```java\nsr1.setFiscalYear(2005);\n```", "```java\nsr1.setSale(1223.23);\n```", "```java\nsr1.setEmployeeNumber(1370L);\n```", "```java\nsr1.setTre\"d(\"UP\");\n```", "```java\nsr1.setFiscalMonth(1);\n```", "```java\nsr1.setRevenueGrowth(0.0);\n```", "```java\nSaleRecord sr2 = new SaleRecord();\n```", "```java\nsr2.setFiscalYear(2005);\n```", "```java\nsr2.setSale(9022.21);\n```", "```java\nsr2.setFiscalMonth(1);\n```", "```java\nsr2.setRevenueGrowth(0.0);\n```", "```java\nSaleRecord sr3 = new SaleRecord();\n```", "```java\nsr3.setFiscalYear(2003);\n```", "```java\nsr3.setSale(8002.22);\n```", "```java\nsr3.setEmployeeNumber(1504L);\n```", "```java\nsr3.setFiscalMonth(1);\n```", "```java\nsr3.setRevenueGrowth(0.0);\n```", "```java\nint[] result = ctx.configuration().derive(new Settings()\n```", "```java\n  .withStatementType(StatementType.STATIC_STATEMENT))\n```", "```java\n  .dsl().batchInsert/Update/…(…).execute();\n```", "```java\nSaleRecord sr1 = new SaleRecord(1L, 2005, 1223.23, ...);\n```", "```java\nSaleRecord sr2 = new SaleRecord(2L, 2004, 543.33, ...);\n```", "```java\nSaleRecord sr3 = new SaleRecord(9999L, 2003, 8002.22, ...);\n```", "```java\nint[] result = ctx.batchMerge(sr1, sr2, sr3).execute();\n```", "```java\nINSERT INTO \"public\".\"sale\" (\"sale_id\", \n```", "```java\n                             \"fiscal_year\", ..., \"trend\")\n```", "```java\n  VALUES (?, ?, ..., ?) ON CONFLICT (\"sale_id\") DO\n```", "```java\n  UPDATE SET \"sale_id\" = ?, \n```", "```java\n             \"fiscal_year\" = ?, ..., \"trend\" = ?\n```", "```java\n  WHERE \"public\".\"sale\".\"sale_id\" = ?\n```", "```java\nSaleRecord sr1 = new SaleRecord(9999L,\n```", "```java\n                                2005, 1223.23, 1370L, ...);\n```", "```java\nSaleRecord sr2 = ctx.selectFrom(SALE)\n```", "```java\n   .where(SALE.SALE_ID.eq(1L)).fetchOne();\n```", "```java\nsr2.setFiscalYear(2006);\n```", "```java\nint[] result = ctx.batchStore(sr1, sr2).execute();\n```", "```java\nResult<SaleRecord> sales = ctx.selectFrom(SALE).fetch();\n```", "```java\n // update all sales\n```", "```java\n sales.forEach(sale -> { sale.setTrend(\"UP\"); });\n```", "```java\n // add more new sales\n```", "```java\n sales.add(new SaleRecord(...));\n```", "```java\n sales.add(new SaleRecord(...));\n```", "```java\n ...\n```", "```java\n int[] result = ctx.batchStore(sales)\n```", "```java\n  .execute();\n```", "```java\nvoid insertsAndUpdates(Configuration c) {\n```", "```java\n   DSLContext ctxLocal = c.dsl();\n```", "```java\n   ctxLocal.insertInto(…).execute();\n```", "```java\n   …\n```", "```java\n   ctxLocal.update(…).execute();\n```", "```java\n   …\n```", "```java\n}\n```", "```java\npublic void batchedInsertsAndUpdates() {\n```", "```java\n   ctx.batched(this::insertsAndUpdates);\n```", "```java\n}\n```", "```java\npublic void batchedInsertsAndUpdates() {\n```", "```java\n   ctx.batched((Configuration c) -> {\n```", "```java\n      inserts(c);\n```", "```java\n      updates(c);\n```", "```java\n   });\n```", "```java\n}\n```", "```java\nctx.batched(c -> {\n```", "```java\n  Result<SaleRecord> records = c.dsl().selectFrom(SALE)\n```", "```java\n     .limit(5).fetch();\n```", "```java\n  records.forEach(record -> {\n```", "```java\n    record.setTrend(\"CONSTANT\");\n```", "```java\n    ...\n```", "```java\n    record.store();\n```", "```java\n  });\n```", "```java\n});\n```", "```java\nList<SaleRecord> sales = List.of(\n```", "```java\n  new SaleRecord(...), new SaleRecord(...), ...\n```", "```java\n);\n```", "```java\nctx.batched(c -> {\n```", "```java\n  for (SaleRecord sale : sales) {\n```", "```java\n    c.dsl().insertInto(SALE)\n```", "```java\n           .set(sale)\n```", "```java\n           .onDuplicateKeyUpdate()\n```", "```java\n           .set(SALE.SALE_, sale.getSale())\n```", "```java\n           .execute();\n```", "```java\n  }\n```", "```java\n}); // batching is happening here\n```", "```java\n@Bean\n```", "```java\npublic Settings jooqSettings() {\n```", "```java\n   return new Settings().withBatchSize(30);\n```", "```java\n}\n```", "```java\ntry ( BatchedConnection conn = new BatchedConnection(\n```", "```java\n DriverManager.getConnection(\n```", "```java\n     \"jdbc:mysql://localhost:3306/classicmodels\", \n```", "```java\n     \"root\", \"root\"), 2)) {\n```", "```java\n  try ( PreparedStatement stmt = conn.prepareStatement(\n```", "```java\n    \"insert into `classicmodels`.`sale` (`fiscal_year`, \n```", "```java\n    `employee_number`, `sale`, `fiscal_month`, \n```", "```java\n    `revenue_growth`) \" + \"values (?, ?, ?, ?, ?);\")) {\n```", "```java\n   // the next 2 statements will become the first batch    \n```", "```java\n   stmt.setInt(1, 2004);\n```", "```java\n   stmt.setLong(2, 1166L);\n```", "```java\n   stmt.setDouble(3, 543.33);\n```", "```java\n   stmt.setInt(4, 1);\n```", "```java\n   stmt.setDouble(5, 0.0);\n```", "```java\n   stmt.executeUpdate();\n```", "```java\n   stmt.setInt(1, 2005);\n```", "```java\n   stmt.setLong(2, 1370L);\n```", "```java\n   stmt.setDouble(3, 9022.20);\n```", "```java\n   stmt.setInt(4, 1);\n```", "```java\n   stmt.setDouble(5, 0.0);\n```", "```java\n   stmt.executeUpdate();\n```", "```java\n   // reached batch limit so this is the second batch\n```", "```java\n   stmt.setInt(1, 2003);\n```", "```java\n   stmt.setLong(2, 1166L);\n```", "```java\n   stmt.setDouble(3, 3213.0);\n```", "```java\n   stmt.setInt(4, 1);\n```", "```java\n   stmt.setDouble(5, 0.0);\n```", "```java\n   stmt.executeUpdate();\n```", "```java\n  }\n```", "```java\n  // since the following SQL string is different, \n```", "```java\n  // next statements represents the third batch\n```", "```java\n  try ( PreparedStatement stmt = conn.prepareStatement(\n```", "```java\n   \"insert into `classicmodels`.`sale` (`fiscal_year`, \n```", "```java\n    `employee_number`, `sale`, `fiscal_month`, \n```", "```java\n      `revenue_growth`,`trend`) \" \n```", "```java\n      + \"values (?, ?, ?, ?, ?, ?);\")) {\n```", "```java\n     stmt.setInt(1, 2004);\n```", "```java\n     stmt.setLong(2, 1166L);\n```", "```java\n     stmt.setDouble(3, 4541.35);\n```", "```java\n     stmt.setInt(4, 1);\n```", "```java\n     stmt.setDouble(5, 0.0);\n```", "```java\n     stmt.setString(6, \"UP\");\n```", "```java\n     stmt.executeUpdate();\n```", "```java\n     stmt.setInt(1, 2005);\n```", "```java\n     stmt.setLong(2, 1370L);\n```", "```java\n     stmt.setDouble(3, 1282.64);\n```", "```java\n     stmt.setInt(4, 1);\n```", "```java\n     stmt.setDouble(5, 0.0);\n```", "```java\n     stmt.setString(6, \"DOWN\");\n```", "```java\n     stmt.executeUpdate();\n```", "```java\n  }\n```", "```java\n} catch (SQLException ex) { … } \n```", "```java\nCREATE TABLE \"employee\" (\n```", "```java\n  \"employee_number\" BIGINT NOT NULL,\n```", "```java\n  ...\n```", "```java\n  CONSTRAINT \"employee_pk\" PRIMARY KEY (\"employee_number\"),\n```", "```java\n  ...\n```", "```java\n);\n```", "```java\nCREATE SEQUENCE \"employee_seq\" START 100000 INCREMENT 10   \n```", "```java\n        MINVALUE 100000 MAXVALUE 10000000 \n```", "```java\n        OWNED BY \"employee\".\"employee_number\";\n```", "```java\nint[] result = ctx.batch(\n```", "```java\n  ctx.insertInto(EMPLOYEE, EMPLOYEE.EMPLOYEE_NUMBER, \n```", "```java\n                 EMPLOYEE.LAST_NAME, ...)\n```", "```java\n     .values(EMPLOYEE_SEQ.nextval(), val(\"Lionel\"), ...),\n```", "```java\n  ctx.insertInto(EMPLOYEE, EMPLOYEE.EMPLOYEE_NUMBER, \n```", "```java\n                 EMPLOYEE.LAST_NAME...)\n```", "```java\n     .values(EMPLOYEE_SEQ.nextval(), val(\"Ion\"), ...),\n```", "```java\n  ...\n```", "```java\n ).execute();\n```", "```java\nvar ids = ctx.fetch(EMPLOYEE_SEQ.nextvals(n));\n```", "```java\nint[] result = ctx.batch(\n```", "```java\n  ctx.insertInto(EMPLOYEE, EMPLOYEE.EMPLOYEE_NUMBER,  \n```", "```java\n                 EMPLOYEE.LAST_NAME, ...)\n```", "```java\n     .values(ids.get(0).value1(), \"Lionel\", ...),\n```", "```java\n  ctx.insertInto(EMPLOYEE, EMPLOYEE.EMPLOYEE_NUMBER, \n```", "```java\n                 EMPLOYEE.LAST_NAME, ...)\n```", "```java\n     .values(ids.get(1).value1(), \"Ion\", ...),\n```", "```java\n  ...\n```", "```java\n).execute();\n```", "```java\nint[] result = ctx.batch(\n```", "```java\n  ctx.query(\"SET IDENTITY_INSERT [sale] ON\"),\n```", "```java\n  ctx.insertInto(SALE, SALE.SALE_ID, SALE.FISCAL_YEAR, …)\n```", "```java\n     .values(1L, 2005, …),\n```", "```java\n  ctx.insertInto(SALE, SALE.SALE_ID, SALE.FISCAL_YEAR, …)\n```", "```java\n     .values(2L, 2004, …),\n```", "```java\n   ...\n```", "```java\n  ctx.query(\"SET IDENTITY_INSERT [sale] OFF\")\n```", "```java\n).execute();\n```", "```java\nINSERT IGNORE INTO `classicmodels`.`order` (\n```", "```java\n  `order_date`, `required_date`, `shipped_date`, \n```", "```java\n  `status`, `comments`, `customer_number`, `amount`) \n```", "```java\nVALUES (?, ?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?, ?), \n```", "```java\n       (?, ?, ?, ?, ?, ?, ?)\n```", "```java\nctx.insertInto(ORDER)\n```", "```java\n   .columns(ORDER.ORDER_DATE, ORDER.REQUIRED_DATE,\n```", "```java\n            ORDER.SHIPPED_DATE, ORDER.STATUS, \n```", "```java\n            ORDER.COMMENTS,ORDER.CUSTOMER_NUMBER, \n```", "```java\n            ORDER.AMOUNT)\n```", "```java\n    .values(LocalDate.of(2004,10,22), LocalDate.of(2004,10,23),\n```", "```java\n     LocalDate.of(2004,10,23\", \"Shipped\",\n```", "```java\n     \"New order inserted...\", 363L, BigDecimal.valueOf(322.59))\n```", "```java\n    .values(LocalDate.of(2003,12,2), LocalDate.of(2003,1,3),\n```", "```java\n     LocalDate.of(2003,2,26), \"Resolved\",\n```", "```java\n     \"Important order ...\", 128L, BigDecimal.valueOf(455.33))\n```", "```java\n    ...\n```", "```java\n    .onDuplicateKeyIgnore() // onDuplicateKeyUpdate().set(...)\n```", "```java\n   .execute()\n```", "```java\nupdate `classicmodels`.`sale` \n```", "```java\nset \n```", "```java\n  `classicmodels`.`sale`.`sale` = case when  \n```", "```java\n  `classicmodels`.`sale`.`employee_number` = ? then (\n```", "```java\n    `classicmodels`.`sale`.`sale` + ?\n```", "```java\n  ) when `classicmodels`.`sale`.`employee_number` = ? then (\n```", "```java\n    `classicmodels`.`sale`.`sale` + ?\n```", "```java\n  ) when `classicmodels`.`sale`.`employee_number` = ? then (\n```", "```java\n    `classicmodels`.`sale`.`sale` + ?\n```", "```java\n  ) end \n```", "```java\nwhere \n```", "```java\n  `classicmodels`.`sale`.`employee_number` in (?, ?, ?)\n```", "```java\nctx.update(SALE).set(SALE.SALE_,\n```", "```java\ncase_()\n```", "```java\n .when(SALE.EMPLOYEE_NUMBER.eq(1370L), SALE.SALE_.plus(100))\n```", "```java\n .when(SALE.EMPLOYEE_NUMBER.eq(1504L), SALE.SALE_.plus(500))\n```", "```java\n .when(SALE.EMPLOYEE_NUMBER.eq(1166L), SALE.SALE_.plus(1000)))\n```", "```java\n.where(SALE.EMPLOYEE_NUMBER.in(1370L, 1504L, 1166L))\n```", "```java\n.execute();\n```", "```java\nctx.loadInto(TARGET_TABLE)\n```", "```java\n   .[options]\n```", "```java\n   .[source and source to target mapping]\n```", "```java\n   .[listeners]\n```", "```java\n   .[execution and error handling]\n```", "```java\nctx.transaction(configuration -> {\n```", "```java\n   // Loader API code\n```", "```java\n   configuration.dsl()…\n```", "```java\n});\n```", "```java\nsale_id,fiscal_year,sale,employee_number,…,trend\n```", "```java\n1,2003,5282.64,1370,0,…,UP\n```", "```java\n2,2004,1938.24,1370,0,…,UP\n```", "```java\n3,2004,1676.14,1370,0,…,DOWN\n```", "```java\n…\n```", "```java\nctx.loadInto(SALE)\n```", "```java\n   .loadCSV(Paths.get(\"data\", \"csv\", \"in.csv\").toFile(), \n```", "```java\n            StandardCharsets.UTF_8)\n```", "```java\n   .fieldsCorresponding()\n```", "```java\n   .execute();\n```", "```java\nint processed = ctx.loadInto(SALE)\n```", "```java\n .loadCSV(Paths.get(\"data\", \"csv\", \"in.csv\").toFile(), \n```", "```java\n         StandardCharsets.UTF_8)\n```", "```java\n .fields(null, SALE.FISCAL_YEAR, SALE.SALE_, \n```", "```java\n         null, null, null, null, SALE.FISCAL_MONTH, \n```", "```java\n         SALE.REVENUE_GROWTH,SALE.TREND)\n```", "```java\n .execute()\n```", "```java\n .processed();\n```", "```java\nINSERT INTO `classicmodels`.`sale` (`fiscal_year`, `sale`, \n```", "```java\n               `fiscal_month`, `revenue_growth`, `trend`) \n```", "```java\nVALUES (2005, 5243.1, 1, 0.0, 'DOWN')\n```", "```java\n1|2003|5282.64|1370|0|{null}|{null}|1|0.0|*UP*\n```", "```java\n2|2004|1938.24|1370|0|{null}|{null}|1|0.0|*UP*\n```", "```java\n3|2004|1676.14|1370|0|{null}|{null}|1|0.0|*DOWN*\n```", "```java\n…\n```", "```java\nList<LoaderError> errors = ctx.loadInto(SALE)\n```", "```java\n .loadCSV(Paths.get(\"data\", \"csv\", \"in.csv\").toFile(), \n```", "```java\n       StandardCharsets.UTF_8)\n```", "```java\n .fields(SALE.SALE_ID, SALE.FISCAL_YEAR, SALE.SALE_, \n```", "```java\n         SALE.EMPLOYEE_NUMBER, SALE.HOT, SALE.RATE, SALE.VAT, \n```", "```java\n         SALE.FISCAL_MONTH, SALE.REVENUE_GROWTH, SALE.TREND)\n```", "```java\n .ignoreRows(0) \n```", "```java\n .separator('|').nullString(\"{null}\").quote('*') \n```", "```java\n .execute()\n```", "```java\n .errors();\n```", "```java\n{\n```", "```java\n  \"fields\": [\n```", "```java\n    {\n```", "```java\n      \"schema\": \"classicmodels\",\n```", "```java\n      \"table\": \"sale\",\n```", "```java\n      \"name\": \"sale_id\",\n```", "```java\n      \"type\": \"BIGINT\"\n```", "```java\n    },\n```", "```java\n    ...\n```", "```java\n  ],\n```", "```java\n  \"records\": [\n```", "```java\n    [1, 2003, 5282.64, 1370, 0, null, null, 1, 0.0, \"UP\"],\n```", "```java\n    [2, 2004, 1938.24, 1370, 0, null, null, 1, 0.0, \"UP\"],\n```", "```java\n    ...\n```", "```java\n  ]\n```", "```java\n}\n```", "```java\nctx.loadInto(SALE)\n```", "```java\n   .loadJSON(Paths.get(\"data\", \"json\", \"in.json\").toFile(), \n```", "```java\n       StandardCharsets.UTF_8)\n```", "```java\n   .fields(null, SALE.FISCAL_YEAR, SALE.SALE_, null, null, \n```", "```java\n        null, null, SALE.FISCAL_MONTH, SALE.REVENUE_GROWTH,\n```", "```java\n        SALE.TREND)\n```", "```java\n   .onRowEnd(ll -> {\n```", "```java\n     System.out.println(\"Processed row: \" \n```", "```java\n        + Arrays.toString(ll.row()));\n```", "```java\n     System.out.format(\"Executed: %d, ignored: %d, processed: \n```", "```java\n        %d, stored: %d\\n\", ll.executed(), ll.ignored(), \n```", "```java\n        ll.processed(), ll.stored());\n```", "```java\n     })\n```", "```java\n   .execute();\n```", "```java\nProcessed row: [28, 2005, 5243.1, 1504, …, DOWN]\n```", "```java\nExecuted: 28, ignored: 0, processed: 28, stored: 28\n```", "```java\n[\n```", "```java\n    {\n```", "```java\n      \"fiscal_month\": 1,\n```", "```java\n      \"revenue_growth\": 0.0,\n```", "```java\n      \"hot\": 0,\n```", "```java\n      \"vat\": null,\n```", "```java\n      \"rate\": null,\n```", "```java\n      \"sale\": 5282.64013671875,\n```", "```java\n      \"trend\": \"UP\",\n```", "```java\n      \"sale_id\": 1,\n```", "```java\n      \"fiscal_year\": 2003,\n```", "```java\n      \"employee_number\": 1370\n```", "```java\n    },\n```", "```java\n    {\n```", "```java\n     …\n```", "```java\n    },\n```", "```java\n…\n```", "```java\nint processed = ctx.loadInto(SALE)\n```", "```java\n  .loadJSON(Paths.get(\"data\", \"json\", \"in.json\").toFile(), \n```", "```java\n        StandardCharsets.UTF_8)\n```", "```java\n  .fields(SALE.FISCAL_MONTH, SALE.REVENUE_GROWTH, \n```", "```java\n          null, null, null, SALE.SALE_, null, null, \n```", "```java\n          SALE.FISCAL_YEAR, SALE.EMPLOYEE_NUMBER)\n```", "```java\n  .execute()\n```", "```java\n  .processed();\n```", "```java\n[\n```", "```java\n    {\n```", "```java\n      \"sale_id\": 1,\n```", "```java\n      \"fiscal_year\": 2003,\n```", "```java\n      \"sale\": 5282.64 \n```", "```java\n      \"fiscal_month\": 1,\n```", "```java\n      \"revenue_growth\": 0.0\n```", "```java\n    },\n```", "```java\n…\n```", "```java\n[\n```", "```java\n  [\n```", "```java\n    1,\n```", "```java\n    2003,\n```", "```java\n    5282.64,\n```", "```java\n    1,\n```", "```java\n    0.0\n```", "```java\n  ],\n```", "```java\n…\n```", "```java\nctx.loadInto(SALE)\n```", "```java\n   .loadJSON(Paths.get(\"data\", \"json\", \"in.json\").toFile(), \n```", "```java\n      StandardCharsets.UTF_8)\n```", "```java\n   .fields(SALE.SALE_ID, SALE.FISCAL_YEAR, SALE.SALE_, \n```", "```java\n     SALE.FISCAL_MONTH, SALE.REVENUE_GROWTH)      \n```", "```java\n   .execute();\n```", "```java\n@Transactional\n```", "```java\npublic void loadJSON () {\n```", "```java\n int executed = ctx.loadInto(SALE)\n```", "```java\n  .batchAfter(2)// each *batch* has 2 rows\n```", "```java\n  .commitNone() // this is default, so it can be omitted\n```", "```java\n  .loadJSON(Paths.get(\"data\", \"json\", \"in.json\").toFile(), \n```", "```java\n     StandardCharsets.UTF_8)\n```", "```java\n  .fieldsCorresponding()\n```", "```java\n  .execute()\n```", "```java\n  .executed();\n```", "```java\n}\n```", "```java\nint ignored = ctx.loadInto(SALE)\n```", "```java\n .onDuplicateKeyIgnore()\n```", "```java\n .batchAfter(3) // each *batch* has 3 rows\n```", "```java\n .commitEach()  // commit each batch\n```", "```java\n .loadJSON(Paths.get(\"data\", \"json\", \"in.json\").toFile(), \n```", "```java\n     StandardCharsets.UTF_8)\n```", "```java\n .fieldsCorresponding()\n```", "```java\n .execute()\n```", "```java\n .ignored();\n```", "```java\nint inserted = ctx.loadInto(SALE)\n```", "```java\n .bulkAfter(2)   // each *bulk* has 2 rows\n```", "```java\n .batchAfter(3)  // each *batch* has 3 *bulks*, so 6 rows\n```", "```java\n .commitAfter(3) // commit after 3 *batches*, so after 9 \n```", "```java\n                 // *bulks*, so after 18 rows\n```", "```java\n .loadJSON(Paths.get(\"data\", \"json\", \"in.json\").toFile(),  \n```", "```java\n      StandardCharsets.UTF_8)\n```", "```java\n .fieldsCorresponding()\n```", "```java\n .execute()\n```", "```java\n .stored();\n```", "```java\nResult<SaleRecord> result1 = …;\n```", "```java\nResult<Record3<Integer, Double, String>> result2 = …;\n```", "```java\nRecord3<Integer, Double, String>[] result3 = …;\n```", "```java\nSaleRecord r1 = new SaleRecord(1L, …);\n```", "```java\nSaleRecord r2 = new SaleRecord(2L, …);\n```", "```java\nSaleRecord r3 = new SaleRecord(3L, …);\n```", "```java\nctx.loadInto(SALE)\n```", "```java\n   .loadRecords(result1)\n```", "```java\n   .fields(null, SALE.FISCAL_YEAR, SALE.SALE_,    \n```", "```java\n           SALE.EMPLOYEE_NUMBER, SALE.HOT, SALE.RATE, SALE.VAT, \n```", "```java\n           SALE.FISCAL_MONTH, SALE.REVENUE_GROWTH, SALE.TREND)\n```", "```java\n   .execute();\n```", "```java\nctx.loadInto(SALE).loadRecords(result2/result3) \n```", "```java\n   .fieldsCorresponding()                    \n```", "```java\n   .execute();\n```", "```java\nctx.loadInto(SALE).loadRecords(r1, r2, r3) \n```", "```java\n   .fieldsCorresponding()                    \n```", "```java\n   .execute();\n```", "```java\nMap<CustomerRecord, CustomerdetailRecord> result = …;\n```", "```java\nctx.loadInto(CUSTOMER)\n```", "```java\n   .onDuplicateKeyIgnore()\n```", "```java\n   .loadRecords(result.keySet())\n```", "```java\n   .fieldsCorresponding()                    \n```", "```java\n   .execute();\n```", "```java\nctx.loadInto(CUSTOMERDETAIL)  \n```", "```java\n   .onDuplicateKeyIgnore()\n```", "```java\n   .loadRecords(result.values())\n```", "```java\n   .fieldsCorresponding()                    \n```", "```java\n   .execute();\n```", "```java\nObject[][] result = ctx.selectFrom(…).fetchArrays();\n```", "```java\nctx.loadInto(SALE)                    \n```", "```java\n   .loadArrays(Arrays.stream(result)) // Arrays.asList(result)\n```", "```java\n   .fields(null, SALE.FISCAL_YEAR, SALE.SALE_, \n```", "```java\n           SALE.EMPLOYEE_NUMBER, SALE.HOT, SALE.RATE, SALE.VAT, \n```", "```java\n           SALE.FISCAL_MONTH, SALE.REVENUE_GROWTH, SALE.TREND)\n```", "```java\n   .execute();\n```", "```java\nint executed = ctx.loadInto(SALE)\n```", "```java\n   .onDuplicateKeyIgnore()\n```", "```java\n   .batchAfter(2)\n```", "```java\n   .commitEach()  \n```", "```java\n   .loadArrays(\n```", "```java\n     new Object[]{1, 2005, 582.64, 1370, 0,… , \"UP\"},\n```", "```java\n     new Object[]{2, 2005, 138.24, 1370, 0,… , \"DOWN\"},\n```", "```java\n     new Object[]{3, 2005, 176.14, 1370, 0,… , \"DOWN\"})\n```", "```java\n   .fields(SALE.SALE_ID, SALE.FISCAL_YEAR, SALE.SALE_, \n```", "```java\n           SALE.EMPLOYEE_NUMBER, SALE.HOT, SALE.RATE, \n```", "```java\n           SALE.VAT, SALE.FISCAL_MONTH, SALE.REVENUE_GROWTH,  \n```", "```java\n           SALE.TREND)\n```", "```java\n   .execute()\n```", "```java\n   .ignored();\n```"]