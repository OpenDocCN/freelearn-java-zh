- en: Security Enhancements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last chapter, we covered concurrency enhancements introduced with the
    Java 9 platform. We took an in-depth look at concurrency both as a core Java concept
    and as a series of enhancements for Java 9\. We also explored the `Flow` class
    API that supports Reactive Programming, a new concept in Java 9\. In addition,
    we explored concurrency enhancements and the new Spin-Wait hints introduced in
    Java 9.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will look at several small changes made to the JDK that
    involve security. The size of these changes does not reflect their significance.
    The security enhancements introduced with the Java 9 platform provide developers
    with a greater ability to write and maintain applications that are more secure
    than previously possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, we will review the following content areas in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Datagram Transport Layer Security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating PKCS12 keystores
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improving security application performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TLS application-layer protocol negotiation extension
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Leveraging CPU instructions for GHASH and RSA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OCSP stapling for TLS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DRBG-based `SecureRandom` implementations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Datagram Transport Layer Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Datagram Transport Layer Security** (**DTLS**), is a communications protocol.
    The protocol provides a layer of security for datagram-based applications. DTLS
    permits secure communications and is based on the **Transport Layer Security**
    (**TLS**) protocol. Embedded security helps ensure messages are not forged, tampered
    with, or eavesdropped.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s review the relevant terminology:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Communication protocol**: A set of rules that govern how information is transmitted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Datagram**: A structured transfer unit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Eavesdropping**: Undetected listening to in-transit data packets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Forgery**: Transmission of a packet with falsified sender.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Network packet**: A formatted unit of data for transmission.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tampering**: The altering of data packets after the sender transmits them
    and before the intended receiver receives them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TLS protocol**: The most common network security protocol. Uses, as an example,
    IMPA and POP for email.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The DTLS Java Enhancement Proposal 219 is aimed at creating an API for the DTLS
    versions 1.0 and 1.2.
  prefs: []
  type: TYPE_NORMAL
- en: In the sections that follow, we will look at each of the DTLS versions, 1.0
    and 1.2, and then review the changes to the Java 9 platform.
  prefs: []
  type: TYPE_NORMAL
- en: DTLS protocol version 1.0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'DTLS protocol version 1.0 was established in 2006 and provides communications
    security for datagram protocols. Here are the basic characteristics:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Permits client/server applications to communicate without permitting:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eavesdropping
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Tampering
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Message forgery
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Based on the TLS protocol
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provides security guarantees
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The DLS protocol's datagram semantics are preserved
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram illustrates where the **Transport Layer** fits into the
    overall schema of **SSL/TLS** protocol layers and protocols for each layer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5b9c33a2-ee23-4cd5-8ddc-7e5a0591b964.png)'
  prefs: []
  type: TYPE_IMG
- en: 'DTLS protocol version 1.0 provides detailed specifications with the major areas
    of coverage listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Ciphers:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anti-replay block cipher
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: New cipher suites
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Standard (or null) stream cipher
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Denial of service countermeasures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Handshake:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Message format
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Protocol
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Reliability
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Messages:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fragmentation and reassembly
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Loss-insensitive messaging
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Size
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Timeout and retransmission
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Packet loss
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Path Maximum Transition Unit** (**PMTU**) discovery'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Record layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Record payload protection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reordering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Replay detection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transport layer mapping
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DTLS protocol version 1.2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DTLS protocol version 1.2 was published in January 2012 and is copyrighted by
    the **Internet Engineering Task Force** (**IETF**). This section shares code samples
    that illustrate the changes in version 1.2.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code illustrates the TLS 1.2 handshake message header. This format
    supports:'
  prefs: []
  type: TYPE_NORMAL
- en: Message fragmentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Message loss
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reordering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The code presented in this section is from the DTLS protocol documentation and
    is republished here in accordance with IETF's *Legal Provisions Relating to IETF
    Documents*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The record layer contains the information that we intend to send into records.
    The information starts off inside a `DTLSPlaintext` structure and then, after
    the handshake takes place, the records are encrypted and are eligible to be sent
    by the communication stream. The record layer format follows with new fields in
    version 1.2 annotated with the `// New field` in-code comments as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, here is the updated handshake protocol:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: DTLS support in Java 9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Java 9''s implementation of the DTLS API is transport-independent and light-weight.
    The design considerations for the API were as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Read timeouts will not be managed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The implementation will use a single TLS record for each wrap/unwrap operation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The application, not the API, will be required to:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determine timeout values
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Assemble out-of-order application data
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The DTLS is a protocol used to secure data from the application layer before
    that data is passed to a transport layer protocol. DTLS is a good solution for
    encrypting and transmitting real-time data. Caution should be exercised so that
    we do not introduce vulnerabilities in our application''s implementation. Here
    are security considerations specific to implementing DTLS in your Java 9 applications:'
  prefs: []
  type: TYPE_NORMAL
- en: Implement DTLS v1.2, since that is the latest version supported by Java 9.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid **Rivest-Shamir-Adleman** (**RSA**) encryption. If RSA must be used, add
    addition security to your private keys since this is a weak point for RSA.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use 192 bits or more when using the **Elliptic Curve Diffie-Hellman** (**ECDH**)
    anonymous key agreement protocol. The 192-bit value is based on a **National Institute
    of Standards and Technology** (**NIST**) recommendation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The use of **Authenticated Encryption with Associated Data** (**AEAD**), a form
    of encryption, is highly recommended. AEAD provides authenticity, confidentiality,
    and integrity assurances on the data being encrypted and decrypted.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always implement the `renegotiation_info` extension when implementing handshake
    renegotiation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Establish a **Forward Secrecy** (**FS**) capability in all Java applications
    using a communication protocol. Implementing FS ensures past session encryption
    keys are not compromised when long-term encryption keys are compromised. Ideally
    a **Perfect Forward Secrecy** (**PFS**), where each key is only valid for a single
    session, would be used in the Java applications that call for the greatest security
    of transmitted data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating PKCS12 keystores
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Java 9 platform provides increased security for keystores. In order to appreciate
    the changes ushered in by Java Enhancement Proposal 229, create PKCS12 keystores
    by default, we will first review the concept of keystores, look at the `KeyStore`
    class, and then look at the changes.
  prefs: []
  type: TYPE_NORMAL
- en: Keystore primer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The concept of a `KeyStore` is relatively simple. It is essentially a database
    file, or data repository file, that stores public key certificates and private
    keys. The `Keystore` will be stored in the `/jre/lib/security/cacerts` folder.
    As you will see in the next section, this database is managed by Java's `java.security.KeyStore`
    class methods.
  prefs: []
  type: TYPE_NORMAL
- en: '`KeyStore` features include:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Contains one of the following entry types:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Private keys
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Public key certificates
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Unique alias string names for every entry
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Password protection for each key
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java Keystore (JKS)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `java.security.KeyStore` class is the storage facility for cryptographic
    keys and certificates. This class extends `java.lang.Object`, see as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'There are three types of entries managed by a `KeyStore`, each implements the
    `KeyStore.Entry` interface, one of the three interfaces provided by the `KeyStore`
    class. The Entry implementations are defined in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Implementation** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `KeyStore.PrivateKeyEntry` |'
  prefs: []
  type: TYPE_TB
- en: Contains the `PrivateKey` and can store it in a protected format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contains the certificate chain for the public key
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `KeyStore.SecretKeyEntry` |'
  prefs: []
  type: TYPE_TB
- en: Contains the `SecretKey` and can store it in a protected format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `KeyStore.TrustedCertifcateEntry` |'
  prefs: []
  type: TYPE_TB
- en: Contains a single public key `Certificate` from an external source
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: 'This class has been part of the Java platform since version 1.2\. It has one
    constructor, three interfaces, six sub-classes, and several methods. The constructor
    definition is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The `KeyStore` class contains the following interfaces:'
  prefs: []
  type: TYPE_NORMAL
- en: '`public static interface KeyStore.Entry`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This interface serves as a marker for `KeyStore` entry types and contains no
    methods.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public static interface KeyStore.LoadStoreParameter`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This interface serves as a marker for load and store parameters and has the
    following method that returns null or the parameter used to protect the `KeyStore`
    data:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getProtectionParameter()`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public static interface KeyStore.ProtectionParameter`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This interface serves as a marker for `KeyStore` protection parameters and contains
    no methods.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `java.security.KeyStore` class also contains the six nested classes listed
    as follows.
  prefs: []
  type: TYPE_NORMAL
- en: Builder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `KeyStore.Builder` class is used when you want to defer the instantiation
    of a `KeyStore`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This class provides the necessary information for instantiating a `KeyStore`
    object. The class has the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`public abstract KeyStore getKeyStore() throws KeyStoreException`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public abstractKeyStore.ProtectionParameter getProjectionParameter(String
    alias) throws KeyStoreException`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Three options for `newInstance`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public static KeyStore.Builder newInstance(KeyStore keyStore, KeyStore.ProtectionParameter
    protectionParameter)`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public static KeyStore.Builder newInstance(String type, Provider provider,
    File file, KeyStore.ProtectionParameter protection)`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public static KeyStore.Builder newInstance(String type, Provider provider,
    KeyStore.ProtectionParameter protection)`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The CallbackHandlerProtection class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `KeyStore.CallbackHandlerProtection` class definition is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This class provides a `ProtectionParameter` to encapsulate a `CallbackHandler`
    and has the following method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The PasswordProtection class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `KeyStore.PasswordProtection` class definition is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This call provides an implementation of `ProtectionParameter` that is password-based.
    The class has the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`public void destroy() throws DestroyFailedException`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This method clears the password
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public char[] getPassword()`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns a reference to the password
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public boolean isDestroyed()`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns true if the password was cleared
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The PrivateKeyEntry class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `KeyStore.PrivateKeyEntry` class definition is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This creates an entry to hold a `PrivateKey` and the corresponding `Certificate`
    chain. This class has the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`public Certificate getCertificate()`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns the **end entity** `Certificate` from the `Certificate` chain
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public Certificate[] getCertificateChain()`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns the `Certificate` chain as an array of `Certificates`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public PrivateKey getPrivateKey()`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns the `PrivateKey` from the current entry
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public String toString()`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns the `PrivateKeyEntry` as a `String`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The SecretKeyEntry class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `KeyStore.SecretKeyEntry` class definition is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This class holds a `SecretKey` and has the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`public SecretKey getSecretKey()`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns the entry's `SecretKey`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public String toString()`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns the `SecretKeyEntry` as a `String`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The TrustedCertificateEntry class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `KeyStore.TrustedCertificateEntry` class definition is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This class holds a trusted `Certificate` and has the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`public Certificate getTrustedCertificate()`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns the entry's trusted `Certificate`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public String toString()`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns the entry's trusted `Certificate` as a `String`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The key to using this class is understanding the flow. First, we must load
    the `KeyStore`, using the `getInstance` method. Next we request access to the
    `KeyStore` instance. Then, we have access to read and write to the `Object`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5ed9c56a-5951-4c6c-a561-416a6d07f71e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following code snippet shows the load-request-access implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: PKCS12 default in Java 9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Prior to Java 9, the default `KeyStore` type was **Java KeyStore** (**JKS**).
    The Java 9 platform now uses PKCS as the default `KeyStore` type, more specifically,
    PKCS12.
  prefs: []
  type: TYPE_NORMAL
- en: '**PKCS** is the acronym for **Public Key Cryptography Standards**.'
  prefs: []
  type: TYPE_NORMAL
- en: This change to PKCS provides stronger cryptographic algorithms as compared to
    JKS. As you would expect, JDK 9 will still be compatible with JKS to support previously
    developed systems.
  prefs: []
  type: TYPE_NORMAL
- en: Improving security application performance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Java Enhancement Proposal 232, titled *Improving Security Application Performance*,
    was focused on performance improvements when running applications with a security
    manager installed. Security managers can result in processing overhead and less
    than ideal application performance.
  prefs: []
  type: TYPE_NORMAL
- en: This is an impressive undertaking as current CPU overhead when running security
    managers is estimated to result in 10-15% performance degradation. It is not feasible
    to completely remove the CPU overhead as some CPU processing is required to run
    the security manager. That being said, the intention of this proposal (JEP-232)
    was to decrease the overhead percentage as much as possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'This effort resulted in the following optimizations, each detailed in subsequent
    sections:'
  prefs: []
  type: TYPE_NORMAL
- en: Security policy enforcement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Permission evaluation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hash code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Package checking algorithm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security policy enforcement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'JDK 9 uses `ConcurrentHashMap` for mapping `ProtectionDomain` to `PermissionCollection`.
    `ConcurrentHashMap` is typically used for high concurrency in applications. It
    has the following characteristics:'
  prefs: []
  type: TYPE_NORMAL
- en: Thread safe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enter map does not need to be synchronized
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fast reads
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writes use locks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No object-level locking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Locking at a very granular level
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `ConcurrentHashMap` class definition follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding class definition, `K` refers to the type of keys maintained
    by the hash map and `V` indicates the type of mapped values. There is a `KeySetView`
    sub-class and several methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three additional classes related to enforcing security policy--`ProtectionDomain`,
    `PermissionCollection`, and `SecureClassLoader`:'
  prefs: []
  type: TYPE_NORMAL
- en: The `ProtectionDomain` class is used to encapsulate a group of classes so that
    permissions can be granted to the domain.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `PermissionCollection` class represents a collection of permission objects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `SecureClassLoader` class, which extends the `ClassLoader` class, provides
    additional functionality for defining classes with permissions for retrieval by
    the system policy. In Java 9, this class uses `ConcurrentHashMap` for increased
    security.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Permission evaluation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Under the category of permission evaluation, three optimizations were made:'
  prefs: []
  type: TYPE_NORMAL
- en: The `identifyPolicyEntries` list previously had policy provider code for synchronization.
    This code has been removed in JDK 9.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PermissionCollection` entries are now stored in a `ConcurrentHashMap`. They
    were previously stored as a `HashMap` in a `Permission` class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Permissions are now stored in concurrent collections in subclasses of `PermissionCollection`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The java.Security.CodeSource package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A hash code is an object-generated number that is stored in a hash table for
    rapid storage and retrieval. Every object in Java has a hash code. Here are some
    characteristics and rules for hash codes:'
  prefs: []
  type: TYPE_NORMAL
- en: Hash codes are the same for equal objects within a running process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hash codes can change between execution cycles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hash codes should not be used as keys
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Java 9 platform includes a modified `hashCode` method of `java.security.CodeSource`
    to optimize DNS lookups. These can be processor intensive, so a String version
    of the code source URL is used to compute hash codes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `CodeSource` class definition follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This class has the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`public boolean equals(Object obj)`: Returns `true` if the objects are equal.
    This overrides the `equals` method in the `Object` class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public final Certificate[] getCertificates()`: Returns an array of certificates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public final CodeSigner[] getCodeSigners()`: Returns an array of the code
    signers associated with the `CodeSource`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public final URL getLocation()`: Returns the URL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public int hashCode()`: Returns the hash code value for the current object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public boolean implies(CodeSource codesource)`: Returns true if the given
    code source meets the following criteria:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: is not null
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: object's certificates are not null
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: object's location is not null
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public String toString()`: Returns a `String` with information about the `CodeSource`
    to include the location and certificates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Package checking algorithm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Java 9's final performance improvement when running applications with a security
    manager installed, came in the form of the `java.lang.SecurityManager` package
    enhancements. Specifically, the `checkPackageAccess` method's package checking
    algorithm was modified.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `java.lang.SecurityManager` class allows applications to implement security
    policy on specific operations. The `public void checkPackageAccess(String pkg)`
    method, of this class receives a comma-delimited list of restricted packages from
    the the `getProperty` method. As illustrated here, depending on the evaluation,
    the `checkPackageAccess` method can throw one of two exceptions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3eb8d4b8-ce69-45d2-9aa9-089c3242a60b.png)'
  prefs: []
  type: TYPE_IMG
- en: TLS application-layer protocol negotiation extension
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Java Enhancement Proposal 244, simply enhanced the `javax.net.ssl` package so
    that it supports the **Transport Layer Security** (**TLS**) **ALPN** (**Application
    Layer Protocol Negotiation**) extension. This extension permits application protocol
    negotiation for TLS connections.
  prefs: []
  type: TYPE_NORMAL
- en: TLS ALPN extension
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The ALPN is a TLS extension and can be used to negotiate which protocol to
    implement when using a secure connection. ALPN represents an efficient means of
    negotiating protocols. As indicated in the following diagram, there are five basic
    steps to TLS handshakes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ad131890-dcff-459d-8703-ee8fa804d6b7.png)'
  prefs: []
  type: TYPE_IMG
- en: The javax.net.ssl package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `java.net.ssl` package contains classes relating to secure socket packages.
    This permits us to use SSL as an example, for the reliable detection of errors
    introduced to the network byte stream. It also provides the ability to encrypt
    the data as well as provide authentication of client and server.
  prefs: []
  type: TYPE_NORMAL
- en: 'This package includes the following interfaces:'
  prefs: []
  type: TYPE_NORMAL
- en: '`public interface HandshakeCompletedListener extends EventListener`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public interface HostnameVerifier`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public interface KeyManager`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`` `public interface ManagerFactoryParameters` ``'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public interface SSLSession`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public interface SSLSessionBindingListener extends EventListener`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public interface SSLSessionContext`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public interace TrustManager`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public interface X509KeyManager extends KeyManager`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public interface X509TrustManager extends TrustManager`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `java.net.ssl` package also has the following sub-classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`public class CertPathTrustManagerParameters extends Object implements ManagerFactoryParameters`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public abstract class ExtendedSSLSession extends Object implements SSLSession`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public class HandshakeCompleteEvent extends EventObject`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public abstract class HttpsURLConnection extends HttpURLConnection`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public class KeyManagerFactory extends Object`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public abstract class KeyManagerFactorySpi`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public class KeyStoreBuilderParameters extends Object implements ManagerFactoryParameters`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public class SSLContext extends Object`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public abstract class SSLContextSpi extends Object`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public abstract class SSLEngine extends Object`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public class SSLEngineResult extends Object`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public class SSLParameters extends Object`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public final class SSLPermission extends BasicPermission`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public abstract class SSLServerSocket extends ServerSocket`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public abstract class SSLServerSocketFactory extends ServerSocketFactory`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public class SSLSessionBindingEvent extends EventObject`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public abstract class SSLSocket extends Socket`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public abstract class SSLSocketFactory extends SocketFactory`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public class TrustManagerFactory extends Object`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`` `public abstract class TrustManagerFactorySpi extends Object` ``'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public abstract class X509ExtendedKeyManager extends Object implements X509KeyManager`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public abstract class X509ExtendedTrustManager extends Object implements x509TrustManager`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The java.net.ssl package extension
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The change to the `java.net.ssl` package in the Java 9 platform is that it
    now supports the TLS ALPN extension. Key benefits of this change are:'
  prefs: []
  type: TYPE_NORMAL
- en: TLS clients and servers can now use multiple application-layer protocols, which
    may or may not use the same transport-layer port
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ALPN extension permits clients to prioritize application-layer protocols
    it supports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Servers can select a client protocol and for the TLS connection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports HTTP/2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following illustration was previously presented as the five basic steps
    to TLS handshakes. Updated for Java 9 and presented here, the illustration indicates
    where the protocol names are shared between the client and server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cba4b2e5-95d3-46b2-867f-67ed154af091.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the client''s list of application layer protocols is received, the server
    can select the server''s preferred intersection value and externally scan initial
    plain text `ClientHellos` and select an ALPN protocol. An application server will
    do one of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Select any of the supported protocols
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decide that the ALPN values (remotely offered and locally supported) are mutually
    exclusive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ignore the ALPN extension
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other key behaviors with regards to the ALPN extension:'
  prefs: []
  type: TYPE_NORMAL
- en: The server can alter connection parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After the SSL/TLS handshake starts, the application can query to see if an ALPN
    value has been selected yet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After the SSL/TLS handshake ends, the application can review which protocol
    was used
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A `ClientHello` is the first message in the TLS handshake. It has the following
    structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Leveraging CPU instructions for GHASH and RSA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The self-descriptive title of Java Enhancement Proposal (JEP) 246, **Leverage
    CPU Instructions for GHASH and RSA**, provides great insight into its goal. The
    point of this JEP was to improve the performance of cryptographic operations,
    specifically GHASH and RSA. The performance improvement has been achieved in Java
    9 by leveraging the newest SPARC and Intel x64 CPU instructions.
  prefs: []
  type: TYPE_NORMAL
- en: This enhancement did not require new or modified APIs as part of the Java 9
    platform.
  prefs: []
  type: TYPE_NORMAL
- en: Hashing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Galois HASH** (**GHASH**) and **Rivest-Shamir-Adleman** (**RSA**) are crypto
    systems hashing algorithms. Hashes are a fixed length string or number generated
    from a string of text. Algorithms, specifically hashing algorithms, are devised
    so that the resultant hashes cannot be reverse engineered. We use hashing to store
    passwords that are generated with a salt.'
  prefs: []
  type: TYPE_NORMAL
- en: Salts, in cryptology, are random data used as an input to a hashing function
    to generate a password. Salts help protect against rainbow table attacks and dictionary
    attacks.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following graphic illustrates the basics of how hashing works:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0d04339c-77d0-4e35-9978-19a70ee1a5d3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, the hashing algorithm is fed plain text and a salt resulting
    in a new hashed password and the salt being stored. Here is the same graphic with
    sample input/output to demonstrate the functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2760ddd0-8d13-46df-b1f0-e2c8d75cb5e9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The validation process, the following diagram starts with the user entering
    their plain text password. The hashing algorithm takes that plain text and rehashes
    it with the stored salt. Then the resulting hashed password is compared to the
    stored one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6934f835-2c43-4bf3-a07c-3fceb6fbc617.png)'
  prefs: []
  type: TYPE_IMG
- en: OCSP stapling for TLS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Online Certificate Status Protocol** (**OCSP**) stapling is a method of checking
    the revocation status of digital certificates. The OCSP stapling approach for
    determining an SSL certificate''s validity is assessed as being both safe and
    quick. The determination speed is achieved by permitting web servers to provide
    the validity information on its organic certificates instead of the lengthier
    process of requesting validating information from the certificate''s issuing vendor.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Online Certificate Status Protocol** (**OCSP**) stapling was previously referred
    to as the **Transport Layer Security** (**TLS**) certificate status request extension.'
  prefs: []
  type: TYPE_NORMAL
- en: OCSP stapling primer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'THE OCSP stapling process involves several components and validity checks.
    The following graphic illustrates the OCSP stapling process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f13723c8-e7c1-44f3-8b75-f0ee59f1a148.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the process starts when the user attempts to open an SSL-encrypted
    website via their browser. The browser queries the web server to ensure the SSL-encrypted
    website has a valid certificate. The web server queries the certificate's vendor
    and is provided with both the certificate status and the digital signed time-stamp.
    The web server takes those two components (certificate status and digital signed
    time-stamp), staples them together, and returns the stapled set to the requesting
    browser. The browser can then check the validity of the time-stamp and decide
    whether to display the SSL-encrypted website or to display an error.
  prefs: []
  type: TYPE_NORMAL
- en: Changes for the Java 9 platform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Java Enhancement Proposal 249, **OCSP Stapling for TLS**, implements OCSP stapling
    via the TLS certificate status request extension. OSCP stapling checks the validity
    of X.509 certificates.
  prefs: []
  type: TYPE_NORMAL
- en: X.509 certificates are digital certificates that use the X509 **Public Key Infrastructure**
    (**PKI**).
  prefs: []
  type: TYPE_NORMAL
- en: 'Prior to Java 9, the certificate validity check (really, the check to see if
    the certificate has been revoked) can be enabled on the client side and has the
    following inefficiencies:'
  prefs: []
  type: TYPE_NORMAL
- en: OCSP responder performance bottlenecks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance degradation based on multiple passes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additional performance degradation if OCSP checking is performed client side
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: False **fails** when browsers do not connect to an OCSP responder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Susceptibility of denial of service attacks on OCSP responders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The new OCSP stapling for TLS includes the following system property changes
    for the Java 9 platform:'
  prefs: []
  type: TYPE_NORMAL
- en: '`jdk.tls.client.enableStatusRequestExtension`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Default setting: true'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Enables `status_request` extension
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Enables `status_request_v2` extension
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Enables processing `CertificateStatus` messages from server
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jdk.tls.server.enableStatusRequestExtension`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Default setting: false'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Enables OCSP stapling support server-side
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jdk.tls.stapling.responseTimeout`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Default setting: 5000 milliseconds'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Controls maximum time allocated by server to obtain OCSP responses
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jdk.tls.stapling.cacheSize`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Default setting: 256'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Controls maximum number of cache entries
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Can set maximum to zero eliminates ceiling
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jdk.tls.stapling.cacheLifetime`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Default setting: 3600 seconds (1 hour)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Controls maximum lifetime of a cached response
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Can set value to zero in order to disable cache lifetime
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jdk.tls.stapling.responderURI`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Default setting: none'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Can set a default URI for certificates without the **Authority Info Access**
    (**AIA**) extension
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Does not override the AIA extension unless `jdk.tls.stapling.Override` property
    is set
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jdk.tls.stapling.respoderOverride`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Default setting: false'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Allows a `jdk.tls.stapling.responderURI` provided property to override AIA extension
    values
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jdk.tls.stapling.ignoreExtensions`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Default setting: false'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Disables OCSP extension forwarding as specified in `status_request` or `status_request_v2`
    TLS extensions.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `status_request` and `status_request_v2` TLS hello extensions are now supported
    by both client and server-side Java implementations.
  prefs: []
  type: TYPE_NORMAL
- en: DRBG-based SecureRandom implementations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Prior to Java 9, the JDK had two approaches to generating secure random numbers.
    One method, written in Java, used SHA1-based random number generation and was
    not terribly strong. The other method was platform-dependent and used preconfigured
    libraries.
  prefs: []
  type: TYPE_NORMAL
- en: '**Deterministic Random Bit Generator** (**DRBG**) is a method for generating
    random numbers. It has been approved by the **National Institute of Standards
    and Technology** (**NIST**), a branch of the U.S. Department of Commerce. DRBG
    methodologies include modern and stronger algorithms for generating secure random
    numbers.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Java Enhancement Proposal 273, **DRBG-Based SecureRandom Implementations**
    aimed to implement three specific DRBG mechanisms. These mechanisms are listed
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Hash_DRBG`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HMAC_DRBG`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CTR_DRBG`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can learn specifics about each of the DRBG mechanisms at [http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-90Ar1.pdf](http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-90Ar1.pdf)
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the three new APIs:'
  prefs: []
  type: TYPE_NORMAL
- en: '`SecureRandom`: New methods allowing the configuration of `SecureRandom` objects
    with the below listed configurable properties:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: seeding
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: reseeding
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: random-bit-generation
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SecureRandomSpi`: new methods to implement the `SecureRandom` methods'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SecureRandomParameter`: new interface so input can be passed to the new `SecureRandom`
    methods'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at several small, but significant changes to the
    JDK that involve security. The featured security enhancements that are part of
    the Java 9 platform provide developers with the distinct ability to write and
    maintain applications that implement security. Specifically, we covered DTLS,
    keystores, improving security application performance, the TLS application-layer
    protocol negotiation extension, leveraging CPU instructions for GHASH and RSA,
    OCSP stapling for TLS, and DRBG-based `SecureRandom` implementations.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter we will explore the new command-line flags used in Java
    9 as well as changes to various command-line tools. Our coverage will include
    managing the Java JVM run-time and compiler using the new command-line options
    and flags.
  prefs: []
  type: TYPE_NORMAL
