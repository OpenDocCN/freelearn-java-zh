["```java\n[localePrefix/][libraryName/][libraryVersion/]resourceName[/resourceVersion]\n```", "```java\n<h:outputStylesheet library=\"default\" name=\"css/rafa.css\"/>\n```", "```java\n<h:outputScript library=\"default\" name=\"js/rafa.js\"/>\n```", "```java\n<h:graphicImage library=\"default\" name=\"img/rafa.png\"/>\n```", "```java\n<h:outputStylesheet name=\"rafa.css\"  />\n```", "```java\npublic class CustomResourceHandler extends\n             javax.faces.application.ResourceHandlerWrapper {\n\n private ResourceHandler wrapped;\n\n public CustomResourceHandler(ResourceHandler wrapped) {\n  this.wrapped = wrapped;\n }\n\n @Override\n public ResourceHandler getWrapped() {\n  return this.wrapped;\n }\n\n @Override\n public Resource createResource(String resourceName, String libraryName){         \n\n  if ((!resourceName.equals(\"rafa.css\")) && \n      (!resourceName.equals(\"roger.css\"))) {\n       //in JSF 2.0 and JSF 2.2\n       //return super.createResource(resourceName, libraryName);  \n       //only in JSF 2.2\n       return super.createResourceFromId\n        (libraryName+\"/\"+resourceName);        \n  } else {\n       return new PlayerResource(resourceName);\n  }\n\n }\n}\n```", "```java\npublic class PlayerResource extends  \n       javax.faces.application.ResourceWrapper {\n\n private String resourceName;\n\n public PlayerResource(String resourceName) {\n  this.resourceName = resourceName;\n }\n\n @Override\n public Resource getWrapped() {\n  return this;\n }\n\n @Override\n public String getRequestPath() {\n  return \"players/css/\" + this.resourceName;\n }\n}\n```", "```java\n<application>\n <resource-handler>book.beans.CustomResourceHandler</resource-handler>\n</application>\n```", "```java\n<h:outputStylesheet name=\"rafa.css\"/>\n<h:outputStylesheet name=\"roger.css\"/>\n```", "```java\n<context-param>\n <param-name>javax.faces.WEBAPP_RESOURCES_DIRECTORY</param-name>\n <param-value>/players/css</param-value>\n</context-param>\n```", "```java\n<context-param>\n <param-name>javax.faces.WEBAPP_RESOURCES_DIRECTORY</param-name>\n <param-value>/WEB-INF/resources</param-value>\n</context-param>\n```", "```java\n<h:outputStylesheet library=\"default\" name=\"css/rafa.css\"/>\n```", "```java\n<link type=\"text/css\" rel=\"stylesheet\" href=\"/ch5_1_3/faces/javax.faces.resource/css/rafa.css?ln=default\" />\n```", "```java\n<link type=\"text/css\" rel=\"stylesheet\" href=\"/ch5_1_3/faces/javax.faces.resource/css/rafa.css?ln=default&amp;v=v4.2.1\">\n```", "```java\n@Override\npublic Resource createResource(String resourceName, String libraryName) {\n  Resource resource = super.createResource(resourceName, libraryName);\n  return new PlayerResource(resource);\n}\n```", "```java\n@Override\npublic String getRequestPath() {            \n String requestPath = resource.getRequestPath();\n\n logger.log (Level.INFO, \"Initial request path is: {0}\", requestPath);\n\n String new_version = \"v4.2.1\";\n\n if(requestPath.contains(\"?\"))\n    requestPath = requestPath + \"&v=\" + new_version;\n else\n    requestPath = requestPath + \"?v=\" + new_version;\n\n logger.log (Level.INFO, \"New request path is: {0}\", requestPath);\n\n return requestPath;\n}\n```", "```java\npublic class CustomResourceHandler extends\n       javax.faces.application.ResourceHandlerWrapper {\n\n@Inject\nprivate VersionBean versionBean;\n\n...\n@Override\npublic Resource createResource(String resourceName, String libraryName) {\n\n Resource resource = super.createResource(resourceName, libraryName);\n return new PlayerResource(resource, versionBean.getVersion());\n}\n...\n```", "```java\nbackground-image: url(*link_to_image*)\n```", "```java\nbody {\n    background-image: url('#{resource[\"default:img/rafa.png\"]}')\n}\n```", "```java\n<h:graphicImage value=\"#{resource['default:img/rafa.png']}\"/>\n```", "```java\npublic void addResourcesAction() {\n FacesContext facesContext = FacesContext.getCurrentInstance();\n UIOutput rafa_css = new UIOutput();\n UIOutput rafa_js = new UIOutput();\n\n rafa_css.setRendererType(\"javax.faces.resource.Stylesheet\");\n rafa_css.getAttributes().put(\"library\", \"default\");\n rafa_css.getAttributes().put(\"name\", \"css/rafa.css\");\n rafa_js.setRendererType(\"javax.faces.resource.Script\");\n rafa_js.getAttributes().put(\"library\", \"default\");\n rafa_js.getAttributes().put(\"name\", \"js/rafa.js\");\n facesContext.getViewRoot().addComponentResource\n            (facesContext, rafa_css, \"head\");\n facesContext.getViewRoot().addComponentResource\n            (facesContext, rafa_js, \"head\");\n}\n```", "```java\npublic class URLHandler extends ViewHandlerWrapper {\n\n private ViewHandler baseViewHandler;\n\n public URLHandler(ViewHandler baseViewHandler) {\n  this.baseViewHandler = baseViewHandler;\n }\n\n @Override\n  public String getActionURL(FacesContext context, String viewId) {\n   return convertToRelativeURL(context,\n          baseViewHandler.getActionURL(context, viewId));\n }\n\n @Override\n public String getResourceURL(FacesContext context, String path) {\n  return convertToRelativeURL(context,\n         baseViewHandler.getResourceURL(context, path));\n }\n\n @Override\n public ViewHandler getWrapped() {\n  return baseViewHandler;\n }\n\n private String convertToRelativeURL(FacesContext context,\n                                                String theURL){\n\n final HttpServletRequest request = ((HttpServletRequest)  \n                          context.getExternalContext().getRequest());\n final URI uri;\n String prefix = \"\";\n\n String string_uri = request.getRequestURI();\n\n try {\n     uri = new URI(string_uri);\n } catch (URISyntaxException ex) {\n     Logger.getLogger(URLHandler.class.getName()).\n                                  log(Level.SEVERE, null, ex);\n     return \"\";\n }\n\n String path = uri.getPath();\n String new_path = path.replace(\"//\", \"/\");\n\n if (theURL.startsWith(\"/\")) {\n     int count = new_path.length() - new_path.replace(\"/\", \"\").length();\n     for (int i = 0; i < (count - 1); i++) {\n          prefix = prefix + \"/..\";\n     }\n     if (prefix.length() > 0) {\n         prefix = prefix.substring(1);\n     }\n }\n\n return (prefix + theURL);\n }\n}\n```", "```java\n...\n<application>\n <view-handler>book.beans.URLHandler</view-handler>  \n</application>\n...\n```", "```java\n<link type=\"text/css\" rel=\"stylesheet\" href=\"../ch5_2_1/faces/javax.faces.resource/css/rafa.css?ln=default\">\n```", "```java\npublic class ExceptionHandler extends ViewHandlerWrapper {\n\n private static final Logger logger =\n         Logger.getLogger(ExceptionHandler.class.getName());\n private ViewHandler baseViewHandler;\n\n public ExceptionHandler(ViewHandler baseViewHandler) {\n        this.baseViewHandler = baseViewHandler;\n }\n\n @Override\n public UIViewRoot restoreView(FacesContext context, String viewId) {\n\n  UIViewRoot root;\n\n  root = baseViewHandler.restoreView(context, viewId);\n  if (root == null) {\n      logger.info(\"The session has expired ...\n                   I will not allow ViewExpiredException ...\");\n      root = createView(context, viewId);\n\n      //root = createView(context, \"/expired.xhtml\");\n      //context.renderResponse();\n  }\n return root;\n }\n\n @Override\n public ViewHandler getWrapped() {\n  return baseViewHandler;\n }\n}\n```", "```java\n...\n<application>\n <view-handler>book.beans.ExceptionHandler</view-handler>  \n</application>\n...\n```", "```java\n<h:inputText value=\"Rafael Nadal\" player-nickname=\"Rafa\" player-mother-name=\"Ana Maria Parera\" player-father-name=\"Sebastián Nadal\" player-coach-name=\" Toni Nadal\"/>\n```", "```java\n<input id=\"...\" name=\"...\"\n       value=\"Rafael Nadal\" type=\"text\">\n```", "```java\npublic class PlayerInputTextRenderer extends TextRenderer {\n\npublic PlayerInputTextRenderer(){}\n\n@Override\n protected void getEndTextToRender(FacesContext context,\n                UIComponent component, String currentValue)\n                     throws java.io.IOException {\n\n  String[] attributes = {\"player-nickname\",\n          \"player-mother-name\", \"player-father-name\"};\n  ResponseWriter writer = context.getResponseWriter();\n  for (String attribute : attributes) {\n       String value = (String) component.getAttributes().get(attribute);\n       if (value != null) {\n           writer.writeAttribute(attribute, value, attribute);\n       }\n  }\n  super.getEndTextToRender(context, component, currentValue);\n }\n}\n```", "```java\n<application>\n <render-kit>\n  <renderer>\n   <component-family>javax.faces.Input</component-family>\n   <renderer-type>javax.faces.Text</renderer-type>\n   <renderer-class>book.beans.PlayerInputTextRenderer</renderer-class>\n  </renderer>\n </render-kit>\n</application>\n```", "```java\n<input id=\"...\" name=\"...\" player-nickname=\"Rafa\" player-mother-name=\"Ana Maria Parera\" player-father-name=\"Sebastián Nadal\" value=\"Rafael Nadal\" type=\"text\">\n```", "```java\n@FacesRenderer(componentFamily=\"javax.faces.Input\",rendererType=\"javax.faces.Text\")\n```", "```java\npublic class RafaLabelRenderer extends LabelRenderer{\n\n public RafaLabelRenderer(){}\n\n @Override\n public void encodeEnd(FacesContext context,\n             UIComponent component)throws IOException{\n\n  ResponseWriter responseWriter = context.getResponseWriter();\n  responseWriter.write(\"<img src='resources/default/img/logo.png'/>\");\n}    \n}\n```", "```java\n <component-family>javax.faces.Output</component-family>\n <renderer-type>javax.faces.Text</renderer-type>\n <renderer-class>book.beans.RafaLabelRenderer</renderer-class>\n```", "```java\npublic class EscapeResponseWriter extends ResponseWriterWrapper {\n\n private ResponseWriter responseWriter;\n\n public EscapeResponseWriter(ResponseWriter responseWriter) {\n  this.responseWriter = responseWriter;\n }\n\n @Override\n public ResponseWriter getWrapped() {\n  return responseWriter;\n }\n\n @Override\n public void writeText(Object text, UIComponent component,\n                            String property) throws IOException {\n\n  String escape = (String) component.getAttributes().get(\"escape\");\n  if (escape != null) {\n      if (\"false\".equals(escape)) {\n          super.write(String.valueOf(text));\n      } else {\n        super.writeText(String.valueOf(text), component, property);\n      }\n  }\n }\n}\n```", "```java\npublic class EscapeMessagesRenderer extends MessagesRenderer {\n\n public EscapeMessagesRenderer(){}\n\n @Override\n public void encodeEnd(FacesContext context,\n         UIComponent component) throws IOException {\n\n ResponseWriter responseWriter = context.getResponseWriter();\n context.setResponseWriter(new EscapeResponseWriter(responseWriter));          \n super.encodeEnd(context, component);\n context.setResponseWriter(responseWriter);\n }\n}\n```", "```java\n<renderer>\n <component-family>javax.faces.Messages</component-family>\n <renderer-type>javax.faces.Messages</renderer-type>\n <renderer-class>book.beans.EscapeMessagesRenderer</renderer-class>\n</renderer>\n```", "```java\n<h:messages escape=\"false\" />\n```", "```java\npublic class CustomRenderKit extends RenderKitWrapper {\n\n private RenderKit renderKit;\n\n public CustomRenderKit() {}\n\n public CustomRenderKit(RenderKit renderKit) {\n  this.renderKit = renderKit;\n }\n\n @Override\n public Renderer getRenderer(String family, String rendererType) {\n  if (family.equals(\"javax.faces.Input\")) {\n      Renderer inputRenderer = getWrapped().\n               getRenderer(family, rendererType);\n      return new RafaRenderer(inputRenderer);\n  }\n  return getWrapped().getRenderer(family, rendererType);\n }\n\n @Override\n public RenderKit getWrapped() {\n  return renderKit;\n }\n}\n```", "```java\n@ResourceDependencies({\n@ResourceDependency(name = \"css/rafastyles.css\", \n                    library = \"default\", target = \"head\")\n})\n@FacesRenderer(componentFamily = \"javax.faces.Rafa\", \n               rendererType = RafaRenderer.RENDERER_TYPE)\npublic class RafaRenderer extends RendererWrapper {\n\n private Renderer renderer;\n public static final String RENDERER_TYPE = \n               \"book.beans.RafaRenderer\";\n\n public RafaRenderer() {}\n\n public RafaRenderer(Renderer renderer) {\n  this.renderer = renderer;\n }\n\n @Override\n public void encodeBegin(FacesContext context, \n             UIComponent uicomponent) throws IOException {\n  ResponseWriter responseWriter = context.getResponseWriter();\n  responseWriter.writeAttribute(\"class\", \"rafastyle\", \"class\");\n  getWrapped().encodeBegin(context, uicomponent);\n }\n\n @Override\n public Renderer getWrapped() {\n  return renderer;\n }\n}\n```", "```java\n<render-kit>\n <render-kit-class>\n   book.beans.CustomRenderKit\n </render-kit-class>\n</render-kit>\n```", "```java\n@FacesBehavior(value = \"confirm\")\npublic class ConfirmDeleteBehavior extends ClientBehaviorBase {\n\n@Override\n public String getScript(ClientBehaviorContext behaviorContext) {\n  return \"return confirm('Are you sure ?');\";\n }\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<facelet-taglib version=\"2.2\"\n\n  xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee \n   http://xmlns.jcp.org/xml/ns/javaee/web-\n                             facelettaglibrary_2_2.xsd\">\n <namespace>http://www.custom.tags/jsf/delete</namespace>\n <tag>\n  <tag-name>confirmDelete</tag-name>\n  <behavior>\n   <behavior-id>confirm</behavior-id>\n  </behavior>\n </tag>\n</facelet-taglib>\n```", "```java\n<context-param>\n <param-name> javax.faces.FACELETS_LIBRARIES</param-name>\n <param-value>/WEB-INF/delete.taglib.xml</param-value>\n</context-param>\n```", "```java\n<?xml version='1.0' encoding='UTF-8' ?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html \n\n      >\n <h:head>\n  <title></title>\n </h:head>\n <h:body>\n  <h:form>\n   <h:commandButton value=\"Delete\" action=\"done\">\n    <b:confirmDelete/>\n   </h:commandButton>\n  </h:form>\n </h:body>\n</html>\n```", "```java\npublic class FocusBlurHandler extends TagHandler {\n\n private FocusBlurBehavior onfocus = new FocusBlurBehavior();\n private FocusBlurBehavior onblur = new FocusBlurBehavior();\n\n public FocusBlurHandler(TagConfig tagConfig) {\n  super(tagConfig);\n }\n\n @Override\n public void apply(FaceletContext ctx, UIComponent parent)\n        throws IOException {\n\n  if (parent instanceof ClientBehaviorHolder) {\n      ClientBehaviorHolder clientBehaviorHolder =\n                  (ClientBehaviorHolder) parent;\n\n      clientBehaviorHolder.addClientBehavior(\"focus\", onfocus);\n      clientBehaviorHolder.addClientBehavior(\"blur\", onblur);\n  }\n }\n}\n```", "```java\n@FacesBehaviorRenderer(rendererType = \"focusblurrenderer\")\n@ResourceDependency(name=\"player.css\", target=\"head\")\npublic class FocusBlurRenderer extends ClientBehaviorRenderer {\n\n private static final String FOCUS_EVENT = \"focus\";\n private static final String BLUR_EVENT = \"blur\";\n\n @Override\n public String getScript(ClientBehaviorContext behaviorContext,\n        ClientBehavior behavior) {\n\n  if (FOCUS_EVENT.equals(behaviorContext.getEventName())) {\n      return \"this.setAttribute('class','focus-css');\";\n  }\n\n  if (BLUR_EVENT.equals(behaviorContext.getEventName())) {\n      return \"this.setAttribute('class','blur-css');\";\n  }\n\n return null;\n }\n}\n```", "```java\n@FacesBehavior(value = \"focusblur\")\npublic class FocusBlurBehavior extends ClientBehaviorBase {\n\n @Override\n public String getRendererType() {           \n  return \"focusblurrenderer\";\n }\n}\n```", "```java\n*XXXFactory* factory = (*XXXFactory*)    FactoryFinder.getFactory(FactoryFinder.*XXX_FACTORY*);\n```", "```java\nRenderKitFactory factory = (RenderKitFactory)FactoryFinder.getFactory(FactoryFinder.RENDER_KIT_FACTORY);\n```", "```java\npublic class CustomExceptionHandlerFactory\n                   extends ExceptionHandlerFactory {\n\n private ExceptionHandlerFactory exceptionHandlerFactory;\n\n public CustomExceptionHandlerFactory(){}\n\n public CustomExceptionHandlerFactory(ExceptionHandlerFactory\n                                         exceptionHandlerFactory) {\n  this.exceptionHandlerFactory = exceptionHandlerFactory;\n }\n\n @Override\n public ExceptionHandler getExceptionHandler() {\n  ExceptionHandler handler = new CustomExceptionHandler\n               (exceptionHandlerFactory.getExceptionHandler());\n\n  return handler;\n }\n}\n```", "```java\npublic class CustomExceptionHandler extends ExceptionHandlerWrapper {\n\n private static final Logger logger =\n         Logger.getLogger(CustomExceptionHandler.class.getName());\n private ExceptionHandler exceptionHandler;\n\n CustomExceptionHandler(ExceptionHandler exceptionHandler) {\n  this.exceptionHandler = exceptionHandler;\n }\n\n @Override\n public ExceptionHandler getWrapped() {\n  return exceptionHandler;\n }\n\n @Override\n public void handle() throws FacesException {\n\n  final Iterator<ExceptionQueuedEvent> queue =\n        getUnhandledExceptionQueuedEvents().iterator();\n\n  while (queue.hasNext()) {\n\n   //take exceptions one by one\n   ExceptionQueuedEvent item = queue.next();\n   ExceptionQueuedEventContext exceptionQueuedEventContext =\n                  (ExceptionQueuedEventContext) item.getSource();\n\n   try {\n       //log error\n       Throwable throwable = exceptionQueuedEventContext.getException();\n       logger.log(Level.SEVERE, \"EXCEPTION: \", throwable.getMessage());\n\n       //redirect error page\n       FacesContext facesContext = FacesContext.getCurrentInstance();\n       Map<String, Object> requestMap =\n                   facesContext.getExternalContext().getRequestMap();\n       NavigationHandler nav =\n                   facesContext.getApplication().getNavigationHandler();\n\n       requestMap.put(\"errmsg\", throwable.getMessage());\n       nav.handleNavigation(facesContext, null, \"/error\");\n       facesContext.renderResponse();\n       } finally {\n         //remove it from queue\n         queue.remove();\n         }\n  }\n\n  getWrapped().handle();\n }\n}\n```", "```java\n<factory>\n <exception-handler-factory>\n  book.beans.CustomExceptionHandlerFactory\n </exception-handler-factory>\n</factory>\n```", "```java\n<factory>\n <exception-handler-factory>\n  org.omnifaces.exceptionhandler.FullAjaxExceptionHandlerFactory\n </exception-handler-factory>\n</factory>\n```", "```java\n<error-page>\n  <exception-type>\n    java.lang.NullPointerException\n  </exception-type>\n  <location>/null.jsf</location>\n</error-page>\n<error-page>\n  <exception-type>\n    java.lang.Throwable\n  </exception-type>\n  <location>/ throwable.jsf</location>\n</error-page>\n```", "```java\npublic class CustomRenderKitFactory extends RenderKitFactory {\n\n private RenderKitFactory renderKitFactory;\n\n public CustomRenderKitFactory() {}\n\n public CustomRenderKitFactory(RenderKitFactory renderKitFactory){\n  this.renderKitFactory = renderKitFactory;                \n }\n\n @Override\n public void addRenderKit(String renderKitId, \n                                 RenderKit renderKit){\n  renderKitFactory.addRenderKit(renderKitId, renderKit);\n }\n\n @Override\n public RenderKit getRenderKit(FacesContext context, \n                                 String renderKitId) {\n  RenderKit renderKit = renderKitFactory.\n            getRenderKit(context, renderKitId);\n  return (HTML_BASIC_RENDER_KIT.equals(renderKitId)) ? \n            new CustomRenderKit(renderKit) : renderKit;\n }\n\n @Override\n public Iterator<String> getRenderKitIds() {\n  return renderKitFactory.getRenderKitIds();\n }\n}\n```", "```java\n<factory>\n <render-kit-factory>\n  book.beans.CustomRenderKitFactory\n </render-kit-factory>\n</factory>\n```", "```java\nFacesContext.getCurrentInstance().getPartialViewContext();\n```", "```java\npublic class CustomPartialViewContextFactory\n             extends PartialViewContextFactory {\n\n private PartialViewContextFactory partialViewContextFactory;\n\n public CustomPartialViewContextFactory(){}\n\n public CustomPartialViewContextFactory\n        (PartialViewContextFactory partialViewContextFactory) {\n  this.partialViewContextFactory = partialViewContextFactory;\n }\n\n @Override\n public PartialViewContext getPartialViewContext(FacesContext context) {\n\n PartialViewContext handler = new CustomPartialViewContext\n    (partialViewContextFactory.getPartialViewContext(context));\n\n return handler;\n }\n}\n```", "```java\npublic class CustomPartialViewContext extends PartialViewContextWrapper {\n\n private PartialViewContext partialViewContext;\n\n public CustomPartialViewContext(PartialViewContext partialViewContext) {\n  this.partialViewContext = partialViewContext;\n }\n\n @Override\n public PartialViewContext getWrapped() {\n  return partialViewContext;\n }\n\n @Override\n public Collection<String> getRenderIds() {\n\n  FacesContext facesContext = FacesContext.getCurrentInstance();\n  if (PhaseId.RENDER_RESPONSE == facesContext.getCurrentPhaseId()) {\n      UIComponent component = findComponent(\"msgsId\",\n                              facesContext.getViewRoot());\n      if (component != null && component.isRendered()) {\n          String componentClientId = component.getClientId(facesContext);\n          Collection<String> renderIds = getWrapped().getRenderIds();\n          if (!renderIds.contains(componentClientId)) {\n              renderIds.add(componentClientId);\n          }\n      }\n  }\n  return getWrapped().getRenderIds();\n }\n\n private UIComponent findComponent(String id, UIComponent root) {\n  if (root == null) {\n      return null;\n  } else if (root.getId().equals(id)) {\n             return root;\n  } else {\n    List<UIComponent> childrenList = root.getChildren();\n    if (childrenList == null || childrenList.isEmpty()) {\n        return null;\n    }\n    for (UIComponent child : childrenList) {\n         UIComponent result = findComponent(id, child);\n         if (result != null) {\n             return result;\n         }\n    }\n  }\n  return null;\n }\n}\n```", "```java\n<factory>\n <partial-view-context-factory>\n   book.beans.CustomPartialViewContextFactory\n </partial-view-context-factory>\n</factory>\n```", "```java\npublic boolean visitTree(VisitContext context,\n               VisitCallback callback)\n```", "```java\npublic class CustomVisitContextFactory extends VisitContextFactory {\n\n private VisitContextFactory visitContextFactory;\n\n public CustomVisitContextFactory() {}\n\n public CustomVisitContextFactory(VisitContextFactory\n                                               visitContextFactory){        \n  this.visitContextFactory = visitContextFactory;\n }\n\n @Override\n public VisitContext getVisitContext(FacesContext context,\n                        Collection<String> ids, Set<VisitHint> hints) {\n  VisitContext handler = new CustomVisitContext(visitContextFactory.\n                                getVisitContext(context, ids, hints));\n\n  return handler;        \n }   \n}\n```", "```java\npublic class CustomVisitContext extends VisitContextWrapper {\n\n private static final Logger logger =\n         Logger.getLogger(CustomVisitContext.class.getName());\n private VisitContext visitContext;\n\n public CustomVisitContext(VisitContext visitContext) {\n  this.visitContext = visitContext;\n }\n\n @Override\n public VisitContext getWrapped() {\n  return visitContext;\n }\n\n @Override\n public VisitResult invokeVisitCallback(UIComponent component,\n                                         VisitCallback callback) {\n  logger.info(\"Custom visit context is used!\");\n  return getWrapped().invokeVisitCallback(component, callback);\n }\n}\n```", "```java\npublic class CustomVisitCallback implements VisitCallback{\n\n @Override\n public VisitResult visit(VisitContext context, UIComponent target) {\n\n  if (!target.isRendered()) {\n      return VisitResult.REJECT;\n  }\n\n  if (target instanceof EditableValueHolder) {\n     ((EditableValueHolder)target).resetValue();\n  }\n\n  return VisitResult.ACCEPT;\n }   \n}\n```", "```java\n<factory>\n <visit-context-factory>\n  book.beans.CustomVisitContextFactory\n </visit-context-factory>\n</factory>\n```", "```java\nFacesContext context = FacesContext.getCurrentInstance();\nUIComponent component = context.getViewRoot();\nCustomVisitCallback customVisitCallback = new CustomVisitCallback();\ncomponent.visitTree(VisitContext.createVisitContext\n            (FacesContext.getCurrentInstance()), customVisitCallback);\n```", "```java\npublic void readFileAction() throws IOException, URISyntaxException {\n\n FacesContext facesContext = FacesContext.getCurrentInstance();\n ExternalContext externalContext = facesContext.getExternalContext();\n Path path = Paths.get(((ServletContext)externalContext.getContext())\n            .getRealPath(\"/resources/rafa.txt\"));\n\n BasicFileAttributes attrs = Files.readAttributes(path,\n                             BasicFileAttributes.class);\n\n externalContext.responseReset();\n externalContext.setResponseContentType(\"text/plain\");\n externalContext.setResponseContentLength((int) attrs.size());\n externalContext.setResponseHeader(\"Content-Disposition\",\n                 \"attachment; filename=\\\"\" + \"rafa.txt\" + \"\\\"\");\n\n int nRead;\n byte[] data = new byte[128];\n InputStream inStream = externalContext.\n     getResourceAsStream(\"/resources/rafa.txt\");\n\n try (OutputStream output = externalContext.getResponseOutputStream()) {\n      while ((nRead = inStream.read(data, 0, data.length)) != -1) {\n              output.write(data, 0, nRead);\n      }\n      output.flush();\n }\n\n facesContext.responseComplete();\n}\n```", "```java\npublic class CustomResponseStream extends OutputStream {\n\n private OutputStream responseStream;\n\n public CustomResponseStream(OutputStream responseStream) {        \n  this.responseStream = responseStream;\n }\n\n @Override\n public void write(byte[] b, int off, int len) throws IOException {\n  String s = new String(b, off, len);\n  s = s.replace('a', 'A');\n\n  byte[] bb = s.getBytes();\n  responseStream.write(bb, off, len);\n }\n\n @Override\n public void write(int b) throws IOException {\n }\n}\n```", "```java\npublic class CustomExternalContextFactory extends ExternalContextFactory{\n\n private ExternalContextFactory externalContextFactory;\n\n public CustomExternalContextFactory(){}\n\n public CustomExternalContextFactory(ExternalContextFactory\n        externalContextFactory){\n  this.externalContextFactory = externalContextFactory;\n }\n\n @Override\n public ExternalContext getExternalContext(Object context,\n        Object request, Object response) throws FacesException {\n\n  ExternalContext handler = new  \n        CustomExternalContext(externalContextFactory\n            .getExternalContext(context, request, response));\n\n   return handler;\n  }    \n}\n```", "```java\npublic class CustomExternalContext extends ExternalContextWrapper {\n\n private ExternalContext externalContext;\n\n public CustomExternalContext(ExternalContext externalContext) {\n  this.externalContext = externalContext;\n }\n\n @Override\n public ExternalContext getWrapped() {\n  return externalContext;\n }\n\n @Override\n public OutputStream getResponseOutputStream() throws IOException {\n  HttpServletResponse response =\n              (HttpServletResponse)externalContext.getResponse();  \n  OutputStream responseStream = response.getOutputStream();\n  return new CustomResponseStream(responseStream);\n }\n}\n```", "```java\n<factory>\n <external-context-factory>\n   book.beans.CustomExternalContextFactory\n </external-context-factory>\n</factory>\n```", "```java\nFacesContext.getCurrentInstance().getExternalContext().getFlash();\n```", "```java\npublic class CustomFlashFactory extends FlashFactory {\n\n private FlashFactory flashFactory;\n\n public CustomFlashFactory() {}\n\n public CustomFlashFactory(FlashFactory flashFactory) {\n  this.flashFactory = flashFactory;\n }\n\n @Override\n public Flash getFlash(boolean create) {        \n  Flash handler = new CustomFlash(flashFactory.getFlash(create));   \n\n  return handler;\n }\n}\n```", "```java\npublic class CustomFlash extends FlashWrapper {\n\n private Flash flash;\n\n public CustomFlash(Flash flash){\n  this.flash = flash;\n }       \n\n//... override here Flash methods\n\n @Override\n public Flash getWrapped() {\n  return this.flash;\n }        \n}\n```", "```java\n@Override\npublic  void setKeepMessages(boolean newValue){\n logger.log(Level.INFO, \"setKeepMessages()\n                         was called with value: {0}\", newValue);\n getWrapped().setKeepMessages(newValue);\n}\n```", "```java\n<factory>\n <flash-factory>book.beans.CustomFlashFactory</flash-factory>\n</factory>\n```", "```java\n<context-param>\n <param-name>javax.faces.CLIENT_WINDOW_MODE</param-name>\n <param-value>url</param-value>\n</context-param>\n```", "```java\npublic void pullWindowIdAction() {\n FacesContext facesContext = FacesContext.getCurrentInstance();\n ExternalContext externalContext=facesContext.getExternalContext();\n\n ClientWindow clientWindow = externalContext.getClientWindow();\n if (clientWindow != null) {\n     logger.log(Level.INFO, \"The current client window id is:{0}\", \n      clientWindow.getId());\n } else {\n     logger.log(Level.INFO, \"Client Window cannot be determined!\");\n }\n}\n```", "```java\n    Enable/Disable client window using h:button:<br/>\n    <h:button value=\"Enable Client Window\" outcome=\"index\"\n                                   disableClientWindow=\"false\"/><br/>\n    <h:button value=\"Disable Client Window\" outcome=\"index\"\n                                   disableClientWindow=\"true\"/><br/>\n    <hr/>\n    Enable/Disable client window using h:link:<br/>\n    <h:link value=\"Enable Client Window\" outcome=\"index\"\n                                   disableClientWindow=\"false\"/><br/>\n    <h:link value=\"Disable Client Window\" outcome=\"index\"\n                                   disableClientWindow=\"true\"/>\n    ```", "```java\n    private FacesContext facesContext;\n    private ExternalContext externalContext;\n    ...\n    ClientWindow clientWindow = externalContext.getClientWindow();\n    //disable\n    clientWindow.disableClientWindowRenderMode(facesContext);\n    //enable\n    clientWindow.enableClientWindowRenderMode(facesContext);\n    ```", "```java\npublic class CustomClientWindowFactory \n              extends ClientWindowFactory {\n\n private ClientWindowFactory clientWindowFactory;\n public CustomClientWindowFactory() {}\n\n public CustomClientWindowFactory(ClientWindowFactory \n              clientWindowFactory) {\n  this.clientWindowFactory = clientWindowFactory;\n }\n\n @Override\n public ClientWindow getClientWindow(FacesContext context) {\n  if (context.getExternalContext().getInitParameter\n     (ClientWindow.CLIENT_WINDOW_MODE_PARAM_NAME).equals(\"url\")) {\n      ClientWindow defaultClientWindow = \n              clientWindowFactory.getClientWindow(context);            \n      ClientWindow customClientWindow = new \n              CustomClientWindow(defaultClientWindow);\n      return customClientWindow;\n  }\n  return null;\n }\n\n @Override\n public ClientWindowFactory getWrapped() {\n  return clientWindowFactory;\n }\n}\n```", "```java\npublic class CustomClientWindow extends ClientWindowWrapper {\n\n private ClientWindow clientWindow;\n String id;\n\n public CustomClientWindow() {}\n\n public CustomClientWindow(ClientWindow clientWindow) {\n this.clientWindow = clientWindow;\n }\n\n @Override\n public void decode(FacesContext context) {\n\n  Map<String, String> requestParamMap = \n   context.getExternalContext().getRequestParameterMap();\n  if (isClientWindowRenderModeEnabled(context)) {\n      id = requestParamMap.\n           get(ResponseStateManager.CLIENT_WINDOW_URL_PARAM);\n  }\n  if (requestParamMap.containsKey\n      (ResponseStateManager.CLIENT_WINDOW_PARAM)) {\n  id = requestParamMap.get\n      (ResponseStateManager.CLIENT_WINDOW_PARAM);\n  }\n  if (id == null) {\n      long time = new Date().getTime();\n      id = \"CUSTOM-\" + time;\n  }\n }\n\n @Override\n public String getId() {\n  return id;\n }\n\n @Override\n public ClientWindow getWrapped() {\n  return this.clientWindow;\n }\n}\n```", "```java\n<factory>                \n <client-window-factory>\n  book.beans.CustomClientWindowFactory\n </client-window-factory>\n</factory>\n```", "```java\n@Override\npublic void decode(FacesContext context) {\n Map<String, String> requestParamMap = \n  context.getExternalContext().getRequestParameterMap();\n if (isClientWindowRenderModeEnabled(context)) {\n    id = requestParamMap.get\n         (ResponseStateManager.CLIENT_WINDOW_URL_PARAM);\n }\n if (requestParamMap.\n     containsKey(ResponseStateManager.CLIENT_WINDOW_PARAM)) {\n      id = requestParamMap.get\n           (ResponseStateManager.CLIENT_WINDOW_PARAM);\n }\n if (id == null) {\n    synchronized (context.getExternalContext().getSession(true)) {\n     final String clientWindowKey = \"my.custom.id\";\n     ExternalContext externalContext = \n                     context.getExternalContext();\n     Map<String, Object> sessionAttrs = \n      externalContext.getSessionMap();\n     Integer counter = (Integer) sessionAttrs.get(clientWindowKey);\n     if (counter == null) {\n         counter = 0;\n     }\n     String uuid = UUID.randomUUID().toString();\n     id = \"UUID-\" + uuid + \"::\" + counter;\n     sessionAttrs.put(clientWindowKey, ++counter);\n    }\n }\n}\n```", "```java\nString sessionId = externalContext.getSessionId(false);\nid = sessionId + \"::\" + counter;\n```", "```java\npublic class CustomLifecycleFactory extends LifecycleFactory {\n\n public static final String CUSTOM_LIFECYCLE_ID = \"CustomLifecycle\";\n private LifecycleFactory lifecycleFactory;\n\n public CustomLifecycleFactory(){}\n\n public CustomLifecycleFactory(LifecycleFactory lifecycleFactory) {\n  this.lifecycleFactory = lifecycleFactory;\n  Lifecycle defaultLifecycle = this.lifecycleFactory.\n            getLifecycle(LifecycleFactory.DEFAULT_LIFECYCLE);\n  addLifecycle(CUSTOM_LIFECYCLE_ID, new\n            CustomLifecycle(defaultLifecycle));\n }\n\n @Override\n public final void addLifecycle(String lifecycleId,Lifecycle lifecycle) {\n  lifecycleFactory.addLifecycle(lifecycleId, lifecycle);\n }\n\n @Override\n public Lifecycle getLifecycle(String lifecycleId) {\n  return lifecycleFactory.getLifecycle(lifecycleId);\n }\n\n @Override\n public Iterator<String> getLifecycleIds() {\n  return lifecycleFactory.getLifecycleIds();\n }\n}\n```", "```java\npublic class CustomLifecycle extends LifecycleWrapper {\n\n private Lifecycle lifecycle;\n\n public CustomLifecycle(Lifecycle lifecycle) {\n  this.lifecycle = lifecycle;\n }\n\n ...\n@Override\n public Lifecycle getWrapped() {\n  return lifecycle;\n }\n}\n```", "```java\n<factory>\n <lifecycle-factory>book.beans.CustomLifecycleFactory</lifecycle-factory>        \n</factory>\n```", "```java\n<servlet>\n <servlet-name>Faces Servlet</servlet-name>\n <servlet-class>javax.faces.webapp.FacesServlet</servlet-class>\n <init-param>\n <param-name>javax.faces.LIFECYCLE_ID</param-name>\n <param-value>CustomLifecycle</param-value>\n </init-param>\n <load-on-startup>1</load-on-startup>\n</servlet>\n```", "```java\npublic class CustomLifecycle extends LifecycleWrapper {\n\n private static final Logger logger = \n  Logger.getLogger(CustomLifecycle.class.getName());\n private Lifecycle lifecycle;\n\n public CustomLifecycle(Lifecycle lifecycle) {\n  this.lifecycle = lifecycle;\n }\n\n @Override\n public void attachWindow(FacesContext context) {\n\n  if (context.getExternalContext().getInitParameter\n     (ClientWindow.CLIENT_WINDOW_MODE_PARAM_NAME).equals(\"url\")) {\n     ExternalContext externalContext = \n      context.getExternalContext();\n     ClientWindow clientWindow = externalContext.getClientWindow();\n     if (clientWindow == null) {\n         clientWindow = createClientWindow(context);\n         if (clientWindow != null) {\n             CustomClientWindow customClientWindow = new \n              CustomClientWindow(clientWindow);\n             customClientWindow.decode(context);\n\n             externalContext.setClientWindow(customClientWindow);\n         }\n     }\n  }\n }\n\n private ClientWindow createClientWindow(FacesContext context) {        \n  ClientWindowFactory clientWindowFactory = (ClientWindowFactory) \n  FactoryFinder.getFactory(FactoryFinder.CLIENT_WINDOW_FACTORY);\n  return clientWindowFactory.getClientWindow(context);\n }\n...\n}\n```", "```java\nFacesContext.getCurrentInstance().getApplication();\n```", "```java\npublic class CustomApplicationFactory extends ApplicationFactory {\n\n private ApplicationFactory applicationFactory;\n\n public CustomApplicationFactory(){}\n\n public CustomApplicationFactory(ApplicationFactory applicationFactory) {\n  this.applicationFactory = applicationFactory;\n }\n\n @Override\n public void setApplication(Application application) {\n  applicationFactory.setApplication(application);\n }\n\n @Override\n public Application getApplication() {       \n  Application handler = new CustomApplication(\n                            applicationFactory.getApplication());\n  return handler;\n }\n}\n```", "```java\npublic class CustomApplication extends ApplicationWrapper {\n\n private Application application;\n\n public CustomApplication(Application application) {\n  this.application = application;\n }\n\n @Override\n public Application getWrapped() {\n  return application;\n }\n\n @Override\n public void addValidator(java.lang.String validatorId,\n                          java.lang.String validatorClass) {\nboolean   \n  flag = false;\n  Iterator i = getWrapped().getValidatorIds();\n  while (i.hasNext()) {\n         if (i.next().equals(\"emailValidator\")) {               \n             flag = true;\n             break;\n         }\n  }\n\n  if (flag == false) {            \n      getWrapped().addValidator(\"emailValidator\", \n                 \"book.beans.EmailValidator\");\n  }\n\n  getWrapped().addValidator(validatorId, validatorClass);\n }\n}\n```", "```java\n<factory>\n <application-factory>\n  book.beans.CustomApplicationFactory\n </application-factory>\n</factory>\n```", "```java\npublic class CustomViewDeclarationLanguageFactory \n       extends ViewDeclarationLanguageFactory{\n\n private ViewDeclarationLanguageFactory \n        viewDeclarationLanguageFactory;\n\n public CustomViewDeclarationLanguageFactory\n  (ViewDeclarationLanguageFactory viewDeclarationLanguageFactory){\n  this.viewDeclarationLanguageFactory = \n        viewDeclarationLanguageFactory;\n }\n\n @Override\n public ViewDeclarationLanguage \n        getViewDeclarationLanguage(String viewId) {        \n  return new  \n   CustomViewDeclarationLanguage(viewDeclarationLanguageFactory.\n    getViewDeclarationLanguage(viewId));\n }    \n}\n```", "```java\npublic class CustomViewDeclarationLanguage extends \n                     ViewDeclarationLanguageWrapper {\n\n private ViewDeclarationLanguage viewDeclarationLanguage;\n\n public CustomViewDeclarationLanguage\n        (ViewDeclarationLanguage viewDeclarationLanguage) {\n  this.viewDeclarationLanguage = viewDeclarationLanguage;\n }\n\n //override here the needed methods\n\n @Override\n public ViewDeclarationLanguage getWrapped() {\n  return viewDeclarationLanguage;\n }\n}\n```", "```java\n<factory>\n <view-declaration-language-factory>\n  book.beans.CustomViewDeclarationLanguageFactory\n </view-declaration-language-factory>\n</factory>\n```", "```java\n@WebServlet(name = \"JSFServlet\", urlPatterns = {\"/jsfServlet\"})\npublic class JSFServlet extends HttpServlet {\n...\nprotected void processRequest(HttpServletRequest request, \n HttpServletResponse response)\n throws ServletException, IOException {\n\n String page = request.getParameter(\"page\");\n\n LifecycleFactory lifecycleFactory = (LifecycleFactory) \n  FactoryFinder.getFactory(FactoryFinder.LIFECYCLE_FACTORY);\n Lifecycle lifecycle = lifecycleFactory.getLifecycle\n (LifecycleFactory.DEFAULT_LIFECYCLE);\n\n FacesContextFactory facesContextFactory = (FacesContextFactory) \n  FactoryFinder.getFactory(FactoryFinder.FACES_CONTEXT_FACTORY);\n FacesContext facesContext = facesContextFactory.getFacesContext\n  (request.getServletContext(), request, response, lifecycle);\n\n Application application = facesContext.getApplication();\n ViewHandler viewHandler = application.getViewHandler();\n UIViewRoot uiViewRoot = viewHandler.\n  createView(facesContext, \"/\" + page);\n facesContext.setViewRoot(uiViewRoot);\n lifecycle.render(facesContext);\n}\n...\n```", "```java\nNavigate page-to-page via h:outputLink - WON'T WORK!\n<h:outputLink value=\"done.xhtml\">done.xhtml</h:outputLink>\nNavigate page-to-page via h:outputLink, but add context path for the application to a context-relative path - WORK!\n<h:outputLink value=\"#{facesContext.externalContext.\n applicationContextPath}/faces/done.xhtml\">\n done.xhtml</h:outputLink>\nNavigate to a JSF view via a non-JSF request using servlet - WORK!\n<h:outputLink value=\"jsfServlet?page=done.xhtml\">\n done.xhml</h:outputLink>\n```"]