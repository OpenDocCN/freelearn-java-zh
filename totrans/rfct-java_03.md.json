["```java\npublic void printCharacters() {\n    SwCharacter darthVader = new DarthVader();\n    SwCharacter obiWan = new ObiWanKenobi();\n    System.out.println(\"Name: \" + darthVader.getName());\n    System.out.println(\"LightSaber color: \" +\n        darthVader.getLightSaberColor());\n    System.out.println(\"Birth place: \" +\n        darthVader.getBirthPlace());\n    System.out.println(\"Name: \" + obiWan.getName());\n    System.out.println(\"LightSaber color: \" +\n        obiWan.getLightSaberColor());\n    System.out.println(\"Birth place: \" +\n        obiWan.getBirthPlace());\n}\n```", "```java\npublic void printCharacters() {\n    SwCharacter darthVader = new DarthVader();\n    SwCharacter obiWan = new ObiWanKenobi();\n    printDetails(darthVader);\n    printDetails(obiWan);\n}\nprivate static void printDetails(SwCharacter darthVader) {\n    System.out.println(\"Name: \" + darthVader.getName());\n    System.out.println(\"LightSaber color: \" +\n        darthVader.getLightSaberColor());\n    System.out.println(\"Birth place: \" +\n        darthVader.getBirthPlace());\n}\n```", "```java\nDouble basePrice = this.getCostPerKm() *\n    this.getDistanceInKm();\nif (passengerIsChild()) {\n    return basePrice * 0.5;\n} else {\n    return basePrice;\n}\n```", "```java\nif(passengerIsChild()){\n    return calculateBasePrice() * 0.5;\n}else{\n    return calculateBasePrice();\n}\n```", "```java\npublic Double calculateFinalPrice(Double amount, String\n    currency){ ... }\npublic Double discountPrice(Double amount, String\n    currency){ ... }\n```", "```java\npublic Double calculateFinalPrice(Price price){ ... }\npublic Double discountPrice(Price price){ ... }\nclass Price {\n    private Double amount;\n    private String currency;\n}\n```", "```java\npublic Double calculatePrice(Double basePrice, Integer\n    adults, Integer children, Integer infants) {\n    Double calculatedPrice = 0.0;\n    // long body...\n    return calculatedPrice;\n}\n```", "```java\nclass PriceCalculator {\n    private final Double basePrice;\n    private final Integer adults;\n    private final Integer children;\n    private final Integer infants;\n    public PriceCalculator(Double basePrice, Integer\n        adults, Integer children, Integer infants) {\n        this.basePrice = basePrice;\n        this.adults = adults;\n        this.children = children;\n        this.infants = infants;\n    }\n    public Double calculatePrice() {\n        Double calculatedPrice = 0.0;\n        // long body...\n        return calculatedPrice;\n    }\n}\n```", "```java\nif (1 <= rowNumber && rowNumber <= 30) {\n    price = basePrice * plane.getFirstRowsCharge();\n} else {\n    price = basePrice * plane.getStandardCharge();\n}\n```", "```java\nif (firstRows()) {\n    price = firstRowsPrice();\n} else {\n    price = standardPrice();\n}\n```", "```java\nInteger totalBaggageNumber = 0;\nDouble totalPrice = 0.0;\nfor (Passenger passenger : passengers) {\n    totalBaggageNumber += passenger.getBaggageNumber();\n    totalPrice += passenger.getPrice();\n}\n```", "```java\nfor (Passenger passenger : passengers) {\n    totalBaggageNumber += passenger.getBaggageNumber();\n}\nfor (Passenger passenger : passengers) {\n    totalPrice += passenger.getPrice();\n}\n```", "```java\nclass Order {\n    private String name;\n    private String surname;\n    private String streetName;\n    private String streetType;\n    private String streetDirection;\n    private Double priceAmount;\n    private String priceCurrency;\n   //constructor and getter methods\n}\n```", "```java\nclass Order {\n    private User orderBuyer;\n    private Address shippingAddress;\n    private Price orderPrice;\n   //constructor and getter methods\n}\n```", "```java\nclass User {\n    private String name;\n    private String surname;\n    //constructor and getter methods\n}\nclass Address {\n    private String streetName;\n    private String streetType;\n    private String streetDirection;\n    //constructor and getter methods\n}\nclass Price {\n    private Double priceAmount;\n    private String priceCurrency;\n    //constructor and getter methods\n}\n```", "```java\npublic Transport createTransportation(String name, String\n    type){\n    return new Transport(name, type);\n}\n```", "```java\npublic Transport createTransport(String name, TransportType\n    type) {\n    switch (type) {\n        case PLANE -> {\n            return new Plane(name);\n        }\n        case TRAIN -> {\n            return new Train(name);\n        }\n        case BUS -> {\n            return new Bus(name);\n        }\n    }\n    return null;\n}\n```", "```java\npublic String printLightSaberColor(SwCharacter character){\n   switch (character.getName()) {\n       case \"LUKE\" -> {\n           return \"GREEN\";\n       }\n       case \"OBI-WAN\" -> {\n           return \"BLUE\";\n       }\n       case \"DARTH VADER\" -> {\n           return \"RED\";\n       }\n   }\n}\n```", "```java\npublic String printLightSaberColor(SwCharacter character){\n    return character.getLightSaberColor();\n}\npublic abstract class SwCharacter {\n    private final String name;\n    protected SwCharacter(String name) {\n        this.name = name;\n    }\n    public abstract String getLightSaberColor();\n}\npublic class LukeSkywalker extends SwCharacter {\n    protected LukeSkywalker() {\n        super(\"Luke Skywalker\");\n    }\n    @Override\n    public String getLightSaberColor() {\n        return \"GREEN\";\n    }\n}\npublic class ObiWanKenobi extends SwCharacter{\n    public ObiWanKenobi() {\n        super(\"Obi-Wan Kenobi\");\n    }\n    @Override\n    public String getLightSaberColor() {\n        return \"BLUE\";\n    }\n}\npublic class DarthVader extends SwCharacter{\n    public DarthVader(String name) {\n        super(name);\n    }\n    @Override\n    public String getLightSaberColor() {\n        return \"RED\";\n    }\n}\n```", "```java\nString url = \"https://www.packtpub.com/\";\nString protocol = extractProtocol(url);\nString host = extractHost(url);\n```", "```java\nURL url = new URL(\"https://www.packtpub.com/\");\nString protocol = url.getProtocol();\nString host = url.getHost();\n```", "```java\npublic class Person {\n    private Address address;\n    public City getCity() {\n        return address.getCity();\n    }\n    public Address getAddress() {\n        return address;\n    }\n}\n```", "```java\nPerson person = getPerson();\nvar person = person.getCity();\n```", "```java\nvar city = person.getAddress().getCity();\n```", "```java\nvar cityName = person.getLocation().getAddress().getCity().getName();\n```", "```java\nvar cityName = person.getCityName();\n```", "```java\npublic Double calculatePrice(PaymentRequest paymentRequest);\n```", "```java\nOrder order = orderRepository.findById\n    (paymentRequest.getOrderId());\n```", "```java\nUser user = userRepositoty.findById\n    (paymentRequest.getUserId());\n```", "```java\norder.getItems();\norder.getOrderDate();\nuser.getLevel();\n```", "```java\nString[] flightData =\n    getFlightDataFromDatabase(flightId).split(\"-\");\ndouble basePrice = parseDouble(flightData[3]);\ndouble totalPrice = basePrice * parseDouble(flightData[0])\n    + basePrice * parseDouble(flightData[1]) + basePrice *\n        parseDouble(flightData[2]);\n```", "```java\nString flightData = getFlightDataFromDatabase(flightId);\nFlightInfo flightInfo = parseFlightData(flightData);\ndouble totalPrice = calculateTotalPrice(flightInfo);\n...\ndouble calculateTotalPrice(FlightInfo flightInfo) {\n    var basePrice = flightInfo.getBasePrice();\n    return basePrice * flightInfo.getAdultsCount() +\n         basePrice * flightInfo.getChildrenCount() +\n            basePrice * flightInfo.getInfantsCount();\n}\n```", "```java\npublic Double calculatePrice(Integer passenger, Double\n    baseFare){\n    var basePrice = passenger * baseFare;\n    var basePriceWithVAT = VATCalculator.addVat(basePrice);\n    return basePriceWithVAT;\n}\nclass VATCalculator {\n    public static Double addVat(double basePrice) {\n        return basePrice * (1 + DefaultValues.DEFAULT_VAT);\n    }\n}\nclass DefaultValues {\n    public static final Double DEFAULT_VAT = 0.22;\n}\n```", "```java\npublic Double calculatePrice(Integer passenger, Double\n    baseFare){\n    var basePrice = passenger * baseFare;\n    return basePrice * (1 + 0.22);\n}\n```"]