["```java\n    <dependency>\n      <groupId>org.aspectj</groupId>\n      <artifactId>aspectjweaver</artifactId>\n      <version>1.8.5</version>\n    </dependency>\n    ```", "```java\n    @Component\n    @Aspect\n    public class Aspect1 {\n\n    }\n    ```", "```java\n    @Configuration\n    @EnableAspectJAutoProxy\n    @ComponentScan(basePackages = {\"com.spring_cookbook.controllers\", \"com.spring_cookbook.aspect\"})\n    public class AppConfig {\n    ...  \n    }\n    ```", "```java\n    @Around(\"execution(* com.spring_cookbook.controllers.*.*(..))\")\n    public Object doBasicProfiling(ProceedingJoinPoint joinPoint) throws Throwable {\n    ...\n    }\n    ```", "```java\n    Long t1 = System.currentTimeMillis();\n    Object returnValue = joinPoint.proceed();\n    Long t2 = System.currentTimeMillis();        \n    Long executionTime = t2 - t1;\n    ```", "```java\n    String className = joinPoint.getSignature().getDeclaringTypeName();\n    String methodName = joinPoint.getSignature().getName();\n    System.out.println(className + \".\" + methodName + \"() took \" + executionTime + \" ms\");\n    ```", "```java\n    return returnValue;\n    ```", "```java\n    @RequestMapping(\"user_list\")\n    @ResponseBody\n    public void userList() throws Exception {\n      try {\n          Thread.sleep(2500);  // wait 2.5 seconds\n      } catch(InterruptedException ex) {\n          Thread.currentThread().interrupt();\n      }\n    }\n    ```", "```java\n    com.spring_cookbook.controllers.UserController.userList() took 2563 ms\n    ```", "```java\n@Around(\"execution(* com.spring_cookbook.controllers.*.*(..))\")\n```", "```java\nString className = joinPoint.getSignature().getDeclaringTypeName();\nString methodName = joinPoint.getSignature().getName();\n```", "```java\n    @Before(\"execution(* com.spring_cookbook.controllers.*.*(..))\")\n    public void logArguments(JoinPoint joinPoint) {\n    ...\n    }\n    ```", "```java\n    Object[] arguments = joinPoint.getArgs();\n    ```", "```java\n    String className = joinPoint.getSignature().getDeclaringTypeName();\n    String methodName = joinPoint.getSignature().getName();\n    System.out.println(\"-----\" + className + \".\" + methodName + \"() -----\");\n\n    for (int i = 0; i < arguments.length; i++) {\n      System.out.println(arguments[i]);\n    }\n    ```", "```java\n    @RequestMapping(\"user_list\")\n    @ResponseBody\n    public String userList(Locale locale, WebRequest request) {\n    ...\n    }\n    ```", "```java\n    -----\n    com.spring_cookbook.controllers.UserController.userList()\n    -----\n    en_US\n    ServletWebRequest:\n    uri=/spring_webapp/user_list;client=10.0.2.2\n    ```", "```java\n@Before(\"execution(* com.spring_cookbook.controllers.*.*(..))\")\n```", "```java\n    @AfterReturning(pointcut=\"execution(* com.spring_cookbook.controllers.*.*(..))\", returning=\"returnValue\")\n    public void logReturnValue(JoinPoint joinPoint, Object returnValue) {\n    ...\n    }\n    ```", "```java\n    String className = joinPoint.getSignature().getDeclaringTypeName();\n    String methodName = joinPoint.getSignature().getName();\n    System.out.println(\"-----\" + className + \".\" + methodName + \"() -----\");\n    System.out.println(\"returnValue=\" + returnValue);\n    ```", "```java\n    @RequestMapping(\"user_list\")\n    @ResponseBody\n    public String userList() {\n      return \"just a test\";\n    }\n    ```", "```java\n    -----\n    com.spring_cookbook.controllers.UserController.userList()\n    -----\n    returnValue=just a test\n    ```", "```java\n@AfterReturning(pointcut=\"execution(* com.spring_cookbook.controllers.*.*(..))\", returning=\"returnValue\")\n```", "```java\n    @AfterThrowing(pointcut=\"execution(* com.spring_cookbook.controllers.*.*(..))\", throwing=\"exception\")\n    public void logException(JoinPoint joinPoint, Exception exception) {\n    ...\n    }\n    ```", "```java\n    String className = joinPoint.getSignature().getDeclaringTypeName();\n    String methodName = joinPoint.getSignature().getName();\n    System.out.println(\"-----\" + className + \".\" + methodName + \"() -----\");\n    System.out.println(\"exception message:\" + exception.getMessage());\n    ```", "```java\n    @RequestMapping(\"user_list\")\n    @ResponseBody\n    public String userList() throws Exception  {\n      throw new Exception(\"a bad exception\");\n    }\n    ```", "```java\n    -----\n    com.spring_cookbook.controllers.UserController.userList()\n    -----\n    exception message:a bad exception\n    ```", "```java\n@AfterThrowing(pointcut=\"execution(* com.spring_cookbook.controllers.*.*(..))\", throwing=\"exception\")\n```", "```java\n    @After(\"execution(* com.spring_cookbook.controllers.*.*(..))\")\n    public void cleanUp(JoinPoint joinPoint) {\n    ...\n    }\n    ```", "```java\n    String className = joinPoint.getSignature().getDeclaringTypeName();\n    String methodName = joinPoint.getSignature().getName();\n    System.out.println(\"-----\" + className + \".\" + methodName + \"() -----\");\n    ```", "```java\n    @RequestMapping(\"user_list\")\n    @ResponseBody\n    public String userList() {\n      return \"method returning normally\";\n    }\n\n    @RequestMapping(\"user_list2\")\n    @ResponseBody\n    public String userList2() throws Exception  {\n      throw new Exception(\"just a test\");\n    }\n    ```", "```java\n    -----\n    com.spring_cookbook.controllers.UserController.userList()\n    -----\n    ```", "```java\n@After(\"execution(* com.spring_cookbook.controllers.*.*(..))\")\n```", "```java\n    public interface Logging {\n      public void log(String str);\n    }\n    ```", "```java\n    public class LoggingConsole implements Logging {\n\n      public void log(String str) {\n        System.out.println(str);\n      }\n    }\n    ```", "```java\n    @DeclareParents(value = \"com.spring_cookbook.controllers.*+\", defaultImpl = LoggingConsole.class)\n    public static Logging mixin;\n    ```", "```java\n    @Before(\"execution(* com.spring_cookbook.controllers.*.*(..)) && this(logging)\")\n    public void logControllerMethod(Logging logging) {\n    ...\n    }\n    ```", "```java\n    logging.log(\"this is displayed just before a controller method is executed.\");\n    ```", "```java\n    @RequestMapping(\"user_list\")\n    @ResponseBody\n    public String userList() {\n      return \"method returning normally\";\n    }\n    ```", "```java\n    this is displayed just before a controller method is executed.\n    ```", "```java\n@DeclareParents(value = \"com.spring_cookbook.controllers.*+\", defaultImpl = LoggingConsole.class)\n```", "```java\nthis(logging)\n```", "```java\n@Component\n@Aspect\npublic class Aspect1 {\n\n  @Before(\"execution(* com.spring_cookbook.controllers.*.*(..))\")\n  public void advice1() {  \n    System.out.println(\"advice1\");\n  }\n\n}\n\n@Component\n@Aspect\npublic class Aspect2 {\n\n  @Before(\"execution(* com.spring_cookbook.controllers.*.*(..))\")\n  public void advice2() {  \n    System.out.println(\"advice2\");\n  }\n\n}\n```", "```java\n    @Component\n    @Aspect\n    @Order(1)\n    public class Aspect1 {\n    ```", "```java\n    @Component\n    @Aspect\n    @Order(2)\n    public class Aspect2 {\n    ```", "```java\n    advice1\n    advice2\n    ```", "```java\n    advice2\n    advice1\n    ```"]