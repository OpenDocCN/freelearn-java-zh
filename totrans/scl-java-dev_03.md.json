["```java\n> cd <your_filesystem_dir> (e.g. /Users/Thomas/projects/)\n> mkdir SampleProject\n> cd SampleProject\n> sbt\n[info] Set current project to sampleproject\n> set name := \"SampleProject\"\n[info] Defining *:name\n[info] ...\n> session save\n\n```", "```java\n> exit (or press CTRL-D)\n\n```", "```java\nname := \"SampleProject\"\n\nversion := \"1.0\"\n\nscalaVersion := \"2.10.3\"\n```", "```java\naddSbtPlugin(\"com.typesafe.sbteclipse\" % \"sbteclipse-plugin\" % \"2.4.0\")\n\n```", "```java\n<groupId>com.typesafe.sbteclipse</groupId>\n<artifactId>sbteclipse-plugin</artifactId>\n<version>2.4.0</version>\n```", "```java\n> sbt eclipse\n...\n[info] Successfully created Eclipse project files for project(s):\n[info] SampleProject\n\n```", "```java\naddSbtPlugin(\"com.github.mpeltonen\" % \"sbt-idea\" % \"1.5.2\")\n\n```", "```java\n> sbt gen-idea\n\n```", "```java\nresolvers += \"Sonatype snapshots\" at \"http://oss.sonatype.org/content/repositories/snapshots/\"\n\naddSbtPlugin(\"com.github.mpeltonen\" % \"sbt-idea\" % \"1.6.0-SNAPSHOT\")\n```", "```java\naddSbtPlugin(\"org.netbeans.nbsbt\" % \"nbsbt-plugin\" % \"1.0.2\")\n\n```", "```java\n> git clone git@github.com:dcaoyuan/nbsbt.git\n> cd nbsbt\n> sbt clean compile publish-local\n\n```", "```java\n> sbt netbeans\n\n```", "```java\naddSbtPlugin(\"com.earldouglas\" % \"xsbt-web-plugin\" % \"0.4.2\")\n\n```", "```java\nseq(webSettings :_*)\n\n```", "```java\nlibraryDependencies += \"org.mortbay.jetty\" % \"jetty\" % \"6.1.22\" % \"container\"\n\n```", "```java\nname := \"SampleProject\"\n\norganization := \"com.samples\"\n\nversion := \"1.0\"\n\nscalaVersion := \"2.10.3\"\n\nseq(webSettings :_*)\n\nlibraryDependencies += \"org.mortbay.jetty\" % \"jetty\" % \"6.1.22\" % \"container\"\n\nlibraryDependencies += \"javax.servlet\" % \"servlet-api\" % \"2.5\" % \"provided\"\n```", "```java\n> eclipse\n\n```", "```java\npackage com.samples\nimport scala.xml.NodeSeq\nimport javax.servlet.http._\n\nclass SimpleServlet extends HttpServlet {\n  override def doGet(request: HttpServletRequest, response: HttpServletResponse) {\n\n    response.setContentType(\"text/html\")\n    response.setCharacterEncoding(\"UTF-8\")\n\n    val responseBody: NodeSeq =\n      <html><body><h1>Hello, world!</h1></body></html>\n\n    response.getWriter.write(responseBody.toString)\n  }\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app\n\nxsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\"\nversion=\"2.5\">\n  <servlet>\n    <servlet-name>simpleservlet</servlet-name>\n    <servlet-class>com.samples.SimpleServlet</servlet-class>\n  </servlet>\n  <servlet-mapping>\n    <servlet-name>simpleservlet</servlet-name>\n    <url-pattern>/*</url-pattern>\n  </servlet-mapping>\n</web-app>\n```", "```java\n> sbt\n> container:start\n2014-03-15 14:33:18.880:INFO::Logging to STDERR via org.mortbay.log.StdErrLog\n[info] jetty-6.1.22\n[info] NO JSP Support for /, did not find org.apache.jasper.servlet.JspServlet\n[info] Started SelectChannelConnector@0.0.0.0:8080\n[success] Total time: 20 s, completed Mar 15, 2014 2:33:19 PM\n>\n\n```", "```java\n> package\n\n```", "```java\naddSbtPlugin(\"com.eed3si9n\" % \"sbt-assembly\" % \"0.11.2\")\n\n```", "```java\nimport AssemblyKeys._ // put this at the top of the file\n\nassemblySettings\n// your assembly settings here\n```", "```java\naddSbtPlugin(\"com.typesafe.sbt\" % \"sbt-scalariform\" % \"1.2.0\")\n\n```", "```java\npackagecom.samples\n\nobject experiment {\n  println(\"Welcome to the Scala worksheet\")       > Welcome to the Scala worksheet\n}\n```", "```java\nobject experiment {\n\n  val number = 1 + 2\n\n  List(1,2,3,3,3,4) filter (x => x < 4) distinct\n\n  case class Customer(name:String)\n\n  Customer(\"Helen\")\n\n  new SimpleServlet() \n}\n```", "```java\nname := \"SampleProject\"\nâ€¦\n\nlibraryDependencies += \"net.databinder.dispatch\" %% \"dispatch-core\" % \"0.11.0\"\n```", "```java\nscala> import dispatch._, Defaults._\nimport dispatch._\nimport Defaults._\n\n```", "```java\nscala> val request = url(\"http://freegeoip.net/xml/www.google.com\")\nrequest: dispatch.Req = Req(<function1>)\n\n```", "```java\nscala> val result = Http( request OK as.String)\nresult: dispatch.Future[String] = scala.concurrent.impl.Promise$DefaultPromise@22aeb07c\n\n```", "```java\nscala> val resultAsString = result()\nresultAsString: String = \n\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <Response>\n <Ip>74.125.225.114</Ip>\n <CountryCode>US</CountryCode>\n <CountryName>United States</CountryName>\n <RegionCode>CA</RegionCode>\n <RegionName>California</RegionName>\n <City>Mountain View</City>\n <ZipCode>94043</ZipCode>\n <Latitude>37.4192</Latitude>\n <Longitude>-122.0574</Longitude>\n <MetroCode>807</MetroCode>\n <AreaCode>650</AreaCode>\n</Response>\n\"\n\n```", "```java\nscala> val grouponCitiesURL = url(\"http://api.groupon.com/v2/divisions.xml?client_id=<your own client_key>\")\ngrouponCitiesURL: dispatch.Req = Req(<function1>)\nscala> val citiesAsText = Http(grouponCitiesURL OK as.String)\ncitiesAsText: dispatch.Future[String] = scala.concurrent.impl.Promise$DefaultPromise@4ad28057\nscala> citiesAsText()\nres0: String = <response><divisions><division><id>abbotsford</id><name>Abbotsford</name><country>Canada</country><timezone>Pacific Time (US &amp; Canada)</timezone>...\n\n```", "```java\nscala> val citiesAsXML = Http(grouponCitiesURL OK as.xml.Elem)\ncitiesAsXML: dispatch.Future[scala.xml.Elem] = scala.concurrent.impl.Promise$DefaultPromise@27ac41a3\nscala> citiesAsXML()\nres1: scala.xml.Elem = <response><divisions><division><id>abbotsford</id><name>Abbotsford</name><country>Canada</country><timezone>Pacific Time (US &amp; Canada)</timezone>...\n\n```", "```java\nscala> def printer = new scala.xml.PrettyPrinter(90, 2)\nprinter: scala.xml.PrettyPrinter\nscala> for (xml <- citiesAsXML)\n println(printer.format(xml))\nscala> <response>\n <divisions>\n <division>\n <id>abbotsford</id>\n <name>Abbotsford</name>\n <country>Canada</country>\n <timezone>Pacific Time (US &amp; Canada)</timezone>\n <timezoneOffsetInSeconds>-25200</timezoneOffsetInSeconds>\n <timezoneIdentifier>America/Los_Angeles</timezoneIdentifier>\n <lat>49.0568</lat>\n <lng>-122.285</lng>\n ...\n </division>\n <division>\n <id>abilene</id>\n <name>Abilene, TX</name>\n <country>USA</country>\n <timezone>Central Time (US &amp; Canada)</timezone>...\n\n```", "```java\nscala> val cityDivisions = citiesAsXML() map ( city => city \\\\ \"division\")\ncityDivisions: scala.collection.immutable.Seq[scala.xml.NodeSeq] = List(NodeSeq(<division><id>abbotsford</id><name>Abbotsford</name><country>Canada</country>...\nscala> val cityNames = \n cityDivisions map ( div => (div \\ \"name\").text)\ncityNames: scala.collection.immutable.Seq[String] = List(AbbotsfordAbilene, TXAkron / CantonAlbany / Capital RegionAlbuquerqueAllentown...\n\n```", "```java\nfor (sequence) yield expression\n```", "```java\n    element <- collection\n    ```", "```java\n    if expression\n    ```", "```java\n    variable = expression\n    ```", "```java\nscala> for {\n elem <- List(1,2,3,4,5)\n } yield \"T\" + elem\nres3: List[String] = List(T1, T2, T3, T4, T5)\n\n```", "```java\nscala> for {\n word <- List(\"Hello\",\"Scala\")\n char <- word\n } yield char.isLower\nres4: List[Boolean] = List(false, true, true, true, true, false, true, true, true, true)\n\n```", "```java\nscala> for {\n word <- List(\"Hello\",\"Scala\")\n char <- word if char.isUpper\n } yield char\nres5: List[Char] = List(H, S)\n\n```", "```java\nscala> for {\n word <- List(\"Hello\",\"Scala\")\n char <- word\n lowerChar = char.toLower\n } yield lowerChar\nres6: List[Char] = List(h, e, l, l, o, s, c, a, l, a)\n\n```", "```java\nscala> def extractCityNames(xml: scala.xml.Elem) = \n for {\n elem <- xml \\\\ \"division\"\n name <- elem \\ \"name\"\n } yield name.text\nextractCityNames: (xml: scala.xml.Elem)scala.collection.immutable.Seq[String]\nscala> val cityNames = extractCityNames(citiesAsXML())\ncityNames: scala.collection.immutable.Seq[String] = List(Abbotsford, Abilene, TX, Akron / Canton, Albany / Capital Region, Albuquerque, Allentown / Reading, Amarillo, Anchorage...\n\n```", "```java\nscala> def extractCityLocations(xml: scala.xml.Elem) = \n for {\n elem<- xml \\\\ \"division\"\n name <- elem \\ \"name\"\n latitude <- elem \\ \"lat\"\n longitude <- elem \\ \"lng\"\n } yield (name.text,latitude.text,longitude.text)\nextractCityLocations: (xml: scala.xml.Elem)scala.collection.immutable.Seq[(String, String, String)]\nscala> val cityLocations = extractCityLocations(citiesAsXML())\ncityLocations: scala.collection.immutable.Seq[(String, String, String)] = List((Abbotsford,49.0568,-122.285), (Abilene, TX,32.4487,-99.7331), (Akron / Canton,41.0814,-81.519), (Albany / Capital Region,42.6526,-73.7562)...\n\n```", "```java\nscala> val (honolulu,lat,lng) = cityLocations find (_._1 == \"Honolulu\") getOrElse(\"Honolulu\",\"21\",\"-157\")\nhonolulu: String = Honolulu\nlat: String = 21.3069\nlng: String = -157.858\n\n```", "```java\nscala> val honolulu =\n cityLocations find { case( city, _, _ ) => \n city == \"Honolulu\"\n }\nhonolulu: Option[(String, String, String)] = Some((Honolulu,21.3069,-157.858))\n\n```", "```java\nscala> val dealsByGeoArea =   url(\"http://api.groupon.com/v2/deals.xml?client_id=<your client_id>\")\ndealsByGeoArea: dispatch.Req = Req(<function1>)\n\n```", "```java\nscala> case class Deal(title:String = \"\",dealUrl:String = \"\", tag:String = \"\")\ndefined class Deal\n\nscala> def extractDeals(xml: scala.xml.Elem) = \n for {\n deal <- xml \\\\ \"deal\"\n title = (deal \\\\ \"title\").text\n dealUrl = (deal \\\\ \"dealUrl\").text\n tag = (deal \\\\ \"tag\" \\ \"name\").text\n } yield Deal(title, dealUrl, tag)\nextractDeals: (xml: scala.xml.Elem)scala.collection.immutable.Seq[Deal]\n\n```", "```java\nscala> val dealsInHonolulu = \n Http(dealsByGeoArea <<? Map(\"lat\"->lat,\"lng\"->lng) OK as.xml.Elem)\ndealsInHonolulu: dispatch.Future[scala.xml.Elem] = scala.concurrent.impl.Promise$DefaultPromise@a1f0cb1\n\n```", "```java\nscala> val deals = extractDeals(dealsInHonolulu())\ndeals: scala.collection.immutable.Seq[Deal] = List(Deal(Laundry Folding StylesExam with Posture Analysis and One or Three Adjustments at Cassandra Peterson Chiropractic (Up to 85% Off)One initial consultation, one exam, one posture analysis, and one adjustmentOne initial consultation, one exam, one posture analysis, and three adjustments,http://www.groupon.com/deals/cassandra-peterson-chiropractic,Beauty & Spas), Deal(Laundry Folding Styles1.5-Hour Whale-Watching SunsetÃ‚Â Ã¯Â»Â¿Tour for an Adult or Child from Island Water Sports Hawaii (50% Off) A 1.5-hour whale watching sunset tour for one childA 1.5-hour whale watching sunset tour for one adult,http://www.groupon.com/deals/island-water-sports-hawaii-18,Arts and EntertainmentOutdoor Pursuits), Deal(Dog or Horse?$25 for Take-Home Teeth-Whit...\n\n```", "```java\nscala> val sortedDeals = deals groupBy(_.tag)\nsortedDeals: scala.collection.immutable.Map[String,scala.collection.immutable.Seq[Deal]] = Map(\"\" -> List(Deal(SkeleCopSix Bottles of 3 Wine Men 2009 Merlot with Shipping Included6 Bottles of Premium Red Wine,http://www.groupon.com/deals/gg-3-wine-men-2009-merlot-package,), Deal(Famous...\n\n```", "```java\nscala> val nbOfDealsPerTag = sortedDeals mapValues(_.size)\nnbOfDealsPerTag: scala.collection.immutable.Map[String,Int] = Map(\"\" -> 2, Arts and EntertainmentOutdoor Pursuits -> 1, Beauty & Spas ->3, Food & DrinkCandy Stores -> 1, ShoppingGifts & Giving -> 1, ShoppingFraming -> 1, EducationSpecialty Schools -> 1, Tickets -> 1, Services -> 1, TravelTravel AgenciesEurope, Asia, Africa, & Oceania -> 1)\n\n```", "```java\n> ./activator new\nEnter an application name\n>\n\n```", "```java\n> javasample\nFetching the latest list of templates...\nEnter a template name, or hit tab to see a list of possible templates\n> [Hit TAB]\nactivator-akka-cassandra                  activator-akka-spray\nactivator-play-autosource-reactivemongo   activator-scalding\nactivator-spray-twitter                   akka-callcenter\nakka-cluster-sharding-scalaakka-clustering\nakka-distributed-workers     akka-distributed-workers-java\nakka-java-spring                          akka-sample-camel-java\nakka-sample-camel-scalaakka-sample-cluster-java\nakka-sample-cluster-scalaakka-sample-fsm-java-lambda\nakka-sample-fsm-scalaakka-sample-main-java\nakka-sample-main-scalaakka-sample-multi-node-scala\nakka-sample-persistence-java   akka-sample-persistence-scala\nakka-sample-remote-java                   akka-sample-remote-scala\nakka-scala-spring                         akka-supervision\nangular-seed-play                         atomic-scala-examples\ndart-akka-spray                           eventual\nhello-akka                                hello-play\nhello-play-backbone                       hello-play-java\nhello-play-scala                          hello-sbt\nhello-scala                               hello-scala-eclipse\nhello-scaloid                             hello-slick\njust-play-scalamacwire-activator\nmatthiasn-sse-chat-template               modern-web-template\nplay-akka-angular-websocket               play-angularjs-webapp-seed\nplay-cake                                 play-example-form\nplay-guice                                play-hbase\nplay-java-spring                          play-mongo-knockout\nplay-scalatest-subcut                     play-slick\nplay-slick-advanced                       play-spring-data-jpa\nplay-sqlite                               play-with-angular-requirejs\nplay-yeoman                               play2-crud-activator\nreactive-maps                             reactive-stocks\nrealtime-search                           scala-phantom-types\nscaldi-play-example                    scalikejdbc-activator-template\nsix-minute-apps                           slick-android-example\nslick-codegen-customization-example       slick-codegen-example\nslick-plainsql                            spray-actor-per-request\ntcp-async                                 template-template\ntest-patterns-scala                       tweetmap-workshop\n\n```", "```java\n> play-java-spring\nOK, application \"javasample\" is being created using the \"play-java-spring\" template.\n\nTo run \"javasample\" from the command-line, run:\n/Users/thomas/scala/activator-1.0.13/javasample/activator run\n\nTo run the test for \"javasample\" from the command-line, run:\n/Users/thomas/scala/activator-1.0.13/javasample/activator test\n\nTo run the Activator UI for \"javasample\" from the command-line, run:\n/Users/thomas/scala/activator-1.0.13/javasample/activator ui\n\n```", "```java\n> cd javasample\n> ./activator run\n\n```", "```java\n--- (Running the application from SBT, auto-reloading is enabled) ---\n[info] play - Listening for HTTP on /0:0:0:0:0:0:0:0:9000\n(Server started, use CTRL +D to stop and go back to the console...)\n\n```", "```java\n> ./activator ui\n\n```", "```java\npackage com.demo;\nimport javax.script.*;\n\npublic class JSR223Sample { \n\n  public static void main(String[] args) throws Exception {\n    ScriptEngineManager manager = new ScriptEngineManager();\n    ScriptEngine engine = manager.getEngineByName(\"JavaScript\");\n\n    // expose object as variable to script\n    engine.put(\"n\", 5);\n\n    // evaluate a script string. \n    engine.eval(\"for(i=1; i<= n; i++) println(i)\");\n  }\n}\n```", "```java\nrun:\n1\n2\n3\n4\n5\nBUILD SUCCESSFUL (total time: 0 seconds)\n\n```", "```java\nscala> import javax.script.ScriptEngineManager\nimportjavax.script.ScriptEngineManager\nscala> val engine = \n new ScriptEngineManager().getEngineByName(\"scala\")\nengine: javax.script.ScriptEngine = scala.tools.nsc.interpreter.IMain@7debe95d\nscala> engine.put(\"n\", 5)\nn: Object = 5\nscala> engine.eval(\"1 to n.asInstanceOf[Int] foreachprintln\")\n1\n2\n3\n4\n5\nres4: Object = null\n\n```"]