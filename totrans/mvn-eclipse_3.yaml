- en: Chapter 3. Creating and Importing Projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s proceed on our journey. In this chapter, we will start with the Maven
    project structure followed by the build architecture, then we will cover some
    essential concepts, and finally learn how to create simple Maven projects. The
    chapter is divided into the following sections:'
  prefs: []
  type: TYPE_NORMAL
- en: The Maven project structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**POM (Project Object Model)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maven coordinates
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: POM relationships
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Simple POM
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Super POM
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The Maven project build architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other essential concepts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Repository
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Project dependencies
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Plugins and goals
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Site generation and reporting
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Maven project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using an archetype
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Using no archetypes
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking out a Maven project
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing Maven projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Maven project structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Maven, as stated in earlier chapters, follows convention over configuration.
    This makes us believe that there is a standard layout of the Maven project structure.
    Before we get into creating and playing with Maven projects, let''s first understand
    the basic common layout of Maven projects, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Folder/Files | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `src/main/java` | This contains an application''s Java source files |'
  prefs: []
  type: TYPE_TB
- en: '| `src/main/resources` | This contains files of an application''s resources
    such as images, sounds, templates, and so on |'
  prefs: []
  type: TYPE_TB
- en: '| `src/main/filters` | This contains the resource''s filter files |'
  prefs: []
  type: TYPE_TB
- en: '| `src/main/config` | This contains the configuration files of the application
    |'
  prefs: []
  type: TYPE_TB
- en: '| `src/main/scripts` | This has files of application-specific scripts |'
  prefs: []
  type: TYPE_TB
- en: '| `src/main/webapp` | This has sources files for web applications |'
  prefs: []
  type: TYPE_TB
- en: '| `src/test/java` | This contains unit test files of Java |'
  prefs: []
  type: TYPE_TB
- en: '| `src/test/resources` | This has unit testing-specific resources used in an
    application |'
  prefs: []
  type: TYPE_TB
- en: '| `src/filters` | This has files of the test-specific filter for resources
    |'
  prefs: []
  type: TYPE_TB
- en: '| `src/it` | This has integration tests files (primarily for plugins ) |'
  prefs: []
  type: TYPE_TB
- en: '| `src/assembly` | This contains files of the assembly descriptors |'
  prefs: []
  type: TYPE_TB
- en: '| `src/site` | This contains site artifacts |'
  prefs: []
  type: TYPE_TB
- en: '| `LICENSE.txt` | This denotes the projects license |'
  prefs: []
  type: TYPE_TB
- en: '| `NOTICE.txt` | This includes the notice and attributions that the project
    depends on |'
  prefs: []
  type: TYPE_TB
- en: '| `README.txt` | This denotes the project''s readme information |'
  prefs: []
  type: TYPE_TB
- en: '| `target` | This houses all the output of the build |'
  prefs: []
  type: TYPE_TB
- en: '| `pom.xml` | This is the project''s `pom` file (which will be discussed in
    detail in the forthcoming sections) |'
  prefs: []
  type: TYPE_TB
- en: Though the previously mentioned layout is the standard recommended convention,
    this can always be overridden in the project descriptor file (`pom` file).
  prefs: []
  type: TYPE_NORMAL
- en: POM (Project Object Model)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**POM** stands for **Project Object Model**. It is primarily an XML representation
    of a project in a file named `pom.xml`. POM is the identity of a Maven project
    and without it, the project has no existence. It is analogous to a **Make** file
    or a `build.xml` file of **Ant**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A project in a broad sense should contain more than just mere code files and
    should act as a one-stop shop for all the things concerning it. Maven fulfills
    this need using the `pom` file. POM tends to answer questions such as: Where is
    the source code? Where are the resources? How is the packaging done? Where are
    the unit tests? Where are the artifacts? What is the build environment like? Who
    are the actors of the project? and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In a nutshell, the contents of POM fall under the following four categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Project information**: This provides general information of the project such
    as the project name, URL, organization, list of developers and contributors, license,
    and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**POM relationships**: In rare cases, a project can be a single entity and
    does not depend on other projects. This section provides information about its
    dependency, inheritance from the parent project, its sub modules, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Build settings**: These settings provide information about the build configuration
    of Maven. Usually, behavior customization such as the location of the source,
    tests, report generation, build plugins, and so on is done.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Build environment**: This specifies and activates the build settings for
    different environments. It also uses profiles to differentiate between development,
    testing, and production environments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A POM file with all the categories discussed is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Maven coordinates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Maven coordinates define a set of identifiers that can be used to uniquely
    identify a project, a dependency, or a plugin in a Maven POM. Analogous to algebra
    where a point is identified by its coordinate in space, the Maven coordinates
    mark a specific place in a repository, acting like a coordinate system for Maven
    projects. The Maven coordinates'' constituents are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**groupId**: This represents a group, company, team, organization, or project.
    A general convention for a group ID is it begins with a reverse domain name of
    the organization that creates the project. However, it may not necessarily use
    the dot notation as it does in the `junit` project. The group forms the basis
    for storage in the repository and acts much like a Java packaging structure does
    in OS. The corresponding dots are replaced with OS-specific directory separators
    (such as `/` in Unix), which forms the relative directory structure from the base
    repository. For example, if `groupId` is `com.packt.mvneclipse`, it lives in the
    `$M2_REPO/com/packt/mvneclipse` directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**artifactId**: This is a unique identifier under `groupId` that represents
    a single project/the project known by. Along with the `groupId` coordinate, the
    `artifactId` coordinate fully defines the artifact''s living quarters within the
    repository. For example, continuing with the preceding example, the artifact ID
    with `hello-project` resides at the `$M2_REPO/com/packt/mvneclipse/hello-project`
    path.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**project version**: This denotes a specific release of a project. It is also
    used within an artifact''s repository to separate versions from each other. For
    example, `hello-project` with version 1.0 resides in the `$M2_REPO/com/packt/mvneclipse/hello-project/1.0/`
    directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**packaging**: This describes the packaged output produced by a project. If
    no packaging is declared, Maven assumes the artifact is the default `jar` file.
    The core packaging values available in Maven are: `pom`, `jar`, `maven-plugin`,
    `ejb`, `war`, `ear`, `rar`, and `par`. The following figure illustrates an example
    of Maven coordinates:![Maven coordinates](img/00020.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As the local repository, `$M2_REPO` signifies the `%USER_HOME% /.m2` directory
    in the user's machine.
  prefs: []
  type: TYPE_NORMAL
- en: POM relationships
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'POM relationships identify the relationship they possess with respect to other
    modules, projects, and other POMs. This relationship could be in the form of dependencies,
    multimodule projects, parent-child also known as inheritance, and aggregation.
    The elements of POM relationships are represented graphically as shown in the
    following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![POM relationships](img/00021.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Similarly, the elements of POM relationships in the XML file can be specified
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: A simple POM
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The most basic POM consists of just the Maven coordinates and is sufficient
    to build and generate a `jar` file for the project. A simple POM file may look
    like the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The following points will explain these elements:'
  prefs: []
  type: TYPE_NORMAL
- en: The `modelVersion` value is `4.0.0`. Maven supports this version of POM model.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is a single POM file for every project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All POM files require the `project` element and three mandatory fields: `groupId`,
    `artifactId`, and `version`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The root element of `pom.xml` is `project`, and it has three major subnodes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A simple POM (as shown in the previous code snippet) is hardly enough in real-world
    projects.
  prefs: []
  type: TYPE_NORMAL
- en: A super POM
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Like Java, where every object inherits from `java.lang.Object`, every POM inherits
    from a base POM known as **Super POM**. Implicitly, every POM inherits the default
    value from the base POM. It eases the developer''s effort toward minimal configuration
    in his/her `pom.xml` file. However, default values can be overridden easily when
    they are specified in the projects'' corresponding `pom` file. The default configuration
    of the super POM can be made available by issuing the following command inside
    the respective project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The super POM is a part of the Maven installation and can be found in the `maven-x.y.z-uber.jar`
    or `maven-model-builder-x.y.z.jar` file at `$M2_HOME/lib`, where `x.y.z` denotes
    the version. In the corresponding JAR file, there is a file named `pom-4.0.0.xml`
    under the `org.apache.maven.model` package.
  prefs: []
  type: TYPE_NORMAL
- en: '![A super POM](img/00022.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The default configuration of the super POM inherited in a sample project is
    given as follows; for the sake of brevity, only some important aspects are shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The Maven project build architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following figure shows the common build architecture for Maven projects.
    Essentially, every Maven project contains a POM file that defines every aspect
    of the project essentials. Maven uses the POM details to decide upon different
    actions and artifact generation. The dependencies specified are first searched
    for in the local repository and then in the central repository. There is also
    a notion that the remote repository is searched if it is specified in the POM.
    We will talk about repositories in the next section. In addition, POM defines
    details to be included during site generation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Have a look at the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Maven project build architecture](img/00023.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Other essential concepts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The other essential concepts of Maven are discussed in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Maven repositories are accessible locations designed to store the artifacts
    that Maven builds produce. To be more precise, a repository is a location to store
    a project's artifacts that is designed to match the Maven coordinates.
  prefs: []
  type: TYPE_NORMAL
- en: 'A Maven repository can be one of the following types:'
  prefs: []
  type: TYPE_NORMAL
- en: Local
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Central
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remote
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The local repository
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A local repository is one that resides in the same machine where a Maven build
    runs. It is a `.m2` folder located in the `$USER_HOME` directory of the user''s
    machine. It is created when the `mvn` command is run for the very first time.
    However, to override the default location, open the `settings.xml` file if it
    exists; else, create one in the `$M2_HOME\conf` (for windows: `%M2_HOME%\conf`)
    folder and respective location as in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: When we run the Maven command, Maven will download dependencies to a custom
    path.
  prefs: []
  type: TYPE_NORMAL
- en: The central repository
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The central repository is the repository provided by the Maven community. It
    contains a large repository of commonly used libraries. This repository comes
    into play when Maven does not find libraries in the local repository. The central
    repository can be found at: [http://search.maven.org/#browse](http://search.maven.org/#browse).'
  prefs: []
  type: TYPE_NORMAL
- en: The remote repository
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Enterprises usually maintain their own repositories for the libraries that are
    being used for the project. These differ from the local repository; a repository
    is maintained on a separate server, different from the developer's machine and
    is accessible within the organization. Also, sometimes, there are cases where
    the availability of the libraries in central repositories is not certain, thus
    giving rise to the need for a remote repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following POM file mentions the remote repositories, where
    the dependency is not available in the central repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Search sequence in repositories
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following figure illustrates the sequence in which the search operation
    is carried out in the repositories on execution of the Maven build:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Search sequence in repositories](img/00024.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Maven follows the ensuing sequence to search dependent libraries in repositories,
    and the sequence is explained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: In step 1, Maven searches for dependencies in the local repository; if found,
    it proceeds further, else it goes to the central repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In step 2, the search continues in the central repository; if found, it proceeds
    to download the dependent libraries to the local repository and continues the
    processing. If the search fails in the central repository and if there is a mention
    of a remote repository in the POM file, it continues with step 3 or else throws
    an error and stops.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In step 3, the search continues in the remote repositories. If found, it proceeds
    to download the dependent libraries to the local repository and continues processing.
    If search encounters a failure, it throws an error and stops at that juncture.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Project dependencies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The powerful feature of Maven is its dependency management for any project.
    Dependencies may be external libraries or internal (in-house) libraries/project.
    Dependencies in POM can be stated under the following tags with the following
    attributes as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Dependency scopes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Dependency scopes control the availability of dependencies in a classpath and
    are packaged along with an application. There are six dependency scopes, which
    are described in detail as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Compile`: This is the default scope if not specified. Dependencies with this
    scope are available in all classpaths and are packaged.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Provided`: Similar to the `compile` scope, however, this indicates JDK or
    the container to provide them. It is available only in compilation and test classpaths
    and is not transitive.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Runtime`: This scope indicates that the dependency is not required for compilation
    but is available for execution. For example, a JDBC driver is required only at
    runtime, however the JDBC API is required during compile time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Test`: This scope indicates that the dependency is not required for normal
    use of the application, and it is only available for the test compilation and
    execution phases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`System`: This is similar to the `provided` scope but the explicit path to
    JARs on the local filesystem is mentioned. The path must be absolute such as `$JAVA_HOME/lib`.
    Maven will not check the repositories; instead it will check the existence of
    the file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transitive dependencies
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Project A depends on project B and project B depends on C—now C is a transitive
    dependency for A. Maven's strength lies in the fact that it can handle transitive
    dependencies and hide the chain of dependencies under the hood from a developer's
    knowledge. As a developer, the direct dependency of the project is defined, and
    all other dependencies' chain nuisance is dealt by Maven with effective version
    conflict management. Scope limits the transitivity of a dependency as discussed
    in the preceding section by allowing the inclusion of dependencies appropriate
    for the current stage of the build.
  prefs: []
  type: TYPE_NORMAL
- en: For more information, please visit [http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html](http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Transitive dependency is illustrated in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Transitive dependencies](img/00025.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Plugins and goals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Maven, essentially, is a plugin framework where every action is the result
    of some plugin. Each plugin consists of goals (also called Mojos) that define
    the action to be taken. To put it in simple words, a *goal* is a unit of work.
    For example, a `compiler` plugin has `compile` as the goal that compiles the source
    of the project. An illustration is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Plugins and goals](img/00026.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'A plugin with set of goals can be executed using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Typically, the following are the types of plugins:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Build plugins | These are executed during the build and are specified in
    the `<build> <build/>` element in the `pom` file. |'
  prefs: []
  type: TYPE_TB
- en: '| Reporting Plugins | These are executed during site generation and are configured
    in the `<reporting> <reporting/>` element in the `pom` file. |'
  prefs: []
  type: TYPE_TB
- en: '| Core plugins | These plugins correspond to the default core phases. |'
  prefs: []
  type: TYPE_TB
- en: '| Packaging types/tools | These relate to the respective artifact types for
    packaging. |'
  prefs: []
  type: TYPE_TB
- en: 'The following table consists of some of the common plugins:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Plugin | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `compiler` | This is used to compile the source code. |'
  prefs: []
  type: TYPE_TB
- en: '| `jar` | This builds the `jar` file from the project. |'
  prefs: []
  type: TYPE_TB
- en: '| `war` | This builds the `war` file from the project. |'
  prefs: []
  type: TYPE_TB
- en: '| `install` | This installs the build artifact into the local repository. |'
  prefs: []
  type: TYPE_TB
- en: '| `site` | This generates the site for the current project. |'
  prefs: []
  type: TYPE_TB
- en: '| `surefire` | This runs unit tests and generates reports. |'
  prefs: []
  type: TYPE_TB
- en: '| `clean` | This cleans up the target after the build. |'
  prefs: []
  type: TYPE_TB
- en: '| `javadoc` | This generates a Javadoc for the project. |'
  prefs: []
  type: TYPE_TB
- en: '| `pdf` | This generates the PDF version of the project documentation. |'
  prefs: []
  type: TYPE_TB
- en: For more plugins, navigate to [http://maven.apache.org/plugins/](http://maven.apache.org/plugins/).
  prefs: []
  type: TYPE_NORMAL
- en: Site generation and reporting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Seldom are projects a single developer''s asset. A project contains stakeholders,
    and collaboration among them is essential. Often, a lack of effective documentation
    has paralyzed the project, its maintenance, and its usage. Maven with its `site`
    plugin has eased this process of having effective project documentation by generating
    a site and reports related to project. A site can be generated using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The site is generated at the `target/site` directory. Maven uses the Doxia component
    (discussed in the *Maven Component Architecture* section of [Chapter 1](part0014_split_000.html#page
    "Chapter 1. Apache Maven – Introduction and Installation"), *Apache Maven – Introduction
    and Installation*) to generate documentation. The site also contains all the configured
    reports such as the unit test coverage, PMD report, and others. We will cover
    site and report generation in more detail in the *Generating site documentation*
    section of [Chapter 5](part0037_split_000.html#page "Chapter 5. Spicing Up a Maven
    Project"), *Spicing Up a Maven Project*.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Maven project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'm2eclipse makes the creation of Maven projects simple. Maven projects can be
    created in the following two ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Using an archetype
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Without using an archetype
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, we will discuss how to go about creating projects using these methods.
  prefs: []
  type: TYPE_NORMAL
- en: Using an archetype
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An archetype is a plugin that allows a user to create Maven projects using a
    defined template known as archetype. There are different archetypes for different
    types of projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Archetypes are primarily available to create the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Maven plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simple web applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simple projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will now see how to create a simple Hello World! project using an archetype:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **File** | **New** and click on **Other**. The project wizard appears
    and expands the `Maven` folder. Select **Maven Project** as shown in the following
    screenshot and click on **Next**:![Using an archetype](img/00027.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **New Maven Project** wizard appears. Use the default workspace and click
    on **Next** as shown in the following screenshot:![Using an archetype](img/00028.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Select an Archetype** wizard appears. This shows a list of archetypes
    available in the Maven repository. New archetypes can be added using the **Add
    Archetypes** button. For our case here, let's choose **maven-archetype-quickstart**
    as shown in the following screenshot and click on **Next**:![Using an archetype](img/00029.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A wizard to specify the Maven coordinates appears. Please fill in the details
    given in the following table in the screenshot that follows the table and click
    on **Finish**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Field | Value |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Group Id** | `com.packt.mvneclipse` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Artifact Id** | `hello-project` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Version** | Default – **0.0.1-SNAPSHOT** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Package** | `com.packt.mvneclipse.hello` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '![Using an archetype](img/00030.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'A sample Maven project has now been created, and it contains a Java file that
    prints **Hello World!**. The project has the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using an archetype](img/00031.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Using no archetypes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can create a Maven project without archetypes using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **File** | **New** and click on **Other**. The project wizard appears
    and expands the `Maven` folder. Select **Maven Project** and click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **New Maven Project** wizard appears. Use the default workspace and check
    the **Skip archetype** checkbox as shown in the following screenshot and click
    on **Next**:![Using no archetypes](img/00032.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The wizard to specify the Maven coordinates appears. Please fill in the details,
    as shown in the following screenshot, and click on **Finish**:![Using no archetypes](img/00033.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A skeleton structure, as shown in the following screenshot, will be created,
    and we have customized it according to the type of application we are building:![Using
    no archetypes](img/00034.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Checking out a Maven project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Checking out a Maven project means checking out from the source code versioning
    system. Before we process this, we need to make sure we have the Maven connector
    installed for the corresponding SCM we plan to use. Use the following steps to
    check out a Maven project:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Eclipse** | **Preferences** in Mac, else **Windows** | **Preference
    search** in other OS, and search for `Maven`, expand it, and click on **Discovery**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, click on **Open Catalog**. This lists all the m2connectors available in
    the marketplace. In our case, we are going to use SVN, so choose **m2-Subversive**,
    as shown in the following screenshot, and click on **Finish**. In the screens
    to follow, click on **Next**, accept the license, and finally click on **Finish**
    to install it. Similarly, we can choose any connector we intend to use for SCM.![Checking
    out a Maven project](img/00035.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Like how you create projects, navigate to **File** | **New** and click on **Other**.
    The project wizard appears. Expand the Maven folder. Click on **Checkout Maven
    Projects from SCM** and click on **Next**.![Checking out a Maven project](img/00036.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next screen, choose the SCM connector **SVN** and provide the corresponding
    SVN URL, as shown in the following screenshot, and click on **Finish**. If you
    click on **Next**, it will show the repository structure.![Checking out a Maven
    project](img/00037.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Importing a Maven project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Importing a Maven project is like importing any other Java project. The steps
    to import a Maven project are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: From the **File** menu, click on **Import**. Choose `Import`, a source window
    appears, expand `Maven` and click on **Existing Maven Projects** as shown in the
    following screenshot:![Importing a Maven project](img/00038.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next wizard, we have to choose the Maven project's location. Navigate
    to the corresponding location using the **Browse...** button, and click on **Finish**
    to finish the import as shown in the following screenshot; the project will be
    imported in the workspace:![Importing a Maven project](img/00039.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Congratulations! In this chapter, you got acquainted with the Maven project
    structure, the POM file, other essential concepts of the Maven realm, and finally
    you ended up learning how to create and import Maven projects. For more information,
    you can refer to *Maven: The Complete Reference* by Tim O''Brien, published by
    Sonatype, Inc., and the Apache Maven site. In the next chapter, we will look at
    the build cycle and you will learn how to run Maven projects.'
  prefs: []
  type: TYPE_NORMAL
