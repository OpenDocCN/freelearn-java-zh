- en: Chapter 12. Play in Production
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章 生产环境下的玩耍
- en: 'Application deployment, configurations, and so on are slightly different in
    a production environment since it is affected by various factors, such as security,
    load/traffic (which is expected to handle), network issues, and so on. In this
    chapter, we will see how to get our Play application up and running in production.
    This chapter covers the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 由于受安全、负载/流量（预期处理）、网络问题等各种因素的影响，应用程序部署、配置等在生产环境中略有不同。在本章中，我们将了解如何使我们的Play应用程序在生产环境中运行。本章涵盖了以下主题：
- en: Deploying an application
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署应用程序
- en: Configuring for production
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生产环境配置
- en: Enabling SSL
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用SSL
- en: Using a load balancer
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用负载均衡器
- en: Deploying a Play application
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署Play应用程序
- en: A Play Framework provides commands to package and deploy Play applications in
    production.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Play框架提供了用于在生产环境中打包和部署Play应用程序的命令。
- en: The `run` command, which we used earlier, starts the application in `DEV` mode
    and watches the code for changes. When there is a change in the code, the application
    is recompiled and reloaded. Being watchful is handy during development, but is
    an unnecessary overhead in production. Also, the default error pages shown in
    `PROD` mode are different from the ones shown in `DEV` mode, that is, they have
    less information about the errors that are occurring (for security reasons).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前使用的`run`命令以`DEV`模式启动应用程序并监视代码的变化。当代码发生变化时，应用程序将被重新编译和重新加载。在开发过程中保持警觉是很有用的，但在生产环境中这会是一个不必要的开销。此外，`PROD`模式下显示的默认错误页面与`DEV`模式下显示的不同，即它们关于发生错误的详细信息较少（出于安全原因）。
- en: Let's look at the different ways in which we can deploy an application in production.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看在生产环境中我们可以以不同方式部署应用程序。
- en: Using the start command
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用start命令
- en: 'To start an application in `PROD` mode, we can use the `start` command:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要以`PROD`模式启动应用程序，我们可以使用`start`命令：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The process ID can be used later to stop the application. By pressing *Ctrl*
    + *D*, we do not lose the logs, since they are also captured in `logs/application.log`
    by default (that is, when there's been no change in the logger configuration).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 进程ID可以在以后用来停止应用程序。通过按*Ctrl* + *D*，我们不会丢失日志，因为默认情况下它们也被捕获在`logs/application.log`中（即，当日志配置没有变化时）。
- en: 'The `start` command optionally accepts the port number at which the application
    should be deployed:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`start`命令可以可选地接受应用程序部署的端口号：'
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Using a distribution
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用发行版
- en: Although the `start` command is good enough to deploy the application, in scenarios
    where a portable version of the application is required, it may not be sufficient.
    In this section, we will see how to build a standalone distribution of our application.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`start`命令足以部署应用程序，但在需要应用程序的可移植版本的情况下，可能不足以满足需求。在本节中，我们将了解如何构建我们应用程序的独立发行版。
- en: 'The Play Framework supports building a distribution of an application using
    the `sbt-native-packager` plugin (refer to [http://www.scala-sbt.org/sbt-native-packager/](http://www.scala-sbt.org/sbt-native-packager/)).
    The plugin can be used to create the `.msi` (Windows), `.deb` (Debian), `.rpm`
    (Red Hat Package Manager), and `.zip` (universal) files, as well as the Docker
    images of our application. The plugin also supports defining settings for the
    package in the application''s build file. Some of the settings are common while
    others are OS-specific. The common ones are shown in the following table:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Play框架支持使用`sbt-native-packager`插件（参考[http://www.scala-sbt.org/sbt-native-packager/](http://www.scala-sbt.org/sbt-native-packager/)）构建应用程序的发行版。该插件可以用来创建`.msi`（Windows）、`.deb`（Debian）、`.rpm`（Red
    Hat软件包管理器）和`.zip`（通用）文件，以及我们应用程序的Docker镜像。该插件还支持在应用程序的构建文件中定义包的设置。其中一些设置是通用的，而其他的是特定于操作系统的。以下表格显示了通用设置：
- en: '| Setting | Purpose | Default value |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| 设置 | 目的 | 默认值 |'
- en: '| --- | --- | --- |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `packageName` | Name of the created output package without the extension
    | Project name transformed from mixed case and spaces to lowercase and dash-separated
    |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `packageName` | 创建的输出包的名称（不带扩展名） | 从混合大小写和空格转换为小写和短横线分隔的项目名称 |'
- en: '| `packageDescription` | The description of the package | Project name |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `packageDescription` | 包的描述 | 项目名称 |'
- en: '| `packageSummary` | Summary of the contents of a Linux package | Project name
    |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `packageSummary` | Linux软件包内容的摘要 | 项目名称 |'
- en: '| `executableScriptName` | Name of the executing script | Project name transformed
    from mixed case and spaces to lowercase and dash-separated |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `executableScriptName` | 执行脚本的名称 | 将项目名称从混合大小写和空格转换为小写和短横线分隔的名称 |'
- en: '| `maintainer` | The name/e-mail address of a maintainer for the native package
    |   |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `maintainer` | 本地软件包维护者的名称/电子邮件地址 |   |'
- en: Now, let's see how we can build packages for different OSes and use them.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何为不同的操作系统构建软件包并使用它们。
- en: Universal distribution
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用发行版
- en: 'A universal distribution is compatible with all/most operating systems. The
    generated packages are located at `projectHome/target/universal`. We can use any
    of the following commands to create a package as required:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 通用发行版与所有/大多数操作系统兼容。生成的软件包位于 `projectHome/target/universal`。我们可以使用以下任一命令根据需要创建软件包：
- en: '`universal:packageBin` – This command creates an `appname-appVersion.zip` file
    of the packaged application'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`universal:packageBin` – 此命令创建打包应用的 `appname-appVersion.zip` 文件'
- en: '`universal:packageZipTarball` – This command creates an `appname-appVersion.tgz`
    file of the packaged application'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`universal:packageZipTarball` – 此命令创建打包应用的 `appname-appVersion.tgz` 文件'
- en: '`universal:packageOsxDmg` – This command creates an `appname-appVersion.dmg`
    file of the packaged application (the command only works on OS X)'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`universal:packageOsxDmg` – 此命令创建打包应用的 `appname-appVersion.dmg` 文件（该命令仅在 OS
    X 上有效）'
- en: Note
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `universal:packageZipTarball` command requires the `gzip`, `xz`, and `tar`
    command-line tools, while `universal:packageOsxDmg` requires OS X or systems installed
    with `hdiutil`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`universal:packageZipTarball` 命令需要 `gzip`、`xz` 和 `tar` 命令行工具，而 `universal:packageOsxDmg`
    命令则需要 OS X 或安装了 `hdiutil` 的系统。'
- en: To use the package built through these commands, extract the files and execute
    `bin/appname` for the Unix-based systems and `bin/appname.bat` for systems with
    Windows.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用通过这些命令构建的软件包，提取文件并对于基于 Unix 的系统执行 `bin/appname`，对于带有 Windows 的系统执行 `bin/appname.bat`。
- en: Note
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In a Play application, we can use the `dist` command instead of `universal:packageBin`.
    The `dist` command deletes unnecessary intermediate files created while packaging
    the application using the `universal:packageBin` command.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Play 应用程序中，我们可以使用 `dist` 命令代替 `universal:packageBin`。`dist` 命令会删除使用 `universal:packageBin`
    命令打包应用时创建的不必要中间文件。
- en: Debian distribution
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Debian 发行版
- en: We can create a distribution that can be installed on Debian-based systems using
    the `debian:packageBin` command. The `.deb` file is located at `projectHome/target`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `debian:packageBin` 命令创建可在基于 Debian 的系统上安装的发行版。`.deb` 文件位于 `projectHome/target`。
- en: Note
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To build the Debian package, the value for `packageDescription` in the Debian
    setting should be set in the `build` file. Other Debian package settings can also
    be set in the `build` file.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建 Debian 软件包，应在 `build` 文件中设置 Debian 设置中的 `packageDescription` 值。其他 Debian
    软件包设置也可以在 `build` 文件中设置。
- en: 'After packaging, we can install the application using `dpkg-deb`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 打包完成后，我们可以使用 `dpkg-deb` 命令安装应用：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once it''s installed, we can start the application by executing this:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我们可以通过执行以下命令来启动应用：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The rpm distribution
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: rpm 发行版
- en: 'An `rpm` package of the application can be created using the `rpm:packageBin`
    command. Some of the settings available for the `rpm` package are shown in the
    following table:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `rpm:packageBin` 命令创建应用的 `rpm` 软件包。以下表格显示了 `rpm` 软件包的一些可用设置：
- en: '| Setting | Purpose |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 设置 | 目的 |'
- en: '| --- | --- |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `rpmVendor` | Name of the vendor for this `rpm` package |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `rpmVendor` | 本 `rpm` 软件包的供应商名称 |'
- en: '| `rpmLicense` | License of the code within the `rpm` package |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `rpmLicense` | `rpm` 软件包内代码的许可协议 |'
- en: '| `rpmUrl` | URL to include in the `rpm` package |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `rpmUrl` | 应包含在 `rpm` 软件包中的 URL |'
- en: '| `rpmDescription` | Description of this `rpm` package |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `rpmDescription` | 本 `rpm` 软件包的描述 |'
- en: '| `rpmRelease` | Special release number for this `rpm` package |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `rpmRelease` | 本 `rpm` 软件包的特殊发布号 |'
- en: Note
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The values for `rpmVendor` in `rpm`, `packageSummary` in `rpm`, and `packageDescription`
    in `rpm` must be set in the `build` file to successfully create an `rpm` package
    of the application where `rpm` is the scope, for example the name in `rpm:= "SampleProject"`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `rpm` 中，`rpmVendor` 的值、`rpm` 中的 `packageSummary` 和 `rpm` 中的 `packageDescription`
    必须在 `build` 文件中设置，才能成功创建应用 `rpm` 软件包，其中 `rpm` 是作用域，例如 `rpm:= "SampleProject"`
    中的名称。
- en: 'Once the `rpm` package is generated, we can install it using `yum` or an equivalent
    tool:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 生成 `rpm` 软件包后，我们可以使用 `yum` 或等效工具安装它：
- en: '[PRE4]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'After the installation is completed, we can start the application by executing
    this:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我们可以通过执行以下命令来启动应用：
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Windows distribution
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Windows 发行版
- en: A Windows installer of the application, `appname-appVersion.msi`, can be created
    using the `windows:packageBin` command. The file is located at `projectHome/target`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `windows:packageBin` 命令创建应用程序的 Windows 安装程序，`appname-appVersion.msi`。文件位于
    `projectHome/target`。
- en: Configuring for production
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生产环境配置
- en: 'The Play Framework understands that applications may require changes in configuration
    prior to deployment in production. To simplify deploying, the command to deploy
    the application also accepts application-level configurations as arguments:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Play 框架理解应用程序在部署到生产之前可能需要更改配置。为了简化部署，部署应用程序的命令也接受应用程序级别的配置作为参数：
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s change the application''s HTTP port as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下方式更改应用程序的 HTTP 端口：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In some projects, the production and development configuration are maintained
    in two separate files. We could either pass one or more configurations or a different
    file altogether. There are three ways of specifying a configuration file explicitly.
    It can be achieved by using one of the following options:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些项目中，生产环境和开发环境的配置被保存在两个独立的文件中。我们可以传递一个或多个配置，或者完全传递一个不同的文件。有三种明确指定配置文件的方式。可以通过以下选项之一实现：
- en: '`config.resource`: This option is used when the file is within the class path
    (a file in `application/conf`)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.resource`: 当文件位于类路径中（`application/conf` 中的文件）时使用此选项'
- en: '`config.file`: This option is used when the file is available on the local
    filesystem but not bundled with the application''s resources'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.file`: 当文件在本地文件系统中可用，但与应用程序资源捆绑在一起时使用此选项'
- en: '`config.url`: This option is used when the file is to be loaded from a URL'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.url`: 当文件需要从 URL 加载时使用此选项'
- en: 'Suppose our application uses `conf/application-prod.conf` in production, we
    can specify the file as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们的应用程序在生产环境中使用`conf/application-prod.conf`，我们可以如下指定该文件：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Similarly, we can also modify the logger configuration by replacing the `config`
    key with `logger`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们也可以通过将 `config` 键替换为 `logger` 来修改日志配置：
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We can also configure the underlying Netty server by passing the settings as
    arguments and this not possible through `application.conf`. The following table
    lists some of the settings related to the server that can be configured in one
    or more ways.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过传递设置作为参数来配置底层的 Netty 服务器，这不可能通过 `application.conf` 实现。以下表格列出了可以在一种或多种方式中配置的与服务器相关的某些设置。
- en: 'The properties related to the address and port are as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 与地址和端口相关的属性如下：
- en: '| Property | Purpose | Default value |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 目的 | 默认值 |'
- en: '| --- | --- | --- |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `http.address` | The address at which the application will be deployed |
    `0.0.0.0` |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `http.address` | 应用程序部署的地址 | `0.0.0.0` |'
- en: '| `http.port` | The port at which the application will be available | `9000`
    |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `http.port` | 应用程序可用的端口 | `9000` |'
- en: '| `https.port` | The `sslPort` port at which the application will be available
    |   |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `https.port` | 应用程序可用的 `sslPort` 端口 |   |'
- en: 'The properties related to the HTTP requests (`HttpRequestDecoder`) are as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 与 HTTP 请求（`HttpRequestDecoder`）相关的属性如下：
- en: '| Property | Purpose | Default value |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 目的 | 默认值 |'
- en: '| --- | --- | --- |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `http.netty.maxInitialLineLength` | The maximum length of the initial line
    (for example, `GET / HTTP/1.0`) | `4096` |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| `http.netty.maxInitialLineLength` | 初始行的最大长度（例如，`GET / HTTP/1.0`） | `4096`
    |'
- en: '| `http.netty.maxHeaderSize` | The maximum length of all the headers combined
    together | `8192` |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| `http.netty.maxHeaderSize` | 所有头部合并后的最大长度 | `8192` |'
- en: '| `http.netty.maxChunkSize` | The maximum length of the body or each chunk
    of it. If the length of the body exceeds this value, the content will be split
    into chunks of this size or less (in case of the last one). If the request sends
    the chunked data and the length of a chunk exceeds this value, it will be split
    into smaller chunks. | `8192` |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `http.netty.maxChunkSize` | 主体或其每个分块的长度最大值。如果主体的长度超过此值，内容将被分成此大小或更小的块（最后一个块的情况）。如果请求发送分块数据，并且一个分块的长度超过此值，它将被分成更小的块。
    | `8192` |'
- en: 'The properties related to the TCP socket options are shown in the following
    table:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格显示了与 TCP 套接字选项相关的属性：
- en: '| Property | Purpose | Default |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 目的 | 默认值 |'
- en: '| --- | --- | --- |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `http.netty.option.backlog` | The maximum size for queued incoming connections
    |   |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| `http.netty.option.backlog` | 队列中传入连接的最大大小 |   |'
- en: '| `http.netty.option.reuseAddress` | Reuse address |   |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `http.netty.option.reuseAddress` | 重新使用地址 |   |'
- en: '| `http.netty.option.receiveBufferSize` | The size of the socket that receives
    a buffer |   |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `http.netty.option.receiveBufferSize` | 接收缓冲区所使用的套接字大小。 |   |'
- en: '| `http.netty.option.sendBufferSize` | The size of the socket that sends a
    buffer |   |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| `http.netty.option.sendBufferSize` | 发送缓冲区所使用的套接字大小。 |   |'
- en: '| `http.netty.option.child.keepAlive` | Keeps connections alive | `False` |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| `http.netty.option.child.keepAlive` | 保持连接活跃。 | `False` |'
- en: '| `http.netty.option.child.soLinger` | Lingers on closing if the data is present
    | Negative integer (disabled) |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| `http.netty.option.child.soLinger` | 如果存在数据，则在关闭时保持等待。 | 负整数（禁用） |'
- en: '| `http.netty.option.tcpNoDelay` | Disables Nagle''s algorithm. TCP/IP uses
    an algorithm known as Nagle''s algorithm to coalesce short segments and improve
    network efficiency. | `False` |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| `http.netty.option.tcpNoDelay` | 禁用Nagle算法。TCP/IP使用一种称为Nagle算法的算法来合并短数据段并提高网络效率。
    | `False` |'
- en: '| `http.netty.option.trafficClass` | The **Type of Service** (**ToS**) octet
    in the **Internet Protocol** (IP) header. | 0 |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| `http.netty.option.trafficClass` | **服务类型**（**ToS**）八位字节，位于**互联网协议**（IP）头部中。
    | 0 |'
- en: Enabling SSL
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用SSL
- en: There are two ways of enabling SSL for our application. We can either serve
    an HTTPS application by the providing the required configuration for it on start,
    or by proxying the requests through an SSL-enabled web server. In this section,
    we will see how the first option can be used and the latter will be covered in
    the next section.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 为我们的应用程序启用SSL有两种方式。我们可以在启动时提供所需的配置来提供HTTPS应用程序，或者通过代理请求通过启用SSL的Web服务器。在本节中，我们将了解如何使用第一种选项，而后者将在下一节中介绍。
- en: 'We can choose to run both the HTTP and HTTPS versions or just opt for one of
    them using the `http.port` and `https.port` settings. By default, HTTPS is disabled
    and we can enable it by specifying `https.port` as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以选择运行HTTP和HTTPS版本，或者仅使用`http.port`和`https.port`设置选择其中之一。默认情况下，HTTPS是禁用的，我们可以通过指定以下`https.port`来启用它：
- en: '[PRE10]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Play generates self-signed certificates if we do not provide them, and starts
    the application with SSL enabled in it. However, these certificates are unsuitable
    for an actual application and we need to specify the details of the key store
    using the following settings:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们没有提供它们，Play将生成自签名证书，并以启用SSL的方式启动应用程序。然而，这些证书不适合实际应用，我们需要使用以下设置指定密钥库的详细信息：
- en: '| Property | Purpose | Default value |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 目的 | 默认值 |'
- en: '| --- | --- | --- |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `https.keyStore` | The path to the key store containing a private key and
    certificate | This value is dynamically generated |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| `https.keyStore` | 包含私钥和证书的密钥库的路径 | 此值是动态生成的 |'
- en: '| `https.keyStoreType` | The key store type | **JavaKeyStore** (**JKS**) |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| `https.keyStoreType` | 密钥库类型 | **Java密钥库**（**JKS**） |'
- en: '| `https.keyStorePassword` | The password | Blank password |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| `https.keyStorePassword` | 密码 | 空密码 |'
- en: '| `https.keyStoreAlgorithm` | The key store algorithm | The platform''s default
    algorithm |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| `https.keyStoreAlgorithm` | 密钥库算法 | 平台的默认算法 |'
- en: In addition to this, we can also specify `SSLEngine` through the `play.http.sslengineprovider`
    setting. The prerequisite for this is that the custom `SSLEngine` should implement
    the `play.server.api.SSLEngineProvider` trait.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还可以通过`play.http.sslengineprovider`设置指定`SSLEngine`。此操作的前提是自定义的`SSLEngine`应该实现`play.server.api.SSLEngineProvider`特质。
- en: Note
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is recommended to use JDK 1.8 when a Play application with SSL enabled is
    running in production, since Play uses some of the features of JDK 1.8 to facilitate
    it. If using JDK 1.8 is not feasible, a reverse proxy with SSL enabled should
    be used instead. Refer to [https://www.playframework.com/documentation/2.3.x/ConfiguringHttps](https://www.playframework.com/documentation/2.3.x/ConfiguringHttps)
    for more details.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当启用了SSL的Play应用程序在生产环境中运行时，建议使用JDK 1.8，因为Play使用JDK 1.8的一些功能来简化它。如果使用JDK 1.8不可行，则应使用启用SSL的反向代理。有关更多详细信息，请参阅[https://www.playframework.com/documentation/2.3.x/ConfiguringHttps](https://www.playframework.com/documentation/2.3.x/ConfiguringHttps)。
- en: Using a load balancer
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用负载均衡器
- en: Websites that deal with huge traffic generally use a technique called load balancing
    to improve the availability and responsiveness of applications. A load balancer
    distributes incoming traffic among multiple servers hosting same content. The
    distribution of load is determined by various scheduler algorithms.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 处理大量流量的网站通常使用一种称为负载均衡的技术来提高应用程序的可用性和响应性。负载均衡器将传入流量分配到多个托管相同内容的服务器。负载分配由各种调度算法确定。
- en: In this section, we will see how to add a load balancer in front of our application
    servers (assuming that they are running on the IPs `127.0.0.1`, `127.0.0.2`, and
    `127.0.0.3` on the port `9000`) using different HTTP web servers.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何使用不同的 HTTP 服务器（假设它们运行在 IP `127.0.0.1`、`127.0.0.2` 和 `127.0.0.3`
    的 `9000` 端口上）在我们的应用程序服务器前添加负载均衡器。
- en: Apache HTTP
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Apache HTTP
- en: The Apache HTTP server provides a secure, efficient, and extensible server that
    supports HTTP services. The Apache HTTP server can be used as a load balancer
    through its `mod_proxy` and `mod_proxy_balance` modules.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Apache HTTP 服务器提供了一个安全、高效且可扩展的服务器，支持 HTTP 服务。Apache HTTP 服务器可以通过其 `mod_proxy`
    和 `mod_proxy_balance` 模块用作负载均衡器。
- en: To use Apache HTTP as a load balancer, `mod_proxy` and `mod_proxy_balancer`
    have to be present in the server. To set up the load balancer, all we need to
    do is update `/etc/httpd/conf/httpd.conf`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Apache HTTP 作为负载均衡器，服务器中必须存在 `mod_proxy` 和 `mod_proxy_balancer`。要设置负载均衡器，我们只需更新
    `/etc/httpd/conf/httpd.conf`。
- en: 'Let''s update the configuration step by step:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步更新配置：
- en: 'Declare `VirtualHost`:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明 `VirtualHost`：
- en: '[PRE11]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Disable the forward proxy for `VirtualHost` so that our server cannot be used
    for masking the identities of clients from the source servers:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 禁用 `VirtualHost` 的正向代理，以便我们的服务器不能用于掩盖源服务器的客户端身份：
- en: '[PRE12]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Instead of a document root, we should add a proxy with balancer identifier
    and `BalanceMembers`. Also, if we want to use the **round-robin** strategy, we
    also need to set it as `lbmethod` (**load balancing method**):'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们应该添加一个带有均衡标识符和 `BalanceMembers` 的代理，而不是文档根。如果我们想使用 **轮询** 策略，我们还需要将其设置为 `lbmethod`（**负载均衡方法**）：
- en: '[PRE13]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, we need to add the access permissions for the proxy, which should be accessible
    to everyone:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要添加代理的访问权限，它应该对所有人均可访问：
- en: '[PRE14]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Finally, we need to map the proxy to the path that we want to load the application
    on the server to. This can be done with a single line:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要将代理映射到我们希望在服务器上加载应用程序的路径。这可以通过一行完成：
- en: '[PRE15]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The configuration that needs to be added to the Apache HTTP configuration file
    is as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 需要添加到 Apache HTTP 配置文件的配置如下：
- en: '[PRE16]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To enable SSL, we will need to add the following code to the `VirtualHost`
    definition:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用 SSL，我们需要在 `VirtualHost` 定义中添加以下代码：
- en: '[PRE17]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This configuration has been tried on Apache/2.4.10 on July 31, 2014.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 此配置已在 2014 年 7 月 31 日于 Apache/2.4.10 上进行过测试。
- en: For more information on Apache HTTP's `mod_proxy` module, refer to [http://httpd.apache.org/docs/2.2/mod/mod_proxy.html](http://httpd.apache.org/docs/2.2/mod/mod_proxy.html).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 Apache HTTP 的 `mod_proxy` 模块的更多信息，请参阅 [http://httpd.apache.org/docs/2.2/mod/mod_proxy.html](http://httpd.apache.org/docs/2.2/mod/mod_proxy.html)。
- en: The nginx server
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: nginx 服务器
- en: The **nginx** server is a high performance HTTP server and a reverse proxy as
    well. It is also an IMAP/POP3 proxy server. We can configure nginx to act as a
    load balancer using two modules—`proxy` and `upstream`. These two modules are
    part of the nginx core and are available by default.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '**nginx** 服务器是一个高性能的 HTTP 服务器和反向代理，同时也是 IMAP/POP3 代理服务器。我们可以配置 nginx 使用两个模块——`proxy`
    和 `upstream` 作为负载均衡器。这两个模块是 nginx 核心的一部分，默认情况下可用。'
- en: 'The nginx configuration file, `nginx.conf`, is generally located at `/etc/nginx`.
    Let''s update it to use nginx as a load balancer for our application step by step:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: nginx 配置文件 `nginx.conf` 通常位于 `/etc/nginx`。让我们逐步更新它，以使用 nginx 作为我们的应用程序的负载均衡器：
- en: 'First, we need to define an `upstream` module for our cluster of application
    servers. The syntax is as follows:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要为我们的应用程序服务器集群定义一个 `upstream` 模块。其语法如下：
- en: '[PRE18]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The default load balancing method is round-robin. So, we need not specify it
    explicitly when we wish to use it. Now, for our application, the `upstream` module
    will be as follows:'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认的负载均衡方法是轮询。因此，当我们希望使用它时，无需明确指定。现在，对于我们的应用程序，`upstream` 模块将如下所示：
- en: '[PRE19]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, all that we need to do is proxy all the requests. To do this, we must
    update the `server` module''s location module:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们所需做的就是代理所有请求。为此，我们必须更新 `server` 模块的 `location` 模块：
- en: '[PRE20]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The nginx server also supports proxying **WebSocket**. To enable WebSocket
    connections, we need to add two headers to the `location` module. So, if our Play
    application uses WebSocket, we can define the `location` module as follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: nginx 服务器也支持代理 **WebSocket**。要启用 WebSocket 连接，我们需要向 `location` 模块添加两个头部。因此，如果我们的
    Play 应用程序使用 WebSocket，我们可以将 `location` 模块定义为以下内容：
- en: '[PRE21]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'To enable SSL, we need to add the following settings to the server definition:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用 SSL，我们需要在服务器定义中添加以下设置：
- en: '[PRE22]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Note
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This configuration has been tested on nginx/1.4.7.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 此配置已在 nginx/1.4.7 上进行过测试。
- en: Refer to the nginx documentation at [http://nginx.org/en/docs/http/load_balancing.html#nginx_load_balancing_configuration](http://nginx.org/en/docs/http/load_balancing.html#nginx_load_balancing_configuration)
    for more details.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: lighttpd
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `lighttpd` server is a lightweight web server designed and optimized for
    high performance environments. All the utilities that may be required are available
    as modules and can be included as per our requirements. We can set `lighttpd`
    as a frontend server for our Play application using the `mod_proxy` module. We
    need to make a few configuration changes to achieve this. They are as follows:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: Update the `lighttpd.conf` file (generally located at `/etc/lighttpd/`) to load
    additional modules.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'By default, loading modules is disabled. This can be enabled by uncommenting
    this line:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Update `modules.conf` (located in the same directory as `lighttpd.conf`) to
    load the `mod_proxy` module.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'By default, only `mod_access` is enabled. Update `server.modules` to the following
    code:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now, enable loading the settings for `mod_proxy` by uncommenting this line:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Update the `proxy.conf` file (generally located at `/etc/lighttpd/conf.d/`)
    with the server proxy configuration. The `q` module has only three settings:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`proxy.debug`: This setting enables/disables the log level'
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`proxy.balance`: This setting is a load balancing algorithm (round-robin, hash,
    and fair)'
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`proxy.server`: This setting is where requests are sent'
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The expected format of defining a `proxy.server` setting is as follows:'
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The terms in this code are explained as follows:'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`<extension>`: This term is the file extension or prefix (if started with `"/"`);
    empty quotes, `""`, match all the requests'
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<name>`:This term is the optional name that shows up in the generated statistics
    of `mod_status`'
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`host`: This term is used to specify the IP address of the proxy server'
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`port`: This term is used to set the TCP port on its corresponding host (the
    default value is `80`)'
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Update the proxy settings as required:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Note
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: This configuration has been tried on lighttpd/1.4.35 on March 12, 2014.
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For more information on the configuration settings of `mod_proxy`, refer to
    [http://redmine.lighttpd.net/projects/lighttpd/wiki/Docs_ModProxy](http://redmine.lighttpd.net/projects/lighttpd/wiki/Docs_ModProxy).
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: High Availability Proxy
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**High Availability** **Proxy** (**HAProxy**) offers high availability, load
    balancing, and proxying for TCP and HTTP-based applications. We can set HAProxy
    as a load balancer by updating the `haproxy.cfg` configuration file (it is generally
    located at `/etc/haproxy/`).'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s make the required configuration changes step by step:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to define the backend cluster. The syntax for defining a backend
    is as follows:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'So, the backend for our application will be as follows:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now, we just need to point requests to the backend cluster. We can do this
    by updating the frontend section:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: No additional configuration is required for an application using WebSockets.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This configuration has been tried on HAProxy version 1.5.9 2014/11/25.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 此配置已在HAProxy版本1.5.9（2014/11/25）上进行了测试。
- en: Troubleshooting
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 故障排除
- en: 'These are some corner cases you might encounter:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是一些你可能遇到的一些边缘情况：
- en: We need to deploy our application on Tomcat. How can we package the application
    as WAR?
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要将我们的应用程序部署到Tomcat。我们如何将应用程序打包为WAR？
- en: Although this is not supported by default in Play, we can use the `play2-war-plugin`
    module (refer to [https://github.com/play2war/play2-war-plugin/](https://github.com/play2war/play2-war-plugin/))
    to achieve this.
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 虽然Play默认不支持此功能，但我们可以使用`play2-war-plugin`模块（参考 [https://github.com/play2war/play2-war-plugin/](https://github.com/play2war/play2-war-plugin/)）来实现这一点。
- en: Is there a simpler way to deploy the application on PaaS?
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有没有更简单的方法来部署应用程序到PaaS？
- en: Deploying Play applications on Heroku, Clever Cloud, Cloud Foundry and/or AppFog
    are documented at [https://www.playframework.com/documentation/2.3.x/DeployingCloud](https://www.playframework.com/documentation/2.3.x/DeployingCloud).
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Heroku、Clever Cloud、Cloud Foundry 和/或 AppFog 上部署 Play 应用程序的文档可在 [https://www.playframework.com/documentation/2.3.x/DeployingCloud](https://www.playframework.com/documentation/2.3.x/DeployingCloud)
    查阅。
- en: Summary
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we saw how to deploy a Play application in production. While
    deploying it, we saw the different packaging options (such as `rpm`, `deb`, `zip`,
    `windows`, and so on) available by default. We also saw different configuration
    settings, such as the HTTP port, maximum size of the request header, and so on,
    which we can specify when starting the application in production. We also discussed
    how to send requests to the application using a reverse proxy.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了如何在生产环境中部署 Play 应用程序。在部署过程中，我们看到了默认可用的不同打包选项（例如 `rpm`、`deb`、`zip`、`windows`
    等）。我们还看到了不同的配置设置，例如 HTTP 端口、请求头最大大小等，这些我们可以在生产环境中启动应用程序时指定。我们还讨论了如何使用反向代理向应用程序发送请求。
- en: In the next chapter, we will discuss how the Play plugins work, and how we can
    build custom Play plugins to meet different requirements.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论 Play 插件的工作原理，以及如何构建定制的 Play 插件以满足不同的需求。
