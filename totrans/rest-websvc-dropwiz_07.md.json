["```java\n    @NotBlank @Length(min=2, max=255)\n    private final String firstName;\n    ```", "```java\n    @NotBlank @Length(min=2, max=255)\n    private final String lastName;\n    ```", "```java\n    @NotBlank @Length(min=2, max=30)\n    private final String phone;\n    ```", "```java\n    import java.util.Set;\n    import javax.validation.ConstraintViolation;\n    import javax.util.ArrayList;\n    import javax.validation.Validator;\n    import javax.ws.rs.core.Response.Status;\n    ```", "```java\n    private final ContactDAO contactDao;  private final Validator validator;\n      public ContactResource(DBI jdbi, Validator validator) {\n     contactDao = jdbi.onDemand(ContactDAO.class);    this.validator = validator;\n      }\n    ```", "```java\n    // … // Add the resource to the environmente.jersey().register(new ContactResource(jdbi, e.getValidator()));// …\n    ```", "```java\n      @POST\n      public Response createContact(Contact contact) throws URISyntaxException {\n        // Validate the contact's data\n        Set<ConstraintViolation<Contact>> violations = validator.validate(contact);\n        // Are there any constraint violations?\n        if (violations.size() > 0) {\n          // Validation errors occurred\n          ArrayList<String> validationMessages = new ArrayList<String>();\n          for (ConstraintViolation<Contact> violation : violations) {\n    validationMessages.add(violation.getPropertyPath().toString() +\": \" + violation.getMessage());\n         }\n         return Response\n              .status(Status.BAD_REQUEST)\n              .entity(validationMessages)\n              .build();\n        }\n        else {\n          // OK, no validation errors\n          // Store the new contact\n          int newContactId = contactDao.createContact(contact.getFirstName(),\n            contact.getLastName(), contact.getPhone());\n          return Response.created(new URI(String.valueOf(newContactId))).build();\n        }\n      }\n    ```", "```java\n      @PUT\n      @Path(\"/{id}\")\n      public Response updateContact(@PathParam(\"id\") int id, Contact contact) {\n        // Validate the updated data\n        Set<ConstraintViolation<Contact>> violations = validator.validate(contact);\n        // Are there any constraint violations?\n        if (violations.size() > 0) {\n          // Validation errors occurred\n          ArrayList<String> validationMessages = new ArrayList<String>();\n          for (ConstraintViolation<Contact> violation : violations) {\n    validationMessages.add(violation.getPropertyPath().toString() +\": \" + violation.getMessage());\n          }\n          return Response\n                .status(Status.BAD_REQUEST)\n                .entity(validationMessages)\n                .build();\n        }\n        else {\n          // No errors\n          // update the contact with the provided ID\n          contactDao.updateContact(id, contact.getFirstName(),\n              contact.getLastName(), contact.getPhone());\n          return Response.ok(\n              new Contact(id, contact.getFirstName(), contact.getLastName(),\n              contact.getPhone())).build();\n        }\n      }\n    ```", "```java\n    {\"firstName\": \"F\", \"lastName\": \"L\", \"phone\": \"\"}.\n    #> curl -v -X POST -d '{\"firstName\": \"F\", \"lastName\": \"L\", \"phone\": \"\"}' http://localhost:8080/contact/ --header \"Content-Type: application/json\"\n    ```", "```java\n< HTTP/1.1 400 Bad Request\n\n< Date: Tue, 28 Jan 2014 20:16:57 GMT\n\n< Content-Type: application/json\n\n< Transfer-Encoding: chunked\n\n< \n\n* Connection #0 to host localhost left intact\n\n* Closing connection #0\n\n[\"phone: length must be between 2 and 30\",\"firstName: length must be between 2 and 255\",\"lastName: length must be between 2 and 255\",\"phone: may not be empty\"]\n\n```", "```java\npublic Response createContact(@Valid Contact contact)\n```", "```java\n    public boolean isValidPerson() {\n      if (firstName.equals(\"John\") && lastName.equals(\"Doe\")) {\n        return false;\n      }\n      else {\n        return true;\n      }\n    }\n    ```", "```java\n    @ValidationMethod(message=\"John Doe is not a valid person!\")\n    ```"]