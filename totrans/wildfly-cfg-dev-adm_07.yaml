- en: Chapter 7. Using the Management Interfaces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will describe the management tools available with WildFly,
    which can be used to control your application server instances.
  prefs: []
  type: TYPE_NORMAL
- en: WildFly provides several administration channels. One of them is the CLI, which
    contains many unique features that make it convenient for daily system administration
    and for monitoring application server resources.
  prefs: []
  type: TYPE_NORMAL
- en: The management tools also include a web admin console that offers an elegant
    view of the application server subsystems, allowing you to perform administrative
    tasks in a simple way.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within this chapter, we will describe the following management tools:'
  prefs: []
  type: TYPE_NORMAL
- en: The command-line interface (CLI)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The web admin console
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will also cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating and modifying datasources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting help from the CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Batch scripting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring server profiles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding JMS destinations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring JMS destinations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring socket-binding groups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choosing between the CLI and web console
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The command-line interface (CLI)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Terminals and consoles were one of the earliest types of communication interfaces
    between a system administrator and the machine. Due to this long-time presence,
    most system administrators prefer to use the raw power of the command line to
    perform management tasks. One of the most evident advantages of using a low-level
    interface, such as a shell, is that tasks can often be executed as a part of batch
    processing or macros for repetitive actions.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we indicated at the beginning of this book, the CLI is located in the `JBOSS_HOME/bin`
    folder and wrapped by `jboss-cli.sh` (for Windows users, it's `jboss-cli.bat`).
  prefs: []
  type: TYPE_NORMAL
- en: 'By launching the shell script, you will start with a disconnected session.
    You can connect at any time with the `connect [standalone/domain controller]`
    command, which, by default, connects to a server controller located at `localhost`
    on port `9990`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You can adjust the default port where the native interface is running by modifying
    the line highlighted in the following code snippet, which is found within the
    `standalone.xml` or `domain.xml` configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from the preceding code snippet, the socket management alias
    is defined within the `management-interfaces` section, while the corresponding
    port is contained in the `socket-binding` section.
  prefs: []
  type: TYPE_NORMAL
- en: 'A handy switch is `--connect`, which can be used to automatically connect to
    your standalone/domain controller when starting the CLI, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'On a Windows machine, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The corresponding command for exiting the CLI is either `quit` or `exit`, which
    closes the connection to the main controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Reloading the server configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While most changes made to the configuration via the command line take effect
    immediately, some changes do not and require a reload of the server configuration,
    for example, changing the socket-binding groups. To reload the server configuration,
    you need to issue the `:reload` command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Employing the CLI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the most interesting features of the CLI is its ability to autocomplete,
    which helps you find the correct spelling of resources and commands. This can
    be achieved by simply pressing the *Tab* key. You can even use it to find out
    the parameters needed for a particular command, without the need to go through
    the reference manual.
  prefs: []
  type: TYPE_NORMAL
- en: 'This guides us to the first part of our journey, where we will learn the available
    commands. So, once you have successfully connected, press the *Tab* key, and it
    will list the options available to you. The following screenshot shows the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Employing the CLI](img/6232OS_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, there are over 30 options available. We can, however, group
    all the interactions that occur with the CLI into two broad categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Operations**: These include the resource paths (addresses) on which they
    are executed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Commands**: These execute an action independently from the path of the current
    resource. These don''t include the resource path.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigating through the resources and executing operations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Operations are strictly bound to an application server resource path. The path
    along the tree of resources is represented by the `/` character, which, as it
    is, represents the root of the tree, as it does in Unix filesystems.
  prefs: []
  type: TYPE_NORMAL
- en: 'When executing operations on the server''s resources, you have to use a well-defined
    syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'It looks a bit awkward at first glance; however, we will try to demystify it
    with the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Here, we tell the CLI to navigate to the `deployment-scanner` subsystem under
    the default scanner resource and set the `scan-interval` attribute to `2500` ms
    using the `write-attribute` operation.
  prefs: []
  type: TYPE_NORMAL
- en: This example also shows the distinction between resources, attributes, and operations.
  prefs: []
  type: TYPE_NORMAL
- en: A resource is an element of the configuration that is located under a path.
    All elements that are classified as resources can be managed through WildFly's
    interfaces. For example, `deployment-scanner` is a resource located under the
    `subsystem` path. It has a child element named `default` scanner (when no name
    attribute is specified, the name defaults to `default`). On a single resource
    or on child resources, you can invoke some operations, such as reading or writing
    the value of an attribute (`scan-interval`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, note that operations are introduced by the `:` prefix, while resources
    are introduced by the `/` character. The following is a screenshot that helps
    you consolidate the basic concepts:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Navigating through the resources and executing operations](img/6232OS_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In order to move through the resource path, you can either state the full tree
    path (as in the earlier example) or use the `cd` command or the equivalent `cn`
    (change node) command to navigate to the path and then issue the desired command.
    For example, the previous code snippet can also be rewritten as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Do attributes modified by the CLI survive a server restart?**'
  prefs: []
  type: TYPE_NORMAL
- en: When using CLI, every change is persisted into the server configuration file.
    This means you must be careful when changing the server's configuration via the
    CLI. To play it safe, it would be wise to take a snapshot of your server configuration
    before making large changes. See the *Taking snapshots of the configuration* section.
  prefs: []
  type: TYPE_NORMAL
- en: 'As it does for the operating system shell, issuing `cd ..` will move the resource
    pointer to the parent resource:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You can, at any time, check the resource path where you are located by issuing
    either an empty `cd` command or just `pwd`, as you do for an Unix shell, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, in order to simplify your navigation, we''ll close this section by
    providing you with a bird''s-eye view of the application server''s tree or resources,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Navigating through the resources and executing operations](img/6232OS_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the tree of resources includes eight child resources, each one
    handling one core aspect of the application server. In [Appendix](apa.html "Appendix A. CLI
    References"), *CLI References*, you will find a handy list of useful commands
    that can be used for your daily system administration. Most of the time, you will
    navigate to the subsystem resources that contain all the application server core
    modules. Other resources that you might want to learn more about are the core-service,
    which handles management interfaces (such as the CLI itself), the deployment resource,
    which can be used to manipulate deployed artifacts, and the `socket-binding-group`,
    which is the resource you will need to change the ports used by the application
    server.
  prefs: []
  type: TYPE_NORMAL
- en: Operations that can be issued on a resource
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Having learned the basics of navigation through the resources, let''s see the
    commands that can be issued on a resource. Operations are triggered by the `:`
    character. You can get a list of them by using the `auto-completion` feature (the
    *Tab* key). The following is a list of the commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Command | Meaning |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `read-resource` | This command reads a model resource''s attribute values
    along with either basic or complete information about any child resources. |'
  prefs: []
  type: TYPE_TB
- en: '| `read-resource-description` | This command outputs a description for the
    selected resource. |'
  prefs: []
  type: TYPE_TB
- en: '| `read-operation-names` | This command reads the available operation names
    on the node. |'
  prefs: []
  type: TYPE_TB
- en: '| `read-operation-description` | This command outputs a description for the
    available operations. |'
  prefs: []
  type: TYPE_TB
- en: '| `read-children-names` | This command gets the name of all children under
    the selected resource. |'
  prefs: []
  type: TYPE_TB
- en: '| `read-children-resources` | This command reads information about all of a
    resource''s children that are of a given type. |'
  prefs: []
  type: TYPE_TB
- en: '| `read-children-types` | This command provides the list of the children located
    under the selected resource. |'
  prefs: []
  type: TYPE_TB
- en: '| `read-attribute` | This command gets the value of an attribute for the selected
    resource. |'
  prefs: []
  type: TYPE_TB
- en: '| `write-attribute` | This command writes an attribute for the selected resource.
    |'
  prefs: []
  type: TYPE_TB
- en: The `read-resource` command deserves some more explanation. Without any extra
    arguments, it provides information about the resource's attribute and the direct
    child nodes.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following is the resource scanning of the datasource subsystem,
    which includes the default datasource named `ExampleDS`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You might have noticed the `undefined` attribute for some elements. The information
    provided by the `read-resource` command is limited to listing the name of child
    resources. If you want to read information about all child resources, including
    their corresponding attributes, you have to issue the command with an additional
    (`recursive=true`) parameter, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, by adding the `recursive=true` parameter, the CLI has also included
    the list of configuration parameters, which are stored as children of the datasource
    element. For the sake of brevity, we have intentionally included just the first
    few datasource parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, some resources can produce metrics, which are collected as runtime
    attributes. These attributes are not shown by default unless you provide the `include-runtime=true`
    parameter. For example, within the datasource subsystem, you can view statistics
    related to the database connection pool:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to learn more about a resource, you can use the `read-resource-description`
    command, which provides a short description. It also includes a description of
    the resource''s runtime attributes. The output can be quite verbose, so here we
    will just include its head section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The `read-operation-names` and `read-operation-description` commands provide
    the list of available operations on a certain resource and their description.
    These produce the information outlined in the previous table, so we will not repeat
    the description here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, the `read-children` operations can be used to collect information about
    child nodes. The `read-children-types` command provides information about the
    child resources and is pretty similar to a simple `ls` command. For example, on
    the `root` resource, it will produce the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The `read-children-names` delivers information about a single child resource,
    and it''s pretty much the same as issuing a `cd` resource followed by an `ls`
    command. For example, if we want to know the list of deployed resources on the
    AS, we will type in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the `read-children-resources` command returns information about a
    child node of a certain type, which needs to be provided as an argument. This
    command is equivalent to executing a `read-resource` operation on each child resource.
    In the previous example, when we issue this command on a hypothetical `Enterprise.ear`
    deployment resource, it will provide the subdeployment information, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Optionally, you can also add `include-runtime=true` as an argument to include
    runtime attributes, as well as `recursive=true` which provides information about
    all child resources recursively.
  prefs: []
  type: TYPE_NORMAL
- en: Executing commands with the CLI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As mentioned earlier, the CLI also includes a set of actions that are not bound
    to your navigation path across the AS tree, but can be issued anywhere to create
    and modify resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the `version` command can be issued to retrieve some basic information
    about the application server and the environment when WildFly is running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: In most cases, commands are used as an alias for quickly creating some resources,
    such as JMS destinations and datasources.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see in the following sections how this can be achieved.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a JMS destination
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can add a JMS queue with the `jms-queue add` command.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As you can see, one important difference between operations and commands is
    also the style used to pass parameters. Operations use brackets to pass parameters
    (for example, `recursive=true`). Commands pass parameters using the format (`--parameter`),
    as you do in a Unix shell.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the synopsis of the `jms-queue add` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The only mandatory element here is `queue-address`, which specifies the queue
    name and the entries with the JNDI names to which the queue will be bound. The
    optional entries include the `selector` parameter, which can be added to specify
    a selector on the queue to filter messages, and the `durable` parameter, which
    specifies whether the queue should be durable or not (the default is `true`).
    Finally, note the optional `profile` element, which can be used on domain configurations
    to specify on which `profile` the `queue` will be created.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember to start the server with the `-c standalone-full.xml` arguments in
    order to have a server configuration that includes the messaging subsystem. If
    you don't, these commands will result in errors.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following command creates a new JMS queue (`queue1`), which is bound under
    the JNDI `queues/queue1` namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The equivalent command to add a JMS topic is `jms-topic add`, which has the
    following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'This is very similar to the JMS queue, except that the JMS topic has a smaller
    number of parameters. Neither the `selector` nor the `durable` parameters are
    required here. Have a look at the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Creating and modifying datasources
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The CLI provides a useful `data-source` command to create datasources. As the
    syntax of this command is quite lengthy, you may find it useful to save it as
    a CLI script and adapt it to your needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the synopsis of the `data-source` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Except for `profile_name`, all the other parameters shown in the preceding code
    snippet are mandatory. That is, you need to specify them if you want to add or
    remove a datasource. As far as parameters are concerned, you need to state, at
    least, the JNDI name for the datasource (`jndi-name`), the driver name (`driver-name`),
    the name of the connection pool (`name`), and the connection URL (`connection-url`).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can further customize the datasource, just as you would do in your `standalone.xml`
    file, by adding some optional parameters. Let''s see a concrete example where
    we create a MySQL datasource. The first thing we need to do is to provide a JDBC-compliant
    driver by deploying the JAR archive. Considering you are using standalone mode,
    just copy the JDBC JAR file into the `deployments` folder. Take a look at the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating and modifying datasources](img/6232OS_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'A simpler approach is to deploy the JDBC driver via the command line. Assuming
    you start the command-line interface from the folder where your driver is housed,
    you will run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can alternatively choose to install the JDBC driver as a module, which is
    the preferred way. This procedure is shown in [Chapter 3](ch03.html "Chapter 3. Configuring
    Enterprise Services"), *Configuring Enterprise Services*. For the purpose of this
    example, we simply deploy the driver, as this expedites the installation procedure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s verify that the driver has been correctly installed on the datasource
    subsystem. We can do this by means of the `installed-drivers-list` command on
    the datasources subsystem, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, there are now two drivers installed: the default `H2` driver
    and the `MySQL` driver that we installed previously.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we are ready to create a new datasource using the MySQL JDBC driver:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we just created a MySQL-bound datasource using a custom pool
    size of a maximum of `30` connections.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You don't have to remember all datasource parameter names. Just use the *Tab*
    key to autocomplete the parameter name. Also, take care that your driver name
    matches with that of the output created when you ran the `installed-drivers-list`
    command.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `data-source` command can also be used to remove a datasource from the
    configuration. This can be done by passing the `remove` parameter and the `name`
    of the `datasource`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can also add and remove datasources using operations executed on the datasource
    system resource. See [Appendix](apa.html "Appendix A. CLI References"), *CLI References*,
    which contains a compendium of the most useful CLI commands.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and modifying XA datasources
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Modifying an XA datasource class for your connections is similar to that of
    a `data-source`. The main difference is that you will use the `xa-data-source`
    command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: There are three arguments required to create an XA datasource. You need a unique
    `name`, the `jndi-name`, and finally, the `driver-name`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This will result in the following code snippet being added to your configuration
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Getting help from the CLI
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If the syntax of CLI commands seem a bit overwhelming to you, don't despair!
    Besides the tab autocompletion functionality, the CLI has also has a main page
    for each command, just as the Unix shell does.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you issue a generic `help` command, the CLI will return a generic quick-start
    guide to the interface. On the other hand, when passed as an argument to a command,
    it provides a helpful description of the command synopsis and their arguments.
    Take a look at the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Executing CLI scripts in batch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `batch` mode allows the execution of multiple CLI commands as an atomic
    unit. Just as you would expect from an ordinary transaction, if any of the commands
    or operations fail, the changes are rolled back. On the other hand, if the execution
    ends without any error, the changes are committed.
  prefs: []
  type: TYPE_NORMAL
- en: Not every command can be part of a batch. For example, navigation commands such
    as `cd`, `pwd`, or `help` are excluded because they do not reflect any change
    to the server configuration.
  prefs: []
  type: TYPE_NORMAL
- en: You can mark the beginning of a batch with the `batch` command. You will know
    when you are in the `batch` mode because the prompt will be marked by the `#`
    sign.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to mark the end of a batch sequence, you have to use the `run-batch`
    command. Once completed, the executed batch will be discarded and the CLI will
    exit the `batch` mode. Take a look at the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Before executing the batch by typing `run-batch`, you can get the list of all
    `batch` commands entered so far by issuing the `list-batch` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Advanced batch commands
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Script batching can indeed be more complex than just starting and executing
    a list of commands. As a matter of fact, by pressing the *Tab* completion key
    when you are in the `batch` mode, you should see several additional commands available.
    One of the most useful ones is the `holdback-batch` command, which can be used
    to temporarily pause the batch of commands, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to continue your batch of commands, just issue the `batch` command
    again, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s even possible to save the batch by assigning a unique name so that you
    can have multiple save points in your scripts, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Later on, you can continue the execution by specifying the holdback name, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'When executed with the `-l` parameter, the `batch` command provides the list
    of batch files that are held:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The following table lists all batch-related commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Command | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `batch` | This command starts a batch of commands. When the batch is paused,
    it reactivates the batch. |'
  prefs: []
  type: TYPE_TB
- en: '| `list-batch` | This command lists the commands that have been added to the
    batch. |'
  prefs: []
  type: TYPE_TB
- en: '| `run-batch` | This command executes the currently active batch of commands
    and exits the `batch` mode. |'
  prefs: []
  type: TYPE_TB
- en: '| `holdback-batch` | This command saves the currently active batch and exits
    the `batch` mode, without executing the batch. The held-back batch can later be
    re-activated by invoking batch commands. |'
  prefs: []
  type: TYPE_TB
- en: '| `clear-batch` | This command removes all the existing command lines from
    the currently active batch. The CLI stays in the `batch` mode after the command
    is executed. |'
  prefs: []
  type: TYPE_TB
- en: '| `discard-batch` | This command discards the currently active batch. All the
    commands added to the batch will be removed, the batch will be discarded, and
    the CLI will exit the batch mode. |'
  prefs: []
  type: TYPE_TB
- en: '| `edit-batch-line` | This command replaces the existing command line from
    the currently active batch with the specified line number with the new command
    line. |'
  prefs: []
  type: TYPE_TB
- en: '| `remove-batch-line` | This command removes an existing command line specified
    with a line number argument from the currently active batch. |'
  prefs: []
  type: TYPE_TB
- en: '| `move-batch-line` | This command moves the existing line from the specified
    position to the new position. |'
  prefs: []
  type: TYPE_TB
- en: Executing scripts in a file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Until now, we have seen CLI commands as part of an interactive session. You
    can, however, execute commands in a non-interactive fashion, adding them in a
    file, just as a shell script. Suppose you created a sample `test.cli` file used
    to issue a redeploy command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Then launch the CLI with the `-file` parameter, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Windows users can use the following equivalent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can pass the `--user` and `--password` arguments to the `jboss-cli.sh` or
    `jboss-cli.bat` call if you need an authentication on the management interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another way to execute commands in a non-interactive way is by passing the
    `--commands` parameter to the CLI containing the list of command lines separated
    by a comma. For example, the previous script can be also be executed this way
    (Unix users):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The equivalent script for Windows users will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'We will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Redirecting non-interactive output
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When you execute the CLI in a non-interactive way, you can redirect the output
    to a file, which would otherwise be printed on the screen. Just as you would do
    for a shell command, use the `>` operator to redirect the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Taking snapshots of the configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Everyone makes mistakes, but many of them are preventable. Whenever you are
    performing many changes to your configuration, it's always a good idea to save
    copies of your work. That's where snapshots come in; one of the advantages of
    using the CLI is the ability to create snapshots of the configuration, which are
    stored in its `history` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `history` folder is located just one step under the `configuration` folder.
    Standalone servers have a `history` folder named `standalone_xml_history` that,
    at start up, contains the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Taking snapshots of the configuration](img/6232OS_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The domain configuration, on the other hand, provides two backup directories
    both for the domain configuration file and the host configuration file. These
    folders are named `domain_xml_history` and `host_xml_history`, respectively. To
    make the reading less verbose, we will describe the snapshot mechanisms using
    a standalone server. The same rules also apply to domain servers, bearing in mind
    that the AS takes snapshots of both the `domain.xml` and `host.xml` files.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see now what the history files are about. The `standalone.initial.xml`
    file contains the original application server's configuration file. This file
    is never overwritten by WildFly.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you need to restore the initial configuration, do not throw away your application
    server installation! Just replace the `standalone.xml` file with `standalone_xml_history/standalone.initial.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: The `standalone.boot.xml` file contains the AS configuration that was used for
    the last successful boot of the server. This gets overwritten every time we boot
    the server successfully.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to undo all changes in the current session, just replace the `standalone.xml`
    file with `standalone_xml_history/standalone.boot.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the `standalone.last.xml` file contains the last successful configuration
    committed by the application server.
  prefs: []
  type: TYPE_NORMAL
- en: What the application server saves for you
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `current` folder is used as a temporary folder to store changes in the configuration
    that happened in the current session. Each change in the application server configuration
    model will result in the creation of a file named `standalone.v[n].xml`. Here,
    `n` is the number of the change that is applied (`standalone.v1.xml` for the initial
    configuration, `standalone.v2.xml` for the first change, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: 'When the application server is restarted, these files are moved into a timestamped
    folder within the `standalone_xml_history` folder. As you can see in the following
    screenshot, the changes during the last session are moved at reboot into the `20140702-215555794`
    folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What the application server saves for you](img/6232OS_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The timestamped folders are rotated by the application server every 30 days.
    If you need to store a core view of the application server configuration, you
    should take snapshots of the application server model. The next section shows
    how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Taking your own snapshots
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As suggested by the earlier warning, you can also take snapshots on demand,
    whenever you need it. Snapshots created by the user are stored directly in the
    `snapshot` folder. In order to take a snapshot of the configuration, just issue
    the `take-snapshot` command, and the CLI will back up your configuration. Take
    a look at the following block of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'You can check the list of available snapshots using the `list-snapshots` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'You can, at any time, delete a particular snapshot using the `delete-snapshot`
    command, which requires the snapshot name as the parameter. Let''s suppose we
    need to delete the snapshot we just created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: History of CLI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All commands executed within a CLI session are stored in history, much like
    shell commands for Unix systems. CLI commands are kept in memory and also persisted
    on the filesystem in a file named `.jboss-cli-history` in the user's home directory.
    You will notice that the latest 500 commands (default history size) entered in
    previous sessions are part of the history.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to have a look at the CLI history, just issue the `history` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: You can also use the arrow keys to navigate back and forth through the history
    of commands and operations, much like what you do with a Linux bash shell.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `history` command supports three optional arguments, which can be used
    to temporarily disable/enable or clear the history. In the following table, we
    mention their outcome:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Argument | Effect |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `disable` | This command disables history expansion (but will not clear the
    previously recorded history). |'
  prefs: []
  type: TYPE_TB
- en: '| `enable` | This command re-enables history expansion (starting from the last
    recorded command before the history expansion was disabled). |'
  prefs: []
  type: TYPE_TB
- en: '| `clear` | This command clears the in-memory history (but not the file one).
    |'
  prefs: []
  type: TYPE_TB
- en: The web admin console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Historically, the JBoss AS has always provided a web-based application to perform
    some administration and management tasks. Versions 4.x and earlier used the `jmx-console`
    to read/write and display the value of `MBeans`, which were the backbone of the
    application server. The `jmx-console` was indeed a useful tool; however, it also
    required some degree of experience to get started with. Besides this, the information
    contained in this application was fragmented across many `MBeans`. For example,
    the datasource information was contained in four `MBeans`, thus making it cumbersome
    to manage this resource.
  prefs: []
  type: TYPE_NORMAL
- en: The 5.x and 6.x release proposed a simpler-to-use approach made up of the admin
    console, which was built as a seam-based web application. Although the new admin
    console was a neat and simple application, some criticized it due to the fact
    that it consumed a good amount of memory and startup time.
  prefs: []
  type: TYPE_NORMAL
- en: WildFly continues to use the web console introduced in JBoss AS 7, which you
    already saw in a previous chapter. It is built using **Google** **Web** **Toolkit**
    (**GWT**) and uses the HTTP management API to configure a management domain or
    a standalone server.
  prefs: []
  type: TYPE_NORMAL
- en: Like many GWT applications, the web console uses a JSON-encoded protocol and
    a de-typed RPC style API to describe and execute management operations against
    a managed domain or standalone server.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the admin console
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'WildFly, by default, uses port 9990 to serve the admin console. You can access
    it at `http://localhost:9990` as configured in your `standalone.xml/domain.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have logged in to the web admin console, you will land on the application
    home page. In standalone mode, you will see four main tabs: **Home**, **Configuration**,
    **Runtime**, and **Administration**. These tabs are explained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Home**: This tab contains a brief description of each tab, a variety of quick
    links to achieve common tasks, and lots of links for other useful resources, as
    shown in the following screenshot:![Accessing the admin console](img/6232OS_07_07.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configuration**: This tab can be used to model the application server configuration,
    as illustrated in the following screenshot:![Accessing the admin console](img/6232OS_07_08.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Runtime**: This tab can be used to manage deployments, as we learned in [Chapter
    6](ch06.html "Chapter 6. Application Structure and Deployment"), *Application
    Structure and Deployment*. In the next section, we will show how easy configuring
    server profiles can be using the web admin console:![Accessing the admin console](img/6232OS_07_09.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Administration**: This tab is used to configure users, groups, and roles.
    We will cover this section in greater detail in [Chapter 10](ch10.html "Chapter 10. Securing
    WildFly"), *Securing WildFly*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring server profiles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The server profile configuration is located in the left-hand side of the web
    application, and can be found under the **Configuration** tab. When running the
    domain mode, you can switch between profiles by choosing the relevant profile
    from the combobox in the top left-hand corner of the page.
  prefs: []
  type: TYPE_NORMAL
- en: As soon as you open the **Configuration** tab, you will see the set of subsystems
    that can be configured through the web interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'In [Chapter 2](ch02.html "Chapter 2. Configuring the Core WildFly Subsystems"),
    *Configuring the Core WildFly Subsystems*, and [Chapter 3](ch03.html "Chapter 3. Configuring
    Enterprise Services"), *Configuring Enterprise Services*, we showed how to configure
    various resources using the main configuration file. If you are the kind of system
    administrator who prefers **windows, icons, menus, and pointers** (**WIMP**) interfaces,
    then the next sections are for you. Configuring the resources via the web console
    is pretty intuitive, so to give you a taste, we will just cover the following
    topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring datasources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring JMS resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring socket-binding groups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring datasources
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can navigate directly to the datasources configuration panel from the list
    of **Common Tasks** on the homepage. Otherwise, you will need to click on the
    **Configuration** tab, followed by the **Subsystems** | **Connector** | **Datasources**
    link on the left-hand side. This will switch the main panel to the datasource
    configuration panel. This panel contains two upper tabs to configure **DATASOURCE**
    and **XA DATASOURCE**. Let's see what the first tab contains.
  prefs: []
  type: TYPE_NORMAL
- en: In the middle of the panel, you can find the list of configured datasources.
    The actions that can be applied are located just above the list of datasources.
    You can create a new datasource by clicking on the **Add** button. You can also
    find the **Remove** and **Disable** buttons next to the **Add** button.
  prefs: []
  type: TYPE_NORMAL
- en: Editing or deleting an existing datasource is a straightforward task that can
    be executed with the click of a button. The same can be said about enabling and
    disabling the selected datasource.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we will show how to add a new datasource to your standalone configuration,
    which requires a few simple steps to be completed. Once you click on the **Add**
    button, a three-step wizard will guide you through the creation of the datasource.
    Let''s configure a sample MySQL datasource for this purpose by performing the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: The first information required will be the datasource name and its JNDI binding,
    as shown in the following screenshot:![Configuring datasources](img/6232OS_07_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next step will be selecting the proper JDBC driver for your datasource.
    Provided that you have successfully installed a JDBC driver on your AS, you should
    have it listed as an available driver:![Configuring datasources](img/6232OS_07_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the MySQL JDBC driver, and in the next (last) step, you will be required
    to enter the JDBC URL of the datasource along with the **Username** and **Password**
    credentials, as shown in the following screenshot:![Configuring datasources](img/6232OS_07_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clicking on **Done** completes the wizard, and you will be redirected to the
    main panel, where the new datasource is now listed in the datasource list. Finally,
    you will need to enable the new datasource by clicking on it and then clicking
    on **Enable**:![Configuring datasources](img/6232OS_07_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a new XA datasource
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: As we have shown in the *The command-line interface (CLI)* section, an XA datasource
    requires your JDBC URL to be entered as an XA property. This is also the case
    when creating the XA datasource via the admin console.
  prefs: []
  type: TYPE_NORMAL
- en: 'Thus, the datasource JNDI naming and driver selection stays the same as for
    non-XA datasources. In the following screenshot, we illustrate the last two steps
    needed to complete the XA datasource creation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a new XA datasource](img/6232OS_07_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the fourth step, as shown in the following screenshot, underneath **Username**
    and **Password**, you will notice the option of adding a security domain. You
    can leave this blank for now. We will discuss security domains in [Chapter 10](ch10.html
    "Chapter 10. Securing WildFly"), *Securing WildFly*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a new XA datasource](img/6232OS_07_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Configuring JMS destinations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Creating new **Queues** and **Topics** using the web console is even more simple.
    Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: From the **Configuration** menu, select the **Messaging** option in the subsystems
    menu. The main panel will switch to display the **Messaging** providers. Now,
    select the required provider, and click on **View**:![Configuring JMS destinations](img/6232OS_07_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From there, select the resource you want to create (**Queue** or **Topic**).
    Then, click on the **Add** button to create a new one:![Configuring JMS destinations](img/6232OS_07_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you need to create a new **Queue**, all you have to do is complete the next
    simple dialog box, which is shown in the following screenshot:![Configuring JMS
    destinations](img/6232OS_07_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you click on **Save**, the new JMS resource will be enlisted in the JMS
    subsystem panel (and also be persisted in the main configuration file), as shown
    in the following screenshot:![Configuring JMS destinations](img/6232OS_07_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring socket-binding groups
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Changing the socket bindings of the application server can be used to solve
    port conflicts with other applications or even other instances of WildFly. If
    you are running the application in the `domain` mode, the best thing you can do
    is specify a port offset for your servers, as pointed out in [Chapter 4](ch04.html
    "Chapter 4. The Undertow Web Server"), *The Undertow Web Server*, which is all
    about domain servers.
  prefs: []
  type: TYPE_NORMAL
- en: If, however, you are running in the `standalone` mode, and you have to change
    just one or more port addresses, then it will probably be more easily achievable
    via the web console.
  prefs: []
  type: TYPE_NORMAL
- en: 'To reach the **Socket** **Binding** **groups** option, perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Socket Binding** on the left-hand side, and then click on **View**
    for the socket-binding group you want to modify.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, select the socket binding you want to change, for example, the **http**
    server port. Then, scroll down to reveal the edit options. Click on the **Edit**
    button and update the port value, as shown in the following screenshot:![Configuring
    socket-binding groups](img/6232OS_07_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you are done, click on the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Server restart needed?**'
  prefs: []
  type: TYPE_NORMAL
- en: Changing the socket binding groups does not produce the immediate effect of
    changing the server port. The updated configuration must be reloaded by the AS.
    You can simply restart the application server by issuing the `restart` command
    or, even better, by issuing the `reload` command from the CLI.
  prefs: []
  type: TYPE_NORMAL
- en: The CLI or web console?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Both management interfaces are powerful tools, and in some circumstances, one
    might be a better choice than another.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the CLI provides a huge addition to the application server, and
    in a relatively short amount of time, it will let you configure its every resource,
    including runtime metrics, in fine detail.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, the web console provides a simple and elegant way to manage
    your AS resources with little or no learning curve. In particular, we have shown
    in [Chapter 3](ch03.html "Chapter 3. Configuring Enterprise Services"), *Configuring
    Enterprise Services*, how it can be easily used to manage the basic domain functionalities,
    such as configuring, starting, and stopping server groups and hosts.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table shows a summary of the main benefits of each interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Tool | Best for |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| CLI | Being an invaluable instrument for an expert system administratorReaching
    in-depth server attributes, such as metricsPerforming operations such as macros
    or batches |'
  prefs: []
  type: TYPE_TB
- en: '| Web console | Being a handy tool to perform most basic administration tasksManaging
    top-level domain resources |'
  prefs: []
  type: TYPE_TB
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to manage the application server using the
    tools that are part of the AS distribution.
  prefs: []
  type: TYPE_NORMAL
- en: You became acquainted with the CLI, which allows you to traverse the tree of
    AS resources and issue commands that can read/modify or display attributes.
  prefs: []
  type: TYPE_NORMAL
- en: One of the advantages of the CLI is that you can easily build complex management
    operations, thanks to its autocomplete functionality. The CLI also allows you
    to enlist commands in a batch so that you can execute them in an all-or-nothing
    fashion, which is typical of transactional systems.
  prefs: []
  type: TYPE_NORMAL
- en: The other management tool is the web interface, which allows you to operate
    on the server configuration using an intuitive and simple interface. For system
    administrators that need to perform basic administration tasks, it's an ideal
    tool, as it requires little or no experience to use it.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you have enough expertise to handle more complex topics. So,
    in the next chapter, we will discuss application server clustering, which allows
    you to provide scalability and high availability to your applications.
  prefs: []
  type: TYPE_NORMAL
