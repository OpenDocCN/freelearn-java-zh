["```java\npublic class CorgiStringIntern {\n    public static void main(String[] args) {\n        String s1 = \"corgi\";\n        String s2 = \"corgi\";\n        String s3 = new String(\"corgi\").intern();\n        System.out.println(\"Are s1 and s2 the same object? \" + (s1 == \n        s2));\n        System.out.println(\"Are s1 and s3 the same object? \" + (s1 == \n        s3));\n    }\n}\n```", "```java\nAre s1 and s2 the same object? true\nAre s1 and s3 the same object? true\n```", "```java\nimport java.util.function.Supplier;\n```", "```java\npublic class LazyInitializationExample {\n  private Supplier<String> lazyString = () -> {\n    StringBuilder stringBuilder = new StringBuilder();\n    stringBuilder.append(\"Java is an incredibly \");\n    stringBuilder.append(\"flexible programming language \");\n    stringBuilder.append(\"that is used in a wide range of \n    applications. \");\n    stringBuilder.append(\"This is a complex string \");\n    stringBuilder.append(\"that was lazily initialized.\");\n    return stringBuilder.toString();\n};\n```", "```java\npublic String getLazyString() {\n  return lazyString.get();\n}\n```", "```java\n  public static void main(String[] args) {\n    LazyInitializationExample example = new \n    LazyInitializationExample();\n    String lazyString = example.getLazyString();\n    System.out.println(\"Lazily initialized string: \" + lazyString);\n  }\n}\n```", "```java\nLazy-initialized string: Java is an incredibly flexible programming language that is used in a wide range of applications. This is a complex string that was lazily initialized.\n```", "```java\npublic class ConcatenationAlternativeOne {\n  public static void main(String[] args) {\n    StringBuilder myStringBuilder = new StringBuilder();\n    myStringBuilder.append(\"Java\");\n    myStringBuilder.append(\" is\");\n    myStringBuilder.append(\" my\");\n    myStringBuilder.append(\" dog's\");\n    myStringBuilder.append(\" name.\");\n    String result = myStringBuilder.toString();\n    System.out.println(result);\n  }\n}\n```", "```java\npublic class ConcatenationAlternativeTwo {\n  public static void main(String[] args) {\n    StringBuffer myStringBuffer = new StringBuffer();\n    myStringBuffer.append(\"Java\");\n    myStringBuffer.append(\" is\");\n    myStringBuffer.append(\" my\");\n    myStringBuffer.append(\" dog's\");\n    myStringBuffer.append(\" name.\");\n    String result = myStringBuffer.toString();\n    System.out.println(result);\n  }\n}\n```", "```java\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n```", "```java\npublic class GoodRegExExample {\n  public static void main(String[] args) {\n    String emailRegex = \"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]\n    {2,}$\";\n```", "```java\nString[] emails = {\n  \"java@example.com\",\n  \"muzz.acruise@gmail.com\",\n  \"invalid-email\",\n  \"bougie@.com\",\n  \"@example.com\",\n  \"brenda@domain.\",\n  \"edward@domain.co\",\n  \"user@example\"\n};\n```", "```java\nPattern pattern = Pattern.compile(emailRegex);\n```", "```java\n    for (String email : emails) {\n      Matcher matcher = pattern.matcher(email);\n      if (matcher.matches()) {\n        System.out.println(email + \" is a valid email address.\");\n      } else {\n        System.out.println(email + \" is an invalid email address.\");\n      }\n    }\n  }\n}\n```", "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\npublic class LargeTextFileHandlingExample {\n  public static void main(String[] args) {\n    String filePath = \"advanced_guide_to_java.txt\";\n    try (BufferedReader reader = new BufferedReader(new \n    FileReader(filePath))) {\n      String line;\n      int lineCount = 0;\n      while ((line = reader.readLine()) != null) {\n        System.out.println(\"Line \" + (++lineCount) + \": \" + line);\n      }\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n}\n```"]