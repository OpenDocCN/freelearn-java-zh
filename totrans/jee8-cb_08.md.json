["```java\n        <dependency>\n            <groupId>javax</groupId>\n            <artifactId>javaee-api</artifactId>\n            <version>8.0</version>\n            <scope>provided</scope>\n        </dependency>\n```", "```java\n@Entity\npublic class User implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Long id;\n\n    @Column\n    private String name;\n\n    @Column\n    private String email;\n\n    public User(){   \n    }\n\n    public User(String name, String email) {\n        this.name = name;\n        this.email = email;\n    }\n\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    } \n}\n```", "```java\n@Entity\npublic class UserAddress implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Long id;\n\n    @Column\n    @ManyToOne\n    private User user;\n\n    @Column\n    private String street;\n\n    @Column\n    private String number;\n\n    @Column\n    private String city;\n\n    @Column\n    private String zip;\n\n    public UserAddress(){\n\n    }\n\n    public UserAddress(User user, String street, String number, \n                       String city, String zip) {\n        this.user = user;\n        this.street = street;\n        this.number = number;\n        this.city = city;\n        this.zip = zip;\n    }\n\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public User getUser() {\n        return user;\n    }\n\n    public void setUser(User user) {\n        this.user = user;\n    }\n\n    public String getStreet() {\n        return street;\n    }\n\n    public void setStreet(String street) {\n        this.street = street;\n    }\n\n    public String getNumber() {\n        return number;\n    }\n\n    public void setNumber(String number) {\n        this.number = number;\n    }\n\n    public String getCity() {\n        return city;\n    }\n\n    public void setCity(String city) {\n        this.city = city;\n    }\n\n    public String getZip() {\n        return zip;\n    }\n\n    public void setZip(String zip) {\n        this.zip = zip;\n    }\n}\n```", "```java\n@Stateless\npublic class UserBean {\n\n    @PersistenceContext\n    private EntityManager em;\n\n    public void add(User user) {\n        em.persist(user);\n    }\n\n    public void remove(User user) {\n        em.remove(user);\n    }\n\n    public void update(User user) {\n        em.merge(user);\n    }\n\n    public User findById(Long id) {\n        return em.find(User.class, id);\n    }\n\n    public List<User> get() {\n        CriteriaBuilder cb = em.getCriteriaBuilder();\n        CriteriaQuery<User> cq = cb.createQuery(User.class);\n        Root<User> pet = cq.from(User.class);\n        cq.select(pet);\n        TypedQuery<User> q = em.createQuery(cq);\n        return q.getResultList();\n    }\n\n}\n```", "```java\n@Stateless\npublic class UserAddressBean {\n\n    @PersistenceContext\n    private EntityManager em;\n\n    public void add(UserAddress address){\n        em.persist(address);\n    }\n\n    public void remove(UserAddress address){\n        em.remove(address);\n    }\n\n    public void update(UserAddress address){\n        em.merge(address);\n    }\n\n    public UserAddress findById(Long id){\n        return em.find(UserAddress.class, id);\n    }\n\n    public List<UserAddress> get() {\n        CriteriaBuilder cb = em.getCriteriaBuilder();\n        CriteriaQuery<UserAddress> cq = cb.createQuery(UserAddress.class);\n        Root<UserAddress> pet = cq.from(UserAddress.class);\n        cq.select(pet);\n        TypedQuery<UserAddress> q = em.createQuery(cq);\n        return q.getResultList();\n    } \n}\n```", "```java\n@Path(\"userService\")\npublic class UserService {\n\n    @EJB\n    private UserBean userBean;\n\n    @GET\n    @Path(\"findById/{id}\")\n    @Consumes(MediaType.APPLICATION_JSON)\n    @Produces(MediaType.APPLICATION_JSON)\n    public Response findById(@PathParam(\"id\") Long id){\n        return Response.ok(userBean.findById(id)).build();\n    }\n\n    @GET\n    @Path(\"get\")\n    @Consumes(MediaType.APPLICATION_JSON)\n    @Produces(MediaType.APPLICATION_JSON)\n    public Response get(){\n        return Response.ok(userBean.get()).build();\n    } \n\n    @POST\n    @Path(\"add\")\n    @Consumes(MediaType.APPLICATION_JSON)\n    @Produces(MediaType.APPLICATION_JSON) \n    public Response add(User user){\n        userBean.add(user);\n        return Response.accepted().build();\n    } \n\n    @DELETE\n    @Path(\"remove/{id}\")\n    @Consumes(MediaType.APPLICATION_JSON)\n    @Produces(MediaType.APPLICATION_JSON) \n    public Response remove(@PathParam(\"id\") Long id){\n        userBean.remove(userBean.findById(id));\n        return Response.accepted().build();\n    }\n}\n```", "```java\n@Path(\"userAddressService\")\npublic class UserAddressService {\n\n    @EJB\n    private UserAddressBean userAddressBean;\n\n    @GET\n    @Path(\"findById/{id}\")\n    @Consumes(MediaType.APPLICATION_JSON)\n    @Produces(MediaType.APPLICATION_JSON)\n    public Response findById(@PathParam(\"id\") Long id){\n        return Response.ok(userAddressBean.findById(id)).build();\n    }\n\n    @GET\n    @Path(\"get\")\n    @Consumes(MediaType.APPLICATION_JSON)\n    @Produces(MediaType.APPLICATION_JSON)\n    public Response get(){\n        return Response.ok(userAddressBean.get()).build();\n    } \n\n    @POST\n    @Path(\"add\")\n    @Consumes(MediaType.APPLICATION_JSON)\n    @Produces(MediaType.APPLICATION_JSON) \n    public Response add(UserAddress address){\n        userAddressBean.add(address);\n        return Response.accepted().build();\n    } \n\n    @DELETE\n    @Path(\"remove/{id}\")\n    @Consumes(MediaType.APPLICATION_JSON)\n    @Produces(MediaType.APPLICATION_JSON) \n    public Response remove(@PathParam(\"id\") Long id){\n        userAddressBean.remove(userAddressBean.findById(id));\n        return Response.accepted().build();\n    }\n}\n```", "```java\n@Entity\npublic class UserAddress implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Long id;\n\n    @Column\n    private Long idUser;\n\n    @Column\n    private String street;\n\n    @Column\n    private String number;\n\n    @Column\n    private String city;\n\n    @Column\n    private String zip;\n\n    public UserAddress(){\n\n    }\n\n    public UserAddress(Long user, String street, String number, \n                       String city, String zip) {\n        this.idUser = user;\n        this.street = street;\n        this.number = number;\n        this.city = city;\n        this.zip = zip;\n    }\n\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public Long getIdUser() {\n        return idUser;\n    }\n\n    public void setIdUser(Long user) {\n        this.idUser = user;\n    }\n\n    public String getStreet() {\n        return street;\n    }\n\n    public void setStreet(String street) {\n        this.street = street;\n    }\n\n    public String getNumber() {\n        return number;\n    }\n\n    public void setNumber(String number) {\n        this.number = number;\n    }\n\n    public String getCity() {\n        return city;\n    }\n\n    public void setCity(String city) {\n        this.city = city;\n    }\n\n    public String getZip() {\n        return zip;\n    }\n\n    public void setZip(String zip) {\n        this.zip = zip;\n    }\n}\n```", "```java\npublic class GatewayResponse {\n\n    private String response;\n    private String from;\n\n    public String getResponse() {\n        return response;\n    }\n\n    public void setResponse(String response) {\n        this.response = response;\n    }\n\n    public String getFrom() {\n        return from;\n    }\n\n    public void setFrom(String from) {\n        this.from = from;\n    }\n}\n```", "```java\n@Consumes(MediaType.APPLICATION_JSON)\n@Path(\"gatewayResource\")\n@RequestScoped\npublic class GatewayResource {\n\n    private final String hostURI = \"http://localhost:8080/\";\n    private Client client;\n    private WebTarget targetUser;\n    private WebTarget targetAddress;\n\n    @PostConstruct\n    public void init() {\n        client = ClientBuilder.newClient();\n        targetUser = client.target(hostURI + \n        \"ch08-micro_x_mono-micro-user/\");\n        targetAddress = client.target(hostURI +\n        \"ch08-micro_x_mono-micro-address/\");\n    }\n\n    @PreDestroy\n    public void destroy(){\n        client.close();\n    }\n\n    @GET\n    @Path(\"getUsers\")\n    @Produces(MediaType.APPLICATION_JSON)\n    public Response getUsers() {\n        WebTarget service = \n        targetUser.path(\"webresources/userService/get\");\n\n        Response response;\n        try {\n            response = service.request().get();\n        } catch (ProcessingException e) {\n            return Response.status(408).build();\n        }\n\n        GatewayResponse gatewayResponse = new GatewayResponse();\n        gatewayResponse.setResponse(response.readEntity(String.class));\n        gatewayResponse.setFrom(targetUser.getUri().toString());\n\n        return Response.ok(gatewayResponse).build();\n    }\n\n    @POST\n    @Path(\"addAddress\")\n    @Produces(MediaType.APPLICATION_JSON) \n    public Response addAddress(UserAddress address) {\n        WebTarget service = \n        targetAddress.path(\"webresources/userAddressService/add\");\n\n        Response response;\n        try {\n            response = service.request().post(Entity.json(address));\n        } catch (ProcessingException e) {\n            return Response.status(408).build();\n        }\n\n        return Response.fromResponse(response).build();\n    }\n\n}\n```", "```java\n@Entity\npublic class UserAddress implements Serializable {\n\n    ...\n\n    @Column\n    @ManyToOne\n    private User user;\n\n    ...\n\n    public UserAddress(User user, String street, String number, \n                       String city, String zip) {\n        this.user = user;\n        this.street = street;\n        this.number = number;\n        this.city = city;\n        this.zip = zip;\n    }\n\n    ...\n\n    public User getUser() {\n        return user;\n    }\n\n    public void setUser(User user) {\n        this.user = user;\n    }\n\n    ...\n\n}\n```", "```java\n@Entity\npublic class UserAddress implements Serializable {\n\n    ...\n\n    @Column\n    private Long idUser;\n\n    ...\n\n    public UserAddress(Long user, String street, String number, \n                       String city, String zip) {\n        this.idUser = user;\n        this.street = street;\n        this.number = number;\n        this.city = city;\n        this.zip = zip;\n    }\n\n    public Long getIdUser() {\n        return idUser;\n    }\n\n    public void setIdUser(Long user) {\n        this.idUser = user;\n    }\n\n    ...\n\n}\n```", "```java\nprivate User user;\n```", "```java\nprivate Long idUser;\n```", "```java\npublic UserAddress(User user, String street, String number, \n                   String city, String zip)\n```", "```java\npublic UserAddress(Long user, String street, String number, \n                   String city, String zip)\n```", "```java\npublic Response add(UserAddress address)\n```", "```java\npublic Response add(UserAddress address)\n```", "```java\n        <dependency>\n            <groupId>javax</groupId>\n            <artifactId>javaee-api</artifactId>\n            <version>8.0</version>\n            <scope>provided</scope>\n        </dependency>\n```", "```java\npublic class User implements Serializable{\n\n    private String name;\n    private String email;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }   \n}\n```", "```java\n@Path(\"userService\")\npublic class UserService {\n\n    @GET\n    @Path(\"getUserCoupled/{name}/{email}\")\n    @Produces(MediaType.APPLICATION_JSON)\n    public Response getUserCoupled(\n            @PathParam(\"name\") String name, \n            @PathParam(\"email\") String email){\n        //GET USER CODE\n\n        return Response.ok().build();\n    }\n\n    @GET\n    @Path(\"getUserDecoupled\")\n    @Produces(MediaType.APPLICATION_JSON)\n    public Response getUserDecoupled(@HeaderParam(\"User\") \n    User user){\n        //GET USER CODE\n\n        return Response.ok().build();\n    }\n}\n```", "```java\n@Path(\"doSomethingService\")\npublic class DoSomethingService {\n\n    private final String hostURI = \"http://localhost:8080/\";\n    private Client client;\n    private WebTarget target;\n\n    @PostConstruct\n    public void init() {\n        client = ClientBuilder.newClient();\n        target = client.target(hostURI + \"ch08-decoupled-user/\");\n    } \n\n    @Path(\"doSomethingCoupled\")\n    @Produces(MediaType.APPLICATION_JSON)\n    public Response doSomethingCoupled(String name, String email){\n        WebTarget service = \n        target.path(\"webresources/userService/getUserCoupled\");\n        service.queryParam(\"name\", name);\n        service.queryParam(\"email\", email);\n\n        Response response;\n        try {\n            response = service.request().get();\n        } catch (ProcessingException e) {\n            return Response.status(408).build();\n        }\n\n        return \n        Response.ok(response.readEntity(String.class)).build();\n    }\n\n    @Path(\"doSomethingDecoupled\")\n    @Produces(MediaType.APPLICATION_JSON)\n    public Response doSomethingDecoupled(User user){\n        WebTarget service = \n        target.path(\"webresources/userService/getUserDecoupled\");\n\n        Response response;\n        try {\n            response = service.request().header(\"User\", \n            Entity.json(user)).get();\n        } catch (ProcessingException e) {\n            return Response.status(408).build();\n        }\n\n        return \n        Response.ok(response.readEntity(String.class)).build();\n    } \n}\n```", "```java\n    public Response getUserCoupled(\n            @PathParam(\"name\") String name, \n            @PathParam(\"email\") String email)\n```", "```java\n    public Response getUserDecoupled(@HeaderParam(\"User\") User user)\n```", "```java\n    public Response doSomethingCoupled(String name, String email){\n        WebTarget service = \n        target.path(\"webresources/userService/getUserCoupled\");\n        service.queryParam(\"name\", name);\n        service.queryParam(\"email\", email);\n\n        ...\n    }\n```", "```java\n    public Response doSomethingDecoupled(User user){\n        WebTarget service = \n        target.path(\"webresources/userService/getUserDecoupled\");\n\n        Response response;\n        try {\n            response = service.request().header(\"User\", \n            Entity.json(user)).get();\n            ...\n    }\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project   xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.eldermoraes</groupId>\n    <artifactId>javaee8-project-template</artifactId>\n    <version>1.0</version>\n    <packaging>war</packaging>\n\n    <name>javaee8-project-template</name>\n\n    <properties>\n        <endorsed.dir>${project.build.directory}/endorsed</endorsed.dir>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>javax</groupId>\n            <artifactId>javaee-api</artifactId>\n            <version>8.0</version>\n            <scope>provided</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.1</version>\n                <configuration>\n                    <source>1.8</source>\n                    <target>1.8</target>\n                    <compilerArguments>\n                        <endorseddirs>${endorsed.dir}</endorseddirs>\n                    </compilerArguments>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-war-plugin</artifactId>\n                <version>2.3</version>\n                <configuration>\n                    <failOnMissingWebXml>false</failOnMissingWebXml>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n```", "```java\nmvn\n```", "```java\npublic class JUnitExample {\n\n    @Size (min = 6, max = 10,message = \"Name should be between 6 and 10 \n           characters\")\n    private String name;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n}\n```", "```java\npublic class JUnitTest {\n\n    private static Validator VALIDATOR;\n\n    @BeforeClass\n    public static void setUpClass() {\n        VALIDATOR = Validation.buildDefaultValidatorFactory().getValidator();\n    }\n\n    @Test\n    public void smallName(){\n        JUnitExample junit = new JUnitExample();\n\n        junit.setName(\"Name\");\n\n        Set<ConstraintViolation<JUnitExample>> cv = \n        VALIDATOR.validate(junit);\n        assertFalse(cv.isEmpty());\n    }\n\n    @Test\n    public void validName(){\n        JUnitExample junit = new JUnitExample();\n\n        junit.setName(\"Valid Name\");\n\n        Set<ConstraintViolation<JUnitExample>> cv = \n        VALIDATOR.validate(junit);\n        assertTrue(cv.isEmpty());\n    }\n\n    @Test\n    public void invalidName(){\n        JUnitExample junit = new JUnitExample();\n\n        junit.setName(\"Invalid Name\");\n\n        Set<ConstraintViolation<JUnitExample>> cv = \n        VALIDATOR.validate(junit);\n        assertFalse(cv.isEmpty());\n    } \n}\n```", "```java\n    <distributionManagement>\n        <repository>\n            <id>Releases</id>\n            <name>Project</name>\n            <url>[NEXUS_URL]/nexus/content/repositories/releases/</url>\n        </repository>\n     </distributionManagement>\n```", "```java\nmvn\n```", "```java\nmvn deploy\n```", "```java\nwget --user=username --password=password \"[NEXUS_URL]/nexus/service/local/artifact/maven/content?g=<group>&a=<artifact>\n&v=<version>&r=releases\"\n```"]