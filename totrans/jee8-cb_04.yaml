- en: Web- and Client-Server Communication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web development is one of the greatest ways to use Java EE. Actually, since
    before J2EE times, we could use JSP and servlets, and that's how web development
    using Java began.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will show some advanced features for web development that will
    make your application faster and better—for you and for your client!
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Using servlet for request and response management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building UI with template features using JSF
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improving response performance with Server Push
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using servlets for request and response management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Servlets are the core place to deal with requests and responses using Java EE.
    If you are still not familiar with it, know that even a JSP is nothing more than
    a way to build a servlet once the page is called.
  prefs: []
  type: TYPE_NORMAL
- en: 'This recipe will show you three features you can use when using servlets:'
  prefs: []
  type: TYPE_NORMAL
- en: Load on startup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parameterized servlets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Asynchronous servlets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Start by adding the dependency to your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The load on startup servlet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start with our servlet that will load on the server''s start up:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: A servlet with init params
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we add a servlet with some parameters for its own initialization:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The asynchronous servlet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'And then we implement our asynchronous servlet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'And finally, we need a simple web page to try all those servlets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The load on startup servlet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you want your servlet to be initialized when the server starts, then this
    is what you need. Usually you will use it to load some cache, start a background
    process, log some information, or whatever you need to do when the server has
    just started and can't wait until somebody calls the servlet.
  prefs: []
  type: TYPE_NORMAL
- en: 'The key points of this kind of servlet are:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `loadOnStartup` param: Accepts any number of servlets. This number defines
    the order used by the server to run all the servlets that will run in the startup.
    So if you have more than one servlet running this way, remember to define the
    right order (if there is any). If there''s no number defined or a negative one,
    the server will choose the default order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `init` method: Remember to override the `init` method with the operation
    you would like to do at the start up time, otherwise your servlet will do nothing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A servlet with init params
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sometimes you need to define some parameters for your servlet that goes beyond
    local variables – `initParams` is the place to do it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `@WebInitParam` annotation will handle them for you and those parameters
    will be available for the server through the `ServletConfig` object.
  prefs: []
  type: TYPE_NORMAL
- en: Asynchronous servlet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s split our `AsyncServlet` class into pieces so we can understand it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we defined our servlet for accepting async behavior by using the `asyncSupported` param:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We used the request being processed to start a new async context.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then we start our async process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'And here we print our output to see the response and finish the async process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get the full source code of this recipe, check [https://github.com/eldermoraes/javaee8-cookbook/tree/master/chapter04/ch04-servlet](https://github.com/eldermoraes/javaee8-cookbook/tree/master/chapter04/ch04-servlet)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building UI with template's features using JSF
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **JavaServer Faces** (**JSF**) is a powerful Java EE API for building outstanding
    UIs, using both client and server features.
  prefs: []
  type: TYPE_NORMAL
- en: It goes much further than when you are using JSP, as you are not only using
    Java code inside HTML code, but actually really referencing code injected in the
    server context.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will show you how to use the Facelet's template feature to get more
    flexibility and reusability from your layout template.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Start by adding the dependency to your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s first create our page layout with a header, content section, and footer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the default header section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The default content section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The default footer section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'And then a simple page using our default template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s create another page and override just the content section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'As this code is calling `UserBean`, let''s define it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, don''t forget to include the `beans.xml` file inside the `WEB-INF` folder;
    otherwise, this bean will not work as expected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to try this code, run it in a Java EE compatible server and access
    the following URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost:8080/ch04-jsf/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://localhost:8080/ch04-jsf/user.xhtml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The explanation is as simple as possible: the `layout.xhtml` is our template.
    As long as you name each section (in our case its header, content, and footer),
    whatever JSF page that uses it will inherit its layout.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Any page using this layout and wanting to customize some of those defined sections,
    should just describe the desired section like we did in the `user.xhtml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get the full source code of this recipe, check [https://github.com/eldermoraes/javaee8-cookbook/tree/master/chapter04/ch04-jsf](https://github.com/eldermoraes/javaee8-cookbook/tree/master/chapter04/ch04-jsf)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improving the response performance with Server Push
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the main features of HTTP/2.0 is the Server Push. When it is available,
    that means, being supported by the protocol, the server, and the browser client—it
    lets the server send ("push") data to the client before it asks for it.
  prefs: []
  type: TYPE_NORMAL
- en: It is one of the most wanted features in JSF 2.3 and probably the one that demands
    less effort to use if your application is based on JSF—just migrate to a Java
    EE 8 compatible server and then you are done.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will show you how to use it in your application and will even let
    you compare the performance between HTTP/1.0 and HTTP/2.0 in the same scenario.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Start by adding the dependency to your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This recipe has only this single servlet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'And we creat a simple page to call both HTTP/1.0 and HTTP/2.0 cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'And try it on a Java EE 8 compatible server using this URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '`https://localhost:8181/ch04-serverpush`'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The image loaded in this recipe was shared in 25 pieces. When there's no HTTP/2.0
    available, the server will wait for 25 requests made by `img src` (from HTML)
    and then reply to each one of them with the proper image.
  prefs: []
  type: TYPE_NORMAL
- en: 'With HTTP/2.0, the server can push them all beforehand. The "magic" is done
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: To check if your images are loaded using Server Push or not, open the developer
    console of your browser, go to network monitoring, and then load the page. One
    of the pieces of information about each image should be who sent it to the browser.
    If there's something like Push or ServerPush, you are using it!
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Server Push will only work under SSL. In other words, if you are using GlassFish
    5 and try to run this recipe, your URL should be something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '`https://localhost:8181/ch04-serverpush`'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you miss it, the code will still work, but using HTTP/1.0\. means that when
    the code asks for `newPushBuilder,` it will return null (not available):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get the full source code of this recipe, check [https://github.com/eldermoraes/javaee8-cookbook/tree/master/chapter04/ch04-serverpush](https://github.com/eldermoraes/javaee8-cookbook/tree/master/chapter04/ch04-serverpush)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
