- en: '*Chapter 6*: Data Structures, Generics, and Popular Utilities'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 6 章*：数据结构、泛型和常用工具'
- en: This chapter presents the Java collections framework and its three main interfaces,
    `List`, `Set`, and `Map`, including a discussion and demonstration of generics.
    The `equals()` and `hashCode()` methods are also discussed in the context of Java
    collections. Utility classes for managing arrays, objects, and time/date values
    have corresponding dedicated sections too. After studying this chapter, you will
    be able to use all the main data structures in your programs.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了 Java 集合框架及其三个主要接口 `List`、`Set` 和 `Map`，包括泛型的讨论和演示。在 Java 集合的上下文中还讨论了 `equals()`
    和 `hashCode()` 方法。管理数组、对象和时间/日期值的实用工具类也有相应的专用章节。学习完本章后，您将能够在您的程序中使用所有主要的数据结构。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: '`List`, `Set`, and `Map` interfaces'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`List`、`Set` 和 `Map` 接口'
- en: '`Collections` utilities'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Collections` 工具'
- en: '`Arrays` utilities'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Arrays` 工具'
- en: '`Object` utilities'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Object` 工具'
- en: The `java.time` package
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java.time` 包'
- en: Let’s begin!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To be able to execute the code examples provided in this chapter, you will
    need the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要能够执行本章提供的代码示例，您需要以下内容：
- en: A computer with a Microsoft Windows, Apple macOS, or Linux operating system
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一台装有 Microsoft Windows、Apple macOS 或 Linux 操作系统的计算机
- en: Java **Standard Edition** (**SE**) version 17 or later
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java **标准版**（**SE**）版本 17 或更高版本
- en: An **integrated development environment** (**IDE**) or your preferred code editor
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 **集成开发环境**（**IDE**）或您偏好的代码编辑器
- en: Instructions on how to set up a Java SE and IntelliJ IDEA editor were provided
    in [*Chapter 1*](B18388_01_ePub.xhtml#_idTextAnchor015) of this book, *Getting
    Started with Java 17*. The files with code examples for this chapter are available
    on GitHub in the [https://github.com/PacktPublishing/Learn-Java-17-Programming.git](https://github.com/PacktPublishing/Learn-Java-17-Programming.git)
    repository, in the `examples/src/main/java/com/packt/learnjava/ch06_collections`
    folder.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如何设置 Java SE 和 IntelliJ IDEA 编辑器的说明提供在本书的 *第 1 章* 中，*Java 17 入门*。本章的代码示例文件可在
    GitHub 的 [https://github.com/PacktPublishing/Learn-Java-17-Programming.git](https://github.com/PacktPublishing/Learn-Java-17-Programming.git)
    仓库中的 `examples/src/main/java/com/packt/learnjava/ch06_collections` 文件夹中找到。
- en: List, Set, and Map interfaces
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列表、集合和映射接口
- en: The `short`, `int`, or `double`. If you need to store such type values, the
    elements must be of a corresponding wrapper type, such as `Short`, `Integer`,
    or `Double`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`short`、`int` 或 `double`。如果您需要存储此类类型值，元素必须是相应的包装类型，例如 `Short`、`Integer` 或 `Double`。'
- en: 'Java collections support various algorithms for storing and accessing elements
    of a collection: an ordered list, a unique set, a dictionary (called a `java.util`
    package of the `java.util` package contains the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Java 集合支持存储和访问集合元素的多种算法：一个有序列表，一个唯一集合，一个字典（称为 `java.util` 包的 `java.util` 包包含以下内容：
- en: 'Interfaces that extend the `Collection` interface: `List`, `Set`, and `Queue`,
    to name the most popular ones'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展 `Collection` 接口的接口：`List`、`Set` 和 `Queue`，最常见的是
- en: 'Classes that implement the previously listed interfaces: `ArrayList`, `HashSet`,
    `Stack`, `LinkedList`, and some others'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现先前列出的接口的类：`ArrayList`、`HashSet`、`Stack`、`LinkedList` 和一些其他类
- en: The `Map` interface and its `ConcurrentMap` and `SortedMap` sub-interfaces,
    to name a couple
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Map` 接口及其 `ConcurrentMap` 和 `SortedMap` 子接口，例如'
- en: 'Classes that implement `Map`-related interfaces: `HashMap`, `HashTable`, and
    `TreeMap`, to name the three most frequently used'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现 `Map` 相关接口的类：`HashMap`、`HashTable` 和 `TreeMap`，例如最常用的三个
- en: Reviewing all the classes and interfaces of the `java.util` package would require
    a dedicated book. So, in this section, we will just have a brief overview of the
    three main interfaces—`List`, `Set`, and `Map`—and one implementation class for
    each of them—`ArrayList`, `HashSet`, and `HashMap`. We start with methods that
    are shared by the `List` and `Set` interfaces. The principal difference between
    `List` and `Set` is that `Set` does not allow the duplication of elements. Another
    difference is that `List` preserves the order of elements and also allows them
    to be sorted.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 审查 `java.util` 包中的所有类和接口需要一本专门的书籍。因此，在本节中，我们将简要概述三个主要接口——`List`、`Set` 和 `Map`——以及每个接口的一个实现类——`ArrayList`、`HashSet`
    和 `HashMap`。我们首先介绍 `List` 和 `Set` 接口共有的方法。`List` 和 `Set` 之间的主要区别是 `Set` 不允许元素重复。另一个区别是
    `List` 保留元素的顺序，并允许对它们进行排序。
- en: To identify an element inside a collection, the `equals()` method is used. To
    improve performance, classes that implement the `Set` interface often use the
    `hashCode()` method too. This facilitates rapid calculation of an integer (called
    a `equals()` method) with each of the elements with the same hash value. Such
    a procedure is faster than comparing a new element with each element of the set
    one by one.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要在集合中识别一个元素，使用`equals()`方法。为了提高性能，实现`Set`接口的类通常也会使用`hashCode()`方法。这有助于快速计算具有相同哈希值的每个元素的整数（称为`equals()`方法）。这种方法比逐个比较集合中的每个元素要快。
- en: That is why we often see that the name of a class has a `hash` prefix, indicating
    that the class uses a hash value, so the element must implement the `hashCode()`
    method. While doing this, you must make sure that it is implemented so that every
    time the `equals()` method returns `true` for two objects, the hash values of
    these two objects returned by the `hashCode()` method are equal too. Otherwise,
    the just-described algorithm of using the hash value will not work.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 正因如此，我们经常看到类的名字前面有一个`hash`前缀，表示该类使用哈希值，因此元素必须实现`hashCode()`方法。在这样做的时候，你必须确保它被实现，以便每次`equals()`方法返回`true`时，这两个对象通过`hashCode()`方法返回的哈希值也相等。否则，使用哈希值描述的算法将不会工作。
- en: And finally, before talking about `java.util` interfaces, a few words about
    generics.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在讨论`java.util`接口之前，先说几句关于泛型的话。
- en: Generics
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 泛型
- en: 'You can see these most often in declarations such as these:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你最常见到这些泛型声明，如下所示：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the preceding examples, `<>`) called a **diamond**, as illustrated in the
    following code snippet:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，`<>`被称为**菱形**，如下面的代码片段所示：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Generics inform the compiler about the expected type of collection elements.
    This way, the compiler can check whether an element a programmer tries to add
    to a declared collection is of a compatible type. Observe the following, for example:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 泛型通知编译器集合元素的预期类型。这样，编译器可以检查程序员尝试添加到声明的集合中的元素是否为兼容类型。例如，观察以下内容：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This helps to avoid runtime errors. It also tips off the programmer (because
    an IDE compiles the code when a programmer writes it) about possible manipulations
    of collection elements.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这有助于避免运行时错误。它还向程序员（因为当程序员编写代码时，IDE会编译代码）提示可能对集合元素进行的操作。
- en: 'We will also see these other types of generics:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将看到这些其他类型的泛型：
- en: '`<? extends T>` means *a type that is either* `T` *or a child of* `T`, where
    `T` is the type used as the generics of a collection.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<? extends T>`表示类型是`T`或`T`的子类，其中`T`是作为集合泛型的类型。'
- en: '`<? super T>` means *a type* `T` *or any of its base (parent) class*, where
    `T` is the type used as the generics of a collection.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<? super T>`表示类型`T`或其任何基类（父类），其中`T`是作为集合泛型的类型。'
- en: 'With that, let’s start with how an object of a class that implements the `List`
    or `Set` interface can be created—or, in other words, the `List` or `Set` type
    of variable can be initialized. To demonstrate the methods of these two interfaces,
    we will use two classes: `ArrayList` (implements `List`) and `HashSet` (implements
    `Set`).'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些，让我们从如何创建实现`List`或`Set`接口的类的对象开始——或者说，初始化`List`或`Set`类型的变量。为了演示这两个接口的方法，我们将使用两个类：`ArrayList`（实现`List`）和`HashSet`（实现`Set`）。
- en: How to initialize List and Set
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何初始化List和Set
- en: 'Since Java 9, the `List` or `Set` interfaces have static `of()` factory methods
    that can be used to initialize a collection, as outlined here:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 自Java 9以来，`List`或`Set`接口有了静态的`of()`工厂方法，可以用来初始化一个集合，如下所述：
- en: '`of()`: Returns an empty collection.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`of()`：返回一个空集合。'
- en: '`of(E... e)`: Returns a collection with as many elements as are passed in during
    the call. They can be passed in a comma-separated list or as an array.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`of(E... e)`: 返回一个包含在调用期间传入的元素数量的集合。它们可以作为逗号分隔的列表或数组传入。'
- en: 'Here are a few examples:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些例子：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: As you might expect, the factory method for `Set` does not allow duplicates,
    so we have commented the line out (otherwise, the preceding example would stop
    running at that line). What is less expected is that you cannot have a `null`
    element, and you cannot add/remove/modify elements of a collection after it was
    initialized using one of the `of()` methods. That’s why we have commented out
    some lines of the preceding example. If you need to add elements after a collection
    is initialized, you have to initialize it using a constructor or some other utilities
    that create a modifiable collection (we will see an example of `Arrays.asList()`
    shortly).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所预期的那样，`Set` 类型的工厂方法不允许重复元素，因此我们已将该行注释掉（否则，前面的示例会在该行停止运行）。但您可能不会想到，您不能有 `null`
    元素，并且在使用 `of()` 方法之一初始化集合后，您不能添加/删除/修改集合的元素。这就是为什么我们注释掉了前面示例中的一些行。如果您需要在集合初始化后添加元素，您必须使用构造函数或其他创建可修改集合的实用工具来初始化它（我们很快将看到一个
    `Arrays.asList()` 的示例）。
- en: 'The `Collection` interface provides two methods for adding elements to an object
    that implements `Collection` (the parent interface of `List` and `Set`) that look
    like this:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`Collection` 接口为实现了 `Collection` 接口（`List` 和 `Set` 的父接口）的对象提供了两种添加元素的方法，其形式如下：'
- en: '`boolean add(E e)`: This attempts to add the provided element `e` to the collection;
    it returns `true` in case of success, and `false` in case of not being able to
    accomplish it (for example, when such an element already exists in the `Set` interface).'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean add(E e)`：这尝试将提供的元素 `e` 添加到集合中；如果成功，则返回 `true`，如果无法完成（例如，当该元素已存在于
    `Set` 接口中），则返回 `false`。'
- en: '`boolean addAll(Collection<? extends E> c)`: This attempts to add all of the
    elements in the provided collection to the collection; it returns `true` if at
    least one element was added, and `false` in case of not being able to add an element
    to the collection (for example, when all elements of the provided collection `c`
    already exist in the `Set` interface).'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean addAll(Collection<? extends E> c)`：这尝试将提供的集合中的所有元素添加到集合中；如果至少添加了一个元素，则返回
    `true`，如果无法将元素添加到集合中（例如，当提供的集合 `c` 中的所有元素已存在于 `Set` 接口中），则返回 `false`。'
- en: 'Here’s an example of using the `add()` method:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个使用 `add()` 方法的示例：
- en: '[PRE24]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'And here is an example of using the `addAll()` method:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是使用 `addAll()` 方法的示例：
- en: '[PRE32]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Here is an example of the `add()` and `addAll()` methods’ functionality:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是 `add()` 和 `addAll()` 方法功能的示例：
- en: '[PRE42]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Notice how, in the last example in the preceding code snippet, the `set1.addAll(set2)`
    method returns `true`, although not all elements were added. To see the case of
    the `add()` and `addAll()` methods returning `false`, look at the following example:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在前面的代码片段中的最后一个示例中，`set1.addAll(set2)` 方法返回 `true`，尽管并非所有元素都被添加。要查看 `add()`
    和 `addAll()` 方法返回 `false` 的情况，请看以下示例：
- en: '[PRE59]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'The `ArrayList` and `HashSet` classes also have constructors that accept a
    collection, as illustrated in the following code snippet:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`ArrayList` 和 `HashSet` 类也有接受集合的构造函数，如下面的代码片段所示：'
- en: '[PRE71]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Now, after we have learned how a collection can be initialized, we can turn
    to other methods in the `List` and `Set` interfaces.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在我们学习了如何初始化集合之后，我们可以转向 `List` 和 `Set` 接口中的其他方法。
- en: java.lang.Iterable interface
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`java.lang.Iterable` 接口'
- en: 'The `Collection` interface extends the `java.lang.Iterable` interface, which
    means that classes that implement the `Collection` interface—directly or not—also
    implement the `java.lang.Iterable` interface. There are only three methods in
    the `Iterable` interface, as outlined here:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`Collection` 接口扩展了 `java.lang.Iterable` 接口，这意味着实现 `Collection` 接口（无论是直接还是间接）的类也实现了
    `java.lang.Iterable` 接口。`Iterable` 接口中只有三个方法，如下所述：'
- en: '`Iterator<T> iterator()`: This returns an object of a class that implements
    the `java.util.Iterator` interface; it allows the collection to be used in `FOR`
    statements, as in this example:'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Iterator<T> iterator()`：这返回一个实现了 `java.util.Iterator` 接口的类的对象；它允许集合在 `FOR`
    语句中使用，如下面的示例所示：'
- en: '[PRE79]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '`default void forEach (Consumer<? super T> function)`: This applies the provided
    function of the `Consumer` type to each element of the collection until all elements
    have been processed or the function throws an exception. We will discuss what
    a function is in [*Chapter 13*](B18388_13_ePub.xhtml#_idTextAnchor281), *Functional
    Programming*; for now, we will just provide an example here:'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default void forEach (Consumer<? super T> function)`: 这个方法将提供的`Consumer`类型的函数应用于集合中的每个元素，直到所有元素都被处理或函数抛出异常。我们将在[*第13章*](B18388_13_ePub.xhtml#_idTextAnchor281)中讨论什么是函数，*函数式编程*；现在，我们在这里只提供一个示例：'
- en: '[PRE80]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '`default Spliterator<T> splititerator()`: This returns an object of a class
    that implements the `java.util.Spliterator` interface; it is used primarily for
    implementing methods that allow parallel processing and is outside the scope of
    this book.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default Spliterator<T> splititerator()`: 这个方法返回一个实现`java.util.Spliterator`接口的类的对象；主要用于实现允许并行处理的方法，并且超出了本书的范围。'
- en: Collection interface
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集合接口
- en: 'As we have mentioned already, the `List` and `Set` interfaces extend the `Collection`
    interface, which means that all methods of the `Collection` interface are inherited
    by `List` and `Set`. These methods are listed here:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前提到的，`List`和`Set`接口扩展了`Collection`接口，这意味着`List`和`Set`继承了`Collection`接口的所有方法。这些方法在此列出：
- en: '`boolean add(E e)`: This attempts to add an element to the collection.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean add(E e)`: 这个方法尝试将一个元素添加到集合中。'
- en: '`boolean addAll(Collection<? extends E> c)`: This attempts to add all elements
    in the collection provided.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean addAll(Collection<? extends E> c)`: 这个方法尝试添加提供的集合中的所有元素。'
- en: '`boolean equals(Object o)`: This compares the collection with the `o` object
    provided. If the object provided is not a collection, this object returns `false`;
    otherwise, it compares the composition of the collection with the composition
    of the collection provided (as an `o` object). In the case of `List`, it also
    compares the order of elements. Let’s illustrate this with a few examples, as
    follows:'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean equals(Object o)`: 这个方法将集合与提供的`o`对象进行比较。如果提供的对象不是集合，则此对象返回`false`；否则，它比较集合的组成与提供的集合（作为`o`对象）的组成。在`List`的情况下，它还比较元素的顺序。以下是一些示例，以说明这一点：'
- en: '[PRE81]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '`int hashCode()`: This returns the hash value for the collection; it is used
    in the case where the collection is an element of a collection that requires the
    `hashCode()` method implementation.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int hashCode()`: 这个方法返回集合的哈希值；在集合是需要实现`hashCode()`方法实现的集合的元素的情况下使用。'
- en: '`boolean isEmpty()`: This returns `true` if the collection does not have any
    elements.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean isEmpty()`: 这个方法返回`true`，如果集合没有任何元素。'
- en: '`int size()`: This returns the count of elements of the collection; when the
    `isEmpty()` method returns `true`, this method returns `0`.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int size()`: 这个方法返回集合中元素的数量；当`isEmpty()`方法返回`true`时，此方法返回`0`。'
- en: '`void clear()`: This removes all elements from the collection; after this method
    is called, the `isEmpty()` method returns `true`, and the `size()` method returns
    `0`.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`void clear()`: 这个方法从集合中删除所有元素；在此方法调用之后，`isEmpty()`方法返回`true`，而`size()`方法返回`0`。'
- en: '`boolean contains(Object o)`: This returns `true` if the collection contains
    the provided `o` object. For this method to work correctly, each element of the
    collection and the provided object must implement the `equals()` method, and,
    in the case of `Set`, the `hashCode()` method should be implemented.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean contains(Object o)`: 如果集合包含提供的`o`对象，则此方法返回`true`。为了使此方法正确工作，集合中的每个元素和提供的对象都必须实现`equals()`方法，在`Set`的情况下，应该实现`hashCode()`方法。'
- en: '`boolean containsAll(Collection<?> c)`: This returns `true` if the collection
    contains all elements in the collection provided. For this method to work correctly,
    each element of the collection and each element of the collection provided must
    implement the `equals()` method, and, in the case of `Set`, the `hashCode()` method
    should be implemented.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean containsAll(Collection<?> c)`: 如果集合包含提供的集合中的所有元素，则此方法返回`true`。为了使此方法正确工作，集合中的每个元素和提供的集合中的每个元素都必须实现`equals()`方法，在`Set`的情况下，应该实现`hashCode()`方法。'
- en: '`boolean remove(Object o)`: This attempts to remove the specified element from
    this collection and returns `true` if it was present. For this method to work
    correctly, each element of the collection and the object provided must implement
    the `equals()` method, and, in the case of `Set`, the `hashCode()` method should
    be implemented.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean remove(Object o)`: 这尝试从该集合中删除指定的元素，并在元素存在时返回`true`。为了正确执行此方法，集合的每个元素和提供的对象都必须实现`equals()`方法，在`Set`的情况下，应实现`hashCode()`方法。'
- en: '`boolean removeAll(Collection<?> c)`: This attempts to remove from the collection
    all elements of the collection provided; similar to the `addAll()` method, this
    method returns `true` if at least one of the elements was removed; otherwise,
    it returns `false`. For this method to work correctly, each element of the collection
    and each element of the collection provided must implement the `equals()` method,
    and, in the case of `Set`, the `hashCode()` method should be implemented.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean removeAll(Collection<?> c)`: 这尝试从集合中删除提供的集合的所有元素；类似于`addAll()`方法，如果至少删除了一个元素，则此方法返回`true`；否则返回`false`。为了正确执行此方法，集合的每个元素和提供的集合的每个元素都必须实现`equals()`方法，在`Set`的情况下，应实现`hashCode()`方法。'
- en: '`default boolean removeIf(Predicate<? super E> filter)`: This attempts to remove
    from the collection all elements that satisfy the given predicate; it is a function
    we are going to describe in [*Chapter 13*](B18388_13_ePub.xhtml#_idTextAnchor281),
    *Functional Programming*. It returns `true` if at least one element was removed.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default boolean removeIf(Predicate<? super E> filter)`: 这尝试从集合中删除所有满足给定谓词的元素；这是我们将在[*第13章*](B18388_13_ePub.xhtml#_idTextAnchor281)，*函数式编程*中描述的函数。如果至少删除了一个元素，则返回`true`。'
- en: '`boolean retainAll(Collection<?> c)`: This attempts to retain in the collection
    just the elements contained in the collection provided. Similar to the `addAll()`
    method, this method returns `true` if at least one of the elements is retained;
    otherwise, it returns `false`. For this method to work correctly, each element
    of the collection and each element of the collection provided must implement the
    `equals()` method, and, in the case of `Set`, the `hashCode()` method should be
    implemented.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean retainAll(Collection<?> c)`: 这尝试在集合中仅保留提供的集合中包含的元素。类似于`addAll()`方法，如果至少保留了一个元素，则此方法返回`true`；否则返回`false`。为了正确执行此方法，集合的每个元素和提供的集合的每个元素都必须实现`equals()`方法，在`Set`的情况下，应实现`hashCode()`方法。'
- en: '`Object[] toArray()`, `T[] toArray(T[] a)`: This converts the collection to
    an array.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Object[] toArray()`，`T[] toArray(T[] a)`: 这将集合转换为数组。'
- en: '`default T[] toArray(IntFunction<T[]> generator)`: This converts the collection
    to an array, using the function provided. We are going to explain functions in
    [*Chapter 13*](B18388_13_ePub.xhtml#_idTextAnchor281), *Functional Programming*.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default T[] toArray(IntFunction<T[]> generator)`: 这使用提供的函数将集合转换为数组。我们将在[*第13章*](B18388_13_ePub.xhtml#_idTextAnchor281)，*函数式编程*中解释函数。'
- en: '`default Stream<E> stream()`: This returns a `Stream` object (we talk about
    streams in [*Chapter 14*](B18388_14_ePub.xhtml#_idTextAnchor296), *Java Standard
    Streams*).'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default Stream<E> stream()`: 这返回一个`Stream`对象（我们将在[*第14章*](B18388_14_ePub.xhtml#_idTextAnchor296)，*Java标准流*中讨论流）。'
- en: '`default Stream<E> parallelStream()`: This returns a possibly parallel `Stream`
    object (we talk about streams in [*Chapter 14*](B18388_14_ePub.xhtml#_idTextAnchor296),
    *Java Standard Streams*).'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default Stream<E> parallelStream()`: 这返回一个可能并行的`Stream`对象（我们将在[*第14章*](B18388_14_ePub.xhtml#_idTextAnchor296)，*Java标准流*中讨论流）。'
- en: List interface
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`List`接口'
- en: 'The `List` interface has several other methods that do not belong to any of
    its parent interfaces, as outlined here:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`List`接口有几个不属于其任何父接口的其他方法，如下所述：'
- en: Static factory `of()` methods, described in the *How to initialize List and
    Set* subsection.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态工厂`of()`方法，在*如何初始化List和Set*子节中描述。
- en: '`void add(int index, E element)`: This inserts the element provided at the
    provided position in the list.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`void add(int index, E element)`: 这将在列表中提供的位置插入提供的元素。'
- en: '`static List<E> copyOf(Collection<E> coll)`: This returns an unmodifiable `List`
    interface containing the elements of the given `Collection` interface and preserves
    their order. The following code snippet demonstrates the functionality of this
    method:'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`static List<E> copyOf(Collection<E> coll)`: 这返回一个包含给定`Collection`接口元素的不可修改的`List`接口，并保留它们的顺序。以下代码片段演示了此方法的功能：'
- en: '[PRE82]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '`E get(int index)`: This returns the element located at the position specified
    in the list.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`E get(int index)`: 这返回列表中指定位置处的元素。'
- en: '`List<E> subList(int fromIndex, int toIndex)`: Extracts a sublist between `fromIndex`
    (inclusive) and `toIndex` (exclusive).'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`List<E> subList(int fromIndex, int toIndex)`: 提取 `fromIndex`（包含）和 `toIndex`（不包含）之间的子列表。'
- en: '`int indexOf(Object o)`: This returns the first index (position) of a specified
    element in the list; the first element in the list has an index (position) of
    `0`.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int indexOf(Object o)`: 这返回列表中指定元素的第一个索引（位置）；列表中的第一个元素具有索引（位置）`0`。'
- en: '`int lastIndexOf(Object o)`: This returns the last index (position) of a specified
    element in the list; the final element in the list has a `list.size() - 1` index
    position.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int lastIndexOf(Object o)`: 这返回列表中指定元素的最后索引（位置）；列表中的最后一个元素具有 `list.size()
    - 1` 的索引位置。'
- en: '`E remove(int index)`: This removes the element located at a specified position
    in the list; it returns the element removed.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`E remove(int index)`: 这将删除列表中指定位置处的元素；它返回被删除的元素。'
- en: '`E set(int index, E element)`: This replaces the element located at a position
    specified in the list; it returns the element replaced.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`E set(int index, E element)`: 这将替换列表中指定位置处的元素；它返回被替换的元素。'
- en: '`default void replaceAll(UnaryOperator<E> operator)`: This transforms the list
    by applying the function provided to each element. The `UnaryOperator` function
    will be described in [*Chapter 13*](B18388_13_ePub.xhtml#_idTextAnchor281), *Functional
    Programming*.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default void replaceAll(UnaryOperator<E> operator)`: 这通过将提供的函数应用于每个元素来转换列表。`UnaryOperator`
    函数将在 [*第13章*](B18388_13_ePub.xhtml#_idTextAnchor281)，*函数式编程* 中描述。'
- en: '`ListIterator<E> listIterator()`: Returns a `ListIterator` object that allows
    the list to be traversed backward.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ListIterator<E> listIterator()`: 返回一个 `ListIterator` 对象，允许列表向后遍历。'
- en: '`ListIterator<E> listIterator(int index)`: Returns a `ListIterator` object
    that allows the sublist (starting from the provided position) to be traversed
    backward. Observe the following, for example:'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ListIterator<E> listIterator(int index)`: 返回一个 `ListIterator` 对象，允许从提供的位置开始遍历子列表。例如，观察以下内容：'
- en: '[PRE83]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '`default void sort(Comparator<? super E> c)`: This sorts the list according
    to the order generated by the `Comparator` interface provided. Observe the following,
    for example:'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default void sort(Comparator<? super E> c)`: 这根据提供的 `Comparator` 接口生成的顺序对列表进行排序。例如，观察以下内容：'
- en: '[PRE84]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'There are principally two ways to sort a list, as follows:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 主要有两种方式对列表进行排序，如下所示：
- en: Using a `Comparable` interface implementation (called **natural order**)
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `Comparable` 接口实现（称为 **自然顺序**）
- en: Using a `Comparator` interface implementation
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `Comparator` 接口实现
- en: The `Comparable` interface only has a `compareTo()` method. In the preceding
    example, we have implemented the `Comparator` interface basing it on the `Comparable`
    interface implementation in the `String` class. As you can see, this implementation
    provided the same sort order as `Comparator.nullsFirst(Comparator.naturalOrder())`.
    This style of implementation is called **functional programming**, which we will
    discuss in more detail in [*Chapter 13*](B18388_13_ePub.xhtml#_idTextAnchor281),
    *Functional Programming*.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`Comparable` 接口只有一个 `compareTo()` 方法。在上面的示例中，我们根据 `String` 类中的 `Comparable`
    接口实现实现了 `Comparator` 接口。如您所见，此实现提供了与 `Comparator.nullsFirst(Comparator.naturalOrder())`
    相同的排序顺序。这种实现方式称为 **函数式编程**，我们将在 [*第13章*](B18388_13_ePub.xhtml#_idTextAnchor281)，*函数式编程*
    中更详细地讨论。'
- en: Set interface
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`Set` 接口'
- en: 'The `Set` interface has the following methods that do not belong to any of
    its parent interfaces:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`Set` 接口有以下不属于其任何父接口的方法：'
- en: Static `of()` factory methods, described in the *How to initialize List and
    Set* subsection.
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态 `of()` 工厂方法，在 *如何初始化列表和集合* 子部分中描述。
- en: 'The `static Set<E> copyOf(Collection<E> coll)` method: This returns an unmodifiable
    `Set` interface containing elements of the given `Collection`; it works the same
    way as the `static <E> List<E> copyOf(Collection<E> coll)` method described in
    the *List interface* section.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`static Set<E> copyOf(Collection<E> coll)` 方法：此方法返回一个包含给定 `Collection` 元素的不可修改的
    `Set` 接口；它的工作方式与在 *列表接口* 部分描述的 `static <E> List<E> copyOf(Collection<E> coll)`
    方法相同。'
- en: Map interface
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`Map` 接口'
- en: 'The `Map` interface has many methods similar to the `List` and `Set` methods,
    as listed here:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`Map` 接口有许多与 `List` 和 `Set` 方法类似的方法，如下所示：'
- en: '`int size()`'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int size()`'
- en: '`void clear()`'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`void clear()`'
- en: '`int hashCode()`'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int hashCode()`'
- en: '`boolean isEmpty()`'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean isEmpty()`'
- en: '`boolean equals(Object o)`'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean equals(Object o)`'
- en: '`default void forEach(BiConsumer<K,V> action)`'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default void forEach(BiConsumer<K,V> action)`'
- en: 'Static factory methods: `of()`, `of(K, V v)`, `of(K k1, V v1, K k2, V v2)`,
    and many other methods besides'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态工厂方法：`of()`、`of(K, V v)`、`of(K k1, V v1, K k2, V v2)` 以及许多其他方法
- en: The `Map` interface, however, does not extend `Iterable`, `Collection`, or any
    other interface, for that matter. It is designed to be able to store `Entry`,
    which is an internal interface of `Map`. Both `value` and `key` objects must implement
    the `equals()` method. A `key` object must also implement the `hashCode()` method.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，`Map` 接口并没有扩展 `Iterable`、`Collection` 或其他任何接口。它被设计成能够存储 `Entry`，这是 `Map`
    的内部接口。`value` 和 `key` 对象都必须实现 `equals()` 方法。`key` 对象还必须实现 `hashCode()` 方法。
- en: 'Many methods of the `Map` interface have exactly the same signature and functionality
    as in the `List` and `Set` interfaces, so we are not going to repeat them here.
    We will only walk through the `Map`-specific methods, as follows:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`Map` 接口中的许多方法与 `List` 和 `Set` 接口中的签名和功能完全相同，因此我们在这里不再重复。我们只将遍历 `Map` 特定的方法，如下所示：'
- en: '`V get(Object key)`: This retrieves the value according to the key provided;
    it returns `null` if there is no such key.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`V get(Object key)`: 根据提供的键检索值；如果没有这样的键，则返回 `null`。'
- en: '`Set<K> keySet()`: This retrieves all keys from the map.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Set<K> keySet()`: 这将检索地图中的所有键。'
- en: '`Collection<V> values()`: This retrieves all values from the map.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Collection<V> values()`: 这将检索地图中的所有值。'
- en: '`boolean containsKey(Object key)`: This returns `true` if the key provided
    exists in the map.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean containsKey(Object key)`: 如果提供的键存在于地图中，则返回 `true`。'
- en: '`boolean containsValue(Object value)`: This returns `true` if the value provided
    exists in the map.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean containsValue(Object value)`: 如果提供的值存在于地图中，则返回 `true`。'
- en: '`V put(K key, V value)`: This adds the value and its key to the map; it returns
    the previous value stored with the same key.'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`V put(K key, V value)`: 这将值及其键添加到地图中；它返回与相同键存储的先前值。'
- en: '`void putAll(Map<K,V> m)`: This copies from the map provided all the key-value
    pairs.'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`void putAll(Map<K,V> m)`: 这将从提供的地图中复制所有键值对。'
- en: '`default V putIfAbsent(K key, V value)`: This stores the value provided and
    maps to the key provided if such a key is not already used by the map. It returns
    the value mapped to the key provided—either an existing or a new one.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default V putIfAbsent(K key, V value)`: 如果地图尚未使用提供的键，则存储提供的值并将其映射到提供的键。它返回映射到提供的键的值——现有的或新的。'
- en: '`V remove(Object key)`: This removes both the key and value from the map; it
    returns a value or `null` if there is no such key, or if the value is `null`.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`V remove(Object key)`: 从地图中删除键和值；如果没有这样的键或值是 `null`，则返回值或 `null`。'
- en: '`default boolean remove(Object key, Object value)`: This removes the key-value
    pair from the map if such a pair exists in the map.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default boolean remove(Object key, Object value)`: 如果地图中存在这样的键值对，则从地图中删除键值对。'
- en: '`default V replace(K key, V value)`: This replaces the value if the key provided
    is currently mapped to the value provided. It returns the old value if it was
    replaced; otherwise, it returns `null`.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default V replace(K key, V value)`: 如果提供的键当前映射到提供的值，则替换该值。如果替换了旧值，则返回旧值；否则返回
    `null`。'
- en: '`default boolean replace(K key, V oldValue, V newValue)`: This replaces the
    `oldValue` value with the `newValue` value provided if the key provided is currently
    mapped to the `oldValue` value. It returns `true` if the `oldValue` value was
    replaced; otherwise, it returns `false`.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default boolean replace(K key, V oldValue, V newValue)`: 如果提供的键当前映射到 `oldValue`
    值，则将 `oldValue` 值替换为提供的 `newValue` 值。如果替换了 `oldValue` 值，则返回 `true`；否则返回 `false`。'
- en: '`default void replaceAll(BiFunction<K,V,V> function)`: This applies the function
    provided to each key-value pair in the map and replaces it with the result, or
    throws an exception if this is not possible.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default void replaceAll(BiFunction<K,V,V> function)`: 这将提供的函数应用于地图中的每个键值对，并用结果替换它，如果不可能这样做，则抛出异常。'
- en: '`Set<Map.Entry<K,V>> entrySet()`: This returns a set of all key-value pairs
    as objects of `Map.Entry`.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Set<Map.Entry<K,V>> entrySet()`: 这返回一个包含所有键值对的 `Map.Entry` 对象的集合。'
- en: '`default V getOrDefault(Object key, V defaultValue)`: This returns the value
    mapped to the key provided or the `defaultValue` value if the map does not have
    the key provided.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default V getOrDefault(Object key, V defaultValue)`: 这返回映射到提供的键的值，或者如果没有提供键，则返回
    `defaultValue` 值。'
- en: '`static Map.Entry<K,V> entry(K key, V value)`: This returns an unmodifiable
    `Map.Entry` object with the `key` object and `value` object provided in it.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`static Map.Entry<K,V> entry(K key, V value)`: 这返回一个包含提供的 `key` 对象和 `value`
    对象的不可修改的 `Map.Entry` 对象。'
- en: '`static Map<K,V> copy(Map<K,V> map):` This converts the `Map` interface provided
    to an unmodifiable one.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`static Map<K,V> copy(Map<K,V> map):` 这将提供的 `Map` 接口转换为不可修改的一个。'
- en: 'The following `Map` methods are much too complicated for the scope of this
    book, so we are just mentioning them for the sake of completeness. They allow
    multiple values to be combined or calculated and aggregated in a single existing
    value in the `Map` interface, or a new one to be created:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 `Map` 方法对于本书的范围来说过于复杂，所以我们只是为了完整性而提及它们。它们允许在 `Map` 接口中将多个值组合或计算并聚合到单个现有值中，或者创建一个新的值：
- en: '`default V merge(K key, V value, BiFunction<V,V,V> remappingFunction)`: If
    the provided key-value pair exists and the value is not `null`, the provided function
    is used to calculate a new value; it removes the key-value pair if the newly calculated
    value is `null`. If the key-value pair provided does not exist or the value is
    `null`, the non-`null` value provided replaces the current one. This method can
    be used for aggregating several values; for example, it can be used for concatenating
    the following string values: `map.merge(key, value, String::concat)`. We will
    explain what `String::concat` means in [*Chapter 13*](B18388_13_ePub.xhtml#_idTextAnchor281),
    *Functional Programming.*'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default V merge(K key, V value, BiFunction<V,V,V> remappingFunction)`: 如果提供的键值对存在且值不是
    `null`，则使用提供的函数来计算一个新的值；如果新计算出的值是 `null`，则删除键值对。如果提供的键值对不存在或值是 `null`，则提供的非 `null`
    值替换当前的值。此方法可用于聚合多个值；例如，它可以用于连接以下字符串值：`map.merge(key, value, String::concat)`。我们将在
    [*第13章*](B18388_13_ePub.xhtml#_idTextAnchor281)，*函数式编程* 中解释 `String::concat` 的含义。'
- en: '`default V compute(K key, BiFunction<K,V,V> remappingFunction)`: This computes
    a new value using the function provided.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default V compute(K key, BiFunction<K,V,V> remappingFunction)`: 使用提供的函数计算一个新的值。'
- en: '`default V computeIfAbsent(K key, Function<K,V> mappingFunction)`: This computes
    a new value using the function provided only if the provided key is not already
    associated with a value, or the value is `null`.'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default V computeIfAbsent(K key, Function<K,V> mappingFunction)`: 仅当提供的键尚未与一个值相关联，或者该值是
    `null` 时，使用提供的函数计算一个新的值。'
- en: '`default V computeIfPresent(K key, BiFunction<K,V,V> remappingFunction)`: This
    computes a new value using the function provided only if the provided key is already
    associated with a value and the value is not `null`.'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default V computeIfPresent(K key, BiFunction<K,V,V> remappingFunction)`: 仅当提供的键已经与一个值相关联且该值不是
    `null` 时，使用提供的函数计算一个新的值。'
- en: 'This last group of *computing* and *merging* methods is rarely used. The most
    popular, by far, are the `V put(K key, V value)` and `V get(Object key)` methods,
    which allow the use of the main `Map` function of storing key-value pairs and
    retrieving the value using the key. The `Set<K> keySet()` method is often used
    for iterating over the map’s key-value pairs, although the `entrySet()` method
    seems a more natural way of doing that. Here is an example:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 这最后一批 *计算* 和 *合并* 方法很少使用。最流行的方法无疑是 `V put(K key, V value)` 和 `V get(Object key)`
    方法，它们允许使用主要的 `Map` 函数来存储键值对，并使用键来检索值。`Set<K> keySet()` 方法通常用于遍历映射的键值对，尽管 `entrySet()`
    方法似乎是一个更自然的方式来完成这个任务。以下是一个例子：
- en: '[PRE85]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: The first of the `for` loops in the preceding code example uses a more widespread
    way to access the key-pair values of a map by iterating over the keys. The second
    `for` loop iterates over the set of entries, which (in our opinion) is a more
    natural way to do it. Notice that the printed-out values are not in the same order
    we have put them in the map. That is because, since Java 9, unmodifiable collections
    (that is, what `of()` factory methods produce) have added randomization to the
    order of `Set` elements, which changes the order of elements between different
    code executions. Such a design was done to make sure a programmer does not rely
    on a certain order of `Set` elements, which is not guaranteed for a set.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码示例中的第一个 `for` 循环使用了一种更广泛的方式来访问映射的键值对，通过遍历键来实现。第二个 `for` 循环遍历了条目集合，这在我们的观点中是一个更自然的方式来完成这个任务。请注意，打印出来的值并不与我们放入映射中的顺序相同。这是因为，从
    Java 9 开始，不可修改的集合（即 `of()` 工厂方法产生的）已经向 `Set` 元素的顺序中添加了随机化，这改变了不同代码执行之间元素的顺序。这样的设计是为了确保程序员不会依赖于
    `Set` 元素的特定顺序，这对于集合来说是不保证的。
- en: Unmodifiable collections
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不可修改的集合
- en: 'Please note that collections produced by `of()` factory methods used to be
    called `Person1` class, as follows:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`of()` 工厂方法产生的集合曾经被称为 `Person1` 类，如下所示：
- en: '[PRE94]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'In the following code snippet, for simplicity, we will create a list with one
    element only and will then try to modify the element:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码片段中，为了简单起见，我们将创建一个只有一个元素的列表，然后尝试修改该元素：
- en: '[PRE108]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: As you can see, although it is not possible to add an element to the list created
    by the `of()` factory method, its element can still be modified if a reference
    to the element exists outside the list.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，尽管无法向由 `of()` 工厂方法创建的列表中添加元素，但如果存在指向该元素的引用，则其元素仍然可以被修改。
- en: Collections utilities
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`Collections` 工具类'
- en: 'There are two classes with static methods handling collections that are very
    popular and helpful, as follows:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个处理集合的静态方法类非常流行且有用，如下所示：
- en: '`java.util.Collections`'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java.util.Collections`'
- en: '`org.apache.commons.collections4.CollectionUtils`'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.apache.commons.collections4.CollectionUtils`'
- en: The fact that the methods are static means they do not depend on the object
    state, so they are also called **stateless methods** or **utility methods**.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法是静态的，意味着它们不依赖于对象状态，因此也被称为 **无状态方法** 或 **实用方法**。
- en: java.util.Collections class
  id: totrans-258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`java.util.Collections` 类'
- en: 'Many methods in the `Collections` class manage collections and analyze, sort,
    and compare them. There are more than 70 of them, so we won’t have a chance to
    talk about all of them. Instead, we are going to look at the ones most often used
    by mainstream application developers, as follows:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '`Collections` 类中的许多方法用于管理集合、分析、排序和比较它们。它们有超过 70 个，所以我们没有机会讨论所有这些。相反，我们将查看主流应用程序开发者最常使用的方法，如下所示：'
- en: '`static copy(List<T> dest, List<T> src)`: This copies elements of the `src`
    list to the `dest` list and preserves the order of elements and their position
    in the list. The `dest` list size has to be equal to, or bigger than, the `src`
    list size, otherwise a runtime exception is raised. Here is an example of this
    method’s usage:'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`static copy(List<T> dest, List<T> src)`: 这个方法将 `src` 列表的元素复制到 `dest` 列表中，并保留元素在列表中的顺序和位置。`dest`
    列表的大小必须等于或大于 `src` 列表的大小，否则会抛出运行时异常。以下是这个方法使用的一个示例：'
- en: '[PRE117]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '`static void sort(List<T> list)`: This sorts the list in order according to
    the `compareTo(T)` method implemented by each element (called `Comparable` interface
    (which requires implementation of the `compareTo(T)` method). In the example that
    follows, we use `List<String>` because the `String` class implements `Comparable`:'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`static void sort(List<T> list)`: 这个方法根据每个元素实现的 `compareTo(T)` 方法（称为 `Comparable`
    接口（要求实现 `compareTo(T)` 方法）对列表进行排序。在下面的示例中，我们使用 `List<String>`，因为 `String` 类实现了
    `Comparable`：'
- en: '[PRE118]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'Note that we could not use the `List.of()` method to create a list because
    the list would be unmodifiable and its order could not be changed. Also, look
    at the resulting order: numbers come first, then capital letters, followed by
    lowercase letters. That is because the `compareTo()` method in the `String` class
    uses code points of the characters to establish the order. Here is the code that
    demonstrates this:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们无法使用 `List.of()` 方法创建列表，因为列表将是不可修改的，其顺序无法更改。此外，看看结果顺序：数字排在前面，然后是大写字母，接着是小写字母。这是因为
    `String` 类中的 `compareTo()` 方法使用字符的代码点来建立顺序。以下是一个演示此功能的代码示例：
- en: '[PRE119]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: As you can see, the order is defined by the value of the code points of the
    characters that compose the string.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，顺序是由组成字符串的字符的代码点值定义的。
- en: '`static void sort(List<T> list, Comparator<T> comparator)`: This sorts the
    order of the list according to the `Comparator` object provided, irrespective
    of whether the list elements implement the `Comparable` interface or not. As an
    example, let’s sort a list that consists of objects in the `Person` class, as
    follows:'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`static void sort(List<T> list, Comparator<T> comparator)`: 这个方法根据提供的 `Comparator`
    对象对列表进行排序，无论列表元素是否实现了 `Comparable` 接口。例如，让我们按照以下方式对一个由 `Person` 类对象组成的列表进行排序：'
- en: '[PRE120]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'And here is the `Comparator` class to sort the list of `Person` objects:'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下是用于对 `Person` 对象列表进行排序的 `Comparator` 类：
- en: '[PRE121]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'Now, we can use the `Person` and `ComparePersons` classes, as follows:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用 `Person` 和 `ComparePersons` 类，如下所示：
- en: '[PRE122]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: As we have mentioned already, there are many more utilities in the `Collections`
    class, so we recommend you look through the related documentation at least once
    and understand all its capabilities.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前提到的，`Collections` 类中还有许多其他实用工具，所以我们建议您至少查阅一次相关文档，并了解其所有功能。
- en: CollectionUtils class
  id: totrans-282
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`CollectionUtils` 类'
- en: The `org.apache.commons.collections4.CollectionUtils` class in the *Apache Commons*
    project contains static stateless methods that complement the methods of the `java.util.Collections`
    class. They help to search, process, and compare Java collections.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 在*Apache Commons*项目中，`org.apache.commons.collections4.CollectionUtils`类包含静态无状态方法，这些方法补充了`java.util.Collections`类的方法。它们有助于搜索、处理和比较Java集合。
- en: 'To use this class, you would need to add the following dependency to the Maven
    `pom.xml` configuration file:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用这个类，您需要在Maven的`pom.xml`配置文件中添加以下依赖项：
- en: '[PRE131]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: 'There are many methods in this class, and more methods will probably be added
    over time. These utilities are created in addition to `Collections` methods, so
    they are more complex and nuanced and do not fit the scope of this book. To give
    you an idea of the methods available in the `CollectionUtils` class, here is a
    brief description of the methods, grouped according to their functionality:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类中有许多方法，并且可能随着时间的推移添加更多方法。这些实用程序是在`Collections`方法之外创建的，因此它们更加复杂和微妙，不适合本书的范围。为了给您一个关于`CollectionUtils`类中可用方法的概述，以下是按功能分组的方法的简要描述：
- en: Methods that retrieve an element from a collection
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从集合中检索元素的方法
- en: Methods that add an element or a group of elements to a collection
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向集合中添加元素或一组元素的方法
- en: Methods that merge `Iterable` elements into a collection
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`Iterable`元素合并到集合中的方法
- en: Methods that remove or retain elements with or without criteria
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据条件移除或保留元素的方法
- en: Methods that compare two collections
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比较两个集合的方法
- en: Methods that transform a collection
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转换集合的方法
- en: Methods that select from, and filter, a collection
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从集合中选择并过滤的方法
- en: Methods that generate the union, intersection, or difference of two collections
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成两个集合的并集、交集或差集的方法
- en: Methods that create an immutable empty collection
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建不可变空集合的方法
- en: Methods that check collection size and emptiness
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查集合大小和空的方法
- en: A method that reverses an array
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反转数组的方法
- en: This last method should probably belong to the utility class that handles arrays,
    and that is what we are going to discuss now.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个方法可能属于处理数组的实用程序类，这正是我们现在要讨论的。
- en: Arrays utilities
  id: totrans-303
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数组实用程序
- en: 'There are two classes with static methods handling collections that are very
    popular and helpful, as follows:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个类提供了处理集合的静态方法，它们非常流行且非常有用，如下所示：
- en: '`java.util.Arrays`'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java.util.Arrays`'
- en: '`org.apache.commons.lang3.ArrayUtils`'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.apache.commons.lang3.ArrayUtils`'
- en: We will briefly review each of them.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将简要回顾每一个。
- en: java.util.Arrays class
  id: totrans-308
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: java.util.Arrays类
- en: 'We have already used the `java.util.Arrays` class several times. It is the
    primary utility class for array management. This utility class used to be very
    popular because of the `asList(T...a)` method. It was the most compact way of
    creating and initializing a collection and is shown in the following snippet:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经多次使用了`java.util.Arrays`类。它是数组管理的主要实用程序类。这个实用程序类曾经因为`asList(T...a)`方法而非常流行。这是创建和初始化集合最紧凑的方式，如下代码片段所示：
- en: '[PRE136]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: It is still a popular way of creating a modifiable list—we used it, too. However,
    after a `List.of()` factory method was introduced, the `Arrays` class declined
    substantially.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 这仍然是一种创建可修改列表的流行方式——我们也使用了它。然而，在引入了`List.of()`工厂方法之后，`Arrays`类的使用大幅下降。
- en: 'Nevertheless, if you need to manage arrays, then the `Arrays` class may be
    a big help. It contains more than 160 methods, and most of them are overloaded
    with different parameters and array types. If we group them by the method name,
    there will be 21 groups, and if we further group them by functionality, only the
    following 10 groups will cover all the `Arrays` class functionality:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果您需要管理数组，那么`Arrays`类可能非常有帮助。它包含超过160个方法，其中大多数方法都通过不同的参数和数组类型进行了重载。如果我们按方法名称分组，将会有21组，如果我们进一步按功能分组，以下10组将涵盖所有`Arrays`类的功能：
- en: '`asList()`: This creates an `ArrayList` object based on the provided array
    or comma-separated list of parameters.'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`asList()`: 根据提供的数组或逗号分隔的参数列表创建一个`ArrayList`对象。'
- en: '`binarySearch()`: This searches an array or only a specified part of it (according
    to the range of indices).'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`binarySearch()`：根据索引范围搜索数组或其指定部分。'
- en: '`compare()`, `mismatch()`, `equals()`, and `deepEquals()`: These compare two
    arrays or their elements (according to the range of indices).'
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`compare()`、`mismatch()`、`equals()`和`deepEquals()`：这些方法比较两个数组或它们的元素（根据索引范围）。'
- en: '`copyOf()` and `copyOfRange()`: This copies all arrays or only a specified
    (according to the range of indices) part of them.'
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`copyOf()` 和 `copyOfRange()`: 这复制所有数组或仅复制指定（根据索引范围）的部分。'
- en: '`hashcode()` and `deepHashCode()`: This generates a hash code value based on
    the array provided.'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hashcode()` 和 `deepHashCode()`: 这基于提供的数组生成哈希码值。'
- en: '`toString()` and `deepToString()`: This creates a `String` representation of
    an array.'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`toString()` 和 `deepToString()`: 这创建数组的 `String` 表示形式。'
- en: '`fill()`, `setAll()`, `parallelPrefix()`, and `parallelSetAll()`: This sets
    a value (fixed or generated by the function provided) for every element of an
    array or those specified according to a range of indices.'
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fill()`, `setAll()`, `parallelPrefix()`, 和 `parallelSetAll()`: 这为数组或指定范围内的数组元素设置一个值（固定或由提供的函数生成）。'
- en: '`sort()` and `parallelSort()`: This sorts elements of an array or only part
    of it (specified according to a range of indices).'
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sort()` 和 `parallelSort()`: 这对数组或其一部分（根据索引范围指定）的元素进行排序。'
- en: '`splititerator()`: This returns a `Splititerator` object for parallel processing
    of an array or part of it (specified according to a range of indices).'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`splititerator()`: 这返回一个 `Splititerator` 对象，用于并行处理数组或其一部分（根据索引范围指定）。'
- en: '`stream()`: This generates a stream of array elements or some of them (specified
    according to a range of indices); see [*Chapter 14*](B18388_14_ePub.xhtml#_idTextAnchor296),
    *Java Standard Streams**.*'
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stream()`: 这生成数组元素或其中一些元素的流（根据索引范围指定）；参见 [*第 14 章*](B18388_14_ePub.xhtml#_idTextAnchor296)，*Java
    标准流*。'
- en: 'All of these methods are helpful, but we would like to draw your attention
    to the `equals(a1, a2)` and `deepEquals(a1, a2)` methods. They are particularly
    helpful for array comparison because an `array` object cannot implement an `equals()`
    custom method and uses the implementation of the `Object` class instead (which
    compares only references). The `equals(a1,` `a2)` and `deepEquals(a1, a2)` methods
    allow a comparison of not just `a1` and `a2` references, but use the `equals()`
    method to compare elements as well. Here is a code example to demonstrate how
    these methods work:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些方法都很有用，但我们想引起您的注意，特别是 `equals(a1, a2)` 和 `deepEquals(a1, a2)` 方法。它们在数组比较方面特别有用，因为数组对象不能实现自定义的
    `equals()` 方法，而是使用 `Object` 类的实现（仅比较引用）。`equals(a1,` `a2)` 和 `deepEquals(a1, a2)`
    方法允许比较不仅 `a1` 和 `a2` 引用，而且还使用 `equals()` 方法来比较元素。以下是一个代码示例，演示这些方法的工作原理：
- en: '[PRE138]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: As you can see, `Arrays.deepEquals()` returns `true` every time two equal arrays
    are compared when every element of one array equals the element of another array
    in the same position, while the `Arrays.equals()` method does the same, but for
    **one-dimensional** (**1D**) arrays only.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`Arrays.deepEquals()` 在比较两个数组时，每当一个数组中的每个元素等于另一个数组中相同位置的元素时，都会返回 `true`，而
    `Arrays.equals()` 方法执行相同的操作，但仅适用于 **一维** （**1D**）数组。
- en: ArrayUtils class
  id: totrans-340
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ArrayUtils 类
- en: 'The `org.apache.commons.lang3.ArrayUtils` class complements the `java.util.Arrays`
    class by adding new methods to the array managing the toolkit and the ability
    to handle `null` in cases when, otherwise, `NullPointerException` could be thrown.
    To use this class, you would need to add the following dependency to the Maven
    `pom.xml` configuration file:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '`org.apache.commons.lang3.ArrayUtils` 类通过向数组管理工具添加新方法，并处理在可能抛出 `NullPointerException`
    的情况下能够处理 `null`，从而补充了 `java.util.Arrays` 类。要使用此类，您需要将以下依赖项添加到 Maven 的 `pom.xml`
    配置文件中：'
- en: '[PRE152]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: 'The `ArrayUtils` class has around 300 overloaded methods that can be collected
    in the following 12 groups:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '`ArrayUtils` 类大约有 300 个重载方法，可以归纳为以下 12 组：'
- en: '`add()`, `addAll()`, and `insert()`: These add elements to an array.'
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`add()`, `addAll()`, 和 `insert()`: 这些向数组添加元素。'
- en: '`clone()`: This clones an array, similar to the `copyOf()` method of the `Arrays`
    class and the `arraycopy()` method of `java.lang.System.`'
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clone()`: 这克隆数组，类似于 `Arrays` 类的 `copyOf()` 方法以及 `java.lang.System` 的 `arraycopy()`
    方法。'
- en: '`getLength()`: This returns an array length or `0` when the array itself is
    `null.`'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getLength()`: 这返回数组长度或 `0`，当数组本身为 `null` 时。'
- en: '`hashCode()`: This calculates the hash value of an array, including nested
    arrays.'
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hashCode()`: 这计算数组的哈希值，包括嵌套数组。'
- en: '`contains()`, `indexOf()`, and `lastIndexOf()`: These search an array.'
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`contains()`, `indexOf()`, 和 `lastIndexOf()`: 这些用于搜索数组。'
- en: '`isSorted()`, `isEmpty`, and `isNotEmpty()`: These check an array and handle
    `null.`'
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isSorted()`, `isEmpty`, 和 `isNotEmpty()`: 这些检查数组并处理 `null`。'
- en: '`isSameLength()` and `isSameType()`: These compare arrays.'
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isSameLength()` 和 `isSameType()`: 这些用于比较数组。'
- en: '`nullToEmpty()`: This converts a `null` array to an empty one.'
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nullToEmpty()`: 这将 `null` 数组转换为空数组。'
- en: '`remove()`, `removeAll()`, `removeElement()`, `removeElements()`, and `removeAllOccurances()`:
    These remove certain or all elements.'
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`remove()`, `removeAll()`, `removeElement()`, `removeElements()`, 和 `removeAllOccurances()`:
    这些方法会移除某些或所有元素。'
- en: '`reverse()`, `shift()`, `shuffle()`, and `swap()`: These change the order of
    array elements.'
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reverse()`, `shift()`, `shuffle()`, 和 `swap()`: 这些方法会改变数组元素的顺序。'
- en: '`subarray()`: This extracts part of an array according to a range of indices.'
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`subarray()`: 这个方法根据索引范围提取数组的一部分。'
- en: '`toMap()`, `toObject()`, `toPrimitive()`, `toString()`, and `toStringArray()`:
    These convert an array to another type and handle `null` values.'
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`toMap()`, `toObject()`, `toPrimitive()`, `toString()`, 和 `toStringArray()`:
    这些方法将数组转换为其他类型并处理 `null` 值。'
- en: Objects utilities
  id: totrans-360
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对象实用工具
- en: 'The following two utilities are described in this section:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中描述了以下两个实用工具：
- en: '`java.util.Objects`'
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java.util.Objects`'
- en: '`org.apache.commons.lang3.ObjectUtils`'
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.apache.commons.lang3.ObjectUtils`'
- en: They are especially useful during class creation, so we will concentrate largely
    on methods related to this task.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 它们在类创建期间特别有用，因此我们将主要关注与此任务相关的这些方法。
- en: java.util.Objects class
  id: totrans-365
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: java.util.Objects 类
- en: 'The `Objects` class has only 17 methods that are all static. Let’s look at
    some of them while applying them to the `Person` class. Let’s assume this class
    will be an element of a collection, which means it has to implement the `equals()`
    and `hashCode()` methods. The code is illustrated in the following snippet:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '`Objects` 类只有 17 个方法，它们都是静态的。让我们在将它们应用于 `Person` 类的同时看看其中的一些方法。假设这个类将是集合的一个元素，这意味着它必须实现
    `equals()` 和 `hashCode()` 方法。代码如下所示：'
- en: '[PRE157]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '[PRE162]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '[PRE174]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '[PRE176]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: Notice that we do not check the `name` property for `null` because `Object.equals()`
    does not break when any of the parameters is `null`. It just does the job of comparing
    objects. If only one of them is `null`, it returns `false`. If both are `null`,
    it returns `true`.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们不会检查 `name` 属性是否为 `null`，因为 `Object.equals()` 在任何参数为 `null` 时不会中断，它只是执行比较对象的工作。如果只有一个参数为
    `null`，则返回 `false`。如果两个都是 `null`，则返回 `true`。
- en: 'Using `Object.equals()` is a safe way to implement the `equals()` method; however,
    if you need to compare objects that may be arrays, it is better to use the `Objects.deepEquals()`
    method because it not only handles `null`, as the `Object.equals()` method does,
    but also compares values of all array elements, even if the array is multidimensional,
    as illustrated here:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `Object.equals()` 是实现 `equals()` 方法的安全方式；然而，如果你需要比较可能为数组的对象，最好使用 `Objects.deepEquals()`
    方法，因为它不仅处理 `null`，就像 `Object.equals()` 方法一样，而且还比较所有数组元素的值，即使数组是多维的，如下所示：
- en: '[PRE180]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '[PRE181]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '[PRE182]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '[PRE183]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '[PRE184]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '[PRE185]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '[PRE187]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '[PRE188]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '[PRE189]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '[PRE190]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: The `Objects.hash()` method handles `null` values too. One important thing to
    remember is that the list of properties compared in the `equals()` method has
    to match the list of properties passed into `Objects.hash()` as parameters. Otherwise,
    two equal `Person` objects will have different hash values, which makes hash-based
    collections work incorrectly.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '`Objects.hash()` 方法也处理 `null` 值。需要记住的一个重要事项是，`equals()` 方法中比较的属性列表必须与传递给 `Objects.hash()`
    作为参数的属性列表相匹配。否则，两个相等的 `Person` 对象将具有不同的哈希值，这会使基于哈希的集合工作不正确。'
- en: 'Another thing worth noticing is that there is another hash-related `Objects.hashCode()`
    method that accepts only one parameter, but the value it generates is not equal
    to the value generated by `Objects.hash()` with only one parameter. Observe the
    following, for example:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个值得注意的事情是，还有一个只接受一个参数的与哈希相关的 `Objects.hashCode()` 方法，但它生成的值不等于只接受一个参数的 `Objects.hash()`
    生成的值。例如，观察以下内容：
- en: '[PRE191]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '[PRE192]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '[PRE193]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '[PRE194]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: To avoid this caveat, always use `Objects.hash()`.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这个注意事项，始终使用 `Objects.hash()`。
- en: 'Another potential source of confusion is demonstrated in the following code
    snippet:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个潜在的混淆来源如下代码片段所示：
- en: '[PRE195]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '[PRE196]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '[PRE197]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '[PRE198]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: As you can see, the `Objects.hashCode()` method generates the same hash value
    for `null` and `0`, which can be problematic for some algorithms based on the
    hash value.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，`Objects.hashCode()` 方法为 `null` 和 `0` 生成相同的哈希值，这可能会对基于哈希值的某些算法造成问题。
- en: '`static <T> int compare (T a, T b, Comparator<T> c)` is another popular method
    that returns `0` (if the arguments are equal); otherwise, it returns the result
    of `c.compare(a, b)`. It is very useful for implementing the `Comparable` interface
    (establishing a natural order for custom object sorting). Observe the following,
    for example:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: '`static <T> int compare (T a, T b, Comparator<T> c)` 是另一个流行的返回 `0`（如果参数相等）的方法；否则，它返回
    `c.compare(a, b)` 的结果。这对于实现 `Comparable` 接口（为自定义对象排序建立自然顺序）非常有用。例如，观察以下内容：'
- en: '[PRE199]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: '[PRE200]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '[PRE201]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: '[PRE202]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '[PRE203]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '[PRE204]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '[PRE205]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: '[PRE207]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '[PRE208]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '[PRE209]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '[PRE210]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: '[PRE211]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: '[PRE212]'
  id: totrans-430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '[PRE213]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '[PRE214]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '[PRE215]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '[PRE216]'
  id: totrans-434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: '[PRE217]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '[PRE218]'
  id: totrans-436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: This way, you can easily change the sorting algorithm by setting the `Comparator.reverseOrder()`
    value or by adding `Comparator.nullFirst()` or `Comparator.nullLast()`.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，您可以通过设置 `Comparator.reverseOrder()` 的值或添加 `Comparator.nullFirst()` 或 `Comparator.nullLast()`
    来轻松更改排序算法。
- en: 'Also, the `Comparator` implementation we used in the previous section can be
    made more flexible by using the `Objects.compare()` method, as follows:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们之前章节中使用的 `Comparator` 实现可以通过使用 `Objects.compare()` 方法变得更加灵活，如下所示：
- en: '[PRE219]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: '[PRE220]'
  id: totrans-440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: '[PRE221]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: '[PRE222]'
  id: totrans-442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: '[PRE223]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: '[PRE224]'
  id: totrans-444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: '[PRE225]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: '[PRE226]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: '[PRE227]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: '[PRE228]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE228]'
- en: '[PRE229]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: 'Finally, the last two methods of the `Objects` class that we are going to discuss
    are methods that generate a string representation of an object. They come in handy
    when you need to call a `toString()` method on an object but are not sure whether
    the object reference is `null`. Observe the following, for example:'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将讨论 `Objects` 类的最后两个方法，这些方法是生成对象字符串表示的方法。当您需要对对象调用 `toString()` 方法但不确定对象引用是否为
    `null` 时，它们非常有用。例如，观察以下内容：
- en: '[PRE230]'
  id: totrans-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: '[PRE231]'
  id: totrans-452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE231]'
- en: '[PRE232]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE232]'
- en: '[PRE233]'
  id: totrans-454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: 'In the preceding example, we know the exact value of each element; however,
    imagine a scenario where the list is passed into the method as a parameter. Then,
    we are forced to write something like this:'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们知道每个元素的确切值；然而，想象一下这样的场景：列表作为参数传递给方法。然后，我们被迫编写如下内容：
- en: '[PRE234]'
  id: totrans-456
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: '[PRE235]'
  id: totrans-457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE235]'
- en: '[PRE236]'
  id: totrans-458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE236]'
- en: '[PRE237]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: 'This doesn’t seem to be a big deal. But after writing such code a dozen times,
    a programmer naturally thinks about some kind of utility method that does all
    of that, and that is when the following two methods of the `Objects` class help:'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 这似乎不是什么大问题。但是，编写了十几次这样的代码后，程序员自然会考虑某种类型的实用程序方法，它能够完成所有这些，这就是 `Objects` 类的以下两个方法帮助的时候：
- en: '`static String toString(Object o)`: This returns the result of calling `toString()`
    on the parameter when it is not `null` and returns `null` when the parameter value
    is `null`.'
  id: totrans-461
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`static String toString(Object o)`：当参数不是 `null` 时，返回调用 `toString()` 的结果，当参数值为
    `null` 时返回 `null`。'
- en: '`static String toString(Object o, String nullDefault)`: This returns the result
    of calling `toString()` on the first parameter when it is not `null` and returns
    the second `nullDefault` parameter value when the first parameter value is `null`.'
  id: totrans-462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`static String toString(Object o, String nullDefault)`：当第一个参数不是 `null` 时，返回调用第一个参数
    `toString()` 的结果，当第一个参数值为 `null` 时返回第二个 `nullDefault` 参数值。'
- en: 'The following code snippet demonstrates these two methods:'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段演示了这两个方法：
- en: '[PRE238]'
  id: totrans-464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE238]'
- en: '[PRE239]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: '[PRE240]'
  id: totrans-466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE240]'
- en: '[PRE241]'
  id: totrans-467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE241]'
- en: '[PRE242]'
  id: totrans-468
  prefs: []
  type: TYPE_PRE
  zh: '[PRE242]'
- en: '[PRE243]'
  id: totrans-469
  prefs: []
  type: TYPE_PRE
  zh: '[PRE243]'
- en: '[PRE244]'
  id: totrans-470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE244]'
- en: '[PRE245]'
  id: totrans-471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE245]'
- en: '[PRE246]'
  id: totrans-472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE246]'
- en: '[PRE247]'
  id: totrans-473
  prefs: []
  type: TYPE_PRE
  zh: '[PRE247]'
- en: As of the time of writing, the `Objects` class has 17 methods. We recommend
    you become familiar with them so as to avoid writing your own utilities in the
    event that the same utility already exists.
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 到写作时为止，`Objects` 类有 17 个方法。我们建议您熟悉它们，以便在存在相同实用程序的情况下避免编写自己的实用程序。
- en: ObjectUtils class
  id: totrans-475
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`ObjectUtils` 类'
- en: 'The last statement of the previous section applies to the `org.apache.commons.lang3.ObjectUtils`
    class of the `Apache Commons` library that complements the methods of the `java.util.Objects`
    class described in the preceding section. The scope of this book and its allotted
    size does not allow for a detailed review of all the methods under the `ObjectUtils`
    class, so we will describe them briefly in groups according to their related functionality.
    To use this class, you would need to add the following dependency to the Maven
    `pom.xml` configuration file:'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 前一节中的最后一条语句适用于 `Apache Commons` 库中的 `org.apache.commons.lang3.ObjectUtils` 类，该库补充了前一节中描述的
    `java.util.Objects` 类的方法。本书的范围和分配的大小不允许对 `ObjectUtils` 类下的所有方法进行详细审查，因此我们将根据它们的相关功能将它们简要地分组描述。要使用此类，您需要在
    Maven 的 `pom.xml` 配置文件中添加以下依赖项：
- en: '[PRE248]'
  id: totrans-477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE248]'
- en: '[PRE249]'
  id: totrans-478
  prefs: []
  type: TYPE_PRE
  zh: '[PRE249]'
- en: '[PRE250]'
  id: totrans-479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE250]'
- en: '[PRE251]'
  id: totrans-480
  prefs: []
  type: TYPE_PRE
  zh: '[PRE251]'
- en: '[PRE252]'
  id: totrans-481
  prefs: []
  type: TYPE_PRE
  zh: '[PRE252]'
- en: 'All the methods of the `ObjectUtils` class can be organized into seven groups,
    as follows:'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: '`ObjectUtils` 类的所有方法可以分为七个组，如下所示：'
- en: Object cloning methods
  id: totrans-483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象克隆方法
- en: Methods that support a comparison of two objects
  id: totrans-484
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持比较两个对象的方法
- en: The `notEqual()` method, which compares two objects for inequality, where either
    one or both objects may be `null`
  id: totrans-485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`notEqual()` 方法，用于比较两个对象的不相等性，其中一个或两个对象可能是 `null`'
- en: Several `identityToString()` methods that generate a `String` representation
    of the provided object as if produced by `toString()`, which is a default method
    of the `Object` base class and, optionally, append it to another object
  id: totrans-486
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 几个 `identityToString()` 方法，它们生成提供的对象的 `String` 表示形式，就像由 `Object` 基类的默认方法生成一样，并可选地将其附加到另一个对象上。
- en: The `allNotNull()` and `anyNotNull()` methods, which analyze an array of objects
    for `null`
  id: totrans-487
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`allNotNull()` 和 `anyNotNull()` 方法，用于分析对象数组中的 `null`'
- en: The `firstNonNull()` and `defaultIfNull()` methods, which analyze an array of
    objects and return the first not-`null` object or default value
  id: totrans-488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `max()`, `min()`, `median()`, and `mode()` methods, which analyze an array
    of objects and return the one that corresponds to the method name
  id: totrans-489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The java.time package
  id: totrans-490
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many classes in the `java.time` package and its sub-packages. They
    were introduced as a replacement for other (older packages) that handled date
    and time. The new classes are thread-safe (hence, better suited for multithreaded
    processing), and what is also important is that they are more consistently designed
    and easier to understand. Also, the new implementation follows **International
    Organization for Standardization** (**ISO**) standards as regards date and time
    formats, but allows any other custom format to be used as well.
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
- en: 'We will describe the following five main classes and demonstrate how to use
    them:'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
- en: '`java.time.LocalDate`'
  id: totrans-493
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`java.time.LocalTime`'
  id: totrans-494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`java.time.LocalDateTime`'
  id: totrans-495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`java.time.Period`'
  id: totrans-496
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`java.time.Duration`'
  id: totrans-497
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All these and other classes of the `java.time` package, as well as its sub-packages,
    are rich in various functionality that covers all practical cases. But we are
    not going to discuss all of them; we will just introduce the basics and the most
    popular use cases.
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
- en: LocalDate class
  id: totrans-499
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `LocalDate` class does not carry time. It represents a date in *ISO 8601*
    format (`yyyy-MM-dd`) and is shown in the following code snippet:'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE253]'
  id: totrans-501
  prefs: []
  type: TYPE_PRE
  zh: '[PRE253]'
- en: '[PRE254]'
  id: totrans-502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE254]'
- en: 'That is the current date in this location at the time of writing. The value
    was picked up from the computer clock. Similarly, you can get the current date
    in any other time zone using that static `now(ZoneId zone)` method. A `ZoneId`
    object can be constructed using the static `ZoneId.of(String zoneId)` method,
    where `String zoneId` is any of the string values returned by the `ZoneId.getAvailableZoneIds()`
    method, as illustrated in the following code snippet:'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE255]'
  id: totrans-504
  prefs: []
  type: TYPE_PRE
  zh: '[PRE255]'
- en: '[PRE256]'
  id: totrans-505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE256]'
- en: '[PRE257]'
  id: totrans-506
  prefs: []
  type: TYPE_PRE
  zh: '[PRE257]'
- en: '[PRE258]'
  id: totrans-507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE258]'
- en: 'The preceding code prints almost 600 time zone **identifiers** (**IDs**). Here
    are a few of them:'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE259]'
  id: totrans-509
  prefs: []
  type: TYPE_PRE
  zh: '[PRE259]'
- en: '[PRE260]'
  id: totrans-510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE260]'
- en: '[PRE261]'
  id: totrans-511
  prefs: []
  type: TYPE_PRE
  zh: '[PRE261]'
- en: '[PRE262]'
  id: totrans-512
  prefs: []
  type: TYPE_PRE
  zh: '[PRE262]'
- en: '[PRE263]'
  id: totrans-513
  prefs: []
  type: TYPE_PRE
  zh: '[PRE263]'
- en: '[PRE264]'
  id: totrans-514
  prefs: []
  type: TYPE_PRE
  zh: '[PRE264]'
- en: '[PRE265]'
  id: totrans-515
  prefs: []
  type: TYPE_PRE
  zh: '[PRE265]'
- en: '[PRE266]'
  id: totrans-516
  prefs: []
  type: TYPE_PRE
  zh: '[PRE266]'
- en: '[PRE267]'
  id: totrans-517
  prefs: []
  type: TYPE_PRE
  zh: '[PRE267]'
- en: '[PRE268]'
  id: totrans-518
  prefs: []
  type: TYPE_PRE
  zh: '[PRE268]'
- en: '[PRE269]'
  id: totrans-519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE269]'
- en: '[PRE270]'
  id: totrans-520
  prefs: []
  type: TYPE_PRE
  zh: '[PRE270]'
- en: '[PRE271]'
  id: totrans-521
  prefs: []
  type: TYPE_PRE
  zh: '[PRE271]'
- en: '[PRE272]'
  id: totrans-522
  prefs: []
  type: TYPE_PRE
  zh: '[PRE272]'
- en: '[PRE273]'
  id: totrans-523
  prefs: []
  type: TYPE_PRE
  zh: '[PRE273]'
- en: '[PRE274]'
  id: totrans-524
  prefs: []
  type: TYPE_PRE
  zh: '[PRE274]'
- en: '[PRE275]'
  id: totrans-525
  prefs: []
  type: TYPE_PRE
  zh: '[PRE275]'
- en: '[PRE276]'
  id: totrans-526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE276]'
- en: '[PRE277]'
  id: totrans-527
  prefs: []
  type: TYPE_PRE
  zh: '[PRE277]'
- en: '[PRE278]'
  id: totrans-528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE278]'
- en: '[PRE279]'
  id: totrans-529
  prefs: []
  type: TYPE_PRE
  zh: '[PRE279]'
- en: '[PRE280]'
  id: totrans-530
  prefs: []
  type: TYPE_PRE
  zh: '[PRE280]'
- en: '[PRE281]'
  id: totrans-531
  prefs: []
  type: TYPE_PRE
  zh: '[PRE281]'
- en: '[PRE282]'
  id: totrans-532
  prefs: []
  type: TYPE_PRE
  zh: '[PRE282]'
- en: '[PRE283]'
  id: totrans-533
  prefs: []
  type: TYPE_PRE
  zh: '[PRE283]'
- en: '[PRE284]'
  id: totrans-534
  prefs: []
  type: TYPE_PRE
  zh: '[PRE284]'
- en: '[PRE285]'
  id: totrans-535
  prefs: []
  type: TYPE_PRE
  zh: '[PRE285]'
- en: '[PRE286]'
  id: totrans-536
  prefs: []
  type: TYPE_PRE
  zh: '[PRE286]'
- en: '[PRE287]'
  id: totrans-537
  prefs: []
  type: TYPE_PRE
  zh: '[PRE287]'
- en: '[PRE288]'
  id: totrans-538
  prefs: []
  type: TYPE_PRE
  zh: '[PRE288]'
- en: '[PRE289]'
  id: totrans-539
  prefs: []
  type: TYPE_PRE
  zh: '[PRE289]'
- en: '[PRE290]'
  id: totrans-540
  prefs: []
  type: TYPE_PRE
  zh: '[PRE290]'
- en: 'Let’s try to use `"Asia/Tokyo"`, for example, as follows:'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE291]'
  id: totrans-542
  prefs: []
  type: TYPE_PRE
  zh: '[PRE291]'
- en: '[PRE292]'
  id: totrans-543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE292]'
- en: '[PRE293]'
  id: totrans-544
  prefs: []
  type: TYPE_PRE
  zh: '[PRE293]'
- en: 'A `LocalDate` object can represent any date in the past, or in the future too,
    using the following methods:'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
- en: '`LocalDate parse(CharSequence text)`: This constructs an object from a string
    in *ISO 8601* format (`yyyy-MM-dd`).'
  id: totrans-546
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LocalDate parse(CharSequence text, DateTimeFormatter formatter)`: This constructs
    an object from a string in a format specified by the `DateTimeFormatter` object
    that has a rich system of patterns and many predefined formats as well—here are
    a few of them:'
  id: totrans-547
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BASIC_ISO_DATE`—for example, `20111203`'
  id: totrans-548
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ISO_LOCAL_DATE ISO`—for example, `2011-12-03`'
  id: totrans-549
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ISO_OFFSET_DATE`—for example, `2011-12-03+01:00`'
  id: totrans-550
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ISO_DATE`—for example, `2011-12-03+01:00; 2011-12-03`'
  id: totrans-551
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ISO_LOCAL_TIME`—for example, `10:15:30`'
  id: totrans-552
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ISO_OFFSET_TIME`—for example, `10:15:30+01:00`'
  id: totrans-553
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ISO_TIME`—for example, `10:15:30+01:00; 10:15:30`'
  id: totrans-554
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ISO_LOCAL_DATE_TIME`—for example, `2011-12-03T10:15:30`'
  id: totrans-555
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LocalDate of(int year, int month, int dayOfMonth)`: This constructs an object
    from a year, month, and day.'
  id: totrans-556
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LocalDate of(int year, int month, int dayOfMonth)`: 从年、月和日构建一个对象。'
- en: '`LocalDate of(int year, Month, int dayOfMonth)`: This constructs an object
    from a year, month (enum constant), and day.'
  id: totrans-557
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LocalDate of(int year, Month, int dayOfMonth)`: 从年、月（枚举常量）和日构建一个对象。'
- en: '`LocalDate ofYearDay(int year, int dayOfYear)`: This constructs an object from
    a year and day-of-year.'
  id: totrans-558
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LocalDate ofYearDay(int year, int dayOfYear)`: 从年和年内的日构建一个对象。'
- en: 'The following code snippet demonstrates the methods listed in the preceding
    bullets:'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段演示了前面提到的列表中的方法：
- en: '[PRE294]'
  id: totrans-560
  prefs: []
  type: TYPE_PRE
  zh: '[PRE294]'
- en: '[PRE295]'
  id: totrans-561
  prefs: []
  type: TYPE_PRE
  zh: '[PRE295]'
- en: '[PRE296]'
  id: totrans-562
  prefs: []
  type: TYPE_PRE
  zh: '[PRE296]'
- en: '[PRE297]'
  id: totrans-563
  prefs: []
  type: TYPE_PRE
  zh: '[PRE297]'
- en: '[PRE298]'
  id: totrans-564
  prefs: []
  type: TYPE_PRE
  zh: '[PRE298]'
- en: '[PRE299]'
  id: totrans-565
  prefs: []
  type: TYPE_PRE
  zh: '[PRE299]'
- en: '[PRE300]'
  id: totrans-566
  prefs: []
  type: TYPE_PRE
  zh: '[PRE300]'
- en: '[PRE301]'
  id: totrans-567
  prefs: []
  type: TYPE_PRE
  zh: '[PRE301]'
- en: '[PRE302]'
  id: totrans-568
  prefs: []
  type: TYPE_PRE
  zh: '[PRE302]'
- en: '[PRE303]'
  id: totrans-569
  prefs: []
  type: TYPE_PRE
  zh: '[PRE303]'
- en: '[PRE304]'
  id: totrans-570
  prefs: []
  type: TYPE_PRE
  zh: '[PRE304]'
- en: '[PRE305]'
  id: totrans-571
  prefs: []
  type: TYPE_PRE
  zh: '[PRE305]'
- en: '[PRE306]'
  id: totrans-572
  prefs: []
  type: TYPE_PRE
  zh: '[PRE306]'
- en: '[PRE307]'
  id: totrans-573
  prefs: []
  type: TYPE_PRE
  zh: '[PRE307]'
- en: '[PRE308]'
  id: totrans-574
  prefs: []
  type: TYPE_PRE
  zh: '[PRE308]'
- en: 'A `LocalDate` object can provide various values, as illustrated in the following
    code snippet:'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: '`LocalDate`对象可以提供各种值，如下面的代码片段所示：'
- en: '[PRE309]'
  id: totrans-576
  prefs: []
  type: TYPE_PRE
  zh: '[PRE309]'
- en: '[PRE310]'
  id: totrans-577
  prefs: []
  type: TYPE_PRE
  zh: '[PRE310]'
- en: '[PRE311]'
  id: totrans-578
  prefs: []
  type: TYPE_PRE
  zh: '[PRE311]'
- en: '[PRE312]'
  id: totrans-579
  prefs: []
  type: TYPE_PRE
  zh: '[PRE312]'
- en: '[PRE313]'
  id: totrans-580
  prefs: []
  type: TYPE_PRE
  zh: '[PRE313]'
- en: '[PRE314]'
  id: totrans-581
  prefs: []
  type: TYPE_PRE
  zh: '[PRE314]'
- en: '[PRE315]'
  id: totrans-582
  prefs: []
  type: TYPE_PRE
  zh: '[PRE315]'
- en: '[PRE316]'
  id: totrans-583
  prefs: []
  type: TYPE_PRE
  zh: '[PRE316]'
- en: '[PRE317]'
  id: totrans-584
  prefs: []
  type: TYPE_PRE
  zh: '[PRE317]'
- en: '[PRE318]'
  id: totrans-585
  prefs: []
  type: TYPE_PRE
  zh: '[PRE318]'
- en: 'A `LocalDate` object can be modified, like this:'
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`LocalDate`对象可以被修改，如下所示：
- en: '[PRE319]'
  id: totrans-587
  prefs: []
  type: TYPE_PRE
  zh: '[PRE319]'
- en: '[PRE320]'
  id: totrans-588
  prefs: []
  type: TYPE_PRE
  zh: '[PRE320]'
- en: '[PRE321]'
  id: totrans-589
  prefs: []
  type: TYPE_PRE
  zh: '[PRE321]'
- en: '[PRE322]'
  id: totrans-590
  prefs: []
  type: TYPE_PRE
  zh: '[PRE322]'
- en: '[PRE323]'
  id: totrans-591
  prefs: []
  type: TYPE_PRE
  zh: '[PRE323]'
- en: '[PRE324]'
  id: totrans-592
  prefs: []
  type: TYPE_PRE
  zh: '[PRE324]'
- en: '[PRE325]'
  id: totrans-593
  prefs: []
  type: TYPE_PRE
  zh: '[PRE325]'
- en: '[PRE326]'
  id: totrans-594
  prefs: []
  type: TYPE_PRE
  zh: '[PRE326]'
- en: '[PRE327]'
  id: totrans-595
  prefs: []
  type: TYPE_PRE
  zh: '[PRE327]'
- en: '[PRE328]'
  id: totrans-596
  prefs: []
  type: TYPE_PRE
  zh: '[PRE328]'
- en: '[PRE329]'
  id: totrans-597
  prefs: []
  type: TYPE_PRE
  zh: '[PRE329]'
- en: 'A `LocalDate` object can be compared, like this:'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`LocalDate`对象可以进行比较，如下所示：
- en: '[PRE330]'
  id: totrans-599
  prefs: []
  type: TYPE_PRE
  zh: '[PRE330]'
- en: '[PRE331]'
  id: totrans-600
  prefs: []
  type: TYPE_PRE
  zh: '[PRE331]'
- en: '[PRE332]'
  id: totrans-601
  prefs: []
  type: TYPE_PRE
  zh: '[PRE332]'
- en: '[PRE333]'
  id: totrans-602
  prefs: []
  type: TYPE_PRE
  zh: '[PRE333]'
- en: There are many other helpful methods in the `LocalDate` class. If you have to
    work with dates, we recommend that you read the `java.time` package and its sub-packages.
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: '`LocalDate`类中有许多其他有用的方法。如果您必须处理日期，我们建议您阅读`java.time`包及其子包。'
- en: LocalTime class
  id: totrans-604
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LocalTime类
- en: 'The `LocalTime` class contains time without a date. It has similar methods
    to the methods of the `LocalDate` class. Here is how an object of the `LocalTime`
    class can be created:'
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: '`LocalTime`类包含没有日期的时间。它具有与`LocalDate`类类似的方法。以下是如何创建`LocalTime`类对象的示例：'
- en: '[PRE334]'
  id: totrans-606
  prefs: []
  type: TYPE_PRE
  zh: '[PRE334]'
- en: '[PRE335]'
  id: totrans-607
  prefs: []
  type: TYPE_PRE
  zh: '[PRE335]'
- en: '[PRE336]'
  id: totrans-608
  prefs: []
  type: TYPE_PRE
  zh: '[PRE336]'
- en: '[PRE337]'
  id: totrans-609
  prefs: []
  type: TYPE_PRE
  zh: '[PRE337]'
- en: '[PRE338]'
  id: totrans-610
  prefs: []
  type: TYPE_PRE
  zh: '[PRE338]'
- en: '[PRE339]'
  id: totrans-611
  prefs: []
  type: TYPE_PRE
  zh: '[PRE339]'
- en: '[PRE340]'
  id: totrans-612
  prefs: []
  type: TYPE_PRE
  zh: '[PRE340]'
- en: '[PRE341]'
  id: totrans-613
  prefs: []
  type: TYPE_PRE
  zh: '[PRE341]'
- en: 'Each component of time value can be extracted from a `LocalTime` object, as
    follows:'
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: 可以从`LocalTime`对象中提取时间值的每个组成部分，如下所示：
- en: '[PRE342]'
  id: totrans-615
  prefs: []
  type: TYPE_PRE
  zh: '[PRE342]'
- en: '[PRE343]'
  id: totrans-616
  prefs: []
  type: TYPE_PRE
  zh: '[PRE343]'
- en: '[PRE344]'
  id: totrans-617
  prefs: []
  type: TYPE_PRE
  zh: '[PRE344]'
- en: '[PRE345]'
  id: totrans-618
  prefs: []
  type: TYPE_PRE
  zh: '[PRE345]'
- en: '[PRE346]'
  id: totrans-619
  prefs: []
  type: TYPE_PRE
  zh: '[PRE346]'
- en: '[PRE347]'
  id: totrans-620
  prefs: []
  type: TYPE_PRE
  zh: '[PRE347]'
- en: 'An object of the `LocalTime` class can be modified, as follows:'
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: '`LocalTime`类的对象可以被修改，如下所示：'
- en: '[PRE348]'
  id: totrans-622
  prefs: []
  type: TYPE_PRE
  zh: '[PRE348]'
- en: '[PRE349]'
  id: totrans-623
  prefs: []
  type: TYPE_PRE
  zh: '[PRE349]'
- en: '[PRE350]'
  id: totrans-624
  prefs: []
  type: TYPE_PRE
  zh: '[PRE350]'
- en: '[PRE351]'
  id: totrans-625
  prefs: []
  type: TYPE_PRE
  zh: '[PRE351]'
- en: '[PRE352]'
  id: totrans-626
  prefs: []
  type: TYPE_PRE
  zh: '[PRE352]'
- en: '[PRE353]'
  id: totrans-627
  prefs: []
  type: TYPE_PRE
  zh: '[PRE353]'
- en: '[PRE354]'
  id: totrans-628
  prefs: []
  type: TYPE_PRE
  zh: '[PRE354]'
- en: '[PRE355]'
  id: totrans-629
  prefs: []
  type: TYPE_PRE
  zh: '[PRE355]'
- en: '[PRE356]'
  id: totrans-630
  prefs: []
  type: TYPE_PRE
  zh: '[PRE356]'
- en: '[PRE357]'
  id: totrans-631
  prefs: []
  type: TYPE_PRE
  zh: '[PRE357]'
- en: '[PRE358]'
  id: totrans-632
  prefs: []
  type: TYPE_PRE
  zh: '[PRE358]'
- en: '[PRE359]'
  id: totrans-633
  prefs: []
  type: TYPE_PRE
  zh: '[PRE359]'
- en: '[PRE360]'
  id: totrans-634
  prefs: []
  type: TYPE_PRE
  zh: '[PRE360]'
- en: '[PRE361]'
  id: totrans-635
  prefs: []
  type: TYPE_PRE
  zh: '[PRE361]'
- en: '[PRE362]'
  id: totrans-636
  prefs: []
  type: TYPE_PRE
  zh: '[PRE362]'
- en: '[PRE363]'
  id: totrans-637
  prefs: []
  type: TYPE_PRE
  zh: '[PRE363]'
- en: 'And two objects of the `LocalTime` class can also be compared, as follows:'
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: 并且两个`LocalTime`类的对象也可以进行比较，如下所示：
- en: '[PRE364]'
  id: totrans-639
  prefs: []
  type: TYPE_PRE
  zh: '[PRE364]'
- en: '[PRE365]'
  id: totrans-640
  prefs: []
  type: TYPE_PRE
  zh: '[PRE365]'
- en: '[PRE366]'
  id: totrans-641
  prefs: []
  type: TYPE_PRE
  zh: '[PRE366]'
- en: '[PRE367]'
  id: totrans-642
  prefs: []
  type: TYPE_PRE
  zh: '[PRE367]'
- en: There are many other helpful methods in the `LocalTime` class. If you have to
    work with dates, we recommend that you read the API of this class and other classes
    of the `java.time` package and its sub-packages.
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: '`LocalTime`类中有许多其他有用的方法。如果您必须处理日期，我们建议您阅读此类以及其他`java.time`包及其子包的类的API。'
- en: LocalDateTime class
  id: totrans-644
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LocalDateTime类
- en: 'The `LocalDateTime` class contains both the date and time and has all the methods
    the `LocalDate` and `LocalTime` classes have, so we are not going to repeat them
    here. We will only show how an object of the `LocalDateTime` class can be created,
    as follows:'
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: '`LocalDateTime`类包含日期和时间，并且具有`LocalDate`和`LocalTime`类所有的所有方法，所以我们在这里不会重复它们。我们只会展示如何创建一个`LocalDateTime`类的对象，如下所示：'
- en: '[PRE368]'
  id: totrans-646
  prefs: []
  type: TYPE_PRE
  zh: '[PRE368]'
- en: '[PRE369]'
  id: totrans-647
  prefs: []
  type: TYPE_PRE
  zh: '[PRE369]'
- en: '[PRE370]'
  id: totrans-648
  prefs: []
  type: TYPE_PRE
  zh: '[PRE370]'
- en: '[PRE371]'
  id: totrans-649
  prefs: []
  type: TYPE_PRE
  zh: '[PRE371]'
- en: '[PRE372]'
  id: totrans-650
  prefs: []
  type: TYPE_PRE
  zh: '[PRE372]'
- en: '[PRE373]'
  id: totrans-651
  prefs: []
  type: TYPE_PRE
  zh: '[PRE373]'
- en: '[PRE374]'
  id: totrans-652
  prefs: []
  type: TYPE_PRE
  zh: '[PRE374]'
- en: '[PRE375]'
  id: totrans-653
  prefs: []
  type: TYPE_PRE
  zh: '[PRE375]'
- en: '[PRE376]'
  id: totrans-654
  prefs: []
  type: TYPE_PRE
  zh: '[PRE376]'
- en: '[PRE377]'
  id: totrans-655
  prefs: []
  type: TYPE_PRE
  zh: '[PRE377]'
- en: '[PRE378]'
  id: totrans-656
  prefs: []
  type: TYPE_PRE
  zh: '[PRE378]'
- en: '[PRE379]'
  id: totrans-657
  prefs: []
  type: TYPE_PRE
  zh: '[PRE379]'
- en: '[PRE380]'
  id: totrans-658
  prefs: []
  type: TYPE_PRE
  zh: '[PRE380]'
- en: '[PRE381]'
  id: totrans-659
  prefs: []
  type: TYPE_PRE
  zh: '[PRE381]'
- en: '[PRE382]'
  id: totrans-660
  prefs: []
  type: TYPE_PRE
  zh: '[PRE382]'
- en: '[PRE383]'
  id: totrans-661
  prefs: []
  type: TYPE_PRE
  zh: '[PRE383]'
- en: '[PRE384]'
  id: totrans-662
  prefs: []
  type: TYPE_PRE
  zh: '[PRE384]'
- en: '[PRE385]'
  id: totrans-663
  prefs: []
  type: TYPE_PRE
  zh: '[PRE385]'
- en: '[PRE386]'
  id: totrans-664
  prefs: []
  type: TYPE_PRE
  zh: '[PRE386]'
- en: '[PRE387]'
  id: totrans-665
  prefs: []
  type: TYPE_PRE
  zh: '[PRE387]'
- en: '[PRE388]'
  id: totrans-666
  prefs: []
  type: TYPE_PRE
  zh: '[PRE388]'
- en: '[PRE389]'
  id: totrans-667
  prefs: []
  type: TYPE_PRE
  zh: '[PRE389]'
- en: '[PRE390]'
  id: totrans-668
  prefs: []
  type: TYPE_PRE
  zh: '[PRE390]'
- en: There are many other helpful methods in the `LocalDateTime` class. If you have
    to work with dates, we recommend that you read the API of this class and other
    classes of the `java.time` package and its sub-packages.
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: '`LocalDateTime`类中有许多其他有用的方法。如果您必须处理日期，我们建议您阅读此类以及其他`java.time`包及其子包的类的API。'
- en: Period and Duration classes
  id: totrans-670
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Period和Duration类
- en: 'The `java.time.Period` and `java.time.Duration` classes are designed to contain
    an amount of time, as outlined here:'
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: '`java.time.Period`和`java.time.Duration`类被设计用来包含一定的时间量，如下所述：'
- en: A `Period` object contains an amount of time in units of years, months, and
    days.
  id: totrans-672
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Period`对象包含以年、月和日为单位的时间量。'
- en: A `Duration` object contains an amount of time in hours, minutes, seconds, and
    nanoseconds.
  id: totrans-673
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Duration`对象包含小时、分钟、秒和纳秒的时间量。'
- en: 'The following code snippet demonstrates their creation and usage using the
    `LocalDateTime` class, but the same methods exist in the `LocalDate` (for `Period`)
    and `LocalTime` (for `Duration`) classes:'
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段演示了使用`LocalDateTime`类创建和使用它们的方法，但相同的方法也存在于`LocalDate`（对于`Period`）和`LocalTime`（对于`Duration`）类中：
- en: '[PRE391]'
  id: totrans-675
  prefs: []
  type: TYPE_PRE
  zh: '[PRE391]'
- en: '[PRE392]'
  id: totrans-676
  prefs: []
  type: TYPE_PRE
  zh: '[PRE392]'
- en: '[PRE393]'
  id: totrans-677
  prefs: []
  type: TYPE_PRE
  zh: '[PRE393]'
- en: 'The following methods work the same way as the methods of the `LocalTime` class:'
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: 以下方法与`LocalTime`类的方法以相同的方式工作：
- en: '[PRE394]'
  id: totrans-679
  prefs: []
  type: TYPE_PRE
  zh: '[PRE394]'
- en: '[PRE395]'
  id: totrans-680
  prefs: []
  type: TYPE_PRE
  zh: '[PRE395]'
- en: '[PRE396]'
  id: totrans-681
  prefs: []
  type: TYPE_PRE
  zh: '[PRE396]'
- en: '[PRE397]'
  id: totrans-682
  prefs: []
  type: TYPE_PRE
  zh: '[PRE397]'
- en: '[PRE398]'
  id: totrans-683
  prefs: []
  type: TYPE_PRE
  zh: '[PRE398]'
- en: '[PRE399]'
  id: totrans-684
  prefs: []
  type: TYPE_PRE
  zh: '[PRE399]'
- en: '[PRE400]'
  id: totrans-685
  prefs: []
  type: TYPE_PRE
  zh: '[PRE400]'
- en: '[PRE401]'
  id: totrans-686
  prefs: []
  type: TYPE_PRE
  zh: '[PRE401]'
- en: '[PRE402]'
  id: totrans-687
  prefs: []
  type: TYPE_PRE
  zh: '[PRE402]'
- en: '[PRE403]'
  id: totrans-688
  prefs: []
  type: TYPE_PRE
  zh: '[PRE403]'
- en: '[PRE404]'
  id: totrans-689
  prefs: []
  type: TYPE_PRE
  zh: '[PRE404]'
- en: '[PRE405]'
  id: totrans-690
  prefs: []
  type: TYPE_PRE
  zh: '[PRE405]'
- en: '[PRE406]'
  id: totrans-691
  prefs: []
  type: TYPE_PRE
  zh: '[PRE406]'
- en: '[PRE407]'
  id: totrans-692
  prefs: []
  type: TYPE_PRE
  zh: '[PRE407]'
- en: 'Some other methods of creating and using `Period` objects are demonstrated
    in the following code snippet:'
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码片段中演示了创建和使用`Period`对象的一些其他方法：
- en: '[PRE408]'
  id: totrans-694
  prefs: []
  type: TYPE_PRE
  zh: '[PRE408]'
- en: '[PRE409]'
  id: totrans-695
  prefs: []
  type: TYPE_PRE
  zh: '[PRE409]'
- en: '[PRE410]'
  id: totrans-696
  prefs: []
  type: TYPE_PRE
  zh: '[PRE410]'
- en: '[PRE411]'
  id: totrans-697
  prefs: []
  type: TYPE_PRE
  zh: '[PRE411]'
- en: '[PRE412]'
  id: totrans-698
  prefs: []
  type: TYPE_PRE
  zh: '[PRE412]'
- en: '[PRE413]'
  id: totrans-699
  prefs: []
  type: TYPE_PRE
  zh: '[PRE413]'
- en: '[PRE414]'
  id: totrans-700
  prefs: []
  type: TYPE_PRE
  zh: '[PRE414]'
- en: '[PRE415]'
  id: totrans-701
  prefs: []
  type: TYPE_PRE
  zh: '[PRE415]'
- en: '[PRE416]'
  id: totrans-702
  prefs: []
  type: TYPE_PRE
  zh: '[PRE416]'
- en: '`Duration` objects can be similarly created and used, as illustrated in the
    following code snippet:'
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: '`Duration`对象可以类似地创建和使用，如下面的代码片段所示：'
- en: '[PRE417]'
  id: totrans-704
  prefs: []
  type: TYPE_PRE
  zh: '[PRE417]'
- en: '[PRE418]'
  id: totrans-705
  prefs: []
  type: TYPE_PRE
  zh: '[PRE418]'
- en: '[PRE419]'
  id: totrans-706
  prefs: []
  type: TYPE_PRE
  zh: '[PRE419]'
- en: '[PRE420]'
  id: totrans-707
  prefs: []
  type: TYPE_PRE
  zh: '[PRE420]'
- en: '[PRE421]'
  id: totrans-708
  prefs: []
  type: TYPE_PRE
  zh: '[PRE421]'
- en: '[PRE422]'
  id: totrans-709
  prefs: []
  type: TYPE_PRE
  zh: '[PRE422]'
- en: '[PRE423]'
  id: totrans-710
  prefs: []
  type: TYPE_PRE
  zh: '[PRE423]'
- en: '[PRE424]'
  id: totrans-711
  prefs: []
  type: TYPE_PRE
  zh: '[PRE424]'
- en: '[PRE425]'
  id: totrans-712
  prefs: []
  type: TYPE_PRE
  zh: '[PRE425]'
- en: '[PRE426]'
  id: totrans-713
  prefs: []
  type: TYPE_PRE
  zh: '[PRE426]'
- en: '[PRE427]'
  id: totrans-714
  prefs: []
  type: TYPE_PRE
  zh: '[PRE427]'
- en: There are many other helpful methods in `Period` and `Duration` classes. If
    you have to work with dates, we recommend that you read the API of this class
    and other classes of the `java.time` package and its sub-packages.
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: '`Period`和`Duration`类中有许多其他有用的方法。如果您必须处理日期，我们建议您阅读此类以及其他`java.time`包及其子包的类的API。'
- en: Period of day
  id: totrans-716
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一天的Period
- en: 'Java 16 includes a new time format that shows a period of the day as `AM`,
    `in the morning`, and similar. The following two methods demonstrate usage of
    the `DateTimeFormatter.ofPattern()` method with the `LocalDateTime` and `LocalTime`
    classes:'
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE428]'
  id: totrans-718
  prefs: []
  type: TYPE_PRE
  zh: '[PRE428]'
- en: '[PRE429]'
  id: totrans-719
  prefs: []
  type: TYPE_PRE
  zh: '[PRE429]'
- en: '[PRE430]'
  id: totrans-720
  prefs: []
  type: TYPE_PRE
  zh: '[PRE430]'
- en: '[PRE431]'
  id: totrans-721
  prefs: []
  type: TYPE_PRE
  zh: '[PRE431]'
- en: '[PRE432]'
  id: totrans-722
  prefs: []
  type: TYPE_PRE
  zh: '[PRE432]'
- en: '[PRE433]'
  id: totrans-723
  prefs: []
  type: TYPE_PRE
  zh: '[PRE433]'
- en: '[PRE434]'
  id: totrans-724
  prefs: []
  type: TYPE_PRE
  zh: '[PRE434]'
- en: '[PRE435]'
  id: totrans-725
  prefs: []
  type: TYPE_PRE
  zh: '[PRE435]'
- en: '[PRE436]'
  id: totrans-726
  prefs: []
  type: TYPE_PRE
  zh: '[PRE436]'
- en: '[PRE437]'
  id: totrans-727
  prefs: []
  type: TYPE_PRE
  zh: '[PRE437]'
- en: '[PRE438]'
  id: totrans-728
  prefs: []
  type: TYPE_PRE
  zh: '[PRE438]'
- en: '[PRE439]'
  id: totrans-729
  prefs: []
  type: TYPE_PRE
  zh: '[PRE439]'
- en: 'The following code demonstrates the effect of `"h a"` and `"h B"` patterns:'
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE440]'
  id: totrans-731
  prefs: []
  type: TYPE_PRE
  zh: '[PRE440]'
- en: '[PRE441]'
  id: totrans-732
  prefs: []
  type: TYPE_PRE
  zh: '[PRE441]'
- en: '[PRE442]'
  id: totrans-733
  prefs: []
  type: TYPE_PRE
  zh: '[PRE442]'
- en: '[PRE443]'
  id: totrans-734
  prefs: []
  type: TYPE_PRE
  zh: '[PRE443]'
- en: '[PRE444]'
  id: totrans-735
  prefs: []
  type: TYPE_PRE
  zh: '[PRE444]'
- en: '[PRE445]'
  id: totrans-736
  prefs: []
  type: TYPE_PRE
  zh: '[PRE445]'
- en: '[PRE446]'
  id: totrans-737
  prefs: []
  type: TYPE_PRE
  zh: '[PRE446]'
- en: '[PRE447]'
  id: totrans-738
  prefs: []
  type: TYPE_PRE
  zh: '[PRE447]'
- en: '[PRE448]'
  id: totrans-739
  prefs: []
  type: TYPE_PRE
  zh: '[PRE448]'
- en: '[PRE449]'
  id: totrans-740
  prefs: []
  type: TYPE_PRE
  zh: '[PRE449]'
- en: '[PRE450]'
  id: totrans-741
  prefs: []
  type: TYPE_PRE
  zh: '[PRE450]'
- en: '[PRE451]'
  id: totrans-742
  prefs: []
  type: TYPE_PRE
  zh: '[PRE451]'
- en: '[PRE452]'
  id: totrans-743
  prefs: []
  type: TYPE_PRE
  zh: '[PRE452]'
- en: '[PRE453]'
  id: totrans-744
  prefs: []
  type: TYPE_PRE
  zh: '[PRE453]'
- en: '[PRE454]'
  id: totrans-745
  prefs: []
  type: TYPE_PRE
  zh: '[PRE454]'
- en: '[PRE455]'
  id: totrans-746
  prefs: []
  type: TYPE_PRE
  zh: '[PRE455]'
- en: '[PRE456]'
  id: totrans-747
  prefs: []
  type: TYPE_PRE
  zh: '[PRE456]'
- en: '[PRE457]'
  id: totrans-748
  prefs: []
  type: TYPE_PRE
  zh: '[PRE457]'
- en: You can use `"h a"` and `"h B"` patterns to make the time presentation more
    user-friendly.
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-750
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter introduced you to the Java collections framework and its three
    main interfaces: `List`, `Set`, and `Map`. Each of the interfaces was discussed
    and its methods were demonstrated with one of the implementing classes. The generics
    were explained and demonstrated as well. The `equals()` and `hashCode()` methods
    have to be implemented in order for an object to be capable of being handled by
    Java collections correctly.'
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
- en: The `Collections` and `CollectionUtils` utility classes have many useful methods
    for collection handling and were presented in examples, along with the `Arrays`,
    `ArrayUtils`, `Objects`, and `ObjectUtils` classes.
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
- en: The class methods of the `java.time` package allow time/date values to be managed
    and were demonstrated in specific practical code snippets.
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
- en: You can now use all the main data structures we talked about in this chapter
    in your programs.
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will overview JCL and some external libraries, including
    those that support testing. Specifically, we will explore the `org.junit`, `org.mockito`,
    `org.apache.log4j`, `org.slf4j`, and `org.apache.commons` packages and their sub-packages.
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
- en: Quiz
  id: totrans-756
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'What is the Java collections framework? Select all that apply:'
  id: totrans-757
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A collection of frameworks
  id: totrans-758
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Classes and interfaces of the `java.util` package
  id: totrans-759
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`List`, `Set`, and `Map` interfaces'
  id: totrans-760
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Classes and interfaces that implement a collection data structure
  id: totrans-761
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'What is meant by *generics* in a collection? Select all that apply:'
  id: totrans-762
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A collection structure definition
  id: totrans-763
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: An element type declaration
  id: totrans-764
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: A type generalization
  id: totrans-765
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: A mechanism that provides compile-time safety
  id: totrans-766
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'What are the limitations of the collection of `of()` factory methods? Select
    all that apply:'
  id: totrans-767
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: They do not allow a `null` element.
  id: totrans-768
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: They do not allow elements to be added to the initialized collection.
  id: totrans-769
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: They do not allow modification of elements in relation to the initialized collection.
  id: totrans-770
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'What does the implementation of the `java.lang.Iterable` interface allow? Select
    all that apply:'
  id: totrans-771
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It allows elements of the collection to be accessed one by one.
  id: totrans-772
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It allows the collection to be used in `FOR` statements.
  id: totrans-773
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It allows the collection to be used in `WHILE` statements.
  id: totrans-774
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It allows the collection to be used in `DO...WHILE` statements.
  id: totrans-775
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'What does the implementation of the `java.util.Collection` interface allow?
    Select all that apply:'
  id: totrans-776
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Addition to the collection of elements from another collection
  id: totrans-777
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Removal from the collection of objects that are elements of another collection
  id: totrans-778
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Modification of just those elements of the collection that belong to another
    collection
  id: totrans-779
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Removal from the collection of objects that do not belong to another collection
  id: totrans-780
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从不属于另一个集合的对象集合中删除
- en: 'Select all the correct statements pertaining to `List` interface methods:'
  id: totrans-781
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择所有与 `List` 接口方法相关的正确陈述：
- en: '`z get(int index)`: This returns the element at a specified position in the
    list.'
  id: totrans-782
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`z get(int index)`: 这个方法返回列表中指定位置的元素。'
- en: '`E remove(int index)`: This removes the element at a specified position in
    the list; it returns the removed element.'
  id: totrans-783
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`E remove(int index)`: 这个方法从列表中删除指定位置的元素；它返回被删除的元素。'
- en: '`static List<E> copyOf(Collection<E> coll)`: This returns an unmodifiable `List`
    interface containing elements of the given `Collection` interface and preserves
    their order.'
  id: totrans-784
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`static List<E> copyOf(Collection<E> coll)`: 这个方法返回一个包含给定 `Collection` 接口元素的不可修改的
    `List` 接口，并保留它们的顺序。'
- en: '`int indexOf(Object o)`: This returns the position of a specified element in
    the list.'
  id: totrans-785
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`int indexOf(Object o)`: 这个方法返回列表中指定元素的位置。'
- en: 'Select all the correct statements pertaining to `Set` interface methods:'
  id: totrans-786
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择所有与 `Set` 接口方法相关的正确陈述：
- en: '`E get(int index)`: This returns the element at a specified position in the
    list.'
  id: totrans-787
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`E get(int index)`: 这个方法返回列表中指定位置的元素。'
- en: '`E remove(int index)`: This removes the element at a specified position in
    the list; it returns the removed element.'
  id: totrans-788
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`E remove(int index)`: 这个方法从列表中删除指定位置的元素；它返回被删除的元素。'
- en: '`static Set<E> copyOf(Collection<E> coll)`: This returns an unmodifiable `Set`
    interface containing elements of the given `Collection` interface.'
  id: totrans-789
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`static Set<E> copyOf(Collection<E> coll)`: 这个方法返回一个包含给定 `Collection` 接口元素的不可修改的
    `Set` 接口。'
- en: '`int indexOf(Object o)`: This returns the position of a specified element in
    the list.'
  id: totrans-790
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`int indexOf(Object o)`: 这个方法返回列表中指定元素的位置。'
- en: 'Select all the correct statements pertaining to `Map` interface methods:'
  id: totrans-791
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择所有与 `Map` 接口方法相关的正确陈述：
- en: '`int size()`: This returns the count of key-value pairs stored in the map;
    when the `isEmpty()` method returns `true`, this method returns `0`.'
  id: totrans-792
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`int size()`: 这个方法返回存储在映射中的键值对数量；当 `isEmpty()` 方法返回 `true` 时，此方法返回 `0`。'
- en: '`V remove(Object key)`: This removes both the key and value from the map; returns
    `value` or `null` if there is no such key or the value is `null`.'
  id: totrans-793
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`V remove(Object key)`: 这个方法从映射中删除键和值；如果没有这样的键或值是 `null`，则返回 `value` 或 `null`。'
- en: '`default boolean remove(Object key, Object value)`: This removes the key-value
    pair if such a pair exists in the map; returns `true` if the value is removed.'
  id: totrans-794
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`default boolean remove(Object key, Object value)`: 如果映射中存在这样的键值对，则删除键值对；如果值被删除，则返回
    `true`。'
- en: '`default boolean replace(K key, V oldValue, V newValue)`: This replaces the
    `oldValue` value with the `newValue` value provided if the key provided is currently
    mapped to the `oldValue` value—it returns `true` if the `oldValue` value was replaced;
    otherwise, it returns `false`.'
  id: totrans-795
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`default boolean replace(K key, V oldValue, V newValue)`: 如果提供的键当前映射到 `oldValue`
    值，则用提供的 `newValue` 值替换 `oldValue` 值——如果替换了 `oldValue` 值，则返回 `true`；否则返回 `false`。'
- en: 'Select all correct statements pertaining to the `static void sort(List<T> list,
    Comparator<T> comparator)` method of the `Collections` class:'
  id: totrans-796
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择所有与 `Collections` 类的 `static void sort(List<T> list, Comparator<T> comparator)`
    方法相关的正确陈述：
- en: It sorts the list’s natural order if list elements implement the `Comparable`
    interface.
  id: totrans-797
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果列表元素实现了 `Comparable` 接口，它将根据列表的自然顺序对列表进行排序。
- en: It sorts the list’s order according to the `Comparator` object provided.
  id: totrans-798
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它根据提供的 `Comparator` 对象对列表的顺序进行排序。
- en: It sorts the list’s order according to the `Comparator` object provided if list
    elements implement the `Comparable` interface.
  id: totrans-799
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果列表元素实现了 `Comparable` 接口，它将根据提供的 `Comparator` 对象对列表的顺序进行排序。
- en: It sorts the list’s order according to the provided `Comparator` object irrespective
    of whether the list elements implement the `Comparable` interface.
  id: totrans-800
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不论列表元素是否实现了 `Comparable` 接口，它都将根据提供的 `Comparator` 对象对列表的顺序进行排序。
- en: What is the outcome of executing the following code?
  id: totrans-801
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下代码的结果是什么？
- en: '[PRE458]'
  id: totrans-802
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE458]'
- en: '`[s1, s2, s3, s4]`'
  id: totrans-803
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`[s1, s2, s3, s4]`'
- en: '`[s3, s4, s3]`'
  id: totrans-804
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`[s3, s4, s3]`'
- en: '`[s1, s2, s3, s3, s4]`'
  id: totrans-805
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`[s1, s2, s3, s3, s4]`'
- en: '`[s3, s4]`'
  id: totrans-806
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`[s3, s4]`'
- en: 'What is the functionality of `CollectionUtils` class methods? Select all that
    apply:'
  id: totrans-807
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`CollectionUtils` 类方法的功能是什么？选择所有适用的：'
- en: It matches the functionality of `Collections` class methods, but by handling
    `null`
  id: totrans-808
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它通过处理 `null` 来匹配 `Collections` 类方法的函数。
- en: It complements the functionality of `Collections` class methods
  id: totrans-809
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它补充了 `Collections` 类方法的函数。
- en: It searches, processes, and compares Java collections in a way that `Collections`
    class methods do not do
  id: totrans-810
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它以 `Collections` 类方法不进行的方式搜索、处理和比较 Java 集合。
- en: It duplicates the functionality of `Collections` class methods
  id: totrans-811
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它重复了`Collections`类方法的功能
- en: What is the result of executing the following code?
  id: totrans-812
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下代码的结果是什么？
- en: '[PRE459]'
  id: totrans-813
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE459]'
- en: '`false true`'
  id: totrans-814
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`false true`'
- en: '`false`'
  id: totrans-815
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`false`'
- en: '`true false`'
  id: totrans-816
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`true false`'
- en: '`true`'
  id: totrans-817
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`true`'
- en: What is the result of executing the following code?
  id: totrans-818
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下代码的结果是什么？
- en: '[PRE460]'
  id: totrans-819
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE460]'
- en: '`1 2 0 false true`'
  id: totrans-820
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`1 2 0 false true`'
- en: '`2 1 1 false true`'
  id: totrans-821
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`2 1 1 false true`'
- en: '`2 1 0 false true`'
  id: totrans-822
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`2 1 0 false true`'
- en: '`2 1 0 true false`'
  id: totrans-823
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`2 1 0 true false`'
- en: What is the result of executing the following code?
  id: totrans-824
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下代码的结果是什么？
- en: '[PRE461]'
  id: totrans-825
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE461]'
- en: '`true 0 0`'
  id: totrans-826
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`true 0 0`'
- en: '`Error`'
  id: totrans-827
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Error`'
- en: '`false -1 0`'
  id: totrans-828
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`false -1 0`'
- en: '`false 31 0`'
  id: totrans-829
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`false 31 0`'
- en: What is the result of executing the following code?
  id: totrans-830
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下代码的结果是什么？
- en: '[PRE462]'
  id: totrans-831
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE462]'
- en: '`c x a`'
  id: totrans-832
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`c x a`'
- en: '`a c x`'
  id: totrans-833
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`a c x`'
- en: '`x c a`'
  id: totrans-834
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`x c a`'
- en: '`a x c`'
  id: totrans-835
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`a x c`'
- en: What is the result of executing the following code?
  id: totrans-836
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下代码的结果是什么？
- en: '[PRE463]'
  id: totrans-837
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE463]'
- en: '`1921-02-23`'
  id: totrans-838
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`1921-02-23`'
- en: '`21-02-23`'
  id: totrans-839
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`21-02-23`'
- en: '`0021-02-23`'
  id: totrans-840
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`0021-02-23`'
- en: '`Error`'
  id: totrans-841
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Error`'
- en: What is the result of executing the following code?
  id: totrans-842
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下代码的结果是什么？
- en: '[PRE464]'
  id: totrans-843
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE464]'
- en: '`20:23:12.000000300`'
  id: totrans-844
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`20:23:12.000000300`'
- en: '`20:23:12.300`'
  id: totrans-845
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`20:23:12.300`'
- en: '`20:23:12:300`'
  id: totrans-846
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`20:23:12:300`'
- en: '`Error`'
  id: totrans-847
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Error`'
- en: What is the result of executing the following code?
  id: totrans-848
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下代码的结果是什么？
- en: '[PRE465]'
  id: totrans-849
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE465]'
- en: '`2020-02-23 20:23:12`'
  id: totrans-850
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`2020-02-23 20:23:12`'
- en: '`2020-02-23T20:23:12`'
  id: totrans-851
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`2020-02-23T20:23:12`'
- en: '`2020-02-23:20:23:12`'
  id: totrans-852
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`2020-02-23:20:23:12`'
- en: '`Error`'
  id: totrans-853
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Error`'
- en: What is the result of executing the following code?
  id: totrans-854
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下代码的结果是什么？
- en: '[PRE466]'
  id: totrans-855
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE466]'
- en: '`2020-02-23T20:23:12 2020-02-23T20:23:12`'
  id: totrans-856
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`2020-02-23T20:23:12 2020-02-23T20:23:12`'
- en: '`2020-02-23T20:23:12 2020-02-23T20:35:12`'
  id: totrans-857
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`2020-02-23T20:23:12 2020-02-23T20:35:12`'
- en: '`2018-02-23T20:23:12 2020-02-23T20:35:12 2020-02-23T20:23:12`'
  id: totrans-858
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`2018-02-23T20:23:12 2020-02-23T20:35:12 2020-02-23T20:23:12`'
- en: '`2018-02-23T20:23:12 2020-02-23T20:35:12 2018-02-23T20:35:12`'
  id: totrans-859
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`2018-02-23T20:23:12 2020-02-23T20:35:12 2018-02-23T20:35:12`'
