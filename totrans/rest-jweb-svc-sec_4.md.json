["```java\n       <dependency>\n            <groupId>org.jboss.spec.javax.servlet</groupId>\n            <artifactId>jboss-servlet-api_3.0_spec</artifactId>\n            <version>1.0.1.Final</version>\n            <scope>provided</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.jboss.resteasy</groupId>\n            <artifactId>resteasy-client</artifactId>\n            <version>3.0.6.Final</version>\n            <scope>provided</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.jboss.resteasy</groupId>\n            <artifactId>skeleton-key-core</artifactId>\n            <version>3.0.6.Final</version>\n            <scope>provided</scope>\n        </dependency>\n```", "```java\nprivate static KeyStore loadKeyStore(String filename, String password) throws Exception \n{\nKeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\nFile keyStoreFile = new File(filename);\nFileInputStream keyStoreStream = new FileInputStream(keyStoreFile);\n    keyStore.load(keyStoreStream, password.toCharArray());\n    keyStoreStream.close();\n    return keyStore; \n}\n```", "```java\n@Override\n public void contextInitialized(ServletContextEvent sce) {\n  String truststoreKSPath = \"${jboss.server.config.dir}/client-truststore.ts\";\n  String truststoreKSPassword = \"changeit\";\n  truststoreKSPath = EnvUtil.replace(truststoreKSPath);\n  try {\n   KeyStore truststoreKS = loadKeyStore(truststoreKSPath, \n     truststoreKSPassword);\n   oauthClient = new ServletOAuthClient();\n   oauthClient.setTruststore(truststoreKS);\n   oauthClient.setClientId(\"third-party\");\n   oauthClient.setPassword(\"changeit\");\n   oauthClient.setAuthUrl(\"https://localhost:8443/oauth-server/login.jsp\");\n   oauthClient.setCodeUrl(\"https://localhost:8443/oauth-server/\n     j_oauth_resolve_access_code\");\n   oauthClient.start();\n   sce.getServletContext().setAttribute(ServletOAuthClient.class.getName(), oauthClient);\n  } catch (Exception e) {\n   throw new RuntimeException(e);\n  }\n\n }\n```", "```java\n@Override\n  public void contextDestroyed(ServletContextEvent sce) {\n    oauthClient.stop();\n  }\n```", "```java\npublic static void redirect(HttpServletRequest request, HttpServletResponse response) {\nServletOAuthClient oAuthClient = (ServletOAuthClient) request.getServletContext().getAttribute(ServletOAuthClient.class.getName());\n    try {\noAuthClient.redirectRelative(\"discList.jsp\", request, response);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n```", "```java\npublic static List<String> getCompactDiscs(HttpServletRequest request) {\n\nServletOAuthClient oAuthClient = (ServletOAuthClient) request.getServletContext().getAttribute(\n        ServletOAuthClient.class.getName());\n\nResteasyClient rsClient = new \nResteasyClientBuilder().trustStore(oAuthClient.getTruststore()).hostnameVerification(ResteasyClientBuilder.HostnameVerificationPolicy.ANY).build();\n\nString urlDiscs = \"https://localhost:8443/store/discs\";\n  try {\nString bearerToken = \"Bearer\" + oAuthClient.getBearerToken(request);\n\nResponse response = rsClient.target(urlDiscs).request().header(HttpHeaders.AUTHORIZATION, bearerToken)\n          .get();\n    return response.readEntity(new GenericType<List<String>>() {\n\t      });\n    } finally {\n      rsClient.close();\n    }\n}\n```", "```java\n@Path(\"discs\")\npublic class CompactDiscService {\n  @GET\n @Produces(\"application/json\")\n  public List<String> getCompactDiscs() {\n    ArrayList<String> compactDiscList = new ArrayList<String>();\n    compactDiscList.add(\"The Ramones\");\n    compactDiscList.add(\"The Clash\");\n    compactDiscList.add(\"Nirvana\");\n    return compactDiscList;\n  }\n}\n```", "```java\n<jboss-web>\n    <security-domain>java:/jaas/commerce</security-domain>\n    <valve>\n        <class-name>org.jboss.resteasy.skeleton.key.as7.OAuthAuthenticationServerValve</class-name>\n    </valve>\n</jboss-web>\n```", "```java\n{\n   \"realm\" : \"commerce\",\n   \"admin-role\" : \"admin\",\n   \"login-role\" : \"login\",\n   \"oauth-client-role\" : \"oauth\",\n   \"wildcard-role\" : \"*\",\n   \"realm-keystore\" : \"${jboss.server.config.dir}/realm.jks\",\n   \"realm-key-alias\" : \"commerce\",\n   \"realm-keystore-password\" : \"changeit\",\n   \"realm-private-key-password\" : \"changeit\",\n   \"truststore\" : \"${jboss.server.config.dir}/client-truststore.ts\",\n   \"truststore-password\" : \"changeit\",\n   \"resources\" : [\n      \"https://localhost:8443/oauth-client\",\n      \"https://localhost:8443/discstore/\"\n   ]\n}\n```", "```java\n<jboss-deployment-structure>\n    <deployment>\n        <!-- This allows you to define additional dependencies, it is the same as using the Dependencies: manifest attribute -->\n        <dependencies>\n            <module name=\"org.jboss.resteasy.resteasy-jaxrs\" services=\"import\"/>\n            <module name=\"org.jboss.resteasy.resteasy-jackson-provider\" services=\"import\"/>\n            <module name=\"org.jboss.resteasy.skeleton-key\" />\n        </dependencies>\n    </deployment>\n</jboss-deployment-structure>\n```", "```java\npublic class OauthClientTest {\n\n  public static void main(String[] args) throws Exception {\n\n    String truststorePath = \"C:/Users/Andres/jboss/2do_jboss/jboss-as-7.1.1.Final/standalone/configuration/client-truststore.ts\";\n    String truststorePassword = \"changeit\";\n    truststorePath = EnvUtil.replace(truststorePath);\n\n    KeyStore truststore = loadKeyStore(truststorePath, truststorePassword);\n\n         ResteasyClient client = new ResteasyClientBuilder()\n                .disableTrustManager().trustStore(truststore).build();\n\n    Form form = new Form().param(\"grant_type\", \"client_credentials\");\n    ResteasyWebTarget target = client.target(\"https://localhost:8443/oauth-server/j_oauth_token_grant\");\n    target.register(new BasicAuthentication(\"andres\", \"andres\"));\n\n    AccessTokenResponse tokenResponse = target.request().post(Entity.form(form), AccessTokenResponse.class);\n    Response response = client.target(\"https://localhost:8443/discstore/discs\")\n        .request()\n        .header(HttpHeaders.AUTHORIZATION,\n            \"Bearer \" + tokenResponse.getToken()).get();\n    try {\n      String xml = response.readEntity(String.class);\n      System.out.println(xml);\n    } finally {\n      client.close();\n    }\n\n  }\n```", "```java\n<subsystem  default-virtual-server=\"default-host\" native=\"false\">\n            <connector name=\"http\" protocol=\"HTTP/1.1\" scheme=\"http\" socket-binding=\"http\"/>\n            <virtual-server name=\"default-host\" enable-welcome-root=\"true\">\n                <alias name=\"localhost\"/>\n                <sso domain=\"localhost\" reauthenticate=\"false\"/>\n            </virtual-server>\n</subsystem>\n```", "```java\n<jboss-web>\n    <security-domain>java:/jaas/other </security-domain>\n          <valve>\n        <class-name>org.apache.catalina.authenticator.SingleSignOn</class-name>\n    </valve>\n</jboss-web>\n```", "```java\n<security-domain name=\"other\" cache-type=\"default\">\n    <authentication>\n      <login-module code=\"Remoting\" flag=\"optional\">\n<module-option name=\"password-stacking\"  value=\"useFirstPass\"/>\n      </login-module>\n      <login-module code=\"RealmUsersRoles\" flag=\"required\">\n<module-option name=\"usersProperties\" value=\"${jboss.server.config.dir}/application-users.properties\"/>\n<module-option name=\"rolesProperties\" value=\"${jboss.server.config.dir}/application-roles.properties\"/>\n<module-option name=\"realm\" value=\"ApplicationRealm\"/>\n<module-option name=\"password-stacking\" value=\"useFirstPass\"/>\n      </login-module>\n     </authentication>\n</security-domain>\n```", "```java\nprivate static String urlAuth = \"https://localhost:8443/auth-server /j_oauth_token_grant\";\nprivate static String urlDiscs = \"https://localhost:8443/discstore/discs\";\n```", "```java\npublic static List<String> getCompactDiscs() {\n  ResteasyClient rsClient = new ResteasyClientBuilder().disableTrustManager().build();\n    Form form = new Form().param(\"grant_type\", \"client_credentials\");\n  ResteasyWebTarget resourceTarget = rsClient.target(urlAuth);\n    resourceTarget.register(new BasicAuthentication(\"andres\", \"andres\"));\n  AccessTokenResponse accessToken = resourceTarget.request().post(Entity.form(form), AccessTokenResponse.class);\n    try {\n      String bearerToken = \"Bearer \" + accessToken.getToken();\n      Response response = rsClient.target(urlDiscs).request().header(HttpHeaders.AUTHORIZATION, bearerToken).get();\n      return response.readEntity(new GenericType<List<String>>() {\n      });\n    } finally {\n      rsClient.close();\n    }\n  }\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app \n\n      xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\n      version=\"3.0\">\n    <security-constraint>\n        <web-resource-collection>\n            <url-pattern>/*</url-pattern>\n        </web-resource-collection>\n        <user-data-constraint>\n            <transport-guarantee>CONFIDENTIAL</transport-guarantee>\n        </user-data-constraint>\n    </security-constraint>\n</web-app>\n```", "```java\n @Path(\"/compactDisc-service\")\npublic class CompactDiscService {\n  @PermitAll\n @GET\n @Path(\"/compactDiscs/{name}\")\n  public Response getCompactDiscByName(@PathParam(\"name\") String name, @Context Request request) {\n    Response.ResponseBuilder rb = Response.ok(CompactDiscDatabase.getCompactDiscByName(name));\n    return rb.build();\n  }\n\n  @RolesAllowed(\"ADMIN\")\n @PUT\n @Path(\"/compactDiscs/{name}\")\n  public Response updatePriceByDiscName(@PathParam(\"name\") String name) {\n    // Update the User resource\n    CompactDiscDatabase.updateCompactDisc(name, 10.5);\n    return Response.status(200).build();\n  }\n}\n```", "```java\npublic class CompactDiscDatabase {\n  public static HashMap<String, CompactDisc> compactDiscs = new HashMap<String, CompactDisc>();\n\n  static {\n    CompactDisc ramonesCD = new CompactDisc();\n    ramonesCD.setDiscName(\"Ramones Anthology\");\n    ramonesCD.setBandName(\"The Ramones\");\n    ramonesCD.setPrice(15.0);\n\n    Calendar calendar = Calendar.getInstance();\n    calendar.set(1980, 10, 22);\n    Date realeaseDate = calendar.getTime();\n    ramonesCD.setReleaseDate(realeaseDate);\n    compactDiscs.put(\"Ramones Anthology\", ramonesCD);\n\n  }\n\n  public static CompactDisc getCompactDiscByName(String name) {\n    return compactDiscs.get(name);\n  }\n\n  public static void updateCompactDisc(String name, double newPrice) {\n    CompactDisc cd = compactDiscs.get(name);\n    cd.setPrice(newPrice);\n  }\n}\n```", "```java\n@XmlAccessorType(XmlAccessType.NONE)\n@XmlRootElement(name = \"compactDisc\")\npublic class CompactDisc implements Serializable {\n  private static final long serialVersionUID = 1L;\n\n  @XmlElement(name = \"discName\")\n  private String discName;\n\n  @XmlElement(name = \"bandName\")\n  private String bandName;\n\n  @XmlElement(name = \"releaseDate\")\n  private Date releaseDate;\n\n  @XmlElement(name = \"price\")\n  private double price;\n//getters and setters\n}\n```", "```java\n@Provider\npublic class SecurityFilter implements javax.ws.rs.container.ContainerRequestFilter {\n\n  private static final String ADMIN = \"ADMIN\";\n  private static final String RESOURCE_METHOD_INVOKER = \"org.jboss.resteasy.core.ResourceMethodInvoker\";\n  private static final String AUTHORIZATION_PROPERTY = \"Authorization\";\n  private static final String AUTHENTICATION_SCHEME = \"Basic\";\n  private static final ServerResponse ACCESS_DENIED = new ServerResponse(\"Access denied for this resource\", 401,\n      new Headers<Object>());\n  private static final ServerResponse ACCESS_FORBIDDEN = new ServerResponse(\"Nobody can access this resource\", 403,\n      new Headers<Object>());\n```", "```java\n@Override\npublic void filter(ContainerRequestContext requestContext) {\n    ResourceMethodInvoker methodInvoker = (ResourceMethodInvoker) requestContext\n        .getProperty(RESOURCE_METHOD_INVOKER);\n    Method method = methodInvoker.getMethod();\n```", "```java\n// Access allowed for all\n    if (!method.isAnnotationPresent(PermitAll.class)) {\n      // Access denied for all\n      if (method.isAnnotationPresent(DenyAll.class)) {\n        requestContext.abortWith(ACCESS_FORBIDDEN);\n        return;\n      }\n```", "```java\n      final MultivaluedMap<String, String> headersMap = requestContext.getHeaders();\n\n      final List<String> authorizationList = headersMap.get(AUTHORIZATION_PROPERTY);\n\n      if (authorizationList == null || authorizationList.isEmpty()) {\n        requestContext.abortWith(ACCESS_DENIED);\n        return;\n      }\n```", "```java\n final String encodedUserPassword = authorizationList.get(0).replaceFirst(AUTHENTICATION_SCHEME + \" \", \"\");\n\n      String usernameAndPassword = new String(Base64.decodeBase64(encodedUserPassword));\n\n      // Split username and password tokens\n      final StringTokenizer tokenizer = new StringTokenizer(usernameAndPassword, \":\");\n      final String userName = tokenizer.nextToken();\n      final String password = tokenizer.nextToken();\n```", "```java\n      // Verify user access\n if (method.isAnnotationPresent(RolesAllowed.class)) {\n RolesAllowed rolesAnnotation = method.getAnnotation(RolesAllowed.class);\n        Set<String> rolesSet = new HashSet<String>(Arrays.asList(rolesAnnotation.value()));\n\n        // Is user valid?\n        if (!isUserAllowed(userName, password, rolesSet)) {\n        requestContext.abortWith(ACCESS_DENIED);\n          return;\n        }\n      }\n    }\n  }\n\n  private boolean isUserAllowed(final String username, final String password, final Set<String> rolesSet) {\n    boolean isAllowed = false;\n\n    if (rolesSet.contains(ADMIN)) {\n      isAllowed = true;\n    }\n    return isAllowed;\n  }\n}\n```"]