["```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans \n\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans \n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/aop \n       http://www.springframework.org/schema/aop/spring-aop.xsd\"\n       >\n```", "```java\n    <aop:config>\n    <aop:aspect id=\"myLoggin\" ref=\"loggingAspect\"></aop:aspect> \n    </aop:config>\n    <bean id=\"loggingAspect\"\n    class=\"com.packet.spring.aop.aspects.LogginAspect\">\n    </bean>\n```", "```java\n    <aop:pointcut id=\"employeeServiceMethods\"\n    expression=\"execution(* com.packet.spring.aop.service.*.*(..))\" />\n```", "```java\n<aop:config>\n      <aop:pointcut id=\"employeeServiceMethods\"\n        expression=\"execution(* com.packet.spring.aop.service.*.*(..))\" />\n\n       <aop:aspect id=\"myLoggin\" ref=\"loggingAspect\">\n          <aop:before pointcut-ref=\"employeeServiceMethods\" \n              method=\"printStartLog\"/>\n       </aop:aspect>\n</aop:config>\n\n<bean id=\"loggingAspect\" class=\"com.packet.spring.aop.aspects.LoggingAspect\">\n</bean>\n\n<bean id=\"employeeService\" class=\"com.packet.spring.aop.service.EmployeeService\">\n</bean>\n```", "```java\npackage com.packt.spring.aop.aspects;\n\nimport org.aspectj.lang.JoinPoint;\npublic class LoggingAspect {\n\npublic void printStartLog(JoinPoint joinPoint) {\n    System.out.println(\" ****** Starting Method '\"+joinPoint.getSignature().getName()+\"' of \"+joinPoint.getTarget().getClass());\n  }\n}\nprintStartLog is the advice method. It takes a parameter of type JoinPoint, which represents the join-points that we associated with the aspect. This class provides metadata about the target object, such as its method (on which this advice is woven), class, and other attributes.\n```", "```java\npackage com.packt.spring.aop.service;\n\npublic class EmployeeService {\n\n public void generateSalarySlip() {\n    System.out.println(\"Generating payslip\");\n  }\n public String showTotalEmployee(String test) {\n    System.out.println(\" The string is -->\"+test);\n    return test;\n  }\n public void findEmployee(String employeeId) {\n    System.out.println(\" finding employee based on employeeId \");\n  }\n}\n```", "```java\npackage com.packt.spring.aop.aspects.main;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\nimport com.packet.spring.aop.report.api.IExportPaySlip;\nimport com.packet.spring.aop.service.EmployeeService;\nimport com.packet.spring.aop.service.HRService;\n\npublic class SpringAOPInXMLCheck {\n\n  public static void main(String[] args) {\n    ApplicationContext springContext = new ClassPathXmlApplicationContext(\"application-context.xml\");\n    EmployeeService employeeService = (EmployeeService)springContext.getBean(\"employeeService\");\n    employeeService.generateSalarySlip();\n    employeeService.showTotalEmployee(\"test\");\n    employeeService.findEmployee(\"abc123\");\n  }\n}\n```", "```java\n\n-------------------------------------------\n ****** Starting Method 'generateSalarySlip' of class com.packet.spring.aop.service.EmployeeService\nGenerating payslip\n\n ****** Starting Method 'showTotalEmployee' of class com.packet.spring.aop.service.EmployeeService\nThe string is -->test\n\n ****** Starting Method 'findEmployee' of class com.packet.spring.aop.service.EmployeeService\n finding employee based on employeeId\n\n```", "```java\n //After advice method.\n  public void printEndLog(JoinPoint joinPoint) {\n    System.out.println(\" ****** End of Method '\"+joinPoint.getSignature().getName());\n  }\n```", "```java\n<aop:aspect id=\"myLoggin\" ref=\"loggingAspect\">\n      <aop:before pointcut-ref=\"employeeServiceMethods\" method=\"printStartLog\"/>\n      <aop:after pointcut-ref=\"employeeServiceMethods\" method=\"printEndLog\"/>\n</aop:aspect>\n```", "```java\n\n-----------------------------------\n ****** Starting Method 'generateSalarySlip' of class com.packet.spring.aop.service.EmployeeService\nGenerating payslip\n ****** End of Method 'generateSalarySlip\n\n ****** Starting Method 'showTotalEmployee' of class com.packet.spring.aop.service.EmployeeService\n The string is -->test\n ****** End of Method 'showTotalEmployee\n\n ****** Starting Method 'findEmployee' of class com.packet.spring.aop.service.EmployeeService\n finding employee based on employeeId \n ****** End of Method 'findEmployee\n```", "```java\n//Around advice method.\n  public void printAroundLog(ProceedingJoinPoint proceedingJointPoint) throws Throwable {\n    System.out.println(\"----- Starting of Method \"+proceedingJointPoint.getSignature().getName());\n    proceedingJointPoint.proceed();\n    System.out.println(\"----- ending of Method \"+proceedingJointPoint.getSignature().getName());\n  }\n```", "```java\n<aop:aspect id=\"myLoggin\" ref=\"loggingAspect\">\n      <aop:around pointcut-ref=\"employeeServiceMethods\" method=\"printAroundLog\"/>\n</aop:aspect>\n```", "```java\n\n----------------------------------\n----- Starting of Method generateSalarySlip\nGenerating payslip\n----- ending of Method generateSalarySlip\n\n----- Starting of Method showTotalEmployee\n The string is -->test\n----- ending of Method showTotalEmployee\n\n----- Starting of Method findEmployee\n finding employee based on employeeId \n----- ending of Method findEmployee\n```", "```java\npackage com.packt.spring.aop.aspects;\nimport org.aspectj.lang.JoinPoint;\npublic class SendMessage {\n\n    //Advice method after successful existing of target method.\n    public void sendMessageOnSuccessExit(JoinPoint joinPoint) {\n      System.out.println(\" ****** Method '\"+joinPoint.getSignature().getName()+\"' of \"+joinPoint.getTarget().getClass()+\" is executed successfully...\");\n    }\n}\n```", "```java\n<aop:pointcut id=\"hrServiceMethods\"\n        expression=\"execution(* com.packet.spring.aop.service.HRService.*(..))\" />\n\n<aop:aspect id=\"sendMsg\" ref=\"sendMsgAspect\">\n      <aop:after-returning pointcut-ref=\"hrServiceMethods\"\n       method=\"sendMessageOnSuccessExit\"/>\n</aop:aspect>\n```", "```java\npackage com.packt.spring.aop.service;\n\npublic class HRService {\n\n  public void showHolidayList() {\n    System.out.println(\"This is holiday list method...\");\n  }\n\n  public void showMyLeave() throws Exception {\n    System.out.println(\"Showing employee leaves...\");\n    throw new Exception();\n  }\n}\n```", "```java\nThis is holiday list method...\n ****** Method 'showHolidayList' of class com.packet.spring.aop.service.HRService is executed successfully...\n```", "```java\n<aop:aspect id=\"sendMsg\" ref=\"sendMsgAspect\">\n      <aop:after-returning pointcut-ref=\"hrServiceMethods\"\n       returning=\"retVal\"\n       method=\"sendMessageOnSuccessExit\"/>\n</aop:aspect>\n```", "```java\n  public String showHolidayList() {\n    System.out.println(\"This is holiday list method...\");\n    return \"holidayList\";\n  }\n```", "```java\n//Advice method after successful existing of target method.\n    public String sendMessageOnSuccessExit(JoinPoint joinPoint,String retVal) {\n      System.out.println(\" ****** Method '\"+joinPoint.getSignature().getName()+\"' of \"+joinPoint.getTarget().getClass()+\" is executed successfully...\");\n      System.out.println(\" The return value is -->\"+retVal);\n      return \"Successfully exited with return val is -->\"+retVal;\n    }\n```", "```java\nThis is holiday list method...\n ****** Method 'showHolidayList' of class com.packet.spring.aop.service.HRService is executed successfully...\n The return value is -->holidayList\n```", "```java\n    <aop:aspect id=\"sendMsg\" ref=\"sendMsgAspect\">\n      <aop:after-returning pointcut-ref=\"hrServiceMethods\"\n           returning=\"retVal\" method=\"sendMessageOnSuccessExit\"/>\n      <aop:after-throwing pointcut-ref=\"hrServiceMethods\"\n           method=\"sendMessageOnErrorExit\"/>\n    </aop:aspect>\n```", "```java\n//Advice method on existing of target method with some error / exception\npublic void sendMessageOnErrorExit(JoinPoint joinPoint) {\n      System.out.println(\" ****** Method '\"+joinPoint.getSignature().getName()+\"'\n      of \"+joinPoint.getTarget().getClass()+\" has some error ...\");\n}\n```", "```java\npublic void showMyLeave() throws Exception {\n    System.out.println(\"Showing employee leaves...\");\n    throw new Exception();\n  }\n```", "```java\nShowing employee leaves...\n ****** Method 'showMyLeave' of class com.packet.spring.aop.service.HRService has some error ...\njava.lang.Exception\n at com.packet.spring.aop.service.HRService.showMyLeave(HRService.java:12)\n at com.packet.spring.aop.service.HRService$$FastClassBySpringCGLIB$$a3eb49fe.invoke(<generated>)\n...\n```", "```java\n@Configuration\n@EnableAspectJAutoProxy\npublic class SpringConfig {\n\n}\n```", "```java\npackage com.packt.spring.aop.aspects;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Pointcut;\n\n@Aspect\npublic class SessionCheck {\n}\n```", "```java\n<aop:aspectj-autoproxy/>\n<bean id=\"sessionCheckAspect\" class=\"com.packt.spring.aop.aspects.SessionCheck\">\n</bean>\n```", "```java\n@Aspect\npublic class SessionCheck {\n  @Pointcut(\"execution( * com.packt.spring.aop.service.*.*(..))\") // Expression\n  private void validateSession() {// Point-cut signature\n  }\n}\n```", "```java\n<aop:config>\n    <!-- point cut declaration  -->    \n    <aop:pointcut id=\"checkValidUser\"\n        expression=\"execution(* com.packet.spring.aop.service.*.*(..))\" />\n\n    <!-- aspect configuration  -->        \n    <aop:aspect id=\"mySessionCheck\" ref=\"checkSessionAspect\">\n        //Advice declaration goes here.\n    </aop:aspect>\n\n    <!-- spring bean represents an aspect  -->        \n    <bean id=\"checkSessionAspect\" \n            class=\"com.packet.spring.aop.aspects.SessionCheck\">\n    </bean>\n</aop:config>\n```", "```java\n@Pointcut(\"bean(batchOperation)\")\n  private void captureBatchProcess() {\n\n  }\n```", "```java\n@Pointcut(\"execution( * com.packt.spring.aop.report.*.*(..))\")\nprivate void checkSession() {\n}\n\n@Pointcut(\"args(String)\")\nprivate void printUserName() {\n}\n\n@Pointcut(\"checkSession() && printUserName()\")\nprivate void userSession() {\n}\n```", "```java\n@Before(\"execution(* com.packt.spring.aop.report.*.*(..))\")\npublic void displayUserName() {\n  System.out.println(\" Displaying the user name of logged in user --\");\n}\n```", "```java\n@Pointcut(\"execution( * com.packt.spring.aop.report.*.*(..))\")\nprivate void checkSession() {\n}\n\n@Before(\"checkSession()\")\npublic void displayUserName() {\n   System.out.println(\" Displaying the user name of logged in user --\");\n}\n```", "```java\n<aop:config>\n    <!-- point cut declaration  -->    \n    <aop:pointcut id=\"checkSessionPointcut\"\n        expression=\"execution( * com.packt.spring.aop.report.*.*(..))\" />\n\n    <!-- aspect and advice configuration  -->        \n    <aop:aspect id=\"mySessionCheck\" ref=\"checkSessionAspect\">\n        <aop:before pointcut-ref=\"checkSessionPointcut\" \n              method=\"displayUserName\"/>\n    </aop:aspect>\n\n    <!-- spring bean represents an aspect  -->        \n    <bean id=\"checkSessionAspect\" \n            class=\"com.packet.spring.aop.aspects.SessionCheck\">\n    </bean>\n</aop:config>\n```", "```java\n//New Aspect class.\n@Aspect\npublic class PermissionCheck {\n  @Pointcut(\"within(com.packt.spring.aop.report.*)\")\n  public void checkReportPermission() {\n  }\n}\n\n//Define After advice within SessionCheck aspect class.\n@After(\"com.packt.spring.aop.aspects.PermissionCheck.checkReportPermission()\")\npublic void checkResourcePermission() {\n  System.out.println(\"This is resource permission checker ..\");\n}\n```", "```java\n<aop:config>\n      <aop:pointcut id=\"loggingPointcut\" expression=\"execution(*\n               com.packt.spring.aop.dao.*.*(..))\" />\n      <aop:advisor advice-ref=\"loggingAdvice\"\n           pointcut-ref=\"loggingPointcut\" id=\"loggingInterceptorAdvisor\" />\n</aop:config>\n\n<bean id=\"loggingAdvice\" class=\"com.packt.spring.aop.advisor.LoggingAdvisor\" />\n```", "```java\n<aop:advisor advice-ref=\"loggingAdvice\"\n        pointcut-ref= \"com.packt.spring.aop.aspects.PermissionCheck.checkReportPermission()\" id=\"loggingInterceptorAdvisor\" />\n```", "```java\npublic class LoggingAdvisor implements MethodBeforeAdvice {\n  @Override\n  public void before(Method method, Object[] args, Object target) throws\n    Throwable {\n    System.out.println(\"****************** Starting \"+method.getName()+\" method \n    *****************\");\n  }\n}\n```", "```java\n@Pointcut(\"execution( * com.packt.spring.aop.report.*.*(..))\")\nprivate void checkSession() {\n}\n@Pointcut(\"args(String)\")\nprivate void printUserName() {\n}\n@Pointcut(\"checkSession() && printUserName()\")\nprivate void userSession() {\n}\n```"]