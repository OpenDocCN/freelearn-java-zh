- en: Chapter 11. WildFly, OpenShift, and Cloud Computing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since the terminology used within the realm of cloud computing can be a source
    of confusion, the first section of this chapter will provide an overview of the
    basic concepts of cloud computing. We will then discuss the OpenShift project
    and the benefits it will bring to your organization.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to cloud computing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is cloud computing? We hear this term everywhere, but what does it really
    mean? We have all used the cloud knowingly or unknowingly. If you use Gmail, Hotmail,
    or any other popular e-mail service, you have used the cloud. Simply put, cloud
    computing is a set of pooled computing resources and services delivered over the
    Web.
  prefs: []
  type: TYPE_NORMAL
- en: Client computing is not a new concept in the computer industry. Those of you
    who have been in the IT business for a decade or two will remember that the first
    type of client-server applications were the mainframe and terminal applications.
    At that time, storage and CPU was very expensive, and the mainframe pooled both
    types of resources and served them to thin-client terminals.
  prefs: []
  type: TYPE_NORMAL
- en: With the advent of the PC revolution, which brought mass storage and cheap CPUs
    to the average corporate desktop, the file server gained popularity as a way to
    enable document sharing and archiving. True to its name, the file server served
    storage resources to the clients in an enterprise, while the CPU cycles needed
    to do productive work were all produced and consumed within the confines of the
    PC client.
  prefs: []
  type: TYPE_NORMAL
- en: In the early 1990s, the budding Internet finally had enough computers attached
    to it that academic institutions began seriously thinking about how to connect
    those machines together to create massive, shared pools of storage and computational
    power that would be much larger than what any individual institution could ever
    afford to build. This is when the idea of *the grid* began to take shape.
  prefs: []
  type: TYPE_NORMAL
- en: Cloud computing versus grid computing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In general, the terms "grid" and "cloud" seem to be converging due to some
    similarities; however, there are a list of important differences between them
    that are often not understood, generating confusion and clutter within the marketplace.
    Grid computing requires the resources of many computers to solve a single problem,
    at the same time. Hence, it may or may not be in the cloud, depending on the type
    of use you make of it. One concern about the grid is that if one piece of the
    software on a node fails, other pieces of the software on other nodes may fail,
    too. This is alleviated if that component has a failover component on another
    node, but problems can still arise if the components rely on other pieces of software
    to accomplish one or more grid computing tasks. Have a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Cloud computing versus grid computing](img/6232OS_11_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Cloud computing evolves from grid computing and allows on-demand provisioning
    of resources. With cloud computing, companies can scale up to massive capacities
    in an instant, without having to invest in a new infrastructure, train new personnel,
    or license new software.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Grid and cloud – similarities and differences**'
  prefs: []
  type: TYPE_NORMAL
- en: The difference between the grid and the cloud lies in the way the tasks are
    computed. In a computational grid, one large job is divided into many small portions
    and executed on multiple machines. This characteristic is fundamental to a grid.
  prefs: []
  type: TYPE_NORMAL
- en: Cloud computing is intended to allow the user to avail of various services without
    investing in the underlying architecture. Cloud services include the delivery
    of software, infrastructure, and storage over the Internet either as separate
    components or as a complete platform.
  prefs: []
  type: TYPE_NORMAL
- en: Advantages of cloud computing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We just went through the basics of cloud computing, and now we will outline
    some of the benefits you may get if you move over to using the cloud services:'
  prefs: []
  type: TYPE_NORMAL
- en: '**On-demand service provisioning**: Using self-service provisioning, customers
    can have access to cloud services quickly and easily with no hassle. The customer
    simply requests a number of computing, storage, software, processes, or other
    resources from the service provider.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Elasticity**: This means that customers no longer need to predict traffic
    but can promote their sites aggressively and spontaneously. Engineering for peak
    traffic becomes a thing of the past.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cost reduction**: By purchasing just the right amount of IT resources on
    demand, an organization can avoid purchasing unnecessary equipment. For SMEs,
    using the cloud may also reduce the need for in-house IT administrators.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Application programming interfaces (APIs)**: APIs make it possible for an
    organization''s software to interact with cloud services. This means system administrators
    can interact with their cloud model. Cloud computing systems typically use REST-based
    APIs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although cloud computing brings many advantages, there are some disadvantages
    or potential risks that you must account for. The most compelling threat is that
    sensitive data processed outside the enterprise brings with it an inherent level
    of risk. This is because outsourced services bypass the physical, logical, and
    personnel controls a software house exerts over in-house programs. In addition,
    when you use the cloud, you probably won't know exactly where your data is hosted.
    In fact, you might not even know what country it will be stored in, leading to
    potential issues with local jurisdiction.
  prefs: []
  type: TYPE_NORMAL
- en: As Gartner Group ([http://www.gartner.com](http://www.gartner.com)) suggests,
    you should always ask providers to supply specific information on the hiring and
    oversight of privileged administrators. Besides this, the cloud provider should
    provide evidence that encryption schemes are designed and tested by experienced
    specialists. It is also important to understand whether the providers will make
    a contractual commitment to obey local privacy requirements on behalf of their
    customers.
  prefs: []
  type: TYPE_NORMAL
- en: Cloud computing options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Cloud computing can be divided into the following three possible forms, depending
    on where the cloud is hosted, each option bringing a different level of security
    and management overhead:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Public** **cloud**: This option is used when services and infrastructure
    are provided off-site and often shared across multiple organizations. Public clouds
    are generally managed by an external service provider.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Private** **cloud**: This option provides IT cloud resources that are dedicated
    to a single organization and offered on demand. A private cloud infrastructure
    is maintained on a private network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hybrid** **cloud**: This option is a mix of private and public clouds managed
    as a single entity, allowing you to keep aspects of your business in the most
    efficient environment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The decision to adopt one among the different kinds of cloud computing options
    is a matter of discussion between experts, and it generally depends on several
    key factors. For example, as far as security is concerned, although public clouds
    offer a secure environment, private clouds offer an inherent level of security
    that meets even the highest of standards. In addition, you can add security services,
    such an **Intrusion Detection System** (**IDS**) and dedicated firewalls. A private
    cloud might be the right choice for a large organization carrying a well-run data-center
    with a lot of spare capacity. It is more expensive to use a public cloud even
    if you have to add new software to transform that data center into a cloud.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, as far as scalability is concerned, one negative aspect of
    private clouds is that their performance is limited to the number of machines
    in your cloud cluster. Should you max out your computing power, another physical
    server will need to be added. Besides this, public clouds typically deliver a
    *pay-as-you-go* model, where you pay by the hour for the computing resources you
    use. This kind of utility pricing is economical if you're spinning up and tearing
    down development servers on a regular basis.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, the majority of public cloud deployments are generally used for web servers
    or development systems where security and compliance requirements of larger organizations
    and their customers are not an issue. Private clouds are generally preferred by
    mid-size and large enterprises because they meet the stricter security and compliance
    requirements. The downside of private clouds is that the organizations implementing
    them need dedicated, high-performance hardware. Have a look at the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Cloud computing options](img/6232OS_11_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Types of cloud services
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Cloud computing services can be broadly classified into the following three
    types. These types are also known as cloud service models or SPI service models.
  prefs: []
  type: TYPE_NORMAL
- en: '**Infrastructure as a Service (IaaS)**: This service allows you to spin up
    computers on demand. For each server, you will be able to select the amount of
    RAM, the number of processors, the amount of hard disk space, and the operating
    system. It allows you to do all this in a matter of minutes, making the acquisition
    of hardware easier, cheaper, and quicker. Well-known providers of this service
    include Amazon EC2, Google Compute Engine, Rackspace, and DigitalOcean.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: DigitalOcean is relatively new to the market. You can spin up a server instance
    in less than 60 seconds! The major selling point of DigitalOcean is the simplicity
    of the interface, which means there will be no more crawling through pages and
    pages of documentation. In addition to this, it is very reasonably priced. If
    you are considering an IaaS provider, DigitalOcean should definitely be added
    to your list.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Platform** **as** **a** **Service** **(PaaS)**: This service offers a development
    platform for developers. The end users write their own code, and the PaaS provider
    uploads that code and presents it on the Web.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By using PaaS, you don't need to invest money to get that project environment
    ready for your developers. The PaaS provider will deliver the platform on the
    Web, and in most cases, you can consume the platform using your browser. There
    is no need to download any software. This combination of simplicity and cost-efficiency
    empowers small and medium-sized companies, and even individual developers, to
    launch their own cloud SaaS.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Examples of PaaS providers are Facebook and OpenShift. Facebook is a social
    application platform where third parties can write new applications that are made
    available to end users. OpenShift allows developers to deploy their WildFly web
    or enterprise applications to the cloud as simply as issuing a `git push` command.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Software** **as** **a** **Service** **(SaaS)**: This service is based on
    the concept of renting software from a service provider instead of buying it.
    The software is usually accessed via the browser. Also known as *software on demand*,
    it is currently the most popular type of cloud computing because of its high flexibility,
    great services, enhanced scalability, and low maintenance. Examples of SaaS are
    Zoho, Google Docs, and the SalesForce CRM application. Have a look at the following
    screenshot:![Types of cloud services](img/6232OS_11_03.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You might wonder whether it is possible for some providers to be defined both
    as a *platform* and as *software*. The answer is yes! For example, Facebook can
    be defined as both a platform (because services and applications can be can be
    delivered via the Facebook API) and as software (as it is used by millions of
    end users).
  prefs: []
  type: TYPE_NORMAL
- en: Red Hat originally developed the OpenShift platform to deploy and manage Java
    EE applications on JBoss/WildFly servers running on the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: 'OpenShift offers three versions of the software, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Online**: This version is a free, cloud-based platform used to deploy new
    and existing Java EE, Ruby, PHP, Node.js, Perl, and Python applications on the
    cloud in a matter of minutes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Origin**: This version is a free and open source version of the software.
    It only comes with community support. To run this, you need your own infrastructure.
    This version is beyond the scope of this book, so it will not be covered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enterprise**: This version can be downloaded and run anywhere you want, including
    Amazon, Rackspace, or your own infrastructure. It is packaged with Red Hat Enterprise
    Linux, is stable, and comes with full support from Red Hat.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started with OpenShift Online
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenShift allows you to create, deploy, and manage applications within the cloud.
    It provides disk space, CPU resources, memory, and network connectivity. You can
    choose from a range of web cartridges, including Tomcat, WildFly, Jenkins, and
    many more. You can also plug in database cartridges, such as MySQL. Depending
    on the type of application you are building, you also have access to a template
    filesystem layout for that type (for example, PHP, WSGI, and Rack/Rails). OpenShift
    also generates a limited DNS for you.
  prefs: []
  type: TYPE_NORMAL
- en: To get started with OpenShift Online, the first thing you need to do is create
    an account. Go to OpenShift's home page at [https://www.openshift.com/](https://www.openshift.com/),
    and select **SIGN UP**. Complete the online registration and verify your e-mail
    address.
  prefs: []
  type: TYPE_NORMAL
- en: Before you can create an application, you need to create a **domain**. OpenShift
    uses non-strict domains (that is, there is no preceding period).
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in to your OpenShift account and navigate to the **Settings** tab. Enter
    your domain name and click on **Save**. Have a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting started with OpenShift Online](img/6232OS_11_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Each account can only support a single domain. Should you wish to use more than
    one domain, you need to create a separate account with a different username.
  prefs: []
  type: TYPE_NORMAL
- en: Installing OpenShift client tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Installing OpenShift client tools is a simple process. The following guide shows
    you how to install the tools in Ubuntu 14.04\. If you want to install them in
    a different flavor of Linux or in a different operating system, refer to the Red
    Hat documentation at [https://access.redhat.com/documentation/en-US/OpenShift_Online/2.0/html/Client_Tools_Installation_Guide/chap-OpenShift_Client_Tools.html](https://access.redhat.com/documentation/en-US/OpenShift_Online/2.0/html/Client_Tools_Installation_Guide/chap-OpenShift_Client_Tools.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'First, ensure that you have the latest package list by executing the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will then need to install the required dependencies, `ruby`, `rubygems`,
    and `git`, by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can now install the client tools by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After running this command, you should see something like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: It is important that you run the setup wizard before using the client tools.
    Failing to do so might cause problems later on.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To run the setup, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The setup will require you to enter data for the following queries in the order
    they appear onscreen:'
  prefs: []
  type: TYPE_NORMAL
- en: For **Enter the server hostname**, just press *Enter* to use the default value,
    which is the server used for OpenShift Online.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For **Enter username and password**, enter your account username and password.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If there are no SSH keys on your system, one will be generated. You will be
    asked if you want to upload the key to the server. Type `yes`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you did not create a domain earlier, you will be prompted to add a domain
    now.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing your OpenShift account from a different computer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Communication between your computer and OpenShift happens over SSH using secure
    keys. In order to use your domain from a different machine, simply download and
    install the OpenShift client tools to your other computer. When you run the tools
    setup, the key for your computer will be added to your keys on the server.
  prefs: []
  type: TYPE_NORMAL
- en: To revoke access, you will need to delete the key for that computer. You can
    do this by logging in to OpenShift, navigating to **Settings**, and scrolling
    down until you reach **Public Keys**. Now, delete the key that relates to the
    computer you want to revoke access from.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our first OpenShift application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we develop an application to run on OpenShift, we should first define
    some OpenShift terms:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Application**: This is obviously the application you will deploy to OpenShift.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Gear**: This is the container that contains your server, along with the various
    resources required to run your application, such as RAM, the processor, and hard
    disk space.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cartridge**: A cartridge is a plugin that provides a specific functionality.
    For example, you can select a WildFly cartridge and a database cartridge to be
    added to your gear.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing your first cartridge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To view all available cartridges, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The syntax to create an application is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'At the time of writing, there is no WildFly cartridge available in the cartridge
    list. For this example, I am going to use a cartridge that is available on GitHub
    ([https://github.com/openshift-cartridges/openshift-wildfly-cartridge](https://github.com/openshift-cartridges/openshift-wildfly-cartridge)).
    Navigate to the folder where you want your code to be located. If you are using
    Eclipse, you may want to `cd` into your workspace folder. Using the preceding
    syntax, but replacing the cartridge name with the cartridge URL, we will create
    the application, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'After running this command, a significant amount of information will be printed
    to the console. We will deal with this output one piece at a time. The first piece
    of information is the detail related to the cartridge and gear. We can see the
    URL from where the cartridge was cloned from, the gear size, and the domain:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The next part shows that the application is being created, and that an artifact
    is being deployed on the gear:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Printed out next are the details for the management console, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The following part shows the remote Git repository being cloned to your local
    hard drive. The SSH key for the gear will be added to your `known_hosts` file
    once you allow it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, your application URL, remote GIT repository, and SSH location are all
    printed out, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you can verify that your server is up and running, and that you can access
    the deployed application by pointing your browser to the URL specified in the
    preceding output ([http://wildfly-chrisritchie.rhcloud.com/](http://wildfly-chrisritchie.rhcloud.com/)).
    Have a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing your first cartridge](img/6232OS_11_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's turn our attention to the local repository on your computer.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can import the repository into Eclipse by selecting **File** | **Import**
    | **Projects** from **GIT** | **Existing local repository** | **Add**. Then, browse
    to the location of your `git` repository and import it as a new Maven project
    so that Eclipse can automatically generate the project configuration files for
    you.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you look at the structure of the `git` repository, as shown in the following
    screenshot, you will see that the `src` folder follows a typical Maven project
    structure for a web application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing your first cartridge](img/6232OS_11_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you inspect the root folder via the command line, you will also notice the
    hidden folders. There are two important hidden folders. The `.git` folder contains
    all your versioning information and Git configuration. The `.openshift` folder
    contains various configurations for OpenShift. Have a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing your first cartridge](img/6232OS_11_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `deployments` folder performs the same task as the `JBOSS_HOME/standalone/deployments`
    directory. Applications placed here will be automatically deployed when the repository
    is pushed to the remote Git repository.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the workflow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Just before we start to code the actual application, we need to understand
    the workflow and how the code is deployed to the server. Here are the basic steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Modify the source code in the local Git repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add any deployments, such as JDBC connectors, to the `deployments` folder. This
    step is optional.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Stage all files to the local repository, ready for committing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Commit the files to the local repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Push the changes to the remote repository. This will trigger deployment on your
    gear. You don't need to add your application WAR to the `deployments` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Building the application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So, now we need to create our own application. For the first example, we will
    deploy a simple service that downloads the text within a text area as a PDF file.
    This application consists of a servlet that translates the request into a PDF
    response using the **iText** library (available at [http://itextpdf.com/download.php](http://itextpdf.com/download.php)).
    Here is the servlet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to add the `itextpdf` library to the project''s `pom.xml` file
    so that the code can compile. Have a look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition, we need an HTML/JSP page that contains a text area. This code
    is inside the `createpdf.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We have now finished the application. We need to add and commit our application
    to our local Git repository using the following `git add` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, enter the following `git` `commit` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, you need to push your local changes to the remote repository sitting
    on your gear, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This will push up your code and trigger various Git hooks that cause your code
    to be compiled, packaged, and deployed, as you can see from the following output.
    The build output has been omitted for brevity.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now finally access our application using [http://wildfly-chrisritchie.rhcloud.com/createpdf.html](http://wildfly-chrisritchie.rhcloud.com/createpdf.html).
    Have a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building the application](img/6232OS_11_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After entering some text and clicking on the **Convert to PDF** button, a PDF
    file is downloaded containing the text, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building the application](img/6232OS_11_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Launching our application generates a PDF file as the result—your first cloud
    application! Now that we have deployed a simple application to your OpenShift
    gear, in the next section, we will show you how to manage your OpenShift applications
    and introduce some advanced features.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing the OpenShift server logfiles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At some point, you will need to see what is happening on the server side. Maybe
    your application is failing to deploy, or you need to see the logs after you encounter
    an error. There are a few ways you can view the OpenShift server logs:'
  prefs: []
  type: TYPE_NORMAL
- en: Tail the logfile using client tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run SSH into the gear
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tailing the logfile
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Tailing the application server log is simple. You just need to run the `rhc
    tail` command. For example, to view the log for the example application that we
    called `wildfly`, you need to execute the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'This will print out the latest entries from the logfile, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: To exit the log, simply press *Ctrl* + *C*.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing logs via SSH
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the `rhc tail` command is only useful part of the time. Most likely, you
    will want to view the entire log or search the log. For this, you need to SSH
    into the gear. We use the `-a` switch to specify the application name, as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'By typing `ls app_name`, you can see that the directory structure is similar
    to that of a WildFly install. You can now view your file using the `less` command,
    which means you have full control over navigation and search within the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using the `less` command gives you much more control than using `tail`. Pressing
    *Shift* + *F* starts the tailing of the file, and *Ctrl* + *C* stops the tailing
    of the file. A backslash allows you to search backwards, and a question mark allows
    you to search forward in the file. It becomes easy to find occurrences of exceptions
    and errors.
  prefs: []
  type: TYPE_NORMAL
- en: Managing applications in OpenShift
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At first, it might appear difficult to manage your application on a remote server.
    Once you have learned the commands to manage your application, this concern should
    be greatly reduced.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to control your applications, you can use the `rhc app` command, which
    takes the action to be performed and the `-a` command that specifies the application
    name. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The following table shows the list of commands available to manage your applications.
    You can view the list of available options via the command line, using the `--help`
    flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Option | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `start` | Starts an application |'
  prefs: []
  type: TYPE_TB
- en: '| `stop` | Stops an application that is currently running |'
  prefs: []
  type: TYPE_TB
- en: '| `force-stop` | Kills the application''s processes |'
  prefs: []
  type: TYPE_TB
- en: '| `restart` | Restarts an application |'
  prefs: []
  type: TYPE_TB
- en: '| `reload` | Reloads an application |'
  prefs: []
  type: TYPE_TB
- en: '| `delete` | Deletes an application |'
  prefs: []
  type: TYPE_TB
- en: '| `configure` | Configures properties for an application |'
  prefs: []
  type: TYPE_TB
- en: '| `create` | Creates an application |'
  prefs: []
  type: TYPE_TB
- en: '| `deploy` | Deploys an application |'
  prefs: []
  type: TYPE_TB
- en: '| `scale-up` | Scales up the application cartridge |'
  prefs: []
  type: TYPE_TB
- en: '| `scale-down` | Scales down the application cartridge |'
  prefs: []
  type: TYPE_TB
- en: '| `show` | Shows an application''s information |'
  prefs: []
  type: TYPE_TB
- en: '| `tidy` | Deletes an application''s logfiles and temporary files |'
  prefs: []
  type: TYPE_TB
- en: 'If you want to delete the application we created earlier, you will use the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Configuring your applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you create an application, you will have a local copy of the repository,
    which contains your application code and the WildFly server''s `deployments` folder.
    Besides this, there are a couple of hidden folders in your Git repository. The
    first one is the `.git` folder, which contains all your Git-related configuration.
    The second folder is `.openshift`. The following is the content of the `.openshift`
    folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The `action_hooks` folder is where developers can put action hook scripts that
    will be executed during the OpenShift build life cycle.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can create a build script to perform application initialization, such as
    creating tables or setting variables. For full details on supported action hooks,
    see the documentation at [http://openshift.github.io/documentation/oo_user_guide.html#build-action-hooks](http://openshift.github.io/documentation/oo_user_guide.html#build-action-hooks).
  prefs: []
  type: TYPE_NORMAL
- en: The `cron` folder allows the developer to add cron jobs on the gear. The scripts
    added will be scheduled according to whether they are put in the `minutely`, `hourly`,
    `daily`, `weekly`, or `monthly` folders.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `markers` folder can be used to set various settings. For example, the
    `skip_maven_build` marker file will instruct the Maven compiler to skip the build
    process. Lastly and importantly, the `config` folder has the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: As you expected, the `standalone.xml` file is the WildFly configuration file
    for your applications. The `modules` folder is where you can add your own modules,
    as you would in a native install of WildFly.
  prefs: []
  type: TYPE_NORMAL
- en: We have only touched upon the basics of what OpenShift can do. For a more in-depth
    look, see the OpenShift user guide at [http://openshift.github.io/documentation/oo_user_guide.html](http://openshift.github.io/documentation/oo_user_guide.html).
  prefs: []
  type: TYPE_NORMAL
- en: Adding a database cartridge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Every enterprise application needs some kind of storage for its data. OpenShift
    allows you to add database cartridges after creating your application. To view
    the list of possible cartridges, you can issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Within the list that outputs, you will see various database vendor cartridge
    options. In this example, we are going to add the MySQL database cartridge to
    our application. To do this, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you configure your application to be scalable, the database cartridge will
    be installed into a new gear. If your application is not configured to be scalable,
    it will be added to the same gear as your application. This is to ensure that
    your database is not affected when you scale up or scale down your gears.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output will print the information we need related to our new database,
    such as the root password, connection URL, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The beauty of this is that you do not need to further configure your `standalone.xml`
    file, as all the environment variables are set for you when you add the MySQL
    cartridge. You can access the datasource immediately using the JNDI namespace
    of `java:jboss/datasources/MysqlDS`. Take a look at the datasource configuration
    in the `standalone.xml` file. You will see all properties are external environment
    variables, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'To remove the database cartridge, and thus disable it, you can simply run the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Using OpenShift Tools and Eclipse
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Alongside the client tools, there is also a plugin for Eclipse that allows you
    to integrate with OpenShift. If you prefer graphical interfaces over the command
    line, you should consider this plugin.
  prefs: []
  type: TYPE_NORMAL
- en: 'Installing OpenShift Tools requires the same steps as when we installed the
    WildFly plugin in [Chapter 2](ch02.html "Chapter 2. Configuring the Core WildFly
    Subsystems"), *Configuring the Core WildFly Subsystems*. Perform the following
    steps to install OpenShift Tools:'
  prefs: []
  type: TYPE_NORMAL
- en: In Eclipse, go to the marketplace by clicking on **Help** | **Eclipse Marketplace**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for the version of JBoss Tools that matches your Eclipse version.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Install**. You will be presented with the full list of features available.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can now select **JBoss OpenShift Tools** along with any other features you
    want, as shown in the following screenshot:![Using OpenShift Tools and Eclipse](img/6232OS_11_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Confirm**, accept the license terms, and click on **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When Eclipse restarts, you will be able to create new applications or import
    existing applications. Creating a new application is straightforward. Perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **File** | **New** | **OpenShift Application**. Have a look at the
    following screenshot:![Using OpenShift Tools and Eclipse](img/6232OS_11_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be presented with a pop up allowing you to enter your OpenShift account's
    username and password. Enter your details and click on **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next screen will allow you to either download an existing application from
    the OpenShift cloud or create a new one. We will create a new one here and leave
    you to investigate the option of downloading an existing application if that is
    what you require. Look for WildFly 8 in the list of possible quickstart cartridges.
    Have a look at the following screenshot:![Using OpenShift Tools and Eclipse](img/6232OS_11_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Next, enter the name of your application, and select your gear profile.
    Have a look at the following screenshot:![Using OpenShift Tools and Eclipse](img/6232OS_11_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Next**, and **Next** again. Your new application is now complete
    and the gear is configured.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This tutorial is meant to be a brief introduction to the OpenShift Tools plugin.
    If you are interested in using OpenShift Tools, please refer to the online documentation
    at [http://docs.jboss.org/tools/4.1.0.Final/en/User_Guide/html_single/index.html#chap-OpenShift_Tools](http://docs.jboss.org/tools/4.1.0.Final/en/User_Guide/html_single/index.html#chap-OpenShift_Tools).
  prefs: []
  type: TYPE_NORMAL
- en: Scaling your application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Until now, we have mentioned some of the most essential features of the OpenShift
    platform. Although all the available options cannot be covered within a single
    chapter, there is one more feature that needs to be covered, which is application
    scaling.
  prefs: []
  type: TYPE_NORMAL
- en: 'For an application to be scalable, you must pass the `-s` switch as you create
    the application with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is not possible to make a non-scalable application scalable. To do this,
    you need to take a snapshot of the application, spin up a new scalable application,
    and then push your code to it.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have created a scalable application, it will automatically add nodes
    to the cluster when the number of concurrent requests exceed 90 percent of the
    maximum concurrent requests over one period. It will automatically scale down
    when the number of concurrent requests fall below 49.9 percent of the maximum
    concurrent requests over three consecutive periods.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also scale your application manually via the command line. To manually
    scale up your application, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'To manually scale down your application, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, you may want to disable or enable automatic scaling. This can also
    be achieved via the command line. To stop automatic scaling, run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'To start automatic scaling, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at an alternative to the traditional approach of
    hosting applications on a company's own infrastructure. The OpenShift platform
    offers free and paid versions of a PaaS that enables developers to deploy to the
    cloud without having to worry about downloading and managing the stack, writing
    scripts, or installing agents.
  prefs: []
  type: TYPE_NORMAL
- en: The OpenShift platform bears some similarities to other cloud solutions, such
    as MS Azure. Just like Azure, OpenShift is a service managed and run by the vendor.
    OpenShift provides the ability to quickly choose from multiple cartridges, each
    of which plugs in a resource required to run your application. With a single Git
    command, your source code is pushed to the gear, and your application is built
    and then deployed to the server.
  prefs: []
  type: TYPE_NORMAL
- en: There are several ways to manage your OpenShift gears. First, you can manage
    them via the command line. This is the best option as you have full control over
    your gears. Secondly, there is the web interface, which has limited functionality
    but is fine to quickly create a new application. Lastly, there is OpenShift Tools,
    which is part of JBoss Tools, a suite of plugins for Eclipse.
  prefs: []
  type: TYPE_NORMAL
- en: There are three options available when using OpenShift. OpenShift Online is
    a product that offers free and subscription-based services. All the gears are
    hosted on the public cloud. OpenShift Enterprise allows you to download a stable
    and supported version of OpenShift to be run on your own hardware. Finally, if
    you want the latest features (with only community support) or want to contribute
    to the development of OpenShift, there is OpenShift Origin.
  prefs: []
  type: TYPE_NORMAL
