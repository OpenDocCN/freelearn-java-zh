- en: '20'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '20'
- en: Monitoring Microservices
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务监控
- en: In this chapter, we will learn how to use Prometheus and Grafana to collect,
    monitor, and alert about performance metrics. As we mentioned in *Chapter 1*,
    *Introduction to Microservices*, in a production environment it is crucial to
    be able to collect metrics for application performance and hardware resource usage.
    Monitoring these metrics is required to avoid long response times or outages for
    API requests and other processes.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何使用Prometheus和Grafana收集、监控和警报性能指标。正如我们在*第1章*，*微服务简介*中提到的，在生产环境中，能够收集应用程序性能和硬件资源使用的指标至关重要。监控这些指标是避免API请求和其他过程出现长时间响应或中断的必要条件。
- en: To be able to monitor a system landscape of microservices in a cost-efficient
    and proactive way, we must also be able to define alarms that are triggered automatically
    if the metrics exceed the configured limits.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了以成本效益和主动的方式监控微服务系统景观，我们还必须能够定义当指标超过配置的限制时自动触发的警报。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Introduction to performance monitoring using Prometheus and Grafana
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Prometheus和Grafana的性能监控简介
- en: Changes in source code to collect application metrics
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收集应用程序指标的源代码更改
- en: Building and deploying the microservices
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建和部署微服务
- en: Monitoring microservices using Grafana dashboards
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Grafana仪表板监控微服务
- en: Setting up alarms in Grafana
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Grafana中设置警报
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For instructions on how to install the tools used in this book and how to access
    the source code for this book, see:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 关于如何安装本书中使用的工具以及如何访问本书源代码的说明，请参阅：
- en: '*Chapter 21*, *Installation Instructions for macOS*'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第21章*，*macOS的安装说明*'
- en: '*Chapter 22*, *Installation Instructions for Microsoft Windows with WSL 2 and
    Ubuntu*'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第22章*，*使用WSL 2和Ubuntu的Microsoft Windows安装说明*'
- en: The code examples in this chapter all come from the source code in `$BOOK_HOME/Chapter19`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的代码示例均来自`$BOOK_HOME/Chapter19`的源代码。
- en: If you want to view the changes applied to the source code in this chapter so
    that you can use Prometheus and Grafana to monitor and alert on performance metrics,
    you can compare it with the source code for *Chapter 19*, *Centralized Logging
    with the EFK Stack*. You can use your favorite diff tool and compare the two folders,
    `$BOOK_HOME/Chapter19` and `$BOOK_HOME/Chapter20`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想查看本章源代码中应用的变化，以便使用Prometheus和Grafana监控和警报性能指标，您可以将其与*第19章*，*使用EFK堆栈进行集中日志记录*的源代码进行比较。您可以使用您喜欢的diff工具比较两个文件夹，`$BOOK_HOME/Chapter19`和`$BOOK_HOME/Chapter20`。
- en: Introduction to performance monitoring using Prometheus and Grafana
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Prometheus和Grafana的性能监控简介
- en: In this chapter, we will reuse the deployment of Prometheus and Grafana that
    we created in *Chapter 18*, *Using a Service Mesh to Improve Observability and
    Management*, in the *Deploying Istio in a Kubernetes cluster* section. Also in
    that chapter, we were briefly introduced to Prometheus, a popular open source
    database for collecting and storing time series data such as performance metrics.
    We learned about Grafana, an open source tool to visualize performance metrics.
    With the Grafana deployment comes a set of Istio-specific dashboards. Kiali can
    also render some performance-related graphs without the use of Grafana. In this
    chapter, we will get some hands-on experience with these tools.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将重用我们在*第18章*，*在Kubernetes集群中部署Istio*部分中创建的Prometheus和Grafana的部署。在那章中，我们还简要介绍了Prometheus，这是一个流行的开源数据库，用于收集和存储时间序列数据，如性能指标。我们还了解了Grafana，这是一个开源工具，用于可视化性能指标。随着Grafana的部署，还附带了一套Istio特定的仪表板。Kiali也可以在不使用Grafana的情况下渲染一些与性能相关的图表。在本章中，我们将获得一些使用这些工具的实践经验。
- en: The Istio configuration we deployed in *Chapter 18* includes a configuration
    of Prometheus, which automatically collects metrics from Pods in Kubernetes. All
    we need to do is set up an endpoint in our microservice that produces metrics
    in a format Prometheus can consume. We also need to add annotations to the Kubernetes
    Pods so that Prometheus can find the address of these endpoints. See the *Changes
    in source code to collect application metrics* section of this chapter for details
    on how to set this up. To demonstrate Grafana’s capabilities to raise alerts,
    we will also deploy a local mail server.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在*第18章*中部署的Istio配置包括Prometheus的配置，该配置会自动从Kubernetes中的Pod收集指标。我们所需做的只是在我们微服务中设置一个端点，该端点以Prometheus可以消费的格式产生指标。我们还需要向Kubernetes
    Pods添加注释，以便Prometheus可以找到这些端点的地址。有关如何设置此配置的详细信息，请参阅本章的*源代码更改以收集应用程序指标*部分。为了展示Grafana提升警报的能力，我们还将部署一个本地邮件服务器。
- en: 'The following diagram illustrates the relationship between the runtime components
    we just discussed:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表说明了我们刚才讨论的运行时组件之间的关系：
- en: '![A screenshot of a computer  Description automatically generated with low
    confidence](img/B19825_20_01.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![计算机屏幕截图  描述由低置信度自动生成](img/B19825_20_01.png)'
- en: 'Figure 20.1: Adding Prometheus and Grafana to the system landscape'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.1：将Prometheus和Grafana添加到系统架构中
- en: Here, we can see how Prometheus uses the annotations in the definitions of the
    Kubernetes Pods to be able to collect metrics from our microservices. It then
    stores these metrics in its database. A user can access the web UIs of Kiali and
    Grafana to monitor these metrics in a **web browser**. The web browser uses the
    **minikube tunnel** that was introduced in *Chapter 18*, in the *Setting up access
    to Istio services* section, to access Kiali, Grafana, and also a web page from
    the mail server to see alerts sent out by Grafana.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到Prometheus如何使用Kubernetes Pods定义中的注释来收集我们的微服务指标。然后，它将这些指标存储在其数据库中。用户可以通过**网络浏览器**访问Kiali和Grafana的Web
    UI来监控这些指标。网络浏览器使用在第18章的*设置访问Istio服务*部分中介绍的**minikube隧道**来访问Kiali、Grafana，以及来自邮件服务器的网页，以查看Grafana发送的警报。
- en: Please remember that the configuration that was used to deploy Istio from *Chapter
    18* is only intended for development and testing, not production. For example,
    performance metrics stored in the Prometheus database will not survive the Prometheus
    Pod being restarted!
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，*第18章*中用于部署Istio的配置仅适用于开发和测试，而不是生产。例如，存储在Prometheus数据库中的性能指标将不会在Prometheus
    Pod重启后幸存！
- en: With the Istio version used in this book, v1.17.0, comes Grafana v9.0.1 and
    Prometheus v2.34.0\. In Grafana v8, a new alerting system was introduced. To support
    readers of this book that use older versions of Grafana than v8, the older way
    of configuring alerts will be used. Grafana will be configured to use the older
    alert system in the *Configuring Grafana* section below.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 本书使用的Istio版本为v1.17.0，Grafana版本为v9.0.1，Prometheus版本为v2.34.0。在Grafana v8中引入了新的警报系统。为了支持使用Grafana
    v8以下旧版本的本书读者，我们将使用旧的警报配置方式。在下面的*配置Grafana*部分中，Grafana将被配置为使用旧的警报系统。
- en: In the next section, we will look at what changes have been applied to the source
    code to make the microservices produce performance metrics that Prometheus can
    collect.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将查看对源代码进行了哪些更改，以便微服务产生Prometheus可以收集的性能指标。
- en: Changes in source code to collect application metrics
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 源代码更改以收集应用程序指标
- en: 'Spring Boot 2 introduced support for producing performance metrics in a Prometheus
    format using the **Micrometer** library ([https://micrometer.io](https://micrometer.io)).
    There’s only one change we need to make to the source code of the microservices:
    we need to add a dependency on the Micrometer library, `micrometer-registry-prometheus`,
    in the Gradle build files, `build.gradle`. The dependency looks like this:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot 2引入了对使用**Micrometer**库（[https://micrometer.io](https://micrometer.io)）以Prometheus格式产生性能指标的支持。我们只需要对微服务的源代码进行一个更改：我们需要在Gradle构建文件`build.gradle`中添加对Micrometer库`micrometer-registry-prometheus`的依赖项。依赖项看起来是这样的：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will make the microservices produce Prometheus metrics on port `4004` using
    the `/actuator/prometheus` path.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使微服务在端口`4004`上使用`/actuator/prometheus`路径产生Prometheus指标。
- en: In *Chapter 18*, we separated the management port, used by the actuator, from
    the port serving requests to APIs exposed by a microservice. See the *Observing
    the service mesh* section for a recap, if required.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 18 章，我们将管理端口（由 actuator 使用）与微服务暴露的 API 请求服务的端口分开。如需回顾，请参阅“观察服务网格”部分。
- en: 'To let Prometheus know about these endpoints, each microservice’s Pod is annotated
    with the following code:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让 Prometheus 了解这些端点，每个微服务的 Pod 都被注解了以下代码：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is added to the `values.yaml` file of each component’s Helm chart. See
    `kubernetes/helm/components`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这被添加到每个组件的 Helm 图表的 `values.yaml` 文件中。请参阅 `kubernetes/helm/components`。
- en: 'To make it easier to identify the source of the metrics once they have been
    collected by Prometheus, they are tagged with the name of the microservice that
    produced the metric. This is achieved by adding the following configuration to
    the common configuration file, `config-repo/application.yml`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在 Prometheus 收集指标后更容易识别其来源，它们被标记为生成该指标的微服务的名称。这是通过向通用配置文件 `config-repo/application.yml`
    添加以下配置来实现的：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This will result in each metric that’s produced having an extra label named
    `application`. It will contain the value of the standard Spring property for the
    name of a microservice, `spring.application.name`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致每个生成的指标都有一个额外的标签名为 `application`。它将包含微服务的标准 Spring 属性名称的值，即 `spring.application.name`。
- en: 'Finally, to ensure that we get metrics from the configured Prometheus endpoints,
    a test has been added to `test-em-all.bash`. It looks like:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了确保我们从配置的 Prometheus 端点获取指标，已在 `test-em-all.bash` 中添加了一个测试。它看起来像：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note that this test only runs if the test script is run against Kubernetes.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，只有当针对 Kubernetes 运行测试脚本时，此测试才会运行。
- en: These are all the changes that are required to prepare the microservices to
    produce performance metrics and make Prometheus aware of what endpoints to use
    to start collecting them. In the next section, we will build and deploy the microservices.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是准备微服务以生成性能指标并让 Prometheus 了解要使用哪些端点开始收集它们的必要更改。在下一节中，我们将构建和部署微服务。
- en: Building and deploying the microservices
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建和部署微服务
- en: 'Building, deploying, and verifying the deployment using the `test-em-all.bash`
    test script is done in the same way it was done in *Chapter 19*, *Centralized
    Logging with the EFK Stack*, in the *Building and deploying the microservices*
    section. Run the following commands:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `test-em-all.bash` 测试脚本构建、部署和验证部署的方式与第 19 章“使用 EFK 栈进行集中日志记录”中“构建和部署微服务”部分的方式相同。运行以下命令：
- en: 'Build the Docker images from the source with the following commands:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令从源构建 Docker 镜像：
- en: '[PRE4]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `eval $(minikube docker-env -u)` command ensures that the `./gradlew build`
    command uses the host’s Docker engine and not the Docker engine in the Minikube
    instance. The `build` command uses Docker to run test containers.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`eval $(minikube docker-env -u)` 命令确保 `./gradlew build` 命令使用主机的 Docker 引擎，而不是
    Minikube 实例中的 Docker 引擎。`build` 命令使用 Docker 来运行测试容器。'
- en: 'Recreate the namespace, `hands-on`, and set it as the default namespace:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新创建 `hands-on` 命名空间并将其设置为默认命名空间：
- en: '[PRE5]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Resolve the Helm chart dependencies with the following commands.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令解决 Helm 图表的依赖关系。
- en: 'First, we update the dependencies in the `components` folder:'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 首先，我们更新 `components` 文件夹中的依赖项：
- en: '[PRE6]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, we update the dependencies in the `environments` folder:'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来，我们更新 `environments` 文件夹中的依赖项：
- en: '[PRE7]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Deploy the system landscape using Helm and wait for all deployments to complete:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Helm 部署系统景观并等待所有部署完成：
- en: '[PRE8]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Start the Minikube tunnel, if it’s not already running, as follows (see the
    *Setting up access to Istio services* section, in *Chapter 18*, for a recap if
    you need one):'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '如果 Minikube 隧道尚未运行，请按照以下步骤启动（如需回顾，请参阅第 18 章“设置访问 Istio 服务”部分）： '
- en: '[PRE9]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Remember that this command requires that your user has `sudo` privileges and
    that you enter your password during startup. It takes a couple of seconds before
    the command asks for the password, so it is easy to miss!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，此命令需要您的用户具有 `sudo` 权限，并且在启动时输入您的密码。在命令请求密码之前需要几秒钟，所以很容易错过！
- en: 'Run the normal tests to verify the deployment with the following command:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行正常测试以验证部署：
- en: '[PRE10]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Expect the output to be similar to what we’ve seen in the previous chapters:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 预期输出将与我们在前几章中看到的结果相似：
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](img/B19825_20_02.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![计算机截图  描述由中等置信度自动生成](img/B19825_20_02.png)'
- en: 'Figure 20.2: All tests OK'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: With the microservices deployed, we can move on and start monitoring our microservices
    using Grafana!
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring microservices using Grafana dashboards
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we already mentioned in the introduction, Kiali provides some very useful
    dashboards out of the box. In general, they are focused on application-level performance
    metrics such as requests per second, response times, and fault percentages to
    process requests. As we will see shortly, they are very useful on an application
    level. But if we want to understand the usage of the underlying hardware resources,
    we need more detailed metrics, for example, Java VM-related metrics.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Grafana has an active community that, among other things, shares reusable dashboards.
    We will try out a dashboard from the community that’s tailored to get a lot of
    valuable Java VM-related metrics from a Spring Boot application such as our microservices.
    Finally, we will see how we can build our own dashboards in Grafana. But let’s
    start by exploring the dashboards that come out of the box in Kiali and Grafana.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we do that, we need to make two preparations:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Install a local mail server for tests and configure Grafana to be able to send
    alert emails to it. We will use the mail server in the *Setting up alarms in Grafana*
    section.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To be able to monitor some metrics, we will start the load test tool we used
    in previous chapters.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing a local mail server for tests
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will set up a local test mail server and configure Grafana
    to send alert emails to the mail server.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: 'Grafana can send emails to any SMTP mail server, but to keep the tests local,
    we will deploy a test mail server named `maildev`. Go through the following steps:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the test mail server in Istio’s namespace with the following commands:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To make the mail server’s web UI available from the outside of Minikube, a
    set of `Gateway`, `VirtualService`, and `DestinationRule` manifest files has been
    added for the mail server in Istio’s Helm chart. See the template `kubernetes/helm/environments/istio-system/templates/expose-mail.yml`.
    Run a `helm upgrade` command to apply the new manifest files:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Verify that the test mail server is up and running by visiting its web page
    at [https://mail.minikube.me](https://mail.minikube.me). Expect a web page such
    as the following to be rendered:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](img/B19825_20_03.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.3: Mail server web page'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: For more information on the mail server, see [https://hub.docker.com/r/maildev/maildev](https://hub.docker.com/r/maildev/maildev).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: With the mail server installed, we can configure Grafana in the next section
    to send emails to the server for alerts.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Grafana
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Configuring Grafana can be done by setting up environment variables in its
    Kubernetes Deployment object. To enable the old alert system and configure Grafana
    to send emails to the test mail server, run the following commands:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The variables `GF_ALERTING_ENABLED` and `GF_UNIFIED_ALERTING_ENABLED` are used
    to enable the use of the older alerting system mentioned in the *Introduction
    to performance monitoring using Prometheus and Grafana* section above. The `GF_SMTP_ENABLED`
    variable is used to allow Grafana to send emails. The `GF_SMTP_SKIP_VERIFY` variable
    is used to tell Grafana to skip SSL checks with the test mail server.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: The `GF_SMTP_HOST` variable points to our mail server and, finally, the `GF_SMTP_FROM_ADDRESS`
    variable specifies what “from” address to use in the mail.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: Now that Grafana has been configured, in the next section we will start the
    load test tool.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: Starting up the load test
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To have something to monitor, let’s start up the load test using Siege, which
    we used in previous chapters. Run the following commands to get an access token
    and then start up the load test, using the access token for authorization:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Remember that an access token is only valid for 1 hour – after that, you need
    to get a new one.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: Now, we are ready to learn about the dashboards in Kiali and Grafana and explore
    the Grafana dashboards that come with Istio.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: Using Kiali’s built-in dashboards
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *Chapter 18*, we learned about Kiali, but we skipped the part where Kiali
    shows performance metrics. Now, it’s time to get back to that subject!
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following steps to learn about Kiali’s built-in dashboards:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: Open the Kiali web UI in a web browser using the [https://kiali.minikube.me](https://kiali.minikube.me)
    URL. Log in with `admin`/`admin` if required.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To see our deployments, go to the workloads page by clicking on the **Workloads**
    tab from the menu on the left-hand side.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **product-composite** deployment by clicking on it.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **product-composite** page, select the **Outbound Metrics** tab. You
    will see a page like the following screenshot:![A screenshot of a computer  Description
    automatically generated with medium confidence](img/B19825_20_04.png)
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 20.4: Kiali outbound metrics'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Kiali will visualize some overall performance graphs that are of great value,
    and there are more graphs to explore. Feel free to try them out on your own!
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: However, far more detailed performance metrics are available in Grafana. Open
    the Grafana web UI in a web browser using the [https://grafana.minikube.me](https://grafana.minikube.me)
    URL.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be presented with a welcome page with the text **Welcome to Grafana**.
    Over the welcome text is a **Home** link; click on it and you will be presented
    with an overview of available dashboards. You will see a folder named **Istio**
    that contains the dashboards that were installed when Grafana was deployed together
    with Istio in *Chapter 18*. Click on the folder to expand it and select the dashboard
    named **Istio Mesh Dashboard**.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Expect a web page like the following:'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated](img/B19825_20_05.png)'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 20.5: Grafana showing Istio Mesh Dashboard'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This dashboard gives a very good overview of metrics for the microservices involved
    in the service mesh, like request rates, response times, and success rates.
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'There are a lot of detailed performance metrics available. Go back to the **Istio**
    folder (click on **Istio** in the top menu) and select the dashboard named **Istio
    Workload Dashboard****.** Select the **hands-on** namespace and the **product-composite**
    workload. Finally, expand the **Outbound Services** tab. The web page should look
    like the following screenshot:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated](img/B19825_20_06.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.6: Grafana with a lot of metrics for a microservice'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: The page displays metrics like response codes, duration, and bytes sent per
    destination. Feel free to look around among the remaining dashboards provided
    by Istio!
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: As we’ve already mentioned, the Istio dashboards give a very good overview at
    an application level. But there is also a need to monitor the metrics for hardware
    usage per microservice. In the next section, we will learn about how existing
    dashboards can be imported – specifically, a dashboard showing Java VM metrics
    for a Spring Boot-based application.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Importing existing Grafana dashboards
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we’ve already mentioned, Grafana has an active community that shares reusable
    dashboards. They can be explored at [https://grafana.com/grafana/dashboards](https://grafana.com/grafana/dashboards).
    We will try out a dashboard called **JVM (Micrometer) - Kubernetes - Prometheus
    by Istio** that’s tailored to get a lot of valuable JVM-related metrics from Spring
    Boot applications in a Kubernetes environment. The link to the dashboard is [https://grafana.com/grafana/dashboards/11955](https://grafana.com/grafana/dashboards/11955).
    Perform the following steps to import this dashboard:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the dashboard named **JVM (Micrometer)** by following these steps:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the Grafana web page, hover the mouse over the **Dashboard** icon (four squares)
    in the menu to the left. Select **+ Import** from the menu that pops up.
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Import** page, enter the dashboard ID `11955` into the **Import via
    grafana.com** field and click on the **Load** button next to it.
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Import** page that will be displayed, click on the **Prometheus** drop-down
    menu and select the **Prometheus** data source.
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, by clicking on the **Import** button, the **JVM (Micrometer)** dashboard
    will be imported and rendered.
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inspect the **JVM (Micrometer)** dashboard by following these steps:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To get a good view of the metrics, use the time picker (in the top-right corner)
    to select **Last 5 minutes**, and select a refresh rate of **5s** in the dropdown
    to the right.
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Application** drop-down menu, which can be found at the top-left of
    the page, select the **product-composite** microservice.
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Since we are running a load test using Siege in the background, we will see
    a lot of metrics. The following is a sample screenshot:'
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated](img/B19825_20_07.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.7: Grafana showing Java VM metrics'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: In this dashboard, we can find all types of Java VM relevant metrics for, among
    other things, CPU, memory, heap, and I/O usage, as well as HTTP-related metrics
    such as requests/second, average duration, and error rates. Feel free to explore
    these metrics on your own!
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: Being able to import existing dashboards is of great value when we want to get
    started quickly. However, what’s even more important is to know how to create
    our own dashboard. We will learn about this in the next section.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: Developing your own Grafana dashboards
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Getting started with developing Grafana dashboards is straightforward. The important
    thing for us to understand is what metrics Prometheus makes available for us.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will learn how to examine the available metrics. Based on
    these, we will create a dashboard that can be used to monitor some of the more
    interesting metrics.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: Examining Prometheus metrics
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Earlier, in the *Changes in source code to collect application metrics* section,
    we configured Prometheus to collect metrics from our microservices. We can make
    a call to the same endpoint and see what metrics Prometheus collects. Run the
    following command:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Expect a lot of output from the command, as in the following example:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '![A screen shot of a computer  Description automatically generated with medium
    confidence](img/B19825_20_08.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.8: Prometheus metrics'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: 'Among all of the metrics that are reported, there are two very interesting
    ones:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '`resilience4j_retry_calls`: Resilience4j reports on how the retry mechanism
    operates. It reports four different values for successful and failed requests,
    combined with and without retries.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resilience4j_circuitbreaker_state`: Resilience4j reports on the state of the
    circuit breaker.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that the metrics have a label named `application`, which contains the name
    of the microservice. This field comes from the configuration of the `management.metrics.tags.application`
    property, which we did in the *Changes in source code to collect application metrics*
    section.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: These metrics are interesting to monitor. None of the dashboards we have used
    so far use metrics from Resilience4j. In the next section, we will create a dashboard
    for these metrics.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: Creating the dashboard
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this section, we will learn how to create a dashboard that visualizes the
    Resilience4j metrics we described in the previous section.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: 'We will set up the dashboard in the following stages:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: Creating an empty dashboard
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new panel for the circuit breaker metric
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new panel for the retry metric
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arranging the panels
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an empty dashboard
  id: totrans-149
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Perform the following steps to create an empty dashboard:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: 'On the Grafana web page, hover the mouse over the **Dashboard** icon (four
    squares) in the menu to the left. Select **+ New Dashboard** from the menu that
    pops up. A web page named **New dashboard** will be displayed:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A screenshot of a phone  Description automatically generated with low confidence](img/B19825_20_09.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.9: Creating a new dashboard in Grafana'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the Dashboard settings button (it has a gear as its icon), in the
    menu shown in the preceding screenshot. Then, follow these steps:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify the name of the dashboard in the **Name** field and set the value to
    `Hands-on Dashboard`.
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the top-left back button on the web page (not to be mixed up with the
    web browser’s back button).
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the time picker and select **Last 5 minutes** as the range.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the refresh rate icon to the right and specify **5s** as the refresh
    rate.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a new panel for the circuit breaker metric
  id: totrans-159
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Perform the following steps to create a new panel for the circuit breaker metric:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: In the **Add panel** section, click on the **Add a new panel** button.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A page will be displayed where the new panel can be configured.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: In the tab to the right, set the **Panel title** to `Circuit Breaker`.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Also in the tab to the right, set the **Tooltip mode** to **All**.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the bottom-left **Query** panel, under the letter **A**, specify the query
    as the name of the circuit breaker metric for the **closed** state, as follows:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Metric** to `resilience4j_circuitbreaker_state`.
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Label** to **state** and specify that it shall be equal to **closed**.
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that the **Raw query** is set to `resilience4j_circuitbreaker_state{state="closed"}`.
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand the **Options** tab, and in the **Legend** drop-down box, select **Custom**.
    In the **Legend** field, specify the value `{{state}}`. This will create a legend
    in the panel where the names of the different states are displayed.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The filled-in values should look as follows:'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](img/B19825_20_10.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.10: Specifying circuit breaker metrics in Grafana'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **+ Query** button at the bottom of the page to enter a new query
    under **B** for the **open** state. Repeat the steps for query **A**, but set
    the state’s value to **open**. Verify that the **Raw query** field is set to `resilience4j_circuitbreaker_state{state="open"}`
    and set the **Legend** field to `{{state}}`.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **+ Query** button a final time to enter a new query under **C**
    for the **half_open** state. Set the state’s value to `half_open`, and verify
    that the **Raw query** field is set to `resilience4j_circuitbreaker_state{state="half_open"}`
    and set the **Legend** field to `{{state}}`.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the back button at the top left of the page to get back to the dashboard.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a new panel for the retry metric
  id: totrans-176
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here, we will repeat the same procedure that we went through to add a panel
    for the preceding circuit breaker metric, but instead, we will specify the values
    for the retry metrics:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: Create a new panel by clicking on the **Add panel** icon (a chart with a plus
    sign) in the top-level menu, and click on **Add a new panel** in the new panel.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify `Retry` as the **Panel title**, and the **Tooltip mode** as **All**
    in the same way as for the previous panel.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Metric** to `resilience4j_retry_calls_total`.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Since the retry metric is a counter, its value will only go up. An ever-increasing
    metric is rather uninteresting to monitor. Therefore, a **rate** function is used
    to convert the retry metric into a rate-per-second metric. The time window specified,
    that is, `30s`, is used by the rate function to calculate the average values of
    the rate. To apply the rate function:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **+ Operations** button.
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Range functions** and select the **Rate** function.
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Range** to **30s**.
  id: totrans-184
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Raw query** field, verify that it is set to `rate(resilience4j_retry_calls_total[30s])`.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand the **Options** tab, and in the **Legend** drop-down box, select **Custom**.
    In the **Legend** field, specify the value `{{kind}}`. This will create a legend
    in the panel where the names of the different kinds of retries are displayed.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that Grafana immediately starts to render a graph in the panel editor based
    on the specified values.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the back button to get back to the dashboard.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Arranging the panels
  id: totrans-189
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Perform the following steps to arrange the panels on the dashboard:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: You can resize a panel by dragging its lower right-hand corner to the preferred
    size.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can also move a panel by dragging its header to the desired position.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following is an example layout of the two panels:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated](img/B19825_20_11.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.11: Moving and resizing a panel in Grafana'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: Since this screenshot was taken with Siege running in the background, the **Retry**
    panel reports `successful_without_retry` metrics, while the **Circuit Breaker**
    reports that **closed**equals**1** and **open** and **half_open**equal**0**, meaning
    that it is closed and operating normally (something that is about to change in
    the next section).
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: Finally, click on the **Save** button at the top of the page. A **Save dashboard
    as...** dialog will show up; ensure that the name is **Hands-on Dashboard** and
    hit the **Save** button.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you get stuck when configuring the dashboard, take a look at the end of the
    *Trying out the circuit breaker alarm* section. There is an easy solution described.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: With the dashboard created, we are ready to try it out. In the next section,
    we will try out both metrics.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: Trying out the new dashboard
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before we start testing the new dashboard, we must stop the load test tool,
    Siege. To do this, go to the command window where Siege is running and press **Ctrl
    + C** to stop it.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start by testing how to monitor the circuit breaker. Afterward, we will
    try out the retry metrics.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: Testing the circuit breaker metrics
  id: totrans-203
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If we force the circuit breaker to open up, its state will change from **closed**
    to **open**, and then eventually to the **half-open** state. This should be reported
    in the circuit breaker panel.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the circuit, just like we did in *Chapter 13*, *Improving Resilience Using
    Resilience4j*, in the *Trying out the circuit breaker and retry mechanism* section
    – that is, make some requests to the API in a row, all of which will fail. Run
    the following commands:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We can expect three `500` responses and a final `200`, indicating three errors
    in a row, which is what it takes to open the circuit breaker. The last `200` indicates
    a **fail-fast** response from the `product-composite` microservice when it detects
    that the circuit is open.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: On some rare occasions, I have noticed that the circuit breaker metrics are
    not reported in Grafana directly after the dashboard is created. If they don’t
    show up after a minute, simply rerun the preceding command to reopen the circuit
    breaker again.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: Expect the value for the **closed** state to drop to **0** and the **open**
    state to take the value **1**, meaning that the circuit is now open. After 10s,
    the circuit will turn to the half-open state, indicated by the **half-open** metrics
    having the value **1** and **open** being set to **0**. This means that the circuit
    breaker is ready to test some requests to see if the problem that opened the circuit
    is gone.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: 'Close the circuit breaker again by issuing three successful requests to the
    API with the following command:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We will get only `200` responses. Note that the circuit breaker metric goes
    back to normal again, meaning that the **closed** metric goes back to **1**.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: 'After this test, the Grafana dashboard should look as follows:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated with low
    confidence](img/B19825_20_12.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.12: Retries and Circuit Breaker in action as viewed in Grafana'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: From the preceding screenshot, we can see that the retry mechanism also reports
    metrics that succeeded and failed. When the circuit was opened, all requests failed
    without retries. When the circuit was closed, all requests were successful without
    any retries. This is as expected.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have seen the circuit breaker metrics in action, let’s see the retry
    metrics in action!
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to check the state of the circuit breaker, you can do it with the
    following command:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: It should report `CLOSED`, `OPEN`, or `HALF_OPEN`, depending on its state.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: Testing the retry metrics
  id: totrans-221
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To trigger the retry mechanism, we will use the `faultPercentage` parameter
    we used in previous chapters. To avoid triggering the circuit breaker, we need
    to use relatively low values for the parameter. Run the following command:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This command will call the API once every third second. It specifies that 10%
    of the requests should fail so that the retry mechanism will kick in and retry
    the failed requests.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: 'After a few minutes, the dashboard should report metrics such as the following:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](img/B19825_20_13.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.13: Result of retry tests viewed in Grafana'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding screenshot, we can see that most of the requests have been
    executed successfully, without any retries. Approximately 10% of the requests
    have been retried by the retry mechanism and successfully executed after the retry.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: Before we leave the section on creating dashboards, we will learn how we can
    export and import dashboards.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: Exporting and importing Grafana dashboards
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once a dashboard has been created, we typically want to take two actions:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: Save the definition of the dashboard as source code in a Git repo
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Move the dashboard to other Grafana instances, for example, those used in QA
    and production environments
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To perform these actions, we can use Grafana’s API for exporting and importing
    dashboards. Since we only have one Grafana instance, we will perform the following
    steps:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: Export the dashboard to a JSON file.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the dashboard.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the dashboard from the JSON file.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Before we perform these steps, we need to understand the two different types
    of IDs that a dashboard has:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: '`id`, an auto-incremented identifier that is unique only within a Grafana instance.'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`uid`, a unique identifier that can be used in multiple Grafana instances.
    It is part of the URL when accessing dashboards, meaning that links to a dashboard
    will stay the same as long as the `uid` of a dashboard remains the same. When
    a dashboard is created, a random `uid` is created by Grafana.'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When we import a dashboard, Grafana will try to update it if the `id` field
    is set. To be able to test importing a dashboard in a Grafana instance that doesn’t
    have the dashboard already installed, we need to set the `id` field to `null`.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following actions to export and then import your dashboard:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: Identify the `uid` of your dashboard.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `uid` value can be found in the URL in the web browser where the dashboard
    is shown. It will look like this:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The `uid` in the URL above is `YMcDoBg7k`. In a terminal window, create a variable
    with its value. In my case, it will be:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Export the dashboard to a JSON file with the following command:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The `curl` command exports the dashboard to the JSON format. The `jq` statement
    sets the `id` field to `null`, and the output from the `jq` command is written
    to a file named `Hands-on-Dashboard.json`.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: Delete the dashboard.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the web browser, select **Dashboards** and **Browse** in the menu to the
    left. Identify the **Hands-on Dashboard** in the list of dashboards and select
    it by clicking on the checkbox in front of it. A red **Delete** button will be
    shown; click on it, and then click on the new **Delete** button that is shown
    in the confirm dialog box that pops up.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: 'Recreate the dashboard by importing it from the JSON file with the following
    command:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Note that the URL used to access the dashboard is still valid, in my case, [https://grafana.minikube.me/d/YMcDoBg7k/hands-on-dashboard](https://grafana.minikube.me/d/YMcDoBg7k/hands-on-dashboard).
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: Verify that the imported dashboard reports metrics in the same way as before
    it was deleted and re-imported. Since the request loop started in the *Testing
    the retry metrics* section is still running, the same metrics from that section
    should be reported.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For more information regarding Grafana’s APIs, see [https://grafana.com/docs/grafana/v9.0/developers/http_api/dashboard/#get-dashboard-by-uid](https://grafana.com/docs/grafana/v9.0/developers/http_api/dashboard/#get-dashboard-by-uid).
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: Before proceeding to the next section, remember to stop the request loop that
    we started for the retry test by pressing *Ctrl* + *C* in the terminal window
    where the request loop executes!
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will learn how to set up alarms in Grafana, based on
    these metrics.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: Setting up alarms in Grafana
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Being able to monitor the circuit breaker and retry metrics is of great value,
    but even more important is the capability to define automated alarms on these
    metrics. Automated alarms relieve us from monitoring the metrics manually.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: Grafana comes with built-in support to define alarms and send notifications
    to a number of channels. In this section, we will define alerts on the circuit
    breaker and configure Grafana to send emails to the test mail server when alerts
    are raised. The local test mail server was installed earlier in the *Installing
    a local mail server for tests* section.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: For other types of channels supported by the version of Grafana used in this
    chapter, see [https://grafana.com/docs/grafana/v7.2/alerting/notifications/#list-of-supported-notifiers](https://grafana.com/docs/grafana/v7.2/alerting/notifications/#list-of-supported-notifiers).
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will define a mail-based notification channel that will
    be used by the alert in the section after this.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a mail-based notification channel
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To configure a mail-based notification channel in Grafana, perform the following
    steps:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: On the Grafana web page, on the menu to the left, click on the Alertingmenu
    choice (with an alarm bell as its icon) and select **Notification channels**.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add channel** button.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the name to `mail`.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the type as **Email**.
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter an email address of your choice. Emails will only be sent to the local
    test mail server, independent of the email address that’s specified.
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand **Notification settings** and select **Default (Use this notification
    for all alerts)**.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The configuration of the notification channel should look as follows:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](img/B19825_20_14.png)'
  id: totrans-274
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.14: Setting up an email-based notification channel'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Test** button to send a test mail.
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Save** button.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Dashboard** button in the left-hand side menu and then on the
    **Browse** menu entry.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Hands-on Dashboard** from the list to get back to the dashboard.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check the test mail server’s web page to ensure that we have received a test
    email. You should receive the following:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](img/B19825_20_15.png)'
  id: totrans-281
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.15: Verifying the test mail on the mail server’s web page'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: With a notification channel in place, we are ready to define an alert on the
    circuit breaker.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: Setting up an alarm on the circuit breaker
  id: totrans-284
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To create an alarm on the circuit breaker, we need to create the alert and then
    add an alert list to the dashboard, where we can see what alert events have occurred
    over time.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to create an alert for the circuit breaker:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: In the **Hands-on Dashboard**, click on the header of the **Circuit Breaker**
    panel. A drop-down menu will appear.
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Edit** menu option.
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Alert** tab in the tab list (shown as an alarm bell icon).
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Create Alert** button.
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Evaluate every** field, set the value to `10s`.
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **For** field, set the value to `0m`.
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Conditions** section, specify the following values:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the **WHEN** field, select `max()`
  id: totrans-294
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the **OF** field to `query(A, 10s, now)`
  id: totrans-295
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Change **IS ABOVE** to **IS BELOW**, and set its value to `0.5`
  id: totrans-296
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: These settings will result in an alert being raised if the **closed** state
    (related to the `A` variable) goes below 0.5 during the last 10 seconds. When
    the circuit breaker is closed, this variable has the value 1, and 0 otherwise.
    So, this means that an alert is raised when the circuit breaker is no longer closed.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: 'Scroll down to the **Notifications** section to confirm that the notification
    will be sent to the default notification channel, that is, the mail channel we
    defined previously. The alarm definition should look as follows:'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](img/B19825_20_16.png)'
  id: totrans-299
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.16: Setting up an alarm in Grafana, part 1'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Save** button (top-right), enter a note like `Added an alarm`,
    and then click on the **Save** button.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the back button (left arrow) to get back to the dashboard.
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, we need to perform the following steps to create an alarm list:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Add panel** button in the top-level menu.
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add new panel** button in the new panel.
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the top-right corner, click on the **Time series** drop-down button and select
    the **Alert list** option.
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the tab to the right, do the following:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `Circuit Breaker Alerts` as the **Panel title**.
  id: totrans-308
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Option** section, set the **Show** field to the value **Recent state
    changes**.
  id: totrans-309
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, enable the toggle switch named **Alerts from this dashboard**.
  id: totrans-310
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand the **Visualization** row below the **Settings** row and select **Alert
    list**.
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Panel** **options** row below, set the **Show** field to **Recent state
    changes**, set **Max items** to `10`, and enable the option **Alerts from this
    dashboard**.
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The settings should look as follows:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](img/B19825_20_17.png)'
  id: totrans-314
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.17: Setting up an alarm in Grafana, part 2'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: Click on the back button to get back to the dashboard.
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rearrange the panel to suit your needs.
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the changes to the dashboard with a note like `Added an alert list`.
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is a sample layout with the alarm list added:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a device  Description automatically generated with medium
    confidence](img/B19825_20_18.png)'
  id: totrans-320
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.18: Setting up a layout in Grafana with Retry, Circuit Breaker, and
    alert panels'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: We can see that the circuit breaker reports the metrics as healthy (with a green
    heart icon) and that the alert list is currently empty.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: Now, it’s time to try out the alarm!
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: Trying out the circuit breaker alarm
  id: totrans-324
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here, we will repeat the tests from the *Testing the circuit breaker metrics*
    section, but this time, we expect alarms to be raised and emails to be sent as
    well! Let’s get started:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: 'Acquire a new access token, if required (valid for 1 hour):'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Open the circuit breaker as we did before:'
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The dashboard should report the circuit as open as it did previously. After
    a few seconds, an alarm should be raised, and an email is also sent. Expect the
    dashboard to look like the following screenshot (you might need to refresh the
    web page to make the alert show up):'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a device  Description automatically generated with low confidence](img/B19825_20_19.png)'
  id: totrans-331
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.19: Alarm raised in Grafana'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: Take note of the alarm icon in the header of the circuit breaker panel (a red
    broken heart). The red line marks the time of the alert event and that an alert
    has been added to the alert list.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: 'In the test mail server, you should see an email, as shown in the following
    screenshot:'
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated](img/B19825_20_20.png)'
  id: totrans-335
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.20: Alarm email'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: 'Great! We got alarms, just like we expected! Now, close the circuit with the
    following command, simulating that the problem is gone:'
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The **closed** metric should go back to normal, that is, **1**, and the alert
    should turn green again.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: 'Expect the dashboard to look like the following screenshot:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a device  Description automatically generated with low confidence](img/B19825_20_21.png)'
  id: totrans-341
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.21: Error resolved as reported in Grafana'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: Note that the alarm icon in the header of the circuit breaker panel is green
    again; the green line marks the time of the **OK** event and that it has been
    added to the alert list.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: 'In the test mail server, you should see an email, as shown in the following
    screenshot:'
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](img/B19825_20_22.png)'
  id: totrans-345
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.22: Error resolved as reported in an email'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: That completes how to monitor microservices using Prometheus and Grafana.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to export the configuration of the mail notification, you can do
    that with the following command:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'To import it, the following command can be used:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: For your convenience, the folder `$BOOK_HOME/Chapter20/kubernetes/grafana/api-export-import`
    contains export files for both the mail notifier and the dashboard that we learned
    how to export and import in the *Exporting and importing Grafana dashboards* section.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-353
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to use Prometheus and Grafana to collect and
    monitor alerts on performance metrics.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: We saw that, to collect performance metrics, we can use Prometheus in a Kubernetes
    environment. We then learned how Prometheus can automatically collect metrics
    from a Pod when a few Prometheus annotations are added to the Pod’s definition.
    To produce metrics in our microservices, we used Micrometer.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: Then, we saw how we can monitor the collected metrics using dashboards in both
    Kiali and Grafana, which comes with the installation of Istio. We also experienced
    how to consume dashboards shared by the Grafana community, and learned how to
    develop our own dashboards, where we used metrics from Resilience4j to monitor
    the usage of its circuit breaker and retry mechanisms. Using the Grafana API,
    we can export created dashboards and import them into other Grafana instances.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we learned how to define alerts on metrics in Grafana and how to use
    Grafana to send out alert notifications. We used a local test mail server to receive
    alert notifications from Grafana as emails.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: The next two chapters should already be familiar to you, covering the installation
    of tools on a Mac or Windows PC. Instead, head over to the last chapter in this
    book, which will introduce how we can compile our Java-based microservices into
    binary executable files using the brand-new **Spring Native** project, still in
    beta at the time of writing. This will enable the microservices to start up in
    a fraction of a second, but increased complexity and time are involved when it
    comes to building them.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-359
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What changes did we need to make to the source code in the microservices to
    make them produce metrics that are consumed by Prometheus?
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the `management.metrics.tags.application` config parameter used for?
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you want to analyze a support case regarding high CPU consumption, which
    of the dashboards in this chapter would you start with?
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you want to analyze a support case regarding slow API responses, which of
    the dashboards in this chapter would you start with?
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the problem with counter-based metrics such as Resilience4j’s retry
    metrics, and what can be done so that we can monitor them in a useful way?
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is going on here?
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19825_20_23.png)'
  id: totrans-366
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.23: What is going on here?'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are reading this with screenshots rendered in grayscale, it might be
    hard to figure out what the metrics say. So, here’s some help:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: 'The state transitions reported by the circuit breaker are, in order:'
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**half_open** → **open**'
  id: totrans-370
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**open** → **half_open**'
  id: totrans-371
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**half_open** → **closed**'
  id: totrans-372
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The retry mechanism reports:'
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An initial burst of requests, where most of them are reported as **failed_without_retry**
    and a few are reported as **successful_without_retry**.
  id: totrans-374
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: A second burst of requests, all reported as **successful_without_retry**.
  id: totrans-375
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Join our community on Discord
  id: totrans-376
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Join our community’s Discord space for discussion with the author and other
    readers:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/SpringBoot3e](https://packt.link/SpringBoot3e)'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code1849216352344398875.png)'
  id: totrans-379
  prefs: []
  type: TYPE_IMG
