["```java\n    <span class=\"strong\"><strong>    activator \"~run\"</strong></span>\n    ```", "```java\n    \"org.springframework\" % \"spring-context\" % \"3.2.2.RELEASE\",\n        \"org.springframework\" % \"spring-aop\" % \"3.2.2.RELEASE\",\n        \"org.springframework\" % \"spring-expression\" % \"3.2.2.RELEASE\"\n    ```", "```java\n    package controllers;\n         import play.*;\n        import play.mvc.*;\n        import org.springframework.beans.factory.annotation.Autowired;\n        import services.AdminService;\n         @org.springframework.stereotype.Controller\n        public class AdminController {\n           @Autowired\n          private AdminService adminService;\n           public Result index() {\n            return play.mvc.Controller.ok(\"This is an admin-only resource: \" + adminService.getFoo());\n          }\n        }\n    ```", "```java\n    // AdminService.java\n        package services;\n         public interface AdminService {\n          String getFoo();\n        }\n         // AdminServiceImpl.java\n        package services;\n         import org.springframework.stereotype.Service;\n         @Service\n        public class AdminServiceImpl implements AdminService {\n          @Override\n          public String getFoo() {\n            return \"foo\";\n          }\n        }\n    ```", "```java\n    GET     /admins     @controllers.AdminController.index\n    ```", "```java\n    import org.springframework.context.ApplicationContext;\n        import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n        import play.Application;\n        import play.GlobalSettings;\n           public class Global extends GlobalSettings {\n          private ApplicationContext ctx;\n           @Override\n          public void onStart(Application app) {\n            ctx = new AnnotationConfigApplicationContext(SpringConfig.class);\n          }\n           @Override\n          public &lt;A&gt; A getControllerInstance(Class&lt;A&gt; clazz) {\n            return ctx.getBean(clazz);\n          }\n        }\n    ```", "```java\n    import org.springframework.context.annotation.ComponentScan;\n        import org.springframework.context.annotation.Configuration;\n         @Configuration\n        @ComponentScan({\"controllers\", \"services\"})\n        public class SpringConfig {\n        }\n    ```", "```java\n    <span class=\"strong\"><strong>    $ curl -v http://localhost:9000/admins</strong></span>\n    <span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>    *   Trying ::1...</strong></span>\n    <span class=\"strong\"><strong>    * Connected to localhost (::1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>    &gt; GET /admins HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>    &gt;</strong></span>\n    <span class=\"strong\"><strong>    &lt; HTTP/1.1 200 OK</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Type: text/plain; charset=utf-8</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Length: 35</strong></span>\n    <span class=\"strong\"><strong>    &lt;</strong></span>\n    <span class=\"strong\"><strong>    * Connection #0 to host localhost left intact</strong></span>\n    <span class=\"strong\"><strong>    This is an admin-only resource: foo%</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    activator \"~run\"</strong></span>\n    ```", "```java\n    \"org.springframework\" % \"spring-context\" % \"3.2.2.RELEASE\"\n    ```", "```java\n    package controllers\n            import play.api.mvc.{Action, Controller}\n           import services.AdminService\n            class AdminController(implicit adminService: AdminService) extends Controller {\n             def index = Action {\n               Ok(\"This is an admin-only resource: %s\".format(adminService.foo))\n             }\n           }\n    ```", "```java\n    package services\n         class AdminService {\n          def foo = \"foo\"\n        }\n    ```", "```java\n    GET     /admins                    @controllers.AdminController.index\n    ```", "```java\n    import org.springframework.context.ApplicationContext\n        import org.springframework.context.annotation.AnnotationConfigApplicationContext\n         object Global extends play.api.GlobalSettings {\n           private val ctx: ApplicationContext = new AnnotationConfigApplicationContext(classOf[SpringConfig])\n           override def getControllerInstance[A](clazz: Class[A]): A = {\n            return ctx.getBean(clazz)\n          }\n        }\n    ```", "```java\n    import org.springframework.context.annotation.Configuration\n        import org.springframework.context.annotation.Bean\n        import controllers._\n        import services._\n         @Configuration\n        class SpringConfig {\n          @Bean\n          implicit def adminService: AdminService = new AdminService\n           @Bean\n          def adminController: AdminController = new AdminController\n        }\n    ```", "```java\n    <span class=\"strong\"><strong>    $ curl -v http://0.0.0.0:9000/admins</strong></span>\n    <span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>    *   Trying 0.0.0.0...</strong></span>\n    <span class=\"strong\"><strong>    * Connected to 0.0.0.0 (127.0.0.1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>    &gt; GET /admins HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; Host: 0.0.0.0:9000</strong></span>\n    <span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>    &gt;</strong></span>\n    <span class=\"strong\"><strong>    &lt; HTTP/1.1 200 OK</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Type: text/plain; charset=utf-8</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Length: 35</strong></span>\n    <span class=\"strong\"><strong>    &lt;</strong></span>\n    <span class=\"strong\"><strong>    * Connection #0 to host 0.0.0.0 left intact</strong></span>\n    <span class=\"strong\"><strong>    This is an admin-only resource: foo%</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    activator \"~run\"</strong></span>\n    ```", "```java\n    \"com.google.inject\" % \"guice\" % \"3.0\"\n    ```", "```java\n    import com.google.inject.AbstractModule;\n        import com.google.inject.Guice;\n        import com.google.inject.Injector;\n        import com.google.inject.Singleton;\n        import play.GlobalSettings;\n        import services.*;\n         public class Global extends GlobalSettings {\n          private Injector injector = Guice.createInjector(new AbstractModule() {\n            @Override\n            protected void configure() {\n               bind(CategoryService.class).to(\n          CategoryServiceImpl.class).in(Singleton.class);\n            }\n          });\n           @Override\n          public &lt;T&gt; T getControllerInstance(Class&lt;T&gt; clazz) {\n            return injector.getInstance(clazz);\n          }\n       }\n    ```", "```java\n    package controllers;\n         import com.google.inject.Inject;\n        import play.libs.Json;\n        import play.mvc.Controller;\n        import play.mvc.Result;\n        import services.CategoryService;\n         public class CategoryController extends Controller {\n          @Inject\n          private CategoryService categoryService;\n           public Result index() {\n            return ok(Json.toJson(categoryService.list()));\n          }\n        }\n    ```", "```java\n    package services;\n         import java.util.List;\n         public interface CategoryService {\n          List&lt;String&gt; list();\n        }\n    ```", "```java\n    package services;\n         import java.util.Arrays;\n        import java.util.List;\n         public class CategoryServiceImpl implements CategoryService {\n          @Override\n          public List&lt;String&gt; list() {\n            return Arrays.asList(new String[] {\"Manager\", \"Employee\", \"Contractor\"});\n          }\n        }\n    ```", "```java\n    GET  /categories    @controllers.CategoryController.index\n    ```", "```java\n    $ curl -v http://localhost:9000/categories\n        * Hostname was NOT found in DNS cache\n        *   Trying ::1...\n        * Connected to localhost (::1) port 9000 (#0)\n        &gt; GET /categories HTTP/1.1\n        &gt; User-Agent: curl/7.37.1\n        &gt; Host: localhost:9000\n        &gt; Accept: */*\n        &gt;\n        &lt; HTTP/1.1 200 OK\n        &lt; Content-Type: application/json; charset=utf-8\n        &lt; Content-Length: 35\n        &lt;\n        * Connection #0 to host localhost left intact\n        [\"Manager\",\"Employee\",\"Contractor\"]%\n    ```", "```java\n    <span class=\"strong\"><strong>    activator \"~run\"</strong></span>\n    ```", "```java\n    \"com.google.inject\" % \"guice\" % \"3.0\"\n    ```", "```java\n    import com.google.inject.{Guice, AbstractModule}\n        import play.api.GlobalSettings\n        import services._\n         object Global extends GlobalSettings {\n          val injector = Guice.createInjector(new AbstractModule {\n            protected def configure() {\n              bind(classOf[CategoryService]).to(classOf[CategoryServiceImpl])\n            }\n          })\n           override def getControllerInstance[A](controllerClass: Class[A]): A = {\n            injector.getInstance(controllerClass)\n          }\n        }\n    ```", "```java\n    package controllers\n            import play.api.mvc._\n           import play.api.libs.json.Json._\n           import com.google.inject._\n           import services._\n            @Singleton\n           class CategoryController @Inject()(categoryService: CategoryService) \n          extends Controller {\n           def index = Action {\n        Ok(toJson(categoryService.list))\n          }\n           }\n    ```", "```java\n    package services\n         trait CategoryService {\n       def list: Seq[String]\n        }\n         class CategoryServiceImpl extends CategoryService {\n       override def list: Seq[String] = Seq(\"Manager\", \"Employee\", \"Contractor\")\n        }\n    ```", "```java\n    GET  /categories    @controllers.CategoryController.index\n    ```", "```java\n    $ curl -v http://localhost:9000/categories\n        * Hostname was NOT found in DNS cache\n        *   Trying ::1...\n        * Connected to localhost (::1) port 9000 (#0)\n        &gt; GET /categories HTTP/1.1\n        &gt; User-Agent: curl/7.37.1\n        &gt; Host: localhost:9000\n        &gt; Accept: */*\n        &gt;\n        &lt; HTTP/1.1 200 OK\n        &lt; Content-Type: application/json; charset=utf-8\n        &lt; Content-Length: 35\n        &lt;\n        * Connection #0 to host localhost left intact\n        [\"Manager\",\"Employee\",\"Contractor\"]%\n    ```", "```java\n    <span class=\"strong\"><strong>    activator \"~run\"</strong></span>\n    ```", "```java\n    \"se.radley\" %% \"play-plugins-salat\" % \"1.5.0\"\n    ```", "```java\n    import play.PlayImport.PlayKeys._\n        import play.twirl.sbt.Import.TwirlKeys\n         routesImport += \"se.radley.plugin.salat.Binders._\"\n        TwirlKeys.templateImports += \"org.bson.types.ObjectId\"\n    ```", "```java\n    500:se.radley.plugin.salat.SalatPlugin\n    ```", "```java\n    mongodb.default.db = \"cookbookdb\"\n    ```", "```java\n    package controllers\n         import models._\n        import play.api.libs.json._\n        import play.api.mvc.{BodyParsers, Action, Controller}\n        import se.radley.plugin.salat.Binders.ObjectId\n         object WarehouseController extends Controller {\n          implicit val objectIdReads = se.radley.plugin.salat.Binders.objectIdReads\n          implicit val objectIdWrites = se.radley.plugin.salat.Binders.objectIdWrites\n          implicit val warehouseWrites = Json.writes[Warehouse]\n          implicit val warehouseReads = Json.reads[Warehouse]\n           def index = Action {\n            val list = Warehouse.list\n            Ok(Json.toJson(list))\n          }\n           def create = Action(BodyParsers.parse.json) { implicit request =&gt;\n            val post = request.body.validate[Warehouse]\n            post.fold(\n              errors =&gt; {\n                BadRequest(Json.obj(\"status\" -&gt;\"error\", \"message\" -&gt; JsError.toFlatJson(errors)))\n              },\n              warehouse =&gt; {\n                Warehouse.create(warehouse)\n                Created(Json.toJson(warehouse))\n              }\n            )\n          }\n        }\n    ```", "```java\n    GET     /warehouses  controllers.WarehouseController.index\n        POST    /warehouses      controllers.WarehouseController.create\n    ```", "```java\n    package models\n         import play.api.Play.current\n        import com.mongodb.casbah.commons.MongoDBObject\n        import com.novus.salat.dao._\n        import se.radley.plugin.salat._\n        import se.radley.plugin.salat.Binders._\n        import mongoContext._\n         case class Warehouse(id: Option[ObjectId] = Some(new ObjectId), name: String, location: String)\n         object Warehouse extends ModelCompanion[Warehouse, ObjectId] {\n          val dao = new SalatDAO[Warehouse, ObjectId](collection = mongoCollection(\"warehouses\")) {}\n           def list = dao.find(ref = MongoDBObject()).toList\n          def create(w: Warehouse) = dao.save(w)\n        }\n    ```", "```java\n    package models\n         import com.novus.salat.dao._\n        import com.novus.salat.annotations._\n        import com.mongodb.casbah.Imports._\n         import play.api.Play\n        import play.api.Play.current\n         package object mongoContext {\n          implicit val context = {\n            val context = new Context {\n              val name = \"global\"\n              override val typeHintStrategy = StringTypeHintStrategy(when = TypeHintFrequency.WhenNecessary, typeHint = \"_t\")\n            }\n            context.registerGlobalKeyOverride(remapThis = \"id\", toThisInstead = \"_id\")\n            context.registerClassLoader(Play.classloader)\n            context\n          }\n        }\n    ```", "```java\n    <span class=\"strong\"><strong>    $ curl -v -X POST http://localhost:9000/warehouses --header \"Content-type: application/json\" --data '{\"name\":\"Warehouse A\", \"location\":\"Springfield\"}'</strong></span>\n    <span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>    *   Trying ::1...</strong></span>\n    <span class=\"strong\"><strong>    * Connected to localhost (::1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>    &gt; POST /warehouses HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>    &gt; Content-type: application/json</strong></span>\n    <span class=\"strong\"><strong>    &gt; Content-Length: 48</strong></span>\n    <span class=\"strong\"><strong>    &gt;</strong></span>\n    <span class=\"strong\"><strong>    * upload completely sent off: 48 out of 48 bytes</strong></span>\n    <span class=\"strong\"><strong>    &lt; HTTP/1.1 201 Created</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Type: application/json; charset=utf-8</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Length: 47</strong></span>\n    <span class=\"strong\"><strong>    &lt;</strong></span>\n    <span class=\"strong\"><strong>    * Connection #0 to host localhost left intact</strong></span>\n    <span class=\"strong\"><strong>    {\"name\":\"Warehouse A\",\"location\":\"Springfield\"}</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    $ curl -v http://localhost:9000/warehouses</strong></span>\n    <span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>    *   Trying ::1...</strong></span>\n    <span class=\"strong\"><strong>    * Connected to localhost (::1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>    &gt; GET /warehouses HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>    &gt;</strong></span>\n    <span class=\"strong\"><strong>    &lt; HTTP/1.1 200 OK</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Type: application/json; charset=utf-8</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Length: 241</strong></span>\n    <span class=\"strong\"><strong>    &lt;</strong></span>\n    <span class=\"strong\"><strong>    * Connection #0 to host localhost left intact</strong></span>\n    <span class=\"strong\"><strong>    [{\"id\":\"5490fde9e0820cf6df38584c\",\"name\":\"Warehouse A\",\"location\":\"Springfield\"}]%</strong></span>\n    ```", "```java\ncase class Warehouse(id: Option[ObjectId] = Some(new ObjectId), name: String, location: String)\n```", "```java\nval list = Warehouse.list\n    Warehouse.create(warehouse)\n```", "```java\nimplicit val objectIdReads = se.radley.plugin.salat.Binders.objectIdReads\n    implicit val objectIdWrites = se.radley.plugin.salat.Binders.objectIdWrites\n    implicit val warehouseWrites = Json.writes[Warehouse]\n    implicit val warehouseReads = Json.reads[Warehouse]\n```", "```java\n    <span class=\"strong\"><strong>    activator \"~run\"</strong></span>\n    ```", "```java\n    import java.text.SimpleDateFormat\n        import play.api.libs.iteratee.Enumerator\n         def upload = Action(parse.multipartFormData) { request =&gt;\n            request.body.file(\"asset\") match {\n              case Some(asset) =&gt; {\n                val gridFs = Warehouse.assets\n                val uploadedAsset = gridFs.createFile(asset.ref.file)\n                uploadedAsset.filename = asset.filename\n                uploadedAsset.save()\n                 Ok(\"Asset is available at http://localhost:9000/warehouses/assets/%s\".format(uploadedAsset.id))\n              }\n              case None =&gt; {\n                BadRequest\n              }\n            }\n          }\n           def retrieveFile(id: ObjectId) = Action {\n            import com.mongodb.casbah.Implicits._\n            import play.api.libs.concurrent.Execution.Implicits._\n             val gridFs = Warehouse.assets\n             gridFs.findOne(Map(\"_id\" -&gt; id)) match {\n              case Some(f) =&gt; Result(\n                ResponseHeader(OK, Map(\n                  CONTENT_LENGTH -&gt; f.length.toString,\n                  CONTENT_TYPE -&gt; f.contentType.getOrElse(BINARY),\n                  DATE -&gt; new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss 'GMT'\", java.util.Locale.US).format(f.uploadDate)\n                )),\n                Enumerator.fromStream(f.inputStream)\n              )\n               case None =&gt; NotFound\n            }\n          }\n    ```", "```java\n    POST /warehouses/assets/upload controllers.WarehouseController.upload\n       GET  /warehouses/assets/:id controllers.WarehouseController.retrieveFile(id: ObjectId)\n    ```", "```java\n    val assets = gridFS(\"assets\")\n         def upload(asset: File) = {\n          assets.createFile(asset)\n        }\n         def retrieve(filename: String) = {\n          assets.find(filename)\n        }\n    ```", "```java\n    <span class=\"strong\"><strong>    $ curl -v http://localhost:9000/warehouses/assets/upload -F \"asset=@/tmp/1.jpg\"</strong></span>\n    <span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>    *   Trying ::1...</strong></span>\n    <span class=\"strong\"><strong>    * Connected to localhost (::1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>    &gt; POST /warehouses/assets/upload HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>    &gt; Content-Length: 13583</strong></span>\n    <span class=\"strong\"><strong>    &gt; Expect: 100-continue</strong></span>\n    <span class=\"strong\"><strong>    &gt; Content-Type: multipart/form-data; boundary=------------------------4a001bdeff39c089</strong></span>\n    <span class=\"strong\"><strong>    &gt;</strong></span>\n    <span class=\"strong\"><strong>    &lt; HTTP/1.1 100 Continue</strong></span>\n    <span class=\"strong\"><strong>    &lt; HTTP/1.1 200 OK</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Type: text/plain; charset=utf-8</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Length: 86</strong></span>\n    <span class=\"strong\"><strong>    &lt;</strong></span>\n    <span class=\"strong\"><strong>    * Connection #0 to host localhost left intact</strong></span>\n    <span class=\"strong\"><strong>    Asset is available at http://localhost:9000/warehouses/assets/549121fbe082fc374fa6cb63%</strong></span>\n    ```", "```java\n    <code class=\"literal\">http://localhost:9000/warehouses/assets/549121fbe082fc374fa6cb63</code>\n    ```", "```java\nval assets = gridFS(\"assets\")\n```", "```java\ndef upload(asset: File) = {\n      assets.createFile(asset)\n    }\n     def retrieve(filename: String) = {\n      assets.find(filename)\n    }\n```", "```java\n    <span class=\"strong\"><strong>    activator \"~run\"</strong></span>\n    ```", "```java\n    \"com.typesafe.play.plugins\" %% \"play-plugins-redis\" % \"2.3.1\"\n    ```", "```java\n    resolvers += \"Sedis repository\" at \"http://pk11-scratch.googlecode.com/svn/trunk/\"\n    ```", "```java\n    550:com.typesafe.plugin.RedisPlugin\n    ```", "```java\n    ehcacheplugin=disabled\n        redis.uri=\"redis://127.0.0.1:6379\"\n    ```", "```java\n    import play.cache.*;\n\n         public static Result displayFromCache() {\n             final String key = \"myKey\";\n             String value = (String) Cache.get(key);\n              if (value != null &amp;&amp; value.trim().length() &gt; 0) {\n               return ok(\"Retrieved from Cache: \" + value);\n             } else {\n               Cache.set(key, \"Let's Play with Redis!\");\n               return ok(\"Setting key value in the cache\");\n             } \n           }\n    ```", "```java\n    GET     /cache  controllers.Application.displayFromCache\n    ```", "```java\n    <span class=\"strong\"><strong>    $ curl -v http://localhost:9000/cache</strong></span>\n    <span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>    *   Trying 127.0.0.1...</strong></span>\n    <span class=\"strong\"><strong>    * Connected to localhost (127.0.0.1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>    &gt; GET /cache HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>    &gt;</strong></span>\n    <span class=\"strong\"><strong>    &lt; HTTP/1.1 200 OK</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Type: text/plain; charset=utf-8</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Length: 30</strong></span>\n    <span class=\"strong\"><strong>    &lt;</strong></span>\n    <span class=\"strong\"><strong>    * Connection #0 to host localhost left intact</strong></span>\n    <span class=\"strong\"><strong>    Setting key value in the cache%</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    $ curl -v http://localhost:9000/cache</strong></span>\n    <span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>    *   Trying 127.0.0.1...</strong></span>\n    <span class=\"strong\"><strong>    * Connected to localhost (127.0.0.1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>    &gt; GET /cache HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>    &gt;</strong></span>\n    <span class=\"strong\"><strong>    &lt; HTTP/1.1 200 OK</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Type: text/plain; charset=utf-8</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Length: 43</strong></span>\n    <span class=\"strong\"><strong>    &lt;</strong></span>\n    <span class=\"strong\"><strong>    * Connection #0 to host localhost left intact</strong></span>\n    <span class=\"strong\"><strong>    Retrieved from Cache: Let's Play with Redis!%</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    activator \"~run\"</strong></span>\n    ```", "```java\n    \"com.typesafe.play.plugins\" %% \"play-plugins-redis\" % \"2.3.1\"\n    ```", "```java\n    resolvers += \"Sedis repository\" at \"http://pk11-scratch.googlecode.com/svn/trunk/\"\n    ```", "```java\n    550:com.typesafe.plugin.RedisPlugin\n    ```", "```java\n    ehcacheplugin=disabled\n        redis.uri=\"redis://127.0.0.1:6379\"\n    ```", "```java\n    import scala.util.Random\n           import play.api.cache._\n           import play.api.Play.current\n         def displayFromCache = Action {\n             val key = \"myKey\"\n             Cache.getAs[String](key) match {\n               case Some(myKey) =&gt; {\n                 Ok(\"Retrieved from Cache: %s\".format(myKey))\n               }\n               case None =&gt; {\n                 Cache.set(key, \"Let's Play with Redis!\")\n                 Ok(\"Setting key value in the cache\")\n               }\n             }\n           }\n    ```", "```java\n    GET     /cache  controllers.Application.displayFromCache\n    ```", "```java\n    <span class=\"strong\"><strong>    $ curl -v http://localhost:9000/cache</strong></span>\n    <span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>    *   Trying ::1...</strong></span>\n    <span class=\"strong\"><strong>    * Connected to localhost (::1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>    &gt; GET /cache HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>    &gt;</strong></span>\n    <span class=\"strong\"><strong>    &lt; HTTP/1.1 200 OK</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Type: text/plain; charset=utf-8</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Length: 30</strong></span>\n    <span class=\"strong\"><strong>    &lt;</strong></span>\n    <span class=\"strong\"><strong>    * Connection #0 to host localhost left intact</strong></span>\n    <span class=\"strong\"><strong>    Setting key value in the cache%</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    $ curl -v http://localhost:9000/cache</strong></span>\n    <span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>    *   Trying 127.0.0.1...</strong></span>\n    <span class=\"strong\"><strong>    * Connected to localhost (127.0.0.1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>    &gt; GET /cache HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>    &gt;</strong></span>\n    <span class=\"strong\"><strong>    &lt; HTTP/1.1 200 OK</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Type: text/plain; charset=utf-8</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Length: 43</strong></span>\n    <span class=\"strong\"><strong>    &lt;</strong></span>\n    <span class=\"strong\"><strong>    * Connection #0 to host localhost left intact</strong></span>\n    <span class=\"strong\"><strong>    Retrieved from Cache: Let's Play with Redis!%</strong></span>\n    ```", "```java\n<span class=\"strong\"><strong>$ redis-server /usr/local/etc/redis.conf</strong></span>\n<span class=\"strong\"><strong>[2407] 14 Apr 12:44:20.623 * Increased maximum number of open files to 10032 (it was originally set to 2560).</strong></span>\n<span class=\"strong\"><strong>                _._</strong></span>\n<span class=\"strong\"><strong>           _.-''__ ''-._</strong></span>\n<span class=\"strong\"><strong>      _.-''    '.  '_.  ''-._           Redis 2.8.17 (00000000/0) 64 bit</strong></span>\n<span class=\"strong\"><strong>  .-'' .-'''.  '''\\/    _.,_ ''-._</strong></span>\n<span class=\"strong\"><strong> (    '      ,       .-'  | ',    )     Running in stand alone mode</strong></span>\n<span class=\"strong\"><strong> |'-._'-...-' __...-.''-._|'' _.-'|     Port: 6379</strong></span>\n<span class=\"strong\"><strong> |    '-._   '._    /     _.-'    |     PID: 2407</strong></span>\n<span class=\"strong\"><strong>  '-._    '-._  '-./  _.-'    _.-'</strong></span>\n<span class=\"strong\"><strong> |'-._'-._    '-.__.-'    _.-'_.-'|</strong></span>\n<span class=\"strong\"><strong> |    '-._'-._        _.-'_.-'    |           http://redis.io</strong></span>\n<span class=\"strong\"><strong>  '-._    '-._'-.__.-'_.-'    _.-'</strong></span>\n<span class=\"strong\"><strong> |'-._'-._    '-.__.-'    _.-'_.-'|</strong></span>\n<span class=\"strong\"><strong> |    '-._'-._        _.-'_.-'    |</strong></span>\n<span class=\"strong\"><strong>  '-._    '-._'-.__.-'_.-'    _.-'</strong></span>\n<span class=\"strong\"><strong>      '-._    '-.__.-'    _.-'</strong></span>\n<span class=\"strong\"><strong>          '-._        _.-'</strong></span>\n<span class=\"strong\"><strong>              '-.__.-'</strong></span>\n <span class=\"strong\"><strong>[2407] 14 Apr 12:44:20.631 # Server started, Redis version 2.8.17</strong></span>\n<span class=\"strong\"><strong>[2407] 14 Apr 12:44:20.632 * DB loaded from disk: 0.001 seconds</strong></span>\n<span class=\"strong\"><strong>[2407] 14 Apr 12:44:20.632 * The server is now ready to accept connections on port 6379</strong></span>\n```", "```java\n550:com.typesafe.plugin.RedisPlugin\n```", "```java\n    <span class=\"strong\"><strong>    activator \"~run\"</strong></span>\n    ```", "```java\n    \"com.amazonaws\" % \"aws-java-sdk\" % \"1.3.11\"\n    ```", "```java\n    aws.accessKeyId=\"YOUR S3 ACCESS KEY\"\n        aws.secretKey=\"YOUR S3 SECRET KEY\"\n         fooscala.s3.bucketName=\"YOUR S3 BUCKET NAME\"\n    ```", "```java\n    import com.amazonaws.auth.*;\n           import com.amazonaws.services.s3.*;\n           import com.amazonaws.services.s3.model.*;\n            public static Result s3Upload() {\n             return ok(views.html.s3.render());\n           }\n            public static Result submitS3Upload() {\n             Http.MultipartFormData body = request().body().asMultipartFormData();\n             Http.MultipartFormData.FilePart profileImage = body.getFile(\"profile\");\n              if (profileImage != null) {\n                try {\n                    File file = profileImage.getFile();\n                    String filename = profileImage.getFilename();\n                     String accessKey = Play.application().configuration().getString(\"aws.accessKeyId\");\n                    String secret = Play.application().configuration().getString(\"aws.secretKey\");\n                    String bucketName = Play.application().configuration().getString(\"fooscala.s3.bucketName\");\n                     try {\n                        AWSCredentials awsCredentials = new BasicAWSCredentials(accessKey, secret);\n                        AmazonS3 s3Client = new AmazonS3Client(awsCredentials);\n                        AccessControlList acl = new AccessControlList();\n                        acl.grantPermission(GroupGrantee.AllUsers, Permission.Read);\n                        s3Client.createBucket(bucketName);\n                        s3Client.putObject(new PutObjectRequest(bucketName, filename, file).withAccessControlList(acl));\n                         String img = \"http://\" + bucketName+ \".s3.amazonaws.com/\" + filename;\n                        return ok(\"Image uploaded: \" + img);\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        return ok(\"Image was not uploaded\");\n                    }\n                 } catch(Exception e) {\n                    return internalServerError(e.getMessage());\n                }\n             } else {\n                return badRequest();\n             }\n           }\n    ```", "```java\n    GET     /s3_upload      controllers.Application.s3Upload\n        POST    /s3_upload      controllers.Application.submitS3Upload\n    ```", "```java\n    @helper.form(action = routes.Application.submitS3Upload, 'enctype -&gt; \"multipart/form-data\") {\n          &lt;input type=\"file\" name=\"profile\"&gt;\n          &lt;p&gt;\n            &lt;input type=\"submit\"&gt;\n          &lt;/p&gt;\n        }\n    ```", "```java\n    <span class=\"strong\"><strong>    activator \"~run\"</strong></span>\n    ```", "```java\n    \"nl.rhinofly\" %% \"play-s3\" % \"5.0.2\",\n    ```", "```java\n    resolvers += \"Rhinofly Internal Repository\" at \"http://maven-   repository.rhinofly.net:8081/artifactory/libs-release-local\"\n    ```", "```java\n    aws.accessKeyId=\"YOUR S3 ACCESS KEY\"\n        aws.secretKey=\"YOUR S3 SECRET KEY\"\n         fooscala.s3.bucketName=\"YOUR S3 BUCKET NAME\"\n    ```", "```java\n    import play.api.Play.current\n           import fly.play.s3._\n           def s3Upload = Action {\n             Ok(s3())\n           }\n            def submitS3Upload = Action(parse.multipartFormData) { request =&gt;\n             import play.api.Play\n              request.body.file(\"profile\") match {\n               case Some(profileImage) =&gt; {\n                 val bucketName = Play.current.configuration.getString(\"fooscala.s3.bucketName\").get\n                 val bucket = S3(bucketName)\n                  val filename = profileImage.filename\n                 val contentType = profileImage.contentType\n                 val byteArray = Files.toByteArray(profileImage.ref.file)\n                  val result = bucket.add(BucketFile(filename, contentType.get, byteArray, Option(PUBLIC_READ), None))\n                 val future = Await.result(result, 10 seconds)\n                 Ok(\"Image uploaded to: http://%s.s3.amazonaws.com/%s\".format(bucketName, filename))\n              }\n                case None =&gt; {\n                  BadRequest\n                }\n              }\n            }\n    ```", "```java\n    GET     /s3_upload      controllers.Application.s3Upload\n        POST    /s3_upload      controllers.Application.submitS3Upload\n     Add the s3 file upload submission view template in foo_scala/app/views/s3.scala.html:\n        @helper.form(action = routes.Application.submitS3Upload, 'enctype -&gt; \"multipart/form-data\") {\n          &lt;input type=\"file\" name=\"profile\"&gt;\n          &lt;p&gt;\n            &lt;input type=\"submit\"&gt;\n          &lt;/p&gt;\n        }\n    ```", "```java\nval bucketName = Play.current.configuration.getString(\"fooscala.s3.bucketName\").get\n```", "```java\nOk(\"Image uploaded to: http://%s.s3.amazonaws.com/%s\".format(bucketName, filename))\n```", "```java\nImage uploaded to: http://&lt;YOUR_BUCKET_NAME&gt;.s3.amazonaws.com/&lt;FILENAME&gt;\n```", "```java\n    <span class=\"strong\"><strong>    activator \"~run\"</strong></span>\n    ```", "```java\n    \"com.typesafe.play\" %% \"play-slick\" % \"0.8.1\"\n    ```", "```java\n    db.default.driver=org.h2.Driver\n        db.default.url=\"jdbc:h2:mem:play\"\n        db.default.user=sa\n        db.default.password=\"\"\n        slick.default=\"models.*\"\n    ```", "```java\n    package controllers\n            import play.api.mvc.{BodyParsers, Controller}\n           import play.api.db.slick._\n           import play.api.libs.json._\n           import play.api.Play.current\n           import models._\n            object SupplierController extends Controller {\n             implicit val supplierWrites = Json.writes[Supplier]\n             implicit val supplierReads = Json.reads[Supplier]\n              def index = DBAction { implicit rs =&gt;\n               Ok(Json.toJson(Suppliers.list))\n             }\n              def create = DBAction(BodyParsers.parse.json) { implicit rs =&gt;\n               val post = rs.request.body.validate[Supplier]\n               post.fold(\n                 errors =&gt; {\n                   BadRequest(Json.obj(\"status\" -&gt;\"error\", \"message\" -&gt; JsError.toFlatJson(errors)))\n                 },\n                 supplier =&gt; {\n                   Suppliers.create(supplier)\n                   Created(Json.toJson(supplier))\n                 }\n               )\n             }\n           }\n    ```", "```java\n    package models\n         import scala.slick.driver.H2Driver.simple._\n        import scala.slick.lifted.Tag\n         case class Supplier(id: Option[Int], name: String, contactNo: String)\n         class Suppliers(tag: Tag) extends Table[Supplier](tag, \"SUPPLIERS\") {\n          def id = column[Int](\"ID\", O.PrimaryKey, O.AutoInc)\n          def name = column[String](\"NAME\")\n          def contactNo = column[String](\"CONTACT_NO\")\n           def * = (id.?, name, contactNo) &lt;&gt; (Supplier.tupled, Supplier.unapply)\n        }\n         object Suppliers {\n          val suppliers = TableQuery[Suppliers]\n           def list(implicit s: Session) = suppliers.sortBy(m =&gt; m.name.asc).list\n          def create(supplier: Supplier)(implicit s: Session) = suppliers.insert(supplier)\n        }\n    ```", "```java\n    GET  /suppliers    controllers.SupplierController.index\n        POST  /suppliers    controllers.SupplierController.create\n    ```", "```java\n    <span class=\"strong\"><strong>    $ curl -v -X POST http://localhost:9000/suppliers --header \"Content-type: application/json\" --data '{\"name\":\"Ned Flanders\", \"contactNo\":\"555-1234\"}'</strong></span>\n    <span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>    *   Trying ::1...</strong></span>\n    <span class=\"strong\"><strong>    * Connected to localhost (::1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>    &gt; POST /suppliers HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>    &gt; Content-type: application/json</strong></span>\n    <span class=\"strong\"><strong>    &gt; Content-Length: 47</strong></span>\n    <span class=\"strong\"><strong>    &gt;</strong></span>\n    <span class=\"strong\"><strong>    * upload completely sent off: 47 out of 47 bytes</strong></span>\n    <span class=\"strong\"><strong>    &lt; HTTP/1.1 201 Created</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Type: application/json; charset=utf-8</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Length: 46</strong></span>\n    <span class=\"strong\"><strong>    &lt;</strong></span>\n    <span class=\"strong\"><strong>    * Connection #0 to host localhost left intact</strong></span>\n    <span class=\"strong\"><strong>    {\"name\":\"Ned Flanders\",\"contactNo\":\"555-1234\"}%</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    $ curl -v http://localhost:9000/suppliers</strong></span>\n    <span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>    *   Trying ::1...</strong></span>\n    <span class=\"strong\"><strong>    * Connected to localhost (::1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>    &gt; GET /suppliers HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>    &gt;</strong></span>\n    <span class=\"strong\"><strong>    &lt; HTTP/1.1 200 OK</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Type: application/json; charset=utf-8</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Length: 110</strong></span>\n    <span class=\"strong\"><strong>    &lt;</strong></span>\n    <span class=\"strong\"><strong>    * Connection #0 to host localhost left intact</strong></span>\n    <span class=\"strong\"><strong>    [{\"id\":1,\"name\":\"Maud Flanders\",\"contactNo\":\"555-1234\"},{\"id\":2,\"name\":\"Ned Flanders\",\"contactNo\":\"712-1234\"}]%</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    activator \"~run\"</strong></span>\n    ```", "```java\n    \"com.typesafe.play.plugins\" %% \"play-plugins-mailer\" % \"2.3.1\"\n    ```", "```java\n    1500:com.typesafe.plugin.CommonsMailerPlugin\n    ```", "```java\n    smtp.host=smtp.mandrillapp.com\n        smtp.port=25\n        smtp.user=\"YOUR OWN USER HERE\"\n        smtp.password=\"YOUR OWN PASSWORD HERE\"\n        smtp.mock=true\n    ```", "```java\n    import play.libs.F;\n        import play.libs.F.Function;\n        import play.libs.F.Promise;\n        import com.typesafe.plugin.*;\n         public static Promise&lt;Result&gt; emailSender() {\n            Promise&lt;Boolean&gt; emailResult = Promise.promise(\n                new F.Function0&lt;Boolean&gt;() {\n                    @Override\n                    public Boolean apply() throws Throwable {\n                        try {\n                            MailerAPI mail = play.Play.application().plugin(MailerPlugin.class).email();\n                            mail.setSubject(\"mailer\");\n                            mail.setRecipient(\"ginduc@dynamicobjx.com\");\n                            mail.setFrom(\"Play Cookbook &lt;noreply@email.com&gt;\");\n                            mail.send(\"text\");\n                             return true;\n                        } catch (Exception e) {\n                            e.printStackTrace();\n                            return false;\n                        }\n                    }\n                }\n            );\n             return emailResult.map(\n                new Function&lt;Boolean, Result&gt;() {\n                    @Override\n                    public Result apply(Boolean sent) throws Throwable {\n                        if (sent) {\n                            return ok(\"Email sent!\");\n                        } else {\n                            return ok(\"Email was not sent!\");\n                        }\n                    }\n                }\n            );\n        }\n    ```", "```java\n    POST  /send_email    controllers.Application.emailSender\n    ```", "```java\n    <span class=\"strong\"><strong>    $ curl -v -X POST http://localhost:9000/send_email</strong></span>\n    <span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>    *   Trying ::1...</strong></span>\n    <span class=\"strong\"><strong>    * Connected to localhost (::1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>    &gt; POST /send_email HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>    &gt;</strong></span>\n    <span class=\"strong\"><strong>    &lt; HTTP/1.1 200 OK</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Type: text/plain; charset=utf-8</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Length: 11</strong></span>\n    <span class=\"strong\"><strong>    &lt;</strong></span>\n    <span class=\"strong\"><strong>    * Connection #0 to host localhost left intact</strong></span>\n    <span class=\"strong\"><strong>    Email sent!%</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    activator \"~run\"</strong></span>\n    ```", "```java\n    \"com.typesafe.play.plugins\" %% \"play-plugins-mailer\" % \"2.3.1\"\n    ```", "```java\n    1500:com.typesafe.plugin.CommonsMailerPlugin\n    ```", "```java\n    smtp.host=smtp.mandrillapp.com\n        smtp.port=25\n        smtp.user=\"YOUR OWN USER HERE\"\n        smtp.password=\"YOUR OWN PASSWORD HERE\"\n        smtp.mock=true\n    ```", "```java\n    import scala.concurrent._\n           import com.typesafe.plugin._\n           import play.api.libs.concurrent.Execution.Implicits._\n        import play.api.Play.current\n         def emailSender = Action.async {\n              sendEmail.map { messageId =&gt; \n            Ok(\"Sent email with Message ID: \" + messageId)\n             }\n           }\n         def sendEmail = Future {  \n          val mail = use[MailerPlugin].email\n           mail.setSubject(\"Play mailer\")\n          mail.setRecipient(\"ginduc@dynamicobjx.com\")\n          mail.setFrom(\"Play Cookbook &lt;noreply@email.com&gt;\")\n          mail.send(\"text\")\n        }\n    ```", "```java\n    POST  /send_email    controllers.Application.emailSender\n    ```", "```java\n    <span class=\"strong\"><strong>    $ curl -v -X POST http://localhost:9000/send_email</strong></span>\n    <span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>    *   Trying ::1...</strong></span>\n    <span class=\"strong\"><strong>    * Connected to localhost (::1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>    &gt; POST /send_email HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>    &gt;</strong></span>\n    <span class=\"strong\"><strong>    &lt; HTTP/1.1 200 OK</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Type: text/plain; charset=utf-8</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Length: 30</strong></span>\n    <span class=\"strong\"><strong>    &lt;</strong></span>\n    <span class=\"strong\"><strong>    * Connection #0 to host localhost left intact</strong></span>\n    <span class=\"strong\"><strong>    Sent email with Message ID: ()%</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    activator \"~run\"</strong></span>\n    ```", "```java\n    \"org.webjars\" % \"bootstrap\" % \"3.3.1\",\n        \"org.webjars\" %% \"webjars-play\" % \"2.3.0\"\n    ```", "```java\n    public static Result bootstrapped() {\n             return ok(views.html.bootstrapped.render());\n           }\n    ```", "```java\n    GET     /webjars/*file        controllers.WebJarAssets.at(file)\n        GET     /bootstrapped         controllers.Application.bootstrapped\n    ```", "```java\n    @(title: String)(content: Html)&lt;!DOCTYPE html&gt;\n     &lt;html&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"utf-8\"&gt;\n        &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n        &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n        &lt;meta name=\"description\" content=\"\"&gt;\n        &lt;meta name=\"author\" content=\"\"&gt;\n        &lt;title&gt;@title&lt;/title&gt;\n        &lt;link rel=\"shortcut icon\" type=\"image/png\" href='@routes.Assets.at(\"images/favicon.png\")'&gt;\n        &lt;link rel=\"stylesheet\" media=\"screen\" href='@routes.WebJarAssets.at(WebJarAssets.locate(\"css/bootstrap.min.css\"))' /&gt;\n        &lt;link rel=\"stylesheet\" media=\"screen\" href='@routes.Assets.at(\"stylesheets/app.css\")'/&gt;\n        &lt;style&gt;\n            body {\n              padding-top: 50px;\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;nav class=\"navbar navbar-inverse navbar-fixed-top\" role=\"navigat   ion\"&gt;\n        &lt;div class=\"container-fluid\"&gt;\n            &lt;div class=\"navbar-header\"&gt;\n                &lt;button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#navbar\" aria-expanded=\"false\" aria-controls=\"navbar\"&gt;\n                    &lt;span class=\"sr-only\"&gt;Toggle navigation&lt;/span&gt;\n                    &lt;span class=\"icon-bar\"&gt;&lt;/span&gt;\n                    &lt;span class=\"icon-bar\"&gt;&lt;/span&gt;\n                    &lt;span class=\"icon-bar\"&gt;&lt;/span&gt;\n                &lt;/button&gt;\n                &lt;a class=\"navbar-brand\" href=\"#\"&gt;Admin&lt;/a&gt;\n            &lt;/div&gt;\n            &lt;div id=\"navbar\" class=\"navbar-collapse collapse\"&gt;\n                &lt;ul class=\"nav navbar-nav navbar-right\"&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;Dashboard&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;Settings&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;Profile&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;Help&lt;/a&gt;&lt;/li&gt;\n                &lt;/ul&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/nav&gt;\n     &lt;div class=\"container-fluid\"&gt;\n        &lt;div class=\"row\"&gt;\n            &lt;div class=\"col-sm-3 col-md-2 sidebar\"&gt;\n                &lt;ul class=\"nav nav-sidebar\"&gt;\n                    &lt;li class=\"active\"&gt;&lt;a href=\"#\"&gt;Overview &lt;span class=\"sr-only\"&gt;(current)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;Reports&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;Analytics&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;Export&lt;/a&gt;&lt;/li&gt;\n                &lt;/ul&gt;\n                &lt;ul class=\"nav nav-sidebar\"&gt;\n                    &lt;li&gt;&lt;a href=\"\"&gt;Users&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"\"&gt;Audit Log&lt;/a&gt;&lt;/li&gt;\n                &lt;/ul&gt;\n                &lt;ul class=\"nav nav-sidebar\"&gt;\n                    &lt;li&gt;&lt;a href=\"\"&gt;Sign out&lt;/a&gt;&lt;/li&gt;\n                &lt;/ul&gt;\n            &lt;/div&gt;\n            &lt;div class=\"col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main\"&gt;\n                @content\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n     &lt;/body&gt;\n    &lt;/html&gt;\n    ```", "```java\n    @mainLayout(\"Bootstrapped\") {\n    &lt;div class=\"hero-unit\"&gt;\n        &lt;h1&gt;Hello, world!&lt;/h1&gt;\n        &lt;p&gt;This is a template for a simple marketing or informational website. It includes a large callout called the hero unit and three supporting pieces of content. Use it as a starting point to create something more unique.&lt;/p&gt;\n        &lt;p&gt;&lt;a href=\"#\" class=\"btn btn-primary btn-large\"&gt;Learn more &amp;raquo;&lt;/a&gt;&lt;/p&gt;\n    &lt;/div&gt;\n    }\n    ```", "```java\n    <span class=\"strong\"><strong>    activator \"~run\"</strong></span>\n    ```", "```java\n    \"org.webjars\" % \"bootstrap\" % \"3.3.1\",\n        \"org.webjars\" %% \"webjars-play\" % \"2.3.0\"\n    ```", "```java\n    def bootstrapped = Action {\n             Ok(views.html.bootstrapped())\n           }\n    ```", "```java\n    GET     /webjars/*file        controllers.WebJarAssets.at(file)\n        GET     /bootstrapped         controllers.Application.bootstrapped\n    ```", "```java\n    @(title: String)(content: Html)&lt;!DOCTYPE html&gt;\n     &lt;html&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"utf-8\"&gt;\n        &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n        &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n        &lt;meta name=\"description\" content=\"\"&gt;\n        &lt;meta name=\"author\" content=\"\"&gt;\n        &lt;title&gt;@title&lt;/title&gt;\n        &lt;link rel=\"shortcut icon\" type=\"image/png\" href='@routes.Assets.at(\"images/favicon.png\")'&gt;\n        &lt;link rel=\"stylesheet\" media=\"screen\" href='@routes.WebJarAssets.at(WebJarAssets.locate(\"css/bootstrap.min.css\"))' /&gt;\n        &lt;link rel=\"stylesheet\" media=\"screen\" href='@routes.Assets.at(\"stylesheets/app.css\")'/&gt;\n        &lt;style&gt;\n            body {\n              padding-top: 50px;\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;nav class=\"navbar navbar-inverse navbar-fixed-top\" role=\"navigat   ion\"&gt;\n        &lt;div class=\"container-fluid\"&gt;\n            &lt;div class=\"navbar-header\"&gt;\n                &lt;button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#navbar\" aria-expanded=\"false\" aria-controls=\"navbar\"&gt;\n                    &lt;span class=\"sr-only\"&gt;Toggle navigation&lt;/span&gt;\n                    &lt;span class=\"icon-bar\"&gt;&lt;/span&gt;\n                    &lt;span class=\"icon-bar\"&gt;&lt;/span&gt;\n                    &lt;span class=\"icon-bar\"&gt;&lt;/span&gt;\n                &lt;/button&gt;\n                &lt;a class=\"navbar-brand\" href=\"#\"&gt;Admin&lt;/a&gt;\n            &lt;/div&gt;\n            &lt;div id=\"navbar\" class=\"navbar-collapse collapse\"&gt;\n                &lt;ul class=\"nav navbar-nav navbar-right\"&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;Dashboard&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;Settings&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;Profile&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;Help&lt;/a&gt;&lt;/li&gt;\n                &lt;/ul&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/nav&gt;\n     &lt;div class=\"container-fluid\"&gt;\n        &lt;div class=\"row\"&gt;\n            &lt;div class=\"col-sm-3 col-md-2 sidebar\"&gt;\n                &lt;ul class=\"nav nav-sidebar\"&gt;\n                    &lt;li class=\"active\"&gt;&lt;a href=\"#\"&gt;Overview &lt;span class=\"sr-only\"&gt;(current)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;Reports&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;Analytics&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;Export&lt;/a&gt;&lt;/li&gt;\n                &lt;/ul&gt;\n                &lt;ul class=\"nav nav-sidebar\"&gt;\n                    &lt;li&gt;&lt;a href=\"\"&gt;Users&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"\"&gt;Audit Log&lt;/a&gt;&lt;/li&gt;\n                &lt;/ul&gt;\n                &lt;ul class=\"nav nav-sidebar\"&gt;\n                    &lt;li&gt;&lt;a href=\"\"&gt;Sign out&lt;/a&gt;&lt;/li&gt;\n                &lt;/ul&gt;\n            &lt;/div&gt;\n            &lt;div class=\"col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main\"&gt;\n                @content\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n     &lt;/body&gt;\n    &lt;/html&gt;\n    ```", "```java\n    @mainLayout(\"Bootstrapped\") {\n    &lt;div class=\"hero-unit\"&gt;\n        &lt;h1&gt;Hello, world!&lt;/h1&gt;\n        &lt;p&gt;This is a template for a simple marketing or informational website. It includes a large callout called the hero unit and three supporting pieces of content. Use it as a starting point to create something more unique.&lt;/p&gt;\n        &lt;p&gt;&lt;a href=\"#\" class=\"btn btn-primary btn-large\"&gt;Learn more &amp;raquo;&lt;/a&gt;&lt;/p&gt;\n    &lt;/div&gt;\n    }\n    ```"]