["```java\n    @GET\n    @Path(\"/{isbn}\")\n    public Response book(@PathParam(\"isbn\") @Pattern(\n      regexp = \"[0-9]{10}\") String isbn) {\n        Book book = Optional.ofNullable(books.get(isbn))\n                    .orElseThrow(NotFoundException::new);\n        return Response.ok(book).build();\n    }\n```", "```java\n    @POST\n    @Consumes(MediaType.APPLICATION_JSON)\n    public Response create(@Valid Book book, \n      @Context UriInfo uriInfo) {\n        books.put(book.isbn, book);\n\n        URI uri = uriInfo.getBaseUriBuilder()\n          .path(BooksResource.class).path(book.isbn).build();\n        return Response.created(uri).build();\n    }\n```", "```java\npublic static class Book {\n\n        @Pattern(regexp = \"[0-9]{10}\")\n        private String isbn;\n        @NotNull\n        @NotBlank\n        private String title;\n```", "```java\n{\n    \"isbn\": \"1234560\".\n    \"title\": \"\"\n}\n```", "```java\n    <dependency>\n        <groupId>com.auth0</groupId>\n        <artifactId>java-jwt</artifactId>\n        <version>3.3.0</version>\n    </dependency>\n```", "```java\n@Provider\npublic class JwtAuthzVerifier implements ContainerRequestFilter, ContainerResponseFilter {\n```", "```java\n    @Override\n    public void filter(ContainerRequestContext requestContext) {\n        try {\n            String header = getAuthorizationHeader(requestContext);\n            decodeBearerToken(header);\n        }\n```", "```java\n    private String getAuthorizationHeader(\n      ContainerRequestContext requestContext) {\n        return requestContext.getHeaderString(AUTHORIZATION_HEADER);\n    }\n```", "```java\n    private void decodeBearerToken(String authorization) {\n        String token = extractJwtToken(authorization);\n        Verification verification = \n          JWT.require(getSecret()).acceptLeeway(1L);\n        DecodedJWT jwt = verify(token, verification);\n        decodedJWT.set(jwt);\n    }\n```", "```java\n@ApplicationScoped\n@JwtAuthz\n@Provider\n```", "```java\n@NameBinding\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.TYPE, ElementType.METHOD})\npublic @interface JwtAuthz {\n}\n```", "```java\n@Path(\"/jwt\")\n@JwtAuthz\npublic class AuthenticationResource {\n```", "```java\n    @Inject\n    private DecodedJWT decodedJWT;\n```", "```java\n    @GET\n    @Path(\"/authenticate\")\n    public Response authenticate() {\n        Map<String, Claim> claims = decodedJWT.getClaims();\n\n        JsonObject response = Json.createObjectBuilder()\n                .add(\"name\", claims.get(\"name\").asString())\n                .add(\"subject\", claims.get(\"sub\").asString())\n                .build();\n\n        return Response.ok(response).build();\n    }\n}\n```", "```java\n\n    <dependency>\n        <groupId>org.glassfish.jersey.core</groupId>\n        <artifactId>jersey-common</artifactId>\n        <version>2.26</version>\n        <scope>provided</scope>\n    </dependency>\n```", "```java\n        classes.add(MetricsResource.class);\n        classes.add(LoggingFeature.class);\n\n        return classes;\n    }\n```", "```java\n        properties.put(LoggingFeature.LOGGING_FEATURE_LOGGER_NAME,   \n          \"RequestLogger\");\n        properties.put(LoggingFeature.LOGGING_FEATURE_LOGGER_LEVEL, \n          Level.INFO.getName());\n```", "```java\n\n    <dependency>\n        <groupId>org.eclipse.microprofile.health</groupId>\n        <artifactId>microprofile-health-api</artifactId>\n        <version>1.0</version>\n        <scope>provided</scope> \n    </dependency>\n    ...\n    ...\n    <dependency>\n        <groupId>org.eclipse.microprofile.jwt</groupId>\n        <artifactId>microprofile-jwt-auth-api</artifactId>\n        <version>1.0</version>\n        <scope>provided</scope>\n    </dependency>\n```", "```java\n    @POST\n    @Path(\"/timed\")\n    @Timed(displayName = \"Timed invocation\", unit = \"milliseconds\")\n```", "```java\n    @POST\n    @Path(\"/counted\")\n    @Counted(monotonic = true)\n```", "```java\n    @Gauge(displayName = \"Gauge invocation\", unit = \"seconds\")\n    public long gauge() {\n        return poolSize.get();\n```", "```java\npublic class EverythingOkHealthCheck implements HealthCheck {\n    @Override\n    public HealthCheckResponse call() {\n        return HealthCheckResponse\n                .named(\"everythingOk\")\n                .up()\n                .withData(\"message\", \"Everything is OK!\")\n                .build();\n    }\n}\n```", "```java\n\n    <dependency>\n        <groupId>io.opentracing</groupId>\n        <artifactId>opentracing-api</artifactId>\n        <version>0.31.0</version>\n    </dependency>\n    <dependency>\n        <groupId>com.uber.jaeger</groupId>\n        <artifactId>jaeger-core</artifactId>\n        <version>0.25.0</version>\n    </dependency>\n    <dependency>\n        <groupId>io.opentracing.contrib</groupId>\n        <artifactId>opentracing-jaxrs2</artifactId>\n        <version>0.1.3</version>\n    </dependency>\n```", "```java\n@WebListener\npublic class OpenTracingContextInitializer implements ServletContextListener {\n    @Override\n    public void contextInitialized(ServletContextEvent sce) {\n        Configuration configuration = Configuration.fromEnv();\n        GlobalTracer.register(configuration.getTracer());\n    }\n}\n```", "```java\n{\n    \"outcome\": \"UP\"/\n    \"checks\": [\n        {\n            \"name\": \"everythingOk\",\n            \"state\": \"UP\",\n            \"data\": {\n                \"message\": \"Everything is OK\"\n            }\n        }\n    ]\n}\n```"]