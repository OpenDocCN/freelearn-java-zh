["```java\npublic class Launcher {\n\n    public static void main(String[] args) {\n\n        Runnable runnable = new Runnable() {\n            @Override\n            public void run() {\n                System.out.println(\"run() was called!\");\n            }\n        };\n\n        runnable.run();\n    }\n}\n```", "```java\nrun() was called!\n```", "```java\npublic class Launcher {\n\n    public static void main(String[] args) {\n\n        Runnable runnable = () -> System.out.println(\"run() was\n        called!\");\n\n        runnable.run();\n    }\n}\n```", "```java\npublic class Launcher {\n\n    public static void main(String[] args) {\n\n        Runnable runnable = new Runnable() {\n            @Override\n            public void run() {\n                System.out.println(\"Message 1\");\n                System.out.println(\"Message 2\");\n            }\n        };\n\n        runnable.run();\n    }\n}\n```", "```java\npublic class Launcher {\n\n    public static void main(String[] args) {\n\n        Runnable runnable = () -> {\n            System.out.println(\"Message 1\");\n            System.out.println(\"Message 2\");\n        };\n\n        runnable.run();\n    }\n}\n```", "```java\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.function.Supplier;\n\npublic class Launcher {\n\n    public static void main(String[] args) {\n\n        Supplier<List<String>> listGenerator = new\nSupplier<List<String>>() {\n            @Override\n            public List<String> get() {\n                return new ArrayList<>();\n            }\n        };\n\n        List<String> myList = listGenerator.get();\n    }\n}\n```", "```java\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.function.Supplier;\n\npublic class Launcher {\n\n    public static void main(String[] args) {\n\n        Supplier<List<String>> listGenerator = () -> new ArrayList<>\n        ();\n\n        List<String> myList = listGenerator.get();\n    }\n}\n```", "```java\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.function.Supplier;\n\npublic class Launcher {\n\n    public static void main(String[] args) {\n\n        Supplier<List<String>> listGenerator = ArrayList::new;\n\n        List<String> myList = listGenerator.get();\n    }\n}\n```", "```java\nimport java.util.function.Consumer;\n\npublic class Launcher {\n\n    public static void main(String[] args) {\n\n        Consumer<String> printConsumer = new Consumer<String>() {\n            @Override\n            public void accept(String s) {\n                System.out.println(s);\n            }\n        };\n\n        printConsumer.accept(\"Hello World\");\n    }\n}\n```", "```java\nHello World\n```", "```java\nimport java.util.function.Consumer;\n\npublic class Launcher {\n\n    public static void main(String[] args) {\n\n        Consumer<String> printConsumer = (String s) ->\n        System.out.println(s);\n\n        printConsumer.accept(\"Hello World\");\n    }\n}\n```", "```java\nimport java.util.function.Consumer;\n\npublic class Launcher {\n\n    public static void main(String[] args) {\n\n        Consumer<String> printConsumer = s -> System.out.println(s);\n\n        printConsumer.accept(\"Hello World\");\n    }\n}\n```", "```java\nimport java.util.function.Consumer;\n\npublic class Launcher {\n\n    public static void main(String[] args) {\n\n        Consumer<String> printConsumer = System.out::println;\n\n        printConsumer.accept(\"Hello World\");\n    }\n}\n\n```", "```java\nimport java.util.function.Function;\n\npublic class Launcher {\n\n    public static void main(String[] args) {\n\n        Function<String,Integer> lengthMapper = new Function<String,\nInteger>() {\n            @Override\n            public Integer apply(String s) {\n                return s.length();\n            }\n        };\n\n        Integer length = lengthMapper.apply(\"Alpha\");\n\n        System.out.println(length);\n    }\n}\n```", "```java\nimport java.util.function.Function;\n\npublic class Launcher {\n\n    public static void main(String[] args) {\n\n        Function<String,Integer> lengthMapper = (String s) ->\ns.length();\n\n        Integer length = lengthMapper.apply(\"Alpha\");\n\n        System.out.println(length);\n    }\n}\n```", "```java\n   Function<String,Integer> lengthMapper = (s) -> s.length();\n```", "```java\n   Function<String,Integer> lengthMapper = s -> s.length();\n```", "```java\n   Function<String,Integer> lengthMapper = String::length;\n\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n    public static void main(String[] args) {\n        Observable.just(\"Alpha\",\"Beta\",\"Gamma\")\n                .map(String::length) //accepts a Function<T,R>\n                .subscribe(s -> System.out.println(s));\n    }\n}\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n    public static void main(String[] args) {\n        Observable.just(\"Alpha\",\"Beta\",\"Gamma\")\n                .map(String::length)\n                .reduce((total,next) -> total + next) //accepts a\n                 BiFunction<T,T,T>\n                .subscribe(s -> System.out.println(s));\n    }\n}\n```", "```java\nimport io.reactivex.Observable;\nimport java.time.LocalDate;\n\npublic class Launcher {\n\n    public static void main(String[] args) {\n\n       Observable<LocalDate> dates = Observable.just(\n               LocalDate.of(2017,11,3),\n               LocalDate.of(2017,10,4),\n               LocalDate.of(2017,7,5),\n               LocalDate.of(2017,10,3)\n       );\n\n       // get distinct months\n       dates.map(LocalDate::getMonth)\n       .distinct()\n       .subscribe(System.out::println);\n    }\n}\n```", "```java\nNOVEMBER\nOCTOBER\nJULY\n```", "```java\nimport io.reactivex.Emitter;\nimport io.reactivex.Flowable;\nimport java.time.LocalDate;\nimport java.util.concurrent.atomic.AtomicReference;\n\npublic class Launcher {\n\n    public static void main(String[] args) {\n\n       Flowable<LocalDate> dates =\n               Flowable.generate(() -> new AtomicReference<>\n(LocalDate.of(2017,1,1)),\n               (AtomicReference<LocalDate> next, Emitter<LocalDate>\nemitter) ->\n               emitter.onNext(next.getAndUpdate(dt -> \ndt.plusDays(1)))\n                       );\n\n       dates.take(60)\n               .subscribe(System.out::println);\n    }\n}\n```", "```java\n2017-01-01\n2017-01-02\n2017-01-03\n2017-01-04\n2017-01-05\n2017-01-06\n...\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n\n    public static void main(String[] args) {\n        DroneBot droneBot = null; // create DroneBot\n\n        droneBot.getLocation()\n          .subscribe(loc ->\n          System.out.println(\"Drone moved to \" + loc.x + \",\" +\nloc.y));\n    }\n\n    interface DroneBot {\n        int getId();\n        String getModel();\n        Observable<Location> getLocation();\n    }\n\n    static final class Location {\n        private final double x;\n        private final double y;\n\n        Location(double x, double y) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n}\n```", "```java\nimport io.reactivex.Observable;\nimport java.util.List;\n\npublic class Launcher {\n\n    public static void main(String[] args) {\n        List<Warehouse> warehouses = null; // get warehouses\n\n        Observable.fromIterable(warehouses)\n            .flatMap(Warehouse::getProducts)\n            .map(ProductStock::getQuantity)\n            .reduce(0,(total,next) -> total + next)\n            .subscribe(i -> System.out.println(\"There are \" + i + \"\n            units in inventory\"));\n    }\n\n    interface Warehouse {\n        Observable<ProductStock> getProducts();\n    }\n    interface ProductStock {\n        int getId();\n        String getDescription();\n        int getQuantity();\n    }\n}\n```", "```java\ninterface Warehouse {\n    Observable<ProductStock> getProducts();\n    Observable<ProductStock> getProductsOnDate(LocalDate date);\n}\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n\n    public static void main(String[] args) {\n\n        Observable<String> source =\n                Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\",\n\"Epsilon\");\n\n        source.materialize()\n                .subscribe(System.out::println);\n\n    }\n}\n```", "```java\nOnNextNotification[Alpha]\nOnNextNotification[Beta]\nOnNextNotification[Gamma]\nOnNextNotification[Delta]\nOnNextNotification[Epsilon]\nOnCompleteNotification\n```", "```java\nimport io.reactivex.Notification;\nimport io.reactivex.Observable;\n\npublic class Launcher {\n\n    public static void main(String[] args) {\n\n        Observable<Notification<String>> source =\n                Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\",\n\"Epsilon\")\n                        .materialize()\n                        .publish()\n                        .autoConnect(3);\n\n        source.filter(Notification::isOnNext)\n                .subscribe(n -> System.out.println(\"onNext=\" +\nn.getValue()));\n\n        source.filter(Notification::isOnComplete)\n                .subscribe(n -> System.out.println(\"onComplete\"));\n\n        source.filter(Notification::isOnError)\n                .subscribe(n -> System.out.println(\"onError\"));\n    }\n}\n```", "```java\nonNext=Alpha\nonNext=Beta\nonNext=Gamma\nonNext=Delta\nonNext=Epsilon\nonComplete\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n\n    public static void main(String[] args) {\n\n        Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\",\n\"Epsilon\")\n                .materialize()\n                .doOnNext(System.out::println)\n                .dematerialize()\n                .subscribe(System.out::println);\n    }\n}\n```", "```java\nOnNextNotification[Alpha]\nAlpha\nOnNextNotification[Beta]\nBeta\nOnNextNotification[Gamma]\nGamma\nOnNextNotification[Delta]\nDelta\nOnNextNotification[Epsilon]\nEpsilon\nOnCompleteNotification\n```", "```java\nimport io.reactivex.Scheduler;\nimport io.reactivex.schedulers.Schedulers;\n\nimport java.util.concurrent.TimeUnit;\n\npublic class Launcher {\n\n    public static void main(String[] args) {\n\n        Scheduler scheduler = Schedulers.computation();\n\n        //run task now\n        scheduler.scheduleDirect(() -> System.out.println(\"Now!\"));\n\n        //delay task by 1 second\n        scheduler.scheduleDirect(() -> \nSystem.out.println(\"Delayed!\"), 1, TimeUnit.SECONDS);\n\n        //repeat task every second\n        scheduler.schedulePeriodicallyDirect(() -> \nSystem.out.println(\"Repeat!\"), 0, 1, TimeUnit.SECONDS);\n\n        //keep alive for 5 seconds\n        sleep(5000);\n    }\n\n    public static void sleep(long millis) {\n        try {\n            Thread.sleep(millis);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```", "```java\nNow!\nRepeat!\nDelayed!\nRepeat!\nRepeat!\nRepeat!\nRepeat!\nRepeat!\n```", "```java\nimport io.reactivex.Scheduler;\nimport io.reactivex.schedulers.Schedulers;\n\nimport java.util.concurrent.TimeUnit;\n\npublic class Launcher {\n\n    public static void main(String[] args) {\n\n        Scheduler scheduler = Schedulers.computation();\n        Scheduler.Worker worker = scheduler.createWorker();\n\n        //run task now\n        worker.schedule(() -> System.out.println(\"Now!\"));\n\n        //delay task by 1 second\n        worker.schedule(() -> System.out.println(\"Delayed!\"), 1,\nTimeUnit.SECONDS);\n\n        //repeat task every second\n        worker.schedulePeriodically(() ->\nSystem.out.println(\"Repeat!\"), 0, 1, TimeUnit.SECONDS);\n\n        //keep alive for 5 seconds, then dispose Worker\n        sleep(5000);\n        worker.dispose();\n    }\n\n    public static void sleep(long millis) {\n        try {\n            Thread.sleep(millis);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```", "```java\nNow!\nRepeat!\nRepeat!\nDelayed!\nRepeat!\nRepeat!\nRepeat!\nRepeat!\n```"]