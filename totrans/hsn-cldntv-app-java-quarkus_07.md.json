["```java\n<dependency>\n       <groupId>io.quarkus</groupId>\n       <artifactId>quarkus-hibernate-orm</artifactId>\n</dependency>\n<dependency>\n       <groupId>io.quarkus</groupId>\n       <artifactId>quarkus-agroal</artifactId>\n</dependency>\n<dependency>\n       <groupId>io.quarkus</groupId>\n       <artifactId>quarkus-jdbc-postgresql</artifactId>\n</dependency>\n<dependency>\n       <groupId>io.quarkus</groupId>\n       <artifactId>quarkus-resteasy-jsonb</artifactId>\n</dependency>\n```", "```java\n@Entity\n@NamedQuery(name = \"Customers.findAll\",\n        query = \"SELECT c FROM Customer c ORDER BY c.id\",\n        hints = @QueryHint(name = \"org.hibernate.cacheable\", value = \n        \"true\") )\npublic class Customer {\n    @Id\n    @SequenceGenerator(\n            name = \"customerSequence\",\n            sequenceName = \"customerId_seq\",\n            allocationSize = 1,\n            initialValue = 1)\n    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \n     \"customerSequence\")\n    private Long id;\n\n    @Column(length = 40)\n    private String name;\n\n    @Column(length = 40)\n    private String surname;\n\n    @OneToMany(mappedBy = \"customer\")\n    @JsonbTransient\n    public List<Orders> orders;\n\n // Getters / Setters omitted for brevity\n}\n```", "```java\n@Entity\n@NamedQuery(name = \"Orders.findAll\",\n        query = \"SELECT o FROM Orders o WHERE o.customer.id = :customerId ORDER BY o.item\")\npublic class Orders {\n    @Id\n    @SequenceGenerator(\n            name = \"orderSequence\",\n            sequenceName = \"orderId_seq\",\n            allocationSize = 1,\n            initialValue = 1)\n    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \n     \"orderSequence\")\n    public Long id;\n\n    @Column(length = 40)\n    public String item;\n\n    @Column\n    public Long price;\n\n    @ManyToOne\n    @JoinColumn(name = \"customer_id\") \n    @JsonbTransient\n    public Customer customer;\n\n // Getters / Setters omitted for brevity\n}\n```", "```java\n@ApplicationScoped\npublic class CustomerRepository {\n\n    @Inject\n    EntityManager entityManager;\n\n}\n```", "```java\npublic List<Customer> findAll() {\n        return entityManager.createNamedQuery(\"Customers.findAll\", \n         Customer.class)\n                .getResultList();\n}\n\npublic Customer findCustomerById(Long id) {\n        Customer customer = entityManager.find(Customer.class, id);\n\n        if (customer == null) {\n            throw new WebApplicationException(\"Customer with id of \" + \n             id + \" does not exist.\", 404);\n        }\n        return customer;\n}\n\n@Transactional\npublic void updateCustomer(Customer customer) {\n        Customer customerToUpdate = findCustomerById(customer.\n         getId());\n        customerToUpdate.setName(customer.getName());\n        customerToUpdate.setSurname(customer.getSurname());\n}\n\n@Transactional\npublic void createCustomer(Customer customer) {\n        entityManager.persist(customer);\n}\n\n@Transactional\npublic void deleteCustomer(Long customerId) {\n        Customer c = findCustomerById(customerId);\n        entityManager.remove(c);\n}\n```", "```java\n@ApplicationScoped\npublic class OrderRepository {\n\n    @Inject\n    EntityManager entityManager;\n\n    public List<Orders> findAll(Long customerId) {\n\n      return  (List<Orders>) \n        entityManager.createNamedQuery(\"Orders.findAll\")\n                .setParameter(\"customerId\", customerId)\n                .getResultList();\n    }\n\n    public Orders findOrderById(Long id) {\n\n        Orders order = entityManager.find(Orders.class, id);\n        if (order == null) {\n            throw new WebApplicationException(\"Order with id of \" + id \n             + \" does not exist.\", 404);\n        }\n        return order;\n    }\n    @Transactional\n    public void updateOrder(Orders order) {\n        Orders orderToUpdate = findOrderById(order.getId());\n        orderToUpdate.setItem(order.getItem());\n        orderToUpdate.setPrice(order.getPrice());\n    }\n    @Transactional\n    public void createOrder(Orders order, Customer c) {\n        order.setCustomer(c);\n        entityManager.persist(order);\n\n    }\n    @Transactional\n    public void deleteOrder(Long orderId) {\n        Orders o = findOrderById(orderId);\n        entityManager.remove(o);\n    }\n}\n```", "```java\n@Path(\"orders\")\n@ApplicationScoped\n@Produces(\"application/json\")\n@Consumes(\"application/json\")\npublic class OrderEndpoint {\n\n    @Inject OrderRepository orderRepository;\n    @Inject CustomerRepository customerRepository;\n\n    @GET\n    public List<Orders> getAll(@QueryParam(\"customerId\") Long \n     customerId) {\n        return orderRepository.findAll(customerId);\n    }\n\n    @POST\n    @Path(\"/{customer}\")\n    public Response create(Orders order, @PathParam(\"customer\") Long \n     customerId) {\n        Customer c = customerRepository.findCustomerById(customerId);\n        orderRepository.createOrder(order,c);\n        return Response.status(201).build();\n\n    }\n\n    @PUT\n    public Response update(Orders order) {\n        orderRepository.updateOrder(order);\n        return Response.status(204).build();\n    }\n    @DELETE\n    @Path(\"/{order}\")\n    public Response delete(@PathParam(\"order\") Long orderId) {\n        orderRepository.deleteOrder(orderId);\n        return Response.status(204).build();\n    }\n\n}\n```", "```java\nquarkus.datasource.url=jdbc:postgresql://${POSTGRESQL_SERVICE_HOST:localhost}:${POSTGRESQL_SERVICE_PORT:5432}/quarkusdb\nquarkus.datasource.driver=org.postgresql.Driver\nquarkus.datasource.username=quarkus\nquarkus.datasource.password=quarkus\n\n```", "```java\nquarkus.hibernate-orm.database.generation=drop-and-create\n```", "```java\nquarkus.datasource.initial-size=1\nquarkus.datasource.min-size=2\nquarkus.datasource.max-size=8\n```", "```java\nquarkus.hibernate-orm.sql-load-script=import.sql\n```", "```java\nINSERT INTO customer (id, name, surname) VALUES ( nextval('customerId_seq'), 'John','Doe');\nINSERT INTO customer (id, name, surname) VALUES ( nextval('customerId_seq'), 'Fred','Smith');\n```", "```java\n// Test GET\ngiven()\n        .when().get(\"/customers\")\n        .then()\n        .statusCode(200)\n        .body(\"$.size()\", is(2));\n\n// Create a JSON Object for the Order\nJsonObject objOrder = Json.createObjectBuilder()\n        .add(\"item\", \"bike\")\n        .add(\"price\", new Long(100))\n        .build();\n\n// Test POST Order for Customer #1\ngiven()\n        .contentType(\"application/json\")\n        .body(objOrder.toString())\n        .when()\n        .post(\"/orders/1\")\n        .then()\n        .statusCode(201);\n\n// Create new JSON for Order #1\nobjOrder = Json.createObjectBuilder()\n        .add(\"id\", new Long(1))\n        .add(\"item\", \"mountain bike\")\n        .add(\"price\", new Long(100))\n        .build();\n\n// Test UPDATE Order #1\ngiven()\n        .contentType(\"application/json\")\n        .body(objOrder.toString())\n        .when()\n        .put(\"/orders\")\n        .then()\n        .statusCode(204);\n\n// Test GET for Order #1\ngiven()\n        .when().get(\"/orders?customerId=1\")\n        .then()\n        .statusCode(200)\n        .body(containsString(\"mountain bike\"));\n\n// Test DELETE Order #1\ngiven()\n        .when().delete(\"/orders/1\")\n        .then()\n        .statusCode(204);\n```", "```java\n$ docker run --ulimit memlock=-1:-1 -it --rm=true --memory-swappiness=0 --name quarkus_test -e POSTGRES_USER=quarkus -e POSTGRES_PASSWORD=quarkus -e POSTGRES_DB=quarkusdb -p 5432:5432 postgres:10.5\n```", "```java\n2019-07-09 14:05:56.235 UTC [1] LOG:  listening on IPv4 address \"0.0.0.0\", port 5432\n2019-07-09 14:05:56.235 UTC [1] LOG:  listening on IPv6 address \"::\", port 5432\n2019-07-09 14:05:56.333 UTC [1] LOG:  listening on Unix socket \"/var/run/postgresql/.s.PGSQL.5432\"\n2019-07-09 14:05:56.434 UTC [60] LOG:  database system was shut down at 2019-07-09 14:05:56 UTC\n2019-07-09 14:05:56.516 UTC [1] LOG:  database system is ready to accept connections\n```", "```java\n$ mvn compile test\n```", "```java\n[INFO] Running com.packt.quarkus.chapter5.CustomerEndpointTest\n. . . .\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 11.846 s - in com.packt.quarkus.chapter5.CustomerEndpointTest\n```", "```java\n<div class=\"divTable blueTable\">\n    <div class=\"divTableHeading\">\n        <div  class=\"divTableHead\">Customer Name</div>\n        <div  class=\"divTableHead\">Customer Address</div>\n        <div  class=\"divTableHead\">Action</div>\n    </div>\n    <div class=\"divTableRow\" ng-repeat=\"customer in customers\">\n        <div class=\"divTableCell\">{{ customer.name }}</div>\n        <div class=\"divTableCell\">{{ customer.surname }}</div>\n        <div class=\"divTableCell\">\n            <a ng-href=\"/order.html?customerId={{ customer.id \n             }}&customerName={{ customer.name }}&\n               customerSurname={{ customer.surname }}\" \n               class=\"myButton\">Orders</a>\n            <a ng-click=\"edit( customer )\" class=\"myButton\">Edit</a>\n            <a ng-click=\"remove( customer )\" \n        class=\"myButton\">Remove</a>\n        </div>\n    </div>\n</div>\n```", "```java\nvar app = angular.module(\"orderManagement\", []);\nangular.module('orderManagement').constant('SERVER_URL', '/orders');\n\n//Controller Part\napp.controller(\"orderManagementController\", function($scope, $http, SERVER_URL) {\n\n var customerId = getParameterByName('customerId');\n var customerName = getParameterByName('customerName');\n var customerSurname = getParameterByName('customerSurname');\n\n document.getElementById(\"info\").innerHTML = customerName + \" \" + customerSurname;\n\n $scope.orders = [];\n\n $scope.form = {\n customerId: customerId,\n isNew: true,\n item: \"\",\n price: 0\n };\n //Now load the data from server\n reloadData();\n```", "```java\n //HTTP POST/PUT methods for add/edit orders\n $scope.update = function() {\n\n var method = \"\";\n var url = \"\";\n var data = {};\n if ($scope.form.isNew == true) {\n // add orders - POST operation\n method = \"POST\";\n url = SERVER_URL + \"/\" + customerId;\n data.item = $scope.form.item;\n data.price = $scope.form.price;\n\n } else {\n // it's edit operation - PUT operation\n method = \"PUT\";\n url = SERVER_URL;\n\n data.item = $scope.form.item;\n data.price = $scope.form.price;\n\n }\n\n if (isNaN(data.price)) {\n alert('Price must be a Number!');\n return false;\n }\n\n $http({\n method: method,\n url: url,\n data: angular.toJson(data),\n headers: {\n 'Content-Type': 'application/json'\n }\n }).then(_success, _error);\n };\n\n //HTTP DELETE- delete order by id\n $scope.remove = function(order) {\n $http({\n method: 'DELETE',\n url: SERVER_URL + \"/\" + order.id\n }).then(_success, _error);\n };\n\n //In case of edit orders, populate form with order data\n $scope.edit = function(order) {\n $scope.form.item = order.item;\n $scope.form.price = order.price;\n $scope.form.isNew = false;\n };\n /* Private Methods */\n //HTTP GET- get all orders collection\n function reloadData() {\n $http({\n method: 'GET',\n url: SERVER_URL,\n params: {\n customerId: customerId\n }\n }).then(function successCallback(response) {\n $scope.orders = response.data;\n }, function errorCallback(response) {\n console.log(response.statusText);\n });\n }\n\n function _success(response) {\n reloadData();\n clearForm()\n }\n\n function _error(response) {\n alert(response.data.message || response.statusText);\n }\n //Clear the form\n function clearForm() {\n $scope.form.item = \"\";\n $scope.form.price = \"\";\n $scope.form.isNew = true;\n }\n});\n```", "```java\nmvn quarkus:dev\n```", "```java\nListening for transport dt_socket at address: 5005\n2019-07-14 18:41:32,974 INFO  [io.qua.dep.QuarkusAugmentor] (main) Beginning quarkus augmentation\n2019-07-14 18:41:33,789 INFO  [io.qua.dep.QuarkusAugmentor] (main) Quarkus augmentation completed in 815ms\n2019-07-14 18:41:35,153 INFO  [io.quarkus] (main) Quarkus 0.19.0 started in 2.369s. Listening on: http://[::]:8080\n2019-07-14 18:41:35,154 INFO  [io.quarkus] (main) Installed features: [agroal, cdi, hibernate-orm, jdbc-postgresql, narayana-jta, resteasy, resteasy-jsonb]\n```", "```java\n@Cacheable\n@Entity\npublic class Customer {\n\n}\n```", "```java\n@Cacheable\n@Entity\n@NamedQuery(name = \"Customers.findAll\",\n        query = \"SELECT c FROM Customer c ORDER BY c.id\",\n        hints = @QueryHint(name = \"org.hibernate.cacheable\", value = \n        \"true\") )\npublic class Customer {   \n}\n```", "```java\nquarkus.hibernate-orm.log.sql=true\n\n```", "```java\nHibernate: \n    select\n        customer0_.id as id1_0_,\n        customer0_.name as name2_0_,\n        customer0_.surname as surname3_0_ \n    from\n        Customer customer0_ \n    order by\n        customer0_.id\n```", "```java\noc new-project quarkus-hibernate\n```", "```java\noc get is -n openshift | grep postgresql\n```", "```java\npostgresql   172.30.1.1:5000/openshift/postgresql   latest,10,9.2 + 3 more...    6 hours ago\n```", "```java\noc new-app -e POSTGRESQL_USER=quarkus -e POSTGRESQL_PASSWORD=quarkus -e POSTGRESQL_DATABASE=quarkusdb postgresql\n```", "```java\n--> Creating resources ...\n imagestreamtag.image.openshift.io \"postgresql:10\" created\n deploymentconfig.apps.openshift.io \"postgresql\" created\n service \"postgresql\" created\n --> Success\n Application is not exposed. You can expose services to the \n    outside world by executing one or more of the commands below:\n 'oc expose svc/postgresql'\n Run 'oc status' to view your app.\n```", "```java\nNAME                TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE\npostgresql          ClusterIP   172.30.154.130   <none>        5432/TCP   14m\n```", "```java\n# Build native application\nmvn package -Pnative -Dnative-image.docker-build=true -DskipTests=true\n\n# Create a new Binary Build named \"quarkus-hibernate\"\noc new-build --binary --name=quarkus-hibernate -l app=quarkus-hibernate\n\n# Set the dockerfilePath attribute into the Build Configuration\noc patch bc/quarkus-hibernate -p '{\"spec\":{\"strategy\":{\"dockerStrategy\":{\"dockerfilePath\":\"src/main/docker/Dockerfile.native\"}}}}'\n\n# Start the build, uploading content from the local folder: \noc start-build quarkus-hibernate --from-dir=. --follow\n\n# Create a new Application, using as Input the \"quarkus-hibernate\" image stream:\noc new-app --image-stream=quarkus-hibernate:latest\n\n# Expose the Service through a Route:\noc expose svc/quarkus-hibernate\n```", "```java\nNAME                HOST/PORT                                                  PATH      SERVICES            PORT       TERMINATION   WILDCARD\nquarkus-hibernate   quarkus-hibernate-quarkus-hibernate.192.168.42.30.nip.io             quarkus-hibernate   8080-tcp                 None\n```", "```java\n<dependency>\n       <groupId>io.quarkus</groupId>\n       <artifactId>quarkus-hibernate-orm-panache</artifactId>\n</dependency>\n```", "```java\n@Entity\n@NamedQuery(name = \"Customers.findAll\",\n         query = \"SELECT c FROM Customer c ORDER BY c.id\" )\npublic class Customer extends PanacheEntityBase {\n     @Id\n     @SequenceGenerator(\n             name = \"customerSequence\",\n             sequenceName = \"customerId_seq\",\n             allocationSize = 1,\n             initialValue = 1)\n     @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \n      \"customerSequence\")\n     public Long id;\n\n     @Column(length = 40)\n     public String name;\n\n     @Column(length = 40)\n     public String surname;\n\n     @OneToMany(mappedBy = \"customer\")\n     @JsonbTransient\n     public List<Orders> orders;\n}\n```", "```java\n@Entity\n@NamedQuery(name = \"Orders.findAll\",\n         query = \"SELECT o FROM Orders o WHERE o.customer.id = :id ORDER BY o.item\")\npublic class Orders extends PanacheEntityBase {\n     @Id\n     @SequenceGenerator(\n             name = \"orderSequence\",\n             sequenceName = \"orderId_seq\",\n             allocationSize = 1,\n             initialValue = 1)\n     @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \n      \"orderSequence\")\n     public Long id;\n\n     @Column(length = 40)\n     public String item;\n\n     @Column\n     public Long price;\n\n     @ManyToOne\n     @JoinColumn(name = \"customer_id\")\n     @JsonbTransient\n     public Customer customer;\n\n}\n```", "```java\npublic class CustomerRepository {\n\n     public List<Customer> findAll() {\n         return Customer.listAll(Sort.by(\"id\"));\n     }\n\n     public Customer findCustomerById(Long id) {\n         Customer customer = Customer.findById(id);\n\n         if (customer == null) {\n             throw new WebApplicationException(\"Customer with id \n              of \" +  id + \" does not exist.\", 404);\n         }\n         return customer;\n     }\n     @Transactional\n     public void updateCustomer(Customer customer) {\n         Customer customerToUpdate = findCustomerById(customer.id);\n         customerToUpdate.name = customer.name;\n         customerToUpdate.surname = customer.surname;\n     }\n     @Transactional\n     public void createCustomer(Customer customer) {\n         customer.persist();\n     }\n     @Transactional\n     public void deleteCustomer(Long customerId) {\n         Customer customer = findCustomerById(customerId);\n         customer.delete();\n     }\n }\n```", "```java\npublic class OrderRepository {\n\n     public List<Orders> findAll(Long customerId) {\n         return Orders.list(\"id\", customerId);\n     }\n\n     public Orders findOrderById(Long id) {\n         Orders order = Orders.findById(id);\n         if (order == null) {\n             throw new WebApplicationException(\"Order with id of\n             \" + id  + \" does not exist.\", 404);\n         }\n         return order;\n     }\n     @Transactional\n     public void updateOrder(Orders order) {\n         Orders orderToUpdate = findOrderById(order.id);\n         orderToUpdate.item = order.item;\n         orderToUpdate.price = order.price;\n     }\n     @Transactional\n     public void createOrder(Orders order, Customer c) {\n         order.customer = c;\n         order.persist();\n     }\n     @Transactional\n     public void deleteOrder(Long orderId) {\n         Orders order = findOrderById(orderId);\n         order.delete();\n     }\n }\n```", "```java\nmvn compile quarkus:dev\n```", "```java\nHibernate: \n    INSERT INTO customer (id, name, surname) VALUES ( nextval('customerId_seq'), 'John','Doe')\nHibernate: \n    INSERT INTO customer (id, name, surname) VALUES ( nextval('customerId_seq'), 'Fred','Smith')\n2019-11-28 10:44:02,887 INFO  [io.quarkus] (main) Quarkus 1.0.0.Final started in 2.278s. Listening on: http://[::]:8080\n2019-11-28 10:44:02,888 INFO  [io.quarkus] (main) Installed features: [agroal, cdi, hibernate-orm, jdbc-postgresql, narayana-jta, resteasy, resteasy-jsonb]\n```"]