["```java\npublic class Calculator {\n    public int add(int a, int b) {\n        return a + b;\n    }\n}\n```", "```java\npublic class CalculatorTest {\n    public static void main(String[] args) {\n        testAddition();\n    }\n    public static void testAddition() {\n        // Arrange\n        Calculator calculator = new Calculator();\n        // Act\n        int result = calculator.add(5, 3);\n        // Assert\n        int expected = 8;\n        if (result == expected) {\n            System.out.println(\"testAddition PASSED\");\n        } else {\n            System.out.println(\"testAddition FAILED\");\n        }\n    }\n}\n```", "```java\n@Test\n@DisplayName(\"Tests the Addition method of the Calculator\")\nvoid testAddition() {\n    Calculator calculator = new Calculator();\n    int result = calculator.add(5, 3);\n    int expected = 8;\n    Assertions.assertEquals(result, expected);\n}\n```", "```java\n    import static org.mockito.Mockito.*;\n    // Create a mock HTTP client\n    HttpClient httpClientMock = mock(HttpClient.class);\n    // Create an instance of your service and inject the\n      mock\n    MyService myService = new MyService(httpClientMock);\n    // Define the behavior of the mock\n    when(httpClientMock.get(anyString())).thenReturn\n      (\"Mocked response\");\n    // Perform a test using MyService\n    String result = myService.getDataFromExternalService\n      (\"https://example.com/api\");\n    ```", "```java\n    // Verify interactions with the mock\n    verify(httpClientMock).get(\"https://example.com/api\");\n    ```", "```java\npublic class Calculator {\n    public Integer sum(Integer a, Integer b) {\n        return a + b;\n    }\n    public Integer subtract(Integer a, Integer b) {\n        return a - b;\n    }\n    public Integer multiply(Integer a, Integer b) {\n        return a * b;\n    }\n}\n```", "```java\nclass CalculatorTest {\n    private final Calculator calculator = new Calculator();\n    @Test\n    void sum() {\n        var sum = calculator.sum(1, 4);\n        assertEquals(5, sum);\n    }\n    @Test\n    void subtract() {\n        var sum = calculator.subtract(10, 4);\n        assertEquals(6, sum);\n    }\n}\n```", "```java\n<plugin>\n   <groupId>org.jacoco</groupId>\n   <artifactId>jacoco-maven-plugin</artifactId>\n   <version>0.8.10</version>\n   <executions>\n      <execution>\n         <goals>\n            <goal>prepare-agent</goal>\n         </goals>\n      </execution>\n      <execution>\n         <id>report</id>\n         <phase>prepare-package</phase>\n         <goals>\n            <goal>report</goal>\n         </goals>\n      </execution>\n   </executions>\n</plugin>\n```", "```java\n@Test\nvoid multiply() {\n    var sum = calculator.multiply(6, 5);\n    assertEquals(30, sum);\n}\n```", "```java\npublic Integer subtract(Integer minuend, Integer\n  subtrahend) {\n    if (subtrahend > minuend) {\n        throw new IllegalArgumentException(\"Minuend must be\n           greater than the subtrahend\");\n    }\n    return minuend - subtrahend;\n}\n```", "```java\n@Test\nvoid subtractWithIllegalArgument() {\n    assertThrows(IllegalArgumentException.class, () ->\n      calculator.subtract(10, 21));\n}\n```"]