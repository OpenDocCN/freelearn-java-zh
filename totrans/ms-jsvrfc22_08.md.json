["```java\n<input placeholder=\"Enter player e-mail\" type=\"email\">\n```", "```java\n    <html \n\n          >\n\n     ...\n     <h:body>\n      <h:inputText value=\"#{playersBean.email}\" \n                   f5:type=\"email\" f5:placeholder=\"Enter player e-mail\"/>            \n    ...\n    ```", "```java\n    <h:inputText value=\"#{playersBean.email}\">\n     <f:passThroughAttribute name=\"placeholder\" \n                             value=\"Enter player e-mail\" />\n     <f:passThroughAttribute name=\"type\" value=\"email\" />\n    </h:inputText>\n    ```", "```java\n    private Map<String, String> attrs = new HashMap<>();\n    ...\n    attrs.put(\"type\", \"email\");\n    attrs.put(\"placeholder\", \"Enter player e-mail\");\n    ```", "```java\n    <h:inputText value=\"#{playersBean.email}\">\n     <f:passThroughAttributes value=\"#{playersBean.attrs}\" />\n    </h:inputText>\n    ```", "```java\n    <h:inputText value=\"#{playersBean.email}\">\n     <f:passThroughAttributes value='#{{\"placeholder\":\"Enter player e-mail\", \"type\":\"email\"}}' />\n    </h:inputText>\n    ```", "```java\n    <h:body>        \n     <h:form id=\"playerForm\">\n     ...\n     </h:form>\n    </h:body>\n    ...\n    FacesContext facesContext = FacesContext.getCurrentInstance();\n    UIComponent formComponent = facesContext.getViewRoot().\n                                      findComponent(\"playerForm\");\n\n    HtmlInputText playerInputText = new HtmlInputText();\n    Map passThroughAttrs = playerInputText.getPassThroughAttributes();\n    passThroughAttrs.put(\"placeholder\", \"Enter player email\");\n    passThroughAttrs.put(\"type\", \"email\");        \n\n    formComponent.getChildren().add(playerInputText);\n    ...\n    ```", "```java\n<html \n      >\n\n <head jsf:id=\"head\">\n  <title></title>\n </head>\n\n <body jsf:id=\"body\">\n  <form jsf:id=\"form\">\n   Name:<input type=\"text\" jsf:value=\"#{playersBean.playerName}\"/>\n   Surname:<input type=\"text\" jsf:value=\"#{playersBean.playerSurname}\"/>\n   <button jsf:action=\"#{playersBean.playerAction()}\">Show</button>\n  </form>\n </body>\n</html>\n```", "```java\n<html \n\n      >\n\n <head jsf:id=\"head\">\n  <title></title>\n </head>\n <body jsf:id=\"body\">\n  <form jsf:id=\"form\">\n   Name:\n   <input type=\"text\" jsf:value=\"#{playersBean.playerName}\">                               \n    <f:validator validatorId=\"playerValidator\"/>\n   </input>    \n   <!-- or, like this -->\n  <input type=\"text\" jsf:value=\"#{playersBean.playerName}\" \n                     jsf:validator=\"playerValidator\"/>\n   Surname:\n   <input type=\"text\" jsf:value=\"#{playersBean.playerSurname}\">      \n    <f:validator validatorId=\"playerValidator\"/>\n   </input>\n   <!-- or, like this -->\n   <input type=\"text\" jsf:value=\"#{playersBean.playerSurname}\"       \n                      jsf:validator=\"playerValidator\"/>\n   <button jsf:action=\"#{playersBean.playerAction()}\">Show\n    <f:param id=\"playerNumber\" name=\"playerNumberParam\" value=\"2014\"/>                 \n   </button>\n  </form>\n </body>\n</html>\n```", "```java\n@Named\n@RequestScoped\npublic class PlayersBean {\n\n    private static final Logger logger = Logger.getLogger(PlayersBean.class.getName());\n\n    @NotNull(message = \"null/empty values not allowed in player name\")\n    @Size(min = 3,message = \"Give at least 3 characters for player name\")\n    private String playerName;\n    @NotNull(message = \"null/empty values not allowed in player surname\")\n    @Size(min = 3,message = \"Give at least 3 characters for player surname\")\n    private String playerSurname;\n    ...\n```", "```java\n<context-param>\n <param-name>\n  javax.faces.INTERPRET_EMPTY_STRING_SUBMITTED_VALUES_AS_NULL\n </param-name>\n <param-value>true</param-value>\n</context-param>\n```", "```java\n@WebServlet(name = \"UploadServlet\", urlPatterns = {\"/UploadServlet\"})\n@MultipartConfig(location=\"/folder\", fileSizeThreshold=1024*1024, \n                 maxFileSize=1024*1024*3, maxRequestSize=1024*1024*3*3)\npublic class UploadServlet extends HttpServlet {\n\n @Override\n protected void doPost(HttpServletRequest request, \n                       HttpServletResponse response)\n  throws ServletException, IOException {\n\n  for (Part part : request.getParts()) {\n       String filename = \"\";\n       for (String s: part.getHeader(\"content-disposition\").split(\";\")) {\n            if (s.trim().startsWith(\"filename\")) {\n                filename = s.split(\"=\")[1].replaceAll(\"\\\"\", \"\");\n            }\n       }\n       part.write(filename);\n  }\n }\n}\n```", "```java\n<form action=\"UploadServlet\" enctype=\"multipart/form-data\" method=\"POST\">\n  <input type=\"file\" name=\"file\">\n  <input type=\"Submit\" value=\"Upload File\">\n</form>\n```", "```java\n    <h:form id=\"uploadFormId\" enctype=\"multipart/form-data\">\n    ```", "```java\n    <h:inputFile id=\"fileToUpload\" required=\"true\" \n                  requiredMessage=\"No file selected ...\" \n                  value=\"#{uploadBean.file}\"/>   \n    ```", "```java\n    <h:commandButton value=\"Upload\" action=\"#{uploadBean.upload()}\"/>\n    ```", "```java\n<h:messages globalOnly=\"true\" showDetail=\"false\" \n            showSummary=\"true\" style=\"color:red\"/>\n<h:form id=\"uploadFormId\" enctype=\"multipart/form-data\">\n <h:inputFile id=\"fileToUpload\" required=\"true\" \n              requiredMessage=\"No file selected ...\" \n              value=\"#{uploadBean.file}\"/>                       \n <h:commandButton value=\"Upload\" action=\"#{uploadBean.upload()}\"/>             \n <h:message showDetail=\"false\" showSummary=\"true\" \n            for=\"fileToUpload\" style=\"color:red\"/>\n</h:form>\n```", "```java\n    import javax.servlet.http.Part;\n    ...\n    private Part file;\n    ...\n    public Part getFile() {\n     return file;\n    }\n\n    public void setFile(Part file) {\n     this.file = file;\n    }\n    ...\n    ```", "```java\n    public void upload() {\n     try {\n         if (file != null) {\n             Scanner scanner = new Scanner(file.getInputStream(), \n                                       \"UTF-8\").useDelimiter(\"\\\\A\");\n             fileInString = scanner.hasNext() ? scanner.next() : \"\";\n\n             FacesContext.getCurrentInstance().addMessage(null, \n                     new FacesMessage(\"Upload successfully ended!\"));\n             }\n         } catch (IOException | NoSuchElementException e) {\n           FacesContext.getCurrentInstance().addMessage(null, \n                         new FacesMessage(\"Upload failed!\"));\n     }\n    }\n    ```", "```java\n<h:form id=\"uploadFormId\" enctype=\"multipart/form-data\">\n <h:inputFile id=\"fileToUpload_1\" required=\"true\" \n              requiredMessage=\"No file selected ...\" \n              value=\"#{uploadBean.file1}\"/>           \n <h:inputFile id=\"fileToUpload_2\" required=\"true\" \n              requiredMessage=\"No file selected ...\" \n              value=\"#{uploadBean.file2}\"/>\n ...           \n <h:message showDetail=\"false\" showSummary=\"true\" \n            for=\"fileToUpload_1\" style=\"color:red\"/>\n <h:message showDetail=\"false\" showSummary=\"true\" \n            for=\"fileToUpload_2\" style=\"color:red\"/>\n ...\n <h:commandButton value=\"Upload\" action=\"#{uploadBean.upload()}\"/>\n</h:form>\n```", "```java\n...\nprivate Part file1;\nprivate Part file2;\n...\n//getter and setter for both, file1 and file2\n...\n```", "```java\n...\nif (file1 != null) {\n    Scanner scanner1 = new Scanner(file1.getInputStream(), \n                       \"UTF-8\").useDelimiter(\"\\\\A\");\n    fileInString1 = scanner1.hasNext() ? scanner1.next() : \"\";\n    FacesContext.getCurrentInstance().addMessage(null, new \n          FacesMessage(\"Upload successfully ended for file 1!\"));\n}\n\nif (file2 != null) {\n    Scanner scanner2 = new Scanner(file2.getInputStream(), \n                       \"UTF-8\").useDelimiter(\"\\\\A\");\n    fileInString2 = scanner2.hasNext() ? scanner2.next() : \"\";\n    FacesContext.getCurrentInstance().addMessage(null, new \n          FacesMessage(\"Upload successfully ended for file 2!\"));\n}\n...\n```", "```java\n<h:form id=\"formUploadId\" enctype=\"multipart/form-data\">\n <h:inputFile id=\"fileToUpload\" value=\"#{uploadBean.file}\"  \n              required=\"true\" requiredMessage=\"No file selected ...\">                                      \n ...\n </h:inputFile>\n</h:form>\n```", "```java\n    var file = document.getElementById('formUploadId:fileToUpload').files[0];\n    ...\n    alert(file.name);\n    alert(file.size);\n    alert(file.type);\n    ```", "```java\n    // the id of the component, formUploadId:fileToUpload\n    #{uploadBean.file.name}\n\n    // the uploaded file name\n    #{uploadBean.file.submittedFileName}\n\n    // the uploaded file size\n    #{uploadBean.file.size}\n\n    // the uploaded file content type\n    #{uploadBean.file.contentType}\n    ```", "```java\n    ...\n    private Part file;\n    ...\n    System.out.println(\"File component id: \" + file.getName());\n    System.out.println(\"Content type: \" + file.getContentType());\n    System.out.println(\"Submitted file name:\" + file.getSubmittedFileName());            \n    System.out.println(\"File size: \" + file.getSize());\n    ...\n    ```", "```java\n    private String getFileNameFromContentDisposition(Part file) {\n\n     for (String content:file.getHeader(\"content-disposition\").split(\";\")) {\n          if (content.trim().startsWith(\"filename\")) {\n              return content.substring(content.indexOf('=') + \n                                         1).trim().replace(\"\\\"\", \"\");\n          }\n     }\n\n     return null;\n    }\n    ```", "```java\n   try (InputStream inputStream = file.getInputStream(); \n        FileOutputStream outputStream = new FileOutputStream(\"D:\" +\n        File.separator + \"files\" + File.separator + getSubmittedFileName())) {\n\n     int bytesRead = 0;\n     final byte[] chunck = new byte[1024];\n     while ((bytesRead = inputStream.read(chunck)) != -1) {\n             outputStream.write(chunck, 0, bytesRead);\n     }\n\n     FacesContext.getCurrentInstance().addMessage(null, new \n             FacesMessage(\"Upload successfully ended!\"));\n     } catch (IOException e) {\n              FacesContext.getCurrentInstance().addMessage(null, new \n                                     FacesMessage(\"Upload failed!\"));\n     }\n```", "```java\n<servlet>\n <servlet-name>Faces Servlet</servlet-name>\n <servlet-class>javax.faces.webapp.FacesServlet</servlet-class>\n <load-on-startup>1</load-on-startup>\n <multipart-config>\n  <location>D:\\files</location>\n  <max-file-size>1310720</max-file-size>\n  <max-request-size>20971520</max-request-size>\n  <file-size-threshold>50000</file-size-threshold>\n </multipart-config>\n</servlet>\n```", "```java\ntry {\n    file.write(file.getSubmittedFileName());\n    FacesContext.getCurrentInstance().addMessage(null, new \n                  FacesMessage(\"Upload successfully ended!\"));\n    } catch (IOException e) {\n      FacesContext.getCurrentInstance().addMessage(null, new \n                  FacesMessage(\"Upload failed!\"));\n    }\n```", "```java\n@FacesValidator\npublic class UploadValidator implements Validator {\n\n private static final Logger logger = \n         Logger.getLogger(UploadValidator.class.getName());\n\n @Override\n public void validate(FacesContext context, UIComponent component, \n                             Object value) throws ValidatorException {\n\n  Part file = (Part) value;\n\n  //VALIDATE FILE NAME LENGTH\n  String name = file.getSubmittedFileName();\n  logger.log(Level.INFO, \"VALIDATING FILE NAME: {0}\", name);\n  if (name.length() == 0) {\n      FacesMessage message = new FacesMessage(\"Upload Error: Cannot \n                                        determine the file name !\");\n      throw new ValidatorException(message);\n  } else if (name.length() > 25) {\n    FacesMessage message = new FacesMessage(\"Upload Error: \n                                        The file name is to long !\");\n    throw new ValidatorException(message);\n  }\n\n  //VALIDATE FILE CONTENT TYPE\n  if ((!\"image/png\".equals(file.getContentType())) && \n                      (!\"image/jpeg\".equals(file.getContentType()))) {\n       FacesMessage message = new FacesMessage(\"Upload Error: Only images can be uploaded (PNGs and JPGs) !\");\n       throw new ValidatorException(message);\n  }\n\n  //VALIDATE FILE SIZE (not bigger than 1 MB)\n  if (file.getSize() > 1048576) {\n      FacesMessage message = new FacesMessage(\"Upload Error: Cannot \n                                 upload files larger than 1 MB !\");\n      throw new ValidatorException(message);\n  }\n }\n}\n```", "```java\n<h:inputFile id=\"fileToUpload\" required=\"true\" \n             requiredMessage=\"No file selected ...\" \n             value=\"#{uploadBean.file}\">           \n <f:validator validatorId=\"uploadValidator\" />\n</h:inputFile>\n```", "```java\n<h:form enctype=\"multipart/form-data\">\n <h:inputFile id=\"fileToUpload\" value=\"#{uploadBean.file}\" \n              required=\"true\" requiredMessage=\"No file selected ...\">\n  <!-- <f:ajax listener=\"#{uploadBean.upload()}\"\n               render=\"@all\"/> use @all in JSF 2.2.0 --> \n  <f:ajax listener=\"#{uploadBean.upload()}\" \n               render=\"fileToUpload\"/> <!-- works in JSF 2.2.5 -->\n </h:inputFile>           \n <h:message showDetail=\"false\" showSummary=\"true\" \n            for=\"fileToUpload\" style=\"color:red\"/>\n</h:form>\n```", "```java\n<h:form enctype=\"multipart/form-data\">\n <h:inputFile id=\"fileToUpload\" value=\"#{uploadBean.file}\" \n              required=\"true\" requiredMessage=\"No file selected ...\"/>                          \n <h:commandButton value=\"Upload\" action=\"#{uploadBean.upload()}\">\n  <!-- <f:ajax execute=\"fileToUpload\"\n              render=\"@all\"/> use @all in JSF 2.2.0 --> \n  <f:ajax execute=\"fileToUpload\" \n              render=\"fileToUpload\"/> <!-- works in JSF 2.2.5 -->\n </h:commandButton>\n <h:message showDetail=\"false\" showSummary=\"true\" \n            for=\"fileToUpload\" style=\"color:red\"/>\n</h:form>\n```", "```java\n    <h:form enctype=\"multipart/form-data\">                    \n     <h:inputFile id=\"uploadFileId\" value=\"#{uploadBean.file}\" \n              required=\"true\" requiredMessage=\"No file selected ...\">\n      <f:ajax render=\":previewImgId :imgNameId :uploadMessagesId\" \n              listener=\"#{uploadBean.validateFile()}\"/>        \n     </h:inputFile>                                       \n    </h:form>\n    ```", "```java\n    ...\n    private Part file;\n    ...\n    public void validateFile() {\n\n     //VALIDATE FILE NAME LENGTH\n     String name = file.getSubmittedFileName();\n     if (name.length() == 0) {\n         resetFile();\n\n         FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(\"Upload  \n            Error: Cannot determine the file name !\"));\n     } else if (name.length() > 25) {\n       resetFile();\n       FacesContext.getCurrentInstance().addMessage(null, new \n       FacesMessage(\"Upload Error: The file name is to long !\"));\n     } else //VALIDATE FILE CONTENT TYPE\n     if ((!\"image/png\".equals(file.getContentType())) && \n           (!\"image/jpeg\".equals(file.getContentType()))) {\n          resetFile();\n          FacesContext.getCurrentInstance().addMessage(null, new \n          FacesMessage(\"Upload Error: Only images can be uploaded\n               (PNGs and JPGs) !\"));\n     } else //VALIDATE FILE SIZE (not bigger than 1 MB)        \n     if (file.getSize() > 1048576) {\n         resetFile();\n         FacesContext.getCurrentInstance().addMessage(null, new \n         FacesMessage(\"Upload Error: Cannot upload files larger than 1 MB !\"));\n     }\n    }\n    ```", "```java\n    public void resetFile() {\n     try {\n         if (file != null) {\n             file.delete();\n         }\n     } catch (IOException ex) {\n       Logger.getLogger(UploadBean.class.getName()).\n                             log(Level.SEVERE, null, ex);\n     }\n     file = null;\n    }\n    ```", "```java\n    ...\n    <h:panelGrid columns=\"2\">\n     <h:graphicImage id=\"previewImgId\" \n                     value=\"/PreviewServlet/#{header['Content-Length']}\" \n                     width=\"#{uploadBean.file.size gt 0 ? 100 : 0}\" \n                     height=\"#{uploadBean.file.size gt 0 ? 100 : 0}\"/>\n     <h:outputText id=\"imgNameId\" value=\"#{uploadBean.file.submittedFileName} \n      #{empty uploadBean.file.submittedFileName ? '' : ','} \n      #{uploadBean.file.size} #{uploadBean.file.size gt 0 ? 'bytes' : ''}\"/>\n    </h:panelGrid>\n    ...\n    ```", "```java\n    protected void processRequest(HttpServletRequest request, \n                                   HttpServletResponse response)\n     throws ServletException, IOException {\n\n     //decorate with buffers if you need to\n     OutputStream out = response.getOutputStream();\n\n     response.setHeader(\"Expires\", \"Sat, 6 May 1995 12:00:00 GMT\");\n     response.setHeader(\"Cache-Control\",\"no-store,no-cache,must-revalidate\");\n     response.addHeader(\"Cache-Control\", \"post-check=0, pre-check=0\");\n     response.setHeader(\"Pragma\", \"no-cache\");\n\n     int nRead;\n     try {\n         HttpSession session = request.getSession(false);\n         if (session.getAttribute(\"uploadBean\") != null) {\n             UploadBean uploadBean = (UploadBean) \n                        session.getAttribute(\"uploadBean\");\n             if (uploadBean.getFile() != null) {\n                 try (InputStream inStream = \n                              uploadBean.getFile().getInputStream()) {\n                      byte[] data = new byte[1024];\n                      while ((nRead =inStream.\n                              read(data, 0, data.length)) != -1) {\n                              out.write(data, 0, nRead);\n                      }\n                 }\n             }\n        }\n     } finally {\n       out.close();\n     }\n    }\n    ```", "```java\n    protected void processRequest(HttpServletRequest request, \n                                   HttpServletResponse response)\n     throws ServletException, IOException {\n\n     OutputStream out = response.getOutputStream();\n\n     response.setHeader(\"Expires\", \"Sat, 6 May 1995 12:00:00 GMT\");\n     response.setHeader(\"Cache-Control\",\"no-store,no-cache,must-revalidate\");\n     response.addHeader(\"Cache-Control\", \"post-check=0, pre-check=0\");\n     response.setHeader(\"Pragma\", \"no-cache\");\n\n     try {\n         HttpSession session = request.getSession(false);\n         if (session.getAttribute(\"uploadBean\") != null) {\n             UploadBean uploadBean = (UploadBean) \n                                  session.getAttribute(\"uploadBean\");\n             if (uploadBean.getFile() != null) {\n                 BufferedImage image = ImageIO.read(uploadBean.getFile().getInputStream());\n                 BufferedImage resizedImage = new BufferedImage(100, 100, BufferedImage.TYPE_INT_ARGB);\n                 Graphics2D g = resizedImage.createGraphics();\n                 g.drawImage(image, 0, 0, 100, 100, null);\n                 g.dispose();\n                 ImageIO.write(resizedImage, \"png\", out);\n             }\n         }\n     } finally {\n       out.close();\n     }\n    }\n    ```", "```java\n    <h:form>\n     <h:commandButton value=\"Upload Image\" \n                      action=\"#{uploadBean.saveFileToDisk()}\"/>\n     <h:commandButton value=\"Cancel\" action=\"#{uploadBean.resetFile()}\"/> \n    </h:form>\n    ```", "```java\n    public void saveFileToDisk() {\n\n     if (file != null) {\n         //decorate with buffers if you need too\n         try (InputStream inputStream = file.getInputStream(); \n              FileOutputStream outputStream = new FileOutputStream(\"D:\" + File.separator + \"files\" + File.separator + getSubmittedFileName())) {\n\n              int bytesRead;\n              final byte[] chunck = new byte[1024];\n              while ((bytesRead = inputStream.read(chunck)) != -1) {\n                      outputStream.write(chunck, 0, bytesRead);\n              }\n\n              resetFile();\n\n              FacesContext.getCurrentInstance().addMessage(null, new \n                          FacesMessage(\"Upload successfully ended!\"));\n         } catch (IOException e) {\n                  FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(\"Upload failed!\"));\n         }\n      }\n     }\n    ```", "```java\n<script type=\"text/javascript\">\nfunction validateFile() {\n // <![CDATA[\n document.getElementById('formSaveId:uploadHiddenId').value = false;\n document.getElementById('validationId').innerHTML = \"\";\n\n var file= document.getElementById('formUploadId:fileToUpload').files[0];               \n\n document.getElementById('fileNameId').innerHTML = \n                         \"<b>File Name:</b> \" + file.name;\n if (file.size > 1048576)\n     fileSize = (Math.round(file.size * 100 / \n                         (1048576)) / 100).toString() + 'MB';\n else\n     fileSize = (Math.round(file.size * 100 \n                         / 1024) / 100).toString() + 'KB';\n\n document.getElementById('fileSizeId').innerHTML = \n                         \"<b>File Size:</b> \" + fileSize;\n document.getElementById('fileContentTypeId').innerHTML = \n                         \"<b>File Type:</b> \" + file.type;\n\n //VALIDATE FILE NAME LENGTH     \n if (file.name.length === 0) {\n     clearUploadField();\n     document.getElementById('validationId').innerHTML = \n      \"<ul><li>Upload Error: Cannot determine the file name !</li></ul>\";\n     return false;\n }\n\n if (file.name.length > 25) {\n     clearUploadField();\n     document.getElementById('validationId').innerHTML = \n          \"<ul><li>Upload Error: The file name is to long !</li></ul>\";\n     return false;\n }\n\n //VALIDATE FILE CONTENT TYPE\n  if (file.type !== \"image/png\" && file.type !== \"image/jpeg\") {\n     clearUploadField();\n     document.getElementById('validationId').innerHTML = \n         \"<ul><li>Upload Error: Only images can be uploaded \n                                  (PNGs and JPGs) !</li></ul>\";\n     return false;\n }\n\n //VALIDATE FILE SIZE (not bigger than 1 MB)   \n if (file.size > 1048576) {\n     clearUploadField();\n     document.getElementById('validationId').innerHTML = \n       \"<ul><li>Upload Error: Cannot upload files \n                              larger than 1 MB !</li></ul>\";\n     return false;\n }\n\n document.getElementById('formSaveId:uploadHiddenId').value = true;\n return true;\n //]]>\n}\n\nfunction clearUploadField() {               \n\n document.getElementById('previewImgId').removeAttribute(\"src\");\n document.getElementById('imgNameId').innerHTML = \"\";\n document.getElementById('uploadMessagesId').innerHTML = \"\";\n var original = document.getElementById(\"formUploadId:fileToUpload\");\n var replacement = document.createElement(\"input\");\n\n replacement.type = \"file\";\n replacement.id = original.id;\n replacement.name = original.name;\n replacement.className = original.className;\n replacement.style.cssText = original.style.cssText;\n replacement.onchange = original.onchange;\n // ... more attributes\n\n original.parentNode.replaceChild(replacement, original);\n}\n\n</script>\n```", "```java\n<html \n\n      >\n...\n<h:form id=\"uploadFormId\" enctype=\"multipart/form-data\">\n <h:inputFile id=\"fileToUpload\" required=\"true\" f5:multiple=\"multiple\" \n     requiredMessage=\"No file selected ...\" value=\"#{uploadBean.file}\"/>           \n <h:commandButton value=\"Upload\" action=\"#{uploadBean.upload()}\"/>\n</h:form>\n```", "```java\n@Override\npublic void decode(FacesContext context, UIComponent component) {\n\n rendererParamsNotNull(context, component);\n\n if (!shouldDecode(component)) {\n     return;\n }\n\n String clientId = decodeBehaviors(context, component);\n\n if (clientId == null) {\n     clientId = component.getClientId(context);\n }\n\n assert(clientId != null);\n ExternalContext externalContext = context.getExternalContext();\n Map<String, String> requestMap = \n                     externalContext.getRequestParameterMap();\n\n if (requestMap.containsKey(clientId)) {\n     setSubmittedValue(component, requestMap.get(clientId));\n }\n\n HttpServletRequest request = (HttpServletRequest) \n                               externalContext.getRequest();\n try {\n Collection<Part> parts = request.getParts();\n for (Part cur : parts) {\n if (clientId.equals(cur.getName())) {\n component.setTransient(true);\n setSubmittedValue(component, cur);\n }\n }\n } catch (IOException ioe) {\n          throw new FacesException(ioe);\n } catch (ServletException se) {\n          throw new FacesException(se);\n }\n}\n```", "```java\ntry {\n    Collection<Part> parts = request.getParts();\n    List<Part> multiple = new ArrayList<>();\n    for (Part cur : parts) {\n         if (clientId.equals(cur.getName())) {\n             component.setTransient(true);\n             multiple.add(cur);\n         }\n    }\n    this.setSubmittedValue(component, multiple);\n} catch (IOException | ServletException ioe) {\n  throw new FacesException(ioe);\n}\n```", "```java\n...\nprivate List<Part> files;\n\npublic List<Part> getFile() {\n return files;\n}\n\npublic void setFile(List<Part> files) {\n this.files = files;\n}\n...\n```", "```java\n...\nfor (Part file : files) {\n try (InputStream inputStream = file.getInputStream(); FileOutputStream \n      outputStream = new FileOutputStream(\"D:\" + File.separator + \"files\" + File.separator + getSubmittedFileName())) {\n\n      int bytesRead = 0;\n      final byte[] chunck = new byte[1024];\n      while ((bytesRead = inputStream.read(chunck)) != -1) {\n              outputStream.write(chunck, 0, bytesRead);\n      }\n\n      FacesContext.getCurrentInstance().addMessage(null, new \n       FacesMessage(\"Upload successfully ended: \" +  \n        file.getSubmittedFileName()));\n } catch (IOException e) {\n          FacesContext.getCurrentInstance().addMessage(null, new   \n                                  FacesMessage(\"Upload failed !\"));\n }\n}\n...\n```", "```java\n<script type=\"text/javascript\">\n function progressBar(data) {\n  if (data.status === \"begin\") {\n      document.getElementById(\"uploadMsgId\").innerHTML=\"\";\n      document.getElementById(\"progressBarId\").\n                setAttribute(\"src\", \"./resources/progress_bar.gif\");\n  }\n\n  if (data.status === \"complete\") {              \n      document.getElementById(\"progressBarId\").removeAttribute(\"src\");\n  }\n }\n</script>\n...\n<h:body>       \n <h:messages id=\"uploadMsgId\" globalOnly=\"true\" showDetail=\"false\" \n                             showSummary=\"true\" style=\"color:red\"/>\n <h:form id=\"uploadFormId\" enctype=\"multipart/form-data\">\n  <h:inputFile id=\"fileToUpload\" required=\"true\"\n      requiredMessage=\"No file selected ...\" value=\"#{uploadBean.file}\"/>           \n  <h:message showDetail=\"false\" showSummary=\"true\" \n      for=\"fileToUpload\" style=\"color:red\"/>\n  <h:commandButton value=\"Upload\" action=\"#{uploadBean.upload()}\">             \n   <f:ajax execute=\"fileToUpload\" onevent=\"progressBar\" \n                         render=\":uploadMsgId @form\"/>\n  </h:commandButton>    \n </h:form>\n <div>            \n  <img id=\"progressBarId\" width=\"250px;\" height=\"23\"/>\n </div>\n</h:body>\n```", "```java\n<script type=\"text/javascript\">\n function fileSelected() {\n  hideProgressBar();\n  updateProgress(0);\n  document.getElementById(\"uploadStatus\").innerHTML = \"\";\n  var file = document.getElementById('fileToUploadForm:\n                                         fileToUpload').files[0];\n  if (file) {\n      var fileSize = 0;\n      if (file.size > 1048576)\n          fileSize = (Math.round(file.size * 100 / (1048576)) / \n                                             100).toString() + 'MB';\n      else\n          fileSize = (Math.round(file.size * 100 / 1024) / \n                                             100).toString() + 'KB';\n\n      document.getElementById('fileName').innerHTML = 'Name: ' + \n                                                          file.name;\n      document.getElementById('fileSize').innerHTML = 'Size: ' + \n                                                           fileSize;\n      document.getElementById('fileType').innerHTML = 'Type: ' + \n                                                          file.type;\n  }\n }\n\n function uploadFile() {\n  showProgressBar();\n  var fd = new FormData();\n  fd.append(\"fileToUpload\", document.getElementById('fileToUploadForm:\n                                            fileToUpload').files[0]);\n\n  var xhr = new XMLHttpRequest();\n  xhr.upload.addEventListener(\"progress\", uploadProgress, false);\n  xhr.addEventListener(\"load\", uploadComplete, false);\n  xhr.addEventListener(\"error\", uploadFailed, false);\n  xhr.addEventListener(\"abort\", uploadCanceled, false);\n  xhr.open(\"POST\", \"UploadServlet\");\n  xhr.send(fd);\n }\n\n function uploadProgress(evt) {\n  if (evt.lengthComputable) {\n      var percentComplete = Math.round(evt.loaded * 100 / evt.total);\n                    updateProgress(percentComplete);\n  }\n }\n\n function uploadComplete(evt) {\n  document.getElementById(\"uploadStatus\").innerHTML = \"Upload \n                    successfully completed!\";\n }\n\n function uploadFailed(evt) {\n  hideProgressBar();\n  document.getElementById(\"uploadStatus\").innerHTML = \"The upload cannot be complete!\";\n }\n\n function uploadCanceled(evt) {\n  hideProgressBar();\n  document.getElementById(\"uploadStatus\").innerHTML = \"The upload was \n                    canceled!\";\n }\n\n var updateProgress = function(value) {\n     var pBar = document.getElementById(\"progressBar\");\n     document.getElementById(\"progressNumber\").innerHTML=value+\"%\";\n     pBar.value = value;\n }\n\n function hideProgressBar() {\n  document.getElementById(\"progressBar\").style.visibility = \"hidden\";\n  document.getElementById(\"progressNumber\").style.visibility = \"hidden\";\n }\n\n function showProgressBar() {\n  document.getElementById(\"progressBar\").style.visibility = \"visible\";\n  document.getElementById(\"progressNumber\").style.visibility = \"visible\";\n }\n</script>\n```", "```java\n<h:body>\n <hr/>\n <div id=\"fileName\"></div>\n <div id=\"fileSize\"></div>\n <div id=\"fileType\"></div>\n <hr/>\n <h:form id=\"fileToUploadForm\" enctype=\"multipart/form-data\">\n  <h:inputFile id=\"fileToUpload\" onchange=\"fileSelected();\"/> \n  <h:commandButton type=\"button\" onclick=\"uploadFile()\" value=\"Upload\" />\n </h:form>          \n <hr/> \n <div id=\"uploadStatus\"></div>\n  <table>\n   <tr>\n    <td>\n     <progress id=\"progressBar\" style=\"visibility: hidden;\" \n                                   value=\"0\" max=\"100\"></progress> \n    </td>                   \n    <td>                    \n     <div id=\"progressNumber\" style=\"visibility: hidden;\">0 %</div>\n    </td>\n   </tr>   \n </table>\n <hr/>\n</h:body>\n```"]