["```java\nList(1,2,3,4,5) filter (element => element < 4)\n```", "```java\nimport java.util.*;\n\npublic class ListFilteringSample {\n\n  public static void main(String[] args) {\n\n    List<Integer> elements = Arrays.asList(1, 2, 3, 4, 5);\n\n    List<Integer> filteredElements = new ArrayList<Integer>();\n\n    for (Integer element : elements)\n      if (element < 4) filteredElements.add(element);\n\n    System.out.println(\"filteredElements:\" + filteredElements);\n\n  }\n}\n```", "```java\n> ./activator ui \n\n```", "```java\n> cd C:\\Users\\Thomas\\hello-scala\nC:\\Users\\Thomas\\hello-scala> activator console\n\n```", "```java\nString yourPast = \"Good Java Programmer\";\n```", "```java\nscala> val yourPast : String = \"Good Java Programmer\"  [Hit Enter]\nyourPast : String = \"Good Java Programmer\"\n\n```", "```java\n    scala> val yourPast = \"Good Java Programmer\"\n    yourPast : String = \"Good Java Programmer\"\n\n    ```", "```java\nscala> yourPast = \"Great Scala Programmer\"\n<console>:8: error: reassignment to val\n yourPast = \"Great Scala Programmer\"\n ^\n\n```", "```java\nscala> var yourFuture = \"Good Java Programmer\"\nyourFuture: String = \"Good Java Programmer\"\nscala> yourFuture = \"Great Scala Programmer\"\nyourFuture: String = \"Great Scala Programmer\"\n\n```", "```java\nscala> 3\nres1: Int = 3\n\n```", "```java\nscala> 3 + 2\nres2: Int = 5\n\n```", "```java\nscala> (3).+(2)\nres3: Int = 5\n\n```", "```java\nscala> class Money(amount:Int)\ndefined class Money\n\n```", "```java\nscala> val notMuch = new Money(2)\nnotMuch : Money = Money@76eb235\n\n```", "```java\nscala> notMuch. [Tab]\nasInstanceOf isInstanceOf toString\n\n```", "```java\nscala> class Money(val amount:Int)\ndefined class Money\n\n```", "```java\nscala> val notMuch = new Money(2)\nnotMuch : Money = Money@73cd15da\n\n```", "```java\nscala> notMuch. [Tab ]\namount asInstanceOf isInstanceOf toString\n\n```", "```java\nscala> notMuch.amount\nres4: Int = 2\n\n```", "```java\nscala> class Money(var amount:Int)\ndefined class Money\nscala> val notMuch = new Money(2)\nnotMuch: Money = Money@6517ff0\nscala> notMuch. [ Tab ]\namount   amount_=   asInstanceOf   isInstanceOf   toString\n\n```", "```java\nscala> notMuch.amount=3\nnotMuch.amount: Int = 3\n\n```", "```java\npublic class Money {\n\n    private Integer amount;\n    private String currency;\n\n    public Money(Integer amount, String currency) {\n\n        this.amount = amount;\n        this.currency = currency;\n\n    }\n\n    public Integer getAmount() {\n        return amount;\n    }\n\n    public void setAmount(Integer amount) {\n        this.amount = amount;\n    }\n\n    public String getCurrency() {\n        return currency;\n    }\n    public void setCurrency(String currency) {\n        this.currency = currency;\n    }\n\n    @Override\n    public int hashCode() {\n        int hash = 5;\n        hash = 29 * hash + (this.amount != null ? this.amount.hashCode() : 0);\n        hash = 29 * hash + (this.currency != null ? this.currency.hashCode() : 0);\n        return hash;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n\n        if (obj == null) {\n            return false;\n        }\n\n        if (getClass() != obj.getClass()) {\n            return false;\n        }\n\n        final Money other = (Money) obj;\n        return true;\n    }\n\n    @Override\n    public String toString() {\n        return \"Money{\" + \"amount=\" + amount + \", currency=\" + currency + '}';\n\n    }\n}\n```", "```java\nscala> case class Money(amount:Int=1, currency:String=\"USD\")\ndefined class Money\n\n```", "```java\nscala> val defaultAmount = Money()\ndefaultAmount: Money = Money(1,USD)\nscala> val fifteenDollars = Money(15,\"USD\")\nfifteenDollars: Money = Money(15,USD)\nscala> val fifteenDollars = Money(15)\nfifteenDollars: Money = Money(15,USD) \n\n```", "```java\nscala> val someEuros = Money(\"EUR\")\n<console>:9: error: type mismatch;\n found   : String(\"EUR\")\n required: Int\n val someEuros = Money(\"EUR\")\n ^\n\n```", "```java\nscala> val someEuros = Money(currency=\"EUR\")\nsomeEuros: Money = Money(1,EUR)\n\n```", "```java\nscala> val twentyEuros = Money(amount=20,currency=\"EUR\")\ntwentyEuros: Money = Money(20,EUR)\n\n```", "```java\nscala> val tenEuros = twentyEuros.copy(10)\ntenEuros: Money = Money(10,EUR)\n\n```", "```java\nscala> val twentyDollars = twentyEuros.copy(currency=\"USD\")\ntwentyDollars: Money = Money(20,USD)\n\n```", "```java\npublic class Money {\n\n    Integer amount;\n    String currency;\n\n    public Money(Integer amount, String currency) {\n        this.amount = amount;\n        this.currency = currency;\n    }\n\n    public Money add(Money other) {\n        return new Money(this.amount +\n        other.amount, this.currency);\n    }\n    ...\n}\n```", "```java\nscala> case class Money(val amount:Int=1, val currency:String=\"USD\"){\n |   def +(other: Money) : Money = Money(amount + other.amount)\n | }\ndefined class Money\n\n```", "```java\nscala> Money(12) + Money(34)\nres5: Money = Money(46,USD)\n\n```", "```java\nList<Integer> numbers = new ArrayList<Integer>();\nnumbers.add(1);\nnumbers.add(2);\nnumbers.add(5);\nfor(Integer n: numbers) {\n    System.out.println(\"Number \"+n);\n}\n```", "```java\nNumber 1\nNumber 2\nNumber 5\n\n```", "```java\nscala> val numbers = List(1,2,5)\nnumbers: List[Int] = List(1,2,5)\n\n```", "```java\nscala> for (n <- numbers) println(\"Number \"+n)\nNumber 1\nNumber 2\nNumber 5\n\n```", "```java\nfunctionName { input =>\n                body\n             }\n```", "```java\nscala> numbers.foreach { n:Int => \n | println(\"Number \"+n)\n | }\nNumber 1\nNumber 2\nNumber 5\n\n```", "```java\nnumbers.forEach(n -> { System.out.println(\"Numbers \"+n);});\n```", "```java\nscala> val numbers = List(1,2,3,4,5,6)\nnumbers: List[Int] = List(1,2,3,4,5,6)\nscala> val reversedList = numbers.reverse\nreversedList: List[Int] = List(6,5,4,3,2,1)\nscala> val onlyAFew = numbers drop 2 take 3\nonlyAFew: List[Int] = List(3, 4, 5)\n\n```", "```java\nscala> val numbers = 1 :: 2 :: 3 :: 4 :: 5 :: 6 :: Nil\nnumbers: List[Int] = List(1, 2, 3, 4, 5, 6)\n\n```", "```java\nscala> val simpleList = Nil.::(6)\nsimpleList: List[Int] = List(6)\n\n```", "```java\nscala> val twoElementsList = List(6).::(5)\ntwoElementsList: List[Int] = List(5, 6)\n\n```", "```java\nscala> val concatenatedList = simpleList ::: twoElementsList\nconcatenatedList: List[Int] = List(6, 5, 6)\n\n```", "```java\nscala> val things = List(0,1,true)\nthings: List[AnyVal] = List(0, 1, true) \n\n```", "```java\nscala> things(2)\nres6: AnyVal = true\n\n```", "```java\nscala> val things = List(0,1,true,\"false\")\nthings: List[Any] = List(0, 1, true, false)\n\n```", "```java\nscala> val amounts = List(Money(10,\"USD\"),Money(2,\"EUR\"),Money(20,\"GBP\"),Money(75,\"EUR\"),Money(100,\"USD\"),Money(50,\"USD\"))\namounts: List[Money] = List(Money(10,USD), Money(2,EUR), Money(20,GBP), Money(75,EUR), Money(100,USD), Money(50,USD))\nscala> val first = amounts.head\nfirst: Money = Money(10,USD)\nscala> val amountsWithoutFirst = amounts.tail\namountsWithoutFirst: List[Money] = List(Money(2,EUR), Money(20,GBP), Money(75,EUR), Money(100,USD), Money(50,USD))\n\n```", "```java\nscala> val euros = amounts.filter(money => money.currency==\"EUR\")\neuros: List[Money] = List(Money(2,EUR), Money(75,EUR))\n\n```", "```java\nscala> val euros = amounts.filter(x => x.currency==\"EUR\")\neuros: List[Money] = List(Money(2,EUR),Money(75,EUR))\n\n```", "```java\nscala> val euros = amounts.filter(_.currency==\"EUR\")\neuros: List[Money] = List(Money(2,EUR),Money(75,EUR))\n\n```", "```java\nscala> val allAmounts = amounts.partition(amt =>\n |   amt.currency==\"EUR\")\nallAmounts: (List[Money], List[Money]) = (List(Money(2,EUR), Money(75,EUR)),List(Money(10,USD), Money(20,GBP), Money(100,USD), Money(50,USD)))\n\n```", "```java\nscala> val euros = allAmounts._1\neuros: List[Money] = List(Money(2,EUR),Money(75,EUR))\nscala> val everythingButEuros= allAmounts._2\neverythingButEuros: List[Money] = List(Money(10,USD),Money(20,GBP),Money(100,USD),Money(50,USD))\n\n```", "```java\nscala> val (euros,everythingButEuros) = amounts.partition(amt =>\n |   amt.currency==\"EUR\")\neuros: List[Money] = List(Money(2,EUR), Money(75,EUR))\neverythingButEuros: List[Money] = List(Money(10,USD), Money(20,GBP), Money(100,USD), Money(50,USD))\n\n```", "```java\nscala> euros\nres2: List[Money] = List(Money(2,EUR), Money(75,EUR))\n\n```", "```java\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class MapSample {\n    public static void main(String[] args) {\n        Map amounts = new HashMap<String,Integer>();\n        amounts.put(\"USD\", 10);\n        amounts.put(\"EUR\", 2);\n\n        Integer euros = (Integer)amounts.get(\"EUR\");\n        Integer pounds = (Integer)amounts.get(\"GBP\");\n\n        System.out.println(\"Euros: \"+euros);\n        System.out.println(\"Pounds: \"+pounds);\n    }\n}\n```", "```java\nEuros: 2\nPounds: null\n```", "```java\nscala> val wallet = Map( \"USD\" -> 10, \"EUR\" -> 2 )\nwallet: scala.collection.immutable.Map[String,Int] = Map(USD -> 10, EUR -> 2)\n\n```", "```java\nscala> val tenDollars = \"USD\"-> 10\ntenDollars : (String, Int) = (USD,10)\nscala> val tenDollars = (\"USD\",10)\ntenDollars : (String, Int) = (USD,10)\n\n```", "```java\nscala> val updatedWallet = wallet + (\"GBP\" -> 20)\nwallet: scala.collection.immutable.Map[String,Int] = Map(USD -> 10, EUR -> 2, GBP -> 20)\nscala> val someEuros = wallet(\"EUR\")\nsomeEuros: Int = 2\n\n```", "```java\nscala> val somePounds = wallet(\"GBP\")\njava.util.NoSuchElementException: key not found: GBP  (followed by a full stacktrace)\n\n```", "```java\nscala> val mayBeSomeEuros = wallet.get(\"EUR\")\nmayBeSomeEuros: Option[Int] = Some(2)\nscala> val mayBeSomePounds = wallet.get(\"GBP\")\nmayBeSomePounds: Option[Int] = None\n\n```", "```java\nscala> val status = mayBeSomeEuros match {\n |   case None => \"Nothing of that currency\"\n |   case Some(value) => \"I have \"+value+\" Euros\"\n | }\nstatus: String = I have 2 Euros\n\n```", "```java\nscala> List(1,2,3,4).map(x => x+1)\nres6: List[Int] = List(2,3,4,5)\n\n```", "```java\nscala> def increment = (x:Int) => x + 1\nincrement: Int => Int\n\n```", "```java\nscala> List(1,2,3,4).map(increment)\nres7: List[Int] = List(2,3,4,5)\n\n```", "```java\nscala> List(1,2,3,4) map increment\nres8: List[Int] = List(2, 3, 4, 5)\n\n```", "```java\nscala> val printedAmounts =\n |   amounts map(m=> \"\"+  m.amount + \" \" + m.currency)\nprintedAmounts: List[String] = List(10 USD, 2 EUR, 20 GBP, 75 EUR, 100 USD, 50 USD)\n\n```", "```java\nscala> val many = 10000.2345\nmany: Double = 10000.2345\nscala> val amount = s\"$many euros\"\namount: String = 10000.2345 euros \n\n```", "```java\nscala> val amount = f\"$many%12.2f euros\"\namount: String = \"    10000.23 euros\"\n\n```", "```java\nscala> val amount = s\"${many*2} euros\"\namount: String = 20000.469 euros\n\n```", "```java\nscala> val printedAmounts =\n |   amounts map(m=> s\"${m.amount} ${m.currency}\")\nprintedAmounts: List[String] = List(10 USD, 2 EUR, 20 GBP, 75 EUR, 100 USD, 50 USD)\n\n```", "```java\nscala> val sortedAmounts = amounts groupBy(_.currency)\nsortedAmounts: scala.collection.immutable.Map[String,List[Money]] = Map(EUR -> List(Money(2,EUR), Money(75,EUR)), GBP -> List(Money(20,GBP)), USD -> List(Money(10,USD), Money(100,USD), Money(50,USD)))\n\n```", "```java\nscala> val sumOfNumbers = numbers.foldLeft(0) { (total,element) =>\n |   total + element\n | }\nsumOfNumbers: Int = 21\n\n```", "```java\nscala> val sumOfNumbers = numbers.sum\nsumOfNumbers: Int = 21\n\n```"]