["```java\n    @RunWith(classOf[Suite]) \n    @Suite.SuiteClasses(Array(classOf[JunitSimpleTest])) \n    class JunitSimpleSuiteTest \n    class JunitSimpleTest extends PlaySpec with AssertionsForJUnit { \n      @Test def testBaseService() { \n        val s = new ProductService \n        val result = s.findAll() \n        assertEquals(None, result) \n        assertTrue( result != null) \n        println(\"All good junit works fine with ScalaTest and Play\") \n      } \n    } \n\n```", "```java\n$ activator \"test-only JunitSimpleTest\"\n\n```", "```java\n    class MyFirstPlaySpec extends PlaySpec { \n      \"x + 1 \" must { \n        \"be 2 if x=1 \" in { \n          val sum = 1 + 1 \n          sum mustBe 2 \n        } \n        \"be 0 if x=-1 \" in { \n          val sum = -1 + 1 \n          sum mustBe 0 \n        } \n      } \n    } \n\n```", "```java\n$ activator \"test-only MyFirstPlaySpec\"\n\n```", "```java\n    class ProductServiceTestSpec extends PlaySpec { \n      \"ProductService\" must { \n        val service:IProductService = new ProductService \n        \"insert a product properly\" in { \n          val product = new models.Product(Some(1), \n          \"Ball\",\"Awesome Basketball\",19.75) \n          service.insert(product) \n        } \n        \"update a product\" in { \n          val product = new models.Product(Some(1), \n          \"Blue Ball\",\"Awesome Blue Basketball\",19.99) \n          service.update(1, product) \n        } \n        \"not update because does not exit\" in { \n          intercept[RuntimeException]{ \n            service.update(333,null) \n          } \n        } \n        \"find the product 1\" in { \n           val product = service.findById(1) \n           product.get.id mustBe Some(1) \n           product.get.name mustBe \"Blue Ball\" \n           product.get.details mustBe \"Awesome Blue Basketball\" \n           product.get.price mustBe 19.99 \n        } \n        \"find all\" in { \n          val products = service.findAll() \n          products.get.length mustBe 1 \n          products.get(0).id mustBe Some(1) \n          products.get(0).name mustBe \"Blue Ball\" \n          products.get(0).details mustBe \"Awesome Blue Basketball\" \n          products.get(0).price mustBe 19.99 \n        } \n        \"find all products\" in { \n          val products = service.findAllProducts() \n          products.length mustBe 1 \n          products(0)._1 mustBe \"1\" \n          products(0)._2 mustBe \"Blue Ball\" \n        } \n        \"remove 1 product\" in { \n          val product = service.remove(1) \n          product mustBe true \n          val oldProduct = service.findById(1) \n          oldProduct mustBe None \n        } \n        \"not remove because does not exist\" in { \n          intercept[RuntimeException]{ \n            service.remove(-1) \n          } \n        } \n      } \n    } \n\n```", "```java\n    private def validateId(id:Long):Unit = { \n      val entry = inMemoryDB.get(id) \n      if (entry==null || entry.equals(None)) throw new  \n      RuntimeException(\"Could not find Product: \" + id) \n    } \n\n```", "```java\n$ activator \"test-only ProductServiceTestSpec\"\n\n```", "```java\n    class ImageServiceTestSpec extends PlaySpec { \n      \"ImageService\" must { \n        val service:IImageService = new ImageService \n        \"insert a image properly\" in { \n          val image = new models.Image(Some(1),Some(1), \n          \"http://www.google.com.br/myimage\") \n          service.insert(image) \n        } \n        \"update a image\" in { \n          val image = new models.Image(Some(2),Some(1), \n          \"http://www.google.com.br/myimage\") \n          service.update(1, image) \n        } \n        \"not update because does not exist\" in { \n          intercept[RuntimeException]{ \n            service.update(333,null) \n          } \n        } \n        \"find the image1\" in { \n          val image = service.findById(1) \n          image.get.id mustBe Some(1) \n          image.get.productId mustBe Some(1) \n          image.get.url mustBe \"http://www.google.com.br/myimage\" \n        } \n        \"find all\" in { \n          val reviews = service.findAll() \n          reviews.get.length mustBe 1 \n          reviews.get(0).id mustBe Some(1) \n          reviews.get(0).productId mustBe Some(1) \n          reviews.get(0).url mustBe \"http://www.google.com.br/myimage\" \n        } \n        \"remove 1 image\" in { \n          val image = service.remove(1) \n          image mustBe true \n          val oldImage = service.findById(1) \n          oldImage mustBe None \n        } \n        \"not remove because does not exist\" in { \n          intercept[RuntimeException]{ \n            service.remove(-1) \n          } \n        } \n      } \n    } \n\n```", "```java\n$ activator \"test-only ImageServiceTestSpec\"\n\n```", "```java\n    class ReviewServiceTestSpec extends PlaySpec { \n      \"ReviewService\" must { \n        val service:IReviewService = new ReviewService \n        \"insert a review properly\" in { \n          val review = new  \n          models.Review(Some(1),Some(1),\"diegopacheco\", \n          \"Testing is Cool\") \n          service.insert(review) \n        } \n        \"update a review\" in { \n          val review = new models.Review(Some(1),Some(1), \n          \"diegopacheco\",\"Testing so so Cool\") \n          service.update(1, review) \n        } \n        \"not update because does not exist\" in { \n          intercept[RuntimeException]{ \n            service.update(333,null) \n          } \n        } \n        \"find the review 1\" in { \n          val review = service.findById(1) \n          review.get.id mustBe Some(1) \n          review.get.author mustBe \"diegopacheco\" \n          review.get.comment mustBe \"Testing so so Cool\" \n          review.get.productId mustBe Some(1) \n        } \n        \"find all\" in { \n          val reviews = service.findAll() \n          reviews.get.length mustBe 1 \n          reviews.get(0).id mustBe Some(1) \n          reviews.get(0).author mustBe \"diegopacheco\" \n          reviews.get(0).comment mustBe \"Testing so so Cool\" \n          reviews.get(0).productId mustBe Some(1) \n        } \n        \"remove 1 review\" in { \n          val review = service.remove(1) \n          review mustBe true \n          val oldReview= service.findById(1) \n          oldReview mustBe None \n        } \n        \"not remove because does not exist\" in { \n          intercept[RuntimeException]{ \n            service.remove(-1) \n          } \n        } \n      } \n    } \n\n```", "```java\n$ activator \"test-only ReviewServiceTestSpec\"\n\n```", "```java\n    class RoutesTestingSpec extends PlaySpec with OneAppPerTest { \n      \"Root Controller\" should { \n        \"route to index page\" in { \n          val result = route(app, FakeRequest(GET, \"/\")).get \n          status(result) mustBe OK \n          contentType(result) mustBe Some(\"text/html\") \n          contentAsString(result) must include (\"Welcome to Reactive  \n          Web Store\") \n        } \n      } \n      \"Product Controller\" should { \n        \"route to index page\" in { \n          val result = route(app, FakeRequest(GET, \"/product\")).get \n          status(result) mustBe OK \n          contentType(result) mustBe Some(\"text/html\") \n          contentAsString(result) must include (\"Product\") \n        } \n        \"route to new product page\" in { \n          val result = route(app, FakeRequest(GET,  \n          \"/product/add\")).get \n          status(result) mustBe OK \n          contentType(result) mustBe Some(\"text/html\") \n          contentAsString(result) must include (\"Product\") \n        } \n        \"route to product 1 details page page\" in {  \n          try{ \n            route(app, FakeRequest(GET, \"/product/details/1\")).get \n            }catch{ \n              case e:Exception => Unit \n            } \n          } \n        } \n        \"Review Controller\" should { \n          \"route to index page\" in { \n            val result = route(app, FakeRequest(GET, \"/review\")).get \n            status(result) mustBe OK \n            contentType(result) mustBe Some(\"text/html\") \n            contentAsString(result) must include (\"Review\") \n          } \n          \"route to new review page\" in { \n            val result = route(app, FakeRequest(GET,  \n            \"/review/add\")).get \n            status(result) mustBe OK \n            contentType(result) mustBe Some(\"text/html\") \n            contentAsString(result) must include (\"review\") \n          } \n          \"route to review 1 details page page\" in { \n            try{ \n              route(app, FakeRequest(GET, \"/review/details/1\")).get \n            }catch{ \n              case e:Exception => Unit \n            } \n          } \n        } \n        \"Image Controller\" should { \n          \"route to index page\" in { \n            val result = route(app, FakeRequest(GET, \"/image\")).get \n            status(result) mustBe OK \n            contentType(result) mustBe Some(\"text/html\") \n            contentAsString(result) must include (\"Image\") \n          } \n          \"route to new image page\" in { \n            val result = route(app, FakeRequest \n            (GET, \"/image/add\")).get \n            status(result) mustBe OK \n            contentType(result) mustBe Some(\"text/html\") \n            contentAsString(result) must include (\"image\") \n          } \n          \"route to image 1 details page page\" in { \n          try{ \n            route(app, FakeRequest(GET, \"/image/details/1\")).get \n          }catch{ \n            case e:Exception => Unit  \n          } \n        } \n      }  \n    } \n\n```", "```java\n$  activator \"test-only RoutesTestingSpec\"\n\n```", "```java\n    class RndDoubleGeneratorControllerTestSpec \n    extends PlaySpec  \n    with OneServerPerSuite with OneBrowserPerSuite with HtmlUnitFactory \n    { \n      val injector = new GuiceApplicationBuilder() \n      .injector \n      val ws:WSClient = injector.instanceOf(classOf[WSClient]) \n      import play.api.libs.concurrent.Execution. \n      Implicits.defaultContext \n      \"Assuming ng-microservice is down rx number should be\" must { \n        \"work\" in { \n          val future = ws.url(s\"http://localhost:${port}/rnd/rxbat\") \n          .get().map { res => res.body } \n          val response = Await.result(future, 15.seconds) \n          response mustBe \"2.3000000000000007\" \n        } \n      } \n    } \n\n```", "```java\n$ activator \"test-only RndDoubleGeneratorControllerTestSpec\"\n\n```", "```java\n    class IntegrationSpec extends PlaySpec with OneServerPerTest with  \n    OneBrowserPerTest with HtmlUnitFactory { \n\n      \"Application\" should { \n        \"work from within a browser\" in {  \n           go to (\"http://localhost:\" + port) \n           pageSource must include (\"Welcome to Reactive Web Store\") \n        } \n      } \n    } \n\n```", "```java\n$ activator \"test-only IntegrationSpec\"\n\n```", "```java\n    class ProductControllerTestSpec extends PlaySpec with \n    OneServerPerSuite with OneBrowserPerSuite with HtmlUnitFactory { \n      \"ProductController\" should { \n        \"insert a new product should be ok\" in { \n          goTo(s\"http://localhost:${port}/product/add\") \n          click on id(\"name\") \n          enter(\"Blue Ball\") \n          click on id(\"details\") \n          enter(\"Blue Ball is a Awesome and simple product\") \n          click on id(\"price\") \n          enter(\"17.55\") \n          submit() \n        } \n        \"details from the product 1 should be ok\" in { \n          goTo(s\"http://localhost:${port}/product/details/1\") \n          textField(\"name\").value mustBe \"Blue Ball\" \n          textField(\"details\").value mustBe \"Blue Ball is a Awesome  \n          and simple product\" \n          textField(\"price\").value mustBe \"17.55\" \n        } \n        \"update product 1 should be ok\" in { \n          goTo(s\"http://localhost:${port}/product/details/1\") \n          textField(\"name\").value = \"Blue Ball 2\" \n          textField(\"details\").value = \"Blue Ball is a Awesome and  \n          simple product 2 \" \n          textField(\"price\").value = \"17.66\" \n          submit() \n          goTo(s\"http://localhost:${port}/product/details/1\") \n          textField(\"name\").value mustBe \"Blue Ball 2\" \n          textField(\"details\").value mustBe \"Blue Ball is a Awesome  \n          and simple product 2 \" \n          textField(\"price\").value mustBe \"17.66\" \n        } \n        \"delete a product should be ok\" in { \n          goTo(s\"http://localhost:${port}/product/add\") \n          click on id(\"name\") \n          enter(\"Blue Ball\") \n          click on id(\"details\") \n          enter(\"Blue Ball is a Awesome and simple product\") \n          click on id(\"price\") \n          enter(\"17.55\") \n          submit() \n          goTo(s\"http://localhost:${port}/product\") \n          click on id(\"btnDelete\") \n        } \n      } \n    } \n\n```", "```java\n    @(products:Seq[Product])(implicit flash: Flash) \n    @main(\"Products\") { \n      @if(!products.isEmpty) { \n        <table class=\"table table-striped\"> \n          <tr> \n            <th>Name</th> \n            <th>Details</th>  \n            <th>Price</th> \n            <th></th> \n          </tr> \n          @for(product <- products) { \n            <tr> \n              <td><a href=\"@routes.ProductController.details \n              (product.id.get)\">@product.name</a></td> \n              <td>@product.details</td> \n              <td>@product.price</td> \n              <td><form method=\"post\" action= \n              \"@routes.ProductController.remove(product.id.get)\"> \n                <button id=\"btnDelete\" name=\"btnDelete\" class=\"btn  \n                btn-link\" type=\"submit\"><i class=\"icon- \n                trash\"></i>Delete</button> \n              </form></td>  \n            </tr> \n          } \n        </table> \n      } \n      <p><a href=\"@routes.ProductController.blank\"  \n      class=\"btn btn-success\"><i class=\"icon-plus icon-white\"> \n      </i>Add Product</a></p> \n    } \n\n```", "```java\n$ activator \"test-only ProductControllerTestSpec\"\n\n```", "```java\n    class ImageControllerTestSpec extends PlaySpec with OneServerPerSuite with OneBrowserPerSuite with \n    HtmlUnitFactory { \n      \"ImageController\" should { \n        \"insert a new image should be ok\" in { \n          goTo(s\"http://localhost:${port}/product/add\") \n          click on id(\"name\") \n          enter(\"Blue Ball\") \n          click on id(\"details\") \n          enter(\"Blue Ball is a Awesome and simple product\") \n          click on id(\"price\") \n          enter(\"17.55\") \n          submit() \n          goTo(s\"http://localhost:${port}/image/add\") \n          singleSel(\"productId\").value = \"1\" \n          click on id(\"url\") \n          enter(\"http://myimage.com/img.jpg\") \n          submit() \n        } \n        \"details from the image 1 should be ok\" in { \n          goTo(s\"http://localhost:${port}/image/details/1\") \n          textField(\"url\").value mustBe \"http://myimage.com/img.jpg\" \n        } \n        \"update image 1 should be ok\" in { \n          goTo(s\"http://localhost:${port}/image/details/1\") \n          textField(\"url\").value = \"http://myimage.com/img2.jpg\" \n          submit() \n          goTo(s\"http://localhost:${port}/image/details/1\") \n          textField(\"url\").value mustBe \"http://myimage.com/img2.jpg\" \n        } \n        \"delete a image should be ok\" in { \n          goTo(s\"http://localhost:${port}/image/add\") \n          singleSel(\"productId\").value = \"1\" \n          click on id(\"url\") \n          enter(\"http://myimage.com/img.jpg\") \n          submit() \n          goTo(s\"http://localhost:${port}/image\") \n          click on id(\"btnDelete\") \n        } \n      } \n    } \n\n```", "```java\n    @(images:Seq[Image])(implicit flash:Flash) \n    @main(\"Images\") { \n      @if(!images.isEmpty) { \n        <table class=\"table table-striped\"> \n          <tr> \n            <th>ProductID</th> \n            <th>URL</th> \n            <th></th> \n          </tr> \n          @for(image <- images) { \n            <tr> \n              <td><a href=\"@routes.ImageController.details \n              (image.id.get)\">@image.id</a></td> \n              <td>@image.productId</td> \n              <td>@image.url</td> \n              <td><form method=\"post\" action= \n              \"@routes.ImageController.remove(image.id.get)\"> \n                <button id=\"btnDelete\" name=\"btnDelete\" class=\"btn  \n                btn-link\" type=\"submit\"><i class=\"icon- \n                trash\"></i>Delete</button></form> \n              </td> \n            </tr> \n          } \n        </table> \n      } \n      <p><a href=\"@routes.ImageController.blank\"  \n      class=\"btn btn-success\"><i class=\"icon-plus icon-white\"> \n      </i>Add Image</a></p> \n    } \n\n```", "```java\n$ activator \"test-only ImageControllerTestSpec\"\n\n```", "```java\n    class ReviewControllerTestSpec extends PlaySpec with OneServerPerSuite with OneBrowserPerSuite \n    with HtmlUnitFactory { \n      \"ReviewController\" should { \n        \"insert a new review should be ok\" in { \n          goTo(s\"http://localhost:${port}/product/add\") \n          click on id(\"name\") \n          enter(\"Blue Ball\") \n          click on id(\"details\") \n          enter(\"Blue Ball is a Awesome and simple product\") \n          click on id(\"price\") \n          enter(\"17.55\") \n          submit() \n          goTo(s\"http://localhost:${port}/review/add\") \n          singleSel(\"productId\").value = \"1\" \n          click on id(\"author\") \n          enter(\"diegopacheco\") \n          click on id(\"comment\") \n          enter(\"Tests are amazing!\") \n          submit() \n        } \n        \"details from the review 1 should be ok\" in { \n          goTo(s\"http://localhost:${port}/review/details/1\") \n          textField(\"author\").value mustBe \"diegopacheco\" \n          textField(\"comment\").value mustBe \"Tests are amazing!\" \n        } \n        \"update review 1 should be ok\" in { \n          goTo(s\"http://localhost:${port}/review/details/1\") \n          textField(\"author\").value = \"diegopacheco2\" \n          textField(\"comment\").value = \"Tests are amazing 2!\" \n          submit() \n          goTo(s\"http://localhost:${port}/review/details/1\") \n          textField(\"author\").value mustBe \"diegopacheco2\" \n          textField(\"comment\").value mustBe \"Tests are amazing 2!\" \n        } \n        \"delete a review should be ok\" in { \n          goTo(s\"http://localhost:${port}/review/add\") \n          singleSel(\"productId\").value = \"1\" \n          click on id(\"author\") \n          enter(\"diegopacheco\") \n          click on id(\"comment\") \n          enter(\"Tests are amazing!\") \n          submit() \n          goTo(s\"http://localhost:${port}/review\") \n          click on id(\"btnDelete\") \n          } \n    } \n\n```", "```java\n    @(reviews:Seq[Review])(implicit flash: Flash) \n    @main(\"Reviews\") { \n      @if(!reviews.isEmpty) { \n        <table class=\"table table-striped\"> \n          <tr> \n            <th>ProductId</th> \n            <th>Author</th> \n            <th>Comment</th> \n            <th></th> \n          </tr> \n          @for(review <- reviews) { \n            <tr> \n              <td><a href=\"@routes.ReviewController. \n              details(review.id.get)\">@review.productId</a></td> \n              <td>@review.author</td> \n              <td>@review.comment</td> \n              <td> \n                <form method=\"post\" action=\"@routes. \n                ReviewController.remove(review.id.get)\"> \n                  <button id=\"btnDelete\" name=\"btnDelete\"  \n                  class=\"btn btn-link\" type=\"submit\"><i class=\"icon- \n                  trash\"></i>Delete</button> \n                </form> \n              </td> \n            </tr> \n          } \n        </table> \n      } \n      <p><a href=\"@routes.ReviewController.blank\" class=\"btn btn- \n      success\"><i class=\"icon-plus icon-white\"></i>Add Review</a></p> \n    } \n\n```", "```java\n$ activator \"test-only ReviewControllerTestSpec\"\n\n```", "```java\n    class ApplicationSpec extends PlaySpec with OneAppPerTest { \n      \"Routes\" should { \n        \"send 404 on a bad request\" in { \n          route(app, FakeRequest(GET, \"/boum\")).map(status(_)) mustBe  \n          Some(NOT_FOUND) \n        } \n      } \n      \"HomeController\" should { \n        \"render the index page\" in { \n          val home = route(app, FakeRequest(GET, \"/\")).get \n          status(home) mustBe OK \n          contentType(home) mustBe Some(\"text/html\") \n          contentAsString(home) must include (\"Welcome to Reactive Web  \n          Store\") \n        } \n      } \n      \"RndController\" should { \n        \"return a random number\" in { \n          // Assuming ng-microservice is down otherwise will fail. \n          contentAsString(route(app, FakeRequest(GET,  \n          \"/rnd/rxbat\")).get) mustBe \"2.3000000000000007\" \n        } \n      } \n    } \n\n```", "```java\n$ activator \"test-only ApplicationSpec\"\n\n```", "```java\n    class NGServiceImplTestSpec extends PlaySpec { \n      \"The NGServiceImpl\" must { \n        \"Generate a Ramdon number\" in { \n          val service:NGContract = new NGServiceImpl \n          val double = service.generateDouble \n          assert( double >= 1 ) \n        } \n        \"Generate a list of 3 Ramdon numbers\" in { \n          val service:NGContract = new NGServiceImpl \n          val doubles = service.generateDoubleBatch(3) \n          doubles.size mustBe 3 \n          assert( doubles(0) >= 1 ) \n          assert( doubles(1) >= 1 ) \n          assert( doubles(2) >= 1 ) \n        } \n      } \n    } \n\n```", "```java\n$  activator \"test-only NGServiceImplTestSpec\"\n\n```", "```java\n    class NGServiceEndpointControllerTest extends PlaySpec with OneServerPerSuite with \n    OneBrowserPerSuite with HtmlUnitFactory { \n      val injector = new GuiceApplicationBuilder() \n      .injector \n      val ws:WSClient = injector.instanceOf(classOf[WSClient]) \n      import play.api.libs.concurrent.Execution. \n      Implicits.defaultContext \n      \"NGServiceEndpointController\" must { \n        \"return a single double\" in { \n          val future = ws.url(s\"http://localhost:${port}/double\") \n          .get().map { res => res.body } \n          val response = Await.result(future, 15.seconds) \n          response must not be empty \n          assert( new java.lang.Double(response) >= 1 ) \n        } \n        \"return a list of 3 doubles\" in { \n          val future = ws.url(s\"http://localhost:${port}/doubles/3\") \n          .get().map { res => res.body } \n          val response = Await.result(future, 15.seconds) \n          response must (not be empty and include (\"[\") and  \n          include (\"]\")) \n        } \n      } \n    } \n\n```", "```java\n$ activator \"test-only NGServiceEndpointControllerTest\"\n\n```"]