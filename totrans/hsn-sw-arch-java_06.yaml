- en: 'Chapter 5: Exploring the Most Common Development Models'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章：探索最常见的开发模型
- en: In this chapter, we will position some of the notions we have discussed so far
    into a more complete picture. We are going to elaborate on the most common development
    models. We've already seen the importance of designing proper architectures, how
    to collect requirements, and how to translate the architectural ideas into code
    solutions that answer those requirements.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将把我们之前讨论的一些概念定位在一个更完整的画面中。我们将详细阐述最常见的开发模型。我们已经看到了设计适当架构的重要性，如何收集需求，以及如何将架构思想转化为满足这些需求的代码解决方案。
- en: The software development models that we will see in this chapter revolve around
    all of those aspects (and some more), arranging them in proper and tested ways,
    to achieve different results or emphasize certain areas.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中我们将看到的软件开发模型围绕所有这些方面（以及更多），以适当和经过测试的方式安排它们，以实现不同的结果或强调某些领域。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Learning about Code and Fix
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习代码和修复
- en: Glancing at the Waterfall model
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简要了解瀑布模型
- en: Understanding the Agile methodology
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解敏捷方法论
- en: Introducing Lean software development
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍精益软件开发
- en: Exploring Scrum
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索Scrum
- en: Learning about other Agile practices
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习其他敏捷实践
- en: Understanding DevOps and its siblings
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解DevOps及其相关技术
- en: When discussing development models today, everybody goes all-in with **DevOps**
    and **Agile** techniques. While I do endorse all this enthusiasm for those approaches,
    my personal experience says that it's not that easy to apply them correctly in
    all the different contexts. For this reason, it's important to know many different
    approaches and try to get the crucial lessons from each one. Even if you do not
    have the ideal conditions for working with DevOps, it doesn't mean that you cannot
    use some of the good ideas associated with it.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当今天讨论开发模型时，每个人都会全力以赴地采用**DevOps**和**敏捷**技术。虽然我确实支持对这些方法的热情，但我的个人经验告诉我，在所有不同的环境中正确应用它们并不那么容易。因此，了解许多不同的方法并尝试从每个方法中获取关键教训是很重要的。即使你没有与DevOps一起工作的理想条件，这并不意味着你不能使用与之相关的某些好想法。
- en: At the end of this chapter, you will have an overview of the most widespread
    development models, along with their pros and cons. This will help you choose
    the right model, depending on your project needs.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，你将了解最广泛使用的开发模型及其优缺点概述。这将帮助你根据项目需求选择正确的模型。
- en: But first, let's start with the naive development model (or a *non-model*, if
    you want), that is, **Code and Fix**.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 但首先，让我们从天真的发展模型（或者如果你愿意，一个**非模型**）开始，即**代码和修复**。
- en: Learning about Code and Fix
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习代码和修复
- en: Let me get to the point as soon as possible – Code and Fix is not a model. It
    is something more akin to anarchy. The whole concept here is about diving into
    coding with no planning at all. For this reason, it is called Code and Fix. In
    this, you completely skip all the crucial phases highlighted hitherto (requirements
    collection, architectural design, modeling, and so on) and start coding.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我尽快切入正题——代码和修复不是一个模型。它更像是无政府状态。这里的整个概念是没有任何计划地直接进入编码。因此，它被称为代码和修复。在这个过程中，你完全跳过了迄今为止强调的所有关键阶段（需求收集、架构设计、建模等）并开始编码。
- en: Then, if things go wrong, such as there are bugs or the software does not behave
    as expected, you start fixing. There is no dedicated time for writing documentation,
    nor for **automation** and **unit testing**. Versioning of the code is naive,
    and so is the dependency between modules (or maybe everything is stuck in just
    one huge module).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，如果事情出错，比如有错误或软件表现不符合预期，你开始修复。没有专门的时间来编写文档，也没有时间用于**自动化**和**单元测试**。代码的版本控制是天真简单的，模块之间的依赖关系也是如此（或者可能一切都只是在一个巨大的模块中）。
- en: 'As you can imagine, there are few, if any, advantages to adopting this non-model.
    Let''s start with the (obvious) disadvantages:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所想，采用这种非模型几乎没有任何优势。让我们从（显然的）缺点开始：
- en: You are basically working against whoever will maintain the code (perhaps your
    future self). All the quick fixes and workarounds that you will stick into your
    code will come back to bite you when you need to touch it again. This phenomenon
    is usually known as **technical debt**.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你基本上是在与任何将维护代码的人（可能是你未来的自己）作对。你将快速修复和应急措施粘入代码，当你再次需要修改它时，这些措施会反过来咬你。这种现象通常被称为**技术债务**。
- en: Since you are not analyzing requirements properly, you risk wasting effort working
    on a feature that does not provide any value to the customer and the final user.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于你没有正确分析需求，你可能会浪费精力在开发对客户和最终用户没有任何价值的特性上。
- en: Collaboration between developers in the team, and with external teams, is hard,
    as there is no clear separation of duties (hence, Code and Fix is also known as
    **cowboy coding**).
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于没有明确的职责划分（因此，代码和修复也被称为**牛仔式编码**），团队内部开发者之间以及与外部团队之间的协作很困难。
- en: It's hard to estimate the time needed to complete a release.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预估完成一个发布所需的时间很困难。
- en: 'So, it''s easy to say that adopting Code and Fix is not advisable at all. But
    surprisingly enough, it is still very widespread. These are the main reasons for
    its widespread application:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，可以说采用代码和修复根本不可取。但令人惊讶的是，它仍然非常普遍。以下是其广泛应用的主要原因：
- en: Small teams with no dedicated roles (or with just one developer)
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有指定角色（或只有一名开发者）的小团队
- en: A lack of skills and experience
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 技能和经验不足
- en: A lack of time (not a good excuse at all, as a bit of structure will probably
    save time anyway)
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时间不足（这根本不是借口，因为一点结构可能无论如何都会节省时间）
- en: However, Code and Fix can be partially justified when working on very small
    projects that will not require any maintenance or evolution, such as prototypes
    or projects with a defined, short lifetime.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当处理不需要任何维护或演化的非常小的项目时，如原型或寿命有限的明确、短期项目时，代码和修复可以部分合理化。
- en: It's also worth noticing, before diving into more complex and complete techniques,
    that embracing such methodologies is not a warranty of a successful project, and
    implementing Scrum, DevOps, or whatever you like is not going to be the perfect
    way to avoid a technical debt. Indeed, the software development methodologies
    are suggestions on how to give cadence on a project and what are the meaningful
    splits of roles and responsibilities, as seen in other projects. But it's ultimately
    the responsibility of the project team (and yours, as an architect) to ensure
    that the methodology (if any) is correctly used and that no pieces are left behind,
    in terms of technical debt, code quality, and project scheduling.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入研究更复杂和完整的技术之前，也值得注意，采用这样的方法并不能保证项目的成功，实施Scrum、DevOps或任何你喜欢的方法也不一定是避免技术债务的完美方式。事实上，软件开发方法只是对如何在项目上给出节奏以及角色和责任的合理划分的建议，正如在其他项目中看到的那样。但最终，项目团队（以及作为架构师的你）的责任是确保（如果有的话）方法正确使用，并且没有遗漏任何部分，无论是技术债务、代码质量还是项目进度。
- en: With that said, the natural step after Code and Fix is to provide a bit of structure,
    sequentially, which is known as the **Waterfall** model.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，代码和修复之后的自然步骤是提供一些结构化的顺序，这被称为**瀑布**模型。
- en: Glancing at the Waterfall model
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简要看看瀑布模型
- en: As has been said, the Waterfall model is a structured development model based
    on a sequence of different phases. This means that each phase begins when the
    previous one has ended.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 正如所说，瀑布模型是一种基于不同阶段序列的结构化开发模型。这意味着每个阶段都是在前一个阶段结束后开始的。
- en: The Waterfall model probably stems from the application of project management
    practices coming from other kinds of projects, such as constructing buildings
    or manufacturing objects. Indeed, while I am no expert on them, it's easy to understand
    that in order to build a house, you have to precisely follow a sequence of steps,
    such as calculating the materials and weights, building foundations, and constructing
    walls.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 瀑布模型可能源于来自其他类型项目（如建筑或制造物体）的项目管理实践的运用。确实，虽然我不是这方面的专家，但很容易理解，为了建造房屋，你必须精确地遵循一系列步骤，例如计算材料和重量、建造地基和建造墙壁。
- en: The Waterfall model originated from a number of different articles and lectures
    (with the most important coming from Winston Royce) and has also been ratified
    in an official document by the **US Department of Defense**.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 瀑布模型起源于多篇文章和讲座（其中最重要的是来自温斯顿·罗伊斯的文章）并且已经被**美国国防部**的官方文件所认可。
- en: 'The phases in the Waterfall model are as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 瀑布模型中的阶段如下：
- en: '**Requirement management**: You probably have a very good idea of what this
    phase entails, as per [*Chapter 2*](B16354_02_Final_JM_ePUB.xhtml#_idTextAnchor034),
    *Software Requirements – Collecting, Documenting, Managing*. In the Waterfall
    model, the requirement specification must be completed and formally accepted before
    proceeding with the next phase, while we discussed how, usually, an iterative
    approach is more natural.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**需求管理**：根据[*第二章*](B16354_02_Final_JM_ePUB.xhtml#_idTextAnchor034)，“软件需求 –
    收集、记录、管理”，你可能对这一阶段的内容有很好的理解。在瀑布模型中，需求规范必须完成并正式接受后，才能进入下一阶段，而我们讨论了通常情况下，迭代方法更为自然。'
- en: '**Analysis/design**: Sometimes defined as two different phases, the goal is
    to start from system requirements and then define the solution architecture to
    satisfy them. As in the previous phases, whoever is in charge of the next phase
    must formally accept the deliverables coming from this phase (such as system blueprints,
    diagrams, and pseudocode) in order for the process to continue. This basically
    means that developers must clearly understand what they are supposed to implement.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分析/设计**：有时被定义为两个不同的阶段，目标是始于系统需求，然后定义满足这些需求的解决方案架构。与前几个阶段一样，负责下一阶段的人必须正式接受来自这一阶段的可交付成果（如系统蓝图、图表和伪代码），以便流程继续。这基本上意味着开发者必须清楚地了解他们应该实施的内容。'
- en: '**Implementation**: In this phase, the development team, starting from requirements
    and from the deliverables produced in the previous phase, must write the code
    to implement a proper software solution. This phase is, of course, crucial, and
    the correct completion of this phase basically means the success of the whole
    project.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实施**：在这个阶段，开发团队从需求和前一阶段产生的可交付成果开始，必须编写代码以实现适当的软件解决方案。这个阶段当然是至关重要的，而这个阶段的正确完成基本上意味着整个项目的成功。'
- en: '**Testing**: As seen before, the acceptance of the deliverables coming from
    the preceding step is part of each phase. With testing, the approval is so important
    (and so complex) that it overlaps with the whole phase. The Waterfall model does
    not specifically distinguish between different kinds of testing, but this phase
    is commonly intended as **user acceptance testing**.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试**：如前所述，来自前一阶段的可交付成果的接受是每个阶段的一部分。测试的批准非常重要（并且非常复杂），以至于它与整个阶段重叠。瀑布模型没有明确区分不同类型的测试，但这个阶段通常被理解为**用户验收测试**。'
- en: '**Operations/maintenance**: This is the final step, facilitated by technical
    activities ensuring the proper setup of the solution in a production environment,
    as well as all the planned and unplanned activities to keep it operating properly.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运维/维护**：这是最后一步，通过技术活动确保在生产环境中正确设置解决方案，以及所有计划内和计划外的活动，以保持其正常运行。'
- en: 'The following diagram demonstrates the phases of the Waterfall model:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图表展示了瀑布模型的阶段：
- en: '![Figure 5.1 – The Waterfall phases'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.1 – 瀑布阶段'
- en: '](img/Figure_5.01_B16354.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_5.01_B16354.jpg)'
- en: Figure 5.1 – The Waterfall phases
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.1 – 瀑布阶段
- en: As you can see, the Waterfall model is a big jump when starting from Code and
    Fix, as we are starting to see a clearer distinction of what should be done in
    each phase.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，瀑布模型从代码和修复开始时是一个大的跳跃，因为我们开始看到每个阶段应该做什么的更清晰的区分。
- en: Advantages and disadvantages of the Waterfall model
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 瀑布模型的优缺点
- en: 'The Waterfall software development model is still widely used. Some of the
    advantages of this model are as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 瀑布软件开发模型仍然被广泛使用。该模型的一些优点如下：
- en: There is a clear definition of phases, hence planning is rather easier. Even
    though the phases should not overlap, it flows sequentially.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阶段有明确的定义，因此规划相对容易。尽管阶段不应该重叠，但它是按顺序进行的。
- en: The mechanism encourages a proper handover between teams, including a formal
    acceptance between one phase and the following, giving greater control over planning
    and project quality.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这种机制鼓励团队之间进行适当的移交，包括一个阶段与下一个阶段之间的正式接受，从而在规划和项目质量上提供更大的控制。
- en: 'However, as you probably already know, there are some disadvantages to this
    methodology:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，正如你可能已经知道的，这种方法有一些缺点：
- en: The first and most evident disadvantage is the lack of flexibility. If you implement
    the Waterfall model entirely, you should not start implementing it before requirements
    have been collected in their entirety and the design has been carried out in full.
    In the real world, this is unlikely to happen; as we have seen, the requirement
    collection keeps flowing and the architecture design evolves while we face (and
    resolve) implementation issues.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个也是最明显的缺点是缺乏灵活性。如果你完全实施瀑布模型，你应该在收集到所有需求并完成设计之前不要开始实施。在现实世界中，这种情况不太可能发生；正如我们所见，需求收集持续进行，架构设计在我们面对（并解决）实施问题时不断演变。
- en: Moreover, the software that we are building is seen and tested once implementation
    is complete. This means that you will not receive feedback on your code until
    very late in the project (maybe too late).
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此外，我们构建的软件在实施完成后才会被查看和测试。这意味着你将在项目后期（可能太晚）才会收到关于你代码的反馈。
- en: For this reason, the Waterfall model has undergone several transformations,
    usually shortening the feedback loop, or cycling and jumping between phases (such
    as adding more requirements while implementing or managing defects identified
    during the testing phase). But while this model is still used, more flexible methodologies
    are now widespread, as they offer a less risky approach to development, and it
    all starts with Agile methodologies.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，瀑布模型已经经历了多次转变，通常是通过缩短反馈循环，或者在不同阶段（如实施时添加更多需求或在测试阶段管理发现的缺陷）之间循环和跳跃。但尽管这个模型仍在使用，现在更灵活的方法已经广泛流行，因为它们提供了一种更安全的发展方法，而这一切都始于敏捷方法论。
- en: Understanding the Agile methodology
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解敏捷方法论
- en: 'The **Agile** methodology is a galaxy of best practices and techniques. A lot
    of still widely used methodologies inspired Agile (such as **Scrum** and **Kanban**),
    but the official birth of the movement stems from the *Agile Manifesto*, published
    in 2001\. The four very popular key concepts (values) of the *Agile Manifesto*
    are as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**敏捷**方法论是一个最佳实践和技术的大成。许多至今仍在广泛使用的敏捷方法（如**Scrum**和**Kanban**）都受到了敏捷的启发，但运动的官方起源来自2001年发布的*敏捷宣言*。*敏捷宣言*的四个非常流行的关键概念（价值观）如下：'
- en: '*Individuals and interactions* over processes and tools'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*个人和团队互动* 胜过流程和工具'
- en: '*Working software* over comprehensive documentation'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*工作软件* 胜过全面文档'
- en: '*Customer collaboration* over contract negotiation'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*客户协作* 胜过合同谈判'
- en: '*Responding to change* over following a plan'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*对变化的响应* 胜过遵循计划'
- en: 'While some of the preceding points can be misinterpreted and result in bad
    behaviors, such as ditching documentation and planning, it''s enlightening to
    think about such simple but powerful advice. Also, be careful that the manifesto
    itself advocates against complete anarchy as a result of the following note:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然前面的一些观点可能会被误解并导致不良行为，例如放弃文档和计划，但思考这样简单而有力的建议是有启发性的。同时，请注意，宣言本身反对完全的无政府状态，如下面的注释所示：
- en: '*"While there is value in the items on the right, we value the items on the
    left more."*'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '*"虽然右边的项目有价值，但我们更重视左边的项目。"*'
- en: 'Important Note:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示：
- en: The values on the left here are the ones mentioned at the beginning of each
    value and refer to *freedom* (such as working software), while the ones on the
    right are the ones at the end, referring to *discipline* (such as comprehensive
    documentation).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这里左边的价值观是每个价值观开头提到的，指的是*自由*（如工作软件），而右边的价值观是结尾提到的，指的是*纪律*（如全面文档）。
- en: This part is often foreseen by teams looking into Agile methodologies as an
    excuse to skip the boring parts of the development process. The Agile process
    appreciates freedom but does not preclude some level of order.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分通常是敏捷方法论研究团队用来跳过开发过程中枯燥部分的一个借口。敏捷过程重视自由，但并不排除一定程度的秩序。
- en: There is moreover a very important observation to make while introducing the
    topic of Agile. The Agile methodology, and all its implementations described in
    this chapter, consider it crucial to have the customer (or the business owner,
    in other words, who is paying for the project) be aware of the methodology and
    willing to be part of it. Indeed, it's common to see in the following *The Agile
    principles* section the advice and principles involving the customers, as they're
    an active part of the software development project by providing inputs and feedbacks
    in many steps of the process. For such a reason, the adoption of an Agile practice
    will not be possible if the customer does not agree (implicitly or explicitly)
    with it.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在介绍敏捷主题时，还有一个非常重要的观察需要提出。敏捷方法论，以及本章中描述的所有实现，都认为让客户（或者说，支付项目费用的业务所有者，换句话说，即客户）了解该方法并愿意成为其中一员至关重要。确实，在接下来的*敏捷原则*部分，我们可以看到涉及客户的建议和原则，因为他们是软件开发项目中的积极参与者，在过程的许多步骤中提供输入和反馈。因此，如果客户不同意（无论是隐含的还是明确的）采用敏捷实践，那么敏捷实践的采用将是不可能的。
- en: The *Agile Manifesto* further details the basic values of Agile by providing
    a list of principles.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '*敏捷宣言*通过提供一系列原则进一步详细阐述了敏捷的基本价值观。'
- en: The Agile principles
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 敏捷原则
- en: 'As opposed to Waterfall, Agile bets everything on collaboration (within the
    team, and with customers too) and releases small chunks of working software often
    with a view to getting feedback early and adapting planning if necessary. Instead
    of trying to foresee everything and plan accordingly, Agile teams focus on quickly
    adapting to changing conditions and acting subsequently. This is well detailed
    in the Agile principles:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 与瀑布模型相反，敏捷将一切押在协作上（不仅在团队内部，还包括与客户）并经常发布小块可工作的软件，目的是尽早获得反馈并在必要时调整计划。敏捷团队不是试图预见一切并相应地制定计划，而是专注于快速适应变化条件并随后采取行动。这一点在敏捷原则中得到了很好的阐述：
- en: Our highest priority is to satisfy the customer through early and continuous
    delivery of valuable software.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们最高的优先级是通过早期和持续交付有价值的软件来满足客户。
- en: Welcome changing requirements, even late in development. Agile processes harness
    change for the customer's competitive advantage.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 欢迎在开发后期甚至更晚的时候改变需求。敏捷流程利用变化为客户的竞争优势服务。
- en: Deliver working software frequently, from a couple of weeks to a couple of months,
    with a preference for the shorter timescale.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 频繁交付可工作的软件，从几周到几个月不等，更倾向于较短的时间尺度。
- en: Business people and developers must work together daily throughout the project.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 商业人员和开发人员必须在整个项目期间每天一起工作。
- en: Build projects around motivated individuals. Give them the environment and support
    they need and trust them to get the job done.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 围绕有动力的个人构建项目。为他们提供所需的环境和支持，并信任他们完成任务。
- en: The most efficient and effective method of conveying information to and within
    a development team is face-to-face conversation.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在开发团队内部以及团队之间传达信息的最高效和最有效的方法是面对面的交流。
- en: Working software is the primary measure of progress.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作软件是衡量进展的主要标准。
- en: Agile processes promote sustainable development.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 敏捷流程促进可持续开发。
- en: Sponsors, developers, and users should be able to maintain a constant pace indefinitely.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 赞助商、开发人员和用户应该能够无限期地保持恒定的速度。
- en: Continuous attention to technical excellence and good design enhances agility.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不断关注技术卓越和良好的设计可以增强敏捷性。
- en: Simplicity – the art of maximizing the amount of work not done – is essential.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单性——最大化未完成工作量的艺术——是至关重要的。
- en: The best architectures, requirements, and designs emerge from self-organizing
    teams.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最好的架构、需求和设计来自自我组织的团队。
- en: At regular intervals, the team reflects on how to become more effective and
    then tunes and adjusts its behavior accordingly.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 团队会定期反思如何变得更加高效，然后根据反思结果调整和调整其行为。
- en: As you may see, other best practices are stressed in these principles, such
    as focusing on good architecture, privileging simple solutions, and building motivated
    teams. Of course, those are the general ideas. Before and after the publishing
    of the manifesto, a number of practices have been built around similar topics.
    In the next section, we will talk about Lean software development, a practice
    often associated with Agile development, which has its roots in the manufacturing
    industry.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，这些原则强调了其他最佳实践，例如关注良好的架构、优先考虑简单解决方案和构建有动力的团队。当然，这些都是一般想法。在宣言发布前后，围绕类似主题建立了一系列实践。在下一节中，我们将讨论精益软件开发，这是一种经常与敏捷开发相关联的实践，其根源在制造业。
- en: Introducing Lean software development
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍精益软件开发
- en: '**Lean software development** is a framework developed after the manufacturing
    method of the same name, which, in turn, is derived from the **Toyota Production
    System**. The interesting concept regarding this topic, indeed, is how it translates
    best practices from industrial production into software production. This is also
    due to the experience of one of the authors (Mary Poppendieck) in this context.
    She worked in the manufacturing industry and had the opportunity to learn about
    the production processes in a factory context directly.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**精益软件开发**是在同名的制造方法之后发展起来的一个框架，而这个制造方法反过来又是从**丰田生产系统**中衍生出来的。关于这个话题的一个有趣的概念，确实是如何将工业生产中的最佳实践转化为软件生产中的最佳实践。这也归功于一位作者（玛丽·波彭迪克）在这个领域的经验。她在制造业工作，并有机会直接在工厂环境中了解生产流程。'
- en: We will quickly cover a selection of the principles of Lean software development
    in the upcoming sections.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几节中，我们将快速介绍精益软件开发的原则。
- en: Eliminating waste
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 消除浪费
- en: Waste is a concept directly mutated from the Toyota Production System. Basically,
    waste is everything that costs resources without giving any value to the finished
    product.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 浪费是一个直接从丰田生产系统中演变而来的概念。基本上，浪费是指那些没有为最终产品提供任何价值的资源消耗。
- en: Taking it to the extreme, in software development, everything that is not related
    to analysis or coding could be a waste. This can be seen as another point of view
    in the **simplicity** Agile principle.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 将其推向极致，在软件开发中，与分析和编码无关的一切都可能是一种浪费。这可以被视为敏捷原则中**简单性**的另一个观点。
- en: 'To identify waste in software development, Lean software development suggests
    looking into its seven main areas:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在软件开发中识别浪费，精益软件开发建议关注其七个主要领域：
- en: '**Partially done work**: This area relates to non-completed or non-released
    features. This means accumulating code, which has to be maintained, without providing
    any utility to the final customer. Moreover, since incomplete work is never proven
    in production, you can never be 100% sure that everything works as expected. You
    can also take into account the fact that releasing the software, which we are
    building in production, is the only way to understand whether such code is valuable.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部分完成的工作**：这个领域与未完成或未发布的特性相关。这意味着积累代码，这些代码需要维护，但不会为最终客户提供任何效用。此外，由于未完成的工作从未在生产中得到验证，你永远无法100%确信一切按预期工作。你还应考虑这样一个事实，即我们正在生产中构建的软件的发布是我们理解此类代码是否有价值的唯一途径。'
- en: A famous paper by Ron Kohavi states that just one-third of the implemented features
    provide positive impacts, while the rest are neutral or even negative. The only
    way to figure it out is to release the code in production and see the feedback
    of real customers using it.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 罗恩·科哈维（Ron Kohavi）的一篇著名论文指出，仅有一分之一的三分之一的实现功能提供了积极影响，而其余的则是中性的，甚至可能是负面的。唯一找出答案的方法是将代码发布到生产环境中，并观察实际使用该代码的客户的反馈。
- en: '**Extra Processes**: This refers to bureaucracy. This means paperwork, approval
    processes, and similar issues. We all know that there are things that just can''t
    be skipped, such as security checklists and handoff documents for production release.
    Often, however, those processes are overcomplicated and overengineered. This area
    should be looked at for simplifications or even automation where relevant. Instead
    of manually answering security-related questions, maybe you could just run automated
    tests, as an example.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**额外流程**：这指的是官僚主义。这意味着文书工作、审批流程以及类似的问题。我们都知道有些事情是跳不过去的，比如安全清单和生产发布的交接文件。然而，通常这些流程过于复杂和过度工程化。这个领域应该考虑简化或甚至自动化。例如，与其手动回答与安全相关的问题，不如运行自动化测试。'
- en: '**Extra features**: This is a very common pitfall. Perhaps in the requirement
    analysis, we are just pushing more and more features without any specific thoughts
    on whether those are useful or not. Or maybe, when implementing a new feature,
    it''s just so easy to add a similar one, which nobody is asking for but *can be
    useful sooner or later*. This is just wrong. Even if the code is easy to add,
    it must be maintained, or else it can potentially introduce bugs.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**额外功能**：这是一个非常常见的陷阱。也许在需求分析中，我们只是不断地推陈出新，而没有具体考虑这些功能是否有用。或者，在实现新功能时，添加一个类似的功能可能非常容易，尽管没有人要求，但“迟早可能有用”。这是错误的。即使代码添加起来很容易，也必须维护，否则可能会引入潜在的错误。'
- en: '**Task switching**: Now, it''s common sense to know that context switches are
    time-consuming. That is particularly true in software development, where you have
    a lot of things to sort out, from setting up your environment (although this can,
    and should, be automated), to focusing on project structure and code standards,
    and recalling the team dynamics and latest updates. It is basically as painful
    as it seems, yet very tempting to juggle multiple projects at a time.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**任务切换**：现在，众所周知，上下文切换是耗时的。这在软件开发中尤其如此，因为你有很多事情要处理，从设置环境（尽管这可以，也应该自动化），到关注项目结构和代码标准，再到回忆团队动态和最新更新。这基本上就像看起来那么痛苦，但同时又非常诱人，一次处理多个项目。'
- en: '**Waiting**: This is a very common thing to relate to. We end up waiting for
    a number of reasons, such as the environment being created and an analysis being
    completed. While the technical stuff can be mitigated by automation, from a project
    management standpoint, it is way harder to plan everything to ensure synchronized
    handoffs between teams. To act against waiting, you may be tempted (or forced)
    to help out on other tasks and projects, while this can easily transform into
    other waste (as per the previous point, task switching is not the best idea).'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**等待**：这是一个非常常见的事情，与之相关。我们最终会因各种原因而等待，例如环境创建和分析完成。虽然可以通过自动化减轻技术问题，但从项目管理角度来看，确保团队之间同步移交要困难得多。为了对抗等待，你可能（或被迫）帮助其他任务和项目，而这很容易转变为其他浪费（如前所述，任务切换并不是最好的主意）。'
- en: '**Motion**: As introduced previously, we have handoffs between different teams.
    That''s the concept of motion. The longer it takes, the more waste you will have.
    This includes having a huge amount of back and forth, or simply too many teams
    cooperating. Handoffs not only include the exchange of artifacts (such as source
    code) but knowledge in general (such as documents or simply answers).'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运动**：如前所述，我们存在不同团队之间的移交。这就是“运动”的概念。耗时越长，浪费就越多。这包括大量的来回移动，或者简单地有太多的团队合作。移交不仅包括交换工件（如源代码），还包括一般性的知识（如文档或简单的答案）。'
- en: '**Defects**: Everybody knows what a bug is and how much time it can take to
    find the causes and solve it. Of course, it''s just impossible to write software
    without any bugs. But there are things you can do to reduce the impact of bugs,
    such as improving test coverage (including code analysis), which will end up saving
    time by identifying issues before they move into a snowball effect. Also, as has
    already been discussed, the sooner you go into production, the sooner you will
    find bugs (and have the opportunity to enrich your test suite).'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缺陷**：每个人都知道什么是错误，以及找到原因和解决它需要多少时间。当然，不写任何错误的软件是不可能的。但你可以做一些事情来减少错误的影响，例如提高测试覆盖率（包括代码分析），这样就可以在问题变成滚雪球效应之前识别出问题，从而节省时间。此外，正如已经讨论过的，你越早进入生产阶段，就越早发现错误（并且有机会丰富你的测试套件）。'
- en: To identify waste in your software production cycle, the Lean software development
    framework provides a very useful tool called **Value Stream Mapping**.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 为了识别软件生产周期中的浪费，精益软件开发框架提供了一个非常有用的工具，称为**价值流图**。
- en: Value Stream Mapping is used to observe the software development process from
    an external point of view, mapping all the steps necessary (and the waiting time
    between them) for a requirement to go from inception to production release (usually
    known as the time to market).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 价值流图用于从外部视角观察软件开发过程，映射出需求从构思到生产发布（通常称为上市时间）所需的所有步骤（以及它们之间的等待时间）。
- en: You are supposed to track down this simply with paper and pencil. After tracking
    down the whole software cycle, you usually end up figuring out that the majority
    of the time is lost in waiting or in other types of waste, as per the previous
    list. Now that you have some quantitative data, with good executive sponsorship,
    you can act by changing the flow to maximize the time spent delivering value and
    minimizing waste. This will usually include simplifying approval processes and
    automating manual steps. The efficiency that can be attained here is mind-blowing.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该用纸和笔简单地追踪这一点。在追踪整个软件周期之后，你通常会发现自己大部分时间都浪费在等待或其他类型的浪费上，正如之前所列出的。现在你有一些定量数据，有了良好的执行支持，你可以通过改变流程来最大化交付价值的时间，并最小化浪费。这通常包括简化审批流程和自动化手动步骤。这里可以达到的效率是令人震惊的。
- en: Deciding as late as possible
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尽可能晚做决定
- en: This section is all about being open to changes. Especially when making expensive
    choices, it is good to defer the decision as much as possible, as more information
    may come to light to support the choice. Moreover, making a decision later will
    reduce the risk of having to get back to redoing part of the work owing to a wrong
    decision.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这一节主要关于对变化持开放态度。特别是在做出昂贵的决策时，尽可能推迟决策是明智的，因为可能会有更多信息出现来支持这个决策。此外，晚些时候做出决策将减少因决策错误而需要重新做部分工作的风险。
- en: 'However, there are more subtle implications in this principle. What comes to
    my mind is the mythical quote from Donald Knuth:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这个原则还有更多微妙的影响。我想起的是唐纳德·克努特的一个神话般的引言：
- en: '*"Premature optimization is the root of all evil."*'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: “过早优化是万恶之源。”
- en: This means that if you make choices (especially hard to undo choices) too soon,
    you may end up making the wrong choice because of a lack of information, or simply
    wasting time with a topic that will end up not being that relevant. So, one strong
    piece of advice from the Lean software development framework is that you shouldn't
    commit to everything unless you have to, stay open and flexible, and defer from
    making complex decisions until you have no alternatives.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着如果你过早地做出选择（尤其是难以撤销的选择），你可能会因为信息不足而做出错误的选择，或者简单地浪费时间在一个最终可能不那么相关的主题上。因此，精益软件开发框架的一个强烈建议是，除非你真的需要，否则不要对一切做出承诺，保持开放和灵活，并在没有其他选择之前推迟做出复杂的决策。
- en: Translated in the software world, there are a number of different ways to do
    this, such as using stubs instead of real systems (before deciding which system
    to use), defining modular options (to facilitate the switching of different implementations),
    and using feature flags (to elicit specific behaviors directly in production).
    Just make sure that you find the right trade-off to avoid piling up waste. Implementing
    tens of different behaviors because you don't know what the final decision will
    be is, of course, not an option, but there are middle grounds.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件世界中，实现这一目标有几种不同的方法，例如使用存根而不是真实系统（在决定使用哪个系统之前），定义模块化选项（以方便不同实现的切换），以及使用功能标志（在生产环境中直接引发特定行为）。只需确保你找到正确的权衡，避免浪费的堆积。因为你不知道最终的决定会是什么，所以实施数十种不同的行为当然不是一种选择，但也有一些折衷方案。
- en: A rule of thumb is usually to avoid planning for years or even months in advance.
    It's better to end up with very detailed planning for the upcoming weeks, which
    will become less and less detailed going forward in time.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 一个经验法则是通常避免提前数年或数月进行规划。最好是最终对即将到来的几周有非常详细的规划，随着时间的推移，这些规划将变得越来越不详细。
- en: Delivering as fast as possible
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尽可能快地交付
- en: This is a concept that I've emphasized a lot, so I will keep it as concise as
    possible. Organizing the delivery work in small chunks is key. That's what *fast*
    refers to. You have to plan for releasing often. This will do for having feedback
    early and perfecting your strategy on the go.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个我强调了很多的概念，所以我会尽量让它尽可能简洁。将交付工作组织成小块是关键。这就是“快”所指的。你必须计划经常发布。这将有助于尽早获得反馈，并在过程中完善你的策略。
- en: There are several pieces of advice here, such as having a regular rate of release
    (both in terms of the time window and in terms of the number of features) and
    moving from a push to a pull approach (there will be more on this when we discuss
    it in the *Kanban board* section). Personally, I think the most important thing
    is to avoid keeping the team overloaded. Having some spare capacity will allow
    the team to work more efficiently.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些建议，比如保持定期发布（无论是从时间窗口还是从功能数量来看）以及从推式方法转向拉式方法（当我们讨论*看板板*部分时，会有更多关于这个的内容）。我个人认为最重要的事情是避免让团队过度负荷。保留一些额外的容量将允许团队更有效地工作。
- en: Optimizing the whole product
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优化整个产品
- en: 'As stated previously, optimization is tempting but not necessarily always the
    answer. The thinking here is about approaching the process (and the system) as
    a whole. Optimizing just one of the subparts (or the subprocess) may indeed have
    adverse effects on the final result. Let me explain this with the aid of two practical
    examples (in the process and system area):'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，优化可能很有吸引力，但并不一定是答案。这里的思考是将过程（和系统）作为一个整体来考虑。仅仅优化一个子部分（或子过程）确实可能会对最终结果产生不利影响。让我用两个实际例子（在过程和系统领域）来解释这一点：
- en: It may be tempting to reduce the testing phase to improve the time to market.
    However, if you have a holistic approach, the time spent on fixing bugs will probably
    be bigger than the saving. And we are not taking into account the impacts of bugs,
    such as downtimes, bad reputation, and customer churn.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能会诱使人们为了缩短上市时间而减少测试阶段。然而，如果你有一个整体的方法，修复错误所花费的时间可能会比节省的时间更多。而且，我们还没有考虑到错误的影响，比如停机时间、声誉受损和客户流失。
- en: You may consider optimizing the disk usage of your application in many ways,
    such as compressing files or using special formats (such as binary). But this
    may, of course, come at the cost of a slower reading so, overall, it may not be
    a good idea.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可能会考虑以多种方式优化应用程序的磁盘使用，比如压缩文件或使用特殊格式（如二进制）。但这当然可能会以读取速度变慢为代价，所以总的来说，可能不是一个好主意。
- en: Pros and cons of Lean development
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 精益开发的优缺点
- en: 'As we have seen, Lean is the first practical implementation of the Agile concepts.
    For that reason, the advantages over more structured methodologies (such as the
    Waterfall model, which we have already seen) are evident:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，精益是敏捷概念的第一个实际应用。因此，与更结构化的方法论（如我们已经看到的瀑布模型）相比，其优势是明显的：
- en: A greater flexibility, meaning that changes in the planning and requirements
    are better tolerated
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更大的灵活性，意味着对计划和需求的变化有更好的容忍度
- en: Enhanced freedom for the teams, where they may choose what works for them locally,
    that is, both technologically and from an organizational point of view
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为团队提供更大的自由度，他们可以选择适合他们的本地方法，即从技术和组织观点来看
- en: A shorter feedback cycle, which means faster time to market and understanding
    sooner how your software performs (as discussed in [*Chapter 4*](B16354_04_Final_JM_ePUB.xhtml#_idTextAnchor089),
    *Best Practices for Design and Development*, when talking about Minimum Viable
    Products)
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更短的反馈周期，这意味着更快的上市时间和更早地了解你的软件性能（如在第[*第4章*](B16354_04_Final_JM_ePUB.xhtml#_idTextAnchor089)中讨论的，*设计和开发最佳实践*，当谈到最小可行产品时）
- en: 'The disadvantages of Lean development will definitely vary, based on the team
    composition and the project complexity. Some common ones are as follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 精益开发的缺点肯定会因团队构成和项目复杂度而异。以下是一些常见的例子：
- en: Lean is more of a set of principles (part of the broader set of Agile principles),
    rather than a structured methodology. This means that the outcome may be less
    predictable.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 精益更多是一套原则（敏捷原则更广泛集合的一部分），而不是一个结构化的方法论。这意味着结果可能不太可预测。
- en: As a further consequence, it doesn't usually work well with less-skilled teams,
    as it requires high maturity and greatly delegates decisions to each team member.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为进一步的后果，它通常不适用于技能较低的团队，因为它需要高度的成熟度，并将决策权极大地委托给每个团队成员。
- en: In the case of big projects, the modularization for being worked by many small
    lean teams is accomplished, while the methodology can scale well. It's also hard
    to keep track of the greater picture and synchronize between each team and subproject.
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在大型项目的案例中，由许多小型精益团队协作的模块化已经完成，而方法论可以很好地扩展。同时，也很难跟踪整体情况，并在每个团队和子项目之间进行同步。
- en: Deciding as late as possible means that some architectural decisions are delayed
    too much. As a consequence, from time to time, some rework may happen (because
    of wrong choices or simply the lack of any choice).
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽可能晚做决定意味着一些架构决策被推迟得太久。结果，时不时地，可能需要进行一些返工（因为选择错误或简单地缺乏选择）。
- en: In this section, we learned about Lean software development, which is a framework
    full of good ideas, practices, and tools.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们了解了精益软件开发，这是一个充满好想法、实践和工具的框架。
- en: We've seen a walk-through of a lot of valuable ideas, such as waste reduction,
    openness to changes, holistic optimization, and fast feedback loop.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了许多有价值的想法的概述，例如减少浪费、对变化的开放性、整体优化和快速反馈循环。
- en: Bear in mind that there is a bit of overlap and mutual influence between the
    different philosophies in the Agile spectrum. Let's now switch to another well-known
    one – Scrum.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，敏捷谱系中不同的哲学之间有一些重叠和相互影响。现在让我们转向另一个广为人知的——Scrum。
- en: Exploring Scrum
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 Scrum
- en: The **Scrum** methodology was launched by Ken Schwaber and Jeff Sutherland in
    a paper published in 1995\. The authors were also involved in the creation of
    the *Agile Manifesto* a bit later, so some of those ideas are directly linked.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**Scrum** 方法论由 Ken Schwaber 和 Jeff Sutherland 在 1995 年发表的一篇论文中推出。作者们后来也参与创建了
    *敏捷宣言*，因此其中一些想法是直接相关的。'
- en: Scrum differs slightly from Lean software development because, more than principles
    and high-level advice, it focuses directly on roles, project cadence (via the
    so-called *events*), and rules. The authors stress the fact that while you can
    customize the technique a bit, Scrum is intended to be *all or nothing*, meaning
    that you should accept and practice all the key components before embarking on
    a Scrum project.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Scrum 与精益软件开发略有不同，因为它不仅仅关注原则和高级建议，而是直接聚焦于角色、项目节奏（通过所谓的 *事件*）和规则。作者强调，虽然你可以稍微定制这项技术，但
    Scrum 的意图是 *全有或全无*，这意味着在开始 Scrum 项目之前，你应该接受并实践所有关键组件。
- en: Scrum refers to a phase of rugby and is regarded as an analogy for a cohesive,
    cross-functional team, pushing together to pursue a common objective.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Scrum 指的是橄榄球的一个阶段，并被视为一个团结的、跨职能的团队，共同推动以追求共同目标。
- en: 'In this section, we will see the fundamental elements of Scrum: the team composition
    (roles and responsibilities), the events (meetings and other key appointments
    of a Scrum project), and artifacts (the tool supporting the Scrum methodology).'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到 Scrum 的基本要素：团队构成（角色和职责）、事件（Scrum 项目的会议和其他关键预约），以及工件（支持 Scrum 方法的工具）。
- en: Let's start with the team setting.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从团队设置开始。
- en: Understanding the Scrum teams
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 Scrum 团队
- en: 'The Scrum teams are kind of a self-sufficient ecosystem. This means having
    all the skills needed to deliver tasks (or, in other words, being a cross-functional
    team), and being self-organized (as long as the team satisfies expectations, it
    can follow its own rules). The Scrum methodology identifies three main roles:
    the **Scrum master**, the **product owner**, and the members of the development
    team.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Scrum 团队是一种自给自足的生态系统。这意味着拥有交付任务所需的所有技能（或者说，成为一个跨职能团队），并且能够自我组织（只要团队能满足期望，它就可以遵循自己的规则）。Scrum
    方法确定了三个主要角色：**Scrum 大师**、**产品负责人**和开发团队成员。
- en: Development team
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开发团队
- en: The development team, as you can imagine, is the one that will *hands-on* complete
    the assigned tasks, in the form of implemented and testable features. It is, by
    design, a flat team (no hierarchy or sub-teams are allowed) and has all the skills
    needed to complete the tasks (meaning that you can suppose it will not only include
    developers but also security experts, DBAs, and everyone else that should be needed).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 开发团队，正如你可以想象的那样，是那个将任务 *亲手完成* 的团队，以实现和可测试的功能的形式。按照设计，这是一个扁平化的团队（不允许有等级或子团队），并拥有完成任务所需的所有技能（这意味着你可以假设它不仅包括开发者，还包括安全专家、数据库管理员以及所有其他可能需要的人）。
- en: As said, the development team is autonomous in terms of technical choices but
    is accountable (as a whole) for the outcomes of those choices. One of the main
    discussions centers on development teams when Scrum is applied to large enterprise
    environments. Indeed, often, the enterprise has guidelines and policies that have
    to be respected and, in this sense, are limiting the development team's freedom.
    Moreover, the need for different kinds of skills may lead to variability in the
    team's composition (with people temporarily moving between different projects),
    and that is a mechanism that needs to be sometimes facilitated and monitored,
    as schedule clashes may occur.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，开发团队在技术选择方面是自治的，但（作为一个整体）对选择的结果负有责任。当Scrum应用于大型企业环境时，主要讨论之一是开发团队。确实，企业通常有一系列必须遵守的指南和政策，从这一意义上讲，它们限制了开发团队的自由。此外，对不同类型技能的需求可能导致团队组成的变化（人员临时在不同项目之间移动），这是一个有时需要促进和监控的机制，因为可能会发生时间冲突。
- en: Product owner
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 产品负责人
- en: The **product owner** is essentially responsible for the development pace. The
    product owner is the person committed to selecting the working items from a bunch
    of to-dos (also known as the Product Backlog, as we have briefly seen in [*Chapter
    4*](B16354_04_Final_JM_ePUB.xhtml#_idTextAnchor089), *Best Practices for Design
    and Development*, when talking about User Story Mapping), and understand which
    items must be implemented and when.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '**产品负责人**基本上负责开发节奏。产品负责人是那些从一系列待办事项（也称为产品待办事项，如我们在[*第4章*](B16354_04_Final_JM_ePUB.xhtml#_idTextAnchor089)，*设计和开发最佳实践*中简要提到的，当讨论用户故事映射时）中选择工作项的人，并了解哪些项必须实施以及何时实施。'
- en: We will talk more about the Product Backlog soon, in the *Understanding Scrum
    artifacts* section, but for now, you can imagine how crucial this task is in terms
    of customer expectations, and how important it is to choose tasks with the right
    rationales to maximize overall throughput.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在“理解Scrum工件”部分中很快更多地讨论产品待办事项，但就目前而言，你可以想象这项任务在客户期望方面是多么关键，以及选择具有正确理由的任务以最大化整体吞吐量是多么重要。
- en: Scrum Master
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Scrum Master
- en: The **Scrum Master** is basically the sponsor and advocate of the Scrum methodology,
    both internally to the team and externally to the rest of the organization. Their
    role is to mentor the junior members of the team and, generally, anyone who is
    not an expert in the methodology.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**Scrum Master**基本上是Scrum方法论的赞助者和倡导者，无论是在团队内部还是在组织外部。他们的角色是指导团队成员中的初级成员，以及通常不是该方法专家的任何人。'
- en: If the organization is adopting Scrum at scale, all Scrum Masters create community-exchanging
    best practices on how to achieve results better. Scrum Masters are responsible
    for facilitating the jobs of the other members of the team by circumventing the
    blockers that prevent the team from performing at their full potential. The Scrum
    Master and the product owner are two different roles, and they should be filled
    by different individuals.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果组织正在大规模采用Scrum，所有Scrum Master都将创建社区交流如何更好地实现结果的最佳实践。Scrum Master负责通过绕过阻碍团队充分发挥潜力的障碍来促进团队成员的工作。Scrum
    Master和产品负责人是两个不同的角色，应由不同的人担任。
- en: In the next section, we'll be looking at Scrum Events.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨Scrum事件。
- en: Learning about Scrum Events
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解Scrum事件
- en: '**Scrum Events** are the institutionalized project''s recurring appointments
    that set the pace of overall implementations.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '**Scrum事件**是制度化的项目重复预约，设定了整体实施的节奏。'
- en: Scrum Events are instrumental to a project's success by providing the opportunity
    for the planning, execution, and reviewing of the work that needs to be done.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: Scrum事件通过提供规划、执行和审查需要完成的工作的机会，对于项目的成功至关重要。
- en: The basic unit of measure of this pace in Scrum is the Sprint.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在Scrum中，衡量这种节奏的基本单位是冲刺。
- en: Sprint
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 冲刺
- en: A **Sprint** in Scrum is a recurrent iteration, time-boxing a set of development
    activities. A Sprint is usually considered a mini project, with a fixed timeframe
    of 2–4 weeks. During the Sprint, there is a fixed set of goals that cannot be
    changed, and they are picked from the development team in the way they want.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: Scrum中的**冲刺**是一个重复的迭代，将一组开发活动的时间框定。冲刺通常被视为一个迷你项目，时间框架为2-4周。在冲刺期间，有一组固定的目标，不能更改，并且它们是从开发团队中选择出来的，方式是他们想要的。
- en: A Sprint is essentially used to implement Agile best practices for working iteratively
    by releasing working software often and in small batches. This is, of course,
    very useful in reducing risks. If there is a shift in priorities, or something
    else goes wrong, your biggest risk in terms of resources is to lose one Sprint's
    worth of effort.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Sprint本质上用于通过频繁地以小批量发布可工作的软件来实施敏捷的最佳实践，以迭代方式工作。这当然非常有用，可以降低风险。如果优先级发生变化，或者发生其他问题，从资源角度来看，你最大的风险是失去一个Sprint的工作量。
- en: Sprint planning
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Sprint规划
- en: '**Sprint planning** is, of course, the meeting at which the whole Scrum team
    reunites to choose what will be done during a particular Sprint. The product owner
    clarifies the priorities and the features to be implemented by looking at the
    Product Backlog. Then, in accordance with the development team (and facilitated
    by the Scrum Master), the **Sprint Goal** is defined.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '**Sprint规划**当然是一个会议，整个Scrum团队聚集在一起，选择在特定Sprint期间要完成的工作。产品负责人通过查看产品待办事项来明确优先级和要实现的功能。然后，根据开发团队（并由Scrum
    Master协助），定义**Sprint目标**。'
- en: The Sprint goal is usually one or more consistent features, representing the
    objectives for the Sprint. The Sprint goal is then defined as a set of workable
    items, picked from the Product Backlog. Those items, and the way to achieve them
    (which is the responsibility of the development team to define), constitute the
    Sprint Backlog.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: Sprint目标通常是一个或多个一致的功能，代表着Sprint的目标。Sprint目标随后被定义为一系列可工作的项目，这些项目是从产品待办事项中挑选出来的。这些项目以及实现它们的方式（这是开发团队负责定义的），构成了Sprint待办事项。
- en: Daily Scrum
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 每日Scrum
- en: The **daily Scrum** is a short meeting held every day of the Sprint by the development
    team. It's usually set up at the beginning of the workday, with a duration of
    15 minutes (this is just a rule-of-thumb time slot; it may more or less depend
    on the team size and project complexity). The Scrum Master and product owner can
    join, but the meeting is led by the development team.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '**每日Scrum**是开发团队在Sprint的每一天举行的简短会议。它通常在一天的工作开始时进行，持续时间为15分钟（这只是一个经验法则的时间段；它可能更多或更少地取决于团队规模和项目复杂性）。Scrum
    Master和产品负责人可以加入，但会议由开发团队领导。'
- en: The goal is to stick to Sprint planning. While there is no fixed agenda, it
    is usually aimed at reviewing the activities from the day before, planning activities
    for the current day, and addressing any issue that may put the Sprint goal at
    risk. Ideally, the daily Scrum should be the only sync meeting for the day, thereby
    boosting the development team's productivity. However, in the real world, it is
    not unusual for development teams to have follow-up meetings to address particularly
    complex issues.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是坚持Sprint规划。虽然没有固定的议程，但它通常旨在回顾前一天的活动，规划当天的活动，并解决可能危及Sprint目标的任何问题。理想情况下，每日Scrum应该是当天唯一的同步会议，从而提高开发团队的效率。然而，在现实世界中，开发团队为了解决特别复杂的问题而进行后续会议并不罕见。
- en: The daily Scrum is also called a *standup meeting*, a naming that is also used
    in other Agile project methodologies. The reason behind it is that (in theory)
    it should be done standing up, giving further motivation to the participants to
    make it quicker (it will be uncomfortable to stand up for an hour during a boring
    meeting) and to stay active and participate during the meeting.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 每日Scrum也被称为*站立会议*，这个名称也用于其他敏捷项目管理方法。其背后的原因是（理论上）它应该站立进行，这进一步激励参与者使其更快（在无聊的会议中站立一小时会感到不舒服）并保持活跃，在会议中参与。
- en: Sprint review
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Sprint回顾
- en: The **Sprint review** is a recurrent meeting held at the end of each Sprint.
    The entire Scrum team participates, and relevant business stakeholders are invited
    by the product owner. The development team has a demo of what was implemented
    during the Sprint, if possible. There is then a question-and-answer session to
    address doubts and discuss any issues that arose, if any.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '**Sprint回顾**是在每个Sprint结束时举行的定期会议。整个Scrum团队都参与其中，相关业务利益相关者由产品负责人邀请。如果可能的话，开发团队会对Sprint期间实施的内容进行演示。然后，有一个问答环节来解决疑问并讨论任何出现的问题。'
- en: This is also an opportunity to discuss Product Backlog based on current circumstances.
    This may also include changing priorities. Other *all hands* discussions may occur
    as well, such as budget, planning, resources, and similar topics. All those interactions
    usually provide valuable inputs for the next Sprint planning.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这也是一个根据当前情况讨论产品待办事项的机会。这也可能包括改变优先级。还可能发生其他*全员*讨论，例如预算、规划、资源和类似话题。所有这些互动通常为下一个Sprint规划提供了宝贵的输入。
- en: Sprint retrospective
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Sprint回顾
- en: The **Sprint retrospective** is a meeting lasting a few hours that takes place
    after the Sprint review and before the Sprint planning. The meeting involves the
    entire Scrum team. The goal is to focus on what went well and what needs to improve
    by looking at the previous Sprint. This meeting is usually focused more on processes,
    tools, and team interactions. This is also often used as a team-building activity.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '**Sprint回顾**是一个持续几小时的会议，在Sprint评审之后和Sprint规划之前举行。会议涉及整个Scrum团队。目标是关注通过查看上一个Sprint来关注做得好的地方和需要改进的地方。这次会议通常更关注流程、工具和团队互动。这也常被用作团队建设活动。'
- en: It's worth noticing that there is a difference between the review and the retrospective.
    The Sprint review is focused on what has been implemented (the product); it includes
    a demo, and the business stakeholders are present and an active part of it. The
    focus is then on *what* we have done. In the retrospective, the business stakeholders
    may or may not be invited, and the focus is on *how* we have done whatever we
    have done. In other words, the spotlight is on the Scrum team, the interactions,
    and the processes. We may discuss the adopted tools, the choice of frameworks,
    the architecture, or simply what we liked and didn't like about how we worked
    in our last Sprint.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，审查和回顾之间存在差异。Sprint审查关注的是已经实施的内容（产品）；它包括一个演示，业务利益相关者出席并积极参与其中。焦点是*我们做了什么*。在回顾中，业务利益相关者可能被邀请也可能不被邀请，焦点是*我们是如何做到的*。换句话说，焦点在Scrum团队、互动和流程上。我们可能会讨论采用的工具、框架的选择、架构，或者简单地讨论我们对我们上一个Sprint中工作方式的喜好和不喜欢。
- en: The Sprint retrospective meets a common goal of most Agile methodologies, which
    is continuous improvement. We will come back to this concept later when talking
    about Kaizen.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Sprint回顾符合大多数敏捷方法的一个共同目标，即持续改进。我们将在讨论Kaizen时回到这个概念。
- en: Backlog refinement
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 待办事项细化
- en: '**Backlog refinement** is usually a continuous process, more than a fixed appointment.
    The objective of refinement is reviewing items in the Product Backlog (the project''s
    to-do list; there will be more on this in the *Understanding Scrum artifacts*
    section). This is done by the product owner and the development team (or part
    of the development team). They cooperate to detail the items (basically, analyzing
    technical aspects and revisiting requisites) and refine the estimation (which
    is the responsibility of the development team).'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '**待办事项细化**通常是一个持续的过程，而不仅仅是固定的会议。细化的目标是审查产品待办事项（项目的待办清单；在*理解Scrum工件*部分将有更多介绍）。这是由产品负责人和开发团队（或开发团队的一部分）完成的。他们合作细化事项（基本上，分析技术方面和重新审视需求）并细化估算（这是开发团队的责任）。'
- en: Priority shifting may happen. Usually, the items with the highest priority (which
    are likely to happen in the next one or two Sprints) are supposed to be the clearer
    ones, while the lower-priority items are expected to be reviewed again. In practice,
    those activities are completed by the team in one or two fixed appointments per
    Sprint. Scrum suggests using less than 10% of the team's capacity in this sense.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会发生优先级转移。通常，优先级最高的项目（可能在下一个或两个Sprint中发生）应该是更清晰的，而低优先级的项目则预期会再次审查。在实践中，这些活动通常由团队在每个Sprint的一个或两个固定会议中完成。Scrum建议在这个意义上使用团队不到10%的产能。
- en: In the next section, we will be learning about Scrum artifacts.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习关于Scrum工件的内容。
- en: Understanding Scrum artifacts
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解Scrum工件
- en: '**Scrum artifacts** are tools supporting the Scrum activities. This methodology
    refers to such tools as a way to implement transparency. In this sense, those
    artifacts should be available to all the teams and the relevant stakeholders.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '**Scrum工件**是支持Scrum活动的工具。这种方法论将此类工具作为实现透明度的一种方式。在这种情况下，这些工件应该对所有团队和相关的利益相关者都可用。'
- en: While digital supports are commonly used, the use of physical items (such as
    whiteboards and sticky notes) to encourage brainstorming and in-person collaboration
    is also widespread. The work produced with physical tools should then be digitized
    for tracking and sharing purposes. Let's now see what those tools are, starting
    with the Product Backlog, followed by the Spring Backlog.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: Product Backlog
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have already referred to the **Product Backlog** a couple of times, so by
    now you probably already have an idea of what it is, more or less. In simple terms,
    the Product Backlog is the single source of truth for each thing that should happen
    in the product, meaning new features, bug fixes, and other developments (improvements,
    refactoring, and so on).
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: These are categorized, including a description, unique ID, priority, and the
    effort required. The effort is constantly evaluated and refined by the development
    team. Items in the Product Backlog may be attached to test cases and other details,
    such as mockups and more. The product owner is ultimately accountable for the
    Product Backlog.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: Since the Product Backlog is the funnel ingesting requests to be implemented
    by the development team, it can be regarded as an *infinite scroll*, meaning that
    new items will continuously be added to it. As already discussed in [*Chapter
    4*](B16354_04_Final_JM_ePUB.xhtml#_idTextAnchor089), *Best Practices for Design
    and Development*, the **User Story Mapping** technique can be considered a variation
    or evolution of the Product Backlog, adding more information and dimensions to
    it.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: Sprint Backlog
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The **Sprint Backlog** is the chunk of work to be done during each Sprint.
    It comprises the following:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: The **Sprint goal**, being the feature (sub-feature, or set of features) that
    we aim to add to the product as a result of the Sprint
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A set of items selected from the Product Backlog that need to be implemented
    in order to achieve the Sprint goal
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A plan for implementing those items during the Sprint
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That's the way to keep work structured at a consistent pace in Scrum.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: Advantages and disadvantages of Scrum
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It should be evident, at this point, that Scrum is a very well-structured methodology
    (while still being flexible and adhering to Agile principles). For this reason,
    it is so widespread, up to the point that there are professional certifications
    available and plenty of job positions for experienced Scrum professionals.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: 'The main advantages of adopting Scrum could be summarized as follows:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: The roles and responsibilities are very well defined, leaving less room for
    conflicts and misunderstandings.
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is a defined timetable and some predictable moments in which updates (and
    deliverables) are shared with the rest of the team (and made visible to management).
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's easier to do the planning (even with some expected flexibility and inaccuracy)
    and have visibility on what's completed and what is left almost constantly (also
    thanks to the concept of backlog and, in general, to the Scrum artifacts).
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 制定计划（即使有一些预期的灵活性和不准确性）并持续了解已完成的工作和剩余的工作几乎成为常态（这也得益于回溯和Scrum工件的概念）要容易得多。
- en: 'The Scrum disadvantages are similar to the ones in the other Agile and Lean
    methodologies. The following comes to mind:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: Scrum的缺点与其他敏捷和精益方法中的缺点相似。以下是一些想法：
- en: The structured process flow and events could be seen as boring and time-intensive,
    especially when working with highly experienced teams or in long-term projects.
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结构化的流程和事件可能会被视为无聊且耗时，尤其是在与经验丰富的团队或长期项目合作时。
- en: The coordination of multiple Scrum teams working on different projects may be
    complex.
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 协调多个在不同项目上工作的Scrum团队可能会很复杂。
- en: Bigger teams (with more than nine people) usually don't work well in a Scrum
    setup (hence, they should be modularized into smaller teams, and coordination
    will be a downside, as per the previous point).
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大型团队（人数超过九人）通常在Scrum设置中工作效果不佳（因此，它们应该被模块化成更小的团队，并且协调将是一个缺点，正如前一点所述）。
- en: As you have learned in this section, Scrum is a simple but disciplined way to
    structure the software development process. And due to its simplicity and effectiveness,
    it has become widespread. So, I hope the information shared in this section has
    motivated you to learn more and to apply Scrum principles to your projects.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在本节中学到的，Scrum是一种简单但纪律严明的软件开发过程结构化方法。由于其简单性和有效性，它已经得到了广泛应用。因此，我希望本节中分享的信息能够激励你进一步学习并将Scrum原则应用于你的项目。
- en: In the next section, we will see some more Agile practices that are not directly
    linked with Scrum or any other particular framework but are often used complementarily.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看到一些更多与Scrum或任何其他特定框架没有直接联系但经常互补使用的敏捷实践。
- en: Learning about other Agile practices
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解其他敏捷实践
- en: So far, we have seen the Agile methodologies and had a quick overview of the
    Lean software development principles and the Scrum framework. All of those ideas
    are often complemented by a number of practices and tools useful for completing
    specific phases.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了敏捷方法，并对精益软件开发原则和Scrum框架进行了快速概述。所有这些想法通常都辅以许多有助于完成特定阶段的做法和工具。
- en: In this section, we'll learn about some of those tools, namely, Kaizen, Planning
    Poker, Kanban boards, and Burndown charts.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解一些这些工具，即：改善、规划扑克、看板和燃尽图。
- en: Let's begin with Kaizen.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从改善开始。
- en: Kaizen
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改善
- en: '**Kaizen** is a principle directly borrowed from the Toyota Production System,
    which, as we have seen, is a core inspiration for Lean software development. *Kaizen*
    comes from the Japanese word for *continuous improvement*.'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '**改善**是一个直接从丰田生产系统借用的原则，正如我们所看到的，它是精益软件开发的核心灵感来源。*改善*这个词来自日语，意为*持续改进*。'
- en: This simple concept is the essence of Kaizen, which articulates it with a comprehensive
    and elegant philosophy, embodying the concepts of humanization of the workplace,
    constant change (the opposite of big-bang, huge transformations). It is also responsible
    for identifying and removing waste (as we discussed in the *Introducing Lean software
    development* section), encouraging valuable feedback (both internal and external),
    involving all individuals in the organization (from top managers to lower levels),
    and so on.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单概念是改善的精髓，它通过一个全面而优雅的哲学来阐述它，体现了工作场所人性化、持续变化（与大规模变革相反）的概念。它还负责识别和消除浪费（正如我们在*介绍精益软件开发*部分所讨论的），鼓励有价值的反馈（内部和外部），让组织中的所有个人（从高层管理者到基层）都参与进来，等等。
- en: Another core concept of Kaizen (again, very close to some of the Agile principles
    seen so far) is the shift in the testing process (in a broad sense, as in inspecting
    the quality of the product) from the end of production to an ongoing process,
    once again getting feedback early to minimize drift and facilitate constant optimization.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 改善的另一个核心概念（再次，与迄今为止看到的某些敏捷原则非常接近）是在测试过程中（从广义上讲，即在检查产品质量时）从生产结束时转移到持续的过程，再次尽早获取反馈以最小化偏差并促进持续优化。
- en: 'Kaizen is often orchestrated as a loop of five recurring phases:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 改善通常被编排为五个重复阶段的一个循环：
- en: '**Observe**: This phase is used to understand what issues should be solved
    (or which aspect can be improved).'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Plan**: This phase is used for setting measurable objectives for achievement.'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Do**: This phase is used for putting into practice actions to meet those
    measurable objectives.'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Check**: This phase is used for comparing actual results with expected objectives.'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Act**: This phase is used for adjusting (or complementing) the plan to enhance
    the results and start the loop again.'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following diagram illustrates these phases:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.2 – The OPDCA loop'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.02_B16354.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.2 – The OPDCA loop
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: While nicely summarized by the *continuous improvement* concept as seen, Kaizen
    contains a lot of sage advice and ideas, very close to the whole idea of Lean
    and Agile.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: Planning Poker
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Planning Poker** is an estimation technique, often used as part of the Scrum
    framework (but not a mandatory part of the framework itself). When used in Scrum,
    Planning Poker is done as part of Sprint planning to estimate (or refine the estimation
    of) the items from the Backlog.'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: Planning Poker is a way of getting an estimation of the effort of a given item,
    and it works by inciting the participant to provide a size with no influence from
    the other team members.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: Poker is played by a team of estimators (usually the development team, which
    will then implement the features), a moderator, and a responsible project participant
    (which is usually the product owner if the Scrum methodology is used, or otherwise
    someone with a knowledge of the overall project and roadmap, such as a project
    manager or other senior staff).
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: 'Each estimator team member has a deck of cards (or, commonly, a mobile app)
    used to represent a difficulty grade. There is no standard here; it is common
    to use a Fibonacci progression, but your mileage may vary. The Fibonacci sequence
    has a reasoning behind it: the more the number grows, the more distant they are
    from each other, and so your choice must be more thoughtful. Another commonly
    used unit is the t-shirt size (*S*, *M*, *L*, *XL*, and so on).'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: Also, the expressed value (being a card, a number, or a t-shirt size) may directly
    map to time (as in days to implement) or not.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: When the meeting starts, the moderator acts as a note-taker and master of ceremonies.
    They read each feature to estimate and start a discussion to clarify the meaning
    by including estimators and the product owner. Then, the estimators select a unit
    (by drawing a card, picking a number, or a size) simultaneously (to avoid influencing
    each other), indicating the estimated difficulty. If there is no consensus, the
    owner of the highest and lowest estimation has to explain their point of view.
    Then, everybody again draws a card until a consensus is reached. Consensus rules
    can be customized, such as having a defined maximum gap from a perfect average
    or having team members that will own that development to agree on what's an acceptable
    stop.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: Kanban board
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A **Kanban board**, in the software development world, is a visual way to represent
    the flow of items, from the ingestion to the development team to the implementation.
    It is a subset of the **Value Stream Map** (as seen in the *Introducing Lean software
    development* section). Kanban is indeed inspired by, and adapted from, the Toyota
    Production System.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: 'In its simplistic implementation, a Kanban board is a whiteboard (physical
    or digital), with three vertical swim lanes splitting it into **TO DO**, **DOING**,
    and **DONE**. Each item is represented as a sticky note moving between those lanes.
    However, it is common to customize it by adding different columns (such as splitting
    **DOING** into **Design**, **Code**, and **Test**), or horizontal swim lanes (to
    represent concepts such as priority by having a kind of fast lane for urgent things
    such as production issues). The following diagram illustrates this:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.3 – A Kanban Board'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.03_B16354.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.3 – A Kanban board
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: Kanban boards are just an artifact part of a bigger philosophy (Kanban), which
    is applied both to software development and industrial production (as Lean).
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: While describing the entire philosophy is beyond the scope of this book, there
    are at least a couple of concepts worth mentioning. The first is **Work In Progress**
    (**WIP**). This is the number of open items that the team is working on. WIP is
    easily tracked and visualized on the board. As per the Lean methodology, Kanban
    advises against using context switching; hence, a constraint on WIP should be
    present at any time.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: Another important concept is **pull**. Basically, the Kanban approach puts the
    working items at disposal of the development team (in the **TO DO** column). As
    opposed to the push paradigm, the team chooses (pulls) what to do at their own
    pace. This avoids hogging the team and maximizes throughput.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: Burndown chart
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A **Burndown chart** is a common artifact (physical or digital) to clearly show
    a project's progression. It is very useful, regardless of which Agile methodology
    is used, because it gives real-time insights into planning. As has been mentioned,
    Agile is against detailed, advanced planning, so having a current snapshot of
    the project's progression (and maybe some forecasting) is precious for management.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: 'A Burndown chart plots the tasks (usually as a sum of the required effort)
    as the vertical axis and the timeline as the horizontal axis. Drawing a line from
    the top left (project start) to the bottom right (project completion) provides
    an ideal, linear progression. At regular times (such as every day, or at the end
    of each Scrum Sprint), a dot is plotted that crosses the implemented tasks and
    the current moment in time. The following diagram is an example of a Burndown
    chart:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.4 – A Burndown chart'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.04_B16354.jpg)'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.4 – A Burndown chart
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, by drawing a line over those dots, you can compare the ideal
    project progression versus the actual project's progression. Roughly speaking,
    if the real project progression is above the ideal one, you are probably late,
    whereas if it's below, you are ahead. Having minimal deviations from the ideal
    progression means staying on track, and it's usually a good indicator of a project's
    health. Also, it gives good hints on when the project (or, at least, the represented
    list of tasks) will be completed.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we have seen a nice list of tools that can provide you with
    support in Agile software development. Regardless of the methodology you are using,
    if any, such tools can be useful in addressing common use cases, such as optimizing
    processes and estimating development effort.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will talk about a very hot and debated topic, which
    seems to be getting all the attention lately – DevOps.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: Understanding DevOps and its siblings
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the time of writing, **DevOps** is an overinflated term. It is seen as a
    silver bullet for every development problem, and a mandatory prerequisite for
    being considered cool. I'm not going to decrease the hype about DevOps, as I truly
    believe it's a precious technique useful for ensuring functional and high-performing
    teams. However, it must be said that DevOps is more a set of best practices, rather
    than a well-codified, magic recipe. And, as is common in these cases, one size
    does not fit all.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: DevOps can be seen as essentially an extension of Agile methodologies. Indeed,
    the adoption of Agile practices (not one specifically) can be seen as a prerequisite
    of DevOps. And, in turn, DevOps is considered to be an essential condition for
    the adoption of cutting-edge approaches such as **microservices** (more on this
    in [*Chapter 9*](B16354_09_Final_JM_ePUB.xhtml#_idTextAnchor230), *Designing Cloud-Native
    Architectures*).
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: The essential characteristic of DevOps is cooperation between different roles.
    This commonly means, in practical terms, a small team, encompassing all the different
    skills needed to build and maintain a software product in production.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will cover some core aspects of the DevOps movement, such
    as team composition, roles and responsibilities, and variants of DevOps, which
    are about including more functions in this collaboration method. But let's start
    with a common consideration covered in DevOps regarding team size.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: DevOps team size
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When it comes to team size, the Scrum guide says that a team should be small
    enough to stay lean but large enough to develop a reasonable number of features
    in each Sprint. A common rule of thumb is to have a team of around 10 or fewer
    people.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: This rule of thumb is commonly accepted and has echoes in other stories, such
    as the famous two pizzas team, which states that it should be possible to feed
    the team with two large pizzas (so, again, roughly fewer than 10 people).
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: This depends on the logic of links. In a functional team, each team member should
    have a link with the others. This means that in a team of 10 people, you will
    have 90 links. That's the reason why the team should not grow much above 10, or
    else you will have too many internal interactions to manage, which quickly impacts
    productivity.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: '*But what about the internal team''s responsibility?*'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: Roles and responsibilities in a DevOps team
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As is obvious from the name, DevOps aims at blurring the responsibilities between
    developers and operations. This does not mean that everybody should be capable
    of doing everything; it is more about having a shared goal.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: One of the most hateful dynamics in IT teams is the lack of accountability in
    case of issues.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: The most commonly involved teams are Ops, who are the operations and system
    engineers responsible for the infrastructure (and for the uptime of production
    systems), and Devs, which are, well, the developers, of course.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: Ops will always blame Devs' buggy code when something goes wrong in production,
    and Devs will throw code at Ops for releasing without caring about the release
    outcome, to the battle cry of *works on my machine*.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: While these dynamics are purposefully exaggerated, you can agree that the relationship
    between Devs and Ops is not always the best. DevOps starts here. Everybody is
    accountable for production – *you build it, you run it*.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: This means that the team (and the individuals) must shift from a skill perspective
    (I'm a specialist only accountable for my limited piece) to a product perspective
    (my first responsibility is to have a fully functional product in production,
    and I will use my skills for this goal). The goal of this is to build high-quality
    products (everybody is committed to a fully functional production service) in
    less time (you eliminate handovers between different departments).
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: 'Taking apart the philosophy and motivations behind DevOps, there are some direct
    technological impacts, which can be seen both as a prerequisite and fundamental
    benefit of adopting DevOps:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: '**Pervasive automation**, also known as **infrastructure as code**: Everything,
    including environment definitions, should be declarative, versioned (usually in
    a code versioning system such as **Git**), and repeatable. This avoids drifting
    (environments strictly adhere to the expected configurations) and reduces the
    time for recovering from failures (it''s easy to spin up new copies of the environment).
    This is something usually driven by the team members with prevalent Ops skills.
    It is common, in this regard, to see a shift toward **Site reliability engineering**
    practices, meaning that Ops will intentionally use an increasing part of their
    time to develop automation and other production support tools, instead of doing
    exclusively production-related tasks (even manually).'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Shifting quality into software development**: This means embedding all the
    feedback coming from production exposure into software development. This often
    means increasing observability (to support troubleshooting and performance tuning
    in production), improving code testing (to reduce the defects found in production),
    and everything that''s necessary for safer, high-quality production releases (such
    as automated rollbacks in case of failures, supporting auto-scaling, and modularizing
    releases).'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is now safe to try to extend this philosophy beyond Devs and Ops.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: Devs, Ops, and more
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is natural to try to extend such good practices, such as borderless collaboration
    (breaking silos) and tooling support (automating everything) beyond development
    and operations.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: '**DevSecOps** is a clear example of that. This is all about shifting security
    concerns into all phases of product development. This means, of course, integrating
    security specialists in the DevOps team. Very often, the approach to security
    is to run specific tests against the finished product soon before (or shortly
    after) the production release. The result is that, often, it''s too late and maybe
    you don''t have the time (or it''s costly) to fix the security findings.'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: At the opposite end, DevSecOps impacts the production process in several ways.
    The first is to embed best practices in the development of code, then to automate
    testing against security principles and rules, and lastly, continuously check
    compliance with those principles as part of production operation practices. This
    extension is particularly well accepted in highly regulated environments (such
    as banks, government institutions, and healthcare), and it has a positive impact
    in terms of the time to market and overall security.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: '**BizDevOps** is another variant, breaking another wall and making business
    owners (analysts, budget owners, and even marketing) part of the team. The collaboration
    model used here is less structured than with Devs and Ops (and security, if you
    want), since some of the activities are not perfectly overlapped, nor comprehensible
    between technicians and business people.'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: However, if you think about it, Agile methodologies (and DevOps, by extension)
    inherently encourage cooperation with business by emphasizing short and frequent
    feedback loops, and openness to changes in the product life cycle. What's probably
    a distinct characteristic of BizDevOps is the crossed visibility on KPIs.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: This includes the technical team having insights into business KPIs (things
    such as budget, the number of users, sales trends, and more) in order to try to
    figure out how technical choices (new releases, changes in the infrastructure,
    and resource efficiency) impact on it. And it's also true the other way around;
    that is, the business team could have a look at the technical teams' *tuning wheels*
    (the size of the team, resources, and the number of changes) and how they impact
    the end-to-end process, in terms of development speed, costs, and so on.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, **NoOps** is a trending topic, gaining visibility as a result of the
    assonance with DevOps. As it's easy to imagine, the idea here is to get rid of
    the Operations team completely. While it is theoretically possible, as a result
    of using heavily automated environments such as **Platform as a Service** and
    **Cloud** (there is more on this in [*Chapter 9*](B16354_09_Final_JM_ePUB.xhtml#_idTextAnchor230),
    *Designing Cloud-Native Architectures*), to have developers capable of basic Ops
    tasks, such as the provisioning of new environments and deployments, *I strongly
    believe NoOps is a dead end (at least for the foreseeable future)*. It can be
    applied when reducing Ops resources in small contexts (such as serverless applications;
    this topic will be discussed in [*Chapter 9*](B16354_09_Final_JM_ePUB.xhtml#_idTextAnchor230),
    *Designing Cloud-Native Architectures*), but this seems more like outsourcing.
    You basically do not need to care about the infrastructure because someone else
    is taking care of it for you (a cloud provider, or maybe another department).
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: Personally, I feel such an approach is completely the opposite of DevOps. You
    will end up having a huge gap between platform users (Devs) and the team running
    the infrastructure (Ops, which are indeed not even part of the project).
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: DevOps and the bigger organization
  id: totrans-268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A model that is commonly seen as a large-scale implementation of DevOps is the
    **Spotify** development model, which is famous because it has been created and
    used in the homonym company building the music streaming app.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: Even though, in their seminal work, theorized in a publicly available paper
    entitled *Scaling Agile @ Spotify*, there is no mention of the word *DevOps*,
    you can recognize some common principles.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: You will find the link to the full paper in the *Further reading* section. For
    now, it's enough to consider that DevOps must solve the conflicting needs of having
    a multidisciplinary team focused on delivery (and production quality) with knowledge
    and best practice sharing. In the Spotify model, this is resolved with a matrix
    organization, in which individuals belong to one team (so-called *squads* and
    *tribes*) with product-delivery purposes but share interests with people of the
    same skills (such as DBAs or frontend developers) for knowledge sharing and personal
    growth purposes (in the so-called *chapters* and *guilds*).
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: The Spotify model suggests a number of other mechanisms for boosting collaboration.
    It's an interesting point of view and gives some practical advice. However, considering
    that every organization is different, and has different challenges and strengths,
    so the first piece of advice is flexibility. No model will simply work out of
    the box; you have to look at the company's objectives and people skills and keep
    adapting to changing conditions.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: Pros and cons of DevOps
  id: totrans-273
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We anticipated some impacts of DevOps, both in positive and negative ways,
    in the previous sections. However, to summarize, here are some advantages of adopting
    a DevOps model:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: It's a high-performance methodology, meaning that, when working properly, it
    enables us to deliver high-quality software frequently. Hence, it's rapidly responding
    to changing conditions, such as new requirements or production issues.
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It copes well (and often is seen as a requirement) with modern architectures,
    such as cloud-based and microservices applications.
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's challenging and rewarding for team members, meaning that there is a lot
    of room for learning, as each team member can easily enrich his/her skills and
    responsibilities.
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The disadvantages can be summarized as follows:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: It's a huge paradigm shift and can be hard to accept for more traditional organizations,
    as it requires many people to get out of their comfort zone and start thinking
    about their role in a different way (stretching everybody's responsibilities).
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It may be difficult to map from an organizational point of view, as it will
    require breaking the traditional silos and setting up cross-department, product-oriented
    teams.
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It requires highly skilled and motivated team members. It may be stressful in
    the long term.
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With this section, we have completed our overview of DevOps.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: We have seen what the founding principles of such a methodology are and why
    it claims to boost efficiency, along with some of the variants, such as DevSecOps.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will have a look at some examples and case studies.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: Case studies and examples
  id: totrans-285
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will model an ideal Product Backlog in the Scrum way, applied
    to our mobile payments example.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: 'The official Scrum guide does not provide any example of a Product Backlog,
    and there are no standards as regards the fields that should be included. Based
    on my personal experience, a Product Backlog should look like this:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.5 – Mobile payments Product Backlog'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.05_B16354.jpg)'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.5 – Mobile payments Product Backlog
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: 'This is, of course, just a small subset, but several considerations can be
    made:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: '**Items are identified by ID and DESCRIPTION**: Most likely, **ID** will link
    to a detailed requirements document or at least a more detailed description. Also,
    every item is likely categorized as part of a bigger user **STORY**. As discussed
    previously, User Story Mapping is a different way to visualize this kind of relationship.'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Items are categorized**: Usually, at least features and fixes are categorized,
    while more types, such as enhancements and technical terms (for things such as
    refactoring and other internal tasks), may be used.'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dependencies**: This is a way to help choose items through the links to other
    items.'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Effort**: This is something that may be roughly evaluated when adding items
    to the backlog. However, this is likely to change over time when more details
    will be known.'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can see some similarities with the requirements template seen in [*Chapter
    2*](B16354_02_Final_JM_ePUB.xhtml#_idTextAnchor034), *Software Requirements –
    Collecting, Documenting, Managing*, and indeed the goals are similar. However,
    a different level of detail is evident, as those two artifacts have different
    goals in the project cycle.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: With this simple example, we have covered all the topics relevant to this chapter.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-298
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have seen a complete overview of the development models.
    Starting with the more traditional approaches, such as Code and Fix and Waterfall,
    we then moved to the core of the chapter, focusing on Agile.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: As we have seen, Agile is a broad term, including more structured frameworks
    (such as Scrum) and other tools and best practices (such as Lean and some other
    techniques, such as Kanban), which can be mixed and matched to better suit the
    needs of other projects. As a last big topic, we discussed DevOps (and some extensions
    of it). While not being a well-codified practice, the huge potential of this approach
    is clear, which is now seeing widespread adoption in many innovative projects.
    DevOps, indeed, is the prerequisite for some advanced architectures that we will
    see in the forthcoming chapters, such as microservices.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will focus on Java architectural patterns. We will cover
    some essential topics, including multi-tier architectures, encapsulation, and
    practical tips regarding performance and scalability.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-302
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*The pros and cons of Waterfall Software Development* ([https://www.dcsl.com/pros-cons-waterfall-software-development/](https://www.dcsl.com/pros-cons-waterfall-software-development/)),
    DCSL GuideSmiths'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*The Waterfall Model: Advantages, disadvantages, and when you should use it*
    ([https://developer.ibm.com/articles/waterfall-model-advantages-disadvantages/](https://developer.ibm.com/articles/waterfall-model-advantages-disadvantages/)),
    by Aiden Gallagher, Jack Dunleavy, and Peter Reeves'
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*The Waterfall model: Advantages and disadvantages* ([https://www.blocshop.io/blog/waterfall-advantages-disadvantages/](https://www.blocshop.io/blog/waterfall-advantages-disadvantages/)),
    Blocshop'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Agile Manifesto ([https://agilemanifesto.org](https://agilemanifesto.org)),
    by Kent Beck, Mike Beedle, Arie van Bennekum, Alistair Cockburn, Ward Cunningham,
    Martin Fowler, James Grenning, Jim Highsmith, Andrew Hunt, Ron Jeffries, Jon Kern,
    Brian Marick, Robert C. Martin, Steve Mellor, Ken Schwaber, Jeff Sutherland, and
    Dave Thomas
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Lean Software Development: An Agile Toolkit*, *Mary Poppendieck and Tom Poppendieck*,
    *Pearson Education* (2003)'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Implementing Lean Software Development: From Concept to Cash*, *Mary and Tom
    Poppendieck*, *Pearson Education* (2006)'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Lean Software Development in Action*, *Andrea Janes and Giancarlo Succi*,
    *Springer Berlin Heidelberg* (2014)'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Agile Metrics in Action: How to measure and improve team performance*, *Christopher
    Davis*, *Manning Publications* (2015)'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*The Surprising Power of Online Experiments* ([https://hbr.org/2017/09/the-surprising-power-of-online-experiments](https://hbr.org/2017/09/the-surprising-power-of-online-experiments)),
    by Ron Kohavi and Stefan Thomke'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*The Art of Lean Software Development*, *Curt Hibbs, Steve Jewett, and Mike
    Sullivan*, *O''Reilly Media* (2009).'
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Scrum guide ([https://www.scrumguides.org](https://www.scrumguides.org)),
    by Jeff Sutherland and Ken Schwaber
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Scrum: The Art of Doing Twice the Work in Half the Time*, *Jeff Sutherland*,
    *Random House* (2014)'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*9 retrospective techniques that won''t bore your team to death* ([https://www.atlassian.com/blog/teamwork/revitalize-retrospectives-fresh-techniques](https://www.atlassian.com/blog/teamwork/revitalize-retrospectives-fresh-techniques)),
    by Sarah Goff-Dupont'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*6 Effective Sprint Retrospective Techniques* ([https://www.parabol.co/resources/agile-sprint-retrospective-ideas](https://www.parabol.co/resources/agile-sprint-retrospective-ideas)),
    Parabol'
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*DevOpsCulture* ([https://martinfowler.com/bliki/DevOpsCulture.html](https://martinfowler.com/bliki/DevOpsCulture.html)),
    by Rouan Wilsenach'
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Scaling Agile @ Spotify with Tribes, Squads, Chapters & Guilds* ([https://blog.crisp.se/wp-content/uploads/2012/11/SpotifyScaling.pdf](https://blog.crisp.se/wp-content/uploads/2012/11/SpotifyScaling.pdf)),
    by Henrik Kniberg and Anders Ivarsson'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Create Your Successful Agile Project: Collaborate, Measure, Estimate, Deliver*,
    *Johanna Rothman*, *Pragmatic Bookshelf* (2017)'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Operations Anti-Patterns, DevOps Solutions*, *Jeffery D. Smith*, *Manning
    Publications* (2020)'
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
