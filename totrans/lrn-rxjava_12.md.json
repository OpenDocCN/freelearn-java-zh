["```java\nbuildscript {\n     ext.kotlin_version = '<version to use>'\n\n     repositories {\n         mavenCentral()\n     }\n\n     dependencies {\n         classpath \"org.jetbrains.kotlin:kotlin-gradle- \n         plugin:$kotlin_version\"\n     }\n }\n```", "```java\napply plugin: \"kotlin\"\n\n sourceSets {\n     main.kotlin.srcDirs += 'src/main/kotlin'\n }\n```", "```java\n <properties>\n     <kotlin.version>1.1.2-2</kotlin.version>\n </properties>\n\n <dependencies>\n     <dependency>\n         <groupId>org.jetbrains.kotlin</groupId>\n         <artifactId>kotlin-stdlib</artifactId>\n         <version>${kotlin.version}</version>\n     </dependency>\n </dependencies>\n```", "```java\n<build>\n     <sourceDirectory>${project.basedir}/src/main/kotlin</sourceDirectory>\n     <testSourceDirectory>${project.basedir}/src/test/kotlin</testSourceDirectory>\n     <plugins>\n         <plugin>\n             <artifactId>kotlin-maven-plugin</artifactId>\n             <groupId>org.jetbrains.kotlin</groupId>\n             <version>${kotlin.version}</version>\n\n             <executions>\n                 <execution>\n                     <id>compile</id>\n                     <goals> <goal>compile</goal> </goals>\n                 </execution>\n\n                 <execution>\n                     <id>test-compile</id>\n                     <goals> <goal>test-compile</goal> </goals>\n                 </execution>\n             </executions>\n         </plugin>\n     </plugins>\n </build>\n```", "```java\n compile 'io.reactivex.rxjava2:rxjava:2.1.0'\n compile 'io.reactivex.rxjava2:rxkotlin:2.0.2'\n```", "```java\n<dependency>\n     <groupId>io.reactivex.rxjava2</groupId>\n     <artifactId>rxjava</artifactId>\n     <version>2.1.0</version>\n </dependency>\n <dependency>\n     <groupId>io.reactivex.rxjava2</groupId>\n     <artifactId>rxkotlin</artifactId>\n     <version>2.0.2</version>\n </dependency>\n```", "```java\nfun main(args: Array<String>) {\n     val myInt: Int = 5\n     val myString: String = \"Alpha\"\n\n     println(\"myInt=$myInt and myString=$myString\")\n }\n```", "```java\nmyInt=5 and myString=Alpha\n```", "```java\nfun main(args: Array<String>) {\n     val myInt = 5 *//infers type as `Int`*\n     val myString = \"Alpha\" *//infers type as `String`*\n\n     println(\"myInt=$myInt and myString=$myString\")\n }\n```", "```java\n import java.time.LocalDate\n import java.time.temporal.ChronoUnit\n\n fun main(args: Array<String>) {\n     val startDate = LocalDate.of(2017,5,1)\n     val endDate = LocalDate.of(2017,5,11)\n\n     val daysBetween = startDate.numberOfDaysTo(endDate)\n\n     println(daysBetween)\n }\n\n fun LocalDate.numberOfDaysTo(otherLocalDate: LocalDate): Long {\n     return ChronoUnit.DAYS.between(this, otherLocalDate)\n }\n```", "```java\n10\n```", "```java\nfun LocalDate.numberOfDaysTo(otherLocalDate: LocalDate) =\n         ChronoUnit.DAYS.between(this, otherLocalDate)\n```", "```java\n import io.reactivex.Observable\n\n fun main(args: Array<String>) {\n\n     Observable.just(\"Alpha\", \"Beta\", \"Gama\", \"Delta\", \"Epsilon\")\n             .map { s: String -> s.length }\n             .subscribe { i: Int -> println(i) }\n }\n```", "```java\n 5\n 4\n 4\n 5\n 7\n```", "```java\n import io.reactivex.Observable\n\n fun main(args: Array<String>) {\n\n     Observable.just(\"Alpha\", \"Beta\", \"Gama\", \"Delta\", \"Epsilon\")\n             .map( { s: String -> s.length } )\n             .subscribe( { i: Int -> println(i) } )\n }\n```", "```java\n import io.reactivex.Observable\n\n fun main(args: Array<String>) {\n\n     Observable.just(\"Alpha\", \"Beta\", \"Gama\", \"Delta\", \"Epsilon\")\n             .map { s -> s.length }\n             .subscribe { i -> println(i) }\n }\n```", "```java\n import io.reactivex.Observable\n\n fun main(args: Array<String>) {\n\n     Observable.just(\"Alpha\", \"Beta\", \"Gama\", \"Delta\", \"Epsilon\")\n             .map { it.length }\n             .subscribe { println(it) }\n }\n```", "```java\n import io.reactivex.Observable\n\n fun main(args: Array<String>) {\n\n     Observable.just(\"Alpha\", \"Beta\", \"Gama\", \"Delta\", \"Epsilon\")\n             .map(String::length)\n             .subscribe(::println)\n }\n```", "```java\nimport io.reactivex.Observable\n\nfun main(args: Array<String>) {\n\n     Observable.just(\"Alpha\", \"Beta\", \"Gama\", \"Delta\", \"Epsilon\")\n             .map { s: String -> s.length }\n             .scan(0) { total, next -> total + next }\n             .subscribe {\n                 println(\"Rolling sum of String lengths is $it\")\n             }\n }\n```", "```java\nimport io.reactivex.Observable\n\nfun main(args: Array<String>) {\n\n     val source = Observable.just(\"Alpha\", \"Beta\", \"Gama\", \"Delta\",\n    \"Epsilon\")\n\n     val asSet = source.toSet()\n\n }\n\n fun <T> Observable<T>.toSet() =\n         collect({ HashSet<T>() }, { set, next -> set.add(next) })\n         .map { it as Set<T> }\n```", "```java\nimport io.reactivex.Observable\n\nfun main(args: Array<String>) {\n\n     val source = Observable.just(100, 50, 250, 150)\n\n     val total = source.sum()\n }\n\n fun Observable<Int>.sum() =\n       reduce(0) { total, next -> total + next }\n```", "```java\nimport io.reactivex.rxkotlin.toObservable\n\nfun main(args: Array<String>) {\n\n     val myList = listOf(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \n     \"Epsilon\")\n\n     myList.toObservable()\n             .map(String::length)\n             .subscribe(::println)\n }\n```", "```java\nimport io.reactivex.Observable\n\nfun main(args: Array<String>) {\n\n     val strings = Observable.just(\"Alpha\", \"Beta\", \"Gamma\",\n     \"Delta\")\n     val numbers = Observable.range(1,4)\n\n     *//compile error, can't infer parameters*\n     val zipped = Observable.zip(strings, numbers) { s,n -> \"$s $n\" }\n\n     zipped.subscribe(::println)\n }\n```", "```java\n import io.reactivex.Observable\n import io.reactivex.functions.BiFunction\n\n fun main(args: Array<String>) {\n\n     val strings = Observable.just(\"Alpha\", \"Beta\", \"Gamma\",\n     \"Delta\")\n     val numbers = Observable.range(1,4)\n\n     val zipped = Observable.zip(strings, numbers,\n             BiFunction<String,Int,String> { s,n -> \"$s $n\" }\n     )\n\n     zipped.subscribe(::println)\n }\n```", "```java\n import io.reactivex.Observable\n import io.reactivex.rxkotlin.Observables\n\n fun main(args: Array<String>) {\n\n     val strings = Observable.just(\"Alpha\", \"Beta\", \"Gamma\",\n     \"Delta\")\n     val numbers = Observable.range(1,4)\n\n     val zipped = Observables.zip(strings, numbers) { s, n -> \"$s $n\" }\n\n     zipped.subscribe(::println)\n }\n```", "```java\n import io.reactivex.Observable\n import io.reactivex.rxkotlin.zipWith\n\n fun main(args: Array<String>) {\n\n     val strings = Observable.just(\"Alpha\", \"Beta\", \"Gamma\",\n     \"Delta\")\n     val numbers = Observable.range(1,4)\n\n     val zipped = strings.zipWith(numbers) { s, n -> \"$s $n\" }\n\n     zipped.subscribe(::println)\n }\n```", "```java\n import io.reactivex.Observable\n import io.reactivex.rxkotlin.subscribeBy\n\n fun main(args: Array<String>) {\n\n     Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Epsilon\")\n             .count()\n             .subscribeBy { println(\"There are $it items\") }\n }\n```", "```java\nfun main(args: Array<String>) {\n\n     val str = \"GAMMA\"\n\n     val lowerCaseWithReversed = str.toLowerCase().let { it + \" \" +\n     it.reversed() }\n\n     println(lowerCaseWithReversed)\n }\n```", "```java\ngamma ammag\n```", "```java\n import io.reactivex.Observable\n import io.reactivex.rxkotlin.subscribeBy\n import io.reactivex.rxkotlin.zipWith\n\n fun main(args: Array<String>) {\n\n     val numbers =\n             Observable.just(180.0, 160.0, 140.0, 100.0, 120.0)\n\n     val average = numbers.publish()\n             .autoConnect(2)\n             .let {\n                 val sum = it.reduce(0.0) { total, next -> total +\n                 next}\n                 val count = it.count()\n\n                 sum.zipWith(count) { s, c -> s / c }\n             }\n\n     average.subscribeBy(::println)\n }\n```", "```java\n140.0\n```", "```java\nfun main(args: Array<String>) {\n\n     val myItem = MyItem().apply {\n         startProcess()\n     }\n\n }\n\n class MyItem {\n\n     fun startProcess() = println(\"Starting Process!\")\n }\n```", "```java\nStarting Process!\n```", "```java\n import io.reactivex.Observable\n import io.reactivex.subjects.PublishSubject\n import java.util.concurrent.TimeUnit\n\n fun main(args: Array<String>) {\n\n     val statusObserver = PublishSubject.create<Long>()\n     statusObserver.subscribe { println(\"Status Observer: $it\") }\n\n     Observable.interval(1, TimeUnit.SECONDS)\n             .take(5)\n             .publish()\n             .autoConnect(2)\n             .apply {\n                 subscribe(statusObserver)\n             }\n             .map { it * 100 }\n             .subscribe {\n                 println(\"Main Observer: $it\")\n             }\n\n     Thread.sleep(7000)\n }\n```", "```java\n Status Observer: 0\n Main Observer: 0\n Status Observer: 1\n Main Observer: 100\n Status Observer: 2\n Main Observer: 200\n Status Observer: 3\n Main Observer: 300\n Status Observer: 4\n Main Observer: 400\n```", "```java\nimport io.reactivex.Observable\nimport io.reactivex.rxkotlin.Observables\n\n fun main(args: Array<String>) {\n\n     val strings = Observable.just(\"Alpha\", \"Beta\", \"Gamma\",\n     \"Delta\")\n     val numbers = Observable.range(1,4)\n\n     *//Emits Pair<String,Int>*\n     Observables.zip(strings, numbers) { s, n -> s to n }\n             .subscribe {\n                 println(it)\n             }\n }\n```", "```java\n (Alpha, 1)\n (Beta, 2)\n (Gamma, 3)\n (Delta, 4)\n```", "```java\n import io.reactivex.Observable\n import io.reactivex.rxkotlin.Observables\n\n fun main(args: Array<String>) {\n\n     val strings = Observable.just(\"Alpha\", \"Beta\", \"Gamma\",\n     \"Delta\")\n     val numbers = Observable.range(1,4)\n\n     data class StringAndNumber(val myString: String, val myNumber: Int)\n\n     Observables.zip(strings, numbers) { s, n -> StringAndNumber(s,n) }\n             .subscribe {\n                 println(it)\n             }\n }\n```", "```java\n StringAndNumber(myString=Alpha, myNumber=1)\n StringAndNumber(myString=Beta, myNumber=2)\n StringAndNumber(myString=Gamma, myNumber=3)\n StringAndNumber(myString=Delta, myNumber=4)\n```"]