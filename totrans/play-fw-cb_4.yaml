- en: Chapter 4. Creating and Using Web APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a `POST` API endpoint
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a `GET` API endpoint
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a `PUT` API endpoint
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a `DELETE` API endpoint
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing API endpoints with HTTP basic authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consuming external web APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Twitter API with OAuth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will look into creating REST APIs and interfacing with other
    external web-based APIs, in our case, the Twitter API.
  prefs: []
  type: TYPE_NORMAL
- en: With the increasing popularity of data exchanges between independent web services,
    REST APIs have become a popular approach not only to consume external data, but
    also to receive incoming data for further processing and persistence as well as
    exposing data to authorized clients. Based on the RESTful API spec, the HTTP method
    `POST` is used to insert new records and the HTTP method `GET` is used to retrieve
    data. The HTTP method `PUT` is used to update existing records and lastly, the
    HTTP method `DELETE` is used to remove records.
  prefs: []
  type: TYPE_NORMAL
- en: We will see how we can utilize different Play 2.0 libraries to build our own
    REST API endpoints and access other web-based APIs using the new Play WS library.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a POST API endpoint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will explore how to use Play 2.0 to create a RESTful `POST`
    endpoint to add new records to our API.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For Java, we need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `foo_java` application with Hot-Reloading enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new products controller in `foo_java/app/controllers/Products.java`
    with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a product model class in `foo_java/app/models/Product.java`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new route entry for the newly added action in `foo_java/conf/routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Request the new route and examine the response body to confirm:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Scala, we need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `foo_scala` application with Hot-Reloading enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new products controller in `foo_scala/app/controllers/Products.scala`
    with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a product model class in `foo_scala/app/models/Product.scala`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new route entry for the newly added action in `foo_scala/conf/routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Request the new route and examine the response body to confirm:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we implemented a RESTful `POST` request using Play 2.0\. The
    first step was to create our controller and model classes. For the model class,
    we declared two basic fields for a product. We annotated them as required fields.
    This allows Play to validate these two fields when a product is bound to a request
    body.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'As for a Scala equivalent of enforcing required request parameters, we declare
    optional parameters using the `scala.Option` class. In this recipe though, to
    keep the Java and Scala recipes consistent, it will be unnecessary to use `scala.Option`
    and we will enforce required fields in our case class like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We then created an action method that will handle the product `POST` request
    in the controller class. We ensure that there aren''t any validation errors encountered
    by the `play.data.Form` object during data binding; however, if it does encounter
    an issue, it will return an HTTP Status 400 wrapped by the `badRequest()` helper:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'If no errors are encountered, we proceed to persisting our new product and
    returning an HTTP Status 201 wrapped by the `created()` helper:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We then declared our new `POST` route in the `conf/routes` file. Finally, we
    used the command-line tool, `curl`, to simulate the HTTP `POST` request to test
    our route. To verify that our endpoint does execute the `POST` form field validations,
    omit the title parameter from the previous `curl` command and you will see the
    appropriate error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Creating a GET API endpoint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we will create the RESTful `GET` endpoint, which will return
    a collection of JSON objects.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For Java, we need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `foo_java` application with Hot-Reloading enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the products controller in `foo_java/app/controllers/Products.java`
    by adding the following action method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new route entry for the newly added action in `foo_java/conf/routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Request the new route and examine the response headers to confirm our modifications
    to the HTTP response header:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Scala, we need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `foo_scala` application with Hot-Reloading enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the product controller in `foo_scala/app/controllers/Products.scala`
    by adding the following action method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new route entry for the newly added action in `foo_scala/conf/routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Request our new route and examine the response headers to confirm our modifications
    to the HTTP response header:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we implemented an API endpoint that returns a listing of product
    records. We were able to implement this by declaring a new action method that
    retrieves records from our data store, converts objects to JSON, and returns a
    JSON collection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: We then declared a new route entry for the `GET` endpoint and used `curl` to
    verify the endpoints' functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'The endpoint will return an empty JSON array in the case of an empty data store:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Creating a PUT API endpoint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will implement a RESTful `PUT` API endpoint using Play 2.0
    to update an existing record in our data store.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For Java, we need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `foo_java` application with Hot-Reloading enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify `foo_java/app/controllers/Products.java` by adding the following action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new route for the newly added action in `foo_java/conf/routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using `curl`, we will update an existing product in our data store:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Scala, we need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `foo_scala` application with Hot-Reloading enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify `foo_scala/app/controllers/Products.scala` by adding the following action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new route for the newly added action in `foo_scala/conf/routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using `curl`, we will update an existing product in our data store:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we created a new URL route and action that will update an existing
    record in our data store. We added a new action to the products controller class
    and declared a new route for it in `conf/routes`. In our `edit` action, we declared
    that the action is to expect a request body in JSON format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'We check whether the ID value that is passed is valid by doing a lookup in
    our data store. We send an HTTP status 404 for invalid IDs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'We also check for any form validation errors and will return the appropriate
    status code in the event of errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we used `curl` to test the new product `PUT` action. We can further
    validate the `PUT` endpoint by testing how it handles invalid IDs and and invalid
    request bodies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Creating a DELETE API endpoint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will implement a RESTful `DELETE` API endpoint to remove
    a record from our data store.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For Java, we need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `foo_java` application with Hot-Reloading enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify `foo_java/app/controllers/Products.java` by adding the following action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new route for the newly added action in `foo_java/conf/routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using `curl`, remove an existing record, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Scala, we need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `foo_scala` application with Hot-Reloading enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify `foo_scala/app/controllers/Products.scala` by adding the following action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new route for the newly added action in `foo_scala/conf/routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using `curl`, remove an existing record as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we created a new URL route and action that is used to remove
    an existing product record. We declared the `delete` action to look up the record
    by the ID parameter passed in. We ensure that the the appropriate HTTP status
    code is returned in the event of an invalid ID, in this case, HTTP status code
    404:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'We then ensure that the appropriate HTTP status code for successful record
    removal is returned, in this case, HTTP status code 204:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also test the `DELETE` endpoint and verify that it handles invalid IDs
    correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Securing API endpoints with HTTP basic authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will explore how to secure API endpoints using the HTTP basic
    authentication scheme with Play 2.0\. We will use the Apache Commons Codec library
    for Base64 encoding and decoding for this recipe. This dependency is implicitly
    imported by Play and we will not need to explicitly declare it to our library
    dependencies in `build.sbt`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For Java, we need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `foo_java` application with Hot-Reloading enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new `play.mvc.Security.Authenticator` implementation class in `foo_java/app/controllers/BasicAuthenticator.java`
    with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify `foo_java/app/controllers/Products.java` by adding the following annotation
    to the API actions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using `curl`, send a request to the existing RESTful `GET` endpoint as we did
    earlier; you will now see an unauthorized response:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using `curl` again, send another request to the existing RESTful `GET` endpoint,
    this time with the user credentials, `ned` (username) and `flanders` (password):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Scala, we need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run `foo_scala` application with Hot-Reloading enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new `ActionBuilder` class in `foo_scala/app/controllers/BasicAuthAction.scala`
    with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify `foo_scala/app/controllers/Products.scala` by adding the newly created
    `ActionBuilder` class with the API actions instead:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using `curl`, send a request to the existing RESTful `GET` endpoint as we did
    earlier; you will now see an unauthorized response:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using `curl` again, send another request to the existing RESTful `GET` endpoint,
    this time with the user credentials, `ned` (username) and `flanders` (password):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we secured the RESTful API endpoints using the HTTP basic authentication
    scheme with Play 2.0\. We created the respective security implementation class
    for both Java and Scala. For each security implementation class, `BasicAuthenticator.java`
    and `BasicAuthAction.scala`, we retrieved the authorization header and decoded
    the value string to decrypt the user credentials that we passed in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we got the username and password, we invoked the `isAuthenticated` function
    to check the validity of the user credentials:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'We then utilized the security implementation classes by annotating the Java
    API actions and declaring it as the API action class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Using `curl`, we can also check whether our secure API actions handle unauthenticated
    requests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Consuming external web APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will explore the Play WS API to consume external web services
    from a Play 2 web application. As web application requirements evolve, we become
    more dependent on external data services for data such as foreign exchange rates,
    real-time weather data, and so on. The Play WS library provides us with APIs to
    be able to interface with external web services.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For Java, we need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `foo_java` application with Hot-Reloading enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare `playWs` as a project dependency in `build.sbt`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new controller in `foo_java/app/controllers/WebClient.java` and add
    the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new route entry for the newly added action in `foo_java/conf/routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using `curl`, we will be able to test how our new action is able to consume
    an external web API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Scala, we need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `foo_scala` application with Hot-Reloading enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare `playWs` as a project dependency in `build.sbt`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new controller in `foo_scala/app/controllers/WebClient.scala` and
    add the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new route entry for the newly added action in `foo_scala/conf/routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using `curl`, we will be able to test how our new action is able to consume
    an external web API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we utilized the Play 2.0 plugin, WS, to consume an external
    web API. We created a new route and `AsynchronousAction` method. In the action,
    we passed the external API''s URL into the WS api and specified that it will be
    a `GET` operation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'We then parsed the JSON response and piped it into the resulting response of
    the newly created route, `/client/get_todos`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Using the Twitter API and OAuth
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will explore how we can use the built-in support of Play
    2.0 for OAuth to retrieve tweets from the Twitter API.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For Java, we need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `foo_java` application with Hot-Reloading enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Specify your Twitter API information in `foo_java/conf/application.conf`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `WebClient` controller in `foo_java/app/controllers/WebClient.java`
    with the following action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the new route for the `getTweets(hashtag: String)` action to `foo_java/conf/routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new view template in `foo_java/app/views/tweets.scala.html` with the
    following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using a web browser, access the `/client/get_tweets/:hashtag` route to view
    tweets retrieved from the Twitter API:![](img/gqMspVre.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For Scala, we need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `foo_scala` application with Hot-Reloading enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Specify your Twitter API information in `foo_scala/conf/application.conf`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `WebClient` controller in `foo_scala/app/controllers/WebClient.scala`
    with the following action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the new routes for the `getTweets(hashtag: String)` action in `foo_scala/conf/routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new view template in `foo_scala/app/views/tweets.scala.html` with the
    following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using a web browser, access the `/client/get_tweets/:hashtag` route to view
    tweets retrieved from the Twitter API, as shown in the following screenshot:![](img/FmkrgheD.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we created a new URL route and action to retrieve and display
    Tweets by the hashtag specified in the request route, `/client/get_tweets/:hashtag`.
    We implemented the action method by retrieving the required Twitter API consumer
    and access token keys from `conf/application.conf` (remember to register for a
    Twitter Dev account at [http://dev.twitter.com](http://dev.twitter.com) and generate
    your consumer and access tokens for this recipe):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'We then passed these credentials to the Play class `OAuthCalculator` as we
    accessed the Twitter search API endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the Twitter API response returns, we parse the response JSON and push
    it to a intermediate collection object, which we then passed on to our view template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
