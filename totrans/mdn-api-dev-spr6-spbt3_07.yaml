- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Designing a User Interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you implemented authentication and authorization using
    Spring Security; that chapter also included all the example e-commerce app APIs.
    In this chapter, you will develop the frontend of an example e-commerce app using
    the React library. This UI app will then consume the APIs developed in the previous
    chapter, [*Chapter 6*](B19349_06.xhtml#_idTextAnchor148), *Securing REST Endpoints
    Using Authorization and Authentication*. This UI app will be a **single-page application**
    (**SPA**) that consists of interactive components such as *Login*, *Product Listing*,
    *Product Detail*, *Cart*, and *Order Listing*. This chapter will conclude the
    end-to-end development and communication between different layers of an online
    shopping app. By the end of this chapter, you will have learned about SPAs, UI
    component development using React, and consuming the REST APIs using the browser’s
    built-in **Fetch API**.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Learning React fundamentals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring React components and other features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing e-commerce app components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consuming APIs using Fetch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You need the following prerequisites for developing and executing the code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You should be familiar with JavaScript: `data types`, `variables`, `functions`,
    `loops`, and `array` methods such as `map()`, `Promises`, and `async`, and so
    on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node.js 18.x with `npm install` `yarn -g`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Visual Studio Code** (**VS Code**): This is a free source code editor. You
    can use any other source code editor of your choice.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React 18 libraries that will be included when you use `create-react-app`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s get the ball rolling!
  prefs: []
  type: TYPE_NORMAL
- en: 'Please visit the following link to check the code for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/tree/main/Chapter07](https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/tree/main/Chapter07)'
  prefs: []
  type: TYPE_NORMAL
- en: Learning React fundamentals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React is a declarative library used to build interactive and dynamic UIs, including
    isolated small components. It is also sometimes referred to as a framework because
    it is as capable as and comparable with other JavaScript frameworks such as AngularJS.
    However, React is a library and works with other supported libraries, including
    React Router, React Redux, and so on. You normally use it to develop SPAs, but
    it can also be used to develop full stack applications.
  prefs: []
  type: TYPE_NORMAL
- en: React is used to build the view layer of the application per the MVC architecture.
    You can build reusable UI components with their own state. You can use either
    plain JavaScript with HTML or **JavaScript Syntax Extension** (**JSX**) for templating.
    We’ll be using JSX in this chapter, which employs a **virtual Document Object
    Model** (**VDOM**) for dynamic changes and interactions.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s create a new React app using the `create-react-app` utility next. This
    utility scaffolds and provides the basic app structure that you’ll use to develop
    the example e-commerce app frontend.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a React app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can configure and build a React UI app from scratch. However, as mentioned,
    React provides a `create-react-app` utility that bootstraps and builds a basic
    running app template. You can take it further to build a full-fleshed UI application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Its syntax is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: $ npx create-react-app ecomm-uiCreating a new React app in /Users/dev/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/Chapter07/ecomm-ui.
  prefs: []
  type: TYPE_NORMAL
- en: Installing packages. This might take a couple of minutes.
  prefs: []
  type: TYPE_NORMAL
- en: Installing react, react-dom, and react-scripts with cra-template...
  prefs: []
  type: TYPE_NORMAL
- en: //… stripped output for brevity
  prefs: []
  type: TYPE_NORMAL
- en: added 1418 packages in 50s
  prefs: []
  type: TYPE_NORMAL
- en: Success! Created ecomm-ui at /Users/sourabhsharma/dev/pws/java/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/Chapter07/ecomm-ui
  prefs: []
  type: TYPE_NORMAL
- en: //… stripped output for brevity
  prefs: []
  type: TYPE_NORMAL
- en: Inside that directory
  prefs: []
  type: TYPE_NORMAL
- en: 'We suggest that you begin by typing:'
  prefs: []
  type: TYPE_NORMAL
- en: cd ecomm-ui
  prefs: []
  type: TYPE_NORMAL
- en: npm start
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: $ cd ecomm-ui$ code .
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: $ npm start
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: ecomm-ui├── README.md
  prefs: []
  type: TYPE_NORMAL
- en: ├── node_modules
  prefs: []
  type: TYPE_NORMAL
- en: ├── package.json
  prefs: []
  type: TYPE_NORMAL
- en: ├── package-lock.json
  prefs: []
  type: TYPE_NORMAL
- en: ├── .gitignore
  prefs: []
  type: TYPE_NORMAL
- en: ├── public
  prefs: []
  type: TYPE_NORMAL
- en: │ ├── favicon.ico
  prefs: []
  type: TYPE_NORMAL
- en: │ ├── index.html
  prefs: []
  type: TYPE_NORMAL
- en: │ ├── logo192.png
  prefs: []
  type: TYPE_NORMAL
- en: │ ├── logo512.png
  prefs: []
  type: TYPE_NORMAL
- en: │ ├── manifest.json
  prefs: []
  type: TYPE_NORMAL
- en: │ └── robots.txt
  prefs: []
  type: TYPE_NORMAL
- en: └── src
  prefs: []
  type: TYPE_NORMAL
- en: ├── App.css
  prefs: []
  type: TYPE_NORMAL
- en: ├── App.js
  prefs: []
  type: TYPE_NORMAL
- en: ├── App.test.js
  prefs: []
  type: TYPE_NORMAL
- en: ├── index.css
  prefs: []
  type: TYPE_NORMAL
- en: ├── index.js
  prefs: []
  type: TYPE_NORMAL
- en: ├── logo.svg
  prefs: []
  type: TYPE_NORMAL
- en: ├── reportWebVitals.js
  prefs: []
  type: TYPE_NORMAL
- en: └── setupTests.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '"scripts": {    "start": "react-scripts start",'
  prefs: []
  type: TYPE_NORMAL
- en: '"build": "react-scripts build",'
  prefs: []
  type: TYPE_NORMAL
- en: '"test": "react-scripts test",'
  prefs: []
  type: TYPE_NORMAL
- en: '"eject": "react-scripts eject"'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: import React from 'react';import ReactDOM from 'react-dom/client';
  prefs: []
  type: TYPE_NORMAL
- en: import './index.css';
  prefs: []
  type: TYPE_NORMAL
- en: import App from './App';
  prefs: []
  type: TYPE_NORMAL
- en: const root = ReactDOM.createRoot(document.getElementById('root'));
  prefs: []
  type: TYPE_NORMAL
- en: root.render(
  prefs: []
  type: TYPE_NORMAL
- en: <React.StrictMode>
  prefs: []
  type: TYPE_NORMAL
- en: <App />
  prefs: []
  type: TYPE_NORMAL
- en: </React.StrictMode>
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: export default const Header = (props) => {  return (
  prefs: []
  type: TYPE_NORMAL
- en: <div>
  prefs: []
  type: TYPE_NORMAL
- en: <h1>{props.title}</h1>
  prefs: []
  type: TYPE_NORMAL
- en: <div>
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: export default class Header extends React.Component {  render() {
  prefs: []
  type: TYPE_NORMAL
- en: return (
  prefs: []
  type: TYPE_NORMAL
- en: <div>
  prefs: []
  type: TYPE_NORMAL
- en: <h1>{this.props.title}</h1>
  prefs: []
  type: TYPE_NORMAL
- en: <div>
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: <Header title="Sample Ecommerce App" />
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: <div className="w-32"> <img className="h-24" src={item?.imageUrl} alt="" />
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: <div className="flex flex-col justify-between
  prefs: []
  type: TYPE_NORMAL
- en: ml-4 flexgrow">
  prefs: []
  type: TYPE_NORMAL
- en: <Link to={"/products/" + item.id} className="font-bold
  prefs: []
  type: TYPE_NORMAL
- en: text-sm text-indigo-500 hover:text-indigo-700">
  prefs: []
  type: TYPE_NORMAL
- en: '{item?.name}'
  prefs: []
  type: TYPE_NORMAL
- en: </Link>
  prefs: []
  type: TYPE_NORMAL
- en: '<span className="text-xs">Author: {author}</span>'
  prefs: []
  type: TYPE_NORMAL
- en: <button className="font-semibold hover:text-red-500
  prefs: []
  type: TYPE_NORMAL
- en: text-indigo-500 text-xs text-left"
  prefs: []
  type: TYPE_NORMAL
- en: onClick={() => removeItem(item.id)}>
  prefs: []
  type: TYPE_NORMAL
- en: Remove
  prefs: []
  type: TYPE_NORMAL
- en: </button>
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: import {useState} from "react";
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: const [total, setTotal] = useState(0);
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'import {createContext} from "react";import ReactDOM from "react-dom";const
    LoggedInContext = createContext();const App = () => {  return (    <LoggedInContext.Provider
    isUserLoggedIn=true>      <ProductList/>    <LoggedInContext.Provider/>  );}const
    ProductList = () => { return (   <LoggedInContext.Consumer> { isUserLoggedIn =>    <div>Is
    user logged-in: {isUserLoggedIn}</div>   } <LoggedInContext.Consumer> );}ReactDOM.render(<App/>,document.getElementById("root"));'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: import {createContext, useContext} from "react";import ReactDOM from "react-dom";
  prefs: []
  type: TYPE_NORMAL
- en: const LoggedInContext = createContext();
  prefs: []
  type: TYPE_NORMAL
- en: const App = () => {
  prefs: []
  type: TYPE_NORMAL
- en: return (
  prefs: []
  type: TYPE_NORMAL
- en: <LoggedInContext.Provider isUserLoggedIn=true>
  prefs: []
  type: TYPE_NORMAL
- en: <ProductList/>
  prefs: []
  type: TYPE_NORMAL
- en: <LoggedInContext.Provider/>
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: const ProductList = () => {
  prefs: []
  type: TYPE_NORMAL
- en: const isUserLoggedIn = useContext(LoggedInContext);
  prefs: []
  type: TYPE_NORMAL
- en: return (
  prefs: []
  type: TYPE_NORMAL
- en: '<div>Is user logged-in: {isUserLoggedIn}</div>'
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: ReactDOM.render(<App/>, document.getElementById("root"));
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: const [state, dispatch] = useReducer(reducer, initialState);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ npm install -D tailwindcss
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '$ npx tailwindcss initCreated Tailwind CSS config file: tailwind.config.js'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: /** @type {import('tailwindcss').Config} */module.exports = {
  prefs: []
  type: TYPE_NORMAL
- en: 'content: [],'
  prefs: []
  type: TYPE_NORMAL
- en: 'theme: {'
  prefs: []
  type: TYPE_NORMAL
- en: 'extend: {},'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: 'plugins: [],'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'module.exports = {  content: ["./src/**/*.{js,jsx,ts,tsx}",'
  prefs: []
  type: TYPE_NORMAL
- en: '"./public/index.html"],'
  prefs: []
  type: TYPE_NORMAL
- en: 'theme: {'
  prefs: []
  type: TYPE_NORMAL
- en: 'extend: {},'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: 'plugins: [],'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '@tailwind base;@tailwind components;'
  prefs: []
  type: TYPE_NORMAL
- en: '@tailwind utilities;'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: import React from 'react';import ReactDOM from 'react-dom/client';
  prefs: []
  type: TYPE_NORMAL
- en: import './index.css';
  prefs: []
  type: TYPE_NORMAL
- en: import App from './App';
  prefs: []
  type: TYPE_NORMAL
- en: import reportWebVitals from './reportWebVitals';
  prefs: []
  type: TYPE_NORMAL
- en: const root = ReactDOM.createRoot(document.getElementById('root'));
  prefs: []
  type: TYPE_NORMAL
- en: // … rest of the code removed for brevity
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: const Header = () => {  return (
  prefs: []
  type: TYPE_NORMAL
- en: <div>
  prefs: []
  type: TYPE_NORMAL
- en: <header className="p-2 border-b-2
  prefs: []
  type: TYPE_NORMAL
- en: border-gray-300 bggray-200">
  prefs: []
  type: TYPE_NORMAL
- en: <h1 className="text-lg font-bold">
  prefs: []
  type: TYPE_NORMAL
- en: Ecommerce App</h1>
  prefs: []
  type: TYPE_NORMAL
- en: </header>
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: export default Header;
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: const Footer = () => {  return (
  prefs: []
  type: TYPE_NORMAL
- en: <div>
  prefs: []
  type: TYPE_NORMAL
- en: <footer
  prefs: []
  type: TYPE_NORMAL
- en: className="text-center p-2 border-t-2 bggray-
  prefs: []
  type: TYPE_NORMAL
- en: 200 border-gray-300 text-sm">
  prefs: []
  type: TYPE_NORMAL
- en: No &copy; by Ecommerce App.{" "}
  prefs: []
  type: TYPE_NORMAL
- en: <a href=https://github.com/PacktPublishing/Modern-
  prefs: []
  type: TYPE_NORMAL
- en: API-Development-with-Spring-and-Spring-Boot>
  prefs: []
  type: TYPE_NORMAL
- en: Modern API development with Spring and
  prefs: []
  type: TYPE_NORMAL
- en: Spring Boot
  prefs: []
  type: TYPE_NORMAL
- en: </a>
  prefs: []
  type: TYPE_NORMAL
- en: </footer>
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: export default Footer;
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: const Container = () => {  return (
  prefs: []
  type: TYPE_NORMAL
- en: <div className="flex-grow flex-shrink-0 p-4">
  prefs: []
  type: TYPE_NORMAL
- en: <p>Hello, text/element would appear in container</p>
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: export default Container;
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: import Header from "./components/Header";import Footer from "./components/Footer";
  prefs: []
  type: TYPE_NORMAL
- en: import Container from "./components/Container";
  prefs: []
  type: TYPE_NORMAL
- en: function App() {
  prefs: []
  type: TYPE_NORMAL
- en: return (
  prefs: []
  type: TYPE_NORMAL
- en: <div className="flex flex-col min-h-screen h-full">
  prefs: []
  type: TYPE_NORMAL
- en: <Header />
  prefs: []
  type: TYPE_NORMAL
- en: <Container />
  prefs: []
  type: TYPE_NORMAL
- en: <Footer />
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: export default App;
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: class Config {  SCHEME = process.env.SCHEME ? process.env.
  prefs: []
  type: TYPE_NORMAL
- en: 'SCHEME : "http";'
  prefs: []
  type: TYPE_NORMAL
- en: 'HOST = process.env.HOST ? process.env.HOST : "localhost";'
  prefs: []
  type: TYPE_NORMAL
- en: 'PORT = process.env.PORT ? process.env.PORT : "8080";'
  prefs: []
  type: TYPE_NORMAL
- en: CART_URL = `${this.SCHEME}://${this.HOST}:$
  prefs: []
  type: TYPE_NORMAL
- en: '{this.PORT}/api/v1/carts`;'
  prefs: []
  type: TYPE_NORMAL
- en: // truncated code for brevity
  prefs: []
  type: TYPE_NORMAL
- en: defaultHeaders() {
  prefs: []
  type: TYPE_NORMAL
- en: return {
  prefs: []
  type: TYPE_NORMAL
- en: '"Content-Type": "application/json",'
  prefs: []
  type: TYPE_NORMAL
- en: 'Accept: "application/json",'
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: …
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: // src/api/Config.jstokenExpired() {
  prefs: []
  type: TYPE_NORMAL
- en: const expDate = Number(localStorage.getItem
  prefs: []
  type: TYPE_NORMAL
- en: (this.EXPIRATION));
  prefs: []
  type: TYPE_NORMAL
- en: if (expDate > Date.now()) {
  prefs: []
  type: TYPE_NORMAL
- en: return false;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: return true;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: storeAccessToken(token) {  localStorage.setItem(this.ACCESS_TOKEN, `Bearer ${token}`);
  prefs: []
  type: TYPE_NORMAL
- en: localStorage.setItem(this.EXPIRATION,
  prefs: []
  type: TYPE_NORMAL
- en: this.getExpiration(token));
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: getExpiration(token) {
  prefs: []
  type: TYPE_NORMAL
- en: 'let encodedPayload = token ? token.split(".")[1] : null;'
  prefs: []
  type: TYPE_NORMAL
- en: if (encodedPayload) {
  prefs: []
  type: TYPE_NORMAL
- en: encodedPayload = encodedPayload.replace
  prefs: []
  type: TYPE_NORMAL
- en: (/-/g, "+").replace(/_/g, "/");
  prefs: []
  type: TYPE_NORMAL
- en: const payload = JSON.parse(window.atob
  prefs: []
  type: TYPE_NORMAL
- en: (encodedPayload));
  prefs: []
  type: TYPE_NORMAL
- en: 'return payload?.exp ? payload?.exp * 1000 : 0;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: return 0;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: import Config from "./Config";class ProductClient {
  prefs: []
  type: TYPE_NORMAL
- en: constructor() { this.config = new Config(); }
  prefs: []
  type: TYPE_NORMAL
- en: async fetchList() {
  prefs: []
  type: TYPE_NORMAL
- en: return fetch(this.config.PRODUCT_URL, {
  prefs: []
  type: TYPE_NORMAL
- en: 'method: "GET",'
  prefs: []
  type: TYPE_NORMAL
- en: 'mode: "cors",'
  prefs: []
  type: TYPE_NORMAL
- en: 'headers: { ...this.config.defaultHeaders(),},'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: .then((res) => Promise.all([res, res.json()]))
  prefs: []
  type: TYPE_NORMAL
- en: .then(([res, json]) => {
  prefs: []
  type: TYPE_NORMAL
- en: 'if (!res.ok) { return { success: false, error: json };}'
  prefs: []
  type: TYPE_NORMAL
- en: 'return { success: true, data: json };'
  prefs: []
  type: TYPE_NORMAL
- en: '}).catch((e) => {'
  prefs: []
  type: TYPE_NORMAL
- en: return this.handleError(e);
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: …
  prefs: []
  type: TYPE_NORMAL
- en: …
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: async fetch(prodId) {   return fetch(this.config.PRODUCT_URL + "/" + prodId,
    {
  prefs: []
  type: TYPE_NORMAL
- en: 'method: "GET",'
  prefs: []
  type: TYPE_NORMAL
- en: 'mode: "cors",'
  prefs: []
  type: TYPE_NORMAL
- en: 'headers: { ...this.config.defaultHeaders(),},'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: .then((res) => Promise.all([res,  res.json()]))
  prefs: []
  type: TYPE_NORMAL
- en: .then(([res, json]) => {
  prefs: []
  type: TYPE_NORMAL
- en: 'if (!res.ok) { return { success: false, error: json }; }'
  prefs: []
  type: TYPE_NORMAL
- en: 'return { success: true, data: json };'
  prefs: []
  type: TYPE_NORMAL
- en: '}).catch((e) => {'
  prefs: []
  type: TYPE_NORMAL
- en: this.handleError(e);
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: handleError(error) {
  prefs: []
  type: TYPE_NORMAL
- en: const err = new Map([
  prefs: []
  type: TYPE_NORMAL
- en: '[TypeError, "Problem fetching the response."],'
  prefs: []
  type: TYPE_NORMAL
- en: '[SyntaxError, "Problem parsing the response."],'
  prefs: []
  type: TYPE_NORMAL
- en: '[Error, error.message],'
  prefs: []
  type: TYPE_NORMAL
- en: ']).get(error.constructor);'
  prefs: []
  type: TYPE_NORMAL
- en: return err;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: export default ProductClient;
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: // other importsimport Products from "./Products";
  prefs: []
  type: TYPE_NORMAL
- en: const ProductList = ({ auth }) => {
  prefs: []
  type: TYPE_NORMAL
- en: const [productList, setProductList] = useState();
  prefs: []
  type: TYPE_NORMAL
- en: const [noRecMsg, setNoRecMsg] = useState("Loading...");
  prefs: []
  type: TYPE_NORMAL
- en: const { dispatch } = useCartContext();
  prefs: []
  type: TYPE_NORMAL
- en: useEffect(() => {
  prefs: []
  type: TYPE_NORMAL
- en: async function fetchProducts() {
  prefs: []
  type: TYPE_NORMAL
- en: const res = await new ProductClient().fetchList();
  prefs: []
  type: TYPE_NORMAL
- en: if (res && res.success) { setProductList(res.data); }
  prefs: []
  type: TYPE_NORMAL
- en: else { setNoRecMsg(res); }
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: async function fetchCart(auth) {
  prefs: []
  type: TYPE_NORMAL
- en: const res = await new CartClient(auth).fetch();
  prefs: []
  type: TYPE_NORMAL
- en: if (res && res.success) {
  prefs: []
  type: TYPE_NORMAL
- en: dispatch(updateCart(res.data.items));
  prefs: []
  type: TYPE_NORMAL
- en: if (res.data?.items && res.data.items?.length < 1)
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: setNoRecMsg("Cart is empty.");
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: setNoRecMsg(res && typeof res === "string"?
  prefs: []
  type: TYPE_NORMAL
- en: 'res : res?.error?.message);'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: if (auth?.token) fetchCart(auth);
  prefs: []
  type: TYPE_NORMAL
- en: fetchProducts();
  prefs: []
  type: TYPE_NORMAL
- en: '}, []);'
  prefs: []
  type: TYPE_NORMAL
- en: // rest of the code …
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: return (   <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
  prefs: []
  type: TYPE_NORMAL
- en: '{productList ? ('
  prefs: []
  type: TYPE_NORMAL
- en: <div className="flex flex-wrap -mx-1 lg:-mx-4">
  prefs: []
  type: TYPE_NORMAL
- en: <Products auth={auth} productList={productList ?
  prefs: []
  type: TYPE_NORMAL
- en: 'productList : []} />'
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: ') : ('
  prefs: []
  type: TYPE_NORMAL
- en: <div className="text-lg
  prefs: []
  type: TYPE_NORMAL
- en: font-semibold">{noRecMsg}</div>
  prefs: []
  type: TYPE_NORMAL
- en: )}
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: export default ProductList;
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: import ProductCard from "./ProductCard";const Products = ({ auth, productList
    }) => {
  prefs: []
  type: TYPE_NORMAL
- en: return ( <> {productList.map((item) => (
  prefs: []
  type: TYPE_NORMAL
- en: <ProductCard key={item.id} product={item} auth={auth} /> ))}
  prefs: []
  type: TYPE_NORMAL
- en: </>
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: export default Products;
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '{productList.map((item, index) => (  <ProductCard key={index} product={item}
    auth={auth} />))}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ npm install react-router-dom
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: import { useState } from "react";import { Link, useNavigate } from "react-router-dom";
  prefs: []
  type: TYPE_NORMAL
- en: import CartClient from "../api/CartClient";
  prefs: []
  type: TYPE_NORMAL
- en: import { updateCart, useCartContext } from "../hooks/CartContext";
  prefs: []
  type: TYPE_NORMAL
- en: const ProductCard = ({ auth, product }) => {
  prefs: []
  type: TYPE_NORMAL
- en: const navigate = new useNavigate();
  prefs: []
  type: TYPE_NORMAL
- en: const cartClient = new CartClient(auth);
  prefs: []
  type: TYPE_NORMAL
- en: const { cartItems, dispatch } = useCartContext();
  prefs: []
  type: TYPE_NORMAL
- en: const [msg, setMsg] = new useState("");
  prefs: []
  type: TYPE_NORMAL
- en: // continue …
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: const add = async () => {  const isLoggedIn = checkLogin();
  prefs: []
  type: TYPE_NORMAL
- en: if (isLoggedIn && product?.id) {
  prefs: []
  type: TYPE_NORMAL
- en: const res = await callAddItemApi();
  prefs: []
  type: TYPE_NORMAL
- en: if (res && res.success) {
  prefs: []
  type: TYPE_NORMAL
- en: if (res.data?.length > 0) {
  prefs: []
  type: TYPE_NORMAL
- en: setMsg("Product added to bag.");
  prefs: []
  type: TYPE_NORMAL
- en: dispatch(updateCart(res.data));
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '} else { setMsg(res && typeof res === "string" ? res :'
  prefs: []
  type: TYPE_NORMAL
- en: res.error.message); }
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: const checkLogin = () => {
  prefs: []
  type: TYPE_NORMAL
- en: if (!auth.token) {
  prefs: []
  type: TYPE_NORMAL
- en: navigate("/login");
  prefs: []
  type: TYPE_NORMAL
- en: return false;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: return true;
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: const callAddItemApi = async () => {
  prefs: []
  type: TYPE_NORMAL
- en: const qty = findQty(product.id);
  prefs: []
  type: TYPE_NORMAL
- en: return cartClient.addOrUpdate({
  prefs: []
  type: TYPE_NORMAL
- en: 'id: product.id,'
  prefs: []
  type: TYPE_NORMAL
- en: 'quantity: qty + 1,'
  prefs: []
  type: TYPE_NORMAL
- en: 'unitPrice: product.price,'
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: const findQty = (id) => {
  prefs: []
  type: TYPE_NORMAL
- en: const idx = cartItems.findIndex((i) => i.id === id);
  prefs: []
  type: TYPE_NORMAL
- en: if (~idx) { return cartItems[idx].quantity; }
  prefs: []
  type: TYPE_NORMAL
- en: return 0;
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: // ProductCard.jsconst buy = async () => {
  prefs: []
  type: TYPE_NORMAL
- en: const isLoggedIn = checkLogin();
  prefs: []
  type: TYPE_NORMAL
- en: if (isLoggedIn && product?.id) {
  prefs: []
  type: TYPE_NORMAL
- en: const res = await callAddItemApi();
  prefs: []
  type: TYPE_NORMAL
- en: if (res && res.success) { navigate("/cart"); }
  prefs: []
  type: TYPE_NORMAL
- en: 'else { setMsg(res && typeof res === "string" ? res :'
  prefs: []
  type: TYPE_NORMAL
- en: res.error.message); }
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: return ( <div id={product.id} className="my-1 px-1 w-full…">
  prefs: []
  type: TYPE_NORMAL
- en: <figure className="bg-gray-100 rounded-xl p-8 …">
  prefs: []
  type: TYPE_NORMAL
- en: <img className="w-72 h-72 mx-auto"
  prefs: []
  type: TYPE_NORMAL
- en: src={product.imageUrl}alt={product.name} />
  prefs: []
  type: TYPE_NORMAL
- en: <div className="pt-4 md:p-6 text-center xs:pl-2 …">
  prefs: []
  type: TYPE_NORMAL
- en: <form className="flex-auto">
  prefs: []
  type: TYPE_NORMAL
- en: <div className="flex flex-wrap items-center …">
  prefs: []
  type: TYPE_NORMAL
- en: <h1 className="w-full flex-none font-bold mb-2.5 …">
  prefs: []
  type: TYPE_NORMAL
- en: <Link to={`/products/${product.id}`}>
  prefs: []
  type: TYPE_NORMAL
- en: '{product.name}</Link>'
  prefs: []
  type: TYPE_NORMAL
- en: </h1>
  prefs: []
  type: TYPE_NORMAL
- en: <div className="text-4xl leading-7 font-bold …">
  prefs: []
  type: TYPE_NORMAL
- en: '{"$"}'
  prefs: []
  type: TYPE_NORMAL
- en: '{product.price.toFixed(2)}'
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: <div className="text-sm font-medium text-gray-400 …">
  prefs: []
  type: TYPE_NORMAL
- en: In stock
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: <div className="flex space-x-3 mt-8 mb-4 text-sm …">
  prefs: []
  type: TYPE_NORMAL
- en: <div className="flex-auto flex justify-between">
  prefs: []
  type: TYPE_NORMAL
- en: <button className="w-1/2…"
  prefs: []
  type: TYPE_NORMAL
- en: type="button" onClick={buy}>
  prefs: []
  type: TYPE_NORMAL
- en: Buy now
  prefs: []
  type: TYPE_NORMAL
- en: </button>
  prefs: []
  type: TYPE_NORMAL
- en: <button className="flex…"
  prefs: []
  type: TYPE_NORMAL
- en: type="button" onClick={add}>
  prefs: []
  type: TYPE_NORMAL
- en: Add to bag
  prefs: []
  type: TYPE_NORMAL
- en: </button>
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: <p className="text-sm text-gray-500 text-left">
  prefs: []
  type: TYPE_NORMAL
- en: Free shipping on all local orders.
  prefs: []
  type: TYPE_NORMAL
- en: </p>
  prefs: []
  type: TYPE_NORMAL
- en: </form>
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: </figure>
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: export default ProductCard;
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: import {Link, useParams, useNavigate} from "react-router-dom";import ProductClient
    from "../api/ProductClient";
  prefs: []
  type: TYPE_NORMAL
- en: // Other imports removed for brevity
  prefs: []
  type: TYPE_NORMAL
- en: const ProductDetail = ({ auth }) => {
  prefs: []
  type: TYPE_NORMAL
- en: const { id } = useParams();
  prefs: []
  type: TYPE_NORMAL
- en: // Other declaration removed for brevity
  prefs: []
  type: TYPE_NORMAL
- en: // Other functions removed for brevity
  prefs: []
  type: TYPE_NORMAL
- en: useEffect(() => {
  prefs: []
  type: TYPE_NORMAL
- en: async function getProduct(id) {
  prefs: []
  type: TYPE_NORMAL
- en: const client = new ProductClient();
  prefs: []
  type: TYPE_NORMAL
- en: const res = await client.fetch(id);
  prefs: []
  type: TYPE_NORMAL
- en: if (res && res.success) { setProduct(res.data); }
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: async function fetchCart(auth) {
  prefs: []
  type: TYPE_NORMAL
- en: const res = await new CartClient(auth).fetch();
  prefs: []
  type: TYPE_NORMAL
- en: if (res && res.success) {
  prefs: []
  type: TYPE_NORMAL
- en: console.log(res.data);
  prefs: []
  type: TYPE_NORMAL
- en: dispatch(updateCart(res.data.items));
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: if (auth?.token) fetchCart(auth);
  prefs: []
  type: TYPE_NORMAL
- en: getProduct(id);
  prefs: []
  type: TYPE_NORMAL
- en: '}, [id]);'
  prefs: []
  type: TYPE_NORMAL
- en: return ( /* JSX Template */ );
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: export default ProductDetail;
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: import { useState } from "react";export default function useToken() {
  prefs: []
  type: TYPE_NORMAL
- en: const getToken = () => {
  prefs: []
  type: TYPE_NORMAL
- en: const tokenResponse = localStorage.getItem
  prefs: []
  type: TYPE_NORMAL
- en: ("tokenResponse");
  prefs: []
  type: TYPE_NORMAL
- en: const info = tokenResponse ? JSON.parse
  prefs: []
  type: TYPE_NORMAL
- en: '(tokenResponse) : "";'
  prefs: []
  type: TYPE_NORMAL
- en: return info;
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: const [token, setToken] = useState(getToken());
  prefs: []
  type: TYPE_NORMAL
- en: const saveToken = (tokenResponse) => {
  prefs: []
  type: TYPE_NORMAL
- en: localStorage.setItem("tokenResponse", JSON.stringify
  prefs: []
  type: TYPE_NORMAL
- en: (tokenResponse));
  prefs: []
  type: TYPE_NORMAL
- en: setToken(tokenResponse);
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: 'return { setToken: saveToken, token, };'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: import { useNavigate } from "react-router-dom";import { useState } from "react";
  prefs: []
  type: TYPE_NORMAL
- en: import PropTypes from "prop-types";
  prefs: []
  type: TYPE_NORMAL
- en: 'Login.propTypes = { auth: PropTypes.object.isRequired, };'
  prefs: []
  type: TYPE_NORMAL
- en: const Login = ({ uri, auth }) => {
  prefs: []
  type: TYPE_NORMAL
- en: const [username, setUserName] = useState();
  prefs: []
  type: TYPE_NORMAL
- en: const [password, setPassword] = useState();
  prefs: []
  type: TYPE_NORMAL
- en: const [errMsg, setErrMsg] = useState();
  prefs: []
  type: TYPE_NORMAL
- en: const navigate = useNavigate();
  prefs: []
  type: TYPE_NORMAL
- en: const cancel = () => {
  prefs: []
  type: TYPE_NORMAL
- en: const l = navigate.length;
  prefs: []
  type: TYPE_NORMAL
- en: 'l > 2 ? navigate.goBack() : navigate("/");'
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: const handleSubmit = async € => {
  prefs: []
  type: TYPE_NORMAL
- en: e.preventDefault();
  prefs: []
  type: TYPE_NORMAL
- en: const res = await auth.loginUser({ username, password });
  prefs: []
  type: TYPE_NORMAL
- en: if (res && res.success) {
  prefs: []
  type: TYPE_NORMAL
- en: setErrMsg(null);
  prefs: []
  type: TYPE_NORMAL
- en: navigate(uri ? uri":""/");
  prefs: []
  type: TYPE_NORMAL
- en: '} else { setErrMsg('
  prefs: []
  type: TYPE_NORMAL
- en: res && typeof res ="= "str"ng" ?
  prefs: []
  type: TYPE_NORMAL
- en: 'res : "Unsuccessful");'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: return (/* JSX Template */ );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: import React, { createContext, useReducer, useContext }  from "react";
  prefs: []
  type: TYPE_NORMAL
- en: export const CartContext = createContext();
  prefs: []
  type: TYPE_NORMAL
- en: function useCartContext() { return useContext(CartContext); }
  prefs: []
  type: TYPE_NORMAL
- en: export const UPDATE_CART = "UPDATE_CART";
  prefs: []
  type: TYPE_NORMAL
- en: export const ADD_ITEM = "ADD_ITEM";
  prefs: []
  type: TYPE_NORMAL
- en: export const REMOVE_ITEM = "REMOVE_ITEM";
  prefs: []
  type: TYPE_NORMAL
- en: export function updateCart(items) {
  prefs: []
  type: TYPE_NORMAL
- en: 'return { type: UPDATE_CART, items };'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: export function addItem(item) {
  prefs: []
  type: TYPE_NORMAL
- en: 'return { type: ADD_ITEM, item };'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: export function removeItem(index) {
  prefs: []
  type: TYPE_NORMAL
- en: 'return { type: REMOVE_ITEM, index };'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: export function cartReducer(state, action) {
  prefs: []
  type: TYPE_NORMAL
- en: switch (action.type) {
  prefs: []
  type: TYPE_NORMAL
- en: 'case UPDATE_CART:'
  prefs: []
  type: TYPE_NORMAL
- en: return [...action?.items];
  prefs: []
  type: TYPE_NORMAL
- en: 'case ADD_ITEM:'
  prefs: []
  type: TYPE_NORMAL
- en: return [...state, action.item];
  prefs: []
  type: TYPE_NORMAL
- en: 'case REMOVE_ITEM:'
  prefs: []
  type: TYPE_NORMAL
- en: const list = [...state];
  prefs: []
  type: TYPE_NORMAL
- en: list.splice(action.index, 1);
  prefs: []
  type: TYPE_NORMAL
- en: return list;
  prefs: []
  type: TYPE_NORMAL
- en: 'default:'
  prefs: []
  type: TYPE_NORMAL
- en: return state;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: const CartContextProvider = (props) => {
  prefs: []
  type: TYPE_NORMAL
- en: const [cartItems, dispatch] = useReducer(cartReducer, []);
  prefs: []
  type: TYPE_NORMAL
- en: const cartData = { cartItems, dispatch };
  prefs: []
  type: TYPE_NORMAL
- en: return <CartContext.Provider value={cartData} {...props} />;
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: export { CartContextProvider, useCartContext };
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: // other importsimport { removeItem, updateCart, useCartContext }
  prefs: []
  type: TYPE_NORMAL
- en: from "../hooks/CartContext";
  prefs: []
  type: TYPE_NORMAL
- en: import CartItem from "./CartItem";
  prefs: []
  type: TYPE_NORMAL
- en: const Cart = ({ auth }) => {
  prefs: []
  type: TYPE_NORMAL
- en: const [grandTotal, setGrandTotal] = useState(0);
  prefs: []
  type: TYPE_NORMAL
- en: const [noRecMsg, setNoRecMsg] = useState("Loading...");
  prefs: []
  type: TYPE_NORMAL
- en: const navigate = useNavigate();
  prefs: []
  type: TYPE_NORMAL
- en: const cartClient = new CartClient(auth);
  prefs: []
  type: TYPE_NORMAL
- en: const orderClient = new OrderClient(auth);
  prefs: []
  type: TYPE_NORMAL
- en: const customerClient = new CustomerClient(auth);
  prefs: []
  type: TYPE_NORMAL
- en: const { cartItems, dispatch } = useCartContext();
  prefs: []
  type: TYPE_NORMAL
- en: // continue …
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: // continue src/components/Cart.jsconst calTotal = (items) => {
  prefs: []
  type: TYPE_NORMAL
- en: let total = 0;
  prefs: []
  type: TYPE_NORMAL
- en: items?.forEach((i) => (
  prefs: []
  type: TYPE_NORMAL
- en: total = total + i?.unitPrice * i?.quantity));
  prefs: []
  type: TYPE_NORMAL
- en: return total.toFixed(2);
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: const increaseQty = async (id) => {
  prefs: []
  type: TYPE_NORMAL
- en: const idx = cartItems.findIndex((i) => i.id === id);
  prefs: []
  type: TYPE_NORMAL
- en: if (~idx) {
  prefs: []
  type: TYPE_NORMAL
- en: cartItems[idx].quantity = cartItems[idx].quantity + 1;
  prefs: []
  type: TYPE_NORMAL
- en: const res = await cartClient.addOrUpdate
  prefs: []
  type: TYPE_NORMAL
- en: (cartItems[idx]);
  prefs: []
  type: TYPE_NORMAL
- en: if (res && res.success) {
  prefs: []
  type: TYPE_NORMAL
- en: refreshCart(res.data);
  prefs: []
  type: TYPE_NORMAL
- en: if (res.data?.length < 1) { setNoRecMsg
  prefs: []
  type: TYPE_NORMAL
- en: ("Cart empty"); }
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: setNoRecMsg(res && typeof res === "string" ?
  prefs: []
  type: TYPE_NORMAL
- en: 'res : res.error.message);'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}; // continue …'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: // continue src/components/Cart.jsconst decreaseQty = async (id) => {
  prefs: []
  type: TYPE_NORMAL
- en: const idx = cartItems.findIndex((i) => i.id === id);
  prefs: []
  type: TYPE_NORMAL
- en: if (~idx && cartItems[idx].quantity <= 1) {
  prefs: []
  type: TYPE_NORMAL
- en: return deleteItem(id);
  prefs: []
  type: TYPE_NORMAL
- en: '} else if (cartItems[idx]?.quantity > 1) {'
  prefs: []
  type: TYPE_NORMAL
- en: cartItems[idx].quantity = cartItems[idx].quantity - 1;
  prefs: []
  type: TYPE_NORMAL
- en: const res = await cartClient.addOrUpdate
  prefs: []
  type: TYPE_NORMAL
- en: (cartItems[idx]);
  prefs: []
  type: TYPE_NORMAL
- en: if (res && res.success) {
  prefs: []
  type: TYPE_NORMAL
- en: refreshCart(res.data);
  prefs: []
  type: TYPE_NORMAL
- en: if (res.data?.length < 1) { setNoRecMsg
  prefs: []
  type: TYPE_NORMAL
- en: ("Empty cart"); }
  prefs: []
  type: TYPE_NORMAL
- en: return;
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: setNoRecMsg(res && typeof res === "string" ?
  prefs: []
  type: TYPE_NORMAL
- en: 'res : res?.error?.message);'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: const deleteItem = async (id) => {
  prefs: []
  type: TYPE_NORMAL
- en: const idx = cartItems.findIndex((i) => i.id === id);
  prefs: []
  type: TYPE_NORMAL
- en: if (~idx) {
  prefs: []
  type: TYPE_NORMAL
- en: const res = await cartClient.remove(cartItems[idx].id);
  prefs: []
  type: TYPE_NORMAL
- en: if (res && res.success) {
  prefs: []
  type: TYPE_NORMAL
- en: dispatch(removeItem(idx));
  prefs: []
  type: TYPE_NORMAL
- en: if (res.data?.length < 1) { setNoRecMsg
  prefs: []
  type: TYPE_NORMAL
- en: ("Item removed");}
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: setNoRecMsg(
  prefs: []
  type: TYPE_NORMAL
- en: 'res && typeof res === "string" ? res:'
  prefs: []
  type: TYPE_NORMAL
- en: '"There is an error performing the remove.");'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}; // continue …'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: // continue src/components/Cart.jsconst refreshCart = (items) => {
  prefs: []
  type: TYPE_NORMAL
- en: setGrandTotal(calTotal(items));
  prefs: []
  type: TYPE_NORMAL
- en: dispatch(updateCart(items));
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: useEffect(() => {
  prefs: []
  type: TYPE_NORMAL
- en: async function fetch() {
  prefs: []
  type: TYPE_NORMAL
- en: const res = await cartClient.fetch();
  prefs: []
  type: TYPE_NORMAL
- en: if (res && res.success) {
  prefs: []
  type: TYPE_NORMAL
- en: refreshCart(res.data.items);
  prefs: []
  type: TYPE_NORMAL
- en: if (res.data?.items && res.data.items?.length < 1) {
  prefs: []
  type: TYPE_NORMAL
- en: setNoRecMsg("Cart is empty.");
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: setNoRecMsg(res && typeof res === "string" ?
  prefs: []
  type: TYPE_NORMAL
- en: 'res : res.error.message);'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: fetch();
  prefs: []
  type: TYPE_NORMAL
- en: '}, []); // continue …'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: // continue src/components/Cart.js  const checkout = async () => {
  prefs: []
  type: TYPE_NORMAL
- en: const res = await customerClient.fetch();
  prefs: []
  type: TYPE_NORMAL
- en: if (res && res.success) {
  prefs: []
  type: TYPE_NORMAL
- en: const payload = {
  prefs: []
  type: TYPE_NORMAL
- en: 'address: { id: res.data.addressId },'
  prefs: []
  type: TYPE_NORMAL
- en: 'card: { id: res.data.cardId },'
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: const orderRes = await orderClient.add(payload);
  prefs: []
  type: TYPE_NORMAL
- en: if (orderRes && orderRes.success) {
  prefs: []
  type: TYPE_NORMAL
- en: navigate("/orders");
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: setNoRecMsg(orderRes && typeof
  prefs: []
  type: TYPE_NORMAL
- en: orderRes === "string"
  prefs: []
  type: TYPE_NORMAL
- en: '? orderRes : "Couldn''t process checkout.");'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: setNoRecMsg(res && typeof res === "string" ?
  prefs: []
  type: TYPE_NORMAL
- en: 'res : "error retreiving customer");'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: return (/* JSX Template */ );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: // importsconst CartItem=({item, increaseQty, decreaseQty, removeItem }) =>
    {
  prefs: []
  type: TYPE_NORMAL
- en: 'const d = item ? item.description?.split(".") : [];'
  prefs: []
  type: TYPE_NORMAL
- en: const author = d && des.length > 0 ? d
  prefs: []
  type: TYPE_NORMAL
- en: '[d.length - 1] : "";'
  prefs: []
  type: TYPE_NORMAL
- en: const [total, setTotal] = useState();
  prefs: []
  type: TYPE_NORMAL
- en: const calTotal = (item) => {
  prefs: []
  type: TYPE_NORMAL
- en: setTotal((item?.unitPrice * item?.quantity)
  prefs: []
  type: TYPE_NORMAL
- en: ?.toFixed(2));
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: const updateQty = (qty) => {
  prefs: []
  type: TYPE_NORMAL
- en: if (qty === -1) { decreaseQty(item?.id); }
  prefs: []
  type: TYPE_NORMAL
- en: else if (qty === 1) { increaseQty(item?.id); }
  prefs: []
  type: TYPE_NORMAL
- en: else { return false; }
  prefs: []
  type: TYPE_NORMAL
- en: calTotal(item);
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: useEffect(() => { calTotal(item); }, []);
  prefs: []
  type: TYPE_NORMAL
- en: return (/* JSX Template */ );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: // importsconst Orders = ({ auth }) => {
  prefs: []
  type: TYPE_NORMAL
- en: const [orders, setOrders] = useState([]);
  prefs: []
  type: TYPE_NORMAL
- en: const formatDate = (dt) => {
  prefs: []
  type: TYPE_NORMAL
- en: return dt && new Date(dt).toLocaleString();
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: useEffect(() => {
  prefs: []
  type: TYPE_NORMAL
- en: async function fetchOrders() {
  prefs: []
  type: TYPE_NORMAL
- en: const client = new OrderClient(auth);
  prefs: []
  type: TYPE_NORMAL
- en: const res = await client.fetch();
  prefs: []
  type: TYPE_NORMAL
- en: if (res && res.success) { setOrders(res.data); }
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: fetchOrders();
  prefs: []
  type: TYPE_NORMAL
- en: '}, []);'
  prefs: []
  type: TYPE_NORMAL
- en: return (/* JSX Template */ );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: import { BrowserRouter as Router, Route, Routes }   from "react-router-dom";
  prefs: []
  type: TYPE_NORMAL
- en: // other imports
  prefs: []
  type: TYPE_NORMAL
- en: function App() {
  prefs: []
  type: TYPE_NORMAL
- en: const { token, setToken } = useToken();
  prefs: []
  type: TYPE_NORMAL
- en: const auth = new Auth(token, setToken);
  prefs: []
  type: TYPE_NORMAL
- en: const LoginComponent = (props) => (
  prefs: []
  type: TYPE_NORMAL
- en: <Login {...props} uri="/login" auth={auth} />
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: const ProductListComponent = (props) =>
  prefs: []
  type: TYPE_NORMAL
- en: <ProductList auth={auth} />;
  prefs: []
  type: TYPE_NORMAL
- en: // continue …
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: // App.js continuereturn (
  prefs: []
  type: TYPE_NORMAL
- en: <div className="flex flex-col min-h-screen h-full ">
  prefs: []
  type: TYPE_NORMAL
- en: <Router>
  prefs: []
  type: TYPE_NORMAL
- en: <Header userInfo={token} auth={auth} />
  prefs: []
  type: TYPE_NORMAL
- en: <div className="flex-grow flex-shrink-0 p-4">
  prefs: []
  type: TYPE_NORMAL
- en: <CartContextProvider>
  prefs: []
  type: TYPE_NORMAL
- en: <Routes>
  prefs: []
  type: TYPE_NORMAL
- en: <Route path="/" exact
  prefs: []
  type: TYPE_NORMAL
- en: element={<ProductListComponent />} />
  prefs: []
  type: TYPE_NORMAL
- en: <Route
  prefs: []
  type: TYPE_NORMAL
- en: path="/login"
  prefs: []
  type: TYPE_NORMAL
- en: 'element={token ? <ProductListComponent /> :'
  prefs: []
  type: TYPE_NORMAL
- en: <LoginComponent />} />
  prefs: []
  type: TYPE_NORMAL
- en: <Route
  prefs: []
  type: TYPE_NORMAL
- en: path="/cart"
  prefs: []
  type: TYPE_NORMAL
- en: 'element={token ? <Cart auth={auth} /> :'
  prefs: []
  type: TYPE_NORMAL
- en: <LoginComponent />} />
  prefs: []
  type: TYPE_NORMAL
- en: <Route
  prefs: []
  type: TYPE_NORMAL
- en: path="/orders"
  prefs: []
  type: TYPE_NORMAL
- en: 'element={token ? <Orders auth={auth} /> :'
  prefs: []
  type: TYPE_NORMAL
- en: <LoginComponent />} />
  prefs: []
  type: TYPE_NORMAL
- en: <Route
  prefs: []
  type: TYPE_NORMAL
- en: path="/products/:id"
  prefs: []
  type: TYPE_NORMAL
- en: element={<ProductDetail auth={auth} />} />
  prefs: []
  type: TYPE_NORMAL
- en: <Route path="*" exact element={<NotFound />} />
  prefs: []
  type: TYPE_NORMAL
- en: </Routes>
  prefs: []
  type: TYPE_NORMAL
- en: </CartContextProvider>
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: <Footer />
  prefs: []
  type: TYPE_NORMAL
- en: </Router>
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: export default App;
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: $ java -jar build/libs/Chapter06-0.0.1-SNAPSHOT.jar.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: $ yarn start
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
