["```java\nval appDependencies = Seq(\n  \"org.scalatestplus\" %% \"play\" % \"1.1.0\" % \"test\"\n)\n```", "```java\ndef isNumberInRange(x:String):Boolean = {\n    val mayBeNumber = Try{x.toDouble}\n    mayBeNumber match{\n      case Success(n) => if(n>=0 && n<=3600) true else false\n      case Failure(e) => false\n    }\n  }\n```", "```java\nclass UtilSpec extends Specification {\n\n    \"range method\" should {\n\n    \"fail for Character String\" in {\n      Util.isNumberInRange(\"xyz\") should beFalse\n    }\n\n    \"fail for Java null\" in {\n      Util.isNumberInRange(null) should beFalse\n    }\n\n    \"fail for Negative numbers\" in {\n      Util.isNumberInRange(\"-2\") should beFalse\n    }\n\n    \"pass for valid number\" in {\n      Util.isNumberInRange(\"1247\") should beTrue\n    }\n\n    \"pass for 0\" in {\n      Util.isNumberInRange(\"0\") should beTrue\n    }\n\n    \"pass for 3600\" in {\n      Util.isNumberInRange(\"3600\") should beTrue\n    }\n\n  }\n}\n```", "```java\nclass UtilTest extends FlatSpec with Matchers {\n\n  \"Character String\" should \"not be in range\" in {\n    Util.isNumberInRange(\"xyz\") should be(false)\n  }\n\n  \"Java null\" should \"not be in range\" in {\n    Util.isNumberInRange(null) should be(false)\n  }\n\n  \"Negative numbers\" should \"not be in range\" in {\n    Util.isNumberInRange(\"-2\") should be(false)\n  }\n\n  \"valid number\" should \"be in range\" in {\n    Util.isNumberInRange(\"1247\") should be(true)\n  }\n\n  \"0\" should \"be in range\" in {\n    Util.isNumberInRange(\"0\") should be(true)\n  }\n\n  \"3600\" should \"be in range\" in {\n    Util.isNumberInRange(\"3600\") should be(true)\n  }\n}\n```", "```java\nclass UtilSpec extends PlaySpecification {...}\n```", "```java\ntrait PlaySpecification extends Specification\n    with NoTimeConversions\n    with PlayRunners\n    with HeaderNames\n    with Status\n    with HttpProtocol\n    with DefaultAwaitTimeout\n    with ResultExtractors\n    with Writeables\n    with RouteInvokers\n    with FutureAwaits {\n}\n```", "```java\n    HeaderNames.ACCEPT_CHARSET = \"Accept-Charset\"\n    Status.FORBIDDEN = 403\n    ```", "```java\n        object HttpProtocol extends HttpProtocol\n        trait HttpProtocol {\n          // Versions\n          val HTTP_1_0 = \"HTTP/1.0\"\n\n          val HTTP_1_1 = \"HTTP/1.1\"\n\n          // Other HTTP protocol values\n          val CHUNKED = \"chunked\"\n        }\n        ```", "```java\nobject Helpers extends PlayRunners\n  with HeaderNames\n  with Status\n  with HttpProtocol\n  with DefaultAwaitTimeout\n  with ResultExtractors\n  with Writeables\n  with EssentialActionCaller\n  with RouteInvokers\n  with FutureAwaits\n```", "```java\nabstract class PlaySpec extends WordSpec with MustMatchers with OptionValues with WsScalaTestClient\n```", "```java\ncase class User(id: Option[Long], loginId: String, name: Option[String],\n  contactNo: Option[String], dob: Option[Long], address: Option[String])\n\nobject User{\n  implicit val userWrites = Json.writes[User]\n}\n\ntrait UserRepo {\n  def authenticate(loginId: String, password: String): Boolean\n\n  def create(u: User, host: String, password: String): Option[Long]\n\n  def update(u: User): Boolean\n\n  def findByLogin(loginId: String): Option[User]\n\n  def delete(userId: Long): Boolean\n\n  def find(userId: Long): Option[User]\n\n  def getAll: Seq[User]\n\n  def updateStatus(userId: Long, isActive: Boolean): Int\n\n  def updatePassword(userId: Long, password: String): Int\n}\n```", "```java\nobject UserController extends Controller {\n\n  /* GET a specific user's details */\n  def getUser(userId: Long) = Action {\n    val u = AnormUserRepo.find(userId)\n    if (u.isEmpty) {\n      NoContent\n    }\n else {\n      Ok(Json.toJson(u))\n    }\n  }\n....\n}\n```", "```java\nGET        /api/user/:userId        controllers.UserController.getUser(userId:Long)\n```", "```java\ntrait BaseUserController extends Controller {\nthis: Controller =>\n\n  val userRepo:UserRepo\n\n  /* GET a specific user's details */\n  def getUser(userId: Long) = Action {\n    val u = userRepo.find(userId)\n    if (u.isEmpty) {\n      NoContent\n    } else {\n      Ok(Json.toJson(u))\n    }\n  }\n\n}\n\nobject UserController extends BaseUserController{\n  val userRepo = AnormUserRepo\n}\n```", "```java\nclass UserControllerSpec extends Specification with Mockito {\n\n  \"UserController#getUser\" should {\n    \"be valid\" in {\n      val userRepository = mock[UserRepo]\n      val defaultUser = User(Some(1), \"loginId\", Some(\"name\"), Some(\"contact_no\"), Some(20L), Some(\"address\"))\n      userRepository.find(1) returns Option(defaultUser)\n\n      class TestController extends Controller with BaseUserController{\n        val userRepo = userRepository\n      }\n\n      val controller = new TestController\n      val result: Future[Result] = controller.getUser(1L).apply(FakeRequest())\n      val userJson: JsValue = contentAsJson(result)\n\n      userJson should be equalTo(Json.toJson(defaultUser))\n    }\n  }\n}\n```", "```java\nclass UserControllerTest extends PlaySpec with Results with MockitoSugar {\n\n  \"UserController#getUser\" should {\n    \"be valid\" in {\n      val userRepository = mock[UserRepo]\n      val defaultUser = User(Some(1), \"loginId\", Some(\"name\"), Some(\"contact_no\"), Some(20L), Some(\"address\"))\n      when(userRepository.find(1)) thenReturn Option(defaultUser)\n\n      class TestController extends Controller with BaseUserController{\n        val userRepo = userRepository\n      }\n\n      val controller = new TestController\n      val result: Future[Result] = controller.getUser(1L).apply(FakeRequest())\n\n      val userJson: JsValue = contentAsJson(result)\n      userJson mustBe Json.toJson(defaultUser)\n    }\n  }\n}\n```", "```java\nval appDependencies = Seq(\n    ...\n    \"com.google.inject\" % \"guice\" % \"3.0\",\n    \"javax.inject\" % \"javax.inject\" % \"1\"\n  )\n```", "```java\nobject Global extends GlobalSettings {\n\n  val injector = Guice.createInjector(new AbstractModule {\n    protected def configure() {\n      bind(classOf[UserRepo]).to(classOf[AnormUserRepo])\n    }\n  })\n\n  override def getControllerInstance[A](controllerClass: Class[A]): A = injector.getInstance(controllerClass)\n}\n```", "```java\n@Singleton\nclass UserController @Inject()(userRepo: UserRepo) extends Controller {\n\n  implicit val userWrites = Json.writes[User]\n\n  /* GET a specific user's details */\n  def getUser(userId: Long) = Action {\n    val u = userRepo.find(userId)\n    if (u.isEmpty) {\n      NoContent\n    }\n    else {\n      Ok(Json.toJson(u))\n    }\n  }\n\n}\n```", "```java\nGET        /api/user/:userId        @controllers.UserController.getUser(userId:Long)\n\n```", "```java\nobject UserController is not a member of package controllers\n[error] Note: class UserController exists, but it has no companion object.\n[error] GET        /api/user/:userId        controllers.UserController.getUser(userId:Long)\n\n```", "```java\nclass UserControllerSpec extends Specification with Mockito {\n\n  \"UserController#getUser\" should {\n    \"be valid\" in {\n      val userRepository = mock[AnormUserRepo]\n      val defaultUser = User(Some(1), \"loginId\", Some(\"name\"), Some(\"contact_no\"), Some(20L), Some(\"address\"))\n      userRepository.find(1) returns Option(defaultUser)\n\n      val controller = new UserController(userRepository)\n      val result: Future[Result] = controller.getUser(1L).apply(FakeRequest())\n      val userJson: JsValue = contentAsJson(result)\n\n      userJson should be equalTo(Json.toJson(defaultUser))\n    }\n  }\n}\n```", "```java\nclass UserControllerTest extends PlaySpec with Results with MockitoSugar {\n\n  \"UserController#getUser\" should {\n    \"be valid\" in {\n      val userRepository = mock[AnormUserRepo]\n      val defaultUser = User(Some(1), \"loginId\", Some(\"name\"), Some(\"contact_no\"), Some(20L), Some(\"address\"))\n      when(userRepository.find(1)) thenReturn Option(defaultUser)\n\n      val controller = new UserController(userRepository)\n      val result: Future[Result] = controller.getUser(1L).apply(FakeRequest())\n      val userJson: JsValue = contentAsJson(result)\n\n      userJson mustBe Json.toJson(defaultUser)\n    }\n  }\n}\n```", "```java\nobject DevErrorPageSpec extends PlaySpecification{\n\n  \"devError.scala.html\" should {\n\n    val testExceptionSource = new play.api.PlayException.ExceptionSource(\"test\", \"making sure the link shows up\") {\n      ...\n    }\n    â€¦.\n    \"show prod error page in prod mode\" in {\n      val fakeApplication = new FakeApplication() {\n        override val mode = play.api.Mode.Prod\n      }\n      running(fakeApplication) {\n        val result = DefaultGlobal.onError(FakeRequest(), testExceptionSource)\n        Helpers.contentAsString(result) must contain(\"Oops, an error occurred\")\n      }\n    }\n  }\n}\n```", "```java\ncase class FakeApplication(config: Map[String, Any] = Map(),\n                           path: File = new File(\".\"),\n                           sources: Option[SourceMapper] = None,\n                           mode: Mode.Mode = Mode.Test,\n                           global: GlobalSettings = DefaultGlobal,\n                           plugins: Seq[Plugin] = Nil) extends Application {\n  val classloader = Thread.currentThread.getContextClassLoader\n  lazy val configuration = Configuration.from(config)\n}\n```", "```java\ndef running[T](app: Application)(block: => T): T = {\n    synchronized {\n      try {\n        Play.start(app)\n        block\n      } finally {\n        Play.stop()\n      }\n    }\n  }\n```", "```java\n    class CountControllerSpec extends PlaySpecification with BeforeExample {\n\n      override def before: Any = {\n        TestHelper.clearDB\n      }\n\n      \"\"\"Counter query\"\"\" should {\n        \"\"\"fetch count of visits grouped by browser names\"\"\" in new WithApplication {\n          TestHelper.postSampleData\n\n          val queryString = \"\"\"applicationId=39&perspective=browser&from=1389949200000&till=1399145400000\"\"\".stripMargin\n\n          val request = FakeRequest(GET, \"/query/count?\" + queryString)\n          val response = route(request)\n          val result = response.get\n          status(result) must equalTo(OK)\n          contentAsJson(result) must equalTo(TestHelper.browserCount)\n        }\n      }\n    ```", "```java\n     val app = FakeApplication()\n        \"\"\"fetch count of visits grouped by browser names\"\"\" in new WithApplication(app) {\n    ```", "```java\n        \"\"\"fetch count of visits grouped by browser names\"\"\" in new WithServer(app = app, port = testPort) {\n     {\n          ...\n     }\n    ```", "```java\n    class AppSpec extends PlaySpecification {\n      val app: FakeApplication =\n        FakeApplication(\n          withRoutes = TestRoute\n        )\n\n        \"run in firefox\" in new WithBrowser(webDriver = WebDriverFactory(FIREFOX), app = app) {\n         browser.goTo(\"/testing\")\n         browser.$(\"#title\").getTexts().get(0) must equalTo(\"Test Page\")\n\n         browser.$(\"b\").click()\n\n         browser.$(\"#title\").getTexts().get(0) must equalTo(\"testing\")\n        }}\n    ```", "```java\n    class ExampleSpec extends PlaySpec with OneAppPerSuite {\n\n      // Override app if you need a FakeApplication with other than non-default parameters.\n      implicit override lazy val app: FakeApplication =\n        FakeApplication(additionalConfiguration = Map(\"ehcacheplugin\" -> \"disabled\"))\n\n      \"The OneAppPerSuite trait\" must {\n        \"provide a FakeApplication\" in {\n          app.configuration.getString(\"ehcacheplugin\") mustBe Some(\"disabled\")\n        }\n        \"make the FakeApplication available implicitly\" in {\n          def getConfig(key: String)(implicit app: Application) = app.configuration.getString(key)\n          getConfig(\"ehcacheplugin\") mustBe Some(\"disabled\")\n        }\n        \"start the FakeApplication\" in {\n          Play.maybeApplication mustBe Some(app)\n        }\n      }\n    }\n    ```", "```java\n    class DiffAppTest extends UnitSpec with OneAppPerTest {\n\n      private val colors = Seq(\"red\", \"blue\", \"yellow\")\n\n      private var colorCode = 0\n\n      override def newAppForTest(testData: TestData): FakeApplication = {\n        val currentCode = colorCode\n        colorCode+=1\n        FakeApplication(additionalConfiguration = Map(\"foo\" -> \"bar\",\n          \"ehcacheplugin\" -> \"disabled\",\n          \"color\" -> colors(currentCode)\n        ))\n      }\n\n      def getConfig(key: String)(implicit app: Application) = app.configuration.getString(key)\n\n      \"The OneAppPerTest trait\" must {\n        \"provide a FakeApplication\" in {\n          app.configuration.getString(\"color\") mustBe Some(\"red\")\n        }\n        \"make another FakeApplication available implicitly\" in {\n          getConfig(\"color\") mustBe Some(\"blue\")\n        }\n        \"make the third FakeApplication available implicitly\" in {\n          getConfig(\"color\") mustBe Some(\"yellow\")\n        }\n      }\n    }\n    ```", "```java\n    class ExampleSpec extends PlaySpec with OneServerPerSuite {\n\n      // Override app if you need a FakeApplication with other than non-default parameters.\n      implicit override lazy val app: FakeApplication =\n        FakeApplication(additionalConfiguration = Map(\"ehcacheplugin\" -> \"disabled\"))\n\n      \"The OneServerPerSuite trait\" must {\n        \"provide a FakeApplication\" in {\n          app.configuration.getString(\"ehcacheplugin\") mustBe Some(\"disabled\")\n        }\n        \"make the FakeApplication available implicitly\" in {\n          def getConfig(key: String)(implicit app: Application) = app.configuration.getString(key)\n          getConfig(\"ehcacheplugin\") mustBe Some(\"disabled\")\n        }\n        \"start the FakeApplication\" in {\n          Play.maybeApplication mustBe Some(app)\n        }\n        \"provide the port number\" in {\n          port mustBe Helpers.testServerPort\n        }\n        \"provide an actual running server\" in {\n          import java.net._\n          val url = new URL(\"http://localhost:\" + port + \"/boum\")\n          val con = url.openConnection().asInstanceOf[HttpURLConnection]\n          try con.getResponseCode mustBe 404\n          finally con.disconnect()\n        }\n      }\n    }\n    ```", "```java\n    class DiffServerTest extends PlaySpec with OneServerPerTest {\n\n      private val colors = Seq(\"red\", \"blue\", \"yellow\")\n\n      private var code = 0\n\n      override def newAppForTest(testData: TestData): FakeApplication = {\n        val currentCode = code\n        code += 1\n        FakeApplication(additionalConfiguration = Map(\"foo\" -> \"bar\",\n          \"ehcacheplugin\" -> \"disabled\",\n          \"color\" -> colors(currentCode)\n        ))\n      }\n\n      override lazy val port = 1234\n\n      def getConfig(key: String)(implicit app: Application) = app.configuration.getString(key)\n\n      \"The OneServerPerTest trait\" must {\n        \"provide a FakeApplication\" in {\n          app.configuration.getString(\"color\") mustBe Some(\"red\")\n        }\n        \"make another FakeApplication available implicitly\" in {\n          getConfig(\"color\") mustBe Some(\"blue\")\n        }\n        \"start server at specified port\" in {\n          port mustBe 1234\n        }\n      }\n    }\n    ```", "```java\n    @FirefoxBrowser\n    class ExampleSpec extends PlaySpec with OneServerPerSuite with OneBrowserPerSuite with FirefoxFactory {\n\n      // Override app if you need a FakeApplication with other than non-default parameters.\n      implicit override lazy val app: FakeApplication =\n        FakeApplication(\n          additionalConfiguration = Map(\"ehcacheplugin\" -> \"disabled\"),\n          withRoutes = TestRoute\n        )\n\n      \"The OneBrowserPerSuite trait\" must {\n        \"provide a FakeApplication\" in {\n          app.configuration.getString(\"ehcacheplugin\") mustBe Some(\"disabled\")\n        }\n        \"make the FakeApplication available implicitly\" in {\n          def getConfig(key: String)(implicit app: Application) = app.configuration.getString(key)\n          getConfig(\"ehcacheplugin\") mustBe Some(\"disabled\")\n        }\n        \"provide a web driver\" in {\n          go to (\"http://localhost:\" + port + \"/testing\")\n          pageTitle mustBe \"Test Page\"\n          click on find(name(\"b\")).value\n          eventually { pageTitle mustBe \"scalatest\" }\n        }\n      }\n    }\n    ```", "```java\n    class AllBrowsersPerSuiteTest extends PlaySpec with OneServerPerSuite with AllBrowsersPerSuite {\n\n      // Override newAppForTest if you need a FakeApplication with other than non-default parameters.\n      override lazy val app: FakeApplication =\n        FakeApplication(\n          withRoutes = TestRoute\n        )\n\n      // Place tests you want run in different browsers in the `sharedTests` method:\n      def sharedTests(browser: BrowserInfo) = {\n\n          \"navigate to testing \"+browser.name in {\n            go to (\"http://localhost:\" + port + \"/testing\")\n            pageTitle mustBe \"Test Page\"\n            click on find(name(\"b\")).value\n            eventually { pageTitle mustBe \"testing\" }\n          }\n\n          \"navigate to hello in a new window\"+browser.name in {\n            go to (\"http://localhost:\" + port + \"/hello\")\n            pageTitle mustBe \"Hello\"\n            click on find(name(\"b\")).value\n            eventually { pageTitle mustBe \"helloUser\" }\n          }\n      }\n\n      // Place tests you want run just once outside the `sharedTests` method\n      // in the constructor, the usual place for tests in a `PlaySpec`\n\n      \"The test\" must {\n        \"start the FakeApplication\" in {\n          Play.maybeApplication mustBe Some(app)\n        }\n      }\n    ```", "```java\n    @FirefoxBrowser\n    class ExampleSpec extends PlaySpec with OneServerPerTest with OneBrowserPerTest with FirefoxFactory {\n      ...\n    }\n    ```"]