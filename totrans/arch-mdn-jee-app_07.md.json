["```java\n@Stateless\npublic class CarManufacturer {\n    @Inject\n    CarFactory carFactory;\n\n    @PersistenceContext\n    EntityManager entityManager;\n\n    public Car manufactureCar(Specification spec) {\n        Car car = carFactory.createCar(spec);\n        entityManager.merge(car);\n        return car;\n    }\n}\n```", "```java\nimport org.junit.Before;\nimport org.junit.Test;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.*;\n\npublic class CarManufacturerTest {\n\n    private CarManufacturer testObject;\n\n    @Before\n    public void setUp() {\n        testObject = new CarManufacturer();\n        testObject.carFactory = mock(CarFactory.class);\n        testObject.entityManager = mock(EntityManager.class);\n    }\n\n    @Test\n    public void test() {\n        Specification spec = ...\n        Car car = ...\n\n        when(testObject.entityManager.merge(any())).then(a -> a.getArgument(0));\n        when(testObject.carFactory.createCar(any())).thenReturn(car);\n\n        assertThat(testObject.manufactureCar(spec)).isEqualTo(car);\n\n        verify(testObject.carFactory).createCar(spec);\n        verify(testObject.entityManager).merge(car);\n    }\n}\n```", "```java\nimport org.junit.runner.RunWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.MockitoJUnitRunner;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class CarManufacturerTest {\n\n    @InjectMocks\n    private CarManufacturer testObject;\n\n    @Mock\n    private CarFactory carFactory;\n\n    @Mock\n    private EntityManager entityManager;\n\n    @Test\n    public void test() {\n        ...\n        when(carFactory.createCar(any())).thenReturn(car);\n        ...\n        verify(carFactory).createCar(spec);\n    }\n}\n```", "```java\nimport org.junit.runners.Parameterized;\n\n@RunWith(Parameterized.class)\npublic class CarManufacturerMassTest {\n\n    private CarManufacturer testObject;\n\n    @Parameterized.Parameter(0)\n    public Color chassisColor;\n\n    @Parameterized.Parameter(1)\n    public EngineType engineType;\n\n    @Before\n    public void setUp() {\n        testObject = new CarManufacturer();\n        testObject.carFactory = mock(CarFactory.class);\n        ...\n    }\n\n    @Test\n    public void test() {\n        // chassisColor & engineType\n        ...\n    }\n\n    @Parameterized.Parameters(name = \"chassis: {0}, engine type: {1}\")\n    public static Collection<Object[]> testData() {\n        return Arrays.asList(\n                new Object[]{Color.RED, EngineType.DIESEL, ...},\n                new Object[]{Color.BLACK, EngineType.DIESEL, ...}\n        );\n    }\n}\n```", "```java\npublic class ManufactureCarTest {\n\n    private CarManufacturer carManufacturer;\n\n    @Before\n    public void setUp() {\n        carManufacturer = new CarManufacturer();\n        carManufacturer.carFactory = new CarFactory();\n        carManufacturer.entityManager = mock(EntityManager.class);\n    }\n\n    @Test\n    public void test() {\n        when(carManufacturer.entityManager.merge(any())).then(a -> a.getArgument(0));\n\n        Specification spec = ...\n        Car expected = ...\n\n        assertThat(carManufacturer.manufactureCar(spec)).isEqualTo(expected);\n        verify(carManufacturer.entityManager).merge(any(Car.class));\n    }\n}\n```", "```java\n@RunWith(MockitoJUnitRunner.class)\npublic class ManufactureCarTest {\n\n    @InjectMocks\n    private CarManufacturer carManufacturer;\n\n    @InjectMocks\n    private CarFactory carFactory;\n\n    @Mock\n    private EntityManager entityManager;\n\n    @Mock\n    private AssemblyLine assemblyLine;\n\n    @Mock\n    private Automation automation;\n\n    @Before\n    public void setUp() {\n        carManufacturer.carFactory = carFactory;\n\n        // setup required mock behavior such as ...\n        when(assemblyLine.assemble()).thenReturn(...);\n    }\n\n    @Test\n    public void test() {\n        Specification spec = ...\n        Car expected = ...\n\n        assertThat(carManufacturer.manufactureCar(spec)).isEqualTo(expected);\n        verify(carManufacturer.entityManager).merge(any(Car.class));\n    }\n}\n```", "```java\npublic class ManufactureCarTest {\n\n    private CarManufacturerComponent carManufacturer;\n    private CarFactoryComponent carFactory;\n\n    @Before\n    public void setUp() {\n        carFactory = new CarFactoryComponent();\n        carManufacturer = new CarManufacturerComponent(carFactory);\n    }\n\n    @Test\n    public void test() {\n        Specification spec = ...\n        Car expected = ...\n\n        assertThat(carManufacturer.manufactureCar(spec)).isEqualTo(expected);\n\n        carManufacturer.verifyManufacture(expected);\n        carFactory.verifyCarCreation(spec);\n    }\n}\n```", "```java\npublic class CarManufacturerComponent extends CarManufacturer {\n\n    public CarManufacturerComponent(CarFactoryComponent carFactoryComponent) {\n        entityManager = mock(EntityManager.class);\n        carFactory = carFactoryComponent;\n    }\n\n    public void verifyManufacture(Car car) {\n        verify(entityManager).merge(car);\n    }\n}\n```", "```java\npublic class CarFactoryComponent extends CarFactory {\n\n    public CarFactoryComponent() {\n        automation = mock(Automation.class);\n        assemblyLine = mock(AssemblyLine.class);\n        when(automation.isAutomated()).thenReturn(true);\n    }\n\n    public void verifyCarCreation(Specification spec) {\n        verify(assemblyLine).assemble(spec);\n        verify(automation).isAutomated();\n    }\n}\n```", "```java\nimport org.jglue.cdiunit.CdiRunner;\n\n@RunWith(CdiRunner.class)\npublic class ManufactureCarIT {\n\n    @Inject\n    CarManufacturer carManufacturer;\n\n    @Mock\n    EntityManager entityManager;\n\n    @Before\n    public void setUp() {\n        carManufacturer.entityManager = entityManager;\n    }\n\n    @Test\n    public void test() {\n        Specification spec = ...\n        Car expected = ...\n\n        assertThat(carManufacturer.manufactureCar(spec)).isEqualTo(expected);\n        verify(entityManager).merge(expected);\n    }\n}\n```", "```java\nimport org.jboss.arquillian.container.test.api.Deployment;\nimport org.jboss.arquillian.junit.Arquillian;\nimport org.jboss.shrinkwrap.api.ShrinkWrap;\nimport org.jboss.shrinkwrap.api.asset.EmptyAsset;\nimport org.jboss.shrinkwrap.api.spec.WebArchive;\n\n@RunWith(Arquillian.class)\npublic class ManufactureCarIT {\n\n    @Inject\n    CarManufacturer carManufacturer;\n\n    @Deployment\n    public static WebArchive createDeployment() {\n        return ShrinkWrap.create(WebArchive.class)\n                .addClasses(CarManufacturer.class)\n                // ... add other required dependencies\n                .addAsWebInfResource(EmptyAsset.INSTANCE, \"beans.xml\");\n    }\n\n    @Test\n    public void test() {\n        Specification spec = ...\n        Car expected = ...\n\n        assertThat(carManufacturer.manufactureCar(spec)).isEqualTo(expected);\n    }\n}\n```", "```java\n@Entity\n@Table(name = \"car_parts\")\npublic class CarPart {\n\n    @Id\n    @GeneratedValue\n    private long id;\n\n    @Basic(optional = false)\n    private String order;\n\n    @Enumerated(STRING)\n    @Basic(optional = false)\n    private PartType type;\n\n    ...\n}\n```", "```java\nimport javax.persistence.EntityTransaction;\nimport javax.persistence.Persistence;\n\npublic class CarPartIT {\n\n    private EntityManager entityManager;\n    private EntityTransaction transaction;\n\n    @Before\n    public void setUp() {\n        entityManager = Persistence.createEntityManagerFactory(\"it\").createEntityManager();\n        transaction = entityManager.getTransaction();\n    }\n\n    @Test\n    public void test() {\n        transaction.begin();\n\n        CarPart part = new CarPart();\n        part.setOrder(\"123\");\n        part.setType(PartType.CHASSIS);\n        entityManager.merge(part);\n\n        transaction.commit();\n    }\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<persistence version=\"2.2\" \n\n        xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/persistence\n        http://xmlns.jcp.org/xml/ns/persistence/persistence_2_2.xsd\">\n\n    <persistence-unit name=\"it\" transaction-type=\"RESOURCE_LOCAL\">\n        <class>com.example.cars.entity.CarPart</class>\n\n        <exclude-unlisted-classes>true</exclude-unlisted-classes>\n        <properties>\n            <property name=\"javax.persistence.jdbc.url\" value=\"jdbc:derby:./it;create=true\"/>\n            <property name=\"javax.persistence.jdbc.driver\" value=\"org.apache.derby.jdbc.EmbeddedDriver\"/>\n            <property name=\"javax.persistence.schema-generation.database.action\" value=\"drop-and-create\"/>\n        </properties>\n    </persistence-unit>\n</persistence>\n```", "```java\npublic class CarCreationTest {\n\n    @Test\n    public void testCarCreation() {\n\n        // verify car 1234 is not included in list of cars\n\n        // create car\n        //   with ID 1234,\n        //   diesel engine\n        //   and red color\n\n        // verify car 1234 has\n        //   diesel engine\n        //   and red color\n\n        // verify car 1234 is included in list of cars\n\n        // verify assembly line instruction for car 1234\n    }\n}\n```", "```java\nimport javax.ws.rs.core.GenericType;\n\npublic class CarCreationTest {\n\n    private CarManufacturer carManufacturer;\n    private AssemblyLine assemblyLine;\n\n    @Before\n    public void setUp() {\n        carManufacturer = new CarManufacturer();\n        assemblyLine = new AssemblyLine();\n\n        carManufacturer.verifyRunning();\n        assemblyLine.initBehavior();\n    }\n\n    @Test\n    public void testCarCreation() {\n        String id = \"X123A345\";\n        EngineType engine = EngineType.DIESEL;\n        Color color = Color.RED;\n\n        verifyCarNotExistent(id);\n\n        String carId = carManufacturer.createCar(id, engine, color);\n        assertThat(carId).isEqualTo(id);\n\n        verifyCar(id, engine, color);\n\n        verifyCarExistent(id);\n\n        assemblyLine.verifyInstructions(id);\n    }\n\n    private void verifyCarExistent(String id) {\n        List<Car> cars = carManufacturer.getCarList();\n        if (cars.stream().noneMatch(c -> c.getId().equals(id)))\n            fail(\"Car with ID '\" + id + \"' not existent\");\n    }\n\n    private void verifyCarNotExistent(String id) {\n        List<Car> cars = carManufacturer.getCarList();\n        if (cars.stream().anyMatch(c -> c.getId().equals(id)))\n            fail(\"Car with ID '\" + id + \"' existed before\");\n    }\n\n    private void verifyCar(String carId, EngineType engine, Color color) {\n        Car car = carManufacturer.getCar(carId);\n        assertThat(car.getEngine()).isEqualTo(engine);\n        assertThat(car.getColor()).isEqualTo(color);\n    }\n}\n```", "```java\npublic class CarManufacturer {\n\n    private static final int STARTUP_TIMEOUT = 30;\n    private static final String CARS_URI = \"http://test.car-manufacture.example.com/\" +\n            \"car-manufacture/resources/cars\";\n\n    private WebTarget carsTarget;\n    private Client client;\n\n    public CarManufacturer() {\n        client = ClientBuilder.newClient();\n        carsTarget = client.target(URI.create(CARS_URI));\n    }\n\n    public void verifyRunning() {\n        long timeout = System.currentTimeMillis() + STARTUP_TIMEOUT * 1000;\n\n        while (!isSuccessful(carsTarget.request().head())) {\n            // waiting until STARTUP_TIMEOUT, then fail\n            ...\n        }\n    }\n\n    private boolean isSuccessful(Response response) {\n        return response.getStatusInfo().getFamily() == Response.Status.Family.SUCCESSFUL;\n    }\n\n    public Car getCar(String carId) {\n        Response response = carsTarget.path(carId).request(APPLICATION_JSON_TYPE).get();\n        assertStatus(response, Response.Status.OK);\n        return response.readEntity(Car.class);\n    }\n\n    public List<Car> getCarList() {\n        Response response = carsTarget.request(APPLICATION_JSON_TYPE).get();\n        assertStatus(response, Response.Status.OK);\n        return response.readEntity(new GenericType<List<Car>>() {\n        });\n    }\n\n    public String createCar(String id, EngineType engine, Color color) {\n        JsonObject json = Json.createObjectBuilder()\n                .add(\"identifier\", id)\n                .add(\"engine-type\", engine.name())\n                .add(\"color\", color.name());\n\n        Response response = carsTarget.request()\n                .post(Entity.json(json));\n\n        assertStatus(response, Response.Status.CREATED);\n\n        return extractId(response.getLocation());\n    }\n\n    private void assertStatus(Response response, Response.Status expectedStatus) {\n        assertThat(response.getStatus()).isEqualTo(expectedStatus.getStatusCode());\n    }\n\n    ...\n}\n```", "```java\n---\nkind: Service\napiVersion: v1\nmetadata:\n  name: assembly-line\n  namespace: systemtest\nspec:\n  selector:\n    app: assembly-line\n  ports:\n    - port: 8080\n---\nkind: Deployment\napiVersion: apps/v1beta1\nmetadata:\n  name: assembly-line\n  namespace: systemtest\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: assembly-line\n    spec:\n      containers:\n      - name: assembly-line\n        image: docker.example.com/wiremock:2.6\n      restartPolicy: Always\n---\n```", "```java\nimport static com.github.tomakehurst.wiremock.client.ResponseDefinitionBuilder.okForJson;\nimport static com.github.tomakehurst.wiremock.client.WireMock.*;\nimport static java.util.Collections.singletonMap;\n\npublic class AssemblyLine {\n\n    public void initBehavior() {\n        configureFor(\"http://test.assembly.example.com\", 80);\n        resetAllRequests();\n\n        stubFor(get(urlPathMatching(\"/assembly-line/processes/[0-9A-Z]+\"))\n                .willReturn(okForJson(singletonMap(\"status\", \"IN_PROGRESS\"))));\n\n        stubFor(post(urlPathMatching(\"/assembly-line/processes\"))\n                .willReturn(status(202)));\n    }\n\n    public void verifyInstructions(String id) {\n        verify(postRequestedFor(urlEqualTo(\"/assembly-line/processes/\" + id))\n                .withRequestBody(carProcessBody()));\n    }\n\n    ...\n}\n```", "```java\nimport io.gatling.core.Predef._\nimport io.gatling.core.structure.ScenarioBuilder\nimport io.gatling.http.Predef._\nimport io.gatling.http.protocol.HttpProtocolBuilder\nimport scala.concurrent.duration._\n\nclass CarCreationSimulation extends Simulation {\n\n  val httpConf: HttpProtocolBuilder = http\n    .baseURL(\"http://test.car-manufacture.example.com/car-manufacture/resources\")\n    .acceptHeader(\"*/*\")\n\n  val scn: ScenarioBuilder = scenario(\"create_car\")\n    .exec(http(\"request_1\")\n      .get(\"/cars\"))\n    .exec(http(\"request_1\")\n      .post(\"/cars\")\n      .body(StringBody(\"\"\"{\"id\": \"X123A234\", \"color\": \"RED\", \"engine\": \"DIESEL\"}\"\"\")).asJSON\n      .check(header(\"Location\").saveAs(\"locationHeader\")))\n    .exec(http(\"request_1\")\n      .get(\"${locationHeader}\"))\n\n  pause(1 second)\n\n  setUp(\n    scn.inject(rampUsersPerSec(10).to(20).during(10 seconds))\n  ).protocols(httpConf)\n    .constantPauses\n\n}\n```", "```java\n#!/bin/bash\nset -e\ncd hello-cloud/\n\n# build\nmvn package\ndocker build -t hello-cloud .\n\n# deploy\ndocker run -d \\\n  --name hello-cloud-st \\\n  -p 8080:8080 \\\n  -v $(pwd)/config/local/application.properties:/opt/config/application.properties \\\n  hello-cloud\n\n# system tests\ncd ../hello-cloud-st/\nmvn test\n\n# stopping environment\ndocker stop hello-cloud-st\n```", "```java\n#!/bin/bash\n# previous steps omitted\n\ndocker run -d \\\n  --name assembly-line \\\n  -p 8181:8080 \\\n  docker.example.com/wiremock:2.6\n\ndocker run -d \\\n  --name car-manufacture-st \\\n  -p 8080:8080 \\\n  car-manufacture\n\n# ...\n```", "```java\n@Test\npublic void testCarCreation() {\n    id = \"X123A345\"\n    engine = EngineType.DIESEL\n    color = Color.RED\n\n    // verify car X123A345 not existent\n    response = carsTarget.request().get()\n    assertThat(response.status).is(OK)\n    cars = response.readEntity(List<Car>)\n    if (cars.stream().anyMatch(c -> c.getId().equals(id)))\n        fail(\"Car with ID '\" + id + \"' existed before\")\n\n    // create car X123A345\n    JsonObject json = Json.createObjectBuilder()\n            .add(\"identifier\", id)\n            .add(\"engine-type\", engine.name())\n            .add(\"color\", color.name())\n\n    response = carsTarget.request().post(Entity.json(json))\n    assertThat(response.status).is(CREATED)\n    assertThat(response.header(LOCATION)).contains(id)\n\n    // verify car X123A345\n    response = carsTarget.path(id).request().get()\n    assertThat(response.status).is(OK)\n    car = response.readEntity(Car)\n    assertThat(car.engine).is(engine)\n    assertThat(car.color).is(color)\n\n    // verify car X123A345 existent\n\n    // ... similar invocations as before\n\n    if (cars.stream().noneMatch(c -> c.getId().equals(id)))\n        fail(\"Car with ID '\" + id + \"' not existent\");\n}\n```", "```java\nimport org.assertj.core.api.AbstractAssert;\n\npublic class CarAssert extends AbstractAssert<CarAssert, Car> {\n\n    public CarAssert(Car actual) {\n        super(actual, CarAssert.class);\n    }\n\n    public static CarAssert assertThat(Car actual) {\n        return new CarAssert(actual);\n    }\n\n    public CarAssert isEnvironmentalFriendly() {\n        isNotNull();\n\n        if (actual.getSpecification().getEngine() != EngineType.ELECTRIC) {\n            failWithMessage(\"Expected car with environmental friendly engine but was <%s>\",\n                    actual.getEngine());\n        }\n\n        return this;\n    }\n\n    public CarAssert satisfies(Specification spec) {\n        ...\n    }\n\n    public CarAssert hasColor(Color color) {\n        isNotNull();\n\n        if (!Objects.equals(actual.getColor(), color)) {\n            failWithMessage(\"Expected car's color to be <%s> but was <%s>\",\n                    color, actual.getColor());\n        }\n\n        return this;\n    }\n\n    public CarAssert hasEngine(EngineType type) {\n        ...\n    }\n}\n```", "```java\nassertThat(car)\n        .hasColor(Color.BLACK)\n        .isEnvironmentalFriendly();\n```"]