["```java\nclass AThread extends Thread {\n  int i1,i2;\n  AThread(int i1, int i2){\n    this.i1 = i1;\n    this.i2 = i2;\n  }\n  public void run() {\n    IntStream.range(i1, i2)\n             .peek(Chapter07Concurrency::doSomething)\n             .forEach(System.out::println);\n  }\n}\n```", "```java\nprivate static int doSomething(int i){\n  IntStream.range(i, 99999).asDoubleStream().map(Math::sqrt).average();\n  return i;\n}\n```", "```java\nThread thr1 = new AThread(1, 4);\nthr1.start();\n\nThread thr2 = new AThread(11, 14);\nthr2.start();\n\nIntStream.range(21, 24)\n         .peek(Chapter07Concurrency::doSomething)\n         .forEach(System.out::println);\n\n```", "```java\nclass ARunnable implements Runnable {\n  int i1,i2;\n  ARunnable(int i1, int i2){\n    this.i1 = i1;\n    this.i2 = i2;\n  }\n  public void run() {\n    IntStream.range(i1, i2)\n             .peek(Chapter07Concurrency::doSomething)\n             .forEach(System.out::println);\n  }\n}\n```", "```java\nThread thr1 = new Thread(new ARunnable(1, 4));\nthr1.start();\n\nThread thr2 = new Thread(new ARunnable(11, 14));\nthr2.start();\n\nIntStream.range(21, 24)\n         .peek(Chapter07Concurrency::doSomething)\n         .forEach(System.out::println);\n\n```", "```java\nThread thr1 = new Thread(() -> IntStream.range(1, 4)\n                  .peek(Chapter07Concurrency::doSomething)\n                  .forEach(System.out::println));\nthr1.start();\n\nThread thr2 = new Thread(() -> IntStream.range(11, 14)\n                  .peek(Chapter07Concurrency::doSomething)\n                  .forEach(System.out::println));\nthr2.start();\n\nIntStream.range(21, 24)\n         .peek(Chapter07Concurrency::doSomething)\n         .forEach(System.out::println);\n\n```", "```java\npublic static void main(String arg[]) {\n  Thread thr1 = new Thread(() -> runImpl(1, 4));\n  thr1.start();\n\n  Thread thr2 = new Thread(() -> runImpl(11, 14));\n  thr2.start();\n\n  runImpl(21, 24);\n}\n\nprivate static void runImpl(int i1, int i2){\n  IntStream.range(i1, i2)\n           .peek(Chapter07Concurrency::doSomething)\n           .forEach(System.out::println);\n}\n```", "```java\nSystem.out.println(\"Id=\" + thr1.getId() + \", \" + thr1.getName() + \",\n                   priority=\" + thr1.getPriority() + \",\n                   state=\" + thr1.getState());\nSystem.out.println(\"Id=\" + thr2.getId() + \", \" + thr2.getName() + \",\n                   priority=\" + thr2.getPriority() + \",\n                   state=\" + thr2.getState());\n```", "```java\nThread thr1 = new Thread(() -> runImpl(1, 4), \"First Thread\");\nthr1.start();\n\nThread thr2 = new Thread(() -> runImpl(11, 14), \"Second Thread\");\nthr2.start();\n\n```", "```java\nprivate static class BRunnable implements Runnable {\n  int i1, result;\n  BRunnable(int i1){ this.i1 = i1; }\n  public int getCurrentResult(){ return this.result; }\n  public void run() {\n    for(int i = i1; i < i1 + 6; i++){\n      //Do something useful here\n      this.result = i;\n      try{ Thread.sleep(1000);\n      } catch(InterruptedException ex){}\n    }\n  }\n}\n```", "```java\nBRunnable r1 = new BRunnable(1);\nThread thr1 = new Thread(r1);\nthr1.start();\n\nIntStream.range(21, 29)\n         .peek(i -> thr1.interrupt())\n         .filter(i ->  {\n           int res = r1.getCurrentResult();\n           System.out.print(res + \" => \");\n           return res % 2 == 0;\n         })\n         .forEach(System.out::println);\n\n```", "```java\nclass Calculator{\n  private double prop;\n  public double calculate(int i){\n    this.prop = 2.0 * i;\n    DoubleStream.generate(new Random()::nextDouble)\n                .limit(10);\n    return Math.sqrt(this.prop);\n  }\n}\n```", "```java\nCalculator c = new Calculator();\nThread thr1 = new Thread(() -> System.out.println(IntStream.range(1, 4)\n          .peek(x ->DoubleStream.generate(new Random()::nextDouble)\n          .limit(10)).mapToDouble(c::calculate).sum()));\nthr1.start();\nThread thr2 = new Thread(() -> System.out.println(IntStream.range(1, 4)\n          .mapToDouble(c::calculate).sum()));\nthr2.start();\n\n```", "```java\nclass Calculator{\n  private double prop;\n synchronized public double calculate(int i){\n    this.prop = 2.0 * i;\n    DoubleStream.generate(new Random()::nextDouble).limit(10);\n    return Math.sqrt(this.prop);\n  }\n}\n```", "```java\nprivate static class Calculator{\n  private double prop;\n  public double calculate(int i){\n    synchronized (this) {\n      this.prop = 2.0 * i;\n      DoubleStream.generate(new Random()::nextDouble).limit(10);\n      return Math.sqrt(this.prop);\n    }\n  }\n\n```", "```java\nprivate static class Calculator{\n  private double prop;\n  public double calculate(int i){\n    DoubleStream.generate(new Random()::nextDouble).limit(10);\n    synchronized (this) {\n      this.prop = 2.0 * i;\n      return Math.sqrt(this.prop);\n    }\n  }\n\n```", "```java\nprivate static class Calculator{\n  private double prop;\n  private Object calculateLock = new Object();\n  public double calculate(int i){\n    DoubleStream.generate(new Random()::nextDouble).limit(10);\n    synchronized (calculateLock) {\n      this.prop = 2.0 * i;\n      return Math.sqrt(this.prop);\n    }\n  }\n}\n```", "```java\nThread thr1 = new Thread(() -> System.out.println(IntStream.range(1, 4)\n  .peek(x ->DoubleStream.generate(new Random()::nextDouble)\n  .limit(10))\n  .mapToDouble(x -> {\n     Calculator c = new Calculator();\n     return c.calculate(x);\n  }).sum()));\nthr1.start();\n\nThread thr2 = new Thread(() -> System.out.println(IntStream.range(1, 4)\n    .mapToDouble(x -> {\n       Calculator c = new Calculator();\n       return c.calculate(x);\n    }).sum()));\nthr2.start();\n\n```", "```java\n Map m = Collections.synchronizedMap(new HashMap());\n ...\n Set s = m.keySet(); // Needn't be in synchronized block\n ...\n synchronized (m) { // Synchronizing on m, not s!\n   Iterator i = s.iterator(); //Must be synchronized block\n   while (i.hasNext())\n   foo(i.next());\n }\n```", "```java\nList<String> l = \n       Collections.synchronizedList(new ArrayList<>());\nl.add(\"first\");\n//... code that adds more elements to the list\nint i = l.size();\n//... some other code\nl.add(i, \"last\");\n\n```", "```java\nclass MutableClass{\n  private int prop;\n  public MutableClass(int prop){\n    this.prop = prop;\n  }\n  public int getProp(){\n    return this.prop;\n  }\n  public void setProp(int prop){\n    this.prop = prop;\n  }\n}\n```", "```java\nfinal class ImmutableClass{\n  final private int prop;\n  public ImmutableClass(int prop){\n    this.prop = prop;\n  }\n  public int getProp(){\n    return this.prop;\n  }\n}\n```", "```java\nfinal class ImmutableClass{\n  private final double prop;\n  private final MutableClass mutableClass;\n  public ImmutableClass(double prop, MutableClass mc){\n    this.prop = prop;\n    this.mutableClass = new MutableClass(mc.getProp());\n  }\n  public double getProp(){\n    return this.prop;\n  }\n  public MutableClass getMutableClass(){\n    return new MutableClass(mutableClass.getProp());\n  }\n}\n```", "```java\nint getSomething(AnotherMutableClass amc, String whatever){\n  //... code is here that generates a value \"whatever\" \n  amc.setProperty(whatever);\n  //...some other code that generates another value \"val\"\n  amc.setAnotherProperty(val);\n  return amc.getIntValue();\n}\n```", "```java\n        void demoListAdd(List<String> list) {\n          System.out.println(\"list: \" + list);\n          try {\n            for (String e : list) {\n              System.out.println(e);\n              if (!list.contains(\"Four\")) {\n                System.out.println(\"Calling list.add(Four)...\");\n                list.add(\"Four\");\n              }\n            }\n          } catch (Exception ex) {\n            System.out.println(ex.getClass().getName());\n          }\n          System.out.println(\"list: \" + list);\n        }\n```", "```java\n        System.out.println(\"***** ArrayList add():\");\n        demoListAdd(new ArrayList<>(Arrays\n                          .asList(\"One\", \"Two\", \"Three\")));\n\n        System.out.println();\n        System.out.println(\"***** CopyOnWriteArrayList add():\");\n        demoListAdd(new CopyOnWriteArrayList<>(Arrays.asList(\"One\", \n                                         \"Two\", \"Three\")));\n\n```", "```java\n        void demoListRemove(List<String> list) {\n          System.out.println(\"list: \" + list);\n          try {\n            for (String e : list) {\n              System.out.println(e);\n              if (list.contains(\"Two\")) {\n                System.out.println(\"Calling list.remove(Two)...\");\n                list.remove(\"Two\");\n              }\n            }\n          } catch (Exception ex) {\n            System.out.println(ex.getClass().getName());\n          }\n          System.out.println(\"list: \" + list);\n        }\n```", "```java\n        System.out.println(\"***** ArrayList remove():\");\n        demoListRemove(new ArrayList<>(Arrays.asList(\"One\", \n                                         \"Two\", \"Three\")));\n\n        System.out.println();\n        System.out.println(\"***** CopyOnWriteArrayList remove():\");\n        demoListRemove(new CopyOnWriteArrayList<>(Arrays\n                                .asList(\"One\", \"Two\", \"Three\")));\n\n```", "```java\n        void demoListIterRemove(List<String> list) {\n          System.out.println(\"list: \" + list);\n          try {\n            Iterator iter = list.iterator();\n            while (iter.hasNext()) {\n              String e = (String) iter.next();\n              System.out.println(e);\n              if (\"Two\".equals(e)) {\n                System.out.println(\"Calling iter.remove()...\");\n                iter.remove();\n              }\n            }\n          } catch (Exception ex) {\n              System.out.println(ex.getClass().getName());\n          }\n          System.out.println(\"list: \" + list);\n        }\n```", "```java\n        System.out.println(\"***** ArrayList iter.remove():\");\n        demoListIterRemove(new ArrayList<>(Arrays\n                           .asList(\"One\", \"Two\", \"Three\")));\n\n        System.out.println();\n        System.out.println(\"*****\" \n                           + \" CopyOnWriteArrayList iter.remove():\");\n        demoListIterRemove(new CopyOnWriteArrayList<>(Arrays\n                           .asList(\"One\", \"Two\", \"Three\")));\n\n```", "```java\n        void demoRemoveIf(Collection<String> collection) {\n          System.out.println(\"collection: \" + collection);\n          System.out.println(\"Calling list.removeIf(e ->\" \n                              + \" Two.equals(e))...\");\n          collection.removeIf(e -> \"Two\".equals(e));\n          System.out.println(\"collection: \" + collection);\n        }\n```", "```java\n        System.out.println(\"***** ArrayList list.removeIf():\");\n        demoRemoveIf(new ArrayList<>(Arrays\n                          .asList(\"One\", \"Two\", \"Three\")));\n\n        System.out.println();\n        System.out.println(\"*****\" \n                   + \" CopyOnWriteArrayList list.removeIf():\");\n        demoRemoveIf(new CopyOnWriteArrayList<>(Arrays\n                          .asList(\"One\", \"Two\", \"Three\")));\n\n```", "```java\n        CopyOnWriteArrayList<String> list =  new CopyOnWriteArrayList<>\n                              (Arrays.asList(\"Five\", \"Six\", \"Seven\"));\n        list.addIfAbsent(\"One\");\n\n```", "```java\n        void demoNavigableSetRemove(NavigableSet<Integer> set) {\n          System.out.println(\"set: \" + set);\n          try {\n            for (int i : set) {\n              System.out.println(i);\n              System.out.println(\"Calling set.remove(2)...\");\n              set.remove(2);\n            }\n          } catch (Exception ex) {\n            System.out.println(ex.getClass().getName());\n          }\n          System.out.println(\"set: \" + set);\n        }\n```", "```java\n        System.out.println(\"***** TreeSet set.remove(2):\");\n        demoNavigableSetRemove(new TreeSet<>(Arrays\n                                    .asList(0, 1, 2, 3)));\n\n        System.out.println();\n        System.out.println(\"*****\"\n                           + \" ConcurrentSkipListSet set.remove(2):\");\n        demoNavigableSetRemove(new ConcurrentSkipListSet<>(Arrays\n                                     .asList(0, 1, 2, 3)));\n\n```", "```java\n        void demoNavigableSetIterRemove(NavigableSet<Integer> set){\n          System.out.println(\"set: \" + set);\n          try {\n            Iterator iter = set.iterator();\n            while (iter.hasNext()) {\n              Integer e = (Integer) iter.next();\n              System.out.println(e);\n              if (e == 2) {\n                System.out.println(\"Calling iter.remove()...\");\n                iter.remove();\n              }\n            }\n          } catch (Exception ex) {\n            System.out.println(ex.getClass().getName());\n          }\n          System.out.println(\"set: \" + set);\n        }\n```", "```java\n        System.out.println(\"***** TreeSet iter.remove():\");\n        demoNavigableSetIterRemove(new TreeSet<>(Arrays\n                                     .asList(0, 1, 2, 3)));\n\n        System.out.println();\n        System.out.println(\"*****\"\n                           + \" ConcurrentSkipListSet iter.remove():\");\n        demoNavigableSetIterRemove(new ConcurrentSkipListSet<>(\n                                  Arrays.asList(0, 1, 2, 3)));\n```", "```java\n        void demoNavigableSetAdd(NavigableSet<Integer> set) {\n          System.out.println(\"set: \" + set);\n          try {\n            int m = set.stream().max(Comparator.naturalOrder())\n                                .get() + 1;\n            for (int i : set) {\n              System.out.println(i);\n              System.out.println(\"Calling set.add(\" + m + \")\");\n              set.add(m++);\n              if (m > 6) {\n                break;\n              }\n            }\n          } catch (Exception ex) {\n            System.out.println(ex.getClass().getName());\n          }\n          System.out.println(\"set: \" + set);\n        }\n```", "```java\n        System.out.println(\"***** TreeSet set.add():\");\n        demoNavigableSetAdd(new TreeSet<>(Arrays\n                                     .asList(0, 1, 2, 3)));\n\n        System.out.println();\n        System.out.println(\"*****\" \n                            + \" ConcurrentSkipListSet set.add():\");\n        demoNavigableSetAdd(new ConcurrentSkipListSet<>(Arrays\n                                        .asList(0,1,2,3)));\n\n```", "```java\n        Map createhMap() {\n          Map<Integer, String> map = new HashMap<>();\n          map.put(0, \"Zero\");\n          map.put(1, \"One\");\n          map.put(2, \"Two\");\n          map.put(3, \"Three\");\n          return map;\n       }\n```", "```java\n        void demoMapPut(Map<Integer, String> map) {\n          System.out.println(\"map: \" + map);\n          try {\n            Set<Integer> keys = map.keySet();\n            for (int i : keys) {\n              System.out.println(i);\n              System.out.println(\"Calling map.put(8, Eight)...\");\n              map.put(8, \"Eight\");\n\n              System.out.println(\"map: \" + map);\n              System.out.println(\"Calling map.put(8, Eight)...\");\n              map.put(8, \"Eight\");\n\n              System.out.println(\"map: \" + map);\n              System.out.println(\"Calling\" \n                                 + \" map.putIfAbsent(9, Nine)...\");\n              map.putIfAbsent(9, \"Nine\");\n\n              System.out.println(\"map: \" + map);\n              System.out.println(\"Calling\" \n                                 + \" map.putIfAbsent(9, Nine)...\");\n              map.putIfAbsent(9, \"Nine\");\n\n              System.out.println(\"keys.size(): \" + keys.size());\n              System.out.println(\"map: \" + map);\n            }\n          } catch (Exception ex) {\n            System.out.println(ex.getClass().getName());\n          }\n        }\n```", "```java\n        System.out.println(\"***** HashMap map.put():\");\n        demoMapPut(createhMap());\n\n        System.out.println();\n        System.out.println(\"***** ConcurrentHashMap map.put():\");\n        demoMapPut(new ConcurrentHashMap(createhMap()));\n\n        System.out.println();\n        System.out.println(\"*****\"\n                          + \" ConcurrentSkipListMap map.put():\");\n        demoMapPut(new ConcurrentSkipListMap(createhMap()));\n\n```", "```java\n      Set<Integer> keys = map.keySet();\n```", "```java\n        String result = map.remove(2);\n\n```", "```java\n        boolean success = map.remove(2, \"Two\");\n```", "```java\n         iter.remove();\n```", "```java\n         boolean result = map.keySet().remove(2);\n```", "```java\n        boolean result = map.keySet().removeIf(e -> e == 2);\n```", "```java\n         class QueueElement {\n           private String value;\n           public QueueElement(String value){\n             this.value = value;\n           }\n           public String getValue() {\n             return value;\n           }\n         }\n```", "```java\n        class QueueProducer implements Runnable {\n          int intervalMs, consumersCount;\n          private BlockingQueue<QueueElement> queue;\n          public QueueProducer(int intervalMs, int consumersCount, \n                               BlockingQueue<QueueElement> queue) {\n            this.consumersCount = consumersCount;\n            this.intervalMs = intervalMs;\n            this.queue = queue;\n          }\n          public void run() {\n            List<String> list = \n               List.of(\"One\",\"Two\",\"Three\",\"Four\",\"Five\");\n            try {\n              for (String e : list) {\n                Thread.sleep(intervalMs);\n                queue.put(new QueueElement(e));\n                System.out.println(e + \" produced\" );\n              }\n              for(int i = 0; i < consumersCount; i++){\n                queue.put(new QueueElement(\"Stop\"));\n              }\n            } catch (InterruptedException e) {\n              e.printStackTrace();\n            }\n           }\n         }\n```", "```java\n        class QueueConsumer implements Runnable{\n          private String name;\n          private int intervalMs;\n          private BlockingQueue<QueueElement> queue;\n          public QueueConsumer(String name, int intervalMs, \n                               BlockingQueue<QueueElement> queue){\n             this.intervalMs = intervalMs;\n             this.queue = queue;\n             this.name = name;\n          }\n          public void run() {\n            try {\n              while(true){\n                String value = queue.take().getValue();\n                if(\"Stop\".equals(value)){\n                  break;\n                }\n                System.out.println(value + \" consumed by \" + name);\n                Thread.sleep(intervalMs);\n              }\n            } catch(InterruptedException e) {\n              e.printStackTrace();\n            }\n          }\n        }\n```", "```java\n        BlockingQueue<QueueElement> queue = \n                      new ArrayBlockingQueue<>(5);\n        QueueProducer producer = new QueueProducer(queue);\n        QueueConsumer consumer = new QueueConsumer(queue);\n        new Thread(producer).start();\n        new Thread(consumer).start();\n\n```", "```java\n        int shutdownDelaySec = 1;\n        ExecutorService execService = \n                       Executors.newSingleThreadExecutor();\n        Runnable runnable =  () -> System.out.println(\"Worker One did\n                                                       the job.\");\n        execService.execute(runnable);\n        runnable =   () -> System.out.println(\"Worker Two did the \n                                               job.\");\n        Future future = execService.submit(runnable);\n        try {\n          execService.shutdown();\n          execService.awaitTermination(shutdownDelaySec, \n                                       TimeUnit.SECONDS);\n        } catch (Exception ex) {\n          System.out.println(\"Caught around\" \n                  + \" execService.awaitTermination(): \" \n                  + ex.getClass().getName());\n        } finally {\n          if (!execService.isTerminated()) {\n            if (future != null && !future.isDone() \n                               && !future.isCancelled()){\n              System.out.println(\"Cancelling the task...\");\n              future.cancel(true);\n            }\n          }\n          List<Runnable> l = execService.shutdownNow();\n          System.out.println(l.size() \n                 + \" tasks were waiting to be executed.\" \n                 + \" Service stopped.\");\n        }\n```", "```java\n        void shutdownAndCancelTask(ExecutorService execService, \n                  int shutdownDelaySec, String name, Future future) {\n          try {\n            execService.shutdown();\n            System.out.println(\"Waiting for \" + shutdownDelaySec \n                         + \" sec before shutting down service...\");\n            execService.awaitTermination(shutdownDelaySec,\n                                         TimeUnit.SECONDS);\n          } catch (Exception ex) {\n            System.out.println(\"Caught around\" \n                        + \" execService.awaitTermination():\" \n                        + ex.getClass().getName());\n         } finally {\n           if (!execService.isTerminated()) {\n             System.out.println(\"Terminating remaining tasks...\");\n             if (future != null && !future.isDone() \n                                && !future.isCancelled()) {\n               System.out.println(\"Cancelling task \" \n                                  + name + \"...\");\n               future.cancel(true);\n             }\n           }\n           System.out.println(\"Calling execService.shutdownNow(\" \n                              + name + \")...\");\n           List<Runnable> l = execService.shutdownNow();\n           System.out.println(l.size() + \" tasks were waiting\" \n                         + \" to be executed. Service stopped.\");\n         }\n       }\n```", "```java\n        void executeAndSubmit(ExecutorService execService, \n                    int shutdownDelaySec, int threadSleepsSec) {\n          System.out.println(\"shutdownDelaySec = \" \n                            + shutdownDelaySec + \", threadSleepsSec = \" \n                            + threadSleepsSec);\n          Runnable runnable = () -> {\n            try {\n              Thread.sleep(threadSleepsSec * 1000);\n              System.out.println(\"Worker One did the job.\");\n            } catch (Exception ex) {\n              System.out.println(\"Caught around One Thread.sleep(): \" \n                                 + ex.getClass().getName());\n            }\n          };\n          execService.execute(runnable);\n          runnable = () -> {\n            try {\n              Thread.sleep(threadSleepsSec * 1000);\n              System.out.println(\"Worker Two did the job.\");\n            } catch (Exception ex) {\n              System.out.println(\"Caught around Two Thread.sleep(): \" \n                                 + ex.getClass().getName());\n            }\n          };\n          Future future = execService.submit(runnable);\n          shutdownAndCancelTask(execService, shutdownDelaySec, \n                                \"Two\", future);\n        }\n```", "```java\n        System.out.println(\"Executors.newSingleThreadExecutor():\");\n        ExecutorService execService = \n                       Executors.newSingleThreadExecutor();\n        executeAndSubmit(execService, 3, 1);\n\n        System.out.println();\n        System.out.println(\"Executors.newCachedThreadPool():\");\n        execService = Executors.newCachedThreadPool();\n        executeAndSubmit(execService, 3, 1);\n\n        System.out.println();\n        int poolSize = 3;\n        System.out.println(\"Executors.newFixedThreadPool(\" \n                                            + poolSize + \"):\");\n        execService = Executors.newFixedThreadPool(poolSize);\n        executeAndSubmit(execService, 3, 1);\n\n```", "```java\n        execService.awaitTermination(shutdownDelaySec, \n                                     TimeUnit.SECONDS);\n\n```", "```java\n        Future<Integer> future = execService.submit(() -> \n               System.out.println(\"Worker 42 did the job.\"), 42);\n        int result = future.get();\n\n```", "```java\n        Set<Integer> set = new HashSet<>();\n        while (set.size() < nWorkers){\n          for (Future<Integer> future : futures) {\n            if (future.isDone()){\n              try {\n                String id = future.get(1, TimeUnit.SECONDS);\n                if(!set.contains(id)){\n                  System.out.println(\"Task \" + id + \" is done.\");\n                  set.add(id);\n                }\n              } catch (Exception ex) {\n                System.out.println(\"Caught around future.get(): \"\n                                   + ex.getClass().getName());\n              }\n            }\n          }\n        }\n```", "```java\nclass Result {\n  private int sleepSec, result;\n  private String workerName;\n  public Result(String workerName, int sleptSec, int result) {\n    this.workerName = workerName;\n    this.sleepSec = sleptSec;\n    this.result = result;\n  }\n  public String getWorkerName() { return this.workerName; }\n  public int getSleepSec() { return this.sleepSec; }\n  public int getResult() { return this.result; }\n}\n```", "```java\nclass CallableWorkerImpl implements CallableWorker<Result>{\n  private int sleepSec;\n  private String name;\n  public CallableWorkerImpl(String name, int sleepSec) {\n    this.name = name;\n    this.sleepSec = sleepSec;\n  }\n  public String getName() { return this.name; }\n  public int getSleepSec() { return this.sleepSec; }\n  public Result call() {\n    try {\n      Thread.sleep(sleepSec * 1000);\n    } catch (Exception ex) {\n      System.out.println(\"Caught in CallableWorker: \" \n                         + ex.getClass().getName());\n    }\n    return new Result(name, sleepSec, 42);\n  }\n}\n```", "```java\ninterface CallableWorker<Result> extends Callable<Result> {\n  default String getName() { return \"Anonymous\"; }\n  default int getSleepSec() { return 1; }\n}\n```", "```java\nList<CallableWorker<Result>> createListOfCallables(int nSec){\n  return List.of(new CallableWorkerImpl(\"One\", nSec),\n                 new CallableWorkerImpl(\"Two\", 2 * nSec),\n                 new CallableWorkerImpl(\"Three\", 3 * nSec));\n}\n```", "```java\nvoid invokeAllCallables(ExecutorService execService, \n        int shutdownDelaySec, List<CallableWorker<Result>> callables) {\n  List<Future<Result>> futures = new ArrayList<>();\n  try {\n    futures = execService.invokeAll(callables, shutdownDelaySec, \n                                    TimeUnit.SECONDS);\n  } catch (Exception ex) {\n    System.out.println(\"Caught around execService.invokeAll(): \" \n                       + ex.getClass().getName());\n  }\n  try {\n    execService.shutdown();\n    System.out.println(\"Waiting for \" + shutdownDelaySec \n                       + \" sec before terminating all tasks...\");\n    execService.awaitTermination(shutdownDelaySec,\n                                 TimeUnit.SECONDS);\n  } catch (Exception ex) {\n    System.out.println(\"Caught around awaitTermination(): \" \n                       + ex.getClass().getName());\n  } finally {\n    if (!execService.isTerminated()) {\n      System.out.println(\"Terminating remaining tasks...\");\n      for (Future<Result> future : futures) {\n        if (!future.isDone() && !future.isCancelled()) {\n          try {\n            System.out.println(\"Cancelling task \"\n                       + future.get(shutdownDelaySec, \n                               TimeUnit.SECONDS).getWorkerName());\n            future.cancel(true);\n          } catch (Exception ex) {\n            System.out.println(\"Caught at cancelling task: \" \n                               + ex.getClass().getName());\n          }\n        }\n      }\n    }\n    System.out.println(\"Calling execService.shutdownNow()...\");\n    execService.shutdownNow();\n  }\n  printResults(futures, shutdownDelaySec);\n}\n```", "```java\nvoid printResults(List<Future<Result>> futures, int timeoutSec) {\n  System.out.println(\"Results from futures:\");\n  if (futures == null || futures.size() == 0) {\n    System.out.println(\"No results. Futures\" \n                       + (futures == null ? \" = null\" : \".size()=0\"));\n  } else {\n    for (Future<Result> future : futures) {\n      try {\n        if (future.isCancelled()) {\n          System.out.println(\"Worker is cancelled.\");\n        } else {\n          Result result = future.get(timeoutSec, TimeUnit.SECONDS);\n          System.out.println(\"Worker \"+ result.getWorkerName() + \n                             \" slept \" + result.getSleepSec() + \n                             \" sec. Result = \" + result.getResult());\n        }\n      } catch (Exception ex) {\n        System.out.println(\"Caught while getting result: \" \n                           + ex.getClass().getName());\n      }\n    }\n  }\n}\n```", "```java\nList<CallableWorker<Result>> callables = createListOfCallables(1);\nSystem.out.println(\"Executors.newSingleThreadExecutor():\");\nExecutorService execService = Executors.newSingleThreadExecutor();\ninvokeAllCallables(execService, 1, callables);\n\n```", "```java\nList<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks,\n                          long timeout, TimeUnit unit)\n```", "```java\nvoid invokeAnyCallables(ExecutorService execService, \n        int shutdownDelaySec, List<CallableWorker<Result>> callables) {\n  Result result = null;\n  try {\n    result = execService.invokeAny(callables, shutdownDelaySec,                                    TimeUnit.SECONDS);\n  } catch (Exception ex) {\n    System.out.println(\"Caught around execService.invokeAny(): \" \n                       + ex.getClass().getName());\n  }\n  shutdownAndCancelTasks(execService, shutdownDelaySec,\n                         new ArrayList<>());\n  if (result == null) {\n    System.out.println(\"No result from execService.invokeAny()\");\n  } else {\n    System.out.println(\"Worker \" + result.getWorkerName() + \n                       \" slept \" + result.getSleepSec() + \n                       \" sec. Result = \" + result.getResult());\n  }\n}\n```", "```java\nclass TrafficUnitWrapper {\n  private double speed;\n  private Vehicle vehicle;\n  private TrafficUnit trafficUnit;\n  public TrafficUnitWrapper(TrafficUnit trafficUnit){\n    this.trafficUnit = trafficUnit;\n    this.vehicle = FactoryVehicle.build(trafficUnit);\n  }\n  public TrafficUnitWrapper setSpeedModel(SpeedModel speedModel) {\n    this.vehicle.setSpeedModel(speedModel);\n    return this;\n  }\n  TrafficUnit getTrafficUnit(){ return this.trafficUnit;}\n  public double getSpeed() { return speed; }\n\n  public TrafficUnitWrapper calcSpeed(double timeSec) {\n    double speed = this.vehicle.getSpeedMph(timeSec);\n    this.speed = Math.round(speed * this.trafficUnit.getTraction());\n    return this;\n  }\n}\n```", "```java\nclass DateLocation {\n  private int hour;\n  private Month month;\n  private DayOfWeek dayOfWeek;\n  private String country, city, trafficLight;\n\n  public DateLocation(Month month, DayOfWeek dayOfWeek, \n                      int hour, String country, String city, \n                      String trafficLight) {\n    this.hour = hour;\n    this.month = month;\n    this.dayOfWeek = dayOfWeek;\n    this.country = country;\n    this.city = city;\n    this.trafficLight = trafficLight;\n  }\n  public int getHour() { return hour; }\n  public Month getMonth() { return month; }\n  public DayOfWeek getDayOfWeek() { return dayOfWeek; }\n  public String getCountry() { return country; }\n  public String getCity() { return city; }\n  public String getTrafficLight() { return trafficLight;}\n}\n```", "```java\nclass AverageSpeed extends RecursiveTask<Double> {\n  private double timeSec;\n  private DateLocation dateLocation;\n  private int threshold, trafficUnitsNumber;\n  public AverageSpeed(DateLocation dateLocation, \n                      double timeSec, int trafficUnitsNumber, \n                      int threshold) {\n    this.timeSec = timeSec;\n    this.threshold = threshold;\n    this.dateLocation = dateLocation;\n    this.trafficUnitsNumber = trafficUnitsNumber;\n  }\n  protected Double compute() {\n    if (trafficUnitsNumber < threshold) {\n      //... write the code here that calculates\n      //... average speed trafficUnitsNumber vehicles\n      return averageSpeed;\n    } else{\n      int tun = trafficUnitsNumber / 2;\n      //write the code that creates two tasks, each\n      //for calculating average speed of tun vehicles \n      //then calculates an average of the two results\n      double avrgSpeed1 = ...;\n      double avrgSpeed2 = ...;\n      return (double) Math.round((avrgSpeed1 + avrgSpeed2) / 2);\n    }\n  }\n}\n```", "```java\nvoid demo1_ForkJoin_fork_join() {\n  AverageSpeed averageSpeed = createTask();\n  averageSpeed.fork();  \n  double result = averageSpeed.join();\n  System.out.println(\"result = \" + result);\n}\n```", "```java\nAverageSpeed createTask() {\n  DateLocation dateLocation = new DateLocation(Month.APRIL, \n        DayOfWeek.FRIDAY, 17, \"USA\", \"Denver\", \"Main103S\");\n  double timeSec = 10d;\n  int trafficUnitsNumber = 1001;\n  int threshold = 100;\n  return new AverageSpeed(dateLocation, timeSec, \n                          trafficUnitsNumber, threshold);\n}\n```", "```java\nvoid demo2_ForkJoin_execute_join() {\n  AverageSpeed averageSpeed = createTask();\n  ForkJoinPool commonPool = ForkJoinPool.commonPool();\n  commonPool.execute(averageSpeed);\n  double result = averageSpeed.join();\n  System.out.println(\"result = \" + result);\n}\n```", "```java\nvoid demo3_ForkJoin_invoke() {\n  AverageSpeed averageSpeed = createTask();\n  ForkJoinPool commonPool = ForkJoinPool.commonPool();\n  double result = commonPool.invoke(averageSpeed);\n  System.out.println(\"result = \" + result);\n}\n```", "```java\ndouble speed = FactoryTraffic.getTrafficUnitStream(dateLocation, \n                                  trafficUnitsNumber)\n        .map(TrafficUnitWrapper::new)\n        .map(tuw -> tuw.setSpeedModel(FactorySpeedModel.\n                         generateSpeedModel(tuw.getTrafficUnit())))\n        .map(tuw -> tuw.calcSpeed(timeSec))\n        .mapToDouble(TrafficUnitWrapper::getSpeed)\n        .average()\n        .getAsDouble();\nSystem.out.println(\"speed(\" + trafficUnitsNumber + \") = \" + speed);\nreturn (double) Math.round(speed);\n\n```", "```java\nint tun = trafficUnitsNumber / 2;\nSystem.out.println(\"tun = \" + tun);\nAverageSpeed as1 = new AverageSpeed(dateLocation, timeSec, tun,\n                                    threshold);\nAverageSpeed as2 = new AverageSpeed(dateLocation, timeSec, tun,\n                                    threshold);\n\n```", "```java\nas1.fork();                //add to the queue\ndouble res1 = as1.join();  //wait until completed\nas2.fork();\ndouble res2 = as2.join();\nreturn (double) Math.round((res1 + res2) / 2);\n\n```", "```java\ndemo1_ForkJoin_fork_join();\ndemo2_ForkJoin_execute_join();\ndemo3_ForkJoin_invoke();\n\n```", "```java\nas1.fork();                   //add to the queue\ndouble res1 = as2.compute();  //get the result recursively\ndouble res2 = as1.join();     //wait until the queued task ends\nreturn (double) Math.round((res1 + res2) / 2);\n\n```", "```java\ndouble res1 = as1.invoke();\ndouble res2 = as2.invoke();\nreturn (double) Math.round((res1 + res2) / 2);\n\n```", "```java\nreturn ForkJoinTask.invokeAll(List.of(as1, as2))\n        .stream()\n        .mapToDouble(ForkJoinTask::join)\n        .map(Math::round)\n        .average()\n        .getAsDouble();\n\n```", "```java\n<T extends ForkJoinTask> Collection<T> invokeAll(Collection<T> tasks)\n```", "```java\nFlow.Publisher<T> - producer of items (messages) of type T\nFlow.Subscriber<T> - receiver of messages of type T\nFlow.Subscription - links producer and receiver\nFlow.Processor<T,R> - acts as both producer and receiver\n```", "```java\nvoid subscribe(Flow.Subscriber<? super T> subscriber)\n\n```", "```java\nclass DemoSubscriber<T> implements Flow.Subscriber<T> {\n  private String name;\n  private Flow.Subscription subscription;\n  public DemoSubscriber(String name){ this.name = name; }\n  public void onSubscribe(Flow.Subscription subscription) {\n    this.subscription = subscription;\n    this.subscription.request(0);\n  }\n  public void onNext(T item) {\n    System.out.println(name + \" received: \" + item);\n    this.subscription.request(1);\n  }\n  public void onError(Throwable ex){ ex.printStackTrace();}\n  public void onComplete() { System.out.println(\"Completed\"); }\n}\n```", "```java\nclass DemoSubscription<T> implements Flow.Subscription {\n  private final Flow.Subscriber<T> subscriber;\n  private final ExecutorService executor;\n  private Future<?> future;\n  private T item;\n  public DemoSubscription(Flow.Subscriber subscriber,\n                          ExecutorService executor) {\n    this.subscriber = subscriber;\n    this.executor = executor;\n  }\n  public void request(long n) {\n    future = executor.submit(() -> {\n      this.subscriber.onNext(item );\n    });\n  }\n  public synchronized void cancel() {\n    if (future != null && !future.isCancelled()) {\n      this.future.cancel(true);\n    }\n  }\n}\n```", "```java\nvoid demoSubscribe(SubmissionPublisher<Integer> publisher, \n        ExecutorService execService, String subscriberName){\n  DemoSubscriber<Integer> subscriber = \n                     new DemoSubscriber<>(subscriberName);\n  DemoSubscription subscription = \n            new DemoSubscription(subscriber, execService);\n  subscriber.onSubscribe(subscription);\n  publisher.subscribe(subscriber);\n}\n```", "```java\nExecutorService execService =  ForkJoinPool.commonPool();\ntry (SubmissionPublisher<Integer> publisher = \n                            new SubmissionPublisher<>()){\n  demoSubscribe(publisher, execService, \"One\");\n  demoSubscribe(publisher, execService, \"Two\");\n  demoSubscribe(publisher, execService, \"Three\");\n  IntStream.range(1, 5).forEach(publisher::submit);\n} finally {\n  //...make sure that execService is shut down\n}\n```", "```java\ntry {\n  execService.shutdown();\n  int shutdownDelaySec = 1;\n  System.out.println(\"Waiting for \" + shutdownDelaySec \n                     + \" sec before shutting down service...\");\n  execService.awaitTermination(shutdownDelaySec, TimeUnit.SECONDS);\n} catch (Exception ex) {\n  System.out.println(\"Caught around execService.awaitTermination(): \" \n                     + ex.getClass().getName());\n} finally {\n  System.out.println(\"Calling execService.shutdownNow()...\");\n  List<Runnable> l = execService.shutdownNow();\n  System.out.println(l.size() \n              +\" tasks were waiting to be executed. Service stopped.\");\n}\n```"]