["```java\napply plugin:'java'\n\nrepositories {\n  mavenCentral()\n}\n\ndependencies {\n  testCompile 'org.testng:testng:6.8.21'\n}\n\ntest {\n  ignoreFailures = true\n  useTestNG(){\n    suites(\"src/test/resources/testng.xml\")\n  }\n}\n```", "```java\npackage com.packtpub.ge.ch7;\n\nimport java.util.HashMap;\n\nimport org.testng.Assert;\nimport org.testng.annotations.AfterMethod;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Test;\n\npublic class HashTest {\n\n  private HashMap<Integer,String> hm;\n\n  @BeforeClass(alwaysRun = true)\n  public void setup(){\n    hm = new HashMap<Integer, String>();\n  }\n\n  @AfterMethod(alwaysRun = true)\n  public void cleantask(){\n    hm.clear();\n  }\n\n  @Test(groups = \"Smoke\")\n  public void verifyMapSize(){\n    Assert.assertEquals(hm.size(), 0);\n    hm.put(1, \"first\");\n    hm.put(2, \"second\");\n    hm.put(3, \"third\");\n    Assert.assertEquals(hm.size(), 3);\n  }\n\n  @Test(groups = \"Smoke\")\n  public void verifyMapNotNull(){\n    Assert.assertNotNull(hm);\n\n  }\n\n  @Test(groups = \"Integration\")\n  public void addEvenNumbers(){\n    hm.put(2, \"second\");\n    hm.put(4, \"fourth\");\n    Assert.assertEquals(hm.size(), 2);\n  }\n\n}\n```", "```java\n<!DOCTYPE suite SYSTEM \"http://testng.org/testng-1.0.dtd\" >\n<suite name=\"Suite1\" verbose=\"1\" >\n  <listeners>\n    <listener class-name=\"org.testng.reporters.EmailableReporter\" />\n  </listeners>\n  <test name=\"Smoke Test\">\n  <groups>\n    <run>\n      <exclude name=\"Integration\"  />\n      <include name=\"Smoke\"  />\n    </run>\n  </groups>\n  <classes>\n    <class name=\"com.packtpub.ge.ch7.HashTest\">\n    </class>\n  </classes>\n  </test>\n</suite>\n```", "```java\nC:.\n└───IntegrationSample\n └───src\n ├───main\n │   └───java\n └───test\n └───java\n\n```", "```java\nC:.\n└───IntegrationSample\n └───src\n ├───integrationTest\n │   └───java\n ├───main\n │   └───java\n └───test\n └───java\n\n```", "```java\napply plugin: 'java'\nsourceSets {\n   integrationTest {\n       java.srcDir file('src/integrationTest/java')\n       resources.srcDir file('src/integrationTest/resources') // to add the resources\n   }\n}\n\ntask runIntegrationTest(type: Test) {\n   testClassesDir = sourceSets.integrationTest.output.classesDir\n   classpath = sourceSets.integrationTest.runtimeClasspath\n}\n```", "```java\n> gradle dependencies\n------------------------------------------------------------\nRoot project\n------------------------------------------------------------\n……...\ncompile - Compile classpath for source set 'main'.\nNo dependencies\nintegrationTestCompile - Compile classpath for source set 'integration test'.\nNo dependencies\nintegrationTestRuntime - Runtime classpath for source set 'integration test'.\nNo dependencies\n……….\nBUILD SUCCESSFUL\nTotal time: 3.34 secs\n\n```", "```java\ndependencies {\n// other configuration dependencies \nintegrationTestCompile 'org.hibernate:hibernate:3.2.3.ga'\n}\n```", "```java\n> gradle runIntegrationTest\n\n```", "```java\napply plugin: 'jacoco'\n```", "```java\napply plugin: 'java'\napply plugin: 'jacoco'\n\nrepositories {\n  mavenCentral()\n}\n\ndependencies {\n  testCompile 'org.testng:testng:6.8.8'\n}\n\ntest{\n    systemProperty \"url\",System.properties['url']\n    useTestNG()\n}\n\njacocoTestReport.dependsOn test\n```", "```java\n  @Test\n  public void userEmailTest() {\n    User user1 = new User(\"User2\", \"User2 user2\", \"user2@abc.com\");\n    Assert.assertEquals(user1.getEmail(), \"user2@abc.com\");\n  }\n\n  @Test\n  public void userIdTest() {\n    User user1 = new User();\n    user1.setUserId(\"User3\");\n    user1.setName(\"User3 user3\");\n    user1.setEmail(\"user3@abc.com\");\n    Assert.assertEquals(user1.getName(), \"User3 user3\");\n    Assert.assertEquals(user1.getUserId(), \"User3\");\n  }\n```", "```java\n> gradle clean jacocoTestReport\n:clean\n:compileJava\n:processResources UP-TO-DATE\n:classes\n:compileTestJava\n:processTestResources UP-TO-DATE\n:testClasses\n:test\n:jacocoTestReport\n\nBUILD SUCCESSFUL\n\nTotal time: 7.433 secs\n\n```", "```java\njacoco {\n    toolVersion = \"<Required-Version>\"\n    reportsDir = file(\"Path_to_Jacoco_ReportDir\")\n}\n```", "```java\njacocoTestReport {\n    reports {\n        xml.enabled false\n        html.destination \"<Path_to_dircectory>\"\n    }\n}\n```", "```java\napply plugin: 'groovy'\napply plugin: \"sonar-runner\"\n\nrepositories {\n    mavenCentral()\n}\n\nversion = '1.0'\nrepositories {\n    mavenCentral()\n}\n\nsonarRunner {\n  sonarProperties {\n    property \"sonar.host.url\", \"http://<IP_ADDRESS>:<PORT>\"\n    property \"sonar.jdbc.url\",\n    \"jdbc:h2:tcp://<IP_ADDRESS>:<PORT>/sonar\"\n    property \"sonar.jdbc.driverClassName\", \"org.h2.Driver\"\n    property \"sonar.jdbc.username\", \"sonar\"\n    property \"sonar.jdbc.password\", \"sonar\"\n  }\n}\n```", "```java\n>gradle clean sonarRunner\n:clean\n:compileJava\n:processResources UP-TO-DATE\n:classes\n:compileTestJava\n:processTestResources UP-TO-DATE\n:testClasses\n:test\n:sonarRunner\nSonarQube Runner 2.3\nJava 1.7.0_51 Oracle Corporation (64-bit)\nWindows 7 6.1 amd64\nINFO: Runner configuration file: NONE\nINFO: Project configuration file: <Project_Home>\\UserService\\build\\tmp\\sonarRunner\\sonar-project.properties\nINFO: Default locale: \"en_IN\", source code encoding: \"windows-1252\" (analysis is platform dependent)\nINFO: Work directory: <Project_Home>\\UserService\\build\\sonar\nINFO: SonarQube Server 3.7.4\n...\n...\n\n```"]