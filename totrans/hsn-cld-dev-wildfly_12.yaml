- en: Future Direction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will describe briefly what the future of Java EE development
    is likely to look like—what the plans of evolving the platform are and how concepts
    provided by applications described in the book may be standardized in the future.
    We will also take a look at MicroProfile and Jakarta EE projects—describe their
    purpose, and emphasize how it can help you to move the platform forward at a faster
    pace.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the first chapter, we have sketched the process in which Java EE standard
    is being created, emphasizing the benefits it provides: portability and interoperability.
    It seems that, in order to keep it up with the IT pace, we''ve had to abandon
    those benefits. Let''s take a look at this problem more thoroughly.'
  prefs: []
  type: TYPE_NORMAL
- en: No more standards?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having a number of tools that allow us to immediately take advantage of modern
    software architectures has made our life easier. These tools have emerged during
    recent years in order to deal with the problems that have to be solved when building
    systems consisting of a large number of ephemeral services distributed across
    the network. It has to be noted that, although we have chosen the proven solutions
    such as Hystrix or Keycloak, we have lost the mentioned portability and interoperability
    benefits of Java EE.
  prefs: []
  type: TYPE_NORMAL
- en: The problem was that the process in which the Java EE standard was being created
    wasn't able to keep up with the rapid pace of the development of the emerging
    technologies. The specifications that provide a common standard for solving problems
    associated with cloud architecture (for example, distributed security or network
    resilience) are not yet a part of Java EE. What are the reasons for that?
  prefs: []
  type: TYPE_NORMAL
- en: 'The pace at which recent versions of the standard were created was too slow
    to follow all the recent innovations: Java EE 7 was released in 2013, whereas
    Java EE 8 was released in 2017\. This is not the only problem though. The specifications
    are designed according to the Java Community Process. The process is meticulous
    and contains a number of steps that are supposed to make sure that the resulting
    standard is ready to be published.'
  prefs: []
  type: TYPE_NORMAL
- en: This process works well when you are indeed standardizing—extracting the knowledge
    accumulated by the industry in order to provide common APIs to solve a problem
    in a proven way. On the other hand, it is not so good for innovation. If solutions
    to a given problem emerge, the creators of the specification have to effectively
    guess the correct solution. This is very hard no matter how meticulous the standard
    process is.
  prefs: []
  type: TYPE_NORMAL
- en: So, should we abandon all the standards after all, in order to follow the innovation?
    Put it another way; is losing standard benefits of portability, interoperability,
    and longtime support an inevitable consequence of the pace at which the current
    IT world is moving? Maybe we can do better than that. Let's discuss Eclipse MicroProfile.
  prefs: []
  type: TYPE_NORMAL
- en: Eclipse MicroProfile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Eclipse MicroProfile is a project that defines a programming model for developing
    Java microservices (Further reading, link 1). Similar to the Java EE standard,
    it contains a number of specifications that define the common way to provide functionalities
    needed by the `microservices.`
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the current content of the project (version 2.0):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d3df709a-bd88-45ab-bffe-47c4681a6592.png)'
  prefs: []
  type: TYPE_IMG
- en: As you will have noticed in the preceding diagram, there are a bunch of specifications
    that have come directly from Java EE, and that we have used extensively in our
    examples throughout the book (for example, JAX-RS or CDI). However, there are
    also a number of novel specifications that are supposed to deal with microservices-specific
    problems. As an example, the JWT Propagation specification deals with token-based
    security, and fault tolerance deals with the network failures.
  prefs: []
  type: TYPE_NORMAL
- en: As you are able to see, MicroProfile is an emerging project that will allow
    you to build microservices with portability benefits similar to Java EE. We covered
    in the preceding chapter that the way in which the Java EE standard was developed
    was making it less suitable for introducing the innovation. How is the MicroProfile
    different, then?
  prefs: []
  type: TYPE_NORMAL
- en: The microservices scope is not the only essential characteristic of the MicroProfile
    project. Another characteristic is the way in which the specifications are being
    developed. Specifications that constitute MicroProfile are developed in a fast,
    community-based process; if someone has an idea and a need to introduce something
    to the project, they can propose it to the community (Further reading, link 2).
    If the idea is accepted, it can be part of the project, released, and presented
    to the community.
  prefs: []
  type: TYPE_NORMAL
- en: 'Based on the community feedback, the specification can be amended in the next
    release. It is crucial to note that the project assumes a fast release cycle as
    one of its foundations. Taking these two aspects together, we can see why a process
    is a good tool for introducing innovation: a lightweight community acceptance
    process, along with a responsive feedback loop, allow for the quick introduction
    of new ideas and allows them to quickly evolve. This sounds great in theory, but
    does it work in practice?'
  prefs: []
  type: TYPE_NORMAL
- en: The way in which the MicroProfile project gains a momentum seems to confirm
    that. The initial version of the project consisted only of CDI, JAX-RS, and JSON-P
    specifications. From that time, as you were able to see in the diagram of the
    current version, a lot of work has been done and a bunch of new specifications
    has emerged.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the new way of developing specifications proves itself, you may be able
    to avoid the innovation/portability compromise. The rapid evolution of a common
    specification will allow you to provide innovation at a fast pace, whilst simultaneously
    keeping the benefits that were the strong points of Java EE: multi-vendor competitive
    implementation, portability, and interoperability between different implementations.'
  prefs: []
  type: TYPE_NORMAL
- en: One more thing to mention is that MicroProfile does not assume that the standardization
    process is obsolete and that there is no longer a place for it. On the contrary,
    when one of the MicroProfile specifications reach maturity and proves itself within
    the community, it will be delegated to a standard body and follow the standardization
    process.
  prefs: []
  type: TYPE_NORMAL
- en: Jakarta EE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It has been announced that the Java EE brand is changing its name to Jakarta
    EE, and, similar to MicroProfile, will be a project developed under the governance
    of the Eclipse foundation. The transformation of the standard is currently taking
    place, but following the initial success of the MicroProfile initiative it can
    be expected that the new way in which the standard will be created will learn
    a lot from its smaller brother, such as the separation of innovation and standardization,
    and an open community process with fast feedback, providing the latest innovation
    without sacrificing portability.
  prefs: []
  type: TYPE_NORMAL
- en: If the mentioned efforts prove themselves successful, we can expect a bright
    future for Enterprise Java being understood as a family of products that originates
    from the Java EE technology. We will deal with the product based on proven technology,
    which is based on years of experience and simultaneously alleviating its main
    drawback by allowing innovation at a fast pace.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After reading this book, you hopefully have a wider understanding of emerging
    enterprise software architectures of cloud computing and microservices. Furthermore,
    you will be familiar with a number of tools that you can use in order to implement
    systems taking advantage of both of those. We have shown you how to build microservices
    using WildFly Swarm, and deploy them in the cloud using OpenShift. In the later
    parts of the book, we have also shown you how to configure Continuous Deployment
    using Jenkins, security using Keycloak, and how to make your applications resilient
    to network failures using Hystrix. The emerging solutions of MicroProfile and
    Jakarta EE will hopefully make it able to innovate enterprise Java in a faster
    way. As a result, in the near future, you will be able to take advantage of tools
    that will allow you to solve problems described in this book based on rapidly
    developed specifications and, as a result, preserve the portability benefits of
    Java EE.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[https://microprofile.io/](https://microprofile.io/)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://wiki.eclipse.org/MicroProfile/FeatureInit](https://wiki.eclipse.org/MicroProfile/FeatureInit)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://projects.eclipse.org/projects/ee4j/charter](https://projects.eclipse.org/projects/ee4j/charter)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
