["```java\npublic class Blocks {\n 2\n 3     private int classScope;\n 4     private static int staticVar;\n 5    \n 6     static {\n 7        staticVar = 42;\n 8        System.out.printf(\n              \"static block staticVar is %d%n\",staticVar);\n 9     }\n10    \n11     public Blocks() {\n12        System.out.printf(\"constructor method block%n\");\n13     }\n14    \n15     public void perform() {\n16        int methodScope;\n17        \n18        if (classScope > 0) {\n19           int blockScope = 4;\n20        }\n21          \n22        {\n23           int classScope = 3;\n24           this.classScope = classScope;\n25        }\n26     }\n27  }\n```", "```java\n1  int x = 4;\n2  printHeader();\n3  d = Math.sqrt(aDoubleValue);\n```", "```java\nnumberOfTrees > 10 && numberOfSquirrels > 20\n```", "```java\nint intValue = 27;\ndouble doubleValue = intValue;\n```", "```java\ndouble doubleValue = 23.76;\nint intValue = doubleValue;\n```", "```java\nint intValue = (int) doubleValue;\n```", "```java\n        For (int x = 0; x < 10; ++x) {\n            System.out.printf(\"Value of x is %d%n\", x);\n        }\n```", "```java\n        int x;\n        for (x = 0; x < 10; ++x, doMethod()) {\n            System.out.printf(\"Value of x is %d%n\", x);\n        }\n```", "```java\n        var rand = new Random();\n        int x = rand.nextInt(12);\n        while (x < 10) {\n            x = rand.nextInt(12);\n            System.out.printf(\"x = %d%n\", x);\n        }\n```", "```java\n        Var rand = new Random();\n        int x;\n        do {\n            x = rand.nextInt(12);\n            System.out.printf(\"x = %d%n\", x);\n        } while (x < 10);\n```", "```java\nif (age >= 65) {\n    designation = \"Senior\";\n}\n```", "```java\nif (age >= 65) {\n    designation = \"Senior\";\n} else {\n    designation = \"Adult\";\n}\n```", "```java\nString designation = (age >= 65) ? \"Senior\" : \"Adult\";\n```", "```java\n        if (age < 12) {\n            designation = \"child\";\n        } else if (age < 18) {\n            designation = \"teenager\";\n        } else if (age < 25) {\n            designation = \"young adult\";\n        } else if (age < 65) {\n            designation = \"adult\";\n        } else {\n            designation = \"senior\";\n        }\n```", "```java\n        double postage;\n        int zone = 3;\n        switch (zone) {\n            case 1:\n                postage = 2.25;\n                break;\n            case 2:\n                postage = 4.50;\n                break;\n            case 3:\n                postage = 7.75;\n                break;\n            default:\n                postage = 10.00;\n        }\n```", "```java\n        String continent;\n        String country = \"Japan\";\n\n        switch (country) {\n            case \"UK\":\n            case \"France\":\n            case \"Germany\":\n                continent = \"Europe\";\n                break;\n            case \"Canada\":\n            case \"USA\":\n            case \"Mexico\":\n                continent = \"North America\";\n                break;\n            default:\n                continent = \"Not found\";\n        }\n```", "```java\n        postage = switch (zone) {\n            case 1 -> 2.25;\n            case 2 -> 4.50;\n            case 3 -> 7.75;\n            default -> 10.00;\n        };\n```", "```java\n        continent = switch (country) {\n            case \"UK\", \"France\", \"Germany\" -> \"Europe\";\n            case \"Canada\", \"USA\", \"Mexico\" -> \"North America\";\n            default -> \"Not found\";\n        };\n```", "```java\n        switch (continent) {\n           case \"Europe\":\n                showEuropeMap();\n                break;\n            case \"North America\":\n                showNorthAmericaMap();\n                break;\n            default:\n                showNotFound();\n        }\n```", "```java\n        switch (continent) {\n            case \"Europe\" -> showEuropeMap();\n            case \"North America\" -> showNorthAmericaMap();\n            default -> showNotFound();\n        }\n```", "```java\n        String designation;\n        Object value = 4;\n        designation = switch (value) {\n            case Integer I when i < 12 ->\n               \"child\";\n            case Integer i when i < 18 ->\n               \"teenage\";\n            case Integer i when i < 25 ->\n               \"young adult\";\n            case Integer i when i < 65 ->\n               \"adult\";\n            default ->\n               \"senior\";\n        };\n```", "```java\npublic class FileException {\n2    \n3      public void doCheckedException() {\n4          List<String> fileContents = null;\n5          Path path2 = Paths.get(\"c:/temp/textfile.tx\"\");\n6          try {\n7              fileContents = Files.readAllLines(path2);\n8                 System.out.printf(\"%s%\", fileContents);\n9          } catch (NoSuchFileException ex) {\n10              ex.printStackTrace();\n11         } catch(IOException ex) {\n12              ex.printStackTrace();\n13         }\n14      }\n15\n16      public void doUncheckedException() {\n17          int dividend = 8;\n18          int divisor = 0;\n19          int result = dividend / divisor;\n20          System.out.printf(\"%d%\", result);\n21      }\n22    \n23      public void perform() {\n24          checkedException();\n25          uncheckedException();\n26      }\n27\n28      public static void main(String[] args) {\n29          new FileException().perform();\n30      }\n31  }\n```", "```java\nat com.kenfogel.FileException.doCheckedException(FileException.java:17)\n```", "```java\n        } catch(IOException ex) {\n            ex.printStackTrace();\n            System.exit(12);\n        }\n```", "```java\n        } catch(IOException ex) {\n            ex.printStackTrace();\n            throw ex;\n        }\n```", "```java\n    public void doCheckedException() throws IOException {\n```", "```java\n        try {\n            checkedException();\n        } catch(IOException ex) {\n            ex.printStackTrace();\n        }\n```", "```java\npublic void doFinallyExample(int dividend, int divisor) {\n    int result = 0;\n    try {\n        result = dividend / divisor;\n    } catch (ArithmeticException ex) {\n        ex.printStackTrace();\n    } finally {\n        System.out.printf(\n            \"Finally block is always executed%n\");\n    }\n}\n```", "```java\npublic class NegativeNumberException extends Exception{}\n```", "```java\n    public void doCustomException(int value) \n                     throws NegativeNumberException {\n        if (value < 0) {\n            throw new NegativeNumberException();\n        }\n        System.out.printf(\"value = %d%n\", value);\n    }\n```", "```java\n    public void makeCustomException() {\n        try {\n            doCustomException(-1);\n        } catch (NegativeNumberException ex) {\n            ex.printStackTrace();\n        }\n    }\n```", "```java\ncom.kenfogel.NegativeNumberException\n  at com.kenfogel.FileException.doCustomException(FileException.java:39)\n  at com.kenfogel.FileException.makeCustomException(FileException.java:46)\n  at com.kenfogel.FileException.perform(FileException.java:69)\n  at com.kenfogel.FileException.main(FileException.java:73)\n```"]