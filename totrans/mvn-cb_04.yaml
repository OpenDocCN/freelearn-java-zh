- en: Chapter 4. Essential Maven Plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will look at the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the Maven Clean plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Maven Compiler plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the compiler used by the Maven Compiler plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specifying the Java version for the Compiler plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Maven Surefire plugin to run unit tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Maven Failsafe plugin to run integration tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Maven Resources plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filtering using resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Eclipse to run Maven goals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using NetBeans to run Maven goals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using IntelliJ IDEA to run Maven goals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned about the Maven lifecycle and the phases
    and goals of the lifecycle, understood the essential elements of the pom project
    configuration file and the settings file, and learned to use Maven profiles and
    properties.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will look at how to add and configure plugins to the pom
    file and use them to perform essential build tasks. Maven has a plugin architecture,
    and except for core functionalities, every task in Maven is done using plugins.
    There are a number of plugins that are provided by Maven. In addition, there are
    several third-party plugins. Maven also provides a mechanism for users to develop
    their own plugins if they choose to do so.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Maven Clean plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a project is built, it is important to ensure that it is not adversely
    affected by artifacts of an earlier build. Usually, build tools generate artifacts
    in a well-defined folder, namely the `target` folder, called **project working
    directory**. Before a new build, this folder is usually deleted.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Maven is set up on your system and is verified to work. To do this, refer to
    the first three recipes of [Chapter 1](ch01.html "Chapter 1. Getting Started"),
    *Getting Started*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s start using the Maven Clean plugin by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the command prompt.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following Maven command in the simple Maven project that we created
    in the *Creating a simple project with Maven* recipe in [Chapter 1](ch01.html
    "Chapter 1. Getting Started"), *Getting Started*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Observe the various steps that get executed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If there are no files/folders to delete, you will not see the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the `clean` phase is invoked, Maven automatically infers that the `clean`
    lifecycle is invoked.
  prefs: []
  type: TYPE_NORMAL
- en: It uses the Maven Clean plugin for this. The plugin has only one goal, namely
    `clean`, to clean the working directory.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of Maven, the working directory is called `target`. Maven creates
    this directory when a build is done. The `clean` goal of the plugin attempts to
    delete this directory.
  prefs: []
  type: TYPE_NORMAL
- en: As `clean` is a separate lifecycle from the `default` (build) lifecycle, `clean`
    needs to be explicitly called before the `default` lifecycle if you need to ensure
    that the working directory is removed.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will discuss how to run the Clean plugin automatically during
    the build, the steps to skip the deletion of working directory, and the process
    of deleting some additional files/folders.
  prefs: []
  type: TYPE_NORMAL
- en: Cleaning automatically
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the previous example, as we used the default behavior of the plugin and did
    not need to make any configurations, we did not need to make any change to the
    pom configuration file. However, what if we want to ensure that the `clean` goal
    is run without explicitly calling it?
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, we need to define the plugin with some parameters in our pom file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us add the following code in our pom file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Though the preceding declaration may look verbose, all we are asking is for
    the `clean` goal to be invoked during the `initialize` phase of the project. We
    are identifying this `execution` with an `id` called `auto-clean`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now run the following command on the command prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You will see the following screenshot:![Cleaning automatically](img/6124OS_04_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Even though we did not call the `clean` phase, the `clean` goal got invoked
    because it was configured in the pom file to run in the `initialize` phase.
  prefs: []
  type: TYPE_NORMAL
- en: Skipping the deletion of the working directory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let us look at the converse of the preceding use case. For some reason, we
    do not want the working directory to be deleted, even if `clean` is run. To do
    this, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Configure the plugin as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command on the command prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Observe the output, which is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Setting the `skip` plugin property to `true` indicates to Maven that the `clean`
    goal must be skipped.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting additional folders/files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'What if your project has an additional folder, say `report`, besides `target`,
    which is perhaps created by another script, and you want that to be deleted as
    well? We use the following steps to do the same:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Configure the plugin as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You have now configured the plugin to delete an additional directory
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create a `report` folder for the purpose of testing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command on command prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will now see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `report` folder is deleted as well. In fact, Maven can be configured to
    delete (or not delete) specific folders and files inside that folder as well.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Maven Compiler plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Compilation is an essential task performed by a build tool. Maven uses the Maven
    Compiler plugin to do the compilation. The plugin provides several configurations
    to make the compilation flexible.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To use the Maven Compiler plugin, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a command prompt.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following Maven command on the simple project that we created in the
    *Creating a simple project with Maven* recipe in [Chapter 1](ch01.html "Chapter 1. Getting
    Started"), *Getting Started*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Observe the output, which is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `compile` parameter indicates the invocation of the `default` lifecycle
    to Maven. As illustrated in the *Understanding the Maven lifecycle, phases, and
    goals* recipe in [Chapter 3](ch03.html "Chapter 3. Maven Lifecycle"), *Maven Lifecycle*,
    Maven runs all the phases up to and including the `compile` phase in order.
  prefs: []
  type: TYPE_NORMAL
- en: The `compile` phase itself essentially runs the `compile` goal of the Maven
    Compiler plugin.
  prefs: []
  type: TYPE_NORMAL
- en: This compiles the Java source files to classes in the `target/classes` folder.
  prefs: []
  type: TYPE_NORMAL
- en: One question would have struck you. What about the test classes? Why does the
    `compile` phase not compile the test sources?
  prefs: []
  type: TYPE_NORMAL
- en: The answer lies in the way Maven handles the lifecycle and phases of the lifecycle.
    Why would you want to compile the test sources unless you want to run the tests?
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What if we want to compile the test sources?
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us try running the following command on the command prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Observe the output as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/6124OS_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As we specified the `test` phase, Maven ran all phases prior to it, which includes
    compiling the test sources using the `testCompile` goal of the Maven Compiler
    plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the compiler used by the Maven Compiler plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let us say we are running Maven using JDK 7 but our project requires the sources
    to be compiled using JDK 8\. Essentially, we want to use a JDK for compilation
    that is different from the JDK running Maven.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, we can specify the compiler we want to use to Maven.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the following steps to change the compiler used by the Maven Compiler plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the command prompt.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Define a Maven property to store the location details for Java 8:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The portable way to do this would be to define this property in a `profile`
    in the user's `settings.xml` file. This is because the location of `JAVA_HOME`
    may be different for different users based on their operating system or preferred
    installation location.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following plugin configuration to the Maven project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The `fork` element needs to be set to `true` for the preceding code to work.
    Maven will invoke the different java compiler in a separate thread and hence the
    need to fork. This is so that Maven can load a different JVM corresponding to
    a different JDK.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Run the following command on a command prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There would no visible difference in the way the compilation happens, except
    that now, the compiler specified in the `executable` element will get invoked.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Specifying the Java version for the Compiler plugin* recipe in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specifying the Java version for the Compiler plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we created a new project in Eclipse, you would have observed the following
    warning:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Specifying the Java version for the Compiler plugin](img/6124OS_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Why does this error occur? This is because the Maven Compiler plugin, by default,
    considers the `source` and `target` Java version to be `1.5` (for backward compatibility
    reasons).
  prefs: []
  type: TYPE_NORMAL
- en: Let us resolve this warning.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let us assume you have configured Java 8 as the default Java runtime in Eclipse,
    and perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Eclipse project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following configuration to the Maven Compiler plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Alternately, add the following properties in the `properties` element (this
    is essentially a shortcut for the earlier process):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Check if the warning goes away.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the `source` and `target` versions of Java are explicitly set to the compiler,
    the version of java used in the source code as well as the desired version of
    the compiled classes are unambiguous. There is no likelihood of the compiler compiling
    to the incorrect target version of Java.
  prefs: []
  type: TYPE_NORMAL
- en: Consequently, the Eclipse warning goes away.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You may need to pass compiler arguments in the `compilerArguement` element
    to the compiler. For instance, you may want to identify the usage of deprecated
    APIs in the code. You can do this by adding the following configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'When run on a code that has a deprecation, you can see the relevant lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Using the Maven Surefire plugin to run unit tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A best practice of software development is writing automated unit tests for
    the code that you develop. Let us now see how to run these tests.
  prefs: []
  type: TYPE_NORMAL
- en: The plugin that does this job is the Maven Surefire plugin.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To run unit tests using the Maven Surefire plugin, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the command prompt.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command on one of our sample projects:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Observe the various steps that get executed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `test` parameter indicates the invocation of the `default` lifecycle to
    Maven. As illustrated in the *Understanding the Maven lifecycle, phases, and goals*
    recipe in [Chapter 3](ch03.html "Chapter 3. Maven Lifecycle"), *Maven Lifecycle*,
    Maven runs all the phases up to and including the `test` phase, in order.
  prefs: []
  type: TYPE_NORMAL
- en: The `test` phase itself essentially runs the `test` goal of the Maven Surefire
    plugin.
  prefs: []
  type: TYPE_NORMAL
- en: This runs the test classes that are present in the `target/test-classes` folder.
  prefs: []
  type: TYPE_NORMAL
- en: The test that we have is a test written using the JUnit framework. Not only
    does the plugin run the test, it also generates a test report that can be used
    to analyze failures as well as test coverage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check the `surefire-reports` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/6124OS_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: While the text file contains the summary report, the XML file has the details
    of each of the tests.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Surefire plugin provides many configurations to make testing easier.
  prefs: []
  type: TYPE_NORMAL
- en: Using TestNG
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: JUnit is not the only way to write automated unit tests. You could use TestNG
    ([http://testng.org](http://testng.org)) or even write your tests without using
    any framework (by using Java asserts).
  prefs: []
  type: TYPE_NORMAL
- en: Surefire determines the framework to be used based on the dependencies that
    have been defined.
  prefs: []
  type: TYPE_NORMAL
- en: Our earlier example ran JUnit tests because we had defined the `junit` dependency
    in the pom file.
  prefs: []
  type: TYPE_NORMAL
- en: Let us now write a test using TestNG and see what needs to change for it to
    work. Refer to the Maven project with TestNG.
  prefs: []
  type: TYPE_NORMAL
- en: 'The only change in the pom file is to replace the `junit` dependency with `testng`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command on command prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The tests are now run in using TestNG:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, examine the `surefire-reports` folder. It has a different set of files
    corresponding to `testng`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using TestNG](img/6124OS_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The same tests work with TestNG and JUnit as TestNG can run JUnit tests.
  prefs: []
  type: TYPE_NORMAL
- en: Skipping tests
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There may be situations where you might not want to run the tests; some tests
    are possibly broken. This can be done in the following ways:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Configuring the Surefire plugin in the pom file: Configure your Surefire plugin
    in the pom.xml file using the following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, run the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will see the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Issuing an `mvn` command with a command-line parameter: The tests can be skipped
    even by issuing the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Skipping the compilation of test sources
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The skipTests parameter used in the preceding mvn command skips running of
    tests, but the test sources still get compiled by the earlier phases/goals. To
    skip the compilation of test sources, you can run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: This will completely skip the test compilation and test execution.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Maven Failsafe plugin to run integration tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to unit tests, Maven also allows you to automate the running of
    your integration tests. While unit tests are run during the `test` phase of the
    build lifecycle, integration tests are run during the `verify` phase. The Maven
    Failsafe plugin is used to run integration tests.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To run integration tests using Maven Failsafe plugin, perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a project containing integration tests, namely `project-with-integration-test`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following plugin configuration to the pom file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Observe the various steps that get executed:![How to do it...](img/6124OS_04_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have specified in the pom file that the integration test must be run and
    the goals of the Maven Failsafe plugin must be verified. These goals are bound
    to the `verify` phase of Maven and get invoked.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Maven Resources plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Resources plugin comes into picture to copy project resources to the output
    directory. The resources can be for the project to run or for the purpose of testing.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s start using the Maven Resources plugin by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the command prompt.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command on the simple project that we created earlier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Observe what happens:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we specify the `process-resources` phase, Maven executes the `resources`
    goal of `maven-resources-plugin`, which is bound to the `process-resources` lifecycle
    phase.
  prefs: []
  type: TYPE_NORMAL
- en: In the earlier project, there are no resources and hence, resources are not
    copied.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add a file in `src\main\resources` (as in the case of the `project-with-resources`
    project), you will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'You could also explicitly invoke the plugin''s goal as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'You could also invoke any phase following the `process-resources` phase, which
    will trigger resource processing as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'There is a separate goal to copy test resources to provide separation of the
    main and test resources. Like project resources, the test resource processing
    can be invoked in three ways, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'By specifying a phase that will automatically invoke phases before it:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'By explicitly stating the plugin''s goal:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'By a phase following `process-test-resources`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What if we had resources in additional folders? The Maven Resources plugin allows
    us to configure these additional folders.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s say we have an additional resources folder, namely `src/main/additional`.
    We can configure the `pom.xml` file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Observe the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: The line `Copying 1 resource` repeats twice, indicating the copying happening
    from two folders.
  prefs: []
  type: TYPE_NORMAL
- en: Filtering using resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let us see how we can put the resources features of Maven to good use,
    that is, to perform variable replacements on project resources. This feature is
    useful when you need to parameterize a build with different configuration values,
    depending on the deployment platform.
  prefs: []
  type: TYPE_NORMAL
- en: You can define variables in your resources. Let us see how we can get the value
    of these variables from properties, resource filter files, and the command line.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To perform filtering using resources, use the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a property with a variable in the `src/main/resource/app.properties` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code in the pom file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Invoke the `process-resources` phase:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Examine the processed resource `app.properties` in `target/classes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the *Using properties in Maven* recipe of [Chapter 3](ch03.html "Chapter 3. Maven
    Lifecycle"), *Maven Lifecycle*, we saw the various types of properties that Maven
    can have. In the preceding case, we set the `filtering` element to `true`. Maven
    replaced the variable `${project.name}` with the property value corresponding
    to the name of the project defined in the pom file, namely `Project with resource
    filtering`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can override the property values from the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, look at `app.properties` by navigating to `target/classes`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have a large number of variables whose values differ based on the environment,
    then you can create a file, say `my-filter-values.properties`, in the project
    codebase holding the keys and values (say, `src/filter` folder) and use them as
    filters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Using Eclipse to run Maven goals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are using Eclipse to develop your project, it is good to know how to
    run some of the plugins we have discussed earlier using the IDE.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To run Maven goals using Eclipse, use the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the simple project in Eclipse.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **Run As**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: View the available Maven options:![How to do it...](img/6124OS_04_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Eclipse provides an option to run various goals from the IDE. Among the ones
    we have seen in this chapter, `clean`, `compile`, and `test` are offered by Eclipse.
    There are a few other options as well.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, Eclipse also allows us to modify the configurations as suitable.
  prefs: []
  type: TYPE_NORMAL
- en: Eclipse also allows the project to be **Run As** a **Java Application** in the
    traditional way (without using any Maven plugins). Likewise, it allows a **JUnit
    Test** to be run without using Maven.
  prefs: []
  type: TYPE_NORMAL
- en: Using NetBeans to run Maven goals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let us now see how we can run the Maven goals in NetBeans.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To run Maven goals using the NetBeans IDE, implement the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the simple project in the NetBeans IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: View the available options:![How to do it...](img/6124OS_04_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Unlike Eclipse, NetBeans has a tighter Maven integration. This means each of
    the menu options (**Build**, **Clean and Build**, **Clean**, and so on) call the
    corresponding Maven command to do so.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, clicking on the **Clean** option will result in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/6124OS_04_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As can be seen, it runs the `mvn clean` command.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, the **Clean and Build** option is equivalent to the `mvn clean install`
    command.
  prefs: []
  type: TYPE_NORMAL
- en: These are simple use cases. NetBeans provides additional configuration options
    to override default Maven behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Using IntelliJ IDEA to run Maven goals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finally, let us look at what IntelliJ IDEA provides.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To run Maven goals using IntelliJ IDEA, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the simple project in IntelliJ IDEA.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Maven Projects**:![How to do it...](img/6124OS_04_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open **Lifecycle** and click on a suitable goal/phase:![How to do it...](img/6124OS_04_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Clicking on a Maven phase/goal invokes the corresponding Maven command and
    the same is executed. For instance, clicking on **compile** does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/6124OS_04_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There are also other configuration options provided by IntelliJ IDEA to customize
    Maven projects.
  prefs: []
  type: TYPE_NORMAL
