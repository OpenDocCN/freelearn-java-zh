["```java\n@Inject\n@ConfigProperty(name=\"tempFileName\", defaultValue=\"file.tmp\")\nString fileName;\n```", "```java\nmvn quarkus:generate-config\n```", "```java\n# The name of the application.\n# If not set, defaults to the name of the project.\n#\n#quarkus.application.name=\n\n# The version of the application.\n# If not set, defaults to the version of the project\n#\n#quarkus.application.version=\n```", "```java\njava -Dquarkus.http.port=8180 app.jar\n```", "```java\nexport QUARKUS_HTTP_PORT=8180\n```", "```java\npublic class FileConfigSource implements ConfigSource {\n    private final String CONFIG_FILE = \"/tmp/config.properties\";\n    private final String CONFIG_SOURCE_NAME = \"ExternalConfigSource\";\n    private final int ORDINAL = 900;\n\n    @Override\n    public Map getProperties() {\n\n        try(InputStream in = new FileInputStream( CONFIG_FILE )){\n\n            Properties properties = new Properties();\n            properties.load( in );\n\n            Map map = new HashMap();\n            properties.stringPropertyNames()\n                    .stream()\n                    .forEach(key-> map.put(key, \n                     properties.getProperty(key)));\n\n            return map;\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        return null;\n    }\n\n    @Override\n    public Set getPropertyNames() {\n\n        try(InputStream in = new FileInputStream( CONFIG_FILE )){\n\n            Properties properties = new Properties();\n            properties.load( in );\n\n            return properties.stringPropertyNames();\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        return null;\n    }\n\n    @Override\n    public int getOrdinal() {\n        return ORDINAL;\n    }\n\n    @Override\n    public String getValue(String s) {\n\n        try(InputStream in = new FileInputStream( CONFIG_FILE )){\n            Properties properties = new Properties();\n            properties.load( in );\n            return properties.getProperty(s);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        return null;\n    }\n\n    @Override\n    public String getName() {\n        return CONFIG_SOURCE_NAME;\n    }\n}\n```", "```java\n│   └── resources\n│       └── META-INF\n│               └── services\n│                   ├── org.eclipse.microprofile.config.spi.ConfigSource\n```", "```java\ncom.packt.chapter8.FileConfigSource\n```", "```java\ngiven()\n        .when().get(\"/hello\")\n        .then()\n        .statusCode(200)\n        .body(is(\"custom greeting\"));\n```", "```java\nyear=2019\nisUser=true\n```", "```java\n@ConfigProperty(name = \"year\", defaultValue = \"2020\")\nInteger year;\n\n@ConfigProperty(name = \"isUser\", defaultValue = \"false\")\nBoolean isUser;\n```", "```java\nstudents=Tom,Pat,Steve,Lucy\n```", "```java\n@ConfigProperty(name = \"students\")\nList<String> studentList;\n```", "```java\npets=dog,cat,bunny\n```", "```java\n@ConfigProperty(name = \"pets\")\nString[] petsArray;\n```", "```java\nmyclass=TestClass\n```", "```java\n@ConfigProperty(name = \"myclass\")\nTestClass clazz;\n```", "```java\n@Inject\nConfig config;\n\n@GET\n@Produces(MediaType.TEXT_PLAIN)\npublic String hello() {\n    Integer y = config.getValue(\"year\", Integer.class);\n    return \"Year is \" +y;\n}\n```", "```java\npublic class MicroProfileCustomValueConverter implements Converter<CustomConfigValue> {\n\n    public MicroProfileCustomValueConverter() {\n    }\n\n    @Override\n    public CustomConfigValue convert(String value) {\n        return new CustomConfigValue(value);\n    }\n}\n```", "```java\npublic class CustomConfigValue {\n\n    private final String email;\n    private final String user;\n\n    public CustomConfigValue(String value) {\n\n        StringTokenizer st = new StringTokenizer(value,\";\");\n        this.user = st.nextToken();\n        this.email = st.nextToken();       \n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public String getUser() {\n        return user;\n    }\n```", "```java\ncom.packt.chapter8.MicroProfileCustomValueConverter\n```", "```java\ncustomconfig=john;johnsmith@gmail.com\n```", "```java\n@ConfigProperty(name = \"customconfig\")\nCustomConfigValue value;\n\n@Path(\"/email\")\n@GET\n@Produces(MediaType.TEXT_PLAIN)\npublic String getEmail() {\n    return value.getEmail();\n}\n```", "```java\ncp Chapter08/customconfig.properties /tmp\n```", "```java\nmvn install\n```", "```java\n%{profile}.config.key=value\n```", "```java\n%dev.quarkus.datasource.url=jdbc:postgresql://localhost:5432/postgresDev\n%test.quarkus.datasource.url=jdbc:postgresql://localhost:6432/postgresTest\n%prod.quarkus.datasource.url=jdbc:postgresql://localhost:7432/postgresProd\n\nquarkus.datasource.driver=org.postgresql.Driver\nquarkus.datasource.username=quarkus\nquarkus.datasource.password=quarkus\n\nquarkus.datasource.initial-size=1\nquarkus.datasource.min-size=2\nquarkus.datasource.max-size=8\n\n%prod.quarkus.datasource.initial-size=10\n%prod.quarkus.datasource.min-size=10\n%prod.quarkus.datasource.max-size=20\n```", "```java\ndocker run --ulimit memlock=-1:-1 -it --rm=true --memory-swappiness=0 --name quarkus_Prod -e POSTGRES_USER=quarkus -e POSTGRES_PASSWORD=quarkus -e POSTGRES_DB=postgresProd -e PGPORT=7432 -p 7432:7432 postgres:10.5\n```", "```java\nmvn clean package -Dquarkus.profile=prod -DskipTests=true\n```", "```java\njava -jar target/profiles-demo-1.0-SNAPSHOT-runner.jar\n```", "```java\nexport QUARKUS_PROFILE=dev\njava -jar target/profiles-demo-1.0-SNAPSHOT-runner.jar\n```", "```java\n%staging.quarkus.datasource.url=jdbc:postgresql://localhost:8432/postgresStage\n```", "```java\nmvn quarkus:dev\n```", "```java\nmvn quarkus:install\n```", "```java\n<groupId>org.apache.maven.plugins</groupId>\n<artifactId>maven-surefire-plugin</artifactId>\n<version>${surefire-plugin.version}</version>\n<configuration>\n    <systemPropertyVariables>\n        <quarkus.test.profile>custom-test</quarkus.test.profile>\n        <buildDirectory>${project.build.directory}</buildDirectory>\n    </systemPropertyVariables>\n</configuration>\n```", "```java\npublic final class ContextListener implements ServletContextListener {\n\n    private ServletContext context = null;\n\n    public void contextInitialized(ServletContextEvent event) {\n        context = event.getServletContext();\n        System.out.println(\"Web application started!\");\n\n    }\n    public void contextDestroyed(ServletContextEvent event) {\n       context = event.getServletContext();\n       System.out.println(\"Web application stopped!\");\n\n    }\n}\n```", "```java\n<dependency>\n  <groupId>io.quarkus</groupId>\n  <artifactId>quarkus-jdbc-h2</artifactId>\n</dependency>\n```", "```java\n%dev.quarkus.datasource.url=jdbc:h2:tcp://localhost:19092/mem:test\n%test.quarkus.datasource.url=jdbc:h2:tcp://localhost/mem:test\nquarkus.datasource.driver=org.h2.Driver\n```", "```java\n@ApplicationScoped\npublic class DBLifeCycleBean {\n\n    protected final Logger log = \n     LoggerFactory.getLogger(this.getClass());\n\n    // H2 Database\n    private Server tcpServer;\n\n    public void observeContextInit(@Observes \n     @Initialized(ApplicationScoped.class) Object event) {\n        try {\n            tcpServer =  Server.createTcpServer(\"-tcpPort\",\n             \"19092\", \"-tcpAllowOthers\").start();\n            log.info(\"H2 database started in TCP server \n            mode on Port 19092\");\n        } catch (SQLException e) {\n\n            throw new RuntimeException(e);\n\n        }\n    }\n    void onStart(@Observes StartupEvent ev) {\n        log.info(\"Application is starting\");\n    }\n\n    void onStop(@Observes ShutdownEvent ev) {\n        if (tcpServer != null) {\n            tcpServer.stop();\n            log.info(\"H2 database was shut down\");\n            tcpServer = null;\n        }\n    }\n}\n```", "```java\nmvn quarkus:dev\n```", "```java\nINFO  [com.pac.qua.cha.DBLifeCycleBean] (main) H2 database started in TCP server mode on Port 19092\n```", "```java\n[com.pac.qua.cha.DBLifeCycleBean] (main) Application is starting\n```", "```java\n[com.pac.qua.cha.DBLifeCycleBean] (main) H2 database was shut down\n```", "```java\n@QuarkusTestResource(H2DatabaseTestResource.class)\npublic class TestResources {\n}\n```", "```java\n<dependency>\n  <groupId>io.quarkus</groupId>\n  <artifactId>quarkus-test-h2</artifactId>\n  <scope>test</scope>\n</dependency>\n```", "```java\nmvn install\n```", "```java\n[INFO] H2 database started in TCP server mode; server status: TCP server  running at tcp://10.5.126.52:9092 (only local connections)\n```", "```java\n<dependency>\n      <groupId>io.quarkus</groupId>\n      <artifactId>quarkus-scheduler</artifactId>\n</dependency>\n```", "```java\n@ApplicationScoped\npublic class TokenGenerator {\n\n    private String token;\n\n    public String getToken() {\n        return token;\n    }\n\n    @Scheduled(every=\"30s\")\n    void generateToken() {\n        token= UUID.randomUUID().toString();\n        log.info(\"New Token generated\"); \n    }\n\n}\n```", "```java\n@Path(\"/token\")\npublic class Endpoint {\n\n    @Inject\n    TokenGenerator token;\n\n    @GET\n    @Produces(MediaType.TEXT_PLAIN)\n    public String getToken() {\n\n        return token.getToken();\n    }\n}\n```", "```java\nmvn quarkus:dev\n```", "```java\n[INFO] New Token generated\n```", "```java\ncurl http://localhost:8080/token\n 3304a8de-9fd7-43e7-9d25-6e8896ca67dd\n```", "```java\n@Scheduled(cron=\"* * * * * ?\")\nvoid generateToken() {\n    token= UUID.randomUUID().toString();\n    log.info(\"New token generated\");\n}\n```", "```java\n@Inject\nScheduler scheduler;\n\npublic void oneTimeEvnt() {\n\n    scheduler.startTimer(300, () -> oneTimeAction());\n\n}\n\npublic void oneTimeAction() {\n    // Do something\n}\n```"]