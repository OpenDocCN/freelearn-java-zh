- en: Chapter 12. Working with Future Technologies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Building OpenJDK 9 on Mac OS X using Clang
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building OpenJDK 9 on Windows using MSYS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running and testing the early access preview of OpenJDK 9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Jigsaw
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building OpenJDK 9 with Graal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building OpenJDK 9 with Sumatra
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Java is often criticized because of some degree of conservatism, where major
    language changes are concerned. However, the recent Java 8 release has done a
    lot to relieve the worry that Java will remain conservative and frozen in time.
  prefs: []
  type: TYPE_NORMAL
- en: However, there are more changes coming. Java 9 is believed to support some long-awaited
    features that will possibly take it to a completely new market and level of programming.
  prefs: []
  type: TYPE_NORMAL
- en: In the past, annotations support and generics have caused a revolution in Java
    programming. The way of thinking was changed, and, while nothing completely new
    was added to the way Java operates in the low-level design, the high-level design
    and programming techniques were undoubtedly changed. The result was, for example,
    a rise in annotation-based frameworks and simpler programming as a whole.
  prefs: []
  type: TYPE_NORMAL
- en: Java 8 has been released with lambda expressions support, type annotations,
    and parameter reflection for public use. But it was possible to use it since late
    2012, at least. It was possible to have all this functionality, to write programs
    with all these features, to have fun with testing new technologies, well before
    the official release date. Some enterprise developers consider modern Java as
    unstable and slightly unpredictable even after the release. However, each programmer,
    who was interested in the new technologies' testing and support and who contributes
    to it, was able to test and try OpenJDK 8 when it was at development stage.
  prefs: []
  type: TYPE_NORMAL
- en: What is the situation with OpenJDK 9 early access previews were released immediately
    after the Java 8 release. So we can now try OpenJDK 9\. Of course, it is still
    unstable and doesn't even pass some regression tests, but it is going to change.
  prefs: []
  type: TYPE_NORMAL
- en: What are the main differences between OpenJDK 8 and 9?
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three main features:'
  prefs: []
  type: TYPE_NORMAL
- en: The First is the long awaited elimination of type erasure. With new refined
    generics, it will be possible to determine which type is used in a collection
    or map, or a tuple—on every generic reference. For all Java programmers this is
    going to be a major relief.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second feature is intended to bring the Java platform a new ally—the whole
    might of a GPU will now be in the hands of a programmer, using only standard features
    without a scrap of native code. It will be explained further in this chapter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And a third one is Graal, the project that exposes Java VM APIs to the end user.
    It is a great breakthrough since it is possible to change the way Java operates
    on the fly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is more to be done; Java 9 will also contain less GC types without a drop
    in performance.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Be aware, underscore (_) will not be a legal identifier name in Java 9, so prepare
    your code in time. Find more details at [http://openjdk.java.net/jeps/213](http://openjdk.java.net/jeps/213).
  prefs: []
  type: TYPE_NORMAL
- en: Also, for those who work with money transactions and financial analytics, there
    is another Java 9 feature—JSR 354, the Money API. It will implement the ISO-4217
    standard currencies along with some additional ones. Currency arithmetics will
    also be introduced.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To test the Java Money API, build the source code from [https://github.com/JavaMoney/jsr354-api](https://github.com/JavaMoney/jsr354-api).
    However, this is a Maven project that meets the JSR requirements, and is not a
    part of the OpenJDK project.
  prefs: []
  type: TYPE_NORMAL
- en: Building OpenJDK 9 on Mac OS X using Clang
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the time of writing, the OpenJDK 9 project was still quite similar to OpenJDK
    8\. So most of the information about building OpenJDK 9 can be found in [Chapter
    4](ch04.html "Chapter 4. Building OpenJDK 8"), *Building OpenJDK 8*.
  prefs: []
  type: TYPE_NORMAL
- en: One point that differentiates OpenJDK 9 from OpenJDK 8 is the usage of the Clang
    compiler on Mac OS X. Starting with Xcode Version 5, Clang became the official
    compiler on Mac OS X instead of GCC. There were plans to use it as an official
    compiler for OpenJDK 8 on Mac OS X but that switch was postponed to OpenJDK 9.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will build the current codebase of OpenJDK 9 using Xcode
    5 and the Clang compiler.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will need a clean Mac OS X 10.8 Mountain Lion or 10.9 Mavericks
    running with Mercurial source control tools installed.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following procedure will help us to build OpenJDK 9:'
  prefs: []
  type: TYPE_NORMAL
- en: Download Xcode 5 from [https://developer.apple.com/xcode/](https://developer.apple.com/xcode/)
    (an Apple developer's account is required, registration is free) and install it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the Command Line Tools for the corresponding minor version of Xcode
    using the same download link mentioned previously, and install it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command from the terminal to set up the Command Line Tools:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Install JDK 8—Oracle distribution, or prebuilt OpenJDK binaries may be used.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Obtain the source code from the Mercurial repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the autotools configuration script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the build:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The built binaries will be put into the following directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Xcode 5 uses the Clang compiler by default and OpenJDK 9 already has all the
    adjustments required for switching compiler from GCC to Clang.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the older versions of OpenJDK 9, the installation of the X11 server may
    be required. The X11 server can be installer from the *XQuartz* project.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Building OpenJDK 8 on Mac OS X recipe from [Chapter 4](ch04.html "Chapter 4. Building
    OpenJDK 8"), *Building OpenJDK 8*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building OpenJDK 9 on Windows using MSYS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Windows operating system has a long history of different tools providing
    a Unix-like environment. Tools such as Microsoft POSIX subsystem, Interix, Windows
    Services for UNIX, MKS Toolkit, Cygwin, MinGW/MSYS, and so on, existed during
    the various periods of Windows history and provided different levels of Unix compliance.
  prefs: []
  type: TYPE_NORMAL
- en: The three latter tools are most relevant to OpenJDK builds. MKS Toolkit was
    used for internal builds in Sun Microsystems because it provided better speed
    than Cygwin. Support for MKS Toolkit was discontinued with OpenJDK 7\. Cygwin,
    that we described in detail in [Chapter 2](ch02.html "Chapter 2. Building OpenJDK
    6"), *Building OpenJDK 6*, was used as the main and only tool to build OpenJDK
    7 and 8.
  prefs: []
  type: TYPE_NORMAL
- en: MSYS (short form for minimal system) is a part of the MinGW (Minimalist GNU
    for Windows) project. The MinGW project was started as a fork of Cygwin with the
    goal to provide closer integration with Windows API for the cost of lower level
    Unix support. MinGW-based applications are standalone native Windows applications
    and do not require the `cygwin.dll` library. Among other things, this can bring
    better speed for some applications using Windows API through MinGW instead of
    emulated Unix calls (like fork) through Cygwin. Applications should be changed
    accordingly, though.
  prefs: []
  type: TYPE_NORMAL
- en: The MSYS project provides a minimalistic shell environment and also provides
    first-class support for running GNU Autoconf based builds. Actually running Autoconf's
    configure scripts efficiently was one of the goals of MSYS. In some cases, the
    configure scripts can be extremely slow in Cygwin because of extensive use of
    new processes spawning.
  prefs: []
  type: TYPE_NORMAL
- en: Due to better speed in OpenJDK builds, MSYS support was restored in OpenJDK
    9 as a second supported environment along with Cygwin.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will build OpenJDK 9 on Windows 7 using MSYS instead of Cygwin.
    At the time of writing, OpenJDK 9 was still in development and we have used the
    latest available source code.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will need Windows 7 (32- or 64-bit) running.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following procedure will help us to build OpenJDK 9:'
  prefs: []
  type: TYPE_NORMAL
- en: Download Microsoft .NET Framework 4 from the Microsoft website and install it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download Microsoft Windows SDK for Windows 7 (the `GRMSDKX_EN_DVD.iso` file)
    from the Microsoft website and install it to the default location. The .NET Development
    and Common Utilities components are not required.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download Visual Studio 2010 Express and install it (C++ variant) to the default
    location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Download and install Microsoft DirectX 9.0 SDK (Summer 2004) to the default
    installation path. Note that this distribution is not available on the Microsoft
    website anymore. It may be downloaded elsewhere online, the file details are as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Download the prebuilt FreeType libraries from the `openjdk-unofficial-builds`
    GitHub project (directory `7_64`) and put the binaries into the `c:\freetype\lib`
    directory and the header files into the `c:\freetype\include` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the OpenJDK 8 binaries or Oracle Java 8 into `c:\jdk8`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download and install the Mercurial SCM tool from the [mercurial.selenic.com](http://mercurial.selenic.com)
    website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Clone the current development forest of OpenJDK 9 to the `C:\openjdk` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Download the `mingw-get` utility (`mingw-get-setup.exe`) from [http://mingw.org/](http://mingw.org/)
    and install it to the `C:\MinGW` path.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `cmd.exe` shell and navigate to the directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command to revert the installed version of MSYS from the
    latest one to 1.0.17:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following commands to install all required MSYS packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the MSYS shell using the `C:\MinGW\msys\1.0\msys.bat` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to the `c/openjdk` directory and download the source code for all
    OpenJDK subrepositories with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a path for the JDK 8 binaries in the `PATH` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the filesystem permissions for all source files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the configure script specifying path to the FreeType binaries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the build process writing the output to the screen and logfile simultaneously:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Wait for the build to finish.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At the time of writing, OpenJDK 9 code uses the same toolchain as OpenJDK 8,
    so the environment setup is similar.
  prefs: []
  type: TYPE_NORMAL
- en: We use Version 1.0.17 of MSYS because the regression related to multicores support
    appeared in the 1.0.18 Version. This regression is not fixed at the time of writing
    but will most likely be fixed in the following versions.
  prefs: []
  type: TYPE_NORMAL
- en: The `mingw-get` utility is a package manager that allows us to install or update
    the required MSYS packages.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Installing Cygwin for Windows builds* recipe from [Chapter 2](ch02.html
    "Chapter 2. Building OpenJDK 6"), *Building OpenJDK 6*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Building OpenJDK 8 on Windows 7 SP1* recipe from [Chapter 4](ch04.html
    "Chapter 4. Building OpenJDK 8"), *Building OpenJDK 8*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The OpenJDK bug related to the restoration of MSYS support in OpenJDK 9 at [https://bugs.openjdk.java.net/browse/JDK-8022177](https://bugs.openjdk.java.net/browse/JDK-8022177)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The OpenJDK mailing list thread about the regression in MSYS 1.0.18 at [http://mail.openjdk.java.net/pipermail/build-dev/2014-August/012917.html](http://mail.openjdk.java.net/pipermail/build-dev/2014-August/012917.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The MSYS website at [http://www.mingw.org/wiki/msys](http://www.mingw.org/wiki/msys)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Information about Windows service for Unix at [http://technet.microsoft.com/en-us/library/bb496506.aspx](http://technet.microsoft.com/en-us/library/bb496506.aspx)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The MKS Toolkit website at [http://mkssoftware.com/](http://mkssoftware.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Cygwin website at [http://cygwin.com/](http://cygwin.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running and testing the early access preview of OpenJDK 9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will get the newest OpenJDK code available and will test for feature availability.
    Don't hesitate to try new features, they may be available in the newer releases.
    Since the OpenJDK 9 release, it will remain the fastest way to give OpenJDK 9
    a test. Hopefully, upon the release, the same thing will work for OpenJDK 10.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need an Internet connection. Aside from that, nothing is needed.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will download, unpack, and run the latest publicly available full OpenJDK
    build:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the page [https://jdk9.java.net/](https://jdk9.java.net/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the early access preview, as shown:![How to do it...](img/8405OT_12_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run an installer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can find out how to install OpenJDK from an archive in [Chapter 1](ch01.html
    "Chapter 1. Getting Started with OpenJDK"), *Getting Started with OpenJDK* of
    this book.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Test some interesting features that are already included in the early access
    JDK. Look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'When executed, you may expect it to return the following string, or something
    similar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Although there are some minor improvements and a lot of bug fixes, there are
    not yet any major changes in the early access preview.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the source repository on [http://hg.openjdk.java.net/jdk9/jdk9](http://hg.openjdk.java.net/jdk9/jdk9),
    there are tags, such as `jdk9-b<build number>`, which are automatically built
    into the early access releases. Although there are no nightly builds, you can
    always build them from source, if you have lots of time and a machine that's powerful
    enough to start with.
  prefs: []
  type: TYPE_NORMAL
- en: Don't forget to update your once installed releases—there will be really major
    and exciting changes, including those explained next. Sooner or later, developers
    will come out with Java 9 full, and then there will be time to test it before
    it becomes production ready.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can also build OpenJDK 9 from source:'
  prefs: []
  type: TYPE_NORMAL
- en: Clone the source code repository `hg` clone at [http://hg.openjdk.java.net/jdk9/jdk9](http://hg.openjdk.java.net/jdk9/jdk9)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Get the source code of the OpenJDK subprojects:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then configure the OpenJDK instance to be built:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And, finally, do the build itself:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The final strings of your output will look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using Jigsaw
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jigsaw is the brand-new modular system for Java. It brings to mind some existing
    products, such as Maven or Gradle, but its most interesting feature is the possibility
    of the modularization of the JDK itself. Jigsaw will allow, upon its full completion,
    to modularize even some features that was thought as unseparable, such as HotSpot
    binaries.
  prefs: []
  type: TYPE_NORMAL
- en: Jigsaw incorporates proposals about the Java modular system. Modularity means
    scalability—from small, embedded devices that need only basic functionality and
    have poor performance, to full-scale data centers with dozens of machines. Some
    of these goals have already been reached—but Jigsaw presents a universal way to
    resolve dependencies on all platforms, starting from Java itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'Several JEPs are part of Jigsaw:'
  prefs: []
  type: TYPE_NORMAL
- en: '**JEP 200**: This makes the JDK itself modular'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JEP 201**: This makes the source code modular'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JEP 220**: This makes the runtime Java images modular, so they can be loaded
    in parts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some information about the progress of the JEPs are found at the following
    JIRA links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://bugs.openjdk.java.net/browse/JDK-8051619](https://bugs.openjdk.java.net/browse/JDK-8051619)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://bugs.openjdk.java.net/browse/JDK-8051618](https://bugs.openjdk.java.net/browse/JDK-8051618)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://bugs.openjdk.java.net/browse/JDK-8061971](https://bugs.openjdk.java.net/browse/JDK-8061971)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also, the core of Jigsaw is JSR 376—the Java platform Module System.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need Internet access. Also, some experience with Maven, or similar
    software is desired. Any knowledge about how the build systems work from the inside
    will be appreciated.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following procedure will teach you how to build Jigsaw-enabled Java:'
  prefs: []
  type: TYPE_NORMAL
- en: First, let's clone a source repo `hg` clone from [http://hg.openjdk.java.net/jigsaw/jigsaw](http://hg.openjdk.java.net/jigsaw/jigsaw).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, let''s get the source code of the OpenJDK subprojects:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then configure the OpenJDK instance to be built:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And, finally, do the build itself:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Congratulations, you've built Jigsaw-enabled Java.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will do some tests:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s consider the simple *helloworld1* program:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It has one class, which is imported from a yet nonexistent package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's create it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, we will try to link it using Jigsaw.
  prefs: []
  type: TYPE_NORMAL
- en: Jigsaw stores the module declaration in the file named `module-info.java`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create it for those two packages as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: These files are to be placed in the root directory of a package.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s consider a situation when all those modules are placed in the same directory
    named `src`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, let''s compile them with `javac` from your jigsaw build:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Jigsaw is a modular system that gives Java its very own build system. Similar
    systems were spawned in the Java world long ago, but they lacked the core support.
    They were never able to bring the modular support advantages to Java's own features.
    Of course, there are some downsides as well. The *Write once, run everywhere*
    slogan is not so applicable as it was before.
  prefs: []
  type: TYPE_NORMAL
- en: We use the newly built OpenJDK commands to create, install, and export modules.
    Those commands are still under heavy development, but the specification is already
    written so, hopefully, nothing will significantly change before the production-access
    release.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You also can install a module as a library. To do so, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a module library:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This creates a module library `lib1`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To install some modules to the library:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will install your modules under the system parent in the library `lib1`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Currently, there is no way to remove the module from the library. Maybe, there
    will not be any in the release either. For now, the simplest way to remove a module
    from the library is to delete it physically from the repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, you can run a module, if it contains a standard entry point:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The new `-m` option is also contained only in the Jigsaw-enabled Java command.
    As of now (June 2014) it is not contained in any public early access preview.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a next feature, you can export a module as a file by performing the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The `module1@<module version>.jmod` file will be created. It will contain the
    exported, ready-to-use module.
  prefs: []
  type: TYPE_NORMAL
- en: Building OpenJDK 9 with Graal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As described in the project page, Graal is:'
  prefs: []
  type: TYPE_NORMAL
- en: '*A quest for the JVM to leverage its own J.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Upon completion of this project, JVM functions will be exposed via Java APIs,
    so the end user will be able to have access to the most low-level manipulation.
    It will be possible to write a Java compiler in Java, for example. Now, we will
    try to give it a test.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is also **Truffle**, a framework that allows you to build your own language
    using Graal VM. It builds upon a notion of an **abstract syntax tree** (**AST**),
    and the process, in fact, is really simple. To have a better look, see the following
    link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://cesquivias.github.io/blog/2014/10/13/writing-a-language-in-truffle-part-1-a-simple-slow-interpreter/](https://cesquivias.github.io/blog/2014/10/13/writing-a-language-in-truffle-part-1-a-simple-slow-interpreter/)'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need an Internet connection. Also, it's recommended to read the chapters
    about building OpenJDK.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Have a look at the following procedure to build OpenJDK with Graal:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, clone a source repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enter a selection value, upon which `vm graal` will be built. Unfortunately,
    it will not be built without modification against the OpenJDK 9-ea preview:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then choose which VM will be executed. There are two types of VM. In a nutshell,
    `server vm` will use the default hotspot compilation, using Graal itself only
    for explicit Graal API calls, while `graal VM` will compile everything through
    Graal. The first option is much more suitable for production VMs, while the second
    is favorable for testing purposes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, make a cup of tea, the process may take several dozen minutes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, if you want to initialize your IDE project , run `./mx.sh ideinit`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, open your favorite IDE and open a resulting project. It will be shown
    here with IntelliJ Idea:![How to do it...](img/8405OT_12_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explore various tests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Graal enabled VM will expose Java APIs to the end user.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In [Chapter 8](ch08.html "Chapter 8. Hacking OpenJDK"), *Hacking OpenJDK*, we
    added new intrinsics to the HotSpot, using the crc32 calculation as an example.
    In the Graal project, there is a similar test, which tests the compiled substitution
    of the `CRC32#updateByteBuffer` method. It is contained in the `com.oracle.graal.hotspot.jdk8.test`
    package. Run it, and enjoy the performance change.
  prefs: []
  type: TYPE_NORMAL
- en: Building OpenJDK 9 with Sumatra
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For a long time, Java was considered as a primarily backend tool, due to its
    cross-platform vectoring. Only J2ME was capable of achieving long-term superiority
    in the mobile segment. But now it's going to change. Project Sumatra has the aim
    of delivering GPU-calculation standards to the Java guys.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will probably need a GPU that supports CUDA and OpenGL, or a HSAIL simulator
    running (because on-board GPUs do not support native GPU languages).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sumatra developers are making wide use of the Graal project, described earlier.
    The build consists of two stages. Firstly, the Sumatra JDK is built, like a normal
    OpenJDK build, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The second stage consists of building a Graal JDK on top of the Sumatra JDK.
    It may be tricky, but hopefully it will work:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Clone a repository `hg` clone [http://hg.openjdk.java.net/sumatra/sumatra-dev/](http://hg.openjdk.java.net/sumatra/sumatra-dev/):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get the source code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then make the source code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Export `JAVA_HOME` to the newly built OpenJDK instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Build the HSAIL-enabled grail:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Congratulations! You have a Sumatra-enabled VM.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s do a little test. Consider a code from an official sample:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: It contains two off-loadable lambdas. We will try to make them run in parallel,
    using the `HSA` API.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, set `JAVA_HOME` to the Graal JDK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then clone the `OKRA HSA` interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make it runnable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the example with and without offloading.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will get the following code in your terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sumatra runs on top of the Graal project. Since all operations with GPU are
    implemented on the VM level, Sumatra uses Graal to gain access to them. Sumatra
    features are at the heavy development stage, and they are subject to various unpredictable
    changes.
  prefs: []
  type: TYPE_NORMAL
- en: But the end user can use some of them, even now, to gain a new level of Java
    productivity at the expense of some compatibility and standardization.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the Graal suite, there is a possibility to test the Sumatra HSAIL feature.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so, run the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should look like the following (for Linux Mint 15, or for other
    distributions\OS, results may slightly differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: The completion of this test will mean that the HSAIL functions are working OK,
    so the cutting-edge Java already benefits from your GPU.
  prefs: []
  type: TYPE_NORMAL
