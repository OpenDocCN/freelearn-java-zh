- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Variables and Primitive Data Types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 1*](B19793_01.xhtml#_idTextAnchor018), we introduced the compiler
    and the JVM. We learned how to use both of them from the command line when we
    wrote our first Java program, *HelloWorld*. We also introduced **IntelliJ**, a
    powerful and friendly IDE, and we ran *HelloWorld* from there as well.
  prefs: []
  type: TYPE_NORMAL
- en: All programming languages require variables and provide in-built primitive data
    types. They are essential for the operation of even the simplest programs. By
    the end of this chapter, you will be able to declare variables using Java’s primitive
    types. In addition, you will understand the differences between the various primitive
    data types and which ones to use in a given situation.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding and declaring variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring Java’s primitive data types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code for this chapter can be found on GitHub at [https://github.com/PacktPublishing/Learn-Java-with-Projects/tree/main/ch2](https://github.com/PacktPublishing/Learn-Java-with-Projects/tree/main/ch2).
  prefs: []
  type: TYPE_NORMAL
- en: Understanding and declaring variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you want to store a value for later use, you need a variable. Therefore,
    every programming language provides this feature via variables. In this section,
    we will learn what a variable is and how to declare one. The area in your code
    where you can use a particular variable is known as the variable’s *scope*. This
    is a very important concept and will be covered in detail in [*Chapter 4*](B19793_04.xhtml#_idTextAnchor087).
  prefs: []
  type: TYPE_NORMAL
- en: What is a variable?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Variables are locations in memory that have a *name* (called an identifier)
    and a *type*. They resemble named pigeonholes or post office boxes (see *Figure
    2**.1*). The variable’s name is required so that we can refer to the variable
    and distinguish it from other variables.
  prefs: []
  type: TYPE_NORMAL
- en: A variable’s *type* specifies the sort of values it can store/hold. For example,
    is the variable to be used for storing whole numbers such as 4 or decimal numbers
    such as 2.98? The answer to that question determines the variable’s *type*.
  prefs: []
  type: TYPE_NORMAL
- en: Declaring a variable
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s suppose we want to store the number 25 in a variable. We will assume that
    this number represents a person’s age, so we will use the `age` identifier to
    refer to it. Introducing a variable for the first time is known as “declaring”
    the variable.
  prefs: []
  type: TYPE_NORMAL
- en: A whole number (positive or negative) is an integer and Java provides an in-built
    primitive type especially for integers called `int`. We will discuss primitive
    data types in more detail in the next section. When declaring a variable in Java,
    we must specify the variables type. This is because Java is known as a *strongly
    typed* language, which means you must specify the variable’s type immediately
    upon declaring it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s declare a variable, give it a type, and initialize it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The first line declares `age` as an `int` and the second line assigns it a value
    of `25`.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the semi-colons (`;`) at the end of the lines are delimiters that
    tell the compiler where a Java statement ends. The `=` sign is the assignment
    operator and will be covered in [*Chapter 3*](B19793_03.xhtml#_idTextAnchor067).
    For now, just realize that `25` is “assigned into” the `age` variable.
  prefs: []
  type: TYPE_NORMAL
- en: Assignment operator
  prefs: []
  type: TYPE_NORMAL
- en: The `=` sign in Java is not the same as the equals sign, =, in mathematics.
    Java uses the `==` sign for equals, which is called equivalence.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can write the previous two lines of code in one line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '*Figure 2**.1* shows the in-memory representation of both code segments:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – An integer variable named age with a value of 25](img/B19793_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 – An integer variable named age with a value of 25
  prefs: []
  type: TYPE_NORMAL
- en: As can be seen in *Figure 2**.1*, **age** is the name of the variable and **25**
    is the integer value stored in the variable’s *location*.
  prefs: []
  type: TYPE_NORMAL
- en: Naming a variable
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An identifier is simply a name that you give to the Java construct you are coding;
    for example, identifiers (names) are required for naming variables, methods, classes,
    and so forth.
  prefs: []
  type: TYPE_NORMAL
- en: Identifiers
  prefs: []
  type: TYPE_NORMAL
- en: An identifier consists of letters, digits, underscores, and currency symbols.
    Identifiers cannot begin with a number and cannot contain whitespace (spaces,
    tabs, and newlines). In the following examples, the commas separate the various
    identifiers.
  prefs: []
  type: TYPE_NORMAL
- en: Examples of unusual but *valid* identifiers are `a£€_23`, `_29`, `Z`, `thisIsAnExampleOfAVeryLongVariableName`,
    `€2_`, and `$``4 ;`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples of *invalid* identifiers are `9age` and `abc def;`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Name your variables carefully. This helps make code more readable, which results
    in fewer bugs and easier maintenance. *Camel case* is a very popular technique
    in this regard. Concerning variable names, camel case means that *all* of the
    first word is lowercase. In addition, the first letter in each subsequent word
    in the variable name starts with an uppercase letter. Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In this code segment, we have two integer variables whose names/identifiers
    follow camel casing.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing a variable
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To access a variable’s value, just type in the variable’s name. When we type
    in a variable’s name in Java, the compiler will first ensure that a variable with
    that name exists. Assuming there is, the JVM will, at runtime, return the *value
    inside* that variable’s pigeonhole. Therefore, the following code will output
    `25` to the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The first line declares the `age` variable and initializes it to `25`. The second
    line accesses the variable’s location and outputs its value.
  prefs: []
  type: TYPE_NORMAL
- en: System.out.println()
  prefs: []
  type: TYPE_NORMAL
- en: '`System.out.println()` displays whatever is inside the round brackets, `()`,
    on the screen.'
  prefs: []
  type: TYPE_NORMAL
- en: Accessing a variable that you have not declared
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As stated previously, Java is known as a *strongly typed* language. This means
    that you have to specify the variable’s type immediately upon declaring it. If
    the compiler comes across a variable and does not know its type, it generates
    an error. For example, consider the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Assuming no other code declares `age`, the compiler generates an error stating
    `cannot resolve symbol 'age'`. This is because the compiler is looking for the
    *type* to associate with *age* and it cannot find it (as we did not specify the
    type).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a slightly different example. In this example, we are attempting to
    output the `age` variable to the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we have declared a variable named `length` and thus, there
    is no declaration of `age`. When we attempt to access the `age` variable in `System.out.println()`,
    the compiler goes looking for `age`. The compiler cannot find `age` and generates
    an error stating `cannot resolve symbol 'age'`. In effect, what the compiler is
    saying is that we have attempted to use a variable named `age` that the compiler
    cannot find. This is because we did not even declare the variable, not to mention
    specify its type.
  prefs: []
  type: TYPE_NORMAL
- en: Comments
  prefs: []
  type: TYPE_NORMAL
- en: Comments are very useful as they help us explain what is happening in the code.
  prefs: []
  type: TYPE_NORMAL
- en: '`//` is a single-line comment. When the compiler sees `//`, it ignores the
    rest of the line.'
  prefs: []
  type: TYPE_NORMAL
- en: .`/* some text */` is a multi-line comment. Anything between the opening `/*`
    and the closing `*/` is ignored. This format saves inserting `//` at the start
    of each line.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '`int age; // from here to the rest of the line` `is ignored`'
  prefs: []
  type: TYPE_NORMAL
- en: '`// this whole line` `is ignored`'
  prefs: []
  type: TYPE_NORMAL
- en: '`/*` `all`'
  prefs: []
  type: TYPE_NORMAL
- en: '`of`'
  prefs: []
  type: TYPE_NORMAL
- en: '`these lines`'
  prefs: []
  type: TYPE_NORMAL
- en: '`are`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ignored */`'
  prefs: []
  type: TYPE_NORMAL
- en: Given that Java, as a strongly typed language, requires all variables to have
    a data type, we will now discuss Java’s support for primitive data types.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Java’s primitive data types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Java provides eight in-built data types. In-built means that these data types
    come with the language. These primitive data types are the topic of this section.
  prefs: []
  type: TYPE_NORMAL
- en: Java’s primitive data types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All of the primitive data types are named using lowercase letters only; for
    example, `int` and `double`. When we create our own data types later on, namely
    classes, records, and interfaces, we will follow a different naming convention.
    For example, we may have a class named `Person` or `Cat`. This is simply a widely
    adopted coding convention and the compiler does not distinguish between naming
    conventions. However, it is very easy to recognize any of the primitive data types
    as they are always in lowercase letters only. Before we discuss the primitive
    data types themselves, there are a few important points to make.
  prefs: []
  type: TYPE_NORMAL
- en: Numeric primitive data types are signed
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Java, all numeric primitive data types are represented as a series of bits.
    In addition, they are also signed. The most significant bit (leftmost bit) is
    used for the sign; 1 means negative and 0 means positive.
  prefs: []
  type: TYPE_NORMAL
- en: Integer literals
  prefs: []
  type: TYPE_NORMAL
- en: 'A literal value is one that’s typed in at the keyboard (as opposed to a computed
    value). An integer literal can be expressed in various numbering systems: decimal
    (base 10), hexadecimal (base 16), octal (base 8), and binary (base 2). However,
    it is no surprise that decimal is by far the most commonly used representation.
    For information purposes, all of the following declarations represent the decimal
    number 10:'
  prefs: []
  type: TYPE_NORMAL
- en: '`int a = 10; // decimal,` `the default`'
  prefs: []
  type: TYPE_NORMAL
- en: '`int b = 0b1010; // binary, prefixed by 0b` `or 0B`'
  prefs: []
  type: TYPE_NORMAL
- en: '`int c = 012; // octal, prefixed` `by 0`'
  prefs: []
  type: TYPE_NORMAL
- en: '`int d = 0xa; // hexadecimal, prefixed by 0x` `or 0X`'
  prefs: []
  type: TYPE_NORMAL
- en: The sign bit affects the range
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The presence of the sign bit means that `byte` has a range of -27 to 27-1 (-128
    to +127 inclusive). The -1 in the positive range is to allow for the fact that,
    in Java, 0 is considered a positive number. There is *not* one less positive number
    in any of the ranges. For example, with `byte`, you have 128 negative numbers
    (-1 to -128) and 128 positive numbers (0 to +127), resulting in 256 representations
    (28). To reinforce this point with a simple example, -1 to -8 is 8 numbers and
    0 to 7 (inclusive) is 8 numbers also.
  prefs: []
  type: TYPE_NORMAL
- en: 'With these points discussed, let’s look at the various primitive types. *Table
    2.1* lists the eight primitive data types, their byte sizes, and their ranges
    (all of which are inclusive):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19793_02_Table_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Table 2.1 – Java’s primitive types
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some interesting points from the preceding table:'
  prefs: []
  type: TYPE_NORMAL
- en: '`byte`, `short`, `char`, `int`, and `long` are known as *integral* types as
    they have integer values (whole numbers, positive or negative). For example, -8,
    17, and 625 are all integer numbers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`char` is used for characters – for example ‘a’, ‘b’, ‘?’ and ‘+’. Note that
    single quotes surround the character. In code, `char c = ''a'';` means that the
    variable `c` represents the letter `a`. As computers ultimately store all characters
    (on the keyboard) as numbers internally (binary), we need an encoding system to
    map the characters to numbers and vice versa. Java uses the Unicode encoding standard,
    which ensures a unique number for every character, regardless of platform, language,
    script, and so on. This is why `char` uses 2 bytes as opposed to 1\. In fact,
    from the computer’s perspective, `char c = ''a''`; is the same as `char c = 97;`
    where 97 is the decimal value for ‘a’ in Unicode. Obviously, we as humans prefer
    the letter representation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`short` and `char` both require 2 bytes but have different ranges. Note that
    `short` can represent negative numbers, whereas `char` cannot. In contrast, `char`
    can store numbers such as 65,000, whereas `short` cannot.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`float` and `double` are for floating-point numbers – in other words, numbers
    that have decimal places, such as 23.78 and -98.453\. These floating-point numbers
    can use scientific notation – for example, 130000.0 can be expressed as `double
    d1=1.3e+5;`, and 0.13 can be expressed as `double d2=1.3e-1;`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Representation of the various types
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Expanding from the previous callout, we can express integer literals using
    the following numbering systems:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Decimal`: Base 10; numbers 0..9\. This is the default.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Hexadecimal`: Base 16; numbers 0..9 and letters a..f (or A..F). Prefix the
    literal with *0x* or *0X* to indicate that this is a hexadecimal literal.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`binary`: Base 2; numbers 0..1\. Prefix the literal with *0b* or *0B* to indicate
    that this is a binary literal.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here are some sample code fragments that initialize `int` variables to 30 using
    the various numbering systems. Firstly, decimal is used; then hexadecimal, and
    finally, binary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Although there are several ways to initialize an `int`, using decimal is by
    far the most common.
  prefs: []
  type: TYPE_NORMAL
- en: 'A literal number, such as 22, is considered an `int` by default. If you want
    to have 22 treated as `long` (instead of `int`), you must suffix either an uppercase
    or lowercase *L* to the literal. Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: As per *Table 2.1*, using a `long` as opposed to an `int`, gives you access
    to much bigger and much smaller numbers. Use of uppercase `L` as opposed to lowercase
    `l` to signify `long` is preferred, as the lowercase `l` is similar to the number
    1 (one).
  prefs: []
  type: TYPE_NORMAL
- en: 'Floating-point numbers behave similarly. A decimal number is, by default, `double`.
    To have any decimal number treated as `float` (as opposed to `double`), you must
    suffix the literal with either an uppercase or lowercase `F`. Assuming range is
    not an issue then one reason for using `float` as opposed to `double` is memory
    conservation (as `float` requires 4 bytes whereas `double` requires 8 bytes).
    Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Variables of the `char` type are initialized with single quotes around the
    literal. Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Variables of the `boolean` type can store only `true` or `false`. These `boolean`
    literals are in lowercase only as they are reserved words in Java, and Java is
    case-sensitive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: That concludes this section on Java’s primitive type system, where we examined
    the various types, their sizes/ranges, and some code segments.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s put the theory of variables and primitive types into practice! But
    before that, here’s a bit of a cheat code to help you with the exercises.
  prefs: []
  type: TYPE_NORMAL
- en: Screen output
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we know, `System.out.println()` outputs what is inside the `()`. To do the
    exercises, we want to expand on that. Firstly, here’s some code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Line 1 declares a string literal `"James"` and initializes the `name` variable
    with it. A string literal is a sequence of characters (including numbers), enclosed
    in double quotes. We will discuss the `String` class in detail in [*Chapter 12*](B19793_12.xhtml#_idTextAnchor293).
  prefs: []
  type: TYPE_NORMAL
- en: Lines 2 and 3 should be fine. We are declaring an `int` type called `age` and
    a `double` type called `salary` and using literal values to initialize them. The
    underscore used in line 3, enables us to make large numbers easier to read.
  prefs: []
  type: TYPE_NORMAL
- en: Line 4 builds the string to be output, namely `out`. We want to output the variables
    values, along with some helpful text to explain the output. Java builds the string
    from left to right.
  prefs: []
  type: TYPE_NORMAL
- en: Here, `+` is not the regular mathematical addition. We will discuss this in
    detail in [*Chapter 3*](B19793_03.xhtml#_idTextAnchor067), but for the moment,
    realize that when you have a string variable or literal on the left or the right
    of `+`, the operation becomes a `String` append (as opposed to mathematical addition).
  prefs: []
  type: TYPE_NORMAL
- en: One property this append shares with addition is that both sides of `+` must
    be of the same type. Since not all the variables in this example are string variables
    (or literals), Java has some work to do in the background (to get them all to
    the same type). Java copies the numeric variable values into new string locations
    to use them in building the string. For example, there is a location somewhere
    in memory that’s been created for a string literal, “23” (in addition to the `int`
    location for `age`). This also happens for the `double` type’s `salary` variable.
    Now, Java is ready to construct the string and assign it to `out` (line 4).
  prefs: []
  type: TYPE_NORMAL
- en: 'In the background, Java performs the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'So, `"Details: James, 23, 50000.0"` is used to initialize `out`, which is what
    is displayed on the screen when executing line 5.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All is going great in our lovely dinosaur park. However, we do need to do some
    administrative tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: We need to keep track of the dinosaurs in the park. Declare variables to represent
    the breed, height, length, and weight of one dinosaur in the main method. Give
    the variables a value and print them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we want to do something similar to the program of exercise 1 and print
    the dinosaur’s age, name, and whether it’s a carnivore or not. This needs to happen
    in the main method. Give the variables a value and print them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Our park is doing great! But it gets a bit too busy at times. The fire department
    advised us to introduce a maximum number of visitors that are allowed at any given
    time. Declare a variable to represent the maximum number of visitors allowed in
    the park per day. You can choose a reasonable value for the variable. Then, print
    it in the sentence: “There’s a maximum of [x] people allowed in Mesozoic Eden.”'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our team is an integral part of Mesozoic Eden. Let’s create a profile for an
    employee. Declare variables to represent the name and age of a Mesozoic Eden employee.
    Assign values and print them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We would like to know how many dinosaurs we have at any time. Declare a variable
    to represent the number of dinosaurs in the park. Assign it a value and print
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Safety is our priority. We maintain a safety rating scale to ensure our standards.
    Declare a variable to represent the park’s safety rating on a scale from 1 to
    10\. Assign a value to it and print it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let’s bring together some dinosaur information in one statement. Create
    a program that uses string concatenation to print out a dinosaur’s name, age,
    and diet (a string with a value of `carnivore` or `herbivore`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Each dinosaur species has a unique name. For a quick referencing system, we
    use the first letter of a dinosaur species. Declare a character variable that
    represents the first letter of a dinosaur species, assign a value, and print it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Project – dinosaur profile generator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As part of your responsibilities in Mesozoic Eden, you are tasked with creating
    an extensive database of all the dinosaurs living in the park. For now, you only
    need to complete the first step: a profile generator. These profiles will not
    only help in keeping track of our prehistoric residents but also provide essential
    data for scientific study, healthcare, diet management, and visitor engagement.'
  prefs: []
  type: TYPE_NORMAL
- en: In this project, we will focus on developing a program that can model an individual
    dinosaur’s profile.
  prefs: []
  type: TYPE_NORMAL
- en: 'The profile should include the following characteristics:'
  prefs: []
  type: TYPE_NORMAL
- en: Name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Age
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Species
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Diet (carnivore or herbivore)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Weight
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each characteristic should be stored as a variable within the program. Here’s
    your chance to get creative and think about the kind of dinosaur you want to describe.
    Is it a towering T-Rex or a friendly Stegosaurus? Maybe it’s a swift, scary Velociraptor
    or a mighty Triceratops?
  prefs: []
  type: TYPE_NORMAL
- en: Once you have declared and assigned values to these variables, the program should
    print out a complete profile of the dinosaur. The output can be something like
    `"Meet [Name], a [Age]-year-old [Species]. As a [Diet], it has a robust weight
    of [``Weight] kilograms."`.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned that a variable is simply a memory location with
    a name and a value. To utilize variables, we have to know how to declare and access
    them.
  prefs: []
  type: TYPE_NORMAL
- en: To declare a variable, we specify the variable’s name and its type – for example,
    `int countOfTitles=5;`. This line of code declares an `int` variable named `countOfTitles`
    with a value of `5`. Naming them properly using camel case, is a great aid in
    making your code more readable and maintainable. To access the variable, we just
    specify the variable’s name – for example, `System.out.println(countOfTitles);`.
  prefs: []
  type: TYPE_NORMAL
- en: As Java is a strongly typed language, we have to specify a variables' type when
    we declare it. Java provides eight in-built primitive data types for our use.
    They are easily recognizable due to their lowercase letters. In the preceding
    line of code, `int` is the primitive data type for the `countOfTitles` variable.
    We saw the sizes in bytes of the primitive types, which determines their range
    of values. All numeric types are signed, with the most significant bit being used
    for the sign. The `char` type is unsigned and is 2 bytes in size so that Java
    can support any character in any language anywhere in the world. Using code snippets,
    we saw variables of the different types in use.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know how to declare and use variables, let’s move on to operators
    that enable us to combine variables.
  prefs: []
  type: TYPE_NORMAL
