["```java\nfun main(args: Array<String>) {\n    print(min(4,7))\n}\nfun min(numberA: Int, numberB:Int) : Int {\n    if(numberA < numberB){\n        return numberA\n    }else{\n        return numberB\n    }\n}\n```", "```java\nfun min(numberA: Int, numberB:Int) : Int = if(numberA < numberB){ numberA }else{ numberB }\n```", "```java\nfun min(numberA: Int, numberB:Int) : Int\n   =  if(numberA < numberB){\n            numberA\n        }else{\n            numberB\n        }\n```", "```java\nfun getVolume(length:Int, width:Int,height:Int):Int{\n    return length * width * height;\n}\n```", "```java\nfun getVolume(length:Int, width:Int,height:Int =10):Int{\n    return length * width * height;\n}\n```", "```java\nfun String.camelCase():String{\n    var camelCaseStr = StringBuffer()\n    var wordLst : List<String> = this.trim().split(\" \")\n    for(word in wordLst){\n        camelCaseStr.append(word.replaceFirst(word[0], word[0].toUpperCase())).append(\" \")\n    }\n    return camelCaseStr.trim().toString()\n}\n```", "```java\nfun main(args: Array<String>) {\n    print(\"this is just for sample\".camelCase())\n // This will print asâ€”This Is Just For Sample\n}\n```", "```java\nfun Int.square():Int{\n    return this * this\n}\n```", "```java\nfun main(args: Array<String>) {\n    print(3.square())\n}\n```", "```java\n//This is functional literal\n{ println(\" This is function literal \")}\n```", "```java\nfun printMsg(message:String){\n    println(message)\n}\n```", "```java\n//Functional literal assigned to variable\nvar greetingMsg = { println(\"Hello World ...!!!\")}\n\n//Calling the function through literal\ngreetingMsg()\n```", "```java\n//Lambda with parameter\nvar showWarning = {message : String -> println(message)}\n\n//Calling Lambda expression with parameter\nshowWarning(\" Warning 1 occurred ..!!!\")\nshowWarning(\" Warning 2 occurred ..!!!\")\n```", "```java\n//Multiple parameters\nvar addition = { num1: Int, num2: Int ->\n        println(\"sum of $num1 and $num2 is ..${num1+num2}\")\n     }\naddition(3, 5)\n```", "```java\nvar addition2 : (Int,Int)-> Unit = { num1, num2 ->\n    println(\"sum of $num1 and $num2 is ..${num1+num2}\")\n}\naddition2(3, 5) \n```", "```java\ndata class Applicant(\n                    var applicantId: Int,\n                    var name: String,\n                    var age: Int,\n                    var gender: String)\n\nfun isEligibleForLoan (mobileNo:String, eligibilityScore:(applicantId:Int)->Double) : Boolean{\n    //Business logic to fetch applicant details from given mobileNo\n    var applicant = Applicant(12,\"Nilang\",38,\"M\");\n    var score = eligibilityScore(applicant.applicantId);\n    return score >80\n}\n```", "```java\nvar isEligible = isEligibleForLoan(\"9998789671\",{\n     applicantId -> //Write logic to calculate the \n                   //eligibility of candidate and return the score\n     85.23 // This is sample value\n })\n println(\" isEligibile: $isEligible \")\n```", "```java\nvar isEligible2 = isEligibleForLoan(\"9998789671\"){\n        applicantId -> //Write logic to calculate the eligibility \n                       //of candidate and return the score\n    75.23 // This is sample value\n}\n```", "```java\ninterface WildAnimal{\n    fun setName(name:String)\n    fun bark():String\n}\n\nclass Dog : WildAnimal{\n    private var dogName: String = \"\"\n    override fun bark(): String {\n        print(\" Bhao bhao ...\")\n        return \"${dogName} Dog is barking ...\"\n    }\n    override fun setName(name: String) {\n        this.dogName = name\n    }\n}\nclass Fox : WildAnimal{\n    private var foxName: String = \"\"\n    override fun bark(): String {\n        print(\" Haaaaoooooo...\")\n        return \"${foxName} Fox is barking ...\"\n    }\n    override fun setName(name: String) {\n        this.foxName = name\n    }\n}\nclass Lion : WildAnimal{\n    private var lionName: String = \"\"\n    override fun bark(): String {\n        print(\" HHHHHAAAAAAAAAAA...\")\n        return \"${lionName} Lion is Barking ...\"\n    }\n    override fun setName(name: String) {\n        this.lionName = name\n    }\n}\n```", "```java\nfun getAnimalVoiceFun(animal: WildAnimal):(String) -> String{\n    return {\n        animal.setName(it)\n        animal.bark()\n    }\n}\n```", "```java\nfun getAnimalVoiceFun(animal: WildAnimal):(name:String) -> String{\n    return {\n             animal.setName(name=it)\n             animal.bark()\n        }\n}\n```", "```java\nfun getAnimalVoiceFun(animal: WildAnimal):(String) -> String{\n  return fun(name:String):String {\n     animal.setName(name)\n return animal.bark()\n}\n```", "```java\nprintln(getAnimalVoiceFun(Lion())(\"Jake\"))\nprintln(getAnimalVoiceFun(Dog())(\"Boomer\"))\nprintln(getAnimalVoiceFun(Fox())(\"Lilli\"))\n```", "```java\nval getAnimalVoice: (WildAnimal) ->(String)-> String = {\n        animal:WildAnimal -> {\n               animal.setName(it)\n               animal.bark()\n         }\n}\n```", "```java\nprintln(getAnimalVoice(Lion())(\"Lio\"))\nprintln(getAnimalVoice(Dog())(\"Tommy\"))\nprintln(getAnimalVoice(Fox())(\"Chiku\"))\n```", "```java\nvar msg:String = \"Sample Message !!\"\nmsg = null\nvar anotherMsg :String = null\n```", "```java\nvar nullableMsg : String? = \" I have some value ..!! \"\nprintln(nullableMsg)\nnullableMsg=null\n```", "```java\nvar nullableMsg2 : String? = \" I have some value ..!! \"\nprintln(nullableMsg2.length) // Compiler will show an error here.\n```", "```java\n//Correct ways to call nullable variable\nif(nullableMsg2 !=null){\n    println(nullableMsg2.length) // Option 1\n}\nprintln(nullableMsg2?.length) // Option 2\n```", "```java\nprintln(nullableMsg2?.length ?: -1)\n```", "```java\n// Java code\npublic class StudentVOJava {\n    private String name;\n    private int age;\n    private int standard;\n    private String gender;\n    public StudentVO(String name, int age, int standard, String gender) {\n        this.name = name;\n        this.age = age;\n        this.standard = standard;\n        this.gender = gender;\n    }\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n    public int getAge() {\n        return age;\n    }\n    public void setAge(int age) {\n        this.age = age;\n    }\n    public int getStandard() {\n        return standard;\n    }\n    public void setStandard(int standard) {\n        this.standard = standard;\n    }\n    public String getGender() {\n        return gender;\n    }\n    public void setGender(String gender) {\n        this.gender = gender;\n    }\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        StudentVO studentVO = (StudentVO) o;\n        return age == studentVO.age &&\n                standard == studentVO.standard &&\n                Objects.equals(name, studentVO.name) &&\n                Objects.equals(gender, studentVO.gender);\n    }\n    @Override\n    public int hashCode() {\n        return Objects.hash(name, age, standard, gender);\n    }\n    @Override\n    public String toString() {\n        return \"StudentVO{\" +\n                \"name='\" + name + '\\'' + \", age=\" + age +\n                \", standard=\" + standard +\n                \", gender='\" + gender + '\\'' +\n                '}';\n    }\n}\n```", "```java\ndata class StudentVOKotlin(var name: String, var age: Int,\n                           var standard: Int, var gender: String)\n```", "```java\ndata class StudentVOKotlin(val name: String, val age: Int,\n                           val standard: Int, val gender: String)\n```", "```java\nfun main(args: Array<String>) {\n    var student = StudentVOKotlin(\"Nilang\",10,5,\"M\")\n    println(\"Student is  $student\") // This will call toString()\n    //This will call getter of respective properties\n    println(\"age of ${student.name} is ${student.age}\") \n}\n```", "```java\nfun greeting(name: String){\n    print(\" Hello $name !!!\")\n}\n```", "```java\npublic final class CheckInterOperabilityKt\n{\n  public static final void greeting(@NotNull String name)\n  {\n    //Some code for null type check added by Kotlin at this place.\n    String str = \" Hello \" + name + \" !!!\";System.out.print(str);\n  }\n}\n```", "```java\nfun multiply(a:Int, b:Int):Int{\n    print(\"Calling multiply function From Kotlin....\")\n    return a * b\n}\n```", "```java\npublic class JavaFile {\n    public  static void  main(String args[]){\n        System.out.print(KotlinFileKt.multiply(3,4));\n    }\n}\n```", "```java\npublic static int add(int num1, int num2){\n    return num1+num2;\n}\n```", "```java\nfun main(args: Array<String>) {\n    var total = JavaFile.add(5,6)\n    print(\"Value from Java is $total\")\n}\n```", "```java\n//Java code\npublic static void  main(String[] args){\n    Object name = \"Nilang\";\n    if(name instanceof String){\n        greetingMsg((String) name);\n    }\n}\nprivate static void greetingMsg(String name){\n    System.out.print(\" Welcome \"+name+\" ..!!\");\n}\n```", "```java\n//Kotlin code\nfun main(args: Array<String>) {\n    val name: Any = \"Nilang\"\n    if(name is String) {\n        greetingMsg(name)\n    }\n}\nprivate fun greetingMsg(name: String) {\n    print(\" Welcome $name ..!!\")\n}\n```", "```java\nvar num1 = 10\nvar num2 = 5\nprintln(num1+num2)\nprintln(num1.plus(num2))\n```", "```java\ndata class CoordinatePoint(var xPoint: Int, var yPoint: Int){\n    // overloading + operator with plus function\n    operator fun plus(anotherPoint: CoordinatePoint) : CoordinatePoint {\n        return CoordinatePoint(xPoint + anotherPoint.xPoint, yPoint + anotherPoint.yPoint)\n    }\n    // overloading - operator with minus function\n    operator fun minus(anotherPoint: CoordinatePoint) : CoordinatePoint {\n        return CoordinatePoint(xPoint - anotherPoint.xPoint, yPoint - anotherPoint.yPoint)\n    }\n}\nfun main(args: Array<String>) {\n    var point1 = CoordinatePoint(2,5)\n    var point2 = CoordinatePoint(4,3)\n\n    //This will call overloaded function plus()\n    var point3 = point1 + point2 \n\n   //This will call overloaded function minus()\n    var point4 = point1 - point2\n\n    println(point3)\n    println(point4)\n}\n```", "```java\n<dependency>\n   <groupId>org.jetbrains.kotlin</groupId>\n   <artifactId>kotlin-reflect</artifactId>\n</dependency>\n<dependency>\n   <groupId>org.jetbrains.kotlin</groupId>\n   <artifactId>kotlin-stdlib-jdk8</artifactId>\n</dependency>\n<dependency>\n   <groupId>com.fasterxml.jackson.module</groupId>\n   <artifactId>jackson-module-kotlin</artifactId>\n</dependency> \n```", "```java\n@Entity\n@Table(name=\"users\",catalog=\"task_mgmt_system\")\nclass User {\n    @Id\n    @GeneratedValue(strategy= GenerationType.IDENTITY)\n    @Column(name = \"id\")\n    private var id:Int? = null\n\n    @Column(name=\"username\")\n    private var username : String? = null\n\n    @Column(name=\"password\")\n    private var password : String? = null\n\n    @Column(name=\"firstname\")\n    private var firstname : String? = null\n\n    @Column(name=\"lastname\")\n    private var lastname : String? = null\n\n    @Column(name=\"enabled\")\n    private var enabled : Boolean = false\n\n    @ManyToMany(cascade = [CascadeType.PERSIST],fetch = FetchType.EAGER)\n    @JoinTable(\n            name = \"user_role\",\n            joinColumns = [JoinColumn(name = \"user_id\",referencedColumnName = \"id\") ],\n            inverseJoinColumns = [JoinColumn(name = \"role_id\",referencedColumnName = \"id\")]\n    )\n    private var roles: Set<Role>? = null\n\n    @OneToMany\n    @JoinColumn(name =\"user_id\")\n    private var comments : MutableSet<Comments>? = null\n\n  //.... Getters and Setters\n}\n```", "```java\n@ManyToMany(cascade = CascadeType.PERSIST,fetch = FetchType.EAGER )\n@JoinTable(\n   name = \"user_role\",\n   joinColumns = @JoinColumn(name = \"user_id\",referencedColumnName = \"id\"),\n   inverseJoinColumns = @JoinColumn(name = \"role_id\",referencedColumnName = \"id\")\n)\n```", "```java\n@Entity\n@Table(name=\"role\",catalog=\"task_mgmt_system\")\nclass Role {\n    @Id\n    @GeneratedValue(strategy= GenerationType.IDENTITY)\n    @Column(name = \"id\")\n    private var id:Int? = null\n\n    @Column(name=\"role\")\n    private var role : String? = null\n\n    @ManyToMany(mappedBy = \"roles\",cascade = [CascadeType.PERSIST])\n    private var users:Set<User>? = null\n // ... Getters and Setters\n}\n```", "```java\n@Entity\n@Table(name=\"task\",catalog=\"task_mgmt_system\")\nclass Task {\n   @Id\n   @GeneratedValue(strategy=GenerationType.IDENTITY)\n   @Column(name = \"id\")\n   private var id :Int?=null\n\n   @Column(name=\"title\")\n   private var title : String? = null\n\n   @Column(name=\"detail\")\n   private var detail : String? = null\n\n   @Column(name=\"assigned_to\")\n   private var assignedTo : Int? = null\n\n   @Column(name=\"status\")\n   private var status : String? = null\n\n   @OneToMany\n   @JoinColumn(name =\"task_id\")\n   private var comments : MutableSet<Comments>? = null\n\n  // .. Getters and Setters\n}\n```", "```java\n@Entity\n@Table(name=\"comments\",catalog=\"task_mgmt_system\")\nclass Comments {\n   @Id\n   @GeneratedValue(strategy=GenerationType.IDENTITY)\n   private var id :Int?=null\n\n   @ManyToOne\n   @JoinColumn(name = \"user_id\",nullable = false)\n   private var user : User? = null\n\n   @ManyToOne\n   @JoinColumn(name = \"task_id\", nullable = false)\n   private var task : Task? = null;\n\n   private var comment:String? = null\n\n  // .. Getters and Setters\n}\n```", "```java\n@Configuration\n@EnableWebSecurity\n@ComponentScan(\"com.nilangpatel.tms.security\")\nclass WebSecurityConfig : WebSecurityConfigurerAdapter() {\n\n    @Throws(Exception::class)\n    override fun configure(web: WebSecurity){\n        web.ignoring().antMatchers(\"/js/**\")\n        web.ignoring().antMatchers(\"/css/**\")\n    }\n\n   @Throws(Exception::class)\n   override fun configure(http: HttpSecurity) {\n    // .... HttpSecurity specific configuration\n   }\n}\n```", "```java\n@Throws(Exception::class)\noverride fun configure(http: HttpSecurity) {\n    http.authorizeRequests()\n        .antMatchers(\"/\",\"/login\",\"/api/register\").permitAll()\n        .antMatchers(\"/controlPage/**\",\"/getAllUsers/**\",\n            \"/allTaskList/**\",\"/addTaskComment/**\",\"/viewTask/**\")\n            .hasAnyAuthority(TaskMgmntConstant.ROLE_USER,TaskMgmntConstant.ROLE_ADMIN)\n        .antMatchers(\"/showAddTask/**\",\"/showEditTask/**\",\n                    \"/addTask/**\",\"/updateTask/**\",\"/deleteTask/**\")\n            .hasAnyAuthority(TaskMgmntConstant.ROLE_ADMIN)\n        .and()\n     .formLogin().loginPage(\"/login\").permitAll()\n        .defaultSuccessUrl(\"/controlPage\",true)\n        .failureUrl(\"/login?error=true\")\n     .and().csrf().disable()\n        .logout()\n        .permitAll().logoutSuccessUrl(\"/login?logout=true\")\n}\n```", "```java\nspring.queries.users-query= select username, password, enabled from users where username=?\nspring.queries.roles-query= select u.username, r.role from users u inner join user_role ur on(u.id=ur.user_id) inner join role r on(ur.role_id=r.id) where u.username=?\n```", "```java\n@Value(\"\\${spring.queries.users-query}\")\nprivate val usersQuery: String? = null\n\n@Value(\"\\${spring.queries.roles-query}\")\nprivate val rolesQuery: String? = null\n```", "```java\n@Throws(Exception::class)\noverride fun configure(auth: AuthenticationManagerBuilder?) {\n    auth!!.jdbcAuthentication()\n            .usersByUsernameQuery(usersQuery)\n            .authoritiesByUsernameQuery(rolesQuery)\n            .dataSource(dataSource)\n            .passwordEncoder(passwordEncoder())\n}\n```", "```java\n@Autowired\nprivate var dataSource: DataSource? = null\n\n@Bean\nfun passwordEncoder(): BCryptPasswordEncoder {\n    return BCryptPasswordEncoder()\n}\n```", "```java\n@Repository\ninterface UserRepository : JpaRepository<User, Int> {\n   fun findByUsername(username: String): User?\n}\n```", "```java\n@Service\nclass CustomUserDetailsService : UserDetailsService {\n\n    @Autowired\n    private val userRepository: UserRepository? = null\n\n    @Throws(UsernameNotFoundException::class)\n    override fun loadUserByUsername(username: String): UserDetails {\n      val user = userRepository?.findByUsername(username) ?: \n                     throw UsernameNotFoundException(username)\n      return CustomUserPrinciple(user)\n    }\n}\n```", "```java\nclass CustomUserPrinciple : UserDetails {\n    constructor(user: User?) {\n        this.user = user\n    }\n    private var user:User? = null\n\n    override fun isEnabled(): Boolean {\n        return true\n    }\n    override fun getUsername(): String {\n        return this.user?.getUsername() ?: \"\"\n    }\n    override fun isCredentialsNonExpired(): Boolean {\n        return true\n    }\n    override fun getPassword(): String {\n       return this.user?.getPassword() ?: \"\"\n    }\n    override fun isAccountNonExpired(): Boolean {\n        return true\n    }\n    override fun isAccountNonLocked(): Boolean {\n        return true\n    }\n    override fun getAuthorities(): MutableCollection<out GrantedAuthority> {\n         var userRoles:Set<Role>? = user?.getRoles() ?: null\n         var authorities:MutableSet<GrantedAuthority> = HashSet<GrantedAuthority>()\n         for(role in userRoles.orEmpty()){\n             authorities.add(CustomGrantedAuthority(role))\n         }\n         return authorities\n    }\n\n}\n```", "```java\nclass CustomGrantedAuthority : GrantedAuthority{\n    private var role:Role?=null\n    constructor( role:Role ){\n        this.role = role\n    }\n    override fun getAuthority(): String {\n        return role?.getRole() ?: \"\"\n    }\n}\n```", "```java\n@Throws(Exception::class)\noverride fun configure(auth: AuthenticationManagerBuilder?) {\n    auth!!.authenticationProvider(authenticationProvider())\n}\n\n@Bean\nfun authenticationProvider(): DaoAuthenticationProvider {\n    val authProvider = DaoAuthenticationProvider()\n    authProvider.setUserDetailsService(userDetailService)\n    authProvider.setPasswordEncoder(passwordEncoder())\n    return authProvider\n}\n```", "```java\n@Autowired\nprivate var userDetailService: CustomUserDetailsService? = null\n```", "```java\n@Controller\nclass TaskMgmtSystemController {\n\n// Controller methods...\n}\n```", "```java\n@GetMapping(\"/\")\nfun showHomePage(model: Model): String  {\n   logger.info(\"This will show home page \")\n   setProcessingData(model, TaskMgmntConstant.TITLE_HOME_PAGE)\n   return \"home\"\n}\n```", "```java\nobject TaskMgmntConstant {\n   const val ROLE_USER :String = \"ROLE_USER\"\n   const val ROLE_ADMIN :String = \"ROLE_ADMIN\"\n   const val TITLE_HOME_PAGE: String = \"Home\"\n   const val TITLE_LOGIN_PAGE: String = \"Login\"\n   const val TITLE_LANDING_CONTROL_PAGE:String = \"Control Page\"\n   const val TITLE_ADD_TASK_PAGE:String = \"Add Task\"\n   const val TITLE_UPDATE_TASK_PAGE:String = \"Update Task\"\n   const val PAGE_TITLE: String = \"pageTitle\"\n}\n```", "```java\n@GetMapping(\"/controlPage\")\nfun showControlPage(model:Model):String {\n   logger.info(\"Showing control page \")\n    setProcessingData(model, TaskMgmntConstant.TITLE_LANDING_CONTROL_PAGE)\n    return \"control-page\"\n}\n```", "```java\n@GetMapping(\"/login\")\nfun showLoginPage(@RequestParam(name = \"error\",required = false) error:String? ,\n      @RequestParam(name = \"logout\", required = false) logout:String?, model:Model):String  {\n   logger.info(\"This is login page URL   \")\n   if (error != null) {\n      model.addAttribute(\"error\", \"Invalid Credentials provided.\")\n   }\n   if (logout != null) {\n      model.addAttribute(\"message\", \"Logged out\")\n   }\n   setProcessingData(model, TaskMgmntConstant.TITLE_LOGIN_PAGE);\n   return \"login\"\n}\n```", "```java\n@GetMapping(\"/showAddTask\")\nfun showAddTask(model:Model):String {\n   logger.info(\"Going to show Add task page\")\n   setProcessingData(model, TaskMgmntConstant.TITLE_ADD_TASK_PAGE)\n   return \"task-add\"\n}\n```", "```java\n@GetMapping(\"/showEditTask\")\nfun showEditTask(@RequestParam(name = \"taskId\",required = true) taskId: Int,\n      model:Model):String {\n   val task:Task? = taskRepository?.findById(taskId)?.get()\n   if(task !=null){\n      val userId: Int = task.getAssignedTo() ?: 0\n      val user:User? = userRepository?.findById(userId)?.get()\n      val taskDto = TaskDTO(task.getId(),task.getTitle(),\n            task.getDetail(),userId,(user?.getFirstname() + \" \"+user?.getLastname()),task.getStatus(),null)\n      model.addAttribute(\"task\",taskDto)\n   }\n   logger.info(\"Going to show Edit task page\")\n   setProcessingData(model, TaskMgmntConstant.TITLE_UPDATE_TASK_PAGE)\n   model.addAttribute(\"screenTitle\",\"Edit Task\")\n   return \"task-edit\"\n}\n```", "```java\nclass TaskDTO( var id :Int?, var title : String?,\n               var detail : String?, var assignedTo : Int?, var assignedPerson:String?,\n               var status : String?, var comments : Set<Comments>?)\n```", "```java\n@PostMapping(\"/addTask\")\nfun addTask(@RequestParam(name = \"title\",required = true) title:String,\n         @RequestParam(name = \"detail\",required = true) detail:String,\n         @RequestParam(name = \"selectedUserId\", required = true) selectedUserId:Int,\n      model:Model):String {\n   val task = Task()\n   task.setTitle(title)\n   task.setDetail(detail)\n   task.setAssignedTo(selectedUserId)\n   task.setStatus(TaskStatus.PENDING.getStatus())\n   taskRepository?.save(task)\n\n   logger.info(\"Goint to show Add task page\")\n   setProcessingData(model, TaskMgmntConstant.TITLE_ADD_TASK_PAGE)\n   model.addAttribute(\"screenTitle\",\"Add new Task\")\n   return \"redirect:allTaskList\"\n}\n```", "```java\n@PostMapping(\"/updateTask\")\nfun updateTask(@RequestParam(name = \"taskId\",required = true) taskId:Int,\n         @RequestParam(name = \"title\",required = true) title:String,\n         @RequestParam(name = \"detail\",required = true) detail:String,\n         @RequestParam(name = \"selectedUserId\", required = true) selectedUserId:Int,\n         model:Model):String {\n   val task:Task? = taskRepository?.findById(taskId)?.get()\n   if(task !=null) {\n      task.setTitle(title)\n      task.setDetail(detail)\n      task.setAssignedTo(selectedUserId)\n      taskRepository?.save(task)\n   }\n\n   logger.info(\"Going to show Add task page\")\n   model.addAttribute(\"screenTitle\",\"Edit Task\")\n   setProcessingData(model, TaskMgmntConstant.TITLE_ADD_TASK_PAGE)\n   return \"redirect:allTaskList\"\n}\n```", "```java\n@PostMapping(\"/addTaskComment\")\nfun addTask(@RequestParam(name = \"taskId\",required = true) taskId:Int,\n         @RequestParam(name = \"taskComment\",required = true) taskComment:String,\n         model:Model):String {\n   val currentTask:Task? = taskRepository?.findById(taskId)?.get()\n   if(currentTask !=null) {\n      val principal = SecurityContextHolder.getContext().authentication.principal\n      if (principal is CustomUserPrinciple) {\n         val user = principal.getUser()\n         var existingComments: MutableSet<Comments>? = currentTask.getComments()\n         var comment:Comments?\n         if(existingComments == null || existingComments.isEmpty()) {\n            existingComments = mutableSetOf() // Inmitialize empty hash set\n         }\n            comment = Comments()\n            comment.setTask(currentTask)\n            if(user !=null) comment.setUser(user)\n            comment.setComment(taskComment)\n            comment = commentRepository?.save(comment)\n            if(comment !=null) {\n               existingComments.add(comment)\n            }\n            currentTask.setComments(existingComments)\n            taskRepository?.save(currentTask)\n      }\n   }\n   return \"redirect:viewTask?taskId=$taskId\"\n}\n```", "```java\n@GetMapping(\"/getAllUsers\")\nfun getUsers(model:Model):String{\n   var users: List<User>? = userRepository?.findAll() ?: null;\n   model.addAttribute(\"users\",users)\n   return \"users\"\n}\n```", "```java\n@GetMapping(\"/allTaskList\")\nfun showAllTaskList(@RequestParam(name = \"myTask\",required = false) myTask:String?,\n               model:Model):String{\n   var taskLst:  List<Array<Any>>? = null\n   if(\"true\" == myTask){\n      //get current user ID from Spring context\n      val principal = SecurityContextHolder.getContext().authentication.principal\n      if (principal is CustomUserPrinciple) {\n         val user = principal.getUser()\n         if(user !=null){\n            taskLst = taskRepository?.findMyTasks(user.getId() ?: 0)\n         }\n         model.addAttribute(\"screenTitle\",\"My Tasks\")\n      }\n   }else {\n      taskLst = taskRepository?.findAllTasks()\n      model.addAttribute(\"screenTitle\",\"All Tasks\")\n   }\n   val taskDtoLst:MutableList<TaskDTO> = ArrayList()\n   var taskDto:TaskDTO?\n   for(row in taskLst.orEmpty()){\n      taskDto = TaskDTO(row[0] as Int,row[1] as String,row[2] as String,\n       null, row[3] as String,row[4] as String,null)\n      taskDtoLst.add(taskDto)\n   }\n   model.addAttribute(\"tasks\",taskDtoLst)\n   return \"task-list\"\n}\n```", "```java\nclass TaskDTO( var id :Int?, var title : String?,\n               var detail : String?, var assignedTo : Int?, \n               var assignedPerson:String?, var status : String?, \n               var comments : Set<Comments>?)\n```", "```java\n@Repository\ninterface TaskRepository : JpaRepository<Task,Int>{\n\n    @Query(\"SELECT t.id, t.title, t.detail, concat(u.firstname,\n            ' ',u.lastname) as assignedTo ,t.status FROM task t \n            inner join users u on t.assigned_to = u.id\",\n            nativeQuery = true)\n    fun findAllTasks(): List<Array<Any>>\n\n    @Query(\"SELECT t.id, t.title, t.detail, concat(u.firstname,\n            ' ',u.lastname) as assignedTo ,t.status FROM task t \n            inner join users u on t.assigned_to = u.id and \n            u.id =:userId\",nativeQuery = true)\n    fun findMyTasks(userId : Int): List<Array<Any>>\n}\n```", "```java\n@GetMapping(\"/viewTask\")\nfun viewTask(@RequestParam(name = \"taskId\",required = true) \n                                        taskId:Int,model:Model):String{\n   val selectedTask:Task? = taskRepository?.findById(taskId)?.get()\n   val user:User? = userRepository?.\n                    findById(selectedTask?.getAssignedTo() ?: 0)?.get()\n\n   val taskDto= TaskDTO(selectedTask?.getId(),selectedTask?.getTitle(),\n         selectedTask?.getDetail(),selectedTask?.getAssignedTo(),\n         (user?.getFirstname() + \" \"+ user?.getLastname()),\n         selectedTask?.getStatus(),selectedTask?.getComments())\n   val commentLst:  List<Array<Any>>? = commentRepository?.findByTaskId(taskId)\n   val commentDtoLst:MutableList<CommentDTO> = ArrayList()\n   var commentDto:CommentDTO?\n   for(row in commentLst.orEmpty()){\n      commentDto = CommentDTO(row[0] as Int,row[1] as String,row[2] as String)\n      commentDtoLst.add(commentDto)\n   }\n   model.addAttribute(\"task\",taskDto)\n   model.addAttribute(\"taskComments\",commentDtoLst)\n   model.addAttribute(\"screenTitle\",\"Add Task Comment\")\n   return \"task-view\"\n}\n```", "```java\ninterface CommentRepository: JpaRepository<Comments, Int> {\n\n    @Query(\"SELECT c.id, c.comment, concat(u.firstname,' ',u.lastname) \n           FROM comments c inner join users u on c.user_id=u.id inner join task t \n           on t. id = c.task_id and t.id =:taskId\",nativeQuery = true)\n    fun findByTaskId(taskId: Int):List<Array<Any>>\n}\n```", "```java\ndata class CommentDTO(var id:Int,var comment:String,var userName:String)\n```", "```java\n@PostMapping(\"/deleteTask\")\nfun deleteTask(@RequestParam(name = \"taskId\",required = true) taskId:Int,model:Model):String{\n   var selectedTask:Task? = taskRepository?.findById(taskId)?.get()\n   if(selectedTask !=null) {\n      taskRepository?.delete(selectedTask)\n   }\n   return \"redirect:allTaskList\"\n}\n```", "```java\n@RestController\n@RequestMapping(\"/api\")\nclass TaskMgmntRESTController {\n...\n}\n```", "```java\n@PostMapping(value = \"/register\", consumes = [MediaType.APPLICATION_JSON_VALUE])\nfun registerNewUser(@Valid @RequestBody userRegistrationDto: UserRegistrationDTO, \n                                    errors: Errors): ResponseEntity<List<String>> {\n          // registration code...\n}\n```", "```java\ndata class UserRegistrationDTO(var username:String, var password:String,\n                               var firstname:String, var lastname:String,\n                               var roleList:List<String>)\n```", "```java\n{\n  \"username\":\"dav\",\n  \"password\":\"test\",\n  \"firstname\":\"Dav\",\n  \"lastname\":\"Patel\",\n  \"roleList\":[\"ROLE_USER\",\"ROLE_ADMIN\"]\n}\n```", "```java\nif (userRegistrationDto.username != null) {\n    var existingUser : User? = userRepository?.findByUsername(\n                                            userRegistrationDto.username) \n    if (existingUser != null) {\n        errors.reject(\"Existing username\",\"User is already exist with username \n                                        '${userRegistrationDto.username}'. \")\n    }\n}\nif( userRegistrationDto.roleList.isEmpty()){\n    errors.reject(\"No Roles provided\",\"Please provide roles\")\n}else{\n    var validRole = true\n    var invalidRole:String?=null\n    for(roleName in userRegistrationDto.roleList){\n        if(!TaskMgmntConstant.getRolesLst().contains(roleName)){\n            validRole=false\n            invalidRole = roleName\n            break\n        }\n    }\n    if(!validRole){\n        errors.reject(\"Invalid Roles\",\" $invalidRole is not a valid role\")\n    }\n}\nif (errors.hasErrors()) {\n    val errorMsg = ArrayList<String>()\n    errors.allErrors.forEach { a -> errorMsg.add(a.defaultMessage ?: \"\")\n    }\n    return ResponseEntity(errorMsg, HttpStatus.BAD_REQUEST)\n} else {\n // .. User Registration code goes here\n}\n```", "```java\nobject TaskMgmntConstant {\n   const val ROLE_USER :String = \"ROLE_USER\"\n   const val ROLE_ADMIN :String = \"ROLE_ADMIN\"\n\n   //... Other constant declaration\n\n   fun getRolesLst():List<String>{\n      return listOf(ROLE_ADMIN, ROLE_USER)\n   }\n}\n```", "```java\nval userEntity = User()\nuserEntity.setUsername(userRegistrationDto.username)\nuserEntity.setEnabled(true)\nval encodedPassword = passwordEncoder?.encode(userRegistrationDto.password)\nuserEntity.setPassword(encodedPassword ?: \"\")\nuserEntity.setFirstname(userRegistrationDto.firstname)\nuserEntity.setLastname(userRegistrationDto.lastname)\n\nvar role:Role?=null\nvar roles: MutableSet<Role> = mutableSetOf()\nfor(roleName in userRegistrationDto.roleList){\n    role = roleRepository?.findByRole(roleName)\n    if(role !=null) {\n        roles.add(role)\n    }\n}\nuserEntity.setRoles(roles)\nuserRepository?.save(userEntity)\n\nval msgLst = Arrays.asList(\"User registered successfully\")\nreturn ResponseEntity(msgLst, HttpStatus.OK)\n```"]