["```java\n> mkdir sbtjpasample\n> cd sbtjpasample\n> sbt\n> set name:=\"sbtjpasample\"\n> session save\n\n```", "```java\naddSbtPlugin(\"com.typesafe.sbteclipse\" % \"sbteclipse-plugin\" % \"2.4.0\")\n\n```", "```java\nname:=\"sbtjpasample\"\n\nscalaVersion:=\"2.10.3\"\n\nlibraryDependencies ++= Seq(\n   \"junit\" % \"junit\" % \"4.11\",\n   \"org.hibernate\" % \"hibernate-core\" % \"3.5.6-Final\",\n   \"org.hibernate\" % \"hibernate-entitymanager\" % \"3.5.6-Final\",\n   \"org.springframework\" % \"spring-core\" % \"4.0.0.RELEASE\",\n   \"org.springframework\" % \"spring-context\" % \"4.0.0.RELEASE\",\n   \"org.springframework\" % \"spring-beans\" % \"4.0.0.RELEASE\",\n   \"org.springframework\" % \"spring-tx\" % \"4.0.0.RELEASE\",\n   \"org.springframework\" % \"spring-jdbc\" % \"4.0.0.RELEASE\",\n   \"org.springframework\" % \"spring-orm\" % \"4.0.0.RELEASE\", \n   \"org.slf4j\" % \"slf4j-simple\" % \"1.6.4\",\n   \"org.apache.derby\" % \"derbyclient\" % \"10.8.1.2\",\n   \"org.scalatest\" % \"scalatest_2.10\" % \"2.0.M7\"\n)\n```", "```java\nimport javax.persistence._\nimport scala.reflect.BeanProperty\n\n@Entity\n@Table(name = \"customer\")\nclass Customer(n: String) {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    @Column(name = \"CUSTOMER_ID\")\n    @BeanProperty\n    var id: Int = _\n\n    @BeanProperty\n    @Column(name = \"NAME\")\n    var name: String = n\n\n    def this() = this (null)\n\n    override def toString = id + \" = \" + name\n}\n```", "```java\n@Entity\n@Table(name = \"language\")\nclass Language(l: String) {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    @Column(name = \"ID\")\n    @BeanProperty\n    var id: Int = _\n\n    @BeanProperty\n    @Column(name = \"NAME\")\n    var name: String = l\n\n    def this() = this (null)\n\n    override def toString = id + \" = \" + name\n}\n```", "```java\ntrait CustomerDao {\n    def save(customer: Customer): Unit\n    def find(id: Int): Option[Customer]\n    def getAll: List[Customer]\n}\n```", "```java\nimport org.springframework.beans.factory.annotation._\nimport org.springframework.stereotype._\nimport org.springframework.transaction.annotation.{Propagation, Transactional}\nimport javax.persistence._\nimport scala.collection.JavaConversions._\n\n@Repository(\"customerDao\")\n@Transactional(readOnly = false, propagation = Propagation.REQUIRED)\nclass CustomerDaoImpl extends CustomerDao {\n\n    @Autowired\n    var entityManager: EntityManager = _\n\n    def save(customer: Customer):Unit = customer.id match{\n        case 0 => entityManager.persist(customer)\n        case _ => entityManager.merge(customer)\n    }\n\n    def find(id: Int): Option[Customer] = {\n        Option(entityManager.find(classOf[Customer], id))\n    }\n\n    def getAll: List[Customer] = {\n        entityManager.createQuery(\"FROM Customer\", classOf[Customer]).getResultList.toList\n    }\n}\n```", "```java\ntrait LanguageDao {\n    def save(language: Language): Unit\n    def find(id: Int): Option[Language]\n    def getAll: List[Language]\n    def getByName(name : String): List[Language]\n}\n\n@Repository(\"languageDao\")\n@Transactional(readOnly = false, propagation = Propagation.REQUIRED)\nclass LanguageDaoImpl extends LanguageDao {\n\n  @Autowired\n  var entityManager: EntityManager = _\n\n  def save(language: Language): Unit = language.id match {\n    case 0 => entityManager.persist(language)\n    case _ => entityManager.merge(language)\n  }\n\n  def find(id: Int): Option[Language] = {\n    Option(entityManager.find(classOf[Language], id))\n  }\n\n  def getAll: List[Language] = {\n    entityManager.createQuery(\"FROM Language\", classOf[Language]).getResultList.toList\n  }\n\n  def getByName(name : String): List[Language] = {\n    entityManager.createQuery(\"FROM Language WHERE name = :name\", classOf[Language]).setParameter(\"name\", name).getResultList.toList\n  }\n}\n```", "```java\nimport org.junit.runner.RunWith\nimport org.scalatest.junit.JUnitRunner\nimport org.scalatest.FunSuite\nimport org.springframework.context.support.\nlassPathXmlApplicationContext\n\n@RunWith(classOf[JUnitRunner])\nclass CustomerTest extends FunSuite {\n\n  val ctx = new ClassPathXmlApplicationContext(\"application-context.xml\")\n\n  test(\"There are 13 Customers in the derby DB\") {\n\n    val customerDao = ctx.getBean(classOf[CustomerDao])\n    val customers = customerDao.getAll\n    assert(customers.size === 13)\n    println(customerDao\n      .find(3)\n      .getOrElse(\"No customer found with id 3\")) \n  }\n\n  test(\"Persisting 3 new languages\") {\n    val languageDao = ctx.getBean(classOf[LanguageDao])\n    languageDao.save(new Language(\"English\"))\n    languageDao.save(new Language(\"French\"))\n    languageDao.save(new Language(\"Swedish\"))\n    val languages = languageDao.getAll\n    assert(languages.size === 3) \n    assert(languageDao.getByName(\"French\").size ===1) \n  }\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<persistence version=\"2.0\"  \n    xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd\">\n\n    <persistence-unit name=\"JpaScala\" transaction-type=\"RESOURCE_LOCAL\">\n        <provider>org.hibernate.ejb.HibernatePersistence</provider>\n    </persistence-unit>\n</persistence>\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans \n\n       xsi:schemaLocation=\"\n            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\n            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd\n        \">\n\n    <tx:annotation-driven transaction-manager=\"transactionManager\"/>\n\n    <context:component-scan base-package=\"se.sfjd\"/>\n\n    <bean id=\"dataSource\"\n          class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\"\n          p:driverClassName=\"org.apache.derby.jdbc.ClientDriver\" p:url=\"jdbc:derby://localhost:1527/sample\"\n          p:username=\"app\" p:password=\"app\"/>\n\n    <bean id=\"entityManagerFactory\"\n          class=\"org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean\">\n        <property name=\"persistenceUnitName\" value=\"JpaScala\"/>\n        <property name=\"persistenceProviderClass\" value=\"org.hibernate.ejb.HibernatePersistence\"/>\n        <property name=\"jpaDialect\">\n            <bean class=\"org.springframework.orm.jpa.vendor.HibernateJpaDialect\"/>\n        </property>\n\n        <property name=\"dataSource\" ref=\"dataSource\"/>\n        <property name=\"jpaPropertyMap\">\n            <map>\n                <entry key=\"hibernate.dialect\" value=\"org.hibernate.dialect.DerbyDialect\"/>\n                <entry key=\"hibernate.connection.charSet\" value=\"UTF-8\"/>\n                <entry key=\"hibernate.hbm2ddl.auto\" value=\"update\"/>\n                <entry key=\"hibernate.show.sql\" value=\"true\"/>\n            </map>\n        </property>\n    </bean>\n\n    <bean id=\"entityManager\"\n          class=\"org.springframework.orm.jpa.support.SharedEntityManagerBean\">\n        <property name=\"entityManagerFactory\" ref=\"entityManagerFactory\"/>\n    </bean>\n\n    <bean id=\"transactionManager\" class=\"org.springframework.orm.jpa.JpaTransactionManager\">\n        <property name=\"entityManagerFactory\" ref=\"entityManagerFactory\"/>\n        <property name=\"dataSource\" ref=\"dataSource\"/>\n    </bean>\n</beans>\n```", "```java\n> sbt test\n3 = Nano Apple\n[info] CustomerTest:\n[info] - There are 13 Customers in the derby DB\n[info] - Persisting 3 new languages\n[info] Passed: : Total 2, Failed 0, Errors 0, Passed 2, Skipped 0\n[success] Total time: 3 s\n\n```", "```java\n> play new anormsample\n\n```", "```java\nlibraryDependencies ++= Seq(\n  jdbc,\n  anorm,\n  cache,\n  \"org.apache.derby\" % \"derbyclient\" % \"10.8.1.2\"\n)  \n```", "```java\npackage models\n\nimport play.api.db._\nimport play.api.Play.current\nimport anorm._\nimport anorm.SqlParser._\nimport scala.language.postfixOps\n\ncase class Customer(id: Pk[Int] = NotAssigned, name: String)\n\nobject Customer {\n  /**\n   * Retrieve a Customer from an id.\n   */\n  def findById(id: Int): Option[Customer] = {\n    DB.withConnection { implicit connection =>\n      println(\"Connection: \"+connection)\n      val query = SQL(\"SELECT * from app.customer WHERE customer_id = {custId}\").on('custId -> id)\n      query.as(Customer.simple.singleOpt)\n    }\n  }\n\n  /**\n   * Parse a Customer from a ResultSet\n   */\n  val simple = {\n    get[Pk[Int]](\"customer.customer_id\") ~\n    get[String](\"customer.name\") map {\n      case id~name => Customer(id, name)\n    }\n  }\n}\n```", "```java\npackage controllers\n\nimport play.api._\nimport play.api.mvc._\nimport play.api.db._\nimport play.api.Play.current\nimport models._\n\nobject Application extends Controller {\n  def index = Action {\n    val inputId = 2  //  Hardcoded input id for the example\n    val result = \n      DB.withConnection { implicit c =>\n        Customer.findById(inputId) match {\n          case Some(customer) => s\"Found the customer: ${customer.name}\"\n          case None => \"No customer was found.\"\n      }\n    }\n    Ok(views.html.index(result))\n  }\n}\n```", "```java\npackage scalatest\n\nimport org.scalatest._\nimport scala.slick.driver.H2Driver.simple._\nimport Database.threadLocalSession\n\nobject Contacts extends Table[(Long, String)](\"CONTACTS\") {\n  def id = column[Long](\"CONTACT_ID\", O.PrimaryKey)\n  def name = column[String](\"CONTACT_NAME\")\n  def gender = column[String](\"GENDER\")\n  def * = id ~ name\n}\n\nclass Test12 extends FunSuite {\n  val dbUrl = \"jdbc:h2:mem:contacts\"\n  val dbDriver = \"org.h2.Driver\"\n\n  test(\"Slick, H2, embedded\") {\n    Database.forURL(dbUrl, driver = dbDriver) withSession {\n    Contacts.ddl.create\n    Contacts.insertAll(\n      (1, \"Bob\"),\n      (2, \"Tom\"),\n      (3, \"Salley\")\n    )\n\n    val nameQuery = \n      for( \n        c <- Contacts if c.name like \"%o%\"\n      ) yield c.name \n    val names = nameQuery.list     \n    names.foreach(println)\n    assert(names === List(\"Bob\",\"Tom\"))\n    }\n  }\n}\n```", "```java\nDatabase.forURL(dbUrl, driver = dbDriver) withSession {\n  < code accessing the DB...>\n}\n```", "```java\n> ./activator\n> test-only scalatest.Test12\nBob\nTom\n[info] Test12:\n[info] - Slick, H2, embedded (606 milliseconds)\n[info] ScalaTest\n[info] Run completed in 768 milliseconds.\n[info] Total number of tests run: 1\n[info] Suites: completed 1, aborted 0\n[info] Tests: succeeded 1, failed 0, canceled 0, ignored 0, pending 0\n[info] All tests passed.\n[info] Passed: Total 1, Failed 0, Errors 0, Passed 1\n[success] Total time: 1 s, completed Dec 7, 2013 1:43:28 PM\n\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n\n    <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        <encoder>\n            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>\n        </encoder>\n    </appender>\n\n    <root level=\"debug\">\n        <appender-ref ref=\"STDOUT\" />\n    </root>\n\n    <logger name=\"scala.slick.compiler\"\tlevel=\"${log.qcomp:-warn}\" />\n    <logger name=\"scala.slick.compiler.QueryCompiler\" level=\"${log.qcomp.phases:-inherited}\" />\n\n…\n    <logger name=\"scala.slick.compiler.CodeGen\"                   level=\"${log.qcomp.codeGen:-inherited}\" />\n    <logger name=\"scala.slick.compiler.InsertCompiler\"            level=\"${log.qcomp.insertCompiler:-inherited}\" />\n    <logger name=\"scala.slick.jdbc.JdbcBackend.statement\"         level=\"${log.session:-info}\" />\n\n    <logger name=\"scala.slick.ast.Node$\"                          level=\"${log.qcomp.assignTypes:-inherited}\" />\n    <logger name=\"scala.slick.memory.HeapBackend$\"                level=\"${log.heap:-inherited}\" />\n    <logger name=\"scala.slick.memory.QueryInterpreter\"            level=\"${log.interpreter:-inherited}\" />\n</configuration>\n```", "```java\n> test-only scalatest.Test12\n19:00:37.470 [ScalaTest-running-Test12] DEBUG scala.slick.session.BaseSession - Preparing statement: create table \"CONTACTS\" (\"CONTACT_ID\" BIGINT NOT NULL PRIMARY KEY,\"CONTACT_NAME\" VARCHAR NOT NULL)\n19:00:37.484 [ScalaTest-running-Test12] DEBUG scala.slick.session.BaseSession - Preparing statement: INSERT INTO \"CONTACTS\" (\"CONTACT_ID\",\"CONTACT_NAME\") VALUES (?,?)\n19:00:37.589 [ScalaTest-running-Test12] DEBUG scala.slick.session.BaseSession - Preparing statement: select x2.\"CONTACT_NAME\" from \"CONTACTS\" x2 where x2.\"CONTACT_NAME\" like '%o%'\nBob\nTom\n[info] Test12:\n[info] - Slick, H2, embedded (833 milliseconds)\n[info] ScalaTest\n[info] Run completed in 952 milliseconds.\n[info] Total number of tests run: 1\n[info] Suites: completed 1, aborted 0\n[info] Tests: succeeded 1, failed 0, canceled 0, ignored 0, pending 0\n[info] All tests passed.\n[info] Passed: Total 1, Failed 0, Errors 0, Passed 1\n[success] Total time: 1 s, completed Dec 10, 2013 7:00:37 PM\n> \n```", "```java\nContacts.insertAll(\n      (1, \"Bob\"),\n      (2, \"Tom\"),\n      (2, \"Salley\")\n    )\n```", "```java\n[info] Test12:\n[info] - Slick, H2, embedded *** FAILED *** (566 milliseconds)\n[info]   org.h2.jdbc.JdbcBatchUpdateException: Unique index or primary key violation: \"PRIMARY_KEY_C ON PUBLIC.CONTACTS(CONTACT_ID)\"; SQL statement:\n[info] INSERT INTO \"CONTACTS\" (\"CONTACT_ID\",\"CONTACT_NAME\") VALUES (?,?) [23505-166]…\n\n```", "```java\n> git clone https://github.com/ThomasAlexandre/playcrud\n\n```", "```java\n> cd playcrud\n> play eclipse\n\n```", "```java\n# Home page\nGET    /    controllers.Application.index\n\n# CRUD action\nGET    /crud    controllers.Application.generateAll\n```", "```java\n@(dbForm: Form[(String,String,String,String)])\n@import helper._\n@main(title = \"The 'CRUD generator' application\") {\n    <h1>Enter Info about your existing database:</h1>\n    @form(action = routes.Application.generateAll, args = 'id -> \"dbform\") {\n\n        @select(\n            field = dbForm(\"driver\"), \n            options = options(\n                \"com.mysql.jdbc.Driver\" -> \"MySQL\",\n                \"org.postgresql.Driver\" -> \"PostgreSQL\",\n                \"org.h2.Driver\" -> \"H2\",\n                \"org.apache.derby.jdbc.ClientDriver\" -> \"Derby\"\n            ),\n            args = '_label -> \"Choose a DB\"\n        )\n\n        @inputText(\n            field = dbForm(\"dburl\"),\n            args = '_label -> \"Database url\", 'placeholder -> \"jdbc:mysql://localhost:3306/slick\"\n        )\n\n        @inputText(\n            field = dbForm(\"username\"),\n            args = '_label -> \"DB username\", 'size -> 10, 'placeholder -> \"root\"\n        )\n\n        @inputText(\n            field = dbForm(\"password\"),\n            args = '_label -> \"DB password\", 'size -> 10, 'placeholder -> \"root\"\n        )\n        <p class=\"buttons\">\n            <input type=\"submit\" id=\"submit\">\n        <p>\n    }\n} \n```", "```java\n> cd ~/projects/internal (or any location of your choice)\n> play new samplecrud\n…\nWhat is the application name? [samplecrud]\n> [ENTER]\nWhich template do you want to use for this new application? \n 1             - Create a simple Scala application\n 2             - Create a simple Java application\n> [Press 1]\nJust to verify we have our blank Play application correctly created we can launch it with:\n> cd samplecrud\n> play run\n\n```", "```java\n> cd <LOCATION_OF_PLAYCRUD_PROJECT_ROOT>\n> play \"run 9020\" (or any other port than 9000)\n\n```", "```java\n> play run\n\n```", "```java\ndb.default.driver=org.h2.Driver\ndb.default.url=\"jdbc:h2:tcp://localhost/~/customerdb\"\ndb.default.user=sa\ndb.default.password=\"\"\n```", "```java\n> play run\n\n```", "```java\n> play\n> h2-browser\n\n```", "```java\n    # PurchaseOrder\n    # \n    # PurchaseOrder list (look at the default values for pagination parameters)\n\n    GET     /purchaseorder               controllers.PurchaseOrderController.list(p:Int ?= 0, s:Int ?= 2, f ?= \"\")\n    # Add purchaseorder\n    GET     /purchaseorder/new           controllers.PurchaseOrderController.create\n    POST    /purchaseorder               controllers.PurchaseOrderController.save\n    # Edit existing purchaseorder\n    GET     /purchaseorder/:pk           controllers.PurchaseOrderController.edit(pk:Int)\n    POST    /purchaseorder/:pk           controllers.PurchaseOrderController.update(pk:Int)\n\n    # Delete purchaseorder\n    POST    /purchaseorder/:pk/delete    controllers.PurchaseOrderController.delete(pk:Int)\n    ```", "```java\npackage models\n\ncase class PurchaseOrderRow(orderNum : Option[Int], customerId : Int, productId : Int, quantity : Option[Int], shippingCost : Option[Int], salesDate : Option[Date], shippingDate : Option[Date], freightCompany : Option[String])\n\n// Definition of the PurchaseOrder table\nobject PurchaseOrder extends Table[PurchaseOrderRow](\"PURCHASE_ORDER\") {\n\n  def orderNum = column[Int](\"ORDER_NUM\", O.PrimaryKey) \n  def customerId = column[Int](\"CUSTOMER_ID\")  \n  def productId = column[Int](\"PRODUCT_ID\")   \n  def quantity = column[Option[Int]](\"QUANTITY\") \n  def shippingCost = column[Option[Int]](\"SHIPPING_COST\") \n  def salesDate = column[Option[Date]](\"SALES_DATE\")  \n  def shippingDate = column[Option[Date]](\"SHIPPING_DATE\") \n  def freightCompany = column[Option[String]](\"FREIGHT_COMPANY\") \n\n  def * = orderNum.? ~ customerId ~ productId ~ quantity ~ shippingCost ~ salesDate ~ shippingDate ~ freightCompany <> (PurchaseOrderRow.apply _, PurchaseOrderRow.unapply _)\n\n  def findAll(filter: String = \"%\") = {\n    for {\n      entity <- PurchaseOrder\n      // if (entity.name like (\"%\" + filter))\n    } yield entity\n  }\n\n  def findByPK(pk: Int) =\n     for (\n       entity <- PurchaseOrder if entity.orderNum === pk\n     ) yield entity\n     ...\n```", "```java\n    product\n    purchaseorder\n    manufacturer\n    ```"]