["```java\nkaraf@root()>install -s mvn:io.netty/netty/3.9.0.Final\nkaraf@root()>install -s mvn:com.google.guava/guava/16.0.1\nkaraf@root()>install -s mvn:com.codahale.metrics/metrics-core/3.0.2\nkaraf@root()>install -s mvn:com.datastax.cassandra/cassandra-driver-core/2.0.2\n\n```", "```java\n@Id\n@Column(nullable = false)\nprivate String title;\n\n@Column(length=10000)\nprivate String ingredients;\n```", "```java\n    ./bin/cqlsh\n    Connected to Cluster at localhost:9160.\n    [cqlsh 4.0.1 | Cassandra 2.0.1 | CQL spec 3.1.1 | Thrift protocol 19.37.0]\n    Use HELP for help.\n\n    ```", "```java\n    cqlsh> CREATE KEYSPACE karaf_demo WITH replication = {'class':'SimpleStrategy', 'replication_factor':1};\n\n    ```", "```java\n    cqlsh> USE karaf_demo;\n    cqlsh:karaf_demo>\n\n    ```", "```java\n    cqlsh:karaf_demo> DESCRIBE tables;\n\n    <empty>\n\n    cqlsh:karaf_demo>\n\n    ```", "```java\n    cqlsh:karaf_demo> CREATE TABLE RECIPES (title text PRIMARY KEY,ingredients text);\n    cqlsh:karaf_demo> DESCRIBE TABLES;\n\n    recipes\n\n    cqlsh:karaf_demo>\n\n    ```", "```java\ncqlsh:karaf_demo> DESCRIBE TABLE recipes;\n\nCREATE TABLE recipes (\n title text,\n ingredients text,\n PRIMARY KEY (title)\n) WITH\n bloom_filter_fp_chance=0.010000 AND\n caching='KEYS_ONLY' AND\n comment='' AND\n dclocal_read_repair_chance=0.000000 AND\n gc_grace_seconds=864000 AND\n index_interval=128 AND\n read_repair_chance=0.100000 AND\n replicate_on_write='true' AND\n populate_io_cache_on_flush='false' AND\n default_time_to_live=0 AND\n speculative_retry='NONE' AND\n memtable_flush_period_in_ms=0 AND\n compaction={'class': 'SizeTieredCompactionStrategy'} AND\n compression={'sstable_compression': 'LZ4Compressor'};\n\n```", "```java\n    <dependencies>\n      <dependency>\n        <groupId>org.osgi</groupId>\n        <artifactId>org.osgi.core</artifactId>\n        <version>5.0.0</version>\n      </dependency>\n      <dependency>\n        <groupId>org.osgi</groupId>\n        <artifactId>org.osgi.compendium</artifactId>\n        <version>5.0.0</version>\n      </dependency>\n      <dependency>\n        <groupId>org.osgi</groupId>\n        <artifactId>org.osgi.enterprise</artifactId>\n        <version>5.0.0</version>\n      </dependency>\n      <!-- Cassandra Driver -->\n      <dependency>\n        <groupId>com.datastax.cassandra</groupId>\n        <artifactId>cassandra-driver-core</artifactId>\n        <version>2.0.1</version>\n      </dependency>\n      <!-- custom felix gogo command -->\n      <dependency>\n        <groupId>org.apache.karaf.shell</groupId>\n        <artifactId>org.apache.karaf.shell.console</artifactId>\n        <version>3.0.0</version>\n      </dependency>\n    </dependencies>\n    ```", "```java\n    <plugin>\n      <groupId>org.apache.felix</groupId>\n      <artifactId>maven-bundle-plugin</artifactId>\n      <version>2.4.0</version>\n      <extensions>true</extensions>\n      <configuration>\n        <instructions>\n          <Bundle-SymbolicName>\n                  ${project.artifactId}\n          </Bundle-SymbolicName>\n          <Bundle-Activator>\n                  com.packt.cassandra.demo.Activator\n          </Bundle-Activator>\n          <Export-Package>\n                  com.packt.cassandra.demo.api.*\n          </Export-Package>\n          <Import-Package>\n            org.osgi.service.blueprint;resolution:=optional,\n            org.apache.felix.service.command,\n            org.apache.felix.gogo.commands,\n            org.apache.karaf.shell.console,\n            *\n          </Import-Package>\n        </instructions>\n      </configuration>\n    </plugin>\n    ```", "```java\n    <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n    <blueprint default-activation=\"eager\"\n    >\n      <!-- Define RecipeBookService Services, and expose them. -->\n      <bean id=\"recipeBookService\" class=\"com.packt.cassandra.demo.dao.RecipeBookServiceDAOImpl\" init-method=\"init\" destroy-method=\"destroy\"/>\n\n      <service ref=\"recipeBookService\" interface=\"com.packt.cassandra.demo.api.RecipeBookService\"/>\n\n      <!-- Apache Karaf Commands -->\n      <command-bundle >\n        <command>\n          <action class=\"com.packt.cassandra.demo.commands.AddRecipe\">\n            <property name=\"recipeBookService\" ref=\"recipeBookService\"/>\n          </action>\n        </command>\n        <command>\n          <action class=\"com.packt.cassandra.demo.commands.RemoveRecipe\">\n            <property name=\"recipeBookService\" ref=\"recipeBookService\"/>\n          </action>\n        </command>\n        <command>\n          <action class=\"com.packt.cassandra.demo.commands.ListRecipes\">\n            <property name=\"recipeBookService\" ref=\"recipeBookService\"/>\n          </action>\n        </command>\n      </command-bundle>\n    </blueprint>\n    ```", "```java\n        package com.packt.cassandra.demo.api;\n\n        import java.util.Collection;\n        import com.packt.jpa.demo.entity.Recipe;\n\n        public interface RecipeBookService {\n\n           public Collection<Recipe> getRecipes();\n\n           public void addRecipe(String title, String ingredients);\n\n           public void deleteRecipe(String title);\n\n        }\n        ```", "```java\n        public class RecipeBookServiceDAOImpl implements RecipeBookService {\n\n          private Cluster cluster;\n          private Session session;\n\n          public void connect(String node) {\n            cluster = Cluster.builder().addContactPoint(node).build();\n            Metadata metadata = cluster.getMetadata();\n            System.out.printf(\"Connected to cluster: %s\\n\", metadata.getClusterName());\n            for (Host host : metadata.getAllHosts()) {\n              System.out.printf(\"Datatacenter: %s; Host: %s; Rack: %s\\n\", host.getDatacenter(), host.getAddress(), host.getRack());\n            }\n            session = cluster.connect(\"karaf_demo\");\n          }\n\n          public void destroy() {\n            cluster.close();\n          }\n\n          public void init() {\n            connect(\"127.0.0.1\");\n          }\n\n          @Override\n          public List<Recipe> getRecipes() {\n            List<Recipe> result = new ArrayList<Recipe>();\n            ResultSet results = session.execute(\"SELECT * FROM karaf_demo.recipes;\");\n\n            for (Row row : results) {\n              Recipe recipe = new Recipe();\n              recipe.setTitle(row.getString(\"title\"));\n              recipe.setIngredients(row.getString(\"ingredients\"));\n              result.add(recipe);\n            }\n            return result;\n          }\n\n          @Override\n          public void addRecipe(String title, String ingredients) {\n\n            ResultSet resultSet = session.execute(\"INSERT INTO karaf_demo.recipes (title, ingredients) VALUES ('\" + title + \"', '\" + ingredients + \"');\");\n            System.out.println(\"Result = \" + resultSet);\n          }\n\n          @Override\n          public void deleteRecipe(String title) {\n            ResultSet resultSet = session.execute(\"DELETE from karaf_demo.recipes where title='\" + title + \"';\");\n            System.out.println(\"Result = \" + resultSet);\n          }\n        }\n        ```", "```java\n        public class Recipe {\n            private String title;\n            private String ingredients;\n            public Recipe() {\n            }\n            public Recipe(String title, String ingredients) {\n                super();\n                this.title = title;\n                this.ingredients = ingredients;\n            }\n            public String getTitle() {\n                return title;\n            }\n            public void setTitle(String title) {\n                this.title = title;\n            }\n            public String getIngredients() {\n                return ingredients;\n            }\n            public void setIngredients(String ingredients) {\n                this.ingredients = ingredients;\n            }\n            public String toString() {\n                return \"\" + this.title + \" \" + this.ingredients;\n            }\n        }\n        ```", "```java\n    <!-- Apache Karaf Commands -->\n    <command-bundle >\n      <command>\n        <action class=\"com.packt.cassandra.demo.commands.AddRecipe\">\n          <property name=\"recipeBookService\" ref=\"recipeBookService\"/>\n        </action>\n      </command>\n      <command>\n        <action class=\"com.packt.cassandra.demo.commands.RemoveRecipe\">\n          <property name=\"recipeBookService\" ref=\"recipeBookService\"/>\n        </action>\n      </command>\n      <command>\n        <action class=\"com.packt.cassandra.demo.commands.ListRecipes\">\n          <property name=\"recipeBookService\" ref=\"recipeBookService\"/>\n        </action>\n      </command>\n    </command-bundle>\n    ```", "```java\n    karaf@root()>  install â€“s mvn:com.packt/chapter8-recipe1/1.0.0-SNAPSHOT\n\n    ```", "```java\n    karaf@root()> Cassandra Demo Bundle stopping...\n    Cassandra Demo Bundle starting...\n    Connected to cluster: Cluster\n    Datatacenter: datacenter1; Host: /127.0.0.1; Rack: rack1\n\n    ```", "```java\n    karaf@root()> test:addrecipe \"Name\" \"Ingredients\"\n    karaf@root()> test:listrecipes\n\n    ```"]