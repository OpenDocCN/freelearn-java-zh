["```java\n    <dependency>\n        <groupId>org.springframework.batch</groupId>\n        <artifactId>spring-batch-core</artifactId>\n        <version>3.0.2.RELEASE</version>\n    </dependency>\n\n    <dependency>\n        <groupId>org.springframework.batch</groupId>\n        <artifactId>spring-batch-infrastructure</artifactId>\n        <version>3.0.2.RELEASE</version>\n    </dependency>\n    ```", "```java\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-jdbc</artifactId>\n      <version>4.1.2.RELEASE</version>\n    </dependency>\n\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-tx</artifactId>\n        <version>4.1.2.RELEASE</version>\n    </dependency>\n    ```", "```java\n    <dependency>\n      <groupId>mysql</groupId>\n      <artifactId>mysql-connector-java</artifactId>\n      <version>5.1.34</version>\n    </dependency>\n    ```", "```java\n    @Configuration\n    @EnableBatchProcessing\n    public class BatchConfig {\n    ...\n    }\n    ```", "```java\n    @Bean\n    public DataSource dataSource() {\n            DriverManagerDataSource dataSource = new DriverManagerDataSource();\n\n    dataSource.setDriverClassName(\"com.mysql.jdbc.Driver\");\n    dataSource.setUrl(\"jdbc:mysql://localhost:3306/db1\");\n            dataSource.setUsername(\"root\");\n            dataSource.setPassword(\"123\");\n\n            return dataSource;\n    }\n    ```", "```java\n    public class Task1 implements Tasklet {    \n\n    }\n    ```", "```java\n    public RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext)\n            throws Exception {\n        System.out.println(\"Starting job..\");\n\n        // ... your code\n\n        System.out.println(\"Job done..\");\n        return RepeatStatus.FINISHED;\n    }\n    ```", "```java\n    @Autowired\n    private JobBuilderFactory jobs;\n\n    @Autowired\n    private StepBuilderFactory steps;\n    ```", "```java\n    @Bean\n    public Step step1(){\n        return steps.get(\"step1\")\n                .tasklet(new Task1())\n                .build();\n    }   \n    ```", "```java\n    @Bean\n    public Job job1(){\n        return jobs.get(\"job1\")\n                .start(step1())\n                .build();\n    }\n    ```", "```java\n@Bean\npublic Job job1(){\n    return jobs.get(\"job1\")\n            .start(step1())\n .next(step2())\n            .build();\n}\n```", "```java\n        <plugin>\n            <artifactId>maven-assembly-plugin</artifactId>\n            <configuration>\n                <archive>\n                    <manifest>\n                        <mainClass>\n                            org.springframework.batch.core.launch.support. CommandLineJobRunner\n                        </mainClass>\n                    </manifest>\n                </archive>\n                <descriptorRefs>\n                    <descriptorRef> jar-with-dependencies</descriptorRef>\n                </descriptorRefs>\n            </configuration>\n        </plugin>\n    ```", "```java\n    mvn clean compile assembly:single\n    ```", "```java\n    java -jar target/springwebapp-jar-with-dependencies.jar com.spring_cookbook.batch.BatchConfig job1\n    ```", "```java\n    ...\n    INFO: Job: [SimpleJob: [name=job1]] launched with the following parameters: [{}]\n    ...\n    INFO: Executing step: [step1]\n    Starting job..\n    Job done..\n    ...\n    INFO: Job: [SimpleJob: [name=job1]] completed with the following parameters: [{}] and the following status: [COMPLETED]\n    ...\n    ```", "```java\njava -jar target/springwebapp-jar-with-dependencies.jar com.spring_cookbook.batch.BatchConfig job1 p=1\njava -jar target/springwebapp-jar-with-dependencies.jar com.spring_cookbook.batch.BatchConfig job1 p=2\njava -jar target/springwebapp-jar-with-dependencies.jar com.spring_cookbook.batch.BatchConfig job1 p=3\n```", "```java\n...\nINFO: Job: [SimpleJob: [name=job1]] launched with the following parameters: [{p=3}]\n...\n```", "```java\njava -jar target/springwebapp-jar-with-dependencies.jar com.spring_cookbook.batch.BatchConfig job1 p=`date +'%s'`\n```", "```java\nmvn compile exec:java - Dexec.mainClass=org.springframework.batch.core.launch.support. CommandLineJobRunner - Dexec.args=\"com.spring_cookbook.batch.BatchConfig job1 p=4\"\n```", "```java\n    public class ServletInitializer extends AbstractAnnotationConfigDispatcherServletInitializer {\n\n    @Override\n    protected Class<?>[] getServletConfigClasses() {\n        return new Class<?>[]{AppConfig.class, BatchConfig.class};\n    }\n    ```", "```java\n    @Autowired\n    JobLauncher jobLauncher;\n\n    @Autowired\n    Job job;\n    ```", "```java\n    try {\n      JobParametersBuilder jobParametersBuilder = new JobParametersBuilder();\n      jobParametersBuilder.addDate(\"d\", new Date());\n\n      jobLauncher.run(job, jobParametersBuilder.toJobParameters());\n    } catch (Exception e) {\n      ...\n    }\n    ```", "```java\n    @StepScope\n    public RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext)\n            throws Exception {\n    ...\n    ```", "```java\n    String test = (String)chunkContext.getStepContext().getJobParameters(). get(\"test\")\n    ```", "```java\n    mvn compile exec:java - Dexec.mainClass=org.springframework.batch.core.launch. support.CommandLineJobRunner - Dexec.args=\"com.spring_cookbook.batch.BatchConfig job1 test=hello\"\n    ```", "```java\n@Bean\npublic SystemCommandTasklet task1() {\n  SystemCommandTasklet tasklet = new SystemCommandTasklet();\n\n  tasklet.setCommand(\"touch test.txt\");\n  tasklet.setWorkingDirectory(\"/home/merlin\");\n  tasklet.setTimeout(5000);\n\n  return tasklet;\n}\n```", "```java\n    public class ServletInitializer extends AbstractAnnotationConfigDispatcherServletInitializer {\n\n    @Override\n    protected Class<?>[] getServletConfigClasses() {\n        return new Class<?>[]{AppConfig.class, BatchConfig.class};\n    }\n    ```", "```java\n    @Configuration\n    @EnableBatchProcessing\n    @EnableScheduling\n    public class BatchConfig {\n    ...\n    ```", "```java\n    @Autowired\n    JobLauncher jobLauncher;\n    ```", "```java\n    @Scheduled(fixedDelay=10000)\n    public void runJob1() throws Exception {\n    ...\n    }\n    ```", "```java\n    JobParametersBuilder jobParametersBuilder = new JobParametersBuilder();\n    jobParametersBuilder.addDate(\"d\", new Date());      \n    jobLauncher.run(job1(), jobParametersBuilder.toJobParameters());\n    ```", "```java\n@Scheduled(fixedRate=10000)\npublic void runJob1() throws Exception {\n...\n}\n```", "```java\n@Scheduled(cron=\"*/5 * * * *\")\npublic void runJob1() throws Exception {\n...\n}\n```", "```java\nMerlin, 333\nArthur, 37\nLancelot, 35\nTristan, 20\nIseult, 22\nMark, 56\n```", "```java\npublic class User {\n  private String firstName;\n  private int age;\nâ€¦\n}\n```", "```java\nCREATE TABLE user  (\n    id BIGINT NOT NULL PRIMARY KEY AUTO_INCREMENT,\n  first_name TEXT,\n  age INT\n);\n```", "```java\n    private LineMapper<User> lineMapper() {\n      DefaultLineMapper<User> lineMapper = new DefaultLineMapper<User>();\n\n      DelimitedLineTokenizer lineTokenizer = new DelimitedLineTokenizer();\n        lineTokenizer.setNames(new String[]{\"firstName\",\"age\"});\n        lineTokenizer.setIncludedFields(new int[]{0,1});\n        lineMapper.setLineTokenizer(lineTokenizer);\n\n        BeanWrapperFieldSetMapper<User> fieldSetMapper = new BeanWrapperFieldSetMapper<User>();\n        fieldSetMapper.setTargetType(User.class);\n        lineMapper.setFieldSetMapper(fieldSetMapper);\n\n        return lineMapper;\n    }\n    ```", "```java\n    @Bean\n    @StepScope\n    public FlatFileItemReader<User> reader(@Value(\"#{jobParameters[file]}\") String csvFilePath) {\n        FlatFileItemReader<User> reader = new FlatFileItemReader<User>();\n        reader.setLineMapper(lineMapper());\n        reader.setResource(new PathResource(csvFilePath));\n\n        reader.setLinesToSkip(1);\n        reader.setEncoding(\"utf-8\");\n\n        return reader;\n    }\n    ```", "```java\n    public class UserProcessorIncrementAge implements ItemProcessor<User, User> {\n\n        public User process(User user) throws Exception {\n            int age = user.getAge();\n            age++;\n            user.setAge(age);\n            return user;\n        }\n\n    }\n    ```", "```java\n    @Bean\n    private ItemProcessor<User,User> processor() {\n        return new UserProcessorIncrementAge();\n    }\n    ```", "```java\n    @Bean\n    public DataSource dataSource() {\n      DriverManagerDataSource dataSource = new DriverManagerDataSource();\n\n      dataSource.setDriverClassName(\"com.mysql.jdbc.Driver\");\n      dataSource.setUrl(\"jdbc:mysql://localhost:3306/db1\");\n      dataSource.setUsername(\"root\");\n      dataSource.setPassword(\"123\");\n\n      return dataSource;\n    }\n    ```", "```java\n    @Bean\n    public JdbcBatchItemWriter<User> writer(){\n        JdbcBatchItemWriter<User> writer = new JdbcBatchItemWriter<User>();\n        writer.setDataSource(dataSource());\n        writer.setSql(\"INSERT INTO user (first_name, age) \" +\n            \"VALUES ( :firstName, :age)\");\n        ItemSqlParameterSourceProvider<User> paramProvider = new BeanPropertyItemSqlParameterSourceProvider<User>();\n        writer.setItemSqlParameterSourceProvider(paramProvider);\n        return writer;\n    }\n    ```", "```java\n    @Autowired\n    private JobBuilderFactory jobs;\n\n    @Autowired\n    private StepBuilderFactory steps;\n    ```", "```java\n    @Bean\n    public Step step1(){\n        return steps.get(\"step\")\n                .<User,User>chunk(1)\n                .reader(reader(null))\n                .processor(processor())\n                .writer(writer())\n                .build();\n    }\n    ```", "```java\n    @Bean\n    public Job job1(){\n        return jobs.get(\"job1\")\n                .start(step1())\n                .build();\n    }\n    ```", "```java\n    mvn compile exec:java - Dexec.mainClass=org.springframework.batch.core.launch. support.CommandLineJobRunner - Dexec.args=\"com.spring_cookbook.batch.BatchConfig job1 file=input_data.txt\"\n    ```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<records>\n    <person>\n        <firstName>Shania</firstName>\n    <age>49</age>\n    </person>\n    <person>\n        <firstName>Nelly</firstName>\n    <age>36</age>\n    </person>\n</records>\n```", "```java\npublic class User {\n  private String firstName;\n  private int age;\n```", "```java\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-oxm</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    ```", "```java\n    @Bean\n    @StepScope\n    public StaxEventItemReader<User> reader(@Value(\"#{jobParameters[file]}\") String xmlFilePath) {        \n        StaxEventItemReader<User> reader = new StaxEventItemReader<User>();\n        reader.setResource(new PathResource(xmlFilePath));\n        reader.setFragmentRootElementName(\"person\");\n\n      XStreamMarshaller marshaller = new XStreamMarshaller();\n      marshaller.setAliases(Collections.singletonMap(\"person\", User.class)); \n      reader.setUnmarshaller(marshaller);\n\n      return reader;\n    }\n    ```", "```java\n    mvn compile exec:java - Dexec.mainClass=org.springframework.batch.core.launch. support.CommandLineJobRunner - Dexec.args=\"com.spring_cookbook.batch.BatchConfig job1 file=input_data.xml\n\n    ```", "```java\nmarshaller.setAliases(Collections.singletonMap(\"person\", User.class)); \n```", "```java\npublic class User {\n  private String firstName;\n  private int age;\n```", "```java\n    @Bean\n    @StepScope\n    public FlatFileItemWriter<User> writer(@Value(\"#{jobParameters[fileOut]}\") String csvFilePath) {\n        BeanWrapperFieldExtractor<User> fieldExtractor = new BeanWrapperFieldExtractor<User>();\n        fieldExtractor.setNames(new String[]{\"firstName\",\"age\"});\n\n        DelimitedLineAggregator<User> lineAggregator = new DelimitedLineAggregator<User>();\n        lineAggregator.setDelimiter(\",\");\n        lineAggregator.setFieldExtractor(fieldExtractor);\n\n        FlatFileItemWriter<User> writer = new FlatFileItemWriter<User>();\n        writer.setLineAggregator(lineAggregator); \n        writer.setResource(new PathResource(csvFilePath));\n\n        return writer;\n    }\n    ```", "```java\n    mvn compile exec:java - Dexec.mainClass=org.springframework.batch.core.launch. support.CommandLineJobRunner - Dexec.args=\"com.spring_cookbook.batch.BatchConfig job1 file=input_data.txt fileOut=output_data.txt \n    ```", "```java\n    Merlin,334\n    Arthur,38\n    Lancelot,36\n    Tristan,21\n    Iseult,23\n    Mark,57\n    ```", "```java\nCREATE TABLE user  (\n    id BIGINT NOT NULL PRIMARY KEY AUTO_INCREMENT,\n  first_name TEXT,\n  age INT\n);\n```", "```java\npublic class User {\n  private String firstName;\n  private int age;\n```", "```java\n@Bean\n@StepScope\npublic JdbcCursorItemReader<User> reader() {\n  JdbcCursorItemReader<User> reader = new JdbcCursorItemReader<User>();\n  reader.setDataSource(dataSource());\n\n  reader.setSql(\"SELECT first_name, age FROM user\");\n\n  reader.setRowMapper(new BeanPropertyRowMapper<User>(User.class));\n\n  return reader;\n}\n```", "```java\nSELECT name1 as first_name, the_age as age FROM user\n\n```", "```java\n    <dependency>\n      <groupId>org.springframework.batch</groupId>\n      <artifactId>spring-batch-test</artifactId>\n      <version>3.0.2.RELEASE</version>\n    </dependency>\n    ```", "```java\n    @RunWith(SpringJUnit4ClassRunner.class)\n    @ContextConfiguration(classes = {BatchConfig.class})\n    public class BatchJob1Test {\n    ...\n    ```", "```java\n    @ContextConfiguration(classes = {BatchConfig.class})\n    public class BatchJob1Test extends AbstractTestNGSpringContextTests {\n    ...\n    ```", "```java\n    @Autowired\n    private JobLauncherTestUtils jobLauncherTestUtils;\n    ```", "```java\n    @Test\n    public void testJob() throws Exception {\n        JobExecution jobExecution = jobLauncherTestUtils.launchJob();\n        Assert.assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus());\n        Assert.assertEquals(1, jobExecution.getStepExecutions().size());\n    }\n    ```", "```java\n    @Test\n    public void testStep() throws Exception {\n        JobExecution jobExecution = jobLauncherTestUtils.launchStep(\"step1\");\n        Assert.assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus());\n    }\n    ```", "```java\n    @Test\n    public void testTasklet() throws Exception {\n        Task1 task1 = new Task1();\n        Assert.assertEquals(RepeatStatus.FINISHED, task1.execute(null, null));  \n    }\n    ```"]