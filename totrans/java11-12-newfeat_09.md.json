["```java\n// basic HttpClient instance \nHttpClient client = HttpClient.newHttpClient();        \n\n// Using builder pattern to get a basic HttpRequest instance with just //the URI \nHttpRequest request = HttpRequest.newBuilder()         \n                     .uri(URI.create(\"http://www.ejavaguru.com/\"))   \n                     .build();                                       \n\n// response instance not created using a builder. \n// HttpClient sends HttpRequests and makes HttpResponse available \nHttpResponse<String> response = client.send(request,  \n                            HttpResponse.BodyHandlers.ofString()); \nSystem.out.println(response.body()); \n```", "```java\nHttpClient client = HttpClient.newHttpClient(); \n```", "```java\nHttpClient client = HttpClient.builder(). \n                     .version(Version.HTTP_2) \n                     .build(); \n```", "```java\nHttpClient client = HttpClient.builder(). \n                     .version(Version.HTTP_2) \n                     .followRedirects(Redirect.NORMAL), \n                     .build(); \n```", "```java\nHttpClient client = HttpClient.newBuilder(). \n                      .version(Version.HTTP_2) \n                      .followRedirects(redirect.NORMAL), \n                      .authenticator(Authenticator.getDefault()) \n                      .build(); \n```", "```java\nHttpClient client = HttpClient.newBuilder(). \n                      .version(Version.HTTP_2) \n                      .followRedirects(redirect.NORMAL), \n                      .authenticator(new Authenticator() { \n                        public PasswordAuthentication \n                         getPasswordAuthentication() { \n                          return new PasswordAuthentication( \n                          \"admin\", \"adminPassword\".toCharArray()); \n                       }) \n                    .build(); \n```", "```java\nHttpRequest request = HttpRequest.newBuilder() \n                        .uri(URI.create(\"http://www.eJavaGuru.com/\")) \n                        .build(); \n```", "```java\nHttpRequest request = HttpRequest.newBuilder() \n                        .uri(URI.create(\"http://www.eJavaGuru.com/\")) \n                        .timeout(Duration.ofSeconds(240)) \n                        .build(); \n```", "```java\nHttpRequest request = HttpRequest.newBuilder() \n                     .uri(new URI(\"http://www.eJavaGuru.com/\")) \n                     .timeout(Duration.ofSeconds(240)) \n                     .POST(HttpRequest.noBody()) \n                     .build(); \n```", "```java\nHttpRequest request = HttpRequest.newBuilder() \n                        .uri(new URI(\"http://www.eJavaGuru.com/\")) \n                        .timeout(Duration.ofSeconds(240)) \n                        .POST(HttpRequest.BodyProcessor \n                        .fromFile(Paths.get(\"data.txt\"))) \n                        .build(); \n```", "```java\nHttpRequest request = HttpRequest.newBuilder() \n                        .uri(new URI(\"http://www.eJavaGuru.com/\")) \n                        .timeout(Duration.ofSeconds(240)) \n                        .POST(HttpRequest.BodyProcessor \n                        .fromString(\"This is sample data\")) \n                        .build(); \n```", "```java\nHttpRequest request = HttpRequest.newBuilder() \n                        .uri(URI.create(\"http://www.eJavaGuru.com/\")) \n                        .header(\"Content-Type\", \"text/plain\") \n                        .build();\n```", "```java\nHttpClient client = HttpClient.newHttpClient();        \n\nHttpRequest request = HttpRequest.newBuilder()         \n                       .uri(URI.create(\"http://google.com/\"))   \n                       .build();                                       \n\nHttpResponse<String> response = client.send(request, HttpResponse.\n                                            BodyHandlers.ofString()); \nSystem.out.println(response.body()); \n```", "```java\nclass SyncGetHTML { \n    public static void main(String args[]) throws Exception { \n        HttpClient client = HttpClient.newHttpClient(); \n        HttpRequest request = HttpRequest.newBuilder() \n        .uri(URI.create(\"https://docs.oracle.com/en/java/javase\n        /11/docs/api/java.net.http/java/net/http/HttpClient.html\")) \n              .build(); \n\n        HttpResponse<String> response = \n              client.send(request, BodyHandlers.ofString()); \n        System.out.println(response.body()); \n    } \n} \n```", "```java\n<!DOCTYPE HTML> \n<!-- NewPage --> \n<html lang=\"en\"> \n<head> \n<!-- Generated by javadoc --> \n<title>HttpClient (Java SE 11 & JDK 11 )</title> \n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"> \n<meta name=\"keywords\" content=\"java.net.http.HttpClient class\"> \n```", "```java\nclass SyncGetHTMLToFile { \n    public static void main(String args[]) throws Exception { \n        HttpClient client = HttpClient.newHttpClient(); \n        HttpRequest request = HttpRequest.newBuilder() \n        .uri(URI.create(\"https://docs.oracle.com/en\n        /java/javase/11/docs/api/java.net.http/java\n        /net/http/HttpClient.html\")) \n              .build(); \n\n        HttpResponse<Path> response = \n           client.send(request, \n           BodyHandlers.ofFile(Paths.get(\"HttpClient.html\"))); \n    } \n} \n```", "```java\nclass AsyncGetHTMLToFile { \n    public static void main(String args[]) throws Exception { \n        HttpClient client = HttpClient.newHttpClient(); \n        HttpRequest request = HttpRequest.newBuilder() \n        .uri(URI.create(\"https://docs.oracle.com/en\n        /java/javase/11/docs/api/java.net.http/java/net\n        /http/HttpClient.html\")) \n              .build(); \n\n        CompletableFuture<Path> response = \n            client.sendAsync(request, \n            BodyHandlers.ofFile(Paths.get(\"http.html\"))) \n            .thenApply(HttpResponse::body); \n        response.get(); \n    } \n} \n```", "```java\nclass MultipleImageDownload{ \n    public static void main(String args[]) throws Exception { \n        List<URI> imageURIs =  \nList.of(  \nURI.create(\"http://ejavaguru.com/images/about/jbcn-actual-2018.jpg\"), \nURI.create(\"http://ejavaguru.com/images/about/iit-delhi.jpg\"), \nURI.create(\"http://ejavaguru.com/images/about/techfluence.jpg\")); \n\n        HttpClient client = HttpClient.newHttpClient(); \n\n        List<HttpRequest> imgDwnldRequests = imageURIs.stream() \n                                    .map(HttpRequest::newBuilder) \n                                    .map(builder -> builder.build()) \n                                    .collect(Collectors.toList()); \n\n        CompletableFuture.allOf(imgDwnldRequests.stream() \n            .map(request -> client.sendAsync(request, \n                                 BodyHandlers.ofFile( \n                                 Paths.get(((String)request.uri() \n                                        .getPath()).substring(14) \n                                     ) \n                                 ) \n                            )) \n                           .toArray(CompletableFuture<?>[]::new)) \n                           .join(); \n    } \n} \n```", "```java\npublic class HttpReqPost { \n    public static void main(String uri[]) throws Exception { \n        String postData = \"?\n        name='Mala'&email='info@ejavaguru\n        @gmail.com'\"; \n        HttpClient client = HttpClient.newHttpClient(); \n        HttpRequest request = HttpRequest.newBuilder() \n       .uri(URI.create(\"http://www.ejavaguru.com/Java11/register.php\")) \n            .POST(BodyPublishers.ofString(postData)) \n            .build(); \n\n        HttpResponse<?> response = client.send(request, \n        BodyHandlers.discarding()); \n        System.out.println(response.statusCode()); \n    } \n} \n```", "```java\n.POST(BodyPublishers.ofString(postString)  \n```"]