["```java\n(defn print-coords [coords]\n  (let [lat (first coords)\n        lon (last coords)]\n    (println (str \"Latitude: \" lat \" - \" \"Longitude: \" lon))))\n```", "```java\n(defn print-coords [coords]\n  (let [[lat lon] coords]\n    (println (str \"Latitude: \" lat \" - \" \"Longitude: \" lon))))\n```", "```java\nuser=>(let\n;;\n;;     [1 2 3]\n;;      | | |\n      [[a b c] [1 2 3]] (println a b c))\n1 2 3\nnil\n```", "```java\nuser=> (let [[a b c] '(1 2 3)] (println a b c))\n1 2 3\nnil\n```", "```java\n(defn print-coords [airport]\n  (let [lat (:lat airport)\n        lon (:lon airport)\n        name (:name airport)]\n    (println (str name \" is located at Latitude: \" lat \" - \" \"Longitude: \" lon))))\n```", "```java\n(defn print-coords [airport]\n  (let [{lat :lat lon :lon airport-name :name} airport]\n    (println (str airport-name \" is located at Latitude: \" lat \" - \" \"Longitude: \" lon))))\n```", "```java\n(defn print-coords [airport]\n  (let [{:keys [lat lon name]} airport]\n    (println (str name \" is located at Latitude: \" lat \" - \" \"Longitude: \" lon))))\n```", "```java\nuser=> (def airport {:lat 48.9615, :lon 2.4372, :code 'LFPB', :name \"Paris Le Bourget Airport\"})\n#'user/airport\n(defn print-coords [airport]\n  (let [{:keys [lat lon name]} airport]\n    (println (str name \" is located at Latitude: \" lat \" - \" \"Longitude: \" lon))))\n#'user/print-coords\nuser=> (print-coords airport)\nParis Le Bourget Airport is located at Latitude: 48.9615 - Longitude: 2.4372\nnil\n```", "```java\n    [\n      1425,\n      \"Bob Smith\",\n      \"Allergic to unsalted peanuts only\",\n      [[48.9615, 2.4372], [37.742, -25.6976]],\n      [[37.742, -25.6976], [48.9615, 2.4372]]\n    ]\n    ```", "```java\n    user=> (def booking [1425, \"Bob Smith\", \"Allergic to unsalted peanuts only\", [[48.9615, 2.4372], [37.742, -25.6976]], [[37.742, -25.6976], [48.9615, 2.4372]]])\n    #'user/booking\n    ```", "```java\n    user=> (let [[id customer-name sensitive-info flight1 flight2 flight3] booking] (println id customer-name flight1 flight2 flight3))\n    1425 Bob Smith [[48.9615 2.4372] [37.742 -25.6976]] [[37.742 -25.6976] [48.9615 2.4372]] nil\n    nil\n    ```", "```java\n    user=> (let [big-booking (conj booking [[37.742, -25.6976], [51.1537, 0.1821]] [[51.1537, 0.1821], [48.9615, 2.4372]])\n           [id customer-name sensitive-info flight1 flight2 flight3] big-booking]\n      (println id customer-name flight1 flight2 flight3))\n    1425 Bob Smith [[48.9615 2.4372] [37.742 -25.6976]] [[37.742 -25.6976] [48.9615 2.4372]] [[37.742 -25.6976] [51.1537 0.1821]]\n    nil\n    ```", "```java\n    user=> (let [[_ customer-name _ flight1 flight2 flight3] booking] (println customer-name flight1 flight2 flight3))\n    Bob Smith [[48.9615 2.4372] [37.742 -25.6976]] [[37.742 -25.6976] [48.9615 2.4372]] nil\n    nil\n    ```", "```java\n    user=> (let [[_ customer-name _ & flights] booking]\n      (println (str customer-name \" booked \" (count flights) \" flights.\")))\n    Bob Smith booked 2 flights.\n    nil\n    ```", "```java\n    user=>\n    (defn print-flight [flight]\n      (let [[[lat1 lon1] [lat2 lon2]] flight]\n        (println (str \"Flying from: Lat \" lat1 \" Lon \" lon1 \" Flying to: Lat \" lat2 \" Lon \" lon2))))\n    #'user/print-flight\n    user=> (print-flight [[48.9615, 2.4372], [37.742 -25.6976]])\n    Flying from: Lat 48.9615 Lon 2.4372 Flying to: Lat 37.742 Lon -25.6976\n    ```", "```java\n    user=>\n    (defn print-flight [flight]\n      (let [[departure arrival] flight\n            [lat1 lon1] departure\n            [lat2 lon2] arrival]\n        (println (str \"Flying from: Lat \" lat1 \" Lon \" lon1 \" Flying to: Lat \" lat2 \" Lon \" lon2))))\n    #'user/print-flight\n    user=> (print-flight [[48.9615, 2.4372], [37.742 -25.6976]])\n    Flying from: Lat 48.9615 Lon 2.4372 Flying to: Lat 37.742 Lon -25.6976\n    nil\n    ```", "```java\n    (defn print-booking [booking]\n      (let [[_ customer-name _ & flights] booking]\n        (println (str customer-name \" booked \" (count flights) \" flights.\"))\n        (let [[flight1 flight2 flight3] flights]\n          (when flight1 (print-flight flight1))\n          (when flight2 (print-flight flight2))\n          (when flight3 (print-flight flight3)))))\n    #'user/print-booking\n    user=> (print-booking booking)\n    Bob Smith booked 2 flights.\n    Flying from: Lat 48.9615 Lon 2.4372 Flying to: Lat 37.742 Lon -25.6976\n    Flying from: Lat 37.742 Lon -25.6976 Flying to: Lat 48.9615 Lon 2.4372\n    nil\n    ```", "```java\n  {\n    :id 8773\n    :customer-name \"Alice Smith\"\n    :catering-notes \"Vegetarian on Sundays\"\n    :flights [\n      {\n        :from {:lat 48.9615 :lon 2.4372 :name \"Paris Le Bourget Airport\"},\n        :to {:lat 37.742 :lon -25.6976 :name \"Ponta Delgada Airport\"}},\n      {\n        :from {:lat 37.742 :lon -25.6976 :name \"Ponta Delgada Airport\"},\n        :to {:lat 48.9615 :lon 2.4372 :name \"Paris Le Bourget Airport\"}}\n    ]\n  }\n```", "```java\n    user=>\n    (def mapjet-booking\n      {\n        :id 8773\n        :customer-name \"Alice Smith\"\n        :catering-notes \"Vegetarian on Sundays\"\n        :flights [\n          {\n            :from {:lat 48.9615 :lon 2.4372 :name \"Paris Le Bourget Airport\"},\n            :to {:lat 37.742 :lon -25.6976 :name \"Ponta Delgada Airport\"}},\n          {\n            :from {:lat 37.742 :lon -25.6976 :name \"Ponta Delgada Airport\"},\n            :to {:lat 48.9615 :lon 2.4372 :name \"Paris Le Bourget Airport\"}}\n        ]\n      })\n    #'user/mapjet-booking\n    ```", "```java\n    user=> (let [{:keys [customer-name flights]} mapjet-booking] (println (str customer-name \" booked \" (count flights) \" flights.\")))\n    Alice Smith booked 2 flights.\n    nil\n    ```", "```java\n    user=> (defn print-mapjet-flight [flight]\n      (let [{:keys [from to]} flight\n            {lat1 :lat lon1 :lon} from\n            {lat2 :lat lon2 :lon} to]\n        (println (str \"Flying from: Lat \" lat1 \" Lon \" lon1 \" Flying to: Lat \" lat2 \" Lon \" lon2))))\n    user=> (print-mapjet-flight (first (:flights mapjet-booking)))\n    Flying from: Lat 48.9615 Lon 2.4372 Flying to: Lat 37.742 Lon -25.6976\n    nil\n    ```", "```java\n    user=>(defn print-mapjet-flight [flight]\n      (let [{{lat1 :lat lon1 :lon} :from,\n             {lat2 :lat lon2 :lon} :to} flight]\n        (println (str \"Flying from: Lat \" lat1 \" Lon \" lon1 \" Flying to: Lat \" lat2 \" Lon \" lon2))))\n    #'user/print-mapjet-flight\n    user=> (print-mapjet-flight (first (:flights mapjet-booking)))\n    Flying from: Lat 48.9615 Lon 2.4372 Flying to: Lat 37.742 Lon -25.6976\n    nil\n    ```", "```java\n    user=>\n    (defn print-mapjet-booking [booking]\n      (let [{:keys [customer-name flights]} booking]\n        (println (str customer-name \" booked \" (count flights) \" flights.\"))\n        (let [[flight1 flight2 flight3] flights]\n          (when flight1 (print-mapjet-flight flight1)) flights\n          (when flight2 (print-mapjet-flight flight2))\n          (when flight3 (print-mapjet-flight flight3)))))\n    user=> (print-mapjet-booking mapjet-booking)\n    ```", "```java\n    Alice Smith booked 2 flights.\n    Flying from: Lat 48.9615 Lon 2.4372 Flying to: Lat 37.742 Lon -25.6976\n    Flying from: Lat 37.742 Lon -25.6976 Flying to: Lat 48.9615 Lon 2.4372\n    ```", "```java\nuser=>\n(defn print-flight\n  [[[lat1 lon1] [lat2 lon2]]]\n    (println (str \"Flying from: Lat \" lat1 \" Lon \" lon1 \" Flying to: Lat \" lat2 \" Lon \" lon2)))\n#'user/print-flight\nuser=> (print-flight [[48.9615, 2.4372], [37.742 -25.6976]])\nFlying from: Lat 48.9615 Lon 2.4372 Flying to: Lat 37.742 Lon -25.6976\nnil\n```", "```java\nuser=>\n(defn print-mapjet-flight\n  [{{lat1 :lat lon1 :lon} :from, {lat2 :lat lon2 :lon} :to}]\n    (println (str \"Flying from: Lat \" lat1 \" Lon \" lon1 \" Flying to: Lat \" lat2 \" Lon \" lon2)))\n#'user/print-mapjet-flight\nuser=> (print-mapjet-flight { :from {:lat 48.9615 :lon 2.4372}, :to {:lat 37.742 :lon -25.6976} })\nFlying from: Lat 48.9615 Lon 2.4372 Flying to: Lat 37.742 Lon -25.6976\n```", "```java\nuser=>\n(defn no-overloading []\n  (println \"Same old, same old...\"))\n#'user/no-overloading\nuser=>\n(defn overloading\n  ([] \"No argument\")\n  ([a] (str \"One argument: \" a))\n  ([a b] (str \"Two arguments: a: \" a \" b: \" b)))\n#'user/overloading\n```", "```java\nuser=> (overloading)\n\"No argument\"\n```", "```java\nuser=> (overloading 1)\n\"One argument: 1\"\n```", "```java\nuser=> (overloading 1 2)\n\"Two arguments: a: 1 b: 2\"\nuser=> (overloading 1 nil)\n\"Two arguments: a: 1 b: \"\n```", "```java\nuser=> (overloading 1 2 3)\nExecution error (ArityException) at user/eval412 (REPL:1).\nWrong number of args (3) passed to: user/overloading\n```", "```java\nuser=> (def weapon-damage {:fists 10 :staff 35 :sword 100 :cast-iron-saucepan 150})\n#'user/weapon-damage\nuser=>\n(defn strike\n  ([enemy] (strike enemy :fists))\n  ([enemy weapon]\n    (let [damage (weapon weapon-damage)]\n      (update enemy :health - damage))))\n#'user/strike\n```", "```java\nuser=> (strike {:name \"n00b-hunter\" :health 100})\n{:name \"n00b-hunter\", :health 90}\n```", "```java\nuser=> (strike {:name \"n00b-hunter\" :health 100} :sword)\n{:name \"n00b-hunter\", :health 0}\nuser=> (strike {:name \"n00b-hunter\" :health 100} :cast-iron-saucepan)\n{:name \"n00b-hunter\", :health -50}\n```", "```java\nuser=> (str \"Concatenating \" \"is \" \"difficult \" \"to \" \"spell \" \"but \" \"easy \" \"to \" \"use!\")\n\"Concatenating is difficult to spell but easy to use!\"\n```", "```java\nuser=> (doc str)\n-------------------------\nclojure.core/str\n([] [x] [x & ys])\n  With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args.\nnil\n```", "```java\nuser=>\n(defn welcome\n  [player & friends]\n  (println (str \"Welcome to the Parenthmazes \" player \"!\"))\n  (when (seq friends)\n    (println (str \"Sending \" (count friends) \" friend request(s) to the following players: \" (clojure.string/join \", \" friends)))))\n#'user/welcome\n```", "```java\nuser=> (welcome \"Jon\")\nWelcome to the Parenthmazes Jon!\nnil\nuser=> (welcome \"Jon\" \"Arya\" \"Tyrion\" \"Petyr\")\nWelcome to the Parenthmazes Jon!\nSending 3 friend request(s) to the following players: Arya, Tyrion, Petyr\nnil\n```", "```java\nuser=>\n(defn welcome\n  ([player] (println (str \"Welcome to Parenthmazes (single-player mode), \" player \"!\")))\n  ([player & friends]\n    (println (str \"Welcome to Parenthmazes (multi-player mode), \" player \"!\"))\n    (println (str \"Sending \" (count friends) \" friend request(s) to the following players: \" (clojure.string/join \", \" friends)))))\n#'user/welcome\n```", "```java\nuser=> (welcome \"Jon\")\nWelcome to Parenthmazes (single-player mode), Jon!\nnil\nuser=> (welcome \"Jon\" \"Arya\" \"Tyrion\" \"Petyr\")\nWelcome to Parenthmazes (multi-player mode), Jon!\nSending 3 friend request(s) to the following players: Arya, Tyrion, Petyr\nnil\n```", "```java\n    user=> (def weapon-damage {:fists 10.0 :staff 35.0 :sword 100.0 :cast-iron-saucepan 150.0})\n    #'user/weapon-damage\n    ```", "```java\n    user=>\n    (defn strike\n      ([target weapon]\n        (let [points (weapon weapon-damage)]\n          (if (= :gnomes (:camp target))\n            (update target :health + points)\n            (update target :health - points)))))\n    #'user/strike\n    ```", "```java\n    user=> (def enemy {:name \"Zulkaz\", :health 250, :camp :trolls})\n    #'user/enemy\n    user=> (strike enemy :sword)\n    {:name \"Zulkaz\", :health 150.0, :camp :trolls}\n    ```", "```java\n    user=> (def ally {:name \"Carla\", :health 80, :camp :gnomes})\n    #'user/ally\n    user=> (strike ally :staff)\n    {:name \"Carla\", :health 115.0, :camp :gnomes}\n    ```", "```java\n    user=>\n    (defn strike\n      ([target weapon]\n        (let [points (weapon weapon-damage)]\n          (if (= :gnomes (:camp target))\n            (update target :health + points)\n            (let [armor (or (:armor target) 0)\n                  damage (* points (- 1 armor))]\n              (update target :health - damage))))))\n    #'user/strike\n    ```", "```java\n    user=> (strike enemy :cast-iron-saucepan)\n    {:name \"Zulkaz\", :health 100.0, :camp :trolls}\n    ```", "```java\n    user=> (def enemy {:name \"Zulkaz\", :health 250, :armor 0.8, :camp :trolls})\n    #'user/enemy\n    user=> (strike enemy :cast-iron-saucepan)\n    {:name \"Zulkaz\", :health 220.0, :armor 0.8, :camp :trolls}\n    ```", "```java\n    user=>\n    (defn strike\n      ([{:keys [camp armor] :as target} weapon]\n        (let [points (weapon weapon-damage)]\n          (if (= :gnomes camp)\n            (update target :health + points)\n            (let [damage (* points (- 1 (or armor 0)))]\n              (update target :health - damage))))))\n    #'user/strike\n    ```", "```java\n    user=>\n    (defn strike\n      \"With one argument, strike a target with a default :fists `weapon`. With two argument, strike a target with `weapon`.\n       Strike will heal a target that belongs to the gnomes camp.\"\n      ([target] (strike target :fists))\n      ([{:keys [camp armor], :or {armor 0}, :as target} weapon]\n        (let [points (weapon weapon-damage)]\n          (if (= :gnomes camp)\n            (update target :health + points)\n            (let [damage (* points (- 1 armor))]\n              (update target :health - damage))))))\n    #'user/strike\n    ```", "```java\n    user=> (strike enemy)\n    {:name \"Zulkaz\", :health 248.0, :armor 0.8, :camp :trolls}\n    user=> (strike enemy :cast-iron-saucepan)\n    {:name \"Zulkaz\", :health 220.0, :armor 0.8, :camp :trolls}\n    user=> (strike ally :staff)\n    {:name \"Carla\", :health 115.0, :camp :gnomes}\n    ```", "```java\nuser=> (update {:item \"Tomato\" :price 1.0} :price (fn [x] (/ x 2)))\n{:item \"Tomato\", :price 0.5}\n```", "```java\nuser=> (update {:item \"Tomato\" :price 1.0} :price / 2)\n{:item \"Tomato\", :price 0.5}\n```", "```java\nuser=> (update {:item \"Tomato\" :fruit false} :fruit not)\n{:item \"Tomato\", :fruit true}\n```", "```java\nuser=> (defn operate [f x] (f x))\n#'user/operate\nuser=> (operate inc 2)\n3\nuser=> (operate clojure.string/upper-case \"hello.\")\n\"HELLO.\"\n```", "```java\nuser=> (defn operate [f & args] (f args))\n#'user/operate\nuser=> (operate + 1 2 3)\nExecution error (ClassCastException) at java.lang.Class/cast (Class.java:3369).\nCannot cast clojure.lang.ArraySeq to java.lang.Number\n```", "```java\nuser=> (+ [1 2 3])\nExecution error (ClassCastException) at java.lang.Class/cast (Class.java:3369).\nCannot cast clojure.lang.PersistentVector to java.lang.Number\nuser=> (apply + [1 2 3])\n6\n```", "```java\nuser=> (defn operate [f & args] (apply f args))\n#'user/operate\nuser=> (operate str \"It \" \"Should \" \"Concatenate!\")\n\"It Should Concatenate!\"\n```", "```java\nuser=> (defn random-fn [] (first (shuffle [+ - * /])))\n#'user/random-fn\n```", "```java\nuser=> (random-fn 2 3)\nExecution error (ArityException) at user/eval277 (REPL:1).\nWrong number of args (2) passed to: user/random-fn\n```", "```java\nuser=> ((random-fn) 2 3)\n-1\n```", "```java\nuser=> (fn? random-fn)\ntrue\nuser=> (fn? (random-fn))\ntrue\n```", "```java\nuser=>\n(let [mysterious-fn (random-fn)]\n  (mysterious-fn 2 3))\n6\nuser=>\n(let [mysterious-fn (random-fn)]\n  (mysterious-fn 2 3))\n2/3\nuser=>\n(let [mysterious-fn (random-fn)]\n  (mysterious-fn 2 3))\n6\nuser=>\n(let [mysterious-fn (random-fn)]\n  (mysterious-fn 2 3))\n5\n```", "```java\nuser=> (def marketing-adder (partial + 0.99))\n#'user/marketing-adder\nuser=> (marketing-adder 10 5)\n15.99\n```", "```java\nuser=> (def format-price (partial str \"€\"))\n#'user/format-price\nuser=> (format-price \"100\")\n\"€100\"\nuser=> (format-price 10 50)\n\"€1050\"\n```", "```java\nuser=> (defn sample [coll] (first (shuffle coll)))\n#'user/sample\nuser=> (sample [1 2 3 4])\n2\n```", "```java\nuser=> (def sample (comp first shuffle))\n#'user/sample\nuser=> (sample [1 2 3 4])\n4\n```", "```java\nuser=> ((comp inc *) 2 2)\n5\nuser=> ((comp * inc) 2 2)\nExecution error (ArityException) at user/eval405 (REPL:1).\nWrong number of args (2) passed to: clojure.core/inc\n```", "```java\nuser=> (def checkout (comp (partial str \"Only \") format-price marketing-adder))\n#'user/checkout\nuser=> (checkout 10 5 15 6 9)\n\"Only €45.99\"\n```", "```java\n(fn [s] (str \"Hello\" s))\n;; is the same as\n#(str \"Hello\" %)\n```", "```java\n(fn [x y] (* (+ x 10) (+ y 20)))\n;; is the same as\n#(* (+ %1 10) (+ %2 20))\n```", "```java\nuser=> (#(str %1 \" \" %2 \" \" %3) \"First\" \"Second\" \"Third\")\n\"First Second Third\"\n```", "```java\n    user=>\n    (def weapon-fn-map\n      {:fists (fn [health] (if (< health 100) (- health 10) health))})\n    #'user/weapon-fn-map\n    ```", "```java\n    user=> ((weapon-fn-map :fists) 150)\n    150\n    user=> ((weapon-fn-map :fists) 50)\n    40\n    ```", "```java\n    (def weapon-fn-map\n      {\n        :fists (fn [health] (if (< health 100) (- health 10) health))\n        :staff (partial + 35)\n      })\n    ```", "```java\n    user=> ((weapon-fn-map :staff) 150)\n    185\n    ```", "```java\n    (def weapon-fn-map\n      {\n        :fists (fn [health] (if (< health 100) (- health 10) health))\n        :staff (partial + 35)\n        :sword #(- % 100)\n      })\n    ```", "```java\n    user=> ((weapon-fn-map :sword) 150)\n    50\n    ```", "```java\n    (def weapon-fn-map\n      {\n        :fists (fn [health] (if (< health 100) (- health 10) health))\n        :staff (partial + 35)\n        :sword #(- % 100)\n        :cast-iron-saucepan #(- % 100 (rand-int 50))\n      })\n    ```", "```java\n    user=> ((weapon-fn-map :cast-iron-saucepan) 200)\n    77\n    user=> ((weapon-fn-map :cast-iron-saucepan) 200)\n    90\n    ```", "```java\n    user=> (source identity)\n    (defn identity\n      \"Returns its argument.\"\n      {:added \"1.0\"\n       :static true}\n      [x] x)\n    Nil\n    ```", "```java\n    (def weapon-fn-map\n      {\n        :fists (fn [health] (if (< health 100) (- health 10) health))\n        :staff (partial + 35)\n        :sword #(- % 100)\n        :cast-iron-saucepan #(- % 100 (rand-int 50))\n        :sweet-potato identity\n      })\n    ```", "```java\n    user=>\n    (defn strike\n      \"With one argument, strike a target with a default :fists `weapon`. With two argument, strike a target with `weapon` and return the target entity\"\n      ([target] (strike target :fists))\n      ([target weapon]\n        (let [weapon-fn (weapon weapon-fn-map)]\n          (update target :health weapon-fn))))\n    #'user/strike\n    ```", "```java\n    user=> (def enemy {:name \"Arnold\", :health 250})\n    #'user/enemy\n    user=> (strike enemy :sweet-potato)\n    {:name \"Arnold\", :health 250}\n    user=> (strike enemy :sword)\n    {:name \"Arnold\", :health 150}\n    user=> (strike enemy :cast-iron-saucepan)\n    {:name \"Arnold\", :health 108}\n    ```", "```java\n    user=> (strike (strike enemy :sword) :cast-iron-saucepan)\n    {:name \"Arnold\", :health 42}\n    ```", "```java\n    user=> (update enemy :health (comp (:sword weapon-fn-map) (:cast-iron-saucepan weapon-fn-map)))\n    {:name \"Arnold\", :health 15}\n    ```", "```java\n    user=>\n    (defn mighty-strike\n      \"Strike a `target` with all weapons!\"\n      [target]\n      (let [weapon-fn (apply comp (vals weapon-fn-map))]\n          (update target :health weapon-fn)))\n    #'user/mighty-strike\n    user=> (mighty-strike enemy)\n    {:name \"Arnold\", :health 58}\n    ```", "```java\nuser=> (defmulti strike (fn [m] (get m :weapon)))\n#'user/strike\n```", "```java\nuser=> (defmulti strike :weapon)\nnil\n```", "```java\nuser=> (ns-unmap 'user 'strike)\nnil\nuser=> (defmulti strike :weapon)\n#'user/strike\n```", "```java\nuser=> (defmethod strike :sword\n[{{:keys [:health]} :target}]\n(- health 100))\n#object[clojure.lang.MultiFn 0xaa549e5 \"clojure.lang.MultiFn@aa549e5\"]\n```", "```java\nuser=> (defmethod strike :cast-iron-saucepan\n[{{:keys [:health]} :target}]\n(- health 100 (rand-int 50)))\n#object[clojure.lang.MultiFn 0xaa549e5 \"clojure.lang.MultiFn@aa549e5\"]\n```", "```java\nuser=> (strike {:weapon :sword :target {:health 200}})\n100\nuser=> (strike {:weapon :cast-iron-saucepan :target {:health 200}})\n77\n```", "```java\nuser=> (strike {:weapon :spoon :target {:health 200}})\nExecution error (IllegalArgumentException) at user/eval217 (REPL:1).\nNo method in multimethod 'strike' for dispatch value: :spoon\n```", "```java\nuser=> (defmethod strike :default [{{:keys [:health]} :target}] health)\n#object[clojure.lang.MultiFn 0xaa549e5 \"clojure.lang.MultiFn@aa549e5\"]\n```", "```java\nuser=> (strike {:weapon :spoon :target {:health 200}})\n200\n```", "```java\nuser=> (ns-unmap 'user 'strike)\nnil\nuser=> (defmulti strike (fn\n  [{{:keys [:health]} :target weapon :weapon}]\n  (if (< health 50) :finisher weapon)))\n#'user/strike\nuser=> (defmethod strike :finisher [_] 0)\n#object[clojure.lang.MultiFn 0xf478a81 \"clojure.lang.MultiFn@f478a81\"]\n```", "```java\nuser=> (defmethod strike :sword\n[{{:keys [:health]} :target}]\n(- health 100))\n#object[clojure.lang.MultiFn 0xaa549e5 \"clojure.lang.MultiFn@aa549e5\"]\nuser=> (defmethod strike :default [{{:keys [:health]} :target}] health)\n#object[clojure.lang.MultiFn 0xaa549e5 \"clojure.lang.MultiFn@aa549e5\"]\n```", "```java\nuser=> (strike {:weapon :sword :target {:health 200}})\n100\n```", "```java\nuser=> (strike {:weapon :spoon :target {:health 30}})\n0\n```", "```java\n     {:name \"Lea\" :health 200 :position {:x 10 :y 10 :facing :north}}\n    ```", "```java\n    user=> (def player {:name \"Lea\" :health 200 :position {:x 10 :y 10 :facing :north}})\n    #'user/player\n    ```", "```java\n    user=> (defmulti move #(:facing (:position %)))\n    #'user/move\n    ```", "```java\n    user=> (ns-unmap 'user 'move)\n    nil\n    user=> (defmulti move (comp :facing :position))\n    #'user/move\n    ```", "```java\n    User=> (defmethod move :north\n    [entity]\n      (update-in entity [:position :y] inc))\n    #object[clojure.lang.MultiFn 0x1d0d6318 \"clojure.lang.MultiFn@1d0d6318\"]\n    ```", "```java\n    user=> (move player)\n    {:name \"Lea\", :health 200, :position {:x 10, :y 11, :facing :north}}\n    ```", "```java\n    User=> (defmethod move :south\n    [entity]\n      (update-in entity [:position :y] dec))\n    #object[clojure.lang.MultiFn 0x1d0d6318 \"clojure.lang.MultiFn@1d0d6318\"]\n    User=> (defmethod move :west\n    [entity]\n      (update-in entity [:position :x] inc))\n    #object[clojure.lang.MultiFn 0x1d0d6318 \"clojure.lang.MultiFn@1d0d6318\"]\n    User=> (defmethod move :east\n    [entity]\n      (update-in entity [:position :x] dec))\n    #object[clojure.lang.MultiFn 0x1d0d6318 \"clojure.lang.MultiFn@1d0d6318\"]\n    ```", "```java\n    user=> (move {:position {:x 10 :y 10 :facing :west}})\n    {:position {:x 11, :y 10, :facing :west}}\n    user=> (move {:position {:x 10 :y 10 :facing :south}})\n    {:position {:x 10, :y 9, :facing :south}}\n    user=> (move {:position {:x 10 :y 10 :facing :east}})\n    {:position {:x 9, :y 10, :facing :east}}\n    ```", "```java\n    user=> (defmethod move :default [entity] entity)\n    #object[clojure.lang.MultiFn 0x1d0d6318 \"clojure.lang.MultiFn@1d0d6318\"]\n    ```", "```java\n    user=> (move {:position {:x 10 :y 10 :facing :wall}})\n    {:position {:x 10, :y 10, :facing :wall}}\n    ```", "```java\nuser=> (def paris {:lat 48.856483 :lon 2.352413})\n#'user/paris\nuser=> (def bordeaux {:lat 44.834999  :lon -0.575490})\n#'user/bordeaux\nuser=> (itinerary {:from paris :to bordeaux :transport :walking})\n{:cost 0, :distance 491.61380776549225, :duration 122.90345194137306}\nuser=> (itinerary {:from paris :to bordeaux :transport :driving :vehicle :tayato})\n{:cost 44.7368565066598, :distance 491.61380776549225, :duration 7.023054396649889}\n```", "```java\nuser=> (def london {:lat 51.507351, :lon -0.127758})\n#'user/london\nuser=> (def manchester {:lat 53.480759, :lon -2.242631})\n#'user/manchester\nuser=> (itinerary {:from london :to manchester :transport :walking})\n{:cost 0, :distance 318.4448148814284, :duration 79.6112037203571}\nuser=> (itinerary {:from manchester :to london :transport :driving :vehicle :sleta})\n{:cost 4.604730845743489, :distance 230.2365422871744, :duration 3.2890934612453484}\n```"]