["```java\n        package com.packt.cookbook.ch12_memory;\n        import java.util.ArrayList;\n        import java.util.List;\n        import java.util.stream.IntStream;\n        public class Chapter12Memory {\n          public static void main(String... args) {\n            int max = 99888999;\n            System.out.println(\"Chapter12Memory.main() for \" \n                                + max + \" is running...\");\n            List<AnObject> list = new ArrayList<>();\n            IntStream.range(0, max)\n                     .forEach(i -> list.add(new AnObject(i)));\n          }\n          private static class AnObject {\n            private int prop;\n            AnObject(int i){ this.prop = i; }\n          }\n        }\n```", "```java\n java -XX:+UseG1GC -cp ./cookbook-1.0.jar\n      com.packt.cookbook.ch12_memory.Chapter12Memory\n```", "```java\n time java -Xlog:gc -cp ./cookbook-1.0.jar\n      com.packt.cookbook.ch12_memory.Chapter12Memory\n```", "```java\njava -Xlog:help\n```", "```java\n-Xlog[:[what][:[output][:[decorators][:output-options]]]]\n```", "```java\n-Xlog:all=info:stdout:uptime,level,tags\n```", "```java\n java -Xlog:cpu -cp ./cookbook-1.0.jar\n      com.packt.cookbook.ch12_memory.Chapter12Memory\n```", "```java\n java -Xlog:cpu* -cp ./cookbook-1.0.jar\n      com.packt.cookbook.ch12_memory.Chapter12Memory\n```", "```java\n java -Xlog:heap* -cp ./cookbook-1.0.jar\n      com.packt.cookbook.ch12_memory.Chapter12Memory\n```", "```java\n java -Xlog:heap*,cpu* -cp ./cookbook-1.0.jar\n      com.packt.cookbook.ch12_memory.Chapter12Memory\n```", "```java\n java -Xlog:heap*,cpu*::uptime,tags -cp ./cookbook-1.0.jar\n      com.packt.cookbook.ch12_memory.Chapter12Memory\n```", "```java\n java -Xlog:heap*,cpu*:stdout:uptime,tags -cp ./cookbook-1.0.jar\n      com.packt.cookbook.ch12_memory.Chapter12Memory\n```", "```java\n java -Xlog:heap*,cpu*::none -cp ./cookbook-1.0.jar\n      com.packt.cookbook.ch12_memory.Chapter12Memory\n```", "```java\n87863 jdk.jcmd/sun.tools.jcmd.JCmd \n```", "```java\njava -cp ./cookbook-1.0.jar com.packt.cookbook.ch12_memory.Chapter12Memory\n```", "```java\n87864 jdk.jcmd/sun.tools.jcmd.JCmd \n87785 com.packt.cookbook.ch12_memory.Chapter12Memory\n```", "```java\njcmd 88749 VM.version \n```", "```java\njcmd Chapter12Memory VM.version\n```", "```java\n jcmd PID/main-class-name help\n```", "```java\njcmd -h \n```", "```java\njcmd Chapter12Memory GC.heap_info\n```", "```java\njcmd Chapter12Memory Thread.print\n```", "```java\njcmd Chapter12Memory VM.info\n```", "```java\ntry (Connection conn = getDbConnection()){\n  try (Statement st = createStatement(conn)) {\n    st.execute(sql);\n  }\n} catch (Exception ex) {\n  ex.printStackTrace();\n}\n```", "```java\ntry (Connection conn = getDbConnection();\nStatement st = createStatement(conn)) {\n  st.execute(sql);\n} catch (Exception ex) {\n  ex.printStackTrace();\n}\n```", "```java\nConnection getDbConnection() {\n  PGPoolingDataSource source = new PGPoolingDataSource();\n  source.setServerName(\"localhost\");\n  source.setDatabaseName(\"cookbook\");\n  try {\n    return source.getConnection(); \n  } catch(Exception ex) {\n    ex.printStackTrace();\n    return null;\n  }\n}\n```", "```java\nStatement createStatement(Connection conn) {\n  try {\n    return conn.createStatement();\n  } catch(Exception ex) {\n    ex.printStackTrace();\n    return null;\n  }\n}\n```", "```java\nvoid execute(Statement st, String sql){\n  try {\n    st.execute(sql);\n  } catch (Exception ex) {\n    ex.printStackTrace();\n  } finally {\n    if(st != null) {\n      try{\n        st.close();\n      } catch (Exception ex) {\n        ex.printStackTrace();\n      }\n    }\n  }\n}\n```", "```java\n        void execute(Statement st, String sql){\n          try (st) {\n            st.execute(sql);\n          } catch (Exception ex) {\n            ex.printStackTrace();\n          }\n        }\n```", "```java\n        void execute(Connection conn, Statement st, String sql) {\n          try (conn; st) {\n            st.execute(sql);\n          } catch (Exception ex) {\n            ex.printStackTrace();\n          }\n        }\n```", "```java\n        Connection conn = getDbConnection();\n        Statement st = conn.createStatement();\n        try (conn; st) {\n          st.execute(sql);\n        } catch (Exception ex) {\n          ex.printStackTrace();\n        }\n```", "```java\n        Connection conn = getDbConnection();\n        try (conn; Statement st = conn.createStatement()) {\n          st.execute(sql);\n        } catch (Exception ex) {\n          ex.printStackTrace();\n        }\n```", "```java\n        void close() throws Exception;\n```", "```java\nclass MyResource1 implements AutoCloseable {\n  public MyResource1(){\n    System.out.println(\"MyResource1 is acquired\");\n  }\n  public void close() throws Exception {\n    //Do what has to be done to release this resource\n    System.out.println(\"MyResource1 is closed\");\n  }\n}\n```", "```java\nclass MyResource2 implements AutoCloseable {\n  public MyResource2(){\n    System.out.println(\"MyResource2 is acquired\");\n  }\n  public void close() throws Exception {\n    //Do what has to be done to release this resource\n    System.out.println(\"MyResource2 is closed\");\n  }\n}\n```", "```java\nMyResource1 res1 = new MyResource1();\nMyResource2 res2 = new MyResource2();\ntry (res1; res2) {\n  System.out.println(\"res1 and res2 are used\");\n} catch (Exception ex) {\n  ex.printStackTrace();\n}\n```", "```java\nMyResource1 res1 = new MyResource1();\nMyResource2 res2 = new MyResource2();\ntry (res2; res1) {\n  System.out.println(\"res1 and res2 are used\");\n} catch (Exception ex) {\n  ex.printStackTrace();\n}\n```", "```java\nThread.currentThread().dumpStack();\n```", "```java\nnew Throwable().printStackTrace();\n```", "```java\nArrays.stream(Thread.currentThread().getStackTrace())\n      .forEach(System.out::println);\n\nArrays.stream(new Throwable().getStackTrace())\n      .forEach(System.out::println);\n\n```", "```java\nSystem.out.println(\"This method is called by \"+Thread.currentThread()\n                        .getStackTrace()[1].getClassName());\n\nSystem.out.println(\"This method is called by \" + new Throwable()\n                        .getStackTrace()[0].getClassName());\n```", "```java\nArrays.stream(Thread.currentThread().getStackTrace())\n  .forEach(e -> {\n    System.out.println();\n    System.out.println(\"e=\"+e);\n    System.out.println(\"e.getFileName()=\"+ e.getFileName());\n    System.out.println(\"e.getMethodName()=\"+ e.getMethodName());\n    System.out.println(\"e.getLineNumber()=\"+ e.getLineNumber());\n});\n\n```", "```java\nArrays.stream(new Throwable().getStackTrace())\n  .forEach(x -> {\n    System.out.println();\n    System.out.println(\"x=\"+x);\n    System.out.println(\"x.getFileName()=\"+ x.getFileName());\n    System.out.println(\"x.getMethodName()=\"+ x.getMethodName());\n    System.out.println(\"x.getLineNumber()=\"+ x.getLineNumber());\n});\n\n```", "```java\n        public class Clazz01 {\n          public void method(){\n            new Clazz03().method(\"Do something\");\n            new Clazz02().method();\n          }\n        }\n```", "```java\n        public class Clazz02 {\n          public void method(){\n            new Clazz03().method(null);\n          }\n        }\n```", "```java\n        public class Clazz03 {\n          public void method(String action){\n            if(action != null){\n              System.out.println(action);\n              return;\n            }\n            System.out.println(\"Throw the exception:\");\n            action.toString();\n          }\n        }\n```", "```java\n        private static void demo4_StackWalk(){\n          new Clazz01().method();\n        }\n```", "```java\n        public class Chapter12Memory {\n          public static void main(String... args) {\n            demo4_StackWalk();\n          }\n        }\n```", "```java\npublic class Clazz03 {\n  public void method(String action){\n    if(action != null){\n      System.out.println(action);\n      return;\n    }\n    System.out.println(\"Print the stack trace:\");\n    Thread.currentThread().dumpStack();\n  }\n}\n```", "```java\nnew Throwable().printStackTrace();\n```", "```java\nArrays.stream(Thread.currentThread().getStackTrace())\n                             .forEach(System.out::println);\nArrays.stream(new Throwable().getStackTrace())\n                             .forEach(System.out::println);\n\n```", "```java\npublic class Clazz03 {\n  public void method(String action){\n    if(action != null){\n      System.out.println(action);\n      return;\n    }\n    StackWalker stackWalker = StackWalker.getInstance();\n    stackWalker.forEach(System.out::println);\n  }\n}\n```", "```java\nSystem.out.println(\"Print the caller class name:\");\nSystem.out.println(StackWalker.getInstance(StackWalker\n                        .Option.RETAIN_CLASS_REFERENCE)\n                        .getCallerClass().getSimpleName());\n\n```"]