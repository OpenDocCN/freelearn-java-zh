["```java\nclass StrictDemo {\n  val strictVal = {\n    println(\"Evaluating strictVal\")\n    \"Hello\"\n  }\n}\nval strictDemo = new StrictDemo\n//Evaluating strictVal\n//strictDemo: StrictDemo = StrictDemo@32fac009\n```", "```java\nclass LazyDemo {\n  lazy val lazyVal = {\n    println(\"Evaluating lazyVal\")\n    \"Hello\"\n  }\n}\nval lazyDemo = new LazyDemo\n//lazyDemo: LazyDemo = LazyDemo@13ca84d5\n```", "```java\nlazyDemo.lazyVal + \" World\"\n//Evaluating lazyVal\n//res0: String = Hello World\n```", "```java\nclass LazyChain {\n  lazy val val1 = {\n    println(\"Evaluating val1\")\n    \"Hello\"\n  }\n  lazy val val2 = {\n    println(\"Evaluating val2\")\n    val1 + \" lazy\"\n  }  \n  lazy val val3 = {\n    println(\"Evaluating val3\")\n    val2 + \" chain\"\n  }\n}\nval lazyChain = new LazyChain\n// lazyChain: LazyChain = LazyChain@4ca51fa\n```", "```java\nlazyChain.val3\n// Evaluating val3\n// Evaluating val2\n// Evaluating val1\n// res1: String = Hello lazy chain\n```", "```java\nobject AppConfig {\n  lazy val greeting: String = {\n    println(\"Loading greeting\")\n    \"Hello \"\n  }\n}\n```", "```java\ndef greet(name: String, greeting: => String): String = {\n  if (name == \"Mikael\")\n    greeting + name\n  else\n    s\"I don't know you $name\"\n}\ngreet(\"Bob\", AppConfig.greeting)\n// res2: String = I don't know you Bob\ngreet(\"Mikael\", AppConfig.greeting)\n// Loading greeting\n// res3: String = Hello Mikael\n```", "```java\ndef evenPlusOne(xs: Vector[Int]): Vector[Int] =\n  xs.filter { x => println(s\"filter $x\"); x % 2 == 0 }\n    .map    { x => println(s\"map $x\");    x + 1      }\n\nevenPlusOne(Vector(0, 1, 2))\n```", "```java\nfilter 0\nfilter 1\nfilter 2\nmap 0\nmap 2\nres4: Vector[Int] = Vector(1, 3)\n```", "```java\ndef lazyEvenPlusOne(xs: Vector[Int]): Vector[Int] =\n  xs.withFilter { x => println(s\"filter $x\"); x % 2 == 0 }\n    .map        { x => println(s\"map $x\")   ; x + 1      }\n\nlazyEvenPlusOne(Vector(0, 1, 2))\n```", "```java\nfilter 0\nmap 0\nfilter 1\nfilter 2\nmap 2\nres5: Vector[Int] = Vector(1, 3)\n```", "```java\ndef lazyEvenPlusTwo(xs: Vector[Int]): Vector[Int] =\n  xs.withFilter { x => println(s\"filter $x\"); x % 2 == 0 }\n    .map        { x => println(s\"map $x\")   ; x + 1      }\n    .map        { x => println(s\"map2 $x\")  ; x + 1      }\n\nlazyEvenPlusTwo(Vector(0, 1, 2))\n```", "```java\nfilter 0\nmap 0\nfilter 1\nfilter 2\nmap 2\nmap2 1\nmap2 3\nres6: Vector[Int] = Vector(2, 4)\n```", "```java\ndef lazyEvenPlusTwoStream(xs: Stream[Int]): Stream[Int] =\n  xs.filter { x => println(s\"filter $x\")    ; x % 2 == 0 }\n    .map        { x => println(s\"map $x\")   ; x + 1      }\n    .map        { x => println(s\"map2 $x\")  ; x + 1      }\n\nlazyEvenPlusTwoStream(Stream(0, 1, 2)).toVector\n```", "```java\nfilter 0\nmap 0\nmap2 1\nfilter 1\nfilter 2\nmap 2\nmap2 3\nres7: Vector[Int] = Vector(2, 4)\n```", "```java\nval evenInts: Stream[Int] = 0 #:: 2 #:: evenInts.tail.map(_ + 2)\nevenInts.take(10).toVector\n// res8: Vector[Int] = Vector(0, 2, 4, 6, 8, 10, 12, 14, 16, 18)\n\n```", "```java\ntrait Animal\ncase class Cat(name: String) extends Animal\ncase class Dog(name: String) extends Animal\n```", "```java\nval animal1: Animal = Cat(\"Max\")\nval animal2: Animal = Dog(\"Dolly\")\nimplicitly[Dog <:< Animal]\n```", "```java\ntrait InvariantDecoder[A] {\n  def decode(s: String): Option[A]\n}\n```", "```java\nobject InvariantCatDecoder extends InvariantDecoder[Cat] {\n  val CatRegex = \"\"\"Cat\\((\\w+\\))\"\"\".r\n  def decode(s: String): Option[Cat] = s match {\n    case CatRegex(name) => Some(Cat(name))\n    case _ => None\n  }\n}\n\nInvariantCatDecoder.decode(\"Cat(Max)\")\n// res0: Option[Cat] = Some(Cat(Max)))\n```", "```java\nval invariantAnimalDecoder: InvariantDecoder[Animal] = InvariantCatDecoder\n```", "```java\nerror: type mismatch;\n  found   : InvariantCatDecoder.type\n  required: InvariantDecoder[Animal]\n     Note: Cat <: Animal (and InvariantCatDecoder.type <: \n     InvariantDecoder[Cat]), but trait InvariantDecoder is invariant in     \n     type A.\n     You may wish to define A as +A instead. (SLS 4.5)\n        val invariantAnimalDecoder: InvariantDecoder[Animal] = \n        InvariantCatDecoder\n                                                               ^\n```", "```java\ntrait CovariantDecoder[+A] {\n  def decode(s: String): Option[A]\n}\nobject CovariantCatDecoder extends CovariantDecoder[Cat] {\n (...)\n}\n```", "```java\nimplicitly[CovariantDecoder[Cat] <:< CovariantDecoder[Animal]]\n```", "```java\nval covariantAnimalDecoder: CovariantDecoder[Animal] = CovariantCatDecoder\ncovariantAnimalDecoder.decode(\"Cat(Ulysse)\")\n// res0: Option[Animal] = Some(Cat(Ulysse)))\n```", "```java\nobject CovariantCatAndDogDecoder extends CovariantDecoder[Animal] {\n  val CatRegex = \"\"\"Cat\\((\\w+\\))\"\"\".r\n  val DogRegex = \"\"\"Dog\\((\\w+\\))\"\"\".r\n  def decode(s: String): Option[Animal] = s match {\n    case CatRegex(name) => Some(Cat(name))\n    case DogRegex(name) => Some(Dog(name))\n    case _ => None\n  }\n}\n\nval covariantCatsAndDogsDecoder = CovariantCatAndDogDecoder\n\ncovariantCatsAndDogsDecoder.decode(\"Cat(Garfield)\")\n// res4: Option[Animal] = Some(Cat(Garfield)))\ncovariantCatsAndDogsDecoder.decode(\"Dog(Aiko)\")\n// res5: Option[Animal] = Some(Dog(Aiko)))\n```", "```java\ntrait Encoder[-A] {\n  def encode(a: A): String\n}\n```", "```java\nobject AnimalEncoder extends Encoder[Animal] {\n  def encode(a: Animal): String = a.toString\n}\n```", "```java\nval catEncoder: Encoder[Cat] = AnimalEncoder\ncatEncoder.encode(Cat(\"Luna\"))\n// res1: String = Cat(Luna)\n```", "```java\nobject CatAndDogCodec extends Codec[Animal] {\n  val CatRegex = \"\"\"Cat\\((\\w+\\))\"\"\".r\n  val DogRegex = \"\"\"Dog\\((\\w+\\))\"\"\".r\n\n  override def encode(a: Animal) = a.toString\n\n  override def decode(s: String): Option[Animal] = s match {\n    case CatRegex(name) => Some(Cat(name))\n    case DogRegex(name) => Some(Dog(name))\n    case _ => None\n  }\n}\n```", "```java\ntrait Codec[+A] {\n  def encode(a: A): String\n  def decode(s: String): Option[A]\n}\n Error:(55, 15) covariant type A occurs in contravariant position in \n    type A of value a\n    def encode(a: A): String\n     ^\n```", "```java\ntrait Function3[-T1, -T2, -T3, +R] extends AnyRef { self =>\n```", "```java\nfinal class Vector[+A] (...)\n```", "```java\nval cats: Vector[Cat] = Vector(Cat(\"Max\"))\nval animals: Vector[Animal] = cats\n```", "```java\nval catsAndDogs = cats :+ Dog(\"Medor\")\n// catsAndDogs: Vector[Product with Serializable with Animal] = \n// Vector(Cat(Max), Dog(Medor))\n```", "```java\noverride def :+[B >: A, That](elem: B)(implicit bf: CanBuildFrom[Vector[A], B, That]): That\n```", "```java\nval serializables = catsAndDogs :+ \"string\"\n// serializables: Vector[Serializable] = Vector(Cat(Max), Dog(Medor), \n// string)\nval anys = serializables :+ 1\n// anys: Vector[Any] = Vector(Cat(Max), Dog(Medor), string, 1)\n```", "```java\ndef multiply(x: Int, y: Int): Int = x * y\n// multiply: multiply[](val x: Int,val y: Int) => Int\n```", "```java\nval multiplyVal = (x: Int, y: Int) => x * y\n// multiplyVal: (Int, Int) => Int = ...\n```", "```java\nval multiplyVal2 = multiply _\n// multiplyVal2: (Int, Int) => Int = ...\n\n```", "```java\nmultiply(2, 3)\nmultiplyVal(2, 3)\nmultiplyVal2(2, 3)\n```", "```java\nval multiplyCurried = multiplyVal.curried\n// multiplyCurried: Int => (Int => Int) = ...\n```", "```java\nmultiplyVal(2, 3)\n// res3: Int = 6\nmultiplyCurried(2)\n// res4: Int => Int = ...\nmultiplyCurried(2)(3)\n// res5: Int = 6\n```", "```java\ncase class Item(description: String, price: Double)\n\ndef discount(percentage: Double)(item: Item): Item =\n  item.copy(price = item.price * (1 - percentage / 100))\n```", "```java\ndiscount(10)(Item(\"Monitor\", 500))\n// res6: Item = Item(Monitor,450.0)\n```", "```java\nval discount10 = discount(10) _\n// discount10: Item => Item = ...\ndiscount10(Item(\"Monitor\", 500))\n// res7: Item = Item(Monitor,450.0)\n```", "```java\nval items = Vector(Item(\"Monitor\", 500), Item(\"Laptop\", 700))\nitems.map(discount(10))\n// res8: Vector[Item] = Vector(Item(Monitor,450.0), Item(Laptop,630.0))\n\n```", "```java\ncase class AppContext(message: String)\nimplicit val myAppCtx: AppContext = AppContext(\"implicit world\")\n\ndef greeting(prefix: String)(implicit appCtx: AppContext): String =\n  prefix + appCtx.message\n\ngreeting(\"hello \")\n// res0: String = hello implicit world\n```", "```java\ngreeting(\"hello \")(myAppCtx)\n// res0: String = hello implicit world\n```", "```java\nimport cats.data.ValidatedNel\ncase class Timeout(millis: Int)\n\ntrait PriceService {\n  def getPrice(productName: String)(implicit timeout: Timeout): \n  ValidatedNel[String, Double]\n}\n```", "```java\ncase class Product(name: String, price: Double)\n\ntrait DataService {\n  def getProduct(name: String): ValidatedNel[String, Product]\n  def saveProduct(product: Product): ValidatedNel[String, Unit]\n}\n```", "```java\nclass AppContext(implicit val defaultTimeout: Timeout,\n                 val priceService: PriceService,\n                 val dataService: DataService)\n```", "```java\nimport cats.implicits._\ndef updatePrice(productName: String)(implicit appContext: AppContext)\n: ValidatedNel[String, Double] = {\n  import appContext._\n  (dataService.getProduct(productName), \n  priceService.getPrice(productName)).tupled.andThen {\n    case (product, newPrice) =>\n      dataService.saveProduct(product.copy(price = newPrice)).map(_ =>\n        newPrice\n      )\n  }\n}\n```", "```java\nval vec = Vector(\"hello\", \"world\").map(s => s -> s.length)\n// vec: scala.collection.immutable.Vector[(String, Int)] = \n// Vector((hello,5), (world,5))\n```", "```java\ndef map[B, That](f: A => B)(implicit bf: CanBuildFrom[Repr, B, That]): That = {...}\n```", "```java\ntrait CanBuildFrom[-From, -Elem, +To]\n```", "```java\nobject Vector extends IndexedSeqFactory[Vector] {\n...\n  implicit def canBuildFrom[A]: CanBuildFrom[Coll, A, Vector[A]] = ...\n```", "```java\nval vec = Vector(\"hello\", \"world\").map(s => s -> s.length)\nvec.toMap\n// res0: scala.collection.immutable.Map[String,Int] = Map(hello -> 5,  world -> 5)\n```", "```java\nimport scala.collection.breakOut\nval map: Map[String, Int] = Vector(\"hello\", \"world\").map(s => s -> s.length)(breakOut)\n// map: Map[String,Int] = Map(hello -> 5, world -> 5)\n```", "```java\nscala> import scala.concurrent.Future\nimport scala.concurrent.Future\nscala> Future(println(Thread.currentThread().getName))\n```", "```java\n<console>:13: error: Cannot find an implicit ExecutionContext. You might pass\nan (implicit ec: ExecutionContext) parameter to your method\nor import scala.concurrent.ExecutionContext.Implicits.global.\n       Future(println(Thread.currentThread().getName))\n```", "```java\nscala> import scala.concurrent.ExecutionContext.Implicits.global\nimport scala.concurrent.ExecutionContext.Implicits.global\nscala> import scala.concurrent.Future\nimport scala.concurrent.Future\n\nscala> Future(println(Thread.currentThread().getName))scala-execution-context-global-11\nres1: scala.concurrent.Future[Unit] = Future(Success(()))\n```", "```java\nscala> import scala.concurrent.Future\nimport scala.concurrent.Future\n\nscala> import java.util.concurrent.Executors\nimport java.util.concurrent.Executors\n\nscala> import scala.concurrent.{ExecutionContext, Future}\n*i*mport scala.concurrent.{ExecutionContext, Future}\n\nscala> implicit val myThreadPool: ExecutionContext = ExecutionContext.fromExecutor(Executors.newFixedThreadPool(2))\nmyThreadPool: scala.concurrent.ExecutionContext = scala.concurrent.impl.ExecutionContextImpl@7f3c0399\n\nscala> Future(println(Thread.currentThread().getName))\npool-1-thread-1\nres0: scala.concurrent.Future[Unit] = Future(<not completed>)\n```", "```java\nimport java.time.LocalDate\n\nimplicit def stringToLocalDate(s: String): LocalDate = LocalDate.parse(s)\n```", "```java\n\"2018-09-01\".getDayOfWeek\n// res0: java.time.DayOfWeek = SATURDAY\n\n\"2018-09-01\".getYear\n// res1: Int = 2018\n```", "```java\nimport java.time.temporal.ChronoUnit.DAYS\nDAYS.between(\"2018-09-01\", \"2018-10-10\")\n// res2: Long = 39\n```", "```java\n\"2018\".getMonth\n// java.time.format.DateTimeParseException: Text '2018' could not be parsed at index 4\n```", "```java\nscala>\nclass IntOps(val i: Int) extends AnyVal {\n def square: Int = i * i\n}\nscala> implicit def intToIntOps(i: Int): IntOps = new IntOps(i)\nintToIntOps: (i: Int)IntOps\nscala> 5.square\nres0: Int = 25\n```", "```java\nscala> \nimplicit class IntOps(val i: Int) extends AnyVal {\n  def square: Int = i * i\n}\n\nscala>5.square\nres0: Int = 25\n```", "```java\n\"abcd\".reverse\nval abcd: StringOps = Predef.augmentString(\"abcd\")\nabcd.reverse\n```", "```java\ncase class Person(name: String, age: Int)\nobject Person {\n  implicit val ordering: Ordering[Person] = Ordering.by(_.age)\n}\n\nList(Person(\"Omer\", 40), Person(\"Bart\", 10)).sorted\n```"]