["```java\n    spring.main.allow-bean-definition-overriding=true\n    ```", "```java\n    spring.datasource.url=jdbc:postgresql://localhost:5432/{{databasename}}\n    ```", "```java\n    spring.datasource.username=postgres\n    ```", "```java\n    spring.datasource.password=pass\n    ```", "```java\n    spring.jpa.hibernate.ddl-auto=update\n    ```", "```java\n    spring.jpa.show-sql=true\n    ```", "```java\n    spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect\n    ```", "```java\n    spring.jpa.properties.hibernate.format_sql=true\n    ```", "```java\npublic class Blog {\nprivate String id;\nprivate String title;\nprivate String description;\nprivate String author;\npublic Blog(String title, String description,\n            String author) {\n   this.name = title;\n   this.description = description\n   this.author = author\n}\n```", "```java\nPublic class BlogDTO {\n     private String title;\n     private String description;\n}\n```", "```java\nPublic class BlogCreationDTO {\n     private String title;\n     private String description;\n     private String author;\n}\n```", "```java\npublic class Blog {\n     private String title;\n     private String description;\n     private String author;\n     public Blog() {}\n     public Blog(String title, String description,\n                 String author) {\n     super()\n       this.name = title;\n       this.description = description\n       this.author = author\n}\n     public String getAuthor() {return author;}\n     public void setAuthor(String author) {\n     this.author = author; }\n     public String getTitle() {return title;}\n     public void setTitle(String title) {\n     this.title = title; }\n     public String getDescription() {return description;}\n     public void setDescription(String description) {\n     this.description = description; }\n    @Override public String toString()\n    {return \"Blog [\"\n            + \"author=\" + author + \", title=\" + title\n            + \", \" + \" description =\" + description + \"]\";\n    }\n}\n```", "```java\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Blog {\n     private String title;\n     private String description;\n     private String author;\n}\n```", "```java\npackage com.example.springbootsuperheroes.superheroes.antiHero.entity;\nimport javax. persistence.Entity;\nimport javax.persistence.Table;\n@Entity\n@Table(name = \"anti_hero_entity\")\npublic class AntiHeroEntity {\n}\n```", "```java\n<dependency>\n   <groupId>org.springframework.boot</groupId>\n   <artifactId>spring-boot-starter-validation</artifactId>\n</dependency>\n```", "```java\npackage com.example.springbootsuperheroes\n.superheroes.antiHero.entity;\n…\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.UUID;\nimport javax.persistence.*;\nimport javax.validation.constraints.NotNull;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n…\n```", "```java\n@Data\n@Entity\n@Table\n@AllArgsConstructor\n@NoArgsConstructor\npublic class AntiHeroEntity {\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO,\n                    generator = \"UUID\")\n    @Column(nullable = false, updatable = false)\n    private UUID id;\n    @NotNull(message = \"First Name is required\")\n    private String firstName;\n    private String lastName;\n    private String house;\n    private String knownAs;\n    private String createdAt =\n      new SimpleDateFormat(\"dd-MM-yyyy HH:mm:ss z\")\n            .format(new Date());\n}\n```", "```java\npackage com.example.superheroes.antiHero.dto;\nimport java.util.UUID;\nimport javax.validation.constraints.NotNull;\nimport lombok.Getter;\nimport lombok.Setter;\n@Getter\n@Setter\npublic class AntiHeroDto {\n  private UUID id;\n  @NotNull(message = \"First Name is required\")\n  private String firstName;\n  private String lastName;\n  private String house;\n  private String knownAs;\n}\n```", "```java\n    package com.example.springbootsuperheroes.superheroes.antiHero.repository;\n    ```", "```java\n    import com.example.springbootsuperheroes.superheroes.antiHero.entity.AntiHeroEntity;\n    ```", "```java\n    import org.springframework.data.repository.CrudRepository;\n    ```", "```java\n    import java.util.UUID;\n    ```", "```java\n    public interface AntiHeroRepository {\n    ```", "```java\n    }\n    ```", "```java\npublic interface AntiHeroRepository extends CrudRepository<AntiHeroEntity, UUID> {\n}\n```", "```java\npublic class AntiHeroService {\n    private final AntiHeroRepository repo;\n    public Iterable<AntiHeroEntity> findAllAntiHeroes() {\n        return repo.findAll();\n    }\n    public AntiHeroEntity findAntiHeroById(UUID id) {\n        return findById(id);\n    }\n    public void removeAntiHeroById(UUID id) {\n        repo.deleteById(id);\n    }\n    public AntiHeroEntity addAntiHero(\n      AntiHeroEntity antiHero) {\n        return repo.save(antiHero);\n    }\n    public void updateAntiHero(UUID id,\n      AntiHeroEntity antiHero) {\n        repo.save(antiHero);\n    }\n}\n```", "```java\npublic AntiHeroService(AntiHeroRepository repo) {\n  this.repo = repo;\n}\n```", "```java\n    String[] array = new String[100];\n    ```", "```java\n    String name = array[200]; // throws index out of bounds as array variable only has a length of 100\n    ```", "```java\n    public class Hero {\n    ```", "```java\n       int number;\n    ```", "```java\n       public void givePositiveNumber(int number) {\n    ```", "```java\n          if(number < 0)  throw new\n    ```", "```java\n            IllegalArgumentException(\n    ```", "```java\n              Integer.toString(number));\n    ```", "```java\n          else { m = number; }\n    ```", "```java\n       }\n    ```", "```java\n       public static void main(String[] args) {\n    ```", "```java\n          Hero h = new Hero();\n    ```", "```java\n          // throws illegal argument exception as -1 is a\n    ```", "```java\n          // negative number\n    ```", "```java\n          h.givePositiveNumber(-1);\n    ```", "```java\n    }\n    ```", "```java\n       }\n    ```", "```java\n    public void doAction(ExampleObject obj) {   obj.doActionOnMethod();\n    ```", "```java\n    }\n    ```", "```java\n    // call doAction()\n    ```", "```java\n    // throws null pointer exception as we are accessing a\n    ```", "```java\n    // method on a null object\n    ```", "```java\n    doAction(null)\n    ```", "```java\n    public class NotFoundException extends RuntimeException {\n    ```", "```java\n        public NotFoundException(String message) {\n    ```", "```java\n            super(message);\n    ```", "```java\n        }\n    ```", "```java\n        public NotFoundException(String message,\n    ```", "```java\n                                 Throwable cause) {\n    ```", "```java\n            super(message, cause);\n    ```", "```java\n        }\n    ```", "```java\n        public NotFoundException(Throwable cause) {\n    ```", "```java\n            super(cause);\n    ```", "```java\n        }\n    ```", "```java\n    }\n    ```", "```java\n    private AntiHeroEntity findOrThrow(final UUID id) {\n    ```", "```java\n        return repo\n    ```", "```java\n                .findById(id)\n    ```", "```java\n                .orElseThrow(\n    ```", "```java\n                   () -> new NotFoundException(\"Anti-hero\n    ```", "```java\n                         by id \" + id + \" was not found\")\n    ```", "```java\n                );\n    ```", "```java\n    }\n    ```", "```java\n    public AntiHeroEntity findAntiHeroById(UUID id) {\n    ```", "```java\n      return findOrThrow(id);\n    ```", "```java\n    }\n    ```", "```java\n    public void updateAntiHero(UUID id,\n    ```", "```java\n                               AntiHeroEntity antiHero) {\n    ```", "```java\n      findOrThrow(id);\n    ```", "```java\n      repo.save(antiHero);\n    ```", "```java\n    }\n    ```", "```java\n@AllArgsConstructor\n@RestController\n@RequestMapping(\"api/v1/anti-heroes\")\npublic class AntiHeroController {\n}\n```", "```java\n<!--Dto mapper-->\n<dependency>\n   <groupId>org.modelmapper</groupId>\n   <artifactId>modelmapper</artifactId>\n   <version>2.3.9</version>\n</dependency>\n```", "```java\n@Configuration\npublic class ModelMapperConfig {\n  @Bean\n  public ModelMapper modelMapper() {\n    return new ModelMapper();\n  }\n}\n```", "```java\n@AllArgsConstructor\n@RestController\n@RequestMapping(\"api/v1/anti-heroes\")\npublic class AntiHeroController {\n    private final AntiHeroService service;\n     private final ModelMapper mapper;\n}\n```", "```java\nprivate AntiHeroDto convertToDto(AntiHeroEntity entity) {\n  return mapper.map(entity, AntiHeroDto.class);\n}\nprivate AntiHeroEntity convertToEntity(AntiHeroDto dto) {\n  return mapper.map(dto, AntiHeroEntity.class);\n}\n```", "```java\n@GetMapping(\"/{id}\")\npublic AntiHeroDto getAntiHeroById(@PathVariable(\"id\") UUID id) {\n  return convertToDto(service.findAntiHeroById(id));\n}\n```", "```java\n@PostMapping\npublic AntiHeroDto postAntiHero(@Valid @RequestBody AntiHeroDto antiHeroDto) {\n  var entity = convertToEntity(antiHeroDto);\n  var antiHero = service.addAntiHero(entity);\n  return convertToDto(antiHero);\n}\n```", "```java\n@PutMapping(\"/{id}\")\npublic void putAntiHero(\n  @PathVariable(\"id\") UUID id,\n  @Valid @RequestBody AntiHeroDto antiHeroDto\n) {\n  if (!id.equals(antiHeroDto.getId())) throw new\n    ResponseStatusException(\n    HttpStatus.BAD_REQUEST,\n    \"id does not match.\"\n  );\n  var antiHeroEntity = convertToEntity(antiHeroDto);\n  service.updateAntiHero(id, antiHeroEntity);\n}\n```", "```java\n@DeleteMapping(\"/{id}\")\npublic void deleteAntiHeroById(@PathVariable(\"id\") UUID id) {\n  service.removeAntiHeroById(id);\n}\n```", "```java\n  var antiHeroList = StreamSupport\n    .stream(service.findAllAntiHeroes().spliterator(),\n            false)\n    .collect(Collectors.toList());\n```", "```java\n  antiHeroList\n    .stream()\n    .map(this::convertToDto)\n    .collect(Collectors.toList());\n```", "```java\n@GetMapping\npublic List<AntiHeroDto> getAntiHeroes() {\n  var antiHeroList = StreamSupport\n    .stream(service.findAllAntiHeroes().spliterator(),\n            false)\n    .collect(Collectors.toList());\n  return antiHeroList\n    .stream()\n    .map(this::convertToDto)\n    .collect(Collectors.toList());\n}\n```", "```java\n@AllArgsConstructor\n@RestController\n@RequestMapping(\"api/v1/anti-heroes\")\npublic class AntiHeroController {\n    private final AntiHeroService service;\n    private final ModelMapper mapper;\n…\n    public AntiHeroDto getAntiHeroById(\n      @PathVariable(\"id\") UUID id) {\n        return convertToDto(service.findAntiHeroById(id));\n    }\n    @DeleteMapping(\"/{id}\")\n    public void deleteAntiHeroById(\n      @PathVariable(\"id\") UUID id) {\n        service.removeAntiHeroById(id);\n    }\n    @PostMapping\n    public AntiHeroDto postAntiHero(\n       @Valid @RequestBody AntiHeroDto antiHeroDto) {\n        var entity = convertToEntity(antiHeroDto);\n        var antiHero = service.addAntiHero(entity);\n…\n        return mapper.map(dto, AntiHeroEntity.class);\n    }\n}\n```", "```java\nbrew install redis\n```", "```java\nbrew services start redis\n```", "```java\nsudo apt-get install redis-server\n```", "```java\n    <!-- Redis -->\n    ```", "```java\n    <dependency>\n    ```", "```java\n       <groupId>org.springframework.data</groupId>\n    ```", "```java\n       <artifactId>spring-data-redis</artifactId>\n    ```", "```java\n       <version>2.4.5</version>\n    ```", "```java\n    </dependency>\n    ```", "```java\n    <dependency>\n    ```", "```java\n       <groupId>redis.clients</groupId>\n    ```", "```java\n       <artifactId>jedis</artifactId>\n    ```", "```java\n       <version>3.5.1</version>\n    ```", "```java\n       <type>jar</type>\n    ```", "```java\n    </dependency>\n    ```", "```java\n    @Bean\n    ```", "```java\n    JedisConnectionFactory jedisConnectionFactory() {\n    ```", "```java\n      RedisStandaloneConfiguration\n    ```", "```java\n        redisStandaloneConfiguration =\n    ```", "```java\n          new RedisStandaloneConfiguration();\n    ```", "```java\n      return new JedisConnectionFactory(\n    ```", "```java\n        redisStandaloneConfiguration);\n    ```", "```java\n    }\n    ```", "```java\n    RedisTemplate<UUID, Object> template = new RedisTemplate<>();\n    ```", "```java\n    template.setConnectionFactory(jedisConnectionFactory());\n    ```", "```java\n    @Bean\n    ```", "```java\n      public RedisTemplate<UUID, Object> redisTemplate() {\n    ```", "```java\n        RedisTemplate<UUID, Object> template =\n    ```", "```java\n          new RedisTemplate<>();\n    ```", "```java\n        template.setConnectionFactory(\n    ```", "```java\n          jedisConnectionFactory());\n    ```", "```java\n        template.setKeySerializer(\n    ```", "```java\n          new StringRedisSerializer());\n    ```", "```java\n        template.setHashKeySerializer(\n    ```", "```java\n          new StringRedisSerializer());\n    ```", "```java\n        template.setHashKeySerializer(\n    ```", "```java\n          new JdkSerializationRedisSerializer());\n    ```", "```java\n        template.setValueSerializer(\n    ```", "```java\n          new JdkSerializationRedisSerializer());\n    ```", "```java\n        template.setEnableTransactionSupport(true);\n    ```", "```java\n        template.afterPropertiesSet();\n    ```", "```java\n        return template;\n    ```", "```java\n      }\n    ```", "```java\n    }\n    ```", "```java\n    @RedishHash(\"AntiHero\")\n    ```", "```java\n    public class AntiHeroEntity {\n    ```", "```java\n    …\n    ```", "```java\n    }\n    ```"]