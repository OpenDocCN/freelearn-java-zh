["```java\n{\n    \"_id\": \"1884881\",\n    \"name\": \"Argentina\",\n    \"players\": [\n         {\n             \"_id\": \"199325\",\n             \"jerseyNumber\": 1,\n             \"name\": \"Vanina CORREA\",\n             \"position\": \"Goalkeeper\",\n             \"dateOfBirth\": \"1983-08-14\",\n             \"height\": 180,\n             \"weight\": 71\n        },\n        {\n             \"_id\": \"357669\",\n             \"jerseyNumber\": 2,\n             \"name\": \"Adriana SACHS\",\n             \"position\": \"Defender\",\n             \"dateOfBirth\": \"1993-12-25\",\n             \"height\": 163,\n             \"weight\": 61\n        }\n    ]\n}\n```", "```java\n    spring:\n        data:\n            mongodb:\n                uri: mongodb://127.0.0.1:27017/?directConnection=true\n                database: football\n    ```", "```java\n    @Document(collection = \"teams\")\n    public class Team {\n        @Id\n        private String id;\n        private String name;\n        private List<Player> players;\n    }\n    ```", "```java\n    public class Player {\n        private String id;\n        private Integer jerseyNumber;\n        private String name;\n        private String position;\n        private LocalDate dateOfBirth;\n        private Integer height;\n        private Integer weight;\n    }\n    ```", "```java\n    public interface TeamRepository extends MongoRepository<Team,\n    String>{\n    }\n    ```", "```java\n    @Service\n    public class FootballService {\n        private TeamRepository teamRepository;\n        public FootballService(TeamRepository teamRepository) {\n            this.teamRepository = teamRepository;\n        }\n    }\n    ```", "```java\n    public Team getTeam(String id) { \n        return teamRepository.findById(id).get();\n    }\n    public Optional<Team> findByName(String name);\n    ```", "```java\n    public List<Team> findByNameContaining(String name);\n    ```", "```java\n    @Query(value = \"{'players._id': ?0}\", fields = \"{'players.$': 1}\")\n    public Team findPlayerById(String id);\n    ```", "```java\n    public Player getPlayer(String id) {\n        Team team = teamRepository.findPlayerById(id);\n        if (team != null) {\n            return team.getPlayers().isEmpty()\n                                         ? null\n                                         : team.getPlayers().get(0);\n        } else {\n            return null;\n        }\n    }\n    ```", "```java\n        public Team saveTeam(Team team) {\n            return teamRepository.save(team);\n        }\n        ```", "```java\n        public void deleteTeam(String id) {\n            teamRepository.deleteById(id);\n        }\n        ```", "```java\n[\n  {\n    \"_id\": \"1882891\",\n    \"players\": [\n      {\n        \"_id\": \"430530\",\n        \"jerseyNumber\": 2,\n        \"name\": \"Courtney NEVIN\",\n        \"position\": \"Defender\",\n        \"dateOfBirth\": {\n          \"$date\": \"2002-02-11T23:00:00Z\"\n        },\n        \"height\": 169,\n        \"weight\": 64\n      }\n    ]\n  }\n]\n```", "```java\npublic void updateTeamName(String id, String name) {\n    Query query = new Query(Criteria.where(\"id\").is(id));\n    Update updateName = new Update().set(\"name\", name);\nmongoTemplate.updateFirst(query, updateName, Team.class);\n}\n```", "```java\n    <dependency>\n        <groupId>org.testcontainers</groupId>\n        <artifactId>junit-jupiter</artifactId>\n        <scope>test</scope>\n    </dependency>\n    <dependency>\n        <groupId>org.testcontainers</groupId>\n        <artifactId>mongodb</artifactId>\n        <scope>test</scope>\n    </dependency>\n    ```", "```java\n    @SpringBootTest\n    @Testcontainers\n    class FootballServiceTest\n    ```", "```java\n    static MongoDBContainer mongoDBContainer = new MongoDBContainer(\"mongo\").withCopyFileToContainer(\n       MountableFile.teams.json file. To import the data, we’ll use the *mongoimport* tool:\n\n    ```", "```java\n\n    Note that this step should be performed before the tests start. That’s why it’s annotated with `@BeforeAll`.\n    ```", "```java\n    @DynamicPropertySource\n    static void setMongoDbProperties(DynamicPropertyRegistry registry) {\n        registry.add(\"spring.data.mongodb.uri\", mongoDBContainer::getReplicaSetUrl);\n    }\n    ```", "```java\n    @Autowired\n    private FootballService footballService;\n    @Test\n    void getTeam() {\n       Team team = footballService.getTeam(\"1884881\");\n       assertNotNull(team);\n    }\n    ```", "```java\nmongoimport --uri=\"mongodb://127.0.0.1:27017/?directConnection=true\"\n--db=football2 --collection=teams --jsonArray < teams.json\n```", "```java\n    @Document(collection = \"players\")\n    public class Player {\n        @Id\n    private String id;\n    }\n    ```", "```java\n    @Document(collection = \"matches\")\n    public class Match {\n        @Id\n        private String id;\n        private LocalDate matchDate;\n        @Indexed\n        @DBRef(lazy = false)\n        private Team team1;\n        @Indexed\n        @DBRef(lazy = false)\n        private Team team2;\n        private Integer team1Goals;\n        private Integer team2Goals;\n    }\n    ```", "```java\n    @Sharded(shardKey = { \"match\" })\n    @Document(collection = \"match_events\")\n    public class MatchEvent {\n        @Id\n        private String id;\n        @Field(name = \"event_time\")\n        private LocalDateTime time;\n        private Integer type;\n        private String description;\n        @Indexed\n        @DBRef\n        private Player player1;\n        @Indexed\n        @DBRef\n        private Player player2;\n        private List<String> mediaFiles;\n        @DBRef\n        private Match match;\n    }\n    ```", "```java\n        public interface MatchEventRepository extends MongoRepository<MatchEvent, String>{\n            @Query(value = \"{'match.$id': ?0}\")\n            List<MatchEvent> findByMatchId(String matchId);\n            @Query(value = \"{'$and': [{'match.$id': ?0}, {'$or':[\n        {'player1.$id':?1}, {'player2.$id':?1} ]}]}\")\n            List<MatchEvent> findByMatchIdAndPlayerId(String matchId, String playerId);\n        }\n        ```", "```java\n    @Configuration\n    public class MongoConfig extends\n    AbstractMongoClientConfiguration {\n        @Override\n        protected boolean autoIndexCreation() {\n            return true;\n        }\n    }\n    ```", "```java\n{\n    \"$ref\": \"teams\",\n    \"$id\": \"1882891\",\n    \"$db\": \"football\"\n}\n```", "```java\n{\n  \"_id\": \"99999999\",\n  \"name\": \"Mars\",\n  \"_class\": \"com.packt.footballmdb.repository.Team\"\n}\n```", "```java\n    @Document(collection = \"users\")\n    public class User {\n        @Id\n        private String id;\n        private String username;\n        private Integer tokens;\n    }\n    ```", "```java\n    @Document(collection = \"cards\")\n    public class Card {\n        @Id\n        private String id;\n        @DBRef\n        private Player player;\n        @DBRef\n        private User owner;\n    }\n    ```", "```java\n    public interface UserRepository extends MongoRepository<User, String>{\n    }\n    ```", "```java\n    public interface CardRepository extends MongoRepository<Card, String>{\n    }\n    ```", "```java\n    @Service\n    public class UserService {\n    }\n    ```", "```java\n    @Service\n    public class UserService {\n        private UserRepository userRepository;\n        private PlayerRepository playersRepository;\n        private CardRepository cardsRepository;\n        private MongoTemplate mongoTemplate;\n        public UserService(UserRepository userRepository,\n                           PlayerRepository playersRepository,\n                           CardRepository cardsRepository,\n                           MongoTemplate mongoTemplate) {\n            this.userRepository = userRepository;\n            this.playersRepository = playersRepository;\n            this.cardsRepository = cardsRepository;\n            this.mongoTemplate = mongoTemplate;\n        }\n    ```", "```java\n    public Integer buyTokens(String userId, Integer tokens) {\n        Query query = new Query(Criteria.where(\"id\").is(userId));\n        Update update = new Update().inc(\"tokens\", tokens);\n        UpdateResult result = mongoTemplate.updateFirst(query, update, User.class, \"users\");\n        return (int) result.getModifiedCount();\n    }\n    ```", "```java\n    @Transactional\n    public Integer buyCards(String userId, Integer count) {\n        Optional<User> userOpt = userRepository.findById(userId);\n        if (userOpt.isPresent()) {\n            User user = userOpt.get();\n            List<Player> availablePlayers = getAvailablePlayers();\n            Random random = new Random();\n            if (user.getTokens() >= count) {\n                user.setTokens(user.getTokens() - count);\n            } else {\n                throw new RuntimeException(\"Not enough tokens\");\n            }\n            List<Card> cards = Stream.generate(() -> {\n                Card card = new Card();\n                card.setOwner(user);\n                card.setPlayer(availablePlayers.get(\n                        random.nextInt(0,\n                                availablePlayers.size())));\n                return card;\n            }).limit(count).toList();\n            List<Card> savedCards = cardsRepository.saveAll(cards);\n            userRepository.save(user);\n            return savedCards.size();\n        }\n        return 0;\n    }\n    ```", "```java\n    @Bean\n    MongoTransactionManager\n    transactionManager(MongoDatabaseFactory dbFactory) { \n        return new MongoTransactionManager(dbFactory); \n    }\n    ```", "```java\n    @SpringBootTest\n    @Testcontainers\n    class UserServiceTest\n    ```", "```java\n    static Network mongoDbNetwork = Network.newNetwork();\n    ```", "```java\n    static GenericContainer<?> mongoDBContainer1 = new GenericContainer<>(\"mongo:latest\")\n        .withNetwork(mongoDbNetwork)\n        .withCommand(\"mongod\", \"--replSet\", \"rs0\", \"--port\", \"27017\", \"--bind_ip\", \"localhost,mongo1\")\n        .withNetworkAliases(\"mongo1\")\n        .withExposedPorts(27017);\n    ```", "```java\n    rs.initiate({\n       _id: \"rs0\",\n       members: [\n           {_id: 0, host: \"mongo1\"},\n           {_id: 1, host: \"mongo2\"},\n           {_id: 2, host: \"mongo3\"}\n       ]})\n    ```", "```java\n    String initCluster = \"\"\"\n                    rs.initiate({\n                     _id: \"rs0\",\n                     members: [\n                       {_id: 0, host: \"mongo1\"},\n                       {_id: 1, host: \"mongo2\"},\n                       {_id: 2, host: \"mongo3\"}\n                     ]\n                    })\n                    \"\"\";\n    mongoDBContainer1.start();\n    mongoDBContainer2.dependsOn(mongoDBContainer1).start();\n    mongoDBContainer3.dependsOn(mongoDBContainer2).start();\n    mongodb address in the application using the @DynamicPropertySource annotation:\n\n    ```", "```java\n    @Test\n    void buyCards() {\n        User user = new User();\n        user.setUsername(\"Sample user\");\n        User createdUser = userService.createUser(user);\n        Integer buyTokens = 10;\n        userService.buyTokens(createdUser.getId(), buyTokens);\n        Integer requestedCards = 1;\n        Integer cardCount = userService.buyCards(user.getId(), requestedCards);\n        assertThat(cardCount, is(requestedCards));\n       // do more assert\n    }\n    ```", "```java\n\n    ```", "```java\nmongodb://mongo1:27017,mongo2:27017,mongo3:27017/football?replicaSet=rs0\n```", "```java\n    @Version\n    private Long version;\n    ```", "```java\n    @Service\n    public class TradingService {\n        private CardRepository cardRepository;\n        private UserRepository userRepository;\n        public TradingService(CardRepository cardRepository,\n                              UserRepository userRepository) {\n            this.cardRepository = cardRepository;\n            this.userRepository = userRepository;\n        }\n    }\n    ```", "```java\n        @Transactional\n        private Card exchangeCardInternal(String cardId, String newOwnerId, Integer price) {\n            Card card = cardRepository.findById(cardId).orElseThrow();\n            User newOwner =\n        userRepository.findById(newOwnerId).orElseThrow();\n            if (newOwner.getTokens() < price) {\n                throw new RuntimeException(\"Not enough tokens\");\n            }\n            newOwner.setTokens(newOwner.getTokens() - price);\n            User oldOwner = card.getOwner();\n            oldOwner.setTokens(oldOwner.getTokens() + price);\n            card.setOwner(newOwner);\n            card = cardRepository.save(card);\n            userRepository.saveAll(List.of(newOwner, oldOwner));\n            return card;\n        }\n        ```", "```java\n        public boolean exchangeCard(String cardId, String newOwnerId,\n                                          Integer price) {\n            try{\n                exchangeCardInternal(cardId, newOwnerId, price);\n                return true;\n            } catch (OptimisticLockingFailureException e) {\n                return false;\n            }\n        }\n        ```", "```java\nQuery query = new\nQuery(Criteria.where(\"id\").is(id).and(\"version\").is(version));\nUpdate update = new Update().set(\"tokens\", value).inc(\"version\", 1);\nmongoTemplate.updateFirst(query, update, User.class);\n```", "```java\ndocker run -p 9042:9042 --name cassandra -d cassandra:latest\n```", "```java\ndocker exec -it cassandra cqlsh -e \"CREATE KEYSPACE footballKeyspace WITH replication = {'class': 'SimpleStrategy'};\"\n```", "```java\n    @Table\n    public class Comment {\n        @PrimaryKeyColumn(name = \"comment_id\", ordinal = 0, type = PrimaryKeyType.PARTITIONED, ordering = Ordering.DESCENDING)\n        private String commentId;\n        private String userId;\n        private String targetType;\n        private String targetId;\n        private String content;\n        private LocalDateTime date;\n        public Set<String> labels = new HashSet<>();\n    Comment table will include the comment content, the date, and the user posting the comment. It will also include information about the target of the comment – that is, a player, a match, or any other component we may have in our football application.\n    ```", "```java\n    public interface CommentRepository extends\n    CassandraRepository<Comment, String>{\n    }\n    ```", "```java\n    @AllowFiltering\n    List<Comment> findByTargetTypeAndTargetId(String targetType, String targetId);\n    ```", "```java\n    @Service\n    public class CommentService {\n        private CommentRepository commentRepository;\n        public CommentService(CommentRepository commentRepository){\n            this.commentRepository = commentRepository;\n        }\n    }\n    ```", "```java\n        public record CommentPost(String userId, String targetType, String targetId, String commentContent, Set<String> labels) {\n        }\n        ```", "```java\n        public Comment postComment(CommentPost commentPost) {\n            Comment comment = new Comment();\n            comment.setCommentId(UUID.randomUUID().toString());\n            comment.setUserId(commentPost.userId());\n            comment.setTargetType(commentPost.targetType());\n            comment.setTargetId(commentPost.targetId());\n            comment.setContent(commentPost.commentContent());\n            comment.setDate(LocalDateTime.now());\n            comment.setLabels(commentPost.labels());\n            return commentRepository.save(comment);\n        }\n        ```", "```java\n        public List<Comment> getComments() {\n            return commentRepository.findAll();\n        }\n        ```", "```java\n        public List<Comment> getComments(String targetType,\n                                         String targetId) {\n            return commentRepository.findByTargetTypeAndTargetId(\n                                                  targetType, targetId);\n        }\n        ```", "```java\n    spring:\n        cassandra:\n            keyspace-name: footballKeyspace\n            schema-action: CREATE_IF_NOT_EXISTS\n            contact-points: localhost\n            local-datacenter: datacenter1\n            port: 9042\n    ```", "```java\n    <dependency>\n        <groupId>org.testcontainers</groupId>\n        <artifactId>junit-jupiter</artifactId>\n        <scope>test</scope>\n    </dependency>\n    <dependency>\n        <groupId>org.testcontainers</groupId>\n        <artifactId>cassandra</artifactId>\n        <scope>test</scope>\n    </dependency>\n    ```", "```java\n    CREATE KEYSPACE footballKeyspace WITH replication = {'class': 'SimpleStrategy'};\n    ```", "```java\n    @Testcontainers\n    @SpringBootTest\n    class CommentServiceTest\n    ```", "```java\n    static CassandraContainer cassandraContainer = (CassandraContainer) new CassandraContainer(\"cassandra\")\n                .withInitScript(\"createKeyspace.cql\")\n                .withExposedPorts(@BeforeAll annotation for that purpose:\n    ```", "```java\n@BeforeAll\nstatic void startContainer() throws IOException, InterruptedException {\n    cassandraContainer.start();\n}\n```", "```java\n@DynamicPropertySource\nstatic void setCassandraProperties(DynamicPropertyRegistry registry) {\n    registry.add(\"spring.cassandra.keyspace-name\", () -> \"footballKeyspace\");\n    registry.add(\"spring.cassandra.contact-points\", () -> cassandraContainer.getContactPoint().getAddress());\n    registry.add(\"spring.cassandra.port\", () -> cassandraContainer.getMappedPort(9042));\n    registry.add(\"spring.cassandra.local-datacenter\", () -> cassandraContainer.getLocalDatacenter());\n}\n```", "```java\n    @Autowired\n    CommentService commentService;\n    @Test\n    void postCommentTest() {\n        CommentPost comment = new CommentPost(\"user1\", \"player\", \"1\", \"The best!\", Set.of(\"label1\", \"label2\"));\n        Comment result = commentService.postComment(comment);\n        assertNotNull(result);\n        assertNotNull(result.getCommentId());\n    }\n    ```", "```java\n    @Service\n    public class CommentService {\n        private CommentRepository commentRepository;\n        private CassandraTemplate cassandraTemplate;\n        public CommentService(CommentRepository commentRepository,\n                              CassandraTemplate cassandraTemplate) {\n            this.commentRepository = commentRepository;\n            this.cassandraTemplate = cassandraTemplate;\n        }\n    }\n    ```", "```java\n    public List<Comment> getComments(String targetType,\n                                     String targetId,\n                                     Optional<String> userId,\n                                     Optional<LocalDateTime> start,\n                                     Optional<LocalDateTime> end,\n                                     Optional<Set<String>> labels)\n    ```", "```java\n    Select select = QueryBuilder.selectFrom(\"comment\").all()\n                    .whereColumn(\"targetType\")\n                    .isEqualTo(QueryBuilder.literal(targetType))\n                    .whereColumn(\"targetId\")\n                    .isEqualTo(QueryBuilder.literal(targetId));\n    ```", "```java\n    if (userId.isPresent()) {\n              select = select.whereColumn(\"userId\")\n                       .isEqualTo(QueryBuilder.literal(userId.get()));\n    }\n    if (start.isPresent()) {\n        select = select.whereColumn(\"date\")\n                       .isGreaterThan(QueryBuilder\n                           .literal(start.get().toString()));\n    }\n    if (end.isPresent()) {\n        select = select.whereColumn(\"date\")\n                       .isLessThan(QueryBuilder\n                           .literal(end.get().toString()));\n    }\n    if (labels.isPresent()) {\n        for (String label : labels.get()) {\n            select = select.whereColumn(\"labels\")\n                           .contains(QueryBuilder.literal(label));\n        }\n    }\n    ```", "```java\n    return cassandraTemplate.select(select.allowFiltering().build(),\n                                    Comment.class);\n    ```", "```java\npublic List<Comment> getCommentsString(String targetType,\n                                       String targetId,\n                                       Optional<String> userId,\n                                       Optional<LocalDateTime> start,\n                                       Optional<LocalDateTime> end,\n                                       Optional<Set<String>> labels) {\n    String query = \"SELECT * FROM comment WHERE targetType ='\"\n                   + targetType + \"' AND targetId='\" + targetId + \"'\";\n    if (userId.isPresent()) {\n        query += \" AND userId='\" + userId.get() + \"'\";\n    }\n    if (start.isPresent()) {\n        query += \" AND date > '\" + start.get().toString() + \"'\";\n    }\n    if (end.isPresent()) {\n        query += \" AND date < '\" + end.get().toString() + \"'\";\n    }\n    if (labels.isPresent()) {\n        for (String label : labels.get()) {\n           query += \" AND labels CONTAINS '\" + label + \"'\";\n        }\n    }\n    query += \" ALLOW FILTERING\";\n    return cassandraTemplate.select(query, Comment.class);\n}\n```", "```java\n    private Integer upvotes;\n    ```", "```java\n    docker exec -it cassandra cqlsh\n    USE footballKeyspace;\n    ALTER TABLE Comment ADD upvotes int;\n    ```", "```java\n    public Comment upvoteComment(String commentId) {\n    ```", "```java\n    Comment comment =\n    commentRepository.findByCommentId(commentId).get();\n    ```", "```java\n    Integer currentVotes = comment.getUpvotes();\n    if (currentVotes == null) {\n        comment.setUpvotes(1);\n    } else {\n        comment.setUpvotes(currentVotes + 1);\n    }\n    ```", "```java\n    CriteriaDefinition ifCriteria = Criteria\n                                   .where(ColumnName.from(\"upvotes\"))\n                                   .is(currentVotes);\n    EntityWriteResult<Comment> result = cassandraTemplate\n                                   .update(comment,\n                                       UpdateOptions.builder()\n                                       .ifCondition(ifCriteria)\n                                       .build());\n    ```", "```java\n    if (result.wasApplied()) {\n        return result.getEntity();\n    }\n    ```"]