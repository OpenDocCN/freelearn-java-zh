- en: Chapter 3. Advanced Spring Boot Features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous lesson, we extended our microservice with exception handling,
    HATEOAS, caching, and internationalization. In this lesson, let's turn our attention
    to deploying our services to production. To be able to deploy the services to
    production, we need to be able to set up and create functionality to configure,
    deploy, and monitor services.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are some of the questions we will answer during this lesson:'
  prefs: []
  type: TYPE_NORMAL
- en: How to externalize application configuration?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use profiles to configure environment-specific values?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to deploy our application to the Cloud?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is an embedded server? How can you use Tomcat, Jetty, and Undertow?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What monitoring features does Spring Boot Actuator provide?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can you be a more productive developer with Spring Boot?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Externalised Configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Applications are typically built once (in JAR or WAR) and then deployed into
    multiple environments. The following figure shows some of the different environments
    an application can be deployed to:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Externalised Configuration](img/03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In each of the preceding environments, an application typically has the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Connections to databases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connections to multiple services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specific environment configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is a good practice to externalize configurations that change between different
    environments into a configuration file or database.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Boot provides a flexible, standardized approach for externalized configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will look at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: How can properties from `application.properties` be used inside our services?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do type-safe Configuration Properties make application configuration a cakewalk?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What kind of support does Spring Boot provide for **Spring Profiles**?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can you configure properties in `application.properties`?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In Spring Boot, `application.properties` is the default file from which configuration
    values are picked up. Spring Boot can pick the `application.properties` file from
    anywhere on the classpath. Typically, `application.properties` is located at `src\main\resources`,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Externalised Configuration](img/03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In [Lesson 2](ch02.html "Chapter 2. Extending Microservices"), *Extending Microservices*,
    we looked at examples of customizing Spring Security using configuration in `application.properties`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Similar to these, all other Spring Boot starters, modules, and frameworks can
    be customized through configuration in `application.properties`. In the next section,
    let's look at some of the configuration options Spring Boot provides for these
    frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing Frameworks Through application.properties
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will discuss some of the important things that can be configured
    through `application.properties`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the complete list, refer to [https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#common-application-properties](https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#common-application-properties).
  prefs: []
  type: TYPE_NORMAL
- en: Logging
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Some of the things that can be configured are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The location of the logging configuration file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the location of the log file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging level
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following snippet shows a few examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Embedded Server Configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'An embedded server is one of the most important features of Spring Boot. Some
    of the embedded server features that can be configured through application properties
    include:'
  prefs: []
  type: TYPE_NORMAL
- en: Server ports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SSL support and configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access log configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following snippet shows some of the embedded server features that can be
    configured through application properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Spring MVC
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Spring MVC can be extensively configured through `application.properties`.
    Listed here are some of the important configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Spring Starter Security
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Spring Security can be extensively configured through `application.properties`.
    The following examples show some of the important configuration options related
    to Spring Security:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Data Sources, JDBC, and JPA
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Data Sources, JDBC, and JPA can also be extensively configured through `application.properties`.
    Listed here are some of the important options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Other Configuration Options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Some other things that can be configured through `application.properties` are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Profiles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTP message converters (Jackson/JSON)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transaction management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internationalization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following examples show some of the configuration options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Custom Properties in Application.Properties
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Until now, we have looked at using prebuilt properties provided by Spring Boot
    for various frameworks. In this section, we will look at creating our application-specific
    configuration that can also be configured in `application.properties`.
  prefs: []
  type: TYPE_NORMAL
- en: Let's consider an example. We want to be able to interact with an external service.
    We want to be able to externalize the configuration of the URL of this service.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example shows how we would want to configure the external service
    in `application.properties`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We want to use the value of the `somedataservice.url` property in our data service.
    The following snippet shows how we can do that in an example data service.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'A couple of important things to note are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@Component public class SomeDataService`: The data service bean is managed
    by Spring because of the `@Component` annotation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@Value("${somedataservice.url}")`: The value of `somedataservice.url` will
    be autowired into the `url`variable. The `url` value can be used in the methods
    of the bean.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration properties - Type-Safe Configuration Management
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'While the `@Value` annotation provides dynamic configuration, it also has several
    drawbacks:'
  prefs: []
  type: TYPE_NORMAL
- en: If we want to use three property values in a service, we would need to autowire
    them using `@Value` three times.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `@Value` annotations and the keys of the messages would be spread across
    the application. If we want to find the list of the configurable values in an
    application, we have to search through the application for `@Value`annotations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Spring Boot provides a better approach to application configuration through
    the strongly typed `ConfigurationProperties` feature. This allows us to do the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: Have all the properties in a predefined bean structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This bean would act as the centralized store for all application properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The configuration bean can be autowired wherever application configuration is
    needed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An example configuration bean is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'A couple of important things to note are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@ConfigurationProperties("application")` is the annotation for an externalized
    configuration. We can add this annotation to any class to bind to external properties.
    The value in the double quotes--application--is used as a prefix while binding
    external configuration to this bean.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are defining multiple configurable values in the bean.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getters and setters are needed since binding happens through Java beans property
    descriptors.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following snippet shows how the values for these properties can be defined
    in `application.properties`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'A couple of important things to note are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`application`: The prefix is defined as part of `@ConfigurationProperties("application")`
    while defining the configuration bean'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Values are defined by appending the prefix to the name of the property
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can use configuration properties in other beans by autowiring `ApplicationConfiguration`
    into the bean:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'A couple of important things to note are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@Autowired private ApplicationConfiguration configuration`: `ApplicationConfiguration`
    is autowired into `SomeOtherDataService`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`configuration.getService1Timeout(), configuration.getService1Url(), configuration.isEnableSwitchForService1()`:
    Values can be accessed in bean methods using the getter methods on the configuration
    bean'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By default, any failure in binding externally configured values to configuration
    properties bean would result in the failure of the server start up. This prevents
    problems that arise because of misconfigured applications running in production.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s use the misconfigure service timeout to see what happens:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The application will fail to start up with an error.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Profiles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Until now, we looked at how to externalize application configuration to a property
    file, `application.properties`. What we want to be able to do is have different
    values for the same property in different environments.
  prefs: []
  type: TYPE_NORMAL
- en: Profiles provide a way to provide different configurations in different environments.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following snippet shows how to configure an active profile in `application.properties`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have an active profile configured, you can define properties specific
    to that profile in `application-{profile-name}.properties`. For `dev` profile,
    the name of the properties file would be `application-dev.properties`. The following
    example shows the configuration in `application-dev.properties`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The values in `application-dev.properties` will override the default configuration
    in `application.properties`if the active profile is `dev`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can have configurations for multiple environments, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Profiles](img/03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Profiles-Based Bean Configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Profiles can also be used to define different beans or different bean configurations
    in different environments. All classes marked with `@Component` or `@Configuration`
    can also be marked with an additional `@Profile` annotation to specify the profile
    in which the bean or configuration is enabled.
  prefs: []
  type: TYPE_NORMAL
- en: Let's consider an example. An application needs different caches enabled in
    different environments. In the `dev` environment, it uses a very simple cache.
    In production, we would want to use a distributed cache. This can be implemented
    using profiles.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following bean shows the configuration enabled in a `dev` environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The following bean shows the configuration enabled in a production environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Based on the active profile configured, the respective configuration is picked
    up. Note that we are not really configuring a distributed cache in this example.
    We are returning a simple string to illustrate that profiles can be used to implement
    these kinds of variations.
  prefs: []
  type: TYPE_NORMAL
- en: Other Options for Application Configuration Values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Until now, the approaches we took to configure application properties was using
    the key value pairs from either `application.properties` or `application-{profile-name}.properties`.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Boot provides a number of other ways to configure application properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listed here are some of the important ways of providing application configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: Command-line arguments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a system property with the name `SPRING_APPLICATION_JSON` and including
    the JSON configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ServletConfig init` parameters'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ServletContext init` parameters'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java System properties (`System.getProperties()`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operating system environment variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Profile-specific application properties outside of `.jar`, somewhere in the
    classpath of the application (`application-{profile}.properties`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Profile-specific application properties packaged inside your `.jar` (`application-{profile}.properties`
    and YAML variants)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application properties outside the `.jar`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application properties packaged inside the `.jar`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'More information can be found in the Spring Boot documentation at: [http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#boot-features-external-config](http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#boot-features-external-config).'
  prefs: []
  type: TYPE_NORMAL
- en: The approaches at the top of this list have higher priority than those at the
    bottom of the list. For example, if a command-line argument with the name `spring.profiles.active`
    is provided when launching the application, it would override any configuration
    provided through `application.properties` because command-line arguments have
    higher preference.
  prefs: []
  type: TYPE_NORMAL
- en: This provides great flexibility in determining how you would want to configure
    your application in different environments.
  prefs: []
  type: TYPE_NORMAL
- en: YAML Configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Spring Boot also supports YAML to configure your properties.
  prefs: []
  type: TYPE_NORMAL
- en: '**YAML** is an abbreviation for **YAML Ain''t Markup Language**. It is a human
    readable structured format. YAML is commonly used for configuration files.'
  prefs: []
  type: TYPE_NORMAL
- en: To understand basic syntax of YAML, look at the example below (`application.yaml`).
    This shows how our application configuration can be specified in YAML.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the YAML configuration is much more readable than `application.properties`,
    as it allows better grouping of properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another advantage of YAML is that it allows you to specify the configuration
    for multiple profiles in a single configuration file. The following snippet shows
    an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: In this example, `http://service.dev.com` will be used in the `dev` profile,
    and `http://service.prod.com` is used in the `prod` profile. In all other profiles,
    `http://service.default.com` will be used as the service URL.
  prefs: []
  type: TYPE_NORMAL
- en: Embedded Servers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the important concepts Spring Boot brings in is embedded servers.
  prefs: []
  type: TYPE_NORMAL
- en: Let's first understand the difference between traditional Java web application
    deployment and this new concept called embedded server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Traditionally, with Java web applications, we build **Web Application Archive**
    (**WAR**) or **Enterprise Application Archive** (**EAR**) and deploy them into
    servers. Before we can deploy a WAR on the server, we need a web server or an
    application server installed on the server. The application server would be on
    top of the Java instance installed on the server. So, we need Java and an application
    (or web server) installed on the machine before we can deploy our application.
    The following figure shows an example installation in Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Embedded Servers](img/03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Spring Boot brings in the concept of embedded servers, where the web server
    is part of the application deployable--JAR. To deploy applications using embedded
    servers, it is sufficient if Java is installed on the server. The following figure
    shows an example installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Embedded Servers](img/03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When we build any application with Spring Boot, the default is to build a JAR.
    With `spring-boot-starter-web`, the default embedded server is Tomcat.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we use `spring-boot-starter-web`, a few Tomcat-related dependencies can
    be seen in the Maven dependencies section. These dependencies will be included
    as part of the application deployment package:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Embedded Servers](img/03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To deploy the application, we need to build a JAR. We can build a JAR using
    the command below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The following screenshot shows the structure of the JAR created.
  prefs: []
  type: TYPE_NORMAL
- en: '`BOOT-INF\classes` contains all application-related class files (from `src\main\java`)
    as well as the application properties from `src\main\resources`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Embedded Servers](img/03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Some of the libraries in `BOOT-INF\lib` are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Embedded Servers](img/03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '`BOOT-INF\lib` contains all the JAR dependencies of the application. There
    are three Tomcat-specific JARs among these. These three JARs enable the launch
    of an embedded Tomcat service when the application is run as a Java application.
    Because of this, a Java installation is sufficient to deploy this application
    on a server.'
  prefs: []
  type: TYPE_NORMAL
- en: Switching to Jetty and Undertow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following screenshot shows the changes needed in order to switch to using
    Jetty embedded server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Switching to Jetty and Undertow](img/3.9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: All that we need to do is exclude the Tomcat starter dependency in `spring-boot-starter-web`
    and include a dependency in `spring-boot-starter-jetty`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can now see a number of Jetty dependencies in the Maven dependencies section.
    The following screenshot shows a few of the Jetty-related dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Switching to Jetty and Undertow](img/03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Switching to Undertow is equally easy. Use `spring-boot-starter-undertow` instead
    of `spring-boot-starter-jetty`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Building a WAR file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Spring Boot also provides the option of building a traditional WAR file instead
    of using a JAR.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to change our packaging in `pom.xml` to `WAR`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'We would want to prevent tomcat server to be embedded as a dependency in the
    WAR file. We can do this by modifying the dependency on the embedded server (Tomcat
    in the following example) to have a scope of provided. The following snippet shows
    the exact details:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: When you build the WAR file, Tomcat dependencies are not included. We can use
    this WAR to deploy on an application server, such as WebSphere or Weblogic, or
    a web server, such as Tomcat.
  prefs: []
  type: TYPE_NORMAL
- en: Developer Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring Boot provides tools that can improve the experience of developing Spring
    Boot applications. One of these is Spring Boot developer tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use Spring Boot developer tools, we need to include a dependency:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Spring Boot developer tools, by default, disables the caching of view templates
    and static files. This enables a developer to see the changes as soon as they
    make them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another important feature is the automatic restart when any file in the classpath
    changes. So, the application automatically restarts in the following scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: When we make a change to a controller or a service class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When we make a change to the property file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The advantages of Spring Boot developer tools are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The developer does not need to stop and start the application each time. The
    application is automatically restarted as soon as there is a change.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The restart feature in Spring Boot developer tools is intelligent. It only reloads
    the actively developed classes. It does not reload the third-party JARs (using
    two different class-loaders). Thereby, the restart when something in the application
    changes is much faster compared to cold-starting an application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Live Reload
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another useful Spring Boot developer tools feature is **live reload**. You can
    download a specific plugin for your browser from [http://livereload.com/extensions/](http://livereload.com/extensions/).
  prefs: []
  type: TYPE_NORMAL
- en: You can enable live reload by clicking on the button in the browser. The button
    in the Safari browser is shown in the following screenshot. It's in the top-left
    corner beside the address bar.
  prefs: []
  type: TYPE_NORMAL
- en: '![Live Reload](img/03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If there are code changes made on the pages or services that are shown in the
    browser, they are auto-refreshed with new content. There is no need to hit that
    refresh button anymore!
  prefs: []
  type: TYPE_NORMAL
- en: Spring Boot Actuator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When an application is deployed into production:'
  prefs: []
  type: TYPE_NORMAL
- en: We want to know immediately if some service goes down or is very slow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We want to know immediately if any of the servers does not have sufficient free
    space or memory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is called **application monitoring**.
  prefs: []
  type: TYPE_NORMAL
- en: '**Spring Boot Actuator** provides a number of production-ready monitoring features.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will add Spring Boot Actuator by adding a simple dependency:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'As soon as the actuator is added to an application, it enables a number of
    endpoints. When we start the application, we see a number of added new mappings.
    The following screenshot shows an extract of these new mappings from the start
    up log:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Spring Boot Actuator](img/03_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The actuator exposes a number of endpoints. The actuator endpoint (`http://localhost:8080/application`)
    acts as a discovery for all other endpoints. The following screenshot shows the
    response when we execute the request from a Postman:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Spring Boot Actuator](img/03_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: HAL Browser
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A number of these endpoints expose a lot of data. To be able to visualize the
    information better, we will add an **HAL Browser** to our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Spring Boot Actuator exposes REST APIs around all the data captured from the
    Spring Boot application and environment. The HAL Browser enables visual representation
    around the Spring Boot Actuator API:'
  prefs: []
  type: TYPE_NORMAL
- en: '![HAL Browser](img/03_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When we launch `http://localhost:8080/application` in the browser, we can see
    all the URLs exposed by actuator.
  prefs: []
  type: TYPE_NORMAL
- en: '![HAL Browser](img/03_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let's browse all the information exposed by actuator as part of different endpoints
    through the HAL Browser.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration Properties
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `configprops` endpoint provides information about configuration options
    that can be configured through application properties. It basically is a collated
    list of all `@ConfigurationProperties`. The following screenshot shows `configprops`
    in HAL Browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuration Properties](img/03_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To illustrate a known example, the following section from the service response
    shows the configuration options available for Spring MVC:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To provide configuration for Spring MVC, we combine the prefix with the path
    in properties. For example, to configure `loadOnStartup`, we use a property with
    the name `spring.mvc.servlet.loadOnStartup`.
  prefs: []
  type: TYPE_NORMAL
- en: Environment Details
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **environment** (**env**) endpoint provides information about the operating
    system, JVM installation, classpath, system environment variable, and the values
    configured in various application properties files. The following screenshot shows
    the environment endpoint in the HAL Browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Environment Details](img/03_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'An extract from the response from the `/application/env` service is shown here.
    It shows a few system details as well as the details from application configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Health
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The health service provides details of the disk space and status of the application.
    The following screenshot shows the service executed from the HAL Browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Health](img/03_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Mappings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The mappings endpoint provides information about different service endpoints
    that are exposed from the application:'
  prefs: []
  type: TYPE_NORMAL
- en: URI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Request methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bean
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controller methods exposing the service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Mappings provides a collated list of all `@RequestMapping` paths. An extract
    from the response of the `/application/mappings` endpoint is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Beans
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The beans endpoint provides the details about the beans that are loaded into
    the Spring context. This is useful in debugging any problems related to Spring
    context.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'It shows the details for two beans: `basicController` and `todoController`.
    You can see the following details for all the beans:'
  prefs: []
  type: TYPE_NORMAL
- en: The name of the bean and its aliases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The scope of the bean
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The type of the bean
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The exact location of the class from which this bean is created
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dependencies of the bean
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metrics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The metrics endpoint shows some of the important metrics about the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Server--free memory, processors, uptime, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JVM--details about the heap, threads, garbage collection, sessions, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Responses provided by application services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An extract from the response of the `/application/metrics` endpoint is shown
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Auto-Configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Auto-configuration is one of the most important features of Spring Boot. The
    auto-configuration endpoint (`/application/autoconfig`) exposes the details related
    to auto-configuration. It shows both positive matches and negative matches with
    details about why a particular auto-configuration succeeded or failed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following extract shows some of the positive matches from the response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The following extract shows some of the negative matches from the response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: All these details are very useful in order to debug auto-configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Three of the actuator endpoints are useful when debugging problems:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/application/heapdump`: Provides a heap dump'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/application/trace`: Provides a trace of the last few requests serviced by
    the application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/application/dump`: Provides a thread dump'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying an Application to Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring Boot has great support for most popular Cloud **Platform as a Service**
    (**PaaS**) providers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the popular ones are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Cloud Foundry
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Heroku
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenShift
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon Web Services** (**AWS**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we will focus on deploying our application to Cloud Foundry.
  prefs: []
  type: TYPE_NORMAL
- en: Cloud Foundry
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Cloud Foundry Java buildpack has excellent support for Spring Boot. We can
    deploy standalone applications based on JARs as well as the traditional Java EE
    WAR applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Cloud Foundry provides a Maven plugin to deploy applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Before we can deploy our application, we need to configure the application with
    a target and a space to deploy the application to.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the steps involved:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to create a pivotal Cloud Foundry account at: [https://account.run.pivotal.io/sign-up](https://account.run.pivotal.io/sign-up).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once we have an account, we can log in at [https://run.pivotal.io](https://run.pivotal.io)
    to create an organization and space. Have the org and space details ready as we
    need them in order to deploy the application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can update the plugin with the configuration of `org` and `space`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to log in to Cloud Foundry using the Maven plugin on command prompt
    or terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything is successful, you will see a message, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you are able to log in, you can push the application to Cloud Foundry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we execute the command, Maven will compile, run tests, build the application
    JAR or WAR, and then deploy it to the Cloud:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the application is up and running on the Cloud, we can use the URL from
    the log to launch the application: [http://springboot-for-beginners-example.cfapps.io](http://springboot-for-beginners-example.cfapps.io).'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can find more information about the Java Build Pack of Cloud Foundry at
    [https://docs.run.pivotal.io/buildpacks/java/build-tool-int.html#maven](https://docs.run.pivotal.io/buildpacks/java/build-tool-int.html#maven).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring Boot makes developing Spring-based applications easy. It enables us to
    create production-ready applications very quickly.
  prefs: []
  type: TYPE_NORMAL
- en: In this lesson, we understood the different external configuration options provided
    by Spring Boot. We looked at embedded servers and deployed a test application
    to a PaaS Cloud platform--Cloud Foundry. We explored how to monitor our application
    in the production using Spring Boot Actuator. At the end, we looked at the features
    that make a developer more productive--Spring Boot developer tools and live reload.
  prefs: []
  type: TYPE_NORMAL
- en: With this, we've come to the end of this book. I hope you'd a smooth journey
    and gained a lot of knowledge on building microservices with Spring Boot.
  prefs: []
  type: TYPE_NORMAL
- en: I wish you all the best for your future projects. Keep learning and exploring!
  prefs: []
  type: TYPE_NORMAL
- en: Assessments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ________ endpoint provides information about the operating system, JVM installation,
    classpath, system environment variable, and the values configured in various application
    properties files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following is provided by cloud to Cloud Foundry?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Software as a Service
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Platform as a Service
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Infrastructure as a Service
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the above
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'State whether True or False: Spring MVC can be extensively configured through
    `application.properties`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following actuator endpoints provides a trace of the last few requests
    serviced by the application when debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`/applications/trace`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`/application/tracing`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`/app/trace`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`/apps/tracing`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: _________ makes developing Spring-based applications easy as it enables you
    to create production-ready applications very quickly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
