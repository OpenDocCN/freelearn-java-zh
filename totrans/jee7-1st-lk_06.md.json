["```java\n    Properties prop = System.getProperties();\n    //serveurAddress is the host of you mail server\n    prop.put(\"mail.smtp.host\", serveurAddress);\n    Session session = Session.getDefaultInstance(prop,null);\n    ```", "```java\n    Message msg = new MimeMessage(session);\n    msg.setFrom(new InternetAddress(\"xxx-university@yahoo.fr\"));\n    InternetAddress[] internetAddresses = new InternetAddress[1];\n    internetAddresses[0] = new InternetAddress(\"malindaped@yahoo.fr\");\n    msg.setRecipients(Message.RecipientType.TO,internetAddresses);\n    msg.setSubject(\"Pre-inscription results\");\n    msg.setText(\"Dear Malinda, we inform you that â€¦\");\n    ```", "```java\n    Transport.send(msg);\n    ```", "```java\npublic class MailSender {\n\n  private final String userName = \"username@gmail.com\";\n  private final String userPassword = \"user_password\";    \n  private Session session;\n\n  public MailSender() {\n    Properties props = new Properties();\n    props.put(\"mail.smtp.auth\", \"true\");\n    props.put(\"mail.smtp.starttls.enable\", \"true\");\n    props.put(\"mail.smtp.host\", \"smtp.gmail.com\");\n    props.put(\"mail.smtp.port\", \"587\");\n\n    session = Session.getInstance(props, null);\n  }\n\n  public void sendMesage(String message, String toAddress) {\n    try {\n\n      Message msg = new MimeMessage(session);\n      InternetAddress[] internetAddresses =new InternetAddress[1];\n      internetAddresses[0] = new InternetAddress(toAddress);\n      msg.setRecipients(Message.RecipientType.TO, internetAddresses);\n      msg.setSubject(\"Pre-inscription results\");\n      msg.setText(message);\n\n      Transport.send(msg, userName, userPassword);\n    } catch (Exception ex) {\n      ex.printStackTrace();\n    }\n\n  }\n}\n```", "```java\npublic @interface MailSessionDefinition {\n\n  String description() default \"\";\n\n  String name();\n\n  String storeProtocol() default \"\";\n\n  String transportProtocol() default \"\";\n\n  String host() default \"\";\n  String user() default \"\";\n\n  String password() default \"\";\n\n  String from() default \"\";\n\n  String[] properties() default {};\n}\n```", "```java\n@MailSessionDefinition(\n  name = \"java:app/env/MyMailSession\",\n  transportProtocol = \"SMTP\",\n  user = \"username@gmail.com\",\n  password = \"user_password\"        \n  //...\n)\n@WebServlet(name = \"MailSenderServlet\")\npublic class MailSenderServlet extends HttpServlet {\n\n  @Resource(lookup=\"java:app/env/MyMailSession\")\n  Session session;\n\n  public void doPost(HttpServletRequest request, HttpServletResponse response)\n  throws IOException, ServletException {\n\n    //...\n  }\n}\n```", "```java\n@MailSessionDefinitions(\n        { @MailSessionDefinition(name = \"java:/en/...\"),\n        @MailSessionDefinition(name = \"java:/en/...\") }\n)\n```", "```java\nSession session = Session.getInstance(props,new javax.mail.Authenticator() {\n  protected PasswordAuthentication getPasswordAuthentication() {\n    return new PasswordAuthentication(username, password);\n    }\n});\n```", "```java\ntry {\n  javax.naming.Context ic = new InitialContext();\n  javax.resource.cci.ConnectionFactory cf =\n  (ConnectionFactory)\n  ic.lookup(\"java:comp/env/eis/ConnectionFactory\");\n  //Connection\n  javax.resource.cci.Connection ctx = cf.getConnection();\n\n  System.out.println(\"Information about the result set functionality \" + \"supported by the connected EIS : \" +ctx.getResultSetInfo());\n\n  System.out.println(\"Metadata about the connection : \" + ctx.getMetaData());\n\n  //Get object for accessing EIS functions\n  javax.resource.cci.Interaction interaction =ctx.createInteraction();\n\n  //Get record factory\n  javax.resource.cci.RecordFactory rfact = cf.getRecordFactory();\n\n  javax.resource.cci.IndexedRecord input =rfact.createIndexedRecord(\"<recordName>\");\n  javax.resource.cci.IndexedRecord output =rfact.createIndexedRecord(\"<recordName>\");\n  //Look up a preconfigured InteractionSpec\n  javax.resource.cci.InteractionSpec interSp = ... ;\n  interaction.execute(interSp, input, output);\n  int index_of_element = ...;//index of element to return\n  System.out.println(\"The result : \"+output.get(index_of_element));\n  //close\n  interaction.close();\n  ctx.close();\n} catch (Exception ex) {\n  ex.printStackTrace();\n}\n```", "```java\npublic void sendMessageAsynchronously(ConnectionFactory cfactory,Queue destination){\n  try(JMSContext context = cfactory.createContext();){\n    context.createProducer().setAsync(new Completion()).send(destination, \"Hello world\");\n  }\n}\n\nclass Completion implements CompletionListener{\n\n  public void onCompletion(Message message) {     \n    System.out.println(\"message sent successfully\");\n  }\n\n  public void onException(Message message, Exception ex) {   \n    System.out.println(ex.getMessage());\n  }\n}\n```", "```java\npublic void sendMessageWithDelay(ConnectionFactory cfactory,Queue destination){\n  try(JMSContext context = cfactory.createContext();){\n    context.createProducer().setDeliveryDelay(1000*60*60).send(destination, \"Hello world\");\n  }\n}\n```", "```java\npublic class JmsMessageListener implements MessageListener {\n\n  @Override\n  public void onMessage(Message message) {\n    try {\n      int jmsxDeliveryCount =message.getIntProperty(\"JMSXDeliveryCount\");\n      //...\n      if(jmsxDeliveryCount > 5){\n        // do something\n      }\n    } catch (JMSException ex) {\n      ex.printStackTrace();\n    }\n  }\n}\n```", "```java\n//Sending message with JMS 1.1\npublic void sendMessageJMSWithOldAPI(ConnectionFactory connectionFactory, Queue destination) throws JMSException {\n Connection connection = connectionFactory.createConnection();\n try {\n     Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n     MessageProducer messageProducer = session.createProducer(destination);\n     TextMessage textMessage = session.createTextMessage(\"Message send with the old API\");\n     messageProducer.send(textMessage);\n  } finally {\n    connection.close();\n  }\n}\n\n//Sending message with JMS 2.0\npublic void sendMessageJMSWithNewdAPI(ConnectionFactory connectionFactory, Queue destination) {\n     try (JMSContext context = connectionFactory.createContext();) {\n        context.createProducer().send(destination, \"Message send with the new API\");\n   }\n}\n```", "```java\n@Path(\"students\")\n@Stateless\n@Produces({MediaType.APPLICATION_JSON})\npublic class StudentInformation {\n\n  @PersistenceContext(unitName = \"integrationPU\")\n  private EntityManager em;\n\n  @GET\n  @Path(\"getListOfStudents\")\n  public List<Student> getListOfStudents(){\n    TypedQuery<Student> query = em.createQuery(\"SELECT s FROM Student s\", Student.class);\n    return query.getResultList();\n  }\n} }\n```", "```java\nString baseURI =\"http://localhost:8080/chapter06EISintegration-web\";\nClient client = ClientBuilder.newClient();\nWebTarget target = client.target(baseURI+\"/rs-resources/students/getListOfStudents\");      \nGenericType<List<Student>> list = new GenericType<List<Student>>() {};\nList<Student> students =target.request(MediaType.APPLICATION_JSON).get(list);\n```", "```java\npublic class AppAsynchronousRestfulClient {\n\n  public static void main(String[] args) {    \n  String baseURI =\"http://localhost:8080/chapter06EISintegration-web\";\n  String location = \"/rs-resources\";\n  String method = \"/students/getListOfAllStudentsAs\";\n  Client client = ClientBuilder.newClient();\n  WebTarget target =\n    (WebTarget) client.target(baseURI+location+method);\n  System.out.println(\"Before response : \"+new Date());\n  Future<String> response = target.request(MediaType.APPLICATION_JSON).async().get(String.class);            \n\n  new PassiveWaiting(response).start();   \n\n  System.out.println(\"After PassiveWaiting : \"+new Date());\n  }\n\n  static class PassiveWaiting extends Thread {\n    Future<String> response;\n\n    public PassiveWaiting(Future<String> response){\n      this.response = response;\n    }\n\n    public void run(){\n      try{\n        System.out.println(\"response :\"+response.get()+\", time : \"+new Date());\n      }catch(Exception ex){\n        ex.printStackTrace();\n      }\n    }\n  }\n}\n```", "```java\n@GET\n@Path(\"getListOfAllStudentsAs\")\npublic List<Student> getListOfAllStudentsAs() {\n  try{\n    Thread.sleep(20*1000);//20 seconds\n  }catch(Exception ex){}\n  TypedQuery<Student> query = em.createQuery(\"SELECT s FROM Student s\", Student.class);\n  return query.getResultList();\n}\n```", "```java\n@Path(\"students\")\n@Stateless\n@Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\npublic class StudentInformation {\n\n  @PersistenceContext(unitName = \"integrationPU\")\n  private EntityManager em;\n\n  @Resource(lookup =\"java:comp/DefaultManagedScheduledExecutorService\")\n  ManagedExecutorService taskExecutor;\n\n  @GET\n  @Path(\"getListOfAllStudentsAs2\")\n  public void getListOfAllStudentsAs2(final @Suspended AsyncResponse response) {\n      System.out.println(\"before time : \"+new Date());\n      taskExecutor.submit(\n      new Runnable() {\n        public void run() {\n          String queryString = \"SELECT s FROM Student sWHERE 1 = 1\";\n          TypedQuery<Student> query = em.createQuery(queryString, Student.class);\n\n          List<Student> studentList = query.getResultList();\n          try {\n            Thread.sleep(10 * 1000);//1 second\n          } catch (Exception ex) {\n          }\n          response.resume(studentList);\n        }\n      });\n    System.out.println(\"After time : \"+new Date());\n  }\n}\n```", "```java\n@Provider\npublic class MyJaxRsRequestFilter implements ContainerRequestFilter {\n\n  @Override\n  public void filter(ContainerRequestContext crq) {\n    //        If the user has not been authenticated\n    if(crq.getSecurityContext().getUserPrincipal() == null)\n      throw new WebApplicationException(Status.UNAUTHORIZED);\n\n      List<MediaType> supportedMedia =crq.getAcceptableMediaTypes();\n    if(\"GET\".equals(crq.getMethod()) &&!supportedMedia.contains(MediaType.APPLICATION_JSON_TYPE))\n      throw new WebApplicationException(Status.UNSUPPORTED_MEDIA_TYPE);\n\n      //      external users must only access student methods\n      String path = crq.getUriInfo().getPath();\n    if(!path.startsWith(\"/students\"))\n      throw new WebApplicationException(Status.FORBIDDEN);\n\n      List<String> encoding = crq.getHeaders().get(\"accept-encoding\");  \n      //   If the client does not support the gzip compression\n    if(!encoding.toString().contains(\"gzip\"))\n      throw new WebApplicationException(Status.EXPECTATION_FAILED);            \n  }\n}\n```", "```java\n@ZipResult\n@Provider\npublic class MyGzipWriterJaxRsInterceptor implements WriterInterceptor{  \n\n    @Override\n    public void aroundWriteTo(WriterInterceptorContext wic) throws IOException {        \n        try (GZIPOutputStream gzipStream = new GZIPOutputStream(wic.getOutputStream());) {\n            wic.setOutputStream(gzipStream);   \n            wic.proceed();\n        }        \n    }\n}\n```", "```java\n@GET\n@ZipResult\n@Path(\"getListOfAllStudentsGzip\")\npublic List<Student> getListOfAllStudentsGzip() {        \n  TypedQuery<Student> query = em.createQuery(\"SELECT s FROM Student s\", Student.class);       \n  return query.getResultList();\n}\n```", "```java\n@NameBinding\n@Target({ ElementType.TYPE, ElementType.METHOD })\n@Retention(value = RetentionPolicy.RUNTIME)\npublic @interface ZipResult {}\n```", "```java\npublic class MyGzipReaderJaxRsInterceptor implements ReaderInterceptor {\n    @Override\n    public Object aroundReadFrom(ReaderInterceptorContext context) throws IOException {           \n        try (InputStream inputStream = context.getInputStream();) {\n            context.setInputStream(new GZIPInputStream(inputStream));\n            return context.proceed();            \n        }       \n    }    \n}\n```", "```java\npublic static void main(String[] args) throws IOException {\n  String baseURI = \"http://localhost:8080/chapter06EISintegration-web\";\n  String location = \"/rs-resources\";\n  String method = \"/students/getListOfAllStudentsGzip\";\n  //client creation and registration of the interceptor/filter\n  Client client = ClientBuilder.newClient().register(MyGzipReaderJaxRsInterceptor.class);\n  WebTarget target = (WebTarget)client.target(baseURI + location + method);\n  System.out.println(\"response : \" + target.request(MediaType.APPLICATION_JSON).get(String.class));        \n}\n```"]