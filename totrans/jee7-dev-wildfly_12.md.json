["```java\n@Singleton\n@Startup\n@ConcurrencyManagement(ConcurrencyManagementType.BEAN)\n@Path(\"/external\")\n@Produces(MediaType.TEXT_PLAIN)\npublic class PendingSeats {\n\n    private final Queue<Integer> seats = \n                               new ConcurrentLinkedQueue<>();\n\n    @PostConstruct\n    private void setUp() {\n        for (int i = 5; i < 10; i++) {\n            seats.add(i);\n        }\n    }\n\n @GET\n    public Integer getNextSeat() {\n return seats.poll();\n    }\n}\n```", "```java\n5 to 9, and on every GET request, it will provide the ID as the output. When all IDs are emitted, a null value will be returned. This endpoint will serve as a model of a reservation system. For simplicity, it produces plaintext values instead of JSON. Of course, a flat file or any other source of data could also be used for integration.\n```", "```java\npackage com.packtpub.wflydevelopment.chapter12.batching;\n\nimport java.io.Serializable;\nimport javax.batch.api.chunk.AbstractItemReader;\nimport javax.inject.Named;\nimport javax.ws.rs.client.Client;\nimport javax.ws.rs.client.ClientBuilder;\nimport javax.ws.rs.client.WebTarget;\n\n@Named\npublic class ExternalSystemReader extends AbstractItemReader {\n\n    private WebTarget target;\n\n    @Override\n    public void open(Serializable checkpoint) throws Exception {\n        final Client restclient = ClientBuilder.newClient();\n        this.target = restclient.target(\"http://localhost:8080/ticket-agency-longterm/rest/external\");\n    }\n\n    @Override\n    public Object readItem() throws Exception {\n        return target.request().get(String.class);\n    }\n}\n```", "```java\npackage com.packtpub.wflydevelopment.chapter12.batching;\n\nimport javax.batch.api.chunk.ItemProcessor;\nimport javax.inject.Inject;\nimport javax.inject.Named;\nimport com.packtpub.wflydevelopment.chapter12.control.SeatDao;\nimport com.packtpub.wflydevelopment.chapter12.entity.Seat;\n\n@Named\npublic class SeatProcessor implements ItemProcessor {\n\n @Inject\n private SeatDao dao;\n\n    @Override\n    public Object processItem(Object id) throws Exception {\n        Seat seat = dao.find(Long.parseLong((String) id));\n        if (seat != null) {\n            if (seat.getBooked() == true) {\n                return null;\n            }\n            seat.setBooked(true);\n        }\n        return seat;\n    }\n}\n```", "```java\npackage com.packtpub.wflydevelopment.chapter12.batching;\n\nimport javax.batch.api.chunk.AbstractItemWriter;\nimport javax.batch.runtime.context.JobContext;\nimport javax.inject.Inject;\nimport javax.inject.Named;\nimport javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n\n@Named\npublic class SeatWriter extends AbstractItemWriter {\n\n    public static final String FILENAME_PARAM = \"logFile\";\n\n @Inject\n private JobContext jobContext;\n\n    @PersistenceContext\n    private EntityManager em;\n\n    private BufferedWriter writer;\n\n    @Override\n    public void open(Serializable ckpt) throws Exception {\n        Properties jobProperties = jobContext.getProperties();\n        String fileName = jobProperties.getProperty(FILENAME_PARAM);\n\n        writer = new BufferedWriter(new FileWriter(fileName));\n        writer.write(\"Importing...\");\n        writer.newLine();\n    }\n\n    @Override\n public void writeItems(List<Object> items) throws Exception {\n        writer.write(\"Chunk size: \" + items.size());\n        writer.newLine();\n\n        for (Object obj : items) {\n            em.persist(obj);\n            writer.write(\"Persisted: \" + obj);\n            writer.newLine();\n        }\n    }\n\n    @Override\n    public void close() throws Exception {\n        writer.write(\"Import finished\");\n        writer.newLine();\n        writer.close();\n    }\n}\n```", "```java\n<job id=\"externalSystem\" \n    version=\"1.0\"> [1]\n    <properties>\n        <property name=\"logFile\" value=\"log.txt\" /> [2]\n    </properties>\n    <step id=\"processData\">\n        <chunk item-count=\"2\"> [3]\n            <reader ref=\"externalSystemReader\" /> [4]\n            <processor ref=\"seatProcessor\" />\n            <writer ref=\"seatWriter\" />\n        </chunk>\n    </step>\n</job>\n```", "```java\npackage com.packtpub.wflydevelopment.chapter12.batching;\n\nimport java.util.Properties;\nimport javax.batch.runtime.BatchRuntime;\nimport javax.ejb.Stateless;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\n\n@Stateless\n@Path(\"/job\")\npublic class JobStarter {\n\n    @GET\n    public String start() {\n long jobId = BatchRuntime.getJobOperator()\n .start(\"externalSystem\", new Properties());\n        return Long.toString(jobId);\n    }\n}\n```", "```java\nJobOperator operator = BatchRuntime.getJobOperator();\nProperties properties = new Properties();\nproperties.put(\"propertyName\", \"propertyValue\");\n\nlong jobId = operator.start(\"externalSystem\", properties);\n\nJobExecution execution = operator.getJobExecution(jobId);\nProperties jobParameters = execution.getJobParameters();\n```", "```java\nImporting...\nChunk size: 2\nPersisted: Seat [id=5, booked=true, seatType=com.packtpub.wflydevelopment.chapter12.entity.SeatType@a55bb6e]\nPersisted: Seat [id=6, booked=true, seatType=com.packtpub.wflydevelopment.chapter12.entity.SeatType@a55bb6e]\nChunk size: 2\nPersisted: Seat [id=7, booked=true, seatType=com.packtpub.wflydevelopment.chapter12.entity.SeatType@440a007]\nPersisted: Seat [id=8, booked=true, seatType=com.packtpub.wflydevelopment.chapter12.entity.SeatType@440a007]\nChunk size: 1\nPersisted: Seat [id=9, booked=true, seatType=com.packtpub.wflydevelopment.chapter12.entity.SeatType@307124b7]\nImport finished\n\n```", "```java\n@Named\npublic class BitcoinTask extends AbstractBatchlet { \n\n    private static final String EXTERNAL_API = \"https://api.bitcoinaverage.com/exchanges/USD\";\n    public static final String FILENAME_PARAM = \"bitcoinFile\";\n\n    @Inject\n    private SeatTypeDao seatTypeDao;\n\n    @Inject\n    private JobContext jobContext;\n\n    @Override\n    public String process() throws Exception { // [1]\n        WebTarget api = ClientBuilder.newClient().target(EXTERNAL_API);\n        Response response = api.request().get();\n JsonObject entity = response.readEntity(JsonObject.class); // [2]\n\n        double averageValue = entity.getJsonObject(\"btce\").getJsonObject(\"rates\").getJsonNumber(\"bid\").doubleValue(); \n\n        Map<SeatType, Double> pricesInBitcoins = calculeteBitcoinPrices(averageValue, seatTypeDao.findAll()); // [3]\n\n writeToFile(pricesInBitcoins); // [4]\n\n        return \"OK\";\n    }\n\n    private Map<SeatType, Double> calculeteBitcoinPrices(double averageValue, List<SeatType> findAll) {\n        return findAll.stream().collect(\n                Collectors.toMap(seatType -> seatType, seatType -> seatType.getPrice() / averageValue));\n    }\n\n    private void writeToFile(Map<SeatType, Double> pricesInBitcoins) throws Exception {\n Properties jobProperties = jobContext.getProperties(); // [5]\n        String fileName = jobProperties.getProperty(FILENAME_PARAM);\n        try (BufferedWriter writer = new BufferedWriter(new FileWriter(fileName))) {\n            writer.write(pricesInBitcoins.toString());\n            writer.newLine();\n        }\n    }\n}\n```", "```java\n<job id=\"externalSystem\" \n    version=\"1.0\">\n    <properties>\n        <property name=\"logFile\" value=\"log.txt\" />\n        <property name=\"bitcoinFile\" value=\"bitcoins.txt\" /> [1]\n    </properties>\n    <step id=\"processData\" next=\"checkBitcoins\"> [2]\n        <chunk item-count=\"2\">\n            <reader ref=\"externalSystemReader\" />\n            <processor ref=\"seatProcessor\" />\n            <writer ref=\"seatWriter\" />\n        </chunk>\n    </step>\n    <step id=\"checkBitcoins\"> [3]\n        <batchlet ref=\"bitcoinTask\" />\n    </step>\n</job>\n```", "```java\n@Resource\nprivate ManagedExecutorService executorService;\n\n@Resource\nprivate ManagedScheduledExecutorService scheduledExecutorService;\n\n@Resource\nprivate ContextService contextService;\n```", "```java\n<subsystem >\n    <spec-descriptor-property-replacement>false</spec-descriptor-property-replacement>\n    <concurrent>\n        (…)\n        <managed-executor-services>\n            <managed-executor-service name=\"default\" jndi-name=\"java:jboss/ee/concurrency/executor/default\" context-service=\"default\" hung-task-threshold=\"60000\" core-threads=\"5\" max-threads=\"25\" keepalive-time=\"5000\"/>\n        </managed-executor-services>\n        (…)\n    </concurrent>\n</subsystem>\n```", "```java\npackage com.packtpub.wflydevelopment.chapter12.external;\n\nimport java.util.concurrent.Callable;\nimport javax.enterprise.concurrent.ManagedTask;\nimport javax.enterprise.concurrent.ManagedTaskListener;\nimport javax.enterprise.inject.Instance;\n\npublic class GenerateSeatRequestFromArtificial implements Callable<List<Integer>>, ManagedTask [1] {\n\n    @Inject\n    private Logger logger;\n\n @Inject\n private Instance<TaskListener> taskListener; [2]\n\n    @Override\n    public ManagedTaskListener getManagedTaskListener() {\n        return taskListener.get(); [3]\n    }\n\n    @Override \n    public Map<String, String> getExecutionProperties() {\n return new HashMap<>(); [4]\n    }\n\n    @Override\n    public List<Integer> call() throws Exception {\n        logger.info(\"Sleeping...\");\n Thread.sleep(5000); [5]\n        logger.info(\"Finished sleeping!\");\n\n        return Arrays.asList(4, 5, 6);\n    }\n}\n```", "```java\npublic class TaskListener implements ManagedTaskListener {\n\n    @Inject\n    private Logger logger;\n\n    @Override\n    public void taskSubmitted(Future<?> future, ManagedExecutorService executor, Object task) {\n        logger.info(\"Submitted \" + task);\n    }\n\n    @Override\n    public void taskAborted(Future<?> future, ManagedExecutorService executor, Object task, Throwable exception) {\n        logger.log(Level.WARNING, \"Aborted\", exception);\n    }\n\n    @Override\n    public void taskDone(Future<?> future, ManagedExecutorService executor, Object task, Throwable exception) {\n        logger.info(\"Finished task \" + task);\n    }\n\n    @Override\n    public void taskStarting(Future<?> future, ManagedExecutorService executor, Object task) {\n        logger.info(\"Starting \" + task);\n    }\n}\n```", "```java\npublic class GenerateSeatRequestsFromDatabase implements Callable<List<Integer>> {\n\n    private static final int SEATS_TO_RETURN = 3;\n\n    @Inject\n private SeatDao dao; // [1]\n\n    @Inject\n    private Logger logger;\n\n    @Override\n    public List<Integer> call() throws Exception {\n        logger.info(\"Sleeping...\");\n Thread.sleep(5000); // [4]\n        logger.info(\"Finished sleeping!\");\n\n List<Seat> databaseSeats = dao.findAll(); // [2]\n\n List<Integer> freeSeats = databaseSeats.stream()\n .filter(seat -> !seat.getBooked())\n .limit(SEATS_TO_RETURN)\n .map(seat -> seat.getId().intValue())\n .collect(Collectors.toList()); // [3]\n\n        if (freeSeats.isEmpty()) {\n            logger.info(\"No seats to book\");\n        } else {\n            logger.info(\"Requesting booking for \" + freeSeats);\n        }\n        return freeSeats;\n    }\n}\n```", "```java\npackage com.packtpub.wflydevelopment.chapter12.external;\n\n@Singleton\n@Startup\npublic class PendingSeats {\n\n    private final Queue<Long> seats = \n                                new ConcurrentLinkedQueue< >();\n\n @Resource\n private ManagedExecutorService executorService; // [1]\n\n @Inject  // [2]\n private Instance<GenerateSeatRequestsFromDatabase> databaseCollector; \n\n @Inject\n private Instance<GenerateSeatRequestFromArtificial> artificalCollector;\n\n    @Inject\n    private Logger logger;\n\n    @PostConstruct\n    private void setUp() {\n        try {\n List<Future<List<Integer>>> futures = executorService.invokeAll(Arrays.asList(\n databaseCollector.get(), artificalCollector.get()\n)); // [3]\n\n List<Integer> requestedIds = futures.stream().flatMap(future -> get(future).stream()).distinct()\n .collect(Collectors.toList()); // [4]\n\n            logger.info(requestedIds.toString());\n        } catch (InterruptedException e) {\n            logger.log(Level.SEVERE, e.getMessage(), e);\n        }\n\n    }\n\n    private List<Integer> get(Future<List<Integer>> future) {\n        try {\n            return future.get();\n        } catch (InterruptedException | ExecutionException e) {\n            logger.log(Level.SEVERE, e.getMessage(), e);\n            return new ArrayList<>();\n        }\n    }\n}\n```", "```java\n@Startup\npublic class DatabaseInitializer {\n\n    @PersistenceContext\n    private EntityManager em;\n\n    @PostConstruct\n    public void setup() {\n        SeatType seatType = new SeatType();\n        seatType.setPosition(SeatPosition.BALCONY);\n        seatType.setDescription(\"Test Data\");\n        seatType.setQuantity(10);\n        seatType.setPrice(10);\n        em.persist(seatType);\n\n        Seat seat = new Seat();\n        seat.setSeatType(seatType);\n        em.persist(seat);\n\n    }\n}\n```", "```java\n23:42:48,455 INFO  [TaskListener] (ServerService Thread Pool -- 54) Submitted GenerateSeatRequestFromArtificial@4256cb0c\n23:42:48,456 INFO  [GenerateSeatRequestsFromDatabase] (EE-ManagedExecutorService-default-Thread-1) Sleeping... (1)\n23:42:48,456 INFO  [TaskListener] (EE-ManagedExecutorService-default-Thread-2) Starting GenerateSeatRequestFromArtificial@4256cb0c\n23:42:48,456 INFO  [GenerateSeatRequestFromArtificial] (EE-ManagedExecutorService-default-Thread-2) Sleeping... (2)\n23:42:53,457 INFO  [GenerateSeatRequestsFromDatabase] (EE-ManagedExecutorService-default-Thread-1) Finished sleeping!\n23:42:53,461 INFO  [GenerateSeatRequestFromArtificial] (EE-ManagedExecutorService-default-Thread-2) Finished sleeping!\n23:42:53,461 INFO  [TaskListener] (EE-ManagedExecutorService-default-Thread-2) Finished task GenerateSeatRequestFromArtificial@4256cb0c\n23:42:53,617 INFO  [GenerateSeatRequestsFromDatabase] (EE-ManagedExecutorService-default-Thread-1) Requesting booking for [1]\n23:42:53,621 INFO  [PendingSeats] (ServerService Thread Pool -- 54) [1, 4, 5, 6] (3)\n\n```"]