["```java\nList<ProductId> query(String query); \nProductInformation byId(ProductId id);\n\n```", "```java\nOrderId placeOrder(Order order);\n\n```", "```java\npackage packt.java9.by.example.mybusiness.productinformation; \n\nimport ... \n\n@RestController \npublic class ProductInformationController { \n\n    @Autowired \n    ProductLookup lookup; \n\n    @RequestMapping(\"/pi/{productId}\") \n    public ProductInformation \n           getProductInformation(@PathVariable String productId) { \n        ProductInformation productInformation = \n                                lookup.byId(productId); \n        return productInformation; \n    } \n\n    @RequestMapping(\"/query/{query}\") \n    public List<String> lookupProductByTitle(@PathVariable String query, HttpServletRequest request) { \n        //to be developed later \n    } \n}\n\n```", "```java\n{\"id\":\"125\",\"title\":\"Bar Stool\",\"description\":\"another furniture\",\"size\":[20.0,2.0,18.0],\"weight\":300.0}\n\n```", "```java\nError starting ApplicationContext. To display the auto-configuration report re-run your application with 'debug' enabled. \n2016-11-03 07:25:01.217 ERROR 51907 --- [  restartedMain] o.s.b.d.LoggingFailureAnalysisReporter   :  \n\n*************************** \nAPPLICATION FAILED TO START \n*************************** \n\nDescription: \n\nParameter 0 of constructor in packt.java9.by.example.mybusiness.productinformation.ProductInformationController required a single bean, but 2 were found: \n        - resourceBasedProductLookup: defined in file [/.../sources/ch07/productinformation/build/classes/main/packt/java9/by/example/mybusiness/productinformation/lookup/ResourceBasedProductLookup.class] \n        - restClientProductLookup: defined in file [/.../sources/ch07/productinformation/build/classes/main/packt/java9/by/example/mybusiness/productinformation/lookup/RestClientProductLookup.class] \n\nAction: \n\nConsider marking one of the beans as @Primary, updating the consumer to accept multiple beans, or using @Qualifier to identify the bean that should be consumed\n\n```", "```java\n    $ gradle -Dspring.profiles.active=local bootRun\n\n```", "```java\npackage packt.java9.by.example.mybusiness.productinformation; \nimport ... \n@Configuration \n@Profile(\"local\") \npublic class SpringConfigurationLocal { \n    @Bean \n    @Primary \n    public ProductLookup productLookup() { \n        return new ResourceBasedProductLookup(); \n    } \n    @Bean \n    public ProductInformationServiceUrlBuilder urlBuilder(){ \n        return null; \n    } \n}\n\n```", "```java\n@Configuration \n@Profile(\"production\") \npublic class SpringConfiguration { \n\n    @Bean \n    @Primary \n    public ProductLookup productLookup() { \n        return new RestClientProductLookup(urlBuilder()); \n    } \n\n    @Bean \n    public ProductInformationServiceUrlBuilder urlBuilder(){ \n        return new ProductInformationServiceUrlBuilder( \n                                         \"http://localhost\"); \n    } \n}\n\n```", "```java\nnew ProductInformationServiceUrlBuilder(\"http://localhost\");\n\n```", "```java\npackage packt.java9.by.example.mybusiness.productinformation; \n\npublic class ProductInformationServiceUrlBuilder { \n    private final String baseUrl; \n\n    public ProductInformationServiceUrlBuilder(String baseUrl) { \n        this.baseUrl = baseUrl; \n    } \n\n    public String url(String service, String parameter) { \n        final String serviceUrl; \n        switch (service) { \n            case \"pi\": \n                serviceUrl =  \n                  baseUrl + \":8081/product/{id}\"; \n                break; \n            case \"query\": \n                serviceUrl =  \n                  baseUrl + \":8081/query/{query}\"; \n                break; \n            case \"inventory\": \n                serviceUrl =  \n                  baseUrl + \":8083/inventory/{id}\"; \n                break; \n            default: \n                serviceUrl = null; \n                break; \n        } \n        return serviceUrl; \n    } \n}\n\n```", "```java\npackage packt.java9.by.example.mybusiness.productinformation; \nimport java.util.List; \npublic interface ProductLookup { \n    ProductInformation byId(String id); \n    List<String> byQuery(String query); \n}\n\n```", "```java\npackage packt.java9.by.example.mybusiness.productinformation.lookup; \nimport... \n\n@Service \npublic class ResourceBasedProductLookup implements ProductLookup { \n    private static Logger log = LoggerFactory.getLogger(ResourceBasedProductLookup.class);\n\n```", "```java\n    private ProductInformation \n                  fromProperties(Properties properties) { \n        final ProductInformation pi = new ProductInformation(); \n        pi.setTitle(properties.getProperty(\"title\")); \n        pi.setDescription(properties.getProperty(\"description\")); \n        pi.setWeight( \n           Double.parseDouble(properties.getProperty(\"weight\"))); \n        pi.getSize()[0] = \n           Double.parseDouble(properties.getProperty(\"width\")); \n        pi.getSize()[1] =  \n           Double.parseDouble(properties.getProperty(\"height\")); \n        pi.getSize()[2] =  \n           Double.parseDouble(properties.getProperty(\"depth\")); \n        return pi; \n    }\n\n```", "```java\nkey=value\n\n```", "```java\nid=123 \ntitle=Book Java 9 by Example \ndescription=a new book to learn Java 9 \nweight=300 \nwidth=20 \nheight=2 \ndepth=18\n\n```", "```java\n    final private Map<String, ProductInformation> \n                            products = new HashMap<>();\n\n```", "```java\n    private boolean productsAreNotLoaded = true;\n\n```", "```java\n    private void loadProducts() { \n        if (productsAreNotLoaded) { \n            try { \n                Resource[] resources = \n                   new PathMatchingResourcePatternResolver() \n                            .getResources( \n                               \"classpath:products/*.properties\"); \n                for (Resource resource : resources) { \n                    loadResource(resource); \n                    } \n                } \n                productsAreNotLoaded = false; \n            } catch (IOException ex) { \n                log.error(\"Test resources can not be read\",ex); \n            } \n        } \n    }\n\n```", "```java\nprivate void loadResource(Resource resource) throws IOException { \n    final int dotPos = resource.getFilename().lastIndexOf('.'); \n    final String id = resource.getFilename().substring(0, dotPos); \n    Properties properties = new Properties(); \n    properties.load(resource.getInputStream()); \n    final ProductInformation pi = fromProperties(properties); \n    pi.setId(id); \n    products.put(id, pi); \n}\n\n```", "```java\n    private static final List<String> noProducts = \n                                            new LinkedList<>();\n\n```", "```java\n@Override \npublic ProductInformation byId(String id) { \n    loadProducts(); \n    if (products.containsKey(id)) { \n        return products.get(id); \n    } else { \n        return ProductInformation.emptyProductInformation; \n    } \n}\n\n```", "```java\n@Override \npublic List<String> byQuery(String query) { \n    loadProducts(); \n    List<String> pis = new LinkedList<>(); \n    StringTokenizer st = new StringTokenizer(query, \"&=\"); \n    while (st.hasMoreTokens()) { \n        final String key = st.nextToken(); \n        if (st.hasMoreTokens()) { \n            final String value = st.nextToken(); \n            log.debug(\"processing {}={} query\", key, value); \n            if (!\"title\".equals(key)) { \n                return noProducts; \n            } \n            for (String id : products.keySet()) { \n                ProductInformation pi = products.get(id); \n                if (pi.getTitle().startsWith(value)) { \n                    pis.add(id); \n                } \n            } \n        } \n    } \n    return pis; \n}\n\n```", "```java\npackage packt.java9.by.example.mybusiness.productinformation.lookup; \n\nimport ... \n\n@Component \npublic class RestClientProductLookup implements ProductLookup { \n    private static Logger log = LoggerFactory.getLogger(RestClientProductLookup.class); \n\n    final private ProductInformationServiceUrlBuilder piSUBuilder; \n\n    public RestClientProductLookup( \n               ProductInformationServiceUrlBuilder piSUBuilder) { \n        this.piSUBuilder = piSUBuilder; \n    }\n\n```", "```java\n    @Override \n    public ProductInformation byId(String id) { \n        Map<String, String> uriParameters = new HashMap<>(); \n        uriParameters.put(\"id\", id); \n        RestTemplate rest = new RestTemplate(); \n        InventoryItemAmount amount = rest.getForObject( \n                        piSUBuilder.url(\"inventory\"), \n                        InventoryItemAmount.class, \n                        uriParameters); \n        if ( amount.getAmount() > 0) { \n            return rest.getForObject(piSUBuilder.url(\"pi\"), \n                    ProductInformation.class, \n                    uriParameters); \n        } else { \n            return ProductInformation.emptyProductInformation; \n        } \n    }\n\n```", "```java\n    @Override \n    public List<String> byQuery(String query) { \n        Map<String, String> uriParameters = new HashMap<>(); \n        uriParameters.put(\"query\", query); \n        RestTemplate rest = new RestTemplate(); \n        return rest.getForObject( \n                  piSUBuilder.url(\"query\"), \n                  List.class, \n                  uriParameters); \n    } \n}\n\n```", "```java\npackage packt.java9.by.example.mybusiness.productinformation; \nimport ... \n@SpringBootApplication( \n        scanBasePackageClasses = \n          packt.java9.by.example.mybusiness.SpringScanBase.class) \npublic class Application { \n    public static void main(String[] args) { \n        SpringApplication.run(Application.class, args); \n    } \n}\n\n```", "```java\nbuildscript { \n    repositories { \n        mavenCentral() \n    } \n    dependencies { \n        classpath(\"org.springframework.boot:spring-boot-gradle-plugin:1.4.1.RELEASE\") \n    } \n} \n\napply plugin: 'java' \napply plugin: 'eclipse' \napply plugin: 'idea' \napply plugin: 'spring-boot' \n\njar { \n    baseName = 'packt-ch07-microservice' \n    version =  '1.0.0' \n} \n\nrepositories { \n    mavenCentral() \n} \n\nbootRun { \n    systemProperties System.properties \n} \n\nsourceCompatibility = 1.9 \ntargetCompatibility = 1.9 \n\ndependencies { \n    compile(\"org.springframework.boot:spring-boot-starter-web\") \n    compile(\"org.springframework.boot:spring-boot-devtools\") \n    compile(\"org.springframework:spring-aop\") \n    compile(\"org.springframework:spring-aspects\") \n    testCompile(\"org.springframework.boot:spring-boot-starter-test\") \n}\n\n```", "```java\n    gradle -Dspring.profiles.active=production bootRun\n\n```", "```java\npackage packt.java9.by.example.mybusiness.productinformation; \nimport ...  \n@RunWith(SpringRunner.class) \n@SpringBootTest(classes = Application.class) \n@AutoConfigureMockMvc \n@ActiveProfiles(\"local\") \npublic class ProductInformationControllerTest { \n    @Autowired \n    private MockMvc mockMvc; \n    @Test \n    public void noParamGreetingShouldReturnDefaultMessage()  \n                                             throws Exception { \n        this.mockMvc.perform(get(\"/pi\")).andDo(print()) \n                .andExpect(status().isNotFound()); \n    } \n    @Test \n    public void paramGreetingShouldReturnTailoredMessage() \n                                             throws Exception { \n\n        this.mockMvc.perform(get(\"/pi/123\")) \n                .andDo(print()).andExpect(status().isOk()) \n                .andExpect(jsonPath(\"$.title\") \n                .value(\"Book Java 9 by Example\")); \n    } \n\n}\n\n```", "```java\n    gradle -Dspring.profiles.active=production bootRun\n\n```", "```java\n{\"id\":\"\",\"title\":\"\",\"description\":\"\",\"size\":[0.0,0.0,0.0],\"weight\":0.0}\n\n```", "```java\npackage packt.java9.by.example.mybusiness.productinformation.auth; \n\nimport ... \n\n@Component \npublic class AuthFilter implements Filter { \n    private static Logger log = \n           LoggerFactory.getLogger(AuthFilter.class); \n    public static final int NOT_AUTHORIZED = 401; \n\n    @Override \n    public void init(FilterConfig filterConfig) \n                                throws ServletException { \n    } \n    @Override \n    public void doFilter(ServletRequest request, \n                         ServletResponse response, \n                         FilterChain chain) \n                          throws IOException, ServletException { \n        HttpServletRequest httpRequest = \n                     (HttpServletRequest) request; \n        final String secret = \n                     httpRequest.getHeader(\"X-PartnerSecret\"); \n        log.info(\"Partner secret is {}\", secret); \n        if (\"packt\".equals(secret)) { \n            chain.doFilter(request, response); \n        } else { \n            HttpServletResponse httpResponse = \n                     (HttpServletResponse) response; \n            httpResponse.sendError(NOT_AUTHORIZED); \n        } \n    } \n    @Override \n    public void destroy() { \n    } \n}\n\n```", "```java\npackage packt.java9.by.example.mybusiness.productinformation; \n\nimport ... \n\n@Configuration \n@Aspect \npublic class SpringConfigurationAspect { \n    private static Logger log = \n              LoggerFactory.getLogger(\"AUDIT_LOG\"); \n\n    @Around(\"execution(* byId(..))\") \n    public ProductInformation byIdQueryLogging( \n                            ProceedingJoinPoint jp) \n                                         throws Throwable { \n        log.info(\"byId query is about to run\"); \n        ProductInformation pi = \n             (ProductInformation) jp.proceed(jp.getArgs()); \n        log.info(\"byId query was executed\"); \n        return pi; \n    } \n\n    @Around(\"execution(* url(..))\") \n    public String urlCreationLogging(ProceedingJoinPoint jp) \n                                            throws Throwable { \n        log.info(\"url is to be created\"); \n        String url = (String) jp.proceed(jp.getArgs()); \n        log.info(\"url created was \"+url); \n        return url; \n    } \n}\n\n```", "```java\nexecution(modifiers-pattern? ret-type-pattern declaring-type-pattern?name-pattern(param-pattern) throws-pattern?)\n\n```", "```java\nexecution(public * *(..))\n\n```", "```java\nexecution(* set*(..))\n\n```", "```java\n@Pointcut(\"execution(* packt.java.9.by.example.service.*.*(..))\")  \npublic void businessService() {}\n\n```", "```java\n@After(\"businessService()\")\n\n```", "```java\npublic Object invoke(Object target, Method m, Object[] args)\n\n```", "```java\n    gradle -Dspring.profiles.active=production bootRun\n\n```", "```java\n    2016-11-10 19:14:09.559  INFO 74643 --- [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring FrameworkServlet 'dispatcherServlet'\n2016-11-10 19:14:09.567  INFO 74643 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : FrameworkServlet 'dispatcherServlet': initialization started\n2016-11-10 19:14:09.626  INFO 74643 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : FrameworkServlet 'dispatcherServlet': initialization completed in 59 ms\n2016-11-10 19:14:09.629  INFO 74643 --- [nio-8080-exec-1] p.j.b.e.m.p.auth.AuthFilter              : Partner secret is packt\n2016-11-10 19:14:09.655  INFO 74643 --- [nio-8080-exec-1] AUDIT_LOG                                : byId query is about to run\n2016-11-10 19:14:09.666  INFO 74643 --- [nio-8080-exec-1] AUDIT_LOG                                : url is to be created\n2016-11-10 19:14:09.691  INFO 74643 --- [nio-8080-exec-1] AUDIT_LOG                                : url created was http://localhost:8083/inventory/{id}\n2016-11-10 19:14:09.715  INFO 74643 --- [nio-8080-exec-1] p.j.b.e.m.p.l.RestClientProductLookup    : amount {id: 123, amount: 100}.\n2016-11-10 19:14:09.716  INFO 74643 --- [nio-8080-exec-1] p.j.b.e.m.p.l.RestClientProductLookup    : There items from 123\\. We are offering\n2016-11-10 19:14:09.716  INFO 74643 --- [nio-8080-exec-1] AUDIT_LOG                                : url is to be created\n2016-11-10 19:14:09.716  INFO 74643 --- [nio-8080-exec-1] AUDIT_LOG                                : url created was http://localhost:8081/product/{id}\n2016-11-10 19:14:09.725  INFO 74643 --- [nio-8080-exec-1] AUDIT_LOG                                : byId query was executed\n\n```"]