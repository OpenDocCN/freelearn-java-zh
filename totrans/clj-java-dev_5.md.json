["```java\npackage shapes;\n\npublic interface Shape {\n  public double getArea();\n}\n\npublic class Square implements Shape {\n  private double side;\n  public Square(double side) {\nthis.side = side;\n  }\n\n  public double getArea() {\n    return side * side;\n  }\n\n}\n\npublic class Circle implements Shape {\n  private double radius;\n  public Circle(double radius) {\nthis.radius = radius;\n  }\n\n  public double getArea() {\n    return Math.PI * radius * radius;\n  }\n\n}\n```", "```java\n(defmulti name docstring? attr-map? dispatch-fn& options)\n```", "```java\n(defmultiarea :shape)\n\n(defmethodarea :square [{:keys [side]}] (* side side))\n\n(area {:shape :square :side 5})\n;;=> 25\n```", "```java\n(defmultifunction-name dispatch-function)\n```", "```java\n(defmethodfunction-name dispatch-key [params] function-body)\n```", "```java\n(:shape {:shape :square :side 5})\n;; :square\n```", "```java\n(defmethodarea :circle [{:keys [radius]}]\n(* Math/PI radius radius))\n\n(defmultiperimeter :shape)\n\n(defmethodperimeter :square [{:keys [side]}] (* side 4))\n\n(defmethodperimeter :circle [{:keys [radius]}] (* 2 Math/PI radius))\n```", "```java\n(derive ::hominid ::primate)\n```", "```java\n(walk {:type ::hominid})\n;; Primate Walk\n```", "```java\n(derive ::hominid ::animal)\n\n(walk {:type ::hominid})\n;;java.lang.IllegalArgumentException: Multiple methods in multimethod 'walk' match dispatch value: :boot.user/hominid -> :boot.user/animal and :boot.user/primate, and neither is preferred\n```", "```java\n(prefer-method walk ::hominid ::primate)\n(walk {:type ::hominid})\n; Primate walk\n```", "```java\n(defmethodwalk ::hominid [_] \"Walk in two legs\")\n\n(walk {:type ::hominid})\n;; Walk in two legs\n```", "```java\n(isa? java.util.ArrayListjava.util.List)\n;;=> true\n\n(isa? ::hominid ::animal)\n;;=> true\n\n(isa? ::animal ::primate)\n;;=> false\n```", "```java\n(parents java.util.ArrayList)\n;;=> #{java.io.Serializablejava.util.Listjava.lang.Cloneablejava.util.RandomAccessjava.util.AbstractList}\n\n(parents ::hominid)\n#{:user/primate :user/animal}\n```", "```java\n(descendants ::animal)\n;;=> #{:boot.user/hominid}\n```", "```java\n(underive ::hominid ::animal)\n;;=> (isa? ::hominid ::animal)\n```", "```java\n(defn dispatch-func [arg1 arg2]\n  [arg2 arg1])\n```", "```java\n(defmulti sample-multimethod dispatch-func)\n;; Here we are saying that we want to use dispatch-func to calculate the dispatch-key\n\n(defmethod sample-multimethod [:second :first] [first second] [:normal-params first second])\n(defmethod sample-multimethod [:first :second] [first second] [:switch-params second first])\n\n(sample-multimethod :first :second)\n;;=> [:normal-params :first: second]\n\n(sample-multimethod :second :first)\n;; =>[:switch-params :first: second]\n```", "```java\n(defprotocol Shape\n  \"This is a protocol for shapes\"\n  (perimeter [this] \"Calculates the perimeter of this shape\")\n  (area [this] \"Calculates the area of this shape\"))\n```", "```java\n(defrecord Square [side]\n  Shape\n  (perimeter [{:keys [side]}] (* 4 side))\n  (area [{:keys [side]}] (* side side)))\n```", "```java\n(Square. 5)\n;;=> #user/Square{:size 5}\n\n(def square (Square. 5))\n\n(let [{side :side} square] side)\n;;=> 5\n\n(let [{:keys [side]} square] side)\n;;=> 5\n\n(doseq [[k v] (Square. 5)] (println k v))\n;; :side 5\n```", "```java\n(assoc (Square. 5) :hello :world)\n```", "```java\n(perimeter square)\n;;=> 20\n\n(area square)\n;;=> 25\n```", "```java\n(defrecord Circle [radius]\n  Shape\n  (perimeter [{:keys [radius]}] (* Math/PI 2 radius))\n  (area [{:keys [radius]}] (* Math/PI radius radius)))\n\n(def circle (Circle. 5))\n\n(perimeter circle)\n;;=> 31.41592653589793\n\n(area circle)\n;;=> 78.53981633974483\n```", "```java\n(defprotocolShapeProperties\n  (num-sides [this] \"How many sides a shape has\"))\n```", "```java\n(extend-type Square\nShapeProperties\n  (num-sides [this] 4))\n\n(extend-type Circle\nShapeProperties\n  (num-sides [this] Double/POSITIVE_INFINITY))\n\n(num-sides square)\n;;=> 4\n\n(num-sides circle)\n;;=> Infinity\n```", "```java\n(defprotocolListOps\n  (positive-values [list])\n  (negative-values [list])\n  (non-zero-values [list]))\n\n(extend-type java.util.List\nListOps\n  (positive-values [list]\n    (filter #(> % 0) list))\n  (negative-values [list]\n    (filter #(< % 0) list))\n  (non-zero-values [list]\n    (filter #(not= % 0) list)))\n```", "```java\n(positive-values [-1 0 1])\n;;=> (1)\n\n(negative-values [-1 0 1])\n;;=> (-1)\n\n(no-zero-values [-1 0 1])\n;;=> (-1 1)\n```"]