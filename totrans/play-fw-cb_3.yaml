- en: Chapter 3. Leveraging Modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Dependency injection with Spring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dependency injection using Guice
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Utilizing MongoDB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Utilizing MongoDB and GridFS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Utilizing Redis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating Play application with Amazon S3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating Play application with Typesafe Slick
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Utilizing play-mailer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating Bootstrap and WebJars
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will look at utilizing Play and other third-party modules
    to address commonly required functionalities of modern web applications. As web
    applications and web application frameworks mature and evolve, the need for a
    modular and extensible system as part of the core web application framework becomes
    increasingly important. This is achievable and straightforward with Play Framework
    2.0.
  prefs: []
  type: TYPE_NORMAL
- en: Dependency injection with Spring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we will explore how to integrate the popular Spring Framework
    with a Play application. We will use Spring for bean instantiation and injection
    using Play controllers and service classes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For Java, we need to take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `foo_java` application with Hot-Reloading enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare Spring as a project dependency in `build.sbt`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new admin controller in `foo_java/app/controllers/AdminController.java`
    with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an admin service interface class in `foo_java/app/services/AdminServices.java`
    and a mock admin service implementation class in `foo_java/app/services/AdminServicesImpl.java`
    with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new routes entry for the newly added action to `foo_java/conf/routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `Global` settings class to the `foo_java/app/Global.java` file with the
    following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the Spring configuration class to `foo_java/app/SpringConfig.java` with
    the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Request our new route and examine the response body to confirm:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Scala, we need to take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `foo_scala` application with Hot-Reloading enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare Spring as a project dependency in `build.sbt`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new admin controller in `foo_scala/app/controllers/AdminController.scala`
    with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an admin service class in `foo_scala/app/services/AdminServices.scala`
    with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new routes entry for the newly added action to `foo_scala/conf/routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `Global` settings class to the `foo_scala/app/Global.scala` with the
    following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the Spring configuration class to `foo_scala/app/SpringConfig.scala` with
    the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Request our new route and examine the response body to confirm:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we configured our Play application to utilize Dependency injection
    in our controllers and service classes using Spring. We configured Spring in the
    `Global` settings file and loaded the `SpringConfig` class, which will contain
    our Spring-specific configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Dependency injection using Guice
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we will explore how to integrate Google Guice with a Play application.
    We will use Guice for bean instantiation and injection using Play controllers
    and service classes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For Java, we need to take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `foo_java` application with Hot-Reloading enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare the `guice` module as a project dependency in `build.sbt`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Configure Guice by modifying the contents of the `Global` settings class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a category controller in `foo_java/app/controllers/CategoryController.java`
    by adding the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a category service interface in `foo_java/app/services/CategoryService.java`
    by adding the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a category service implementation class in `foo_java/app/services/CategoryServicesImpl.java`
    by adding the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new routes entry for the newly added action to `foo_java/conf/routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Request our new route and examine the response headers to confirm our modifications
    to the HTTP response header:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Scala, we need to take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `foo_scala` application with Hot-Reloading enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare the `securesocial` module as a project dependency in `build.sbt`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Configure Guice by modifying the contents of the `Global` settings class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a category controller in `foo_scala/app/controllers/CategoryController.scala`
    by adding the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a category service in `foo_scala/app/services/CategoryService.scala`
    by adding the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new routes entry for the newly added action to `foo_scala/conf/routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Request our new route and examine the response headers to confirm our modifications
    to the HTTP response header:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we configured our Play application to utilize Dependency injection
    in our controllers and service classes using Google Guice. We configured Guice
    in the `Global` settings file, which will contain our Guice-specific configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Utilizing MongoDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we will explore how to utilize MongoDB, the popular NoSQL library,
    within a Play application. MongoDB is one of the most widely-used NoSQL databases,
    and it most certainly has been a viable option as a datastore for many modern
    web applications. We will be using the Scala module, play-plugins-salat, which
    is an Object relation mapping tool that uses the official MongoDB Scala driver
    Casbah. This will be a Scala-only recipe.
  prefs: []
  type: TYPE_NORMAL
- en: For more information about Casbah, please refer to [https://github.com/mongodb/casbah](https://github.com/mongodb/casbah).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `foo_scala` application with Hot-Reloading enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare play-plugins-salat as a project dependency in `build.sbt`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add additional salat and MongoDB directives to `build.sbt`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare the salat plugin in `foo_scala/conf/play.plugins`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare the MongoDB instance information in `foo_scala/conf/application.conf`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify `foo_scala/app/controllers/WarehouseController.scala` by adding the
    following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add new routes for the newly added action to `foo_scala/conf/routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the collection mapping for the warehouse model to `foo_scala/app/models/Warehouse.scala`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the Mongo context to `foo_scala/app/models/mongoContext.scala`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new warehouse record by accessing the warehouse post endpoint using `curl`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'View all warehouse records by accessing the warehouse index endpoint using
    `curl`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we created a new URL route and action that will insert and
    retrieve warehouse records from a MongoDB instance. We used the Play module play-plugins-salat
    and configured the connection in `foo_scala/conf/application.conf`. We then mapped
    our Mongo collection in the warehouse model class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we invoked the appropriate warehouse companion object methods from the
    warehouse controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'We also declared our JSON binders for the warehouse model and MongoDB''s `ObjectId`
    in the warehouse controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Utilizing MongoDB and GridFS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we will explore how to store and deliver files with Play applications
    by using MongoDB and GridFS. We will continue by adding to the previous recipe.
    As with the previous recipe, this recipe will be Scala only.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `foo_scala` application with Hot-Reloading enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify `foo_scala/app/controllers/WarehouseController.scala` by adding the
    following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add new routes for the newly added action to `foo_scala/conf/routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the collection mapping for the warehouse model in `foo_scala/app/models/Warehouse.scala`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Upload a new warehouse asset file by accessing the warehouse upload endpoint
    using `curl`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify that our file delivery URL route is working by accessing the URL in
    a web browser that is part of the output of the previous step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we created new URL routes and actions that will be used to
    upload and retrieve warehouse asset files in a MongoDB instance using GridFS.
    We added the GridFS reference to our collection mapping file in `foo_scala/app/models/Warehouse.scala`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'We then added the respective methods for file upload and retrieval:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Next, we created the actions in `foo_scala/app/controllers/WarehouseController.scala`,
    which will handle the actual file upload and retrieval requests.
  prefs: []
  type: TYPE_NORMAL
- en: Utilizing Redis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we will explore how Play applications integrate with Redis
    using Play cache. Redis is a widely used key-value database, usually utilized
    as an intermediary object cache for modern web applications. This recipe requires
    a running Redis instance that our Play 2 web application can interface with.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For Java, we need to take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `foo_java` application with Hot-Reloading enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare Redis as a project dependency in `build.sbt`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare the repository hosting Sedis, a library dependency of play-plugins-redis
    in `build.sbt`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enable the play-mailer plugin by declaring it in `foo_java/conf/play.plugins`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Specify your Redis host information in `foo_java/conf/application.conf`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify `foo_java/app/controllers/Application.java` by adding the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new routes entry for the newly added action to `foo_java/conf/routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Request our new route and examine the response body to confirm that our `displayFromCache`
    action is setting the key value for the first time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Request the `/cache` route again to be able to view the value of the cache
    key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Scala, we need to take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `foo_scala` application with Hot-Reloading enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare Redis as a project dependency in `build.sbt`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare the repository hosting Sedis, a library dependency of play-plugins-redis,
    in `build.sbt`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enable the play-mailer plugin by declaring it in `foo_scala/conf/play.plugins`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Specify your Redis host information in `foo_scala/conf/application.conf`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify `foo_scala/app/controllers/Application.scala` by adding the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new routes entry for the newly added `action` to `foo_scala/conf/routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Request our new route and examine the response body to confirm that our `displayFromCache`
    action is setting the key value for the first time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Request the `/cache` route again to be able to view the value of the cache
    key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we created a new URL route and action that will interact with
    our Redis instance. To follow on with this recipe, you will need the following
    running Redis instance to connect to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: For more information about installing and running a Redis server, please refer
    to [http://redis.io/topics/quickstart](http://redis.io/topics/quickstart).
  prefs: []
  type: TYPE_NORMAL
- en: 'We configured the Play Redis module by declaring the necessary dependencies
    and repository settings in `build.sbt`. We then configured the connection to the
    Redis instance in `conf/application.conf`. Finally, we loaded the Redis play-plugin
    in `conf/play.plugins`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: The `displayFromCache` action, when invoked, has two distinct functions. First,
    it attempts to retrieve a value from the cache. If it is able to retrieve a value
    from the Redis cache, it prints the contents of the value in the response body.
    If it is unable to retrieve a value from the Redis cache, it sets a random string
    value to the key and prints a status message in the response body.
  prefs: []
  type: TYPE_NORMAL
- en: We then used `curl` to test out this new route and accessed the route twice;
    the action printed out two different messages in the response body.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Play application with Amazon S3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we will explore how Play applications can upload files directly
    to **Amazon Web Services** (**AWS**) S3, a popular cloud storage solution.
  prefs: []
  type: TYPE_NORMAL
- en: For more information about S3, please refer to [http://aws.amazon.com/s3/](http://aws.amazon.com/s3/).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For Java, we need to take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `foo_java` application with Hot-Reloading enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare play-s3 as a project dependency in `build.sbt`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Specify your AWS credentials in `foo_java/conf/application.conf`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify `foo_java/app/controllers/Application.java` by adding the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new routes entry for the newly added action to `foo_java/conf/routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the S3 file upload submission View template to `foo_java/app/views/s3.scala.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Scala, we need to take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `foo_scala` application with Hot-Reloading enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare play-s3 as a project dependency in `build.sbt`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare the custom repository where the play-s3 module is hosted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Specify your AWS credentials in `foo_scala/conf/application.conf`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify `foo_scala/app/controllers/Application.scala` by adding the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new routes entry for the newly added action to `foo_scala/conf/routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we created a new URL route and action that received the uploaded
    file. We then pushed this file to Amazon S3 using the RhinoFly S3 module by supplying
    the S3 access and secret keys in `conf/application.conf`. We also specified our
    S3 bucket name in `conf/application.conf` for future use. We are able to retrieve
    this value by using Play''s configuration API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'We then printed the location of the uploaded file to the response body for
    easy verification:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'You should now see the response in the web browser with the following text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also use the AWS Management Console to verify the file upload in the
    S3 section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Vt98tzVB.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Integrating with Play application Typesafe Slick
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will explore how we can integrate Typesafe Slick with Play
    applications using the `play-slick` module. Typesafe Slick is a relational mapping
    tool built on Scala and is handy for managing database objects like native Scala
    types.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `foo_scala` application with Hot-Reloading enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare play-slick as a project dependency in `build.sbt`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Specify your database host information in `foo_scala/conf/application.conf`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the new supplier controller in `foo_scala/app/controllers/SupplierController.scala`
    with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a Slick mapping for suppliers in the `foo_scala/app/models/Suppliers.scala`
    file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the new routes for the `Supplier` controller in `foo_scala/conf/routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Request the new `Post` route and examine the response headers and body to confirm
    that the record was inserted in the database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Request the listing route and verify that it is, in fact, returning records
    from the database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we created a new URL route and action that will create and retrieve
    suppliers from the `H2` database. We used Typesafe Slick as the relational mapping
    tool for creating queries and inserts. We started by declaring the required dependencies
    in `build.sbt`. Next, we defined the mapping properties for suppliers in `foo_scala/app/models/Supplier.scala`.
  prefs: []
  type: TYPE_NORMAL
- en: In the mapping file, we declared our case class supplier. We also declared our
    Slick table mapping class. Lastly, we added our suppliers object class that should
    ideally contain all the required functions for data insertion and querying. We
    added the appropriate routes to the `conf/routes` file and ran the database evolution.
    This allows Slick to automatically manage table creation and column syncing. To
    test our implementation, we used curl to request our `POST` and `GET` endpoints
    to be able to view the response headers and body.
  prefs: []
  type: TYPE_NORMAL
- en: Utilizing play-mailer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we will explore how Play applications can send e-mails. We
    will use the Play module play-mailer to achieve this. We will be utilizing Mandrill,
    a cloud e-mailer service, to send out e-mails. For more information about Mandrill,
    please refer to [https://mandrill.com/](https://mandrill.com/).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For Java, we need to take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `foo_java` application with Hot-Reloading enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare play-mailer as a project dependency in `build.sbt`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enable the play-mailer plugin by declaring it in `foo_java/conf/play.plugins`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Specify your `smtp` host information in `foo_java/conf/application.conf`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify `foo_java/app/controllers/Application.java` by adding the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new routes entry for the newly added action to `foo_java/conf/routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Request our new route and examine the response headers to confirm our modifications
    to the HTTP response header:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Scala, we need to take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `foo_scala` application with Hot-Reloading enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare play-mailer as a project dependency in `build.sbt`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enable the play-mailer plugin by declaring it in `foo_scala/conf/play.plugins`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Specify your `smtp` host information in `foo_scala/conf/application.conf`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify `foo_scala/app/controllers/Application.scala` by adding the following
    action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new routes entry for the newly added action to `foo_scala/conf/routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Request our new route and examine the response headers to confirm our modifications
    to the HTTP response header:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we created a new URL route and action that will invoke our newly
    added `sendMail` function. We declared the module dependency in `foo_scala/build.sbt`
    and specified our `smtp` server settings in `foo_scala/conf/application.conf`.
    After this, we invoked the URL route using `curl` in the terminal to test out
    our e-mail sender. You should now receive the e-mail in your e-mail client software.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Bootstrap and WebJars
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we will explore how we can integrate and utilize the popular
    frontend framework Bootstrap with a Play 2 web application. We will integrate
    Bootstrap using WebJars, which is a tool to package frontend libraries into JAR
    files that can then be easily managed (in our case, by `sbt`).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For Java, we need to take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `foo_java` application with Hot-Reloading enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare Bootstrap and WebJars as a project dependency in `build.sbt`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify `foo_java/app/controllers/Application.java` by adding the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the new route entries to `foo_java/conf/routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the new layout View template in `foo_java/app/views/mainLayout.scala.html`
    with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the Bootstrapped View template in `foo_java/app/views/bootstrapped.scala.html`
    with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Request our new Bootstrapped route (`http://localhost:9000/bootstrapped`) using
    a web browser and examine the rendered page using a Bootstrap template:![](img/TwofsdMh.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For Scala, we need to take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `foo_scala` application with Hot-Reloading enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare Bootstrap and WebJars as a project dependency in `build.sbt`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify `foo_scala/app/controllers/Application.scala` by adding the following
    action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the new route entries to `foo_scala/conf/routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the new layout view template in `foo_scala/app/views/mainLayout.scala.html`
    with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the bootstrapped View template in `foo_scala/app/views/bootstrapped.scala.html`
    with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Request our new bootstrapped route (`http://localhost:9000/bootstrapped`) using
    a web browser and examine the rendered page using a Bootstrap template:![](img/Zhuvkkee.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, instead of downloading Bootstrap separately and managing different
    versions manually, we used the Play module and WebJars, declaring Bootstrap as
    a frontend dependency in `build.sbt`. We created the new View templates containing
    the Bootstrap template. We then created a new URL route that will utilize these
    new Bootstrap-based views.
  prefs: []
  type: TYPE_NORMAL
