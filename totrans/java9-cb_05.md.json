["```java\nList<String> list = new ArrayList<>();\nlist.add(\"This \");\nlist.add(\"is \");\nlist.add(\"built \");\nlist.add(\"by \");\nlist.add(\"list.add()\");\n//Let us print the created list:\nlist.forEach(System.out::print);\n```", "```java\nArrays.asList(\"This \", \"is \", \"created \", \"by \", \n              \"Arrays.asList()\").forEach(System.out::print);\n```", "```java\nSet<String> set = new HashSet<>();\nset.add(\"This \");\nset.add(\"is \");\nset.add(\"built \");\nset.add(\"by \");\nset.add(\"set.add() \");\n//Now print the created set:\nset.forEach(System.out::print);\n```", "```java\nnew HashSet<>(Arrays.asList(\"This \", \"is \", \"created \", \"by \", \n                            \"new HashSet(Arrays.asList()) \"))\n                            .forEach(System.out::print);\n```", "```java\nMap<Integer, String> map = new HashMap<>();\nmap.put(1, \"This \");\nmap.put(2, \"is \");\nmap.put(3, \"built \");\nmap.put(4, \"by \");\nmap.put(5, \"map.put() \");\n//Print the results:\nmap.entrySet().forEach(System.out::print);\n```", "```java\nstatic <E> List<E> of()  //Returns list with zero elements\nstatic <E> List<E> of(E e1) //Returns list with one element\nstatic <E> List<E> of(E e1, E e2)  //etc\nstatic <E> List<E> of(E e1, E e2, E e3)\nstatic <E> List<E> of(E e1, E e2, E e3, E e4)\nstatic <E> List<E> of(E e1, E e2, E e3, E e4, E e5)\nstatic <E> List<E> of(E e1, E e2, E e3, E e4, E e5, E e6)\nstatic <E> List<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7)\nstatic <E> List<E> of(E e1, E e2, E e3, E e4, E e5, \n                                        E e6, E e7, E e8)\nstatic <E> List<E> of(E e1, E e2, E e3, E e4, E e5, \n                                  E e6, E e7, E e8, E e9)\nstatic <E> List<E> of(E e1, E e2, E e3, E e4, E e5, \n                            E e6, E e7, E e8, E e9, E e10)\nstatic <E> List<E> of(E... elements)\n```", "```java\nList.of(\"This \", \"is \", \"created \", \"by \", \"List.of()\")\n    .forEach(System.out::print);\nSystem.out.println();\nSet.of(\"This \", \"is \", \"created \", \"by \", \"Set.of() \")\n   .forEach(System.out::print);\nSystem.out.println();\nMap.of(1, \"This \", 2, \"is \", 3, \"built \", 4, \"by \", 5,\"Map.of() \")\n   .entrySet().forEach(System.out::print);\n```", "```java\nstatic <K,V> Map<K,V> ofEntries(Map.Entry<? extends K,\n                                ? extends V>... entries)\n```", "```java\nMap.ofEntries(\n  entry(1, \"This \"),\n  entry(2, \"is \"),\n  entry(3, \"built \"),\n  entry(4, \"by \"),\n  entry(5, \"Map.ofEntries() \")\n).entrySet().forEach(System.out::print);\n```", "```java\nList<String> list = List.of(\"This \", \"is \", \"immutable\");\nlist.add(\"Is it?\");\n```", "```java\n List<Integer> list = List.of(1,2,3,4,5);\n list.set(2, 9);\n```", "```java\nList<String> list = List.of(\"This \", \"is \", \"not \", \"created \", null);\n```", "```java\nList<Integer> list = Arrays.asList(1,2,3,4,5);\nlist.set(2, 0);\nlist.forEach(System.out::print);\n\nlist.forEach(i -> {\n  int j = list.get(2);\n  list.set(2, j + 1);\n});\nSystem.out.println();\nlist.forEach(System.out::print);\n```", "```java\n        List.of(\"This\", \"is\", \"created\", \"by\", \"List.of().stream()\")\n            .stream().forEach(System.out::print);\n        System.out.println();\n        Set.of(\"This\", \"is\", \"created\", \"by\", \"Set.of().stream()\")\n           .stream().forEach(System.out::print);\n        System.out.println();\n        Map.of(1, \"This \", 2, \"is \", 3, \"built \", 4, \"by \", 5,\n               \"Map.of().entrySet().stream()\")\n           .entrySet().stream().forEach(System.out::print);\n```", "```java\n        static DoubleStream stream(double[] array)\n        static DoubleStream stream(double[] array, int startInclusive,\n                                   int endExclusive)\n        static IntStream stream(int[] array)\n        static IntStream stream(int[] array, int startInclusive, \n                                int endExclusive)\n        static LongStream stream(long[] array)\n        static LongStream stream(long[] array, int startInclusive, \n                                 int endExclusive)\n        static <T> Stream<T> stream(T[] array)\n        static <T> Stream<T> stream(T[] array, int startInclusive, \n                                    int endExclusive)\n```", "```java\n        String[] array = {\"That \", \"is \", \"an \",\n                          \"Arrays.stream(array)\"};\n        Arrays.stream(array).forEach(System.out::print);\n        System.out.println();\n        String[] array1 = { \"That \", \"is \", \"an \", \n                            \"Arrays.stream(array,0,2)\" };\n        Arrays.stream(array1, 0, 2).forEach(System.out::print);\n```", "```java\n        static <T> Stream<T> of(T t) //Returns Stream of one\n        static <T> Stream<T> ofNullable(T t)//Returns Stream of one\n        // element, if non-null, otherwise returns an empty Stream\n        static <T> Stream<T> of(T... values)\n        static <T> Stream<T> generate(Supplier<? extends T> s)\n        static <T> Stream<T> iterate(T seed, UnaryOperator<T> f)\n        static <T> Stream<T> iterate(T seed, \n          Predicate<? super T> hasNext, UnaryOperator<T> next)\n```", "```java\n        String[] array = { \"That \", \"is \", \"a \", \"Stream.of(array)\" };\n        Stream.of(array).forEach(System.out::print); \n        System.out.println();\n        Stream.of( \"That \", \"is \", \"a \", \"Stream.of(literals)\" )\n              .forEach(System.out::print);\n```", "```java\n        Stream.generate(() -> \"generated \")\n              .limit(3).forEach(System.out::print);\n        System.out.println();\n        System.out.print(\"Stream.iterate().limit(10): \");\n        Stream.iterate(0, i -> i + 1)\n              .limit(10).forEach(System.out::print);\n        System.out.println();\n        System.out.print(\"Stream.iterate(Predicate < 10): \");\n        Stream.iterate(0, i -> i < 10, i -> i + 1)\n              .forEach(System.out::print);\n```", "```java\n        System.out.print(\"IntStream.range(0,10): \");\n        IntStream.range(0, 9).forEach(System.out::print);\n        System.out.println();\n        System.out.print(\"IntStream.rangeClosed(0,10): \");\n        IntStream.rangeClosed(0, 9).forEach(System.out::print);\n```", "```java\n        System.out.println(\"Files.list(dir): \");\n        Path dir = FileSystems.getDefault()\n                  .getPath(\"src/com/packt/cookbook/ch05_streams/\");\n        try(Stream<Path> stream = Files.list(dir)) {\n          stream.forEach(System.out::println);\n        } catch (Exception ex){ ex.printStackTrace(); }\n```", "```java\n        System.out.println(\"Files.lines().limit(3): \");\n        String file = \"src/com/packt/cookbook/ch05_streams\n                       /Chapter05Streams.java\";\n        try(Stream<String> stream = Files.lines(Paths.get(file))\n                                                     .limit(3)){ \n          stream.forEach(l -> { \n            if( l.length() > 0 ) System.out.println(\"   \" + l); \n          } );\n        } catch (Exception ex){ ex.printStackTrace(); }\n```", "```java\n        static Stream<Path> find(Path start, int maxDepth, \n               BiPredicate<Path, BasicFileAttributes> matcher, \n               FileVisitOption... options)\n```", "```java\n        Path dir = FileSystems.getDefault()\n                   .getPath(\"src/com/packt/cookbook/ch05_streams/\");\n        BiPredicate<Path, BasicFileAttributes> select = \n          (p, b) -> p.getFileName().toString().contains(\"Factory\");\n        try(Stream<Path> stream = Files.find(f, 2, select)){\n          stream.map(path -> path.getFileName())\n                .forEach(System.out::println);\n        } catch (Exception ex){ ex.printStackTrace(); }\n```", "```java\nStream<T> peek(Consumer<T> action)\n\nStream<T> distinct() //Returns stream of distinct elements\nStream<T> skip(long n)    //Discards the first n elements \nStream<T> limit(long max) //Discards elements after max \nStream<T> filter(Predicate<T> predicate)\nStream<T> dropWhile(Predicate<T> predicate) \nStream<T> takeWhile(Predicate<T> predicate)\n\nStream<R> map(Function<T, R> mapper)\nIntStream mapToInt(ToIntFunction<T> mapper)\nLongStream mapToLong(ToLongFunction<T> mapper)\nDoubleStream mapToDouble(ToDoubleFunction<T> mapper)\n\nStream<R> flatMap(Function<T, Stream<R>> mapper)\nIntStream flatMapToInt(Function<T, IntStream> mapper)\nLongStream flatMapToLong(Function<T, LongStream> mapper)\nDoubleStream flatMapToDouble(Function<T, DoubleStream> mapper)\n\nstatic Stream<T> concat(Stream<T> a, Stream<T> b) \n\nStream<T> sorted()\nStream<T> sorted(Comparator<T> comparator)\n```", "```java\n<R> Stream<R> flatMap(Function<? super T,\n                      ? extends Stream<? extends R>> mapper)\n```", "```java\nint sum = Stream.of( 1,2,3,4,5,6,7,8,9 )\n  .filter(i -> i % 2 != 0)\n  .peek(i -> System.out.print(i))\n  .mapToInt(Integer::intValue)\n  .sum();\nSystem.out.println(\"\\nsum = \" + sum);\n```", "```java\nSystem.out.println(\"Files.lines().dropWhile().takeWhile(): \");\nString file = \"src/com/packt/cookbook/ch05_streams\n               /Chapter05Streams.java\";\ntry(Stream<String> stream = Files.lines(Paths.get(file))){\n  stream.dropWhile(l -> !l.contains(\"dropWhile().takeWhile()\"))\n        .takeWhile(l -> !l.contains(\"} catc\"+\"h\"))\n        .forEach(System.out::println);\n} catch (Exception ex){ ex.printStackTrace(); }\n\n```", "```java\nStream.of( \"That \", \"is \", \"a \", \"Stream.of(literals)\" )\n      .map(s -> s.contains(\"i\")).forEach(System.out::println);\n```", "```java\nStream.of( \"That \", \"is \", \"a \", \"Stream.of(literals)\" )\n      .filter(s -> s.contains(\"Th\"))\n      .flatMap(s -> Pattern.compile(\"(?!^)\").splitAsStream(s))\n      .forEach(System.out::print);\n```", "```java\nStream.concat(Stream.of(4,5,6), Stream.of(1,2,3))\n      .forEach(System.out::print);\n```", "```java\nStream.of(Stream.of(4,5,6), Stream.of(1,2,3), Stream.of(7,8,9))\n      .flatMap(Function.identity())\n      .forEach(System.out::print);\n```", "```java\nlong count()            //Returns count of elements\nOptional<T> max(Comparator<T> comparator) //Max according \n                                          // to Comparator\nOptional<T> min(Comparator<T> comparator) //Min according\n                                          // to Comparator\n\nOptional<T> findAny() //Returns any or empty Optional\nOptional<T> findFirst()  //Returns the first element \n                         // or empty Optional \nboolean allMatch(Predicate<T> predicate) //All elements \n                                        // match Predicate?\nboolean anyMatch(Predicate<T> predicate)  //Any element \n                                        // match Predicate?\nboolean noneMatch(Predicate<T> predicate) //No element \n                                        // match Predicate?\n\nvoid forEach(Consumer<T> action) //Apply action to each el \nvoid forEachOrdered(Consumer<T> action) \n\nOptional<T> reduce(BinaryOperator<T> accumulator) \nT reduce(T identity, BinaryOperator<T> accumulator) \nU reduce(U identity, BiFunction<U,T,U> accumulator, \n         BinaryOperator<U> combiner) \nR collect(Collector<T,A,R> collector) \nR collect(Supplier<R> supplier, BiConsumer<R,T> accumulator, \n          BiConsumer<R,R> combiner) \nObject[] toArray() \nA[] toArray(IntFunction<A[]> generator)\n```", "```java\nStream.of(Stream.of(4,5,6), Stream.of(1,2,3), Stream.of(7,8,9))\n      .reduce(Stream::concat)\n      .orElseGet(Stream::empty)\n      .forEach(System.out::print);\n```", "```java\nStream.of(\"3\",\"2\",\"1\").parallel().forEach(System.out::print);\nSystem.out.println();\nStream.of(\"3\",\"2\",\"1\").parallel().forEachOrdered(System.out::print);\n```", "```java\n Stream.of( \"That \", \"is \", \"a \", null, \"Stream.of(literals)\" )\n       .map(Optional::ofNullable) \n       .filter(Optional::isPresent)\n       .map(Optional::get)\n       .map(String::toString)\n       .forEach(System.out::print);\n```", "```java\n int sum = Stream.of(1,2,3).reduce((p,e) -> p + e).orElse(0);\n System.out.println(\"Stream.of(1,2,3).reduce(acc): \" +sum);\n```", "```java\nint sum = Stream.of(1,2,3).reduce(0, (p,e) -> p + e);\nSystem.out.println(\"Stream.of(1,2,3).reduce(0,acc): \" +sum);\n```", "```java\nString sum = Stream.of(1,2,3).reduce(\"\", (p,e) -> p + e.toString(),\n                                     (x,y) -> x + \",\" + y);\nSystem.out.println(\"Stream.of(1,2,3).reduce(,acc,comb): \" + sum);\n\n```", "```java\nString sum = Stream.of(1,2,3).parallel()  \n                   .reduce(\"\", (p,e) -> p + e.toString(), \n                           (x,y) -> x + \",\" + y);\nSystem.out.println(\"Stream.of(1,2,3).reduce(,acc,comb): \" + sum);\n```", "```java\nString sum = Stream.of(1,2,3)\n                   .map(i -> i.toString() + \",\")\n                   .reduce(\"\", (p,e) -> p + e);\nSystem.out.println(\"Stream.of(1,2,3).map.reduce(,acc): \" \n                   + sum.substring(0, sum.length()-1));\n\n```", "```java\nString sum = Stream.of(1,2,3).parallel()\n                   .map(i -> i.toString() + \",\")\n                   .reduce(\"\", (p,e) -> p + e);\nSystem.out.println(\"Stream.of(1,2,3).map.reduce(,acc): \" \n                   + sum.substring(0, sum.length()-1));\n\n```", "```java\npublic class Thing {\n  private int someInt;\n  public Thing(int i) { this.someInt = i; }\n  public int getSomeInt() { return someInt; }\n  public String getSomeStr() { \n    return Integer.toString(someInt); }\n} \n```", "```java\ndouble aa = Stream.of(1,2,3).map(Thing::new)\n                  .collect(Collectors.averagingInt(Thing::getSomeInt));\nSystem.out.println(\"stream(1,2,3).averagingInt(): \" + aa);\n\nString as = Stream.of(1,2,3).map(Thing::new).map(Thing::getSomeStr)\n                  .collect(Collectors.joining(\",\"));\nSystem.out.println(\"stream(1,2,3).joining(,): \" + as);\n\nString ss = Stream.of(1,2,3).map(Thing::new).map(Thing::getSomeStr)\n                  .collect(Collectors.joining(\",\", \"[\", \"]\"));\nSystem.out.println(\"stream(1,2,3).joining(,[,]): \" + ss);\n```", "```java\n Object[] os = Stream.of(1,2,3).toArray();\n Arrays.stream(os).forEach(System.out::print);\n System.out.println();\n String[] sts = Stream.of(1,2,3).map(i -> i.toString())\n                      .toArray(String[]::new);\n Arrays.stream(sts).forEach(System.out::print);\n```", "```java\nStream.of(1,2,3).toArray().forEach(System.out::print);\n```", "```java\npublic interface Traffic {\n  void speedAfterStart(double timeSec, \n    int trafficUnitsNumber, SpeedModel speedModel, \n    BiPredicate<TrafficUnit, Double> limitTraffic,     \n    BiConsumer<TrafficUnit, Double> printResult);\n }\n```", "```java\ndouble timeSec = 10.0;\nint trafficUnitsNumber = 10;\n\nSpeedModel speedModel = (t, wp, hp) -> ...;\nBiConsumer<TrafficUnit, Double> printResults = (tu, sp) -> ...;\nBiPredicate<TrafficUnit, Double> limitSpeed = (tu, sp) -> ...;\n\nTraffic api = new TrafficImpl(Month.APRIL, DayOfWeek.FRIDAY, 17, \n                              \"USA\", \"Denver\", \"Main103S\");\napi.speedAfterStart(timeSec, trafficUnitsNumber, speedModel, \n                    limitSpeed, printResults);\n```", "```java\ndouble timeSec = 10.0;\nint trafficUnitsNumber = 10;\n\nSpeedModel speedModel = (t, wp, hp) -> ...;\nBiConsumer<TrafficUnit, Double> printResults = (tu, sp) -> ...;\nBiPredicate<TrafficUnit, Double> limitSpeed = (tu, sp) -> ...;\nList<TrafficUnit> trafficUnits = FactoryTraffic\n     .generateTraffic(trafficUnitsNumber, Month.APRIL, \n                      DayOfWeek.FRIDAY, 17, \"USA\", \"Denver\",\n                      \"Main103S\");\nfor(TrafficUnit tu: trafficUnits){\n  Vehicle vehicle = FactoryVehicle.build(tu);\n  vehicle.setSpeedModel(speedModel);\n  double speed = vehicle.getSpeedMph(timeSec);\n  speed = Math.round(speed * tu.getTraction());\n    if(limitSpeed.test(tu, speed)){\n      printResults.accept(tu, speed);\n    }\n  }\n```", "```java\nStream<TrafficUnit> stream = FactoryTraffic\n       .getTrafficUnitStream(trafficUnitsNumber, Month.APRIL,\n                             DayOfWeek.FRIDAY, 17, \"USA\", \"Denver\",\n                             \"Main103S\");\n```", "```java\nStream<TrafficUnit>getTrafficUnitStream(int trafficUnitsNumber){\n  return FactoryTraffic\n         .getTrafficUnitStream(trafficUnitsNumber,Month.APRIL, \n                               DayOfWeek.FRIDAY, 17, \"USA\", \"Denver\",\n                               \"Main103S\");\n}\n```", "```java\ngetTrafficUnitStream(trafficUnitsNumber).map(tu -> {\n  Vehicle vehicle = FactoryVehicle.build(tu);\n  vehicle.setSpeedModel(speedModel);\n  return vehicle;\n})\n.map(v -> {\n  double speed = v.getSpeedMph(timeSec);\n  return Math.round(speed * tu.getTraction());\n})\n.filter(s -> limitSpeed.test(tu, s))\n.forEach(tuw -> printResults.accept(tu, s));\n```", "```java\nprivate static class TrafficUnitWrapper {\n  private double speed;\n  private Vehicle vehicle;\n  private TrafficUnit trafficUnit;\n  public TrafficUnitWrapper(TrafficUnit trafficUnit){\n    this.trafficUnit = trafficUnit;\n  }\n  public TrafficUnit getTrafficUnit(){ return this.trafficUnit; }\n  public Vehicle getVehicle() { return vehicle; }\n  public void setVehicle(Vehicle vehicle) { \n    this.vehicle = vehicle; \n  }\n  public double getSpeed() { return speed; }\n  public void setSpeed(double speed) { this.speed = speed; }\n}\n```", "```java\ngetTrafficUnitStream(trafficUnitsNumber)\n   .map(TrafficUnitWrapper::new)\n   .map(tuw -> {\n  Vehicle vehicle = FactoryVehicle.build(tuw.getTrafficUnit());\n  vehicle.setSpeedModel(speedModel);\n  tuw.setVehicle(vehicle);\n  return tuw;\n})\n.map(tuw -> {\n  double speed = tuw.getVehicle().getSpeedMph(timeSec);\n  speed = Math.round(speed * tuw.getTrafficUnit()\n                                .getTraction());\n  tuw.setSpeed(speed);\n  return tuw;\n})\n.filter(tuw -> limitSpeed.test(tuw.getTrafficUnit(), \n                               tuw.getSpeed()))\n.forEach(tuw -> printResults.accept(tuw.getTrafficUnit(), \n                                    tuw.getSpeed()));\n```", "```java\nprivate static class TrafficUnitWrapper {\n  private double speed;\n  private Vehicle vehicle;\n  private TrafficUnit trafficUnit;\n  public TrafficUnitWrapper(TrafficUnit trafficUnit){\n    this.trafficUnit = trafficUnit;\n    this.vehicle = FactoryVehicle.build(trafficUnit);\n  }\n  public TrafficUnitWrapper setSpeedModel(SpeedModel speedModel) {\n    this.vehicle.setSpeedModel(speedModel);\n    return this;\n  }\n  pubic TrafficUnit getTrafficUnit(){ return this.trafficUnit; }\n  public Vehicle getVehicle() { return vehicle; }\n  public double getSpeed() { return speed; }\n  public TrafficUnitWrapper setSpeed(double speed) { \n    this.speed = speed;\n    return this; \n  }\n}\n```", "```java\ngetTrafficUnitStream(trafficUnitsNumber)\n   .map(TrafficUnitWrapper::new)\n   .map(tuw -> tuw.setSpeedModel(speedModel))\n   .map(tuw -> {\n  double speed = tuw.getVehicle().getSpeedMph(timeSec);\n  speed = Math.round(speed * tuw.getTrafficUnit()\n                                .getTraction());\n  return tuw.setSpeed(speed);\n})\n.filter(tuw -> limitSpeed.test(tuw.getTrafficUnit(), \n                               tuw.getSpeed()))\n .forEach(tuw -> printResults.accept(tuw.getTrafficUnit(), \n                                     tuw.getSpeed()));\n```", "```java\npublic TrafficUnitWrapper calcSpeed(double timeSec) {\n  double speed = this.vehicle.getSpeedMph(timeSec);\n  this.speed = Math.round(speed * this.trafficUnit\n                                      .getTraction());\n  return this;\n}\n```", "```java\ngetTrafficUnitStream(trafficUnitsNumber)\n   .map(TrafficUnitWrapper::new)\n   .map(tuw -> tuw.setSpeedModel(speedModel))\n   .map(tuw -> tuw.calcSpeed(timeSec))\n   .filter(tuw -> limitSpeed.test(tuw.getTrafficUnit(), \n                                  tuw.getSpeed()))\n   .forEach(tuw -> printResults.accept(tuw.getTrafficUnit(), \n                                       tuw.getSpeed()));\n```", "```java\nInteger[] trafficByLane(Stream<TrafficUnit> stream, \n                 int trafficUnitsNumber, double timeSec, \n                 SpeedModel speedModel, double[] speedLimitByLane) {\n  int lanesCount = speedLimitByLane.length;\n  Map<Integer, Integer> trafficByLane = stream\n               .limit(trafficUnitsNumber)\n               .map(TrafficUnitWrapper::new)\n               .map(tuw -> tuw.setSpeedModel(speedModel))\n               .map(tuw -> tuw.calcSpeed(timeSec))\n               .map(speed -> countByLane(lanesCount, \n                                  speedLimitByLane, speed))\n               .collect(Collectors\n                   .groupingBy(CountByLane::getLane, Collectors\n                   .summingInt(CountByLane::getCount)));\n  for(int i = 1; i <= lanesCount; i++){\n    trafficByLane.putIfAbsent(i, 0);\n  }\n  return trafficByLane.values().toArray(new Integer[lanesCount]);\n}\n```", "```java\nprivate class CountByLane {\n  int count, lane;\n  private CountByLane(int count, int lane){\n    this.count = count;\n    this.lane = lane;\n  }\n  public int getLane() { return lane; }\n  public int getCount() { return count; }\n}\n```", "```java\nprivate static class TrafficUnitWrapper {\n  private Vehicle vehicle;\n  private TrafficUnit trafficUnit;\n  public TrafficUnitWrapper(TrafficUnit trafficUnit){\n    this.vehicle = FactoryVehicle.build(trafficUnit);\n    this.trafficUnit = trafficUnit;\n  }\n  public TrafficUnitWrapper setSpeedModel(SpeedModel speedModel) {\n    this.vehicle.setSpeedModel(speedModel);\n    return this;\n  }\n  public double calcSpeed(double timeSec) {\n    double speed = this.vehicle.getSpeedMph(timeSec);\n    return Math.round(speed * this.trafficUnit.getTraction());\n  }\n}\n```", "```java\nprivate CountByLane countByLane(int lanesNumber, double[] speedLimit, \n                                double speed){\n  for(int i = 1; i <= lanesNumber; i++){\n    if(speed <= speedLimit[i - 1]){ \n      return new CountByLane(1, i);\n    }\n  }\n  return new CountByLane(1, lanesNumber);\n}\n```", "```java\nPredicate<TrafficUnit> limitTraffic = tu ->\n    tu.getVehicleType() == Vehicle.VehicleType.CAR\n    || tu.getVehicleType() == Vehicle.VehicleType.TRUCK;\n\ngetTrafficUnitStream(trafficUnitsNumber)\n   .filter(limitTraffic)\n   .map(TrafficUnitWrapper::new)\n   .map(tuw -> tuw.setSpeedModel(speedModel))\n   .map(tuw -> tuw.calcSpeed(timeSec))\n   .filter(tuw -> limitSpeed.test(tuw.getTrafficUnit(), \n                                  tuw.getSpeed()))\n   .forEach(tuw -> printResults.accept(tuw.getTrafficUnit(), \n                                       tuw.getSpeed()));\n```", "```java\nList.of(\"This \", \"is \", \"created \", \"by \", \n        \"List.of().stream()\").stream()\n        .forEach(System.out::print);\nSystem.out.println();\nList.of(\"This \", \"is \", \"created \", \"by \", \n        \"List.of().parallelStream()\")\n    .parallelStream()\n    .forEach(System.out::print);\n```", "```java\nList<String> wordsWithI = new ArrayList<>();\nStream.of(\"That \", \"is \", \"a \", \"Stream.of(literals)\")\n      .parallel()\n      .filter(w -> w.contains(\"i\"))\n      .forEach(wordsWithI::add);\nSystem.out.println(wordsWithI);\nSystem.out.println();\n\nwordsWithI = Stream.of(\"That \", \"is \", \"a \", \"Stream.of(literals)\" )\n                   .parallel()\n                   .filter(w -> w.contains(\"i\"))\n                   .collect(Collectors.toList());\nSystem.out.println(wordsWithI);\n```"]