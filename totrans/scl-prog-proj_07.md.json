["```java\nclass APISpec extends PlaySpec with ScalaFutures with GuiceOneServerPerSuite {\n\n  val baseURL = s\"localhost:$port/v1\"\n  val productsURL = s\"http://$baseURL/products\"\n  val addProductsURL = s\"http://$baseURL/products/add\"\n  val productsInCartURL = s\"http://$baseURL/cart/products\"\n  def deleteProductInCartURL(productID: String) = \n    s\"http://$baseURL/cart/products/$productID\"\n  def actionProductInCartURL(productID: String, quantity: Int) = \n    s\"http://$baseURL/cart/products/$productID/quantity/$quantity\"\n\n   \"The API\" should {\n     val wsClient = app.injector.instanceOf[WSClient]\n   }\n}\n```", "```java\n   \"list all the product\" in {\n     val response = Await.result(\n                          wsClient.url(productsURL).get(),\n                          1 seconds)\n     response.status mustBe OK\n   }\n```", "```java\n\"add a product\" in {\n  val newProduct =\n\"\"\"\n {\n      \"name\" : \"NewOne\",\n      \"code\" : \"New\",\n      \"description\" : \"The brand new product\",\n      \"price\" : 100.0\n }\n\"\"\"\n\n     val posted = wsClient.url(addProductsURL).\n                  post(newProduct).futureValue\n        posted.status mustBe OK\n}\n```", "```java\n    \"add a product in the cart\" in {\n      val productID = \"ALD1\"\n      val quantity = 1\n      val posted = wsClient.url(actionProductInCartURL(productID, \n                   quantity)).post(\"\").futureValue\n      posted.status mustBe OK\n    }\n    \"delete a product from the cart\" in {\n      val productID = \"ALD1\"\n      val quantity = 1\n      val posted = wsClient.url(deleteProductInCartURL(productID))\n                  .delete().futureValue\n      posted.status mustBe OK\n    }\n    \"update a product quantity in the cart\" in {\n      val productID = \"ALD1\"\n      val quantity = 1\n      val posted = wsClient.url(actionProductInCartURL(productID,                                \n                   quantity))\n        .post(\"\").futureValue\n      posted.status mustBe OK\n\n      val newQuantity = 99\n      val update = wsClient.url(actionProductInCartURL(productID,             \n                   newQuantity)).put(\"\").futureValue\n      update.status mustBe OK\n    }\n```", "```java\n# Product API\nGET    /v1/products                         W.listProduct\nPOST   /v1/products/add                     W.addProduct\n\n# Cart API\nGET    /v1/cart/products                    W.listCartProducts()\nDELETE /v1/cart/products/:id                W.deleteCartProduct(id)\nPOST   /v1/cart/products/:id/quantity/:qty  W.addCartProduct(id,qty)\nPUT    /v1/cart/products/:id/quantity/:qty  W.updateCartProduct(id,qty)\n```", "```java\n@Singleton\nclass WebServices  @Inject()(cc: ControllerComponents, productDao: ProductsDao) extends AbstractController(cc) {\n\n  // *********** CART Controler ******** //\n  def listCartProducts() = play.mvc.Results.TODO\n\n  def deleteCartProduct(id: String) = play.mvc.Results.TODO\n\n  def addCartProduct(id: String, quantity: String) =     \n    play.mvc.Results.TODO\n\n  def updateCartProduct(id: String, quantity: String) =   \n    play.mvc.Results.TODO\n\n  // *********** Product Controler ******** //\n  def listProduct() = play.mvc.Results.TODO\n\n  def addProduct() = play.mvc.Results.TODO\n\n}\n```", "```java\n    \"list all the products\" in {\n      val response = wsClient.url(productsURL).get().futureValue\n      println(response.body)\n      response.status mustBe OK\n      response.body must include(\"PEPER\")\n      response.body must include(\"NAO\")\n      response.body must include(\"BEOBOT\")\n    }\n```", "```java\n   \"add a product\" in {\n      val newProduct =\n        \"\"\"\n       {\n            \"name\" : \"NewOne\",\n            \"code\" : \"New\",\n            \"description\" : \"The brand new product\",\n            \"price\" : 100.0\n       }\n      \"\"\"\n\n      val posted = wsClient.url(addProductsURL).post(newProduct).\n                   futureValue\n      posted.status mustBe OK\n\n      val response = wsClient.url(productsURL).get().futureValue\n      println(response.body)\n      response.body must include(\"NewOne\")\n    }\n```", "```java\ndef listProduct() = Action.async { request =>\n  val futureProducts = productDao.all()\n  for (\n    products <- futureProducts\n  ) yield (Ok(products.mkstring(\",\")))\n}\n```", "```java\nlibraryDependencies += \"com.dripower\" %% \"play-circe\" % \"2609.0\"\n```", "```java\nclass WebServices @Inject()(cc: ControllerComponents, productDao: ProductsDao) extends AbstractController(cc) with Circe\n```", "```java\nimport play.api.libs.circe.Circe\nimport io.circe.generic.auto._\nimport io.circe.syntax._\n```", "```java\ndef listProduct() = Action.async { request =>\n  val futureProducts = productDao.all()\n    for(\n      products <- futureProducts\n    ) yield (Ok(products.asJson))\n}\n```", "```java\ndef addProduct() = Action.async { request =>\n  Future.successful(Ok)\n}\n```", "```java\n  def addProduct() = Action.async { request =>\n    val productOrNot = decode[Product]\n    (request.body.asText.getOrElse(\"\"))\n    productOrNot match {\n      case Right(product) => {\n        val futureInsert = productDao.insert(product).recover {\n          case e => {\n            Logger.error(\"Error while writing in the database\", e)\n            InternalServerError(\"Cannot write in the database\")\n          }\n        futureInsert.map(_ => Ok)\n      }\n      case Left(error) => {\n        Logger.error(\"Error while adding a product\",error)\n        Future.successful(BadRequest)\n      }\n    }\n  }\n```", "```java\n    \"return a cookie when a user logins\" in {\n       val cookieFuture = wsClient.url(login).post(\"myID\").map {\n        response =>\n          response.headers.get(\"Set-Cookie\").map(\n            header => header.head.split(\";\")\n              .filter(_.startsWith(\"PLAY_SESSION\")).head)\n       }\n      }\n      val loginCookies = Await.result(cookieFuture, 1 seconds)\n      val play_session_Key = loginCookies.get.split(\"=\").head\n      play_session_Key must equal(\"PLAY_SESSION\")\n    }\n```", "```java\n# Login\nPOST    /v1/login    controllers.WebServices.login\n```", "```java\n  def login() = Action { request =>\n    request.body.asText match {\n      case None => BadRequest\n      case Some(user) => Ok.withSession(\"user\" -> user)\n    }\n  }\n```", "```java\n    \"list all the products in a cart\" in {\n      val loginCookies = \n      Await.result(wsClient.url(login).post(\"me\").map(p => \n      p.headers.get(\"Set-Cookie\").map(_.head.split(\";\").head)), 1     \n      seconds)\n      val play_session = loginCookies.get.split(\"=\").tail.mkString(\"\")\n\n      val response = (wsClient.url(productsInCartURL).\n      addCookies(DefaultWSCookie(\"PLAY_SESSION\", \n        play_session)).get().futureValue\n      println(response)\n      response.status mustBe OK\n\n      val listOfProduct = decode[Seq[Cart]](response.body)\n      listOfProduct.right.get mustBe empty\n    }\n```", "```java\n    lazy val defaultCookie = {\n      val loginCookies = Await.result(wsClient.url(login).post(\"me\")\n        .map(p => p.headers.get(\"Set-Cookie\").map(\n          _.head.split(\";\").head)), 1 seconds)\n      val play_session = loginCookies.get.split(\"=\").tail.mkString(\"\")\n\n      DefaultWSCookie(\"PLAY_SESSION\", play_session)\n    } \n```", "```java\n    \"list all the products in a cart\" in {\n       val response = wsClient.url(productsInCartURL)\n        .addCookies(defaultCookie).get().futureValue\n      response.status mustBe OK\n      val listOfProduct = decode[Seq[Cart]](response.body)\n      listOfProduct.right.get mustBe empty\n    }\n```", "```java\n\"add a product in the cart\" in {\n      val productID = \"ALD1\"\n      val quantity = 1\n      val posted = wsClient.url(actionProductInCartURL(productID,   \n        quantity)).addCookies(defaultCookie).post(\"\").futureValue\n      posted.status mustBe OK\n\n      val response = wsClient.url(productsInCartURL)\n        .addCookies(defaultCookie).get().futureValue\n      println(response)\n      response.status mustBe OK\n      response.body must include(\"ALD1\")\n    }\n```", "```java\n\"delete a product from the cart\" in {\n      val productID = \"ALD1\"\n      val posted = wsClient.url(deleteProductInCartURL(productID))\n        .addCookies(defaultCookie).delete().futureValue\n      posted.status mustBe OK\n\n      val response = wsClient.url(productsInCartURL)\n        .addCookies(defaultCookie).get().futureValue\n      println(response)\n      response.status mustBe OK\n      response.body mustNot include(\"ALD1\")\n    }\n```", "```java\n\"update a product quantity in the cart\" in {\n      val productID = \"ALD1\"\n      val quantity = 1\n      val posted = wsClient.url(actionProductInCartURL(productID, \n        quantity)).addCookies(defaultCookie).post(\"\").futureValue\n      posted.status mustBe OK\n\n      val newQuantity = 99\n      val update = wsClient.url(actionProductInCartURL(productID,     \n        newQuantity)).addCookies(defaultCookie).put(\"\").futureValue\n      update.status mustBe OK\n\n      val response = wsClient.url(productsInCartURL)\n        .addCookies(defaultCookie).get().futureValue\n      println(response)\n      response.status mustBe OK\n      response.body must include(productID)\n      response.body must include(newQuantity.toString)\n    }\n```", "```java\nclass WebServices @Inject()(cc: ControllerComponents, productDao: ProductsDao, cartsDao: CartsDao) extends AbstractController(cc) with Circe {\n```", "```java\ndef listCartProducts() = Action.async { request =>\n  val userOption = request.session.get(\"user\")\n  userOption match {\n    case Some(user) => {\n      Logger.info(s\"User '$user' is asking for the list of product in \n        the cart\")\n      val futureInsert = cartsDao.all(user)\n      futureInsert.map(products => Ok(products.asJson)).recover {\n        case e => {\n          Logger.error(\"Error while writing in the database\", e)\n          InternalServerError(\"Cannot write in the database\")\n        }\n      }\n    }\n      case None => Future.successful(Unauthorized)\n   }\n\n}\n```", "```java\ndef addCartProduct(id: String, quantity: String) = \n  Action.async { request =>\n    val user = request.session.get(\"user\")\n      user match {\n        case Some(user) => {\n          val futureInsert = cartsDao.insert(Cart(user, id, \n            quantity.toInt))\n          futureInsert.map(_ => Ok).recover {\n            case e => {\n              Logger.error(\"Error while writing in the database\", e)\n              InternalServerError(\"Cannot write in the database\")\n          }\n        }\n        }\n        case None => Future.successful(Unauthorized)\n      }\n    }\n```", "```java\nval recoverError: PartialFunction[Throwable, Result] = {\n  case e: Throwable => {\n    Logger.error(\"Error while writing in the database\", e)\n    InternalServerError(\"Cannot write in the database\")\n  }\n}\n```", "```java\n  def deleteCartProduct(id: String) = Action.async { request =>\n    val userOption = request.session.get(\"user\")\n    userOption match {\n      case Some(user) => {\n        Logger.info(s\"User '$user' is asking to delete the product \n          '$id' from the cart\")\n        val futureInsert = cartsDao.remove(ProductInCart(user, id))\n        futureInsert.map(_ => Ok).recover(recoverError)\n      }\n      case None => Future.successful(Unauthorized)\n    }\n  }\n```", "```java\ndef updateCartProduct(id: String, quantity: String) = Action.async {   \nrequest =>\n  val userOption = request.session.get(\"user\")\n  userOption match {\n    case Some(user) => {\n      Logger.info(s\"User '$user' is updating the product'$id' in it \n                  is cart with a quantity of '$quantity\")\n      val futureInsert = cartsDao.update(Cart(user, id, \n                                         quantity.toInt))\n      futureInsert.map(_ => Ok).recover(recoverError)\n     }\n    case None => Future.successful(Unauthorized)\n  }\n}\n```", "```java\n\"io.swagger\" %% \"swagger-play2\" % \"1.6.0\"\n```", "```java\nplay.modules.enabled += \"play.modules.swagger.SwaggerModule\"\n```", "```java\nGET  /swagger.json  controllers.ApiHelpController.getResources\n```", "```java\n\"org.webjars\" % \"swagger-ui\" % \"3.10.0\",\n```", "```java\nGET  /docs/swagger-ui/*file controllers.Assets.at(path:String=\"/public/lib/swagger-ui\", file:String)\n```", "```java\nplay.filters.hosts {\n  # Allow requests from heroku and the temporary domain and localhost:9000.\n  allowed = [\"shopping-fs.herokuapp.com\", \"localhost:9000\"]\n}\nplay.filters.headers.contentSecurityPolicy = \"default-src * 'self' 'unsafe-inline' data:\"\n\n```", "```java\napi.version = \"1.0.0\"\nswagger.api.info = {\n  description : \"API for the online shopping example\",\n  title : \"Online Shopping\"\n}\n```", "```java\n@Singleton\n@Api(value = \"Product and Cart API\")\nclass WebServices @Inject()(cc: ControllerComponents, productDao: ProductsDao, cartsDao: CartsDao) extends AbstractController(cc) with Circe {\n```", "```java\n--- (Running the application, auto-reloading is enabled) ---\n[info] p.c.s.AkkaHttpServer - Listening for HTTP on /0:0:0:0:0:0:0:0:9000\n(Server started, use Enter to stop and go back to the console...)\n```", "```java\n  @ApiOperation(value = \"Login to the service\", consumes = \"text/plain\")\n  @ApiImplicitParams(Array(\n    new ApiImplicitParam(\n      value = \"Create a session for this user\",\n      required = true,\n      dataType = \"java.lang.String\", // complete path\n      paramType = \"body\"\n    )\n  ))\n  @ApiResponses(Array(new ApiResponse(code = 200, message = \"login         success\"), new ApiResponse(code = 400, message =\n     \"Invalid user name supplied\")))\n  def login() = Action { request =>\n```", "```java\n  @ApiOperation(value = \"List all the products\")\n  @ApiResponses(Array(new ApiResponse(code = 200, message = \"The list \n   of all the product\")))\n  def listProduct() = Action.async { request =>\n```", "```java\n@ApiOperation(value = \"Add a product\", consumes = \"text/plain\")\n  @ApiImplicitParams(Array(\n    new ApiImplicitParam(\n      value = \"The product to add\",\n      required = true,\n      dataType = \"models.Product\", // complete path\n      paramType = \"body\"\n    )\n  ))\n  @ApiResponses(Array(new ApiResponse(code = 200, message = \"Product \n    added\"),\n                      new ApiResponse(code = 400, message = \"Invalid \n    body supplied\"),\n                      new ApiResponse(code = 500, message = \"Internal \n    server error, database error\")))\n  def addProduct() = Action.async { request =>\n```", "```java\n  @ApiOperation(value = \"List the product in the cart\", consumes = \n    \"text/plain\")\n  @ApiResponses(Array(new ApiResponse(code = 200, message = \"Product \n    added\"),\n    new ApiResponse(code = 401, message = \"unauthorized, please login \n    before to proceed\"),\n    new ApiResponse(code = 500, message = \"Internal server error, \n    database error\")))\n  def listCartProducts() = Action.async { request =>\n```", "```java\n  @ApiOperation(value = \"Add a product in the cart\", consumes = \n    \"text/plain\")\n  @ApiResponses(Array(new ApiResponse(code = 200, message = \"Product \n    added in the cart\"),\n    new ApiResponse(code = 400, message = \"Cannot insert duplicates in \n    the database\"),\n    new ApiResponse(code = 401, message = \"unauthorized, please login \n    before to proceed\"),\n    new ApiResponse(code = 500, message = \"Internal server error, \n    database error\")))\n  def addCartProduct(\n         @ApiParam(name = \"id\", value = \"The product code\", required = \n            true) id: String,\n         @ApiParam(name = \"quantity\", value= \"The quantity to add\", \n            required = true) quantity: String) = Action.async { request \n            =>\n```", "```java\n  @ApiOperation(value = \"Update a product quantity in the cart\", \n    consumes = \"text/plain\")\n  @ApiResponses(Array(new ApiResponse(code = 200, message = \"Product \n    added in the cart\"),\n    new ApiResponse(code = 401, message = \"unauthorized, please login \n    before to proceed\"),\n    new ApiResponse(code = 500, message = \"Internal server error, \n    database error\")))\n  def updateCartProduct(@ApiParam(name = \"id\", value = \"The product \n    code\", required = true, example = \"ALD1\") id: String, \n    @ApiParam(name = \"quantity\", value= \"The quantity to update\", \n    required = true) quantity: String) = Action.async { request =>\n\n```", "```java\n  @ApiOperation(value = \"Delete a product from the cart\", consumes = \n    \"text/plain\")\n  @ApiResponses(Array(new ApiResponse(code = 200, message = \"Product \n    delete from the cart\"),\n    new ApiResponse(code = 401, message = \"unauthorized, please login \n    before to proceed\"),\n    new ApiResponse(code = 500, message = \"Internal server error, \n    database error\")))\n  def deleteCartProduct(@ApiParam(name = \"id\", value = \"The product \n    code\", required = true) id: String) = Action.async { request =>\n```", "```java\ngit push heroku master\n```"]