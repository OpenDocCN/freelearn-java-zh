["```java\nimport greenfoot.*;\nimport java.awt.Color;\n\npublic class UIMainWorld extends World {\n\n  public UIMainWorld() {\n    super(600, 400, 1);\n    testActors();\n  }\n\n  private void testActors() {\n    /*   Begin comment\n    TextBox t1 = new TextBox(\n    \" This is a question?\\n Yes, it is! \",\n    24, true, Color.BLUE, Color.YELLOW);\n    addObject(t1, 150, 50);\n    TextBox t2 = new TextBox(\"This is one line\",\n    18, false, Color.BLACK, Color.WHITE);\n    addObject(t2, 150, 120);\n    Button b1 = new Button(\"button-blue.png\",\n    \"button-green.png\");\n    addObject(b1, 450, 50);\n    Menu m1 = new Menu(\" Destroy Everything? \",\n    \"Are you sure?\", 18,\n    Color.BLUE, Color.WHITE\n    Color.BLACK, Color.WHITE,\n    new DestroyCommands());\n    addObject(m1, 450, 120);\n    Menu m2 = new Menu(\" File \",\n    \"New\\nOpen\\nSave\\nClose\\nExit\", 18,\n    Color.BLACK, Color.lightGray,\n    Color.WHITE, Color.BLUE,\n    new FileCommands());\n    addObject(m2, 450, 180);\n    HUD h = new HUD();\n    addObject(h, 300, 310);\n    Label l = new Label(\"This is a label\", 18);\n    addObject(l, 150, 180);\n    End Comment  */\n  }\n}\n```", "```java\nimport greenfoot.*;\n\npublic class Button extends Actor {\n  protected String first;\n  protected String second;\n\n  public Button(String f, String s) {\n    first = f;\n    second = s;\n    setImage(f);\n  }\n\n  public void act() {\n    handleMouseClicks();\n  }\n\n  private void handleMouseClicks() {\n    if( Greenfoot.mousePressed(this) ) {\n      setImage(second);\n    } else if( Greenfoot.mouseClicked(this) ) {\n      setImage(first);\n      clickedAction();\n    }\n  }\n\n  protected void clickedAction() {\n    // Can either fill this in or have subclasses override.\n  }\n}\n```", "```java\nButton b1 = new Button(\"button-blue.png\", \"button-green.png\");\naddObject(b1, 450, 50);\n```", "```java\nimport greenfoot.*;\nimport java.awt.Color;\n\npublic class TextBox extends Actor {\n  private GreenfootImage img;\n  private boolean border = false;\n  private int fontSize;\n  private Color foreground;\n  private Color background;\n\n  public TextBox(String s, int fs, boolean b,\n  Color fg, java.awt.Color bg) {\n    super();\n    fontSize = fs;\n    foreground = fg;\n    background = bg;\n    img = new GreenfootImage(s, fontSize,\n    foreground, background);\n    border = b;\n    display();\n  }\n\n  public void setText(String s) {\n    img = new GreenfootImage(s, fontSize,\n    foreground, background);\n    display();\n  }\n\n  private void display() {\n    setImage(img);\n    if( border ) {\n      img.setColor(Color.BLACK);\n      img.drawRect(0, 0, img.getWidth()-1,\n      img.getHeight()-1);\n      setImage(img);\n    }\n  }\n}\n```", "```java\nimport greenfoot.*;\nimport java.awt.Color;\n\npublic class Menu extends Actor\n{\n  private TextBox titleBar;\n  private TextBox menuItems;\n  private MenuCommands menuCommands;\n  private int fontSize = 24;\n  private boolean visible = false;\n  private Color mainFG;\n  private Color mainBG;\n  private Color secondFG;\n  private Color secondBG;\n  int th, mh;  /* title and menu height */\n\n  public Menu(String tb, String i, int fs,\n  Color fg1, Color bg1, Color fg2, Color bg2,\n  MenuCommands mc) {\n    mainFG = fg1;\n    mainBG = bg1;\n    secondFG = fg2;\n    secondBG = bg2;\n    titleBar = new TextBox(tb, fs, true, mainFG, mainBG);\n    menuItems = new TextBox(i, fs, true, secondFG, secondBG);\n    menuCommands = mc;\n    fontSize = fs;\n  }\n\n  public Menu() {\n    this(\"not initialized\", \"none\", 24,\n    Color.BLACK, Color.lightGray, Color.BLACK,\n    Color.WHITE, null);\n  }\n\n  protected void addedToWorld(World w) {\n    w.addObject(titleBar, getX(), getY());\n    th = titleBar.getImage().getHeight();\n    mh = menuItems.getImage().getHeight();\n  }\n\n  public void act() {\n    handleMouse();\n  }\n\n  private void handleMouse() {\n    if( Greenfoot.mouseClicked(titleBar) ) {\n      if( !visible ) {\n        getWorld().addObject(menuItems,\n        getX(), getY()+(th+mh)/2);\n      } else {\n        getWorld().removeObject(menuItems);\n      }\n      visible = !visible;\n    }\n\n    if( Greenfoot.mouseClicked(menuItems)) {\n      MouseInfo mi = Greenfoot.getMouseInfo();\n      int menuIndex =\n      ((mi.getY()-menuItems.getY()+mh/2)-1)/fontSize;\n      menuCommands.execute(menuIndex, getWorld());\n      visible = !visible;\n      getWorld().removeObject(menuItems);\n    }\n  }\n}\n```", "```java\n((mi.getY()-menuItems.getY()+mh/2)-1)/fontSize\n```", "```java\nimport greenfoot.*;\n\npublic interface MenuCommands {\n  public void execute(int idx, World w);\n}\n```", "```java\nimport greenfoot.*;\n\npublic class DestroyCommands implements MenuCommands {\n  public void execute(int idx, World w) {\n    System.out.println(\"Boooom!!!!\");\n  }\n}\n```", "```java\nimport greenfoot.*;\n\npublic class FileCommands implements MenuCommands {\n  public void execute(int idx, World w) {\n    switch(idx) {\n      case 0:\n      System.out.println(\"Running New command\");\n      break;\n      case 1:\n      System.out.println(\"Running Open command\");\n      break;\n      case 2:\n      System.out.println(\"Running Save command\");\n      break;\n      case 3:\n      System.out.println(\"Running Close command\");\n      break;\n      case 4:\n      System.out.println(\"Running Exit command\");\n      break;\n    }\n  }\n}\n```", "```java\nimport greenfoot.*;\n\npublic class HUD extends Actor {\n  private TransparentRectangle home;\n  private TransparentRectangle favorite;\n  private TransparentRectangle print;\n  private TransparentRectangle cart;\n  private static final int W = 70;\n  private static final int H = 70;\n\n  protected void addedToWorld(World w) {\n    home = new TransparentRectangle(W,H);\n    w.addObject(home,\n    getX()-getImage().getWidth()/2+W/2,\n    getY());\n    favorite = new TransparentRectangle(W,H);\n    w.addObject(favorite, getX()-W+20, getY());\n    print = new TransparentRectangle(W,H);\n    w.addObject(print, getX()+W-10, getY());\n    cart = new TransparentRectangle(W,H);\n    w.addObject(cart,\n    getX()+getImage().getWidth()/2-W/2,\n    getY());\n  }\n\n  private class TransparentRectangle extends Actor {\n    public TransparentRectangle(int w, int h) {\n      GreenfootImage img = new GreenfootImage(w,h);\n      setImage(img);\n    }\n  }\n\n  public void act() {\n    handleMouseClicks();\n  }\n\n  private void handleMouseClicks() {\n    if( Greenfoot.mouseClicked(home) ) {\n      System.out.println(\"Clicked Home\");\n    }\n    if( Greenfoot.mouseClicked(favorite) ) {\n      System.out.println(\"Clicked Favorite\");\n    }\n    if( Greenfoot.mouseClicked(print) ) {\n      System.out.println(\"Clicked Print\");\n    }\n    if( Greenfoot.mouseClicked(cart) ) {\n      System.out.println(\"Clicked Cart\");\n    }\n  }\n}\n```", "```java\nimport greenfoot.*;\n\npublic class MazeWorldScreens extends World\n{\n  int playMode = 0;\n\n  public MazeWorldScreens() {\n    super(600, 400, 1);\n  }\n\n  public void startGame() {\n    MazeWorld mw = new MazeWorld(playMode);\n    Greenfoot.setWorld(mw);\n  }\n\n}\n```", "```java\nimport greenfoot.*;\nimport java.awt.Color;\n\npublic class MazeWorldIntro extends MazeWorldScreens {\n  TextBox mode;\n\n  public MazeWorldIntro() {\n    super();\n    prepare();\n  }\n\n  public void setMode(String s, int i) {\n    mode.setText(s);\n    playMode = i;\n  }\n\n  private void prepare() {\n    PlayButton pb = new PlayButton(\n    \"playButton1.png\", \"playButton2.png\");\n    addObject(pb, 200, 250);\n    Menu m = new Menu(\" Choose game difficulty...\",\n    \"Easy\\nMedium\\nHard \", 18,\n    Color.BLUE, Color.WHITE,\n    Color.BLACK, Color.WHITE,\n    new GameDifficultyCommands());\n    addObject(m, 400, 250);\n    mode = new TextBox(\" Play the game in Easy Mode \",\n    28, true, Color.BLUE, Color.WHITE);\n    addObject(mode, 300, 300);\n  }\n\n}\n```", "```java\nimport greenfoot.*;\n\npublic interface MenuCommands {\n  public void execute(int idx, World w);\n}\n```", "```java\nimport greenfoot.*;\n\npublic class GameDifficultyCommands implements MenuCommands {\n  public void execute(int idx, World w) {\n    MazeWorldIntro mwi = (MazeWorldIntro) w;\n    switch(idx) {\n      case 0:\n      mwi.setMode(\" Play the game in Easy Mode \", idx);\n      break;\n      case 1:\n      mwi.setMode(\" Play the game in Medium Mode \",\n      idx);\n      break;\n      case 2:\n      mwi.setMode(\" Play the game in Hard Mode \", idx);\n      break;\n    }\n  }\n}\n```", "```java\nimport greenfoot.*;\npublic class MazeWorldGameOver extends MazeWorldScreens {\n\n  public MazeWorldGameOver(int pm) {\n    super();\n    prepare();\n    playMode = pm;\n  }\n\n  private void prepare() {\n    PlayButton pb = new PlayButton(\"playButton1.png\",\n    \"playButton2.png\");\n    addObject(pb, 420, 330);\n  }\n}\n```", "```java\nimport greenfoot.*; \n\npublic class UI extends Actor {  \n}\n```", "```java\nimport greenfoot.*;\n\npublic class PlayButton extends Button {\n\n  public PlayButton(String f, String s) {\n    super(f,s);\n  }\n\n  protected void clickedAction() {\n    MazeWorldScreens mws = (MazeWorldScreens) getWorld();\n    mws.startGame();\n  }\n}\n```", "```java\nimport greenfoot.*;\n\npublic class MazeWorldHUD extends UI {\n  private TransparentRectangle stun;\n  private TransparentRectangle slow;\n  private TransparentRectangle talk;\n  private static final int W = 29;\n  private static final int H = 22;\n\n  protected void addedToWorld(World w) {\n    stun = new TransparentRectangle(W,H);\n    w.addObject(stun, getX()-W, getY());\n    slow = new TransparentRectangle(W,H);\n    w.addObject(slow, getX(), getY());\n    talk = new TransparentRectangle(W,H);\n    w.addObject(talk, getX()+W, getY());\n\n  }\n\n  private class TransparentRectangle extends Actor {\n    public TransparentRectangle(int w, int h) {\n      GreenfootImage img = new GreenfootImage(w,h);\n      setImage(img);\n    }\n  }\n\n  public void act() {\n    handleMouseClicks();\n  }\n\n  private void handleMouseClicks() {\n    MazeWorld mw = (MazeWorld) getWorld();\n    if( Greenfoot.mouseClicked(stun) ) {\n      mw.stunAllEnemies();\n    }\n    if( Greenfoot.mouseClicked(slow) ) {\n      mw.slowAllEnemies();\n    }\n    if( Greenfoot.mouseClicked(talk) ) {\n      mw.makeSnakesTalk();\n    }\n  }\n}\n```", "```java\nimport greenfoot.*;\nimport java.util.List;\nimport java.util.ListIterator;\nimport java.util.Stack;\n\npublic class MazeWorld extends World {\n  private int xOffset = 0;\n  private Hiker hiker;\n  private final static int SWIDTH = 600;\n  private final static int SHEIGHT = 400;\n  private final static int WWIDTH = 1200;\n  private final static int TWIDTH = 25;\n  private final static int THEIGHT = TWIDTH;\n  private final static int TILEOFFSET = TWIDTH/2;\n  private final static String validSpaces = \"WG\";\n  private int playMode = 0;\n\n  private final static String[] WORLD = {\n    \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\",\n    \"BWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWUWWWWB\",\n    \"BWWWWWWWWWWWWWUUWWWWWWWWUUUUUUUWWWWWWWWWWWUWWWWB\",\n    \"BWWWWWUUUUUWWWUUUWWWWWWWWWWWWWWWWWWWWWWWWWUWWWWB\",\n    \"BWWWWWUUUUUWWWWWWWWWWWWWWWWWWWWWWWWWUWWWWUUUWWWB\",\n    \"BWWWWWWWWWWWWWWWWWUUUUUWWWWWWWWUUUUUUWWWWWWWWWWB\",\n    \"BWWWWWWWWWWWWWWWWWUUUUWWWWWWWWWUUUUUUUUWWWWWWWWB\",\n    \"BWWWWUUUUUUUWWWUWWWWWWWWWWWWWWWUWWWWWWWWWWWWWWWB\",\n    \"BWWWWWWWUUUWWWWUWWWWWWWWWWUWWWWUWWWWWWWWWWWWWWWB\",\n    \"BWWWWWWWWWWWWWWWWWWWWWWWWWUWWWWWWWWWWWWWWWWWUWWB\",\n    \"BWWWWWWWWWWWWWWWWWWWUUUUUUUWWWWWWWWWUUUUWWWWUWWB\",\n    \"BWWWWWWWWWWWWWUUWWWWUWWWWWWWWWWWWWWWUUUUWWWWUWWB\",\n    \"BWWWWWWWUUUUUUUUUWWWWWWWWWWWWWWWWWWWUUUUUUWWUWWB\",\n    \"BWWWWWWWUUUUUUUUUWWWWWWWWWUUWWWWWWWWWWWWWWWWUWWB\",\n    \"BWWWWWWWUWWWWWWWWWWWWWWWWWUUWWWWWWWWWWWWWWWWUWGB\",\n    \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"\n  };\n\n  /* constructors */\n public MazeWorld() {\n this(0);\n }\n\n public MazeWorld(int pm) {\n super(SWIDTH, SHEIGHT, 1, false);\n playMode = pm;\n createWorldFromTiles();\n shiftWorld(0);\n prepare();\n }\n\n  /* ability methods */\n  public void shiftWorld(int dx) {\n    if( (xOffset + dx) <= 0\n    && (xOffset + dx) >= SWIDTH - WWIDTH) {\n      xOffset = xOffset+dx;\n      shiftWorldActors(dx);\n    }\n  }\n\n  /* accessor methods */\n  public int getTileWidth() {\n    return TWIDTH;\n  }\n\n  public int getTileHeight() {\n    return THEIGHT;\n  }\n\n  public int getTileOffset() {\n    return TILEOFFSET;\n  }\n\n  public String[] getStringWorld() {\n    return WORLD;\n  }\n\n  public int getXHiker() {\n    return hiker.getX()-xOffset;\n  }\n\n  public int getYHiker() {\n    return hiker.getY();\n  }\n\n  public String getValidSpaces() {\n    return validSpaces;\n  }\n\n  public void stunAllEnemies() {\n List<ScrollingEnemy> le =\n getObjects(ScrollingEnemy.class);\n ListIterator<ScrollingEnemy> listItr = le.listIterator();\n while( listItr.hasNext() ) {\n ScrollingEnemy se = listItr.next();\n se.stun();\n }\n }\n\n public void slowAllEnemies() {\n List<ScrollingEnemy> le =\n getObjects(ScrollingEnemy.class);\n ListIterator<ScrollingEnemy> listItr = le.listIterator();\n while( listItr.hasNext() ) {\n ScrollingEnemy se = listItr.next();\n se.slow();\n }\n }\n\n public void makeSnakesTalk() {\n List<Snake> le = getObjects(Snake.class);\n ListIterator<Snake> listItr = le.listIterator();\n while( listItr.hasNext() ) {\n Snake s = listItr.next();\n s.talk();\n }\n }\n\n public void gameOver() {\n MazeWorldGameOver mwgo = new MazeWorldGameOver(playMode);\n Greenfoot.setWorld(mwgo);\n }\n\n  /* private methods */\n  private void shiftWorldActors(int dx) {\n    List<ScrollingActor> saList =\n    getObjects(ScrollingActor.class);\n    for( ScrollingActor a : saList ) {\n      a.setAbsoluteLocation(dx);\n    }\n  }\n\n  private void createWorldFromTiles() {\n    for( int i=0; i < WORLD.length; i++ ) {\n      for( int j=0; j < WORLD[i].length(); j++ ) {\n        addActorAtTileLocation(WORLD[i].charAt(j), j, i);\n      }\n    }\n  }\n\n  private void addActorAtTileLocation(char c, int x, int y) {\n    Actor tile = null;\n    switch(c) {\n      case 'W':\n      tile = new WhiteBlock();\n      break;\n      case 'B':\n      tile = new BlackBlock();\n      break;\n      case 'U':\n      tile = new BlueBlock();\n      break;\n      case 'G':\n      tile = new GoldBlock();\n      break;\n    }\n    if( tile != null) addObject(tile, TILEOFFSET+x*TWIDTH,\n    TILEOFFSET+y*THEIGHT);\n\n  }\n\n  private void prepare()\n  {\n    hiker = new Hiker();\n    addObject(hiker, 80, 200);\n    addObject(new MazeWorldHUD(), 300, 387);\n    addObject(new Mouse(), 60,40);\n    addObject(new Spider(), 1000,40);\n    addObject(new Spider(), 120,340);\n    addObject(new Spider(), 1050,250);\n    addObject(new Snake(), 1050,250);\n    addObject(new Mouse(), 1000,200);\n    addObject(new Snake(), 400,260);\n    if( playMode >= 1 ) {\n addObject(new Snake(), 80,40);\n if( playMode == 2 ) {\n addObject(new Mouse(), 50,350);\n }\n }\n  }\n}\n```", "```java\nimport greenfoot.*;\n\nabstract public class ScrollingEnemy extends ScrollingActor {\n  protected static final int SPEED = 1;\n  private static final int BOUNDARY = 40;\n  protected int speedX = SPEED;\n  protected int speedY = SPEED;\n  private int stunTime = 0;\n private int slowTime = 0;\n private boolean stunned = false;\n private boolean slowed = false;\n\n  /* initialization */\n  protected void addedToWorld(World w) {\n    MazeWorld mw = (MazeWorld) w;\n    GreenfootImage img = getImage();\n    img.scale(mw.getTileWidth(),mw.getTileHeight());\n    setImage(img);\n  }\n\n  public void stun() {\n if( stunned == false ) {\n stunned = true;\n stunTime = 100;\n }\n }\n\n public void slow() {\n if( slowed == false ) {\n slowed = true;\n slowTime = 400;\n }\n }\n\n  /* ability methods */\n  public void act() {\n    if( !stunned ) {\n if( slowTime > 0 ) {\n slowed = (slowTime-- % 2) == 0;\n }\n if( !slowed ) {\n        sense();\n        reaction();\n        boundedMove();\n      }\n } else {\n if( stunTime-- < 0 ) {\n stunTime = 0;\n stunned = false;\n }\n }\n  }\n\n  protected void sense() {\n    // No smarts\n  }\n\n  protected void reaction() {\n    // No reaction\n  }\n\n  protected void boundedMove() {\n    setLocation(getX()+speedX, getY()+speedY);\n    if( isTouching(ScrollingObstacle.class) ) {\n      setLocation(getX()-speedX, getY()-speedY);\n    }\n  }\n}\n```", "```java\nimport greenfoot.*;\nimport java.util.List;\nimport java.awt.Color;\n\npublic class Snake extends ScrollingEnemy {\n  private static final int PATHLENGTH = 200;\n  private static final int INRANGE = 100;\n  private int pathCounter = PATHLENGTH;\n  private boolean pathing = false;\n  private int rememberSpeedX = 0;\n  private List<Hiker> lse;\n  private boolean talking = false;\n private int talkTime = 0;\n private TextBox sss;\n\n  /* constructors */\n  public Snake() {\n    speedX = rememberSpeedX = SPEED;\n    speedY = 0;\n  }\n\n  public void talk() {\n if( talking == false ) {\n talking = true;\n talkTime = 100;\n sss = new TextBox(\" sssssss \", 14, true,\n Color.BLACK, Color.WHITE);\n getWorld().addObject(sss, getX()-20, getY()-20);\n }\n }\n\n  /* ability methods */\n  protected void sense() {\n    // If near, move towards enemy\n    lse = getObjectsInRange(INRANGE,Hiker.class);\n    pathing = lse.isEmpty();\n  }\n\n  protected void reaction() {\n    if( pathing ) {\n      speedX = rememberSpeedX;\n      speedY = 0;\n      if( --pathCounter == 0 ) {\n        pathCounter = PATHLENGTH;\n        speedX = rememberSpeedX = -speedX;\n      }\n    } else {\n      speedX = lse.get(0).getX() > getX() ? 1 : -1;\n      speedY = lse.get(0).getY() > getY() ? 1 : -1;\n    }\n\n    if( talking ) {\n sss.setLocation(getX()-20, getY()-20);\n if( talkTime-- < 0 ) {\n talking = false;\n talkTime = 0;\n getWorld().removeObject(sss);\n\n }\n    }\n  }\n}\n```"]