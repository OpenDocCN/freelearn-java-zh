["```java\n    mvn archetype:generate \\\n    -DarchetypeGroupId=org.codehaus.mojo.archetypes \\\n    -DarchetypeArtifactId=pom-root \\\n    -DarchetypeVersion=RELEASE \\\n    -DgroupId=dev.davivieira \\\n    -DartifactId=topology-inventory \\\n    -Dversion=1.0-SNAPSHOT \\\n    archetype:generate Maven goal to generate a Maven root project for the system. It creates a pom.xml file with the coordinates we pass in the command’s parameters, such as groupId and artifactId.\n    ```", "```java\n    cd topology-inventory\n    mvn archetype:generate \\\n      -DarchetypeGroupId=de.rieckpil.archetypes  \\\n      -DarchetypeArtifactId=testing-toolkit \\\n      -DarchetypeVersion=1.0.0 \\\n      -DgroupId=dev.davivieira \\\n      -DartifactId=domain \\\n      -Dversion=1.0-SNAPSHOT \\\n      -Dpackage=dev.davivieira.topologyinventory.domain \\\n    archetype:generate Maven goal. The result is a Maven module called domain that is part of the topology-inventory Maven project.\n    ```", "```java\nmodule domain {\n}\n```", "```java\n<dependencies>\n  <dependency>\n      <groupId>org.projectlombok</groupId>\n      <artifactId>lombok</artifactId>\n      <version>1.18.20</version>\n      <scope>compile</scope>\n  </dependency>\n</dependencies>\n```", "```java\n<plugins>\n  <plugin>\n      <groupId>org.apache.maven.plugins</groupId>\n      <artifactId>maven-compiler-plugin</artifactId>\n      <version>3.8.1</version>\n      <configuration>\n          <source>17</source>\n          <target>17</target>\n          <annotationProcessorPaths>\n              <path>\n                   <groupId>org.projectlombok</groupId>\n                   <artifactId>lombok</artifactId>\n                   <version>1.18.26</version>\n              </path>\n          </annotationProcessorPaths>\n      </configuration>\n  </plugin>\n</plugins>\n```", "```java\nmodule domain {\n    requires static lombok;\n}\n```", "```java\n    package dev.davivieira.topologyinventory.domain.vo;\n    import lombok.EqualsAndHashCode;\n    import lombok.Getter;\n    import lombok.ToString;\n    import java.util.UUID;\n    @Getter\n    @ToString\n    @EqualsAndHashCode\n    public class Id {\n        private final UUID id;\n        private Id(UUID id){\n            this.id = id;\n        }\n        public static Id withId(String id){\n            return new Id(UUID.fromString(id));\n        }\n        public static Id withoutId(){\n            return new Id(UUID.randomUUID());\n        }\n    }\n    ```", "```java\n    package dev.davivieira.topologyinventory.domain.vo;\n    public enum Vendor {\n        CISCO,\n        NETGEAR,\n        HP,\n        TPLINK,\n        DLINK,\n        JUNIPER\n    }\n    ```", "```java\n    package dev.davivieira.topologyinventory.domain.vo;\n    public enum Model {\n        XYZ0001,\n        XYZ0002,\n        XYZ0003,\n        XYZ0004\n    }\n    ```", "```java\n    package dev.davivieira.topologyinventory.domain.vo;\n    public enum Protocol {\n        IPV4,\n        IPV6;\n    }\n    ```", "```java\n    package dev.davivieira.topologyinventory.domain.vo;\n    public enum RouterType {\n        EDGE,\n        CORE;\n    }\n    ```", "```java\n    package dev.davivieira.topologyinventory.domain.vo;\n    public enum SwitchType {\n        LAYER2,\n        LAYER3;\n    }\n    ```", "```java\n    package dev.davivieira.topologyinventory.domain.vo;\n    public record Location (\n        String address,\n        String city,\n        String state,\n        int zipCode,\n        String country,\n        float latitude,\n        float longitude\n    ) {}\n    ```", "```java\n    /** Code omitted **/\n    public class IP {\n        private final String ipAddress;\n        private final Protocol;\n        public IP(String ipAddress){\n          if(ipAddress == null)\n              throw new IllegalArgumentException(\n              \"Null IP address\");\n             this.ipAddress = ipAddress;\n          if(ipAddress.length()<=15) {\n              this.protocol = Protocol.IPV4;\n          } else {\n            this.protocol = Protocol.IPV6;\n          }\n        }\n    /** Code omitted **/\n    }\n    ```", "```java\n    package dev.davivieira.topologyinventory.domain.vo;\n    import lombok.Builder;\n    import lombok.EqualsAndHashCode;\n    import lombok.Getter;\n    import lombok.ToString;\n    @Builder\n    @Getter\n    @ToString\n    @EqualsAndHashCode\n    public class Network {\n        private IP networkAddress;\n        private String networkName;\n        private int networkCidr;\n        public Network(IP networkAddress,\n        String networkName, int networkCidr){\n            if(networkCidr <1 || networkCidr>32){\n                throw new IllegalArgumentException(\n                \"Invalid CIDR value\");\n            }\n            this.networkAddress = networkAddress;\n            this.networkName = networkName;\n            this.networkCidr = networkCidr;\n        }\n    }\n    ```", "```java\npackage dev.davivieira.topologyinventory.domain.entity;\nimport dev.davivieira.topologyinventory.domain.vo.IP;\nimport dev.davivieira.topologyinventory.domain.vo.Id;\nimport dev.davivieira.topologyinventory.domain.vo.Location;\nimport dev.davivieira.topologyinventory.domain.vo.Model;\nimport dev.davivieira.topologyinventory.domain.vo.Vendor;\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\n@Getter\n@AllArgsConstructor\npublic abstract sealed class Equipment\npermits Router, Switch {\n    protected Id id;\n    protected Vendor vendor;\n    protected Model model;\n    protected IP ip;\n    protected Location location;\n    public static Predicate<Equipment>\n    getVendorPredicate(Vendor vendor){\n        return r -> r.getVendor().equals(vendor);\n    }\n}\n```", "```java\npackage dev.davivieira.topologyinventory.domain.entity;\nimport dev.davivieira.topologyinventory.domain.vo.IP;\nimport dev.davivieira.topologyinventory.domain.vo.Id;\nimport dev.davivieira.topologyinventory.domain.vo.Location;\nimport dev.davivieira.topologyinventory.domain.vo.Model;\nimport dev.davivieira.topologyinventory.domain.\n  vo.RouterType;\nimport dev.davivieira.topologyinventory.domain.vo.Vendor;\nimport lombok.Getter;\nimport java.util.function.Predicate;\n@Getter\npublic abstract sealed class Router extends Equipment\npermits CoreRouter, EdgeRouter {\n    protected final RouterType routerType;\n    public static Predicate<Router>\n    getRouterTypePredicate(RouterType routerType){\n        return r -> r.getRouterType().equals(routerType);\n    }\n    /** Code omitted **/\n}\n```", "```java\npublic static Predicate<Equipment>\n  getModelPredicate(Model model){\n    return r -> r.getModel().equals(model);\n}\npublic static Predicate<Equipment>\n  getCountryPredicate(Location location){\n    return p ->\n     p.location.country().equals(location.country());\n}\n```", "```java\n/** Imports omitted **/\npublic final class CoreRouter extends Router {\n    /** Code omitted **/\n    public Router addRouter(Router anyRouter){\n        var sameCountryRouterSpec =\n        new SameCountrySpec(this);\n        var sameIpSpec =\n        new SameIpSpec(this);\n        sameCountryRouterSpec.check(anyRouter);\n        sameIpSpec.check(anyRouter);\n        return this.routers.put(anyRouter.id, anyRouter);\n    }\n/** Code omitted **/\n}\n```", "```java\npublic Router removeRouter(Router anyRouter){\n    var emptyRoutersSpec = new EmptyRouterSpec();\n    var emptySwitchSpec = new EmptySwitchSpec();\n    switch (anyRouter.routerType) {\n        case CORE → {\n            var coreRouter = (CoreRouter)anyRouter;\n            emptyRoutersSpec.check(coreRouter);\n        }\n        case EDGE → {\n            var edgeRouter = (EdgeRouter)anyRouter;\n            emptySwitchSpec.check(edgeRouter);\n        }\n    }\n    return this.routers.remove(anyRouter.id);\n}\n```", "```java\n/** Imports omitted **/\npublic final class SameCountrySpec extends AbstractSpecifi\n  cation<Equipment> {\n    private final Equipment equipment;\n    public SameCountrySpec(Equipment equipment){\n        this.equipment = equipment;\n    }\n/** Code omitted **/\n}\n```", "```java\n@Override\npublic boolean isSatisfiedBy(Equipment anyEquipment) {\n    if(anyEquipment instanceof CoreRouter) {\n        return true;\n    } else if (\n    anyEquipment != null && this.equipment != null) {\n        return this\n        .equipment\n        .getLocation()\n        .country()\n        .equals(\n           anyEquipment.getLocation().country());\n    } else{\n        return false;\n    }\n}\n```", "```java\n@Override\npublic void check(Equipment equipment) {\n    if(!isSatisfiedBy(equipment))\n        throw new GenericSpecificationException(\n        \"The equipments should be in the same country\");\n}\n```", "```java\n/** Imports omitted **/\npublic final class SameIpSpec extends AbstractSpecification\n  <Equipment>{\n    private final Equipment equipment;\n    public SameIpSpec(Equipment equipment){\n        this.equipment = equipment;\n    }\n    @Override\n    public boolean isSatisfiedBy(Equipment anyEquipment) {\n        return\n       !equipment.getIp().equals(anyEquipment.getIp());\n    }\n    @Override\n    public void check(Equipment equipment) {\n        if(!isSatisfiedBy(equipment))\n            throw new GenericSpecificationException(\"It's\n              not possible to attach routers with the same\n              IP\");\n    }\n}\n```", "```java\n/** Imports omitted **/\npublic final class EmptyRouterSpec extends AbstractSpecification\n  <CoreRouter> {\n    @Override\n    public boolean isSatisfiedBy(CoreRouter coreRouter) {\n        return coreRouter.getRouters()==null||\n                coreRouter.getRouters().isEmpty();\n    }\n    @Override\n    public void check(CoreRouter coreRouter) {\n        if(!isSatisfiedBy(coreRouter))\n            throw new GenericSpecificationException(\"It\n              isn't allowed to remove a core router with\n              other routers attached to it\");\n    }\n}\n```", "```java\n/** Imports omitted **/\npublic final class EmptySwitchSpec extends AbstractSpecification\n  <EdgeRouter> {\n    @Override\n    public boolean isSatisfiedBy(EdgeRouter edgeRouter) {\n        return edgeRouter.getSwitches()==null ||\n                edgeRouter.getSwitches().isEmpty();\n    }\n    @Override\n    public void check(EdgeRouter edgeRouter) {\n        if(!isSatisfiedBy(edgeRouter))\n            throw new GenericSpecificationException(\"It\n              isn't allowed to remove an edge router with a\n              switch attached to it\");\n    }\n}\n```", "```java\n/** Imports omitted **/\npublic final class EdgeRouter extends Router {\n    /**Code omitted **/\n    private final Map<Id, Switch> switches;\n    public void addSwitch(Switch anySwitch){\n        var sameCountryRouterSpec =\n        new SameCountrySpec(this);\n        var sameIpSpec = new SameIpSpec(this);\n        sameCountryRouterSpec.check(anySwitch);\n        sameIpSpec.check(anySwitch);\n        this.switches.put(anySwitch.id,anySwitch);\n    }\n    /** Code omitted **/\n}\n```", "```java\npublic Switch removeSwitch(Switch anySwitch){\n    var emptyNetworkSpec = new EmptyNetworkSpec();\n    emptyNetworkSpec.check(anySwitch);\n    return this.switches.remove(anySwitch.id);\n}\n```", "```java\n/** Imports omitted **/\npublic final class Switch extends Equipment {\n    private final SwitchType switchType;\n    private final     List<Network> switchNetworks;\n    /** Code omitted **/\n    public static Predicate<Switch>getSwitchTypePredicate\n      (SwitchType switchType){\n        return s -> s.switchType.equals(switchType);\n    }\n    /** Code omitted **/\n}\n```", "```java\npublic boolean addNetworkToSwitch(Network network) {\n    var availabilitySpec =\n    new NetworkAvailabilitySpec(network);\n    var cidrSpec = new CIDRSpecification();\n    var amountSpec = new NetworkAmountSpec();\n    cidrSpec.check(network.getNetworkCidr());\n    availabilitySpec.check(this);\n    amountSpec.check(this);\n    return this.switchNetworks.add(network);\n}\n```", "```java\npublic boolean removeNetworkFromSwitch(\n  Network network){\n    return this.switchNetworks.remove(network);\n}\n```", "```java\npackage dev.davivieira.topologyinventory.domain.service;\nimport dev.davivieira.topologyinventory.domain.\n  entity.Equipment;\nimport dev.davivieira.topologyinventory.domain.\n  entity.Router;\nimport dev.davivieira.topologyinventory.domain.vo.Id;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.function.Predicate;\nimport java.util.stream.Collectors;\npublic class RouterService {\n    public static List<Router>\n    filterAndRetrieveRouter(List<Router> routers,\n    Predicate<Equipment> routerPredicate){\n        return routers\n                .stream()\n                .filter(routerPredicate)\n                .collect(Collectors.<Router>toList());\n    }\n    public static Router findById(\n    Map<Id,Router> routers, Id id){\n        return routers.get(id);\n    }\n}\n```", "```java\npackage dev.davivieira.topologyinventory.domain.service;\nimport dev.davivieira.topologyinventory.domain.\n  entity.Switch;\nimport dev.davivieira.topologyinventory.domain.vo.Id;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.function.Predicate;\nimport java.util.stream.Collectors;\npublic class SwitchService {\n    public static List<Switch> filterAndRetrieveSwitch\n      (List<Switch>   switches, Predicate<Switch>\n       switchPredicate){\n     return switches\n                .stream()\n                .filter(switchPredicate)\n                .collect(Collectors.<Switch>toList());\n    }\n    public static Switch findById(Map<Id,Switch> switches,\n      Id id){\n     return switches.get(id);\n    }\n}\n```", "```java\npackage dev.davivieira.topologyinventory.domain.service;\nimport dev.davivieira.topologyinventory.domain.vo.Network;\nimport java.util.List;\nimport java.util.function.Predicate;\nimport java.util.stream.Collectors;\npublic class NetworkService {\n    public static List<Network> filterAndRetrieveNetworks\n      (List<Network> networks, Predicate<Network>\n       networkPredicate){\n        return networks\n                .stream()\n                .filter(networkPredicate)\n                .collect(Collectors.<Network>toList());\n    }\n}\n```", "```java\n    @Test\n    public void addNetworkToSwitch(){\n        var location = createLocation(\"US\");\n        var newNetwork = createTestNetwork(\"30.0.0.1\", 8);\n        var networkSwitch =\n        createSwitch(\"30.0.0.0\", 8, location);\n        assertTrue(\n        networkSwitch.addNetworkToSwitch(newNetwork));\n    }\n    ```", "```java\n    @Test\n    public void\n    addNetworkToSwitch_failBecauseSameNetworkAddress(){\n        var location = createLocation(\"US\");\n        var newNetwork = createTestNetwork(\"30.0.0.0\", 8);\n        var networkSwitch = createSwitch(\n        \"30.0.0.0\", 8, location);\n        assertThrows(GenericSpecificationException.class,\n          () ->\n          networkSwitch.addNetworkToSwitch(newNetwork));\n    }\n    ```", "```java\n    @Test\n    public void addSwitchToEdgeRouter(){\n        edgeRouter.addSwitch(networkSwitch);\n        assertEquals(1,edgeRouter.getSwitches().size());\n    }\n    addSwitchToEdgeRouter method:\n    ```", "```java\n    @Test\n    public void addSwitchToEdgeRouter\n      _failBecauseEquipmentOfDifferentCountries(){\n        var locationUS = createLocation(\"US\");\n        var locationJP = createLocation(\"JP\");\n        var networkSwitch =\n        createSwitch(\"30.0.0.0\", 8, locationUS);\n        var edgeRouter =\n        createEdgeRouter(locationJP,\"30.0.0.1\");\n        assertThrows(GenericSpecificationException.class,\n        () -> edgeRouter.addSwitch(networkSwitch));\n    }\n    ```", "```java\n    @Test\n    public void addEdgeToCoreRouter(){\n        coreRouter.addRouter(edgeRouter);\n        assertEquals(1,coreRouter.getRouters().size());\n    }\n    addEdgeToCoreRouter method:\n    ```", "```java\n    @Test\n    public void addEdgeToCoreRouter\n      _failBecauseRoutersOfDifferentCountries(){\n        var locationUS = createLocation(\"US\");\n        var locationJP = createLocation(\"JP\");\n        var edgeRouter =\n        createEdgeRouter(locationUS,\"30.0.0.1\");\n        var coreRouter =\n        createCoreRouter(locationJP, \"40.0.0.1\");\n        assertThrows(GenericSpecificationException.class,\n        () -> coreRouter.addRouter(edgeRouter));\n    }\n    ```", "```java\n    @Test\n    public void addCoreToCoreRouter(){\n        coreRouter.addRouter(newCoreRouter);\n        assertEquals(2,coreRouter.getRouters().size());\n    }\n    ```", "```java\n    @Test\n    public void addCoreToCoreRouter\n      _failBecauseRoutersOfSameIp(){\n        var location = createLocation(\"US\");\n        var coreRouter = createCoreRouter(\n        location, \"30.0.0.1\");\n        var newCoreRouter = createCoreRouter(\n        location, \"30.0.0.1\");\n        assertThrows(GenericSpecificationException.class,\n        () -> coreRouter.addRouter(newCoreRouter));\n    }\n    ```", "```java\n    @Test\n    public void removeRouter(){\n        var location = createLocation(\"US\");\n        var coreRouter = createCoreRouter(\n        location, \"30.0.0.1\");\n        var edgeRouter = createEdgeRouter(\n        location, \"40.0.0.1\");\n        var expectedId = edgeRouter.getId();\n        coreRouter.addRouter(edgeRouter);\n        var actualId =\n        coreRouter.removeRouter(edgeRouter).getId();\n        assertEquals(expectedId, actualId);\n    }\n    ```", "```java\n    @Test\n    public void removeSwitch(){\n        var location = createLocation(\"US\");\n        var network = createTestNetwork(\"30.0.0.0\", 8);\n        var networkSwitch =\n        createSwitch(\"30.0.0.0\", 8, location);\n        var edgeRouter = createEdgeRouter(\n        location, \"40.0.0.1\");\n        edgeRouter.addSwitch(networkSwitch);\n        networkSwitch.removeNetworkFromSwitch(network);\n        var expectedId =\n        Id.withId(\n        \"f8c3de3d-1fea-4d7c-a8b0-29f63c4c3490\");\n        var actualId=\n        edgeRouter.removeSwitch(networkSwitch).getId();\n        assertEquals(expectedId, actualId);\n    }\n    ```", "```java\n    @Test\n    public void removeNetwork(){\n        var location = createLocation(\"US\");\n        var network = createTestNetwork(\"30.0.0.0\", 8);\n        var networkSwitch =\n        createSwitch(\"30.0.0.0\", 8, location);\n        assertEquals(\n        1, networkSwitch.getSwitchNetworks().size());\n        assertTrue(\n        networkSwitch.removeNetworkFromSwitch(network));\n        assertEquals(\n        0, networkSwitch.getSwitchNetworks().size());\n    }\n    ```", "```java\n    @Test\n    public void filterRouterByType(){\n        List<Router> routers = new ArrayList<>();\n        var location = createLocation(\"US\");\n        var coreRouter = createCoreRouter(\n        location, \"30.0.0.1\");\n        var edgeRouter = createEdgeRouter(\n        location, \"40.0.0.1\");\n        routers.add(coreRouter);\n        routers.add(edgeRouter);\n        var coreRouters =\n        RouterService.filterAndRetrieveRouter(routers,\n        Router.getRouterTypePredicate(RouterType.CORE));\n        var actualCoreType =\n        coreRouters.get(0).getRouterType();\n        assertEquals(RouterType.CORE, actualCoreType);\n        var edgeRouters =\n        RouterService.filterAndRetrieveRouter(routers,\n        Router.getRouterTypePredicate(RouterType.EDGE));\n        var actualEdgeType =\n        edgeRouters.get(0).getRouterType();\n        assertEquals(RouterType.EDGE, actualEdgeType);\n    }\n    ```", "```java\n    @Test\n    public void filterRouterByVendor(){\n        List<Router> routers = new ArrayList<>();\n        var location = createLocation(\"US\");\n        var coreRouter = createCoreRouter(\n        location, \"30.0.0.1\");\n        var edgeRouter = createEdgeRouter(\n        location, \"40.0.0.1\");\n        routers.add(coreRouter);\n        routers.add(edgeRouter);\n        var actualVendor =\n        RouterService.\n          filterAndRetrieveRouter(routers,\n        Router.getVendorPredicate(\n        Vendor.HP)).get(0).getVendor();\n        assertEquals(Vendor.HP, actualVendor);\n        actualVendor =\n        RouterService.filterAndRetrieveRouter(routers,\n        Router.getVendorPredicate(\n        Vendor.CISCO)).get(0).getVendor();\n        assertEquals(Vendor.CISCO, actualVendor);\n    }\n    ```", "```java\n    @Test\n    public void filterRouterByLocation(){\n        List<Router> routers = new ArrayList<>();\n        var location = createLocation(\"US\");\n        var coreRouter = createCoreRouter(\n        location, \"30.0.0.1\");\n        routers.add(coreRouter);\n        var actualCountry =\n        RouterService.filterAndRetrieveRouter(routers,\n        Router.getCountryPredicate(\n        location)).get(0).getLocation().getCountry();\n        assertEquals(\n        location.getCountry(), actualCountry);\n    }\n    ```", "```java\n    @Test\n    public void filterRouterByModel(){\n        List<Router> routers = new ArrayList<>();\n        var location = createLocation(\"US\");\n        var coreRouter = createCoreRouter(\n        location, \"30.0.0.1\");\n        var newCoreRouter = createCoreRouter(\n        location, \"40.0.0.1\");\n        coreRouter.addRouter(newCoreRouter);\n        routers.add(coreRouter);\n        var actualModel=\n        RouterService.filterAndRetrieveRouter(routers,\n        Router.getModelPredicate(\n        Model.XYZ0001)).get(0).getModel();\n        assertEquals(Model.XYZ0001, actualModel);\n    }\n    ```", "```java\n    @Test\n    public void filterSwitchByType(){\n        List<Switch> switches = new ArrayList<>();\n        var location = createLocation(\"US\");\n        var networkSwitch = createSwitch(\n        \"30.0.0.0\", 8, location);\n        switches.add(networkSwitch);\n        var actualSwitchType =\n        SwitchService.filterAndRetrieveSwitch(switches,\n        Switch.getSwitchTypePredicate(\n        SwitchType.LAYER3)).get(0).getSwitchType();\n        assertEquals(\n        SwitchType.LAYER3, actualSwitchType);\n    }\n    ```", "```java\n    @Test\n    public void findRouterById() {\n        List<Router> routers = new ArrayList<>();\n        Map<Id, Router> routersOfCoreRouter =\n        new HashMap<>();\n        var location = createLocation(\"US\");\n        var coreRouter = createCoreRouter(\n        location, \"30.0.0.1\");\n        var newCoreRouter = createCoreRouter(\n        location, \"40.0.0.1\");\n        coreRouter.addRouter(newCoreRouter);\n        routersOfCoreRouter.put(\n        newCoreRouter.getId(), newCoreRouter);\n        var expectedId = newCoreRouter.getId();\n        var actualId =\n        RouterService.findById(\n        routersOfCoreRouter, expectedId).getId();\n        assertEquals(expectedId, actualId);\n    }\n    ```", "```java\n    @Test\n    public void findSwitchById(){\n        List<Switch> switches = new ArrayList<>();\n        Map<Id, Switch> switchesOfEdgeRouter =\n        new HashMap<>();\n        var location = createLocation(\"US\");\n        var networkSwitch = createSwitch(\n        \"30.0.0.0\", 8, location);\n        switchesOfEdgeRouter.put(\n        networkSwitch.getId(), networkSwitch);\n        var expectedId =\n        Id.withId(\"f8c3de3d-1fea-4d7c-a8b0-29f63c4c3490\");\n        var actualId =\n        SwitchService.findById(\n        switchesOfEdgeRouter, expectedId).getId();\n        assertEquals(expectedId, actualId);\n    }\n    ```", "```java\n[INFO] -------------------------------------------------------\n[INFO]  T E S T S\n[INFO] -------------------------------------------------------\n[INFO] Running dev.davivieira.topologyinventory.domain.DomainTest\n[INFO] Tests run: 19, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.04 s - in dev.davivieira.topologyinventory.domain.DomainTest\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 19, Failures: 0, Errors: 0, Skipped: 0\n```"]