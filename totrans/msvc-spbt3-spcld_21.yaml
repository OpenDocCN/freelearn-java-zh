- en: '21'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installation Instructions for macOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will learn how to set up the tools required to run the commands
    described in this book on macOS. We will also learn how to get access to the source
    code of the book.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing the source code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are using a Windows PC, you should follow the instructions in *Chapter
    22*, *Installation Instructions for Microsoft Windows with WSL 2 and Ubuntu*.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All of the commands described in this book are run on a MacBook Pro with macOS
    Ventura and use **bash**, a command shell. All commands have been verified on
    both an Intel and Apple silicon-based MacBook Pro.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using another shell, such as **zsh**, I recommend that you switch
    to bash before running commands from this book using this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Installing tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will learn how to install and configure the tools. Here
    is a list of the tools we will install, with a link to more information on downloading
    and installation, if required:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Git**: [https://git-scm.com/downloads](https://git-scm.com/downloads)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Docker Desktop for Mac**: [https://hub.docker.com/editions/community/docker-ce-desktop-mac/](https://hub.docker.com/editions/community/docker-ce-desktop-mac/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Java**: [https://adoptium.net/installation](https://adoptium.net/installation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**curl**: [https://curl.haxx.se/download.html](https://curl.haxx.se/download.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**jq**: [https://stedolan.github.io/jq/download/](https://stedolan.github.io/jq/download/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Spring Boot CLI**: [https://docs.spring.io/spring-boot/docs/3.0.4/reference/html/getting-started.html#getting-started.installing.cli](https://docs.spring.io/spring-boot/docs/3.0.4/reference/html/getting-started.html#getting-started.installing.cli)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Siege**: [https://github.com/JoeDog/siege#where-is-it](https://github.com/JoeDog/siege#where-is-it)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Helm**: [https://helm.sh/docs/intro/install/](https://helm.sh/docs/intro/install/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**kubectl**: [https://kubernetes.io/docs/tasks/tools/install-kubectl-macos/](https://kubernetes.io/docs/tasks/tools/install-kubectl-macos/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Minikube**: [https://minikube.sigs.k8s.io/docs/start/](https://minikube.sigs.k8s.io/docs/start/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Istioctl**: [https://istio.io/latest/docs/setup/getting-started/#download](https://istio.io/latest/docs/setup/getting-started/#download)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following versions have been used when writing this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Git**: v2.37.1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Docker Desktop for Mac**: v4.12.0'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Java**: v17.0.6'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**curl**: v7.86.0'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**jq**: v1.6'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Spring Boot CLI**: v3.0.4'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Siege**: v4.1.6'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Helm**: v3.11.1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**kubectl**: v1.26.1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Minikube**: v1.29.0'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Istioctl**: v1.17.0'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most of the tools will be installed using the **Homebrew** package manager ([https://brew.sh/](https://brew.sh/)),
    so we will start by installing Homebrew. After that, we will install most of the
    tools using Homebrew and wrap up by installing the remaining tools.
  prefs: []
  type: TYPE_NORMAL
- en: For tools where control is required over the version that is installed – not
    just installing the latest available – I find Homebrew insufficient. When it comes
    to `minikube`, `kubectl`, and `istioctl`, it is important to install versions
    that are compatible with each other, specifically when it comes to the versions
    of Kubernetes that they support. Simply installing and upgrading to the latest
    versions can lead to situations where incompatible versions of `minikube`, Kubernetes,
    and Istio are used.
  prefs: []
  type: TYPE_NORMAL
- en: For supported Kubernetes versions when it comes to Istio, see [https://istio.io/latest/about/supported-releases/#support-status-of-istio-releases](https://istio.io/latest/about/supported-releases/#support-status-of-istio-releases).
    For `minikube`, see [https://minikube.sigs.k8s.io/docs/handbook/config/#selecting-a-kubernetes-version](https://minikube.sigs.k8s.io/docs/handbook/config/#selecting-a-kubernetes-version).
  prefs: []
  type: TYPE_NORMAL
- en: Installing Homebrew
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you don’t have Homebrew installed already, you can install it with the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Installing Homebrew also installs the command-line tools for **Xcode**, if they
    are not already installed, so it might take a while.
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify the installation of Homebrew with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Expect a response such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Using Homebrew to install tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'On macOS, `curl` is already pre-installed and `git` was installed as part of
    the installation of the command-line tools for Xcode, required by Homebrew. Homebrew
    can be used to install Docker, Java, jq, the Spring Boot CLI, Helm, and Siege
    with the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Brew installs the tools in different folders on Intel and Apple silicon-based
    Macs, in `/usr/local` and `/opt/homebrew` respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Java is installed using the distribution called **Eclipse Temurin**; for more
    information, see [https://adoptium.net/temurin/](https://adoptium.net/temurin/).
  prefs: []
  type: TYPE_NORMAL
- en: Install tools without Homebrew
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When it comes to installing `minikube`, `kubectl`, and `istioctl`, we will avoid
    using `brew` for improved control over what versions we install. The commands
    look slightly different on Intel and Apple silicon-based Macs, so will go through
    them separately.
  prefs: []
  type: TYPE_NORMAL
- en: Install tools on an Intel-based Mac
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To install the `kubectl` version used in this book, run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'To install the `minikube` version used in this book, run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'To install the `istioctl` version used in this book, run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Install tools on an Apple silicon-based Mac
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To install the `kubectl` version used in this book, run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'To install the `minikube` version used in this book, run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'To install the `istioctl` version used in this book, run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to use the latest versions, with the risk of incompatible versions
    as described above, you should be able to install `minikube`, `kubectl`, and `istioctl`
    with Homebrew using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: With the tools installed, we need to take some post-installation actions before
    we can verify the installations.
  prefs: []
  type: TYPE_NORMAL
- en: Post-installation actions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to take some actions after installing Java and Docker to make them
    work properly:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Java**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a command to your login script to set up the `JAVA_HOME` environment variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: If you are not using `~/.bash_profile` as your login script, you need to replace
    it with the login script you use, for example, `~/.zshrc`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Apply the settings in your current terminal session:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '**Docker**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To be able to run the examples in this book, it is recommended that you configure
    Docker so that it can use most of the CPUs except a few (allocating all CPUs to
    Docker can make the computer unresponsive when tests are running) and 10 GB of
    memory, if available. The initial chapters will work fine with less memory allocated,
    for example, 6 GB. But the more features we add later in the book, the more memory
    will be required by the Docker host to be able to run all the microservices smoothly.
  prefs: []
  type: TYPE_NORMAL
- en: Before we can configure Docker, we must ensure that the Docker daemon is running.
    You can start Docker as you start any application on a Mac, for example, by using
    **Spotlight** or opening the `Application` folder in **Finder** and starting it
    from there.
  prefs: []
  type: TYPE_NORMAL
- en: 'To configure Docker, click on the Docker icon in the status bar and select
    **Preferences…**. Go to the **Resources** tab in the **Preferences** settings
    for Docker and set **CPUs** and **Memory**, as illustrated by the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated](img/B19825_21_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21.1: Docker Desktop resource configuration'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you don’t want to start Docker manually after a system startup, you can
    go to the **General** tab and select the **Start Docker Desktop when you log in**
    option, as shown in the screenshot below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](img/B19825_21_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21.2: Docker Desktop general configuration'
  prefs: []
  type: TYPE_NORMAL
- en: Finalize the configuration by clicking on the **Apply & Restart** button.
  prefs: []
  type: TYPE_NORMAL
- en: With the post-installation actions performed, we can verify that the tools are
    installed as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Verifying the installations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To verify the tool installations, run the following commands to print each
    tool’s version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'These commands will return output like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19825_21_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21.3: Versions used'
  prefs: []
  type: TYPE_NORMAL
- en: With the tools installed and verified, let’s see how we can access the source
    code for this book.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the source code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The source code for this book can be found in the GitHub repository: [https://github.com/PacktPublishing/Microservices-with-Spring-Boot-and-Spring-Cloud-Third-Edition](https://github.com/PacktPublishing/Microservices-with-Spring-Boot-and-Spring-Cloud-Third-Edition).'
  prefs: []
  type: TYPE_NORMAL
- en: To be able to run the commands that are described in this book, download the
    source code to a folder and set up an environment variable, `$BOOK_HOME`, that
    points to that folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sample commands are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The Java source code is written for Java SE 8 and uses a Java SE 17 JRE when
    executed in Docker containers. The following versions of Spring are used:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Spring Framework**: 6.0.6'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Spring Boot**: 3.0.4'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Spring Cloud**: 2022.0.1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code examples in each chapter all come from the source code in `$BOOK_HOME/ChapterNN`,
    where `NN` is the number of the chapter. The code examples in the book are in
    many cases edited to remove irrelevant parts of the source code, such as comments,
    imports, and log statements.
  prefs: []
  type: TYPE_NORMAL
- en: Using an IDE
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I recommend that you work with your Java code using an IDE that supports the
    development of Spring Boot applications, such as Visual Studio Code, Spring Tool
    Suite, or IntelliJ IDEA Ultimate Edition. However, you don’t need an IDE to be
    able to follow the instructions in this book.
  prefs: []
  type: TYPE_NORMAL
- en: The structure of the code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Each chapter consists of a number of Java projects, one for each microservice
    and Spring Cloud service, plus a couple of library projects used by the other
    projects. *Chapter 14* contains the largest number of projects; its project structure
    looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'All projects are built using Gradle and have a file structure that follows
    Gradle’s standard conventions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: For more information on how to organize a Gradle project, see [https://docs.gradle.org/current/userguide/organizing_gradle_projects.html](https://docs.gradle.org/current/userguide/organizing_gradle_projects.html).
  prefs: []
  type: TYPE_NORMAL
- en: With this, we have the required tools installed for macOS and the source code
    for the book downloaded. In the next chapter, we will learn how to set up the
    tools in a Windows environment.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to install, configure, and verify the tools
    required to run the commands described in this book on macOS. For development,
    we will use `git`, `docker`, `java`, and `spring`. To create a Kubernetes environment
    to deploy our microservice at runtime, we will use `minikube`, `helm`, `kubectl`,
    and `istioctl`. Finally, to run tests to verify that the microservices work as
    expected at runtime, we will use `curl`, `jq`, and `siege`.
  prefs: []
  type: TYPE_NORMAL
- en: We also learned how to access the source code from GitHub and how the source
    code is structured.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to set up the same tools in an environment
    based on Microsoft Windows with **Windows Subsystem for Linux v2** (**WSL 2**),
    where we will use a Linux server based on Ubuntu.
  prefs: []
  type: TYPE_NORMAL
