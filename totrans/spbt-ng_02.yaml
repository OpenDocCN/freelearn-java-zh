- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setting Up the Development Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned about Spring Boot in a nutshell and its
    advantages. We also tackled the latest features of Java 17\. The same goes for
    Angular; you had an overview of Angular and the benefits of using it to develop
    frontend applications.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will teach you how to set up your computer’s development environment
    to develop your full-stack Java and Angular application. We will tackle different
    IDEs and text editors to write our code and make sure everything has been configured
    before we start with the development.
  prefs: []
  type: TYPE_NORMAL
- en: Installing everything correctly from the beginning will help us avoid issues
    and write code without any interruptions.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing VS Code and IntelliJ IDEA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Java 17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing SDKMAN
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up IntelliJ IDEA with Java 17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing REST Client VS Code or JetBrains and Angular DevTools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Git version control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the links to the software you need to install:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Download VS Code (for Windows, Mac, and** **Linux)**: https://code.visualstudio.com/download'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IntelliJ IDEA for** **Windows**: https://www.jetbrains.com/idea/download/#section=windows'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IntelliJ IDEA for** **Mac**: https://www.jetbrains.com/idea/download/#section=mac'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IntelliJ IDEA for** **Linux**: https://www.jetbrains.com/idea/download/#section=linux'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Download Java** **17**: https://www.oracle.com/java/technologies/javase/jdk17-archive-downloads.html'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Angular** **DevTools**: https://chrome.google.com/webstore/detail/angular-devtools/ienfalfjdbdpebioblfackkekamfmbnh'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Node.js and Node Package** **Manager**: https://nodejs.org/en/'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PostgreSQL for** **Windows**: https://www.postgresql.org/download/windows/'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PostgreSQL for** **Mac**: https://www.postgresql.org/download/macosx/'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PostgreSQL for** **Linux**: https://www.postgresql.org/download/linux/'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Git Version** **Control**: https://git-scm.com/'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing VS Code and IntelliJ IDEA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will guide you through the installation and configuration of VS
    Code or IntelliJ IDEA. We will look at the text editor and IDE breakdown of their
    features and plugins that you can use throughout the development.
  prefs: []
  type: TYPE_NORMAL
- en: VS Code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Download the VS Code installer from https://code.visualstudio.com/download.
    We suggest installing VS Code regardless of your machine’s OS, because VS Code
    is lightweight but offers many plugins for Angular development. In addition, VS
    Code is the most common text editor used by JavaScript developers. The editor
    supports TypeScript, code formatting, and code navigation and offers many extensions
    that you can use, especially in developing Angular applications. The following
    are some of the valuable extensions we can use throughout the development:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Code Spell Check**: This is an extension for checking the spelling of our
    source code, which helps us avoid issues caused by typos.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Prettier**: This is a code formatting tool that applies proper alignment
    and indentations on our file after each save.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Angular Snippets**: This is a prevalent extension for Angular developers
    as it adds snippets for Angular, TypeScript, and HTML, which saves much time in
    development with the use of snippets to generate codes on the fly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Angular Files**: This is a valuable extension, especially when you are not
    familiar with the commands in the Angular CLI; this extension will add a menu
    where you can generate Angular components, modules, and services without using
    a CLI.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Angular2-Switcher**: This extension allows us to use shortcut keys to navigate
    between Angular files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**REST Client**: This is an extension in VS Code for testing backend APIs.
    Instead of using third-party applications, we can send requests on our VS Code
    using REST Client.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JSON to TS**: This extension is handy as it automatically converts JSON objects
    into TypeScript models in our frontend.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Angular Language Service**: This is one of the essential plugins for Angular
    development. The extension provides **Angular Code Completion**, **Angular Diagnostic
    Messages**, and **Go to definition** features that make development faster.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This ends VS Code installation and configuration. Your VS Code text editor is
    now set for Angular development.
  prefs: []
  type: TYPE_NORMAL
- en: IntelliJ IDEA
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This IDE is one of the most popular IDEs when developing applications using
    Java. The IDE offers several features to make development easier and faster. The
    following is a list of the tools that IntelliJ IDEA offers:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Terminal**: IntelliJ IDEA comes with a built-in terminal. We can execute
    any commands in the terminal depending on the language we are using for the development.
    The terminal can be accessed by pressing *Alt* + *F12*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Quick fixes**: IntelliJ IDEA detects syntax errors on the fly. Having this
    feature, IntelliJ IDEA also suggests quick fixes for developers to easily correct
    mistakes in the code. The quick fixes can be accessed through a small light bulb
    that appears when IntelliJ IDEA detects an error.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IntelliSense**: IntelliSense is also known as **smart code completion**.
    IntelliJ IDEA analyzes the fragments of code and displays suggestions to complete
    the code on the fly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Advanced refactoring**: IntelliJ IDEA offers a wide range of refactoring
    options. The IDE gives the developer the capability to refactor code automatically.
    Refactoring can also be accessed in the refactor menu.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Navigation and search**: This is one of the most used features of IntelliJ
    IDEA and is very handy, especially with large projects. It helps developers find
    and navigate for a resource, and it can search all of the available controls in
    the IDE.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Detecting duplicates**: This helps developers find duplicates in code and
    gives suggestions to the developers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You should go to https://www.jetbrains.com/idea/download/ to download the installer.
    In addition, you can download the community version, which is the free version
    of Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: After successfully downloading the IDE, run the installer, and the process is
    very much straightforward. It will install the IDE automatically in our terminal.
    After the successful installation of IntelliJ IDEA, we will install plugins/extensions
    that will help us throughout the development.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the plugins, open the IntelliJ IDEA and press *Ctrl* + *Alt* + *S*.
    This will open the **settings** window, then you should go to the **Plugins**
    menu to access the marketplace:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – Marketplace for IntelliJ IDEA plugins](img/B18159_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 – Marketplace for IntelliJ IDEA plugins
  prefs: []
  type: TYPE_NORMAL
- en: 'It will list all of the available plugins we can add for our development. We
    will install the following plugins:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Lombok**: An extension that provides annotations, preventing the writing
    of getter and setter methods all over again; the annotation provides a fully-featured
    builder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maven Helper**: A tool for Maven projects that helps in analyzing conflicting
    dependencies. It can display the installed dependencies as a tree and allows developers
    to examine their relationships.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Junit 5 Mockito Code Generator**: An extension that helps us generate boilerplate
    codes that we commonly need in writing tests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Eclipse Code Formatter**: A tool that integrates the code formatter of Eclipse
    directly to IntelliJ IDEA. This tool is very useful in solving the problem of
    a standard code style when developers use both Eclipse and IntelliJ IDEs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tabnine**: A tool that allows developers to complete lines of code based
    on a million Java programs. It helps reduce standard errors and enables developers
    to code faster with the help of AI.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.gitgnore` to be ignored directly in the IDE without having to type the path
    one by one.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This ends the installation and configuration of IntelliJ IDEA. Your IDE in your
    machine is all set.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Java 17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will explain what Java 17 is and guide you through the installation
    of the kit on Windows, macOS, and Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Java 17 is a **Java Development Kit** (**JDK**) required for building applications
    and components using the Java programming language. It is the latest **long-term
    support** (**LTS**) release, meaning that the vendor (Oracle) will support the
    version for a long time, including the patching of security issues.
  prefs: []
  type: TYPE_NORMAL
- en: Windows installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Execute the following steps to install Java 17 on Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to https://www.oracle.com/java/technologies/downloads/#jdk17-windows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.2 – Java 17 installer](img/B18159_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.2 – Java 17 installer
  prefs: []
  type: TYPE_NORMAL
- en: Select the installer base on your operating system and download it by clicking
    the link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After successful download, open the installer and it will prompt you with a
    step-by-step installation that you can follow.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3 – Java 17 installation setup](img/B18159_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.3 – Java 17 installation setup
  prefs: []
  type: TYPE_NORMAL
- en: Click **Next**, and this will ask you where to place the JDK 17 on your machine.
    You can choose your preferred path where to set the JDK, but the default is commonly
    used.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.4 – Java 17 installation destination folder](img/B18159_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.4 – Java 17 installation destination folder
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, this will automatically install the JDK 17 on your machine after successful
    installation. The following files are also copied to the location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have now successfully installed Java 17 on our Windows machine. Now, we will
    show you the steps for installing Java 17 on macOS.
  prefs: []
  type: TYPE_NORMAL
- en: macOS installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are things to consider when choosing the installer for Java 17 in macOS.
    First, we need to know that the installation for JDK 17 contains version notation
    that represents the **Feature**, **Interim**, and **Update** versions. For example,
    if you are installing interim 1, update 1, and patch 1, the installer name would
    be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**macOS** **x64 systems**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jdk-17.1.1.1_macos-x64_bin.dmg`'
  prefs: []
  type: TYPE_NORMAL
- en: '`jdk-17.1.1.1_macos-x64_bin.tar.gz`'
  prefs: []
  type: TYPE_NORMAL
- en: '**macOS aarch64 (64-bit** **ARM) systems**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jdk-17\. 1.1.1_macos-aarch64_bin.dmg`'
  prefs: []
  type: TYPE_NORMAL
- en: '`jdk-17\. 1.1.1_macos-aarch64_bin.tar.gz`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following steps to install Java 17 on macOS:'
  prefs: []
  type: TYPE_NORMAL
- en: To download the installer go to https://www.oracle.com/java/technologies/downloads/#jdk17-mac
    and select the installer based on your operating system architecture. You can
    download either the `.dmg` or the `tar.gz` installer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click the `.dmg` file to start the installer. A `.pkg` file. Double-click
    the `JDK 17\. pkg` icon to start the installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click **Continue** and the installation window will appear. After clicking
    **Install**, the following message will be displayed: **Installer is trying to
    install new software. Enter your password to** **allow this**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, enter your administrator user name and password and click **Install software
    to continue**, and this will install the software automatically on your machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have now successfully installed Java 17 on macOS. Now, we will show you the
    steps for installing Java 17 on Linux platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Linux installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When installing Java 17 on a Linux system, we also need to be aware of the
    version notation, as when choosing the installer for macOS. The version format
    represents the **Feature**, **Interim**, and **Update** versions. So, for example,
    if we are downloading the interim 1, update 1, and patch 2, then the installer
    name would be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`jdk-17.1.1.2_linux-x64_bin.tar.gz`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jdk-17.1.1.2_aarch64_bin.tar.gz`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can install the JDK on a Linux platform using the archive files or **Red
    Hat Package** **Manager** (**RPM**):'
  prefs: []
  type: TYPE_NORMAL
- en: '**Archive Files (.tar.gz)** will install a private version of the JDK at any
    location without affecting other JDK installations. The bundle is available for
    Linux x66 and Linux aarchx64.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**RPM Packages (.rpm)** will execute a system-wide installation of the JDK
    and require users to have root access.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 64-Bit on Linux platforms
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To install the JDK for 64-bit Linux platforms, the `tar.gz` archive file, also
    known as a **tarball**, can be downloaded from the following URL: https://www.oracle.com/java/technologies/downloads/#jdk17-linux.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The files that we see are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`jdk-17.interim.update.patch_linux-x64_bin.tar.gz`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jdk-17.interim.update.patch_linux-aarch64_bin.tar.gz`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After successfully downloading the tarball file, accept the license agreement
    and place the `.tar.gz` file in the directory where you want to install the JDK.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unpack the file and install the downloaded JDK as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Or with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: After successfully installing the JDK, we can see that it is now installed in
    a directory called `jdk-17.interim.patch.update`.
  prefs: []
  type: TYPE_NORMAL
- en: 64-Bit on RPM-based Linux platforms
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can install the JDK using RPM binary files for RPM-based Linux platforms,
    such as Oracle and Red Hat. Before installing the JDK, we must first make sure
    that we have root access. You can have root access by running the `su` command
    and entering the super password.
  prefs: []
  type: TYPE_NORMAL
- en: 'The RPM file can be downloaded from https://www.oracle.com/java/technologies/downloads/#jdk17-linux,
    and we get the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`jdk-17.interim.update.patch_linux-x64_bin.rpm`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jdk-17.interim.update.patch_linux-aarch64_bin.rpm`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Install the package using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Or use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'After executing the command, the JDK is now successfully installed on our machine.
    Then, for future version upgrades, we can execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Or use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We are done installing and configuring the JDK 17 on our machine on different
    operating systems. In the next section, we will install SDKMAN.
  prefs: []
  type: TYPE_NORMAL
- en: Installing SDKMAN
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will explain what the purpose of SDKMAN is in developing Java applications.
    This section will also guide you through the installation of SDKMAN on Windows,
    macOS, and Linux.
  prefs: []
  type: TYPE_NORMAL
- en: '**SDKMAN** (**Software Development Kit Manager**) is a tool for managing parallel
    versions of Java on our machine. We can have multiple versions of installed Java
    versions on our computer. You can also install Java directly using SDKMAN. It
    will automatically install the latest stable version or the version you specify.'
  prefs: []
  type: TYPE_NORMAL
- en: SDKMAN is mainly created for Unix operating systems, but it also supports Bash
    and ZSH shells for other operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: SDKMAN features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the features of SDKMAN:'
  prefs: []
  type: TYPE_NORMAL
- en: SDKMAN makes the installation of Java easier. We will only execute a command
    with the version we want to install, and it will do all the work.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SDKMAN also supports Java development packages. It can install SDKs for JVM,
    such as **Groovy** and **Kotlin**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SDKMAN can run on all Unix platforms: macOS, Cygwin, Solaris, and Linux.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SDKMAN commands
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To see all the SDKs that SDKMAN supports, we can execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The command will list all the SDKs and the Java library managers we can download
    on our machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install a specific SDK, for example, we want to install the latest SDK for
    Java, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'If we want to install a specific version of the SDK, we will specify the version
    in the command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'To switch between versions when multiple versions are installed on our computer,
    we will execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Installation on macOS and Linux
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It only takes a few commands to install SDKMAN on macOS and Linux. For us to
    install SDKMAN, we will execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'After following all the instructions on installing SDKMAN, open a new terminal
    and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The command will successfully install the manager in your terminal. To check
    whether the installation is successful, we can execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This will display the current SDKMAN version installed on your machine.
  prefs: []
  type: TYPE_NORMAL
- en: Installation on Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need several steps to install SDKMAN on Windows since SDKMAN requires Bash
    tools. In this case, the first thing we need is a **Git Bash** **Environment**
    (**MinGW**):'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will install `7-Zip`, and after successful installation, we will
    execute the following command to make a symbolic link in the Git Bash environment,
    having `7-Zip` as the `zip` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now we can use the commands we use in Linux to install the SDKMAN.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install SDKMAN, we will execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After the installation, restart the Git Bash shell to run the SDKMAN commands.
    We can execute the following command to verify that our installation is successful:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It will prompt the current version of SDKMAN installed in our terminal.
  prefs: []
  type: TYPE_NORMAL
- en: We are done installing and configuring SDKMAN on our machine on different operating
    systems. In the next section, we will configure IntelliJ IDEA with the installed
    Java 17.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up IntelliJ IDEA with Java 17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have installed our IDE (IntelliJ IDEA) and Java 17 on our machine in the
    previous sections. Now, we will guide you on how to configure Java 17 on new and
    existing projects.
  prefs: []
  type: TYPE_NORMAL
- en: Using Java 17 on new projects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We only need the following few steps to use Java 17 on our new Java project:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your IntelliJ IDEA terminal and select **File** | **New** | **New Project**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.5 – Creating a new project in IntelliJ IDEA](img/B18159_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.5 – Creating a new project in IntelliJ IDEA
  prefs: []
  type: TYPE_NORMAL
- en: We will see the preceding modal and select the type of project we need to develop.
    We can also see that we can choose the SDK version we need for our project.
  prefs: []
  type: TYPE_NORMAL
- en: We will use Java 17, so we need to select **OpenJDK-17**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Next** and configure your project name and directory. This will set
    up your Java application with the chosen SDK version.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have now successfully configured our new project with JDK 17\. Now we want
    to configure existing projects with JDK 17.
  prefs: []
  type: TYPE_NORMAL
- en: Using Java 17 on existing projects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Upon upgrading our project from an older version to Java 17, we need to follow
    several steps for our applications to work. First, remember that this upgrading
    to Java 17 step is only the general configuration in upgrading. It depends on
    the current version of the project. Also, some code and dependencies are being
    used on your project that are already deprecated.
  prefs: []
  type: TYPE_NORMAL
- en: 'We only need a few steps to use Java 17 on our existing Java project:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your IntelliJ IDEA IDE and open your existing project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **File** in the menu and select **Project Structure**. We will see a
    modal where we can configure our **Project Settings**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.6 – IntelliJ IDEA project settings](img/B18159_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.6 – IntelliJ IDEA project settings
  prefs: []
  type: TYPE_NORMAL
- en: Under the **Project SDK** field, we will choose **openjdk-17** to use Java 17
    in our project. We can also select **Project language level** to use some of the
    new features of Java 17, such as **sealed classes** and **pattern matching for
    switch**. Remember, when changing **Project language level**, make sure that the
    same level is also set for the modules under the **Modules** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are now done configuring our project with Java 17\. In the next section,
    we will install helpful tools for our development in Java and Angular, such as
    REST Client and Angular DevTools.
  prefs: []
  type: TYPE_NORMAL
- en: Installing REST Client VS Code or JetBrains and Angular DevTools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will guide you through the installation of **REST Client**
    and **Angular DevTools**. REST Client is an essential tool in RESTful APIs. It
    is a tool for sending HTTP requests to the API you develop to debug the flow of
    your code on the endpoint as well as its response. There are several third-party
    platforms for API testing, such as Postman, but REST Client can be directly installed
    in your IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Angular DevTools, on the other hand, is a Chrome extension for Angular that
    provides debugging and profiling capabilities for Angular applications. The extension
    supports **Angular version 9** and later, and it is also Ivy enabled.
  prefs: []
  type: TYPE_NORMAL
- en: Installing REST Client in VS Code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We only need to follow these steps to install REST Client in VS Code:'
  prefs: []
  type: TYPE_NORMAL
- en: First, open VS Code Editor and go to the **Extensions** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for `REST client`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **REST Client** developed **by Huachao Mao** and install the extension.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.7 – REST Client installation](img/B18159_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.7 – REST Client installation
  prefs: []
  type: TYPE_NORMAL
- en: 'After installation, we can use the extension by creating HTTP files in our
    project and writing the endpoints with the HTTP requests. The following is an
    example format of using REST Client:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: We have now successfully installed REST Client in our VS Code and can test RESTful
    APIs. Now, we will show you how to install Angular DevTools, which will be important
    for debugging Angular applications.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Angular DevTools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Angular DevTools is a Chrome extension. To install the extension, you can directly
    install it from [https://chrome.google.com/webstore/detail/angular-devtools/ienfalfjdbdpebioblfackkekamfmbnh](https://chrome.google.com/webstore/detail/angular-devtools/ienfalfjdbdpebioblfackkekamfmbnh)
    and follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click **Add to chrome** and we can directly use Angular DevTools on our browser.
    Remember that we can only use Angular DevTools on Angular applications running
    in **development mode**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will see in our developer tools that a new tab named **Angular** was added.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run your Angular project and select the **Angular** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.8 – Angular DevTools installation](img/B18159_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.8 – Angular DevTools installation
  prefs: []
  type: TYPE_NORMAL
- en: 'Angular DevTools will have two tabs: the **Components** tab, which will display
    your application structure, and the **Profiler** tab, which is used to identify
    application performance and bottlenecks.'
  prefs: []
  type: TYPE_NORMAL
- en: We have successfully installed Angular DevTools. Last but not least, we will
    install Git version control, which will be useful for code versioning and team
    collaboration.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Git version control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installing **Git**, a distributed version control system, will be the last thing
    we need in development. Git is important for developers as it is used to save
    your project’s different versions and stages of your repository. Git also helps
    you revert your repository’s recent working version if you made changes in your
    code that broke your app and you can’t fix them anymore.
  prefs: []
  type: TYPE_NORMAL
- en: Go to http://git-scm.com/ and click the **Download** button on the screen to
    download and install Git.
  prefs: []
  type: TYPE_NORMAL
- en: Now you have learned from this final section about Git version control, where
    to get it, what it does, and why it is crucial. Let’s summarize everything.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With this, we have reached the end of this chapter. Let’s have a recap of the
    valuable things you have learned. You have learned how to install VS Code, its
    features, and the essential extensions we can use in Angular development.
  prefs: []
  type: TYPE_NORMAL
- en: You have also learned how to install IntelliJ IDEA, its features, and the plugins
    that we will use in Java development. You have also learned how to install Java
    17 and configure it with new and existing projects in IntelliJ IDEA.
  prefs: []
  type: TYPE_NORMAL
- en: SDKMAN is a development kit manager and it gives us the capability to switch
    JDK versions and install Java development packages directly. REST Client is a
    tool for testing RESTful APIs without downloading any third-party tools on our
    machine.
  prefs: []
  type: TYPE_NORMAL
- en: Angular DevTools is a Chrome extension for Angular that provides debugging and
    profiling capabilities for Angular applications. And last but not least, Git version
    control is a tool for creating histories of your code where you can quickly revert
    or create a new version of your application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be focusing on Spring Boot and its features.
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 2: Backend Development'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This part contains a real-world scenario of developing a Java Spring Boot 2.5
    application. The following chapters are covered in this part:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B18159_03.xhtml#_idTextAnchor058), *Moving into Spring Boot*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B18159_04.xhtml#_idTextAnchor079), *Setting Up the Database and
    Spring Data JPA*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B18159_05.xhtml#_idTextAnchor097), *Building APIs with Spring*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B18159_06.xhtml#_idTextAnchor112), *Documenting APIs with OpenAPI
    Specification*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B18159_07.xhtml#_idTextAnchor123), *Adding Spring Boot Security
    with JWT*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B18159_08.xhtml#_idTextAnchor144), *Logging Events in Spring
    Boot*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B18159_09.xhtml#_idTextAnchor164), *Writing Tests in Spring Boot*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
