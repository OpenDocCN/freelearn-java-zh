["```java\n    public static void printAllElements(int[] anIntArray){ \n        for(int i=0;i<anIntArray.length;i++){ \n            System.out.println(anIntArray[i]); \n        } \n    }\n```", "```java\n       public static void insertElementAtIndex(int[] array, int startIndex, int targetIndex){ \n         int value = array[startIndex]; \n         if(startIndex==targetIndex){ \n            return; \n         }else if(startIndex < tarGetIndex){ \n            for(int i=startIndex+1;i<=targetIndex;i++){ \n                array[i-1]=array[i]; \n            } \n            array[targetIndex]=value; \n         }else{ \n            for(int i=startIndex-1;i>=targetIndex;i--){ \n                array[i+1]=array[i]; \n            } \n            array[targetIndex]=value; \n         } \n       }\n```", "```java\n    public static int [] insertExtraElementAtIndex(int[] array, int index, int value){ \n        int [] newArray = new int[array.length+1]; \n```", "```java\n        for(int i=0;i<index;i++){ \n            newArray[i] = array[i]; \n        } \n```", "```java\n        newArray[index]=value;\n```", "```java\n        for(int i=index+1;i<newArray.length;i++){ \n            newArray[i]=array[i-1]; \n        } \n        return newArray; \n    }\n```", "```java\n    public static int[] appendElement(int[] array, int value){ \n        return insertExtraElementAtIndex(array, array.length, value); \n    }\n```", "```java\npublic class LinkedList<E> implements Iterable<E>, Visualizable { \n```", "```java\n  protected static class Node<E> { \n    protected E value; \n    protected Node next; \n\n    public String toString(){ \n        return value.toString(); \n    } \n  } \n\n  int length = 0; \n  Node<E>[] lastModifiedNode;    \n```", "```java\n    Node<E> first; \n    Node<E> last; \n```", "```java\n    protected Node<E> getNewNode() { \n        Node<E> node = new Node<>(); \n        lastModifiedNode = new Node[]{node}; \n        return node; \n    }\n}\n```", "```java\n    public Node<E> appendLast(E value) { \n        Node node = getNewNode(); \n        node.value = value; \n```", "```java\n        if (last != null) \n            last.next = node;\n```", "```java\n        last = node;\n```", "```java\n        if (first == null) { \n            first = node; \n        } \n        length++; \n        return node;\n    }\n```", "```java\n    public Node<E> appendFirst(E value) { \n        Node node = getNewNode(); \n        node.value = value; \n        node.next = first; \n        first = node; \n        if (length == 0) \n            last = node; \n        length++; \n        return node;\n    }\n```", "```java\n    public Node<E> insert(int index, E value) { \n        Node<E> node = getNewNode(); \n```", "```java\n        if (index < 0 || index > length) { \n            throw new IllegalArgumentException(\"Invalid index for insertion\"); \n        } else if (index == length) { \n            return appendLast(value); \n        } else if (index == 0) { \n            return appendFirst(value); \n        } else { \n```", "```java\n            Node<E> result = first; \n            while (index > 1) { \n                index--; \n                result = result.next; \n            } \n```", "```java\n            node.value = value; \n            node.next = result.next; \n            result.next = node; \n            length++; \n            return node;\n        } \n    }\n```", "```java\n    public E findAtIndex(int index) { \n```", "```java\n        Node<E> result = first; \n        while (index >= 0) { \n            if (result == null) { \n                throw new NoSuchElementException(); \n            } else if (index == 0) { \n```", "```java\n                return result.value; \n            } else { \n```", "```java\n                index--; \n                result = result.next; \n            } \n        } \n        return null; \n    }\n```", "```java\n    public Node<E> removeFirst() { \n        if (length == 0) { \n            throw new NoSuchElementException(); \n        } \n```", "```java\n        Node<E> origFirst = first;        \n        first = first.next; \n        length--; \n```", "```java\n        if (length == 0) { \n            last = null; \n        } \n        return origFirst;\n    }\n```", "```java\n    protected Node<E> removeAtIndex(int index) { \n        if (index >= length || index < 0) { \n            throw new NoSuchElementException(); \n        } \n```", "```java\n        if (index == 0) { \n            Node<E> nodeRemoved = first; \n            removeFirst(); \n            return nodeRemoved; \n        } \n```", "```java\n        Node justBeforeIt = first; \n        while (--index > 0) { \n            justBeforeIt = justBeforeIt.next; \n        } \n```", "```java\n        Node<E> nodeRemoved = justBeforeIt.next; \n        if (justBeforeIt.next == last) { \n            last = justBeforeIt.next.next; \n        } \n```", "```java\n        justBeforeIt.next = justBeforeIt.next.next; \n        length--; \n        return nodeRemoved; \n    }\n```", "```java\n    protected class ListIterator implements Iterator<E> { \n        protected Node<E> nextNode = first; \n\n        @Override \n        public boolean hasNext() { \n            return nextNode != null; \n        } \n\n        @Override \n        public E next() { \n            if (!hasNext()) { \n                throw new IllegalStateException(); \n            } \n            Node<E> nodeToReturn = nextNode; \n            nextNode = nextNode.next; \n            return nodeToReturn.value; \n        } \n    }\n```", "```java\n    @Override \n    public Iterator<E> iterator() { \n        return new ListIterator(); \n    }\n```", "```java\n        for(Integer x:linkedList){ \n            System.out.println(x); \n        }\n```", "```java\npublic class DoublyLinkedList<E> extends LinkedList<E> { \n```", "```java\n    protected static class DoublyLinkedNode<E> extends Node<E> { \n        protected DoublyLinkedNode<E> prev; \n    }\n```", "```java\n    @Override \n    protected Node<E> getNewNode() { \n        return new DoublyLinkedNode<E>(); \n    } \n}\n```", "```java\n    public Node<E> appendFirst(E value) { \n        Node<E> node = super.appendFirst(value); \n        if (first.next != null) \n            ((DoublyLinkedNode<E>) first.next).prev = (DoublyLinkedNode<E>) first; \n        return node; \n    }\n```", "```java\n    public Node<E> appendLast(E value) { \n        DoublyLinkedNode<E> origLast = (DoublyLinkedNode<E>) this.last; \n        Node<E> node = super.appendLast(value); \n```", "```java\n        if (origLast == null) { \n            origLast = (DoublyLinkedNode<E>) first; \n        } \n        ((DoublyLinkedNode<E>) this.last).prev = origLast; \n        return node; \n    }\n```", "```java\n    public Node<E> insert(int index, E value) { \n        DoublyLinkedNode<E> inserted = (DoublyLinkedNode<E>) super.insert(index, value); \n\n```", "```java\n        if(index!=0 && index!=length) { \n            if (inserted.next != null) { \n```", "```java\n                inserted.prev = ((DoublyLinkedNode<E>) inserted.next).prev; \n```", "```java\n                ((DoublyLinkedNode<E>) inserted.next).prev = inserted; \n            } \n        } \n        return inserted; \n    }\n```", "```java\n    public Node<E> removeFirst() { \n        super.removeFirst(); \n        if (first != null) { \n            ((DoublyLinkedNode<E>) first).prev = null; \n        } \n        return first; \n    }\n```", "```java\n    public Node<E> removeAtIndex(int index) { \n        if(index<0||index>=length){ \n            throw new NoSuchElementException(); \n        }\n```", "```java\n        if(index==length-1){ \n            return removeLast(); \n        } \n```", "```java\n        DoublyLinkedNode<E> nodeRemoved \n               = (DoublyLinkedNode<E>) super.removeAtIndex(index); \n        if ((DoublyLinkedNode<E>) nodeRemoved.next != null) \n            ((DoublyLinkedNode<E>) nodeRemoved.next).prev \n                 = nodeRemoved.prev; \n        return nodeRemoved; \n    } \n```", "```java\n    public Node<E> removeLast() { \n        Node<E> origLast = last; \n        if(last==null){ \n            throw new IllegalStateException\n                          (\"Removing element from an empty list\"); \n        } \n```", "```java\n        last = ((DoublyLinkedNode<E>)last).prev; \n```", "```java\n        if(last!=null){ \n            last.next = null; \n        } else{ \n            first = null; \n        } \n```", "```java\n        length--; \n        return origLast;\n    }\n```", "```java\npublic class CircularLinkedList<E> extends LinkedList<E>{ \n}\n```", "```java\n    @Override \n    public Node<E> appendFirst(E value) { \n        Node<E> newNode = super.appendFirst(value); \n        last.next = first; \n        return newNode; \n    }\n```", "```java\n    @Override \n    public Node<E> appendLast(E value) { \n        Node<E> newNode =  super.appendLast(value); \n        last.next = first; \n        return newNode; \n    } \n```", "```java\n    @Override \n    public Node<E> removeFirst() { \n        Node<E> newNode =  super.removeFirst(); \n        last.next = first; \n        return newNode; \n    }\n```", "```java\n    public void rotate(){ \n        last = first; \n        first = first.next; \n    }\n```", "```java\n        for(int i=0;i<30;i++){ \n            System.out.print(\" \"+ linkedList.first); \n            linkedList.rotate(); \n        }\n```"]