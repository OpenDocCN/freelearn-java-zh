["```java\npublic interface Publisher<T> {\n    public void subscribe(Subscriber<? super T> s);\n}\n```", "```java\npublic class FibonacciPublisher implements Publisher<Integer> {\n    @Override\n    public void subscribe(Subscriber<? super Integer> subscriber) {\n        int count = 0, a = 0, b = 1;\n        while (count < 50) {\n            int sum = a + b;\n            subscriber.onNext(b);\n            a = b;\n            b = sum;\n            count++;\n        }\n        subscriber.onComplete();\n    }\n}\n```", "```java\ndependencies {\n  // rest removed for brevity\n  testCompile group: 'org.reactivestreams',\n  name: 'reactive-streams-tck', version: '1.0.2'\n}\n```", "```java\npublic class FibonacciPublisherVerifier extends PublisherVerification<Integer> {\n    public FibonacciPublisherVerifier(){\n        super(new TestEnvironment());\n    }\n    @Override\n    public Publisher<Integer> createFailedPublisher() {\n        return null;\n    }\n    @Override\n    public Publisher<Integer> createPublisher(long elements) {\n        return new FibonacciPublisher();\n    }\n}\n```", "```java\npublic interface Subscriber<T> {\n    public void onSubscribe(Subscription s);\n    public void onNext(T t);\n    public void onError(Throwable t);\n    public void onComplete();\n}\n```", "```java\npublic interface Subscription {\n    public void request(long n);\n    public void cancel();\n}\n```", "```java\npublic class FibonacciSubscriber implements Subscriber<Long> {\n    private Subscription sub;\n    @Override\n    public void onSubscribe(Subscription s) {\n        sub = s;\n        sub.request(10);\n    }\n    @Override\n    public void onNext(Long fibNumber) {\n        System.out.println(fibNumber);\n        sub.cancel();\n    }\n    @Override\n    public void onError(Throwable t) {\n        t.printStackTrace();\n        sub=null;\n    }\n    @Override\n    public void onComplete() {\n        System.out.println(\"Finished\");\n        sub=null;\n    }\n}\n```", "```java\npublic class FibonacciSubsciberVerification extends SubscriberBlackboxVerification<Long> {\n    public FibonacciSubsciberVerification(){\n        super(new TestEnvironment());\n    }\n    @Override\n    public Subscriber<Long> createSubscriber() {\n        return new FibonacciSubscriber();\n    }\n    @Override\n    public Long createElement(int element) {\n        return new Long(element);\n    }\n}\n```", "```java\npublic class Observable {\n  void addObserver (Observer o);\n  void deleteObserver (Observer o);\n  void deleteObservers();\n  void notifyObservers();\n  void notifyObserver(int arg);\n  int countObservers();\n  boolean hasChanged();\n}\n```", "```java\npublic interface Observer{\n  void update(Observable o, Object arg)\n}\n```", "```java\n@Resource(lookup = \"jms/Queue\")\nprivate static Queue queue;\n\n@Resource(lookup = \"jms/Topic\")\nprivate static Topic topic;\nSession session = connection.createSession(false,Session.AUTO_ACKNOWLEDGE);\nMessageProducer producer = session.createProducer(queue);\nMessageConsumer consumer = session.createConsumer(topic)\n```", "```java\nFlux.just(\"Red\");\nFlux.just(\"Red\", \"Blue\", \"Yellow\", \"Black\");\nFlux.just(new Person(\"Rahul\"), new Person(\"Rudra\"));\n```", "```java\nFlux.fromArray(new Integer[]{1,1,2,3,5,8,13});\nFlux.fromIterable(Arrays.asList(\"Red\", \"Blue\", \"Yellow\", \"Black\"));\nFlux.fromStream(IntStream.range(1,100).boxed());\n```", "```java\nFlux<Long> fibonacciGenerator = Flux.generate(\n        () -> Tuples.<Long, Long>of(0L, 1L),\n        (state, sink) -> {\n            sink.next(state.getT1());\n            System.out.println(\"generated \"+state.getT1());\n            return Tuples.of(state.getT2(), state.getT1() + state.getT2());\n        });\nfibonacciGenerator.take(size).subscribe(t -> {\n    System.out.println(\"consuming \"+t);\n    fibonacciSeries.add(t);\n});\n```", "```java\n@Test\npublic void testFibonacciFluxSink() {\n    Flux<Long> fibonacciGenerator = Flux.create(e -> {\n        long current = 1, prev = 0;\n        AtomicBoolean stop = new AtomicBoolean(false);\n        e.onDispose(()->{\n            stop.set(true);\n            System.out.println(\"******* Stop Received ****** \");\n        });\n        while (current > 0) {\n            e.next(current);\n            System.out.println(\"generated \" + current);\n            long next = current + prev;\n            prev = current;\n            current = next;\n        }\n        e.complete();\n    });\n    List<Long> fibonacciSeries = new LinkedList<>();\n    fibonacciGenerator.take(50).subscribe(t -> {\n        System.out.println(\"consuming \" + t);\n        fibonacciSeries.add(t);\n    });\n    System.out.println(fibonacciSeries);\n}\n```", "```java\nMono.just(\"Red\");\nMono.justOrEmpty(value);\nMono.justOrEmpty(Optional.empty());\n```", "```java\nMono.fromSupplier(() -> 1);\nMono.fromCallable(() -> new String[]{\"color\"}).subscribe(t -> System.out.println(\"received \" + t));\nMono.fromRunnable(() -> System.out.println(\" \")).subscribe(t -> System.out.println(\"received \" + t), null, () -> System.out.println(\"Finished\"));\n```", "```java\nMono.from(Flux.just(\"Red\", \"Blue\", \"Yellow\", \"Black\")).subscribe(t -> System.out.println(\"received \" + t))\n\n**** Output ******\nreceived Red\n\nProcess finished with exit code 0\n```", "```java\nfibonacciGenerator.subscribe(); (1)\n\nfibonacciGenerator.subscribe(t -> System.out.println(\"consuming \" + t));   (2)\n\nfibonacciGenerator.subscribe(t -> System.out.println(\"consuming \" + t),\n                e -> e.printStackTrace() ); (3)\n\nfibonacciGenerator.subscribe(t -> System.out.println(\"consuming \" + t),\n                e -> e.printStackTrace(),\n                ()-> System.out.println(\"Finished\")); (4)\n\nfibonacciGenerator.subscribe(t -> System.out.println(\"consuming \" + t),\n                e -> e.printStackTrace(),\n                ()-> System.out.println(\"Finished\"),\n                s -> System.out.println(\"Subscribed :\"+ s)); (5)\n```", "```java\nBaseSubscriber<Long> fibonacciSubsciber= new BaseSubscriber<Long>() {\n            @Override\n            protected void hookOnSubscribe(Subscription subscription) { }\n\n            @Override\n            protected void hookOnNext(Long value) {}\n\n            @Override\n            protected void hookOnComplete() { }\n\n            @Override\n            protected void hookOnError(Throwable throwable) {}\n\n            @Override\n            protected void hookOnCancel() {}\n\n        };\n```", "```java\npublic class FactorialService {\n\n    Flux<Double> generateFactorial(long number) {\n        Flux<Double> factorialStream = Flux.generate(\n                () -> Tuples.<Long, Double>of(0L, 1.0d),\n                (state, sink) -> {\n                    Long factNumber = state.getT1();\n                    Double factValue = state.getT2();\n                    if (factNumber <= number)\n                        sink.next(factValue);\n                    else\n                        sink.complete();\n                    return Tuples.of(factNumber + 1, (factNumber + 1) * factValue);\n                });\n        return factorialStream;\n    }\n}\n```", "```java\npublic class FactorialServiceTest {\n\n    @Test\n    public void testFactorial() {\n        Flux<Double> factorialGenerator = new FactorialService().generateFactorial(10);\n        factorialGenerator\n                .doOnNext(t -> System.out.println(t))\n                .last()\n                .subscribe(t -> assertEquals(3628800.0, t, 0.0));\n    }\n}\n```"]