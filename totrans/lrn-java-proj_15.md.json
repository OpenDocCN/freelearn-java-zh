["```java\n98.4100.2\n100.2\n87.9\n102.8\n102.8\n2\n```", "```java\nvar temps = Arrays.asList(98.4, 100.2, 87.9, 102.8);\n```", "```java\ntemps.stream()\n```", "```java\n.peek(System.out::println)\n```", "```java\n.filter(temp -> temp > 100)\n```", "```java\n.peek(System.out::println)\n```", "```java\n.count();\n```", "```java\n   List<String> names = Arrays.asList(\"April\", \"Ben\",             \"Charlie\",\"David\", \"Benildus\", \"Christian\");\n```", "```java\n.peek(System.out::println)\n```", "```java\n.filter(s -> {    System.out.println(\"filter1 : \"+s);\n    return s.startsWith(\"B\") || s.startsWith(\"C\"); } )\n```", "```java\n.filter(s -> {    System.out.println(\"filter2 : \"+s);\n    return s.length() > 3; } )\n```", "```java\n.limit(1)\n```", "```java\n.forEach(System.out::println);\n```", "```java\nList<String> animalList = Arrays.asList(\"cat\", \"dog\", \"sheep\");\n```", "```java\nStream<String> streamAnimals = animalList.stream();\n```", "```java\nSystem.out.println(\"Number of elements: \"+streamAnimals.count()); // 3\n```", "```java\nMap<String, Integer> namesToAges = new HashMap<>();namesToAges.put(\"Mike\", 22);\nnamesToAges.put(\"Mary\", 24);\nnamesToAges.put(\"Alice\", 31);\n```", "```java\n   namesToAges.entrySet()\n```", "```java\n.stream()\n```", "```java\nString[] cities = {\"Dublin\", \"Berlin\", \"Paris\"};\n```", "```java\nStream<String> citiesStream = Stream.of(cities);\n```", "```java\nSystem.out.println(citiesStream.count()); // 3\n```", "```java\nStream<Integer> streamI = Stream.of(1,2,3);\n```", "```java\nSystem.out.println(streamI.count()); // 3\n```", "```java\nStream<String> streamS = Stream.of(\"a\", \"b\", \"c\", \"d\");System.out.println(streamS.count()); // 4\n```", "```java\nStream<Dog> streamD = Stream.of(new Dog());System.out.println(streamD.count()); // 1\n```", "```java\nFido/BlackLily/White\n```", "```java\ntry(Stream<String> stream =  Files.lines(Paths.get(filename))){\n       stream.forEach(line -> {\n           String[] catsArray = line.split(\"/\");\n           cats.add(new Cat(catsArray[0], catsArray[1]));\n       });\n  } catch (IOException ioe) {\n            ioe.printStackTrace();\n  }\n```", "```java\n() -> (int) (Math.random() * 10);\n```", "```java\ninfStream.forEach(System.out::println);\n```", "```java\nn -> n <=20\n```", "```java\nList<String> names = Arrays.asList(\"Alan\",\"Brian\",\"Colin\");Predicate<String> pred = name -> name.startsWith(\"A\");\nSystem.out.println(names.stream().allMatch(pred)); // false\n```", "```java\n.min((s1, s2) -> s1.length()-s2.length())\n```", "```java\nmin.ifPresent(System.out::println);// pig\n```", "```java\n.max((i1, i2) -> i1-i2)\n```", "```java\nmax.ifPresent(System.out::println);// 12\n```", "```java\nOptional<Object> noMin = Stream.empty().min((x1, x2) -> 0)\n```", "```java\nSystem.out.println(noMin.isEmpty());// trueSystem.out.println(noMin.isPresent());// false\n```", "```java\nList<String> names = Arrays.asList(\"Alan\", \"Brian\", \"Colin\");\n```", "```java\nPredicate<String> pred = name -> name.startsWith(\"A\");\n```", "```java\nnames.stream().anyMatch(pred); // true (\"Alan\")\n```", "```java\nnames.stream().allMatch(pred); // false (\"Brian\")\n```", "```java\nnames.stream().noneMatch(pred);// false (\"Alan\")\n```", "```java\nString name = Stream.of(\"s\", \"e\", \"a\", \"n\")                    .reduce(\"\", (s1, s2) -> s1 + s2);\nSystem.out.println(name);// sean\n```", "```java\nString name2 = Stream.of(\"s\", \"e\", \"a\", \"n\")                .filter(s -> s.length()>2)\n                .reduce(\"nothing\", (s1, s2) -> s1 + s2);\nSystem.out.println(name2);// nothing\n```", "```java\nInteger product = Stream.of(2,3,4)                        .reduce(1, (n1, n2) -> n1 * n2);\nSystem.out.println(product);// 24\n```", "```java\n   stream.reduce( 0,  // identity              (n, str) -> n + str.length(), // n is Integer\n              (n1, n2) -> n1 + n2); // both are Integers\n```", "```java\n() -> new StringBuilder()\n```", "```java\n(sb, str) -> sb.append(str)\n```", "```java\n(sb1, sb2) -> sb1.append(sb2)\n```", "```java\n.collect(Collectors.toCollection(TreeSet::new));\n```", "```java\n[Audi, Ford, Tesla]\n```", "```java\nString::toString  // Function for key, same as: s -> s\n```", "```java\nString::length     // Same as: s -> s.length()\n```", "```java\n{biscuits=8, cake=4, apple tart=10}\n```", "```java\n(s1, s2) -> s1 + \",\" + s2)\n```", "```java\n{4=cake,tart, 8=biscuits}\n```", "```java\n   TreeMap::new\n```", "```java\n   {apple tart=10, biscuits=8, cake=8}\n```", "```java\n   System.out.println(map.getClass());// java.util.TreeMap\n```", "```java\n   {3=[Tom, Tom, Ann], 5=[Peter], 6=[Martin]}\n```", "```java\n   Collectors.toSet()\n```", "```java\n   {3=[Ann, Tom], 5=[Peter], 6=[Martin]}\n```", "```java\n   System.out.println(map.getClass());// java.util.HashMap\n```", "```java\nMap<Integer, List<String>> map\n```", "```java\nCollectors.toList()\n```", "```java\n{3=[Tom, Tom, Ann], 5=[Peter], 6=[Martin]}\n```", "```java\nTreeMap::new\n```", "```java\njava.util.TreeMap\n```", "```java\n   Collectors.partitioningBy(s -> s.startsWith(\"T\"))\n```", "```java\n   {false=[Mike, Alan, Peter, Alan], true=[Thomas, Teresa]}\n```", "```java\nStream.of(\"Alan\", \"Teresa\", \"Mike\", \"Alan\", \"Peter\");\n```", "```java\ns -> s.length() > 4,// predicate\n```", "```java\nCollectors.toSet()\n```", "```java\n{false=[Mike, Alan], true=[Teresa, Peter]}\n```"]