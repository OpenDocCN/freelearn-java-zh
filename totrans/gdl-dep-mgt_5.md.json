["```java\napply plugin: 'maven-publish'\napply plugin: 'java'\n```", "```java\n$ gradle tasks\n...\nPublishing tasks\n----------------\npublish - Publishes all publications produced by this project.\npublishToMavenLocal - Publishes all Maven publications produced by this project to the local Maven cache.\n...\nBUILD SUCCESSFUL\n\nTotal time: 4.647 secs\n\n```", "```java\napply plugin: 'maven-publish'\napply plugin: 'java'\n\n// Configuration block for publishing\n// artifacts from the project.\npublishing {\n\n  // Define publications with what\n  // needs to be published.\n  publications {\n\n    // Name of this publication\n    // is publishJar.\n    publishJar(MavenPublication) {\n\n      // Use output of jar task\n      // as the artifact for\n      // the publication.\n      artifact jar\n\n      // Alternatively we can use\n      // a Map notation:\n      // artifact source: jar\n    }\n\n  }\n}\n```", "```java\n$ gradle tasks\n...\nPublishing tasks\n----------------\ngeneratePomFileForPublishJarPublication - Generates the Maven POM file for publication 'publishJar'.\npublish - Publishes all publications produced by this project.\npublishPublishJarPublicationToMavenLocal - Publishes Maven publication 'publishJar' to the local Maven repository.\npublishToMavenLocal - Publishes all Maven publications produced by this project to the local Maven cache.\n...\nBUILD SUCCESSFUL\n\nTotal time: 4.215 secs\n\n```", "```java\napply plugin: 'maven-publish'\napply plugin: 'java'\n\ntask sourcesJar(type: Jar) {\n  from sourceSets.main.allJava\n  classifier = 'sources'\n}\n\ntask javadocJar(type: Jar) {\n  from javadoc\n}\n\npublishing {\n\n  publications {\n\n    publishJar(MavenPublication) {\n\n      artifact jar\n\n      artifact sourcesJar\n\n      artifact javadocJar {\n        // Each artifact must have\n        // a unique classifier.\n        // We can set the classifier\n        // via the task as in sourcesJar\n        // or here in the artifact configuration.\n        classifier = 'javadoc'\n      }\n\n      // Or with a Map notation we\n      // can write:\n      // artifact source: javadocJar, classifier: 'javadoc'\n\n    }\n\n  }\n}\n```", "```java\napply plugin: 'maven-publish'\napply plugin: 'java'\n\ntask sourcesJar(type: Jar) {\n  from sourceSets.main.allJava\n  classifier = 'sources'\n}\n\ntask javadocJar(type: Jar) {\n  from javadoc\n  classifier = 'javadoc'\n}\n\npublishing {\n\n  publications {\n\n    publishJar(MavenPublication) {\n\n      // Use artifacts property to\n      // define the artifacts.\n      // The classifier for each of\n      // these artifacts must be\n      // unique.\n      artifacts = [\n        jar,\n        sourcesJar,\n        javaDocJar]\n\n    }\n\n  }\n}\n```", "```java\napply plugin: 'maven-publish'\n\npublishing {\n  publications {\n    documentation(MavenPublication) {\n\n      // Use file name as a publication artifact.\n      artifact 'src/files/README'\n\n      artifact('src/files/COPYRIGHT') {\n        // Each file artifact must have a\n        // unique classifier and extension.\n        classifier = 'metaInformation'\n      }\n\n      // Alternative syntax is with\n      // the Map notation:\n      // artifact source: 'src/files/README'\n      // artifact source: 'src/files/COPYRIGHT',\n      //          extension: 'metaInformation'\n\n    }\n  }\n}\n```", "```java\napply plugin: 'maven-publish'\napply plugin: 'war'\n\npublishing {\n\n  publications {\n\n    // First publication with\n    // the name javaJar, contains\n    // the artifact created by the\n    // jar task.\n    javaJar(MavenPublication) {\n      from components.java\n    }\n\n    // Second publication with\n    // the name webWar, contains\n    // the artifact created by\n    // the war task.\n    webWar(MavenPublication) {\n      from components.web\n    }\n\n  }\n\n}\n```", "```java\napply plugin: 'maven-publish'\napply plugin: 'java'\n\n// Defined project properties, that are\n// used in the generated POM file.\n// The name of the project is by default\n// the directory name, but we can\n// change it via a settings.gradle file\n// and the rootProject.name property.\nversion = '2.1.RELEASE'\ngroup = 'book.gradle'\n\nrepositories {\n  jcenter()\n}\n\ndependencies {\n  compile 'org.springframework:spring-context:4.1.4.RELEASE'\n}\n\npublishing {\n  publications {\n    sample(MavenPublication) {\n      from components.java\n    }\n  }\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" \n    >\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>book.gradle</groupId>\n  <artifactId>sample</artifactId>\n  <version>2.1.RELEASE</version>\n  <dependencies>\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-context</artifactId>\n      <version>4.1.4.RELEASE</version>\n      <scope>runtime</scope>\n    </dependency>\n  </dependencies>\n</project>\n```", "```java\napply plugin: 'maven-publish'\napply plugin: 'java'\n\nversion = '2.1.DEVELOPMENT'\ngroup = 'book.gradle'\n\nrepositories {\n  jcenter()\n}\n\ndependencies {\n  compile 'org.springframework:spring-context:4.1.4.RELEASE'\n}\n\npublishing {\n  publications {\n    sample(MavenPublication) {\n      groupId = 'book.sample.gradle'\n      artifactId ='bookSample'\n      version = '2.1'\n\n      from components.java\n    }\n  }\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" \n    >\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>book.sample.gradle</groupId>\n  <artifactId>bookSample</artifactId>\n  <version>2.1</version>\n  <dependencies>\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-context</artifactId>\n      <version>4.1.4.RELEASE</version>\n      <scope>runtime</scope>\n    </dependency>\n  </dependencies>\n</project>\n```", "```java\napply plugin: 'maven-publish'\napply plugin: 'java'\n\n// Defined project properties, that are\n// used in the generated POM file.\n// The name of the project is by default\n// the directory name, but we can\n// change it via a settings.gradle file\n// and the rootProject.name property.\nversion = '2.1.RELEASE'\ngroup = 'book.gradle'\n\nrepositories {\n  jcenter()\n}\n\ndependencies {\n  compile 'org.springframework:spring-context:4.1.4.RELEASE'\n}\n\npublishing {\n  publications {\n    sample(MavenPublication) {\n      artifact jar\n    }\n  }\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" \n    >\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>book.gradle</groupId>\n  <artifactId>sample</artifactId>\n  <version>2.1.RELEASE</version>\n</project>\n```", "```java\napply plugin: 'maven-publish'\napply plugin: 'java'\n\nversion = '2.1.RELEASE'\ngroup = 'book.gradle'\n\nrepositories {\n  jcenter()\n}\n\ndependencies {\n  compile 'org.springframework:spring-context:4.1.4.RELEASE'\n}\n\npublishing {\n  publications {\n    sample(MavenPublication) {\n      from components.java\n\n      pom.withXml {\n\n        asNode()\n          .appendNode('organization')\n          .with {\n            appendNode('name', 'Gradle')\n            appendNode('url', 'http://www.gradle.org')\n        }\n\n        asNode()\n          .appendNode('issueManagement')\n          .with {\n            appendNode('system', 'Jenkins')\n            appendNode('url', 'http://buildserver/')\n          }\n      }\n    }\n  }\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" >\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>book.gradle</groupId>\n  <artifactId>sample</artifactId>\n  <version>2.1.RELEASE</version>\n  <dependencies>\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-context</artifactId>\n      <version>4.1.4.RELEASE</version>\n      <scope>runtime</scope>\n    </dependency>\n  </dependencies>\n  <organization>\n    <name>Gradle</name>\n    <url>http://www.gradle.org</url>\n  </organization>\n  <issueManagement>\n    <system>Jenkins</system>\n    <url>http://buildserver/</url>\n  </issueManagement>\n</project>\n```", "```java\napply plugin: 'maven-publish'\napply plugin: 'java'\n\nversion = '2.1.RELEASE'\ngroup = 'book.gradle'\n\nrepositories {\n  jcenter()\n}\n\ndependencies {\n  compile 'org.springframework:spring-context:4.1.4.RELEASE'\n}\n\npublishing {\n  publications {\n    sample(MavenPublication) {\n      from components.java\n\n      pom.withXml {\n        asNode()\n          .dependencies\n          .dependency\n          .findAll { dependency ->\n            // Find all with scope runtime.\n            // Could be more specific if we would\n            // have more dependencies. For example\n            // check group, name and version.\n            dependency.scope.text() == 'runtime'\n          }\n          .each { dependency ->\n            // Set scope value to compile.\n            dependency.scope*.value = 'compile'\n          }\n      }\n    }\n  }\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" >\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>book.gradle</groupId>\n  <artifactId>sample</artifactId>\n  <version>2.1.RELEASE</version>\n  <dependencies>\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-context</artifactId>\n      <version>4.1.4.RELEASE</version>\n      <scope>compile</scope>\n    </dependency>\n  </dependencies>\n</project>\n```", "```java\napply plugin: 'maven-publish'\napply plugin: 'java'\n\nversion = '2.1.RELEASE'\ngroup = 'book.gradle'\n\nrepositories {\n  jcenter()\n}\n\ndependencies {\n  compile 'org.springframework:spring-context:4.1.4.RELEASE'\n}\n\npublishing {\n  publications {\n    sample(MavenPublication) {\n      artifact jar\n\n      pom.withXml {\n        // Create dependencies element.\n        def dependencies =\n          asNode()\n            .appendNode('dependencies')\n\n        project\n          .configurations['compile']\n          .allDependencies\n          ?.each { dependency ->\n\n            // Add a dependency element with\n            // groupId, artifactId, version and scope,\n            // to the dependencies element.\n            dependencies.appendNode('dependency').with {\n              appendNode('groupId', dependency.group)\n              appendNode('artifactId', dependency.name)\n              appendNode('version', dependency.version)\n              appendNode('scope', 'compile')\n            }\n\n          }\n      }\n    }\n  }\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" >\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>book.gradle</groupId>\n  <artifactId>sample</artifactId>\n  <version>2.1.RELEASE</version>\n  <dependencies>\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-context</artifactId>\n      <version>4.1.4.RELEASE</version>\n      <scope>compile</scope>\n    </dependency>\n  </dependencies>\n</project>\n```", "```java\napply plugin: 'maven-publish'\napply plugin: 'java'\n\nversion = '2.1.DEVELOPMENT'\ngroup = 'book.gradle'\n\nrepositories {\n  jcenter()\n}\n\ndependencies {\n  compile 'org.springframework:spring-context:4.1.4.RELEASE'\n}\n\npublishing {\n\n  publications {\n    publishJar(MavenPublication) {\n      artifactId = 'sample'\n\n      from components.java\n    }\n  }\n\n}\n```", "```java\n$ gradle publishToMavenLocal\n:generatePomFileForPublishJarPublication\n:compileJava\n:processResources UP-TO-DATE\n:classes\n:jar\n:publishPublishJarPublicationToMavenLocal\n:publishToMavenLocal\n\nBUILD SUCCESSFUL\n\nTotal time: 5.135 secs\n\n```", "```java\n/Users/mrhaki/.m2/repository/\nbook\n└── gradle\n └── sample\n ├── 2.1.RELEASE\n │   ├── sample-2.1.RELEASE.jar\n │   └── sample-2.1.RELEASE.pom\n └── maven-metadata-local.xml\n\n```", "```java\napply plugin: 'maven-publish'\napply plugin: 'java'\n\nversion = '2.1.DEVELOPMENT'\ngroup = 'book.gradle'\n\nrepositories {\n  jcenter()\n}\n\ndependencies {\n  compile 'org.springframework:spring-context:4.1.4.RELEASE'\n}\n\npublishing {\n\n  publications {\n    publishJar(MavenPublication) {\n      artifactId = 'sample'\n\n      from components.java\n    }\n  }\n\n  // Add a Maven repository for\n  // the publications.\n  repositories {\n    maven {\n      name = 'localRepo'\n      url = \"$buildDir/localRepo\"\n    }\n  }\n}\n```", "```java\n$ gradle tasks\n...\nPublishing tasks\n----------------\ngeneratePomFileForPublishJarPublication - Generates the Maven POM file for publication 'publishJar'.\npublish - Publishes all publications produced by this project.\npublishPublishJarPublicationToLocalRepoRepository - Publishes Maven publication 'publishJar' to Maven repository 'localRepo'.\npublishPublishJarPublicationToMavenLocal - Publishes Maven publication 'publishJar' to the local Maven repository.\npublishToMavenLocal - Publishes all Maven publications produced by this project to the local Maven cache.\n...\nBUILD SUCCESSFUL\n\nTotal time: 4.514 secs\n\n```", "```java\n$ gradle publish\n:generatePomFileForPublishJarPublication\n:compileJava\n:processResources UP-TO-DATE\n:classes\n:jar\n:publishPublishJarPublicationToLocalRepoRepository\nUploading: book/gradle/sample/2.1.DEVELOPMENT/sample-2.1.DEVELOPMENT.jar to repository remote at file:/Users/mrhaki/Projects/book/sample/build/localRepo/\nTransferring 2K from remote\nUploaded 2K\n:publish\n\nBUILD SUCCESSFUL\n\nTotal time: 5.012 secs\n\n```", "```java\nbuild/localRepo/\n└── book\n └── gradle\n └── sample\n ├── 2.1.DEVELOPMENT\n │   ├── sample-2.1.DEVELOPMENT.jar\n │   ├── sample-2.1.DEVELOPMENT.jar.md5\n │   ├── sample-2.1.DEVELOPMENT.jar.sha1\n │   ├── sample-2.1.DEVELOPMENT.pom\n │   ├── sample-2.1.DEVELOPMENT.pom.md5\n │   └── sample-2.1.DEVELOPMENT.pom.sha1\n ├── maven-metadata.xml\n ├── maven-metadata.xml.md5\n └── maven-metadata.xml.sha1\n\n```", "```java\napply plugin: 'maven-publish'\napply plugin: 'java'\n\nversion = '2.1.DEVELOPMENT'\ngroup = 'book.gradle'\n\nrepositories {\n  jcenter()\n}\n\ndependencies {\n  compile 'org.springframework:spring-context:4.1.4.RELEASE'\n}\n\npublishing {\n\n  publications {\n    publishJar(MavenPublication) {\n      artifactId = 'sample'\n\n      from components.java\n    }\n  }\n\n  // Add a Artifactory repository for\n  // the publications with Maven layout.\n  repositories {\n    maven {\n      name = 'artifactory'\n      url = \"http://localhost:8081/artifactory/libs-release-local\"\n\n      // Username and password should be\n      // saved outside build file in\n      // real life, eg. in gradle.properties\n      // or passed via command line as \n      // project properties. \n      credentials {\n        username = 'user'\n        password = 'passw0rd'\n      }\n    }\n  }\n}\n```", "```java\n$ gradle publishPublishJarPublicationToArtifactoryRepository\n:generatePomFileForPublishJarPublication\n:compileJava\n:processResources UP-TO-DATE\n:classes\n:jar\n:publishPublishJarPublicationToArtifactoryRepository\nUploading: book/gradle/sample/2.1.DEVELOPMENT/sample-2.1.DEVELOPMENT.jar to repository remote at http://localhost:8081/artifactory/libs-release-local\nTransferring 2K from remote\nUploaded 2K\n\nBUILD SUCCESSFUL\n\nTotal time: 5.012 secs\n\n```", "```java\napply plugin: 'maven-publish'\napply plugin: 'java'\n\nversion = '2.1.DEVELOPMENT'\ngroup = 'book.gradle'\n\nrepositories {\n  jcenter()\n}\n\ndependencies {\n  compile 'org.springframework:spring-context:4.1.4.RELEASE'\n}\n\npublishing {\n\n  publications {\n    publishJar(MavenPublication) {\n      artifactId = 'sample'\n\n      from components.java\n    }\n  }\n\n  // Add a Maven repository for\n  // the publications.\n  repositories {\n    maven {\n      name = 'nexus'\n      url = \"http://localhost:8081/nexus/content/repositories/releases\"\n      credentials {\n        username = 'admin'\n        password = 'admin123'\n      }\n    }\n  }\n}\n```", "```java\n$ gradle publishPublishJarPublicationToNexusRepository\n:generatePomFileForPublishJarPublication\n:compileJava\n:processResources UP-TO-DATE\n:classes\n:jar\n:publishPublishJarPublicationToNexusRepository\nUploading: book/gradle/sample/2.1.DEVELOPMENT/sample-2.1.DEVELOPMENT.jar to repository remote at http://localhost:8081/nexus/content/repositories/releases\nTransferring 2K from remote\nUploaded 2K\n\nBUILD SUCCESSFUL\n\nTotal time: 5.012 secs\n\n```"]