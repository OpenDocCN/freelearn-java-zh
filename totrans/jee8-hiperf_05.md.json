["```java\npublic class UnsafeData {\n    private boolean initialized = false;\n    private String content;\n\n    public void setData(String value) {\n        content = value;\n        initialized = true;\n    }\n\n    public String getData() {\n        if (!initialized) {\n            throw new IllegalStateException(\"structure not initialized\");\n        }\n        return content;\n    }\n}\n```", "```java\npublic class Account {\n    private double value; // + getter\n\n    public void sum(double credit, double debit) {\n       value += credit;\n       value += debit;\n    }\n}\n```", "```java\npublic class SafeData {\n    private boolean initialized = false;\n    private String content;\n\n    public synchronized void setData(String value) {\n        content = value;\n        initialized = true;\n    }\n\n    public synchronized String getData() {\n        if (!initialized) {\n            throw new IllegalStateException(\"structure not\n            initialized\");\n        }\n        return content;\n    }\n}\n```", "```java\nfinal Lock lock = new ReentrantLock();\nlock.lock();\ntry {\n    doSomeBusinessLogic();\n} finally {\n    lock.unlock();\n}\n```", "```java\npublic class LockAsyncListener implements AsyncListener {\n    private final Lock lock;\n\n    public LockAsyncListener(Lock lock) {\n        this.lock = lock;\n        this.lock.lock();\n    }\n\n    @Override\n    public void onStartAsync(AsyncEvent event) throws IOException {\n        // no-op\n    }\n\n    private void onEnd() {\n        lock.unlock();\n    }\n\n    @Override\n    public void onComplete(AsyncEvent event) throws IOException {\n        onEnd();\n    }\n\n    @Override\n    public void onTimeout(AsyncEvent event) throws IOException {\n        onEnd();\n    }\n\n    @Override\n    public void onError(AsyncEvent event) throws IOException {\n        onEnd();\n    }\n}\n```", "```java\npublic class SomeServlet extends HttpServlet {\n    @Override\n    protected void service(HttpServletRequest req, HttpServletResponse\n    resp)\n        throws ServletException, IOException {\n        final AsyncContext asyncContext = req.startAsync();\n        final SomeInstance instance = getInstance();\n        asyncContext.addListener(new\n        LockAsyncListener(instance.getLock()));\n        execute(asyncContext, instance)\n    }\n}\n```", "```java\npublic class SomeData {\n    private volatile int value;\n}\n```", "```java\npublic class AsyncSender {\n    private static final Logger log =\n    Logger.getLogger(AsyncSender.class.getName());\n\n    @Inject\n    private Event<MyEvent> sender;\n\n    public void send(final MyEvent event) {\n        final CompletionStage<MyEvent> cs = sender.fireAsync(event);\n        cs.thenRun(() -> {\n        // some post processing once all observers got notified\n        });\n    }\n}\n```", "```java\nsender.fireAsync(event, NotificationOptions.ofExecutor(myExecutor));\n```", "```java\n@Asynchronous\npublic Future<MyResult> execute() {\n    return new AsyncResult<>(getResult());\n}\n```", "```java\n@ApplicationScoped\npublic class RxService {\n    @Resource(lookup = \"java:global/threads/rx\")\n    private ManagedExecutorService mes;\n\n    public Flowable<String> getValues() throws Exception {\n        final WebSocketContainer container =\n        ContainerProvider.getWebSocketContainer();\n        final WebSocketPublisher publisher = new WebSocketPublisher();\n\n        container.connectToServer(new Endpoint() {\n            @Override\n            public void onOpen(final Session session, final\n            EndpointConfig config) {\n                session.addMessageHandler(publisher);\n            }\n\n            @Override\n            public void onClose(final Session session, final\n            CloseReason closeReason) {\n                publisher.close();\n            }\n        },      URI.create(\"ws://websocket.company.com\"));\n\n        final Scheduler eeScheduler = Schedulers.from(mes);\n        return Flowable.fromIterable(publisher)\n        .debounce(1, MINUTES, eeScheduler);\n    }\n}\n```", "```java\npublic class WebSocketPublisher implements\n        Iterable<String>, Iterator<String>, MessageHandler.Whole<String> {\n    private final Semaphore semaphore = new Semaphore(0);\n    private final List<String> messages = new ArrayList<>();\n    private volatile boolean closed;\n\n    public void close() {\n        closed = true;\n        semaphore.release();\n    }\n\n    @Override\n    public void onMessage(final String message) {\n        synchronized (messages) {\n            messages.add(message);\n        }\n        semaphore.release(); \n        // it case we are currently locked in hasNext()\n    }\n\n    @Override\n    public boolean hasNext() {\n        if (closed) {\n            return false;\n        }\n        try {\n            semaphore.acquire();\n            synchronized (messages) {\n                return !closed && !messages.isEmpty();\n            }\n        } catch (final InterruptedException e) {\n            return false;\n        }\n    }\n\n    @Override\n    public String next() {\n        synchronized (messages) {\n            return messages.remove(0);\n        }\n    }\n\n    @Override\n    public Iterator<String> iterator() {\n        return this;\n    }\n}\n```", "```java\nRunnable runnable = ManagedExecutors.managedTask(myTask, myListener);\n```", "```java\nwhile (running && !ManagedExecutors.isCurrentThreadShutdown()) {\n    process();\n}\n```", "```java\nRunnable wrappedTask = contextService.createContextualProxy(myTask, Runnable.class);\nframework.execute(wrappedTask);\n```", "```java\n@Singleton\npublic class MyLocalData {\n    private Data data;\n\n    @Lock(READ)\n    public Data get() {\n        return data;\n    }\n\n    @Lock(WRITE)\n    public void set(Data data) {\n        this.data = data;\n    }\n}\n```", "```java\n@Singleton\n@AccessTimeout(500)\npublic class MyLocalData {\n    // as before\n}\n```", "```java\nfinal Client client = ClientBuilder.newClient();\ntry {\n    CompletionStage<Response> response =\n    client.target(\"http://google.com\")\n          .request(TEXT_HTML_TYPE)\n          .rx()\n          .get();\n} finally {\n  client.close();\n}\n```", "```java\npublic void processData(Data data) {\n    if (validator.isValid(data)) {\n        service.save(data);\n        return data;\n    }\n    throw new InvalidDataException();\n}\n```", "```java\npublic Data processData(Data data) {    \n    return Stream.of(data)\n      .filter(validator::isValid)\n      .peek(service::save)\n      .findFirst()\n      .orElseThrow(() -> new InvalidDataException(\"...\"));\n}\n```", "```java\nCustomer customer = findCustomer(data);\nContract contract = fincContract(data);\nAccount account = findAccount(data);\nprocess(customer, contract, account);\n```", "```java\npublic void processData(Data data) {\n    final CompletableFuture<Customer> customer = findCustomer(data);\n    final CompletableFuture<Contract> contract = findContract(data);\n    final CompletableFuture<Account> account = findAccount(data);\n    try {\n        CompletableFuture.allOf(customer, contract, account).get();\n        processLoadedData(customer.get(), contract.get(), account.get());\n    } catch (final InterruptedException | ExecutionException e) {\n        throw handleException(e);\n    }\n}\n```", "```java\npublic void processData(Data data) {\n    final CompletableFuture<Customer> customer = findCustomer(data);\n    final CompletableFuture<Contract> contract = findContract(data);\n    final CompletableFuture<Account> account = findAccount(data);\n    CompletableFuture.allOf(customer, contract, account)\n         .thenRun(() -> {\n             try {\n                 processLoadedData(customer.get(), contract.get(),\n                 account.get());\n             } catch (final InterruptedException | ExecutionException\n               e) {\n                 throw handleException(e);\n             }\n         });\n}\n```"]