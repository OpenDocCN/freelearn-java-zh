["```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable<String> source1 =\n          Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \n\"Epsilon\");\n\n        Observable<String> source2 =\n          Observable.just(\"Zeta\", \"Eta\", \"Theta\");\n\n        Observable.merge(source1, source2)\n          .subscribe(i -> System.out.println(\"RECEIVED: \" + i));\n     }\n}\n```", "```java\n    RECEIVED: Alpha\n    RECEIVED: Beta\n    RECEIVED: Gamma\n    RECEIVED: Delta\n    RECEIVED: Epsilon\n    RECEIVED: Zeta\n    RECEIVED: Eta\n    RECEIVED: Theta\n```", "```java\n    source1.mergeWith(source2)\n      .subscribe(i -> System.out.println(\"RECEIVED: \" + i));\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable<String> source1 =\n          Observable.just(\"Alpha\", \"Beta\");\n\n        Observable<String> source2 =\n          Observable.just(\"Gamma\", \"Delta\");\n\n        Observable<String> source3 =\n          Observable.just(\"Epsilon\", \"Zeta\");\n\n        Observable<String> source4 =\n          Observable.just(\"Eta\", \"Theta\");\n\n        Observable<String> source5 =\n          Observable.just(\"Iota\", \"Kappa\");\n\n        Observable.mergeArray(source1, source2, source3, source4, \nsource5)\n            .subscribe(i -> System.out.println(\"RECEIVED: \" + i));\n     }\n}\n\n```", "```java\n    RECEIVED: Alpha\n    RECEIVED: Beta\n    RECEIVED: Gamma\n    RECEIVED: Delta\n    RECEIVED: Epsilon\n    RECEIVED: Zeta\n    RECEIVED: Eta\n    RECEIVED: Theta\n    RECEIVED: Iota\n    RECEIVED: Kappa\n```", "```java\nimport io.reactivex.Observable;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable<String> source1 =\n          Observable.just(\"Alpha\", \"Beta\");\n\n        Observable<String> source2 =\n          Observable.just(\"Gamma\", \"Delta\");\n\n        Observable<String> source3 =\n          Observable.just(\"Epsilon\", \"Zeta\");\n\n        Observable<String> source4 =\n          Observable.just(\"Eta\", \"Theta\");\n\n        Observable<String> source5 =\n          Observable.just(\"Iota\", \"Kappa\");\n\n        List<Observable<String>> sources =\n          Arrays.asList(source1, source2, source3, source4, source5);\n\n        Observable.merge(sources)\n          .subscribe(i -> System.out.println(\"RECEIVED: \" + i));\n      }\n}\n\n```", "```java\nimport io.reactivex.Observable;\nimport java.util.concurrent.TimeUnit;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        //emit every second\n        Observable<String> source1 = Observable.interval(1, \nTimeUnit.SECONDS)\n        .map(l -> l + 1) // emit elapsed seconds\n        .map(l -> \"Source1: \" + l + \" seconds\");\n\n        //emit every 300 milliseconds\n        Observable<String> source2 =\n          Observable.interval(300, TimeUnit.MILLISECONDS)\n        .map(l -> (l + 1) * 300) // emit elapsed milliseconds\n        .map(l -> \"Source2: \" + l + \" milliseconds\");\n\n        //merge and subscribe\n        Observable.merge(source1, source2)\n.subscribe(System.out::println);\n        //keep alive for 3 seconds\n        sleep(3000);\n     }\n\n     public static void sleep(long millis) {\n       try {\n         Thread.sleep(millis);\n       } catch (InterruptedException e) {\n         e.printStackTrace();\n       }\n     }\n}\n```", "```java\n    Source2: 300 milliseconds\n    Source2: 600 milliseconds\n    Source2: 900 milliseconds\n    Source1: 1 seconds\n    Source2: 1200 milliseconds\n    Source2: 1500 milliseconds\n    Source2: 1800 milliseconds\n    Source1: 2 seconds\n    Source2: 2100 milliseconds\n    Source2: 2400 milliseconds\n    Source2: 2700 milliseconds\n    Source1: 3 seconds\n    Source2: 3000 milliseconds\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable<String> source =\n          Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \n\"Epsilon\");\n\n        source.flatMap(s -> Observable.fromArray(s.split(\"\")))\n          .subscribe(System.out::println);\n      }\n}\n```", "```java\n    A\n    l\n    p\n    h\n    a\n    B\n    e\n    t\n    a\n    G\n    a\n    m\n    m\n    ...\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable<String> source =\n          Observable.just(\"521934/2342/FOXTROT\", \"21962/12112/78886\n            /TANGO\",\n\"283242/4542/WHISKEY/2348562\");\n\n        source.flatMap(s -> Observable.fromArray(s.split(\"/\")))\n          .filter(s -> s.matches(\"[0-9]+\")) //use regex to filter \n            integers\n          .map(Integer::valueOf)\n          .subscribe(System.out::println);\n      }\n}\n```", "```java\n    521934\n    2342\n    21962\n    12112\n    78886\n    283242\n    4542\n    2348562\n```", "```java\nimport io.reactivex.Observable;\nimport java.util.concurrent.TimeUnit;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable<Integer> intervalArguments =\n          Observable.just(2, 3, 10, 7);\n\n        intervalArguments.flatMap(i ->\nObservable.interval(i, TimeUnit.SECONDS)\n            .map(i2 -> i + \"s interval: \" + ((i + 1) * i) + \" seconds \n              elapsed\")\n          ).subscribe(System.out::println);\n\n          sleep(12000);\n      }\n      public static void sleep(long millis) {\n        try {\n          Thread.sleep(millis);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        }\n      }\n}\n```", "```java\n    2s interval: 2 seconds elapsed\n    3s interval: 3 seconds elapsed\n    2s interval: 4 seconds elapsed\n    2s interval: 6 seconds elapsed\n    3s interval: 6 seconds elapsed\n    7s interval: 7 seconds elapsed\n    2s interval: 8 seconds elapsed\n    3s interval: 9 seconds elapsed\n    2s interval: 10 seconds elapsed\n    10s interval: 10 seconds elapsed\n    2s interval: 12 seconds elapsed\n    3s interval: 12 seconds elapsed\n```", "```java\nObservable<Integer> secondIntervals =\nObservable.just(2, 0, 3, 10, 7);\n\nsecondIntervals.flatMap(i -> {\nif (i == 0)\nreturn Observable.empty();\nelse\nreturn Observable.interval(i, TimeUnit.SECONDS)\n.map(l -> i + \"s interval: \" + ((l + 1) * i) + \" seconds \nelapsed\");\n}).subscribe(System.out::println);\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n      public static void main(String[] args) {\n        Observable<String> source =\n          Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \n\"Epsilon\");\n\n        source.flatMap(s -> Observable.fromArray(s.split(\"\")), (s,r) -> \ns + \"-\" + r)\n            .subscribe(System.out::println);\n      }\n}\n```", "```java\n    Alpha-A\n    Alpha-l\n    Alpha-p\n    Alpha-h\n    Alpha-a\n    Beta-B\n    Beta-e\n    Beta-t\n    Beta-a\n    Gamma-G\n    ...\n\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable<String> source1 =\n          Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \n\"Epsilon\");\n\n        Observable<String> source2 =\n          Observable.just(\"Zeta\", \"Eta\", \"Theta\");\n\n        Observable.concat(source1, source2)\n          .subscribe(i -> System.out.println(\"RECEIVED: \" + i));\n      }\n}\n```", "```java\n    RECEIVED: Alpha\n    RECEIVED: Beta\n    RECEIVED: Gamma\n    RECEIVED: Delta\n    RECEIVED: Epsilon\n    RECEIVED: Zeta\n    RECEIVED: Eta\n    RECEIVED: Theta\n```", "```java\n    source1.concatWith(source2)\n      .subscribe(i -> System.out.println(\"RECEIVED: \" + i));\n```", "```java\nimport io.reactivex.Observable;\nimport java.util.concurrent.TimeUnit;\n\npublic class Launcher {\n    public static void main(String[] args) {\n\n        //emit every second, but only take 2 emissions\n        Observable<String> source1 =\n          Observable.interval(1, TimeUnit.SECONDS)\n            .take(2)\n            .map(l -> l + 1) // emit elapsed seconds\n            .map(l -> \"Source1: \" + l + \" seconds\");\n\n          //emit every 300 milliseconds\n          Observable<String> source2 =\n            Observable.interval(300, TimeUnit.MILLISECONDS)\n              .map(l -> (l + 1) * 300) // emit elapsed milliseconds\n              .map(l -> \"Source2: \" + l + \" milliseconds\");\n\n          Observable.concat(source1, source2)\n            .subscribe(i -> System.out.println(\"RECEIVED: \" + i));\n\n          //keep application alive for 5 seconds\n          sleep(5000);\n    }\n\n    public static void sleep(long millis) {\n      try {\n        Thread.sleep(millis);\n      } catch (InterruptedException e) {\n        e.printStackTrace();\n      }\n    }\n}\n```", "```java\nRECEIVED: Source1: 1 seconds\nRECEIVED: Source1: 2 seconds\nRECEIVED: Source2: 300 milliseconds\nRECEIVED: Source2: 600 milliseconds\nRECEIVED: Source2: 900 milliseconds\nRECEIVED: Source2: 1200 milliseconds\nRECEIVED: Source2: 1500 milliseconds\n\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n    public static void main(String[] args) {\n\n        Observable<String> source =\n                Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Epsilon\");\n\n        source.concatMap(s -> Observable.fromArray(s.split(\"\")))\n                .subscribe(System.out::println);\n    }\n}\n\n```", "```java\nA\nl\np\nh\na\nB\ne\nt\na\nG\na\nm\nm\n...\n```", "```java\nimport io.reactivex.Observable;\nimport java.util.Arrays;\nimport java.util.concurrent.TimeUnit;\n\npublic class Launcher {\n    public static void main(String[] args) {\n\n        //emit every second\n        Observable<String> source1 =\n                Observable.interval(1, TimeUnit.SECONDS)\n                        .take(2)\n                        .map(l -> l + 1) // emit elapsed seconds\n                        .map(l -> \"Source1: \" + l + \" seconds\");\n\n        //emit every 300 milliseconds\n        Observable<String> source2 =\n                Observable.interval(300, TimeUnit.MILLISECONDS)\n                        .map(l -> (l + 1) * 300) // emit elapsed milliseconds\n                        .map(l -> \"Source2: \" + l + \" milliseconds\");\n\n        //emit Observable that emits first\n        Observable.amb(Arrays.asList(source1, source2))\n                .subscribe(i -> System.out.println(\"RECEIVED: \" + i));\n\n        //keep application alive for 5 seconds\n        sleep(5000);\n    }\n\n    public static void sleep(long millis) {\n        try {\n            Thread.sleep(millis);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```", "```java\nRECEIVED: Source2: 300 milliseconds\nRECEIVED: Source2: 600 milliseconds\nRECEIVED: Source2: 900 milliseconds\nRECEIVED: Source2: 1200 milliseconds\nRECEIVED: Source2: 1500 milliseconds\nRECEIVED: Source2: 1800 milliseconds\nRECEIVED: Source2: 2100 milliseconds\n...\n```", "```java\n//emit Observable that emits first\nsource1.ambWith(source2)\n        .subscribe(i -> System.out.println(\"RECEIVED: \" + i));\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n    public static void main(String[] args) {\n\n        Observable<String> source1 =\n                Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Epsilon\");\n\n        Observable<Integer> source2 = Observable.range(1,6);\n\n        Observable.zip(source1, source2, (s,i) -> s + \"-\" + i)\n                .subscribe(System.out::println);\n    }\n}\n```", "```java\nAlpha-1\nBeta-2\nGamma-3\nDelta-4\nEpsilon-5\n```", "```java\nsource1.zipWith(source2, (s,i) -> s + \"-\" + i)\n```", "```java\nimport io.reactivex.Observable;\nimport java.time.LocalTime;\nimport java.util.concurrent.TimeUnit;\n\npublic class Launcher {\n    public static void main(String[] args) {\n\n        Observable<String> strings =\n                Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Epsilon\");\n\n        Observable<Long> seconds =\n                Observable.interval(1, TimeUnit.SECONDS);\n\n        Observable.zip(strings,seconds, (s,l) -> s)\n                .subscribe(s -> \nSystem.out.println(\"Received \" + s + \n                                \" at \" + LocalTime.now())\n                );\n\n        sleep(6000);\n    }\n    public static void sleep(long millis) {\n        try {\n            Thread.sleep(millis);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```", "```java\nReceived Alpha at 13:28:28.428\nReceived Beta at 13:28:29.388\nReceived Gamma at 13:28:30.389\nReceived Delta at 13:28:31.389\nReceived Epsilon at 13:28:32.389\n```", "```java\nimport io.reactivex.Observable;\nimport java.util.concurrent.TimeUnit;\n\npublic class Launcher {\n    public static void main(String[] args) {\n\n        Observable<Long> source1 =\n                Observable.interval(300, TimeUnit.MILLISECONDS);\n\n        Observable<Long> source2 =\n                Observable.interval(1, TimeUnit.SECONDS);\n\n        Observable.combineLatest(source1, source2,\n                (l1,l2) -> \"SOURCE 1: \" + l1 + \"  SOURCE 2: \" + l2)\n                .subscribe(System.out::println);\n\n        sleep(3000);\n    }\n    public static void sleep(long millis) {\n        try {\n            Thread.sleep(millis);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```", "```java\nSOURCE 1: 2  SOURCE 2: 0\nSOURCE 1: 3  SOURCE 2: 0\nSOURCE 1: 4  SOURCE 2: 0\nSOURCE 1: 5  SOURCE 2: 0\nSOURCE 1: 5  SOURCE 2: 1\nSOURCE 1: 6  SOURCE 2: 1\nSOURCE 1: 7  SOURCE 2: 1\nSOURCE 1: 8  SOURCE 2: 1\nSOURCE 1: 9  SOURCE 2: 1\nSOURCE 1: 9  SOURCE 2: 2\n```", "```java\nimport io.reactivex.Observable;\nimport java.util.concurrent.TimeUnit;\n\npublic class Launcher {\n    public static void main(String[] args) {\n\n        Observable<Long> source1 =\n                Observable.interval(300, TimeUnit.MILLISECONDS);\n\n        Observable<Long> source2 =\n                Observable.interval(1, TimeUnit.SECONDS);\n\n        source2.withLatestFrom(source1,\n                (l1,l2) -> \"SOURCE 2: \" + l1 + \"  SOURCE 1: \" + l2\n        ) .subscribe(System.out::println);\n\n        sleep(3000);\n    }\n    public static void sleep(long millis) {\n        try {\n            Thread.sleep(millis);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```", "```java\nSOURCE 2: 0  SOURCE 1: 2\nSOURCE 2: 1  SOURCE 1: 5\nSOURCE 2: 2  SOURCE 1: 9\n```", "```java\nimport io.reactivex.Observable;\nimport io.reactivex.observables.GroupedObservable;\n\npublic class Launcher {\n    public static void main(String[] args) {\n\n        Observable<String> source = \nObservable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Epsilon\");\n\n        Observable<GroupedObservable<Integer,String>> byLengths =\n                source.groupBy(s -> s.length());\n    }\n}\n```", "```java\nimport io.reactivex.Observable;\nimport io.reactivex.observables.GroupedObservable;\n\npublic class Launcher {\n    public static void main(String[] args) {\n\n        Observable<String> source =\n                Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Epsilon\");\n\n        Observable<GroupedObservable<Integer,String>> byLengths =\n                source.groupBy(s -> s.length());\n\n        byLengths.flatMapSingle(grp -> grp.toList())\n                .subscribe(System.out::println);\n    }\n}\n```", "```java\n[Beta]\n[Alpha, Gamma, Delta]\n[Epsilon]\n```", "```java\nimport io.reactivex.Observable;\nimport io.reactivex.observables.GroupedObservable;\n\npublic class Launcher {\n    public static void main(String[] args) {\n\n        Observable<String> source =\n                Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Epsilon\");\n\n        Observable<GroupedObservable<Integer,String>> byLengths =\n                source.groupBy(s -> s.length());\n\n        byLengths.flatMapSingle(grp ->\ngrp.reduce(\"\",(x,y) -> x.equals(\"\") ? y : x + \", \" + y)\n                        .map(s -> grp.getKey() + \": \" + s)\n        ).subscribe(System.out::println);\n    }\n}\n```", "```java\n4: Beta\n5: Alpha, Gamma, Delta\n7: Epsilon\n```"]