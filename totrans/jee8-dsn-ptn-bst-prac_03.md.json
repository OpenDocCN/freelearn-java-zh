["```java\nimport java.io.Serializable;\n\npublic class Discipline implements Serializable{\n  private String name;\n  private String code;\n\n  @Override\n  public int hashCode() {\n    final int prime = 31;\n    int result = 1;\n    result = prime * result + ((code == null) ? 0 : code.hashCode());\n    return result;\n  }\n  @Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (obj == null)\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    Discipline other = (Discipline) obj;\n    if (code == null) {\n      if (other.code != null)\n        return false;\n    } else if (!code.equals(other.code))\n      return false;\n    return true;\n  }\n  public Discipline() {\n  }\n  public Discipline(String code, String name) {\n    this.setCode(code);\n    this.setName(name);\n  }\n  public String getName() {\n    return name;\n  }\n  public void setName(String name) {\n    this.name = name;\n  }\n  public String getCode() {\n    return code;\n  }\n  public void setCode(String code) {\n    this.code = code;\n  }\n}\n\n```", "```java\n import java.io.Serializable;\n\n public class Course implements Serializable {\n private String code;\n private String name;\n public Course() {\n }\n public Course (String code, String name) {\n     this.setCode(code);\n     this.setName(name);\n }\n public String getCode() {\n     return code;\n }\n public void setCode(String code) {\n     this.code = code;\n }\n public String getName() {\n     return name;\n }\n public void setName(String name) {\n     this.name = name;\n }\n}\n\n```", "```java\nimport java.io.Serializable;\nimport java.time.LocalDate;\n\npublic abstract class Member implements Serializable {\n\n  @Override\n  public int hashCode() {\n    final int prime = 31;\n    int result = 1;\n    result = prime * result + ((name == null) ? 0 : name.hashCode());\n    return result;\n  }\n  @Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (obj == null)\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    Member other = (Member) obj;\n    if (name == null) {\n      if (other.name != null)\n        return false;\n    } else if (!name.equals(other.name))\n      return false;\n    return true;\n  }\n  private String name;\n  private LocalDate initDate;\n  private String email;\n\n  public String getEmail() {\n    return email;\n  }\n  public void setEmail(String email) {\n    this.email = email;\n  }\n  public String getName() {\n    return name;\n  }\n  public void setName(String name) {\n    this.name = name;\n  }\n  public LocalDate getInitDate() {\n    return initDate;\n  }\n  public void setInitDate(LocalDate initDate) {\n    this.initDate = initDate;\n  }\n}\n```", "```java\nimport java.util.Date;\nimport java.time.LocalDate;\n\npublic class Professor extends Member {\n  private LocalDate initTeachDate;\n  public Professor() {\n  }\n  public Professor(String name, LocalDate initDate) {\n    this.setName(name);\n    this.setInitDate(initDate);\n  }\n  public Professor(String name) {\n    this.setName(name);\n  }\n  public LocalDate getInitTeachDate() {\n    return initTeachDate;\n  }\n  public void setInitTeachDate(LocalDate initTeachDate) {\n    this.initTeachDate = initTeachDate;\n  }\n}\n```", "```java\npublic class Student extends Member {\n  private String enrollment;\n  public Student() {\n  }\n  public Student(String enrollment) {\n    this.setEnrollment(enrollment);\n  }\n  public Student(String enrollment, String name) {\n    this.setEnrollment(enrollment);\n    this.setName(name);\n  }\n  public String getEnrollment() {\n    return enrollment;\n  }\n  public void setEnrollment(String enrollment) {\n    this.enrollment = enrollment;\n  }\n}\n```", "```java\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class CourseDAO {\n  private static Map<Course, List<Discipline>> courseXDisciplines;\n  static {\n    Discipline d1 = new Discipline(\"D1\", \"discipline 1\");\n    Discipline d2 = new Discipline(\"D2\", \"discipline 2\");\n    Discipline d3 = new Discipline(\"D3\", \"discipline 3\");\n    Discipline d4 = new Discipline(\"D4\", \"discipline 4\");\n\n    courseXDisciplines = new HashMap<>();\n    courseXDisciplines.put (new Course (\"C1\", \"Course 1\"), Arrays.asList (d1,  d2, d4));\n    courseXDisciplines.put (new Course (\"C2\", \"Course 2\"), Arrays.asList (d1, d3));\n    courseXDisciplines.put (new Course (\"C3\", \"Course 3\"), Arrays.asList (d2, d3, d4));\n  }\n\n  public List<Discipline> getDisciplinesByCourse(Course course) {\n    return courseXDisciplines.get(course);\n  }\n}\n```", "```java\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\npublic class DisciplineDAO {\n  private static Map<Discipline, List<Discipline>> disciplineXPreReqDisciplines = new HashMap<>();\n  private static Map<Professor, List<Discipline>> professorXDisciplines = new HashMap<>();\n  private static Map<Discipline, List<String>> disciplineXBooks = new HashMap<>();\n  private static List<Discipline> disciplines;\n\n  static {\n    Discipline d1 = new Discipline(\"D1\", \"discipline 1\");\n    Discipline d2 = new Discipline(\"D2\", \"discipline 2\");\n    Discipline d3 = new Discipline(\"D3\", \"discipline 3\");\n    Discipline d4 = new Discipline(\"D4\", \"discipline 4\");\n    disciplines = Arrays.asList(d1, d2, d3, d4);\n\n    disciplineXPreReqDisciplines.put (d3, Arrays.asList (d1, d2));\n    disciplineXPreReqDisciplines.put (d4, Arrays.asList (d2));\n\n    professorXDisciplines.put (new Professor (\"professor a\"), Arrays.asList (d1, d2));\n        professorXDisciplines.put (new Professor (\"professor b\"), Arrays.asList (d3));\n        professorXDisciplines.put (new Professor (\"professor cv\"), Arrays.asList (d1, d3, d4));\n\n        disciplineXBooks.put (d1, Arrays.asList (\"book x\", \"book y\"));\n        disciplineXBooks.put (d2, Arrays.asList (\"book x\", \"book a\", \"book w\"));\n        disciplineXBooks.put (d3, Arrays.asList (\"book x\", \"book b\"));\n        disciplineXBooks.put (d4, Arrays.asList (\"book z\"));\n  }\n\n  public List<Discipline> getPreRequisiteDisciplines (Discipline discipline) {\n    return disciplineXPreReqDisciplines.get (discipline);\n  }\n\n  public List<Discipline> getDisciplinesByProfessor(Professor professor) {\n    return professorXDisciplines.get (professor);\n  }\n\n  public List<String> getBooksByDiscipline(Discipline discipline) {\n    return disciplineXBooks.get (discipline);\n  }\n\n  public List<Professor> getProfessorByDiscipline (Discipline discipline) {\n    return professorXDisciplines.keySet()\n         .stream()\n         .filter (p->professorXDisciplines.get(p).contains(discipline))\n         //.collect(ArrayList::new, ArrayList::add, ArrayList::addAll);\n         .collect(Collectors.toList());\n  }\n\n  public Discipline getDisciplineByCode (String code) {\n    return disciplines\n    .stream()\n    .filter(s->s.getCode().equals(code))\n    .findAny()\n    .get();\n  } \n}\n```", "```java\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\npublic class StudentDAO {\n\n  public static enum FINANCIAL_STATUS {\n    OK (true, \"OK\"), PENDING (false, \"Payment pending\"), DOC_PENDING (true, \"Document pending\");\n\n    private boolean status;\n    private String description;\n    public boolean isStatus() {\n      return status;\n    }\n    public String getDescription() {\n      return description;\n    }\n    FINANCIAL_STATUS (boolean status, String description){\n      this.status = status;\n      this.description = description;\n    }\n  }\n\n  public static enum ACADEMIC_STATUS {\n    APPROVED , FAILED;\n  }\n\n  private static List<Student> students;\n  private static Map<String, FINANCIAL_STATUS> studentStatusPayment = new HashMap<>();\n  private static Map<Student, List<String>> studentXCourseName = new HashMap<>();\n\n  static {\n    Student s1 = new Student (\"20010001\", \"student 1\");\n    Student s2 = new Student (\"20010002\", \"student 2\");\n    Student s3 = new Student (\"20010003\", \"student 3\");\n    Student s4 = new Student (\"20010004\", \"student 4\");\n    students = Arrays.asList(s1, s2, s3, s4); \n\n    studentStatusPayment.put (\"20010001\", FINANCIAL_STATUS.OK);\n    studentStatusPayment.put (\"20010002\", FINANCIAL_STATUS.OK);\n    studentStatusPayment.put (\"20010003\", FINANCIAL_STATUS.PENDING);\n    studentStatusPayment.put (\"20010004\", FINANCIAL_STATUS.OK);\n\n    studentXCourseName.put (s1, Arrays.asList (\"C01\", \"C02\"));\n    studentXCourseName.put (s2, Arrays.asList (\"C03\"));\n    studentXCourseName.put (s3, Arrays.asList (\"C04\"));\n    studentXCourseName.put (s4, Arrays.asList (\"C03\", \"C04\"));\n  }\n\n  public static Map<String, FINANCIAL_STATUS> getStudentStatusPayment() {\n    return studentStatusPayment;\n  }\n  public List<Student> getEnrolledStudentByCourse(Course course) {\n    return studentXCourseName.keySet()\n        .stream()\n        .filter(s->studentXCourseName.get(s).contains(course.getCode()))\n        .collect(Collectors.toList());\n  }\n  public Student getStudentByEnrollment (String enrollment) {\n    return students\n    .stream()\n    .filter(s->s.getEnrollment().equals(enrollment))\n    .findAny()\n    .get();\n  }\n}\n```", "```java\nimport java.time.LocalDate;\nimport java.util.Arrays;\nimport java.util.Set;\nimport java.util.stream.Collectors;\npublic class ProfessorDAO {\n  private static Set<Professor> professors;\n  static {\n    Professor p1 = new Professor (\"professor a\", LocalDate.of (2001, 03, 22)),\n          p2 = new Professor (\"professor b\", LocalDate.of (1994, 07, 05)),\n              p3 = new Professor (\"professor c\", LocalDate.of (1985, 10, 12)),\n              p4 = new Professor (\"professor cv\", LocalDate.of (2005, 07, 17));\n\n    professors = Arrays\n          .stream (new Professor[]{p1, p2, p3, p4})\n            .collect (Collectors.toSet());\n\n  }\n  public Professor findByName (String name) {\n    return professors\n        .stream()\n        .filter(p->p.getName().equals(name))\n        .findAny()\n        .get();\n  }\n}\n```", "```java\nimport java.time.DayOfWeek;\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.List;\nimport java.util.Set;\nimport javax.ejb.Asynchronous;\nimport javax.ejb.LocalBean;\nimport javax.ejb.Stateless;\nimport javax.enterprise.event.Observes;\nimport javax.inject.Inject;\n/**\n * Session Bean implementation class AcademicFacadeImpl\n */\n@Stateless\n@LocalBean \npublic class AcademicFacadeImpl {\n\n  @Inject\n  private CourseDAO courseDAO;\n  @Inject\n  private DisciplineDAO disciplineDAO;\n  @Inject\n  private StudentDAO studentDAO;\n  @Inject\n  private ProfessorDAO professorDAO; \n\n  public List<Discipline> getDisciplinesByCourse(Course course) {\n    return courseDAO.getDisciplinesByCourse (course);\n  }\n  public List<Discipline> getPreRequisiteDisciplines (Discipline discipline) {\n    return disciplineDAO.getPreRequisiteDisciplines(discipline);\n  }\n  public List<Discipline> getDisciplinesByProfessor(Professor professor) {\n    return disciplineDAO.getDisciplinesByProfessor(professor);\n  }\n  public List<String> getBooksByDiscipline(Discipline discipline) {\n    return disciplineDAO.getBooksByDiscipline(discipline);\n  }\n  public List<Student> getEnrolledStudentByCourse(Course course) {\n    return studentDAO.getEnrolledStudentByCourse (course);\n  }\n  public void requestTestReview (Student student, Discipline discipline, LocalDate testDate) {\n    // TODO\n  }\n\n  private LocalDateTime scheduleTestReview (TestRevisionTO testRevisionTO)\n  {\n    LocalDateTime dateTime = null;\n    try {\n      Thread.sleep(10000); \n      // get some code to calculate the schedule date for the test review\n      Thread.sleep (5000); // simulate some delay during calculation\n      dateTime = LocalDateTime.now().plusDays(10);\n      if (dateTime.getDayOfWeek().equals(DayOfWeek.SUNDAY)) {\n        dateTime = dateTime.plusDays(1);\n      }\n    } catch (InterruptedException e) {\n      e.printStackTrace();\n    }\n    return dateTime;\n  }\n  private void sendEmail (TestRevisionTO testRevisionTO, LocalDateTime dateTime) {\n    Student student = studentDAO.getStudentByEnrollment (testRevisionTO.getEnrollment());\n    String enrollment = student.getEnrollment(); \n    String studentName = student.getName();\n    String email = student.getEmail();\n    Discipline discipline = disciplineDAO.getDisciplineByCode (testRevisionTO.getDisciplineCode());\n    String disciplineName = discipline.getName(); \n    String disciplineCode = discipline.getCode(); // testRevisionTO.getDisciplineCode()\n    String date = dateTime.format(DateTimeFormatter.ISO_LOCAL_DATE);\n    String time = dateTime.format(DateTimeFormatter.ofPattern(\"HH:mm\"));\n    // sending an email using the above information ...\n    System.out.println(\"sending an email to : \" + studentName + \" ...\");\n  }\n\n  public void requestTestReview (@ObservesAsync TestRevisionTO testRevisionTO) {\n    System.out.println(\"matricula \" + testRevisionTO.getEnrollment());\n    LocalDateTime dateTime = scheduleTestReview (testRevisionTO);\n    sendEmail (testRevisionTO, dateTime); // send an email with the schedule date for the test review:\n  }\n\n  public List<Professor> getProfessorsByDiscipline(Discipline discipline) {\n    return disciplineDAO.getProfessorByDiscipline(discipline);\n  }\n\n  public boolean canProfessorTeachDiscipline (Professor professor, Discipline discipline) {\n    return disciplineDAO.getDisciplinesByProfessor(professor)  .contains(discipline);\n }\n}\n```", "```java\nimport javax.ejb.LocalBean;\nimport javax.ejb.Stateless;\nimport javax.inject.Inject;\n\n/**\n * Session Bean implementation class FinancialFacadeImpl\n */\n@Stateless\n@LocalBean\npublic class FinancialFacadeImpl {\n\n  @Inject\n  private StudentDAO studentDAO; \n\n  public FinancialFacadeImpl() {\n  }\n\n  public boolean canStudentEnroll (Student student) {\n      return studentDAO.getStudentStatusPayment().get (student.getEnrollment()).isStatus();\n  }\n\n  public boolean isStudentPending (Student student) {\n      FINANCIAL_STATUS status = studentDAO.getStudentStatusPayment().get (student.getEnrollment());\n      return (status.equals (FINANCIAL_STATUS.PENDING)) || (status.equals (FINANCIAL_STATUS.DOC_PENDING)); \n  }\n}\n```", "```java\n  public void requestTestReview (@ObservesAsync TestRevisionTO testRevisionTO) {\n    System.out.println(\"Enrollment : \" + testRevisionTO.getEnrollment());\n    LocalDateTime dateTime = scheduleTestReview (testRevisionTO);\n    sendEmail (testRevisionTO, dateTime); // send an email with the schedule date for the test review:\n  }\n```", "```java\n// Event Injection :\n@Inject \n  Event<TestRevisionTO> event;\n...\n...\n\n    // get the schedule date for a test revision:\n    TestRevisionTO testRevisionTO = new TestRevisionTO();\n    testRevisionTO.setEnrollment (\"20010003\");\n    testRevisionTO.setDisciplineCode(\"D3\");\n    LocalDate date = LocalDate.of(2017, 11, 21);\n    LocalTime time = LocalTime.of (8, 30);\n    LocalDateTime dateTime = LocalDateTime.of(date, time); \n    testRevisionTO.setTestDateTime (dateTime);\n    event.fire (testRevisionTO);\n```", "```java\nimport java.io.Serializable;\nimport java.time.LocalDateTime;\n\npublic class TestRevisionTO implements Serializable {\n\n  private String enrollment;\n  private String disciplineCode;\n  private LocalDateTime testDateTime;\n  public String getEnrollment() {\n    return enrollment;\n  }\n  public void setEnrollment(String enrollment) {\n    this.enrollment = enrollment;\n  }\n  public String getDisciplineCode() {\n    return disciplineCode;\n  }\n  public void setDisciplineCode(String disciplineCode) {\n    this.disciplineCode = disciplineCode;\n  }\n  public LocalDateTime getTestDateTime() {\n    return testDateTime;\n  }\n  public void setTestDateTime(LocalDateTime testDateTime) {\n    this.testDateTime = testDateTime;\n  }\n}\n```", "```java\nimport java.time.LocalDate;\nimport java.util.List;\nimport javax.inject.Inject;\n\npublic class ProfessorBO {\n  private Professor professor; \n  private List<Discipline> disciplines;\n\n  @Inject \n  private ProfessorDAO professorDAO;\n\n  @Inject\n  private DisciplineDAO disciplineDAO;\n\n  public void setProfessor (Professor professor ) {\n    this.professor = professorDAO.findByName (professor.getName());\n  }\n  public boolean canTeachDiscipline (Discipline discipline) {\n    if (disciplines == null) {\n      disciplines = disciplineDAO.getDisciplinesByProfessor (professor);\n    }\n    return disciplines.stream().anyMatch(d->d.equals(discipline));\n    //return disciplines.contains(discipline);\n  }\n\n  public LocalDate getInitDate () {\n    return professor.getInitDate();\n  }\n  public String getName () {\n    return professor.getName();\n  }\n}\n```", "```java\n@Stateless\n@LocalBean \npublic class AcademicFacadeImpl implements AcademicFacadeRemote, AcademicFacadeLocal {\n\n ...\n ... \n\n  @Inject \n  private ProfessorBO professorBO;\n\n  @Override\n  public List<Professor> getProfessorsByDiscipline(Discipline discipline) {\n    return disciplineDAO.getProfessorByDiscipline(discipline);\n  }\n\n    public boolean canProfessorTeachDiscipline (Professor professor, Discipline discipline) {\n    /*return disciplineDAO.getDisciplinesByProfessor (professor).contains(discipline);*/\n    professorBO.setProfessor (professor);\n    return professorBO.canTeachDiscipline(discipline);\n  }\n\n}\n```", "```java\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class DisciplineDAO {\nstatic {\n    Discipline d1 = new Discipline(\"D1\", \"discipline 1\");\n    Discipline d2 = new Discipline(\"D2\", \"discipline 2\");\n    Discipline d3 = new Discipline(\"D3\", \"discipline 3\");\n    Discipline d4 = new Discipline(\"D4\", \"discipline 4\");\n    disciplines = Arrays.asList(d1, d2, d3, d4);\n    ...    \n    professorXDisciplines.put (new Professor (\"professor a\"), Arrays.asList (d1, d2));\n        professorXDisciplines.put (new Professor (\"professor b\"), Arrays.asList (d3));\n        professorXDisciplines.put (new Professor (\"professor cv\"), Arrays.asList (d1, d3, d4));\n}  \n\n...\n\npublic List<Discipline> getDisciplinesByProfessor(Professor professor) {\n    return professorXDisciplines.get (professor);\n  }\n...\n\n}\n```", "```java\npublic class ProfessorDAO {\n  private static Set<Professor> professors;\n  static {\n   Professor p1 = new Professor (\"professor a\", LocalDate.of (2001, 03, \n   22)),\n      p2 = new Professor (\"professor b\", LocalDate.of (1994, 07, 05)),\n      p3 = new Professor (\"professor c\", LocalDate.of (1985, 10, 12)),\n      p4 = new Professor (\"professor cv\", LocalDate.of (2005, 07, 17));\n\n    professors = Arrays\n          .stream (new Professor[]{p1, p2, p3, p4})\n            .collect (Collectors.toSet());\n\n  }\n\n  public Professor findByName (String name) {\n    return professors\n        .stream()\n        .filter(p->p.getName().equals(name))\n        .findAny()\n        .get();\n  }\n\n}\n```", "```java\nimport java.time.LocalDate;\nimport java.util.List;\nimport javax.inject.Inject;\n\npublic class ProfessorBO {\n  private Professor professor; \n  private List<Discipline> disciplines;\n\n  @Inject \n  private ProfessorDAO professorDAO;\n\n  @Inject\n  private DisciplineDAO disciplineDAO;\n\n  public void setProfessor (Professor professor ) {\n    this.professor = professorDAO.findByName (professor.getName());\n  }\n\n  public boolean canTeachDiscipline (Discipline discipline) {\n    if (disciplines == null) {\n      disciplines = disciplineDAO.getDisciplinesByProfessor \n      (professor);\n    }\n    return disciplines.stream().anyMatch(d->d.equals(discipline));\n    //return disciplines.contains(discipline);\n  }\n\n  public LocalDate getInitDate () {\n    return professor.getInitDate();\n  }\n  public String getName () {\n    return professor.getName();\n  }\n\n}\n```"]