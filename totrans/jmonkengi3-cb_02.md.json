["```java\n    boolean forward, backward, leftRotate, rightRotate, leftStrafe, rightStrafe;\n    ```", "```java\n    public void onAction(String action, boolean isPressed, float tpf) {\n      if (action.equals(\"StrafeLeft\")) {\n        leftStrafe = isPressed;\n      } else if (action.equals(\"StrafeRight\")) {\n          rightStrafe = isPressed;\n\n      } else if (action.equals(\"MoveForward\")) {\n          forward = isPressed;\n\n      } else if (action.equals(\"MoveBackward\")) {\n          backward = isPressed;\n\n      } else if (action.equals(\"Jump\")) {\n          jump();\n      } else if (action.equals(\"Duck\")) {\n          setDucked(isPressed);\n\n      }\n    }\n    ```", "```java\n    public void update(float tpf) {\n      super.update(tpf);\n      Vector3f modelForwardDir = spatial.getWorldRotation().mult(Vector3f.UNIT_Z);\n      Vector3f modelLeftDir = spatial.getWorldRotation().mult(Vector3f.UNIT_X);\n      walkDirection.set(0, 0, 0);\n    ```", "```java\n    if (forward) {\n      walkDirection.addLocal(modelForwardDir.mult(moveSpeed));\n    } else if (backward) {\n      walkDirection.addLocal(modelForwardDir.negate().multLocal(moveSpeed));\n    }\n    if (leftStrafe) {\n      walkDirection.addLocal(modelLeftDir.mult(moveSpeed));\n    } else if (rightStrafe) {\n      walkDirection.addLocal(modelLeftDir.negate().multLocal(moveSpeed));\n    }\n    ```", "```java\n    BetterCharacterControl.setWalkDirection(walkDirection);\n    ```", "```java\n    public void onAnalog(String name, float value, float tpf) {\n      if (name.equals(\"RotateLeft\")) {\n        rotate(tpf * value * sensitivity);\n      } else if (name.equals(\"RotateRight\")) {\n      rotate(-tpf * value * sensitivity);\n      } else if(name.equals(\"LookUp\")){\n      lookUpDown(value * tpf * sensitivity);\n      } else if (name.equals(\"LookDown\")){\n      lookUpDown(-value * tpf * sensitivity);\n      }\n    }\n    ```", "```java\n    private void rotate(float value){\n      Quaternion rotate = new Quaternion().fromAngleAxis(FastMath.PI * value, Vector3f.UNIT_Y);\n      rotate.multLocal(viewDirection);\n      setViewDirection(viewDirection);\n    }\n    ```", "```java\n    head.setLocalTranslation(0, 1.8f, 0);\n    ```", "```java\n    public void setSpatial(Spatial spatial) {\n      super.setSpatial(spatial);\n      if(spatial instanceof Node){\n        ((Node)spatial).attachChild(head);\n      }\n    }\n    ```", "```java\n    private void lookUpDown(float value){\n      yaw += value;\n      yaw = FastMath.clamp(yaw, -FastMath.HALF_PI, FastMath.HALF_PI);\n      head.setLocalRotation(new Quaternion().fromAngles(yaw, 0, 0));\n    }\n    ```", "```java\n    public void setCamera(Camera cam){\n      CameraNode camNode = new CameraNode(\"CamNode\", cam);\n      camNode.setControlDir(CameraControl.ControlDirection.SpatialToCamera);\n      head.attachChild(camNode);\n    }\n    ```", "```java\n    Node playerNode = new Node(\"Player\");\n    GameCharacterControl charControl = new GameCharacterControl(0.5f, 2.5f, 8f);\n    charControl.setCamera(cam);\n    playerNode.addControl(charControl);\n    charControl.setGravity(normalGravity);\n\n    bulletAppState.getPhysicsSpace().add(charControl);\n    ```", "```java\ncamNode.setLocalTranslation(new Vector3f(0, 5, -5));\ncamNode.lookAt(head.getLocalTranslation(), Vector3f.UNIT_Y);\n```", "```java\n    public enum InputMapping{\n      RotateLeft, RotateRight, LookUp, LookDown, StrafeLeft,\n      StrafeRight, MoveForward, MoveBackward;\n    }\n    ```", "```java\n    private void addInputMappings(){\n      inputManager.addMapping(InputMapping.RotateLeft.name(), new MouseAxisTrigger(MouseInput.AXIS_X, true));\n      inputManager.addMapping(InputMapping.RotateRight.name(), new MouseAxisTrigger(MouseInput.AXIS_X, false));\n      inputManager.addMapping(InputMapping.LookUp.name(), new MouseAxisTrigger(MouseInput.AXIS_Y, false));\n      inputManager.addMapping(InputMapping.LookDown.name(), new MouseAxisTrigger(MouseInput.AXIS_Y, true));\n      inputManager.addMapping(InputMapping.StrafeLeft.name(), new KeyTrigger(KeyInput.KEY_A), new KeyTrigger(KeyInput.KEY_LEFT));\n      inputManager.addMapping(InputMapping.StrafeRight.name(), new KeyTrigger(KeyInput.KEY_D), new KeyTrigger(KeyInput.KEY_RIGHT));\n      inputManager.addMapping(InputMapping.MoveForward.name(), new KeyTrigger(KeyInput.KEY_W), new KeyTrigger(KeyInput.KEY_UP));\n      inputManager.addMapping(InputMapping.MoveBackward.name(), new KeyTrigger(KeyInput.KEY_S), new KeyTrigger(KeyInput.KEY_DOWN));\n\n    }\n    ```", "```java\n    for (InputMapping i : InputMapping.values()) {\n      inputManager.addListener(this, i.name());\n    }\n    ```", "```java\n    public void initialize(AppStateManager stateManager, Application app) {\n      super.initialize(stateManager, app);\n      this.inputManager = app.getInputManager();\n      addInputMappings();\n    }\n    ```", "```java\n    public void onAnalog(String name, float value, float tpf) {\n      if(character != null){\n        character.onAnalog(name, value * sensitivity, tpf);\n      }\n    }\n\n    public void onAction(String name, boolean isPressed, float tpf) {\n      if(character != null){\n        character.onAction(name, isPressed, tpf);\n      }\n    }\n    ```", "```java\n    public void cleanup() {\n      super.cleanup();\n      for (InputMapping i : InputMapping.values()) {\n        if (inputManager.hasMapping(i.name())) {\n          inputManager.deleteMapping(i.name());\n        }\n      }\n      inputManager.removeListener(this);\n    }\n    ```", "```java\n    public void onFire(){\n      cooldown = cooldownTime;\n    }\n    ```", "```java\n    inputManager.addMapping(InputMapping.Fire.name(), new MouseButtonTrigger(MouseInput.BUTTON_LEFT));\n    ```", "```java\n    if (name.equals(\"Fire\")) {\n      if (isPressed && character.getCooldown() == 0f){\n        fire();\n      }\n    } else {\n      character.onAction(name, isPressed, tpf);\n    }\n    ```", "```java\n    Ray r = new Ray(app.getCamera().getLocation(), app.getCamera().getDirection());\n    ```", "```java\n    CollisionResults collRes = new CollisionResults();\n    for(Geometry g: targets) {\n      g.collideWith(r, collRes);\n    }\n    ```", "```java\n    if(collRes.size() > 0){\n      System.out.println(\"hit \" + collRes.getClosestCollision().getContactPoint());\n    }\n    ```", "```java\n    private Vector3f worldPosition;\n    private Vector3f direction;\n    private float speed = 10;\n    private Ray ray;\n    private final static int RANGE = 10;\n    private float distance;\n    private boolean alive = true;\n    ```", "```java\n    ray = new Ray(origin, direction);\n    ray.setOrigin(worldPosition);\n    ```", "```java\n    ray.setLimit (speed * tpf);\n    distance += ray.limit;\n    worldPosition.addLocal(direction.mult(ray.limit));\n    ```", "```java\n    if(distance >= RANGE){\n      alive = false;\n    }\n    ```", "```java\n    public CollisionResult checkCollision(List<Collidable> targets){\n      CollisionResults collRes = new CollisionResults();\n      for(Collidable g: targets){\n        g.collideWith(ray, collRes);\n      }\n      if(collRes.size() > 0){\n        alive = false;\n        return collRes.getClosestCollision();\n      }\n      return null;\n    }\n    ```", "```java\n    Bullet b = bullets.get(i);\n    b.update(tpf);\n    CollisionResult result = b.checkCollision(targets);\n    if(result != null){\n      System.out.println(\"hit \" + result);\n    }\n    if(!b.isAlive()){\n      bullets.remove(b);\n      bulletAmount--;\n      if(i > 0){\n        i--;\n      }\n    }\n    ```", "```java\n    bullets.add(new Bullet(cam.getLocation().clone(), cam.getDirection().clone()));\n    ```", "```java\n    if (isPressed && character.getCooldown() == 0f){\n      ((CharacterInputTest_Firing_NonInstant) app ).fire();\n      character.onFire();\n    }\n    ```", "```java\n    public class RTSCameraAppState extends AbstractAppState implements AnalogListener, ActionListener{\n    ```", "```java\n    public enum InputMapping{\n    MoveLeft, MoveRight, MoveUp, MoveDown,\n        RotateLeft, RotateRight;\n    }\n    ```", "```java\n    private Vector3f camLocation = new Vector3f(0, 20, 0);\n    private Vector3f lookAtDirection = new Vector3f(0, -0.8f, -0.2f);\n\n    public void initialize(AppStateManager stateManager, Application app) {\n      this.cam = app.getCamera();cam.lookAtDirection(lookAtDirection, Vector3f.UNIT_Y);\n      camLocation.set(cam.getDirection().mult(-camDistance));\n      cam.setLocation(camLocation);\n      this.inputManager = app.getInputManager();\n      addInputMappings();\n    }\n    ```", "```java\n    private void addInputMappings(){\n      inputManager.addMapping(InputMapping.MoveLeft.name(), new KeyTrigger(KeyInput.KEY_A), new KeyTrigger(KeyInput.KEY_LEFT));\n      inputManager.addMapping(InputMapping.MoveRight.name(), new KeyTrigger(KeyInput.KEY_D), new KeyTrigger(KeyInput.KEY_RIGHT));\n    ...[repeat for all keys]... InputMapping.MoveDown.name(),InputMapping.RotateLeft.name(),InputMapping.RotateRight.name()});\n    }\n    ```", "```java\n    public void onAction(String name, boolean isPressed, float tpf) {\n      InputMapping input = InputMapping.valueOf(name);\n      switch(input){\n        case MoveUp:\n          moveUp = isPressed;\n          break;\n          [repeat for all actions]      case RotateRight:\n          rotateRight = isPressed;\n          break;\n      }\n    }\n    ```", "```java\n    public void update(float tpf) {\n      super.update(tpf);\n      camLocation = cam.getLocation();\n      Vector3f tempVector = new Vector3f();\n    ```", "```java\n    if(moveUp){\n      tempVector.addLocal(0, 0, 1f);\n    } else if(moveDown){\n      tempVector.addLocal(0, 0, -1f);\n    }\n    if(moveLeft){\n      tempVector.addLocal(1f, 0, 0);\n    } else if (moveRight){\n      tempVector.addLocal(-1f, 0, 0);\n    }\n    ```", "```java\n    tempVector.multLocal(tpf).multLocal(moveSpeed);\n    camLocation.addLocal(tempVector);\n    ```", "```java\n    cam.setLocation(camLocation);\n    ```", "```java\n    private void rotate(float value){\n      Quaternion rotate = new Quaternion().fromAngleAxis(FastMath.PI * value, Vector3f.UNIT_Y);\n      rotate.multLocal(cam.getRotation());\n      cam.setRotation(rotate);\n    }\n    ```", "```java\n    if(rotateLeft){\n      rotate(rotateSpeed);\n    } else if (rotateRight){\n      rotate(-rotateSpeed);\n    }\n    ```", "```java\n    cam.getRotation().multLocal(tempVector);\n    tempVector.multLocal(1, 0, 1).normalizeLocal();\n    tempVector.multLocal(tpf).multLocal(moveSpeed);\n\n    ```", "```java\n    Vector2f mousePos2D = inputManager.getCursorPosition();\n    if(mousePos2D.x > 0 && mousePos2D.x < cam.getWidth() / 10f){\n      tempVector.addLocal(1f, 0, 0);\n    } else if(mousePos2D.x < cam.getWidth() && mousePos2D.x > cam.getWidth() - cam.getWidth() / 10f){\n      tempVector.addLocal(-1f, 0, 0);\n    }\n    if(mousePos2D.y > 0 && mousePos2D.y < cam.getHeight() / 10f){\n      tempVector.addLocal(0, 0, -1f);\n    } else if(mousePos2D.y < cam.getHeight() && mousePos2D.y > cam.getHeight() - cam.getHeight() / 10f){\n      tempVector.addLocal(0, 0, 1f);\n    }\n    ```", "```java\n    terrain.addControl(new RigidBodyControl(0));\n    ```", "```java\n    Ray ray = new Ray(cam.getLocation(), cam.getDirection());\n    CollisionResults results = new CollisionResults();terrain.collideWith(ray, results);\n    ```", "```java\n    height = results.getClosestCollision().getContactPoint().y;\n    ```", "```java\n    camLocation.setY(checkHeight() + camDistance);\n    cam.setLocation(camLocation);\n    ```", "```java\n    public void setSelected(boolean selected) {\n      this.selected = selected;\n      if (marker != null) {\n        if (this.selected) {\n          ((Node) spatial).attachChild(marker);\n        } else {\n          ((Node) spatial).detachChild(marker);\n        }\n      }\n    }\n    ```", "```java\n    private static String LEFT_CLICK = \"Left Click\";\n    private List<Spatial> selectables = new ArrayList<Spatial>();\n    ```", "```java\n    private void onClick() {\n      Vector2f mousePos2D = inputManager.getCursorPosition();\n    ```", "```java\n    Vector3f mousePos3D = app.getCamera().getWorldCoordinates(mousePos2D, 0f);\n    ```", "```java\n    Vector3f clickDir = mousePos3D.add(app.getCamera().getWorldCoordinates(mousePos2D, 1f)).normalizeLocal();\n    ```", "```java\n    for (Spatial spatial : selectables) {\n      spatial.collideWith(ray, results);\n    }\n\n    CollisionResult closest = results.getClosestCollision();\n    ```", "```java\n    spatial.getControl(SelectableControl.class).setSelected(true);\n    ```", "```java\n    SelectAppState selectAppState = new SelectAppState();\n    stateManager.attach(selectAppState);\n    ```", "```java\n    jaime.addControl(selectableControl);\n    selectAppState.addSelectable(jaime);\n    ```", "```java\n    if(tempVector.length() > 0){\n      follow = false;\n    }\n    ```", "```java\n    Vector3f targetLocation2D = targetLocation.mult(UNIT_XZ);\n    ```", "```java\n    Vector3f camDirOffset = cam.getDirection().mult(camDistance);\n    ```", "```java\n    Vector3f camLocation2D = camLocation.add(camDirOffset).multLocal(UNIT_XZ);\n    ```", "```java\n    if(targetLocation2D.distance(camLocation2D) > 0.01f){\n      camLocation2D.interpolate(targetLocation2D, 0.3f);\n      camLocation.set(camLocation2D);\n      camLocation.subtractLocal(camDirOffset);\n    ```", "```java\n    appState.setTargetLocation(jaime.getWorldTranslation());\n    appState.setFollow(true);\n    ```", "```java\n    jaime.move(0.2f * tpf, 0, 0);\n    ```", "```java\n    ChaseCamera chaseCam = new ChaseCamera(cam, playerNode, inputManager);\n    ```", "```java\n    chaseCam.setDragToRotate(false);\n    ```", "```java\n    chaseCam.setSmoothMotion(true);\n    ```", "```java\n    chaseCam.setDefaultDistance(7f);\n    chaseCam.setMaxDistance(8f);\n    chaseCam.setMinDistance(6f);\n    ```", "```java\n    chaseCam.setChasingSensitivity(5);\n    ```", "```java\n    chaseCam.setRotationSpeed(10);\n    ```", "```java\n    Vector3f modelForwardDir = cam.getRotation().mult(Vector3f.UNIT_Z).multLocal(1, 0, 1);\n    Vector3f modelLeftDir = cam.getRotation().mult(Vector3f.UNIT_X);\n    ```", "```java\n    viewDirection.set(walkDirection);\n    ```", "```java\n    setViewDirection(viewDirection);\n    ```", "```java\nif(!forward && !backward && !leftStrafe && !rightStrafe){\n  modelForwardDir = cam.getRotation().mult(Vector3f.UNIT_Z).multLocal(1, 0, 1);\n  modelLeftDir = cam.getRotation().mult(Vector3f.UNIT_X);\n}\n```", "```java\n    Joystick[] joysticks = inputManager.getJoysticks();\n      if (joysticks != null){\n        for( Joystick j : joysticks ) {\n          for(JoystickAxis axis : j.getAxes()){\n    ```", "```java\n    axis.assignAxis(InputMapping.StrafeRight.name(), InputMapping.StrafeLeft.name());\n    ```", "```java\n    button.assignButton(\"Fire\");\n    ```", "```java\n    private Node centerPoint = new Node(\"Center\");\n    ```", "```java\n    if(spatial instanceof Node){\n      ((Node)spatial).attachChild(centerPoint);\n      centerPoint.setLocalTranslation(0, 0.9f, 0);\n      centerPoint.attachChild(head);\n    }\n    ```", "```java\n    private boolean leanLeft, leanRight, leanFree;\n    ```", "```java\n    private float leanValue;\n    private float maxLean = FastMath.QUARTER_PI * 0.5f;\n    ```", "```java\n    if (binding.equals(\"LeanLeft\")){\n      leanLeft = value;\n    } else if (binding.equals(\"LeanRight\")){\n      leanRight = value;\n    } else if (binding.equals(\"LeanFree\")){\n      leanFree = value;\n    }\n    ```", "```java\n    private void lean(float value){\n      FastMath.clamp(value, -maxLean, maxLean);\n      centerPoint.setLocalRotation(new Quaternion().fromAngles(0, 0, -value));\n    }\n    ```", "```java\n    if(leanLeft && leanValue < maxLean){\n      lean(leanValue+= 0.5f * tpf);\n    } else if(!leanFree && leanValue > 0f){\n      lean(leanValue-= 0.5f * tpf);\n    }\n    ```", "```java\n    if(leanFree){\n      if (name.equals(\"RotateLeft\")) {\n        leanValue += value * tpf;\n      } else if (name.equals(\"RotateRight\")) {\n        leanValue -= value * tpf;\n      }\n      lean(leanValue);\n    }\n    ```", "```java\n    private float playerWidth = 0.1f;\n    private boolean inCover, hasLowCover, hasHighCover;\n    private float lowHeight = 0.5f, highHeight = 1.5f;\n    private Node structures;\n    ```", "```java\n    Ray ray = new Ray();\n    ray.setDirection(viewDirection);\n    ray.setLimit(0.8f);\n    ```", "```java\n    Vector3f leftDir = spatial.getWorldRotation().getRotationColumn(0).mult(playerWidth);\n    ```", "```java\n    leftDir.setY(lowHeight);\n    ```", "```java\n    for(int i = -1; i < 2; i++){\n      leftDir.multLocal(i, 1, i);\n      ray.setOrigin(position.add(leftDir));\n      structures.collideWith(ray, collRes);\n      if(collRes.size() > 0){\n      lowCollisions++;\n      }\n      collRes.clear();\n    }\n    ```", "```java\n    if(lowCollisions == 3){\n      ray.setOrigin(spatial.getWorldTranslation().add(0, 0.5f, 0));\n      structures.collideWith(ray, collRes);\n\n      Triangle t = new Triangle();\n      collRes.getClosestCollision().getTriangle(t);\n    ```", "```java\n    viewDirection.set(t.getNormal().negate());\n    ```", "```java\n    if(binding.equals(\"ToggleCover\") && value){\n      if(inCover){\n        inCover = false;\n      } else {\n        checkCover(spatial.getWorldTranslation());\n        if(hasLowCover || hasHighCover){\n          inCover = true;\n        }\n      }\n    ```", "```java\n    modelForwardDir = spatial.getWorldRotation().mult(Vector3f.UNIT_Z);\n    modelLeftDir = spatial.getWorldRotation().mult(Vector3f.UNIT_X);\n    ```", "```java\n    if(walkDirection.length() > 0){\n     if(inCover){\n     checkCover(spatial.getWorldTranslation().add(walkDirection.multLocal(0.2f).mult(0.1f)));\n        if(!hasLowCover && !hasHighCover){\n          walkDirection.set(Vector3f.ZERO);\n        }\n      }\n    ```", "```java\n    inputManager.addMapping(InputMapping.ToggleCover.name(), new KeyTrigger(KeyInput.KEY_V));\n    ```"]