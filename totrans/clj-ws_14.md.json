["```java\n(defn handler [request]\n  ..\n<response-map>)\n```", "```java\n{:remote-addr \"0:0:0:0:0:0:0:1\",\n :headers {\"user-agent\" \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36\",\n           \"cookie\" \"phaseInterval=120000; previewCols=url%20status%20size%20timeline; stats=true\",\n           \"connection\" \"keep-alive\",\n           \"accept\" \"text/html,application/xhtml+xml\"},\n :server-port 8080,\n :uri \"/request-demo\",\n :server-name \"localhost\",\n :query-string nil,\n :body #object[org.eclipse.jetty.server.HttpInputOverHTTP 0x4a7d22dd \"HttpInputOverHTTP@4a7d22dd[c=0,q=0,[0]=null,s=STREAM]\"],\n :scheme :http,\n :request-method :get}\n```", "```java\n    {:deps {ring/ring-core {:mvn/version \"1.7.1\"}\n            ring/ring-jetty-adapter {:mvn/version \"1.7.1\"}}}\n    ```", "```java\n    user=> (defn handler [request]\n      {:status 200\n       :body \"Hello World\"})\n    =>#'user/handler\n    ```", "```java\n    user=> (require '[ring.adapter.jetty :refer [run-jetty]])\n    => nil\n    user=> (def app (run-jetty handler {:port 8080\n                          :join? false}))\n    =>#'user/app\n    ```", "```java\n(def route \n  (GET \"/hello\" request \"Hello World\"))\n```", "```java\n(defroutes routes\n           <route-1>\n           <route-2>\n           ..)\n```", "```java\n(require '[compojure.route :as route])\n(defroutes routes\n           <route-1>\n           <route-2>\n            (route/not-found \"Not the route you are looking for\"))\n```", "```java\n    {:deps {compojure {:mvn/version \"1.6.1\"}\n            ring/ring-core {:mvn/version \"1.7.1\"}\n            ring/ring-jetty-adapter {:mvn/version \"1.7.1\"}}\n    ```", "```java\n    (defn handler [request]\n      {:status 200\n       :body \"Hello World\"})\n    ```", "```java\n    (require '[compojure.core :refer [GET]])\n    (def route \n      (GET \"/\" request \"Hello World\"))\n    ```", "```java\n    (require '[ring.adapter.jetty :refer [run-jetty]])\n    (defn run\n      []\n      (run-jetty route\n                 {:port  8080\n                  :join? false}))\n    (.stop app)\n    (def app (run))\n    ```", "```java\n    (require '[compojure.core :refer [defroutes]])\n    (defroutes routes\n               (GET \"/route-1\" request \"Hello from route-1\")\n               (GET \"/route-2\" request \"Hello from route-2\"))\n    ```", "```java\n    (defn run\n      []\n      (run-jetty routes {:port  8080\n                      :join? false}))\n    (.stop app)\n    (def app (run))\n    ```", "```java\n    user=> (require '[compojure.route :as route])\n    nil\n    user=> (defroutes routes\n               (GET \"/route-1\" request \"Hello from route-1\")\n               (GET \"/route-2\" request \"Hello from route-2\")\n               (route/not-found \"Not the route you are looking for\"))\n    => #'user/routes\n    ```", "```java\n    (defroutes routes\n               (route/not-found \"Not the route you are looking for\")\n               (GET \"/route-1\" request \"Hello from route-1\")\n               (GET \"/route-2\" request \"Hello from route-2\"))\n    ```", "```java\n(defn custom-middleware\n  [handler]\n  (fn [request]\n    (->> request\n         ;; manipulate request before\n         handler\n         ;; manipulate response after\n         )))\n```", "```java\n(require '[muuntaja.middleware :as middleware])\n(defn run\n  []\n  (run-jetty\n    (middleware/wrap-format routes)\n    {:port  8080\n     :join? false}))\n```", "```java\n    {:deps {compojure {:mvn/version \"1.6.1\"}\n    metosin/muuntaja {:mvn/version \"0.6.4\"}\n            ring/ring-core {:mvn/version \"1.7.1\"}\n            ring/ring-jetty-adapter {:mvn/version \"1.7.1\"}}\n    user=> (require '[muuntaja.middleware :as middleware])\n    =>nil\n    ```", "```java\n    (defroutes routes\n               (GET \"/string\" request \"a simple string response\")\n               (GET \"/data-structure\" request\n                 {:body {:a 1\n                         :b #{2 3 4}\n                         :c \"nested data structure\"}})\n               (route/not-found \"Not found\"))\n    ```", "```java\n    (defn run\n      []\n      (run-jetty\n        (middleware/wrap-format routes)\n        {:port 8080\n         :join? false}))\n    ```", "```java\n    $ curl -i http://localhost:8080/string\n    ```", "```java\n    $ curl -i -H \"accept: application/edn\" http://localhost:8080/string\n    ```", "```java\n    curl -i http://localhost:8080/data-structure\n    ```", "```java\ncurl -i -H \"accept: application/json\" http://localhost:8080/data-structure\n```", "```java\ncurl -i -H \"accept: application/edn\" http://localhost:8080/data-structure\n```", "```java\n    {:deps {clj-http {:mvn/version \"3.10.0\"}\n            compojure {:mvn/version \"1.6.1\"}\n            metosin/muuntaja {:mvn/version \"0.6.4\"}\n            org.clojure/data.json {:mvn/version \"0.2.6\"}\n            ring/ring-core {:mvn/version \"1.7.1\"}\n            ring/ring-jetty-adapter {:mvn/version \"1.7.1\"}}\n    ```", "```java\n    (require '[compojure.core :refer [defroutes DELETE GET PUT]]\n                  '[compojure.route :as route])\n    (def db (atom {}))\n    (defroutes routes\n              (GET \"/data-structure\" request\n                 (when-let [data-structure (@db :data)]\n                   {:body data-structure}))\n               (PUT \"/data-structure\" request\n                 (swap! db assoc :data (:body-params request))\n                 {:status 201})\n               (DELETE \"/data-structure\" request\n                 (swap! db dissoc :data))\n               (route/not-found \"Not found\"))\n    ```", "```java\n    (defn run\n      []\n      (run-jetty\n        (middleware/wrap-format routes)\n        {:port  8080\n         :join? false}))\n    ```", "```java\n    (require '[clj-http.client :as http]\n             '[clojure.data.json :as json]\n             '[clojure.edn :as edn])\n    (-> (http/put \"http://localhost:8080/data-structure\"\n                  {:content-type :application/json\n                   :body         (json/write-str {:a 1\n                                                  :b #{2 3 4}})})\n        :status)\n    => 201\n    ```", "```java\n    user=> (-> (http/get \"http://localhost:8080/data-structure\"\n                  {:accept :application/edn})\n        :body\n        edn/read-string)\n    => {:b [4 3 2], :a 1}\n    ```", "```java\n    (-> (http/put \"http://localhost:8080/data-structure\"\n                  {:content-type :application/edn\n                  :body         (pr-str {:a 1\n                                          :b #{2 3 4}})})\n        :status)\n    => 201\n    (-> (http/get \"http://localhost:8080/data-structure\"\n                  {:accept :application/edn})\n        :body\n        edn/read-string)\n    => {:a 1, :b #{4 3 2}}\n    ```", "```java\n    (-> (http/delete \"http://localhost:8080/data-structure\")\n        :status)\n    => 200\n    ```", "```java\n    (http/get \"http://localhost:8080/data-structure\"\n              {:accept :application/edn})\n    Execution error (ExceptionInfo) at slingshot.support/stack-trace (support.clj:201).\n    clj-http: status 404\n    ```", "```java\n(route/files \"/files/\" {:root \"/home/<user>/packt-http/resources/\"}) \n```", "```java\n    (defroutes routes\n               (route/files \"/files/\" {:root \"./resources/\"})\n               (route/not-found \"Not found\"))\n    ```", "```java\n(def route\n  (GET \"/users\" [] (query/all-users db)))\n```", "```java\n\"/users/123\"\n\"/users?first-name=David\"\n```", "```java\ningest/user                      POST /users\ningest/activity                  POST /activities\nquery/all-users                  GET /users\nquery/user                       GET /users/:id\nquery/activities-by-user         GET /users/:id/activities\nquery/all-activities             GET /activities\nquery/activity                   GET /activities/:id\nquery/most-active-user           GET /reports?report-type=most-active-user\nquery/monthly-activity-by-user   GET /reports?report-type=monthly-activity-by-user\n```", "```java\n(context \"/users\" []\n  (GET \"/\" []\n    ..\n  (POST \"/\" request\n    ..)\n```", "```java\n(def route\n  (GET \"/users/:id/activity\" {:keys [id] :params} (query/all-users db))\n```", "```java\n(def route\n  (GET \"/users/:id/activity\" [id] (query/all-users db))\n```", "```java\n    {:deps {..\n            clj-http {:mvn/version \"3.10.0\"}\n            compojure {:mvn/version \"1.6.1\"}\n            metosin/muuntaja {:mvn/version \"0.6.4\"}\n            org.clojure/data.json {:mvn/version \"0.2.6\"}\n            ring/ring-core {:mvn/version \"1.7.1\"}\n            ring/ring-jetty-adapter {:mvn/version \"1.7.1\"}}\n    ```", "```java\n    (ns packt-clj.fitness.api\n      (:require\n        [clojure.edn :as edn]\n        [compojure.core :refer [context defroutes DELETE GET PUT POST]]\n        [compojure.route :as route]\n        [muuntaja.middleware :as middleware]\n        [packt-clj.fitness.ingest :as ingest]\n        [packt-clj.fitness.query :as query]\n        [packt-clj.fitness.schema :as schema]\n        [ring.adapter.jetty :refer [run-jetty]]\n        [ring.middleware.params :as params]))\n    ```", "```java\n    (defroutes routes\n               (context \"/users\" []\n                 (GET \"/\" []\n                   {:body (query/all-users schema/db)})\n                 (POST \"/\" req\n                   (let [ingest-result (ingest/user schema/db (edn/read-string (slurp (:body req))))]\n                     {:status  201\n                      :headers {\"Link\" (str \"/users/\" (:1 ingest-result))}}))\n                 (GET \"/:id\" [id]\n                   (when-first [user (query/user schema/db id)]\n                     {:body user}))\n                 (GET \"/:id/activities\" [id]\n                   {:body (query/activities-by-user schema/db id)})))\n    ```", "```java\n    (defroutes routes\n              ..\n              (context \"/activities\" []\n                 (GET \"/\" []\n                   {:body (query/all-activities schema/db)})\n                 (POST \"/\" req\n                   (let [ingest-result (ingest/activity schema/db (edn/read-string (slurp (:body req))))]\n                     {:status  201\n                      :headers {\"Link\" (str \"/activities/\" (:1 ingest-result))}}))\n                 (GET \"/:id\" [id]\n                   (when-first [activity (query/activity schema/db id)]\n                     {:body activity})))\n    ```", "```java\n    (defroutes routes\n              ..\n              (context \"/reports\" [report-type id]\n                 (GET \"/\" []\n                   {:body (case report-type\n                            \"most-active-user\" (query/most-active-user schema/db)\n                            \"monthly-activity-by-user\" (query/monthly-activity-by-user schema/db id)\n                            nil)}))\n               (route/not-found \"Not found\")\n    ```", "```java\n    (defn run\n      []\n      (run-jetty\n        (-> routes\n            middleware/wrap-format\n            params/wrap-params)\n        {:port 8080\n         :join? false}))\n    ```", "```java\n    (require '[packt-clj.fitness.api :as api])\n    (def app (api/run))\n    ```", "```java\n    (require '[clj-http.client :as http])\n    (-> (http/post \"http://localhost:8080/users\"\n                   {:body (pr-str {:first_name \"Boris\"\n                                   :surname    \"Becker\"\n                                   :height     191\n                                   :weight     85})})\n        :headers\n        (get \"Link\"))\n    user=> \"/users/4\"\n    (-> (http/post \"http://localhost:8080/activities\"\n                   {:body (pr-str {:user_id       4\n                                   :activity_type \"run\"\n                                   :activity_date \"2019-03-25\"\n                                   :distance      4970\n                                   :duration      1200})})\n        :headers\n        (get \"Link\"))\n    user=> \"/activities/61\"\n    ```", "```java\n    {:id \"2019-1-d643-s402-5\"\n    :tournament_year  2019,\n    :tournament       \"umag\",\n    :tournament_order 1,\n    :round_order      5,\n    :match_order      1,\n    :winner_id        \"d643\",\n    :loser_id         \"s402\"}\n    ```"]