["```java\npackage com.packt.quarkus.chapter4;\n\npublic class Customer {\n     private Integer id;\n     private String name;\n     private String surname;\n\n     public Integer getId() {\n         return id;\n     }\n\n     public void setId(Integer id) {\n         this.id = id;\n     }\n\n     public String getName() {\n         return name;\n     }\n\n     public void setName(String name) {\n         this.name = name;\n     }\n\n     public String getSurname() {\n         return surname;\n     }\n\n     public void setSurname(String surname) {\n         this.surname = surname;\n     }\n }\n```", "```java\npackage com.packt.quarkus.chapter4;\n\nimport javax.enterprise.context.ApplicationScoped;\nimport java.util.ArrayList;\nimport java.util.List;\n\n@ApplicationScoped\npublic class CustomerRepository {\n\n     List<Customer> customerList = new ArrayList();\n     int counter;\n\n     public int getNextCustomerId() {\n         return counter++;\n     }\n\n     public List<Customer> findAll() {\n         return customerList;\n     }\n\n     public Customer findCustomerById(Integer id) {\n         for (Customer c:customerList) {\n             if (c.getId().equals(id))  {\n                 return c;\n             }\n         }\n         throw new CustomerException(\"Customer not found!\");\n     }\n\n     public void updateCustomer(Customer customer) {\n         Customer customerToUpdate = \n          findCustomerById(customer.getId());\n         customerToUpdate.setName(customer.getName());\n         customerToUpdate.setSurname(customer.getSurname());\n     }\n\n     public void createCustomer(Customer customer) {\n         customer.setId(getNextCustomerId());\n         findAll().add(customer);\n     }\n\n     public void deleteCustomer(Integer customerId) {\n         Customer c = findCustomerById(customerId);\n         findAll().remove(c);\n     }\n}\n```", "```java\npackage com.packt.quarkus.chapter4;\n\nimport javax.enterprise.context.ApplicationScoped;\nimport javax.inject.Inject;\nimport javax.ws.rs.*;\nimport javax.ws.rs.core.Response;\nimport java.util.List;\n\n@Path(\"customers\")\n@ApplicationScoped\n@Produces(\"application/json\")\n@Consumes(\"application/json\")\npublic class CustomerEndpoint {\n\n     @Inject CustomerRepository customerRepository;\n\n     @GET\n     public List<Customer> getAll() {\n         return customerRepository.findAll();\n     }\n\n     @POST\n     public Response create(Customer customer) {\n         customerRepository.createCustomer(customer);\n         return Response.status(201).build();\n\n     }\n\n     @PUT\n     public Response update(Customer customer) {\n         customerRepository.updateCustomer(customer);\n         return Response.status(204).build();\n     }\n     @DELETE\n     public Response delete(@QueryParam(\"id\") Integer customerId) {\n         customerRepository.deleteCustomer(customerId);\n         return Response.status(204).build();\n     }\n\n} \n```", "```java\n$ tree src\n src\n ├── main\n │   ├── docker\n │   ├── java\n │   │   └── com\n │   │       └── packt\n │   │           └── quarkus\n │   │               └── chapter4\n │   │                   ├── CustomerEndpoint.java\n │   │                   ├── Customer.java\n │   │                   ├── CustomerRepository.java\n │   └── resources\n │       ├── application.properties\n │       └── META-INF\n │           └── resources\n │               ├── index.html \n```", "```java\n<link rel=\"stylesheet\" type=\"text/css\" href=\"stylesheet.css\" media=\"screen\" />\n<script src=\"img/angular.min.js\"></script>\n```", "```java\n<script type=\"text/javascript\">\n       var app = angular.module(\"customerManagement\", []);\n       angular.module('customerManagement').constant('SERVER_URL',\n        '/customers');\n       //Controller Part\n       app.controller(\"customerManagementController\",  function \n        ($scope, $http, SERVER_URL) {\n         //Initialize page with default data which is blank in this\n         //example\n         $scope.customers = [];\n         $scope.form = {\n           id: -1,\n           name: \"\",\n           surname: \"\"\n         };\n         //Now load the data from server\n         _refreshPageData();\n         //HTTP POST/PUT methods for add/edit customers\n         $scope.update = function () {\n           var method = \"\";\n           var url = \"\";\n           var data = {};\n           if ($scope.form.id == -1) {\n             //Id is absent so add customers - POST operation\n             method = \"POST\";\n             url = SERVER_URL;\n             data.name = $scope.form.name;\n             data.surname = $scope.form.surname;\n           } else {\n             //If Id is present, it's edit operation - PUT operation\n             method = \"PUT\";\n             url = SERVER_URL;\n             data.id = $scope.form.id;\n             data.name = $scope.form.name;\n             data.surname = $scope.form.surname;\n           }\n           $http({\n             method: method,\n             url: url,\n             data: angular.toJson(data),\n             headers: {\n               'Content-Type': 'application/json'\n             }\n           }).then(_success, _error);\n         };\n         //HTTP DELETE- delete customer by id\n         $scope.remove = function (customer) {\n\n           $http({\n             method: 'DELETE',\n             url: SERVER_URL+'?id='+customer.id\n           }).then(_success, _error);\n         };\n         //In case of edit customers, populate form with customer\n        // data\n         $scope.edit = function (customer) {\n           $scope.form.name = customer.name;\n           $scope.form.surname = customer.surname;\n           $scope.form.id = customer.id;\n         };\n           /* Private Methods */\n         //HTTP GET- get all customers collection\n         function _refreshPageData() {\n           $http({\n             method: 'GET',\n             url: SERVER_URL\n           }).then(function successCallback(response) {\n             $scope.customers = response.data;\n           }, function errorCallback(response) {\n             console.log(response.statusText);\n           });\n         }\n         function _success(response) {\n           _refreshPageData();\n           _clearForm()\n         }\n         function _error(response) {\n           alert(response.data.message || response.statusText);\n         }\n         //Clear the form\n         function _clearForm() {\n           $scope.form.name = \"\";\n           $scope.form.surname = \"\";\n           $scope.form.id = -1;\n         }\n       });\n     </script>\n </head>\n```", "```java\n<body ng-app=\"customerManagement\" ng-controller=\"customerManagementController\">\n <div class=\"divTable blueTable\">\n     <h1>Quarkus CRUD Example</h1>\n     <h2>Enter Customer:</h2>\n     <form ng-submit=\"update()\">\n         <div class=\"divTableRow\">\n             <div class=\"divTableCell\">Name:</div>\n             <div class=\"divTableCell\"><input type=\"text\"         \n              placeholder=\"Name\" ng-model=\n              \"form.name\" size=\"60\"/></div>\n         </div>\n         <div class=\"divTableRow\">\n             <div class=\"divTableCell\">Surname:</div>\n             <div class=\"divTableCell\"><input type=\"text\" \n              placeholder=\"Surname\" ng-model=\"form.surname\" \n             size=\"60\"/>\n        </div>\n         </div>\n         <input type=\"submit\" value=\"Save\"/>\n     </form>\n     <div class=\"divTable blueTable\">\n         <div class=\"divTableHeading\">\n             <div  class=\"divTableHead\">Customer Name</div>\n             <div  class=\"divTableHead\">Customer Address</div>\n             <div  class=\"divTableHead\">Action</div>\n         </div>\n         <div class=\"divTableRow\" ng-repeat=\"customer in customers\">\n             <div class=\"divTableCell\">{{ customer.name }}</div>\n             <div class=\"divTableCell\">{{ customer.surname }}</div>\n             <div class=\"divTableCell\"><a ng-click=\"edit( customer )\" \n             class=\"myButton\">Edit</a>\n             <a ng-click=\"remove( customer )\"\n             class=\"myButton\">Remove</a></div>\n         </div>\n     </div>\n </body>\n</html>\n```", "```java\n<dependency>\n   <groupId>io.quarkus</groupId>\n   <artifactId>quarkus-jsonb</artifactId>\n</dependency>\n```", "```java\n@QuarkusTest\npublic class CustomerEndpointTest {\n\n     @Test\n     public void testCustomerService() {\n\n         JsonObject obj = Json.createObjectBuilder()\n                 .add(\"name\", \"John\")\n                 .add(\"surname\", \"Smith\").build();\n\n         // Test POST\n         given()\n                 .contentType(\"application/json\")\n                 .body(obj.toString())\n                 .when()\n                 .post(\"/customers\")\n                 .then()\n                 .statusCode(201);\n\n         // Test GET\n         given()\n                 .when().get(\"/customers\")\n                 .then()\n                 .statusCode(200)\n                 .body(containsString(\"John\"),\n                       containsString(\"Smith\"));\n\n         obj = Json.createObjectBuilder()\n                 .add(\"id\", \"0\")\n                 .add(\"name\", \"Donald\")\n                 .add(\"surname\", \"Duck\").build();\n\n         // Test PUT\n         given()\n                 .contentType(\"application/json\")\n                 .body(obj.toString())\n                 .when()\n                 .put(\"/customers\")\n                 .then()\n                 .statusCode(204);\n\n         // Test DELETE\n         given()\n                 .contentType(\"application/json\")\n                 .when()\n                 .delete(\"/customers?id=0\")\n                 .then()\n                 .statusCode(204);\n\n     }\n } \n```", "```java\n$ mvn package\n```", "```java\n[INFO] Results:\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0\n```", "```java\n$ mvn quarkus:dev\n```", "```java\n$ mvn package -Pnative -Dnative-image.docker-build=true\n```", "```java\n#Create a new Project named quarkus-customer-service\n$ oc new-project quarkus-customer-service\n\n# Binary Build definition \n$ oc new-build --binary --name=quarkus-customer-service -l app=quarkus-customer-service\n\n# Add the dockerfilePath location to our Binary Build\n$ oc patch bc/quarkus-customer-service -p '{\"spec\":{\"strategy\":{\"dockerStrategy\":{\"dockerfilePath\":\"src/main/docker/Dockerfile.native\"}}}}'\n\n# Uploading directory \".\" as binary input for the build\n$ oc start-build quarkus-customer-service --from-dir=. --follow\n\n# Create a new application using as source the Binary Build\n$ oc new-app --image-stream=quarkus-customer-service:latest\n\n# Create a Route for external clients\n$ oc expose svc/quarkus-customer-service\n```", "```java\nquarkus.http.cors=true\nquarkus.http.cors.origins=*\nquarkus.http.cors.methods=GET,PUT,POST,DELETE, OPTIONS\nquarkus.http.cors.headers=X-Custom,accept, authorization, content-type, x-requested-with\nquarkus.http.cors.exposed-headers=Content-Disposition\n```", "```java\nquarkus.http.cors.origins=http://custom.origin.com\n```", "```java\nvar connection = new WebSocket('ws://localhost:8080/hello');\n```", "```java\n@ServerEndpoint(value = \"/hello\")\npublic class WebSocketEndpoint {\n\n     @OnOpen\n     public void onOpen(Session session) throws IOException {\n         // Establish connection\n     }\n\n     @OnMessage\n     public void onMessage(Session session, Message message) throws \n    IOException {\n         // Handle Websocket messages\n     }\n\n     @OnClose\n     public void onClose(Session session) throws IOException {\n     }\n\n     @OnError\n     public void onError(Session session, Throwable throwable) {\n     }\n}\n```", "```java\n@ServerEndpoint(value=\"/customers\", encoders = {MessageEncoder.class})\n\npublic class WebsocketEndpoint {\n     @Inject\n     CustomerRepository customerRepository;\n\n     public List<Customer>  addCustomer(String message, Session \n     session) {\n        Jsonb jsonb = JsonbBuilder.create();\n\n        Customer customer = jsonb.fromJson(message, Customer.class);\n        customerRepository.createCustomer(customer);\n        return customerRepository.findAll();\n     }\n     @OnOpen\n     public void myOnOpen(Session session) {\n         System.out.println(\"WebSocket opened: \" + session.getId());\n     }\n     @OnClose\n     public void myOnClose(CloseReason reason) {\n         System.out.println(\"Closing a due to \" + \n          reason.getReasonPhrase());\n     }\n     @OnError\n     public void error(Throwable t) {\n\n     }\n\n }\n```", "```java\npublic class MessageEncoder implements Encoder.Text<java.util.List<Customer>>  {\n\n     @Override\n     public String encode(List<Customer> list) throws EncodeException {\n         JsonArrayBuilder jsonArray = Json.createArrayBuilder();\n         for(Customer c : list) {\n             jsonArray.add(Json.createObjectBuilder()\n                     .add(\"Name\", c.getName())\n                     .add(\"Surname\", c.getSurname()));\n         }\n         JsonArray array = jsonArray.build();\n         StringWriter buffer = new StringWriter();\n         Json.createWriter(buffer).writeArray(array);\n         return buffer.toString();\n     }\n\n     @Override\n     public void init(EndpointConfig config) {\n         System.out.println(\"Init\");\n     }\n\n     @Override\n     public void destroy() {\n         System.out.println(\"destroy\");\n     }\n\n}\n```", "```java\n$ mvn quarkus:add-extension -Dextensions=\"quarkus-undertow-websockets\"\n```", "```java\nAdding extension io.quarkus:quarkus-undertow-websockets\n```", "```java\n$ mvn compile quarkus:dev\n```", "```java\n<html>\n <head>\n     <meta http-equiv=\"content-type\" content=\"text/html; charset=ISO-\n      8859-1\">\n     <link rel=\"stylesheet\" type=\"text/css\" href=\"stylesheet.css\" \n      media=\"screen\" />\n     <script src=\"img/jquery.min.js\"></script>\n     <script src=\"img/functions.js\"></script>\n </head>\n\n <meta charset=\"utf-8\">\n <body>\n <h1 style=\"text-align: center;\">Connect to Quarkus Websocket Endpoint</h1>\n <br>\n\n <div>\n\n     <form id=\"form1\" action=\"\">\n         <div><h3>Enter Customer</h3></div>\n         <div class=\"divTableRow\">\n             <div class=\"divTableCell\">Name:</div>\n             <div class=\"divTableCell\"><input type=\"text\" \n              placeholder=\"Name\" name=\"name\" size=\"60\"/></div>\n         </div>\n         <div class=\"divTableRow\">\n             <div class=\"divTableCell\">Surname:</div>\n             <div class=\"divTableCell\"><input type=\"text\" \n              placeholder=\"Surname\" name=\"surname\"  \n              size=\"60\"/></div>\n         </div>\n\n         <br/>\n         <input onclick=\"send_message()\" value=\"Insert\" type=\"button\" \n          class=\"myButton\">\n     </form>\n     <br/>\n\n </div>\n\n <table id=\"customerDataTable\" class=\"blueTable\" />\n <div id=\"output\"></div>\n </body>\n</html>\n```", "```java\nvar wsUri = \"ws://localhost:8080/customers\";\n\nfunction init() {\n     output = document.getElementById(\"output\");\n}\n\nfunction send_message() {\n     websocket = new WebSocket(wsUri);\n     websocket.onopen = function(evt) {\n         onOpen(evt)\n     };\n     websocket.onmessage = function(evt) {\n         onMessage(evt)\n     };\n     websocket.onerror = function(evt) {\n         onError(evt)\n     };\n}\n\nfunction onOpen(evt) {\n     doSend(name.value);\n}\n\nfunction onMessage(evt) {\n     buildHtmlTable('#customerDataTable', evt.data);\n}\n\nfunction onError(evt) {\n     writeToScreen('<span style=\"color: red;\">ERROR:</span> \n      ' + evt.data);\n}\n\nfunction doSend(message) {\n     var json = toJSONString(document.getElementById(\"form1\"));\n     websocket.send(json);\n\n}\n```", "```java\n$ mvn compile quarkus:dev -Dquarkus.http.port=9080 -Ddebug=6005\n```", "```java\n@WebServlet(\"/AjaxHandler\")\npublic class AjaxHandler extends HttpServlet {\n\n     public AjaxHandler() {\n         super();\n     }\n\n     protected void doGet(HttpServletRequest request, \n      HttpServletResponse response)\n      throws ServletException, IOException {\n         String endpoint = System.getenv(\"CUSTOMER_SERVICE\")\n         != null ? System.getenv(\"CUSTOMER_SERVICE\") : \n         \"ws://localhost:8080/customers\";\n\n         PrintWriter out = response.getWriter();\n         out.println(endpoint);\n         out.flush();\n\n     }\n\n     protected void doPost(HttpServletRequest request, \n         HttpServletResponse response) throws\n         ServletException, IOException {\n         doGet(request, response);\n     }\n}\n```", "```java\nvar wsUri = \"\";\nfunction callAjax() {\n\n     httpRequest = new XMLHttpRequest();\n\n     if (!httpRequest) {\n         console.log('Unable to create XMLHTTP instance');\n         return false;\n     }\n     httpRequest.open('GET', 'AjaxHandler');\n     httpRequest.responseType = 'text';\n     httpRequest.send();\n     httpRequest.onreadystatechange = function() {\n         if (httpRequest.readyState === XMLHttpRequest.DONE) {\n             if (httpRequest.status === 200) {\n                 wsUri = httpRequest.response;\n             } else {\n                 console.log('Something went wrong..!!');\n             }\n         }\n     }\n}\n```", "```java\n<body onload=\"callAjax()\">\n```", "```java\n$ mvn quarkus:dev\n```", "```java\n$ mvn quarkus:dev -Dquarkus.http.port=8888\n```", "```java\n$ export CUSTOMER_SERVICE=ws://localhost:8888/customers\n```"]