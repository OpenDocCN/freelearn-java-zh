["```java\n<dependency>\n```", "```java\n    <groupId>junit</groupId>\n```", "```java\n    <artifactId>junit</artifactId>\n```", "```java\n    <version>4.13.2</version>\n```", "```java\n    <scope>test</scope>\n```", "```java\n</dependency>\n```", "```java\npublic class Class1 {\n```", "```java\n    public int multiplyByTwo(int i){\n```", "```java\n        return i * 2;\n```", "```java\n    }\n```", "```java\n}\n```", "```java\nimport org.junit.Test;\n```", "```java\npublic class Class1Test {\n```", "```java\n    @Test\n```", "```java\n    public void multiplyByTwo() {\n```", "```java\n    }\n```", "```java\n}\n```", "```java\n@Test\n```", "```java\npublic void multiplyByTwo() {\n```", "```java\n    Class1 class1 = new Class1();\n```", "```java\n    int result = class1.multiplyByTwo(2);\n```", "```java\n    Assert.assertEquals(4, result);\n```", "```java\n}\n```", "```java\npublic class Class1 {\n```", "```java\n    public int multiplyByTwo2(Class2 class2){\n```", "```java\n        return class2.getValue() * 2;\n```", "```java\n    }\n```", "```java\n}\n```", "```java\n       <dependency>\n           <groupId>org.mockito</groupId>\n           <artifactId>mockito-core</artifactId>\n           <version>4.2.0</version>\n           <scope>test</scope>\n       </dependency>\n    ```", "```java\n    Class2 class2Mock = Mockito.mock(Class2.class);\n    ```", "```java\n    Mockito.when(class2Mock.getValue()).thenReturn(5);\n    ```", "```java\n    Class1 class1 = new Class1();\n    int result = class1.multiplyByTwo2(class2Mock);\n    ```", "```java\n    Assert.assertEquals(10, result);\n    ```", "```java\n    @Test\n    public void multiplyByTwo2() {\n        Class2 class2Mock = Mockito.mock(Class2.class);\n        Mockito.when(class2Mock.getValue()).thenReturn(5);\n        Class1 class1 = new Class1();\n        int result = class1.multiplyByTwo2(mo);\n        Assert.assertEquals(10, result);\n    }\n    ```", "```java\n<dependency>\n```", "```java\n    <groupId>org.apache.logging.log4j</groupId>\n```", "```java\n    <artifactId>log4j-api</artifactId>\n```", "```java\n    <version>2.17.0</version>\n```", "```java\n</dependency>\n```", "```java\n<dependency>\n```", "```java\n    <groupId>org.apache.logging.log4j</groupId>\n```", "```java\n    <artifactId>log4j-core</artifactId>\n```", "```java\n    <version>2.17.0</version>\n```", "```java\n</dependency>\n```", "```java\nimport org.apache.logging.log4j.LogManager;\n```", "```java\nimport org.apache.logging.log4j.Logger;\n```", "```java\npublic class Class1 {\n```", "```java\n   static final Logger logger = \n```", "```java\n               LogManager.getLogger(Class1.class.getName());\n```", "```java\n    public static void main(String... args){\n```", "```java\n        new Class1().multiplyByTwo2(null);\n```", "```java\n    }\n```", "```java\n    public int multiplyByTwo2(Class2 class2){\n```", "```java\n        if(class2 == null){\n```", "```java\n            logger.error(\"The parameter should not be null\");\n```", "```java\n            System.exit(1);\n```", "```java\n        }\n```", "```java\n        return class2.getValue() * 2;\n```", "```java\n    }\n```", "```java\n}\n```", "```java\n18:34:07.672 [main] ERROR Class1 - The parameter should not be null\n```", "```java\nProcess finished with exit code 1\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n```", "```java\n<Configuration status=\"WARN\">\n```", "```java\n    <Appenders>\n```", "```java\n        <Console name=\"Console\" target=\"SYSTEM_OUT\">\n```", "```java\n            <PatternLayout pattern=\"%d{HH:mm:ss.SSS} [%t] \n```", "```java\n                              %-5level %logger{36} - %msg%n\"/>\n```", "```java\n        </Console>\n```", "```java\n    </Appenders>\n```", "```java\n    <Loggers>\n```", "```java\n        <Root level=\"error\">\n```", "```java\n            <AppenderRef ref=\"Console\"/>\n```", "```java\n        </Root>\n```", "```java\n    </Loggers>\n```", "```java\n</Configuration>\n```", "```java\n      Bag<String> bag = new HashBag<>();\n      bag.add(\"one\", 4);\n      System.out.println(bag);    //prints: [4:one]\n      bag.remove(\"one\", 1);\n      System.out.println(bag);    //prints: [3:one]\n      System.out.println(bag.getCount(\"one\")); //prints: 3\n    ```", "```java\n     BidiMap<Integer, String> bidi = new TreeBidiMap<>();\n     bidi.put(2, \"two\");\n     bidi.put(3, \"three\");\n     System.out.println(bidi);  \n                                   //prints: {2=two, 3=three}\n     System.out.println(bidi.inverseBidiMap()); \n                                   //prints: {three=3, two=2}\n     System.out.println(bidi.get(3));         //prints: three\n     System.out.println(bidi.getKey(\"three\")); //prints: 3\n     bidi.removeValue(\"three\"); \n     System.out.println(bidi);              //prints: {2=two}\n    ```", "```java\n     IterableMap<Integer, String> map =\n                 new HashedMap<>(Map.of(1, \"one\", 2, \"two\"));\n     MapIterator it = map.mapIterator();\n     while (it.hasNext()) {\n          Object key = it.next();\n          Object value = it.getValue();\n          System.out.print(key + \", \" + value + \", \"); \n                                    //prints: 2, two, 1, one, \n          if(((Integer)key) == 2){\n             it.setValue(\"three\");\n          }\n     }\n     System.out.println(\"\\n\" + map); \n                                   //prints: {2=three, 1=one}\n    ```", "```java\n     OrderedMap<Integer, String> map = new LinkedMap<>();\n     map.put(4, \"four\");\n     map.put(7, \"seven\");\n     map.put(12, \"twelve\");\n     System.out.println(map.firstKey()); //prints: 4\n     System.out.println(map.nextKey(2)); //prints: null\n     System.out.println(map.nextKey(7)); //prints: 12\n     System.out.println(map.nextKey(4)); //prints: 7\n    ```", "```java\nString encodedStr = new String(Base64\n```", "```java\n                    .encodeBase64(\"Hello, World!\".getBytes()));\n```", "```java\nSystem.out.println(encodedStr);  //prints: SGVsbG8sIFdvcmxkIQ==\n```", "```java\nSystem.out.println(Base64.isBase64(encodedStr)); //prints: true\n```", "```java\nString decodedStr = \n```", "```java\n  new String(Base64.decodeBase64(encodedStr.getBytes()));\n```", "```java\nSystem.out.println(decodedStr);  //prints: Hello, World!\n```"]