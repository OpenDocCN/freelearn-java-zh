["```java\nimplementation 'io.micrometer:micrometer-registry-prometheus' \n```", "```java\nannotations:\n  prometheus.io/scrape: \"true\"\n  prometheus.io/port: \"4004\"\n  prometheus.io/scheme: http\n  prometheus.io/path: \"/actuator/prometheus\" \n```", "```java\nmanagement.metrics.tags.application: ${spring.application.name} \n```", "```java\nif [[ $USE_K8S == \"true\" ]]\nthen\n  # Verify access to Prometheus formatted metrics\n  echo \"Prometheus metrics tests\"\n  assertCurl 200 \"curl -ks https://health.minikube.me/actuator/prometheus\"\nfi \n```", "```java\n    cd $BOOK_HOME/Chapter20\n    eval $(minikube docker-env -u)\n    ./gradlew build\n    eval $(minikube docker-env)\n    docker-compose build \n    ```", "```java\n    kubectl delete namespace hands-on\n    kubectl apply -f kubernetes/hands-on-namespace.yml\n    kubectl config set-context $(kubectl config current-context) --namespace=hands-on \n    ```", "```java\n    for f in kubernetes/helm/components/*; do helm dep up $f; done \n    ```", "```java\n    for f in kubernetes/helm/environments/*; do helm dep up $f; done \n    ```", "```java\n    helm install hands-on-dev-env \\\n      kubernetes/helm/environments/dev-env \\\n      -n hands-on --wait \n    ```", "```java\n    minikube tunnel \n    ```", "```java\n    ./test-em-all.bash \n    ```", "```java\n    kubectl -n istio-system create deployment mail-server --image maildev/maildev:2.0.5\n    kubectl -n istio-system expose deployment mail-server --port=1080,1025 --type=ClusterIP\n    kubectl -n istio-system wait --timeout=60s --for=condition=ready pod -l app=mail-server \n    ```", "```java\n    helm upgrade istio-hands-on-addons kubernetes/helm/environments/istio-system -n istio-system \n    ```", "```java\nkubectl -n istio-system set env deployment/grafana \\\n    GF_ALERTING_ENABLED=true \\\n    GF_UNIFIED_ALERTING_ENABLED=false \\\n    GF_SMTP_ENABLED=true \\\n    GF_SMTP_SKIP_VERIFY=true \\\n    GF_SMTP_HOST=mail-server:1025 \\\n    GF_SMTP_FROM_ADDRESS=grafana@minikube.me\nkubectl -n istio-system wait --timeout=60s --for=condition=ready pod -l app=Grafana \n```", "```java\nACCESS_TOKEN=$(curl https://writer:secret-writer@minikube.me/oauth2/token -d grant_type=client_credentials -d scope=\"product:read product:write\" -ks | jq .access_token -r)\necho ACCESS_TOKEN=$ACCESS_TOKEN\nsiege https://minikube.me/product-composite/1 -H \"Authorization: Bearer $ACCESS_TOKEN\" -c1 -d1 -v \n```", "```java\ncurl https://health.minikube.me/actuator/prometheus -ks \n```", "```java\nACCESS_TOKEN=$(curl https://writer:secret-writer@minikube.me/oauth2/token -d grant_type=client_credentials -d scope=\"product:read product:write\" -ks | jq .access_token -r)\necho ACCESS_TOKEN=$ACCESS_TOKEN\nfor ((n=0; n<4; n++)); do curl -o /dev/null -skL -w \"%{http_code}\\n\" https://minikube.me/product-composite/1?delay=3 -H \"Authorization: Bearer $ACCESS_TOKEN\" -s; done \n```", "```java\nfor ((n=0; n<4; n++)); do curl -o /dev/null -skL -w \"%{http_code}\\n\" https://minikube.me/product-composite/1?delay=0 -H \"Authorization: Bearer $ACCESS_TOKEN\" -s; done \n```", "```java\ncurl -ks https://health.minikube.me/actuator/health | jq -r .components.circuitBreakers.details.product.details.state \n```", "```java\nwhile true; do curl -o /dev/null -s -L -w \"%{http_code}\\n\" -H \"Authorization: Bearer $ACCESS_TOKEN\" -k https://minikube.me/product-composite/1?faultPercent=10; sleep 3; done \n```", "```java\n[https://grafana.minikube.me/d/YMcDoBg7k/hands-on-dashboard](https://grafana.minikube.me/d/YMcDoBg7k/hands-on-dashboard) \n```", "```java\n`ID=YMcDoBg7k` \n```", "```java\n    curl -sk https://grafana.minikube.me/api/dashboards/uid/$ID | jq '.dashboard.id=null' > \"Hands-on-Dashboard.json\" \n    ```", "```java\n    curl -i -XPOST -H 'Accept: application/json' -H 'Content-Type: application/json' -k \\\n        'https://grafana.minikube.me/api/dashboards/db' \\\n        -d @Hands-on-Dashboard.json \n    ```", "```java\n    ACCESS_TOKEN=$(curl https://writer:secret-writer@minikube.me/oauth2/token -d grant_type=client_credentials -d scope=\"product:read product:write\" -ks | jq .access_token -r)\n    echo ACCESS_TOKEN=$ACCESS_TOKEN \n    ```", "```java\n    for ((n=0; n<4; n++)); do curl -o /dev/null -skL -w \"%{http_code}\\n\" https://minikube.me/product-composite/1?delay=3 -H \"Authorization: Bearer $ACCESS_TOKEN\" -s; done \n    ```", "```java\n    for ((n=0; n<4; n++)); do curl -o /dev/null -skL -w \"%{http_code}\\n\" https://minikube.me/product-composite/1?delay=0 -H \"Authorization: Bearer $ACCESS_TOKEN\" -s; done \n    ```", "```java\ncurl https://grafana.minikube.me/api/alert-notifications/1 -ks | jq '.id=null' > mail-notification.jso \n```", "```java\ncurl -ik -XPOST -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  'https://grafana.minikube.me/api/alert-notifications' \\\n  -d @mail-notification.json \n```"]