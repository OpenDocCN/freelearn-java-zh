["```java\n// Product (abstract type)\npublic interface MessageApp {\n  void sendMessage(String message);\n}\n\n//Concrete Product\npublic class EmailMessage implements MessageApp {\n  @Override\n  public void sendMessage(String message) {\n    //Mail specific implementation\n    System.out.println(\"Sending eMail message ....\"+message);\n  }\n}\n\n//Concrete Product\npublic class SMSMessage implements MessageApp {\n  @Override\n  public void sendMessage(String message) {\n    //SMS specific implementation.\n    System.out.println(\"sending SMS message ...\"+message);\n  }\n}\n\n//Concrete Product\npublic class WhatsAppMessage implements MessageApp {\n  @Override\n  public void sendMessage(String message) {\n    //Whatsapp specific implementation\n    System.out.println(\"Sending Whatsapp message ...\"+message);\n  }\n}\n```", "```java\n//Abstract creator\npublic abstract class MessagingService {\n  //This is Factory method.\n  public abstract MessageApp createMessageApp();\n}\n\n//Concrete creator\npublic class EmailServices extends MessagingService{\n  @Override\n  public MessageApp createMessageApp() {\n    return new EmailMessage();\n  }\n}\n\n//Concrete creator\npublic class SMSServices extends MessagingService {\n  @Override\n  public MessageApp createMessageApp() {\n    return new SMSMessage();\n  }\n}\n\n//Concrete creator\npublic class WhatsAppServices extends MessagingService {\n  @Override\n  public MessageApp createMessageApp() {\n    return new WhatsAppMessage();\n  }\n}\n```", "```java\npublic class MessagingFactory {\n  public MessageApp getMessageApp(MessageType messageType) {\n    MessageApp messageApp = null;\n    // 1.Based on messageType value, create concrete implementation.\n    // 2.Call factory method on each of them to get abstract product type - MessageApp in our case\n    // 3.call common method on abstract product type to execute desire operation.\n\n    switch(messageType) {\n    case SMSType:\n      messageApp = new SMSServices().createMessageApp();\n      break;\n    case EmailType:\n      messageApp = new EmailServices().createMessageApp();\n      break;\n    case WhatsAppType:\n      messageApp = new WhatsAppServices().createMessageApp();\n      break;\n    default: System.out.println(\" Unknown message type .. Please provide valid message type \"); \n    }\n    return messageApp;\n  }\n}\n```", "```java\npublic class Client {\n  public static void main(String[] args) {\n    MessagingFactory messagingFactory = new MessagingFactory();\n    MessageApp smsApp = messagingFactory.getMessageApp(MessageType.SMSType);\n    MessageApp emailApp = messagingFactory.getMessageApp(MessageType.EmailType);\n    MessageApp whatsAppApp = messagingFactory.getMessageApp(MessageType.WhatsAppType);\n    smsApp.sendMessage(\" Hello \");\n    emailApp.sendMessage(\" this is test \");\n    whatsAppApp.sendMessage(\" Good Morning\");\n  }\n}\n```", "```java\npublic interface CompressionAlgorithm {\n  void doCompress();\n}\npublic interface EncryptionAlgorithm {\n  void doEncryption();\n}\n\npublic class RARCompression implements CompressionAlgorithm {\n  @Override\n  public void doCompress() {\n    System.out.println(\" Compressing in RAR format ... \");\n  }\n}\n\npublic class ZIPCompression implements CompressionAlgorithm {\n  @Override\n  public void doCompress() {\n    System.out.println(\" Compressing in ZIP format ... \");\n  }\n}\n\n```", "```java\npublic class ServiceLocator {\n  // Map which holds all services.\n  private Map<Class<?>,Map<String,Object>> serviceRegistry = new HashMap<Class<?>,Map<String,Object>>(); \n  private static ServiceLocator serviceLocator;\n\n  // private constructor to make this class singleton \n  private ServiceLocator() {\n\n  }\n\n  //Static method to get only existing instance. If no instance is there, create the new one.\n  public static ServiceLocator getInstance() {\n    if(serviceLocator == null) {\n      serviceLocator = new ServiceLocator();\n    }\n    return serviceLocator;\n  }\n\n  public <T> void registerService(Class<T> interfaceType, String key, Object serviceObject) {\n\n    Map<String,Object> serviceOfSameTypeMap = serviceRegistry.get(interfaceType);\n    if(serviceOfSameTypeMap !=null) {\n      serviceRegistry.get(interfaceType).put(key, serviceObject);\n    }else {\n      serviceOfSameTypeMap = new HashMap<String,Object>();\n      serviceOfSameTypeMap.put(key, serviceObject);\n      serviceRegistry.put(interfaceType, serviceOfSameTypeMap);\n    }\n  }\n\n  public <T> T getSerivce(Class<T> interfaceType, String key) {\n    Map<String,Object> serviceOfSameTypeMap = serviceRegistry.get(interfaceType);\n    if(serviceOfSameTypeMap != null) {\n      T service = (T)serviceOfSameTypeMap.get(key);\n      if(service !=null) {\n        return service;\n      }else {\n        System.out.println(\" Service with key \"+ key +\" does not exist\");\n        return null;\n      }\n    }else {\n      System.out.println(\" Service of type \"+ interfaceType.toString() + \" does not exist\");\n      return null;\n    }\n  }\n}\n```", "```java\npublic class ServiceLocatorDemo {\n\n  public static void main(String[] args) {\n\n    ServiceLocator locator = ServiceLocator.getInstance();\n    initializeAndRegisterServices(locator);\n    CompressionAlgorithm rarCompression = locator.getSerivce(CompressionAlgorithm.class, \"rar\");\n    rarCompression.doCompress();\n\n    CompressionAlgorithm zipCompression = locator.getSerivce(CompressionAlgorithm.class, \"zip\");\n    zipCompression.doCompress();\n\n    EncryptionAlgorithm rsaEncryption = locator.getSerivce(EncryptionAlgorithm.class, \"rsa\");\n    rsaEncryption.doEncryption();\n\n    EncryptionAlgorithm aesEncryption = locator.getSerivce(EncryptionAlgorithm.class, \"aes\");\n    aesEncryption.doEncryption();\n }\n\n  private static void initializeAndRegisterServices( ServiceLocator locator ) {\n\n    CompressionAlgorithm rarCompression = new RARCompression();\n    CompressionAlgorithm zipCompression = new ZIPCompression();\n    EncryptionAlgorithm rsaEncryption = new RSAEncrption();\n    EncryptionAlgorithm aesEncryption = new AESEncrption();\n\n    locator.registerService(CompressionAlgorithm.class, \"rar\", rarCompression);\n    locator.registerService(CompressionAlgorithm.class, \"zip\", zipCompression);\n    locator.registerService(EncryptionAlgorithm.class, \"rsa\", rsaEncryption);\n    locator.registerService(EncryptionAlgorithm.class, \"aes\", aesEncryption);\n  }\n}\n```", "```java\npublic abstract class ProcessData {\n  //Template method\n  public abstract void readFile(); \n  public void validate() {\n    System.out.println(\" Validating data ..\");\n  }\n  public void format() {\n    System.out.println(\" Formatting data ..\");\n  }\n  public void insertInDB() {\n    System.out.println(\" Inserting data into Database ..\");\n  }\n}\n```", "```java\npublic class ProcessExcelData extends ProcessData{\n  @Override\n  public void readFile() {\n    System.out.println(\" Reading Excel file\");\n  }\n}\n\npublic class ProcessHTMLData extends ProcessData{\n  @Override\n  public void readFile() {\n    System.out.println(\" Reading HTML file\");\n  }\n}\n\npublic class ProcessTEXTData extends ProcessData{\n  @Override\n  public void readFile() {\n    System.out.println(\" Reading Text file\");\n  }\n}\n\npublic class ProcessXMLData extends ProcessData{\n  @Override\n  public void readFile() {\n    System.out.println(\" Reading Excel file\");\n  }\n}\n```", "```java\npublic class TemplateDemo {\n\n  public static void main(String args[]) {\n\n    ProcessData processData = new ProcessExcelData();\n    processData.readFile();\n    processData.validate();\n    processData.format();\n    processData.insertInDB();\n\n    processData = new ProcessHTMLData();\n    processData.readFile();\n    processData.validate();\n    processData.format();\n    processData.insertInDB();\n  }\n}\n```", "```java\n Reading Excel file\n Validating data ..\n Formatting data ..\n Inserting data into Database ..\n Reading HTML file\n Validating data ..\n Formatting data ..\n Inserting data into Database ..\n```", "```java\n//Interface\npublic interface Cloud {\n  void upload();\n}\n\n//Concrete Algorithm\npublic class GoogleDriveCloud implements Cloud {\n  @Override\n  public void upload() {\n    System.out.println(\" Uploading on Google Drive \");\n  }\n}\n\n//Concrete Algorithm\npublic class DropboxCloud implements Cloud {\n  @Override\n  public void upload() {\n    System.out.println(\" Uploading on Dropbox \");\n  }\n}\n\n//Concrete Algorithm\npublic class OneDriveCloud implements Cloud {\n  @Override\n  public void upload() {\n    System.out.println(\" Uploading on OneDrive \");\n  }\n}\n\n//Concrete Algorithm\npublic class AmazoneS3Cloud implements Cloud {\n  @Override\n  public void upload() {\n    System.out.println(\" Uploading on Amazone S3 \");\n  }\n}\n```", "```java\npublic class CloudUpload {\n  private final Cloud cloud;\n  public CloudUpload(Cloud cloud) {\n    this.cloud = cloud;\n  }\n  public void upload() {\n    this.cloud.upload();\n  }\n}\n```", "```java\npublic class StrategyDemo {\n  public static void main(String[] args) {\n    CloudUpload googleCloud = new CloudUpload(new GoogleDriveCloud());\n    googleCloud.upload();\n    CloudUpload dropBpxCloud = new CloudUpload(new DropboxCloud());\n    dropBpxCloud.upload();\n    CloudUpload oneDriveCloud = new CloudUpload(new OneDriveCloud());\n    oneDriveCloud.upload();\n    CloudUpload amazoneS3Cloud = new CloudUpload(new AmazoneS3Cloud());\n    amazoneS3Cloud.upload();\n  }\n}\n```", "```java\npublic class Car {\n  private Tyre tyre;\n  private int maxSpeed;\n\n  public Car(Tyre tyre) {\n    this.tyre = tyre;\n    setMaxSpeed(150);\n  }\n  public int getMaxSpeed() {\n    return maxSpeed;\n  }\n  public void setMaxSpeed(int maxSpeed) {\n    this.maxSpeed = maxSpeed;\n  }\n}\n\npublic class Tyre {\n  private Car car;\n  private int minRimSize;\n\n  public Tyre(Car car) {\n    this.car = car;\n    if(this.car.getMaxSpeed()>100 && this.car.getMaxSpeed()<200) {\n      setMinRimSize(15);\n    }else if(this.car.getMaxSpeed()<100) {\n      System.out.println(\"Minimum RIM size is 14\");\n      setMinRimSize(14);\n    }\n  }\n  public int getMinRimSize() {\n    return minRimSize;\n  }\n  public void setMinRimSize(int minRimSize) {\n    this.minRimSize = minRimSize;\n  }\n}\n```", "```java\npublic class Car{\n  private Tyre tyre;\n  private int maxSpeed;\n\n  public Car() {\n  }\n  public void setTyre(Tyre tyre) {\n    this.tyre = tyre;\n  }\n  public Tyre getTyre() {\n    return tyre;\n  }\n  public int getMaxSpeed() {\n    return maxSpeed;\n  }\n  public void setMaxSpeed(int maxSpeed) {\n    this.maxSpeed = maxSpeed;\n  }\n}\n\n```", "```java\npublic class Tyre {\n\n  private Car car;\n  private int minRimSize;\n\n  public Tyre(Car car) {\n    this.car = car;\n    this.car.setTyre(this);\n\n    if(this.car.getMaxSpeed()>100 && this.car.getMaxSpeed()<200) {\n      System.out.println(\"Minimum RIM size is 15\");\n      setMinRimSize(15);\n    }else if(this.car.getMaxSpeed()<100) {\n      System.out.println(\"Minimum RIM size is 14\");\n      setMinRimSize(14);\n    }\n\n  }\n  public int getMinRimSize() {\n    return minRimSize;\n  }\n  public void setMinRimSize(int minRimSize) {\n    this.minRimSize = minRimSize;\n  }\n}\n```", "```java\npublic class CircularDependencyWithSetterDemo {\n\n  public static void main(String[] args) {\n      Car car = new Car();\n      car.setMaxSpeed(120);\n      Tyre tyre = new Tyre(car);\n\n      car.setMaxSpeed(90);\n      tyre = new Tyre(car);\n  }\n}\n```", "```java\n@Component(\"commonUtilService\")\npublic class CommonUtilService {\n  private Employee employee;\n  public CommonUtilService(Employee employee) {\n    this.employee = employee;\n  }\n}\n\n@Component(\"employee\")\npublic class Employee {\n  private HRService hrService;\n  public Employee(HRService hrService) {\n    this.hrService=hrService;\n  }\n}\n\n@Component(\"hrService\")\npublic class HRService {\n  private CommonUtilService commonUtilService;\n  public HRService(CommonUtilService commonUtilService) {\n    this.commonUtilService=commonUtilService;\n  }\n}\n```", "```java\n@Configuration\n@ComponentScan(basePackages=\"com.packt.spring.circulardependency.model.simple\")\npublic class SpringConfig {\n}\n\npublic class SpringCircularDependencyDemo {\n  public static void main(String[] args) {\n    ApplicationContext springContext = new AnnotationConfigApplicationContext(SpringConfig.class);\n    Employee employee = (Employee) springContext.getBean(\"employee\");\n    HRService hrService = (HRService) springContext.getBean(\"hrService\");\n    CommonUtilService commonUtilService = (CommonUtilService) springContext.getBean(\"commonUtilService\");\n  }\n}\n```", "```java\nUnsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'employee' defined in file \n```", "```java\n@Component(\"employee\")\npublic class Employee {\n  private HRService hrService;\n  @Autowired\n  public void setHrService(HRService hrService) {\n    this.hrService = hrService;\n    System.out.println(\" HRService dependency is set \");\n  }\n}\n\n@Component(\"hrService\")\npublic class HRService {\n  private CommonUtilService commonUtilService;\n  @Autowired\n  public void setCommonUtilService(CommonUtilService commonUtilService) {\n    this.commonUtilService = commonUtilService;\n    System.out.println(\" CommonUtilService dependency is set \");\n  }\n}\n\n@Component(\"commonUtilService\")\npublic class CommonUtilService {\n  private Employee employee;\n  @Autowired\n  public void setEmployee(Employee employee) {\n    this.employee = employee;\n    System.out.println(\" Employee dependency is set \");\n  }\n}\n```", "```java\n@Component(\"employee\")\npublic class Employee {\n  private HRService hrService;\n  public Employee(@Lazy HRService hrService) {\n    this.hrService=hrService;\n  }\n  public void displayEmployeeName() {\n    System.out.println(\" Employee name is Nilang \");\n  }\n}\n\n@Component(\"hrService\")\npublic class HRService {\n  private CommonUtilService commonUtilService;\n  public HRService(@Lazy CommonUtilService commonUtilService) {\n    this.commonUtilService=commonUtilService;\n  }\n}\n\n@Component(\"commonUtilService\")\npublic class CommonUtilService {\n  private Employee employee;\n  public CommonUtilService(@Lazy Employee employee) {\n    this.employee = employee;\n  }\n  public void showEmployeeNameFromDependency() {\n    this.employee.displayEmployeeName();\n  }\n}\n```", "```java\nApplicationContext springContext = new AnnotationConfigApplicationContext(SpringConfigForLazy.class);\n\n    Employee employee = (Employee) springContext.getBean(\"employee\");\n    HRService hrService = (HRService) springContext.getBean(\"hrService\");\n    CommonUtilService commonUtilService = (CommonUtilService) springContext.getBean(\"commonUtilService\");\n    commonUtilService.showEmployeeNameFromDependency();\n```", "```java\n Employee name is Nilang \n```", "```java\npublic class AccountService {\n  //Service method.\n  public void getVariablePay() {\n    System.out.println(\"getting variable pay..\");\n  }\n}\n\npublic class HRService {\n  public int getLeaveInGivenMonth(int monthNo) {\n    System.out.println(\" getting no of leaves for month \"+monthNo);\n    return 2; // just for demo purpose.\n  }\n}\n/* ServiceManager serves like dependency supplier */\npublic class ServiceManager {\n  private static ApplicationContext springContext = new ClassPathXmlApplicationContext(\"application-context.xml\");\n private ServiceManager() {\n  }\n  //This method will return the dependency \n  public static Object getDependentService(String serviceName) {\n    Object dependency = null;\n    if(springContext !=null) {\n      dependency = springContext.getBean(serviceName);\n    }\n    return dependency;\n  }\n}\n\npublic class EmployeeService {\n  private AccountService accountService;\n  private HRService hrService;\n  //constructor\n  public EmployeeService() {\n    if(ServiceManager.getDependentService(\"accountService\") !=null) {\n      accountService = (AccountService) ServiceManager.getDependentService(\"accountService\");\n    }\n    if(ServiceManager.getDependentService(\"hrService\") !=null) {\n      hrService = (HRService) ServiceManager.getDependentService(\"hrService\");\n    }\n  }\n  public void generateRewardPoints() {\n    if(hrService !=null && accountService !=null) {\n      int noOfLeaves = this.hrService.getLeaveInGivenMonth(8);\n      System.out.println(\"No of Leaves are : \"+noOfLeaves);\n      this.accountService.getVariablePay();\n      //Some complex logic to generate rewards points based on variable  pay and total leave \n      //taken in given month.\n    }\n  }\n}\n```", "```java\npublic class EmployeeService {\n  private AccountService accountService;\n  private HRService hrService;\n  //constructor\n  public EmployeeService(AccountService accountService,HRService hrService) {\n    this.accountService = accountService;\n    this.hrService = hrService;\n  }\n  public void generateRewardPoints() {\n    if(hrService !=null && accountService !=null) {\n      int noOfLeaves = this.hrService.getLeaveInGivenMonth(8);\n      System.out.println(\"No of Leaves are : \"+noOfLeaves);\n      this.accountService.getVariablePay();\n      //Some complex logic to generate rewards points based on variable pay and total leave \n      //taken in given month.\n    }\n  }\n}\n```"]