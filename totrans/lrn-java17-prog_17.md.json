["```java\nStream.empty().forEach(System.out::println);   //prints nothing\n```", "```java\nnew ArrayList().forEach(System.out::println);  //prints nothing\n```", "```java\nnew ArrayList().stream().forEach(System.out::println);  \n```", "```java\n                                               //prints nothing\n```", "```java\nStream.of().forEach(System.out::print);       //prints nothing\n```", "```java\nStream.of(1).forEach(System.out::print);           //prints: 1\n```", "```java\nStream.of(1,2).forEach(System.out::print);         //prints: 12\n```", "```java\nStream.of(\"1 \",\"2\").forEach(System.out::print);   //prints: 1 2\n```", "```java\nString[] strings = {\"1 \", \"2\"};\n```", "```java\nStream.of(strings).forEach(System.out::print);    //prints: 1 2\n```", "```java\nStream.of(\"1 \", 2).forEach(System.out::print);    //prints: 1 2\n```", "```java\n//Stream<String> stringStream = Stream.of(\"1 \", 2);   \n```", "```java\n                                                //compile error\n```", "```java\nStream<Integer> stream1 = Stream.of(1, 2);\n```", "```java\nStream<Integer> stream2 = Stream.of(2, 3);\n```", "```java\nStream<Integer> stream3 = Stream.of(3, 4);\n```", "```java\nStream<Integer> stream4 = Stream.of(4, 5);\n```", "```java\nStream.of(stream1, stream2, stream3, stream4)\n```", "```java\n   .forEach(System.out::print);\n```", "```java\n     //prints: java.util.stream.ReferencePipeline$Head@58ceff1j\n```", "```java\nStream.of(stream1, stream2, stream3, stream4)\n```", "```java\n .flatMap(e -> e).forEach(System.out::print);   \n```", "```java\n                                             //prints: 12233445\n```", "```java\nvoid printList1(List<String> list){\n```", "```java\n    list.stream().forEach(System.out::print);\n```", "```java\n}\n```", "```java\n//printList1(null);                      //NullPointerException\n```", "```java\nList<String> list = List.of(\"1 \", \"2\");\n```", "```java\nprintList1(list);                          //prints: 1 2\n```", "```java\nvoid printList1(List<String> list){ \n```", "```java\n     (list == null ? Stream.empty() : list.stream()) \n```", "```java\n                           .forEach(System.out::print);\n```", "```java\n} \n```", "```java\nvoid printList2(List<String> list){\n```", "```java\n    Stream.ofNullable(list).flatMap(l -> l.stream())\n```", "```java\n                           .forEach(System.out::print);\n```", "```java\n}\n```", "```java\nvoid printList4(List<String> list){\n```", "```java\n    Stream.ofNullable(list).flatMap(Collection::stream)\n```", "```java\n                           .forEach(System.out::print);\n```", "```java\n}\n```", "```java\nStream.iterate(1, i -> ++i).limit(9)\n```", "```java\n      .forEach(System.out::print);   //prints: 123456789\n```", "```java\nStream.iterate(1, i -> i < 10, i -> ++i)\n```", "```java\n      .forEach(System.out::print);   //prints: 123456789\n```", "```java\nStream<Integer> stream1 = List.of(1, 2).stream();\n```", "```java\nStream<Integer> stream2 = List.of(2, 3).stream();\n```", "```java\nStream.concat(stream1, stream2)\n```", "```java\n .forEach(System.out::print); //prints: 1223\n```", "```java\nStream.generate(() -> 1).limit(5)\n```", "```java\n .forEach(System.out::print);    //prints: 11111\n```", "```java\nStream.generate(() -> new Random().nextDouble()).limit(5)\n```", "```java\n   .forEach(System.out::println);  //prints: 0.38575117472619247\n```", "```java\n                                   //        0.5055765386778835\n```", "```java\n                                   //        0.6528038976983277\n```", "```java\n                                   //        0.4422354489467244\n```", "```java\n                                   //        0.06770955839148762\n```", "```java\nStream.<String>builder().add(\"cat\").add(\" dog\").add(\" bear\")\n```", "```java\n   .build().forEach(System.out::print);  //prints: cat dog bear\n```", "```java\nStream.Builder<String> builder = Stream.builder();\n```", "```java\nList.of(\"1\", \"2\", \"3\").stream().forEach(builder);   \n```", "```java\nbuilder.build().forEach(System.out::print);    //prints: 123\n```", "```java\nList<String> values = List.of(\"cat\", \" dog\", \" bear\");\n```", "```java\nStream.Builder<String> builder = Stream.builder();\n```", "```java\nfor(String s: values){\n```", "```java\n    if(s.contains(\"a\")){\n```", "```java\n        builder.accept(s);\n```", "```java\n    }\n```", "```java\n}\n```", "```java\nbuilder.build().forEach(System.out::print);  //prints: cat bear\n```", "```java\nList.of(\"1\", \"2\", \"3\").stream().forEach(builder);\n```", "```java\nList.of(\"1\", \"2\", \"3\").parallelStream().forEach(builder);\n```", "```java\nint[] arr = {1, 2, 3, 4, 5}; \n```", "```java\nArrays.stream(arr, 2, 4).forEach(System.out::print); \n```", "```java\n                                                   //prints: 34 \n```", "```java\nnew Random().ints(5, 8).limit(5) \n```", "```java\n            .forEach(System.out::print);    //prints: 56757 \n```", "```java\nStream.of(\"3\", \"2\", \"3\", \"4\", \"2\").distinct()\n```", "```java\n                  .forEach(System.out::print);    //prints: 324\n```", "```java\nList<String> list = List.of(\"1\", \"2\", \"3\", \"4\", \"5\");\n```", "```java\nlist.stream().skip(3).forEach(System.out::print);  //prints: 45\n```", "```java\nlist.stream().limit(3).forEach(System.out::print); \n```", "```java\n                                                  //prints: 123\n```", "```java\nlist.stream().filter(s -> Objects.equals(s, \"2\"))\n```", "```java\n             .forEach(System.out::print);          //prints: 2\n```", "```java\nlist.stream().dropWhile(s -> Integer.valueOf(s) < 3)\n```", "```java\n             .forEach(System.out::print);         //prints: 345\n```", "```java\nlist.stream().takeWhile(s -> Integer.valueOf(s) < 3)\n```", "```java\n             .forEach(System.out::print);          //prints: 12\n```", "```java\nList<String> list = List.of(\"1\", \"2\", \"3\", \"4\", \"5\");\n```", "```java\nlist.stream().map(s -> s + s)\n```", "```java\n             .forEach(System.out::print);  //prints: 1122334455\n```", "```java\nlist.stream().mapToInt(Integer::valueOf)\n```", "```java\n             .forEach(System.out::print);  //prints: 12345\n```", "```java\nlist.stream().mapToLong(Long::valueOf)\n```", "```java\n             .forEach(System.out::print);  //prints: 12345\n```", "```java\nlist.stream().mapToDouble(Double::valueOf)\n```", "```java\n       .mapToObj(Double::toString)\n```", "```java\n       .map(s -> s + \" \")\n```", "```java\n       .forEach(System.out::print); \n```", "```java\n                                  //prints: 1.0 2.0 3.0 4.0 5.0\n```", "```java\nlist.stream().mapToInt(Integer::valueOf)\n```", "```java\n    .flatMap(n -> IntStream.iterate(1, I -> i < n, i -> ++i))\n```", "```java\n    .forEach(System.out::print);         //prints: 1121231234\n```", "```java\nlist.stream().map(Integer::valueOf)\n```", "```java\n    .flatMapToInt(n -> IntStream.iterate(1, i->i<n, i -> ++i))\n```", "```java\n    .forEach(System.out::print);        //prints: 1121231234\n```", "```java\nlist.stream().map(Integer::valueOf)\n```", "```java\n    .flatMapToLong(n -> LongStream.iterate(1, i->i<n,i -> ++i))\n```", "```java\n    .forEach(System.out::print);        //prints: 1121231234\n```", "```java\nlist.stream().map(Integer::valueOf)\n```", "```java\n .flatMapToDouble(n -> DoubleStream.iterate(1,i->i<n,i -> ++i))\n```", "```java\n    .mapToObj(Double::toString)\n```", "```java\n    .map(s -> s +\"\"\"\")\n```", "```java\n    .forEach(System.out::print);\n```", "```java\n              //prints: 1.0 1.0 2.0 1.0 2.0 3.0 1.0 2.0 3.0 4.0\n```", "```java\nList<String> list = List.of(\"2\", \"1\", \"5\", \"4\", \"3\");\n```", "```java\nlist.stream().sorted().forEach(System.out::print); \n```", "```java\n                                                //prints: 12345\n```", "```java\nlist.stream().sorted(Comparator.reverseOrder())\n```", "```java\n             .forEach(System.out::print);       //prints: 54321\n```", "```java\nList<String> list = List.of(\"1\", \"2\", \"3\", \"4\", \"5\");\n```", "```java\nlist.stream()\n```", "```java\n .peek(s -> System.out.print(\"3\".equals(s) ? 3 : 0))\n```", "```java\n .forEach(System.out::print); //prints: 0102330405\n```", "```java\nList<String> list = Stream.of(\"1\", \"2\", \"3\", \"4\", \"5\")\n```", "```java\n                          .collect(ArrayList::new,\n```", "```java\n                                   ArrayList::add,\n```", "```java\n                                   ArrayList::addAll);\n```", "```java\nSystem.out.println(list);  //prints: [1, 2, 3, 4, 5]\n```", "```java\npublic class Person {\n```", "```java\n    private int age;\n```", "```java\n    private String name;\n```", "```java\n    public Person(int age, String name) {\n```", "```java\n        this.age = age;\n```", "```java\n        this.name = name;\n```", "```java\n    }\n```", "```java\n    public int getAge() {return this.age; }\n```", "```java\n    public String getName() { return this.name; }\n```", "```java\n    @Override\n```", "```java\n    public String toString() {\n```", "```java\n        return \"Person{\" + \"name='\" + this.name + \"'\" +\n```", "```java\n                                       \", age=\" + age + \"}\";\n```", "```java\n    }\n```", "```java\n}\n```", "```java\n23 , Ji m\n```", "```java\n    2 5 , Bob\n```", "```java\n  15 , Jill\n```", "```java\n17 , Bi ll\n```", "```java\nPath path = Paths.get(\"src/main/resources/persons.csv\");\n```", "```java\ntry (Stream<String> lines = Files.newBufferedReader(path).lines()) {\n```", "```java\n    lines.filter(s -> s.contains(\"J\"))\n```", "```java\n         .forEach(System.out::println);  \n```", "```java\n                                  //prints: 23 , Ji m 15 , Jill\n```", "```java\n} catch (IOException ex) {\n```", "```java\n    ex.printStackTrace();\n```", "```java\n}\n```", "```java\nList<Person> persons = new ArrayList<>();\n```", "```java\nlines.filter(s -> s.contains(\"J\")).forEach(s -> {\n```", "```java\n    String[] arr = s.split(\",\");\n```", "```java\n    int age = Integer.valueOf(StringUtils.remove(arr[0], ' '));\n```", "```java\n    persons.add(new Person(age, StringUtils.remove(arr[1], \n```", "```java\n                                                        ' ')));\n```", "```java\n});\n```", "```java\nList<Person> persons = lines.filter(s -> s.contains(\"J\"))\n```", "```java\n   .map(s -> s.split(\",\"))\n```", "```java\n   .map(arr -> {\n```", "```java\n       int age = Integer.valueOf(StringUtils.remove(arr[0], \n```", "```java\n                                                         ' '));\n```", "```java\n       return new Person(age, StringUtils.remove(arr[1], ' '));\n```", "```java\n   }).collect(Collectors.toList());\n```", "```java\nprivate Person createPerson(String[] arr){\n```", "```java\n    int age = Integer.valueOf(StringUtils.remove(arr[0], ' '));\n```", "```java\n    return new Person(age, StringUtils.remove(arr[1], ' '));\n```", "```java\n}\n```", "```java\nList<Person> persons = lines.filter(s -> s.contains(\"J\"))\n```", "```java\n                            .map(s -> s.split(\",\"))\n```", "```java\n                            .map(this::createPerson)\n```", "```java\n                            .collect(Collectors.toList());\n```", "```java\nlong count = Stream.of(\"1\", \"2\", \"3\", \"4\", \"5\")\n```", "```java\n                   .peek(System.out::print)\n```", "```java\n                   .count();\n```", "```java\nSystem.out.print(count);          //prints: 5               \n```", "```java\nlong count = Stream.of(\"1\", \"2\", \"3\", \"4\", \"5\")\n```", "```java\n                   .peek(System.out::print)     //prints: 12345\n```", "```java\n                   .collect(Collectors.counting());\n```", "```java\nSystem.out.println(count);                         //prints: 5 \n```", "```java\nList<String> list = List.of(\"1\", \"2\", \"3\", \"4\", \"5\");\n```", "```java\nboolean found = list.stream()\n```", "```java\n                    .peek(System.out::print)      //prints: 123\n```", "```java\n                    .anyMatch(e -> \"3\".equals(e));\n```", "```java\nSystem.out.println(found);                       //prints: true\n```", "```java\nboolean noneMatches = list.stream()\n```", "```java\n                         .peek(System.out::print) //prints: 123\n```", "```java\n                         .noneMatch(e -> \"3\".equals(e));\n```", "```java\nSystem.out.println(noneMatches);                //prints: false\n```", "```java\nboolean allMatch = list.stream()\n```", "```java\n                       .peek(System.out::print)    //prints: 1\n```", "```java\n                       .allMatch(e -> \"3\".equals(e));\n```", "```java\nSystem.out.println(allMatch);                   //prints: false\n```", "```java\nList<String> list = List.of(\"1\", \"2\", \"3\", \"4\", \"5\");\n```", "```java\nOptional<String> result = list.stream().findAny();\n```", "```java\nSystem.out.println(result.isPresent());    //prints: true\n```", "```java\nSystem.out.println(result.get());          //prints: 1\n```", "```java\nresult = list.stream()\n```", "```java\n             .filter(e -> \"42\".equals(e))\n```", "```java\n             .findAny();\n```", "```java\nSystem.out.println(result.isPresent());   //prints: false\n```", "```java\n//System.out.println(result.get());    //NoSuchElementException\n```", "```java\nresult = list.stream().findFirst();\n```", "```java\nSystem.out.println(result.isPresent());   //prints: true\n```", "```java\nSystem.out.println(result.get());         //prints: 1\n```", "```java\nList<String> list = List.of(\"1\", \"2\", \"3\", \"4\", \"5\");\n```", "```java\nString result = list.stream()\n```", "```java\n                    .filter(e -> \"42\".equals(e))\n```", "```java\n                    .findAny()\n```", "```java\n                    .or(() -> Optional.of(\"Not found\"))\n```", "```java\n                    .get();\n```", "```java\nSystem.out.println(result);              //prints: Not found\n```", "```java\nresult = list.stream()\n```", "```java\n             .filter(e -> \"42\".equals(e))\n```", "```java\n             .findAny()\n```", "```java\n             .orElse(\"Not found\");\n```", "```java\nSystem.out.println(result);              //prints: Not found\n```", "```java\nSupplier<String> trySomethingElse = () -> {\n```", "```java\n    //Code that tries something else\n```", "```java\n    return \"43\";\n```", "```java\n};\n```", "```java\nresult = list.stream()\n```", "```java\n             .filter(e -> \"42\".equals(e))\n```", "```java\n             .findAny()\n```", "```java\n             .orElseGet(trySomethingElse);\n```", "```java\nSystem.out.println(result);              //prints: 43\n```", "```java\nlist.stream()\n```", "```java\n    .filter(e -> \"42\".equals(e))\n```", "```java\n    .findAny()\n```", "```java\n    .ifPresentOrElse(System.out::println,\n```", "```java\n       () -> System.out.println(\"Not found\")); \n```", "```java\n                                            //prints: Not found\n```", "```java\nList<String> list = List.of(\"a\", \"b\", \"c\", \"c\", \"a\");\n```", "```java\nString min = list.stream()\n```", "```java\n                 .min(Comparator.naturalOrder())\n```", "```java\n                 .orElse(\"0\");\n```", "```java\nSystem.out.println(min);     //prints: a\n```", "```java\nString max = list.stream()\n```", "```java\n .max(Comparator.naturalOrder())\n```", "```java\n                 .orElse(\"0\");\n```", "```java\nSystem.out.println(max);     //prints: c\n```", "```java\nint mn = Stream.of(42, 77, 33)\n```", "```java\n               .min(Comparator.naturalOrder())\n```", "```java\n               .orElse(0);\n```", "```java\nSystem.out.println(mn);    //prints: 33\n```", "```java\nint mx = Stream.of(42, 77, 33)\n```", "```java\n               .max(Comparator.naturalOrder())\n```", "```java\n               .orElse(0);\n```", "```java\nSystem.out.println(mx);    //prints: 77\n```", "```java\nList<Person> persons = List.of(new Person(23, \"Bob\"),\n```", "```java\n new Person(33, \"Jim\"),\n```", "```java\n new Person(28, \"Jill\"),\n```", "```java\n new Person(27, \"Bill\"));\n```", "```java\nComparator<Person> perComp = (p1, p2) -> p1.getAge() - p2.getAge();\n```", "```java\nPerson theOldest = persons.stream()\n```", "```java\n                          .max(perComp)\n```", "```java\n                          .orElse(null);\n```", "```java\nSystem.out.println(theOldest);\n```", "```java\n                          //prints: Person{name='Jim', age=33}\n```", "```java\nList<String> list = List.of(\"a\", \"b\", \"c\");\n```", "```java\nObject[] obj = list.stream().toArray();\n```", "```java\nArrays.stream(obj).forEach(System.out::print);    //prints: abc\n```", "```java\nString[] str = list.stream().toArray(String[]::new);\n```", "```java\nArrays.stream(str).forEach(System.out::print);    //prints: abc\n```", "```java\nString[] str = list.stream().toArray(i -> new String[i]);\n```", "```java\nString[] str = list.stream()\n```", "```java\n                   .toArray(i -> {\n```", "```java\n                          System.out.println(i);    //prints: 3\n```", "```java\n                          return  new String[i];\n```", "```java\n                   });\n```", "```java\nIntFunction<String[]> intFunction = new IntFunction<String[]>() { \n```", "```java\n         @Override \n```", "```java\n         public String[] apply(int i) { \n```", "```java\n              return new String[i]; \n```", "```java\n         } \n```", "```java\n}; \n```", "```java\nList<String> list = List.of(\"a\", \"b\", \"c\");\n```", "```java\nString[] str = list.toArray(new String[lits.size()]);\n```", "```java\nArrays.stream(str).forEach(System.out::print);    //prints: abc\n```", "```java\nList<Person> persons = List.of(new Person(23, \"Bob\"),\n```", "```java\n                               new Person(33, \"Jim\"),\n```", "```java\n                               new Person(28, \"Jill\"),\n```", "```java\n                               new Person(27, \"Bill\"));\n```", "```java\nPerson theOldest = list.stream()\n```", "```java\n       .reduce((p1, p2) -> p1.getAge() > p2.getAge() ? p1 : p2)\n```", "```java\n          .orElse(null);\n```", "```java\nSystem.out.println(theOldest); \n```", "```java\n                           //prints: Person{name='Jim', age=33}\n```", "```java\nString allNames = list.stream()\n```", "```java\n                      .map(p -> p.getName())\n```", "```java\n                      .reduce((n1, n2) -> n1 + \", \" + n2)\n```", "```java\n                      .orElse(null);\n```", "```java\nSystem.out.println(allNames);    //prints: Bob, Jim, Jill, Bill\n```", "```java\nString all = list.stream()\n```", "```java\n            .map(p -> p.getName())\n```", "```java\n            .reduce(\"All names: \", (n1, n2) -> n1 + \", \" + n2);\n```", "```java\nSystem.out.println(all);\n```", "```java\n                    //prints: All names: , Bob, Jim, Jill, Bill\n```", "```java\nString all = \"All names: \" + list.stream()\n```", "```java\n                            .map(p -> p.getName())\n```", "```java\n                            .reduce((n1, n2) -> n1 + \", \" + n2)\n```", "```java\n                            .orElse(null);\n```", "```java\nSystem.out.println(all); \n```", "```java\n                      //prints: All names: Bob, Jim, Jill, Bill\n```", "```java\nString all = list.stream()\n```", "```java\n             .map(p -> p.getName())\n```", "```java\n             .reduce(\"All names:\", (n1, n2) -> n1 + \" \" + n2);\n```", "```java\nSystem.out.println(all);    \n```", "```java\n                         //prints: All names: Bob Jim Jill Bill\n```", "```java\nString all = list.stream()\n```", "```java\n               .map(p -> p.getName())\n```", "```java\n               .reduce(\"All names:\", (n1, n2) -> n1 + \" \" + n2,\n```", "```java\n                                   (n1, n2) -> n1 + \" \" + n2 );\n```", "```java\nSystem.out.println(all);   \n```", "```java\n                         //prints: All names: Bob Jim Jill Bill\n```", "```java\nString all = list.parallelStream()\n```", "```java\n                .map(p -> p.getName())\n```", "```java\n                .reduce(\"All names:\", (n1, n2) -> n1 + \" \" + \n```", "```java\nn2, (n1, n2) -> n1 + \" \" + n2 );\n```", "```java\nSystem.out.println(all); \n```", "```java\n                        //prints: All names: Bob All names: Jim \n```", "```java\n                              //All names: Jill All names: Bill\n```", "```java\nString all = list.parallelStream()\n```", "```java\n              .map(p -> p.getName())\n```", "```java\n              .reduce(\"All names:\", (n1, n2) -> n1 + \" \" + n2);\n```", "```java\nSystem.out.println(all); \n```", "```java\n                        //prints: All names: Bob All names: Jim\n```", "```java\n                              //All names: Jill All names: Bill\n```", "```java\nString all = list.parallelStream().map(p->p.getName())\n```", "```java\n               .reduce(\"All names:\", (n1, n2) -> n1 + \" \" + n2,\n```", "```java\n (n1, n2) -> n1 + \" \" + StringUtils.remove(n2, \"All names: \"));\n```", "```java\nSystem.out.println(all); //prints: All names: Bob Jim Jill Bill \n```", "```java\nList<Integer> ints = List.of(1, 2, 3);\n```", "```java\nint sum = ints.stream()\n```", "```java\n              .reduce((i1, i2) -> i1 + i2)\n```", "```java\n              .orElse(0);\n```", "```java\nSystem.out.println(sum);                          //prints: 6\n```", "```java\nsum = ints.stream()\n```", "```java\n          .reduce(Integer::sum)\n```", "```java\n          .orElse(0);\n```", "```java\nSystem.out.println(sum);                          //prints: 6\n```", "```java\nsum = ints.stream()\n```", "```java\n          .reduce(10, Integer::sum);\n```", "```java\nSystem.out.println(sum);                         //prints: 16\n```", "```java\nsum = ints.stream()\n```", "```java\n          .reduce(10, Integer::sum, Integer::sum);\n```", "```java\nSystem.out.println(sum);                         //prints: 16\n```", "```java\nList<Integer> ints = List.of(1, 2, 3);\n```", "```java\nint sum = ints.parallelStream()\n```", "```java\n              .reduce(10, Integer::sum, Integer::sum);\n```", "```java\nSystem.out.println(sum);                        //prints: 36\n```", "```java\nList<Integer> ints = List.of(1, 2, 3);\n```", "```java\nint sum = ints.parallelStream()\n```", "```java\n              .reduce(0, Integer::sum, Integer::sum);\n```", "```java\nSystem.out.println(sum);                            //prints: 6\n```", "```java\nsum = 10 + ints.parallelStream()\n```", "```java\n               .reduce(0, Integer::sum, Integer::sum);\n```", "```java\nSystem.out.println(sum);                           //prints: 16\n```", "```java\npublic Person(){}\n```", "```java\npublic void setAge(int age) { this.age = age;}\n```", "```java\npublic void setName(String name) { this.name = name; }\n```", "```java\nList<Person> list = List.of(new Person(23, \"Bob\"),\n```", "```java\n                            new Person(33, \"Jim\"),\n```", "```java\n                            new Person(28, \"Jill\"),\n```", "```java\n                            new Person(27, \"Bill\"));\n```", "```java\nBiConsumer<Person, Person> accumulator = (p1, p2) -> {\n```", "```java\n    if(p1.getAge() < p2.getAge()){\n```", "```java\n        p1.setAge(p2.getAge());\n```", "```java\n        p1.setName(p2.getName());\n```", "```java\n    }\n```", "```java\n};\n```", "```java\nBiConsumer<Person, Person> combiner = (p1, p2) -> {\n```", "```java\n    System.out.println(\"Combiner is called!\");\n```", "```java\n    if(p1.getAge() < p2.getAge()){\n```", "```java\n        p1.setAge(p2.getAge());\n```", "```java\n        p1.setName(p2.getName());\n```", "```java\n    }\n```", "```java\n};\n```", "```java\nPerson theOldest = list.stream()\n```", "```java\n                  .collect(Person::new, accumulator, combiner);\n```", "```java\nSystem.out.println(theOldest);\n```", "```java\n                           //prints: Person{name='Jim', age=33}\n```", "```java\nstatic Collector<T,R,R> of(Supplier<R> supplier, \n```", "```java\n                    BiConsumer<R,T> accumulator, \n```", "```java\n                    BinaryOperator<R> combiner, \n```", "```java\n                  Collector.Characteristics... characteristics)\n```", "```java\nstatic Collector<T,A,R> of(Supplier<A> supplier, \n```", "```java\n                    BiConsumer<A,T> accumulator, \n```", "```java\n                    BinaryOperator<A> combiner, \n```", "```java\n                    Function<A,R> finisher, \n```", "```java\n                 Collector.Characteristics... characteristics).\n```", "```java\nList<String> ls = Stream.of(\"a\", \"b\", \"c\")\n```", "```java\n                        .collect(Collectors.toList());\n```", "```java\nSystem.out.println(ls);                //prints: [a, b, c]\n```", "```java\nSet<String> set = Stream.of(\"a\", \"a\", \"c\")\n```", "```java\n                        .collect(Collectors.toSet());\n```", "```java\nSystem.out.println(set);                //prints: [a, c]\n```", "```java\nList<Person> list = List.of(new Person(23, \"Bob\"),\n```", "```java\n                            new Person(33, \"Jim\"),\n```", "```java\n                            new Person(28, \"Jill\"),\n```", "```java\n                            new Person(27, \"Bill\"));\n```", "```java\nMap<String, Person> map = list.stream()\n```", "```java\n                              .collect(Collectors\n```", "```java\n                              .toMap(p -> p.getName() + \"-\" + \n```", "```java\n                                          p.getAge(), p -> p));\n```", "```java\nSystem.out.println(map);\n```", "```java\n               //prints: {Bob-23=Person{name='Bob', age:23},\n```", "```java\n               //         Bill-27=Person{name='Bill', age:27},\n```", "```java\n               //         Jill-28=Person{name='Jill', age:28},\n```", "```java\n               //         Jim-33=Person{name='Jim', age:33}}\n```", "```java\nSet<Person> personSet = list.stream()\n```", "```java\n                            .collect(Collectors\n```", "```java\n                            .toCollection(HashSet::new));\n```", "```java\nSystem.out.println(personSet);  \n```", "```java\n               //prints: [Person{name='Bill', age=27},\n```", "```java\n               //         Person{name='Jim', age=33},\n```", "```java\n               //         Person{name='Bob', age=23},\n```", "```java\n               //         Person{name='Jill', age=28}]\n```", "```java\nList<String> list1 = List.of(\"a\", \"b\", \"c\", \"d\");\n```", "```java\nString result = list1.stream()\n```", "```java\n                     .collect(Collectors.joining());\n```", "```java\nSystem.out.println(result);                    //prints: abcd\n```", "```java\nresult = list1.stream()\n```", "```java\n              .collect(Collectors.joining(\", \"));\n```", "```java\nSystem.out.println(result);                //prints: a, b, c, d\n```", "```java\nresult = list1.stream()\n```", "```java\n        .collect(Collectors.joining(\", \", \"The result: \", \"\"));\n```", "```java\nSystem.out.println(result);    //prints: The result: a, b, c, d\n```", "```java\nresult = list1.stream()\n```", "```java\n  .collect(Collectors.joining(\", \", \"The result: \", \n```", "```java\n                                                \". The End.\"));\n```", "```java\nSystem.out.println(result);\n```", "```java\n                     //prints: The result: a, b, c, d. The End.\n```", "```java\nList<Person> list2 = List.of(new Person(23, \"Bob\"),\n```", "```java\n                             new Person(33, \"Jim\"),\n```", "```java\n                             new Person(28, \"Jill\"),\n```", "```java\n                             new Person(27, \"Bill\"));\n```", "```java\nint sum = list2.stream()\n```", "```java\n               .collect(Collectors.summingInt(Person::getAge));\n```", "```java\nSystem.out.println(sum);                 //prints: 111\n```", "```java\nIntSummaryStatistics stats = list2.stream()\n```", "```java\n           .collect(Collectors.summarizingInt(Person::getAge));\n```", "```java\nSystem.out.println(stats); //prints: IntSummaryStatistics{\n```", "```java\n         //count=4, sum=111, min=23, average=27.750000, max=33}\n```", "```java\nSystem.out.println(stats.getCount());    //prints: 4\n```", "```java\nSystem.out.println(stats.getSum());      //prints: 111\n```", "```java\nSystem.out.println(stats.getMin());      //prints: 23\n```", "```java\nSystem.out.println(stats.getAverage());  //prints: 27.750000\n```", "```java\nSystem.out.println(stats.getMax());      //prints: 33\n```", "```java\nMap<Boolean, List<Person>> map2 = list2.stream()\n```", "```java\n     .collect(Collectors.partitioningBy(p -> p.getAge() > 27));\n```", "```java\nSystem.out.println(map2); //prints: {false=[Person{name='Bob',\n```", "```java\n//age=23}, Person{name='Bill', age=27}, true=[Person{name='Jim',\n```", "```java\n//age=33}, Person{name='Jill', age=28}]}\n```", "```java\nList<Person> list3 = List.of(new Person(23, \"Bob\"),\n```", "```java\n                             new Person(33, \"Jim\"),\n```", "```java\n                             new Person(23, \"Jill\"),\n```", "```java\n                             new Person(33, \"Bill\"));\n```", "```java\nMap<Integer, List<Person>> map3 = list3.stream()\n```", "```java\n               .collect(Collectors.groupingBy(Person::getAge));\n```", "```java\nSystem.out.println(map3);  \n```", "```java\n//prints: {33=[Person{name='Jim', age=33}, Person{name='Bill', //age=33}], 23=[Person{name='Bob', age=23}, Person{name='Jill', //age=23}]} \n```", "```java\nIntStream.range(1, 3).forEach(System.out::print);  //prints: 12\n```", "```java\nLongStream.range(1, 3).forEach(System.out::print); //prints: 12\n```", "```java\nIntStream.rangeClosed(1, 3).forEach(System.out::print); \n```", "```java\n                                                  //prints: 123\n```", "```java\nLongStream.rangeClosed(1, 3).forEach(System.out::print);  \n```", "```java\n                                                  //prints: 123\n```", "```java\n    //IntStream.range(1, 3).map(Integer::shortValue) \n```", "```java\n                                                   //comp error \n```", "```java\n    //               .forEach(System.out::print);   \n```", "```java\n    IntStream.range(1, 3)\n```", "```java\n             .boxed()\n```", "```java\n             .map(Integer::shortValue)\n```", "```java\n             .forEach(System.out::print);          //prints: 12\n```", "```java\n    //LongStream.range(1, 3).map(Long::shortValue) \n```", "```java\n                                                //compile error \n```", "```java\n    //                .forEach(System.out::print); \n```", "```java\n    LongStream.range(1, 3)\n```", "```java\n              .boxed()\n```", "```java\n              .map(Long::shortValue)\n```", "```java\n              .forEach(System.out::print);         //prints: 12\n```", "```java\n    //DoubleStream.of(1).map(Double::shortValue) \n```", "```java\n                                                //compile error\n```", "```java\n    //              .forEach(System.out::print);\n```", "```java\n    DoubleStream.of(1)\n```", "```java\n                .boxed()\n```", "```java\n                .map(Double::shortValue)\n```", "```java\n                .forEach(System.out::print);        //prints: 1\n```", "```java\nIntStream.range(1, 3)\n```", "```java\n         .mapToObj(Integer::valueOf)\n```", "```java\n         .map(Integer::shortValue)\n```", "```java\n         .forEach(System.out::print);           //prints: 12\n```", "```java\nIntStream.range(42, 43)\n```", "```java\n .mapToObj(i -> new Person(i, \"John\"))\n```", "```java\n .forEach(System.out::print); \n```", "```java\n                          //prints: Person{name='John', age=42}\n```", "```java\nLongStream.range(1, 3)\n```", "```java\n          .mapToObj(Long::valueOf)\n```", "```java\n          .map(Long::shortValue)\n```", "```java\n          .forEach(System.out::print);          //prints: 12\n```", "```java\nDoubleStream.of(1)\n```", "```java\n            .mapToObj(Double::valueOf)\n```", "```java\n            .map(Double::shortValue)\n```", "```java\n            .forEach(System.out::print);        //prints: 1\n```", "```java\nList<String> list = List.of(\"one\", \"two\", \"three\");\n```", "```java\nlist.stream()\n```", "```java\n    .mapToInt(String::length)\n```", "```java\n    .forEach(System.out::print);               //prints: 335\n```", "```java\nlist.stream()\n```", "```java\n    .mapToLong(String::length)\n```", "```java\n    .forEach(System.out::print);               //prints: 335\n```", "```java\nlist.stream()\n```", "```java\n  .mapToDouble(String::length)\n```", "```java\n  .forEach(d -> System.out.print(d + \" \")); \n```", "```java\n                                          //prints: 3.0 3.0 5.0\n```", "```java\nlist.stream()\n```", "```java\n    .map(String::length)\n```", "```java\n    .map(Integer::shortValue)\n```", "```java\n    .forEach(System.out::print);             //prints: 335\n```", "```java\n//list.stream().mapToInt(String::length)\n```", "```java\n//             .map(Integer::shortValue) //compile error\n```", "```java\n//             .forEach(System.out::print);\n```", "```java\nlist.stream().map(String::length)\n```", "```java\n        .map(Integer::shortValue)\n```", "```java\n        .forEach(System.out::print);      //prints: 335\n```", "```java\nList<Integer> list = List.of(1, 2, 3);\n```", "```java\nlist.stream()\n```", "```java\n    .flatMapToInt(i -> IntStream.rangeClosed(1, i))\n```", "```java\n    .forEach(System.out::print);               //prints: 112123\n```", "```java\nlist.stream()\n```", "```java\n    .flatMapToLong(i -> LongStream.rangeClosed(1, i))\n```", "```java\n    .forEach(System.out::print);               //prints: 112123\n```", "```java\nlist.stream()\n```", "```java\n    .flatMapToDouble(DoubleStream::of)\n```", "```java\n    .forEach(d -> System.out.print(d + \" \"));  \n```", "```java\n                                          //prints: 1.0 2.0 3.0\n```", "```java\nList.of(\"one\", \"two\", \"three\")\n```", "```java\n    .stream()\n```", "```java\n    .flatMapToInt(s -> IntStream.rangeClosed(1, s.length()))\n```", "```java\n    .forEach(System.out::print);          //prints: 12312312345\n```", "```java\nint sum = IntStream.empty().sum();\n```", "```java\nSystem.out.println(sum);    //prints: 0\n```", "```java\nsum = IntStream.range(1, 3).sum();\n```", "```java\nSystem.out.println(sum);    //prints: 3\n```", "```java\ndouble av = IntStream.empty().average().orElse(0);\n```", "```java\nSystem.out.println(av);     //prints: 0.0\n```", "```java\nav = IntStream.range(1, 3).average().orElse(0);\n```", "```java\nSystem.out.println(av);     //prints: 1.5\n```", "```java\nlong suml = LongStream.range(1, 3).sum();\n```", "```java\nSystem.out.println(suml);   //prints: 3\n```", "```java\ndouble avl = LongStream.range(1, 3).average().orElse(0);\n```", "```java\nSystem.out.println(avl);    //prints: 1.5\n```", "```java\ndouble sumd = DoubleStream.of(1, 2).sum();\n```", "```java\nSystem.out.println(sumd);   //prints: 3.0\n```", "```java\ndouble avd = DoubleStream.of(1, 2).average().orElse(0);\n```", "```java\nSystem.out.println(avd);    //prints: 1.5\n```", "```java\nList<Person> getInputPersonList(File file) throws IOException {\n```", "```java\n  return Files.lines(file.toPath())\n```", "```java\n              .skip(1)\n```", "```java\n              .parallel()\n```", "```java\n              .map(Main::validLine)\n```", "```java\n              .map(l -> {\n```", "```java\n                    Person person = \n```", "```java\n                       new Person(Integer.parseInt(l.get(2)), \n```", "```java\n                                          l.get(0), l.get(1));\n```", "```java\n                    person.setAddress(l.get(3), l.get(4), \n```", "```java\n                        l.get(5), Integer.parseInt(l.get(6)));\n```", "```java\n                    return person;\n```", "```java\n              }).toList();\n```", "```java\n}\n```", "```java\nList<String> validLine(String line){\n```", "```java\n   String[] arr = line.split(\",\");\n```", "```java\n   if(arr.length != 7){\n```", "```java\n     throw new RuntimeException(EXPECTED + \" 7 column: \" + \n```", "```java\n                                                         line);\n```", "```java\n   }\n```", "```java\n   List<String> values = Arrays.stream(arr)\n```", "```java\n     .parallel()\n```", "```java\n     .map(s -> {\n```", "```java\n          String val = s.trim();\n```", "```java\n          if(val.isEmpty()){\n```", "```java\n            throw new RuntimeException(EXPECTED + \n```", "```java\n                            \" only non-empty values: \" + line);\n```", "```java\n          }\n```", "```java\n          return val;\n```", "```java\n   }).toList();\n```", "```java\n   try {\n```", "```java\n         Integer.valueOf(values.get(2));\n```", "```java\n         Integer.valueOf(values.get(6));\n```", "```java\n   } catch (Exception e) {\n```", "```java\n     throw new RuntimeException(EXPECTED + \n```", "```java\n                       \" numbers in columns 3 and 7: \" + line);\n```", "```java\n   }\n```", "```java\n   if(values.get(6).length() != 5){\n```", "```java\n     throw new RuntimeException(EXPECTED + \n```", "```java\n                           \" zip code 5 digits only: \" + line);\n```", "```java\n   }\n```", "```java\n   return values;\n```", "```java\n}\n```", "```java\n   Set<String> cities = new HashSet<>();\n```", "```java\n   Set<String> states = new HashSet<>();\n```", "```java\n   Set<Integer> zips = new HashSet<>();\n```", "```java\n   Map<Integer, Integer> oldestByZip = new HashMap<>();\n```", "```java\n   Map<Integer, String> oldestNameByZip = new HashMap<>();\n```", "```java\n   URL url = Main.class.getClassLoader().getResource(\n```", "```java\n                                                  \"input.csv\");\n```", "```java\n   File file = new File(url.toURI());\n```", "```java\n   List<Person> list = getInputPersonList(file);\n```", "```java\n   list.stream()\n```", "```java\n       .forEach(p -> {\n```", "```java\n            cities.add(p.getCity());\n```", "```java\n            states.add(p.getState());\n```", "```java\n            zips.add(p.getZip());\n```", "```java\n            int age = oldestByZip.getOrDefault(p.getZip(), 0);\n```", "```java\n            if(p.getAge() > age){\n```", "```java\n              oldestByZip.put(p.getZip(), p.getAge());\n```", "```java\n              oldestNameByZip.put(p.getZip(), \n```", "```java\n                             p.getAge() + \": \" + p.getName());\n```", "```java\n            } else if (p.getAge() == age){\n```", "```java\n              oldestNameByZip.put(p.getZip(), \n```", "```java\n                    oldestNameByZip.get(p.getZip()) + \n```", "```java\n                                          \", \" + p.getName());\n```", "```java\n            }\n```", "```java\n   });\n```", "```java\nSystem.out.println(\"cities: \" +\n```", "```java\n  cities.stream().sorted().collect(Collectors.joining(\", \")));\n```", "```java\nSystem.out.println(\"states: \" +\n```", "```java\n  states.stream().sorted().collect(Collectors.joining(\", \")));\n```", "```java\nSystem.out.println(\"zips: \" + zips.stream().sorted()\n```", "```java\n                              .map(i -> String.valueOf(i))\n```", "```java\n                          .collect(Collectors.joining(\", \")));\n```", "```java\nSystem.out.println(\"Oldest in each zip: \" +\n```", "```java\n            oldestNameByZip.keySet().stream().sorted()\n```", "```java\n              .map(i -> i + \"=>\" + oldestNameByZip.get(i))\n```", "```java\n                          .collect(Collectors.joining(\"; \")));\n```", "```java\n    Stream.iterate(1, i -> i + 2)\n          .limit(3)\n          .forEach(System.out::print);\n    ```", "```java\n    Stream.concat(Set.of(42).stream(), \n                 List.of(42).stream()).limit(1)\n                                 .forEach(System.out::print);\n    ```", "```java\n    Stream.generate(() -> 42 / 2)\n          .limit(2)\n          .forEach(System.out::print);\n    ```", "```java\n    new Random().doubles(42).filter(d -> d >= 1)\n    ```", "```java\n    Stream.of(1,2,3,4)\n            .skip(2)\n            .takeWhile(i -> i < 4)\n            .forEach(System.out::print);\n    ```", "```java\n    double d = Stream.of(1, 2)\n                     .mapToDouble(Double::valueOf)\n                     .map(e -> e / 2)\n                     .sum();\n    ```", "```java\n    String s = Stream.of(\"a\",\"X\",\"42\").sorted()\n     .collect(Collectors.joining(\",\"));\n    ```", "```java\n    List.of(1,2,3).stream()\n                  .peek(i -> i > 2 )\n                  .forEach(System.out::print);\n    ```", "```java\n    List.of(1,2,3).stream()\n                  .peek(System.out::println)\n                  .noneMatch(e -> e == 2);\n    ```", "```java\n    String s = Stream.of(\"a\",\"X\",\"42\")\n     .max(Comparator.naturalOrder())\n     .orElse(\"12\");\n    ```"]