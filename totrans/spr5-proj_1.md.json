["```java\nGET http://api.worldbank.org/countries/BR/indicators/NY.GDP.MKTP.CD?format=json&date=2007:2017\n```", "```java\n[\n    {\n        \"page\": 1,\n        \"pages\": 1,\n        \"per_page\": \"50\",\n        \"total\": 11\n    },\n    [\n       ....// Other country data \n        {\n            \"indicator\": {\n                \"id\": \"NY.GDP.MKTP.CD\",\n                \"value\": \"GDP (current US$)\"\n            },\n            \"country\": {\n                \"id\": \"BR\",\n                \"value\": \"Brazil\"\n            },\n            \"value\": \"1796186586414.45\",\n            \"decimal\": \"0\",\n            \"date\": \"2016\"\n        }\n    ]\n]\n```", "```java\nmvn archetype:generate -DgroupId=com.nilangpatel.worldgdp -DartifactId=worldgdp -Dversion=0.0.1-SNAPSHOT -DarchetypeArtifactId=maven-archetype-webapp\n```", "```java\n<properties>\n    <java.version>1.8</java.version>\n    <lombok.version>1.16.18</lombok.version>\n</properties>\n<dependency>\n    <groupId>org.projectlombok</groupId>\n    <artifactId>lombok</artifactId>\n    <optional>true</optional>\n    <version>${lombok.version}</version>\n</dependency>\n```", "```java\n@Data\n@Setter\n@Getter\npublic class Country {\n    private String code;\n    private String name;\n    private String continent;\n    private String region;\n    private Double surfaceArea;\n    private Short indepYear;\n    private Long population;\n    private Double lifeExpectancy;\n    private Double gnp;\n    private String localName;\n    private String governmentForm;\n    private String headOfState;\n    private City capital;\n    private String code2;\n}\n```", "```java\n@Data\n@Setter\n@Getter\npublic class City {\n    private Long id;\n    private String name;\n    private Country country;\n    private String district;\n    private Long population;\n}\n```", "```java\n@Data\n@Setter\n@Getter\npublic class CountryLanguage {\n    private Country country;\n    private String language;\n    private String isOfficial;\n    private Double percentage;\n}\n```", "```java\n@Data\n@Setter\n@Getter\npublic class CountryGDP { \n    private Short year;\n    private Double value;\n}\n```", "```java\njava -jar lombok-1.16.18.jar \n```", "```java\n    <properties>\n        <java.version>1.8</java.version>\n        <lombok.version>1.16.18</lombok.version>\n        <hibernate.validator.version>6.0.2.Final</hibernate.validator.version>\n    </properties>    \n    <dependency>\n        <groupId>org.hibernate.validator</groupId>\n        <artifactId>hibernate-validator</artifactId>\n        <version>${hibernate.validator.version}</version>\n    </dependency>\n```", "```java\n@Data public class Country {\n\n  @NotNull @Size(max = 3, min = 3) private String code;\n  @NotNull @Size(max = 52) private String name;\n  @NotNull private String continent;\n  @NotNull @Size(max = 26) private String region;\n  @NotNull private Double surfaceArea;\n  private Short indepYear;\n  @NotNull private Long population;\n  private Double lifeExpectancy;\n  private Double gnp;\n  @NotNull private String localName;\n  @NotNull private String governmentForm;\n  private String headOfState;\n  private City capital;\n  @NotNull private String code2;\n}\n```", "```java\n@Data public class City {\n  @NotNull private Long id;\n  @NotNull @Size(max = 35) private String name;\n  @NotNull @Size(max = 3, min = 3) private String countryCode;\n  private Country country;\n  @NotNull @Size(max = 20) private String district;\n  @NotNull private Long population;\n}\n```", "```java\n@Data\npublic class CountryLanguage {\n  private Country country;\n  @NotNull private String countryCode;\n  @NotNull @Size(max = 30) private String language;\n  @NotNull @Size(max = 1, min = 1) private String isOfficial;\n  @NotNull private Double percentage;\n}\n```", "```java\n    <properties>\n        <java.version>1.8</java.version>\n        <lombok.version>1.16.18</lombok.version>\n        <hibernate.validator.version>6.0.2.Final</hibernate.validator.version>    \n        <mysql.jdbc.driver.version>5.1.44</mysql.jdbc.driver.version>\n    </properties> \n    <dependency>\n      <groupId>mysql</groupId>\n      <artifactId>mysql-connector-java</artifactId>\n      <version>${mysql.jdbc.driver.version}</version>\n    </dependency>\n```", "```java\n<dependency>\n   <groupId>org.springframework</groupId>\n   <artifactId>spring-core</artifactId>\n   <version>${spring.version}</version>\n</dependency>\n<dependency>\n   <groupId>org.springframework</groupId>\n   <artifactId>spring-jdbc</artifactId>\n   <version>${spring.version}</version>\n</dependency>\n```", "```java\n<dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-beans</artifactId>\n    <version>${spring.version}</version>\n</dependency>\n<dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-context</artifactId>\n    <version>${spring.version}</version>\n</dependency>\n```", "```java\ndataSourceClassName=com.mysql.jdbc.Driver\njdbcUrl=jdbc:mysql://localhost:3306/worldgdp\ndataSource.user=root\ndataSource.password=test\n```", "```java\n@Configuration\n@PropertySource(\"classpath:application.properties\")\npublic class PropertiesWithJavaConfig {\n\n   @Bean\n   public static PropertySourcesPlaceholderConfigurer\n     propertySourcesPlaceholderConfigurer() {\n      return new PropertySourcesPlaceholderConfigurer();\n   }\n}\n```", "```java\n    <dependency>\n        <groupId>com.zaxxer</groupId>\n        <artifactId>HikariCP</artifactId>\n        <version>${hikari.version}</version>\n    </dependency>\n```", "```java\n@Configuration\npublic class DBConfiguration {\n  @Value(\"${jdbcUrl}\") String jdbcUrl;\n  @Value(\"${dataSource.user}\") String username;\n  @Value(\"${dataSource.password}\") String password;\n  @Value(\"${dataSourceClassName}\") String className;\n\n  @Bean\n  public DataSource getDataSource() {\n    HikariDataSource ds = new HikariDataSource();\n    ds.setJdbcUrl(jdbcUrl);\n    ds.setUsername(username);\n    ds.setPassword(password);\n    ds.setDriverClassName(className);\n    return ds;\n  }\n\n  @Bean\n  public NamedParameterJdbcTemplate namedParamJdbcTemplate() {\n    NamedParameterJdbcTemplate namedParamJdbcTemplate = \n        new NamedParameterJdbcTemplate(getDataSource());\n    return namedParamJdbcTemplate;\n  }\n}\n```", "```java\n<dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-test</artifactId>\n    <version>${spring.version}</version>\n    <scope>test</scope>\n</dependency>\n<dependency>\n    <groupId>junit</groupId>\n    <artifactId>junit</artifactId>\n    <version>${junit.version}</version>\n    <scope>test</scope>\n</dependency>\n<dependency>\n    <groupId>org.assertj</groupId>\n    <artifactId>assertj-core</artifactId>\n    <version>${assertj.version}</version>\n    <scope>test</scope>\n</dependency>\n<dependency>\n    <groupId>com.h2database</groupId>\n    <artifactId>h2</artifactId>\n    <version>${h2.version}</version>\n</dependency>\n```", "```java\n<junit.version>4.12</junit.version>\n<assertj.version>3.12.0</assertj.version>\n<h2.version>1.4.198</h2.version>\n```", "```java\n@Configuration\npublic class TestDBConfiguration {\n\n  @Bean\n    public DataSource dataSource() {\n        return new EmbeddedDatabaseBuilder()\n            .generateUniqueName(true)\n            .setType(EmbeddedDatabaseType.H2)\n            .setScriptEncoding(\"UTF-8\")\n            .ignoreFailedDrops(true)\n            .addScript(\"h2_world.sql\")\n            .build();\n    }\n\n  @Bean(\"testTemplate\")\n  public NamedParameterJdbcTemplate namedParamJdbcTemplate() {\n    NamedParameterJdbcTemplate namedParamJdbcTemplate = \n        new NamedParameterJdbcTemplate(dataSource());\n    return namedParamJdbcTemplate;\n  }\n}\n```", "```java\npublic class CountryRowMapper implements RowMapper<Country>{\n\n  public Country mapRow(ResultSet rs, int rowNum) \n                            throws SQLException {\n    Country country = new Country();\n    country.setCode(rs.getString(\"code\"));\n    country.setName(rs.getString(\"name\"));\n    country.setContinent(rs.getString(\"continent\"));\n    country.setRegion(rs.getString(\"region\"));\n    country.setSurfaceArea(rs.getDouble(\"surface_area\"));\n    country.setIndepYear(rs.getShort(\"indep_year\"));\n    country.setPopulation(rs.getLong(\"population\"));\n    country.setLifeExpectancy(rs.getDouble(\"life_expectancy\"));\n    country.setGnp(rs.getDouble(\"gnp\"));\n    country.setLocalName(rs.getString(\"local_name\"));\n    country.setGovernmentForm(rs.getString(\"government_form\"));\n    country.setHeadOfState(rs.getString(\"head_of_state\"));\n    country.setCode2(rs.getString(\"code2\"));\n    if ( Long.valueOf(rs.getLong(\"capital\")) != null ) {\n      City city = new City();\n      city.setId(rs.getLong(\"capital\"));\n      city.setName(rs.getString(\"capital_name\"));\n      country.setCapital(city);\n    }\n    return country;\n  }\n}\n```", "```java\npublic class CityRowMapper implements RowMapper<City>{\n  public City mapRow(ResultSet rs, int rowNum) \n                    throws SQLException {\n    City city = new City();\n    city.setCountryCode(rs.getString(\"country_code\"));\n    city.setDistrict(rs.getString(\"district\"));\n    city.setId(rs.getLong(\"id\"));\n    city.setName(rs.getString(\"name\"));\n    city.setPopulation(rs.getLong(\"population\"));\n    return city;\n  }\n}\n```", "```java\npublic class CountryLanguageRowMapper implements \n                       RowMapper<CountryLanguage> {\n  public CountryLanguage mapRow(ResultSet rs, int rowNum) \n                                 throws SQLException {\n    CountryLanguage countryLng = new CountryLanguage();\n    countryLng.setCountryCode(rs.getString(\"countrycode\"));\n    countryLng.setIsOfficial(rs.getString(\"isofficial\"));\n    countryLng.setLanguage(rs.getString(\"language\"));\n    countryLng.setPercentage(rs.getDouble(\"percentage\"));\n    return countryLng;\n  }\n}\n```", "```java\nprivate static final String SELECT_CLAUSE = \"SELECT \"\n      + \" c.Code, \"\n      + \" c.Name, \"\n      + \" c.Continent, \"\n      + \" c.region, \"\n      + \" c.SurfaceArea surface_area, \"\n      + \" c.IndepYear indep_year, \"\n      + \" c.Population, \"\n      + \" c.LifeExpectancy life_expectancy, \"\n      + \" c.GNP, \"\n      + \" c.LocalName local_name, \"\n      + \" c.GovernmentForm government_form, \"\n      + \" c.HeadOfState head_of_state, \"\n      + \" c.code2 ,\"\n      + \" c.capital ,\"\n      + \" cy.name capital_name \"\n      + \" FROM country c\"\n      + \" LEFT OUTER JOIN city cy ON cy.id = c.capital \";\n```", "```java\nprivate static final String SEARCH_WHERE_CLAUSE = \" AND ( LOWER(c.name) \"\n      + \" LIKE CONCAT('%', LOWER(:search), '%') ) \";\n```", "```java\nprivate static final String CONTINENT_WHERE_CLAUSE = \n      \" AND c.continent = :continent \";\n```", "```java\nprivate static final String REGION_WHERE_CLAUSE = \n      \" AND c.region = :region \";\n```", "```java\nprivate static final String PAGINATION_CLAUSE = \" ORDER BY c.code \"\n      + \" LIMIT :size OFFSET :offset \";\n```", "```java\npublic List<Country> getCountries(Map<String, Object> params){\n    int pageNo = 1;\n    if ( params.containsKey(\"pageNo\") ) {\n      pageNo = Integer.parseInt(params.get(\"pageNo\").toString());\n    }\n    Integer offset = (pageNo - 1) * PAGE_SIZE;\n    params.put(\"offset\", offset);\n    params.put(\"size\", PAGE_SIZE);\n    return namedParamJdbcTemplate.query(SELECT_CLAUSE\n        + \" WHERE 1 = 1 \"\n        + (!StringUtils.isEmpty((String)params.get(\"search\")) \n            ? SEARCH_WHERE_CLAUSE : \"\")\n        + (!StringUtils.isEmpty((String)params.get(\"continent\")) \n            ? CONTINENT_WHERE_CLAUSE : \"\")\n        + (!StringUtils.isEmpty((String)params.get(\"region\")) \n            ? REGION_WHERE_CLAUSE : \"\")\n        + PAGINATION_CLAUSE,\n        params, new CountryRowMapper());\n  }\n```", "```java\npublic int getCountriesCount(Map<String, Object> params) {\n  return namedParamJdbcTemplate.queryForObject(\n          \"SELECT COUNT(*) FROM country c\" \n        + \" WHERE 1 = 1 \"\n        + (!StringUtils.isEmpty((String)params.get(\"search\")) \n            ? SEARCH_WHERE_CLAUSE : \"\")\n        + (!StringUtils.isEmpty((String)params.get(\"continent\")) \n            ? CONTINENT_WHERE_CLAUSE : \"\")\n        + (!StringUtils.isEmpty((String)params.get(\"region\")) \n            ? REGION_WHERE_CLAUSE : \"\"),\n        params, Integer.class);\n  }\n```", "```java\npublic Country getCountryDetail(String code) {\n  Map<String, String> params = new HashMap<String, String>();\n  params.put(\"code\", code);\n\n  return namedParamJdbcTemplate.queryForObject(SELECT_CLAUSE \n      +\" WHERE c.code = :code\", params, \n      new CountryRowMapper());\n}\n```", "```java\npublic void editCountryDetail(String code, Country country) {\n    namedParamJdbcTemplate.update(\" UPDATE country SET \"\n        + \" name = :name, \"\n        + \" localname = :localName, \"\n        + \" capital = :capital, \"\n        + \" continent = :continent, \"\n        + \" region = :region, \"\n        + \" HeadOfState = :headOfState, \"\n        + \" GovernmentForm = :governmentForm, \"\n        + \" IndepYear = :indepYear, \"\n        + \" SurfaceArea = :surfaceArea, \"\n        + \" population = :population, \"\n        + \" LifeExpectancy = :lifeExpectancy \"\n        + \"WHERE Code = :code \", \n        getCountryAsMap(code, country));\n  }\n```", "```java\nprivate Map<String, Object> getCountryAsMap(String code, Country country){\n    Map<String, Object> countryMap = new HashMap<String, Object>();\n    countryMap.put(\"name\", country.getName());\n    countryMap.put(\"localName\", country.getLocalName());\n    countryMap.put(\"capital\", country.getCapital().getId());\n    countryMap.put(\"continent\", country.getContinent());\n    countryMap.put(\"region\", country.getRegion());\n    countryMap.put(\"headOfState\", country.getHeadOfState());\n    countryMap.put(\"governmentForm\", country.getGovernmentForm());\n    countryMap.put(\"indepYear\", country.getIndepYear());\n    countryMap.put(\"surfaceArea\", country.getSurfaceArea());\n    countryMap.put(\"population\", country.getPopulation());\n    countryMap.put(\"lifeExpectancy\", country.getLifeExpectancy());\n    countryMap.put(\"code\", code);\n    return countryMap;\n}\n```", "```java\n@RunWith(SpringRunner.class)\n@SpringJUnitConfig( classes = {\n      TestDBConfiguration.class, CountryDAO.class})\npublic class CountryDAOTest {\n\n  @Autowired CountryDAO countryDao;\n\n  @Autowired @Qualifier(\"testTemplate\")\n  NamedParameterJdbcTemplate namedParamJdbcTemplate;\n\n  @Before\n  public void setup() {\n    countryDao.setNamedParamJdbcTemplate(namedParamJdbcTemplate);\n  }\n\n  @Test\n  public void testGetCountries() {\n    List<Country> countries = countryDao.getCountries(new HashMap<>());\n    //AssertJ assertions\n    //Paginated List, so should have 20 entries\n    assertThat(countries).hasSize(20);\n  }\n\n  @Test\n  public void testGetCountries_searchByName() {\n    Map<String, Object> params = new HashMap<>();\n    params.put(\"search\", \"Aruba\");\n    List<Country> countries = countryDao.getCountries(params);\n    assertThat(countries).hasSize(1);\n  }\n\n  @Test\n  public void testGetCountries_searchByContinent() {\n    Map<String, Object> params = new HashMap<>();\n    params.put(\"continent\", \"Asia\");\n    List<Country> countries = countryDao.getCountries(params);\n\n    assertThat(countries).hasSize(20);\n  }\n\n  @Test\n  public void testGetCountryDetail() {\n    Country c = countryDao.getCountryDetail(\"IND\");\n    assertThat(c).isNotNull();\n    assertThat(c.toString()).isEqualTo(\"Country(code=IND, name=India, \"\n        + \"continent=Asia, region=Southern and Central Asia, \"\n        + \"surfaceArea=3287263.0, indepYear=1947, population=1013662000, \"\n        + \"lifeExpectancy=62.5, gnp=447114.0, localName=Bharat/India, \"\n        + \"governmentForm=Federal Republic, headOfState=Kocheril Raman Narayanan, \"\n        + \"capital=City(id=1109, name=New Delhi, countryCode=null, \"\n        + \"country=null, district=null, population=null), code2=IN)\");\n  }\n\n  @Test public void testEditCountryDetail() {\n    Country c = countryDao.getCountryDetail(\"IND\");\n    c.setHeadOfState(\"Ram Nath Kovind\");\n    c.setPopulation(1324171354l);\n    countryDao.editCountryDetail(\"IND\", c);\n\n    c = countryDao.getCountryDetail(\"IND\");\n    assertThat(c.getHeadOfState()).isEqualTo(\"Ram Nath Kovind\");\n    assertThat(c.getPopulation()).isEqualTo(1324171354l);\n  }\n\n  @Test public void testGetCountriesCount() {\n    Integer count = countryDao.getCountriesCount(Collections.EMPTY_MAP);\n    assertThat(count).isEqualTo(239);\n  }\n}\n```", "```java\npublic List<City> getCities(String countryCode, Integer pageNo){\n  Map<String, Object> params = new HashMap<String, Object>();\n  params.put(\"code\", countryCode);\n  if ( pageNo != null ) {\n    Integer offset = (pageNo - 1) * PAGE_SIZE;\n    params.put(\"offset\", offset);\n    params.put(\"size\", PAGE_SIZE);\n  }\n\n  return namedParamJdbcTemplate.query(\"SELECT \"\n      + \" id, name, countrycode country_code, district, population \"\n      + \" FROM city WHERE countrycode = :code\"\n      + \" ORDER BY Population DESC\"\n      + ((pageNo != null) ? \" LIMIT :offset , :size \" : \"\"),\n      params, new CityRowMapper());\n}\n```", "```java\npublic List<City> getCities(String countryCode){\n  return getCities(countryCode, null);\n}\n```", "```java\npublic City getCityDetail(Long cityId) {\n  Map<String, Object> params = new HashMap<String, Object>();\n  params.put(\"id\", cityId);\n  return namedParamJdbcTemplate.queryForObject(\"SELECT id, \"\n      + \" name, countrycode country_code, \"\n      + \" district, population \"\n      + \" FROM city WHERE id = :id\", \n      params, new CityRowMapper());\n}\n```", "```java\npublic Long addCity(String countryCode, City city) {\n\n  SqlParameterSource paramSource = new MapSqlParameterSource(\n      getMapForCity(countryCode, city));\n  KeyHolder keyHolder = new GeneratedKeyHolder();\n  namedParamJdbcTemplate.update(\"INSERT INTO city(\"\n      + \" name, countrycode, \"\n      + \" district, population) \"\n      + \" VALUES (:name, :country_code, \"\n      + \" :district, :population )\", \n      paramSource, keyHolder);\n  return keyHolder.getKey().longValue();\n}\n```", "```java\nprivate Map<String, Object> getMapForCity(String countryCode, City city){\n  Map<String, Object> map = new HashMap<String, Object>();\n  map.put(\"name\", city.getName());\n  map.put(\"country_code\", countryCode);\n  map.put(\"district\", city.getDistrict());\n  map.put(\"population\", city.getPopulation());\n  return map;\n}\n```", "```java\n KeyHolder keyHolder = new GeneratedKeyHolder();\n //other code\n return keyHolder.getKey().longValue();\n```", "```java\npublic void deleteCity(Long cityId) {\n  Map<String, Object> params = new HashMap<String, Object>();\n  params.put(\"id\", cityId);\n  namedParamJdbcTemplate.update(\"DELETE FROM city WHERE id = :id\", params);\n}\n```", "```java\n@RunWith(SpringRunner.class)\n@SpringJUnitConfig( classes = {\n  TestDBConfiguration.class, CityDAO.class})\npublic class CityDAOTest {\n\n  @Autowired CityDAO cityDao;\n\n  @Autowired @Qualifier(\"testTemplate\")\n  NamedParameterJdbcTemplate namedParamJdbcTemplate;\n\n  @Before\n  public void setup() {\n    cityDao.setNamedParamJdbcTemplate(namedParamJdbcTemplate);\n  }\n\n  @Test public void testGetCities() {\n    List<City> cities = cityDao.getCities(\"IND\", 1);\n    assertThat(cities).hasSize(10);\n  }\n\n  @Test public void testGetCityDetail() {\n    Long cityId = 1024l;\n    City city = cityDao.getCityDetail(cityId);\n    assertThat(city.toString()).isEqualTo(\"City(id=1024, name=Mumbai (Bombay), \"\n      + \"countryCode=IND, country=null, district=Maharashtra, population=10500000)\");\n  }\n\n  @Test public void testAddCity() {\n    String countryCode = \"IND\";\n    City city = new City();\n    city.setCountryCode(countryCode);\n    city.setDistrict(\"District\");\n    city.setName(\"City Name\");\n    city.setPopulation(101010l);\n\n    long cityId = cityDao.addCity(countryCode, city);\n    assertThat(cityId).isNotNull();\n    City cityFromDb = cityDao.getCityDetail(cityId);\n    assertThat(cityFromDb).isNotNull();\n    assertThat(cityFromDb.getName()).isEqualTo(\"City Name\");\n  }\n\n  @Test (expected = EmptyResultDataAccessException.class)\n  public void testDeleteCity() {\n    Long cityId = addCity();\n    cityDao.deleteCity(cityId);\n    City cityFromDb = cityDao.getCityDetail(cityId);\n    assertThat(cityFromDb).isNull();\n  }\n\n  private Long addCity() {\n    String countryCode = \"IND\";\n    City city = new City();\n    city.setCountryCode(countryCode);\n    city.setDistrict(\"District\");\n    city.setName(\"City Name\");\n    city.setPopulation(101010l);\n\n    return cityDao.addCity(countryCode, city);\n  }\n}\n```", "```java\npublic List<CountryLanguage> getLanguages(String countryCode, Integer pageNo){\n  Map<String, Object> params = new HashMap<String, Object>();\n  params.put(\"code\", countryCode);\n\n  Integer offset = (pageNo - 1) * PAGE_SIZE;\n  params.put(\"offset\", offset);\n  params.put(\"size\", PAGE_SIZE);\n\n  return namedParamJdbcTemplate.query(\"SELECT * FROM countrylanguage\"\n      + \" WHERE countrycode = :code\"\n      + \" ORDER BY percentage DESC \"\n      + \" LIMIT :size OFFSET :offset \", \n      params, new CountryLanguageRowMapper());\n}\n\npublic void addLanguage(String countryCode, CountryLanguage cl) {\n  namedParamJdbcTemplate.update(\"INSERT INTO countrylanguage ( \"\n      + \" countrycode, language, isofficial, percentage ) \"\n      + \" VALUES ( :country_code, :language, \"\n      + \" :is_official, :percentage ) \", \n      getAsMap(countryCode, cl));\n}\n\npublic boolean languageExists(String countryCode, String language) {\n  Map<String, Object> params = new HashMap<String, Object>();\n  params.put(\"code\", countryCode);\n  params.put(\"lang\", language);\n\n  Integer langCount = namedParamJdbcTemplate.queryForObject(\n    \"SELECT COUNT(*) FROM countrylanguage\"\n    + \" WHERE countrycode = :code \"\n    + \" AND language = :lang\", params, Integer.class);\n  return langCount > 0;\n}\n\npublic void deleteLanguage (String countryCode, String language ) {\n  Map<String, Object> params = new HashMap<String, Object>();\n  params.put(\"code\", countryCode);\n  params.put(\"lang\", language);\n  namedParamJdbcTemplate.update(\"DELETE FROM countrylanguage \"\n      + \" WHERE countrycode = :code AND \"\n      + \" language = :lang \", params);\n}\n\nprivate Map<String, Object> getAsMap(String countryCode, CountryLanguage cl){\n  Map<String, Object> map = new HashMap<String, Object>();\n  map.put(\"country_code\", countryCode);\n  map.put(\"language\", cl.getLanguage());\n  map.put(\"is_official\", cl.getIsOfficial());\n  map.put(\"percentage\", cl.getPercentage());\n  return map;\n}\n```", "```java\n@Service\npublic class WorldBankApiClient {\n\n  String GDP_URL = \"http://api.worldbank.org/countries/%s/indicators/NY.GDP.MKTP.CD?\"\n      + \"format=json&date=2008:2018\";\n\n  public List<CountryGDP> getGDP(String countryCode) throws ParseException {\n    RestTemplate worldBankRestTmplt = new RestTemplate();\n    ResponseEntity<String> response\n      = worldBankRestTmplt.getForEntity(String.format(GDP_URL, countryCode), String.class);\n\n    //the second element is the actual data and its an array of object\n    JSONParser parser = new JSONParser();\n    JSONArray responseData = (JSONArray) parser.parse(response.getBody()); \n    JSONArray countryDataArr = (JSONArray) responseData.get(1);\n\n    List<CountryGDP> data = new ArrayList<CountryGDP>();\n    JSONObject countryDataYearWise=null;\n    for (int index=0; index < countryDataArr.size(); index++) {\n      countryDataYearWise = (JSONObject) countryDataArr.get(index);\n\n      String valueStr = \"0\";\n      if(countryDataYearWise.get(\"value\") !=null) {\n        valueStr = countryDataYearWise.get(\"value\").toString();\n      }\n      String yearStr = countryDataYearWise.get(\"date\").toString();\n      CountryGDP gdp = new CountryGDP();\n      gdp.setValue(valueStr != null ? Double.valueOf(valueStr) : null);\n      gdp.setYear(Short.valueOf(yearStr));\n      data.add(gdp);\n    }\n    return data;\n  }\n}\n```", "```java\n<dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-webmvc</artifactId>\n    <version>${spring.version}</version>\n</dependency>\n```", "```java\n@EnableWebMvc\n@Configuration\n@ComponentScan(basePackages = \"com.nilangpatel.worldgdp\")\npublic class AppConfiguration implements WebMvcConfigurer{\n\n  @Override\n  public void addResourceHandlers(ResourceHandlerRegistry registry) {\n    registry.addResourceHandler(\"/static/**\").addResourceLocations(\"/static/\");\n  }\n}\n```", "```java\npublic class WorldApplicationInitializer extends\n  AbstractAnnotationConfigDispatcherServletInitializer {\n\n  @Override\n  protected Class<?>[] getRootConfigClasses() {\n    return null;\n  }\n  @Override\n  protected Class<?>[] getServletConfigClasses() {\n    return new Class[] {AppConfiguration.class};\n  }\n  @Override\n  protected String[] getServletMappings() {\n    return new String[] { \"/\" };\n  }\n}\n```", "```java\n<build>\n  <finalName>worldgdp</finalName>\n  <plugins>\n    <plugin>\n      <groupId>org.apache.maven.plugins</groupId>\n      <artifactId>maven-war-plugin</artifactId>\n      <executions>\n        <execution>\n          <id>default-war</id>\n          <phase>prepare-package</phase>\n          <configuration>\n            <failOnMissingWebXml>false</failOnMissingWebXml>\n          </configuration>\n        </execution>\n      </executions>\n    </plugin>\n  </plugins>\n</build>\n```", "```java\n@RestController\n@RequestMapping(\"/api/countries\")\n@Slf4j\npublic class CountryAPIController {\n\n  @Autowired CountryDAO countryDao;\n  @Autowired WorldBankApiClient worldBankApiClient;\n\n  @GetMapping\n  public ResponseEntity<?> getCountries(\n    @RequestParam(name=\"search\", required = false) String searchTerm,\n    @RequestParam(name=\"continent\", required = false) String continent,\n    @RequestParam(name=\"region\", required = false) String region,\n    @RequestParam(name=\"pageNo\", required = false) Integer pageNo\n  ){\n    //logic to fetch contries from CountryDAO\n    return ResponseEntity.ok();\n  }\n\n  @PostMapping(value = \"/{countryCode}\", \n      consumes = {MediaType.APPLICATION_JSON_VALUE})\n  public ResponseEntity<?> editCountry(\n    @PathVariable String countryCode, @Valid @RequestBody Country country ){\n    //logic to edit existing country \n    return ResponseEntity.ok();\n  }\n\n  @GetMapping(\"/{countryCode}/gdp\")\n  public ResponseEntity<?> getGDP(@PathVariable String countryCode){\n    //logic to get GDP by using external client\n    return ResponseEntity.ok();\n  }\n\n}\n```", "```java\n@GetMapping\npublic ResponseEntity<?> getCountries(\n  @RequestParam(name=\"search\", required = false) String searchTerm,\n  @RequestParam(name=\"continent\", required = false) String continent,\n  @RequestParam(name=\"region\", required = false) String region,\n  @RequestParam(name=\"pageNo\", required = false) Integer pageNo\n){\n  try {\n    Map<String, Object> params = new HashMap<String, Object>();\n    params.put(\"search\", searchTerm);\n    params.put(\"continent\", continent);\n    params.put(\"region\", region);\n    if ( pageNo != null ) {\n      params.put(\"pageNo\", pageNo.toString());\n    }\n\n    List<Country> countries = countryDao.getCountries(params);\n    Map<String, Object> response = new HashMap<String, Object>();\n    response.put(\"list\", countries);\n    response.put(\"count\", countryDao.getCountriesCount(params));\n    return ResponseEntity.ok(response);\n  }catch(Exception ex) {\n    log.error(\"Error while getting countries\", ex);\n    return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n          .body(\"Error while getting countries\");\n  }\n}\n```", "```java\n@PostMapping(\"/{countryCode}\")\npublic ResponseEntity<?> editCountry(\n  @PathVariable String countryCode, @Valid @RequestBody Country country ){\n  try {\n    countryDao.editCountryDetail(countryCode, country);\n    Country countryFromDb = countryDao.getCountryDetail(countryCode);\n    return ResponseEntity.ok(countryFromDb);\n  }catch(Exception ex) {\n    log.error(\"Error while editing the country: {} with data: {}\", \n       countryCode, country, ex);\n    return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n        .body(\"Error while editing the country\");\n  }\n}\n```", "```java\n<role rolename=\"manager-gui\" />\n<user username=\"admin\" password=\"admin\" roles=\"manager-gui\" />\n```", "```java\n<Context path=\"/world\" docBase=\"<<Directory path where you keep WAR file>>\" \n          reloadable=\"true\" />\n```", "```java\n<maven.compiler.target>1.8</maven.compiler.target>\n<maven.compiler.source>1.8</maven.compiler.source>\n```", "```java\n@Controller\n@RequestMapping(\"/\")\npublic class ViewController {\n\n  @Autowired CountryDAO countryDao;\n  @Autowired LookupDAO lookupDao;\n  @Autowired CityDAO cityDao;\n\n  @GetMapping({\"/countries\", \"/\"})\n  public String countries(Model model, \n    @RequestParam Map<String, Object> params\n  ) {\n    //logic to fetch country list\n    return \"countries\";\n  }\n\n  @GetMapping(\"/countries/{code}\")\n  public String countryDetail(@PathVariable String code, Model model) {\n    //Logic to Populate the country detail in model\n    return \"country\";\n  }\n\n  @GetMapping(\"/countries/{code}/form\")\n  public String editCountry(@PathVariable String code, \n    Model model) {\n    //Logic to call CountryDAO to update the country\n    return \"country-form\";\n  }\n}\n```", "```java\n@GetMapping({\"/countries\", \"/\"})\npublic String countries(Model model, \n  @RequestParam Map<String, Object> params\n) {\n  model.addAttribute(\"continents\", lookupDao.getContinents());\n  model.addAttribute(\"regions\", lookupDao.getRegions());\n  model.addAttribute(\"countries\", countryDao.getCountries(params));\n  model.addAttribute(\"count\", countryDao.getCountriesCount(params));\n\n  return \"countries\";\n}\n```", "```java\n<!-- Dynamic content in HTML tag -->\n<div class=\"alert alert-info\">[[${country.name}]]</div>\n\n<!-- Dynamic attributes -->\n<span th:class=\"|alert ${error ? 'alert-danger': _}|\">[[${errorMsg}]]</span>\n\n<!-- Looping -->\n<ol>\n  <li th:each=\"c : ${countries}\">\n     [[${c.name}]]\n  </li>\n</ol>\n\n<!-- Conditionals -->\n<div class=\"alert alert-warning\" th:if=\"${count == 0}\">No results found</div>\n\n<!-- Custom attributes -->\n<div th:attr=\"data-count=${count}\"></div>\n\n<!-- Form element value -->\n<input type=\"text\" th:value=\"${country.name}\" name=\"name\" />\n```", "```java\n    <dependency>\n      <groupId>org.thymeleaf</groupId>\n      <artifactId>thymeleaf-spring5</artifactId>\n      <version>${thymeleaf.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>nz.net.ultraq.thymeleaf</groupId>\n      <artifactId>thymeleaf-layout-dialect</artifactId>\n      <version>${thymeleaf-layout-dialect.version}</version>\n    </dependency>\n```", "```java\n@Bean\npublic ClassLoaderTemplateResolver templateResolver() {\n  ClassLoaderTemplateResolver templateResolver \n     = new ClassLoaderTemplateResolver();\n  templateResolver.setPrefix(\"templates/\");\n  templateResolver.setSuffix(\".html\");\n  templateResolver.setTemplateMode(TemplateMode.HTML);\n  templateResolver.setCacheable(false);\n  return templateResolver;\n}\n```", "```java\n@Bean\npublic SpringTemplateEngine templateEngine() {\n  SpringTemplateEngine templateEngine = new SpringTemplateEngine();\n  templateEngine.setTemplateResolver(templateResolver());\n  templateEngine.addDialect(new LayoutDialect());\n  return templateEngine;\n}\n```", "```java\n@Bean\npublic ViewResolver viewResolver() {\n  ThymeleafViewResolver viewResolver = new ThymeleafViewResolver();\n  viewResolver.setTemplateEngine(templateEngine());\n  viewResolver.setCharacterEncoding(\"UTF-8\");\n  return viewResolver;\n}\n```", "```java\n@Override\npublic void addResourceHandlers(ResourceHandlerRegistry registry) {\n  registry.addResourceHandler(\"/static/**\")\n    .addResourceLocations(\"/static/\");\n}\n```", "```java\n<!DOCTYPE html>\n<html \n\n  >\n  <head>\n\n    <title layout:title-pattern=\"$CONTENT_TITLE - $LAYOUT_TITLE\">World In Numbers</title>\n    <meta name=\"description\" content=\"\"/>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n    <!-- Include all the CSS links -->\n  </head>\n\n  <body>\n    <nav class=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n      <a class=\"navbar-brand\" href=\"#\">WORLD IN NUMBERS</a>\n      <div class=\"collapse navbar-collapse\" id=\"navbarColor01\">\n          <ul class=\"navbar-nav mr-auto\">\n          <li class=\"nav-item active\">\n            <a class=\"nav-link\" th:href=\"@{/countries}\">Countries</a>\n          </li>\n        </ul>\n      </div>\n    </nav>\n    <div class=\"container\">\n      <div class=\"content\">\n        <div layout:fragment=\"page_content\">\n          <!-- Placeholder for content -->\n        </div>\n\n      </div>\n    </div>\n\n    <div class=\"modal\" id=\"worldModal\" >\n    </div>\n    <footer id=\"footer\"></footer>\n    <!-- /.container -->\n\n    <!-- Include all the Javascript source files -->\n    <th:block layout:fragment=\"scripts\">\n      <!-- Placeholder for page related javascript -->\n    </th:block>\n  </body>\n\n</html>\n\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n  <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n    <layout class=\"ch.qos.logback.classic.PatternLayout\">\n      <Pattern>\n        %d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n\n      </Pattern>\n    </layout>\n  </appender>\n  <logger name=\"com.nilangpatel.worldgdp\" level=\"debug\" additivity=\"false\">\n    <appender-ref ref=\"STDOUT\" />\n  </logger>\n  <root level=\"debug\">\n    <appender-ref ref=\"STDOUT\" />\n  </root>\n</configuration>\n```", "```java\n  <dependency>\n      <groupId>ch.qos.logback</groupId>\n      <artifactId>logback-classic</artifactId>\n      <version>${logback.version}</version>\n  </dependency>\n  <dependency>\n      <groupId>ch.qos.logback</groupId>\n      <artifactId>logback-core</artifactId>\n      <version>${logback.version}</version>\n  </dependency>\n```", "```java\n$ mvn package \n```"]