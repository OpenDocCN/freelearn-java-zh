["```java\npackage org.packt.swarm.petstore.catalog;\n\nimport javax.ws.rs.container.ContainerResponseFilter;\nimport javax.ws.rs.container.ContainerRequestContext;\nimport javax.ws.rs.container.ContainerResponseContext;\nimport javax.ws.rs.ext.Provider;\nimport java.io.IOException;\n\n//1\n@Provider\npublic class PodNameResponseFilter implements ContainerResponseFilter {\n    public void filter(ContainerRequestContext req, ContainerResponseContext res)\n            throws IOException\n    {\n        //2\n res.getHeaders().add(\"pod\",System.getenv(\"HOSTNAME\"));\n    }\n}\n```", "```java\nvi pets.sql\n```", "```java\nDROP TABLE IF EXISTS PRICE;                                                                                                                                                                                                        \n\nCREATE TABLE PRICE (id serial PRIMARY KEY, item_id varchar, price smallint);\n\nINSERT INTO PRICE(item_id, price) VALUES ('dbf67f4d-f1c9-4fd4-96a8-65ee1a22b9ff', 50);\nINSERT INTO PRICE(item_id, price) VALUES ('fc7ee3ea-8f82-4144-bcc8-9a71f4d871bd', 30);\nINSERT INTO PRICE(item_id, price) VALUES ('725dfad2-0b4d-455c-9385-b46c9f356e9b', 15);\nINSERT INTO PRICE(item_id, price) VALUES ('a2aa1ca7-add8-4aae-b361-b7f92d82c3f5', 3000);\n```", "```java\npsql -U pricing pricingdb < pets.sql\n```", "```java\nswarm:\n  datasources:\n    data-sources:\n PricingDS:\n       driver-name: postgresql\n connection-url: jdbc:postgresql://pricingdb.petstore.svc/pricingdb\n user-name: pricing\n password: pricing\n    jdbc-drivers:\n      postgresql:\n        driver-class-name: org.postgresql.Driver\n        xa-datasource-name: org.postgresql.xa.PGXADataSource\n        driver-module-name: org.postgresql.jdbc\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<persistence\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        version=\"2.1\"\n        xmlns=\"http://xmlns.jcp.org/xml/ns/persistence\"\n        xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd\">\n    <persistence-unit name=\"PricingPU\" transaction-type=\"JTA\">\n        <jta-data-source>java:jboss/datasources/PricingDS</jta-data-source>\n    </persistence-unit>\n</persistence>\n```", "```java\npackage org.packt.swarm.petstore.pricing;\n\nimport com.fasterxml.jackson.annotation.JsonIgnore;\n\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport javax.persistence.NamedQueries;\nimport javax.persistence.NamedQuery;\nimport javax.persistence.SequenceGenerator;\nimport javax.persistence.Table;\n\n//1\n@Entity\n//2\n@Table(name = \"Price\")\n//3\n@NamedQueries({\n @NamedQuery(name=\"Price.findByName\",\n                query=\"SELECT p FROM Price p WHERE p.name = :name\"),\n})\npublic class Price {\n\n //4\n @Id\n    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"price_sequence\")\n @SequenceGenerator(name = \"price_sequence\", sequenceName = \"price_id_seq\")\n //5\n @JsonIgnore\n    private int id;\n\n //6\n @Column(length = 30)\n private String name;\n    @Column\n    private int price;\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getPrice() {\n        return price;\n    }\n\n    public void setPrice(int price) {\n        this.price = price;\n    }\n}\n table that we have just created (2). We have provided NamedQueries, which will enable us to search the price of a pet by a name (3). An id, as in catalogdb, is generated using the Postgres sequence (4) and is not parsed in the JSON response (5). Finally, we have annotated the fields mapped to the price and name columns (6).\n```", "```java\npackage org.packt.swarm.petstore.pricing;\n\nimport org.packt.swarm.petstore.pricing.model.Price;\n\nimport javax.enterprise.context.ApplicationScoped;\nimport javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\nimport javax.ws.rs.WebApplicationException;\nimport java.util.List;\n\n@ApplicationScoped\npublic class PricingService {\n\n    @PersistenceContext(unitName = \"PricingPU\")\n    private EntityManager em;\n\n    public Price findByItemId(String itemId) {\n        return em.createNamedQuery(\"Price.findByItemId\", Price.class).setParameter(\"itemId\", itemId).getSingleResult();\n    }\n}\n```", "```java\npackage org.packt.swarm.petstore.pricing;\n\nimport org.packt.swarm.petstore.pricing.model.Price;\n\nimport javax.inject.Inject;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.PathParam;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.Context;\nimport javax.ws.rs.core.MediaType;\nimport javax.ws.rs.core.Response;\nimport javax.ws.rs.core.SecurityContext;\n\n@Path(\"/\")\npublic class PricingResource {\n\n    @Inject\n    private PricingService pricingService;\n\n    @GET\n    @Path(\"price/{item_id}\")\n    @Produces(MediaType.APPLICATION_JSON)\n    public Response priceByName(@PathParam(\"item_id\") String itemId) {\n        Price result = pricingService.findByItemId(itemId);\n        return Response.ok(result).build();\n}\n```", "```java\npackage org.packt.swarm.petstore.pricing;\n\nimport javax.ws.rs.ApplicationPath;\nimport javax.ws.rs.core.Application;\n\n@ApplicationPath(\"/\")\npublic class PricingApplication extends Application {\n}\n```", "```java\noc new-app wildflyswarm-10-centos7~https://github.com/PacktPublishing/Hands-On-Cloud-Development-with-WildFly.git --context-dir=chapter8/pricing-service --name=pricing-service\n\n```", "```java\npackage org.packt.swarm.petstore;\n\nimport org.packt.swarm.petstore.api.CatalogItemView;\n\nimport javax.inject.Inject;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\nimport javax.ws.rs.core.Response;\nimport java.util.List;\n\n@Path(\"/\")\npublic class GatewayResource {\n\n    @Inject\n    private GatewayService gatewayService;\n\n //1\n @GET\n    @Path(\"/catalog/item\")\n @Produces(MediaType.APPLICATION_JSON)\n public Response getItems() {\n        //2\n List<CatalogItemView> result = gatewayService.getItems();\n        return Response.ok(result).build();\n    }\n```", "```java\npackage org.packt.swarm.petstore;\n\nimport org.packt.swarm.petstore.api.CatalogItemView;\nimport org.packt.swarm.petstore.catalog.api.CatalogItem;\nimport org.packt.swarm.petstore.pricing.api.Price;\nimport org.packt.swarm.petstore.proxy.CatalogProxy;\nimport org.packt.swarm.petstore.proxy.PricingProxy;\n\nimport javax.enterprise.context.ApplicationScoped;\nimport javax.inject.Inject;\nimport java.util.ArrayList;\nimport java.util.List;\n\n@ApplicationScoped\npublic class GatewayService {\n\n //2\n @Inject\n    private CatalogProxy catalogProxy;\n\n    @Inject\n    private PricingProxy pricingProxy;\n\n //1\n public List<CatalogItemView> getItems() {\n List<CatalogItemView> views = new ArrayList<>();\n        for(CatalogItem item: catalogProxy.getAllItems()) {\n Price price = pricingProxy.getPrice(item.getItemId());\n\n            CatalogItemView view = new CatalogItemView();\n            view.setItemId(item.getItemId());\n            view.setName(item.getName());\n            view.setPrice(price.getPrice());\n            view.setQuantity(item.getQuantity());\n            view.setDescription(item.getDescription()); \n views.add(view);\n        }\n return views;\n    }\n\n}\n```", "```java\nPRICING_SERVICE_SERVICE_HOST=172.30.104.212\n```", "```java\npackage org.packt.swarm.petstore.proxy;\n\nimport org.packt.swarm.petstore.pricing.api.Price;\n\nimport javax.enterprise.context.ApplicationScoped;\nimport javax.ws.rs.client.Client;\nimport javax.ws.rs.client.ClientBuilder;\nimport javax.ws.rs.client.WebTarget;\nimport javax.ws.rs.core.MediaType;\n\n@ApplicationScoped\npublic class PricingProxy {\n\n    private String targetPath;\n\n    PricingProxy(){\n //1\n        targetPath = \"http://\" + System.getenv(\"PRICING_SERVICE_SERVICE_HOST\")+\":\"+8080;\n    }\n\n    public Price getPrice(String name){\n //2\n        Client client = ClientBuilder.newClient();\n        WebTarget target = client.target(targetPath +\"/price/\" + name);\n        return target.request(MediaType.APPLICATION_JSON).get(Price.class);\n    }\n}\n```", "```java\n${service name}.${application name}.svc\n```", "```java\npackage org.packt.swarm.petstore.proxy;\n\nimport org.packt.swarm.petstore.pricing.api.Price;\n\nimport javax.enterprise.context.ApplicationScoped;\nimport javax.ws.rs.client.Client;\nimport javax.ws.rs.client.ClientBuilder;\nimport javax.ws.rs.client.WebTarget;\nimport javax.ws.rs.core.MediaType;\n\n@ApplicationScoped\npublic class PricingProxy {\n\n //1\n    private final String targetPath = System.getProperty(\"proxy.pricing.url\");\n\n    public Price getPrice(String itemId){\n        Client client = ClientBuilder.newClient();\n        WebTarget target = client.target(targetPath + \"/price/\" + itemId);\n        return target.request(MediaType.APPLICATION_JSON).get(Price.class);\n    }\n}\n\n```", "```java\nproxy:\n  catalog:\n    url: \"http://catalog-service.petstore.svc:8080\"\n  pricing:\n    url: \"http://pricing-service.petstore.svc:8080\"\n```"]