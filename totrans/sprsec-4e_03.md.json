["```java\n//src/main/java/com/packtpub/springsecurity/domain/CalendarUser.java\npublic class CalendarUser implements Serializable {\n    private Integer id;\n    private String firstName;\n    private String lastName;\n    private String email;\n    private String password;\n... accessor methods omitted ..\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/domain/Event.java\npublic record Event(\n       Integer id,\n       @NotEmpty(message = \"Summary is required\") String summary,\n       @NotEmpty(message = \"Description is required\") String description,\n       @NotNull(message = \"When is required\") Calendar dateWhen,\n       @NotNull(message = \"Owner is required\") CalendarUser owner,\n       CalendarUser attendee\n) {}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/service/CalendarService.java\npublic interface CalendarService {\n    CalendarUser getUser(int id);\n    CalendarUser findUserByEmail(String email);\n    List<CalendarUser> findUsersByEmail(String partialEmail);\n    int createUser(CalendarUser user);\n    Event getEvent(int eventId);\n    int createEvent(Event event);\n    List<Event> findForUser(int userId);\n    List<Event> getEvents();\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/service/UserContext.java\npublic interface UserContext {\n    CalendarUser getCurrentUser();\n    void setCurrentUser(CalendarUser user);\n}\n```", "```java\nString username = SecurityContextHolder.getContext()\n       .getAuthentication()\n       .getName();\n```", "```java\n...\n@Component\npublic class UserContextStub implements UserContext {\n...\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/service/ SpringSecurityUserContext.java\n    @Component\n    public class SpringSecurityUserContext implements UserContext {\n        private final CalendarService calendarService;\n        private final UserDetailsService userDetailsService;\n        public SpringSecurityUserContext(final CalendarService calendarService,\n              final UserDetailsService userDetailsService) {\n           if (calendarService == null) {\n              throw new IllegalArgumentException(\"calendarService cannot be null\");\n           }\n           if (userDetailsService == null) {\n              throw new IllegalArgumentException(\"userDetailsService cannot be null\");\n           }\n           this.calendarService = calendarService;\n           this.userDetailsService = userDetailsService;\n        }\n        @Override\n        public CalendarUser getCurrentUser() {\n           SecurityContext context = SecurityContextHolder.getContext();\n           Authentication authentication = context.getAuthentication();\n           if (authentication == null) {\n              return null;\n           }\n           User user = (User) authentication.getPrincipal();\n           String email = user.getUsername();\n           if (email == null) {\n              return null;\n           }\n           CalendarUser result = calendarService.findUserByEmail(email);\n           if (result == null) {\n              throw new IllegalStateException(\n                    \"Spring Security is not in synch with CalendarUsers. Could not find user with email \" + email);\n           }\n           return result;\n        }\n        @Override\n        public void setCurrentUser(CalendarUser user) {\n           throw new UnsupportedOperationException();\n        }\n    }\n    ```", "```java\nauth.inMemoryAuthentication(). withUser(\"user\").password(\"user\").roles(\"USER\");\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n    @Bean\n    public InMemoryUserDetailsManager userDetailsService() {\n           UserDetails user1 = User.withDefaultPasswordEncoder()\n           .username(\"user1@example.com\")\n           .password(\"user1\")\n           .roles(\"USER\")\n           .build();\n           UserDetails admin1 = User.withDefaultPasswordEncoder()\n           .username(\"admin1@example.com\")\n           .password(\"admin1\")\n           .roles(\"USER\", \"ADMIN\")\n           .build();\n           return new InMemoryUserDetailsManager(user1, admin1);\n    }\n    ```", "```java\n    //src/main/java/com/packtpub/springsecurity/service/ DefaultCalendarService.java\n    public int createUser(final CalendarUser user) {\n           List<GrantedAuthority> authorities = AuthorityUtils.createAuthorityList(\"ROLE_USER\");\n           UserDetails userDetails = new User(user.getEmail(), user.getPassword(), authorities);\n           userDetailsManager.createUser(userDetails);\n           return userDao.createUser(user);\n           }\n    ```", "```java\n@Override\npublic void setCurrentUser(CalendarUser user) {\n    if (user == null) {\n       throw new IllegalArgumentException(\"user cannot be null\");\n    }\n    UserDetails userDetails = userDetailsService.loadUserByUsername(user.getEmail());\n    UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(userDetails,\n          user.getPassword(), userDetails.getAuthorities());\n    SecurityContextHolder.getContext().setAuthentication(authentication);\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/web/controllers/SignupController.java\n@PostMapping(\"/signup/new\")\npublic String signup(final @Valid SignupForm signupForm,\nfinal BindingResult result,\n       RedirectAttributes redirectAttributes) {\n       if (result.hasErrors()) {\n       return \"signup/form\";\n       }\n       String email = signupForm.getEmail();\n       if (calendarService.findUserByEmail(email) != null) {\n       result.rejectValue(\"email\", \"errors.signup.email\", \"Email address is already in use. FOO\");\n       redirectAttributes.addFlashAttribute(\"error\", \"Email address is already in use. FOO\");\n       return \"signup/form\";\n       }\n       CalendarUser user = new CalendarUser(null, signupForm.getFirstName(), signupForm.getLastName(), email, signupForm.getPassword());\n       int id = calendarService.createUser(user);\n       user.setId(id);\n       userContext.setCurrentUser(user);\n       redirectAttributes.addFlashAttribute(\"message\", \"You have successfully signed up and logged in.\");\n       return \"redirect:/\";\n       }\n```", "```java\n//src/main/java/com/packtpub/springsecurity/service/CalendarUserDetailsService.java\n@Component\npublic class CalendarUserDetailsService implements UserDetailsService {\n    private static final Logger logger = LoggerFactory\n          .getLogger(CalendarUserDetailsService.class);\n    private final CalendarUserDao calendarUserDao;\n    public CalendarUserDetailsService(final CalendarUserDao calendarUserDao) {\n       if (calendarUserDao == null) {\n          throw new IllegalArgumentException(\"calendarUserDao cannot be null\");\n       }\n       this.calendarUserDao = calendarUserDao;\n    }\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n       CalendarUser user = calendarUserDao.findUserByEmail(username);\n       if (user == null) {\n          throw new UsernameNotFoundException(\"Invalid username/password.\");\n       }\n       Collection<? extends GrantedAuthority> authorities = CalendarUserAuthorityUtils.createAuthorities(user);\n       return new User(user.getEmail(), user.getPassword(), authorities);\n    }\n}\n```", "```java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n...\n    }\n   @Bean\n   public PasswordEncoder encoder() {\n       return PasswordEncoderFactories.createDelegatingPasswordEncoder();\n   }\n}\n```", "```java\n@Component\npublic class CalendarUserDetailsService implements UserDetailsService {\n    private final CalendarUserDao calendarUserDao;\n    public CalendarUserDetailsService(CalendarUserDao calendarUserDao) {\n       if (calendarUserDao == null) {\n          throw new IllegalArgumentException(\"calendarUserDao cannot be null\");\n       }\n       this.calendarUserDao = calendarUserDao;\n    }\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n        ...\n       }\n       return new CalendarUserDetails(user);\n    }\n    private final class CalendarUserDetails extends CalendarUser implements UserDetails {\n       CalendarUserDetails(CalendarUser user) {\n          super(user.getId(), user.getFirstName(), user.getLastName(), user.getEmail(), user.getPassword());\n       }\n       @Override\n       public Collection<? extends GrantedAuthority> getAuthorities() {\n          return CalendarUserAuthorityUtils.createAuthorities(this);\n       }\n       @Override\n       public String getUsername() {\n          return getEmail();}\n       @Override\n       public boolean isAccountNonExpired() {\n          return true;}\n       @Override\n       public boolean isAccountNonLocked() {\n          return true;}\n       @Override\n       public boolean isCredentialsNonExpired() {\n          return true; }\n       @Override\n       public boolean isEnabled() {\n         return true;   }\n    }\n}\n```", "```java\n@Component\npublic class SpringSecurityUserContext implements UserContext {\n    @Override\n    public CalendarUser getCurrentUser() {\n       SecurityContext context = SecurityContextHolder.getContext();\n       Authentication authentication = context.getAuthentication();\n       if (authentication == null) {\n          return null;\n       }\n       return (CalendarUser) authentication.getPrincipal();\n    }\n    @Override\n    public void setCurrentUser(CalendarUser user) {\n       if (user == null) {\n          throw new IllegalArgumentException(\"user cannot be null\");\n       }\n       Collection<? extends GrantedAuthority> authorities = CalendarUserAuthorityUtils.createAuthorities(user);\n       UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(user,\n             user.getPassword(), authorities);\n       SecurityContextHolder.getContext().setAuthentication(authentication);\n    }\n}\n```", "```java\n//src/main/resources/templates/fragments/header.xhtml\n<li class=\"nav-item\">\n    <a class=\"nav-link\" href=\"#\">Welcome <span class=\"navbar-text\"\n                                               th:text=\"${#authentication.getPrincipal().getName()}\"> </span></a>\n</li>\n```", "```java\nSecurityContext context = SecurityContextHolder.getContext();\nAuthentication authentication = context.getAuthentication();\nCalendarUser user = (CalendarUser) authentication.getPrincipal();\nString firstAndLastName = user.getName();\n```", "```java\n//src/main/java/com/packtpub/springsecurity/authentication/ CalendarUserAuthenticationProvider.java\n@Component\npublic class CalendarUserAuthenticationProvider implements AuthenticationProvider {\n    private final CalendarService calendarService;\n    public CalendarUserAuthenticationProvider(final CalendarService calendarService) {\n       if (calendarService == null) {\n          throw new IllegalArgumentException(\"calendarService cannot be null\");\n       }\n       this.calendarService = calendarService;\n    }\n    @Override\n    public Authentication authenticate(final Authentication authentication) throws AuthenticationException {\n       UsernamePasswordAuthenticationToken token = (UsernamePasswordAuthenticationToken) authentication;\n       String email = token.getName();\n       CalendarUser user = email == null ? null : calendarService.findUserByEmail(email);\n       if (user == null) {\n          throw new UsernameNotFoundException(\"Invalid username/password\");\n       }\n       String password = user.getPassword();\n       if (!password.equals(token.getCredentials())) {\n          throw new BadCredentialsException(\"Invalid username/password\");\n       }\n       Collection<? extends GrantedAuthority> authorities = CalendarUserAuthorityUtils.createAuthorities(user);\n       return new UsernamePasswordAuthenticationToken(user, password, authorities);\n    }\n    @Override\n    public boolean supports(final Class<?> authentication) {\n       return UsernamePasswordAuthenticationToken.class.equals(authentication);\n    }\n}\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/ SecurityConfig.java\n    @EnableWebSecurity\n    public class SecurityConfig {\n        private final CalendarUserAuthenticationProvider cuap;\n        public SecurityConfig(CalendarUserAuthenticationProvider cuap) {\n           this.cuap = cuap;\n        }\n        @Bean\n        public AuthenticationManager authManager(HttpSecurity http) throws Exception {\n           AuthenticationManagerBuilder authenticationManagerBuilder =\n                 http.getSharedObject(AuthenticationManagerBuilder.class);\n           authenticationManagerBuilder.authenticationProvider(cuap);\n           return authenticationManagerBuilder.build();\n        }\n    ...\n    }\n    ```", "```java\n    @Configuration\n    @EnableWebSecurity\n    public class SecurityConfig {\n        @Bean\n        public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n    ...\n        }\n    // We removed the PasswordEncoder\n    }\n    ```", "```java\n//src/main/java/com/packtpub/springsecurity/authentication/ DomainUsernamePasswordAuthenticationToken.java\npublic final class DomainUsernamePasswordAuthenticationToken extends\n       UsernamePasswordAuthenticationToken {\n    private final String domain;\n    // used for attempting authentication\n    public DomainUsernamePasswordAuthenticationToken(String\n          principal, String credentials, String domain) {\n       super(principal, credentials);\n       this.domain = domain;\n    }\n    // used for returning to Spring Security after being\n    //authenticated\n    public DomainUsernamePasswordAuthenticationToken(CalendarUser\n          principal, String credentials, String domain,\n          Collection<? extends GrantedAuthority> authorities) {\n       super(principal, credentials, authorities);\n       this.domain = domain;\n    }\n    public String getDomain() {\n       return domain;\n    }\n}\n```", "```java\n    @Component\n    public class CalendarUserAuthenticationProvider implements AuthenticationProvider {\n        private static final Logger logger = LoggerFactory\n              .getLogger(CalendarUserAuthenticationProvider.class);\n        private final CalendarService calendarService;\n        @Autowired\n        public CalendarUserAuthenticationProvider(CalendarService calendarService) {\n           if (calendarService == null) {\n              throw new IllegalArgumentException(\"calendarService cannot be null\");\n           }\n           this.calendarService = calendarService;\n        }\n        @Override\n        public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n           DomainUsernamePasswordAuthenticationToken token = (DomainUsernamePasswordAuthenticationToken) authentication;\n           String userName = token.getName();\n           String domain = token.getDomain();\n           String email = userName + \"@\" + domain;\n           CalendarUser user = calendarService.findUserByEmail(email);\n           logger.info(\"calendarUser: {}\", user);\n           if (user == null) {\n              throw new UsernameNotFoundException(\"Invalid username/password\");\n           }\n           String password = user.getPassword();\n           if (!password.equals(token.getCredentials())) {\n              throw new BadCredentialsException(\"Invalid username/password\");\n           }\n           Collection<? extends GrantedAuthority> authorities = CalendarUserAuthorityUtils.createAuthorities(user);\n           logger.info(\"authorities: {}\", authorities);\n           return new DomainUsernamePasswordAuthenticationToken(user, password, domain, authorities);\n        }\n        @Override\n        public boolean supports(Class<?> authentication) {\n           return DomainUsernamePasswordAuthenticationToken.class.equals(authentication);\n        }\n    }\n    ```", "```java\n//src/main/resources/templates/login.xhtml\n<div class=\"mb-3\">\n<label class=\"form-label\" for=\"username\">Username</label>\n<input autofocus=\"autofocus\" class=\"form-control\" id=\"username\"\n       name=\"username\"\n       type=\"text\"/>\n</div>\n<div class=\"mb-3\">\n<label class=\"form-label\" for=\"password\">Password</label>\n<input class=\"form-control\" id=\"password\" name=\"password\"\n       type=\"password\"/>\n</div>\n<div class=\"mb-3\">\n<label class=\"form-label\" for=\"domain\">Domain</label>\n<input class=\"form-control\" id=\"domain\" name=\"domain\" type=\"text\"/>\n</div>\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/web/authentication/ DomainUsernamePasswordAuthenticationFilter.java\n    public final class DomainUsernamePasswordAuthenticationFilter extends UsernamePasswordAuthenticationFilter {\n        public DomainUsernamePasswordAuthenticationFilter(final AuthenticationManager authenticationManager) {\n           super.setAuthenticationManager(authenticationManager);\n        }\n        public Authentication attemptAuthentication\n              (HttpServletRequest request, HttpServletResponse response) throws\n              AuthenticationException {\n           if (!request.getMethod().equals(\"POST\")) {\n              throw new AuthenticationServiceException\n                    (\"Authentication method not supported: \"\n                          + request.getMethod());\n           }\n           String username = obtainUsername(request);\n           String password = obtainPassword(request);\n           String domain = request.getParameter(\"domain\");\n           DomainUsernamePasswordAuthenticationToken authRequest\n                 = new DomainUsernamePasswordAuthenticationToken(username,\n                 password, domain);\n           setDetails(request, authRequest);\n           return this.getAuthenticationManager()\n                 .authenticate(authRequest);\n        }\n    }\n    ```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/ SecurityConfig.java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n    private final CalendarUserAuthenticationProvider cuap;\n    public SecurityConfig(CalendarUserAuthenticationProvider cuap) {\n       this.cuap = cuap;\n    }\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http, AuthenticationManager authManager) throws Exception {\n       http.authorizeRequests((authz) -> authz\n                   .requestMatchers(antMatcher(\"/webjars/**\")).permitAll()\n                   .requestMatchers(antMatcher(\"/css/**\")).permitAll()\n                   .requestMatchers(antMatcher(\"/favicon.ico\")).permitAll()\n                   // H2 console:\n                   .requestMatchers(antMatcher(\"/admin/h2/**\")).permitAll()\n                   .requestMatchers(antMatcher(\"/\")).permitAll()\n                   .requestMatchers(antMatcher(\"/login/*\")).permitAll()\n                   .requestMatchers(antMatcher(\"/logout\")).permitAll()\n                   .requestMatchers(antMatcher(\"/signup/*\")).permitAll()\n                   .requestMatchers(antMatcher(\"/errors/**\")).permitAll()\n                   .requestMatchers(antMatcher(\"/admin/*\")).hasRole(\"ADMIN\")\n                   .requestMatchers(antMatcher(\"/events/\")).hasRole(\"ADMIN\")\n                   .requestMatchers(antMatcher(\"/**\")).hasRole(\"USER\"))\n             .exceptionHandling(exceptions -> exceptions\n                   .accessDeniedPage(\"/errors/403\")\n                   .authenticationEntryPoint(new LoginUrlAuthenticationEntryPoint(\"/login/form\")))\n             .logout(form -> form\n                   .logoutUrl(\"/logout\")\n                   .logoutSuccessUrl(\"/login/form?logout\")\n                   .permitAll())\n             // CSRF is enabled by default, with Java Config\n             .csrf(AbstractHttpConfigurer::disable)\n             // Add custom DomainUsernamePasswordAuthenticationFilter\n             .addFilterAt(domainUsernamePasswordAuthenticationFilter(authManager), UsernamePasswordAuthenticationFilter.class);\n       http.securityContext((securityContext) -> securityContext.requireExplicitSave(false));\n       http.headers(headers -> headers.frameOptions(FrameOptionsConfig::disable));\n       return http.build();\n    }\n    @Bean\n    public DomainUsernamePasswordAuthenticationFilter domainUsernamePasswordAuthenticationFilter(AuthenticationManager authManager) {\n       DomainUsernamePasswordAuthenticationFilter dupaf = new\n             DomainUsernamePasswordAuthenticationFilter(authManager);\n       dupaf.setFilterProcessesUrl(\"/login\");\n       dupaf.setUsernameParameter(\"username\");\n       dupaf.setPasswordParameter(\"password\");\n       dupaf.setAuthenticationSuccessHandler(new SavedRequestAwareAuthenticationSuccessHandler() {{\n          setDefaultTargetUrl(\"/default\");\n       }});\n       dupaf.setAuthenticationFailureHandler(new SimpleUrlAuthenticationFailureHandler() {{\n          setDefaultFailureUrl(\"/login/form?error\");\n       }});\n       dupaf.afterPropertiesSet();\n       return dupaf;\n    }\n    @Bean\n    public AuthenticationManager authManager(HttpSecurity http) throws Exception {\n       AuthenticationManagerBuilder authenticationManagerBuilder =\n             http.getSharedObject(AuthenticationManagerBuilder.class);\n       authenticationManagerBuilder.authenticationProvider(cuap);\n       return authenticationManagerBuilder.build();\n    }\n}\n```", "```java\nchapter03.06-calendar.\n```"]