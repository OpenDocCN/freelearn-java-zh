["```java\n    groovy scriptname.groovy\n    ```", "```java\ndef a = 10\n```", "```java\nInteger b = 10\n```", "```java\nint c = 10\nprintln c.getClass()\n```", "```java\nclass java.lang.Integer\n```", "```java\nString s = 'hello'\n```", "```java\ndef name = \"Gradle\"\nprintln \"$name is an awesome build tool\"\n```", "```java\nGradle is an awesome build tool\n\n```", "```java\ndef number = 4\nprintln \"number is even ? ${number % 2 == 0 }\"\n```", "```java\nnumber is even ? true\n\n```", "```java\ndef multilineString = '''\\\n    Hello\n    World\n'''\nprintln multilineString\n```", "```java\n Hello\n World\n\n```", "```java\ndef r = /(\\d)+/\nprintln r.class\n```", "```java\nclass java.lang.String\n\n```", "```java\n\"(\\\\d)+\"\n```", "```java\ndef pattern = ~/(\\d)+/\nprintln pattern.class\n```", "```java\nclass java.util.regex.Pattern\n\n```", "```java\nif (\"groovy\" ==~ /gr(.*)/)\n  println \"regex support rocks\"\n```", "```java\nregex support rocks\n```", "```java\ndef cl1 = {\n    println \"hello world!\"\n}\n```", "```java\ncl1.call()\n```", "```java\nhello world!\n\n```", "```java\ndef cl2 = { n ->\n    println \"value of param : $n\"\n}\ncl2.call(101)\n```", "```java\nvalue of param : 101\n\n```", "```java\n3.times(cl2)\n```", "```java\nvalue of param : 0\nvalue of param : 1\nvalue of param : 2\n\n```", "```java\n3.times { println it * it }\n```", "```java\n0\n1\n4\n\n```", "```java\ndef aList = []\nprintln aList.getClass()\n```", "```java\nclass java.util.ArrayList\n\n```", "```java\ndef anotherList = ['a','b','c']\n```", "```java\ndef list = [10, 20, 30] + [40, 50]\n```", "```java\nlist  <<  60 \n```", "```java\nlist = list â€“ [20, 30, 40] \nlist  -= [20,30,40]\n```", "```java\nlist.each {println it}\n```", "```java\n10\n50\n60\n\n```", "```java\ndef aSet = [1,2,3] as Set\nprintln aSet.class\n```", "```java\nclass java.util.LinkedHashSet\n\n```", "```java\nTreeSet anotherSet = [1,2,3]\nprintln anotherSet.class\n```", "```java\nclass java.util.TreeSet\n\n```", "```java\naSet << 4\naSet << 3\nprintln aSet\n```", "```java\n[1, 2, 3, 4]\n\n```", "```java\ndef a = [:]\n```", "```java\ndef tool = [version:'2.8', name:'Gradle', platform:'all']\n```", "```java\nprintln tool.name\nprintln tool[\"version\"]\nprintln tool.get(\"platform\")\n```", "```java\ntool.version = \"2.9\"\ntool[\"releaseDate\"] = \"2015-11-17\"\ntool.put(\"platform\", \"ALL\")\n```", "```java\nint sum(int a, int b) {\n  return a + b;\n}\n```", "```java\ndef sum(a, b) {\n  a + b\n}\n```", "```java\nsum(1,2)  \nsum 1, 2  \n```", "```java\ndef divide(number, by=2) {\n    number/by\n}\n\nprintln divide (10, 5)\nprintln divide (10)\n```", "```java\n2\n5\n\n```", "```java\ndef method(Map options) {\n    def a = options.a ?: 10\n    def b = options.b ?: 20\n}\n```", "```java\noptions.a ? options.a : 10\n```", "```java\nmethod([a:10,b:20])\n```", "```java\nmethod(a:10, b:20)\n```", "```java\nmethod b:30, a:40\nmethod b:30\n```", "```java\ndef sumSquares(...numbers) {\n    numbers.collect{ it * it }.sum()\n}\nsumSquares 1, 2, 3\n```", "```java\ndef myMethod (param, cls) {\n    ...\n}\n```", "```java\nmyMethod(1,{ ... })\nmyMethod 2, {... }\nmyMethod(3) {...}\n```", "```java\nclass Person {\n  def name, age\n}\n```", "```java\ndef person = new Person(name:\"John Doe\", age:35)\n```", "```java\nprintln person.age\nperson.age = 36\nprintln person.age\n```", "```java\n35\n36\n\n```", "```java\n  void setAge(age){\n    if (age < 0) \n      throw new IllegalArgumentException(\"age must be a positive number\")\n    else\n      this.age = age\n  }\n```", "```java\ndef speak(){\n  println \"${this.name} speaking\"\n}\n```", "```java\nstatic def now(){\n  new Date().format(\"yyyy-MM-dd HH:mm:ss\")\n}\n```", "```java\napply plugin: 'java'\n```", "```java\napply(plugin: 'java')\n```", "```java\napply([plugin: 'java'])\n```", "```java\nproject.apply([plugin: 'java'])\n```", "```java\ntask myTask << {\n  println \"My task is executed\"\n}\n// The following statement will execute before any task \nprintln \"build script is evaluated\"\n```", "```java\n$ gradle -q myTask\n\n```", "```java\nbuild script is evaluated\nMy task is executed\n\n```", "```java\n$ gradle -q help\n\n```", "```java\n:compileJava UP-TO-DATE\n:processResources UP-TO-DATE\n:classes UP-TO-DATE\n:compileTestJava UP-TO-DATE\n:processTestResources UP-TO-DATE\n:testClasses UP-TO-DATE\n:test UP-TO-DATE\n```", "```java\nproject.apply plugin: 'java'\n\nproject.repositories {\n    mavenCentral()\n}\n\nproject.dependencies {\n    testCompile 'junit:junit:4.11'\n}\n```", "```java\nproject.repositories({...})\nproject.dependencies({...})\n```", "```java\nboolean hasProperty(String propertyName)\n```", "```java\nObject property(String propertyName)\n```", "```java\nvoid setProperty(String name, Object value)\n```", "```java\ndescription = \"a sample project\"\nversion = \"1.0\"\n\ntask printProperties << {\n    println project.version\n    println project.property(\"description\")\n}\n```", "```java\n$ gradle -q printProperties\n1.0\na sample project\n\n```", "```java\next.abc = \"123\"\ntask printExtraProperties << {\n    println project.abc\n    println project.property(\"abc\")\n    println project.ext.abc\n}\n```", "```java\n$ gradle -q printExtraProperties\n123\n123\n123\n\n```", "```java\ntask someTask\n```", "```java\nTask task(String name)\n\nTask task(String name, Closure configureClosure)\n\nTask task(Map<String, ?> args, String name)\n\nTask task(Map<String, ?> args, String name, Closure configureClosure)\n```", "```java\nsomeTask.doLast({\n    println \"this should be printed when the task is run\"\n})\n```", "```java\nsomeTask.doLast({\n    println \"this should ALSO be printed when the task is run\"\n})\n```", "```java\nsomeTask {\n    doLast {\n        println \"third line that should be printed\"\n    }\n}\n```", "```java\nsomeTask << {\n    println \"the action of someTask\"\n}\n```", "```java\n$ gradle compile dist\n\n```", "```java\ntask compile << {\n    println 'compling the source'\n}\n\ntask dist(dependsOn: compile) << {\n    println \"preparing a jar dist\"\n}\n```", "```java\ntask distUsingTemp << {\n  println (\"preapring dist using a temp dir\")\n}\n\ntask cleanup << {\n  println(\"removing tmp dir\")\n}\n\ndistUsingTemp.finalizedBy cleanup\n```", "```java\ncleanup.onlyIf { file(\"/tmp\").exists()}\n```", "```java\n$ gradle build clean\n\n```", "```java\nbuild.mustRunAfter clean\n```", "```java\n10.times { number ->\n  task \"dynamicTask$number\" << {\n    println \"this is dynamic task number # $number \"\n  }\n}\n```", "```java\ndefaultTasks \"myTaskName\", \"myOtherTask\"\n```", "```java\ntask copyDocumentation(type:Copy) {\nfrom file(\"src/docs/html\")\ninto file(\"$buildDir/docs\")\n}\n```", "```java\nclass Print extends DefaultTask {\n  @Input\n  String message = \"Welcome to Gradle\"\n\n  @TaskAction\n  def print() {\n    println \"$message\"\n  }\n}\n\ntask welcome(type: Print)\n\ntask thanks(type: Print) {\n  message = \"Thanks for trying custom tasks\"\n}\n\ntask bye(type: Print)\nbye.message = \"See you again\"\n\nthanks.dependsOn welcome\nthanks.finalizedBy bye\n```", "```java\n$ gradle -q thanks\nWelcome to Gradle\nThanks for trying custom tasks\nSee you again\n\n```"]