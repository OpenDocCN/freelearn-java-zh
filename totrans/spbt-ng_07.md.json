["```java\ncurl -i -X OPTIONS localhost:8080/api/v1 \\\n-H 'Access-Control-Request-Method: GET' \\\n-H 'Access-Control-Request-Headers: Content-Type, Accept' \\\n-H 'Origin: http://localhost:4200\n```", "```java\nHTTP/1.1 204 No Content\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Methods: GET,HEAD,PUT,PATCH,POST,DELETE\nVary: Access-Control-Request-Headers\nAccess-Control-Allow-Headers: Content-Type, Accept\nContent-Length: 0\nDate: Sun, 16 Nov 2022 3:41:08 GMT+8\nConnection: keep-alive\n```", "```java\nGET /content/test-data/ HTTP/1.1\nHost: example.host\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language: en-us,en;q=0.5\nAccept-Encoding: gzip,deflate\nConnection: keep-alive\nOrigin: https://frontend.com\n```", "```java\nOPTIONS /content/test-data/ HTTP/1.1\nHost: example.host\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language: en-us,en;q=0.5\nAccept-Encoding: gzip,deflate\nConnection: keep-alive\nOrigin: https://frontend.com\nAccess-Control-Request-Method: POST\nAccess-Control-Request-Headers: X-PINGOTHER, Content-Type\n```", "```java\nHTTP/1.1 204 No Content\nDate: Sun, 16 Nov 2022 3:41:08 GMT+8\nServer: Apache/2\nAccess-Control-Allow-Origin: https://frontend.com\nAccess-Control-Allow-Methods: POST, GET, OPTIONS\nAccess-Control-Allow-Headers: X-PINGOTHER, Content-Type\nAccess-Control-Max-Age: 86400\nVary: Accept-Encoding, Origin\nKeep-Alive: timeout=2, max=100\nConnection: Keep-Alive\n```", "```java\n@CrossOrigin\n@GetMapping\npublic List<AntiHeroDto> getAntiHeroes(Pageable pageable) {\n  ..code implementation\n}\n```", "```java\n@CrossOrigin(origin = \"origin.example\")\n@GetMapping\npublic List<AntiHeroDto> getAntiHeroes(Pageable pageable) {\n  ..code implementation\n}\n```", "```java\n@CrossOrigin\n@AllArgsConstructor\n@RestController\n@RequestMapping(\"api/v1/anti-heroes\")\npublic class AntiHeroController {\n.. methods\n}\n```", "```java\n@CrossOrigin(allowedHeaders = \"Content-type\")\n@AllArgsConstructor\n@RestController\n@RequestMapping(\"api/v1/anti-heroes\")\npublic class AntiHeroController {\n    private final AntiHeroService service;\n    private final ModelMapper mapper;\n    @CrossOrigin(origins = \"http://localhost:4200\")\n    @GetMapping\n    public List<AntiHeroDto> getAntiHeroes(Pageable   pageable) {\n… code implementation\n     }\n```", "```java\n    @Configuration\n    ```", "```java\n    public class CorsConfig {\n    ```", "```java\n    }\n    ```", "```java\n    @Bean\n    ```", "```java\n    CorsFilter corsFilter() {\n    ```", "```java\n    CorsConfiguration corsConfiguration =\n    ```", "```java\n      new CorsConfiguration();\n    ```", "```java\n    }\n    ```", "```java\n        corsConfiguration.setAllowCredentials(true);\n        ```", "```java\n        corsConfiguration.setAllowedOrigins(Arrays.asList(\"http://localhost:4200\"));\n        ```", "```java\n        corsConfiguration.setAllowedHeaders(\n        ```", "```java\n                Arrays.asList(\n        ```", "```java\n                        \"Origin\",\n        ```", "```java\n                        \"Access-Control-Allow-Origin\",\n        ```", "```java\n                        \"Content-Type\",\n        ```", "```java\n                        \"Accept\",\n        ```", "```java\n                        \"Authorization\",\n        ```", "```java\n                        \"Origin, Accept\",\n        ```", "```java\n                        \"X-Requested-With\",\n        ```", "```java\n                        \"Access-Control-Request-Method\",\n        ```", "```java\n                        \"Access-Control-Request-Headers\"\n        ```", "```java\n                )\n        ```", "```java\n        );\n        ```", "```java\n        corsConfiguration.setExposedHeaders(\n        ```", "```java\n                Arrays.asList(\n        ```", "```java\n                        \"Origin\",\n        ```", "```java\n                        \"Content-Type\",\n        ```", "```java\n                        \"Accept\",\n        ```", "```java\n                        \"Authorization\",\n        ```", "```java\n                        \"Access-Control-Allow-Origin\",\n        ```", "```java\n                        \"Access-Control-Allow-Origin\",\n        ```", "```java\n                        \"Access-Control-Allow-Credentials\"\n        ```", "```java\n                )\n        ```", "```java\n        );\n        ```", "```java\n        corsConfiguration.setAllowedMethods(\n        ```", "```java\n                Arrays.asList(\"GET\", \"POST\", \"PUT\", \"DELETE\",\n        ```", "```java\n                              \"OPTIONS\")\n        ```", "```java\n        );\n        ```", "```java\n    var urlBasedCorsConfigurationSource =\n    ```", "```java\n      new UrlBasedCorsConfigurationSource();\n    ```", "```java\n    urlBasedCorsConfigurationSource.registerCorsConfiguration(\n    ```", "```java\n            \"/**\",\n    ```", "```java\n            corsConfiguration\n    ```", "```java\n    );\n    ```", "```java\n    return new CorsFilter(urlBasedCorsConfigurationSource);\n    ```", "```java\n    @Bean\n    ```", "```java\n    CorsFilter corsFilter() {\n    ```", "```java\n        CorsConfiguration corsConfiguration =\n    ```", "```java\n          new CorsConfiguration();\n    ```", "```java\n        corsConfiguration.setAllowCredentials(true);\n    ```", "```java\n        corsConfiguration.setAllowedOrigins(\n    ```", "```java\n          Arrays.asList(\"http://localhost:4200\"));\n    ```", "```java\n        corsConfiguration.setAllowedHeaders(\n    ```", "```java\n          Arrays.asList(\"Origin\",\n    ```", "```java\n            \"Access-Control-Allow-Origin\",\n    ```", "```java\n            \"Content-Type\",\"Accept\",\"Authorization\",\n    ```", "```java\n            \"Origin, Accept\",\"X-Requested-With\",\n    ```", "```java\n            \"Access-Control-Request-Method\",\n    ```", "```java\n            \"Access-Control-Request-Headers\"));\n    ```", "```java\n        corsConfiguration.setExposedHeaders(\n    ```", "```java\n          Arrays.asList( \"Origin\",\"Content-Type\",\n    ```", "```java\n          \"Accept\",\"Authorization\",\n    ```", "```java\n          \"Access-Control-Allow-Origin\",\n    ```", "```java\n          \"Access-Control-Allow-Origin\",\n    ```", "```java\n          \"Access-Control-Allow-Credentials\"));\n    ```", "```java\n        corsConfiguration.setAllowedMethods(\n    ```", "```java\n           Arrays.asList(\"GET\", \"POST\", \"PUT\", \"DELETE\",\n    ```", "```java\n                         \"OPTIONS\")\n    ```", "```java\n        );\n    ```", "```java\n        var urlBasedCorsConfigurationSource =\n    ```", "```java\n          new UrlBasedCorsConfigurationSource();\n    ```", "```java\n        urlBasedCorsConfigurationSource\n    ```", "```java\n          .registerCorsConfiguration(\n    ```", "```java\n                \"/**\",\n    ```", "```java\n                corsConfiguration\n    ```", "```java\n        );\n    ```", "```java\n        return new CorsFilter(\n    ```", "```java\n          urlBasedCorsConfigurationSource);\n    ```", "```java\n    }\n    ```", "```java\n<dependency>\n   <groupId>org.springframework.boot</groupId>\n   <artifactId>spring-boot-starter-security</artifactId>\n</dependency>\n```", "```java\nspring.security.user.name=admin\nspring.security.user.password=test\n```", "```java\n@Override\nprotected void configure(AuthenticationManagerBuilder auth) throws Exception {\n    //We will place the customized userdetailsservice here in the following steps\n}\n@Bean(name = BeanIds.AUTHENTICATION_MANAGER)\n@Override\npublic AuthenticationManager authenticationManagerBean() throws Exception {\n    return super.authenticationManagerBean();\n}\n```", "```java\n@Override\nprotected void configure(HttpSecurity http) throws Exception {\n    http\n        // first chain\n        .csrf()\n        .disable()\n        // second chain\n        .antMatcher(\"/**\")\n        .authorizeRequests()\n        // third chain\n        .antMatchers(\"/**\")\n        .permitAll()\n        // fourth chain\n        .and()\n        .sessionManagement()\n        .sessionCreationPolicy(\n          SessionCreationPolicy.STATELESS);\n}\n```", "```java\n@AllArgsConstructor\n@Configuration\n@EnableGlobalMethodSecurity(prePostEnabled = true)\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n     // removed some code for brevety\n    @Override\n    protected void configure(HttpSecurity http) throws\n      Exception {\n        http\n                // first chain\n                .csrf()\n                .disable()\n                // second chain\n                .antMatcher(\"/**\")\n                .authorizeRequests()\n                // third chain\n                .antMatchers(\"/**\")\n                .permitAll()\n                // fourth chain\n                .and()\n                .sessionManagement()\n                .sessionCreationPolicy(\n                  SessionCreationPolicy.STATELESS);\n    }\n}\n```", "```java\n@Entity\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class UserEntity {\n  @Id\n  @GeneratedValue(strategy = GenerationType.AUTO,\n                  generator = \"UUID\")\n  @Column(nullable = false, updatable = false)\n  private UUID id;\n  @Column(unique = true)\n  private String email;\n  private String mobileNumber;\n  private byte[] storedHash;\n  private byte[] storedSalt;\n  public UserEntity(String email, String mobileNumber) {\n    this.email = email;\n    this.mobileNumber = mobileNumber;\n  }\n}\n```", "```java\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class UserDto {\n  private UUID id;\n  private String email;\n  private String mobileNumber;\n  private String password;\n}\n```", "```java\n@Repository\npublic interface UserRepository extends JpaRepository<UserEntity, UUID> {\n  @Query(\n    \"\" +\n    \"SELECT CASE WHEN COUNT(u) > 0 THEN \" +\n    \"TRUE ELSE FALSE END \" +\n    \"FROM UserEntity u \" +\n    \"WHERE u.email = ?1\"\n  )\n  Boolean selectExistsEmail(String email);\n  UserEntity findByEmail(String email);\n}\n```", "```java\nprivate UserDto convertToDto(UserEntity entity) {\n  return mapper.map(entity, UserDto.class);\n}\nprivate UserEntity convertToEntity(UserDto dto) {\n  return mapper.map(dto, UserEntity.class);\n}\n```", "```java\n    public List<UserDto> findAllUsers() {\n    ```", "```java\n      var userEntityList =\n    ```", "```java\n        new ArrayList<>(repo.findAll());\n    ```", "```java\n      return userEntityList\n    ```", "```java\n        .stream()\n    ```", "```java\n        .map(this::convertToDto)\n    ```", "```java\n        .collect(Collectors.toList());\n    ```", "```java\n    }\n    ```", "```java\n    public UserDto findUserById(final UUID id) {\n    ```", "```java\n      var user = repo\n    ```", "```java\n        .findById(id)\n    ```", "```java\n        .orElseThrow(\n    ```", "```java\n          () -> new NotFoundException(\"User by id \" + id +\n    ```", "```java\n                                      \" was not found\")\n    ```", "```java\n        );\n    ```", "```java\n      return convertToDto(user);\n    ```", "```java\n    }\n    ```", "```java\nprivate byte[] createSalt() {\n  var random = new SecureRandom();\n  var salt = new byte[128];\n  random.nextBytes(salt);\n  return salt;\n}\n```", "```java\nprivate byte[] createPasswordHash(String password, byte[] salt)\n  throws NoSuchAlgorithmException {\n  var md = MessageDigest.getInstance(\"SHA-512\");\n  md.update(salt);\n  return md.digest(\n    password.getBytes(StandardCharsets.UTF_8));\n}\n```", "```java\npublic UserDto createUser(UserDto userDto, String password)\n  throws NoSuchAlgorithmException {\n  var user = convertToEntity(userDto);\n  if (password.isBlank()) throw new\n    IllegalArgumentException(\n    \"Password is required.\"\n  );\n  var existsEmail =\n    repo.selectExistsEmail(user.getEmail());\n  if (existsEmail) throw new   BadRequestException(\n    \"Email \" + user.getEmail() + \" taken\"\n  );\n  byte[] salt = createSalt();\n  byte[] hashedPassword =\n    createPasswordHash(password, salt);\n  user.setStoredSalt(salt);\n  user.setStoredHash(hashedPassword);\n  repo.save(user);\n  return convertToDto(user);\n}\n```", "```java\npublic void updateUser(UUID id, UserDto userDto, String password)\n  throws NoSuchAlgorithmException {\n  var user = findOrThrow(id);\n  var userParam = convertToEntity(userDto);\n  user.setEmail(userParam.getEmail());\n  user.setMobileNumber(userParam.getMobileNumber());\n  if (!password.isBlank()) {\n    byte[] salt = createSalt();\n    byte[] hashedPassword =\n      createPasswordHash(password, salt);\n    user.setStoredSalt(salt);\n    user.setStoredHash(hashedPassword);\n  }\n  repo.save(user);\n}\npublic void removeUserById(UUID id) {\n  findOrThrow(id);\n  repo.deleteById(id);\n}\nprivate UserEntity findOrThrow(final UUID id) {\n  return repo\n    .findById(id)\n    .orElseThrow(\n      () -> new NotFoundException(\"User by id \" + id +\n                                  \" was not found\")\n    );\n}\n```", "```java\n@AllArgsConstructor\n@RestController\npublic class UserController {\n  private final UserService userService;\n  @GetMapping(\"/api/v1/users\")\n  public Iterable<UserDto> getUsers() {\n    return userService.findAllUsers();\n  }\n  @GetMapping(\"/api/v1/users/{id}\")\n  public UserDto getUserById(@PathVariable(\"id\") UUID id) {\n    return userService.findUserById(id);\n  }\n  @DeleteMapping(\"/api/v1/users/{id}\")\n  @ResponseStatus(HttpStatus.NO_CONTENT)\n  public void deleteUserById(@PathVariable(\"id\") UUID id) {\n    userService.removeUserById(id);\n  }\n  @PostMapping(\"/register\")\n  @ResponseStatus(HttpStatus.CREATED)\n  public UserDto postUser(@Valid @RequestBody UserDto\n                          userDto)\n    throws NoSuchAlgorithmException {\n    return userService.createUser(userDto,\n                                  userDto.getPassword());\n  }\n  @PutMapping(\"/api/v1/users/{id}\")\n  public void putUser(\n    @PathVariable(\"id\") UUID id,\n    @Valid @RequestBody UserDto userDto\n  ) throws NoSuchAlgorithmException {\n    userService.updateUser(id, userDto,\n                           userDto.getPassword());\n  }\n```", "```java\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIi wibmFtZSI6IlNlaWppIFZpbGxhZnJhbmNhIiwiaWF0IjoxNTE2MjM5MDIyfQ.uhmdFM4ROwnerVam-zdYojURqrgL7WQRBRj-P8kVv6s\n```", "```java\n// Decoded header\n{\n  \"alg\": \"HS256\",\n  \"typ\": \"JWT\"\n}\n// Decoded Payload\n{\n  \"sub\": \"1234567890\",\n  \"name\": \"Seiji Villafranca\",\n  \"iat\": 1516239022\n}\n// Signature\nHMACSHA256(\n  base64UrlEncode(header) + \".\" +\n  base64UrlEncode(payload),\n  secret-key\n)\n```", "```java\n<dependency>\n   <groupId>io.jsonwebtoken</groupId>\n   <artifactId>jjwt-impl</artifactId>\n   <version>0.11.2</version>\n</dependency>\n<dependency>\n   <groupId>io.jsonwebtoken</groupId>\n   <artifactId>jjwt-jackson</artifactId>\n   <version>0.11.2</version>\n</dependency>\n```", "```java\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class AuthenticationRequest implements Serializable {\n  private String email;\n  private String password;\n}\n```", "```java\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class AuthenticationResponse implements Serializable {\n  private String token;\n}\n```", "```java\n@AllArgsConstructor\npublic class UserPrincipal implements UserDetails {\n  private final UserEntity userEntity;\n  @Override\n  public Collection<? extends GrantedAuthority>\n    getAuthorities() {\n    return null;\n  }\n  @Override\n  public String getPassword() {\n    return null;\n  }\n  @Override\n  public String getUsername() {\n    return this.userEntity.getEmail();\n  }\n  // Code removed for brevity. Please refer using the\n  // GitHub repo.\n  @Override\n  public boolean isEnabled() {\n    return false;\n  }\n}\n```", "```java\nprivate String createToken(Map<String, Object> claims, String subject) {\n  Keys.\n  return Jwts\n    .builder()\n    .setClaims(claims)\n    .setSubject(subject)\n    .setIssuedAt(new Date(System.currentTimeMillis()))\n    .setExpiration(new Date(System.currentTimeMillis() +\n                            1000 * 60 * 60 * 10))\n          .signWith(SignatureAlgorithm.HS256, SECRET_KEY)\n    .compact();\n}\npublic String generateToken(UserDetails userDetails) {\n  Map<String, Object> claims = new HashMap<>();\n  return createToken(claims, userDetails.getUsername());\n}\n```", "```java\npublic <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {\n  final Claims claims = extractAllClaims(token);\n  return claimsResolver.apply(claims);\n}\nprivate Claims extractAllClaims(String token) {\n  return Jwts\n    .parserBuilder()\n    .setSigningKey(SECRET_KEY)\n     .build()\n    .parseClaimsJws(token)\n    .getBody();\n}\n```", "```java\npublic Date extractExpiration(String token) {\n  return extractClaim(token, Claims::getExpiration);\n}\nprivate Boolean isTokenExpired(String token) {\n  return extractExpiration(token).before(new Date());\n}\npublic String extractUsername(String token) {\n  return extractClaim(token, Claims::getSubject);\n}\n```", "```java\npublic Boolean validateToken(String token,\n                             UserDetails userDetails) {\n  final String username = extractUsername(token);\n  return (\n    username.equals(userDetails.getUsername()) &&\n      !isTokenExpired(token)\n  );\n}\n```", "```java\n@Override\npublic UserDetails loadUserByUsername(String email)\n  throws UsernameNotFoundException {\n  return new UserPrincipal(\n    userService.searchByEmail(email));\n}\n```", "```java\nprivate Boolean verifyPasswordHash(\n  String password,\n  byte[] storedHash,\n  byte[] storedSalt\n) throws NoSuchAlgorithmException {\n  // Code removed for brevety. Please refer to the GitHub\n  // repo\n  for (int i = 0; i < computedHash.length; i++) {\n    if (computedHash[i] != storedHash[i]) return false;\n  }\n  // The above for loop is the same as below\n  return MessageDigest.isEqual(computedHash, storedHash);\n}\n```", "```java\npublic UserEntity authenticate(String email, String password)\n  throws NoSuchAlgorithmException {\n  if (\n    email.isEmpty() || password.isEmpty()\n  ) throw new BadCredentialsException(\"Unauthorized\");\n  var userEntity = userService.searchByEmail(email);\n  if (userEntity == null) throw new\n      BadCredentialsException(\"Unauthorized\");\n  var verified = verifyPasswordHash(\n    password,\n    userEntity.getStoredHash(),\n    userEntity.getStoredSalt()\n  );\n  if (!verified) throw new\n      BadCredentialsException(\"Unauthorized\");\n  return userEntity;\n}\n```", "```java\n@RestController\n@AllArgsConstructor\nclass AuthenticateController {\n  private final AuthenticationManager\n    authenticationManager;\n  private final JwtUtil jwtTokenUtil;\n  private final ApplicationUserDetailsService\n    userDetailsService;\n  @RequestMapping(value = \"/authenticate\")\n  @ResponseStatus(HttpStatus.CREATED)\n  public AuthenticationResponse authenticate(\n    @RequestBody AuthenticationRequest req\n  ) throws Exception {\n    UserEntity user;\n    try {\n      user = userDetailsService.authenticate(\n        req.getEmail(), req.getPassword());\n    } catch (BadCredentialsException e) {\n      throw new Exception(\"Incorrect username or password\",\n                           e);\n    }\n```", "```java\n    var userDetails = userDetailsService.loadUserByUsername(user.getEmail());\n    System.out.println(userDetails);\n    var jwt = jwtTokenUtil.generateToken(userDetails);\n    return new AuthenticationResponse(jwt);\n  }\n}\n```", "```java\n@AllArgsConstructor\n@Component\npublic class JwtRequestFilter extends OncePerRequestFilter {\n  private final ApplicationUserDetailsService\n    userDetailsService;\n  private final JwtUtil jwtUtil;\n  @Override\n  protected void doFilterInternal(\n    HttpServletRequest request,\n    HttpServletResponse response,\n    FilterChain chain\n  ) throws ServletException, IOException {\n  }\n}\n```", "```java\n//JWT Extraction\nfinal String authorizationHeader =\n  request.getHeader(\"Authorization\");\n    String username = null;\n    String token = null;\n    if (\n      authorizationHeader != null &&\n        authorizationHeader.startsWith(\"Bearer \")\n    ) {\n      token = authorizationHeader.substring(7);\n      username = jwtUtil.extractUsername(token);\n    }\n```", "```java\n//JWT Extraction section\n// JWT Validation and Creating the new\n// UsernamePasswordAuthenticationToken\nif (\n      username != null &&\n      SecurityContextHolder.getContext()\n        .getAuthentication() == null\n    ) {\n      UserDetails userDetails =\n        this.userDetailsService\n         .loadUserByUsername(username);\n      if (jwtUtil.validateToken(token, userDetails)) {\n        var usernamePasswordAuthenticationToken =\n          new UsernamePasswordAuthenticationToken(\n          userDetails,\n          null,\n          userDetails.getAuthorities()\n        );\n        usernamePasswordAuthenticationToken.setDetails(\n          new WebAuthenticationDetailsSource()\n            .buildDetails(request)\n        );\n        SecurityContextHolder\n          .getContext()\n          .setAuthentication(\n            usernamePasswordAuthenticationToken);\n      }\n    }\n    chain.doFilter(request, response);\n  }\n```", "```java\nprivate final ApplicationUserDetailsService userDetailsService;\n@Override\nprotected void configure(AuthenticationManagerBuilder auth) throws Exception {\n    auth.userDetailsService(userDetailsService);\n}\n```", "```java\nprivate final JwtRequestFilter jwtFilter;\n@Override\nprotected void configure(HttpSecurity http) throws Exception {\n   …. Http security configurations\n   http.addFilterBefore(jwtFilter,\n     UsernamePasswordAuthenticationFilter.class);\n}\n```", "```java\n@PreAuthorize(\"isAuthenticated()\")\npublic class AntiHeroController {\n… methods\n}\n```"]