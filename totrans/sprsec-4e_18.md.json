["```java\n//build.gradle\n//Spring CAS Support\nimplementation \" org.springframework.security:spring-security-cas\"\n```", "```java\n./gradlew build run\n```", "```java\n    $JBCP_JAVA_HOME variable is the JVM used by the JBCP Calendar application.\n    ```", "```java\n    keytool -list -keystore $JBCP_JAVA_HOME/lib/security/cacerts -alias cas-server\n    ```", "```java\n    cas-server, May 6, 2024, trustedCertEntry,\n    chapter18.00-calendar/src/main/resources/keys. If you are asked for the password the keystore password, the default one is *change it*:\n\n    ```", "```java\n\n    ```", "```java\n    keytool -list -keystore $CAS_JAVA_HOME/lib/security/cacerts -alias jbcpcalendar\n    ```", "```java\n    jbcpcalendar, May 6, 2024, PrivateKeyEntry,\n    Certificate fingerprint (SHA-256): 79:0D:62:D7:E7:A1:25:1D:A3:C7:93:F6:03:A8:E4:B8:20:BA:FA:2B:03:9F:5C:E3:5D:6C:61:A5:6F:CD:83:57\n    ```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/CasConfig.java\n@Configuration\npublic class CasConfig {\n    @Value(\"${cas.base.url}\")\n    private String casBaseUrl;\n    @Value(\"${cas.login.url}\")\n    private String casLoginUrl;\n    @Value(\"${service.base.url}\")\n    private String serviceBaseUrl;\n    @Bean\n    public ServiceProperties serviceProperties() {\n       ServiceProperties serviceProperties = new ServiceProperties();\n       serviceProperties.setService(serviceBaseUrl+ \"/login/cas\");\n       return serviceProperties;\n    }\n}\n```", "```java\ncas:\n  base:\n    url: https://localhost:9443/cas\n  login:\n    url: ${cas.base.url}/login\nservice:\n  base:\n    url: https://localhost:8443\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/CasConfig.java\n@Bean\npublic CasAuthenticationEntryPoint casAuthenticationEntryPoint(ServiceProperties serviceProperties) {\n    CasAuthenticationEntryPoint casAuthenticationEntryPoint = new CasAuthenticationEntryPoint();\n    casAuthenticationEntryPoint.setLoginUrl(this.casLoginUrl);\n    casAuthenticationEntryPoint.setServiceProperties(serviceProperties);\n    return casAuthenticationEntryPoint;\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/ SecurityConfig.java\n@Bean\npublic SecurityFilterChain filterChain(HttpSecurity http,\n       CasAuthenticationEntryPoint casAuthenticationEntryPoint) throws Exception {\n...omitted for brevity\n          // Exception Handling\n          http.exceptionHandling(exceptions -> exceptions\n                .authenticationEntryPoint(casAuthenticationEntryPoint)\n                .accessDeniedPage(\"/errors/403\"));\n...\n    return http.build();\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/CasConfig.java\n@Bean\npublic CasAuthenticationFilter casAuthenticationFilter(CasAuthenticationProvider casAuthenticationProvider) {\n    CasAuthenticationFilter filter = new CasAuthenticationFilter();\n    filter.setAuthenticationManager(new ProviderManager(casAuthenticationProvider));\n    return filter;\n}\n@Bean\npublic CasAuthenticationProvider casAuthenticationProvider(UserDetailsService userDetailsService,\n       ServiceProperties serviceProperties, TicketValidator cas30ServiceTicketValidator) {\n    CasAuthenticationProvider provider = new CasAuthenticationProvider();\n    provider.setAuthenticationUserDetailsService(new UserDetailsByNameServiceWrapper<>(userDetailsService));\n    provider.setServiceProperties(serviceProperties);\n    provider.setTicketValidator(cas30ServiceTicketValidator);\n    provider.setKey(\"key\");\n    return provider;\n}\n@Bean\npublic TicketValidator cas30ServiceTicketValidator() {\n    return new Cas30ServiceTicketValidator(this.casBaseUrl);\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/ SecurityConfig.java\npublic SecurityFilterChain filterChain(HttpSecurity http,\n       CasAuthenticationEntryPoint casAuthenticationEntryPoint,\n       CasAuthenticationFilter casAuthenticationFilter) throws Exception {\n...omitted for brevity\n     // CAS Filter\n    http.addFilterAt(casAuthenticationFilter, CasAuthenticationFilter.class);\n     // Exception Handling\n    http.exceptionHandling(exceptions -> exceptions\n                .authenticationEntryPoint(casAuthenticationEntryPoint)\n                .accessDeniedPage(\"/errors/403\"));\n...\n    return http.build();\n}\n```", "```java\n    cas:\n      base:\n        url: https://localhost:9443/cas\n      login:\n        url: ${cas.base.url}/login\n      logout:\n        url: ${cas.base.url}/logout\n    service:\n      base:\n        url: https://localhost:8443\n    ```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/ SecurityConfig.java\n    @Configuration\n    @EnableWebSecurity\n    public class SecurityConfig {\n        @Value(\"${cas.logout.url}\")\n        private String casLogoutUrl;\n        @Bean\n        public SecurityFilterChain filterChain(HttpSecurity http,\n              CasAuthenticationEntryPoint casAuthenticationEntryPoint) throws Exception {\n    ...omitted for brevity\n           // Logout\n           http.logout(form -> form\n                       .logoutUrl(\"/logout\")\n                       .logoutSuccessUrl(casLogoutUrl))\n    ...\n           return http.build();\n        }\n    }\n    ```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/ CasConfig.java\n    @Bean\n    public LogoutFilter logoutFilter() {\n        LogoutFilter logoutFilter = new LogoutFilter(casLogoutUrl, new SecurityContextLogoutHandler());\n        logoutFilter.setFilterProcessesUrl(\"/logout/cas\");\n        return logoutFilter;\n    }\n    ```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/ SecurityConfig.java\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http,\n           CasAuthenticationEntryPoint casAuthenticationEntryPoint,\n           CasAuthenticationFilter casAuthenticationFilter,\n           LogoutFilter logoutFilter) throws Exception {\n    ...omitted for brevity\n          // Logout Filter\n          http\n             .addFilterBefore(new SingleSignOutFilter(), CasAuthenticationFilter.class)\n             .addFilterBefore(logoutFilter, LogoutFilter.class);\n        // Logout\n        http.logout(form -> form\n                    .logoutUrl(\"/logout\")\n                    .logoutSuccessUrl(casLogoutUrl));\n    ...\n        return http.build();\n    }\n    ```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/ CasConfig.java\n    @Bean\n    public ProxyGrantingTicketStorage pgtStorage() {\n        return new ProxyGrantingTicketStorageImpl();\n    }\n    @Scheduled(fixedRate = 300_000)\n    public void proxyGrantingTicketStorageCleaner(){\n        logger.info(\"Running ProxyGrantingTicketStorage#cleanup() at {}\",\n              LocalDateTime.now());\n        pgtStorage().cleanUp();\n    }\n    ```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/ CasConfig.java\n    @Value(\"${service.proxy.callback-url}\")\n    private String calendarServiceProxyCallbackUrl;\n    @Bean\n    public TicketValidator cas30ServiceTicketValidator() {\n        Cas30ProxyTicketValidator tv = new Cas30ProxyTicketValidator(this.casBaseUrl);\n        tv.setProxyCallbackUrl(calendarServiceProxyCallbackUrl);\n        tv.setProxyGrantingTicketStorage(pgtStorage());\n        return tv;\n    }\n    ```", "```java\n    service:\n      base:\n        url: https://localhost:8443\n      proxy:\n        callback-url: ${service.base.url}/callback\n    ```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/ CasConfig.java\n    @Bean\n    public CasAuthenticationFilter casAuthenticationFilter(CasAuthenticationProvider casAuthenticationProvider,\n           ProxyGrantingTicketStorage pgtStorage) {\n        CasAuthenticationFilter filter = new CasAuthenticationFilter();\n        filter.setAuthenticationManager(new ProviderManager(casAuthenticationProvider));\n        filter.setProxyGrantingTicketStorage(pgtStorage);\n        filter.setProxyReceptorUrl(\"/pgtUrl\");\n        return filter;\n    }\n    ```", "```java\n//src/main/java/com/packtpub/springsecurity/web/controllers/ EchoController.java\n@GetMapping(\"/echo\")\n   public String echo()  {\n       final CasAuthenticationToken token = (CasAuthenticationToken) SecurityContextHolder\n               .getContext()\n               .getAuthentication();\n    // The proxyTicket could be cached in session and reused if we wanted to\n       final String proxyTicket = token.getAssertion().getPrincipal().getProxyTicketFor(targetUrl);\n       // Make a remote call using the proxy ticket\n       return restTemplate.getForObject(targetUrl+\"?ticket={pt}\", String.class, proxyTicket);\n   }\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/ CasConfig.java\n    @Bean\n    public ServiceProperties serviceProperties() {\n        ServiceProperties serviceProperties = new ServiceProperties();\n        serviceProperties.setService(serviceBaseUrl+ \"/login/cas\");\n        serviceProperties.setAuthenticateAllArtifacts(true);\n        return serviceProperties;\n    }\n    ```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/ CasConfig.java\n    @Bean\n    public CasAuthenticationFilter casAuthenticationFilter(CasAuthenticationProvider casAuthenticationProvider,\n           ProxyGrantingTicketStorage pgtStorage, ServiceProperties serviceProperties) {\n        CasAuthenticationFilter filter = new CasAuthenticationFilter();\n        filter.setAuthenticationManager(new ProviderManager(casAuthenticationProvider));\n        filter.setProxyGrantingTicketStorage(pgtStorage);\n        filter.setProxyReceptorUrl(\"/pgtUrl\");\n        filter.setServiceProperties(serviceProperties);\n        filter.setAuthenticationDetailsSource(new ServiceAuthenticationDetailsSource(serviceProperties));\n        return filter;\n    }\n    ```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/ CasConfig.java\n    @Bean\n    public TicketValidator cas30ServiceTicketValidator() {\n        Cas30ProxyTicketValidator tv = new Cas30ProxyTicketValidator(this.casBaseUrl);\n        tv.setProxyCallbackUrl(calendarServiceProxyCallbackUrl);\n        tv.setProxyGrantingTicketStorage(pgtStorage());\n        tv.setAcceptAnyProxy(true);\n        return tv;\n    }\n    ```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/ CasConfig.java\n    @Bean\n    public CasAuthenticationProvider casAuthenticationProvider(UserDetailsService userDetailsService,\n           ServiceProperties serviceProperties, TicketValidator cas30ServiceTicketValidator, SpringCacheBasedTicketCache springCacheBasedTicketCache) {\n        CasAuthenticationProvider provider = new CasAuthenticationProvider();\n        provider.setAuthenticationUserDetailsService(new UserDetailsByNameServiceWrapper<>(userDetailsService));\n        provider.setServiceProperties(serviceProperties);\n        provider.setTicketValidator(cas30ServiceTicketValidator);\n        provider.setKey(\"key\");\n        provider.setStatelessTicketCache(springCacheBasedTicketCache);\n        return provider;\n    }\n    @Bean\n    public SpringCacheBasedTicketCache springCacheBasedTicketCache(CacheManager cacheManager) {\n        return new SpringCacheBasedTicketCache(cacheManager.getCache(\"castickets\"));\n    }\n    ```", "```java\n    //CAS LDAP Support\n    implementation \"org.apereo.cas:cas-server-support-ldap\"\n    // Spring Security LDAP\n    implementation(\"org.springframework.security:spring-security-ldap\")\n    implementation(\"org.springframework.security:spring-security-config\")\n    // Embedded LDAP Server\n    implementation(\"com.unboundid:unboundid-ldapsdk\")\n    ```", "```java\n    // Embedded LDAP\n    spring:\n      ldap:\n        embedded:\n          ldif: classpath:/ldif/calendar.ldif\n          baseDn: dc=jbcpcalendar,dc=com\n          port: 33389\n          credential:\n            username: uid=admin,ou=system\n            password: secret\n    // CAS configuration for LDAP\n    cas:\n      authn:\n        ldap[0]:\n          useStartTls: false\n          search-filter: uid={user}\n          type: AUTHENTICATED\n          ldapUrl: ldap://localhost:${spring.ldap.embedded.port}\n          baseDn: ${spring.ldap.embedded.baseDn}\n          bindDn: ${spring.ldap.embedded.credential.username}\n          bindCredential: ${spring.ldap.embedded.credential.password}\n    ```", "```java\n    //src/main/java/org/apereo/cas/config/CasOverlayOverrideConfiguration.java\n    @Lazy(false)\n    @AutoConfiguration\n    public class CasOverlayOverrideConfiguration {\n        private final BaseLdapPathContextSource contextSource;\n        public CasOverlayOverrideConfiguration(BaseLdapPathContextSource contextSource) {\n           this.contextSource = contextSource;\n        }\n    }\n    ```", "```java\n//src/main/resources/application.yml\ncas:\n  service-registry:\n    core:\n      init-from-json: true\n    json:\n      location: classpath:/etc/cas/services\n  authn:\n    ldap[0]:\n      principalAttributeList: sn:lastName,cn:fullName,description:role\n      useStartTls: false\n      search-filter: uid={user}\n      type: AUTHENTICATED\n      ldapUrl: ldap://localhost:${spring.ldap.embedded.port}\n      baseDn: ${spring.ldap.embedded.baseDn}\n      bindDn: ${spring.ldap.embedded.credential.username}\n      bindCredential: ${spring.ldap.embedded.credential.password}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/CasConfig.java\n@Bean\npublic AuthenticationUserDetailsService userDetailsService() {\n    return new GrantedAuthorityFromAssertionAttributesUserDetailsService(new String[] { \"role\" });\n}\n```"]