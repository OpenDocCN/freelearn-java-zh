["```java\n<dependency>\n     <groupId>junit</groupId>\n     <artifactId>junit</artifactId>\n     <version>4.12</version>\n </dependency>\n```", "```java\ndependencies { \n     compile 'junit:junit:4.12'\n}\n```", "```java\n import io.reactivex.Observable;\n import java.util.concurrent.TimeUnit;\n\n public class Launcher {\n\n     public static void main(String[] args) {\n         Observable.interval(1, TimeUnit.SECONDS)\n                 .take(5)\n                 .subscribe(System.out::println);\n\n         sleep(5000);\n     }\n\n     public static void sleep(int millis) {\n         try {\n             Thread.sleep(millis);\n         } catch (InterruptedException e) {\n             e.printStackTrace();\n         }\n     }\n }\n```", "```java\n import io.reactivex.Observable;\n import org.junit.Test;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicInteger;\n import static org.junit.Assert.assertTrue;\n\n public class RxTest {\n\n     @Test\n     public void testBlockingSubscribe() {\n\n         AtomicInteger hitCount = new AtomicInteger();\n\n         Observable<Long> source = Observable.interval(1, TimeUnit.SECONDS)\n                     .take(5);\n\n         source.subscribe(i -> hitCount.incrementAndGet());\n\n         assertTrue(hitCount.get() == 5);\n     }\n }\n```", "```java\n import io.reactivex.Observable;\n import org.junit.Test;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicInteger;\n import static org.junit.Assert.assertTrue;\n\n public class RxTest {\n\n     @Test\n     public void testBlockingSubscribe() {\n\n         AtomicInteger hitCount = new AtomicInteger();\n\n         Observable<Long> source = Observable.interval(1, TimeUnit.SECONDS)\n                     .take(5);\n\n         source.blockingSubscribe(i -> hitCount.incrementAndGet());\n\n         assertTrue(hitCount.get() == 5);\n     }\n }\n```", "```java\n import io.reactivex.Observable;\n import org.junit.Test;\n import static org.junit.Assert.assertTrue;\n\n public class RxTest {\n\n     @Test\n     public void testFirst() {\n         Observable<String> source =\n                 Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Zeta\");\n\n         String firstWithLengthFour = source.filter(s -> s.length() == 4)\n                 .blockingFirst();\n\n         assertTrue(firstWithLengthFour.equals(\"Beta\"));\n     }\n }\n```", "```java\n import io.reactivex.Observable;\n import org.junit.Test;\n import java.util.Arrays;\n import java.util.List;\n import static org.junit.Assert.assertTrue;\n\n public class RxTest {\n\n     @Test\n     public void testSingle() {\n         Observable<String> source =\n                 Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Zeta\");\n\n         List<String> allWithLengthFour = source.filter(s -> s.length() == 4)\n                 .toList()\n                 .blockingGet();\n\n         assertTrue(allWithLengthFour.equals(Arrays.asList(\"Beta\",\"Zeta\")));\n     }\n }\n```", "```java\n import io.reactivex.Observable;\n import org.junit.Test;\n import static org.junit.Assert.assertTrue;\n\n public class RxTest {\n\n     @Test\n     public void testLast() {\n         Observable<String> source =\n                 Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Zeta\");\n\n         String lastWithLengthFour = source.filter(s -> s.length() == 4)\n                 .blockingLast();\n\n         assertTrue(lastWithLengthFour.equals(\"Zeta\"));\n     }\n }\n```", "```java\n import io.reactivex.Observable;\n import org.junit.Test;\n import static org.junit.Assert.assertTrue;\n\n public class RxTest {\n\n     @Test\n     public void testIterable() {\n         Observable<String> source =\n                 Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Zeta\");\n\n         Iterable<String> allWithLengthFive = source.filter(s -> s.length() == 5)\n                 .blockingIterable();\n\n         for (String s: allWithLengthFive) {\n             assertTrue(s.length() == 5);\n         }\n     }\n }\n```", "```java\n import io.reactivex.Observable;\n import org.junit.Test;\n import static org.junit.Assert.assertTrue;\n\n public class RxTest {\n\n     @Test\n     public void testBlockingForEach() {\n         Observable<String> source =\n                 Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Zeta\");\n\n         source.filter(s -> s.length() == 5)\n                 .blockingForEach(s -> assertTrue(s.length() == 5));\n     }\n }\n```", "```java\n import io.reactivex.Observable;\n import org.junit.Test;\n import java.util.concurrent.TimeUnit;\n\n public class RxTest {\n\n     @Test\n     public void testBlockingNext() {\n         Observable<Long> source =\n                 Observable.interval(1, TimeUnit.MICROSECONDS)\n                 .take(1000);\n\n         Iterable<Long> iterable = source.blockingNext();\n\n         for (Long i: iterable) {\n             System.out.println(i);\n         }\n     }\n }\n```", "```java\n0\n6\n9\n11\n17\n23\n26\n\n```", "```java\n import io.reactivex.Observable;\n import org.junit.Test;\n import java.util.concurrent.TimeUnit;\n\n public class RxTest {\n\n     @Test\n     public void testBlockingLatest() {\n         Observable<Long> source =\n                 Observable.interval(1, TimeUnit.MICROSECONDS)\n                 .take(1000);\n\n         Iterable<Long> iterable = source.blockingLatest();\n\n         for (Long i: iterable) {\n             System.out.println(i);\n         }\n     }\n }\n```", "```java\n0\n49\n51\n53\n55\n56\n58\n...\n```", "```java\n import io.reactivex.Observable;\n import org.junit.Test;\n import java.util.concurrent.TimeUnit;\n\n public class RxTest {\n\n     @Test\n     public void testBlockingMostRecent() {\n         Observable<Long> source =\n                 Observable.interval(10, TimeUnit.MILLISECONDS)\n                 .take(5);\n\n         Iterable<Long> iterable = source.blockingMostRecent(-1L);\n\n         for (Long i: iterable) {\n             System.out.println(i);\n         }\n     }\n }\n```", "```java\n-1\n-1\n-1\n...\n0\n0\n0\n...\n1\n1\n1\n...\n```", "```java\n import io.reactivex.Observable;\n import io.reactivex.observers.TestObserver;\n import org.junit.Test;\n import java.util.concurrent.TimeUnit;\n\n public class RxTest {\n\n     @Test\n     public void usingTestObserver() {\n\n         *//An Observable with 5 one-second emissions*\n         Observable<Long> source = Observable.interval(1, TimeUnit.SECONDS)\n                 .take(5);\n\n         *//Declare TestObserver*\n         TestObserver<Long> testObserver = new TestObserver<>();\n\n         *//Assert no subscription has occurred yet*\n         testObserver.assertNotSubscribed();\n\n         *//Subscribe TestObserver to source*\n         source.subscribe(testObserver);\n\n         *//Assert TestObserver is subscribed*\n         testObserver.assertSubscribed();\n\n         *//Block and wait for Observable to terminate*\n         testObserver.awaitTerminalEvent();\n\n         *//Assert TestObserver called onComplete()*\n         testObserver.assertComplete();\n\n         *//Assert there were no errors*\n         testObserver.assertNoErrors();\n\n         *//Assert 5 values were received*\n         testObserver.assertValueCount(5);\n\n         *//Assert the received emissions were 0, 1, 2, 3, 4*\n         testObserver.assertValues(0L, 1L, 2L, 3L, 4L);\n     }\n }\n```", "```java\n import io.reactivex.Observable;\n import io.reactivex.observers.TestObserver;\n import io.reactivex.schedulers.TestScheduler;\n import org.junit.Test;\n\n import java.util.concurrent.TimeUnit;\n\n public class RxTest {\n\n     @Test\n     public void usingTestScheduler() {\n\n         *//Declare TestScheduler*\n         TestScheduler testScheduler = new TestScheduler();\n\n         *//Declare TestObserver*\n         TestObserver<Long> testObserver = new TestObserver<>();\n\n         *//Declare Observable emitting every 1 minute*\n         Observable<Long> minuteTicker =\n                 Observable.interval(1, TimeUnit.MINUTES, testScheduler);\n\n         *//Subscribe to TestObserver*\n         minuteTicker.subscribe(testObserver);\n\n         *//Fast forward by 30 seconds*\n         testScheduler.advanceTimeBy(30, TimeUnit.SECONDS);\n\n         *//Assert no emissions have occurred yet*\n         testObserver.assertValueCount(0);\n\n         *//Fast forward to 70 seconds after subscription*\n         testScheduler.advanceTimeTo(70, TimeUnit.SECONDS);\n\n         *//Assert the first emission has occurred*\n         testObserver.assertValueCount(1);\n\n         *//Fast Forward to 90 minutes after subscription*\n         testScheduler.advanceTimeTo(90, TimeUnit.MINUTES);\n\n         *//Assert 90 emissions have occurred*\n         testObserver.assertValueCount(90);\n     }\n }\n```", "```java\n import io.reactivex.observers.TestObserver;\n import org.junit.Test;\n import io.reactivex.Observable;\n\n public class RxTest {\n\n     @Test\n     public void debugWalkthrough() {\n\n         *//Declare TestObserver*\n         TestObserver<String> testObserver = new TestObserver<>();\n\n         *//Source pushing three strings*\n         Observable<String> items =\n                 Observable.just(\"521934/2342/Foxtrot\",\n                         \"Bravo/12112/78886/Tango\",\n                         \"283242/4542/Whiskey/2348562\");\n\n         *//Split and concatMap() on \"/\"*\n         items.concatMap(s ->\n                 Observable.fromArray(s.split(\"/\"))\n         )\n          *//filter for only alphabetic Strings using regex*\n          .filter(s -> s.matches(\"[A-Z]+\"))\n\n          *//Subscribe the TestObserver*\n          .subscribe(testObserver);\n\n         *//Why are no values being emitted?*\n         System.out.println(testObserver.values());\n\n         *//This fails due to no values*\n         testObserver.assertValues(\"Foxtrot\",\"Bravo\",\"Tango\",\"Whiskey\");\n     }\n }\n```", "```java\n[]\n\njava.lang.AssertionError: Value count differs; Expected: 4 [Foxtrot, Bravo, Tango, Whiskey],\n    Actual: 0 [] (latch = 0, values = 0, errors = 0, completions = 1)\n\n    at io.reactivex.observers.BaseTestConsumer.fail(BaseTestConsumer.java:163)\n    at io.reactivex.observers.BaseTestConsumer.assertValues(BaseTestConsumer.java:485)\n    at RxTest.debugWalkthrough(RxTest.java:32)\n...\n```", "```java\n*//Split and concatMap() on \"/\"*\n items.doOnNext(s -> System.out.println(\"Source pushed: \" + s))\n         .concatMap(s ->\n                 Observable.fromArray(s.split(\"/\"))\n         )\n```", "```java\nSource pushed: 521934/2342/Foxtrot\nSource pushed: Bravo/12112/78886/Tango\nSource pushed: 283242/4542/Whiskey/2348562\n[]\n\njava.lang.AssertionError: Value count differs; Expected ...\n```", "```java\n*//Split and concatMap() on \"/\"*\n items.concatMap(s ->\n                 Observable.fromArray(s.split(\"/\"))\n         )\n  .doOnNext(s -> System.out.println(\"concatMap() pushed: \" + s))\n```", "```java\nconcatMap() pushed: 521934\nconcatMap() pushed: 2342\nconcatMap() pushed: Foxtrot\nconcatMap() pushed: Bravo\nconcatMap() pushed: 12112\nconcatMap() pushed: 78886\nconcatMap() pushed: Tango\nconcatMap() pushed: 283242\nconcatMap() pushed: 4542\nconcatMap() pushed: Whiskey\nconcatMap() pushed: 2348562\n[]\n\njava.lang.AssertionError: Value count differs; Expected ...\n```", "```java\n*//filter for only alphabetic Strings using regex*\n .filter(s -> s.matches(\"[A-Z]+\"))\n .doOnNext(s -> System.out.println(\"filter() pushed: \" + s))\n```", "```java\n[]\n\njava.lang.AssertionError: Value count differs; Expected ...\n```", "```java\n*//filter for only alphabetic Strings using regex*\n .filter(s -> s.matches(\"[A-Za-z]+\"))\n .doOnNext(s -> System.out.println(\"filter() pushed: \" + s))\n```", "```java\nfilter() pushed: Foxtrot\nfilter() pushed: Bravo\nfilter() pushed: Tango\nfilter() pushed: Whiskey\n[Foxtrot, Bravo, Tango, Whiskey]\n```", "```java\n import io.reactivex.observers.TestObserver;\n import org.junit.Test;\n import io.reactivex.Observable;\n\n public class RxTest {\n\n     @Test\n     public void debugWalkthrough() {\n\n         *//Declare TestObserver*\n         TestObserver<String> testObserver = new TestObserver<>();\n\n         *//Source pushing three strings*\n         Observable<String> items =\n                 Observable.just(\"521934/2342/Foxtrot\",\n                         \"Bravo/12112/78886/Tango\",\n                         \"283242/4542/Whiskey/2348562\");\n\n         *//Split and concatMap() on \"/\"*\n         items.concatMap(s ->\n                         Observable.fromArray(s.split(\"/\"))\n          )\n          *//filter for only alphabetic Strings using regex*\n          .filter(s -> s.matches(\"[A-Za-z]+\"))\n\n          *//Subscribe the TestObserver*\n          .subscribe(testObserver);\n\n         *//This succeeds*\n         testObserver.assertValues(\"Foxtrot\",\"Bravo\",\"Tango\",\"Whiskey\");\n     }\n }\n```", "```java\n[Foxtrot, Bravo, Tango, Whiskey]\n```"]