["```java\npublic static void main(String[] args) {\n    System.out.println(\"Caching Pattern, initiated vehicle\n        system\");\n    var vehicle = new Vehicle();\n    vehicle.init();\n    var suspension = new SuspensionSystem(\"suspension\");\n    vehicle.addSystem(suspension);\n    System.out.printf(\"Systems types:'%s%n\",\n        vehicle.systemTypes());\n    var suspensionCache =\n        vehicle.getSystemByType(\"suspension\");\n    System.out.printf(\"Is suspension equal? '%s:%s'%n\",\n        suspension.equals(suspensionCache),\n            suspensionCache);\n    vehicle.addSystem(new EngineSystem(\"engine2\"));\n}\n```", "```java\nCaching Pattern, initiated vehicle system\nVehicle, init cache:'break':'BreakSystem@adb0cf77',\n  'engine':'EngineSystem@a0675694'\nSystems types:''break':'BreakSystem@adb0cf77','engine'\n  :'EngineSystem@a0675694','suspension':'Suspension\n    System@369ef459'\nIs suspension equal? 'true:SuspensionSystem@369ef459'\nSystemCache, not stored:EngineSystem@6c828066\n```", "```java\nclass SystemCache {\n    private final VehicleSystem[] systems;\n    private int end;\n...\n    boolean addSystem(VehicleSystem system) {\n        var availableSystem = getSystem(system.type());\n        if (availableSystem == null && end <\n            systems.length) {\n            systems[end++] = system;\n            return true;\n        }\n        return false;\n    }\n   VehicleSystem getSystem(String type) {…}\n    ...\n}\n```", "```java\n   System.out.println(\"Pattern Chain of Responsibility, vehicle \n      system initialisation\");\n    var engineSystem = new EngineSystem();\n    var driverSystem = new DriverSystem();\n    var transmissionSystem = new TransmissionSystem();\n    driverSystem.setNext(transmissionSystem);\n    transmissionSystem.setNext(engineSystem);\n    driverSystem.powerOn();\n}\n```", "```java\nPattern Chain of Responsibility, vehicle system initialisation\nDriverSystem: activated\nTransmissionSystem: activated\nEngineSystem, activated\n```", "```java\nsealed abstract class VehicleSystem permits DriverSystem,\n    EngineSystem, TransmissionSystem {\n    ...\n    protected VehicleSystem nextSystem;\n    protected boolean active;\n       ...\n    void setNext(VehicleSystem system){\n        this.nextSystem = system;\n    }\n    void powerOn(){\n        if(!this.active){\n            activate();\n        }\n        if(nextSystem != null){\n            nextSystem.powerOn();\n        }\n    }\n}\n```", "```java\npublic static void main(String[] args) {\n    System.out.println(\"Pattern Command, turn on/off\n        vehicle\");\n    var vehicle = new Vehicle(\"sport-car\");\n    var driver = new Driver();\n    driver.addCommand(new StartCommand(vehicle));\n    driver.addCommand(new StopCommand(vehicle));\n    driver.addCommand(new StartCommand(vehicle));\n    driver.executeCommands(\"start_stop\");\n}\n```", "```java\nPattern Command, turn on/off vehicle\nSTART:Vehicle{type='sport-car', running=true}\nSTOP:Vehicle{type='sport-car', running=false}\nSTART:Vehicle{type='sport-car', running=true}\n```", "```java\nsealed interface VehicleCommand permits StartCommand,\n    StopCommand {\n    void process(String command);\n}\nrecord StartCommand(Vehicle vehicle) implements\n    VehicleCommand {\n    @Override\n    public void process(String command) {\n        if(command.contains(\"start\")){ ... }\n}\n```", "```java\npublic static void main(String[] args) {\n    System.out.println(\"Pattern Interpreter, sensors\n        value\");\n    var stack = new Stack<Expression>();\n    var formula = \"1 - 3 + 100 + 1\";\n    var parsedFormula = formula.split(\" \");\n    var index = 0;\n    while (index < parsedFormula.length ){\n        var text = parsedFormula[index++];\n        if(isOperator(text)){\n            var leftExp = stack.pop();\n            var rightText = parsedFormula[index++];\n            var rightEpx = new IntegerExpression\n                (rightText);\n            var operatorExp = getEvaluationExpression(text,\n                left, right);\n            stack.push(operatorExp);\n        } else {\n            var exp = new IntegerExpression(text);\n            stack.push(exp);\n        }\n    }\n    System.out.println(\"Formula result: \" +\n        stack.pop().interpret());\n}\n```", "```java\nPattern Interpreter, math formula evaluation\nFormula result: 99\n```", "```java\npublic static void main(String[] args) {\n    System.out.println(\"Iterator Pattern, vehicle parts\");\n    var standardVehicle = new StandardVehicle();\n    for(PartsIterator part = standardVehicle.getParts();\n        part.hasNext();){\n        var vehiclePart = part.next();\n        System.out.println(\"VehiclePart name:\" +\n            vehiclePart.name());\n    }\n}\n```", "```java\nIterator Pattern, vehicle parts\nVehiclePart name:engine\nVehiclePart name:breaks\nVehiclePart name:navigation\n```", "```java\ninterface PartsIterator {\n    boolean hasNext();\n    VehiclePart next();\n}\n```", "```java\nsealed interface Vehicle permits StandardVehicle {\n    PartsIterator getParts();\n}\nfinal class StandardVehicle implements Vehicle {\n    private final String[] vehiclePartsNames = {\"engine\",\n        \"breaks\", \"navigation\"};\n    private class VehiclePartsIterator implements\n        PartsIterator {\n        ...\n    }\n    @Override\n    public PartsIterator getParts() {\n        return new VehiclePartsIterator();\n    }\n}\n```", "```java\nrecord Sensor(String name) {\n    void emitMessage(String message) {\n        VehicleProcessor.acceptMessage(name, message);\n    }\n}\npublic static void main(String[] args) {\n    System.out.println(\"Mediator Pattern, vehicle parts\");\n    var engineSensor = new Sensor(\"engine\");\n    var breakSensor = new Sensor(\"break\");\n    engineSensor.emitMessage(\"turn on\");\n    breakSensor.emitMessage(\"init\");\n}\n```", "```java\nMediator Pattern, vehicle parts\nSensor:'engine', delivered message:'turn on'\nSensor:'break', delivered message:'init'\n```", "```java\n public static void main(String[] args) {\n    System.out.println(\"Memento Pattern, air-condition\n        system\");\n    var originator = new AirConditionSystemOriginator();\n    var careTaker = new AirConditionSystemCareTaker();\n    originator.setState(\"low\");\n    var stateLow = originator.saveState(careTaker);\n    originator.setState(\"medium\");\n    var stateMedium = originator.saveState(careTaker);\n    originator.setState(\"high\");\n    var stateHigh = originator.saveState(careTaker);\n    System.out.printf(\"\"\"\n            Current Air-Condition System state:'%s'%n\"\"\",\n                originator.getState());\n    originator.restoreState(careTaker.getMemento(stateLow));\n    System.out.printf(\"\"\"\n            Restored position:'%d', Air-Condition System\n                state:'%s'%n\"\"\", stateLow,\n                    originator.getState());\n}\n```", "```java\nMemento Pattern, air-condition system\nCurrent Air-Condition System state:'high'\nRestored position:'0', Air-Condition System state:'low'\n```", "```java\nfinal class AirConditionSystemCareTaker {\n    private final List<SystemMemento> memory = new\n        ArrayList<>();\n     ...\n    int add(SystemMemento m) {... }\n    SystemMemento getMemento(int i) {... }\n}\n```", "```java\nfinal class AirConditionSystemOriginator {\n    private String state;\n    ...\n    int saveState(AirConditionSystemCareTaker careTaker){\n        return careTaker.add(new SystemMemento(state));\n    }\n    void restoreState(SystemMemento m){\n        state = m.state();\n    }\n}\n```", "```java\npublic static void main(String[] args) {\n    System.out.println(\"Null Object Pattern, vehicle\n        sensor\");\n    var engineSensor = VehicleSensorsProvider\n        .getSenorByType(\"engine\");\n    var transmissionSensor = VehicleSensorsProvider\n        .getSenorByType(\"transmission\");\n    System.out.println(\"Engine Sensor: \" + engineSensor);\n    System.out.println(\"Transmission Sensor: \" +\n        transmissionSensor);\n}\n```", "```java\nNull Object Pattern, vehicle sensor\nEngine Sensor: Sensor{type='engine'}\nTransmission Sensor: Sensor{type='not_available'}\n```", "```java\npublic static void main(String[] args) {\n    System.out.println(\"Observer Pattern, vehicle\n        temperature senors\");\n    var temperatureControlSystem = new VehicleSystem();\n    new CockpitObserver(temperatureControlSystem);\n    new EngineObserver(temperatureControlSystem);\n    temperatureControlSystem.setState(\"low\");\n}\n```", "```java\nObserver Pattern, vehicle temperature senors\nCockpitObserver, temperature:'11'\nEngineObserver, temperature:'4'\n```", "```java\nsealed abstract class SystemObserver permits\n    CockpitObserver, EngineObserver {\n    protected final VehicleSystem system;\n    public SystemObserver(VehicleSystem system) {\n        this.system = system;\n    }\n    abstract void update();\n}\n```", "```java\npublic static void main(String[] args) {\n    System.out.println(\"Pipeline Pattern, vehicle turn on\n        states\");\n    var pipeline = new PipeElement<>(new EngineProcessor())\n            .addProcessor(new BreakProcessor())\n            .addProcessor(new TransmissionProcessor());\n    var systemState = pipeline.process(new\n        SystemElement());\n    System.out.println(systemState.logSummary());\n}\n```", "```java\nPipeline Pattern, vehicle turn on states\nengine-system,break-system,transmission-system\n```", "```java\nclass PipeElement<E extends Element, R extends Element> {\n    private final Processor<E, R> processor;\n   ...\n    <O extends Element> PipeElement<E, O> addProcessor\n        (Processor<R, O> p){\n        return new PipeElement<>(input -> p.process\n            (processor.process(input)));\n    }\n    R process(E inputElement){\n        return processor.process(inputElement);\n    }\n}\n```", "```java\npublic static void main(String[] args) {\n    System.out.println(\"State Pattern, vehicle turn on\n        states\");\n    ...\n    var initState = new InitState();\n    var startState = new StartState();\n    var stopState = new StopState();\n    vehicle.setState(initState);\n    System.out.println(\"Vehicle state2:\" +\n        vehicle.getState());\n    vehicle.setState(startState);\n    System.out.println(\"Vehicle state3:\" +\n        vehicle.getState());\n    vehicle.setState(stopState);\n    System.out.println(\"Vehicle state4:\" +\n        vehicle.getState());\n}\n```", "```java\nState Pattern, vehicle turn on states\nVehicle state2:InitState{vehicle=truck}\nVehicle state3:StartState{vehicle=truck}\nVehicle state4:StopState{vehicle=truck}\n```", "```java\npublic static void main(String[] args) {\n    System.out.println(\"Strategy Pattern, changing\n        transport options\");\n    var driver = new VehicleDriver(new CarStrategy());\n    driver.transport();\n    driver.changeStrategy(new BusStrategy());\n    driver.transport();\n    driver.changeStrategy(new TruckStrategy());\n    driver.transport();\n}\n```", "```java\nStrategy Pattern, changing transport options\nCar, four persons transport\nBus, whole crew transport\nTruck, transporting heavy load\n```", "```java\nclass VehicleDriver {\n    private TransportStrategy strategy;\n    VehicleDriver(TransportStrategy strategy) {\n        this.strategy = strategy;\n    }\n    void changeStrategy(TransportStrategy strategy){\n        this.strategy = strategy;\n    }\n    void transport(){\n        strategy.transport();\n    }\n}\n```", "```java\npublic static void main(String[] args) {\n    System.out.println(\"Template method Pattern, changing\n        transport options\");\n    Arrays.asList(new BreaksSensor(), new EngineSensor())\n            .forEach(VehicleSensor::activate);\n}\n```", "```java\nTemplate method Pattern, changing transport options\nBreaksSensor, initiated\nBreaksSensor, measurement started\nBreaksSensor, data stored\nBreaksSensor, measurement stopped\nEngineSensor, initiated\nEngineSensor, measurement started\nEngineSensor, data stored\nEngineSensor, measurement stopped\n```", "```java\nabstract sealed class VehicleSensor permits BreaksSensor,\n    EngineSensor {\n    abstract void init();\n    abstract void startMeasure();\n    abstract void storeData();\n    abstract void stopMeasure();\n    final void activate(){\n        init();\n        startMeasure();\n        storeData();\n        stopMeasure();\n    }\n}\n```", "```java\npublic static void main(String[] args) {\n    System.out.println(\"Visitor Pattern, check vehicle\n        parts\");\n    var vehicleCheck = new VehicleCheck();\n    vehicleCheck.accept(new VehicleSystemCheckVisitor());\n}\n```", "```java\nVisitor Pattern, check vehicle parts\nBreakCheck, ready\nBreakCheck, ready, double-check, BreaksCheck@23fc625e\nEngineCheck, ready\nEngineCheck, ready, double-check, EngineCheck@3f99bd52\nSuspensionCheck, ready\nSuspensionCheck, ready, double-check,\n    SuspensionCheck@4f023edb\nVehicleCheck, ready\nVehicleCheck, ready, double-check, VehicleCheck@3a71f4dd\n```", "```java\nclass VehicleSystemCheckVisitor implements  CheckVisitor{\n    @Override\n    public void visit(EngineCheck engineCheck) {\n        System.out.println(\"EngineCheck, ready\");\n        visitBySwitch(engineCheck);\n    }\n   private void visitBySwitch(SystemCheck systemCheck){\n        switch (systemCheck){\n        case EngineCheck e -> System.out.println\n            (\"EngineCheck, ready, double-check, \" + e);\n        ...\n        default -> System.out.println(\n           \"VehicleSystemCheckVisitor, not implemented\");\n     }\n   }\n  ....\n}\n```"]