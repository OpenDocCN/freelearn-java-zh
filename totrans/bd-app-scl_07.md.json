["```java\n            Select p.name, r.author, r.comment \n            from Product p, Review r \n            where p.id = r.product_id; \n\n    ```", "```java\n            Select p.name, i.url \n            from Image i, Product p \n            where p.id = i.product_id; \n\n    ```", "```java\n    libraryDependencies ++= Seq( \n      // .... Other dependencies .... \n      \"net.sf.jasperreports\" % \"jasperreports\" % \"6.2.2\"  withSources() \n      ,\"net.sf.jasperreports\" % \"jasperreports-functions\" % \"6.2.2\", \n      \"net.sf.jasperreports\" % \"jasperreports-chart-themes\" % \"6.2.2\" \n    ) \n    resolvers += \"Jasper\" at \n    \"https://jaspersoft.artifactoryonline.com/jaspersoft/repo/\" \n    resolvers += \"JasperSoft\" at \n    \"https://jaspersoft.artifactoryonline.com/jaspersoft/jaspersoft-\n    repo/\" \n    resolvers += \"Jasper3rd\" at \n    \"https://jaspersoft.artifactoryonline.com/jaspersoft/\n    jaspersoft-3rd-party/\" \n    resolvers += \"mondrian-repo-cache\" at \n    \"https://jaspersoft.artifactoryonline.com/jaspersoft/\n    mondrian-repo-cache/\" \n    resolvers += \"spring-mil\" at \"http://repo.spring.io/libs-milestone\" \n    resolvers += \"spring-rel\" at \"http://repo.spring.io/libs-release\" \n    resolvers += \"oss\" at \n    \"https://oss.sonatype.org/content/groups/public/\" \n\n```", "```java\n    package reports \n    object ReportBuilder { \n      private var reportCache:scala.collection.Map[String,Boolean] =  \n      new scala.collection.mutable.HashMap[String,Boolean].empty \n      def generateCompileFileName(jrxml:String): String =  \n      \"/tmp/report_\" + jrxml + \"_.jasper\" \n      def compile(jrxml:String){ \n        if(reportCache.get(jrxml).getOrElse(true)){ \n          JasperCompileManager.compileReportToFile( new  \n          File(\".\").getCanonicalFile +     \"/app/reports/\" + jrxml ,  \n          generateCompileFileName(jrxml)) \n          reportCache += (jrxml -> false) \n        } \n      } \n      def toPdf(jrxml:String):ByteArrayInputStream = { \n        try { \n          val os:OutputStream = new ByteArrayOutputStream() \n          val reportParams:java.util.Map[String,Object] = new  \n          java.util.HashMap() \n          val con:Connection = DriverManager.getConnection \n          (\"jdbc:mysql://localhost/RWS_DB?user=root&password       \n            =&useUnicode=true&useJDBCCompliantTimezoneShift       \n          =true&useLegacyDatetimeCode=false&serverTimezone=UTC\") \n          compile(jrxml) \n          val jrprint:JasperPrint = JasperFillManager.fillReport \n          (generateCompileFileName(jrxml),  reportParams, con) \n            val exporter:JRPdfExporter = new JRPdfExporter() \n          exporter.setExporterInput(new SimpleExporterInput(jrprint)) \n          exporter.setExporterOutput \n          (new SimpleOutputStreamExporterOutput(os)); \n          exporter.exportReport() \n          new ByteArrayInputStream \n          ((os.asInstanceOf[ByteArrayOutputStream]).toByteArray()) \n        }catch { \n          case e:Exception => throw new RuntimeException(e) \n        } \n      } \n    } \n\n```", "```java\n    @Singleton \n    class ProductController @Inject() (val messagesApi:MessagesApi,val \n    service:IProductService) extends Controller with I18nSupport { \n      //... rest of the controller code... \n      def report() = Action { \n        import play.api.libs.concurrent. \n        Execution.Implicits.defaultContext \n        Ok.chunked( Enumerator.fromStream(  \n        ReportBuilder.toPdf(\"Products.jrxml\") ) ) \n        .withHeaders(CONTENT_TYPE -> \"application/octet-stream\") \n        .withHeaders(CONTENT_DISPOSITION -> \"attachment;  \n          filename=report-products.pdf\" \n        ) \n      }\n    }\n```", "```java\n    @Singleton \n    class ReviewController @Inject() \n    (val messagesApi:MessagesApi, \n      val productService:IProductService, \n    val service:IReviewService) \n    extends Controller with I18nSupport { \n      //... rest of the controller code... \n      def report() = Action { \n        import play.api.libs.concurrent.Execution. \n        Implicits.defaultContext \n        Ok.chunked( Enumerator.fromStream(  \n        ReportBuilder.toPdf(\"Reviews.jrxml\") ) ) \n        .withHeaders(CONTENT_TYPE -> \"application/octet-stream\") \n        .withHeaders(CONTENT_DISPOSITION -> \"attachment;  \n        filename=report-reviews.pdf\") \n      } \n    } \n\n```", "```java\n    @Singleton \n    class ImageController @Inject() \n    (val messagesApi:MessagesApi, \n      val productService:IProductService, \n    val service:IImageService) \n    extends Controller with I18nSupport { \n      // ... rest of the controller code ... \n      def report() = Action { \n        import play.api.libs.concurrent.Execution. \n        Implicits.defaultContext \n        Ok.chunked( Enumerator.fromStream(  \n        ReportBuilder.toPdf(\"Images.jrxml\") ) ) \n        .withHeaders(CONTENT_TYPE -> \"application/octet-stream\") \n        .withHeaders(CONTENT_DISPOSITION -> \"attachment;  \n        filename=report-images.pdf\") \n      } \n    } \n\n```", "```java\n    GET     /reports           controllers.HomeController.reports  \n    # \n    # Reports \n    # \n    GET  /product/report       controllers.ProductController.report \n    GET  /review/report        controllers.ReviewController.report \n    GET  /image/report         controllers.ImageController.report \n\n```", "```java\n    @()(implicit flash: Flash) \n    @main(\"Reports\") { \n      <a href=\"/product/report\"><img height=\"42\" width=\"42\"   \n      src=\"img/@routes.Assets.at(\"images/product.png\")\"> Products  \n      Report</a><BR> \n      <a href=\"/review/report\"><img height=\"42\" width=\"42\"  \n      src=\"img/@routes.Assets.at(\"images/review.png\")\"> Reviews Report  \n      </a><BR> \n      <a href=\"/image/report\"><img height=\"42\" width=\"42\"  \n      src=\"img/@routes.Assets.at(\"images/image.png\")\"> Images  \n      Report</a><BR> \n    } \n\n```", "```java\n    @(products:Seq[Product])(implicit flash: Flash) \n    @main(\"Products\") { \n      // ... rest of the ui code ... \n      <p> \n        <a href=\"@routes.ProductController.blank\" class=\"btn btn- \n        success\"> \n        <i class=\"icon-plus icon-white\"></i>Add Product</a>  \n        <a href=\"@routes.ProductController.report\" class=\"btn btn- \n        success\"> \n        <i class=\"icon-plus icon-white\"></i>Products Report</a> \n      </p> \n    } \n\n```", "```java\n    @(reviews:Seq[Review])(implicit flash: Flash) \n    @main(\"Reviews\") { \n      // ... rest of the ui code ... \n      <p> \n        <a href=\"@routes.ReviewController.blank\" class=\"btn btn- \n        success\"><i class=\"icon-plus icon-white\"></i>Add Review</a>  \n        <a href=\"@routes.ReviewController.report\" class=\"btn btn- \n        success\"><i class=\"icon-plus icon-white\"></i>Review Report</a>  \n      </p> \n    } \n\n```", "```java\n    @(images:Seq[Image])(implicit flash:Flash) \n    @main(\"Images\") { \n      // ... rest of the ui template ... \n      <p> \n        <a href=\"@routes.ImageController.blank\" class=\n        \"btn btn-success\"><i class=\"icon-plus icon-white\"></i>Add \n        Image</a>  \n        <a href=\"@routes.ImageController.report\" class=\n        \"btn btn-success\"><i class=\"icon-plus icon-white\"></i>\n        Images Report</a>  \n      </p> \n    } \n\n```"]