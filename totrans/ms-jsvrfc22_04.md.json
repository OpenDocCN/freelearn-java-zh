["```java\nprivate void serializeFacesConfig(Document document,String path) {\n\n  FileOutputStream fileOutputStream = null;\n  OutputFormat outputFormat = new OutputFormat();\n  outputFormat.setIndent(5);\n  outputFormat.setLineWidth(150);\n\n  ...\n  fileOutputStream = new FileOutputStream(path);\n\n  XMLSerializer xmlSerializer = new XMLSerializer();\n  xmlSerializer.setOutputFormat(outputFormat);\n  xmlSerializer.setOutputByteStream((OutputStream)\n                                    fileOutputStream);\n\n  xmlSerializer.serialize(document);\n...\n}\n```", "```java\n<managed-bean>\n  <managed-bean-name>playersBean</managed-bean-name>\n  <managed-bean-class>book.beans.PlayersBean</managed-bean-class>\n  <managed-bean-scope>request</managed-bean-scope>\n...\n</managed-bean>\n```", "```java\n<managed-bean eager=\"true\">\n```", "```java\n<managed-property>\n  <property-name>name</property-name>\n  <value>Nadal</value>\n</managed-property>\n<managed-property>\n  <property-name>surname</property-name>\n  <value>Rafael</value>\n</managed-property>\n```", "```java\n<context-param>\n  <param-name>rafakey</param-name>\n  <param-value>Vamos Rafa!</param-value>\n</context-param>\n```", "```java\nFacesContext.getCurrentInstance().getExternalContext().getInitParameterMap();\nFacesContext.getCurrentInstance().getExternalContext().getInitParameter(*param_name*);\n```", "```java\n<managed-property>\n  <property-name>rafakey</property-name>\n  <value>#{initParam.rafakey}</value>\n</managed-property>\n```", "```java\npublic enum Plays {\n    Left, Right\n    };\n\nprivate Plays play;\n\n//getters and setters\n...\n```", "```java\n<managed-property>\n  <property-name>play</property-name>\n  <value>Left</value>\n</managed-property>\n```", "```java\n<managed-property>\n  <property-name>matchfacts</property-name>\n  <map-entries>\n    <map-entry>\n      <key>Aces</key>\n      <value>12</value>\n    </map-entry>\n    <map-entry>\n      <key>Double Faults</key>\n      <value>2</value>\n    </map-entry>\n    <map-entry>\n      <key>1st Serve</key>\n      <value>70%</value>\n    </map-entry>\n  </map-entries>\n</managed-property>\n```", "```java\n<managed-property>\n  <property-name>titles_2013</property-name>\n  <list-entries>\n    <value-class>java.lang.String</value-class>\n    <value>Sao Paulo</value>\n    <value>Acapulco</value>\n    <value>Barcelona</value>\n    <value>...</value>\n  </list-entries>\n</managed-property>\n```", "```java\n<context-param>\n  <param-name>javax.faces.CONFIG_FILES</param-name>\n  <param-value>/WEB-INF/faces-beans.xml</param-value>\n</context-param>\n```", "```java\npublic class Initializer extends ApplicationConfigurationPopulator {\n\n  @Override\n  public void populateApplicationConfiguration (Document toPopulate) {\n\n    String ns = toPopulate.getDocumentElement().getNamespaceURI();\n\n    Element managedbeanEl = toPopulate.createElementNS(ns, \"managed-bean\");\n\n    Element managedbeannameEl = toPopulate.createElementNS(ns, \"managed-bean-name\");\n    managedbeannameEl.appendChild(toPopulate.createTextNode(\"playersBean\"));\n    managedbeanEl.appendChild(managedbeannameEl);\n\n    Element managedbeanclassEl = toPopulate.createElementNS(ns, \"managed-bean-class\");\n    managedbeanclassEl.appendChild(toPopulate.\n          createTextNode(\"book.beans.PlayersBean\"));\n    managedbeanEl.appendChild(managedbeanclassEl);\n\n    Element managedbeanscopeEl = toPopulate.\n          createElementNS(ns, \"managed-bean-scope\");\n    managedbeanscopeEl.appendChild(toPopulate.\n          createTextNode(\"request\"));\n    managedbeanEl.appendChild(managedbeanscopeEl);\n\n    Element managedproperty0El = toPopulate.\n          createElementNS(ns, \"managed-property\");\n    Element propertyNameEl = toPopulate.\n          createElementNS(ns, \"property-name\");        \n    propertyNameEl.appendChild(toPopulate.createTextNode(\"name\"));\n    Element valueNameEl = toPopulate.createElementNS(ns, \"value\");          \n    valueNameEl.appendChild(toPopulate.createTextNode(\"Nadal\"));\n    managedproperty0El.appendChild(propertyNameEl);\n    managedproperty0El.appendChild(valueNameEl);\n    managedbeanEl.appendChild(managedproperty0El);\n    ...\n    Element managedproperty5El = toPopulate.\n          createElementNS(ns, \"managed-property\");\n    Element propertyMatchfactsEl = toPopulate.\n          createElementNS(ns, \"property-name\");\n    propertyMatchfactsEl.appendChild(toPopulate.\n          createTextNode(\"matchfacts\"));\n    Element mapEntriesEl = toPopulate.\n          createElementNS(ns, \"map-entries\");\n    Element mapEntry0El = toPopulate.\n          createElementNS(ns, \"map-entry\");\n    Element key0El = toPopulate.createElementNS(ns, \"key\");\n    key0El.appendChild(toPopulate.createTextNode(\"Aces\"));\n    Element value0El = toPopulate.createElementNS(ns, \"value\");\n    value0El.appendChild(toPopulate.createTextNode(\"12\"));\n    mapEntry0El.appendChild(key0El);\n    mapEntry0El.appendChild(value0El);\n    ...\n    mapEntriesEl.appendChild(mapEntry0El);\n    mapEntriesEl.appendChild(mapEntry1El);\n    mapEntriesEl.appendChild(mapEntry2El);\n    managedproperty5El.appendChild(propertyMatchfactsEl);\n    managedproperty5El.appendChild(mapEntriesEl);\n    managedbeanEl.appendChild(managedproperty5El);\n\n    Element managedproperty6El = toPopulate.\n          createElementNS(ns, \"managed-property\");\n    Element propertyTitles_2013El = toPopulate.\n          createElementNS(ns, \"property-name\");\n    propertyTitles_2013El.appendChild(toPopulate.\n          createTextNode(\"titles_2013\"));\n    Element listEntriesEl = toPopulate.\n          createElementNS(ns, \"list-entries\");\n    Element valueClassEl = toPopulate.\n          createElementNS(ns, \"value-class\");\n    valueClassEl.appendChild(toPopulate.\n          createTextNode(\"java.lang.String\"));\n    Element value0lEl = toPopulate.createElementNS(ns, \"value\");\n    value0lEl.appendChild(toPopulate.createTextNode(\"Sao Paulo\"));\n    ...\n    listEntriesEl.appendChild(valueClassEl);\n    listEntriesEl.appendChild(value0lEl);\n    listEntriesEl.appendChild(value1lEl);\n    listEntriesEl.appendChild(value2lEl);\n    listEntriesEl.appendChild(value3lEl);\n    listEntriesEl.appendChild(nullValuelEl);\n    managedproperty6El.appendChild(propertyTitles_2013El);\n    managedproperty6El.appendChild(listEntriesEl);\n    managedbeanEl.appendChild(managedproperty6El);\n\n    toPopulate.getDocumentElement().appendChild(managedbeanEl);\n\n    //serializeFacesConfig(toPopulate, \"D://faces-config.xml\");\n  }\n  ...\n}\n```", "```java\n    <name>C</name>\n    <ordering>\n      <before>\n        <others/>\n      </before>\n    </ordering>\n    ```", "```java\n    <name>B</name>\n    ```", "```java\n    <name>A</name>\n    <ordering>\n      <after>\n        <name>B</name>\n      </after>\n    </ordering>\n    ```", "```java\n<absolute-ordering>\n  <others/>\n  <name>C</name>\n  <name>B</name>\n  <name>A</name>\n</absolute-ordering>\n```", "```java\n<f:loadBundle basename=\"players.msgs.PlayerMessages\" var=\"msg\"/>\n```", "```java\n<application>\n  <resource-bundle>\n    <base-name>players.msgs.PlayerMessages</base-name>\n    <var>msg</var>\n  </resource-bundle>\n</application>\n```", "```java\n<f:view locale=\"fr\">\n```", "```java\n<application>\n  <locale-config>\n    <default-locale>en</default-locale> \n    <supported-locale>fr</supported-locale>\n    <supported-locale>en</supported-locale>\n  </locale-config>\n  <resource-bundle>\n    <base-name>players.msgs.PlayerMessages</base-name>\n    <var>msg</var>\n  </resource-bundle>\n</application>\n```", "```java\nUIViewRoot viewRoot = FacesContext.getCurrentInstance().getViewRoot();\nviewRoot.setLocale(new Locale(\"fr\"));\n```", "```java\nHELLO = Hello from Rafael Nadal!\n```", "```java\n#{msg['HELLO']}\n```", "```java\nHELLOPARAM = Hello from {0} {1}!\n```", "```java\n<h:outputFormat value=\"#{msg['HELLOPARAM']}\">\n <f:param value=\"Roger\" />\n <f:param value=\"Federer\" />\n</h:outputFormat>\n```", "```java\nREGISTERED = You have {0} players registered!\n```", "```java\nYou have 1 players registered!\n```", "```java\nREGISTERED = You have {0} {0, choice, 0#players|1#player|2#players} registered!\n```", "```java\n<message-bundle>\n  players.msgs.ErrorsMessages\n</message-bundle>\n```", "```java\n @FacesValidator(value = \"emailValidator\")\n  public class EmailValidator implements Validator {\n\n    @Override\n    public void validate(FacesContext context, UIComponent component, Object value) throws ValidatorException {\n\n      ...\n    }\n  }\n}\n```", "```java\n<validator>\n  <validator-id>emailValidator</validator-id>\n  <validator-class>book.beans.EmailValidator</validator-class>\n</validator>\n```", "```java\n<h:inputText value=\"#{*bean property*}\">\n  <f:validator validatorId=\"emailValidator\"/>\n</h:inputText>\n```", "```java\n<h:inputText value=\"#{*bean property*}\" validator=\"emailValidator\"/>\n```", "```java\n    @Named(value=\"emailValidator\")\n    @RequestScoped\n    public class EmailValidator implements Validator {\n\n      @Override\n      public void validate(FacesContext context, UIComponent component, Object value) throws ValidatorException {\n        ...\n      }\n    }\n    ```", "```java\n    <h:inputText value=\"#{*bean property*}\"\n                 validator=\"#{emailValidator.validate}\" />\n    ```", "```java\njava:app/*app-name*/*bean-name*[! *fully-qualified-interface-name*]\n```", "```java\njava:global/*app-name*/*module-name*/*bean-name*[! *fully-qualified-interface-name*]\n```", "```java\n@FacesValidator\npublic class EmailValidator implements Validator {\n\n  private LoginEJBBean loginEJBBean;\n\n  @Override\n  public void validate(FacesContext context, UIComponent component, Object value) throws ValidatorException {\n\n    try {\n loginEJBBean = (LoginEJBBean) new InitialContext().\n lookup(\"java:app/ch4_3_5/LoginEJBBean\");\n     } catch (NamingException e) {\n       throw new ExceptionInInitializerError(e);\n }\n...\n```", "```java\n@FacesValidator public class EmailValidator implements Validator {\n\n private LoginEJBBean loginEJBBean;\n\n @Override\n public void validate(FacesContext context,\n        UIComponent component, Object value) throws ValidatorException {\n\n try {\n loginEJBBean = (LoginEJBBean) new InitialContext().\n lookup(\"java:global/ch4_3_6/ch4_3_6-ejb/LoginEJBBean\");\n     } catch (NamingException e) {\n       throw new ExceptionInInitializerError(e);\n }\n...\n```", "```java\n@FacesValidator\npublic class EmailValidator implements Validator {\n\n @Inject\n LoginBean loginBean;\n\n @Override\n public void validate(FacesContext context,\n        UIComponent component, Object value) throws ValidatorException {\n...\n```", "```java\n@FacesValidator\npublic class EmailValidator implements Validator {\n\n @EJB\n LoginEJBBean loginEJBBean;\n //@Inject\n //LoginEJBBean loginEJBBean;\n\n @Override\n public void validate(FacesContext context,\n        UIComponent component, Object value) throws ValidatorException {\n...\n```", "```java\n@FacesConverter(value=\"playerConverter\")\npublic class PlayerConverter implements Converter{\n\n @Override\n public Object getAsObject(FacesContext context,\n               UIComponent component, String value) {\n   PlayerName playerName = new\n          PlayerName(value.toLowerCase(), value.toUpperCase());\n\n   return playerName;\n   }\n\n   @Override\n   public String getAsString(FacesContext context,\n          UIComponent component, Object value) {\n\n   PlayerName playerName = (PlayerName)value;\n\n   return \"Mr. \" + playerName.getUppercase();\n   }    \n}\n```", "```java\n<converter>\n <converter-id>playerConverter</converter-id>\n <converter-class>book.beans.PlayerConverter</converter-class>\n</converter>\n```", "```java\n<h:inputText value=\"#{*bean property*}\">\n <f:converter converterId=\"playerConverter\"/>\n</h:inputText>\n```", "```java\n<h:inputText value=\"#{*bean property*}\" converter=\"playerConverter\"/>\n```", "```java\n<h:inputText value=\"#{*bean property*}\"/>\n```", "```java\n@FacesConverter(forClass=PlayerName.class)\n```", "```java\n    @Named(value=\"playerConverter\")\n    @RequestScoped\n    public class PlayerConverter implements Converter{\n\n     @Override\n     public Object getAsObject(FacesContext context,\n            UIComponent component, String value) {\n     ...\n     }\n\n     @Override\n     public String getAsString(FacesContext context,\n            UIComponent component, Object value) {\n     ...\n     }\n    }\n    ```", "```java\n    <h:inputText value=\"#{*bean property*}\" converter=\"#{playerConverter}\"/>\n    ```", "```java\n    @FacesConverter(value = \"playerConverter\")\n    public class PlayerConverter implements Converter {\n\n     private static RandomEJBBean randomEJBBean;\n\n      static {\n          try {\n            randomEJBBean = (RandomEJBBean) new InitialContext().\n             lookup(\"java:global/ch4_6_5/ch4_6_5-ejb/RandomEJBBean\");\n          } catch (NamingException e) {\n            throw new ExceptionInInitializerError(e);\n          }\n    }\n    ...\n    ```", "```java\n    @FacesConverter(value = \"playerConverter\")\n    public class PlayerConverter implements Converter {\n\n        private static RandomEJBBean randomEJBBean;\n\n        static {\n            try {\n                randomEJBBean = (RandomEJBBean) new InitialContext().\n                 lookup(\"java:app/ch4_6_6/RandomEJBBean\");\n            } catch (NamingException e) {\n                throw new ExceptionInInitializerError(e);\n            }\n        }\n    ...\n    ```", "```java\n<h:outputLink value=\"success.xhtml\">Success</h:outputLink>\n<h:link value=\"Success\" outcome=\"success\"/>\n<h:button value=\"Success\" outcome=\"success\"/>\n<h:commandButton value=\"Success\" action=\"success\"/>\n<h:commandLink value=\"Success\" action=\"success\"/>\n```", "```java\n<h:outputLink value=\"#{facesContext.externalContext. applicationContextPath}/next.xhtml\">Next</h:outputLink>\n```", "```java\n<navigation-rule>\n <from-view-id>*</from-view-id>\n <navigation-case>               \n  <from-outcome>success</from-outcome>\n  <to-view-id>/success.xhtml</to-view-id>\n </navigation-case>\n</navigation-rule>\n```", "```java\n<h:commandButton value=\"Success\" action=\"#{playerBean.playerDone()}\"/>\n```", "```java\npublic String playerDone() {\n logger.log(Level.INFO, \"playerDone method called ...\");\n return \"success\";\n}\n```", "```java\n<h:commandButton value=\"Success\" action=\"done\"/>\n```", "```java\n<navigation-rule>\n <from-view-id>/index.xhtml</from-view-id>\n <navigation-case>               \n   <from-outcome>done</from-outcome>\n   <to-view-id>/success.xhtml</to-view-id>\n </navigation-case>\n</navigation-rule>  \n```", "```java\n<navigation-rule>\n <from-view-id>/index.xhtml</from-view-id>\n <navigation-case>\n  <from-action>#{playerBean.playerDone()}</from-action>\n  <from-outcome>done</from-outcome>\n  <to-view-id>/success.xhtml</to-view-id>\n </navigation-case>\n</navigation-rule>\n```", "```java\n<h:commandButton value=\"Success\" action=\"success?faces-redirect=true;\"/>\n```", "```java\n<navigation-rule>\n <from-view-id>/index.xhtml</from-view-id>\n <navigation-case>               \n  <from-outcome>done</from-outcome>\n  <to-view-id>/success.xhtml</to-view-id>\n <redirect/>\n </navigation-case>\n</navigation-rule>\n```", "```java\n<h:commandButton value=\"Login\" action=\"#{playerBean.playerLogin()}\"/>\n```", "```java\nprivate boolean login  = false;\n...\npublic boolean isLogin() {\n return login;\n}   \n\npublic void setLogin(boolean login) {\n this.login = login;\n}    \n\npublic void playerLogin() {\n\n Random random = new Random();\n int r = random.nextInt(10);\n if (r <= 5) {\n  login = false;\n  } else {\n    login = true;\n  }\n }\n```", "```java\n<navigation-rule>\n <from-view-id>/index.xhtml</from-view-id>\n <navigation-case>\n  <from-action>#{playerBean.playerLogin()}</from-action>\n  <if>#{playerBean.login}</if>\n  <to-view-id>/success.xhtml</to-view-id>\n  <redirect/>\n </navigation-case>\n <navigation-case>\n  <from-action>#{playerBean.playerLogin()}</from-action>\n  <if>#{!playerBean.login}</if>\n  <to-view-id>/failed.xhtml</to-view-id>\n  <redirect/>\n </navigation-case>\n</navigation-rule>\n```", "```java\n<navigation-rule>\n <from-view-id>/index.xhtml</from-view-id>\n <navigation-case>\n  <from-action>#{playerBean.playerLogin()}</from-action>  \n  <to-view-id>#{playerBean.navigateHelper()}</to-view-id>\n  <redirect/>\n </navigation-case>\n</navigation-rule>\n```", "```java\npublic String playerLogin() {\n\n Random random = new Random();\n int r = random.nextInt(10);\n login = r > 5;        \n return \"done\";\n}\n```", "```java\npublic String navigateHelper() {\n if (!login) {\n  return \"failed.xhtml\";\n } else {\n  return \"success.xhtml\";\n }\n}\n```", "```java\n<h:link value=\"Success\" outcome=\"success\"/>\n<h:button value=\"Success\" outcome=\"success\"/>\n```", "```java\n<h:link value=\"Done\" outcome=\"done?id=done\"/>\n```", "```java\n<h:commandButton value=\"Success\" action=\"#{playerBean.playerDone()}\"/>\n```", "```java\nprivate String player;\n\n public String getPlayer() {\n  return player;\n }       \n\n public void setPlayer(String player) {\n  this.player = player;\n }        \n\n public String playerDone() {\n  player = \"Rafael Nadal\";\n  return \"done\";\n }\n```", "```java\n<navigation-rule>\n <from-view-id>/index.xhtml</from-view-id>\n <navigation-case>\n  <from-action>#{playerBean.playerDone()}</from-action>\n  <from-outcome>done</from-outcome>\n  <to-view-id>/success.xhtml</to-view-id>\n  <redirect>\n   <view-param>\n    <name>playerparam</name>\n    <value>#{playerBean.player}</value>\n   </view-param>\n  </redirect>\n </navigation-case>\n</navigation-rule>\n```", "```java\n#{param['playerparam']}\n```", "```java\n    FacesContext context = FacesContext.getCurrentInstance();\n    Application application = context.getApplication();\n    NavigationHandler nh = application.getNavigationHandler();\n    ```", "```java\n    nh.handleNavigation(*context,fromAction,outcome*);\n    nh.handleNavigation(*context,fromAction,outcome,toFlowDocumentId*);\n    ```", "```java\n    ConfigurableNavigationHandler cnh = (ConfigurableNavigationHandler) FacesContext.getCurrentInstance().getApplication().getNavigationHandler();\n    ```", "```java\n    cnh.handleNavigation(*context,fromAction,outcome*);\n    cnh.handleNavigation(*context,fromAction,outcome,toFlowDocumentId*);\n    ```", "```java\n    NavigationCase case = cnh.getNavigationCase(*context,fromAction,outcome*);\n    NavigationCase case = cnh.getNavigationCase(*context,fromAction,outcome, toFlowDocumentId*);\n    ```", "```java\n    Map<String, Set<NavigationCase>> cases = cnh.getNavigationCases();\n    ```", "```java\n<h:commandButton value=\"Player Listener 1\"\n                 actionListener=\"#{playerBean.playerListener}\"\n                 action=\"#{playerBean.playerDone()}\"/>\n```", "```java\npublic void playerListener(ActionEvent e) {\n logger.log(Level.INFO, \"playerListener method called ...\");\n}\n\npublic String playerDone() {\n logger.log(Level.INFO, \"playerDone method called ...\");\n return \"done\";\n}\n```", "```java\nINFO:   playerListener method called ...\nINFO:   playerDone method called ...\n```", "```java\n<h:commandButton value=\"Player Listener 2\"\n                 action=\"#{playerBean.playerDone()}\">\n  <f:actionListener type=\"book.beans.PlayerListener\"/>\n</h:commandButton>\n```", "```java\npublic class PlayerListener implements ActionListener {\n\n  private static final Logger logger =\n        Logger.getLogger(PlayerListener.class.getName());\n\n @Override\n public void processAction(ActionEvent event)\n                          throws AbortProcessingException {\n\n  logger.log(Level.INFO, \"Player listener class called ...\");\n }            \n}\n```", "```java\nINFO:   Player listener class called ...\nINFO:   playerDone method called ...\n```", "```java\npublic class PlayerListenerW extends ActionListenerWrapper {\n\n    PlayerListener playerListener = new PlayerListener();\n\n    @Override\n    public ActionListener getWrapped() {\n        return playerListener;\n    }\n}\n```", "```java\n<h:commandButton value=\"Player Listener 3\"\n                 actionListener=\"#{playerBean.playerListener}\"\n                 action=\"#{playerBean.playerDone()}\">\n <f:actionListener type=\"book.beans.PlayerListener\"/>\n</h:commandButton>\n```", "```java\nINFO:   playerListener method called ...\nINFO:   Player listener class called ...\nINFO:   playerDone method called ...\n```", "```java\npublic class ApplicationPlayerListener implements ActionListener {\n\n private static final Logger logger =\n         Logger.getLogger(PlayerListener.class.getName());\n private ActionListener actionListener;\n\n public ApplicationPlayerListener() {      \n }\n\n public ApplicationPlayerListener(ActionListener actionListener) {\n  this.actionListener = actionListener;\n }\n\n @Override\n public void processAction(ActionEvent event)\n                    throws AbortProcessingException {\n\n  logger.log(Level.INFO, \"Application player listener class called ...\");  \n  actionListener.processAction(event);\n }            \n}\n```", "```java\n<h:commandButton value=\"Player Listener 4\"\n                 action=\"#{playerBean.playerDone()}\" />   \n```", "```java\nINFO:   Application player listener class called ...\nINFO:   playerDone method called ...\n```", "```java\npublic class ApplicationPlayerListenerW extends ActionListenerWrapper {\n\n private ActionListener actionListener;\n private static final Logger logger =\n         Logger.getLogger(ApplicationPlayerListenerW.class.getName());\n\n  public ApplicationPlayerListenerW(){}\n\n  public ApplicationPlayerListenerW(ActionListener actionListener){\n   this.actionListener = actionListener;\n  }\n\n  @Override\n  public void processAction(ActionEvent event)\n         throws AbortProcessingException {\n  logger.log(Level.INFO, \"Application player listener\n                                 (wrapper) class called ...\");\n  getWrapped().processAction(event);\n }\n\n @Override\n public ActionListener getWrapped() {        \n  return this.actionListener;\n }\n}\n```", "```java\n<application>\n <action-listener>book.beans.ApplicationPlayerListener</action-listener>\n</application>\n```", "```java\n@Named\n@RequestScoped\npublic class DemoBean {\n\n    private String demo = \"TEST INJECTION VALUE ...\";\n\n    public String getDemo() {\n        return demo;\n    }\n\n    public void setDemo(String demo) {\n        this.demo = demo;\n    }\n}\n```", "```java\npublic class ApplicationPlayerListener implements ActionListener {\n\n  @Inject\n  private DemoBean demoBean;\n...\n```", "```java\n<h:body>        \n <h:form id=\"registerForm\">            \n <f:event listener=\"#{playersBean.validateAccount}\" \n type=\"postValidate\" />\n  ...\n  <h:inputText id=\"bankAccountId\" value=\"#{playersBean.bank}\" \n               required=\"true\" />\n  <h:message for=\"bankAccountId\" style=\"color: red;\" />              \n  <h:inputText id=\"confirmBankAccountId\" \n               value=\"#{playersBean.cbank}\" required=\"true\" />\n  <h:message for=\"confirmBankAccountId\" style=\"color: red;\" />\n  <h:commandButton action=\"done\" value=\"Send\" />\n </h:form>\n</h:body>\n```", "```java\npublic void validateAccount(ComponentSystemEvent event) {\n\n UIComponent uis = event.getComponent();\n\n //obtain bank account\n String bankAccount = null;\n UIInput uiBankAccount = (UIInput) \n        uis.findComponent(\"bankAccountId\");\n Object bankAccountObj = uiBankAccount.getLocalValue();\n if (bankAccountObj != null) {\n     bankAccount = String.valueOf(bankAccountObj).trim();\n }\n\n //obtain bank account confirmation\n String bankAccountC = null;\n UIInput uiBankAccountC = (UIInput) \n         uis.findComponent(\"confirmBankAccountId\");\n Object bankAccountCObj = uiBankAccountC.getLocalValue();\n if (bankAccountCObj != null) {\n     bankAccountC = String.valueOf(bankAccountCObj).trim();\n }\n\n if ((bankAccount != null) && (bankAccountC != null)) {\n      if (!bankAccount.equals(bankAccountC)) {\n          FacesContext facesContext =  \n               FacesContext.getCurrentInstance();\n          FacesMessage facesMessage = new FacesMessage(\"Bank \n               account must match bank account confirmation !\");\n\n          facesMessage.setSeverity(FacesMessage.SEVERITY_ERROR);\n\n          facesContext.addMessage(uiBankAccount.getClientId(),  \n               facesMessage);\n          facesContext.renderResponse();\n      }\n }\n}\n```", "```java\npublic class ResourcesListener implements SystemEventListener {\n\n @Override\n public void processEvent(SystemEvent event)\n             throws AbortProcessingException {\n\n  FacesContext context = FacesContext.getCurrentInstance();\n\n  int i = context.getViewRoot().\n          getComponentResources(context, \"HEAD\").size() - 1;\n\n  while (i >= 0) {\n   UIComponent resource = context.getViewRoot().\n               getComponentResources(context, \"HEAD\").get(i);\n\n   String resourceLibrary = (String)\n               resource.getAttributes().get(\"library\");\n   String resourceName = (String) resource.getAttributes().get(\"name\");\n\n   if ((resourceLibrary.equals(\"default\")) &&\n               (resourceName.equals(\"css/roger.css\"))) {\n    context.getViewRoot().removeComponentResource\n                                  (context, resource, \"HEAD\");\n   }\n  i--;\n  }\n }\n\n @Override\n public boolean isListenerForSource(Object source) {\n  return (source instanceof UIViewRoot);\n }\n}\n```", "```java\n<system-event-listener>\n <system-event-listener-class>\n  book.beans.ResourcesListener\n </system-event-listener-class>\n <system-event-class>\n  javax.faces.event.PreRenderViewEvent\n </system-event-class>\n <source-class>\n  javax.faces.component.UIViewRoot\n </source-class>\n</system-event-listener>\n```", "```java\n<h:head>\n <h:outputStylesheet library=\"default\" name=\"css/rafa.css\"/>\n <h:outputStylesheet library=\"default\" name=\"css/roger.css\"/>\n</h:head>\n```", "```java\n<head>\n <title></title>\n <link type=\"text/css\" rel=\"stylesheet\"\n      href=\"/ch4_9_1/faces/javax.faces.resource/css/rafa.css?ln=default\">\n</head>\n```", "```java\n.ui-invalid {\n    background-color:red\n}\n...\n<h:inputText value=\"#{...}\" required=\"true\" styleClass=\"#{not component.valid ? 'ui-invalid' : ''}\" />\n```", "```java\npublic class InputValidationListener implements SystemEventListener {\n\n @Override\n public void processEvent(SystemEvent event)\n             throws AbortProcessingException {\n\n  UIInput inputSource = (UIInput) event.getSource();\n\n  if(!inputSource.isValid()) {\n     inputSource.getAttributes().put(\"styleClass\", \"ui-invalid\");\n  }\n }\n\n @Override\n public boolean isListenerForSource(Object source) {\n  return (source instanceof UIInput);\n }    \n}\n```", "```java\n<system-event-listener>\n <system-event-listener-class>\n  book.beans.InputValidationListener\n </system-event-listener-class>\n <system-event-class>\n  javax.faces.event.PostValidateEvent\n </system-event-class>\n <source-class>\n  javax.faces.component.html.HtmlInputText\n </source-class>\n</system-event-listener>\n```", "```java\npublic class Initializer extends \n       ApplicationConfigurationPopulator {\n\n @Override\n public void populateApplicationConfiguration\n       (Document toPopulate) {\n\n  String ns = toPopulate.getDocumentElement().getNamespaceURI();\n\n  Element applicationEl = toPopulate.\n          createElementNS(ns, \"application\");\n  Element systemeventlistenerEl = toPopulate.\n          createElementNS(ns, \"system-event-listener\");\n  Element systemeventlistenerclassEl = \n          toPopulate.createElementNS(ns,\n          \"system-event-listener-class\");\n  systemeventlistenerclassEl.appendChild\n          (toPopulate.createTextNode\n          (\"book.beans.InputValidationListener\"));\n  Element systemeventclassEl = toPopulate.\n          createElementNS(ns, \"system-event-class\");\n  systemeventclassEl.appendChild(toPopulate.\n          createTextNode(\"javax.faces.event.PostValidateEvent\"));\n  Element sourceclassEl = toPopulate.\n          createElementNS(ns, \"source-class\");\n  sourceclassEl.appendChild(toPopulate.createTextNode\n          (\"javax.faces.component.html.HtmlInputText\"));\n\n  systemeventlistenerEl.appendChild(systemeventlistenerclassEl);\n  systemeventlistenerEl.appendChild(systemeventclassEl);\n  systemeventlistenerEl.appendChild(sourceclassEl);\n  applicationEl.appendChild(systemeventlistenerEl);\n  toPopulate.getDocumentElement().appendChild(applicationEl);\n\n  //serializeFacesConfig(toPopulate, \"D://faces-config.xml\");\n }\n ...\n}\n```", "```java\n@Inject\nStyleResourcesBean styleResourcesBean;    \n@Inject\nStyleResourcesEJBBean styleResourcesEJBBean;\n@EJB\nStyleResourcesEJBBean styleResourcesEJBBean;\n```", "```java\npublic class FlashListener implements SystemEventListener {\n\n private final static Logger LOGGER =\n        Logger.getLogger(FlashListener.class.getName());\n\n @Override\n public void processEvent(SystemEvent event)\n        throws AbortProcessingException {\n\n if (event.getSource() instanceof String) {\n  LOGGER.log(Level.INFO, \"The following parameter was added\n                     in flash scope: {0}\", event.getSource());\n } else if (event.getSource() instanceof Map) {\n   LOGGER.info(\"Preparing to clear flash scope ...\");\n   LOGGER.info(\"Current content:\");\n   Iterator iterator = ((Map) event.getSource()).entrySet().iterator();\n   while (iterator.hasNext()) {\n         Map.Entry mapEntry = (Map.Entry) iterator.next();\n         LOGGER.log(Level.INFO, \"{0}={1}\", new\n                 Object[]{mapEntry.getKey(), mapEntry.getValue()});\n   }\n  }\n }\n\n @Override\n public boolean isListenerForSource(Object source) {\n  return ((source instanceof String) || (source instanceof Map));\n }\n}\n```", "```java\n<system-event-listener>\n <system-event-listener-class>\n  book.beans.FlashListener\n </system-event-listener-class>\n <system-event-class>\n  javax.faces.event.PostKeepFlashValueEvent\n </system-event-class>\n</system-event-listener>\n<system-event-listener>\n <system-event-listener-class>\n  book.beans.FlashListener\n </system-event-listener-class>\n <system-event-class>\n  javax.faces.event.PreClearFlashEvent  \n </system-event-class>\n</system-event-listener>\n```", "```java\npublic class DebugPhaseListener implements PhaseListener {\n\n    public DebugPhaseListener() {\n    }\n\n    @Override\n    public void afterPhase(PhaseEvent event) {\n        System.out.println(\"After Phase: \" + event.getPhaseId());\n    }\n\n    @Override\n    public void beforePhase(PhaseEvent event) {\n        System.out.println(\"Before Phase:\" + event.getPhaseId());\n    }\n\n    @Override\n    public PhaseId getPhaseId() {\n        return PhaseId.ANY_PHASE;\n    }\n}\n```", "```java\n<lifecycle>\n <phase-listener>book.beans.DebugPhaseListener</phase-listener>\n</lifecycle>\n```", "```java\npublic class Initializer extends \n       ApplicationConfigurationPopulator {\n\n @Override\n public void populateApplicationConfiguration\n       (Document toPopulate) {\n\n String ns = toPopulate.getDocumentElement().getNamespaceURI();\n\n Element lifecycleEl = toPopulate.createElementNS(ns, \"lifecycle\");\n Element phaselistenerEl = toPopulate.\n         createElementNS(ns, \"phase-listener\");\n phaselistenerEl.appendChild(toPopulate.\n         createTextNode(\"book.beans.DebugPhaseListener\"));\n lifecycleEl.appendChild(phaselistenerEl);\n toPopulate.getDocumentElement().appendChild(lifecycleEl);\n\n serializeFacesConfig(toPopulate, \"D://faces-config.xml\");\n }\n ...\n}\n```", "```java\npublic class PlayerPhaseListener implements PhaseListener {\n\n @Override\n public void afterPhase(PhaseEvent event) {\n }\n\n @Override\n public void beforePhase(PhaseEvent event) {\n  processComponents(event.getFacesContext().getViewRoot());\n }\n\n @Override\n public PhaseId getPhaseId() {\n  return PhaseId.RENDER_RESPONSE;\n }\n\n private void processComponents(UIComponent root) {\n  for (UIComponent child : root.getChildren()) {\n      if (child.getId().equals(\"playerId\")) {\n         HtmlInputText inputText = (HtmlInputText) child;\n         String value = (String) inputText.getValue();\n\n         if (value != null) {\n            if (value.equalsIgnoreCase(\"rafa\")) {\n                inputText.setStyleClass(\"rafa-style\");\n            } else if (value.equalsIgnoreCase(\"roger\")) {\n                       inputText.setStyleClass(\"roger-style\");\n            }\n         }\n      }\n  processComponents(child);\n  }\n }\n}\n```", "```java\n@Inject\nStyleResourcesBean styleResourcesBean;    \n@Inject\nStyleResourcesEJBBean styleResourcesEJBBean;\n@EJB\nStyleResourcesEJBBean styleResourcesEJBBean;\n```", "```java\npublic class MsgPhaseListener implements PhaseListener {\n\n private static final Logger logger = \n  Logger.getLogger(MsgPhaseListener.class.getName());    \n\n @Override\n public void afterPhase(PhaseEvent event) {}\n\n @Override\n public void beforePhase(PhaseEvent event) {\n  FacesContext facesContext = event.getFacesContext();\n  Iterator<String> ids = facesContext.getClientIdsWithMessages();\n\n  while (ids.hasNext()) {\n    String id = ids.next();\n    Iterator<FacesMessage> messages = facesContext.getMessages(id);\n    while (messages.hasNext()) {\n           FacesMessage message = messages.next();\n           logger.log(Level.INFO, \"User ID:{0} Message: {1}\"\n                    , new Object[]{id, message.getSummary()});\n           if(id == null){\n              message.setSummary(message.getSummary() + \n                            \"alerted by a phase listener!\");\n           }\n    }\n  }\n }\n\n @Override\n public PhaseId getPhaseId() {\n  return PhaseId.RENDER_RESPONSE;\n }     \n}\n```", "```java\n@ListenerFor(systemEventClass = PostAddToViewEvent.class, sourceClass = javax.faces.component.UIInput.class)\npublic class PlayerRenderer extends TextRenderer\n             implements ComponentSystemEventListener {\n\n @Override\n public void processEvent(ComponentSystemEvent event)\n              throws AbortProcessingException {\n\n  UIInput inputSource = (UIInput) event.getComponent();\n  inputSource.getAttributes().put(\"styleClass\", \"rafa-style\");\n }\n}\n```", "```java\n@ListenersFor({\n  @ListenerFor(systemEventClass=PostAddToViewEvent.class,\n              sourceClass = javax.faces.component.UIInput.class),\n @ListenerFor(systemEventClass=PostValidateEvent.class,\n              sourceClass = javax.faces.component.UIInput.class)\n})\npublic class PlayerRenderer extends TextRenderer\n       implements ComponentSystemEventListener {\n\n@Override\n public void processEvent(ComponentSystemEvent event)\n                          throws AbortProcessingException {\n\n  UIInput inputSource = (UIInput) event.getComponent();\n  inputSource.getAttributes().put(\"styleClass\", \"rafa-style\");\n\n  if(!inputSource.isValid()){\n     inputSource.getAttributes().put(\"styleClass\", \"ui-invalid\");\n    }\n  }\n}\n```"]