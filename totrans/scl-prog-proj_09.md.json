["```java\njsDependencies ++= Seq(\n        ...,\n  \"org.webjars\" % \"notifyjs\" % \"0.4.2\" / \"notify.js\")\n```", "```java\nGET /v1/cart/events controllers.WebSockets.cartEventWS \n```", "```java\n@Singleton\nclass WebSockets @Inject()(\n  implicit actorSystem: ActorSystem,\n  materializer: Materializer,\n  cc: ControllerComponents) extends AbstractController(cc) {\n\n  def cartEventWS = WebSocket.accept[String, String] { \n    implicit request \n  =>\n        ActorFlow.actorRef { out =>\n        // handle upstream\n      }\n    }\n  }\n}\n```", "```java\nval managerActor = actorSystem.actorOf(\n  BrowserManagerActor.props(),\n  \"manager-actor\")\n```", "```java\nobject BrowserManagerActor {\n  def props() = Props(new BrowserManagerActor())\n\n  case class AddBrowser(browser: ActorRef)\n}\n```", "```java\nprivate class BrowserManagerActor() extends Actor with ActorLogging {\n\n  val browsers: ListBuffer[ActorRef] = ListBuffer.empty[ActorRef]\n\n  def receive: Receive = {\n\n    case AddBrowser(b) =>\n      context.watch(b)\n      browsers +=b\n      log.info(\"websocket {} added\", b.path)\n\n    case CartEvent(user, product, action) =>\n      val messageText = s\"The user '$user' ${action.toString} \n      ${product.name}\"\n      log.info(\"Sending alarm to all the browser with '{}' action: {}\",\n               messageText,\n               action)\n      browsers.foreach(_ ! Alarm(messageText, action).asJson.noSpaces)\n\n    case Terminated(b) =>\n      browsers -= b\n      log.info(\"websocket {} removed\", b.path)\n  }\n}\n```", "```java\ndef cartEventWS = WebSocket.accept[String, String] { implicit request =>\n      ActorFlow.actorRef{out =>\n        Logger.info(s\"Got a new websocket connection from \n        ${request.host}\")\n        managerActor ! BrowserManagerActor.AddBrowser(out)\n        BrowserActor.props(managerActor)\n      }\n    }\n```", "```java\nobject BrowserActor {\n  def props(browserManager :ActorRef) = \n      Props(new BrowserActor(browserManager))\n}\n```", "```java\nclass BrowserActor(browserManager: ActorRef) extends Actor with ActorLogging {\n  def receive = {\n    case msg: String =>\n      log.info(\"Received JSON message: {}\", msg)\n      decode[CartEvent](msg) match {\n        case Right(cartEvent) =>\n          log.info(\"Got {} message\", cartEvent)\n          browserManager forward cartEvent\n        case Left(error) => log.info(\"Unhandled message : {}\", error)\n      }\n  }\n}\n```", "```java\nval webSocket: WebSocket = getWebSocket\n```", "```java\nprivate def getWebSocket: WebSocket = {\n  val ws = new WebSocket(getWebsocketUri(dom.document, \n  \"v1/cart/events\"))\n\n  ws.onopen = { (event: Event) ⇒\n    println(s\"webSocket.onOpen '${event.`type`}'\")\n    event.preventDefault()\n  }\n\n  ws.onerror = { (event: Event) =>\n    System.err.println(s\"webSocket.onError '${event.getClass}'\")\n  }\n\n  ws.onmessage = { (event: MessageEvent) =>\n    println(s\"[webSocket.onMessage] '${event.data.toString}'...\")\n    val msg = decode[Alarm](event.data.toString)\n    msg match {\n      case Right(alarm) =>\n        println(s\"[webSocket.onMessage]  Got alarm event : $alarm)\")\n        notify(alarm)\n      case Left(e) =>\n        println(s\"[webSocket.onMessage] Got a unknown event : $msg)\")\n    }\n  }\n\n  ws.onclose = { (event: CloseEvent) ⇒\n    println(s\"webSocket.onClose '${event.`type`}'\")\n  }\n  ws\n}\n```", "```java\nprivate def getWebsocketUri(document: Document, context: String): String = {\n  val wsProtocol = \n    if (dom.document.location.protocol == \"https:\") \n      \"wss\"\n    else\n      \"ws\"\n  s\"$wsProtocol://${\n    dom.document.location.host\n  }/$context\"\n}\n```", "```java\n@js.native\n@JSGlobal(\"$\")\nobject NotifyJS extends js.Object {\n  def notify(msg: String, option: Options): String = js.native\n}\n```", "```java\n{\n  // whether to hide the notification on click\n  clickToHide: true,\n  // whether to auto-hide the notification\n  autoHide: true,\n  // if autoHide, hide after milliseconds\n  autoHideDelay: 5000,\n  // show the arrow pointing at the element\n  arrowShow: true,\n  // arrow size in pixels\n  arrowSize: 5,\n  // position defines the notification position though uses the \n  defaults below\n  position: '...',\n  // default positions\n  elementPosition: 'bottom left',\n  globalPosition: 'top right',\n  // default style\n  style: 'bootstrap',\n  // default class (string or [string])\n  className: 'error',\n  // show animation\n  showAnimation: 'slideDown',\n  // show animation duration\n  showDuration: 400,\n  // hide animation\n  hideAnimation: 'slideUp',\n  // hide animation duration\n  hideDuration: 200,\n  // padding between element and notification\n  gap: 2\n}\n```", "```java\n@ScalaJSDefined\ntrait Options extends js.Object {\n  // whether to hide the notification on click\n  var clickToHide: js.UndefOr[Boolean] = js.undefined\n  // whether to auto-hide the notification\n  var autoHide: js.UndefOr[Boolean] = js.undefined\n  // if autoHide, hide after milliseconds\n  var autoHideDelay: js.UndefOr[Int] = js.undefined\n  // show the arrow pointing at the element\n  var arrowShow: js.UndefOr[Boolean] = js.undefined\n  // arrow size in pixels\n  var arrowSize: js.UndefOr[Int] = js.undefined\n  // position defines the notification position \n  // though uses the defaults below\n  var position: js.UndefOr[String] = js.undefined\n  // default positions\n  var elementPosition: js.UndefOr[String] = js.undefined\n  var globalPosition: js.UndefOr[String] = js.undefined\n  // default style\n  var style: js.UndefOr[String] = js.undefined\n  // default class (string or [string])\n  var className: js.UndefOr[String] = js.undefined\n  // show animation\n  var showAnimation: js.UndefOr[String] = js.undefined\n  // show animation duration\n  var showDuration: js.UndefOr[Int] = js.undefined\n  // hide animation\n  var hideAnimation: js.UndefOr[String] = js.undefined\n  // hide animation duration\n  var hideDuration: js.UndefOr[Int] = js.undefined\n  // padding between element and notification\n  var gap: js.UndefOr[Int] = js.undefined\n}\n```", "```java\nprivate def notify(alarm: Alarm): Unit = {\n  val notifyClass = if (alarm.action == Add) \"info\" else \"warn\"\n  NotifyJS.notify(alarm.message, new Options {\n    className = notifyClass\n    globalPosition = \"right bottom\"\n  })\n}\n```"]