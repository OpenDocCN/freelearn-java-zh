["```java\n@Override \npublic void \n  configurePathMatch(PathMatchConfigurer configurer) { \n    configurer.setUseSuffixPatternMatch(false). \n      setUseTrailingSlashMatch(true); \n} \n```", "```java\n@Override \npublic void addResourceHandlers(ResourceHandlerRegistry registry) { \n    registry.addResourceHandler(\"/internal/**\")\n            .addResourceLocations(\"classpath:/\"); \n}\n```", "```java\n@Bean\npublic ServletWebServerFactory servletContainer() {    \n  TomcatServletWebServerFactory tomcat = \n         new TomcatServletWebServerFactory();\n  tomcat.getSession().setTimeout(Duration.ofMinutes(1));\n  return tomcat;\n}\n```", "```java\n@RequestMapping(value = \"/session\", method = \n   RequestMethod.GET) \npublic String getSessionId(HttpServletRequest request) { \n  return request.getSession().getId(); \n} \n```", "```java\nconfigurations { \n  compile.exclude module: \"spring-boot-starter-tomcat\" \n}\n```", "```java\ncompile(\"org.springframework.boot:spring-boot-starter-jetty\")\n```", "```java\n2017-12-16 --- o.eclipse.jetty.server.AbstractConnector \n : Started ServerConnector...\n2017-12-16 ---.o.s.b.web.embedded.jetty.JettyWebServer\n : Jetty started on port(s) 8080 (http/1.1)...\n```", "```java\n/** \n * Nested configuration if Jetty is being used. \n */ \n@Configuration \n@ConditionalOnClass({ Servlet.class, Server.class, Loader.class}) \n@ConditionalOnMissingBean(value = ServletWebServerFactory.class,  \n                           search = SearchStrategy.CURRENT) \npublic static class EmbeddedJetty { \n\n  @Bean \n  public JettyServletWebServerFactory \n       JettyServletWebServerFactory() {\n           return new JettyServletWebServerFactory();\n  } \n\n}\n```", "```java\n    $JAVA_HOME/bin/keytool -genkey -alias tomcat -keyalg RSA\n```", "```java\n    \"%JAVA_HOME%binkeytool\" -genkey -alias tomcat -keyalg RSA  \n```", "```java\ncustom.tomcat.https.port=8443 \ncustom.tomcat.https.secure=true \ncustom.tomcat.https.scheme=https \ncustom.tomcat.https.ssl=true \ncustom.tomcat.https.keystore=${user.home}/.keystore \ncustom.tomcat.https.keystore-password=changeit \n```", "```java\n@ConfigurationProperties(prefix = \"custom.tomcat.https\") \npublic static class TomcatSslConnectorProperties { \n  private Integer port; \n  private Boolean ssl = true; \n  private Boolean secure = true; \n  private String scheme = \"https\"; \n  private File keystore; \n  private String keystorePassword; \n  //Skipping getters and setters to save space, but we do need them \n\n  public void configureConnector(Connector connector) { \n    if (port != null) \n      connector.setPort(port); \n    if (secure != null) \n      connector.setSecure(secure); \n    if (scheme != null) \n      connector.setScheme(scheme); \n    if (ssl!= null) \n      connector.setProperty(\"SSLEnabled\", ssl.toString()); \n    if (keystore!= null &&keystore.exists()) { \n      connector.setProperty(\"keystoreFile\", \n         keystore.getAbsolutePath());      \n      connector.setProperty(\"keystorePassword\", \n         keystorePassword); \n    } \n  } \n}\n```", "```java\n@Configuration \n@PropertySource(\"classpath:/tomcat.https.properties\") \n@EnableConfigurationProperties(WebConfiguration.TomcatSslConnectorProperties.class) \npublic class WebConfiguration extends WebMvcConfigurerAdapter {...}\n```", "```java\n@Bean\npublic ServletWebServerFactory servletContainer\n            (TomcatSslConnectorProperties properties) {\n    TomcatServletWebServerFactory tomcat = \n        new TomcatServletWebServerFactory();\n    tomcat.addAdditionalTomcatConnectors\n        (createSslConnector(properties));\n    tomcat.getSession().setTimeout(Duration.ofMinutes(1));\n    return tomcat;\n}\nprivate Connector createSslConnector\n            (TomcatSslConnectorProperties properties) { \n    Connector connector = new Connector(); \n    properties.configureConnector(connector); \n    return connector; \n} \n```", "```java\n@EnableConfigurationProperties(WebConfiguration.TomcatSslConnectorProperties.class)\n```"]