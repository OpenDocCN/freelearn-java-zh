["```java\n    java -jar h2*.jar\n    ```", "```java\n    CREATE TABLE IF NOT EXISTS customer\n    (\n    CUSTOMER_ID long,\n    USERNAME varchar(255),\n    FIRST_NAME varchar(255),\n    LAST_NAME varchar(255),\n    UNIQUE(USERNAME),\n    PRIMARY KEY (CUSTOMER_ID)\n    );\n    ```", "```java\nCREATE TABLE IF NOT EXISTS customer\n```", "```java\nCUSTOMER_ID long,\nUSERNAME varchar(255),\nFIRST_NAME varchar(255),\nLAST_NAME varchar(255),\n```", "```java\nUNIQUE(USERNAME),\nPRIMARY KEY (USER_ID)\n```", "```java\nINSERT INTO table_name\n(column1, column2, column3, column4)\nVALUES (value1, value2, value3, value4);\n```", "```java\n    INSERT INTO customer\n    (CUSTOMER_ID, USERNAME, FIRST_NAME, LAST_NAME)\n    VALUES (1, 'bobmarley', 'Bob', 'Marley');\n    ```", "```java\n    INSERT INTO customer\n    (CUSTOMER_ID, USERNAME, FIRST_NAME, LAST_NAME)\n    VALUES (2, 'petertosh', 'Peter', 'Tosh');\n    INSERT INTO customer\n    (CUSTOMER_ID, USERNAME, FIRST_NAME, LAST_NAME)\n    VALUES (3, 'jimmy', 'Jimmy', 'Cliff');\n    ```", "```java\nSELECT what_columns_you_want\nFROM table_name\nWHERE criteria_you_want;\n```", "```java\nSELECT * from customer;\n```", "```java\nSELECT * from customer\nWHERE first_name = 'Bob';\n```", "```java\nSELECT * from customer\nWHERE username LIKE '%e%';\n```", "```java\nSELECT * from customer\nWHERE username LIKE '%ey';\n```", "```java\nSELECT * from customer\nWHERE \n    first_name = 'Peter'\nOR\n    last_name = 'Cliff';\n```", "```java\nSELECT * from customer\nWHERE \n    first_name = 'Peter'\nAND\n    last_name = 'Cliff';\n```", "```java\nSELECT first_name, last_name from customer\norder by\nlast_name, first_name;\n```", "```java\n-- This is a comment.\n```", "```java\n    CREATE TABLE IF NOT EXISTS email\n    (\n    EMAIL_ID long,\n    CUSTOMER_ID long,\n    EMAIL_ADDRESS varchar(255),\n    EMAIL_TYPE varchar(255),\n    PRIMARY KEY (EMAIL_ID)\n    );\n    ```", "```java\n    INSERT INTO email\n    (EMAIL_ID, CUSTOMER_ID, EMAIL_ADDRESS, EMAIL_TYPE)\n    VALUES (1,1, 'bob@example.com', 'HOME');\n    ```", "```java\n    INSERT INTO email\n    (EMAIL_ID, CUSTOMER_ID, EMAIL_ADDRESS, EMAIL_TYPE)\n    VALUES (2,1, 'bob.marley@big_company.com', 'WORK');\n    ```", "```java\n    INSERT INTO email\n    (EMAIL_ID, CUSTOMER_ID, EMAIL_ADDRESS, EMAIL_TYPE)\n    VALUES (3,2, 'petertosh888@example.com', 'HOME');\n    ```", "```java\nSELECT username, email_address \nFROM customer, email\nWHERE email_type = 'HOME'\nAND \nemail.customer_id = customer.customer_id;\n```", "```java\nUPDATE table_name\nSET column1 = value1, column2 = value2\nWHERE where_clause_to_find_rows\n```", "```java\n    SELECT * from email;\n    ```", "```java\n    UPDATE email\n    SET EMAIL_ADDRESS = 'bob.marley@another_company.com'\n    WHERE customer_id = 1\n    AND email_type = 'WORK';\n    ```", "```java\n    SELECT * from email;\n    ```", "```java\nDELETE FROM table_name\nWHERE criteria_for_which_rows_to_delete;\n```", "```java\nDELETE FROM email\nWHERE customer_id = 1\nAND email_type = 'WORK';\n```", "```java\nConnection conn = DriverManager.getConnection(\"jdbc:h2:~/test\", \"sa\", \"\");\n```", "```java\nconn.close();\n```", "```java\nString sql = \"SELECT * from customer order by username\";\nstatement = conn.createStatement();\nResultSet results = statement.executeQuery(sql);\n```", "```java\nString sql = \"SELECT * from customer order by username\";\nstatement = conn.createStatement();\nResultSet results = statement.executeQuery(sql);\nwhile (results.next()) {\n    // Process the current row.\n}\n```", "```java\nString username = results.getString(\"USERNAME\");\n```", "```java\nString username = results.getString(2);\n```", "```java\nLong id = results.getLong(\"CUSTOMER_ID\");\n```", "```java\n    sourceCompatibility = 12\n    ```", "```java\n    buildscript {\n        repositories {\n            jcenter()\n        }\n        dependencies {\n            classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.1'\n        }\n    }\n    apply plugin: 'java'\n    apply plugin: 'com.github.johnrengelman.shadow'\n    ```", "```java\n    // https://mvnrepository.com/artifact/com.h2database/h2\n    implementation group: 'com.h2database', name: 'h2', version: '1.4.197'\n    ```", "```java\n    jar {\n        manifest {\n            attributes 'Main-Class': 'com.packtpub.db.Query\n        }\n    }\n    ```", "```java\nQuery.java\n6   public static void main(String[] args) {\n7  \n8      String sql = \"SELECT * from customer order by username\";\n9  \n10     Statement statement;\n11 \n12     Connection conn;\n13     try {\n14         conn = DriverManager.getConnection(\"jdbc:h2:~/test\", \"sa\", \"\");\n15 \n16         statement = conn.createStatement();\n17 \n18         ResultSet results = statement.executeQuery(sql);\nhttps://packt.live/2PbKanp\n```", "```java\n1 bobmarley Bob Marley\n3 jimmy Jimmy Cliff\n2 petertosh Peter Tosh\n```", "```java\norg.h2.jdbc.JdbcSQLException: Database may be already in use: null. Possible solutions: close all other connection(s); use the server mode [90020-197]\n```", "```java\nUPDATE email\nSET EMAIL_ADDRESS = 'bob.marley@another_company.com'\nWHERE customer_id = 1\nAND email_type = 'WORK';\n```", "```java\nString sql = \"UPDATE email \" +\n    \"SET EMAIL_ADDRESS = ? \" +\n    \"WHERE customer_id = ? \" +\n    \"AND email_type = ? \";\n```", "```java\nstatement = conn.prepareStatement(sql);\nstatement.setString(1, \"bob.marley@another_company.com\");\nstatement.setLong(2, 1L);\nstatement.setString(3, \"WORK\");\nint rowsChanged = statement.executeUpdate();\n```", "```java\nconn.setAutoCommit(false);\n```", "```java\nconn.commit();\n```", "```java\n} catch (SQLException e) {\n    e.printStackTrace();\n    try {\n        if (conn != null) {\n            conn.rollback();\n        }\n    } catch (SQLException nested) {\n        nested.printStackTrace();\n    }\n} \n```", "```java\n    package com.packtpub.db;\n    import java.sql.Connection;\n    import java.sql.DriverManager;\n    import java.sql.PreparedStatement;\n    import java.sql.SQLException;\n    ```", "```java\n    public class Prepared {\n        public static void main(String[] args) {\n            Connection conn = null;\n            PreparedStatement statement = null;\n            String sql = \"UPDATE email \" +            \"SET EMAIL_ADDRESS = ? \" +\n                \"WHERE customer_id = ? \" +\n                \"AND email_type = ? \";\n    ```", "```java\nPrepared.java\n20         try {\n21             conn = DriverManager.getConnection(\"jdbc:h2:~/test\", \"sa\", \"\");\n22             conn.setAutoCommit(false);\n23 \n24             statement = conn.prepareStatement(sql);\n25             statement.setString(1, \"bob.marley@another_company.com\");\n26             statement.setLong(2, 1L);\n27             statement.setString(3, \"WORK\");\n28 \n29             int rowsChanged = statement.executeUpdate();\n30 \n31             conn.commit();\n32 \n33             System.out.println(\"Number rows changed: \" + rowsChanged);\nhttps://packt.live/2MSobyQ\n```", "```java\nNumber rows changed: 1\n```", "```java\nCustomer.java\n1  package com.packtpub.db;\n2  \n3  public class Customer {\n4      Long customerId;\n5      String username;\n6      String firstName;\n7      String lastName;\n8  \n9      public Customer(Long customerId, String username, String firstName, String       lastName) {\n10         this.customerId = customerId;\n11         this.username = username;\n12         this.firstName = firstName;\n13         this.lastName = lastName;\n14     }\nhttps://packt.live/2pvQhYT\n```", "```java\n    BOB MARLEY\n    2019-03-01  2 Learning the Basics\n    2019-03-01  7 Databases and JDBC\n    ```"]