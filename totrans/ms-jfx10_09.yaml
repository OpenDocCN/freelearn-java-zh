- en: The PageObject Pattern
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far, we have seen various APIs of WebDriver and learned how to use them
    to accomplish various actions on the web application we have been testing. We
    created a number of tests that use these APIs and are executed continuously to
    validate the application. However, as your test suite grows, the complexity of
    your tests and code will also grow. This becomes a challenge, with respect to
    the maintainability of your scripts and code. You will need to design a maintainable,
    modular, and reusable test code that will scale as you add more test coverage.
    In this chapter, we will explore the PageObject pattern to build a highly maintainable
    test suite. We will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is the PageObject pattern design?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Good practices for designing PageObjects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extensions to the PageObject pattern
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An end-to-end example
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A decently written test script would work just fine, as long as the target web
    application doesn't change. But once one or more pages in your web application
    change, as a test-script developer, you shouldn't be in a position where you have
    to refactor your test scripts in a hundred different places. Let's understand
    this statement better with the help of an example. We will try to go through this
    chapter by working on a WordPress blog. Before we start, I would like you to create
    a WordPress blog ([http://wordpress.com/about](http://wordpress.com/about)) or
    use one of your existing ones.
  prefs: []
  type: TYPE_NORMAL
- en: Creating test cases for our WordPress blog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here, we are using a WordPress blog: [http://demo-blog.seleniumacademy.com/wp/](http://demo-blog.seleniumacademy.com/wp/).
    Let''s create three test cases for it before we start talking about the PageObject
    pattern.'
  prefs: []
  type: TYPE_NORMAL
- en: Test case 1 – adding a new post to our WordPress blog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following test script will log into the `Admin` portal of our WordPress
    blog and add a new blog post:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the sequence of steps that the preceding code performs:'
  prefs: []
  type: TYPE_NORMAL
- en: Log into the WordPress `Admin` portal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the All Posts page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Add New post button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a new post by providing the title and description.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Publish the post.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test case 2 – deleting a post from our WordPress blog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following test script will log into our WordPress blog and delete an existing
    post:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the sequence of steps that the preceding test script follows
    to delete a post:'
  prefs: []
  type: TYPE_NORMAL
- en: Log into the WordPress `Admin` portal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the All Posts page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the post to be deleted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the post.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test case 3 – counting the number of posts on our WordPress blog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following test script will count all the posts currently available on our
    WordPress blog:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the sequence of steps that the preceding test script follows
    to count the number of posts currently available on our blog:'
  prefs: []
  type: TYPE_NORMAL
- en: Log into the `Admin` portal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the All Posts page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Count the number of posts available.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the previous three test scripts, we log into WordPress and perform an action,
    such as creating a post, deleting a post, or counting the number of existing posts.
    Imagine that the ID of an element on the login page has changed, and we have to
    modify that in all three different test cases; or, if the All Posts page has changed,
    that we have to edit all three test cases to reflect the new changes. If you have
    50 test cases, changing each of them every time there is a change in the target
    application is very difficult. For this purpose, you need to design a test framework
    that keeps the changes that you need to make in the test cases to a minimum. The
    PageObject pattern is a design pattern that can be used to design your test framework.
  prefs: []
  type: TYPE_NORMAL
- en: What is the PageObject pattern?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Whenever we are designing an automation framework for testing web applications,
    we have to accept the fact that the target application and its elements are bound
    to change. An efficient framework is one that needs minimal refactoring to adapt
    to new changes in the target application. Let''s try to build the preceding test
    scenarios into the PageObject design pattern model. Let''s first start building
    a PageObject for the login page. This should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'So, all the elements that are part of the process of signing in are listed
    in the `AdminLoginPage` class and there is a method named `login()`, which manages
    the populating of these elements and submits the login form. Thus, this `AdminLoginPageobject`
    class, will represent WordPress''s administration login page, constituting all
    the elements that are listed on the page as member variables and all the actions
    that can be taken on the page as methods. Now, let''s see how we need to refactor
    the test case to use our newly created PageObject. Let''s consider the following
    `testAddNewPost` test case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding test case, the entire code for logging into the admin page
    is contained in just two lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Navigating to the admin login page, identifying the elements, providing values
    for the elements, and submitting the form —everything is taken care of by the
    PageObject. Thus, from now on, the test case doesn't need to be refactored for
    any changes to the admin page. You just have to change the PageObject, and all
    the test cases using this PageObject will start using the new changes without
    even knowing they occurred.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have seen what a PageObject looks like, the Selenium library provides
    even more convenient ways to implement your PageObjects. Let's take a look at
    them.
  prefs: []
  type: TYPE_NORMAL
- en: Using the @FindBy annotation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An element in the PageObject is marked with the `@FindBy` annotation. It is
    used to direct the WebDriver to locate that element on a page. It takes the locating
    mechanism (that is, by `Id`, `Name`, or `Class Name`) and the value of the element
    for that locating mechanism as input.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways of using the `@FindBy` annotation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Usage 1 is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Usage 2 is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding two usages direct the WebDriver to locate the element using the
    locating mechanism ID with the `user_login` value and assign that element to the
    `userId` WebElement. In usage 2, we have used the How enumeration. This enumeration
    supports all the different locating mechanisms that our `By` class supports. The
    enumeration constants supported in the How enumeration are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: CLASS_NAME
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ID_OR_NAME
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LINK_TEXT
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NAME
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PARTIAL_LINK_TEXT
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TAG_NAME
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XPATH
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using the `@FindBy` annotation, we will see how our `AdminLoginPage` class
    changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'When the test case instantiates the preceding class in the constructor, we
    navigate to the WordPress login page using the following code specified in the
    constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Once the driver state is set to this page, all the `FindBy` declared elements,
    that is, `email`, `password`, and `submit`, are initialized by the WebDriver using
    the locating mechanisms specified in the `FindBy` annotation.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding PageFactory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another important class that the WebDriver library provides to support the
    PageObject pattern is the `PageFactory` class. Once the `PageObject` class declares
    elements using the `FindBy` annotation, you can instantiate that `PageObject`
    class and its elements using the `PageFactory` class. This class supports a static
    method named `initElements`. The API syntax for this method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s see how this can be used in our test case to create AdminLoginPage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The `PageFactory` class instantiates the `AdminLoginPage` class and gives it
    the driver instance. The `AdminLoginPage` PageObject navigates the driver instance
    to a URL ([http://demo-blog.seleniumacademy.com/wp/wp-admin](http://demo-blog.seleniumacademy.com/wp/wp-admin),
    in this case) and then populates all its elements annotated with the `FindBy`
    annotation.
  prefs: []
  type: TYPE_NORMAL
- en: Good practices for the PageObjects design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, now that you have seen what a simple implementation of PageObject looks
    like, it's time to consider some good practices in designing PageObjects for your
    test framework.
  prefs: []
  type: TYPE_NORMAL
- en: Think of a web page as a services provider
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At a high level, when you look at a page in a web application, you will find
    it is an aggregation of various User Services. For example, if you take a look
    at the All Posts page in our WordPress Admin console, there are many sections
    in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ae4559d2-2c7e-4ec8-aafb-0d1d9e0e9b31.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding screenshot, in the `All Posts` page, a user can perform the
    following five activities:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a new post.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit a selected post.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delete a selected post.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filter the posts by category.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Search for text in all the posts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The preceding activities are the services that the All Posts page provides
    to its users. So, your PageObject should also provide these services for the test
    case, which is the user of this PageObject. The code for the All Posts PageObject
    should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Now, we have mapped the identified services on the page to the methods in our
    PageObject. When a test case wants to execute a service, it will get assistance
    from the PageObject to accomplish that.
  prefs: []
  type: TYPE_NORMAL
- en: Always look for implied services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Some of a page''s services can be identified very clearly on it. And there
    are some services that are not visible on the page but that are implied. For example,
    in the All Posts page, we have identified five services just by looking at the
    page. But let''s say your test case wants to know the count of existing posts;
    this information is available on the All Posts page, and we have to make sure
    that your PageObject provides that as an implied service. Now you extend your
    PageObject for the All Posts page with this implied service, which looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Now your test cases can employ the same PageObject to use the implied services
    relevant to the All Posts page.
  prefs: []
  type: TYPE_NORMAL
- en: Using PageObjects within a PageObject
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There will be many situations where you need to use PageObjects within a PageObject.
    Let's analyze that using a scenario on the All Posts page. When you click on Add
    New to add a new post, the browser actually navigates to a different page. So,
    you have to create two PageObjects, one for the All Posts page and another for
    the Add New page. Designing your PageObjects to simulate the exact behavior of
    our target application will keep things very clear and independent of each other.
    You may be able to navigate to the Add New page in several different ways. Creating
    a PageObject of its own for the Add New page and using it wherever needed will
    make your test framework adhere to good object-oriented fundamentals, and make
    the maintenance of your test framework easy. Let us see what using PageObjects
    within a PageObject will look like.
  prefs: []
  type: TYPE_NORMAL
- en: The AddNewPost PageObject
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `AddNewPost` PageObject adds new posts, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The AllPostsPage PageObject
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `AllPostsPage` PageObject deals with the `All posts page`, as shown in
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Now, as you can see in the `AllPostsPage` PageObject, we have instantiated the
    `AddNewPage` PageObject in the `createNewPost()` method. Thus, we are using one
    PageObject with another and keeping the behavior as close as possible to the target
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Think of methods in PageObjects as services and not as user actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There might sometimes be confusion surrounding what methods make a PageObject.
    We saw earlier that each PageObject should contain User Services as their methods.
    But quite often, we see some implementations of PageObjects in several test frameworks
    that constitute `User Actions` as their methods. So what is the difference between
    a `User Service` and a `User Action`? As we have already seen, some of the examples
    of User Services on the WordPress Admin console are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new post
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delete a post
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit a post
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Search in posts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filter posts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Count all existing posts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All the preceding services talk about the various functionalities of the target
    application. Now, let''s see some examples of `User Actions`:'
  prefs: []
  type: TYPE_NORMAL
- en: Mouse-click
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Typing text in a textbox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigating to a page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clicking on a checkbox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select an option from a dropdown
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The previous list showed some examples of `User Actions` on a page. They are
    common across many applications. Your PageObject is not meant to provide your
    test case with `User Actions`, but with User Services. So, each method in your
    PageObject should map to a service that the target page provides to the user.
    To accomplish a User Service, PageObject methods should contain many `User Actions`.
  prefs: []
  type: TYPE_NORMAL
- en: Several User Actions come together to accomplish a User Service.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of what your PageObject will look like if it provisions
    its methods with User Actions instead of User Services is as follows; let''s see
    what the `AddNewPage` PageObject will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'So, in the code of the `AddNewPage` PageObject, we have three different methods
    to accomplish three different User Actions. The caller object, instead of just
    invoking the `addNewPage(String title, String description)` method, should now
    invoke the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The preceding User Actions are three different User Actions to accomplish adding
    a new post User Service. The caller of these methods should also keep in mind
    the order in which these User Actions need to be called; that is, the `clickPublishButton()`
    method should always come last. This introduces unnecessary complexity to your
    test cases and other PageObjects that try to add new posts to the system. Thus,
    User Services will hide most of the implementation details from the users of the
    PageObjects and reduce the cost of maintaining your test cases.
  prefs: []
  type: TYPE_NORMAL
- en: Identifying some WebElements on the fly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In all the PageObjects, we have initialized the elements that we are going
    to use during object instantiation, using the `@FindBy` annotation. It is always
    good to identify all the elements of a page that are required to accomplish a
    User Service and assign them to the member variables in your PageObject. However,
    it is not always possible to do that. For example, if you want to edit a particular
    post in the All Posts page, it is not mandatory, during PageObject initialization,
    to map each post on the page to a member variable in your PageObject. When you
    have a large number of posts, your PageObject initialization will be spending
    unnecessary time mapping the posts to your member variables, even though we don''t
    use them. Besides, we don''t even know how many member variables we need to map
    all the posts in the All Posts page. The HTML for the All Posts page looks as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8d717941-9160-46e4-9d37-09751687ee22.png)'
  prefs: []
  type: TYPE_IMG
- en: There is a root element identified by `the-list`, which contains all the posts
    in the WordPress blog. Within this element, we can see that there's Post1, Post2,
    and Post3\. So having your PageObject initialized for all three posts is not an
    optimal solution. You can initialize your PageObject with a member variable mapped
    to the root element and the target post will be retrieved from it whenever required.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the `AllPostsPage` PageObject that implements its `editPost()`
    method in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Notice that in the previous code that only the root element is identified by
    `the-list`; the element that contains all the posts in the All Posts page is mapped
    to a member variable, named `pageContainer` in the `AllPostsPage` PageObject.
    The target post is extracted only when it is needed in the `editAPost()` method.
    This way, your PageObject initialization doesn't take much time and has all the
    necessary elements mapped.
  prefs: []
  type: TYPE_NORMAL
- en: Keeping the page-specific details off the test script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ultimate aim of the PageObject pattern design is to maintain the page-specific
    details, such as the IDs of the elements on the page and the way we reach a particular
    page in the application, away from the test script. Building your test framework
    using the PageObject pattern should allow you to keep your test scripts very generic
    and not need a modification each time the page implementation details change.
    Finally, whenever there is a change done to a web page, such as a login page,
    the number of changes that need to be done for 50 test scripts that use this page
    should ideally be 0\. Just changing the PageObject should handle adapting all
    the tests to the new changes.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding loadable components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The loadable component is an extension of the PageObject pattern. The `LoadableComponent`
    class in the WebDriver library will help test-case developers make sure that the
    page or a component of the page is loaded successfully. It tremendously reduces
    the efforts to debug your test cases. The PageObject should extend this LoadableComponent
    abstract class and, as a result, it is bound to provide an implementation for
    the following two methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The page or component that has to be loaded in the `load()` and `isLoaded()`
    methods determines whether the page or component is fully loaded. If it is not
    fully loaded, it throws an error.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now modify the `AdminLoginPage` PageObject to extend the LoadableComponent
    class and see how it looks, using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The URL that has to be loaded is specified in the `load()` method and the `isLoaded()`
    method validates whether or not the correct page is loaded. Now, the changes that
    are to be done in your test case are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The `get()` method from the `LoadableComponent` class will make sure the component
    is loaded by invoking the `isLoaded()` method.
  prefs: []
  type: TYPE_NORMAL
- en: Working on an end-to-end example of WordPress
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we know what PageObjects are, it's time to take a look at an end-to-end
    example that interacts and tests the WordPress Admin console. First, we will see
    all the PageObjects and then the test cases that use them.
  prefs: []
  type: TYPE_NORMAL
- en: Looking at all the PageObjects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's first see all the PageObjects that are involved in testing the WordPress
    Admin console.
  prefs: []
  type: TYPE_NORMAL
- en: The AdminLoginPage PageObject
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `AdminLoginPage` PageObject deals with the login page. This object has
    to be refactored if any changes have been made to the page in the target application,
    using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The constructor of the `AdminLoginPage` PageObject accepts the WebDriver instance.
    This will let the test framework use the same driver instance throughout the execution
    across test scripts as well as PageObjects; thus, the state of the browser and
    web application is preserved. You will see similar constructors for all the PageObjects.
    Apart from the constructor, the `AdminLoginPage` PageObject provides the `login(String
    username, String pwd)` service. This service lets the test scripts log into the
    WordPress blog and, in return, gets the `AllPostsPage` PageObject. Before returning
    the instance of the `AllPostsPage` PageObject, the PageFactory PageObject will
    initialize all the WebElements of the `AllPostsPage` PageObject. Thus, all of
    the implementation details of the login service are hidden from the test script,
    and it can work with the `AllPostsPage` PageObject.
  prefs: []
  type: TYPE_NORMAL
- en: The AllPostsPage PageObject
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `AllPostsPage` PageObject deals with the All Posts page, using the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The `AllPostsPage` PageObject provides six services:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a post
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit a post
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delete a post
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filter posts by category
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Search for text in posts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Count the number of posts available
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once the test scripts obtains an instance of this PageObject via the login service
    of the `AdminLoginPage` PageObject, it can use any of the six services of this
    PageObject and test it. If any of the implementation details change, such as the
    navigation to a particular post or the ID of a WebElement on this page, the test
    script doesn't really have to worry about it. Modifying this PageObject will apply
    the changes to the WordPress blog.
  prefs: []
  type: TYPE_NORMAL
- en: The AddNewPostPage PageObject
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `AddNewPostPage` PageObject deals with adding a new post to the blog, using
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The `AddNewPostPage` PageObject is instantiated in the `createANewPost` service
    of the `AllPostsPage` PageObject. This PageObject provides a service named `addNewPost`
    that takes input for `title` and `description` for the post and publishes a new
    post in the blog with them.
  prefs: []
  type: TYPE_NORMAL
- en: The EditPostPage PageObject
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `EditPostPage` PageObject deals with editing an existing post, using the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The `EditPostPage` PageObject is similar to the `AddNewPostPage` PageObject
    and is instantiated at the `editAPost` service of the `AllPostsPage` PageObject.
    This provides a service named `editPost` to edit an existing post. The new `title`
    and `description` are passed as input parameters to this service.
  prefs: []
  type: TYPE_NORMAL
- en: The DeletePostPage PageObject
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `DeletePostPage` PageObject deals with deleting an existing post, using
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The `DeletePostPage` PageObject is similar to the `AddNewPostPage` and `EditPostPage`
    PageObjects and is instantiated at the `deleteAPost` service of the `AllPostsPage`
    PageObject. This provides a service, named `delete`, to delete an existing post.
    As you can see, the `AddNewPostPage`, `EditPostPage`, and `DeletePostPage` PageObjects
    take you to the same page. So, it makes sense to merge these three PageObjects
    into one that provides services for adding, editing, and deleting posts.
  prefs: []
  type: TYPE_NORMAL
- en: Looking at the test cases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now it's time to see the test cases that use the PageObjects to interact with
    the WordPress Admin console.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a new post
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This test case deals with adding a new post to the blog, using the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the sequence of steps executed in the preceding test script
    to test how to add a new post to the WordPress blog:'
  prefs: []
  type: TYPE_NORMAL
- en: The test script creates a ChromeDriver instance, because it intends to test
    the scenario of adding a new post to the blog on the Chrome browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It creates an instance of the `AdminLoginPage` PageObject that uses the same
    driver instance created in the previous step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once it gets the instance of the `AdminLoginPage` PageObject, it uses the `login`
    service to log into the WordPress admin console. The `login` service, in return,
    gives out an instance of the `AllPostsPage` PageObject instance to the test script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The test script uses the instance of the `AllPostsPage` PageObject obtained
    in the previous step to use one of the many services provided by the `All Posts
    page`. In this case, it uses the `createANewPost` service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Editing a post
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This test case deals with the testing and editing of a post in the blog using
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the sequence of steps executed in the preceding test script
    to test how to add a new post to the WordPress blog:'
  prefs: []
  type: TYPE_NORMAL
- en: It creates an instance of the `AdminLoginPage` PageObject that uses the same
    driver instance created in the previous step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once it gets the instance of the `AdminLoginPage` PageObject, it uses the `login`
    service to log into the WordPress admin console. The `login` service, in return,
    gives out an instance of the `AllPostsPage` PageObject instance to the test script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The test script uses the instance of the `AllPostsPage` PageObject obtained
    in the previous step to use one of the many services provided by the All Posts
    page. In this case, it uses the `createANewPost` service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deleting a post
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This test case deals with deleting a post, using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the sequence of steps executed in the preceding test script
    to test the deleting of a post in the WordPress blog:'
  prefs: []
  type: TYPE_NORMAL
- en: It creates an instance of the `AdminLoginPage` PageObject that uses the same
    driver instance created in the previous step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once it gets the instance of the `AdminLoginPage` PageObject, it uses the `login`
    service to log into the WordPress Admin console. The `login` service, in return,
    gives out an instance of the `AllPostsPage` PageObject instance to the test script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The test script uses the instance of the `AllPostsPage` PageObject obtained
    in the previous step to use one of the many services provided by the All Posts
    page. In this case, it uses the `deleteAPost` service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Counting posts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This test case deals with counting of the number of posts currently available
    in the blog, using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the sequence of steps executed in the preceding test script
    to test counting the number of posts in the WordPress blog:'
  prefs: []
  type: TYPE_NORMAL
- en: It creates an instance of the `AdminLoginPage` PageObject that uses the driver
    instance created in the previous step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once it gets the instance of the `AdminLoginPage` PageObject, it uses the `login`
    service to log into the WordPress Admin console. The `login` service, in return,
    gives out an instance of the `AllPostsPage` PageObject instance to the test script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The test script uses the instance of the `AllPostsPage` PageObject obtained
    in the previous step to use one of the many services provided by the All Posts
    page. In this case, it uses the `getAllPostsCount` service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the PageObject pattern and how we can implement
    a test framework using PageObjects. It has numerous advantages. The PageObject
    pattern and the `LoadableComponents` class provide a test framework that adapts
    easily to changes made to the target application, without changing any test cases.
    We should always remember that a well-designed test framework is always flexible
    to changes made to the target application. In the next chapter, we will look at
    testing iOS and Android mobile applications using, `Appium`.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How do you initialize a PageObject implemented with PageFactory?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using which class can we implement methods to validate whether the page is loaded
    ?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which `By class` methods are supported by @FindBy?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When using PageFactory, if you give the WebElement variable the name same ID
    or name attribute, then you don't need to use the @FindBy annotation— True or
    False?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can check out the following links for more information about the topics
    covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Test Design Considerations: [https://www.seleniumhq.org/docs/06_test_design_considerations.jsp](https://www.seleniumhq.org/docs/06_test_design_considerations.jsp)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Automation in Selenium: PageObjectModel and PageFactory: [https://www.toptal.com/selenium/test-automation-in-selenium-using-page-object-model-and-page-factory](https://www.toptal.com/selenium/test-automation-in-selenium-using-page-object-model-and-page-factory)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
