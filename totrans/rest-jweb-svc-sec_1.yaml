- en: Chapter 1. Setting Up the Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We extend you a very warm welcome to the first chapter of our journey. Let's
    give you an idea of what you will achieve here. After reading this chapter, you
    will have the basic and stimulating knowledge you need to set up a development
    environment to work with RESTful web services. Then, you will familiarize yourself
    with the development of a very basic project related to it. In addition, by the
    end, you will have a very clear idea of how to create applications using RESTful
    web services and how you can achieve this. This chapter will give you the information
    you need to work with web services of this kind in a very easy and comprehensive
    way.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing the development environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating our first RESTful web services application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing the RESTful web service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we must obtain our work tools so that we get our hands into code. Tools
    specified here are used around the world, but you are free to choose your tools.
    Remember, "Tools do not make the artist". It doesn't matter if you use Windows,
    MAC OS X, or Linux; tools are available for every OS.
  prefs: []
  type: TYPE_NORMAL
- en: Let's explain briefly what each tool is for. We will develop the examples using
    Eclipse as our IDE, JBoss AS 7.1.1.Final as our application server, Maven to automatize
    the build process, and SoapUI as a tool to test the functionality of web services
    that we will create. In addition, we suggest that you should install the latest
    version of JDK, which is JDK 1.7.x. For help, we have obtained and included some
    links that you need to use to get the software to implement the first example.
    Each link gives you more information about each tool, which can be profitable
    as you learn something about each one if you don't know about them already.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading links
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following tools have to be downloaded:'
  prefs: []
  type: TYPE_NORMAL
- en: Eclipse IDE for Java EE Developers 4.3 ([http://www.eclipse.org/downloads/](http://www.eclipse.org/downloads/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JBoss AS 7.1.1 Final ([http://www.jboss.org/jbossas/downloads/](http://www.jboss.org/jbossas/downloads/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache Maven 3.1.1 or higher ([http://maven.apache.org/download.cgi](http://maven.apache.org/download.cgi))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SoapUI 4.6 or higher ([http://www.soapui.org/](http://www.soapui.org/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JDK 1.7.x ([http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html](http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the base project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to make the process of building our sample project easier, we will
    use Maven. This wonderful software will create a base project at the blink of
    an eye, and our project can be easily compiled and packaged without depending
    on a specific IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Maven uses archetypes for a specific kind of project. The archetypes are project
    templates that have been previously created; they allow us to create all kinds
    of applications from Java desktop applications to multimodule projects, where
    the EAR can contain several artifacts such as JAR and WAR. Its main objective
    is to get users up and running as quickly as possible by providing a sample project
    that demonstrates many of the features of Maven. If you want to learn more about
    Maven, you can find more information by visiting [http://maven.apache.org/](http://maven.apache.org/).
  prefs: []
  type: TYPE_NORMAL
- en: 'However, the information we described here is enough to keep moving on. We
    will use an archetype in order to create a basic project; if we want to be more
    specific, we will use an archetype to create a web application with Java. To do
    this, we will type the following command line in a terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we execute this command line in a terminal, we will obtain all available
    archetypes in Maven''s repository. So, let''s look for the archetype we need in
    order to create our web application; its name is `webapp-javaee6`, and it belongs
    to the group `org.codehaus.mojo.archetypes`. Also, we can search through it using
    a number that represents its ID; this number is `557`, as shown in the following
    screenshot. We recommend that you search by the name as the numbers are likely
    to change because some other archetypes may be added later:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the base project](img/0109OS_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Several questions will appear; we must provide the respective information for
    each question. Maven will use this information to create the archetype we selected
    before, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the base project](img/0109OS_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you have probably noticed, each question asks you to define a property,
    and each property is explained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`groupId`: This property represents the company''s domain reversed order; this
    way we can recognize which company is the code''s owner'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`artifactId`: This property represents the project''s name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`version`: This property represents the project''s version'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`package`: This property represents the base package''s name where classes
    are going to be added'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Class names and package names together shape the class's full name. This full
    name allows the class names to be identified in a unique way. Sometimes, when
    there are several classes with the same name, the package name helps to identify
    which library it belongs to.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to put the project into Eclipse's workspace; to do this, we
    must import our project into Eclipse by navigating through **File** | **Import**
    | **Maven** | **Existing Maven Projects**.
  prefs: []
  type: TYPE_NORMAL
- en: 'We should see the project in the IDE, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the base project](img/0109OS_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Before moving on, let's fix the problems that have occurred in the file `pom.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: The error shown in the following code is related to a bug that comes from Eclipse
    and Maven integration. In order to fix this, we have to add the `<pluginManagement>`
    tag after the `<build>` tag.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `pom.xml` file should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the sample code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the sample code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you. Also, we highly suggest
    obtaining the source code from GitHub available at [https://github.com/restful-java-web-services-security](https://github.com/restful-java-web-services-security).
  prefs: []
  type: TYPE_NORMAL
- en: 'This will fix the error, and now we only need to update Maven''s configuration
    in the project, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the base project](img/0109OS_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After refreshing the project, the errors should go away because when we update
    Maven's configuration we are actually updating our project's dependencies, such
    as missing libraries. Through this, we will include them in our project and errors
    will disappear.
  prefs: []
  type: TYPE_NORMAL
- en: Inside the `src/main/webapp` path, let's create the `WEB-INF` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, inside the `WEB-INF` folder, we will create a new file named `web.xml`
    with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This file is very useful when you are securing your applications; this time,
    we will create it without any configuration. For now, the `/WEB-INF` folder and
    the `web.xml` file only define the structure of the web application.
  prefs: []
  type: TYPE_NORMAL
- en: First functional example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have our development environment all set up, it is time to get your
    hands dirty and write the first RESTful web service. As we are using JBoss, let's
    use the RESTEasy implementation for JAX-RS. We will develop a very simple example;
    let's imagine you want to implement a service to save and search for people's
    information.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we create a simple `Person` domain class that uses JAXB annotations.
    JAXB marshals/unmarshals objects between XML and Java. For this example, we''ll
    store these instances in an in-memory cache instead of a database. In JEE, this
    typically represents a table in a relational database, and each entity instance
    corresponds to a row in that table, as presented in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Next, we create a new class called `PersonService` in the `com.packtpub.resteasy.services`
    package. This class will have two methods; one to register a new person and another
    to search for people by ID. This class will store people using an in-memory map
    cache.
  prefs: []
  type: TYPE_NORMAL
- en: 'The service will have the following implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `@Path` annotation defines the path in the URL that will be available on
    the functionalities that have been written within this class. The method annotated
    with `@Post` indicates that it should make a HTTP POST request. Furthermore, it
    is annotated with `@Consumes` and uses the `application`/`xml` value; this means
    that the POST request will be performed with a string in XML format, containing
    the information of the person to be saved. On the other hand, to find a person
    from its ID, you must make an HTTP GET request. The URL must indicate the ID the
    same way as indicated by the `@Path` annotation on the method. The `@Produces`
    annotation indicates that we will get the response in XML format. Finally, notice
    that the parameter ID, as indicated in the `@Path` annotation, is used as an argument
    of the method using the `@PathParam` annotation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we write a class that will extend the `Application` class and set
    the service we just created as a singleton. So, the information won''t get lost
    in every request, and we will keep it in memory as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note that as we have mapped our entity using JAXB, our methods consume and produce
    information in the XML format.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to deploy our application in JBoss, we should add a dependency in
    the `pom.xml` file. This dependency must reference to the JBoss plugin. We have
    to change the generated artifact name in `pom.xml`. The default value for this
    is the `artifactId` file, followed by the version; for example, `resteasy-examples-1.0-snapshot.war`.
    We will set it, so we will use just the `artifactId` file; in this case, `resteasy-examples.war`.
    All of these configurations must be included, modified, and implemented in `pom.xml`,
    as shown in the following piece of XML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You should change the value of the `jbossHome` property for the path of your
    JBoss installation. After this, we will use the command terminal; head to the
    project''s directory, and type `mvn jboss-as:run`. If you make any change on the
    code after the command has been executed, then you should use the following command
    in order to see the changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Run and redeploy are the goals of this plugin. If you want to know more goals
    about this plugin, you can visit [https://docs.jboss.org/jbossas/7/plugins/maven/latest/](https://docs.jboss.org/jbossas/7/plugins/maven/latest/)).
    This will compile all project classes again; it will then be packaged in order
    to create the `.war` file. At the end, the modifications will be deployed on the
    server. If everything is okay, we should see a message in the terminal saying
    that the deployment has been done successfully, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![First functional example](img/0109OS_01_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The source code of this chapter is available on GitHub at the following location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/restful-java-web-services-security/source-code/tree/master/chapter01](https://github.com/restful-java-web-services-security/source-code/tree/master/chapter01)'
  prefs: []
  type: TYPE_NORMAL
- en: Testing the example web service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At this moment, we will test the functionality we just created. We will use
    SoapUI as our test tool; make sure you use the latest version, or at least the
    version equal to or greater than 4.6.x because this version offers more features
    to test the RESTful Web services. Let''s start by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: From the main menu, let's create a new REST project by navigating to **File**
    | **New REST Project**, as shown in the following screenshot:![Testing the example
    web service](img/0109OS_01_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the URI of our service, as follows:![Testing the example web service](img/0109OS_01_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After this, let''s create a new person using the `POST` method from workspace.
    In the field **Media Type**, select **application/xml** and perform a request
    with a string that contains the XML with the information, as shown in the following
    text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When we click on the **Play** button, we should obtain an answer where it shows
    the created resource URI (hyperlink "`http://localhost:8080/resteasy-examples/services/person/1`"),
    as shown in the following screenshot:![Testing the example web service](img/0109OS_01_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we change the URI from the **Resource** textbox in SoapUI and use the `GET`
    method, it will show us the data we just entered, as shown in the following screenshot:![Testing
    the example web service](img/0109OS_01_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Congratulations! We have developed our first functional RESTful web service
    with two features. The first is to keep people's information in memory, and the
    second is to retrieve people's information through an ID.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you restart JBoss or deploy the application again, all data will be lost.
    Before searching for people's information, you must first save the data.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we created our first functional application—something like
    a *hello world* example but with a bit more functionality close to the real world.
  prefs: []
  type: TYPE_NORMAL
- en: The essential part we covered in this chapter is to familiarize ourselves with
    the tools we will use. In later chapters, we will assume that these concepts are
    already clear. For example, we will move forward step-by-step when using SoapUI
    as this is a tool that will facilitate the task of testing the functionality that
    we will be developing. This way, we will avoid the task of writing code for web
    service clients.
  prefs: []
  type: TYPE_NORMAL
- en: Now we are ready to review the next chapter, which contains some security models
    that Java provides. We will understand each one of them and learn how to implement
    them.
  prefs: []
  type: TYPE_NORMAL
