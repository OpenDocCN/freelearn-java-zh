["```java\npackage macros.java;\n\npublic aspect SampleJavaAspect {\npointcutanyOperation() : execution(public * *.*(..));\n\n    Object around() : anyOperation() {\nSystem.out.println(\"We are about to execute this \" + thisJoinPointStaticPart.getSignature());\n       Object ret = proceed();\n       return ret;\n    }\n}\n```", "```java\n@TupleConstructor\nclass SampleData {\nint size\n  String color\nboolean big\n}\n\nnew SampleData(5, \"red\", false\") // We didn't write this constructor\n```", "```java\nlog.info'hello world'\n```", "```java\n3 + 5\n```", "```java\nif(a > 120) {\n  a = a / 5\n} else {\n  a = 1200 \n}\n```", "```java\n            private Expression transformMethodCallExpression(Expression exp) {\nMethodCallExpressionmce = (MethodCallExpression) exp;\n                if (!(mce.getObjectExpression() instanceofVariableExpression)) {\n                    return exp;\n                }\nVariableExpressionvariableExpression = (VariableExpression) mce.getObjectExpression();\n                if (!variableExpression.getName().equals(logFieldName)\n                        || !(variableExpression.getAccessedVariable() instanceofDynamicVariable)) {\n                    return exp;\n                }\n                String methodName = mce.getMethodAsString();\n                if (methodName == null) return exp;\n                if (usesSimpleMethodArgumentsOnly(mce)) return exp;\n\nvariableExpression.setAccessedVariable(logNode);\n\n                if (!loggingStrategy.isLoggingMethod(methodName)) return exp;\n\n                return loggingStrategy.wrapLoggingMethodCall(variableExpression, methodName, exp);\n            }\n```", "```java\n(if (> a 120)\n  (/ a 5)\n  1200)\n```", "```java\n(def a 150)\n\n(my-if (> a 200)\n  (println\"Bigger than 200\")\n  (println\"Smaller than 200\"))\n```", "```java\n(defn my-if [cond positive negative]\n  (if cond\n    positive\n    negative))\n```", "```java\nBigger than 200\nSmaller than 200\nNil\n```", "```java\n      (def a 500)\n(my-if (> a 200)\n  (do\n    (println\"Bigger than 200\")\n    :bigger)\n  (do\n    (println\"Smaller than 200\")\n    :smaller))\n```", "```java\nBigger than 200\nSmaller than 200\n:bigger\n```", "```java\n(defn my-if [cond positive negative]\n  (if cond\n    (positive)\n    (negative)))\n\n      (def a 500)\n(my-if (> a 200)\n  #(do\n    (println\"Bigger than 200\")\n    :bigger)\n  #(do\n    (println\"Smaller than 200\")\n    :smaller))\n```", "```java\n(defmacro my-if [test positive negative]\n  (list 'if test positive negative))\n\n(my-if (> a 200)\n  (do\n    (println\"Bigger than 200\")\n    :bigger)\n  (do\n    (println\"Smaller than 200\")\n    :smaller))\n```", "```java\n;; Bigger than 200\n;; :bigger\n```", "```java\n(macroexpand-1\n'(my-if (> a 200)\n    (do\n      (println\"Bigger than 200\")\n      :bigger)\n    (do\n      (println\"Smaller than 200\")\n      :smaller)))\n\n;; (if (> a 200) (do (println\"Bigger than 200\") :bigger) (do (println\"Smaller than 200\") :smaller))\n```", "```java\n(defmacro my-if [test positive negative]\n  (list 'if test positive negative))\n```", "```java\n(defmacro my-if [test positive negative]\n  '(if test positive negative))\n\n(macroexpand-1\n'(my-if (> a 200)\n    (do\n      (println\"Bigger than 200\")\n      :bigger)\n    (do\n      (println\"Smaller than 200\")\n      :smaller)))\n\n;; (if clojure.core/test user/positive user/negative)\n```", "```java\n(defmacro my-if [test positive negative]\n(if ~test ~positive ~negative))\n```", "```java\n(defmacro>-macro [&params]\n  '(> ~params))\n\n(macroexpand'(>-macro 5 4 3))\n```", "```java\n(defmacro>-macro [&params]\n  '(> ~@params)) ;; In the end this works as if you had written\n                 ;; (> 5 4 3)\n\n(macroexpand'(>-macro 5 4 3))\n```", "```java\n(def a-var\"hello world\")\n\n(defmacro error-macro [&params]\n  '(let [a-var\"bye world\"]\n     (println a-var)))\n\n;; (macroexpand-1 '(error-macro))\n;; (clojure.core/let [user/a-var user/\"bye user/world\"] (clojure.core/println user/a-var))\n```", "```java\n(defmacro error-macro [&params]\n  (let [a-var-name (gensym'a-var)]\n    `(let [~a-var-name \"bye world\"]\n       (println ~a-var-name))))\n```", "```java\n(clojure.core/let [a-var922\"bye world\"] (clojure.core/println a-var922))\n```", "```java\n(macroexpand-1 '(defn sample [a] (println a)))\n\n;; (def sample (clojure.core/fn ([a] (println a))))\n```"]