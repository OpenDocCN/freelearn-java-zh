["```java\n@Entity\npublic class Student implements Serializable {\n  @Id\n  @NotNull\n  @Size(min = 1, max = 15)\n  private String id;\n  @Size(max = 30)\n  private String firstname;\n  @Pattern(regexp=\"^\\\\(?(\\\\d{3})\\\\)?[- ]?(\\\\d{3})[- ]?(\\\\d{4})$\", message=\"Invalid phone/fax format,should be as xxx-xxx-xxxx\")\n  //if the field contains phone or fax number consider using this//annotation to enforce field validation\n  @Size(max = 10)\n  private String phone;\n  @Pattern(regexp=\"[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\",message=\"Invalid email\")\n  //if the field contains email address consider using this//annotation to enforce field validation\n  @Size(max = 60)\n  @Email\n  private String email;\n\n  //...\n}\n```", "```java\npublic static void main(String[] args) {\n  Student student = new Student();\n  student.setEmail(\"qsdfqsdfqsdfsqdfqsdfqsdf\");\n  student.setPhone(\"dfqsdfqsdfqsdfqsdfqsdfqsd\");\n\n  ValidatorFactory factory =Validation.buildDefaultValidatorFactory();\n  Validator validator = factory.getValidator();\n\n  Set<ConstraintViolation<Student>> violations =validator.validate(student);\n  System.out.println(\"Number of violations : \"+violations.size());\n  for(ConstraintViolation<Student> cons : violations){\n    System.out.println(\"Calss :\"+cons.getRootBeanClass()+\",Instance : \"+cons.getLeafBean()+\", \"\n     + \" attribute : \"+cons.getPropertyPath()+\",message :\"+cons.getMessage());\n  }\n}    \n```", "```java\n@ManagedBean\npublic class InscriptionBean {\n  @Size(min=4, message=\"The full name must have \"+ \" at least four characters!\")\n  private String name;\n  @Past\n  private Date birthday;\n  @NotNull\n  @Size(min=1, max=1,message=\"Enter only one character\")\n  private String gender;\n  @Pattern(regexp=\"^\\\\(?(\\\\d{3})\\\\)?[- ]?(\\\\d{3})[- ]?(\\\\d{4})$\", \n  message=\"Invalid phone format, should be as xxx-xxx-xxxx\")\n  @Size(max = 10)\n  private String phone;\n  @Pattern(regexp=\"[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)\"\n  + \"*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\", \n  message=\"Invalid email\")\n  private String email;\n\n  //...getter and setter\n}\n```", "```java\n<html \n\n  >\n  <h:head>\n    <title>Inscription information</title>\n  </h:head>\n  <h:body>\n    <f:view>\n      <h:form>\n        <table border=\"0\">                    \n          <tbody>\n            <tr>\n              <th>Name :</th>\n              <th><h:inputText value=\"#{inscriptionBean.name}\"id=\"name\"/></th>\n              <th><h:message for=\"name\" style=\"color:red\"/></th>\n            </tr>\n            <tr>\n              <td>Birthday :</td>\n              <td><h:inputText pta:type=\"date\"value=\"#{inscriptionBean.birthday}\"  id=\"birth\">\n              <f:convertDateTime pattern=\"yyyy-MM-dd\" />\n              </h:inputText></td>\n              <th><h:message for=\"birth\" style=\"color:red\"/></th>\n            </tr>\n            <tr>\n              <td>Gender :</td>\n              <td><h:inputText value=\"#{inscriptionBean.gender}\"id=\"gender\"/></td>\n              <th><h:message for=\"gender\" style=\"color:red\"/></th>\n            </tr>\n            <tr>\n              <td>Phone :</td>\n              <td><h:inputText value=\"#{inscriptionBean.phone}\"id=\"phone\"/></td>\n              <th><h:message for=\"phone\" style=\"color:red\"/></th>\n            </tr>\n            <tr>\n              <td>Email :</td>\n              <td><h:inputText value=\"#{inscriptionBean.email}\"id=\"email\"/></td>\n              <th><h:message for=\"email\" style=\"color:red\"/></th>\n            </tr>                        \n          </tbody>\n        </table>\n        <p>\n          <h:commandButton value=\"Submit\" />\n        </p>\n      </h:form>\n    </f:view>\n  </h:body>\n</html>\n```", "```java\npublic enum CaseType {\n    NONE,\n    UPPER,\n    LOWER\n}\n```", "```java\n@Target({ElementType.FIELD, ElementType.METHOD,ElementType.PARAMETER,ElementType.LOCAL_VARIABLE})\n@Retention(RetentionPolicy.RUNTIME)\n@Constraint(validatedBy = CaseValidator.class)\npublic @interface Case {\n  String message() default \"This value must be uppercase\";    \n  CaseType type() default CaseType.UPPER;\n  Class<? extends Payload>[] payload() default {};\n  Class<?>[] groups() default {}; \n}\n```", "```java\npublic class CaseValidator implements ConstraintValidator<Case, String>{\n  private CaseType type;\n\n  public void initialize(Case annotation) {\n    type = annotation.type();\n  }\n\n  public boolean isValid(String value,ConstraintValidatorContext context) {\n  if(value == null)\n    return true;        \n\n    if (type == CaseType.UPPER) {\n      return value.equals(value.toUpperCase());\n    } else {\n      return value.equals(value.toLowerCase());\n    }\n  }    \n}\n```", "```java\n@Case(type= CaseType.UPPER, message=\"This value must be uppercase\")\nprivate String gender;\n```", "```java\n@Singleton\n@Startup\npublic class InjectValidators {    \n  private Logger logger =Logger.getLogger(InjectValidators.class.getName());\n\n  @Inject\n  private Validator validator;\n\n  @PostConstruct\n  public void init() {\n    Student student = new Student();\n    Set<ConstraintViolation<Student>> violations =validator.validate(student);\n    logger.info(\"InjectValidators-Number of violations : \" +violations.size());        \n  }\n}\n```", "```java\n@Singleton\n@Startup\npublic class ParameterConstraints {\n  private Logger logger =Logger.getLogger(InjectValidators.class.getName());\n  @Inject\n  ExecutableValidator validator;\n\n  @PostConstruct\n  public void init() {                \n    try {\n      ParameterConstraints pc = new ParameterConstraints();\n      Method method = ParameterConstraints.class.getMethod(\"createStudent\", Student.class);\n      Object[] params = {null};\n      Set<ConstraintViolation<ParameterConstraints>>violations = validator.validateParameters(pc, method, params);\n\n      logger.info(\"ParameterConstraints-Number of violations : \" + violations.size());\n    } catch (Exception ex) {\n      Logger.getLogger(ParameterConstraints.class.getName()).log(Level.SEVERE, null, ex);\n    } \n  }\n\n  @Size(max = 2)\n  public String createStudent(@NotNull Student std) {\n    return \"123456\";\n  }\n}\n```", "```java\npublic class Student {\n  @NotNull\n  @Size(min = 1, max = 15)\n  private String id;\n  @Size(max = 30)\n  private String firstname;\n  @Size(max = 30)\n  private String lastname;\n\n  @Valid//To propagate the validation of a student object\n  private Address address;\n\n  //getter and setter\n}\n\npublic class Address {\n  @NotNull(groups=AddressCheck.class)    \n  @Size(max = 10,groups=AddressCheck.class)\n  private String phone;\n\n  @NotNull(groups=AddressCheck.class)   \n  @Email(groups=AddressCheck.class)\n  private String email;    \n  //getter and setter\n}\npublic interface AddressCheck { }\n```", "```java\npublic  void testDefaultGroup(){\n  ValidatorFactory factory =Validation.buildDefaultValidatorFactory();\n  Validator validator = factory.getValidator();\n\n  Student student = new Student(); \n  student.setId(\"ST23576\");\n  student.setFirstname(\"Stelba\");\n  student.setLastname(\"estelle\");\n  student.setAddress(new Address());\n\n  //Only the default group will be test. \n  Set<ConstraintViolation<Student>> constraintViolations =validator.validate(student);       \n  assertEquals(0, constraintViolations.size());                \n} \n```", "```java\nStudent student = new Student(); \nstudent.setId(\"ST23576\");\nstudent.setFirstname(\"Stelba\");\nstudent.setLastname(\"estelle\");\nstudent.setAddress(new Address());\n\nSet<ConstraintViolation<Student>> constraintViolations =validator.validate(student, Default.class, AddressCheck.class); \nassertEquals(2, constraintViolations.size());  \n```", "```java\n@Valid//To propagate the validation of a student object\n@ConvertGroup(from=Default.class, to=AddressCheck.class)\nprivate Address address;\n```", "```java\nStudent student = new Student(); \nstudent.setId(\"ST23576\");\nstudent.setFirstname(\"Stelba\");\nstudent.setLastname(\"estelle\");\nstudent.setAddress(new Address());\nSet<ConstraintViolation<Student>> constraintViolations =validator.validate(student);       \nassertEquals(2, constraintViolations.size());\n```", "```java\n//annotation\n@ConvertGroup.List({\n  @ConvertGroup(from = Default.class, to = Citizen.class),\n  @ConvertGroup(from = Salaried.class, to = Foreign.class)\n})\nList<Student> studentList;\n```", "```java\npublic class Department implements Serializable {\n\n  @Size(max = 30, message=\"A department must have at most {max}level${max > 1 ? 's' : ''}\")\n  private Integer nbrlevel;\n\n  //...\n}\n```", "```java\n@Stateless\npublic class StudentSessionBean {    \n\n  private Logger logger = Logger.getLogger(\n    \"studentSessionBean.targetClassInterceptor\");\n\n  public Student createEntity(Student std){\n    logger.info(\"createEntity-Name of the student :\"+std.getFirstname());        \n    return std;\n  }\n\n  @AroundInvoke\n  public Object targetClassMethodInterceptor(InvocationContext ctx) throws Exception{\n    logger.info(\"targetClassMethodInterceptor - method :\"+ctx.getMethod().getName()+\", \"\n    + \"parameters : \"+Arrays.toString(ctx.getParameters())+\", date: \"+new Date());\n    if(ctx.getMethod().getName().equals(\"createEntity\")){\n      Student std = (Student) ctx.getParameters()[0];\n      logger.info(\"targetClassMethodInterceptor -Name of student before : \"+std.getFirstname());\n      if(!std.getFirstname().startsWith(\"Sir\")){\n        std.setFirstname(\"Sir \"+std.getFirstname());\n      }\n    }  \n    return  ctx.proceed();\n  }\n\n  @Schedule(minute=\"*/2\", hour=\"*\")\n  public void executeEvery2Second(){\n    logger.info(\"executeEvery2Second - executeEvery5Second - date: \"+new Date());\n  }\n\n  @AroundTimeout\n  public Object targetClassTimerInterceptor(InvocationContext ctx) throws Exception{\n    logger.info(\"targetClassTimerInterceptor - method :\"+ctx.getMethod().getName()+\", timer : \"+ctx.getTimer());\n    return  ctx.proceed();\n  }\n}\n```", "```java\npublic class MyInterceptor {\n  private Logger logger = Logger.getLogger(\n    \"studentSessionBean.targetClassInterceptor\");\n\n  @AroundInvoke\n  public Object targetClassMethodInterceptor(InvocationContext ctx) throws Exception{\n    logger.info(\"targetClassMethodInterceptor - method :\"+ctx.getMethod().getName()+\", \"\n    + \"parameters : \"+Arrays.toString(ctx.getParameters())+\", date:     \"+new Date());\n    if(ctx.getMethod().getName().equals(\"createEntity\")){\n      Student std = (Student) ctx.getParameters()[0];\n      logger.info(\"targetClassMethodInterceptor - Name of studentbefore : \"+std.getFirstname());\n      if(!std.getFirstname().startsWith(\"Sir\")){\n        std.setFirstname(\"Sir \"+std.getFirstname());\n      }\n    }  \n    return ctx.proceed();\n  }\n\n  @AroundTimeout\n  public Object targetClassTimerInterceptor(InvocationContext ctx)throws Exception{\n    logger.info(\"targetClassTimerInterceptor - method :+ctx.getMethod().getName()+\", timer : \"+ctx.getTimer());\n    return  ctx.proceed();\n  }\n}\n```", "```java\n@Interceptors(MyInterceptor.class)\n@Stateless\npublic class StudentSessionBeanWithoutInterceptor {\n    private Logger logger = Logger.getLogger(\n            \"studentSessionBean.targetClassInterceptor\");\n\n     @Schedule(minute=\"*/2\", hour=\"*\")\n    public void executeEvery2Second(){\n        logger.info(\"executeEvery2Second - executeEvery5Second - date : \"+new Date());\n    }\n\n     public Student createEntity(Student std){\n        logger.info(\"createEntity-Name of the student : \"+std.getFirstname());        \n        return std;\n    } \n}\n```", "```java\npublic class AroundConstructInterceptor {\n  private Logger logger = Logger.getLogger(\"AroundConstructInterceptor.interceptorClass\");    \n\n  @AroundConstruct\n  public Object initialize(InvocationContext ctx) throws Exception{\n    logger.info(\"initialize - constructor :\"+ctx.getConstructor()+\", \"\n    + \"parameters : \"+Arrays.toString(ctx.getParameters())+\",\"\n    + \" execution time : \"+new Date());\n    return ctx.proceed();\n  }    \n}\n\n@Stateless\n@Interceptors(AroundConstructInterceptor.class)\npublic class AroundConstructBean  {\n\n  private Logger logger = Logger.getLogger(\"AroundConstructManagedBean.interceptorClass\");\n\n  public AroundConstructBean(){     \n    logger.info(\"AroundConstructManagedBean - Execution time :\"+new Date());\n  }    \n}\n```", "```java\n@InterceptorBinding\n@Target({ElementType.TYPE, ElementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Log {    \n}\n```", "```java\n@Log\n@Interceptor\npublic class LoggerInterceptor {\n  // Interceptors methods\n}\n```", "```java\n@Stateless\n@Log\npublic class StudentSessionBeanWithoutInterceptor {\n    //Method to intercept\n}\n```", "```java\n<interceptors>\n    <class>com.packt.ch08.bean.LoggerInterceptor</class>\n</interceptors>\n```", "```java\n@Log\n@Interceptor\n@Priority(2000)\npublic class LoggerInterceptor {\n    // interceptor method\n}\n\n@Log1\n@Interceptor\n@Priority(2050)\npublic class LoggerInterceptor1 {\n  //Interceptor method\n}\n\n@Stateless\n@Log1\n@Log\npublic class StudentSessionBeanWithoutInterceptor {\n    //Methods to intercept\n}\n```"]