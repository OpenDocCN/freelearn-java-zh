["```java\npackage com.ensode.javaee8book.jaxrsintro.service; \n\nimport javax.ws.rs.Consumes; \nimport javax.ws.rs.DELETE; \nimport javax.ws.rs.GET; \nimport javax.ws.rs.POST; \nimport javax.ws.rs.PUT; \nimport javax.ws.rs.Path; \nimport javax.ws.rs.Produces; \nimport javax.ws.rs.core.MediaType; \n\n@Path(\"customer\") \npublic class CustomerResource { \n\n @GET @Produces(\"text/xml\") \n  public String getCustomer() { \n    //in a \"real\" RESTful service, we would retrieve data from a database \n    //then return an XML representation of the data. \n\n    System.out.println(\"--- \" + this.getClass().getCanonicalName() \n        + \".getCustomer() invoked\"); \n\n    return \"<customer>\\n\" \n        + \"<id>123</id>\\n\" \n        + \"<firstName>Joseph</firstName>\\n\" \n        + \"<middleName>William</middleName>\\n\" \n        + \"<lastName>Graystone</lastName>\\n\" \n        + \"</customer>\\n\"; \n  } \n\n  /** \n   * Create a new customer \n   * @param customer XML representation of the customer to create \n   */ \n @PUT @Consumes(\"text/xml\") \n  public void createCustomer(String customerXML) { \n    //in a \"real\" RESTful service, we would parse the XML \n    //received in the customer XML parameter, then insert \n    //a new row into the database. \n\n    System.out.println(\"--- \" + this.getClass().getCanonicalName() \n        + \".createCustomer() invoked\"); \n\n    System.out.println(\"customerXML = \" + customerXML); \n  } \n\n @POST @Consumes(MediaType.TEXT_XML) \n  public void updateCustomer(String customerXML) { \n    //in a \"real\" RESTful service, we would parse the XML \n    //received in the customer XML parameter, then update \n    //a row in the database. \n\n    System.out.println(\"--- \" + this.getClass().getCanonicalName() \n        + \".updateCustomer() invoked\"); \n\n    System.out.println(\"customerXML = \" + customerXML); \n  } \n\n @DELETE @Consumes(\"text/xml\") \n  public void deleteCustomer(String customerXML) { \n    //in a \"real\" RESTful service, we would parse the XML \n    //received in the customer XML parameter, then delete \n    //a row in the database. \n\n    System.out.println(\"--- \" + this.getClass().getCanonicalName() \n        + \".deleteCustomer() invoked\"); \n\n    System.out.println(\"customerXML = \" + customerXML); \n  } \n} \n```", "```java\npackage com.ensode.javaee8book..jaxrsintro.service.config; \n\nimport javax.ws.rs.ApplicationPath; \nimport javax.ws.rs.core.Application; \n\n@ApplicationPath(\"resources\") \npublic class JaxRsConfig extends Application { \n} \n```", "```java\ncurl -XGET \nhttp://localhost:8080/jaxrsintro/resources/customer\n```", "```java\n<customer> \n<id>123</id> \n<firstName>Joseph</firstName> \n<middleName>William</middleName> \n<lastName>Graystone</lastName> \n</customer> \n```", "```java\ncurl http://localhost:8080/jaxrsintro/resources/customer\n```", "```java\nINFO: --- com.ensode.jaxrsintro.service.CustomerResource.getCustomer() invoked\n```", "```java\ncurl -XPUT -HContent-type:text/xml --data \"<customer><id>321</id><firstName>Amanda</firstName><middleName>Zoe</middleName><lastName>Adams</lastName></customer>\" http://localhost:8080/jaxrsintro/resources/customer\n```", "```java\nINFO: --- com.ensode.jaxrsintro.service.CustomerResource.createCustomer() invoked\nINFO: customerXML = <customer><id>321</id><firstName>Amanda</firstName><middleName>Zoe</middleName><lastName>Adams</lastName></customer>\n```", "```java\ncurl -XPOST -HContent-type:text/xml --data \"<customer><id>321</id><firstName>Amanda</firstName><middleName>Tamara</middleName><lastName>Adams</lastName></customer>\" http://localhost:8080/jaxrsintro/resources/customer\n```", "```java\nINFO: --- com.ensode.jaxrsintro.service.CustomerResource.updateCustomer() invoked\nINFO: customerXML = <customer><id>321</id><firstName>Amanda</firstName><middleName>Tamara</middleName><lastName>Adams</lastName></customer>\n```", "```java\ncurl -XDELETE -HContent-type:text/xml --data \"<customer><id>321</id><firstName>Amanda</firstName><middleName>Tamara</middleName><lastName>Adams</lastName></customer>\" http://localhost:8080/jaxrsintro/resources/customer\n```", "```java\nINFO: --- com.ensode.jaxrsintro.service.CustomerResource.deleteCustomer() invoked\nINFO: customerXML = <customer><id>321</id><firstName>Amanda</firstName><middleName>Tamara</middleName><lastName>Adams</lastName></customer>\n```", "```java\npackage com.ensode.javaee8book.jaxrstest.entity; \n\nimport java.io.Serializable; \nimport javax.xml.bind.annotation.XmlRootElement; \n\n@XmlRootElement \npublic class Customer implements Serializable { \n\n  private Long id; \n  private String firstName; \n  private String middleName; \n  private String lastName; \n\n  public Customer() { \n  } \n\n  public Customer(Long id, String firstName, \n      String middleInitial, String lastName) { \n    this.id = id; \n    this.firstName = firstName; \n    this.middleName = middleInitial; \n    this.lastName = lastName; \n  } \n\n  //getters and setters omitted for brevity \n\n  @Override \n  public String toString() { \n    return \"id = \" + getId() + \"\\nfirstName = \" + getFirstName() \n        + \"\\nmiddleName = \" + getMiddleName() + \"\\nlastName = \" \n        + getLastName(); \n  } \n} \n```", "```java\npackage com.ensode.javaee8book.jaxbxmlconversion.service; \n\nimport com.ensode.jaxbxmlconversion.entity.Customer; \nimport javax.ws.rs.Consumes; \nimport javax.ws.rs.DELETE; \nimport javax.ws.rs.GET; \nimport javax.ws.rs.POST; \nimport javax.ws.rs.PUT; \nimport javax.ws.rs.Path; \nimport javax.ws.rs.Produces; \n\n@Path(\"customer\") \npublic class CustomerResource { \n\n  private Customer customer; \n\n  public CustomerResource() { \n    //\"fake\" the data, in a real application the data \n    //would come from a database. \n    customer = new Customer(1L, \"David\", \n        \"Raymond\", \"Heffelfinger\"); \n  } \n\n  @GET \n  @Produces(\"text/xml\") \n  public Customer getCustomer() { \n    //in a \"real\" RESTful service, we would retrieve data from a   \n     database \n    //then return an XML representation of the data. \n\n    System.out.println(\"--- \" + this.getClass().getCanonicalName() \n        + \".getCustomer() invoked\"); \n\n    return customer; \n  } \n\n  @POST \n  @Consumes(\"text/xml\") \n  public void updateCustomer(Customer customer) { \n    //in a \"real\" RESTful service, JAXB would parse the XML \n    //received in the customer XML parameter, then update \n    //a row in the database. \n\n    System.out.println(\"--- \" + this.getClass().getCanonicalName() \n        + \".updateCustomer() invoked\"); \n\n    System.out.println(\"---- got the following customer: \" \n        + customer); \n  } \n\n  @PUT \n  @Consumes(\"text/xml\") \n public void createCustomer(Customer customer) { \n    //in a \"real\" RESTful service, we would insert \n    //a new row into the database with the data in the \n    //customer parameter \n\n    System.out.println(\"--- \" + this.getClass().getCanonicalName() \n        + \".createCustomer() invoked\"); \n\n    System.out.println(\"customer = \" + customer); \n\n  } \n\n  @DELETE \n  @Consumes(\"text/xml\") \n public void deleteCustomer(Customer customer) { \n    //in a \"real\" RESTful service, we would delete a row \n    //from the database corresponding to the customer parameter \n    System.out.println(\"--- \" + this.getClass().getCanonicalName() \n        + \".deleteCustomer() invoked\"); \n\n    System.out.println(\"customer = \" + customer); \n  } \n} \n```", "```java\npackage com.ensode.javaee8book.jaxrsintroclient; \n\nimport com.ensode.jaxbxmlconversion.entity.Customer; \nimport javax.ws.rs.client.Client; \nimport javax.ws.rs.client.ClientBuilder; \nimport javax.ws.rs.client.Entity; \n\npublic class App { \n\n    public static void main(String[] args) { \n        App app = new App(); \n        app.insertCustomer(); \n    } \n\n    public void insertCustomer() { \n        Customer customer = new Customer(234L, \"Tamara\", \"A\", \n                \"Graystone\"); \n Client client = ClientBuilder.newClient();         \n        client.target( \"http://localhost:8080/jaxbxmlconversion/resources/customer\"). request().put( Entity.entity(customer, \"text/xml\"), Customer.class); \n    } \n} \n```", "```java\npackage com.ensode.javaee8book.queryparams.service; \n\nimport com.ensode.queryparams.entity.Customer; \nimport javax.ws.rs.Consumes; \nimport javax.ws.rs.DELETE; \nimport javax.ws.rs.GET; \nimport javax.ws.rs.POST; \nimport javax.ws.rs.PUT; \nimport javax.ws.rs.Path; \nimport javax.ws.rs.Produces; \nimport javax.ws.rs.QueryParam; \n\n@Path(\"customer\") \npublic class CustomerResource { \n\n  private Customer customer; \n\n  public CustomerResource() { \n    customer = new Customer(1L, \"Samuel\", \n        \"Joseph\", \"Willow\"); \n  } \n\n  @GET \n  @Produces(\"text/xml\") \n public Customer getCustomer(@QueryParam(\"id\") Long id) { \n    //in a \"real\" RESTful service, we would retrieve data from a  \n    database \n    //using the supplied id. \n\n    System.out.println(\"--- \" + this.getClass().getCanonicalName() \n        + \".getCustomer() invoked, id = \" + id); \n\n    return customer; \n  } \n\n  /** \n   * Create a new customer \n   * @param customer XML representation of the customer to create \n   */ \n  @PUT \n  @Consumes(\"text/xml\") \n  public void createCustomer(Customer customer) { \n    //in a \"real\" RESTful service, we would parse the XML \n    //received in the customer XML parameter, then insert \n    //a new row into the database. \n\n    System.out.println(\"--- \" + this.getClass().getCanonicalName() \n        + \".createCustomer() invoked\"); \n\n    System.out.println(\"customer = \" + customer); \n\n  } \n\n  @POST \n  @Consumes(\"text/xml\") \n  public void updateCustomer(Customer customer) { \n    //in a \"real\" RESTful service, we would parse the XML \n    //received in the customer XML parameter, then update \n    //a row in the database. \n\n    System.out.println(\"--- \" + this.getClass().getCanonicalName() \n        + \".updateCustomer() invoked\"); \n\n    System.out.println(\"customer = \" + customer); \n\n    System.out.println(\"customer= \" + customer); \n  } \n\n  @DELETE \n  @Consumes(\"text/xml\") \n public void deleteCustomer(@QueryParam(\"id\") Long id) { \n    //in a \"real\" RESTful service, we would invoke \n    //a DAO and delete the row in the database with the \n    //primary key passed as the \"id\" parameter. \n\n    System.out.println(\"--- \" + this.getClass().getCanonicalName() \n        + \".deleteCustomer() invoked, id = \" + id); \n\n    System.out.println(\"customer = \" + customer); \n  } \n} \n```", "```java\ncurl -XGET -HContent-type:text/xml http://localhost:8080/queryparams/resources/customer?id=1 \n```", "```java\npackage com.ensode.javaee8book.queryparamsclient; \n\nimport com.ensode.javaee8book.queryparamsclient.entity.Customer; \nimport javax.ws.rs.client.Client; \nimport javax.ws.rs.client.ClientBuilder; \n\npublic class App { \n\n    public static void main(String[] args) { \n        App app = new App(); \n        app.getCustomer(); \n    } \n\n    public void getCustomer() { \n        Client client = ClientBuilder.newClient(); \n        Customer customer = client.target( \n                \"http://localhost:8080/queryparams/resources/customer\"). \n queryParam(\"id\", 1L). \n                request().get(Customer.class); \n\n        System.out.println(\"Received the following customer  \n        information:\"); \n        System.out.println(\"Id: \" + customer.getId()); \n        System.out.println(\"First Name: \" +  \n        customer.getFirstName()); \n        System.out.println(\"Middle Name: \" +  \n        customer.getMiddleName()); \n        System.out.println(\"Last Name: \" + customer.getLastName()); \n    } \n} \n```", "```java\npackage com.ensode.javaee8book.pathparams.service; \n\nimport com.ensode.pathparams.entity.Customer; \nimport javax.ws.rs.Consumes; \nimport javax.ws.rs.DELETE; \nimport javax.ws.rs.GET; \nimport javax.ws.rs.POST; \nimport javax.ws.rs.PUT; \nimport javax.ws.rs.Path; \nimport javax.ws.rs.PathParam; \nimport javax.ws.rs.Produces; \n\n@Path(\"/customer/\") \npublic class CustomerResource { \n\n  private Customer customer; \n\n  public CustomerResource() { \n    customer = new Customer(1L, \"William\", \n        \"Daniel\", \"Graystone\"); \n  } \n\n  @GET \n  @Produces(\"text/xml\") \n @Path(\"{id}/\") public Customer getCustomer(@PathParam(\"id\") Long id) { \n    //in a \"real\" RESTful service, we would retrieve data from a database \n    //using the supplied id. \n\n    System.out.println(\"--- \" + this.getClass().getCanonicalName() \n        + \".getCustomer() invoked, id = \" + id); \n\n    return customer; \n  } \n\n  @PUT \n  @Consumes(\"text/xml\") \n  public void createCustomer(Customer customer) { \n    //in a \"real\" RESTful service, we would parse the XML \n    //received in the customer XML parameter, then insert \n    //a new row into the database. \n\n    System.out.println(\"--- \" + this.getClass().getCanonicalName() \n        + \".createCustomer() invoked\"); \n    System.out.println(\"customer = \" + customer); \n\n  } \n\n  @POST \n  @Consumes(\"text/xml\") \n  public void updateCustomer(Customer customer) { \n    //in a \"real\" RESTful service, we would parse the XML \n    //received in the customer XML parameter, then update \n    //a row in the database. \n\n    System.out.println(\"--- \" + this.getClass().getCanonicalName() \n        + \".updateCustomer() invoked\"); \n\n    System.out.println(\"customer = \" + customer); \n     System.out.println(\"customer= \" + customer); \n  } \n\n  @DELETE \n  @Consumes(\"text/xml\") \n @Path(\"{id}/\") public void deleteCustomer(@PathParam(\"id\") Long id) { \n    //in a \"real\" RESTful service, we would invoke \n    //a DAO and delete the row in the database with the \n    //primary key passed as the \"id\" parameter. \n\n    System.out.println(\"--- \" + this.getClass().getCanonicalName() \n        + \".deleteCustomer() invoked, id = \" + id); \n\n    System.out.println(\"customer = \" + customer); \n  } \n} \n```", "```java\ncurl -XGET -HContent-type:text/xml http://localhost:8080/pathparams/resources/customer/1\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"\nstandalone=\"yes\"?><customer><firstName>William</firstName><id>1</id><lastName>Graystone</lastName><middleName>Daniel</middleName></customer>\n```", "```java\npackage com.ensode.javaee8book..pathparamsclient; \n\nimport com.ensode.javaee8book.pathparamsclient.entity.Customer; \nimport javax.ws.rs.client.Client; \nimport javax.ws.rs.client.ClientBuilder; \n\npublic class App { \n\n    public static void main(String[] args) { \n        App app = new App(); \n        app.getCustomer(); \n    } \n\n    public void getCustomer() { \n        Client client = ClientBuilder.newClient(); \n        Customer customer = client.target( \n                \"http://localhost:8080/pathparams/resources/customer\"). \n path(\"{id}\"). resolveTemplate(\"id\", 1L). \n                request().get(Customer.class); \n\n        System.out.println(\"Received the following customer  \n        information:\"); \n        System.out.println(\"Id: \" + customer.getId()); \n        System.out.println(\"First Name: \" + \n        customer.getFirstName()); \n        System.out.println(\"Middle Name: \" + \n        customer.getMiddleName()); \n        System.out.println(\"Last Name: \" + customer.getLastName()); \n    } \n} \n```", "```java\n@Path(\"/{paramName1}/{paramName2}/\") \n```", "```java\npublic String someMethod(@PathParam(\"paramName1\") String param1, \n@PathParam(\"paramName2\") String param2) \n```", "```java\npackage net.ensode.javaee8book.jaxrs21sse; \n\nimport java.util.List; \nimport java.util.concurrent.Executor; \nimport java.util.concurrent.Executors; \nimport java.util.concurrent.TimeUnit; \nimport java.util.stream.Collectors; \nimport java.util.stream.Stream; \nimport javax.ws.rs.GET; \nimport javax.ws.rs.Path; \nimport javax.ws.rs.Produces; \nimport javax.ws.rs.core.Context; \nimport javax.ws.rs.core.MediaType; \nimport javax.ws.rs.sse.OutboundSseEvent; \nimport javax.ws.rs.sse.Sse; \nimport javax.ws.rs.sse.SseEventSink; \n\n@Path(\"serversentevents\") \npublic class SseResource { \n\n    List<Float> stockTickerValues = null; \n    Executor executor = Executors.newSingleThreadExecutor(); \n\n    @GET \n    @Produces(MediaType.SERVER_SENT_EVENTS) \n public void sendEvents(@Context SseEventSink sseEventSink,       \n      @Context Sse sse) { \n        initializeStockTickerValues(); \n        executor.execute(() -> { \n            stockTickerValues.forEach(value -> { \n                try { \n                    TimeUnit.SECONDS.sleep(5); \n                    System.out.println(String.format( \n                      \"Sending the following value: %.2f\", value)); \n final OutboundSseEvent outboundSseEvent = sse.newEventBuilder() .name(\"ENSD stock ticker value\") .data(String.class,     \n                      String.format(\"%.2f\", value)) .build(); sseEventSink.send(outboundSseEvent); \n                } catch (InterruptedException ex) { \n                    ex.printStackTrace(); \n                } \n\n            }); \n\n        }); \n    } \n\n    private void initializeStockTickerValues() { \n        stockTickerValues = Stream.of(50.3f, 55.5f, 62.3f,  \n         70.7f, 10.1f, 5.1f).collect(Collectors.toList()); \n    } \n} \n```", "```java\n<!DOCTYPE html> \n<html> \n    <head> \n        <title>Stock Ticker Monitor</title> \n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"> \n    </head> \n    <body onload=\"getStockTickerValues()\"> \n        <h2>Super fancy stock ticker monitor</h2> \n        <table cellspacing=\"0\" cellpadding=\"0\"> \n            <tr> \n                <td>ENSD Stock Ticker Value: </td> \n                <td> <span id=\"stickerVal\"></span></td> \n            </tr> \n            <tr> \n                <td></td><td><button>Buy!</button></td> \n            </tr> \n        </table> \n        <script> \n function getStockTickerValues() { var source = new                   \n                 EventSource(\"webresources/serversentevents/\"); source.addEventListener('ENSD stock ticker value', function (event) { document.getElementById(\"stickerVal\").\n                      innerHTML = event.data; }, false); } \n        </script> \n    </body> \n</html> \n```"]