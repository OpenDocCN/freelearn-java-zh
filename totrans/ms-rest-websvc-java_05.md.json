["```java\nopenapi: 3.0.0\ninfo:\n  title: Order Management API\n  description: API for managing orders\n  version: 1.0.0-SNAPSHOT\nservers:\n  - url: http://localhost:8080/api/v1 \n```", "```java\npaths:\n  /orders:\n    post:\n      tags:\n        - OrderManagement\n      summary: Create Order\n      description: Creates a new order\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OrderRequestBody'\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OrderResponse'\n        '400':\n          description: Bad Request \n```", "```java\nget:\n  tags:\n    - OrderManagement\n  summary: List Orders\n  description: Retrieves a list of orders\n  responses:\n    '200':\n      description: OK\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/OrderResponse' \n```", "```java\n/orders/{orderId}:\n  get:\n    tags:\n      - OrderManagement\n    summary: Get Order\n    description: Retrieves a single order by its ID\n    parameters:\n      - name: orderId\n        in: path\n        required: true\n        description: The ID of the order to retrieve\n        schema:\n         type: string\n    example: 123456\n    responses:\n      '200':\n        description: OK\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OrderResponse'\n      '404':\n        description: Not Found \n```", "```java\n put:\n    tags:\n      - OrderManagement\n    summary: Update Order\n    description: Updates an existing order\n    parameters:\n      - name: orderId\n        in: path\n        required: true\n        description: The ID of the order to be updated\n        schema:\n          type: string\n    example: 123456\n    requestBody:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/OrderRequestBody'\n    responses:\n      '200':\n        description: OK\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OrderResponse'\n      '400':\n        description: Bad Request\n      '404':\n        description: Not Found \n```", "```java\ndelete:\n  tags:\n    - OrderManagement\n  summary: Cancel Order\n  description: Cancels an existing order\n  parameters:\n    - name: orderId\n      in: path\n      description: ID of the order to be cancelled\n      required: true\n      schema:\n        type: string\n   example: 123456\nresponses:\n  '204':\n    description: No Content\n  '403':\n    description: Forbidden\n  '404':\n    description: Not Found \n```", "```java\n/orders/{orderId}/status:\n  patch:\n    tags:\n      - OrderManagement\n    summary: Change Order Status\n    description: Change an Order Status\n    parameters:\n      - name: orderId\n        in: path\n        required: true\n        description: The ID of the order to be updated\n        schema:\n          type: string\n    example: 123456\n    requestBody:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/OrderStatus'\n    responses:\n      '200':\n        description: OK\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OrderResponse'\n      '404':\n        description: Not Found \n```", "```java\ncomponents:\n  schemas:\n    Product:\n      type: object\n      properties:\n        productSKU:\n          type: string\n        quantity:\n          type: integer\n    Customer:\n      type: object\n      properties:\n        customerType:\n          type: string\n        streetAddress:\n          type: string\n        city:\n          type: string\n        postalCode:\n          type: string\n      discriminator:\n        propertyName: customerType\n        mapping:\n          person: '#/components/schemas/PersonCustomer'\n          company: '#/components/schemas/CompanyCustomer' \n```", "```java\nPersonCustomer:\n  type: object\n  allOf:\n    - $ref: '#/components/schemas/Customer'\n  properties:\n    firstName:\n      type: string\n    lastName:\n      type: string\nCompanyCustomer:\n  type: object\n  allOf:\n    - $ref: '#/components/schemas/Customer'\n  properties:\n    companyName:\n      type: string\n    vatId:\n      type: string \n```", "```java\nOrderRequestBody:\n  type: object\n  properties:\n    customer:\n      $ref: '#/components/schemas/Customer'\n    products:\n      type: array\n      items:\n        $ref: '#/components/schemas/Product'\nOrderResponse:\n  type: object\n  properties:\n    id:\n      type: string\n    customer:\n      $ref: '#/components/schemas/Customer'\n    products:\n      type: array\n      items:\n        $ref: '#/components/schemas/Product'\n    totalAmount:\n      type: number\n    orderCreatedDate:\n      type: string\n      format: date-time\n    orderUpdatedDate:\n      type: string\n      format: date-time\n    status:\n      $ref: '#/components/schemas/Status'\nOrderStatus:\n  type: object\n  properties:\n    status:\n      $ref: '#/components/schemas/Status'\nStatus:\n  type: string\n  enum: [ Pending, Approved, Cancelled ] \n```", "```java\nsecuritySchemes:\n  JWTAuth:\n    type: http\n    scheme: bearer\n    bearerFormat: JWT \n```", "```java\nsecurity:\n  - JWTAuth: [] \n```", "```java\ncomponents:\n  securitySchemes:\n    SessionIDAuth:\n      type: apiKey\n      in: cookie\n      name: SESSIONID\nsecurity:\n  - SessionIDAuth: [] \n```", "```java\n<plugin>\n    <groupId>org.openapitools</groupId>\n    <artifactId>openapi-generator-maven-plugin</artifactId>\n    <version>7.5.0</version>\n    <executions>\n        <execution>\n            <goals>\n                <goal>generate</goal>\n            </goals>\n            <configuration>\n                <inputSpec>${project.basedir}/your_spec_API.yml\n                </inputSpec>\n                <generatorName>spring</generatorName>\n                <apiPackage>[package where generated code is added]\n                </apiPackage>\n                <modelPackage>[new package where DTOs are added]\n                </modelPackage>\n                <modelNameSuffix>Dto</modelNameSuffix>\n                <configOptions>\n                   <documentationProvider>springdoc\n                   </documentationProvider>\n                    <interfaceOnly>true</interfaceOnly>\n                    <oas3>true</oas3>\n                    <openApiNullable>false</openApiNullable>\n                    <serializableModel>true</serializableModel>\n                    <useBeanValidation>true</useBeanValidation>\n                    <useSpringBoot3>true</useSpringBoot3>\n                    <useTags>true</useTags>\n                </configOptions>\n            </configuration>\n        </execution>\n    </executions>\n</plugin> \n```", "```java\n    <groupId>org.openapitools</groupId>\n    <artifactId>openapi-generator-maven-plugin</artifactId> \n    ```", "```java\n    <version>7.5.0</version> \n    ```", "```java\n    <goals>\n        <goal>generate</goal>\n    </goals> \n    ```", "```java\n    <inputSpec>${project.basedir}/src/main/resources/Order_Management_API.yml</inputSpec> \n    ```", "```java\n    <generatorName>spring</generatorName> \n    ```", "```java\n    <apiPackage>com.packt.ordermanagementapi.adapter.inbound.rest\n    </apiPackage>\n    <modelPackage>com.packt.ordermanagementapi.adapter.inbound.rest.dto\n    </modelPackage>\n    <modelNameSuffix>Dto</modelNameSuffix> \n    ```", "```java\n    <configOptions>\n       <documentationProvider>springdoc</documentationProvider>\n        <interfaceOnly>true</interfaceOnly>\n        <oas3>true</oas3>\n        <openApiNullable>false</openApiNullable>\n        <serializableModel>true</serializableModel>\n        <useBeanValidation>true</useBeanValidation>\n        <useSpringBoot3>true</useSpringBoot3>\n        <useTags>true</useTags>\n    </configOptions> \n    ```", "```java\nmvn clean install \n```", "```java\n@Generated(value = \"org.openapitools.codegen.languages.SpringCodegen\", date = \"2024-07-21T20:59:33.440034506-03:00[America/Sao_Paulo]\", comments = \"Generator version: 7.5.0\")\npublic class PersonCustomerDto extends CustomerDto implements Serializable {\n  private static final long serialVersionUID = 1L;\n  private String firstName;\n  private String lastName;\n  public PersonCustomerDto firstName(String firstName) {\n    this.firstName = firstName;\n    return this;\n  }\n...getters and setters omitted for brevity \n```", "```java\n/**\n * DELETE /orders : Cancel Order\n * Cancels an existing order\n *\n * @param orderId ID of the order to cancel (required)\n * @return No Content (status code 204)\n *         or Not Found (status code 404)\n */\n@Operation(\n    operationId = \"ordersDelete\",\n    summary = \"Cancel Order\",\n    description = \"Cancels an existing order\",\n    tags = { \"OrderManagement\" },\n    responses = {\n        @ApiResponse(responseCode = \"204\", description = \"No Content\"),\n        @ApiResponse(responseCode = \"404\", description = \"Not Found\")\n    },\n    security = {\n        @SecurityRequirement(name = \"JWTAuth\")\n    }\n)\n@RequestMapping(\n    method = RequestMethod.DELETE,\n    value = \"/orders\"\n)\ndefault ResponseEntity<Void> ordersDelete(\n    @NotNull @Parameter(name = \"orderId\",\n        description = \"ID of the order to cancel\", required = true,\n        in = ParameterIn.QUERY) @Valid @RequestParam(value = \"orderId\",\n        required = true) String orderId\n) {\n    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);\n} \n```", "```java\n@Controller\npublic class OrderManagementApiController implements OrderManagementApi {\n    @Override\n    public ResponseEntity<List<OrderResponse>> ordersGet() {\n        //Add your own concrete implementation\n        return OrderManagementApi.super.ordersGet();\n    }\n    @Override\n    public ResponseEntity<Void> ordersDelete(String orderId) {\n        //Add your own concrete implementation\n        return OrderManagementApi.super.ordersDelete(orderId);\n    }\n    @Override\n    public ResponseEntity<OrderResponse> ordersOrderIdGet(String orderId)\n    {\n        //Add your own concrete implementation\n        return OrderManagementApi.super.ordersOrderIdGet(orderId);\n    }\n    @Override\n    public ResponseEntity<OrderResponse> ordersOrderIdPut(String orderId,\n        OrderRequestBody orderRequestBody) {\n        //Add your own concrete implementation\n        return OrderManagementApi\n            .super.ordersOrderIdPut(orderId, orderRequestBody);\n    }\n    @Override\n    public ResponseEntity<OrderResponse> ordersPost(\n        OrderRequestBody orderRequestBody) {\n        //Add your own concrete implementation\n        return OrderManagementApi.super.ordersPost(orderRequestBody);\n    }\n} \n```", "```java\n@RestController\npublic class OrderManagementApiController implements OrderManagementApi {\n    private final OrdersCommandUseCase ordersCommandUseCase;\n    private final OrdersQueryUseCase ordersQueryUseCase;\n    private final OrderMapper orderMapper;\n    public OrderManagementApiController(\n    OrdersCommandUseCase ordersCommandUseCase,\n    OrdersQueryUseCase ordersQueryUseCase,\n    OrderMapper orderMapper) {\n        this.ordersCommandUseCase = ordersCommandUseCase;\n        this.ordersQueryUseCase = ordersQueryUseCase;\n        this.orderMapper = orderMapper;\n    }\n    @Override\n    public ResponseEntity<List<OrderResponseDto>> ordersGet() {\n        final var orders = ordersQueryUseCase.getAllOrders()\n            .stream()\n            .map(orderMapper::toOrderResponse)\n            .toList();\n        return ResponseEntity.status(HttpStatus.OK)\n            .body(orders);\n    }\n    @Override\n    public ResponseEntity<OrderResponseDto> ordersOrderIdGet(\n        String orderId) {\n        final var order = ordersQueryUseCase.getOrder(orderId);\n        return ResponseEntity.status(HttpStatus.OK)\n            body(orderMapper.toOrderResponse(order));\n    }\n    @Override\n    public ResponseEntity<OrderResponseDto> ordersPost(\n        OrderRequestBodyDto orderRequestBody) {\n        final var order = ordersCommandUseCase.createOrder(\n           orderMapper.toOrderRequest(orderRequestBody));\n        return ResponseEntity.status(HttpStatus.CREATED).body(\n            orderMapper.toOrderResponse(order));\n    }\n    @Override\n    public ResponseEntity<OrderResponseDto> ordersOrderIdStatusPatch(\n        String orderId, OrderStatusDto orderStatus) {\n        final var order = ordersCommandUseCase.updateOrderStatus(orderId,\n            StatusEnum.valueOf(orderStatus.getStatus().name()));\n        return ResponseEntity.status(HttpStatus.OK).body(\n            orderMapper.toOrderResponse(order));\n    }\n    @Override\n    public ResponseEntity<OrderResponseDto> ordersOrderIdPut(\n        String orderId, OrderRequestBodyDto orderRequestBody) {\n        var orderRequest = orderMapper.toOrderRequest(orderRequestBody);\n        final var order = ordersCommandUseCase.updateOrder(\n            orderId, orderRequest);\n        return ResponseEntity.status(HttpStatus.OK).body(\n            orderMapper.toOrderResponse(order));\n    }\n    @Override\n    public ResponseEntity<Void> ordersOrderIdDelete(String orderId) {\n        ordersCommandUseCase.deleteOrder(orderId);\n        return ResponseEntity.noContent().build();\n    }\n} \n```", "```java\n@Transactional\n@Service\npublic class OrdersCommandUseCaseImpl\n       implements OrdersCommandUseCase {\n    private final OrdersRepository ordersRepository;\n    private final OrderMapper orderMapper;\n    private final ProductsApi productsApi;\n    public OrdersCommandUseCaseImpl(OrdersRepository ordersRepository,\n                                    OrderMapper orderMapper,\n                                    ProductsApi productsApi) {\n        this.ordersRepository = ordersRepository;\n        this.orderMapper = orderMapper;\n        this.productsApi = productsApi;\n    }\n    @Override\n    public Order createOrder(OrderRequest orderRequest) {\n        BigDecimal total = getProductPrice(orderRequest);\n        Order order = orderMapper.toOrder(orderRequest);\n        order.setTotalAmount(total);\n        return ordersRepository.save(OrderEntity.fromOrder(order, null));\n    }\n    @Override\n    public Order updateOrder(String orderId, OrderRequest orderRequest) {\n        Optional<OrderEntity> optionalOrderEntity\n                = ordersRepository.findById(orderId);\n        if (optionalOrderEntity.isPresent()) {\n            BigDecimal total = getProductPrice(orderRequest);\n            Order order = orderMapper.toOrder(orderRequest);\n            order.setTotalAmount(total);\n            return ordersRepository\n                .save(OrderEntity.fromOrder(order, \n                    optionalOrderEntity.get()));\n        }\n        throw new EntityNotFoundException(\"Order not found with id \" + \n        orderId);\n    }\n    private BigDecimal getProductPrice(OrderRequest orderRequest) {\n        return orderRequest.products().stream().map(orderProduct -> {\n            ProductOutputDto catalogueProduct =\n                productsApi.getProductById(orderProduct.getProductSKU());\n            return catalogueProduct\n                .getPrice()\n                .multiply(BigDecimal.valueOf(\n                    orderProduct.getQuantity()));\n        }).reduce(BigDecimal.ZERO, BigDecimal::add);\n    }\n    @Override\n    public Order updateOrderStatus(String orderId, StatusEnum status) {\n        Optional<OrderEntity> optionalOrderEntity = ordersRepository.findById(orderId);\n        if (optionalOrderEntity.isPresent()) {\n            return ordersRepository\n                .save(OrderEntity\n                    .updateOrderStatus(optionalOrderEntity.get(),\n                                       status));\n        }\n        throw new EntityNotFoundException(\"Order not found with id \" +\n        orderId);\n    }\n    @Override\n    public void deleteOrder(String orderId) {\n        ordersRepository.deleteById(orderId);\n    }\n} \n```", "```java\n@Service\npublic class OrdersQueryUseCaseImpl implements OrdersQueryUseCase {\n    private final OrdersRepository ordersRepository;\n    public OrdersQueryUseCaseImpl(OrdersRepository ordersRepository) {\n        this.ordersRepository = ordersRepository;\n    }\n    @Override\n    public List<? extends Order> getAllOrders() {\n        return ordersRepository.findAll();\n    }\n    @Override\n    public Order getOrder(String orderId) {\n        return ordersRepository.findById(orderId)\n           .orElseThrow(\n               () -> new EntityNotFoundException(\n                   \"Order not found with id \" + orderId)\n               );\n    }\n} \n```", "```java\n@Mapper(uses = CustomerCustomMapper.class, componentModel = \"spring\")\npublic interface OrderMapper {\n    Order toOrder(OrderRequest orderRequestBody);\n    @Mapping(target = \"customer\", source = \"customer\",\n        qualifiedByName = \"customerDtoToCustomer\")\n    OrderRequest toOrderRequest(OrderRequestBodyDto orderRequestBody);\n    @Mapping(target = \"customer\", source = \"customer\",\n        qualifiedByName = \"customerToCustomerDto\")\n    OrderResponseDto toOrderResponse(Order order);\n} \n```", "```java\n@Component\npublic class CustomerCustomMapper {\n    @Named(\"customerDtoToCustomer\")\n    public Customer customerDtoToCustomer(CustomerDto customerDto) {\n        if (customerDto == null) {\n            return null;\n        }\n        Customer customer = switch (customerDto.getCustomerType()) {\n            case \"person\" -> {\n                PersonCustomer personCustomer = new PersonCustomer();\n                var personCustomerDto = (PersonCustomerDto) customerDto;\n                personCustomer.setFirstName(\n                    personCustomerDto.getFirstName());\n                personCustomer.setLastName(\n                    personCustomerDto.getLastName());\n                yield personCustomer;\n            }\n            case \"company\" -> {\n                CompanyCustomer companyCustomer = new CompanyCustomer();\n                var companyCustomerDto = (CompanyCustomerDto) customerDto;\n                companyCustomer.setCompanyName(\n                    companyCustomerDto.getCompanyName());\n                companyCustomer.setVatId(companyCustomerDto.getVatId());\n                yield companyCustomer;\n            }\n            default -> new Customer();\n        };\n        customer.setStreetAddress(customerDto.getStreetAddress());\n        customer.setCity(customerDto.getCity());\n        customer.setPostalCode(customerDto.getPostalCode());\n        return customer;\n    }\n    @Named(\"customerToCustomerDto\")\n    public CustomerDto customerToCustomerDto(Customer customer) {\n        if (customer == null) {\n            return null;\n        }\n        CustomerDto customerDto = switch (customer) {\n            case PersonCustomerEntity personCustomer -> {\n                PersonCustomerDto personCustomerDto = new \n                PersonCustomerDto();\n                personCustomerDto.setFirstName(\n                    personCustomer.getFirstName());\n                personCustomerDto.setLastName(\n                    personCustomer.getLastName());\n                personCustomerDto.setCustomerType(\"person\");\n                yield personCustomerDto;\n            }\n            case CompanyCustomerEntity companyCustomer -> {\n                CompanyCustomerDto companyCustomerDto = new \n                CompanyCustomerDto();\n                companyCustomerDto.setCompanyName(companyCustomer.\n                getCompanyName());\n                companyCustomerDto.setVatId(companyCustomer.getVatId());\n                companyCustomerDto.setCustomerType(\"company\");\n                yield companyCustomerDto;\n            }\n            default -> new CustomerDto();\n        };\n        customerDto.setStreetAddress(customer.getStreetAddress());\n        customerDto.setCity(customer.getCity());\n        customerDto.setPostalCode(customer.getPostalCode());\n        return customerDto;\n    }\n} \n```", "```java\n<execution>\n    <id>generate-client</id>\n    <goals>\n        <goal>generate</goal>\n    </goals>\n    <configuration>\n        <inputSpec>.../src/main/resources/Product_API.json</inputSpec>\n        <generatorName>java</generatorName>\n        <library>restclient</library>\n        <apiPackage>[package where generated code is added]</apiPackage>\n        <modelPackage>[new package where DTOs are added]</modelPackage>\n        <modelNameSuffix>Dto</modelNameSuffix>\n        <generateApiTests>false</generateApiTests>\n        <generateModelTests>false</generateModelTests>\n        <configOptions>\n            <interfaceOnly>true</interfaceOnly>\n            <useJakartaEe>true</useJakartaEe>\n            <openApiNullable>false</openApiNullable>\n        </configOptions>\n    </configuration>\n</execution> \n```", "```java\nmvn clean install \n```", "```java\n private void updateProductPrice(List<Product> products) {\n        products.forEach(orderProduct -> {\n            ProductDetails catalogueProduct = productsQueryUseCase.\n            getProductById(orderProduct.getProductSKU());\n            orderProduct.setPrice(catalogueProduct.price());\n        });\n    } \n```"]