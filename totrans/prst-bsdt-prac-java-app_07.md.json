["```java\n    <dependency>    <groupId>org.jboss.weld.se</groupId>    <artifactId>weld-se-shaded</artifactId>    <version>${weld.se.core.version}</version></dependency><dependency>    <groupId>io.smallrye.config</groupId>    <artifactId>smallrye-config-core</artifactId>    <version>2.13.0</version></dependency><dependency>    <groupId>org.jooq</groupId>    <artifactId>jooq</artifactId>    <version>3.18.4</version></dependency><dependency>    <groupId>com.h2database</groupId>    <artifactId>h2</artifactId>    <version>2.1.214</version></dependency><dependency>    <groupId>org.apache.commons</groupId>    <artifactId>commons-dbcp2</artifactId>    <version>2.9.0</version></dependency>\n    ```", "```java\n    DROP TABLE IF EXISTS book;CREATE TABLE book (                      id INT NOT NULL,                      title VARCHAR(400) NOT NULL,                      author VARCHAR(400) NOT NULL,                      release INT,                      CONSTRAINT pk_t_book PRIMARY KEY (id));INSERT INTO book VALUES (1, 'Fundamentals of Software  Architecture', 'Neal Ford' , 2020);INSERT INTO book VALUES (2, 'Staff Engineer:  Leadership beyond the management track', 'Will    Larson' , 2021);INSERT INTO book VALUES (3, 'Building Evolutionary  Architectures', 'Neal Ford' , 2017);INSERT INTO book VALUES (4, 'Clean Code', 'Robert  Cecil Martin' , 2008);INSERT INTO book VALUES (5, 'Patterns of Enterprise  Application Architecture', 'Martin Fowler' , 2002);\n    ```", "```java\n    @ApplicationScopedclass ConnectionSupplier {    private static final Logger LOGGER = Logger      .getLogger(ConnectionSupplier.class.getName());    private static final String URL= \"db.url\";    private static final String USER = \"db.username\";    private static final String PASSWORD =      \"db.password\";    private static final Config CONFIG =      ConfigProvider.getConfig();    @ApplicationScoped    @Produces    public Connection get() throws SQLException {        LOGGER.fine(\"Starting the database          connection\");        var url = CONFIG.getValue(URL, String.class);        var password =          CONFIG.getOptionalValue(PASSWORD,            String.class).orElse(\"\");        var user = CONFIG.getValue(USER,          String.class);        return DriverManager.getConnection(          url, user, password);    }    public void close(@Disposes Connection connection)      throws SQLException {        connection.close();        LOGGER.fine(\"closing the database          connection\");    }}\n    ```", "```java\n    @ApplicationScopedclass ContextSupplier implements Supplier<DSLContext> {    private final Connection connection;    @Inject    ContextSupplier(Connection connection) {        this.connection = connection;    }    @Override    @Produces    public DSLContext get() {        return using(connection, SQLDialect.H2);    }}\n    ```", "```java\n    try (SeContainer container =  SeContainerInitializer.newInstance().initialize()) {    DSLContext context =      container.select(DSLContext.class).get();//...}\n    ```", "```java\n    BookRecord record = context.newRecord(BOOK);record.setId(random.nextInt(0, 100));record.setRelease(2022);record.setAuthor(\"Otavio Santana\");record.setTitle(\"Apache Cassandra Horizontal  scalability for Java applications\");record.store();\n    ```", "```java\n    Result<Record> books = context.select()        .from(BOOK)        .orderBy(BOOK.TITLE)        .fetch();books.forEach(book -> {    var id = book.getValue(BOOK.ID);    var author = book.getValue(BOOK.AUTHOR);    var title = book.getValue(BOOK.TITLE);    var release = book.getValue(BOOK.RELEASE);    System.out.printf(\"Book %s by %s has id: %d and      release: %d%n\",            title, author, id, release);});\n    ```", "```java\n    context.update(BOOK)        .set(BOOK.TITLE, \"Cassandra Horizontal          scalability for Java applications\")        .where(BOOK.ID.eq(randomId))        .execute();context.delete(BOOK)        .where(BOOK.ID.eq(randomId))        .execute();\n    ```"]