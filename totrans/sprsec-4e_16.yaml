- en: '16'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '16'
- en: Migration to Spring Security 6
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迁移到Spring Security 6
- en: In this final chapter, we will review information relating to common migration
    issues when moving from `Spring Security 5.x` to `Spring Security 6.x` contain
    a lot of non-passive refactoring.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最后，我们将回顾与从`Spring Security 5.x`迁移到`Spring Security 6.x`相关的常见迁移问题，这些问题包含大量的非被动重构。
- en: At the end of the chapter, we will also highlight some of the new features that
    can be found in `Spring Security 6.x`. However, we do not explicitly cover changes
    from `Spring Security 5.x` to `Spring Security 6.x`. This is because by explaining
    the differences between this two versions, users should be able to update to `Spring`
    `Security 6.x`.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章末尾，我们还将突出显示`Spring Security 6.x`中可以找到的一些新功能。然而，我们并没有明确涵盖从`Spring Security
    5.x`到`Spring Security 6.x`的变化。这是因为通过解释这两个版本之间的差异，用户应该能够更新到`Spring` `Security 6.x`。
- en: You may be planning to migrate an existing application to `Spring Security 6.x`
    or you may be trying to add functionality to a `Spring Security 5.x` application
    and are looking for guidance in the pages of this book. We’ll try to address both
    of your concerns in this chapter.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能计划将现有应用程序迁移到`Spring Security 6.x`，或者你可能正在尝试向`Spring Security 5.x`应用程序添加功能，并在此书的页面上寻找指导。我们将在此章中尝试解决你的两个问题。
- en: First, we’ll run through the important differences between `Spring Security
    5.x` and `6.x`—both in terms of features and configuration.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将概述`Spring Security 5.x`和`6.x`之间的重要差异——包括功能和配置。
- en: Second, we’ll provide some guidance on mapping configuration or class name changes.
    This will better enable you to translate the examples in the book from `Spring
    Security 6.x` back to `Spring Security 5.x` (where applicable).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，我们将提供一些关于映射配置或类名更改的指导。这将更好地帮助你将书中的示例从`Spring Security 6.x`翻译回`Spring Security
    5.x`（如果适用）。
- en: Important note
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: '`Spring Security 6.x` mandates a migration to **Spring Framework 6** and **Java
    17** or greater.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '`Spring Security 6.x`要求迁移到**Spring Framework 6**和**Java 17**或更高版本。'
- en: Be aware that in many cases, migrating these other components may have a greater
    impact on your application than the upgrade of `Spring Security`!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在许多情况下，迁移这些其他组件可能对你的应用程序的影响比升级`Spring Security`更大！
- en: 'During this chapter, we will cover the following topics:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Reviewing important enhancements in `Spring` `Security 6.x`.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查`Spring` `Security 6.x`中的重要增强。
- en: Understanding configuration changes required in your existing Spring version.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解在现有Spring版本中所需的配置更改。
- en: Reviewing `Spring Security 5.x` applications when moving them to `Spring` `Security
    6.x`.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在将`Spring Security 5.x`应用程序迁移到`Spring` `Security 6.x`时，检查`Spring Security 5.x`应用程序。
- en: Illustrating the overall movement of important classes and packages in `Spring`
    `Security 6.x`.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 展示`Spring` `Security 6.x`中重要类和包的整体迁移情况。
- en: Highlighting some of the new features found in `Spring Security 6.x`. Once you
    have completed the review of this chapter, you will be in a good position to migrate
    an existing application from `Spring Security 5.x` to `Spring` `Security 6.x`.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 突出显示`Spring Security 6.x`中的一些新功能。完成本章的审查后，你将处于良好的位置，可以将现有应用程序从`Spring Security
    5.x`迁移到`Spring` `Security 6.x`。
- en: Migrating from `Spring` `Security 5.x`.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从`Spring` `Security 5.x`迁移。
- en: 'This chapter’s code in action link is here: [https://packt.link/wD0Sk](https://packt.link/wD0Sk).'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码示例链接在此：[https://packt.link/wD0Sk](https://packt.link/wD0Sk)。
- en: Exploit Protection
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 漏洞利用保护
- en: In `Spring Security 5.8`, the default `CsrfTokenRequestHandler` responsible
    for providing the `CsrfToken` to the application is `CsrfTokenRequestAttributeHandler`.
    The default setting for the field `csrfRequestAttributeName` is `null`, leading
    to the loading of the CSRF token on every request.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Spring Security 5.8`中，负责向应用程序提供`CsrfToken`的默认`CsrfTokenRequestHandler`是`CsrfTokenRequestAttributeHandler`。字段`csrfRequestAttributeName`的默认设置是`null`，导致在每次请求时加载CSRF令牌。
- en: Examples of situations where reading the session should be deemed unnecessary
    include endpoints explicitly marked with `permitAll()`, such as static assets,
    static HTML pages, and single-page applications hosted under the same domain/server.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 应当认为读取会话是不必要的情况的示例包括明确标记为`permitAll()`的端点，例如静态资产、静态HTML页面以及位于同一域名/服务器下的单页应用程序。
- en: 'In `Spring Security 6`, `csrfRequestAttributeName` now defaults to `_csrf`.
    If you had configured the following solely for the purpose of transitioning to
    version 6.0, you can now safely remove it:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Spring Security 6`中，`csrfRequestAttributeName`现在默认为`_csrf`。如果你只是为了过渡到6.0版本而配置了以下内容，你现在可以安全地将其删除：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now that we have explored how to define the `CsrfToken`, we will explore how
    to protect against CSRF attacks.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经探讨了如何定义 `CsrfToken`，我们将探讨如何防范 CSRF 攻击。
- en: Protecting against CSRF attacks
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 防范 CSRF 攻击
- en: In `Spring Security 5.8`, the default `CsrfTokenRequestHandler` facilitating
    the availability of `CsrfToken` to the application is `CsrfTokenRequestAttributeHandler`.
    `XorCsrfTokenRequestAttributeHandler` was introduced to enable opting into `CSRF`
    `attack support`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Spring Security 5.8` 中，使 `CsrfToken` 可用于应用程序的默认 `CsrfTokenRequestHandler`
    是 `CsrfTokenRequestAttributeHandler`。`XorCsrfTokenRequestAttributeHandler` 的引入是为了启用
    `CSRF` 攻击支持。
- en: In Spring Security 6, `XorCsrfTokenRequestAttributeHandler` becomes the default
    `CsrfTokenRequestHandler` for providing the `CsrfToken`. If you had configured
    `XorCsrfTokenRequestAttributeHandler` solely for the purpose of transitioning
    to version 6.0, it can now be safely removed.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Spring Security 6 中，`XorCsrfTokenRequestAttributeHandler` 成为提供 `CsrfToken`
    的默认 `CsrfTokenRequestHandler`。如果您仅为了过渡到版本 6.0 而配置了 `XorCsrfTokenRequestAttributeHandler`，现在可以安全地将其移除。
- en: Important note
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: If you’ve set the `csrfRequestAttributeName` to `null` to exclude deferred tokens,
    or if you’ve established a `CsrfTokenRequestHandler` for any particular purpose,
    you can maintain the current configuration.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已将 `csrfRequestAttributeName` 设置为 `null` 以排除延迟令牌，或者如果您已为任何特定目的建立了 `CsrfTokenRequestHandler`，则可以保持当前配置。
- en: CSRF attack with WebSocket support
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 支持 WebSocket 的 CSRF 攻击
- en: In `Spring Security 5.8`, the default `ChannelInterceptor` used to provide the
    `CsrfToken` with WebSocket security is `CsrfChannelInterceptor`. `XorCsrfChannelInterceptor`
    was introduced to enable opting into **CSRF** **attack support**.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Spring Security 5.8` 中，用于提供 `CsrfToken` 并具有 WebSocket 安全性的默认 `ChannelInterceptor`
    是 `CsrfChannelInterceptor`。`XorCsrfChannelInterceptor` 的引入是为了启用 `CSRF` 攻击支持。
- en: In `Spring Security 6`, `XorCsrfChannelInterceptor` becomes the default `ChannelInterceptor`
    for providing the `CsrfToken`. If you had configured `XorCsrfChannelInterceptor`
    solely for the purpose of transitioning to version 6.0, it can now be safely removed.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Spring Security 6` 中，`XorCsrfChannelInterceptor` 成为提供 `CsrfToken` 的默认 `ChannelInterceptor`。如果您仅为了过渡到版本
    6.0 而配置了 `XorCsrfChannelInterceptor`，现在可以安全地将其移除。
- en: After exploring how to protect against CSRF attacks, we will deep dive into
    configuration migration options.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在探讨了如何防范 CSRF 攻击之后，我们将深入探讨配置迁移选项。
- en: Configuration Migrations
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置迁移
- en: The subsequent sections pertain to alterations in configuring `HttpSecurity`,
    `WebSecurity`, and `AuthenticationManager`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 后续章节涉及配置 `HttpSecurity`、`WebSecurity` 和 `AuthenticationManager` 的变更。
- en: Adding @Configuration annotation to @Enable* annotations
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将 `@Configuration` 注解添加到 `@Enable*` 注解中
- en: In version 6.0, the annotations `@EnableWebSecurity`, `@EnableMethodSecurity`,
    `@EnableGlobalMethodSecurity`, and `@EnableGlobalAuthentication` no longer include
    `@Configuration`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在 6.0 版本中，注解 `@EnableWebSecurity`、`@EnableMethodSecurity`、`@EnableGlobalMethodSecurity`
    和 `@EnableGlobalAuthentication` 不再包含 `@Configuration`。
- en: 'For instance, `@EnableWebSecurity` will be modified from:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`@EnableWebSecurity` 将会被修改为：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'to:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 变更为：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: To adapt to this change, wherever you utilize these annotations, you might need
    to add `@Configuration`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为了适应这一变化，无论您在哪里使用这些注解，您可能需要添加 `@Configuration`。
- en: Using the new requestMatchers methods
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用新的请求匹配器方法
- en: In `Spring Security 5.8`, the methods `antMatchers`, `mvcMatchers`, and `regexMatchers`
    were deprecated in favor of the new `requestMatchers` methods.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Spring Security 5.8` 中，`antMatchers`、`mvcMatchers` 和 `regexMatchers` 方法被弃用，以支持新的
    `requestMatchers` 方法。
- en: The introduction of the new `requestMatchers` methods extended to `authorizeHttpRequests`,
    `authorizeRequests`, CSRF configuration, `WebSecurityCustomizer`, and other locations
    with specialized `RequestMatcher` methods. As of `Spring Security 6`, the deprecated
    methods have been removed.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 新的 `requestMatchers` 方法的引入扩展到了 `authorizeHttpRequests`、`authorizeRequests`、CSRF
    配置、`WebSecurityCustomizer` 以及具有专用 `RequestMatcher` 方法的其他位置。截至 `Spring Security
    6`，已弃用的方法已被移除。
- en: The new methods come with more secure defaults by automatically selecting the
    most suitable `RequestMatcher` implementation for your application.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 新的方法通过自动选择最适合您应用程序的 `RequestMatcher` 实现提供了更安全的默认设置。
- en: 'To provide a summary, these methods:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了总结，这些方法：
- en: Opt for the `MvcRequestMatcher` implementation if your application includes
    Spring MVC in the classpath.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您的应用程序包含 Spring MVC 在类路径中，请选择 `MvcRequestMatcher` 实现。
- en: Fall back to the `AntPathRequestMatcher` implementation, in the absence of Spring
    MVC, aligning their behavior with the Kotlin equivalent methods.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果没有Spring MVC，则回退到`AntPathRequestMatcher`实现，使其行为与Kotlin等效方法对齐。
- en: 'The following table should guide you in your migration journey:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格应指导你在迁移过程中的操作：
- en: '| **Spring** **Security 5** | **Spring** **Security 6** |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| **Spring** **Security 5** | **Spring** **Security 6** |'
- en: '| `antMatchers("/api/admin/**")` | `requestMatchers("/api/admin/**")` |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `antMatchers("/api/admin/**")` | `requestMatchers("/api/admin/**")` |'
- en: '| `mvcMatchers("/admin/**")` | `requestMatchers("/admin/**")` |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `mvcMatchers("/admin/**")` | `requestMatchers("/admin/**")` |'
- en: '| `mvcMatchers("/admin").servletPath("/path")` | `requestMatchers(mvcMatcherBuilder.pattern("/admin"))`
    |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `mvcMatchers("/admin").servletPath("/path")` | `requestMatchers(mvcMatcherBuilder.pattern("/admin"))`
    |'
- en: Table 16.1 – Migration to the new requestMatchers
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 表16.1 – 使用新的requestMatchers进行迁移
- en: 'If you encounter difficulties with the new `requestMatchers` methods, you have
    the option to revert to the `RequestMatcher` implementation you were previously
    using. For instance, if you prefer to continue using `AntPathRequestMatcher` and
    `RegexRequestMatcher` implementations, you can utilize the `requestMatchers` method
    that accepts a `RequestMatcher` instance:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在新的`requestMatchers`方法上遇到困难，你可以选择回退到你之前使用的`RequestMatcher`实现。例如，如果你更喜欢继续使用`AntPathRequestMatcher`和`RegexRequestMatcher`实现，你可以使用接受`RequestMatcher`实例的`requestMatchers`方法：
- en: '| **Spring** **Security 5** | **Spring** **Security 6** |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| **Spring** **Security 5** | **Spring** **Security 6** |'
- en: '| `antMatchers("/api/admin/**")` | `requestMatchers(antMatcher("/user/**"))`
    |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `antMatchers("/api/admin/**")` | `requestMatchers(antMatcher("/user/**"))`
    |'
- en: Table 16.2 – Alternatives with the new requestMatchers
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 表16.2 – 使用新的requestMatchers的替代方案
- en: Important note
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Please note that the provided example utilizes static factory methods from `AntPathRequestMatcher`
    and `RegexRequestMatcher` to enhance readability.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，提供的示例使用了来自`AntPathRequestMatcher`和`RegexRequestMatcher`的静态工厂方法来提高可读性。
- en: 'When you are employing the `WebSecurityCustomizer` interface, you can substitute
    the deprecated `antMatchers` methods:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用`WebSecurityCustomizer`接口时，你可以用相应的`requestMatchers`替代方法替换已弃用的`antMatchers`方法：
- en: '[PRE3]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'with their corresponding `requestMatchers` alternatives:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用对应的`requestMatchers`替代方法：
- en: '[PRE4]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Similarly, if you are customizing the `CSRF` configuration to exclude specific
    paths, you can substitute the deprecated methods with the `requestMatchers` counterparts.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果你正在自定义`CSRF`配置以排除特定路径，你可以用`requestMatchers`的对应方法替换已弃用的方法。
- en: Using the new securityMatchers methods
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用新的securityMatchers方法
- en: In `Spring Security 5.8`, the `antMatchers`, `mvcMatchers`, and `requestMatchers`
    methods in `HttpSecurity` underwent deprecation in favor of the new `securityMatchers`
    methods.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Spring Security 5.8`中，`HttpSecurity`中的`antMatchers`、`mvcMatchers`和`requestMatchers`方法被弃用，以支持新的`securityMatchers`方法。
- en: It’s important to note that these methods differ from the `authorizeHttpRequests`
    methods, which were deprecated in favor of the `requestMatchers` methods. However,
    the `securityMatchers` methods share similarities with the `requestMatchers` methods
    in that they automatically select the most suitable `RequestMatcher` implementation
    for your application.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，这些方法与被弃用的`authorizeHttpRequests`方法不同，这些方法被`requestMatchers`方法所取代。然而，`securityMatchers`方法与`requestMatchers`方法有相似之处，即它们会自动选择最适合你应用程序的`RequestMatcher`实现。
- en: 'To elaborate, the new methods:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 为了详细说明，新的方法：
- en: Opt for the `MvcRequestMatcher` implementation if your application includes
    Spring MVC in the classpath.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你的应用程序包含Spring MVC在类路径中，请选择`MvcRequestMatcher`实现。
- en: Fall back to the `AntPathRequestMatcher` implementation, in the absence of Spring
    MVC, aligning their behavior with the Kotlin equivalent methods. The introduction
    of `securityMatchers` methods also serves to prevent confusion with the `requestMatchers`
    methods from `authorizeHttpRequests`.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果没有Spring MVC，则回退到`AntPathRequestMatcher`实现，使其行为与Kotlin等效方法对齐。`securityMatchers`方法的引入也有助于避免与`authorizeHttpRequests`中的`requestMatchers`方法混淆。
- en: 'The following table should guide you in your migration journey where `http`
    is of type `HttpSecurity`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格应指导你在迁移过程中的操作，其中`http`是`HttpSecurity`类型：
- en: '| **Spring** **Security 5** | **Spring** **Security 6** |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| **Spring** **Security 5** | **Spring** **Security 6** |'
- en: '| `http.antMatcher("/api/**")` | `http.securityMatcher("/api/**")` |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `http.antMatcher("/api/**")` | `http.securityMatcher("/api/**")` |'
- en: '| `http.requestMatcher(new MyCustomRequestMatcher())` | `http.securityMatcher(new
    MyCustomRequestMatcher())` |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `http.requestMatcher(new MyCustomRequestMatcher())` | `http.securityMatcher(new
    MyCustomRequestMatcher())` |'
- en: '| `http``.requestMatchers((matchers) ->` `matchers``.``antMatchers("/api/**",
    "/app/**")``.``mvcMatchers("/admin/**")``.``requestMatchers(new MyCustomRequestMatcher()))`
    | `http.securityMatchers((matchers) -> matchers.requestMatchers("/api/**", "/``app/**",
    "/admin/**")``.``requestMatchers(new MyCustomRequestMatcher()))` |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `http``.requestMatchers((matchers) ->` `matchers``.``antMatchers("/api/**",
    "/app/**")``.``mvcMatchers("/admin/**")``.``requestMatchers(new MyCustomRequestMatcher()))`
    | `http.securityMatchers((matchers) -> matchers.requestMatchers("/api/**", "/``app/**",
    "/admin/**")``.``requestMatchers(new MyCustomRequestMatcher()))` |'
- en: Table 16.3 – Migration to the new securityMatchers
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 表 16.3 – 迁移到新的 securityMatchers
- en: 'If you encounter challenges with the automatic selection of `RequestMatcher`
    implementation by the `securityMatchers` methods, you have the option to manually
    choose the `RequestMatcher` implementation yourself:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在使用 `securityMatchers` 方法自动选择 `RequestMatcher` 实现时遇到挑战，你可以选择手动选择 `RequestMatcher`
    实现：
- en: '[PRE5]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: After exploring the new `securityMatchers` methods, we’ll now proceed to examine
    the process of replacing `WebSecurityConfigurerAdapter` in `Spring` `Security
    6.x`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在探索了新的 `securityMatchers` 方法之后，我们现在将探讨在 `Spring Security 6.x` 中替换 `WebSecurityConfigurerAdapter`
    的过程。
- en: Replacing the WebSecurityConfigurerAdapter class
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 替换 WebSecurityConfigurerAdapter 类
- en: The `WebSecurityConfigurerAdapter` class was deprecated and then removed in
    `Spring Security 6.x`. In the following sub-sections, we will explore the impacts
    of this major change.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`WebSecurityConfigurerAdapter` 类在 `Spring Security 6.x` 中已被弃用并移除。在接下来的子章节中，我们将探讨这一重大变化的影响。'
- en: Exposing a SecurityFilterChain Bean
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 暴露 SecurityFilterChain Bean
- en: 'In `Spring Security 5.4`, a new feature was introduced allowing the publication
    of a `SecurityFilterChain` bean instead of extending `WebSecurityConfigurerAdapter`.
    However, in version 6.0, `WebSecurityConfigurerAdapter` has been removed. To accommodate
    this change, you can substitute constructs resembling:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Spring Security 5.4` 中，引入了一个新功能，允许发布 `SecurityFilterChain` Bean 而不是扩展 `WebSecurityConfigurerAdapter`。然而，在
    6.0 版本中，`WebSecurityConfigurerAdapter` 已被移除。为了适应这一变化，你可以替换类似的结构：
- en: '[PRE6]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'with:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下方法：
- en: '[PRE7]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Exposing a WebSecurityCustomizer Bean
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 暴露 WebSecurityCustomizer Bean
- en: '`Spring Security 5.4` introduced `WebSecurityCustomizer` as a replacement for
    `configure(WebSecurity web)` in `WebSecurityConfigurerAdapter`. To prepare for
    its removal, you can update code similar to the following:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`Spring Security 5.4` 引入了 `WebSecurityCustomizer` 作为 `WebSecurityConfigurerAdapter`
    中 `configure(WebSecurity web)` 的替代品。为了准备其移除，你可以更新类似以下代码：'
- en: '[PRE8]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'with:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下方法：
- en: '[PRE9]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Exposing an AuthenticationManager Bean
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 暴露 AuthenticationManager Bean
- en: With the removal of `WebSecurityConfigurerAdapter`, the `configure(AuthenticationManagerBuilder)`
    method is also eliminated.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 `WebSecurityConfigurerAdapter` 的移除，`configure(AuthenticationManagerBuilder)`
    方法也被消除。
- en: LDAP Authentication
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: LDAP 认证
- en: 'When using `auth.ldapAuthentication()` for **Lightweight Directory Access Protocol**
    (**LDAP**) authentication support, you can replace this:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 `auth.ldapAuthentication()` 为 **轻量级目录访问协议 (LDAP**) 认证支持时，你可以替换以下内容：
- en: '[PRE10]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'with:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下方法：
- en: '[PRE11]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: JDBC Authentication
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JDBC 认证
- en: 'If you are currently utilizing `auth.jdbcAuthentication()` for **Java Database
    Connectivity** (**JDBC**) authentication support, you can substitute:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你目前正使用 `auth.jdbcAuthentication()` 为 **Java 数据库连接 (JDBC**) 认证支持提供支持，你可以替换：
- en: '[PRE12]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'with:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下方法：
- en: '[PRE13]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In-Memory Authentication
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内存认证
- en: 'If you are currently utilizing `auth.inMemoryAuthentication()` for in-memory
    `Authentication` support, you can replace:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你目前正使用 `auth.inMemoryAuthentication()` 为内存 `Authentication` 支持提供支持，你可以替换：
- en: '[PRE14]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'with:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下方法：
- en: '[PRE15]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: After exploring the impacts of `WebSecurityConfigurerAdapter` removal, we will
    delve into updates regarding password encoding.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在探索 `WebSecurityConfigurerAdapter` 移除的影响之后，我们将深入了解密码编码的更新。
- en: Password Encoding Updates
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 密码编码更新
- en: In `Spring Security 6.0`, the minimum requirements for password encoding have
    been revised for **PBKDF2**, **SCrypt**, and **Argon2**.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Spring Security 6.0` 中，对密码编码的最小要求已被修订，以适应 **PBKDF2**、**SCrypt** 和 **Argon2**。
- en: If you use the default password encoder, there’s no need to follow any preparatory
    steps, and you can skip this section.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用默认的密码编码器，则无需遵循任何准备步骤，你可以跳过这一部分。
- en: Pbkdf2PasswordEncoder updates
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Pbkdf2PasswordEncoder 更新
- en: 'If you are using `Pbkdf2PasswordEncoder`, the constructors have been substituted
    with static factories that correspond to the `Spring Security` version relevant
    to the provided settings:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用 `Pbkdf2PasswordEncoder`，构造函数已被替换为与提供的设置相关的 `Spring Security` 版本相对应的静态工厂：
- en: '[PRE16]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'And if you have custom settings, use the constructor that specifies all settings:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有自定义设置，请使用指定所有设置的构造函数：
- en: '[PRE17]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: SCryptPasswordEncoder Updates
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SCryptPasswordEncoder 更新
- en: If you are employing `SCryptPasswordEncoder`, the constructors have been substituted
    with static factories that correspond to the `Spring Security` version associated
    with the provided settings.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用 `SCryptPasswordEncoder`，构造函数已被替换为与提供的设置关联的 `Spring Security` 版本的静态工厂。
- en: 'Your initial step should be to modify the deprecated constructor:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 您的第一步应该是修改已弃用的构造函数：
- en: '[PRE18]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Argon2PasswordEncoder Updates
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Argon2PasswordEncoder 更新
- en: 'If you are using `Argon2PasswordEncoder`, the constructors have been substituted
    with static factories that correspond to the `Spring Security` version associated
    with the provided settings. For example:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用 `Argon2PasswordEncoder`，构造函数已被替换为与提供的设置关联的 `Spring Security` 版本的静态工厂。例如：
- en: '[PRE19]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Delegating PasswordEncoder usage
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 委派 PasswordEncoder 使用
- en: 'If you haven’t employed the deprecated constructor, it’s essential to update
    your code to adhere to the latest standards. This entails configuring the `DelegatingPasswordEncoder`
    to identify passwords that adhere to current standards and update them to the
    latest ones. The following example using `Pbkdf2PasswordEncoder` can also be applied
    to `SCryptPasswordEncoder` or `Argon2PasswordEncoder`:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有使用已弃用的构造函数，更新你的代码以符合最新标准是至关重要的。这包括配置 `DelegatingPasswordEncoder` 以识别符合当前标准的密码并将它们更新到最新版本。以下使用
    `Pbkdf2PasswordEncoder` 的示例也可以应用于 `SCryptPasswordEncoder` 或 `Argon2PasswordEncoder`：
- en: '[PRE20]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Abandoning Encryptors.queryableText
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 弃用 Encryptors.queryableText
- en: The use of `Encryptors.queryableText(CharSequence,` `CharSequence)` is considered
    unsafe as identical input data will yield the same output (CVE-2020-5408 - [https://github.com/advisories/GHSA-2ppp-9496-p23q](https://github.com/advisories/GHSA-2ppp-9496-p23q)).e
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `Encryptors.queryableText(CharSequence,` `CharSequence)` 被认为是不可安全的，因为相同的输入数据将产生相同的输出（CVE-2020-5408
    - [https://github.com/advisories/GHSA-2ppp-9496-p23q](https://github.com/advisories/GHSA-2ppp-9496-p23q))。
- en: '`Spring Security 6.x` no longer endorses data encryption through this method.
    To facilitate the upgrade, you must either re-encrypt the data using a supported
    mechanism or store it in a decrypted form.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`Spring Security 6.x` 不再支持通过此方法进行数据加密。为了方便升级，你必须使用支持的机制重新加密数据或将数据以解密形式存储。'
- en: Following the examination of password encoding updates, we will delve into the
    details of session management updates.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在检查密码编码更新之后，我们将深入了解会话管理更新的细节。
- en: Session Management Updates
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 会话管理更新
- en: In the upcoming sections, we’ll thoroughly examine session management updates,
    encompassing the primary deprecations and modifications.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将详细检查会话管理更新，包括主要的弃用和修改。
- en: Requiring Explicit Saving of SecurityContextRepository
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 强制保存 SecurityContextRepository
- en: In `Spring Security 5`, the default process involves automatically saving the
    `SecurityContext` to the `SecurityContextRepository` through the `SecurityContextPersistenceFilter`.
    This saving occurs just before the `HttpServletResponse` is committed and right
    before the `SecurityContextPersistenceFilter`. However, this automatic persistence
    can catch users off guard, especially when performed just before the request completes
    (i.e., prior to committing the `HttpServletResponse`). It also introduces complexity
    in tracking the state to determine the necessity of saving, leading to unnecessary
    writes to the `SecurityContextRepository` (e.g., `HttpSession`) at times.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Spring Security 5` 中，默认过程涉及通过 `SecurityContextPersistenceFilter` 自动将 `SecurityContext`
    保存到 `SecurityContextRepository`。这种保存发生在 `HttpServletResponse` 提交之前，就在 `SecurityContextPersistenceFilter`
    之前。然而，这种自动持久化可能会让用户措手不及，尤其是在请求完成之前（即在提交 `HttpServletResponse` 之前）执行。它还引入了跟踪状态的复杂性，以确定保存的必要性，有时会导致对
    `SecurityContextRepository`（例如，`HttpSession`）的不必要写入。
- en: With the advent of `Spring Security 6`, the default behavior has shifted. The
    `SecurityContextHolderFilter` will now solely read the `SecurityContext` from
    the `SecurityContextRepository` and populate it in the `SecurityContextHolder`.
    Users are now required to explicitly save the `SecurityContext` using the `SecurityContextRepository`
    if they wish for the `SecurityContext` to persist between requests. This modification
    eliminates ambiguity and enhances performance by mandating writes to the `SecurityContextRepository`
    (e.g., `HttpSession`) only when necessary.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 `Spring Security 6` 的推出，默认行为发生了变化。`SecurityContextHolderFilter` 现在将仅从 `SecurityContextRepository`
    读取 `SecurityContext` 并将其填充到 `SecurityContextHolder` 中。如果用户希望 `SecurityContext`
    在请求之间持续存在，他们现在必须显式使用 `SecurityContextRepository` 保存 `SecurityContext`。此修改通过仅在必要时强制写入
    `SecurityContextRepository`（例如，`HttpSession`）来消除歧义并提高性能。
- en: 'To opt into the new `Spring Security 6` default, the following configuration
    can be used:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 要选择使用新的`Spring Security 6`默认设置，可以使用以下配置：
- en: '[PRE21]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: When using the configuration, it is crucial that any code responsible for setting
    the `SecurityContextHolder` with a `SecurityContext` also ensures the saving of
    the `SecurityContext` to the `SecurityContextRepository` if persistence between
    requests is required.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用此配置时，任何负责使用`SecurityContext`设置`SecurityContextHolder`的代码都必须确保在请求之间需要持久化时将`SecurityContext`保存到`SecurityContextRepository`。
- en: 'For example, the following code:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下代码：
- en: '[PRE22]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'should be replaced with:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 应该替换为：
- en: '[PRE23]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Changing HttpSessionSecurityContextRepository to DelegatingSecurityContextRepository
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将HttpSessionSecurityContextRepository更改为DelegatingSecurityContextRepository
- en: In `Spring Security 5`, the default `SecurityContextRepository` is `HttpSessionSecurityContextRepository`.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Spring Security 5`中，默认的`SecurityContextRepository`是`HttpSessionSecurityContextRepository`。
- en: 'In `Spring Security 6`, the default `SecurityContextRepository` is `DelegatingSecurityContextRepository`.
    To adopt the new `Spring Security 6` default, the following configuration can
    be utilized:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Spring Security 6`中，默认的`SecurityContextRepository`是`DelegatingSecurityContextRepository`。要采用新的`Spring
    Security 6`默认设置，可以使用以下配置：
- en: '[PRE24]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Addressing SecurityContextRepository Deprecations
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解决SecurityContextRepository弃用问题
- en: 'In `Spring Security 6`, the following method in the class `SecurityContextRepository`
    has been deprecated:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Spring Security 6`中，`SecurityContextRepository`类中的以下方法已被弃用：
- en: '[PRE25]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The method should be replaced with the following:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 应该替换为以下方法：
- en: '[PRE26]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Improving Querying of RequestCache
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 改进RequestCache的查询
- en: In `Spring Security 5`, the standard procedure involves querying the saved request
    with every incoming request. In a typical configuration, this implies that the
    `HttpSession` is consulted on each request to utilize the `RequestCache`.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Spring Security 5`中，标准程序涉及在每个传入请求中查询保存的请求。在典型配置中，这意味着每个请求都会咨询`HttpSession`以利用`RequestCache`。
- en: In `Spring Security 6`, the new default is such that the `RequestCache` will
    only be interrogated for a cached request if the HTTP parameter `continue` is
    explicitly defined. This approach enables `Spring Security` to skip unnecessary
    reads of the `HttpSession` when working with the `RequestCache`.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Spring Security 6`中，新的默认设置是仅在HTTP参数`continue`明确定义时才会查询缓存的请求。这种方法使`Spring Security`能够在与`RequestCache`一起工作时跳过不必要的`HttpSession`读取。
- en: Requiring Explicit Invocation of SessionAuthenticationStrategy
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 需要显式调用SessionAuthenticationStrategy
- en: In `Spring Security 5`, the standard configuration depends on the `SessionManagementFilter`
    to identify whether a user has recently authenticated and to trigger the `SessionAuthenticationStrategy`.
    However, this setup entails reading the `HttpSession` for every request in a typical
    scenario.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Spring Security 5`中，标准配置依赖于`SessionManagementFilter`来识别用户是否最近进行了认证以及触发`SessionAuthenticationStrategy`。然而，在这种设置中，在典型场景下，每个请求都需要读取`HttpSession`。
- en: In `Spring Security 6`, the new default is for authentication mechanisms to
    directly invoke the `SessionAuthenticationStrategy`. Consequently, there is no
    requirement to identify when authentication occurs, eliminating the need to read
    the `HttpSession` for every request.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Spring Security 6`中，新的默认设置是认证机制直接调用`SessionAuthenticationStrategy`。因此，不需要识别何时发生认证，消除了在每个请求中读取`HttpSession`的需求。
- en: Following the investigation of session management updates, we will delve deeply
    into authentication updates.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在调查会话管理更新之后，我们将深入探讨认证更新。
- en: Authentication Updates
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 认证更新
- en: We’ll examine the main updates in authentication, including the adoption of
    `SHA-256` for `Remember Me` functionality and enhancements related to `AuthenticationServiceExceptions`.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将检查认证的主要更新，包括采用`SHA-256`用于`Remember Me`功能以及与`AuthenticationServiceExceptions`相关的增强。
- en: Utilizing SHA-256 for Remember Me
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用SHA-256实现Remember Me
- en: The `TokenBasedRememberMeServices` implementation in `Spring Security 6` now
    defaults to using `SHA-256` for `Remember Me` tokens, enhancing the default security
    stance. This change is motivated by the recognition of `MD5` as a weak hashing
    algorithm susceptible to collision attacks and modular differential attacks.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`Spring Security 6`中`TokenBasedRememberMeServices`实现现在默认使用`SHA-256`用于`Remember
    Me`令牌，增强了默认的安全立场。这一变化是由于认识到`MD5`是一个易受碰撞攻击和模差攻击的弱散列算法。'
- en: The newly generated tokens include information about the algorithm used for
    token generation. This information is leveraged for matching purposes. If the
    algorithm name is absent, the `matchingAlgorithm` property is employed to verify
    the token. This design allows for a seamless transition from `MD5` to `SHA-256`.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 新生成的令牌包括有关用于令牌生成的算法的信息。此信息被用于匹配目的。如果算法名称不存在，则使用 `matchingAlgorithm` 属性来验证令牌。这种设计允许从
    `MD5` 无缝过渡到 `SHA-256`。
- en: 'The following code shows how you can enable `Remember Me` feature, with the
    default implementation:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了如何启用 `Remember Me` 功能，使用默认实现：
- en: '[PRE27]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'To embrace the new `Spring Security 6` default for encoding tokens while maintaining
    compatibility with `MD5`-encoded tokens, you can set the `encodingAlgorithm` property
    to `SHA-256` and the `matchingAlgorithm` property to `MD5`:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 为了接受新的 `Spring Security 6` 默认编码令牌，同时保持与 `MD5` 编码令牌的兼容性，你可以将 `encodingAlgorithm`
    属性设置为 `SHA-256`，并将 `matchingAlgorithm` 属性设置为 `MD5`：
- en: '[PRE28]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Propagating AuthenticationServiceExceptions
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 传播 `AuthenticationServiceExceptions`
- en: The `AuthenticationFilter` forwards `AuthenticationServiceException` to the
    `AuthenticationEntryPoint`. As `AuthenticationServiceExceptions` indicate a server-side
    error rather than a client-side error, in version 6.0, this mechanism is adjusted
    to propagate them to the container.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`AuthenticationFilter` 将 `AuthenticationServiceException` 转发到 `AuthenticationEntryPoint`。由于
    `AuthenticationServiceExceptions` 表示服务器端错误而不是客户端错误，在 6.0 版本中，此机制被调整为将它们传播到容器中。'
- en: 'Therefore, if you had previously enabled this behavior by setting `rethrowAuthenticationServiceException`
    to `true`, you can now eliminate it as follows:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果你之前通过将 `rethrowAuthenticationServiceException` 设置为 `true` 来启用了此行为，你现在可以按照以下方式消除它：
- en: '[PRE29]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'This can be changed to:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以改为：
- en: '[PRE30]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Following the examination of authentication updates, we will delve deeply into
    authorization updates.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在审查认证更新之后，我们将深入探讨授权更新。
- en: Authorization Updates
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 授权更新
- en: In this section, we will explore several key enhancements in authorization management
    within `Spring Security`. We’ll begin by discussing how to utilize the `AuthorizationManager`
    for `Method Security`, enabling fine-grained control over method-level access.
    Next, we’ll delve into leveraging the `AuthorizationManager` for message security,
    facilitating secure communication over messaging protocols. Additionally, we’ll
    highlight some deprecations like `AbstractSecurityWebSocketMessageBrokerConfigurer`.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨 `Spring Security` 中授权管理的几个关键增强。我们将首先讨论如何利用 `AuthorizationManager`
    进行 `Method Security`，以实现对方法级访问的细粒度控制。接下来，我们将深入探讨利用 `AuthorizationManager` 进行消息安全性，以促进通过消息协议的安全通信。此外，我们还将突出一些弃用，如
    `AbstractSecurityWebSocketMessageBrokerConfigurer`。
- en: Leveraging AuthorizationManager for Method Security
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 利用 `AuthorizationManager` 进行方法安全性
- en: '`AuthorizationManager` API and direct utilization of **Spring AOP**.'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '`AuthorizationManager` API 和直接使用 **Spring AOP**。'
- en: In case you encounter challenges while implementing these adjustments, it’s
    essential to note that even though `@EnableGlobalMethodSecurity` is deprecated,
    it has not been removed in version 6.0\. This ensures you have the option to opt
    out by continuing to use the deprecated annotation.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在实施这些调整时遇到挑战，请注意，尽管 `@EnableGlobalMethodSecurity` 已被弃用，但在 6.0 版本中尚未移除。这确保了你可以通过继续使用弃用的注解来选择退出。
- en: Replacing Global Method Security with Method Security
  id: totrans-182
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 将全局方法安全性与方法安全性替换
- en: '`@EnableGlobalMethodSecurity` and `<global-method-security>` are now deprecated
    in favor of `@EnableMethodSecurity` and `<method-security>`, respectively. The
    updated annotation and XML element automatically activate Spring’s pre-post annotations
    and internally utilize `AuthorizationManager`.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`@EnableGlobalMethodSecurity` 和 `<global-method-security>` 现已弃用，分别由 `@EnableMethodSecurity`
    和 `<method-security>` 取代。更新的注解和 XML 元素自动激活 Spring 的 pre-post 注解，并内部使用 `AuthorizationManager`。'
- en: Changing the order value in @EnableTransactionManagement
  id: totrans-184
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在 `@EnableTransactionManagement` 中更改顺序值
- en: '`@EnableTransactionManagement` and `@EnableGlobalMethodSecurity` both have
    the same order value, `Integer.MAX_VALUE`. As a result, their relative order in
    the Spring AOP `Advisor` chain is undefined.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`@EnableTransactionManagement` 和 `@EnableGlobalMethodSecurity` 都具有相同的顺序值 `Integer.MAX_VALUE`。因此，它们在
    Spring AOP `Advisor` 链中的相对顺序是未定义的。'
- en: While this is generally acceptable, as most **Method Security** expressions
    don’t rely on an open transaction to function correctly, there were historical
    cases where it was necessary to ensure a specific order by setting their order
    values.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这通常是可接受的，因为大多数 **Method Security** 表达式不依赖于开放事务来正确运行，但历史上有些情况下需要通过设置它们的顺序值来确保特定的顺序。
- en: On the contrary, `@EnableMethodSecurity` lacks an order value because it dispatches
    multiple interceptors. Unlike `@EnableTransactionManagement`, it cannot maintain
    backward compatibility, as it cannot position all interceptors within the same
    advisor chain location.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，`@EnableMethodSecurity` 由于它调度多个拦截器而没有顺序值。与 `@EnableTransactionManagement`
    不同，它无法保持向后兼容，因为它无法将所有拦截器放置在同一个顾问链位置。
- en: Instead, the order values for the `@EnableMethodSecurity` interceptors are based
    on an offset of `0`. For example, the `@PreFilter` interceptor has an order of
    `100`, `@PostAuthorize` has an order of `200`, and so forth.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，`@EnableMethodSecurity` 拦截器的顺序值基于偏移量 `0`。例如，`@PreFilter` 拦截器的顺序为 `100`，`@PostAuthorize`
    的顺序为 `200`，依此类推。
- en: 'If, after updating, you discover that your `Method Security` expressions are
    not functioning due to a lack of an open transaction, please modify your transaction
    annotation definition as the following:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 如果更新后您发现由于缺少开放事务，您的 `Method Security` 表达式无法正常工作，请修改您的交易注解定义如下：
- en: '[PRE31]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Using a Custom @Bean instead of subclassing DefaultMethodSecurityExpressionHandler
  id: totrans-191
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用自定义 @Bean 而不是继承 DefaultMethodSecurityExpressionHandler
- en: For performance optimization, a new method has been added to `MethodSecurityExpressionHandler`
    that accepts a `Supplier<Authentication>` instead of an `Authentication`.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 为了性能优化，`MethodSecurityExpressionHandler` 已添加了一个新方法，该方法接受一个 `Supplier<Authentication>`
    而不是 `Authentication`。
- en: This enhancement allows `Spring Security` to defer the `Authentication` lookup
    and is automatically utilized when employing `@EnableMethodSecurity` instead of
    `@EnableGlobalMethodSecurity`.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 此增强功能允许 `Spring Security` 延迟 `Authentication` 查找，并在使用 `@EnableMethodSecurity`
    而不是 `@EnableGlobalMethodSecurity` 时自动使用。
- en: 'For instance, suppose you aim for a customized evaluation of `@PostAuthorize("hasAuthority(''ADMIN'')")`.
    In such a case, you can create a custom `@Bean` as demonstrated here:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设您希望对 `@PostAuthorize("hasAuthority('ADMIN')")` 进行自定义评估。在这种情况下，您可以创建一个自定义
    `@Bean`，如下所示：
- en: '[PRE32]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Subsequently, reference it in the annotation as follows:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在注解中引用它，如下所示：
- en: '[PRE33]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Exposing a MethodSecurityExpressionHandler instead of a PermissionEvaluator
  id: totrans-198
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 替换权限评估器以公开 MethodSecurityExpressionHandler
- en: '`@EnableMethodSecurity` does not automatically detect a `PermissionEvaluator`
    to keep its API straightforward.'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`@EnableMethodSecurity` 不会自动检测 `PermissionEvaluator` 以保持其 API 简洁。'
- en: 'If you have a custom `PermissionEvaluator` declared as a `@Bean`, please update
    it from:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已将自定义 `PermissionEvaluator` 声明为 `@Bean`，请将其更新如下：
- en: '[PRE34]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'to:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 更改为：
- en: '[PRE35]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Substituting any custom AccessDecisionManagers in Method Security
  id: totrans-204
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在方法安全中替换任何自定义 AccessDecisionManagers
- en: Your application might feature a custom `AccessDecisionManager` or `AccessDecisionVoter`
    configuration. The approach to adaptation will vary depending on the specific
    purpose of each configuration. Continue reading to identify the most suitable
    adjustment for your scenario.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 您的应用程序可能具有自定义的 `AccessDecisionManager` 或 `AccessDecisionVoter` 配置。适应方法将根据每个配置的具体目的而有所不同。继续阅读以确定最适合您场景的调整。
- en: UnanimousBased use case
  id: totrans-206
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 基于共识的使用案例
- en: If your application utilizes `UnanimousBased` with the default voters, you probably
    won’t need to make any changes since unanimous-based is the default behavior with
    `@EnableMethodSecurity`.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的应用程序使用默认投票者的 `UnanimousBased`，您可能不需要进行任何更改，因为基于一致性的默认行为与 `@EnableMethodSecurity`
    相同。
- en: Nevertheless, if you find that the default authorization managers are not suitable,
    you can utilize `AuthorizationManagers.allOf` to construct your custom configuration.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果您发现默认的授权管理器不适合，您可以使用 `AuthorizationManagers.allOf` 来构建您的自定义配置。
- en: AffirmativeBased use case
  id: totrans-209
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 基于肯定的使用案例
- en: 'If your application relies on `AffirmativeBased`, you can create an equivalent
    `AuthorizationManager` as follows:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的应用程序依赖于 `AffirmativeBased`，您可以创建一个等效的 `AuthorizationManager`，如下所示：
- en: '[PRE36]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: ConsensusBased use case
  id: totrans-212
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 基于共识的使用案例
- en: For `ConsensusBased`, there is no built-in equivalent provided by the framework.
    In this scenario, you should implement a composite `AuthorizationManager` that
    considers the set of delegate `AuthorizationManager` instances.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `ConsensusBased`，框架没有提供内置的等效功能。在这种情况下，您应该实现一个组合 `AuthorizationManager`，该
    `AuthorizationManager` 考虑到委托 `AuthorizationManager` 实例的集合。
- en: AccessDecisionVoter use case
  id: totrans-214
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: AccessDecisionVoter用例
- en: 'You can either modify the class to implement `AuthorizationManager` or create
    an adapter as follows:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以修改类以实现`AuthorizationManager`或创建如下适配器：
- en: '[PRE37]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: AfterInvocationManager or AfterInvocationProvider use case
  id: totrans-217
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: AfterInvocationManager或AfterInvocationProvider用例
- en: '`AfterInvocationManager` and `AfterInvocationProvider` are responsible for
    making an authorization decision regarding the result of an invocation. For instance,
    in the context of method invocation, they determine the authorization of a method’s
    return value.'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '`AfterInvocationManager`和`AfterInvocationProvider`负责对调用结果进行授权决策。例如，在方法调用的上下文中，它们确定方法返回值的授权。'
- en: In `Spring Security 3.0`, the decision-making process for authorization was
    standardized through the `@PostAuthorize` and `@PostFilter` annotations. `@PostAuthorize`
    is used to determine whether the entire return value is allowed to be returned.
    On the other hand, `@PostFilter` is employed to filter individual entries from
    a returned collection, array, or stream.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Spring Security 3.0`中，授权的决策过程通过`@PostAuthorize`和`@PostFilter`注解进行了标准化。`@PostAuthorize`用于确定整个返回值是否允许返回。另一方面，`@PostFilter`用于从返回的集合、数组或流中过滤单个条目。
- en: These two annotations should fulfill most requirements, and there is encouragement
    to transition to one or both of them as `AfterInvocationProvider` and `AfterInvocationManager`
    are now deprecated.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个注解应该能满足大多数需求，并且鼓励过渡到其中一个或两个，因为`AfterInvocationProvider`和`AfterInvocationManager`现在已被弃用。
- en: RunAsManager use case
  id: totrans-221
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: RunAsManager用例
- en: At present, there is no direct substitute for `RunAsManager`, although the possibility
    of introducing one is under consideration.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 目前还没有`RunAsManager`的直接替代品，尽管正在考虑引入一个。
- en: However, if required, it is relatively simple to modify a `RunAsManager` to
    align with the `AuthorizationManager` API.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果需要，修改`RunAsManager`以与`AuthorizationManager` API保持一致相对简单。
- en: 'Here is some pseudocode to assist you in getting started:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些伪代码可以帮助你开始：
- en: '[PRE38]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Verifying for AnnotationConfigurationException
  id: totrans-226
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 验证AnnotationConfigurationException
- en: '`@EnableMethodSecurity` and `<method-security>` enable more stringent enforcement
    of `Spring Security`’s non-repeatable or otherwise incompatible annotations. If
    you encounter `AnnotationConfigurationException` in your logs after transitioning
    to either, follow the instructions provided in the exception message to rectify
    your application’s `Method Security` annotation usage.'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '`@EnableMethodSecurity`和`<method-security>`启用对`Spring Security`的非重复或不可兼容注解的更严格执行。如果你在过渡到任一配置后在日志中遇到`AnnotationConfigurationException`，请按照异常消息中提供的说明来纠正应用程序的`方法安全`注解使用。'
- en: Leveraging AuthorizationManager for Message Security
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 利用AuthorizationManager进行消息安全
- en: Message Security has been enhanced with the `AuthorizationManager` API and direct
    utilization of Spring AOP.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 消息安全通过`AuthorizationManager` API和直接使用Spring AOP得到了增强。
- en: 'To configure the `AuthorizationManager` for Message Security, you will need
    to follow the steps below:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 要为消息安全配置`AuthorizationManager`，你需要遵循以下步骤：
- en: 'Ensure all messages have defined authorization rules:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保所有消息都定义了授权规则：
- en: '[PRE39]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Add `@``EnableWebSocketSecurity` annotation.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`@EnableWebSocketSecurity`注解。
- en: 'Utilize an instance of `AuthorizationManager<Message<?>>`:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`AuthorizationManager<Message<?>>`的实例：
- en: '[PRE40]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Now we’ve examined the `AuthorizationManager` configuration for Message Security,
    we’ll delve into the modifications associated with `AbstractSecurityWebSocketMessageBrokerConfigurer`.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经检查了消息安全的`AuthorizationManager`配置，我们将深入了解与`AbstractSecurityWebSocketMessageBrokerConfigurer`相关的修改。
- en: Deprecating AbstractSecurityWebSocketMessageBrokerConfigurer
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弃用AbstractSecurityWebSocketMessageBrokerConfigurer
- en: If you are employing Java configuration, you can now directly extend `WebSocketMessageBrokerConfigurer`.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用Java配置，你现在可以直接扩展`WebSocketMessageBrokerConfigurer`。
- en: 'For instance, if your class is extending `AbstractSecurityWebSocketMessageBrokerConfigurer`
    is named `WebSocketSecurityConfig`, then replace it with the following:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你的类扩展了`AbstractSecurityWebSocketMessageBrokerConfigurer`并命名为`WebSocketSecurityConfig`，那么可以替换为以下内容：
- en: '[PRE41]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Having clarified the reasons for discontinuing the implementation of `AbstractSecurityWebSocketMessageBrokerConfigurer`,
    let’s now delve into the utilization of `AuthorizationManager` for request security.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在明确了弃用`AbstractSecurityWebSocketMessageBrokerConfigurer`实现的原因之后，现在让我们深入了解利用`AuthorizationManager`进行请求安全的使用。
- en: Employing AuthorizationManager for Request Security
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 利用AuthorizationManager进行请求安全
- en: HTTP Request Security has been streamlined with the `AuthorizationManager` API.
    We will explain `AuthorizationManager` changes for security requests in `Spring`
    `Security 6.x.`
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `AuthorizationManager` API 简化了 HTTP 请求安全。我们将在 `Spring` `Security 6.x` 中解释
    `AuthorizationManager` 对安全请求的更改。
- en: Ensure that all requests have well-defined authorization rules
  id: totrans-244
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 确保所有请求都有明确的授权规则
- en: In `Spring Security 5.8` and earlier, requests without an authorization rule
    are allowed by default. However, for a more robust security posture, the default
    approach is to deny by default in `Spring Security 6.0`. This means that any request
    lacking an explicit authorization rule will be denied by default.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Spring Security 5.8` 及更早版本中，默认允许没有授权规则的请求。然而，为了更健壮的安全态势，`Spring Security
    6.0` 的默认做法是默认拒绝。这意味着任何缺少显式授权规则的请求将默认被拒绝。
- en: 'If you already have an `anyRequest` rule in place that meets your requirements,
    you can skip this step:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经有一个满足你要求的 `anyRequest` 规则，你可以跳过此步骤：
- en: '[PRE42]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: If you have already transitioned to `authorizeHttpRequests`, the recommended
    modification remains the same.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经转换到 `authorizeHttpRequests`，推荐的修改保持不变。
- en: Transitioning to AuthorizationManager
  id: totrans-249
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 转换到 AuthorizationManager
- en: 'To adopt the use of `AuthorizationManager`, you can utilize `authorizeHttpRequests`
    for Java configuration or use `use-authorization-manager` for XML configuration:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 要采用 `AuthorizationManager` 的使用，你可以使用 Java 配置中的 `authorizeHttpRequests` 或使用 XML
    配置中的 `use-authorization-manager`：
- en: '[PRE43]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Migrating from hasIpAddress to access(AuthorizationManager)
  id: totrans-252
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从 hasIpAddress 迁移到 access(AuthorizationManager)
- en: 'To migrate from `hasIpAddress` to `access(AuthorizationManager)`, use:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 要从 `hasIpAddress` 迁移到 `access(AuthorizationManager)`，请使用：
- en: '[PRE44]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Important note
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Securing by IP address is inherently delicate. Therefore, there are no intentions
    to transfer this support to `authorizeHttpRequests`.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 IP 地址进行安全保护本质上是微妙的。因此，没有意向将此支持转移到 `authorizeHttpRequests`。
- en: Transitioning SpEL expressions to AuthorizationManager
  id: totrans-257
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将 SpEL 表达式转换为 AuthorizationManager
- en: When it comes to authorization rules, Java is generally more straightforward
    to test and maintain than SpEL. Consequently, `authorizeHttpRequests` does not
    provide a method for declaring a String SpEL. Instead, you can create your own
    `AuthorizationManager` implementation or utilize `WebExpressionAuthorizationManager`.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到授权规则时，Java 通常比 SpEL 更容易测试和维护。因此，`authorizeHttpRequests` 不提供声明 String SpEL
    的方法。相反，你可以创建自己的 `AuthorizationManager` 实现或使用 `WebExpressionAuthorizationManager`。
- en: '| **SpEL** | **AuthorizationManager** | **WebExpressionAuthorizationManager**
    |'
  id: totrans-259
  prefs: []
  type: TYPE_TB
  zh: '| **SpEL** | **AuthorizationManager** | **WebExpressionAuthorizationManager**
    |'
- en: '| `mvcMatchers("/complicated/**").access("hasRole` **(''ADMIN'') &#124;&#124;**
    `hasAuthority (''SCOPE_read'')")` | `mvcMatchers("/complicated/**").access(anyOf(hasRole`
    **("ADMIN"),** `hasAuthority ("SCOPE_read"))` | `mvcMatchers("/complicated/**").access`
    **(**`new WebExpressionAuthorization` **Manager("hasRole(''ADMIN'') &#124;&#124;**
    `hasAuthority(''SCOPE_read'')"))` |'
  id: totrans-260
  prefs: []
  type: TYPE_TB
  zh: '| `mvcMatchers("/complicated/**").access("hasRole` **(''ADMIN'') &#124;&#124;**
    `hasAuthority (''SCOPE_read'')")` | `mvcMatchers("/complicated/**").access(anyOf(hasRole`
    **("ADMIN"),** `hasAuthority ("SCOPE_read"))` | `mvcMatchers("/complicated/**").access`
    **(**`new WebExpressionAuthorization` **Manager("hasRole(''ADMIN'') &#124;&#124;**
    `hasAuthority(''SCOPE_read'')"))` |'
- en: Table 16.4 – SpEL migration options
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 表 16.4 – SpEL 迁移选项
- en: Transitioning to filtering all dispatcher types
  id: totrans-262
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 转换为过滤所有调度器类型
- en: In `Spring Security 5.8` and earlier, authorization is executed only once per
    request. Consequently, dispatcher types like `FORWARD` and `INCLUDE` that run
    after `REQUEST` are not secured by default. It is advisable for `Spring Security`
    to secure all dispatcher types. Therefore, in version 6.0, `Spring Security` modifies
    this default behavior.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Spring Security 5.8` 及更早版本中，授权仅在每次请求中执行一次。因此，在 `REQUEST` 之后运行的调度器类型如 `FORWARD`
    和 `INCLUDE` 默认不受保护。建议 `Spring Security` 保护所有调度器类型。因此，在 6.0 版本中，`Spring Security`
    修改了此默认行为。
- en: 'To do this, you should change:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，你应该更改：
- en: '[PRE45]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'to:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 转换为：
- en: '[PRE46]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Then, set:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，设置：
- en: '[PRE47]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'If you’re using the `AbstractSecurityWebApplicationInitializer`, it’s recommended
    to override the `getSecurityDispatcherTypes` method and return all dispatcher
    types:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 `AbstractSecurityWebApplicationInitializer`，建议重写 `getSecurityDispatcherTypes`
    方法并返回所有调度器类型：
- en: '[PRE48]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Allowing FORWARD when employing Spring MVC
  id: totrans-272
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在使用 Spring MVC 时允许 FORWARD
- en: When Spring MVC identifies a mapping between the view name and the actual views,
    it initiates a forward to the view. As demonstrated in the previous section, `Spring
    Security 6.0` will, by default, apply authorization to `FORWARD` requests.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Spring MVC 识别出视图名称与实际视图之间的映射时，它将启动对视图的转发。如前节所示，`Spring Security 6.0` 默认将对
    `FORWARD` 请求应用授权。
- en: Substituting any custom filter-security AccessDecisionManager
  id: totrans-274
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 替换任何自定义filter-security AccessDecisionManager
- en: In this section, we will explore the different use cases to substitute custom
    filter-security based on `AccessDecisionManager`.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨不同的用例，以根据`AccessDecisionManager`替换自定义filter-security。
- en: UnanimousBased use case
  id: totrans-276
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: UnanimousBased用例
- en: 'If your application relies on `UnanimousBased`, begin by adjusting or replacing
    any `AccessDecisionVoter` Subsequently, you can create an `AuthorizationManager`
    as follows:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的应用程序依赖于`UnanimousBased`，首先调整或替换任何`AccessDecisionVoter`。随后，你可以创建一个`AuthorizationManager`，如下所示：
- en: '[PRE49]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Then, integrate it into the DSL as follows:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将其集成到DSL中，如下所示：
- en: '[PRE50]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: AffirmativeBased use case
  id: totrans-281
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: AffirmativeBased用例
- en: 'If your application utilizes `AffirmativeBased`, you can create an equivalent
    `AuthorizationManager` as follows:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的应用程序使用`AffirmativeBased`，你可以创建一个等效的`AuthorizationManager`，如下所示：
- en: '[PRE51]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Then, integrate it into the DSL as follows:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将其集成到DSL中，如下所示：
- en: '[PRE52]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: ConsensusBased use case
  id: totrans-286
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ConsensusBased用例
- en: If your application is using `ConsensusBased`, there is no equivalent provided
    by the framework. In this case, you should implement a composite `AuthorizationManager`
    that considers the set of delegate `AuthorizationManagers`.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的应用程序使用`ConsensusBased`，框架没有提供等效的解决方案。在这种情况下，你应该实现一个复合`AuthorizationManager`，该`AuthorizationManager`考虑了委托`AuthorizationManagers`的集合。
- en: Custom AccessDecisionVoter use case
  id: totrans-288
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 自定义AccessDecisionVoter用例
- en: If your application is using `AccessDecisionVoter`, you can either modify the
    class to implement `AuthorizationManager` or create an adapter. Without knowledge
    of the specific functionality of your custom voter, it’s challenging to provide
    a generic solution.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的应用程序正在使用`AccessDecisionVoter`，你可以修改该类以实现`AuthorizationManager`或创建一个适配器。由于不了解你自定义投票器的具体功能，提供通用的解决方案具有挑战性。
- en: 'However, here’s an illustrative example of adapting `SecurityMetadataSource`
    and `AccessDecisionVoter` for `anyRequest().authenticated()`:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这里有一个示例，展示了如何适配`SecurityMetadataSource`和`AccessDecisionVoter`以用于`anyRequest().authenticated()`：
- en: '[PRE53]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Having elucidated the usage of `AuthorizationManager` for Request Security,
    let’s now delve into updates regarding OAuth.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 在阐明`AuthorizationManager`在请求安全中的用法后，现在让我们深入了解OAuth的更新。
- en: OAuth Updates
  id: totrans-293
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OAuth更新
- en: In this section, we’ll delve into OAuth updates, specifically focusing on changes
    related to altering default authorities in `oauth2Login()` and deprecations concerning
    OAuth2 clients.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将深入了解OAuth更新，特别是关注与在`oauth2Login()`中更改默认权限以及有关OAuth2客户端的弃用。
- en: Changing Default oauth2Login() Authorities
  id: totrans-295
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更改默认的oauth2Login()权限
- en: In `Spring Security 5`, when a user authenticates with an `oauth2Login()`, the
    default `GrantedAuthority` assigned to them is `ROLE_USER`.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Spring Security 5`中，当用户使用`oauth2Login()`进行身份验证时，分配给他们的默认`GrantedAuthority`是`ROLE_USER`。
- en: In `Spring Security 6`, a user authenticating with an OAuth2 provider is assigned
    the default authority of `OAUTH2_USER`, while a user authenticating with an `OpenID
    Connect 1.0` provider is given the default authority of `OIDC_USER`. These default
    authorities provide a more distinct categorization for users based on whether
    they have authenticated with an `OAuth2` or `OpenID Connect` `1.0` provider.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Spring Security 6`中，使用OAuth2提供程序进行身份验证的用户被分配默认权限`OAUTH2_USER`，而使用`OpenID Connect
    1.0`提供程序进行身份验证的用户被分配默认权限`OIDC_USER`。这些默认权限根据用户是否使用`OAuth2`或`OpenID Connect` `1.0`提供程序进行身份验证，为用户提供更明确的分类。
- en: If your application relies on authorization rules or expressions such as `hasRole("USER")`
    or `hasAuthority("ROLE_USER")` to grant access based on specific authorities,
    be aware that the updated defaults in `Spring Security 6` will impact your application.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的应用程序依赖于如`hasRole("USER")`或`hasAuthority("ROLE_USER")`之类的授权规则或表达式，基于特定的权限授予访问权限，请注意，`Spring
    Security 6`中的更新默认设置将影响你的应用程序。
- en: 'To adopt the new defaults in `Spring Security 6`, you can use the following
    configuration:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 要在`Spring Security 6`中采用新的默认设置，你可以使用以下配置：
- en: '[PRE54]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Handling deprecations for OAuth2 clients
  id: totrans-301
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理OAuth2客户端的弃用
- en: 'In `Spring Security 6`, obsolete classes and methods have been eliminated from
    the OAuth2 client. The deprecated items are outlined as follows, along with their
    respective direct replacements:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Spring Security 6`中，OAuth2客户端中已删除过时的类和方法。以下列出了弃用项及其相应的直接替代品：
- en: '| **Class** | **Deprections list** |'
  id: totrans-303
  prefs: []
  type: TYPE_TB
  zh: '| **类** | **弃用列表** |'
- en: '| --- | --- |'
  id: totrans-304
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `ServletOAuth2 Authorized``ClientExchange FilterFunction` | The method `setAccessTokenExpiresSkew(…)`
    can be replaced with one of:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '| `ServletOAuth2 AuthorizedClientExchange FilterFunction` | 可以用以下之一替换`setAccessTokenExpiresSkew(…)`方法：'
- en: '`ClientCr``edentialsOAuth2Authorized ClientProvider#setClockSkew(…)`'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ClientCr` `edentialsOAuth2Authorized ClientProvider#setClockSkew(…)`'
- en: '`RefreshTokenOAuth2AuthorizedClient Provider#setClockSkew(…)`'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RefreshTokenOAuth2AuthorizedClient Provider#setClockSkew(…)`'
- en: '`JwtBearerOAu``th2Authorized ClientProvider#setClockSkew(…)`'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JwtBearerOA` `uth2Authorized ClientProvider#setClockSkew(…)`'
- en: The method `setClientCredentials` **TokenResponseClient(…)** can be replaced
    with the constructor `ServletOAuth2Authorized``ClientExchangeFilterFunction (OAuth2AuthorizedClientManager)`
    |
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 方法 `setClientCredentials` `TokenResponseClient(…)` 可以用构造函数 `ServletOAuth2Authorized`
    `ClientExchangeFilterFunction (OAuth2AuthorizedClientManager)` 替换 |
- en: '| `OidcUserInfo` | The method `phoneNumberVerified(String)` can be replaced
    with `phoneNumberVerified(Boolean)` |'
  id: totrans-310
  prefs: []
  type: TYPE_TB
  zh: '| `OidcUserInfo` | 方法 `phoneNumberVerified(String)` 可以用 `phoneNumberVerified(Boolean)`
    替换 |'
- en: '| `OAuth2Authorized ClientArgument}Resolver` | The method `setClientCredentialsTokenResponseClient(…)`
    can be replaced with the constructor `OAuth2AuthorizedClient``ArgumentResolver
    (OAuth2AuthorizedClientManager)` |'
  id: totrans-311
  prefs: []
  type: TYPE_TB
  zh: '| `OAuth2Authorized ClientArgument` `Resolver` | 方法 `setClientCredentialsTokenResponseClient(…)`
    可以用构造函数 `OAuth2AuthorizedClient` `ArgumentResolver (OAuth2AuthorizedClientManager)`
    替换 |'
- en: '| `ClaimAccessor` | The method `containsClaim(…)` can be replaced with `hasClaim(…)`
    |'
  id: totrans-312
  prefs: []
  type: TYPE_TB
  zh: '| `ClaimAccessor` | 方法 `containsClaim(…)` 可以用 `hasClaim(…)` 替换 |'
- en: '| `OidcClient InitiatedLogout``SuccessHandler` | The method `setPostLogoutRedirectUri(URI)`
    can be replaced with `setPostLogoutRedirectUri(String)` |'
  id: totrans-313
  prefs: []
  type: TYPE_TB
  zh: '| `OidcClient InitiatedLogout` `SuccessHandler` | 方法 `setPostLogoutRedirectUri(URI)`
    可以用 `setPostLogoutRedirectUri(String)` 替换 |'
- en: '| `HttpSessionOAuth2 Authorization``RequestRepository` | The method `setAllowMultipleAuthorizationRequests(…)`
    has no direct replacement |'
  id: totrans-314
  prefs: []
  type: TYPE_TB
  zh: '| `HttpSessionOAuth2 Authorization` `RequestRepository` | 方法 `setAllowMultipleAuthorizationRequests(…)`
    没有直接替换项 |'
- en: '| `AuthorizationRequest Repository` | The method `removeAuthorizationRequest(HttpServletRequest)`
    can be replaced with `removeAuthorizationRequest(HttpServletRequest, HttpServletResponse)`
    |'
  id: totrans-315
  prefs: []
  type: TYPE_TB
  zh: '| `AuthorizationRequest Repository` | 方法 `removeAuthorizationRequest(HttpServletRequest)`
    可以用 `removeAuthorizationRequest(HttpServletRequest, HttpServletResponse)` 替换 |'
- en: '| `ClientRegistration` | The method `getRedirectUriTemplate()` can be replaced
    with `getRedirectUri()` |'
  id: totrans-316
  prefs: []
  type: TYPE_TB
  zh: '| `ClientRegistration` | 方法 `getRedirectUriTemplate()` 可以用 `getRedirectUri()`
    替换 |'
- en: '| `ClientRegistration .Builder` | The method `redirectUriTemplate(…)` can be
    replaced with `redirectUri(…)` |'
  id: totrans-317
  prefs: []
  type: TYPE_TB
  zh: '| `ClientRegistration .Builder` | 方法 `redirectUriTemplate(…)` 可以用 `redirectUri(…)`
    替换 |'
- en: '| `AbstractOAuth2 Authorization``GrantRequest` | The constructor `AbstractOAuth2Authorization`
    **GrantRequest(AuthorizationGrantType)** can be replaced with `AbstractOAuth2Authorization``GrantRequest(AuthorizationGrantType,
    ClientRegistration)` |'
  id: totrans-318
  prefs: []
  type: TYPE_TB
  zh: '| `AbstractOAuth2 Authorization` `GrantRequest` | 构造函数 `AbstractOAuth2Authorization`
    `GrantRequest(AuthorizationGrantType)` 可以用 `AbstractOAuth2Authorization` `GrantRequest(AuthorizationGrantType,
    ClientRegistration)` 替换 |'
- en: '| `ClientAuthentication Method` | The static field `BASIC` can be replaced
    with `CLIENT_SECRET_BASIC`The static field `POST` can be replaced with `CLIENT_SECRET_POST`
    |'
  id: totrans-319
  prefs: []
  type: TYPE_TB
  zh: '| `ClientAuthentication Method` | 静态字段 `BASIC` 可以用 `CLIENT_SECRET_BASIC` 替换，静态字段
    `POST` 可以用 `CLIENT_SECRET_POST` 替换 |'
- en: '| `OAuth2Access TokenResponse``HttpMessage Converter` | The field `tokenResponseConverter`
    has no direct replacementThe method `setTokenResponseConverter(…)` can be replaced
    with `setAccessTokenResponseConverter(…)`The field `tokenResponseParametersConverter`
    has no direct replacementThe method `setTokenResponseParametersConverter(…)` can
    be replaced with `setAccessTokenResponse``ParametersConverter(…)` |'
  id: totrans-320
  prefs: []
  type: TYPE_TB
  zh: '| `OAuth2Access TokenResponse` `HttpMessage Converter` | 字段 `tokenResponseConverter`
    没有直接替换项，方法 `setTokenResponseConverter(…)` 可以用 `setAccessTokenResponseConverter(…)`
    替换，字段 `tokenResponseParametersConverter` 没有直接替换项，方法 `setTokenResponseParametersConverter(…)`
    可以用 `setAccessTokenResponse` `ParametersConverter(…)` 替换 |'
- en: '| `Nimbus AuthorizationCode``TokenResponseClient` | The class `NimbusAuthorizationCode`
    **TokenResponseClient** can be replaced with `DefaultAuthorizationCode``TokenResponseClient`
    |'
  id: totrans-321
  prefs: []
  type: TYPE_TB
  zh: '| `Nimbus AuthorizationCode` `TokenResponseClient` | 类 `NimbusAuthorizationCode`
    `TokenResponseClient` 可以用 `DefaultAuthorizationCode` `TokenResponseClient` 替换
    |'
- en: '| `NimbusJwt DecoderJwkSupport` | The class `NimbusJwtDecoderJwkSupport` can
    be replaced with `NimbusJwtDecoder` or `JwtDecoders` |'
  id: totrans-322
  prefs: []
  type: TYPE_TB
  zh: '| `NimbusJwt DecoderJwkSupport` | 类 `NimbusJwtDecoderJwkSupport` 可以用 `NimbusJwtDecoder`
    或 `JwtDecoders` 替换 |'
- en: '| `ImplicitGrant Configurer` | The class `ImplicitGrantConfigurer` has no direct
    replacement |'
  id: totrans-323
  prefs: []
  type: TYPE_TB
  zh: '| `ImplicitGrant Configurer` | 类 `ImplicitGrantConfigurer` 没有直接替换项 |'
- en: '| `Authorization GrantType` | The static field `IMPLICIT` has no direct replacement
    |'
  id: totrans-324
  prefs: []
  type: TYPE_TB
  zh: '| `Authorization GrantType` | 静态字段 `IMPLICIT` 没有直接替换项 |'
- en: '| `OAuth2Authorization ResponseType` | The static field `TOKEN` has no direct
    replacement |'
  id: totrans-325
  prefs: []
  type: TYPE_TB
  zh: '| `OAuth2Authorization ResponseType` | 静态字段 `TOKEN` 没有直接替换项 |'
- en: '| `OAuth2Authorization Request` | The static method `implicit()` has no direct
    replacement |'
  id: totrans-326
  prefs: []
  type: TYPE_TB
  zh: '| `OAuth2Authorization Request` | 静态方法 `implicit()` 没有直接替换项 |'
- en: '| `JwtAuthentication Converter` | The `extractAuthorities` method will be deprecated
    and removed. Instead of extending `JwtAuthenticationConverter`, it is recommended
    to provide a custom granted authorities converter using `JwtAuthenticationConverter#set``JwtGrantedAuthoritiesConverter`.
    |'
  id: totrans-327
  prefs: []
  type: TYPE_TB
  zh: '| `JwtAuthentication Converter` | `extractAuthorities` 方法将被弃用并删除。建议不要扩展 `JwtAuthenticationConverter`，而是使用
    `JwtAuthenticationConverter#setJwtGrantedAuthoritiesConverter` 提供自定义授权转换器。|'
- en: Table 16.5 – List of OAuth2 deprecations
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 表 16.5 – OAuth2 废弃列表
- en: Important note
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The use of the implicit grant type is discouraged, and all associated support
    has been removed in `Spring` `Security 6`.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 不建议使用隐式授权类型，并且 `Spring` `Security 6` 中已移除所有相关支持。
- en: After covering `Spring Security 6` OAuth updates, let’s now delve into updates
    regarding SAML.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 在介绍完 `Spring Security 6` OAuth 更新后，现在让我们深入了解 SAML 的更新。
- en: SAML Updates
  id: totrans-332
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SAML 更新
- en: '`Spring Security` filter chains.'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '`Spring Security` 过滤器链。'
- en: In the case of `Spring Security`’s SAML 2.0 service provider support, you can
    enable it using the `Spring Security` `saml2Login` and `saml2Logout` DSL methods.
    These methods automatically select the appropriate filters and position them in
    the relevant locations within the filter chain.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Spring Security` 的 SAML 2.0 服务提供者支持的情况下，您可以使用 `Spring Security` 的 `saml2Login`
    和 `saml2Logout` DSL 方法来启用它。这些方法会自动选择适当的过滤器，并将它们放置在过滤器链的相关位置。
- en: In the following sections, we will explore the main SAML updates.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下章节中，我们将探讨主要的 SAML 更新。
- en: Moving to OpenSAML 4
  id: totrans-336
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 转向 OpenSAML 4
- en: '`Spring Security 6` discontinues support for `OpenSAML 3` and upgrades its
    baseline to `OpenSAML 4`.'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '`Spring Security 6` 停止了对 `OpenSAML 3` 的支持，并将其基线升级到 `OpenSAML 4`。'
- en: To upgrade to `Spring Security 6`’s `SAML` support, you are required to use
    `4.1.1` or later.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 要升级到 `Spring Security 6` 的 `SAML` 支持，您需要使用 `4.1.1` 或更高版本。
- en: Utilizing the OpenSaml4AuthenticationProvider
  id: totrans-339
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 利用 OpenSaml4AuthenticationProvider
- en: To simultaneously accommodate both `Spring Security` introduced `OpenSamlAuthenticationProvider`
    and `OpenSaml4AuthenticationProvider`. However, with the removal of `Spring Security
    6`, `OpenSamlAuthenticationProvider` has also been discontinued.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 为了同时适应 `Spring Security` 引入的 `OpenSamlAuthenticationProvider` 和 `OpenSaml4AuthenticationProvider`。然而，随着
    `Spring Security 6` 的移除，`OpenSamlAuthenticationProvider` 也已被停止使用。
- en: It’s important to note that not all methods from `OpenSamlAuthenticationProvider`
    were directly transferred to `OpenSaml4AuthenticationProvider`. Consequently,
    some adjustments will be necessary to address the changes when implementing the
    challenge.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，并非所有来自 `OpenSamlAuthenticationProvider` 的方法都直接转移到 `OpenSaml4AuthenticationProvider`。因此，在实施挑战时，需要进行一些调整以应对这些变化。
- en: Avoiding use of SAML 2.0 Converter constructors
  id: totrans-342
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 避免使用 SAML 2.0 Converter 构造函数
- en: In the initial version of `Spring Security` SAML 2.0 support, the `Saml2MetadataFilter`
    and `Saml2AuthenticationTokenConverter` were initially equipped with constructors
    of the `Converter` type. This level of abstraction posed challenges in evolving
    the class, leading to the introduction of a dedicated interface, `RelyingPartyRegistrationResolver`,
    in a subsequent release.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Spring Security` SAML 2.0 支持的初始版本中，`Saml2MetadataFilter` 和 `Saml2AuthenticationTokenConverter`
    最初配备了 `Converter` 类型的构造函数。这种抽象级别在类的发展中带来了挑战，导致在后续版本中引入了专门的接口 `RelyingPartyRegistrationResolver`。
- en: In version 6.0, the `Converter` constructors have been eliminated. To adapt
    to this change, modify classes that implement `Converter<HttpServletRequest`,
    `RelyingPartyRegistration>` to instead implement `RelyingPartyRegistrationResolver`.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 在 6.0 版本中，`Converter` 构造函数已被删除。为了适应这一变化，修改实现 `Converter<HttpServletRequest,
    RelyingPartyRegistration>` 的类，改为实现 `RelyingPartyRegistrationResolver`。
- en: Transitioning to utilizing Saml2AuthenticationRequestResolver
  id: totrans-345
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 转向使用 Saml2AuthenticationRequestResolver
- en: In `Spring Security 6`, `Saml2AuthenticationContextResolver`, `Saml2AuthenticationRequestFactory`,
    and the associated `Saml2WebSsoAuthenticationRequestFilter` are eliminated.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Spring Security 6` 中，`Saml2AuthenticationContextResolver`、`Saml2AuthenticationRequestFactory`
    以及相关的 `Saml2WebSsoAuthenticationRequestFilter` 都已被删除。
- en: They are replaced by `Saml2AuthenticationRequestResolver` and a new constructor
    in `Saml2WebSsoAuthenticationRequestFilter`. The revised interface removes an
    unnecessary transport object between these classes.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 它们被 `Saml2AuthenticationRequestResolver` 和 `Saml2WebSsoAuthenticationRequestFilter`
    的新构造函数所取代。修订后的接口消除了这些类之间的不必要传输对象。
- en: While most applications won’t require significant changes, if you currently
    use or configure `Saml2AuthenticationRequestContextResolver` or `Saml2Authentication`
    **RequestFactory**, consider the following steps to transition using `Saml2Authentication``RequestResolver`.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管大多数应用程序不需要重大更改，但如果您目前使用或配置了 `Saml2AuthenticationRequestContextResolver` 或
    `Saml2Authentication RequestFactory`，请考虑以下步骤以使用 `Saml2Authentication RequestResolver`
    进行过渡。
- en: Replacing setAuthenticationRequestContextConverter
  id: totrans-349
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 替换 setAuthenticationRequestContextConverter
- en: Instead of using `setAuthenticationRequestContextConverter`, you should move
    to `setAuthnRequestCustomizer` in `Spring` `Security 6`.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Spring Security 6` 中，您应该将 `setAuthenticationRequestContextConverter` 替换为
    `setAuthnRequestCustomizer`。
- en: Furthermore, as `setAuthnRequestCustomizer` has direct access to the `HttpServletRequest`,
    there is no necessity for a `Saml2AuthenticationRequestContextResolver`. Simply
    utilize `setAuthnRequestCustomizer` to directly retrieve the required information
    from the `HttpServletRequest`.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，由于 `setAuthnRequestCustomizer` 可以直接访问 `HttpServletRequest`，因此不需要 `Saml2AuthenticationRequestContextResolver`。只需使用
    `setAuthnRequestCustomizer` 直接从 `HttpServletRequest` 中检索所需信息。
- en: Replacing setProtocolBinding
  id: totrans-352
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 替换 setProtocolBinding
- en: 'The following implementation using `setProtocolBinding`:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 以下使用 `setProtocolBinding` 的实现：
- en: '[PRE55]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'can be replaced as follows:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 可以替换如下：
- en: '[PRE56]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Important note
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: As `Spring Security` exclusively supports the `POST` binding for authentication,
    overriding the protocol binding at this juncture doesn’t yield significant value.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `Spring Security` 专门支持用于身份验证的 `POST` 绑定，因此在此时覆盖协议绑定不会产生显著的价值。
- en: Utilizing the most recent constructor for Saml2AuthenticationToken
  id: totrans-359
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 利用最新的 Saml2AuthenticationToken 构造函数
- en: Prior to `Spring Security 6`, the `Saml2AuthenticationToken` constructor required
    multiple individual settings as parameters, posing challenges when adding new
    parameters. Recognizing that most of these settings were inherent to `RelyingPartyRegistration`,
    a more stable constructor was introduced. This new constructor allows the provision
    of a `RelyingPartyRegistration`, aligning more closely with the design of `OAuth2LoginAuthenticationToken`.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Spring Security 6` 之前，`Saml2AuthenticationToken` 构造函数需要多个单独的设置作为参数，当添加新参数时，这会带来挑战。认识到这些设置中的大多数都是
    `RelyingPartyRegistration` 的固有属性，因此引入了一个更稳定的构造函数。这个新的构造函数允许提供 `RelyingPartyRegistration`，更接近于
    `OAuth2LoginAuthenticationToken` 的设计。
- en: 'While most applications typically do not directly instantiate this class, as
    it is usually handled by `Saml2WebSsoAuthenticationFilter`, if your application
    does instantiate it, you should update the constructor as follows:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管大多数应用程序通常不会直接实例化此类，因为它通常由 `Saml2WebSsoAuthenticationFilter` 处理，但如果您的应用程序确实实例化了它，您应该按照以下方式更新构造函数：
- en: '[PRE57]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Leveraging the updated methods in RelyingPartyRegistration
  id: totrans-363
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 利用 RelyingPartyRegistration 中的更新方法
- en: In the initial version of `Spring Security`’s `RelyingPartyRegistration` methods
    and their functionalities. To address this issue and accommodate the introduction
    of additional capabilities to `RelyingPartyRegistration`, it became imperative
    to clarify the ambiguity by renaming the methods to align with the specification
    language.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Spring Security` 的初始版本中，`RelyingPartyRegistration` 方法及其功能。为了解决此问题并适应向 `RelyingPartyRegistration`
    引入的额外功能，有必要通过将方法重命名为与规范语言一致来澄清歧义。
- en: After examining the various configuration migration options from `Spring Security
    5.x` to `Spring Security 6.x`, the subsequent section will demonstrate a practical
    example of migrating a JDBC application from `Spring Security 5.x` to `Spring`
    `Security 6.x`.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 在检查从 `Spring Security 5.x` 到 `Spring Security 6.x` 的各种配置迁移选项之后，下一节将演示将 JDBC
    应用程序从 `Spring Security 5.x` 迁移到 `Spring Security 6.x` 的实际示例。
- en: Applying the migration steps from Spring Security 5.x to Spring Security 6.x
  id: totrans-366
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用从 Spring Security 5.x 到 Spring Security 6.x 的迁移步骤
- en: In this section, we’ll delve into the process of migrating a sample application
    from `Spring Security 5.x` to `Spring Security 6.x`. This migration aims to ensure
    compatibility with the latest features, improvements, and security enhancements
    offered by the newer version.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将深入探讨将一个示例应用程序从 `Spring Security 5.x` 迁移到 `Spring Security 6.x` 的过程。这次迁移旨在确保与较新版本提供的最新功能、改进和安全增强保持兼容性。
- en: Important note
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The initial state of the application written in `Spring Security 5.x` is available
    in the project `chapter16.00-calendar`.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `Spring Security 5.x` 编写的应用程序的初始状态可在项目 `chapter16.00-calendar` 中找到。
- en: Reviewing Application dependencies
  id: totrans-370
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查应用程序依赖项
- en: 'The following snippet defines the initial dependencies needed for `Spring`
    `Security 5.x`:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 以下片段定义了 `Spring` `Security 5.x` 需要的初始依赖项：
- en: '[PRE58]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'In the migrated version of `build.gradle`, we will upgrade `Spring Security`
    to version 6.x:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `build.gradle` 的迁移版本中，我们将 `Spring Security` 升级到 6.x 版本：
- en: '[PRE59]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Migrating from the javax to jakarta namespace
  id: totrans-375
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从 javax 迁移到 jakarta 命名空间
- en: The migration from the `javax` namespace to the `jakarta` namespace in `Spring
    Security 6` is primarily driven by changes in the Java ecosystem.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: '`Spring Security 6` 中从 `javax` 命名空间迁移到 `jakarta` 命名空间主要是由于 Java 生态系统中的变化。'
- en: This change is necessary due to the evolution of the Java **Enterprise Edition**
    (**EE**) specifications and the community-led Jakarta EE effort.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 这一变化是由于 Java **企业版**（**EE**）规范的发展和由社区领导的 Jakarta EE 努力所致。
- en: Replacing WebSecurityConfigurerAdapter and exposing SecurityFilterChain Bean
  id: totrans-378
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 替换 WebSecurityConfigurerAdapter 并公开 SecurityFilterChain Bean
- en: As explained in the previous section, `Spring Security 6` introduces enhancements
    and refinements to streamline security configurations. One notable evolution in
    recent versions involves replacing the traditional `WebSecurityConfigurerAdapter`
    with a more flexible approach of exposing a `SecurityFilterChain` bean.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`Spring Security 6` 引入了增强和改进，以简化安全配置。最近版本中的一个显著演变是，用更灵活的方法公开 `SecurityFilterChain`
    对象来替换传统的 `WebSecurityConfigurerAdapter`。
- en: This paradigm shift provides developers with greater control and customization
    over their security configurations, facilitating finer-grained security setups
    tailored to specific application requirements.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 这种范式转变为开发者提供了对安全配置的更大控制和定制，促进了针对特定应用程序需求定制的更细粒度的安全设置。
- en: 'Before the migration, the `SecurityConfig.java` looks like this:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 迁移之前，`SecurityConfig.java` 的样子如下：
- en: '[PRE60]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'After the migration, we remove `WebSecurityConfigurerAdapter` and expose a
    `SecurityFilterChain` bean as follows:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 迁移后，我们移除了 `WebSecurityConfigurerAdapter` 并如下公开了一个 `SecurityFilterChain` 对象：
- en: '[PRE61]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: As `@EnableWebSecurity` no longer includes `@Configuration` in `Spring Security
    6.x`, we declared both annotations in the migrated version of `SecurityConfig.java`.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在 `Spring Security 6.x` 中 `@EnableWebSecurity` 不再包含 `@Configuration`，我们在 `SecurityConfig.java`
    的迁移版本中声明了这两个注解。
- en: Important note
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'Your code should now look like this: `chapter16.01-calendar`.'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 您的代码现在应如下所示：`chapter16.01-calendar`。
- en: Summary
  id: totrans-388
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter reviewed the major and minor changes that you will find when upgrading
    an existing `Spring Security 5.x` project to `Spring Security 6.x`. In this chapter,
    we have reviewed the significant enhancements to the framework that are likely
    to motivate an upgrade. We also examined upgrade requirements, dependencies, common
    types of code, and configuration changes that will prevent applications from working
    post-upgrade. We also covered the investigation (at a high level) of the overall
    code reorganization changes that the `Spring Security` authors made as part of
    code base restructuring.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 本章回顾了在将现有的 `Spring Security 5.x` 项目升级到 `Spring Security 6.x` 时将遇到的重大和细微变化。在本章中，我们回顾了可能促使升级的重大框架增强。我们还检查了升级需求、依赖项、常见代码类型和配置更改，这些更改将防止应用程序在升级后工作。我们还概述了
    `Spring Security` 作者在代码库重构过程中所做的整体代码重组更改。
- en: If this is the first chapter you’ve read, we hope that you return to the rest
    of the book and use this chapter as a guide to allow your upgrade to `Spring Security
    6.x` to proceed as smoothly as possible!
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是您第一次阅读本章，我们希望您回到书的其余部分，并使用本章作为指南，以便尽可能顺利地进行 `Spring Security 6.x` 的升级！
