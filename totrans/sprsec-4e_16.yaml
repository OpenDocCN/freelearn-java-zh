- en: '16'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Migration to Spring Security 6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this final chapter, we will review information relating to common migration
    issues when moving from `Spring Security 5.x` to `Spring Security 6.x` contain
    a lot of non-passive refactoring.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of the chapter, we will also highlight some of the new features that
    can be found in `Spring Security 6.x`. However, we do not explicitly cover changes
    from `Spring Security 5.x` to `Spring Security 6.x`. This is because by explaining
    the differences between this two versions, users should be able to update to `Spring`
    `Security 6.x`.
  prefs: []
  type: TYPE_NORMAL
- en: You may be planning to migrate an existing application to `Spring Security 6.x`
    or you may be trying to add functionality to a `Spring Security 5.x` application
    and are looking for guidance in the pages of this book. We’ll try to address both
    of your concerns in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: First, we’ll run through the important differences between `Spring Security
    5.x` and `6.x`—both in terms of features and configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Second, we’ll provide some guidance on mapping configuration or class name changes.
    This will better enable you to translate the examples in the book from `Spring
    Security 6.x` back to `Spring Security 5.x` (where applicable).
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: '`Spring Security 6.x` mandates a migration to **Spring Framework 6** and **Java
    17** or greater.'
  prefs: []
  type: TYPE_NORMAL
- en: Be aware that in many cases, migrating these other components may have a greater
    impact on your application than the upgrade of `Spring Security`!
  prefs: []
  type: TYPE_NORMAL
- en: 'During this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing important enhancements in `Spring` `Security 6.x`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding configuration changes required in your existing Spring version.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reviewing `Spring Security 5.x` applications when moving them to `Spring` `Security
    6.x`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Illustrating the overall movement of important classes and packages in `Spring`
    `Security 6.x`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Highlighting some of the new features found in `Spring Security 6.x`. Once you
    have completed the review of this chapter, you will be in a good position to migrate
    an existing application from `Spring Security 5.x` to `Spring` `Security 6.x`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Migrating from `Spring` `Security 5.x`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This chapter’s code in action link is here: [https://packt.link/wD0Sk](https://packt.link/wD0Sk).'
  prefs: []
  type: TYPE_NORMAL
- en: Exploit Protection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In `Spring Security 5.8`, the default `CsrfTokenRequestHandler` responsible
    for providing the `CsrfToken` to the application is `CsrfTokenRequestAttributeHandler`.
    The default setting for the field `csrfRequestAttributeName` is `null`, leading
    to the loading of the CSRF token on every request.
  prefs: []
  type: TYPE_NORMAL
- en: Examples of situations where reading the session should be deemed unnecessary
    include endpoints explicitly marked with `permitAll()`, such as static assets,
    static HTML pages, and single-page applications hosted under the same domain/server.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Spring Security 6`, `csrfRequestAttributeName` now defaults to `_csrf`.
    If you had configured the following solely for the purpose of transitioning to
    version 6.0, you can now safely remove it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have explored how to define the `CsrfToken`, we will explore how
    to protect against CSRF attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Protecting against CSRF attacks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In `Spring Security 5.8`, the default `CsrfTokenRequestHandler` facilitating
    the availability of `CsrfToken` to the application is `CsrfTokenRequestAttributeHandler`.
    `XorCsrfTokenRequestAttributeHandler` was introduced to enable opting into `CSRF`
    `attack support`.
  prefs: []
  type: TYPE_NORMAL
- en: In Spring Security 6, `XorCsrfTokenRequestAttributeHandler` becomes the default
    `CsrfTokenRequestHandler` for providing the `CsrfToken`. If you had configured
    `XorCsrfTokenRequestAttributeHandler` solely for the purpose of transitioning
    to version 6.0, it can now be safely removed.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: If you’ve set the `csrfRequestAttributeName` to `null` to exclude deferred tokens,
    or if you’ve established a `CsrfTokenRequestHandler` for any particular purpose,
    you can maintain the current configuration.
  prefs: []
  type: TYPE_NORMAL
- en: CSRF attack with WebSocket support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In `Spring Security 5.8`, the default `ChannelInterceptor` used to provide the
    `CsrfToken` with WebSocket security is `CsrfChannelInterceptor`. `XorCsrfChannelInterceptor`
    was introduced to enable opting into **CSRF** **attack support**.
  prefs: []
  type: TYPE_NORMAL
- en: In `Spring Security 6`, `XorCsrfChannelInterceptor` becomes the default `ChannelInterceptor`
    for providing the `CsrfToken`. If you had configured `XorCsrfChannelInterceptor`
    solely for the purpose of transitioning to version 6.0, it can now be safely removed.
  prefs: []
  type: TYPE_NORMAL
- en: After exploring how to protect against CSRF attacks, we will deep dive into
    configuration migration options.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration Migrations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The subsequent sections pertain to alterations in configuring `HttpSecurity`,
    `WebSecurity`, and `AuthenticationManager`.
  prefs: []
  type: TYPE_NORMAL
- en: Adding @Configuration annotation to @Enable* annotations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In version 6.0, the annotations `@EnableWebSecurity`, `@EnableMethodSecurity`,
    `@EnableGlobalMethodSecurity`, and `@EnableGlobalAuthentication` no longer include
    `@Configuration`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, `@EnableWebSecurity` will be modified from:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: To adapt to this change, wherever you utilize these annotations, you might need
    to add `@Configuration`.
  prefs: []
  type: TYPE_NORMAL
- en: Using the new requestMatchers methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In `Spring Security 5.8`, the methods `antMatchers`, `mvcMatchers`, and `regexMatchers`
    were deprecated in favor of the new `requestMatchers` methods.
  prefs: []
  type: TYPE_NORMAL
- en: The introduction of the new `requestMatchers` methods extended to `authorizeHttpRequests`,
    `authorizeRequests`, CSRF configuration, `WebSecurityCustomizer`, and other locations
    with specialized `RequestMatcher` methods. As of `Spring Security 6`, the deprecated
    methods have been removed.
  prefs: []
  type: TYPE_NORMAL
- en: The new methods come with more secure defaults by automatically selecting the
    most suitable `RequestMatcher` implementation for your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'To provide a summary, these methods:'
  prefs: []
  type: TYPE_NORMAL
- en: Opt for the `MvcRequestMatcher` implementation if your application includes
    Spring MVC in the classpath.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fall back to the `AntPathRequestMatcher` implementation, in the absence of Spring
    MVC, aligning their behavior with the Kotlin equivalent methods.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following table should guide you in your migration journey:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Spring** **Security 5** | **Spring** **Security 6** |'
  prefs: []
  type: TYPE_TB
- en: '| `antMatchers("/api/admin/**")` | `requestMatchers("/api/admin/**")` |'
  prefs: []
  type: TYPE_TB
- en: '| `mvcMatchers("/admin/**")` | `requestMatchers("/admin/**")` |'
  prefs: []
  type: TYPE_TB
- en: '| `mvcMatchers("/admin").servletPath("/path")` | `requestMatchers(mvcMatcherBuilder.pattern("/admin"))`
    |'
  prefs: []
  type: TYPE_TB
- en: Table 16.1 – Migration to the new requestMatchers
  prefs: []
  type: TYPE_NORMAL
- en: 'If you encounter difficulties with the new `requestMatchers` methods, you have
    the option to revert to the `RequestMatcher` implementation you were previously
    using. For instance, if you prefer to continue using `AntPathRequestMatcher` and
    `RegexRequestMatcher` implementations, you can utilize the `requestMatchers` method
    that accepts a `RequestMatcher` instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Spring** **Security 5** | **Spring** **Security 6** |'
  prefs: []
  type: TYPE_TB
- en: '| `antMatchers("/api/admin/**")` | `requestMatchers(antMatcher("/user/**"))`
    |'
  prefs: []
  type: TYPE_TB
- en: Table 16.2 – Alternatives with the new requestMatchers
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Please note that the provided example utilizes static factory methods from `AntPathRequestMatcher`
    and `RegexRequestMatcher` to enhance readability.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you are employing the `WebSecurityCustomizer` interface, you can substitute
    the deprecated `antMatchers` methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'with their corresponding `requestMatchers` alternatives:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Similarly, if you are customizing the `CSRF` configuration to exclude specific
    paths, you can substitute the deprecated methods with the `requestMatchers` counterparts.
  prefs: []
  type: TYPE_NORMAL
- en: Using the new securityMatchers methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In `Spring Security 5.8`, the `antMatchers`, `mvcMatchers`, and `requestMatchers`
    methods in `HttpSecurity` underwent deprecation in favor of the new `securityMatchers`
    methods.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that these methods differ from the `authorizeHttpRequests`
    methods, which were deprecated in favor of the `requestMatchers` methods. However,
    the `securityMatchers` methods share similarities with the `requestMatchers` methods
    in that they automatically select the most suitable `RequestMatcher` implementation
    for your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'To elaborate, the new methods:'
  prefs: []
  type: TYPE_NORMAL
- en: Opt for the `MvcRequestMatcher` implementation if your application includes
    Spring MVC in the classpath.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fall back to the `AntPathRequestMatcher` implementation, in the absence of Spring
    MVC, aligning their behavior with the Kotlin equivalent methods. The introduction
    of `securityMatchers` methods also serves to prevent confusion with the `requestMatchers`
    methods from `authorizeHttpRequests`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following table should guide you in your migration journey where `http`
    is of type `HttpSecurity`:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Spring** **Security 5** | **Spring** **Security 6** |'
  prefs: []
  type: TYPE_TB
- en: '| `http.antMatcher("/api/**")` | `http.securityMatcher("/api/**")` |'
  prefs: []
  type: TYPE_TB
- en: '| `http.requestMatcher(new MyCustomRequestMatcher())` | `http.securityMatcher(new
    MyCustomRequestMatcher())` |'
  prefs: []
  type: TYPE_TB
- en: '| `http``.requestMatchers((matchers) ->` `matchers``.``antMatchers("/api/**",
    "/app/**")``.``mvcMatchers("/admin/**")``.``requestMatchers(new MyCustomRequestMatcher()))`
    | `http.securityMatchers((matchers) -> matchers.requestMatchers("/api/**", "/``app/**",
    "/admin/**")``.``requestMatchers(new MyCustomRequestMatcher()))` |'
  prefs: []
  type: TYPE_TB
- en: Table 16.3 – Migration to the new securityMatchers
  prefs: []
  type: TYPE_NORMAL
- en: 'If you encounter challenges with the automatic selection of `RequestMatcher`
    implementation by the `securityMatchers` methods, you have the option to manually
    choose the `RequestMatcher` implementation yourself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: After exploring the new `securityMatchers` methods, we’ll now proceed to examine
    the process of replacing `WebSecurityConfigurerAdapter` in `Spring` `Security
    6.x`.
  prefs: []
  type: TYPE_NORMAL
- en: Replacing the WebSecurityConfigurerAdapter class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `WebSecurityConfigurerAdapter` class was deprecated and then removed in
    `Spring Security 6.x`. In the following sub-sections, we will explore the impacts
    of this major change.
  prefs: []
  type: TYPE_NORMAL
- en: Exposing a SecurityFilterChain Bean
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In `Spring Security 5.4`, a new feature was introduced allowing the publication
    of a `SecurityFilterChain` bean instead of extending `WebSecurityConfigurerAdapter`.
    However, in version 6.0, `WebSecurityConfigurerAdapter` has been removed. To accommodate
    this change, you can substitute constructs resembling:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Exposing a WebSecurityCustomizer Bean
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`Spring Security 5.4` introduced `WebSecurityCustomizer` as a replacement for
    `configure(WebSecurity web)` in `WebSecurityConfigurerAdapter`. To prepare for
    its removal, you can update code similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Exposing an AuthenticationManager Bean
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With the removal of `WebSecurityConfigurerAdapter`, the `configure(AuthenticationManagerBuilder)`
    method is also eliminated.
  prefs: []
  type: TYPE_NORMAL
- en: LDAP Authentication
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When using `auth.ldapAuthentication()` for **Lightweight Directory Access Protocol**
    (**LDAP**) authentication support, you can replace this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: JDBC Authentication
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you are currently utilizing `auth.jdbcAuthentication()` for **Java Database
    Connectivity** (**JDBC**) authentication support, you can substitute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In-Memory Authentication
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you are currently utilizing `auth.inMemoryAuthentication()` for in-memory
    `Authentication` support, you can replace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: After exploring the impacts of `WebSecurityConfigurerAdapter` removal, we will
    delve into updates regarding password encoding.
  prefs: []
  type: TYPE_NORMAL
- en: Password Encoding Updates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In `Spring Security 6.0`, the minimum requirements for password encoding have
    been revised for **PBKDF2**, **SCrypt**, and **Argon2**.
  prefs: []
  type: TYPE_NORMAL
- en: If you use the default password encoder, there’s no need to follow any preparatory
    steps, and you can skip this section.
  prefs: []
  type: TYPE_NORMAL
- en: Pbkdf2PasswordEncoder updates
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you are using `Pbkdf2PasswordEncoder`, the constructors have been substituted
    with static factories that correspond to the `Spring Security` version relevant
    to the provided settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'And if you have custom settings, use the constructor that specifies all settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: SCryptPasswordEncoder Updates
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are employing `SCryptPasswordEncoder`, the constructors have been substituted
    with static factories that correspond to the `Spring Security` version associated
    with the provided settings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your initial step should be to modify the deprecated constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Argon2PasswordEncoder Updates
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you are using `Argon2PasswordEncoder`, the constructors have been substituted
    with static factories that correspond to the `Spring Security` version associated
    with the provided settings. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Delegating PasswordEncoder usage
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you haven’t employed the deprecated constructor, it’s essential to update
    your code to adhere to the latest standards. This entails configuring the `DelegatingPasswordEncoder`
    to identify passwords that adhere to current standards and update them to the
    latest ones. The following example using `Pbkdf2PasswordEncoder` can also be applied
    to `SCryptPasswordEncoder` or `Argon2PasswordEncoder`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Abandoning Encryptors.queryableText
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The use of `Encryptors.queryableText(CharSequence,` `CharSequence)` is considered
    unsafe as identical input data will yield the same output (CVE-2020-5408 - [https://github.com/advisories/GHSA-2ppp-9496-p23q](https://github.com/advisories/GHSA-2ppp-9496-p23q)).e
  prefs: []
  type: TYPE_NORMAL
- en: '`Spring Security 6.x` no longer endorses data encryption through this method.
    To facilitate the upgrade, you must either re-encrypt the data using a supported
    mechanism or store it in a decrypted form.'
  prefs: []
  type: TYPE_NORMAL
- en: Following the examination of password encoding updates, we will delve into the
    details of session management updates.
  prefs: []
  type: TYPE_NORMAL
- en: Session Management Updates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the upcoming sections, we’ll thoroughly examine session management updates,
    encompassing the primary deprecations and modifications.
  prefs: []
  type: TYPE_NORMAL
- en: Requiring Explicit Saving of SecurityContextRepository
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In `Spring Security 5`, the default process involves automatically saving the
    `SecurityContext` to the `SecurityContextRepository` through the `SecurityContextPersistenceFilter`.
    This saving occurs just before the `HttpServletResponse` is committed and right
    before the `SecurityContextPersistenceFilter`. However, this automatic persistence
    can catch users off guard, especially when performed just before the request completes
    (i.e., prior to committing the `HttpServletResponse`). It also introduces complexity
    in tracking the state to determine the necessity of saving, leading to unnecessary
    writes to the `SecurityContextRepository` (e.g., `HttpSession`) at times.
  prefs: []
  type: TYPE_NORMAL
- en: With the advent of `Spring Security 6`, the default behavior has shifted. The
    `SecurityContextHolderFilter` will now solely read the `SecurityContext` from
    the `SecurityContextRepository` and populate it in the `SecurityContextHolder`.
    Users are now required to explicitly save the `SecurityContext` using the `SecurityContextRepository`
    if they wish for the `SecurityContext` to persist between requests. This modification
    eliminates ambiguity and enhances performance by mandating writes to the `SecurityContextRepository`
    (e.g., `HttpSession`) only when necessary.
  prefs: []
  type: TYPE_NORMAL
- en: 'To opt into the new `Spring Security 6` default, the following configuration
    can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: When using the configuration, it is crucial that any code responsible for setting
    the `SecurityContextHolder` with a `SecurityContext` also ensures the saving of
    the `SecurityContext` to the `SecurityContextRepository` if persistence between
    requests is required.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'should be replaced with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Changing HttpSessionSecurityContextRepository to DelegatingSecurityContextRepository
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In `Spring Security 5`, the default `SecurityContextRepository` is `HttpSessionSecurityContextRepository`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Spring Security 6`, the default `SecurityContextRepository` is `DelegatingSecurityContextRepository`.
    To adopt the new `Spring Security 6` default, the following configuration can
    be utilized:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Addressing SecurityContextRepository Deprecations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In `Spring Security 6`, the following method in the class `SecurityContextRepository`
    has been deprecated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The method should be replaced with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Improving Querying of RequestCache
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In `Spring Security 5`, the standard procedure involves querying the saved request
    with every incoming request. In a typical configuration, this implies that the
    `HttpSession` is consulted on each request to utilize the `RequestCache`.
  prefs: []
  type: TYPE_NORMAL
- en: In `Spring Security 6`, the new default is such that the `RequestCache` will
    only be interrogated for a cached request if the HTTP parameter `continue` is
    explicitly defined. This approach enables `Spring Security` to skip unnecessary
    reads of the `HttpSession` when working with the `RequestCache`.
  prefs: []
  type: TYPE_NORMAL
- en: Requiring Explicit Invocation of SessionAuthenticationStrategy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In `Spring Security 5`, the standard configuration depends on the `SessionManagementFilter`
    to identify whether a user has recently authenticated and to trigger the `SessionAuthenticationStrategy`.
    However, this setup entails reading the `HttpSession` for every request in a typical
    scenario.
  prefs: []
  type: TYPE_NORMAL
- en: In `Spring Security 6`, the new default is for authentication mechanisms to
    directly invoke the `SessionAuthenticationStrategy`. Consequently, there is no
    requirement to identify when authentication occurs, eliminating the need to read
    the `HttpSession` for every request.
  prefs: []
  type: TYPE_NORMAL
- en: Following the investigation of session management updates, we will delve deeply
    into authentication updates.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication Updates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’ll examine the main updates in authentication, including the adoption of
    `SHA-256` for `Remember Me` functionality and enhancements related to `AuthenticationServiceExceptions`.
  prefs: []
  type: TYPE_NORMAL
- en: Utilizing SHA-256 for Remember Me
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `TokenBasedRememberMeServices` implementation in `Spring Security 6` now
    defaults to using `SHA-256` for `Remember Me` tokens, enhancing the default security
    stance. This change is motivated by the recognition of `MD5` as a weak hashing
    algorithm susceptible to collision attacks and modular differential attacks.
  prefs: []
  type: TYPE_NORMAL
- en: The newly generated tokens include information about the algorithm used for
    token generation. This information is leveraged for matching purposes. If the
    algorithm name is absent, the `matchingAlgorithm` property is employed to verify
    the token. This design allows for a seamless transition from `MD5` to `SHA-256`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code shows how you can enable `Remember Me` feature, with the
    default implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'To embrace the new `Spring Security 6` default for encoding tokens while maintaining
    compatibility with `MD5`-encoded tokens, you can set the `encodingAlgorithm` property
    to `SHA-256` and the `matchingAlgorithm` property to `MD5`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Propagating AuthenticationServiceExceptions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `AuthenticationFilter` forwards `AuthenticationServiceException` to the
    `AuthenticationEntryPoint`. As `AuthenticationServiceExceptions` indicate a server-side
    error rather than a client-side error, in version 6.0, this mechanism is adjusted
    to propagate them to the container.
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, if you had previously enabled this behavior by setting `rethrowAuthenticationServiceException`
    to `true`, you can now eliminate it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'This can be changed to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Following the examination of authentication updates, we will delve deeply into
    authorization updates.
  prefs: []
  type: TYPE_NORMAL
- en: Authorization Updates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will explore several key enhancements in authorization management
    within `Spring Security`. We’ll begin by discussing how to utilize the `AuthorizationManager`
    for `Method Security`, enabling fine-grained control over method-level access.
    Next, we’ll delve into leveraging the `AuthorizationManager` for message security,
    facilitating secure communication over messaging protocols. Additionally, we’ll
    highlight some deprecations like `AbstractSecurityWebSocketMessageBrokerConfigurer`.
  prefs: []
  type: TYPE_NORMAL
- en: Leveraging AuthorizationManager for Method Security
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`AuthorizationManager` API and direct utilization of **Spring AOP**.'
  prefs: []
  type: TYPE_NORMAL
- en: In case you encounter challenges while implementing these adjustments, it’s
    essential to note that even though `@EnableGlobalMethodSecurity` is deprecated,
    it has not been removed in version 6.0\. This ensures you have the option to opt
    out by continuing to use the deprecated annotation.
  prefs: []
  type: TYPE_NORMAL
- en: Replacing Global Method Security with Method Security
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`@EnableGlobalMethodSecurity` and `<global-method-security>` are now deprecated
    in favor of `@EnableMethodSecurity` and `<method-security>`, respectively. The
    updated annotation and XML element automatically activate Spring’s pre-post annotations
    and internally utilize `AuthorizationManager`.'
  prefs: []
  type: TYPE_NORMAL
- en: Changing the order value in @EnableTransactionManagement
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`@EnableTransactionManagement` and `@EnableGlobalMethodSecurity` both have
    the same order value, `Integer.MAX_VALUE`. As a result, their relative order in
    the Spring AOP `Advisor` chain is undefined.'
  prefs: []
  type: TYPE_NORMAL
- en: While this is generally acceptable, as most **Method Security** expressions
    don’t rely on an open transaction to function correctly, there were historical
    cases where it was necessary to ensure a specific order by setting their order
    values.
  prefs: []
  type: TYPE_NORMAL
- en: On the contrary, `@EnableMethodSecurity` lacks an order value because it dispatches
    multiple interceptors. Unlike `@EnableTransactionManagement`, it cannot maintain
    backward compatibility, as it cannot position all interceptors within the same
    advisor chain location.
  prefs: []
  type: TYPE_NORMAL
- en: Instead, the order values for the `@EnableMethodSecurity` interceptors are based
    on an offset of `0`. For example, the `@PreFilter` interceptor has an order of
    `100`, `@PostAuthorize` has an order of `200`, and so forth.
  prefs: []
  type: TYPE_NORMAL
- en: 'If, after updating, you discover that your `Method Security` expressions are
    not functioning due to a lack of an open transaction, please modify your transaction
    annotation definition as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Using a Custom @Bean instead of subclassing DefaultMethodSecurityExpressionHandler
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: For performance optimization, a new method has been added to `MethodSecurityExpressionHandler`
    that accepts a `Supplier<Authentication>` instead of an `Authentication`.
  prefs: []
  type: TYPE_NORMAL
- en: This enhancement allows `Spring Security` to defer the `Authentication` lookup
    and is automatically utilized when employing `@EnableMethodSecurity` instead of
    `@EnableGlobalMethodSecurity`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, suppose you aim for a customized evaluation of `@PostAuthorize("hasAuthority(''ADMIN'')")`.
    In such a case, you can create a custom `@Bean` as demonstrated here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Subsequently, reference it in the annotation as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Exposing a MethodSecurityExpressionHandler instead of a PermissionEvaluator
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`@EnableMethodSecurity` does not automatically detect a `PermissionEvaluator`
    to keep its API straightforward.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have a custom `PermissionEvaluator` declared as a `@Bean`, please update
    it from:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Substituting any custom AccessDecisionManagers in Method Security
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Your application might feature a custom `AccessDecisionManager` or `AccessDecisionVoter`
    configuration. The approach to adaptation will vary depending on the specific
    purpose of each configuration. Continue reading to identify the most suitable
    adjustment for your scenario.
  prefs: []
  type: TYPE_NORMAL
- en: UnanimousBased use case
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If your application utilizes `UnanimousBased` with the default voters, you probably
    won’t need to make any changes since unanimous-based is the default behavior with
    `@EnableMethodSecurity`.
  prefs: []
  type: TYPE_NORMAL
- en: Nevertheless, if you find that the default authorization managers are not suitable,
    you can utilize `AuthorizationManagers.allOf` to construct your custom configuration.
  prefs: []
  type: TYPE_NORMAL
- en: AffirmativeBased use case
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'If your application relies on `AffirmativeBased`, you can create an equivalent
    `AuthorizationManager` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: ConsensusBased use case
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: For `ConsensusBased`, there is no built-in equivalent provided by the framework.
    In this scenario, you should implement a composite `AuthorizationManager` that
    considers the set of delegate `AuthorizationManager` instances.
  prefs: []
  type: TYPE_NORMAL
- en: AccessDecisionVoter use case
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You can either modify the class to implement `AuthorizationManager` or create
    an adapter as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: AfterInvocationManager or AfterInvocationProvider use case
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`AfterInvocationManager` and `AfterInvocationProvider` are responsible for
    making an authorization decision regarding the result of an invocation. For instance,
    in the context of method invocation, they determine the authorization of a method’s
    return value.'
  prefs: []
  type: TYPE_NORMAL
- en: In `Spring Security 3.0`, the decision-making process for authorization was
    standardized through the `@PostAuthorize` and `@PostFilter` annotations. `@PostAuthorize`
    is used to determine whether the entire return value is allowed to be returned.
    On the other hand, `@PostFilter` is employed to filter individual entries from
    a returned collection, array, or stream.
  prefs: []
  type: TYPE_NORMAL
- en: These two annotations should fulfill most requirements, and there is encouragement
    to transition to one or both of them as `AfterInvocationProvider` and `AfterInvocationManager`
    are now deprecated.
  prefs: []
  type: TYPE_NORMAL
- en: RunAsManager use case
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: At present, there is no direct substitute for `RunAsManager`, although the possibility
    of introducing one is under consideration.
  prefs: []
  type: TYPE_NORMAL
- en: However, if required, it is relatively simple to modify a `RunAsManager` to
    align with the `AuthorizationManager` API.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is some pseudocode to assist you in getting started:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Verifying for AnnotationConfigurationException
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`@EnableMethodSecurity` and `<method-security>` enable more stringent enforcement
    of `Spring Security`’s non-repeatable or otherwise incompatible annotations. If
    you encounter `AnnotationConfigurationException` in your logs after transitioning
    to either, follow the instructions provided in the exception message to rectify
    your application’s `Method Security` annotation usage.'
  prefs: []
  type: TYPE_NORMAL
- en: Leveraging AuthorizationManager for Message Security
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Message Security has been enhanced with the `AuthorizationManager` API and direct
    utilization of Spring AOP.
  prefs: []
  type: TYPE_NORMAL
- en: 'To configure the `AuthorizationManager` for Message Security, you will need
    to follow the steps below:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Ensure all messages have defined authorization rules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add `@``EnableWebSocketSecurity` annotation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Utilize an instance of `AuthorizationManager<Message<?>>`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now we’ve examined the `AuthorizationManager` configuration for Message Security,
    we’ll delve into the modifications associated with `AbstractSecurityWebSocketMessageBrokerConfigurer`.
  prefs: []
  type: TYPE_NORMAL
- en: Deprecating AbstractSecurityWebSocketMessageBrokerConfigurer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are employing Java configuration, you can now directly extend `WebSocketMessageBrokerConfigurer`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, if your class is extending `AbstractSecurityWebSocketMessageBrokerConfigurer`
    is named `WebSocketSecurityConfig`, then replace it with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Having clarified the reasons for discontinuing the implementation of `AbstractSecurityWebSocketMessageBrokerConfigurer`,
    let’s now delve into the utilization of `AuthorizationManager` for request security.
  prefs: []
  type: TYPE_NORMAL
- en: Employing AuthorizationManager for Request Security
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: HTTP Request Security has been streamlined with the `AuthorizationManager` API.
    We will explain `AuthorizationManager` changes for security requests in `Spring`
    `Security 6.x.`
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that all requests have well-defined authorization rules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In `Spring Security 5.8` and earlier, requests without an authorization rule
    are allowed by default. However, for a more robust security posture, the default
    approach is to deny by default in `Spring Security 6.0`. This means that any request
    lacking an explicit authorization rule will be denied by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you already have an `anyRequest` rule in place that meets your requirements,
    you can skip this step:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: If you have already transitioned to `authorizeHttpRequests`, the recommended
    modification remains the same.
  prefs: []
  type: TYPE_NORMAL
- en: Transitioning to AuthorizationManager
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To adopt the use of `AuthorizationManager`, you can utilize `authorizeHttpRequests`
    for Java configuration or use `use-authorization-manager` for XML configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Migrating from hasIpAddress to access(AuthorizationManager)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To migrate from `hasIpAddress` to `access(AuthorizationManager)`, use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Securing by IP address is inherently delicate. Therefore, there are no intentions
    to transfer this support to `authorizeHttpRequests`.
  prefs: []
  type: TYPE_NORMAL
- en: Transitioning SpEL expressions to AuthorizationManager
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When it comes to authorization rules, Java is generally more straightforward
    to test and maintain than SpEL. Consequently, `authorizeHttpRequests` does not
    provide a method for declaring a String SpEL. Instead, you can create your own
    `AuthorizationManager` implementation or utilize `WebExpressionAuthorizationManager`.
  prefs: []
  type: TYPE_NORMAL
- en: '| **SpEL** | **AuthorizationManager** | **WebExpressionAuthorizationManager**
    |'
  prefs: []
  type: TYPE_TB
- en: '| `mvcMatchers("/complicated/**").access("hasRole` **(''ADMIN'') &#124;&#124;**
    `hasAuthority (''SCOPE_read'')")` | `mvcMatchers("/complicated/**").access(anyOf(hasRole`
    **("ADMIN"),** `hasAuthority ("SCOPE_read"))` | `mvcMatchers("/complicated/**").access`
    **(**`new WebExpressionAuthorization` **Manager("hasRole(''ADMIN'') &#124;&#124;**
    `hasAuthority(''SCOPE_read'')"))` |'
  prefs: []
  type: TYPE_TB
- en: Table 16.4 – SpEL migration options
  prefs: []
  type: TYPE_NORMAL
- en: Transitioning to filtering all dispatcher types
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In `Spring Security 5.8` and earlier, authorization is executed only once per
    request. Consequently, dispatcher types like `FORWARD` and `INCLUDE` that run
    after `REQUEST` are not secured by default. It is advisable for `Spring Security`
    to secure all dispatcher types. Therefore, in version 6.0, `Spring Security` modifies
    this default behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, you should change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'If you’re using the `AbstractSecurityWebApplicationInitializer`, it’s recommended
    to override the `getSecurityDispatcherTypes` method and return all dispatcher
    types:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Allowing FORWARD when employing Spring MVC
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When Spring MVC identifies a mapping between the view name and the actual views,
    it initiates a forward to the view. As demonstrated in the previous section, `Spring
    Security 6.0` will, by default, apply authorization to `FORWARD` requests.
  prefs: []
  type: TYPE_NORMAL
- en: Substituting any custom filter-security AccessDecisionManager
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this section, we will explore the different use cases to substitute custom
    filter-security based on `AccessDecisionManager`.
  prefs: []
  type: TYPE_NORMAL
- en: UnanimousBased use case
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'If your application relies on `UnanimousBased`, begin by adjusting or replacing
    any `AccessDecisionVoter` Subsequently, you can create an `AuthorizationManager`
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, integrate it into the DSL as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: AffirmativeBased use case
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'If your application utilizes `AffirmativeBased`, you can create an equivalent
    `AuthorizationManager` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, integrate it into the DSL as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: ConsensusBased use case
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If your application is using `ConsensusBased`, there is no equivalent provided
    by the framework. In this case, you should implement a composite `AuthorizationManager`
    that considers the set of delegate `AuthorizationManagers`.
  prefs: []
  type: TYPE_NORMAL
- en: Custom AccessDecisionVoter use case
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If your application is using `AccessDecisionVoter`, you can either modify the
    class to implement `AuthorizationManager` or create an adapter. Without knowledge
    of the specific functionality of your custom voter, it’s challenging to provide
    a generic solution.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, here’s an illustrative example of adapting `SecurityMetadataSource`
    and `AccessDecisionVoter` for `anyRequest().authenticated()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Having elucidated the usage of `AuthorizationManager` for Request Security,
    let’s now delve into updates regarding OAuth.
  prefs: []
  type: TYPE_NORMAL
- en: OAuth Updates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we’ll delve into OAuth updates, specifically focusing on changes
    related to altering default authorities in `oauth2Login()` and deprecations concerning
    OAuth2 clients.
  prefs: []
  type: TYPE_NORMAL
- en: Changing Default oauth2Login() Authorities
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In `Spring Security 5`, when a user authenticates with an `oauth2Login()`, the
    default `GrantedAuthority` assigned to them is `ROLE_USER`.
  prefs: []
  type: TYPE_NORMAL
- en: In `Spring Security 6`, a user authenticating with an OAuth2 provider is assigned
    the default authority of `OAUTH2_USER`, while a user authenticating with an `OpenID
    Connect 1.0` provider is given the default authority of `OIDC_USER`. These default
    authorities provide a more distinct categorization for users based on whether
    they have authenticated with an `OAuth2` or `OpenID Connect` `1.0` provider.
  prefs: []
  type: TYPE_NORMAL
- en: If your application relies on authorization rules or expressions such as `hasRole("USER")`
    or `hasAuthority("ROLE_USER")` to grant access based on specific authorities,
    be aware that the updated defaults in `Spring Security 6` will impact your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'To adopt the new defaults in `Spring Security 6`, you can use the following
    configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Handling deprecations for OAuth2 clients
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In `Spring Security 6`, obsolete classes and methods have been eliminated from
    the OAuth2 client. The deprecated items are outlined as follows, along with their
    respective direct replacements:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Class** | **Deprections list** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `ServletOAuth2 Authorized``ClientExchange FilterFunction` | The method `setAccessTokenExpiresSkew(…)`
    can be replaced with one of:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ClientCr``edentialsOAuth2Authorized ClientProvider#setClockSkew(…)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RefreshTokenOAuth2AuthorizedClient Provider#setClockSkew(…)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`JwtBearerOAu``th2Authorized ClientProvider#setClockSkew(…)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The method `setClientCredentials` **TokenResponseClient(…)** can be replaced
    with the constructor `ServletOAuth2Authorized``ClientExchangeFilterFunction (OAuth2AuthorizedClientManager)`
    |
  prefs: []
  type: TYPE_NORMAL
- en: '| `OidcUserInfo` | The method `phoneNumberVerified(String)` can be replaced
    with `phoneNumberVerified(Boolean)` |'
  prefs: []
  type: TYPE_TB
- en: '| `OAuth2Authorized ClientArgument}Resolver` | The method `setClientCredentialsTokenResponseClient(…)`
    can be replaced with the constructor `OAuth2AuthorizedClient``ArgumentResolver
    (OAuth2AuthorizedClientManager)` |'
  prefs: []
  type: TYPE_TB
- en: '| `ClaimAccessor` | The method `containsClaim(…)` can be replaced with `hasClaim(…)`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `OidcClient InitiatedLogout``SuccessHandler` | The method `setPostLogoutRedirectUri(URI)`
    can be replaced with `setPostLogoutRedirectUri(String)` |'
  prefs: []
  type: TYPE_TB
- en: '| `HttpSessionOAuth2 Authorization``RequestRepository` | The method `setAllowMultipleAuthorizationRequests(…)`
    has no direct replacement |'
  prefs: []
  type: TYPE_TB
- en: '| `AuthorizationRequest Repository` | The method `removeAuthorizationRequest(HttpServletRequest)`
    can be replaced with `removeAuthorizationRequest(HttpServletRequest, HttpServletResponse)`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `ClientRegistration` | The method `getRedirectUriTemplate()` can be replaced
    with `getRedirectUri()` |'
  prefs: []
  type: TYPE_TB
- en: '| `ClientRegistration .Builder` | The method `redirectUriTemplate(…)` can be
    replaced with `redirectUri(…)` |'
  prefs: []
  type: TYPE_TB
- en: '| `AbstractOAuth2 Authorization``GrantRequest` | The constructor `AbstractOAuth2Authorization`
    **GrantRequest(AuthorizationGrantType)** can be replaced with `AbstractOAuth2Authorization``GrantRequest(AuthorizationGrantType,
    ClientRegistration)` |'
  prefs: []
  type: TYPE_TB
- en: '| `ClientAuthentication Method` | The static field `BASIC` can be replaced
    with `CLIENT_SECRET_BASIC`The static field `POST` can be replaced with `CLIENT_SECRET_POST`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `OAuth2Access TokenResponse``HttpMessage Converter` | The field `tokenResponseConverter`
    has no direct replacementThe method `setTokenResponseConverter(…)` can be replaced
    with `setAccessTokenResponseConverter(…)`The field `tokenResponseParametersConverter`
    has no direct replacementThe method `setTokenResponseParametersConverter(…)` can
    be replaced with `setAccessTokenResponse``ParametersConverter(…)` |'
  prefs: []
  type: TYPE_TB
- en: '| `Nimbus AuthorizationCode``TokenResponseClient` | The class `NimbusAuthorizationCode`
    **TokenResponseClient** can be replaced with `DefaultAuthorizationCode``TokenResponseClient`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `NimbusJwt DecoderJwkSupport` | The class `NimbusJwtDecoderJwkSupport` can
    be replaced with `NimbusJwtDecoder` or `JwtDecoders` |'
  prefs: []
  type: TYPE_TB
- en: '| `ImplicitGrant Configurer` | The class `ImplicitGrantConfigurer` has no direct
    replacement |'
  prefs: []
  type: TYPE_TB
- en: '| `Authorization GrantType` | The static field `IMPLICIT` has no direct replacement
    |'
  prefs: []
  type: TYPE_TB
- en: '| `OAuth2Authorization ResponseType` | The static field `TOKEN` has no direct
    replacement |'
  prefs: []
  type: TYPE_TB
- en: '| `OAuth2Authorization Request` | The static method `implicit()` has no direct
    replacement |'
  prefs: []
  type: TYPE_TB
- en: '| `JwtAuthentication Converter` | The `extractAuthorities` method will be deprecated
    and removed. Instead of extending `JwtAuthenticationConverter`, it is recommended
    to provide a custom granted authorities converter using `JwtAuthenticationConverter#set``JwtGrantedAuthoritiesConverter`.
    |'
  prefs: []
  type: TYPE_TB
- en: Table 16.5 – List of OAuth2 deprecations
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: The use of the implicit grant type is discouraged, and all associated support
    has been removed in `Spring` `Security 6`.
  prefs: []
  type: TYPE_NORMAL
- en: After covering `Spring Security 6` OAuth updates, let’s now delve into updates
    regarding SAML.
  prefs: []
  type: TYPE_NORMAL
- en: SAML Updates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Spring Security` filter chains.'
  prefs: []
  type: TYPE_NORMAL
- en: In the case of `Spring Security`’s SAML 2.0 service provider support, you can
    enable it using the `Spring Security` `saml2Login` and `saml2Logout` DSL methods.
    These methods automatically select the appropriate filters and position them in
    the relevant locations within the filter chain.
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections, we will explore the main SAML updates.
  prefs: []
  type: TYPE_NORMAL
- en: Moving to OpenSAML 4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`Spring Security 6` discontinues support for `OpenSAML 3` and upgrades its
    baseline to `OpenSAML 4`.'
  prefs: []
  type: TYPE_NORMAL
- en: To upgrade to `Spring Security 6`’s `SAML` support, you are required to use
    `4.1.1` or later.
  prefs: []
  type: TYPE_NORMAL
- en: Utilizing the OpenSaml4AuthenticationProvider
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To simultaneously accommodate both `Spring Security` introduced `OpenSamlAuthenticationProvider`
    and `OpenSaml4AuthenticationProvider`. However, with the removal of `Spring Security
    6`, `OpenSamlAuthenticationProvider` has also been discontinued.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that not all methods from `OpenSamlAuthenticationProvider`
    were directly transferred to `OpenSaml4AuthenticationProvider`. Consequently,
    some adjustments will be necessary to address the changes when implementing the
    challenge.
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding use of SAML 2.0 Converter constructors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the initial version of `Spring Security` SAML 2.0 support, the `Saml2MetadataFilter`
    and `Saml2AuthenticationTokenConverter` were initially equipped with constructors
    of the `Converter` type. This level of abstraction posed challenges in evolving
    the class, leading to the introduction of a dedicated interface, `RelyingPartyRegistrationResolver`,
    in a subsequent release.
  prefs: []
  type: TYPE_NORMAL
- en: In version 6.0, the `Converter` constructors have been eliminated. To adapt
    to this change, modify classes that implement `Converter<HttpServletRequest`,
    `RelyingPartyRegistration>` to instead implement `RelyingPartyRegistrationResolver`.
  prefs: []
  type: TYPE_NORMAL
- en: Transitioning to utilizing Saml2AuthenticationRequestResolver
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In `Spring Security 6`, `Saml2AuthenticationContextResolver`, `Saml2AuthenticationRequestFactory`,
    and the associated `Saml2WebSsoAuthenticationRequestFilter` are eliminated.
  prefs: []
  type: TYPE_NORMAL
- en: They are replaced by `Saml2AuthenticationRequestResolver` and a new constructor
    in `Saml2WebSsoAuthenticationRequestFilter`. The revised interface removes an
    unnecessary transport object between these classes.
  prefs: []
  type: TYPE_NORMAL
- en: While most applications won’t require significant changes, if you currently
    use or configure `Saml2AuthenticationRequestContextResolver` or `Saml2Authentication`
    **RequestFactory**, consider the following steps to transition using `Saml2Authentication``RequestResolver`.
  prefs: []
  type: TYPE_NORMAL
- en: Replacing setAuthenticationRequestContextConverter
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Instead of using `setAuthenticationRequestContextConverter`, you should move
    to `setAuthnRequestCustomizer` in `Spring` `Security 6`.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, as `setAuthnRequestCustomizer` has direct access to the `HttpServletRequest`,
    there is no necessity for a `Saml2AuthenticationRequestContextResolver`. Simply
    utilize `setAuthnRequestCustomizer` to directly retrieve the required information
    from the `HttpServletRequest`.
  prefs: []
  type: TYPE_NORMAL
- en: Replacing setProtocolBinding
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The following implementation using `setProtocolBinding`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'can be replaced as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: As `Spring Security` exclusively supports the `POST` binding for authentication,
    overriding the protocol binding at this juncture doesn’t yield significant value.
  prefs: []
  type: TYPE_NORMAL
- en: Utilizing the most recent constructor for Saml2AuthenticationToken
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Prior to `Spring Security 6`, the `Saml2AuthenticationToken` constructor required
    multiple individual settings as parameters, posing challenges when adding new
    parameters. Recognizing that most of these settings were inherent to `RelyingPartyRegistration`,
    a more stable constructor was introduced. This new constructor allows the provision
    of a `RelyingPartyRegistration`, aligning more closely with the design of `OAuth2LoginAuthenticationToken`.
  prefs: []
  type: TYPE_NORMAL
- en: 'While most applications typically do not directly instantiate this class, as
    it is usually handled by `Saml2WebSsoAuthenticationFilter`, if your application
    does instantiate it, you should update the constructor as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Leveraging the updated methods in RelyingPartyRegistration
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In the initial version of `Spring Security`’s `RelyingPartyRegistration` methods
    and their functionalities. To address this issue and accommodate the introduction
    of additional capabilities to `RelyingPartyRegistration`, it became imperative
    to clarify the ambiguity by renaming the methods to align with the specification
    language.
  prefs: []
  type: TYPE_NORMAL
- en: After examining the various configuration migration options from `Spring Security
    5.x` to `Spring Security 6.x`, the subsequent section will demonstrate a practical
    example of migrating a JDBC application from `Spring Security 5.x` to `Spring`
    `Security 6.x`.
  prefs: []
  type: TYPE_NORMAL
- en: Applying the migration steps from Spring Security 5.x to Spring Security 6.x
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we’ll delve into the process of migrating a sample application
    from `Spring Security 5.x` to `Spring Security 6.x`. This migration aims to ensure
    compatibility with the latest features, improvements, and security enhancements
    offered by the newer version.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: The initial state of the application written in `Spring Security 5.x` is available
    in the project `chapter16.00-calendar`.
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing Application dependencies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following snippet defines the initial dependencies needed for `Spring`
    `Security 5.x`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'In the migrated version of `build.gradle`, we will upgrade `Spring Security`
    to version 6.x:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Migrating from the javax to jakarta namespace
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The migration from the `javax` namespace to the `jakarta` namespace in `Spring
    Security 6` is primarily driven by changes in the Java ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: This change is necessary due to the evolution of the Java **Enterprise Edition**
    (**EE**) specifications and the community-led Jakarta EE effort.
  prefs: []
  type: TYPE_NORMAL
- en: Replacing WebSecurityConfigurerAdapter and exposing SecurityFilterChain Bean
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As explained in the previous section, `Spring Security 6` introduces enhancements
    and refinements to streamline security configurations. One notable evolution in
    recent versions involves replacing the traditional `WebSecurityConfigurerAdapter`
    with a more flexible approach of exposing a `SecurityFilterChain` bean.
  prefs: []
  type: TYPE_NORMAL
- en: This paradigm shift provides developers with greater control and customization
    over their security configurations, facilitating finer-grained security setups
    tailored to specific application requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before the migration, the `SecurityConfig.java` looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'After the migration, we remove `WebSecurityConfigurerAdapter` and expose a
    `SecurityFilterChain` bean as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: As `@EnableWebSecurity` no longer includes `@Configuration` in `Spring Security
    6.x`, we declared both annotations in the migrated version of `SecurityConfig.java`.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: 'Your code should now look like this: `chapter16.01-calendar`.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter reviewed the major and minor changes that you will find when upgrading
    an existing `Spring Security 5.x` project to `Spring Security 6.x`. In this chapter,
    we have reviewed the significant enhancements to the framework that are likely
    to motivate an upgrade. We also examined upgrade requirements, dependencies, common
    types of code, and configuration changes that will prevent applications from working
    post-upgrade. We also covered the investigation (at a high level) of the overall
    code reorganization changes that the `Spring Security` authors made as part of
    code base restructuring.
  prefs: []
  type: TYPE_NORMAL
- en: If this is the first chapter you’ve read, we hope that you return to the rest
    of the book and use this chapter as a guide to allow your upgrade to `Spring Security
    6.x` to proceed as smoothly as possible!
  prefs: []
  type: TYPE_NORMAL
