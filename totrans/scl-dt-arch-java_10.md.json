["```java\n    query myquery{\n      byApplicationId(applicationId:\"CT20210809\"){\n        applicationId\n        id\n        riskScore\n      }\n    }\n    ```", "```java\n      mutation updateApplicationMutation { updateApplication(status:\"closed\") { \n    applicationId\n    custId\n    status\n    } \n    } \n    ```", "```java\n     type subscription{\n       commentsforPost(postId: \"123ty4567\"){\n       commentId\n       text\n      ...\n      }\n    }\n    ```", "```java\ntype Application {\n  applicationId: ID!\n  id: String!\n  genderCode: String\n  cars: [String]\n ...\n}\n```", "```java\ntype Query{\n    customerById(id: String):Customer\n    customerByName(firstname: String, lastName: String): [Customers]\n}\n```", "```java\ntype Query{\n    byApplicationId(applicationId: ID):Application\n    byCustomerId(custId: String):[Application]\n}\n```", "```java\ntype Application {\n    applicationId: ID!\n    id: String!\n    genderCode: String\n    flagOwnCar: String\n    flagOwnRealty: String\n    cntChildren: Int\n    amtIncomeTotal: Float\n    nameIncomeType: String\n    nameEducationType: String\n    nameFamilyStatus: String\n    nameHousingType: String\n...\n}\n```", "```java\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-test</artifactId>\n    <scope>test</scope>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-autoconfigure</artifactId>\n</dependency>\n```", "```java\n<!-- mongoDB dependencies -->\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-mongodb</artifactId>\n</dependency>\n<!-- Add support for Mongo Query DSL -->\n<dependency>\n    <groupId>com.querydsl</groupId>\n    <artifactId>querydsl-mongodb</artifactId>\n    <version>5.0.0</version>\n    <exclusions>\n        <exclusion>\n            <groupId>org.mongodb</groupId>\n            <artifactId>mongo-java-driver</artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\n<dependency>\n    <groupId>com.querydsl</groupId>\n    <artifactId>querydsl-apt</artifactId>\n    <version>5.0.0</version>\n</dependency>\n```", "```java\n<plugin>\n    <groupId>com.mysema.maven</groupId>\n    <artifactId>apt-maven-plugin</artifactId>\n    <version>1.1.3</version>\n    <dependencies>\n        <dependency>\n            <groupId>com.querydsl</groupId>\n            <artifactId>querydsl-apt</artifactId>\n            <version>5.0.0</version>\n        </dependency>\n    </dependencies>\n    <executions>\n        <execution>\n            <phase>generate-sources</phase>\n            <goals>\n                <goal>process</goal>\n            </goals>\n            <configuration>\n                <outputDirectory>target/generated-sources/apt</outputDirectory>\n                <processor>org.springframework.data.mongodb.repository.support.MongoAnnotationProcessor</processor>\n                <logOnlyOnError>false</logOnlyOnError>\n            </configuration>\n        </execution>\n    </executions>\n</plugin>\n```", "```java\n<!-- GraphQL dependencies -->\n<dependency>\n    <groupId>com.graphql-java</groupId>\n    <artifactId>graphql-java</artifactId>\n    <version>11.0</version>\n</dependency>\n<dependency>\n    <groupId>com.graphql-java</groupId>\n    <artifactId>graphql-java-spring-boot-starter-webmvc</artifactId>\n    <version>1.0</version>\n</dependency>\n```", "```java\n@SpringBootApplication\npublic class GraphqlDaaSApp {\n    public static void main(String[] args) {\n        SpringApplication.run(GraphqlDaaSApp.class,args);\n    }\n}\n```", "```java\n@Bean\npublic MongoClient mongo() throws Exception {\n    final ConnectionString connectionString = new ConnectionString(mongoUrl);\n    final MongoClientSettings mongoClientSettings = MongoClientSettings.builder().applyConnectionString(connectionString).serverApi(ServerApi.builder()\n            .version(ServerApiVersion.V1)\n            .build()).build();\n    return MongoClients.create(mongoClientSettings);\n}\n@Bean\npublic MongoTemplate mongoTemplate() throws Exception {\n    return new MongoTemplate(mongo(), mongoDb);\n}\n```", "```java\n@QueryEntity\n@Document(collection = \"newloanrequest\")\npublic class Application {\n    @Id\n    private String _id;\n    private String applicationId;\n```", "```java\npublic interface ApplicationRepository extends MongoRepository<Application, String>, QuerydslPredicateExecutor<Application> {\n    @Query(value = \"{ 'applicationId' : ?0 }\")\n    Application findApplicationsById(String applicationId);\n    @Query(value = \"{ 'id' : ?0 }\")\n    List<Application> findApplicationsByCustomerId(String id);\n}\n```", "```java\n...\nimport graphql.GraphQL;\n...\n@Component\npublic class GraphQLProvider {\n...\nprivate GraphQL graphQL;\n@PostConstruct\npublic void init() throws IOException {\n    URL url = Resources.getResource(\"schema.graphqls\");\n    String sdl = Resources.toString(url, Charsets.UTF_8);\n    GraphQLSchema graphQLSchema = buildSchema(sdl);\n    this.graphQL = GraphQL.newGraphQL(graphQLSchema).build();\n}\nprivate GraphQLSchema buildSchema(String sdl) {\n    TypeDefinitionRegistry typeRegistry = new SchemaParser().parse(sdl);\n    RuntimeWiring runtimeWiring = buildWiring();\n    SchemaGenerator schemaGenerator = new SchemaGenerator();\n    return schemaGenerator.makeExecutableSchema(typeRegistry, runtimeWiring);\n}\nprivate RuntimeWiring buildWiring() {\n    return RuntimeWiring.newRuntimeWiring()\n            .type(newTypeWiring(\"Query\")\n                    .dataFetcher(\"byApplicationId\", graphQLDataFetchers.getApplicationbyApplicationIdDataFetcher())\n                    .dataFetcher(\"byCustomerId\",graphQLDataFetchers.getApplicationsbyCustomerIdDataFetcher()))\n            .build();\n}\n```", "```java\n@Bean\npublic GraphQL graphQL() {\n    return graphQL;\n}\n```", "```java\n@PublicSpi\npublic interface DataFetcher<T> {\n    T get(DataFetchingEnvironment var1) throws Exception;\n}\n```", "```java\npublic DataFetcher getApplicationbyApplicationIdDataFetcher() {\n    return dataFetchingEnvironment -> {\n        String applicationId = dataFetchingEnvironment.getArgument(\"applicationId\");\n        return applicationRepository.findApplicationsById(applicationId);\n    };\n}\n```", "```java\ngrahqldaas:\n  mongoUrl: mongodb+srv://<mongodburl>/CRRD?retryWrites=true&w=majority\n  mongoDb: CRRD\n```", "```java\nhttp://<host_name>:8080/graphql\n```", "```java\n...\n\"\"\"\nType Application represents the entity/schema of the response payload for both byApplicationId and byCustomerId fields\n\"\"\"\ntype Application {\n    \"\"\"\n    Application Id which uniquely identifies each credit card application\n    \"\"\"\n    applicationId: ID!\n...\n```"]