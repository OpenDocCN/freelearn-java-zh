- en: '*Chapter 4*: Domain Analysis and Modeling'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: “He who asks a question remains a fool for 5 minutes. He who does not ask remains
    a fool forever.”
  prefs: []
  type: TYPE_NORMAL
- en: – Chinese proverb
  prefs: []
  type: TYPE_NORMAL
- en: As we saw in the previous chapter, misinterpreted requirements can cause a significant
    portion of software projects to fail. Arriving at a shared understanding and creating
    a useful domain model requires high degrees of collaboration between domain experts.
    In this chapter, we will introduce the sample application we will use throughout
    the book and explore modeling techniques, such as domain storytelling and EventStorming,
    to enhance our collective understanding of a problem in a reliable and structured
    manner.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the example application (a letter of credit)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhancing shared understanding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Domain storytelling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EventStorming
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This chapter will help developers and architects learn how to apply these techniques
    in real-life situations to produce elegant software solutions that mirror the
    domain problem that needs to be solved. Similarly, non-technical domain experts
    will understand how to communicate their ideas and collaborate effectively with
    technical team members to accelerate the process of arriving at a shared understanding.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are no specific technical requirements for this chapter. However, given
    that it may become necessary to collaborate remotely as opposed to being in the
    same room with access to a whiteboard, it will be useful to have access to the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: A digital whiteboard (such as [https://www.mural.co/](https://www.mural.co/)
    or [http://miro.com/](http://miro.com/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An online domain storytelling modeler (such as [https://www.wps.de/modeler/](https://www.wps.de/modeler/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding a letter of credit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A documentary **Letter of Credit** (**LC**) is a financial instrument issued
    by banks as a contract between an importer (or buyer) and an exporter (or seller).
    This contract specifies the terms and conditions of the transaction, under which
    the importer promises to pay the exporter in exchange for the goods or services
    provided by the exporter. An LC transaction typically involves multiple parties.
    A simplified summary of the parties involved is described as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Importer**: The buyer of the goods or services.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Exporter**: The seller of the goods or services.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Freight forwarder**: The agency that handles the shipment of goods on behalf
    of the exporter. This is only applicable in cases where there is an exchange of
    physical goods.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Issuing bank**: The bank that the importer requests to issue the LC application.
    Usually, the importer has a preexisting relationship with this bank.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Advising bank**: The bank that informs the exporter about the issuance of
    the LC. This is usually a bank that is native to the exporter’s country.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Negotiating bank**: The bank that the exporter submits documents for the
    shipment of goods, or the services provided. Usually, the exporter has a preexisting
    relationship with this bank.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reimbursement bank**: The bank that reimburses the funds to the negotiating
    bank, at the request of the issuing bank.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: One bank can play more than one role in a given transaction. In the most complex
    cases, there can be four distinct banks involved in a transaction (sometimes even
    more, but we will skip those cases for brevity).
  prefs: []
  type: TYPE_NORMAL
- en: An LC issuance application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As discovered in the previous chapter, Kosmo Primo Bank needs us to focus on
    streamlining the process used for LC application and issuance functions. In this
    chapter, and indeed the rest of this book, we will strive to understand, evolve,
    design, and build a software solution to make the process more efficient by replacing
    the largely manual and error-prone workflows with more simplified processes, based
    on larger amounts of automation.
  prefs: []
  type: TYPE_NORMAL
- en: We understand that unless you are an expert dealing with international trade,
    it is unlikely that you will have an intimate understanding of concepts such as
    LCs. In the upcoming section, we will look at demystifying LCs and how to work
    with them.
  prefs: []
  type: TYPE_NORMAL
- en: Enhancing shared understanding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When working with a problem where domain concepts are unclear, there is a need
    to arrive at a common understanding among key team members (both those that have
    bright ideas – the business/product people, and those that translate those ideas
    into working software – the software developers). For this process to be effective,
    we tend to look for approaches that are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Quick, informal, and effective
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collaborative – easy to learn and adopt for both non-technical and technical
    team members
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pictorial, because a picture can be worth a thousand words
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Usable for both coarse-grained and fine-grained scenarios
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are several means to arrive at this shared understanding. The following
    are some of the commonly used approaches:'
  prefs: []
  type: TYPE_NORMAL
- en: UML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BPMN
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use cases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User story mapping
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CRC models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data flow diagrams
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These modeling techniques try to formalize knowledge and express it in the form
    of a diagram or text to help deliver business requirements as a software product.
    However, this attempt has not narrowed but widened the gap between business and
    software systems. While these methods tend to work well for technical audiences,
    they are usually not as appealing to non-technical users.
  prefs: []
  type: TYPE_NORMAL
- en: In order to restore the balance and promote the use of techniques that can work
    for both parties, we will use **domain storytelling** and **EventStorming** as
    our means to capture business knowledge from domain experts for the consumption
    of developers and business analysts, among others.
  prefs: []
  type: TYPE_NORMAL
- en: Domain storytelling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Scientific research has now proven that learning methods that employ audiovisual
    aids assist both teachers and students in retaining and internalizing concepts
    very effectively. In addition, teaching what we have learned helps reinforce ideas
    and stimulate the formation of new ones.
  prefs: []
  type: TYPE_NORMAL
- en: Domain storytelling is a collaborative modeling technique that combines a pictorial
    language, real-world examples, and a workshop format to serve as a very simple,
    quick, and effective technique for sharing knowledge among team members. Domain
    storytelling is a technique invented and popularized by Stefan Hofer and Henning
    Schwentner, based on some related work done at the University of Hamburg called
    *cooperation pictures*.
  prefs: []
  type: TYPE_NORMAL
- en: 'A pictorial notation of the technique is illustrated in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.1 – Domain storytelling summarized'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16716_04_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.1 – Domain storytelling summarized
  prefs: []
  type: TYPE_NORMAL
- en: 'A domain story is conveyed using the following attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Actors**: Stories are communicated from the perspective of an actor (noun)
    – for example, the issuing bank, which plays an active role in the context of
    a particular story. It is a good practice to use the ubiquitous language for the
    particular domain.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Work objects**: Actors act on some object – for example, applying for an
    LC. Again, this would be a term (noun) commonly used in the domain.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Activities**: Actions (verb) performed by the actor on a work object. Represented
    by a labeled arrow connecting the actor and the work object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Annotations**: Used to capture additional information as part of the story,
    usually represented in a few sentences.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sequence numbers**: Usually, stories are told one sentence after the other.
    Sequence numbers help capture the sequence of activities in a story.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Groups**: An outline to represent a collection of related concepts, ranging
    from repeated/optional activities to subdomains/organizational boundaries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using DST for an LC application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: KP Bank has a process that allows the processing of LCs. However, this process
    is very archaic, paper-based, and manually intensive. Very few at the bank fully
    understand the process end to end, and natural attrition has meant that the process
    is overly complex without good reason. So, they are looking to digitize and simplify
    this process. DST itself is just a graphical notation that can be done in isolation.
    However, it is typical to not do this on your own and employ a workshop style,
    with domain experts and software experts working collaboratively.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will employ a DST workshop to capture the current business
    flow. The following is an excerpt of such a conversation between *Katie*, *the
    domain expert*, and *Patrick*, *the software developer*:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Patrick**: *Can you give me a high-level overview of a typical LC flow?*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Katie**: *Sure, it all begins with the importer and the exporter entering
    into a contract for the purchase of goods or services.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Patrick**: *What form does this contract take? Is it a formal document clause?
    Or is this just a conversation?*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Katie**: *This is just a conversation.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Patrick**: *Oh okay. What does the conversation cover?*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Katie**: *Several things – the nature and quantity of goods, pricing details,
    payment terms, shipment costs and timelines, insurance, and warranty, among other
    things. These details can be captured in a purchase order – which is a simple
    document clause elaborating the aforementioned.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'At this time, Patrick draws this part of the interaction between the importer
    and the exporter. This graphic is depicted in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ Figure 4.2 – The interaction between the importer and the exporter'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16716_04_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.2 – The interaction between the importer and the exporter
  prefs: []
  type: TYPE_NORMAL
- en: '**Patrick**: *This seems straightforward, so where does the bank come into
    the picture?*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Katie**: *This is an international trade, and both the importer and the exporter
    need to mitigate the financial risk involved in such business transactions. So,
    they involve a bank as a trusted mediator.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Patric**: *What kind of bank is this?*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Katie**: *Usually, there are multiple banks involved. But it all starts with
    an* **issuing bank***.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Patrick**: *What is an issuing bank?*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Katie**: *Any bank that is authorized to mediate international trade deals.
    This has to be a bank in the importer’s country.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Patrick**: *Does the importer need to have an existing relationship with
    this bank?*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Katie**: *Not necessarily. There may be other banks with whom the importer
    may have a relationship – which, in turn, liaise with the issuing bank on the
    importer’s behalf. But to keep it simple, let’s assume that the importer has an
    existing relationship with the issuing bank – which is our bank, in this case.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Patrick**: *Does the importer provide details of the purchase order to the
    issuing bank to get started?*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Katie**: *Yes. The importer provides the details of the transaction by making
    an* **LC application***.*'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.3 – Introducing the LC and the issuing bank'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16716_04_03.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.3 – Introducing the LC and the issuing bank
  prefs: []
  type: TYPE_NORMAL
- en: '**Patrick**: *What does the issuing bank do when they receive this LC application?*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Katie**: *Mainly two things – vet the financial standing of the importer
    and the legality of the goods being imported.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Patrick**: *Okay. What happens if everything checks out?*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Katie**: *The issuing bank approves the LC and notifies the importer.*'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.4 – Notifying LC approval to the importer'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16716_04_04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.4 – Notifying LC approval to the importer
  prefs: []
  type: TYPE_NORMAL
- en: '**Patrick**: *What happens next? Does the issuing bank contact the exporter
    now?*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Katie**: *Not yet. It is not that simple. The issuing bank can only deal
    with a counterpart bank in the exporter’s country. This bank is called the* **advising
    bank***.*'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.5 – Introducing the advising bank'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16716_04_05.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.5 – Introducing the advising bank
  prefs: []
  type: TYPE_NORMAL
- en: '**Patrick**: *What does the advising bank do?*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Katie**: *The advising bank notifies the exporter about the LC.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Patrick**: *Doesn’t the importer need to know that the LC has been advised?*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Katie**: *Yes. The issuing bank notifies the importer that the LC has been
    advised to the exporter.*'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.6 – Advice notification to the importer'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16716_04_06.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.6 – Advice notification to the importer
  prefs: []
  type: TYPE_NORMAL
- en: '**Patrick**: *How does the exporter know how to proceed?*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Katie**: *Through the advising bank – they notify the exporter that the LC
    was issued.*'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.7 – Dispatching the advice to the exporter'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16716_04_07.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.7 – Dispatching the advice to the exporter
  prefs: []
  type: TYPE_NORMAL
- en: '**Patrick**: *Does the exporter initiate shipping at this time and how do they
    get paid?*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Katie**: *Through the advising bank – they notify the exporter that the LC
    was issued, and this triggers the next steps in the process – this process of
    settling payment is called* **settlement***. But let’s focus on issuance right
    now. We will discuss settlement at a later time.*'
  prefs: []
  type: TYPE_NORMAL
- en: We have now looked at an excerpt of a typical DST workshop. It has provided
    a reasonably good understanding of the high-level business flow. Note that we
    have not referenced any technical artifacts during the process.
  prefs: []
  type: TYPE_NORMAL
- en: To refine this flow and convert it into a form that can be used to design a
    software solution, we will need to further enhance this view. In the upcoming
    section, we will use **EventStorming** as a structured approach to achieve that.
  prefs: []
  type: TYPE_NORMAL
- en: EventStorming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: “The amount of energy necessary to refute bullshit is an order of magnitude
    bigger than to produce it.”
  prefs: []
  type: TYPE_NORMAL
- en: – Alberto Brandolini
  prefs: []
  type: TYPE_NORMAL
- en: Introducing EventStorming
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous section, we gained a high-level understanding of the LC issuance
    process. To be able to build a real-world application, it helps to use a method
    that delves into the next level of detail. EventStorming, originally conceived
    by Alberto Brandolini, is one such method for the collaborative exploration of
    complex domains.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this method, you simply start by listing all the events that are significant
    to a business domain in roughly chronological order on a wall or whiteboard, using
    a bunch of colored sticky notes. Each of the note types (denoted by different
    colors) serves a specific purpose, as outlined here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Domain event**: An event that is significant to the business process – expressed
    in the past tense.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Command**: An action or an activity that may result in one or more domain
    events occurring. This is either user-initiated or system-initiated, in response
    to a domain event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User**: A person who performs a business action/activity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Policy**: A set of business invariants (rules) that need to be adhered to
    for an action/activity to be successfully performed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Query/read model**: A piece of information required to perform an action/activity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**External system**: A system significant to the business process but out of
    scope in the current context.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hotspot**: A point of contention within the system that is likely confusing
    and/or puzzling beyond a small subsection of the team.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Aggregate**: An object graph whose state changes consistently and atomically.
    This is consistent with the definition of *aggregates* we saw in [*Chapter 2*](B16716_02_Final_NM_ePub.xhtml#_idTextAnchor037),
    *Where and How Does DDD Fit?*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The depiction of the stickies for our EventStorming workshop is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.8 – An EventStorming legend'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16716_04_08.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.8 – An EventStorming legend
  prefs: []
  type: TYPE_NORMAL
- en: Why Domain Events?
  prefs: []
  type: TYPE_NORMAL
- en: When trying to understand a business process, it is convenient to explain significant
    facts or things in that context. This practice can also be informal and easy for
    uninitiated audiences. This provides an easy-to-digest visual representation of
    domain complexity.
  prefs: []
  type: TYPE_NORMAL
- en: Using EventStorming for the LC issuance application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have a high-level understanding of the current business process,
    thanks to the domain storytelling workshop, let’s look at how we can delve deeper
    using EventStorming. The following is an excerpt of the stages from an EventStorming
    workshop for the same application:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Outline the event chronology**: During this exercise, we recall significant
    **domain events** (using orange stickies) in the system and paste them on the
    whiteboard, as depicted in the following diagram. We ensure that the event stickies
    are pasted roughly in the chronological order of occurrence. As the timeline is
    enforced, the business flow will begin to emerge:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.9 – Event chronology'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16716_04_09.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.9 – Event chronology
  prefs: []
  type: TYPE_NORMAL
- en: This acts as an aid in understanding the big picture. This also enables people
    in the room to identify hotspots in the existing business process. In the preceding
    diagram, the process to handle *declined LC applications* is suboptimal – that
    is, the applicants do not receive any information when their application is declined.
  prefs: []
  type: TYPE_NORMAL
- en: 'To address this, we added a new domain event that explicitly indicates that
    an application is declined, as depicted in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.10 – A new event to handle declined applications'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16716_04_10.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.10 – A new event to handle declined applications
  prefs: []
  type: TYPE_NORMAL
- en: '**Identify triggering activities and external systems**: Having arrived at
    a high-level understanding of event chronology, the next step is to embellish
    the visual with *activities/actions* that cause these events to occur (using blue
    stickies) and interactions with *external systems* (using pink stickies):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.11 – Activities and external systems'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16716_04_11.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.11 – Activities and external systems
  prefs: []
  type: TYPE_NORMAL
- en: '**Capture users, context, and policies**: The next step is to capture *users*
    who perform these activities along with their functional *context* (using yellow
    stickies) and *policies* (using purple stickies).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.12 – Users and policies'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16716_04_12.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.12 – Users and policies
  prefs: []
  type: TYPE_NORMAL
- en: '**Outline query models**: Every activity requires a certain set of data. Users
    need to view out-of-band data that they need to act upon and also see the result
    of their actions. These sets of data are represented as *query models* (using
    green stickies):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.13 – A big picture EventStorming workshop board'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16716_04_13.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.13 – A big picture EventStorming workshop board
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: For both the domain storytelling and EventStorming workshops, it works best
    when we have approximately six to eight people participating with the right mix
    of domain and technology experts.
  prefs: []
  type: TYPE_NORMAL
- en: 'This concludes the EventStorming workshop to gain a reasonably detailed understanding
    of the LC application and issuance process. Does this mean that we have concluded
    the domain requirements gathering process? Not at all – while we have made significant
    strides in understanding the domain, there is still a long way to go. The process
    of elaborating domain requirements is perpetual. Where are we in this continuum?
    The following diagram is an attempt to clarify:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.14 – Elaborating the domain requirements continuum'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16716_04_14.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.14 – Elaborating the domain requirements continuum
  prefs: []
  type: TYPE_NORMAL
- en: In subsequent chapters, we will examine the other techniques in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we examined two ways to enhance our collective understanding
    of a problem domain using two lightweight modeling techniques – domain storytelling
    and EventStorming.
  prefs: []
  type: TYPE_NORMAL
- en: Domain storytelling uses a simple pictorial notation to share business knowledge
    among domain experts and technical team members. EventStorming, on the other hand,
    uses a chronological ordering of domain events that occur as part of the business
    process to gain that same shared understanding.
  prefs: []
  type: TYPE_NORMAL
- en: Domain storytelling can be used as an introductory technique to establish a
    high-level understanding of a problem space, while EventStorming can be used to
    inform detailed design decisions of a solution space.
  prefs: []
  type: TYPE_NORMAL
- en: With this knowledge, we should be able to dive deeper into the technical aspects
    of solution implementation. In the next chapter, we will start the implementation
    of business logic and model our aggregate, along with commands and domain events.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](img/B16716_04_Table_01.jpg)'
  prefs: []
  type: TYPE_IMG
