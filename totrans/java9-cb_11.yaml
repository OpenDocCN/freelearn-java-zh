- en: Networking
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络通信
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下菜谱：
- en: Making an HTTP GET request
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送 HTTP GET 请求
- en: Making an HTTP POST request
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送 HTTP POST 请求
- en: Making an HTTP request for a protected resource
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为受保护资源发送 HTTP 请求
- en: Making an asynchronous HTTP request
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送异步 HTTP 请求
- en: Making an HTTP request using Apache HttpClient
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Apache HttpClient 发送 HTTP 请求
- en: Making an HTTP request using the Unirest HTTP client library
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Unirest HTTP 客户端库发送 HTTP 请求
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Java's support for interacting with HTTP-specific features has been very primitive.
    The `HttpURLConnection` class, available since JDK 1.1, provides APIs for interacting
    with URLs with HTTP-specific features. Since this API has been there even before
    HTTP/1.1, it lacked advanced features and was a pain to use. This is why developers
    mostly resorted to using third-party libraries, such as **Apache HttpClient**,
    Spring frameworks, HTTP APIs, and so on.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Java 对与 HTTP 特定功能的交互支持一直非常原始。自 JDK 1.1 以来可用的 `HttpURLConnection` 类提供了与具有 HTTP
    特定功能的 URL 交互的 API。由于此 API 在 HTTP/1.1 之前就已经存在，它缺乏高级功能，使用起来很不方便。这就是为什么开发者大多求助于使用第三方库，例如
    **Apache HttpClient**、Spring 框架、HTTP API 等等。
- en: In JDK 9, a new HTTP client API is being introduced under JEP 110 ([http://openjdk.java.net/jeps/110](http://openjdk.java.net/jeps/110)).
    Unfortunately, this API is being introduced as an incubator module ([http://openjdk.java.net/jeps/11](http://openjdk.java.net/jeps/11)).
    An incubator module contains non-final APIs, which are significantly larger and
    not mature completely to be included in Java SE. This is a form of beta release
    of the API so that the developers get to use the APIs much earlier. But the catch
    here is that there is no backward compatibility support for these APIs in the
    newer versions of JDK. This means that code that is dependent on the incubator
    modules might break with the newer versions of JDK. This might be due to the incubator
    module being promoted to Java SE or being silently dropped from the incubator
    modules.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JDK 9 中，一个新的 HTTP 客户端 API 正在 JEP 110 ([http://openjdk.java.net/jeps/110](http://openjdk.java.net/jeps/110))
    下引入。不幸的是，这个 API 正在被引入为一个孵化模块 ([http://openjdk.java.net/jeps/11](http://openjdk.java.net/jeps/11))。孵化模块包含非最终
    API，这些 API 非常庞大，并且尚未完全成熟，不能包含在 Java SE 中。这是一种 API 的 beta 版本，以便开发者能够更早地使用这些 API。但这里的难点是，这些
    API 在 JDK 的新版本中没有向后兼容性支持。这意味着依赖于孵化模块的代码可能会在新版本的 JDK 中中断。这可能是由于孵化模块被提升到 Java SE
    或被无声地从孵化模块中删除。
- en: In any case, it will be good to know about the HTTP client APIs, which might
    come into future JDK releases. In addition to this, it is good to know about the
    alternatives we have for now. So, in this chapter, we will cover a few recipes
    showing how to use the HTTP client APIs in the JDK 9 incubator modules, and then
    a few other APIs, which make use of the Apache HttpClient ([http://hc.apache.org/httpcomponents-client-ga/](http://hc.apache.org/httpcomponents-client-ga/))
    API and the Unirest Java HTTP library ([http://unirest.io/java.html](http://unirest.io/java.html)).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，了解可能在未来 JDK 版本中出现的 HTTP 客户端 API 将是有益的。除此之外，了解我们现在拥有的替代方案也是有益的。因此，在本章中，我们将介绍一些菜谱，展示如何在
    JDK 9 孵化模块中使用 HTTP 客户端 API，然后介绍一些其他 API，这些 API 使用了 Apache HttpClient ([http://hc.apache.org/httpcomponents-client-ga/](http://hc.apache.org/httpcomponents-client-ga/))
    API 和 Unirest Java HTTP 库 ([http://unirest.io/java.html](http://unirest.io/java.html))。
- en: Making an HTTP GET request
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发送 HTTP GET 请求
- en: In this recipe, we will look at using the JDK 9 HTTP Client API to make a `GET`
    request to the URL, [http://httpbin.org/get](http://httpbin.org/get).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将探讨使用 JDK 9 HTTP 客户端 API 向 URL 发送 `GET` 请求，[http://httpbin.org/get](http://httpbin.org/get)。
- en: How to do it...
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'Create an instance of `jdk.incubator.http.HttpClient` using its builder, `jdk.incubator.http.HttpClient.Builder`:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `jdk.incubator.http.HttpClient.Builder` 构建器创建 `jdk.incubator.http.HttpClient`
    的实例：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create an instance of `jdk.incubator.http.HttpRequest` using its builder, `jdk.incubator.http.HttpRequest.Builder`.
    The requested URL should be provided as an instance of `java.net.URI`:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `jdk.incubator.http.HttpRequest.Builder` 构建器创建 `jdk.incubator.http.HttpRequest`
    的实例。请求的 URL 应该提供为 `java.net.URI` 的实例：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Send the HTTP request using the `send` API of `jdk.incubator.http.HttpClient`.
    This API takes an instance of `jdk.incubator.http.HttpRequest` and an implementation
    of `jdk.incubator.http.HttpResponse.BodyHandler`:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `jdk.incubator.http.HttpClient` 的 `send` API 发送 HTTP 请求。此 API 接受 `jdk.incubator.http.HttpRequest`
    的实例和 `jdk.incubator.http.HttpResponse.BodyHandler` 的实现：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Print the `jdk.incubator.http.HttpResponse` status code and the response body:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印 `jdk.incubator.http.HttpResponse` 的状态码和响应体：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The complete code for this can be found at the location `chp11/1_making_http_get`.
    You can make use of the run scripts, `run.bat` or `run.sh`, to compile and run
    the code:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码的完整内容可以在位置 `chp11/1_making_http_get` 找到。你可以使用运行脚本 `run.bat` 或 `run.sh` 来编译和运行代码：
- en: '![](img/c91cf236-8baf-4f9d-8dbd-904553558ef6.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c91cf236-8baf-4f9d-8dbd-904553558ef6.png)'
- en: How it works...
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'There are two main steps in making an HTTP call to a URL:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 向 URL 发送 HTTP 请求主要有两个步骤：
- en: Creating an HTTP client to initiate the call.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 HTTP 客户端以发起调用。
- en: Setting up the destination URL, required HTTP headers, and the HTTP method type,
    that is, `GET`, `POST`, or `PUT`.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置目标 URL、必需的 HTTP 头部和 HTTP 方法类型，即 `GET`、`POST` 或 `PUT`。
- en: 'The Java HTTP Client API provides a builder class, `jdk.incubator.http.HttpClient.Builder`,
    which can be used to build an instance of `jdk.incubator.http.HttpClient` at the
    same time, making use of the builder APIs to set up `jdk.incubator.http.HttpClient`.
    The following code snippet shows how to get an instance of `jdk.incubator.http.HttpClient`
    with the default configuration:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Java HTTP 客户端 API 提供了一个构建器类 `jdk.incubator.http.HttpClient.Builder`，它可以用来构建
    `jdk.incubator.http.HttpClient` 的实例，同时利用构建器 API 来设置 `jdk.incubator.http.HttpClient`。以下代码片段展示了如何使用默认配置获取
    `jdk.incubator.http.HttpClient` 的实例：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following code snippet uses the builder to configure and then create an
    instance of `jdk.incubator.http.HttpClient`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段使用构建器进行配置，然后创建 `jdk.incubator.http.HttpClient` 的实例：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: There are more APIs in the builder, such as setting authentication, proxy, and
    providing SSL context, which we will look at in different recipes.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 构建器中还有更多 API，例如设置身份验证、代理和提供 SSL 上下文，我们将在不同的菜谱中查看。
- en: 'Setting up the destination URL is nothing but creating an instance of `jdk.incbator.http.HttpRequest`
    using its builder and its APIs to configure the same. The following code snippet
    shows how to create an instance of `jdk.incbator.http.HttpRequest`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 设置目标 URL只是创建一个 `jdk.incbator.http.HttpRequest` 的实例，使用其构建器和 API 进行配置。以下代码片段展示了如何创建
    `jdk.incbator.http.HttpRequest` 的实例：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `jdk.incubator.http.HttpClient` object provides two APIs to make an HTTP
    call:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`jdk.incubator.http.HttpClient` 对象提供了两个 API 来进行 HTTP 调用：'
- en: Send synchronously using the `HttpClient#send()` method
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `HttpClient#send()` 方法同步发送
- en: Send asynchronously using the `HttpClient#sendAsync()` method
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `HttpClient#sendAsync()` 方法异步发送
- en: 'The `send()` method takes in two parameters: the HTTP request and the handler
    for the HTTP response. The handler for the response is represented by the implementation
    of the `jdk.incubator.http.HttpResponse.BodyHandler` interface. There are a few
    implementations available, such as `asString()`, which reads the response body
    as `String`, `asByteArray()`, which reads the response body as a byte array, and
    so on. We will use the `asString()` method, which returns the response `Body`
    as a string:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`send()` 方法接收两个参数：HTTP 请求和 HTTP 响应的处理程序。响应的处理程序由 `jdk.incubator.http.HttpResponse.BodyHandler`
    接口的实现表示。有几个可用的实现，例如 `asString()`，它将响应体读取为 `String`，`asByteArray()`，它将响应体读取为字节数组，等等。我们将使用
    `asString()` 方法，它将响应 `Body` 返回为字符串：'
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The instance of  `jdk.incubator.http.HttpResponse` represents the response
    from the HTTP server. It provides APIs for the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`jdk.incubator.http.HttpResponse` 的实例表示来自 HTTP 服务器的响应。它提供了以下 API：'
- en: Getting the response body (`body()`)
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取响应体（`body()`）
- en: HTTP headers (`headers()`)
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP 头部（`headers()`）
- en: The initial HTTP request (`request()`)
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始 HTTP 请求（`request()`）
- en: The response status code (`statusCode()`)
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应状态码（`statusCode()`）
- en: The URL used for the request (`uri()`)
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求使用的 URL（`uri()`）
- en: The `HttpResponse.BodyHandler` implementation passed to the `send()` method
    helps in converting the HTTP response into a compatible format, such as `String`,
    a `byte` array, and so on.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给 `send()` 方法的 `HttpResponse.BodyHandler` 实现将 HTTP 响应转换为兼容格式，例如 `String`、`byte`
    数组等。
- en: Making an HTTP POST request
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发送 HTTP POST 请求
- en: In this recipe, we will look at posting some data to an HTTP service via the
    request body. We will post the data to a URL: `http://httpbin.org/post`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在本菜谱中，我们将通过请求体向 HTTP 服务发送一些数据。我们将数据发送到 URL：`http://httpbin.org/post`。
- en: We will skip the package prefix for the classes, as it is assumed to be `jdk.incubator.http`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将跳过类的包前缀，因为它假定是 `jdk.incubator.http`。
- en: How to do it...
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create an instance of `HttpClient` using its `HttpClient.Builder` builder:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用其 `HttpClient.Builder` 构建器创建 `HttpClient` 的实例：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create the required data to be passed into the request body:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建要传递到请求体的所需数据：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Create a `HttpRequest` object with the request method as POST and by providing
    the request body data as `String`. We make use of Jackson''s `ObjectMapper` to
    convert the request body, `Map<String, String>`, into a plain JSON `String` and
    then make use of `HttpRequest.BodyProcessor` to process the `String` request body:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`HttpRequest`对象，请求方法为POST，并通过提供请求体数据作为`String`。我们使用Jackson的`ObjectMapper`将请求体`Map<String,
    String>`转换为普通的JSON`String`，然后使用`HttpRequest.BodyProcessor`处理`String`请求体：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The request is sent and the response is obtained by using the `send(HttpRequest,
     HttpRequest.BodyHandler)` method:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`send(HttpRequest, HttpRequest.BodyHandler)`方法发送请求并获取响应：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We then print the response status code and the response body sent by the server:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们打印出服务器发送的响应状态码和响应体：
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The complete code for this can be found at `chp11/2_making_http_post`. Make
    sure that there are the following Jackson JARs in the location, `chp11/2_making_http_post/mods`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这个完整的代码可以在`chp11/2_making_http_post`中找到。请确保在`chp11/2_making_http_post/mods`位置有以下的Jackson
    JAR文件：
- en: '`jackson.databind.jar`'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jackson.databind.jar`'
- en: '`jackson.core.jar`'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jackson.core.jar`'
- en: '`jackson.annotations.jar`'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jackson.annotations.jar`'
- en: Also, take note of the module definition, `module-info.java`, available at the
    location, `chp11/2_making_http_post/src/http.client.demo`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意模块定义文件`module-info.java`，它位于`chp11/2_making_http_post/src/http.client.demo`位置。
- en: To understand how Jackson JARs are used in this modular code, please refer to
    the recipes *Bottom-up migration* and *Top-down migration* in [Chapter 3](488da544-ff73-4ef7-9d57-00b67479defd.xhtml),
    *Modular Programming*.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何在模块化代码中使用Jackson JAR文件，请参考第3章中关于*自下而上的迁移*和*自上而下的迁移*的食谱，*模块化编程*。
- en: 'Run scripts, `run.bat` and `run.sh`, are provided to facilitate the compilation
    and execution of the code:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 提供了`run.bat`和`run.sh`脚本来方便代码的编译和执行：
- en: '![](img/4838990a-d81a-40b9-940f-12f2dad25792.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4838990a-d81a-40b9-940f-12f2dad25792.png)'
- en: Making an HTTP request for a protected resource
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对受保护资源的HTTP请求
- en: In this recipe, we will look at invoking an HTTP resource that has been protected
    by user credentials. The URL, [http://httpbin.org/basic-auth/user/passwd](http://httpbin.org/basic-auth/user/passwd),
    has been protected by HTTP basic authentication. Basic authentication requires
    a username and a password to be provided in plain text, which is then used by
    the HTTP resources to decide whether the user authentication is successful or
    not.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将探讨如何调用一个受用户凭证保护的网络资源。URL，[http://httpbin.org/basic-auth/user/passwd](http://httpbin.org/basic-auth/user/passwd)，已被HTTP基本认证保护。基本认证要求提供用户名和密码，并以明文形式提供，然后由HTTP资源用来判断用户认证是否成功。
- en: 'If you open the link, [http://httpbin.org/basic-auth/user/passwd](http://httpbin.org/basic-auth/user/passwd),
    in the browser, it will prompt for the username and password, as shown in the
    following screenshot:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你通过浏览器打开链接，[http://httpbin.org/basic-auth/user/passwd](http://httpbin.org/basic-auth/user/passwd)，将会提示输入用户名和密码，如下面的截图所示：
- en: '![](img/26b9a1a7-c65a-4ae3-9c8d-f0003553f30a.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/26b9a1a7-c65a-4ae3-9c8d-f0003553f30a.png)'
- en: 'Use the username as `user` and password as `passwd`, and you will be authenticated
    to be shown a JSON response, as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 使用用户名作为`user`和密码作为`passwd`，你将能够通过认证并显示JSON响应，如下所示：
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Let's achieve the same using the `HttpClient` API.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`HttpClient` API实现同样的功能。
- en: How to do it...
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'We need to extend `java.net.Authenticator` and override its `getPasswordAuthentication()`
    method. This method should return an instance of `java.net.PasswordAuthentication`.
    Let''s create a class, `UsernamePasswordAuthenticator`, which extends `java.net.Authenticator`:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要扩展`java.net.Authenticator`类并重写其`getPasswordAuthentication()`方法。该方法应该返回一个`java.net.PasswordAuthentication`实例。让我们创建一个类，`UsernamePasswordAuthenticator`，它扩展了`java.net.Authenticator`：
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We will create two instance variables in the `UsernamePasswordAuthenticator`
    class  to store the username and password, and we''ll provide a constructor to
    initialize the same:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在`UsernamePasswordAuthenticator`类中创建两个实例变量来存储用户名和密码，并提供一个构造函数来初始化它们：
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We then override the `getPasswordAuthentication()` method to return an instance
    of `java.net.PasswordAuthentication`, initialized with the username and password:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们重写`getPasswordAuthentication()`方法来返回一个初始化了用户名和密码的`java.net.PasswordAuthentication`实例：
- en: '[PRE16]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We then create an instance of `UsernamePasswordAuthenticator`:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们创建一个`UsernamePasswordAuthenticator`实例：
- en: '[PRE17]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We provide the instance of `UsernamePasswordAuthenticator` while initializing
    the `HttpClient`:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在初始化`HttpClient`时提供`UsernamePasswordAuthenticator`的实例：
- en: '[PRE18]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'A corresponding `HttpRequest` object is created to call the protected HTTP
    resource, [http://httpbin.org/basic-auth/user/passwd](http://httpbin.org/basic-auth/user/passwd):'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个对应的`HttpRequest`对象来调用受保护的HTTP资源，[http://httpbin.org/basic-auth/user/passwd](http://httpbin.org/basic-auth/user/passwd)：
- en: '[PRE19]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We obtain `HttpResponse` by executing the request and print the status code
    and the request body:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们通过执行请求来获取`HttpResponse`，并打印状态码和请求体：
- en: '[PRE20]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The complete code for this is available at the location, `chp11/3_making_http_request_protected_res`.
    You can run the code by using the run scripts, `run.bat` or `run.sh`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的代码位于位置，`chp11/3_making_http_request_protected_res`。您可以通过使用运行脚本`run.bat`或`run.sh`来运行代码：
- en: '![](img/1963997d-11a8-4412-90e8-1829be0554fb.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1963997d-11a8-4412-90e8-1829be0554fb.png)'
- en: How it works...
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `Authenticator` object is used by the network calls to obtain the authentication
    information. Developers generally extend the `java.net.Authenticator` class and
    override its `getPasswordAuthentication()` method. The username and password are
    read either from the user input or from the configuration and are used by the
    extended class to create an instance of `java.net.PasswordAuthentication`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`Authenticator`对象在网络调用中用于获取认证信息。开发者通常扩展`java.net.Authenticator`类并重写其`getPasswordAuthentication()`方法。用户名和密码要么从用户输入中读取，要么从配置中读取，并由扩展类用来创建`java.net.PasswordAuthentication`的实例。'
- en: 'In the recipe, we created an extension of `java.net.Authenticator`, as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在菜谱中，我们创建了一个`java.net.Authenticator`的扩展，如下所示：
- en: '[PRE21]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The instance of `UsernamePasswordAuthenticator` is then provided to the `HttpClient.Builder`
    API. The HttpClient instance makes use of this authenticator to get the username
    and password while invoking the protected HTTP request.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将`UsernamePasswordAuthenticator`的实例提供给`HttpClient.Builder` API。HttpClient实例在调用受保护的HTTP请求时使用此认证器来获取用户名和密码。
- en: Making an asynchronous HTTP request
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进行异步HTTP请求
- en: In this recipe, we will look at how to make an asynchronous GET request. In
    an asynchronous request, we don't wait for the response; instead, we handle the
    response whenever it is received by the client. In jQuery, we will make an asynchronous
    request and provide a callback that takes care of processing the response, while
    in the case of Java, we get an instance of `java.util.concurrent.CompletableFuture`,
    and then we invoke the `thenApply` method to process the response. Let's see this
    in action.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将探讨如何进行异步GET请求。在异步请求中，我们不等待响应；相反，我们处理客户端接收到的响应。在jQuery中，我们将进行异步请求并提供一个回调来处理响应，而在Java的情况下，我们获取`java.util.concurrent.CompletableFuture`的实例，然后调用`thenApply`方法来处理响应。让我们看看实际操作。
- en: How to do it...
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Create an instance of `HttpClient` using its builder, `HttpClient.Builder`:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用其构建器`HttpClient.Builder`创建`HttpClient`的实例：
- en: '[PRE22]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Create an instance of `HttpRequest` using its `HttpRequest.Builder` builder,
    representing the URL and the corresponding HTTP method to be used:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用其`HttpRequest.Builder`构建器创建`HttpRequest`的实例，表示URL和要使用的相应HTTP方法：
- en: '[PRE23]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Use the `sendAsync` method to make an asynchronous HTTP request and keep a
    reference to the `CompletableFuture<HttpResponse<String>>` object thus obtained.
    We will use this to process the response:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`sendAsync`方法进行异步HTTP请求，并保留所获得的`CompletableFuture<HttpResponse<String>>`对象的引用。我们将使用它来处理响应：
- en: '[PRE24]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We provide `CompletionStage` so as to process the response once the previous
    stage completes. For this, we make use of the `thenAccept` method, which takes
    a lambda expression:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们提供`CompletionStage`以便在先前的阶段完成后处理响应。为此，我们使用`thenAccept`方法，该方法接受一个lambda表达式：
- en: '[PRE25]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Finally, we wait for the future to complete:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们等待future完成：
- en: '[PRE26]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The complete code for this recipe can be found at the location, `chp11/4_async_http_request`.
    We have provided the `run.bat` and `run.sh` scripts to compile and run the recipe:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的代码可以在位置`chp11/4_async_http_request`找到。我们提供了`run.bat`和`run.sh`脚本以编译和运行菜谱：
- en: '![](img/54c70aef-5967-4397-9599-3f076c2fb9b7.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/54c70aef-5967-4397-9599-3f076c2fb9b7.png)'
- en: Making an HTTP request using Apache HttpClient
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Apache HttpClient进行HTTP请求
- en: In this recipe, we will make use of the Apache HttpClient ([https://hc.apache.org/httpcomponents-client-4.5.x/index.html](https://hc.apache.org/httpcomponents-client-4.5.x/index.html))
    library to make a simple HTTP GET request. As we are using Java 9, we would want
    to make use of the module path and not the classpath. Hence, we need to modularize
    the Apache HttpClient library. One way to achieve this is to use the concept of
    automatic modules. Let's see how to set up the dependencies for the recipe in
    the *Getting ready* section.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将使用Apache HttpClient ([https://hc.apache.org/httpcomponents-client-4.5.x/index.html](https://hc.apache.org/httpcomponents-client-4.5.x/index.html))库来发送简单的HTTP
    GET请求。由于我们使用的是Java 9，我们希望使用模块路径而不是类路径。因此，我们需要模块化Apache HttpClient库。实现这一目标的一种方法是通过使用自动模块的概念。让我们看看如何在*准备就绪*部分设置菜谱的依赖关系。
- en: Getting ready
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'All the required JARs are already present in the location, `chp11\5_apache_http_demo\mods`:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的所有JAR文件都已经存在于`chp11\5_apache_http_demo\mods`位置：
- en: '![](img/ead9fd23-94ac-49d6-930d-cbcfcad0f677.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ead9fd23-94ac-49d6-930d-cbcfcad0f677.png)'
- en: 'Once these JARs are on the module path, we can declare a dependency on these
    JARs in `module-info.java`, which is present at the location, `chp11\5_apache_http_demo\src\http.client.demo`, as
    shown in the following code snippet:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 当这些JAR文件在模块路径上时，我们可以在`module-info.java`中声明对这些JAR文件的依赖，该文件位于`chp11\5_apache_http_demo\src\http.client.demo`位置，如下代码片段所示：
- en: '[PRE27]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: How to do it...
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Create a default instance of `org.http.client.HttpClient` using its `org.apache.http.impl.client.HttpClients` factory:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用其`org.apache.http.impl.client.HttpClients`工厂创建`org.http.client.HttpClient`的默认实例：
- en: '[PRE28]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Create an instance of `org.apache.http.client.methods.HttpGet` along with the
    required URL. This represents both the HTTP method type and the requested URL:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`org.apache.http.client.methods.HttpGet`实例以及所需的URL。这代表HTTP方法类型和请求的URL：
- en: '[PRE29]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Execute the HTTP request using the `HttpClient` instance to obtain an instance
    of `CloseableHttpResponse`:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`HttpClient`实例执行HTTP请求以获取`CloseableHttpResponse`实例：
- en: '[PRE30]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The `CloseableHttpResponse` instance returned after executing the HTTP request
    can be used to obtain details such as the response status code and other contents
    of the response embedded within the instance of an implementation of `HttpEntity`.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 执行HTTP请求后返回的`CloseableHttpResponse`实例可以用来获取响应状态码和其他嵌入在`HttpEntity`实例中的响应内容。
- en: 'We make use of `EntityUtils.toString()` to obtain the response body embedded
    within the instance of an implementation of `HttpEntity` and print both the status
    code and response body:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用`EntityUtils.toString()`从`HttpEntity`实现实例中获取嵌入的响应体，并打印状态码和响应体：
- en: '[PRE31]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The complete code for this recipe can be found at the location, `chp11\5_apache_http_demo`.
    We have provided `run.bat` and `run.sh` to compile and execute the recipe code:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱的完整代码可以在`chp11\5_apache_http_demo`位置找到。我们提供了`run.bat`和`run.sh`来编译和执行菜谱代码：
- en: '![](img/178edff0-5480-4b9f-9825-a4ed4d9e62e7.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/178edff0-5480-4b9f-9825-a4ed4d9e62e7.png)'
- en: There is more...
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'We can provide a custom response handler while invoking the `HttpClient.execute`
    method, as follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用`HttpClient.execute`方法时，我们可以提供一个自定义的响应处理器，如下所示：
- en: '[PRE32]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: In this case, the response is processed by the response handler and returns
    us the response body string. The complete code for this can be found at the location, `chp11\5_1_apache_http_demo_response_handler`.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，响应由响应处理器处理，并返回给我们响应体字符串。完整的代码可以在`chp11\5_1_apache_http_demo_response_handler`位置找到。
- en: Making an HTTP request using the Unirest HTTP client library
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Unirest HTTP客户端库发送HTTP请求
- en: In this recipe, we will make use of the Unirest HTTP ([http://unirest.io/java.html](http://unirest.io/java.html)) Java
    library to access HTTP services. Unirest Java is a library based on Apache's HTTP client
    library and provides a fluent API for making HTTP requests.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将使用Unirest HTTP ([http://unirest.io/java.html](http://unirest.io/java.html))
    Java库来访问HTTP服务。Unirest Java是基于Apache的HTTP客户端库的库，并提供了一个用于发送HTTP请求的流畅API。
- en: Getting ready
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: As the Java library is not modular, we will make use of the concept of automatic
    modules as explained in [Chapter 3](488da544-ff73-4ef7-9d57-00b67479defd.xhtml),
    *Modular Programming*. The JARs belonging to the library are placed on the module
    path of the application, and the application then declares a dependency on the
    JARs by using the name of the JAR as its module name. This way, a JAR file automatically
    becomes a module and is hence called an automatic module.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Java 库不是模块化的，我们将利用第 3 章[模块化编程](488da544-ff73-4ef7-9d57-00b67479defd.xhtml)中解释的自动模块的概念。库所属的
    JAR 文件被放置在应用程序的模块路径上，然后应用程序通过使用 JAR 文件名作为其模块名来声明对 JAR 文件的依赖。这样，JAR 文件就自动成为了一个模块，因此被称为自动模块。
- en: 'The Maven dependency for the Java library is:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: Java 库的 Maven 依赖项如下：
- en: '[PRE33]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: As we are not using Maven in our samples, we have downloaded the JARs into the
    folder, `chp11/6_unirest_http_demo/mods`.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在示例中没有使用 Maven，我们已经将 JAR 文件下载到了文件夹中，`chp11/6_unirest_http_demo/mods`。
- en: 'The module definition is as follows:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 模块定义如下：
- en: '[PRE34]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: How to do it...
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Unirest provides a very fluid API for making HTTP requests. We can make a `GET`
    request as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: Unirest 提供了一个非常流畅的 API 来进行 HTTP 请求。我们可以发送一个 `GET` 请求，如下所示：
- en: '[PRE35]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The response status and response body can be obtained from the `jsonResponse`
    object, as follows:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 可以从 `jsonResponse` 对象中获取响应状态和响应体，如下所示：
- en: '[PRE36]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'We can make a `POST` request and pass some data, as follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以发送一个 `POST` 请求并传递一些数据，如下所示：
- en: '[PRE37]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'We can make a call to a protected HTTP resource, as follows:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以调用受保护的 HTTP 资源，如下所示：
- en: '[PRE38]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The code for this can be found at the location, `chp11\6_unirest_http_demo`.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 代码可以在以下位置找到，`chp11\6_unirest_http_demo`。
- en: We have provided the `run.bat` and `run.sh` scripts to execute the code.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提供了 `run.bat` 和 `run.sh` 脚本来执行代码。
- en: There's more...
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The Unirest Java library provides much more advanced functionality, such as
    making async requests, file uploads, and using proxy, among other features. It's
    advisable that you try out these different features of the library.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: Unirest Java 库提供了许多更高级的功能，例如异步请求、文件上传和使用代理等。建议您尝试这些库的不同功能。
