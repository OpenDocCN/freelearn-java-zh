- en: Networking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Making an HTTP GET request
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making an HTTP POST request
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making an HTTP request for a protected resource
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making an asynchronous HTTP request
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making an HTTP request using Apache HttpClient
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making an HTTP request using the Unirest HTTP client library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Java's support for interacting with HTTP-specific features has been very primitive.
    The `HttpURLConnection` class, available since JDK 1.1, provides APIs for interacting
    with URLs with HTTP-specific features. Since this API has been there even before
    HTTP/1.1, it lacked advanced features and was a pain to use. This is why developers
    mostly resorted to using third-party libraries, such as **Apache HttpClient**,
    Spring frameworks, HTTP APIs, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: In JDK 9, a new HTTP client API is being introduced under JEP 110 ([http://openjdk.java.net/jeps/110](http://openjdk.java.net/jeps/110)).
    Unfortunately, this API is being introduced as an incubator module ([http://openjdk.java.net/jeps/11](http://openjdk.java.net/jeps/11)).
    An incubator module contains non-final APIs, which are significantly larger and
    not mature completely to be included in Java SE. This is a form of beta release
    of the API so that the developers get to use the APIs much earlier. But the catch
    here is that there is no backward compatibility support for these APIs in the
    newer versions of JDK. This means that code that is dependent on the incubator
    modules might break with the newer versions of JDK. This might be due to the incubator
    module being promoted to Java SE or being silently dropped from the incubator
    modules.
  prefs: []
  type: TYPE_NORMAL
- en: In any case, it will be good to know about the HTTP client APIs, which might
    come into future JDK releases. In addition to this, it is good to know about the
    alternatives we have for now. So, in this chapter, we will cover a few recipes
    showing how to use the HTTP client APIs in the JDK 9 incubator modules, and then
    a few other APIs, which make use of the Apache HttpClient ([http://hc.apache.org/httpcomponents-client-ga/](http://hc.apache.org/httpcomponents-client-ga/))
    API and the Unirest Java HTTP library ([http://unirest.io/java.html](http://unirest.io/java.html)).
  prefs: []
  type: TYPE_NORMAL
- en: Making an HTTP GET request
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will look at using the JDK 9 HTTP Client API to make a `GET`
    request to the URL, [http://httpbin.org/get](http://httpbin.org/get).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create an instance of `jdk.incubator.http.HttpClient` using its builder, `jdk.incubator.http.HttpClient.Builder`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an instance of `jdk.incubator.http.HttpRequest` using its builder, `jdk.incubator.http.HttpRequest.Builder`.
    The requested URL should be provided as an instance of `java.net.URI`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Send the HTTP request using the `send` API of `jdk.incubator.http.HttpClient`.
    This API takes an instance of `jdk.incubator.http.HttpRequest` and an implementation
    of `jdk.incubator.http.HttpResponse.BodyHandler`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Print the `jdk.incubator.http.HttpResponse` status code and the response body:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The complete code for this can be found at the location `chp11/1_making_http_get`.
    You can make use of the run scripts, `run.bat` or `run.sh`, to compile and run
    the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c91cf236-8baf-4f9d-8dbd-904553558ef6.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two main steps in making an HTTP call to a URL:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating an HTTP client to initiate the call.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting up the destination URL, required HTTP headers, and the HTTP method type,
    that is, `GET`, `POST`, or `PUT`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The Java HTTP Client API provides a builder class, `jdk.incubator.http.HttpClient.Builder`,
    which can be used to build an instance of `jdk.incubator.http.HttpClient` at the
    same time, making use of the builder APIs to set up `jdk.incubator.http.HttpClient`.
    The following code snippet shows how to get an instance of `jdk.incubator.http.HttpClient`
    with the default configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code snippet uses the builder to configure and then create an
    instance of `jdk.incubator.http.HttpClient`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: There are more APIs in the builder, such as setting authentication, proxy, and
    providing SSL context, which we will look at in different recipes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Setting up the destination URL is nothing but creating an instance of `jdk.incbator.http.HttpRequest`
    using its builder and its APIs to configure the same. The following code snippet
    shows how to create an instance of `jdk.incbator.http.HttpRequest`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The `jdk.incubator.http.HttpClient` object provides two APIs to make an HTTP
    call:'
  prefs: []
  type: TYPE_NORMAL
- en: Send synchronously using the `HttpClient#send()` method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Send asynchronously using the `HttpClient#sendAsync()` method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `send()` method takes in two parameters: the HTTP request and the handler
    for the HTTP response. The handler for the response is represented by the implementation
    of the `jdk.incubator.http.HttpResponse.BodyHandler` interface. There are a few
    implementations available, such as `asString()`, which reads the response body
    as `String`, `asByteArray()`, which reads the response body as a byte array, and
    so on. We will use the `asString()` method, which returns the response `Body`
    as a string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The instance of  `jdk.incubator.http.HttpResponse` represents the response
    from the HTTP server. It provides APIs for the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting the response body (`body()`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTP headers (`headers()`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The initial HTTP request (`request()`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The response status code (`statusCode()`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The URL used for the request (`uri()`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `HttpResponse.BodyHandler` implementation passed to the `send()` method
    helps in converting the HTTP response into a compatible format, such as `String`,
    a `byte` array, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Making an HTTP POST request
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will look at posting some data to an HTTP service via the
    request body. We will post the data to a URL: `http://httpbin.org/post`.
  prefs: []
  type: TYPE_NORMAL
- en: We will skip the package prefix for the classes, as it is assumed to be `jdk.incubator.http`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create an instance of `HttpClient` using its `HttpClient.Builder` builder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the required data to be passed into the request body:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `HttpRequest` object with the request method as POST and by providing
    the request body data as `String`. We make use of Jackson''s `ObjectMapper` to
    convert the request body, `Map<String, String>`, into a plain JSON `String` and
    then make use of `HttpRequest.BodyProcessor` to process the `String` request body:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The request is sent and the response is obtained by using the `send(HttpRequest,
     HttpRequest.BodyHandler)` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We then print the response status code and the response body sent by the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The complete code for this can be found at `chp11/2_making_http_post`. Make
    sure that there are the following Jackson JARs in the location, `chp11/2_making_http_post/mods`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`jackson.databind.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jackson.core.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jackson.annotations.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also, take note of the module definition, `module-info.java`, available at the
    location, `chp11/2_making_http_post/src/http.client.demo`.
  prefs: []
  type: TYPE_NORMAL
- en: To understand how Jackson JARs are used in this modular code, please refer to
    the recipes *Bottom-up migration* and *Top-down migration* in [Chapter 3](488da544-ff73-4ef7-9d57-00b67479defd.xhtml),
    *Modular Programming*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run scripts, `run.bat` and `run.sh`, are provided to facilitate the compilation
    and execution of the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4838990a-d81a-40b9-940f-12f2dad25792.png)'
  prefs: []
  type: TYPE_IMG
- en: Making an HTTP request for a protected resource
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will look at invoking an HTTP resource that has been protected
    by user credentials. The URL, [http://httpbin.org/basic-auth/user/passwd](http://httpbin.org/basic-auth/user/passwd),
    has been protected by HTTP basic authentication. Basic authentication requires
    a username and a password to be provided in plain text, which is then used by
    the HTTP resources to decide whether the user authentication is successful or
    not.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you open the link, [http://httpbin.org/basic-auth/user/passwd](http://httpbin.org/basic-auth/user/passwd),
    in the browser, it will prompt for the username and password, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/26b9a1a7-c65a-4ae3-9c8d-f0003553f30a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Use the username as `user` and password as `passwd`, and you will be authenticated
    to be shown a JSON response, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Let's achieve the same using the `HttpClient` API.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need to extend `java.net.Authenticator` and override its `getPasswordAuthentication()`
    method. This method should return an instance of `java.net.PasswordAuthentication`.
    Let''s create a class, `UsernamePasswordAuthenticator`, which extends `java.net.Authenticator`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We will create two instance variables in the `UsernamePasswordAuthenticator`
    class  to store the username and password, and we''ll provide a constructor to
    initialize the same:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We then override the `getPasswordAuthentication()` method to return an instance
    of `java.net.PasswordAuthentication`, initialized with the username and password:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We then create an instance of `UsernamePasswordAuthenticator`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We provide the instance of `UsernamePasswordAuthenticator` while initializing
    the `HttpClient`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'A corresponding `HttpRequest` object is created to call the protected HTTP
    resource, [http://httpbin.org/basic-auth/user/passwd](http://httpbin.org/basic-auth/user/passwd):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We obtain `HttpResponse` by executing the request and print the status code
    and the request body:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The complete code for this is available at the location, `chp11/3_making_http_request_protected_res`.
    You can run the code by using the run scripts, `run.bat` or `run.sh`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1963997d-11a8-4412-90e8-1829be0554fb.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Authenticator` object is used by the network calls to obtain the authentication
    information. Developers generally extend the `java.net.Authenticator` class and
    override its `getPasswordAuthentication()` method. The username and password are
    read either from the user input or from the configuration and are used by the
    extended class to create an instance of `java.net.PasswordAuthentication`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the recipe, we created an extension of `java.net.Authenticator`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The instance of `UsernamePasswordAuthenticator` is then provided to the `HttpClient.Builder`
    API. The HttpClient instance makes use of this authenticator to get the username
    and password while invoking the protected HTTP request.
  prefs: []
  type: TYPE_NORMAL
- en: Making an asynchronous HTTP request
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will look at how to make an asynchronous GET request. In
    an asynchronous request, we don't wait for the response; instead, we handle the
    response whenever it is received by the client. In jQuery, we will make an asynchronous
    request and provide a callback that takes care of processing the response, while
    in the case of Java, we get an instance of `java.util.concurrent.CompletableFuture`,
    and then we invoke the `thenApply` method to process the response. Let's see this
    in action.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create an instance of `HttpClient` using its builder, `HttpClient.Builder`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an instance of `HttpRequest` using its `HttpRequest.Builder` builder,
    representing the URL and the corresponding HTTP method to be used:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `sendAsync` method to make an asynchronous HTTP request and keep a
    reference to the `CompletableFuture<HttpResponse<String>>` object thus obtained.
    We will use this to process the response:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'We provide `CompletionStage` so as to process the response once the previous
    stage completes. For this, we make use of the `thenAccept` method, which takes
    a lambda expression:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we wait for the future to complete:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The complete code for this recipe can be found at the location, `chp11/4_async_http_request`.
    We have provided the `run.bat` and `run.sh` scripts to compile and run the recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/54c70aef-5967-4397-9599-3f076c2fb9b7.png)'
  prefs: []
  type: TYPE_IMG
- en: Making an HTTP request using Apache HttpClient
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will make use of the Apache HttpClient ([https://hc.apache.org/httpcomponents-client-4.5.x/index.html](https://hc.apache.org/httpcomponents-client-4.5.x/index.html))
    library to make a simple HTTP GET request. As we are using Java 9, we would want
    to make use of the module path and not the classpath. Hence, we need to modularize
    the Apache HttpClient library. One way to achieve this is to use the concept of
    automatic modules. Let's see how to set up the dependencies for the recipe in
    the *Getting ready* section.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All the required JARs are already present in the location, `chp11\5_apache_http_demo\mods`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ead9fd23-94ac-49d6-930d-cbcfcad0f677.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once these JARs are on the module path, we can declare a dependency on these
    JARs in `module-info.java`, which is present at the location, `chp11\5_apache_http_demo\src\http.client.demo`, as
    shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a default instance of `org.http.client.HttpClient` using its `org.apache.http.impl.client.HttpClients` factory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an instance of `org.apache.http.client.methods.HttpGet` along with the
    required URL. This represents both the HTTP method type and the requested URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the HTTP request using the `HttpClient` instance to obtain an instance
    of `CloseableHttpResponse`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The `CloseableHttpResponse` instance returned after executing the HTTP request
    can be used to obtain details such as the response status code and other contents
    of the response embedded within the instance of an implementation of `HttpEntity`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We make use of `EntityUtils.toString()` to obtain the response body embedded
    within the instance of an implementation of `HttpEntity` and print both the status
    code and response body:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The complete code for this recipe can be found at the location, `chp11\5_apache_http_demo`.
    We have provided `run.bat` and `run.sh` to compile and execute the recipe code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/178edff0-5480-4b9f-9825-a4ed4d9e62e7.png)'
  prefs: []
  type: TYPE_IMG
- en: There is more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can provide a custom response handler while invoking the `HttpClient.execute`
    method, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: In this case, the response is processed by the response handler and returns
    us the response body string. The complete code for this can be found at the location, `chp11\5_1_apache_http_demo_response_handler`.
  prefs: []
  type: TYPE_NORMAL
- en: Making an HTTP request using the Unirest HTTP client library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will make use of the Unirest HTTP ([http://unirest.io/java.html](http://unirest.io/java.html)) Java
    library to access HTTP services. Unirest Java is a library based on Apache's HTTP client
    library and provides a fluent API for making HTTP requests.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the Java library is not modular, we will make use of the concept of automatic
    modules as explained in [Chapter 3](488da544-ff73-4ef7-9d57-00b67479defd.xhtml),
    *Modular Programming*. The JARs belonging to the library are placed on the module
    path of the application, and the application then declares a dependency on the
    JARs by using the name of the JAR as its module name. This way, a JAR file automatically
    becomes a module and is hence called an automatic module.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Maven dependency for the Java library is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: As we are not using Maven in our samples, we have downloaded the JARs into the
    folder, `chp11/6_unirest_http_demo/mods`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The module definition is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Unirest provides a very fluid API for making HTTP requests. We can make a `GET`
    request as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The response status and response body can be obtained from the `jsonResponse`
    object, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'We can make a `POST` request and pass some data, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'We can make a call to a protected HTTP resource, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The code for this can be found at the location, `chp11\6_unirest_http_demo`.
  prefs: []
  type: TYPE_NORMAL
- en: We have provided the `run.bat` and `run.sh` scripts to execute the code.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Unirest Java library provides much more advanced functionality, such as
    making async requests, file uploads, and using proxy, among other features. It's
    advisable that you try out these different features of the library.
  prefs: []
  type: TYPE_NORMAL
