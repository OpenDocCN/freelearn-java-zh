- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: LDAP Directory Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will review the (**LDAP**) and learn how it can be integrated
    into a Spring Security-enabled application to provide authentication, authorization,
    and user information.
  prefs: []
  type: TYPE_NORMAL
- en: 'During the course of this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Learning some of the basic concepts related to the LDAP protocol and server
    implementations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring a self-contained LDAP server within Spring Security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling LDAP authentication and authorization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the model behind LDAP search and user matching
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving additional user details from standard LDAP structures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Differentiating between LDAP authentication methods and evaluating the pros
    and cons of each type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explicitly configuring Spring Security LDAP using Spring bean declarations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting to external LDAP directories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the built-in support for Microsoft AD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will also explore how to customize Spring Security for more flexibility when
    dealing with custom AD deployments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This chapter’s code in action link is here: [https://packt.link/f2tf1](https://packt.link/f2tf1).'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding LDAP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: LDAP has its roots in logical directory models dating back over 30 years, conceptually
    akin to a combination of an organizational chart and an address book. Today, LDAP
    is used more and more to centralize corporate user information, partition thousands
    of users into logical groups, and allow unified sharing of user information between
    many disparate systems.
  prefs: []
  type: TYPE_NORMAL
- en: For security purposes, LDAP is quite commonly used to facilitate centralized
    username and password authentication—user credentials are stored in the LDAP directory,
    and authentication requests can be made against the directory on the user’s behalf.
    This eases management for administrators, as user credentials—login ID, password,
    and other details—are stored in a single location in the LDAP directory. Additionally,
    organizational information, such as group or team assignments, geographic location,
    and corporate hierarchy membership, are defined based on the user’s location in
    the directory.
  prefs: []
  type: TYPE_NORMAL
- en: LDAP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At this point, if you have never used LDAP before, you may be wondering what
    it is. We’ll illustrate a sample LDAP schema with a screenshot from the Apache
    Directory Server example directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1 – Example of LDAP directory structure](img/B21757_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.1 – Example of LDAP directory structure
  prefs: []
  type: TYPE_NORMAL
- en: Starting at a particular user entry for `uid=admin1@example.com` (highlighted
    in the preceding screenshot), we can infer the organizational membership of `admin1`
    by starting at this node in the tree and moving upward. We can see that the user
    `aeinstein` is a member of the `users` organizational unit (`ou=users`), which
    itself is a part of the `example.com` domain (the abbreviation `dc` shown in the
    preceding screenshot stands for **domain component**).
  prefs: []
  type: TYPE_NORMAL
- en: Preceding this are the organizational elements (`DIT` and `Root` `DSE`) of the
    LDAP tree itself, which don’t concern us in the context of Spring Security. The
    position of the user `aeinstein` in the LDAP hierarchy is semantically and definitively
    meaningful—you can imagine a much more complex hierarchy easily illustrating the
    organizational and departmental boundaries of a huge organization.
  prefs: []
  type: TYPE_NORMAL
- en: 'The complete top-to-bottom path formed by walking down the tree to an individual
    leaf node forms a string composed of all intervening nodes along the way, as with
    the node path of `admin1`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The preceding node path is unique and is known as a node’s **Distinguished Name**
    (**DN**). The DN is akin to a database primary key, allowing a node to be uniquely
    identified and located in a complex tree structure. We’ll see a node’s DN used
    extensively throughout the authentication and searching process with Spring Security
    LDAP integration.
  prefs: []
  type: TYPE_NORMAL
- en: Note that there are several other users listed at the same level of organization
    as `admin1`. All of these users are assumed to be within the same organizational
    position as `admin1`. Although this example organization is relatively simple
    and flat, the structure of LDAP is arbitrarily flexible, with many levels of nesting
    and logical organization possible.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Security LDAP support is assisted by the Spring LDAP module ([https://spring.io/projects/spring-ldap](https://spring.io/projects/spring-ldap)),
    which is a separate project from the core Spring Framework and Spring Security
    projects. It’s considered to be stable and provides a helpful set of wrappers
    around the standard Java LDAP functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Common LDAP attribute names
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Each entry in the tree is defined by one or more object classes. An object class
    is a logical unit of organization, grouping a set of semantically related attributes.
    By declaring an entry in the tree as an instance of a particular object class,
    such as a person, the organizer of the LDAP directory can provide users of the
    directory with a clear indication of what each element of the directory represents.
  prefs: []
  type: TYPE_NORMAL
- en: LDAP has a rich set of standard schemas covering the available LDAP object classes
    and their applicable attributes (along with gobs of other information). If you
    are planning on doing extensive work with LDAP, it’s highly advised that you review
    a good reference guide, such as the [*Appendix*](B21757_20.xhtml#_idTextAnchor642)
    of the book *Zytrax* *OpenLDAP* ([https://www.zytrax.com/books/ldap/ape/](https://www.zytrax.com/books/ldap/ape/)).
  prefs: []
  type: TYPE_NORMAL
- en: In the previous section, we were introduced to the fact that each entry in an
    LDAP tree has a DN, which uniquely identifies it in the tree. The DN is composed
    of a series of attributes, one (or more) of which is used to uniquely identify
    the path down the tree of the entry represented by the DN. As each segment of
    the path described by the DN represents an LDAP attribute, you could refer to
    the available, well-defined LDAP schemas and object classes to determine what
    each of the attributes in any given DN means.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ve included some of the common attributes and their meanings in the following
    table. These attributes tend to be organizing attributes—meaning that they are
    typically used to define the organizational structure of the LDAP tree—and are
    ordered from top to bottom in the structure that you’re likely to see in a typical
    LDAP installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Attribute name** | **Description** | **Example** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `dc` | Domain component: Generally, the highest level of organization in
    an LDAP hierarchy. | `dc=jbcpcalendar,dc=com` |'
  prefs: []
  type: TYPE_TB
- en: '| `c` | Country: Some LDAP hierarchies are structured at a high level by country.
    | `c=US` |'
  prefs: []
  type: TYPE_TB
- en: '| `o` | Organization name: This is a parent business organization used for
    classifying LDAP resources. | `o=Oracle Corporation` |'
  prefs: []
  type: TYPE_TB
- en: '| `ou` | Organizational unit: This is a divisional business organization that
    is generally within an organization. | `ou=Product Development` |'
  prefs: []
  type: TYPE_TB
- en: '| `cn` | Common name: This is a common name or a unique or human-readable name
    for the object. For humans, this is usually the person’s full name, while for
    other resources in LDAP (computers, and so on), it’s typically the hostname. |
    `cn=Super Visor` `cn=Jim Bob` |'
  prefs: []
  type: TYPE_TB
- en: '| `uid` | User ID: Although not organizational in nature, the `uid` attribute
    is generally what Spring looks for during user authentication and search. | `uid=svisor`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `userPassword` | User password: This attribute stores the password for the
    person object to which this attribute is associated. It is typically one-way hashed
    using SHA or something similar. | `userPassword=plaintext userPassword={SHA}cryptval`
    |'
  prefs: []
  type: TYPE_TB
- en: Table 6.1 – Example of LDAP directory structure
  prefs: []
  type: TYPE_NORMAL
- en: The attributes in the preceding table do, however, tend to be organizing attributes
    on the directory tree and, as such, will probably form various search expressions
    or mappings that you will use to configure Spring Security to interact with the
    LDAP server.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Remember that there are hundreds of standard LDAP attributes—these represent
    a very small fraction of those you are likely to see when integrating with a fully
    populated LDAP server.
  prefs: []
  type: TYPE_NORMAL
- en: Updating our dependencies
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We have already included all of the dependencies you need for this chapter,
    so you will not need to make any updates to your `build.gradle` file. However,
    if you were just adding LDAP support to your own application, you would need to
    add `spring-security-ldap` as a dependency in `build.gradle`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Remember that there are hundreds of standard LDAP attributes—these represent
    a very small fraction of those you are likely to see when integrating with a fully
    populated LDAP server.
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned previously, Spring Security’s LDAP support is built on top of Spring
    LDAP. Gradle will automatically bring this dependency in as a transitive dependency,
    so there is no need to explicitly list it.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring embedded LDAP integration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let’s now enable the JBCP calendar application to support LDAP-based authentication.
    Fortunately, this is a relatively simple exercise, using the embedded LDAP server
    and a sample `UnboundID` server. This is done by adding an `unboundid-ldapsdk`
    dependency in `build.gradle`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Configuring an LDAP server reference
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first step is to configure the embedded LDAP server. Spring Boot will automatically
    configure an embedded LDAP server, but we will need to tweak the configuration
    a bit. Make the following updates to your `application.yml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: You should be starting with the source from `chapter06.00-calendar`.
  prefs: []
  type: TYPE_NORMAL
- en: We are loading the `calendar.ldif` file from `classpath` and using it to populate
    the LDAP server. The `root` attribute declares the root of the LDAP directory
    using the specified DN. This should correspond to the logical root DN in the LDIF
    file we’re using.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Be aware that for embedded LDAP servers, the `base-dn` attribute is required.
    If it is not specified or is specified incorrectly, you may receive several odd
    errors upon initialization. Also, be aware that the `ldif` resource should only
    load a single `ldif`, otherwise the server will fail to start up. Spring Security
    requires a single resource, since using something such as `classpath*:calendar.ldif`
    does not provide the deterministic ordering that is required.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll reuse the bean ID defined here later, in the Spring Security configuration
    files, when we declare the LDAP user service and other configuration elements.
    All other attributes on the `<ldap-server>` declaration are optional when using
    the embedded LDAP mode.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling the LDAP AuthenticationManager interface
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Next, we’ll need to configure another `AuthenticationManager` interface that
    checks user credentials against the LDAP provider. Simply update the Spring Security
    configuration to use an `o.s.s.ldap.authentication.` `AuthenticationManager` reference,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Configuring the LdapAuthoritiesPopulator interface
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Spring Security’s `LdapAuthoritiesPopulator` is used to determine what authorities
    are returned for the user. The following example shows how to configure `LdapAuthoritiesPopulator`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In addition, we have deleted all the references to `PasswordEncoder` Bean and
    the class `CalendarUserDetailsService`.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll discuss these attributes a bit more later. For now, get the application
    back up and running, and try logging in with `admin1@example.com` as the username
    and `admin1` as the password. You should be logged in!
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: You should be starting with the source from `chapter06.01-calendar`.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting embedded LDAP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is quite possible that you will run into hard-to-debug problems with embedded
    LDAP. If you are getting a `404` error when trying to access the application in
    your browser, there is a good chance that things did not start up properly. Some
    things to double-check if you can’t get this simple example running are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Ensure the `baseDn` attribute is set in your configuration file, and make sure
    it matches the root defined in the LDIF file that’s loaded at startup. If you
    get errors referencing missing partitions, it’s likely that either the root attribute
    was missed or doesn’t match your LDIF file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Be aware that a failure starting up the embedded LDAP server is not a fatal
    failure. In order to diagnose errors loading LDIF files, you will need to ensure
    that the appropriate log settings, including logging for the LDAP server, are
    enabled, at least at the error level.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the application server shuts down non-gracefully, you may be required to
    delete some files in your temporary directory (`%TEMP%` on Windows systems or
    `/tmp` on Linux-based systems) in order to start the server again. The error messages
    regarding this are (fortunately) fairly clear. Unfortunately, embedded LDAP isn’t
    as seamless and easy to use as the embedded H2 database, but it is still quite
    a bit easier than trying to download and configure many of the freely available
    external LDAP servers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An excellent tool for troubleshooting or accessing LDAP servers in general is
    the Apache Directory Studio project, which offers standalone and Eclipse plugin
    versions. The free download is available at [http://jxplorer.org/](http://jxplorer.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Understanding how Spring LDAP authentication works
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We saw that we were able to log in using a user-defined in the LDAP directory.
    But what exactly happens when a user issues a login request for a user in LDAP?
    There are the following three basic steps to the LDAP authentication process:'
  prefs: []
  type: TYPE_NORMAL
- en: Authenticate the credentials supplied by the user against the LDAP directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Determine the `GrantedAuthority` object that the user has, based on their information
    in LDAP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pre-load information from the LDAP entry for the user into a custom `UserDetails`
    object for further use by the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Authenticating user credentials
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For the first step, authentication against the LDAP directory, a custom authentication
    provider is wired into `AuthenticationManager`. The `o.s.s.ldap.authentication.LdapAuthenticationProvider`
    interface takes the user’s provided credentials and verifies them against the
    LDAP directory, as illustrated in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2 – Spring Security LDAP authentication workflow](img/B21757_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.2 – Spring Security LDAP authentication workflow
  prefs: []
  type: TYPE_NORMAL
- en: We can see that the `o.s.s.ldap.authentication.LdapAuthenticator` interface
    defines a delegate to allow the provider to make the authentication request in
    a customizable way. The implementation that we’ve implicitly configured to this
    point, `o.s.s.ldap.authentication.BindAuthenticator`, attempts to use the user’s
    credentials to bind (log in) to the LDAP server as if it were the user themselves
    making a connection. For an embedded server, this is sufficient for our authentication
    needs; however, external LDAP servers may be stricter, and in these, users may
    not be allowed to bind to the LDAP directory. Fortunately, an alternative method
    of authentication exists, which we will explore later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: As noted in the preceding diagram, keep in mind that the search is performed
    under an LDAP context created by the credentials specified in the `DefaultSpringSecurityContextSource`
    reference’s `baseDn` attribute. With an embedded server, we don’t use this information,
    but with an external server reference, unless `baseDn` is supplied, anonymous
    binding is used. Retaining some control over the public availability of information
    in the directory is very common for organizations that require valid credentials
    to search an LDAP directory, and as such, `baseDn` will be almost always required
    in real-world scenarios. The `baseDn` attribute represents the full DN of a user
    with valid access to bind the directory and perform searches.
  prefs: []
  type: TYPE_NORMAL
- en: Demonstrating authentication with JXplorer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to demonstrate how the authentication process works by using `JXplorer`
    to connect to our embedded LDAP instance and perform the same steps that Spring
    Security is performing. We will use `user1@example.com` throughout the simulation.
    These steps will help to ensure a firm grasp of what is happening behind the scenes
    and will help if you are having difficulty figuring out the correct configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that the calendar application is started up and working. Next, start
    `Jxplorer`.
  prefs: []
  type: TYPE_NORMAL
- en: Binding anonymously to LDAP
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first step is to bind anonymously to LDAP. The bind is done anonymously
    because we did not specify the `baseDn` and `password` attributes on our `DefaultSpringSecurityContextSource`
    object. Within `Jxplorer`, create a connection using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on **File** | **Connect**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Hostname: `localhost`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Port: `33389`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: We did not specify `baseDn`, so select **No Authentication** as the **Authentication
    Method**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can safely ignore the message indicating no default schema information is
    present.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.3 – Binding anonymously to LDAP](img/B21757_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.3 – Binding anonymously to LDAP
  prefs: []
  type: TYPE_NORMAL
- en: You should now see that you are connected to the embedded LDAP instance.
  prefs: []
  type: TYPE_NORMAL
- en: Searching for the user
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that we have a connection, we can use it to look up the user’s DN that
    we wish to bind to, by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on **World** and select **Search**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a search base of `dc=jbcpcalendar,dc=com`. This corresponds to the `baseDn`
    attribute of our `spring.ldap.base` property that we specified.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a filter of `uid=user1@example.com`. This corresponds to the value we
    specified for the `userSearchFilter` method of `AuthenticationManagerBuilder`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Search**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.4 – Search for the user](img/B21757_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.4 – Search for the user
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Copy DN** of the single result returned by our search. You can now
    see that our LDAP user is displayed. Note that this DN matches the value we searched
    for. Remember this DN, as it will be used in our next step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.5 – Search for the user](img/B21757_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.5 – Search for the user
  prefs: []
  type: TYPE_NORMAL
- en: Binding as a user to LDAP
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that we have found the full DN of our user, we need to try to bind to LDAP
    as that user to validate the submitted password. These steps are the same as in
    the anonymous bind we already did, except that we will specify the credentials
    of the user that we are authenticating.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within `Jxplorer`, create a connection using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on **File** | **Connect**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Hostname: **localhost**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Port: **33389**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Set **Security Level** to **User +** **Password**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the DN from our search result as `uid=admin1@example.com,ou=Administrators,ou=Users,dc=jbcpcalendar,dc=com`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The password should be the password that was submitted at the time of login.
    In our case, we want to use **admin1** to successfully authenticate. If the wrong
    password was entered, we would fail to connect and Spring Security would report
    an error.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.6 – Binding as a user to LDAP](img/B21757_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.6 – Binding as a user to LDAP
  prefs: []
  type: TYPE_NORMAL
- en: Spring Security will determine that the username and password were correct for
    this user when it is able to successfully bind with the provided username and
    password (similar to how we were able to create a connection). Spring Security
    will then proceed with determining the user’s role membership.
  prefs: []
  type: TYPE_NORMAL
- en: Determining the user’s role membership
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After the user has been successfully authenticated against the LDAP server,
    authorization information must be determined next. Authorization is defined by
    a principal’s list of roles, and an LDAP-authenticated user’s role membership
    is determined as illustrated in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.7 – User role membership](img/B21757_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.7 – User role membership
  prefs: []
  type: TYPE_NORMAL
- en: We can see that after authenticating the user against LDAP, `LdapAuthenticationProvider`
    delegates to `LdapAuthoritiesPopulator`. The `DefaultLdapAuthoritiesPopulator`
    interface will attempt to locate the authenticated user’s DN in an attribute located
    at or below another entry in the LDAP hierarchy. The DN of the location searched
    for user role assignments is defined in the `groupSearchBase` method; in our sample,
    we set this to `groupSearchBase("ou=Groups")`. When the user’s DN is located within
    an LDAP entry below the DN of `groupSearchBase`, an attribute on the entry in
    which their DN is found is used to confer a role to them.
  prefs: []
  type: TYPE_NORMAL
- en: 'How Spring Security roles are associated with LDAP users can be a little confusing,
    so let’s look at the JBCP calendar LDAP repository and see how the association
    of a user with a role works. The `DefaultLdapAuthoritiesPopulator` interface uses
    several methods of the `AuthenticationManagerBuilder` declaration to govern searching
    for roles for the user. These attributes are used approximately in the following
    order:'
  prefs: []
  type: TYPE_NORMAL
- en: '`groupSearchBase`: This defines the base DN under which the LDAP integration
    should look for one or more matches for the user’s DN. The default value performs
    a search from the LDAP root, which may be expensive.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`groupSearchFilter`: This defines the LDAP search filter used to match the
    user’s DN to an attribute of an entry located under `groupSearchBase`. This search
    filter is parameterized with two parameters—the first `({0})` being the user’s
    DN, and the second `({1})` being the user’s username. The default value is `uniqueMember={0}`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`groupRoleAttribute`: This defines the attribute of the matching entries, which
    will be used to compose the user’s `GrantedAuthority` object. The default value
    is `cn`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`rolePrefix`: This is the prefix that will be prepended to the value found
    in `groupRoleAttribute`, to make a Spring Security `GrantedAuthority` object.
    The default value is `ROLE_`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This can be a little abstract and hard for new developers to follow because
    it’s very different from anything we’ve seen so far with our JDBC and JPA-based
    `UserDetailsService` implementations. Let’s continue walking through the login
    process with our `user1@example.com` user in the JBCP calendar LDAP directory.
  prefs: []
  type: TYPE_NORMAL
- en: Determining roles with Jxplorer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will now try to determine the roles for our user with `Jxplorer`. Using
    the connection, we created previously, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on **World** and select **Search**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a search base of `ou=Groups,dc=jbcpcalendar,dc=com`. This corresponds
    to the `baseDn` attribute of the `DefaultSpringSecurityContextSource` object we
    specified, plus the `groupSearchBase` attribute we specified for the `AuthenticationManagerBuilder`
    object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a text filter of `uniqueMember=uid=user1@example.com,ou=Users,dc=jbcpcalendar,dc=
    com`. This corresponds to the default `groupSearchFilter` attribute of `(uniqueMember={0})`.
    Notice that we have substituted the full DN of the user we found in our previous
    exercise for the `{``0}` value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Search**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.8 – Role search](img/B21757_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.8 – Role search
  prefs: []
  type: TYPE_NORMAL
- en: You will observe that the `Jxplorer`. Note that the group has a `uniqueMember`
    attribute with the full DN of our user and other users.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Spring Security now creates the `GrantedAuthority` object for each result by
    forcing the name of the group that was found into uppercase and prepending `ROLE_`
    to the group name. The pseudocode would look similar to the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Spring LDAP is as flexible as your gray matter. Keep in mind that, although
    this is one way to organize an LDAP directory to be compatible with Spring Security,
    typical usage scenarios are exactly the opposite—an LDAP directory already exists
    that Spring Security needs to be wired into. In many cases, you will be able to
    reconfigure Spring Security to deal with the hierarchy of the LDAP server; however,
    it’s key that you plan effectively and understand how Spring works with LDAP when
    it’s querying. Use your brain, map out the user search and group search, and come
    up with the most optimal plan you can think of—keep the scope of searches as minimal
    and as precise as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Can you describe how the results of the login process would differ for our `admin1@example.com`
    user? If you are confused at this point, we’d suggest that you take a breather
    and try using `Jxplorer` to work through browsing the embedded LDAP server, configured
    by the running of an application. It can be easier to grasp the flow of Spring
    Security’s LDAP configuration if you attempt to search the directory yourself
    by following the algorithm described previously.
  prefs: []
  type: TYPE_NORMAL
- en: Mapping additional attributes of UserDetails
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Finally, once the LDAP lookup has assigned the user a set of the `GrantedAuthority`
    objects, `o.s.s.ldap.userdetails.LdapUserDetailsMapper` will consult `o.s.s.ldap.userdetails.UserDetailsContextMapper`
    to retrieve any additional details to populate the `UserDetails` object for application
    use.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using `AuthenticationManagerBuilder`, we’ve configured up until this point
    that `LdapUserDetailsMapper` will be used to populate a `UserDetails` object with
    information gleaned from the user’s entry in the LDAP directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.9 – Mapping additional attributes of UserDetails](img/B21757_06_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.9 – Mapping additional attributes of UserDetails
  prefs: []
  type: TYPE_NORMAL
- en: We’ll see in a moment how `UserDetailsContextMapper` can be configured to pull
    a wealth of information from the standard LDAP `person` and `inetOrgPerson` objects.
    With the baseline `LdapUserDetailsMapper`, little more than `username`, `password`,
    and `GrantedAuthority` are stored.
  prefs: []
  type: TYPE_NORMAL
- en: Although there is more machinery involved behind the scenes in LDAP user authentication
    and detail retrieval, you’ll notice that the overall process seems somewhat similar
    to the JDBC authentication that we studied in [*Chapter 4*](B21757_04.xhtml#_idTextAnchor106),
    *JDBC-based Authentication* (authenticating the user and populating `GrantedAuthority`).
    As with JDBC authentication, there is the ability to perform advanced configuration
    of LDAP integration. Let’s dive deeper and see what’s possible!
  prefs: []
  type: TYPE_NORMAL
- en: Advanced LDAP configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once we get beyond the basics of LDAP integration, there’s a plethora of additional
    configuration capabilities in the Spring Security LDAP module that are still within
    the security `SecurityFilterChain` bean. These include retrieval of user personal
    information, additional options for user authentication, and the use of LDAP as
    the `UserDetailsService` interface in conjunction with a standard `DaoAuthenticationProvider`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Sample JBCP LDAP users
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We’ve supplied a number of different users in the JBCP calendar LDIF file.
    The following quick reference chart may help you with the advanced configuration
    exercises, or with self-exploration:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Username/password** | **Role(s)** | **Password encoding** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `admin1@example.com/admin1` | `ROLE_ADMIN, ROLE_USER` | `Plaintext` |'
  prefs: []
  type: TYPE_TB
- en: '| `user1@example.com/user1` | `ROLE_USER` | `Plaintext` |'
  prefs: []
  type: TYPE_TB
- en: '| `shauser@example.com/shauser` | `ROLE_USER` | `{``sha}` |'
  prefs: []
  type: TYPE_TB
- en: '| `sshauser@example.com/sshauser` | `ROLE_USER` | `{``ssha}` |'
  prefs: []
  type: TYPE_TB
- en: '| `hasphone@example.com/hasphone` | `ROLE_USER` | `Plaintext (in the` `telephoneNumber
    attribute)` |'
  prefs: []
  type: TYPE_TB
- en: Table 6.2 – List of LDAP users
  prefs: []
  type: TYPE_NORMAL
- en: We’ll explain why password encoding matters in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Password comparison versus bind authentication
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some LDAP servers will be configured so that certain individual users are not
    allowed to bind directly to the server, or so that anonymous binding (what we
    have been using for user search up until this point) is disabled. This tends to
    occur in very large organizations that want a restricted set of users to be able
    to read information from the directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'In these cases, the standard Spring Security LDAP authentication strategy will
    not work, and an alternative strategy must be used, implemented by `o.s.s.ldap.authentication.PasswordComparisonAuthenticator`
    (a sibling class of `BindAuthenticator`):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.10 – Password comparison versus bind authentication](img/B21757_06_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.10 – Password comparison versus bind authentication
  prefs: []
  type: TYPE_NORMAL
- en: The `PasswordComparisonAuthenticator` interface binds to LDAP and searches for
    the DN matching the username provided by the user. It then compares the user-supplied
    password with the `userPassword` attribute stored on the matching LDAP entry.
    If the encoded password matches, the user is authenticated and the flow proceeds,
    as with `BindAuthenticator`.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring basic password comparison
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Configuring password comparison authentication instead of bind authentication
    is as simple as adding a method to the `AuthenticationManager` declaration. Update
    the `SecurityConfig.java` file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `PasswordCompareConfigurer` class, that is used by declaring the `passwordCompare`
    method, uses `PlaintextPasswordEncoder` for password encoding. To use the `SHA-1`
    password algorithm, we need to set a password encoder, and we can use `o.s.s.a.encoding.LdapShaPasswordEncoder`
    for `SHA` support (recall that we discussed the `SHA-1` password algorithm extensively
    in [*Chapter 4*](B21757_04.xhtml#_idTextAnchor106), *JDBC-based Authentication*).
  prefs: []
  type: TYPE_NORMAL
- en: In our `calendar.ldif` file, we have the `password` field set to `userPassword`.
    The default `password` attribute for the `PasswordCompareConfigurer` class is
    `password`. So, we also need to override the `password` attribute with the `passwordAttribute`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: After restarting the server, you can attempt to log in using `shauser@example.com`
    as the `username` and `shauser` as `password`.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: You should start with the source from `chapter06.02-calendar`.
  prefs: []
  type: TYPE_NORMAL
- en: LDAP password encoding and storage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'LDAP has general support for a variety of password encoding algorithms, ranging
    from plaintext to one-way hash algorithms—similar to those we explored in the
    previous chapter—with database-backed authentication. The most common storage
    formats for LDAP passwords are `SHA` (`SHA-1` one-way hashed) and `SSHA` (`SHA-1`
    one-way hashed with a salt value). Other password formats often supported by many
    LDAP implementations are thoroughly documented in *RFC 2307*, *An Approach to
    Using LDAP as a Network Information Service* ([http://tools.ietf.org/html/rfc2307](http://tools.ietf.org/html/rfc2307)).
    The designers of *RFC 2307* did a very clever thing with regard to password storage.
    Passwords retained in the directory are, of course, encoded with whatever algorithm
    is appropriate (`SHA` and so on), but then, they are prefixed with the algorithm
    used to encode the password. This makes it very easy for the LDAP server to support
    multiple algorithms for password encoding. For example, an `SHA` encoded password
    is stored in the directory as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We can see that the password storage algorithm is very clearly indicated with
    the `{SHA}` notation and stored along with the password.
  prefs: []
  type: TYPE_NORMAL
- en: The `SSHA` notation is an attempt to combine the strong `SHA-1` hash algorithm
    with password salting to prevent dictionary attacks. As with password salting,
    which we reviewed in the previous chapter, the salt is added to the password prior
    to calculating the hash. When the hashed password is stored in the directory,
    the salt value is appended to the hashed password. The password is prepended with
    `{SSHA}` so that the LDAP directory knows that the user-supplied password needs
    to be compared differently. Most modern LDAP servers utilize `SSHA` as their default
    password storage algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: The drawbacks of a password comparison authenticator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that you know a bit about how LDAP uses passwords, and we have `PasswordComparisonAuthenticator`
    set up, what do you think will happen if you log in using our `sshauser@example.com`
    user with their password, stored in `SSHA` format?
  prefs: []
  type: TYPE_NORMAL
- en: Go ahead, put the book aside and try it, and then come back. Your login was
    denied, right? And yet you were still able to log in as the user with the SHA-encoded
    password. Why? The password encoding and storage didn’t matter when we were using
    bind authentication. Why do you think that is?
  prefs: []
  type: TYPE_NORMAL
- en: The reason it didn’t matter with bind authentication was that the LDAP server
    was taking care of the authentication and validation of the user’s password. With
    password compare authentication, Spring Security LDAP is responsible for encoding
    the password in the format expected by the directory and then matching it against
    the directory to validate the authentication.
  prefs: []
  type: TYPE_NORMAL
- en: For security purposes, password comparison authentication can’t actually read
    the password from the directory (reading directory passwords is often denied by
    the security policy). Instead, `PasswordComparisonAuthenticator` performs an LDAP
    search, rooted at the user’s directory entry, attempting to match with a `password`
    attribute and value as determined by the password that’s been encoded by Spring
    Security.
  prefs: []
  type: TYPE_NORMAL
- en: So, when we try to log in with `sshauser@example.com`, `PasswordComparisonAuthenticator`
    encodes the password using the configured `SHA` algorithm and attempts to do a
    simple match, which fails, as the directory password for this user is stored in
    the `SSHA` format.
  prefs: []
  type: TYPE_NORMAL
- en: Our current configuration, using `LdapShaPasswordEncoder`, already supports
    `SHA` and `SSHA`, so currently, it still doesn’t work. Let’s think why that might
    be. Remember that `SSHA` uses a salted password, with the salt value stored in
    the LDAP directory along with the password. However, `PasswordComparisonAuthenticator`
    is coded so that it cannot read anything from the LDAP server (this typically
    violates the security policy with companies that don’t allow binding). Thus, when
    `PasswordComparisonAuthenticator` computes the hashed password, it has no way
    to determine what salt value to use.
  prefs: []
  type: TYPE_NORMAL
- en: In conclusion, `PasswordComparisonAuthenticator` is valuable in certain limited
    circumstances where the security of the directory itself is a concern, but it
    will never be as flexible as straight bind authentication.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the UserDetailsContextMapper object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we noted earlier, an instance of the `o.s.s.ldap.userdetails.UserDetailsContextMapper`
    interface is used to map a user’s entry into the LDAP server to a `UserDetails`
    object in memory. The default `UserDetailsContextMapper` object behaves similarly
    to `JpaDaoImpl`, given the level of detail that is populated on the returned `UserDetails`
    object—that is to say, not a lot of information is returned besides the username
    and password.
  prefs: []
  type: TYPE_NORMAL
- en: However, an LDAP directory potentially contains many more details about individual
    users than usernames, passwords, and roles. Spring Security ships with two additional
    methods of pulling more user data from two of the standard LDAP object schemas—`person`
    and `inetOrgPerson`.
  prefs: []
  type: TYPE_NORMAL
- en: Implicit configuration of UserDetailsContextMapper
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to configure a different `UserDetailsContextMapper` implementation
    than the default, we simply need to declare which `LdapUserDetails` class we want
    `LdapAuthenticationProvider` to return. The security namespace parser will be
    smart enough to instantiate the correct `UserDetailsContextMapper` implementation
    based on the type of the `LdapUserDetails` interface requested.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s reconfigure our `SecurityConfig.java` file to use the `inetOrgPerson`
    version of the mapper. Update the `SecurityConfig.java` file, as illustrated in
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: If we remove the `passwordEncoder` method, then the LDAP users that are using
    `SHA` passwords will fail to authenticate.
  prefs: []
  type: TYPE_NORMAL
- en: If you were to restart the application and attempt to log in as an LDAP user,
    you would see that nothing changed. In fact, `UserDetailsContextMapper` has changed
    behind the scenes to read the additional details in the case where attributes
    from the `inetOrgPerson` schema are available in the user’s directory entry.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing additional user details
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To assist you in this area, we’ll add the ability to view the current account
    to the JBCP calendar application. We’ll use this page to illustrate how the richer
    person and the `inetOrgPerson` LDAP schemas can provide additional (optional)
    information to your LDAP-enabled application.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may have noticed that this chapter came with an additional controller named
    `AccountController`. You can see the relevant code, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will retrieve the `UserDetails` object (principal) stored
    in the `Authentication` object by `LdapAuthenticationProvider` and determine what
    type of `LdapUserDetailsImplinterface` it is. The page code itself will then display
    various details depending on the type of `UserDetails` object that has been bound
    to the user’s authentication information, as we see in the following JSP code.
    We have already included JSP as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The only work that actually needs to be done is to add a link in our `header.xhtml`
    file, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We’ve added the following two more users that you can use to examine the differences
    in the available data elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Username** | **Password** | **Type** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `shainet@example.com` | `shainet` | `inetOrgPerson` |'
  prefs: []
  type: TYPE_TB
- en: '| `shaperson@example.com` | `shaperson` | `person` |'
  prefs: []
  type: TYPE_TB
- en: Table 6.3 – List of newly added LDAP users
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Your code should look like `chapter06.03-calendar`.
  prefs: []
  type: TYPE_NORMAL
- en: Restart the server and examine the `Account Details` page for each of the types
    of users by clicking on `username` in the upper-right corner. You’ll note that
    when `UserDetails` class is configured to use `inetOrgPerson`, although `o.s.s.ldap.userdetails.InetOrgPerson`
    is what is returned, the fields may or may not be populated depending on the available
    attributes in the directory entry.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, `inetOrgPerson` has many more attributes that we’ve illustrated on
    this simple page. You can review the full list in *RFC 2798*, *Definition of the
    inetOrgPerson LDAP Object* *Class* ([http://tools.ietf.org/html/rfc2798](http://tools.ietf.org/html/rfc2798)).
  prefs: []
  type: TYPE_NORMAL
- en: One thing you may notice is that there is no facility to support additional
    attributes that may be specified on an object entry, but don’t fall into a standard
    schema. The standard `UserDetailsContextMapper` interfaces don’t support arbitrary
    lists of attributes, but it is possible nonetheless to customize it with a reference
    to your own `UserDetailsContextMapper` interface using the `userDetailsContextMapper`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: Using an alternate password attribute
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In some cases, it may be necessary to use an alternate LDAP attribute instead
    of `userPassword`, for authentication purposes. This can happen during occasions
    when companies have deployed custom LDAP schemas or don’t have the requirement
    for strong password management (arguably, this is never a good idea, but it definitely
    does occur in the real world).
  prefs: []
  type: TYPE_NORMAL
- en: 'The `PasswordComparisonAuthenticator` interface also supports the ability to
    verify the user’s password against an alternate LDAP entry attribute instead of
    the standard `userPassword` attribute. This is very easy to configure, and we
    can demonstrate a simple example using the plaintext `telephoneNumber` attribute.
    Update the `SecurityConfig.java` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: We can restart the server and attempt to log in with `hasphone@example.com`
    as the `username` attribute and `0123456789` as the `password` (telephone number)
    attribute.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Your code should look like `chapter06.04-calendar`.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, this type of authentication has all of the perils we discussed earlier
    regarding authentication based on `PasswordComparisonAuthenticator`; however,
    it’s good to be aware of it on the off-chance that it comes up with an LDAP implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Using LDAP as UserDetailsService
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One thing to note is that LDAP may also be used as `UserDetailsService`. As
    we will discuss later in the book, `UserDetailsService` is required to enable
    various other bits of functionality in the Spring Security infrastructure, including
    the remember-me and OpenID authentication features.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will modify our `AccountController` object to use the `LdapUserDetailsService`
    interface to obtain the user. Before doing this, make sure to remove the `passwordCompare`
    method, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Configuring LdapUserDetailsService
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The configuration of LDAP as a `UserDetailsService` function is very similar
    to the configuration of an LDAP `AuthenticationProvider`. Like the JDBC `UserDetailsService`,
    an LDAP `UserDetailsService` interface is configured as a sibling to the `<`http>
    declaration. Make the following updates to the `SecurityConfig.java` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Functionally, `o.s.s.ldap.userdetails.LdapUserDetailsService` is configured
    in almost exactly the same way as `LdapAuthenticationProvider`, with the exception
    that there is no attempt to use the principal’s username to bind to LDAP. Instead,
    the credentials are supplied by the `DefaultSpringSecurityContextSource` reference
    and are used to perform the user lookup.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Do not make the very common mistake of configuring `AuthenticationManagerBuilder`
    with the `UserDetailsService` referring to `LdapUserDetailsService` if you intend
    to authenticate the user against LDAP itself! As discussed previously, the `password`
    attribute often cannot be retrieved from LDAP due to security reasons, which makes
    `UserDetailsService` useless for authenticating. As noted previously, `LdapUserDetailsService`
    uses the `baseDn` attribute supplied with the `DefaultSpringSecurityContextSource`
    declaration to get its information—this means that it does not attempt to bind
    the user to LDAP and, as such, may not behave as you expect.
  prefs: []
  type: TYPE_NORMAL
- en: Updating AccountController to use LdapUserDetailsService
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will now update the `AccountController` object to use the `LdapDetailsUserDetailsService`
    interface to look up the user that it displays:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Obviously, this example is a bit silly, but it demonstrates the use of `LdapUserDetailsService`.
    Go ahead and restart the application and give this a try with the `username` as
    `admin1@example.com` and the `password` as `admin1`. Can you figure out how to
    modify the controller to display an arbitrary user’s information?
  prefs: []
  type: TYPE_NORMAL
- en: Can you figure out how you should modify the security settings to restrict access
    to an administrator?
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Your code should look like `chapter06.05-calendar`.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Spring Security with an external LDAP server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is likely that once you test basic integration with the embedded LDAP server,
    you will want to interact with an external LDAP server. Fortunately, this is very
    straightforward and can be done using a slightly different syntax along with the
    same
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the Spring Security configuration to connect to an external LDAP server
    on port `33389`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The notable differences here (aside from the LDAP URL) are that the DN and password
    for an account are provided. The account (which is actually optional) should be
    allowed to bind to the directory and perform searches across all relevant DNs
    for user and group information. The binding resulting from the application of
    these credentials against the LDAP server URL is used for the remaining LDAP operations
    across the LDAP-secured system.
  prefs: []
  type: TYPE_NORMAL
- en: Be aware that many LDAP servers also support `ldaps://` at the beginning of
    the LDAP server URL. LDAPS typically runs on TCP port `636`. Note that there are
    many commercial and non-commercial implementations of LDAP.
  prefs: []
  type: TYPE_NORMAL
- en: The exact configuration parameters that you will use for connectivity, user
    binding, and the population of `GrantedAuthoritys` will wholly depend on both
    the vendor and the structure of the directory. We will cover one very common LDAP
    implementation, Microsoft AD, in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you do not have an LDAP server handy and would like to give this a try,
    go ahead and add the following code to your `SecurityConfig.java` file, which
    starts up the embedded LDAP server we have been using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: If this isn’t convincing, start up your LDAP server import `calendar.ldif` into
    it. You can then connect to the external LDAP server. Go ahead and restart the
    application and give this a try with the `username` as `shauser@example.com` and
    the `password` as `shauser`.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Your code should look like `chapter06.06-calendar`.
  prefs: []
  type: TYPE_NORMAL
- en: Explicit LDAP bean configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we’ll lead you through the set of bean configurations required
    to explicitly configure both a connection to an external LDAP server and the `LdapAuthenticationProvider`
    interface required to support authentication against an external server. As with
    other explicit bean-based configurations, you really want to avoid doing this
    unless you find yourself in a situation where the capabilities of the security
    namespace style of configuration will not support your business or your technical
    requirements, in which case, read on!
  prefs: []
  type: TYPE_NORMAL
- en: Configuring an external LDAP server reference
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To implement this configuration, we’ll assume that we have a local LDAP server
    running on port `33389`, with the same configuration corresponding to the `DefaultSpringSecurityContextSource`
    interface example provided in the previous section. The required bean definition
    is provided in the `SecurityConfig.java` file. In fact, to keep things simple,
    we have provided the entire `SecurityConfig.java` file. Review the LDAP server
    reference in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Next, we’ll explore how we can perform a search to locate the user in the LDAP
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: Performing a search to locate the user in the LDAP directory
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you’ve read and understood the explanations throughout this chapter describing
    how Spring Security LDAP authentication works behind the scenes, this bean configuration
    will be perfectly understandable, with the following characteristics:'
  prefs: []
  type: TYPE_NORMAL
- en: User credential binding authentication (not password comparison)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use of `InetOrgPerson` in `UserDetailsContextMapper`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Take a look at the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first bean provided for us is `BindAuthenticator`, and the supporting `FilterBased`
    **LdapUserSearch** bean is used to locate the user’s DN in the LDAP directory
    prior to binding, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Second, `LdapAuthoritiesPopulator` and `UserDetailsContextMapper` perform the
    roles we examined earlier in the chapter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we must update Spring Security to utilize our explicitly configured
    `UserDetailsService` bean as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: At this point, we have fully configured LDAP authentication with explicit Spring
    bean notation. Employing this technique in the LDAP integration is useful in a
    few cases, such as when the security namespace does not expose certain configuration
    attributes, or when custom implementation classes are required to provide functionality
    tailored to a particular business scenario. We’ll explore one such scenario later
    in this chapter when we examine how to connect to Microsoft AD via LDAP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go ahead and start the application and give the configuration a try with the
    `username` as `shauser@example.com` and the `password` as `shauser`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assuming you have an external LDAP server running, or you have kept the configured
    in-memory `DefaultSpringSecurityContextSource` object, everything should still
    be working.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Your code should look like `chapter06.07-calendar`.
  prefs: []
  type: TYPE_NORMAL
- en: Delegating role discovery to UserDetailsService
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One technique for populating user roles that are available to use with explicit
    bean configuration is implementing the support for looking up a user by username
    in `UserDetailsService` and getting the `GrantedAuthority` objects from this source.
  prefs: []
  type: TYPE_NORMAL
- en: 'The configuration is as simple as replacing the bean with the `ldapAuthoritiesPopulator`
    ID bean with an updated `UserDetailsService` and `LdapAuthoritiesPopulator` object,
    with a reference to `UserDetailsService`. Make the following updates to the `SecurityConfig.java`
    file, ensuring you remove the previous `ldapAuthoritiesPopulator` bean definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also need to ensure that we have defined `userDetailsService`. To keep
    things simple, add an in-memory `UserDetailsService` interface, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'At the end, we configured a custom `LdapAuthenticationProvider` interface,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have it, you will want to remove the references to `UserDetailsService`
    from `AccountController`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: You should now be able to authenticate with `admin1@example.com` as the `username`
    and `admin1` as the `password`. Naturally, we could also substitute this in-memory
    `UserDetailsService` interface for the JDBC or JPA-based one we discussed in [*Chapter
    4*](B21757_04.xhtml#_idTextAnchor106), *JDBC-based Authentication*, and in [*Chapter
    5*](B21757_05.xhtml#_idTextAnchor150), *Authentication with* *Spring Data*.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Your code should look like `chapter06.08-calendar`.
  prefs: []
  type: TYPE_NORMAL
- en: The logistical and managerial problem you may notice with this is that the usernames
    and roles must be managed both in the LDAP server and the repository used by `UserDetailsService`—this
    is probably not a scalable model for a large user base.
  prefs: []
  type: TYPE_NORMAL
- en: The more common use of this scenario is when LDAP authentication is required
    to ensure that users of the secured application are valid corporate users, but
    the application itself wants to store authorization information. This keeps potentially
    application-specific data out of the LDAP directory, which can be a beneficial
    separation of concerns.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating with Microsoft Active Directory via LDAP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the convenient features of Microsoft AD is not only its seamless integration
    with Microsoft Windows-based network architectures, but also that it can be configured
    to expose the contents of AD using the LDAP protocol. If you are working in a
    company that is heavily leveraging Microsoft Windows, it is probable that any
    LDAP integration you do will be against your AD instance.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on your configuration of Microsoft AD (and the directory administrator’s
    willingness to configure it to support Spring Security LDAP), you may have a difficult
    time, not with the authentication and binding process, but with the mapping of
    AD information to the user’s `GrantedAuthority` objects within the Spring Security
    system.
  prefs: []
  type: TYPE_NORMAL
- en: 'The sample AD LDAP tree for JBCP calendar corporate within our LDAP browser
    looks like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.11 – Example of a Microsoft Active Directory structure](img/B21757_06_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.11 – Example of a Microsoft Active Directory structure
  prefs: []
  type: TYPE_NORMAL
- en: What you do not see here is `ou=Groups`, which we saw in our sample LDAP structure
    earlier; this is because AD stores group membership as attributes on the LDAP
    entries of the users themselves.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to alter our configuration to support our AD structure. Assuming we
    are starting with the bean configuration detailed in the previous section, make
    the following updates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: If you have it defined, you will want to remove the `UserDetailsService` declaration
    in the `SecurityConfig.java` file. Finally, you will want to remove the references
    to `UserDetailsService` from `AccountController`.
  prefs: []
  type: TYPE_NORMAL
- en: The `sAMAccountName` attribute is the AD equivalent of the `uid` attribute we
    use in a standard LDAP entry. Although most AD LDAP integrations are likely to
    be more complex than this example, this should give you a starting point to jump
    off and explore your conceptual understanding of the inner workings of Spring
    Security LDAP integration; supporting even a complex integration will be much
    easier.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: If you want to run this sample, you will need an instance of AD up and running
    that matches the schema displayed in the screenshot. The alternative is to adjust
    the configuration to match your AD schema. A simple way to play around with AD
    is to install `Active Directory Lightweight Directory Services`, which can be
    found at [https://www.microsoft.com/fr-FR/download/details.aspx?id=1451](https://www.microsoft.com/fr-FR/download/details.aspx?id=1451).
    Your code should look like `chapter06.09-calendar`.
  prefs: []
  type: TYPE_NORMAL
- en: Built-in AD support in Spring Security 6.1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Active Directory supports its own non-standard authentication options, and the
    normal usage pattern does not fit too cleanly with the standard `LdapAuthenticationProvider`.
    Typically, authentication is performed by using the domain username (in the form
    of `user@domain`), rather than using an LDAP distinguished name. To make this
    easier, Spring Security has an authentication provider that is customized for
    a typical Active Directory setup.
  prefs: []
  type: TYPE_NORMAL
- en: 'Configuring `ActiveDirectoryLdapAuthenticationProvider` is quite straightforward.
    You need only supply the domain name and an LDAP URL that supplies the address
    of the server as we have covered in the previous sections. A reminder of what
    the configuration looks like can be found in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'There are a few things that should be noted about the provided `ActiveDirectory`
    **LdapAuthenticationProvider** class, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The users that need to be authenticated must be able to bind to AD (there is
    no manager user)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The default method for populating user authorities is to search the users `memberOf`
    attributes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users must contain an attribute named `userPrincipalName`, which is in the `username@<domain>`
    format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Due to the complex LDAP deployments that occur in the real world, the built-in
    support will most likely provide a guide to as how you can integrate with your
    custom LDAP schema.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have seen that LDAP servers can be relied on to provide authentication and
    authorization information, as well as rich user profile information when requested.
    In this chapter, we covered the LDAP terminology and concepts, and how LDAP directories
    might be commonly organized to work with Spring Security. We also explored the
    configuration of both standalone (embedded) and external LDAP servers from a Spring
    Security configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: We covered the authentication and authorization of users against LDAP repositories,
    and their subsequent mapping to Spring Security actors. We also saw the differences
    in authentication schemes, password storage, and security mechanisms in LDAP,
    and how they are treated in Spring Security. We also learned to map user detail
    attributes from the LDAP directory to the `UserDetails` object for rich information
    exchange between LDAP and the Spring-enabled application. We also explained bean
    configuration for LDAP and the pros and cons of this approach. Lastly, we also
    covered integration with Microsoft AD.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss Spring Security’s `remember-me` feature,
    which allows a user’s session to securely persist even after closing the browser.
  prefs: []
  type: TYPE_NORMAL
