["```java\nclass A { }\n```", "```java\nclass B extends A { }\n```", "```java\nclass C extends B { }\n```", "```java\nclass D extends C { }\n```", "```java\ninterface A { }\n```", "```java\ninterface B extends A {}\n```", "```java\ninterface C extends B {}\n```", "```java\ninterface D extends C {}\n```", "```java\nclass A {\n```", "```java\n  private String prop = \"init value\";\n```", "```java\n  public void setProp(String value){\n```", "```java\n     prop = value;\n```", "```java\n  }\n```", "```java\n  public String getProp(){\n```", "```java\n     return prop;\n```", "```java\n  }\n```", "```java\n}\n```", "```java\npublic class MyApp {\n```", "```java\n  public static void main(String[] args){\n```", "```java\n     AnotherClass an = new AnotherClass();\n```", "```java\n     for(String s: args){\n```", "```java\n        an.display(s);\n```", "```java\n     }\n```", "```java\n   }\n```", "```java\n}\n```", "```java\npublic class AnotherClass {\n```", "```java\n   private int result;\n```", "```java\n   public void display(String s){\n```", "```java\n      System.out.println(s);\n```", "```java\n   }\n```", "```java\n   public int process(int i){\n```", "```java\n      result = i *2;\n```", "```java\n      return result;\n```", "```java\n   }\n```", "```java\n   public int getResult(){\n```", "```java\n      return result;\n```", "```java\n   }\n```", "```java\n} \n```", "```java\n<return type> <method name>(<list of parameter types>){\n```", "```java\n     <method body that is a sequence of statements>\n```", "```java\n}\n```", "```java\ndouble doSomething(String s, int i){\n```", "```java\n    //some code goes here\n```", "```java\n}\n```", "```java\ndouble doSomething(String i, int s){\n```", "```java\n    //some code other code goes here\n```", "```java\n}\n```", "```java\ndouble doSomething(String s, int i){\n```", "```java\n    //some code goes here\n```", "```java\n}\n```", "```java\ndouble doSomething(int s, String i){\n```", "```java\n    //some code other code goes here\n```", "```java\n}\n```", "```java\nString someMethod(String s, int i, double... arr){\n```", "```java\n //statements that compose method body\n```", "```java\n}\n```", "```java\npublic static void main(String... args){\n```", "```java\n    someMethod(\"str\", 42, 10, 17.23, 4);\n```", "```java\n}\n```", "```java\nprivate static String someMethod(\n```", "```java\n        String s, int i, double... arr){\n```", "```java\n    System.out.println(arr[0] + \", \" + arr[1] + \", \" + arr[2]); \n```", "```java\n                                     //prints: 10.0, 17.23, 4.0\n```", "```java\n    return s;\n```", "```java\n}\n```", "```java\nclass SomeClass {\n```", "```java\n     private int prop1;\n```", "```java\n     private String prop2;\n```", "```java\n     public SomeClass(int prop1){\n```", "```java\n         this.prop1 = prop1;\n```", "```java\n     }\n```", "```java\n     public SomeClass(String prop2){\n```", "```java\n         this.prop2 = prop2;\n```", "```java\n     }\n```", "```java\n     public SomeClass(int prop1, String prop2){\n```", "```java\n         this.prop1 = prop1;\n```", "```java\n         this.prop2 = prop2;\n```", "```java\n     }   \n```", "```java\n     // methods follow \n```", "```java\n}\n```", "```java\nclass TheParentClass {\n```", "```java\n    private int prop;\n```", "```java\n    public TheParentClass(int prop){\n```", "```java\n        this.prop = prop;\n```", "```java\n    }\n```", "```java\n    // methods follow\n```", "```java\n}\n```", "```java\nclass TheChildClass extends TheParentClass{\n```", "```java\n    private int x;\n```", "```java\n    private String prop;\n```", "```java\n    private String anotherProp = \"abc\";\n```", "```java\n    public TheChildClass(String prop){\n```", "```java\n       super(42);\n```", "```java\n       this.prop = prop;\n```", "```java\n    }\n```", "```java\n    public TheChildClass(int arg1, String arg2){\n```", "```java\n       super(arg1);\n```", "```java\n       this.prop = arg2;\n```", "```java\n    }\n```", "```java\n    // methods follow\n```", "```java\n}\n```", "```java\nclass TheParentClass {\n```", "```java\n    private int prop;\n```", "```java\n    public TheParentClass(int prop){\n```", "```java\n        this.prop = prop;\n```", "```java\n    }\n```", "```java\n    // methods follow\n```", "```java\n}\n```", "```java\nclass TheChildClass extends TheParentClass{\n```", "```java\n    private String prop;\n```", "```java\n    public TheChildClass(String prop){\n```", "```java\n        //super(42);  //No call to the parent's constructor\n```", "```java\n        this.prop = prop;\n```", "```java\n    }\n```", "```java\n    // methods follow\n```", "```java\n}\n```", "```java\nclass TheParentClass {\n```", "```java\n    private int prop;\n```", "```java\n    public TheParentClass() {}\n```", "```java\n    public TheParentClass(int prop){\n```", "```java\n        this.prop = prop;\n```", "```java\n    }\n```", "```java\n    // methods follow\n```", "```java\n}\n```", "```java\nclass TheChildClass extends TheParentClass{\n```", "```java\n    private String prop;\n```", "```java\n    public TheChildClass(String prop){\n```", "```java\n        this.prop = prop;\n```", "```java\n    }\n```", "```java\n    // methods follow\n```", "```java\n}\n```", "```java\nTheChildClass ref1 = new TheChildClass(\"something\"); \n```", "```java\nTheParentClass ref2 = new TheChildClass(\"something\");\n```", "```java\nclass TheParentClass {\n```", "```java\n    private int prop;\n```", "```java\n    public TheParentClass(int prop){\n```", "```java\n        this.prop = prop;\n```", "```java\n    }\n```", "```java\n    public void someParentMethod(){}\n```", "```java\n}\n```", "```java\nclass TheChildClass extends TheParentClass{\n```", "```java\n    private String prop;\n```", "```java\n    public TheChildClass(int arg1, String arg2){\n```", "```java\n        super(arg1);\n```", "```java\n        this.prop = arg2;\n```", "```java\n    }\n```", "```java\n    public void someChildMethod(){}\n```", "```java\n}\n```", "```java\nTheChildClass ref1 = new TheChildClass(\"something\");\n```", "```java\nTheParentClass ref2 = new TheChildClass(\"something\");\n```", "```java\nref1.someChildMethod();\n```", "```java\nref1.someParentMethod();\n```", "```java\n((TheChildClass) ref2).someChildMethod();\n```", "```java\nref2.someParentMethod();\n```", "```java\nTheParentClass ref2 = new TheParentClass(42);\n```", "```java\n((TheChildClass) ref2).someChildMethod();  //compiler's error\n```", "```java\nref2.someParentMethod();\n```", "```java\nvoid someMethod(){\n```", "```java\n   SomeClass ref = new SomeClass();\n```", "```java\n   ref.someClassMethod();\n```", "```java\n   //other statements follow\n```", "```java\n}\n```", "```java\nclass A { }\n```", "```java\nclass B extends A {}\n```", "```java\nclass C extends B {}\n```", "```java\nclass D extends C {}\n```", "```java\npublic String toString() {\n```", "```java\n   return getClass().getName()+\"@\"+\n```", "```java\n                     Integer.toHexString(hashCode());\n```", "```java\n}\n```", "```java\nTheChildClass ref1 = new TheChildClass(\"something\");\n```", "```java\nSystem.out.println(ref1.toString());  \n```", "```java\n//prints: com.packt.learnjava.ch02_oop.\n```", "```java\n//Constructor$TheChildClass@72ea2f77\n```", "```java\n@Override\n```", "```java\npublic String toString() {\n```", "```java\n    return \"TheChildClass{\" +\n```", "```java\n            \"prop='\" + prop + '\\'' +\n```", "```java\n            '}';\n```", "```java\n}\n```", "```java\nTheChildClass ref1 = new TheChildClass(\"something\");\n```", "```java\nSystem.out.println(ref1.toString());  \n```", "```java\n                      //prints: TheChildClass{prop='something'}\n```", "```java\nclass SomeClass{\n```", "```java\n    public static void someMethod(int i){\n```", "```java\n        //do something\n```", "```java\n    }\n```", "```java\n}\n```", "```java\nSomeClass.someMethod(42);\n```", "```java\nclass SomeClass{\n```", "```java\n    public static String SOME_PROPERTY = \"abc\";\n```", "```java\n}\n```", "```java\nSystem.out.println(SomeClass.SOME_PROPERTY);  //prints: abc\n```", "```java\nclass SomeClass{\n```", "```java\n    public static final String INPUT_FILE_NAME = \"myFile.csv\";\n```", "```java\n}\n```", "```java\nclass SomeClass{\n```", "```java\n    public static String someMethod() {\n```", "```java\n        return \"abc\";\n```", "```java\n    }\n```", "```java\n}\n```", "```java\nSystem.out.println(SomeClass.someMethod()); //prints: abc\n```", "```java\ninterface SomeInterface {\n```", "```java\n    void method1();\n```", "```java\n    String method2(int i);\n```", "```java\n}\n```", "```java\nclass SomeClass implements SomeInterface{\n```", "```java\n    public void method1(){\n```", "```java\n        //method body\n```", "```java\n    }\n```", "```java\n    public String method2(int i) {\n```", "```java\n        //method body\n```", "```java\n        return \"abc\";\n```", "```java\n    }\n```", "```java\n}\n```", "```java\nSomeInterface si = new SomeClass(); \n```", "```java\ninterface SomeInterface {\n```", "```java\n    void method1();\n```", "```java\n    String method2(int i);\n```", "```java\n    default int method3(){\n```", "```java\n        return 42;\n```", "```java\n    }\n```", "```java\n}\n```", "```java\nclass SomeClass implements SomeInterface{\n```", "```java\n    public void method1(){\n```", "```java\n        //method body\n```", "```java\n    }\n```", "```java\n    public String method2(int i) {\n```", "```java\n        //method body\n```", "```java\n        return \"abc\";\n```", "```java\n    }\n```", "```java\n}\n```", "```java\nSomeClass sc = new SomeClass();\n```", "```java\nsc.method1();\n```", "```java\nsc.method2(22);  //returns: \"abc\"\n```", "```java\nSystem.out.println(sc.method2(22)); //prints: abc\n```", "```java\nsc.method3();    //returns: 42\n```", "```java\nSystem.out.println(sc.method3());   //prints: 42\n```", "```java\nclass SomeClass implements SomeInterface{\n```", "```java\n    public void method1(){\n```", "```java\n        //method body\n```", "```java\n    }\n```", "```java\n    public String method2(int i) {\n```", "```java\n        //method body\n```", "```java\n        return \"abc\";\n```", "```java\n    }\n```", "```java\n    public int method3(){\n```", "```java\n        return 15;\n```", "```java\n    }\n```", "```java\n}\n```", "```java\nSomeClass sc = new SomeClass();\n```", "```java\nsc.method1();\n```", "```java\nsc.method2(22);  //returns: \"abc\"\n```", "```java\nsc.method3();    //returns: 15\n```", "```java\nSystem.out.println(sc.method3());      //prints: 15\n```", "```java\ninterface SomeInterface {\n```", "```java\n    void method1();\n```", "```java\n    String method2(int i);\n```", "```java\n    default int method3(){\n```", "```java\n        return getNumber();\n```", "```java\n    }\n```", "```java\n    default int method4(){\n```", "```java\n        return getNumber() + 22;\n```", "```java\n    }\n```", "```java\n    private int getNumber(){\n```", "```java\n        return 42;\n```", "```java\n    }\n```", "```java\n}\n```", "```java\ninterface SomeInterface{\n```", "```java\n   static String someMethod() {\n```", "```java\n      return \"abc\";\n```", "```java\n   }\n```", "```java\n}\n```", "```java\nSystem.out.println(SomeInetrface.someMethod()); //prints: abc\n```", "```java\ninterface A {\n```", "```java\n    int m(String s);\n```", "```java\n    int m(String s, double d);\n```", "```java\n    default int m(String s, int i) { return 1; }\n```", "```java\n    static int m(String s, int i, double d) { return 1; }\n```", "```java\n}\n```", "```java\n    class C {\n```", "```java\n        int m(String s){ return 42; }\n```", "```java\n        int m(String s, double d){ return 42; }\n```", "```java\n        static int m(String s, double d, int i) { return 1; }\n```", "```java\n    }\n```", "```java\ninterface A {\n```", "```java\n    int m(String s);\n```", "```java\n    int m(String s, double d);\n```", "```java\n}\n```", "```java\ninterface B extends A {\n```", "```java\n    default int m(String s, int i) { return 1; }\n```", "```java\n    static int m(String s, int i, double d) { return 1; }\n```", "```java\n}\n```", "```java\nclass C {\n```", "```java\n     int m(String s){ return 42; }\n```", "```java\n}\n```", "```java\nclass D extends C {\n```", "```java\n     int m(String s, double d){ return 42; }\n```", "```java\n     static int m(String s, double d, int i) { return 1; }\n```", "```java\n}\n```", "```java\ninterface A {\n```", "```java\n    default void method(){\n```", "```java\n        System.out.println(\"interface A\");\n```", "```java\n    }\n```", "```java\n}\n```", "```java\ninterface B extends A{\n```", "```java\n    @Override\n```", "```java\n    default void method(){\n```", "```java\n        System.out.println(\"interface B\");\n```", "```java\n    }\n```", "```java\n}\n```", "```java\nclass C implements B { }\n```", "```java\nC c = new C();\n```", "```java\nc.method();      //prints: interface B\n```", "```java\ninterface B extends A{\n```", "```java\n    @Override\n```", "```java\n    default void method(){\n```", "```java\n        System.out.println(\"interface B\");\n```", "```java\n    }\n```", "```java\n}\n```", "```java\nC c = new C();\n```", "```java\nc.method();      //prints: interface A\n```", "```java\nclass C1{\n```", "```java\n    public void method(){\n```", "```java\n        System.out.println(\"class C1\");\n```", "```java\n    }\n```", "```java\n}\n```", "```java\nclass C2 extends C1{\n```", "```java\n    @Override\n```", "```java\n    public void method(){\n```", "```java\n        System.out.println(\"class C2\");\n```", "```java\n    }\n```", "```java\n}\n```", "```java\nC2 c2 = new C2();\n```", "```java\nc2.method();      //prints: class C2\n```", "```java\nclass C1{\n```", "```java\n    public void method(){\n```", "```java\n        System.out.println(\"class C1\");\n```", "```java\n    }\n```", "```java\n}\n```", "```java\nclass C3 extends C1{\n```", "```java\n    public void someOtherMethod(){\n```", "```java\n        System.out.println(\"class C3\");\n```", "```java\n    }\n```", "```java\n}\n```", "```java\nclass C2 extends C3{\n```", "```java\n    @Override\n```", "```java\n    public void method(){\n```", "```java\n        System.out.println(\"class C2\");\n```", "```java\n    }\n```", "```java\n}\n```", "```java\ninterface A {\n```", "```java\n    String NAME = \"interface A\";\n```", "```java\n    static void method() {\n```", "```java\n        System.out.println(\"interface A\");\n```", "```java\n    }\n```", "```java\n}\n```", "```java\ninterface B extends A {\n```", "```java\n    String NAME = \"interface B\";\n```", "```java\n    static void method() {\n```", "```java\n        System.out.println(\"interface B\");\n```", "```java\n    }\n```", "```java\n}\n```", "```java\nSystem.out.println(B.NAME); //prints: interface B\n```", "```java\nB.method();                 //prints: interface B\n```", "```java\npublic class C {\n```", "```java\n    public static String NAME = \"class C\";\n```", "```java\n    public static void method(){\n```", "```java\n        System.out.println(\"class C\"); \n```", "```java\n    }\n```", "```java\n    public String name1 = \"class C\";\n```", "```java\n}\n```", "```java\npublic class D extends C {\n```", "```java\n    public static String NAME = \"class D\";\n```", "```java\n    public static void method(){\n```", "```java\n        System.out.println(\"class D\"); \n```", "```java\n    }\n```", "```java\n    public String name1 = \"class D\";\n```", "```java\n}\n```", "```java\nSystem.out.println(D.NAME);  //prints: class D\n```", "```java\nD.method();                  //prints: class D\n```", "```java\nC obj = new D();\n```", "```java\nSystem.out.println(obj.NAME);        //prints: class C\n```", "```java\nSystem.out.println(((D) obj).NAME);  //prints: class D\n```", "```java\nobj.method();                        //prints: class C\n```", "```java\n((D)obj).method();                   //prints: class D\n```", "```java\nSystem.out.println(obj.name1);       //prints: class C\n```", "```java\nSystem.out.println(((D) obj).name1); //prints: class D\n```", "```java\nclass X {\n```", "```java\n    private String name = \"class X\";\n```", "```java\n    public String getName() {\n```", "```java\n        return name;\n```", "```java\n    }\n```", "```java\n    public void setName(String name) {\n```", "```java\n        this.name = name;\n```", "```java\n    }\n```", "```java\n}\n```", "```java\nclass Y extends X {\n```", "```java\n    private String name = \"class Y\";\n```", "```java\n    public String getName() {\n```", "```java\n        return name;\n```", "```java\n    }\n```", "```java\n    public void setName(String name) {\n```", "```java\n        this.name = name;\n```", "```java\n    }\n```", "```java\n}\n```", "```java\nX x = new Y();\n```", "```java\nSystem.out.println(x.getName());      //prints: class Y\n```", "```java\nSystem.out.println(((Y)x).getName()); //prints: class Y\n```", "```java\npublic class HidingProperty {\n```", "```java\n   private static String name1 = \"static property\";\n```", "```java\n   private String name2 = \"instance property\";\n```", "```java\n   public void method() {\n```", "```java\n      var name1 = \"local variable\";\n```", "```java\n      System.out.println(name1);     //prints: local variable\n```", "```java\n      var name2 = \"local variable\";  //prints: local variable\n```", "```java\n      System.out.println(name2);\n```", "```java\n      System.out.println(HidingProperty.name1); \n```", "```java\n                                     //prints: static property\n```", "```java\n      System.out.println(this.name2);\n```", "```java\n                                   //prints: instance property\n```", "```java\n   }\n```", "```java\n}\n```", "```java\nfinal String s = \"abc\";\n```", "```java\nfinal String s;\n```", "```java\ns = \"abc\";\n```", "```java\nclass A {\n```", "```java\n    private final String s1 = \"abc\";\n```", "```java\n    private final String s2;\n```", "```java\n    private final String s3;   //error\n```", "```java\n    private final int x;       //error\n```", "```java\n    public A() {\n```", "```java\n        this.s1 = \"xyz\";      //error\n```", "```java\n        this.s2 = \"xyz\";     \n```", "```java\n    }\n```", "```java\n}\n```", "```java\nclass B {\n```", "```java\n    private final String s1 = \"abc\";\n```", "```java\n    private final String s2;\n```", "```java\n    {\n```", "```java\n        s1 = \"xyz\"; //error\n```", "```java\n        s2 = \"abc\";\n```", "```java\n    }\n```", "```java\n}\n```", "```java\nclass C {\n```", "```java\n    private final static String s1 = \"abc\";\n```", "```java\n    private final static String s2;\n```", "```java\n    static {\n```", "```java\n        s1 = \"xyz\"; //error\n```", "```java\n        s2 = \"abc\";\n```", "```java\n    }\n```", "```java\n}\n```", "```java\ninterface I {\n```", "```java\n    String s1;  //error\n```", "```java\n    String s2 = \"abc\";\n```", "```java\n}\n```", "```java\npublic final Class getClass()x\n```", "```java\npublic final void notify()\n```", "```java\npublic final void notifyAll()\n```", "```java\npublic final void wait() throws InterruptedException\n```", "```java\npublic final void wait(long timeout) \n```", "```java\n                         throws InterruptedException\n```", "```java\npublic final void wait(long timeout, int nanos)\n```", "```java\n                         throws InterruptedException\n```", "```java\nfinal class Person {\n```", "```java\n    private int age;\n```", "```java\n    private String name;\n```", "```java\n    public Person(int age, String name) {\n```", "```java\n        this.age = age;\n```", "```java\n        this.name = name;\n```", "```java\n    }\n```", "```java\n    public int age() { return age; }\n```", "```java\n    public String name() { return name; }\n```", "```java\n    @Override\n```", "```java\n    public boolean equals(Object o) {\n```", "```java\n        //implementation not shown for brevity\n```", "```java\n    }\n```", "```java\n    @Override\n```", "```java\n    public int hashCode() {\n```", "```java\n        //implementation not shown for brevity\n```", "```java\n    }\n```", "```java\n    @Override\n```", "```java\n    public String toString() {\n```", "```java\n        //implementation not shown for brevity\n```", "```java\n    }\n```", "```java\nrecord Person(int age, String name){}\n```", "```java\nrecord PersonR(int age, String name){} //We added suffix \"R\" \n```", "```java\n                 //to distinguish this class from class Person\n```", "```java\nPerson person = new Person(25, \"Bill\");\n```", "```java\nSystem.out.println(person);  \n```", "```java\n                          //prints: Person{age=25, name='Bill'}\n```", "```java\nSystem.out.println(person.name());            //prints: Bill\n```", "```java\nPerson person1 = new Person(25, \"Bill\");\n```", "```java\nSystem.out.println(person.equals(person1));   //prints: true\n```", "```java\nPersonR personR = new PersonR(25, \"Bill\");\n```", "```java\nSystem.out.println(personR);   \n```", "```java\n                         //prints: PersonR{age=25, name='Bill'}\n```", "```java\nSystem.out.println(personR.name());           //prints: Bill\n```", "```java\nPersonR personR1 = new PersonR(25, \"Bill\");\n```", "```java\nSystem.out.println(personR.equals(personR1)); //prints: true\n```", "```java\nSystem.out.println(personR.equals(person));   //prints: false\n```", "```java\ninterface Student{\n```", "```java\n    String getSchoolName();\n```", "```java\n}\n```", "```java\nrecord StudentImpl(String name, String school) implements Student{\n```", "```java\n    @Override\n```", "```java\n    public String getSchoolName() { return school(); }\n```", "```java\n}\n```", "```java\nrecord StudentImpl(String name, String school) implements Student{\n```", "```java\n    public static String getSchoolName(Student student) {\n```", "```java\n         return student.getSchoolName();\n```", "```java\n    }\n```", "```java\n}\n```", "```java\nrecord StudentImpl(String name, String school) implements Student{\n```", "```java\n    public StudentImpl(String name) {\n```", "```java\n        this(name, \"Unknown\");\n```", "```java\n    } \n```", "```java\n}\n```", "```java\nsealed interface Engine permits EngineBrand {\n```", "```java\n    int getHorsePower();\n```", "```java\n}\n```", "```java\nsealed interface EngineBrand extends Engine permits Vehicle {\n```", "```java\n    String getBrand();\n```", "```java\n} \n```", "```java\nnon-sealed class Vehicle implements EngineBrand {\n```", "```java\n    private final String make, model, brand;\n```", "```java\n    private final int horsePower;\n```", "```java\n    public Vehicle(String make, String model, \n```", "```java\n                   String brand, int horsePower) {\n```", "```java\n        this.make = make;\n```", "```java\n        this.model = model;\n```", "```java\n        this.brand = brand;\n```", "```java\n        this.horsePower = horsePower;\n```", "```java\n    }\n```", "```java\n    public String getMake() { return make; }\n```", "```java\n    public String getModel() { return model; }\n```", "```java\n    public String getBrand() { return brand; }\n```", "```java\n    public int getHorsePower() { return horsePower; }\n```", "```java\n}\n```", "```java\nsealed interface Engine permits EngineBrand, Vehicle {\n```", "```java\n    int getHorsePower();\n```", "```java\n}\n```", "```java\nsealed interface EngineBrand extends Engine permits Vehicle {\n```", "```java\n    String getBrand();\n```", "```java\n} \n```", "```java\nnon-sealed class Vehicle implements Engine, EngineBrand {...}\n```", "```java\nsealed class Vehicle permits Car, Truck {\n```", "```java\n    private final String make, model;\n```", "```java\n    private final int horsePower;\n```", "```java\n    public Vehicle(String make, String model, int horsePower) {\n```", "```java\n        this.make = make;\n```", "```java\n        this.model = model;\n```", "```java\n        this.horsePower = horsePower;\n```", "```java\n    }\n```", "```java\n    public String getMake() { return make; }\n```", "```java\n    public String getModel() { return model; }\n```", "```java\n    public int getHorsePower() { return horsePower; }\n```", "```java\n}\n```", "```java\nfinal class Car extends Vehicle {\n```", "```java\n    private final int passengerCount;\n```", "```java\n    public Car(String make, String model, int horsePower, \n```", "```java\n      int passengerCount) {\n```", "```java\n        super(make, model, horsePower);\n```", "```java\n        this.passengerCount = passengerCount;\n```", "```java\n    }\n```", "```java\n    public int getPassengerCount() { return passengerCount; }\n```", "```java\n}\n```", "```java\nnon-sealed class Truck extends Vehicle {\n```", "```java\n    private final int payloadPounds;\n```", "```java\n    public Truck(String make, String model, int horsePower, \n```", "```java\n      int payloadPounds) {\n```", "```java\n        super(make, model, horsePower);\n```", "```java\n        this.payloadPounds = payloadPounds;\n```", "```java\n    }\n```", "```java\n    public int getPayloadPounds() { return payloadPounds; }\n```", "```java\n}\n```", "```java\nVehicle vehicle = new Vehicle(\"Ford\", \"Taurus\", 300);\n```", "```java\nSystem.out.println(vehicle.getClass().isSealed());  \n```", "```java\n                                                 //prints: true\n```", "```java\nSystem.out.println(Arrays.stream(vehicle.getClass()\n```", "```java\n                .getPermittedSubclasses())\n```", "```java\n                .map(Objects::toString).toList());\n```", "```java\n                             //prints list of permitted classes\n```", "```java\nCar car = new Car(\"Ford\", \"Taurus\", 300, 4);\n```", "```java\nSystem.out.println(car.getClass().isSealed());  //prints: false\n```", "```java\nSystem.out.println(car.getClass().getPermittedSubclasses());\n```", "```java\n                                                 //prints: null\n```", "```java\ninterface CalcSomething{ double calculate(); }\n```", "```java\nclass CalcUsingAlg1 implements CalcSomething{\n```", "```java\n    public double calculate(){ return 42.1; }\n```", "```java\n}\n```", "```java\nclass CalcUsingAlg2 implements CalcSomething{\n```", "```java\n    private int prop1;\n```", "```java\n    private double prop2;\n```", "```java\n    public CalcUsingAlg2(int prop1, double prop2) {\n```", "```java\n        this.prop1 = prop1;\n```", "```java\n        this.prop2 = prop2;\n```", "```java\n    }\n```", "```java\n    public double calculate(){ return prop1 * prop2; }\n```", "```java\n}\n```", "```java\nclass CalcFactory{\n```", "```java\n    public static CalcSomething getCalculator(){\n```", "```java\n        String alg = getAlgValueFromPropertyFile();\n```", "```java\n        switch(alg){\n```", "```java\n            case \"1\":\n```", "```java\n                return new CalcUsingAlg1();\n```", "```java\n            case \"2\":\n```", "```java\n                int p1 = getAlg2Prop1FromPropertyFile();\n```", "```java\n                double p2 = getAlg2Prop2FromPropertyFile();\n```", "```java\n                return new CalcUsingAlg2(p1, p2);\n```", "```java\n            default:\n```", "```java\n                System.out.println(\"Unknown value \" + alg);\n```", "```java\n                return new CalcUsingAlg1();\n```", "```java\n        }\n```", "```java\n    }\n```", "```java\n}\n```", "```java\nCalcSomething calc = CalcFactory.getCalculator();\n```", "```java\ndouble result = calc.calculate();\n```", "```java\nclass CalcSomething{\n```", "```java\n    public double calculate(){ return 42.1; }\n```", "```java\n}\n```", "```java\nclass CalcUsingAlg2 extends CalcSomething{\n```", "```java\n    private int prop1;\n```", "```java\n    private double prop2;\n```", "```java\n    public CalcUsingAlg2(int prop1, double prop2) {\n```", "```java\n        this.prop1 = prop1;\n```", "```java\n        this.prop2 = prop2;\n```", "```java\n    }\n```", "```java\n    public double calculate(){ return prop1 * prop2; }\n```", "```java\n}\n```", "```java\nclass CalcFactory{\n```", "```java\n    public static CalcSomething getCalculator(){\n```", "```java\n        String alg = getAlgValueFromPropertyFile();\n```", "```java\n        switch(alg){\n```", "```java\n            case \"1\":\n```", "```java\n                return new CalcSomething();\n```", "```java\n            case \"2\":\n```", "```java\n                int p1 = getAlg2Prop1FromPropertyFile();\n```", "```java\n                double p2 = getAlg2Prop2FromPropertyFile();\n```", "```java\n                return new CalcUsingAlg2(p1, p2);\n```", "```java\n            default:\n```", "```java\n                System.out.println(\"Unknown value \" + alg);\n```", "```java\n                return new CalcSomething();\n```", "```java\n        }\n```", "```java\n    }\n```", "```java\n}\n```", "```java\nCalcSomething calc = CalcFactory.getCalculator();\n```", "```java\ndouble result = calc.calculate();\n```", "```java\nclass CalcUsingAlg1 {\n```", "```java\n    public double calculate(CalcInput1 input){\n```", "```java\n        return 42\\. * input.getProp1();\n```", "```java\n    }\n```", "```java\n}\n```", "```java\nclass CalcUsingAlg2{\n```", "```java\n    public double calculate(CalcInput2 input){\n```", "```java\n        return input.getProp2() * input.getProp1();\n```", "```java\n    }\n```", "```java\n}\n```", "```java\nclass CalcInput1{\n```", "```java\n    private int prop1;\n```", "```java\n    public CalcInput1(int prop1) { this.prop1 = prop1; }\n```", "```java\n    public int getProp1() { return prop1; }\n```", "```java\n}\n```", "```java\nclass CalcInput2{\n```", "```java\n    private int prop1;\n```", "```java\n    private double prop2;\n```", "```java\n    public CalcInput2(int prop1, double prop2) {\n```", "```java\n        this.prop1 = prop1;\n```", "```java\n        this.prop2 = prop2;\n```", "```java\n    }\n```", "```java\n    public int getProp1() { return prop1; }\n```", "```java\n    public double getProp2() { return prop2; }\n```", "```java\n}\n```", "```java\nvoid calculate(Object input) {\n```", "```java\n    double result = Calculator.calculate(input);\n```", "```java\n    //other code follows\n```", "```java\n}\n```", "```java\nclass Calculator{\n```", "```java\n    public static double calculate(Object input){\n```", "```java\n        if(input instanceof CalcInput1 calcInput1){\n```", "```java\n            return new CalcUsingAlg1().calculate(calcInput1);\n```", "```java\n        } else if (input instanceof CalcInput2 calcInput2){\n```", "```java\n            return new CalcUsingAlg2().calculate(calcInput2);\n```", "```java\n        } else {\n```", "```java\n            throw new RuntimeException(\"Unknown input type \" + \n```", "```java\n                          input.getClass().getCanonicalName());\n```", "```java\n        }\n```", "```java\n    }\n```", "```java\n}\n```"]