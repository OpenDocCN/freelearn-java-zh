["```java\nuser> (time (doall (map inc (range 10))))\n\"Elapsed time: 0.081947 msecs\"\n(1 2 3 4 5 6 7 8 9 10)\nuser> (time (doall (pmap inc (range 10))))\n\"Elapsed time: 2.288832 msecs\"\n(1 2 3 4 5 6 7 8 9 10)\n```", "```java\n    user> (def random-ints (doall (take 10000000 (repeatedly \n     (partial rand-int 1000)))))\n    #'user/random-ints\n    ```", "```java\n    user> (defn int-count [i xs]\n        (count (filter #(= % i) xs)))\n    #'user/int-count\n    ```", "```java\n    user> (map #(int-count % random-ints) [0 1 2 45 788 500 999 ])\n    (1034 1009 971 1094 968 1029 908)\n    ```", "```java\n    (time (doall (map #(int-count % random-ints) [0 1 2 45 788 500 \n     999])))\n    \"Elapsed time: 7307.28571 msecs\"\n    (9808 10027 9825 10090 9963 10096 9984)\n    ```", "```java\n    user> (time (doall (pmap #(int-count % random-ints) [0 1 2 45 \n     788 500 999])))\n    \"Elapsed time: 1602.424627 msecs\"\n    (9808 10027 9825 10090 9963 10096 9984)\n    ```", "```java\n(+ (expensive-calc-1 5) (expensive-calc-2 19))\n```", "```java\nuser> (defn expensive-calc-1 [i]\n    (Thread/sleep (+ 500 (rand 1000)))\n    (println \"Calc 1\")\n    (+ i 5))\nuser> (defn expensive-calc-2 [i]\n    (Thread/sleep (+ 500 (rand 1000)))\n    (println \"Calc 2\")\n    (+ i 5))\n```", "```java\nuser> (+ (expensive-calc-1 10) (expensive-calc-2 25))\nCalc 1\nCalc 2\n45\n```", "```java\nuser> (let [c1 (future (expensive-calc-1 10))\n      c2 (future (expensive-calc-2 20))]\n    (+ (deref c1) (deref c2)))\nCalc 2\nCalc 1\n40\nuser> (let [c1 (future (expensive-calc-1 10))\n      c2 (future (expensive-calc-2 20))]\n    (+ (deref c1) (deref c2)))\nCalc 1\nCalc 2\n40\n```", "```java\n    lein new app packt-clj.crowdspell\n    ```", "```java\n    :dependencies [[org.clojure/clojure \"1.10.1\"]\n                   [org.clojure/tools.cli \"0.4.2\"]\n                   [clj-http \"3.10.0\"]\n                   [org.clojure/data.json \"0.2.6\"]]\n    ```", "```java\n    (ns packt-clj.crowdspell.fetch\n      (:require [clj-http.client :as http]\n                [clojure.data.json :as json]))\n    ```", "```java\n    (defn get-best-word [language-code words])\n    ```", "```java\n    (ns packt-clj.crowdspell\n     (:require\n      [clojure.tools.cli :as cli]\n      [packt-clj.crowdspell.fetch :as fetch])\n     (:gen-class))\n    ```", "```java\n    (defn -main\n     [& args]\n     (println (fetch/get-best-word \"en\" args)))\n    ```", "```java\n    (defn word-search [word language-code]\n     (try\n      ;; TODO: the HTTP request\n      (catch Exception e\n       {:status :error})))\n    ```", "```java\n    packt-clj.crowdspell.fetch> (http/get (str \"https://en.wikipedia.org/w/api.php\")\n                    {:query-params {\"action\" \"query\"\n                            \"list\" \"search\"\n                            \"srlimit\" 1\n                            \"srsearch\" \"Clojure\"\n                            \"format\" \"json\"}\n                     :accept :json\n                     :cookie-policy :none})\n    ```", "```java\n    (defn word-search [word language-code]\n     (try\n      (let [http-result (http/get (str \"https://\" language-code \".wikipedia.org/w/api.php\")\n                    {:query-params {\"action\" \"query\"\n                            \"list\" \"search\"\n                            \"srlimit\" 1\n                            \"srsearch\" word\n                            \"format\" \"json\"}\n                     :accept :json\n                     :cookie-policy :none})]\n       ;; TODO: do something with the result\n       {:status :ok :total-hits total-hits :word word})\n      (catch Exception e\n       {:status :error})))\n    ```", "```java\n    (-> (json/read-str (:body http-result) :key-fn keyword)\n      (get-in [:query :searchinfo :totalhits]))\n    ```", "```java\n    {:status :ok :total-hits total-hits :word word}\n    ```", "```java\n    (defn word-search [word language-code]\n     (try\n      (let [http-result (http/get (str \"https://\" language-code \".wikipedia.org/w/api.php\")\n                    {:query-params {\"action\" \"query\"\n                            \"list\" \"search\"\n                            \"srlimit\" 1\n                            \"srsearch\" word\n                            \"format\" \"json\"}\n                     :accept :json\n                     :cookie-policy :none})\n         total-hits (-> (json/read-str (:body http-result) :key-fn keyword)\n                 (get-in [:query :searchinfo :totalhits]))]\n       {:status :ok :total-hits total-hits :word word})\n      (catch Exception e\n       {:status :error})))\n    ```", "```java\n    (defn get-best-word\n     [language-code words]\n     (let [results (map (fn [a] [a (future (word-search a language-code))]) words)]\n      ;; TODO: decide which word is the best\n      ))\n    ```", "```java\n    (reduce (fn [best-so-far [word result-future]]\n         (let [{:keys [status total-hits] :as result} @result-future]\n          (if (= status :ok)\n           (if (> total-hits (:total-hits best-so-far))\n            result\n            best-so-far)\n           best-so-far)))\n        {:total-hits 0}\n        results)\n    ```", "```java\n    (defn get-best-word\n     [language-code words]\n     (let [results (map (fn [a] [a (future (word-search a language-code))]) words)]\n      (->\n       (reduce (fn [best-so-far [word result-future]]\n            (let [{:keys [status total-hits] :as result} @result-future]\n             (if (= status :ok)\n              (if (> total-hits (:total-hits best-so-far))\n               result\n               best-so-far)\n              best-so-far)))\n           {:total-hits 0}\n           results)\n       :word)))\n    ```", "```java\n    packt-clj.crowdspell.fetch> (get-best-word \"en\" [\"Fortran\" \"Pascal\"])\n    \"Pascal\"\n    packt-clj.crowdspell.fetch> (get-best-word \"en\" [\"Clojur\" \"Clojure\" \"Clojrre\"])\n    \"Clojure\"\n    ```", "```java\n    java -jar packt-clj.crowdspell-0.1.0-SNAPSHOT-standalone.jar --language en Clojur Clojure Clojrre\n    ```", "```java\n    (cli/parse-opts\n             args\n             [[\"-l\" \"--language LANG\" \"Two-letter language code for search\"\n              :default \"en\"]])\n    ```", "```java\n    packt-clj.crowdspell> (cli/parse-opts [\"--language\" \"fr\" \"Cloj\" \"Clojure\"] [[\"-l\" \"--language LANG\" \"Language code for search\"]])\n    {:options {:language \"fr\"},\n     :arguments [\"Cloj\" \"Clojure\"],\n     :summary \" -l, --language LANG Language code for search\",\n     :errors nil}\n    ```", "```java\n    (defn -main\n     [& args]\n     (let [parsed (cli/parse-opts\n             args\n             [[\"-l\" \"--language LANG\" \"Two-letter language code for search\"\n              :default \"en\"]])]\n      (fetch/get-best-word (get-in parsed [:options :language])\n                 (:arguments parsed))))\n                 (System/exit))))\n    ```", "```java\n    packt-clj.crowdspell> (-main \"-l\" \"en\" \"Klojure\" \"Cloojure\" \"Clojure\")\n    \"Clojure\"\n    ```", "```java\n    $ java -jar target/uberjar/packt-clj.crowdspell-0.1.0-SNAPSHOT-standalone.jar --language en Clojur Clojure Clojrre\n    Clojure\n    ```", "```java\n(let [some-numbers [3 12 -1 55]]\n ;; TODO: do something\n )\n```", "```java\n(let [some-atomic-numbers (atom [3 12 -1 55])]\n ;; TODO: do something with an atom\n )\n```", "```java\nuser> (def x 5)\n#'user/x\nuser> x\n5\nuser> (def x 6)\n#'user/x\nuser> x\n6\n```", "```java\nuser> (def the-var 55)\n#'user/the-var\nuser> (alter-var-root #'the-var #(+ % 15))\n70\n```", "```java\nuser> (def integer-atom (atom 5))\n#'user/integer-atom\n```", "```java\nuser> (deref integer-atom)\n5\n```", "```java\nuser> (swap! integer-atom inc)\n6\nuser> (deref integer-atom)\n6\n```", "```java\nuser> (do\n    (future (do (Thread/sleep 500) (swap! integer-atom + 500)))\n    (future (swap! integer-atom * 1000))\n    (deref integer-atom))\n6000\n```", "```java\nuser> @integer-atom\n6500\n```", "```java\nuser> (do\n    (def integer-atom (atom 6))\n    (future (swap! integer-atom + 500))\n    (future (do (Thread/sleep 500) (swap! integer-atom * 1000)))\n    (deref integer-atom))\n506\nuser> @integer-atom\n506000\n```", "```java\nuser> (do\n    (def integer-atom (atom 5))\n    (future (swap! integer-atom (fn [a] (Thread/sleep 2000)(* a 100))))\n    (future (swap! integer-atom (fn [a] (Thread/sleep 500) (+ a 200))))\n    @integer-atom)\n5\nuser> @integer-atom\n205\nuser> @integer-atom\n20500\n```", "```java\n    user> (def client-account (ref 2100))\n    #'user/client-account\n    user> (def broker-account (ref 10000))\n    #'user/broker-account\n    user> (def acme-corp-share-price (ref 22))\n    #'user/acme-corp-share-price\n    ```", "```java\n    user> (def broker-stocks (ref {:acme-corp 50}))\n    #'user/broker-stocks\n    user> (def client-stocks (ref {:acme-corp 0}))\n    #'user/client-stocks\n    ```", "```java\n    user> (defn buy-acme-corp-shares [n]\n        (dosync\n         (let [purchase-price (* n @acme-corp-share-price)]\n          (alter client-account #(- % purchase-price))\n          (alter broker-account #(+ % purchase-price))\n          (alter client-stocks update :acme-corp #(+ % n))\n          (alter broker-stocks update :acme-corp #(- % n)))))\n    ```", "```java\n    (update {:acme-corp 0} :acme-corp #(+ % n))\n    ```", "```java\n    (alter client-stocks update :acme-corp + n)\n    (alter broker-stocks update :acme-corp - n)\n    ```", "```java\n    (alter client-account - purchase-price)\n    (alter broker-account + purchase-price)\n    ```", "```java\n    user> (buy-acme-corp-shares 1)\n    {:acme-corp 49}\n    ```", "```java\n    user> @client-account\n    2078\n    user> @broker-account\n    10022\n    user> @broker-stocks\n    {:acme-corp 49}\n    user> @client-stocks\n    {:acme-corp 1}\n    ```", "```java\n    user> (defn buy-acme-corp-shares [n]\n        (dosync\n         (let [purchase-price (* n @acme-corp-share-price)]\n          (println \"Let's buy\" n \"stock(s) at\" purchase-price \"per stock\")\n          (Thread/sleep 1000)\n          (alter client-account #(- % purchase-price))\n          (alter broker-account #(+ % purchase-price))\n          (alter client-stocks update :acme-corp #(+ % n))\n          (alter broker-stocks update :acme-corp #(- % n)))))\n    #'user/buy-acme-corp-shares\n    ```", "```java\n    user> (defn reset-accounts []\n        (dosync\n         (ref-set acme-corp-share-price 22)\n         (ref-set client-account 2100)\n         (ref-set broker-account 10000)\n         (ref-set client-stocks {:acme-corp 0})\n         (ref-set broker-stocks {:acme-corp 50})))\n    #'user/reset-accounts\n    user> (reset-accounts)\n    {:acme-corp 50}\n    user> @acme-corp-share-price\n    22\n    ```", "```java\n    user> (do\n        (reset-accounts)\n        (future (buy-acme-corp-shares 1))\n        (future (dosync\n             (Thread/sleep 300)\n             (alter client-account + 500))))\n    Let's buy 1 stocks at 22 per stock\n    #<Future@611d7261: :pending>Let's buy 1 stocks at 22 per stock\n    ```", "```java\n    user> @client-account\n    2578\n    ```", "```java\n    user> (do\n        (reset-accounts)\n        (future (buy-acme-corp-shares 1))\n        (future (dosync\n             (Thread/sleep 300)\n             (alter client-account + 500)))\n        (future (dosync\n             (Thread/sleep 350)\n             (alter broker-account - 200)))\n        (future (dosync\n             (Thread/sleep 600)\n             (alter broker-account + 1200))))\n    Let's buy 1 stock(s) at 22 per stock\n    #<Future@2ffabed2: :pending>Let's buy 1 stock(s) at 22 per stock\n    Let's buy 1 stock(s) at 22 per stock\n    ```", "```java\n    user> @broker-account\n    11022\n    user> @client-account\n    2578\n    ```", "```java\nuser> (do\n    (reset-accounts)\n    (future (buy-acme-corp-shares 1))\n    (future (dosync\n         (Thread/sleep 300)\n         (alter acme-corp-share-price + 10))))\nLet's buy 1 stocks at 22 per stock\n#<Future@11e639bf: :pending>\nuser> @client-account\n2078\n```", "```java\n    user> (defn buy-acme-corp-shares [n]\n        (dosync\n         (let [price (ensure acme-corp-share-price)]\n          (println \"Let's buy\" n \"stock(s) at\" price \"per stock\")\n          (Thread/sleep 1000)\n          (alter client-account #(- % price))\n          (alter broker-account #(+ % price))\n          (alter client-stocks update :acme-corp #(+ % n))\n          (alter broker-stocks update :acme-corp #(- % n)))))\n    #'user/buy-acme-corp-shares\n    ```", "```java\n    user> (do\n        (reset-accounts)\n        (future (buy-acme-corp-shares 1))\n        (future (dosync\n             (Thread/sleep 300)\n             (println \"Raising share price to \" (+ @acme-corp-share-price 10))\n             (alter acme-corp-share-price + 10))))\n    Let's buy 1 stock(s) at 22 per stock\n    #<Future@5410594c: :pending>Raising share price to 32\n    Raising share price to 32\n    Raising share price to 32\n    user> @client-account\n    2078\n    ```", "```java\n    user> (defn buy-acme-corp-shares [n]\n        (dosync\n         (let [price @acme-corp-share-price]\n          (println \"Let's buy\" n \"stock(s) at\" price \"per stock\")\n          (Thread/sleep 1000)\n          (alter acme-corp-share-price identity)\n          (alter client-account #(- % price))\n          (alter broker-account #(+ % price))\n          (alter client-stocks update :acme-corp #(+ % n))\n          (alter broker-stocks update :acme-corp #(- % n)))))\n    #'user/buy-acme-corp-shares\n    ```", "```java\n    user> (do\n        (reset-accounts)\n        (future (buy-acme-corp-shares 1))\n        (future (dosync\n             (Thread/sleep 300)\n             (println \"Raising share price to \" (+ @acme-corp-share-price 10))\n             (alter acme-corp-share-price + 10))))\n    Let's buy 1 stock(s) at 22 per stock\n    #<Future@2b64a327: :pending>Raising share price to 32\n    Let's buy 1 stock(s) at 32 per stock\n    ```", "```java\n    user> @client-account\n    2068\n    ```", "```java\nuser> (def integer-agent (agent 5))\n#'user/integer-agent\nuser> (send integer-agent (fn [a] (Thread/sleep 5000) (inc a)))\n#<Agent@3c221047: 5>\nuser> (send integer-agent (fn [a] (Thread/sleep 5000) (inc a)))\n#<Agent@3c221047: 5>\nuser> @integer-agent\n5\nuser> @integer-agent\n6\nuser> @integer-agent\n7\n```", "```java\nuser> (def integer-atom (atom 5))\n#'user/integer-atom\nuser> (swap! integer-atom (fn [a] (Thread/sleep 5000) (inc a)))\n6\nuser> (swap! integer-atom (fn [a] (Thread/sleep 5000) (inc a)))\n7\n```", "```java\n    lein new figwheel packt-clj.rock-scissors-paper -- --rum\n    ```", "```java\n    lein figwheel\n    ```", "```java\n    (defonce app-state (atom {:computer-choice nil\n                 :game-state :setup\n                 :user-choice nil}))\n    ```", "```java\n    (rum/defc rock-paper-scissors []\n     [:div\n      [:h1 \"Rock, Paper, Scissors\"]])\n    ```", "```java\n    (defn on-js-reload []\n     (rum/mount (rock-paper-scissors)\n           (. js/document (getElementById \"app\"))))\n    (on-js-reload)\n    ```", "```java\n    (defn computer-choice []\n     (nth [:rock :scissors :paper] (rand-int 3)))\n    ```", "```java\n    (def resolutions\n      {:rock {:paper :computer-wins\n              :scissors :player-wins}\n       :scissors {:rock :computer-wins\n                  :paper :player-wins}\n       :paper {:scissors :computer-wins\n               :rock :player-wins}})\n    ```", "```java\n    packt-clj.rock-scissors-paper.core> (get-in resolutions [:rock :scissors])\n    :player-wins\n    ```", "```java\n    (defn resolve-game [player computer]\n     (if (= player computer)\n      :tie\n      (get-in resolutions [player computer])))\n    ```", "```java\n    (def object-sets->messages\n     {#{:rock :scissors} \"Rock crushes scissors.\"\n      #{:scissors :paper} \"Scissors cut paper.\"\n      #{:paper :rock} \"Paper wraps rock.\"})\n    ```", "```java\n    (get object-sets->messages #{:rock :scissors})\n    ```", "```java\n    (get object-sets->messages #{:scissors :rock})\n    ```", "```java\n    (defn result-messages [a b]\n     (get object-sets->messages (hash-set a b)))\n    ```", "```java\n    packt-clj.rock-scissors-paper.core> (resolve-game :scissors :paper)\n    :player-wins\n    packt-clj.rock-scissors-paper.core> (result-messages :scissors :paper)\n    \"Scissors cut paper.\"\n    ```", "```java\n    (rum/defc game-view < rum/reactive []\n     (case (:game-state (rum/react app-state))\n      :setup\n      [:div \"Ready to play?\"\n       [:div [:a {:href \"#start\"} \"Start\"]]]\n      :waiting\n      [:div \"Choose one\"\n       [:div [:a {:href \"#rock\"} \"Rock\"]]\n       [:div [:a {:href \"#paper\"} \"Paper\"]]\n       [:div [:a {:href \"#scissors\"} \"Scissors\"]]]\n      :complete\n      [:div [:a {:href \"#restart\"} \"Play again?\"]]))\n    ```", "```java\n    (rum/defc rock-paper-scissors []\n     [:div\n      [:h1 \"Rock, Paper, Scissors\"]\n      (game-view)])\n    ```", "```java\n    (defn start-game []\n     (swap! app-state\n         (fn [state]\n          (assoc state\n             :computer-choice (computer-choice)\n             :game-state :waiting\n             :player-choice nil))))\n    ```", "```java\n    (swap! app-state\n        assoc\n        :computer-choice (computer-choice)\n        :game-state :waiting\n        :player-choice nil)\n    ```", "```java\n    (rum/defc game-view < rum/reactive []\n     (case (:game-state (rum/react app-state))\n      :setup\n      [:div \"Ready to play?\"\n       [:div [:a {:href \"#start\"\n            :onClick start-game} \"Start\"]]]\n      :waiting\n      [:div \"Choose one\"\n       [:div [:a {:href \"#rock\"} \"Rock\"]]\n       [:div [:a {:href \"#paper\"} \"Paper\"]]\n       [:div [:a {:href \"#scissors\"} \"Scissors\"]]]\n      :complete\n      [:div [:a {:href \"#restart\"\n            :onClick start-game} \"Play again?\"]]))\n    ```", "```java\n    (defn player-choice [choice]\n     (fn []\n      (swap! app-state\n          (fn [state]\n           (assoc state\n              :player-choice choice\n              :game-state :complete)))))\n    ```", "```java\n    (rum/defc game-view < rum/reactive []\n     (case (:game-state (rum/react app-state))\n      :setup\n      [:div \"Ready to play?\"\n       [:div [:a {:href \"#start\"\n            :onClick start-game} \"Start\"]]]\n      :waiting\n      [:div \"Choose one\"\n       [:div [:a {:href \"#rock\"\n            :onClick (player-choice :rock)} \"Rock\"]]\n       [:div [:a {:href \"#paper\"\n            :onClick (player-choice :paper)} \"Paper\"]]\n       [:div [:a {:href \"#scissors\"\n            :onClick (player-choice :scissors)} \"Scissors\"]]]\n      :complete\n      [:div [:a {:href \"#restart\"\n                  :onClick start-game} \"Play again?\"]]))\n    ```", "```java\n    (rum/defc result-view < rum/reactive []\n     (let [player (:player-choice (rum/react app-state))\n        computer (:computer-choice (rum/react app-state))\n        result (resolve-game player computer)]\n      [:div\n        [:div \"You played \" [:strong (name player)]]\n        [:div \"The computer played \" [:strong (name computer)]]\n        (if (= result :tie)\n         [:div \"It was a tie!\"]\n         [:div\n          [:div (result-messages player computer)]\n          [:div (if (= result :player-wins) \"You won!\" \"Oops. The computer won.\")]])\n        [:div [:a {:href \"#start\"\n            :onClick start-game} \"Play again?\"]]]))\n    ```", "```java\n    (rum/defc game-view < rum/reactive []\n     (case (:game-state (rum/react app-state))\n      :setup\n      [:div \"Ready to play?\"\n       [:div [:a {:href \"#start\"\n            :onClick start-game} \"Start\"]]]\n      :waiting\n      [:div \"Choose one\"\n       [:div [:a {:href \"#rock\"\n            :onClick (player-choice :rock)} \"Rock\"]]\n       [:div [:a {:href \"#paper\"\n            :onClick (player-choice :paper)} \"Paper\"]]\n       [:div [:a {:href \"#scissors\"\n            :onClick (player-choice :scissors)} \"Scissors\"]]]\n      :complete\n      (result-view)))\n    ```", "```java\nuser> (def observable-atom (atom 5))\n#'user/observable-atom\nuser> (add-watch observable-atom :watcher-1\n         (fn [k a old new]\n          (println \"The observable atom has gone from\" old \"to\" new)))\n#<Atom@14b35f8d: 5>\nuser> (swap! observable-atom inc)\nThe observable atom has gone from 5 to 6\n6\n```", "```java\n(rum/defc game-view < rum/reactive []\n ;;\n )\n```", "```java\n    lein figwheel\n    ```", "```java\n    (defonce app-state (atom {:computer-choice nil\n                 :game-state :setup\n                 :player-choice nil\n                 :countdown 3}))\n    ```", "```java\n    (set-validator! app-state #(and\n                   (>= 3 (:countdown %) 0)\n                   (#{:setup :waiting :complete} (:game-state %))))\n    ```", "```java\n    (rum/defc choices-view < rum/reactive []\n     [:div.choices-view\n      [:div.choices\n      [:div \"Choose one\"\n       [:div [:a {:href \"#rock\"\n            :onClick (player-choice :rock)} \"Rock\"]]\n       [:div [:a {:href \"#paper\"\n            :onClick (player-choice :paper)} \"Paper\"]]\n       [:div [:a {:href \"#scissors\"\n            :onClick (player-choice :scissors)} \"Scissors\"]]]]])\n    ```", "```java\n    (rum/defc game-view < rum/reactive []\n     (case (:game-state (rum/react app-state))\n      :setup\n      [:div \"Ready to play?\"\n       [:div [:a {:href \"#start\"\n            :onClick start-game} \"Start\"]]]\n      :waiting\n      (choices-view)\n      :complete\n      (result-view)))\n    ```", "```java\n    (rum/defc choice-link-view [kw label countdown]\n     (if (zero? countdown)\n      [:div [:a {:href (str \"#\" (name kw))\n            :on-click (player-choice kw)}\n          label]]\n      [:div label]))\n    ```", "```java\n    (rum/defc choices-view < rum/reactive []\n     (let [ready? (= :waiting (:game-state (rum/react app-state)))\n        countdown (:countdown (rum/react app-state))]\n      [:div.choices-view\n       [:div.choices\n       [:h3 \"Choose one\"]\n       (choice-link-view :rock \"Rock\" countdown)\n       (choice-link-view :paper \"Paper\" countdown)\n       (choice-link-view :scissors \"Scissors\" countdown)]]))\n    ```", "```java\n    (rum/defc countdown-view < rum/reactive [countdown]\n     [:div.countdown\n      [:div.countdown-message\n      (if (> countdown 0)\n       \"Get ready to make your choice...\"\n       \"Go!\")]\n      [:h1 countdown]])\n    ```", "```java\n    (rum/defc choices-view < rum/reactive []\n     (let [countdown (:countdown (rum/react app-state))]\n      [:div.player-choices-view\n       (countdown-view countdown)\n       [:div.choices\n       [:h3 \"Choose one\"]\n       (choice-link-view :rock \"Rock\" countdown)\n       (choice-link-view :paper \"Paper\" countdown)\n       (choice-link-view :scissors \"Scissors\" countdown)]]))\n    ```", "```java\n    (defn start-countdown []\n     (js/setInterval #(swap! app-state update :countdown dec) 1000))\n    ```", "```java\n    (defn start-game []\n     (let [interval (start-countdown)]\n      (swap! app-state\n          (fn [state]\n           (assoc state\n              :computer-choice (computer-choice)\n              :game-state :waiting\n              :countdown 3\n              :interval interval)))))\n    ```", "```java\n    (add-watch app-state :countdown-zero\n          (fn [_k state old new]\n           (when (and (= 1 (:countdown old)) (= 0 (:countdown new)))\n            (js/clearInterval (:interval new)))))\n    ```"]