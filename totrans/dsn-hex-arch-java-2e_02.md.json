["```java\npublic static List<Router> retrieveRouter(List<Router>\n  routers, Predicate<Router> predicate){\n     return routers.stream()\n        .filter(predicate)\n        .collect(Collectors.<Router>toList());\n}\n```", "```java\npublic class Router {\n/** Code omitted **/\n     public static Predicate<Router> filterRouterByType\n       (RouterType routerType){\n          return routerType.equals(RouterType.CORE)\n                ? Router.isCore() :\n                Router.isEdge();\n     }\n     private static Predicate<Router> isCore(){\n          return p -> p.getRouterType() == RouterType.CORE;\n     }\n     private static Predicate<Router> isEdge(){\n          return p -> p.getRouterType() == RouterType.EDGE;\n     }\n/** Code omitted **/\n}\n```", "```java\npublic class RouterSearch {\n    public static List<Router> retrieveRouter(List<Router>\n      routers, Predicate<Router> predicate){\n          return routers.stream()\n                .filter(predicate)\n                .collect(Collectors.<Router>toList());\n    }\n}\n```", "```java\n     // Name-based UUID\n     var bytes = new byte[20];\n     new Random().nextBytes(bytes);\n     var nameBasedUUID = UUID.nameUUIDFromBytes(bytes);\n     // Randomly generated UUID\n     var randomUUID = UUID.randomUUID();\n```", "```java\npublic class RouterId {\n     private final UUID id;\n     private RouterId(UUID id){\n          this.id = id;\n     }\n     public static RouterId withId(String id){\n          return new RouterId(UUID.fromString(id));\n     }\n     public static RouterId withoutId(){\n          return new RouterId(UUID.randomUUID());\n     }\n}\n```", "```java\npublic class Event implements Comparable<Event> {\n     private EventId id;\n     private OffsetDateTime timestamp;\n     private String protocol;\n     private String activity;\n     ...\n}\n```", "```java\n00:44:06.906367 100430035020260940012015 IPV6 casanova.58183 > menuvivofibra.br.domain: 64865+ PTR? 1.0.0.224.in-addr.arpa. (40)\n00:44:06.912775 100430035020260940012016 IPV4 menuvivofibra.br.domain > casanova.58183: 64865 1/0/0 PTR all-systems.mcast.net. (75)\n```", "```java\nvar srcHost = event.getActivity().split(\">\")[0]\n  //casanova.58183\n```", "```java\npublic class Activity {\n     private final String description;\n     private final String srcHost;\n     private final String dstHost;\n     public Activity (String description, String srcHost,\n       String dstHost){\n          this.description = description;\n          this.srcHost = description.split(\">\")[0];\n          this.dstHost = description.split(\">\")[1];\n     }\n     public String getSrcHost(){\n          return this.srcHost;\n     }\n}\n```", "```java\npublic class Event implements Comparable<Event> {\n     private EventId id;\n     private OffsetDateTime timestamp;\n     private String protocol;\n     private Activity activity;\n     ...\n}\n```", "```java\nvar srcHost = event.getActivity().retrieveSrcHost()\n//casanova.58183\n```", "```java\npublic record Network(IP address, String name, int cidr) {\n    public Network {\n        if (cidr < 1 || cidr > 32) {\n            throw new IllegalArgumentException(\"Invalid\n              CIDR\n            value\");\n        }\n    }\n}\n```", "```java\npublic class IP {\n     private final String address;\n     private final Protocol protocol;\n     public IP(String address) {\n          if(address == null)\n          throw new IllegalArgumentException(\"Null IP\n            address\");\n          if(address.length()<=15) {\n               this.protocol = Protocol.IPV4;\n          } else {\n               this.protocol = Protocol.IPV6;\n          }\n          this.address = address;\n     }\n}\n```", "```java\npublic enum Protocol {\n     IPV4,\n     IPV6\n}\n```", "```java\npublic class Switch {\n     private final SwitchType type;\n     private final SwitchId switchId;\n     private final List<Network> networkList;\n     private final IP address;\n    public Switch (SwitchType switchType, SwitchId\n      switchId, List<Network> networks, IP address) {\n        this.switchType = switchType;\n        this.switchId = switchId;\n        this.networks = networks;\n        this.address = address;\n    }\n   public Switch addNetwork(Network network, Router rout\n     er)\n   {\n      List<Network> newNetworks =\n      new ArrayList<>(router.retrieveNetworks());\n    newNetworks.add(network);\n    return new Switch(\n        this.switchType,\n        this.switchId,\n        newNetworks,\n        this.address);\n   }\n    public List<Network> getNetworks() {\n        return networks;\n    }\n}\n```", "```java\npublic class Router {\n    private final RouterType routerType;\n    private final RouterId routerid;\n    private Switch networkSwitch;\n    public Router(RouterType, RouterId routerid) {\n        this.routerType = routerType;\n        this.routerid = routerid;\n    }\n    public static Predicate<Router>\n      filterRouterByType(RouterType routerType) {\n        return routerType.equals(RouterType.CORE)\n                ? Router.isCore() :\n                Router.isEdge();\n    }\n    public static Predicate<Router> isCore() {\n        return p -> p.getRouterType() == RouterType.CORE;\n   }\n    public static Predicate<Router> isEdge() {\n        return p -> p.getRouterType() == RouterType.EDGE;\n   }\n    public void addNetworkToSwitch(Network network) {\n        this.networkSwitch =\n          networkSwitch.addNetwork(network, this);\n    }\n    public Network createNetwork(IP address, String name,\n      int cidr) {\n        return new Network(address, name, cidr);\n    }\n    public List<Network> retrieveNetworks() {\n        return networkSwitch.getNetworks();\n    }\n    public RouterType getRouterType() {\n        return routerType;\n    }\n    @Override\n    public String toString() {\n        return \"Router{\" +\n                \"type=\" + routerType +\n                \", id=\" + routerid +\n          '}';\n    }\n}\n```", "```java\npublic void addNetworkToSwitch(Network network) {\n    this.networkSwitch = networkSwitch.addNetwork(network,\n      this);\n}\npublic Network createNetwork(IP address, String name, long\n  cidr) {\n    return new Network(address, name, cidr);\n}\n```", "```java\npublic class NetworkOperation {\n     final private int MINIMUM_ALLOWED_CIDR = 8;\n     public void createNewNetwork(Router router, IP\n       address, String name, int cidr) {\n     if(cidr < MINIMUM_ALLOWED_CIDR)\n     throw new IllegalArgumentException(\"CIDR is\n       below      \"+MINIMUM_ALLOWED_CIDR);\n     if(isNetworkAvailable(router, address))\n     throw new IllegalArgumentException(\"Address already\n       exist\");\n     Network =\n       router.createNetwork(address,name,cidr);\n     router.addNetworkToSwitch(network);\n     }\n     private boolean isNetworkAvailable(Router router, IP\n       address){\n          var availability = true;\n          for (Network network : router.retrieveNetworks()) {\n               if(network.getAddress().equals(address) &&\n                 network.getCidr() == cidr)\n                    availability = false;\n                    break;\n          }\n          return availability;\n     }\n}\n```", "```java\npublic interface Specification<T> {\n          boolean isSatisfiedBy(T t);\n     Specification<T> and(Specification<T> specification);\n}\n```", "```java\npublic abstract class AbstractSpecification<T> implements\n  Specification<T> {\n     public abstract boolean isSatisfiedBy(T t);\n     public Specification<T> and(final Specification<T>\n       specification) {\n          return new AndSpecification<T>(this,\n            specification);\n     }\n}\n```", "```java\npublic class AndSpecification<T> extends AbstractSpecifica\n  tion<T> {\n     private final Specification<T> spec1;\n     private final Specification<T> spec2;\n     public AndSpecification(final Specification<T> spec1,\n       final Specification<T> spec2) {\n          this.spec1 = spec1;\n          this.spec2 = spec2;\n     }\n     public boolean isSatisfiedBy(final T t) {\n          return spec1.isSatisfiedBy(t) &&\n            spec2.isSatisfiedBy(t);\n     }\n}\n```", "```java\nif(cidr < MINIMUM_ALLOWED_CIDR)\n     throw new IllegalArgumentException(\"CIDR is\n       below \"+MINIMUM_ALLOWED_CIDR);\n```", "```java\npublic class CIDRSpecification extends AbstractSpecifica\n  tion<Integer> {\n     final static public int MINIMUM_ALLOWED_CIDR = 8;\n     @Override\n     public boolean isSatisfiedBy(Integer cidr) {\n          return cidr > MINIMUM_ALLOWED_CIDR;\n     }\n}\n```", "```java\nif(isNetworkAvailable(router, address))\n  throw new IllegalArgumentException(\"Address already ex\n    ist\");\nprivate boolean isNetworkAvailable(Router router, IP ad\n  dress) {\n     var availability = true;\n     for (Network network : router.retrieveNetworks()) {\n          if(network.getAddress().equals(address) &&\n            network.getCidr() == cidr)\n                    availability = false;\n                    break;\n          }\n          return availability;\n     }\n```", "```java\npublic class NetworkAvailabilitySpecification extends Ab\n  stractSpecification<Router> {\n     private final IP address;\n     private final String name;\n     private final int cidr;\n     public NetworkAvailabilitySpecification(IP address,\n       String name, int cidr) {\n          this.address = address;\n          this.name = name;\n          this.cidr = cidr;\n     }\n     @Override\n     public boolean isSatisfiedBy(Router router) {\n          return router!=null &&\n            isNetworkAvailable(router);\n     }\n     private boolean isNetworkAvailable(Router router) {\n          return router.retrieveNetworks().stream()\n             .noneMatch(\n             network -> network.address().equals(address)\n               &&\n             network.name().equals(name) &&\n             network.cidr() == cidr);\n     }\n}\n```", "```java\npublic class NetworkAmountSpecification extends Ab\n  stractSpecification<Router> {\n     final static public int MAXIMUM_ALLOWED_NETWORKS = 6;\n     @Override\n     public boolean isSatisfiedBy(Router router) {\n          return router.retrieveNetworks().size()\n            <=MAXIMUM_ALLOWED_NETWORKS;\n     }\n}\n```", "```java\npublic class RouterTypeSpecification extends AbstractSpeci\n  fication<Router> {\n     @Override\n     public boolean isSatisfiedBy(Router router) {\n          return\n          router.getRouterType().equals(RouterType.EDGE) ||\n            router.getRouterType().equals(RouterType.CORE);\n     }\n}\n```", "```java\npublic sealed interface Specification<T> permits Ab\n  stractSpecification {\n/** Code omitted **/\n}\n```", "```java\npublic abstract sealed class AbstractSpecification<T> im\n  plements Specification<T> permits\n        AndSpecification,\n        CIDRSpecification,\n        NetworkAmountSpecification,\n        NetworkAvailabilitySpecification,\n        RouterTypeSpecification\n{\n/** Code omitted **/\n}\n```", "```java\npublic final class NetworkAmountSpecification extends Ab\n  stractSpecification<Router> {\n/** Code omitted **/\n}\n```", "```java\npublic class NetworkOperation {\n     public void createNewNetwork(Router router, IP\n       address, String name, int cidr) {\n          var availabilitySpec = new\n            NetworkAvailabilitySpecification(address, name,\n              cidr);\n          var cidrSpec = new CIDRSpecification();\n          var routerTypeSpec = new\n            RouterTypeSpecification();\n          var amountSpec = new\n            NetworkAmountSpecification();\n          if(cidrSpec.isSatisfiedBy(cidr))\n               throw new IllegalArgumentException(\"CIDR is\n                 below\n                 \"+CIDRSpecification.MINIMUM_ALLOWED_CIDR);\n          if(availabilitySpec.isSatisfiedBy(router))\n               throw new IllegalArgumentException(\"Address\n                 already exist\");\n          if(amountSpec.and(routerTypeSpec).isSatisfiedBy\n            (router)) {\n               Network network =\n                 router.createNetwork(address, name, cidr);\n               router.addNetworkToSwitch(network);\n          }\n     }\n}\n```", "```java\npublic interface EventParser {\n     DateTimeFormatter formatter =\n       DateTimeFormatter.ofPattern(\"yyyy-MM-dd\n         HH:mm:ss.SSS\").withZone(ZoneId.of(\"UTC\"));\n     Event parseEvent(String event);\n}\n```", "```java\npublic class RegexEventParser implements EventParser {\n     @Override\n     public Event parseEvent(String event) {\n          final String regex = \"(\\\\\\\"[^\\\\\\\"]+\\\\\\\")|\\\\S+\";\n          final Pattern pattern = Pattern.compile(regex,\n            Pattern.MULTILINE);\n          final Matcher matcher = pattern.matcher(event);\n          var fields = new ArrayList<>();\n          while (matcher.find()) {\n               fields.add(matcher.group(0));\n          }\n          var timestamp =\n            LocalDateTime.parse(matcher.group(0),\n              formatter).atOffset(ZoneOffset.UTC);\n          var id = EventId.of(matcher.group(1));\n          var protocol =\n            Protocol.valueOf(matcher.group(2));\n          var activity = new Activity(matcher.group(3),\n            matcher.group(5));\n          return new Event(timestamp, id, protocol,\n            activity);\n     }\n}\n```", "```java\npublic class SplitEventParser implements EventParser{\n          @Override\n     public Event parseEvent(String event) {\n          var fields = Arrays.asList(event.split(\" \"));\n          var timestamp =\n            LocalDateTime.parse(fields.get(0),\n              formatter).atOffset(ZoneOffset.UTC);\n          var id = EventId.of(fields.get(1));\n          var protocol = Protocol.valueOf(fields.get(2));\n          var activity = new Activity(fields.get(3),\n            fields.get(5));\n          return new Event(timestamp,id, protocol,\n            activity);\n     }\n}\n```", "```java\npublic sealed interface EventParser permits RegexEvent\n  Parser, SplitEventParser {\n/** Code omitted **/\n}\n```", "```java\npublic class Event implements Comparable<Event> {\n     private final OffsetDateTime timestamp;\n     private final EventId id;\n     private final Protocol protocol;\n     private final Activity activity;\n     public Event(OffsetDateTime timestamp, EventId id,\n       Protocol protocol, Activity activity) {\n          this.timestamp = timestamp;\n          this.id = id;\n          this.protocol = protocol;\n          this.activity = activity;\n     }\n     public static Event parsedEvent(String\n       unparsedEvent, ParsePolicyType policy) {\n          switch (policy){\n            case REGEX -> new\n            RegexEventParser().parseEvent(unparsedEvent);\n            case SPLIT -> new\n            SplitEventParser().parseEvent(unparsedEvent);\n          }\n     }\n...\n}\n```", "```java\npublic enum ParsePolicyType {\n    REGEX,\n    SPLIT\n}\n```", "```java\npublic class EventSearch {\n     public List<Event> retrieveEvents(List<String>\n       unparsedEvents, ParsePolicyType policyType){\n          var parsedEvents = new ArrayList<Event>();\n          unparsedEvents.forEach(event →{\n               parsedEvents.add(Event.parsedEvent(event,\n          policyType));\n          });\n          return parsedEvents;\n     }\n}\n```"]