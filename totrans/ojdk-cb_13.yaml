- en: Chapter 13. Build Automation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing VirtualBox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing SSH keys
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing VirtualBox machines with Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing VirtualBox machines with Mac OS X
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing VirtualBox machines with Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating builds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building cross-platform installers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Automated builds are widely used in cross-platform software development. *Build
    farm* with build machines for each supported operating systems is required to
    build projects remotely and run tests on all platforms. With the rising popularity
    of software virtualization tools, it became possible to deploy a *virtual build
    farm* using a single physical machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Besides the build environment in each OS, the essential part of an automated
    build is the communication between the *master* machine and the *build* machines.
    The following communication jobs might be required:'
  prefs: []
  type: TYPE_NORMAL
- en: The master should prepare and start the build machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The master should send the source code directly to the build machine or fire
    sources fetching process from the build machine itself
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The master should start the build process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The build machine should send build logs to the master during the build
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The build machine should send result binaries to the master
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The master should shut down the build machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we will prepare the OpenJDK build environment for Windows,
    Linux, and Mac OS X. This task can be done using a high-level build automation
    (or Continuous Integration) tool. However, such tools can be limited in functionality
    and inflexible for our task. While all such tools should do similar jobs (as listed
    previously), different tools can have different configurations and peculiarities,
    and the knowledge of one tool can be less useful for another. Also, such tools
    bring in an additional level of complexity with possible tool-specific problems.
  prefs: []
  type: TYPE_NORMAL
- en: You will learn how to perform build automation using the most basic tools for
    a better understanding of the process. The bash shell is already used for OpenJDK
    builds on all platforms (natively on Linux/Mac and through Cygwin on Windows),
    so we will use bash scripts for setting up and starting to build virtual machines.
    For communication (sending commands and data), we will use the SSH protocol; implementation
    for this is usually preinstalled on Unix-like operating systems and can also be
    installed on Windows. For virtualization, we will use the popular VirtualBox tool
    from Oracle.
  prefs: []
  type: TYPE_NORMAL
- en: Installing VirtualBox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: VirtualBox is a popular virtualization toolbox from Oracle Corporation that
    allows us to run *virtual* instances of other operating systems on top of the
    *host* operating system. In this recipe, we will install VirtualBox and configure
    host network interfaces. Such a configuration will allow us to connect from host
    to guest and back during the automated builds.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will require the Ubuntu 12.04 amd64 operating system running.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following procedure will help you to install VirtualBox:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the installation package from the VirtualBox website ([https://www.virtualbox.org/](https://www.virtualbox.org/))
    and install it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install the virtual network interface package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a virtual interface `tap0` that will be used for connections to and
    from the guest machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Configure the interface `tap0`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create an arbitrary VirtualBox machine using GUI forms.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Settings** | **Network form** and check whether the **tap0** network
    interface is available in the interfaces drop-down list when the **Bridged Adapter**
    mode is used.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: VirtualBox supports different networking options for guest machines. One of
    them—Bridged Adapter—allows us to connect from host to guest and back using static
    IP addresses. To set up this mode on the host side, we need an additional virtual
    network interface with a separate address. The `tunctl` utility that comes as
    part of the `uml-utilities` package allows us to create a virtual interface such
    as `tap0`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Multiple virtual interfaces can be created with different addresses to run multiple
    virtual machines simultaneously. Mac OS X can be used as a host machine, the `tuntaposx`
    kernel extensions are required to use the `tunctl` utility.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Oracle VirtualBox user manual at [https://www.virtualbox.org/manual/UserManual.html](https://www.virtualbox.org/manual/UserManual.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing SSH keys
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will use virtual machines to build OpenJDK. During the build
    source code, control commands, logs, and result binaries should be sent between
    host and virtual machines. We will use the ubiquitous **Secure Shell** (**SSH**)
    protocol and its most popular implementation **OpenSSH** for these tasks.
  prefs: []
  type: TYPE_NORMAL
- en: SSH allows us to send data between the machines and run the commands remotely.
    When the client performs an SSH connection, it should be authenticated against
    the server. Besides the user/password authentication, OpenSSH also supports authentication
    using asymmetric cryptography (RSA or similar) keys. With SSH keys configured,
    a client can connect to server without manual intervention. This eases the scripting
    for copying multiple files or running remote tasks.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will prepare a set of public and private keys and use these
    on all virtual machines and on the host machine during the build.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will need a Unix-like operating system running with an OpenSSH
    server and client installed. For example, the Ubuntu 12.04 operating system can
    be used.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following procedure will help us to install VirtualBox:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Generate client RSA keys pairs for the host and guest machines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Generate server RSA key pairs for the host and guest machines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new user on the host machine that will be used to manage builds, and
    login under this user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run VirtualBox and configure networking as described in the previous recipe,
    *Installing VirtualBox*, with the `192.168.42.2` host IP address and the `192.168.42.1`
    guest IP address.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a user with the same name on the guest machine and login under this
    user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check whether the `ping` command works successfully from host to guest and
    back from guest to host:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On the host machine, set up the client keys:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On the guest machine, set up server keys:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On the guest machine, set up the host client public key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On the host machine, try to connect to the guest and confirm the new guest
    server key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On the host machine, save the obtained fingerprint of the guest server key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On the host machine, check whether we can now connect from host to guest without
    any passwords or additional confirmations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Repeat steps 7 to 11, swapping host and guest sides to set up connections from
    guest to host.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Save the following keys for use later during the builds:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`vmhost__id_rsa`: This is the host client private key'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vmhost__id_rsa.pub`: This is the host client public key'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vmhost__ssh_host_rsa_key`: This is the host server private key'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vmhost__ssh_host_rsa_key.pub`: This is the host server public key'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vmhost__known_hosts`: This is the guest server key fingerprint to be used
    on the host'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vmguest__id_rsa`: This is the guest client private key'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vmguest__id_rsa.pub`: This is the guest client private key'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vmguest__ssh_host_rsa_key`: This is the guest server private key'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vmguest__ssh_host_rsa_key.pub`: This is the guest server public key'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vmguest__known_hosts`: This is the host server key fingerprint to be used
    on guest'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ssh-keygen` command generates a pair of asymmetric cryptography (in our
    example, RSA) keys.
  prefs: []
  type: TYPE_NORMAL
- en: SSH supports passwordless authentication based on keys. We prepared the set
    of keys that can be loaded to host and guest side (for all guest machines) to
    allow seamless connections from host to guest and back. So, now we can a call
    script on the host machine that will connect (or send files) to the guest and
    will be able to connect back to the host from the same guest session.
  prefs: []
  type: TYPE_NORMAL
- en: All keys are deliberately generated with an empty passphrase to allow connections
    without manual passphrase input.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Connections over SSH are secure and this can be useful if you want to perform
    builds using remote machines instead of local virtual ones. If security is not
    required, then other protocols can be used. They do not require authentication
    or a keys setup, for example, some custom protocol over HTTP with support for
    commands and sending files.
  prefs: []
  type: TYPE_NORMAL
- en: The DSA or ECDSA keys can be used instead of the RSA keys.
  prefs: []
  type: TYPE_NORMAL
- en: A shell automation tool like `expect` can be used to set up automated connections
    with passwords instead of client keys.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Installing VirtualBox* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The OpenSSH manual on key generation that is available at [https://www.virtualbox.org/manual/UserManual.html](https://www.virtualbox.org/manual/UserManual.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing VirtualBox machines with Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many Linux-based operating systems have decent support for virtualization using
    VirtualBox. They also usually have an OpenSSH client and server preinstalled or
    available in the main packages repository.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will set up an Ubuntu Linux virtual machine that can be used
    for automated OpenJDK builds.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will require the Ubuntu 12.04 amd64 operating system with
    VirtualBox installed and a virtual network interface configured.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following procedure will help us to prepare the Linux virtual machine:'
  prefs: []
  type: TYPE_NORMAL
- en: Prepare the SSH keys as described in the recipe *Preparing SSH keys*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the Ubuntu 12.04 server amd64 image from the Ubuntu website ([http://www.ubuntu.com/](http://www.ubuntu.com/)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In VirtualBox, create a virtual machine instance using the IDE storage controller
    and default values for other settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install Ubuntu on to the virtual machine, set up networking as described in
    the recipe, *Installing VirtualBox*, and boot the virtual machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a user with the same name on the host machine, and login under this
    user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set up the client keys:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set up the server keys:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set up the host client public key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set up the host key fingerprint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check whether the connection from host to guest and back works seamlessly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Complete the manual build of OpenJDK using the recipe, *Building OpenJDK 8 Ubuntu
    Linux 12.04 LTS*, from [Chapter 4](ch04.html "Chapter 4. Building OpenJDK 8"),
    *Building OpenJDK 8*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we created a virtual machine instance with Ubuntu Linux and
    configured SSH keys to enable seamless automated connections to it.
  prefs: []
  type: TYPE_NORMAL
- en: The manual build was done on this VM to be ensure all environment the is correct.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Other Linux-based OSs can be used instead of Ubuntu 12.04\. Other protocols/tools
    can be used for interaction between the host and guest machine instead of OpenSSH.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Building OpenJDK 8 Ubuntu Linux 12.04* *LTS* recipe from [Chapter 4](ch04.html
    "Chapter 4. Building OpenJDK 8"), *Building OpenJDK 8*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Installing VirtualBox* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Preparing SSH keys* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Oracle VirtualBox user manual at [https://www.virtualbox.org/manual/UserManual.html](https://www.virtualbox.org/manual/UserManual.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing VirtualBox machines with Mac OS X
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modern versions of the Mac OS X operating system support run in a virtualized
    environment using VirtualBox. Instructions to prepare the Mac OS X image for virtualization
    might differ vastly depending on the Mac OS X version and the host operating system.
    Exact instructions lie outside the scope of this book and can be found on the
    Internet.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that running a guest Mac OS X on a non-Mac host operating system
    can violate your end user license agreement with Apple Inc., it's better to consult
    your lawyer about this.
  prefs: []
  type: TYPE_NORMAL
- en: Mac OS X has an OpenSSH client and server preinstalled.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will require a ready-to-use Mac OS X image (for VirtualBox-VDI)
    Version 10.7 or later.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following procedure will help us to prepare the Mac OS X virtual machine:'
  prefs: []
  type: TYPE_NORMAL
- en: Prepare SSH keys as described in the *Preparing SSH keys* recipe in this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In VirtualBox, create a virtual machine instance using at least 2048 RAM, PIIX3
    Chipset, disabled UEFI, single CPU, and IDE storage controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set up networking as described in the *Installing VirtualBox* recipe in this
    chapter and boot the virtual machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a user with the same name on the host machine and login under this user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set up the client keys:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set up the server keys:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set up the host client public key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set up the host key fingerprint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check whether the connection from host to guest and back works seamlessly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Complete the manual build of OpenJDK using the *Building OpenJDK 8 on Mac OS
    X* recipe from [Chapter 4](ch04.html "Chapter 4. Building OpenJDK 8"), *Building
    OpenJDK 8*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we created a virtual machine instance with Mac OS X and configured
    SSH keys to enable seamless automated connections to it.
  prefs: []
  type: TYPE_NORMAL
- en: The manual build was done on this VM to ensure that the environment setup was
    correct.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In some Mac OS X versions, the preinstalled OpenSSH might not support the ECDSA
    SSH keys. This won't prevent us from finishing this recipe as we have used the
    RSA SSH keys. However, if you want to use ECDSA keys you can update the OpenSSH
    installation relatively easily using the Homebrew packaging system and its system
    duplicates repository, `homebrew/dupes`.
  prefs: []
  type: TYPE_NORMAL
- en: Other protocols/tools can be used for interaction between the host and the guest
    machine instead of OpenSSH.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Building OpenJDK 8 on* *Mac OS X* recipe from [Chapter 4](ch04.html "Chapter 4. Building
    OpenJDK 8"), *Building OpenJDK 8*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Installing VirtualBox* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Preparing SSH keys* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Oracle VirtualBox user manual at [https://www.virtualbox.org/manual/UserManual.html](https://www.virtualbox.org/manual/UserManual.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing VirtualBox machines with Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Popular virtualization tools have very good support for virtualizing Windows.
    The VirtualBox setup for Windows can be easier than with Mac OS X. However, the
    SSH protocol is less popular on Windows than on Unix-like operating systems, and
    the SSH server's setup on Windows might be complex.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to set up a Windows virtual machine for automated
    builds. A set of in-depth instructions about configuration of free SSH servers
    on Windows will constitute a significant part of the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will require a Windows 7 virtual machine VirtualBox image.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following procedure will help us to prepare the Windows virtual machine:'
  prefs: []
  type: TYPE_NORMAL
- en: Prepare the SSH keys as described in the *Preparing SSH keys* recipe in this
    chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Download the Copssh SSH server implementation Version 3.1.4\. Unfortunately,
    it was removed from public downloads by the authors, but still can be found on
    the Internet with these file details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Install Copssh into any Windows instance using the default installation parameters
    and copy the installed files somewhere for later usage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In VirtualBox, create a virtual machine instance using the IDE storage controller
    and the default values for other settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set up networking as described in the *Installing VirtualBox* recipe in this
    chapter and boot the virtual machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a user with the same name on the host machine and login under this user
    (we will use the name `packt`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download Windows Server 2003 Resource Kit Tools from the Microsoft website and
    extract `ntrights`, `instsrv`, and `srvany` utilities from it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the extracted Copssh files into the `c:\ssh` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set up users and rights for the SSH service using the following script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Generate internal Copssh login and password information, and register Copssh
    as a Windows service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Install the Cygwin tools and run the bash shell.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set up the client keys:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set up the server keys:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set up the host client public key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set up the host key fingerprint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check whether the connection from host to guest and back works seamlessly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Register the Windows service that will be used to start the build process using
    the `instsrv` and `srvany` utilities:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Configure the service to avoid starting automatically on OS boot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Complete the manual build of OpenJDK using the *Building OpenJDK 8 on Windows
    7 SP1* recipe from [Chapter 4](ch04.html "Chapter 4. Building OpenJDK 8"), *Building
    OpenJDK 8*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we created a virtual machine instance with Windows and configured
    the SSH server to enable seamless automated connections to it.
  prefs: []
  type: TYPE_NORMAL
- en: Binaries of Copssh SSH server Version 3.1.4 were released by the authors as
    free software under the terms of GNU General Public License Version 3\. This means
    that we can publish or use unchanged binaries for any purposes without additional
    licensing limitations.
  prefs: []
  type: TYPE_NORMAL
- en: Copssh uses the Cygwin environment and the OpenSSH server under the hood. It
    also provides integration with the Windows user rights system.
  prefs: []
  type: TYPE_NORMAL
- en: Authorization roles given to the SvcCOPSSH user are required to support the
    SSH key authentication.
  prefs: []
  type: TYPE_NORMAL
- en: We used Cygwin to set up key files to support the proper setting of Cygwin file
    rights.
  prefs: []
  type: TYPE_NORMAL
- en: Copssh uses parts of the old version of the Cygwin environment and we need the
    additional full Cygwin installation for the OpenJDK build process. Different Cygwin
    versions running on the same machine might interfere with each other causing errors.
    Although during heavy use of such a setup, I never observed any problems, it is
    better to keep this point in mind for instances of cryptic Cygwin/Copssh errors/crashes.
  prefs: []
  type: TYPE_NORMAL
- en: Two additional Windows users for the SSH server (sshd and SvcCOPSSH) are used
    internally by Copssh.
  prefs: []
  type: TYPE_NORMAL
- en: The `ntrighs` utility was used to assign additional roles to the SvcCOPSSH user.
    This utility is not officially supported in the newer versions of Windows but
    should work fine anyway.
  prefs: []
  type: TYPE_NORMAL
- en: Windows service registration will be required for automated builds to start
    the actual build process over an SSH connection. For a proper environment setup,
    the build process on Windows should be started from the `cmd.exe` shell (usually
    running a batch file). It cannot be started directly from the SSH session that
    works in the guest Windows machine inside the Cygwin environment. The `instsrv`
    and `ntrighs` utilities allowed us to create a Windows service that will run the
    batch file (that in turn will start the actual build process) on a path preconfigured
    in the registry. This `packt_build` service can be started from the SSH session
    using the `net start` command, effectively starting the build process.
  prefs: []
  type: TYPE_NORMAL
- en: The Manual build was done on this VM to ensure that the environment setup was
    correct.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Other SSH servers can be used in theory, although I am not aware of other free
    (as in "free speech") SSH server implementations for Windows, which support key
    authentication.
  prefs: []
  type: TYPE_NORMAL
- en: Other protocols/tools can be used for interaction between the host and guest
    machine instead of OpenSSH.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Building OpenJDK 8 on Windows 7 SP1* recipe from [Chapter 4](ch04.html
    "Chapter 4. Building OpenJDK 8"), *Building OpenJDK 8*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Installing Cygwin for Windows builds* recipe from [Chapter 2](ch02.html
    "Chapter 2. Building OpenJDK 6"), *Building OpenJDK 6*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Installing VirtualBox* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Preparing SSH keys* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Oracle VirtualBox user manual at [https://www.virtualbox.org/manual/UserManual.html](https://www.virtualbox.org/manual/UserManual.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Copssh website at [https://www.itefix.net/copssh](https://www.itefix.net/copssh)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating builds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe joins together all the previous recipes in this chapter. Prepared
    virtual machine images and SSH with key authentication will allow us to build
    OpenJDK in fully automated mode using simple bash scripts without additional tools.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will require a Linux or Mac OS host machine running.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following procedure will help us to prepare the Windows virtual machine:'
  prefs: []
  type: TYPE_NORMAL
- en: Prepare SSH keys as described in the *Preparing SSH keys* recipe in this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set up the VirtualBox installation and its network settings as described in
    the *Installing VirtualBox* recipe in this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Prepare the virtual machine images as described in the previous recipes in this
    chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For each VM image, prepare a list of environment variables, which will be used
    by the build script (for example, Windows):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add the snippets from the following steps (steps 6 to 12) to the main build
    script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a virtual machine instance using the `VBoxManage` utility:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start up the virtual machine instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enable remote logging back to the host machine over SSH:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Copy the OpenJDK sources into the build VM and start the build:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Poll the build machine periodically looking for the `build_finished.flag` file
    that should be created after the build is finished:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Copy the build results, stop the logger, shut down the virtual machine instance,
    and unregister it from VirtualBox:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To start the build with the chosen virtual machine image, use the following
    commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After the build is finished, the OpenJDK binaries will be copied back to the
    host machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We use the low-level VBoxManage tool to manipulate virtual machine instances
    for better control over this process.
  prefs: []
  type: TYPE_NORMAL
- en: To ensure that the virtual machine instance actually starts, we poll it periodically
    over SSH and stop polling after the first successful connection.
  prefs: []
  type: TYPE_NORMAL
- en: For remote logging, we run the `tail -f` process on the build machine that sends
    its output back to the host machine immediately over SSH. We start this process
    with a connection from the host machine in the background using the `nohup` utility
    and write the host process `pid` to the `.pid` file to kill the process after
    the build.
  prefs: []
  type: TYPE_NORMAL
- en: We use `scp` to copy sources to a build machine and commands over SSH to decompress
    the sources and start the build.
  prefs: []
  type: TYPE_NORMAL
- en: After the build is started, we poll the build machine periodically over SSH
    to look for the `build_finished.flag` file that should be created by the build
    script on the build machine.
  prefs: []
  type: TYPE_NORMAL
- en: After the build is finished, we copy OpenJDK binaries back to the host machine
    and shut down the virtual machine instance gracefully before unregistering it.
  prefs: []
  type: TYPE_NORMAL
- en: Different virtual machine configuration and environment options are listed in
    the `.env` file for each virtual machine image. We use the "dot first" syntax
    to import variables from the `env` file to the current shell. This allows us to
    use a generic build script for all virtual machine images.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe can be seen as a basic example of build automation. Different commands,
    tools, and protocols can be used to achieve the same goal.
  prefs: []
  type: TYPE_NORMAL
- en: The `build_finished.flag` file (with custom content) can also be used to end
    the build prematurely after the error.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Installing VirtualBox* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Preparing SSH keys* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Preparing VirtualBox machines with Linux* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Preparing VirtualBox machines with Mac OS X* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Preparing VirtualBox machines with Windows* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 4](ch04.html "Chapter 4. Building OpenJDK 8"), *Building OpenJDK 8*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Oracle VirtualBox user manual at [https://www.virtualbox.org/manual/UserManual.html](https://www.virtualbox.org/manual/UserManual.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building cross-platform installers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When cloud services became the ubiquitous way to install desktop software, classic
    GUI installers became almost obsolete. Cloud package repositories or stores can
    be much more convenient to install and, in the first place, update the desktop
    application.
  prefs: []
  type: TYPE_NORMAL
- en: At the same time, GUI installers are still widely used for various free and
    commercial applications. Especially for cross-platform applications, GUI installers
    should show the same behavior on all supported platforms despite not being fully
    native on those platforms. Some applications require complex environment changes
    at the time of installation, for example, registering themselves as Windows services
    or setting environment variables.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will prepare a cross-platform installer for OpenJDK that
    will work on all supported platforms (Windows, Linux, and Mac OS X). We will use
    a popular open-source installation tool, `IzPack`, written in Java.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe we will require the OpenJDK binaries (to wrap into the installer).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following procedure will help us in preparing the installer:'
  prefs: []
  type: TYPE_NORMAL
- en: Download IzPack compiler Version 4.3.5 from the IzPack website ([http://izpack.org/](http://izpack.org/))
    and install it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the sample installation config file from the documentation section
    of the Izpack website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move the `jre` directory from the OpenJDK image one level up, next to the `openjdk`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the `jre` directory to the installer configuration as a "loose" pack using
    the following configuration snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `openjdk` directory (that now does not contain JRE) as a normal pack:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Adjust labels, GUI forms, locale, and icons as you like.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the IzPack compiler:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Put the generated `install.jar` and `jre` directory in the `openjdk-installer`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the bash/batch script to the `openjdk-installer` directory which will allow
    us to run the installer using the relative path to the `jre` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Compress the `openjdk-installer` directory—it now contains the OpenJDK installer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The main feature of our installer is that the installer itself runs on the same
    version of Java that it will install. The `loose="true"` configuration in the
    JRE pack instructs the installer to find this pack on a relative path outside
    of the main installation `.jar` file, without duplicating the contents of the
    `jre` directory.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The IzPack installer supports a lot of configuration options, we highlighted
    only the basic one in this recipe. Besides the GUI and installation forms customizations,
    the one feature that can be useful, especially for OpenJDK, is running scripts
    at installation time. We can prepare scripts to adjust the environment and add
    them to the corresponding packs using the executable configuration element. On
    simple Unix-like operating systems, such scripts can simply append the `PATH`
    variable changes to `~/.bashrc` or `~/.bash_profile` files. On Windows, utilities
    such as `pathman`, `setx`, and `reg` can be used to adjust the environment variables
    or the Windows Registry.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of running scripts at the time of installation, you can extend the IzPack
    itself (adding new forms, and so on) and perform environment registration directly
    from Java code.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. Building OpenJDK 6"), *Building OpenJDK 6*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.html "Chapter 3. Building OpenJDK 7"), *Building OpenJDK 7*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 4](ch04.html "Chapter 4. Building OpenJDK 8"), *Building OpenJDK 8*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The IzPack installer website at [http://izpack.org/](http://izpack.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
