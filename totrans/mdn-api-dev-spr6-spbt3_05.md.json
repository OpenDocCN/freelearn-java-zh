["```java\npackage org.reactivestreams;// T – type of element Publisher sends\npublic interface Publisher<T> {\n  public void subscribe(Subscriber<? super T> s); }\n```", "```java\npackage org.reactivestreams;// T – type of element Publisher sends\npublic interface Subscriber<T> {\n  public void onSubscribe(Subscription s);\n  public void onNext(T t);\n  public void onError(Throwable t);\n  public void onComplete();\n}\n```", "```java\npackage org.reactivestreams;public interface Subscription {\n  public void request(long n);\n  public void cancel();\n}\n```", "```java\npackage org.reactivestreams;public interface Processor<T, R>\n  extends Subscriber<T>, Publisher<R> {\n}\n```", "```java\nFlux<Integer> fluxInt = Flux.just(1, 10, 100, 1000).log();fluxInt.reduce(Integer::sum)\n  .subscribe(sum ->\n      System.out.printf(\"Sum is: %d\", sum));\n```", "```java\n11:00:38.074 [main] INFO reactor.Flux.Array.1 - | onSubscribe([Synchronous Fuseable] FluxArray.ArraySubscription)11:00:38.074 [main] INFO reactor.Flux.Array.1 - |request(unbounded)\n11:00:38.084 [main] INFO reactor.Flux.Array.1 - | onNext(1)\n11:00:38.084 [main] INFO reactor.Flux.Array.1 - | onNext(10)\n11:00:38.084 [main] INFO reactor.Flux.Array.1 - | onNext(100)\n11:00:38.084 [main] INFO reactor.Flux.Array.1 - | onNext(1000)\n11:00:38.084 [main] INFO reactor.Flux.Array.1 - | onComplete() Sum is: 1111\nProcess finished with exit code 0\n```", "```java\npublic Product findById(UUID id);public List<Product> getAll();\n```", "```java\nPublic Mono<Product> findById(UUID id);public Flux<Product> getAll();\n```", "```java\nFlux<Integer> fluxInt = Flux.just(1, 10, 100).log();fluxInt.reduce(Integer::sum).subscribe(sum ->       System.out.printf(\"Sum is: %d\\n\", sum));\nfluxInt.reduce(Integer::max).subscribe(max ->   System.out.printf(\"Maximum is: %d\", max));\n```", "```java\n11:23:35.060 [main] INFO reactor.Flux.Array.1 - | onSubscribe([Synchronous Fuseable] FluxArray.ArraySubscription)11:23:35.060 [main] INFO reactor.Flux.Array.1 - | request(unbounded)\n11:23:35.060 [main] INFO reactor.Flux.Array.1 - | onNext(1)\n11:23:35.060 [main] INFO reactor.Flux.Array.1 - | onNext(10)\n11:23:35.060 [main] INFO reactor.Flux.Array.1 - | onNext(100)\n11:23:35.060 [main] INFO reactor.Flux.Array.1 - | onComplete()\nSum is: 111\n11:23:35.076 [main] INFO reactor.Flux.Array.1 - | onSubscribe([Synchronous Fuseable] FluxArray.ArraySubscription)\n11:23:35.076 [main] INFO reactor.Flux.Array.1 - | request(unbounded)\n11:23:35.076 [main] INFO reactor.Flux.Array.1 - | onNext(1)\n11:23:35.076 [main] INFO reactor.Flux.Array.1 - | onNext(10)\n11:23:35.076 [main] INFO reactor.Flux.Array.1 - | onNext(100)\n11:23:35.076 [main] INFO reactor.Flux.Array.1 - | onComplete()\nMaximum is: 100\n```", "```java\nFlux<Integer> fluxInt = Flux.just  (1, 10, 100).log().cache();\nfluxInt.reduce(Integer::sum).subscribe(sum ->   System.out.printf(\"Sum is: %d\\n\", sum));\nfluxInt.reduce(Integer::max).subscribe(max ->   System.out.printf(\"Maximum is: %d\", max));\n```", "```java\n11:29:25.665 [main] INFO reactor.Flux.Array.1 - | onSubscribe([Synchronous Fuseable] FluxArray.ArraySubscription)11:29:25.665 [main] INFO reactor.Flux.Array.1 - | request(unbounded)\n11:29:25.665 [main] INFO reactor.Flux.Array.1 - | onNext(1)\n11:29:25.665 [main] INFO reactor.Flux.Array.1 - | onNext(10)\n11:29:25.665 [main] INFO reactor.Flux.Array.1 - | onNext(100)\n11:29:25.665 [main] INFO reactor.Flux.Array.1 - | onComplete()\nSum is: 111\nMaximum is: 100\n```", "```java\n        public interface HttpHandler {  Mono<Void> handle(ServerHttpRequest request,     ServerHttpResponse response);}\n        ```", "```java\n@RestControllerpublic class OrderController {\n  @RequestMapping(value = \"/api/v1/orders\",  method =\n    RequestMethod.POST)\n  public ResponseEntity<Order> addOrder(\n           @RequestBody NewOrder newOrder){\n    // …\n  }\n  @RequestMapping(value = \"/api/v1/orders/{id}\", method =\n     RequestMethod.GET)\n  public ResponseEntity<Order>getOrderById(\n    @PathVariable(\"id\") String id){\n    // …\n  }\n}\n```", "```java\nimport static org.springframework.http.MediaType.  APPLICATION_JSON;\nimport static org.springframework.web.reactive.\n  function.server. RequestPredicates.*;\nimport staticorg.springframework.\nweb.reactive.function.server. RouterFunctions.route;\n// ...\n  OrderRepository repository = ...\n  OrderHandler handler = new OrderHandler(repository);\n  RouterFunction<ServerResponse> route = route()\n    .GET(\"/v1/api/orders/{id}\",\n          accept(APPLICATION_JSON),\n          handler::getOrderById)\n    .POST(\"/v1/api/orders\", handler::addOrder)\n    .build();\n  public class OrderHandler {\n    public Mono<ServerResponse> addOrder\n       (ServerRequest req){\n      // ...\n    }\n    public Mono<ServerResponse> getOrderById(\n       ServerRequest req) {\n    // ...\n    }\n  }\n```", "```java\npublic class OrderHandler {  public Mono<ServerResponse> addOrder(\n     ServerRequest req){\n    Mono<NewOrder> order = req.bodyToMono(NewOrder.class);\n    return ok()\n      .build(repository.save(toEntity(order)));\n  }\n  public Mono<ServerResponse> getOrderById(\n      ServerRequest req) {\n    String orderId = req.pathVariable(\"id\");\n    return repository\n      .getOrderById(UUID.fromString(orderId))\n      .flatMap(order -> ok()\n          .contentType(APPLICATION_JSON)\n          .bodyValue(toModel(order)))\n      .switchIfEmpty(ServerResponse.notFound()\n      .build());\n  }\n}\n```", "```java\n{  \"library\": \"spring-boot\",\n  \"dateLibrary\": \"java8\",\n  \"hideGenerationTimestamp\": true,\n  \"modelPackage\": \"com.packt.modern.api.model\",\n  \"apiPackage\": \"com.packt.modern.api\",\n  \"invokerPackage\": \"com.packt.modern.api\",\n  \"serializableModel\": true,\n  \"useTags\": true,\n  \"useGzipFeature\" : true,\n  \"reactive\": true,\n  \"interfaceOnly\": true,\n  …\n  …\n}\n```", "```java\n$ gradlew clean generateSwaggerCode\n```", "```java\n@Operation(  operationId = \"addOrder\",\n  summary = \"Creates a new order for the …\",\n  tags = { \"order\" },\n  responses = {\n    @ApiResponse(responseCode = \"201\",\n      description = \"Order added successfully\",\n      content = {\n        @Content(mediaType = \"application/xml\",\n          schema = @Schema(\n            implementation = Order.class)),\n        @Content(mediaType = \"application/json\",\n          schema = @Schema(\n            implementation = Order.class))\n      }),\n      @ApiResponse(responseCode = \"406\",\n        description = \"If payment not authorized\")\n  }\n)\n@RequestMapping(\n  method = RequestMethod.POST,\n  value = \"/api/v1/orders\",\n  produces = { \"application/xml\",\n               \"application/json\" },\n  consumes = { \"application/xml\",\n               \"application/json\" }\n)\ndefault Mono<ResponseEntity<Order>> addOrder(\n @Parameter(name = \"NewOrder\", description =\n     \"New Order Request object\")\n     @Valid @RequestBody(required = false)\n          Mono<NewOrder> newOrder,\n @Parameter(hidden = true)\n  final ServerWebExchange exg) throws Exception {\n```", "```java\nimplementation 'org.springframework.boot:  spring-boot-starter-webflux'\ntestImplementation('org.springframework.boot:\n  spring-boot-starter-test')\ntestImplementation 'io.projectreactor:reactor-test'\n```", "```java\nimplementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'implementation 'com.h2database:h2'\nruntimeOnly 'io.r2dbc:r2dbc-h2'\n```", "```java\n.flatMap(card -> {  if (Objects.isNull(card.getId())) {\n    return service.registerCard(mono)\n      .map(ce -> status(HttpStatus.CREATED)\n        .body(assembler.entityToModel(\n           ce, exchange)));\n  } else {\n    return Mono.error(() -> new\n      CardAlreadyExistsException(\n        \" for user with ID - \" + d.getId()));\n  }\n})\n```", "```java\nMono<List<String>> monoIds =  itemRepo.findByCustomerId( customerId)\n    .switchIfEmpty(Mono.error(new\n       ResourceNotFoundException(\". No items\n         found in Cart of customer with Id - \" +\n           customerId)))\n    .map(i -> i.getId().toString())\n    .collectList().cache();\n```", "```java\npublic class ResourceNotFoundException     extends RuntimeException\n```", "```java\nreturn service.getCartByCustomerId(customerId)  .map(cart -> assembler\n    .itemfromEntities(cart.getItems().stream()\n      .filter(i -> i.getProductId().toString()\n       .equals(itemId.trim())).collect(toList()))\n      .get(0)).map(ResponseEntity::ok)\n  .onErrorReturn(notFound().build())\n```", "```java\n@Componentpublic class ApiErrorAttributes\n  extends DefaultErrorAttributes {\n  private HttpStatus status =\n      HttpStatus.INTERNAL_SERVER_ERROR;\n  private String message =\n     ErrorCode.GENERIC_ERROR.getErrMsgKey();\n  @Override\n  public Map<String, Object>\n    getErrorAttributes( ServerRequest request,\n       ErrorAttributeOptions options) {\n    var attributes =\n      super.getErrorAttributes(request, options);\n    attributes.put(\"status\", status);\n    attributes.put(\"message\", message);\n    attributes.put(\"code\", ErrorCode.\n      GENERIC_ERROR.getErrCode());\n    return attributes;\n  }\n  // Getters and setters\n}\n```", "```java\n@Component@Order(-2)\npublic class ApiErrorWebExceptionHandler extends\n  AbstractErrorWebExceptionHandler {\n public ApiErrorWebExceptionHandler(\n    ApiErrorAttributes errorAttributes,\n    ApplicationContext appCon,\n    ServerCodecConfigurer serverCodecConfigurer){\n  super(errorAttributes,\n     new WebProperties().getResources(),appCon);\n  super.setMessageWriters(\n     serverCodecConfigurer.getWriters());\n  super.setMessageReaders(\n     serverCodecConfigurer.getReaders());\n }\n @Override\n protected RouterFunction<ServerResponse>\n   getRoutingFunction(ErrorAttributes errA) {\n   return RouterFunctions.route(\n     RequestPredicates.all(),\n       this::renderErrorResponse);\n}\n```", "```java\nprivate Mono<ServerResponse> renderErrorResponse(    ServerRequest request) {\n  Map<String, Object> errorPropertiesMap =\n     getErrorAttributes(request,\n      ErrorAttributeOptions.defaults());\n  Throwable throwable = (Throwable) request\n     .attribute(\"org.springframework.boot.web\n                .reactive.error\n                .DefaultErrorAttributes.ERROR\")\n     .orElseThrow(() -> new IllegalStateException\n     (\"Missing exception attribute in ServerWebExchange\"));\n  ErrorCode errorCode = ErrorCode.GENERIC_ERROR;\n  if (throwable instanceof\n      IllegalArgumentException || throwable\n      instanceof DataIntegrityViolationException\n      || throwable instanceof\n      ServerWebInputException) {\n     errorCode = ILLEGAL_ARGUMENT_EXCEPTION;\n  } else if (throwable instanceof\n      CustomerNotFoundException) {\n    errorCode = CUSTOMER_NOT_FOUND;\n  } else if (throwable instanceof\n      ResourceNotFoundException) {\n    errorCode = RESOURCE_NOT_FOUND;\n  } // other else-if\n  // …\n}\n```", "```java\nswitch (errorCode) {  case ILLEGAL_ARGUMENT_EXCEPTION ->{errorPropertiesMap.put\n    (\"status\", HttpStatus.BAD_REQUEST);\n    errorPropertiesMap.put(\"code\",\n       ILLEGAL_ARGUMENT_EXCEPTION.getErrCode());\n    errorPropertiesMap.put(\"error\",\n       ILLEGAL_ARGUMENT_EXCEPTION);\n    errorPropertiesMap.put(\"message\", String\n      .format(\"%s %s\",\n       ILLEGAL_ARGUMENT_EXCEPTION.getErrMsgKey(),\n       throwable.getMessage()));\n    return ServerResponse.status(\n          HttpStatus.BAD_REQUEST)\n        .contentType(MediaType.APPLICATION_JSON)\n        .body(BodyInserters.fromValue(\n          errorPropertiesMap));\n  }\n  case CUSTOMER_NOT_FOUND -> {\n    errorPropertiesMap.put(\"status\",\n       HttpStatus.NOT_FOUND);\n    errorPropertiesMap.put(\"code\",\n       CUSTOMER_NOT_FOUND.getErrCode());\n    errorPropertiesMap.put(\"error\",\n       CUSTOMER_NOT_FOUND);\n    errorPropertiesMap.put(\"message\", String\n       .format(\"%s %s\",\n        CUSTOMER_NOT_FOUND.getErrMsgKey(),\n        throwable.getMessage()));\n    return ServerResponse.status(\n         HttpStatus.NOT_FOUND)\n        .contentType(MediaType.APPLICATION_JSON)\n        .body(BodyInserters.fromValue(\n          errorPropertiesMap));\n  }\n  case RESOURCE_NOT_FOUND -> {\n    // rest of the code …\n}\n```", "```java\npublic interface HateoasSupport {  default UriComponentsBuilder\n     getUriComponentBuilder(@Nullable\n            ServerWebExchange exchange) {\n    if (exchange == null) {\n      return UriComponentsBuilder.fromPath(\"/\");\n    }\n    ServerHttpRequest request = exchange.getRequest();\n    PathContainer contextPath = request.getPath().\n      contextPath();\n    return UriComponentsBuilder\n          .fromHttpRequest(request)\n          .replacePath(contextPath.toString())\n          .replaceQuery(\"\");\n  }\n}\n```", "```java\n@Componentpublic class AddressRepresentationModelAssembler\n  implements ReactiveRepresentationModelAssembler\n      <AddressEntity, Address>, HateoasSupport {\n  private static String serverUri = null;\n  private String getServerUri(\n        @Nullable ServerWebExchange exch) {\n    if (Strings.isBlank(serverUri)) {\n      serverUri = getUriComponentBuilder\n        (exch).toUriString();\n    }\n    return serverUri;\n  }\n```", "```java\n@Overridepublic Mono<Address> toModel(AddressEntity entity,\n  ServerWebExchange exch) {\n  return Mono.just(entityToModel(entity, exch));\n}\npublic Address entityToModel(AddressEntity entity,\n  ServerWebExchange exch) {\n  Address resource = new Address();\n  if(Objects.isNull(entity)) {\n    return resource;\n  }\n  BeanUtils.copyProperties(entity, resource);\n  resource.setId(entity.getId().toString());\n  String serverUri = getServerUri(exchange);\n  resource.add(Link.of(String.format(\n      \"%s/api/v1/addresses\", serverUri))\n      .withRel(\"addresses\"));\n  resource.add(Link.of(String.format(\n      \"%s/api/v1/addresses/%s\",serverUri,\n      entity.getId())).withSelfRel());\n  return resource;\n}\n```", "```java\npublic Flux<Address> toListModel(         Flux<AddressEntity> ent,\n         ServerWebExchange exchange) {\n  if (Objects.isNull(ent)) {\n    return Flux.empty();\n  }\n  return Flux.from(ent.map(e ->\n            entityToModel(e, exchange)));\n}\n```", "```java\n@Table(\"ecomm.orders\")public class OrderEntity {\n  @Id\n  @Column(\"id\")\n  private UUID id;\n  @Column(\"customer_id\")\n  private UUID customerId;\n  @Column(\"address_id\")\n  private UUID addressId;\n  @Column(\"card_id\")\n  private UUID cardId;\n  @Column(\"order_date\")\n  private Timestamp orderDate;\n  // other fields mapped to table columns\n  private UUID cartId;\n  private UserEntity userEntity;\n  private AddressEntity addressEntity;\n  private PaymentEntity paymentEntity;\n  private List<ShipmentEntity> shipments = new ArrayList<>();\n  // other entities fields and getters/setters\n```", "```java\n@Repositorypublic interface OrderRepository extends\n   ReactiveCrudRepository<OrderEntity, UUID>,\n      OrderRepositoryExt {\n  @Query(\"select o.* from ecomm.orders o join\n           ecomm.\\\"user\\\" u on o.customer_id =\n           u.id where u.id = :cusId\")\n  Flux<OrderEntity> findByCustomerId(UUID cusId);\n}\n```", "```java\npublic interface OrderRepositoryExt {  Mono<OrderEntity> insert(Mono<NewOrder> m);\n  Mono<OrderEntity> updateMapping(OrderEntity e);\n}\n```", "```java\n@Repositorypublic class OrderRepositoryExtImpl implements OrderRepositoryExt {\n  private ConnectionFactory connectionFactory;\n  private DatabaseClient dbClient;\n  private ItemRepository itemRepo;\n  private CartRepository cartRepo;\n  private OrderItemRepository oiRepo;\n  public OrderRepositoryExtImpl(ConnectionFactory\n     connectionFactory, ItemRepository itemRepo,\n     OrderItemRepository oiRepo, CartRepository\n     cartRepo, DatabaseClient dbClient) {\n    this.itemRepo = itemRepo;\n    this.connectionFactory = connectionFactory;\n    this.oiRepo = oiRepo;\n    this.cartRepo = cartRepo;\n    this.dbClient = dbClient;\n  }\n```", "```java\nprivate OrderEntity toEntity(NewOrder order, CartEntity c) {  OrderEntity orderEntity = new OrderEntity();\n  BeanUtils.copyProperties(order, orderEntity);\n  orderEntity.setUserEntity(c.getUser());\n  orderEntity.setCartId(c.getId());\n  orderEntity.setItems(c.getItems())\n     .setCustomerId(UUID.fromString(order.getCustomerId()))\n     .setAddressId(UUID.fromString\n       (order.getAddress().getId()))\n     .setOrderDate(Timestamp.from(Instant.now()))\n     .setTotal(c.getItems().stream()\n     .collect(Collectors.toMap(k ->\n       k.getProductId(), v ->\n         BigDecimal.valueOf(v.getQuantity())\n         .multiply(v.getPrice())))\n     .values().stream().reduce(\n      BigDecimal::add).orElse(BigDecimal.ZERO));\n  return orderEntity;\n}\n```", "```java\nclass OrderMapper implements BiFunction<Row,Object,  OrderEntity> {\n  @Override\n  public OrderEntity apply(Row row, Object o) {\n    OrderEntity oe = new OrderEntity();\n    return oe.setId(row.get(\"id\", UUID.class))\n        .setCustomerId(\n            row.get(\"customer_id\", UUID.class))\n        .setAddressId(\n            row.get(\"address_id\", UUID.class))\n        .setCardId(\n            row.get(\"card_id\", UUID.class))\n        .setOrderDate(Timestamp.from(\n            ZonedDateTime.of(\n           (LocalDateTime) row.get(\"order_date\"),\n            ZoneId.of(\"Z\")).toInstant()))\n        .setTotal(\n            row.get(\"total\", BigDecimal.class))\n        .setPaymentId(\n            row.get(\"payment_id\", UUID.class))\n        .setShipmentId(\n            row.get(\"shipment_id\", UUID.class))\n        .setStatus(StatusEnum.fromValue(\n            row.get(\"status\", String.class)));\n  }\n}\n```", "```java\npublic Mono<OrderEntity> updateMapping(OrderEntity  orderEntity) {\n  return oiRepo.saveAll(orderEntity.getItems()\n    .stream().map(i -> new OrderItemEntity()\n      .setOrderId(orderEntity.getId())\n      .setItemId(i.getId())).collect(toList()))\n      .then(\n        itemRepo.deleteCartItemJoinById(\n           orderEntity.getItems().stream()\n             .map(i -> i.getId())\n             .collect(toList()),\n           orderEntity.getCartId())\n             .then(Mono.just(orderEntity))\n      );\n}\n```", "```java\n@Overridepublic Mono<OrderEntity> insert(Mono<NewOrder> mdl) {\n  AtomicReference<UUID> orderId =new AtomicReference<>();\n  Mono<List<ItemEntity>> itemEntities =\n       mdl.flatMap(m ->\n          itemRepo.findByCustomerId(\n            UUID.fromString(m.getCustomerId()))\n          .collectList().cache());\n  Mono<CartEntity> cartEntity =\n       mdl.flatMap(m ->\n          cartRepo.findByCustomerId(\n            UUID.fromString(m.getCustomerId())))\n         .cache();\n  cartEntity = Mono.zip(cartEntity, itemEntities,\n       (c, i) -> {\n         if (i.size() < 1) {\n          throw new ResourceNotFoundException(\n          String.format(\"There is no item found\n           in customer's (ID:%s) cart.\",\n             c.getUser().getId()));\n       }\n    return c.setItems(i);\n  }).cache();\n```", "```java\nR2dbcEntityTemplate template = new R2dbcEntityTemplate  (connectionFactory);\nMono<OrderEntity> orderEntity = Mono.zip(mdl,\n   cartEntity, (m, c) -> toEntity(m, c)).cache();\nreturn orderEntity.flatMap(oe -> dbClient.sql(\"\"\"\n    INSERT INTO ecomm.orders (address_id,\n    card_id, customer_id, order_date, total,\n    status) VALUES($1, $2, $3, $4, $5, $6)\n    \"\"\")\n    .bind(\"$1\", Parameter.fromOrEmpty(\n       oe.getAddressId(), UUID.class))\n    .bind(\"$2\", Parameter.fromOrEmpty(\n       oe.getCardId(), UUID.class))\n    .bind(\"$3\", Parameter.fromOrEmpty(\n       oe.getCustomerId(), UUID.class))\n    .bind(\"$4\",OffsetDateTime.ofInstant(\n       oe.getOrderDate().toInstant(), ZoneId.of(\n        \"Z\")).truncatedTo(ChronoUnit.MICROS))\n    .bind(\"$5\", oe.getTotal())\n    .bind(\"$6\", StatusEnum.CREATED.getValue())\n      .map(new OrderMapper()::apply).one())\n    .then(orderEntity.flatMap(x ->\n       template.selectOne(\n        query(where(\"customer_id\").is(\n           x.getCustomerId()).and(\"order_date\")\n            .greaterThanOrEquals(OffsetDateTime.\n            ofInstant(x.getOrderDate().\n              toInstant(),ZoneId.of(\"Z\"))\n              .truncatedTo(ChronoUnit.MICROS))),\n        OrderEntity.class).map(t -> x.setId(\n             t.getId()).setStatus(t.getStatus()))\n    ));\n```", "```java\npublic interface OrderService {  Mono<OrderEntity> addOrder(@Valid Mono<NewOrder>\n    newOrder);\n  Mono<OrderEntity> updateMapping(@Valid OrderEntity\n    orderEntity);\n  Flux<OrderEntity> getOrdersByCustomerId(@NotNull @Valid\n    String customerId);\n  Mono<OrderEntity> getByOrderId(String id);\n}\n```", "```java\n@Overridepublic Mono<OrderEntity> addOrder(@Valid Mono<NewOrder>\n  newOrder) {\n  return repository.insert(newOrder);\n}\n@Override\npublic Mono<OrderEntity> updateMapping(\n  @Valid OrderEntity orderEntity) {\n  return repository.updateMapping(orderEntity);\n}\n```", "```java\nprivate BiFunction<OrderEntity, List<ItemEntity>, OrderEntity> biOrderItems = (o, fi) -> o    .setItems(fi);\n@Override\npublic Flux<OrderEntity> getOrdersByCustomerId(\n   String customerId) {\n return repository.findByCustomerId(UUID\n  .fromString(customerId)).flatMap(order ->\n   Mono.just(order)\n    .zipWith(userRepo.findById(order.getCustomerId()))\n    .map(t -> t.getT1().setUserEntity(t.getT2()))\n    .zipWith(addRepo.findById(order.getAddressId()))\n    .map(t ->\n          t.getT1().setAddressEntity(t.getT2()))\n    .zipWith(cardRepo.findById(\n       order.getCardId() != null\n       ? order.getCardId() : UUID.fromString(\n         \"0a59ba9f-629e-4445-8129-b9bce1985d6a\"))\n              .defaultIfEmpty(new CardEntity()))\n    .map(t -> t.getT1().setCardEntity(t.getT2()))\n    .zipWith(itemRepo.findByCustomerId(\n        order.getCustomerId()).collectList(),biOrderItems)\n  );\n}\n```", "```java\n@Overridepublic Mono<OrderEntity> getByOrderId(String id) {\n  return repository.findById(UUID.fromString(id))\n   .flatMap(order ->\n     Mono.just(order)\n      .zipWith(userRepo.findById(order.getCustomerId()))\n      .map(t -> t.getT1().setUserEntity(t.getT2()))\n      .zipWith(addRepo.findById(order.getAddressId()))\n      .map(t -> t.getT1().setAddressEntity(t.getT2()))\n      .zipWith(cardRepo.findById(order.getCardId()))\n      .map(t -> t.getT1().setCardEntity(t.getT2()))\n      .zipWith(itemRepo.findByCustomerId\n         (order.getCustomerId()).collectList()\n            ,biOrderItems)\n  );\n}\n```", "```java\nprivate BiFunction<CartEntity, List<ItemEntity>, CartEntity> cartItemBiFun = (c, i) -> c    .setItems(i);\n@Override\npublic Mono<CartEntity> getCartByCustomerId(String\n  customerId) {\n  Mono<CartEntity> cart = repository.findByCustomerId(\n     UUID.fromString(customerId))\n      .subscribeOn(Schedulers.boundedElastic());\n  Mono<UserEntity> user = userRepo.findById(\n     UUID.fromString(customerId))\n      .subscribeOn(Schedulers.boundedElastic());\n  cart = Mono.zip(cart, user, cartUserBiFun);\n  Flux<ItemEntity> items =\n      itemRepo.findByCustomerId(\n         UUID.fromString(customerId))\n      .subscribeOn(Schedulers.boundedElastic());\n  return Mono.zip(cart, items.collectList(),\n     cartItemBiFun);\n}\n```", "```java\n@RestControllerpublic class OrderController implements OrderApi {\n  private final OrderRepresentationModelAssembler\n    assembler;\n  private OrderService service;\n  public OrderController(OrderService service,\n   OrderRepresentationModelAssembler assembler) {\n     this.service = service;\n     this.assembler = assembler;\n  }\n```", "```java\n@Overridepublic Mono<ResponseEntity<Order>>\n   addOrder(@Valid Mono<NewOrder> newOrder,\n      ServerWebExchange exchange) {\n  return service.addOrder(newOrder.cache())\n    .zipWhen(x -> service.updateMapping(x))\n    .map(t -> status(HttpStatus.CREATED)\n      .body(assembler.entityToModel(\n         t.getT2(), exchange)))\n    .defaultIfEmpty(notFound().build());\n}\n```", "```java\n@Overridepublic Mono<ResponseEntity<Flux<Order>>>\n   getOrdersByCustomerId(@NotNull\n     @Valid String customerId, ServerWebExchange\n       exchange) {\n  return Mono\n     .just(ok(assembler.toListModel(service\n       .getOrdersByCustomerId(customerId),\n         exchange)));\n}\n@Override\npublic Mono<ResponseEntity<Order>>\n   getByOrderId(String id, ServerWebExchange\n     exchange) {\n  return service.getByOrderId(id).map(o ->\n     assembler.entityToModel(o, exchange))\n      .map(ResponseEntity::ok)\n      .defaultIfEmpty(notFound().build());\n}\n```", "```java\n@Componentpublic class H2ConsoleComponent {\n    private Server webServer;\n    @Value(\"${modern.api.h2.console.port:8081}\")\n    Integer h2ConsolePort;\n    @EventListener(ContextRefreshedEvent.class)\n    public void start()\n       throws java.sql.SQLException {\n      this.webServer = org.h2.tools.Server\n         .createWebServer(\"-webPort\",\n           h2ConsolePort.toString(), \"-\n             tcpAllowOthers\").start();\n    }\n    @EventListener(ContextClosedEvent.class)\n    public void stop() {\n      this.webServer.stop();\n    }\n}\n```", "```java\nspring.flyway.url=jdbc:h2:file:./data/ecomm;AUTO_SERVER=TRUE;DB_CLOSE_DELAY=-1;IGNORECASE=TRUE;DATABASE_TO_UPPER=FALSEspring.flyway.schemas=ecomm\nspring.flyway.user=\nspring.flyway.password=\n```", "```java\nspring.r2dbc.url=r2dbc:h2:file://././data/ecomm?options=AUTO_SERVER=TRUE;DB_CLOSE_DELAY=-1;IGNORECASE=TRUE;DATABASE_TO_UPPER=FALSE;;TRUNCATE_LARGE_LENGTH=TRUE;DB_CLOSE_ON_EXIT=FALSEspring.r2dbc.driver=io.r2dbc:r2dbc-h2\nspring.r2dbc.name=\nspring.r2dbc.password=\n```", "```java\n<logger name=\"org.springframework.r2dbc\"      level=\"debug\" additivity=\"false\">\n   <appender-ref ref=\"STDOUT\"/>\n</logger>\n<logger name=\"reactor.core\" level=\"debug\"\n   additivity=\"false\">\n   <appender-ref ref=\"STDOUT\"/>\n</logger>\n<logger name=\"io.r2dbc.h2\" level=\"debug\"\n    additivity=\"false\">\n   <appender-ref ref=\"STDOUT\"/>\n</logger>\n```"]