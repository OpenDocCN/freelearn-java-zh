["```java\npublic Manager findManager(Long id, String name) {\n```", "```java\n  String sql = \"SELECT * FROM MANAGER \n```", "```java\n    WHERE MANAGER_ID=? AND MANAGER_NAME=?\";               \n```", "```java\n  Manager result = jdbcTemplate\n```", "```java\n    .queryForObject(sql, Manager.class, name, id);\n```", "```java\n}\n```", "```java\n@Query(value = \"SELECT c.phone, p.cachingDate FROM Customer c \n```", "```java\n       INNER JOIN c.payments p WHERE c.customer_name = ?1\")\n```", "```java\nCustomerPojo fetchCustomerWithCachingDateByName(int name);\n```", "```java\nCustomer findByName(int name);\n```", "```java\npublic Customer findCustomer(Voucher v) {        \n```", "```java\n  ctx.select().from(table(\"CUSTOMER\"))                \n```", "```java\n     .where(field(\"CUSTOMER.CUSTOMER_NAME\").eq(v))...;    \n```", "```java\n}\n```", "```java\nctx.select()\n```", "```java\n   .from(table(\"OFFICES\"))\n```", "```java\n   .where(field(\"OFFICE.CAPACITY\").gt(50));\n```", "```java\nimport static jooq.generated.tables.Customer.CUSTOMER;\n```", "```java\n...\n```", "```java\npublic Customer findCustomer(Voucher v) {        \n```", "```java\n  ctx.select().from(CUSTOMER)                   \n```", "```java\n     .where(CUSTOMER.CUSTOMER_NAME.eq(v))...;         \n```", "```java\n}\n```", "```java\nimport static jooq.generated.tables.Office.OFFICE;\n```", "```java\n...\n```", "```java\nctx.select().from(OFFICES).where(OFFICE.CAPACITY.gt(50));\n```", "```java\n<dependency>\n```", "```java\n  <groupId>org.flywaydb</groupId>\n```", "```java\n  <artifactId>flyway-core</artifactId>\n```", "```java\n</dependency>\n```", "```java\n<phase>generate-sources</phase>\n```", "```java\nplugins { \n```", "```java\n  id 'org.flywaydb.flyway' version '...'\n```", "```java\n}\n```", "```java\ndependencies {        \n```", "```java\n  implementation 'org.flywaydb:flyway-core'   \n```", "```java\n}\n```", "```java\nflyway {\n```", "```java\n  driver = ...\n```", "```java\n  url = ...\n```", "```java\n  ...\n```", "```java\n}\n```", "```java\n<plugin>\n```", "```java\n  <groupId>...</groupId>\n```", "```java\n  <artifactId>jooq-codegen-maven</artifactId>\n```", "```java\n  <executions>\n```", "```java\n    <execution>\n```", "```java\n      <id>...</id>\n```", "```java\n      <phase>generate-sources</phase>\n```", "```java\n      <goals>\n```", "```java\n        <goal>generate</goal>\n```", "```java\n      </goals>\n```", "```java\n      <configuration xmlns = \"...\">\n```", "```java\n        <!-- Configure the database connection here -->\n```", "```java\n        <jdbc>...</jdbc>\n```", "```java\n        <generator>\n```", "```java\n          <!-- The Code Generator: \n```", "```java\n          org.jooq.codegen.{Java/Kotlin/Scala}Generator\n```", "```java\n          Defaults to org.jooq.codegen.JavaGenerator -->\n```", "```java\n          <name>...</name>\n```", "```java\n          <database>\n```", "```java\n            <!-- The database type. The format here is:    \n```", "```java\n            org.jooq.meta.[database].[database]Database -->\n```", "```java\n            <name>...</name>\n```", "```java\n            <!-- The database schema-->\n```", "```java\n            <inputSchema>...</inputSchema>\n```", "```java\n            <!-- What should be included by the generator -->\n```", "```java\n            <includes>...</includes>\n```", "```java\n            <!-- What should be excluded by the generator -->\n```", "```java\n            <excludes>...</excludes>\n```", "```java\n            <!-- Schema version provider -->\n```", "```java\n            <schemaVersionProvider>...</schemaVersionProvider>\n```", "```java\n            <!-- Set generator queries timeout(default 5s) -->\n```", "```java\n            <logSlowQueriesAfterSeconds>\n```", "```java\n              ...\n```", "```java\n            </logSlowQueriesAfterSeconds>\n```", "```java\n          </database>\n```", "```java\n          <target>\n```", "```java\n            <!-- The output package of generated classes -->\n```", "```java\n            <packageName>...</packageName>\n```", "```java\n            <!—The output directory of generated classes -->\n```", "```java\n            <directory>...</directory>\n```", "```java\n          </target>\n```", "```java\n        </generator>\n```", "```java\n      </configuration>\n```", "```java\n    </execution>\n```", "```java\n  </executions>\n```", "```java\n</plugin>\n```", "```java\n<plugin>\n```", "```java\n  <groupId>org.jooq</groupId>\n```", "```java\n  <artifactId>jooq-codegen-maven</artifactId>\n```", "```java\n  <executions>\n```", "```java\n    <execution>\n```", "```java\n      <id>generate-for-mysql</id>\n```", "```java\n      <phase>generate-sources</phase>\n```", "```java\n      <goals>\n```", "```java\n        <goal>generate</goal>\n```", "```java\n      </goals>\n```", "```java\n      <configuration xmlns = \"...\">\n```", "```java\n        <jdbc>\n```", "```java\n          <driver>${spring.datasource.driverClassName}</driver>\n```", "```java\n          <url>${spring.datasource.url}</url>\n```", "```java\n          <user>${spring.datasource.username}</user>\n```", "```java\n          <password>${spring.datasource.password}</password>\n```", "```java\n        </jdbc>\n```", "```java\n        <generator>\n```", "```java\n          <name>org.jooq.codegen.JavaGenerator</name>\n```", "```java\n          <database>\n```", "```java\n            <name>org.jooq.meta.mysql.MySQLDatabase</name>\n```", "```java\n            <inputSchema>classicmodels</inputSchema>\n```", "```java\n            <includes>.*</includes>\n```", "```java\n            <excludes>\n```", "```java\n              flyway_schema_history | sequences \n```", "```java\n              | customer_pgs | refresh_top3_product\n```", "```java\n              | sale_.* | set_.* | get_.* | .*_master\n```", "```java\n            </excludes>\n```", "```java\n            <schemaVersionProvider>\n```", "```java\n             SELECT MAX(`version`) FROM `flyway_schema_history`\n```", "```java\n            </schemaVersionProvider>\n```", "```java\n            <logSlowQueriesAfterSeconds>\n```", "```java\n              20\n```", "```java\n            </logSlowQueriesAfterSeconds>\n```", "```java\n          </database>\n```", "```java\n          <target>\n```", "```java\n            <packageName>jooq.generated</packageName>\n```", "```java\n            <directory>target/generated-sources</directory>\n```", "```java\n          </target>\n```", "```java\n        </generator>\n```", "```java\n      </configuration>\n```", "```java\n    </execution>\n```", "```java\n  </executions>\n```", "```java\n</plugin>\n```", "```java\n<skip>false</skip>\n```", "```java\n<configurationFile>${externalfile}</configurationFile>\n```", "```java\n<configurationFiles>\n  <configurationFile>${file1}</configurationFile>\n  <configurationFile>...</configurationFile>\n</configurationFiles>\n```", "```java\ndependencies {        \n```", "```java\n  jooqGenerator 'com.oracle.database.jdbc:ojdbc8'\n```", "```java\n  jooqGenerator 'com.oracle.database.jdbc:ucp'\n```", "```java\n}\n```", "```java\njooq {\n```", "```java\n  version = '...'\n```", "```java\n  edition = nu.studer.gradle.jooq.JooqEdition.TRIAL_JAVA_8\n```", "```java\n  configurations {\n```", "```java\n    main {\n```", "```java\n      generateSchemaSourceOnCompilation = true  // default\n```", "```java\n      generationTool {\n```", "```java\n        logging = org.jooq.meta.jaxb.Logging.WARN\n```", "```java\n        jdbc {\n```", "```java\n          driver = project.properties['driverClassName']\n```", "```java\n          url = project.properties['url']\n```", "```java\n          user = project.properties['username']\n```", "```java\n          password = project.properties['password']\n```", "```java\n        }\n```", "```java\n        generator {\n```", "```java\n          name = 'org.jooq.codegen.JavaGenerator'\n```", "```java\n          database {\n```", "```java\n            name = 'org.jooq.meta.oracle.OracleDatabase'\n```", "```java\n            inputSchema = 'CLASSICMODELS'\n```", "```java\n            includes = '.*'\n```", "```java\n            schemaVersionProvider = 'SELECT MAX(\"version\") \n```", "```java\n              FROM \"flyway_schema_history\"'\n```", "```java\n            excludes = '''\\\n```", "```java\n              flyway_schema_history | DEPARTMENT_PKG | GET_.*    \n```", "```java\n              | CARD_COMMISSION | PRODUCT_OF_PRODUCT_LINE\n```", "```java\n              ...\n```", "```java\n            '''\n```", "```java\n            logSlowQueriesAfterSeconds = 20\n```", "```java\n          }\n```", "```java\n          target {\n```", "```java\n            packageName = 'jooq.generated'\n```", "```java\n            directory = 'target/generated-sources'\n```", "```java\n          }\n```", "```java\n          strategy.name = \n```", "```java\n            \"org.jooq.codegen.DefaultGeneratorStrategy\"\n```", "```java\n        }\n```", "```java\n  ...\n```", "```java\n}\n```", "```java\ntasks.named('generateJooq').configure { \n```", "```java\n  // ensure database schema has been prepared by \n```", "```java\n  // Flyway before generating the jOOQ sources\n```", "```java\n  dependsOn tasks.named('flywayMigrate')\n```", "```java\n  // declare Flyway migration scripts as inputs on this task\n```", "```java\n  inputs.files(fileTree('...'))\n```", "```java\n        .withPropertyName('migrations')\n```", "```java\n        .withPathSensitivity(PathSensitivity.RELATIVE)\n```", "```java\n  // make jOOQ task participate in \n```", "```java\n  // incremental builds and build caching\n```", "```java\n  allInputsDeclared = true\n```", "```java\n  outputs.cacheIf { true }\n```", "```java\n}\n```", "```java\n<configuration xmlns = \"...\">\n```", "```java\n  <generator>\n```", "```java\n    <name>...</name>\n```", "```java\n    <database>\n```", "```java\n      <name>org.jooq.meta.extensions.ddl.DDLDatabase</name>\n```", "```java\n      <properties>\n```", "```java\n        <!-- Specify the location of your SQL script -->\n```", "```java\n        <property>\n```", "```java\n          <key>scripts</key>\n```", "```java\n          <value>...</value>\n```", "```java\n        </property>\n```", "```java\n        <!-- The sort order of scripts in a directory\n```", "```java\n        (semantic, alphanumeric, flyway, none) -->\n```", "```java\n        <property>\n```", "```java\n          <key>sort</key>\n```", "```java\n          <value>...</value>\n```", "```java\n        </property>\n```", "```java\n        <!-- The default schema for unqualified objects\n```", "```java\n        (public, none) -->\n```", "```java\n        <property>\n```", "```java\n          <key>unqualifiedSchema</key>\n```", "```java\n          <value>...</value>\n```", "```java\n        </property>\n```", "```java\n        <!-- The default name case for unquoted objects\n```", "```java\n        (as_is, upper, lower) -->\n```", "```java\n        <property>\n```", "```java\n          <key>defaultNameCase</key>\n```", "```java\n          <value>...</value>\n```", "```java\n        </property>\n```", "```java\n      </properties>\n```", "```java\n      <inputSchema>PUBLIC</inputSchema>\n```", "```java\n      <includes>...</includes>\n```", "```java\n      <excludes>...</excludes>\n```", "```java\n      <schemaVersionProvider>...</schemaVersionProvider>\n```", "```java\n      <logSlowQueriesAfterSeconds>\n```", "```java\n      ...\n```", "```java\n      </logSlowQueriesAfterSeconds>\n```", "```java\n    </database>\n```", "```java\n    <target>\n```", "```java\n      <packageName>...</packageName>\n```", "```java\n      <directory>...</directory>\n```", "```java\n    </target>\n```", "```java\n  </generator>\n```", "```java\n</configuration>\n```", "```java\n<dependency>\n```", "```java\n  <groupId>org.jooq{.trial-java-8}</groupId>\n```", "```java\n  <artifactId>jooq-meta-extensions</artifactId>\n```", "```java\n  <version>${jooq.version}</version>\n```", "```java\n</dependency>\n```", "```java\n<configuration xmlns = \"...\">\n```", "```java\n  <generator>\n```", "```java\n    <name>org.jooq.codegen.JavaGenerator</name>\n```", "```java\n    <database>\n```", "```java\n      <name>org.jooq.meta.extensions.ddl.DDLDatabase</name>\n```", "```java\n      <properties>\n```", "```java\n        <property>\n```", "```java\n          <key>scripts</key>\n```", "```java\n          <value>...db/migration/ddl/postgresql/sql</value>\n```", "```java\n        </property>\n```", "```java\n        <property>\n```", "```java\n          <key>sort</key>\n```", "```java\n          <value>flyway</value>\n```", "```java\n        </property>\n```", "```java\n        <property>\n```", "```java\n          <key>unqualifiedSchema</key>\n```", "```java\n          <value>none</value>\n```", "```java\n        </property>\n```", "```java\n        <property>\n```", "```java\n          <key>defaultNameCase</key>\n```", "```java\n          <value>lower</value>\n```", "```java\n        </property>\n```", "```java\n      </properties>\n```", "```java\n      <inputSchema>PUBLIC</inputSchema>\n```", "```java\n      <includes>.*</includes>\n```", "```java\n      <excludes>\n```", "```java\n            flyway_schema_history | akeys | avals | defined \n```", "```java\n          | delete.* | department_topic_arr | dup \n```", "```java\n          |  ...\n```", "```java\n      </excludes>\n```", "```java\n        <schemaVersionProvider>\n```", "```java\n          ${schema.version} <!-- this is a Maven constant -->\n```", "```java\n        </schemaVersionProvider>\n```", "```java\n        <logSlowQueriesAfterSeconds>\n```", "```java\n          20\n```", "```java\n        </logSlowQueriesAfterSeconds>\n```", "```java\n      </database>\n```", "```java\n    <target>\n```", "```java\n      <packageName>jooq.generated</packageName>\n```", "```java\n      <directory>target/generated-sources</directory>\n```", "```java\n    </target>\n```", "```java\n  </generator>\n```", "```java\n</configuration>\n```", "```java\n-- [jooq ignore start]\n```", "```java\nIF OBJECT_ID('payment', 'U') IS NOT NULL \n```", "```java\n  DROP TABLE payment;\n```", "```java\n-- [jooq ignore stop]\n```", "```java\n<configuration xmlns=\"...\">\n```", "```java\n  <!-- JDBC connection to the H2 in-memory database -->\n```", "```java\n  <jdbc>...</jdbc>\n```", "```java\n  <generator>\n```", "```java\n    <database>\n```", "```java\n      <name>org.jooq.meta.extensions.jpa.JPADatabase</name>\n```", "```java\n      <properties>\n```", "```java\n        <!-- The properties prefixed with hibernate... or \n```", "```java\n        javax.persistence... will be passed to Hibernate -->\n```", "```java\n        <property>\n```", "```java\n          <key>...</key>\n```", "```java\n          <value>...</value>\n```", "```java\n        </property>\n```", "```java\n        <!-- Java packages (comma separated) that \n```", "```java\n        contains your entities -->\n```", "```java\n        <property>\n```", "```java\n          <key>packages</key>\n```", "```java\n          <value>...</value>\n```", "```java\n        </property>\n```", "```java\n        <!-- Whether JPA 2.1 AttributeConverters should \n```", "```java\n        be auto-mapped to jOOQ Converters (default true) -->\n```", "```java\n        <property>\n```", "```java\n          <key>useAttributeConverters</key>\n```", "```java\n          <value>...</value>\n```", "```java\n        </property>\n```", "```java\n        <!-- The default schema for unqualified objects\n```", "```java\n        (public, none) -->\n```", "```java\n        <property>\n```", "```java\n          <key>unqualifiedSchema</key>\n```", "```java\n          <value>...</value>\n```", "```java\n        </property>\n```", "```java\n      </properties>\n```", "```java\n      <includes>...</includes>\n```", "```java\n      <excludes>...</excludes>\n```", "```java\n      <schemaVersionProvider>...</schemaVersionProvider>\n```", "```java\n      <logSlowQueriesAfterSeconds>\n```", "```java\n      ...\n```", "```java\n      </logSlowQueriesAfterSeconds>\n```", "```java\n    </database>\n```", "```java\n    <target>\n```", "```java\n      <packageName>...</packageName>\n```", "```java\n      <directory>...</directory>\n```", "```java\n    </target>\n```", "```java\n  </generator>\n```", "```java\n</configuration>\n```", "```java\n<configuration xmlns=\"...\">\n```", "```java\n  <jdbc>\n```", "```java\n    <driver>org.h2.Driver</driver>\n```", "```java\n    <url>jdbc:h2:~/classicmodels</url>\n```", "```java\n  </jdbc>\n```", "```java\n  <generator>\n```", "```java\n    <database>\n```", "```java\n      <name>org.jooq.meta.extensions.jpa.JPADatabase</name>\n```", "```java\n      <properties>\n```", "```java\n        <property>\n```", "```java\n          <key>hibernate.physical_naming_strategy</key>\n```", "```java\n          <value>\n```", "```java\n            org.springframework.boot.orm.jpa\n```", "```java\n               .hibernate.SpringPhysicalNamingStrategy\n```", "```java\n          </value>\n```", "```java\n        </property>\n```", "```java\n        <property>\n```", "```java\n          <key>packages</key>\n```", "```java\n          <value>com.classicmodels.entity</value>\n```", "```java\n        </property>\n```", "```java\n        <property>\n```", "```java\n          <key>useAttributeConverters</key>\n```", "```java\n          <value>true</value>\n```", "```java\n        </property>\n```", "```java\n        <property>\n```", "```java\n          <key>unqualifiedSchema</key>\n```", "```java\n          <value>none</value>\n```", "```java\n        </property>\n```", "```java\n      </properties>\n```", "```java\n      <includes>.*</includes>\n```", "```java\n       <excludes>\n```", "```java\n             flyway_schema_history | sequences \n```", "```java\n             | customer_pgs | refresh_top3_product\n```", "```java\n             | sale_.* | set_.* | get_.* | .*_master\n```", "```java\n       </excludes>\n```", "```java\n       <schemaVersionProvider>\n```", "```java\n         ${schema.version}\n```", "```java\n       </schemaVersionProvider>                       \n```", "```java\n       <logSlowQueriesAfterSeconds>\n```", "```java\n         20\n```", "```java\n       </logSlowQueriesAfterSeconds>\n```", "```java\n     </database>\n```", "```java\n      <target>\n```", "```java\n        <packageName>jooq.generated</packageName>\n```", "```java\n        <directory>target/generated-sources</directory>\n```", "```java\n      </target>\n```", "```java\n    </generator>\n```", "```java\n  </configuration>\n```", "```java\n<dependency>\n```", "```java\n  <groupId>org.jooq{.trial-java-8}</groupId>\n```", "```java\n  <!-- before jOOQ 3.14.x, jooq-meta-extensions -->\n```", "```java\n  <artifactId>jooq-meta-extensions-hibernate</artifactId>\n```", "```java\n  <version>${jooq.meta.extensions.hibernate.version}\n```", "```java\n  </version>\n```", "```java\n</dependency>\n```", "```java\nResultQuery<?> query = ctx.selectFrom(table(\"office\")) \n```", "```java\n  .where(field(\"territory\").eq(territory));\n```", "```java\nimport static jooq.generated.tables.Office.OFFICE; \n```", "```java\nimport jooq.generated.tables.records.OfficeRecord;\n```", "```java\n...\n```", "```java\nResultQuery<OfficeRecord> query = ctx.selectFrom(OFFICE) \n```", "```java\n  .where(OFFICE.TERRITORY.eq(territory));\n```", "```java\npublic List<Office> findOfficesInTerritory(String territory) {\n```", "```java\n  List<Office> result = ctx.selectFrom(OFFICE) \n```", "```java\n    .where(OFFICE.TERRITORY.eq(territory))\n```", "```java\n    .fetchInto(Office.class); \n```", "```java\n  return result;\n```", "```java\n}\n```", "```java\nSELECT\n```", "```java\n  `classicmodels`.`office`.`office_code`, \n```", "```java\n  `classicmodels`.`office`.`city`, \n```", "```java\n  ...\n```", "```java\n  `classicmodels`.`office`.`territory` \n```", "```java\nFROM `classicmodels`.`office` \n```", "```java\nWHERE `classicmodels`.`office`.`territory` = ?\n```", "```java\nSELECT \n```", "```java\n  \"public\".\"office\".\"office_code\", \n```", "```java\n  \"public\".\"office\".\"city\", \n```", "```java\n  ...\n```", "```java\n  \"public\".\"office\".\"territory\" \n```", "```java\nFROM \"public\".\"office\" \n```", "```java\nWHERE \"public\".\"office\".\"territory\" = ?\n```", "```java\nSELECT\n```", "```java\n  \"CLASSICMODELS\".\"OFFICE\".\"OFFICE_CODE\", \n```", "```java\n  \"CLASSICMODELS\".\"OFFICE\".\"CITY\", \n```", "```java\n  ...\n```", "```java\n  \"CLASSICMODELS\".\"OFFICE\".\"TERRITORY\" \n```", "```java\nFROM \"CLASSICMODELS\".\"OFFICE\" \n```", "```java\nWHERE \"CLASSICMODELS\".\"OFFICE\".\"TERRITORY\" = ?\n```", "```java\nSELECT\n```", "```java\n  [classicmodels].[dbo].[office].[office_code], \n```", "```java\n  [classicmodels].[dbo].[office].[city], \n```", "```java\n  ...\n```", "```java\n  [classicmodels].[dbo].[office].[territory] \n```", "```java\nFROM [classicmodels].[dbo].[office] \n```", "```java\nWHERE [classicmodels].[dbo].[office].[territory] = ?\n```", "```java\nResultQuery<OrderRecord> query = ctx.selectFrom(ORDER)    \n```", "```java\n  .where(ORDER.REQUIRED_DATE.between(startDate, endDate));\n```", "```java\npublic List<Order> findOrdersByRequiredDate(\n```", "```java\n      LocalDate startDate, LocalDate endDate) {\n```", "```java\n  List<Order> result = ctx.selectFrom(ORDER)\n```", "```java\n    .where(ORDER.REQUIRED_DATE.between(startDate, endDate))  \n```", "```java\n    .fetchInto(Order.class); \n```", "```java\n  return result;\n```", "```java\n}\n```", "```java\nSELECT \n```", "```java\n  `classicmodels`.`order`.`order_id`, \n```", "```java\n  ...\n```", "```java\n  `classicmodels`.`order`.`customer_number` \n```", "```java\nFROM `classicmodels`.`order` \n```", "```java\nWHERE `classicmodels`.`order`.`required_date` \n```", "```java\n  BETWEEN ? AND ? \n```", "```java\nResultQuery<Record2<String, LocalDate>> query = ctx.select(\n```", "```java\n         CUSTOMER.CUSTOMER_NAME, ORDER.ORDER_DATE)      \n```", "```java\n  .from(ORDER)\n```", "```java\n  .innerJoin(CUSTOMER).using(CUSTOMER.CUSTOMER_NUMBER)\n```", "```java\n  .orderBy(ORDER.ORDER_DATE.desc());\n```", "```java\npublic List<CustomerAndOrder> findCustomersAndOrders() {\n```", "```java\n  List<CustomerAndOrder> result \n```", "```java\n    = ctx.select(CUSTOMER.CUSTOMER_NAME, ORDER.ORDER_DATE)\n```", "```java\n         .from(ORDER)\n```", "```java\n         .innerJoin(CUSTOMER).using(CUSTOMER.CUSTOMER_NUMBER)\n```", "```java\n         .orderBy(ORDER.ORDER_DATE.desc())\n```", "```java\n         .fetchInto(CustomerAndOrder.class); \n```", "```java\n  return result;\n```", "```java\n}\n```", "```java\nSELECT \n```", "```java\n  \"CLASSICMODELS\".\"CUSTOMER\".\"CUSTOMER_NAME\", \n```", "```java\n  \"CLASSICMODELS\".\"ORDER\".\"ORDER_DATE\" \n```", "```java\nFROM \n```", "```java\n  \"CLASSICMODELS\".\"ORDER\" \n```", "```java\n  JOIN \"CLASSICMODELS\".\"CUSTOMER\" USING (\"CUSTOMER_NUMBER\") \n```", "```java\nORDER BY\n```", "```java\n  \"CLASSICMODELS\".\"ORDER\".\"ORDER_DATE\" DESC\n```", "```java\n<generator>\n```", "```java\n  ...\n```", "```java\n  <generate>\n```", "```java\n    <pojos>true</pojos>\n```", "```java\n  </generate>\n```", "```java\n  ...\n```", "```java\n</generator>\n```", "```java\n<generate>\n```", "```java\n  <pojos>true</pojos>\n```", "```java\n  <validationAnnotations>true</validationAnnotations>\n```", "```java\n</generate>\n```", "```java\n<strategy>\n```", "```java\n  <matchers>\n```", "```java\n    <tables>\n```", "```java\n      <table>\n```", "```java\n        <pojoClass>\n```", "```java\n          <expression>JOOQ_$0</expression>\n```", "```java\n          <transform>PASCAL</transform>\n```", "```java\n        </pojoClass>\n```", "```java\n      ...\n```", "```java\n</strategy>\n```", "```java\npublic class JooqOffice implements Serializable {\n```", "```java\n  private static final long serialVersionUID = 1821407394;\n```", "```java\n  private String officeCode;\n```", "```java\n  private String city;\n```", "```java\n  ...\n```", "```java\n  private String territory;\n```", "```java\n  public JooqOffice() {}\n```", "```java\n  public JooqOffice(JooqOffice value) {\n```", "```java\n    this.officeCode = value.officeCode;\n```", "```java\n    this.city = value.city;\n```", "```java\n    ...\n```", "```java\n    this.territory = value.territory;\n```", "```java\n  }\n```", "```java\n  public JooqOffice(String officeCode, \n```", "```java\n         String city, ... String territory) {\n```", "```java\n    this.officeCode = officeCode;\n```", "```java\n    this.city = city;\n```", "```java\n    ...\n```", "```java\n    this.territory = territory;\n```", "```java\n  }\n```", "```java\n  @NotNull\n```", "```java\n  @Size(max = 10)\n```", "```java\n  public String getOfficeCode() {\n```", "```java\n    return this.officeCode;\n```", "```java\n  }\n```", "```java\n  public void setOfficeCode(String officeCode) {\n```", "```java\n    this.officeCode = officeCode;\n```", "```java\n  }\n```", "```java\n  // getters and setters and toString() omitted for brevity\n```", "```java\n}\n```", "```java\nimport jooq.generated.tables.pojos.JooqOffice;\n```", "```java\nimport jooq.generated.tables.pojos.JooqOrder;\n```", "```java\n...\n```", "```java\npublic List<JooqOffice> findOfficesInTerritory(\n```", "```java\n                               String territory) {\n```", "```java\n  List<JooqOffice> result = ctx.selectFrom(OFFICE)\n```", "```java\n    .where(OFFICE.TERRITORY.eq(territory))\n```", "```java\n    .fetchInto(JooqOffice.class); \n```", "```java\n  return result;\n```", "```java\n}\n```", "```java\npublic List<JooqOrder> findOrdersByRequiredDate(\n```", "```java\n           LocalDatestartDate, LocalDateendDate) {\n```", "```java\n  List<JooqOrder> result = ctx.selectFrom(ORDER)\n```", "```java\n    .where(ORDER.REQUIRED_DATE.between(startDate, endDate))  \n```", "```java\n      .fetchInto(JooqOrder.class); \n```", "```java\n      return result;\n```", "```java\n}\n```", "```java\n<generator>\n```", "```java\n  ...\n```", "```java\n  <generate>\n```", "```java\n    <daos>true</daos>\n```", "```java\n  </generate>\n```", "```java\n  ...\n```", "```java\n</generator>\n```", "```java\n<generate>\n```", "```java\n  <daos>true</daos>\n```", "```java\n  <springAnnotations>true</springAnnotations>\n```", "```java\n</generate>\n```", "```java\n<strategy>\n```", "```java\n  <matchers>\n```", "```java\n    <tables>\n```", "```java\n      <table>\n```", "```java\n        <daoClass>\n```", "```java\n          <expression>$0_Repository</expression>\n```", "```java\n          <transform>PASCAL</transform>\n```", "```java\n        </daoClass>\n```", "```java\n      ...\n```", "```java\n</strategy>\n```", "```java\n@Repository\n```", "```java\npublic class OfficeRepository\n```", "```java\n       extends DAOImpl<OfficeRecord, JooqOffice, String> {\n```", "```java\n  public OfficeRepository() {\n```", "```java\n    super(Office.OFFICE, JooqOffice.class);\n```", "```java\n  }\n```", "```java\n  @Autowired\n```", "```java\n  public OfficeRepository(Configuration configuration) {\n```", "```java\n    super(Office.OFFICE, JooqOffice.class, configuration);\n```", "```java\n  }\n```", "```java\n  @Override\n```", "```java\n  public String getId(JooqOffice object) {\n```", "```java\n    return object.getOfficeCode();\n```", "```java\n  }\n```", "```java\n  public List<JooqOffice> fetchRangeOfOfficeCode(\n```", "```java\n       String lowerInclusive, String upperInclusive) {\n```", "```java\n    return fetchRange(Office.OFFICE.OFFICE_CODE, \n```", "```java\n         lowerInclusive, upperInclusive);\n```", "```java\n  }\n```", "```java\n  // more DAO-methods omitted for brevity\n```", "```java\n}\n```", "```java\nList<JooqOffice> result = ctx.selectFrom(OFFICE) \n```", "```java\n  .where(OFFICE.TERRITORY.eq(territory))\n```", "```java\n  .fetchInto(JooqOffice.class);\n```", "```java\n@Transactional(readOnly = true)\n```", "```java\npublic List<JooqOffice> fetchOfficesInTerritory(\n```", "```java\n                               String territory) {\n```", "```java\n  return officeRepository.fetchByTerritory(territory);\n```", "```java\n}\n```", "```java\nList<JooqOrder> result = ctx.selectFrom(ORDER)\n```", "```java\n  .where(ORDER.REQUIRED_DATE.between(startDate, endDate))  \n```", "```java\n  .fetchInto(JooqOrder.class);\n```", "```java\n@Transactional(readOnly = true)\n```", "```java\npublic List<JooqOrder> fetchOrdersByRequiredDate(\n```", "```java\n      LocalDate startDate, LocalDate endDate) {\n```", "```java\n  return orderRepository.fetchRangeOfRequiredDate(\n```", "```java\n      startDate, endDate);\n```", "```java\n}\n```", "```java\n<generate>\n```", "```java\n  <interfaces>true</interfaces>\n```", "```java\n  <immutableInterfaces>true</immutableInterfaces>\n```", "```java\n</generate>\n```", "```java\n<dependency>\n```", "```java\n  <groupId>org.jooq{.trial-java-8}</groupId>\n```", "```java\n  <artifactId>jooq-codegen</artifactId>\n```", "```java\n</dependency>\n```", "```java\nConfiguration configuration = new Configuration()\n```", "```java\n  .withJdbc(new Jdbc()\n```", "```java\n    .withDriver(\"com.mysql.cj.jdbc.Driver\")\n```", "```java\n    .withUrl(\"jdbc:mysql://localhost:3306/classicmodels\")\n```", "```java\n    .withUser(\"root\")\n```", "```java\n    .withPassword(\"root\"))\n```", "```java\n  .withGenerator(new Generator()\n```", "```java\n    .withName(\"org.jooq.codegen.JavaGenerator\")\n```", "```java\n    .withDatabase(new Database()\n```", "```java\n      .withName(\"org.jooq.meta.mysql.MySQLDatabase\")       \n```", "```java\n      .withInputSchema(\"classicmodels\")\n```", "```java\n      .withIncludes(\".*\")\n```", "```java\n      .withExcludes(\"flyway_schema_history | sequences\"\n```", "```java\n        + \" | customer_pgs | refresh_top3_product\"\n```", "```java\n        + \" | sale_.* | set_.* | get_.* | .*_master\")      \n```", "```java\n      .withSchemaVersionProvider(\"SELECT MAX(`version`) \n```", "```java\n          FROM `flyway_schema_history`\")\n```", "```java\n      .withLogSlowQueriesAfterSeconds(20))\n```", "```java\n  .withGenerate(new Generate()\n```", "```java\n    .withDaos(true)\n```", "```java\n    .withValidationAnnotations(Boolean.TRUE)\n```", "```java\n    .withSpringAnnotations(Boolean.TRUE))\n```", "```java\n  .withStrategy(new Strategy()\n```", "```java\n    .withMatchers(new Matchers()\n```", "```java\n      .withTables(new MatchersTableType()\n```", "```java\n        .withPojoClass(new MatcherRule()\n```", "```java\n         .withExpression(\"Jooq_$0\")\n```", "```java\n         .withTransform(MatcherTransformType.PASCAL))\n```", "```java\n        .withDaoClass(new MatcherRule()\n```", "```java\n          .withExpression(\"$0_Repository\")\n```", "```java\n          .withTransform(MatcherTransformType.PASCAL)))))\n```", "```java\n  .withTarget(new Target()\n```", "```java\n    .withPackageName(\"jooq.generated\")\n```", "```java\n    .withDirectory(System.getProperty(\"user.dir\")\n```", "```java\n    .endsWith(\"webapp\") ? \"target/generated-sources\"\n```", "```java\n              : \"webapp/target/generated-sources\")));\n```", "```java\nGenerationTool.generate(configuration);\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n```", "```java\n<settings>\n```", "```java\n  <renderCatalog>false</renderCatalog>\n```", "```java\n  <renderSchema>false</renderSchema>\n```", "```java\n</settings>\n```", "```java\n@Bean\n```", "```java\npublic Settings jooqSettings() {\n```", "```java\n  return new Settings()\n```", "```java\n   .withRenderCatalog(Boolean.FALSE)\n```", "```java\n   .withRenderSchema(Boolean.FALSE);\n```", "```java\n}\n```", "```java\nDataSource ds = ...;\n```", "```java\nDSLContext ctx = DSL.using(ds, SQLDialect.MYSQL, \n```", "```java\n  new Settings()\n```", "```java\n    .withRenderCatalog(Boolean.FALSE)\n```", "```java\n    .withRenderSchema(Boolean.FALSE));\n```", "```java\nctx.configuration().derive(\n```", "```java\n  new Settings()\n```", "```java\n    .withRenderCatalog(Boolean.FALSE)\n```", "```java\n    .withRenderSchema(Boolean.FALSE))).dsl() \n```", "```java\n    ... // some query\n```"]