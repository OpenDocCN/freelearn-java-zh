- en: Chapter 12. Role-based Access Control with WildFly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Switching between simple and RBAC providers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing users, groups, and their role mapping
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting a predefined role to all authenticated users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Granting user access by server group or host – scoped roles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating with OpenLDAP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn how to improve your WildFly management console
    by providing a fine-grained access control mechanism. WildFly comes with two built-in
    providers: one is called simple, which is the default one and the second one is
    called RBAC—as you guessed, it stands for **role-based access control**.'
  prefs: []
  type: TYPE_NORMAL
- en: Switching to the RBAC provider means you can control what a user can do and
    see, and what kinds of operations the user is allowed to perform. Using the RBAC
    provider, you are basically sharing responsibility with different users. You might
    want some users to just make deployments, others to occasionally monitor the overall
    system, and so on. Furthermore, we will see how to integrate RBAC with an LDAP
    system (which provides users and groups), and mapping them to the WildFly roles.
  prefs: []
  type: TYPE_NORMAL
- en: 'WildFly comes with a set of predefined roles, each one having a specific permission.
    These roles are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Monitor**: As the name may suggest, this role can just view the state of
    the server, but it cannot see sensitive data, such as passwords.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Operator**: This role has the same permissions as those provided by the monitor,
    plus it can stop and start a server, or pause runtime services such as JMS destinations.
    You would typically give such a role to people who are responsible for managing
    a specific server instance. Still, an operator cannot see sensitive data, such
    as passwords.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maintainer**: This role has the permissions to view and edit all the runtime
    states and all configurations, besides sensitive data. Users with such a role
    can manage almost the entire system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Deployer**: This role is like the monitor role, plus it can read and modify
    the configuration and the state of deployments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Auditor**: This role is like the monitor role, plus it can view sensitive
    data. It also has access to the audit logging subsystem.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Administrator**: This role can do anything, view and modify everything except
    the audit logging subsystem. The administrator can also configure the RBAC provider.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SuperUser**: This is the most powerful role. It can view and modify resources,
    state, and sensitive data. This role is the one that was used before the RBAC
    was introduced.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These roles can be combined together to form a group of roles, which can be
    used by a specific user.
  prefs: []
  type: TYPE_NORMAL
- en: Switching between simple and RBAC providers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to switch from the simple provider to the
    RBAC provider. RBAC provides a fine-grained access control to our management console.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started, let''s first create an `ad-hoc` folder to run our WildFly.
    In a terminal window, execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now it's time to run our WildFly!!!
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a terminal window and enter the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once started, in a new terminal window, connect to the CLI and switch to the
    RBAC provider, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Great, we successfully switched to the RBAC provider.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In our `standalone.xml` file, we should find the following definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To switch back to the `simple` provider, do as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In our `standalone.xml` file, we should find the following definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That's it, pretty easy so far!!!
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This approach is pretty easy and straightforward; there is not much to talk
    about except its usage. The preceding example is just the first step. As a matter
    of fact, if you try to access the console after you switch to the `RBAC` provider,
    you are not able to log in.
  prefs: []
  type: TYPE_NORMAL
- en: 'Try it!!! Open the browser and point it to `http://localhost:9990`. Enter the
    username and password that we specified at the beginning of the book: `wildfly`
    as the username and `cookbook.2015` as the password.'
  prefs: []
  type: TYPE_NORMAL
- en: See, you cannot log in. How to resolve this?
  prefs: []
  type: TYPE_NORMAL
- en: From the preceding XML code snippet, you should have noticed the directive `include`
    referring the user named `$local`. In this case, `$local` means the users defined
    within the `ManagementRealm` and `ApplicationRealm` realms, but with no privileges
    at all to access the console.
  prefs: []
  type: TYPE_NORMAL
- en: 'What we should do, is add our `wildfly` user from `ManagementRealm` in the
    `include` XML element, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding commands generate the following XML code into our `standalone.xml`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now if we try to access the console as usual, we should be able to log in successfully.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Regardless the providers that you have chosen, once logged in, you can see
    the role of your user, by clicking on the username, displayed on the top-right
    corner of the web console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more…](img/3744_12_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Displaying current logged user's role
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, we have a role called **SuperUser**. Looking a little bit further,
    there is an interesting link **Run as…** which should intrigue you. Let's click
    it!
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more…](img/3744_12_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Run as role selection role pop-up
  prefs: []
  type: TYPE_NORMAL
- en: Try to play around with it to better understand the different roles and the
    permissions you get. For example, try to deploy an application using the **Monitor**
    role, or check if you can view or edit the username and password of a datasource.
    Be curious!
  prefs: []
  type: TYPE_NORMAL
- en: Managing users, groups, and their role mapping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to manage users, groups, and their relative
    mapping to the WildFly roles. We will perform most of the tasks from within the
    Web Console.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started, let''s first create an `ad-hoc` folder to run our WildFly.
    In a terminal window, execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Now it's time to run our WildFly.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open a terminal window and enter the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once started, connect to the CLI and switch to the RBAC provider in a new terminal
    window as we did in the previous recipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that we''ve successfully switched to the RBAC provider, we need to map
    our local management user (if you''ve been following the book, you''ll know it
    is **wildfly**) to the **SuperUser** role, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Okay, we can now access the Web Console, and see how we can manage users, groups,
    and their relative mappings.
  prefs: []
  type: TYPE_NORMAL
- en: Users
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s first add some users:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In a new terminal window, execute the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Okay, now let's open the browser and point it to `http://localhost:9990`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once logged in as the **wildfly** user, click on the Administration tab and
    you should see a page like the following:![Users](img/3744_12_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Displaying RBAC users
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Our **wildfly** user is there. Let's add the user `devguy` by clicking on the
    button labeled **Add**, and filling in the form as follows:![Users](img/3744_12_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: RBAC form for adding a user and its roles
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Confirm by clicking the **Save** button. Now we should have the new user added
    to the list, as depicted in the next image:![Users](img/3744_12_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Displaying the newly added user devguy
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If we cannot access the Web Console for any reason, we can rely on the CLI,
    and specify the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s add the other users, `opsguy`, `devopsguy`, and `pmguy`, giving them
    appropriate roles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`opsguy`: Roles of the maintainer and operator'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`devopsguy`: Role of the administrator'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pmguy`: Role of the monitor'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You should have the following list:![Users](img/3744_12_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: List of users
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we've entered all our users, let's try one of them.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: So log out and log back in with the user `pmguy`. Once we are back in, let's
    go to the **Deployments** tab. You see a page similar to the following:![Users](img/3744_12_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deployments page without any buttons to alter deployments
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As you can see, we cannot manage our deployments, we cannot remove or disable
    them, nor can we deploy new applications.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Let's go back to our **Administration** tab and see if we can add a more powerful
    role:![Users](img/3744_12_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Administration page warning about Authorization Required
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We can't; only users with the Administrator and SuperUser roles can.
  prefs: []
  type: TYPE_NORMAL
- en: Groups
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we saw, every role has specific permissions on what you can and can't do,
    and on what you can and cannot see. Despite the simple mapping user roles, you
    can manage and combine multiple roles under a specific group.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create two groups: `development` and `operations`:'
  prefs: []
  type: TYPE_NORMAL
- en: If you are still logged in as the `pmguy` user, log off and log back in with
    as the `wildfly` user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once there, go to the **Administration** tab and click **Groups**:![Groups](img/3744_12_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Displaying RBAC groups
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Add the two groups by clicking the **Add** button, as follows:![Groups](img/3744_12_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating the Development group
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the preceding screenshot, we are selecting the **Deployer** and the **Operator**
    roles from the list of WildFly's built-in roles, and giving them to the **Development**
    group.![Groups](img/3744_12_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating the Operations group
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the preceding screenshot, we are selecting the **Maintainer** and the **Operator**
    roles from the list of WildFly's built-in roles, and giving them to the **Operations**
    group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we should have the following entries in our `group-roles` table:![Groups](img/3744_12_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: List of groups
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Our `standalone.xml` file should have the following definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, the groups too have been included in the appropriate role. Now
    we need to give a group to a user. With our configuration, we could give the **Development**
    group to the `devguy` user, and the **Operations** group to the `opsguy`.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we are dealing with users that belong to **ManagementRealm** to accomplish
    this task from the command line, we can follow two different ways:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Insert the user again, using the `add-user.sh` script and passing the group,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Adding the user directly to the `mgmt-groups.properties` file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Because we could potentially have tens, hundreds, and thousands of users, we
    probably do not want to map a role for every user, but instead, map a set of roles
    to a group, and map users to that group. This is the kind of scenario that we
    find in a corporate having its users stored in an `Active Directory` or LDAP stores—we
    will dive into integrating the LDAP store later in this chapter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Having said that, let's remove the role mapping for the users `devguy` and `opsguy`.
  prefs: []
  type: TYPE_NORMAL
- en: We can do this from the Web Console, by selecting the user and clicking on the
    **Remove** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once done, we should have the following scenario:![Groups](img/3744_12_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: List of users
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now we should be able to log out and log back in with the user `devguy`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once done, let's click on the `devguy` link on the top-right corner of the page,
    and we should see his roles, as follows:![Groups](img/3744_12_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Displaying user's roles
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Let's try this with the other user, `opsguy`. If everything is fine, we should
    see his roles as well.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Users and groups management is simplified by the Web Console; nevertheless,
    we still need some tasks to be done outside the Web Console, like mapping users
    to groups. By the way, here is the main process:'
  prefs: []
  type: TYPE_NORMAL
- en: We need a user capable of accessing the RBAC administration page and adding/removing
    users and groups—just like our WildFly SuperUser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We need to add users or groups and map them to the appropriate role
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users have to be present in a store, like the properties file and LDAP (both
    stores are supported by WildFly); we used the `add-user.sh` script to silently
    add users, along with their realm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting a predefined role to all authenticated users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to set a predefined role to all authenticated
    users. This setting might be handy when you have a large user base and you don't
    have a complete view of all users and groups that are present in the the identity
    store. So instead of not authorizing some users, you may want to give them the
    simplest and the least privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started, let''s first create an `ad-hoc` folder to run our WildFly.
    In a terminal window execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now it's time to run our WildFly!
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open a terminal window and enter the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once started, in a new terminal window, connect to the CLI and switch to the
    RBAC provider as we did in the previous recipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that we''ve successfully switched to the RBAC provider, we need to map
    our local management user (if you are following the book, the local management
    user is `wildfly`) to the **SuperUser** role, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we need to add some users, just to simulate the users whom we didn''t consider
    as having access to our system; in a new terminal window, execute the following
    commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Okay, we can now access the Web Console and see how we can manage those kinds
    of users, by giving them the default role.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Let's open the browser and point it to `http://localhost:9990`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Authenticate with the `wildfly` user and once there, click on the **Administration**
    tab and then on the **Roles** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, select the **Monitor** role, click the **Edit** link, and mark the **Include
    All** check, as follows:![How to do it…](img/3744_12_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Giving a default role to all authenticated users
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once you click **Save**, the selected role will be given as the default one
    to all authenticated users.![How to do it…](img/3744_12_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: List of roles
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If we don''t have access to the Web Console, we can still rely on our CLI and
    issue the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Okay, let's try our settings by logging out and logging back in with the user
    `luigi`. Open the browser and point it to `http://localhost:9990`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert `luigi` as the username and `luigi.2015` as the password; we should end
    up with the following scenario:![How to do it…](img/3744_12_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: User luigi mapped to the default role Monitor
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Neat!
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is not much to talk about as the process is pretty straightforward. Let's
    recap what we did and how we did it.
  prefs: []
  type: TYPE_NORMAL
- en: First we needed to switch the provider, passing it from `simple` to `rbac` using
    the CLI.
  prefs: []
  type: TYPE_NORMAL
- en: 'Secondly, we needed to include our management user `wildfly` to the **SuperUser**
    role, which resulted in the following configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we added the potential, unmanaged users to the `ManagementRealm` realm,
    using the `add-user.sh` script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The `--silent=true` command basically means non-interactive mode; we then passed
    the username followed by its password, and then we specified the path for storing
    our users. By default, the store is represented by the `mgmt-users.properties`
    file, which corresponds to the `ManagementRealm`, on the WildFly side.
  prefs: []
  type: TYPE_NORMAL
- en: If we wanted to store the users in `ApplicationRealm`, we should have passed
    the option `-a` to the script. Furthermore, if we wanted to store the users' credentials
    into a different file, we could have passed the option `-up /path/filename.properties`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a complete list of available options, issue the `add-user.sh` script passing
    the `--help` directive, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '![How it works…](img/3744_12_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Lastly, we made the monitor role the default one for all authenticated users.
  prefs: []
  type: TYPE_NORMAL
- en: Granting user access by server group or host – scoped roles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to grant access to a user only in a specific
    server-group or host. This is available only in the domain mode, obviously. This
    feature takes the name of scoped roles, and it comes in very handy when you need
    to share your environment with multiple teams such as development teams. This
    way, every team can actually work on its server group or dedicated host, without
    interfering with the other server groups or hosts.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started, let''s first create an `ad-hoc` folder to run our WildFly.
    In a terminal window enter the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Now it's time to run our WildFly.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open a terminal window and execute the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once started, connect to the CLI in a new terminal window and switch to the
    RBAC provider, as we did in the previous recipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that we''ve successfully switched to the RBAC provider, we need to map
    our `wildfly` user to the **SuperUser** role, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now we can log in to our WildFly console and create the so called `scoped-roles`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Log in to the WildFly Web Console and go to the **Administration** tab. Then
    select the **Roles** sub tab, and select the **Scoped Roles** section. The page
    is depicted as follows:![How to do it…](img/3744_12_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Administrative page of the scoped roles
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now click the **Add** button and fill in the form as depicted in the following
    screenshot:![How to do it…](img/3744_12_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scoped Role adding form
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once you submit the form by clicking on the **Save** button, the scoped role
    will be inserted and shown as per the following list:![How to do it…](img/3744_12_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: List displaying the dev-team-one scoped role
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now it's time to create a user to map it to the scoped role created in the previous
    steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a terminal and execute the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now we can add that user to the `dev-team-one` scoped role.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Let's go back to the WildFly Web Console, select the **Administration** tab,
    then the **Users** sub tab, and click the **Add** button. Fill in the form as
    depicted in the following image:![How to do it…](img/3744_12_22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you save your changes, you should have the following list:![How to do it…](img/3744_12_23.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we can log out and log back in with the `user-dev-1` user and the password
    `devguy.2015`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now if you go to the **Domain** tab, in the **Overview** section (the menu
    item on the left), you will only see the topology of the server group that your
    user belongs to, as depicted in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/3744_12_24.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: That's it!
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is not much to talk about as the process is pretty straightforward. Let's
    recap what we did and how we did it.
  prefs: []
  type: TYPE_NORMAL
- en: First we needed to switch the provider, passing from `simple` to the `rbac`
    provider, using the CLI.
  prefs: []
  type: TYPE_NORMAL
- en: 'Secondly, we needed to include our management user `wildfly` to the **SuperUser**
    role, which resulted in the following configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Then we logged into the WildFly Web Console with the user `wildfly`, and added
    our first scoped role. We mapped the scoped role to a server group, the one named
    `main-server-group` with the base role of `Deployer`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We could have also mapped our scoped role to a host by specifying the `Host`
    in the **Type** selection component, depicted as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/3744_12_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the scope of the role would have matched the host names available
    in our configuration, that is, `master` in our case.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we added a user, using the `add- user.sh` script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The `--silent=true` command basically means the non-interactive mode; we then
    passed the username followed by its password, and then we specified the path for
    storing users. By default, the store is represented by the `mgmt-users.properties`
    file, which corresponds to the `ManagementRealm`, on the WildFly side.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we mapped the `user-dev-1` to the scoped role, and we logged in with
    it.
  prefs: []
  type: TYPE_NORMAL
- en: As a result, we had the WildFly Web Console available just to the server group
    specified in the scoped role, accordingly to the role assigned to it; in our case
    that was the `Deployer` role.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating with OpenLDAP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to integrate OpenLDAP to provide a user base
    for our RBAC provider. In an enterprise environment, you usually find databases
    where companies store their users. Those databases typically have some kind of
    structure which defines roles, profiles, and/or groups for each user.
  prefs: []
  type: TYPE_NORMAL
- en: For example, people connecting to a server may or may not see certain files
    or directories. People accessing an application may or may not find a particular
    functionality; that could be the case of the WildFly Web Console. LDAP is a protocol
    used by many databases that are used to store those users' grants. There are many
    of them such as the Microsoft Active Directory, but to keep us on track with the
    open source world, we will see and use the OpenLDAP tool.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, you will use a ready-to-use OpenLDAP server as the installation
    of the OpenLDAP server is out of the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Nonetheless, we will use the LDAP structure defined in the following LDIF file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://raw.githubusercontent.com/foogaro/wildfly-cookbook/master/rbac.ldif](https://raw.githubusercontent.com/foogaro/wildfly-cookbook/master/rbac.ldif)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'By the way, if you want a deep dive into OpenLDAP, you can rely on the excellent
    book *Mastering OpenLDAP: Configuring, Securing and Integrating Directory Services*,
    *Matt Butcher*, *Packt Publishing*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, let''s first create an `ad-hoc` folder to run our WildFly.
    In a terminal window enter the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Now it's time to run our WildFly.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open a terminal window and execute the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once started, in a new terminal window, connect to the CLI and switch to the
    RBAC provider, as we did in the previous recipes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that we''ve successfully switched to the RBAC provider, we need to map
    our local management user (if you are following the book, you''ll know it is `wildfly`)
    to the **SuperUser** role, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that we''ve completely switched to the RBAC provider, we need to configure
    the LDAP connection and its grouping filter. Stop WildFly, open the `standalone.xml`
    file, and then add the following `security-realm`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, just right after the `</security-realms>` XML closing tag, add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Map distinguish name (the `dn` attribute), to whatever fits your current LDAP
    system. Do the same for the `search-credential` attribute which represents the
    password used by the `admin` user, specified at the beginning of the `dn` attribute:
    `cn=Manager`.'
  prefs: []
  type: TYPE_NORMAL
- en: Also keep in mind that in a production environment you would use the LDAP protocol
    over SSL, which transmit credentials in a secure way. Thus the URL would be `ldaps://secureldap.intranet:636`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Keep your `standalone.xml` file open and apply the following changes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Find the following definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace it with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That's all we have to do to integrate LDAP with RBAC for our management console.
  prefs: []
  type: TYPE_NORMAL
- en: 'I''ve populated the OpenLDAP server with the `rbac.ldif` file, and have referenced
    `user1` to the custom groups on OpenLDAP itself. The following is an extraction
    of such a configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to map the OpenLDAP groups to WildFly''s built-in roles, as described
    in the *Managing users, groups, and their role mapping* recipe, such that `user1`
    would have the roles **Deployers**, **Operators**, and **Maintainer**. Please
    bind the groups and roles as depicted in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/3744_12_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, if you try to log out and log back into the WildFly Web Console with the
    user `user1`, you will be first prompted for credentials for the LDAPRealm, as
    depicted in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/3744_12_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, you will login with proper roles, as depicted in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/3744_12_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the user `user1` is logged in with the roles of **Operator**,
    **Maintainer**, and **Deployer**.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First we needed to switch the provider, passing from `simple` to `rbac` using
    the CLI.
  prefs: []
  type: TYPE_NORMAL
- en: 'Secondly, we needed to include our management user `wildfly` in the `SuperUser`
    role, which resulted in the following configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Then we added a new security-realm named LDAPRealm. In it, we defined the authentication
    and authorization process, which involved setting the proper LDAP distinguish
    names.
  prefs: []
  type: TYPE_NORMAL
- en: In order to connect to the LDAP, we had to create a connection reference using
    the outbound-connections directive.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we mapped the HTTP management interface, the WildFly console, to the
    LDAPRealm realm.
  prefs: []
  type: TYPE_NORMAL
- en: Because of the structure of the `rbac.ldif` file, where the group that the user
    belongs to is mapped into the group itself, we had to instruct the `group-search`
    element instead of the `user-to-dn` element.
  prefs: []
  type: TYPE_NORMAL
