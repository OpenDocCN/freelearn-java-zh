["```java\npackage io.vertx.core;\npublic interface Verticle {\n  Vertx getVertx();\n  void init(Vertx vertx, Context context);\n  void start(Future<Void> future) throws Exception;\n  void stop(Future<Void> future) throws Exception;\n}\n```", "```java\npackage io.vertx.rxjava.core;\nimport io.vertx.core.Context;\nimport io.vertx.core.Vertx;\npublic class AbstractVerticle \n               extends io.vertx.core.AbstractVerticle {\n  protected io.vertx.rxjava.core.Vertx vertx;\n  public void init(Vertx vertx, Context context) {\n     super.init(vertx, context);\n     this.vertx = new io.vertx.rxjava.core.Vertx(vertx);\n  }\n}\n```", "```java\npackage io.vertx.core;\nimport io.vertx.core.json.JsonObject;\nimport java.util.List;\npublic abstract class AbstractVerticle \n                               implements Verticle {\n    protected Vertx vertx;\n    protected Context context;\n    public Vertx getVertx() { return vertx; }\n    public void init(Vertx vertx, Context context) {\n        this.vertx = vertx;\n        this.context = context;\n    }\n    public String deploymentID() {\n        return context.deploymentID();\n    }\n    public JsonObject config() {\n        return context.config();\n    }\n    public List<String> processArgs() {\n        return context.processArgs();\n    }\n    public void start(Future<Void> startFuture) \n                                throws Exception {\n        start();\n        startFuture.complete();\n    }\n    public void stop(Future<Void> stopFuture) \n                                throws Exception {\n        stop();\n        stopFuture.complete();\n    }\n    public void start() throws Exception {}\n    public void stop() throws Exception {}\n\n}\n```", "```java\n<dependency>\n    <groupId>io.vertx</groupId>\n    <artifactId>vertx-web</artifactId>\n    <version>${vertx.version}</version>\n</dependency>\n\n<dependency>\n    <groupId>io.vertx</groupId>\n    <artifactId>vertx-rx-java</artifactId>\n    <version>${vertx.version}</version>\n</dependency>\n```", "```java\nimport io.vertx.rxjava.core.http.HttpServer;\nimport io.vertx.rxjava.core.AbstractVerticle;\n\npublic class Server extends AbstractVerticle{\n  private int port;\n  public Server(int port) {\n    this.port = port;\n  }\n  public void start() throws Exception {\n    HttpServer server = vertx.createHttpServer();\n    server.requestStream().toObservable()\n       .subscribe(request -> request.response()\n       .end(\"Hello from \" + \n          Thread.currentThread().getName() + \n                       \" on port \" + port + \"!\\n\\n\")\n       );\n    server.rxListen(port).subscribe();\n    System.out.println(Thread.currentThread().getName()\n               + \" is waiting on port \" + port + \"...\");\n  }\n}\n```", "```java\nimport io.vertx.rxjava.core.RxHelper;\nimport static io.vertx.rxjava.core.Vertx.vertx;\npublic class Demo01Microservices {\n  public static void main(String... args) {\n    RxHelper.deployVerticle(vertx(), new Server(8082));\n    RxHelper.deployVerticle(vertx(), new Server(8083));\n  }\n}\n```", "```java\n<plugin>\n  <groupId>org.apache.maven.plugins</groupId>\n  <artifactId>maven-shade-plugin</artifactId>\n  <version>2.3</version>\n  <executions>\n    <execution>\n      <phase>package</phase>\n      <goals>\n        <goal>shade</goal>\n      </goals>\n      <configuration>\n        <transformers>\n          <transformer\n            implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\">\n            <manifestEntries>\n              <Main-Class>io.vertx.core.Starter</Main-Class>\n              <Main-Verticle>io.vertx.blog.first.MyFirstVerticle</Main-Verticle>\n            </manifestEntries>\n          </transformer>\n        </transformers>\n        <artifactSet/>\n        <outputFile>${project.build.directory}/${project.artifactId}-${project.version}-fat.jar</outputFile>\n      </configuration>\n    </execution>\n  </executions>\n</plugin>\n```", "```java\nmvn package\n\n```", "```java\nMain-Class: io.vertx.core.Starter\nMain-Verticle: io.vertx.blog.first.MyFirstVerticle\n```", "```java\njava -jar target/my-first-app-1.0-SNAPSHOT-fat.jar\n\n```", "```java\npublic void start() throws Exception {\n    HttpServer server = vertx.createHttpServer();\n    server.requestStream().toObservable()\n       .subscribe(request -> request.response()\n       .end(\"Hi, \" + request.getParam(\"name\") + \n             \"! Hello from \" + \n             Thread.currentThread().getName() + \n                       \" on port \" + port + \"!\\n\\n\")\n       );\n    server.rxListen(port).subscribe();\n    System.out.println(Thread.currentThread().getName()\n               + \" is waiting on port \" + port + \"...\");\n}\n```", "```java\nimport io.vertx.rxjava.core.AbstractVerticle;\nimport io.vertx.rxjava.core.http.HttpClient;\nimport java.time.LocalTime;\nimport java.time.temporal.ChronoUnit;\n\npublic class Client extends AbstractVerticle {\n  private int port;\n  public Client(int port) {\n    this.port = port;\n  }\n  public void start() throws Exception {\n    HttpClient client = vertx.createHttpClient();\n    LocalTime start = LocalTime.now();\n    vertx.setPeriodic(1000, v -> {\n       client.getNow(port, \"localhost\", \"?name=Nick\",\n         r -> r.bodyHandler(System.out::println));\n         if(ChronoUnit.SECONDS.between(start, \n                             LocalTime.now()) > 3 ){\n           vertx.undeploy(deploymentID());\n       }\n    });\n  }\n}\n```", "```java\nRxHelper.deployVerticle(vertx(), new Server2(8082));\nRxHelper.deployVerticle(vertx(), new Client(8082));\n```", "```java\n<dependency>\n    <groupId>io.vertx</groupId>\n    <artifactId>vertx-jdbc-client</artifactId>\n    <version>${vertx.version}</version>\n</dependency>\n```", "```java\npublic class DbHandler {\n  private JDBCClient dbClient;\n  private static String SQL_CREATE_WHO_CALLED = \n    \"CREATE TABLE IF NOT EXISTS \" +\n          \"who_called ( name VARCHAR(10), \" +\n          \"create_ts TIMESTAMP(6) DEFAULT now() )\";\n  private static String SQL_CREATE_PROCESSED = \n    \"CREATE TABLE IF NOT EXISTS \" +\n         \"processed ( name VARCHAR(10), \" +\n         \"length INTEGER, \" +\n         \"create_ts TIMESTAMP(6) DEFAULT now() )\";\n\n  public DbHandler(Vertx vertx){\n    JsonObject config = new JsonObject()\n      .put(\"driver_class\", \"org.hsqldb.jdbcDriver\")\n      .put(\"url\", \"jdbc:hsqldb:mem:test?shutdown=true\");\n    dbClient = JDBCClient.createShared(vertx, config);\n    dbClient.rxGetConnection()\n      .flatMap(conn -> \n                 conn.rxUpdate(SQL_CREATE_WHO_CALLED)\n                       .doAfterTerminate(conn::close) )\n      .subscribe(r -> \n        System.out.println(\"Table who_called created\"),\n                           Throwable::printStackTrace);\n    dbClient.rxGetConnection()\n      .flatMap(conn -> \n                 conn.rxUpdate(SQL_CREATE_PROCESSED)\n                      .doAfterTerminate(conn::close) )\n      .subscribe(r -> \n        System.out.println(\"Table processed created\"),\n                          Throwable::printStackTrace);\n\n  }\n}\n```", "```java\nprivate static String SQL_INSERT_WHO_CALLED = \n             \"INSERT INTO who_called(name) VALUES (?)\";\npublic void insert(String name, Action1<UpdateResult> \n                onSuccess, Action1<Throwable> onError){\n  printAction(\"inserts \" + name);\n  dbClient.rxGetConnection()\n    .flatMap(conn -> \n        conn.rxUpdateWithParams(SQL_INSERT_WHO_CALLED, \n                            new JsonArray().add(name))\n                       .doAfterTerminate(conn::close) )\n    .subscribe(onSuccess, onError);\n}\n```", "```java\nprivate void printAction(String action) {  \n  System.out.println(this.getClass().getSimpleName() \n                                     + \" \" + action);\n}\n```", "```java\nprivate static String SQL_SELECT_TO_PROCESS = \n  \"SELECT name FROM who_called w where name not in \" +\n  \"(select name from processed) order by w.create_ts \" +\n  \"for update\";\nprivate static String SQL_INSERT_PROCESSED = \n     \"INSERT INTO processed(name, length) values(?, ?)\";\npublic void process(Func1<JsonArray, Observable<JsonArray>> \n                     process, Action1<Throwable> onError) {\n  printAction(\"process all records not processed yet\");\n  dbClient.rxGetConnection()\n    .flatMapObservable(conn -> \n       conn.rxQueryStream(SQL_SELECT_TO_PROCESS)\n           .flatMapObservable(SQLRowStream::toObservable)\n           .flatMap(process)\n           .flatMap(js -> \n              conn.rxUpdateWithParams(SQL_INSERT_PROCESSED, js)\n                  .flatMapObservable(ur->Observable.just(js)))\n           .doAfterTerminate(conn::close))\n    .subscribe(js -> printAction(\"processed \" + js), onError);\n}\n```", "```java\nprivate static String SQL_READ_PROCESSED = \n  \"SELECT name, length, create_ts FROM processed \n                       order by create_ts desc limit ?\";\npublic void readProcessed(String count, Action1<ResultSet> \n                  onSuccess, Action1<Throwable> onError) {\n  printAction(\"reads \" + count + \n                            \" last processed records\");\n  dbClient.rxGetConnection()\n   .flatMap(conn -> \n      conn.rxQueryWithParams(SQL_READ_PROCESSED, \n                          new JsonArray().add(count))\n                      .doAfterTerminate(conn::close) )\n   .subscribe(onSuccess, onError);\n}\n```", "```java\npublic class DbServiceHttp extends AbstractVerticle {\n  private int port;\n  private DbHandler dbHandler;\n  public DbServiceHttp(int port) {\n    this.port = port;\n  }\n  public void start() throws Exception {\n    System.out.println(this.getClass().getSimpleName() + \n                            \"(\" + port + \") starts...\");\n    dbHandler = new DbHandler(vertx);\n    Router router = Router.router(vertx);\n    router.put(\"/insert/:name\").handler(this::insert);\n    router.get(\"/process\").handler(this::process);\n    router.get(\"/readProcessed\")\n                         .handler(this::readProcessed);\n    vertx.createHttpServer()\n          .requestHandler(router::accept).listen(port);\n  }\n}\n```", "```java\nprivate void insert(RoutingContext routingContext) {\n  HttpServerResponse response = routingContext.response();\n  String name = routingContext.request().getParam(\"name\");\n  printAction(\"insert \" + name);\n  Action1<UpdateResult> onSuccess = \n    ur -> response.setStatusCode(200).end(ur.getUpdated() + \n                 \" record for \" + name + \" is inserted\");\n  Action1<Throwable> onError = ex -> {\n    printStackTrace(\"process\", ex);\n    response.setStatusCode(400)\n        .end(\"No record inserted due to backend error\");\n  };\n  dbHandler.insert(name, onSuccess, onError);\n}\n```", "```java\nprivate void process(RoutingContext routingContext) {\n  HttpServerResponse response = routingContext.response();\n  printAction(\"process all\");\n  response.setStatusCode(200).end(\"Processing...\");\n  Func1<JsonArray, Observable<JsonArray>> process = \n    jsonArray -&gt; { \n      String name = jsonArray.getString(0);\n      JsonArray js = \n            new JsonArray().add(name).add(name.length());\n       return Observable.just(js);\n  };\n  Action1<Throwable> onError = ex -> {\n     printStackTrace(\"process\", ex);\n     response.setStatusCode(400).end(\"Backend error\");\n  };\n  dbHandler.process(process, onError);\n}\n```", "```java\nprivate void readProcessed(RoutingContext routingContext) {\n  HttpServerResponse response = routingContext.response();\n  String count = routingContext.request().getParam(\"count\");\n  printAction(\"readProcessed \" + count + \" entries\");\n  Action1<ResultSet> onSuccess = rs -> {\n     Observable.just(rs.getResults().size() > 0 ? \n       rs.getResults().stream().map(Object::toString)\n                   .collect(Collectors.joining(\"\\n\")) : \"\")\n       .subscribe(s -> response.setStatusCode(200).end(s) );\n  };\n  Action1<Throwable> onError = ex -> {\n      printStackTrace(\"readProcessed\", ex);\n      response.setStatusCode(400).end(\"Backend error\");\n  };\n  dbHandler.readProcessed(count, onSuccess, onError);\n}\n```", "```java\nRxHelper.deployVerticle(vertx(), new DbServiceHttp(8082));\n```", "```java\nDbServiceHttp(8082) starts...\nTable processed created\nTable who_called created\n```", "```java\npublic class DbServiceBus extends AbstractVerticle {\n  private int id;\n  private String instanceId;\n  private DbHandler dbHandler;\n  public static final String INSERT = \"INSERT\";\n  public static final String PROCESS = \"PROCESS\";\n  public static final String READ_PROCESSED \n                              = \"READ_PROCESSED\";\n  public DbServiceBus(int id) { this.id = id; }\n  public void start() throws Exception {\n    this.instanceId = this.getClass().getSimpleName()\n                                     + \"(\" + id + \")\";\n    System.out.println(instanceId + \" starts...\");\n    this.dbHandler = new DbHandler(vertx);\n    vertx.eventBus().consumer(INSERT).toObservable()\n      .subscribe(msg -> {\n         printRequest(INSERT, msg.body().toString());\n         Action1<UpdateResult> onSuccess \n                               = ur -> msg.reply(...);\n         Action1<Throwable> onError \n                   = ex -> msg.reply(\"Backend error\");\n         dbHandler.insert(msg.body().toString(), \n                                 onSuccess, onError);\n    });\n\n    vertx.eventBus().consumer(PROCESS).toObservable()\n        .subscribe(msg -> {\n                  .....\n                 dbHandler.process(process, onError);\n        });\n\n    vertx.eventBus().consumer(READ_PROCESSED).toObservable()\n        .subscribe(msg -> {\n                 ...\n            dbHandler.readProcessed(msg.body().toString(), \n                                        onSuccess, onError);\n        });\n    }\n```", "```java\nvoid demo_DbServiceBusSend() {\n  Vertx vertx = vertx();\n  RxHelper.deployVerticle(vertx, new DbServiceBus(1));\n  RxHelper.deployVerticle(vertx, new DbServiceBus(2));\n  delayMs(200);\n  String[] msg1 = {\"Mayur\", \"Rohit\", \"Nick\" };\n  RxHelper.deployVerticle(vertx, \n    new PeriodicServiceBusSend(DbServiceBus.INSERT, msg1, 1));\n  String[] msg2 = {\"all\", \"all\", \"all\" };\n  RxHelper.deployVerticle(vertx, \n    new PeriodicServiceBusSend(DbServiceBus.PROCESS, msg2, 1));\n  String[] msg3 = {\"1\", \"1\", \"2\", \"3\" };\n  RxHelper.deployVerticle(vertx, \n     new PeriodicServiceBusSend(DbServiceBus.READ_PROCESSED, \n                                                     msg3, 1));\n}\n```", "```java\nvoid delayMs(int ms){\n    try {\n        TimeUnit.MILLISECONDS.sleep(ms);\n    } catch (InterruptedException e) {}\n}\n```", "```java\npublic class PeriodicServiceBusSend \n                           extends AbstractVerticle {\n  private EventBus eb;\n  private LocalTime start;\n  private String address;\n  private String[] caller;\n  private int delaySec;\n  public PeriodicServiceBusSend(String address, \n                     String[] caller, int delaySec) {\n        this.address = address;\n        this.caller = caller;\n        this.delaySec = delaySec;\n  }\n  public void start() throws Exception {\n    System.out.println(this.getClass().getSimpleName() \n      + \"(\" + address + \", \" + delaySec + \") starts...\");\n    this.eb = vertx.eventBus();\n    this.start  = LocalTime.now();\n    vertx.setPeriodic(delaySec * 1000, v -> {\n       int i = (int)ChronoUnit.SECONDS.between(start,\n                                    LocalTime.now()) - 1;\n       System.out.println(this.getClass().getSimpleName()\n          + \" to address \" + address + \": \" + caller[i]);\n       eb.rxSend(address, caller[i]).subscribe(reply -> {\n         System.out.println(this.getClass().getSimpleName() \n                    + \" got reply from address \" + address \n                               + \":\\n    \" + reply.body());\n          if(i + 1 >= caller.length ){\n               vertx.undeploy(deploymentID());\n          }\n       }, Throwable::printStackTrace);\n    });\n  }\n}\n```", "```java\nString[] msg1 = {\"Mayur\", \"Rohit\", \"Nick\" };\nRxHelper.deployVerticle(vertx, \n  new PeriodicServiceBusSend(DbServiceBus.INSERT, msg1, 1));\nRxHelper.deployVerticle(vertx, \n  new PeriodicServiceBusSend(DbServiceBus.INSERT, msg1, 1));\nRxHelper.deployVerticle(vertx, \n  new PeriodicServiceBusSend(DbServiceBus.INSERT, msg1, 1));\nRxHelper.deployVerticle(vertx, \n  new PeriodicServiceBusSend(DbServiceBus.INSERT, msg1, 1));\n```", "```java\nString[] msg3 = {\"1\", \"1\", \"2\", \"8\" };\nRxHelper.deployVerticle(vertx, \n  new PeriodicServiceBusSend(DbServiceBus.READ_PROCESSED, \n                                               msg3, 1));\n```", "```java\nPeriodicServiceBusPublish(String address, String[] caller, int delaySec) {\n  ...\n  vertx.setPeriodic(delaySec * 1000, v -> {\n    int i = (int)ChronoUnit.SECONDS.between(start, \n                                      LocalTime.now()) - 1;\n    System.out.println(this.getClass().getSimpleName()\n            + \" to address \" + address + \": \" + caller[i]);\n    eb.publish(address, caller[i]);\n    if(i + 1 == caller.length ){\n        vertx.undeploy(deploymentID());\n    }\n  });\n}\n```", "```java\nVertx vertx = vertx();\nRxHelper.deployVerticle(vertx, new DbServiceBus(1));\nRxHelper.deployVerticle(vertx, new DbServiceBus(2));\ndelayMs(200);\nString[] msg1 = {\"Mayur\", \"Rohit\", \"Nick\" };\nRxHelper.deployVerticle(vertx, \n  new PeriodicServiceBusPublish(DbServiceBus.INSERT, \n                                               msg1, 1));\ndelayMs(200);\nString[] msg2 = {\"all\", \"all\", \"all\" };\nRxHelper.deployVerticle(vertx, \n  new PeriodicServiceBusSend(DbServiceBus.PROCESS, \n                                               msg2, 1));\nString[] msg3 = {\"1\", \"1\", \"2\", \"8\" };\nRxHelper.deployVerticle(vertx, \n  new PeriodicServiceBusSend(DbServiceBus.READ_PROCESSED, \n                                               msg3, 1));\n```", "```java\n$ java -jar myfatjar.jar\n\n```", "```java\n$ docker run mygreatapplication\n\n```"]