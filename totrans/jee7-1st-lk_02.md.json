["```java\n        \t<resource-env-ref>\n        \t  <resource-env-ref-name>\n        \t    concurrent/ReportGenerator\n        \t  </resource-env-ref-name>\n        \t  <resource-env-ref-type>\n        \t    javax.enterprise.concurrent.ManagedExecutorService\n        \t  </resource-env-ref-type>\n        \t</resource-env-ref>\n        ```", "```java\n        \t@Resource(name=\"concurrent/ReportGenerator\")\n        \tManagedExecutorService reportGenerator;\n        ```", "```java\n        \tpublic class ReportGeneratorTask implements Callable<String>{\n\n        \t  @Override\n        \t  public String call() throws Exception {\n        \t    //generate report\n        \t    return \"The report was generated successfully\";\n        \t  }   \n        \t}\n        ```", "```java\n        \tFuture<String> monitor = reportGenerator\n        \t.submit(new ReportGeneratorTask());\n        \tString result = monitor.get();         \n        ```", "```java\n        \tFuture<String> monitor = reportGenerator\n        \t  .schedule(new ReportGeneratorTask(), 10,TimeUnit.SECONDS);\n        ```", "```java\n    Thread myThread = threadFactory.newThread(new ReportManagedThread()); \n    myThread.start();\n    ```", "```java\n    public class ReportCustomizedThread implements Runnable {\n\n      public void run() {\n        //Report processing ...\n      }\n    }\n\n    @Resource(name=»concurrent/ReportManagedThreadGenerator»)\n    ManagedThreadFactory threadFactory;\n\n    @Resource(name=»concurrent/ReportContextServiceGenerator»)\n    ContextService contextService; \n\n    ReportCustomizedThread reportThread = new ReportCustomizedThread();\n    Runnable proxy =contextService.createContextualProxy(reportThread,Runnable.class);\n    ExecutorService executorService =Executors.newFixedThreadPool(20, threadFactory);\n    Future result = executorService.submit(proxy);\n    //...\n    ```", "```java\n<job id=\"inscription-validator-Job\" version=\"1.0\">  \n\n  <step id=\"step1\" >        \n    ... \n  </step>    \n  <step id=\"step2\" >        \n    ...   \n  </step>\n</job>\n```", "```java\n<job id=\"inscription-validator-Job\" version=\"1.0\">\n  <step id=\"validate-notify\" >        \n    <chunk>\n       <reader ref=\"InscriptionReader\" />\n       <processor ref=\"InscriptionProcessor\" />\n       <writer ref=\"StudentNotifier\" />\n    </chunk>     \n  </step>    \n</job>\n```", "```java\n<job id=\"inscription-validator-Job\" version=\"1.0\" \n  >   \n  <step id=\"validate-notify\" >        \n    <chunk item-count=\"15\" checkpoint-policy=\"item\" \n      skip-limit=\"30\">\n      <reader ref=\"InscriptionReader\" />\n      <processor ref=\"InscriptionProcessor\" />\n      <writer ref=\"StudentNotifier\" />\n    </chunk>     \n  </step>    \n</job>\n```", "```java\npublic class InscriptionReader extends AbstractItemReader {\n  @Override\n  public Object readItem() throws Exception {\n    //Read data and return the item\n  }\n}\n\npublic class InscriptionProcessor implements ItemProcessor{\n  @Override\n  public Object processItem(Object o) throws Exception {\n    //Receive item from the reader, process and return the result\n  }    \n}\n\npublic class StudentNotifier extends AbstractItemWriter {\n  @Override\n  public void writeItems(List<Object> items) throws Exception {\n    //Receive items from the processor then write it out\n  }\n}\npublic class InscriptionCheckpoint implements Serializable {\n  private int lineNumber;\n\n  public void incrementLineNumber(){\n    lineNumber++;\n  }\n\n  public int getLineNumber() {\n    return lineNumber;\n  }        \n}\n```", "```java\npublic class StudentInformation extends AbstractBatchlet{\n\n  @Override\n  public String process() throws Exception {\n    // process \n    return \"COMPLETED\";\n  }    \n}\n```", "```java\n<batch-artifacts > \n  <ref id=\"InscriptionReader\" \n  class=\"com.packt.ch02.batchprocessing.chunk.InscriptionReader\" /> \n  <ref id=\"StudentNotifier\" \n  class=\"com.packt.ch02.batchprocessing.chunk.StudentNotifier\" /> \n  <ref id=\"InscriptionProcessor\" \n  class=\"com.packt.ch02.batchprocessing.chunk.InscriptionProcessor\" /> \n</batch-artifacts>\n```", "```java\nJobOperator jobOperator = BatchRuntime.getJobOperator();\nif(jobOperator != null)\n  jobOperator.start(\"inscriptionJob\", null);\n```", "```java\n{\"name\":\"Malinda\",\"gender\":\"F\",\"birthday\":\"14/03/1976\",\"weight\":78.5}\n```", "```java\n[{\"name\":\"Amanda\",\"score\"=12.9},{\"name\":\"Paolo\",\"score\"=14},{\"name\":\"Zambo\",\"score\"=12.3}]\n```", "```java\n<student>\n  <id>854963</id>\n  <name>LouisPoyer</name>\n  <weight>78.6</weight>\n  <gender>M</gender>\n  <contact>\n    <address>Rue9632</address>\n    <phone>985-761-0</phone>\n  </contact>   \n</student>\n```", "```java\n{\"student\": {\n  \"id\":\"854963\", \n  \"name\":\"LouisPoyer\", \n  \"weight\":78.6,\n  \"gender\":\"M\",\n  \"contact\":[\n    {\"address\":\"Rue632\"},\n    {\"phone\":\"985-761-0\"} ]\n  }  \n}\n```", "```java\npublic String getStudentContact(String jsonData) {\n  JsonParser parser = Json.createParser(new StringReader(jsonData));\n  Event event = null;\n  boolean found = false;\n  String information = \"\";\n\n  //Advance to the contact key\n  while (parser.hasNext()) {\n    event = parser.next();            \n    if ((event == Event.KEY_NAME) && \n      \"contact\".equals(parser.getString())) {\n        found = true;\n        event = parser.next();              \n        break;\n      }\n    }\n\n    if (!found) {\n      return \"contact information does not exist\";\n    }\n\n    //get contact information \n    while (event != Event.END_ARRAY) {         \n    switch (event) {\n      case KEY_NAME:\n        information += parser.getString() + \" = \";\n        break;\n      case START_ARRAY: break;\n      case END_ARRAY: break;\n      case VALUE_FALSE: break;\n      case VALUE_NULL: break;\n      case VALUE_NUMBER:\n        if (parser.isIntegralNumber()) {\n          information += parser.getLong()+\", \";\n        } else {\n          information += parser.getBigDecimal()+\", \";\n        }\n        break;\n      case VALUE_STRING:\n        information += parser.getString()+\", \";\n        break;\n      case VALUE_TRUE:\n        information += \" TRUE, \";\n        break;\n    }\n    event = parser.next();\n  }\n  return information;\n}\n```", "```java\nJsonObject objModel = Json.createObjectBuilder()\n.add(\"student\",Json.createObjectBuilder()\n  .add(\"id\", \"854963\")\n  .add(\"name\", \"Louis Poyer\")\n  .add(\"weight\", 78.6)\n  .add(\"gender\",\"M\")\n  .add(\"contact\",Json.createArrayBuilder()\n    .add(Json.createObjectBuilder()\n    .add(\"address\",\"Rue 632\"))\n    .add(Json.createObjectBuilder()\n    .add(\"phone\",\"985-761-0\")))                        \n).build();\n\nJsonObject student = objModel.getJsonObject(\"student\");\nString name = student.getString(\"name\");\nJsonArray contact = student.getJsonArray(\"contact\");\nString address = contact.getJsonObject(0).getString(\"address\");\nString phone = contact.getJsonObject(1).getString(\"phone\"));\n```", "```java\n@ServerEndpoint(\"/chatserver\")\npublic class ChatServerEndPoint {    \n  @OnOpen\n  public void openConnection(Session session) throws Exception {\n    //...\n  }\n\n  @OnMessage\n  public void onMessage(Session session, String msg)throws Exception {\n    //...\n  }\n\n  @OnClose\n  public void closeConnection(Session session) throws Exception {\n    //...\n  }\n}\n```", "```java\nstatic Set<Session> users = Collections.synchronizedSet(new HashSet());\n\n  @OnOpen\n  public void openConnection(Session session) throws Exception {\n    users.add(session);        \n  }\n\n  @OnMessage\n  public void onMessage(Session session, String msg)throws Exception {\n    for (Session s : users) {\n      s.getBasicRemote().sendText(msg);\n    }\n  }\n```", "```java\n//...\nstatic Set<String> usersId = Collections.synchronizedSet(new HashSet());\n//...\n\n@OnMessage\n  public void onMessage(Session session, String msg)throws Exception {\n    if (msg.startsWith(\"ID\")) {//if it is a connection message\n      String id = msg.split(\"-\")[1];\n      session.getUserProperties().put(\"id\", id);\n      //save the ID of the user\n      usersId.add(id);\n      //add the ID in the list of connected users\n      Object[] obj1 = new Object[]{\"wel\",\"Welcome to the chat room \"+id +\"!\"};\n      String jsonString = getJsonObject(obj1);\n      //json message transformation\n      //send a welcome message to the new user\n      session.getBasicRemote().sendText(jsonString);\n      //send the list of connected users to all users\n      Object[] obj2 = new Object[]{\"users\",usersId};\n      jsonString = getJsonObject(obj2);\n      for (Session s : users) {\n        s.getBasicRemote().sendText(jsonString);\n      }\n    } else { //if it is a message to the chat room\n      //get ID of the user who sends message\n      String id = (String) session.getUserProperties().get(\"id\");\n      Object[] obj = new Object[]{\"msg\",id + \">>\" + msg.split(\"-\")[1]};\n      String jsonString = getJsonObject(obj);//json transformation\n      //sends the message to all connected users\n      for (Session s : users) {\n        s.getBasicRemote().sendText(jsonString);\n      }\n    }\n  }\n```", "```java\n//complete URI of the chat server endpoint\nvar clientUri = \"ws://\"+document.location.host+\"/chapter02NewSpecifications/chatserver\";\nvar wsocket;\n\n//connection request when loading the web page\nwindow.addEventListener(\"load\", connect, false);\n\n//Connection method\nfunction connect() {\n  wsocket = new WebSocket(clientUri);\n  //binding of the websocket lifecycle methods\n  wsocket.onmessage = onMessage;\n  wsocket.onerror = onError;\n}\n\nfunction joinChatRoom() {//method to join the chat room\n    wsocket.send(\"ID-\" + txtMessage.value);\n}\n\nfunction sendMessage() {//method to send a message to the chat room\n    wsocket.send(\"M-\" + txtMessage.value);\n}\n\nfunction onMessage(event) {//method to perform incoming messages\n  var parsedJSON = eval('(' + event.data + ')');\n  if (parsedJSON.wel != null) {//if welcome message\n    userState.innerHTML = parsedJSON.wel;\n  }\n  if (parsedJSON.msg != null) {//if chat room message\n    userMessage.innerHTML += \"\\n\"+parsedJSON.msg;\n  }\n  if (parsedJSON.users.length > 0) {//if new new connection user\n    userId.innerHTML = \"\";\n    for (i = 0; i < parsedJSON.users.length; i++) {\n      userId.innerHTML += i + \"-\" + parsedJSON.users[i] + \"\\n\";\n    }\n  }\n}\n```"]