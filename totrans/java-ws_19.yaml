- en: Appendix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: About
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section is included to assist the students to perform the activities present
    in the book. It includes detailed steps that are to be performed by the students
    to complete and achieve the objectives of the book.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Getting Started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 1: Obtaining the Minimum of Two Numbers'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Declare `3` double variables: `a`, `b`, and `m`. Initialize them with the values
    `3`, `4` and `0` respectively'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a `String` variable `r`, it should contain the output message to be printed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use the `min()` method to obtain the minimum of the two numbers and store the
    value in `m`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Print the results.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The complete code for this activity can be found here: [https://packt.live/2MFtRNM](https://packt.live/2MFtRNM)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 2\. Learning the Basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 1: Taking Input and Comparing Ranges'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `main()`, introduce an `if` statement to check if the arguments entered
    are of the right length:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Parse these arguments as `int` values and save them in variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check the different values entered to see whether the blood pressure is in
    the desired range using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 3\. Object-Oriented Programming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 1: Adding the Frequency-of-Symbol Calculation to WordTool'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a method to the previously created `WordTool` class to calculate the frequency
    of a certain symbol. To do so, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a method to count the number of words in a string.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add a method to count the number of letters in a string and add the possibility
    of separating the case of having whitespaces or not.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add a method to calculate the frequency of a certain symbol.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the main class, create an object of the `WordTool` class and add a string
    variable containing a line of text of your choice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add a variable to contain the symbol to look for in the text, and choose a symbol,
    in this case '`e`'. As it is a character, use single quotes to delimit it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add code inside the main method to print out the calculations made by `WordTool`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 2: Adding Documentation to WordTool'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you document each one of the examples and add enough metadata for
    people to know how to handle the different methods.
  prefs: []
  type: TYPE_NORMAL
- en: Include an introduction comment to the class, you should at least include a
    short text, the `@author`, `@version`, and `@since` parameters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add an explanation to the `wordCount` method, remember including the parameters
    and the expected outcome to the method as `@param` and `@return`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Do the same for `symbolCount`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Do not forget the last method in the class, `getFrequency`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You are now ready to export the documentation file from this example.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The documentation site resulting from this activity should look like the one
    displayed in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.12: Documentation Site'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C13927_03_12.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.12: Documentation Site'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Collections, List, and Java's Built-In APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 1: Searching for Multiple Occurrences in an Array'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: Create the `text` array.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the variable that contains the word to be searched for: so'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Initialize the variable occurrence to `-1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a `for` loop to iterate through the array to check for the occurrence.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The complete code for this activity can be found here: [https://packt.live/35RQ9Ud](https://packt.live/35RQ9Ud)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Activity 2: Iterating through Large Lists'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: To start, you should create a randomly sized list containing random numbers.
    Create the list that you will use to contain the numbers later. You will store
    numbers of the type `Double`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Define next the size of the list using a variable that we name `numNodes`. Make
    the variable of type `long`. Since the random method does NOT generate that type,
    you need to cast the outcome.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use a `for` loop to iterate through the list and create each one of the elements
    in it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To compute the average, you could create an iterator that will go through the
    list of values and add the weighted value corresponding to each element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The value coming from the `iterator.next()` method must be cast into a `Double`
    before it can be weighed against the total number of elements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Do not forget to print out the results.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The complete code for this activity can be found here: [https://packt.live/35Yvo9m](https://packt.live/35Yvo9m)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 5\. Exceptions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 1: Designing an Exception Class Logging Data'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the relevant classes needed for this program to work: `NoSuchFileException`
    and `logging`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Make your own methods for issuing exceptions, start by creating one for the
    `NullPointerException` case.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will also need a method for the case the file is not found: `NoSuchFileException`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Back to the `Main` method, create the `logger` object that will be reporting
    the exceptions and their severity level.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Capture the argument passed to the script via the CLI and store it in a variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Discriminate among the possible exceptions to log using a switch-case statement.
    Remember catching the exceptions with try-catch.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 6\. Libraries, Packages, and Modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 1: Tracking Summer High Temperatures'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an IntelliJ Gradle project. Modify `settings.gradle` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify `build.gradle` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `class` named `City`. Add the following fields and constructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Right-click inside the class. Choose `Generate`, and then `Getter and Setter`.
    Select all the fields and click `OK`. This will generate the getter and setter
    methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a method to convert degrees to Fahrenheit. This method uses the `TempConverter`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `class` named `SummerHigh` to hold the city information for summer
    high temperatures. Enter the following properties and constructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Right-click inside the class. Choose `Generate`, and then `Getter and Setter`.
    Select all the fields and click `OK`. This will generate the getter and setter
    methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enter a format method in order to render the output readable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This code makes use of the `City` `class` `format()` method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a class called `SummerHighs`. This class holds a table of `SummerHigh`
    objects. Enter the following field and constructor to initialize the table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enter a method to get summer high temperature information by `city`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This method uses the `Guava` library Table class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Enter a method to get summer high temperature information by `country`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This method also uses the `Guava` library's Table class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now create a number of convenience methods to make adding cities easier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, create a method to initialize the summer high temperature data described
    previously:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a class named `Main` to run our program. Then, create a `main()` method
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, create a class named `TempConverter` to convert from degrees Celsius
    to degrees Fahrenheit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 7\. Databases and JDBC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 1: Track Your Progress'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `student` table holds information on the `student`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `chapter` table has a `chapter number` and a `name`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that the `chapter ID` is the `chapter number`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The `student_progress` table maps a `student ID` to a `chapter ID`, indicating
    that a particular student completed a particular chapter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that by using both `student ID` and `chapter ID` as the composite `primary
    key`, each student can complete each chapter just once. There are no do-overs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Here is a hypothetical student:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that in order to make it easier to match the names, we insert all of them
    in uppercase.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following `INSERT` statements provide data for the first seven chapters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note the two single quotes used to insert text with a quote.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To add a record of `student_progress`, generate an `INSERT` statement like
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This should be done within a Java program using a `PreparedStatement`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To query for a student''s progress, use a query such as the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that the `first name` and `last name` will be input by the user. This should
    be placed in `PreparedStatement`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `ORDER BY` clause ensures that the output will appear in chapter order.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The `ShowProgress` program outputs the chapters a given student has completed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note how the input first and last names are forced to uppercase prior to searching
    the database. Also, note that we do not allow two students to have the same name.
    This is not realistic.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After querying, the program outputs the student's name and then one line for
    each chapter completed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To run this program, build the `shadowJar` task in Gradle, and then run a command
    such as the following in the IntelliJ `libs` subdirectory of the build directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The output will appear as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `RecordProgress` program adds a `student_progress` record:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To run this program, use a command such as the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will see output like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As before, the input names are forced to uppercase prior to searching the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 8\. Sockets, Files, and Streams
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 1: Writing the Directory Structure to a File'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: Import the relevant classes to get this example to work. Basically you will
    be working with collections, files, and the associated exceptions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Determine the folder you will start looking for directories from. Let's assume
    you start from `user.home`. Declare a Path object linking to that folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next you will call `File.walkFileTree`, which will allow you iterate through
    a folder structure up to a certain depth. In this case, you can set whatever depth
    you want, for example `10`. This means the program will dig up to `10` levels
    of directories looking for files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The approach in this case consists in overriding a couple of methods from `SimpleFileVisitor`
    to extract the path information and return it as a string making the file structure
    easy to read. The first method to override is `preVisitDirectory`, that is triggered
    in the class when an item in a directory happens to be a nested directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Inside `preVisitDirectory`, there is a couple of operations you will need to
    perform. First you need to calculate how deep you are in the directory structure,
    as you will need that to print blank spaces as a way to format the program's output.
    `preVisitDirectory` will get the current path as a parameter named `dir`. But
    it will also use the global path parameter (remember we start from `user.home`).
    Declare a variable called `depthInit` to store the how far you are in the directory
    structure when at path.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Repeat the operation but this time with the current directory, store the outcome
    in a variable called `depthCurrent`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use a `for` loop to print a bunch of blank spaces in front of the current folder
    name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally, print out the name of the folder/file, and exit the method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The second method to override within `SimpleFileVisitor` is `visitFileFailed`.
    This method is handling the exception that would be triggered when reading a path
    to which the user has no permission to enter, or similar. The full method looks
    like follows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Try now how the program works. You will get to see the listing of the directories
    at your home folder in a similar fashion as the following one where each block
    of four blank spaces represents deepening one more level in the folder structure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It is now a trivial exercise making the outcome be stored in a file instead
    of being simply printed out to the CLI. First you will need to declare a file
    name, in this case let's make one that will end up at the same folder where the
    Main class is to be found.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next you should check whether the logfile already exists in the folder, that
    will help deciding whether you create it or if you will simply append data to
    it instead.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You will have to modify the overridden `preVisitDirectory` to include the possibility
    of writing to the file you just created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Executing the code will now give as a result a file located in the same folder
    you are executing it from.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 2: Improving the EchoServer and EchoClient Programs'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The expected results will require you to modify both the server and the client
    in a very similar way. On the client-side, you will have to do something like
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On the server, the modifications should look like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'The expected interaction between the server and the client should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8:2: Interaction between server and client'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C13927_08_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8:2: Interaction between server and client'
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Working with HTTP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 1: Using the jsoup Library to Download Files from the Web'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The program is relatively short. The main task is to figure out the CSS query
    for the `select()` method call:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a class named `Activity1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `main()`, start a `try-catch` block
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Inside the `try` block, use the `Jsoup` library to download the contents of
    the remote Web page located at [https://packt.live/2BqZbtq](https://packt.live/2BqZbtq).
    This will result in the Web page contents stored in a `Document` object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, query the document for all elements of type `DIV` with a CSS class of
    `section`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You will need to iterate over each of these `DIV` elements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Inside the inner for loop, look for `H3` headline tags.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally, inside the `if` statement that detects if the tag is an H3 element,
    find all anchor (A) tags used for HTML links and print out the link text for each.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The complete code for this activity can be found here: [https://packt.live/33SEhPP](https://packt.live/33SEhPP)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 11\. Processes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 1: Making a Parent Process to Launch a Child Process'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The child should have an algorithm that looks like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, there is a call to `System.in.available()` to check whether there is any
    data in the output buffer from the child program.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'On the other hand, the parent program should consider including something along
    the lines of:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 12\. Regular Expressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 1: Regular Expressions to Check If the Entrance is Entered in the
    Desired Format'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: Visit [https://packt.live/2MYzyFq](https://packt.live/2MYzyFq).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To the already exisiting regular expression from Exercise 1, add the rule to
    allow an optional alphabet after the number:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Check if the RE works for *Strandvagen 1a* and *Ringvagen 2b*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 13\. Functional Programming with Lambda Expressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 1: Modifying Immutable Lists'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: Write an application which modifies the ShoppingCart class found in Exercise
    2 to allow for removing items from the cart.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add a new feature to the ShoppingCart class that allows users to add multiple
    items to the cart in a single invocation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Prove that the new features work as intended by modifying the code in the main
    application file to show how the features are used.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can find the entire code for this activity at: [https://packt.live/2q045er](https://packt.live/2q045er)'
  prefs: []
  type: TYPE_NORMAL
- en: 14\. Recursion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 1: Calculating the Fibonacci Sequence'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: Create a class named `Fibonacci`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a static method called `fibonacci` to calculate the Fibonacci sequence
    for a given number. If the input number is greater than `1`, this method will
    call itself.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If the input number is `0` or `1`, this method returns the input number (`0`
    or `1`, respectively).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create a `main()` method that calls the `fibonacci` method with inputs going
    from 0 to 16 (or to a value less than 17 as shown here).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The complete code for this activity can be found here: [https://packt.live/32DtjNT](https://packt.live/32DtjNT).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 15\. Processing Data with Streams
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 1: Applying Discount on the Items'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'Activity 2: Searching for Specifics'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 16\. Predicates and Other Functional Interfaces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 1: Toggling the Sensor States'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'Activity 2: Using a Recursive Function'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'Activity 3: Using a Lambda Function'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 17\. Reactive Programming with Java Flow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 1: Let NumberProcessor Format Values as Integers'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the processors published item type to Integer. Make the necessary changes
    in the implementation to match the new type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the subscriber for the processor, it should accept only Integer values
    in the `onNext` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 18\. Unit Testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 1: Counting the Words in the String'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: Create a class named `WordCount`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define a method named `countWords()` that takes as input a `String`. The method
    will count the words in the `String`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In `countWords()`, check if the input String is null. If not, trim any spaces
    at the beginning and end of the text. Then, split the `String` into words.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note the use of a regular expression, `\s+`, that gets passed to the `split()`
    method. This will split the `String` into words. Also note that the leading backslash
    character needs to be escaped.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The complete code for WordCount.java file can be found here: [https://packt.live/32DtjNT](https://packt.live/32DtjNT).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, write a parameterized test as follows.
  prefs: []
  type: TYPE_NORMAL
- en: Create a class named `WordCountTest` in the `src/test` directory (not `src/main`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `ParameterizedTest` annotation and define a `CsvSource` with data for
    the test.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The test data takes in two values, a text string to check and then the word
    count. Note the placement of punctuation and spaces to see if the `WordCount`
    class works correctly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create the `test` method to use the input parameters and validate that the reported
    word count matches the expected word count.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The complete code for WordCountTest.java file can be found here: [https://packt.live/2oafOq9](https://packt.live/2oafOq9).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
