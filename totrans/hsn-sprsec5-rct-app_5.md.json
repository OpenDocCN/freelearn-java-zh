["```java\n@RestController\n@RequestMapping(value=”/api/movie”)\npublic class MovieAPI {\n    @GetMapping(“/”)\n    public Flux(Movie) getMovies() {\n        //Logic of getting all movies\n    }\n    @GetMapping(“/{id}”)\n    public Mono<Movie> getMovie(@PathVariable Long id) {\n        //Logic for getting a specific movie\n    }\n    @PostMapping(“/post”)\n    public Mono<ResponseEntity<String>> createMovie(@RequestBody Movie movie) {\n        // Logic for creating movie\n    }\n}\n```", "```java\nMono<String> helloWorld = request.body(BodyExtractors.toMono(String.class);\nMono<String> helloWorldUtil = request.bodyToMono(String.class);\n\nFlux<Person> movie = request.body(BodyExtractors.toFlux(Movie.class);\nFlux<Person> movieUtil = request.bodyToFlux(Movie.class);\n```", "```java\nMono<Movie> movie = ...\nServerResponse.ok().contentType(MediaType.APPLICATION_JSON).body(movie);\n```", "```java\nHandlerFunction<ServerResponse> handlerFunction =\n  request -> ServerResponse.ok().body(fromObject(\"Sample HandlerFunction\"));\n```", "```java\npublic class MovieHandler {\n    public Mono<ServerResponse> listMovies(ServerRequest request) {\n        // Logic that returns all Movies objects\n    }\n    public Mono<ServerResponse> createMovie(ServerRequest request) {\n        // Logic that returns creates Movie object in the request object\n    }\n    public Mono<ServerResponse> getMovie(ServerRequest request) {\n        // Logic that returns one Movie object\n    }\n    //.. More methods as needed\n}\n```", "```java\nRouterFunctions.route(RequestPredicate, HandlerFunction)\n```", "```java\nRouterFunction<ServerResponse> routeFunctionSample =\n    RouterFunctions.route(RequestPredicates.path(\"/sample-route\"),\n    request -> Response.ok().body(fromObject(\"Sample Route\")));\n```", "```java\nRouterFunction.and(RouterFunction)\n```", "```java\nRouterFunction.andRoute(RequestPredicate, HandlerFunction)\n```", "```java\nRouterFunction<ServerResponse> movieRoutes =\n    route(GET(\"/movie/{id}\").and(accept(APPLICATION_JSON)), handler::getMovie)\n    .andRoute(GET(\"/movie\").and(accept(APPLICATION_JSON)), handler::listMovies)\n    .andRoute(POST(\"/movie\").and(contentType(APPLICATION_JSON)), handler::createMovie);\n```", "```java\nRouterFunctions.toHttpHandler(RouterFunction)\n```", "```java\nHttpHandler httpHandler = RouterFunctions.toHttpHandler(movieRoutes);\nReactorHttpHandlerAdapter reactorAdapter = new ReactorHttpHandlerAdapter(httpHandler);\nHttpServer server = HttpServer.create(HOST, PORT);\nserver.newHandler(reactorAdapter).block();\n```", "```java\nWebClient client = WebClient.create(\"http://any-domain.com\");\nMono<Movie> movie = client.get()\n        .url(\"/movie/{id}\", 1L)\n        .accept(APPLICATION_JSON)\n        .exchange(request)\n        .then(response -> response.bodyToMono(Movie.class));\n```", "```java\npublic class MovieWebSocketHandler implements WebSocketHandler {\n    @Override\n    public Mono<Void> handle(WebSocketSession session) {\n        // ...\n    }\n}\n```", "```java\n@Configuration\nstatic class WebApplicationConfig {\n    @Bean\n    public HandlerMapping webSockerHandlerMapping() {\n        Map<String, WebSocketHandler> map = new HashMap<>();\n        map.put(\"/movie\", new MovieWebSocketHandler());\n\n        SimpleUrlHandlerMapping mapping = new SimpleUrlHandlerMapping();\n        mapping.setUrlMap(map);\n        return mapping;\n    }\n    @Bean\n    public WebSocketHandlerAdapter handlerAdapter() {\n        return new WebSocketHandlerAdapter();\n    }\n}\n```", "```java\nWebSocketClient client = new ReactorNettyWebSocketClient();\nURI url = new URI(\"ws://localhost:8080/movie\");\nclient.execute(url, session ->\n        session.receive()\n            .doOnNext(System.out::println)\n            .then());\n```", "```java\n<script>\n   var clientWebSocket = new WebSocket(\"ws://localhost:8080/movie\");\n   clientWebSocket.onopen = function() {\n       // Logic as needed\n   }\n   clientWebSocket.onclose = function(error) {\n       // Logic as needed\n   }\n   clientWebSocket.onerror = function(error) {\n       // Logic as needed\n   }\n   clientWebSocket.onmessage = function(error) {\n       // Logic as needed\n   }\n</script>\n```", "```java\n<!--Spring Framework and Spring Boot-->\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-webflux</artifactId>\n</dependency>\n<!--JSON-->\n<dependency>\n…\n</dependency>\n<!--Logging-->\n<dependency>\n…\n</dependency>\n<!--Testing-->\n<dependency>\n…\n</dependency>\n```", "```java\n<build>\n  <plugins>\n      <plugin>\n          <groupId>org.springframework.boot</groupId>\n          <artifactId>spring-boot-maven-plugin</artifactId>\n      </plugin>\n  </plugins>\n</build>\n```", "```java\n@Configuration\n@EnableWebFlux\n@ComponentScan\npublic class SpringWebFluxConfig {\n  // ...\n}\n```", "```java\n@Repository\npublic class MovieRepositoryImpl implements MovieRepository {\n    private Map<Long, Movie> movies = new HashMap<Long, Movie>();\n\n    @PostConstruct\n    public void initIt() throws Exception {\n      movies.put(Long.valueOf(1), new Movie(Long.valueOf(1), \"Moonlight\",     \n        \"Drama\"));\n      movies.put(Long.valueOf(2), new Movie(Long.valueOf(2), \"Dunkirk\", \n        \"Drama/Thriller\"));\n      movies.put(Long.valueOf(3), new Movie(Long.valueOf(3), \"Get Out\", \n        \"Mystery/Thriller\"));\n      movies.put(Long.valueOf(4), new Movie(Long.valueOf(4), \"The Shape of \n        Water\", \"Drama/Thriller\"));\n    }\n    @Override\n    public Mono<Movie> getMovieById(Long id) {\n        return Mono.just(movies.get(id));\n    }\n    //...Other methods\n}\n```", "```java\n@Component\npublic class MovieHandler {\n    private final MovieRepository movieRepository;\n\n    public MovieHandler(MovieRepository movieRepository) {\n        this.movieRepository = movieRepository;\n    }\n    public Mono<ServerResponse> listMovies(ServerRequest request) {\n        // fetch all Movies from repository\n        Flux<Movie> movies = movieRepository.listMovies();\n        // build response\n        return \n            ServerResponse.ok().contentType(MediaType.APPLICATION_JSON)\n            .body(movies, Movie.class);\n    }\n    //...Other methods\n}\n```", "```java\n@Configuration\npublic class RouterConfig {\n\n    @Bean\n    public RouterFunction<ServerResponse> routerFunction1(MovieHandler \n        movieHandler) {\n      return \n        route(GET(\"/\").and(accept(MediaType.APPLICATION_JSON)), \n            movieHandler::listMovies)\n        .andRoute(GET(\"/api/movie\").and(accept(MediaType.APPLICATION_JSON)), \n            movieHandler::listMovies)\n        .andRoute(GET(\"/api/movie/{id}\").and(accept(MediaType.APPLICATION_JSON)), \n            movieHandler::getMovieById)\n        .andRoute(POST(\"/api/movie\").and(accept(MediaType.APPLICATION_JSON)), \n            movieHandler::saveMovie)\n        .andRoute(PUT(\"/api/movie/{id}\").and(accept(MediaType.APPLICATION_JSON)), \n            movieHandler::putMovie)\n        .andRoute(DELETE(\"/api/movie/{id}\")\n            .and(accept(MediaType.APPLICATION_JSON)), movieHandler::deleteMovie);\n    }\n}\n```", "```java\n@SpringBootApplication\npublic class Run {\n  public static void main(String[] args) {\n      SpringApplication.run(Run.class, args);\n  }\n}\n```", "```java\n<!--Spring Framework and Spring Boot-->\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-webflux</artifactId>\n  <exclusions>\n      <exclusion>\n          <groupId>org.springframework.boot</groupId>\n          <artifactId>spring-boot-starter-reactor-netty</artifactId>\n      </exclusion>\n  </exclusions>\n</dependency>\n<!--Explicit Tomcat dependency-->\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-tomcat</artifactId>\n</dependency>\n```", "```java\nmvn spring-boot:run\n```", "```java\n@Bean\npublic MapReactiveUserDetailsService userDetailsRepository() {\n    UserDetails user = User.withUsername(\"user\")\n        .password(\"{noop}password\").roles(\"USER\").build();\n    UserDetails admin = User.withUsername(\"admin\")\n        .password(\"{noop}password\").roles(\"USER\",\"ADMIN\").build();\n    return new MapReactiveUserDetailsService(user, admin);\n}\n```", "```java\n@Bean\nSecurityWebFilterChain springWebFilterChain(ServerHttpSecurity http) \n    throws Exception {\n    return http\n      .authorizeExchange()\n      .pathMatchers(HttpMethod.GET, \"/api/movie/**\").hasRole(\"USER\")\n      .pathMatchers(HttpMethod.POST, \"/api/movie/**\").hasRole(\"ADMIN\")\n      .anyExchange().authenticated()\n      .and().formLogin()\n      .and().build();\n}\n```", "```java\nmvn spring-boot:run\n```", "```java\ncurl http://localhost:8080/ -v\n```", "```java\ncurl http://localhost:8080/api/movie -v -u admin:password\n```", "```java\ncurl http://localhost:8080/api/movie/1 -v -u admin:password\n```", "```java\n<!--Spring Framework and Spring Boot-->\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-webflux</artifactId>\n</dependency>\n```", "```java\n@Service\npublic class WebClientTestImpl implements WebClientTestInterface {\n    private final WebClient webClient;\n    public WebClientTestImpl(WebClient.Builder webClientBuilder) {\n        this.webClient = webClientBuilder.defaultHeader(HttpHeaders.ACCEPT,     \n        MediaType.APPLICATION_JSON_VALUE)\n              .baseUrl(\"http://localhost:8080/api/movie\").build();\n    }\n    //...Other methods\n}\n```", "```java\nWebClient webClient = WebClient.create();\n```", "```java\nWebClient webClient = WebClient.create(\"http://localhost:8080/api/movie\");\n```", "```java\n@Override\npublic Flux<Movie> listMovies() {\n    return webClient.get().uri(\"/\")\n        .retrieve()\n        .onStatus(HttpStatus::is4xxClientError, clientResponse ->\n            Mono.error(new SampleException())\n        )\n        .onStatus(HttpStatus::is5xxServerError, clientResponse ->\n            Mono.error(new SampleException())\n        )\n        .bodyToFlux(Movie.class);\n}\n```", "```java\n@Override\npublic Mono<Movie> getMovieById(Long id) \n  return this.webClient.get().uri(\"/{id}\", id)\n          .retrieve().bodyToMono(Movie.class);\n}\n@Override\npublic Mono<Movie> saveMovie(Movie movie) {\n  return webClient.post().uri(\"/\")\n          .body(BodyInserters.fromObject(movie))\n          .exchange().flatMap( clientResponse ->     \n            clientResponse.bodyToMono(Movie.class) );\n}\n```", "```java\n@SpringBootApplication\npublic class Run implements CommandLineRunner {\n  @Autowired\n  WebClientTestInterface webClient;\n  public static void main(String[] args) {\n      SpringApplication.run(Run.class, args);\n  }\n  @Override\n  public void run(String... args) throws Exception {\n      // get all movies\n      System.out.println(\"Get All Movies\");\n      webClient.listMovies().subscribe(System.out::println);\n      Thread.sleep(3000);\n      … Other methods\n  }\n  //… Other WebClient methods getting called\n}\n```", "```java\nserver.port=8081\n```", "```java\nmvn spring-boot:run\n```", "```java\n<!--Testing-->\n<dependency>\n  <groupId>junit</groupId>\n  <artifactId>junit</artifactId>\n  <scope>test</scope>\n</dependency>\n<dependency>\n  <groupId>org.springframework</groupId>\n  <artifactId>spring-test</artifactId>\n  <scope>test</scope>\n</dependency>\n<dependency>\n  <groupId>org.skyscreamer</groupId>\n  <artifactId>jsonassert</artifactId>\n  <scope>test</scope>\n</dependency>\n<dependency>\n  <groupId>io.projectreactor</groupId>\n  <artifactId>reactor-test</artifactId>\n  <scope>test</scope>\n</dependency>\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-test</artifactId>\n  <scope>test</scope>\n</dependency>\n```", "```java\n@RunWith(SpringRunner.class)\n@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n@FixMethodOrder(MethodSorters.NAME_ASCENDING)\npublic class WebclientDemoApplicationTests {\n  @Autowired\n  private WebTestClient webTestClient;\n  @Test\n  public void getAllMovies() {\n      System.out.println(\"Test 1 executing getAllMovies\");\n      webTestClient.get().uri(\"/api/movie\")\n              .accept(MediaType.APPLICATION_JSON)\n              .exchange()\n              .expectStatus().isOk()\n              .expectHeader().contentType(MediaType.APPLICATION_JSON)\n              .expectBodyList(Movie.class);\n  }\n  @Test\n  public void saveMovie() {\n      System.out.println(\"Test 2 executing saveMovie\");\n      Movie movie = new Movie(Long.valueOf(10), \"Test Title\", \"Test Genre\");\n      webTestClient.post().uri(\"/api/movie\")\n              .body(Mono.just(movie), Movie.class)\n              .exchange()\n              .expectStatus().isOk()\n              .expectBody();\n  }\n}\n```", "```java\n<!--Mongo-->\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-data-mongodb-reactive</artifactId>\n</dependency>\n<dependency>\n  <groupId>de.flapdoodle.embed</groupId>\n  <artifactId>de.flapdoodle.embed.mongo</artifactId>\n  <scope>test</scope>\n</dependency>\n```", "```java\nspring.data.mongodb.uri=mongodb://localhost:27017/movie\n```", "```java\n@Repository\npublic interface ReactiveMovieRepository extends \n    ReactiveMongoRepository<Movie, Long> {\n      @Query(\"{ 'title': ?0, 'genre': ?1}\")\n      Flux<Movie> findByTitleAndGenre(String title, String genre);\n      @Query(\"{ 'genre': ?0}\")\n      Flux<Movie> findByGenre(String genre);\n}\n```", "```java\n@RestController\npublic class MovieController {\n  @Autowired\n  private ReactiveMovieRepository reactiveMovieRepository;\n  @GetMapping(\"/movies\")\n  public Flux<Movie> getAllMovies() {\n      return reactiveMovieRepository.findAll();\n  }\n  @GetMapping(\"/movies/{genre}\")\n  public Flux<Movie> getAllMoviesByGenre(@PathVariable String genre) {\n      return reactiveMovieRepository.findByGenre(genre);\n  }\n  @GetMapping(\"/movies/{title}/{genre}\")\n  public Flux<Movie> getAllMoviesByTitleAndGenre\n    (@PathVariable String title, @PathVariable String genre) {\n      return reactiveMovieRepository.findByTitleAndGenre(title, genre);\n  }\n  @PostMapping(\"/movies\")\n  public Mono<Movie> createMovies(@Valid @RequestBody Movie movie) {\n      return reactiveMovieRepository.save(movie);\n  }\n}\n```", "```java\nmvn spring-boot:run\n```", "```java\n{\n   \"id\": 1,\n   \"title\": \"testtitle\",\n   \"genre\": \"thriller\"\n}\n```", "```java\n@EnableReactiveMethodSecurity\npublic class SpringSecurityWebFluxConfig {\n    …\n}\n```", "```java\n@GetMapping(\"/movies\")\n@PreAuthorize(\"hasRole('ADMIN')\")\npublic Flux<Movie> getAllMovies() {\n  return reactiveMovieRepository.findAll();\n}\n```", "```java\n@Component\npublic class SampleWebFilter implements WebFilter {\n    @Override\n    public Mono<Void> filter(ServerWebExchange serverWebExchange, \n            WebFilterChain webFilterChain) {\n        serverWebExchange.getResponse().getHeaders().add(\"filter-added-header\", \n            \"filter-added-header-value\");\n        return webFilterChain.filter(serverWebExchange);\n    }\n}\n```", "```java\n@Test\npublic void filtertest1_with_pathVariable_equalTo_value1_apply_WebFilter() {\n    EntityExchangeResult<String> result = \n        webTestClient.get().uri(\"/filtertest1/value1\")\n        .exchange()\n        .expectStatus().isOk()\n        .expectBody(String.class)\n        .returnResult();\n    Assert.assertEquals(result.getResponseBody(), \"value1\");\n    Assert.assertEquals(result.getResponseHeaders()\n        .getFirst(\"filter-added-header\"), \"filter-added-header-value\");\n}\n@Test\npublic void filtertest2_with_pathVariable_equalTo_value1_apply_WebFilter() {\n    EntityExchangeResult<String> result = \n        webTestClient.get().uri(\"/filtertest2/value1\")\n        .exchange()\n        .expectStatus().isOk()\n        .expectBody(String.class)\n        .returnResult();\n    Assert.assertEquals(result.getResponseBody(), \"value1\");\n    Assert.assertEquals(result.getResponseHeaders()\n        .getFirst(\"filter-added-header\"), \"filter-added-header-value\");\n}\n```", "```java\npublic class SampleHandlerFilterFunction implements \n        HandlerFilterFunction<ServerResponse, ServerResponse> {\n    @Override\n    public Mono<ServerResponse> filter(ServerRequest serverRequest, \n        HandlerFunction<ServerResponse> handlerFunction) {\n        if (serverRequest.pathVariable(\"pathVariable\")\n                .equalsIgnoreCase(\"value2\")) {\n            return ServerResponse.status(BAD_REQUEST).build();\n        }\n        return handlerFunction.handle(serverRequest);\n    }\n}\n```", "```java\n@Test\npublic void filtertest1_with_pathVariable_equalTo_value2_apply_HandlerFilterFunction() {\n    webTestClient.get().uri(\"/filtertest1/value2\")\n        .exchange()\n        .expectStatus().isOk();\n}\n@Test\npublic void filtertest2_with_pathVariable_equalTo_value2_apply_HandlerFilterFunction() {\n    webTestClient.get().uri(\"/filtertest2/value2\")\n        .exchange()\n        .expectStatus().isBadRequest();\n}\n```"]