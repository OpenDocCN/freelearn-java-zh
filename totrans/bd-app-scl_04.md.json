["```java\n    # \n    # Services \n    # \n    GET   /rx/prices   controllers.RxController.prices \n    GET   /rx/aprices  controllers.RxController.pricesAsync \n\n```", "```java\n    @Singleton \n    class RxController @Inject()(priceService:IPriceSerice) extends \n    Controller { \n      def prices = Action { implicit request => \n        Logger.info(\"RX called. \") \n        import ExecutionContext.Implicits.global \n        val sourceObservable = priceService.generatePrices \n        val rxResult = Observable.create { sourceObservable.subscribe  \n      } \n      .subscribeOn(IOScheduler()) \n      .take(1) \n      .flatMap { x => println(x) ; Observable.just(x) } \n      .toBlocking \n      .first \n      Ok(\"RxScala Price suggested is = \" + rxResult) \n    } \n\n      def pricesAsync = Action.async { implicit request => \n        Logger.info(\"RX Async called. \") \n        import play.api.libs.concurrent.Execution.Implicits. \n        defaultContext \n        val sourceObservable = priceService.generatePrices \n        val rxResult = Observable.create { sourceObservable.subscribe  \n        } \n        .subscribeOn(IOScheduler()) \n        .take(1) \n        .flatMap { x => println(x) ; Observable.just(x) } \n        .toBlocking \n        .first \n        Future { Ok(\"RxScala Price sugested is = \" + rxResult) } \n      } \n    } \n\n```", "```java\n    trait IPriceSerice{ \n      def generatePrices:Observable[Double] \n    } \n\n```", "```java\n    @Singleton \n    class PriceService extends IPriceSerice{ \n      var doubleInfiniteStreamSubject = PublishSubject.apply[Double]() \n      Future { \n        Stream.continually(nextDouble * 1000.0 ).foreach { \n          x => Thread.sleep(1000);  \n          doubleInfiniteStreamSubject.onNext(x) \n        } \n      } \n      override def generatePrices:Observable[Double] = { \n        var observableEven = Observable.create {  \n        doubleInfiniteStreamSubject.subscribe } \n        .subscribeOn(IOScheduler()) \n        .flatMap { x => Observable.from( Iterable.fill(1)(x + 10) )  \n        } \n        .filter { x => x.toInt % 2 == 0 } \n        var observableOdd = Observable.create {  \n        doubleInfiniteStreamSubject.subscribe } \n        .subscribeOn(IOScheduler()) \n        .flatMap { x => Observable.from( Iterable.fill(1)(x + 10) )  \n        } \n        .filter { x => x.toInt % 2 != 0 } \n        var mergeObservable = Observable \n        .empty \n        .subscribeOn(IOScheduler()) \n        .merge(observableEven) \n        .merge(observableOdd) \n        .take(10) \n        .foldLeft(0.0)(_+_) \n        .flatMap { x => Observable.just( x - (x * 0.9) ) } \n         return mergeObservable \n      } \n    } \n\n```", "```java\n    class Module extends AbstractModule { \n      override def configure() = { \n        // Use the system clock as the default implementation of Clock \n        bind(classOf[Clock]).toInstance(Clock.systemDefaultZone) \n        // Ask Guice to create an instance of ApplicationTimer when  \n        //the \n        // application starts. \n        bind(classOf[ApplicationTimer]).asEagerSingleton() \n        bind(classOf[IProductService]).to(classOf[ProductService]). \n        asEagerSingleton() \n        bind(classOf[IReviewService]).to(classOf[ReviewService]). \n        asEagerSingleton() \n        bind(classOf[IImageService]).to(classOf[ImageService]). \n        asEagerSingleton() \n        bind(classOf[IPriceSerice]).to(classOf[PriceService]). \n        asEagerSingleton() \n      } \n    } \n\n```", "```java\n\n    name := \"\"\"ReactiveWebStore\"\"\" \n    version := \"1.0-SNAPSHOT\" \n    lazy val root = (project in file(\".\")).enablePlugins(PlayScala) \n    scalaVersion := \"2.11.7\" \n\n    libraryDependencies ++= Seq( \n      jdbc, \n      cache, \n      ws, \n      \"org.scalatestplus.play\" %% \"scalatestplus-play\" % \"1.5.1\" %      \n      Test, \n      \"com.netflix.rxjava\" % \"rxjava-scala\" % \"0.20.7\" \n    ) \n\n    resolvers += \"scalaz-bintray\" at \n    \"http://dl.bintray.com/scalaz/releases\" \n    resolvers += DefaultMavenRepository \n\n```", "```java\ncurl -v http://localhost:9000/rx/prices \ncurl -v http://localhost:9000/rx/aprices\n\n```", "```java\n$ activator new ng-microservice\n\n```", "```java\n    # Routes \n    # This file defines all application routes (Higher priority routes \n    first) \n    # ~~~~ \n\n    GET /double      controllers.NGServiceEndpoint.double \n    GET /doubles/:n  controllers.NGServiceEndpoint.doubles(n:Int) \n\n```", "```java\n    class NGServiceEndpoint @Inject()(service:NGContract) extends \n    Controller { \n      def double = Action { \n        Ok(service.generateDouble.toString()) \n      } \n      def doubles(n:Int) = Action { \n        val json = Json.toJson(service.generateDoubleBatch(n)) \n        Ok(json) \n      } \n    } \n\n```", "```java\n    trait NGContract { \n       def generateDouble:Double \n       def generateDoubleBatch(n:Int):List[Double] \n    } \n\n```", "```java\n    package services \n    import scala.util.Random \n    import scala.util.Random.nextDouble \n    class NGServiceImpl extends NGContract{ \n      override def generateDouble:Double = { \n        Stream.continually(nextDouble * 1000.0 ) \n        .take(1) \n      } \n      override def generateDoubleBatch(n:Int):List[Double] = { \n        require(n >= 1, \"Number must be bigger than 0\") \n        val nTimes:Option[Int] = Option(n) \n        nTimes match { \n          case Some(number:Int) => \n          Stream.continually(nextDouble * 1000.0 ) \n          .take(n) \n          .toList \n          case None => \n          throw new IllegalArgumentException(\"You need provide a valid  \n          number of doubles you want.\") \n        } \n      } \n    } \n\n```", "```java\n    class Module extends AbstractModule { \n      override def configure() = { \n        // Use the system clock as the default implementation of Clock \n        bind(classOf[Clock]).toInstance(Clock.systemDefaultZone) \n        bind(classOf[NGContract]).to(classOf[NGServiceImpl]). \n        asEagerSingleton() \n      } \n    } \n\n```", "```java\nng-microservice$ activator -Dsbt.task.forcegc=false \n[info] Loading global plugins from /home/diego/.sbt/0.13/plugins \n[info] Loading project definition from /home/diego/github/diegopacheco/Book_Building_Reactive_Functional_Scala_Applications/Chap4/ng-microservice/project \n[info] Set current project to ng-microservice (in build file:/home/diego/github/diegopacheco/Book_Building_Reactive_Functional_Scala_Applications/Chap4/ng-microservice/) \n[ng-microservice] $ run 9090 \n\n--- (Running the application, auto-reloading is enabled) --- \n\n[info] p.c.s.NettyServer - Listening for HTTP on /0:0:0:0:0:0:0:0:9090 \n\n(Server started, use Ctrl+D to stop and go back to the console...)\n\n```", "```java\n    GET   /rnd/double  \n    controllers.RndDoubleGeneratorController.rndDouble \n    GET   /rnd/call    controllers.RndDoubleGeneratorController.rndCall \n    GET   /rnd/rx      controllers.RndDoubleGeneratorController.rxCall \n    GET   /rnd/rxbat      \n    controllers.RndDoubleGeneratorController.rxScalaCallBatch \n\n```", "```java\n    @Singleton \n    class RndDoubleGeneratorController @Inject() (service:IRndService)     \n    extends Controller { \n      import play.api.libs.concurrent.Execution. \n      Implicits.defaultContext \n      def rndDouble = Action { implicit request => \n        Ok( service.next().toString() ) \n      } \n      def rndCall = Action.async { implicit request => \n        service.call().map { res => Ok(res) } \n      } \n      def rxCall = Action { implicit request => \n        Ok(service.rxScalaCall().toBlocking.first.toString()) \n      } \n      def rxScalaCallBatch = Action { implicit request => \n        Ok(service.rxScalaCallBatch().toBlocking.first.toString()) \n      } \n    } \n\n```", "```java\n    trait IRndService { \n      def next():Double \n      def call():Future[String] \n      def rxScalaCall():Observable[Double] \n      def rxScalaCallBatch():Observable[Double] \n    } \n\n```", "```java\n    @Singleton \n    class RndService @Inject() (ws: WSClient) extends IRndService { \n      import play.api.libs.concurrent.Execution.Implicits. \n      defaultContext \n      override def next():Double = { \n        val future = ws.url(\"http://localhost:9090/double\").get().map  \n        { res => res.body.toDouble } \n        Await.result(future, 5.seconds) \n      } \n      override def call():Future[String] = { \n        ws.url(\"http://localhost:9090/double\").get().map  \n        { res => res.body } \n      } \n      override def rxScalaCall():Observable[Double] = { \n        val doubleFuture:Future[Double] =  \n        ws.url(\"http://localhost:9090/double\").get().map { x =>  \n          x.body.toDouble } \n        Observable.from(doubleFuture) \n      } \n     // Continue ... \n\n```", "```java\n    override def rxScalaCallBatch():Observable[Double] = { \n      val doubleInfiniteStreamSubject = PublishSubject.apply[Double]() \n      val future = ws.url(\"http://localhost:9090/doubles/10\") \n      .get() \n      .map { x => Json.parse(x.body).as[List[Double]] } \n      future.onComplete { \n        case Success(l:List[Double]) => l.foreach { e =>  \n        doubleInfiniteStreamSubject.onNext(e) } \n        case Failure(e:Exception) =>  \n        doubleInfiniteStreamSubject.onError(e) \n      } \n      var observableEven = Observable.create {  \n        doubleInfiniteStreamSubject.subscribe } \n      .onErrorReturn { x => 2.0 } \n      .flatMap { x => Observable.from( Iterable.fill(1)(x + 10) ) } \n      .filter { x => x.toInt % 2 == 0 } \n      .flatMap { x => println(\"ODD: \" + x) ; Observable.just(x) } \n      var observableOdd = Observable.create {  \n        doubleInfiniteStreamSubject.subscribe } \n        .onErrorReturn { x => 1.0 } \n        .flatMap { x => Observable.from( Iterable.fill(1)(x + 10) ) } \n        .filter { x => x.toInt % 2 != 0 } \n        .flatMap { x => println(\"EVEN: \" + x) ; Observable.just(x) } \n        var mergeObservable = Observable \n        .empty \n        .merge(observableEven) \n        .merge(observableOdd) \n        .take(10) \n        .foldLeft(0.0)(_+_) \n        .flatMap { x => Observable.just( x - (x * 0.9) ) } \n        mergeObservable \n      } \n\n```", "```java\n    class Module extends AbstractModule { \n      override def configure() = { \n        bind(classOf[Clock]).toInstance(Clock.systemDefaultZone)  \n         bind(classOf[ApplicationTimer]).asEagerSingleton() \n         bind(classOf[IProductService]).to(classOf[ProductService]). \n         asEagerSingleton() \n         bind(classOf[IReviewService]).to(classOf[ReviewService]). \n         asEagerSingleton() \n         bind(classOf[IImageService]).to(classOf[ImageService]). \n         asEagerSingleton() \n         bind(classOf[IPriceSerice]).to(classOf[PriceService]). \n         asEagerSingleton() \n         bind(classOf[IRndService]).to(classOf[RndService]). \n         asEagerSingleton() \n      }} \n\n```", "```java\n    /** \n     * This functions loads the price in the HTML component. \n    */ \n    function loadPrice(doc){ \n      jQuery.get( \"http://localhost:9000/rnd/rxbat\", function(  \n      response ) { \n        doc.getElementById(\"price\").value = parseFloat(response) \n      }).fail(function(e) { \n        alert('Wops! We was not able to call  \n        http://localhost:9000/rnd/rxba. Error: ' + e.statusText); \n      }); \n    } \n\n```", "```java\n    @(title: String)(content: Html)(implicit flash: Flash) \n    <!DOCTYPE html> \n    <html lang=\"en\"> \n      <head> \n        <title>@title</title> \n        <link rel=\"shortcut icon\" type=\"image/png\"  \n        href=\"@routes.Assets.at(\"images/favicon.png\")\"> \n        <link rel=\"stylesheet\" media=\"screen\"  \n        href=\"@routes.Assets.at(\"stylesheets/main.css\")\"> \n        <link rel=\"stylesheet\" media=\"screen\"  \n        href=\"@routes.Assets.at(\"stylesheets/bootstrap.min.css\")\"> \n        <script src=\"img/@routes.Assets.at(\"javascripts/jquery- \n        1.9.0.min.js\")\" type=\"text/javascript\"></script> \n        <script src=\"img/@routes.Assets.at(\"javascripts/bootstrap.js\")\"  \n        type=\"text/javascript\"></script> \n        <script src=\"img/@routes.Assets.at(\"javascripts/image.js\")\"  \n        type=\"text/javascript\"></script> \n        <script src=\"img/@routes.Assets.at(\"javascripts/price.js\")\"  \n        type=\"text/javascript\"></script> \n      </head> \n      <body> \n        <center><a href='/'><img height='42' width='42'  \n        src='@routes.Assets.at(\"images/rws.png\")'></a> \n        <h3>@title</h3></center> \n        <div class=\"container\"> \n          @alert(alertType: String) = { \n            @flash.get(alertType).map { message => \n              <div class=\"alert alert-@alertType\"> \n                <button type=\"button\" class=\"close\" data- \n                dismiss=\"alert\">&times;</button> \n                @message \n              </div> \n            } \n          }\n          @alert(\"error\") \n          @alert(\"success\") \n          @content \n          <a href=\"/\"></a><BR> \n          <button type=\"submit\" class=\"btn btn-primary\"  \n            onclick=\"window.location.href='/'; \" > \n           Reactive Web Store - Home \n          </button> \n        </div> \n      </body> \n    </html> \n\n```", "```java\n    @(id: Option[Long],product:Form[Product])(implicit flash:Flash) \n    @import play.api.i18n.Messages.Implicits._ \n    @import play.api.Play.current \n    @main(\"Product: \" + product(\"name\").value.getOrElse(\"\")){ \n      @if(product.hasErrors) { \n        <div class=\"alert alert-error\"> \n          <button type=\"button\" class=\"close\" data- \n          dismiss=\"alert\">&times;</button> \n          Sorry! Some information does not look right. Could you  \n          review it please and re-submit? \n        </div> \n      } \n\n      @helper.form(action = if (id.isDefined)  \n      routes.ProductController.update(id.get) else  \n      routes.ProductController.insert) { \n        @helper.inputText(product(\"name\"), '_label -> \"Product Name\") \n        @helper.inputText(product(\"details\"), '_label -> \"Product  \n        Details\") \n        @helper.inputText(product(\"price\"), '_label -> \"Price\") \n        <div class=\"form-actions\"> \n        <button type=\"button\" class=\"btn btn-primary\"  \n        onclick=\"javascript:loadPrice(document);\" >Load Rnd  \n        Price</button> \n        <button type=\"submit\" class=\"btn btn-primary\"> \n          @if(id.isDefined) { Update Product } else { New Product } \n        </button> \n        </div> \n      } \n    } \n\n```", "```java\nReactiveWebStore$ activator -Dsbt.task.forcegc=false\n[info] Loading global plugins from /home/diego/.sbt/0.13/plugins\n[info] Loading project definition from /home/diego/github/diegopacheco/Book_Building_Reactive_Functional_Scala_Applications/Chap4/ReactiveWebStore/project\n[info] Set current project to ReactiveWebStore (in build file:/home/diego/github/diegopacheco/Book_Building_Reactive_Functional_Scala_Applications/Chap4/ReactiveWebStore/)\n[ReactiveWebStore] $ run\n--- (Running the application, auto-reloading is enabled) ---\n[info] p.c.s.NettyServer - Listening for HTTP on /0:0:0:0:0:0:0:0:9000\n(Server started, use Ctrl+D to stop and go back to the console...)\n[info] application - ApplicationTimer demo: Starting application at 2016-07-03T02:35:54.479Z.\n[info] play.api.Play - Application started (Dev)\n\n```", "```java\n[info] application - ApplicationTimer demo: Starting application at 2016-07-03T02:35:54.479Z.\n[info] play.api.Play - Application started (Dev)\n[info] application - index called. Products: List()\n[info] application - blank called. \nODD: 722.8017048639501\nEVEN: 863.8229024202085\nODD: 380.5549208988492\nEVEN: 947.6312814830953\nODD: 362.2984794191124\nODD: 676.978825910585\nODD: 752.7412673916701\nEVEN: 505.3293481709368\nEVEN: 849.9768444508936\nEVEN: 99.56583617819769\n\n```"]