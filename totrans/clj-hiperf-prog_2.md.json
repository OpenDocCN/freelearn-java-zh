["```java\nuser=> (identical? \"foo\" \"foo\")  ; literals are automatically interned\ntrue\nuser=> (identical? (String. \"foo\") (String. \"foo\"))  ; created string is not interned\nfalse\nuser=> (identical? (.intern (String. \"foo\")) (.intern (String. \"foo\")))\ntrue\nuser=> (identical? (str \"f\" \"oo\") (str \"f\" \"oo\"))  ; str creates string\nfalse\nuser=> (identical? (str \"foo\") (str \"foo\"))  ; str does not create string for 1 arg\ntrue\nuser=> (identical? (read-string \"\\\"foo\\\"\") (read-string \"\\\"foo\\\"\"))  ; not interned\nfalse\nuser=> (require '[clojure.edn :as edn])  ; introduced in Clojure 1.5\nnil\nuser=> (identical? (edn/read-string \"\\\"foo\\\"\") (edn/read-string \"\\\"foo\\\"\"))\nfalse\n```", "```java\nuser=> (identical? (.intern \"foo\") (.intern \"foo\"))\ntrue\nuser=> (identical? (symbol \"foo\") (symbol \"foo\"))\nfalse\nuser=> (identical? (symbol (.intern \"foo\")) (symbol (.intern \"foo\")))\nfalse\n```", "```java\n    {:a 10 :b 20}  ; array-map up to 8 pairs\n    {:a 1 :b 2 :c 3 :d 4 :e 5 :f 6 :g 7 :h 8 :i 9}  ; hash-map for 9 or more pairs\n    ```", "```java\n    (sorted-map :a 10 :b 20 :c 30)  ; (keys ..) should return sorted\n    ```", "```java\n    (sorted-set :a :b :c)\n    ```", "```java\n    (import 'clojure.lang.PersistentQueue)\n    (reduce conj PersistentQueue/EMPTY [:a :b :c :d])  ; add to queue\n    (peek queue)  ; read from queue\n    (pop queue)  ; remove from queue\n    ```", "```java\nList<String> titles = getTitles();\nint goodCount = 0;\nfor (String each: titles) {\n  String checksum = computeChecksum(each);\n  if (verifyOK(checksum)) {\n    goodCount++;\n  }\n}\n```", "```java\n(->> (get-titles)\n  (map compute-checksum)\n  (filter verify-ok?)\n  count)\n```", "```java\n(defn retry? [n]\n  (if (<= n 0)\n    (cons false (lazy-seq (retry? 0)))\n    (cons true (lazy-seq (retry? (dec n))))))\n```", "```java\nuser=> (take 7 (retry? 5))\n(true true true true true false false)\n```", "```java\n(loop [r (retry? 5)]\n  (if-not (first r)\n    (println \"No more retries\")\n    (do\n      (println \"Retrying\")\n      (recur (rest r)))))\n```", "```java\nRetrying\nRetrying\nRetrying\nRetrying\nRetrying\nNo more retries\nnil\n```", "```java\n(defn count-down [n]\n  (if (<= n 0)\n    '(0)\n    (cons n (lazy-seq (count-down (dec n))))))\n```", "```java\nuser=> (count-down 8)\n(8 7 6 5 4 3 2 1 0)\n```", "```java\n(defn chunked-line-seq\n  \"Returns the lines of text from rdr as a chunked[size] sequence of strings.\n  rdr must implement java.io.BufferedReader.\"\n  [^java.io.BufferedReader rdr size]\n  (lazy-seq\n    (when-let [line (.readLine rdr)]\n      (chunk-cons\n        (let [buffer (chunk-buffer size)]\n          (chunk-append buffer line)\n          (dotimes [i (dec size)]\n            (when-let [line (.readLine rdr)]\n              (chunk-append buffer line)))\n  (chunk buffer))\n(chunked-line-seq rdr size)))))\n```", "```java\n(defmacro do-something\n  [& body]\n  `(do-something* (fn [] ~@body)))\n```", "```java\n(defmacro do-something\n  [& body]\n  `(do-something* (^:once fn* [] ~@body)))\n```", "```java\nuser> (let [x (for [n (range)] (make-array Object 10000))\n      f (^:once fn* [] (nth x 1e6))]  ; using ^:once\n        (f))\n#<Object[] [Ljava.lang.Object;@402d3105>\nuser> (let [x (for [n (range)] (make-array Object 10000))\n            f (fn* [] (nth x 1e6))]         ; not using ^:once\n        (f))\nOutOfMemoryError GC overhead limit exceeded\n```", "```java\nuser=> (reduce ((filter odd?) +) [1 2 3 4 5])\n9\nuser=> (transduce (filter odd?) + [1 2 3 4 5])\n9\nuser=> (defn filter-odd? [xf]\n         (fn\n           ([] (xf))\n           ([result] (xf result))\n           ([result input] (if (odd? input)\n                               (xf result input)\n                               result))))\n#'user/filter-odd?\nuser=> (reduce (filter-odd? +) [1 2 3 4 5])\n9\n```", "```java\n;; traditional way\nuser=> (time (dotimes [_ 10000] (reduce + (filter odd? (range 10000)))))\n\"Elapsed time: 2746.782033 msecs\"\nnil\n;; using transducer\n(def fodd? (filter odd?))\nuser=> (time (dotimes [_ 10000] (transduce fodd? + (range 10000))))\n\"Elapsed time: 1998.566463 msecs\"\nnil\n```", "```java\nuser=> (let [t (transient [:a])]\n  @(future (conj! t :b)))\nIllegalAccessError Transient used by non-owner thread  clojure.lang.PersistentVector$TransientVector.ensureEditable (PersistentVector.java:463)\n```", "```java\nuser=> (let [t (transient [:a])] (seq t))\n\nIllegalArgumentException Don't know how to create ISeq from: clojure.lang.PersistentVector$TransientVector  clojure.lang.RT.seqFrom (RT.java:505)\n```", "```java\n(let [t (transient [])]\n  (conj! t :a)\n  (persistent! t)\n  (conj! t :b))\nIllegalAccessError Transient used after persistent! call  clojure.lang.PersistentVector$TransientVector.ensureEditable (PersistentVector.java:464)\n```", "```java\n(defn repeatedly*\n  \"Like `repeatedly` but faster and returns given collection type.\"\n  [coll n f]\n  (if-not (instance? clojure.lang.IEditableCollection coll)\n    (loop [v coll idx 0]\n      (if (>= idx n)\n        v\n        (recur (conj v (f)) (inc idx))))\n    (loop [v (transient coll) idx 0]\n      (if (>= idx n)\n        (persistent! v)\n        (recur (conj! v (f)) (inc idx))))))\n```", "```java\n:dependencies [;; other dependenciesâ€¦\n                            [pjstadig/assertions \"0.1.0\"]]\n```", "```java\n(ns example.core\n\n  (:refer-clojure :exclude [assert])\n\n  (:require [pjstadig.assertions :refer [assert]]))\n```", "```java\n$ JVM_OPTS=-ea lein run -m example.core\n$ java -ea -jar example.jar\n```", "```java\n(defn oddsum-1 [n]  ; using iteration\n  (->> (range (inc n))\n    (filter odd?)\n    (reduce +)))\n(defn oddsum-2 [n]  ; using loop-recur\n  (loop [i 1 s 0]\n    (if (> i n)\n      s\n      (recur (+ i 2) (+ s i)))))\n```", "```java\nuser=> (time (oddsum-1 1000000))\n\"Elapsed time: 109.314908 msecs\"\n\n250000000000\nuser=> (time (oddsum-2 1000000))\n\"Elapsed time: 42.18116 msecs\"\n\n250000000000\n```", "```java\n;; let coll be a collection of numbers\n(reduce (fn ([x] x) ([x y] (if (or (zero? x) (zero? y)) (reduced 0) (* x y))))\n             coll)\n```", "```java\n(def PI Math/PI)\n(definline circumference [radius]\n  `(* 2 PI ~radius))\n```", "```java\n(def ^:const PI Math/PI)\n```", "```java\nuser=> (def a 10)\nuser=> (def ^:const b 10)\nuser=> (def ^:dynamic c 10)\nuser=> (time (dotimes [_ 100000000] (inc a)))\n\"Elapsed time: 1023.745014 msecs\"\nnil\nuser=> (time (dotimes [_ 100000000] (inc b)))\n\"Elapsed time: 226.732942 msecs\"\nnil\nuser=> (time (dotimes [_ 100000000] (inc c)))\n\"Elapsed time: 1094.527193 msecs\"\nnil\n```"]