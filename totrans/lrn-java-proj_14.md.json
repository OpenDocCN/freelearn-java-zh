["```java\ninterface SampleFI{    void m();\n}\nclass SampleClass implements SampleFI{\n   @Override\n   public void m(){System.out.println(\"m()\");}\n}\n```", "```java\n      SampleFI lambda = () -> System.out.println(\"m()\");      lambda.m();\n```", "```java\ninterface SomeFunctionalInterface {    void m();\n}\n```", "```java\nSomeFunctionalInterface lambda1 = () -> {   System.out.println(\"First lambda!\");\n};\n```", "```java\nSomeFunctionalInterface lambda2 = () ->    System.out.println(\"Second lambda!\");\n```", "```java\nPredicate<String> lambda = str -> {     return str.startsWith(title);\n};\n```", "```java\npublic static void filterData(List<String> list,                              Predicate<String> lambda) {\n     list.removeIf(lambda);\n};\n```", "```java\nprintC.accept(\"Maaike\");printC.accept(\"Sean\");\n```", "```java\nmapPrint.accept(\"Dublin\", \"Ireland\");mapPrint.accept(\"The Hague\", \"Holland\");\n```", "```java\nList<String> names = Arrays.asList(\"Maaike\", \"Sean\");names.forEach(name -> System.out.println(name); // lambda\nnames.forEach(System.out::println); // method reference\n```", "```java\nconcatMR.apply(\"Orange\", \" Juice\");\n```", "```java\n\"Orange \".concat(\"Juice\");\n```", "```java\nSupplier<Integer> mr1 = Person::howMany;\n```", "```java\nFunction<Person, Integer> mr2     = Person::howMany;\n```", "```java\nBiFunction<Person, Person, Integer> mr3     =  Person::howMany;\n```"]