- en: Chapter 8. Additional Play Information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Testing with Travis CI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring with New Relic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating a Play application with AngularJS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating a Play application with Parse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Play development environment using Vagrant
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Coding Play 2 web apps with IntelliJ IDEA 14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will explore additional recipes for Play that developers
    will find handy and useful in their toolbox. We will touch on automated testing
    and monitoring tools for Play 2.0 web applications that are essential auxiliary
    tools for the modern web application. We will also look at integrating an AngularJS
    frontend and integrating [Parse.com](http://Parse.com), a **Backend-as-a-Service**
    (**BaaS**), to manage our data in a Play web application.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we will look into automating the creation of a Play development environment
    using the popular tool **Vagrant**, allowing developers to create shareable and
    more portable development environments.
  prefs: []
  type: TYPE_NORMAL
- en: Testing with Travis CI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we will explore how to use **Travis CI** to build and run automated
    tests for a Play 2.0 web app. We need to sign up for an account on Travis CI together
    with a Github account. We will also configure our Travis account in such a way
    that it is connected to a Github repository to conduct automatic tests on code
    commits.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, you need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a Github account at [https://github.com/join](https://github.com/join):![](img/W1jMSmgF.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new public Github repository called play2-travis at:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/new](https://github.com/new)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'On your development machine, create a new Play 2.0 web app using the `activator`
    template `play-slick-angular-test-example`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit `.travis.yml` to trigger our test script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Commit and push to the Github remote repository (please make special note of
    your Github username and specify it in the command below):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Sign up for a Travis account by using your Github account at:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://travis-ci.org](https://travis-ci.org)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After Travis has synced your Github repositories, enable Travis builds for the
    play2-travis repository at
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`https://travis-ci.org/profile/&lt;YOUR_GITHUB_USER&gt;`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/MFz8BeV6.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Next, modify `test/controllers/ReportSpec.scala` by adding a sample test failure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Commit and push to trigger a Travis build with the expected test failure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should trigger our build in Travis after a few seconds. We expect our
    very first build to fail and should see a result similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![](img/BNTSYPGZ.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Now, comment out the sample test failure in `test/controllers/ReportSpec.scala`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s commit and push these latest changes, this time expecting our Travis
    build to pass:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This commit should again trigger a build in Travis, and this time around, we
    should see all of the tests passing in our Travis dashboard.![](img/SOMLDy56.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we utilized Travis CI to build and execute tests in our linked
    Github repository. This setup enables us to establish a **development-commit-test**
    process. This setup requires user accounts for Travis CI and Github.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have identified a Github repository, we want to integrate with Travis.
    We need to update the Travis configuration (`.travis.yml`) in the project root,
    specifying a run script to execute our webapp tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the command that Travis executes when running our tests. Travis will
    configure builds based on the settings in the `.travis.yml` configuration file
    (in our recipe, running the `sbt` task test) to execute our webapp tests. Build
    results are displayed on the repository dashboard in Travis:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/y58YdeMZ.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once we have our Github repository linked and enabled in Travis, we observe
    that a build is triggered after every code commit and pushed to the Github repository.
    This is a great development tool and process for developers to be made aware of
    any regression issues to recently checked-in code, with support for other build
    tooling such as artifact publishing and notifications.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring with New Relic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we will deploy a Play 2.0 web app using Docker and Digital
    Ocean, and monitor the web app using **New Relic**. We will deploy the web app
    as a Docker container and detail out how to instrument the computer-database-scala
    sample web application using a New Relic JAR file integrated with our activator
    build script.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, you need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: First, sign up for a New Relic account at [https://newrelic.com/signup](https://newrelic.com/signup)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new Java application in the New Relic dashboard:![](img/mkHMw6TA.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: During the creation of the Java application, please make note of your New Relic
    license key:![](img/uUKAhSoN.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, download the New Relic Java agent ZIP and make note of the download location.
    This ZIP file should contain the Java agent library, license key file, API documentation,
    and other useful New Relic resources.![](img/Eirt8Ocw.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Unzip the Java agent ZIP file and make note of two important files that we
    will need, `newrelic.yml` and `newrelic.jar`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the `newrelic.yml` file by adding a relevant name to the setting parameter
    `app_name`, For this recipe, we will name our `app_name`, `computer-database-scala`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new Play web application using the `activator` template `computer-database-scala`,
    and change it into the project root directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an `instrument` directory in the `conf` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Copy our two New Relic config files to `conf/instrument`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit `conf/application.conf` to enable automatic database evolution:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a newer version of the native Docker packager `sbt` plugin in `project/plugins.sbt`,
    which has additional native support for Docker:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit `build.sbt` to specify docker-specific settings for the web app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the Docker image using `activator`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Log in to Docker from your local development machine using your Docker Hub
    credentials:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Build the image and upload to [hub.docker.com](http://hub.docker.com) using
    `activator`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Pull the `play2-deploy-81` Docker image from [hub.docker.com](http://hub.docker.com)
    into the virtual machine we will be deploying the web application on:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the `play2-deploy-81` Docker container in the same remote virtual machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using a web browser, you should now be able to access our just-deployed computer
    database web application:![](img/Y52a0H5f.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, log in to your New Relic account and navigate to your application's dashboard.
    You should be able to see some relevant application statistics in the form of
    charts and graphs:![](img/JD52glse.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we deployed a Play 2.0 web application in a remote **virtual
    machine** (**vm**). For the virtual machine, we used CoreOS version 607.0.0 as
    the base operating system, which should automatically install Docker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the deployment VM was set up, we turned our attention to setting up our
    New Relic account. After creating the account, we downloaded the New Relic Java
    agent and made a special note of our account license key with New Relic. We will
    use both next, as we integrate the New Relic java agent with our Play web application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: We used the activator template `computer-database-scala` for this recipe as
    our sample Play web application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have our web project generated, we will place the two New Relic config
    files inside the `conf/instrument` directory in our project root:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'To load the native Docker packager, we need to add the `sbt-native-packager`
    plugin to our build plugins file in `project/plugins.sbt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The last step is to configure our main build file `build.sbt`, to specify the
    docker-specific settings to create the image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'With the preceding settings, we specify the default repository in [hub.docker.com](http://hub.docker.com)
    and the main port number we will be exposing our app in (in this recipe, port
    number 9000). The final setting is where we specify the `entrypoint` command.
    We had to modify it to pass in the necessary settings to specify the New Relic
    java agent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The generated `Dockerfile` from the preceding settings should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'We can verify that the New Relic java agent is loaded currently, by viewing
    the Docker logs as we run our Docker container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we have installed and deployed the Docker container in our deployment
    VM, we can access the `computer-database-scala` web application using a web browser.
    We can then view all relevant instrumentation data points, such as JVM and database
    metrics, with charts and graphs, using the New Relic dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/jSVRWVg1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, we can view how in-depth New Relic''s application metrics are, with reporting
    views for the JVM, database connections, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/zdXzAn7U.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Integrating a Play application with AngularJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we will integrate a Play web application with an AngularJS-based
    frontend. AngularJS is a popular JavaScript framework and provides developers
    with tools to build powerful interactive UIs with ease. Some familiarity with
    AngularJS is assumed for this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: More information about AngularJS can be found here at [https://angularjs.org/](https://angularjs.org/).
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will also use WebJars, a Play-friendly dependency management
    repository, to manage our AngularJS libraries.
  prefs: []
  type: TYPE_NORMAL
- en: More information about WebJars can be found at [http://www.webjars.org/](http://www.webjars.org/).
  prefs: []
  type: TYPE_NORMAL
- en: We will also be using RequireJS, which is a JavaScript module script loader,
    to manage the AngularJS module and `public/javascripts/main.js`, our main application
    JavaScript module. For more information about RequireJS, refer to their online
    documentation at [http://requirejs.org/](http://requirejs.org/).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, you need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new Play 2 web application project by using the `activator` template
    `play-scala`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the `build.sbt` build file to import RequireJS, AngularJS, and Bootstrap:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the contents of the default application controller file `app/controllers/Application.scala`,
    and replace the contents with the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the contents of the routes file `conf/routes`, and replace with the following
    snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the contents of the default index template HTML file `app/views/index.scala.html`
    and replace with the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the contents of the default layout template file `app/views/main.scala.html`
    and replace with the following snippets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the main JavaScript file for our web application in `public/javascripts/main.js`
    and add the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we add the Angular controller JavaScript file in `public/javascripts/controllers.js`
    with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After adding the angular controllers file, we add the Angular factory JavaScript
    file in `public/javascript/services.js` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we add the products partial HTML file in `public/javascripts/partials/products.html`
    with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can now execute the `activator` command `run` to start the Play 2 web application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using `curl`, we can verify that our products API endpoint is working correctly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We can now access our Angular-driven products listing page with the Play 2 backed
    API endpoint by loading the URL `http://localhost:9000` in a web browser:![](img/rmqhYqAm.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we created a Play 2 web application that used AngularJS and
    Bootstrap to display a listing of products. The list of products was served by
    a Play 2-based Rest API endpoint, which returns a set of products that contain
    a product title and SKU.
  prefs: []
  type: TYPE_NORMAL
- en: To wire up everything together, we had to modify a few configuration settings
    to the base play-scala `activator` template and add new JavaScript files that
    contained our main AngularJS script.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we had to declare that our web application required AngularJS, RequireJS,
    and Bootstrap by modifying our library dependencies in the `build.sbt` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we modified the application controller to add a product case class and
    the `listProducts` action, which will serve our products API endpoint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we need to modify our `routes` file to declare new routes and reconfigure
    an existing route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding snippet, we reconfigured the existing `/assets/*file` route
    by using the `versioned` action instead. We then added the products API endpoint
    route and the route entry for the WebJars assets.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we need to make modifications to the existing `app/views/index.scala.html`
    template to insert the Angular View tag to render partial HTMLs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The next step would be to modify the layouts template file `app/views/main.scala.html`
    to load our main JavaScript file and its dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We then need to add our main JavaScript file in `public/javascripts/main.js`
    to configure our main Angular app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the preceding snippet, we initialized Angular and two other Angular plugins,
    `angular-routes` and `angular-resources`, which will handle request routes and
    manage API calls respectively. We also loaded and initialized our Angular controllers
    and services script files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Lastly, we configured our Angular app routes using the `$routeProvider` directive.
    For this recipe, the base URL loads the products controller by default, using
    the template partial `public/javascripts/partials/products.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For this recipe, we were successfully able to integrate AngularJS with our Play
    2 web application using the WebJars repository to manage all frontend libraries
    (for this recipe, Angular, RequireJS, and Bootstrap). We were able to access a
    products API endpoint and display its contents in an Angular template.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating a Play application with Parse.com
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we will integrate a Play 2 Rest API with a BaaS such as [Parse.com](http://Parse.com)'s
    Parse Core, which is a cloud service that allows developers to store data in the
    cloud. In this recipe, we want to be able to see how we can use Play to integrate
    other external web services into our web application. It should not be uncommon
    for modern web applications to have more than one data source. We will use a Parse
    Core application to mimic this. We will use the Play WS library to connect to
    the Parse API, particularly using HTTP headers to send application credentials
    and JSON data to the Parse API web service. We will also be able to use [Parse.com](http://Parse.com)'s
    own core data browser to view the data we have stored in our Parse Core application.
  prefs: []
  type: TYPE_NORMAL
- en: For this recipe, we will need a [Parse.com](http://Parse.com) account. You can
    sign up for one at [https://parse.com/#signup](https://parse.com/#signup).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, you need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Sign in to your [Parse.com](http://Parse.com) account and create a new Parse
    Core application:![](img/j2XLqIq7.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once a new Parse app has been created, navigate to the **settings** section
    to retrieve your **application ID** and **Rest API key**:![](img/dNeR7iVv.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, create a new Parse class (analogous to a database table) in the Parse
    Core section. For this recipe, we will store **Item** records:![](img/ptAW9lE1.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After creating the Parse class, add the necessary columns for our items. For
    this recipe, we will add the **title** and SKU columns:![](img/uMTZKg5W.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we will work on our Play 2 web application that will interface with Parse
    Core. Generate a new Play 2 web application based on the activator template `play-scala`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create a new plugin in `app/plugins/ParsePlugin.scala`, with the following
    content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add the Parse Core keys, which we made note of in the previous step,
    in the `conf/application.conf file`. Make sure to replace the placeholders with
    your actual Parse app ID and Rest key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create our Parse helper class in `app/plugins/ParseAPI.scala`, with the
    following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, initialize the plugin on the app startup by creating the Play plugins
    configuration file in `conf/play.plugins` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, let''s add our `Items` controller in the `app/controllers/Items.scala`
    file, with the following contents, which should add two action methods, `index()`,
    for returning items from Parse Core, and `create()`, which will persist items
    on Parse Core:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the necessary routes entry in the `conf/routes` file for our `Items` actions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To run our web application, we will use the activator command `run`, with the
    tilde character (~) to signify that we want Hot-Reloading enabled for this web
    application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using `curl`, we can now insert new records into our Parse Core application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can also retrieve `items` stored on Parse Core by using `curl`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we looked into a more practical example of integrating an external
    web service with a Play 2 web application using the Play WS library. The Play
    WS library saves developers from a lot of boilerplate code in setting up and connecting
    to a remote HTTP host, it also provides convenient methods to set up headers,
    request parameters, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Parse Core is a very popular and solid backend-as-a-service provider, which
    offers other developer services, such as mobile push notifications and mobile
    analytics, all of which are important additions to any developer toolchain.
  prefs: []
  type: TYPE_NORMAL
- en: 'Essential to this recipe is signing up for a [Parse.com](http://Parse.com)
    account and creating a Parse Core application. Once we have that set up, we can
    proceed to creating a Play plugin, which will take care of the initialization
    and setting up of our connection to the Parse API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we create our Parse Core delegate class `conf/plugins/ParseAPI.scala`,
    which will encapsulate all interfacing with the Parse API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding class, we created two public methods that should have data
    retrieval and record creation. We include the required Parse API headers for authentication
    whenever we do a `GET` or `POST` request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'For the `POST` request, we add the required additional header to set our content
    type to `application/json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the Parse plugin is all set up, we create the `Items` controller, which
    will receive the requests for items and item creation and will be responsible
    for the delegation of these requests to the Parse API helper:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Do not forget to add the subsequent routes in the `conf/routes` config file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use the Parse Core dashboard to view all data created via the Parse
    API:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/K0GHawAH.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information about Parse Core, please refer to their online documentation
    found at [https://parse.com/docs](https://parse.com/docs).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Play development environment using Vagrant
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will explore how to create a portable development environment for Play 2
    development using **Vagrant**, a powerful addition to any developer's toolchain.
    Vagrant allows developers to automate the creation of a development environment,
    from installing the required development kits for **Read-Eval-Print Loop** (**REPL**)
    tools, to installing other services such as MySQL and Redis. This setup is useful
    for multimember development teams or developers who work off of multiple workstations,
    where a consistent, identical development environment is necessary and ideal.
  prefs: []
  type: TYPE_NORMAL
- en: For this recipe, we will create our Vagrant instance from the ground up, installing
    the required libraries to run our sample Play web application, and running a MySQL
    service using Docker and the actual sample Play web application using the `activator`
    template `play-slick-angular-test-example`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, you need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install Vagrant by following the installation instructions at the following
    link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://docs.vagrantup.com/v2/installation/index.html](https://docs.vagrantup.com/v2/installation/index.html)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should now have a version of Vagrant installed locally:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a workspace directory and change into the newly created directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `Vagrantfile` in the project root with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a Bootstrap bash script file `bootstrap.sh`, with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a git ignore file `.gitignore`, to exclude the Vagrant directory workspace
    from git:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once Vagrant is installed and our `Vagrantfile` has been configured properly,
    we can initialize our Vagrant instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can log in to the Vagrant instance using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once logged in to the Vagrant instance, change into the Vagrant workspace directory
    with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'List the contents of the `/vagrant` directory to verify that you are in the
    correct directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For this recipe, we will use the `activator` template `play-slick-angular-test-example`
    and generate a new Play 2 project based on this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the configuration file in `conf/application.conf` by modifying the following
    lines of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the Play web application using `activator`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You should now be able to access the Play web application by using a web browser:![](img/aLB0M6Rs.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we installed Vagrant, a popular developer tool that automates
    the initialization and setup of developer environments, as per the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Vagrantfile` config file, we declared that we will be using a Centos
    6.5 Vagrant box as our base OS:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We declared that we want our `bootstrap.sh` script file to be run during the
    Vagrant instance provisioning:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we declared which ports to forward from our vagrant instance to our host
    machine, port 9000 for Play and port 3306 for MySQL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we optionally configured our Vagrant instance to have a 4-GB RAM and
    utilize two CPUs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We installed relevant tools for Play development, which we specified in the
    `bootstrap.sh` script file. We declared the version of Scala and Activator at
    the top of the `bootstrap.sh` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We also declared the default MySQL password to use for our MySQL instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we installed the required and necessary CentOS packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The next packages to install are Docker and its required libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we installed the JDK, a Scala binary, and Activator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we ran a MySQL Docker container on the instance start up:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We run the Vagrant command `vagrant up`, to initialize the Vagrant instance
    from scratch. After a short while, our Play 2 development environment should be
    ready. Log in to the Vagrant instance using the command `vagrant ssh`. You should
    be able to verify whether all the required binaries have been installed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once the Vagrant instance is up and running, we can build and run a Play web
    application; in this recipe, the `play-slick-angular-test-example` activator template
    that we installed in the `/vagrant` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Remember to pause your Vagrant instance whenever you want to shut down the
    instance for a while and return to it later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: This allows the Vagrant instance to retain its current state without having
    to reinitialize the Vagrant instance later. For more information about Vagrant,
    refer to the documentation at [https://docs.vagrantup.com/v2/](https://docs.vagrantup.com/v2/).
  prefs: []
  type: TYPE_NORMAL
- en: Coding Play 2 web apps with IntelliJ IDEA 14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this recipe, we will explore how to use the popular IDE, IntelliJ IDEA
    14 to code Play 2 web applications. We will be using the community edition:'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, you need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download and install IntelliJ IDEA 14 from the Jetbrains website:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://www.jetbrains.com/idea/download/](https://www.jetbrains.com/idea/download/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Navigate to the Play 2 web application with which you will want to use IDEA
    14; in this recipe, `play2-parse-84`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using `activator`, generate the base IDEA 14 project files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start IntelliJ IDEA 14 and click on **Import Project**:![](img/Me0lXmyK.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using IDEA 14, navigate to the project directory of the project you want to
    work on; in this recipe, **play2-parse-84**:![](img/Oskb2rVI.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next screen, select **SBT** as the external model for the project:![](img/CNcotwH8.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select additional project settings, such as the installed JDK version
    to use:![](img/ptXtiYwi.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After clicking on **Finish**, you should have your Play 2 web application loaded
    correctly on IntelliJ IDEA 14:![](img/RGPlTj7A.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we simply used Activator's built-in support for IntelliJ IDEA
    to generate our Play 2 web applications IDEA project files using the command `activator
    idea`. Once we generated the IDEA project files from our current code base, all
    we needed to do was import it into IntelliJ IDEA and follow the project settings
    screens. We should now be able to work on our Play 2 web applications using IntelliJ
    IDEA.
  prefs: []
  type: TYPE_NORMAL
