["```java\nng generate component <component-name>\nng g c <component-name>\n```", "```java\nimport { Component } from '@angular/core';\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'superheroes';\n}\n```", "```java\n// app.component.ts\nexport class AppComponent {\n  title = 'superheroes';\n}\n<!—app.component.html ->\n<!-- INTERPOLATE TITLE -->\n<span> Title:  {{title}} </span>\n```", "```java\n// app.component.ts\nexport class AppComponent {\n  isDisabled = true;\n}\n<!—app.component.html ->\n<button [disabled]=\"isDisabled\">Can't be clicked</button>\n```", "```java\n// app.component.ts\nexport class AppComponent {\n  model = 'seiji';\n}\n<!—app.component.html ->\n<input [(ngModel)]=\"model\"/>\n```", "```java\n    <div *ngIf=\"condition\">Will show if the condition is true</div>\n    ```", "```java\n    // this will display all the users for each row\n    ```", "```java\n    <tr *ngFor=\"let user of users;\">\n    ```", "```java\n        <td>{{user.firstName }}</td>\n    ```", "```java\n        <td>{{user.lastName}}</td>\n    ```", "```java\n    </tr>\n    ```", "```java\n    //evaluates the hero variable and displays the name of the hero base on its value\n    ```", "```java\n    <div [ngSwitch]=\"hero\">\n    ```", "```java\n       <div *ngSwitchCase=\"'Dr. Strange'\">\n    ```", "```java\n          Stephen Strange</div>\n    ```", "```java\n       <div *ngSwitchCase=\"'Hawkeye'\">Clint Barton</div>\n    ```", "```java\n       <div *ngSwitchCase=\"'Hulk'\">Bruce Banner</div>\n    ```", "```java\n    </div>\n    ```", "```java\n    //adds an error class on the input element if the\n    ```", "```java\n    //control value is invalid\n    ```", "```java\n    <input type=\"text\" [ngClass]=\"control.isInvalid ? 'error': ''\" />\n    ```", "```java\n    // the color of the element will base on the value of\n    ```", "```java\n    // the color variable\n    ```", "```java\n    <div [ngStyle]=\"{'color': color}\"> Angular Framework </div>\n    ```", "```java\n@NgModule({\n  declarations:[],\n  imports:[],\n  providers:[],\n  exports: [],\n  bootstrap:[],\n  entrycomponents:[]\n})\n```", "```java\n@Injectable({\n  providedIn: 'root',\n })\n```", "```java\n@NgModule({\n    providers: [Service1]\n})\n```", "```java\n├── src\n│   ├── app\n│   │   ├── anti-hero\n│   │   │   ├── components\n│   │   │   │   ├── shared.component.ts\n│   │   │   ├── directives\n│   │   │   │   ├── first.directive.ts\n│   │   │   │   ├── another.directive.ts\n│   │   │   ├── pages\n│   │   │   │   ├── form\n│   │   │   │   │   ├── form.component.ts\n│   │   │   │   ├── list\n│   │   │   │   │   ├── list.component.ts\n│   │   │   │   ├── anti-hero.component.ts\n│   │   │   │   ├── anti-hero.component.html\n│   │   │   │   ├── anti-hero.component.css\n│   │   │   │   ├── index.ts\n│   │   │   ├── pipes\n│   │   │   │   ├── first.pipe.ts\n│   │   │   ├── anti-hero.module.ts\n│   │   │   ├── anti-hero.routing.module.ts\n│   │   │   ├── index.ts\n```", "```java\n├── src\n│   ├── app\n│   │   ├── shared\n│   │   │   ├── layout\n│   │   │   │   ├── footer\n│   │   │   │   │   ├── footer.component.ts\n│   │   │   │   │   ├── footer.component.html\n│   │   │   │   ├── header\n│   │   │   │   │   ├── header.component.ts\n│   │   │   │   │   ├── header.component.html\n│   │   │   │   ├── layout.module.ts\n│   │   │   ├── index.ts\n```", "```java\n@NgModule({})\nexport class CoreModule {\n  constructor(@Optional() @SkipSelf() core:CoreModule ){\n    if (core) {\n        throw new Error(\"Core module should only be\n                         imported to the Root Module\")\n    }\n  }\n}\n```", "```java\nimport {NgModule} from \"@angular/core\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {ListComponent} from \"./pages/list/list.component\";\nimport {FormComponent} from \"./pages/form/form.component\";\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: ListComponent,\n  },\n  {\n    path: \"form\",\n    component: FormComponent,\n  },\n];\n@NgModule({\n  declarations: [ListComponent, FormComponent],\n  imports: [RouterModule.forChild(routes)],\n  exports:[RouterModule]\n})\nexport class AntiHeroRoutingModule {}\n```", "```java\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nconst routes: Routes = [\n  {\n    path: \"\",\n    redirectTo: \"anti-heroes\",\n    pathMatch: \"full\",\n  },\n  {\n    path: \"anti-heroes\",\n    loadChildren: () =>\n      import(\"./anti-hero/anti-hero.module\").then((m) =>\n             m.AntiHeroModule),\n  }\n];\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n})\nexport class AppRoutingModule { }\n```", "```java\n@NgModule({\n  declarations: [\n    NavbarComponent,\n    FooterComponent\n  ],\n  imports: [CommonModule]\n})\nexport class SharedModule { }\n```", "```java\n@NgModule({\n  declarations: [\n    NavbarComponent,\n    FooterComponent\n  ],\n  exports: [NavbarComponent, FooterComponent]\n  imports: [CommonModule]\n})\n```", "```java\n@Component({\n  selector: 'app-home',\n  template: `\n    <h2>User List</h2>\n    <div>\n        <table class=\"table\">\n            <tbody>\n            <tr (click)=\"selectUser(user)\" *ngFor=\"let user\n             of users\">\n                <td> {{user.firstName}} </td>\n                <td>\n                    <span>{{user.lastName}}</span>\n                </td>\n            </tr>\n            </tbody>\n        </table>\n    </div>\n`,\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n  users: User[] = [];\n  constructor(private userService: UserService) {\n  }\n  ngOnInit() {\n      this. userService.getUsers()\n          .subscribe(users => this.users = users);\n  }\n  selectUser(user: User) {\n     // action\n  }\n}\n```", "```java\n@Component({\n  selector: 'app-home',\n  template: `\n    <h2>User List</h2>\n    <div>\n       <!—we will place that dumb component here later-->\n    </div>\n`,\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n  users: User[] = [];\n  constructor(private userService: UserService) {\n  }\n  ngOnInit() {\n      this. userService.getUsers()\n          .subscribe(users => this.users = users);\n  }\n  selectUser(user: User) {\n     // action\n  }\n}\n```", "```java\n@Component({\n  selector: 'users-list',\n  template: `\n        <table class=\"table\">\n            <tbody>\n            <tr (click)=\"selectUser(user)\" *ngFor=\"let user\n             of users\">\n                <td> {{user.firstName}} </td>\n                <td>\n                    <span>{{user.lastName}}</span>\n                </td>\n            </tr>\n            </tbody>\n        </table>\n  `,\n  styleUrls: ['./users-list.component.css']\n})\nexport class UsersListComponent {\n  @Input()\n  users: User[];\n  @Output('user')\n  userEmitter = new EventEmitter<User>();\n   selectUser(user:User) {\n        this.userEmitter.emit(user);\n    }\n}\n```", "```java\n@Component({\n  selector: 'app-home',\n  template: `\n    <h2>User List</h2>\n    <div>\n       <users-list users=\"users\"\n        (user)=\"selectUser($event)\"/>\n    </div>\n`,\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n  users: User[] = [];\n  constructor(private userService: UserService) {\n  }\n  ngOnInit() {\n      this. userService.getUsers()\n          .subscribe(users => this.users = users);\n  }\n  selectUser(user: User) {\n     // action\n  }\n}\n```", "```java\n<table>\n    <thead>\n        <th *ngFor=\"let item of headers\">{{item.headerName}}</th>\n    </thead>\n    <tbody>\n        <tr (click)=\"selectAntiHero(item)\"\n *ngFor =\"let item of antiHeroes\">\n           <ng-container *ngFor=\"let header of headers\">\n               <td>{{item[header.fieldName]}}</td>\n           </ng-container>\n        </tr>\n    </tbody>\n</table>\n```", "```java\nexport class AntiHeroListComponent implements OnInit {\n  @Input() headers: Array<{headerName: string, fieldName:\n    keyof AntiHero}> = [];\n  @Input() antiHeroes: Array<AntiHero> = [];\n  @Output() antiHero = new EventEmitter();\n  constructor() { }\n  ngOnInit(): void {\n  }\n  selectAntiHero(antiHero: AntiHero) {\n    this.antiHero.emit(antiHero);\n  }\n}\n```", "```java\nexport interface AntiHero {\n    firstName: string;\n    lastName: string;\n    house: string;\n    kownAs: string;\n}\n```", "```java\n@NgModule({\n  declarations: [\n    AntiHeroListComponent,\n    AntiHeroFormComponent,\n    ListComponent,\n    FormComponent\n  ],\n  imports: [\n    CommonModule,\n    AntiHeroRoutingModule,\n  ]\n})\nexport class AntiHeroModule { }\n```", "```java\ntable, th, td {\n    border: 1px solid;\n    border-collapse: collapse;\n    border: 1px solid;\n}\n```", "```java\nexport class ListComponent implements OnInit {\n  // sample data of anti-hero\n  antiHeroes: AntiHero[] = [\n    {\n      firstName: \"Eddie\",\n      lastName: \"Brock\",\n      house: \"New York\",\n      kownAs: \"Venom\"\n    }\n  ]\n  headers: {headerName: string, fieldName: keyof\n            AntiHero}[] = [\n    {headerName: \"First Name\", fieldName: \"firstName\"},\n    {headerName: \"Last Name\", fieldName: \"lastName\"},\n    {headerName: \"House\", fieldName: \"house\"},\n    {headerName: \"Known As\", fieldName: \"kownAs\"},\n  ]\n  constructor() { }\n  ngOnInit(): void {\n  }\n  selectAntiHero(antiHero: AntiHero) {}\n}\n```", "```java\n<!-- Dumb component anti hero list -->\n<app-anti-hero-list [antiHeroes]=\"antiHeroes\" [headers]=\"headers\" (antiHero)=\"selectAntiHero($event)\"></app-anti-hero-list>\n```", "```java\nng add @angular/material\n```", "```java\n    <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500&display=swap\" rel=\"stylesheet\">\n    ```", "```java\n    <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\">\n    ```", "```java\n        html, body { height: 100%; }\n        ```", "```java\n        body { margin: 0; font-family: Roboto, \"Helvetica Neue\", sans-serif; }\n        ```", "```java\nimport {MatButtonModule} from '@angular/material/button';\n```", "```java\n<div class=\"example-button-row\">\n    <button mat-raised-button>Basic</button>\n    <button mat-raised-button\n      color=\"primary\">Primary</button>\n    <button mat-raised-button\n      color=\"accent\">Accent</button>\n    <button mat-raised-button color=\"warn\">Warn</button>\n    <button mat-raised-button disabled>Disabled</button>\n    <a mat-raised-button href=\"\n      https://material.angular.io/target=\" _blank>Link</a>\n </div>\n```", "```java\nimport {MatIconModule} from '@angular/material/icon';\n```", "```java\n<mat-icon color=\"primary\">delete</mat-icon>\n<mat-icon color=\"accent\">fiber_new</mat-icon>\n<mat-icon color=\"warn\">pageview</mat-icon>\n```", "```java\nimport {MatTableModule} from '@angular/material/table';\n```", "```java\n<table mat-table [dataSource]=\"data\" class=\"mat-elevation-z8\">\n  <!-- Position Column -->\n  <ng-container matColumnDef=\"id\">\n    <th mat-header-cell *matHeaderCellDef> ID </th>\n    <td mat-cell *matCellDef=\"let element\">\n     {{element.position}} </td>\n  </ng-container>\n  <!-- Name Column -->\n  <ng-container matColumnDef=\"name\">\n    <th mat-header-cell *matHeaderCellDef> Name </th>\n    <td mat-cell *matCellDef=\"let element\">\n      {{element.name}} </td>\n  </ng-container>\n  <tr mat-header-row *matHeaderRowDef=\"columns\"></tr>\n  <tr mat-row *matRowDef=\"let row; columns: columns;\"></tr>\n</table>c\n```", "```java\nimport {MatToolbarModule} from '@angular/material/toolbar';\n```", "```java\n  <p>\n    <mat-toolbar color=\"primary\">\n      <button mat-icon-button class=\"example-icon\"\n        aria-label=\"Example icon-button with menu icon\">\n        <mat-icon>menu</mat-icon>\n      </button>\n      <span>Angular CRUD</span>\n    </mat-toolbar>\n  </p>\n```", "```java\n<p>\n  <mat-form-field appearance=\"legacy\">\n    <mat-label>Legacy form field</mat-label>\n    <input matInput placeholder=\"Placeholder\">\n  </mat-form-field>\n</p>\n<p>\n  <mat-form-field appearance=\"standard\">\n    <mat-label>Standard form field</mat-label>\n    <input matInput placeholder=\"Placeholder\">\n  </mat-form-field>\n</p>\n<p>\n  <mat-form-field appearance=\"fill\">\n    <mat-label>Fill form field</mat-label>\n    <input matInput placeholder=\"Placeholder\">\n  </mat-form-field>\n</p>\n<p>\n  <mat-form-field appearance=\"outline\">\n    <mat-label>Outline form field</mat-label>\n    <input matInput placeholder=\"Placeholder\">\n  </mat-form-field>\n</p>\n```", "```java\n@NgModule({\n  imports: [\n    CommonModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatButtonModule,\n    MatTableModule,\n    MatFormFieldModule,\n    MatSelectModule,\n    MatInputModule,\n  ],\n  exports: [\n    MatToolbarModule,\n    MatIconModule,\n    MatButtonModule,\n    MatTableModule,\n    MatFormFieldModule,\n    MatSelectModule,\n    MatInputModule,\n  ]\n})\nexport class MaterialModule { }\n```", "```java\n<p>\n    <mat-toolbar color=\"primary\">\n      </button>\n      <span>Angular CRUD</span>\n    </mat-toolbar>\n  </p>\n```", "```java\n<table mat-table [dataSource]=\"antiHeroes\" class=\"mat-elevation-z8\">\n    <!-- Data for columns -->\n    <ng-container *ngFor=\"let item of headers\"\n     [matColumnDef]=\"item.fieldName\">\n      <th mat-header-cell *matHeaderCellDef>\n        {{item.headerName}} </th>\n      <td mat-cell *matCellDef=\"let element\">\n        {{element[item.fieldName]}} </td>\n    </ng-container>\n    <!-- Actions for specific item -->\n    <ng-container matColumnDef=\"actions\">\n        <th mat-header-cell *matHeaderCellDef>\n          Actions </th>\n        <td mat-cell *matCellDef=\"let element\">\n            <button (click)=\"selectAntiHero(element, 0)\"\n              mat-raised-button color=\"primary\">\n                <mat-icon>pageview</mat-icon> View\n            </button>\n            &nbsp;\n            <button (click)=\"selectAntiHero(element, 1)\"\n              mat-raised-button color=\"warn\">\n                <mat-icon>delete</mat-icon> Delete\n            </button>\n        </td>\n    </ng-container>\n    <tr mat-header-row *matHeaderRowDef=\"headerFields\">\n    </tr>\n    <tr mat-row *matRowDef=\"let row; columns:\n      headerFields\"></tr>\n  </table>\n```", "```java\nexport class AntiHeroListComponent implements OnInit {\n  @Input() headers: Array<{headerName: string, fieldName:\n    keyof AntiHero}> = [];\n  @Input() antiHeroes: Array<AntiHero> = [];\n  @Output() antiHero = new EventEmitter<{antiHero:\n    AntiHero, action :TableActions}>();\n  headerFields: string[] = [];\n  ngOnInit(): void {\n    this.getHeaderFields();\n  }\n  getHeaderFields() {\n    this.headerFields = this.headers.map((data) =>\n      data.fieldName);\n    this.headerFields.push(\"actions\");\n  }\n  selectAntiHero(antiHero: AntiHero, action: TableActions) {\n    this.antiHero.emit({antiHero, action});\n  }\n}\n```", "```java\n<p>\n    <mat-toolbar>\n        <button mat-raised-button color=\"primary\"\n          (click)=\"emitAction(0)\">\n            <mat-icon>fiber_new</mat-icon> Create\n        </button>\n        &nbsp;\n        <button  mat-raised-button color=\"warn\"\n          (click)=\"emitAction(0)\">\n            <mat-icon>delete</mat-icon> Delete All\n        </button>\n    </mat-toolbar>\n  </p>\n```", "```java\nexport class AntiHeroCommandBarComponent implements OnInit {\n  @Output() action = new EventEmitter<CommandBarActions>()\n  constructor() { }\n  ngOnInit(): void {\n  }\n  emitAction(action: CommandBarActions) {\n    this.action.emit(action);\n  }\n}\n```", "```java\n    <app-navbar></app-navbar>\n    ```", "```java\n    <div class=\"container\">\n    ```", "```java\n        <router-outlet></router-outlet>\n    ```", "```java\n    </div>\n    ```", "```java\n    <!—Dumb component command bar \n    ```", "```java\n    <app-anti-hero-command-bar>\n    ```", "```java\n    </app-anti-hero-command-bar>—-- Dumb component anti hero list -->\n    ```", "```java\n    <app-anti-hero-list [antiHeroe\"]=\"antiHer\"es\" [header\"]=\"head\"rs\"></app-anti-hero-list>\n    ```"]