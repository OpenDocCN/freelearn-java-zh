- en: Chapter 7. Load Balancing WildFly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring Apache HTTPD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and configuring mod_cluster for Apache
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Balancing WildFly using auto advertising – UDP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Balancing WildFly using a list of available balancers – TCP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Balancing using the HTTP connector instead of AJP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preserve WildFly workers while restarting Apache
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Balancing the same context for different applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rolling updates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to load balance your WildFly instances.
    Load balancing is the capability to distribute the workload across multiple nodes,
    in our case, WildFly nodes. This technique is used for optimizing resources, minimizing
    the response time, and maximizing the application throughput.
  prefs: []
  type: TYPE_NORMAL
- en: To achieve load balancing, we need a component which fronts our WildFly nodes,
    and distributes the workload across them. A common pattern of distributing the
    workload is to forward client requests in a round-robin manner, so that every
    node serves the same number of requests.
  prefs: []
  type: TYPE_NORMAL
- en: What about the real workload that a request can generate into a node? For example,
    a long-running request or a request which involves heavy tasks would make the
    node much busier than the others that are handling just static page requests.
  prefs: []
  type: TYPE_NORMAL
- en: This is not a fair workload distribution! We need something to better calibrate
    this workload distribution, depending on how busy the nodes really are.
  prefs: []
  type: TYPE_NORMAL
- en: We've already got the Apache HTTP Server (also known as HTTPD), that can balance
    towards our WildFly nodes. We also have a component called `mod_cluster` in both
    HTTPD and WildFly, to get the real workload distribution.
  prefs: []
  type: TYPE_NORMAL
- en: The `mod_cluster` component for Apache HTTP Server is a set of modules, as we
    will see later in this chapter, while `mod_cluster` for WildFly is a subsystem
    named `mod_cluster`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `mod_cluster` component decouples the frontend from the backend. Basically,
    the Apache HTTP Server doesn''t have any reference to the WildFly nodes, and WildFly
    doesn''t have any reference to the HTTPD balancers—as long as multicast advertisement
    is used. Furthermore, `mod_cluster` supports AJP, HTTP, and HTTPS protocols. More
    information can be obtained by reading the official documentation, at the following
    URL: [http://docs.jboss.org/mod_cluster/1.2.0/html/](http://docs.jboss.org/mod_cluster/1.2.0/html/).'
  prefs: []
  type: TYPE_NORMAL
- en: Load balancing does not affect WildFly's operational mode that you are running
    it in (domain or standalone). You can do load balancing between instances running
    in both domain mode and standalone mode. For our purpose, we will first start
    using the standalone mode, and then we will switch to the domain mode.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring Apache HTTPD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to install and configure Apache HTTPD. We
    will first download the software and then install it to the source. If you want,
    you can choose to obtain the Apache HTTP Server by using a package manager such
    as `YUM`, but I think understanding and learning how to build it from source is
    much more interesting.
  prefs: []
  type: TYPE_NORMAL
- en: We will be using Apache HTTPD Version 2.2.29 because the 2.2.x version is one
    of the most used versions in the production environment to run with `mod_cluster`.
    It already comes with the APR and APR-Util lib, along with the PCRE.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To download the Apache HTTP Server, visit [http://httpd.apache.org/download.cgi](http://httpd.apache.org/download.cgi).
    When you first visit this site, you can choose between two stable versions: 2.2
    and 2.4\. Obviously, version 2.4 is newer and it has some new features. It also
    has a different syntax for its configuration files.'
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, version 2.2 has been around for a long time and it might
    be more stable. Nonetheless, the 2.2 bundle provides the APR, APR-Util, and the
    PCRE packages, so you don't have to download and install them separately, as in
    version 2.4.
  prefs: []
  type: TYPE_NORMAL
- en: 'Having said that, we will be using the Apache HTTP Server version 2.2.29\.
    Furthermore, we will need the `openssl-devel` (development) version installed
    in your system. To install it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For Fedora 21, use the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Fedora 22, use the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Download all the software into the `~/WFC/` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once the download is complete, open a terminal and execute the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now that we have all the software unpacked, we are ready to configure, compile,
    and build our Apache HTTPD.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Execute the following commands for Fedora 21/22:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here, `<USER>` must be replaced with your username. In my case, this is `luigi`;
    thus the `--prefix` directive will be `--prefix=/home/luigi/WFC/httpd`. So, let''s
    start executing the following commands:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Okay, now we are ready to launch our Apache. Navigate to its `bin` folder and
    execute it, as shown in the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Ouch... Apache listens on port `80`, which is a privileged port; we got to
    the root. Let''s try again with `sudo`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Bear in mind that in a production environment, the Apache HTTP Server should
    not be run as a root user for security reasons. It goes now, even if we have a
    warning complaining about a `ServerName` directive not settled. Let's get rid
    of this now.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit the `/opt/httpd/conf/httpd.conf` file and look for the following comment
    line `#ServerName www.example.com:80`. Replace it with the following entry:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, as a root user, open and edit the `/etc/hosts` file and add the following
    directive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now going back to the Apache `bin` folder, run the `httpd` script again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The warning disappears. Let's test if everything is working by opening a browser
    and pointing it to `http://balancer-one.com`. You should see the following page:![How
    to do it...](img/3744_07_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Apache HTTPD working and serving its default page
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every issue you find while installing the Apache HTTPD software can be mitigated
    by reading the Apache documentation at the following site [http://httpd.apache.org/docs/2.2/](http://httpd.apache.org/docs/2.2/).
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring mod_cluster for Apache
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to install and configure `mod-cluster` within
    your Apache HTTPD installation. This recipe requires a working Apache HTTPD and
    it assumes that its installation directory is `/opt/httpd`. If you do not have
    Apache installed in your environment, please follow the instructions in the previous
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First of all, download mod-cluster modules from the following site [http://mod-cluster.jboss.org/downloads/1-2-6-Final-bin](http://mod-cluster.jboss.org/downloads/1-2-6-Final-bin).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download all the software into the `/opt/httpd/modules` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you prefer, you can install `mod_cluster` via your OS package manager which,
    in a Fedora-like system, is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once the download is complete, open a terminal and execute the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now that we have all the software unpacked, we are ready to configure `mod_cluster`.
    To better configure and administer `mod_cluster`, let's create a private network
    interface for internal communication, that is between Apache and WildFly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open a terminal window and execute the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If you didn't follow the previous recipe, you may need to edit the `httpd.conf`
    file and disable the `proxy-balancer` module, which conflicts with `mod_cluster`
    modules.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit the `/opt/httpd/conf/httpd.conf` file and look for the following comment
    line `LoadModule proxy_balancer_module modules/mod_proxy_balancer.so`. Replace
    it with the following entry:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the terminal window, create a new file named `mod_cluster.conf` and place
    it into the `opt/httpd/conf/extra` folder as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s edit the `httpd.conf` file again and add the following directive
    at the end. It is pretty much self-explanatory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will load the preceding file, featuring all our `mod_cluster` configuration.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s start our Apache with the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now point your browser to the following URLs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://10.0.0.1`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://10.0.0.1/mcm`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You should see pages as depicted in the following screenshots:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/3744_07_02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Apache HTTPD and mod_cluster manager serving on a private network interface
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s analyze what we have done so far:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we copied all the `mod_cluster` modules into Apache's `modules` directory.
    Then we referenced them by adding a `LoadModule` directive into the `mod_cluster.conf`
    file, in order to load the modules. Furthermore, we referenced the `mod_cluster.conf`
    file into the default Apache configuration file `httpd.conf`, with the `Include`
    directive.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This gave us the glue to stick Apache and `mod_cluster` together.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Why did we create a private network interface? It's due to design and security
    reasons. Design might be a good practice, but security is a must. Internal communication
    should be exposed to a private network, but not to a public network. Nevertheless,
    in an enterprise environment, you are very likely to have servers with two network
    interfaces to accomplish exactly this purpose. Thus, to simulate an enterprise
    environment and give you a good design, we just created another network interface.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, due to the the reason stated in the previous point, we bound the private
    interface between the `mod_cluster` management page `/mcm` and all the communications
    between Apache and WildFly. It is, essentially, about exchanging messages between
    the `mod_cluster` on Apache and the `mod_cluster` component on WildFly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This basically provides balancing; a WildFly `mod_cluster` sends a signal to
    the `10.0.0.1:6666` multicast address, `Hi there, I'm here`. On the other side,
    at Apache, the `mod_cluster` component reads the message and enables that WildFly
    node by balancing it for new requests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Later in this chapter, we will need to change some of the preceding settings,
    adding more directives. The ones discussed here are just the basics to get started
    with.
  prefs: []
  type: TYPE_NORMAL
- en: Balancing WildFly using auto advertising – UDP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to balance two WildFly nodes running in the
    standalone mode. Default `mod_cluster` settings provide auto advertising as enabled,
    using a multicast address. Furthermore, in this recipe we will use a cluster configuration
    also to provide a better test feeling. If you need more information about clustering
    with WildFly, read [Chapter 6](ch06.html "Chapter 6. Clustering WildFly"), *Clustering
    WildFly*.
  prefs: []
  type: TYPE_NORMAL
- en: The entire WildFly configuration used for this recipe will not relay on any
    previous one. On the contrary, we assume that the Apache HTTPD installation and
    configuration are based on the first two recipes of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will need an application named `balancing-test`, that you
    can find in my GitHub repository. If you skipped the *Managing applications using
    the deployments folder* recipe in [Chapter 2](ch02.html "Chapter 2. Running WildFly
    in Standalone Mode"), *Running WildFly in Standalone Mode*, please refer to it
    to download all the source code and projects that you will need.
  prefs: []
  type: TYPE_NORMAL
- en: 'To build the application, give the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's create two folders from the WildFly installation directory `$WILDFLY_HOME`,
    each one representing a server node.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a terminal and execute the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s copy the `balancing-test.war` application into the `deployments`
    folder of each node that we have just created. Do as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s generate a virtual IP for each of the nodes:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If it''s not already running, let''s launch the Apache and its logs, by executing
    the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Okay, now Apache is up. Let''s start our first node by issuing the following
    command into a new terminal window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, a few seconds after `node-1` starts you should see the following entries
    in `access_log` of the Apache logs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Those are `mod_cluster` logs stating that they received an information message,
    a configuration message, and then it enabled the application provided by WildFly
    `node-1`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, open the `mod_cluster-manager` page that we defined in the file `mod_cluster.conf`—Apache
    side—at the following URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see the following page:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/3744_07_03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: mod_cluster manager page displaying a running node and its contexts.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s start the other node `node-2` in a new terminal window, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, a few seconds after `node-2` starts, you should see the following entries
    in the Apache logs, that is, in `access_log`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Let's refresh the `mcm` page:![How to do it…](img/3744_07_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: mod_cluster manager page displaying both running nodes and their contexts.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that everything is up and running, let's play with our marvelous application.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Point your browser to the following URL and refresh the page a few times:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see a page like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/3744_07_05.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Apache serving balancing-test application on node-1
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In my case, the request landed on server `node-1`; yours might land on `node-2`.
    Also, keep in mind that the WildFly `mod_cluster` comes with some balancing default
    settings such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`sticky-session="true"`: which sticks subsequent requests for the same session,
    to the same node, if still alive'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sticky-session-force="true"`: which forces Apache to respond with an error
    in case subsequent requests cannot be routed to the same node'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sticky-session-remove="false"`: which indicates if Apache should remove sticky
    behavior in case subsequent requests cannot be routed to the same node.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'That''s why, while refreshing the page, the node name never changes. By the
    way, let''s stop the serving node and refresh the page one more time. If everything
    worked as expected, you should end up with a page like the one seen in the following
    screenshot:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/3744_07_06.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: Apache serving balancing-test application on node-2
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Yes, we got it!
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you noticed, we didn''t change any particular `mod_cluster` setting on WildFly,
    in both nodes. This is because the WildFly `mod_cluster` configuration relays
    on defaults that are the same as on the Apache side. The entire configuration
    resides in the `mod_cluster` subsystem and in the socket-binding-group. Follow
    this configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code describes how `mod_cluster` should inform its counterpart
    in Apache, concerning its workload. By default, the workload is calculated against
    the CPU.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code describes how `mod_cluster` communicates with its counterpart
    in Apache, concerning its availability and workload. By default, the multicast
    address is settled to `224.0.1.105`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you need to change the multicast address, for any reason, remember to change
    its counterpart setting in Apache, with the following directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Dissecting processes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A list of processes where you can check IPs and port bindings, provided by
    the `netstat` tool, is shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Dissecting processes](img/3744_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The netstat tool showing IPs and ports binding by processes
  prefs: []
  type: TYPE_NORMAL
- en: When Apache starts, a process is actually being executed—PID `9524` (as depicted
    in the `netstat` figure)—which listens on ports `80` and `6666` for the `10.0.0.1`
    IP; the process also listens on port `23364` for any interface (`0.0.0.0`).
  prefs: []
  type: TYPE_NORMAL
- en: 'When the WildFly node `node-1` starts, a process is actually being executed—PID
    `9674` (as depicted in the `netstat` figure)—which listens on various ports and
    IPs:'
  prefs: []
  type: TYPE_NORMAL
- en: port `8080`, bound to IP `10.0.1.1`, is used by the HTTP connector
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: port `19990`, bound to IP `127.0.0.1`, is used by the host-controller to allow
    remote management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: port `8009`, bound to IP `10.0.1.1`, is used by the AJP connector
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: port `23364`, bound to IP `224.0.1.105`, is used by `mod_cluster`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: port `45688`, bound to IP `230.0.0.4`, is used by `jgroups` to form the cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When WildFly node `node-2` starts, a process is actually being executed—PID
    `9853` (as depicted in the `netstat` figure)—which listens on various ports and
    IPs:'
  prefs: []
  type: TYPE_NORMAL
- en: port `8080`, bound to IP `10.0.1.2`, is used by the HTTP connector
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: port `29990`, bound to IP `127.0.0.1`, is used by the host-controller to allow
    remote management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: port `8009`, bound to IP `10.0.1.2`, is used by the AJP connector
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: port `23364`, bound to IP `224.0.1.105`, is used by `mod_cluster`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: port `45688`, bound to IP `230.0.0.4`, is used by `jgroups` to form the cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are bindings that are not relevant for the moment, so we will not discuss
    them. What you should notice, is that there are identical bindings for both WildFly
    nodes.
  prefs: []
  type: TYPE_NORMAL
- en: '`224.0.1.105:23364` is used by both to advertise themselves to the `mod_cluster`
    on the Apache side.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`230.0.0.4:45688` is used by both to create the UDP cluster, so having the
    same binding allows them to join the same cluster.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dissecting communications
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s analyze how all the components involved in load balancing communicate
    to each other. First, look at the following image that is worth a thousand words:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Dissecting communications](img/3744_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Architecture diagram showing balancing and clustering communication configuration
    with UDP
  prefs: []
  type: TYPE_NORMAL
- en: Skipping the steps when the clients/users ask for a resource, and when the request
    hits the switch which routes it to the Apache balancer, let's concentrate on the
    sequence of events in the communication between Apache and WildFly and see what
    happens in the middle.
  prefs: []
  type: TYPE_NORMAL
- en: 'The sequence of events is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Apache listens on `224.0.1.105:23364` for workers to balance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the WildFly nodes get started, they advertise themselves to `224.0.1.105:23364`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Apache receives the following messages:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Apache starts balancing the nodes, via the AJP protocol, to `10.0.1.1/2:8009`
    depending on the workload received with the `STATUS` message
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WildFly nodes receive the requests and elaborate them responding back to Apache
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Meantime, `jgroups` serialize and de-serialize the http sessions between cluster
    members
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simultaneously, the WildFly nodes send `STATUS` messages to Apache concerning
    the actual workload, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is pretty much what's beyond balancing a cluster of WildFly, via UDP.
  prefs: []
  type: TYPE_NORMAL
- en: You can easily balance a non-clustered environment, which is fine for stateless
    services; the configuration is the same, except that you will have to use a "non-ha"
    profile.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As previously mentioned, the WildFly `mod_cluster` manages the calculation of
    workload, which is CPU by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are some other types of load metrics:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Type | Load metric |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `cpu` | Returns the system CPU load |'
  prefs: []
  type: TYPE_TB
- en: '| `mem` | Returns the system memory usage |'
  prefs: []
  type: TYPE_TB
- en: '| `heap` | Returns the heap memory usage as a percentage of max heap size |'
  prefs: []
  type: TYPE_TB
- en: '| `sessions` | Given a capacity, returns the percentage based on activeSessions/Capacity
    |'
  prefs: []
  type: TYPE_TB
- en: '| `requests` | Returns the number of requests/sec |'
  prefs: []
  type: TYPE_TB
- en: '| `send-traffic` | Returns the outgoing request traffic in KB/sec |'
  prefs: []
  type: TYPE_TB
- en: '| `receive-traffic` | Returns the incoming request POST traffic in KB/sec |'
  prefs: []
  type: TYPE_TB
- en: '| `busyness` | Returns the percentage of connector threads from the thread
    pool that are busy servicing requests |'
  prefs: []
  type: TYPE_TB
- en: '| `connection-pool` | Returns the percentage of connections from a connection
    pool that are in use |'
  prefs: []
  type: TYPE_TB
- en: 'You can add a load-metric to the mod-cluster subsystem for `node-1` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'This basically adds a new load-metric for system memory usage. If we look into
    the `standalone-ha.xml` file, we will find the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Hereby, `mod_cluster` will inform its Apache counterpart with a load factor
    based on both metrics. This can be quite helpful if you have WildFly installed
    in a heterogeneous environment, say a server with different resource capabilities—a
    server might have less RAM than others, or less cores then others. Thus, adding
    and removing metrics gives you the freedom to adjust your workload distribution
    properly.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For cluster configuration, please refer to [Chapter 5](ch05.html "Chapter 5. Managing
    the Datasource Subsystems with the CLI"), *Managing the Datasource Subsystems
    with the CLI*, of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Balancing WildFly using a list of available balancers – TCP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to balance two WildFly nodes running in the
    standalone mode, using TCP balancing. Instead of sending information messages
    to a multicast address, the WildFly `mod_cluster` sends everything directly to
    Apache.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, in this recipe we will also use a cluster configuration, to provide
    a better test feeling. If you need more information about clustering with WildFly,
    refer to [Chapter 5](ch05.html "Chapter 5. Managing the Datasource Subsystems
    with the CLI"), *Managing the Datasource Subsystems with the CLI*. By the way,
    the entire WildFly configuration used for this recipe will not relay on any previous
    one. On the contrary, we assume that Apache HTTPD installation and configuration
    are based on the first two recipes of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will need an application named `balancing-test`, that you
    can find in my GitHub repository. If you skipped the *Managing applications using
    the deployments folder* recipe in [Chapter 2](ch02.html "Chapter 2. Running WildFly
    in Standalone Mode"), *Running WildFly in Standalone Mode*, please refer to it
    to download all the source code and projects that you will need.
  prefs: []
  type: TYPE_NORMAL
- en: 'To build the application, give the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From the WildFly installation directory `$WILDFLY_HOME`, let's create two folders,
    each one representing a server node.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a terminal and execute the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s copy the `balancing-test.war` application into the `deployments`
    folder of each node that we have just created. Do as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s generate a virtual IP for each of the nodes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s go back to the Apache configuration and edit `mod_cluster.conf`,
    disabling advertising as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If it''s not already running, let''s launch Apache and its logs by executing
    the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we need to tell the WildFly `mod_cluster` to communicate directly with
    Apache by adding some attributes to the `mod_cluster` subsystem of the `standalone-ha.xml`
    file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As emphasized in the preceding code, we are telling `mod_cluster` to disable
    autoadvertising, and to advertise itself to the proxy specified in the `proxy-list`
    attribute. To specify more than one proxy, use a comma `,` as a delimiter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that Apache is up and running, and that we have configured our node, let''s
    start it by issuing the following command in a new terminal window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A few seconds after `node-1` starts you should see the following entries in
    the Apache logs, the `access_log`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Those are `mod_cluster` logs stating that it received an information message,
    a configuration message, and then it enabled the application provided by WildFly
    `node-1`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Replicate the WildFly `mod_cluster` configuration for `node-2` as well, and
    then start it in a new terminal window, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A few seconds after `node-2` starts, you should see the following entries in
    the Apache logs, the `access_log`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, open the `mod_cluster-manager` page that we defined in the file `mod_cluster.conf`—Apache
    side—at the following URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see the following page:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/3744_07_04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: mod_cluster manager page displaying both running nodes and their contexts—TCP
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that everything is up and running, let's play with our marvelous application.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Point your browser to the following URL and refresh the page a few times:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see a page like the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/3744_07_05.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Apache serving balancing-test application on node-1
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In my case, the request landed on the server `node-1`, yours might land on `node-2`.
    Let's stop the serving node and refresh the page one more time. If everything
    works as expected, you should end up with a page like the one seen in the following
    screenshot:![How to do it...](img/3744_07_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Apache serving balancing-test application on node-2
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We got it to work exactly as it worked for balancing with auto-advertising.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'What is different in this case, from balancing with auto-advertising enabled,
    is that `mod_cluster` connects directly to Apache to communicate its `STATUS`
    information, as depicted in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/3744_07_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Architecture diagram showing balancing and clustering communication configuration
    with TCP
  prefs: []
  type: TYPE_NORMAL
- en: Nevertheless, WildFly scales out in the same way; you can add as many WildFly
    nodes as you want, and they will automatically be balanced by Apache. The drawback
    is that if you add another Apache instance, you need to add its reference into
    the WildFly `mod_cluster` configuration through the `proxy-list` attribute of
    the `mod_cluster` subsystem; the change eventually requires a server reload.
  prefs: []
  type: TYPE_NORMAL
- en: Balancing using the HTTP connector instead of AJP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to balance a WildFly node using an HTTP connector
    instead of the binary protocol, AJP. The purpose of this recipe is to show you
    how to use a different connector, not how to really balance a service provided
    by WildFly. For this reason, we will use just a WildFly node, fronted by Apache.
    We also assume that Apache HTTPD installation and configuration are based on the
    first two recipes of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will need an application named `balancing-test`, that you
    can find in my GitHub repository. If you skipped the *Managing applications using
    the deployments folder* recipe in [Chapter 2](ch02.html "Chapter 2. Running WildFly
    in Standalone Mode"), *Running WildFly in Standalone Mode*, please refer to it
    to download all the source code and projects that you will need.
  prefs: []
  type: TYPE_NORMAL
- en: 'To build the application, give the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From the WildFly installation directory `$WILDFLY_HOME`, let's create a folder
    representing a server node.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a terminal and execute the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s copy the `balancing-test.war` application into the `deployments`
    folder of the node that we have just created. Type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s generate a virtual IP for the node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If it''s not running already, let''s launch Apache and its logs, by executing
    the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now it''s time to configure our WildFly node `node-1`. Edit the `standalone-ha.xml`
    file in the `bl-http-std-node-1/configuration` folder, and configure the undertow
    subsystem as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We disabled the AJP listener by adding the attribute `enabled` and setting
    it to `false`. Based on these changes, we need to update the `mod_cluster` subsystem
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We changed the connector reference from AJP to HTTP. Now we need to update
    the connector reference in the remoting subsystem which references the connector
    with its default name, which is `default`. Apply the following changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'That''s it; we are done with our configuration. Let''s start our node by issuing
    the following command into a new terminal window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, a few seconds after `node-1` starts, you should see the following entries
    in the Apache logs, that is, in `access_log`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Those are mod-cluster logs stating that it received an information message and
    a configuration message, and then it enabled the application provided by WildFly
    `node-1`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s test our application by opening a browser and pointing it to the following
    URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see a page like the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/3744_07_10.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Apache serving balancing-test application on node-1 via HTTP connector
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you were expecting to change something on the Apache side, you were wrong.
    WildFly `mod_cluster` connects to Apache and says `Hi there, I need to be balanced.
    Here is how I'm reachable`. So when Apache receives all the information about
    applications, topology, and the communication strategy, it starts dispatching
    requests to WildFly.
  prefs: []
  type: TYPE_NORMAL
- en: This is exactly what we have done. We configured the new communication channel
    through the HTTP connector, disabled the AJP connector, and that's it! Pretty
    easy, isn't it?
  prefs: []
  type: TYPE_NORMAL
- en: Preserve WildFly workers while restarting Apache
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many times, you need to restart Apache and all your WildFly instances become
    unavailable for a few seconds. So, this annoying **404** error may be a problem.
    In this recipe, we will learn how to mitigate this problem in a simple way. We
    also assume that the Apache HTTPD installation and configuration are based on
    the first two recipes of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will need an application named `balancing-test`, that you
    can find in my GitHub repository. If you skipped the *Managing applications using
    the deployments folder* recipe in [Chapter 2](ch02.html "Chapter 2. Running WildFly
    in Standalone Mode"), *Running WildFly in Standalone Mode*, please refer to it
    to download all the source code and projects that you will need.
  prefs: []
  type: TYPE_NORMAL
- en: 'To build the application, give the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From the WildFly installation directory `$WILDFLY_HOME`, let's create a folder
    representing a server node.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a terminal and execute the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s copy the `balancing-test.war` application into the `deployments`
    folder of the node that we have just created. Type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s generate a virtual IP for the node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If it''s not running already, let''s launch Apache and its logs, by executing
    the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s start our node, by issuing the following command in a new terminal window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, a few seconds after `node-1` starts, you should see the following entries
    in the Apache logs, that is, `access_log`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Those are `mod_cluster` logs stating that it received an information message
    and a configuration message, and then it enabled the application provided by WildFly
    `node-1`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now let''s restart Apache by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the Apache logs, you should see statements similar to the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the WildFly logs, you should see the following log entry:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Wait for just a few seconds, and now you should see WildFly sending its messages
    to Apache as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'While restarting, users would have seen a **NOT FOUND** error page for your
    application, as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/3744_07_11.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Apache could not find the application context after a restart
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: So, to mitigate this problem, you can tell Apache to persist somehow with the
    WildFly node information before it shuts down, and then read the information back
    again at startup.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit the `mod_cluster.conf` file in the `/opt/httpd/conf/extra` folder, and
    add the following directive outside the virtual hosts declaration:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s see if it works. Stop both Apache and WildFly, and then restart them.
    After a few seconds, we should have the following entries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now restart Apache and look at its logs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See, no more `INFO`, `CONFIG`, and `ENABLE-APP` messages from WildFly! The WildFly
    log didn't catch anything, and our application is served as fast as Apache starts
    up.
  prefs: []
  type: TYPE_NORMAL
- en: Balancing the same context for different applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A large enterprise environment might be composed of several application servers
    providing lots of applications. Sometimes, it happens that applications have the
    same context path while running on different nodes (eventually, even different
    server-groups in the case of WildFly in the domain mode), but they share the same
    balancer, that is, Apache.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to balance the same application context coming
    from different applications from different nodes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will need an application named `balancing-test`, that you
    can find in my GitHub repository. If you skipped the *Managing applications using
    the deployments folder* recipe in [Chapter 2](ch02.html "Chapter 2. Running WildFly
    in Standalone Mode"), *Running WildFly in Standalone Mode*, please refer to it
    to download all the source code and projects that you will need.
  prefs: []
  type: TYPE_NORMAL
- en: 'To build the application, give the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From the WildFly installation directory `$WILDFLY_HOME`, let's create two folders,
    each one representing a server node.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a terminal and execute the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s copy the two web applications in the `deployments` folder, to their
    corresponding node. Type the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s generate a virtual IP for each of the nodes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s go back to the Apache configuration and edit `mod_cluster.conf`.
    We need to replace the entire configuration, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As you can see, we changed virtual hosts bindings, so let''s create the appropriate
    virtual IPs for them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we need to map the `ServerName` directive into the `/etc/hosts` file, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s check if our configuration is okay—at least the Apache configuration—by
    starting Apache HTTPD in a new terminal window, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the browser and point it to the following URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see the `mod_cluster-manager` page, as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/3744_07_12.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: mod_cluster-manager page served by Apache through the mcm.com address
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, let''s configure our first node, `node-bar`. We need to adjust our `mod_cluster`
    subsystem, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we can start our `node-bar` by executing the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Apache should have caught the following log entries:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, apply the same changes that we made to the `mod_cluster` subsystem, to
    `node-foo` as well. Once done, start the node as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Apache should have caught the following log entries:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, Apache warns you about the context `/this` using the two balancers,
    which is fine; this is exactly what we wanted.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now let's refresh the `mcm.com` site:![How to do it…](img/3744_07_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: mod_cluster manger page showing both nodes with the same application context
    path
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now it's time to see if our two sites, `bar.com` and `foo.com` are correctly
    balanced and served by our Apache configuration:![How to do it…](img/3744_07_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The bar.com and foo.com sites showing their welcome page
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To be sure that everything worked correctly, you should find the following
    entries in the `node-bar` logs:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And for `node-foo`, you should find the following log entries:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Great, everything worked as expected!
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most of the configuration is on the Apache side and is about how we configured
    our virtual hosts. We needed to specify one `mod_cluster` directive, that is,
    `CreateBalancers`. They define how balancers are created in the enclosing virtual
    host, thus you can control which balancer handles your requests (as in our case).
  prefs: []
  type: TYPE_NORMAL
- en: 'This `mod_cluster` directive can have the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: '`0`: Creates balancers in all VirtualHosts defined in the Apache HTTPD'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`1`: Does not create balancers (requires at least one `ProxyPass`/`ProxyPassMatch`
    to define the balancer names)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`2`: Creates only the main balancer named `myclsuter`, and it is the default
    setting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As per the preceding definition, for the `bar.com` site, we used the following
    definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'For the `foo.com` site, we used the following definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: So we commanded Apache to use the balancer `barBalancer` to handle the `bar.com`
    requests, and to use `fooBalancer` to handle the `foo.com` requests. On the WildFly
    side, we had to match the balancer name in the `mod_cluster` subsystem to the
    relative node.
  prefs: []
  type: TYPE_NORMAL
- en: 'We achieved this by defining the attribute `balancer` in the `mod_cluster`
    subsystem. The attribute is valued to a property to pass at start up, named `balancer.name`.
    The following was our configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: We also needed to specify which Apache was serving our requests, by using the
    `proxy-list` attribute, settled with a property named `proxy.list`, which we passed
    at the command line.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For understanding Apache directives better, check the documentation at the
    following sites:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.jboss.org/mod_cluster/1.2.0/html/native.config.html](http://docs.jboss.org/mod_cluster/1.2.0/html/native.config.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://httpd.apache.org/docs/2.2/mod/mod_proxy.html#proxypass](http://httpd.apache.org/docs/2.2/mod/mod_proxy.html#proxypass)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rolling updates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to update your application, using rolling
    updates, while still providing service availability. To achieve this, we need
    to configure quite a few things from Apache to WildFly, and code the tester application.
    We also assume that Apache HTTPD installation and configuration are based on the
    first two recipes of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will need the application named `rolling-test`, that you
    can find in my GitHub repository. If you skipped the *Managing applications using
    the deployments folder* recipe in [Chapter 2](ch02.html "Chapter 2. Running WildFly
    in Standalone Mode"), *Running WildFly in Standalone Mode*, please refer to it
    to download all the source code and projects that you will need.
  prefs: []
  type: TYPE_NORMAL
- en: 'To build the application, do as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's create four folders from the WildFly installation directory `$WILDFLY_HOME`,
    each one representing a server node.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a terminal and execute the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s copy the `rolling-test-1.0.war` web application into the `deployments`
    folder of each node that we just created, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s generate a virtual IP for each of the nodes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the file `standalone-ha.xml` of each WildFly node, and replace the `cache-container`
    XML element named `web` of the `infinispan` subsystem, with the following XML
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s go back to the Apache configuration and edit `mod_cluster.conf`.
    We need to replace the entire configuration, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add another virtual IP for the second virtual host, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, as root user, edit the `/etc/hosts` file and add the following directive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now we are ready to start Apache and all four WildFly nodes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For Apache, do as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For WildFly nodes, open four different terminal windows, and in each of them,
    do as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For `node-1`:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'For `node-2`:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'For `node-3`:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'For `node-4`:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the browser and point it to the following site, refreshing the page a
    couple of times:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/3744_07_14.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Apache serving the rolling application via the server name rolling.com
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Without spending too much time watching the logs, let's stop the `node-1`, or
    whichever node you landed on. Refresh the page a few times:![How to do it…](img/3744_07_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rolling application provided by another member of the cluster, node-2
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: OK, it worked. Now suppose that our super boss wants to go into production with
    the latest version of our great application. Obviously he wants it done for yesterday,
    and obviously he does not want to give a **Service unavailable** to customers.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You know the answer: **Yes Sir, yes!**.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit the `index.jsp` file of the `rolling-test` application and change its
    content by replacing the `<h3>...</h3>` HTML tag with the following one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we need to increment the application version; we can do this by editing
    the `pom.xml` Maven file of the `rolling-test` project, and change its `<version>`
    tag, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we can build the project again as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Stop `node-2` and update the application by removing the old package and copying
    the new one, to `node-1` and `node-2` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: We can do this as we are using the standalone mode. Nonetheless, remember to
    disable hot-deployments in the production environment, just in case.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, restart both nodes as usual:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go back to the browser and refresh the page; you should get the new functionality
    desired by our super boss, as follows:![How to do it…](img/3744_07_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rolling application with its new functionality
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'And yes, we didn''t even loose the session. Now we need to upgrade the other
    two nodes, `node-3` and `node-4`, otherwise a user might get the following page
    by accessing the application:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/3744_07_17.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Rolling application needs to be updated in every node of the cluster
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'So, let''s stop `node-3` and `node-4`, remove the old artifact, and deploy
    the new one as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, restart both nodes as usual:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now that all nodes have the same application, by stopping one node at a time
    and refreshing the page, obviously leaving one node up, we should have a scenario
    as depicted in the following screenshot:![How to do it…](img/3744_07_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rolling update completed on all 4 nodes
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Perfect! Let's go to the boss's office and tell him we are done!
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Well, actually the entire configuration is on the Apache side. In WildFly we
    didn't do much. As you saw, we configured a replicated-cache, just for demonstration
    purpose. The difference between a replicated cache and a distributed cache is
    that in the first one, all information is replicated to all nodes while in the
    second one, sessions are replicated to just select nodes. Those nodes, if not
    otherwise specified, are selected randomly.
  prefs: []
  type: TYPE_NORMAL
- en: From the configuration you can tell the cache how many nodes to distribute the
    session on, by the attribute owners.
  prefs: []
  type: TYPE_NORMAL
- en: We also relayed on the `standalone-ha` profile, with its defaults, and started
    it along with some custom bindings for each node.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We created one cluster composed of four nodes. Each node had its own copy of
    the application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We then stopped two nodes. Stopping two nodes lets the users use our application,
    as their requests would be balanced on the other available nodes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Rolling updates might be much harder; it all depends on the backward compatibility
    of the application, concerning functionalities, and the domain model, which is
    what goes into a session. In our example, the data shared across cluster nodes
    was the same for the first version of the application as well as the last one.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In a domain mode, it''s pretty much the same:'
  prefs: []
  type: TYPE_NORMAL
- en: First you need to logically split the cluster in two, as we did during our rolling
    updates. To do this, we should configure a server-group which would represent
    the first half of the cluster—let's call it `sg-rolling-1`—and then configure
    another server-group, naming it `sg-rolling-2`, which in turn would represent
    the second half of the cluster.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When doing the first rolling update, you would stop the first server-group,
    undeploy the old application, and then deploy the new one. Once the deployment
    has finished, you can restart the server-group.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When all the nodes are up and running, you can repeat this operation for the
    second server group. That's pretty much what you should do using the domain mode.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you need a deeper understanding of clustering WildFly, refer to [Chapter
    5](ch05.html "Chapter 5. Managing the Datasource Subsystems with the CLI"), *Managing
    the Datasource Subsystems with the CLI*.
  prefs: []
  type: TYPE_NORMAL
