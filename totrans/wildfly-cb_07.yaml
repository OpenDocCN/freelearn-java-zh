- en: Chapter 7. Load Balancing WildFly
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章. WildFly负载均衡
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Installing and configuring Apache HTTPD
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和配置Apache HTTPD
- en: Installing and configuring mod_cluster for Apache
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Apache安装和配置mod_cluster
- en: Balancing WildFly using auto advertising – UDP
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用自动广告（UDP）平衡WildFly
- en: Balancing WildFly using a list of available balancers – TCP
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用可用均衡器列表（TCP）平衡WildFly
- en: Balancing using the HTTP connector instead of AJP
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用HTTP连接器而不是AJP进行平衡
- en: Preserve WildFly workers while restarting Apache
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在重启Apache时保留WildFly工作进程
- en: Balancing the same context for different applications
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平衡不同应用程序的相同上下文
- en: Rolling updates
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 滚动更新
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In this chapter, you will learn how to load balance your WildFly instances.
    Load balancing is the capability to distribute the workload across multiple nodes,
    in our case, WildFly nodes. This technique is used for optimizing resources, minimizing
    the response time, and maximizing the application throughput.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何负载均衡你的WildFly实例。负载均衡是将工作负载分配到多个节点的能力，在我们的案例中，是WildFly节点。这项技术用于优化资源、最小化响应时间以及最大化应用吞吐量。
- en: To achieve load balancing, we need a component which fronts our WildFly nodes,
    and distributes the workload across them. A common pattern of distributing the
    workload is to forward client requests in a round-robin manner, so that every
    node serves the same number of requests.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现负载均衡，我们需要一个组件来作为WildFly节点的代理，并将工作负载分配到它们。一种常见的工作负载分配模式是以轮询方式转发客户端请求，以确保每个节点服务的请求数量相同。
- en: What about the real workload that a request can generate into a node? For example,
    a long-running request or a request which involves heavy tasks would make the
    node much busier than the others that are handling just static page requests.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，一个请求可以生成到节点的实际工作负载是什么？例如，一个长时间运行的请求或涉及繁重任务的请求会使节点比仅处理静态页面请求的其他节点忙碌得多。
- en: This is not a fair workload distribution! We need something to better calibrate
    this workload distribution, depending on how busy the nodes really are.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是一个公平的工作负载分配！我们需要某种东西来更好地校准这个工作负载分配，这取决于节点实际上有多忙。
- en: We've already got the Apache HTTP Server (also known as HTTPD), that can balance
    towards our WildFly nodes. We also have a component called `mod_cluster` in both
    HTTPD and WildFly, to get the real workload distribution.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经有了Apache HTTP服务器（也称为HTTPD），它可以平衡到我们的WildFly节点。我们还在HTTPD和WildFly中有一个名为`mod_cluster`的组件，以获取实际的工作负载分布。
- en: The `mod_cluster` component for Apache HTTP Server is a set of modules, as we
    will see later in this chapter, while `mod_cluster` for WildFly is a subsystem
    named `mod_cluster`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Apache HTTP服务器的`mod_cluster`组件是一组模块，正如我们将在本章后面看到的那样，而WildFly的`mod_cluster`是一个名为`mod_cluster`的子系统。
- en: Note
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The `mod_cluster` component decouples the frontend from the backend. Basically,
    the Apache HTTP Server doesn''t have any reference to the WildFly nodes, and WildFly
    doesn''t have any reference to the HTTPD balancers—as long as multicast advertisement
    is used. Furthermore, `mod_cluster` supports AJP, HTTP, and HTTPS protocols. More
    information can be obtained by reading the official documentation, at the following
    URL: [http://docs.jboss.org/mod_cluster/1.2.0/html/](http://docs.jboss.org/mod_cluster/1.2.0/html/).'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`mod_cluster`组件将前端与后端解耦。基本上，Apache HTTP服务器没有对WildFly节点的任何引用，WildFly也没有对HTTPD均衡器的任何引用——只要使用多播广告。此外，`mod_cluster`支持AJP、HTTP和HTTPS协议。更多信息可以通过阅读以下URL的官方文档获得：[http://docs.jboss.org/mod_cluster/1.2.0/html/](http://docs.jboss.org/mod_cluster/1.2.0/html/).'
- en: Load balancing does not affect WildFly's operational mode that you are running
    it in (domain or standalone). You can do load balancing between instances running
    in both domain mode and standalone mode. For our purpose, we will first start
    using the standalone mode, and then we will switch to the domain mode.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 负载均衡不会影响你在其中运行WildFly的操作模式（域或独立）。你可以在运行在域模式和独立模式下的实例之间进行负载均衡。为了我们的目的，我们首先将使用独立模式，然后我们将切换到域模式。
- en: Installing and configuring Apache HTTPD
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和配置Apache HTTPD
- en: In this recipe, you will learn how to install and configure Apache HTTPD. We
    will first download the software and then install it to the source. If you want,
    you can choose to obtain the Apache HTTP Server by using a package manager such
    as `YUM`, but I think understanding and learning how to build it from source is
    much more interesting.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，你将学习如何安装和配置 Apache HTTPD。我们首先下载软件，然后将其安装到源中。如果你愿意，你可以选择使用包管理器（如 `YUM`）来获取
    Apache HTTP Server，但我认为理解和学习如何从源构建它更有趣。
- en: We will be using Apache HTTPD Version 2.2.29 because the 2.2.x version is one
    of the most used versions in the production environment to run with `mod_cluster`.
    It already comes with the APR and APR-Util lib, along with the PCRE.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Apache HTTPD 版本 2.2.29，因为 2.2.x 版本是在生产环境中与 `mod_cluster` 一起运行的最常用版本之一。它已经包含了
    APR 和 APR-Util 库，以及 PCRE。
- en: Getting ready
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To download the Apache HTTP Server, visit [http://httpd.apache.org/download.cgi](http://httpd.apache.org/download.cgi).
    When you first visit this site, you can choose between two stable versions: 2.2
    and 2.4\. Obviously, version 2.4 is newer and it has some new features. It also
    has a different syntax for its configuration files.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要下载 Apache HTTP Server，请访问 [http://httpd.apache.org/download.cgi](http://httpd.apache.org/download.cgi)。当你第一次访问这个网站时，你可以选择两个稳定版本：2.2
    和 2.4。显然，2.4 版本更新，它有一些新功能。它的配置文件语法也有所不同。
- en: On the other hand, version 2.2 has been around for a long time and it might
    be more stable. Nonetheless, the 2.2 bundle provides the APR, APR-Util, and the
    PCRE packages, so you don't have to download and install them separately, as in
    version 2.4.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，2.2 版本已经存在很长时间了，它可能更稳定。尽管如此，2.2 包提供了 APR、APR-Util 和 PCRE 包，因此你不需要像 2.4
    版本那样单独下载和安装它们。
- en: 'Having said that, we will be using the Apache HTTP Server version 2.2.29\.
    Furthermore, we will need the `openssl-devel` (development) version installed
    in your system. To install it:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 说了这么多，我们将使用 Apache HTTP Server 版本 2.2.29。此外，我们还需要在您的系统中安装 `openssl-devel`（开发）版本。要安装它：
- en: 'For Fedora 21, use the following command:'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 Fedora 21，使用以下命令：
- en: '[PRE0]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For Fedora 22, use the following command:'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 Fedora 22，使用以下命令：
- en: '[PRE1]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Download all the software into the `~/WFC/` folder.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有软件下载到 `~/WFC/` 文件夹。
- en: How to do it...
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Once the download is complete, open a terminal and execute the following commands:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载完成后，打开终端并执行以下命令：
- en: '[PRE2]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now that we have all the software unpacked, we are ready to configure, compile,
    and build our Apache HTTPD.
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们已经解压了所有软件，我们准备配置、编译和构建我们的 Apache HTTPD。
- en: 'Execute the following commands for Fedora 21/22:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下命令以适用于 Fedora 21/22：
- en: '[PRE3]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here, `<USER>` must be replaced with your username. In my case, this is `luigi`;
    thus the `--prefix` directive will be `--prefix=/home/luigi/WFC/httpd`. So, let''s
    start executing the following commands:'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，`<USER>` 必须替换为你的用户名。在我的情况下，这是 `luigi`；因此，`--prefix` 指令将是 `--prefix=/home/luigi/WFC/httpd`。所以，让我们开始执行以下命令：
- en: '[PRE4]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Okay, now we are ready to launch our Apache. Navigate to its `bin` folder and
    execute it, as shown in the following commands:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 好的，现在我们准备启动 Apache。导航到其 `bin` 文件夹并执行它，如下所示：
- en: '[PRE5]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Ouch... Apache listens on port `80`, which is a privileged port; we got to
    the root. Let''s try again with `sudo`:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哎呀...Apache 监听端口 `80`，这是一个特权端口；我们到了 root。让我们用 `sudo` 再试一次：
- en: '[PRE6]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Bear in mind that in a production environment, the Apache HTTP Server should
    not be run as a root user for security reasons. It goes now, even if we have a
    warning complaining about a `ServerName` directive not settled. Let's get rid
    of this now.
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请记住，在生产环境中，出于安全原因，Apache HTTP Server 不应该以 root 用户身份运行。现在，即使我们有一个关于 `ServerName`
    指令未设置而发出的警告。让我们现在消除它。
- en: 'Edit the `/opt/httpd/conf/httpd.conf` file and look for the following comment
    line `#ServerName www.example.com:80`. Replace it with the following entry:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 `/opt/httpd/conf/httpd.conf` 文件，查找以下注释行 `#ServerName www.example.com:80`。将其替换为以下条目：
- en: '[PRE7]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, as a root user, open and edit the `/etc/hosts` file and add the following
    directive:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，作为 root 用户，打开并编辑 `/etc/hosts` 文件，并添加以下指令：
- en: '[PRE8]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now going back to the Apache `bin` folder, run the `httpd` script again:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，回到 Apache 的 `bin` 文件夹，再次运行 `httpd` 脚本：
- en: '[PRE9]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The warning disappears. Let's test if everything is working by opening a browser
    and pointing it to `http://balancer-one.com`. You should see the following page:![How
    to do it...](img/3744_07_01.jpg)
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 警告消失了。让我们通过打开浏览器并将它指向 `http://balancer-one.com` 来测试一切是否正常工作。你应该看到以下页面：![如何操作...](img/3744_07_01.jpg)
- en: Apache HTTPD working and serving its default page
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Apache HTTPD运行并为其默认页面提供服务
- en: See also
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Every issue you find while installing the Apache HTTPD software can be mitigated
    by reading the Apache documentation at the following site [http://httpd.apache.org/docs/2.2/](http://httpd.apache.org/docs/2.2/).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装Apache HTTPD软件时遇到的每个问题都可以通过阅读以下网站上的Apache文档来缓解[http://httpd.apache.org/docs/2.2/](http://httpd.apache.org/docs/2.2/)。
- en: Installing and configuring mod_cluster for Apache
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为Apache安装和配置mod_cluster
- en: In this recipe, we will learn how to install and configure `mod-cluster` within
    your Apache HTTPD installation. This recipe requires a working Apache HTTPD and
    it assumes that its installation directory is `/opt/httpd`. If you do not have
    Apache installed in your environment, please follow the instructions in the previous
    recipe.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将学习如何在Apache HTTPD安装中安装和配置`mod-cluster`。这个食谱需要一个正在运行的Apache HTTPD，并假设其安装目录是`/opt/httpd`。如果你在环境中没有安装Apache，请遵循前面食谱中的说明。
- en: Getting ready
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: First of all, download mod-cluster modules from the following site [http://mod-cluster.jboss.org/downloads/1-2-6-Final-bin](http://mod-cluster.jboss.org/downloads/1-2-6-Final-bin).
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，从以下网站下载mod-cluster模块[http://mod-cluster.jboss.org/downloads/1-2-6-Final-bin](http://mod-cluster.jboss.org/downloads/1-2-6-Final-bin)。
- en: Download all the software into the `/opt/httpd/modules` folder.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有软件下载到`/opt/httpd/modules`文件夹。
- en: 'If you prefer, you can install `mod_cluster` via your OS package manager which,
    in a Fedora-like system, is as follows:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你愿意，你可以通过你的操作系统包管理器安装`mod_cluster`，在类似Fedora的系统上，如下所示：
- en: '[PRE10]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How to do it…
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Once the download is complete, open a terminal and execute the following commands:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载完成后，打开终端并执行以下命令：
- en: '[PRE11]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now that we have all the software unpacked, we are ready to configure `mod_cluster`.
    To better configure and administer `mod_cluster`, let's create a private network
    interface for internal communication, that is between Apache and WildFly.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们已经解压了所有软件，我们准备配置`mod_cluster`。为了更好地配置和管理`mod_cluster`，让我们创建一个用于内部通信的私有网络接口，即Apache和WildFly之间。
- en: 'Open a terminal window and execute the following commands:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端窗口并执行以下命令：
- en: '[PRE12]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you didn't follow the previous recipe, you may need to edit the `httpd.conf`
    file and disable the `proxy-balancer` module, which conflicts with `mod_cluster`
    modules.
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你没有遵循前面的食谱，你可能需要编辑`httpd.conf`文件并禁用与`mod_cluster`模块冲突的`proxy-balancer`模块。
- en: 'Edit the `/opt/httpd/conf/httpd.conf` file and look for the following comment
    line `LoadModule proxy_balancer_module modules/mod_proxy_balancer.so`. Replace
    it with the following entry:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`/opt/httpd/conf/httpd.conf`文件，查找以下注释行`LoadModule proxy_balancer_module modules/mod_proxy_balancer.so`。将其替换为以下条目：
- en: '[PRE13]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the terminal window, create a new file named `mod_cluster.conf` and place
    it into the `opt/httpd/conf/extra` folder as follows:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端窗口中，创建一个名为`mod_cluster.conf`的新文件，并将其放置在`opt/httpd/conf/extra`文件夹中，如下所示：
- en: '[PRE14]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now add the following code:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在添加以下代码：
- en: '[PRE15]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, let''s edit the `httpd.conf` file again and add the following directive
    at the end. It is pretty much self-explanatory:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们再次编辑`httpd.conf`文件，并在末尾添加以下指令。它几乎是自我解释的：
- en: '[PRE16]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This will load the preceding file, featuring all our `mod_cluster` configuration.
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将加载前面的文件，其中包含我们所有的`mod_cluster`配置。
- en: 'Let''s start our Apache with the following commands:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用以下命令启动我们的Apache：
- en: '[PRE17]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now point your browser to the following URLs:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在将你的浏览器指向以下URL：
- en: '`http://10.0.0.1`'
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://10.0.0.1`'
- en: '`http://10.0.0.1/mcm`'
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://10.0.0.1/mcm`'
- en: 'You should see pages as depicted in the following screenshots:'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该看到以下截图所示的页面：
- en: '![How to do it…](img/3744_07_02.jpg)'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/3744_07_02.jpg)'
- en: Apache HTTPD and mod_cluster manager serving on a private network interface
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在私有网络接口上运行的Apache HTTPD和mod_cluster管理器
- en: How it works…
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'Let''s analyze what we have done so far:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析到目前为止我们所做的工作：
- en: First, we copied all the `mod_cluster` modules into Apache's `modules` directory.
    Then we referenced them by adding a `LoadModule` directive into the `mod_cluster.conf`
    file, in order to load the modules. Furthermore, we referenced the `mod_cluster.conf`
    file into the default Apache configuration file `httpd.conf`, with the `Include`
    directive.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，我们将所有的`mod_cluster`模块复制到Apache的`modules`目录中。然后，通过在`mod_cluster.conf`文件中添加`LoadModule`指令来引用它们，以便加载模块。此外，我们通过`Include`指令将`mod_cluster.conf`文件引用到默认的Apache配置文件`httpd.conf`中。
- en: This gave us the glue to stick Apache and `mod_cluster` together.
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这为我们粘合Apache和`mod_cluster`提供了粘合剂。
- en: Why did we create a private network interface? It's due to design and security
    reasons. Design might be a good practice, but security is a must. Internal communication
    should be exposed to a private network, but not to a public network. Nevertheless,
    in an enterprise environment, you are very likely to have servers with two network
    interfaces to accomplish exactly this purpose. Thus, to simulate an enterprise
    environment and give you a good design, we just created another network interface.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么我们创建了一个私有网络接口？这是由于设计和安全原因。设计可能是一个好的实践，但安全是必须的。内部通信应该暴露在私有网络上，而不是公共网络上。尽管如此，在企业环境中，您很可能会有两个网络接口的服务器来完成这个目的。因此，为了模拟企业环境并给您一个好的设计，我们只是创建了一个另一个网络接口。
- en: So, due to the the reason stated in the previous point, we bound the private
    interface between the `mod_cluster` management page `/mcm` and all the communications
    between Apache and WildFly. It is, essentially, about exchanging messages between
    the `mod_cluster` on Apache and the `mod_cluster` component on WildFly.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因此，由于前一点中提到的理由，我们将`mod_cluster`管理页面`/mcm`之间的私有接口以及Apache和WildFly之间的所有通信绑定。本质上，这是在Apache上的`mod_cluster`和WildFly上的`mod_cluster`组件之间交换消息。
- en: This basically provides balancing; a WildFly `mod_cluster` sends a signal to
    the `10.0.0.1:6666` multicast address, `Hi there, I'm here`. On the other side,
    at Apache, the `mod_cluster` component reads the message and enables that WildFly
    node by balancing it for new requests.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这基本上提供了平衡；一个WildFly `mod_cluster`向`10.0.0.1:6666`多播地址发送信号，“嗨，我在这里”。在另一边，在Apache上，`mod_cluster`组件读取消息并通过平衡为新请求启用该WildFly节点。
- en: Later in this chapter, we will need to change some of the preceding settings,
    adding more directives. The ones discussed here are just the basics to get started
    with.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的后面部分，我们需要更改一些前面的设置，添加更多的指令。这里讨论的只是基本的设置，以开始使用。
- en: Balancing WildFly using auto advertising – UDP
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用自动广告平衡WildFly – UDP
- en: In this recipe, we will learn how to balance two WildFly nodes running in the
    standalone mode. Default `mod_cluster` settings provide auto advertising as enabled,
    using a multicast address. Furthermore, in this recipe we will use a cluster configuration
    also to provide a better test feeling. If you need more information about clustering
    with WildFly, read [Chapter 6](ch06.html "Chapter 6. Clustering WildFly"), *Clustering
    WildFly*.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将学习如何平衡以独立模式运行的两个WildFly节点。默认的`mod_cluster`设置提供自动广告功能，使用多播地址。此外，在这个菜谱中，我们还将使用集群配置，以提供更好的测试体验。如果您需要更多关于使用WildFly进行集群的信息，请阅读[第6章](ch06.html
    "第6章。WildFly集群")，*WildFly集群*。
- en: The entire WildFly configuration used for this recipe will not relay on any
    previous one. On the contrary, we assume that the Apache HTTPD installation and
    configuration are based on the first two recipes of this chapter.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 本菜谱中使用的整个WildFly配置将不会依赖于任何之前的配置。相反，我们假设Apache HTTPD的安装和配置基于本章前两个菜谱。
- en: Getting ready
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will need an application named `balancing-test`, that you
    can find in my GitHub repository. If you skipped the *Managing applications using
    the deployments folder* recipe in [Chapter 2](ch02.html "Chapter 2. Running WildFly
    in Standalone Mode"), *Running WildFly in Standalone Mode*, please refer to it
    to download all the source code and projects that you will need.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，我们需要一个名为`balancing-test`的应用程序，您可以在我的GitHub仓库中找到它。如果您跳过了[第2章](ch02.html
    "第2章。以独立模式运行WildFly")中的*使用部署文件夹管理应用程序*菜谱，请参阅它以下载您将需要的所有源代码和项目。
- en: 'To build the application, give the following commands:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建应用程序，请执行以下命令：
- en: '[PRE18]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: How to do it…
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Let's create two folders from the WildFly installation directory `$WILDFLY_HOME`,
    each one representing a server node.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从WildFly安装目录`$WILDFLY_HOME`中创建两个文件夹，每个文件夹代表一个服务器节点。
- en: 'Open a terminal and execute the following commands:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个终端并执行以下命令：
- en: '[PRE19]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, let''s copy the `balancing-test.war` application into the `deployments`
    folder of each node that we have just created. Do as follows:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们将`balancing-test.war`应用程序复制到我们刚刚创建的每个节点的`deployments`文件夹中。操作如下：
- en: '[PRE20]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, let''s generate a virtual IP for each of the nodes:'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，让我们为每个节点生成一个虚拟IP：
- en: '[PRE21]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'If it''s not already running, let''s launch the Apache and its logs, by executing
    the following commands:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果它还没有运行，让我们通过执行以下命令来启动Apache及其日志：
- en: '[PRE22]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Okay, now Apache is up. Let''s start our first node by issuing the following
    command into a new terminal window:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 好的，现在Apache已经启动。让我们通过在新终端窗口中输入以下命令来启动我们的第一个节点：
- en: '[PRE23]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now, a few seconds after `node-1` starts you should see the following entries
    in `access_log` of the Apache logs:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`node-1`启动后的几秒钟内，你应该在Apache日志的`access_log`中看到以下条目：
- en: '[PRE24]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Those are `mod_cluster` logs stating that they received an information message,
    a configuration message, and then it enabled the application provided by WildFly
    `node-1`.
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些是`mod_cluster`日志，表明它们接收到了一个信息消息，一个配置消息，然后它启用了WildFly `node-1`提供的应用程序。
- en: 'Now, open the `mod_cluster-manager` page that we defined in the file `mod_cluster.conf`—Apache
    side—at the following URL:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开我们在`mod_cluster.conf`文件中定义的`mod_cluster-manager`页面——Apache端——在以下URL：
- en: '[PRE25]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You should see the following page:'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该看到以下页面：
- en: '![How to do it…](img/3744_07_03.jpg)'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做…](img/3744_07_03.jpg)'
- en: mod_cluster manager page displaying a running node and its contexts.
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`mod_cluster`管理页面显示正在运行的节点及其上下文。'
- en: 'Let''s start the other node `node-2` in a new terminal window, as follows:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在新的终端窗口中启动另一个节点`node-2`，如下所示：
- en: '[PRE26]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now, a few seconds after `node-2` starts, you should see the following entries
    in the Apache logs, that is, in `access_log`:'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，在`node-2`启动后的几秒钟内，你应该在Apache日志的`access_log`中看到以下条目：
- en: '[PRE27]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Let's refresh the `mcm` page:![How to do it…](img/3744_07_04.jpg)
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们刷新`mcm`页面：![如何做…](img/3744_07_04.jpg)
- en: mod_cluster manager page displaying both running nodes and their contexts.
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`mod_cluster`管理页面显示正在运行的节点及其上下文。'
- en: Now that everything is up and running, let's play with our marvelous application.
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在一切都已经启动并运行，让我们来玩我们的神奇应用程序。
- en: 'Point your browser to the following URL and refresh the page a few times:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的浏览器指向以下URL并刷新页面几次：
- en: '[PRE28]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'You should see a page like the following:'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该看到一个像下面的页面：
- en: '![How to do it…](img/3744_07_05.jpg)'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做…](img/3744_07_05.jpg)'
- en: Apache serving balancing-test application on node-1
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Apache在节点-1上提供负载均衡测试应用程序
- en: Note
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'In my case, the request landed on server `node-1`; yours might land on `node-2`.
    Also, keep in mind that the WildFly `mod_cluster` comes with some balancing default
    settings such as:'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在我的情况下，请求落在服务器`node-1`上；你的可能落在`node-2`上。此外，请注意，WildFly的`mod_cluster`附带一些默认的负载均衡设置，例如：
- en: '`sticky-session="true"`: which sticks subsequent requests for the same session,
    to the same node, if still alive'
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sticky-session="true"`：如果会话仍然存活，则将后续相同会话的请求粘附到同一节点'
- en: '`sticky-session-force="true"`: which forces Apache to respond with an error
    in case subsequent requests cannot be routed to the same node'
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sticky-session-force="true"`：这强制Apache在后续请求无法路由到同一节点时响应错误'
- en: '`sticky-session-remove="false"`: which indicates if Apache should remove sticky
    behavior in case subsequent requests cannot be routed to the same node.'
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sticky-session-remove="false"`：这表示如果后续请求无法路由到同一节点，Apache是否应该移除粘附行为。'
- en: 'That''s why, while refreshing the page, the node name never changes. By the
    way, let''s stop the serving node and refresh the page one more time. If everything
    worked as expected, you should end up with a page like the one seen in the following
    screenshot:'
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因此，在刷新页面时，节点名称永远不会改变。顺便说一下，让我们停止服务节点并再次刷新页面。如果一切按预期工作，你应该会看到一个像以下截图中的页面：
- en: '![How to do it…](img/3744_07_06.jpg)'
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做…](img/3744_07_06.jpg)'
- en: Apache serving balancing-test application on node-2
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: Apache在节点-2上提供负载均衡测试应用程序
- en: Yes, we got it!
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，我们做到了！
- en: How it works…
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'If you noticed, we didn''t change any particular `mod_cluster` setting on WildFly,
    in both nodes. This is because the WildFly `mod_cluster` configuration relays
    on defaults that are the same as on the Apache side. The entire configuration
    resides in the `mod_cluster` subsystem and in the socket-binding-group. Follow
    this configuration:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你注意到了，我们在两个节点上都没有更改任何特定的`mod_cluster`设置。这是因为WildFly的`mod_cluster`配置依赖于与Apache端相同的默认设置。整个配置位于`mod_cluster`子系统以及socket-binding-group中。遵循以下配置：
- en: '[PRE29]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The preceding code describes how `mod_cluster` should inform its counterpart
    in Apache, concerning its workload. By default, the workload is calculated against
    the CPU.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码描述了`mod_cluster`应该如何通知Apache中的对应部分有关其工作负载。默认情况下，工作负载是针对CPU计算的。
- en: '[PRE30]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The preceding code describes how `mod_cluster` communicates with its counterpart
    in Apache, concerning its availability and workload. By default, the multicast
    address is settled to `224.0.1.105`.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码描述了`mod_cluster`如何与Apache中的对应部分通信，有关其可用性和工作负载。默认情况下，多播地址设置为`224.0.1.105`。
- en: 'If you need to change the multicast address, for any reason, remember to change
    its counterpart setting in Apache, with the following directive:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Dissecting processes
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A list of processes where you can check IPs and port bindings, provided by
    the `netstat` tool, is shown in the following image:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '![Dissecting processes](img/3744_07_07.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
- en: The netstat tool showing IPs and ports binding by processes
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: When Apache starts, a process is actually being executed—PID `9524` (as depicted
    in the `netstat` figure)—which listens on ports `80` and `6666` for the `10.0.0.1`
    IP; the process also listens on port `23364` for any interface (`0.0.0.0`).
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: 'When the WildFly node `node-1` starts, a process is actually being executed—PID
    `9674` (as depicted in the `netstat` figure)—which listens on various ports and
    IPs:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: port `8080`, bound to IP `10.0.1.1`, is used by the HTTP connector
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: port `19990`, bound to IP `127.0.0.1`, is used by the host-controller to allow
    remote management
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: port `8009`, bound to IP `10.0.1.1`, is used by the AJP connector
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: port `23364`, bound to IP `224.0.1.105`, is used by `mod_cluster`
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: port `45688`, bound to IP `230.0.0.4`, is used by `jgroups` to form the cluster
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When WildFly node `node-2` starts, a process is actually being executed—PID
    `9853` (as depicted in the `netstat` figure)—which listens on various ports and
    IPs:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: port `8080`, bound to IP `10.0.1.2`, is used by the HTTP connector
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: port `29990`, bound to IP `127.0.0.1`, is used by the host-controller to allow
    remote management
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: port `8009`, bound to IP `10.0.1.2`, is used by the AJP connector
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: port `23364`, bound to IP `224.0.1.105`, is used by `mod_cluster`
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: port `45688`, bound to IP `230.0.0.4`, is used by `jgroups` to form the cluster
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are bindings that are not relevant for the moment, so we will not discuss
    them. What you should notice, is that there are identical bindings for both WildFly
    nodes.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '`224.0.1.105:23364` is used by both to advertise themselves to the `mod_cluster`
    on the Apache side.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`230.0.0.4:45688` is used by both to create the UDP cluster, so having the
    same binding allows them to join the same cluster.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dissecting communications
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s analyze how all the components involved in load balancing communicate
    to each other. First, look at the following image that is worth a thousand words:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '![Dissecting communications](img/3744_07_08.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
- en: Architecture diagram showing balancing and clustering communication configuration
    with UDP
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: Skipping the steps when the clients/users ask for a resource, and when the request
    hits the switch which routes it to the Apache balancer, let's concentrate on the
    sequence of events in the communication between Apache and WildFly and see what
    happens in the middle.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: 'The sequence of events is as follows:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: Apache listens on `224.0.1.105:23364` for workers to balance
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the WildFly nodes get started, they advertise themselves to `224.0.1.105:23364`
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Apache receives the following messages:'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Apache starts balancing the nodes, via the AJP protocol, to `10.0.1.1/2:8009`
    depending on the workload received with the `STATUS` message
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache通过AJP协议开始平衡节点，地址为`10.0.1.1/2:8009`，具体取决于通过`STATUS`消息接收到的负载。
- en: WildFly nodes receive the requests and elaborate them responding back to Apache
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WildFly节点接收请求并对其进行处理，然后响应Apache。
- en: Meantime, `jgroups` serialize and de-serialize the http sessions between cluster
    members
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同时，`jgroups`在集群成员之间序列化和反序列化http会话
- en: Simultaneously, the WildFly nodes send `STATUS` messages to Apache concerning
    the actual workload, and so on
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同时，WildFly节点向Apache发送有关实际工作负载的`STATUS`消息，等等
- en: This is pretty much what's beyond balancing a cluster of WildFly, via UDP.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上就是通过UDP平衡WildFly集群之外的事情。
- en: You can easily balance a non-clustered environment, which is fine for stateless
    services; the configuration is the same, except that you will have to use a "non-ha"
    profile.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以轻松地平衡一个非集群环境，这对于无状态服务来说很合适；配置相同，只是您将不得不使用一个“非高可用”配置文件。
- en: There's more…
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: As previously mentioned, the WildFly `mod_cluster` manages the calculation of
    workload, which is CPU by default.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，WildFly `mod_cluster`管理工作负载的计算，默认为CPU。
- en: 'The following are some other types of load metrics:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些其他类型的负载指标：
- en: '| Type | Load metric |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | 负载指标 |'
- en: '| --- | --- |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `cpu` | Returns the system CPU load |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| `cpu` | 返回系统CPU负载 |'
- en: '| `mem` | Returns the system memory usage |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| `mem` | 返回系统内存使用量 |'
- en: '| `heap` | Returns the heap memory usage as a percentage of max heap size |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| `heap` | 返回堆内存使用量作为最大堆大小的百分比 |'
- en: '| `sessions` | Given a capacity, returns the percentage based on activeSessions/Capacity
    |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| `sessions` | 给定一个容量，根据活动会话/容量返回百分比 |'
- en: '| `requests` | Returns the number of requests/sec |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| `requests` | 返回每秒请求数量 |'
- en: '| `send-traffic` | Returns the outgoing request traffic in KB/sec |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| `send-traffic` | 返回每秒KB的出站请求流量 |'
- en: '| `receive-traffic` | Returns the incoming request POST traffic in KB/sec |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| `receive-traffic` | 返回每秒KB的入站请求POST流量 |'
- en: '| `busyness` | Returns the percentage of connector threads from the thread
    pool that are busy servicing requests |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| `busyness` | 返回线程池中忙于处理请求的连接器线程的百分比 |'
- en: '| `connection-pool` | Returns the percentage of connections from a connection
    pool that are in use |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| `connection-pool` | 返回连接池中正在使用的连接的百分比 |'
- en: 'You can add a load-metric to the mod-cluster subsystem for `node-1` as follows:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将负载指标添加到`node-1`的mod-cluster子系统，如下所示：
- en: '[PRE33]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'This basically adds a new load-metric for system memory usage. If we look into
    the `standalone-ha.xml` file, we will find the following:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上为系统内存使用量添加了一个新的负载指标。如果我们查看`standalone-ha.xml`文件，我们会发现以下内容：
- en: '[PRE34]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Hereby, `mod_cluster` will inform its Apache counterpart with a load factor
    based on both metrics. This can be quite helpful if you have WildFly installed
    in a heterogeneous environment, say a server with different resource capabilities—a
    server might have less RAM than others, or less cores then others. Thus, adding
    and removing metrics gives you the freedom to adjust your workload distribution
    properly.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`mod_cluster`将根据这两个指标向其Apache对应方提供一个负载系数。如果您在异构环境中安装了WildFly，这可能会非常有帮助，比如说一个具有不同资源能力的服务器——一个服务器可能比其他服务器少一些RAM，或者比其他服务器少一些核心。因此，添加和删除指标让您有自由调整工作负载分配。
- en: See also
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: For cluster configuration, please refer to [Chapter 5](ch05.html "Chapter 5. Managing
    the Datasource Subsystems with the CLI"), *Managing the Datasource Subsystems
    with the CLI*, of this book.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 对于集群配置，请参阅本书第5章[第5章。使用CLI管理数据源子系统](ch05.html "Chapter 5. Managing the Datasource
    Subsystems with the CLI")，*使用CLI管理数据源子系统*。
- en: Balancing WildFly using a list of available balancers – TCP
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用可用均衡器列表平衡WildFly – TCP
- en: In this recipe, we will learn how to balance two WildFly nodes running in the
    standalone mode, using TCP balancing. Instead of sending information messages
    to a multicast address, the WildFly `mod_cluster` sends everything directly to
    Apache.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将学习如何使用TCP平衡平衡两个以独立模式运行的WildFly节点。与向多播地址发送信息消息不同，WildFly `mod_cluster`直接将所有内容发送到Apache。
- en: Furthermore, in this recipe we will also use a cluster configuration, to provide
    a better test feeling. If you need more information about clustering with WildFly,
    refer to [Chapter 5](ch05.html "Chapter 5. Managing the Datasource Subsystems
    with the CLI"), *Managing the Datasource Subsystems with the CLI*. By the way,
    the entire WildFly configuration used for this recipe will not relay on any previous
    one. On the contrary, we assume that Apache HTTPD installation and configuration
    are based on the first two recipes of this chapter.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在这个菜谱中，我们还将使用集群配置，以提供更好的测试感觉。如果你需要有关使用WildFly进行集群的更多信息，请参阅[第5章](ch05.html
    "第5章。使用CLI管理数据源子系统")，*使用CLI管理数据源子系统*。顺便说一下，用于此菜谱的整个WildFly配置将不依赖于任何之前的配置。相反，我们假设Apache
    HTTPD安装和配置基于本章的前两个菜谱。
- en: Getting ready
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will need an application named `balancing-test`, that you
    can find in my GitHub repository. If you skipped the *Managing applications using
    the deployments folder* recipe in [Chapter 2](ch02.html "Chapter 2. Running WildFly
    in Standalone Mode"), *Running WildFly in Standalone Mode*, please refer to it
    to download all the source code and projects that you will need.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，我们需要一个名为`balancing-test`的应用程序，你可以在我的GitHub仓库中找到它。如果你跳过了[第2章](ch02.html
    "第2章。以独立模式运行WildFly")中关于*使用部署文件夹管理应用程序*的菜谱，请参阅它以下载你需要的所有源代码和项目。
- en: 'To build the application, give the following commands:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建应用程序，请输入以下命令：
- en: '[PRE35]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: How to do it...
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: From the WildFly installation directory `$WILDFLY_HOME`, let's create two folders,
    each one representing a server node.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 从WildFly安装目录`$WILDFLY_HOME`，让我们创建两个文件夹，每个文件夹代表一个服务器节点。
- en: 'Open a terminal and execute the following commands:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并执行以下命令：
- en: '[PRE36]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Now, let''s copy the `balancing-test.war` application into the `deployments`
    folder of each node that we have just created. Do as follows:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们将`balancing-test.war`应用程序复制到我们刚刚创建的每个节点的`deployments`文件夹中。如下操作：
- en: '[PRE37]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Now, let''s generate a virtual IP for each of the nodes:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们为每个节点生成一个虚拟IP：
- en: '[PRE38]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Now, let''s go back to the Apache configuration and edit `mod_cluster.conf`,
    disabling advertising as follows:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们回到Apache配置并编辑`mod_cluster.conf`，如下禁用广告：
- en: '[PRE39]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'If it''s not already running, let''s launch Apache and its logs by executing
    the following commands:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果它还没有运行，让我们通过执行以下命令启动Apache及其日志：
- en: '[PRE40]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Now we need to tell the WildFly `mod_cluster` to communicate directly with
    Apache by adding some attributes to the `mod_cluster` subsystem of the `standalone-ha.xml`
    file, as follows:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要通过向`standalone-ha.xml`文件的`mod_cluster`子系统添加一些属性来告诉WildFly `mod_cluster`直接与Apache通信，如下所示：
- en: '[PRE41]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'As emphasized in the preceding code, we are telling `mod_cluster` to disable
    autoadvertising, and to advertise itself to the proxy specified in the `proxy-list`
    attribute. To specify more than one proxy, use a comma `,` as a delimiter:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前所述代码所强调的，我们正在告诉`mod_cluster`禁用自动广告，并将自身广告到`proxy-list`属性中指定的代理。要指定多个代理，请使用逗号`,`作为分隔符：
- en: '[PRE42]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Now that Apache is up and running, and that we have configured our node, let''s
    start it by issuing the following command in a new terminal window:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在Apache已经启动并运行，并且我们已经配置了我们的节点，让我们在新的终端窗口中通过以下命令启动它：
- en: '[PRE43]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'A few seconds after `node-1` starts you should see the following entries in
    the Apache logs, the `access_log`:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`node-1`启动后几秒钟，你应该会在Apache日志中看到以下条目，`access_log`：
- en: '[PRE44]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Those are `mod_cluster` logs stating that it received an information message,
    a configuration message, and then it enabled the application provided by WildFly
    `node-1`.
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些是`mod_cluster`日志，表明它接收到了一个信息消息，一个配置消息，然后启用了WildFly `node-1`提供的应用程序。
- en: 'Replicate the WildFly `mod_cluster` configuration for `node-2` as well, and
    then start it in a new terminal window, as follows:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将WildFly `mod_cluster`的配置复制到`node-2`，然后在新的终端窗口中启动它，如下所示：
- en: '[PRE45]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'A few seconds after `node-2` starts, you should see the following entries in
    the Apache logs, the `access_log`:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`node-2`启动后几秒钟，你应该会在Apache日志中看到以下条目，`access_log`：
- en: '[PRE46]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Now, open the `mod_cluster-manager` page that we defined in the file `mod_cluster.conf`—Apache
    side—at the following URL:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开我们在`mod_cluster.conf`文件中定义的`mod_cluster-manager`页面—Apache端—以下URL：
- en: '[PRE47]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'You should see the following page:'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该会看到以下页面：
- en: '![How to do it...](img/3744_07_04.jpg)'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做到这一点...](img/3744_07_04.jpg)'
- en: mod_cluster manager page displaying both running nodes and their contexts—TCP
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mod_cluster管理页面显示正在运行的节点及其上下文—TCP
- en: Now that everything is up and running, let's play with our marvelous application.
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Point your browser to the following URL and refresh the page a few times:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'You should see a page like the following screenshot:'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/3744_07_05.jpg)'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Apache serving balancing-test application on node-1
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In my case, the request landed on the server `node-1`, yours might land on `node-2`.
    Let's stop the serving node and refresh the page one more time. If everything
    works as expected, you should end up with a page like the one seen in the following
    screenshot:![How to do it...](img/3744_07_06.jpg)
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Apache serving balancing-test application on node-2
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We got it to work exactly as it worked for balancing with auto-advertising.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'What is different in this case, from balancing with auto-advertising enabled,
    is that `mod_cluster` connects directly to Apache to communicate its `STATUS`
    information, as depicted in the following image:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/3744_07_09.jpg)'
  id: totrans-257
  prefs: []
  type: TYPE_IMG
- en: Architecture diagram showing balancing and clustering communication configuration
    with TCP
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: Nevertheless, WildFly scales out in the same way; you can add as many WildFly
    nodes as you want, and they will automatically be balanced by Apache. The drawback
    is that if you add another Apache instance, you need to add its reference into
    the WildFly `mod_cluster` configuration through the `proxy-list` attribute of
    the `mod_cluster` subsystem; the change eventually requires a server reload.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: Balancing using the HTTP connector instead of AJP
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to balance a WildFly node using an HTTP connector
    instead of the binary protocol, AJP. The purpose of this recipe is to show you
    how to use a different connector, not how to really balance a service provided
    by WildFly. For this reason, we will use just a WildFly node, fronted by Apache.
    We also assume that Apache HTTPD installation and configuration are based on the
    first two recipes of this chapter.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will need an application named `balancing-test`, that you
    can find in my GitHub repository. If you skipped the *Managing applications using
    the deployments folder* recipe in [Chapter 2](ch02.html "Chapter 2. Running WildFly
    in Standalone Mode"), *Running WildFly in Standalone Mode*, please refer to it
    to download all the source code and projects that you will need.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: 'To build the application, give the following commands:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: How to do it…
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From the WildFly installation directory `$WILDFLY_HOME`, let's create a folder
    representing a server node.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a terminal and execute the following commands:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Now, let''s copy the `balancing-test.war` application into the `deployments`
    folder of the node that we have just created. Type the following command:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Now, let''s generate a virtual IP for the node:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'If it''s not running already, let''s launch Apache and its logs, by executing
    the following commands:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Now it''s time to configure our WildFly node `node-1`. Edit the `standalone-ha.xml`
    file in the `bl-http-std-node-1/configuration` folder, and configure the undertow
    subsystem as follows:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'We disabled the AJP listener by adding the attribute `enabled` and setting
    it to `false`. Based on these changes, we need to update the `mod_cluster` subsystem
    as follows:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'We changed the connector reference from AJP to HTTP. Now we need to update
    the connector reference in the remoting subsystem which references the connector
    with its default name, which is `default`. Apply the following changes:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'That''s it; we are done with our configuration. Let''s start our node by issuing
    the following command into a new terminal window:'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Now, a few seconds after `node-1` starts, you should see the following entries
    in the Apache logs, that is, in `access_log`:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Those are mod-cluster logs stating that it received an information message and
    a configuration message, and then it enabled the application provided by WildFly
    `node-1`.
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s test our application by opening a browser and pointing it to the following
    URL:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'You should see a page like the following screenshot:'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/3744_07_10.jpg)'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Apache serving balancing-test application on node-1 via HTTP connector
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-292
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you were expecting to change something on the Apache side, you were wrong.
    WildFly `mod_cluster` connects to Apache and says `Hi there, I need to be balanced.
    Here is how I'm reachable`. So when Apache receives all the information about
    applications, topology, and the communication strategy, it starts dispatching
    requests to WildFly.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: This is exactly what we have done. We configured the new communication channel
    through the HTTP connector, disabled the AJP connector, and that's it! Pretty
    easy, isn't it?
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: Preserve WildFly workers while restarting Apache
  id: totrans-295
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many times, you need to restart Apache and all your WildFly instances become
    unavailable for a few seconds. So, this annoying **404** error may be a problem.
    In this recipe, we will learn how to mitigate this problem in a simple way. We
    also assume that the Apache HTTPD installation and configuration are based on
    the first two recipes of this chapter.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-297
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will need an application named `balancing-test`, that you
    can find in my GitHub repository. If you skipped the *Managing applications using
    the deployments folder* recipe in [Chapter 2](ch02.html "Chapter 2. Running WildFly
    in Standalone Mode"), *Running WildFly in Standalone Mode*, please refer to it
    to download all the source code and projects that you will need.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: 'To build the application, give the following commands:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: How to do it…
  id: totrans-301
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From the WildFly installation directory `$WILDFLY_HOME`, let's create a folder
    representing a server node.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a terminal and execute the following commands:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Now, let''s copy the `balancing-test.war` application into the `deployments`
    folder of the node that we have just created. Type the following command:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Now, let''s generate a virtual IP for the node:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'If it''s not running already, let''s launch Apache and its logs, by executing
    the following commands:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Let''s start our node, by issuing the following command in a new terminal window:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Now, a few seconds after `node-1` starts, you should see the following entries
    in the Apache logs, that is, `access_log`:'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Those are `mod_cluster` logs stating that it received an information message
    and a configuration message, and then it enabled the application provided by WildFly
    `node-1`.
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now let''s restart Apache by executing the following command:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'In the Apache logs, you should see statements similar to the following:'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'In the WildFly logs, you should see the following log entry:'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Wait for just a few seconds, and now you should see WildFly sending its messages
    to Apache as follows:'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'While restarting, users would have seen a **NOT FOUND** error page for your
    application, as follows:'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/3744_07_11.jpg)'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Apache could not find the application context after a restart
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: So, to mitigate this problem, you can tell Apache to persist somehow with the
    WildFly node information before it shuts down, and then read the information back
    again at startup.
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit the `mod_cluster.conf` file in the `/opt/httpd/conf/extra` folder, and
    add the following directive outside the virtual hosts declaration:'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE71]'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Let''s see if it works. Stop both Apache and WildFly, and then restart them.
    After a few seconds, we should have the following entries:'
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Now restart Apache and look at its logs:'
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: See, no more `INFO`, `CONFIG`, and `ENABLE-APP` messages from WildFly! The WildFly
    log didn't catch anything, and our application is served as fast as Apache starts
    up.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: Balancing the same context for different applications
  id: totrans-335
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A large enterprise environment might be composed of several application servers
    providing lots of applications. Sometimes, it happens that applications have the
    same context path while running on different nodes (eventually, even different
    server-groups in the case of WildFly in the domain mode), but they share the same
    balancer, that is, Apache.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to balance the same application context coming
    from different applications from different nodes.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-338
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will need an application named `balancing-test`, that you
    can find in my GitHub repository. If you skipped the *Managing applications using
    the deployments folder* recipe in [Chapter 2](ch02.html "Chapter 2. Running WildFly
    in Standalone Mode"), *Running WildFly in Standalone Mode*, please refer to it
    to download all the source code and projects that you will need.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: 'To build the application, give the following commands:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: How to do it…
  id: totrans-342
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From the WildFly installation directory `$WILDFLY_HOME`, let's create two folders,
    each one representing a server node.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a terminal and execute the following commands:'
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Now, let''s copy the two web applications in the `deployments` folder, to their
    corresponding node. Type the following commands:'
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Now, let''s generate a virtual IP for each of the nodes:'
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Now, let''s go back to the Apache configuration and edit `mod_cluster.conf`.
    We need to replace the entire configuration, as follows:'
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'As you can see, we changed virtual hosts bindings, so let''s create the appropriate
    virtual IPs for them:'
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Now we need to map the `ServerName` directive into the `/etc/hosts` file, as
    follows:'
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Now, let''s check if our configuration is okay—at least the Apache configuration—by
    starting Apache HTTPD in a new terminal window, as follows:'
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Open the browser and point it to the following URL:'
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'You should see the `mod_cluster-manager` page, as follows:'
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/3744_07_12.jpg)'
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: mod_cluster-manager page served by Apache through the mcm.com address
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, let''s configure our first node, `node-bar`. We need to adjust our `mod_cluster`
    subsystem, as follows:'
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Now we can start our `node-bar` by executing the following commands:'
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  id: totrans-366
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Apache should have caught the following log entries:'
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE85]'
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Now, apply the same changes that we made to the `mod_cluster` subsystem, to
    `node-foo` as well. Once done, start the node as follows:'
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'Apache should have caught the following log entries:'
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE87]'
  id: totrans-372
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: As you can see, Apache warns you about the context `/this` using the two balancers,
    which is fine; this is exactly what we wanted.
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now let's refresh the `mcm.com` site:![How to do it…](img/3744_07_19.jpg)
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: mod_cluster manger page showing both nodes with the same application context
    path
  id: totrans-375
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now it's time to see if our two sites, `bar.com` and `foo.com` are correctly
    balanced and served by our Apache configuration:![How to do it…](img/3744_07_13.jpg)
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The bar.com and foo.com sites showing their welcome page
  id: totrans-377
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To be sure that everything worked correctly, you should find the following
    entries in the `node-bar` logs:'
  id: totrans-378
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE88]'
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'And for `node-foo`, you should find the following log entries:'
  id: totrans-380
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE89]'
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: Great, everything worked as expected!
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-383
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most of the configuration is on the Apache side and is about how we configured
    our virtual hosts. We needed to specify one `mod_cluster` directive, that is,
    `CreateBalancers`. They define how balancers are created in the enclosing virtual
    host, thus you can control which balancer handles your requests (as in our case).
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: 'This `mod_cluster` directive can have the following values:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
- en: '`0`: Creates balancers in all VirtualHosts defined in the Apache HTTPD'
  id: totrans-386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`1`: Does not create balancers (requires at least one `ProxyPass`/`ProxyPassMatch`
    to define the balancer names)'
  id: totrans-387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`2`: Creates only the main balancer named `myclsuter`, and it is the default
    setting.'
  id: totrans-388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As per the preceding definition, for the `bar.com` site, we used the following
    definition:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'For the `foo.com` site, we used the following definition:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: So we commanded Apache to use the balancer `barBalancer` to handle the `bar.com`
    requests, and to use `fooBalancer` to handle the `foo.com` requests. On the WildFly
    side, we had to match the balancer name in the `mod_cluster` subsystem to the
    relative node.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
- en: 'We achieved this by defining the attribute `balancer` in the `mod_cluster`
    subsystem. The attribute is valued to a property to pass at start up, named `balancer.name`.
    The following was our configuration:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: We also needed to specify which Apache was serving our requests, by using the
    `proxy-list` attribute, settled with a property named `proxy.list`, which we passed
    at the command line.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-397
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For understanding Apache directives better, check the documentation at the
    following sites:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.jboss.org/mod_cluster/1.2.0/html/native.config.html](http://docs.jboss.org/mod_cluster/1.2.0/html/native.config.html)'
  id: totrans-399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://httpd.apache.org/docs/2.2/mod/mod_proxy.html#proxypass](http://httpd.apache.org/docs/2.2/mod/mod_proxy.html#proxypass)'
  id: totrans-400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rolling updates
  id: totrans-401
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to update your application, using rolling
    updates, while still providing service availability. To achieve this, we need
    to configure quite a few things from Apache to WildFly, and code the tester application.
    We also assume that Apache HTTPD installation and configuration are based on the
    first two recipes of this chapter.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-403
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will need the application named `rolling-test`, that you
    can find in my GitHub repository. If you skipped the *Managing applications using
    the deployments folder* recipe in [Chapter 2](ch02.html "Chapter 2. Running WildFly
    in Standalone Mode"), *Running WildFly in Standalone Mode*, please refer to it
    to download all the source code and projects that you will need.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
- en: 'To build the application, do as follows:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: How to do it…
  id: totrans-407
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's create four folders from the WildFly installation directory `$WILDFLY_HOME`,
    each one representing a server node.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a terminal and execute the following commands:'
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  id: totrans-410
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'Now, let''s copy the `rolling-test-1.0.war` web application into the `deployments`
    folder of each node that we just created, as follows:'
  id: totrans-411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  id: totrans-412
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'Now, let''s generate a virtual IP for each of the nodes:'
  id: totrans-413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  id: totrans-414
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'Edit the file `standalone-ha.xml` of each WildFly node, and replace the `cache-container`
    XML element named `web` of the `infinispan` subsystem, with the following XML
    code:'
  id: totrans-415
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  id: totrans-416
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'Now, let''s go back to the Apache configuration and edit `mod_cluster.conf`.
    We need to replace the entire configuration, as follows:'
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  id: totrans-418
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'Add another virtual IP for the second virtual host, as follows:'
  id: totrans-419
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  id: totrans-420
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'Now, as root user, edit the `/etc/hosts` file and add the following directive:'
  id: totrans-421
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  id: totrans-422
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Now we are ready to start Apache and all four WildFly nodes.
  id: totrans-423
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For Apache, do as follows:'
  id: totrans-424
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE101]'
  id: totrans-425
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'For WildFly nodes, open four different terminal windows, and in each of them,
    do as follows:'
  id: totrans-426
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For `node-1`:'
  id: totrans-427
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE102]'
  id: totrans-428
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'For `node-2`:'
  id: totrans-429
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE103]'
  id: totrans-430
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'For `node-3`:'
  id: totrans-431
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE104]'
  id: totrans-432
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'For `node-4`:'
  id: totrans-433
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE105]'
  id: totrans-434
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'Open the browser and point it to the following site, refreshing the page a
    couple of times:'
  id: totrans-435
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  id: totrans-436
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'You should see the following:'
  id: totrans-437
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/3744_07_14.jpg)'
  id: totrans-438
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Apache serving the rolling application via the server name rolling.com
  id: totrans-439
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Without spending too much time watching the logs, let's stop the `node-1`, or
    whichever node you landed on. Refresh the page a few times:![How to do it…](img/3744_07_15.jpg)
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rolling application provided by another member of the cluster, node-2
  id: totrans-441
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: OK, it worked. Now suppose that our super boss wants to go into production with
    the latest version of our great application. Obviously he wants it done for yesterday,
    and obviously he does not want to give a **Service unavailable** to customers.
  id: totrans-442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You know the answer: **Yes Sir, yes!**.'
  id: totrans-443
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit the `index.jsp` file of the `rolling-test` application and change its
    content by replacing the `<h3>...</h3>` HTML tag with the following one:'
  id: totrans-444
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  id: totrans-445
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'Now we need to increment the application version; we can do this by editing
    the `pom.xml` Maven file of the `rolling-test` project, and change its `<version>`
    tag, as follows:'
  id: totrans-446
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  id: totrans-447
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'Now we can build the project again as follows:'
  id: totrans-448
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE109]'
  id: totrans-449
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'Stop `node-2` and update the application by removing the old package and copying
    the new one, to `node-1` and `node-2` as follows:'
  id: totrans-450
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE110]'
  id: totrans-451
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: Tip
  id: totrans-452
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: We can do this as we are using the standalone mode. Nonetheless, remember to
    disable hot-deployments in the production environment, just in case.
  id: totrans-453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, restart both nodes as usual:'
  id: totrans-454
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE111]'
  id: totrans-455
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: Go back to the browser and refresh the page; you should get the new functionality
    desired by our super boss, as follows:![How to do it…](img/3744_07_16.jpg)
  id: totrans-456
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rolling application with its new functionality
  id: totrans-457
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'And yes, we didn''t even loose the session. Now we need to upgrade the other
    two nodes, `node-3` and `node-4`, otherwise a user might get the following page
    by accessing the application:'
  id: totrans-458
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/3744_07_17.jpg)'
  id: totrans-459
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Rolling application needs to be updated in every node of the cluster
  id: totrans-460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'So, let''s stop `node-3` and `node-4`, remove the old artifact, and deploy
    the new one as follows:'
  id: totrans-461
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE112]'
  id: totrans-462
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'Now, restart both nodes as usual:'
  id: totrans-463
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE113]'
  id: totrans-464
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE113]'
- en: Now that all nodes have the same application, by stopping one node at a time
    and refreshing the page, obviously leaving one node up, we should have a scenario
    as depicted in the following screenshot:![How to do it…](img/3744_07_18.jpg)
  id: totrans-465
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rolling update completed on all 4 nodes
  id: totrans-466
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Perfect! Let's go to the boss's office and tell him we are done!
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-468
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Well, actually the entire configuration is on the Apache side. In WildFly we
    didn't do much. As you saw, we configured a replicated-cache, just for demonstration
    purpose. The difference between a replicated cache and a distributed cache is
    that in the first one, all information is replicated to all nodes while in the
    second one, sessions are replicated to just select nodes. Those nodes, if not
    otherwise specified, are selected randomly.
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
- en: From the configuration you can tell the cache how many nodes to distribute the
    session on, by the attribute owners.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
- en: We also relayed on the `standalone-ha` profile, with its defaults, and started
    it along with some custom bindings for each node.
  id: totrans-471
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We created one cluster composed of four nodes. Each node had its own copy of
    the application.
  id: totrans-472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We then stopped two nodes. Stopping two nodes lets the users use our application,
    as their requests would be balanced on the other available nodes.
  id: totrans-473
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  id: totrans-474
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Rolling updates might be much harder; it all depends on the backward compatibility
    of the application, concerning functionalities, and the domain model, which is
    what goes into a session. In our example, the data shared across cluster nodes
    was the same for the first version of the application as well as the last one.
  id: totrans-475
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: There's more…
  id: totrans-476
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In a domain mode, it''s pretty much the same:'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
- en: First you need to logically split the cluster in two, as we did during our rolling
    updates. To do this, we should configure a server-group which would represent
    the first half of the cluster—let's call it `sg-rolling-1`—and then configure
    another server-group, naming it `sg-rolling-2`, which in turn would represent
    the second half of the cluster.
  id: totrans-478
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When doing the first rolling update, you would stop the first server-group,
    undeploy the old application, and then deploy the new one. Once the deployment
    has finished, you can restart the server-group.
  id: totrans-479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When all the nodes are up and running, you can repeat this operation for the
    second server group. That's pretty much what you should do using the domain mode.
  id: totrans-480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  id: totrans-481
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you need a deeper understanding of clustering WildFly, refer to [Chapter
    5](ch05.html "Chapter 5. Managing the Datasource Subsystems with the CLI"), *Managing
    the Datasource Subsystems with the CLI*.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
