- en: Chapter 7. Peeking into m2eclipse
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are toward the end of the journey; now in this chapter, we will look into
    other additional features in m2eclipse, getting familiar with the form-based POM
    editor, and learn about repositories.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics covered in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Other features in m2eclipse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A form-based POM editor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzing project dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with repositories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: m2eclipse preferences
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other features in m2eclipse
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following steps have to be performed in order to understand the other features
    of m2eclipse. Right-click on the Maven project and navigate to the **Maven** menu
    item. Then, you can see the available features as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Other features in m2eclipse](img/00081.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you see the screenshot, the available features are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Add Dependency**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Add Plugin**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**New Maven Module Project**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Download JavaDoc**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Download Sources**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Update Project**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Disable Workspace Resolution**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Disable Maven Nature**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Similarly, right-click on **Maven Dependencies** and navigate to the **Maven**
    menu item. The available features seen are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Other features in m2eclipse](img/00082.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The available features are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Download JavaDoc**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Download Sources**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Exclude Maven Artifact**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Open POM**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Open JavaDoc**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Import Project(s) from SCM**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the sections to follow, we will collectively discuss these features.
  prefs: []
  type: TYPE_NORMAL
- en: Add Dependency
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It allows us to add dependencies to the Maven project. The screenshot for this
    is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Add Dependency](img/00083.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Up until now, we have been editing the `pom.xml` file and adding dependencies
    to it. Adding dependencies is another way to achieve the same objective using
    the graphical interface. When you use this option, the information you need to
    know is less, that is, knowing `artifactId`/`groupId` is enough to search across
    repositories and select the appropriate one. In the previous method, you need
    to know complete Maven coordinates to add the dependencies; hence, the latter
    is a time saver.
  prefs: []
  type: TYPE_NORMAL
- en: Add Plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Similar to **Add Dependency**, **Add Plugin** allows you to add plugins via
    the graphical interface. This requires us to have minimal information to search
    through the repository and add plugins. The screenshot for this is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Add Plugin](img/00084.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: New Maven Module Project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In [Chapter 6](part0049_split_000.html#page "Chapter 6. Creating a Multimodule
    Project"), *Creating a Multimodule Project*, we created a multimodule project
    and learned about creating module projects. This is another way to invoke the
    same **Add module** wizard to create modules. The screenshot of the window is
    shown as follows, which is the same as the screenshot obtained when you navigate
    to **New** | **Other** | **Maven Module** and right-click on the project (as we
    saw in the previous chapter):'
  prefs: []
  type: TYPE_NORMAL
- en: '![New Maven Module Project](img/00085.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Download JavaDoc
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Download JavaDoc** is used to download the javadoc of the project if present
    in the central repository to the local repository. For example, right-click on
    the `log4j-1.2.17.jar` file under **Maven Dependencies** and click on **Download
    JavaDoc**, as shown in the following screenshot. The javadoc will be downloaded
    to the local repository along with other artifacts at the `$HOME/.m2/repository/log4j/log4j/1.2.17/
    as log4j-1.2.17-javadoc.jar` location:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Download JavaDoc](img/00086.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Download Source
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If the central repository has a source artifact for the corresponding project,
    we can use this option to download it to the local repository and use it with
    the Eclipse environment. This is a life saver, particularly when we are debugging
    a complex issue and there is need to drill down the code of dependencies. For
    example, the source code of `log4j` will be downloaded at the `$HOME/.m2/repository/log4j/log4j/1.2.17/`
    as `log4j-1.2.17-javadoc.jar` location. After downloading the source code, right-click
    on the `log4j-1.2.17.jar` file and click on **Properties**, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Download Source](img/00087.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The **Properties** window appears; the **Java Source Attachment** navigation
    button shows the attached source code location, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Download Source](img/00088.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note that we can also find the javadoc location by clicking on the **Javadoc
    Location** navigation button on the left pane.
  prefs: []
  type: TYPE_NORMAL
- en: Open Javadoc
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When we want to browse through the javadoc of the corresponding project, we
    use this option. The javadoc opens in the editor area as a separate tab as shown
    in the following screenshot for `log4j` docs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Open Javadoc](img/00089.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Open POM
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At any point, if there is a need to look at the POM file of the dependencies,
    we can use this option. The respective POM file of the dependency opens in the
    editor area of the workspace. The following screenshot depicts the POM file in
    the editor area for `log4j`, which has been the dependency in the `MyDistance`
    application we built in [Chapter 4](part0031_split_000.html#page "Chapter 4. Building
    and Running a Project"), *Building and Running a Project*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Open POM](img/00090.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Update Project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are instances where we have a Java project and we want to convert it
    to a Maven project. We can do this by right-clicking on the project, navigating
    to **Configure** | **Convert to Maven Project**, and adding a POM file. Now, **Update
    Project** is used to update the project from its dependencies and resources. **Update
    Project** is also handy if you have multiple Maven projects in your workspace,
    and the projects depend on each other. Then, after you build (`mvn install`) one
    project, you can perform **Update Project** on other projects to pick up the new
    artifact. The update option is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Update Project](img/00091.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Choosing **Offline** will not check the central repository for updates.
  prefs: []
  type: TYPE_NORMAL
- en: Disable Workspace Resolution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Imagine a case where a project A depends on project B and they reside in the
    same workspace, mostly in multimodule projects. Now, if workspace resolution is
    disabled, to have project A, a successful build and a project B artifact are needed
    in the local repository. However, if the workspace resolution is enabled, the
    dependencies are resolved using an Eclipse workspace, and there is no need for
    an artifact in the local repository.
  prefs: []
  type: TYPE_NORMAL
- en: Disable Maven Nature
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It disables the Maven aspect of the project, that is, the Maven dependencies
    are removed from the build path. In that case, we may need to include the JARs
    manually in the classpath from the build window.
  prefs: []
  type: TYPE_NORMAL
- en: Import Project(s) from SCM
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It allows you to pull the source code to your Eclipse workspace for the dependency.
    In other words, it enables you to create a new Maven project for a dependency
    based on the sources for that dependency. The sources are pulled from the **Source
    Code Management** (**SCM**) system as defined in the POM for the dependency. If
    the dependency POM fails to mention the SCM, then this option does nothing. Make
    sure you have a proper m2e connector installed for the corresponding SCMs. We
    discussed importing and installing Subversion m2e connector in [Chapter 3](part0024_split_000.html#page
    "Chapter 3. Creating and Importing Projects"), *Creating and Importing Projects*.
  prefs: []
  type: TYPE_NORMAL
- en: A form-based POM editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'm2eclipse provides the option of editing the `pom` file using a form-based
    POM editor. In earlier chapters, we played with XML tags and edited the `pom`
    file. While directly editing an XML file, the knowledge of tags is required, and
    there is a high chance that the user will make some errors. However, a form-based
    editor reduces the chance of a simple error and eases the editing of a `pom` file
    without or very minimal XML knowledge behind the scene. I would prefer playing
    around with XML tags and use that option, but you are open to choose your option.
    The form-based editor is shown in the following screenshot and has five tabs:
    **Overview**, **Dependencies**, **Dependency Hierarchy**, **Effective POM**, and
    **pom.xml**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A form-based POM editor](img/00092.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: An overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Overview provides general information of the project. It consists of the following
    sections and provides information about them as shown in the preceding screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Artifact**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Parent**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Project**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Modules**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Properties**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Organization**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SCM**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Issue Management**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Continuous Integration**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can change any information in this form, and this will be reflected in the
    XML file. We will discuss the **Dependencies** and the **Dependencies Hierarchy**
    tab in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing project dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A POM editor has a **Dependencies** tab that provides a glance of dependencies
    and an option to manage dependencies of the project. The **Dependencies** tab
    has two sections as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Analyzing project dependencies](img/00093.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'It shows all the dependencies of the project on the left side. We can also
    add dependencies to the project using the **Add** button of the **Dependencies**
    section. The **Manage** button allows you to choose the POM that will manage the
    corresponding dependencies, and the screenshot for this is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Analyzing project dependencies](img/00094.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As stated very clearly on the top of the window, the managed dependencies version
    information will move to the POM that manages it. For example, let''s choose to
    manage the `log4j` dependency of `distance-webapp` by the `Distance-main` POM.
    Select `log4j` on the list to the and select `Distance-main` in the list to the
    right, and click on **OK** as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Analyzing project dependencies](img/00095.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After the `log4j` file is managed, the word "managed" appears to its right,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Analyzing project dependencies](img/00096.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we happen to see its effect in the XML file, we can see that the version
    information from the `distance-webapp` POM is moved and is added as a dependency
    in the `Distance-main` POM, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Another way to achieve the same functionality is via the **Dependency Management**
    section to the right across the parent-child POM. The **Dependency Hierarchy**
    tab contains two sections: **Dependency Hierarchy** and **Resolved Dependencies**
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Analyzing project dependencies](img/00097.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The **Dependency Hierarchy** section on the left provides the tree view of the
    dependencies. The first level of the tree is direct dependency of the project
    and then each subsequent level shows the dependencies of each dependency. The
    preceding screenshot is for the `distance-webapp` module, where we have four direct
    dependencies, and these dependencies have no further dependency, so the tree structure
    is not visible. However, for large projects and large direct dependencies, we
    can easily visualize it. The jar icon indicates that it is referenced from the
    Maven repository and the open folder icon indicates its presence in the Eclipse
    workspace.
  prefs: []
  type: TYPE_NORMAL
- en: The **Resolved Dependencies** section on the right shows the list of all resolved
    dependencies, that is, resulting dependencies after all conflicts and scopes applied.
    It gives a general idea of resolution chain propagation and route to **Resolved
    Dependencies**. Click on any resolved dependency and its shows the dependency
    chain in the **Dependency Hierarchy** section.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on dependencies, refer to [http://books.sonatype.com/m2eclipse-book/reference/dependencies-sect-analyze-depend.html](http://books.sonatype.com/m2eclipse-book/reference/dependencies-sect-analyze-depend.html).
  prefs: []
  type: TYPE_NORMAL
- en: Working with repositories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To browse through the repository, navigate to **Window** | **Show View** and
    click on **Other...** as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with repositories](img/00098.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, the **Show View** window appears. Search for `maven repository`, as shown
    in the following screenshot, and click on **Maven Repositories**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with repositories](img/00099.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The **Maven Repositories** view constitutes of the following types:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Local Repositories**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Global Repositories**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Project Repositories**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Custom Repositories**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The repositories that are of interest are local, global, and project repositories.
  prefs: []
  type: TYPE_NORMAL
- en: Local Repositories
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It shows the artifacts of the local repository, and we can drill down to see
    its POM contents. It also consists of Eclipse workspace projects. The following
    is the screenshot of the local repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Local Repositories](img/00100.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Global Repositories
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It references the artifacts of the central repository. We can browse through
    the artifacts of the central repository and view its POM. Right-click on **Global
    repositories**, which provides the ability to re-index, build full index, minimum
    index, and update index from the central repository. The following screenshot
    illustrates the global repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Global Repositories](img/00101.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Project Repositories
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Refresh the **Maven Repositories** window by clicking on the two cyclic arrows
    on the top-right side of the window. We can see the corresponding reference in
    **Project Repositories** as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Project Repositories](img/00102.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: m2eclipse preferences
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To open m2eclipse preferences, navigate to **Window** | **Preferences**. In
    the **Preferences** window and search for `maven` in the filter textbox as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![m2eclipse preferences](img/00103.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Maven
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Click on **Maven** as shown in the screenshot that follows later; it allows
    us to set the following options for Maven:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Offline**: This option will not check the central repository for updates'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Debug Output**: This option sets Maven in the debug mode'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Download Artifact Sources**: This option downloads sources to local repositories
    such as JAR'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Download Artifact Javadoc**: This option downloads the javadoc to the local
    repository'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Update Maven projects on startup**: This option updates the dependencies
    of the Maven project'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hide folders of physically nested modules (experimental)**: This option is
    in the experimental mode, which hides the nested folders of a multimodule project'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Maven](img/00104.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Discovery
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Discovery is used to discover the m2e connectors available for use. Please refer
    to the *Checking out a Maven project* section in [Chapter 3](part0024_split_000.html#page
    "Chapter 3. Creating and Importing Projects"), *Creating and Importing Projects*,
    on how we used this feature.
  prefs: []
  type: TYPE_NORMAL
- en: Archetypes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Archetypes allows us to add, remove, and edit the Maven archetype catalog,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: For more information on archetypes, please refer to [http://maven.apache.org/archetype/index.html](http://maven.apache.org/archetype/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: '![Archetypes](img/00105.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: User Interface and User Settings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**User Interface** allows us to set XML file options, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![User Interface and User Settings](img/00106.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The `settings.xml` file contains elements used to define values that configure
    Maven execution in various ways, such as the `pom.xml` file. The `settings` file
    is at `$ {M2_HOME}/settings.xml`, where `M2_HOME` is `{USER_HOME}/.m2`. In the
    *Local Repository* section of [Chapter 3](part0024_split_000.html#page "Chapter 3. Creating
    and Importing Projects"), *Creating and Importing Projects*, we use this file
    to set the alternate local repository other than the default one.
  prefs: []
  type: TYPE_NORMAL
- en: '**User Settings** allows us to use the custom settings file and re-index the
    local repository, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![User Interface and User Settings](img/00107.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: For more information on settings, please refer to [http://maven.apache.org/settings.html#Servers](http://maven.apache.org/settings.html#Servers).
  prefs: []
  type: TYPE_NORMAL
- en: Installations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Installations** shows Maven installations and allows us to choose the Maven
    to use. We used it to set the external Maven installation in the *Setting Maven
    to Use* section of [Chapter 2](part0019_split_000.html#page "Chapter 2. Installing
    m2eclipse"), *Installing m2Eclipse*; please refer to it for more details.'
  prefs: []
  type: TYPE_NORMAL
- en: Warnings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Warnings allows us to enable/disable the warning for a duplicate group ID and
    version across the parent-child POM. At the time of writing this, though this
    option is enabled, m2eclipse still complains about duplicates; hopefully, this
    feature will work in days to come with other new releases.
  prefs: []
  type: TYPE_NORMAL
- en: Templates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Templates shows the list of all the templates used by Maven. It also provides
    an option to add new templates, edit, remove, import, and export the templates,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Templates](img/00108.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Lifecycle Mappings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Lifecycle Mappings** allows us to customize the project build lifecycle for
    Maven projects used by m2eclipse. This feature is still experimental at the time
    of writing this book; hence, we will limit its discussion.'
  prefs: []
  type: TYPE_NORMAL
- en: For more information, please refer to [http://wiki.eclipse.org/M2E_plugin_execution_not_covered](http://wiki.eclipse.org/M2E_plugin_execution_not_covered).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about other additional features available in m2eclipse,
    and got familiar with the repositories, form-based POM editor, and m2eclipse preferences.
    So, in this book, you learned Maven concepts; m2eclipse and features; and its
    ease in creating, building, and running Maven projects.
  prefs: []
  type: TYPE_NORMAL
