- en: Chapter 7. Unit Testing the Web Tier
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章：单元测试Web层
- en: '"If you don''t like unit testing your product, most likely your customers won''t
    like to test it either."'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “如果你不喜欢对你的产品进行单元测试，那么你的客户很可能也不喜欢对其进行测试。”
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Anonymous
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ——匿名
- en: 'Enterprise applications follow the **N-tier architecture model** to handle
    numerous nonfunctional concerns such as upgradability, scalability, and maintainability.
    The best design approach is to decouple the tiers from each other; this allows
    scaling out a tier without affecting another tier, or refactoring code in one
    tier without affecting the other tiers. Usually, any web application contains
    three tiers: presentation, business logic, and a database tier. This chapter deals
    with unit testing the web tier or presentation layer. The next chapters cover
    the application and database layers.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 企业应用程序遵循**N层架构模型**来处理众多非功能性关注点，例如可升级性、可扩展性和可维护性。最佳的设计方法是解耦各个层；这允许在不影响其他层的情况下扩展一个层，或者在不影响其他层的情况下重构一个层的代码。通常，任何Web应用程序都包含三个层：表示层、业务逻辑层和数据库层。本章将处理对Web层或表示层的单元测试。下一章将涵盖应用程序和数据库层。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Unit testing a servlet controller in MVC
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试MVC中的servlet控制器
- en: Understanding what to test in the presentation layer
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解在表示层中要测试的内容
- en: Unit testing servlets
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试servlet
- en: '**Model View Controller** (**MVC**) is a widely used web development pattern.
    MVC pattern defines three interconnected components: model, view, and controller.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**模型-视图-控制器**（**MVC**）是一种广泛使用的Web开发模式。MVC模式定义了三个相互关联的组件：模型、视图和控制器。'
- en: The model represents the application data, logic, or business rules.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 模型表示应用程序数据、逻辑或业务规则。
- en: A view is a representation of information or model. A model can have multiple
    views; for example, the marks of a student can be represented in a tabular format
    or on a graphical chart.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 视图是信息或模型的表示。一个模型可以有多个视图；例如，学生的分数可以用表格格式或图形图表表示。
- en: The controller accepts the client request and initiates commands to either update
    the model or change the view.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器接受客户端请求并启动命令以更新模型或更改视图。
- en: The controller controls the flow of the application. In JEE applications, a
    controller is usually implemented as a servlet. A controller servlet intercepts
    requests and then maps each request to an appropriate handler resource. In this
    section, we will build a classic MVC front controller servlet to redirect requests
    to views.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器控制应用程序的流程。在JEE应用程序中，控制器通常实现为一个servlet。控制器servlet拦截请求并将每个请求映射到适当的处理资源。在本节中，我们将构建一个经典的MVC前端控制器servlet以将请求重定向到视图。
- en: Requests with only a context path, such as `http://localhost:8080/context/`,
    are routed to the `login.jsp` page, all home page requests (with URL `/home.do`)
    are routed to the `home.jsp` page, and all other requests are routed to the `error.jsp`
    page.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 只有上下文路径的请求，例如`http://localhost:8080/context/`，将被路由到`login.jsp`页面，所有主页请求（带有URL
    `/home.do`）将被路由到`home.jsp`页面，所有其他请求将被路由到`error.jsp`页面。
- en: Building and unit testing a J2EE web application
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建和单元测试一个J2EE Web应用程序
- en: 'Follow the ensuing steps to build a web application and test the controller
    logic:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤构建Web应用程序并测试控制器逻辑：
- en: Create a dynamic web project named `DemoServletTest` in Eclipse.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Eclipse中创建一个名为`DemoServletTest`的动态Web项目。
- en: 'Create a controller servlet named `com.packt.servlet.DemoController`, and add
    the following lines to the `doGet` method:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`com.packt.servlet.DemoController`的控制器servlet，并将以下行添加到`doGet`方法中：
- en: '[PRE0]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This method gets the servlet path from the request and matches the path with
    `/` tokens. When no match is found, then the `doGet` method sets an error attribute
    to the request.
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此方法从请求中获取servlet路径并与`/`标记进行匹配。如果没有找到匹配项，则`doGet`方法将错误属性设置到请求中。
- en: 'Create three JSP files: `login.jsp`, `home.jsp`, and `error.jsp`. Modify the
    `error.jsp` file, and add the following scriptlet to display the error message:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建三个JSP文件：`login.jsp`、`home.jsp`和`error.jsp`。修改`error.jsp`文件，并添加以下脚本以显示错误消息：
- en: '[PRE1]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Modify the `web.xml` file to map all requests to `DemoController`. Add the
    following lines of code to the `web.xml` file:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`web.xml`文件以将所有请求映射到`DemoController`。在`web.xml`文件中添加以下代码行：
- en: '[PRE2]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `demo` servlet maps the `url-pattern` tag.
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`demo` servlet映射`url-pattern`标签。'
- en: The application is ready, but how do we unit test the controller logic?
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序已准备就绪，但我们如何对控制器逻辑进行单元测试？
- en: We cannot instantiate the `HttpServletRequest` or `HttpServletResponse` objects.
    We can mock the `HttpServletRequest` or `HttpServletResponse` objects using Mockito.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不能实例化 `HttpServletRequest` 或 `HttpServletResponse` 对象。我们可以使用 Mockito 模拟 `HttpServletRequest`
    或 `HttpServletResponse` 对象。
- en: 'Create a test class named `DemoControllerTest` and add the following code snippet:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `DemoControllerTest` 的测试类，并添加以下代码片段：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Note that the `request` and `response` objects are mocked using mockito and
    then expectations are set to get `ServletPath`, and `verify` is used to check
    the view name returned by the controller. We added three tests to verify the controller
    logic: one to check the default context path, one to check the `home.do` URL,
    and the other to verify the error condition.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，使用 mockito 模拟了 `request` 和 `response` 对象，并设置了期望以获取 `ServletPath`，然后使用 `verify`
    检查控制器返回的视图名称。我们添加了三个测试来验证控制器逻辑：一个用于检查默认上下文路径，一个用于检查 `home.do` URL，另一个用于验证错误条件。
- en: 'Create a Tomcat server instance from the server view (right-click on the server
    view and create a new server; from the server wizard choose Tomcat and set the
    runtime configuration) and run the application. Open the browser and go to `http://localhost:8080/DemoServletTest/`,
    and check that the application opens the **Login page**. The following is the
    browser output:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 从服务器视图（在服务器视图中右键单击并创建一个新的服务器；从服务器向导中选择 Tomcat 并设置运行时配置）创建一个 Tomcat 服务器实例并运行应用程序。打开浏览器并访问
    `http://localhost:8080/DemoServletTest/`，检查应用程序是否打开 **登录页面**。以下为浏览器输出：
- en: '![Building and unit testing a J2EE web application](img/00107.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![构建和单元测试 J2EE 网络应用程序](img/00107.jpeg)'
- en: 'Go to `http://localhost:8080/DemoServletTest/home.do`; it will open the **Home
    page**. The following is the browser output:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 访问 `http://localhost:8080/DemoServletTest/home.do`；它将打开 **主页**。以下为浏览器输出：
- en: '![Building and unit testing a J2EE web application](img/00108.jpeg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![构建和单元测试 J2EE 网络应用程序](img/00108.jpeg)'
- en: 'Go to any other URL, such as `http://localhost:8080/DemoServletTest/abc`. It
    will open an error page and display an error message. The following is the error
    output:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 访问任何其他 URL，例如 `http://localhost:8080/DemoServletTest/abc`。它将打开一个错误页面并显示错误信息。以下为错误输出：
- en: '![Building and unit testing a J2EE web application](img/00109.jpeg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![构建和单元测试 J2EE 网络应用程序](img/00109.jpeg)'
- en: The results of the preceding browser verify that our JUnit tests work fine.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 上述浏览器验证结果表明我们的 JUnit 测试运行良好。
- en: '`DemoServletTest` acts as a **front controller**. A front controller is a design
    pattern where a single servlet handles all web requests and routes them to other
    controllers or handlers for actual processing. All dynamic web applications written
    in the Java or Servlet API need a front controller servlet to handle HTTP requests,
    so all projects write logically duplicate code to handle requests through the
    front controller servlets.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`DemoServletTest` 充当 **前端控制器**。前端控制器是一种设计模式，其中单个 servlet 处理所有网络请求并将它们路由到其他控制器或处理器进行实际处理。所有使用
    Java 或 Servlet API 编写的动态网络应用程序都需要一个前端控制器 servlet 来处理 HTTP 请求，因此所有项目都编写逻辑上重复的代码来通过前端控制器
    servlet 处理请求。'
- en: Spring MVC was built to provide a flexible framework for web application developers.
    Spring's `DispatcherServlet` acts as the front controller; similar to the `DemoServletTest`
    test, it receives all incoming requests and delegates the processing of the requests
    to handlers. It allows developers to concentrate on business logic rather than
    work on the boilerplate of a custom front controller. The next section describes
    the Spring MVC architecture and how web applications can be unit tested using
    Spring MVC.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Spring MVC 是为了为网络应用程序开发者提供一个灵活的框架而构建的。Spring 的 `DispatcherServlet` 充当前端控制器；类似于
    `DemoServletTest` 测试，它接收所有传入的请求并将请求的处理委托给处理器。它允许开发者专注于业务逻辑，而不是在自定义前端控制器的样板代码上工作。下一节将描述
    Spring MVC 架构以及如何使用 Spring MVC 对网络应用程序进行单元测试。
- en: Playing with Spring MVC
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 撒娇 Spring MVC
- en: 'In Spring MVC, the following is a pattern of a simplified request handling
    mechanism:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Spring MVC 中，以下是一个简化的请求处理机制的示例：
- en: '`DispatcherServlet` receives a request and confers the request with handler
    mappings to find out which controller can handle the request, and then passes
    the request to that controller.'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`DispatcherServlet` 接收一个请求并与处理器映射协商以确定哪个控制器可以处理该请求，然后将请求传递给该控制器。'
- en: The controller performs the business logic (can delegate the request to a service
    or business logic processor) and returns some information back to `DispatcherServlet`
    for user display or response. Instead of sending the information (model) directly
    to the user, the controller returns a view name that can render the model.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 控制器执行业务逻辑（可以委托请求到服务或业务逻辑处理器）并将一些信息返回给 `DispatcherServlet` 以供用户显示或响应。而不是直接将信息（模型）发送给用户，控制器返回一个可以渲染模型的视图名称。
- en: '`DispatcherServlet` then resolves the physical view from the view name and
    passes the model object to the view. This way, `DispatcherServlet` is decoupled
    from the view implementation.'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`DispatcherServlet` 然后根据视图名称解析物理视图，并将模型对象传递给视图。这样，`DispatcherServlet` 就与视图实现解耦了。'
- en: The view renders the model. A view could be a JSP page, a servlet, a PDF file,
    an excel report, or any presentable component.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 视图渲染模型。一个视图可以是 JSP 页面、servlet、PDF 文件、Excel 报告或任何可展示的组件。
- en: 'The following sequence diagram represents the flow and interaction of Spring
    MVC components:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下序列图表示了 Spring MVC 组件的流程和交互：
- en: '![Playing with Spring MVC](img/00110.jpeg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![玩转 Spring MVC](img/00110.jpeg)'
- en: 'We will build a Spring web application and unit test the code using JUnit.
    The following are the steps to be performed:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建一个 Spring 网络应用程序，并使用 JUnit 对代码进行单元测试。以下是需要执行的步骤：
- en: Launch Eclipse and create a dynamic web project named `SpringMvcTest`.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Eclipse 并创建一个名为 `SpringMvcTest` 的动态网络项目。
- en: 'Open `web.xml` and enter the following lines:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `web.xml` 并输入以下行：
- en: '[PRE4]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The dispatcher is named `DispatcherServlet`, and it maps all requests. Note
    the `contextConfigLocation` parameter. This indicates that the Spring beans are
    defined in `/WEB-INF/dispatcher-servlet.xml`.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 分发器被命名为 `DispatcherServlet`，它映射所有请求。注意 `contextConfigLocation` 参数。这表明 Spring
    容器在 `/WEB-INF/dispatcher-servlet.xml` 中定义了 Spring 容器。
- en: 'Create an XML file named `dispatcher-servlet.xml` in `WEB-INF` and add the
    following lines:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `WEB-INF` 中创建一个名为 `dispatcher-servlet.xml` 的 XML 文件，并添加以下行：
- en: '[PRE5]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This XML defines a Spring view resolver. Any view will be found under the `/WEB-INF/pages`
    location with the `.jsp` suffix, and all beans are configured under the `com.packt`
    package with Spring annotations.
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此 XML 定义了一个 Spring 视图解析器。任何视图都将位于 `/WEB-INF/pages` 位置，并具有 `.jsp` 后缀，所有容器都配置在
    `com.packt` 包下，并使用 Spring 注解。
- en: Create a class named `LoginInfo` in the `com.packt.model` package. This class
    represents the login information. Add two private `String` fields, `userId` and
    `password`, and generate the getters and setters.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `com.packt.model` 包中创建一个名为 `LoginInfo` 的类。这个类表示登录信息。添加两个私有的 `String` 字段，`userId`
    和 `password`，并生成获取器和设置器。
- en: 'Create a JSP page named `login.jsp` under `/WEB-INF/view`, and add the following
    lines to create a form using the Spring tag library. Modify the form and add normal
    HTML input for username and password:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `/WEB-INF/view` 下创建一个名为 `login.jsp` 的 JSP 页面，并添加以下行以使用 Spring 标签库创建表单。修改表单并添加用于用户名和密码的正常
    HTML 输入：
- en: '[PRE6]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Create a controller class named `com.packt.controller.LoginController` to handle
    login requests. Add the following lines:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `com.packt.controller.LoginController` 的控制器类来处理登录请求。添加以下行：
- en: '[PRE7]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `@Controller` annotation indicates that the class is a Spring MVC controller
    class. In `smapl-servlet.xml`, we defined `<context:component-scan base-package="com.packt"
    />`, so Spring will scan this `@Controller` annotation and create a bean. The
    `@RequestMapping` annotation maps any request with the default path `/SpringMvcTest/`
    or `/SpringMvcTest/login` to the `onStartUp` method. This method returns a logical
    view name `login`. The view resolver defined in the XML file will map the login
    request to the physical view `login.jsp` page under `/WEB-INF/pages`.
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`@Controller` 注解表示该类是一个 Spring MVC 控制器类。在 `smapl-servlet.xml` 中，我们定义了 `<context:component-scan
    base-package="com.packt" />`，因此 Spring 将扫描此 `@Controller` 注解并创建一个 Bean。`@RequestMapping`
    注解将任何请求与默认路径 `/SpringMvcTest/` 或 `/SpringMvcTest/login` 映射到 `onStartUp` 方法。此方法返回一个逻辑视图名称
    `login`。XML 文件中定义的视图解析器将登录请求映射到 `/WEB-INF/pages` 下的物理视图 `login.jsp` 页面。'
- en: 'Create another method in the `Login` class to handle the login and submit requests,
    as follows:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Login` 类中创建另一个方法来处理登录和提交请求，如下所示：
- en: '[PRE8]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `onLogin` method is mapped with `/onLogin`. The `@ModelAttribute("loginInfo")`
    method is the model submitted from the `login.jsp` form. This method checks whether
    the username is `junit` and password is `password`. If the user ID or password
    does not match, then an error message is shown on the login page, otherwise, the
    `greetings` view is opened.
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`onLogin`方法与`/onLogin`映射。`@ModelAttribute("loginInfo")`方法是来自`login.jsp`表单提交的模型。此方法检查用户名是否为`junit`且密码为`password`。如果用户ID或密码不匹配，则登录页面将显示错误信息，否则将打开`greetings`视图。'
- en: 'Change the content of the `login.jsp` file to submit the form to `/SpringMvcTest/onLogin`
    and the `modelattribute` name to `loginInfo`, as follows:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`login.jsp`文件的内容更改为将表单提交到`/SpringMvcTest/onLogin`，并将`modelattribute`名称更改为`loginInfo`，如下所示：
- en: '[PRE9]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Also, add the `<h1>${error}</h1>` JSTL expression to display the error message.
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，添加`<h1>${error}</h1>` JSTL表达式以显示错误信息。
- en: 'Create a JSP file named `greetings.jsp` and add the following lines:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packt.controller`目录下创建一个名为`greetings.jsp`的JSP文件，并添加以下行：
- en: '[PRE10]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the browser, enter `http://localhost:8080/SpringMvcTest/`; this will open
    the login page. On the login page, do not enter any value and just click on **Submit**.
    It will show the **invalid login name** error message. Now, enter `junit` in the
    **User Id** field and `password` in the **Password** field and hit *Enter*. The
    application will greet you with the message shown in the following screenshot:![Playing
    with Spring MVC](img/00111.jpeg)
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中输入`http://localhost:8080/SpringMvcTest/`；这将打开登录页面。在登录页面，不要输入任何值，只需点击**提交**。它将显示**无效登录名**错误信息。现在，在**用户ID**字段中输入`junit`，在**密码**字段中输入`password`并按*Enter*。应用程序将使用以下截图所示的消息问候你：![与Spring
    MVC玩耍](img/00111.jpeg)
- en: 'We can unit test the `controller` class. The following are the steps:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以对`controller`类进行单元测试。以下是一些步骤：
- en: Create a `LoginControllerTest.java` class in `com.packt.controller`.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packt.controller`目录下创建一个`LoginControllerTest.java`类。
- en: 'Using the following code, add a test to check that when the user ID is null,
    the error message is thrown:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码，添加一个测试来检查当用户ID为null时，是否会抛出错误信息：
- en: '[PRE11]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Add another test to check invalid passwords, as follows:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加另一个测试来检查无效密码，如下所示：
- en: '[PRE12]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Add a `happyPath` test, as follows:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`happyPath`测试，如下所示：
- en: '[PRE13]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This is just an example of Spring MVC, so we checked the username and password
    with the hardcoded constants. In the real world, a service looks up the database
    for the user and returns an error message; the service can be autowired to the
    controller. This way, we can unit test the controller and the service layer.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个Spring MVC的示例，所以我们使用硬编码的常量来检查用户名和密码。在现实世界中，服务会查询数据库以获取用户信息，并返回错误信息；服务可以被自动注入到控制器中。这样，我们可以对控制器和服务层进行单元测试。
- en: Summary
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter explained the unit testing strategy for the presentation layer
    and provided examples on front controller servlets and Spring MVC.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 本章解释了表示层的单元测试策略，并提供了前端控制器servlet和Spring MVC的示例。
- en: By now, you should be able to unit test the web tier components and isolate
    the view components from the presentation logic.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你应该能够对Web层组件进行单元测试，并将视图组件从表示逻辑中隔离出来。
- en: The next chapter will cover the unit testing of the database layer.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将介绍数据库层的单元测试。
