- en: Chapter 7. Unit Testing the Web Tier
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"If you don''t like unit testing your product, most likely your customers won''t
    like to test it either."'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Anonymous
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Enterprise applications follow the **N-tier architecture model** to handle
    numerous nonfunctional concerns such as upgradability, scalability, and maintainability.
    The best design approach is to decouple the tiers from each other; this allows
    scaling out a tier without affecting another tier, or refactoring code in one
    tier without affecting the other tiers. Usually, any web application contains
    three tiers: presentation, business logic, and a database tier. This chapter deals
    with unit testing the web tier or presentation layer. The next chapters cover
    the application and database layers.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Unit testing a servlet controller in MVC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding what to test in the presentation layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit testing servlets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Model View Controller** (**MVC**) is a widely used web development pattern.
    MVC pattern defines three interconnected components: model, view, and controller.'
  prefs: []
  type: TYPE_NORMAL
- en: The model represents the application data, logic, or business rules.
  prefs: []
  type: TYPE_NORMAL
- en: A view is a representation of information or model. A model can have multiple
    views; for example, the marks of a student can be represented in a tabular format
    or on a graphical chart.
  prefs: []
  type: TYPE_NORMAL
- en: The controller accepts the client request and initiates commands to either update
    the model or change the view.
  prefs: []
  type: TYPE_NORMAL
- en: The controller controls the flow of the application. In JEE applications, a
    controller is usually implemented as a servlet. A controller servlet intercepts
    requests and then maps each request to an appropriate handler resource. In this
    section, we will build a classic MVC front controller servlet to redirect requests
    to views.
  prefs: []
  type: TYPE_NORMAL
- en: Requests with only a context path, such as `http://localhost:8080/context/`,
    are routed to the `login.jsp` page, all home page requests (with URL `/home.do`)
    are routed to the `home.jsp` page, and all other requests are routed to the `error.jsp`
    page.
  prefs: []
  type: TYPE_NORMAL
- en: Building and unit testing a J2EE web application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow the ensuing steps to build a web application and test the controller
    logic:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a dynamic web project named `DemoServletTest` in Eclipse.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a controller servlet named `com.packt.servlet.DemoController`, and add
    the following lines to the `doGet` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This method gets the servlet path from the request and matches the path with
    `/` tokens. When no match is found, then the `doGet` method sets an error attribute
    to the request.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create three JSP files: `login.jsp`, `home.jsp`, and `error.jsp`. Modify the
    `error.jsp` file, and add the following scriptlet to display the error message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `web.xml` file to map all requests to `DemoController`. Add the
    following lines of code to the `web.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `demo` servlet maps the `url-pattern` tag.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The application is ready, but how do we unit test the controller logic?
  prefs: []
  type: TYPE_NORMAL
- en: We cannot instantiate the `HttpServletRequest` or `HttpServletResponse` objects.
    We can mock the `HttpServletRequest` or `HttpServletResponse` objects using Mockito.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a test class named `DemoControllerTest` and add the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the `request` and `response` objects are mocked using mockito and
    then expectations are set to get `ServletPath`, and `verify` is used to check
    the view name returned by the controller. We added three tests to verify the controller
    logic: one to check the default context path, one to check the `home.do` URL,
    and the other to verify the error condition.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a Tomcat server instance from the server view (right-click on the server
    view and create a new server; from the server wizard choose Tomcat and set the
    runtime configuration) and run the application. Open the browser and go to `http://localhost:8080/DemoServletTest/`,
    and check that the application opens the **Login page**. The following is the
    browser output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building and unit testing a J2EE web application](img/00107.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Go to `http://localhost:8080/DemoServletTest/home.do`; it will open the **Home
    page**. The following is the browser output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building and unit testing a J2EE web application](img/00108.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Go to any other URL, such as `http://localhost:8080/DemoServletTest/abc`. It
    will open an error page and display an error message. The following is the error
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building and unit testing a J2EE web application](img/00109.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The results of the preceding browser verify that our JUnit tests work fine.
  prefs: []
  type: TYPE_NORMAL
- en: '`DemoServletTest` acts as a **front controller**. A front controller is a design
    pattern where a single servlet handles all web requests and routes them to other
    controllers or handlers for actual processing. All dynamic web applications written
    in the Java or Servlet API need a front controller servlet to handle HTTP requests,
    so all projects write logically duplicate code to handle requests through the
    front controller servlets.'
  prefs: []
  type: TYPE_NORMAL
- en: Spring MVC was built to provide a flexible framework for web application developers.
    Spring's `DispatcherServlet` acts as the front controller; similar to the `DemoServletTest`
    test, it receives all incoming requests and delegates the processing of the requests
    to handlers. It allows developers to concentrate on business logic rather than
    work on the boilerplate of a custom front controller. The next section describes
    the Spring MVC architecture and how web applications can be unit tested using
    Spring MVC.
  prefs: []
  type: TYPE_NORMAL
- en: Playing with Spring MVC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Spring MVC, the following is a pattern of a simplified request handling
    mechanism:'
  prefs: []
  type: TYPE_NORMAL
- en: '`DispatcherServlet` receives a request and confers the request with handler
    mappings to find out which controller can handle the request, and then passes
    the request to that controller.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The controller performs the business logic (can delegate the request to a service
    or business logic processor) and returns some information back to `DispatcherServlet`
    for user display or response. Instead of sending the information (model) directly
    to the user, the controller returns a view name that can render the model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`DispatcherServlet` then resolves the physical view from the view name and
    passes the model object to the view. This way, `DispatcherServlet` is decoupled
    from the view implementation.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The view renders the model. A view could be a JSP page, a servlet, a PDF file,
    an excel report, or any presentable component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following sequence diagram represents the flow and interaction of Spring
    MVC components:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Playing with Spring MVC](img/00110.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We will build a Spring web application and unit test the code using JUnit.
    The following are the steps to be performed:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch Eclipse and create a dynamic web project named `SpringMvcTest`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `web.xml` and enter the following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The dispatcher is named `DispatcherServlet`, and it maps all requests. Note
    the `contextConfigLocation` parameter. This indicates that the Spring beans are
    defined in `/WEB-INF/dispatcher-servlet.xml`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create an XML file named `dispatcher-servlet.xml` in `WEB-INF` and add the
    following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This XML defines a Spring view resolver. Any view will be found under the `/WEB-INF/pages`
    location with the `.jsp` suffix, and all beans are configured under the `com.packt`
    package with Spring annotations.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create a class named `LoginInfo` in the `com.packt.model` package. This class
    represents the login information. Add two private `String` fields, `userId` and
    `password`, and generate the getters and setters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a JSP page named `login.jsp` under `/WEB-INF/view`, and add the following
    lines to create a form using the Spring tag library. Modify the form and add normal
    HTML input for username and password:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a controller class named `com.packt.controller.LoginController` to handle
    login requests. Add the following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `@Controller` annotation indicates that the class is a Spring MVC controller
    class. In `smapl-servlet.xml`, we defined `<context:component-scan base-package="com.packt"
    />`, so Spring will scan this `@Controller` annotation and create a bean. The
    `@RequestMapping` annotation maps any request with the default path `/SpringMvcTest/`
    or `/SpringMvcTest/login` to the `onStartUp` method. This method returns a logical
    view name `login`. The view resolver defined in the XML file will map the login
    request to the physical view `login.jsp` page under `/WEB-INF/pages`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create another method in the `Login` class to handle the login and submit requests,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `onLogin` method is mapped with `/onLogin`. The `@ModelAttribute("loginInfo")`
    method is the model submitted from the `login.jsp` form. This method checks whether
    the username is `junit` and password is `password`. If the user ID or password
    does not match, then an error message is shown on the login page, otherwise, the
    `greetings` view is opened.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Change the content of the `login.jsp` file to submit the form to `/SpringMvcTest/onLogin`
    and the `modelattribute` name to `loginInfo`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Also, add the `<h1>${error}</h1>` JSTL expression to display the error message.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a JSP file named `greetings.jsp` and add the following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the browser, enter `http://localhost:8080/SpringMvcTest/`; this will open
    the login page. On the login page, do not enter any value and just click on **Submit**.
    It will show the **invalid login name** error message. Now, enter `junit` in the
    **User Id** field and `password` in the **Password** field and hit *Enter*. The
    application will greet you with the message shown in the following screenshot:![Playing
    with Spring MVC](img/00111.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can unit test the `controller` class. The following are the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a `LoginControllerTest.java` class in `com.packt.controller`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Using the following code, add a test to check that when the user ID is null,
    the error message is thrown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add another test to check invalid passwords, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `happyPath` test, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is just an example of Spring MVC, so we checked the username and password
    with the hardcoded constants. In the real world, a service looks up the database
    for the user and returns an error message; the service can be autowired to the
    controller. This way, we can unit test the controller and the service layer.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter explained the unit testing strategy for the presentation layer
    and provided examples on front controller servlets and Spring MVC.
  prefs: []
  type: TYPE_NORMAL
- en: By now, you should be able to unit test the web tier components and isolate
    the view components from the presentation logic.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will cover the unit testing of the database layer.
  prefs: []
  type: TYPE_NORMAL
