["```java\n    <properties> \n      <maven.compiler.source>1.8</maven.compiler.source> \n      <maven.compiler.target>1.8</maven.compiler.target> \n    </properties> \n```", "```java\n    public class SnsEventHandler  \n      implements RequestHandler<SNSEvent, Object> { \n        @Override \n        public Object handleRequest \n         (SNSEvent request, Context context) { \n           LambdaLogger logger = context.getLogger(); \n           final String message = request.getRecords().get(0) \n            .getSNS().getMessage(); \n           logger.log(\"Handle message '\" + message + \"'\"); \n           return null; \n    } \n```", "```java\n    <properties> \n      <aws.java.sdk.version>[1.11, 2.0.0)</aws.java.sdk.version> \n    </properties> \n    <dependencies> \n      <dependency> \n        <groupId>com.amazonaws</groupId> \n        <artifactId>aws-java-sdk-sns</artifactId> \n        <version>${aws.java.sdk.version}</version> \n      </dependency> \n      <dependency> \n        <groupId>com.amazonaws</groupId> \n        <artifactId>aws-lambda-java-core</artifactId> \n        <version>1.1.0</version> \n      </dependency> \n      <dependency> \n        <groupId>com.amazonaws</groupId> \n        <artifactId>aws-lambda-java-events</artifactId> \n        <version>1.3.0</version> \n      </dependency> \n    </dependencies> \n```", "```java\n    final List<Recipient> recipients =  new CloudNoticeDAO(false) \n      .getRecipients(); \n    final List<String> emailAddresses = recipients.stream() \n      .filter(r -> \"email\".equalsIgnoreCase(r.getType())) \n      .map(r -> r.getAddress()) \n      .collect(Collectors.toList()); \n    final List<String> phoneNumbers = recipients.stream() \n      .filter(r -> \"sms\".equalsIgnoreCase(r.getType())) \n      .map(r -> r.getAddress()) \n      .collect(Collectors.toList()); \n```", "```java\n    final SesClient sesClient = new SesClient(); \n    final SnsClient snsClient = new SnsClient(); \n\n    sesClient.sendEmails(emailAddresses, \"j9bp@steeplesoft.com\", \n     \"Cloud Notification\", message); \n    snsClient.sendTextMessages(phoneNumbers, message); \n    sesClient.shutdown(); \n    snsClient.shutdown(); \n```", "```java\n    <properties> \n      <sqlite4java.version>1.0.392</sqlite4java.version> \n    </properties> \n    <dependency> \n      <groupId>com.amazonaws</groupId> \n      <artifactId>aws-java-sdk-dynamodb</artifactId> \n      <version>${aws.java.sdk.version}</version> \n    </dependency> \n    <dependency> \n      <groupId>com.amazonaws</groupId> \n      <artifactId>DynamoDBLocal</artifactId> \n      <version>${aws.java.sdk.version}</version> \n      <optional>true</optional> \n    </dependency> \n    <dependency> \n      <groupId>com.almworks.sqlite4java</groupId> \n      <artifactId>sqlite4java</artifactId> \n      <version>${sqlite4java.version}</version> \n      <optional>true</optional> \n    </dependency> \n```", "```java\n    public class Recipient { \n      private String id; \n      private String type = \"SMS\"; \n      private String address = \"\"; \n\n      // Constructors... \n\n      @DynamoDBHashKey(attributeName = \"_id\") \n      public String getId() { \n        return id; \n      } \n\n      @DynamoDBAttribute(attributeName = \"type\") \n      public String getType() { \n        return type; \n      } \n\n      @DynamoDBAttribute(attributeName=\"address\") \n      public String getAddress() { \n        return address; \n      } \n      // Setters omitted to save space \n    } \n```", "```java\n    protected final AmazonDynamoDB ddb; \n    protected final DynamoDBMapper mapper; \n    public CloudNoticeDAO(boolean local) { \n      ddb = local ? DynamoDBEmbedded.create().amazonDynamoDB() \n       : AmazonDynamoDBClientBuilder.defaultClient(); \n      verifyTables(); \n      mapper = new DynamoDBMapper(ddb); \n    } \n```", "```java\n    public void saveRecipient(Recipient recip) { \n      if (recip.getId() == null) { \n        recip.setId(UUID.randomUUID().toString()); \n      } \n      mapper.save(recip); \n    } \n```", "```java\n    public List<Recipient> getRecipients() { \n      return mapper.scan(Recipient.class,  \n       new DynamoDBScanExpression()); \n    } \n\n    public void deleteRecipient(Recipient recip) { \n      mapper.delete(recip); \n    } \n```", "```java\n    private void verifyTables() { \n      try { \n        ddb.describeTable(TABLE_NAME); \n      } catch (ResourceNotFoundException rnfe) { \n          createRecipientTable(); \n      } \n    } \n\n    private void createRecipientTable() { \n      CreateTableRequest request = new CreateTableRequest() \n       .withTableName(TABLE_NAME) \n       .withAttributeDefinitions( \n         new AttributeDefinition(\"_id\", ScalarAttributeType.S)) \n       .withKeySchema( \n         new KeySchemaElement(\"_id\", KeyType.HASH)) \n       .withProvisionedThroughput(new  \n         ProvisionedThroughput(10L, 10L)); \n\n      ddb.createTable(request); \n      try { \n        TableUtils.waitUntilActive(ddb, TABLE_NAME); \n      } catch (InterruptedException  e) { \n        throw new RuntimeException(e); \n      } \n    } \n```", "```java\n    private final CloudNoticeDAO dao = new CloudNoticeDAO(true); \n    @Test \n    public void addRecipient() { \n      Recipient recip = new Recipient(\"SMS\", \"test@example.com\"); \n      dao.saveRecipient(recip); \n      List<Recipient> recipients = dao.getRecipients(); \n      Assert.assertEquals(1, recipients.size()); \n    } \n```", "```java\n    private final AmazonSimpleEmailService client =  \n      AmazonSimpleEmailServiceClientBuilder.defaultClient(); \n    public void sendEmails(List<String> emailAddresses, \n      String from, \n      String subject, \n      String emailBody) { \n        Message message = new Message() \n         .withSubject(new Content().withData(subject)) \n         .withBody(new Body().withText( \n           new Content().withData(emailBody))); \n        getChunkedEmailList(emailAddresses) \n         .forEach(group -> \n           client.sendEmail(new SendEmailRequest() \n            .withSource(from) \n            .withDestination( \n              new Destination().withBccAddresses(group)) \n               .withMessage(message))); \n        shutdown(); \n    } \n\n    public void shutdown() { \n      client.shutdown(); \n    } \n```", "```java\n    private List<List<String>> getChunkedEmailList( \n      List<String> emailAddresses) { \n        final int numGroups = (int) Math.round(emailAddresses.size() / \n         (MAX_GROUP_SIZE * 1.0) + 0.5); \n        return IntStream.range(0, numGroups) \n          .mapToObj(group ->  \n            emailAddresses.subList(MAX_GROUP_SIZE * group, \n            Math.min(MAX_GROUP_SIZE * group + MAX_GROUP_SIZE, \n            emailAddresses.size()))) \n             .collect(Collectors.toList()); \n    } \n```", "```java\n    public void sendTextMessages(List<String> phoneNumbers,  \n      String message) { \n        String arn = createTopic(UUID.randomUUID().toString()); \n        phoneNumbers.forEach(phoneNumber ->  \n          subscribeToTopic(arn, \"sms\", phoneNumber)); \n        sendMessage(arn, message); \n        deleteTopic(arn); \n    } \n```", "```java\n    private String createTopic(String arn) { \n      return snsClient.createTopic( \n        new CreateTopicRequest(arn)).getTopicArn(); \n    } \n```", "```java\n    private SubscribeResult subscribeToTopic(String arn, \n      String protocol, String endpoint) { \n        return snsClient.subscribe( \n          new SubscribeRequest(arn, protocol, endpoint)); \n    } \n```", "```java\n    public void sendMessage(String topic, String message) { \n      snsClient.publish(topic, message); \n    } \n```", "```java\n    private DeleteTopicResult deleteTopic(String arn) { \n      return snsClient.deleteTopic(arn); \n    } \n```", "```java\n    <plugin> \n      <groupId>org.apache.maven.plugins</groupId> \n      <artifactId>maven-shade-plugin</artifactId> \n      <version>3.0.0</version> \n      <executions> \n        <execution> \n            <phase>package</phase> \n            <goals> \n                <goal>shade</goal> \n            </goals> \n            <configuration> \n                <finalName> \n                    cloudnotice-function-${project.version} \n                </finalName> \n            </configuration> \n        </execution> \n      </executions> \n    </plugin> \n```", "```java\n    private FXMLLoader fxmlLoader; \n    @Override \n    public void start(final Stage stage) throws Exception { \n      fxmlLoader = new FXMLLoader(getClass() \n       .getResource(\"/fxml/manager.fxml\")); \n      Parent root = fxmlLoader.load(); \n      // ... \n    } \n\n    @Override \n    public void stop() throws Exception { \n      CloudNoticeManagerController controller =  \n        (CloudNoticeManagerController) fxmlLoader.getController(); \n      controller.cleanup(); \n      super.stop();  \n    } \n```", "```java\n    private final ObservableList<Recipient> recips =  \n      FXCollections.observableArrayList(); \n    private final ObservableList<String> types =  \n      FXCollections.observableArrayList(\"SMS\", \"Email\"); \n    private final ObservableList<String> topics =  \n      FXCollections.observableArrayList(); \n```", "```java\n    public void initialize(URL url, ResourceBundle rb) { \n      recips.setAll(dao.getRecipients()); \n      topics.setAll(sns.getTopics()); \n\n      type.setItems(types); \n      recipList.setItems(recips); \n      topicCombo.setItems(topics); \n```", "```java\n    recipList.setCellFactory(p -> new ListCell<Recipient>() { \n      @Override \n      public void updateItem(Recipient recip, boolean empty) { \n        super.updateItem(recip, empty); \n        if (!empty) { \n          setText(String.format(\"%s - %s\", recip.getType(),  \n            recip.getAddress())); \n          } else { \n              setText(null); \n          } \n        } \n    }); \n```", "```java\n    recipList.getSelectionModel().selectedItemProperty() \n            .addListener((obs, oldRecipient, newRecipient) -> { \n        type.valueProperty().setValue(newRecipient != null ?  \n            newRecipient.getType() : \"\"); \n        address.setText(newRecipient != null ?  \n            newRecipient.getAddress() : \"\"); \n    }); \n```", "```java\n    <Button mnemonicParsing=\"false\"  \n      onAction=\"#addRecipient\" text=\"+\" /> \n    <Button mnemonicParsing=\"false\"  \n      onAction=\"#removeRecipient\" text=\"-\" /> \n```", "```java\n    @FXML \n    public void addRecipient(ActionEvent event) { \n      final Recipient recipient = new Recipient(); \n      recips.add(recipient); \n      recipList.getSelectionModel().select(recipient); \n      type.requestFocus(); \n    } \n```", "```java\n    @FXML \n    public void removeRecipient(ActionEvent event) { \n      final Recipient recipient = recipList.getSelectionModel() \n       .getSelectedItem(); \n      dao.deleteRecipient(recipient); \n      recips.remove(recipient); \n    } \n```", "```java\n    @FXML \n    public void saveChanges(ActionEvent event) { \n      final Recipient recipient =  \n        recipList.getSelectionModel().getSelectedItem(); \n      recipient.setType(type.getValue()); \n      recipient.setAddress(address.getText()); \n      dao.saveRecipient(recipient); \n      recipList.refresh(); \n    } \n```", "```java\n    @FXML \n    public void cancelChanges(ActionEvent event) { \n      final Recipient recipient = recipList.getSelectionModel() \n        .getSelectedItem(); \n      type.setValue(recipient.getType()); \n      address.setText(recipient.getAddress()); \n    } \n```", "```java\n    @FXML \n    public void sendMessage(ActionEvent event) { \n      sns.sendMessage(topicCombo.getSelectionModel() \n        .getSelectedItem(), messageText.getText()); \n      messageText.clear(); \n    } \n\n    @FXML \n    public void cancelMessage(ActionEvent event) { \n      messageText.clear(); \n    } \n```", "```java\n    [default] \n    aws_access_key_id = AKIAISQVOILE6KCNQ7EQ \n    aws_secret_access_key = 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 \n```", "```java\n    [default] \n    region = us-east-1 \n```"]