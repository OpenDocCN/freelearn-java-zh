- en: Chapter 1. Running Your First Gradle Task
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章：运行您的第一个Gradle任务
- en: We are embarking on a fast-paced ride to learn the *Gradle Essentials*. To take
    a gentle start, we will first install Gradle. Then, we will get friendly with
    the Gradle's command-line interface by looking at the usage of the `gradle` command.
    Also, by the end of this chapter, we would have run our first Gradle build script.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将开始一段快速学习**Gradle基础知识**的旅程。为了温和地开始，我们首先将安装Gradle。然后，我们将通过查看`gradle`命令的用法来熟悉Gradle的命令行界面。此外，到本章结束时，我们将运行我们的第一个Gradle构建脚本。
- en: Building a software artifact is a complex process involving various activities
    such as compiling source code, running automated tests, packaging distributable
    files, and so on. These activities are further split into many steps, often dependent
    on the execution order, fetching dependent artifacts, resolving configuration
    variables, and so on. Executing all these activities manually is cumbersome and
    often error-prone. A good build automation tool helps us reduce the effort and
    time it takes to build correct artifacts in a repeatable manner.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 构建软件工件是一个复杂的过程，涉及各种活动，如编译源代码、运行自动化测试、打包可分发文件等。这些活动进一步分解成许多步骤，通常依赖于执行顺序、获取依赖工件、解析配置变量等。手动执行所有这些活动既繁琐又容易出错。一个好的构建自动化工具可以帮助我们以可重复的方式减少构建正确工件所需的时间和精力。
- en: Gradle is an advanced build automation tool that brings the best from various
    proven build tools and innovates on top of them. Gradle can be used to produce
    artifacts such as web applications, application libraries, documentation, static
    sites, mobile apps, command lines, and desktop applications. Gradle can be used
    to build projects based on various languages and technology stacks such as Java,
    C/C++, Android, Scala, Groovy, Play, Grails, and many more. As **Java Virtual
    Machine** (**JVM**) happens to be one of the first class supported platforms by
    Gradle, the examples in this book will mostly focus on building Java-based projects.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Gradle是一个高级构建自动化工具，它从各种经过验证的构建工具中汲取精华，并在其基础上进行创新。Gradle可以用于生成诸如Web应用程序、应用程序库、文档、静态站点、移动应用、命令行和桌面应用程序等工件。Gradle可以用于基于各种语言和技术堆栈的项目构建，例如Java、C/C++、Android、Scala、Groovy、Play、Grails等。由于**Java虚拟机**（**JVM**）恰好是Gradle支持的第一类平台之一，本书中的示例将主要关注构建基于Java的项目。
- en: Gradle gives us full control over build just like Ant but without ever needing
    to repeat ourselves by providing intelligent defaults in the form of conventions.
    Gradle truly works by conventions over configuration, just like Maven. However,
    it never gets in our way when we need to deviate. Also this puts it in complete
    contrast with Maven. Gradle attempts to maintain the right balance between conventions
    and configurability.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Gradle像Ant一样让我们对构建有完全的控制权，但通过提供智能默认值（以约定形式）来避免重复。Gradle真正通过约定而非配置来工作，就像Maven一样。然而，当我们需要偏离时，它永远不会妨碍我们。这也与Maven形成了鲜明的对比。Gradle试图在约定和可配置性之间保持适当的平衡。
- en: The previous generation of build tools, such as Ant and Maven, chose XML to
    represent the build logic. While XML is human-readable, it is more of a machine-friendly
    format (easier to be read/written by programs). It is great for representing and
    exchanging hierarchical data, but when it comes to writing any logic, even the
    simplest logic can easily take hundreds of lines. On the other hand, a Gradle
    build can be configured using very human-friendly Groovy DSL. Groovy is a powerful,
    expressive, and low ceremony dynamic language and is a perfect fit for build scripts.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 前一代构建工具，如Ant和Maven，选择XML来表示构建逻辑。虽然XML是可读的，但它更多的是一种机器友好的格式（更容易被程序读取/写入）。它非常适合表示和交换层次化数据，但当涉及到编写任何逻辑时，即使是简单的逻辑也可能会轻易地占用数百行。另一方面，Gradle构建可以通过非常人性化的Groovy
    DSL进行配置。Groovy是一种强大、表达性强且低仪式的动态语言，非常适合构建脚本。
- en: Gradle itself is a **JVM** application written in Java and Groovy. Since Gradle
    runs on the JVM, it runs the same way on Windows, Mac OS X and Linux. Gradle also
    boasts an advanced dependency resolution system and can resolve dependencies from
    the existing Maven and Ivy repositories or even a file system.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Gradle本身是一个用Java和Groovy编写的**JVM**应用程序。由于Gradle在JVM上运行，因此它在Windows、Mac OS X和Linux上运行方式相同。Gradle还拥有先进的依赖关系解析系统，可以从现有的Maven和Ivy仓库或甚至文件系统中解析依赖关系。
- en: Over the years Gradle has matured into a very stable open source project with
    active contributors and commercial backing. The rich plugin ecosystem and vibrant
    community makes Gradle an excellent choice for a variety of projects. Gradle already
    has an impressive list of adopters, which includes tech giants such as Google
    Android, LinkedIn, Unity 3D, Netflix and many more. Open source libraries and
    frameworks such as Spring, Hibernate, and Grails are using Gradle to power their
    builds.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 经过多年的发展，Gradle已经成长为一个非常稳定的开源项目，拥有活跃的贡献者和商业支持。丰富的插件生态系统和充满活力的社区使Gradle成为各种项目的绝佳选择。Gradle已经拥有一个令人印象深刻的采用者名单，其中包括像Google
    Android、LinkedIn、Unity 3D、Netflix等科技巨头。开源库和框架，如Spring、Hibernate和Grails，正在使用Gradle来驱动它们的构建过程。
- en: Installing Gradle
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Gradle
- en: Before we move forward with running Gradle, we must have it installed on our
    machine. There are multiple ways through which Gradle can be installed and updated.
    We will first see a more manual way to install Gradle and then take a quick look
    at installing it via some commonly used package managers. We can choose any one
    method that fits the bill. Irrespective of the way we install Gradle, we must
    meet the following prerequisite.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们运行Gradle之前，我们必须在我们的机器上安装它。Gradle可以通过多种方式安装和更新。我们将首先了解一种更手动的方法来安装Gradle，然后简要地看看通过一些常用的包管理器安装Gradle的方法。我们可以选择任何一种适合的方法。无论我们以何种方式安装Gradle，我们都必须满足以下先决条件。
- en: 'Gradle needs **Java Runtime Environment** (**JRE**) 6 or **Java Development
    Kit** (**JDK**) 1.6 or higher. There is no other dependency. We recommend having
    JDK installed. To verify this, on the command line, we can check the Java version
    with the following command:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Gradle需要**Java运行时环境**（**JRE**）6或**Java开发工具包**（**JDK**）1.6或更高版本。没有其他依赖项。我们建议安装JDK。要验证这一点，我们可以在命令行中使用以下命令检查Java版本：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If we don't see the output more or less like the one shown in the preceding
    command, there is problem with our JDK installation.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们没有看到与前面命令中显示的输出大致相同的内容，那么我们的JDK安装存在问题。
- en: Note
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The latest JDK can be downloaded from the following URL:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 可以从以下URL下载最新的JDK：
- en: '[http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html)'
- en: Installing manually
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 手动安装
- en: If we want a finer control over the installation then this is a suitable route.
    This could be the case, when we cannot use the package managers, want very specific
    binaries to be downloaded and installed, or behind corporate firewalls where automatic
    downloading by package managers is not allowed. We need to download the Gradle
    binaries and make them available for use on the command line.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要对安装有更精细的控制，那么这是一个合适的方法。这可能是在我们无法使用包管理器、需要下载和安装非常具体的二进制文件，或者在公司防火墙后面（自动下载包管理器不被允许）的情况下。我们需要下载Gradle的二进制文件，并在命令行上使它们可用于使用。
- en: The latest Gradle distribution can be downloaded from [http://www.gradle.org/downloads](http://www.gradle.org/downloads).
    As of writing the latest version is 2.9.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 可以从[http://www.gradle.org/downloads](http://www.gradle.org/downloads)下载最新的Gradle发行版。截至编写时，最新版本是2.9。
- en: 'Gradle binary distribution comes in two flavors as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Gradle二进制发行版有两种形式，如下所示：
- en: '`gradle-2.9-all.zip`: This contains binaries, sources, and documentation'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gradle-2.9-all.zip`：此文件包含二进制文件、源代码和文档'
- en: '`gradle-2.9-bin.zip`: This contains binaries only'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gradle-2.9-bin.zip`：此文件仅包含二进制文件'
- en: We can download any of the above depending on what we need. Also, this is an
    OS-independent zip so the same zip can be extracted on Mac OS X, Windows, and
    Linux. The next section makes the Gradle command available on the command line.
    This section is dependent on the OS we use.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以根据需要下载上述任何一种。此外，这是一个与操作系统无关的zip文件，因此相同的zip文件可以在Mac OS X、Windows和Linux上提取。下一节将Gradle命令添加到命令行。本节取决于我们使用的操作系统。
- en: Installing on Mac OS X and Linux
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Mac OS X和Linux上安装
- en: 'Let''s say we extracted the downloaded zip as `~/gradle-2.9/`. Now, we just
    need to add the following two lines at the end of `.bashrc`/, `.bash_profile`/,
    or `.zshrc`, depending on the OS and the shell that we use:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们将下载的zip文件提取为`~/gradle-2.9/`。现在，我们只需根据操作系统和使用的shell，在`.bashrc`/、`.bash_profile`/或`.zshrc`的末尾添加以下两行：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Restart the terminal or source the modified file to have the change take effect.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 重新启动终端或源修改后的文件以使更改生效。
- en: Installing on Windows
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Windows上安装
- en: 'Let''s say we extracted the zip as `C:\gradle-2.9`, then perform the following
    steps:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们将 zip 文件解压为 `C:\gradle-2.9`，然后执行以下步骤：
- en: Open the Start menu, right click on **Computer** and select **Properties**.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开开始菜单，右键单击 **计算机** 并选择 **属性**。
- en: On **Advanced system settings**, select the **Advanced** tab, and then select
    **Environment Variables...**.![Installing on Windows](img/00002.jpeg)
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **高级系统设置** 中，选择 **高级** 选项卡，然后选择 **环境变量...**。[![在 Windows 上安装](img/00002.jpeg)]
- en: Click on **New**.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **新建**。
- en: Create a `GRADLE_HOME` environment variable with the value `C:\gradle-2.9`.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个值为 `C:\gradle-2.9` 的 `GRADLE_HOME` 环境变量。
- en: Tip
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以从您在 [http://www.packtpub.com](http://www.packtpub.com) 的账户中下载示例代码文件，以获取您购买的所有
    Packt 出版物的书籍。如果您在其他地方购买了此书，您可以访问 [http://www.packtpub.com/support](http://www.packtpub.com/support)
    并注册以将文件直接通过电子邮件发送给您。
- en: '![Installing on Windows](img/00003.jpeg)'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![在 Windows 上安装](img/00003.jpeg)'
- en: Tip
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: In future when we download the later version of Gradle, we would need to change
    on this value to point to the correct folder.
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在未来，当我们下载 Gradle 的后续版本时，我们需要更改此值以指向正确的文件夹。
- en: Edit (or add if not already there) the `PATH` environment variable. At the end
    of its value, append `;%GRADLE_HOME%\bin` (add a semicolon if multiple path entries
    exist).
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑（或添加，如果尚未存在）`PATH` 环境变量。在其值的末尾，追加 `;%GRADLE_HOME%\bin`（如果存在多个路径条目，请添加分号）。
- en: Alternate methods of installing Gradle
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Gradle 的替代方法
- en: Although the manual installation gives absolute control over the installation
    process, various tasks such as downloading and extracting the right version, upgrading
    to the latest versions, uninstalling, and editing environment variables quickly
    become cumbersome and error-prone. That is why many people prefer package managers
    to control the whole process.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然手动安装可以完全控制安装过程，但下载和提取正确版本、升级到最新版本、卸载和编辑环境变量等任务很快就会变得繁琐且容易出错。这就是为什么许多人更喜欢使用包管理器来控制整个过程。
- en: Installing via OS-specific package managers
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过操作系统特定的包管理器安装
- en: While installing manually, as mentioned in the previous section, is very easy,
    we can make it super-easy by using a package manager.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在手动安装时，如前文所述，非常简单，我们可以通过使用包管理器使其变得超级简单。
- en: Some Linux distributions like Ubuntu ship with their package manager, Mac OS
    X, Windows don't have any package manager installed by default. However, luckily,
    there are multiple package managers available for both platforms. We will see
    the example of Homebrew on Mac and Chocolatey on Windows.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 Linux 发行版，如 Ubuntu，随其包管理器提供，而 Mac OS X 和 Windows 默认没有安装任何包管理器。然而，幸运的是，这两个平台都有多个包管理器可用。我们将看到
    Mac 上的 Homebrew 和 Windows 上的 Chocolatey 的示例。
- en: Mac OS X
  id: totrans-45
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Mac OS X
- en: 'Make sure we have Homebrew installed. If it is, installing Gradle is only a
    matter of using the following command:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 确保已安装 Homebrew。如果是的话，安装 Gradle 只需使用以下命令：
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: More details on Homebrew can be found at [http://brew.sh](http://brew.sh).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于 Homebrew 的详细信息可以在 [http://brew.sh](http://brew.sh) 找到。
- en: Linux (Ubuntu)
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Linux (Ubuntu)
- en: 'Using the built in package manager on Ubuntu, which is called **Advanced Packaging
    Tool** (**APT**), we can install Gradle with the following command:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Ubuntu 上使用内置的包管理器，称为 **高级包装工具**（**APT**），我们可以使用以下命令安装 Gradle：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Windows
  id: totrans-53
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Windows
- en: 'If we have Chocolatey installed, installing Gradle is just a command away:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们已安装 Chocolatey，安装 Gradle 只需一个命令：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: More details on Chocolatey can be found at [https://chocolatey.org](https://chocolatey.org).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于 Chocolatey 的详细信息可以在 [https://chocolatey.org](https://chocolatey.org) 找到。
- en: Installing via SDKMAN
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过 SDKMAN 安装
- en: '**SDKMAN** stands for **the Software Development Kit Manager**. In its own
    words, the website describes it as: *SDKMAN! is a tool for managing parallel versions
    of multiple Software Development Kits on most Unix based systems.*'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**SDKMAN** 代表 **软件开发工具包管理器**。正如其自身所说，网站将其描述为：*SDKMAN! 是一种用于管理大多数基于 Unix 的系统上多个软件开发工具包并行版本的工具。*'
- en: 'The advantage SDKMAN has over other package managers is that we can have multiple
    Gradle versions installed on a system and select a different version for a given
    project. If we have it installed, all we need to do is run following command:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: SDKMAN相对于其他包管理器的优势在于，我们可以在系统上安装多个Gradle版本，并为给定的项目选择不同的版本。如果我们已经安装了它，我们只需要运行以下命令：
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: SDKMAN can be installed from [http://sdkman.io/](http://sdkman.io/).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: SDKMAN可以从[http://sdkman.io/](http://sdkman.io/)安装。
- en: Verifying the installation
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 验证安装
- en: 'In whichever way we choose to install Gradle, it''s a good idea to verify that
    if it''s working before we move ahead. We can do this by simply checking for Gradle''s
    version on the command line:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 无论我们选择哪种方式安装Gradle，在继续之前验证它是否正常工作都是一个好主意。我们可以通过简单地检查命令行上的Gradle版本来完成这个任务：
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If we see output similar to the above, we have Gradle installed correctly on
    our machine.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们看到类似上面的输出，那么我们已经正确地在我们的机器上安装了Gradle。
- en: Tip
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: We can use `-v` instead `--version` to get the same result.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`-v`代替`--version`来得到相同的结果。
- en: Setting JVM options
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置JVM选项
- en: Although it's not required most of the time, but if in case we need to set some
    global options for the JVM that Gradle will use, Gradle provides us a convenient
    way to do that. We can set the `GRADLE_OPTS` environment variable with acceptable
    flags to tune the JVM.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然大多数情况下并不需要，但如果我们需要为Gradle将要使用的JVM设置一些全局选项，Gradle提供了一个方便的方式来完成这个任务。我们可以通过设置`GRADLE_OPTS`环境变量并使用可接受的标志来调整JVM。
- en: Gradle also honors the `JAVA_OPTS` environment variable. However, we need to
    be careful when setting it, as this affects the setting for all the Java programs
    on a machine. Setting that we want to keep common for all the Java apps should
    be done via this variable and those that only need to be applied to Gradle should
    be set via `GRADLE_OPTS`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Gradle也尊重`JAVA_OPTS`环境变量。然而，在设置它时我们需要小心，因为它会影响机器上所有Java程序设置。我们应该通过这个变量设置我们希望对所有Java应用程序保持通用的设置，而那些只需要应用到Gradle的设置应该通过`GRADLE_OPTS`设置。
- en: Tip
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Some commonly used options are `-Xms` and `-Xmx`, which set the minimum and
    maximum heap size of the JVM.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常用的选项是`-Xms`和`-Xmx`，它们设置JVM的最小和最大堆大小。
- en: The Gradle command-line interface
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Gradle命令行界面
- en: Gradle, just like other build tools, is primarily run from a command line. That's
    why it is worth spending some time to get familiar with its command-line interface.
    Typically, a `gradle` command is issued from the root of a project directory with
    some tasks to be executed. Let's say we are in the `hello-gradle` directory, which
    is currently empty.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他构建工具一样，Gradle主要是通过命令行运行的。这就是为什么花些时间熟悉其命令行界面是值得的。通常，一个`gradle`命令是从项目目录的根目录发出的，并执行一些任务。假设我们目前在`hello-gradle`目录中，该目录目前为空。
- en: 'Gradle provides a very simple **command-line interface** (**CLI**), which takes
    the following form:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Gradle提供了一个非常简单的**命令行界面**（**CLI**），其形式如下：
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As we can see, apart from the `gradle` command itself, everything else is optional.
    The `options` tweak the execution of the Gradle whereas `tasks`, which we will
    see in detail later, are the basic units of work. Options are common across all
    projects and are specific to Gradle but tasks may vary depending on the project
    in which the `gradle` command is being run.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，除了`gradle`命令本身之外，其他一切都是可选的。`options`调整Gradle的执行，而`tasks`（我们将在后面详细讨论）是工作的基本单元。选项对所有项目都是通用的，并且特定于Gradle，但任务可能因运行`gradle`命令的项目而异。
- en: 'There are some tasks that are available on all projects. One such task is `help`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 有些任务在所有项目中都是可用的。其中之一就是`help`任务：
- en: '[PRE8]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Gradle is helping us out by telling us how to find all the available tasks
    and list all command-line options. Let''s first check what other tasks are currently
    available on our project. Remember we are still in the empty directory `hello-gradle`:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Gradle通过告诉我们如何查找所有可用的任务和列出所有命令行选项来帮助我们。让我们首先检查一下我们项目当前可用的其他任务。记住我们仍然在空的目录`hello-gradle`中：
- en: '[PRE9]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This shows us some generic tasks that are available even without us adding any
    task to our project. We can try running all these tasks and see the output. We
    will see these tasks in details in the upcoming chapters.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了一些即使我们没有在我们的项目中添加任何任务也能使用的通用任务。我们可以尝试运行所有这些任务并查看输出。我们将在接下来的章节中详细了解这些任务。
- en: The other useful command `gradle help` suggested us to check all the available
    options with the `--help` option.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的命令`gradle help`建议我们使用`--help`选项来检查所有可用的选项。
- en: Tip
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The `help` task is not the same as the `--help` option.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`help`任务与`--help`选项并不相同。'
- en: 'When we run the `gradle --help` command, we get the following output:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行 `gradle --help` 命令时，我们得到以下输出：
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: (The output is truncated for brevity.)
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: （输出被截断以节省空间。）
- en: 'The option has a long form such as `--help` and may have a short from such
    as `-h`. We have already used one option before, that is `--version` or `-v`,
    which prints information about the Gradle version. The following are some commonly
    used options; there are many more options, which can be seen using the `gradle
    --help` command:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 选项有一个长形式，如 `--help`，可能还有一个短形式，如 `-h`。我们之前已经使用了一个选项，即 `--version` 或 `-v`，它会打印有关
    Gradle 版本的信息。以下是一些常用选项；还有更多选项，可以使用 `gradle --help` 命令查看：
- en: '| Options | Description |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 描述 |'
- en: '| --- | --- |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `-b`, `--build-file` | This specifies a build file (default: `build.gradle`)
    |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '`-b`, `--build-file` | 这指定了一个构建文件（默认：`build.gradle`）'
- en: '| `--continue` | This continues task execution even after a task failure |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '`--continue` | 即使任务失败，也会继续任务执行'
- en: '| `-D`, `--system-prop` | This sets the system property of the JVM |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '`-D`, `--system-prop` | 这会设置 JVM 的系统属性'
- en: '| `-d`, `--debug` | This prints debug level logs |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '`-d`, `--debug` | 这会打印调试级别的日志'
- en: '| `--gui` | This starts Gradle GUI |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '`--gui` | 这将启动 Gradle 图形用户界面'
- en: '| `-i`, `--info` | This prints info level logs |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '`-i`, `--info` | 这会打印信息级别的日志'
- en: '| `-P`, `--project-prop` | This adds a property to the project |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '`-P`, `--project-prop` | 这会给项目添加一个属性'
- en: '| `-q`, `--quiet` | This logs only errors |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '`-q`, `--quiet` | 这只记录错误'
- en: '| `-s`, `--stacktrace` | This prints stack traces for exceptions |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '`-s`, `--stacktrace` | 这会打印异常的堆栈跟踪'
- en: '| `-x`, `--exclude-task` | This excludes a specific task |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '`-x`, `--exclude-task` | 这会排除一个特定的任务'
- en: The first Gradle build script
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一个 Gradle 构建脚本
- en: So we are now ready to get our feet wet and see our first Gradle script in action.
    Let's create a file called `build.gradle` in the `hello-gradle` directory. Unless
    the build file path is provided using the `--build-file` option, Gradle treats
    the current directory as a project root and tries to find the `build.gradle` file
    there. If we have used Ant or Maven earlier, we can relate this file with `build.xml`
    or `pom.xml`, respectively.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们现在已经准备好湿脚并看到我们的第一个 Gradle 脚本的实际应用。让我们在 `hello-gradle` 目录中创建一个名为 `build.gradle`
    的文件。除非使用 `--build-file` 选项提供了构建文件路径，否则 Gradle 将当前目录视为项目根目录，并尝试在那里找到 `build.gradle`
    文件。如果我们之前使用过 Ant 或 Maven，我们可以将此文件与 `build.xml` 或 `pom.xml` 相关联。
- en: 'Now, open the `build.gradle` file and let''s declare a task by adding the following
    line:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开 `build.gradle` 文件，让我们通过添加以下行来声明一个任务：
- en: '[PRE11]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We should be able to see this task on the command line as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该在命令行上看到以下任务：
- en: '[PRE12]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Here, we have successfully created a task object called `helloWorld`. Tasks
    are first-class objects in Gradle, which means they have properties and methods
    on them. This gives us tremendous flexibility in terms of customizability and
    programmability of build.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们已经成功创建了一个名为 `helloWorld` 的任务对象。任务在 Gradle 中是一等对象，这意味着它们具有属性和方法。这为我们提供了在构建的可定制性和可编程性方面的巨大灵活性。
- en: 'However, this task actually does not do anything yet. So let''s add some meaningful
    action to this task:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这个任务实际上还没有做任何事情。所以让我们给这个任务添加一些有意义的操作：
- en: '[PRE13]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now from the command line, we can execute this task by issuing the following
    command:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在从命令行，我们可以通过以下命令执行此任务：
- en: '[PRE14]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Notice that we used the `–q` flag to reduce the verbosity in the output. When
    this task is run, we see the output that our task generates but nothing from Gradle
    unless it's an error.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们使用了 `–q` 标志来减少输出中的冗余。当运行此任务时，我们看到我们的任务生成的输出，但没有来自 Gradle 的任何内容，除非是错误。
- en: Now, let's try to briefly understand the `build.gradle` file. The first line
    declares the tasks and starts the body of a code block that will be executed at
    the end. The left shift operator (`<<`) might feel oddly placed, but it is very
    important in this context. We will see in the later chapters what it exactly means.
    The second line is a Groovy statement that prints the given string to the console.
    Also, the third line ends the code block.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们简要地了解 `build.gradle` 文件。第一行声明了任务并开始了一个代码块的主体，该代码块将在最后执行。左移运算符 (`<<`) 可能感觉放置得有些奇怪，但在这种情况下非常重要。我们将在后面的章节中看到它确切的意义。第二行是一个
    Groovy 语句，它会将给定的字符串打印到控制台。此外，第三行结束了代码块。
- en: Tip
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Groovy's `println "Hello, World!"` is equivalent to `System.out.println("Hello,
    World!")` in Java.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Groovy 的 `println "Hello, World!"` 等同于 Java 中的 `System.out.println("Hello, World!")`。
- en: Task name abbreviation
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 任务名称缩写
- en: While calling a gradle task from a command line, we can save a few keystrokes
    by typing only the characters that are enough to uniquely identify the task name.
    For example, the task `helloWorld` can be called using `gradle hW`. We can also
    use `helloW`, `hWorld`, or even `heWo`. However, if we just call `gradle h`, then
    the `help` task will be called.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 当从命令行调用gradle任务时，我们可以通过只输入足以唯一识别任务名称的字符来节省几个按键。例如，可以使用`gradle hW`调用`helloWorld`任务。我们也可以使用`helloW`、`hWorld`，甚至`heWo`。然而，如果我们只调用`gradle
    h`，那么将会调用`help`任务。
- en: This comes very handy when we need to frequently call long Gradle task names.
    For example, a task named `deployToProductionServer` can be invoked just by calling
    `gradle dTPS`, provided that this does not match any other task name abbreviation.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要频繁调用长的Gradle任务名称时，这非常有用。例如，名为`deployToProductionServer`的任务可以通过调用`gradle
    dTPS`来调用，前提是这个缩写不匹配任何其他任务名称。
- en: Gradle Daemon
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Gradle守护进程
- en: While we are talking about frequently calling Gradle, it is a good time to know
    about a recommended technique to boost the performance of our builds. Gradle Daemon,
    a process that keeps running in the background, can speed up the builds significantly.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们谈论频繁调用Gradle时，了解一个推荐的技术来提高构建性能是个好时机。Gradle守护进程，一个在后台持续运行的进程，可以显著加快构建速度。
- en: 'For a given gradle command invocation, we can specify the `--daemon` flag to
    enable the Daemon process. However, we should keep in mind that when we start
    the daemon, only the subsequent builds will be faster, but not the current one.
    For example:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 对于给定的gradle命令调用，我们可以指定`--daemon`标志来启用守护进程。然而，我们应该记住，当我们启动守护进程时，只有后续的构建会更快，但当前的构建不会。例如：
- en: '[PRE15]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In the preceding example, if we notice the time taken by two runs, the second
    one completed much faster, thanks to the Gradle Daemon.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，如果我们注意到两次运行所需的时间，第二次完成得更快，这要归功于Gradle守护进程。
- en: We can also prevent a specific build invocation from utilizing a Daemon process
    by passing the `--no-daemon` flag.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以通过传递`--no-daemon`标志来防止特定的构建调用使用守护进程。
- en: There are various ways to enable or disable Gradle Daemon, which are documented
    at [https://docs.gradle.org/current/userguide/gradle_daemon.html](https://docs.gradle.org/current/userguide/gradle_daemon.html)
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种方法可以启用或禁用Gradle守护进程，这些方法在[https://docs.gradle.org/current/userguide/gradle_daemon.html](https://docs.gradle.org/current/userguide/gradle_daemon.html)中有文档说明。
- en: Gradle Wrapper
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Gradle Wrapper
- en: A Gradle Wrapper consists of a `gradlew` shell script for Linux/Mac OS X, a
    `gradlew.bat` batch script for Windows, and a few helper files. These files can
    be generated by running a gradle `wrapper` task and should be checked into the
    version control system (VCS) along with project sources. Instead of using the
    system-wide `gradle` command, we can run the builds via the wrapper script.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Gradle Wrapper由Linux/Mac OS X的`gradlew`外壳脚本、Windows的`gradlew.bat`批处理脚本和一些辅助文件组成。这些文件可以通过运行gradle
    `wrapper`任务生成，并且应该与项目源代码一起提交到版本控制系统（VCS）。我们不必使用系统范围内的`gradle`命令，而是可以通过包装脚本运行构建。
- en: 'Some of the advantages of running builds via a wrapper script are as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 通过包装脚本运行构建的一些优点如下：
- en: We don’t need to download and install Gradle manually. The wrapper script takes
    care of this.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们不需要手动下载和安装Gradle。包装脚本会处理这一点。
- en: It uses a specific version of Gradle that the project needs. This reduces the
    risk of breaking a project’s build because of incompatible Gradle versions. We
    can safely upgrade (or downgrade) the system-wide Gradle installation without
    affecting our projects.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它使用项目所需的具体版本的Gradle。这减少了由于不兼容的Gradle版本而破坏项目构建的风险。我们可以安全地升级（或降级）系统范围内的Gradle安装，而不会影响我们的项目。
- en: It transparently enforces the same Gradle version for our project across all
    developers’ machines in the team.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它在团队中所有开发者的机器上透明地强制执行相同版本的Gradle。
- en: This is extremely useful in Continuous Integration build environments, as we
    do not need to install/update Gradle on the servers.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在持续集成构建环境中，这非常有用，因为我们不需要在服务器上安装/更新Gradle。
- en: Generating wrapper files
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 生成包装文件
- en: 'The Gradle `wrapper` task is already available to all Gradle projects. To generate
    the wrapper scripts and supporting files, just execute the following code from
    the command line:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: Gradle的`wrapper`任务已经对所有Gradle项目可用。要生成包装脚本和辅助文件，只需从命令行执行以下代码：
- en: '[PRE16]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'While generating `wrapper`, we can specify the exact Gradle version as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在生成`wrapper`时，我们可以指定确切的Gradle版本如下：
- en: '[PRE17]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In this example, we are specifying the Gradle version to be used is 2.9\. After
    running this command, we should check-in the generated files into VCS. We can
    customize the `wrapper` task to use a configured Gradle version, produce wrapper
    scripts with different names, change their locations, and so on.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们指定要使用的Gradle版本是2.9。运行此命令后，我们应该将生成的文件提交到版本控制系统中。我们可以自定义`wrapper`任务来使用配置的Gradle版本，生成不同名称的包装脚本，更改它们的位置等等。
- en: Running a build via wrapper
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过包装器运行构建
- en: For availing the benefits of a wrapper script, instead of using the gradle command,
    we need to call the wrapper script based on our OS.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 为了利用包装脚本的好处，而不是使用`gradle`命令，我们需要根据我们的操作系统调用基于我们的操作系统的包装脚本。
- en: 'On Mac OS X/Linux:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在Mac OS X/Linux上：
- en: '[PRE18]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'On Windows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上：
- en: '[PRE19]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We can use the arguments and flags exactly in the same way as we pass to the
    `gradle` command.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用与传递给`gradle`命令完全相同的方式使用参数和标志。
- en: Summary
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we started with a brief introduction to Gradle. Then, we looked
    at manual installation and also installation via package managers. We also learned
    about Gradle's command-line interface. Also, finally, we wrote our first Gradle
    build script.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们首先对Gradle进行了简要介绍。然后，我们探讨了手动安装以及通过软件包管理器安装的方法。我们还学习了Gradle的命令行界面。最后，我们编写了我们的第一个Gradle构建脚本。
- en: If you have followed the chapter until this point, you are all set to check
    out any Gradle-based project on your machine and execute builds. Also, you are
    equipped with the knowledge to write a very basic Gradle build script. Going forward,
    we will look at building Java-based projects with Gradle.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经跟随着本章内容学习到了这里，你现在就可以在你的机器上检查任何基于Gradle的项目并执行构建了。此外，你已经具备了编写一个非常基础的Gradle构建脚本的知识。接下来，我们将探讨如何使用Gradle构建基于Java的项目。
