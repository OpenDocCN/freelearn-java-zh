- en: Chapter 1. Running Your First Gradle Task
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are embarking on a fast-paced ride to learn the *Gradle Essentials*. To take
    a gentle start, we will first install Gradle. Then, we will get friendly with
    the Gradle's command-line interface by looking at the usage of the `gradle` command.
    Also, by the end of this chapter, we would have run our first Gradle build script.
  prefs: []
  type: TYPE_NORMAL
- en: Building a software artifact is a complex process involving various activities
    such as compiling source code, running automated tests, packaging distributable
    files, and so on. These activities are further split into many steps, often dependent
    on the execution order, fetching dependent artifacts, resolving configuration
    variables, and so on. Executing all these activities manually is cumbersome and
    often error-prone. A good build automation tool helps us reduce the effort and
    time it takes to build correct artifacts in a repeatable manner.
  prefs: []
  type: TYPE_NORMAL
- en: Gradle is an advanced build automation tool that brings the best from various
    proven build tools and innovates on top of them. Gradle can be used to produce
    artifacts such as web applications, application libraries, documentation, static
    sites, mobile apps, command lines, and desktop applications. Gradle can be used
    to build projects based on various languages and technology stacks such as Java,
    C/C++, Android, Scala, Groovy, Play, Grails, and many more. As **Java Virtual
    Machine** (**JVM**) happens to be one of the first class supported platforms by
    Gradle, the examples in this book will mostly focus on building Java-based projects.
  prefs: []
  type: TYPE_NORMAL
- en: Gradle gives us full control over build just like Ant but without ever needing
    to repeat ourselves by providing intelligent defaults in the form of conventions.
    Gradle truly works by conventions over configuration, just like Maven. However,
    it never gets in our way when we need to deviate. Also this puts it in complete
    contrast with Maven. Gradle attempts to maintain the right balance between conventions
    and configurability.
  prefs: []
  type: TYPE_NORMAL
- en: The previous generation of build tools, such as Ant and Maven, chose XML to
    represent the build logic. While XML is human-readable, it is more of a machine-friendly
    format (easier to be read/written by programs). It is great for representing and
    exchanging hierarchical data, but when it comes to writing any logic, even the
    simplest logic can easily take hundreds of lines. On the other hand, a Gradle
    build can be configured using very human-friendly Groovy DSL. Groovy is a powerful,
    expressive, and low ceremony dynamic language and is a perfect fit for build scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Gradle itself is a **JVM** application written in Java and Groovy. Since Gradle
    runs on the JVM, it runs the same way on Windows, Mac OS X and Linux. Gradle also
    boasts an advanced dependency resolution system and can resolve dependencies from
    the existing Maven and Ivy repositories or even a file system.
  prefs: []
  type: TYPE_NORMAL
- en: Over the years Gradle has matured into a very stable open source project with
    active contributors and commercial backing. The rich plugin ecosystem and vibrant
    community makes Gradle an excellent choice for a variety of projects. Gradle already
    has an impressive list of adopters, which includes tech giants such as Google
    Android, LinkedIn, Unity 3D, Netflix and many more. Open source libraries and
    frameworks such as Spring, Hibernate, and Grails are using Gradle to power their
    builds.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Gradle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we move forward with running Gradle, we must have it installed on our
    machine. There are multiple ways through which Gradle can be installed and updated.
    We will first see a more manual way to install Gradle and then take a quick look
    at installing it via some commonly used package managers. We can choose any one
    method that fits the bill. Irrespective of the way we install Gradle, we must
    meet the following prerequisite.
  prefs: []
  type: TYPE_NORMAL
- en: 'Gradle needs **Java Runtime Environment** (**JRE**) 6 or **Java Development
    Kit** (**JDK**) 1.6 or higher. There is no other dependency. We recommend having
    JDK installed. To verify this, on the command line, we can check the Java version
    with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If we don't see the output more or less like the one shown in the preceding
    command, there is problem with our JDK installation.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The latest JDK can be downloaded from the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Installing manually
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we want a finer control over the installation then this is a suitable route.
    This could be the case, when we cannot use the package managers, want very specific
    binaries to be downloaded and installed, or behind corporate firewalls where automatic
    downloading by package managers is not allowed. We need to download the Gradle
    binaries and make them available for use on the command line.
  prefs: []
  type: TYPE_NORMAL
- en: The latest Gradle distribution can be downloaded from [http://www.gradle.org/downloads](http://www.gradle.org/downloads).
    As of writing the latest version is 2.9.
  prefs: []
  type: TYPE_NORMAL
- en: 'Gradle binary distribution comes in two flavors as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`gradle-2.9-all.zip`: This contains binaries, sources, and documentation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gradle-2.9-bin.zip`: This contains binaries only'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can download any of the above depending on what we need. Also, this is an
    OS-independent zip so the same zip can be extracted on Mac OS X, Windows, and
    Linux. The next section makes the Gradle command available on the command line.
    This section is dependent on the OS we use.
  prefs: []
  type: TYPE_NORMAL
- en: Installing on Mac OS X and Linux
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s say we extracted the downloaded zip as `~/gradle-2.9/`. Now, we just
    need to add the following two lines at the end of `.bashrc`/, `.bash_profile`/,
    or `.zshrc`, depending on the OS and the shell that we use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Restart the terminal or source the modified file to have the change take effect.
  prefs: []
  type: TYPE_NORMAL
- en: Installing on Windows
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s say we extracted the zip as `C:\gradle-2.9`, then perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Start menu, right click on **Computer** and select **Properties**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On **Advanced system settings**, select the **Advanced** tab, and then select
    **Environment Variables...**.![Installing on Windows](img/00002.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **New**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a `GRADLE_HOME` environment variable with the value `C:\gradle-2.9`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Installing on Windows](img/00003.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: In future when we download the later version of Gradle, we would need to change
    on this value to point to the correct folder.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Edit (or add if not already there) the `PATH` environment variable. At the end
    of its value, append `;%GRADLE_HOME%\bin` (add a semicolon if multiple path entries
    exist).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Alternate methods of installing Gradle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although the manual installation gives absolute control over the installation
    process, various tasks such as downloading and extracting the right version, upgrading
    to the latest versions, uninstalling, and editing environment variables quickly
    become cumbersome and error-prone. That is why many people prefer package managers
    to control the whole process.
  prefs: []
  type: TYPE_NORMAL
- en: Installing via OS-specific package managers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While installing manually, as mentioned in the previous section, is very easy,
    we can make it super-easy by using a package manager.
  prefs: []
  type: TYPE_NORMAL
- en: Some Linux distributions like Ubuntu ship with their package manager, Mac OS
    X, Windows don't have any package manager installed by default. However, luckily,
    there are multiple package managers available for both platforms. We will see
    the example of Homebrew on Mac and Chocolatey on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Mac OS X
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Make sure we have Homebrew installed. If it is, installing Gradle is only a
    matter of using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More details on Homebrew can be found at [http://brew.sh](http://brew.sh).
  prefs: []
  type: TYPE_NORMAL
- en: Linux (Ubuntu)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Using the built in package manager on Ubuntu, which is called **Advanced Packaging
    Tool** (**APT**), we can install Gradle with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Windows
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'If we have Chocolatey installed, installing Gradle is just a command away:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More details on Chocolatey can be found at [https://chocolatey.org](https://chocolatey.org).
  prefs: []
  type: TYPE_NORMAL
- en: Installing via SDKMAN
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**SDKMAN** stands for **the Software Development Kit Manager**. In its own
    words, the website describes it as: *SDKMAN! is a tool for managing parallel versions
    of multiple Software Development Kits on most Unix based systems.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The advantage SDKMAN has over other package managers is that we can have multiple
    Gradle versions installed on a system and select a different version for a given
    project. If we have it installed, all we need to do is run following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: SDKMAN can be installed from [http://sdkman.io/](http://sdkman.io/).
  prefs: []
  type: TYPE_NORMAL
- en: Verifying the installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In whichever way we choose to install Gradle, it''s a good idea to verify that
    if it''s working before we move ahead. We can do this by simply checking for Gradle''s
    version on the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: If we see output similar to the above, we have Gradle installed correctly on
    our machine.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can use `-v` instead `--version` to get the same result.
  prefs: []
  type: TYPE_NORMAL
- en: Setting JVM options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although it's not required most of the time, but if in case we need to set some
    global options for the JVM that Gradle will use, Gradle provides us a convenient
    way to do that. We can set the `GRADLE_OPTS` environment variable with acceptable
    flags to tune the JVM.
  prefs: []
  type: TYPE_NORMAL
- en: Gradle also honors the `JAVA_OPTS` environment variable. However, we need to
    be careful when setting it, as this affects the setting for all the Java programs
    on a machine. Setting that we want to keep common for all the Java apps should
    be done via this variable and those that only need to be applied to Gradle should
    be set via `GRADLE_OPTS`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some commonly used options are `-Xms` and `-Xmx`, which set the minimum and
    maximum heap size of the JVM.
  prefs: []
  type: TYPE_NORMAL
- en: The Gradle command-line interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Gradle, just like other build tools, is primarily run from a command line. That's
    why it is worth spending some time to get familiar with its command-line interface.
    Typically, a `gradle` command is issued from the root of a project directory with
    some tasks to be executed. Let's say we are in the `hello-gradle` directory, which
    is currently empty.
  prefs: []
  type: TYPE_NORMAL
- en: 'Gradle provides a very simple **command-line interface** (**CLI**), which takes
    the following form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, apart from the `gradle` command itself, everything else is optional.
    The `options` tweak the execution of the Gradle whereas `tasks`, which we will
    see in detail later, are the basic units of work. Options are common across all
    projects and are specific to Gradle but tasks may vary depending on the project
    in which the `gradle` command is being run.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are some tasks that are available on all projects. One such task is `help`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Gradle is helping us out by telling us how to find all the available tasks
    and list all command-line options. Let''s first check what other tasks are currently
    available on our project. Remember we are still in the empty directory `hello-gradle`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This shows us some generic tasks that are available even without us adding any
    task to our project. We can try running all these tasks and see the output. We
    will see these tasks in details in the upcoming chapters.
  prefs: []
  type: TYPE_NORMAL
- en: The other useful command `gradle help` suggested us to check all the available
    options with the `--help` option.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `help` task is not the same as the `--help` option.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we run the `gradle --help` command, we get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: (The output is truncated for brevity.)
  prefs: []
  type: TYPE_NORMAL
- en: 'The option has a long form such as `--help` and may have a short from such
    as `-h`. We have already used one option before, that is `--version` or `-v`,
    which prints information about the Gradle version. The following are some commonly
    used options; there are many more options, which can be seen using the `gradle
    --help` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Options | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `-b`, `--build-file` | This specifies a build file (default: `build.gradle`)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `--continue` | This continues task execution even after a task failure |'
  prefs: []
  type: TYPE_TB
- en: '| `-D`, `--system-prop` | This sets the system property of the JVM |'
  prefs: []
  type: TYPE_TB
- en: '| `-d`, `--debug` | This prints debug level logs |'
  prefs: []
  type: TYPE_TB
- en: '| `--gui` | This starts Gradle GUI |'
  prefs: []
  type: TYPE_TB
- en: '| `-i`, `--info` | This prints info level logs |'
  prefs: []
  type: TYPE_TB
- en: '| `-P`, `--project-prop` | This adds a property to the project |'
  prefs: []
  type: TYPE_TB
- en: '| `-q`, `--quiet` | This logs only errors |'
  prefs: []
  type: TYPE_TB
- en: '| `-s`, `--stacktrace` | This prints stack traces for exceptions |'
  prefs: []
  type: TYPE_TB
- en: '| `-x`, `--exclude-task` | This excludes a specific task |'
  prefs: []
  type: TYPE_TB
- en: The first Gradle build script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So we are now ready to get our feet wet and see our first Gradle script in action.
    Let's create a file called `build.gradle` in the `hello-gradle` directory. Unless
    the build file path is provided using the `--build-file` option, Gradle treats
    the current directory as a project root and tries to find the `build.gradle` file
    there. If we have used Ant or Maven earlier, we can relate this file with `build.xml`
    or `pom.xml`, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, open the `build.gradle` file and let''s declare a task by adding the following
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We should be able to see this task on the command line as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have successfully created a task object called `helloWorld`. Tasks
    are first-class objects in Gradle, which means they have properties and methods
    on them. This gives us tremendous flexibility in terms of customizability and
    programmability of build.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, this task actually does not do anything yet. So let''s add some meaningful
    action to this task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now from the command line, we can execute this task by issuing the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Notice that we used the `–q` flag to reduce the verbosity in the output. When
    this task is run, we see the output that our task generates but nothing from Gradle
    unless it's an error.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's try to briefly understand the `build.gradle` file. The first line
    declares the tasks and starts the body of a code block that will be executed at
    the end. The left shift operator (`<<`) might feel oddly placed, but it is very
    important in this context. We will see in the later chapters what it exactly means.
    The second line is a Groovy statement that prints the given string to the console.
    Also, the third line ends the code block.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Groovy's `println "Hello, World!"` is equivalent to `System.out.println("Hello,
    World!")` in Java.
  prefs: []
  type: TYPE_NORMAL
- en: Task name abbreviation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While calling a gradle task from a command line, we can save a few keystrokes
    by typing only the characters that are enough to uniquely identify the task name.
    For example, the task `helloWorld` can be called using `gradle hW`. We can also
    use `helloW`, `hWorld`, or even `heWo`. However, if we just call `gradle h`, then
    the `help` task will be called.
  prefs: []
  type: TYPE_NORMAL
- en: This comes very handy when we need to frequently call long Gradle task names.
    For example, a task named `deployToProductionServer` can be invoked just by calling
    `gradle dTPS`, provided that this does not match any other task name abbreviation.
  prefs: []
  type: TYPE_NORMAL
- en: Gradle Daemon
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While we are talking about frequently calling Gradle, it is a good time to know
    about a recommended technique to boost the performance of our builds. Gradle Daemon,
    a process that keeps running in the background, can speed up the builds significantly.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a given gradle command invocation, we can specify the `--daemon` flag to
    enable the Daemon process. However, we should keep in mind that when we start
    the daemon, only the subsequent builds will be faster, but not the current one.
    For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, if we notice the time taken by two runs, the second
    one completed much faster, thanks to the Gradle Daemon.
  prefs: []
  type: TYPE_NORMAL
- en: We can also prevent a specific build invocation from utilizing a Daemon process
    by passing the `--no-daemon` flag.
  prefs: []
  type: TYPE_NORMAL
- en: There are various ways to enable or disable Gradle Daemon, which are documented
    at [https://docs.gradle.org/current/userguide/gradle_daemon.html](https://docs.gradle.org/current/userguide/gradle_daemon.html)
  prefs: []
  type: TYPE_NORMAL
- en: Gradle Wrapper
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A Gradle Wrapper consists of a `gradlew` shell script for Linux/Mac OS X, a
    `gradlew.bat` batch script for Windows, and a few helper files. These files can
    be generated by running a gradle `wrapper` task and should be checked into the
    version control system (VCS) along with project sources. Instead of using the
    system-wide `gradle` command, we can run the builds via the wrapper script.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the advantages of running builds via a wrapper script are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need to download and install Gradle manually. The wrapper script takes
    care of this.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It uses a specific version of Gradle that the project needs. This reduces the
    risk of breaking a project’s build because of incompatible Gradle versions. We
    can safely upgrade (or downgrade) the system-wide Gradle installation without
    affecting our projects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It transparently enforces the same Gradle version for our project across all
    developers’ machines in the team.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is extremely useful in Continuous Integration build environments, as we
    do not need to install/update Gradle on the servers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generating wrapper files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Gradle `wrapper` task is already available to all Gradle projects. To generate
    the wrapper scripts and supporting files, just execute the following code from
    the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'While generating `wrapper`, we can specify the exact Gradle version as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we are specifying the Gradle version to be used is 2.9\. After
    running this command, we should check-in the generated files into VCS. We can
    customize the `wrapper` task to use a configured Gradle version, produce wrapper
    scripts with different names, change their locations, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Running a build via wrapper
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For availing the benefits of a wrapper script, instead of using the gradle command,
    we need to call the wrapper script based on our OS.
  prefs: []
  type: TYPE_NORMAL
- en: 'On Mac OS X/Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'On Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: We can use the arguments and flags exactly in the same way as we pass to the
    `gradle` command.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we started with a brief introduction to Gradle. Then, we looked
    at manual installation and also installation via package managers. We also learned
    about Gradle's command-line interface. Also, finally, we wrote our first Gradle
    build script.
  prefs: []
  type: TYPE_NORMAL
- en: If you have followed the chapter until this point, you are all set to check
    out any Gradle-based project on your machine and execute builds. Also, you are
    equipped with the knowledge to write a very basic Gradle build script. Going forward,
    we will look at building Java-based projects with Gradle.
  prefs: []
  type: TYPE_NORMAL
