["```java\n    <modules>\n        <module>ticket-agency-ejb</module>\n        <module>ticket-agency-ejb-client</module>\n    </modules>\n```", "```java\n<dependencies>\n    <dependency>\n        <groupId>javax</groupId>\n        <artifactId>javaee-api</artifactId>\n        <version>7.0</version>\n        <scope>provided</scope>\n    </dependency>\n</dependencies>\n```", "```java\n<dependency>\n    <groupId>org.jboss.logging</groupId>\n    <artifactId>jboss-logging</artifactId>\n    <version>3.1.4.GA</version>\n    <scope>provided</scope>\n</dependency>\n```", "```java\n<build>\n    <plugins>\n        <plugin>\n           <groupId>org.apache.maven.plugins</groupId>\n           <artifactId>maven-compiler-plugin</artifactId>\n            <version>3.1</version>\n            <configuration>\n                <!-- enforce Java 8 -->\n                <source>1.8</source>\n                <target>1.8</target>\n           </configuration>\n        </plugin>\n        <plugin>\n           <groupId>org.apache.maven.plugins</groupId>\n           <artifactId>maven-ejb-plugin</artifactId>\n           <version>2.3</version>\n           <configuration>\n                <ejbVersion>3.2</ejbVersion>\n                <!-- Generate ejb-client for client project -->\n                <generateClient>true</generateClient>\n           </configuration>\n        </plugin>\n    </plugins>\n</build>\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ejb-jar \n\n         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee\"\n         version=\"3.2\">\n    <display-name>ticket-agency-ejb</display-name>\n    <ejb-client-jar>ticket-agency-ejbClient.jar</ejb-client-jar>\n</ejb-jar>\n```", "```java\n@Singleton\n@Startup\n@AccessTimeout(value = 5, unit = TimeUnit.MINUTES)\npublic class TheatreBox {\n\n    private static final Logger logger = Logger.getLogger(TheatreBox.class);\n\n    private Map<Integer, Seat> seats;\n\n    @PostConstruct\n    public void setupTheatre() {\n        seats = new HashMap<>();\n        int id = 0;\n        for (int i = 0; i < 5; i++) {\n            addSeat(new Seat(++id, \"Stalls\", 40));\n            addSeat(new Seat(++id, \"Circle\", 20));\n            addSeat(new Seat(++id, \"Balcony\", 10));\n        } \n        logger.info(\"Seat Map constructed.\");\n    }\n\n    private void addSeat(Seat seat) {\n        seats.put(seat.getId(), seat);\n    }\n\n    @Lock(READ)\n    public Collection<Seat> getSeats() {\n        return Collections.unmodifiableCollection(seats.values());\n    }\n\n    @Lock(READ)\n    public int getSeatPrice(int seatId) throws NoSuchSeatException {\n        return getSeat(seatId).getPrice();\n    }\n\n    @Lock(WRITE)\n    public void buyTicket(int seatId) throws SeatBookedException, NoSuchSeatException {\n        final Seat seat = getSeat(seatId);\n        if (seat.isBooked()) {\n            throw new SeatBookedException(\"Seat \" + seatId + \" already booked!\");\n        }\n        addSeat(seat.getBookedSeat());\n    }\n\n    @Lock(READ)\n    private Seat getSeat(int seatId) throws NoSuchSeatException {\n        final Seat seat = seats.get(seatId);\n        if (seat == null) {\n            throw new NoSuchSeatException(\"Seat \" + seatId + \" does not exist!\");\n        }\n        return seat;\n    }\n}\n```", "```java\npublic class Seat {\n    public Seat(int id, String name, int price) {\n        this(id, name, price, false);\n    }\n    private Seat(int id, String name, int price, boolean booked) {\n        this.id = id;\n        this.name = name;\n        this.price = price;\n        this.booked = booked;\n    }\n    public Seat getBookedSeat() {\n        return new Seat(getId(), getName(), getPrice(), true);\n    }\n    // Other Constructors, Fields and Getters omitted for brevity\n}\n```", "```java\n @Lock(READ)\n    public Collection<Seat> getSeats() {\n        return Collections.unmodifiableCollection(seats.values());\n    }\n```", "```java\n @Lock(WRITE)\n    public void buyTicket(int seatId) throws SeatBookedException, NoSuchSeatException {\n        final Seat seat = getSeat(seatId);\n        if (seat.isBooked()) {\n            throw new SeatBookedException(\"Seat \" + seatId + \" already booked!\");\n        }\n        addSeat(seat.getBookedSeat());\n    }\n```", "```java\n@Singleton\n@Startup\n@ConcurrencyManagement(ConcurrencyManagementType.BEAN)\npublic class TheatreBox {\n. . . .\n  public synchronized void buyTicket(int seatId) {\n    final Seat seat = getSeat(seatId);\n    if (seat.isBooked()) {\n        throw new SeatBookedException(\"Seat \" + seatId + \" already booked!\");\n    }\n    addSeat(seat.getBookedSeat());\n}\n```", "```java\n@Stateless\n@Remote(TheatreInfoRemote.class)\npublic class TheatreInfo implements TheatreInfoRemote {\n @EJB\n private TheatreBox box;\n\n    @Override\n    public String printSeatList() {\n        final Collection<Seat> seats = box.getSeats();\n        final StringBuilder sb = new StringBuilder();\n        for (Seat seat : seats) {\n            sb.append(seat.toString());\n            sb.append(System.lineSeparator());\n        }\n        return sb.toString();\n    }\n}\n```", "```java\npublic interface TheatreInfoRemote {\n    String printSeatList();\n}\n```", "```java\n@Stateful\n@Remote(TheatreBookerRemote.class)\n@AccessTimeout(value = 5, unit = TimeUnit.MINUTES)\npublic class TheatreBooker implements TheatreBookerRemote {\n    private static final Logger logger = Logger.getLogger(TheatreBooker.class);\n\n    @EJB\n    private TheatreBox theatreBox;\n    private int money;\n\n    @PostConstruct\n    public void createCustomer() {\n        this.money = 100;\n    }\n\n    @Override\n    public int getAccountBalance() {\n        return money;\n    }\n\n    @Override\n    public String bookSeat(int seatId) throws SeatBookedException, NotEnoughMoneyException, NoSuchSeatException {\n        final int seatPrice = theatreBox.getSeatPrice(seatId);\n        if (seatPrice > money) {\n            throw new NotEnoughMoneyException(\"You don't have enough money to buy this \" + seatId + \" seat!\");\n        }\n\n theatreBox.buyTicket(seatId);\n        money = money - seatPrice;\n\n        logger.infov(\"Seat {0} booked.\", seatId);\n        return \"Seat booked.\";\n    }\n}\n```", "```java\npublic class SeatBookedException extends Exception {\n  // some code \n}\n```", "```java\nmvn package\n\n```", "```java\n<build>\n <finalName>${project.artifactId}</finalName>\n    <plugins>\n <!-- WildFly plugin to deploy the application -->\n <plugin>\n <groupId>org.wildfly.plugins</groupId>\n <artifactId>wildfly-maven-plugin</artifactId>\n <version>1.0.2.Final</version>\n <configuration>\n <filename>${project.build.finalName}.jar</filename>\n </configuration>\n </plugin>\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-compiler-plugin</artifactId>\n            <version>3.1</version>\n            <configuration>\n                <!-- enforce Java 8 -->\n                <source>1.8</source>\n                <target>1.8</target>\n            </configuration>\n        </plugin>\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-ejb-plugin</artifactId>\n            <version>2.3</version>\n            <configuration>\n                <ejbVersion>3.2</ejbVersion>\n                <!-- Generate ejb-client for client project -->\n                <generateClient>true</generateClient>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n```", "```java\nmvn wildfly:deploy\n\n```", "```java\nINFO: JBoss Remoting version 4.0.3.Final\n[INFO] ---------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ---------------------------------------------------------------\n```", "```java\n09:09:32,782 INFO  [org.jboss.as.server] (management-handler-thread - 1) JBAS018562: Deployed \"ticket-agency-ejb.jar\"\n```", "```java\nejb:<app-name>/<module-name>/<distinct-name>/<bean-name>!<fully-qualified-classname-of-the-remote-interface>\n```", "```java\nejb:/ticket-agency-ejb//TheatreInfo! com.packtpub.wflydevelopment.chapter3.boundary.TheatreInfoRemote\n```", "```java\nejb:<app-name>/<module-name>/<distinct-name>/<bean-name>!<fully-qualified-classname-of-the-remote-interface>?stateful\n```", "```java\nejb:/ticket-agency-ejb//TheatreBooker! com.packtpub.wflydevelopment.chapter3.boundary.TheatreBookerRemote?stateful\n```", "```java\njava:global/ticket-agency-ejb/TheatreInfo!com.packtpub.wflydevelopment.chapter3.boundary.TheatreInfoRemote\njava:app/ticket-agency-ejb/TheatreInfo!com.packtpub.wflydevelopment.chapter3.boundary.TheatreInfoRemote\njava:module/TheatreInfo!com.packtpub.wflydevelopment.chapter3.boundary.TheatreInfoRemote\njava:jboss/exported/ticket-agency-ejb/TheatreInfo!com.packtpub.wflydevelopment.chapter3.boundary.TheatreInfoRemote\n```", "```java\n<dependencyManagement>\n   <dependencies>\n      <dependency>\n         <groupId>org.wildfly</groupId>\n         <artifactId>wildfly-ejb-client-bom</artifactId>\n         <version>8.1.0.Final</version>\n         <type>pom</type>\n         <scope>import</scope>\n      </dependency>\n   </dependencies>\n</dependencyManagement>\n```", "```java\n<dependencies>\n   <dependency>\n      <groupId>com.packtpub.wflydevelopment.chapter3</groupId>\n      <artifactId>ticket-agency-ejb</artifactId>\n      <type>ejb-client</type>\n      <version>${project.version}</version>\n   </dependency>\n\n   <dependency>\n      <groupId>org.jboss.spec.javax.transaction</groupId>\n      <artifactId>jboss-transaction-api_1.2_spec</artifactId>\n      <scope>runtime</scope>\n   </dependency>\n\n   <dependency>\n      <groupId>org.jboss.spec.javax.ejb</groupId>\n      <artifactId>jboss-ejb-api_3.2_spec</artifactId>\n      <scope>runtime</scope>\n   </dependency>\n\n   <dependency>\n      <groupId>org.jboss</groupId>\n      <artifactId>jboss-ejb-client</artifactId>\n      <scope>runtime</scope>\n   </dependency>\n\n   <dependency>\n      <groupId>org.jboss.xnio</groupId>\n      <artifactId>xnio-api</artifactId>\n      <scope>runtime</scope>\n   </dependency>\n   <dependency>\n      <groupId>org.jboss.xnio</groupId>\n      <artifactId>xnio-nio</artifactId>\n      <scope>runtime</scope>\n   </dependency>\n\n   <dependency>\n      <groupId>org.jboss.remoting3</groupId>\n      <artifactId>jboss-remoting</artifactId>\n         <version>3.3.3.Final</version>\n         <scope>runtime</scope>\n   </dependency>\n\n   <dependency>\n      <groupId>org.jboss.sasl</groupId>\n      <artifactId>jboss-sasl</artifactId>\n      <scope>runtime</scope>\n   </dependency>\n\n   <dependency>\n      <groupId>org.jboss.marshalling</groupId>\n      <artifactId>jboss-marshalling-river</artifactId>\n      <scope>runtime</scope>\n   </dependency>\n</dependencies>\n```", "```java\npublic class TicketAgencyClient {\n\n    private static final Logger logger = Logger.getLogger(TicketAgencyClient.class.getName());\n\n    public static void main(String[] args) throws Exception {\n Logger.getLogger(\"org.jboss\").setLevel(Level.SEVERE);  [1]\n        Logger.getLogger(\"org.xnio\").setLevel(Level.SEVERE);\n\n        new TicketAgencyClient().run();\n    }\n    private final Context context;\n    private TheatreInfoRemote theatreInfo;\n    private TheatreBookerRemote theatreBooker;\n\n    public TicketAgencyClient() throws NamingException {\n final Properties jndiProperties = new Properties(); [2]\n        jndiProperties.setProperty(Context.URL_PKG_PREFIXES, \"org.jboss.ejb.client.naming\");\n        this.context = new InitialContext(jndiProperties);\n    }\n\n    private enum Command { [3]\n        BOOK, LIST, MONEY, QUIT, INVALID;\n\n        public static Command parseCommand(String stringCommand) {\n            try {\n                return valueOf(stringCommand.trim().toUpperCase());\n            } catch (IllegalArgumentException iae) {\n                return INVALID;\n            }\n        }\n    }\n\n    private void run() throws NamingException {\n this.theatreInfo = lookupTheatreInfoEJB();  [4]\n this.theatreBooker = lookupTheatreBookerEJB();  [5]\n\n showWelcomeMessage(); [6]\n\n        while (true) {\n            final String stringCommand = IOUtils.readLine(\"> \");\n final Command command = Command.parseCommand(stringCommand); [7]\n            switch (command) {\n                case BOOK:\n                    handleBook();\n                    break;\n                case LIST:\n                    handleList();\n                    break;\n                case MONEY:\n                    handleMoney();\n                    break;\n                case QUIT:\n                    handleQuit();\n                    break;\n\n                default:\n                    logger.warning(\"Unknown command \" + stringCommand);\n            }\n        }\n    }\n\n    private void handleBook() {\n        int seatId;\n\n        try {\n            seatId = IOUtils.readInt(\"Enter SeatId: \");\n        } catch (NumberFormatException e1) {\n            logger.warning(\"Wrong SeatId format!\");\n            return;\n        }\n\n        try {\n            final String retVal = theatreBooker.bookSeat(seatId);\n            System.out.println(retVal);\n        } catch (SeatBookedException | NotEnoughMoneyException | NoSuchSeatException e) {\n            logger.warning(e.getMessage());\n            return;\n        }\n    }\n\n    private void handleList() {\n        logger.info(theatreInfo.printSeatList());\n    }\n\n    private void handleMoney() {\n        final int accountBalance = theatreBooker.getAccountBalance();\n        logger.info(\"You have: \" + accountBalance + \" money left.\");\n    }\n\n    private void handleQuit() {\n        logger.info(\"Bye\");\n        System.exit(0);\n    }\n    private TheatreInfoRemote lookupTheatreInfoEJB() throws NamingException {\n        return (TheatreInfoRemote) context.lookup(\"ejb:/ticket-agency-ejb//TheatreInfo!com.packtpub.wflydevelopment.chapter3.boundary.TheatreInfoRemote\");\n    }\n\n    private TheatreBookerRemote lookupTheatreBookerEJB() throws NamingException {\n        return (TheatreBookerRemote) context.lookup(\"ejb:/ticket-agency-ejb//TheatreBooker!com.packtpub.wflydevelopment.chapter3.boundary.TheatreBookerRemote?stateful\");\n    }\n\n    private void showWelcomeMessage() {\n        System.out.println(\"Theatre booking system\");\n        System.out.println(\"=====================================\");\n        System.out.println(\"Commands: book, list,money, quit\");\n    }\n}\n```", "```java\njboss-ejb-client.properties file in the client's classpath.\n```", "```java\nremote.connections=default\nremote.connection.default.host=localhost\nremote.connection.default.port=8080\n```", "```java\nremote.connections=host1,host2 \nremote.connection.host1.host=192.168.0.1\nremote.connection.host2.host=192.168.0.2\nremote.connection.host1.port=8080\nremote.connection.host2.port=8080\n```", "```java\n<build>\n   <finalName>${project.artifactId}</finalName>\n   <plugins>\n      <!-- maven-compiler-plugin here -->\n\n      <plugin>\n         <groupId>org.codehaus.mojo</groupId>\n         <artifactId>exec-maven-plugin</artifactId>\n         <version>1.2.1</version>\n         <executions>\n            <execution>\n               <goals>\n                  <goal>exec</goal>\n               </goals>\n            </execution>\n         </executions>\n         <configuration>\n            <executable>java</executable>\n            <workingDirectory>${project.build.directory}/exec-working-directory</workingDirectory>\n            <arguments>\n               <argument>-classpath</argument>\n               <classpath />\n            <argument>com.packtpub.wflydevelopment.chapter3.client.TicketAgencyClient</argument>\n            </arguments>\n         </configuration>\n      </plugin>\n   </plugins>\n</build>\n```", "```java\nmaven-compiler-plugin configuration that we omitted for the sake of brevity (we discussed it in the server project), we have included exec-maven-plugin, which adds the ability to execute Java programs using the exec goal.\n```", "```java\nmvn package exec:exec\n\n```", "```java\nWhat type of user do you wish to add?\n a) Management User (mgmt-users.properties)\n b) Application User (application-users.properties)\n(a): b\n\nEnter the details of the new user to add.\nUsing realm 'ApplicationRealm' as discovered from the existing property files.\nUsername : ejbuser\nPassword requirements are listed below. To modify these restrictions edit the add-user.properties configuration file.\n - The password must not be one of the following restricted values {root, admin, administrator}\n - The password must contain at least 8 characters, 1 alphanumeric character(s), 1 digit(s), 1 non-alphanumeric symbol(s)\n - The password must be different from the username\nPassword :\nRe-enter Password :\nWhat groups do you want this user to belong to? (Please enter a comma separated list, or leave blank for none)[  ]:\nAbout to add user 'ejbuser' for realm 'ApplicationRealm'\nIs this correct yes/no? yes\nAdded user 'ejbuser' to file 'C:\\Programs\\Dev\\Servers\\wildfly-8.0.0.Final\\standalone\\configuration\\application-users.properties'\nAdded user 'ejbuser' to file 'C:\\Programs\\Dev\\Servers\\wildfly-8.0.0.Final\\domain\\configuration\\application-users.properties'\nAdded user 'ejbuser' with groups  to file 'C:\\Programs\\Dev\\Servers\\wildfly-8.0.0.Final\\standalone\\configuration\\application-roles.properties'\nAdded user 'ejbuser' with groups  to file 'C:\\Programs\\Dev\\Servers\\wildfly-8.0.0.Final\\domain\\configuration\\application-roles.properties'\nIs this new user going to be used for one AS process to connect to another AS process?\ne.g. for a slave host controller connecting to the master or for a Remoting connection for server to server EJB calls.\nyes/no? no\nPress any key to continue . . .\n```", "```java\nusername=HEX( MD5( username ':' realm ':' password))\n```", "```java\nejbuser=dc86450aab573bd2a8308ea69bcb8ba9\n```", "```java\nremote.connection.default.username=ejbuser\nremote.connection.default.password=ejbuser123\n```", "```java\nremote.connection.default.connect.options.org.xnio.Options.SASL_DISALLOWED_MECHANISMS=JBOSS-LOCAL-USER\n```", "```java\n@Resource\nTimerService timerService;\n\nprivate static final long DURATION = TimeUnit.SECONDS.toMillis(6);\n```", "```java\npublic void createTimer(){\n    timerService.createSingleActionTimer(DURATION, new TimerConfig());\n}\n```", "```java\n@Timeout\npublic void timeout(Timer timer){\n    logger.info(\"Re-building Theatre Map.\"); \n    setupTheatre();\n}\n```", "```java\n explains this:\n```", "```java\n@Stateless\npublic class AutomaticSellerService {\n\n    private static final Logger logger = Logger.getLogger(AutomaticSellerService.class);\n\n    @EJB\n    private TheatreBox theatreBox;\n\n @Resource\n private TimerService timerService;  [1]\n\n @Schedule(hour = \"*\", minute = \"*/1\", persistent = false)  [2]\n    public void automaticCustomer() throws NoSuchSeatException {\n        final Optional<Seat> seatOptional = findFreeSeat();\n        if (!seatOptional.isPresent()) {\n            cancelTimers();\n            logger.info(\"Scheduler gone!\");\n            return; // No more seats\n        }\n\n        final Seat seat = seatOptional.get();\n\n        try {\n theatreBox.buyTicket(seat.getId());   [3]\n        } catch (SeatBookedException e) {\n            // do nothing, user booked this seat in the meantime\n        }\n\n        logger.info(\"Somebody just booked seat number \" + seat.getId());\n    }\n\n    private Optional<Seat> findFreeSeat() {\n        final Collection<Seat> list = theatreBox.getSeats();\n        return list.stream()\n            .filter(seat -> !seat.isBooked())\n            .findFirst();\n    }\n    private void cancelTimers() {  [4]\n        for (Timer timer : timerService.getTimers()) {\n timer.cancel();\n        }\n    }\n}\n```", "```java\n @Asynchronous\n public void bookSeatAsync(int seatId) throws NotEnoughMoneyException, NoSuchSeatException, SeatBookedException {\n        bookSeat(seatId);\n}\n```", "```java\n@Asynchronous\n@Override\npublic Future<String> bookSeatAsync(int seatId) {\n        try {\n            Thread.sleep(10000);\n            bookSeat(seatId);\n            return new AsyncResult<>(\"Booked seat: \" + seatId + \". Money left: \" + money);\n        } catch (NoSuchSeatException | SeatBookedException | NotEnoughMoneyException | InterruptedException e) {\n            return new AsyncResult<>(e.getMessage());\n        }\n    }\n```", "```java\nprivate final List<Future<String>> lastBookings = new ArrayList<>(); [1]\n // Some code\n    case BOOKASYNC:\n handleBookAsync();\n break;\n case MAIL:\n handleMail();\n break; \n// Some code\nprivate void handleBookAsync() {\n    String text = IOUtils.readLine(\"Enter SeatId: \");\n    int seatId;\n\n    try {\n        seatId = Integer.parseInt(text);\n    } catch (NumberFormatException e1) {\n        logger.warning(\"Wrong seatId format!\");\n        return;\n    }\n\n lastBookings.add(theatreBooker.bookSeatAsync(seatId));  [2]\n    logger.info(\"Booking issued. Verify your mail!\");\n}\n\nprivate void handleMail() {\n    boolean displayed = false;\n    final List<Future<String>> notFinished = new ArrayList<>();\n    for (Future<String> booking : lastBookings) {\n if (booking.isDone()) {  [3]\n            try {\n                final String result = booking.get();\n                logger.info(\"Mail received: \" + result);\n                displayed = true;\n            } catch (InterruptedException | ExecutionException e) {\n                logger.warning(e.getMessage());\n            }\n        } else {\n            notFinished.add(booking);\n        }\n    }\n\n    lastBookings.retainAll(notFinished);\n    if (!displayed) {\n        logger.info(\"No mail received!\");\n    }\n}\n```", "```java\nbooking [2] and add Future<?> to lastBookings list [1]. On the EJB side, we introduced a pause of 10 seconds to complete the booking so that later on, we can check if the work has been completed by checking the isDone method [3] of the lastBookings list elements object.\n```"]