- en: Chapter 7. Reporting and Documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will see how we can use the Maven Site plugin, as well
    as configure various reports on a site. We will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Documenting with the Maven Site plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating Javadocs for a site
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating source cross-reference for a site
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating unit test reports for a site
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating code coverage reports for a site
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating code quality reports for a site
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating selective reports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying a site
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most powerful features of Maven is the ability to create documentation
    for the project. It is useful to have a self-documenting project that can be published
    to a website without additional effort. Maven provides the ability to generate
    this documentation, known as a site report, and publish it to a website.
  prefs: []
  type: TYPE_NORMAL
- en: Many Maven plugins use the Site feature to generate project documentation. In
    fact, Maven itself uses the Site plugin to generate its website.
  prefs: []
  type: TYPE_NORMAL
- en: Documenting with the Maven Site plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Along with the `clean` and `default` lifecycle, Maven also consists of a `site`
    lifecycle. Like `clean`, `site` is implemented by a Maven plugin, in this case,
    the Maven Site plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Maven is set up on your system and is verified for work. To do this, refer to
    the first three recipes of [Chapter 1](ch01.html "Chapter 1. Getting Started"),
    *Getting Started*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the following steps to generate documentation using the Maven Site plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: Open one of the Maven projects for which we need to generate a site report (for
    instance, `project-with-documentation`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Observe the output as shown in the following screenshot:![How to do it...](img/6124OS_07_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `index.html` file generated in the `target/site` folder:![How to do
    it...](img/6124OS_07_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Site` is one of the Maven lifecycles. When the `mvn site` command is run,
    it invokes the `site` phase of the `site` lifecycle. The `site` goal of the Maven
    Site plugin is bound to this phase and is invoked.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `site` goal performs a series of steps to generate the report. It uses
    various elements in the pom file related to this. Let us look at the various items
    in the default report:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/6124OS_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In addition to this, the `site` command generates reports based on the contents
    of the `reporting` section of the pom:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: A number of Maven plugins can generate reports defined and configured under
    the `reporting` element. We will see many reports in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have only seen what the default `site` command offers. The Maven Site plugin
    offers various configurations to make many more customizations. Some of them are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a different documentation format: The default format of the site is
    APT (almost plain text), a wiki-like format'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Override the default navigation tree: This is required if you want to insert
    additional content in the site'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Creating skins: This is needed if you want to style the site reports differently'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let us see how to do some of these:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `site.xml` file with the following content to the `src\site` folder
    of the `project-with-documentation` project folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add the image named `packt.png` to the `src\site\resources\images` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, add the `index.apt` file in the `src\site\apt` folder with the following
    content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: View the generated site report:![There's more...](img/6124OS_07_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can see a customized site page with the logo and the content that we specified.
  prefs: []
  type: TYPE_NORMAL
- en: Generating Javadocs for a site
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Documentation for Java projects is created using Javadocs. Maven provides support
    not only to generate Javadocs, but also to publish them as part of the site. Plugins
    configured within the `reporting` element will generate content for the site.
    When they are configured within the `build` element, they can generate reports
    independent of site.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the following steps to generate Javadocs for a site:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Maven project `project-with-documentation`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following section in the `pom.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See the report generated:![How to do it...](img/6124OS_07_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **JavaDocs** link:![How to do it...](img/6124OS_07_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We added the Javadoc plugin to the `reporting` section of `pom`. When the Site
    plugin runs, it examines this section and runs the reports configured there. In
    this case, it found `javadoc` and ran the relevant plugin to generate the Javadoc
    reports for the project.
  prefs: []
  type: TYPE_NORMAL
- en: Maven links the report from the site page in the **Project Reports** section.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'What if we do not want to document the test classes, but only the source? We
    can configure the plugin to do this by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code to the `reporting` section where we set the value of
    `report` element to `javadoc`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the resulting Site web page. Only the **JavaDocs** link is present on the
    site. The **Test JavaDocs** link is no longer present.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generating source cross-reference for a site
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we saw how the Maven JXR plugin generates source cross-reference.
    When publishing a project, it is useful to provide a way to refer to sources in
    addition to Javadocs. Let us see how to make that part of the site report.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the following steps to generate source cross-reference for a site:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Maven project `project with documentation`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the `reporting` section of the `pom.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the generated site report:![How to do it...](img/6124OS_07_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Adding the Maven JXR plugin to the `reporting` section of pom automatically
    creates the project source cross-reference. By default, both source and test cross-references
    are generated. Like Javadoc, the `reportSet` element can be configured if we do
    not want a cross-reference for test classes.
  prefs: []
  type: TYPE_NORMAL
- en: Generating unit test reports for a site
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we have unit tests for our project, it will be good to see the test reports
    in the site documentation. Let us see how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the following steps to generate unit test reports for a site:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Maven project for which you want to generate the site documentation
    (for instance, `project-with-documentation`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code in the reporting section of the `pom.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Observe the generated site report:![How to do it...](img/6124OS_07_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you recall, we use the Maven Surefire plugin to run tests. Surefire provides
    a Surefire Report plugin. When this plugin is added to the `reporting` section
    of the `pom.xml` file, it includes the test report in the site documentation.
  prefs: []
  type: TYPE_NORMAL
- en: The reports are identical, irrespective of whether JUnit or TestNG is used for
    unit testing.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In addition to the format of the report for the site, TestNG generates additional
    reports in a different format. These are available in the `target` folder but
    are not part of the site documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Generating code coverage reports for a site
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let us now include code coverage from the unit tests of our project in the site
    documentation.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the following steps to generate code coverage reports for a site:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Maven project for which you want to do this (for instance, `project-with-documentation`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code in the `<build>` section of the `pom.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code in the `reporting` section of the `pom.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following Maven command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Observe the site report as shown in following screenshot:![How to do it...](img/6124OS_07_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The JaCoCo unit test coverage report shows up in site documentation on account
    of the following issues:'
  prefs: []
  type: TYPE_NORMAL
- en: As the `prepare-agent` goal of the JaCoCo plugin is added to the `build` section,
    Maven runs the JaCoCo agent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As the `test` goal is run, Maven runs the test and the agent analyzes the tests
    for coverage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As the JaCoCo plugin is added to the `reporting` section of the `pom.xml` file,
    the coverage report is generated and linked to the site documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can see, the same plugin is added to the `build` and `reporting` section
    and does different things
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you were to use Cobertura instead of JaCoCo to generate test coverage, you
    could do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Remove the lines related to JaCoCo in the `build` and `reporting` sections.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the reporting section of the `pom.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following Maven command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the site documentation:![There's more...](img/6124OS_07_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will notice two things:'
  prefs: []
  type: TYPE_NORMAL
- en: We didn't need to specify anything in the `build` section
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We didn't need to run the `test` goal explicitly; the Maven Cobertura plugin
    did this.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating code quality reports for a site
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have seen how to use various code quality tools to perform static code analysis.
    Let us now see how we can update our site documentation with reports from these
    tools.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the following steps to generate code quality reports for a site:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project for which we want to generate the site report.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the `reporting` section of the `pom.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following Maven command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the generated site report:![How to do it...](img/6124OS_07_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For each of the code quality tools specified in the `reporting` section of the
    `pom.xml` file, the `site` goal runs the specified tool, generates the report,
    and links to the site documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Clicking on each of the links takes the user to the specific report.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you have chosen to use SonarQube for analysis and want to link the Sonar
    report to the site documentation, then you can do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code in the reporting section of the `pom.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Generate the site by running the following Maven command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the site report:![There's more...](img/6124OS_07_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A new **Sonar** link is present in **Project Reports**, which automatically
    redirects to the default Sonar installation. The link can be customized to the
    appropriate URL, if it is different.
  prefs: []
  type: TYPE_NORMAL
- en: Generating selective reports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have seen that by default the `site` command generates some **Project Information**.
    Some of it, for instance **Mailing Lists**, may be nonexistent or irrelevant to
    the project. Let us see how we can avoid generating these. The Maven Project Info
    Reports plugin is the plugin that provides the standard reports from pom. It can
    be configured to exclude specific reports.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the following steps to generate selective site report:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project for which you want to generate the site report.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the `reporting` section of the `pom.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following Maven `site` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the generated report:![How to do it...](img/6124OS_07_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We explicitly specified the reports that we wanted to see in **Project Information**.
    Due to this, only those reports are generated and displayed.
  prefs: []
  type: TYPE_NORMAL
- en: This allows us to avoid generating and displaying reports that are not applicable
    to the project.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying a site
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once a site report is generated, it needs to be published. While this can be
    done manually, Maven also provides facilities to do this. Let us see how.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To publish a site, you need to have access to the web server where the site
    has to be deployed.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To deploy a site, use the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code to your `pom.xml` file. This could also be added in
    `settings.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For the corresponding ID, add the relevant username and password in your `settings.xml`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following Maven command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the `site-deploy` goal is run, Maven first builds the site. Then, it uses
    the entry set in the `distributionManagement` element to determine how the site
    needs to be deployed. The first part of the URL is the protocol to be used to
    transfer the file. In this case, it is `scp`. It uses the credentials specified
    in the `settings.xml` file and transfers the file to the destination.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to test your site before deploying, you can easily do so in the
    following way:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following Maven command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the browser and go to `http://localhost:8080`:![There's more...](img/6124OS_07_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The run goal of the Maven Site plugin deploys the site in a **jetty server**,
    which is started by default by port `8080`. This allows you to view the site report
    and verify it before publishing.
  prefs: []
  type: TYPE_NORMAL
