["```java\napply plugin: 'java'\n\nrepositories.jcenter()\n\ndependencies {\n  // Dependency definition for Logback classic\n  // library, used as implementation for SLF4J API.\n  compile 'ch.qos.logback:logback-classic:1.1.2'\n}\n```", "```java\n$ gradle -q dependencies --configuration compile\n------------------------------------------------------------\nRoot project\n------------------------------------------------------------\n\ncompile - Compile classpath for source set 'main'.\n\\--- ch.qos.logback:logback-classic:1.1.2\n +--- ch.qos.logback:logback-core:1.1.2\n \\--- org.slf4j:slf4j-api:1.\n7.6\n\n```", "```java\napply plugin: 'java'\n\nrepositories.jcenter()\n\ndependencies {\n  // Dependency definition for Logback classic.\n  compile 'ch.qos.logback:logback-classic:1.1.2', {\n    // We don't want to have the transitive dependencies.\n    transitive = false\n  }\n}\n```", "```java\n$ gradle -q dependencies --configuration compile\n\n------------------------------------------------------------\nRoot project\n------------------------------------------------------------\n\ncompile - Compile classpath for source set 'main'.\n\\--- ch.qos.logback:logback-classic:1.1.2\n\n```", "```java\n    apply plugin: 'java'\n\n    repositories.jcenter()\n\n    configurations {\n      // Disable transitive dependencies for\n      // all dependencies defined in this\n      // configuration.\n      // Configurations extended\n      // from the compile configuration will not\n      // inherit this transitive property value.\n      compile.transitive = false\n    }\n\n    dependencies {\n      // Dependency definition for Logback classic\n      compile 'ch.qos.logback:logback-classic:1.1.2'\n    }\n    ```", "```java\n    $ gradle -q dependencies --configuration compile\n\n    ------------------------------------------------------------\n    Root project\n    ------------------------------------------------------------\n\n    compile - Compile classpath for source set 'main'.\n    \\--- ch.qos.logback:logback-classic:1.1.2\n    ```", "```java\napply plugin: 'java'\n\nrepositories.jcenter()\n\ndependencies {\n  // Dependency definition for Logback classic\n  compile('ch.qos.logback:logback-classic:1.1.2') {\n    // Exclude slf4j-api transitive dependency.\n    exclude module: 'slf4j-api'\n    // Alternative syntax:\n    // Exclude all modules in the group org.slf4j:\n    // exclude group: 'org.slf4j'\n    // Or specify both group and module name:\n    // exclude group: 'org.slf4j', module: 'slf4j-api'\n  }\n}\n```", "```java\n$ gradle -q dependencies --configuration compile\n\n------------------------------------------------------------\nRoot project\n------------------------------------------------------------\n\ncompile - Compile classpath for source set 'main'.\n\\--- ch.qos.logback:logback-classic:1.1.2\n \\--- ch.qos.logback:logback-core:1.1.2\n\n```", "```java\napply plugin: 'java'\n\nrepositories.jcenter()\n\nconfigurations {\n  compile {\n    // Exclude slf4j-api transitive dependency.\n    exclude module: 'slf4j-api'\n    // Alternative syntax:\n    // Exclude all modules in the group org.slf4j:\n    // exclude group: 'org.slf4j'\n    // Or specify both group and module name:\n    // exclude group: 'org.slf4j', module: 'slf4j-api'\n  }\n\n  // To exclude a module and/or group from all configurations\n  // we can use the all method:\n  // all { exclude module: 'slf4j-api' }\n}\n\ndependencies {\n  // Dependency definition for Logback classic.\n  compile('ch.qos.logback:logback-classic:1.1.2')\n}\n```", "```java\napply plugin: 'java'\n\nrepositories.jcenter()\n\nconfigurations {\n  compile {\n    exclude module: 'slf4j-api'\n  }\n}\n\ndependencies {\n  compile('ch.qos.logback:logback-classic:1.1.2') {\n    exclude group: 'ch.qos.logback', module: 'logback-core'\n  }\n}\n\ntask showExcludeRules {\n  description 'Show exclude rules for configurations and dependencies'\n\n  doFirst {\n    // Store found exclude rules.\n    def excludes = []\n\n    // Go through all configurations to find exclude rules\n    // defined at configuration level and at\n    // dependency level for dependencies in the configuration.\n    configurations.all.each { configuration ->\n      def configurationExcludes = configuration.excludeRules\n      configurationExcludes.findAll().each { rule ->\n        // Add found excludeRule to excludes collection.\n        excludes << [type: 'container',\n              id: configuration.name,\n              excludes: rule]\n      }\n\n      def dependencies = configuration.allDependencies\n      dependencies.all { dependency ->\n        def excludeRules = dependency.excludeRules\n\n        excludeRules.findAll().each { rule ->\n          def dep = dependency\n          def id = \"${dep.group}:${dep.name}:${dep.version}\"\n          // Add found excludeRule to excludes collection.\n          excludes << [type: 'dependency', id: id, excludes: rule]\n        }\n      }\n    }\n\n    // Printing exclude rule information for output.\n    def printExcludeRule = {\n      def rule = \"${it.excludes.group ?: '*'}:${it.excludes.module ?: '*'}\"\n      println \"$it.id >> $rule\"\n    }\n\n    // Print formatted header for output.\n    def printHeader = { header ->\n      println()\n      println '-' * 60\n      println header\n      println '-' * 60\n    }\n\n    // Group rules by organisation or dependency.\n    def excludeRules = excludes.groupBy { it.type }\n\n    printHeader 'Configurations'\n    excludeRules.container.toSet().each(printExcludeRule)\n\n    printHeader 'Dependencies'\n    excludeRules.dependency.toSet().each(printExcludeRule)\n  }\n}\n```", "```java\n$ gradle -q showExcludeRules\n\n------------------------------------------------------------\nConfigurations\n------------------------------------------------------------\ncompile >> *:slf4j-api\n\n------------------------------------------------------------\nDependencies\n------------------------------------------------------------\nch.qos.logback:logback-classic:1.1.2 >> ch.qos.log\nback:logback-core\n\n```", "```java\napply plugin: 'java'\n\nrepositories.jcenter()\n\ndependencies {\n  // Dependency definition for Logback classic library\n  compile 'ch.qos.logback:logback-classic:1.1.2@jar'\n\n  // Alternative syntax:\n  //compile group: 'ch.qos.logback',\n  //        name: 'logback-classic',\n  //        version: '1.1.2',\n  //        ext: 'jar'\n}\n```", "```java\n    apply plugin: 'java'\n\n    repositories.jcenter()\n\n    dependencies {\n      // Define dependency on SLF4J API for\n      // compiling source files.\n      compile 'org.slf4j:slf4j-api:1.7.7'\n\n      // Define implementation Logback classic\n      // of SLF4J API in runtime configuration.\n      // This has a transitive dependency on\n      // org.slf4j:slf4j-api:1.7.6, which is a version\n      // conflict with org.slf4j:slf4j-api:1.7.7\n      runtime 'ch.qos.logback:logback-classic:1.1.2'\n    }\n    ```", "```java\n    $ gradle -q dependencies --configuration runtime\n\n    ------------------------------------------------------------\n    Root project\n    ------------------------------------------------------------\n\n    runtime - Runtime classpath for source set 'main'.\n    +--- org.slf4j:slf4j-api:1.7.7\n    \\--- ch.qos.logback:logback-classic:1.1.2\n     +--- ch.qos.logback:logback-core:1.1.2\n     \\--- org.slf4j:slf4j-api:1.7.6 -> 1.7.7\n\n    (*) - dependencies omitted (listed previously)\n\n    ```", "```java\n    $ gradle -q dependencyInsight --configuration runtime --dependency slf4j-api\n    org.slf4j:slf4j-api:1.7.7 (conflict resolution)\n    \\--- runtime\n\n    org.slf4j:slf4j-api:1.7.6 -> 1.7.7\n    \\--- ch.qos.logback:logback-classic:1.1.2\n     \\--- runtime\n\n    ```", "```java\n    apply plugin: 'java'\n    apply plugin: 'project-report'\n\n    repositories.jcenter()\n\n    dependencies {\n      compile 'org.slf4j:slf4j-api:1.7.7'\n\n      runtime 'ch.qos.logback:logback-classic:1.1.2'\n    }\n    ```", "```java\n    $ gradle htmlDependencyReport\n    :htmlDependencyReport\n\n    BUILD SUCCESSFUL\n\n    Total time: 1.645 secs\n    $\n\n    ```", "```java\napply plugin: 'java'\n\nrepositories.jcenter()\n\nconfigurations {\n  runtime {\n    resolutionStrategy {\n      // If there is a version conflict,\n      // then the build must fail.\n      failOnVersionConflict()\n    }\n  }\n\n  // Alternatively we could apply\n  // this to all configurations:\n  // all {\n  //     resolutionStrategy {\n  //         failOnVersionConflict()\n  //     }\n  // }\n}\n\ndependencies {\n  compile 'org.slf4j:slf4j-api:1.7.7'\n\n  runtime 'ch.qos.logback:logback-classic:1.1.2'\n}\n```", "```java\n$ gradle -q dependencies\n\n------------------------------------------------------------\nRoot project\n------------------------------------------------------------\n\nruntime - Runtime classpath for source set 'main'.\n\nFAILURE: Build failed with an exception.\n\n* What went wrong:\nExecution failed for task ':dependencies'.\n> Could not resolve all dependencies for configuration ':runtime'.\n > A conflict was found between the following modules:\n - org.slf4j:slf4j-api:1.7.7\n - org.slf4j:slf4j-api:1.7.6\n\n* Try:\nRun with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.\n\n```", "```java\napply plugin: 'java'\n\nrepositories.jcenter()\n\nconfigurations {\n  runtime {\n    resolutionStrategy {\n      failOnVersionConflict()\n    }\n  }\n}\n\ndependencies {\n  compile 'org.slf4j:slf4j-api:1.7.7', {\n    // Force Gradle to use this version\n    // for this dependency (even transtive).\n    force = true\n  }\n\n  runtime 'ch.qos.logback:logback-classic:1.1.2'\n}\n```", "```java\n$ gradle -q dependencies --configuration runtime\n\n------------------------------------------------------------\nRoot project\n------------------------------------------------------------\n\nruntime - Runtime classpath for source set 'main'.\n+--- org.slf4j:slf4j-api:1.7.7\n\\--- ch.qos.logback:logback-classic:1.1.2\n +--- ch.qos.logback:logback-core:1.1.2\n \\--- org.slf4j:slf4j-api:1.7.6 -> 1.7.7\n\n(*) - dependencies omitted (listed previously)\n\n```", "```java\napply plugin: 'java'\n\nrepositories.jcenter()\n\nconfigurations {\n  runtime {\n    resolutionStrategy {\n      failOnVersionConflict()\n\n      // Make sure version 1.7.7 is used for\n      // (transitive) dependency org.slf4j:slf4j-api.\n      force 'org.slf4j:slf4j-api:1.7.7'\n\n      // Alternate syntax is to define the\n      // forced module collection.\n      // forcedModules = ['org.slf4j:slf4j-api:1.7.7']\n    }\n  }\n}\n\ndependencies {\n  compile 'org.slf4j:slf4j-api:1.7.7'\n\n  runtime 'ch.qos.logback:logback-classic:1.1.2'\n}\n```", "```java\n$ gradle -q dependencies --configuration runtime\n\n------------------------------------------------------------\nRoot project\n------------------------------------------------------------\n\nruntime - Runtime classpath for source set 'main'.\n+--- org.slf4j:slf4j-api:1.7.7\n\\--- ch.qos.logback:logback-classic:1.1.2\n +--- ch.qos.logback:logback-core:1.1.2\n \\--- org.slf4j:slf4j-api:1.7.6 -> 1.7.7\n\n(*) - dependencies omitted (listed previously)\n\n```", "```java\napply plugin: 'java'\n\nrepositories.jcenter()\n\nconfigurations {\n  runtime {\n    resolutionStrategy {\n      failOnVersionConflict()\n\n      // Customize dependency resolve rules.\n      eachDependency { DependencyResolveDetails details ->\n        def requestedModule = details.requested\n\n        // Force version for \n        // org.slf4j:slf4j-api dependency.\n        if (requestedModule.group == 'org.slf4j'\n          && requestedModule.name == 'slf4j-api') {\n\n          // Force version 1.7.7.\n          details.useVersion '1.7.7'\n        }\n      }\n    }\n  }\n}\n\ndependencies {\n  compile 'org.slf4j:slf4j-api:1.7.7'\n\n  runtime 'ch.qos.logback:logback-classic:1.1.2'\n}\n```", "```java\napply plugin: 'java'\n\nrepositories.jcenter()\n\nconfigurations {\n  runtime {\n    resolutionStrategy {\n      eachDependency { DependencyResolveDetails details ->\n        def requestedModule = details.requested\n\n        // Change resolve rule for log4j:log4j\n        // (transitive) dependency.\n        if (requestedModule.group == 'log4j'\n          && requestedModule.name == 'log4j') {\n\n          // Replace log4j:log4j:<version> with\n          // org.slf4j:log4j-over-slf4j:1.7.7.\n          details.useTarget group: 'org.slf4j',\n                  name: 'log4j-over-slf4j',\n                  version: '1.7.7'\n          // Alternative syntax:\n          // useTarget 'org.slf4j:log4j-over-slf4j:1.7.7'\n        }\n      }\n    }\n  }\n}\n\ndependencies {\n  compile 'org.slf4j:slf4j-api:1.7.7'\n\n  // In real life this is probably a transitive\n  // dependency from a dependency we need in our project.\n  // We put it here as an example to show we\n  // can completely replace a dependency with\n  // another.\n  runtime 'log4j:log4j:1.2.17'\n\n  runtime 'ch.qos.logback:logback-classic:1.1.2'\n}\n```", "```java\n$ gradle -q dependencies --configuration runtime\n\n------------------------------------------------------------\nRoot project\n------------------------------------------------------------\n\nruntime - Runtime classpath for source set 'main'.\n+--- org.slf4j:slf4j-api:1.7.7\n+--- log4j:log4j:1.2.17 -> org.slf4j:log4j-over-slf4j:1.7.7\n|    \\--- org.slf4j:slf4j-api:1.7.7\n\\--- ch.qos.logback:logback-classic:1.1.2\n +--- ch.qos.logback:logback-core:1.1.2\n \\--- org.slf4j:slf4j-api:1.7.6 -> 1.7.7\n\n(*) - dependencies omitted (listed previously)\n\n```", "```java\napply plugin: 'java'\n\nrepositories.jcenter()\n\nconfigurations {\n  runtime {\n    resolutionStrategy {\n      eachDependency { DependencyResolveDetails details ->\n        def requestedModule = details.requested\n\n        // If version is not set or version \n        // has value 'fixed' set\n        // version based on external definition.\n        if (!requestedModule.version\n          || requestedModule.version == 'fixed') {\n          def moduleVersion = findModuleVersion(requestedModule.name)\n          details.useVersion moduleVersion\n        }\n      }\n    }\n  }\n}\n\ndependencies {\n  // Version is not defined for this dependency,\n  // is resolved via custom dependency resolve rule.\n  compile 'org.slf4j:slf4j-api'\n\n  // Version is set to 'fixed', so version can\n  // be resolved via custom dependency resolve rule.\n  runtime 'ch.qos.logback:logback-classic:fixed'\n}\n\n/**\n* Find version for given module name. In real life\n* this could be part of a company Gradle plugin\n* or intranet resource with version information.\n*\n* @param name Module descriptor name\n* @return Version for given module name\n*/\ndef findModuleVersion(String name) {\n  ['slf4j-api': '1.7.7', 'logback-classic': '1.1.2']\n  .find { it.key == name}\n  .value\n}\n```", "```java\n$ gradle -q dependencies --configuration runtime\n\n------------------------------------------------------------\nRoot project\n------------------------------------------------------------\n\nruntime - Runtime classpath for source set 'main'.\n+--- org.slf4j:slf4j-api: -> 1.7.7\n\\--- ch.qos.logback:logback-classic: -> 1.1.2\n +--- ch.qos.logback:logback-core:1.1.2\n \\--- org.slf4j:slf4j-api:1.7.6 -> 1.7.7\n\n(*) - dependencies omitted (listed previously)\n\n```", "```java\napply plugin: 'java'\n\nrepositories.jcenter()\n\nconfigurations {\n  runtime {\n    resolutionStrategy {\n      failOnVersionConflict()\n    }\n  }\n}\n\ndependencies {\n  compile 'org.slf4j:slf4j-api:1.7.7'\n\n  // Use a client module to redefine the transitive\n  // dependencies for the logback-classic.\n  runtime module('ch.qos.logback:logback-classic:1.1.2') {\n    dependency 'ch.qos.logback:logback-core:1.1.2'\n\n    // Force the correct version of\n    // the slf4j-api dependency/\n    dependency 'org.slf4j:slf4j-api:1.7.7'\n  }\n}\n```", "```java\n$ gradle -q dependencies --configuration runtime\n\n------------------------------------------------------------\nRoot project\n------------------------------------------------------------\n\nruntime - Runtime classpath for source set 'main'.\n+--- org.slf4j:slf4j-api:1.7.7\n\\--- ch.qos.logback:logback-classic:1.1.2\n +--- org.slf4j:slf4j-api:1.7.7\n \\--- ch.qos.logback:logback-core:1.1.2\n\n(*) - dependencies omitted (listed previously)\n\n```", "```java\napply plugin: 'java'\n\nrepositories.jcenter()\n\ndependencies {\n  compile 'org.slf4j:slf4j-api:1.7.7'\n  runtime 'ch.qos.logback:logback-classic:1.1.2'\n}\n\ntask artifactsLocation {\n  description 'Show location of artifact on disk'\n\n  doFirst {\n    configurations.runtime.each { println it }\n  }\n}\n```", "```java\n$ gradle -q artifactsLocation\n/Users/mrhaki/.gradle/caches/modules-2/files-2.1/org.slf4j/slf4j-api/1.7.7/2b8019b6249bb05d81d3a3094e468753e2b21311/slf4j-api-1.7.7.jar\n/Users/mrhaki/.gradle/caches/modules-2/files-2.1/ch.qos.logback/logback-classic/1.1.2/b316e9737eea25e9ddd6d88eaeee76878045c6b2/logback-classic-1.1.2.jar\n/Users/mrhaki/.gradle/caches/modules-2/files-2.1/ch.qos.logback/logback-core/1.1.2/2d23694879c2c12f125dac5076bdfd5d771cc4cb/logback-core-1.1.2.jar\n\n```", "```java\n// Import needed for cache methods time unit.\nimport java.util.concurrent.TimeUnit\n\napply plugin: 'java'\n\nrepositories.jcenter()\n\nconfigurations {\n  runtime {\n    resolutionStrategy {\n      // Change expiration time for caching\n      // dynamic version to 30 minutes.\n      cacheDynamicVersionsFor 30, 'minutes'\n\n      // Alternative syntax is using TimeUnit:\n      // cacheDynamicVersionsFor 1, TimeUnit.HOURS\n\n      // Change expiration time for cached\n      // changing modules to 5 minutes using\n      // java.util.concurrent.TimeUnit.\n      cacheChangingModulesFor 5, TimeUnit.MINUTES\n\n      // Or we could use string notation.\n      // cacheChangingModulesFor 1, 'minutes'\n    }\n  }\n\n  // Alternatively we could apply\n  // this to all configurations:\n  // all {\n  //     resolutionStrategy {\n  //         cacheDynamicVersionsFor 4, 'hours'\n  //         cacheChangingModulesFor 10, 'minutes'\n  //     }\n  // }\n}\n\ndependencies {\n  compile 'org.slf4j:slf4j-api:1.7.7'\n\n  runtime 'ch.qos.logback:logback-classic:1.1.2'\n}\n```", "```java\napply plugin: 'java'\n\nrepositories {\n  maven {\n    url 'http://ourcompany.com/maven'\n  }\n}\n\ndependencies {\n  compile('com.vehicles:cars:1.0') {\n    // Instruct Gradle this a changing\n    // module, although it cannot\n    // be derived from the version attribute.\n    changing = true\n  }\n\n  // Other syntax using the map notation:\n  // compile group: 'com.vehicles', name: 'cars',\n  //         version: '1.0', changing: true\n}\n```"]