["```java\n    <dependency>\n        <groupId>javax</groupId>\n        <artifactId>javaee-api</artifactId>\n        <version>8.0</version>\n        <scope>provided</scope>\n    </dependency>\n```", "```java\npublic class User implements Serializable{\n\n    private Long id;\n    private String name;\n\n    public User(long id, String name){\n        this.id = id;\n        this.name = name;\n    }\n\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n}\n```", "```java\n@Stateless\npublic class UserBean {\n\n    public User getUser(){\n        long id = new Date().getTime();\n\n        try {\n            TimeUnit.SECONDS.sleep(5);\n            return new User(id, \"User \" + id);\n        } catch (InterruptedException ex) {\n            System.err.println(ex.getMessage());\n            return new User(id, \"Error \" + id);\n        }\n    }\n}\n```", "```java\n@WebServlet(name = \"UserServlet\", urlPatterns = {\"/UserServlet\"}, asyncSupported = true)\npublic class UserServlet extends HttpServlet {\n\n    @Inject\n    private UserBean userBean;\n\n    private final Jsonb jsonb = JsonbBuilder.create();\n\n    @Override\n    protected void doGet(HttpServletRequest req, \n    HttpServletResponse resp) throws ServletException, \n    IOException {\n        AsyncContext ctx = req.startAsync();\n        ctx.start(() -> {\n            try (PrintWriter writer = \n            ctx.getResponse().getWriter()){\n                writer.write(jsonb.toJson(userBean.getUser()));\n            } catch (IOException ex) {\n                System.err.println(ex.getMessage());\n            }\n            ctx.complete();\n        });\n    }\n\n    @Override\n    public void destroy() {\n        try {\n            jsonb.close();\n        } catch (Exception ex) {\n            System.err.println(ex.getMessage());\n        }\n    }\n\n}\n```", "```java\nasyncSupported = true\n```", "```java\n@Inject\nprivate UserBean userBean;\n```", "```java\nAsyncContext ctx = req.startAsync();\n```", "```java\nctx.start(() -> {\n    ...\n    ctx.complete();\n});\n```", "```java\n    <dependency>\n        <groupId>javax</groupId>\n        <artifactId>javaee-api</artifactId>\n        <version>8.0</version>\n        <scope>provided</scope>\n    </dependency>\n```", "```java\npublic class User implements Serializable{\n\n    private Long id;\n    private String name;\n\n    public User(long id, String name){\n        this.id = id;\n        this.name = name;\n    }\n\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n}\n```", "```java\n@Stateless\n@Path(\"asyncService\")\npublic class AsyncService {\n\n    @Inject\n    private Event<User> event;\n\n    private AsyncResponse response;\n\n    @GET\n    public void asyncService(@Suspended AsyncResponse response){\n        long id = new Date().getTime();\n        this.response = response;\n        event.fireAsync(new User(id, \"User \" + id));\n    }\n\n```", "```java\n    public void onFireEvent(@ObservesAsync User user){\n        response.resume(Response.ok(user).build());\n    }\n}\n```", "```java\n@Inject\nprivate Event<User> event;\n```", "```java\npublic void onFireEvent(@ObservesAsync User user){\n    response.resume(Response.ok(user).build());\n}\n```", "```java\n@GET\npublic void asyncService(@Suspended AsyncResponse response){\n    long id = new Date().getTime();\n    this.response = response;\n    event.fireAsync(new User(id, \"User \" + id));\n}\n```", "```java\n    <dependency>\n        <groupId>javax</groupId>\n        <artifactId>javaee-api</artifactId>\n        <version>8.0</version>\n        <scope>provided</scope>\n    </dependency>\n```", "```java\n@Singleton\n@ServerEndpoint(value = \"/asyncServer\")\npublic class AsyncServer {\n\n    private final List<Session> peers = Collections.synchronizedList(new ArrayList<>());\n\n    @OnOpen\n    public void onOpen(Session peer){\n        peers.add(peer);\n    }\n\n    @OnClose\n    public void onClose(Session peer){\n        peers.remove(peer);\n    }\n\n    @OnError\n    public void onError(Throwable t){\n        System.err.println(t.getMessage());\n    }\n\n    @OnMessage\n    public void onMessage(String message, Session peer){\n        peers.stream().filter((p) -> \n        (p.isOpen())).forEachOrdered((p) -> {\n            p.getAsyncRemote().sendText(message + \n            \" - Total peers: \" + peers.size());\n        });\n    }\n}\n```", "```java\n@ClientEndpoint\npublic class AsyncClient {\n\n    private final String asyncServer = \"ws://localhost:8080\n    /ch10-async-websocket/asyncServer\";\n\n    private Session session;\n    private final AsyncResponse response;\n\n    public AsyncClient(AsyncResponse response) {\n        this.response = response;\n    }\n\n    public void connect() {\n        WebSocketContainer container = \n        ContainerProvider.getWebSocketContainer();\n        try {\n            container.connectToServer(this, new URI(asyncServer));\n        } catch (URISyntaxException | DeploymentException | \n          IOException ex) {\n            System.err.println(ex.getMessage());\n        }\n\n    }\n\n    @OnOpen\n    public void onOpen(Session session) {\n        this.session = session;\n    }\n\n    @OnMessage\n    public void onMessage(String message, Session session) {\n        response.resume(message);\n    }\n\n    public void send(String message) {\n        session.getAsyncRemote().sendText(message);\n    }\n\n    public void close(){\n        try {\n            session.close();\n        } catch (IOException ex) {\n            System.err.println(ex.getMessage());\n        }\n    }\n}\n```", "```java\n@Stateless\n@Path(\"asyncService\")\npublic class AsyncService {\n\n    @GET\n    public void asyncService(@Suspended AsyncResponse response){\n        AsyncClient client = new AsyncClient(response);\n        client.connect();\n        client.send(\"Message from client \" + new Date().getTime());\n        client.close();\n    }\n}\n```", "```java\n@Singleton\n```", "```java\nprivate final List<Session> peers = Collections.synchronizedList\n(new ArrayList<>());\n```", "```java\n@OnOpen\npublic void onOpen(Session peer){\n    peers.add(peer);\n}\n\n@OnClose\npublic void onClose(Session peer){\n    peers.remove(peer);\n}\n\n@OnError\npublic void onError(Throwable t){\n    System.err.println(t.getMessage());\n}\n\n@OnMessage\npublic void onMessage(String message, Session peer){\n    peers.stream().filter((p) -> (p.isOpen())).forEachOrdered((p) -> \n    {\n        p.getAsyncRemote().sendText(message + \" - Total peers: \" \n        + peers.size());\n    });\n}\n```", "```java\n    @OnMessage\n    public void onMessage(String message, Session peer){\n        peers.stream().filter((p) -> (p.isOpen())).forEachOrdered((p)\n        -> {\n            p.getAsyncRemote().sendText(message + \" - Total peers: \"\n            + peers.size());\n        });\n    }\n```", "```java\nprivate final String asyncServer = \"ws://localhost:8080/\nch10-async-websocket/asyncServer\";\n```", "```java\npublic void connect() {\n    WebSocketContainer container = \n    ContainerProvider.getWebSocketContainer();\n    try {\n        container.connectToServer(this, new URI(asyncServer));\n    } catch (URISyntaxException | DeploymentException | IOException ex) {\n        System.err.println(ex.getMessage());\n    }\n}\n```", "```java\n@OnMessage\npublic void onMessage(String message, Session session) {\n    response.resume(message);\n}\n```", "```java\n@GET\npublic void asyncService(@Suspended AsyncResponse response){\n    AsyncClient client = new AsyncClient(response);\n    client.connect();\n    client.send(\"Message from client \" + new Date().getTime());\n}\n```", "```java\n    <dependency>\n        <groupId>javax</groupId>\n        <artifactId>javaee-api</artifactId>\n        <version>8.0</version>\n        <scope>provided</scope>\n    </dependency>\n```", "```java\npublic class User implements Serializable{\n\n    private Long id;\n    private String name;\n\n    public User(long id, String name){\n        this.id = id;\n        this.name = name;\n    }\n\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n}\n```", "```java\n@Stateless\npublic class Sender {\n\n    @Inject\n    private JMSContext context;\n\n    @Resource(lookup = \"jms/JmsQueue\")\n    private Destination queue;\n\n    public void send(User user){\n        context.createProducer()\n                .setDeliveryMode(DeliveryMode.PERSISTENT)\n                .setDisableMessageID(true)\n                .setDisableMessageTimestamp(true)\n                .send(queue, user);\n    }\n\n}\n```", "```java\n@MessageDriven(activationConfig = {\n    @ActivationConfigProperty(propertyName = \"destinationLookup\", \n    propertyValue = \"jms/JmsQueue\"),\n    @ActivationConfigProperty(propertyName = \"destinationType\", \n    propertyValue = \"javax.jms.Queue\")\n})\npublic class Consumer implements MessageListener{\n\n    @Override\n    public void onMessage(Message msg) {\n        try {\n            User user = msg.getBody(User.class);\n            System.out.println(\"User: \" + user);\n        } catch (JMSException ex) {\n            System.err.println(ex.getMessage());\n        }\n    }\n\n}\n```", "```java\n@Stateless\n@Path(\"mdbService\")\npublic class MDBService {\n\n    @Inject\n    private Sender sender;\n\n    public void mdbService(@Suspended AsyncResponse response){\n        long id = new Date().getTime();\n        sender.send(new User(id, \"User \" + id));\n        response.resume(\"Message sent to the queue\");\n    }\n}\n```", "```java\n@Inject\nprivate JMSContext context;\n```", "```java\n@Resource(lookup = \"jms/JmsQueue\")\nprivate Destination queue;\n```", "```java\ncontext.createProducer()\n        .setDeliveryMode(DeliveryMode.PERSISTENT)\n        .setDisableMessageID(true)\n        .setDisableMessageTimestamp(true)\n        .send(queue, user);\n```", "```java\n@MessageDriven(activationConfig = {\n    @ActivationConfigProperty(propertyName = \"destinationLookup\", \n    propertyValue = \"jms/JmsQueue\"),\n    @ActivationConfigProperty(propertyName = \"destinationType\", \n    propertyValue = \"javax.jms.Queue\")\n})\n```", "```java\n@Override\npublic void onMessage(Message msg) {\n    try {\n        User user = msg.getBody(User.class);\n        System.out.println(\"User: \" + user);\n    } catch (JMSException ex) {\n        System.err.println(ex.getMessage());\n    }\n}\n```", "```java\nUser user = msg.getBody(User.class);\n```", "```java\n@Inject\nprivate Sender sender;\n```", "```java\npublic void mdbService(@Suspended AsyncResponse response){\n    long id = new Date().getTime();\n    sender.send(new User(id, \"User \" + id));\n    response.resume(\"Message sent to the queue\");\n}\n```", "```java\n    <dependency>\n        <groupId>javax</groupId>\n        <artifactId>javaee-api</artifactId>\n        <version>8.0</version>\n        <scope>provided</scope>\n    </dependency>\n```", "```java\npublic class User implements Serializable{\n\n    private Long id;\n    private String name;\n\n    public User(long id, String name){\n        this.id = id;\n        this.name = name;\n    }\n\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n}\n```", "```java\n@Stateless\n@Path(\"remoteUser\")\npublic class UserBean {\n\n    @GET\n    public Response remoteUser() {\n        long id = new Date().getTime();\n        try {\n            TimeUnit.SECONDS.sleep(5);\n            return Response.ok(new User(id, \"User \" + id))\n            .build();\n        } catch (InterruptedException ex) {\n            System.err.println(ex.getMessage());\n            return Response.ok(new User(id, \"Error \" + id))\n            .build();\n        }\n    }\n\n}\n```", "```java\n@Stateless\n@Path(\"asyncService\")\npublic class AsyncService {\n\n    private Client client;\n    private WebTarget target;\n\n    @PostConstruct\n    public void init() {\n        client = ClientBuilder.newBuilder()\n                .readTimeout(10, TimeUnit.SECONDS)\n                .connectTimeout(10, TimeUnit.SECONDS)\n                .build();\n        target = client.target(\"http://localhost:8080/\n        ch10-async-jaxrs/remoteUser\");\n    }\n\n    @PreDestroy\n    public void destroy(){\n        client.close();\n    }\n\n    @GET\n    public void asyncService(@Suspended AsyncResponse response){\n        target.request().async().get(new \n        InvocationCallback<Response>() {\n            @Override\n            public void completed(Response rspns) {\n                response.resume(rspns);\n            }\n\n            @Override\n            public void failed(Throwable thrwbl) {\n                response.resume(Response.status(Response.Status.\n                INTERNAL_SERVER_ERROR).entity(thrwbl.getMessage())\n                .build());\n            }\n        });\n\n    }\n\n}\n```", "```java\nprivate Client client;\nprivate WebTarget target;\n\n@PostConstruct\npublic void init() {\n     client = ClientBuilder.newBuilder()\n            .readTimeout(10, TimeUnit.SECONDS)\n            .connectTimeout(10, TimeUnit.SECONDS)\n            .build();\n    target = client.target(\"http://localhost:8080/\n    ch10-async-jaxrs/remoteUser\");\n}\n```", "```java\n        target.request().async().get(new InvocationCallback<Response>()   \n        {\n            @Override\n            public void completed(Response rspns) {\n                response.resume(rspns);\n            }\n\n            @Override\n            public void failed(Throwable thrwbl) {\n                System.err.println(thrwbl.getMessage());\n            }\n        });\n```", "```java\n    <dependency>\n        <groupId>javax</groupId>\n        <artifactId>javaee-api</artifactId>\n        <version>8.0</version>\n        <scope>provided</scope>\n    </dependency>\n```", "```java\npublic class User implements Serializable{\n\n    private Long id;\n    private String name;\n\n    public User(long id, String name){\n        this.id = id;\n        this.name = name;\n    }\n\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n}\n```", "```java\n@Stateless\npublic class UserBean {\n\n    @Asynchronous\n    public Future<User> getUser(){\n        long id = new Date().getTime();\n        User user = new User(id, \"User \" + id);\n        return new AsyncResult(user);\n    }\n\n    @Asynchronous\n    public void doSomeSlowStuff(User user){\n        try {\n            TimeUnit.SECONDS.sleep(5);\n        } catch (InterruptedException ex) {\n            System.err.println(ex.getMessage());\n        }\n    }\n}\n```", "```java\n@Stateless\n@Path(\"asyncService\")\npublic class AsyncService {\n\n    @Inject\n    private UserBean userBean;\n\n    @GET\n    public void asyncService(@Suspended AsyncResponse response){\n        try {\n            Future<User> result = userBean.getUser();\n\n            while(!result.isDone()){\n                try {\n                    TimeUnit.SECONDS.sleep(1);\n                } catch (InterruptedException ex) {\n                    System.err.println(ex.getMessage());\n                }\n            }\n\n            response.resume(Response.ok(result.get()).build());\n        } catch (InterruptedException | ExecutionException ex) {\n            System.err.println(ex.getMessage());\n        }\n    }\n}\n```", "```java\n    @Asynchronous\n    public Future<User> getUser(){\n        long id = new Date().getTime();\n        User user = new User(id, \"User \" + id);\n        return new AsyncResult(user);\n    }\n```", "```java\n    @Asynchronous\n    public void doSomeSlowStuff(User user){\n        try {\n            TimeUnit.SECONDS.sleep(5);\n        } catch (InterruptedException ex) {\n            System.err.println(ex.getMessage());\n        }\n    }\n```", "```java\n    @GET\n    public void asyncService(@Suspended AsyncResponse response){\n        try {\n            Future<User> result = userBean.getUser();\n\n            while(!result.isDone()){\n                try {\n                    TimeUnit.SECONDS.sleep(1);\n                } catch (InterruptedException ex) {\n                    System.err.println(ex.getMessage());\n                }\n            }\n\n            response.resume(Response.ok(result.get()).build());\n        } catch (InterruptedException | ExecutionException ex) {\n            System.err.println(ex.getMessage());\n        }\n    }\n```", "```java\n    <dependency>\n        <groupId>javax</groupId>\n        <artifactId>javaee-api</artifactId>\n        <version>8.0</version>\n        <scope>provided</scope>\n    </dependency>\n```", "```java\npublic class User implements Serializable{\n\n    private Long id;\n    private String name;\n\n    public User(long id, String name){\n        this.id = id;\n        this.name = name;\n    }\n\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n}\n```", "```java\n@Stateless\npublic class UserBean {\n\n    public User getUser() {\n        long id = new Date().getTime();\n        try {\n            TimeUnit.SECONDS.sleep(5);\n            return new User(id, \"User \" + id);\n        } catch (InterruptedException ex) {\n            System.err.println(ex.getMessage());\n            return new User(id, \"Error \" + id);\n        }\n    }\n\n}\n```", "```java\n@Stateless\n@Path(\"asyncService\")\npublic class AsyncService {\n\n    @Inject\n    private UserBean userBean;\n\n    @GET\n    public void asyncService(@Suspended AsyncResponse response) \n    {\n        CompletableFuture\n                .supplyAsync(() -> userBean.getUser())\n                .thenAcceptAsync((u) -> {\n                    response.resume(Response.ok(u).build());\n                }).exceptionally((t) -> {\n                    response.resume(Response.status\n                    (Response.Status.\n                    INTERNAL_SERVER_ERROR).entity(t.getMessage())\n                    .build());\n                    return null;\n                });\n    }\n}\n```"]