["```java\npublic class Players {\n\n  private String player;\n  private byte age;\n  private String birthplace;\n  private String residence;\n  private short height;\n  private byte weight;\n  private String coach;\n  private Date born;\n  private int ranking;\n\n  public Players() {}\n\n  public Players(int ranking, String player, byte age, String birthplace, String residence, short height, byte weight, String coach, Date born) {\n\n    this.ranking = ranking;\n    this.player = player;\n    this.age = age;\n    this.birthplace = birthplace;\n    this.residence = residence;\n    this.height = height;\n    this.weight = weight;\n    this.coach = coach;\n    this.born = born;\n  }  \n ...\n  //getters and setters\n\n}\n```", "```java\n@Named\n@ViewScoped\npublic class PlayersBean implements Serializable{\n\n  List<Players> data = new ArrayList<>();\n  final SimpleDateFormat sdf = new SimpleDateFormat(\"dd.MM.yyyy\");\n\n  public PlayersBean() {\n    try {\n      data.add(new Players(2, \"NOVAK DJOKOVIC\", (byte) 26, \"Belgrade, Serbia\", \"Monte Carlo, Monaco\", (short) 188, (byte) 80, \"Boris Becker, Marian Vajda\", sdf.parse(\"22.05.1987\")));\n      data.add(new Players(1, \"RAFAEL NADAL\", (byte) 27, \"Manacor, Mallorca, Spain\", \"Manacor, Mallorca, Spain\", (short) 185, (byte) 85, \"Toni Nadal\", sdf.parse(\"03.06.1986\")));\n      data.add(new Players(7, \"TOMAS BERDYCH\", (byte) 28, \"Valasske Mezirici, Czech\", \"Monte Carlo, Monaco\", (short) 196, (byte) 91, \"Tomas Krupa\", sdf.parse(\"17.09.1985\")));\n      ...\n\n    } catch (ParseException ex) {             \n      Logger.getLogger(PlayersBean.class.getName()).log(Level.SEVERE, null, ex);\n    }\n  }\n\n  public List<Players> getData() {\n    return data;\n  }\n\n  public void setData(List<Players> data) {\n    this.data = data;\n  }\n}\n```", "```java\n...\n<h:dataTable value=\"#{playersBean.data}\" var=\"t\">\n  <h:column>\n    <f:facet name=\"header\">Ranking</f:facet>\n    #{t.ranking}\n  </h:column>\n  <h:column>\n    <f:facet name=\"header\">Name</f:facet>\n    #{t.player}\n  </h:column>\n  <h:column>\n    <f:facet name=\"header\">Age</f:facet>\n    #{t.age}\n  </h:column>\n  <h:column>\n    <f:facet name=\"header\">Birthplace</f:facet>\n    #{t.birthplace}\n  </h:column>\n  <h:column>\n    <f:facet name=\"header\">Residence</f:facet>\n    #{t.residence}\n  </h:column>\n  <h:column>\n    <f:facet name=\"header\">Height (cm)</f:facet>\n    #{t.height}\n  </h:column>\n  <h:column>\n    <f:facet name=\"header\">Weight (kg)</f:facet>\n    #{t.weight}\n  </h:column>\n  <h:column>\n    <f:facet name=\"header\">Coach</f:facet>\n    #{t.coach}\n  </h:column>\n  <h:column>\n    <f:facet name=\"header\">Born</f:facet>\n    <h:outputText value=\"#{t.born}\">                \n      <f:convertDateTime pattern=\"dd.MM.yyyy\" />\n    </h:outputText>\n  </h:column>\n</h:dataTable>\n...\n```", "```java\n    ArrayList<Players> dataArrayList = new ArrayList<>();\n    ```", "```java\n    LinkedList<Players> dataLinkedList = new LinkedList<>();\n    ```", "```java\n    HashSet<Players> dataHashSet = new HashSet<>(); \n    ```", "```java\n    TreeSet<Players> dataTreeSet = new TreeSet<>();\n    ```", "```java\n    LinkedHashSet<Players> dataLinkedHashSet = new LinkedHashSet<>();\n    ```", "```java\n    HashMap<String, Players> dataHashMap = new HashMap<>();\n    ```", "```java\n    TreeMap<String, Players> dataTreeMap = new TreeMap<>();\n    ```", "```java\n    LinkedHashMap<String, Players> dataLinkedHashMap = new LinkedHashMap<>();\n    ```", "```java\n    <h:dataTable value=\"#{playersBean.dataArrayList}\" var=\"t\">\n      <h:column>\n        <f:facet name=\"header\">Ranking</f:facet>\n        #{t.ranking}\n      </h:column>\n    ...\n    </h:dataTable>\n    ```", "```java\n    <h:dataTable value=\"#{playersBean.dataLinkedList}\" var=\"t\">\n      <h:column>\n        <f:facet name=\"header\">Ranking</f:facet>\n        #{t.ranking}\n      </h:column>\n    ...\n    </h:dataTable>\n    ```", "```java\n    <h:dataTable value=\"#{playersBean.dataHashSet}\" var=\"t\">\n      <h:column>\n        <f:facet name=\"header\">Ranking</f:facet>\n        #{t.ranking}\n      </h:column>\n    ...\n    </h:dataTable>\n    ```", "```java\n    <h:dataTable value=\"#{playersBean.dataTreeSet}\" var=\"t\">\n      <h:column>\n        <f:facet name=\"header\">Ranking</f:facet>\n        #{t.ranking}\n      </h:column>\n    ...\n    </h:dataTable>\n    ```", "```java\n    <h:dataTable value=\"#{playersBean.dataLinkedHashSet}\" var=\"t\">\n      <h:column>\n        <f:facet name=\"header\">Ranking</f:facet>\n        #{t.ranking}\n      </h:column>\n    ...\n    </h:dataTable>\n    ```", "```java\n    <h:dataTable value=\"#{playersBean.dataHashMap.entrySet()}\" var=\"t\">\n      <h:column>\n        <f:facet name=\"header\">Ranking</f:facet>\n        #{t.key}             \n      </h:column> \n      <h:column>\n        <f:facet name=\"header\">Name</f:facet>\n        #{t.value.player}\n      </h:column>\n    ...\n    </h:dataTable>\n    ```", "```java\n    <h:dataTable value=\"#{playersBean.dataTreeMap.entrySet()}\" var=\"t\">\n      <h:column>\n        <f:facet name=\"header\">Ranking</f:facet>  \n        #{t.key}             \n      </h:column> \n      <h:column>\n        <f:facet name=\"header\">Name</f:facet>\n        #{t.value.player}\n      </h:column>\n    ...\n    </h:dataTable>\n    ```", "```java\n    <h:dataTable value=\"#{playersBean.dataLinkedHashMap.entrySet()}\" var=\"t\">\n      <h:column>\n        <f:facet name=\"header\">Ranking</f:facet>\n        #{t.key}             \n      </h:column> \n      <h:column>\n        <f:facet name=\"header\">Name</f:facet>\n        #{t.value.player}\n      </h:column>\n    ...\n    </h:dataTable>\n    ```", "```java\nHashMap<String, Players> dataHashMap = new HashMap<>(); \n\npublic Collection<Players> getDataHashMap() {\n  return dataHashMap.values();\n}\n```", "```java\n<h:dataTable value=\"#{playersBean.dataHashMap}\" var=\"t\">\n  <h:column>\n    <f:facet name=\"header\">Ranking</f:facet>\n    #{t.ranking}             \n  </h:column>\n...\n</h:dataTable>\n```", "```java\n    ...\n    String dir=\"asc\"; //or \"dsc\" for descending sort\n\n    Collections.sort(data, new Comparator<Players>() {\n      @Override\n      public int compare(Players key_1, Players key_2) {\n        if (dir.equals(\"asc\")) {\n          return key_1.getPlayer().compareTo(key_2.getPlayer());\n        } else {\n          return key_2.getPlayer().compareTo(key_1.getPlayer());\n        }\n      }\n    });\n    ...\n    ```", "```java\n    ...\n    int dir = 1; //1 for ascending, -1 for descending\n\n    Collections.sort(data, new Comparator<Players>() {\n      @Override\n      public int compare(Players key_1, Players key_2) {\n        return dir * (key_1.getRanking() - key_2.getRanking());\n      }\n    });\n    ...\n    ```", "```java\n    ...\n    String dir=\"asc\"; //or \"dsc\" for descending sort\n\n    Collections.sort(data, new Comparator<Players>() {\n      @Override\n      public int compare(Players key_1, Players key_2) {\n        if (dir.equals(\"asc\")) {\n          return key_1.getBorn().compareTo(key_2.getBorn());\n        } else {\n          return key_2.getBorn().compareTo(key_1.getBorn());\n        }\n      }\n    });\n    ...\n    ```", "```java\n@Named\n@ViewScoped\npublic class PlayersBean implements Serializable{\n\n  List<Players> data = new ArrayList<>();\n  final SimpleDateFormat sdf = new SimpleDateFormat(\"dd.MM.yyyy\");\n\n  public PlayersBean() {\n    try {\n      data.add(new Players(2, \"NOVAK DJOKOVIC\", (byte) 26, \"Belgrade, Serbia\", \"Monte Carlo, Monaco\", (short) 188, (byte) 80, \"Boris Becker, Marian Vajda\", sdf.parse(\"22.05.1987\")));\n...\n    } catch (ParseException ex) {\n      Logger.getLogger(PlayersBean.class.getName()).log(Level.SEVERE, null, ex);\n    }\n  }\n\n  public List<Players> getData() {\n    return data;\n  }\n\n  public void setData(List<Players> data) {\n    this.data = data;\n  }\n\n public String sortDataByRanking(final int dir) {\n\n Collections.sort(data, new Comparator<Players>() {\n @Override\n public int compare(Players key_1, Players key_2) {\n return dir * (key_1.getRanking() - key_2.getRanking());\n }\n });\n return null;\n }\n\n public String sortDataByName(final String dir) {\n\n Collections.sort(data, new Comparator<Players>() {\n @Override\n public int compare(Players key_1, Players key_2) {\n if (dir.equals(\"asc\")) {\n return key_1.getPlayer().compareTo(key_2.getPlayer());\n } else {\n return key_2.getPlayer().compareTo(key_1.getPlayer());\n }\n }\n });\n return null;\n }\n\n public String sortDataByDate(final String dir) {\n\n Collections.sort(data, new Comparator<Players>() {\n @Override\n public int compare(Players key_1, Players key_2) {\n if (dir.equals(\"asc\")) {\n return key_1.getBorn().compareTo(key_2.getBorn());\n } else {\n return key_2.getBorn().compareTo(key_1.getBorn());\n }\n }\n });\n return null;\n }\n...\n```", "```java\n...\n<h:dataTable value=\"#{playersBean.data}\" var=\"t\" border=\"1\">\n  <h:column>\n    <f:facet name=\"header\">\n      <h:commandLink action=\"#{playersBean.sortDataByRanking(1)}\">\n        Ranking ASC\n      </h:commandLink>\n   |\n      <h:commandLink action=\"#{playersBean.sortDataByRanking(-1)}\">\n        Ranking DSC\n      </h:commandLink>\n    </f:facet>\n    #{t.ranking}\n  </h:column>\n  <h:column>\n    <f:facet name=\"header\">\n      <h:commandLink action=\"#{playersBean.sortDataByName('asc')}\">\n        Name ASC\n      </h:commandLink>\n      |\n      <h:commandLink action=\"#{playersBean.sortDataByName('dsc')}\">\n        Name DSC\n      </h:commandLink>\n    </f:facet>\n    #{t.player}\n  </h:column>\n ...\n  <h:column>\n    <f:facet name=\"header\">\n      <h:commandLink action=\"#{playersBean.sortDataByDate('asc')}\">\n        Born ASC\n      </h:commandLink>\n      |\n      <h:commandLink action=\"#{playersBean.sortDataByDate('dcs')}\">\n        Born DSC\n      </h:commandLink>\n    </f:facet>\n    <h:outputText value=\"#{t.born}\">                \n      <f:convertDateTime pattern=\"dd.MM.yyyy\" />\n    </h:outputText>\n  </h:column>\n</h:dataTable>\n...\n```", "```java\n...\nprivate String sortType = \"asc\";\n...\n```", "```java\n...\npublic String sortDataByRanking() {\n\n  Collections.sort(data, new Comparator<Players>() {\n    @Override\n    public int compare(Players key_1, Players key_2) {\n      if(sortType.equals(\"asc\")){                    \n        return key_1.getRanking() - key_2.getRanking();\n      } else {                    \n        return (-1) * (key_1.getRanking() - key_2.getRanking());\n      }\n    }\n  });\n\n  sortType = (sortType.equals(\"asc\")) ? \"dsc\" : \"asc\";       \n  return null;\n}\n...\n```", "```java\n...\n<h:dataTable value=\"#{playersBean.data}\" var=\"t\" border=\"1\">\n  <h:column>\n    <f:facet name=\"header\">\n      <h:commandLink action=\"#{playersBean.sortDataByRanking()}\">\n        Ranking\n      </h:commandLink> \n    </f:facet>\n    #{t.ranking}\n  </h:column>\n...\n```", "```java\n    public class SortDataModel<T> extends CollectionDataModel<T> {\n    ...\n    ```", "```java\n    ...\n    CollectionDataModel<T> model;\n    private Integer[] rows;\n\n    public SortDataModel(CollectionDataModel<T> model) {\n      this.model = model;    \n      initRows();\n    }\n\n    private void initRows() {\n      int rowCount = model.getRowCount();\n      if (rowCount != -1) {\n        this.rows = new Integer[rowCount];\n        for (int i = 0; i < rowCount; ++i) {\n          rows[i] = i;\n        }\n      }\n    }\n    ...\n    ```", "```java\n    @Override\n    public void setRowIndex(int rowIndex) {\n\n      if ((0 <= rowIndex) && (rowIndex < rows.length)) {\n        model.setRowIndex(rows[rowIndex]);\n      } else {\n        model.setRowIndex(rowIndex);\n      }\n    }\n    ```", "```java\n    public void sortThis(final Comparator<T> comparator) {\n      Comparator<Integer> rowc = new Comparator<Integer>() {\n        @Override\n        public int compare(Integer key_1, Integer key_2) {\n          T key_1_data = getData(key_1);\n          T key_2_data = getData(key_2);\n          return comparator.compare(key_1_data, key_2_data);\n        }\n      };\n      Arrays.sort(rows, rowc);\n    }\n\n    private T getData(int row) {\n      int baseRowIndex = model.getRowIndex();\n      model.setRowIndex(row);\n      T newRowData = model.getRowData();\n      model.setRowIndex(baseRowIndex);\n\n      return newRowData;\n    }\n    ```", "```java\n    private HashSet<Players> dataHashSet = new HashSet<>();\n    private SortDataModel<Players> sortDataModel;  \n    ...\n    public PlayersBean() {\n      dataHashSet.add(new Players(2, \"NOVAK DJOKOVIC\", (byte) 26, \"Belgrade, Serbia\", \"Monte Carlo, Monaco\", (short) 188, (byte) 80, \"Boris Becker, Marian Vajda\", sdf.parse(\"22.05.1987\")));\n    ...\n\n      sortDataModel = new SortDataModel<>(new CollectionDataModel<>(dataHashSet));\n    }\n    ...\n    ```", "```java\n    public void deleteRowHashSet(Players player) {\n      dataHashSet.remove(player);       \n    }\n    ```", "```java\n    public void deleteRowHashMap(Object key) {\n      dataHashMap.remove(String.valueOf(key));       \n    }\n    ```", "```java\n    <h:dataTable value=\"#{playersBean.dataHashSet}\" var=\"t\">\n    ...\n      <h:column>\n        <f:facet name=\"header\">Delete</f:facet>\n        <h:commandLink value=\"Delete\" action=\"#{playersBean.deleteRowHashSet(t)}\" /> \n      </h:column>\n    ...\n    </h:dataTable>\n    ```", "```java\n    <h:dataTable value=\"#{playersBean.dataHashMap.entrySet()}\" var=\"t\">\n    ...\n      <h:column>\n        <f:facet name=\"header\">Delete</f:facet>\n        <h:commandLink value=\"Delete\" action=\"#{playersBean.deleteRowHashMap(t.key)}\" /> \n      </h:column>\n    ...\n    </h:dataTable>\n    ```", "```java\npublic class Players {\n  ...\n  private boolean edited;\n  ...\n  public boolean isEdited() {\n    return edited;\n  }\n\n  public void setEdited(boolean edited) {\n    this.edited = edited;\n  }        \n}\n```", "```java\n    ...\n    <h:column>\n      <f:facet name=\"header\">Edit</f:facet>\n      <h:commandLink value=\"Edit\" action=\"#{playersBean.editRowHashSet(t)}\" rendered=\"#{not t.edited}\" /> \n    </h:column>\n    ...\n    ```", "```java\n    ...\n    <h:column>\n      <f:facet name=\"header\">Edit</f:facet>\n      <h:commandLink value=\"Edit\" action=\"#{playersBean.editRowHashMap(t.value)}\" rendered=\"#{not t.value.edited}\"/> \n    </h:column>\n    ...\n    ```", "```java\n    public void editRowHashSet(Players player) {\n      player.setEdited(true);\n    }\n    ```", "```java\n    public void editRowHashMap(Players player) {\n      player.setEdited(true);\n    }\n    ```", "```java\n    ...\n    <h:column>\n      <f:facet name=\"header\">Name</f:facet>\n      <h:inputText value=\"#{t.player}\" rendered=\"#{t.edited}\" />\n      <h:outputText value=\"#{t.player}\" rendered=\"#{not t.edited}\" />\n    </h:column>\n    ...\n    ```", "```java\n    ...\n    <h:column>\n      <f:facet name=\"header\">Name</f:facet>\n      <h:inputText value=\"#{t.value.player}\" rendered=\"#{t.value.edited}\" />\n      <h:outputText value=\"#{t.value.player}\" rendered=\"#{not t.value.edited}\" />\n    </h:column>\n    ...\n    ```", "```java\n    <h:commandButton value=\"Save Hash Set Changes\" action=\"#{playersBean.saveHashSet()}\" />\n    ```", "```java\n    <h:commandButton value=\"Save Hash Map Changes\" action=\"#{playersBean.saveHashMap()}\" />\n    ```", "```java\n    public void saveHashSet() {\n      for (Players player : dataHashSet) {\n        player.setEdited(false);\n      }\n    }\n    ```", "```java\n    public void saveHashMap() {\n      for (Map.Entry pairs : dataHashMap.entrySet()) {\n        ((Players) pairs.getValue()).setEdited(false);\n      }\n    }\n    ```", "```java\n...\n<h:inputText value=\"#{playersBean.player}\"/>\n<h:inputText value=\"#{playersBean.age}\"/>\n<h:inputText value=\"#{playersBean.birthplace}\"/>\n<h:inputText value=\"#{playersBean.residence}\"/>\n<h:inputText value=\"#{playersBean.height}\"/>\n<h:inputText value=\"#{playersBean.weight}\"/>\n<h:inputText value=\"#{playersBean.coach}\"/>\n<h:inputText value=\"#{playersBean.born}\">\n  <f:convertDateTime pattern=\"dd.MM.yyyy\" />\n</h:inputText>\n<h:inputText value=\"#{playersBean.ranking}\"/>\n<h:commandButton value=\"Add Player\" action=\"#{playersBean.addNewPlayer()}\"/>\n...\n```", "```java\npublic void addNewPlayer() {\n  Players new_player = new Players(ranking, player, age, birthplace, residence, height, weight, coach, born);\n  //adding in a Set\n  dataHashSet.add(new_player); \n  //adding in a Map\n  dataHashMap.put(String.valueOf(ranking), new_player);\n}\n```", "```java\n    LinkedHashSet<Players> dataHashSet = new LinkedHashSet<>();\n    LinkedHashMap<String, Players> dataHashMap = new LinkedHashMap<>();\n    ```", "```java\n        ...\n        <h:commandButton value=\"Add New Row\"  action=\"#{playersBean.addNewRowInSet()}\" />\n        ...\n        public void addNewRowInSet() {\n          Players new_player = new Players();\n          new_player.setEdited(true);\n          dataHashSet.add(new_player);\n        }\n        ```", "```java\n        ...\n        <h:commandButton value=\"Add New Row\" action=\"#{playersBean.addNewRowInMap()}\" />\n        ...\n\n        public void addNewRowInMap() {\n          Players new_player = new Players();\n          new_player.setEdited(true);\n          dataHashMap.put(String.valueOf(dataHashMap.size() + 1), new_player);\n        }\n        ```", "```java\n<h:dataTable value=\"...\" binding=\"#{table}\" var=\"t\">\n  <h:column>\n    <f:facet name=\"header\">No</f:facet> \n    #{table.rowIndex+1}.\n  </h:column>\n...\n```", "```java\n<h:dataTable value=\"#{playersBean.dataHashSet}\" var=\"t\" border=\"1\">\n  <h:column>\n    <f:facet name=\"header\">Select</f:facet>\n    <h:commandButton value=\"#\" action=\"#{playersBean.showSelectedPlayer(t)}\"/> \n    </h:column>\n...\n```", "```java\n<script type=\"text/javascript\">\n//<![CDATA[\n    function deselectRadios(id, val) {\n\n      var f = document.getElementById(\"hashMapFormId\");\n      for (var i = 0; i < f.length; i++)\n      {\n        var e = f.elements[i];\n        var eid = e.id;\n        if (eid.indexOf(\"radiosId\") !== -1) {\n          if (eid.indexOf(id) === -1) {\n            e.checked = false;\n          } else {\n            e.checked = true;\n            document.getElementById(\"hashMapFormId:selectedRowId\").value = val;\n          }\n        }\n      }\n    }\n  //]]>\n</script>  \n```", "```java\n<h:dataTable value=\"#{playersBean.dataHashMap.entrySet()}\" var=\"t\">\n  <h:column>\n    <f:facet name=\"header\">Select</f:facet>\n    <h:selectOneRadio id=\"radiosId\" \n      onclick=\"deselectRadios(this.id, '#{t.key}');\">\n      <f:selectItem itemValue=\"null\"/>\n    </h:selectOneRadio>\n  </h:column>\n...\n```", "```java\n<h:inputHidden id=\"selectedRowId\" value=\"#{playersBean.selectedPlayerKey}\"/>\n<h:commandButton value=\"Show Hash Map Selection\" action=\"#{playersBean.showSelectedPlayer()}\" />\n```", "```java\npublic void showSelectedPlayer() {\n  Players player = dataHashMap.get(selectedPlayerKey);\n\n  if (player != null) {\n    logger.log(Level.INFO, \"Selected player:{0}\", player.getPlayer());\n  } else {\n    logger.log(Level.INFO, \"No player selected!\");\n  }        \n}\n```", "```java\npublic class Players {\n...\n  private boolean selected;\n  ...\n  public boolean isSelected() {\n    return selected;\n  }\n\n  public void setSelected(boolean selected) {\n    this.selected = selected;\n}\n...\n```", "```java\n<h:dataTable value=\"#{playersBean.dataHashSet}\" var=\"t\">\n  <h:column>\n    <f:facet name=\"header\">Select</f:facet>\n    <h:selectBooleanCheckbox value=\"#{t.selected}\" /> \n  </h:column>\n...\n```", "```java\n<h:commandButton value=\"Show Selected Players\" action=\"#{playersBean.showSelectedPlayers()}\" />\n```", "```java\n...\nHashSet<Players> dataHashSet = new HashSet<>();\nList<Players> selectedPlayers  = new ArrayList<>();\n...\npublic void showSelectedPlayers() {\n  selectedPlayers.clear();\n  for (Players player : dataHashSet) {\n    if(player.isSelected()){\n      logger.log(Level.INFO, \"Selected player: {0}\", layer.getPlayer());\n      selectedPlayers.add(player);\n      player.setSelected(false);\n    }\n  }   \n\n  //the selected players were extracted in a List ...\n}\n```", "```java\nHashMap<Players, HashSet<Trophies>> dataHashMap = new HashMap<>();\n```", "```java\n<h:dataTable value=\"#{playersBean.dataHashMap.entrySet()}\" var=\"t\">\n  <h:column>\n    <f:facet name=\"header\">Ranking</f:facet>\n    #{t.key.ranking}\n  </h:column>\n  <h:column>\n    <f:facet name=\"header\">Name</f:facet>\n    #{t.key.player}\n  </h:column>\n    ...\n  <h:column>\n    <f:facet name=\"header\">Trophies 2013</f:facet>\n    <h:dataTable value=\"#{t.value}\" var=\"q\" border=\"1\">\n    <h:column> \n      #{q.trophy}\n    </h:column>\n    </h:dataTable>\n  </h:column>\n</h:dataTable>\n```", "```java\n<h:dataTable value=\"#{playersBean.dataHashSet}\" binding=\"#{playersBean.table}\" rows=\"#{playersBean.rowsOnPage}\" first=\"0\" var=\"t\">\n...\n```", "```java\n    <b>FIRST:</b> #{playersBean.table.first}\n    <b>ROWS:</b> #{playersBean.table.rows}\n    <b>ROW COUNT:</b> #{playersBean.table.rowCount}                    \n    ```", "```java\n    public void goToFirstPage() {\n      table.setFirst(0);\n    }\n    ```", "```java\n    <h:commandButton value=\"First Page\" action=\"#{playersBean.goToFirstPage()}\" disabled=\"#{playersBean.table.first eq 0}\" />\n    ```", "```java\n    public void goToNextPage() {\n      table.setFirst(table.getFirst() + table.getRows());\n    }\n    ```", "```java\n    <h:commandButton value=\"Next Page\" action=\"#{playersBean.goToNextPage()}\" disabled=\"#{playersBean.table.first + playersBean.table.rows ge playersBean.table.rowCount}\" /> \n    ```", "```java\n    public void goToPreviousPage() {\n      table.setFirst(table.getFirst() - table.getRows());\n    }     \n    ```", "```java\n    <h:commandButton value=\"Previous Page\" action=\"#{playersBean.goToPreviousPage()}\" disabled=\"#{playersBean.table.first eq 0}\" />\n    ```", "```java\n    public void goToLastPage() {\n      int totalRows = table.getRowCount();\n      int displayRows = table.getRows();\n      int full = totalRows / displayRows;\n      int modulo = totalRows % displayRows;\n\n      if (modulo > 0) {\n        table.setFirst(full * displayRows);\n      } else {\n        table.setFirst((full - 1) * displayRows);\n      }\n    }\n    ```", "```java\n    <h:commandButton value=\"Last Page\" action=\"#{playersBean.goToLastPage()}\" disabled=\"#{playersBean.table.first + playersBean.table.rows ge playersBean.table.rowCount}\" />\n    ```", "```java\n    <h:outputText value=\"#{(playersBean.table.first div playersBean.table.rows) + 1}\">\n        <f:converter converterId=\"javax.faces.Integer\"/>\n    </h:outputText>\n    of   \n    <h:outputText value=\"#{playersBean.table.rowCount mod playersBean.table.rows eq 0 ? (playersBean.table.rowCount div playersBean.table.rows) : ((playersBean.table.rowCount div playersBean.table.rows) + 1)-(((playersBean.table.rowCount div playersBean.table.rows) + 1) mod 1)}\">\n        <f:converter converterId=\"javax.faces.Integer\"/>\n    </h:outputText>\n    ```", "```java\npublic HashSet<Players> loadPlayersAction(int first, int max) {\n\n  Query query = em.createNamedQuery(\"Players.findAll\");\n  query.setFirstResult(first);\n  query.setMaxResults(max);\n\n  return new HashSet(query.getResultList());\n}\n```", "```java\npublic int countPlayersAction() {\n  Query query = em.createNamedQuery(\"Players.countAll\");\n  return ((Long)query.getSingleResult()).intValue();\n}\n```", "```java\npublic class PlayersDataModel extends CollectionDataModel {\n\n  private int rowIndex = -1;\n  private int allRowsCount;\n  private int pageSize;\n  private HashSet hashSet;   \n\n  public PlayersDataModel() {}\n\n  public PlayersDataModel(HashSet hashSet, int allRowsCount, int pageSize)     \n  {            \n    this.hashSet = hashSet;\n    this.allRowsCount = allRowsCount;\n    this.pageSize = pageSize;        \n  }   \n\n  @Override\n  public boolean isRowAvailable() {     \n    if (hashSet == null) {\n      return false;\n    }\n\n    int c_rowIndex = getRowIndex();\n    if (c_rowIndex >= 0 && c_rowIndex < hashSet.size()) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  @Override\n  public int getRowCount() {       \n    return allRowsCount;\n  }\n\n  @Override\n  public Object getRowData() {       \n    if (hashSet == null) {\n      return null;\n    } else if (!isRowAvailable()) {\n      throw new IllegalArgumentException();\n    } else {\n      int dataIndex = getRowIndex();\n      Object[] arrayView = hashSet.toArray();\n      return arrayView[dataIndex];\n    }\n  }\n\n  @Override\n  public int getRowIndex() {      \n    return (rowIndex % pageSize);\n  }\n\n  @Override\n  public void setRowIndex(int rowIndex) {     \n    this.rowIndex = rowIndex;\n  }\n\n  @Override\n  public Object getWrappedData() {       \n    return hashSet;\n  }\n\n  @Override\n  public void setWrappedData(Object hashSet) {      \n    this.hashSet = (HashSet) hashSet;\n  }\n}\n```", "```java\n...\n@Inject\nprivate PlayersSessionBean playersSessionBean;\nprivate int rowsOnPage;\nprivate int allRowsCount = 0;\n...\n@PostConstruct\npublic void initHashSet() {\n  rowsOnPage = 4; //any constant in [1, rowCount]\n  allRowsCount = playersSessionBean.countPlayersAction();\n  lazyDataLoading(0);\n}\n...\nprivate void lazyDataLoading(int first) {\n  HashSet<Players> dataHashSet = playersSessionBean.loadPlayersAction(first, rowsOnPage);\n  playersDataModel = new PlayersDataModel(dataHashSet, allRowsCount, rowsOnPage);\n}\n```", "```java\nlazyDataLoading(table.getFirst());\n```", "```java\n<h:body>\n  <h:form id=\"tableForm\">     \n    <h:panelGrid id=\"myTable\">                \n    </h:panelGrid>\n    <h:commandButton value=\"Add Table\" action=\"#{playersBean.addTable()}\"/>\n  </h:form>        \n</h:body> \n```", "```java\n    public HtmlDataTable createTable(String exp, Class<?> cls) {\n      HtmlDataTable table = new HtmlDataTable();\n      table.setValueExpression(\"value\", createValueExpression(exp, cls));\n      table.setVar(\"t\");\n      table.setBorder(1);\n\n      return table;\n    }\n    ```", "```java\n    public HtmlColumn createColumn(HtmlDataTable table, String header_name, String footer_name, String exp, Class<?> cls, Class<?> converter) {\n\n      HtmlColumn column = new HtmlColumn();\n      table.getChildren().add(column);\n\n      if (header_name != null) {\n        HtmlOutputText header = new HtmlOutputText();\n        header.setValue(header_name);\n        column.setHeader(header);\n      }\n\n      if (footer_name != null) {\n        HtmlOutputText footer = new HtmlOutputText();\n        footer.setValue(footer_name);\n        column.setFooter(footer);\n      }\n\n      HtmlOutputText output = new HtmlOutputText();\n      output.setValueExpression(\"value\", createValueExpression(exp, cls));\n      column.getChildren().add(output);\n\n      if (converter != null) {\n        if (converter.getGenericInterfaces()[0].equals(Converter.class)) {\n          if (converter.equals(DateTimeConverter.class)) {\n            DateTimeConverter dateTimeConverter = new DateTimeConverter();\n            dateTimeConverter.setPattern(\"dd.MM.yyyy\");\n            output.setConverter(dateTimeConverter);\n          }\n          //more converters ...\n        } else {\n          //the passed class is not a converter!\n        }\n      }\n\n      return column;\n    }\n    ```", "```java\n    public void attachTable(HtmlDataTable table, String parent_id) throws NullPointerException {\n      UIComponent component = findComponent(parent_id);\n      if (component != null) {\n        component.getChildren().clear();\n        component.getChildren().add(table);\n      } else {\n        throw new NullPointerException();\n      }\n    }\n    ```", "```java\n    private UIComponent findComponent(final String id) {\n      FacesContext context = FacesContext.getCurrentInstance();\n      UIViewRoot root = context.getViewRoot();\n      final UIComponent[] found = new UIComponent[1];\n      root.visitTree(new FullVisitContext(context), new VisitCallback() {\n\n        @Override\n        public VisitResult visit(VisitContext context, UIComponent component) {\n          if (component.getId().equals(id)) {\n            found[0] = component;\n            return VisitResult.COMPLETE;\n          }\n          return VisitResult.ACCEPT;\n        }\n      });\n      return found[0];\n    }\n    ```", "```java\n    private ValueExpression createValueExpression(String exp, Class<?> cls) {\n      FacesContext facesContext = FacesContext.getCurrentInstance();\n      ELContext elContext = facesContext.getELContext();\n      return facesContext.getApplication().getExpressionFactory().createValueExpression(elContext, exp, cls);\n    }\n    ```", "```java\n    public void addTable() {\n\n      TableHelper tableHelper = new TableHelper();\n      HtmlDataTable tableHashSet = tableHelper.createTable(\"#{playersBean.dataHashSet}\", HashSet.class);\n      tableHelper.createColumn(tableHashSet, \"Ranking\", null, \"#{t.ranking}\", Integer.class, null);\n      tableHelper.createColumn(tableHashSet, \"Name\", null, \"#{t.player}\", String.class, null);\n      tableHelper.createColumn(tableHashSet, \"Age\", null, \"#{t.age}\", Byte.class, null);\n      tableHelper.createColumn(tableHashSet, \"Birthplace\", null, \"#{t.birthplace}\", String.class, null);\n      tableHelper.createColumn(tableHashSet, \"Residence\", null, \"#{t.residence}\", String.class, null);\n      tableHelper.createColumn(tableHashSet, \"Height (cm)\", null, \"#{t.height}\", Short.class, null);\n      tableHelper.createColumn(tableHashSet, \"Weight (kg)\", null, \"#{t.weight}\", Byte.class, null);\n      tableHelper.createColumn(tableHashSet, \"Coach\", null, \"#{t.coach}\", String.class, null);\n      tableHelper.createColumn(tableHashSet, \"Born\", null, \"#{t.born}\", java.util.Date.class, DateTimeConverter.class);\n      tableHelper.attachTable(tableHashSet, \"myTable\");\n    }\n    ```", "```java\n@Inject\n//this is the EJB component that queries the database  \nprivate QueryBean queryBean;\nHashSet<Object> dataHashSet = new HashSet<>();\n...\npublic void addTable(String selectedTable) {\n\n  try {\n    dataHashSet.clear();\n\n    dataHashSet = queryBean.populateData(selectedTable);\n\n    String tableToQuery = \"book.ejbs.\" + selectedTable;\n\n    Class tableClass = Class.forName(tableToQuery);\n    Field[] privateFields = tableClass.getDeclaredFields();\n\n    TableHelper tableHelper = new TableHelper();\n    HtmlDataTable tableHashSet = tableHelper.createTable(\"#{playersBean.dataHashSet}\", HashSet.class);\n\n    for (int i = 0; i < privateFields.length; i++) {                \n      String privateField = privateFields[i].getName();                \n      if ((!privateField.startsWith(\"_\")) && (!privateField.equals(\"serialVersionUID\"))) {\n        tableHelper.createColumn(tableHashSet, privateField, null, \"#{t.\"+privateField+\"}\", \n          privateFields[i].getType(), null);\n      }\n    }\n\n    tableHelper.attachTable(tableHashSet, \"myTable\");\n\n  } catch (ClassNotFoundException ex) {\n    Logger.getLogger(PlayersBean.class.getName()).log(Level.SEVERE, null, ex);\n}\n```", "```java\n.rowshow\n{\n  display:visible;\n}\n\n.rowhide \n{\n  display:none;\n}\n```", "```java\nrowshow, rowhide, rowshow, rowhide, rowhide\n```", "```java\n    ...\n    <h:column>\n      <f:facet name=\"header\">\n        Age<br/>\n        <h:selectOneMenu value=\"#{playersBean.criteria}\">\n          <f:selectItem itemValue=\"all\" itemLabel=\"all\" />\n          <f:selectItem itemValue=\"&lt;26\" itemLabel=\"&lt;26\" />\n          <f:selectItem itemValue=\"&gt;=26\" itemLabel=\"&gt;=26\" />                            \n        </h:selectOneMenu>\n        <h:commandButton value=\"Go!\" action=\"#{playersBean.addTableFilter()}\"/>\n      </f:facet>                                      \n      <h:outputText value=\"#{t.age}\"/>\n    </h:column>\n    ...\n    ```", "```java\n    public void addTableFilter() {\n\n      if (!criteria.equals(\"all\")) {\n        String c = \"\";\n        for (int i = 0; i < table.getRowCount(); i++) {\n          table.setRowIndex(i);\n          Players player = (Players) table.getRowData();\n          if (criteria.equals(\"<26\")) {\n            if (player.getAge() >= 26) {\n              c = c + \"rowhide,\";\n            } else {\n              c = c + \"rowshow,\";\n            }\n          }\n          if (criteria.equals(\">=26\")) {\n            if (player.getAge() < 26) {\n              c = c + \"rowhide,\";\n            } else {\n              c = c + \"rowshow,\";\n            }\n          }\n        }\n\n        String css = \"rowshow\";\n        if (!c.isEmpty()) {\n          css = c.substring(0, c.length() - 1);\n        }\n\n        rowsOnPage = table.getRowCount();\n        table.setRowClasses(css);\n        table.setFirst(0);\n      } else {\n        removeTableFilter();\n      }\n    }\n    ```", "```java\n    public void removeTableFilter() {\n      String css = \"rowshow\";\n      rowsOnPage = 4;  //any constant in [1, rowCount]\n      table.setRowClasses(css);\n      table.setFirst(0);\n    }\n    ```", "```java\npublic void addTableFilter() {\n\n  initHashSet();\n\n  Iterator<Players> i = dataHashSet.iterator();\n  while (i.hasNext()) {\n    Players player = i.next();\n    if (criteria.equals(\"<26\")) {\n      if (player.getAge() >= 26) {\n        i.remove();\n      }\n    }\n    if (criteria.equals(\">=26\")) {\n      if (player.getAge() < 26) {\n        i.remove();\n      }\n    }\n  }\n\n  table.setFirst(0);\n}\n```", "```java\n    @Inject\n    private PlayersSessionBean playersSessionBean; \n    private PlayersDataModel playersDataModel;         \n    private String criteria = \"all\";\n    private String copy_criteria = \"none\";\n    private int allRowsCount = 0;\n    ...\n    private void lazyDataLoading(int first) {\n      if (!copy_criteria.equals(criteria)) {           \n        allRowsCount = playersSessionBean.countPlayersAction(criteria);\n        copy_criteria = criteria;\n      }\n\n      HashSet<Players> dataHashSet = playersSessionBean.loadPlayersAction(first, rowsOnPage, criteria);\n      playersDataModel = new PlayersDataModel(dataHashSet, allRowsCount, rowsOnPage);\n    }\n    ```", "```java\n    public int countPlayersAction(String criteria) {\n\n      if (criteria.equals(\"all\")) {\n        Query query = em.createNamedQuery(\"Players.countAll\");\n        return ((Long) query.getSingleResult()).intValue();\n      }\n\n      if (criteria.equals(\"<26\")) {\n        Query query = em.createQuery(\"SELECT COUNT(p) FROM Players p WHERE p.age < 26\");\n        return ((Long) query.getSingleResult()).intValue();\n      }\n\n      if (criteria.equals(\">=26\")) {\n        Query query = em.createQuery(\"SELECT COUNT(p) FROM Players p WHERE p.age >= 26\");\n        return ((Long) query.getSingleResult()).intValue();\n      }\n\n      return 0;\n    }\n    ```", "```java\n    public HashSet<Players> loadPlayersAction(int first, int max, String criteria) {\n\n      if (criteria.equals(\"all\")) {\n        Query query = em.createNamedQuery(\"Players.findAll\");\n        query.setFirstResult(first);\n        query.setMaxResults(max);\n        return new HashSet(query.getResultList());\n      }\n\n      if (criteria.equals(\"<26\")) {\n        Query query = em.createQuery(\"SELECT p FROM Players p WHERE p.age < 26\");\n        query.setFirstResult(first);\n        query.setMaxResults(max);\n        return new HashSet(query.getResultList());\n      }\n\n      if (criteria.equals(\">=26\")) {\n        Query query = em.createQuery(\"SELECT p FROM Players p WHERE p.age >= 26\");\n        query.setFirstResult(first);\n        query.setMaxResults(max);\n        return new HashSet(query.getResultList());\n      }\n\n      return null;\n    }\n    ```", "```java\n<h:dataTable value=\"#{playersBean.data}\" rowClasses=\"even, odd\" var=\"t\">\n...\n```", "```java\n.odd {\n  background-color: gray;\n}\n\n.even{\n  background-color: darkgray;\n}\n```", "```java\n...\n<script type=\"text/javascript\">\n  //<![CDATA[           \n    function onmouseOverOutRows() {\n      var rows = document.getElementById('playersTable').getElementsByTagName('tr');\n      for (var i = 1; i < rows.length; i++) {\n        rows[i].setAttribute(\"onmouseover\", \"this.bgColor='#00cc00'\");\n        rows[i].setAttribute(\"onmouseout\", \"this.bgColor='#ffffff'\");\n      }\n    }\n  //]]>\n</script>\n...\n\n<h:body onload=\"onmouseOverOutRows();\">\n  <h:dataTable id=\"playersTable\" value=\"#{playersBean.data}\" var=\"t\">\n...\n```", "```java\ntbody tr:hover {\n  background-color: red;\n}\n```", "```java\n<script type=\"text/javascript\">\n  //<![CDATA[           \n    function onClickRows() {\n      var rows = document.getElementById('playersTable').getElementsByTagName('tr');\n      for (var i = 1; i < rows.length; i++) {\n        rows[i].setAttribute(\"onclick\", \"changeColor(this);\");\n      }\n    }\n\n    function changeColor(row) {\n      var bgcolor = row.bgColor;\n      if (bgcolor === \"\") {\n        row.bgColor = \"#00cc00\";\n      } else if (bgcolor === \"#00cc00\") {\n        row.bgColor = \"#ffffff\";\n      } else if (bgcolor === \"#ffffff\") {\n        row.bgColor = \"#00cc00\";\n      }\n    }\n   //]]>\n</script>\n...\n<h:body onload=\"onClickRows();\">\n  <h:dataTable id=\"playersTable\" value=\"#{playersBean.data}\" var=\"t\">\n...\n```"]