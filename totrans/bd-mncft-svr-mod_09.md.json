["```java\npackage com.codisimus.warper;\n\nimport org.bukkit.Location;\n\n/**\n * A SerializableLocation represents a Bukkit Location object\n * This class is configuration serializable so that it may be\n * stored using Bukkit's configuration API\n */\npublic class SerializableLocation {\n    private Location loc;\n\n    public SerializableLocation(Location loc) {\n        this.loc = loc;\n    }\n\n    /**\n     * Returns the Location object in its full form\n     *\n     * @return The location of this object\n     */\n    public Location getLocation() {\n        return loc;\n    }\n}\n```", "```java\n/**\n * Returns a map representation of this object for use of serialization\n *\n * @return This location as a map of Strings to Objects\n */\n@Override\npublic Map<String, Object> serialize() {\n    Map map = new TreeMap();\n    map.put(\"world\", loc.getWorld().getUID().toString());\n    map.put(\"x\", loc.getX());\n    map.put(\"y\", loc.getY());\n    map.put(\"z\", loc.getZ());\n    map.put(\"yaw\", loc.getYaw());\n    map.put(\"pitch\", loc.getPitch());\n    return map;\n}\n```", "```java\n/**\n * This constructor is used by Bukkit to create this object\n *\n * @param map The map which matches the return value of the serialize() method\n */\npublic SerializableLocation(Map<String, Object> map) {\n    //Check if the world for this location is loaded\n    UUID uuid = UUID.fromString((String) map.get(\"world\"));\n    World world = Bukkit.getWorld(uuid);\n    if (world != null) {\n        //Each coordinate we cast to it's original type\n        double x = (double) map.get(\"x\");\n        double y = (double) map.get(\"y\");\n        double z = (double) map.get(\"z\");\n\n        //Both yaw and pitch are loaded as type Double and then converted to float\n        float yaw = ((Double) map.get(\"yaw\")).floatValue();\n        float pitch = ((Double) map.get(\"pitch\")).floatValue();\n\n        loc = new Location(world, x, y, z, yaw, pitch);\n    } else {\n        Warper.plugin.getLogger().severe(\"Invalid location, most likely due to missing world\");\n    }\n}\n```", "```java\nconfig.set(\"location\", serializableLoc);\n```", "```java\nSerializableLocation loc = (SerializableLocation)config.get(\"location\");\n```", "```java\n==: com.codisimus.warper.SerializableLocation\n```", "```java\n    @SerializableAs(\"WarperLocation\")\n    public class SerializableLocation implements ConfigurationSerializable {\n    ```", "```java\n    ConfigurationSerialization.registerClass(SerializableLocation.class, \"WarperLocation\");\n    ```", "```java\nYamlConfiguration config = new YamlConfiguration();\n```", "```java\nconfig.set(String path, Object value);\n```", "```java\nconfig.createSection(\"homes\", homes);\nconfig.createSection(\"warps\", warps);\n```", "```java\nFile file = new File(plugin.getDataFolder(), \"warps.yml\");\nconfig.save(file);\n```", "```java\n/**\n * Saves our HashMaps of warp locations so that they may be loaded\n */\nprivate static void save() {\n    try {\n        //Create a new YAML configuration\n        YamlConfiguration config = new YamlConfiguration();\n\n        //Add each of our hashmaps to the config by creating sections\n        config.createSection(\"homes\", homes);\n        config.createSection(\"warps\", warps);\n\n        //Write the configuration to our save file\n        config.save(new File(plugin.getDataFolder(), \"warps.yml\"));\n    } catch (Exception saveFailed) {\n        plugin.getLogger().log(Level.SEVERE, \"Save Failed!\", saveFailed);\n    }\n}\n```", "```java\nhomes:\n  18d6a045-cd24-451b-8e2e-b3fe09df46d3:\n    ==: WarperLocation\n    pitch: 6.1500483\n    world: 89fd34ff-2c01-4d47-91c4-fa5d1e9fdb81\n    x: -446.45572804715306\n    y: 64.0\n    yaw: 273.74963\n    z: 224.9827566893271\nwarps:\n  spawn:\n    ==: WarperLocation\n    pitch: 9.450012\n    world: 89fd34ff-2c01-4d47-91c4-fa5d1e9fdb81\n    x: -162.47507312961542\n    y: 69.0\n    yaw: -1.8000238\n    z: 259.70096111857805\n  Jungle:\n    ==: WarperLocation\n    pitch: 7.500037\n    world: 35dafe89-3451-4c27-a626-3464e3856428\n    x: -223.87850735096316\n    y: 74.0\n    yaw: 87.60001\n    z: 382.482006630207\n  frozen_lake:\n    ==: WarperLocation\n    pitch: 16.200054\n    world: 53e7fab9-5f95-4e25-99d1-adce40d5447c\n    x: -339.3448071127722\n    y: 63.0\n    yaw: 332.84973\n    z: 257.9509874720554\n```", "```java\nFile file = new File(plugin.getDataFolder(), \"warps.yml\");\nif (file.exists()) {\n    YamlConfiguration config = new YamlConfiguration();\n    config.load(file);\n```", "```java\n/**\n * Loads warp names/locations from warps.yml\n * 'warp' refers to both homes and public warps\n */\nprivate static void load() {\n    try {\n        //Ensure that the file exists before attempting to load it\n        File file = new File(plugin.getDataFolder(), \"warps.yml\");\n        if (file.exists()) {\n            //Load the file as a YAML Configuration\n            YamlConfiguration config = new YamlConfiguration();\n            config.load(file);\n\n            //Get the homes section which is our saved hash map\n            //Each key is the uuid of the Player\n            //Each value is the location of their home\n            ConfigurationSection section = config.getConfigurationSection(\"homes\");\n            for (String key: section.getKeys(false)) {\n                //Get the location for each key\n                SerializableLocation loc = (SerializableLocation)section.get(key);\n                //Only add the warp location if it is valid\n                if (loc.getLocation() != null) {\n                    homes.put(key, loc);\n                }\n            }\n\n            //Get the warps section which is our saved hash map\n            //Each key is the name of the warp\n            //Each value is the warp location\n            section = config.getConfigurationSection(\"warps\");\n            for (String key: section.getKeys(false)) {\n                //Get the location for each key\n                SerializableLocation loc = (SerializableLocation) section.get(key);\n                //Only add the warp location if it is valid\n                if (loc.getLocation() != null) {\n                    warps.put(key, loc);\n                }\n            }\n        }\n    } catch (Exception loadFailed) {\n        plugin.getLogger().log(Level.SEVERE, \"Load Failed!\",loadFailed);\n    }\n}\n```"]