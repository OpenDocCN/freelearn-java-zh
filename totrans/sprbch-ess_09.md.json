["```java\npublic class MyClass {\n    public String concatenate(String former, String later){\n        return former + latter;\n    }\n}\n```", "```java\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClassTest {\n\n    @Test\n    public void testConcatenate() {\n        MyClass myclass = new MyClass();\n\n        String output = myClass.concatenate(\"Spring\", \"Batch\");\n\n        assertEquals(\"SpringBatch\", output);\n\n    }\n}\n```", "```java\n<dependency>\n<groupId>org.mockito</groupId>\n<artifactId>mockito-all</artifactId>\n<version>1.10.8</version>\n<scope>test</scope>\n</dependency>\n```", "```java\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Matchers.eq;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class EmployeeReaderUnitTest {\n  EmployeeReader empReaderMock;\n\n  @Before\n  public void setUp() {\n  empReaderMock = mock(EmployeeReader.class);\n  }\n\n  @Test\n  public void testEmpReader()throws Exception {\n  ...\n  }\n}\n```", "```java\n@ContextConfiguration(locations = { \"/app-context.xml\" })\n@TestExecutionListeners({ DependencyInjectionTestExecutionListener.class,\nStepScopeTestExecutionListener.class })\n@RunWith(SpringJUnit4ClassRunner.class)\npublic class CarFileReaderIntegrationTest {\n...\n}\n```", "```java\n@Test\npublic void testEmployeeReader() throws Exception {\n  StepExecution execution = getStepExecution();\n  int empReads = \n  StepScopeTestUtils.doInStepScope(stepExecution, new \n  Callable<Integer>() {\n  @Override\n  public int call() throws Exception {\n  ((ItemStream) employeeReader).open(new ExecutionContext());\n  int count = 0;\n  while(employeeReader.read() != null) {\n    count++;\n    }\n  return count;\n  }\n  });\n  assertEquals(empReads, 10);\n}\n```", "```java\n@Before\npublic void setup() {\njobLaunchParameters = new JobParametersBuilder().addString(\"employeeData\", EMPFILE_LOCATION)\n.addString(\"resultsData\", \"file:/\" + RESULTFILE_LOCATION)\n.toJobParameters();\n}\n\n@Test\npublic void testEmployeeJob() throws Exception {\nJobExecution execution = jobLauncherTestUtils.launchJob(jobLaunchParameters);\nassertEquals(ExitStatus.COMPLETED, execution.getExitStatus());\nStepExecution stepExecution =\nexecution.getStepExecutions().iterator().next();\nassertEquals(ExitStatus.COMPLETED, stepExecution.getExitStatus());  \n}\n```"]