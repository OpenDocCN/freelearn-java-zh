["```java\ndocker run --ulimit memlock=-1:-1 -it --rm=true --memory-swappiness=0 --name quarkus_test -e POSTGRES_USER=quarkus -e POSTGRES_PASSWORD=quarkus -e POSTGRES_DB=quarkusdb -p 5432:5432 postgres:10.5\n```", "```java\n<dependency>\n  <groupId>io.quarkus</groupId>\n  <artifactId>quarkus-smallrye-health</artifactId>\n</dependency>\n```", "```java\n@Health\n@ApplicationScoped\npublic class DBHealthCheck implements HealthCheck {\n\n    @ConfigProperty(name = \"db.host\")\n    String host;\n\n    @ConfigProperty(name = \"db.port\")\n    Integer port;\n\n    @Override\n    public HealthCheckResponse call() {\n\n        HealthCheckResponseBuilder responseBuilder = \n        HealthCheckResponse.named(\"Database connection\n         health check\");\n\n        try {\n            serverListening(host,port);\n            responseBuilder.up();\n        } catch (Exception e) {\n            // cannot access the database\n            responseBuilder.down()\n                    .withData(\"error\", e.getMessage());\n        }\n        return responseBuilder.build();\n    }\n\n    private void serverListening(String host, int port) throws \n     IOException\n    {\n        Socket s = new Socket(host, port);\n        s.close();\n    }\n}\n```", "```java\ndb.host=${POSTGRESQL_SERVICE_HOST:localhost}\ndb.port=${POSTGRESQL_SERVICE_PORT:5432}\nquarkus.datasource.url=jdbc:postgresql://${db.host}:${db.port}/postgres\n```", "```java\n$ mvn compile quarkus:dev\n```", "```java\ncurl http://localhost:8080/health\n{\n    \"status\": \"UP\",\n    \"checks\": [\n        {\n            \"name\": \"Database connection health check\",\n            \"status\": \"UP\"\n        },\n        {\n            \"name\": \"File system Readiness check\",\n            \"status\": \"UP\"\n        }\n    ]\n}\n```", "```java\n2019-07-27 09:47:25.564 UTC [54] LOG:  shutting down\n2019-07-27 09:47:25.601 UTC [1] LOG:  database system is shut down\n```", "```java\n{\n    \"status\": \"DOWN\",\n    \"checks\": [\n        {\n            \"name\": \"Database connection health check\",\n            \"status\": \"DOWN\",\n            \"data\": {\n                \"error\": \"Connection refused (Connection refused)\"\n            }\n        }\n    ]\n}\n```", "```java\n@Readiness\n@ApplicationScoped\npublic class ReadinessHealthCheck implements HealthCheck {\n\n     @Override\n     public HealthCheckResponse call() {\n         HealthCheckResponseBuilder responseBuilder = \n          HealthCheckResponse.named(\"File system Readiness check\");\n\n         boolean tempFileExists = \n          Files.exists(Paths.get(\"/tmp/tmp.lck\"));\n         if (!tempFileExists) {\n             responseBuilder.up();\n         }\n         else {\n             responseBuilder.down().withData(\"error\", \"Lock file \n              detected!\");\n         }\n         return responseBuilder.build(); \n     }\n}\n```", "```java\n$ curl http://localhost:8080/health/ready\n```", "```java\n{\n \"status\": \"UP\",\n \"checks\": [\n {\n \"name\": \"File system Readiness check\",\n \"status\": \"UP\"\n }\n ]\n }\n```", "```java\n@Liveness\n@ApplicationScoped\npublic class MemoryHealthCheck implements HealthCheck {\n    long threshold = 1024000000;\n    @Override\n    public HealthCheckResponse call() {\n        HealthCheckResponseBuilder responseBuilder =\n          HealthCheckResponse.named(\"MemoryHealthCheck \n        Liveness check\");\n        long freeMemory = Runtime.getRuntime().freeMemory();\n\n        if (freeMemory >= threshold) {\n            responseBuilder.up();\n        }\n        else {\n            responseBuilder.down()\n                    .withData(\"error\", \"Not enough free memory!\n                     Please restart application\");\n        }\n        return responseBuilder.build();\n    }\n\n}\n```", "```java\ncurl http://localhost:8080/health/live\n```", "```java\n{\n     \"status\": \"DOWN\",\n     \"checks\": [\n         {\n             \"name\": \"MemoryHealthCheck Liveness check\",\n             \"status\": \"DOWN\",\n             \"data\": {\n                 \"error\": \"Not enough free memory! Please restart \n                  application\"\n             }\n         }\n     ]\n }\n```", "```java\noc new-project quarkus-microprofile\n```", "```java\noc new-app -e POSTGRESQL_USER=quarkus -e POSTGRESQL_PASSWORD=quarkus -e POSTGRESQL_DATABASE=quarkusdb postgresql\n```", "```java\n # Build native application\n mvn package -Pnative -Dnative-image.docker-build=true -DskipTests=true\n\n # Create a new Binary Build named \"quarkus-microprofile\"\n oc new-build --binary --name=quarkus-microprofile -l app=quarkus-microprofile\n\n # Set the dockerfilePath attribute into the Build Configuration\n oc patch bc/quarkus-microprofile -p '{\"spec\":{\"strategy\":{\"dockerStrategy\":{\"dockerfilePath\":\"src/main/docker/Dockerfile.native\"}}}}'\n\n # Start the build, uploading content from the local folder:\n oc start-build quarkus-microprofile --from-dir=. --follow\n\n # Create a new Application, using as Input the \"quarkus-microprofile\" Image Stream:\n oc new-app --image-stream=quarkus-microprofile:latest\n\n # Expose the Service through a Route:\n oc expose svc/quarkus-microprofile\n```", "```java\n$ oc get pods\n```", "```java\nNAME                           READY     STATUS      RESTARTS   AGE\nquarkus-microprofile-1-build   0/1       Completed   0          20m\nquarkus-microprofile-1-rxp4r   1/1       Running     0          20m\n```", "```java\n$ oc rsh quarkus-microprofile-1-rxp4r\n```", "```java\nsh-4.4$ touch /tmp/tmp.lck\n```", "```java\n$ oc get events\nquarkus-microprofile-3-mzl6f.15b54cfc42ddb728    Pod                     spec.containers{quarkus-microprofile}    Warning   Unhealthy kubelet, localhost \nReadiness probe failed: HTTP probe failed with statuscode: 503\n```", "```java\n<dependency>\n  <groupId>io.quarkus</groupId>\n  <artifactId>io.quarkus:quarkus-smallrye-fault-tolerance</artifactId>\n</dependency>\n```", "```java\n@Timeout(250)\npublic List<Customer> findAll() {\n\n    randomSleep();\n    return entityManager.createNamedQuery(\"Customers.findAll\", Customer.class)\n            .getResultList();\n}\n\nprivate void randomSleep() {\n    try {\n        Thread.sleep(new Random().nextInt(400));\n    } catch (java.lang.InterruptedException e) {\n        e.printStackTrace();\n    }\n\n}\n```", "```java\n@Timeout(250)\n@Fallback(fallbackMethod = \"findAllStatic\")\npublic List<Customer> findAll() {\n\n    randomSleep();\n    return entityManager.createNamedQuery(\"Customers.findAll\", \n    Customer.class)\n            .getResultList();\n\n}\nprivate List<Customer> findAllStatic() {\n    LOGGER.info(\"Building Static List of Customers\");\n    return buildStaticList();\n\n}\n```", "```java\n@Timeout(250)\n@Fallback(fallbackMethod = \"findAllStatic\")\n@Retry(maxRetries = 3)\npublic List<Customer> findAll() {\n\n    randomSleep();\n    return entityManager.createNamedQuery(\"Customers.findAll\", \n     Customer.class)\n            .getResultList();\n\n}\n```", "```java\n@Retry(retryOn = {RuntimeException.class, TimeoutException.class}, maxRetries = 3)\n```", "```java\n@CircuitBreaker(successThreshold = 5, requestVolumeThreshold = 4, failureRatio=0.75,\n        delay = 1000)\npublic List<Orders> findAll(Long customerId) {\n\n    possibleFailure();\n    return  (List<Orders>) \n    entityManager.createNamedQuery(\"Orders.findAll\")\n            .setParameter(\"customerId\", customerId)\n            .getResultList();\n}\nprivate void possibleFailure() {\n    if (new Random().nextFloat() < 0.5f) {\n    throw new RuntimeException(\"Resource failure.\");\n}\n```", "```java\n@CircuitBreaker(failOn={RuntimeException.class}, successThreshold = 5, requestVolumeThreshold = 4, failureRatio=0.75, delay = 1000)\n```", "```java\npublic void createOrder(Orders order, Customer c) {\n    order.setCustomer(c);\n    entityManager.persist(order);\n    writeSomeLogging(order.getItem());\n\n}\n@Asynchronous\nprivate Future writeSomeLogging(String item) {\n        LOGGER.info(\"New Customer order at: \"+new java.util.Date());\n        LOGGER.info(\"Item: {}\", item);\n        return CompletableFuture.completedFuture(\"ok\");\n}\n```", "```java\n// maximum 5 concurrent requests allowed, maximum 10 requests allowed in the waiting queue\n@Asynchronous\n@Bulkhead(value = 5, waitingTaskQueue = 10)\nprivate Future writeSomeLogging(String item) {\n        LOGGER.info(\"New Customer order at: \"+new java.util.Date());\n        LOGGER.info(\"Item: {}\", item);\n        return CompletableFuture.completedFuture(\"ok\");\n}\n```", "```java\n<dependency>\n  <groupId>io.quarkus</groupId>\n  <artifactId>io.quarkus:quarkus-smallrye-metrics</artifactId>\n</dependency>\n```", "```java\n@GET\n@Counted(description = \"Customer list count\", absolute = true)\npublic List<Customer> getAll() {\n    return customerRepository.findAll();\n}\n```", "```java\n$ mvn compile quarkus:dev\n```", "```java\n$ curl http:/localhost:8080/metrics/applications\n```", "```java\n # HELP application:get_all Customer list count\n # TYPE application:get_all counter\n application:get_all 2.0\n```", "```java\n@Timed(name = \"timerCheck\", description = \"How much time it takes to load the Customer list\", unit = MetricUnits.MILLISECONDS)\npublic List<Customer> getAll() {\n    return customerRepository.findAll();\n}\n```", "```java\n# TYPE application:com_packt_quarkus_chapter6_customer_endpoint_timer_check_rate_per_second \napplication:com_packt_quarkus_chapter6_customer_endpoint_timer_check_rate_per_second 0.04980015712212517\n# TYPE application:com_packt_quarkus_chapter6_customer_endpoint_timer_check_one_min_rate_per_second \napplication:com_packt_quarkus_chapter6_customer_endpoint_timer_check_one_min_rate_per_second 0.09447331054820299\n# TYPE application:com_packt_quarkus_chapter6_customer_endpoint_timer_check_five_min_rate_per_second \napplication:com_packt_quarkus_chapter6_customer_endpoint_timer_check_five_min_rate_per_second 0.17214159528501158\n\n. . . .\napplication:com_packt_quarkus_chapter6_customer_endpoint_timer_check_seconds{quantile=\"0.999\"} 0.004191615\n```", "```java\n@Gauge(name = \"peakOfOrders\", unit = MetricUnits.NONE, description = \"Highest number of orders\")\npublic Number highestNumberOfOrders() {\n    return orderRepository.countAll();\n}\n```", "```java\n# HELP application:com_packt_quarkus_chapter6_order_endpoint_peak_of_orders Highest number of orders\n# TYPE application:com_packt_quarkus_chapter6_order_endpoint_peak_of_orders gauge\napplication:com_packt_quarkus_chapter6_order_endpoint_peak_of_orders 2.0\n```", "```java\n<dependency>\n   <groupId>io.quarkus</groupId>\n   <artifactId>quarkus-smallrye-openapi</artifactId>\n </dependency>\n```", "```java\n$ curl http://localhost:8080/openapi\n ---\n openapi: 3.0.1\n info:\n title: Generated API\n version: \"1.0\"\n paths:\n /customers:\n get:\n responses:\n 200:\n description: OK\n content:\n application/json:\n schema:\n type: array\n items:\n type: object\n properties:\n id:\n format: int64\n type: integer\n name:\n type: string\n orders:\n type: array\n items:\n type: object\n properties:\n id:\n format: int64\n type: integer\n item:\n type: string\n price:\n format: int64\n type: integer\n surname:\n type: string\n```", "```java\n@Tag(name = \"OpenAPI Example\", description = \"Quarkus CRUD Example\")\npublic class CustomerEndpoint {\n\n    @Inject CustomerRepository customerRepository;\n\n @Operation(operationId = \"all\", description = \"Getting All \n     customers\")\n @APIResponse(responseCode = \"200\", description = \"Successful \n     response.\")\n    @GET\n    public List<Customer> getAll() {\n        return customerRepository.findAll();\n    }\n\n    @POST\n    public Response create( @Parameter(description = \"The new \n     customer.\", required = true) Customer customer) {\n\n        customerRepository.createCustomer(customer);\n        return Response.status(201).build();\n    }\n\n    @PUT\n    public Response update(@Parameter(description = \"The customer to \n     update.\", required = true) Customer customer) {\n        customerRepository.updateCustomer(customer);\n        return Response.status(204).build();\n    }\n    @DELETE\n    public Response delete(@Parameter(description = \"The customer to \n     delete.\", required = true) @QueryParam(\"id\") Long customerId) {\n        customerRepository.deleteCustomer(customerId);\n        return Response.status(204).build();\n    }\n\n}\n```", "```java\n<dependency>\n  <groupId>io.quarkus</groupId>\n  <artifactId>io.quarkus:quarkus-smallrye-opentracing</artifactId>\n</dependency>\n```", "```java\nquarkus.jaeger.service-name=quarkus-service\nquarkus.jaeger.sampler-type=const\nquarkus.jaeger.sampler-param=1\nquarkus.jaeger.endpoint=http://localhost:14268/api/traces\n```", "```java\ndocker run -e COLLECTOR_ZIPKIN_HTTP_PORT=9411 -p 5775:5775/udp -p 6831:6831/udp -p 6832:6832/udp -p 5778:5778 -p 16686:16686 -p 14268:14268 -p 9411:9411 jaegertracing/all-in-one:latest\n```", "```java\n<dependency>\n  <groupId>io.quarkus</groupId>\n  <artifactId>quarkus-rest-client</artifactId>\n</dependency>\n```", "```java\n@RegisterRestClient\n@Path(\"customers\")\n@Produces(\"application/json\")\n@Consumes(\"application/json\")\npublic interface CustomerEndpointItf {\n    @GET\n    List<Customer> getAll();\n\n    @POST\n    Response create(Customer customer);\n\n    @PUT\n    Response update(Customer customer);\n\n    @DELETE\n    Response delete(Long customerId);\n}\n```", "```java\n@RegisterRestClient\n@Path(\"orders\")\n@Produces(\"application/json\")\n@Consumes(\"application/json\")\npublic interface OrderEndpointItf {\n    @GET\n    List<Orders> getAll(@QueryParam(\"customerId\") Long customerId);\n\n    @POST\n    @Path(\"/{customer}\")\n    Response create(Orders order, @PathParam(\"customer\") Long \n     customerId);\n\n    @PUT\n    Response update(Orders order);\n\n    @DELETE\n    @Path(\"/{order}\")\n    Response delete(@PathParam(\"order\") Long orderId);\n}\n```", "```java\npublic class CustomerEndpoint {\n\n @Inject @RestClient\n CustomerEndpointItf customer;\n\n    @GET\n    public List<Customer> getAll() {\n        return customer.getAll();\n    }\n    @POST\n    public Response create(Customer c) {\n        return customer.create(c);\n    }\n    @PUT\n    public Response update(Customer c) {\n        return customer.update(c);\n    }\n    @DELETE\n    public Response delete(Long customerId) {\n        return customer.delete(customerId);\n    }\n\n}\n```", "```java\ncom.packt.quarkus.chapter6.restclient.CustomerEndpointItf/mp-rest/url=http://localhost:8080\ncom.packt.quarkus.chapter6.restclient.CustomerEndpointItf/mp-rest/scope=java.inject.Singleton\ncom.packt.quarkus.chapter6.restclient.OrderEndpointItf/mp-rest/url=http://localhost:8080\ncom.packt.quarkus.chapter6.restclient.OrderEndpointItf/mp-rest/scope=java.inject.Singleton\n```", "```java\n<Fully Qualified REST Client Interface>/mp-rest/url=<Remote REST base URL>\n```", "```java\ncd Chapter05/hibernate\n\n$ mvn quarkus:dev\n```", "```java\ncd Chapter06/rest-client\n```", "```java\n$ mvn compile test\n```", "```java\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.988 s - in com.packt.quarkus.chapter6.restclient.CustomerEndpointTest\n 2019-08-04 19:29:43,592 INFO  [io.quarkus] (main) Quarkus stopped in 0.003s\n[INFO] Results:\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0\n```", "```java\n    select\n         orders0_.id as id1_1_0_,\n         orders0_.customer_id as customer4_1_0_,\n         orders0_.item as item2_1_0_,\n         orders0_.price as price3_1_0_,\n         customer1_.id as id1_0_1_,\n         customer1_.name as name2_0_1_,\n         customer1_.surname as surname3_0_1_\n     from\n         Orders orders0_\n     left outer join\n         Customer customer1_\n             on orders0_.customer_id=customer1_.id\n     where\n         orders0_.id=?\n```"]