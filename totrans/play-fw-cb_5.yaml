- en: Chapter 5. Creating Plugins and Modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating and using your own plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a flexible registration module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the same model for different applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing module dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding private module repositories using Amazon S3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will look at how we can break down our Play 2.0 web applications
    into modular, reusable components. We will look at how we can create plugins and
    modules as a Play 2.0 subproject and as an independent module published in an
    internal module repository.
  prefs: []
  type: TYPE_NORMAL
- en: A Play 2.0 plugin can be useful when creating independent services and initializing
    shared resources such as database connections and Akka actor references. Other
    examples of useful Play plugins include the **play.i18n.MessagesPlugin**, which
    manages internationalization of text, and the **play.api.db.DBPlugin,** which
    abstracts how a Play web application connects and interfaces with databases.
  prefs: []
  type: TYPE_NORMAL
- en: A Play 2.0 module is useful to create smaller, logical subcomponents of a larger
    application; this promotes better code maintenance and isolation of tests.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and using your own plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will explore how to use the Play 2.0 plugin that will monitor
    the filesystem for a specified file. We will initialize our plugin as part of
    the Play web application lifecycle, and the main plugin logic will be triggered
    on application startup.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For Java, we need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `foo_java` application with Hot-Reloading enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the modules directory inside `foo_java`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Generate the project directory for our first plugin inside `foo_java/modules`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove the contents of the `modules/filemon/conf/application.conf` file, as
    these settings will conflict with the main configuration file that we have defined
    in the project root:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove the contents of the `modules/filemon/conf/routes` file and rename it
    to `filemon.routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove the views directory from `modules/filemon/app`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove the file `modules/filemon/app/controller/Application.java`using the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new package inside `modules/filemon/app`/:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `FileMonitor` plugin inside `modules/filemon/app/FileMonitor.java`
    with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enable the plugin from the `foo_java` application by creating the plugin''s
    configuration file, `foo_java/conf/play.plugins`, and declaring our plugin there:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the dependency between the root project (`foo_java`) and the module (`filemon`)
    in `build.sbt`, and add the `aggregate()` setting to ensure that activator tasks
    called from the project root, `foo_java`, are also invoked on the child module,
    `filemon`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the `foo_java` application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Request the default route and initialize our app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Confirm that the file monitor is running by looking at the console log of the
    `foo_java` application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Scala, we need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `foo_scala` application with Hot-Reloading enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the modules directory inside `foo_scala`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Generate the project directory for our first plugin inside `foo_scala/modules`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove the contents of the `modules/filemon/conf/application.conf` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove the contents of the `modules/filemon/conf/routes` file and rename it
    to `filemon.routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove the views directory from `modules/filemon/app`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove the file `modules/filemon/app/controller/Application.scala` using the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new package inside `modules/filemon/app/`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `FileMonitor` plugin inside `modules/filemon/app/FileMonitor.scala`
    with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enable the plugin from the `foo_scala` application by creating the plugin''s
    configuration file, `foo_scala/conf/play.plugins`, and declaring our plugin there:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the dependency between the root project (`foo_scala`) and the module (`filemon`)
    in `build.sbt`, and add the `aggregate()` setting to ensure that activator tasks
    called from the project root, `foo_java`, are also invoked on the child module,
    `filemon`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the `foo_scala` application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Request our default route and initialize our app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Confirm that the file monitor is running by looking at the console log of the
    `foo_scala` application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we set up our first Play 2.0 plugin. The plugin simply checks
    for a file or directory in the local filesystem and logs in the console whether
    the file is found or not. We set up our plugin by creating the plugin project
    inside the newly created directory in the project root modules in `foo_java/modules`
    and `foo_scala/modules`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Once the plugin project is created, we need to remove some boilerplate files
    and configurations to ensure that the plugin does not conflict with the root projects,
    `foo_java` and `foo_scala`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then created the `FileMonitor` plugin in `modules/filemon/app/filemon/FileMonitor.scala`,
    extending the `play.api.Plugin` trait, which upon startup, creates a scheduled
    job which in turn checks for the existence of a local file every second:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we had our plugin in place, we activated it by declaring it in the `conf/play.plugins`
    file in the root projects, `foo_java` and `foo_scala`, which follow the notation
    `&lt;Priority Level&gt;:&lt;Plugin&gt;`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'In our case, we used `1001` as the priority level to ensure that the Akka Play
    2.0 plugin loads first. Refer to the official Play documentation for additional
    guidelines for declaring your plugins in the `play.plugins` configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.playframework.com/documentation/2.3.x/JavaPlugins](https://www.playframework.com/documentation/2.3.x/JavaPlugins)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.playframework.com/documentation/2.3.x/ScalaPlugins](https://www.playframework.com/documentation/2.3.x/ScalaPlugins)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we ran the web application and confirmed our plugin to be running
    by watching the console log:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'You can confirm the behavior of your plugin by creating or deleting the monitor
    file, in this example, `/var/tmp/foo`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see the output in the logs change accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Building a flexible registration module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will create a new registration module that will manage user
    registration and authentication requests. Creating a module for this allows us
    to reuse a very common workflow in the modern web application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For Java, we need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `foo_java` application with Hot-Reloading enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the modules directory, `foo_java/modules`, generate the registration
    module project using the `activator`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the dependency between the root project, `foo_java`, and the module, `registration`,
    in `foo_java/build.sbt`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove all the unnecessary boilerplate files and configurations from the registration
    module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the registration plugin in `module/registration/app/registration/RegistrationPlugin.java`
    with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create the `RegistrationService` interface and implementation class referred
    to by the `Registration` plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `User` model entity in `modules/registration/app/registration/User.java`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `Registration` controller and routes that will handle registration
    and login requests in the project root, `foo/java/app/controllers/Registrations.java`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the routes for the newly added `Registration` actions in the project root,
    `foo_java/conf/routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, declare the registration plugin in the project root `foo_java/conf/play.plugins`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using `curl`, submit a new registration and log in with the specified registration
    details; verify that our endpoint responds with an HTTP status 200 for successful
    operations by inspecting the response headers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Scala, we need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `foo_scala` application with Hot-Reloading enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the modules directory (`foo_scala/modules`), generate our registration
    module project using the `activator`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the dependency between the root project, `foo_scala`, and the module, `registration`,
    in `build.sbt`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove all the unnecessary boilerplate files and configurations from the registration
    module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the registration plugin in `module/registration/app/registration/RegistrationPlugin.scala`
    with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create the `RegistrationService` class referred to by the `Registration`
    plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `User` model entity in `modules/registration/app/registration/User.scala`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `Registration` controller and routes that will handle registration
    and login requests in the project root, `foo_scala/app/controllers/Registrations.scala`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the routes for the newly added `Registration` actions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, declare the registration plugin in the project root, `foo_scala/conf/play.plugins`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using `curl`, submit a new registration and login with the specified registration
    details; verify that our endpoint responds with an HTTP status 200 for successful
    operations by inspecting the response headers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we created a module that will handle registration functions,
    such as signup and login. We created it as a Play plugin so that it can not only
    be maintainable but also reusable in other applications. Another advantage of
    using modules is that when writing unit tests, we can isolate its execution in
    its enclosed subproject only and not the entire project.
  prefs: []
  type: TYPE_NORMAL
- en: 'We created the `registration` plugin inside the modules directory in our project
    root directory. We declared the dependency between the module and the main project
    in `build.sbt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'We then enabled the plugin in `conf/play.plugins` using the priority level
    `599`, within the 500-600 range for data-related plugins:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'We then grabbed a reference to the `RegistrationService` interface from the
    `Registration` plugin inside the controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we established the reference, all registration functions were simply delegated
    to the `RegistrationService` interface from the controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Using `curl`, we can also validate that our registration controller responds
    correctly to bad authentication:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Using the same model for different applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this recipe, we will create a new standalone module that will contain product-related
    functions and data model classes, and we will publish it on a local repository:'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For Java, we need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new Play 2 project in the same directory level as `foo_java`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create our default module package inside the app directory, `product-contrib/app`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the models package, which will contain all the data model classes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove the contents of the `conf/application.conf` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove the contents of the `conf/routes` file and rename it to `productcontrib.routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove the views directory from `modules/filemon/app`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove the file `app/controller/Application.java`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the product model in `app/productcontrib/models/Product.java` with the
    following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `ProductService` interface (`ProductService.java`) and In implementation
    class (`ProductServiceImpl.java`) in the package `app/productcontrib/services`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Insert additional module package settings in the `build.sbt` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using the activator, build the `contrib.jar` and publish it to the remote internal
    repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should be able to confirm in the console logs whether the upload was successful
    or not:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Scala, we need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new Play 2 project in the same directory level as `foo_scala`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the default module package inside the app directory, `user-contrib/app`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the models package that will contain all the data model classes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove the contents of the `conf/application.conf` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove the contents of the `conf/routes` file and rename it to `usercontrib.routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove the views directory from `modules/filemon/app`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove the file `app/controller/Application.scala`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `User` model in `app/usercontrib/models/User.scala` with the following
    content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Insert additional module package settings in the `build.sbt` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using the activator, build the `contrib.jar` and publish it to the remote internal
    repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should be able to confirm in the console logs whether the upload was successful
    or not:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we created a new Play 2.0 module with the intention of packaging
    and publishing the module in our local repository. This makes the Play module
    available to the other Play web applications we will be working on. We created
    our model and service classes for a product that will be part of our module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'We built and published both modules into an internal repository using the `activator`
    publish command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'Once these modules were published in the internal repository, we then declared
    them as dependencies to Maven-based Java projects, not limited to Play 2.0 applications,
    in our case, `build.sbt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: Managing module dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will tackle the topic of adding Play modules to your Play
    2.0 application, which further demonstrates how powerful the Play 2.0 ecosystem
    is. This recipe requires the previous recipe to be run and assumes that you have
    followed on.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For Java, we need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `foo_java` application with Hot-Reloading enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `fooscala user-contrib` module as a project dependency in `build.sbt`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify `foo_java/app/controllers/Application.java` by adding the following
    action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new route for the newly added action in `foo_java/conf/routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using `curl`, we will be able to display the product and user Ids generated
    from the product and `user contrib` modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Scala, we need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `foo_scala` application with Hot-Reloading enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `foojava productcontrib` module as a project dependency in `build.sbt`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify `foo_scala/app/controllers/Application.scala` by adding the following
    action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new route for the newly added action in `foo_scala/conf/routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using `curl`, we will be able to display the product and user Ids generated
    from the product and user contrib modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we explored how to include other modules into our Play 2.0 web
    application. With this recipe, we also displayed how Play Scala apps can work
    side by side with Play Java modules and vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: 'We first declared that our root project will use both user and product contrib
    modules in `build.sbt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: 'We then added the import statements to our controller so we could invoke their
    ID generation functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we used `curl` to request our new routes to see the generated Ids in
    action.
  prefs: []
  type: TYPE_NORMAL
- en: Adding private module repositories using Amazon S3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will explore how we can use an external module repository
    to publish and resolve internal modules in the interest of distributing our modules.
    In this recipe, we will use Amazon S3, a popular cloud storage service, to store
    our ivy-style repository assets. You will need a valid AWS account to follow this
    recipe, ensure that you sign up for one at [http://aws.amazon.com/](http://aws.amazon.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Please refer to S3''s online documentation for more information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://aws.amazon.com/s3/](http://aws.amazon.com/s3/)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `product-contrib` project and run the application with Hot-Reloading
    enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the plugins config file in `project/plugins.sbt` and add the following
    plugin and resolver:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the build config file in `build.sbt` to specify the settings we''ll use
    for the S3 resolver plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Specify your Amazon S3 API keys in the file `~/.sbt/.s3credentials`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, publish the `product-contrib` snapshot using the activator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will see the success status message of the upload in the console logs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will now use this repository in a new Play 2.0 application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the plugins config file in `s3deps/project/plugins.sbt` and add the following
    plugin and resolver:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the build config file in `build.sbt` to specify the settings we''ll use
    for the S3 resolver plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Retrieve the product-contrib module using the activator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we used the sbt-s3-resolver plugin to publish and resolve dependencies
    using Amazon S3\. We included the `sbt` plugin in the file `project/plugins.sbt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: 'We specify our Amazon S3 API keys in the `.s3credentials` files in `~/.sbt
    directory`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: 'For publishing, we specify the resolver repository in `build.sbt` of the publishing
    project (product-contrib):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: 'To resolve dependencies, we specify the following in `build.sbt` of the consuming
    project (s3deps):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
