- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction to Jakarta EE
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jakarta EE consists of a set of **Application Programming Interface** (**API**)
    specifications used to develop server-side enterprise Java applications. Most
    chapters in this book will cover a single Jakarta EE specification, such as **Contexts
    and Dependency Injection** (**CDI**), which is used to integrate different parts
    of an application, or Jakarta RESTful Web Services, which is used to develop RESTful
    web services. We also cover Jakarta EE APIs for processing data in JSON format,
    as well as Jakarta Faces, which is used to develop web-based user interfaces.
    We also delve into how to interact with relational databases, implementing two-way
    communication between clients and servers in web applications, security, and messaging.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Jakarta EE
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jakarta EE, Java EE, J2EE, and the Spring Framework
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to Jakarta EE
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jakarta EE is a collection of API specifications designed to work together when
    developing server-side enterprise Java applications. Jakarta EE is a standard
    for which there are multiple implementations. This fact prevents vendor lock-in
    since code developed against the Jakarta EE specification can be deployed in any
    Jakarta EE-compliant implementation.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Jakarta EE is an **Eclipse Software Foundation** project. Since the Jakarta
    EE specification is open source, any organization or individual wishing to contribute
    is free to do so.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Contributing to Jakarta EE
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many ways of contributing, including participating in discussions
    and providing suggestions for future versions of Jakarta EE. To do so, one simply
    needs to subscribe to the appropriate mailing list, which can be done by visiting
    [https://jakarta.ee/connect/mailing-lists/](https://jakarta.ee/connect/mailing-lists/).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: In order to subscribe to the mailing list, you need to create a free Eclipse.org
    account at [https://accounts.eclipse.org/user/register](https://accounts.eclipse.org/user/register).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: To go beyond participating in discussions and actually contribute code or documentation,
    the Eclipse Contributor Agreement must be signed. The Eclipse Contributor Agreement
    can be found at [https://www.eclipse.org/legal/ECA.php](https://www.eclipse.org/legal/ECA.php).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Jakarta EE APIs
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As previously mentioned, Jakarta EE is a collection of API specifications designed
    to work together when developing server-side enterprise Java applications.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the full Jakarta EE platform, there are two Jakarta EE profiles
    that contain a subset of the specifications and APIs included in the full platform.
    The **Jakarta EE Web Profile** contains a subset of specifications and APIs suitable
    for developing web applications. The **Jakarta EE Core Profile** contains an even
    smaller subset of specifications and APIs more suitable for developing microservices.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: 'The Jakarta EE core profile APIs include the following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Jakarta Context and Dependency Injection Lite (CDI Lite)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jakarta RESTful Web Services
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jakarta JSON Processing
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jakarta JSON Binding
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The version of Contexts and Dependency Injection API included in the core profile
    is a subset of the full specification. The Jakarta EE Web Profile APIs include
    the full CDI specification instead of CDI Lite, plus all other specifications
    and APIs in the core profile, along with some additional ones:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Jakarta Context and Dependency Injection
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jakarta Faces
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jakarta Persistence
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jakarta WebSocket
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jakarta Security
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jakarta Servlet
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jakarta Enterprise Beans Lite
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The version of Jakarta Enterprise Beans included in the Web Profile is a subset
    of the full enterprise beans specification.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: 'The full Jakarta EE Platform includes the full Jakarta Enterprise Beans spec,
    plus all other specifications and APIs included in the Web Profile, along with
    some additional ones:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Jakarta Enterprise Beans
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jakarta Messaging
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jakarta Enterprise Web Services
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Full list of Jakarta EE APIs
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: The preceding list is not exhaustive, and only lists some of the most popular
    Jakarta EE APIs. For an exhaustive list of Jakarta EE APIs, please refer to [https://jakarta.ee/specifications/](https://jakarta.ee/specifications/).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Application server vendors or the open-source community need to provide compatible
    implementations for each Jakarta EE API specification in the preceding list.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: One standard, multiple implementations
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At its core, Jakarta EE is a specification, a piece of paper, if you will. Implementations
    of Jakarta EE specifications need to be developed so that application developers
    can actually develop server-side enterprise Java applications against the Jakarta
    EE standard.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: Each Jakarta EE API can have multiple implementations. The popular Hibernate
    Object-Relational Mapping tool, for example, is an implementation of Jakarta Persistence,
    but it is by no means the only one. Other Jakarta Persistence implementations
    include EclipseLink and Open JPA. Similarly, there are multiple implementations
    of every single Jakarta EE specification.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Jakarta EE applications are typically deployed to an application server. Some
    popular application servers include JBoss, Websphere, Weblogic, and GlassFish.
    Each application server is considered to be a Jakarta EE implementation. Application
    server vendors either develop their own implementations of the several Jakarta
    EE specifications or choose to include an existing implementation.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Application developers benefit from the Jakarta EE standard by not being tied
    to a specific Jakarta EE implementation. As long as an application is developed
    against the standard Jakarta EE APIs, it should be very portable across application
    server vendors.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Application server vendors then bundle a set of Jakarta EE API implementations
    together as part of their application server offerings. Since each implementation
    is compliant with the corresponding Jakarta EE specification, code developed against
    one implementation can run unmodified against any other implementation, avoiding
    a vendor lock-in.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table lists some popular Jakarta EE implementations:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '| **Jakarta** **EE Implementation** | **Vendor** | **License** | **URL** |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
- en: '| Apache Tomee | Tomitribe | Apache License, Version 2.0 | [https://tomee.apache.org/](https://tomee.apache.org/)
    |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
- en: '| Eclipse GlassFish | Eclipse Foundation | Eclipse Public License - v 2.0 |
    [https://glassfish.org/](https://glassfish.org/) |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
- en: '| IBM Websphere Liberty | IBM | Commercial | [https://www.ibm.com/products/websphere-liberty](https://www.ibm.com/products/websphere-liberty)
    |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
- en: '| JBoss Enterprise Application Platform | Red Hat | Commercial | [https://www.redhat.com/en/technologies/jboss-middleware/application-platform](https://www.redhat.com/en/technologies/jboss-middleware/application-platform)
    |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
- en: '| Open Liberty | IBM | Eclipse Public License 2.0 | [https://openliberty.io/](https://openliberty.io/)
    |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
- en: '| Payara Server Community | Payara Services Ltd | Dual licensed :CDDL 1.1 /
    GPL v2 + Classpath Exception | [https://www.payara.fish/products/payara-platform-community/](https://www.payara.fish/products/payara-platform-community/)
    |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
- en: '| Payara Server Enterprise | Payara Services Ltd | Commercial | [https://www.payara.fish/products/payara-platform-community/](https://www.payara.fish/products/payara-platform-community/)
    |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
- en: '| Wildfly | Red Hat | LGPL v2.1 | [https://www.wildfly.org/](https://www.wildfly.org/)
    |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
- en: Table 1.1 – Popular Jakarta EE Implementations
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: For the full list of Jakarta EE-compatible implementations, please refer to
    [https://jakarta.ee/compatibility/](https://jakarta.ee/compatibility/).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: For most examples in this book, we will be using **GlassFish** as our Jakarta
    EE runtime. This is because it is a high-quality, up-to-date, open-source implementation
    not tied to any particular vendor; all examples should be deployable to any Jakarta
    EE-compliant implementation.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: Jakarta EE, Java EE, J2EE, and the Spring Framework
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In 2017, Oracle donated **Java EE** to the Eclipse Foundation and as part of
    the process, Java EE was renamed Jakarta EE. The donation to the Eclipse Foundation
    meant that the Jakarta EE specification became truly vendor-neutral, with no single
    vendor having control over the specifications.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Java EE, in turn, was introduced back in 2006 by Sun Microsystems. The first
    version of Java EE was Java EE 5\. Java EE replaced **J2EE**; the last version
    of J2EE was J2EE 1.4, released back in 2003\. Even though J2EE can be considered
    obsolete technology, having been superseded by Java EE several years ago and then
    renamed Jakarta EE, the term *J2EE* refuses to die. Many individuals to this day
    still refer to Jakarta EE as J2EE and many companies advertise on their websites
    and job boards that they are looking for “J2EE developers”, seemingly unaware
    that they are referring to a technology that has been obsolete for several years.
    The current correct term for the technology is Jakarta EE.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, the term J2EE has become a “catch-all” term for any server-side
    Java technology; frequently Spring applications are referred to as J2EE applications.
    **Spring** is not and never has been J2EE. As a matter of fact, Spring was created
    by Rod Johnson as an alternative to J2EE back in 2002\. Just as with Jakarta EE,
    Spring applications are frequently erroneously referred to as J2EE applications.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，术语J2EE已经成为任何服务器端Java技术的“万能”术语；通常Spring应用程序被称为J2EE应用程序。**Spring**并不是，也从未是J2EE。事实上，Spring是由Rod
    Johnson在2002年作为J2EE的替代品创建的。就像Jakarta EE一样，Spring应用程序经常被错误地称为J2EE应用程序。
- en: Summary
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we provided an introduction to Jakarta EE, outlining a list
    of several technologies and APIs included with Jakarta EE:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了Jakarta EE，概述了包含在Jakarta EE中的几个技术和API列表：
- en: We covered how Jakarta EE is openly developed both by software vendors and the
    Java community at large via the Eclipse Software Foundation
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们介绍了Jakarta EE是如何通过Eclipse软件基金会，由软件供应商和整个Java社区公开开发的
- en: We explained how there are multiple implementations of Jakarta EE, a fact that
    avoids vendor lock-in and allows us to easily migrate our Jakarta EE applications
    from one implementation to another
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们解释了Jakarta EE有多个实现，这一事实避免了供应商锁定，并允许我们轻松地将我们的Jakarta EE应用程序从一个实现迁移到另一个实现
- en: We cleared up the confusion between Jakarta EE, Java EE, J2EE, and Spring, explaining
    how Jakarta EE and Spring applications are frequently referred to as J2EE applications,
    even though J2EE has been obsolete for several years
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们澄清了Jakarta EE、Java EE、J2EE和Spring之间的混淆，解释了尽管J2EE已经过时多年，但Jakarta EE和Spring应用程序经常被错误地称为J2EE应用程序。
- en: Now that we’ve had a general overview of Jakarta EE, we are ready to start learning
    how to use Jakarta EE to develop our applications.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经对Jakarta EE有了总体了解，我们准备开始学习如何使用Jakarta EE来开发我们的应用程序。
