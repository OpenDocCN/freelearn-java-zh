["```java\n> mvn test\n-------------------------------------------------------\n T E S T S\n-------------------------------------------------------\nRunning com.demo.sample.CustomerTest\ngetCustomerId\nTests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.034 sec\nResults :\nTests run: 1, Failures: 0, Errors: 0, Skipped: 0\n\n```", "```java\npackage com.demo.sample\n\nimport org.junit._\nimport Assert._\n\nclass CustomerScalaTest {\n\n  @Before\n  def setUp: Unit = {\n  }\n\n  @After\n  def tearDown: Unit = {\n  }\n\n  @Test\n  def testGetCustomerId = {\n    System.out.println(\"getCustomerId\")\n    val instance = new Customer()\n    val expResult: Integer = null\n    val result: Integer = instance.getCustomerId()\n    assertEquals(expResult, result)\n  }\n}\n```", "```java\n    <dependency>\n      <groupId>org.scala-lang</groupId>\n      <artifactId>scala-library</artifactId>\n      <version>2.10.0</version>\n    </dependency>\n    ```", "```java\n    <dependency>\n      <groupId>org.scalatest</groupId>\n      <artifactId>scalatest_2.10</artifactId>\n      <version>2.0/version>\n      <scope>test</scope>\n    </dependency>\n    ```", "```java\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>4.11</version>\n      <scope>test</scope>\n    </dependency>\n    ```", "```java\n<plugin>\n  <groupId>net.alchim31.maven</groupId>\n  <artifactId>scala-maven-plugin</artifactId>\n  <executions>\n    <execution>\n      <id>scala-compile-first</id>\n      <phase>process-resources</phase>\n      <goals>\n        <goal>add-source</goal>\n        <goal>compile</goal>\n      </goals>\n    </execution>\n    <execution>\n      <id>scala-test-compile</id>\n      <phase>process-test-resources</phase>\n      <goals>\n        <goal>testCompile</goal>\n      </goals>\n    </execution>\n  </executions>\n</plugin>\n```", "```java\n> mvn clean test\n-------------------------------------------------------\n T E S T S\n-------------------------------------------------------\nRunning com.demo.sample.CustomerScalaTest\ngetCustomerId\nTests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.035 sec\nRunning com.demo.sample.CustomerTest\ngetCustomerId\nTests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.004 sec\n\nResults :\n\nTests run: 2, Failures: 0, Errors: 0, Skipped: 0\n\n```", "```java\n> ./activator console\n\n```", "```java\nscala> import java.util.Arrays\nimport java.util.Arrays\n\n```", "```java\nscala> val javaList = Arrays.asList(1,2,3,4)\njavaList: java.util.List[Int] = [1, 2, 3, 4]\n\n```", "```java\nscala> import scala.collection.JavaConverters._\nimport scala.collection.JavaConverters._\n\n```", "```java\nscala> val scalaList = javaList.asScala\nscalaList: scala.collection.mutable.Buffer[Int] = Buffer(1, 2, 3, 4)\n\n```", "```java\nscala> val javaListAgain = scalaList.asJava\njavaListAgain: java.util.List[Int] = [1, 2, 3, 4]\n\n```", "```java\nscala> assert( javaList eq javaListAgain)\n[no output]\n\n```", "```java\nscala> class Company(var name:String)\ndefined class Company\n\n```", "```java\nscala> val sun = new Company(\"Sun Microsystems\")\nsun: Company = Company@55385db5\nscala> sun.name\nres33: String = Sun Microsystems\nscala> sun.name_=(\"Oracle\")\n[no output is returned]\nscala> sun.name\nres35: String = Oracle\n\n```", "```java\nscala> import scala.beans.BeanProperty\nimport scala.beans.BeanProperty\nscala> class Company(@BeanProperty var name:String)\ndefined class Company\nscala> val sun = new Company(\"Sun Microsystems\")\nsun: Company = Company@42540cca\nscala> sun.getName()\nres36: String = Sun Microsystems\nscala> sun.setName(\"Oracle\")\n[no output is returned]\nscala> sun.name  (alternatively sun.getName)\nres38: String = Oracle\n\n```", "```java\npublic class Customer {\n\n    private Integer customerId;\n    private String zip;\n\n    public Customer(Integer customerId) {\n        this.customerId = customerId;\n    }\n\n    public Customer(Integer customerId, String zip) {\n        this.customerId = customerId;\n        this.zip = zip;\n    }\n    public Integer getCustomerId() {\n        return customerId;\n    }\n\n    public void setCustomerId(Integer customerId) {\n        this.customerId = customerId;\n    }\n\n    public String getZip() {\n        return zip;\n    }\n\n    public void setZip(String zip) {\n        this.zip = zip;\n    }\n}\n```", "```java\nscala> class Customer ( var customerId: Int, var zip: String) {\n def getCustomerId() = customerId\n def setCustomerId(cust: Int): Unit = {\n customerId = cust\n }\n }\ndefined class Customer\nscala> val customer = new Customer(1, \"123 45\")\ncustomer: Customer = Customer@13425838\nscala> customer.zip\nres5: String = 123 45\n\n```", "```java\nscala> val otherCustomer = new Customer(\"543 21\")\n<console>:8: error: not enough arguments for constructor Customer: (customerId: Int, zip: String)Customer.\nUnspecified value parameter zip.\n val otherCustomer = new Customer(\"543 21\")\n ^\n\n```", "```java\nscala> class Customer ( var customerId: Int, var zip: String) {\n |   def this( zip: String) = this(0,zip)\n |   def getCustomerId() = customerId\n |   def setCustomerId(cust: Int): Unit = {\n |     customerId = cust\n |   }\n | }\ndefined class Customer\nscala> val customer = new Customer(\"123 45\")\ncustomer: Customer = Customer@7944cdbd\n\n```", "```java\ninterface VIPCustomer {\n  Integer discounts();\n}\n```", "```java\nscala> class Customer(val name:String, val discountCode:String=\"N\" ){\n |   def discounts() : List[Int] = List(5)\n |   override def toString() = \"Applied discounts: \" +\n |     discounts.mkString(\" \",\"%, \",\"% \") \n | }\ndefined class Customer\n\n```", "```java\nscala> trait VIPCustomer extends Customer {\n |   override def discounts = super.discounts ::: List(10)\n | }\ndefined trait VIPCustomer\n\n```", "```java\nscala> trait GoldCustomer extends Customer {\n |   override def discounts =\n |     if (discountCode.equals(\"H\"))\n |       super.discounts ::: List(20)\n |     else super.discounts ::: List(15)\n }\ndefined trait GoldCustomer\n\n```", "```java\nscala> object Main {\n |   def main(args: Array[String]) {\n |     val myDiscounts = new Customer(\"Thomas\",\"H\") with\n |       VIPCustomer with GoldCustomer\n |     println(myDiscounts)\n |   }\n | }\ndefined module Main\n\n```", "```java\nscala> Main.main(Array.empty)\nApplied discounts:  5%, 10%, 20%\n\n```", "```java\nscala> object Main {\n |   def main(args: Array[String]) {\n |     println(\"Hello Scala World !\")\n |   }\n | }\ndefined module Main\n\n```", "```java\nscala> case class Customer(val name:String)\ndefined class Customer\nscala> val thomas = Customer(\"Thomas\")\nthomas: Customer = Customer(Thomas)\n\n```", "```java\nscala> val thomas = new Customer(\"Thomas\")\nthomas: Customer = Customer(Thomas)\n\n```", "```java\nobject Customer {\n  def apply()= new Customer(\"default name\")\n}\nclass Customer(name:String) {\nâ€¦\n}\n```", "```java\npackage com.demo.sample;\n\npublic class ConversionSample {\n\n  static Integer parse(String numberAsString) {\n    Integer number = null;\n    try {    \n      number = Integer.parseInt(numberAsString);\n    } catch (NumberFormatExceptionnfe) {\n      System.err.println(\"Wrong format for \"+numberAsString);\n    } catch (Exception ex) {\n      System.err.println(\"An unknown Error has occurred\");\n    }\n    System.out.println(\"Parsed Number: \"+number);\n    return number;\n  }\n  public static void main(String[] args) {\n    parse(\"2345\");\n    parse(\"23ab\");\n  }\n}\n```", "```java\nrun:\nParsed Number: 2345\nWrong format for number 23ab\nParsed Number: null\nBUILD SUCCESSFUL (total time: 0 seconds)\n\n```", "```java\nscala> def parse(numberAsString: String) = \n try {\n Integer.parseInt(numberAsString)\n } catch {\n case nfe: NumberFormatException =>\n println(\"Wrong format for number \"+numberAsString)\n case e: Exception => println(\"Error when parsing number\"+\n numberAsString)\n }\nparse: (numberAsString:String)AnyVal\nscala> parse(\"2345\")\nres10: AnyVal = \"2345\"\nscala> parse(\"23ab\")\nWrong format for number 23ab\nres11: AnyVal = ()\n\n```", "```java\nscala> def parse(numberAsString: String) = \n try {\n Integer.parseInt(numberAsString)\n } catch {\n case nfe: NumberFormatException =>\n println(\"Wrong format for number \"+numberAsString); -1\n case _: Throwable =>\n println(\"Error when parsing number \"+numberAsString)\n -1\n }\nparse: (numberAsString:String)Int\n\n```", "```java\nscala> val number = parse(\"23ab\")\nWrong format for number 23ab\nnumber: Int= -1\n\n```", "```java\nscala> case class Failure(val reason: String)\ndefined class Failure\nscala> def parse(numberAsString: String) : Either[Failure,Int] = \n try {\n val result = Integer.parseInt(numberAsString)\n Right(result)\n } catch {\n case _ : Throwable => Left(Failure(\"Error when parsing number\"))\n }\nparse: (numberAsString:String)Either[Failure,Int]\nscala> val number = parse(\"23ab\")\nnumber: Either[Failure,Int] = Left(Failure(Error when parsing number))\nscala> val number = parse(\"2345\")\nnumber: Either[Failure,Int] = Right(2345)\n\n```", "```java\n...\nString customerLevel = null;\nif(amountBought > 3000) {\n    customerLevel = \"Gold\"; \n} else {\n    customerLevel = \"Silver\";\n}\n...\n```", "```java\nscala> val amountBought = 5000\namountBought: Int = 5000\nscala> val customerLevel =\n if (amountBought> 3000) \"Gold\" else \"Silver\"\ncustomerLevel: String = Gold\n\n```", "```java\nscala> class Customer(\n val firstName: String, \n val lastName: String,\n val age: Int,\n val address: String,\n val country: String,\n valhasAGoodRating: Boolean\n ) {\n\n override def toString() =\n s\" $firstName $lastName\"\n }\ndefined class Customer\n\n```", "```java\nscala> object Constants {\n |   val MyNeverChangingAge = 20\n | }\ndefined module Constants\n\n```", "```java\nscala> val amounts = List(3,6,7,10) map ( x => x +1 )\namounts: List[Int] = List(4, 7, 8, 11)\n\n```", "```java\nscala> val amounts = List(3,6,7,10) map ( myCurrentAmount =>\n myCurrentAmount +1 )\namounts: List[Int] = List(4, 7, 8, 11)\n\n```", "```java\nscala> val amounts = List(3,6,7,10) map { myCurrentAmount  =>\n val result = myCurrentAmount + 1\n println(\"Result: \" + result)\n result\n }\nResult: 4\nResult: 7\nResult: 8\nResult: 11\namounts: List[Int] = List(4, 7, 8, 11)\n\n```", "```java\nscala> val amounts = List(3,6,7,10) map( amt => amt + 1 )\namounts: List[Int] = List(4, 7, 8, 11)\n\n```", "```java\nscala> val amounts = List(3,6,7,10) map( _ + 1 )\namounts: List[Int] = List(4, 7, 8, 11)\n\n```", "```java\nscala> val sumOfAmounts = List(3,6,7,10).foldLeft(0)( _ + _ ) \nsumOfAmounts: Int = 26\n\n```", "```java\nscala> val sumOfAmounts = List(3,6,7,10) reduce ( _ + _ ) \nsumOfAmounts: Int = 26\n\n```", "```java\nscala> val sumOfAmounts = \n List(3,6,7,10) reduce ( (total,element) => total + element ) \nsumOfAmounts: Int = 26\n\n```"]