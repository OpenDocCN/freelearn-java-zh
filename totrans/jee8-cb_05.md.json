["```java\n        <dependency>\n            <groupId>javax</groupId>\n            <artifactId>javaee-api</artifactId>\n            <version>8.0</version>\n            <scope>provided</scope>\n        </dependency>\n```", "```java\n    <security-constraint>\n        <web-resource-collection>\n            <web-resource-name>CH05-Authentication</web-resource-name>\n            <url-pattern>/authServlet</url-pattern>\n        </web-resource-collection>\n        <auth-constraint>\n            <role-name>role1</role-name>\n        </auth-constraint>\n    </security-constraint>\n\n    <security-role>\n        <role-name>role1</role-name>\n    </security-role>\n```", "```java\n@DeclareRoles({\"role1\", \"role2\", \"role3\"})\n@WebServlet(name = \"/UserAuthenticationServlet\", urlPatterns = {\"/UserAuthenticationServlet\"})\npublic class UserAuthenticationServlet extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Inject\n    private javax.security.enterprise.SecurityContext \n    securityContext;\n\n    @Override\n    public void doGet(HttpServletRequest request, \n    HttpServletResponse response) throws ServletException, \n    IOException {\n\n        String name = request.getParameter(\"name\");\n        if (null != name || !\"\".equals(name)) {\n            AuthenticationStatus status = \n            securityContext.authenticate(\n                    request, response, \n                    AuthenticationParameters.withParams().credential\n                    (new CallerOnlyCredential(name)));\n\n            response.getWriter().write(\"Authentication status: \" \n            + status.name() + \"\\n\");\n        }\n\n        String principal = null;\n        if (request.getUserPrincipal() != null) {\n            principal = request.getUserPrincipal().getName();\n        }\n\n        response.getWriter().write(\"User: \" + principal + \"\\n\");\n        response.getWriter().write(\"Role \\\"role1\\\" access: \" + \n        request.isUserInRole(\"role1\") + \"\\n\");\n        response.getWriter().write(\"Role \\\"role2\\\" access: \" + \n        request.isUserInRole(\"role2\") + \"\\n\");\n        response.getWriter().write(\"Role \\\"role3\\\" access: \" + \n        request.isUserInRole(\"role3\") + \"\\n\");\n        response.getWriter().write(\"Access to /authServlet? \" + \n        securityContext.hasAccessToWebResource(\"/authServlet\") + \n        \"\\n\");\n    }\n}\n```", "```java\n@ApplicationScoped\npublic class AuthenticationMechanism implements \nHttpAuthenticationMechanism {\n\n    @Override\n    public AuthenticationStatus validateRequest(HttpServletRequest \n    request, \n    HttpServletResponse response, HttpMessageContext  \n    httpMessageContext) \n    throws AuthenticationException {\n\n        if (httpMessageContext.isAuthenticationRequest()) {\n\n            Credential credential = \n            httpMessageContext.getAuthParameters().getCredential();\n            if (!(credential instanceof CallerOnlyCredential)) {\n                throw new IllegalStateException(\"Invalid \n                mechanism\");\n            }\n\n            CallerOnlyCredential callerOnlyCredential = \n            (CallerOnlyCredential) credential;\n\n            if (\"user\".equals(callerOnlyCredential.getCaller())) {\n                return \n                httpMessageContext.notifyContainerAboutLogin\n                (callerOnlyCredential.getCaller(), new HashSet<> \n                (Arrays.asList(\"role1\",\"role2\")));\n            } else{\n                throw new AuthenticationException();\n            }\n\n        }\n\n        return httpMessageContext.doNothing();\n    }\n\n}\n```", "```java\nAuthentication status: SUCCESS\nUser: user\nRole \"role1\" access: true\nRole \"role2\" access: true\nRole \"role3\" access: false\nAccess to /authServlet? true\n```", "```java\nAuthentication status: SEND_FAILURE\nUser: null\nRole \"role1\" access: false\nRole \"role2\" access: false\nRole \"role3\" access: false\nAccess to /authServlet? false\n```", "```java\n    <security-constraint>\n       ...\n    </security-constraint>\n```", "```java\n        <web-resource-collection>\n            <web-resource-name>CH05-Authentication</web-resource-name>\n            <url-pattern>/authServlet</url-pattern>\n        </web-resource-collection>\n```", "```java\n        <auth-constraint>\n            <role-name>role1</role-name>\n        </auth-constraint>\n```", "```java\n@DeclareRoles({\"role1\", \"role2\", \"role3\"})\n```", "```java\n    @Inject\n    private SecurityContext securityContext;\n```", "```java\n            AuthenticationStatus status = securityContext.authenticate(\n                    request, response, withParams().credential(new \n                    CallerOnlyCredential(name)));\n```", "```java\n            Credential credential = httpMessageContext.getAuthParameters()\n            .getCredential();\n            if (!(credential instanceof CallerOnlyCredential)) {\n                throw new IllegalStateException(\"Invalid mechanism\");\n            }\n\n            CallerOnlyCredential callerOnlyCredential = \n           (CallerOnlyCredential) credential;\n```", "```java\n            if (\"user\".equals(callerOnlyCredential.getCaller())) {\n                ...\n            } else{\n                throw new AuthenticationException();\n            }\n```", "```java\nreturn httpMessageContext.notifyContainerAboutLogin\n(callerOnlyCredential.getCaller(), new HashSet<>(asList(\"role1\",\"role2\")));\n```", "```java\n        response.getWriter().write(\"Role \\\"role1\\\" access: \" + \n        request.isUserInRole(\"role1\") + \"\\n\");\n        response.getWriter().write(\"Role \\\"role2\\\" access: \" + \n        request.isUserInRole(\"role2\") + \"\\n\");\n        response.getWriter().write(\"Role \\\"role3\\\" access: \" + \n        request.isUserInRole(\"role3\") + \"\\n\");\n        response.getWriter().write(\"Access to /authServlet? \" + \n        securityContext.hasAccessToWebResource(\"/authServlet\") + \"\\n\");\n```", "```java\n        <dependency>\n            <groupId>javax</groupId>\n            <artifactId>javaee-api</artifactId>\n            <version>8.0</version>\n            <scope>provided</scope>\n        </dependency>\n```", "```java\npublic class Roles {\n    public static final String ROLE1 = \"role1\";\n    public static final String ROLE2 = \"role2\";\n    public static final String ROLE3 = \"role3\";\n}\n```", "```java\n@Stateful\npublic class UserActivity {\n\n    @RolesAllowed({Roles.ROLE1})\n    public void role1Allowed(){\n        System.out.println(\"role1Allowed executed\");\n    }\n\n    @RolesAllowed({Roles.ROLE2})\n    public void role2Allowed(){\n        System.out.println(\"role2Allowed executed\");\n    }\n\n    @RolesAllowed({Roles.ROLE3})\n    public void role3Allowed(){\n        System.out.println(\"role3Allowed executed\");\n    }\n\n    @PermitAll\n    public void anonymousAllowed(){\n        System.out.println(\"anonymousAllowed executed\");\n    }\n\n    @DenyAll\n    public void noOneAllowed(){\n        System.out.println(\"noOneAllowed executed\");\n    } \n\n}\n```", "```java\npublic interface Executable {\n    void execute() throws Exception;\n}\n```", "```java\npublic interface RoleExecutable {\n    void run(Executable executable) throws Exception;\n}\n```", "```java\n@Named\n@RunAs(Roles.ROLE1)\npublic class Role1Executor implements RoleExecutable {\n\n    @Override\n    public void run(Executable executable) throws Exception {\n        executable.execute();\n    }\n}\n```", "```java\n@Named\n@RunAs(Roles.ROLE2)\npublic class Role2Executor implements RoleExecutable {\n\n    @Override\n    public void run(Executable executable) throws Exception {\n        executable.execute();\n    }\n}\n```", "```java\n@Named\n@RunAs(Roles.ROLE3)\npublic class Role3Executor implements RoleExecutable {\n\n    @Override\n    public void run(Executable executable) throws Exception {\n        executable.execute();\n    }\n}\n```", "```java\n@ApplicationScoped\npublic class AuthenticationMechanism implements \nHttpAuthenticationMechanism {\n\n    @Override\n    public AuthenticationStatus validateRequest(HttpServletRequest \n     request, HttpServletResponse response, HttpMessageContext \n     httpMessageContext) throws AuthenticationException {\n\n        if (httpMessageContext.isAuthenticationRequest()) {\n\n            Credential credential = \n            httpMessageContext.getAuthParameters()\n            .getCredential();\n            if (!(credential instanceof CallerOnlyCredential)) {\n                throw new IllegalStateException(\"Invalid \n                mechanism\");\n            }\n\n            CallerOnlyCredential callerOnlyCredential = \n            (CallerOnlyCredential) credential;\n\n            if (null == callerOnlyCredential.getCaller()) {\n                throw new AuthenticationException();\n            } else switch (callerOnlyCredential.getCaller()) {\n                case \"user1\":\n                    return  \n                    httpMessageContext.\n                    notifyContainerAboutLogin\n                    (callerOnlyCredential.getCaller(),\n                     new HashSet<>\n                    (asList(Roles.ROLE1)));\n                case \"user2\":\n                    return \n                    httpMessageContext.\n                    notifyContainerAboutLogin\n                    (callerOnlyCredential.getCaller(), \n                     new HashSet<>\n                    (asList(Roles.ROLE2)));\n                case \"user3\":\n                    return \n                    httpMessageContext.\n                    notifyContainerAboutLogin\n                    (callerOnlyCredential.getCaller(), \n                     new HashSet<>\n                    (asList(Roles.ROLE3)));\n                default:\n                    throw new AuthenticationException();\n            }\n\n        }\n\n        return httpMessageContext.doNothing();\n    }\n\n}\n```", "```java\n@DeclareRoles({Roles.ROLE1, Roles.ROLE2, Roles.ROLE3})\n@WebServlet(name = \"/UserAuthorizationServlet\", urlPatterns = {\"/UserAuthorizationServlet\"})\npublic class UserAuthorizationServlet extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Inject\n    private SecurityContext securityContext;\n\n    @Inject\n    private Role1Executor role1Executor;\n\n    @Inject\n    private Role2Executor role2Executor;\n\n    @Inject\n    private Role3Executor role3Executor;\n\n    @Inject\n    private UserActivity userActivity;\n\n    @Override\n    public void doGet(HttpServletRequest request, \n    HttpServletResponse \n    response) throws ServletException, IOException {\n\n        try {\n            String name = request.getParameter(\"name\");\n            if (null != name || !\"\".equals(name)) {\n                AuthenticationStatus status = \n                securityContext.authenticate(\n                        request, response, withParams().credential(\n                        new CallerOnlyCredential(name)));\n\n                response.getWriter().write(\"Authentication \n                status: \" + status.name() + \"\\n\");\n            }\n\n            String principal = null;\n            if (request.getUserPrincipal() != null) {\n                principal = request.getUserPrincipal().getName();\n            }\n\n            response.getWriter().write(\"User: \" + principal +\n            \"\\n\");\n            response.getWriter().write(\"Role \\\"role1\\\" access: \" + \n            request.isUserInRole(Roles.ROLE1) + \"\\n\");\n            response.getWriter().write(\"Role \\\"role2\\\" access: \" + \n            request.isUserInRole(Roles.ROLE2) + \"\\n\");\n            response.getWriter().write(\"Role \\\"role3\\\" access: \" + \n            request.isUserInRole(Roles.ROLE3) + \"\\n\");\n\n            RoleExecutable executable = null;\n\n            if (request.isUserInRole(Roles.ROLE1)) {\n                executable = role1Executor;\n            } else if (request.isUserInRole(Roles.ROLE2)) {\n                executable = role2Executor;\n            } else if (request.isUserInRole(Roles.ROLE3)) {\n                executable = role3Executor;\n            }\n\n            if (executable != null) {\n                executable.run(() -> {\n                    try {\n                        userActivity.role1Allowed();\n                        response.getWriter().write(\"role1Allowed \n                        executed: true\\n\");\n                    } catch (Exception e) {\n                        response.getWriter().write(\"role1Allowed  \n                        executed: false\\n\");\n                    }\n\n                    try {\n                        userActivity.role2Allowed();\n                        response.getWriter().write(\"role2Allowed \n                        executed: true\\n\");\n                    } catch (Exception e) {\n                        response.getWriter().write(\"role2Allowed  \n                        executed: false\\n\");\n                    }\n\n                    try {\n                        userActivity.role3Allowed();\n                        response.getWriter().write(\"role2Allowed \n                        executed: true\\n\");\n                    } catch (Exception e) {\n                        response.getWriter().write(\"role2Allowed \n                        executed: false\\n\");\n                    }\n\n                });\n\n            }\n\n            try {\n                userActivity.anonymousAllowed();\n                response.getWriter().write(\"anonymousAllowed  \n                executed: true\\n\");\n            } catch (Exception e) {\n                response.getWriter().write(\"anonymousAllowed \n                executed: false\\n\");\n            }\n\n            try {\n                userActivity.noOneAllowed();\n                response.getWriter().write(\"noOneAllowed \n                executed: true\\n\");\n            } catch (Exception e) {\n                response.getWriter().write(\"noOneAllowed \n                executed: false\\n\");\n            } \n\n        } catch (Exception ex) {\n            System.err.println(ex.getMessage());\n        }\n\n    }\n}\n```", "```java\nAuthentication status: SUCCESS\nUser: user1\nRole \"role1\" access: true\nRole \"role2\" access: false\nRole \"role3\" access: false\nrole1Allowed executed: true\nrole2Allowed executed: false\nrole2Allowed executed: false\nanonymousAllowed executed: true\nnoOneAllowed executed: false\n```", "```java\nAuthentication status: SEND_FAILURE\nUser: null\nRole \"role1\" access: false\nRole \"role2\" access: false\nRole \"role3\" access: false\nanonymousAllowed executed: true\nnoOneAllowed executed: false\n```", "```java\n    @RolesAllowed({Roles.ROLE1})\n    public void role1Allowed(){\n        System.out.println(\"role1Allowed executed\");\n    }\n```", "```java\n@Named\n@RunAs(Roles.ROLE1)\npublic class Role1Executor implements RoleExecutable {\n\n    @Override\n    public void run(Executable executable) throws Exception {\n        executable.execute();\n    }\n}\n```", "```java\n    @Inject\n    private SecurityContext securityContext;\n```", "```java\n            AuthenticationStatus status = securityContext.authenticate(\n                    request, response, withParams().credential(new \n                    CallerOnlyCredential(name)));\n```", "```java\n            Credential credential = httpMessageContext.getAuthParameters().\n            getCredential();\n            if (!(credential instanceof CallerOnlyCredential)) {\n                throw new IllegalStateException(\"Invalid mechanism\");\n            }\n\n            CallerOnlyCredential callerOnlyCredential = \n           (CallerOnlyCredential) credential;\n```", "```java\n            if (null == callerOnlyCredential.getCaller()) {\n                throw new AuthenticationException();\n            } else switch (callerOnlyCredential.getCaller()) {\n                case \"user1\":\n                    return httpMessageContext.notifyContainerAboutLogin\n                    (callerOnlyCredential.getCaller(), new HashSet<>\n                    (asList(Roles.ROLE1)));\n                case \"user2\":\n                    return httpMessageContext.notifyContainerAboutLogin\n                    (callerOnlyCredential.getCaller(), new HashSet<>\n                    (asList(Roles.ROLE2)));\n                case \"user3\":\n                    return httpMessageContext.notifyContainerAboutLogin\n                    (callerOnlyCredential.getCaller(), new HashSet<>\n                    (asList(Roles.ROLE3)));\n                default:\n                    throw new AuthenticationException();\n            }\n```", "```java\n            if (request.isUserInRole(Roles.ROLE1)) {\n                executable = role1Executor;\n            } else if (request.isUserInRole(Roles.ROLE2)) {\n                executable = role2Executor;\n            } else if (request.isUserInRole(Roles.ROLE3)) {\n                executable = role3Executor;\n            }\n```", "```java\n./asadmin\n```", "```java\ncreate-ssl --type http-listener --certname cookbookCert http-listener-1\n```", "```java\ndelete-ssl --type http-listener http-listener-1\n```", "```java\n        <dependency>\n            <groupId>javax</groupId>\n            <artifactId>javaee-api</artifactId>\n            <version>8.0</version>\n            <scope>provided</scope>\n        </dependency>\n```", "```java\npublic class Roles {\n    public static final String ADMIN = \"admin\";\n    public static final String USER = \"user\";\n}\n```", "```java\n@Stateful\npublic class UserBean {\n\n    @RolesAllowed({Roles.ADMIN})\n    public void adminOperation(){\n        System.out.println(\"adminOperation executed\");\n    }\n\n    @RolesAllowed({Roles.USER})\n    public void userOperation(){\n        System.out.println(\"userOperation executed\");\n    }\n\n    @PermitAll\n    public void everyoneCanDo(){\n        System.out.println(\"everyoneCanDo executed\");\n    }\n\n    @DenyAll\n    public void noneCanDo(){\n        System.out.println(\"noneCanDo executed\");\n    } \n\n}\n```", "```java\n@Named\n@RunAs(Roles.USER)\npublic class UserExecutor implements RoleExecutable {\n\n    @Override\n    public void run(Executable executable) throws Exception {\n        executable.execute();\n    }\n}\n```", "```java\n@Named\n@RunAs(Roles.ADMIN)\npublic class AdminExecutor implements RoleExecutable {\n\n    @Override\n    public void run(Executable executable) throws Exception {\n        executable.execute();\n    }\n}\n```", "```java\n@ApplicationScoped\npublic class AuthenticationMechanism implements HttpAuthenticationMechanism {\n\n    @Override\n    public AuthenticationStatus validateRequest(HttpServletRequest \n    request, HttpServletResponse response, HttpMessageContext \n    httpMessageContext) \n    throws AuthenticationException {\n\n        if (httpMessageContext.isAuthenticationRequest()) {\n\n            Credential credential = \n            httpMessageContext.getAuthParameters().\n            getCredential();\n            if (!(credential instanceof CallerOnlyCredential)) {\n                throw new IllegalStateException(\"Invalid \n                mechanism\");\n            }\n\n            CallerOnlyCredential callerOnlyCredential = \n            (CallerOnlyCredential) \n            credential;\n\n            if (null == callerOnlyCredential.getCaller()) {\n                throw new AuthenticationException();\n            } else switch (callerOnlyCredential.getCaller()) {\n                case Roles.ADMIN:\n                    return httpMessageContext\n                    .notifyContainerAboutLogin\n                    (callerOnlyCredential.getCaller(),\n                     new HashSet<>\n                    (asList(Roles.ADMIN)));\n                case Roles.USER:\n                    return httpMessageContext\n                   .notifyContainerAboutLogin\n                    (callerOnlyCredential.getCaller(),\n                    new HashSet<> \n                    (asList(Roles.USER)));\n                default:\n                    throw new AuthenticationException();\n            }\n\n        }\n\n        return httpMessageContext.doNothing();\n    }\n\n}\n```", "```java\n@DeclareRoles({Roles.ADMIN, Roles.USER})\n@WebServlet(name = \"/UserServlet\", urlPatterns = {\"/UserServlet\"})\npublic class UserServlet extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Inject\n    private SecurityContext securityContext;\n\n    @Inject\n    private UserExecutor userExecutor;\n\n    @Inject\n    private UserBean userActivity;\n\n    @Override\n    public void doGet(HttpServletRequest request, \n    HttpServletResponse response) throws ServletException, \n    IOException {\n\n        try {\n            securityContext.authenticate(\n                    request, response, withParams().credential(new \n                    CallerOnlyCredential(Roles.USER)));\n\n            response.getWriter().write(\"Role \\\"admin\\\" access: \" + \n            request.isUserInRole(Roles.ADMIN) + \"\\n\");\n            response.getWriter().write(\"Role \\\"user\\\" access: \" + \n            request.isUserInRole(Roles.USER) + \"\\n\");\n\n            userExecutor.run(() -> {\n                try {\n                    userActivity.adminOperation();\n                    response.getWriter().write(\"adminOperation \n                    executed: true\\n\");\n                } catch (Exception e) {\n                    response.getWriter().write(\"adminOperation \n                    executed: false\\n\");\n                }\n\n                try {\n                    userActivity.userOperation();\n                    response.getWriter().write(\"userOperation \n                    executed: true\\n\");\n                } catch (Exception e) {\n                    response.getWriter().write(\"userOperation  \n                    executed: false\\n\");\n                }\n\n            });\n\n            try {\n                userActivity.everyoneCanDo();\n                response.getWriter().write(\"everyoneCanDo \n                executed: true\\n\");\n            } catch (Exception e) {\n                response.getWriter().write(\"everyoneCanDo\n                executed: false\\n\");\n            }\n\n            try {\n                userActivity.noneCanDo();\n                response.getWriter().write(\"noneCanDo \n                executed: true\\n\");\n            } catch (Exception e) {\n                response.getWriter().write(\"noneCanDo \n                executed: false\\n\");\n            }\n\n        } catch (Exception ex) {\n            System.err.println(ex.getMessage());\n        }\n\n    }\n}\n```", "```java\n@DeclareRoles({Roles.ADMIN, Roles.USER})\n@WebServlet(name = \"/AdminServlet\", urlPatterns = {\"/AdminServlet\"})\npublic class AdminServlet extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Inject\n    private SecurityContext securityContext;\n\n    @Inject\n    private AdminExecutor adminExecutor;\n\n    @Inject\n    private UserBean userActivity;\n\n    @Override\n    public void doGet(HttpServletRequest request, \n    HttpServletResponse \n    response) throws ServletException, IOException {\n\n        try {\n            securityContext.authenticate(\n                    request, response, withParams().credential(new \n                    CallerOnlyCredential(Roles.ADMIN)));\n\n            response.getWriter().write(\"Role \\\"admin\\\" access: \" + \n            request.isUserInRole(Roles.ADMIN) + \"\\n\");\n            response.getWriter().write(\"Role \\\"user\\\" access: \" + \n            request.isUserInRole(Roles.USER) + \"\\n\");\n\n            adminExecutor.run(() -> {\n                try {\n                    userActivity.adminOperation();\n                    response.getWriter().write(\"adminOperation \n                    executed: true\\n\");\n                } catch (Exception e) {\n                    response.getWriter().write(\"adminOperation \n                    executed: false\\n\");\n                }\n\n                try {\n                    userActivity.userOperation();\n                    response.getWriter().write(\"userOperation \n                    executed: true\\n\");\n                } catch (Exception e) {\n                    response.getWriter().write(\"userOperation \n                    executed: false\\n\");\n                }\n\n            });\n\n            try {\n                userActivity.everyoneCanDo();\n                response.getWriter().write(\"everyoneCanDo \n                executed: true\\n\");\n            } catch (Exception e) {\n                response.getWriter().write(\"everyoneCanDo\n                executed: false\\n\");\n            }\n\n            try {\n                userActivity.noneCanDo();\n                response.getWriter().write(\"noneCanDo \n                executed: true\\n\");\n            } catch (Exception e) {\n                response.getWriter().write(\"noneCanDo \n                executed: false\\n\");\n            }\n\n        } catch (Exception ex) {\n            System.err.println(ex.getMessage());\n        }\n\n    }\n}\n```", "```java\n            securityContext.authenticate(\n                    request, response, withParams().credential(new \n                    CallerOnlyCredential(Roles.ADMIN)));\n```", "```java\n            Credential credential = \n            httpMessageContext.getAuthParameters()\n            .getCredential();\n            if (!(credential instanceof CallerOnlyCredential)) {\n                throw new IllegalStateException(\"Invalid mechanism\");\n            }\n\n            CallerOnlyCredential callerOnlyCredential = \n            (CallerOnlyCredential) \n            credential;\n\n            if (null == callerOnlyCredential.getCaller()) {\n                throw new AuthenticationException();\n            } else switch (callerOnlyCredential.getCaller()) {\n                case Roles.ADMIN:\n                    return httpMessageContext.notifyContainerAboutLogin\n                    (callerOnlyCredential.getCaller(), new HashSet<>\n                    (asList(Roles.ADMIN)));\n                case Roles.USER:\n                    return httpMessageContext.notifyContainerAboutLogin\n                    (callerOnlyCredential.getCaller(), new HashSet<>\n                    (asList(Roles.USER)));\n                default:\n                    throw new AuthenticationException();\n            }\n```", "```java\n            userExecutor.run(() -> {\n                try {\n                    userActivity.adminOperation();\n                    response.getWriter().write(\"adminOperation  \n                    executed: true\\n\");\n                } catch (Exception e) {\n                    response.getWriter().write(\"adminOperation \n                    executed: false\\n\");\n                }\n\n                try {\n                    userActivity.userOperation();\n                    response.getWriter().write(\"userOperation \n                    executed: true\\n\");\n                } catch (Exception e) {\n                    response.getWriter().write(\"userOperation \n                    executed:  false\\n\");\n                }\n\n            });\n```", "```java\n            try {\n                userActivity.everyoneCanDo();\n                response.getWriter().write(\"everyoneCanDo \n                executed: true\\n\");\n            } catch (Exception e) {\n                response.getWriter().write(\"everyoneCanDo \n                executed: false\\n\");\n            }\n\n            try {\n                userActivity.noneCanDo();\n                response.getWriter().write(\"noneCanDo \n                executed: true\\n\");\n            } catch (Exception e) {\n                response.getWriter().write(\"noneCanDo \n                executed: false\\n\");\n            }\n```", "```java\nRole \"admin\" access: true\nRole \"user\" access: false\nadminOperation executed: true\nuserOperation executed: false\neveryoneCanDo executed: true\nnoneCanDo executed: false\n```", "```java\n        <dependency>\n            <groupId>javax</groupId>\n            <artifactId>javaee-api</artifactId>\n            <version>8.0</version>\n            <scope>provided</scope>\n        </dependency>\n```", "```java\npublic class Roles {\n    public static final String ADMIN = \"admin\";\n    public static final String USER = \"user\";\n}\n```", "```java\n@Stateful\npublic class UserBean {\n\n    @RolesAllowed({Roles.ADMIN})\n    public void adminOperation(){\n        System.out.println(\"adminOperation executed\");\n    }\n\n    @RolesAllowed({Roles.USER})\n    public void userOperation(){\n        System.out.println(\"userOperation executed\");\n    }\n\n    @PermitAll\n    public void everyoneCanDo(){\n        System.out.println(\"everyoneCanDo executed\");\n    }\n\n}\n```", "```java\n@ApplicationScoped\npublic class UserIdentityStore implements IdentityStore {\n\n    @Override\n    public CredentialValidationResult validate(Credential credential) {\n        if (credential instanceof UsernamePasswordCredential) {\n            return validate((UsernamePasswordCredential) credential);\n        }\n\n        return CredentialValidationResult.NOT_VALIDATED_RESULT;\n    }\n\n    public CredentialValidationResult validate(UsernamePasswordCredential \n    usernamePasswordCredential) {\n\n        if (usernamePasswordCredential.\n        getCaller().equals(Roles.ADMIN)\n                && usernamePasswordCredential.\n                getPassword().compareTo(\"1234\")) \n        {\n\n            return new CredentialValidationResult(\n                    new CallerPrincipal\n                    (usernamePasswordCredential.getCaller()),\n                    new HashSet<>(Arrays.asList(Roles.ADMIN)));\n        } else if (usernamePasswordCredential.\n          getCaller().equals(Roles.USER)\n                && usernamePasswordCredential.\n                getPassword().compareTo(\"1234\")) \n        {\n\n            return new CredentialValidationResult(\n                    new CallerPrincipal\n                    (usernamePasswordCredential.getCaller()),\n                    new HashSet<>(Arrays.asList(Roles.USER)));\n        }\n\n        return CredentialValidationResult.INVALID_RESULT;\n    }\n\n}\n```", "```java\n@ApplicationScoped\npublic class AuthenticationMechanism implements HttpAuthenticationMechanism {\n\n    @Inject\n    private UserIdentityStore identityStore;\n\n    @Override\n    public AuthenticationStatus validateRequest(HttpServletRequest \n    request, \n    HttpServletResponse response, HttpMessageContext \n    httpMessageContext) \n    throws AuthenticationException {\n\n        if (httpMessageContext.isAuthenticationRequest()) {\n\n            Credential credential = \n            httpMessageContext.getAuthParameters()\n            .getCredential();\n            if (!(credential instanceof UsernamePasswordCredential)) {\n                throw new IllegalStateException(\"Invalid \n                mechanism\");\n            }\n\n            return httpMessageContext.notifyContainerAboutLogin\n            (identityStore.validate(credential));\n        }\n\n        return httpMessageContext.doNothing();\n    }\n\n}\n```", "```java\n@DeclareRoles({Roles.ADMIN, Roles.USER})\n@WebServlet(name = \"/OperationServlet\", urlPatterns = {\"/OperationServlet\"})\npublic class OperationServlet extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Inject\n    private SecurityContext securityContext;\n\n    @Inject\n    private UserBean userActivity;\n\n    @Override\n    public void doGet(HttpServletRequest request, \n    HttpServletResponse \n    response) throws ServletException, IOException {\n\n        String name = request.getParameter(\"name\");\n        String password = request.getParameter(\"password\");\n\n        Credential credential = new UsernamePasswordCredential(name, \n        new Password(password));\n\n        AuthenticationStatus status = securityContext.authenticate(\n                request, response, \n        withParams().credential(credential));\n\n        response.getWriter().write(\"Role \\\"admin\\\" access: \" + \n        request.isUserInRole(Roles.ADMIN) + \"\\n\");\n        response.getWriter().write(\"Role \\\"user\\\" access: \" + \n        request.isUserInRole(Roles.USER) + \"\\n\");\n\n        if (status.equals(AuthenticationStatus.SUCCESS)) {\n\n            if (request.isUserInRole(Roles.ADMIN)) {\n                userActivity.adminOperation();\n                response.getWriter().write(\"adminOperation \n                executed: true\\n\");\n            } else if (request.isUserInRole(Roles.USER)) {\n                userActivity.userOperation();\n                response.getWriter().write(\"userOperation \n                executed: true\\n\");\n            }\n\n            userActivity.everyoneCanDo();\n            response.getWriter().write(\"everyoneCanDo \n            executed: true\\n\");\n\n        } else {\n            response.getWriter().write(\"Authentication failed\\n\");\n        }\n\n    }\n}\n```", "```java\nRole \"admin\" access: true\nRole \"user\" access: false\nadminOperation executed: true\neveryoneCanDo executed: true\n```", "```java\nRole \"admin\" access: false\nRole \"user\" access: false\nAuthentication failed\n```", "```java\n        if (usernamePasswordCredential.getCaller().equals(Roles.ADMIN)\n                && \n        usernamePasswordCredential.getPassword().compareTo(\"1234\")) \n        {\n\n            return new CredentialValidationResult(\n                    new CallerPrincipal(usernamePasswordCredential\n                    .getCaller()),\n                    new HashSet<>(asList(Roles.ADMIN)));\n        } else if (usernamePasswordCredential.getCaller()\n          .equals(Roles.USER)\n                && usernamePasswordCredential.\n                getPassword().compareTo(\"1234\")) \n        {\n\n            return new CredentialValidationResult(\n                    new CallerPrincipal(usernamePasswordCredential\n                   .getCaller()),\n                    new HashSet<>(asList(Roles.USER)));\n        }\n\n        return INVALID_RESULT;\n```", "```java\n            Credential credential = \n            httpMessageContext.getAuthParameters().getCredential();\n            if (!(credential instanceof UsernamePasswordCredential)) {\n                throw new IllegalStateException(\"Invalid mechanism\");\n            }\n\n            return httpMessageContext.notifyContainerAboutLogin\n            (identityStore.validate(credential));\n```", "```java\n        String name = request.getParameter(\"name\");\n        String password = request.getParameter(\"password\");\n\n        Credential credential = new UsernamePasswordCredential(name, \n        new Password(password));\n\n        AuthenticationStatus status = securityContext.authenticate(\n                request, response, \n               withParams().credential(credential));\n```", "```java\n        if (status.equals(AuthenticationStatus.SUCCESS)) {\n\n            if (request.isUserInRole(Roles.ADMIN)) {\n                userActivity.adminOperation();\n                response.getWriter().write(\"adminOperation \n                executed: true\\n\");\n            } else if (request.isUserInRole(Roles.USER)) {\n                userActivity.userOperation();\n                response.getWriter().write(\"userOperation \n                executed: true\\n\");\n            }\n\n            userActivity.everyoneCanDo();\n            response.getWriter().write(\"everyoneCanDo executed:\n```", "```java\n\n        true\\n\");\n\n        } else {\n            response.getWriter().write(\"Authentication failed\\n\");\n        }\n```"]