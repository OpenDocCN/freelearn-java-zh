["```java\n<repositories>\n<repository>\n  <id>imagej.public</id>\n  <url>http://maven.imagej.net/content/groups/public</url>\n  </repository>\n</repositories>\n\n<dependencies>\n<dependency>\n  <groupId>net.imagej</groupId>\n  <artifactId>ij</artifactId>\n  <version>1.50b</version>\n  </dependency>\n</dependencies>\n```", "```java\npublic static void main(String... args) {\n\n}\n```", "```java\npublic static void main(String... args) {\n  new ImageJ();\n}\n```", "```java\n/* set the plugins.dir property to make the plugin appear in the Plugins menu */\nClass<?> clazz = Object_Tracker.class;\nString url = clazz.getResource(\"/\" + clazz.getName().replace('.', '/') + \".class\").toString();\nint lastIdx = url.lastIndexOf('/');\n\nString pluginsDir = url.substring(5, lastIdx);\nSystem.setProperty(\"plugins.dir\", pluginsDir);\n```", "```java\n//import section\nimport ij.ImageJ;\n\n//class declaration\npublic class Object_Tracker implements PlugInFilter {\n  //class-wide variables\n  private ImagePlus imp;\n  /*etc...*/\n\n  //constructor\n  public void Object_Tracker() {}\n\n  //main method\n  public static void main(String... args) {}\n\n  //setup method\n  public int setup(String arg, ImagePlus imp) {}\n\n  //run method\n  public void run(ImageProcessor ip) {}\n\n  //additional methods follow below this point\n  /*methods for image processing*/\n\n}\n```", "```java\nreturn DOES_8C+DOES_8G+DOES_16;\n```", "```java\n/**\n *\n * @param arg\n * @param ip\n * @return\n */\n```", "```java\n/**\n * This is the setup method for the Object Tracker plugin\n *\n * @param arg input argument for control\n * @param ip Currently active image\n * @return DOES_8G, DOES_8C and DOES_16\n */\n```", "```java\nif(RoiManager.getInstance() == null) {\n  new RoiManager();\n}\n```", "```java\n//get the dimensions of the current image\nint[] dims = ip.getDimensions();\nif (dims[2] > 1){\n  //more than 1 channel\n  return DONE;\n}\nelse if(dims[3] > 1 && dims[4] > 1) {\n  //multiple slices AND frames\n  return DONE;\n}\n```", "```java\nif (imp == null) { return DONE; }\n```", "```java\nif (imp == null) {\n  IJ.showMessage(\"We need a single channel stack to continue!\");\n  return DONE;\n}\n```", "```java\nint nFrames = imp.getImageStackSize();\nfor (int f=0; f<nFrames; f++) {\n  imp.setSlice(f+1);\n  ip = imp.getProcessor();\n  performDetection(ip);\n}\n```", "```java\nprivate void performDetection(ImageProcessor ip) { ip.setAutoThreshold(AutoThresholder.Method.Default, true);\n  imp.setProcessor(ip);\n  Roi roi = ThresholdToSelection.run(imp);\n  rm.addRoi(roi);\n}\n```", "```java\npublic class Object_Tracker implements PlugInFilter{\n  private ImagePlus imp;\n  private RoiManager rm;\n```", "```java\nrm = RoiManager.getInstance();\nif(rm == null) { rm = new RoiManager();}\n\nthis.imp = imp;\n```", "```java\nImagePlus impMask = new ImagePlus(\"mask\", new \n  ByteProcessor(imp.getWidth(), imp.getHeight()));\nimpMask.setRoi(roi);\n\nImageProcessor ipMask = impMask.getProcessor();\nipMask.setColor(255);\nipMask.fill(impMask.getMask());\nipMask.invertLut();\n```", "```java\nBinary B = new Binary();\nB.setup(\"fill\", impMask);\nB.run(ipMask);\n```", "```java\nfor (int i=0;i<3; i++) {ipMask.erode();}\nfor (int i=0;i<5; i++) {ipMask.dilate();}\n```", "```java\nroi = ThresholdToSelection.run(impMask);\nimpMask.setRoi(roi);\nrm.addRoi(roi);\n```", "```java\n//create a maximum intensity projection\nZProjector zp = new ZProjector(imp);\nzp.setMethod(ZProjector.MAX_METHOD);\nzp.doProjection();\nImagePlus impMax = zp.getProjection();\n\n//set a threshold in the maximum intensity projection\nImageProcessor ipMax = impMax.getProcessor();\nipMax.setAutoThreshold(AutoThresholder.Method.Default, true);\nimpMax.setProcessor(ipMax);\n```", "```java\n//set the options for the particle analyzer\nint nOpts = ParticleAnalyzer.ADD_TO_MANAGER;\nint nMeasures = ParticleAnalyzer.SHOW_NONE;\ndouble dMin = 500.0; \ndouble dMax = Double.MAX_VALUE\n\n//perform the particle analysis\nParticleAnalyzer pa = new ParticleAnalyzer(nOpts, nMeasures, new ResultsTable(), dMin, dMax);\nRoiManager rmMax = new RoiManager(true);\nParticleAnalyzer.setRoiManager(rmMax);\npa.analyze(impMax);\n\n//get the detected particles\nRoi[] searchSpaces = rmMax.getRoisAsArray();\n```", "```java\n//perform the detection for each search space\nfor (Roi searchSpace : searchSpaces) {\n  imp.setRoi(searchSpace);\n  impProcess = imp.duplicate();\n  for (int f = 0; f < nFrames; f++) {\n    impProcess.setSlice(f + 1);\n    ip = impProcess.getProcessor();\n    performDetection(impProcess, ip);\n  }\n}\n```", "```java\nprivate void performMeasurements() {\n  Analyzer.setMeasurements(msrmnt);\n  imp.unlock();\n  rm.runCommand(imp,\"Measure\");\n}\n```", "```java\nprivate static final int msrmnt = Measurements.SLICE + Measurements.AREA + Measurements.CIRCULARITY + Measurements.MEAN;\n```", "```java\nPrefs.set(\"object_tracker.minParticleSize\", 500.0);\ndouble DMIN = Prefs.getDouble(\"object_tracker.minParticleSize\", 500.0);\nPrefs.savePreferences();\n```", "```java\n//construct and show the options dialog\nGenericDialog gd = new GenericDialog(\"Options Object Tracker\");\ngd.addChoice(\"Detection mode\", (new String[]{\"multi\", \"single\"}), DETECT_METHOD);\ngd.addChoice(\"Threshold method\", AutoThresholder.getMethods(), THRESH_METHOD);\ngd.addNumericField(\"Min. particle size\", DMIN, 0);\ngd.addNumericField(\"Max. particle size\", DMAX, 0);\ngd.showDialog();\n\n//store the values\nPrefs.set(\"object_tracker.detectMethod\", gd.getNextChoice());\nPrefs.set(\"object_tracker.threshMethod\", gd.getNextChoice());\nPrefs.set(\"object_tracker.minParticleSize\", gd.getNextNumber());\nPrefs.set(\"object_tracker.maxParticleSize\", gd.getNextNumber());\n```", "```java\n<dependency>\n  <groupId></groupId>\n  <artifactId></artifactId>\n  <version></version>\n</dependency>\n```", "```java\n<dependency>\n  <groupId>org.apache.poi</groupId>\n  <artifactId>poi</artifactId>\n  <version>3.13</version>\n</dependency>\n```", "```java\npublic void saveResultsToExcel(String xlFile, ResultsTable rt) {\n  FileOutputStream xlOut;\n  try { xlOut = new FileOutputStream(xlFile); }\n  catch (FileNotFoundException ex) {\n    Logger.getLogger(Object_Tracker.class.getName()).log(Level.SEVERE, null, ex);\n  }\n\n  Workbook xlBook = new HSSFWorkbook();\n  Sheet xlSheet = xlBook.createSheet(\"Results Object Tracker\");\n  Row r = null;\n  Cell c = null;\n  CellStyle cs = xlBook.createCellStyle();\n  Font f = xlBook.createFont();\n  Font fb = xlBook.createFont();\n  DataFormat df = xlBook.createDataFormat();\n  f.setFontHeightInPoints((short) 12);\n  fb.setFontHeightInPoints((short) 12);\n  fb.setBoldweight(Font.BOLDWEIGHT_BOLD);\n  cs.setFont(f);\n  cs.setDataFormat(df.getFormat(\"#,##0.000\"));\n  cb.setDataFormat(HSSFDataFormat.getBuiltinFormat(\"text\"));\n  cb.setFont(fb);\n\n  int numRows = rt.size();\n  String[] colHeaders = rt.getHeadings();\n  int rownum = 0;\n  //create a header\n  r = xlSheet.createRow(rownum);\n  for (int cellnum=0; cellnum<colHeaders.length; cellnum++) {\n    c = r.createCell(cellnum);\n    c.setCellStyle(cb);\n    c.setCellValue(colHeaders[cellnum]);\n  }\n  rownum++;\n\n  for (int row=0; row<numRows; row++) {\n    r = xlSheet.createRow(rownum+row);\n    int numCols = rt.getLastColumn() + 1;\n    for (int cellnum=0; cellnum<numCols; cellnum++) {\n      c = r.createCell(cellnum);\n      c.setCellValue(rt.getValueAsDouble(cellnum, row));\n    }\n  }\n  try { xlBook.write(xlOut); xlOut.close();}\n  catch (IOException ex) {\n    Logger.getLogger(Object_Tracker.class.getName()).log(Level.SEVERE, null, ex);\n  }\n}\n```", "```java\nResultsTable rt = ResultsTable.getResultsTable();\n```"]