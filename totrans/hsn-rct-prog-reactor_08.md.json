["```java\n    @Test\n    public void testThrownException() {\n        Flux<Long> fibonacciGenerator = Flux.generate(() -> Tuples.<Long,\n                Long>of(0L, 1L), (state, sink) -> {\n            if (state.getT1() < 0)\n                throw new RuntimeException(\"Value out of bounds\");\n            else\n                sink.next(state.getT1());\n\n            return Tuples.of(state.getT2(), state.getT1() + state.getT2());\n        });\n        fibonacciGenerator\n                .subscribe(System.out::println);\n    }  \n```", "```java\n@Test\n    public void testThrownException() {\n        Flux<Long> fibonacciGenerator = Flux.generate(() -> Tuples.<Long,\n                Long>of(0L, 1L), (state, sink) -> {\n            if (state.getT1() < 0)\n                throw new RuntimeException(\"Value out of bounds\");\n            else\n                sink.next(state.getT1());\n\n            return Tuples.of(state.getT2(), state.getT1() + state.getT2());\n        });\n        fibonacciGenerator\n                .subscribe(x -> throw new RuntimeException(\"Subscriber threw error\"));\n    }     \n```", "```java\nCaused by: java.lang.RuntimeException: Subscriber threw error\n    at ErrorHandlingTest.lambda$testThrownException$1(ErrorHandlingTest.java:16)\n    at reactor.core.publisher.FluxGenerate$GenerateSubscription.fastPath(FluxGenerate.java:223)\n    at reactor.core.publisher.FluxGenerate$GenerateSubscription.request(FluxGenerate.java:202)\n    at reactor.core.publisher.LambdaSubscriber.onSubscribe(LambdaSubscriber.java:89)\n    at reactor.core.publisher.FluxGenerate.subscribe(FluxGenerate.java:83)\n```", "```java\n  @Test\n    public void testErrorRaised() {\n        Flux<Long> fibonacciGenerator = Flux.generate(() -> Tuples.<Long,\n                Long>of(0L, 1L), (state, sink) -> {\n            if (state.getT1() < 0)\n                sink.error(new RuntimeException(\"Value out of bounds\"));\n            else           \n                // Rest removed for Brevity\n        });\n    }\n```", "```java\n   @Test\n    public void testErrorRaised() {\n\n        // Rest Removed for Brevity\n\n        fibonacciGenerator\n                .subscribe(System.out::println, System.out::println);\n    }\n```", "```java\n      @Test\n    public void testCheckedExceptions() {\n        Flux<Long> fibonacciGenerator = Flux.generate(() -> Tuples.<Long,\n                Long>of(0L, 1L), (state, sink) -> {\n            try {\n                raiseCheckedException();\n            } catch (IOException e) {\n                throw Exceptions.propagate(e);\n            }\n            return Tuples.of(state.getT2(), state.getT1() + state.getT2());\n        });\n        fibonacciGenerator\n                .subscribe(System.out::println,\n                 e -> Exceptions.unwrap(e));\n    }\n\n    void raiseCheckedException() throws IOException {\n        throw new IOException(\"Raising checked Exception\");\n    }\n\n```", "```java\n    @Test\n    public void testDoError() {\n        // Removed for brevity\n        fibonacciGenerator\n                .doOnError(System.out::println)\n                .subscribe(System.out::println, e -> e.printStackTrace());\n    }\n```", "```java\n    @Test\n    public void testDoTerminate() {\n       // Removed for brevity\n        fibonacciGenerator\n                .doOnTerminate(() -> System.out.println(\"Terminated\"))\n                .subscribe(System.out::println,e -> e.printStackTrace() );\n    }\n```", "```java\n    @Test\n    public void testDoFinally() {\n        Flux<Long> fibonacciGenerator = Flux.generate(() -> Tuples.<Long,\n                Long>of(0L, 1L), (state, sink) -> {\n            if (state.getT1() < 0)\n                sink.error(new RuntimeException(\"Value out of bounds\"));\n            else\n                sink.next(state.getT1());\n\n            return Tuples.of(state.getT2(), state.getT1() + state.getT2());\n        });\n        fibonacciGenerator\n                .doFinally( x -> System.out.println(\"invoking finally\"))\n                .subscribe(System.out::println, e -> e.printStackTrace());\n    }\n```", "```java\n @Test\n    public void testUsingMethod() {\n        Flux<Long> fibonacciGenerator = Flux.generate(() -> Tuples.<Long,\n                Long>of(0L, 1L), (state, sink) -> {\n            if (state.getT1() < 0)\n                sink.complete();\n            else\n                sink.next(state.getT1());\n\n            return Tuples.of(state.getT2(), state.getT1() + state.getT2());\n        });\n        Closeable closable = () -> System.out.println(\"closing the stream\");\n        Flux.using(() -> closable, x -> fibonacciGenerator, e -> {\n            try {\n                e.close();\n            } catch (Exception e1) {\n                throw Exceptions.propagate(e1);\n            }\n        }).subscribe(System.out::println);\n    }\n```", "```java\n    @Test\n    public void testErrorReturn() {\n        Flux<Long> fibonacciGenerator = Flux.generate(() -> Tuples.<Long,\n                Long>of(0L, 1L), (state, sink) -> {\n            if (state.getT1() < 0)\n                sink.error(new RuntimeException(\"Value out of bounds\"));\n            else\n                sink.next(state.getT1());\n\n            return Tuples.of(state.getT2(), state.getT1() + state.getT2());\n        });\n        fibonacciGenerator\n                .onErrorReturn(0L)\n                .subscribe(System.out::println);\n    }\n```", "```java\n      @Test\n    public void testErrorReturn() {\n        Flux<Long> fibonacciGenerator = Flux.generate(() -> Tuples.<Long,\n                Long>of(0L, 1L), (state, sink) -> {\n            if (state.getT1() < 0)\n                sink.error(new IllegalStateException(\"Value out of bounds\"));\n         // Removed for Brevity\n        });\n        fibonacciGenerator                \n                .onErrorReturn(RuntimeException.class,0L)\n                .onErrorReturn(IllegalStateException.class,-1L)\n                .subscribe(System.out::println);\n    }\n```", "```java\n    @Test\n    public void testErrorResume() {\n        Flux<Long> fibonacciGenerator = Flux.generate(() -> Tuples.<Long,\n                Long>of(0L, 1L), (state, sink) -> {\n          // Removed for Brevity\n        });\n        fibonacciGenerator\n                .onErrorResume(x -> Flux.just(0L,-1L,-2L))\n                .subscribe(System.out::println);\n    }\n```", "```java\n    @Test\n    public void testErrorMap() {\n        Flux<Long> fibonacciGenerator = Flux.generate(() -> Tuples.<Long,\n                Long>of(0L, 1L), (state, sink) -> {\n           // Removed for brevity\n        });\n        fibonacciGenerator\n                .onErrorMap(x -> new IllegalStateException(\"Publisher threw error\", x))\n                .subscribe(System.out::println,System.out::println);\n    }\n```", "```java\n    @Test\n    public void testTimeout() throws  Exception{\n        Flux<Long> fibonacciGenerator = Flux.generate(() -> Tuples.<Long,\n                Long>of(0L, 1L), (state, sink) -> {\n            if (state.getT1() < 0)\n                throw new RuntimeException(\"Value out of bounds\");\n            else\n                sink.next(state.getT1());\n\n            return Tuples.of(state.getT2(), state.getT1() + state.getT2());\n        });\n        CountDownLatch countDownLatch = new CountDownLatch(1);\n        fibonacciGenerator\n                .delayElements(Duration.ofSeconds(1))\n                .timeout(Duration.ofMillis(500))\n                .subscribe(System.out::println, e -> {\n                    System.out.println(e);\n                    countDownLatch.countDown();\n                });\n        countDownLatch.await();\n    }\n```", "```java\n    @Test\n    public void testTimeoutWithFallback() throws  Exception{\n     // Removed for brevity \n    fibonacciGenerator\n                .delayElements(Duration.ofSeconds(1))\n                .timeout(Duration.ofMillis(500),Flux.just(-1L))\n                .subscribe(e -> {\n                    System.out.println(e);\n                    countDownLatch.countDown();\n                });\n        countDownLatch.await();\n    }\n```", "```java\n    @Test\n    public void testRetry() throws  Exception{\n\n      // Removed for brevity\n\n        CountDownLatch countDownLatch = new CountDownLatch(1);\n        fibonacciGenerator\n                 .retry(1)\n                .subscribe(System.out::println, e -> {\n                    System.out.println(\"received :\"+e);\n                    countDownLatch.countDown();\n                },countDownLatch::countDown);\n        countDownLatch.await();\n    }\n```", "```java\n   @Bean\n    RouterFunction<ServerResponse> fibonacciEndpoint() {\n        Flux<Long> fibonacciGenerator = Flux.generate(() -> Tuples.<Long,\n                Long>of(0L, 1L), (state, sink) -> {\n            throw new RuntimeException(\"Method unsupported\");         \n        });\n      RouterFunction<ServerResponse> fibonacciRoute =\n                RouterFunctions.route(RequestPredicates.path(\"/fibonacci\"),\n                        request ->  ServerResponse.ok()\n                                    .body(fromPublisher(fibonacciGenerator, Long.class)));\n\n        return fibonacciRoute;\n    }\n```", "```java\n@Bean\nRouterFunction<ServerResponse> fibonacciEndpoint() {\n    Flux<Long> fibonacciGenerator = Flux.generate(() -> Tuples.<Long,\n            Long>of(0L, 1L), (state, sink) -> {\n        if (state.getT1() < 0)\n            sink.error(new RuntimeException(\"out of bound\"));\n        else\n            sink.next(state.getT1());\n        return Tuples.of(state.getT2(), state.getT1() + state.getT2());\n    });\n\n    // Rest removed for Brevity\n\n    return fibonacciRoute;\n}\n```", "```java\nFlux<Long> result = client.get()\n        .uri(\"/fibonacci\")\n        .retrieve().bodyToFlux(Long.class)\n        .limitRequest(10L);\nresult.subscribe( x-> System.out.println(x));\n```", "```java\nresult.subscribe( x-> System.out.println(x), e-> e.printStackTrace);\n```", "```java\norg.springframework.web.reactive.function.client.WebClientResponseException: ClientResponse has erroneous status code: 500 Internal Server Error\n    at org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec.lambda$createResponseException$7(DefaultWebClient.java:464)\n    at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:100)\n    at \n ...............\n```", "```java\n{\"timestamp\":1533967357605,\"path\":\"/fibonacci\",\"status\":500,\"error\":\"Internal Server Error\",\"message\":\"Unsupported Method\"}\n```", "```java\nFlux<Long> result = client.get()\n        .uri(\"/fibonacci\")\n        .retrieve()\n        .bodyToFlux(Long.class)\n        .onErrorResume( x -> Flux.just(-1L, -2L))\n        .limitRequest(10L);\nresult.subscribe( x-> System.out.println(x));\n```", "```java\nFlux<Long> result = client.get()\n        .uri(\"/fibonacci\")\n        .retrieve()\n        .onStatus(HttpStatus::isError, x -> Mono.error(new \n         RuntimeException(\"Invalid Response \")))\n        .bodyToFlux(Long.class)\n        .limitRequest(10L);\n```", "```java\nreactor.core.Exceptions$ErrorCallbackNotImplemented: java.lang.RuntimeException: Invalid Response \nCaused by: java.lang.RuntimeException: Invalid Response \n```"]