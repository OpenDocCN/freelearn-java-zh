["```java\npublic class FetchDatabase {\n    public List<Object[]> fetchDataFromDatabase(){\n         List<Object[]> dataFromDB = new ArrayList<Object[]>();\n         //Logic to call database, execute a query and fetch the data\n         return dataFromDB;\n     }\n}\n```", "```java\npublic class ExportHTML {\n    public File exportToHTML(List<Object[]> dataLst){\n        File outputHTML = null;\n        //Logic to iterate the dataLst and generate HTML file.\n        return outputHTML;\n     }\n}\n```", "```java\npublic class BalanceSheet {\n    private ExportHTML exportHTML = new ExportHTML();\n    private FetchDatabase fetchDatabase = new FetchDatabase();\n\n    public void generateBalanceSheet(){\n      List<Object[]> dataFromDB =\n      fetchDatabase.fetchDataFromDatabase();\n        exportHTML.exportToHTML(dataFromDB);\n     }\n}\n```", "```java\n// Separate child module for fetch the data from web service.\npublic class FetchWebService {\n    public List<Object[]> fetchDataFromWebService(){\n         List<Object[]> dataFromWebService = new ArrayList<Object[]>();\n        //Logic to call Web Service and fetch the data and return it. \n        return dataFromWebService;\n     }\n}\n// Separate child module for export in PDF\npublic class ExportPDF {\n    public File exportToPDF(List<Object[]> dataLst){\n        File pdfFile = null;\n        //Logic to iterate the dataLst and generate PDF file\n        return pdfFile;\n    }\n}\n```", "```java\npublic class BalanceSheet {\n\n  private ExportHTML exportHTML = null;\n  private FetchDatabase fetchDatabase = null;\n  private ExportPDF exportPDF = null;\n  private FetchWebService fetchWebService = null;\n\n  public void generateBalanceSheet(int inputMethod, int outputMethod){\n\n    //1\\. Instantiate the low level module object.\n    if(inputMethod == 1){\n      fetchDatabase = new FetchDatabase();\n    }else if(inputMethod == 2){\n      fetchWebService = new FetchWebService(); \n    }\n\n    //2\\. fetch and export the data for specific format based on flags. \n    if(outputMethod == 1){\n        List<Object[]> dataLst = null;\n        if(inputMethod == 1){\n          dataLst = fetchDatabase.fetchDataFromDatabase();\n        }else{\n          dataLst = fetchWebService.fetchDataFromWebService();\n        }\n      exportHTML.exportToHTML(dataLst);\n    }else if(outputMethod ==2){\n        List<Object[]> dataLst = null;\n        if(inputMethod == 1){\n          dataLst = fetchDatabase.fetchDataFromDatabase();\n        }else{\n          dataLst = fetchWebService.fetchDataFromWebService();\n        }\n      exportPDF.exportToPDF(dataLst);\n    }\n\n  }\n}\n```", "```java\npublic interface IFetchData {\n    //Common interface method to fetch data. \n    List<Object[]> fetchData();\n}\npublic interface IExportData { \n    //Common interface method to export data. \n    File exportData(List<Object[]> listData);\n}\n```", "```java\npublic class FetchDatabase implements IFetchData {\n    public List<Object[]> fetchData(){\n         List<Object[]> dataFromDB = new ArrayList<Object[]>();\n         //Logic to call database, execute a query and fetch the data\n         return dataFromDB;\n     }\n}\n\npublic class FetchWebService implements IFetchData {\n    public List<Object[]> fetchData(){\n         List<Object[]> dataFromWebService = new ArrayList<Object[]>();\n        //Logic to call Web Service and fetch the data and return it. \n        return dataFromWebService;\n     }\n}\n\npublic class ExportHTML implements IExportData{\n    public File exportData(List<Object[]> listData){\n        File outputHTML = null;\n        //Logic to iterate the listData and generate HTML File\n        return outputHTML;\n    }\n}\npublic class ExportPDF implements IExportData{\n     public File exportData(List<Object[]> dataLst){\n        File pdfFile = null;\n        //Logic to iterate the listData and generate PDF file\n        return pdfFile;\n     }\n\n}\n```", "```java\npublic class BalanceSheet {\n  private IExportData exportDataObj= null;\n  private IFetchData fetchDataObj= null;\n\n  public Object generateBalanceSheet(){\n    List<Object[]> dataLst = fetchDataObj.fetchData();\n    return exportDataObj.exportData(dataLst);\n  }\n}\n```", "```java\npublic class Player {\n  private Weapon weaponInHand;\n  public void chooseWeapon(int weaponFlag){\n    if(weaponFlag == 1){\n      weaponInHand = new SmallGun();\n    }else if(weaponFlag ==2){\n      weaponInHand = new Rifle();\n    }else{\n      weaponInHand = new MachineGun();\n    }\n  }\n\n  public void fireWeapon(){\n    if(this.weaponInHand !=null){\n      this.weaponInHand.fire();\n    }\n  }\n}\n```", "```java\npublic class Player {\n  private Weapon weaponInHand; \n  public void chooseWeapon(Weapon setWeapon){\n    this.weaponInHand = setWeapon;\n  }\n\n  public void fireWeapon(){\n    if(this.weaponInHand !=null){\n      this.weaponInHand.fire();\n    }\n  }\n}\n```", "```java\npublic class BalanceSheet {\n\n  private IExportData exportDataObj= null;\n  private IFetchData fetchDataObj= null;\n\n  //Set the fetch data object from outside of this class.\n  public void configureFetchData(IFetchData actualFetchDataObj){\n    this.fetchDataObj = actualFetchDataObj;\n  }\n  //Set the export data object from outside of this class.\n  public void configureExportData(IExportData actualExportDataObj){\n    this.exportDataObj = actualExportDataObj;\n  }\n\n  public Object generateBalanceSheet(){\n    List<Object[]> dataLst = fetchDataObj.fetchData();\n    return exportDataObj.exportData(dataLst);\n  }\n}\n```", "```java\npublic class FetchDataFactory {\n  public static IFetchData getFetchData(String type){\n    IFetchData fetchData = null;\n    if(\"FROM_DB\".equalsIgnoreCase(type)){\n      fetchData = new FetchDatabase();\n    }else if(\"FROM_WS\".equalsIgnoreCase(type)){\n      fetchData = new FetchWebService();\n    }else {\n      return null;\n    }\n    return fetchData;\n  }\n}\n```", "```java\n//Set the fetch data object from Factory.\n  public void configureFetchData(String type){\n    this.fetchDataObj = FetchDataFactory.getFetchData(type);\n  }\n```", "```java\npublic class ExportDataFactory {\n\n  public static IExportData getExportData(String type){\n    IExportData exportData = null;\n    if(\"TO_HTML\".equalsIgnoreCase(type)){\n      exportData = new ExportHTML();\n    }else if(\"TO_PDF\".equalsIgnoreCase(type)){\n      exportData = new ExportPDF();\n    }else {\n      return null;\n    }\n    return exportData;\n  }\n}\n```", "```java\n//Set the fetch data object from ServiceLocator.\n  public void configureFetchData(String type){\n    this.fetchDataObj = FetchDataServiceLocator.Instance.getFetchData(type);\n  }\n```", "```java\npublic class BalanceSheet {\n\n  private IExportData exportDataObj= null;\n  private IFetchData fetchDataObj= null;\n\n  //All dependencies are injected from client's constructor \n  BalanceSheet(IFetchData fetchData, IExportData exportData){\n    this.fetchDataObj = fetchData;\n    this.exportDataObj = exportData;\n  }\n\n  public Object generateBalanceSheet(){\n    List<Object[]> dataLst = fetchDataObj.fetchData();\n    return exportDataObj.exportData(dataLst);\n  }\n}\n```", "```java\npublic class BalanceSheet {\n\n  private IExportData exportDataObj= null;\n  private IFetchData fetchDataObj= null;\n\n  //Setter injection for Export Data \n  public void setExportDataObj(IExportData exportDataObj) {\n    this.exportDataObj = exportDataObj;\n  }\n\n  //Setter injection for Fetch Data\n  public void setFetchDataObj(IFetchData fetchDataObj) {\n    this.fetchDataObj = fetchDataObj;\n  }\n\n  public Object generateBalanceSheet(){\n\n    List<Object[]> dataLst = fetchDataObj.fetchData();\n    return exportDataObj.exportData(dataLst);\n  }\n\n}\n```", "```java\npublic interface IFetchAndExport {\n  void setFetchData(IFetchData fetchData);\n  void setExportData(IExportData exportData);\n}\n\n//Client class implements interface\npublic class BalanceSheet implements IFetchAndExport {\n\n  private IExportData exportDataObj= null;\n  private IFetchData fetchDataObj= null;\n\n  //Implements the method of interface injection to set dependency\n  @Override\n  public void setFetchData(IFetchData fetchData) {\n    this.fetchDataObj = fetchData;\n  }\n\n  //Implements the method of interface injection to set dependency\n  @Override\n  public void setExportData(IExportData exportData) {\n    this.exportDataObj = exportData;\n\n  }\n\n  public Object generateBalanceSheet(){\n    List<Object[]> dataLst = fetchDataObj.fetchData();\n    return exportDataObj.exportData(dataLst);\n  }\n}\n```"]