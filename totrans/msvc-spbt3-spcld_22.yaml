- en: '22'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '22'
- en: Installation Instructions for Microsoft Windows with WSL 2 and Ubuntu
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 WSL 2 和 Ubuntu 的 Microsoft Windows 安装说明
- en: In this chapter, we will learn how to set up the tools required to run the commands
    described in this book on Microsoft Windows. We will also learn how to get access
    to the source code of the book.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何设置在 Microsoft Windows 上运行本书中描述的命令所需的工具。我们还将学习如何获取本书源代码的访问权限。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Technical requirements
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 技术要求
- en: Installing tools
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装工具
- en: Accessing the source code
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问源代码
- en: If you are using a Mac, you should follow the instructions in *Chapter 21*,
    *Installation Instructions for macOS.*
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 Mac，应遵循 *第 21 章* 中 *macOS 安装说明* 的指示。
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: All of the commands described in this book are run on a MacBook Pro using **bash**
    as the command shell. In this chapter, we will learn how to set up a development
    environment in Microsoft Windows in which the commands in this book can be run
    without requiring any changes. In a few cases, the commands have to be modified
    to run in the Windows environment. This is clearly pointed out in each chapter
    and the alternative command to be used in the Windows environment is also specified.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本书描述的所有命令都是在使用 **bash** 作为命令外壳的 MacBook Pro 上运行的。在本章中，我们将学习如何在 Microsoft Windows
    中设置一个开发环境，在该环境中可以运行本书中的命令而无需进行任何更改。在少数情况下，必须修改命令才能在 Windows 环境中运行。这一点在每个章节中都有明确指出，并且还指定了在
    Windows 环境中应使用的替代命令。
- en: The development environment is based on **Windows Subsystem for Linux v2**,
    or **WSL 2** for short, which requires **Windows 10, version 2004** (build 19041)
    or later. We will use WSL 2 to run a Linux server based on **Ubuntu 22.04**, where
    we will run all the commands using `bash` as the command shell.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 开发环境基于 **Windows 子系统 for Linux v2**，或简称 **WSL 2**，它需要 **Windows 10，版本 2004**（构建
    19041）或更高版本。我们将使用 WSL 2 运行基于 **Ubuntu 22.04** 的 Linux 服务器，在那里我们将使用 `bash` 作为命令外壳运行所有命令。
- en: Microsoft provides integration between Windows and Linux servers that run in
    WSL 2\. Linux files can be accessed from Windows, and vice versa. We will learn
    how to access files in the Linux server from Visual Studio Code running in Windows.
    Ports accessible from `localhost` in a Linux server are also available on localhost
    in Windows. We will use this integration to access web pages exposed by web applications
    running in the Linux server from a web browser running in Windows.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 微软提供了 Windows 和在 WSL 2 中运行的 Linux 服务器的集成。Linux 文件可以从 Windows 访问，反之亦然。我们将学习如何在
    Windows 中运行的 Visual Studio Code 中访问 Linux 服务器上的文件。Linux 服务器中可从 `localhost` 访问的端口也在
    Windows 的 `localhost` 上可用。我们将使用此集成从 Windows 中运行的网页浏览器访问在 Linux 服务器上运行的 Web 应用程序暴露的网页。
- en: For more information on WSL 2, see [https://docs.microsoft.com/en-us/windows/wsl/](https://docs.microsoft.com/en-us/windows/wsl/).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于 WSL 2 的信息，请参阅 [https://docs.microsoft.com/en-us/windows/wsl/](https://docs.microsoft.com/en-us/windows/wsl/)。
- en: Installing tools
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装工具
- en: In this section, we will learn how to install and configure the tools. Here
    is a list of the tools we will install, with a link to more information on downloading
    and installation, if required.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何安装和配置工具。以下是我们将安装的工具列表，如有需要，附有下载和安装的更多信息链接。
- en: 'On Windows, we will install the following tools:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上，我们将安装以下工具：
- en: '**Windows Subsystem for Linux v2 (WSL 2)**:[https://docs.microsoft.com/en-us/windows/wsl/install-win10](https://docs.microsoft.com/en-us/windows/wsl/install-win10)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows 子系统 for Linux v2 (WSL 2)**：[https://docs.microsoft.com/en-us/windows/wsl/install-win10](https://docs.microsoft.com/en-us/windows/wsl/install-win10)'
- en: '**Ubuntu 22.04 in WSL 2**: [https://apps.microsoft.com/store/detail/ubuntu-22042-lts/9PN20MSR04DW](https://apps.microsoft.com/store/detail/ubuntu-22042-lts/9PN20MSR04DW)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WSL 2 中的 Ubuntu 22.04**：[https://apps.microsoft.com/store/detail/ubuntu-22042-lts/9PN20MSR04DW](https://apps.microsoft.com/store/detail/ubuntu-22042-lts/9PN20MSR04DW)'
- en: '**Windows Terminal**: [https://www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701](https://www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701)'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows 终端**：[https://www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701](https://www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701)'
- en: '**Docker Desktop for Windows**: [https://hub.docker.com/editions/community/docker-ce-desktop-windows/](https://hub.docker.com/editions/community/docker-ce-desktop-windows/)'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows Docker Desktop**：[https://hub.docker.com/editions/community/docker-ce-desktop-windows/](https://hub.docker.com/editions/community/docker-ce-desktop-windows/)'
- en: '**Visual Studio Code** and its extension for **Remote WSL**: [https://code.visualstudio.com](https://code.visualstudio.com)
    and [https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Visual Studio Code**及其**Remote WSL**扩展：[https://code.visualstudio.com](https://code.visualstudio.com)
    和 [https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl)'
- en: 'On the Linux server, we will install the following tools:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux服务器上，我们将安装以下工具：
- en: '**Git**: [https://git-scm.com/downloads](https://git-scm.com/downloads)'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Git**: [https://git-scm.com/downloads](https://git-scm.com/downloads)'
- en: '**Java**: [https://adoptium.net/installation](https://adoptium.net/installation)'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Java**: [https://adoptium.net/installation](https://adoptium.net/installation)'
- en: '**curl**: [https://curl.haxx.se/download.html](https://curl.haxx.se/download.html)'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**curl**: [https://curl.haxx.se/download.html](https://curl.haxx.se/download.html)'
- en: '**jq**: [https://stedolan.github.io/jq/download/](https://stedolan.github.io/jq/download/)'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**jq**: [https://stedolan.github.io/jq/download/](https://stedolan.github.io/jq/download/)'
- en: '**Spring Boot CLI**: [https://docs.spring.io/spring-boot/docs/3.0.4/reference/html/getting-started.html#getting-started.installing.cli](https://docs.spring.io/spring-boot/docs/3.0.4/reference/html/getting-started.html#getting-started.installing.cli)'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Spring Boot CLI**: [https://docs.spring.io/spring-boot/docs/3.0.4/reference/html/getting-started.html#getting-started.installing.cli](https://docs.spring.io/spring-boot/docs/3.0.4/reference/html/getting-started.html#getting-started.installing.cli)'
- en: '**Siege**: [https://github.com/JoeDog/siege#where-is-it](https://github.com/JoeDog/siege#where-is-it)'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Siege**: [https://github.com/JoeDog/siege#where-is-it](https://github.com/JoeDog/siege#where-is-it)'
- en: '**Helm**: [https://helm.sh/docs/intro/install/#from-apt-debianubuntu](https://helm.sh/docs/intro/install/#from-apt-debianubuntu)'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Helm**: [https://helm.sh/docs/intro/install/#from-apt-debianubuntu](https://helm.sh/docs/intro/install/#from-apt-debianubuntu)'
- en: '**kubectl**: [https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/](https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/)'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**kubectl**: [https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/](https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/)'
- en: '**minikube**: [https://minikube.sigs.k8s.io/docs/start/](https://minikube.sigs.k8s.io/docs/start/)'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**minikube**: [https://minikube.sigs.k8s.io/docs/start/](https://minikube.sigs.k8s.io/docs/start/)'
- en: '**istioctl**: [https://istio.io/latest/docs/setup/getting-started/#download](https://istio.io/latest/docs/setup/getting-started/#download)'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**istioctl**: [https://istio.io/latest/docs/setup/getting-started/#download](https://istio.io/latest/docs/setup/getting-started/#download)'
- en: 'The following versions have been used when writing this book:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写本书时使用了以下版本：
- en: '**Windows Terminal**: v1.16.10261.0'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows Terminal**: v1.16.10261.0'
- en: '**Visual Studio Code**: v1.75.1'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Visual Studio Code**: v1.75.1'
- en: '**Docker Desktop for Windows**: v4.14.0'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker Desktop for Windows**: v4.14.0'
- en: '**Git**: v2.34.1'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Git**: v2.34.1'
- en: '**Java**: v17.0.6'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Java**: v17.0.6'
- en: '**curl**: v7.81.0'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**curl**: v7.81.0'
- en: '**jq**: v1.6'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**jq**: v1.6'
- en: '**Spring Boot CLI**: v3.0.4'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Spring Boot CLI**: v3.0.4'
- en: '**Siege**: v4.0.7'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Siege**: v4.0.7'
- en: '**Helm**: v3.11.2'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Helm**: v3.11.2'
- en: '**kubectl**: v1.26.1'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**kubectl**: v1.26.1'
- en: '**minikube**: v 1.29.1'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**minikube**: v 1.29.1'
- en: '**istioctl**: v1.17.0'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**istioctl**: v1.17.0'
- en: We will start by installing the tools required on Windows and, after that, we
    will install the required tools on the Linux server running in WSL 2.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先安装Windows上所需的工具，然后安装运行在WSL 2中的Linux服务器上所需的工具。
- en: Installing tools on Windows
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Windows上安装工具
- en: In the Windows environment, we will install WSL 2 together with a Linux server,
    the Windows Terminal, Docker Desktop, and finally, Visual Studio Code with an
    extension for remote access to files in WSL.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows环境中，我们将一起安装WSL 2、Linux服务器、Windows终端、Docker桌面，最后是带有远程访问WSL中文件扩展的Visual
    Studio Code。
- en: Installing WSL 2 together with a default Ubuntu server
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 与默认Ubuntu服务器一起安装WSL 2
- en: 'Run the following commands to install WSL 2 with an Ubuntu server:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令以使用Ubuntu服务器安装WSL 2：
- en: 'Open PowerShell as an administrator and run the following command:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以管理员身份打开PowerShell并运行以下命令：
- en: '[PRE0]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Restart the PC to complete the installation.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重启PC以完成安装。
- en: After the restart of the PC, the Ubuntu server will automatically be installed
    in a new Terminal window. After a while, you will be asked to enter a username
    and password.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在PC重启后，Ubuntu服务器将自动在新终端窗口中安装。过一会儿，你会被要求输入用户名和密码。
- en: 'When the installation is complete, you can verify the installed version of
    Ubuntu with this command:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，你可以使用以下命令验证安装的Ubuntu版本：
- en: '[PRE1]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'It should respond with an output similar to:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 应该会返回一个类似以下输出的结果：
- en: '[PRE2]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Installing a new Ubuntu 22.04 server on WSL 2
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在WSL 2上安装新的Ubuntu 22.04服务器
- en: 'If you already have WSL 2 installed but not an Ubuntu 22.04 server, you can
    install it with the following steps:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经安装了WSL 2但没有Ubuntu 22.04服务器，你可以按照以下步骤安装：
- en: 'Download an installation file from Microsoft Store:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Microsoft Store 下载安装文件：
- en: To select from available Linux distributions for WSL 2, go to [https://aka.ms/wslstore](https://aka.ms/wslstore).
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要选择可用的 WSL 2 Linux 发行版，请访问 [https://aka.ms/wslstore](https://aka.ms/wslstore)。
- en: To go directly to Ubuntu 22.04, visit [https://apps.microsoft.com/store/detail/ubuntu-22042-lts/9PN20MSR04DW](https://apps.microsoft.com/store/detail/ubuntu-22042-lts/9PN20MSR04DW).
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要直接进入 Ubuntu 22.04，请访问 [https://apps.microsoft.com/store/detail/ubuntu-22042-lts/9PN20MSR04DW](https://apps.microsoft.com/store/detail/ubuntu-22042-lts/9PN20MSR04DW)。
- en: After downloading the installation file, execute it to get Ubuntu 20.04 installed.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载安装文件后，执行它以安装 Ubuntu 20.04。
- en: A console window will be opened, and after a minute or two, you will be asked
    for a username and password to be used in the Linux server.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将打开一个控制台窗口，一分钟后或两分钟内，您将被要求输入用于 Linux 服务器的用户名和密码。
- en: Installing Windows Terminal
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 Windows Terminal
- en: 'To simplify access to the Linux server, I strongly recommend installing Windows
    Terminal. It supports:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化对 Linux 服务器的访问，我强烈建议安装 Windows Terminal。它支持：
- en: Using multiple tabs
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用多个标签页
- en: Using multiple panes within a tab
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在标签页内使用多个窗格
- en: 'Using multiple types of shells: for example, Windows Command Prompt, PowerShell,
    bash for WSL 2, and Azure CLI'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用多种类型的 shell：例如，Windows 命令提示符、PowerShell、WSL 2 的 bash 和 Azure CLI
- en: …and much more; for more information, see [https://docs.microsoft.com/en-us/windows/terminal/](https://docs.microsoft.com/en-us/windows/terminal/)
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: …以及更多；有关更多信息，请参阅 [https://docs.microsoft.com/en-us/windows/terminal/](https://docs.microsoft.com/en-us/windows/terminal/)
- en: Windows Terminal can be installed from Microsoft Store; see [https://aka.ms/terminal](https://aka.ms/terminal).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Windows Terminal 可以从 Microsoft Store 安装；请参阅 [https://aka.ms/terminal](https://aka.ms/terminal)。
- en: 'When you start Windows Terminal and click on the **down arrow** in the menu,
    you will find that it is already configured for starting a Terminal in the Linux
    server:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当您启动 Windows Terminal 并在菜单中单击 **向下箭头** 时，您会发现它已经配置为在 Linux 服务器中启动终端：
- en: '![A screenshot of a computer  Description automatically generated](img/B19825_22_01.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![计算机的截图  自动生成的描述](img/B19825_22_01.png)'
- en: 'Figure 22.1: Windows Terminal configured for the Linux server in WSL 2'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图 22.1：配置 WSL 2 中的 Linux 服务器使用的 Windows Terminal
- en: 'Select **Ubuntu-22.04**, and a `bash` shell will be started. Depending on your
    settings, your working directory might be set to your home folder in Windows,
    for example, `/mnt/c/Users/magnus`. To get to your home folder in the Linux server,
    simply use the `cd` and `pwd` commands to verify that you are inside your Linux
    server’s filesystem:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 选择 **Ubuntu-22.04**，并将启动一个 `bash` shell。根据您的设置，您的当前工作目录可能被设置为 Windows 的家目录，例如，`/mnt/c/Users/magnus`。要访问
    Linux 服务器的家目录，只需使用 `cd` 和 `pwd` 命令来验证您是否在 Linux 服务器的文件系统中：
- en: '![Graphical user interface, text, application  Description automatically generated](img/B19825_22_02.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序  自动生成的描述](img/B19825_22_02.png)'
- en: 'Figure 22.2: Windows Terminal using bash to access files in the Linux server'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 22.2：使用 bash 访问 Linux 服务器文件的 Windows Terminal
- en: Installing Docker Desktop for Windows
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 Windows Docker Desktop
- en: 'To install and configure Docker Desktop for Windows, perform the following
    steps:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装和配置 Windows Docker Desktop，请执行以下步骤：
- en: Download and install Docker Desktop for Windows from [https://hub.docker.com/editions/community/docker-ce-desktop-windows/](https://hub.docker.com/editions/community/docker-ce-desktop-windows/).
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://hub.docker.com/editions/community/docker-ce-desktop-windows/](https://hub.docker.com/editions/community/docker-ce-desktop-windows/)
    下载并安装 Docker Desktop for Windows。
- en: If you are asked to enable WSL 2 during installation, answer **YES****.**
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果在安装过程中被要求启用 WSL 2，请回答 **YES****。
- en: After the installation is complete, launch **Docker Desktop** from the **Start**
    menu.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，从 **开始** 菜单启动 **Docker Desktop**。
- en: 'From the **Docke**r menu, select **Settings**, and in the **Settings** window,
    select the **General** tab:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **Docker** 菜单中选择 **设置**，然后在 **设置** 窗口中选择 **常规** 选项卡：
- en: Ensure that the **Use the WSL 2 based engine** check box is selected.
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保选中 **使用基于 WSL 2 的引擎** 复选框。
- en: To avoid starting up Docker Desktop manually each time the PC is restarted,
    I recommend also selecting the **Start Docker Desktop when you log in** check
    box.
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了避免每次重启 PC 时手动启动 Docker Desktop，我还建议选中 **登录时启动 Docker Desktop** 复选框。
- en: 'The **General** settings should look like the following:'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**常规**设置应如下所示：'
- en: '![Graphical user interface, text, application  Description automatically generated](img/B19825_22_03.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序  自动生成的描述](img/B19825_22_03.png)'
- en: 'Figure 22.3: Docker Desktop configuration'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图 22.3：Docker Desktop 配置
- en: Finalize the configuration by clicking on the **Apply & Restart** button.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击**应用 & 重新启动**按钮完成配置。
- en: Installing Visual Studio Code and its extension for Remote WSL
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装Visual Studio Code及其Remote WSL扩展
- en: To simplify editing source code inside the Linux server, I recommend using Visual
    Studio Code. With its extension for WSL 2, named **Remote WSL**, you can easily
    work with source code inside the Linux server using Visual Studio Code running
    in Windows.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化在Linux服务器内部编辑源代码，我建议使用Visual Studio Code。通过其名为**Remote WSL**的WSL 2扩展，您可以使用在Windows中运行的Visual
    Studio Code轻松地在Linux服务器内部处理源代码。
- en: 'To install and configure Visual Studio Code and its extension for Remote WSL,
    perform the following steps:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装和配置Visual Studio Code及其Remote WSL扩展，请执行以下步骤：
- en: 'Visual Studio Code can be downloaded and installed from [https://code.visualstudio.com](https://code.visualstudio.com):'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Visual Studio Code可以从[https://code.visualstudio.com](https://code.visualstudio.com)下载和安装：
- en: When asked to **Select Additional Tasks**, select the **Add to PATH** option.
    This will make it possible to open a folder in Visual Studio Code from within
    the Linux server with the `code` command.
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当被要求**选择附加任务**时，选择**添加到PATH**选项。这将使您能够从Linux服务器内部使用`code`命令打开Visual Studio Code中的文件夹。
- en: After the installation is complete, launch **Visual Studio Code** from the **Start**
    menu.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，从**开始**菜单启动**Visual Studio Code**。
- en: 'Install the extension for Remote WSL using this link: [https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl).'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用此链接安装Remote WSL扩展：[https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl).
- en: 'If you want to learn more about how Visual Studio Code integrates with WSL
    2, see this article: [https://code.visualstudio.com/docs/remote/wsl](https://code.visualstudio.com/docs/remote/wsl).'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解更多关于Visual Studio Code如何与WSL 2集成的信息，请参阅这篇文章：[https://code.visualstudio.com/docs/remote/wsl](https://code.visualstudio.com/docs/remote/wsl)。
- en: Installing tools on the Linux server in WSL 2
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在WSL 2的Linux服务器上安装工具
- en: Now, it is time to install the tools required in the Linux server in WSL 2.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候在WSL 2的Linux服务器上安装所需的工具了。
- en: Launch **Windows Terminal** from the **Start** menu and open a Terminal in the
    Linux server, as described in the *Installing Windows Terminal* section.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 从**开始**菜单启动**Windows Terminal**，并按照*安装Windows Terminal*部分所述打开Linux服务器中的终端。
- en: The `git` and `curl` tools are already installed in Ubuntu. The remaining tools
    will be installed using either `apt install`, `sdk install`, or a combination
    of `curl` and `install`.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`git`和`curl`工具已在Ubuntu中安装。剩余的工具将使用`apt install`、`sdk install`或`curl`和`install`的组合进行安装。'
- en: Installing tools using apt install
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用apt install安装工具
- en: In this section, we will install `jq`, `siege`, Helm, and a couple of dependencies
    required by the other tools.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将安装`jq`、`siege`、Helm以及其他工具所需的几个依赖项。
- en: 'Install `jq`, `zip`, `unzip`, and `siege` with the following commands:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令安装`jq`、`zip`、`unzip`和`siege`：
- en: '[PRE3]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To install Helm, run the following commands:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Helm，请运行以下命令：
- en: '[PRE4]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Installing the Java and Spring Boot CLI using SDKman
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用SDKman安装Java和Spring Boot CLI
- en: 'To install the Java and Spring Boot CLI, we will use **SDKman** ([https://sdkman.io](https://sdkman.io)).
    Install SDKman with the following commands:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '要安装Java和Spring Boot CLI，我们将使用**SDKman** ([https://sdkman.io](https://sdkman.io)).
    使用以下命令安装SDKman:'
- en: '[PRE5]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Verify that SDKman was installed correctly with the following command:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令验证SDKman是否正确安装：
- en: '[PRE6]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Expect it to return something like this:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 预期它会返回类似以下内容：
- en: '[PRE7]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: To install Java, we will use a distribution named **Eclipse Temurin** ([https://adoptium.net/temurin/](https://adoptium.net/temurin/)).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Java，我们将使用名为**Eclipse Temurin**的发行版 ([https://adoptium.net/temurin/](https://adoptium.net/temurin/))。
- en: 'Install Java with this command:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此命令安装Java：
- en: '[PRE8]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Finally, install the Spring Boot CLI:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，安装Spring Boot CLI：
- en: '[PRE9]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Installing the remaining tools using curl and install
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用curl和install安装剩余的工具
- en: Finally, we will install `kubectl`, `minikube`, and `istioctl` using `curl`
    to download the executable files. Once downloaded, we will use the `install` command
    to copy the files to the proper places in the filesystem, and also ensure that
    the `owner` and `access rights` are configured properly. When it comes to these
    tools, it is important to install versions that are compatible with each other,
    specifically when it comes to what versions of Kubernetes they support. Simply
    installing and upgrading to the latest versions can lead to situations where incompatible
    versions of `minikube`, Kubernetes, and Istio are used.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将使用`curl`下载可执行文件来安装`kubectl`、`minikube`和`istioctl`。下载完成后，我们将使用`install`命令将文件复制到文件系统的正确位置，并确保`所有者`和`访问权限`配置正确。在涉及这些工具时，安装相互兼容的版本很重要，特别是当涉及到它们支持的Kubernetes版本时。简单地安装和升级到最新版本可能会导致使用不兼容的`minikube`、Kubernetes和Istio版本的情况。
- en: For supported Kubernetes versions when it comes to Istio, see [https://istio.io/latest/about/supported-releases/#support-status-of-istio-releases](https://istio.io/latest/about/supported-releases/#support-status-of-istio-releases).
    For `minikube`, see [https://minikube.sigs.k8s.io/docs/handbook/config/#selecting-a-kubernetes-version](https://minikube.sigs.k8s.io/docs/handbook/config/#selecting-a-kubernetes-version).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Istio支持的Kubernetes版本，请参阅[https://istio.io/latest/about/supported-releases/#support-status-of-istio-releases](https://istio.io/latest/about/supported-releases/#support-status-of-istio-releases)。对于`minikube`，请参阅[https://minikube.sigs.k8s.io/docs/handbook/config/#selecting-a-kubernetes-version](https://minikube.sigs.k8s.io/docs/handbook/config/#selecting-a-kubernetes-version)。
- en: 'To install the `kubectl` version used in this book, run the following commands:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装本书中使用的`kubectl`版本，请运行以下命令：
- en: '[PRE10]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To install the `minikube` version used in this book, run the following commands:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装本书中使用的`minikube`版本，请运行以下命令：
- en: '[PRE11]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To install the `istioctl` version used in this book, run the following commands:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装本书中使用的`istioctl`版本，请运行以下命令：
- en: '[PRE12]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: With the tools now installed, we can verify that they have been installed as
    expected.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在工具已安装，我们可以验证它们是否已按预期安装。
- en: Verifying the installations
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 验证安装
- en: 'To verify the tool installations, run the following commands to print each
    tool’s version:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证工具安装，运行以下命令以打印每个工具的版本：
- en: '[PRE13]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Expect version info like the following:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 预期版本信息如下：
- en: '![Text  Description automatically generated](img/B19825_22_04.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![文本  自动生成的描述](img/B19825_22_04.png)'
- en: 'Figure 22.4: Versions used on the Linux server in WSL 2'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图22.4：WSL 2中Linux服务器使用的版本
- en: With the tools installed and verified, let’s see how we can access the source
    code for this book.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 工具安装并验证后，让我们看看如何访问本书的源代码。
- en: Accessing the source code
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问源代码
- en: The source code for this book can be found in the GitHub repository at [https://github.com/PacktPublishing/Microservices-with-Spring-Boot-and-Spring-Cloud-Third-Edition](https://github.com/PacktPublishing/Microservices-with-Spring-Boot-and-Spring-Cloud-Third-Edition).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 本书源代码可在GitHub仓库[https://github.com/PacktPublishing/Microservices-with-Spring-Boot-and-Spring-Cloud-Third-Edition](https://github.com/PacktPublishing/Microservices-with-Spring-Boot-and-Spring-Cloud-Third-Edition)中找到。
- en: 'To be able to run the commands in the Linux server in WSL 2 that are described
    in this book, download the source code to a folder and set up an environment variable,
    `$BOOK_HOME`, that points to that folder. Sample commands are as follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 要能够在WSL 2中的Linux服务器上运行本书中描述的命令，请将源代码下载到文件夹中，并设置环境变量`$BOOK_HOME`，使其指向该文件夹。以下是一些示例命令：
- en: '[PRE14]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To verify access to source code downloaded to the Linux server in WSL 2 from
    Visual Studio Code, run the following commands:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证从Visual Studio Code下载到WSL 2中Linux服务器的源代码访问权限，请运行以下命令：
- en: '[PRE15]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Visual Studio Code will open a window from where you can start to inspect the
    source code. You can also start a Terminal window for running bash commands in
    the Linux server from the menu selection **Terminal** → **New Terminal**. The
    Visual Studio Code window should look something like the following:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code将打开一个窗口，您可以从该窗口开始检查源代码。您还可以从菜单选择**终端**→**新建终端**来启动一个终端窗口，在Linux服务器上运行bash命令。Visual
    Studio Code窗口应类似于以下内容：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B19825_22_05.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B19825_22_05.png)'
- en: 'Figure 22.5: Accessing a file in the Linux server from Visual Studio Code'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图22.5：从Visual Studio Code访问Linux服务器中的文件
- en: 'The Java source code is written for Java SE 8 and uses a Java SE 17 JRE when
    executed in Docker containers. The following versions of Spring are used:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: Java 源代码是为 Java SE 8 编写的，并在 Docker 容器中执行时使用 Java SE 17 JRE。以下版本的 Spring 被使用：
- en: 'Spring Framework: 6.0.6'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring 框架：6.0.6
- en: 'Spring Boot: 3.0.4'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Boot：3.0.4
- en: 'Spring Cloud: 2022.0.1'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Cloud：2022.0.1
- en: The code examples in each chapter all come from the source code in `$BOOK_HOME/ChapterNN`,
    where `NN` is the number of the chapter. The code examples in the book are, in
    many cases, edited to remove irrelevant parts of the source code, such as comments,
    imports, and log statements.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 每章中的代码示例都来自 `$BOOK_HOME/ChapterNN` 中的源代码，其中 `NN` 是章节的编号。在许多情况下，书中的代码示例都被编辑过，以删除源代码中不相关的部分，例如注释、导入和日志语句。
- en: The structure of the code
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码结构
- en: 'Each chapter consists of a number of Java projects, one for each microservice
    and Spring Cloud service, plus a couple of library projects used by the other
    projects. *Chapter 14* contains the largest number of projects; its project structure
    looks like this:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 每章都包含多个 Java 项目，每个微服务和 Spring Cloud 服务一个，以及一些由其他项目使用的库项目。*第 14 章* 包含的项目数量最多；其项目结构如下：
- en: '[PRE16]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'All projects are built using Gradle and have a file structure according to
    Gradle standard conventions:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 所有项目都是使用 Gradle 构建的，并且具有根据 Gradle 标准约定构建的文件结构：
- en: '[PRE17]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: For more information on how to organize a Gradle project, see [https://docs.gradle.org/current/userguide/organizing_gradle_projects.html](https://docs.gradle.org/current/userguide/organizing_gradle_projects.html).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 关于如何组织 Gradle 项目的更多信息，请参阅 [https://docs.gradle.org/current/userguide/organizing_gradle_projects.html](https://docs.gradle.org/current/userguide/organizing_gradle_projects.html)。
- en: Summary
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned how to install, configure, and verify the tools
    required to run the commands described in this book on WSL 2 and Windows. For
    development, we will use `git`, `docker`, `java`, and `spring`. To create a Kubernetes
    environment to deploy our microservice in runtime, we will use `minikube`, Helm,
    `kubectl`, and `istioctl`. Finally, to run tests to verify that the microservices
    work as expected in runtime, we will use `curl`, `jq,` and `siege`.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何在 WSL 2 和 Windows 上安装、配置和验证运行本书中描述的命令所需的工具。对于开发，我们将使用 `git`、`docker`、`java`
    和 `spring`。为了在运行时创建部署我们的微服务所需的 Kubernetes 环境，我们将使用 `minikube`、Helm、`kubectl` 和
    `istioctl`。最后，为了运行测试以验证微服务在运行时按预期工作，我们将使用 `curl`、`jq` 和 `siege`。
- en: We have also learned how to access the source code from GitHub and how the source
    code is structured.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还学习了如何从 GitHub 访问源代码以及源代码的结构。
- en: In the next and final chapter, we will learn how to natively compile microservices,
    reducing their startup time to sub-seconds.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章和最后一章中，我们将学习如何原生编译微服务，将它们的启动时间缩短到亚秒级。
