- en: '22'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installation Instructions for Microsoft Windows with WSL 2 and Ubuntu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will learn how to set up the tools required to run the commands
    described in this book on Microsoft Windows. We will also learn how to get access
    to the source code of the book.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing the source code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are using a Mac, you should follow the instructions in *Chapter 21*,
    *Installation Instructions for macOS.*
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All of the commands described in this book are run on a MacBook Pro using **bash**
    as the command shell. In this chapter, we will learn how to set up a development
    environment in Microsoft Windows in which the commands in this book can be run
    without requiring any changes. In a few cases, the commands have to be modified
    to run in the Windows environment. This is clearly pointed out in each chapter
    and the alternative command to be used in the Windows environment is also specified.
  prefs: []
  type: TYPE_NORMAL
- en: The development environment is based on **Windows Subsystem for Linux v2**,
    or **WSL 2** for short, which requires **Windows 10, version 2004** (build 19041)
    or later. We will use WSL 2 to run a Linux server based on **Ubuntu 22.04**, where
    we will run all the commands using `bash` as the command shell.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft provides integration between Windows and Linux servers that run in
    WSL 2\. Linux files can be accessed from Windows, and vice versa. We will learn
    how to access files in the Linux server from Visual Studio Code running in Windows.
    Ports accessible from `localhost` in a Linux server are also available on localhost
    in Windows. We will use this integration to access web pages exposed by web applications
    running in the Linux server from a web browser running in Windows.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on WSL 2, see [https://docs.microsoft.com/en-us/windows/wsl/](https://docs.microsoft.com/en-us/windows/wsl/).
  prefs: []
  type: TYPE_NORMAL
- en: Installing tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn how to install and configure the tools. Here
    is a list of the tools we will install, with a link to more information on downloading
    and installation, if required.
  prefs: []
  type: TYPE_NORMAL
- en: 'On Windows, we will install the following tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Windows Subsystem for Linux v2 (WSL 2)**:[https://docs.microsoft.com/en-us/windows/wsl/install-win10](https://docs.microsoft.com/en-us/windows/wsl/install-win10)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ubuntu 22.04 in WSL 2**: [https://apps.microsoft.com/store/detail/ubuntu-22042-lts/9PN20MSR04DW](https://apps.microsoft.com/store/detail/ubuntu-22042-lts/9PN20MSR04DW)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Windows Terminal**: [https://www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701](https://www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Docker Desktop for Windows**: [https://hub.docker.com/editions/community/docker-ce-desktop-windows/](https://hub.docker.com/editions/community/docker-ce-desktop-windows/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Visual Studio Code** and its extension for **Remote WSL**: [https://code.visualstudio.com](https://code.visualstudio.com)
    and [https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On the Linux server, we will install the following tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Git**: [https://git-scm.com/downloads](https://git-scm.com/downloads)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Java**: [https://adoptium.net/installation](https://adoptium.net/installation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**curl**: [https://curl.haxx.se/download.html](https://curl.haxx.se/download.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**jq**: [https://stedolan.github.io/jq/download/](https://stedolan.github.io/jq/download/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Spring Boot CLI**: [https://docs.spring.io/spring-boot/docs/3.0.4/reference/html/getting-started.html#getting-started.installing.cli](https://docs.spring.io/spring-boot/docs/3.0.4/reference/html/getting-started.html#getting-started.installing.cli)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Siege**: [https://github.com/JoeDog/siege#where-is-it](https://github.com/JoeDog/siege#where-is-it)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Helm**: [https://helm.sh/docs/intro/install/#from-apt-debianubuntu](https://helm.sh/docs/intro/install/#from-apt-debianubuntu)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**kubectl**: [https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/](https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**minikube**: [https://minikube.sigs.k8s.io/docs/start/](https://minikube.sigs.k8s.io/docs/start/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**istioctl**: [https://istio.io/latest/docs/setup/getting-started/#download](https://istio.io/latest/docs/setup/getting-started/#download)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following versions have been used when writing this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Windows Terminal**: v1.16.10261.0'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Visual Studio Code**: v1.75.1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Docker Desktop for Windows**: v4.14.0'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Git**: v2.34.1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Java**: v17.0.6'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**curl**: v7.81.0'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**jq**: v1.6'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Spring Boot CLI**: v3.0.4'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Siege**: v4.0.7'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Helm**: v3.11.2'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**kubectl**: v1.26.1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**minikube**: v 1.29.1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**istioctl**: v1.17.0'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will start by installing the tools required on Windows and, after that, we
    will install the required tools on the Linux server running in WSL 2.
  prefs: []
  type: TYPE_NORMAL
- en: Installing tools on Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the Windows environment, we will install WSL 2 together with a Linux server,
    the Windows Terminal, Docker Desktop, and finally, Visual Studio Code with an
    extension for remote access to files in WSL.
  prefs: []
  type: TYPE_NORMAL
- en: Installing WSL 2 together with a default Ubuntu server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Run the following commands to install WSL 2 with an Ubuntu server:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open PowerShell as an administrator and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Restart the PC to complete the installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the restart of the PC, the Ubuntu server will automatically be installed
    in a new Terminal window. After a while, you will be asked to enter a username
    and password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When the installation is complete, you can verify the installed version of
    Ubuntu with this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'It should respond with an output similar to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Installing a new Ubuntu 22.04 server on WSL 2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you already have WSL 2 installed but not an Ubuntu 22.04 server, you can
    install it with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download an installation file from Microsoft Store:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To select from available Linux distributions for WSL 2, go to [https://aka.ms/wslstore](https://aka.ms/wslstore).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: To go directly to Ubuntu 22.04, visit [https://apps.microsoft.com/store/detail/ubuntu-22042-lts/9PN20MSR04DW](https://apps.microsoft.com/store/detail/ubuntu-22042-lts/9PN20MSR04DW).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: After downloading the installation file, execute it to get Ubuntu 20.04 installed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A console window will be opened, and after a minute or two, you will be asked
    for a username and password to be used in the Linux server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing Windows Terminal
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To simplify access to the Linux server, I strongly recommend installing Windows
    Terminal. It supports:'
  prefs: []
  type: TYPE_NORMAL
- en: Using multiple tabs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using multiple panes within a tab
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using multiple types of shells: for example, Windows Command Prompt, PowerShell,
    bash for WSL 2, and Azure CLI'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: …and much more; for more information, see [https://docs.microsoft.com/en-us/windows/terminal/](https://docs.microsoft.com/en-us/windows/terminal/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows Terminal can be installed from Microsoft Store; see [https://aka.ms/terminal](https://aka.ms/terminal).
  prefs: []
  type: TYPE_NORMAL
- en: 'When you start Windows Terminal and click on the **down arrow** in the menu,
    you will find that it is already configured for starting a Terminal in the Linux
    server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated](img/B19825_22_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.1: Windows Terminal configured for the Linux server in WSL 2'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select **Ubuntu-22.04**, and a `bash` shell will be started. Depending on your
    settings, your working directory might be set to your home folder in Windows,
    for example, `/mnt/c/Users/magnus`. To get to your home folder in the Linux server,
    simply use the `cd` and `pwd` commands to verify that you are inside your Linux
    server’s filesystem:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B19825_22_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.2: Windows Terminal using bash to access files in the Linux server'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker Desktop for Windows
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To install and configure Docker Desktop for Windows, perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download and install Docker Desktop for Windows from [https://hub.docker.com/editions/community/docker-ce-desktop-windows/](https://hub.docker.com/editions/community/docker-ce-desktop-windows/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are asked to enable WSL 2 during installation, answer **YES****.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the installation is complete, launch **Docker Desktop** from the **Start**
    menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the **Docke**r menu, select **Settings**, and in the **Settings** window,
    select the **General** tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that the **Use the WSL 2 based engine** check box is selected.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: To avoid starting up Docker Desktop manually each time the PC is restarted,
    I recommend also selecting the **Start Docker Desktop when you log in** check
    box.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **General** settings should look like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B19825_22_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.3: Docker Desktop configuration'
  prefs: []
  type: TYPE_NORMAL
- en: Finalize the configuration by clicking on the **Apply & Restart** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing Visual Studio Code and its extension for Remote WSL
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To simplify editing source code inside the Linux server, I recommend using Visual
    Studio Code. With its extension for WSL 2, named **Remote WSL**, you can easily
    work with source code inside the Linux server using Visual Studio Code running
    in Windows.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install and configure Visual Studio Code and its extension for Remote WSL,
    perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Visual Studio Code can be downloaded and installed from [https://code.visualstudio.com](https://code.visualstudio.com):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When asked to **Select Additional Tasks**, select the **Add to PATH** option.
    This will make it possible to open a folder in Visual Studio Code from within
    the Linux server with the `code` command.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: After the installation is complete, launch **Visual Studio Code** from the **Start**
    menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install the extension for Remote WSL using this link: [https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you want to learn more about how Visual Studio Code integrates with WSL
    2, see this article: [https://code.visualstudio.com/docs/remote/wsl](https://code.visualstudio.com/docs/remote/wsl).'
  prefs: []
  type: TYPE_NORMAL
- en: Installing tools on the Linux server in WSL 2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, it is time to install the tools required in the Linux server in WSL 2.
  prefs: []
  type: TYPE_NORMAL
- en: Launch **Windows Terminal** from the **Start** menu and open a Terminal in the
    Linux server, as described in the *Installing Windows Terminal* section.
  prefs: []
  type: TYPE_NORMAL
- en: The `git` and `curl` tools are already installed in Ubuntu. The remaining tools
    will be installed using either `apt install`, `sdk install`, or a combination
    of `curl` and `install`.
  prefs: []
  type: TYPE_NORMAL
- en: Installing tools using apt install
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this section, we will install `jq`, `siege`, Helm, and a couple of dependencies
    required by the other tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install `jq`, `zip`, `unzip`, and `siege` with the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To install Helm, run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Installing the Java and Spring Boot CLI using SDKman
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To install the Java and Spring Boot CLI, we will use **SDKman** ([https://sdkman.io](https://sdkman.io)).
    Install SDKman with the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that SDKman was installed correctly with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Expect it to return something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: To install Java, we will use a distribution named **Eclipse Temurin** ([https://adoptium.net/temurin/](https://adoptium.net/temurin/)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Install Java with this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, install the Spring Boot CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Installing the remaining tools using curl and install
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Finally, we will install `kubectl`, `minikube`, and `istioctl` using `curl`
    to download the executable files. Once downloaded, we will use the `install` command
    to copy the files to the proper places in the filesystem, and also ensure that
    the `owner` and `access rights` are configured properly. When it comes to these
    tools, it is important to install versions that are compatible with each other,
    specifically when it comes to what versions of Kubernetes they support. Simply
    installing and upgrading to the latest versions can lead to situations where incompatible
    versions of `minikube`, Kubernetes, and Istio are used.
  prefs: []
  type: TYPE_NORMAL
- en: For supported Kubernetes versions when it comes to Istio, see [https://istio.io/latest/about/supported-releases/#support-status-of-istio-releases](https://istio.io/latest/about/supported-releases/#support-status-of-istio-releases).
    For `minikube`, see [https://minikube.sigs.k8s.io/docs/handbook/config/#selecting-a-kubernetes-version](https://minikube.sigs.k8s.io/docs/handbook/config/#selecting-a-kubernetes-version).
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the `kubectl` version used in this book, run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'To install the `minikube` version used in this book, run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'To install the `istioctl` version used in this book, run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: With the tools now installed, we can verify that they have been installed as
    expected.
  prefs: []
  type: TYPE_NORMAL
- en: Verifying the installations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To verify the tool installations, run the following commands to print each
    tool’s version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Expect version info like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Text  Description automatically generated](img/B19825_22_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.4: Versions used on the Linux server in WSL 2'
  prefs: []
  type: TYPE_NORMAL
- en: With the tools installed and verified, let’s see how we can access the source
    code for this book.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the source code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The source code for this book can be found in the GitHub repository at [https://github.com/PacktPublishing/Microservices-with-Spring-Boot-and-Spring-Cloud-Third-Edition](https://github.com/PacktPublishing/Microservices-with-Spring-Boot-and-Spring-Cloud-Third-Edition).
  prefs: []
  type: TYPE_NORMAL
- en: 'To be able to run the commands in the Linux server in WSL 2 that are described
    in this book, download the source code to a folder and set up an environment variable,
    `$BOOK_HOME`, that points to that folder. Sample commands are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'To verify access to source code downloaded to the Linux server in WSL 2 from
    Visual Studio Code, run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Visual Studio Code will open a window from where you can start to inspect the
    source code. You can also start a Terminal window for running bash commands in
    the Linux server from the menu selection **Terminal** → **New Terminal**. The
    Visual Studio Code window should look something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B19825_22_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.5: Accessing a file in the Linux server from Visual Studio Code'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Java source code is written for Java SE 8 and uses a Java SE 17 JRE when
    executed in Docker containers. The following versions of Spring are used:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Spring Framework: 6.0.6'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Spring Boot: 3.0.4'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Spring Cloud: 2022.0.1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code examples in each chapter all come from the source code in `$BOOK_HOME/ChapterNN`,
    where `NN` is the number of the chapter. The code examples in the book are, in
    many cases, edited to remove irrelevant parts of the source code, such as comments,
    imports, and log statements.
  prefs: []
  type: TYPE_NORMAL
- en: The structure of the code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Each chapter consists of a number of Java projects, one for each microservice
    and Spring Cloud service, plus a couple of library projects used by the other
    projects. *Chapter 14* contains the largest number of projects; its project structure
    looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'All projects are built using Gradle and have a file structure according to
    Gradle standard conventions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: For more information on how to organize a Gradle project, see [https://docs.gradle.org/current/userguide/organizing_gradle_projects.html](https://docs.gradle.org/current/userguide/organizing_gradle_projects.html).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned how to install, configure, and verify the tools
    required to run the commands described in this book on WSL 2 and Windows. For
    development, we will use `git`, `docker`, `java`, and `spring`. To create a Kubernetes
    environment to deploy our microservice in runtime, we will use `minikube`, Helm,
    `kubectl`, and `istioctl`. Finally, to run tests to verify that the microservices
    work as expected in runtime, we will use `curl`, `jq,` and `siege`.
  prefs: []
  type: TYPE_NORMAL
- en: We have also learned how to access the source code from GitHub and how the source
    code is structured.
  prefs: []
  type: TYPE_NORMAL
- en: In the next and final chapter, we will learn how to natively compile microservices,
    reducing their startup time to sub-seconds.
  prefs: []
  type: TYPE_NORMAL
