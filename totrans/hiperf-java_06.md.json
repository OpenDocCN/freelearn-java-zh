["```java\npublic class Corgi {\n  // Instance variables\n  private String name;\n  private int age;\n  private int weight;\n  // Constructor\n  public Corgi(String name, int age, int weight) {\n    this.name = name;\n    this.age = age;\n    this.weight = weight;\n  }\n  // Getter methods\n  // Setter methods\n  // Methods\n}\n```", "```java\npublic static void main(String[] args) {\n  // Catch StackOverflowError\n  try {\n    // your code goes here\n  } catch (StackOverflowError e) {\n    System.out.println(\"Caught StackOverflowError\");\n  }\n  // Catch OutOfMemoryError\n  try {\n    // your code goes here\n  } catch (OutOfMemoryError e) {\n    System.out.println(\"Caught OutOfMemoryError\");\n  }\n}\n```", "```java\nCorgi myCorgi = new Corgi(\"Java\", 3);\n```", "```java\nCorgi myCorgi = null; // Initialize to null\n// ...\nif (someCondition) {\n    myCorgi = new Corgi(\"Java\", 3); // Create the object when needed\n}\n```", "```java\nObjectPool<Corgi> corgiPool = new ObjectPool<>(Corgi::new, 10); // Create a pool of 10 Corgi objects\n// ...\nCorgi myCorgi = corgiPool.acquire(); // Get obj from pool\n// ...\ncorgiPool.release(myCorgi); // Release obj to the pool\n```", "```java\nCorgiBuilder builder = new CorgiBuilder();\nbuilder.setName(\"Java\");\nbuilder.setAge(3);\nCorgi myCorgi = builder.build();\n```", "```java\n// Serialize the object\nByteArrayOutputStream outputStream = new ByteArrayOutputStream();\nObjectOutputStream objectOutputStream = new ObjectOutputStream(outputStream);\nobjectOutputStream.writeObject(originalCorgi);\n// Deserialize the object\nByteArrayInputStream inputStream = new ByteArrayInputStream(outputStream.toByteArray());\nObjectInputStream objectInputStream = new ObjectInputStream(inputStream);\nCorgi clonedCorgi = (Corgi) objectInputStream.readObject();\n```", "```java\npublic final class ImmutableExample1 {\n    private final int value;\n    private final String text;\n    public ImmutableExample1(int value, String text) {\n        this.value = value;\n        this.text = text;\n    }\n    // Getter methods...\n}\n```", "```java\npublic final class ImmutableExample2 {\n    private final int value;\n    private final String text;\n    public ImmutableExample2(int value, String text) {\n        this.value = value;\n        this.text = text;\n    }\n    public int getValue() {\n        return value;\n    }\n    public String getText() {\n        return text;\n    }\n}\n```", "```java\npublic final class ImmutableExample3 {\n    private final List<String> data;\n    public ImmutableExample3(List<String> data) {\n        // Create a defensive copy to ensure the list cannot be \n        // modified externally\n        this.data = new ArrayList<>(data);\n    }\n    public List<String> getData() {\n        // Return an unmodifiable view of the list to prevent \n        // modifications\n        return Collections.unmodifiableList(data);\n    }\n}\n```", "```java\nimport lombok.Immutable;\n@Immutable\npublic final class ImmutableExample4 {\n    private final int value;\n    private final String text;\n    public ImmutableExample4(int value, String text) {\n        this.value = value;\n        this.text = text;\n    }\n    // Getter methods...\n}\n```", "```java\n@Override\npublic boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    CustomImmutable that = (CustomImmutable) o;\n    return value == that.value && Objects.equals(text, that.text);\n}\n@Override\npublic int hashCode() {\n    return Objects.hash(value, text);\n}\n```", "```java\nString original = \"Java\";\nString modified = original.concat(\", is the name of my Corgi\");\n```", "```java\nString s1 = \"Java\"; // Stored in the string pool\nString s2 = \"Java\"; // Reuses the same string from the pool\n```", "```java\nclass Corgi implements Cloneable {\n    private String name;\n    private String authenticityCertificate;\n    // Constructor and getters ...\n    @Override\n    public Object clone() throws CloneNotSupportedException {\n        return super.clone();\n    }\n}\n```", "```java\nclass Corgi implements Cloneable {\n  private String name;\n  private Address address;\n  // Constructor and getters...\n  @Override\n  public Object clone() throws CloneNotSupportedException{\n    Corgi clonedCorgi = (Corgi) super.clone();\n    clonedCorgi.address = (Address) address.clone(); // Deep copy of the Address object\n    return clonedCorgi;\n  }\n}\n```", "```java\npublic class Singleton {\n    private static Singleton instance;\n    private Singleton() {\n        // Private constructor to prevent instantiation\n    }\n    public static Singleton getInstance() {\n        if (instance == null) {\n            instance = new Singleton();\n        }\n        return instance;\n    }\n}\n```", "```java\ninterface Product {\n    void create();\n}\n```", "```java\nclass ConcreteProductA implements Product {\n    @Override\n    public void create() {\n        System.out.println(\"Creating Concrete Product A\");\n    }\n}\nclass ConcreteProductB implements Product {\n    @Override\n    public void create() {\n        System.out.println(\"Creating Concrete Product B\");\n    }\n}\n```", "```java\ninterface Factory {\n    Product createProduct();\n}\n```", "```java\nclass ConcreteFactoryA implements Factory {\n    @Override\n    public Product createProduct() {\n        return new ConcreteProductA();\n    }\n}\n class ConcreteFactoryB implements Factory {\n    @Override\n    public Product createProduct() {\n        return new ConcreteProductB();\n    }\n}\n```"]