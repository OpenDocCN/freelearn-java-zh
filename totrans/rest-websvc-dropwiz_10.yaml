- en: Chapter 10. The User Interface – Views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our web service client fetches information regarding a contact and presents
    it to the user as plain text. We are going to use Mustache, a template engine
    that is part of the `dropwizard-views-mustache` module, in order to create HTML
    views.
  prefs: []
  type: TYPE_NORMAL
- en: Building a user interface for the web service client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will build a user interface for the web service client that consists of an
    HTML page that will be used to render a contact's details within a table.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Not surprisingly, the first thing we need to do is to add the `dropwizard-views`
    and `dropwizard-assets` dependencies in our `pom.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, we will need to create a folder where we will store our template files.
    Create the `[ProjectRoot]/src/main/resources/views` folder as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/9530OS_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Enable the `Views` bundle by adding it to your application''s bootstrap in
    the `#initialize()` method of the `App` class. During the initialization phase
    (that is, when the `#initialize()` method is executed), we can use the bootstrap
    object to register additional modules with our application, such as bundles or
    commands. This has to be done before the service is actually started (that is,
    before the `#run()` method gets called). You will need to import `io.dropwizard.views.ViewBundle`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new package called `com.dwbook.phonebook.views` with the `ContactView`
    class in it. The class must extend `View` and its constructor will expect a `Contact`
    instance. Also, you must call the superclass''s constructor specifying the template
    file for this class (in this case, `contact.mustache`, which is stored in the
    directory we created before). You can reference the `view` file using an absolute
    path, where the root is the `[ProjectRoot]/src/main/resources/views` folder. A
    getter for the contact object is needed so that it can be accessed by the template
    engine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s create our template, `contact.moustache`, which will be a plain
    HTML file that renders a table with a contact''s details. Remember to store it
    inside the `views` folder we created at the beginning. Take a look at the following
    code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The Mustache tags, that is, the double-curly-braces-wrapped text, will be replaced
    with the actual values of the contact object's properties on runtime automatically.
    Mustache provides many tag types that you can use in your template, such as `conditionals`
    and `loops`. You may refer to [http://mustache.github.io/mustache.5.html](http://mustache.github.io/mustache.5.html)
    for detailed information about Mustache's tag types and advanced usage.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s modify the `ClientResource` class now by changing the `@Produces` annotation
    so that it uses the `View` class to generate HTML instead of plain text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `#showContact` method so that it returns a `ContactView` instance
    initialized with the contact representation fetched using the Jersey client. Import
    `com.dwbook.phonebook.views.ContactView` first:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s test the UI. Rebuild the application, run it, and point your browser
    to `http://localhost:8080/client/showContact?id=2`. Instead of seeing the plain
    text response of the client, we now see an HTML table being rendered with the
    details of the contact with an ID equal to 2, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/9530OS_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When we access the client's URL, it fetches the data by calling the appropriate
    service. The data is then passed as a `Contact` instance to the `ContactView`
    class that extends View, which uses the template engine to parse the designated
    template file, `contact.mustache`, and generate the HTML markup. The file extension
    indicates the template engine that shall be used.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Mustache is not the only template engine supported by Dropwizard; there's also
    Freemarker. We chose Mustache over Freemarker to demonstrate Dropwizard's template
    capabilities since Mustache is a more logicless, agnostic programming language,
    and has implementations available for many programming languages.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, Freemarker is Java-bound, has more programming capabilities,
    and can perform more complex tasks such as sanitizing the produced output.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we were using Freemarker instead of Mustache for the previous example, the
    main table of the template would be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the syntax of both template engines is similar. Note that while
    Mustache escapes variables by default, with Freemarker, you have to instruct the
    processor to sanitize the output by suffixing the variables with `?html`.
  prefs: []
  type: TYPE_NORMAL
- en: Serving static assets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are cases where along with the HTML-based views, you need to serve static
    assets, such as CSS stylesheets, JavaScript files, or any other file that may
    be used by your application.
  prefs: []
  type: TYPE_NORMAL
- en: To do so, you may add an `AssetsBundle` instance on the `#bootstrap()` method,
    specifying the folder from where you can serve static files and also the URI that
    this folder will be mapped to. We will first need to import `io.dropwizard.assets.AssetsBundle`
    and modify the `pom.xml` file accordingly, declaring a dependency to the artifact
    dropwizard-assets.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, if you want to serve a static stylesheet file named `stylesheet.css`,
    you'll have to store it under `src/main/java/resources/assets`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `stylesheet.css` file would now be accessible from the `http://localhost:8080/assets/stylesheet.css`
    URL.
  prefs: []
  type: TYPE_NORMAL
