["```java\njavac -version\n```", "```java\njavac 1.8.0_112\n```", "```java\nname := 'scala_fundamentals\"\n\nversion := \"0.1\"\n\nscalaVersion := \"2.12.4\"\n```", "```java\nscala> 1+1\n```", "```java\nres0: Int = 2\n```", "```java\nscala> val x = 1 + 1\nx: Int = 2\n\nscala> val y: Int = 1 + 1\ny: Int = 2\n```", "```java\nscala> var x = 1\nx: Int = 1\n\nscala> x = 2\nx: Int = 2\n```", "```java\nscala> val y = 1\ny: Int = 1\n\nscala> y = 2\n<console>:12: error: reassignment to val\n       y = 2\n         ^\n```", "```java\nscala> val str = \"Hello\" + \"World\"\nstr: String = HelloWorld\n\nscala> val i = 1 + 1\ni: Int = 2\n\nscala> val b = true + false\n<console>:11: error: type mismatch;\n found   : Boolean(false)\n```", "```java\nscala> def presentation(name: String, age: Int): String = \n  \"Hello, my name is \" + name + \". I am \" + age + \" years old.\"\npresentation: (name: String, age: Int)String\n\nscala> presentation(name = \"Bob\", age = 25)\nres1: String = Hello, my name is Bob. I am 25 years old.\n\nscala> presentation(age = 25, name = \"Bob\")\n\nres2: String = Hello, my name is Bob. I am 25 years old.\n```", "```java\nscala> val x = println(\"hello\")\nhello\nx: Unit = ()\n\nscala> def printName(name: String): Unit = println(name)\nprintName: (name: String)Unit\n\nscala> val y = {\n  var a = 1\n  a = a+1\n}\ny: Unit = ()\n\nscala> val z = ()\nz: Unit = ()\n```", "```java\nscala> def helloWorld(): Unit = println(\"Hello world\")\nhelloWorld: ()Unit\n\nscala> helloWorld()\nHello world\n\nscala> def helloWorldPure: String = \"Hello world\"\nhelloWorldPure: String\n\nscala> val x = helloWorldPure\nx: String = Hello world\n```", "```java\nscala> def agePeriod(age: Int): String = {\n  if (age >= 65)\n    \"elderly\"\n  else if (age >= 40 && age < 65)\n    \"middle aged\"\n  else if (age >= 18 && age < 40)\n    \"young adult\"\n  else\n    \"child\"\n}\nagePeriod: (age: Int)String\n\n```", "```java\nscala> val ifElseWiden = if (true) 2: Int else 2.0: Double\nifElseWiden: Double = 2.0\n\nscala> val ifElseSupertype = if (true) 2 else \"2\"\nifElseSupertype: Any = 2\n```", "```java\nscala> val ifWithoutElse = if (true) 2\nifWithoutElse: AnyVal = 2\n\nscala> val ifWithoutElseExpanded = if (true) 2: Int else (): Unit\nifWithoutElseExpanded: AnyVal = 2\n\nscala> def sideEffectingFunction(): Unit = if (true) println(\"hello world\")\nsideEffectingFunction: ()Unit\n```", "```java\nscala> class Robot\ndefined class Robot\n\nscala> val nao = new Robot\nnao: Robot = Robot@78318ac2\n```", "```java\nscala> val naoBis = nao\nnaoBis: Robot = Robot@78318ac2\n\nscala> nao eq naoBis\nres0: Boolean = true\n\nscala> val johnny5 = new Robot\njohnny5: Robot = Robot@6b64bf61\n\nscala> nao eq johnny5\nres1: Boolean = false\n```", "```java\nscala> class Rectangle(width: Int, height: Int) {\n  val area: Int = width * height\n  def scale(factor: Int): Rectangle = new Rectangle(width * factor, height * factor)\n}\ndefined class Rectangle\n```", "```java\nscala> val square = new Rectangle(2, 2)\nsquare: Rectangle = Rectangle@2af9a5ef\n\nscala> square.area\nres0: Int = 4\n\nscala> val square2 = square.scale(2)\nsquare2: Rectangle = Rectangle@8d29719\n\nscala> square2.area\nres1: Int = 16\n\nscala> square.width\n<console>:13: error: value width is not a member of Rectangle\n       square.width\n```", "```java\nscala> class Rectangle(val width: Int, val height: Int) {\n  val area: Int = width * height\n  def scale(factor: Int): Rectangle = new Rectangle(width * factor, height * factor)\n}\ndefined class Rectangle\n\nscala> val rect = new Rectangle(3, 2)\nrect: Rectangle = Rectangle@3dbb7bb\n\nscala> rect.width\nres3: Int = 3\n\nscala> rect.height\nres4: Int = 2\n```", "```java\nclass Shape(val x: Int, val y: Int) {\n  val isAtOrigin: Boolean = x == 0 && y == 0\n}\n\nclass Rectangle(x: Int, y: Int, val width: Int, val height: Int)\n  extends Shape(x, y)\n\nclass Square(x: Int, y: Int, width: Int)\n  extends Rectangle(x, y, width, width)\n\nclass Circle(x: Int, y: Int, val radius: Int)\n  extends Shape(x, y)\n\nval rect = new Rectangle(x = 0, y = 3, width = 3, height = 2)\nrect.x\nrect.y\nrect.isAtOrigin\nrect.width\nrect.height\n```", "```java\nval shape: Shape = new Rectangle(x = 0, y = 3, width = 3, height = 2)\nval rectangle: Rectangle = new Shape(x = 0, y = 3)\n```", "```java\nclass Shape(val x: Int, val y: Int) {\n  def description: String = s\"Shape at (\" + x + \",\" + y + \")\"\n}\n\nclass Rectangle(x: Int, y: Int, val width: Int, val height: Int)\n  extends Shape(x, y) {\n  override def description: String = {\n    super.description + s\" - Rectangle \" + width + \" * \" + height\n  }\n}\n\nval rect = new Rectangle(x = 0, y = 3, width = 3, height = 2)\nrect.description\n```", "```java\nres0: String = Shape at (0,3) - Rectangle 3 * 2\n```", "```java\nclass Rectangle(x: Int, y: Int, val width: Int, val height: Int)\n  extends Shape(x, y) {\n  override def description: String = {\n    super.description + s\" - Rectangle \" + width + \" * \" + height\n  }\n\n  def descThis: String = this.description\n  def descSuper: String = super.description\n}\n\nval rect = new Rectangle(x = 0, y = 3, width = 3, height = 2)\nrect.description\nrect.descThis\nrect.descSuper\n```", "```java\nres0: String = Shape at (0,3) - Rectangle 3 * 2\nres1: String = Shape at (0,3) - Rectangle 3 * 2\nres2: String = Shape at (0,3)\n```", "```java\nabstract class Shape(val x: Int, val y: Int) {\n  val area: Double\n  def description: String\n}\n\nclass Rectangle(x: Int, y: Int, val width: Int, val height: Int)\n  extends Shape(x, y) {\n\n  val area: Double = width * height\n\n  def description: String =\n    \"Rectangle \" + width + \" * \" + height\n}\n```", "```java\ntrait Description {\n  def description: String\n}\n\ntrait Coordinates extends Description {\n  def x: Int\n  def y: Int\n\n  def description: String =\n    \"Coordinates (\" + x + \", \" + y + \")\"\n}\n\ntrait Area {\n  def area: Double\n}\n\nclass Rectangle(val x: Int,\n                val y: Int,\n                val width: Int,\n                val height: Int)\n  extends Coordinates with Description with Area {\n\n  val area: Double = width * height\n\n  override def description: String =\n    super.description + \" - Rectangle \" + width + \" * \" + height\n}\n\nval rect = new Rectangle(x = 0, y = 3, width = 3, height = 2)\nrect.description\n```", "```java\nres0: String = Coordinates (0, 3) - Rectangle 3 * 2\n```", "```java\ncase class Person(name: String, age: Int)\nval mikaelNew = new Person(\"Mikael\", 41)\n// 'new' is optional\nval mikael = Person(\"Mikael\", 41)\n// == compares values, not references\nmikael == mikaelNew\n// == is exactly the same as .equals\nmikael.equals(mikaelNew)\n\nval name = mikael.name\n\n// a case class is immutable. The line below does not compile:\n//mikael.name = \"Nicolas\"\n// you need to create a new instance using copy\nval nicolas = mikael.copy(name = \"Nicolas\")\n```", "```java\ncase class City(name: String, urbanArea: Int)\nobject City {\n  val London = City(\"London\", 1738)\n  val Lausanne = City(\"Lausanne\", 41)\n}\n\ncase class Person(firstName: String, lastName: String, city: City)\nobject Person {\n  def apply(fullName: String, city: City): Person = {\n    val splitted = fullName.split(\" \")\n    new Person(firstName = splitted(0), lastName = splitted(1), city = city)\n  }\n}\n\n// Uses the default apply method\nval m1 = Person(\"Mikael\", \"Valot\", City.London)\n// Call apply with fullName\nval m2 = Person(\"Mikael Valot\", City.London)\n// We can omit 'apply'\nval n = Person.apply(\"Nicolas Jorand\", City.Lausanne)\n```", "```java\nobject Main extends App {\n\n}\n```", "```java\nname := \"Examples\"\nversion := \"0.1\"\nscalaVersion := \"2.12.4\"\nresolvers += \"Artima Maven Repository\" at \"http://repo.artima.com/releases\"\nlibraryDependencies += \"org.scalatest\" %% \"scalatest\" % \"3.0.4\" % \"test\"\n```", "```java\nclass MainSpec extends WordSpec with Matchers {\n\n}\n```", "```java\nimport org.scalatest.{WordSpec, Matchers}\n\nclass MainSpec extends WordSpec with Matchers {\n\n}\n```", "```java\nclass MainSpec extends WordSpec with Matchers {\n  \"A Person\" should {\n    \"be instantiated with a age and name\" in {\n      val john = Person(firstName = \"John\", lastName =  \"Smith\", 42)\n      john.firstName should be(\"John\")\n      john.lastName should be(\"Smith\")\n      john.age should be(42)\n    }\n  }\n}\n```", "```java\ncase class Person(firstName: String, lastName: String, age: Int)\n```", "```java\n\"Get a human readable representation of the person\" in {\n  val paul = Person(firstName = \"Paul\", lastName = \"Smith\", age = 24)\n  paul.description should be(\"Paul Smith is 24 years old\")\n}\n```", "```java\ndef description = s\"$firstName $lastName is $age ${if (age <= 1) \"year\"                    else \"years\"} old\"\n```", "```java\n\"The Person companion object\" should {\n  val (akira, peter, nick) = (\n    Person(firstName = \"Akira\", lastName = \"Sakura\", age = 12),\n    Person(firstName = \"Peter\", lastName = \"Müller\", age = 34),\n    Person(firstName = \"Nick\", lastName = \"Tagart\", age = 52)\n  )\n  \"return a list of adult person\" in {\n    val ref = List(akira, peter, nick)\n    Person.filterAdult(ref) should be(List(peter, nick))\n  }\n  \"return an empty list if no adult in the list\" in {\n    val ref = List(akira)\n    Person.filterAdult(ref) should be(List.empty[Person])\n  }\n}\n```", "```java\nobject Person {\n  def filterAdult(persons: List[Person]) : List[Person] = {\n    for {\n      person <- persons\n      if (person.age >= 18)\n    } yield (person)\n  }\n}\n```", "```java\ndef filterAdult(persons: List[Person]) : List[Person] = {\n  persons.filter(_.age >= 18)\n}\n```", "```java\nobject Main extends App {\n  val persons = List(\n    Person(firstName = \"Akira\", lastName = \"Sakura\", age = 12),\n    Person(firstName = \"Peter\", lastName = \"Müller\", age = 34),\n    Person(firstName = \"Nick\", lastName = \"Tagart\", age = 52))\n\n  val adults = Person.filterAdult(persons)\n  val descriptions = adults.map(p => p.description).mkString(\"\\n\\t\")\n  println(s\"The adults are \\n\\t$descriptions\")\n}\n```"]