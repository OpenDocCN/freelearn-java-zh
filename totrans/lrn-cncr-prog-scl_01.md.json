["```java\nobject SquareOf5 extends App { \n  def square(x: Int): Int = x * x \n  val s = square(5) \n  println(s\"Result: $s\") \n} \n\n```", "```java\nclass Printer(val greeting: String) { \n  def printMessage(): Unit = println(greeting + \"!\") \n  def printNumber(x: Int): Unit = { \n    println(\"Number: \" + x) \n  } \n}\n\n```", "```java\nval printy = new Printer(\"Hi\") \nprinty.printMessage() \nprinty.printNumber(5) \n\n```", "```java\nobject Test { \n  val Pi = 3.14 \n} \n\n```", "```java\ntrait Logging { \n  def log(s: String): Unit \n  def warn(s: String) = log(\"WARN: \" + s) \n  def error(s: String) = log(\"ERROR: \" + s) \n} \nclass PrintLogging extends Logging { \n  def log(s: String) = println(s) \n} \n\n```", "```java\nclass Pair[P, Q](val first: P, val second: Q) \n\n```", "```java\nval twice: Int => Int = (x: Int) => x * 2 \n\n```", "```java\nval twice = (x: Int) => x * 2 \n\n```", "```java\nval twice: Int => Int = x => x * 2 \n\n```", "```java\nval twice: Int => Int = _ * 2 \n\n```", "```java\ndef runTwice(body: =>Unit) = { \n  body \n  body \n} \n\n```", "```java\nrunTwice { // this will print Hello twice \n  println(\"Hello\") \n} \n\n```", "```java\nfor (i <- 0 until 10) println(i) \n\n```", "```java\n(0 until 10).foreach(i => println(i)) \n\n```", "```java\nval negatives = for (i <- 0 until 10) yield -i \n\n```", "```java\nval negatives = (0 until 10).map(i => -1 * i) \n\n```", "```java\nval pairs = for (x <- 0 until 4; y <- 0 until 4) yield (x, y) \n\n```", "```java\nval pairs = (0 until 4).flatMap(x => (0 until 4).map(y => (x, y))) \n\n```", "```java\nval messages: Seq[String] = Seq(\"Hello\", \"World.\", \"!\") \n\n```", "```java\nval magic = 7 \nval myMagicNumber = s\"My magic number is $magic\" \n\n```", "```java\nval successors = Map(1 -> 2, 2 -> 3, 3 -> 4) \nsuccessors.get(5) match { \n  case Some(n) => println(s\"Successor is: $n\") \n  case None    => println(\"Could not find successor.\") \n} \n\n```", "```java\nclass Position(val x: Int, val y: Int) { \n  def +(that: Position) = new Position(x + that.x, y + that.y) \n} \n\n```", "```java\npackage org \npackage object learningconcurrency { \n  def log(msg: String): Unit = \n    println(s\"${Thread.currentThread.getName}: $msg\") \n} \n\n```", "```java\n                def compose[A, B, C]\n                (g: B => C, f: A => B): A => C = ??? \n\n    ```", "```java\n                def fuse[A, B] \n                (a: Option[A], b: Option[B]): Option[(A, B)] = ??? \n\n    ```", "```java\n                def check[T](xs: Seq[T])(pred: T => Boolean): Boolean = ??? \n\n    ```", "```java\n                check(0 until 10)(40 / _ > 0) \n\n    ```", "```java\n                def permutations(x: String): Seq[String]  \n\n    ```", "```java\n                def combinations(n: Int, xs: Seq[Int]): Iterator[Seq[Int]] \n\n    ```", "```java\n                def matcher   (regex: String): PartialFunction[String,   \n                List[String]] \n\n    ```"]