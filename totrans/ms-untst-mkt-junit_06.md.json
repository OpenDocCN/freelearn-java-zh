["```java\n    public void trim(String input){\n        if(input != null){\n          return input.trim();\n        }\n        return null;\n    }\n    ```", "```java\nCalculator.java:\n```", "```java\npackage com.packt.code.quality;\npublic class Calculator<T extends Number> {\n  public String add(T... numbers) {\n    T result = null;\n    int x =0;\n    for(T t:numbers) { x++;\n      if(result == null) {\n        if(t instanceof Integer) {\n          result = (T) new Integer(\"0\");\n        }else if(t instanceof Short) {\n          result = (T) new Short(\"0\");\n        }else if(t instanceof Long) {\n          result = (T) new Long(\"0\");\n        }else if(t instanceof Float) {\n          result = (T) new Float(\"0.0\");\n        }else if(t instanceof Double) {\n          result = (T) new Double(\"0.0\");\n        }\n      }\n      if(t instanceof Integer) {\n        Integer val = ((Integer)result + (Integer)t);\n        result =(T)val;\n      }else if(t instanceof Short) {\n        Short val = (short) ((Short)result + (Short)t);\n        result =(T)val;\n      }else if(t instanceof Long) {\n        Long val =  ((Long)result + (Long)t);\n        result =(T)val;\n      }else if(t instanceof Float) {\n        Float val =  ((Float)result + (Float)t);\n        result =(T)val;\n      }else if(t instanceof Double) {\n        Double val =  ((Double)result + (Double)t);\n        result =(T)val;\n      }\n      if(x == 1045) {\n        System.out.println(\"warning !!!\");\n      }\n    }\n    return result.toString();\n  } }\n```", "```java\n        if (x < 0)\n          new IllegalArgumentException(\"x must be nonnegative\");\n        ```", "```java\n        Object x = null;\n        Car myCar = (Car)x;\n        if(myCar != null){\n          //...\n        }\n        ```", "```java\npublic class Buggy implements Cloneable {\n    private Integer magicNumber;\n    public Buggy(Integer magicNumber) {\n        this.magicNumber = magicNumber;\n    }\n    public boolean isBuggy(String x) {\n        return \"Buggy\" == x;\n    }\n    public boolean equals(Object o) {\n        if (o instanceof Buggy) {\n            return ((Buggy) o).magicNumber == magicNumber;\n        }\n        if (o instanceof Integer) {\n            return magicNumber == ((Integer) o);\n        }\n        return false;\n    }\n    Buggy() { }\n    static class MoreBuggy extends Buggy {\n        static MoreBuggy singleton = new MoreBuggy();\n    }\n    static MoreBuggy foo = MoreBuggy.singleton;\n}\n```", "```java\nsonar-runner.properties file. Check whether sonar.host.url and sonar.jdbc.url are enabled:\n```", "```java\n    # Required metadata\n    sonar.projectKey=packt:CodeQualityChapter06\n    sonar.projectName=CodeQualityChapter06\n    sonar.projectVersion=1.0\n    #source file location \n    sonar.sources=src/main/java\n    # The value of the property must be the key of the language.\n    sonar.language=java\n    # Encoding of the source code\n    sonar.sourceEncoding=UTF-8\n\n    ```", "```java\napply plugin: 'java'\napply plugin: 'sonar-runner'\napply plugin: \"jacoco\"\n\nrepositories {\n    flatDir(dir: '../lib', name: 'JUnit Library')\n    mavenCentral()\n}\n\ndependencies {\n    testCompile'junit:junit:4.11', ':hamcrest-core:1.3'\n}\n\njacocoTestReport {\n    reports {\n        xml.enabled false\n        csv.enabled false\n        html.destination \"${buildDir}/jacocoHtml\"\n    }\n}\nsonarRunner {\n sonarProperties {\n property \"sonar.projectName\", \"CodeQualityChapter06\"\n property \"sonar.projectKey\", \"packt:CodeQualityChapter06\"\n property \"sonar.jacoco.reportPath\", \"${project.buildDir}/jacoco/test.exec\"\n }\n}\n\n```", "```java\n<project    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>packt</groupId>\n  <artifactId>Chapter06</artifactId>\n  <version>1.0-SNAPSHOT</version>\n  <packaging>jar</packaging>\n  <name>Chapter06</name>\n  <url>http://maven.apache.org</url>\n  <properties>\n    <project.build.sourceEncoding>UTF-8\n    </project.build.sourceEncoding>\n  <sonar.language>java</sonar.language>\n  </properties>\n  <dependencies>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>4.11</version>\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n```", "```java\n<project name=\"chapter06\" default=\"coverage\" basedir=\".\" **>**\n  **<property name=\"sonar.projectKey\" value=\"packt:chapter06_ant\" />**\n  <property name=\"sonar.projectName\" value=\"Chapter06\" />\n  **<property name=\"sonar.projectVersion\" value=\"2.0\" />**\n  <property name=\"sonar.language\" value=\"java\" />\n  <property name=\"sonar.sources\" value=\"src/main/java\" />\n  <property name=\"sonar.binaries\" value=\"target\" />\n  <property name=\"sonar.sourceEncoding\" value=\"UTF-8\" />\n  **<target name=\"sonar\" depends=\"compile\">**\n    **<taskdef uri=\"antlib:org.sonar.ant\" **      **resource=\"org/sonar/ant/antlib.xml\">**\n      **<classpath path=\"${lib.dir}/sonar-ant-task-2.1.jar\" />**\n    **</taskdef>**\n    **<sonar:sonar />**\n  **</target>** \n```"]