- en: Chapter 10. Beyond Spring Web
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we'll see how far we have come, the problems we've solved,
    and the ones left to be addressed.
  prefs: []
  type: TYPE_NORMAL
- en: We will talk about the Spring ecosystem in general, and persistence, deployment,
    and Single Page Applications in particular.
  prefs: []
  type: TYPE_NORMAL
- en: The Spring ecosystem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'From the Web to data, Spring is a comprehensive ecosystem aiming to resolve
    all sorts of problems in a modular way:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Spring ecosystem](img/2117_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Check out the Spring IO platform at [https://spring.io/platform](https://spring.io/platform).
  prefs: []
  type: TYPE_NORMAL
- en: Core
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At the core of the Spring framework, there is obviously a dependency injection
    mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: We only scratched the surface of the security features and the great integration
    of the framework with Groovy.
  prefs: []
  type: TYPE_NORMAL
- en: Execution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We saw in detail what Spring Boot is about -- bringing simplicity and cohesion
    to a vast network of subprojects.
  prefs: []
  type: TYPE_NORMAL
- en: It allows you to focus on what really matters, that is, your business code.
  prefs: []
  type: TYPE_NORMAL
- en: The Spring XD project is also really interesting. Its goal is to provide tools
    to process, analyze, and transform or export your data, and has a clear focus
    on big data. For more information, visit [http://projects.spring.io/spring-xd](http://projects.spring.io/spring-xd).
  prefs: []
  type: TYPE_NORMAL
- en: Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the things we haven't looked at while developing our application is how
    to store data in a database. In Pivotal's reference architecture, there is a tier
    devoted to both relational data and non-relational (NoSQL) data.
  prefs: []
  type: TYPE_NORMAL
- en: The Spring ecosystem has provided a lot of interesting solutions under the label
    `spring-data`, which can be found at [http://projects.spring.io/spring-data/](http://projects.spring.io/spring-data/).
  prefs: []
  type: TYPE_NORMAL
- en: We glanced at Spring Data Redis when we built the cache but there is much more
    to Spring Data.
  prefs: []
  type: TYPE_NORMAL
- en: The basic concepts are shared among all the Spring Data projects, such as the
    template API, which is an abstraction to retrieve and store objects from a persistence
    system.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Data JPA ([http://projects.spring.io/spring-data-jpa/](http://projects.spring.io/spring-data-jpa/))
    and Spring Data Mongo ([http://projects.spring.io/spring-data-mongodb/](http://projects.spring.io/spring-data-mongodb/))
    are some of the most well known Spring Data projects. They let you operate on
    entities through repositories, simple interfaces that provide facilities to create
    queries, persisting objects, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Petri Kainulainen ([http://www.petrikainulainen.net/spring-data-jpa-tutorial/](http://www.petrikainulainen.net/spring-data-jpa-tutorial/))
    has a lot of thorough examples on Spring Data. It does not use the facilities
    that Spring Boot provides but you should be able to get started quite easily with
    guides, such as the one available at [https://spring.io/guides/gs/accessing-data-jpa/](https://spring.io/guides/gs/accessing-data-jpa/).
  prefs: []
  type: TYPE_NORMAL
- en: Spring Data REST is also a magical project that will semiautomatically expose
    your entities through a RESTful API. Visit [https://spring.io/guides/gs/accessing-data-rest/](https://spring.io/guides/gs/accessing-data-rest/)
    for a detailed tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: Other noteworthy projects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Spring Integration ([http://projects.spring.io/spring-integration](http://projects.spring.io/spring-integration))
    and Spring Reactor ([http://projectreactor.io](http://projectreactor.io)) are
    also two of my favorite Spring projects.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Reactor is the implementation of reactive streams by Pivotal. The idea
    is to provide fully nonblocking IO on the server side.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Integration, on the other hand, focuses on Enterprise Integration Patterns
    and lets you design channels to load and transform data coming from heterogeneous
    systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'A good, and simple, example of what you can accomplish with channels can be
    seen here: [http://lmivan.github.io/contest/#_spring_boot_application](http://lmivan.github.io/contest/#_spring_boot_application).'
  prefs: []
  type: TYPE_NORMAL
- en: If you have heterogeneous and/or complex subsystems with which your application
    has to communicate, it is definitely worth taking a look at.
  prefs: []
  type: TYPE_NORMAL
- en: The last project in the Spring ecosystem we haven't is Spring Batch, a really
    useful abstraction for processing high volumes of data for the daily operations
    of enterprise systems.
  prefs: []
  type: TYPE_NORMAL
- en: The deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring Boot provides the ability to run and distribute your Spring application
    as a simple JAR and is a wonderful success in that regard.
  prefs: []
  type: TYPE_NORMAL
- en: It is, without a doubt, a step in the right direction, but sometimes your web
    application isn't the only thing you want to deploy.
  prefs: []
  type: TYPE_NORMAL
- en: When dealing with a complex system with multiple servers and datasources, the
    work of the operation team can become quite a headache.
  prefs: []
  type: TYPE_NORMAL
- en: Docker
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Who hasn't heard about Docker? It is the new cool kid in the container world
    and has become quite a success, thanks to its vibrant community.
  prefs: []
  type: TYPE_NORMAL
- en: The ideas behind Docker are not new, it leverages LinuX Containers (LXC) and
    cgroups to provide a fully isolated environment for applications to run in.
  prefs: []
  type: TYPE_NORMAL
- en: You can find a tutorial on the Spring website that will guide you through your
    first steps with Docker at [https://spring.io/guides/gs/spring-boot-docker](https://spring.io/guides/gs/spring-boot-docker).
  prefs: []
  type: TYPE_NORMAL
- en: Pivotal Cloud Foundry has been using container technology for years in their
    container manager called Warden. They recently moved to Garden, an abstraction
    that supports not only Linux containers, but also Windows containers.
  prefs: []
  type: TYPE_NORMAL
- en: Garden is part of the latest release of Cloud Foundry (called Diego) that also
    allows Docker images as units of deployment.
  prefs: []
  type: TYPE_NORMAL
- en: A developer version of Cloud Foundry has also been released under the name Lattice,
    which can be found at [https://spring.io/blog/2015/04/06/lattice-and-spring-cloud-resilient-sub-structure-for-your-cloud-native-spring-applications](https://spring.io/blog/2015/04/06/lattice-and-spring-cloud-resilient-sub-structure-for-your-cloud-native-spring-applications).
  prefs: []
  type: TYPE_NORMAL
- en: If you want to test containers without the hassles of the command line, I recommend
    that you look at Kitematic. With this, you can run a Jenkins container or a MongoDB
    without installing the binaries on your system. Visit [https://kitematic.com/](https://kitematic.com/)
    for more information on Kitematic.
  prefs: []
  type: TYPE_NORMAL
- en: Another tool in the Docker ecosystem that's worth mentioning is Docker Compose.
    It allows you to run and link multiple containers with a single configuration
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [http://java.dzone.com/articles/spring-session-demonstration](http://java.dzone.com/articles/spring-session-demonstration)
    for a good example of a Spring Boot application composed of two web servers, a
    Redis to store users' sessions, and an Nginx instance to do the load balancing.
    Of course, there is much more to learn about Docker Swarm, which will allow you
    to scale your application with a simple command, and Docker Machine, which will
    create Docker hosts for you on any machine, including Cloud providers.
  prefs: []
  type: TYPE_NORMAL
- en: Google Kurbernetes and Apache Mesos are also great examples of distributed systems
    that benefit greatly from Docker containers.
  prefs: []
  type: TYPE_NORMAL
- en: Single Page Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most of today's web applications are written in JavaScript. Java is relegated
    to the backend and has the important role of dealing with data and business rules.
    However, much of the GUI stuff is now happening on the client side.
  prefs: []
  type: TYPE_NORMAL
- en: There is a good reason for that in terms of responsiveness and user experience,
    but those applications add extra complexity.
  prefs: []
  type: TYPE_NORMAL
- en: Developers now have to be fluent in both Java and JavaScript and the number
    of frameworks can be a little overwhelming at first.
  prefs: []
  type: TYPE_NORMAL
- en: The players
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to dig deeper into JavaScript, I would highly recommend Dave Syer's
    tutorial with Spring and AngularJS, which is available at [https://spring.io/guides/tutorials/spring-security-and-angular-js](https://spring.io/guides/tutorials/spring-security-and-angular-js).
  prefs: []
  type: TYPE_NORMAL
- en: Choosing a JavaScript MVC framework can be a little difficult too. AngularJS
    has had the favor of the Java community for years but people seem to be moving
    away from it. For more information, visit [https://gist.github.com/tdd/5ba48ba5a2a179f2d0fa](https://gist.github.com/tdd/5ba48ba5a2a179f2d0fa).
  prefs: []
  type: TYPE_NORMAL
- en: 'Other alternatives include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**BackboneJS**: This is a really simple MVC framework that sits on top of Underscore
    and jQuery.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ember**: This is a comprehensive system that provides more facilities for
    interacting with data and more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**React**: This is the newest project from Facebook. It has a new and very
    interesting philosophy for dealing with views. Its learning curve is quite steep,
    but it is a very interesting system to look at in terms of designing a GUI framework.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React is my favorite project right now. It lets you focus on the view and its
    one-way data flow makes it easy to reason with the state of your application.
    However, it is still in version 0.13\. This makes it both very interesting, as
    the vibrant community always comes up with new solutions and ideas, and somewhat
    disturbing, as the road ahead stills seems long even after more than 2 years of
    open source development. Visit [https://facebook.github.io/react/blog/2014/03/28/the-road-to-1.0.html](https://facebook.github.io/react/blog/2014/03/28/the-road-to-1.0.html)
    for information on "The Road to 1.0".
  prefs: []
  type: TYPE_NORMAL
- en: The future
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I see a lot of Java developers ranting about the permissiveness of JavaScript
    and having a hard time dealing with the fact that it is not a strongly typed language.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are other alternatives, such as **Typescript** ([http://www.typescriptlang.org/](http://www.typescriptlang.org/)),
    which are really interesting and provide the things that we, Java developers,
    have always used to make our lives simpler: interfaces, classes, helpful support
    in IDE, and autocompletion.'
  prefs: []
  type: TYPE_NORMAL
- en: A lot of people place bets on the next version (2.0) of Angular that will quite
    notoriously break everything. I think it's for the best. Their collaboration with
    Microsoft's team that makes Typescript is really unique.
  prefs: []
  type: TYPE_NORMAL
- en: 'Most JEE developers will smile when they hear that one of the big new features
    of ECMAScript, that allows the development of this new framework, is decorators,
    some kind of annotation mechanism:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To learn about the difference between annotation and decorators, visit [http://blog.thoughtram.io/angular/2015/05/03/the-difference-between-annotations-and-decorators.html](http://blog.thoughtram.io/angular/2015/05/03/the-difference-between-annotations-and-decorators.html).
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript is evolving quickly and ECMAScript 6 has a lot of interesting features
    that makes it a really advanced and sophisticated language. Don't miss the boat;
    take a look at [https://github.com/lukehoban/es6features](https://github.com/lukehoban/es6features)
    before it's too late!
  prefs: []
  type: TYPE_NORMAL
- en: The web component specification is also a game changer. The goal is to provide
    reusable UI components, and both the React team and the Angular 2 teams have plans
    to interface with it. Google has developed an interesting project on top of web
    components called Polymer that is now in version 1.0.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Refer to the article at [http://ng-learn.org/2014/12/Polymer/](http://ng-learn.org/2014/12/Polymer/)
    to learn more about the state of these projects.
  prefs: []
  type: TYPE_NORMAL
- en: Going stateless
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When dealing with a JavaScript client, relying on session cookies isn't the
    best option. Most applications choose to go completely stateless and identify
    clients with a token.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to stick with Spring Session, take a look at the `HeaderHttpSessionStrategy`
    class. It has an implementation that sends and retrieves sessions with an HTTP
    header. An example of this can be found at [https://drissamri.be/blog/2015/05/21/spr](https://drissamri.be/blog/2015/05/21/spr).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Spring ecosystem is wide and has a lot to offer to modern web application
    developers.
  prefs: []
  type: TYPE_NORMAL
- en: It is hard to find a problem that hasn't been addressed by one of the Spring
    projects.
  prefs: []
  type: TYPE_NORMAL
- en: Time to say good bye! I hope you enjoyed our little journey with Spring MVC
    and that it will help you develop with pleasure and create amazing projects, at
    work or in your spare time.
  prefs: []
  type: TYPE_NORMAL
