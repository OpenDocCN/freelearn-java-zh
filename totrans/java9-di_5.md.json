["```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans \n\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n   <!-- A simple bean definition with ID and Class Name-->\n   <bean id = \"...\" class = \"...\">\n      <!-- Bean configuration and properties like constructor-arg -->\n   </bean>\n\n   <!-- Bean definition using Name attribute instead of ID attribute -->\n   <bean name = \"...\" class = \"...\">\n      <!-- Bean configuration and properties like constructor-arg -->\n   </bean>\n\n   <!-- Ban definition with constructor arguments -->\n   <bean id=\"...\" class=\"...\">\n        <constructor-arg ref=\"...\"/>\n        <constructor-arg ref=\"...\"/>\n   </bean>\n\n   <!-- Ban definition for autowiring using byName mode -->\n   <bean id=\"...\" class=\"...\" autowire=\"byName\">\n   <!-- Bean configuration and properties like constructor-arg -->\n   </bean>\n\n   <!-- Ban definition for defining scope -->\n   <bean id=\"...\" class=\"...\" scope=\"prototype\">\n   <!-- Bean configuration and properties like constructor-arg -->\n   </bean> \n\n   <!-- Ban definition with lazy initialization mode -->\n   <bean id = \"...\" class = \"...\" lazy-init = \"true\">\n      <!-- Bean configuration and properties like constructor-arg -->\n   </bean>\n\n   <!-- Bean definition which has initialization method -->\n   <bean id = \"...\" class = \"...\" init-method = \"init\">\n       <!-- Bean configuration and properties like constructor-arg -->\n   </bean>\n\n   <!-- Bean definition which has destruction method -->\n   <bean id = \"...\" class = \"...\" destroy-method = \"destroy\">\n       <!-- Bean configuration and properties like constructor-arg -->\n   </bean>\n\n</beans>\n```", "```java\n// 1) XML way to configure define application scope\n<bean id=\"...\" class=\"com.packt.scope.applicationBeanTest\" scope=\"application\" />\n\n// 2) Java config using annotation \n@Component\n@Scope(\"application\")\npublic class applicationBeanTest {\n}\n\n//or\n\n@Component\n@ApplicationScope\npublic class applicationBeanTest {\n}\n```", "```java\n// 1) XML way to configure define application scope\n<bean id=\"...\" class=\"com.packt.scope.globalBeanTest\" scope=\"globalSession\" />\n\n// 2) Java config using annotation \n@Component\n@Scope(\"globalSession\")\npublic class globalBeanTest {\n}\n\n//or\n\n@Component\n@GlobalSessionScope\npublic class globalBeanTest {\n}\n```", "```java\n//Using @Scope annotation\n@Scope(scopeName = \"websocket\")\n\n//Using XML configuration \n<bean id=\"...\" class=\"com.packt.scope.WebsocketExampleTest\" scope=\"websocket\" />\n\n```", "```java\npackage com.packt.springbean;\n\npublic class EmailService {\n\n  private String emailContent;\n  private String toAddress;\n\n  public EmailService() {\n    System.out.print(\" \\n Object of EmailService is Created !!! \");\n  }\n\n  public String getEmailContent() {\n    return emailContent;\n  }\n\n  public void setEmailContent(String emailContent) {\n    this.emailContent = emailContent;\n  }\n\n  public String getToAddress() {\n    return toAddress;\n  }\n\n  public void setToAddress(String toAddress) {\n    this.toAddress = toAddress;\n  }\n\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans \n\n  xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n  <bean id=\"emailService\" class=\"com.packt.springbean.EmailService\"\n    scope=\"singleton\" />\n\n</beans>\n```", "```java\n//SpringBeanApplication.java\n\npackage com.packt.springbean;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class SpringBeanApplication {\n\n  public static void main(String[] args) {\n\n    ApplicationContext context = new ClassPathXmlApplicationContext(new String[] { \"application-context.xml\" });\n\n    // Retrieve emailService bean first time.\n    EmailService emailServiceInstanceA = (EmailService) context.getBean(\"emailService\");\n    emailServiceInstanceA.setEmailContent(\"Hello, How are you?\");\n    emailServiceInstanceA.setToAddress(\"krunalpatel1410@yahoo.com\");\n\n    System.out.println(\"\\n Email Content : \" + emailServiceInstanceA.getEmailContent() + \" sent to \"+ emailServiceInstanceA.getToAddress() );\n\n    // Retrieve emailService bean second time. \n    EmailService emailServiceInstanceB = (EmailService) context.getBean(\"emailService\");\n    System.out.println(\"\\n Email Content : \" + emailServiceInstanceB.getEmailContent() + \" sent to \"+ emailServiceInstanceB.getToAddress() );\n\n  }\n}\n```", "```java\nFeb 09, 2018 6:45:15 AM org.springframework.context.support.AbstractApplicationContext prepareRefresh\nINFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@6fc6f14e: startup date [Fri Feb 09 06:45:15 IST 2018]; root of context hierarchy\nFeb 09, 2018 6:45:15 AM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions\nINFO: Loading XML bean definitions from class path resource [application-context.xml]\n\n Object of EmailService is Created !!! \n Email Content : Hello, How are you? sent to krunalpatel1410@yahoo.com\n\n Email Content : Hello, How are you? sent to krunalpatel1410@yahoo.com\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans \n\n  xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n  <bean id=\"emailService\" class=\"com.packt.springbean.EmailService\"\n    scope=\"prototype\" />\n\n</beans>\n```", "```java\nFeb 09, 2018 7:03:20 AM org.springframework.context.support.AbstractApplicationContext prepareRefresh\nINFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@6fc6f14e: startup date [Fri Feb 09 07:03:20 IST 2018]; root of context hierarchy\nFeb 09, 2018 7:03:20 AM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions\nINFO: Loading XML bean definitions from class path resource [application-context.xml]\n\n Object of EmailService is Created !!! \n Email Content : Hello, How are you? sent to krunalpatel1410@yahoo.com\n\n Object of EmailService is Created !!! \n Email Content : null sent to null\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans \n\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context\n        http://www.springframework.org/schema/context/spring-context.xsd\">\n\n  <!-- <context:annotation-config /> -->\n  <context:component-scan base-package=\"com.packt.springbeanannotation\" />\n\n</beans>\n```", "```java\npackage com.packt.springbeanannotation;\n\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Service;\n\n@Service\n@Scope(\"singleton\")\npublic class EmailService {\n\n  private String emailContent;\n  private String toAddress;\n\n  public EmailService() {\n    System.out.print(\" \\n Object of EmailService is Created !!! \");\n  }\n\n  public String getEmailContent() {\n    return emailContent;\n  }\n\n  public void setEmailContent(String emailContent) {\n    this.emailContent = emailContent;\n  }\n\n  public String getToAddress() {\n    return toAddress;\n  }\n\n  public void setToAddress(String toAddress) {\n    this.toAddress = toAddress;\n  }\n\n}\n```", "```java\n@Service\n@Scope(\"prototype\")\npublic class EmailService {\n    ...\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project  \n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.packt.java9.beanscope</groupId>\n    <artifactId>spring-beanscope-test</artifactId>\n    <version>0.1.0</version>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.8.RELEASE</version>\n    </parent>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n    </dependencies>\n\n    <properties>\n        <java.version>9</java.version>\n    </properties>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n```", "```java\npackage com.packt.java9.beanscope.controller;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport com.packt.java9.beanscope.beans.PrototypeBeanScope;\nimport com.packt.java9.beanscope.beans.RequestBeanScope;\nimport com.packt.java9.beanscope.beans.SessionBeanScope;\nimport com.packt.java9.beanscope.beans.SingletonBeanScope;\n\n@RestController\npublic class StudentController {\n\n  public StudentController() {\n    System.out.println(\" ::::::::::::::::::::: StudentController Initialized :::::::::::::::: \");\n  }\n\n  @Autowired\n  PrototypeBeanScope prototypeBeanScope;\n\n  @Autowired\n  SessionBeanScope sessionBeanScope;\n\n  @Autowired\n  RequestBeanScope requestBeanScope;\n\n  @Autowired\n  SingletonBeanScope singletonBeanScope;\n\n  @RequestMapping(\"/\")\n  public String index() {\n    sessionBeanScope.printClassDetail();\n    requestBeanScope.printAddress();\n\n    return \" Greetings from Student Department !!\";\n  }\n\n}\n```", "```java\npackage com.packt.java9.beanscope.beans;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Service;\n\n@Service\n@Scope(\"singleton\")\npublic class StudentDetail implements SingletonBeanScope {\n\n  /* Inject PrototypeBeanScope to observer prototype scope behaviour */\n  @Autowired\n  PrototypeBeanScope prototypeBeanScope;\n\n  private static int increment = 0;\n\n  /**\n   * Every time this bean is initialized, created variable will be increases by\n   * one.\n   */\n  public StudentDetail() {\n    super();\n    System.out.println(\" \\n ::::::: Object of StudentDetail bean is created \" + (++increment) + \" times ::::::: \");\n  }\n}\n```", "```java\npackage com.packt.java9.beanscope.beans;\n\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\n@Component\n@Scope(\"prototype\")\npublic class SubjectPreference implements PrototypeBeanScope {\n\n  private static int increment = 0;\n\n  /**\n   * Every time this bean is initialized, created variable will be increases by\n   * one.\n   */\n  public SubjectPreference() {\n    System.out.println(\" \\n ::::::: Object of SubjectPreference with Prototype scope is created \" + (++increment)\n        + \" Times ::::::: \\n \");\n  }\n\n}\n```", "```java\npackage com.packt.java9.beanscope.beans;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.context.annotation.ScopedProxyMode;\nimport org.springframework.stereotype.Component;\n\n@Component\n@Scope(value = \"request\", proxyMode = ScopedProxyMode.TARGET_CLASS)\npublic class Address implements RequestBeanScope {\n\n  private static int increment = 0;\n\n  /* Inject PrototypeBeanScope to observer prototype scope behaviour */\n  @Autowired\n  PrototypeBeanScope prototypeBeanScope;\n\n  /**\n   * Every time this bean is initialized, created variable will be increases by\n   * one.\n   */\n  public Address() {\n    System.out.println(\n        \" \\n ::::::: Object of Address bean with Request scope created \" + (++increment) + \" Times ::::::: \");\n  }\n\n  public void printAddress() {\n    System.out.println(\"\\n :::::::::::::: RequestbeanScope :: printAddress() Called :::::::::::::: \");\n  }\n}\n```", "```java\npackage com.packt.java9.beanscope.beans;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.context.annotation.ScopedProxyMode;\nimport org.springframework.stereotype.Repository;\n\n@Repository\n@Scope(value = \"session\", proxyMode = ScopedProxyMode.TARGET_CLASS)\npublic class ClassDetail implements SessionBeanScope {\n\n  /* Inject SingletonBeanScope to observer session scope behaviour */\n  @Autowired\n  SingletonBeanScope singletonBeanScope;\n\n  /* Inject PrototypeBeanScope to observer prototype scope behaviour */\n  @Autowired\n  PrototypeBeanScope prototypeBeanScope;\n\n  private static int increment = 0;\n\n  /**\n   * Every time this bean is initialized, created variable will be increases by\n   * one.\n   */\n  public ClassDetail() {\n    System.out.println(\" \\n ::::::: Object of ClassDetail bean with session scope created \" + (++increment)\n        + \" Times ::::::: \");\n  }\n\n  public void printClassDetail() {\n    System.out.println(\"\\n ::::::::: Session Bean - PrintMessage Method Called ::::::::::::::::::: \");\n    System.out.println(\"\\n ::::::::: SessionBeanScope :: printClassDetail() Called ::::::::::::::: \");\n  }\n}\n```", "```java\nhome.give(\"Krunal\", injector.getInstance(Car.class));\n\nhome.give(\"Jigna\", injector.getInstance(Car.class));\n\nhome.give(\"Dirgh\", injector.getInstance(Car.class));\n```", "```java\n@Singleton\npublic class DatabaseConnection{\n\n    public void connectDatabase(){\n    }\n\n    public void disconnectDatabase(){\n    }\n}\n```", "```java\npublic class ApplicationModule extends AbstractModule{\n\n  @Override\n  protected void configure() {\n    //bind service to implementation class\n    bind(NotificationService.class).to(SMSService.class).in(Singleton.class);\n  }\n\n}\n```", "```java\nbind(Professor.class).to(UserPref.class).in(Singleton.class);\nbind(Student.class).to(UserPref.class).in(Singleton.class);\n```", "```java\nbind(NotificationService.class).to(SMSService.class).asEagerSingleton();\n```"]