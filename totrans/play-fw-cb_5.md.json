["```java\n    <span class=\"strong\"><strong>    activator \"~run\"</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    mkdir modules</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    activator new filemon play-java</strong></span>\n    ```", "```java\n    echo \"\" &gt; modules/filemon/conf/application.conf\n    ```", "```java\n    echo \"\" &gt; modules/filemon/conf/routes &amp;&amp; mv modules/filemon/conf/routes modules/filemon/conf/filemon.routes\n    ```", "```java\n    <span class=\"strong\"><strong>    rm -rf modules/filemon/app/views</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    rm modules/filemon/app/controllers/Application.java</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    mkdir modules/filemon/app/filemon</strong></span>\n    ```", "```java\n    package filemon;\n         import java.io.*;\n        import java.util.concurrent.TimeUnit;\n        import akka.actor.ActorSystem;\n        import play.Plugin;\n        import play.Application;\n        import play.libs.Akka;\n        import scala.concurrent.duration.Duration;\n         public class FileMonitor extends Plugin {\n            private Application app;\n            private ActorSystem actorSystem = ActorSystem.create(\"filemon\");\n            private File file = new File(\"/var/tmp/foo\");\n             public FileMonitor(Application app) {\n                this.app = app;\n            }\n           @Override\n            public void onStart() {\n                actorSystem.scheduler().schedule(\n                    Duration.create(0, TimeUnit.SECONDS),\n                    Duration.create(1, TimeUnit.SECONDS),\n                    new Runnable() {\n                        public void run() {\n                            if (file.exists()) {\n                                System.out.println(file.toString() + \" exists..\");\n                            } else {\n                                System.out.println(file.toString() + \" does not exist..\");    \n                            }\n                        }\n                    },\n                    Akka.system().dispatcher()\n                );\n            }\n           @Override\n            public void onStop() {\n                actorSystem.shutdown();\n            }\n           @Override\n            public boolean enabled() {\n                return true;\n            }\n        }\n    ```", "```java\n    echo \"1001:filemon.FileMonitor\" &gt; conf/play.plugins\n    ```", "```java\n    lazy val root = (project in file(\".\"))\n          .enablePlugins(PlayJava)\n          .aggregate(filemon)\n          .dependsOn(filemon)\n         lazy val filemon = (project in file(\"modules/filemon\"))\n          .enablePlugins(PlayJava)\n    ```", "```java\n    <span class=\"strong\"><strong>    activator clean \"~run\"</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    $ curl -v http://localhost:9000</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>(Server started, use Ctrl+D to stop and go back to the console...)</strong></span>\n     <span class=\"strong\"><strong>[info] Compiling 5 Scala sources and 1 Java source to ...</strong></span>\n    <span class=\"strong\"><strong>[success] Compiled in 4s</strong></span>\n    <span class=\"strong\"><strong>Starting file mon</strong></span>\n    <span class=\"strong\"><strong>/var/tmp/foo not found..</strong></span>\n    <span class=\"strong\"><strong>[info] play - Application started (Dev)</strong></span>\n    <span class=\"strong\"><strong>/var/tmp/foo not found..</strong></span>\n    <span class=\"strong\"><strong>/var/tmp/foo not found..</strong></span>\n    <span class=\"strong\"><strong>/var/tmp/foo not found..</strong></span>\n    <span class=\"strong\"><strong>/var/tmp/foo not found.. </strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    activator \"~run\"</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    mkdir modules</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    activator new filemon play-scala</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    echo \"\" &gt; modules/filemon/conf/application.conf</strong></span>\n    ```", "```java\n    echo \"\" &gt; modules/filemon/conf/routes &amp;&amp; mv modules/filemon/conf/routes  modules/filemon/conf/filemon.routes\n    ```", "```java\n    <span class=\"strong\"><strong>    rm -rf modules/filemon/app/views</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    rm modules/filemon/app/controllers/Application.scala</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    mkdir modules/filemon/app/filemon</strong></span>\n    ```", "```java\n    package filemon\n         import java.io.File\n        import scala.concurrent.duration._\n        import akka.actor.ActorSystem\n        import play.api.{Plugin, Application}\n        import play.api.libs.concurrent.Execution.Implicits._\n         class FileMonitor(app: Application) extends Plugin {\n          val system = ActorSystem(\"filemon\")\n          val file = new File(\"/var/tmp/foo\")\n           override def onStart() = {\n            println(\"Starting file mon\")\n            system.scheduler.schedule(0 second, 1 second) {\n              if (file.exists()) {\n                println(\"%s exists..\".format(file))\n              } else {\n                println(\"%s not found..\".format(file))\n              }\n            }\n          }\n           override def onStop() = {\n            println(\"Stopping file mon\")\n            system.shutdown()\n          }\n           override def enabled = true\n        }\n    ```", "```java\n    <span class=\"strong\"><strong>    echo \"1001:filemon.FileMonitor\" &gt; conf/play.plugins</strong></span>\n    ```", "```java\n    lazy val root = (project in file(\".\"))\n          .enablePlugins(PlayScala)\n          .aggregate(filemon)\n          .dependsOn(filemon)\n         lazy val filemon = (project in file(\"modules/filemon\"))\n          .enablePlugins(PlayScala)\n    ```", "```java\n    <span class=\"strong\"><strong>    activator clean \"~run\"</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    $ curl -v http://localhost:9000</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>(Server started, use Ctrl+D to stop and go back to the console...)</strong></span>\n     <span class=\"strong\"><strong>[info] Compiling 5 Scala sources and 1 Java source to ...</strong></span>\n    <span class=\"strong\"><strong>[success] Compiled in 4s</strong></span>\n    <span class=\"strong\"><strong>Starting file mon</strong></span>\n    <span class=\"strong\"><strong>/var/tmp/foo not found..</strong></span>\n    <span class=\"strong\"><strong>[info] play - Application started (Dev)</strong></span>\n    <span class=\"strong\"><strong>/var/tmp/foo not found..</strong></span>\n    <span class=\"strong\"><strong>/var/tmp/foo not found..</strong></span>\n    <span class=\"strong\"><strong>/var/tmp/foo not found..</strong></span>\n    <span class=\"strong\"><strong>/var/tmp/foo not found.. </strong></span>\n    ```", "```java\n<span class=\"strong\"><strong>    $ ls</strong></span>\n<span class=\"strong\"><strong>    LICENSE                     conf</strong></span>\n<span class=\"strong\"><strong>    README                      logs</strong></span>\n<span class=\"strong\"><strong>    activator                   modules</strong></span>\n<span class=\"strong\"><strong>    activator-launch-1.2.10.jar project</strong></span>\n<span class=\"strong\"><strong>    activator.bat               public</strong></span>\n<span class=\"strong\"><strong>    app                         target</strong></span>\n<span class=\"strong\"><strong>    build.sbt                   test</strong></span>\n <span class=\"strong\"><strong>    $ ls modules/filemon</strong></span>\n<span class=\"strong\"><strong>    LICENSE                     build.sbt</strong></span>\n<span class=\"strong\"><strong>    README                      conf</strong></span>\n<span class=\"strong\"><strong>    activator                   project</strong></span>\n<span class=\"strong\"><strong>    activator-launch-1.2.10.jar public</strong></span>\n<span class=\"strong\"><strong>    activator.bat               target</strong></span>\n<span class=\"strong\"><strong>    app                         test</strong></span>\n```", "```java\noverride def onStart() = {\n      println(\"Starting file mon\")\n      system.scheduler.schedule(0 second, 1 second) {\n        if (file.exists()) {\n          println(\"%s exists..\".format(file))\n        } else {\n          println(\"%s not found..\".format(file))\n        }\n      }\n    }\n```", "```java\n1001:filemon.FileMonitor\n```", "```java\n<span class=\"strong\"><strong>    Starting file mon</strong></span>\n<span class=\"strong\"><strong>    /var/tmp/foo not found..</strong></span>\n```", "```java\n<span class=\"strong\"><strong>    # Create foo file then delete after 3 seconds</strong></span>\n<span class=\"strong\"><strong>    touch /var/tmp/foo &amp;&amp; sleep 3 &amp;&amp; rm /var/tmp/foo</strong></span>\n```", "```java\n<span class=\"strong\"><strong>    /var/tmp/foo not found..</strong></span>\n<span class=\"strong\"><strong>    /var/tmp/foo not found..</strong></span>\n<span class=\"strong\"><strong>    /var/tmp/foo exists..</strong></span>\n<span class=\"strong\"><strong>    /var/tmp/foo exists..</strong></span>\n<span class=\"strong\"><strong>    /var/tmp/foo exists..</strong></span>\n<span class=\"strong\"><strong>    /var/tmp/foo not found..</strong></span>\n<span class=\"strong\"><strong>    /var/tmp/foo not found..</strong></span>\n```", "```java\n    <span class=\"strong\"><strong>    activator \"~run\"</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    activator new registration play-java</strong></span>\n    ```", "```java\n    lazy val root = (project in file(\".\"))\n          .enablePlugins(PlayJava)\n          .aggregate(filemon)\n          .dependsOn(filemon)\n    <span class=\"strong\"><strong>      .aggregate(registration)</strong></span>\n    <span class=\"strong\"><strong>      .dependsOn(registration)</strong></span>\n         lazy val filemon = (project in file(\"modules/filemon\"))\n          .enablePlugins(PlayJava)\n     <span class=\"strong\"><strong>    lazy val registration = (project in file(\"modules/registration\"))</strong></span>\n    <span class=\"strong\"><strong>      .enablePlugins(PlayJava)</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    rm -rf app/views app/controllers</strong></span>\n    <span class=\"strong\"><strong>    rm conf/routes</strong></span>\n    <span class=\"strong\"><strong>    mkdir app/registration</strong></span>\n    <span class=\"strong\"><strong>    echo \"\" &gt; conf/application.conf</strong></span>\n    ```", "```java\n    package registration;\n         import play.Application;\n        import play.Plugin;\n         public class RegistrationPlugin extends Plugin {\n            private Application app;\n            private RegistrationService registrationService;\n             public RegistrationPlugin(Application app) {\n                this.app = app;\n            }\n           @Override\n            public void onStart() {\n                registrationService = new RegistrationServiceImpl();\n                registrationService.init();\n            }\n            @Override\n            public void onStop() {\n                registrationService.shutdown();\n            }\n           @Override\n            public boolean enabled() {\n                return true;\n            }\n             public RegistrationService getRegistrationService() {\n                return registrationService;\n            }\n        }\n    ```", "```java\n    // In modules/registration/app/registration/RegistrationService.java\n         package registration;\n         public interface RegistrationService {\n            void init();\n            void shutdown();\n            void create(User user);\n            Boolean auth(String username, String password);\n        }\n         // In modules/registration/app/registration/RegistrationServiceImpl.java    \n        package registration;\n         import java.util.LinkedHashMap;\n        import java.util.Map;\n        import java.util.UUID;\n         public class RegistrationServiceImpl implements RegistrationService {\n            private Map&lt;String, User&gt; registrations;\n             @Override\n            public void create(User user) {\n                final String id = UUID.randomUUID().toString();\n                registrations.put(id, new User(id, user.getUsername(), user.getPassword()));\n            }\n             @Override\n            public Boolean auth(String username, String password) {\n                for(Map.Entry&lt;String, User&gt; entry : registrations.entrySet()) {\n                    if (entry.getValue().getUsername().equals(username) &amp;&amp;\n                        entry.getValue().getPassword().equals(password)) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n             @Override\n            public void init() {\n                registrations = new LinkedHashMap&lt;String, User&gt;();\n            }\n             @Override\n            public void shutdown() {\n                registrations.clear();\n            }\n        }\n    ```", "```java\n    package registration;\n         public class User {\n            private String id;\n            private String username;\n            private String password;\n             public User() {}\n            public User(String id, String username, String password) {\n                this.id = id;\n                this.username = username;\n                this.password = password;\n            }\n             public String getId() {\n                return id;\n            }\n            public void setId(String id) {\n                this.id = id;\n            }\n            public String getUsername() {\n                return username;\n            }\n            public void setUsername(String username) {\n                this.username = username;\n            }\n            public String getPassword() {\n                return password;\n            }\n            public void setPassword(String password) {\n                this.password = password;\n            }\n        }\n    ```", "```java\n    package controllers;\n         import play.Play;\n        import play.data.Form;\n        import play.mvc.BodyParser;\n        import play.mvc.Controller;\n        import play.mvc.Result;\n        import registration.RegistrationPlugin;\n        import registration.RegistrationService;\n        import registration.User;\n        import static play.libs.Json.toJson;\n         public class Registrations extends Controller {\n            private static RegistrationService registrationService =          Play.application().plugin(RegistrationPlugin.class).getRegistrationService();\n             @BodyParser.Of(BodyParser.Json.class)\n            public static Result register() {\n                try {\n                    Form&lt;User&gt; form = Form.form(User.class).bindFromRequest();\n                    User user = form.get();\n                    registrationService.create(user);\n                    return created(toJson(user));\n                } catch (Exception e) {\n                    return internalServerError(e.getMessage());\n                }\n            }\n             @BodyParser.Of(BodyParser.Json.class)\n            public static Result login() {\n                try {\n                    Form&lt;User&gt; form = Form.form(User.class).bindFromRequest();\n                    User user = form.get();\n                    if (registrationService.auth(user.getUsername(), user.getPassword())) {\n                        return ok();\n                    } else {\n                        return forbidden();\n                    }\n                } catch (Exception e) {\n                    return internalServerError(e.getMessage());\n                }\n            }\n        }\n    ```", "```java\n    POST    /register   controllers.Registrations.register\n        POST    /auth       controllers.Registrations.login\n    ```", "```java\n    599:registration.RegistrationPlugin\n    ```", "```java\n    <span class=\"strong\"><strong>    $ curl -v -X POST --header \"Content-type: application/json\"  http://localhost:9000/register -d '{\"username\":\"ned@flanders.com\", \"password\":\"password\"}'</strong></span>\n    <span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>    *   Trying ::1...</strong></span>\n    <span class=\"strong\"><strong>    * Connected to localhost (::1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>    &gt; POST /register HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>    &gt; Content-type: application/json</strong></span>\n    <span class=\"strong\"><strong>    &gt; Content-Length: 54</strong></span>\n    <span class=\"strong\"><strong>    &gt;</strong></span>\n    <span class=\"strong\"><strong>    * upload completely sent off: 54 out of 54 bytes</strong></span>\n    <span class=\"strong\"><strong>    &lt; HTTP/1.1 201 Created</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Type: application/json; charset=utf-8</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Length: 63</strong></span>\n    <span class=\"strong\"><strong>    &lt;</strong></span>\n    <span class=\"strong\"><strong>    * Connection #0 to host localhost left intact</strong></span>\n    <span class=\"strong\"><strong>    {\"id\":null,\"username\":\"ned@flanders.com\",\"password\":\"password\"}%</strong></span>\n     <span class=\"strong\"><strong>    $ curl -v -X POST --header \"Content-type: application/json\"  http://localhost:9000/auth -d '{\"username\":\"ned@flanders.com\", \"password\":\"password\"}'</strong></span>\n    <span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>    *   Trying ::1...</strong></span>\n    <span class=\"strong\"><strong>    * Connected to localhost (::1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>    &gt; POST /auth HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>    &gt; Content-type: application/json</strong></span>\n    <span class=\"strong\"><strong>    &gt; Content-Length: 54</strong></span>\n    <span class=\"strong\"><strong>    &gt;</strong></span>\n    <span class=\"strong\"><strong>    * upload completely sent off: 54 out of 54 bytes</strong></span>\n    <span class=\"strong\"><strong>    &lt; HTTP/1.1 200 OK</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Length: 0</strong></span>\n    <span class=\"strong\"><strong>    &lt;</strong></span>\n    <span class=\"strong\"><strong>    * Connection #0 to host localhost left intact</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    activator \"~run\"</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    activator new registration play-scala</strong></span>\n    ```", "```java\n    lazy val root = (project in file(\".\"))\n          .enablePlugins(PlayScala)\n          .aggregate(filemon)\n          .dependsOn(filemon)\n    <span class=\"strong\"><strong>      .aggregate(registration)</strong></span>\n    <span class=\"strong\"><strong>      .dependsOn(registration)</strong></span>\n         lazy val filemon = (project in file(\"modules/filemon\"))\n          .enablePlugins(PlayScala)\n     <span class=\"strong\"><strong>    lazy val registration = (project in file(\"modules/registration\"))</strong></span>\n    <span class=\"strong\"><strong>      .enablePlugins(PlayScala)</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    rm -rf app/views app/controllers</strong></span>\n    <span class=\"strong\"><strong>    rm conf/routes</strong></span>\n    <span class=\"strong\"><strong>    mkdir app/registration</strong></span>\n    <span class=\"strong\"><strong>    echo \"\" &gt; conf/application.conf</strong></span>\n    ```", "```java\n    package registration\n         import play.api.{Application, Plugin}\n         class RegistrationPlugin(app: Application) extends Plugin {\n          val registrationService = new RegistrationService\n           override def onStart() = {\n            registrationService.init\n          }\n           override def onStop() = {\n            registrationService.shutdown\n          }\n           override def enabled = true\n        }\n    ```", "```java\n    // In modules/registration/app/registration/RegistrationService.scala\n         package registration\n         import java.util.UUID\n         class RegistrationService {\n          type ID = String\n          private val registrations = scala.collection.mutable.Map[ID, User]()\n           def init = {\n            registrations.clear()\n          }\n           def create(user: User) = {\n            val id: ID = UUID.randomUUID().toString\n            registrations += (id -&gt; user.copy(Some(id), user.username, user.password))\n          }\n           def auth(username: String, password: String) = registrations.find(_._2.username equals username) match {\n            case Some(reg) =&gt; {\n              if (reg._2.password equals password) {\n                Some(reg._2)\n              } else {\n                None\n              }\n            }\n            case None =&gt; None\n          }\n           def shutdown = {\n            registrations.clear()\n          }\n        }\n    ```", "```java\n    package registration\n         case class User(id: Option[String], username: String, password: String)\n    ```", "```java\n    package controllers\n         import play.api.Play.current\n        import play.api.Play\n        import play.api.libs.json.{JsError, Json}\n        import play.api.mvc.{BodyParsers, Action, Controller}\n        import registration.{RegistrationPlugin, User, RegistrationService}\n         object Registrations extends Controller {\n          implicit private val writes = Json.writes[User]\n          implicit private val reads = Json.reads[User]\n          private val registrationService: RegistrationService = Play.application.plugin[RegistrationPlugin]\n        .getOrElse(throw new IllegalStateException(\"RegistrationService is required!\"))\n        .registrationService\n           def register = Action(BodyParsers.parse.json) { implicit request =&gt;\n            val post = request.body.validate[User]\n             post.fold(\n              errors =&gt; BadRequest(JsError.toFlatJson(errors)),\n              u =&gt; {\n                registrationService.create(u)\n                Created(Json.toJson(u))\n              }\n            )\n          }\n           def login = Action(BodyParsers.parse.json) { implicit request =&gt;\n            val login = request.body.validate[User]\n             login.fold(\n              errors =&gt; BadRequest(JsError.toFlatJson(errors)),\n              u =&gt; {\n                registrationService.auth(u.username, u.password) match {\n                  case Some(user) =&gt; Ok\n                  case None =&gt; Forbidden\n                }\n              }\n            )\n          }\n        }\n    ```", "```java\n    POST    /register   controllers.Registrations.register\n        POST    /auth       controllers.Registrations.login\n    ```", "```java\n    599:registration.RegistrationPlugin\n    ```", "```java\n    <span class=\"strong\"><strong>    $ curl -v -X POST --header \"Content-type: application/json\"  http://localhost:9000/register -d '{\"username\":\"ned@flanders.com\", \"password\":\"password\"}'</strong></span>\n    <span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>    *   Trying ::1...</strong></span>\n    <span class=\"strong\"><strong>    * Connected to localhost (::1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>    &gt; POST /register HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>    &gt; Content-type: application/json</strong></span>\n    <span class=\"strong\"><strong>    &gt; Content-Length: 54</strong></span>\n    <span class=\"strong\"><strong>    &gt;</strong></span>\n    <span class=\"strong\"><strong>    * upload completely sent off: 54 out of 54 bytes</strong></span>\n    <span class=\"strong\"><strong>    &lt; HTTP/1.1 201 Created</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Type: application/json; charset=utf-8</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Length: 63</strong></span>\n    <span class=\"strong\"><strong>    &lt;</strong></span>\n    <span class=\"strong\"><strong>    * Connection #0 to host localhost left intact</strong></span>\n    <span class=\"strong\"><strong>    {\"id\":null,\"username\":\"ned@flanders.com\",\"password\":\"password\"}%</strong></span>\n     <span class=\"strong\"><strong>    $ curl -v -X POST --header \"Content-type: application/json\"  http://localhost:9000/auth -d '{\"username\":\"ned@flanders.com\", \"password\":\"password\"}'</strong></span>\n    <span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>    *   Trying ::1...</strong></span>\n    <span class=\"strong\"><strong>    * Connected to localhost (::1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>    &gt; POST /auth HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>    &gt; Content-type: application/json</strong></span>\n    <span class=\"strong\"><strong>    &gt; Content-Length: 54</strong></span>\n    <span class=\"strong\"><strong>    &gt;</strong></span>\n    <span class=\"strong\"><strong>    * upload completely sent off: 54 out of 54 bytes</strong></span>\n    <span class=\"strong\"><strong>    &lt; HTTP/1.1 200 OK</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Length: 0</strong></span>\n    <span class=\"strong\"><strong>    &lt;</strong></span>\n    <span class=\"strong\"><strong>    * Connection #0 to host localhost left intact</strong></span>\n    ```", "```java\nlazy val root = (project in file(\".\"))\n      .enablePlugins(PlayScala)\n      .aggregate(filemon)\n      .dependsOn(filemon)\n      .aggregate(registration)\n      .dependsOn(registration)\n```", "```java\n599:registration.RegistrationPlugin\n```", "```java\n// Java\n    private static RegistrationService registrationService =\n            Play.application().plugin(RegistrationPlugin.class).getRegistrationService();\n     // Scala\n    private val registrationService: RegistrationService = Play.application.plugin[RegistrationPlugin]\n    .getOrElse(throw new IllegalStateException(\"RegistrationService is required!\"))\n    .registrationService\n```", "```java\n// Java\n    registrationService.create(user);\n     // Scala\n    registrationService.create(u)\n```", "```java\n<span class=\"strong\"><strong>    $ curl -v -X POST --header \"Content-type: application/json\"  http://localhost:9000/auth -d '{\"username\":\"ned@flanders.com\", \"password\":\"passwordz\"}'</strong></span>\n<span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n<span class=\"strong\"><strong>    *   Trying ::1...</strong></span>\n<span class=\"strong\"><strong>    * Connected to localhost (::1) port 9000 (#0)</strong></span>\n<span class=\"strong\"><strong>    &gt; POST /auth HTTP/1.1</strong></span>\n<span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n<span class=\"strong\"><strong>    &gt; Host: localhost:9000</strong></span>\n<span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n<span class=\"strong\"><strong>    &gt; Content-type: application/json</strong></span>\n<span class=\"strong\"><strong>    &gt; Content-Length: 55</strong></span>\n<span class=\"strong\"><strong>    &gt;</strong></span>\n<span class=\"strong\"><strong>    * upload completely sent off: 55 out of 55 bytes</strong></span>\n<span class=\"strong\"><strong>    &lt; HTTP/1.1 403 Forbidden</strong></span>\n<span class=\"strong\"><strong>    &lt; Content-Length: 0</strong></span>\n<span class=\"strong\"><strong>    &lt;</strong></span>\n<span class=\"strong\"><strong>    * Connection #0 to host localhost left intact</strong></span>\n```", "```java\n    <span class=\"strong\"><strong>    activator new product-contrib play-java</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    mkdir app/productcontrib</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    mkdir app/productcontrib/models</strong></span>\n    ```", "```java\n    echo \"\" &gt; conf/application.conf\n    ```", "```java\n    echo \"\" &gt; conf/routes &amp;&amp; mv conf/routes  modules/filemon/conf/productcontrib.routes\n    ```", "```java\n    <span class=\"strong\"><strong>    rm -rf app/views</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    rm app/controllers/Application.java</strong></span>\n    ```", "```java\n    package productcontrib.models;\n         import java.io.Serializable;\n         public class Product implements Serializable {\n            private String sku;\n            private String title;\n            private Double price;\n             public String getSku() {\n                return sku;\n            }\n            public void setSku(String sku) {\n                this.sku = sku;\n            }\n            public String getTitle() {\n                return title;\n            }\n            public void setTitle(String title) {\n                this.title = title;\n            }\n            public Double getPrice() {\n                return price;\n            }\n            public void setPrice(Double price) {\n                this.price = price;\n            }\n        }\n    ```", "```java\n    // ProductService.java\n        package productcontrib.services;\n         public interface ProductService {\n            String generateProductId();\n        }\n         // ProductServiceImpl.java \n       package productcontrib.services;\n         import java.util.UUID;\n         public class ProductServiceImpl implements ProductService {\n            @Override\n            public String generateProductId() {\n                return UUID.randomUUID().toString();\n            }\n        }\n    ```", "```java\n    name := \"\"\"product-contrib\"\"\"\n      version := \"1.0-SNAPSHOT\"\n      organization := \"foojava\"\n    ```", "```java\n    <span class=\"strong\"><strong>    activator clean publish-local</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    [info]   published product-contrib_2.11 to /.ivy2/local/foojava/product-contrib_2.11/1.0-SNAPSHOT/poms/product-contrib_2.11.pom</strong></span>\n    <span class=\"strong\"><strong>    [info]   published product-contrib_2.11 to /.ivy2/local/foojava/product-contrib_2.11/1.0-SNAPSHOT/jars/product-contrib_2.11.jar</strong></span>\n    <span class=\"strong\"><strong>    [info]   published product-contrib_2.11 to /.ivy2/local/foojava/product-contrib_2.11/1.0-SNAPSHOT/srcs/product-contrib_2.11-sources.jar</strong></span>\n    <span class=\"strong\"><strong>    [info]   published product-contrib_2.11 to /.ivy2/local/foojava/product-contrib_2.11/1.0-SNAPSHOT/docs/product-contrib_2.11-javadoc.jar</strong></span>\n    <span class=\"strong\"><strong>    [info]   published ivy to /.ivy2/local/foojava/product-contrib_2.11/1.0-SNAPSHOT/ivys/ivy.xml</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    activator new user-contrib play-scala</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    mkdir app/usercontrib</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    mkdir app/usercontrib/models</strong></span>\n    ```", "```java\n    echo \"\" &gt; conf/application.conf\n    ```", "```java\n    echo \"\" &gt; conf/routes &amp;&amp; mv conf/routes  modules/filemon/conf/usercontrib.routes\n    ```", "```java\n    <span class=\"strong\"><strong>    rm -rf app/views</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    rm app/controllers/Application.scala</strong></span>\n    ```", "```java\n    package usercontrib.models\n         import java.util.UUID\n         case class User(id: Option[String], username: String, password: String)\n         object User {\n          def generateId = UUID.randomUUID().toString\n        }\n    ```", "```java\n    name := \"\"\"product-contrib\"\"\"\n      version := \"1.0-SNAPSHOT\"\n      organization := \"foojava\"\n    ```", "```java\n    <span class=\"strong\"><strong>    activator clean publish-local</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    [info]   published user-contrib_2.11 to ivy/fooscala/user-contrib_2.11/1.0-SNAPSHOT/user-contrib_2.11-1.0-SNAPSHOT.pom</strong></span>\n    <span class=\"strong\"><strong>    [info]   published user-contrib_2.11 to ivy/fooscala/user-contrib_2.11/1.0-SNAPSHOT/user-contrib_2.11-1.0-SNAPSHOT.jar</strong></span>\n    <span class=\"strong\"><strong>    [info]   published user-contrib_2.11 to ivy/fooscala/user-contrib_2.11/1.0-SNAPSHOT/user-contrib_2.11-1.0-SNAPSHOT-sources.jar</strong></span>\n    <span class=\"strong\"><strong>    [info]   published user-contrib_2.11 to ivy/fooscala/user-contrib_2.11/1.0-SNAPSHOT/user-contrib_2.11-1.0-SNAPSHOT-javadoc.jar</strong></span>\n    ```", "```java\n# Java \n     $ find app/productcontrib\n    app/productcontrib\n    app/productcontrib/models\n    app/productcontrib/models/Product.java\n    app/productcontrib/services\n    app/productcontrib/services/ProductService.java\n    app/productcontrib/services/ProductServiceImpl.java\n     # Scala\n  $ find app/usercontrib\n    app/usercontrib\n    app/usercontrib/models\n    app/usercontrib/models/User.scala\n```", "```java\n<span class=\"strong\"><strong>    activator clean publish-local</strong></span>\n```", "```java\n// Java \n    \"foojava\" %% \"product-contrib\" % \"1.0-SNAPSHOT\"\n     // Scala\n    \"fooscala\" %% \"user-contrib\" % \"1.0-SNAPSHOT\"\n```", "```java\n    activator \"~run\"\n    ```", "```java\n    \"fooscala\" %% \"user-contrib\" % \"1.0-SNAPSHOT\",\n        \"foojava\" %% \"product-contrib\" % \"1.0-SNAPSHOT\"\n    ```", "```java\n    // Add the required imports  \n        import productcontrib.services.ProductService;\n        import productcontrib.services.ProductServiceImpl;\n        import usercontrib.models.User;\n         // Add the necessary Action methods and helper\n        private static ProductService productService = new ProductServiceImpl();\n         public static Result generateProductId() {\n            return ok(\"Your generated product id: \" + productService.generateProductId());\n        }\n         public static Result generateUserId() {\n            return ok(\"Your generated product id: \" + User.generateId());\n        }\n    ```", "```java\n    GET     /generate-product-id       controllers.Application.generateProductId()\n        GET     /generate-user-id          controllers.Application.generateUserId()\n    ```", "```java\n    <span class=\"strong\"><strong>    $ curl http://localhost:9000/generate-product-id</strong></span>\n    <span class=\"strong\"><strong>Your generated product id: 3acd3f36-6ee6-45ce-af07-faa257724b1e%                </strong></span>\n    <span class=\"strong\"><strong>    $ curl http://localhost:9000/generate-user-id</strong></span>\n    <span class=\"strong\"><strong>Your generated product id: ffca654e-35d8-48cd-9acd-9ea9fe567ba7%</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    activator \"~run\"</strong></span>\n    ```", "```java\n    \"foojava\" %% \"product-contrib\" % \"1.0-SNAPSHOT\",\n      \"fooscala\" %% \"user-contrib\" % \"1.0-SNAPSHOT\"\n    ```", "```java\n    import productcontrib.services.{ProductServiceImpl, ProductService}\n        import usercontrib.models.User\n         def productService: ProductService = new ProductServiceImpl\n         def generateProductId = Action {\n          Ok(\"Your generated product id: \" + productService.generateProductId())\n        }\n         def generateUserId = Action {\n          Ok(\"Your generated product id: \" + User.generateId);\n        }\n    ```", "```java\n    GET     /generate-product-id       controllers.Application.generateProductId()\n        GET     /generate-user-id          controllers.Application.generateUserId()\n    ```", "```java\n    <span class=\"strong\"><strong>    $ curl http://localhost:9000/generate-product-id</strong></span>\n    <span class=\"strong\"><strong>Your generated product id: 3acd3f36-6ee6-45ce-af07-faa257724b1e%                </strong></span>\n    <span class=\"strong\"><strong>    $ curl http://localhost:9000/generate-user-id</strong></span>\n    <span class=\"strong\"><strong>Your generated product id: ffca654e-35d8-48cd-9acd-9ea9fe567ba7%</strong></span>\n    ```", "```java\nlibraryDependencies ++= Seq(\n      \"foojava\" %% \"product-contrib\" % \"1.0-SNAPSHOT\",\n      \"fooscala\" %% \"user-contrib\" % \"1.0-SNAPSHOT\"\n    )\n```", "```java\n// Java\n    import productcontrib.services.ProductService;\n    import productcontrib.services.ProductServiceImpl;\n    import usercontrib.models.User;\n     // Invoke the contrib functions in foo_java\n    return ok(\"Your generated product id: \" + productService.generateProductId());\n    return ok(\"Your generated product id: \" + User.generateId());\n\n     // Scala\n    import productcontrib.services.{ProductServiceImpl, ProductService}\n    import usercontrib.models.User\n     // Invoke the contrib functions in foo_scala:\n    Ok(\"Your generated product id: \" + productService.generateProductId())\n    Ok(\"Your generated product id: \" + User.generateId);\n```", "```java\n    <span class=\"strong\"><strong>    activator \"~run\"</strong></span>\n    ```", "```java\n    resolvers += \"Era7 maven releases\" at \"http://releases.era7.com.s3.amazonaws.com\"\n         addSbtPlugin(\"ohnosequences\" % \"sbt-s3-resolver\" % \"0.12.0\")\n    ```", "```java\n    S3Resolver.defaults\n         s3credentials := file(System.getProperty(\"user.home\")) / \".sbt\" / \".s3credentials\"\n         publishMavenStyle := false\n         publishTo := {\n          val prefix = if (isSnapshot.value) \"snapshots\" else \"releases\"\n          Some(s3resolver.value(prefix+\" S3 bucket\",     s3(prefix+\".YOUR-S3-BUCKET-NAME-HERE.amazonaws.com\")) withIvyPatterns)\n        }\n    ```", "```java\n    accessKey = &lt;YOUR S3 API ACCESS KEY&gt;\n        secretKey = &lt;YOUR S3 API SECRET KEY&gt;\n    ```", "```java\n    <span class=\"strong\"><strong>    activator clean publish</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    [info]   published ivy to s3://snapshots.XXX.XXX.amazonaws.com/foojava/product-contrib_2.11/1.0-SNAPSHOT/ivys/ivy.xml</strong></span>\n    <span class=\"strong\"><strong>    [success] Total time: 58 s, completed 02 3, 15 9:39:44 PM</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    activator new s3deps play-scala</strong></span>\n    ```", "```java\n    resolvers += \"Era7 maven releases\" at \"http://releases.era7.com.s3.amazonaws.com\"\n        addSbtPlugin(\"ohnosequences\" % \"sbt-s3-resolver\" % \"0.12.0\")\n    ```", "```java\n    S3Resolver.defaults\n         resolvers ++= Seq[Resolver](\n          s3resolver.value(\"Snapshots resolver\", s3(\"YOUR-S3-BUCKET-NAME-HERE.amazonaws.com\")) withIvyPatterns\n        )\n         libraryDependencies ++= Seq(\n          \"foojava\" %% \"product-contrib\" % \"1.0-SNAPSHOT\"\n        )\n    ```", "```java\n    activator clean dependencies\n       ...\n        com.typesafe.play:play-java-ws_2.11:2.3.7\n        com.typesafe.play:play-java-jdbc_2.11:2.3.7\n        foojava:product-contrib_2.11:1.0-SNAPSHOT\n    ```", "```java\nresolvers += \"Era7 maven releases\" at \"http://releases.era7.com.s3.amazonaws.com\"\n     addSbtPlugin(\"ohnosequences\" % \"sbt-s3-resolver\" % \"0.12.0\")\n```", "```java\naccessKey = &lt;ACCESS KEY&gt;\n    secretKey = &lt;SECRET KEY&gt;\n```", "```java\nS3Resolver.defaults\n     s3credentials := file(System.getProperty(\"user.home\")) / \".sbt\" / \".s3credentials\"\n     publishMavenStyle := false\n     publishTo := {\n      val prefix = if (isSnapshot.value) \"snapshots\" else \"releases\"\n      Some(s3resolver.value(prefix+\" S3 bucket\",     s3(prefix+\".achiiva.devint.amazonaws.com\")) withIvyPatterns)\n    }\n```", "```java\nS3Resolver.defaults\n     resolvers ++= Seq[Resolver](\n  s3resolver.value(\"Snapshots resolver\", s3(\"YOUR-S3-BUCKET-NAME-HERE.amazonaws.com\")) withIvyPatterns\n    )\n     libraryDependencies ++= Seq(\n      \"foojava\" %% \"product-contrib\" % \"1.0-SNAPSHOT\"\n    )\n```"]