["```java\n    @Test\n    ```", "```java\n    public void oneCorrectLetter() {\n    ```", "```java\n       var word = new Word(\"A\");\n    ```", "```java\n       var score = word.guess(\"A\");\n    ```", "```java\n       assertThat(score.letter(0))\n    ```", "```java\n          .isEqualTo(Letter.CORRECT);\n    ```", "```java\n    }\n    ```", "```java\n    public class Word {\n    ```", "```java\n        private final String word;\n    ```", "```java\n        public Word(String correctWord) {\n    ```", "```java\n            this.word = correctWord;\n    ```", "```java\n        }\n    ```", "```java\n        public Score guess(String attempt) {\n    ```", "```java\n            var score = new Score(word);\n    ```", "```java\n            score.assess( 0, attempt );\n    ```", "```java\n            return score;\n    ```", "```java\n        }\n    ```", "```java\n    }\n    ```", "```java\npublic class Score {\n    private final String correct;\n    private Letter result = Letter.INCORRECT ;\n    public Score(String correct) {\n        this.correct = correct;\n    }\n    public Letter letter(int position) {\n        return result;\n    }\n    public void assess(int position, String attempt) {\n        if ( correct.charAt(position) == attempt.            charAt(position)){\n            result = Letter.CORRECT;\n        }\n    }\n}\n```", "```java\n    public void assess(int position, String attempt) {\n    ```", "```java\n        if (isCorrectLetter(position, attempt)){\n    ```", "```java\n            result = Letter.CORRECT;\n    ```", "```java\n        }\n    ```", "```java\n    }\n    ```", "```java\n    private boolean isCorrectLetter(int position,\n    ```", "```java\n                                    String attempt) {\n    ```", "```java\n        return correct.charAt(position) ==\n    ```", "```java\n               attempt.charAt(position);\n    ```", "```java\n    }\n    ```", "```java\n@Test\npublic void oneCorrectLetter() {\n    var word = new Word(\"A\");\n    var score = word.guess(\"A\");\n    assertScoreForLetter(score, 0, Letter.CORRECT);\n}\nprivate void assertScoreForLetter(Score score,\n                  int position, Letter expected) {\n    assertThat(score.letter(position))\n          .isEqualTo(expected);\n}\n```", "```java\n    public class Score {\n    ```", "```java\n        private final String correct;\n    ```", "```java\n        private Letter result = Letter.INCORRECT ;\n    ```", "```java\n        private int position;\n    ```", "```java\n        public Score(String correct) {\n    ```", "```java\n            this.correct = correct;\n    ```", "```java\n        }\n    ```", "```java\n        public Letter letter(int position) {\n    ```", "```java\n            return result;\n    ```", "```java\n        }\n    ```", "```java\n        public void assess(String attempt) {\n    ```", "```java\n            if (isCorrectLetter(attempt)){\n    ```", "```java\n                result = Letter.CORRECT;\n    ```", "```java\n            }\n    ```", "```java\n        }\n    ```", "```java\n        private boolean isCorrectLetter(String attempt) {\n    ```", "```java\n            return correct.charAt(position) == attempt.        charAt(position);\n    ```", "```java\n        }\n    ```", "```java\n    }\n    ```", "```java\n    @Test\n    ```", "```java\n    void secondLetterWrongPosition() {\n    ```", "```java\n        var word = new Word(\"AR\");\n    ```", "```java\n        var score = word.guess(\"ZA\");\n    ```", "```java\n        assertScoreForLetter(score, 1,\n    ```", "```java\n                             Letter.PART_CORRECT);\n    ```", "```java\n    }\n    ```", "```java\n    public void assess(String attempt) {\n    ```", "```java\n        for (char current: attempt.toCharArray()) {\n    ```", "```java\n            if (isCorrectLetter(current)) {\n    ```", "```java\n                result = Letter.CORRECT;\n    ```", "```java\n            }\n    ```", "```java\n        }\n    ```", "```java\n    }\n    ```", "```java\n    private boolean isCorrectLetter(char currentLetter) {\n    ```", "```java\n        return correct.charAt(position) == currentLetter;\n    ```", "```java\n    }\n    ```", "```java\n    public void assess(String attempt) {\n    ```", "```java\n        for (char current: attempt.toCharArray()) {\n    ```", "```java\n            if (isCorrectLetter(current)) {\n    ```", "```java\n                result = Letter.CORRECT;\n    ```", "```java\n            } else if (occursInWord(current)) {\n    ```", "```java\n                result = Letter.PART_CORRECT;\n    ```", "```java\n            }\n    ```", "```java\n        }\n    ```", "```java\n    }\n    ```", "```java\n        private boolean occursInWord(char current) {\n    ```", "```java\n            return\n    ```", "```java\n              correct.contains(String.valueOf(current));\n    ```", "```java\n        }\n    ```", "```java\n    @Test\n    ```", "```java\n    void allScoreCombinations() {\n    ```", "```java\n        var word = new Word(\"ARI\");\n    ```", "```java\n        var score = word.guess(\"ZAI\");\n    ```", "```java\n        assertScoreForLetter(score, 0, Letter.INCORRECT);\n    ```", "```java\n        assertScoreForLetter(score, 1,\n    ```", "```java\n                             Letter.PART_CORRECT);\n    ```", "```java\n        assertScoreForLetter(score, 2, Letter.CORRECT);\n    ```", "```java\n    }\n    ```", "```java\n    public class Score {\n    ```", "```java\n        private final String correct;\n    ```", "```java\n        private final List<Letter> results =\n    ```", "```java\n                                 new ArrayList<>();\n    ```", "```java\n        private int position;\n    ```", "```java\n        public Score(String correct) {\n    ```", "```java\n            this.correct = correct;\n    ```", "```java\n        }\n    ```", "```java\n        public Letter letter(int position) {\n    ```", "```java\n            return results.get(position);\n    ```", "```java\n        }\n    ```", "```java\n        public void assess(String attempt) {\n    ```", "```java\n            for (char current: attempt.toCharArray()) {\n    ```", "```java\n                if (isCorrectLetter(current)) {\n    ```", "```java\n                    results.add(Letter.CORRECT);\n    ```", "```java\n                } else if (occursInWord(current)) {\n    ```", "```java\n    results.add(Letter.PART_CORRECT);\n    ```", "```java\n                } else {\n    ```", "```java\n                    results.add(Letter.INCORRECT);\n    ```", "```java\n                }\n    ```", "```java\n                position++;\n    ```", "```java\n            }\n    ```", "```java\n        }\n    ```", "```java\n        private boolean occursInWord(char current) {\n    ```", "```java\n            return\n    ```", "```java\n             correct.contains(String.valueOf(current));\n    ```", "```java\n        }\n    ```", "```java\n        private boolean isCorrectLetter(char\n    ```", "```java\n          currentLetter) {\n    ```", "```java\n            return correct.charAt(position) ==\n    ```", "```java\n                     currentLetter;\n    ```", "```java\n        }\n    ```", "```java\n    }\n    ```", "```java\n    public void assess(String attempt) {\n    ```", "```java\n        for (char current: attempt.toCharArray()) {\n    ```", "```java\n            results.add( scoreFor(current) );\n    ```", "```java\n            position++;\n    ```", "```java\n        }\n    ```", "```java\n    }\n    ```", "```java\n    private Letter scoreFor(char current) {\n    ```", "```java\n        if (isCorrectLetter(current)) {\n    ```", "```java\n            return Letter.CORRECT;\n    ```", "```java\n        }\n    ```", "```java\n        if (occursInWord(current)) {\n    ```", "```java\n            return Letter.PART_CORRECT;\n    ```", "```java\n        }\n    ```", "```java\n        return Letter.INCORRECT;\n    ```", "```java\n    }\n    ```", "```java\n    @Test\n    ```", "```java\n    void allScoreCombinations() {\n    ```", "```java\n        var word = new Word(\"ARI\");\n    ```", "```java\n        var score = word.guess(\"ZAI\");\n    ```", "```java\n        assertScoreForGuess(score, INCORRECT,\n    ```", "```java\n                                   PART_CORRECT,\n    ```", "```java\n                                   CORRECT);\n    ```", "```java\n    }\n    ```", "```java\n    private void assertScoreForGuess(Score score, Letter…\n    ```", "```java\n        for (int position=0;\n    ```", "```java\n                 position < expectedScores.length;\n    ```", "```java\n                 position++){\n    ```", "```java\n            Letter expected = expectedScores[position];\n    ```", "```java\n            assertThat(score.letter(position))\n    ```", "```java\n                .isEqualTo(expected);\n    ```", "```java\n        }\n    ```", "```java\n    }\n    ```", "```java\n    package com.wordz.domain;\n    ```", "```java\n    import org.junit.jupiter.api.Test;\n    ```", "```java\n    import static com.wordz.domain.Letter.*;\n    ```", "```java\n    import static org.assertj.core.api.Assertions.assertThat;\n    ```", "```java\n    public class WordTest {\n    ```", "```java\n        @Test\n    ```", "```java\n        public void oneIncorrectLetter() {\n    ```", "```java\n            var word = new Word(\"A\");\n    ```", "```java\n            var score = word.guess(\"Z\");\n    ```", "```java\n            assertScoreForGuess(score, INCORRECT);\n    ```", "```java\n        }\n    ```", "```java\n        @Test\n    ```", "```java\n        public void oneCorrectLetter() {\n    ```", "```java\n            var word = new Word(\"A\");\n    ```", "```java\n            var score = word.guess(\"A\");\n    ```", "```java\n            assertScoreForGuess(score, CORRECT);\n    ```", "```java\n        }\n    ```", "```java\n        @Test\n    ```", "```java\n        public void secondLetterWrongPosition() {\n    ```", "```java\n            var word = new Word(\"AR\");\n    ```", "```java\n            var score = word.guess(\"ZA\");\n    ```", "```java\n            assertScoreForGuess(score,  INCORRECT,\n    ```", "```java\n                                        PART_CORRECT);\n    ```", "```java\n        }\n    ```", "```java\n        @Test\n    ```", "```java\n        public void allScoreCombinations() {\n    ```", "```java\n            var word = new Word(\"ARI\");\n    ```", "```java\n            var score = word.guess(\"ZAI\");\n    ```", "```java\n            assertScoreForGuess(score,  INCORRECT,\n    ```", "```java\n                                        PART_CORRECT,\n    ```", "```java\n                                        CORRECT);\n    ```", "```java\n        }\n    ```", "```java\n        private void assertScoreForGuess(Score score,\n    ```", "```java\n            Letter... expectedScores) {\n    ```", "```java\n            for (int position = 0;\n    ```", "```java\n                  position < expectedScores.length;\n    ```", "```java\n                  position++) {\n    ```", "```java\n                Letter expected =\n    ```", "```java\n                        expectedScores[position];\n    ```", "```java\n                assertThat(score.letter(position))\n    ```", "```java\n                        .isEqualTo(expected);\n    ```", "```java\n            }\n    ```", "```java\n        }\n    ```", "```java\n    }\n    ```"]