- en: Chapter 7. Best Practices
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。最佳实践
- en: 'In this book, so far, we discussed most of the key concepts related to Maven.
    In this chapter, we will focus on best practices associated with all of these
    core concepts. The following best practices constitute an essential ingredient
    in creating a successful and productive build environment. The criteria listed
    here will help you to evaluate the efficiency of your Maven project, mostly if
    you are dealing with a large-scale multi-module project:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，到目前为止，我们讨论了与Maven相关的多数关键概念。在本章中，我们将重点关注与所有这些核心概念相关的最佳实践。以下最佳实践是创建一个成功且高效的构建环境的基本要素。以下标准将帮助您评估您的Maven项目的效率，尤其是如果您正在处理一个大规模的多模块项目：
- en: The time taken by a developer to get started with a new project and add it to
    the build system
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者开始新项目并添加到构建系统所需的时间
- en: The effort required to upgrade a version of a dependency across all the project
    modules
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 升级项目所有模块中依赖项版本所需的努力
- en: The time taken to build the complete project with a fresh local Maven repository
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用全新的本地Maven仓库构建完整项目所需的时间
- en: The time taken to do a complete offline build
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完全离线构建所需的时间
- en: The time taken to update the versions of Maven artifacts produced by the project;
    for example, from 1.0.0-SNAPSHOT to 1.0.0
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新项目生成的Maven工件版本所需的时间；例如，从1.0.0-SNAPSHOT到1.0.0
- en: The effort required for a completely new developer to understand what your Maven
    build does
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完全新的开发者理解您的Maven构建做什么所需的时间
- en: The effort required to introduce a new Maven repository
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引入新的Maven仓库所需的努力
- en: The time taken to execute unit tests and integration tests
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行单元测试和集成测试所需的时间
- en: The rest of the chapter talks about 25 industry-accepted best practices that
    would help you to improve developer productivity and reduce any maintenance nightmares.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的其余部分将讨论25个行业公认的最佳实践，这些实践将帮助您提高开发者的生产力并减少任何维护噩梦。
- en: Dependency management
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 依赖项管理
- en: 'In the following example, you will notice that the dependency versions are
    added to each and every dependency defined in the application POM file:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，您会注意到依赖项版本被添加到应用POM文件中定义的每个依赖项：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Imagine you have a set of application POM files in a multi-module project having
    the same set of dependencies. If you have duplicated the artifact version with
    each and every dependency, then to upgrade to the latest dependency you need to
    update all the POM files, which can easily lead to a mess.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您在一个多模块项目中有一组具有相同依赖项集的应用POM文件。如果您在每个依赖项中都重复了工件版本，那么要升级到最新依赖项，您需要更新所有POM文件，这很容易导致混乱。
- en: Not just that, if you have different versions of the same dependency used in
    different modules of the same project, then it's going to be a debugging nightmare
    in the case of an issue.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅如此，如果您在同一个项目的不同模块中使用不同版本的相同依赖项，那么在出现问题时，调试将变成一场噩梦。
- en: 'With `dependencyManagement`, we can overcome both these issues. If it''s a
    multi-module Maven project, you need to introduce `dependencyManagement` in the
    parent POM, so it will be inherited by all the other child modules:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`dependencyManagement`，我们可以克服这两个问题。如果是一个多模块Maven项目，您需要在父POM中引入`dependencyManagement`，这样它就会被所有其他子模块继承：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once you define `dependencies` under the `dependencyManagement` section, as
    shown in the preceding code, you only need to refer a `dependency` from its `groupId`
    and the `artifactId` elements. The `version` element is picked from the appropriate
    `dependencyManagement` section:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦在`dependencyManagement`部分下定义了`dependencies`，如前述代码所示，您只需引用`groupId`和`artifactId`元素中的`dependency`。`version`元素从相应的`dependencyManagement`部分中选取：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: With this, if you want to upgrade or downgrade a dependency, you only need to
    change the dependency version under the `dependencyManagement` section.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种方式，如果您想升级或降级一个依赖项，您只需更改`dependencyManagement`部分下的依赖项版本。
- en: 'The same principle applies to plugins as well. If you have a set of plugins,
    which are used across multiple modules, you should define them under the `pluginManagement`
    section of the parent module. In this way, you can downgrade or upgrade plugin
    versions seamlessly just by changing the `pluginManagement` section of the parent
    POM, as shown in the following code:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的原则也适用于插件。如果您有一组在多个模块中使用的插件，您应该在父模块的`pluginManagement`部分中定义它们。这样，您只需更改父POM中的`pluginManagement`部分，就可以无缝地降级或升级插件版本，如下述代码所示：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Once you define the plugins in the plugin management section, as shown in the
    preceding code, you only need to refer a plugin from its `groupId` (optional)
    and `artifactId` elements. The version is picked from the appropriate `pluginManagement`
    section:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你在插件管理部分定义了插件，如前述代码所示，你只需引用其`groupId`（可选）和`artifactId`元素即可。版本从适当的`pluginManagement`部分选择：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Maven plugins were discussed in detail in [Chapter 4](ch04.html "Chapter 4. Maven
    Plugins"), *Maven Plugins*.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](ch04.html "第4章。Maven插件")*Maven插件*中详细讨论了Maven插件。
- en: Defining a parent module
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义父模块
- en: In most of the multi-module Maven projects, there are many things that are shared
    across multiple modules. Dependency versions, plugin versions, properties, and
    repositories are only some of them. It is a common (and a best) practice to create
    a separate module called `parent` and define everything in common in its POM file.
    The packaging type of this POM file is `pom`. The artifact generated by the `pom`
    packaging type is itself a POM file.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数多模块Maven项目中，有许多东西是在多个模块之间共享的。依赖版本、插件版本、属性和仓库只是其中的一部分。创建一个名为`parent`的单独模块并在其POM文件中定义所有公共内容是一种常见的（也是最佳）实践。此POM文件的打包类型为`pom`。由`pom`打包类型生成的工件本身就是一个POM文件。
- en: 'The following are few examples of Maven parent modules:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些Maven父模块的示例：
- en: '**Apache Axis2 project**: [http://svn.apache.org/repos/asf/axis/axis2/java/core/trunk/modules/parent/](http://svn.apache.org/repos/asf/axis/axis2/java/core/trunk/modules/parent/)'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Apache Axis2项目**: [http://svn.apache.org/repos/asf/axis/axis2/java/core/trunk/modules/parent/](http://svn.apache.org/repos/asf/axis/axis2/java/core/trunk/modules/parent/)'
- en: '**WSO2 Carbon project**: [https://svn.wso2.org/repos/wso2/carbon/platform/trunk/parent/](https://svn.wso2.org/repos/wso2/carbon/platform/trunk/parent/)'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WSO2 Carbon项目**: [https://svn.wso2.org/repos/wso2/carbon/platform/trunk/parent/](https://svn.wso2.org/repos/wso2/carbon/platform/trunk/parent/)'
- en: 'Not all the projects follow this approach. Some just keep the parent POM file
    under the root directory (not under the `parent` module). The following are a
    couple of examples:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有项目都遵循这种方法。有些项目只是将父POM文件放在根目录下（而不是在`parent`模块下）。以下是一些示例：
- en: '**Apache Synapse project**: [http://svn.apache.org/repos/asf/synapse/trunk/java/pom.xml](http://svn.apache.org/repos/asf/synapse/trunk/java/pom.xml)'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Apache Synapse项目**: [http://svn.apache.org/repos/asf/synapse/trunk/java/pom.xml](http://svn.apache.org/repos/asf/synapse/trunk/java/pom.xml)'
- en: '**Apache HBase project**: [http://svn.apache.org/repos/asf/hbase/trunk/pom.xml](http://svn.apache.org/repos/asf/hbase/trunk/pom.xml)'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Apache HBase项目**: [http://svn.apache.org/repos/asf/hbase/trunk/pom.xml](http://svn.apache.org/repos/asf/hbase/trunk/pom.xml)'
- en: Both the approaches deliver the same results, yet the first one is much preferred.
    With the first approach, the parent POM file only defines the shared resources
    across different Maven modules in the project while there is another POM file
    at the root of the project, which defines all the modules to be included in the
    project build. With the second approach, you define all the shared resources as
    well as all the modules to be included in the project build in the same POM file,
    which is under the project root directory. The first approach is better than the
    second one, based on the *separation of concerns* principle.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种方法都能达到相同的结果，但第一种方法更受欢迎。在第一种方法中，父POM文件仅定义了项目内不同Maven模块之间的共享资源，同时在项目根目录下还有一个POM文件，它定义了要包含在项目构建中的所有模块。在第二种方法中，你将在项目根目录下的同一个POM文件中定义所有共享资源以及要包含在项目构建中的所有模块。基于*关注点分离*原则，第一种方法比第二种方法更好。
- en: POM properties
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: POM属性
- en: 'There are six types of properties that you can use within a Maven application
    POM file:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在Maven应用POM文件中使用六种类型的属性：
- en: Built-in properties
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内置属性
- en: Project properties
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目属性
- en: Local settings
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地设置
- en: Environmental variables
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 环境变量
- en: Java system properties
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java系统属性
- en: Custom properties
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义属性
- en: It is always recommended that you use properties instead of hardcoding values
    in application POM files. Let's see a few examples.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 始终建议你在应用POM文件中使用属性而不是硬编码值。让我们看看几个例子。
- en: 'Let''s consider the example of the application POM file inside the Apache Axis2
    distribution module, which is available at [http://svn.apache.org/repos/asf/axis/axis2/java/core/trunk/modules/distribution/pom.xml](http://svn.apache.org/repos/asf/axis/axis2/java/core/trunk/modules/distribution/pom.xml).
    This defines all the artifacts created in the Axis2 project that need to be included
    in the final distribution. All the artifacts share the same `groupId` element
    as well as the `version` elements of the `distribution` module. This is a common
    scenario in most of the multimodule Maven projects. Most of the modules (if not
    all) share the same `groupId` and the `version` elements:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑Apache Axis2分发模块中的应用POM文件示例，该模块可在[http://svn.apache.org/repos/asf/axis/axis2/java/core/trunk/modules/distribution/pom.xml](http://svn.apache.org/repos/asf/axis/axis2/java/core/trunk/modules/distribution/pom.xml)找到。这定义了需要在最终分发中包含的Axis2项目中创建的所有工件。所有工件都共享相同的`groupId`元素以及`distribution`模块的`version`元素。这在大多数多模块Maven项目中是一个常见的场景。大多数模块（如果不是所有模块）都共享相同的`groupId`和`version`元素：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the preceding configuration, instead of duplicating the `version` element,
    Axis2 uses the project property `${project.version}`. When Maven finds this project
    property, it reads the value from the project POM `version` element. If the project
    POM file does not have a `version` element, then Maven will try to read it from
    the immediate parent POM file. The benefit here is, when you upgrade your project
    version some day, you only need to upgrade the `version` element of the `distribution`
    POM file (or its parent).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的配置中，Axis2不是重复`version`元素，而是使用项目属性`${project.version}`。当Maven发现这个项目属性时，它会从项目POM的`version`元素中读取值。如果项目POM文件没有`version`元素，那么Maven将尝试从直接父POM文件中读取它。这里的优点是，当有一天你升级项目版本时，你只需要升级`distribution`
    POM文件的`version`元素（或其父元素）。
- en: 'The preceding configuration is not perfect; it can be further improved as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的配置并不完美；它可以进一步改进如下：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, we also replace the hardcoded value of the `groupId` element in all the
    dependencies with the project property `${project.groupid}`. When Maven finds
    this project property, it reads the value from the project POM `groupId` element.
    In case the project POM file does not have a `groupId` element, then Maven will
    try to read it from the immediate parent POM file.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们还用项目属性`${project.groupid}`替换了所有依赖项中硬编码的`groupId`元素值。当Maven发现这个项目属性时，它会从项目POM的`groupId`元素中读取值。如果项目POM文件没有`groupId`元素，那么Maven将尝试从直接父POM文件中读取它。
- en: 'Here is a list of some of the built-in properties and project properties of
    Maven:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这里列出了Maven的一些内置属性和项目属性：
- en: '`project.version`: This refers to the value of the `version` element of the
    project POM file'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`project.version`：这指的是项目POM文件中`version`元素的值'
- en: '`project.groupId`: This refers to the value of the `groupId` element of the
    project POM file'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`project.groupId`：这指的是项目POM文件中`groupId`元素的值'
- en: '`project.artifactId`: This refers to the value of the `artifactId` element
    of the project POM file'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`project.artifactId`：这指的是项目POM文件中`artifactId`元素的值'
- en: '`project.name`: This refers to the value of the `name` element of the project
    POM file'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`project.name`：这指的是项目POM文件中`name`元素的值'
- en: '`project.description`: This refers to the value of the `description` element
    of the project POM file'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`project.description`：这指的是项目POM文件中`description`元素的值'
- en: '`project.basedir`: This refers to the path of the project''s base directory'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`project.basedir`：这指的是项目基本目录的路径'
- en: 'The following is an example, which shows the usage of this project property.
    Here, we have a system dependency, which needs to be referred from a file `system`
    path:'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是一个示例，展示了这个项目属性的用法。在这里，我们有一个系统依赖，需要从文件`system`路径中引用：
- en: '[PRE7]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In addition to the project properties, you can also read properties from the
    `USER_HOME/.m2/settings.xml` file. For example, if you want to read the path to
    the local Maven repository, you can use the property, `${settings.localRepository}`.
    In the same way, with the same pattern, you can read any of the configuration
    elements, which are defined in the `settings.xml` file.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 除了项目属性之外，你还可以从`USER_HOME/.m2/settings.xml`文件中读取属性。例如，如果你想读取本地Maven仓库的路径，你可以使用属性`${settings.localRepository}`。同样，使用相同的模式，你可以读取`settings.xml`文件中定义的任何配置元素。
- en: The environment variables defined in the system can be read using the `env`
    prefix within an application POM file. The `${env.M2_HOME}` property will return
    the path to Maven home, while `${env.java_home}` returns the path to the Java
    home directory. These properties will be quite useful within certain Maven plugins.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在系统定义的环境变量可以使用应用程序 POM 文件中的 `env` 前缀读取。`${env.M2_HOME}` 属性将返回 Maven 主目录的路径，而
    `${env.java_home}` 返回 Java 主目录的路径。这些属性在特定的 Maven 插件中非常有用。
- en: Maven also lets you define your own set of custom properties. Custom properties
    are mostly used when defining dependency versions.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 还允许你定义自己的自定义属性集。自定义属性主要用于定义依赖项版本。
- en: You should not scatter custom properties all over the places. An ideal place
    to define them is the parent POM file in a multimodule Maven project, which will
    then be inherited by all the other child modules.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你不应该将自定义属性散布在各个地方。在多模块 Maven 项目中定义它们的理想位置是父 POM 文件，然后所有其他子模块将继承这些属性。
- en: 'If you look at the parent POM file of the WSO2 Carbon project, you will find
    a large set of custom properties is defined ([https://svn.wso2.org/repos/wso2/carbon/platform/branches/turing/parent/pom.xml](https://svn.wso2.org/repos/wso2/carbon/platform/branches/turing/parent/pom.xml)).
    The following block of code contains some of those custom properties:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看 WSO2 Carbon 项目的父 POM 文件，你会找到一个大量自定义属性的定义（[https://svn.wso2.org/repos/wso2/carbon/platform/branches/turing/parent/pom.xml](https://svn.wso2.org/repos/wso2/carbon/platform/branches/turing/parent/pom.xml)）。以下代码块包含了一些这些自定义属性：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'When you add a dependency to the Rampart jar, you do not need to specify the
    version there. Just refer it by the `${rampart.version}` property name. Also,
    keep in mind that all the custom-defined properties are inherited and can be overridden
    in any child POM file:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当你向 Rampart jar 添加依赖项时，你不需要在那里指定版本。只需通过 `${rampart.version}` 属性名称引用它。此外，请记住，所有自定义定义的属性都是继承的，并且可以在任何子
    POM 文件中覆盖：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Avoiding repetitive groupIds and versions, and inheriting from the parent POM
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 避免重复的 groupIds 和版本，并从父 POM 继承
- en: In a multimodule Maven project, most of the modules (if not all) share the same
    `groupId` and the `version` elements. In that case, you can avoid adding `version`
    and `groupId` elements to your application POM file, as those will be automatically
    inherited from the corresponding parent POM.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个多模块 Maven 项目中，大多数模块（如果不是所有模块）共享相同的 `groupId` 和 `version` 元素。在这种情况下，你可以避免在你的应用程序
    POM 文件中添加 `version` 和 `groupId` 元素，因为这些将自动从相应的父 POM 继承。
- en: 'If you look at `axis2-kernel` (which is a module of the Apache Axis2 project),
    you will find that no `groupId` or a `version` element is defined: ([http://svn.apache.org/repos/asf/axis/axis2/java/core/trunk/modules/kernel/pom.xml](http://svn.apache.org/repos/asf/axis/axis2/java/core/trunk/modules/kernel/pom.xml)).
    Maven reads them from the parent POM file:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看 `axis2-kernel`（它是 Apache Axis2 项目的模块），你会发现没有定义 `groupId` 或 `version` 元素：（[http://svn.apache.org/repos/asf/axis/axis2/java/core/trunk/modules/kernel/pom.xml](http://svn.apache.org/repos/asf/axis/axis2/java/core/trunk/modules/kernel/pom.xml)）。Maven
    从父 POM 文件中读取它们：
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Following naming conventions
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 遵循命名约定
- en: When defining coordinates for your Maven project, you must always follow the
    naming conventions.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当定义你的 Maven 项目的坐标时，你必须始终遵循命名约定。
- en: The value of the `groupId` element should follow the same naming convention
    you use in Java package names. It has to be a domain name (the reverse of the
    domain name) that you own—or at least that your project is developed under.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`groupId` 元素的值应该遵循你在 Java 包名称中使用的相同命名约定。它必须是一个域名（域名的反转）——你拥有它——或者至少你的项目是在其下开发的。'
- en: 'The following list covers some of the `groupId` naming conventions:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表涵盖了部分 `groupId` 命名约定：
- en: The name of the `groupId` element has to be in lower case.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`groupId` 元素的名称必须是小写。'
- en: Use the reverse of a domain name that can be used to uniquely identify your
    project. This will also help to avoid collisions between artifacts produced by
    different projects.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用可以唯一标识你的项目的域名反转。这也有助于避免不同项目产生的工件之间的冲突。
- en: Avoid using digits or special characters (for example, `org.wso2.carbon.identity-core`).
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免使用数字或特殊字符（例如，`org.wso2.carbon.identity-core`）。
- en: Do not try to group two words into a single word by camel casing (for example,
    `org.wso2.carbon.identityCore`).
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要尝试通过驼峰式命名将两个单词组合成一个单词（例如，`org.wso2.carbon.identityCore`）。
- en: Ensure that all the subprojects developed under different teams in the same
    company finally inherit from the same `groupId` and extend the name of the parent
    `groupId` rather than defining their own.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保同一公司内不同团队开发的子项目最终都继承自相同的`groupId`，并扩展父`groupId`的名称，而不是定义自己的。
- en: 'Let''s go through some examples. You will notice that all the open source projects
    developed under **Apache** **Software Foundation** (**ASF**) use the same parent
    `groupId` (`org.apache`) and define their own `groupId`, which extends from the
    parent:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一些例子来了解一下。你会注意到，所有在**Apache软件基金会**（**ASF**）下开发的开源项目都使用相同的父`groupId`（`org.apache`）并定义自己的`groupId`，该`groupId`从父`groupId`扩展而来：
- en: '**Apache Axis2 project**: `org.apache.axis2`, which inherits from the `org.apache`
    parent `groupId`'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Apache Axis2项目**：`org.apache.axis2`，继承自父`groupId` `org.apache`'
- en: '**Apache Synapse project**: `org.apache.synapse`, which inherits from the `org.apache`
    parent `groupId`'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Apache Synapse项目**：`org.apache.synapse`，继承自父`groupId` `org.apache`'
- en: '**Apache ServiceMix project**: `org.apache.servicemix`, which inherits from
    the `org.apache` parent `groupId`'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Apache ServiceMix项目**：`org.apache.servicemix`，继承自父`groupId` `org.apache`'
- en: '**WSO2 Carbon project**: `org.wso2.carbon`'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WSO2 Carbon项目**：`org.wso2.carbon`'
- en: Apart from the `groupId`, you should also follow the naming conventions while
    defining `artifactIds`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`groupId`之外，在定义`artifactIds`时也应遵循命名规范。
- en: 'The following lists out some of the `artifactId` naming conventions:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的列表列出了一些`artifactId`的命名规范：
- en: The name of the `artifactId` has to be in lower case.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`artifactId`的名称必须全部小写。'
- en: Avoid duplicating the value of `groupId` inside the `artifactId`. If you find
    a need to start your `artifactId` element with the `groupId` element and add something
    to the end, then you need to revisit the structure of your project. You may need
    to add more module groups.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免在`artifactId`内部重复`groupId`的值。如果你发现需要在`artifactId`元素的开头使用`groupId`元素并在末尾添加一些内容，那么你需要重新审视你的项目结构。你可能需要添加更多的模块组。
- en: 'Avoid using special characters (for example, #, $, &, %).'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免使用特殊字符（例如，#、$、&、%）。
- en: Do not try to group two words into a single word by camel casing (for example,
    identityCore).
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要尝试通过驼峰命名法将两个单词组合成一个单词（例如，identityCore）。
- en: 'The following naming conventions for `version` are also equally important.
    The version of a given Maven artifact can be divided into four parts:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 以下`version`的命名规范同样重要。给定Maven艺术品的版本可以分成四个部分：
- en: '[PRE11]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The major version reflects the introduction of a new major feature. A change
    in the major version of a given artifact could also mean that the new changes
    are not necessarily backward compatible with the previously released artifact.
    The minor version reflects an introduction of a new feature to the previously
    released version in a backward compatible manner. The incremental version reflects
    a bug fixed release of the artifact. The build number can be the revision number
    from the source code repository.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 主版本号反映了新主要功能的引入。给定艺术品的版本号的变化也可能意味着新更改不一定与之前发布的艺术品向后兼容。次版本号以向后兼容的方式反映了在之前发布的版本中引入的新功能。增量版本反映了修复错误的版本。构建号可以是源代码仓库的修订号。
- en: 'This versioning convention is not just for Maven artifacts. Apple did a major
    release of its iOS mobile operating system in September 2014: iOS 8.0.0\. Soon
    after the release, they discovered a critical bug in it that had an impact on
    cellular network connectivity and the TouchID on the iPhone. Then they released
    iOS 8.0.1 as a patch release to fix the issues.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这种版本规范不仅适用于Maven艺术品。苹果在2014年9月发布了一个iOS移动操作系统的重大版本：iOS 8.0.0。发布后不久，他们发现了一个影响蜂窝网络连接和iPhone的TouchID的严重错误。然后他们发布了iOS
    8.0.1作为补丁版本来修复这些问题。
- en: 'Let''s go through some examples:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一些例子来了解一下：
- en: '**Apache Axis2 1.6.0 release**: [http://svn.apache.org/repos/asf/axis/axis2/java/core/tags/v1.6.0/pom.xml](http://svn.apache.org/repos/asf/axis/axis2/java/core/tags/v1.6.0/pom.xml).'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Apache Axis2 1.6.0版本发布**：[http://svn.apache.org/repos/asf/axis/axis2/java/core/tags/v1.6.0/pom.xml](http://svn.apache.org/repos/asf/axis/axis2/java/core/tags/v1.6.0/pom.xml)。'
- en: '**Apache** **Axis2 1.6.2 release**: [http://svn.apache.org/repos/asf/axis/axis2/java/core/tags/v1.6.2/pom.xml](http://svn.apache.org/repos/asf/axis/axis2/java/core/tags/v1.6.2/pom.xml).'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Apache Axis2 1.6.2版本发布**：[http://svn.apache.org/repos/asf/axis/axis2/java/core/tags/v1.6.2/pom.xml](http://svn.apache.org/repos/asf/axis/axis2/java/core/tags/v1.6.2/pom.xml)。'
- en: '**Apache Axis2 1.7.0-SNAPSHOT**: [http://svn.apache.org/repos/asf/axis/axis2/java/core/trunk/pom.xml](http://svn.apache.org/repos/asf/axis/axis2/java/core/trunk/pom.xml).'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Apache Axis2 1.7.0-SNAPSHOT**：[http://svn.apache.org/repos/asf/axis/axis2/java/core/trunk/pom.xml](http://svn.apache.org/repos/asf/axis/axis2/java/core/trunk/pom.xml)。'
- en: '**Apache Synapse 2.1.0-wso2v5**: [http://svn.wso2.org/repos/wso2/tags/carbon/3.2.3/dependencies/synapse/2.1.0-wso2v5/pom.xml](http://svn.wso2.org/repos/wso2/tags/carbon/3.2.3/dependencies/synapse/2.1.0-wso2v5/pom.xml).
    Here the synapse code is maintained under the WSO2 source repository, not under
    Apache. In this case, we use the wso2v5 classifier to make it different from the
    same artifact produced by Apache Synapse.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Apache Synapse 2.1.0-wso2v5**：[http://svn.wso2.org/repos/wso2/tags/carbon/3.2.3/dependencies/synapse/2.1.0-wso2v5/pom.xml](http://svn.wso2.org/repos/wso2/tags/carbon/3.2.3/dependencies/synapse/2.1.0-wso2v5/pom.xml)。在这里，synapse代码是在WSO2源代码库中维护的，而不是在Apache下。在这种情况下，我们使用wso2v5分类器使其与Apache
    Synapse产生的相同工件区分开来。'
- en: Think twice before you write your own plugin. You may not need it!
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在编写自己的插件之前，请三思而后行。你可能并不需要它！
- en: Maven is all about plugins! There is a plugin out there for almost everything
    you need to do. If you find a need to write a plugin, spend some time doing some
    research on the web to see whether you can find something similar—the chances
    are very high. You can also find a list of available Maven plugins at [http://maven.apache.org/plugins](http://maven.apache.org/plugins).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Maven的一切都是关于插件的！几乎你可以找到完成任何所需任务的一个插件。如果你发现需要编写一个插件，花些时间在网上做一些研究，看看是否可以找到类似的东西——可能性非常高。你还可以在[http://maven.apache.org/plugins](http://maven.apache.org/plugins)找到可用的Maven插件列表。
- en: The Maven release plugin
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Maven发布插件
- en: 'Releasing a project requires a lot of repetitive tasks. The objective of the
    Maven `release` plugin is to automate them. The release plugin defines following
    eight goals, which are executed in two stages—preparing the release and performing
    the release:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 发布一个项目需要执行许多重复的任务。Maven `release`插件的目的是自动化这些任务。发布插件定义了以下八个目标，这些目标分为两个阶段执行——准备发布和执行发布：
- en: '`release:clean`: This cleans up after a release preparation'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`release:clean`：这会在发布准备之后进行清理。'
- en: '`release:prepare`: This prepares for a release in SCM (Software Configuration
    Management)'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`release:prepare`：这为软件配置管理（SCM）中的发布做准备。'
- en: '`release:prepare-with-pom`: This prepares for a release in SCM, and generates
    release POMs by fully resolving the dependencies'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`release:prepare-with-pom`：这为SCM中的发布做准备，并通过完全解析依赖项生成发布POM。'
- en: '`release:rollback`: This rolls back to a previous release'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`release:rollback`：这会回滚到之前的发布。'
- en: '`release:perform`: This performs a release from SCM'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`release:perform`：这从SCM执行发布。'
- en: '`release:stage`: This performs a release from SCM into a staging folder or
    repository'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`release:stage`：这从SCM执行发布到临时文件夹或仓库。'
- en: '`release:branch`: This creates a branch of the current project with all versions
    updated'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`release:branch`：这创建了一个包含所有版本更新的当前项目分支。'
- en: '`release:update-versions`: This updates the versions in the POM(s)'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`release:update-versions`：这更新POM中的版本。'
- en: 'The preparation stage will complete the following tasks with the `release:prepare`
    goal:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 准备阶段将使用`release:prepare`目标完成以下任务：
- en: Verify that all the changes in the source code are committed.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确认源代码中的所有更改都已提交。
- en: Make sure that there are no SNAPSHOT dependencies. During the project development
    phase we use SNAPSHOT dependencies, but, at the time of release, all the dependencies
    should be changed to a released version.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保没有SNAPSHOT依赖项。在项目开发阶段，我们使用SNAPSHOT依赖项，但在发布时，所有依赖项都应该更改为已发布的版本。
- en: The version of project POM files will be changed from SNAPSHOT to a concrete
    version number.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目POM文件的版本将从SNAPSHOT更改为具体的版本号。
- en: The SCM information in the project POM will be changed to include the final
    destination of the tag.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目POM中的SCM信息将更改，以包括标记的最终目的地。
- en: Execute all the tests against the modified POM files.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对修改后的POM文件执行所有测试。
- en: Commit the modified POM files to SCM and tag the code with a version name.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将修改后的POM文件提交到SCM，并使用版本名称标记代码。
- en: Change the version of POM files in the trunk to a SNAPSHOT version and then
    commit the modified POM files to the trunk.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将主分支中的POM文件版本更改为SNAPSHOT版本，然后将修改后的POM文件提交到主分支。
- en: 'Finally, the release will be performed with the `release:perform` goal. This
    will check out the code from the release tag in the SCM and run a set of predefined
    goals: `site` and `deploy-site`.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将使用`release:perform`目标执行发布。这将从SCM中的发布标签检出代码，并运行一系列预定义的目标：`site`和`deploy-site`。
- en: 'The `maven-release-plugin` is not defined in the super POM, and should be explicitly
    defined in your project POM file. The `releaseProfiles` configuration element
    defines the profiles to be released, and the `goals` configuration element defines
    the plugin goals to be executed during `release:perform`. In the following configuration,
    the `deploy` goal of the `maven-deploy-plugin` and the `single` goal of the `maven-assembly-plugin`
    will get executed:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`maven-release-plugin` 在父 POM 中未定义，应在您的项目 POM 文件中显式定义。`releaseProfiles` 配置元素定义了要发布的配置文件，而
    `goals` 配置元素定义了在 `release:perform` 期间要执行的插件目标。在以下配置中，`maven-deploy-plugin` 的 `deploy`
    目标和 `maven-assembly-plugin` 的 `single` 目标将被执行：'
- en: '[PRE12]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: More details about the Maven Release plugin are available at [http://maven.apache.org/maven-release/maven-release-plugin/](http://maven.apache.org/maven-release/maven-release-plugin/).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 Maven Release 插件的更多详细信息，请参阅 [http://maven.apache.org/maven-release/maven-release-plugin/](http://maven.apache.org/maven-release/maven-release-plugin/)。
- en: The Maven enforcer plugin
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Maven enforcer 插件
- en: The Maven Enforce plugin lets you control or enforce constraints in your build
    environment. These could be the Maven version, Java version, operating system
    parameters, and even user-defined rules.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Maven Enforce 插件允许您控制或强制构建环境中的约束。这些可能包括 Maven 版本、Java 版本、操作系统参数，甚至是用户定义的规则。
- en: 'The plugin defines two goals: `enforce` and `displayInfo`. The `enforcer:enforce`
    goal will execute all the defined rules against all the modules in a multimodule
    Maven project, while `enforcer:displayInfo` will display the project compliance
    details with respect to the standard rule set.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 该插件定义了两个目标：`enforce` 和 `displayInfo`。`enforcer:enforce` 目标将对多模块 Maven 项目的所有模块执行所有定义的规则，而
    `enforcer:displayInfo` 将显示项目与标准规则集的合规性细节。
- en: 'The `maven-enforcer-plugin` is not defined in the super POM, and should be
    explicitly defined in your project POM file:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`maven-enforcer-plugin` 在父 POM 中未定义，应在您的项目 POM 文件中显式定义：'
- en: '[PRE13]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The preceding plugin configuration enforces the Maven version to be 3.2.1, Java
    version to be 1.6, and the operating system to be in the Mac family.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 上述插件配置强制 Maven 版本为 3.2.1，Java 版本为 1.6，操作系统为 Mac 系列。
- en: 'The Apache Axis2 project uses the `enforcer` plugin to make sure that no application
    POM file defines Maven repositories. All the artifacts required by Axis2 are expected
    to be in the Maven central repository. The following configuration element is
    extracted from [http://svn.apache.org/repos/asf/axis/axis2/java/core/trunk/modules/parent/pom.xml](http://svn.apache.org/repos/asf/axis/axis2/java/core/trunk/modules/parent/pom.xml).
    Here, it bans all the repositories and plugin repositories, except snapshot repositories:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Axis2 项目使用 `enforcer` 插件确保没有应用程序 POM 文件定义 Maven 仓库。Axis2 所需的所有工件都应位于
    Maven 中央仓库中。以下配置元素是从 [http://svn.apache.org/repos/asf/axis/axis2/java/core/trunk/modules/parent/pom.xml](http://svn.apache.org/repos/asf/axis/axis2/java/core/trunk/modules/parent/pom.xml)
    中提取的。在这里，它禁止所有仓库和插件仓库，除了快照仓库：
- en: '[PRE14]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In addition to the standard rule set shipped with the `enforcer` plugin, you
    can also define your own rules. More details about how to write custom rules are
    available at [http://maven.apache.org/enforcer/enforcer-api/writing-a-custom-rule.html](http://maven.apache.org/enforcer/enforcer-api/writing-a-custom-rule.html).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `enforcer` 插件附带的标准规则集外，您还可以定义自己的规则。有关如何编写自定义规则的更多详细信息，请参阅 [http://maven.apache.org/enforcer/enforcer-api/writing-a-custom-rule.html](http://maven.apache.org/enforcer/enforcer-api/writing-a-custom-rule.html)。
- en: Avoiding the use of unversioned plugins
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 避免使用未指定版本的插件
- en: If you have associated a plugin with your application POM, without a version,
    then Maven will download the corresponding `maven-metadata.xml` file and store
    it locally. Only the latest released version of the plugin will be downloaded
    and used in the project. This can easily create uncertainties. Your project may
    work fine with the current version of a plugin, but later, if there is a new release
    of the same plugin, your Maven project will start to use the latest one automatically.
    This can result in an unpredictable behavior and lead to a debugging mess.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已将插件与您的应用程序 POM 关联，但没有指定版本，那么 Maven 将下载相应的 `maven-metadata.xml` 文件并将其存储在本地。只有插件的最新发布版本将被下载并用于项目。这可能会轻易地产生不确定性。您的项目可能使用当前版本的插件运行良好，但后来，如果相同的插件有新的发布版本，您的
    Maven 项目将自动开始使用最新的版本。这可能会导致不可预测的行为，并导致调试混乱。
- en: Tip
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: It is always recommended that you specify the plugin version along with the
    plugin configuration.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 始终建议您在插件配置中指定插件版本。
- en: 'You can enforce this as a rule with the Maven `enforcer` plugin, shown as follows:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用Maven `enforcer`插件强制执行此规则，如下所示：
- en: '[PRE15]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The following explains each of the key configuration elements defined in the
    preceding code:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对前面代码中定义的每个关键配置元素的说明：
- en: '`message`: This is used to define an optional message to the user, in case
    the rule execution fails.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`message`：此选项用于定义用户可选的消息，如果规则执行失败。'
- en: '`banLatest`: This is used to restrict the use of "LATEST" as a version for
    any plugin.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`banLatest`：此选项用于限制任何插件使用"Latest"作为版本。'
- en: '`banRelease`: This is used to restrict the use of "RELEASE" as a version for
    any plugin.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`banRelease`：此选项用于限制任何插件使用"RELEASE"作为版本。'
- en: '`banSnapshots`: This is used to restrict the use of SNAPSHOT plugins.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`banSnapshots`：此选项用于限制使用SNAPSHOT插件。'
- en: '`banTimestamps`: This is used to restrict the use of SNAPSHOT plugins with
    timestamp versions.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`banTimestamps`：此选项用于限制使用带时间戳版本的SNAPSHOT插件。'
- en: '`phases`: This is a comma separated list of phases that should be used to find
    lifecycle plugin bindings. The default value is "`clean`,`deploy`,`site`".'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`phases`：这是一个以逗号分隔的阶段列表，用于查找生命周期插件绑定。默认值是"`clean`,`deploy`,`site`"。'
- en: '`additionalPlugins`: This is a list of additional plugins to enforce having
    versions. These plugins may not be defined in application POM files, but are used
    anyway, like help, eclipse, and so on. The plugins should be specified in the
    form `groupId:artifactId`.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`additionalPlugins`：这是一个额外的插件列表，用于强制执行版本。这些插件可能没有在应用程序POM文件中定义，但仍然被使用，如help、eclipse等。插件应以`groupId:artifactId`的形式指定。'
- en: '`unCheckedPluginList`: This is a comma separated list of plugins to skip version
    checking.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unCheckedPluginList`：这是一个以逗号分隔的插件列表，用于跳过版本检查。'
- en: Note
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can read more about the `requirePluginVersions` rule from [http://maven.apache.org/enforcer/enforcer-rules/requirePluginVersions.html](http://maven.apache.org/enforcer/enforcer-rules/requirePluginVersions.html).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以阅读更多关于`requirePluginVersions`规则的信息，请参阅[http://maven.apache.org/enforcer/enforcer-rules/requirePluginVersions.html](http://maven.apache.org/enforcer/enforcer-rules/requirePluginVersions.html)。
- en: Descriptive parent POM files
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 描述性父POM文件
- en: 'Make sure your project''s parent POM file is descriptive enough to list out
    what the project does, who the developers and contributors are, their contact
    details, the license under which the project artifacts are released, where to
    report issues, and so on. Here is a good example of a descriptive POM file, which
    is available at [http://svn.apache.org/repos/asf/axis/axis2/java/core/trunk/modules/parent/pom.xml](http://svn.apache.org/repos/asf/axis/axis2/java/core/trunk/modules/parent/pom.xml):'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你的项目父POM文件描述足够详细，以便列出项目所做的工作、开发者及贡献者、他们的联系方式、项目工件发布的许可证、报告问题的位置等信息。以下是一个描述性良好的POM文件示例，可在[http://svn.apache.org/repos/asf/axis/axis2/java/core/trunk/modules/parent/pom.xml](http://svn.apache.org/repos/asf/axis/axis2/java/core/trunk/modules/parent/pom.xml)找到：
- en: '[PRE16]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Documentation is your friend
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文档是你的朋友
- en: If you are a good developer you know the value of documentation. Anything you
    write should not be cryptic or only be understood by you. Let it be a Java, .NET,
    C++ project, or a Maven project—the documentation is your friend. A code with
    a good documentation is extremely readable. If any configuration you add into
    an application POM file is not self-descriptive, make sure you add at least a
    single line comment explaining what it does.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是一个优秀的开发者，你应该知道文档的价值。你所写的一切都不应该是晦涩难懂的，或者只有你自己能理解。让它成为Java、.NET、C++项目，或者Maven项目——文档是你的朋友。带有良好文档的代码非常易于阅读。如果你在应用程序POM文件中添加的任何配置都不是自我描述的，请确保至少添加一行注释来解释其功能。
- en: 'Here to follow some good examples from the Apache Axis2 project:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 下面将跟随一些来自Apache Axis2项目的良好示例：
- en: '[PRE17]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '-------------------------------------------------------------------------------------------------------'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '-------------------------------------------------------------------------------------------------------'
- en: '[PRE18]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '-------------------------------------------------------------------------------------------------------'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '-------------------------------------------------------------------------------------------------------'
- en: '[PRE19]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Avoid overriding the default directory structure
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 避免覆盖默认的目录结构
- en: Maven follows the design philosophy *Convention over Configuration*. Without
    any configuration changes, Maven assumes the location of the source code is `${basedir}/src/main/java`,
    the location of tests is `${basedir}/src/test/java`, and the resources are available
    at `${basedir}/src/main/resources`. After a successful build, Maven knows where
    to place the compiled classes (`${basedir}/target/classes`) and where to copy
    the final artifact (`${basedir}/target/`). It is possible to change this directory
    structure, but it's recommended not to do so. Why?
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 遵循设计哲学 *约定优于配置*。在没有任何配置更改的情况下，Maven 假设源代码的位置是 `${basedir}/src/main/java`，测试的位置是
    `${basedir}/src/test/java`，资源位于 `${basedir}/src/main/resources`。在构建成功后，Maven 知道编译后的类放在哪里（`${basedir}/target/classes`）以及最终工件应该复制到哪（`${basedir}/target/`）。虽然可以更改这种目录结构，但建议不要这样做。为什么？
- en: Keeping the default structure improves the readability of the project. Even
    a fresh developer knows where to look, if he is familiar with Maven. Also, if
    you have associated plugins and other Maven extensions with your project, you
    will be able to use them with minimal changes if you have not altered the default
    Maven directory structure. Most of these plugins and other extensions assume the
    Maven convention by default.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 保持默认结构可以提高项目的可读性。即使是一个新手开发者，如果他熟悉 Maven，也知道该往哪里找。此外，如果你已经将插件和其他 Maven 扩展与你的项目关联，那么如果你没有更改默认的
    Maven 目录结构，你将能够以最小的更改使用它们。大多数这些插件和其他扩展默认假设 Maven 约定。
- en: Using SNAPSHOT versioning during the development
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在开发过程中使用 SNAPSHOT 版本控制
- en: You should use the `SNAPSHOT` qualifier for the artifacts produced by your project
    if those are still under development and deployed regularly to a Maven snapshot
    repository. If the version to be released is 1.7.0, then you should use the version
    `1.7.0-SNAPSHOT` while it's under development. Maven treats the version `SNAPSHOT`
    in a special manner. If you try to deploy `1.7.0-SNAPSHOT` into a repository,
    Maven will first expand the `SNAPSHOT` qualifier into a date and time value in
    UTC (Coordinated Universal Time). If the date/time at the time of deployment is
    10.30 AM, November 10th, 2014, then the `SNAPSHOT` qualifier will be replaced
    with 20141110-103005-1, and the artifact will be deployed with the version `1.7.0-20141110-103005-1`.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的项目工件仍在开发中并且定期部署到 Maven 快照仓库，你应该使用 `SNAPSHOT` 限定符。如果即将发布的版本是 1.7.0，那么在开发期间你应该使用版本
    `1.7.0-SNAPSHOT`。Maven 对 `SNAPSHOT` 版本有特殊处理。如果你尝试将 `1.7.0-SNAPSHOT` 部署到仓库，Maven
    会首先将 `SNAPSHOT` 限定符扩展为 UTC（协调世界时）的日期和时间值。如果部署时的日期/时间是 2014 年 11 月 10 日上午 10:30，那么
    `SNAPSHOT` 限定符将被替换为 20141110-103005-1，并且工件将以版本 `1.7.0-20141110-103005-1` 部署。
- en: Get rid of unused dependencies
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移除未使用的依赖项
- en: Always ensure that you maintain a clean application POM file. You should not
    have any unused dependencies defined or used undeclared dependencies. The Maven
    `dependency` plugin helps you in identifying such discrepancies.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 总是确保你维护一个干净的应用程序 POM 文件。你不应该定义或使用任何未声明的依赖项。Maven 的 `dependency` 插件帮助你识别此类差异。
- en: 'The `maven-dependency-plugin` is not defined in the super POM and should be
    explicitly defined in your project POM file:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`maven-dependency-plugin` 在父 POM 中未定义，应在你的项目 POM 文件中显式定义：'
- en: '[PRE20]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Once the preceding configuration is added into your application POM file, you
    need to run the `analyze` goal of the `dependency` plugin against your Maven project:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦将前面的配置添加到你的应用程序 POM 文件中，你需要运行 `dependency` 插件的 `analyze` 目标来针对你的 Maven 项目：
- en: '[PRE21]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Here, you can see a sample output, which complains about an unused declared
    dependency:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以看到一份样本输出，它抱怨一个未使用的声明依赖项：
- en: '[PRE22]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Note
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: More details about the Maven dependency plugin are available at [http://maven.apache.org/plugins/maven-dependency-plugin/](http://maven.apache.org/plugins/maven-dependency-plugin/).
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 Maven 依赖插件的更多详细信息可在 [http://maven.apache.org/plugins/maven-dependency-plugin/](http://maven.apache.org/plugins/maven-dependency-plugin/)
    找到。
- en: Avoiding keeping credentials in application POM files
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 避免在应用程序 POM 文件中保留凭证
- en: 'During a Maven build you need to connect to external repositories outside your
    firewall. In a tightly secured environment, any outbound connection has to go
    through an internal proxy server. The following configuration in `MAVEN_HOME/conf/settings.xml`
    shows how to connect to an external repository via a secured proxy server:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Maven 构建过程中，你需要连接到防火墙外的外部仓库。在一个高度安全的环境中，任何出站连接都必须通过内部代理服务器。以下 `MAVEN_HOME/conf/settings.xml`
    中的配置显示了如何通过安全的代理服务器连接到外部仓库：
- en: '[PRE23]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Also, the Maven repositories can be protected for legitimate access. If a given
    repository is protected with HTTP Basic Authentication, the corresponding credentials
    should be defined as follows, under the `server` element of `MAVEN_HOME/conf/settings.xml`:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Maven仓库可以受到合法访问的保护。如果某个仓库通过HTTP基本身份验证进行保护，那么相应的凭据应该在`MAVEN_HOME/conf/settings.xml`的`server`元素下定义如下：
- en: '[PRE24]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Keeping confidential data in configuration files in clear text is a security
    threat that must be avoided. Maven provides a way of encrypting configuration
    data in `settings.xml`.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置文件中明文存储机密数据是一种安全威胁，必须避免。Maven提供了一种在`settings.xml`中加密配置数据的方法。
- en: 'First, we need to create a master encryption key, shown as follows:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要创建一个主加密密钥，如下所示：
- en: '[PRE25]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'With the output from the above command, we need to create a file called `settings-security.xml`
    under `USER_HOME/.m2/` and add the encrypted master password there, as follows:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述命令的输出，我们需要在`USER_HOME/.m2/`下创建一个名为`settings-security.xml`的文件，并将加密的主密码添加到其中，如下所示：
- en: '[PRE26]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Once the master password is configured properly, we can start encrypting rest
    of the confidential data in `settings.xml`. Let''s see how to encrypt the server
    password. First, we need to generate the encrypted password for the cleartext
    one using the following command. Note that earlier we used emp (encrypt master
    password) and now we are using ep (encrypt password):'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦正确配置了主密码，我们就可以开始加密`settings.xml`中的其余机密数据。让我们看看如何加密服务器密码。首先，我们需要使用以下命令生成明文密码的加密密码。注意，之前我们使用了emp（加密主密码），而现在我们使用ep（加密密码）：
- en: '[PRE27]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Copy the value of the encrypted password and replace the corresponding value
    in `settings.xml`:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 复制加密密码的值，并将其替换为`settings.xml`中相应的值：
- en: '[PRE28]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Avoiding using deprecated references
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 避免使用已弃用的引用
- en: Since Maven 3.0 onwards, all the properties starting with `pom.*` are deprecated.
    Avoid using any of the deprecated Maven properties and, if you have used them
    already, ensure that you migrate to the equivalent ones.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 从Maven 3.0开始，所有以`pom.*`开头的属性都已弃用。避免使用任何已弃用的Maven属性，如果你已经使用了它们，确保迁移到等效的属性。
- en: Avoiding repetition – use archetypes
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 避免重复 - 使用原型
- en: When we create a Java project, we need to structure it in different ways based
    on the type of the project. If it's a Java EE web application then we need to
    have a WEB-INF directory and a `web.xml` file. If it's a Maven plugin project,
    we need to have a Mojo class, which extends from `org.apache.maven.plugin.AbstractMojo`.
    Since each type of project has its own predefined structure, why would everyone
    have to build the same structure again and again? Why don't we start with a template?
    Each project can have its own template and the developers can extend the template
    to suit their requirements. Maven archetypes address this concern. Each archetype
    is a project template.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建一个Java项目时，需要根据项目的类型以不同的方式对其进行结构化。如果它是一个Java EE网络应用程序，那么我们需要有一个WEB-INF目录和一个`web.xml`文件。如果它是一个Maven插件项目，我们需要有一个Mojo类，该类从`org.apache.maven.plugin.AbstractMojo`扩展。由于每种类型的项目都有自己的预定义结构，为什么每个人都必须一次又一次地构建相同结构呢？为什么我们不从一个模板开始呢？每个项目都可以有自己的模板，开发者可以根据他们的需求扩展模板。Maven原型解决了这个问题。每个原型都是一个项目模板。
- en: We discussed Maven archetypes in detail, in [Chapter 3](ch03.html "Chapter 3. Maven
    Archetypes"), *Maven Archetypes*.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第3章](ch03.html "第3章。Maven原型")中详细讨论了Maven原型。
- en: Avoiding using maven.test.skip
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 避免使用maven.test.skip
- en: You may manage an extremely small project that does not evolve a lot without
    unit tests. But, any large-scale project cannot exist without unit tests. Unit
    tests provide the first level of guarantee that you do not break any existing
    functionality with a newly introduced code change. In an ideal scenario, you should
    not commit any code to a source repository without building the complete project
    with unit tests.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能可以管理一个非常小的项目，这个项目没有太多的发展，而不需要单元测试。但是，任何大规模的项目都不能没有单元测试。单元测试提供了第一层保证，确保你不会因为引入新的代码更改而破坏任何现有功能。在理想情况下，你不应该在没有使用单元测试构建完整项目的情况下将任何代码提交到源代码库。
- en: 'Maven uses the `surefire` plugin to run tests and as a malpractice developers
    are used to skip the execution of unit tests by setting the `maven.test.skip`
    property to `true`, as follows:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: Maven使用`surefire`插件来运行测试，并且作为不良做法，开发者习惯于通过将`maven.test.skip`属性设置为`true`来跳过单元测试的执行，如下所示：
- en: '[PRE29]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This can lead to serious repercussions in the later stage of the project, and
    you must ensure that all your developers do not skip tests while building.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能导致项目后期出现严重后果，您必须确保所有开发人员在构建过程中不要跳过测试。
- en: Using the `requireProperty` rule of the Maven `enforcer` plugin, you can ban
    developers from using the `maven.test.skip` property.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Maven `enforcer`插件的`requireProperty`规则，您可以禁止开发人员使用`maven.test.skip`属性。
- en: 'The following shows the `enforcer` plugin configuration that you need to add
    to your application POM:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 以下展示了您需要添加到应用程序POM文件中的`enforcer`插件配置：
- en: '[PRE30]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now, if you run `mvn clean install` against your project, you will see the
    following error message:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您对项目运行`mvn clean install`，您将看到以下错误信息：
- en: '[PRE31]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'This means you need to specify `Dmaven.test.skip=false` every time you run
    `mvn clean install`:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着您需要在每次运行`mvn clean install`时指定`Dmaven.test.skip=false`：
- en: '[PRE32]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'But if you set `–Dmaven.test.skip=true`, then you will see the following error:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果您设置了`–Dmaven.test.skip=true`，那么您将看到以下错误：
- en: '[PRE33]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Still, you will find it a bit annoying to type `–Dmaven.test.skip=false` whenever
    you run a build. To avoid that, into your application POM file, add the property
    `maven.test.skip` and set its value to `false`:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，每次运行构建时都输入`–Dmaven.test.skip=false`可能会让您感到有些烦恼。为了避免这种情况，在您的应用程序POM文件中添加属性`maven.test.skip`并将其值设置为`false`：
- en: '[PRE34]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Note
  id: totrans-213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: More details about `requireProperty` rule are available at [http://maven.apache.org/enforcer/enforcer-rules/requireProperty.html](http://maven.apache.org/enforcer/enforcer-rules/requireProperty.html).
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`requireProperty`规则的更多详细信息，请参阅[http://maven.apache.org/enforcer/enforcer-rules/requireProperty.html](http://maven.apache.org/enforcer/enforcer-rules/requireProperty.html)。
- en: Summary
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we looked at and highlighted some of the best practices to
    be followed in a large-scale development project with Maven. Most of the points
    highlighted here were discussed in detail in previous chapters throughout the
    book. It is always recommended to follow best practices since it will drastically
    improve developer productivity and will reduce any maintenance nightmares.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了并强调了在大型开发项目中遵循的一些最佳实践。本书前几章详细讨论了这里强调的大部分内容。始终推荐遵循最佳实践，因为它将极大地提高开发人员的工作效率，并减少任何维护噩梦。
- en: Overall, the book covered Apache Maven 3 and its core concepts with examples,
    including Maven archetypes, plugins, assemblies, and lifecycles.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，本书涵盖了Apache Maven 3及其核心概念，包括Maven原型、插件、构建和生命周期，并通过示例进行了说明。
