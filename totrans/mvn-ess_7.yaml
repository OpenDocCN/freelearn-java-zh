- en: Chapter 7. Best Practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this book, so far, we discussed most of the key concepts related to Maven.
    In this chapter, we will focus on best practices associated with all of these
    core concepts. The following best practices constitute an essential ingredient
    in creating a successful and productive build environment. The criteria listed
    here will help you to evaluate the efficiency of your Maven project, mostly if
    you are dealing with a large-scale multi-module project:'
  prefs: []
  type: TYPE_NORMAL
- en: The time taken by a developer to get started with a new project and add it to
    the build system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The effort required to upgrade a version of a dependency across all the project
    modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The time taken to build the complete project with a fresh local Maven repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The time taken to do a complete offline build
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The time taken to update the versions of Maven artifacts produced by the project;
    for example, from 1.0.0-SNAPSHOT to 1.0.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The effort required for a completely new developer to understand what your Maven
    build does
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The effort required to introduce a new Maven repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The time taken to execute unit tests and integration tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The rest of the chapter talks about 25 industry-accepted best practices that
    would help you to improve developer productivity and reduce any maintenance nightmares.
  prefs: []
  type: TYPE_NORMAL
- en: Dependency management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the following example, you will notice that the dependency versions are
    added to each and every dependency defined in the application POM file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Imagine you have a set of application POM files in a multi-module project having
    the same set of dependencies. If you have duplicated the artifact version with
    each and every dependency, then to upgrade to the latest dependency you need to
    update all the POM files, which can easily lead to a mess.
  prefs: []
  type: TYPE_NORMAL
- en: Not just that, if you have different versions of the same dependency used in
    different modules of the same project, then it's going to be a debugging nightmare
    in the case of an issue.
  prefs: []
  type: TYPE_NORMAL
- en: 'With `dependencyManagement`, we can overcome both these issues. If it''s a
    multi-module Maven project, you need to introduce `dependencyManagement` in the
    parent POM, so it will be inherited by all the other child modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you define `dependencies` under the `dependencyManagement` section, as
    shown in the preceding code, you only need to refer a `dependency` from its `groupId`
    and the `artifactId` elements. The `version` element is picked from the appropriate
    `dependencyManagement` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: With this, if you want to upgrade or downgrade a dependency, you only need to
    change the dependency version under the `dependencyManagement` section.
  prefs: []
  type: TYPE_NORMAL
- en: 'The same principle applies to plugins as well. If you have a set of plugins,
    which are used across multiple modules, you should define them under the `pluginManagement`
    section of the parent module. In this way, you can downgrade or upgrade plugin
    versions seamlessly just by changing the `pluginManagement` section of the parent
    POM, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you define the plugins in the plugin management section, as shown in the
    preceding code, you only need to refer a plugin from its `groupId` (optional)
    and `artifactId` elements. The version is picked from the appropriate `pluginManagement`
    section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Maven plugins were discussed in detail in [Chapter 4](ch04.html "Chapter 4. Maven
    Plugins"), *Maven Plugins*.
  prefs: []
  type: TYPE_NORMAL
- en: Defining a parent module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In most of the multi-module Maven projects, there are many things that are shared
    across multiple modules. Dependency versions, plugin versions, properties, and
    repositories are only some of them. It is a common (and a best) practice to create
    a separate module called `parent` and define everything in common in its POM file.
    The packaging type of this POM file is `pom`. The artifact generated by the `pom`
    packaging type is itself a POM file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are few examples of Maven parent modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Apache Axis2 project**: [http://svn.apache.org/repos/asf/axis/axis2/java/core/trunk/modules/parent/](http://svn.apache.org/repos/asf/axis/axis2/java/core/trunk/modules/parent/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**WSO2 Carbon project**: [https://svn.wso2.org/repos/wso2/carbon/platform/trunk/parent/](https://svn.wso2.org/repos/wso2/carbon/platform/trunk/parent/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Not all the projects follow this approach. Some just keep the parent POM file
    under the root directory (not under the `parent` module). The following are a
    couple of examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Apache Synapse project**: [http://svn.apache.org/repos/asf/synapse/trunk/java/pom.xml](http://svn.apache.org/repos/asf/synapse/trunk/java/pom.xml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Apache HBase project**: [http://svn.apache.org/repos/asf/hbase/trunk/pom.xml](http://svn.apache.org/repos/asf/hbase/trunk/pom.xml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both the approaches deliver the same results, yet the first one is much preferred.
    With the first approach, the parent POM file only defines the shared resources
    across different Maven modules in the project while there is another POM file
    at the root of the project, which defines all the modules to be included in the
    project build. With the second approach, you define all the shared resources as
    well as all the modules to be included in the project build in the same POM file,
    which is under the project root directory. The first approach is better than the
    second one, based on the *separation of concerns* principle.
  prefs: []
  type: TYPE_NORMAL
- en: POM properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are six types of properties that you can use within a Maven application
    POM file:'
  prefs: []
  type: TYPE_NORMAL
- en: Built-in properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Local settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Environmental variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java system properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is always recommended that you use properties instead of hardcoding values
    in application POM files. Let's see a few examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s consider the example of the application POM file inside the Apache Axis2
    distribution module, which is available at [http://svn.apache.org/repos/asf/axis/axis2/java/core/trunk/modules/distribution/pom.xml](http://svn.apache.org/repos/asf/axis/axis2/java/core/trunk/modules/distribution/pom.xml).
    This defines all the artifacts created in the Axis2 project that need to be included
    in the final distribution. All the artifacts share the same `groupId` element
    as well as the `version` elements of the `distribution` module. This is a common
    scenario in most of the multimodule Maven projects. Most of the modules (if not
    all) share the same `groupId` and the `version` elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding configuration, instead of duplicating the `version` element,
    Axis2 uses the project property `${project.version}`. When Maven finds this project
    property, it reads the value from the project POM `version` element. If the project
    POM file does not have a `version` element, then Maven will try to read it from
    the immediate parent POM file. The benefit here is, when you upgrade your project
    version some day, you only need to upgrade the `version` element of the `distribution`
    POM file (or its parent).
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding configuration is not perfect; it can be further improved as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here, we also replace the hardcoded value of the `groupId` element in all the
    dependencies with the project property `${project.groupid}`. When Maven finds
    this project property, it reads the value from the project POM `groupId` element.
    In case the project POM file does not have a `groupId` element, then Maven will
    try to read it from the immediate parent POM file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a list of some of the built-in properties and project properties of
    Maven:'
  prefs: []
  type: TYPE_NORMAL
- en: '`project.version`: This refers to the value of the `version` element of the
    project POM file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`project.groupId`: This refers to the value of the `groupId` element of the
    project POM file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`project.artifactId`: This refers to the value of the `artifactId` element
    of the project POM file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`project.name`: This refers to the value of the `name` element of the project
    POM file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`project.description`: This refers to the value of the `description` element
    of the project POM file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`project.basedir`: This refers to the path of the project''s base directory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is an example, which shows the usage of this project property.
    Here, we have a system dependency, which needs to be referred from a file `system`
    path:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In addition to the project properties, you can also read properties from the
    `USER_HOME/.m2/settings.xml` file. For example, if you want to read the path to
    the local Maven repository, you can use the property, `${settings.localRepository}`.
    In the same way, with the same pattern, you can read any of the configuration
    elements, which are defined in the `settings.xml` file.
  prefs: []
  type: TYPE_NORMAL
- en: The environment variables defined in the system can be read using the `env`
    prefix within an application POM file. The `${env.M2_HOME}` property will return
    the path to Maven home, while `${env.java_home}` returns the path to the Java
    home directory. These properties will be quite useful within certain Maven plugins.
  prefs: []
  type: TYPE_NORMAL
- en: Maven also lets you define your own set of custom properties. Custom properties
    are mostly used when defining dependency versions.
  prefs: []
  type: TYPE_NORMAL
- en: You should not scatter custom properties all over the places. An ideal place
    to define them is the parent POM file in a multimodule Maven project, which will
    then be inherited by all the other child modules.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you look at the parent POM file of the WSO2 Carbon project, you will find
    a large set of custom properties is defined ([https://svn.wso2.org/repos/wso2/carbon/platform/branches/turing/parent/pom.xml](https://svn.wso2.org/repos/wso2/carbon/platform/branches/turing/parent/pom.xml)).
    The following block of code contains some of those custom properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'When you add a dependency to the Rampart jar, you do not need to specify the
    version there. Just refer it by the `${rampart.version}` property name. Also,
    keep in mind that all the custom-defined properties are inherited and can be overridden
    in any child POM file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Avoiding repetitive groupIds and versions, and inheriting from the parent POM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a multimodule Maven project, most of the modules (if not all) share the same
    `groupId` and the `version` elements. In that case, you can avoid adding `version`
    and `groupId` elements to your application POM file, as those will be automatically
    inherited from the corresponding parent POM.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you look at `axis2-kernel` (which is a module of the Apache Axis2 project),
    you will find that no `groupId` or a `version` element is defined: ([http://svn.apache.org/repos/asf/axis/axis2/java/core/trunk/modules/kernel/pom.xml](http://svn.apache.org/repos/asf/axis/axis2/java/core/trunk/modules/kernel/pom.xml)).
    Maven reads them from the parent POM file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Following naming conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When defining coordinates for your Maven project, you must always follow the
    naming conventions.
  prefs: []
  type: TYPE_NORMAL
- en: The value of the `groupId` element should follow the same naming convention
    you use in Java package names. It has to be a domain name (the reverse of the
    domain name) that you own—or at least that your project is developed under.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following list covers some of the `groupId` naming conventions:'
  prefs: []
  type: TYPE_NORMAL
- en: The name of the `groupId` element has to be in lower case.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the reverse of a domain name that can be used to uniquely identify your
    project. This will also help to avoid collisions between artifacts produced by
    different projects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid using digits or special characters (for example, `org.wso2.carbon.identity-core`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do not try to group two words into a single word by camel casing (for example,
    `org.wso2.carbon.identityCore`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that all the subprojects developed under different teams in the same
    company finally inherit from the same `groupId` and extend the name of the parent
    `groupId` rather than defining their own.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s go through some examples. You will notice that all the open source projects
    developed under **Apache** **Software Foundation** (**ASF**) use the same parent
    `groupId` (`org.apache`) and define their own `groupId`, which extends from the
    parent:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Apache Axis2 project**: `org.apache.axis2`, which inherits from the `org.apache`
    parent `groupId`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Apache Synapse project**: `org.apache.synapse`, which inherits from the `org.apache`
    parent `groupId`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Apache ServiceMix project**: `org.apache.servicemix`, which inherits from
    the `org.apache` parent `groupId`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**WSO2 Carbon project**: `org.wso2.carbon`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apart from the `groupId`, you should also follow the naming conventions while
    defining `artifactIds`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following lists out some of the `artifactId` naming conventions:'
  prefs: []
  type: TYPE_NORMAL
- en: The name of the `artifactId` has to be in lower case.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid duplicating the value of `groupId` inside the `artifactId`. If you find
    a need to start your `artifactId` element with the `groupId` element and add something
    to the end, then you need to revisit the structure of your project. You may need
    to add more module groups.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Avoid using special characters (for example, #, $, &, %).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do not try to group two words into a single word by camel casing (for example,
    identityCore).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following naming conventions for `version` are also equally important.
    The version of a given Maven artifact can be divided into four parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The major version reflects the introduction of a new major feature. A change
    in the major version of a given artifact could also mean that the new changes
    are not necessarily backward compatible with the previously released artifact.
    The minor version reflects an introduction of a new feature to the previously
    released version in a backward compatible manner. The incremental version reflects
    a bug fixed release of the artifact. The build number can be the revision number
    from the source code repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'This versioning convention is not just for Maven artifacts. Apple did a major
    release of its iOS mobile operating system in September 2014: iOS 8.0.0\. Soon
    after the release, they discovered a critical bug in it that had an impact on
    cellular network connectivity and the TouchID on the iPhone. Then they released
    iOS 8.0.1 as a patch release to fix the issues.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go through some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Apache Axis2 1.6.0 release**: [http://svn.apache.org/repos/asf/axis/axis2/java/core/tags/v1.6.0/pom.xml](http://svn.apache.org/repos/asf/axis/axis2/java/core/tags/v1.6.0/pom.xml).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Apache** **Axis2 1.6.2 release**: [http://svn.apache.org/repos/asf/axis/axis2/java/core/tags/v1.6.2/pom.xml](http://svn.apache.org/repos/asf/axis/axis2/java/core/tags/v1.6.2/pom.xml).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Apache Axis2 1.7.0-SNAPSHOT**: [http://svn.apache.org/repos/asf/axis/axis2/java/core/trunk/pom.xml](http://svn.apache.org/repos/asf/axis/axis2/java/core/trunk/pom.xml).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Apache Synapse 2.1.0-wso2v5**: [http://svn.wso2.org/repos/wso2/tags/carbon/3.2.3/dependencies/synapse/2.1.0-wso2v5/pom.xml](http://svn.wso2.org/repos/wso2/tags/carbon/3.2.3/dependencies/synapse/2.1.0-wso2v5/pom.xml).
    Here the synapse code is maintained under the WSO2 source repository, not under
    Apache. In this case, we use the wso2v5 classifier to make it different from the
    same artifact produced by Apache Synapse.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Think twice before you write your own plugin. You may not need it!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Maven is all about plugins! There is a plugin out there for almost everything
    you need to do. If you find a need to write a plugin, spend some time doing some
    research on the web to see whether you can find something similar—the chances
    are very high. You can also find a list of available Maven plugins at [http://maven.apache.org/plugins](http://maven.apache.org/plugins).
  prefs: []
  type: TYPE_NORMAL
- en: The Maven release plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Releasing a project requires a lot of repetitive tasks. The objective of the
    Maven `release` plugin is to automate them. The release plugin defines following
    eight goals, which are executed in two stages—preparing the release and performing
    the release:'
  prefs: []
  type: TYPE_NORMAL
- en: '`release:clean`: This cleans up after a release preparation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`release:prepare`: This prepares for a release in SCM (Software Configuration
    Management)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`release:prepare-with-pom`: This prepares for a release in SCM, and generates
    release POMs by fully resolving the dependencies'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`release:rollback`: This rolls back to a previous release'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`release:perform`: This performs a release from SCM'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`release:stage`: This performs a release from SCM into a staging folder or
    repository'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`release:branch`: This creates a branch of the current project with all versions
    updated'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`release:update-versions`: This updates the versions in the POM(s)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The preparation stage will complete the following tasks with the `release:prepare`
    goal:'
  prefs: []
  type: TYPE_NORMAL
- en: Verify that all the changes in the source code are committed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure that there are no SNAPSHOT dependencies. During the project development
    phase we use SNAPSHOT dependencies, but, at the time of release, all the dependencies
    should be changed to a released version.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The version of project POM files will be changed from SNAPSHOT to a concrete
    version number.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The SCM information in the project POM will be changed to include the final
    destination of the tag.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Execute all the tests against the modified POM files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Commit the modified POM files to SCM and tag the code with a version name.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change the version of POM files in the trunk to a SNAPSHOT version and then
    commit the modified POM files to the trunk.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, the release will be performed with the `release:perform` goal. This
    will check out the code from the release tag in the SCM and run a set of predefined
    goals: `site` and `deploy-site`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `maven-release-plugin` is not defined in the super POM, and should be explicitly
    defined in your project POM file. The `releaseProfiles` configuration element
    defines the profiles to be released, and the `goals` configuration element defines
    the plugin goals to be executed during `release:perform`. In the following configuration,
    the `deploy` goal of the `maven-deploy-plugin` and the `single` goal of the `maven-assembly-plugin`
    will get executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More details about the Maven Release plugin are available at [http://maven.apache.org/maven-release/maven-release-plugin/](http://maven.apache.org/maven-release/maven-release-plugin/).
  prefs: []
  type: TYPE_NORMAL
- en: The Maven enforcer plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Maven Enforce plugin lets you control or enforce constraints in your build
    environment. These could be the Maven version, Java version, operating system
    parameters, and even user-defined rules.
  prefs: []
  type: TYPE_NORMAL
- en: 'The plugin defines two goals: `enforce` and `displayInfo`. The `enforcer:enforce`
    goal will execute all the defined rules against all the modules in a multimodule
    Maven project, while `enforcer:displayInfo` will display the project compliance
    details with respect to the standard rule set.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `maven-enforcer-plugin` is not defined in the super POM, and should be
    explicitly defined in your project POM file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The preceding plugin configuration enforces the Maven version to be 3.2.1, Java
    version to be 1.6, and the operating system to be in the Mac family.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Apache Axis2 project uses the `enforcer` plugin to make sure that no application
    POM file defines Maven repositories. All the artifacts required by Axis2 are expected
    to be in the Maven central repository. The following configuration element is
    extracted from [http://svn.apache.org/repos/asf/axis/axis2/java/core/trunk/modules/parent/pom.xml](http://svn.apache.org/repos/asf/axis/axis2/java/core/trunk/modules/parent/pom.xml).
    Here, it bans all the repositories and plugin repositories, except snapshot repositories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In addition to the standard rule set shipped with the `enforcer` plugin, you
    can also define your own rules. More details about how to write custom rules are
    available at [http://maven.apache.org/enforcer/enforcer-api/writing-a-custom-rule.html](http://maven.apache.org/enforcer/enforcer-api/writing-a-custom-rule.html).
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding the use of unversioned plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have associated a plugin with your application POM, without a version,
    then Maven will download the corresponding `maven-metadata.xml` file and store
    it locally. Only the latest released version of the plugin will be downloaded
    and used in the project. This can easily create uncertainties. Your project may
    work fine with the current version of a plugin, but later, if there is a new release
    of the same plugin, your Maven project will start to use the latest one automatically.
    This can result in an unpredictable behavior and lead to a debugging mess.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is always recommended that you specify the plugin version along with the
    plugin configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can enforce this as a rule with the Maven `enforcer` plugin, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The following explains each of the key configuration elements defined in the
    preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`message`: This is used to define an optional message to the user, in case
    the rule execution fails.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`banLatest`: This is used to restrict the use of "LATEST" as a version for
    any plugin.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`banRelease`: This is used to restrict the use of "RELEASE" as a version for
    any plugin.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`banSnapshots`: This is used to restrict the use of SNAPSHOT plugins.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`banTimestamps`: This is used to restrict the use of SNAPSHOT plugins with
    timestamp versions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`phases`: This is a comma separated list of phases that should be used to find
    lifecycle plugin bindings. The default value is "`clean`,`deploy`,`site`".'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`additionalPlugins`: This is a list of additional plugins to enforce having
    versions. These plugins may not be defined in application POM files, but are used
    anyway, like help, eclipse, and so on. The plugins should be specified in the
    form `groupId:artifactId`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`unCheckedPluginList`: This is a comma separated list of plugins to skip version
    checking.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can read more about the `requirePluginVersions` rule from [http://maven.apache.org/enforcer/enforcer-rules/requirePluginVersions.html](http://maven.apache.org/enforcer/enforcer-rules/requirePluginVersions.html).
  prefs: []
  type: TYPE_NORMAL
- en: Descriptive parent POM files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Make sure your project''s parent POM file is descriptive enough to list out
    what the project does, who the developers and contributors are, their contact
    details, the license under which the project artifacts are released, where to
    report issues, and so on. Here is a good example of a descriptive POM file, which
    is available at [http://svn.apache.org/repos/asf/axis/axis2/java/core/trunk/modules/parent/pom.xml](http://svn.apache.org/repos/asf/axis/axis2/java/core/trunk/modules/parent/pom.xml):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Documentation is your friend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are a good developer you know the value of documentation. Anything you
    write should not be cryptic or only be understood by you. Let it be a Java, .NET,
    C++ project, or a Maven project—the documentation is your friend. A code with
    a good documentation is extremely readable. If any configuration you add into
    an application POM file is not self-descriptive, make sure you add at least a
    single line comment explaining what it does.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here to follow some good examples from the Apache Axis2 project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '-------------------------------------------------------------------------------------------------------'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '-------------------------------------------------------------------------------------------------------'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Avoid overriding the default directory structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Maven follows the design philosophy *Convention over Configuration*. Without
    any configuration changes, Maven assumes the location of the source code is `${basedir}/src/main/java`,
    the location of tests is `${basedir}/src/test/java`, and the resources are available
    at `${basedir}/src/main/resources`. After a successful build, Maven knows where
    to place the compiled classes (`${basedir}/target/classes`) and where to copy
    the final artifact (`${basedir}/target/`). It is possible to change this directory
    structure, but it's recommended not to do so. Why?
  prefs: []
  type: TYPE_NORMAL
- en: Keeping the default structure improves the readability of the project. Even
    a fresh developer knows where to look, if he is familiar with Maven. Also, if
    you have associated plugins and other Maven extensions with your project, you
    will be able to use them with minimal changes if you have not altered the default
    Maven directory structure. Most of these plugins and other extensions assume the
    Maven convention by default.
  prefs: []
  type: TYPE_NORMAL
- en: Using SNAPSHOT versioning during the development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should use the `SNAPSHOT` qualifier for the artifacts produced by your project
    if those are still under development and deployed regularly to a Maven snapshot
    repository. If the version to be released is 1.7.0, then you should use the version
    `1.7.0-SNAPSHOT` while it's under development. Maven treats the version `SNAPSHOT`
    in a special manner. If you try to deploy `1.7.0-SNAPSHOT` into a repository,
    Maven will first expand the `SNAPSHOT` qualifier into a date and time value in
    UTC (Coordinated Universal Time). If the date/time at the time of deployment is
    10.30 AM, November 10th, 2014, then the `SNAPSHOT` qualifier will be replaced
    with 20141110-103005-1, and the artifact will be deployed with the version `1.7.0-20141110-103005-1`.
  prefs: []
  type: TYPE_NORMAL
- en: Get rid of unused dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Always ensure that you maintain a clean application POM file. You should not
    have any unused dependencies defined or used undeclared dependencies. The Maven
    `dependency` plugin helps you in identifying such discrepancies.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `maven-dependency-plugin` is not defined in the super POM and should be
    explicitly defined in your project POM file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the preceding configuration is added into your application POM file, you
    need to run the `analyze` goal of the `dependency` plugin against your Maven project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, you can see a sample output, which complains about an unused declared
    dependency:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More details about the Maven dependency plugin are available at [http://maven.apache.org/plugins/maven-dependency-plugin/](http://maven.apache.org/plugins/maven-dependency-plugin/).
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding keeping credentials in application POM files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'During a Maven build you need to connect to external repositories outside your
    firewall. In a tightly secured environment, any outbound connection has to go
    through an internal proxy server. The following configuration in `MAVEN_HOME/conf/settings.xml`
    shows how to connect to an external repository via a secured proxy server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, the Maven repositories can be protected for legitimate access. If a given
    repository is protected with HTTP Basic Authentication, the corresponding credentials
    should be defined as follows, under the `server` element of `MAVEN_HOME/conf/settings.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Keeping confidential data in configuration files in clear text is a security
    threat that must be avoided. Maven provides a way of encrypting configuration
    data in `settings.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to create a master encryption key, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'With the output from the above command, we need to create a file called `settings-security.xml`
    under `USER_HOME/.m2/` and add the encrypted master password there, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the master password is configured properly, we can start encrypting rest
    of the confidential data in `settings.xml`. Let''s see how to encrypt the server
    password. First, we need to generate the encrypted password for the cleartext
    one using the following command. Note that earlier we used emp (encrypt master
    password) and now we are using ep (encrypt password):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the value of the encrypted password and replace the corresponding value
    in `settings.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Avoiding using deprecated references
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since Maven 3.0 onwards, all the properties starting with `pom.*` are deprecated.
    Avoid using any of the deprecated Maven properties and, if you have used them
    already, ensure that you migrate to the equivalent ones.
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding repetition – use archetypes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we create a Java project, we need to structure it in different ways based
    on the type of the project. If it's a Java EE web application then we need to
    have a WEB-INF directory and a `web.xml` file. If it's a Maven plugin project,
    we need to have a Mojo class, which extends from `org.apache.maven.plugin.AbstractMojo`.
    Since each type of project has its own predefined structure, why would everyone
    have to build the same structure again and again? Why don't we start with a template?
    Each project can have its own template and the developers can extend the template
    to suit their requirements. Maven archetypes address this concern. Each archetype
    is a project template.
  prefs: []
  type: TYPE_NORMAL
- en: We discussed Maven archetypes in detail, in [Chapter 3](ch03.html "Chapter 3. Maven
    Archetypes"), *Maven Archetypes*.
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding using maven.test.skip
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You may manage an extremely small project that does not evolve a lot without
    unit tests. But, any large-scale project cannot exist without unit tests. Unit
    tests provide the first level of guarantee that you do not break any existing
    functionality with a newly introduced code change. In an ideal scenario, you should
    not commit any code to a source repository without building the complete project
    with unit tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'Maven uses the `surefire` plugin to run tests and as a malpractice developers
    are used to skip the execution of unit tests by setting the `maven.test.skip`
    property to `true`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: This can lead to serious repercussions in the later stage of the project, and
    you must ensure that all your developers do not skip tests while building.
  prefs: []
  type: TYPE_NORMAL
- en: Using the `requireProperty` rule of the Maven `enforcer` plugin, you can ban
    developers from using the `maven.test.skip` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following shows the `enforcer` plugin configuration that you need to add
    to your application POM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if you run `mvn clean install` against your project, you will see the
    following error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'This means you need to specify `Dmaven.test.skip=false` every time you run
    `mvn clean install`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'But if you set `–Dmaven.test.skip=true`, then you will see the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Still, you will find it a bit annoying to type `–Dmaven.test.skip=false` whenever
    you run a build. To avoid that, into your application POM file, add the property
    `maven.test.skip` and set its value to `false`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More details about `requireProperty` rule are available at [http://maven.apache.org/enforcer/enforcer-rules/requireProperty.html](http://maven.apache.org/enforcer/enforcer-rules/requireProperty.html).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at and highlighted some of the best practices to
    be followed in a large-scale development project with Maven. Most of the points
    highlighted here were discussed in detail in previous chapters throughout the
    book. It is always recommended to follow best practices since it will drastically
    improve developer productivity and will reduce any maintenance nightmares.
  prefs: []
  type: TYPE_NORMAL
- en: Overall, the book covered Apache Maven 3 and its core concepts with examples,
    including Maven archetypes, plugins, assemblies, and lifecycles.
  prefs: []
  type: TYPE_NORMAL
