["```java\n import io.reactivex.Observable;\n\n public class Launcher {\n\n     public static void main(String[] args) {\n\n         Observable.range(1, 999_999_999)\n                 .map(MyItem::new)\n                 .subscribe(myItem -> {\n                     sleep(50);\n                     System.out.println(\"Received MyItem \" + myItem.id);\n                 });\n     }\n\n     static void sleep(long milliseconds) {\n         try {\n             Thread.sleep(milliseconds);\n         } catch (InterruptedException e) {\n             e.printStackTrace();\n         }\n     }\n\n     static final class MyItem {\n\n         final int id;\n\n         MyItem(int id) {\n             this.id = id;\n             System.out.println(\"Constructing MyItem \" + id);\n         }\n     }\n }\n```", "```java\n Constructing MyItem 1\n Received MyItem 1\n Constructing MyItem 2\n Received MyItem 2\n Constructing MyItem 3\n Received MyItem 3\n Constructing MyItem 4\n Received MyItem 4\n Constructing MyItem 5\n Received MyItem 5\n Constructing MyItem 6\n Received MyItem 6\n Constructing MyItem 7\n Received MyItem 7\n ...\n```", "```java\n import io.reactivex.Observable;\n import io.reactivex.schedulers.Schedulers;\n\n public class Launcher {\n\n     public static void main(String[] args) {\n\n         Observable.range(1, 999_999_999)\n                 .map(MyItem::new)\n                 .observeOn(Schedulers.io())\n                 .subscribe(myItem -> {\n                     sleep(50);\n                     System.out.println(\"Received MyItem \" + myItem.id);\n                 });\n\n         sleep(Long.MAX_VALUE);\n     }\n\n     static void sleep(long milliseconds) {\n         try {\n             Thread.sleep(milliseconds);\n         } catch (InterruptedException e) {\n             e.printStackTrace();\n         }\n     }\n\n     static final class MyItem {\n\n         final int id;\n\n         MyItem(int id) {\n             this.id = id;\n             System.out.println(\"Constructing MyItem \" + id);\n         }\n     }\n }\n```", "```java\n ...\n Constructing MyItem 1001899\n Constructing MyItem 1001900\n Constructing MyItem 1001901\n Constructing MyItem 1001902\n Received MyItem 38\n Constructing MyItem 1001903\n Constructing MyItem 1001904\n Constructing MyItem 1001905\n Constructing MyItem 1001906\n Constructing MyItem 1001907\n ..\n```", "```java\n import io.reactivex.Observable;\n import io.reactivex.schedulers.Schedulers;\n import io.reactivex.Flowable;\n\n public class Launcher {\n\n     public static void main(String[] args) {\n\n         Flowable.range(1, 999_999_999)\n                 .map(MyItem::new)\n                 .observeOn(Schedulers.io())\n                 .subscribe(myItem -> {\n                     sleep(50);\n                     System.out.println(\"Received MyItem \" + myItem.id);\n                 });\n\n         sleep(Long.MAX_VALUE);\n     }\n\n     static void sleep(long milliseconds) {\n         try {\n             Thread.sleep(milliseconds);\n         } catch (InterruptedException e) {\n             e.printStackTrace();\n         }\n     }\n\n     static final class MyItem {\n\n         final int id;\n\n         MyItem(int id) {\n             this.id = id;\n             System.out.println(\"Constructing MyItem \" + id);\n         }\n     }\n }\n```", "```java\n Constructing MyItem 1\n Constructing MyItem 2\n Constructing MyItem 3\n ...\n Constructing MyItem 127\n Constructing MyItem 128\n Received MyItem 1\n Received MyItem 2\n Received MyItem 3\n ...\n Received MyItem 95\n Received MyItem 96\n Constructing MyItem 129\n Constructing MyItem 130\n Constructing MyItem 131\n ...\n Constructing MyItem 223\n Constructing MyItem 224\n Received MyItem 97\n Received MyItem 98\n Received MyItem 99\n ...\n```", "```java\n import io.reactivex.Flowable;\n import io.reactivex.schedulers.Schedulers;\n import java.util.concurrent.ThreadLocalRandom;\n import java.util.concurrent.TimeUnit;\n public class Launcher {\n    public static void main(String[] args) {\n         Flowable.interval(1, TimeUnit.MILLISECONDS)\n                 .observeOn(Schedulers.io())\n                 .map(i -> intenseCalculation(i))\n                 .subscribe(System.out::println, Throwable::printStackTrace);\n        sleep(Long.MAX_VALUE);\n     }\n    public static <T> T intenseCalculation(T value) {\n         sleep(ThreadLocalRandom.current().nextInt(3000));\n         return value;\n     }\n     public static void sleep(long millis) {\n         try {\n             Thread.sleep(millis);\n         } catch (InterruptedException e) {\n             e.printStackTrace();\n         }\n     }\n }\n```", "```java\n0\nio.reactivex.exceptions.MissingBackpressureException: Cant deliver value 128 due to lack of requests\n    at io.reactivex.internal.operators.flowable.FlowableInterval\n  ...\n```", "```java\n import io.reactivex.Flowable;\n import io.reactivex.schedulers.Schedulers;\n import java.util.concurrent.ThreadLocalRandom;\npublic class Launcher {\n    public static void main(String[] args) {\n       Flowable.range(1,1000)\n                .doOnNext(s -> System.out.println(\"Source pushed \" + s))\n                .observeOn(Schedulers.io())\n                .map(i -> intenseCalculation(i))\n                .subscribe(s -> System.out.println(\"Subscriber received \" + s),\n                        Throwable::printStackTrace,\n                        () -> System.out.println(\"Done!\")\n                );\n        sleep(20000);\n     }\n     public static <T> T intenseCalculation(T value) {\n         *//sleep up to 200 milliseconds*\n         sleep(ThreadLocalRandom.current().nextInt(200));\n         return value;\n     }\n    public static void sleep(long millis) {\n         try {\n             Thread.sleep(millis);\n         } catch (InterruptedException e) {\n             e.printStackTrace();\n         }\n     }\n }\n```", "```java\n import io.reactivex.Flowable;\n import io.reactivex.schedulers.Schedulers;\n import org.reactivestreams.Subscriber;\n import org.reactivestreams.Subscription;\n import java.util.concurrent.ThreadLocalRandom;\n public class Launcher {\n    public static void main(String[] args) {\n       Flowable.range(1,1000)\n                .doOnNext(s -> System.out.println(\"Source pushed \" + s))\n                .observeOn(Schedulers.io())\n                .map(i -> intenseCalculation(i))\n                .subscribe(new Subscriber<Integer>() {\n                    @Override\n                    public void onSubscribe(Subscription subscription) {\n                        subscription.request(Long.MAX_VALUE);\n                    }\n                   @Override\n                    public void onNext(Integer s) {\n                        sleep(50);\n                        System.out.println(\"Subscriber received \" + s);\n                    }\n                   @Override\n                    public void onError(Throwable e) {\n                        e.printStackTrace();\n                    }\n                   @Override\n                    public void onComplete() {\n                        System.out.println(\"Done!\");\n                    }\n                });\n        sleep(20000);\n     }\n     public static <T> T intenseCalculation(T value) {\n         *//sleep up to 200 milliseconds*\n         sleep(ThreadLocalRandom.current().nextInt(200));\n         return value;\n     }\n    public static void sleep(long millis) {\n         try {\n             Thread.sleep(millis);\n         } catch (InterruptedException e) {\n             e.printStackTrace();\n         }\n     }\n }\n```", "```java\n import io.reactivex.Flowable;\n import io.reactivex.schedulers.Schedulers;\n import org.reactivestreams.Subscriber;\n import org.reactivestreams.Subscription;\n import java.util.concurrent.ThreadLocalRandom;\n import java.util.concurrent.atomic.AtomicInteger;\npublic class Launcher {\n    public static void main(String[] args) {\n       Flowable.range(1,1000)\n                .doOnNext(s -> System.out.println(\"Source pushed \" + s))\n                .observeOn(Schedulers.io())\n                .map(i -> intenseCalculation(i))\n                .subscribe(new Subscriber<Integer>() {\n                   Subscription subscription;\n                    AtomicInteger count = new AtomicInteger(0);\n                   @Override\n                    public void onSubscribe(Subscription subscription) {\n                        this.subscription = subscription;\n                        System.out.println(\"Requesting 40 items!\");\n                        subscription.request(40);\n                    }\n                   @Override\n                    public void onNext(Integer s) {\n                        sleep(50);\n                        System.out.println(\"Subscriber received \" + s);\n                       if (count.incrementAndGet() % 20 == 0 && count.get() >= 40)\n                            System.out.println(\"Requesting 20 more!\");\n                            subscription.request(20);\n                    }\n                   @Override\n                    public void onError(Throwable e) {\n                        e.printStackTrace();\n                    }\n                   @Override\n                    public void onComplete() {\n                        System.out.println(\"Done!\");\n                    }\n                });\n        sleep(20000);\n     }\n     public static <T> T intenseCalculation(T value) {\n         //sleep up to 200 milliseconds\n         sleep(ThreadLocalRandom.current().nextInt(200));\n         return value;\n     }\n    public static void sleep(long millis) {\n         try {\n             Thread.sleep(millis);\n         } catch (InterruptedException e) {\n             e.printStackTrace();\n         }\n     }\n }\n```", "```java\n Requesting 40 items!\n Source pushed 1\n Source pushed 2\n ...\n Source pushed 127\n Source pushed 128\n Subscriber received 1\n Subscriber received 2\n ...\n Subscriber received 39\n Subscriber received 40\n Requesting 20 more!\n Subscriber received 41\n Subscriber received 42\n ...\n Subscriber received 59\n Subscriber received 60\n Requesting 20 more!\n Subscriber received 61\n Subscriber received 62\n ...\n Subscriber received 79\n Subscriber received 80\n Requesting 20 more!\n Subscriber received 81\n Subscriber received 82\n ...\n```", "```java\nimport io.reactivex.Observable;\nimport io.reactivex.schedulers.Schedulers;\npublic class Launcher {\n    public static void main(String[] args) {\n        Observable<Integer> source = Observable.create(emitter -> {\n             for (int i=0; i<=1000; i++) {\n                 if (emitter.isDisposed())\n                     return;\n                emitter.onNext(i);\n             }\n            emitter.onComplete();\n         });\n        source.observeOn(Schedulers.io())\n                 .subscribe(System.out::println);\n        sleep(1000);\n     }\n }\n```", "```java\n 0\n 1\n 2\n 3\n 4\n ...\n```", "```java\n import io.reactivex.BackpressureStrategy;\n import io.reactivex.Flowable;\n import io.reactivex.schedulers.Schedulers;\npublic class Launcher {\n    public static void main(String[] args) {\n        Flowable<Integer> source = Flowable.create(emitter -> {\n             for (int i=0; i<=1000; i++) {\n                 if (emitter.isCancelled())\n                     return;\n                emitter.onNext(i);\n             }\n            emitter.onComplete();\n         }, BackpressureStrategy.BUFFER);\n        source.observeOn(Schedulers.io())\n                 .subscribe(System.out::println);\n        sleep(1000);\n     }\n    public static void sleep(long millis) {\n         try {\n             Thread.sleep(millis);\n         } catch (InterruptedException e) {\n             e.printStackTrace();\n         }\n     }\n }\n```", "```java\n 0\n 1\n 2\n 3\n 4\n ...\n```", "```java\n import io.reactivex.BackpressureStrategy;\n import io.reactivex.Observable;\n import io.reactivex.schedulers.Schedulers;\npublic class Launcher {\n    public static void main(String[] args) {\n        Observable<Integer> source = Observable.range(1,1000);\n        source.toFlowable(BackpressureStrategy.BUFFER)\n                 .observeOn(Schedulers.io())\n                 .subscribe(System.out::println);\n        sleep(10000);\n     }\n    public static void sleep(long millis) {\n         try {\n             Thread.sleep(millis);\n         } catch (InterruptedException e) {\n             e.printStackTrace();\n         }\n     }\n }\n```", "```java\n import io.reactivex.Flowable;\n import io.reactivex.Observable;\n import io.reactivex.schedulers.Schedulers;\npublic class Launcher {\n    public static void main(String[] args) {\n        Flowable<Integer> integers =\n                 Flowable.range(1, 1000)\n                         .subscribeOn(Schedulers.computation());\n        Observable.just(\"Alpha\",\"Beta\",\"Gamma\",\"Delta\",\"Epsilon\")\n                 .flatMap(s -> integers.map(i -> i + \"-\" + s).toObservable())\n                 .subscribe(System.out::println);\n        sleep(5000);\n     }\n    public static void sleep(long millis) {\n         try {\n             Thread.sleep(millis);\n         } catch (InterruptedException e) {\n             e.printStackTrace();\n         }\n     }\n }\n```", "```java\nimport io.reactivex.Flowable;\n import io.reactivex.schedulers.Schedulers;\n import java.util.concurrent.TimeUnit;\npublic class Launcher {\n    public static void main(String[] args) {\n        Flowable.interval(1, TimeUnit.MILLISECONDS)\n                 .onBackpressureBuffer()\n                 .observeOn(Schedulers.io())\n                 .subscribe(i -> {\n                     sleep(5);\n                     System.out.println(i);\n                 });\n        sleep(5000);\n     }\n    public static void sleep(long millis) {\n         try {\n             Thread.sleep(millis);\n         } catch (InterruptedException e) {\n             e.printStackTrace();\n         }\n     }\n }\n```", "```java\n 0\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n ...\n```", "```java\nimport io.reactivex.BackpressureOverflowStrategy;\n import io.reactivex.Flowable;\n import io.reactivex.schedulers.Schedulers;\n import java.util.concurrent.TimeUnit;\npublic class Launcher {\n    public static void main(String[] args) {\n        Flowable.interval(1, TimeUnit.MILLISECONDS)\n                 .onBackpressureBuffer(10,\n                         () -> System.out.println(\"overflow!\"),\n                         BackpressureOverflowStrategy.DROP_LATEST)\n                 .observeOn(Schedulers.io())\n                 .subscribe(i -> {\n                     sleep(5);\n                     System.out.println(i);\n                 });\n        sleep(5000);\n     }\n    public static void sleep(long millis) {\n         try {\n             Thread.sleep(millis);\n         } catch (InterruptedException e) {\n             e.printStackTrace();\n         }\n     }\n }\n```", "```java\n ...\n overflow!\n overflow!\n 135\n overflow!\n overflow!\n overflow!\n overflow!\n overflow!\n 136\n overflow!\n overflow!\n overflow!\n overflow!\n overflow!\n 492\n overflow!\n overflow!\n overflow!\n ...\n```", "```java\nimport io.reactivex.Flowable;\n import io.reactivex.schedulers.Schedulers;\nimport java.util.concurrent.TimeUnit;\npublic class Launcher {\n    public static void main(String[] args) {\n        Flowable.interval(1, TimeUnit.MILLISECONDS)\n                 .onBackpressureLatest()\n                 .observeOn(Schedulers.io())\n                 .subscribe(i -> {\n                     sleep(5);\n                     System.out.println(i);\n                 });\n        sleep(5000);\n     }\n    public static void sleep(long millis) {\n         try {\n             Thread.sleep(millis);\n         } catch (InterruptedException e) {\n             e.printStackTrace();\n         }\n     }\n }\n```", "```java\n ...\n 122\n 123\n 124\n 125\n 126\n 127\n 494\n 495\n 496\n 497\n ...\n```", "```java\nimport io.reactivex.Flowable;\n import io.reactivex.schedulers.Schedulers;\n import java.util.concurrent.TimeUnit;\npublic class Launcher {\n    public static void main(String[] args) {\n        Flowable.interval(1, TimeUnit.MILLISECONDS)\n                 .onBackpressureDrop(i -> System.out.println(\"Dropping \" + i))\n                 .observeOn(Schedulers.io())\n                 .subscribe(i -> {\n                     sleep(5);\n                     System.out.println(i);\n                 });\n        sleep(5000);\n     }\n    public static void sleep(long millis) {\n         try {\n             Thread.sleep(millis);\n         } catch (InterruptedException e) {\n             e.printStackTrace();\n         }\n     }\n }\n```", "```java\n ...\n Dropping 653\n Dropping 654\n Dropping 655\n Dropping 656\n 127\n Dropping 657\n Dropping 658\n Dropping 659\n Dropping 660\n Dropping 661\n 493\n Dropping 662\n Dropping 663\n Dropping 664\n ...\n```", "```java\nimport io.reactivex.Flowable;\n import io.reactivex.schedulers.Schedulers;\n import java.util.concurrent.ThreadLocalRandom;\npublic class Launcher {\n    public static void main(String[] args) {\n        randomGenerator(1,10000)\n                 .subscribeOn(Schedulers.computation())\n                 .doOnNext(i -> System.out.println(\"Emitting \" + i))\n                 .observeOn(Schedulers.io())\n                 .subscribe(i -> {\n                     sleep(50);\n                     System.out.println(\"Received \" + i);\n                 });\n        sleep(10000);\n     }\n    static Flowable<Integer> randomGenerator(int min, int max) {\n         return Flowable.generate(emitter ->\n                 emitter.onNext(ThreadLocalRandom.current().nextInt(min, max))\n         );\n     }\n    public static void sleep(long millis) {\n         try {\n             Thread.sleep(millis);\n         } catch (InterruptedException e) {\n             e.printStackTrace();\n         }\n     }\n }\n```", "```java\n ...\n Emitting 8014\n Emitting 3112\n Emitting 5958\n Emitting 4834 //128th emission\n Received 9563\n Received 4359\n Received 9362\n ...\n Received 4880\n Received 3192\n Received 979 //96th emission\n Emitting 8268\n Emitting 3889\n Emitting 2595\n...\n```", "```java\nimport io.reactivex.Flowable;\n import io.reactivex.schedulers.Schedulers;\n import java.util.concurrent.atomic.AtomicInteger;\npublic class Launcher {\n    public static void main(String[] args) {\n        rangeReverse(100,-100)\n                 .subscribeOn(Schedulers.computation())\n                 .doOnNext(i -> System.out.println(\"Emitting \" + i))\n                 .observeOn(Schedulers.io())\n                 .subscribe(i -> {\n                     sleep(50);\n                     System.out.println(\"Received \" + i);\n                 });\n        sleep(50000);\n     }\n    static Flowable<Integer> rangeReverse(int upperBound, int lowerBound) {\n         return Flowable.generate(() -> new AtomicInteger(upperBound + 1),\n                 (state, emitter) -> {\n                     int current = state.decrementAndGet();\n                     emitter.onNext(current);\n                     if (current == lowerBound)\n                         emitter.onComplete();\n                 }\n         );\n     }\n    public static void sleep(long millis) {\n         try {\n             Thread.sleep(millis);\n         } catch (InterruptedException e) {\n             e.printStackTrace();\n         }\n     }\n }\n```", "```java\n Emitting 100\n Emitting 99\n ...\n Emitting -25\n Emitting -26\n Emitting -27 //128th emission\n Received 100\n Received 99\n Received 98\n ...\n Received 7\n Received 6\n Received 5 // 96th emission\n Emitting -28\n Emitting -29\n Emitting -30\n```"]