- en: MicroProfile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will provide an overview of the Eclipse MicroProfile project, covering
    its goals, the expectations of its outcome, when it should be used, and the benefits
    of using it to develop our application. This chapter is only an overview and we
    will not explore how to implement applications using the MicroProfile project.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the central topic that will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Explaining the Eclipse MicroProfile project approach
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explaining the Eclipse MicroProfile project approach
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Today, the use of microservices architecture is rapidly increasing. New tools
    have emerged to facilitate and develop microservice applications using MicroProfile
    patterns and best practices. The Eclipse MicroProfile project was created in order
    to make it possible to develop applications with microservices architecture, using
    the power of Java EE to optimize the Enterprise Java for microservices architecture.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Eclipse MicroProfile project is an umbrella of specs used to develop applications
    with microservices architecture. This umbrella contains some specs of Java EE
    and some proprietary specs (created with Eclipse MicroProfile). With this, the
    Eclipse MicroProfile project allows us to develop microservice applications using
    specifications of Java EE, such as CDI, JAX-RS, and JSON-B. Furthermore, the MicroProfile
    project provides portable microservices architecture across multiple Enterprise
    Java runtimes and permits interoperable microservices architecture, which allows
    communication among polyglot runtimes (not just Java). So far, the current version
    of the Eclipse MicroProfile project is 2.0 and has the following specifications:'
  prefs: []
  type: TYPE_NORMAL
- en: Eclipse MicroProfile Config 1.3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eclipse MicroProfile Fault Tolerance 1.1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eclipse MicroProfile Health Check 1.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eclipse MicroProfile JWT Authentication 1.1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eclipse MicroProfile Metrics 1.1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eclipse MicroProfile OpenAPI 1.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eclipse MicroProfile OpenTracing 1.1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eclipse MicroProfile Rest Client 1.1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CDI 2.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common Annotations 1.3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JAX-RS 2.1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JSON-B 1.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JSON-P 1.1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The MicroProfile project was designed to be portable across multiples runtimes,
    but it is only portable if we develop it using the preceding specifications. If
    we use an additional API or framework, portability is not guaranteed. Furthermore,
    the MicroProfile project supports Java 8 but does not support Java 7 and earlier
    versions.
  prefs: []
  type: TYPE_NORMAL
- en: Eclipse MicroProfile Config 1.3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Applications need to read configurations on the same internal or external location.
    The Eclipse MicroProfile Config 1.3 makes it possible to obtain configuration
    properties from some internal or external sources to the application, made available
    through dependency injection or lookup. With this, we can implement an external
    configuration store pattern and consume the configuration properties. The format
    of configurations can be system properties, system environment variables, `.properties`,
    `.xml`, or data source.
  prefs: []
  type: TYPE_NORMAL
- en: Eclipse MicroProfile Fault Tolerance 1.1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Applications using a microservices architecture need to have fault tolerance. Fault
    tolerance is about leveraging different strategies to guide the execution and
    the result of logic. Eclipse MicroProfile Fault Tolerance 1.1 provides the ability
    to decouple the business logic from the execution logic separating these logics.
    With this, we can process an API, such as TimeOut, RetryPolicy, Fallback, Bulkhead,
    and Circuit Breaker, which are the most popular concepts used with microservices.
  prefs: []
  type: TYPE_NORMAL
- en: Eclipse MicroProfile Health Check 1.0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a microservices architecture, the ability to promote a health check of services
    is very important when it comes to detecting faults. Eclipse MicroProfile Health
    Check 1.0 provides the ability to verify the state of a computing node from another
    machine. With this, we can implement the health endpoint monitoring patternusing
    a MicroProfile project feature, as described in [Chapter 11](2f8a0a53-0ca6-4f8f-8248-d62db3021f4c.xhtml),* Operational
    Patterns.*
  prefs: []
  type: TYPE_NORMAL
- en: Eclipse MicroProfile JWT authentication 1.1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Today, microservices architecture is most commonly implemented using the RESTful
    architecture style. However, the RESTful architecture style works with stateless
    services and does not provide its own security. Thus, the most common practice
    is to create services with token-based security. Eclipse MicroProfile JWT Authentication
    1.1 provides **role-based access control** (**RBAC**), microservice endpoints
    using **OpenID Connect** (**OIDC**), and **JSON Web Tokens** (**JWT**).
  prefs: []
  type: TYPE_NORMAL
- en: Eclipse MicroProfile Metrics 1.1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Metrics are very important to microservices architecture. This is because they
    allow us to better evaluate our services. Eclipse MicroProfile Metrics 1.1 provides
    a unified way for MicroProfile servers to export monitoring data to management
    agents. Metrics will also provide a common Java API for exposing their telemetry
    data. This feature can be used to generate information about the application,
    making it possible to implement the health endpoint monitoring pattern in order
    to allow this pattern to evaluate our services better.
  prefs: []
  type: TYPE_NORMAL
- en: Eclipse MicroProfile OpenAPI 1.0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we develop a microservice application, we create services that communicate
    between themselves. With this, the API documentation is very important for minimizing
    errors by not knowing the contract. Consequently, the Eclipse MicroProfile OpenAPI
    1.0 provides a unified Java API for the OpenAPI v3 specification that all application
    developers can use to expose their API documentation. We can, therefore, create
    a contract between services, and the API is exposed.
  prefs: []
  type: TYPE_NORMAL
- en: Eclipse MicroProfile OpenTracing 1.1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a microservice application, analyzing or debugging operation workflows is
    difficult. To facilitate debugging, we can use OpenTracing. OpenTracing is a standard
    API for instrumenting microservices for distributed tracing, which helps to troubleshoot
    microservices by examining and logging requests as they propagate through a distributed
    system.
  prefs: []
  type: TYPE_NORMAL
- en: Eclipse MicroProfile OpenTracing 1.1 defines an API and associated behaviors
    that allow services to easily participate in a distributed tracing environment.
    With this, we can analyze or debug a workflow of operations without adding any
    code in order to complete the tracing.
  prefs: []
  type: TYPE_NORMAL
- en: Eclipse MicroProfile REST Client 1.1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a microservices architecture, communication is generally effected by an HTTP
    protocol using RESTful. We then need to create a client that sends an HTTP request obeying
    the defined contract. In this case, the Eclipse MicroProfile REST client provides
    a type-safe approach for invoking RESTful services over HTTP. The MicroProfile
    REST client builds upon the JAX-RS 2.1 APIs for consistency and ease of use.
  prefs: []
  type: TYPE_NORMAL
- en: CDI 2.0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The MicroProfile project has a Java EE specification embedded inside itself.
    One of these specifications is CDI, which provides the base for a growing number
    of APIs included in MicroProfile 2.0\. The use of implementations beyond CDI 2.0
    in MicroProfile is allowed but not required, as of version 2.0 of MicroProfile.
  prefs: []
  type: TYPE_NORMAL
- en: Common annotations 1.3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The MicroProfile project has some Java EE specifications embedded inside itself.
    One of these specifications is Common annotations, which provides annotations
    for common semantic concepts across a variety of individual technologies in the
    Java SE and Java EE platforms. The use of implementations beyond Common annotations
    1.3 in MicroProfile is allowed but not required, as of version 2.0 of MicroProfile.
  prefs: []
  type: TYPE_NORMAL
- en: JAX-RS 2.1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Eclipse MicroProfile project has Java EE specifications embedded inside
    itself. One of these specifications is JAX-RS, which provides both standard client
    and server APIs for RESTful communication by MicroProfile 2.0 applications. The
    use of implementations beyond JAX-RS 2.1 in MicroProfile is allowed but not required,
    as of version 2.0 of MicroProfile.
  prefs: []
  type: TYPE_NORMAL
- en: JSON-B 1.0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another of the Java EE specifications embedded in the MicroProfile project is
    JSON-B, which is included as part of MicroProfile 2.0 to provide standard APIs
    for binding JSON documents to Java code. The use of implementations beyond JSON-B
    1.0 in MicroProfile is allowed but not required, as of version 2.0 of MicroProfile.
  prefs: []
  type: TYPE_NORMAL
- en: JSON-P 1.1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another Java EE specification embedded in The MicroProfile project is JSON-P,
    which is part of MicroProfile 2.0 and designed to provide standard APIs for processing
    JSON documents. The use of implementations beyond JSON-P 1.1 in MicroProfile is
    allowed but not required, as of version 2.0 of MicroProfile.
  prefs: []
  type: TYPE_NORMAL
- en: Why should we use the MicroProfile project?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the MicroProfile project, we can create applications with microservices
    architecture using features of Java EE and running on Java EE runtimes. Furthermore,
    using MicroProfiles means that we can create applications with features of metrics,
    fault tolerance, documentation, separate configurations of the application, and
    easy debugging, including a decoupled business code from the code of these features.
  prefs: []
  type: TYPE_NORMAL
- en: Java EE is a widely-tested umbrella of specifications. The idea behind using
    these specifications to create applications with microservices architecture is
    highly beneficial; the use of specifications makes users free from vendors and
    also makes the application portable across runtimes.
  prefs: []
  type: TYPE_NORMAL
- en: Community
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Eclipse MicroProfile project is maintained by the MicroProfile community
    ([http://microprofile.io/](http://microprofile.io/)), which is a semi-new community.
    The main players in this group are IBM, Red Hat, Tomitribe, Payara, the **London
    Java Community** (**LJC**), and SouJava. The aim of this project is to be a community-based
    project. It also aims to iterate and innovate in short cycles, get community approval,
    release a new version, and repeat. With the growth of applications developed with
    a microservices architecture, the use of MicroProfile will increase and other
    features will also be introduced, ultimately growing the power of MicroProfile.
  prefs: []
  type: TYPE_NORMAL
- en: Future work
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Eclipse MicroProfile project has supported some Java EE specifications,
    but the aim is to grow this support and add other Java EE specifications. The
    expectation is that the following specifications are the next to be inserted into
    the MicroProfile project:'
  prefs: []
  type: TYPE_NORMAL
- en: JCache
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Persistence
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bean validation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WebSockets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at an overview of the Eclipse MicroProfile project.
    Within this overview, we discussed what the Eclipse MicroProfile project is, what
    its specifications are, why we use the MicroProfile project, and what future developments
    are in store for the Eclipse MicroProfile project.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter is only intended to be an overview and doesn't aim to teach us
    how to use MicroProfile. If you want to learn more about the Eclipse MicroProfile
    project, please visit [https://projects.eclipse.org/projects/technology.microprofile/releases/microprofile-2.0](https://projects.eclipse.org/projects/technology.microprofile/releases/microprofile-2.0).
  prefs: []
  type: TYPE_NORMAL
