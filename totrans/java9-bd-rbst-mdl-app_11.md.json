["```java\n    private static final Logger LOG = Logger.getLogger(MyClass.class); \n```", "```java\n    package packt.java9.deep.stackwalker.myrestrictivelibrary; \n    public class RestrictedAPI { \n      public void hello(){ \n        CheckEligibility.itIsNotCallBack(); \n        System.out.println(\"hello\"); \n      } \n      public void callMe(Runnable cb){ \n        cb.run(); \n      } \n    } \n```", "```java\n    package packt.java9.deep.stackwalker.externalcode; \n\n    import\n     packt.java9.deep.stackwalker.myrestrictivelibrary.RestrictedAPI; \n\n    public class DirectCall { \n\n      public static void main(String[] args) { \n        RestrictedAPI api = new RestrictedAPI(); \n        api.hello(); \n        api.callMe(() -> { \n            api.hello(); \n        }); \n      } \n    } \n```", "```java\n    package packt.java9.deep.stackwalker.myrestrictivelibrary; \n\n    import static java.lang.StackWalker.Option.RETAIN_CLASS_REFERENCE; \n\n    public class CheckEligibility { \n      private static final String packageName \n        = CheckEligibility.class.getPackageName(); \n\n      private static boolean notInLibrary(StackWalker.StackFrame f) { \n        return !inLibrary(f); \n      } \n\n      private static boolean inLibrary(StackWalker.StackFrame f) { \n        return f.getDeclaringClass().getPackageName() \n         .equals(packageName); \n      } \n\n      public static void itIsNotCallBack() { \n        boolean eligible = StackWalker \n         .getInstance(RETAIN_CLASS_REFERENCE) \n         .walk(s -> s.dropWhile(CheckEligibility::inLibrary) \n           .dropWhile(CheckEligibility::notInLibrary) \n           .count() == 0 \n         ); \n         if (!eligible) { \n           throw new IllegalCallerException(); \n         } \n      } \n    } \n```", "```java\n    package packt.java9.deep.stackwalker.logretriever; \n\n    import java.lang.System.Logger; \n    import java.lang.System.LoggerFinder; \n\n    import static java.lang.StackWalker.Option.RETAIN_CLASS_REFERENCE; \n\n    public class Labrador { \n      public static Logger retrieve() { \n        final Class clazz = StackWalker \n          .getInstance(RETAIN_CLASS_REFERENCE) \n          .getCallerClass(); \n        return LoggerFinder.getLoggerFinder().getLogger( \n          clazz.getCanonicalName(), clazz.getModule()); \n      } \n    } \n```", "```java\n    package packt; \n    import static java.lang.StackWalker.Option.SHOW_HIDDEN_FRAMES; \n    import static java.lang.StackWalker.Option.SHOW_REFLECT_FRAMES; \n    public class Main { \n```", "```java\n    public static void main(String[] args) { \n      simpleCall(); \n    } \n```", "```java\n    static void simpleCall() { \n      reflectCall(); \n    } \n```", "```java\n    static void reflectCall() { \n      try { \n        Main.class.getDeclaredMethod(\"lambdaCall\", \n          new Class[0]) \n           .invoke(null, new Object[0]); \n      } catch (Exception e) { \n          throw new RuntimeException(); \n      } \n    } \n```", "```java\n    static void lambdaCall() { \n      Runnable r = () -> { \n        walk(); \n      }; \n      r.run(); \n    } \n```", "```java\n    static void walk() { \n      noOptions(); \n      System.out.println(); \n      reflect(); \n      System.out.println(); \n      hidden(); \n    } \n```", "```java\n    static void noOptions() { \n      StackWalker \n        .getInstance() \n        .forEach(System.out::println); \n    } \n\n    static void reflect() { \n      StackWalker \n        .getInstance(SHOW_REFLECT_FRAMES) \n        .forEach(System.out::println); \n    } \n\n    static void hidden() { \n      StackWalker \n        // shows also reflect frames \n        .getInstance(SHOW_HIDDEN_FRAMES) \n        .forEach(System.out::println); \n    } \n```", "```java\nstackwalker/packt.Main.noOptions(Main.java:45) \nstackwalker/packt.Main.walk(Main.java:34) \nstackwalker/packt.Main.lambda$lambdaCall$0(Main.java:28) \nstackwalker/packt.Main.lambdaCall(Main.java:30) \nstackwalker/packt.Main.reflectCall(Main.java:19) \nstackwalker/packt.Main.simpleCall(Main.java:12) \nstackwalker/packt.Main.main(Main.java:8) \n```", "```java\nstackwalker/packt.Main.reflect(Main.java:58) \nstackwalker/packt.Main.walk(Main.java:36) \nstackwalker/packt.Main.lambda$lambdaCall$0(Main.java:28) \nstackwalker/packt.Main.lambdaCall(Main.java:30) \njava.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) \njava.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) \njava.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) \njava.base/java.lang.reflect.Method.invoke(Method.java:547) \nstackwalker/packt.Main.reflectCall(Main.java:19) \nstackwalker/packt.Main.simpleCall(Main.java:12) \nstackwalker/packt.Main.main(Main.java:8) \n```", "```java\nstackwalker/packt.Main.hidden(Main.java:52) \nstackwalker/packt.Main.walk(Main.java:38) \nstackwalker/packt.Main.lambda$lambdaCall$0(Main.java:28) \nstackwalker/packt.Main$$Lambda$46/269468037.run(Unknown Source) \nstackwalker/packt.Main.lambdaCall(Main.java:30) \njava.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) \njava.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) \njava.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) \njava.base/java.lang.reflect.Method.invoke(Method.java:547) \nstackwalker/packt.Main.reflectCall(Main.java:19) \nstackwalker/packt.Main.simpleCall(Main.java:12) \nstackwalker/packt.Main.main(Main.java:8) \n```", "```java\n    // EXAMPLE OF WHAT NOT TO DO!!!! \n    public static void itIsNotCallBack() { \n      Stream<StackWalker.StackFrame> stream = \n        StackWalker \n          .getInstance(RETAIN_CLASS_REFERENCE) \n          .walk(s -> s); \n      boolean eligible = // YOU GET EXCEPTION!!!! \n        stream.dropWhile(CheckEligibility::inLibrary) \n          .dropWhile(CheckEligibility::notInLibrary) \n          .count() == 0; \n      if (!eligible) { \n        throw new IllegalCallerException(); \n      } \n    } \n```"]