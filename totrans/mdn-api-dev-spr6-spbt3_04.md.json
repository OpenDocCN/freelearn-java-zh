["```java\nimplementation 'org.springframework.boot:spring-boot-starter-data-jpa'implementation 'org.flywaydb:flyway-core'\nruntimeOnly    'com.h2database:h2'\n```", "```java\n    spring.datasource.name=ecommspring.datasource.url=jdbc:h2:mem:ecomm;DB_CLOSE_DELAY=-1;IGNORECASE=TRUE;DATABASE_TO_UPPER=falsespring.datasource.driverClassName=org.h2.Driverspring.datasource.username=saspring.datasource.password=\n    ```", "```java\n    spring.h2.console.enabled=truespring.h2.console.settings.web-allow-others=false\n    ```", "```java\n    spring.jpa.properties.hibernate.default_schema=ecommspring.jpa.database-platform=org.hibernate.dialect.H2Dialectspring.jpa.show-sql=truespring.jpa.format_sql=truespring.jpa.generate-ddl=falsespring.jpa.hibernate.ddl-auto=none\n    ```", "```java\n    spring.flyway.url=jdbc:h2:mem:ecommspring.flyway.schemas=ecommspring.flyway.user=saspring.flyway.password=\n    ```", "```java\ncreate schema if not exists ecomm;create TABLE IF NOT EXISTS ecomm.product (\n   id uuid NOT NULL DEFAULT random_uuid(),\n   name varchar(56) NOT NULL,\n   description varchar(200),\n   price numeric(16, 4) DEFAULT 0 NOT NULL,\n   count numeric(8, 0),\n   image_url varchar(40),\n   PRIMARY KEY(id)\n);\ncreate TABLE IF NOT EXISTS ecomm.tag (\n   id uuid NOT NULL DEFAULT random_uuid(),\n   name varchar(20),\n   PRIMARY KEY(id)\n);\n-- Other code is removed for brevity\n```", "```java\n@Entity@Table(name = \"cart\")\npublic class CartEntity {\n @Id\n @GeneratedValue\n @Column(name = \"ID\", updatable = false, nullable = false)\n private UUID id;\n @OneToOne\n @JoinColumn(name = \"USER_ID\", referencedColumnName = \"ID\")\n private UserEntity user;\n @ManyToMany( cascade = CascadeType.ALL )\n @JoinTable(\n  name = \"CART_ITEM\",\n  joinColumns = @JoinColumn(name = \"CART_ID\"),\n  inverseJoinColumns = @JoinColumn(name = \"ITEM_ID\")\n )\n private List<ItemEntity> items = Collections.emptyList();\n // Getters/Setter and other codes are removed for brevity\n```", "```java\n@Entity@Table(name = \"user\")\npublic class UserEntity {\n// other code\n@OneToOne(mappedBy = \"user\", fetch = FetchType.LAZY, orphanRemoval = true)\nprivate CartEntity cart;\n// other code…\n```", "```java\npublic interface CartRepository extends    CrudRepository<CartEntity, UUID> {\n  @Query(\"select c from CartEntity c join c.user u\n    where u.id = :customerId\")\n  public Optional<CartEntity> findByCustomerId(\n      @Param(\"customerId\") UUID customerId);\n}\n```", "```java\n@Repositorypublic interface OrderRepository extends\n    CrudRepository<OrderEntity, UUID>, OrderRepositoryExt {\n  @Query(\"select o from OrderEntity o join o.userEntity u\n    where u.id = :customerId\")\n  public Iterable<OrderEntity> findByCustomerId(\n      @Param(\"customerId\") UUID customerId);\n}\n```", "```java\npublic interface OrderRepositoryExt {  Optional<OrderEntity> insert(NewOrder m);\n}\n```", "```java\n@Repository@Transactional\npublic class OrderRepositoryImpl implements\n  OrderRepositoryExt {\n  @PersistenceContext\n  private EntityManager em;\n  private final ItemRepository itemRepo;\n  private final CartRepository cRepo;\n  private final OrderItemRepository oiRepo;\n  public OrderRepositoryImpl(EntityManager em,CartRepository cRepo,       OrderItemRepository oiRepo) {\n    this.em = em;\n    this.cRepo = cRepo;\n    this.oiRepo= oiRepo;\n}\n// rest of the code\n```", "```java\n@Overridepublic Optional<OrderEntity> insert(NewOrder m) {\n Iterable<ItemEntity> dbItems = itemRepo.findByCustomerId(m.getCustomerId());\n List<ItemEntity> items = StreamSupport.stream(\n            dbItems.spliterator(), false).collect\n              (toList());\n if (items.size() < 1) {\n  throw new ResourceNotFoundException(String.format(\"There\n     is no item found in customer's (ID: %s) cart.\",\n        m.getCustomerId()));\n }\n BigDecimal total = BigDecimal.ZERO;\n for (ItemEntity i : items) {\n   total = (BigDecimal.valueOf(i.getQuantity()).multiply(\n      i.getPrice())).add(total);\n }\n Timestamp orderDate = Timestamp.from(Instant.now());\n em.createNativeQuery(\"\"\"\n  INSERT INTO ecomm.orders (address_id, card_id,\n    customer_id\n  order_date, total, status) VALUES(?, ?, ?, ?, ?, ?)\n  \"\"\")\n .setParameter(1, m.getAddress().getId())\n .setParameter(2, m.getCard().getId())\n .setParameter(3, m.getCustomerId())\n .setParameter(4, orderDate)\n .setParameter(5, total)\n .setParameter(6, StatusEnum.CREATED.getValue())\n .executeUpdate();\n Optional<CartEntity> oCart =\n  cRepo.findByCustomerId(UUID.fromString\n   (m. getCustomerId()));\n CartEntity cart = oCart.orElseThrow(() -> new\n  ResourceNotFoundException(String.format\n(\"Cart not found for given customer (ID: %s)\", m.getCustomerId())));\n itemRepo.deleteCartItemJoinById(cart.getItems().stream()\n  .map(i -> i.getId()).collect(toList()), cart. getId());\n OrderEntity entity = (OrderEntity)\n    em.createNativeQuery(\"\"\"\n SELECT o.* FROM ecomm.orders o WHERE o.customer_id = ? AND\n o.order_date >= ?\n \"\"\", OrderEntity.class)\n .setParameter(1, m.getCustomerId())\n .setParameter(2, OffsetDateTime.ofInstant(orderDate.\n   toInstant(),ZoneId.of(\"Z\")).truncatedTo(ChronoUnit.MICROS))\n    .getSingleResult();\n oiRepo.saveAll(cart.getItems().stream()\n  .map(i -> new OrderItemEntity().setOrderId\n    (entity. getId())\n  .setItemId(i.getId())).collect(toList()));\n return Optional.of(entity);\n}\n```", "```java\npublic interface CartService {  public List<Item> addCartItemsByCustomerId(String customerId, @Valid Item item);\n  public List<Item> addOrReplaceItemsByCustomerId(String customerId, @Valid Item item);\n  public void deleteCart(String customerId);\n  public void deleteItemFromCart(String customerId, String itemId);\n  public CartEntity getCartByCustomerId(String customerId);\n  public List<Item> getCartItemsByCustomerId(String customerId);\n  public Item getCartItemsByItemId(String customerId, String itemId);\n}\n```", "```java\n@Overridepublic List<Item> addOrReplaceItemsByCustomerId(\n  String customerId, @Valid Item item) {\n  // 1\n  CartEntity entity = getCartByCustomerId(customerId);\n  List<ItemEntity> items = Objects.nonNull\n    (entity.getItems())\n               ? entity.getItems() : Collections.\n                 emptyList();\n  AtomicBoolean itemExists = new AtomicBoolean(false);\n  // 2\n  items.forEach(i -> {\n    if(i.getProduct().getId().equals(UUID.fromString(\n        item.getId()))) {\n     i.setQuantity(item.getQuantity()).\n       setPrice(i.getPrice());\n     itemExists.set(true);\n    }\n  });\n  if (!itemExists.get()) {\n    items.add(itemService.toEntity(item));\n  }\n  // 3\n  return itemService.toModelList(\n       repository.save(entity).getItems());\n}\n```", "```java\nimport static org.springframework.hateoas.server.mvc. WebMvcLinkBuilder.linkTo;import static org.springframework.hateoas.server.mvc. WebMvcLinkBuilder.methodOn;\n// other code blocks…\nresponseModel.setSelf(linkTo(methodOn(CartController.class)  .getItemsByUserId(userId,item)).withSelfRel())\n```", "```java\npublic class Cart extends RepresentationModel<Cart>implements Serializable {  private static final long serialVersionUID = 1L;\n  @JsonProperty(\"id\")\n  private String id;\n  @JsonProperty(\"customerId\")\n  @JacksonXmlProperty(localName = \"customerId\")\n  private String customerId;Implementing hypermedia 101\n  @JsonProperty(\"items\")\n  @JacksonXmlProperty(localName = \"items\")\n  @Valid\n  private List<Item> items = null;\n  // Rest of the code is removed for brevity\n```", "```java\n{  // …\n  \"apiPackage\": \"com.packt.modern.api\",\n  \"invokerPackage\": \"com.packt.modern.api\",\n  \"serializableModel\": true,\n  \"useTags\": true,\n  \"useGzipFeature\": true,\n  \"hateoas\": true,\n  \"unhandledException\": true,\n  // …\n}\n```", "```java\n@Componentpublic class CartRepresentationModelAssembler extends\n    RepresentationModelAssemblerSupport<CartEntity, Cart> {\n  private final ItemService itemService;\n  public CartRepresentationModelAssembler(ItemService itemService) {\n    super(CartsController.class, Cart.class);\n    this.itemService = itemService;\n  }\n  @Override\n  public Cart toModel(CartEntity entity) {\n    String uid = Objects.nonNull(entity.getUser()) ?\n      entity.getUser().getId().toString() : null;\n    String cid = Objects.nonNull(entity.getId()) ?\n       entity.getId().toString() : null;\n    Cart resource = new Cart();\n    BeanUtils.copyProperties(entity, resource);\n    resource.id(cid).customerId(uid)\n      .items(itemService.toModelList(entity.getItems()));\n    resource.add(linkTo(methodOn(CartsController.class)\n      .getCartByCustomerId(uid)).withSelfRel());\n    resource.add(linkTo(methodOn(CartsController.class)\n     .getCartItemsByCustomerId(uid))\n        .withRel(\"cart-items\"));\n    return resource;\n  }\n  public List<Cart> toListModel(\n     Iterable<CartEntity> entities) {\n    if (Objects.isNull(entities)){return List.of();}\n    return StreamSupport.stream(\n       entities.spliterator(), false).map(this::toModel)\n       .collect(toList());\n  }\n}\n```", "```java\n@Overridepublic Order process(Order model) {\n  model.add(Link.of(\"/payments/{orderId}\").withRel(\n    LinkRelation.of(\"payments\")).expand(model.getOrderId()));\n  return model;\n}\n```", "```java\n@RestControllerpublic class CartsController implements CartApi {\n  private CartService service;\n  private final CartRepresentationModelAssembler assembler;\n  public CartsController(CartService service,\n     CartRepresentationModelAssembler assembler) {\n    this.service = service;\n    this.assembler = assembler;\n  }\n```", "```java\n@Overridepublic ResponseEntity<Cart> getCartByCustomerId(  String customerId) {\n  return ok(assembler.toModel(service.getCartByCustomerId\n   (customerId)));\n}\n```", "```java\n$ curl -v --location --request GET 'http://localhost:8080/ api/v1/products/6d62d909-f957-430e-8689-b5129c0bb75e' –-header 'Content-Type: application/json' --header 'Accept: application/json'* … text trimmed\n> GET /api/v1/products/6d62d909-f957-430e-8689-b5129c0bb75e HTTP/1.1\n> Host: localhost:8080\n> User-Agent: curl/7.55.1\n> Content-Type: application/json\n> Accept: application/json\n>\n< HTTP/1.1 200\n< ETag: \"098e97de3b61db55286f5f2812785116f\"\n< Content-Type: application/json\n< Content-Length: 339\n<\n{\n  \"_links\": {\n    \"self\": {\n      \"href\": \"http://localhost:8080/6d62d909-f957-430e\n              -8689-b5129c0bb75e\"\n    }\n  },\n  \"id\": \"6d62d909-f957-430e-8689-b5129c0bb75e\",\n  \"name\": \"Antifragile\",\n  \"description\": \"Antifragile - Things …\",\n  \"imageUrl\": \"/images/Antifragile.jpg\",\n  \"price\": 17.1500,\n  \"count\": 33,\n  \"tag\": [\"psychology\", \"book\"]\n}\n```", "```java\n$ curl -v --location --request GET 'http://localhost:8080/ api/v1/products/6d62d909-f957-430e-8689-b5129c0bb75e' --header 'Content-Type: application/json' --header 'Accept: application/json' --header 'If-None-Match: \"098e97de3b61db55286f5f2812785116f\"'* … text trimmed\n> GET /api/v1/products/6d62d909-f957-430e-8689-b5129c0bb75e HTTP/1.1\n> Host: localhost:8080\n> User-Agent: curl/7.55.1\n> Content-Type: application/json\n> Accept: application/jsonAdding ETags to API responses 107\n> If-None-Match: \"098e97de3b61db55286f5f2812785116f\"\n>\n< HTTP/1.1 304\n< ETag: \"098e97de3b61db55286f5f2812785116f\"\n```", "```java\n@Beanpublic ShallowEtagHeaderFilter shallowEtagHeaderFilter() {\n  return new ShallowEtagHeaderFilter();\n}\n```", "```java\nreturn ResponseEntity.ok()       .cacheControl(CacheControl.maxAge(5, TimeUnit.DAYS))\n       .eTag(prodcut.getModifiedDateInEpoch())\n       .body(product);\n```"]