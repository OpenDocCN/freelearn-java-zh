- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: The History of Data Storage – From the Caves to the Cloud
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据存储的历史——从洞穴到云端
- en: 'Data: a critical, life-changing, and fundamental asset that supports humanity’s
    existence and evolution. For thousands of years (yes, thousands!), data storage
    solutions have evolved and supported humans by allowing us to “remember” and share
    knowledge in easy, maintainable, and searchable manners. Data turns into information,
    which in turn turns into knowledge. The ability to learn from the past and plan
    for the future is highly influenced by how we manage data in our systems today.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 数据：一个关键、改变生活、根本的资产，它支持人类的生存和进化。数千年来（是的，数千年！），数据存储解决方案已经演变并支持人类，使我们能够以简单、易于维护和可搜索的方式“记住”和分享知识。数据转化为信息，进而转化为知识。从过去学习并规划未来的能力高度受到我们今天在系统中管理数据的方式的影响。
- en: 'Software engineers are the catalysts of this process: our responsibility is
    to define and deliver solutions to people’s problems through software engineering
    – solutions that mostly revolve around data manipulation at a large or small scale.
    Having understood the importance of persistence in software engineering, you’re
    ready to bring your solutions’ persistence to the next level.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 软件工程师是这一过程的催化剂：我们的责任是通过软件工程定义和交付解决方案，以解决人们的问题——这些解决方案大多围绕大规模或小规模的数据操作。在理解了持久性在软件工程中的重要性之后，你就可以将你解决方案的持久性提升到下一个层次。
- en: 'In this chapter, we will explore the modern era, where databases have become
    the backbone of our applications and the entire planet. We will cover the following
    topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨现代时代，数据库已经成为我们应用程序和整个地球的支柱。我们将涵盖以下主题：
- en: Why do databases exist? The history of databases
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库为何存在？数据库的历史
- en: Characteristics of Java persistence frameworks
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java持久性框架的特点
- en: The cloud’s effect on stateful solutions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云对有状态解决方案的影响
- en: Exploring the trade-offs of distributed database systems – a look into the CAP
    theorem and beyond
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索分布式数据库系统的权衡——对CAP定理及其超越的探讨
- en: This first chapter provides you with an understanding of the past and current
    states of data storage technologies, before moving on to more advanced topics.
    This will give you a better foundation to work from. You will learn how data storage
    technologies responded to the market’s cloud-shift mentality. Finally, you will
    become familiar with practices such as **Domain-Driven Design** (**DDD**), which
    perfectly ties in with good persistence development practices, and the challenges
    faced by distributed data systems that await us in a distributed world, such as
    the CAP theorem.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章首先为你提供对数据存储技术过去和当前状态的理解，然后转向更高级的主题。这将为你提供一个更好的工作基础。你将学习数据存储技术如何应对市场的云迁移心态。最后，你将熟悉诸如**领域驱动设计**（**DDD**）等实践，这些实践与良好的持久性开发实践完美结合，以及分布式世界中分布式数据系统面临的挑战，例如CAP定理。
- en: Why do databases exist?
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库为何存在？
- en: A comprehensive understanding of databases is impossible without delving into
    humanity’s history. The desire to preserve knowledge throughout time has made
    writing one of the most enduring technologies, and looking back, it was first
    used in temples and caves, which can be recognized as the first non-computational
    databases of humankind.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 没有深入研究人类历史，就不可能全面理解数据库。人类渴望在时间流逝中保存知识，这使得写作成为最持久的技术之一。回顾过去，它最初被用于寺庙和洞穴，这可以被认为是人类第一个非计算数据库。
- en: Today, the industry emphasizes accurate and well-recorded information. As a
    matter of fact, the result of an increasing number of people gaining access to
    technology and joining the global network of information is reflected in research
    that states that the amount of data doubles every two years.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，行业强调准确和详尽的记录信息。事实上，越来越多的人获得技术访问权限并加入全球信息网络的结果反映在研究上，表明数据量每两年翻一番。
- en: The history of modern databases began in 1960, when Charles Bachman designed
    the first database for computers, the **integrated data store**, or **IDS**, a
    predecessor to IBM’s **Information Management** **System** (**IMS**).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现代数据库的历史始于1960年，当时查尔斯·巴科曼为计算机设计了第一个数据库，即**集成数据存储**，或**IDS**，它是IBM的**信息管理系统**（**IMS**）的前身。
- en: A decade after that, around 1970, one of the most significant events in the
    history of databases occurred when E. F. Codd published his paper *A Relational
    Model of Data for Large Shared Data Banks*, coining the term **relational database**.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在那之后的十年，大约在1970年，数据库历史上最重大的事件之一发生，当时E. F. Codd发表了其论文《大型共享数据库的数据关系模型》，创造了**关系数据库**这一术语。
- en: Finally, as the next and probably most recent breakthrough in terms of data
    storage, came NoSQL, which refers to any non-relational database. Some say **NoSQL**
    stands for *Non-SQL*, while others say it stands for *Not* *Only SQL*.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在数据存储方面的下一个，也许是最新的突破是NoSQL，它指的是任何非关系型数据库。有人说**NoSQL**代表*Non-SQL*，而另一些人则说它代表*Not
    Only SQL*。
- en: 'NoSQL databases power some of the most popular online applications. Here are
    a few:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: NoSQL数据库为一些最受欢迎的在线应用程序提供动力。以下是一些：
- en: '**Google**: Google uses NoSQL Bigtable for Google Mail, Google Maps, Google
    Earth, and Google Finance'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**谷歌**：谷歌使用NoSQL Bigtable为Google Mail、Google Maps、Google Earth和Google Finance提供服务'
- en: '**Netflix**: Netflix likes the high availability of the NoSQL database and
    uses a combination of SimpleDB, HBase, and Cassandra'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Netflix**：Netflix喜欢NoSQL数据库的高可用性，并使用SimpleDB、HBase和Cassandra的组合'
- en: '**Uber**: Uber uses Riak, a distributed NoSQL database with a flexible key-value
    store model'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优步**：优步使用Riak，这是一个具有灵活键值存储模型的分布式NoSQL数据库'
- en: '**LinkedIn**: LinkedIn built its own NoSQL database called Espresso, which
    is a document-oriented database'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**领英**：领英构建了自己的NoSQL数据库，名为Espresso，这是一个面向文档的数据库'
- en: The challenges of handling data
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理数据的挑战
- en: The evolution of database systems has been marked by key milestones over the
    decades. In the early days, when storage was expensive, the challenge was finding
    ways to reduce information waste. A reduction of even one million dollars’ worth
    of information was a significant achievement.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库系统的演变在几十年中由关键里程碑所标记。在早期，当存储成本高昂时，挑战在于找到减少信息浪费的方法。减少价值一百万美元的信息就是一个重大的成就。
- en: Did you know?
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道吗？
- en: At the dawn of the database era, a megabyte used to cost around 5 million dollars!
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据库时代的黎明时期，兆字节的成本曾经高达约500万美元！
- en: '[https://ourworldindata.org/grapher/historical-cost-of-computer-memory-and-storage](https://ourworldindata.org/grapher/historical-cost-of-computer-memory-and-storage)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://ourworldindata.org/grapher/historical-cost-of-computer-memory-and-storage](https://ourworldindata.org/grapher/historical-cost-of-computer-memory-and-storage)'
- en: Today, megabyte cost isn’t the challenge anymore as we’re living at the cost
    of 0.001 $/MB. As time passed and storage became cheaper, the methods of reducing
    duplicate data started to negatively impact an application’s response time. Normalization
    and the attempts to reduce data duplication, multiple join queries, and massive
    amounts of data did not help as much.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，兆字节的成本不再是挑战，因为我们生活在一个0.001美元/MB的成本时代。随着时间的推移和存储成本的降低，减少重复数据的手段开始对应用程序的响应时间产生负面影响。规范化以及减少数据重复、多个连接查询和大量数据尝试并没有起到太大的帮助。
- en: It’s no surprise that challenges to this model would eventually emerge. As noted
    by the esteemed and respected authors of the book *Fundamentals of Software Architecture*
    ([https://www.amazon.com/dp/1492043451/](https://www.amazon.com/dp/1492043451/)),
    definitive solutions don’t exist; instead, we are presented with many solutions
    where each is accompanied by its own set of benefits and drawbacks.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 对这一模型提出挑战并不令人惊讶。正如备受尊敬和尊敬的书籍《软件架构基础》的作者所指出的（[https://www.amazon.com/dp/1492043451/](https://www.amazon.com/dp/1492043451/)），没有明确的解决方案；相反，我们面临的是许多解决方案，每个解决方案都伴随着其自身的优点和缺点。
- en: Obviously, the same applies to databases.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，这一点也适用于数据库。
- en: '*There is no one-size-fits-all solution when it comes to data* *storage solutions.*'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*在数据存储解决方案方面，没有一种适合所有情况的解决方案*。'
- en: In the 2000s, new storage solutions, such as NoSQL databases, began to gain
    popularity and architects had more options to choose from. This doesn’t mean that
    SQL stopped being relevant, but rather that architects must now navigate the complexities
    of choosing the right paradigm for each problem.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在2000年代，新的存储解决方案，如NoSQL数据库，开始变得流行，架构师有更多的选择。这并不意味着SQL不再相关，而是说架构师现在必须应对选择每个问题的正确范例的复杂性。
- en: As the database landscape went through these phases, the application’s scenario
    also changed. Discussions moved toward the motivations and challenges of adopting
    a microservices architecture style, bringing us back to the multiple persistence
    strategies available. Traditionally, architectures included relational database
    solutions, with one or two instances (given its increased cost). Now, as new storage
    solutions mature, architectural solutions start to include persistence based on
    NoSQL databases, scaling up to multiple running instances. The possibility of
    storing data in multiple ways, throughout different services that compose a single
    broader solution, is a good environment for potential new solutions with polyglot
    persistence.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 随着数据库领域经历了这些阶段，应用程序的场景也发生了变化。讨论转向了采用微服务架构风格的动机和挑战，这使我们回到了多种持久性策略。传统上，架构包括关系型数据库解决方案，通常有一个或两个实例（考虑到其增加的成本）。现在，随着新的存储解决方案的成熟，架构解决方案开始包括基于NoSQL数据库的持久性，扩展到多个运行实例。在多个服务中存储数据，这些服务组成一个更广泛解决方案的可能性，为具有多语言持久性的潜在新解决方案提供了一个良好的环境。
- en: '**Polyglot persistence** is the idea that computer applications can use different
    database types to take advantage of the fact that various engine systems are better
    equipped to handle different problems. Complex applications often involve different
    types of problems, so choosing the right tool for each job can be more productive
    than trying to solve all aspects of the problem using a single solution.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**多语言持久性**是指计算机应用程序可以使用不同的数据库类型，利用各种引擎系统更适合处理不同问题的这一事实。复杂的应用程序通常涉及不同类型的问题，因此为每一项工作选择合适的工具可能比试图使用单一解决方案解决问题的所有方面更有效率。'
- en: When analyzing solutions in most recent times, the reality confronts us, developers
    and architects, with the complexity of choice. How do we handle data, having to
    consider a scenario with multiple data types? To make it clear, we’re talking
    about mixing and matching hundreds of possible solutions. The best path is to
    prepare by learning about persistence fundamentals, best practices, and paradigms.
    And finally, being aware that no matter how much we desire a fast, scalable, highly
    available, precise, *and* consistent solution – we now know that, according to
    the CAP theorem, a concept discussed later in this chapter, that may be impossible.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在分析最近时期的大部分解决方案时，现实情况使我们开发者、架构师面临选择的复杂性。我们如何处理数据，必须考虑一个具有多种数据类型的场景？为了清楚起见，我们正在谈论混合和匹配数百种可能的解决方案。最佳途径是通过学习持久性基础、最佳实践和范式来做好准备。最后，意识到无论我们多么渴望一个快速、可扩展、高度可用、精确且**一致**的解决方案——我们现在知道，根据CAP定理，一个在本书后面章节讨论的概念，这可能是不可能的。
- en: Next, we’ll narrow down our focus specifically to persistence within the context
    of Java applications.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将我们的关注点具体缩小到Java应用程序中的持久性。
- en: Characteristics of Java persistence frameworks
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java持久性框架的特点
- en: Let’s grasp the idea of the differences between the Java language and the multiple
    databases available. Java, an **Object-Oriented Programming** (**OOP**) language,
    naturally offers features such as inheritance, encapsulation, and types, which
    supports the creation of well-designed code. Unfortunately, not all of these features
    are supported by database systems.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们掌握Java语言和可用的多个数据库之间的差异概念。Java是一种**面向对象编程**（**OOP**）语言，自然提供了诸如继承、封装和类型等特性，这些特性支持创建良好的代码。不幸的是，并非所有这些特性都得到数据库系统的支持。
- en: 'As a consequence, when integrating both language and database paradigms, some
    of their unique advantages might get lost. This complexity becomes clear when
    we observe that in all data manipulation between in-memory objects and the database
    schema, there should be some data mapping and conversion. It is critical to either
    define a preferred approach or provide an isolation layer. In Java, the most systematic
    way to integrate both worlds is through the usage of frameworks. Frameworks come
    in various types and categories shaped by their **communication levels** and the
    **provided API dynamics**. In *Figure 1**.1*, observe the key aspects of both
    concepts:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当整合语言和数据库范式时，它们的一些独特优势可能会丢失。当我们观察到在内存对象和数据库模式之间的所有数据操作中，都应该有一些数据映射和转换时，这种复杂性变得明显。定义一个首选方法或提供一个隔离层是至关重要的。在Java中，通过使用框架来整合这两个世界的最系统化方式是使用框架。框架的类型和类别由它们的**通信级别**和**提供的API动态性**决定。在*图1.1*中，观察这两个概念的关键方面：
- en: '![Figure 1.1 – Considerations about the different characteristics of a Java
    persistence framework](img/Figure_1.1_B19375.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.1 – 关于 Java 持久性框架不同特性的考虑](img/Figure_1.1_B19375.jpg)'
- en: Figure 1.1 – Considerations about the different characteristics of a Java persistence
    framework
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1 – 关于 Java 持久性框架不同特性的考虑
- en: '**Communication levels**: Define how unrelated the code is from either the
    database or OOP paradigm. The code can be designed to be more similar to one of
    the two domains. To clarify, take into consideration two common approaches for
    integrating a Java app with a database – using a database driver directly or relying
    on the mapper pattern:'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通信级别**：定义代码与数据库或面向对象范式之间的无关性。代码可以被设计得与两个领域中的一个更相似。为了澄清，考虑两种常见的将 Java 应用程序与数据库集成的途径
    – 直接使用数据库驱动程序或依赖映射模式：'
- en: Directly adopting a driver (e.g., JDBC Driver) means working closer to the database
    domain space. A database driver that is easy to work with is usually data-oriented.
    A downside is the need to have more boilerplate code to be able to map and convert
    all manipulated data between the database model and the Java domain objects.
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接采用驱动程序（例如，JDBC 驱动程序）意味着更接近数据库领域空间的工作。一个易于工作的数据库驱动程序通常是面向数据的。一个缺点是需要更多的样板代码，以便能够将数据库模型和
    Java 领域对象之间所有操作的数据进行映射和转换。
- en: The mapper pattern provides the possibility to map a database structure to the
    Java objects using the completely opposite approach. In the context of mapping
    frameworks such as Hibernate and Panache, the primary objective is to align more
    closely with the OOP paradigm rather than focusing primarily on the database.
    While offering the benefit of reduced boilerplate code, it has as a trade-off,
    to coexist with a constant object-relational impedance mismatch and its consequent
    performance impacts. This topic will be covered in more detail in further chapters.
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 映射模式提供了使用完全相反的方法将数据库结构映射到 Java 对象的可能性。在诸如 Hibernate 和 Panache 这样的映射框架的上下文中，主要目标是更紧密地与面向对象范式对齐，而不是主要关注数据库。虽然提供了减少样板代码的好处，但它作为权衡，需要与持续存在的对象关系阻抗不匹配及其随之而来的性能影响共存。这个主题将在后续章节中更详细地介绍。
- en: '**API abstraction levels**: To abstract some level of translation between Java
    and the database during data manipulation and other database interactions, developers
    rely on a given Java API. To clarify the abstraction level of an API, you can
    ask, for example, *“How many different database types does a given database API
    support?”* When using SQL as a standard for relational database integration, developers
    can use a *single API* and integrate it with *all* relational database flavors.
    There are two types of APIs:'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**API 抽象级别**：在数据操作和其他数据库交互期间，为了在 Java 和数据库之间进行某些级别的翻译，开发者依赖于特定的 Java API。为了阐明
    API 的抽象级别，例如，你可以问：“一个特定的数据库 API 支持多少种不同的数据库类型？”当使用 SQL 作为关系数据库集成的标准时，开发者可以使用一个
    *单一 API* 并将其与 *所有* 关系数据库版本集成。有两种类型的 API：'
- en: A specific API may offer more accurate updates from the vendor, but it also
    means that any solution that relies on that API will need to be changed if you
    ever want to switch to a different database (e.g., Morphia or Neo4j-OGM – **OGM**
    stands for **Object** **Graph Mapper**)
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特定 API 可能会提供来自供应商的更准确的更新，但这同时也意味着，如果你想要切换到不同的数据库（例如，Morphia 或 Neo4j-OGM – **OGM**
    代表 **对象** **图** **映射器**），任何依赖于该 API 的解决方案都需要进行更改。
- en: An agnostic API is more flexible and can be used with many different types of
    databases, but it can be more challenging to manage updates or particular behaviors
    for each one
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个无差别的 API 更灵活，可以与许多不同类型的数据库一起使用，但管理每个数据库的更新或特定行为可能更具挑战性
- en: Code design– DDD versus data-oriented
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 代码设计– DDD 与面向数据
- en: In the renowned book *Clean Code*, the author, known as Uncle Bob, states OOP
    languages have the benefit of hiding data in order to expose its behavior. In
    the same line of thought, we see DDD, which proposes the usage of a ubiquitous
    language throughout the domain’s code and related communication. The implementation
    of such a proposal can be achieved through the usage of OOP concepts. In *Data-Oriented
    Programming*, Yehonathan Sharvit suggests simplifying complexity by giving relevance
    to data and treating it as a “first-class citizen.”
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在著名的书籍《代码整洁之道》中，作者被称为Uncle Bob，他提出面向对象编程语言具有隐藏数据以展示其行为的优势。沿着同样的思路，我们看到领域驱动设计（DDD），它提出了在整个领域代码和相关通信中使用通用语言的建议。实现这一建议可以通过使用面向对象的概念来完成。在《面向数据编程》中，Yehonathan
    Sharvit建议通过赋予数据相关性并将其视为“一等公民”来简化复杂性。
- en: Luckily, there are several frameworks to assist us in the challenges of delivering
    performant persistence layers. Although we understand that more options bring
    back the paradox of choice, there’s no need to worry – this book is a helpful
    resource that software engineers can use to learn how to evaluate multiple perspectives
    within software architecture, especially the details within the data storage integration
    and data manipulation space.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，有几个框架可以帮助我们应对提供高性能持久层所面临的挑战。尽管我们理解更多的选择会带来选择的悖论，但无需担心——这本书是软件工程师可以用来学习如何在软件架构中评估多个视角的有用资源，特别是数据存储集成和数据操作空间中的细节。
- en: 'So far, we have explored the diverse methods that we humans have devised to
    address a fundamental issue: efficiently storing data in a manner that ensures
    longevity and serves as a knowledge base to support our evolution. As technology
    has advanced, multiple persistence strategies have been made available to software
    architects and developers, including relational and unstructured approaches such
    as NoSQL. The variety of persistence options has resulted in new challenges in
    software design; after all, retrieving, storing, and making data available also
    went through innovation at the application layer. Persistence frameworks, since
    then and still today, provide architects with different strategies, enabling designs
    where development is closely associated with the underlying database technology
    or is more dynamic and agnostic.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经探讨了人类为解决一个基本问题而设计的各种方法：以确保长期性和作为支持我们进化的知识库的方式高效地存储数据。随着技术的进步，多种持久策略已经提供给软件架构师和开发者，包括关系型和无结构的方法，如NoSQL。持久性选项的多样性导致了软件设计中的新挑战；毕竟，检索、存储和使数据可用也经历了应用层的创新。自那时起，至今，持久性框架为架构师提供了不同的策略，使得设计与底层数据库技术紧密相关或更加动态和无关紧要。
- en: Our next stop on this database historical journey is the cloud era. Let’s explore
    how cloud offerings have impacted applications and the ways and *locations* where
    data can now be stored.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这次数据库历史之旅的下一站是云时代。让我们探讨云服务如何影响应用程序以及数据现在可以存储的方式和位置。
- en: The cloud’s effect on stateful solutions
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云对有状态解决方案的影响
- en: When it comes to databases, professionals need to have an operational perspective
    in addition to an infrastructure and software architecture perspective. There
    are several factors to consider regarding a solution’s architecture and the required
    compliance, such as networking, security, cloud backup, and upgrades.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到数据库时，专业人士除了需要基础设施和软件架构的视角外，还需要具备运营视角。在解决方案的架构和所需合规性方面，有几个因素需要考虑，例如网络、安全、云备份和升级。
- en: Fortunately, we can use the help of cloud services. The cloud, as a technology-related
    concept, has been defined by the **National Institute of Standards and Technology**
    (**NIST**) as a model that enables the consumption, on-demand and via a network,
    of a shared set of computing resources that are rapidly made available.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，我们可以利用云服务。作为一个与技术相关的概念，云已经被**国家标准与技术研究院**（**NIST**）定义为一种模型，它通过网络按需提供共享的计算资源，这些资源可以快速提供。
- en: 'You might have heard a joke in tech communities that says that “the cloud is
    just somebody else’s computer.” However, we believe there’s more to the cloud
    than that; we prefer to look at the cloud as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经在技术社区中听到过一个笑话，说“云只是别人的电脑”。然而，我们认为云不仅仅是这样；我们更喜欢以下这样的看法：
- en: The cloud is somebody else’s problem.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 云是别人的问题。
- en: The main goal of adopting cloud services is to outsource non-core business functions
    to somebody else. This way, we can focus on our core competencies.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 采用云服务的主要目标是外包非核心业务功能给其他人。这样，我们可以专注于我们的核心竞争力。
- en: Tip
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'As you read through the book, you’ll notice several acronyms are used. In this
    chapter, we mostly refer to the following cloud service offering types: **Infrastructure
    as a Service** (**IaaS**), **Platform as a Service** (**PaaS**), and **Software
    as a** **Service** (**SaaS**).'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 随着你阅读这本书，你会注意到使用了几个缩写。在本章中，我们主要指的是以下云服务提供类型：**基础设施即服务**（**IaaS**）、**平台即服务**（**PaaS**）和**软件即服务**（**SaaS**）。
- en: 'Even though you might feel like cloud services could finally be the solution
    to numerous technical problems you’ve gone through, remember that delegated responsibilities
    and tasks also have chances of going very differently from what you expected –
    for example, services crashing or costs skyrocketing. Since we’re discussing the
    action of “delegating a problem to somebody else,” here are three types of cloud
    services (three ways to “delegate”) and their respective target audiences:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管你可能觉得云服务最终可能是解决你经历过的许多技术问题的解决方案，但请记住，委托的责任和任务也有可能与你预期的截然不同——例如，服务崩溃或成本激增。由于我们正在讨论“将问题委托给他人”的行为，以下是三种类型的云服务（三种“委托”方式）及其相应的目标受众：
- en: '**IaaS**: *Infrastructure* is not your problem. The target audience is people
    who work on the operation side, such as SREs.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IaaS**：基础设施不是你的问题。目标受众是从事运营方面工作的人，例如SREs。'
- en: '**PaaS**: The *infrastructure* and *operation* are not your problems. The main
    target audience is software engineers.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PaaS**：基础设施和运营不是你的问题。主要的目标受众是软件工程师。'
- en: '**SaaS**: The *infrastructure*, *operation*, and *software* are not your problem.
    In this case, the target audience is the end user, who doesn’t necessarily know
    how to code.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SaaS**：基础设施、运营和软件都不是你的问题。在这种情况下，目标受众是最终用户，他们不一定知道如何编码。'
- en: 'As we previously pointed out in this chapter, *every solution’s trade-offs
    must be considered*. Picking the PaaS cloud offering as an example: this model
    offers a higher level of abstraction in exchange for a bit of a higher price tag.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在这章中之前指出的，*每个解决方案的权衡都必须考虑*。以选择PaaS云服务为例：这种模型以更高的抽象层次为代价，换取了更高的价格标签。
- en: What about cloud offerings for data storage, then? As pointed out by Dan More
    in the book *97 Things Every Cloud Engineer Should Know* ([https://www.amazon.com/dp/1492076732](https://www.amazon.com/dp/1492076732)),
    databases can also be used as managed cloud services. Looking at a managed database
    service, you could consider that someone else (a vendor) will provide a service
    to abstract most of (and in some cases, all of) the database infrastructure and
    management tasks.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，关于数据存储的云服务怎么办呢？正如Dan More在《97 Things Every Cloud Engineer Should Know》一书中所指出的（[https://www.amazon.com/dp/1492076732](https://www.amazon.com/dp/1492076732)），数据库也可以用作托管云服务。查看托管数据库服务时，你可以考虑其他人（供应商）将提供一项服务，以抽象化大部分（在某些情况下，全部）数据库基础设施和管理任务。
- en: '**Database as a Service** (**DBaaS**) is a popular type of cloud service that
    allows users to choose from a variety of database flavors, running in multiple
    regions and managed by different cloud providers.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据库即服务**（**DBaaS**）是一种流行的云服务类型，允许用户从多个地区运行的不同数据库类型中选择。'
- en: Cloud services can be helpful when we need to explore various architectural
    persistence solutions and delegate complexity. They have been widely adopted and
    proven to be effective in serving this purpose.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要探索各种架构持久化解决方案并委托复杂性时，云服务可以很有帮助。它们已被广泛采用，并证明在满足这一目的方面是有效的。
- en: With cloud offerings and microservices architecture adoption, distributed solutions
    are becoming more prevalent. Architects then have to handle new challenges related
    to data integrity and unexpected occurrences of inconsistency in data in applications
    that must meet such requirements.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 随着云服务和微服务架构的采用，分布式解决方案变得越来越普遍。因此，架构师必须处理与数据完整性相关的新挑战，以及必须满足此类要求的应用程序中数据不一致的意外发生。
- en: Exploring the trade-offs of distributed database systems – a look into the CAP
    theorem and beyond
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索分布式数据库系统的权衡——对CAP定理及其超越的探讨
- en: If the perfect **Distributed Database System** (**DDBS**) were to be described,
    it would certainly be a database that was highly scalable, provided perfectly
    consistent data, and didn’t require too much attention in regard to management
    (tasks such as backup, migrations, and managing the network). Unfortunately, the
    CAP theorem, formulated by Eric Brewer, states that that’s not possible.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要描述完美的**分布式数据库系统**（**DDBS**），它肯定是一个高度可扩展、提供完美一致数据且在管理方面不需要过多关注的数据库（例如备份、迁移和网络管理）。不幸的是，埃里克·布赖尔提出的CAP定理表明这是不可能的。
- en: Note
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To date, there is no database solution that can provide the ideal combination
    of features such as total data consistency, high availability, and scalability
    all together.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，还没有数据库解决方案能够提供总数据一致性、高可用性和可扩展性等特性的理想组合。
- en: 'For details, check: *Towards robust distributed systems*. PODC. 7\. 10.1145/343477.343502
    (https://www.researchgate.net/publication/221343719_Towards_robust_distributed_systems).'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 有关详细信息，请参阅：*迈向健壮的分布式系统*。PODC. 7\. 10.1145/343477.343502 (https://www.researchgate.net/publication/221343719_Towards_robust_distributed_systems)。
- en: The **CAP theorem** is a way of understanding the trade-offs between different
    properties of a DDBS. Eric Brewer, at the 2000 Symposium on **Principles of Distributed
    Computing** (**PODC**), conjectured that when creating a DDBS, *“you can have
    at most two of these properties for any shared-data system,*” referring to the
    properties **consistency**, **availability**, and **tolerance to** **network partitions**.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**CAP定理**是理解DDBS不同属性之间权衡的一种方式。埃里克·布赖尔在2000年分布式计算原理（**PODC**）研讨会上推测，在创建DDBS时，“对于任何共享数据系统，你最多只能拥有这些属性中的两个，”指的是属性**一致性**、**可用性**和**对网络分区的容错性**。'
- en: "![Figure 1.2 – \uFEFFRepresentation inspired by Eric Brewer’s keynote presentation](img/Figure_1.2_B19375.jpg)"
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图1.2 – 受埃里克·布赖尔主题演讲启发的表示](img/Figure_1.2_B19375.jpg)'
- en: Figure 1.2 – Representation inspired by Eric Brewer’s keynote presentation
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2 – 受埃里克·布赖尔主题演讲启发的表示
- en: Note
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '*Towards Robust Distributed Systems*. For more information on Eric Brewer’s
    work, refer to Brewer, Eric. (2000), presentation: [https://people.eecs.berkeley.edu/~brewer/cs262b-2004/PODC-keynote.pdf](https://people.eecs.berkeley.edu/~brewer/cs262b-2004/PODC-keynote.pdf).'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '*迈向健壮的分布式系统*。有关埃里克·布赖尔工作的更多信息，请参阅布赖尔，埃里克。（2000），演讲：[https://people.eecs.berkeley.edu/~brewer/cs262b-2004/PODC-keynote.pdf](https://people.eecs.berkeley.edu/~brewer/cs262b-2004/PODC-keynote.pdf)。'
- en: 'The three characteristics described in the CAP theorem can be described as
    follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: CAP定理中描述的三个特性可以描述如下：
- en: '**Consistency**: The guarantee that every node in a distributed cluster returns
    the same, most recent, successful write.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一致性**：保证分布式集群中的每个节点返回相同的、最新的、成功的写入。'
- en: '**Availability**: Every non-failing node returns a response for all read and
    write requests in a reasonable amount of time.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可用性**：每个非失败节点在合理的时间内对所有的读取和写入请求返回响应。'
- en: '**Partition tolerance**: The system continues to function and uphold its consistency
    guarantees despite network partitions. In other words, the service is running
    despite crashes, disk failures, database, software, and OS upgrades, power outages,
    and other factors.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分区容错性**：系统即使在网络分区的情况下也能继续运行并保持其一致性保证。换句话说，即使在崩溃、磁盘故障、数据库、软件和操作系统升级、停电和其他因素下，服务仍在运行。'
- en: In other words, the DDBSes we can pick and choose from would only be **CA**
    (consistent and highly available), **CP** (consistent and partition-tolerant),
    or **AP** (highly available and partition-tolerant).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，我们可以选择和选择的DDBS只会是**CA**（一致且高度可用）、**CP**（一致且容错）或**AP**（高度可用且容错）。
- en: Tip
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'As stressed in the book *Fundamentals of Software Architecture: An Engineering
    Approach*, good software architecture requires dealing with trade-offs. This is
    yet another trade-off to take into consideration ([https://www.amazon.com/Fundamentals-Software-Architecture-Engineering-Approach-ebook/dp/B0849MPK73/](https://www.amazon.com/Fundamentals-Software-Architecture-Engineering-Approach-ebook/dp/B0849MPK73/)).'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 正如书中《软件架构基础：工程方法》所强调的，良好的软件架构需要处理权衡。这又是需要考虑的一个权衡点([https://www.amazon.com/Fundamentals-Software-Architecture-Engineering-Approach-ebook/dp/B0849MPK73/](https://www.amazon.com/Fundamentals-Software-Architecture-Engineering-Approach-ebook/dp/B0849MPK73/))。
- en: By considering the CAP theorem, we can then apply this new knowledge to back
    us up in decision-making processes in regard to choosing between SQL and NoSQL.
    For example, traditional DBMSes thrive when (mostly) providing the **Atomicity,
    Consistency, Isolation, and Durability** (**ACID**) properties; however, in regard
    to distributed systems, it may be necessary to give up consistency and isolation
    in order to achieve higher availability and better performance. This is commonly
    known as sacrificing consistency for availability.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 通过考虑CAP定理，我们就可以将这一新知识应用于决策过程中，帮助我们选择SQL和NoSQL。例如，传统的数据库管理系统（DBMS）在（主要）提供**原子性、一致性、隔离性和持久性**（**ACID**）属性时表现良好；然而，在分布式系统中，为了实现更高的可用性和更好的性能，可能需要放弃一致性和隔离性。这通常被称为为了可用性牺牲一致性。
- en: Almost 12 years after the idea of CAP was proposed, Seth Gilbert and Nancy Lynch
    at MIT published some research, a formal proof of Brewer’s conjecture. However,
    another expert on database system architecture and implementation has also done
    some research on scalable and distributed systems, adding, to the existing theorem,
    the consideration of the consistency and latency trade-off.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在CAP理念提出后的近12年后，麻省理工学院的Seth Gilbert和Nancy Lynch发表了一些研究，对布赖尔定理进行了形式化的证明。然而，另一位数据库系统架构和实现方面的专家也对可扩展和分布式系统进行了一些研究，为现有的定理增加了对一致性和延迟权衡的考虑。
- en: In 2012, Prof. Daniel Abadi published a study stating CAP has become *“increasingly
    misunderstood and misapplied, causing significant harm”* leading to unnecessarily
    limited **Distributed Database Management System** (**DDBMS**) creation, as CAP
    only presents limitations in the face of certain types of failures – not during
    normal operations.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 2012年，Daniel Abadi教授发表了一项研究，指出CAP已被“越来越误解和误用，造成了重大损害”，导致不必要的**分布式数据库管理系统**（**DDBMS**）创建受限，因为CAP只针对某些类型的故障提出了限制——而不是在正常操作期间。
- en: 'Abadi’s paper *Consistency Tradeoffs in Modern Distributed Database System
    Design* proposes a new formulation, **Performance and Consistency Elasticity Capabilities**
    (**PACELC**), which argues that the trade-offs between consistency and performance
    can be managed through the use of elasticity. The following question quoted in
    the paper clarifies the main idea: *“If there is a partition (P), how does the
    system trade off availability and consistency (A and C); else (E), when the system
    is running normally in the absence of partitions, how does the system trade off
    latency (L) and* *consistency (C)?”*'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Abadi的论文《现代分布式数据库系统设计中的一致性权衡》提出了一种新的公式，**性能和一致性弹性能力**（**PACELC**），认为可以通过使用弹性来管理一致性和性能之间的权衡。论文中引用的以下问题阐明了主要思想：“如果存在分区（P），系统如何权衡可用性和一致性（A和C）；否则（E），当系统在没有分区的情况下正常运行时，系统如何权衡延迟（L）和一致性（C）？”
- en: According to Abadi, a distributed database could be both highly consistent and
    highly performant, but only under certain conditions – *only* when the system
    can adjust its consistency level based on network conditions through the use of
    elasticity.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Abadi的说法，分布式数据库可以在某些条件下既高度一致又高度性能，但只有当系统能够通过使用弹性根据网络条件调整其一致性级别时。
- en: At this point, the intricacies of building database systems, particularly distributed
    ones, have been made crystal clear. As professionals tasked with evaluating and
    selecting DDBSes and designing solutions on top of them, having a fundamental
    understanding of the concepts discussed in these studies serves as a valuable
    foundation for informed decision-making.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 到这一点，构建数据库系统的复杂性，尤其是分布式数据库，已经变得非常清晰。作为负责评估和选择DDBS以及在其之上设计解决方案的专业人士，对这些研究中讨论的概念有基本理解，对于做出明智的决策是一个宝贵的基石。
- en: Summary
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Any software application relies heavily on its database, so it’s important to
    give it the attention it deserves. In this chapter, we explored the interesting
    history of data storage, from its early days to the modern era of cloud computing.
    Throughout this journey, we witnessed the impacts of data storage evolution on
    the field of software engineering, and how Java frameworks have also evolved to
    be able to support polyglot solutions. As experienced software engineers, it is
    crucial for us to understand the importance of data and solutions that can manage
    and manipulate it effectively.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 任何软件应用程序都高度依赖于其数据库，因此给它应有的关注是很重要的。在本章中，我们探讨了数据存储的有趣历史，从其早期到云计算的现代化时代。在整个旅程中，我们见证了数据存储演变对软件工程领域的影响，以及Java框架是如何演变以支持多语言解决方案的。作为经验丰富的软件工程师，了解数据及其有效管理和操作的重要性对我们至关重要。
- en: Adding to that, we discussed the challenges of relational databases, such as
    data redundancy and normalization, and how NoSQL databases emerged to handle unstructured
    data needs. We introduced the CAP theorem and mentioned additional studies, such
    as PACELC, to explain the challenges of implementing distributed data storage
    solutions.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还讨论了关系型数据库的挑战，例如数据冗余和规范化，以及如何出现NoSQL数据库来处理非结构化数据需求。我们介绍了CAP定理，并提到了额外的研究，如PACELC，来解释实现分布式数据存储解决方案的挑战。
- en: As we continue through this book, we’ll delve deeper into the advanced architectural
    and development practices, challenges, and trade-offs you must know about in order
    to deliver the optimal persistence layer for each solution you get to work with
    from now on, related to data persistence. After taking a look at the history,
    motivation, and relationship between databases and Java, get ready to explore,
    in the next chapter, the different types of databases and their pros and cons.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们继续阅读本书，我们将深入了解高级架构和开发实践、挑战以及权衡，这些是你必须了解的，以便为现在及以后你将与之合作的每个解决方案提供最佳持久层，相关于数据持久性。在查看数据库与Java之间的历史、动机和关系之后，准备好在下一章中探索不同类型的数据库及其优缺点。
