["```java\ndef async[T](body: => T) : Future[T]\ndef await[T](future:Future[T]):T\n```", "```java\nname := \"ch8samples\"\n\nversion := \"1.0-SNAPSHOT\"\n\nlibraryDependencies ++= Seq(\n jdbc,\n anorm,\n cache,\n \"org.scala-lang.modules\" %% \"scala-async\" % \"0.9.0\"\n) \n\nplay.Project.playScalaSettings\n\n```", "```java\n> play console\n\n```", "```java\nscala> import scala.async.Async.{async, await}\nimport scala.async.Async.{async, await}\nscala> import scala.concurrent.ExecutionContext.Implicits.global\nimport scala.concurrent.ExecutionContext.Implicits.global\n\n```", "```java\nscala> val computation = async { 3 * 2 }\ncomputation: scala.concurrent.Future[Int] = scala.concurrent.impl.Promise$DefaultPromise@545c484c\nscala> computation.value\nres0: Option[scala.util.Try[Int]] = Some(Success(6))\n\n```", "```java\nscala> val longComputation = async { Thread.sleep(10000); 3*2 }\nlongComputation: scala.concurrent.Future[Int] = scala.concurrent.impl.Promise$DefaultPromise@7b5ab834\n\n```", "```java\nscala> longComputation.value\nres1: Option[scala.util.Try[Int]] = None\n\n```", "```java\nscala> longComputation.value\nres2: Option[scala.util.Try[Int]] = Some(Success(6))\n\n```", "```java\nscala> val longComputation = async { Thread.sleep(10000); 3*2 }\nlongComputation: scala.concurrent.Future[Int] = scala.concurrent.impl.Promise$DefaultPromise@1c6b985a\nscala> longComputation.onComplete(println)\nscala>   (no immediate result)\n\n```", "```java\nscala> val hello = \"Hello\"\n\n```", "```java\nscala> Success(6)\n\n```", "```java\nscala> import play.api.libs.json._\nimport play.api.libs.json._\nscala> import play.api.libs.ws._\nimport play.api.libs.ws._\nscala> import play.api.libs.functional.syntax._\nimport play.api.libs.functional.syntax._\nscala> import scala.util.{Success, Failure}\nimport scala.util.{Success, Failure}\nscala> val locationURL = \"http://freegeoip.net/xml/www.aftonbladet.se\"\nlocationURL: String = http://freegeoip.net/xml/www.aftonbladet.se\nscala> val futureLocation = WS.url(locationURL).get().map { response => \n (response.xml \\ \"City\").text\n }\nfutureLocation: scala.concurrent.Future[String] = scala.concurrent.impl.Promise$DefaultPromise@6039c183\n\n```", "```java\nscala> val location = futureLocation.value\nlocation: Option[scala.util.Try[String]] = Some(Success(Stockholm))\n\n```", "```java\nscala> val weatherURL = \"http://api.openweathermap.org/data/2.5/weather?q=\"\nweatherURL: String = http://api.openweathermap.org/data/2.5/weather?q=\nscala> val futureWeather = WS.url(weatherURL+\"Paris\").get().map{ response => \n response.json\n }\nfutureWeather: scala.concurrent.Future[play.api.libs.json.JsValue] = scala.concurrent.impl.Promise$DefaultPromise@4dd5dc9f\n\n```", "```java\nscala> val weather = futureWeather.value\nweather: Option[scala.util.Try[play.api.libs.json.JsValue]] = Some(Success({\"coord\":{\"lon\":2.35,\"lat\":48.85},\"sys\":{\"message\":0.0052,\"country\":\"FR\",\"sunrise\":1389166933,\"sunset\":1389197566},\"weather\":[{\"id\":803,\"main\":\"Clouds\",\"description\":\"broken clouds\",\"icon\":\"04n\"}],\"base\":\"cmc stations\",\"main\":{\"temp\":284.36,\"pressure\":1013,\"temp_min\":284.15,\"temp_max\":284.82,\"humidity\":86},\"wind\":{\"speed\":5.37,\"deg\":193},\"clouds\":{\"all\":80},\"dt\":1389221871,\"id\":2988507,\"name\":\"Paris\",\"cod\":200}))\n\n```", "```java\nscala> :paste\n// Entering paste mode (ctrl-D to finish)\n\nval futureLocation = \n WS.url(locationURL).get().map(resp => (resp.xml \\ \"City\").text)\nval futureWeather2 = async {\n await(WS.url(weatherURL+await(futureLocation)).get()).body \n}\nfutureWeather2.onComplete(println)\n\n// once the block is copied from somewhere using ctrl-C/ctrl-D, press ctrl-D\n\n// Exiting paste mode, now interpreting.\nfutureLocation: scala.concurrent.Future[String] = scala.concurrent.impl.Promise$DefaultPromise@1e111066\nfutureWeather2: scala.concurrent.Future[String] = scala.concurrent.impl.Promise$DefaultPromise@724ba7f5\nscala> Success({\"coord\":{\"lon\":18.06,\"lat\":59.33},\"sys\":{\"message\":0.0251,\"country\":\"SE\",\"sunrise\":1395808197,\"sunset\":1395854197},\"weather\":[{\"id\":800,\"main\":\"Clear\",\"description\":\"Sky is Clear\",\"icon\":\"01d\"}],\"base\":\"cmc stations\",\"main\":{\"temp\":277.29,\"pressure\":1028,\"humidity\":69,\"temp_min\":276.15,\"temp_max\":278.15},\"wind\":{\"speed\":5.1,\"deg\":60},\"rain\":{\"3h\":0},\"clouds\":{\"all\":0},\"dt\":1395852600,\"id\":2673730,\"name\":\"Stockholm\",\"cod\":200})\n\n```", "```java\nscala> :paste\n// Entering paste mode (ctrl-D to finish)\n\nval futureLocation = \n WS.url(locationURL).get().map(resp => (resp.xml \\ \"City\").text)\nval futureWeather2 = async {\n await(WS.url(weatherURL + futureLocation).get()).body \n}\nfutureWeather2.onComplete(println)\n\n// once the block is copied from somewhere using ctrl-C/ctrl-D, press ctrl-D\n// Exiting paste mode, now interpreting.\nfutureLocation: scala.concurrent.Future[String] = scala.concurrent.impl.Promise$DefaultPromise@705a7c28\nfutureWeather2: scala.concurrent.Future[String] = scala.concurrent.impl.Promise$DefaultPromise@448d5fb8\nscala> Success({\"message\":\"Error: Not found city\",\"cod\":\"404\"}\n)\n\n```", "```java\ncase object Greet\ncase class WhoToGreet(who: String)\ncase class Greeting(message: String)\n\nclass Greeter extends Actor {\n  var greeting = \"\"\n\n  def receive = {\n    case WhoToGreet(who) => greeting = s\"hello, $who\"\n    case Greet           => sender ! Greeting(greeting) \n    // Send the current greeting back to the sender\n  }\n}\n```", "```java\ndef receive = {\n  ...\n  case Greet(someone) => someone ! Greeting(greeting)\n}\n```", "```java\nobject HelloAkkaScala extends App {\n\n  // Create the 'helloakka' actor system\n  val system = ActorSystem(\"helloakka\")\n\n  // Create the 'greeter' actor\n  val greeter = system.actorOf(Props[Greeter], \"greeter\")\n\n  // Create an \"actor-in-a-box\"\n  val inbox = Inbox.create(system)\n\n  // Tell the 'greeter' to change its 'greeting' message\n  greeter.tell(WhoToGreet(\"akka\"), ActorRef.noSender)\n\n  // Ask the 'greeter for the latest 'greeting'\n  // Reply should go to the \"actor-in-a-box\"\n  inbox.send(greeter, Greet)\n\n  // Wait 5 seconds for the reply with the 'greeting' message\n  val Greeting(message1) = inbox.receive(5.seconds)\n  println(s\"Greeting: $message1\")\n\n  // Change the greeting and ask for it again\n  greeter.tell(WhoToGreet(\"typesafe\"), ActorRef.noSender)\n  inbox.send(greeter, Greet)\n  val Greeting(message2) = inbox.receive(5.seconds)\n  println(s\"Greeting: $message2\")\n  val greetPrinter = system.actorOf(Props[GreetPrinter])\n  // after zero seconds, send a Greet message every second to the greeter with a sender of the greetPrinter\n  system.scheduler.schedule(0.seconds, 1.second, greeter, Greet)(system.dispatcher, greetPrinter)\n}\n```", "```java\nMultiple main classes detected, select one to run:\n\n [1] HelloAkkaJava\n [2] HelloAkkaScala\n\nEnter number: 2\n\n[info] Running HelloAkkaScala \nGreeting: hello, akka\nGreeting: hello, typesafe\nhello, typesafe\nhello, typesafe\nhello, typesafe\nâ€¦ [press CTRL-C to interrupt]\n```", "```java\npackage se.sfjd.ch8\n\nimport akka.actor.Actor\nimport akka.event.LoggingReceive\n\nobject Flight {\n  case class BookSeat(number:Int) {\n    require(number > 0)\n  }\n  case object Done\n  case object Failed\n}\nclass Flight extends Actor {\n  import Flight._\n  var seatsLeft = 50\n  def receive = LoggingReceive {\n    case BookSeat(nb) if nb <= seatsLeft =>\n      seatsLeft -= nb\n      sender ! Done\n    case _ => sender ! Failed\n  }\n}\n```", "```java\nobject Hotel {\n  case class BookRoom(number:Int) {\n    require(number > 0)\n  }\n  case object Done\n  case object Failed\n}\n\nclass Hotel extends Actor {\n  import Hotel._\n  var roomsLeft = 15\n  def receive = LoggingReceive {\n    case BookRoom(nb) if nb <= roomsLeft =>\n      roomsLeft -= nb\n      sender ! Done\n    case _ => sender ! Failed\n  }\n}\n```", "```java\nobject TravelAgent {\n  case class BookTrip(transport: ActorRef, accomodation: ActorRef, nbOfPersons: Int)\n  case object Done\n  case object Failed\n}\nclass TravelAgent extends Actor {\n  import TravelAgent._\n\n  def receive = LoggingReceive {\n    case BookTrip(flightAgent, hotelAgent, persons) =>\n      flightAgent ! Flight.BookSeat(persons)\n      hotelAgent ! Hotel.BookRoom(persons)\n      context.become(awaitTransportOrAccomodation(flightAgent, hotelAgent,sender))\n  }\n\n  def awaitTransportOrAccomodation(transport: ActorRef, accomodation: ActorRef, customer:ActorRef): Receive = LoggingReceive {\n    case Flight.Done =>\n      context.become(awaitAccomodation(customer))\n    case Hotel.Done =>\n      context.become(awaitTransport(customer))\n    case Flight.Failed | Hotel.Failed =>\n      customer ! Failed\n      context.stop(self) \n  }\n\n  def awaitTransport(customer: ActorRef): Receive = LoggingReceive {\n    case Flight.Done =>\n      customer ! Done\n      context.stop(self)\n    case Flight.Failed => \n      customer ! Failed\n      context.stop(self)\n  }\n\n  def awaitAccomodation(customer: ActorRef): Receive = LoggingReceive {\n    case Hotel.Done =>\n      customer ! Done\n      context.stop(self)\n    case Hotel.Failed =>\n      customer ! Failed\n      context.stop(self)\n  }\n}\n```", "```java\npackage se.sfjd.ch8\n\nimport akka.actor.Actor\nimport akka.actor.Props\nimport akka.event.LoggingReceive\n\nclass BookingMain extends Actor {\n  val flight = context.actorOf(Props[Flight], \"Stockholm-Nassau\")\n  val hotel = context.actorOf(Props[Hotel], \"Atlantis\")\n  val travelAgent = context.actorOf(Props[TravelAgent], \"ClubMed\")\n  travelAgent ! TravelAgent.BookTrip(flight,hotel,10)\n\n  def receive = LoggingReceive {\n      case TravelAgent.Done =>\n        println(\"Booking Successful\")\n        context.stop(self)\n      case TravelAgent.Failed =>\n        println(\"Booking Failed\")\n        context.stop(self)\n  }\n}\n```", "```java\noverride val supervisorStrategy = OneForOneStrategy(loggingEnabled = false) {\n    case _: Flight.FlightBookingException =>\n      log.warning(\"Flight Service Failed. Restarting\")\n      Restart\n    case _: Hotel.HotelBookingException =>\n      log.warning(\"Hotel Service Failed. Restarting\")\n      Restart\n    case e =>\n      log.error(\"Unexpected failure\", e.getMessage)\n      Stop\n  }\n```", "```java\nobject Flight {\n  case class BookSeat(number:Int) {\n    require(number > 0)\n  }\n  case object Done\n  case object Failed\n  class FlightBookingException extends Exception(\"Unavailable Flight Booking Service\")\n}\n```", "```java\nclass Flight extends Actor {\n  import Flight._\n  var seatsLeft = 50\n  def receive = LoggingReceive {\n    case BookSeat(nb) if nb <= seatsLeft =>\n      unreliable()\n      seatsLeft -= nb\n      sender ! Done\n    case _ => sender ! Failed\n  }\n\nprivate def unreliable(): Unit =\n    // the service is only working 75 percent of the time\n    if (ThreadLocalRandom.current().nextDouble() < 0.25)\n      throw new FlightBookingException\n}\n```", "```java\nâ€¦\n[WARN] [01/24/2014 00:23:50.098] [Main-akka.actor.default-dispatcher-3] [akka://Main/user/app/ClubMed] Flight Service Failed. Restarting\nâ€¦\n\n```", "```java\npackage scalatest\n\nimport akka.actor.ActorSystem\nimport akka.actor.Actor\nimport akka.actor.Props\nimport akka.testkit.TestKit\nimport org.scalatest.WordSpecLike\nimport org.scalatest.matchers.MustMatchers\nimport org.scalatest.BeforeAndAfterAll\nimport akka.testkit.ImplicitSender\n\n//http://doc.akka.io/docs/akka/snapshot/scala/testing.html\nobject Setup {\n  class EchoActor extends Actor {\n    def receive = {\n      case x => sender ! x\n    }\n  }\n\n  case class Address(street: String,\n                      city: String,\n                      state: String,\n                      zip: String)\n//see https://developers.google.com/maps/documentation/geocoding/#Limits\nclass GeoActor extends Actor {\n  def receive = {\n    case Address(street,city,state,zip) => {\n      import dispatch._, Defaults._\n      val svc = url(s\"http://maps.googleapis.com/maps/api/geocode/xml?address=${street},${city},${state},${zip}&sensor=true\".replace(\" \",\"+\"))\n      val response = Http(svc OK as.xml.Elem)\n      val lat = (for {\n        elem <- response() \\\\ \"geometry\" \\ \"location\" \\ \"lat\"\n      } yield elem.text).head\n      val lng = (for {\n        elem <- response() \\\\ \"geometry\" \\ \"location\" \\ \"lng\"\n      } yield elem.text).head\n      sender ! s\"${lat},${lng}\"\n    }\n    case _ => sender ! \"none\"\n  }\n }\n}\n```", "```java\nclass Test09(asys: ActorSystem) extends TestKit(asys) with ImplicitSender with WordSpecLike with MustMatchers with BeforeAndAfterAll {\n  import Setup._\n  def this() = this(ActorSystem(\"Setup\"))\n\n  override def afterAll {\n    TestKit.shutdownActorSystem(system)\n  }\n\n  \"An Echo actor\" must {\n    \"return messages\" in {\n      val echo = system.actorOf(Props[EchoActor])\n      echo ! \"hello world\"\n      expectMsg(\"hello world\")\n    }\n  }\n\n  \"Geo actor\" must {\n    \"send back lat,lon\" in {\n      val geo = system.actorOf(Props[GeoActor])\n      geo ! Address(\"27 South Park Avenue\",\"San Francisco\",\"CA\",\"94107\")\n      expectMsg(\"37.7822991,-122.3930776\")\n      }\n    }\n  }\n```"]