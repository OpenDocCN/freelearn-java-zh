["```java\n//build.gradle\ndependencies {\n    // JPA / ORM / Hibernate:\n    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'\n...\n}\n```", "```java\n    //src/main/resources/data.sql\n    insert into calendar_users(id,email,password,first_name,last_name) values (0, 'user1@example.com','$2a$04$qr7RWyqOnWWC1nwotUW1nOe1RD5.mKJVHK16WZy6v49pymu1WDHmi','User','1');\n    ```", "```java\n    insert into calendar_users(id,email,password,first_name,last_name) values (1,'admin1@example.com','$2a$04$0CF/Gsquxlel3fWq5Ic/ZOGDCaXbMfXYiXsviTNMQofWRXhvJH3IK','Admin','1');\n    ```", "```java\n    insert into calendar_users(id,email,password,first_name,last_name) values (2,'user2@example.com','$2a$04$PiVhNPAxunf0Q4IMbVeNIuH4M4ecySWHihyrclxW..PLArjLbg8CC','User2','2');\n    ```", "```java\n    insert into role(id, name) values (0, 'ROLE_USER');\n    insert into role(id, name) values (1, 'ROLE_ADMIN');\n    ```", "```java\n    insert into user_role(user_id,role_id) values (0, 0);\n    ```", "```java\n    insert into user_role(user_id,role_id) values (1, 0);\n    insert into user_role(user_id,role_id) values (1, 1);\n    ```", "```java\n    insert into events (id,date_when,summary,description,owner,attendee) values (100,'2023-07-03 20:30:00','Birthday Party','This is going to be a great birthday',0,1);\n    insert into events (id,date_when,summary,description,owner,attendee) values (101,'2023-12-23 13:00:00','Conference Call','Call with the client',2,0);\n    insert into events (id,date_when,summary,description,owner,attendee) values (102,'2023-09-14 11:30:00','Vacation','Paragliding in Greece',1,2);\n    ```", "```java\ndatasource:\n  url: jdbc:h2:mem:dataSource;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE\n  driverClassName: org.h2.Driver\n  username: sa\n  password:\njpa:\n  database-platform: org.hibernate.dialect.H2Dialect\n  show-sql: true\n  hibernate:\n    ddl-auto: create-drop\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/domain/Event.java\n    @Entity\n    @Table(name = \"events\")\n    public class Event implements Serializable{\n        @Id\n        @GeneratedValue(strategy = GenerationType.IDENTITY)\n        private Integer id;\n        @NotEmpty(message = \"Summary is required\")\n        private String summary;\n        @NotEmpty(message = \"Description is required\")\n        private String description;\n        @NotNull(message = \"When is required\")\n        private Calendar dateWhen;\n        @NotNull(message = \"Owner is required\")\n        @ManyToOne(fetch = FetchType.LAZY)\n        @JoinColumn(name=\"owner\", referencedColumnName=\"id\")\n        private CalendarUser owner;\n        @ManyToOne(fetch = FetchType.LAZY)\n        @JoinColumn(name=\"attendee\", referencedColumnName=\"id\")\n        private CalendarUser attendee;\n    ...\n    }\n    ```", "```java\n    //src/main/java/com/packtpub/springsecurity/domain/Role.java\n    @Entity\n    @Table(name = \"role\")\n    public class Role implements Serializable {\n        @Id\n        @GeneratedValue(strategy = GenerationType.AUTO)\n        private Integer id;\n        private String name;\n        @ManyToMany(fetch = FetchType.EAGER, mappedBy = \"roles\")\n        private Set<CalendarUser> users;\n    ...\n    }\n    ```", "```java\n    //src/main/java/com/packtpub/springsecurity/domain/CalendarUser.java\n    @Entity\n    @Table(name = \"calendar_users\")\n    public class CalendarUser implements Principal, Serializable {\n        private static final long serialVersionUID = 8433999509932007961L;\n        @Id\n        @SequenceGenerator(name = \"user_id_seq\", initialValue = 1000)\n        @GeneratedValue(generator = \"user_id_seq\")\n        private Integer id;\n        private String firstName;\n        private String lastName;\n        private String email;\n        private String password;\n        @ManyToMany(fetch = FetchType.EAGER)\n        @JoinTable(name = \"user_role\",\n              joinColumns = @JoinColumn(name = \"user_id\"),\n              inverseJoinColumns = @JoinColumn(name = \"role_id\"))\n        private Set<Role> roles;\n    ...\n    }\n    ```", "```java\n//build.gradle\ndependencies {\n...\nimplementation 'org.springframework.boot:spring-boot-starter-data-jdbc'\n...\n}\n```", "```java\n    //com/packtpub/springsecurity/repository/CalendarUserRepository.java\n    public interface CalendarUserRepository extends JpaRepository<CalendarUser, Integer> {\n        CalendarUser findByEmail(String email);\n    }\n    ```", "```java\n    //com/packtpub/springsecurity/repository/EventRepository.java\n    public interface EventRepository extends JpaRepository<Event, Integer> {\n    }\n    ```", "```java\n//com/packtpub/springsecurity/repository/RoleRepository.java\npublic interface RoleRepository extends JpaRepository<Role, Integer> {\n}\n```", "```java\n    //com/packtpub/springsecurity/dataaccess/JpaEventDao.java\n    @Repository\n    public class JpaEventDao implements EventDao {\n        // --- members ---\n        private EventRepository repository;\n        // --- constructors ---\n        public JpaEventDao(EventRepository repository) {\n            if (repository == null) {\n                throw new IllegalArgumentException(\"repository cannot be null\");\n            }\n            this.repository = repository;\n        }\n        // --- EventService ---\n        @Override\n        @Transactional(readOnly = true)\n        public Event getEvent(int eventId) {\n            return repository.findById(eventId).orElse(null);\n        }\n        @Override\n        public int createEvent(final Event event) {\n            if (event == null) {\n                throw new IllegalArgumentException(\"event cannot be null\");\n            }\n            if (event.getId() != null) {\n                throw new IllegalArgumentException(\"event.getId() must be null when creating a new Message\");\n            }\n            final CalendarUser owner = event.getOwner();\n            if (owner == null) {\n                throw new IllegalArgumentException(\"event.getOwner() cannot be null\");\n            }\n            final CalendarUser attendee = event.getAttendee();\n            if (attendee == null) {\n                throw new IllegalArgumentException(\"attendee.getOwner() cannot be null\");\n            }\n            final Calendar when = event.getDateWhen();\n            if(when == null) {\n                throw new IllegalArgumentException(\"event.getWhen() cannot be null\");\n            }\n            Event newEvent = repository.save(event);\n            return newEvent.getId();\n        }\n        @Override\n        @Transactional(readOnly = true)\n        public List<Event> findForUser(final int userId) {\n            Event example = new Event();\n            CalendarUser cu = new CalendarUser();\n            cu.setId(userId);\n            example.setOwner(cu);\n            return repository.findAll(Example.of(example));\n        }\n        @Override\n        @Transactional(readOnly = true)\n        public List<Event> getEvents() {\n            return repository.findAll();\n        }\n    }\n    ```", "```java\n    //com/packtpub/springsecurity/dataaccess/JpaCalendarUserDao.java\n    @Repository\n    public class JpaCalendarUserDao implements CalendarUserDao {\n        private static final Logger logger = LoggerFactory\n                .getLogger(JpaCalendarUserDao.class);\n        // --- members ---\n        private CalendarUserRepository userRepository;\n        private RoleRepository roleRepository;\n        // --- constructors ---\n        public JpaCalendarUserDao(final CalendarUserRepository repository,\n                                  final RoleRepository roleRepository) {\n            if (repository == null) {\n                throw new IllegalArgumentException(\"repository cannot be null\");\n            }\n            if (roleRepository == null) {\n                throw new IllegalArgumentException(\"roleRepository cannot be null\");\n            }\n            this.userRepository = repository;\n            this.roleRepository = roleRepository;\n        }\n        // --- CalendarUserDao methods ---\n        @Override\n        @Transactional(readOnly = true)\n        public CalendarUser getUser(final int id) {\n            return userRepository.findById(id).orElse(null);\n        }\n        @Override\n        @Transactional(readOnly = true)\n        public CalendarUser findUserByEmail(final String email) {\n            if (email == null) {\n                throw new IllegalArgumentException(\"email cannot be null\");\n            }\n            try {\n                return userRepository.findByEmail(email);\n            } catch (EmptyResultDataAccessException notFound) {\n                return null;\n            }\n        }\n        @Override\n        @Transactional(readOnly = true)\n        public List<CalendarUser> findUsersByEmail(final String email) {\n            if (email == null) {\n                throw new IllegalArgumentException(\"email cannot be null\");\n            }\n            if (\"\".equals(email)) {\n                throw new IllegalArgumentException(\"email cannot be empty string\");\n            }\n            return userRepository.findAll();\n        }\n        @Override\n        public int createUser(final CalendarUser userToAdd) {\n            if (userToAdd == null) {\n                throw new IllegalArgumentException(\"userToAdd cannot be null\");\n            }\n            if (userToAdd.getId() != null) {\n                throw new IllegalArgumentException(\"userToAdd.getId() must be null when creating a \"+CalendarUser.class.getName());\n            }\n            Set<Role> roles = new HashSet<>();\n            roles.add(roleRepository.findById(0).orElse(null));\n            userToAdd.setRoles(roles);\n            CalendarUser result = userRepository.save(userToAdd);\n            userRepository.flush();\n            return result.getId();\n        }\n    }\n    ```", "```java\n//com/packtpub/springsecurity/service/DefaultCalendarService.java\n@Repository\npublic class DefaultCalendarService implements CalendarService {\n... omitted for brevity ...\n  public int createUser(CalendarUser user) {\n    String encodedPassword = passwordEncoder.encode(user.getPassword());\n    user.setPassword(encodedPassword);\n    int userId = userDao.createUser(user);\n    return userId;\n  }\n}\n```", "```java\n    //com/packtpub/springsecurity/service/ CalendarUserDetailsService.java\n    @Component\n    public class CalendarUserDetailsService implements UserDetailsService {\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n        CalendarUser user = calendarUserDao.findUserByEmail(username);\n        if (user == null) {\n            throw new UsernameNotFoundException(\"Invalid username/password.\");\n        }\n        return new CalendarUserDetails(user);\n     }\n    }\n    ```", "```java\n    //com/packtpub/springsecurity/configuration/SecurityConfig.java\n    @Configuration\n    @EnableWebSecurity\n    public class SecurityConfig {\n    ... omitted for brevity ...\n        @Bean\n        public AuthenticationManager authManager(HttpSecurity http) throws Exception {\n            AuthenticationManagerBuilder authenticationManagerBuilder =\n                http.getSharedObject(AuthenticationManagerBuilder.class);\n            return authenticationManagerBuilder.build();\n        }\n      }\n    ...\n    }\n    ```", "```java\n//build.gradle\ndependencies {\n// MondgoDB\nimplementation 'org.springframework.boot:spring-boot-starter-data-mongodb'\nimplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo.spring30x:4.9.2'\n}\n```", "```java\n//src/main/resources/application.yml\nspring:\n  ## Thymeleaf configuration:\n  thymeleaf:\n    cache: false\n    mode: HTML\n  # MongoDB\n  data:\n    mongodb:\n      host: localhost\n      database: dataSource\nde:\n  flapdoodle:\n    mongodb:\n      embedded:\n        version: 7.0.0\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/ MongoDataInitializer.java\n@Configuration\npublic class MongoDataInitializer {\n    private static final Logger logger = LoggerFactory\n            .getLogger(MongoDataInitializer.class);\n    private RoleRepository roleRepository;\n    private CalendarUserRepository calendarUserRepository;\n    private EventRepository eventRepository;\n    public MongoDataInitializer(RoleRepository roleRepository, CalendarUserRepository calendarUserRepository, EventRepository eventRepository) {\n       this.roleRepository = roleRepository;\n       this.calendarUserRepository = calendarUserRepository;\n       this.eventRepository = eventRepository;\n    }\n    @PostConstruct\n    public void setUp() {\n    }\n    CalendarUser user, admin, user2;\n    // CalendarUsers\n    {\n        user = new CalendarUser(0, \"user1@example.com\",\"$2a$04$qr7RWyqOnWWC1nwotUW1nOe1RD5.mKJVHK16WZy6v49pymu1WDHmi\",\"User\",\"1\");\n        admin = new CalendarUser(1,\"admin1@example.com\",\"$2a$04$0CF/Gsquxlel3fWq5Ic/ZOGDCaXbMfXYiXsviTNMQofWRXhvJH3IK\",\"Admin\",\"1\");\n        user2 = new CalendarUser(2,\"user2@example.com\",\"$2a$04$PiVhNPAxunf0Q4IMbVeNIuH4M4ecySWHihyrclxW..PLArjLbg8CC\",\"User2\",\"2\");\n    }\n    Role user_role, admin_role;\n    private void seedRoles(){\n        user_role = new Role(0, \"ROLE_USER\");\n        user_role = roleRepository.save(user_role);\n        admin_role = new Role(1, \"ROLE_ADMIN\");\n        admin_role = roleRepository.save(admin_role);\n    }\n    private void seedEvents(){\n        // Event 1\n        Event event1 = new Event(\n                100,\n                \"Birthday Party\",\n                \"This is going to be a great birthday\",\n             LocalDateTime.of(2023, 6,3,6,36,00),\n                user,\n                admin\n                );\n        // Event 2\n        Event event2 = new Event(\n                101,\n                \"Conference Call\",\n                \"Call with the client\",\n             LocalDateTime.of(2023, 11,23,13,00,00),\n                user2,\n                user\n                );\n        // Event 3\n        Event event3 = new Event(\n                102,\n                \"Vacation\",\n                \"Paragliding in Greece\",\n             LocalDateTime.of(2023, 8,14,11,30,00),\n                admin,\n                user2\n                );\n        // save Event\n        eventRepository.save(event1);\n        eventRepository.save(event2);\n        eventRepository.save(event3);\n        List<Event> events = eventRepository.findAll();\n        logger.info(\"Events: {}\", events);\n    }\n    private void seedCalendarUsers(){\n        // user1\n        user.addRole(user_role);\n        // admin2\n        admin.addRole(user_role);\n        admin.addRole(admin_role);\n        // user2\n        user2.addRole(user_role);\n        // CalendarUser\n        calendarUserRepository.save(user);\n        calendarUserRepository.save(admin);\n        calendarUserRepository.save(user2);\n        List<CalendarUser> users = calendarUserRepository.findAll();\n        logger.info(\"CalendarUsers: {}\", users);\n    }\n}\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/domain/Event.java\n    @Entity\n    @Table(name = \"events\")\n    public class Event implements Serializable{\n        @Id\n        @GeneratedValue(strategy = GenerationType.AUTO)\n        private Integer id;\n        @NotEmpty(message = \"Summary is required\")\n        private String summary;\n        @NotEmpty(message = \"Description is required\")\n        private String description;\n        @NotNull(message = \"When is required\")\n        private Calendar dateWhen;\n        @NotNull(message = \"Owner is required\")\n        @ManyToOne(fetch = FetchType.LAZY)\n        @JoinColumn(name=\"owner\", referencedColumnName=\"id\")\n        private CalendarUser owner;\n        @ManyToOne(fetch = FetchType.LAZY)\n        @JoinColumn(name=\"attendee\", referencedColumnName=\"id\")\n        private CalendarUser attendee;\n    ...\n    }\n    ```", "```java\n    //src/main/java/com/packtpub/springsecurity/domain/Event.java\n    @Document(collection=\"events\")\n    public class Event implements Persistable<Integer>, Serializable{\n        @Id\n        private Integer id;\n        @NotEmpty(message = \"Summary is required\")\n        private String summary;\n        @NotEmpty(message = \"Description is required\")\n        private String description;\n        @NotNull(message = \"When is required\")\n        private LocalDateTime dateWhen;\n        @NotNull(message = \"Owner is required\")\n        @DBRef\n        private CalendarUser owner;\n        @DBRef\n        private CalendarUser attendee;\n    ...\n    }\n    ```", "```java\n    //src/main/java/com/packtpub/springsecurity/domain/Role.java\n    @Document(collection=\"role\")\n    public class Role  implements Persistable<Integer>, Serializable {\n        @Id\n        private Integer id;\n        private String name;\n    ...\n    }\n    ```", "```java\n    //src/main/java/com/packtpub/springsecurity/domain/CalendarUser.java\n    @Document(collection=\"calendar_users\")\n    public class CalendarUser implements Persistable<Integer>, Serializable {\n        @Id\n        private Integer id;\n        private String firstName;\n        private String lastName;\n        private String email;\n        private String password;\n        @DBRef(lazy = false)\n        private Set<Role> roles = new HashSet<>(5);\n    …\n    }\n    ```", "```java\n//com/packtpub/springsecurity/repository/CalendarUserRepository.java\npublic interface CalendarUserRepository extends MongoRepository<CalendarUser, Integer> {\n    CalendarUser findByEmail(String email);\n}\n...\n```", "```java\n//src/main/java/com/packtpub/springsecurity/dataaccess/MongoEventDao.java\n@Repository\npublic class MongoEventDao implements EventDao {\nprivate EventRepository repository;\n// Simple Primary Key Generator\nprivate AtomicInteger eventPK = new AtomicInteger(102);\n  @Override\n    public int createEvent(final Event event) {\n...\n        // Get the next PK instance\n        event.setId(eventPK.incrementAndGet());\n        Event newEvent = repository.save(event);\n        return newEvent.getId();\n    }\n...\n}\n```", "```java\n@Repository\npublic class MongoCalendarUserDao implements CalendarUserDao {\n```"]