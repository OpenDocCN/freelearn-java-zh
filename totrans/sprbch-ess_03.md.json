["```java\npublic interface ItemReader<T> {\n\nT read() throws Exception, UnexpectedInputException, ParseException;\n\n}\n```", "```java\nField                 Length                   Position\nID                    2 characters             1 to 2\nLast name             10 characters            3 to 12\nFirst name            10 characters            13 to 22\nDesignation           10 characters            23 to 32\nDepartment            15 characters            33 to 47\nYear of joining       4 characters             48 to 51\n```", "```java\n11Alden     Richie    associate   sales          1996\n12Casey     Stanley   manager     sales          1999\n13Rex       An        architect   development    2001\n14Royce     Dan       writer      development    2006\n15Merlin    Sams      accountant  finance        1995\n16Olin      Covey     manager     finance        1989\n```", "```java\npackage batch;\n\nimport java.io.Serializable;\n\npublic class Employee implements Serializable {\n  int id;\n  String lastName;\n  String firstName;\n  String designation;\n  String department;\n  int yearOfJoining;\n\n  public int getID() {\n  return id;\n  }\n  public void setID(int id) {\n    this.id = id;\n  }\n  public String getLastName() {\n    return lastName;\n  }\n  public void setLastName(String lastName) {\n    this.lastName = lastName;\n  }\n  public String getFirstName() {\n    return firstName;\n  }\n  public void setFirstName(String firstName) {\n    this.firstName = firstName;\n  }\n  public String getDesignation() {\n    return designation;\n  }\n  public void setDesignation(String designation) {\n    this.designation = designation;\n  }\n  public String getDepartment() {\n    return department;\n  }\n  public void setDepartment(String department) {\n    this.department = department;\n  }\n  public int getYearOfJoining() {\n    return yearOfJoining;\n  }\n  public void setYearOfJoining(int yearOfJoining) {\n    this.yearOfJoining = yearOfJoining;\n  }\n\n  public String toString() {\n    return \"Employee: ID=\"+ id + \", Last Name=\"+ lastName +\n    \", First Name=\"+ firstName + \", Designation=\"+ designation +\n    \", Department=\"+ department + \",Year of joining=\"+\n    yearOfJoining;\n    }\n}\n```", "```java\npublic interface LineMapper<T> {\n\nT mapLine(String line, int lineNumber) throws Exception;\n\n}\n```", "```java\npublic interface LineTokenizer {\n\nFieldSet tokenize(String line);\n\n}\n```", "```java\npublic interface FieldSetMapper<T> {\n\n  T mapFieldSet(FieldSet fieldSet);\n\n}\n```", "```java\npackage batch;\n\nimport org.springframework.batch.item.file.mapping.FieldSetMapper;\nimport org.springframework.batch.item.file.transform.FieldSet;\n\nclass EmployeeFieldSetMapper implements FieldSetMapper<Employee> {\n  public Employee mapFieldSet(FieldSet fieldSet) {\n    Employee emp = new Employee();\n    emp.setID(fieldSet.readInt(\"ID\")); \n    emp.setLastName(fieldSet.readString(\"lastName\"));\n    emp.setFirstName(fieldSet.readString(\"firstName\"));\n    emp.setDesignation(fieldSet.readString(\"designation\"));\n    emp.setDepartment(fieldSet.readString(\"department\"));\n    emp.setYearOfJoining(fieldSet.readInt(\"yearOfJoining\"));\n    return emp;\n  }\n}\n```", "```java\nFlatFileItemReader<Employee> itemReader = new FlatFileItemReader<Employee>();\nitemReader.setResource(new FileSystemResource(\"employees.txt\"));\n// FixedLengthTokenizer reads each field of length specified\nDefaultLineMapper<Employee> lineMapper = new DefaultLineMapper<Employee>();\nFixedLengthTokenizer lineTokenizer = new FixedLengthTokenizer();\n\nlineMapper.setLineTokenizer(lineTokenizer);\nlineMapper.setFieldSetMapper(new EmployeeFieldSetMapper());\nitemReader.setLineMapper(lineMapper);\nitemReader.open);\nEmployee ;\nwhile (employee != null) {\n  employee = itemReader.read();\n  if (employee == null) {\n    return RepeatStatus.FINISHED;\n  }\n  System.out.println(employee.toString());\n}\n```", "```java\n** Executing the fixed width file read batch job! **\nEmployee: ID=11, Last Name=Alden, First Name=Richie, Designation=associate, Department=sales,Year of joining=1996\nEmployee: ID=12, Last Name=Casey, First Name=Stanley, Designation=manager, Department=sales,Year of joining=1999\nEmployee: ID=13, Last Name=Rex, First Name=An, Designation=architect, Department=development,Year of joining=2001\nEmployee: ID=14, Last Name=Royce, First Name=Dan, Designation=writer, Department=development,Year of joining=2006\nEmployee: ID=15, Last Name=Merlin, First Name=Sams, Designation=accountant, Department=finance,Year of joining=1995\nEmployee: ID=16, Last Name=Olin, First Name=Covey, Designation=manager, Department=finance,Year of joining=1989\nExit Status : COMPLETED\n```", "```java\n<beans:bean id=\"employeeFile\" \nclass=\"org.springframework.core.io.FileSystemResource\" > \n<beans:constructor-arg value=\"\"/> \n</beans:bean> \n<beans:bean id=\"employeeReader\" \nclass=\"org.springframework.batch.item.file.FlatFileItemReader\"> \n<beans:property name=\"resource\" ref=\"employeeFile\" /> \n<beans:property name=\"lineMapper\"> \n<beans:bean class=\"org.springframework.batch.item.file.mapping.\nDefaultLineMapper\"> \n<beans:property name=\"lineTokenizer\"> \n<beans:bean class=\"org.springframework.batch.item.file.transform. \nFixedLengthTokenizer\"> \n<beans:property name=\"names\" value=\"ID, lastName, firstName, designation, department, yearOfJoining\"/> \n<beans:property name=\"columns\" value=\"1-2,3-12,13-22,23-32,33-47,48-51\"/> \n</beans:bean> \n</beans:property> \n<beans:property name=\"fieldSetMapper\"> \n\n</beans:bean> \n</beans:property> \n</beans:bean> \n</beans:property> \n</beans:bean> \n<beans:bean id=\"employee\" class=\"\" />batchstep\n```", "```java\n1,Alden,Richie,associate,sales,1996\n2,Casey,Stanley,manager,sales,1999\n3,Rex,An,architect,development,2001\n4,Royce,Dan,writer,development,2006\n5,Merlin,Sams,accountant,finance,1995\n6,Olin,Covey,manager,finance,1989\n```", "```java\n// Delimited File Read\nFlatFileItemReader<Employee> itemReader = new FlatFileItemReader<Employee>();\nitemReader.setResource(new FileSystemResource(\"employees.csv\"));\n// DelimitedLineTokenizer defaults to comma as its delimiter\nDefaultLineMapper<Employee> lineMapper = new DefaultLineMapper<Employee>();\nDelimitedLineTokenizer lineTokenizer = new DelimitedLineTokenizer();\nlineTokenizer.setNames(new String[] { \"ID\", \"lastName\", \"firstName\", \"designation\", \"department\", \"yearOfJoining\" });\nlineMapper.setLineTokenizer(lineTokenizer);\nlineMapper.setFieldSetMapper(new EmployeeFieldSetMapper());\nitemReader.setLineMapper(lineMapper);\nitemReader.open(new ExecutionContext());\n  employee = itemReader.read();\n  if (employee == null) {\n    return RepeatStatus.FINISHED;\n  }\n  System.out.println(employee.toString());\n}\n```", "```java\n** Executing the delimited file read batch job! **\nEmployee: ID=1, Last Name=Alden, First Name=Richie, Designation=associate, Department=sales,Year of joining=1996\nEmployee: ID=2, Last Name=Casey, First Name=Stanley, Designation=manager, Department=sales,Year of joining=1999\nEmployee: ID=3, Last Name=Rex, First Name=An, Designation=architect, Department=development,Year of joining=2001\nEmployee: ID=4, Last Name=Royce, First Name=Dan, Designation=writer, Department=development,Year of joining=2006\nEmployee: ID=5, Last Name=Merlin, First Name=Sams, Designation=accountant, Department=finance,Year of joining=1995\nEmployee: ID=6, Last Name=Olin, First Name=Covey, Designation=manager, Department=finance,Year of joining=1989\nExit Status : COMPLETED\n```", "```java\n<beans:bean id=\"employeeFile\" \n  class=\"org.springframework.core.io.FileSystemResource\" \n  scope=\"step\"> \n<beans:constructor-arg value=\"#{jobParameters[employeeFile]}\"/> \n</beans:bean> \n<beans:bean id=\"employeeFileReader\" class=\"org.springframework.batch.item.file.FlatFileItemReader\"> \n<beans:property name=\"resource\" ref=\"employeeFile\" /> \n<beans:property name=\"lineMapper\"> \n<beans:bean class=\"org.springframework.batch.item.file.mapping.DefaultLineMapper\"> \n<beans:property name=\"lineTokenizer\"> \n<beans:bean class=\"org.springframework.batch.item.file.transform. \nDelimitedLineTokenizer\"> \n<beans:property name=\"names\" value=\"ID, lastName, firstName, designation, department, yearOfJoining\"/> \n<beans:property name=\"delimiter\" value=\",\"/> \n</beans:bean> \n</beans:property> \n<beans:property name=\"fieldSetMapper\"> \n<beans:bean \nclass=\"batch.EmployeeFieldSetMapper\"/> \n</beans:property> \n</beans:bean> \n</beans:property> \n</beans:bean>\n```", "```java\nEMPLOYEE,Steve,Jacob,21,manager,2009\nBANKINFO,524851478569,STEVEJACOB,REDROSECITY\nADDRESSINFO,No24,SUNFLOWERWAY,CASAYA\n```", "```java\n<bean id=\"employeeFileLineMapper\"\nclass=\" org.springframework.batch.item.file.mapping.PatternMatchingCompositeLineMapper\">\n<property name=\"tokenizers\">\n<map>\n<entry key=\"EMPLOYEE*\" value-ref=\"employeeTokenizer\"/>\n<entry key=\"BANKINFO*\" value-ref=\"bankInfoTokenizer\"/>\n<entry key=\"ADDRESSINFO*\" value-ref=\"addressInfoTokenizer\"/>\n</map>\n</property>\n<property name=\"fieldSetMappers\">\n<map>\n<entry key=\"EMPLOYEE*\" value-ref=\"employeeFieldSetMapper\"/>\n<entry key=\"BANKINFO*\" value-ref=\"bankInfoFieldSetMapper\"/>\n<entry key=\"ADDRESSINFO*\" value-ref=\"addressInfoFieldSetMapper\"/>\n</map>\n</property>\n</bean>\n```", "```java\n<beans:bean id=\"employeeFile\" \nclass=\"org.springframework.core.io.FileSystemResource\" scope=\"step\"> \n<beans:constructor-arg value=\"#{jobParameters[employeeFile]}\"/> \n</beans:bean> \n<beans:bean id=\"employeeFileReader\" \nclass=\"org.springframework.batch.item.xml.StaxEventItemReader\"> \n<beans:property name=\"fragmentRootElementName\" value=\"employee\" /> \n<beans:property name=\"resource\" ref=\"employeeFile\" /> \n<beans:property name=\"unmarshaller\" ref=\"employeeMarshaller\" /> \n</beans:bean>\n```", "```java\n<bean id=\"employeeMarshaller\"\nclass=\"org.springframework.oxm.xstream.XStreamMarshaller\">\n<property name=\"aliases\">\n<util:map id=\"aliases\">\n<entry key=\"employee\"\nvalue=\"batch.Employee\" />\n<entry key=\"ID\" value=\"java.lang.Integer\" />\n</util:map>\n</property>\n</bean>\n```", "```java\nStaxEventItemReader xmlStaxEventItemReader = ;\nResource resource = ( .getBytes());\nMap aliases = new HashMap();\naliases.put(\"employee\",\"batch.Employee\");\naliases.put(\"ID\",\"java.lang.Integer\");\nMarshaller marshaller = newXStreamMarshaller();\nmarshaller.setAliases(aliases);\nxmlStaxEventItemReader.setUnmarshaller(marshaller);\nxmlStaxEventItemReader.setResource(resource);\nxmlStaxEventItemReader.setFragmentRootElementName(\"employee\");\nxmlStaxEventItemReader.open(newExecutionContext());\nboolean hasNext = true;\nEmployee employee = null;\nwhile(hasNext) {\n  employee = xmlStaxEventItemReader.read();\n  if(employee == null) {\n    hasNext = false;\n  }\n  else{\n    System.out.println(employee.getName());\n  }\n}\n```", "```java\npublic class EmployeeRowMapper implements RowMapper {\npublic static final String ID_COLUMN = \"id\";\npublic static final String LAST_NAME_COLUMN = \"lastname\";\npublic static final String FIRST_NAME_COLUMN = \"firstname\";\npublic static final String DESIGNATIoN_COLUMN = \"designation\";\npublic static final String DEPARTMENT_COLUMN = \"department\";\npublic static final String YEAR_OF_JOINING_COLUMN = \"yearOfJoining\";\n\npublic Object mapRow(ResultSet rs, int rowNum) throws SQLException \n  {\n  Employee employee = new Employee();\n  employee.setId(rs.getInt(ID_COLUMN));\n  employee.setLastName(rs.getString(LAST_NAME_COLUMN));\n  employee.setFirstName(rs.getString(FIRST_NAME_COLUMN));\n  employee.setDesignation(rs.getString(DESIGNATION_COLUMN));\n  employee.setDepartment(rs.getString(DEPARTMENT_COLUMN));\n  employee.setYearOfJoining(rs.getString(YEAR_OF_JOINING_COLUMN));\n  return employee;\n  }\n}\n```", "```java\nJdbcCursorItemReader itemReader = new JdbcCursorItemReader();\nitemReader.setDataSource(dataSource);\nitemReader.setSql(\"SELECT ID, LASTNAME, FIRSTNAME,DESIGNATION,DEPARTMENT,YEAROFJOINING from EMPLOYEE\");\nitemReader.setRowMapper(new EmployeeRowMapper());\nint counter = 0;\nExecutionContext executionContext = new ExecutionContext();\nitemReader.open(executionContext);\nObject employee = newObject();\nwhile(employee != null){\nemployee = itemReader.read();\ncounter++;\n}\nitemReader.close(executionContext);\n```", "```java\n<bean id=\"itemReader\" class=\" org.springframework.batch.item.database.JdbcCursorItemReader\">\n  <property name=\"dataSource\" ref=\"dataSource\"/>\n  <property name=\"sql\" value=\" SELECT ID, LASTNAME, FIRSTNAME,DESIGNATION,DEPARTMENT,YEAROFJOINING from EMPLOYEE \"/>\n  <property name=\"rowMapper\">\n    <bean class=\"batch.EmployeeRowMapper\"/>\n  </property>\n</bean>\n```", "```java\n<bean id=\"itemReader\" class=\" JdbcPagingItemReader.JdbcPagingItemReader\">\n<property name=\"dataSource\" ref=\"dataSource\"/>\n<property name=\"queryProvider\">\n<bean class=\" org.springframework.batch.item.database.support.SqlPagingQueryProviderFactoryBean\">\n<property name=\"selectClause\" value=\" SELECT ID, LASTNAME, FIRSTNAME,DESIGNATION,DEPARTMENT,YEAROFJOINING \"/>\n<property name=\"fromClause\" value=\"from EMPLOYEE\"/>\n<property name=\"whereClause\" value=\"where designation=:designation\"/>\n<property name=\"sortKey\" value=\"id\"/>\n</bean>\n</property>\n<property name=\"parameterValues\">\n<map>\n<entry key=\"designation\" value=\"manager\"/>\n</map>\n</property>\n<property name=\"pageSize\" value=\"100\"/>\n<property name=\"rowMapper\" ref=\"employeeMapper\"/>\n</bean>\n```", "```java\npublic interface ItemProcessor<I, O> {\n\nO process(I item) throws Exception;\n\n}\n```", "```java\npublic class Employee {}\npublic class Associate {\npublic Associate (Employee employee) {}\n}\npublic class EmployeeProcessor implements ItemProcessor<Employee,Associate>{\npublic Associate process(Employee employee) throws Exception {\n  return new Associate(employee);\n}\n}\n```", "```java\n<job id=\"jobId\">\n<step name=\"stepName\">\n<tasklet>\n<chunk reader=\"itemReaderName\" processor=\"itemProcessorName\" writer=\"itemWriterName\" commit-interval=\"2\"/>\n</tasklet>\n</step>\n</job>\n```", "```java\n<job id=\"jobId\">\n<step name=\"stepName\">\n<tasklet>\n<chunk reader=\"itemReaderName\" processor=\"compositeItemProcessorName\" writer=\"itemWriterName\"\ncommit-interval=\"2\"/>\n</tasklet>\n</step>\n</job> \n      <bean id=\"compositeItemProcessorName\"\nclass=\"org.springframework.batch.item.support.CompositeItemProcessor\">\n<property name=\"delegates\">\n<list>\n<bean class=\"batch.EmployeeProcessor\"/>\n<bean class=\"batch.AssociateProcessor\"/>\n</list>\n</property>\n</bean>\n```", "```java\npublic interface ItemWriter<T> {\n\nvoid write(List<? extends T> items) throws Exception;\n\n}\n```", "```java\npublic interface LineAggregator<T> {\n\n  public String aggregate(T item);\n\n}\n```", "```java\npublic class PassThroughLineAggregator<T> implements LineAggregator<T> {\n\n  public String aggregate(T item) {\n\n    return item.toString();\n\n  }\n\n}\n```", "```java\n<bean id=\"itemWriter\" class=\" org.springframework.batch.item.file.FlatFileItemWriter\">\n<property name=\"resource\" value=\"file:target/outputfiles/employee_output.txt\"/>\n<property name=\"lineAggregator\">\n<bean class=\" org.springframework.batch.item.file.transform.PassThroughLineAggregator\"/>\n</property>\n</bean>\n```", "```java\npublic interface FieldExtractor<T> {\n\n  Object[] extract(T item);\n\n}\n```", "```java\nBeanWrapperFieldExtractor<Employee> extractor = new BeanWrapperFieldExtractor<Employee>();\nextractor.setEmployees(new String[] { \"id\", \"lastname\", \"firstname\",\"designation\",\"department\",\"yearofjoining\"});\nint id = 11;\nString lastname = \"Alden\";\nString firstname = \"Richie\";\nString desination = \"associate\";\nString department = \"sales\";\nint yearofjoining = 1996;\nEmployee employee = new Employee(id, lastname, firstname,designation, department, yearofjoining);\nObject[] values = extractor.extract(n);\nassertEquals(id, values[0]);\nassertEquals(lastname, values[1]);\nassertEquals(firstname, values[2]);\nassertEquals(designation, values[3]);\nassertEquals(department, values[4]);\nassertEquals(yearofjoining, values[5]);\n```", "```java\n<bean id=\"itemWriter\" class=\"org.springframework.batch.item.file.FlatFileItemWriter\">\n<property name=\"resource\" ref=\"outputResource\"/>\n<property name=\"lineAggregator\">\n<bean class=\" org.springframework.batch.item.file.transform.DelimitedLineAggregator\">\n<property name=\"delimiter\" value=\",\"/>\n<property name=\"fieldExtractor\">\n<bean class=\" org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor\">\n<property name=\"employees\" value=\"id,lastname,firstname,designation,department,yearofjoining\"/>\n</bean>\n</property>\n</bean>\n</property>\n</bean>\n```", "```java\n<bean id=\"itemWriter\" class=\"org.springframework.batch.item.file.FlatFileItemWriter\">\n<property name=\"resource\" ref=\"outputResource\"/>\n<property name=\"lineAggregator\">\n<bean class=\" org.springframework.batch.item.file.transform.FormatterLineAggregator\">\n<property name=\"fieldExtractor\">\n<bean class=\" org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor\">\n<property name=\"employees\" value=\" id,lastname,firstname,designation,department,yearofjoining\"/>\n</bean>\n</property>\n<property name=\"format\" value=\"%-2d%-10s%-10s%-10s%-15s%-4d\"/>\n</bean>\n</property>\n</bean>\n```", "```java\n<bean id=\"itemWriter\" class=\"org.springframework.batch.item.xml.StaxEventItemWriter\">\n  <property name=\"resource\" ref=\"outputResource\"/>\n  <property name=\"marshaller\" ref=\"employeeMarshaller\"/>\n  <property name=\"rootTagName\" value=\"employees\"/>\n  <property name=\"overwriteOutput\" value=\"true\"/>\n</bean>\n```", "```java\n<bean id=\"employeeMarshaller\"\nclass=\"org.springframework.oxm.xstream.XStreamMarshaller\">\n<property name=\"aliases\">\n<util:map id=\"aliases\">\n<entry key=\"employee\"\nvalue=\"batch.Employee\"/>\n<entry key=\"ID\" value=\"java.lang.Integer\"/>\n</util:map>\n</property>\n</bean>\n```", "```java\nStaxEventItemWriter staxItemWriter = newStaxEventItemWriter();\nFileSystemResource resource = new FileSystemResource(\"export/employee_output.xml\")\nMap aliases = newHashMap();\naliases.put(\"employee\",\"batch.Employee\");\naliases.put(\"ID\",\"java.lang.Integer\");\nMarshaller marshaller = newXStreamMarshaller();\nmarshaller.setAliases(aliases);\nstaxItemWriter.setResource(resource);\nstaxItemWriter.setMarshaller(marshaller);\nstaxItemWriter.setRootTagName(\"employees\");\nstaxItemWriter.setOverwriteOutput(true);\nExecutionContext executionContext = newExecutionContext();\nstaxItemWriter.open(executionContext);\nEmployee employee = new Employee();\nemployee.setID(11);\nemployee.setLastName(\"Alden\");\nemployee.setFirstName(\"Richie\");\nemployee.setDesignation(\"associate\");\nemployee.setDepartment(\"sales\");\nemployee.setYearOfJoining(\"1996\");\nstaxItemWriter.write(employee);\n```", "```java\n<bean id=\"employeeWriter\" class=\"org.springframework.batch.item.database.JdbcBatchItemWriter\">\n<property name=\"assertUpdates\" value=\"true\" />\n<property name=\"itemPreparedStatementSetter\">\n<bean class=\"batch.EmployeePreparedStatementSetter\" />\n</property>\n<property name=\"sql\"\nvalue=\"INSERT INTO EMPLOYEE (ID, LASTNAME, FIRSTNAME, DESIGNATION, DEPARTMENT, YEAROFJOINING) VALUES(?, ?, ?, ?, ?, ?)\" />\n<property name=\"dataSource\" ref=\"dataSource\" />\n</bean> \n```", "```java\npublic class EmployeePreparedStatementSetter \nimplements ItemPreparedStatementSetter<Employee> {\n\n@Override\npublic void setValues(Employee item, PreparedStatement ps) throws SQLException {\n  ps.setInt(1, item.getId()); \n  ps.setString(2, item.getLastName()); \n  ps.setString(3, item.getFirstName()); \n  ps.setString(4, item.getDesignation()); \n  ps.setString(5, item.getDepartment()); \n  ps.setInt(6, item.getYearOfJoining()); \n}\n}\n```", "```java\n@Entity(\"employee\")\npublic class Employee {\n@Id(\"id\")\nprivate int id;\n@Column(\"lastName\")\nprivate String lastName;\n@Column(\"firstName\")\nprivate String firstName;\n@Column(\"designation\")\nprivate String designation;\n@Column(\"department\")\nprivate String department;\n@Column(\"yearOfJoining\")\nprivate int yearOfJoining;\n\npublic int getID() {\n  return id;\n}\npublic void setID(int id) {\n  this.id = id;\n}\npublic String getLastName() {\n  return lastName;\n}\npublic void setLastName(String lastName) {\n  this.lastName = lastName;\n}\npublic String getFirstName() {\n  return firstName;\n}\npublic void setFirstName(String firstName) {\n  this.firstName = firstName;\n}\npublic String getDesignation() {\n  return designation;\n}\npublic void setDesignation(String designation) {\n  this.designation = designation;\n}\npublic String getDepartment() {\n  return department;\n}\npublic void setDepartment(String department) {\n  this.department = department;\n}\npublic int getYearOfJoining() {\n  return yearOfJoining;\n}\npublic void setYearOfJoining(int yearOfJoining) {\n  this.yearOfJoining = yearOfJoining;\n}\n}\n```", "```java\n<bean id=\"employeeWriter\"\nclass=\"org.springframework.batch.item.database.HibernateItemWriter\">\n<property name=\"hibernateTemplate\" ref=\"hibernateTemplate\" />\n</bean>\n```"]