- en: Creating a Simple JEE Web Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The previous chapter gave you a brief introduction to JEE and Eclipse. We also
    learned how to install the Eclipse JEE package and also how to install and configure
    Tomcat. Tomcat is a servlet container and it is easy to use and configure. Therefore,
    many developers use it to run JEE web applications on local machines.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Tomcat in Eclipse and deploying web applications from within Eclipse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using different technologies to create web applications in JEE, for example,
    JSP, JSTL, JSF, and servlets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Maven dependency management tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Tomcat in Eclipse
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will perform the following steps to configure Tomcat in Eclipse:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Java EE perspective of Eclipse, you will find the Servers tab at the
    bottom. Since no server is added yet, you will see a link in the tab as shown
    in the following screenshot—No servers are available. Click this link to create
    a new server....
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00021.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.1: The Servers tab in Eclipse JEE'
  prefs: []
  type: TYPE_NORMAL
- en: Click the link in the Servers tab to add a new server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Expand the `Apache` group and select the Tomcat version that you have already
    installed. If Eclipse and the Tomcat server are on the same machine, then leave
    Server''s host name as `localhost`. Otherwise, enter hostname or IP address of
    the Tomcat server. Click Next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00022.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.2: Selecting a server in the New Server wizard'
  prefs: []
  type: TYPE_NORMAL
- en: Click the Browse... button and select the folder where Tomcat is installed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click Next until you complete the wizard. At the end of it, you will see the
    Tomcat server added to the Servers view. If Tomcat is not already started, you
    will see the status as stopped.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00023.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.3: Configuring Tomcat folder in the New Server wizard
  prefs: []
  type: TYPE_NORMAL
- en: To start the server, right-click on the server and select Start. You can also
    start the server by clicking the Start button in the toolbar of the Server view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00024.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.4: The Tomcat server added to the Servers view'
  prefs: []
  type: TYPE_NORMAL
- en: Once the server is started successfully, you will see the status changed to
    `Started`. If you click on the Console tab, you will see console messages that
    the Tomcat server outputs during startup.
  prefs: []
  type: TYPE_NORMAL
- en: If you expand the Servers group in the Project Explorer view, you will see the
    Tomcat server that you just added. Expand the Tomcat server node to view configuration
    files. This is an easy way to edit the Tomcat configuration so that you don't
    have to go look for the configuration files in the filesystem.
  prefs: []
  type: TYPE_NORMAL
- en: Double-click `server.xml` to open it in the XML editor. You get the Design view
    as well as the Source view (two tabs at the bottom of the editor). We have learned
    how to change the default port of Tomcat in the last chapter. You can easily change
    that in the Eclipse editor by opening `server.xml` and going to the Connector
    node. If you need to search the text, you can switch to the Source tab (at the
    bottom of the editor).
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00025.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.5: Open server.xml'
  prefs: []
  type: TYPE_NORMAL
- en: You can also easily edit `tomcat-users.xml` to add/edit Tomcat users. Recall
    that we added a Tomcat user in [Chapter 1](part0008.html#7K4G0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55),
    *Introducing JEE and Eclipse*, to administer the Tomcat server.
  prefs: []
  type: TYPE_NORMAL
- en: By default, Eclipse does not change anything in the Tomcat installation folder
    when you add the server in Eclipse. Instead, it creates a folder in the workspace
    and copies Tomcat configuration files to this folder. Applications that are deployed
    in Tomcat are also copied and published from this folder. This works well in development,
    when you do not want to modify Tomcat settings or any application deployed in
    the server. However, if you want to use the actual Tomcat installation folder,
    then you need to modify server settings in Eclipse. Double-click the server in
    the Servers view to open it in the editor.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00026.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.6: Tomcat settings'
  prefs: []
  type: TYPE_NORMAL
- en: Note the options under Server Locations. Select the second option, Use Tomcat
    installation, if you want to use the actual Tomcat installation folders for configuration
    and for publishing applications from within Eclipse.
  prefs: []
  type: TYPE_NORMAL
- en: JavaServer Pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will start with a project to create a simple JSP. We will create a login
    JSP that submits data to itself and validates the user.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a dynamic web project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will perform the following steps to create a dynamic web project:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the File | New | Other menu. This opens the selection wizard. At the
    top of the wizard, you will find a textbox with a cross icon on the extreme right
    side.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `web` in the textbox. This is the filter box. Many wizards and views in
    Eclipse have such a filter textbox, which makes finding items very easy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00027.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.7: New selection wizard'
  prefs: []
  type: TYPE_NORMAL
- en: Select Dynamic Web Project and click Next to open the Dynamic Web Project wizard.
    Enter project name, for example, `LoginSampleWebApp`. Note that the Dynamic web
    module version field in this page lists Servlet API version numbers. Select version
    3.0 or greater. Click Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00028.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.8: New Dynamic Web Project wizard'
  prefs: []
  type: TYPE_NORMAL
- en: Click Next in the following pages and click Finish on the last page to create
    a `LoginSimpleWebApp` project. This project is also added to Project Explorer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00029.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.9: New web project'
  prefs: []
  type: TYPE_NORMAL
- en: Java source files go in the `src` folder under `Java Resources`. Web resources
    such as the HTML, JS, and CSS files go in the `WebContent` folder.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will create a JSP page for login.
  prefs: []
  type: TYPE_NORMAL
- en: To keep the page simple in the first JSP, we will not follow many of the best
    practices. We will have the UI code mixed with the application business code.
    Such design is not recommended in real applications, but could be useful for quick
    prototyping. We will see how to write better JSP code with clear separation of
    the UI and business logic later in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Creating JSP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will perform the following steps to create the JSP:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `WebContent` folder and select New | JSP File. Name it `index.jsp`.
    The file will open in the editor with the split view. The top part shows the design
    view, and the bottom part shows the code. If the file is not opened in the split
    editor, right-click on `index.jsp` in the Project Explorer and select Open With
    | Web Page Editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00030.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.10: The JSP editor'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you do not like the split view and want to see either the full design view
    or the full code view, then use appropriate toolbar buttons at the top right,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00031.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.11: The JSP editor display buttons'
  prefs: []
  type: TYPE_NORMAL
- en: Change the title from `Insert title here` to `Login`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's now see how Eclipse provides code assistance for HTML tags. Note that
    input fields must be in a `form` tag. We will add a `form` tag later. Inside the
    `body` tag, type the `User Name:` label. Then, type `<`. If you wait for a moment,
    Eclipse pops up the code assist window showing options for all the valid HTML
    tags. You can also invoke code assist manually.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place a caret just after `<` and press *Ctrl* + *Spacebar*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00032.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.12: HTML code assist in JSP'
  prefs: []
  type: TYPE_NORMAL
- en: Code assist works on partial text too; for example, if you invoke code assist
    after text `<i`, you will see a list of HTML tags starting with `i` (`i`, `iframe`,
    `img`, `input`, and so on). You can also use code assist for tag attributes and
    attribute values.
  prefs: []
  type: TYPE_NORMAL
- en: For now, we want to insert the `input` field for username.
  prefs: []
  type: TYPE_NORMAL
- en: Select `input` from the code assist proposals, or type it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the `input` element is inserted, move the caret inside the closing `>`
    and invoke code assist again (*Ctrl*/*Cmd* + *Spacebar*). You will see the list
    of proposals for the attributes of the `input` tag.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00033.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.13: Code assist for the tag attribute value'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type the following code to create a login form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Downloading the example code
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books that you have purchased. If you purchased this
    book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files emailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using the split editor (design and source pages), you can see the
    login form rendered in the design view. If you want to see how the page would
    look in the web browser, click the Preview tab at the bottom of the editor. You
    will see that the web page is displayed in the browser view inside the editor.
    Therefore, you don't need to move out of Eclipse to test your web pages.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00034.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.14: Design and Source views'
  prefs: []
  type: TYPE_NORMAL
- en: If you click on any user interface control in the design view, you will see
    its properties in the Properties view (see *Figure 2.14*). You can edit properties,
    such as Name and Value of the selected element. Click on the Style tab of the
    Properties window to edit CSS styles of the element.
  prefs: []
  type: TYPE_NORMAL
- en: We have not specified the `action` attribute in the previous form. This attribute
    specifies a URL to which the form data is to be posted when the user clicks the Submit
    button. If this attribute is not specified, then the request or the form data
    would be submitted to the same page; in this case, the form data would be submitted
    to `index.jsp`. We will now write the code to handle form data.
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned in [Chapter 1](part0008.html#7K4G0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55),
    *Introducing JEE and Eclipse*, you can write Java code and the client-side code
    (HTML, CSS, and JavaScript) in the same JSP. It is not considered good practice
    to mix Java code with HTML code, but we will do that anyway in this example to
    keep the code simpler. Later in the book, we will see how to make our code modular.
  prefs: []
  type: TYPE_NORMAL
- en: 'Java code is written in JSP between `<%` and `%>`; such Java code blocks in
    JSP are called **scriptlets**. You can also set page-level attributes in JSP.
    They are called **page directives** and are included between `<%@` and `%>`. The
    JSP that we created already has a page directive to set the content type of the
    page. The content type tells the browser the type of response (in this case, `html/text`)
    returned by the server. The browser displays an appropriate response based on
    the content type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In JSP you have access to a number of objects to help you process and generate
    the response, as described in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Object name** | **Type** |'
  prefs: []
  type: TYPE_TB
- en: '| `request` | `HttpServletRequest` ([http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServletRequest.html](http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServletRequest.html)).
    Use this to get request parameters and other request-related data. |'
  prefs: []
  type: TYPE_TB
- en: '| `response` | `HttpServletResponse` ([http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServletResponse.html](http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServletResponse.html)).
    Use this to send a response. |'
  prefs: []
  type: TYPE_TB
- en: '| `out` | `JSPWriter` ([http://docs.oracle.com/javaee/7/api/javax/servlet/jsp/JspWriter.html](http://docs.oracle.com/javaee/7/api/javax/servlet/jsp/JspWriter.html)).
    Use this to generate a text response. |'
  prefs: []
  type: TYPE_TB
- en: '| `session` | `HttpSession` ([http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpSession.html](http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpSession.html)).
    Use this to get or put objects in the session. |'
  prefs: []
  type: TYPE_TB
- en: '| `application` | `ServletContext` ([http://docs.oracle.com/javaee/7/api/javax/servlet/ServletContext.html](http://docs.oracle.com/javaee/7/api/javax/servlet/ServletContext.html)).
    Use this to get or put objects in the context, which are shared across all JSPs
    and servlets in the same application. |'
  prefs: []
  type: TYPE_TB
- en: 'In this example, we are going to make use of `request` and `out` objects. We
    will first check whether the form is submitted using the `POST` method. If true,
    we will get values of username and password fields. If the credentials are valid
    (in this example, we are going to hardcode username and the password as `admin`),
    we will print a welcome message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We have used two built-in objects in the preceding code—`request` and `out`.
    We first check whether the form was submitted—`"POST".equalsIgnoreCase(request.getMethod()`.
    Then, we check whether the submit button was used to post the form—`request.getParameter("submit")
    != null`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then get the username and the password by calling the `request.getParameter`
    method. To keep the code simple, we compare them with the hardcoded values. In
    the real application, you would most probably validate credentials against a database
    or some naming and folder service. If the credentials are valid, we print a message
    by using the `out` (`JSPWriter`) object. If the credentials are not valid, we
    set an error message. We will print the error message, if any, just before the
    login form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here, we start another Java code block by using `<%%>`. If an error message
    is not null, we display it by using the `span` tag. Notice how the value of the
    error message is printed—`<%=errMsg %>`. This is a short syntax for `<%out.print(errMsg);%>`.
    Also notice that the curly brace that started in the first Java code block is
    completed in the next and separate Java code block. Between these two code blocks
    you can add any HTML code and it will be included in the response only if the
    conditional expression in the `if` statement is evaluated to true.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the complete code of the JSP we created in this section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Running JSP in Tomcat
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To run the JSP we created in the previous section in the web browser, you will
    need to deploy the application in a servlet container. We have already seen how
    to configure Tomcat in Eclipse. Make sure that Tomcat is running by checking its
    status in the Servers view of Eclipse:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00035.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.15: Tomcat started in the Servers view'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways to add a project to a configured server so that the application
    can be run on the server:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the server in the Servers view and select the Add and Remove
    option. Select your project from the list on the left (Available resources) and
    click Add to move it to the Configured list. Click Finish.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00036.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.16: Add a project to the server'
  prefs: []
  type: TYPE_NORMAL
- en: The other method to add a project to the server is to right-click on the project
    in Project Explorer and select Properties. This opens the Project Properties dialog
    box. Click on Server in the list and select the server in which you want to deploy
    this project. Click OK or Apply.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00037.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.17: Select server in project properties'
  prefs: []
  type: TYPE_NORMAL
- en: In the first method, the project is immediately deployed in the server. In the
    second method, it will be deployed only when you run the project in the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run the application, right-click on the project in Project Explorer and
    select Run As | Run on Server. The first time you will be prompted to restart
    the server. Once the application is deployed, you will see it under the selected
    server in the Servers view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00038.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.18: Project deployed on the server'
  prefs: []
  type: TYPE_NORMAL
- en: Enter some text other than admin in the username and password boxes
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: and click Submit. You should see the error message and the same form should
    be displayed again.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/00039.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.19: Project running in the built-in browser in Eclipse'
  prefs: []
  type: TYPE_NORMAL
- en: Now enter `admin` as username and password and then submit the form. You should
    see the welcome message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: JSPs are compiled dynamically to Java classes, so if you make any changes in
    the page, in most cases, you do not have to restart the server; just refresh the
    page, and Tomcat will recompile the page if it has changed and the modified page
    will be displayed. In cases when you need to restart the server to apply your
    changes, Eclipse will prompt you if you want to restart the server.
  prefs: []
  type: TYPE_NORMAL
- en: Using JavaBeans in JSP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The JSP that we created previously does not follow JSP best practices. In general,
    it is a bad idea to have scriptlets (Java code) in JSP. In most large organizations,
    UI designer and programmer are different roles performed by different people.
    Therefore, it is recommended that JSP contains mostly markup tags so that it is
    easy for designers to work on the page design. Java code should be in separate
    classes. It also makes sense from a reusability point of view to move Java code
    out of JSP.
  prefs: []
  type: TYPE_NORMAL
- en: You can delegate the processing of the business logic to JavaBeans from JSP.
    JavaBeans are simple Java objects with attributes and getters and setters methods.
    The naming convention for getter/setter methods in JavaBeans is the prefix `get`/`set`
    followed by the name of the attribute, with the first letter of each word in uppercase,
    also known as CamelCase. For example, if you have a class attribute named `firstName`,
    then the getter method will be `getFirstName` and the setter will be `setFirstName`.
  prefs: []
  type: TYPE_NORMAL
- en: 'JSP has a special tag for using JavaBeans—`jsp:useBean`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Scope indicates the lifetime of the bean. Valid values are `application`, `page`,
    `request`, and `session`.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Scope name** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `page` | Bean can be used only in the current page. |'
  prefs: []
  type: TYPE_TB
- en: '| `request` | Bean can be used in any page in the processing of the same request.
    One web request can be handled by multiple JSPs if one page forwards the request
    to another page. |'
  prefs: []
  type: TYPE_TB
- en: '| `session` | Bean can be used in the same HTTP session. The session is useful
    if your application wants to save the user data per interaction with the application,
    for example, to save items in the shopping cart in an online store application.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `application` | Bean can be used in any page in the same web application.
    Typically, web applications are deployed in a web application container as **web
    application archive** (**WAR**) files. In the application scope, all JSPs in the
    WAR file can use JavaBeans. |'
  prefs: []
  type: TYPE_TB
- en: 'We will move the code to validate users in our login example to the `JavaBean`
    class. First, we need to create a `JavaBean` class:'
  prefs: []
  type: TYPE_NORMAL
- en: In Project Explorer, right-click on the `src` folder New | Package menu option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a package named `packt.book.jee_eclipse.ch2.bean`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the package and select the New | Class menu option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a class named `LoginBean`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create two private `String` members as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Right-click anywhere inside the class (in the editor) and select the Source
    | Generate Getters and Setters menu option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00040.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.20: Generate getters and setters'
  prefs: []
  type: TYPE_NORMAL
- en: We want to generate getters and setters for all members of the class. Therefore,
    click the Select All button and select Last member from the drop-down list for
    Insertion point, because we want to insert the getters and setters after declaring
    all member variables.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `LoginBean` class should now be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We will add one more method to it, to validate username and password:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This completes our JavaBean for storing user information and validation.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now use this bean in our JSP and delegate the task of validating users
    to this bean. Open `index.jsp`. Replace the Java scriptlet just above the `<body>`
    tag in the preceding code with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Before we discuss what has changed in the preceding code, note that you can
    invoke and get code assist for the attributes and values of `<jsp:*>` tags too.
    If you are not sure whether code assist is available, just press *Ctrl*/*Cmd*
    + *C*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00041.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.21: Code assist in JSP tags'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that Eclipse displays code assist for the JavaBean that we just added.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now understand what we changed in the JSP:'
  prefs: []
  type: TYPE_NORMAL
- en: We created multiple scriptlets, one for declaration of the `errMsg` variable
    and two more for separate `if` blocks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We added a `<jsp:useBean` tag in the first `if` condition. The bean is created
    when a condition in the `if` statement is true, that is, when the form is posted
    by clicking the Submit button.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We used the `<jsp:setProperty>` tag to set attributes of the bean:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: We are setting values of member variables of `loginBean`. Furthermore, we are
    setting values of all the member variables by specifying `property="*"`. However,
    where do we specify values? The values are specified implicitly because we have
    named members of `LoginBean` to be the same as the fields in the form. So, the
    JSP runtime gets parameters from the `request` object and assigns values to the
    JavaBean members with the same name.
  prefs: []
  type: TYPE_NORMAL
- en: 'If names of the members of JavaBean do not match the request parameters, then
    you need to set the values explicitly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We then checked whether the user is valid by calling `loginBean.isValidUser()`.
    The code to handle error messages hasn't changed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To test the page, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on `index.jsp` in Project Explorer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Run As | Run on Server menu option. Eclipse will prompt you to restart
    the Tomcat server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the OK button to restart the server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The page will be displayed in the internal Eclipse browser. It should behave
    in the same way as in the previous example.
  prefs: []
  type: TYPE_NORMAL
- en: Although we have moved validation of users to `LoginBean`, we still have a lot
    of code in Java scriptlets. Ideally, we should have as few Java scriptlets as
    possible in JSP. We still have scriptlets for checking conditions and for variable
    assignments. We can write the same code by using tags so that it is consistent
    with the remaining tag-based code in JSP and will be easier for web designers
    to work with it. This can be achieved using **JSP Standard Tag Library** (**JSTL**).
  prefs: []
  type: TYPE_NORMAL
- en: Using JSTL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'JSTL tags can be used to replace much of the Java scriptlets in JSP. JSTL tags
    are classified in five broad groups:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Core**: Covers flow control and variable support among other things'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**XML**: Tags to process XML documents'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**i18n**: Tags to support internationalization'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SQL**: Tags to access database'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Functions**: Tags to perform some of the common string operations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See [http://docs.oracle.com/javaee/5/tutorial/doc/bnake.html](http://docs.oracle.com/javaee/5/tutorial/doc/bnake.html)
    for more details on JSTL.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will modify the login JSP to use JSTL, so that there are no Java scriptlets
    in it:'
  prefs: []
  type: TYPE_NORMAL
- en: Download JSTL libraries for APIs and their implementation. At the time of writing,
    the latest `.jar` files are `javax.servlet.jsp.jstl-api-1.2.1.jar` ([http://search.maven.org/remotecontent?filepath=javax/servlet/jsp/jstl/javax.servlet.jsp.jstl-api/1.2.1/javax.servlet.jsp.jstl-api-1.2.1.jar](http://search.maven.org/remotecontent?filepath=javax/servlet/jsp/jstl/javax.servlet.jsp.jstl-api/1.2.1/javax.servlet.jsp.jstl-api-1.2.1.jar))
    and `javax.servlet.jsp.jstl-1.2.1.jar` ([http://search.maven.org/remotecontent?filepath=org/glassfish/web/javax.servlet.jsp.jstl/1.2.1/javax.servlet.jsp.jstl-1.2.1.jar](http://search.maven.org/remotecontent?filepath=org/glassfish/web/javax.servlet.jsp.jstl/1.2.1/javax.servlet.jsp.jstl-1.2.1.jar)).
    Make sure that these files are copied to `WEB-INF/lib`. All `.jar` files in this
    folder are added to the `classpath` of the web application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We need to add a declaration for JSTL in our JSP. Add the following `taglib`
    declaration below the first page declaration (`<%@ page language="java" ...>`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The `taglib` declaration contains the URL of the `tag` library and `prefix`.
    All tags in the `tag` library are accessed using `prefix` in JSP.
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace `<%String errMsg = null; %>` with the `set` tag of JSTL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: We have enclosed the value in `${}`. This is called **Expression Language** (**EL**).
    You enclose the Java expression in JSTL in `${}`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'With the `if` tag of JSTL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The `request` object is accessed in the JSTL tag via `pageContext`.
  prefs: []
  type: TYPE_NORMAL
- en: 'JavaBean tags go within the `if` tag. There is no change in this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We then add tags to call `loginBean.isValidUser()` and based on its return
    value, to set messages. However, we can''t use the `if` tag of JSTL here, because
    we need to write the `else` statement too. JSTL does not have a tag for `else`.
    Instead, for multiple `if...else` statements, you need to use the `choose` statement,
    which is somewhat similar to the `switch` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: If the user credentials are not valid, we set the error message. Or (in the `c:otherwise` tag),
    we print the welcome message and set the `displayForm` flag to `false`. We don't
    want to display the login form if the user is successfully logged in.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now replace another `if` scriptlet code by `<%if%>` tag. Replace the
    following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'With the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Note that we have used the `out` tag to print an error message.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we enclose the entire `<body>` content in another JSTL `if` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the complete source code of the JSP:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, there are no Java scriptlets in the preceding code. All of them,
    from the previous code, are replaced by tags. This makes it easy for web designers
    to edit the page without worrying about Java scriptlets.
  prefs: []
  type: TYPE_NORMAL
- en: One last note before we leave the topic of JSP. In real-world applications,
    you would probably forward the request to another page after the user successfully
    logs in, instead of just displaying a welcome message on the same page. You could
    use the `<jsp:forward>` tag to achieve this.
  prefs: []
  type: TYPE_NORMAL
- en: Java Servlet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will now see how to implement a login application using Java Servlet. Create
    a new **Dynamic Web Application** in Eclipse as described in the previous section.
    We will call this `LoginServletApp`:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `src` folder under `Java Resources` for the project in Project
    Explorer. Select the New | Servlet menu option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Create Servlet wizard, enter package name as `packt.book.jee_eclipse.book.servlet`
    and class name as `LoginServlet`. Then, click Finish.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00042.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.22: Create Servlet wizard'
  prefs: []
  type: TYPE_NORMAL
- en: 'The servlet wizard creates the class for you. Notice the `@WebServlet("/LoginServlet")`
    annotation just above the class declaration. Before JEE 5, you had to declare
    servlets in `web.xml` in the `WEB-INF` folder. You can still do that, but you
    can skip this declaration if you use proper annotations. Using `WebServlet`, we
    are telling the servlet container that `LoginServlet` is a servlet, and we are
    mapping it to the `/LoginServlet` URL path. Thus, we are avoiding the following
    two entries in `web.xml` by using this annotation: `<servlet>` and `<servlet-mapping>`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will now change the mapping from `/LoginServlet` to just `/login`. Therefore,
    we will modify the annotation as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The wizard also created the `doGet` and `doPost` methods. These methods are
    overridden from the following base class: `HttpServlet`. The `doGet` method is
    called to create response for the `Get` request and `doPost` is called to create
    a response for the `Post` request.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will create a login form in the `doGet` method and process the form data
    (`Post`) in the `doPost` method. However, because `doPost` may need to display
    the form, in case user credentials are invalid, we will write a `createForm` method,
    which could be called from both `doGet` and `doPost`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a `createForm` method as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'We will now modify a `doGet` method to call a `createForm` method and return
    the response:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: We call the `getWrite` method on the `response` object and write the form content
    to it by calling the `createForm` function. Note that when we display the form,
    initially, there is no error message, so we pass a `null` argument to `createForm`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will modify `doPost` to process the form content when the user posts the
    form by clicking the Submit button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: We first get username and password from the `request` object by calling the `request.getParameter`
    method. If the credentials are valid, we add a welcome message to the `response`
    string; or else, we call `createForm` with an error message and add a return value
    (markup for the form) to the `response` string.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we get the `Writer` object from the `response` string and write the
    response.
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `LoginServlet.java` file in Project Explorer and select the Run
    As | Run on Server option. We have not added this project to the Tomcat server.
    Therefore, Eclipse will ask if you want to use the configured server to run this
    servlet. Click the Finish button of the wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tomcat needs to restart because a new web application is deployed in the server.
    Eclipse will prompt you to restart the server. Click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When the servlet is run in the internal browser of Eclipse, notice the URL;
    it ends with `/login`, which is the mapping that we specified in the servlet annotation.
    However, you will observe that instead of rendering the HTML form, the page displays
    the markup text. This is because we missed an important setting on the `response`
    object. We did not tell the browser the type of content we are returning, so the
    browser assumed it to be text and rendered it as plain text. We need to tell the
    browser that it is HTML content. We do this by calling `response.setContentType("text/html")`
    in both the `doGet` and the `doPost` methods. Here is the complete source code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, it is not very convenient to write HTML markup in servlet. Therefore,
    if you are creating a page with a lot of HTML markup, then it is better to use
    JSP or plain HTML. Servlets are good to process requests that do not need to generate
    too much markup, for example, controllers in **Model-View-Controller** (**MVC**)
    frameworks, for processing requests that generate a non-text response, or for
    creating a web service or WebSocket endpoints.
  prefs: []
  type: TYPE_NORMAL
- en: Creating WAR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thus far, we have been running our web application from Eclipse, which does
    all the work of deploying the application to the Tomcat server. This works fine
    during development, but when you want to deploy it to test or production servers,
    you need to create a **web application archive** (**WAR**). We will see how to
    create a WAR from Eclipse. However, first we will un-deploy the existing applications
    from Tomcat.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the Servers view, select the application, and right-click and select
    the Remove option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00043.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.23 Un-deploy a web application from the server
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, right-click on the project in Project Explorer and select Export | WAR
    file. Select the destination for the WAR file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00044.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.24 Export WAR
  prefs: []
  type: TYPE_NORMAL
- en: To deploy the WAR file to Tomcat, copy it to the `<tomcat_home>/webapps` folder.
    Then start the server if it is not already running. If Tomcat is already running,
    you don't need to restart it.
  prefs: []
  type: TYPE_NORMAL
- en: Tomcat monitors the `webapps` folder and any WAR file copied to it is automatically
    deployed. You can verify this by opening the URL of your application in the browser,
    for example, `http://localhost:8080/LoginServletApp/login`.
  prefs: []
  type: TYPE_NORMAL
- en: JavaServer Faces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When working with JSP, we saw that it is not a good idea to mix scriptlets
    with the HTML markup. We solved this problem by using JavaBean. JavaServer Faces
    takes this design further. In addition to supporting JavaBeans, JSF provides built-in
    tags for HTML user controls, which are context aware, can perform validation,
    and can preserve the state between requests. We will now create the login application
    using JSF:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a dynamic web application in Eclipse; let's name it `LoginJSFApp`. In
    the last page of the wizard, make sure that you check the Generate web.xml deployment
    descriptor box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download JSF libraries from [https://maven.java.net/content/repositories/releases/org/glassfish/javax.faces/2.2.9/javax.faces-2.2.9.jar](https://maven.java.net/content/repositories/releases/org/glassfish/javax.faces/2.2.9/javax.faces-2.2.9.jar)
    and copy them to the `WEB-INF/lib` folder in your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: JSF follows the MVC pattern. In the MVC pattern, the code to generate user interface
    (view) is separate from the container of the data (model). The controller acts
    as the interface between the view and the model. It selects the model for processing
    a request on the basis of the configuration, and once the model processes the
    request, it selects the view to be generated and returned to the client, on the
    basis of the result of the processing in the model. The advantage of MVC is that
    there is a clear separation of the UI and the business logic (which requires a
    different set of expertise) so that they can be developed independently, to a
    large extent. In JSP the implementation of MVC is optional, but JSF enforces the
    MVC design.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Views are JSF created as `xhtml` files. The controller is a servlet from the
    JSF library and models are **managed beans** (JavaBeans).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Note that you can get code assist when creating the preceding elements by pressing
    *Ctrl*/*Cmd* + *C*.
  prefs: []
  type: TYPE_NORMAL
- en: You can specify any name as `servlet-name`; just make sure that you use the
    same name in `servlet-mapping`. The class for the servlet is `javax.faces.webapp.FacesServlet`,
    which is in the JAR file that we downloaded as the JSF library and copied to `WEB-INF/lib`.
    Furthermore, we have mapped any request ending with `.xhtml` to this servlet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will create a managed bean for our login page. This is the same as
    JavaBean that we had created earlier, but with the addition of JSF-specific annotations:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `src` folder under `Java Resources` for the project in Project
    Explorer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the New | Class menu option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create JavaBean, `LoginBean`, as described in the *Using JavaBeans in JSP* section
    of this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create two members for `userName` and `password`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the getters and setters for them. Then, add two annotations as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: (You can get code assist for annotations too. Type `@` and press *Ctrl*/*Cmd*
    + *C*. Code assist works for the annotation `key-value` attribute pairs too, for
    example, for the `name` attribute of the `ManagedBean` annotation).
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file called `index.xhtml` inside the `WebContent` folder of the
    project by selecting the File | New | File menu option. When using JSF, you need
    to add a few namespace declarations at the top of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are declaring namespaces for JSF built-in `tag` libraries. We will
    access tags in the core JSF `tag` library with the prefix `f` and HTML tags with
    the prefix `h`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the title and start the `body` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: There are corresponding JSF tags for the `head` and the `body`, but we do not
    use any attributes specific to JSF; therefore, we have used simple HTML tags.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then add the code to display the error message, if it is not null:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Here, we use a tag specific to JSF and expression language to display the value
    of the error message. The `OutputText` tag is similar to the `c:out` tag that
    we saw in JSTL. We have also added a condition to render it only if the error
    message in the managed bean is not `null`. Additionally, we have set the color
    of this output text.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have not added the `errorMsg` member to the managed bean yet. Therefore,
    let''s add the declaration, the getter, and the setter. Open the `LoginBean` class
    and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Note that we access the managed bean in JSF by using value of the `name` attribute
    of the `ManagedBean` annotation. Furthermore, unlike JavaBean in JSP, we do not
    create it by using the `<jsp:useBean>` tag. The JSF runtime creates the bean if
    it is not already there in the required scope, in this case, the `Request` scope.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go back to editing `index.xhtml`. We will now add the following form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Many things are happening here. First, we have used the `inputText` tag of JSF
    to create textboxes for username and password. We have set their values with the
    corresponding members of `loginBean`. We have used the `commandButton` tag of
    JSF to create a Submit button. When the user clicks the Submit button, we have
    set it to call the `loginBean.validate` method (using the `action` attribute).
  prefs: []
  type: TYPE_NORMAL
- en: 'We haven''t defined a `validate` method in `loginBean`, so let''s add that.
    Open the `LoginBean` class and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Note that the `validate` method returns a string. How is the return value used?
    It is used for navigation purposes in JSF. The JSF runtime looks for the JSF file
    with the same name as the string value returned after evaluating the expression
    in the `action` attribute of `commandButton`. In the `validate` method, we return
    `welcome` if the user credentials are valid. In this case we are telling the JSF
    runtime to navigate to `welcome.xhtml`. If the credentials are invalid, we set
    the error message and return `null`, in which case, the JSF runtime displays the
    same page.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now add the `welcome.xhml` page. It simply contains the welcome message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the complete source code of `index.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the source code of the `LoginBean` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: To run the application, right-click on `index.xhtml` in Project Explorer and
    select the Run As | Run on Server option.
  prefs: []
  type: TYPE_NORMAL
- en: JSF can do much more than what we have seen in this small example—it has the
    support to validate an input and create page templates too. However, these topics
    are beyond the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Visit [http://docs.oracle.com/cd/E11035_01/workshop102/webapplications/jsf/jsf-app-tutorial/Introduction.html](http://docs.oracle.com/cd/E11035_01/workshop102/webapplications/jsf/jsf-app-tutorial/Introduction.html)
    for a tutorial on JSF.
  prefs: []
  type: TYPE_NORMAL
- en: Using Maven for project management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the projects that we have created thus far in this chapter, we have managed
    many project management tasks, such as downloading libraries on which our project
    depends, adding them to the appropriate folder so that the web application can
    find it, and exporting the project to create the WAR file for deployment. These
    are just some of the project management tasks that we have performed so far, but
    there are many more, which we will see in the subsequent chapters. It helps to
    have a tool do many of the project management tasks for us so that we can focus
    on application development. There are some well-known build management tools available
    for Java, for example, Apache Ant ([http://ant.apache.org/](http://ant.apache.org/))
    and Maven ([http://maven.apache.org/](http://maven.apache.org/)).
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will see how to use Maven as a project management tool.
    By following the convention for creating the project structure and allowing projects
    to define the hierarchy, Maven makes project management easier than Ant. Ant is
    primarily a build tool, whereas Maven is a project management tool, which does
    build management too. See [http://maven.apache.org/what-is-maven.html](http://maven.apache.org/what-is-maven.html)
    to understand what Maven can do.
  prefs: []
  type: TYPE_NORMAL
- en: In particular, Maven simplifies dependency management. In the JSF project earlier
    in this chapter, we first downloaded the appropriate `.jar` files for JSF and
    copied them to the `lib` folder. Maven can automate this. You can configure Maven
    settings in `pom.xml`. **POM** stands for **Project Object Model**.
  prefs: []
  type: TYPE_NORMAL
- en: Before we use Maven, it is important to understand how it works. Maven uses
    repositories. Repositories contain plugins for many well-known libraries/projects.
    A plugin includes the project configuration information, `.jar` files required
    to use this project in your own project, and any other supporting artifacts. The
    default Maven repository is a collection of plugins. You can find the list of
    plugins in the default Maven repository at [http://maven.apache.org/plugins/index.html](http://maven.apache.org/plugins/index.html).
    You can also browse the content of the Maven repository at [http://search.maven.org/#browse](http://search.maven.org/#browse).
    Maven also maintains a local repository on your machine. This local repository
    contains only those plugins that your projects have specified dependencies on.
    On Windows, you will find the local repository at `C:/Users /<username>.m2`, and
    on macOS X, it is located at `~/.m2`.
  prefs: []
  type: TYPE_NORMAL
- en: You define plugins on which your project depends in the `dependencies` section
    of `pom.xml` (we will see the structure of `pom.xml` shortly when we create a
    Maven project). For example, we can specify a dependency on JSF. When you run
    the Maven tool, it first inspects all dependencies in `pom.xml`. It then checks
    whether the dependent plugins with the required versions are already downloaded
    in the local repository. If not, it downloads them from the central (remote) repository.
    You can also specify repositories to look in. If you do not specify any repository,
    then dependencies are searched in the central Maven repository.
  prefs: []
  type: TYPE_NORMAL
- en: We will create a Maven project and explore `pom.xml` in more detail. However,
    if you are curious to know what `pom.xml` is, then visit [http://maven.apache.org/pom.html#What_is_the_POM](http://maven.apache.org/pom.html#What_is_the_POM).
  prefs: []
  type: TYPE_NORMAL
- en: Eclipse JEE version has Maven built-in, so you don't need to download it. However,
    if you plan to use Maven from outside Eclipse, then download it from [http://maven.apache.org/download.cgi](http://maven.apache.org/download.cgi).
  prefs: []
  type: TYPE_NORMAL
- en: Maven views and preferences in Eclipse JEE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we create a Maven project, let''s explore the views and preferences
    specific to Maven in Eclipse:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the Window | Show View | Other... menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type `Maven` in the filter box. You will see two views for Maven:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00045.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.25: Maven views'
  prefs: []
  type: TYPE_NORMAL
- en: Select Maven Repositories view and click OK. This view is opened in the bottom
    tab window of Eclipse. You can see the location of the local and remote repositories.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Right-click on a global repository to see the options to index the repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00046.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.26: The Maven Repositories view'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Eclipse Preferences and type `Maven` in the filter box to see all the
    Maven preferences:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00047.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.27: Maven preferences'
  prefs: []
  type: TYPE_NORMAL
- en: You should set the Maven preferences to refresh repository indexes on startup,
    so that the latest libraries are available when you add dependencies to your project
    (we will learn how to add dependencies shortly).
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the Maven node in Preferences and set the following options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00048.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.28: Maven preferences for updating indexes on startup'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Maven project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the following steps, we will see how to create a Maven project in Eclipse:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the New | Maven Project menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00049.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.29: Maven New Project wizard'
  prefs: []
  type: TYPE_NORMAL
- en: 'Accept all default options and click Next. Type `webapp` in the filter box
    and select maven-archetype-webapp:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00050.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.30: New Maven project - select archetype'
  prefs: []
  type: TYPE_NORMAL
- en: Maven archetype
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We selected maven-archetype-webapp in the preceding wizard. An archetype is
    a project template. When you use an archetype for your project, all the dependencies
    and other Maven project configurations defined in the template (archetype) are
    imported into your project.
  prefs: []
  type: TYPE_NORMAL
- en: See more information about Maven archetype at [http://maven.apache.org/guides/introduction/introduction-to-archetypes.html](http://maven.apache.org/guides/introduction/introduction-to-archetypes.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Continuing with the New Maven Project wizard, click on Next. In the Group Id
    field, enter `packt.book.jee_eclipse`. In the Artifact Id field, enter `maven_jsf_web_app`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00051.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.31: New Maven project - archetype parameters'
  prefs: []
  type: TYPE_NORMAL
- en: Click on Finish. A `maven_jsf_web_app` project is added in Project Explorer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exploring the POM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open `pom.xml` in the editor and go to the pom.xml tab. The file should have
    the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s have a look at the different tags in detail, that are used in the preceding
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '`modelVersion`: This in the `pom.xml` file is the version of Maven.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`groupId`: This is the common ID used in the business unit or organization
    under which projects are grouped together. Although it is not necessary to use
    the package structure format for group ID, it is generally used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`artifactId`: This is the project name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`version`: This is version number of the project. Version numbers are important
    when specifying dependencies. You can have multiple versions of a project, and
    you can specify different version dependencies in different projects. Maven also
    appends the version number to JAR, WAR, or EAR files that it creates for the project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`packaging`: This tells Maven what kind of final output we want when the project
    is built. In this book, we will be using JAR, WAR, and EAR packaging types, although
    more types exist.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name`: This is actually the name of the project, but Eclipse shows `artifactid`
    as the project name in Project Explorer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`url`: This is the URL of your project if you are hosting the project information
    on the web. The default is Maven''s URL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dependencies`: This section is where we specify the libraries (or other Maven
    artifacts) that the project depends on. The archetype that we selected for this
    project has added the default dependency of JUnit to our project. We will learn
    more about JUnit in [Chapter 5](part0108.html#36VSO0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55),
    *Unit Testing*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`finalName`: This tag in the `build` tag indicates the name of the output file
    (JAR, WAR, or EAR) that Maven generates for your project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding Maven dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The archetype that we selected for the project does not include some of the
    dependencies required for a JEE web project. Therefore, you might see error markers
    in `index.jsp`. We will fix this by adding dependencies for the JEE libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: With `pom.xml` open in the editor, click on the Dependencies tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the Add button. This opens the Select Dependency dialog.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the filter box, type `javax.servlet` (we want to use servlet APIs in the
    project).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the latest version of the API and click the OK button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00052.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.32: Adding servlet API dependency'
  prefs: []
  type: TYPE_NORMAL
- en: However, we need JAR files for servlet APIs only at the compile time; at runtime,
    these APIs are provided by Tomcat. We can indicate this by specifying the scope
    of the dependency; in this case, setting it to provided, which tells Maven to
    evaluate this dependency for compilation only and not to package it in the WAR
    file. See [http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html](http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html)
    for more information on dependency scopes.
  prefs: []
  type: TYPE_NORMAL
- en: To set scope of the dependency, select dependency from the Dependencies tab
    of the POM editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the Properties button. Then, select the provided scope from the drop-down
    list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00053.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.33: Setting the Maven dependency scope'
  prefs: []
  type: TYPE_NORMAL
- en: Now we need to add dependencies for JSF APIs and their implementation. Click
    the Add button again and type `jsf` in the search box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the list, select **`jsf-api`** with Group Id **`com.sun.faces`** and click
    the OK button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00054.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.34: Adding Maven dependencies for JSF'
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, add a dependency for `jsf-impl` with Group Id `com.sun.faces`. The
    dependencies section in your `pom.xml` should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: If Tomcat throws an exception for not finding `javax.faces.webapp.FacesServlet`
    then you may have to download `jsf-api-2.2.16.jar` ([http://central.maven.org/maven2/com/sun/faces/jsf-impl/2.2.16/jsf-impl-2.2.16.jar](http://central.maven.org/maven2/com/sun/faces/jsf-api/2.2.16/jsf-api-2.2.16.jar))
    and `jsf-impl-2.2.16.jar` ([http://central.maven.org/maven2/com/sun/faces/jsf-impl/2.2.16/jsf-impl-2.2.16.jar](http://central.maven.org/maven2/com/sun/faces/jsf-impl/2.2.16/jsf-impl-2.2.16.jar))
    and copy them to the `<tomcat-install-folder>/lib` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Maven project structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Maven project wizard creates `src` and `target` folders under the main
    project folder. As the name suggests, all source files go under `src`. However,
    Java package structure starts under the `main` folder. By convention, Maven expects
    Java source files under the `java` folder. Therefore, create a `java` folder under
    `src/main`. The Java package structure starts from the `java` folder, that is,
    `src/main/java/<java-packages>`. Web content such as HTML, JS, CSS, and JSP goes
    in the `webapp` folder under `src/main`. Compiled classes and other output files
    generated by the Maven build process are stored in the `target` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00055.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.35: Maven web application project structure'
  prefs: []
  type: TYPE_NORMAL
- en: 'The source code for our login JSF page is the same as in the previous example
    of `LoginJSFApp`. Therefore, copy the `packt` folder from the `src` folder of
    that project to the `src/main/java` folder of this Maven project. This adds `LoginBean.java`
    to the project. Then, copy `web.xml` from the `WEB-INF` folder to the `src/main/webapp/WEB-INF`
    folder of this project. Copy `index.xhtml` and `welcome.xhtml` to the `src/main/webapp` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00056.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.36: Project structure after adding source files'
  prefs: []
  type: TYPE_NORMAL
- en: No change is required in the source code. To run the application, right-click
    on `index.xhtml` and select Run As | Run on Server.
  prefs: []
  type: TYPE_NORMAL
- en: We will be using Maven for project management in the rest of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a WAR file using Maven
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a previous example, we created the WAR file using the Export option of Eclipse.
    In a Maven project you can create a WAR by invoking the Maven Install plugin.
    Right-click on the project and select the Run As | Maven install option. The WAR
    file is created in the `target` folder. You can then deploy the WAR file in Tomcat
    by copying it to the `webapps` folder of Tomcat.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to configure Tomcat in Eclipse. We learned how
    the same web page can be implemented using three different technologies, namely
    JSP, Servlet, and JSF. All of them can be used for developing any dynamic web
    application. However, JSP and JSF are better suited for more UI-intensive pages,
    and servlets are better suited for controllers and as endpoints for web services
    and WebSockets. JSF enforces the MVC design and provides many additional services
    compared to JSP.
  prefs: []
  type: TYPE_NORMAL
- en: We also learned how to use Maven for many project management tasks.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to configure and use source control management
    systems, particularly SVN and Git.
  prefs: []
  type: TYPE_NORMAL
