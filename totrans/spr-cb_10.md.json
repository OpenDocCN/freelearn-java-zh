["```java\n    <dependency>\n        <groupId>org.springframework.social</groupId>\n        <artifactId>spring-social-core</artifactId>\n        <version>1.1.0.RELEASE</version>\n    </dependency>\n\n    <dependency>\n        <groupId>org.springframework.social</groupId>\n        <artifactId>spring-social-web</artifactId>\n        <version>1.1.0.RELEASE</version>\n    </dependency>\n\n    <dependency>\n        <groupId>org.springframework.social</groupId>\n        <artifactId>spring-social-config</artifactId>\n        <version>1.1.0.RELEASE</version>\n    </dependency>\n\n    <dependency>\n      <groupId>org.springframework.social</groupId>\n      <artifactId>spring-social-facebook</artifactId>\n      <version>1.1.1.RELEASE</version>\n    </dependency>\n\n    <dependency>\n      <groupId>org.springframework.social</groupId>\n      <artifactId>spring-social-facebook-web</artifactId>\n      <version>1.1.1.RELEASE</version>\n    </dependency>\n    ```", "```java\n    @Controller\n    public class FacebookController {\n    ...\n    ```", "```java\n    @RequestMapping(\"/fb/login\")\n    public void login(HttpServletResponse response) throws IOException {\n      FacebookConnectionFactory connectionFactory = new FacebookConnectionFactory(\"759801647423672\", \"1b13515e931b0e2b4b9c620f72761e62\");\n\n      OAuth2Parameters params = new OAuth2Parameters();\n      params.setRedirectUri (\"http://localhost:8080/spring_webapp/fb/callback\");\n      params.setScope(\"public_profile\");\n\n      OAuth2Operations oauthOperations = connectionFactory.getOAuthOperations();\n      String authorizeUrl = oauthOperations.buildAuthorizeUrl(params);\n\n      response.sendRedirect(authorizeUrl);\n    }\n    ```", "```java\n    @RequestMapping(\"/fb/callback\")\n    public String callback(@RequestParam(\"code\") String authorizationCode, HttpServletRequest request) {\n      FacebookConnectionFactory connectionFactory = new FacebookConnectionFactory(\"759801647423672\", \"1b13515e931b0e2b4b9c620f72761e62\");\n\n      OAuth2Operations oauthOperations = connectionFactory.getOAuthOperations();\n      AccessGrant accessGrant = oauthOperations.exchangeForAccess(authorizationCode, \"http://localhost:8080/spring_webapp/fb/callback\", null);\n\n      String token = accessGrant.getAccessToken();\n      request.getSession().setAttribute(\"facebookToken\", token);\n\n      return \"redirect:/fb\";\n    }\n    ```", "```java\n    @RequestMapping(\"/fb\")\n    public String fb(HttpServletRequest request) {\n      String accessToken = (String) request.getSession().getAttribute(\"facebookToken\");\n\n      Facebook facebook = new FacebookTemplate(accessToken);          \n      if(facebook.isAuthorized()) {\n        return \"fb\";\n      }\n      else {\n        return \"redirect:/fb/login\";      \n      }  \n    }\n    ```", "```java\n    <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %> \n    <%@ page isELIgnored=\"false\" %>\n\n    <html>\n    <body>\n        <p>Connected to Facebook</p>\n    </body>\n    </html>\n    ```", "```java\nparams.setRedirectUri (\"http://localhost:8080/spring_webapp/fb/callback\");\n```", "```java\n    @RequestMapping(\"/fb\")\n    public String fb(HttpServletRequest request, Model model) {\n    ...\n    ```", "```java\n    FacebookProfile profile = facebook.userOperations().getUserProfile(); \n    ```", "```java\n    model.addAttribute(\"profile\", profile); \n    ```", "```java\n    id: ${profile.id}<br />\n    username: ${profile.username}<br />\n    name: ${profile.name}<br />\n    gender: ${profile.gender}<br />\n    email: ${profile.email}<br />\n    birthday: ${profile.birthday}<br />\n    hometown: ${profile.hometown}<br />\n    ```", "```java\n      params.setScope(\"public_profile, user_friends\");\n    ```", "```java\n    @RequestMapping(\"/fb\")\n    public String fb(HttpServletRequest request, Model model) {\n    ...\n    ```", "```java\n    List<Reference> friendList = facebook.friendOperations().getFriends();\n    ```", "```java\n    List<FacebookProfile> friendProfileList = new LinkedList<FacebookProfile>();\n    for (Reference friend : friendList) {\n      FacebookProfile friendProfile = facebook.userOperations().getUserProfile(friend.getId());  \n      friendProfileList.add(friendProfile);\n    }\n    ```", "```java\n    model.addAttribute(\"friendProfileList\", friendProfileList); \n    ```", "```java\n    <c:forEach items=\"${friendProfileList}\" var=\"profile\">\n      <h2>${profile.name}</h2>\n      <p>\n        id: ${profile.id}<br />\n        name: ${profile.name}<br />\n        gender: ${profile.gender}<br />\n      </p>\n    </c:forEach>\n    ```", "```java\n      params.setScope(\"public_profile, publish_actions\");\n    ```", "```java\n    facebook.feedOperations().updateStatus(\"This was posted from a Spring web application.\");\n    ```", "```java\n      params.setScope(\"public_profile, publish_actions\");\n    ```", "```java\n    FacebookLink link = new FacebookLink(\"http://jeromejaglale.com/\",\n        \"Spring is easy with Spring Cookbook\",\n        \"Spring Cookbook\",\n        \"The recipes are understandable and actually work.\");\n    ```", "```java\n    facebook.feedOperations().postLink(\"This link was posted from a Spring web application.\", link);\n    ```", "```java\n      params.setScope(\"public_profile, publish_actions\");\n    ```", "```java\n    PostData postData = new PostData(facebook.userOperations().getUserProfile().getId());\n    ```", "```java\n    postData.message(\"Vegetables are good for you.\");\n    postData.link(\"http://jeromejaglale.com\");\n    postData.caption(\"Pasta and vegetables\");\n    postData.description(\"Carbs are fine. Just don't forget your vegetables.\");\n    postData.picture(\"http://jeromejaglale.com/images/ photo/vancouver_summer_2007/aa_02_appetissant.JPG\");\n    ```", "```java\n    facebook.feedOperations().post(postData);\n    ```", "```java\n    <dependency>\n        <groupId>org.springframework.social</groupId>\n        <artifactId>spring-social-core</artifactId>\n        <version>1.1.0.RELEASE</version>\n    </dependency>\n\n    <dependency>\n        <groupId>org.springframework.social</groupId>\n        <artifactId>spring-social-web</artifactId>\n        <version>1.1.0.RELEASE</version>\n    </dependency>\n\n    <dependency>\n        <groupId>org.springframework.social</groupId>\n        <artifactId>spring-social-config</artifactId>\n        <version>1.1.0.RELEASE</version>\n    </dependency>\n\n    <dependency>\n      <groupId>org.springframework.social</groupId>\n      <artifactId>spring-social-twitter</artifactId>\n      <version>1.1.0.RELEASE</version>\n    </dependency>    \n    ```", "```java\n    @Controller\n    public class TwitterController {\n    ...\n    ```", "```java\n    @RequestMapping(\"/tw/login\")\n    public void login(HttpServletRequest request, HttpServletResponse response) throws IOException {\n      TwitterConnectionFactory connectionFactory = new TwitterConnectionFactory(\"YtAG8npnZkUFDghkF2V3ykm0P\", \"RQ6hGGALfEaWGh6Vu03xcFtM1ibicW8IwSUBKaLG4drvVXXaay\");\n        OAuth1Operations oauthOperations = connectionFactory.getOAuthOperations();\n\n        OAuthToken requestToken = oauthOperations.fetchRequestToken(\"http:// jeromejaglale.com:8080/spring_webapp/tw/callback\", null);      \n        request.getSession().setAttribute(\"requestToken\", requestToken);\n        String authorizeUrl = oauthOperations.buildAuthenticateUrl(requestToken.getValue(), OAuth1Parameters.NONE);\n\n        response.sendRedirect(authorizeUrl);\n    }\n    ```", "```java\n    @RequestMapping(\"/tw/callback\")\n    public String callback(String oauth_token, String oauth_verifier, HttpServletRequest request) {\n      TwitterConnectionFactory connectionFactory = new TwitterConnectionFactory(\"YtAG8npnZkUFDghkF2V3ykm0P\", \"RQ6hGGALfEaWGh6Vu03xcFtM1ibicW8IwSUBKaLG4drvVXXaay\");\n\n      OAuthToken requestToken = (OAuthToken) request.getSession().getAttribute(\"requestToken\");    \n      OAuth1Operations oAuthOperations = connectionFactory.getOAuthOperations();\n      OAuthToken token = oAuthOperations.exchangeForAccessToken(new AuthorizedRequestToken(requestToken, oauth_verifier), null);\n\n      request.getSession().setAttribute(\"twitterToken\", token);\n\n      return \"redirect:/tw\";\n    }\n    ```", "```java\n    @RequestMapping(\"/tw\")\n    public String tw(HttpServletRequest request) {\n      OAuthToken token = (OAuthToken) request.getSession().getAttribute(\"twitterToken\");\n      if(token == null) {\n        return \"redirect:/tw/login\";      \n      }\n\n      TwitterConnectionFactory connectionFactory = new TwitterConnectionFactory(\"YtAG8npnZkUFDghkF2V3ykm0P\", \"RQ6hGGALfEaWGh6Vu03xcFtM1ibicW8IwSUBKaLG4drvVXXaay\");\n      Connection<Twitter> connection = connectionFactory.createConnection(token);\n      Twitter twitter = connection.getApi();\n      if( ! twitter.isAuthorized()) {\n        return \"redirect:/tw/login\";      \n      }\n\n      return \"tw\";\n    }\n    ```", "```java\n    <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %> \n    <%@ page isELIgnored=\"false\" %>\n    <html>\n    <body>\n        <p>Connected to Twitter</p>\n    </body>\n    </html>\n    ```", "```java\nOAuthToken requestToken = oauthOperations.fetchRequestToken(\"http://jeromejaglale.com:8080/ spring_webapp/tw/callback\", null);\n```", "```java\n    @RequestMapping(\"/fw\")\n    public String fb(HttpServletRequest request, Model model) {\n    ...\n    ```", "```java\n    TwitterProfile profile = twitter.userOperations().getUserProfile();\n    ```", "```java\n    model.addAttribute(\"profile\", profile);\n    ```", "```java\n    name: ${profile.name}<br />\n    screenName: ${profile.screenName}<br />\n    url: ${profile.url}<br />\n    profileImageUrl: ${profile.profileImageUrl}<br />\n    description: ${profile.description}<br />\n    location: ${profile.location}<br />\n    createdDate: ${profile.createdDate}<br />\n    language: ${profile.language}<br />\n    statusesCount: ${profile.statusesCount}<br />\n    followersCount: ${profile.followersCount}<br />\n    ```", "```java\n    @RequestMapping(\"/fw\")\n    public String fb(HttpServletRequest request, Model model) {\n    ...\n    ```", "```java\n    List<Tweet> tweets = twitter.timelineOperations().getUserTimeline();\n    ```", "```java\n    model.addAttribute(\"tweets\", tweets);\n    ```", "```java\n    <c:forEach items=\"${tweets}\" var=\"tweet\">\n      <p>${tweet.text}</p>\n    </c:forEach>\n    ```", "```java\ntwitter.timelineOperations().updateStatus(\"Just a test\");\n```", "```java\ntwitter.directMessageOperations().sendDirectMessage(\"jeromejaglale\", \"Hey Jerome, I'm just testing your recipe.\");\n```"]