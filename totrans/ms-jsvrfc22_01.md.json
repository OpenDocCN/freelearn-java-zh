["```java\n@ManagedBean\n//some scope\npublic class PlayersBean{\n...\n}\n```", "```java\n@Named\n//some scope\npublic class PlayersBean{\n...\n}\n```", "```java\n@ManagedBean(name = \"myPlayersBean\")\n//some scope\npublic class PlayersBean{\n...\n}\n\n@Named(value = \"myPlayersBean\")\n//some scope\npublic class PlayersBean{\n...\n}\n```", "```java\n#{playersBean}\n```", "```java\n#{myPlayersBean}\n```", "```java\nprivate String playerName = \"Rafael\";\nprivate String playerSurname = \"Nadal\";\n```", "```java\npublic String getPlayerName() {\n  return playerName;\n}\npublic String getPlayerSurname() {\n  return playerSurname;\n}\n```", "```java\n#{playersBean.playerName}\n```", "```java\n#{playersBean['playerName']}\n```", "```java\n<h:outputText value=\"#{playersBean[\"playerName\"]}\"/>\n```", "```java\n<h:outputText value='#{playersBean['playerName']}'/>\n```", "```java\n<h:outputText value=\"#{playersBean['playerName']}\"/>\n```", "```java\n<h:outputText value='#{playersBean[\"playerName\"]}'/>\n```", "```java\npublic class PlayerDetails {\n\n  private Date birthday;\n  private String birthplace;\n  ...\n\n  public Date getBirthday() {\n    return birthday;\n  }\n\n  public String getBirthplace() {\n    return birthplace;\n  }\n  ...\n}\n```", "```java\n@Named\npublic class PlayersBean{\n\n  private String playerName = \"Rafael\";\n  private String playerSurname = \"Nadal\";\n  private PlayerDetails playerDetails;\n\n  public String getPlayerName() {\n    return playerName;\n  }\n\n  public String getPlayerSurname() {\n    return playerSurname;\n  }\n\n  public PlayerDetails getPlayerDetails() {\n    return playerDetails;\n  }\n  ...\n}\n```", "```java\n#{playersBean.playerDetails.birthday}\n#{playersBean.playerDetails.birthplace}\n\n#{playersBean['playerDetails']['birthday']}\n#{playersBean['playerDetails']['birthplace']}\n```", "```java\n#{playersBean.playerDetails['birthday']}\n#{playersBean.playerDetails['birthplace']}\n\n#{playersBean['playerDetails'].birthday}\n#{playersBean['playerDetails'].birthplace}\n```", "```java\npublic enum Plays {\n  Left, Right\n};\n\nprivate Plays play;\n...\nplay = Plays.Left;//initialization can be done in constructor\n...\npublic Plays getPlay() {\n  return play;\n}\n...\n```", "```java\n#{playersBean.play}\n```", "```java\n#{playersBean.play == 'Left'} //return true\n#{playersBean.play == 'Right'}//return false\n```", "```java\nprivate String[] titles_2013 = {\"Sao Paulo\", \"Acapulco\", \"ATP World Tour Masters 1000 Indian Wells\", \"Barcelona\", ...};\n...\npublic String[] getTitles_2013() {\n  return titles_2013;\n}   \n```", "```java\n#{playersBean.titles_2013[0]}\n```", "```java\n<c:forEach begin=\"0\" \n  end=\"${fn:length(playersBean.titles_2013)-1}\" \n  var=\"i\">\n  #{playersBean.titles_2013[i]},\n</c:forEach>\n```", "```java\n<c:forEach var=\"title\" items=\"#{playersBean.titles_2013}\">\n  <i>#{title}</i>,\n</c:forEach>\n```", "```java\n<ui:repeat var=\"title\" value=\"#{playersBean.titles_2013}\">\n  <i>#{title}</i>,\n</ui:repeat>\n```", "```java\nprivate Map<String, String> matchfacts = new HashMap<>();\n...\nmatchfacts.put(\"Aces\", \"12\");\nmatchfacts.put(\"Double Faults\", \"2\");\nmatchfacts.put(\"1st Serve\", \"70%\");\n...\n\npublic Map<String, String> getMatchfacts() {\n  return matchfacts;\n}\n```", "```java\n#{playersBean.matchfacts.Aces}\n```", "```java\n#{playersBean.matchfacts[\"Double Faults\"]}\n```", "```java\n    public void vamosRafa_1(){\n      System.out.println(\"Vamos Rafa!\");\n    }\n\n    #{playersBean.vamosRafa_1()}\n    ```", "```java\n    public String vamosRafa_2() {\n      return \"Vamos Rafa!\";\n    }\n\n    #{playersBean.vamosRafa_2()}\n    ```", "```java\n    public void vamosRafa_3(String text) {\n      System.out.println(text);\n    }\n\n    #{playersBean.vamosRafa_3('Vamos Rafa!')}\n    ```", "```java\n    public String vamosRafa_4(String name, String surname) {    \n      return \"Vamos \" + name + \" \" + surname + \"!\";\n    }\n\n    #{playersBean.vamosRafa_4(playersBean.playerName, playersBean.playerSurname)}\n    ```", "```java\n    public String vamosRafa_5(){\n     return \"vamos\";\n    }\n    ```", "```java\n<h:form>  \n  <h:commandButton action=\"#{playersBean.vamosRafa_5()}\" value=\"Vamos ...\" />\n</h:form>\n```", "```java\n<h:form>\n  <h:commandButton type=\"button\" value=\"Click Me!\" onclick=\"infoJS('#{playersBean.playerName}', '#{playersBean.playerSurname}')\"/>\n</h:form>\n```", "```java\n<script type=\"text/javascript\">\n  function infoJS(name, surname) {\n    alert(\"Name: \" + name + \" Surname: \" + surname);\n  }\n</script>\n```", "```java\nboolean_test ? result_for_true : result_for_false\n```", "```java\n.red { color:#cc0000; } \n.blue { color: #0000cc; }\n```", "```java\n<h:outputText styleClass=\"#{playersBean.play == 'Left' ? 'red': 'blue'}\" value=\"#{playersBean.play}\"/>\n```", "```java\n<c:forEach var=\"title\" items=\"#{playersBean.titles_2013}\">\n  <i>#{title}</i>,\n</c:forEach>\n```", "```java\n<c:forEach var=\"title\" items=\"#{playersBean.titles_2013}\" varStatus=\"v\">\n  <i>#{title}</i>\n  #{v.last ? '':','}\n</c:forEach>\n```", "```java\n<h:outputText value=\"Facebook address: #{playersBean.facebook}\" rendered=\"#{!empty playersBean.facebook}\" />\n```", "```java\n<h:form id=\"prizeFormId\">\n  <h:commandButton value=\"Show Career Prize Money\">\n  <f:ajax render=\"rnprizeid\"  listener=\"#{playersBean.showPrizeMoney()}\"/>\n  </h:commandButton>\n  <h:panelGrid id=\"rnprizeid\">\n    <h:outputText value=\"#{playersBean.prize}\" rendered=\"#{playersBean.show_prize}\">\n      <f:convertNumber type=\"currency\" currencySymbol=\"$\" />\n    </h:outputText>            \n  </h:panelGrid>\n  <h:commandButton value=\"Hide Career Prize Money\">\n    <f:ajax render=\"rnprizeid\" \n            listener=\"#{playersBean.hidePrizeMoney()}\"/>\n  </h:commandButton>\n</h:form>\n```", "```java\nprivate boolean show_prize = false;\n...\npublic boolean isShow_prize() {\n  return show_prize;\n}\n...\npublic void showPrizeMoney(){\n  this.show_prize = true;\n}\n\npublic void hidePrizeMoney(){\n  this.show_prize = false;\n}\n```", "```java\nprivate int prize = 60941937;\n...\npublic int getPrize() {\n  return prize;\n}\n```", "```java\n<img src=\"img/babolat.jpg\" width=\"290\" height=\"174\"/>\n```", "```java\n<ui:fragment rendered=\"#{playersBean.show_racquet}\">\n  <img src=\"img/#{resource['images:babolat.jpg']}\" width=\"290\" height=\"174\"/>\n</ui:fragment>\n```", "```java\nprivate boolean show_racquet = false;\n...\npublic boolean isShow_racquet() {\n  return show_racquet;\n}\n```", "```java\n...\n<h:form>\n  <h:selectBooleanCheckbox label=\"Show Image\"valueChangeListener=\"#{playersBean.showHideRacquetPicture}\">\n    <f:ajax render=\"racquetId\"/>\n  </h:selectBooleanCheckbox>        \n  <h:panelGroup id=\"racquetId\">\n    <ui:fragment rendered=\"#{playersBean.show_racquet}\">\n    <img src=\"img/babolat.jpg\" width=\"290\" height=\"174\"/>\n  </ui:fragment>    \n  </h:panelGroup>\n</h:form>\n...\n```", "```java\npublic void showHideRacquetPicture(ValueChangeEvent e){\n  if(e.getNewValue() == Boolean.TRUE){\n     this.show_racquet=true;\n  } else {\n     this.show_racquet=false;\n  }\n}\n```", "```java\npublic class ATPVarResolver extends ELResolver {\n\n  private static final Logger logger = Logger.getLogger(ATPVarResolver.class.getName());\n  private static final String PLAYERS = \"atp\";\n  private final Class<?> CONTENT = List.class;\n...\n}\n```", "```java\n    public abstract Object getValue(ELContext context, Object base, Object property)\n    ```", "```java\n    @Override\n    public Object getValue(ELContext ctx, Object base, Object property) {\n\n    logger.log(Level.INFO, \"Get Value property : {0}\", property);\n\n      if ((base == null) && property.equals(PLAYERS)) {\n        logger.log(Level.INFO, \"Found request {0}\", base);    \n        ctx.setPropertyResolved(true);          \n        List<String> values = ATPSinglesRankings.getSinglesRankings();\n        return values;\n        }\n      return null;\n    }\n    ```", "```java\n    public abstract Class<?> getType(ELContext context, Object base,Object property)\n    ```", "```java\n    @Override\n    public Class<?> getType(ELContext ctx, Object base, Object property) {\n\n      if (base != null) {\n        return null;\n      }\n\n      if (property == null) {\n        String message = MessageUtils.getExceptionMessageString(MessageUtils.NULL_PARAMETERS_ERROR_MESSAGE_ID, \"property\");\n        throw new PropertyNotFoundException(message);\n      }\n\n      if ((base == null) && property.equals(PLAYERS)) {\n        ctx.setPropertyResolved(true);\n        return CONTENT;\n      }\n      return null; \n    }\n    ```", "```java\n    public abstract void setValue(ELContext context, Object base, Object property, Object value)\n    ```", "```java\n    @Override\n    public void setValue(ELContext ctx, Object base, Object property, Object value) {\n\n      if (base != null) {\n        return;\n      }\n\n      ctx.setPropertyResolved(false);\n      if (property == null) {\n        String message = MessageUtils.getExceptionMessageString(MessageUtils.NULL_PARAMETERS_ERROR_MESSAGE_ID, \"property\");\n        throw new PropertyNotFoundException(message);\n      }\n\n      if (PLAYERS.equals(property)) {\n        throw new PropertyNotWritableException((String) property);\n      }\n    }\n    ```", "```java\n    public abstract boolean isReadOnly(ELContext context, Object base, Object property)\n    ```", "```java\n    @Override\n    public boolean isReadOnly(ELContext ctx, Object base, Object property) {\n      return true;\n    }\n    ```", "```java\n    public abstract Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context, Object base\n    ```", "```java\n    @Override\n    public Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext ctx, Object base) {\n      return null;\n    }\n    ```", "```java\n    public abstract Class<?> getCommonPropertyType(ELContext context, Object base)\n    ```", "```java\n    @Override\n    public Class<?> getCommonPropertyType(ELContext ctx, Object base) {\n      if (base != null) {\n        return null;\n      }\n      return String.class;\n    }\n    ```", "```java\npublic class ATPSinglesRankings {\n\n  public static List<String> getSinglesRankings(){\n\n    List<String> atp_ranking= new ArrayList<>();\n\n    atp_ranking.add(\"1 Nadal, Rafael (ESP)\");\n    ...              \n\n    return atp_ranking;\n  }\n}\n```", "```java\n<application>\n  <el-resolver>book.beans.ATPVarResolver</el-resolver>\n</application>\n```", "```java\n<h:dataTable id=\"atpTableId\" value=\"#{atp}\" var=\"t\">\n  <h:column>\n    #{t}\n  </h:column>\n</h:dataTable>\n```", "```java\npublic Object getValue(ELContext ctx, Object base, Object property) {\n\n  if ((base == null) && property.equals(PLAYERS)) {\n    ctx.setPropertyResolved(true);\n    return new ATPSinglesRankings();\n  }\n  return null;\n}\n```", "```java\nprivate final Class<?> CONTENT = ATPSinglesRankings.class;\n```", "```java\npublic class ATPSinglesRankings {\n\n  public List<String> getSinglesRankings(){\n\n    List<String> atp_ranking= new ArrayList<>();\n\n    atp_ranking.add(\"1 Nadal, Rafael (ESP)\");\n    ...             \n\n    return atp_ranking;\n  }\n\n  public List<String> getSinglesRankingsReversed(){\n\n    List<String> atp_ranking= new ArrayList<>();\n\n    atp_ranking.add(\"5 Del Potro, Juan Martin (ARG)\");\n    atp_ranking.add(\"4 Murray, Andy (GBR)\");        \n    ...  \n\n    return atp_ranking;\n  }\n\n  public List<String> getSinglesRankingsUpperCase(){\n\n    List<String> atp_ranking= new ArrayList<>();\n\n    atp_ranking.add(\"5 Del Potro, Juan Martin (ARG)\".toUpperCase());                        \n    atp_ranking.add(\"4 Murray, Andy (GBR)\".toUpperCase());\n    ...\n\n    return atp_ranking;\n  }\n...\n}\n```", "```java\n<b>Ordered:</b><br/>\n<h:dataTable id=\"atpTableId1\" value=\"#{atp.singlesRankings}\"var=\"t\">\n  <h:column>#{t}</h:column>\n</h:dataTable>\n<br/><br/><b>Reversed:</b><br/>\n<h:dataTable id=\"atpTableId2\" value=\"#{atp.singlesRankingsReversed}\" var=\"t\">\n  <h:column>#{t}</h:column>\n</h:dataTable>\n<br/><br/><b>UpperCase:</b><br/>\n<h:dataTable id=\"atpTableId3\" value=\"#{atp.singlesRankingsUpperCase}\" var=\"t\">\n  <h:column>#{t}</h:column>\n</h:dataTable>\n```", "```java\npublic class ELContextResolver extends ELResolver {\n\n  private static final String EL_CONTEXT_NAME = \"elContext\";\n\n  @Override\n  public Class<?> getCommonPropertyType(ELContext ctx,Object base){\n    if (base != null) {\n      return null;\n    }\n    return String.class;\n  }\n\n  @Override\n  public Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext ctx, Object base) {\n    if (base != null) {\n      return null;\n  }\n    ArrayList<FeatureDescriptor> list = new ArrayList<>(1);\n    list.add(Util.getFeatureDescriptor(\"elContext\", \"elContext\",\"elContext\", false, false, true, \n    ELContext.class, Boolean.TRUE));\n    return list.iterator();\n  }\n\n  @Override\n  public Class<?> getType(ELContext ctx, Object base, Object property) {\n    if (base != null) {\n      return null;\n    }\n    if (property == null) {\n      String message = MessageUtils.getExceptionMessageString(MessageUtils.NULL_PARAMETERS_ERROR_MESSAGE_ID, \"property\");\n      throw new PropertyNotFoundException(message);\n    }\n    if ((base == null) && property.equals(EL_CONTEXT_NAME)) {\n      ctx.setPropertyResolved(true);\n    }\n    return null;\n  }\n\n  @Override\n  public Object getValue(ELContext ctx, Object base, Object property) {\n\n    if ((base == null) && property.equals(EL_CONTEXT_NAME)) {\n      ctx.setPropertyResolved(true);\n      FacesContext facesContext = FacesContext.getCurrentInstance();\n        return facesContext.getELContext();\n    }\n    return null;\n  }\n\n  @Override\n  public boolean isReadOnly(ELContext ctx, Object base, Object property) {\n    if (base != null) {\n      return false;\n    }\n    if (property == null) {\n      String message = MessageUtils.getExceptionMessageString(MessageUtils.NULL_PARAMETERS_ERROR_MESSAGE_ID, \"property\");\n      throw new PropertyNotFoundException(message);\n    }\n    if (EL_CONTEXT_NAME.equals(property)) {\n      ctx.setPropertyResolved(true);\n      return true;\n    }\n    return false;\n  }\n\n  @Override\n  public void setValue(ELContext ctx, Object base, Object property, Object value) {\n    if (base != null) {\n      return;\n    }\n    ctx.setPropertyResolved(false);\n    if (property == null) {\n      String message = MessageUtils.getExceptionMessageString(MessageUtils.NULL_PARAMETERS_ERROR_MESSAGE_ID, \"property\");\n      throw new PropertyNotFoundException(message);\n    }\n    if (EL_CONTEXT_NAME.equals(property)) {\n      throw new PropertyNotWritableException((String) property);\n    }\n  }\n}\n```", "```java\n#{'0'.concat(0).concat(0).concat(1).concat(1).concat(0).concat(0).concat(0)}\n```", "```java\n#‌{modulus = (n,m) -> m eq 0 ? 0 : (n lt m ? n: (modulus(n-m, m))); modulus(13,5)}\n```", "```java\n#‌{gcd = (n,m) -> modulus(n,m) == 0 ? m: (gcd(m, modulus(n,m))); gcd(10, 15)}\n```", "```java\n#‌{lambdaBean.firstLambdaAction(modulus = (n,m) -> m eq 0 ? 0 : (n lt m ? n: (modulus(n-m, m))))}\n```", "```java\npublic Object firstLambdaAction(LambdaExpression lambdaExpression) {\n\n  //useful in case of a custom ELContext\n  FacesContext facesContext = FacesContext.getCurrentInstance();\n  ELContext elContext = facesContext.getELContext();\n  return lambdaExpression.invoke(elContext, 8, 3);\n\n  //or simply, default ELContext:\n  //return lambdaExpression.invoke(8, 3);\n}\n```", "```java\n#‌{nr_set = {1,2,3,4,5,6,7,8,9,10}}\n#‌{nr_list = [1,2,3,4,5,6,7,8,9,10]}\n#‌{nr_map = {\"one\":1,\"two\":2,\"three\":3,\"four\":4,\"five\":5,\"six\":6,\"seven\":7,\"eight\":8,\"nine\":9,\"ten\":10}}\n```", "```java\n#‌{nr_list.stream().sorted((i,j)->i-j).toList()}\n#‌{ nr_list.stream().sorted((i,j)->j-i).toList()}\n```", "```java\nList<Integer> costBeforeVAT = Arrays.asList(34, 2200, 1350, 430, 57, 10000, 23, 15222, 1);\n```", "```java\n#‌{(lambdaBean.costBeforeVAT.stream().filter((cost)-> cost gt 1000).map((cost) -> cost + .24*cost)).reduce((sum, cost) -> sum + cost).get()}\n```", "```java\n#{get_sublist = (list, left, right)->list.stream().substream(left, right).toList()}\n```", "```java\n<ui:repeat value=\"#{get_sublist(myList, from, to)}\" var=\"t\">\n  #{t}\n</ui:repeat>\n```"]