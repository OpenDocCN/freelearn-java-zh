["```java\n    module pattern.one { \n      exports pattern.one.external; \n    } \n```", "```java\n    public class Factory { \n      public PublicInterface getApiInstance(boolean selector) { \n        if (selector) { \n          return new PrivateImplA(); \n        } \n        return new PrivateImplB(); \n      } \n    } \n```", "```java\n    module pattern.two.service { \n      exports pattern.two.external; \n    } \n```", "```java\n    module pattern.two.implA { \n      requires pattern.two.service; \n      provides pattern.two.external.PublicInterface with \n       pattern.two.implA.ImplA; \n    } \n```", "```java\n    module consumer { \n      requires pattern.two.service; \n      uses pattern.two.external.PublicInterface; \n    } \n```", "```java\n    module <module-name> { \n      ... \n      requires static <optional-module-dependency>; \n    } \n```", "```java\n    module pattern.three { \n      requires static pattern.three.optlib; \n      exports pattern.three.external; \n    } \n```", "```java\n    public class LibImpl { \n      public void publicApi() { \n        System.out.println(\"Called API method in LibImpl\"); \n      } \n    } \n```", "```java\n    try { \n      Class<?> clazz = Class.forName(\"pattern.three.lib.LibImpl\"); \n      LibImpl impl = (LibImpl) clazz.getConstructor()\n                      .newInstance(); // Create new instance \n      impl.publicApi(); // Call the API \n    } catch (ReflectiveOperationException e) { \n        System.out.println(\"Did not find the Impl class module\"); \n    } \n```", "```java\n$ javac --module-source-path src -p src -d out $(find . -name '*.java')  \n```", "```java\n$ java --module-path out --add-modules pattern.three.optlib -m \n  consumer/app.Main\n\nCalled API method in LibImpl\n```", "```java\n$ java --module-path out -m consumer/app.Main\n\nDid not find the Impl class module  \n```", "```java\n    module A { \n      uses <service-type>; \n    } \n```", "```java\n    module B { \n      provides <service-type> with <implementation-type>; \n    } \n```", "```java\n    module pattern.four { \n      exports pattern.four.external; \n      uses pattern.four.external.LibInterface; \n    } \n```", "```java\n    module pattern.four.optlib { \n      requires pattern.four; \n      provides pattern.four.external.LibInterface with \n       pattern.four.lib.LibImpl;  \n    } \n```", "```java\n    public class LibImpl implements LibInterface { \n      public void publicApi() { \n        System.out.println(\"Called API method in Service\"); \n      } \n    } \n```", "```java\n    public class Util { \n      public void utilMethod() { \n        Iterable<LibInterface> libInstances =\n          ServiceLoader.load(LibInterface.class); \n        for (LibInterface libInstance : libInstances) { \n          libInstance.publicApi(); \n        } \n      } \n    } \n```", "```java\n    open module <module-name> { \n    } \n```", "```java\n    module modulename { \n      opens package.one; \n      opens package.two to anothermodule; \n      exports package.three; \n    } \n```", "```java\n    try { \n      Class clazz = Class.forName(\"pattern.six.internal.Contact\"); \n      Constructor<?> ctor = clazz.getConstructor(); \n      Object object = ctor.newInstance(new Object[] {  }); \n      System.out.println(\"Successfully created object using \n       reflection\"); \n    } catch (ReflectiveOperationException e) { \n        System.out.println(\"Did not find the Impl class module\"); \n    } \n```", "```java\n    module consumer { \n      requires pattern.six; \n    } \n```", "```java\n    open module pattern.six {   \n    } \n```", "```java\n    @Deprecated(since = \"9\", forRemoval = true)\n    module mymodule {   \n    } \n```", "```java\n    module pattern.nine.facade { \n      requires transitive module.one; \n      requires transitive module.two; \n      exports pattern.nine.external; \n    } \n```", "```java\n    public void facadeMethod(String apiChoice) { \n      if (\"one\".equals(apiChoice)) { \n        apiOne.apiMethod(); \n      } \n      else if (\"two\".equals(apiChoice)) { \n        apiTwo.apiMethod(); \n      } \n    } \n```", "```java\n    public static void main(String[] args) { \n      FacadeApi facade = new FacadeApi(); \n      ApiTwo apiTwo = new ApiTwo(); \n      facade.facadeMethod(\"one\"); // Calling the API through the facade \n      apiTwo.apiMethod(); // Calling the other API directly \n    }\n```"]