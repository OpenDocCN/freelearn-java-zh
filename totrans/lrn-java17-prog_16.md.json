["```java\nIterable<String> list = List.of(\"s1\", \"s2\", \"s3\");\n```", "```java\nSystem.out.println(list);                //prints: [s1, s2, s3]\n```", "```java\nlist.forEach(e -> System.out.print(e + \" \"));//prints: s1 s2 s3\n```", "```java\n  list.sort(Comparator.naturalOrder());\n```", "```java\n  Comparator<String> cmp = \n```", "```java\n               (s1, s2) -> s1 == null ? -1 : s1.compareTo(s2);\n```", "```java\n  list.sort(cmp);\n```", "```java\n  HttpClient httpClient = HttpClient.newBuilder().build();\n```", "```java\n  HttpRequest req = HttpRequest.newBuilder()\n```", "```java\n   .uri(URI.create(\"http://localhost:3333/something\")).build();\n```", "```java\n  try {\n```", "```java\n     HttpResponse<String> resp = \n```", "```java\n                 httpClient.send(req, BodyHandlers.ofString());\n```", "```java\n     System.out.println(\"Response: \" + \n```", "```java\n                      resp.statusCode() + \" : \" + resp.body());\n```", "```java\n  } catch (Exception ex) {\n```", "```java\n     ex.printStackTrace();\n```", "```java\n  }\n```", "```java\nBodySubscriber<T> apply(ResponseInfo responseInfo)\n```", "```java\n  btn.setOnAction(e -> { \n```", "```java\n                     System.out.println(\"Bye! See you later!\");\n```", "```java\n                     Platform.exit();\n```", "```java\n                 });\n```", "```java\n  primaryStage.onCloseRequestProperty()\n```", "```java\n     .setValue(e -> System.out.println(\"Bye! See you later!\"));\n```", "```java\n@FunctionalInterface\n```", "```java\ninterface A {\n```", "```java\n    void method1();\n```", "```java\n    default void method2(){}\n```", "```java\n    static void method3(){}\n```", "```java\n}\n```", "```java\n@FunctionalInterface\n```", "```java\ninterface B extends A {\n```", "```java\n    default void method4(){}\n```", "```java\n}\n```", "```java\n@FunctionalInterface\n```", "```java\ninterface C extends B {\n```", "```java\n    void method1();\n```", "```java\n}\n```", "```java\n//@FunctionalInterface \n```", "```java\ninterface D extends C {\n```", "```java\n    void method5();\n```", "```java\n}\n```", "```java\n@FunctionalInterface\n```", "```java\ninterface Runnable {\n```", "```java\n    void run(); \n```", "```java\n}\n```", "```java\n@FunctionalInterface\n```", "```java\ninterface Callable<V> {\n```", "```java\n    V call() throws Exception;\n```", "```java\n}\n```", "```java\nRunnable runnable = new Runnable() {\n```", "```java\n    @Override\n```", "```java\n    public void run() {\n```", "```java\n        System.out.println(\"Hello!\");\n```", "```java\n    }\n```", "```java\n};\n```", "```java\nrunnable.run();   //prints: Hello!\n```", "```java\nRunnable runnable = () -> System.out.println(\"Hello!\");\n```", "```java\n  BiFunction<Double, Integer, Double> f = \n```", "```java\n                           (Double x, Integer y) -> x / y;\n```", "```java\n  System.out.println(f.apply(3., 2)); //prints: 1.5\n```", "```java\n  BiFunction<Double, Integer, Double> f = (x, y) -> x / y;\n```", "```java\n  System.out.println(f.apply(3., 2));   //prints: 1.5\n```", "```java\n  BiFunction<Double, Integer, Double> f = \n```", "```java\n                                       (var x, var y) -> x / y;\n```", "```java\n  System.out.println(f.apply(3., 2));    //prints: 1.5\n```", "```java\n<dependency>\n```", "```java\n    <groupId>org.jetbrains</groupId>\n```", "```java\n    <artifactId>annotations</artifactId>\n```", "```java\n    <version>22.0.0</version>\n```", "```java\n</dependency>\n```", "```java\nimport javax.validation.constraints.NotNull;\n```", "```java\nimport java.util.function.BiFunction;\n```", "```java\nimport java.util.function.Consumer;\n```", "```java\nBiFunction<Double, Integer, Double> f =\n```", "```java\n                     (@NotNull var x, @NotNull var y) -> x / y;\n```", "```java\nSystem.out.println(f.apply(3., 2));    //prints: 1.5\n```", "```java\nBiFunction<Double, Integer, Double> f = (x, y) -> x / y;\n```", "```java\nSystem.out.println(f.apply(null, 2));\n```", "```java\nBiFunction<Double, Integer, Double> f =\n```", "```java\n        (@NotNull var x, @NotNull var y) -> x / y;\n```", "```java\nSystem.out.println(f.apply(null, 2));\n```", "```java\nException in thread \"main\" java.lang.IllegalArgumentException: \n```", "```java\nArgument for @NotNull parameter 'x' of \n```", "```java\ncom/packt/learnjava/ch13_functional/LambdaExpressions\n```", "```java\n.lambda$localVariableSyntax$1 must not be null\n```", "```java\nat com.packt.learnjava.ch13_functional.LambdaExpressions\n```", "```java\n.$$$reportNull$$$0(LambdaExpressions.java)\n```", "```java\nat com.packt.learnjava.ch13_functional.LambdaExpressions\n```", "```java\n.lambda$localVariableSyntax$1(LambdaExpressions.java)\n```", "```java\nat com.packt.learnjava.ch13_functional.LambdaExpressions\n```", "```java\n.localVariableSyntax(LambdaExpressions.java:59)\n```", "```java\nat com.packt.learnjava.ch13_functional.LambdaExpressions\n```", "```java\n.main(LambdaExpressions.java:12)\n```", "```java\nBiFunction<SomeReallyLongClassName,\n```", "```java\nAnotherReallyLongClassName, Double> f =\n```", "```java\n      (@NotNull SomeReallyLongClassName x,\n```", "```java\n    @NotNull AnotherReallyLongClassName y) -> x.doSomething(y);\n```", "```java\nBiFunction<SomeReallyLongClassName,\n```", "```java\nAnotherReallyLongClassName, Double> f =\n```", "```java\n           (@NotNull x, @NotNull y) -> x.doSomething(y);\n```", "```java\nBiFunction<SomeReallyLongClassName,\n```", "```java\nAnotherReallyLongClassName, Double> f =\n```", "```java\n          (@NotNull var x, @NotNull var y) -> x.doSomething(y);\n```", "```java\n  Consumer<String> printResult = \n```", "```java\n                       s -> System.out.println(\"Result: \" + s);\n```", "```java\n  printResult.accept(\"10.0\");   //prints: Result: 10.0\n```", "```java\nConsumer<String> printWithPrefixAndPostfix(String pref, String postf){\n```", "```java\n    return s -> System.out.println(pref + s + postf);\n```", "```java\n}\n```", "```java\nprintWithPrefixAndPostfix(\"Result: \", \n```", "```java\n                          \" Great!\").accept(\"10.0\");            \n```", "```java\n                                  //prints: Result: 10.0 Great!\n```", "```java\npublic class Person {\n```", "```java\n    private int age;\n```", "```java\n    private String firstName, lastName, record;\n```", "```java\n    public Person(int age, String firstName, String lastName) {\n```", "```java\n        this.age = age;\n```", "```java\n        this.lastName = lastName;\n```", "```java\n        this.firstName = firstName;\n```", "```java\n    }\n```", "```java\n    public int getAge() { return age; }\n```", "```java\n    public String getFirstName() { return firstName; }\n```", "```java\n    public String getLastName() { return lastName; }\n```", "```java\n    public String getRecord() { return record; }\n```", "```java\n    public void setRecord(String fullId) { \n```", "```java\n                                        this.record = record; }\n```", "```java\n}\n```", "```java\nString externalData = \"external data\";\n```", "```java\nConsumer<Person> setRecord =\n```", "```java\n    p -> p.setFullId(p.getFirstName() + \" \" +\n```", "```java\n    p.getLastName() + \", \" + p.getAge() + \", \" + externalData);\n```", "```java\nConsumer<Person> printRecord = p -> System.out.println(\n```", "```java\n                                                p.getRecord());\n```", "```java\nConsumer<Person> setRecordThenPrint = setRecord.\n```", "```java\n                                        andThen(printPersonId);\n```", "```java\nsetRecordThenPrint.accept(new Person(42, \"Nick\", \"Samoylov\")); \n```", "```java\n                 //prints: Nick Samoylov, age 42, external data\n```", "```java\nPredicate<Integer> isLessThan10 = i -> i < 10;\n```", "```java\nSystem.out.println(isLessThan10.test(7));      //prints: true\n```", "```java\nSystem.out.println(isLessThan10.test(12));     //prints: false\n```", "```java\nint val = 7;\n```", "```java\nConsumer<String> printIsSmallerThan10 = \n```", "```java\nprintWithPrefixAndPostfix(\"Is \" + val + \" smaller than 10? \", \n```", "```java\n                                                  \"  Great!\");\n```", "```java\nprintIsSmallerThan10.accept(String.valueOf(isLessThan10.\n```", "```java\n                                                   test(val))); \n```", "```java\n                    //prints: Is 7 smaller than 10? true Great!\n```", "```java\nPredicate<Integer> isEqualOrGreaterThan10 = isLessThan10.\n```", "```java\n                                                      negate();\n```", "```java\nSystem.out.println(isEqualOrGreaterThan10.test(7));  \n```", "```java\n                                                //prints: false\n```", "```java\nSystem.out.println(isEqualOrGreaterThan10.test(12)); \n```", "```java\n                                                 //prints: true\n```", "```java\nisEqualOrGreaterThan10 = Predicate.not(isLessThan10);\n```", "```java\nSystem.out.println(isEqualOrGreaterThan10.test(7));  \n```", "```java\n                                                //prints: false\n```", "```java\nSystem.out.println(isEqualOrGreaterThan10.test(12)); \n```", "```java\n                                                 //prints: true\n```", "```java\nPredicate<Integer> isGreaterThan10 = i -> i > 10;\n```", "```java\nPredicate<Integer> is_lessThan10_OR_greaterThan10 = \n```", "```java\n                              isLessThan10.or(isGreaterThan10);\n```", "```java\nSystem.out.println(is_lessThan10_OR_greaterThan10.test(20)); \n```", "```java\n                                                        // true\n```", "```java\nSystem.out.println(is_lessThan10_OR_greaterThan10.test(10)); \n```", "```java\n                                                       // false\n```", "```java\nPredicate<Integer> isGreaterThan5 = i -> i > 5;\n```", "```java\nPredicate<Integer> is_lessThan10_AND_greaterThan5 = \n```", "```java\n                   isLessThan10.and(isGreaterThan5);\n```", "```java\nSystem.out.println(is_lessThan10_AND_greaterThan5.test(3));  \n```", "```java\n                                                       // false\n```", "```java\nSystem.out.println(is_lessThan10_AND_greaterThan5.test(7));  \n```", "```java\n                                                        // true\n```", "```java\nPerson nick = new Person(42, \"Nick\", \"Samoylov\");\n```", "```java\nPredicate<Person> isItNick = Predicate.isEqual(nick);\n```", "```java\nPerson john = new Person(42, \"John\", \"Smith\");\n```", "```java\nPerson person = new Person(42, \"Nick\", \"Samoylov\");\n```", "```java\nSystem.out.println(isItNick.test(john));        \n```", "```java\n                                                //prints: false\n```", "```java\nSystem.out.println(isItNick.test(person));            \n```", "```java\n                                                 //prints: true\n```", "```java\nSupplier<Integer> supply42 = () -> 42;\n```", "```java\nSystem.out.println(supply42.get());  //prints: 42\n```", "```java\nint input = 7;\n```", "```java\nint limit = 10;\n```", "```java\nSupplier<Integer> supply7 = () -> input;\n```", "```java\nPredicate<Integer> isLessThan10 = i -> i < limit;\n```", "```java\nConsumer<String> printResult = printWithPrefixAndPostfix(\"Is \"\n```", "```java\n         + input + \" smaller than \" + limit + \"? \", \" Great!\");\n```", "```java\nprintResult.accept(String.valueOf(isLessThan10.test(\n```", "```java\n                                              supply7.get())));\n```", "```java\n                    //prints: Is 7 smaller than 10? true Great!\n```", "```java\nFunction<Integer, Double> multiplyByTen = i -> i * 10.0;\n```", "```java\nSystem.out.println(multiplyByTen.apply(1));    //prints: 10.0\n```", "```java\nSupplier<Integer> supply7 = () -> 7;\n```", "```java\nFunction<Integer, Double> multiplyByFive = i -> i * 5.0;\n```", "```java\nConsumer<String> printResult = \n```", "```java\n              printWithPrefixAndPostfix(\"Result: \", \" Great!\");\n```", "```java\nprintResult.accept(multiplyByFive.\n```", "```java\n     apply(supply7.get()).toString()); \n```", "```java\n                                  //prints: Result: 35.0 Great!\n```", "```java\nFunction<Double, Long> divideByTwo = \n```", "```java\n                       d -> Double.valueOf(d / 2.).longValue();\n```", "```java\nFunction<Long, String> incrementAndCreateString = \n```", "```java\n                                    l -> String.valueOf(l + 1);\n```", "```java\nFunction<Double, String> divideByTwoIncrementAndCreateString = \n```", "```java\n                 divideByTwo.andThen(incrementAndCreateString);\n```", "```java\nprintResult.accept(divideByTwoIncrementAndCreateString.\n```", "```java\n                                                    apply(4.));\n```", "```java\n                                     //prints: Result: 3 Great!\n```", "```java\nFunction<Double, String> divideByTwoIncrementAndCreateString =  \n```", "```java\n                 incrementAndCreateString.compose(divideByTwo);\n```", "```java\nprintResult.accept(divideByTwoIncrementAndCreateString.\n```", "```java\n                                                    apply(4.)); \n```", "```java\n                                     //prints: Result: 3 Great!\n```", "```java\nFunction<Double, String> divideByTwoIncrementAndCreateString =\n```", "```java\n       (d -> Double.valueOf(d / 2.).longValue())\n```", "```java\n                   .andThen(incrementAndCreateString); \n```", "```java\nFunction<Double, String> divideByTwoIncrementAndCreateString =\n```", "```java\n      incrementAndCreateString\n```", "```java\n      .compose(d -> Double.valueOf(d / 2.).longValue());\n```", "```java\nFunction<Double, Double> multiplyByTwo = d -> d * 2.0; \n```", "```java\nSystem.out.println(multiplyByTwo.apply(2.));  //prints: 4.0\n```", "```java\nmultiplyByTwo = Function.identity();\n```", "```java\nSystem.out.println(multiplyByTwo.apply(2.));  //prints: 2.0\n```", "```java\nFunction<Double, Double> multiplyByTwo = d -> d * 2.0;\n```", "```java\nSystem.out.println(multiplyByTwo.apply(2.));  //prints: 4.0\n```", "```java\nFunction<Double, Long> subtract7 = d -> Math.round(d - 7);\n```", "```java\nSystem.out.println(subtract7.apply(11.0));   //prints: 4\n```", "```java\nlong r = multiplyByTwo.andThen(subtract7).apply(2.);\n```", "```java\nSystem.out.println(r);                       //prints: -3\n```", "```java\nFunction<Double, Double> multiplyByTwo = d -> d * 2.0;\n```", "```java\nSystem.out.println(multiplyByTwo.apply(2.));  //prints: 4.0\n```", "```java\nFunction<Double, Long> subtract7 = d -> Math.round(d - 7);\n```", "```java\nSystem.out.println(subtract7.apply(11.0));   //prints: 4\n```", "```java\nlong r = multiplyByTwo.andThen(subtract7).apply(2.);\n```", "```java\nSystem.out.println(r);                       //prints: -3 \n```", "```java\nmultiplyByTwo = Function.identity();\n```", "```java\nSystem.out.println(multiplyByTwo.apply(2.)); //prints: 2.0;\n```", "```java\nr = multiplyByTwo.andThen(subtract7).apply(2.);\n```", "```java\nSystem.out.println(r);                      //prints: -5\n```", "```java\nint x = 7;\n```", "```java\n//x = 3; //compilation error\n```", "```java\nFunction<Integer, Integer> multiply = i -> i * x;\n```", "```java\nList<Integer> list = new ArrayList();\n```", "```java\nlist.add(7);\n```", "```java\nint x = list.get(0);\n```", "```java\nSystem.out.println(x);  // prints: 7\n```", "```java\nlist.set(0, 3);\n```", "```java\nx = list.get(0);\n```", "```java\nSystem.out.println(x);  // prints: 3\n```", "```java\nFunction<Integer, Integer> multiply = i -> i * list.get(0);\n```", "```java\nclass ThisDemo {\n```", "```java\n    private String field = \"ThisDemo.field\";\n```", "```java\n    public void useAnonymousClass() {\n```", "```java\n        Consumer<String> consumer = new Consumer<>() {\n```", "```java\n            private String field = \"Consumer.field\";\n```", "```java\n            public void accept(String s) {\n```", "```java\n                System.out.println(this.field);\n```", "```java\n            }\n```", "```java\n        };\n```", "```java\n        consumer.accept(this.field);\n```", "```java\n    }\n```", "```java\n    public void useLambdaExpression() {\n```", "```java\n        Consumer<String> consumer = consumer = s -> {\n```", "```java\n            System.out.println(this.field);\n```", "```java\n        };\n```", "```java\n        consumer.accept(this.field);\n```", "```java\n    }\n```", "```java\n}\n```", "```java\nThisDemo d = new ThisDemo();\n```", "```java\nd.useAnonymousClass();      //prints: Consumer.field\n```", "```java\nd.useLambdaExpression();    //prints: ThisDemo.field\n```", "```java\nSupplier<Integer> input = () -> 3;\n```", "```java\nPredicate<Integer> checkValue = d -> d < 5;\n```", "```java\nFunction<Integer, Double> calculate = i -> i * 5.0;\n```", "```java\nConsumer<Double> printResult = d -> System.out.println(\n```", "```java\n                                               \"Result: \" + d);\n```", "```java\nif(checkValue.test(input.get())){\n```", "```java\n    printResult.accept(calculate.apply(input.get()));\n```", "```java\n} else {\n```", "```java\n    System.out.println(\"Input \" + input.get() + \n```", "```java\n                                             \" is too small.\");\n```", "```java\n} \n```", "```java\nSupplier<Integer> input = () -> {\n```", "```java\n     // as many line of code here as necessary\n```", "```java\n     return 3;\n```", "```java\n};\n```", "```java\nPredicate<Integer> checkValue = d -> {\n```", "```java\n    // as many line of code here as necessary\n```", "```java\n    return d < 5;\n```", "```java\n};\n```", "```java\nFunction<Integer, Double> calculate = i -> {\n```", "```java\n    // as many lines of code here as necessary\n```", "```java\n    return i * 5.0;\n```", "```java\n};\n```", "```java\nConsumer<Double> printResult = d -> {\n```", "```java\n    // as many lines of code here as necessary\n```", "```java\n    System.out.println(\"Result: \" + d);\n```", "```java\n};\n```", "```java\nif(checkValue.test(input.get())){\n```", "```java\n    printResult.accept(calculate.apply(input.get()));\n```", "```java\n} else {\n```", "```java\n    System.out.println(\"Input \" + input.get() + \n```", "```java\n                                             \" is too small.\");\n```", "```java\n}\n```", "```java\nprivate int generateInput(){\n```", "```java\n    // Maybe many lines of code here\n```", "```java\n    return 3;\n```", "```java\n}\n```", "```java\nprivate static boolean checkValue(double d){\n```", "```java\n    // Maybe many lines of code here\n```", "```java\n    return d < 5;\n```", "```java\n}\n```", "```java\nclass Helper {\n```", "```java\n    public double calculate(int i){\n```", "```java\n        // Maybe many lines of code here\n```", "```java\n        return i* 5; \n```", "```java\n    }\n```", "```java\n    public static void printResult(double d){\n```", "```java\n        // Maybe many lines of code here\n```", "```java\n        System.out.println(\"Result: \" + d);\n```", "```java\n    }\n```", "```java\n}\n```", "```java\nSupplier<Integer> input = () -> generateInput();\n```", "```java\nPredicate<Integer> checkValue = d -> checkValue(d);\n```", "```java\nFunction<Integer, Double> calculate = i -> new Helper().calculate(i);\n```", "```java\nConsumer<Double> printResult = d -> Helper.printResult(d);\n```", "```java\nif(checkValue.test(input.get())){\n```", "```java\n    printResult.accept(calculate.apply(input.get()));\n```", "```java\n} else {\n```", "```java\n    System.out.println(\"Input \" + input.get() + \n```", "```java\n                                             \" is too small.\");\n```", "```java\n}\n```", "```java\nSupplier<Integer> input = this::generateInput;\n```", "```java\nPredicate<Integer> checkValue = MethodReferenceDemo::checkValue;\n```", "```java\nFunction<Integer, Double> calculate = new Helper()::calculate;\n```", "```java\nConsumer<Double> printResult = Helper::printResult;\n```", "```java\nif(checkValue.test(input.get())){\n```", "```java\n    printResult.accept(calculate.apply(input.get()));\n```", "```java\n} else {\n```", "```java\n    System.out.println(\"Input \" + input.get() + \n```", "```java\n                                             \" is too small.\");\n```", "```java\n}\n```"]