["```java\nRGBY 0/0\nGRWb 0/2\nYBbW 0/2\nBYGR 0/4\nRGYB 2/2\nRGBY 4/0\n\n```", "```java\npackage packt.java9.by.example.mastermind; \npublic class Color {}\n\n```", "```java\npackage packt.java9.by.example.mastermind; \n\n import java.util.HashMap; \n import java.util.Map; \n\n public class ColorManager { \n     final protected int nrColors; \n     final protected Map<Color, Color> successor = new HashMap<>(); \n     final private Color first; \n\n     public ColorManager(int nrColors) { \n         this.nrColors = nrColors; \n         first = new Color(); \n         Color previousColor = first; \n\n         for (int i = 1; i < nrColors; i++) { \n             final Color thisColor = new Color(); \n             successor.put(previousColor, thisColor); \n             previousColor = thisColor; \n         } \n         successor.put(previousColor, Color.none); \n     } \n\n     public Color firstColor() { \n         return first; \n     } \n\n     boolean thereIsNextColor(Color color) { \n         return successor.get(color) != Color.none; \n     } \n\n     public Color nextColor(Color color) { \n         return successor.get(color); \n     } \n }\n\n```", "```java\nfor( E element : collection ){...}\n\n```", "```java\nprivate boolean isNotUniqueWithSet(Color[] guess) { \n     final Set<Color> alreadyPresent = new HashSet<>(); \n     for (Color color : guess) { \n         if (alreadyPresent.contains(color)) { \n             return true; \n         } \n         alreadyPresent.add(color); \n     } \n     return false; \n }\n\n```", "```java\n@Override \n public boolean equals(Object o) { \n     if (this == o) return true; \n     if (o == null || getClass() != o.getClass()) return false; \n     MyObjectJava7 that = (MyObjectJava7) o; \n     return Objects.equals(field1, that.field1) && \n             Objects.equals(field2, that.field2) && \n             Objects.equals(field3, that.field3); \n }\n\n```", "```java\n@Override \n public int hashCode() { \n     return Objects.hash(field1, field2, field3); \n }\n\n```", "```java\nfinal protected int nrColors; \n final protected Map<Color, Color> successor = new HashMap<>(); \n final private Color first; \n\n public ColorManager(int nrColors) { \n     this.nrColors = nrColors; \n     first = new Color(); \n     Color previousColor = first; \n\n     for (int i = 1; i < nrColors; i++) { \n         final Color thisColor = new Color(); \n         successor.put(previousColor, thisColor); \n         previousColor = thisColor; \n     } \n     successor.put(previousColor, Color.none); \n }\n\n```", "```java\npublic Color nextColor(Color color) { \n     if (color == Color.none) \n         return null; \n     else \n         return colors.get(colors.indexOf(color) + 1); \n }\n\n```", "```java\nfinal List<Color> colors = new ArrayList<>(); \n\n     public ColorManager(int nrColors) { \n         this.nrColors = nrColors; \n         for (int i = 0; i < nrColors; i++) { \n             colors.add(new Color()); \n         } \n         colors.add(Color.none); \n     } \n\n     public Color firstColor() { \n         return colors.get(0); \n     }\n\n```", "```java\npackage packt.java9.by.example.mastermind; \n\n /** \n  * Represents a color in the MasterMind table. \n  */ \n public class Color { \n     /** \n      * A special object that represents a \n      * value that is not a valid color. \n      */ \n     public static final Color none = new Color(); \n }\n\n```", "```java\n/** \n  * A guess matches if all rows in the table matches the guess. \n  * \n  * @param guess to match against the rows \n  * @return true if all rows match \n  */ \n protected boolean guessMatch(Color[] guess) { \n     for (Row row : table.rows) { \n         if (!row.guessMatches(guess)) { \n             return false; \n         } \n     } \n     return true; \n }\n\n```", "```java\n* @param guess is the guess\n\n```", "```java\npackage packt.java9.by.example.mastermind; \n\n import java.util.Arrays; \n\n public class Row { \n     final Color[] positions; \n     private int matchedPositions; \n     private int matchedColors;\n\n```", "```java\n    public static final Row none = new Row(Guesser.none);\n\n```", "```java\n  public Row(Color[] positions) { \n         this.positions = Arrays.copyOf(positions, positions.length); \n     }\n\n```", "```java\n  public void setMatch(int matchedPositions, int matchedColors) { \n         if (matchedColors + matchedPositions > positions.length) { \n             throw new IllegalArgumentException( \n                     \"Number of matches can not be more that the position.\"); \n         } \n         this.matchedColors = matchedColors; \n         this.matchedPositions = matchedPositions; \n     }\n\n```", "```java\npublic boolean guessMatches(Color[] guess) { \n     return nrMatchingColors(guess) == matchedColors && \n             nrMatchingPositions(guess) == matchedPositions; \n }\n\n```", "```java\nif (!row.guessMatches(guess)) {\n\n```", "```java\nif( !(nrMatchingColors(guess) == matchedColors && nrMatchingPositions(guess) == matchedPositions)) {\n\n```", "```java\n  public int nrMatchingColors(Color[] guess) { \n         int count = 0; \n         for (int i = 0; i < guess.length; i++) { \n             for (int j = 0; j < positions.length; j++) { \n                 if (i != j && guess[i] == positions[j]) { \n                     count++; \n                 } \n             } \n         } \n         return count; \n     }\n\n```", "```java\npublic int nrMatchingPositions(Color[] guess) { \n         int count = 0; \n         for (int i = 0; i < guess.length; i++) { \n             if (guess[i] == positions[i]) { \n                 count++; \n             } \n         } \n         return count; \n     }\n\n```", "```java\npublic int nrOfColumns() { \n     return positions.length; \n }\n\n```", "```java\n  public int nrColumns() { \n         return positions.length; \n     } \n\n     public Color position(int i) { \n         return positions[i]; \n     } \n\n     public int matchedPositions() { \n         return matchedPositions; \n     } \n\n     public int matchedColors() { \n         return matchedColors; \n     } \n }\n\n```", "```java\npublic class PrintableRow extends Row { \n     public PrintableRow(Row row) { \n         super(row.positions); \n         super.setMatch(row.matchedPositions,row.matchedColors); \n     } \n // the methods are deleted from the print ... \n }\n\n```", "```java\nprotected Row(Row cloneFrom) { \n     this(cloneFrom.positions); \n     setMatch(cloneFrom.matchedPositions, cloneFrom.matchedColors); \n }\n\n```", "```java\npublic class Table { \n     final ColorManager manager; \n     final int nrColumns; \n     final List<Row> rows; \n\n     public Table(int nrColumns, ColorManager manager) { \n         this.nrColumns = nrColumns; \n         this.rows = new LinkedList<>(); \n         this.manager = manager; \n     } \n\n     public void addRow(Row row) { \n         rows.add(row); \n     } \n }\n\n```", "```java\npackage packt.java9.by.example.mastermind; \n\n public abstract class Guesser { \n     protected final Table table; \n     private final ColorManager manager; \n     public Guesser(Table table) { \n         this.table = table; \n         this.lastGuess = new Color[table.nrColumns]; \n         this.manager = table.manager; \n     }\n\n```", "```java\n    abstract protected void setFirstGuess();\n\n```", "```java\n    protected final Color[] lastGuess; \n    public static final Color[] none = new Color[]{Color.none};\n\n```", "```java\n  protected Color[] nextGuess() { \n         if (lastGuess[0] == null) { \n             setFirstGuess(); \n             return lastGuess; \n         } else { \n             return nextNonFirstGuess(); \n         } \n     }\n\n```", "```java\n  private Color[] nextNonFirstGuess() { \n         int i = 0; \n         boolean guessFound = false; \n         while (i < table.nrColumns && !guessFound) { \n             if (manager.thereIsNextColor(lastGuess[i])) { \n                 lastGuess[i] = manager.nextColor(lastGuess[i]); \n                 guessFound = true; \n             } else { \n                 lastGuess[i] = manager.firstColor(); \n                 i++; \n             } \n         } \n         if (guessFound) { \n             return lastGuess; \n         } else { \n             return none; \n         } \n     }\n\n```", "```java\nprivate Color[] nextNonFirstGuess() { \n     int i = 0; \n     while (i < table.nrColumns) { \n         if (manager.thereIsNextColor(lastGuess[i])) { \n             lastGuess[i] = manager.nextColor(lastGuess[i]); \n             return lastGuess; \n         } else { \n             lastGuess[i] = manager.firstColor(); \n             i++; \n         } \n     } \n     return none; \n }\n\n```", "```java\n    private boolean guessMatch(Color[] guess) { \n         for (Row row : table.rows) { \n             if (!row.guessMatches(guess)) { \n                 return false; \n             } \n         } \n         return true; \n     } \n     private boolean guessDoesNotMatch(Color[] guess) { \n         return !guessMatch(guess); \n     }\n\n```", "```java\npublic Row guess() { \n         Color[] guess = nextGuess(); \n         while (guess != none && guessDoesNotMatch(guess)) { \n             guess = nextGuess(); \n         } \n         if (guess == none) { \n             return Row.none; \n         } else { \n             return new Row(guess); \n         } \n     } \n\n }\n\n```", "```java\npackage packt.java9.by.example.mastermind; \n\n import java.util.HashSet; \n import java.util.Set; \n\n public class UniqueGuesser extends Guesser { \n\n     public UniqueGuesser(Table table) { \n         super(table); \n     } \n\n     @Override \n     protected void setFirstGuess() { \n         int i = lastGuess.length-1; \n         for (Color color = table.manager.firstColor(); \n              i >= 0; \n              color = table.manager.nextColor(color)) { \n             lastGuess[i--] = color; \n         } \n     }\n\n```", "```java\n   private boolean isNotUnique(Color[] guess) { \n         final Set<Color> alreadyPresent = new HashSet<>(); \n         for (Color color : guess) { \n             if (alreadyPresent.contains(color)) { \n                 return true; \n             } \n             alreadyPresent.add(color); \n         } \n         return false; \n     }\n\n```", "```java\n     @Override \n     protected Color[] nextGuess() { \n         Color[] guess = super.nextGuess(); \n         while (isNotUnique(guess)) { \n             guess = super.nextGuess(); \n         } \n         return guess; \n     } \n\n```", "```java\npackage packt.java9.by.example.mastermind; \n\npublic class GeneralGuesser extends Guesser { \n\n     public GeneralGuesser(Table table) { super(table); } \n\n     @Override \n     protected void setFirstGuess() { \n         int i = 0; \n         for (Color color = table.manager.firstColor();  \n                                    i < lastGuess.length; ) { \n             lastGuess[i++] = color; \n         } \n     } \n\n }\n\n```", "```java\npackage packt.java9.by.example.mastermind; \n\n public class Game { \n\n     final Table table; \n     final private Row secretRow; \n     boolean finished = false; \n\n     public Game(Table table, Color[] secret ) { \n         this.table = table; \n         this.secretRow = new Row(secret); \n     } \n\n     public void addNewGuess(Row row) { \n         if( isFinished()){ \n             throw new IllegalArgumentException( \n                        \"You can not guess on a finished game.\"); \n         } \n         final int positionMatch = secretRow. \n                           nrMatchingPositions(row.positions); \n         final int colorMatch = secretRow. \n                           nrMatchingColors(row.positions); \n         row.setMatch(positionMatch, colorMatch); \n         table.addRow(row); \n         if( positionMatch == row.nrOfColumns() ){ \n             finished = true; \n         } \n     } \n\n     public boolean isFinished() { \n         return finished; \n     } \n }\n\n```", "```java\npackage packt.java9.by.example.mastermind; \n\n import java.util.HashMap; \n import java.util.Map; \n\n public class PrettyPrintRow { \n\n     private static final Map<Color, Character> \n             letterMapping = new HashMap<>(); \n     private static final String letters = \"RGBYWb\"; \n     private static int counter = 0; \n\n     private static char colorToChar(Color color) { \n         if (!letterMapping.containsKey(color)) { \n             letterMapping.put(color, letters.charAt(counter)); \n             counter++; \n\n         } \n         return letterMapping.get(color); \n     }\n\n```", "```java\n   public static String pprint(Row row) { \n         String string = \"\"; \n         PrintableRow pRow = new PrintableRow(row); \n         for (int i = 0; i < pRow.nrOfColumns(); i++) { \n             string += colorToChar(pRow.position(i)); \n         } \n         string += \" \"; \n         string += pRow.matchedPositions(); \n         string += \"/\"; \n         string += pRow.matchedColors(); \n         return string; \n     }\n\n```", "```java\npackage packt.java9.by.example.mastermind.integration; \n\n import org.junit.Assert; \n import org.junit.Test; \n import packt.java9.by.example.mastermind.*; \n\n public class IntegrationTest { \n\n     final int nrColors = 6; \n     final int nrColumns = 4; \n     final ColorManager manager = new ColorManager(nrColors); \n\n     private Color[] createSecret() { \n         Color[] secret = new Color[nrColumns]; \n         int count = 0; \n         Color color = manager.firstColor(); \n         while (count < nrColors - nrColumns) { \n             color = manager.nextColor(color); \n             count++; \n         } \n         for (int i = 0; i < nrColumns; i++) { \n             secret[i] = color; \n             color = manager.nextColor(color); \n         } \n         return secret; \n     } \n\n     @Test \n     public void testSimpleGame() { \n         Table table = new Table(nrColumns, manager); \n         Color[] secret = createSecret(); \n         System.out.println( \n             PrettyPrintRow.pprint(new Row(secret))); \n         System.out.println(); \n         Game game = new Game(table, secret); \n\n         Guesser guesser = new UniqueGuesser(table); \n         while (!game.isFinished()) { \n             Row guess = guesser.guess(); \n             if (guess == Row.none) { \n                 Assert.fail(); \n             } \n             game.addNewGuess(guess); \n             System.out.println(PrettyPrintRow.pprint(guess)); \n         } \n     } \n }\n\n```", "```java\nRGBY 0/0\nGRWb 0/2\nYBbW 0/2\nBYGR 0/4\nRGYB 2/2\nRGBY 4/0\n\n```"]