- en: Passing Data Between the View and the Controller
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在视图和控制器之间传递数据
- en: In this chapter, we will learn about creating HTML forms for data acquisition.
    Once the data is acquired, we will then examine it. Lastly, we will examine the
    types of fields used to store the data.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习创建HTML表单以获取数据。一旦获取数据，我们将检查它。最后，我们将检查用于存储数据的字段类型。
- en: An HTML form or web form is a document designed to collate data from a web page
    so that it can be stored or sent to a server for processing. These forms use different
    types of elements such as checkboxes, radio buttons, and text fields to accept
    various types of numerical or textual data. They can also include interactive
    elements such as buttons.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: HTML表单或Web表单是一个旨在从网页收集数据以便存储或发送到服务器进行处理的文档。这些表单使用不同类型的元素，如复选框、单选按钮和文本字段，以接受各种类型的数值或文本数据。它们还可以包括按钮等交互式元素。
- en: 'By the end of this chapter, you will be able to:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将能够：
- en: Create HTML forms to acquire user input
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建HTML表单以获取用户输入
- en: Interpret user input in your Spring controller
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的Spring控制器中解释用户输入
- en: Examine the data entered into a form
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查表单中输入的数据
- en: Explain different kinds of fields to enter information in the browser
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释在浏览器中输入信息的不同类型的字段
- en: Form Handling
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表单处理
- en: When using web applications, there is usually a way to enter data. For example,
    an address book application would allow the user to enter contact information
    into a form and to store the input in a database. Data that is entered into a
    form is usually made up of pieces of information that are related to one another.
    For example, you could think of personal data, an address, or a bank account.
    HTML offers a construct called forms to allow the update or the input of data.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用Web应用程序时，通常有方法可以输入数据。例如，一个地址簿应用程序会允许用户将联系信息输入到表单中，并将输入存储在数据库中。输入到表单中的数据通常由相互关联的信息片段组成。例如，你可以想到个人信息、地址或银行账户。HTML提供了一个名为表单的构造，以便允许更新或输入数据。
- en: HTML Forms
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML表单
- en: 'The following snippet shows a very simple HTML form:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的摘录显示了一个非常简单的HTML表单：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Post Data Handling
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理POST数据
- en: When data is entered into a web page, it has to be transmitted to the server
    for further processing somehow. For this purpose, the HTTP protocol that is used
    for the communication between the browser; and the server implements a method
    to achieve this task.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当数据输入到网页时，必须以某种方式将其传输到服务器进行进一步处理。为此，用于浏览器和服务器之间通信的HTTP协议实现了一个方法来完成这项任务。
- en: When a form is submitted, the browser will generate a so-called request that
    contains all entered data as key-value pairs in the body of the request.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当表单提交时，浏览器将生成一个所谓的请求，其中包含所有输入数据作为请求正文中的键值对。
- en: 'For example, if `title` has a value of My First Blog Post and `content` is
    set to `Hello World`, the request contains the following body:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果`title`的值为My First Blog Post，而`content`设置为`Hello World`，则请求包含以下正文：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Creating a Form Template
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建表单模板
- en: Since we are using Thymeleaf to render the HTML page, we need a way to display
    data from the model while the view is rendered. On the other hand, the values
    that are submitted have to become part of the model that is processed by the controller.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在使用Thymeleaf来渲染HTML页面，我们需要一种方法在视图渲染时显示模型中的数据。另一方面，提交的值必须成为控制器处理的模型的一部分。
- en: Simple Input Field
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简单输入字段
- en: 'Let''s say you want to ask for the given title of a blog post. In this case,
    you would define your input field as in the following snippet, which is an excerpt
    from the file present at  [https://bit.ly/2D6fkpQ](https://bit.ly/2D6fkpQ):'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想要求一个博客文章的给定标题。在这种情况下，你将定义你的输入字段如下，这是文件中摘录的一部分，文件位于[https://bit.ly/2D6fkpQ](https://bit.ly/2D6fkpQ)：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This will set the model attribute named title as the value of the input field.
    Upon submission, a request parameter also named title will be passed to the controller.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这将设置名为title的模型属性为输入字段的值。提交时，也将传递一个名为title的请求参数到控制器。
- en: In this case, you are using `th:value` or `th:text`, depending on the kind of
    input field you are using. For example, an `<input>` field expects the value to
    be present in the value attribute, while a `<textarea>` requires the pre-defined
    value to be present as its content.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，你使用`th:value`或`th:text`，具体取决于你使用的输入字段类型。例如，`<input>`字段期望值存在于值属性中，而`<textarea>`需要预定义的值作为其内容。
- en: 'The controller is now able to access the submitted value as a request parameter:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器现在能够作为请求参数访问提交的值：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Adding `required = false` to the parameter reference avoids an error being thrown
    when the parameter is missing from the request.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 将`required = false`添加到参数引用中，可以避免在请求中缺少参数时抛出错误。
- en: You can find the source of the full class in [https://bit.ly/2Fx6rbI](https://bit.ly/2Fx6rbI) file.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://bit.ly/2Fx6rbI](https://bit.ly/2Fx6rbI)文件中找到完整类的源代码。
- en: This is a very cumbersome and error-prone method since you have to add a lot
    of attributes manually and are required to repeat the name of the field multiple
    times.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 由于您必须手动添加大量属性并多次重复字段名称，因此这是一个非常繁琐且容易出错的办法。
- en: Fortunately, there is an easier way to pass the model or its attributes between
    the controller and the view in both directions, as we will see soon.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，有一种更简单的方法可以在控制器和视图之间双向传递模型或其属性，我们很快就会看到。
- en: Implementing Thymeleaf Form Syntax
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现Thymeleaf表单语法
- en: The aim is to implement the Thymeleaf Form Syntax on a website.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是在网站上实现Thymeleaf表单语法。
- en: 'The steps for completion are as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 完成步骤如下：
- en: Open the project located at [https://bit.ly/2p38GIR](https://bit.ly/2p38GIR).
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开位于[https://bit.ly/2p38GIR](https://bit.ly/2p38GIR)的项目。
- en: 'Open the `BlogPostController` class and insert the following handling method:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`BlogPostController`类，并插入以下处理方法：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Open the `src/main/resource/templates/form-multiple-values.html` file and insert
    the following form definition:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`src/main/resource/templates/form-multiple-values.html`文件，并插入以下表单定义：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Go to [https://bit.ly/2xec8E6](https://bit.ly/2xec8E6) to access the complete
    code for the form definition code example.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 访问[https://bit.ly/2xec8E6](https://bit.ly/2xec8E6)以访问表单定义代码示例的完整代码。
- en: Start the application by using the `mvnw spring-boot:run` command.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`mvnw spring-boot:run`命令启动应用程序。
- en: 'Use your browser to open the URL `http://localhost:8080/blogposts/new-multiple-values`
    to view the following output:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的浏览器打开URL `http://localhost:8080/blogposts/new-multiple-values`以查看以下输出：
- en: '![](img/96b8da72-1ee8-4e7c-b0a0-0af691f5a5a2.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/96b8da72-1ee8-4e7c-b0a0-0af691f5a5a2.png)'
- en: Now, enter the details and click on Submit.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，输入详细信息并点击提交。
- en: 'You should now see the following page, summarizing the values you''ve entered:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您现在应该看到以下页面，总结您输入的值：
- en: '![](img/2c7753d5-0b8d-4ef2-a2af-4c42e18e5503.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2c7753d5-0b8d-4ef2-a2af-4c42e18e5503.png)'
- en: With this, you have utilized the Thymeleaf Form Syntax on a website to indicate
    the blog post's status.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，您已经在网站上利用了Thymeleaf表单语法来指示博客文章的状态。
- en: Go to [https://bit.ly/2x6VwPp](https://bit.ly/2x6VwPp) to access the code for
    the `formmultiple-values.html` file.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 访问[https://bit.ly/2x6VwPp](https://bit.ly/2x6VwPp)以访问`formmultiple-values.html`文件的代码。
- en: Go to [https://bit.ly/2CPfkfp](https://bit.ly/2CPfkfp) to access the code for
    the `FormhandlingIntroApplication.java` file.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 访问[https://bit.ly/2CPfkfp](https://bit.ly/2CPfkfp)以访问`FormhandlingIntroApplication.java`文件的代码。
- en: Go to [https://bit.ly/2p38GIR](https://bit.ly/2p38GIR) to access the folder
    for `form-handling/`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 访问[https://bit.ly/2p38GIR](https://bit.ly/2p38GIR)以访问`form-handling/`文件夹。
- en: Form-Backing Beans
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表单后端Bean
- en: In a web application that uses web pages to manipulate data, you want to keep
    the information tightly coupled by using an object or a form-backing Bean that
    you can pass between the view and the controller. This kind of Bean provides getters
    and setters to access the value for each field in the form. In Spring MVC, this
    kind of object is called a **Command**.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用网页操作数据的Web应用程序中，您想通过使用可以在视图和控制器之间传递的对象或表单后端Bean来紧密耦合信息。这种类型的Bean提供了获取器和设置器来访问表单中每个字段的值。在Spring
    MVC中，这种类型的对象被称为**命令**。
- en: 'The following code snippet shows a sample command class backing a form to display
    and modify a blog post. Please note the usage of Project Lombok to avoid boilerplate
    code for the constructor, getters, and setters:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段显示了一个示例命令类，它支持表单以显示和修改博客文章。请注意Project Lombok的使用，以避免构造函数、获取器和设置器的样板代码：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As you may have noticed, this looks like a regular Java Bean; and indeed there
    is no difference between a Java Bean and a Spring MVC command class.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所注意到的，这看起来像是一个常规的Java Bean；事实上，Java Bean和Spring MVC命令类之间没有区别。
- en: Populating a Form Bean for Editing
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为编辑填充表单Bean
- en: Previously, we were binding single values of the model to fields of the form.
    When the form Bean has a lot of attributes, it can become quite cumbersome to
    repeat the name of the model attribute multiple times for each field.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前，我们曾将模型的单个值绑定到表单的字段。当表单Bean有很多属性时，为每个字段重复模型属性名称可能会变得相当繁琐。
- en: 'Since accessing values from a form-backing Bean is a very common task, Thymeleaf
    provides the `th:object` attribute in `<form>` tags to specify the command object
    that will be accessed throughout the whole form:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 由于从表单后端Bean访问值是一个非常常见的任务，Thymeleaf在`<form>`标签中提供了`th:object`属性来指定将在整个表单中访问的命令对象：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: After the object has been set for the form, the Thymeleaf expression `*{...}`
    allows you to access the fields of that object without referencing the model attribute
    repeatedly.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在为表单设置对象之后，Thymeleaf表达式`*{...}`允许你访问该对象的字段，而无需反复引用模型属性。
- en: Please note that there are limitations when using this attribute. It is required
    to use a variable expression `(${...})` specifying the name of the model attribute
    without any property navigation. This means that `${blogPostCommand}` is perfectly
    fine, while `${pageData.blogPostCommand}` would lead to an error. Also, no other
    `th:object` attributes are allowed inside a form.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在使用此属性时存在限制。必须使用变量表达式`(${...})`指定模型属性名称，而不进行任何属性导航。这意味着`${blogPostCommand}`是完全可以接受的，而`${pageData.blogPostCommand}`会导致错误。此外，表单内不允许有其他`th:object`属性。
- en: Starting with Form Data Processing
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从表单数据处理开始
- en: 'The aim is to use form data processing to create a blog post with a backing
    Bean. The steps for completion are as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是使用表单数据处理来创建一个带有后端Bean的博客文章。完成步骤如下：
- en: Open the project located at [https://bit.ly/2p38GIR](https://bit.ly/2p38GIR).
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开位于[https://bit.ly/2p38GIR](https://bit.ly/2p38GIR)的项目。
- en: 'Open the `CreateBlogPostCommand` class and complete the class as follows:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`CreateBlogPostCommand`类，并按以下方式完成类：
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Open the `BlogPostController` class and insert the following handling methods:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`BlogPostController`类，并插入以下处理方法：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Open the `src/main/resource/templates/form-backing-bean.html` file and insert
    the following form definition:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`src/main/resource/templates/form-backing-bean.html`文件，并插入以下表单定义：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Go to [https://bit.ly/2NJ5IqO](https://bit.ly/2NJ5IqO) to access the complete
    code for the form definition code example.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 前往[https://bit.ly/2NJ5IqO](https://bit.ly/2NJ5IqO)以访问表单定义代码示例的完整代码。
- en: Start the application by using the `mvnw spring-boot:run` command.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用`mvnw spring-boot:run`命令启动应用程序。
- en: 'Use your browser to open the URL `http://localhost:8080/blogposts/new-backing-bean`
    to view the output:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你的浏览器打开URL `http://localhost:8080/blogposts/new-backing-bean` 来查看输出：
- en: '![](img/71195786-ce49-4f80-8f85-614d99a7de19.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/71195786-ce49-4f80-8f85-614d99a7de19.png)'
- en: Now enter the details and click on Submit.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在输入详细信息并点击提交。
- en: 'View the following screenshot, summarizing the values you''ve entered:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看以下截图，总结你输入的值：
- en: '![](img/247d91e4-6d4b-4977-a328-523053121e23.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/247d91e4-6d4b-4977-a328-523053121e23.png)'
- en: With this, you have utilized form data processing to create a blog post with
    a backing Bean.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种方式，你已经利用表单数据处理创建了一个带有后端Bean的博客文章。
- en: Go to [https://bit.ly/2D3aziP](https://bit.ly/2D3aziP) to access the complete
    code for the `FormhandlingIntroApplication.java` example.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 前往[https://bit.ly/2D3aziP](https://bit.ly/2D3aziP)以访问`FormhandlingIntroApplication.java`示例的完整代码。
- en: Go to [https://bit.ly/2p38GIR](https://bit.ly/2p38GIR) to access the `form-handling/`
    folder.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 前往[https://bit.ly/2p38GIR](https://bit.ly/2p38GIR)以访问`form-handling/`文件夹。
- en: Bean Validation
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Bean验证
- en: When it comes to acquiring data, there are usually constraints regarding the
    validity of values. This can be a technical constraint (it has to be a number)
    or a business constraint (21 years or older). For this kind of validation, there
    is a framework called Bean Validation for JVM languages such as Java.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到获取数据时，通常会有关于值有效性的约束。这可能是一个技术约束（它必须是一个数字）或业务约束（21岁或以上）。对于这种验证，有一个名为Bean Validation的框架，适用于Java等JVM语言。
- en: If you want to get more information about the Java Bean Validation framework,
    you can visit the homepage of the project at
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于Java Bean验证框架的信息，你可以访问项目的首页
- en: '[http://beanvalidation.org/](http://beanvalidation.org/), which is a very good
    starting point.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://beanvalidation.org/](http://beanvalidation.org/)，这是一个非常好的起点。'
- en: Covering the Bean Validation framework is outside the scope of this book. However,
    the basic concept is that annotations are used to define the constraints of properties
    in a Java Bean. Validators are then used to perform the actual validation.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖Bean Validation框架超出了本书的范围。然而，基本概念是使用注解定义Java Bean中属性的约束。然后使用验证器执行实际的验证。
- en: 'The following code snippet shows an example of a Java Bean that can be validated:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段展示了可以验证的Java Bean的示例：
- en: '[PRE11]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Besides applying the annotations to the model classes, there is little that
    has to be done to validate the model. Most of the heavy lifting such as configuring
    the validation framework and calling the validator implementations is done by
    Spring. To finally perform the actual validation, the `@Validated` annotation
    is used in the controller method:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 除了将注解应用于模型类之外，验证模型几乎不需要做任何事情。大部分繁重的工作，如配置验证框架和调用验证器实现，都是由Spring完成的。为了最终执行实际的验证，在控制器方法中使用`@Validated`注解：
- en: '[PRE12]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As with many frameworks that have been adopted by Spring Boot, you can either
    use the Spring annotation (`@Validated`) or the annotation of the original project
    (`@Valid`).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 与Spring Boot采用的大多数框架一样，您可以使用Spring注解（`@Validated`）或原始项目的注解（`@Valid`）。
- en: Besides the `@Validated` annotation, this code also shows the usage of the `BindingResult`
    class, which is also passed in as a parameter. The `bindingResult` parameter is
    used to determine whether any validation constraint had been violated in the previous
    request. In the preceding example, another view will be rendered in case of validation
    errors than in the case of data being entered correctly. Usually, the view containing
    the original form will be used in those cases.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`@Validated`注解外，此代码还展示了`BindingResult`类的使用，该类也作为参数传递。`bindingResult`参数用于确定在先前的请求中是否有任何验证约束被违反。在先前的示例中，如果发生验证错误，将渲染另一个视图，而不是数据输入正确的情况。通常，在这些情况下将使用包含原始表单的视图。
- en: In general, adding the `BindingResult` to the controller method is optional.
    However, if it is missing or not following immediately after the model attribute
    to be validated, a generic error page will be shown. The reason for this is that
    Spring MVC determines that the controller method is not able to handle the validation
    error and therefore turns to the general error handler for bad requests.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，将`BindingResult`添加到控制器方法中是可选的。然而，如果它缺失或没有紧跟在要验证的模型属性之后，将显示一个通用的错误页面。原因是Spring
    MVC确定控制器方法无法处理验证错误，因此转向通用错误处理器以处理不良请求。
- en: Adding Validation Messages to Templates
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将验证消息添加到模板中
- en: When the user enters invalid information, it is a good practice to inform the
    user about this. Usually, this is done by showing additional information about
    what the application expects. It is even possible to modify the styling of the
    input field of the affected values by turning it red, for example.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户输入无效信息时，通知用户这一点是一个好的做法。通常，这是通过显示应用程序期望的额外信息来完成的。甚至可以修改受影响值的输入字段的样式，例如将其变为红色。
- en: 'For this case, Thymeleaf offers multiple tools to show these kinds of errors.
    The following lists shows some examples for a model attribute or a field named
    title:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这种情况，Thymeleaf提供了多种工具来显示这些类型的错误。以下列出了一些名为title的模型属性或字段的示例：
- en: '![](img/71e7d4be-b86c-4bc6-9cc3-50f5101262dd.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/71e7d4be-b86c-4bc6-9cc3-50f5101262dd.png)'
- en: If a constraint is violated and a message should be shown, the Bean Validation
    framework provides a default error message.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果违反了约束并且应该显示消息，Bean Validation框架提供了一个默认的错误消息。
- en: Utilizing Spring's Validation Facilities
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用Spring的验证功能
- en: 'The aim is to validate data using Spring and Thymeleaf. The steps for completion
    are as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是使用Spring和Thymeleaf验证数据。完成步骤如下：
- en: Open the project located at [https://bit.ly/2p38GIR](https://bit.ly/2p38GIR).
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开位于[https://bit.ly/2p38GIR](https://bit.ly/2p38GIR)的项目。
- en: 'Open the `CreateValidatedBlogPostCommand` class and complete the class as follows:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`CreateValidatedBlogPostCommand`类，并按以下方式完成该类：
- en: '[PRE13]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Open the `BlogPostController` class and insert the following handling methods:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`BlogPostController`类，并插入以下处理方法：
- en: '[PRE14]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Open the `src/main/resource/templates/form-validated-bean.html` file and insert
    the following form:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`src/main/resource/templates/form-validated-bean.html`文件，并插入以下表单：
- en: '[PRE15]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Go to [https://bit.ly/2Ofv2Su](https://bit.ly/2Ofv2Su) to access the code for
    the form.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 前往[https://bit.ly/2Ofv2Su](https://bit.ly/2Ofv2Su)以访问表单的代码。
- en: Start the application by using the `mvnw spring-boot:run` command.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`mvnw spring-boot:run`命令启动应用程序。
- en: 'Use your browser to open the URL `http://localhost:8080/blogposts/new-validated-bean`
    to obtain the following output page:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的浏览器打开URL `http://localhost:8080/blogposts/new-validated-bean`以获取以下输出页面：
- en: '![](img/73cd8853-ce20-47de-ba60-8cfea03b58a0.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/73cd8853-ce20-47de-ba60-8cfea03b58a0.png)'
- en: Now enter the details and click on Submit.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在输入详细信息并点击提交。
- en: 'You should now see the following page, summarizing the values you''ve entered:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您现在应该看到以下页面，总结您输入的值：
- en: '![](img/034094f0-ce28-4a6c-b221-c724d58eeea3.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/034094f0-ce28-4a6c-b221-c724d58eeea3.png)'
- en: With this, you have utilized Spring's built-in validation feature to test the
    data.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，您已经利用了Spring的内置验证功能来测试数据。
- en: Go to [https://bit.ly/2p4Sgjo](https://bit.ly/2p4Sgjo) to access the complete
    code for the `FormhandlingIntroApplication.java` file.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 前往[https://bit.ly/2p4Sgjo](https://bit.ly/2p4Sgjo)访问`FormhandlingIntroApplication.java`文件的完整代码。
- en: Customizing Validation Messages
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义验证消息
- en: Out of the box, the Bean Validation framework provides messages for the most
    common kinds of validation constraint violations. However, in many cases, you
    want to customize these messages or provide the messages in multiple languages.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Bean验证框架为最常见的验证约束违规提供了消息。然而，在许多情况下，您可能想要自定义这些消息或提供多语言的消息。
- en: Each validation annotation also includes a message property that can be used
    to set a custom message. This could be done via a static message that is directly
    encoded into the source.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 每个验证注解还包括一个消息属性，可以用来设置自定义消息。这可以通过直接编码到源代码中的静态消息来完成。
- en: For example, `@Size(min = 3, max = 60, message = "The size is incorrect")` would
    display the message. The size is incorrect if the corresponding field does not
    meet this requirement.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`@Size(min = 3, max = 60, message = "The size is incorrect")`将显示消息。如果相应的字段不满足此要求，则大小不正确。
- en: 'Instead of adding the message to the source code of the application, it is
    a much better practice to externalize the text. To achieve this, first, a `ValidationMessages.properties`
    file has to be created in the `src/main/resources folder`. Once created, the messages
    are added to this file with a unique message key. It is a good idea to follow
    a naming schema. An example could be the following message property:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 与将消息添加到应用程序的源代码相比，将文本外部化是一种更好的做法。为了实现这一点，首先需要在`src/main/resources`文件夹中创建一个`ValidationMessages.properties`文件。一旦创建，消息就会添加到这个文件中，并使用一个唯一的消息键。遵循命名约定是个好主意。以下是一个消息属性的示例：
- en: '[PRE16]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In the annotation, this message can then be addressed by enclosing the key
    in curly brackets:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在注释中，可以通过将键放在花括号中来引用此消息：
- en: '[PRE17]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The Validation Framework will automatically get the message from the `ValidationMessages.properties`
    file.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 验证框架将自动从`ValidationMessages.properties`文件中获取消息。
- en: Setting a New Default Message for a Validator
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为验证器设置新的默认消息
- en: 'Another way to customize the validation error message is to provide a new default
    error message for a validator. This is also done in the `ValidationMessages.properties`
    file. In this case, the full class name followed by .message is used as a properties
    key:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种自定义验证错误消息的方法是为验证器提供一个新的默认错误消息。这也在`ValidationMessages.properties`文件中完成。在这种情况下，使用全类名后跟.message作为属性键：
- en: '`javax.validation.constraints.NotBlank.message=This field must not`'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`javax.validation.constraints.NotBlank.message=This field must not`'
- en: '`be blank!`'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`be blank!`'
- en: In this case, all properties that are annotated with the `@NotBlank` annotation
    will use the provided message in case of a violation, as long as no implicit message
    was set using the message property of the annotation.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，所有使用`@NotBlank`注解注解的属性在违反规则的情况下将使用提供的信息，前提是没有使用注解的消息属性设置隐式消息。
- en: Setting the Message for a Bean Property
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为Bean属性设置消息
- en: The third way of setting a custom message is to specify the name of a property
    in the model. In contrast to the previous mechanisms that are provided by the
    Validation Framework, this one is handled by Spring MVC.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 设置自定义消息的第三种方式是在模型中指定属性的名称。与Validation Framework提供的先前机制相比，这一机制由Spring MVC处理。
- en: 'This time, the message is stored in the `src/main/resources/messages.properties`
    file. The following example demonstrates how the property key is built:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，消息存储在`src/main/resources/messages.properties`文件中。以下示例演示了如何构建属性键：
- en: '[PRE18]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: First, the name of the annotation used for validation is used (`@NotBlank`,
    in the example). This is followed by the model attribute name (in this case, it's
    `createValidatedBlogPostCommand`). Last, the path to the property within the model
    class is appended (the title property).
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，使用用于验证的注解名称（例如，`@NotBlank`）。然后是模型属性名称（在这种情况下，它是`createValidatedBlogPostCommand`）。最后，将模型类中属性的路径附加到后面（标题属性）。
- en: In the preceding example, the message "The title must not be blank!" would be
    shown if the title property of the `createValidatedBlogPostCommand` model attribute
    is blank. For any other field that is annotated with `@NotBlank`, the message
    would be determined depending on the previously described mechanisms.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，如果`createValidatedBlogPostCommand`模型属性的标题属性为空，则会显示消息“标题不能为空！”。对于任何其他带有`@NotBlank`注解的字段，消息将根据之前描述的机制确定。
- en: Providing Translation for Messages
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为消息提供翻译
- en: A final improvement that can be applied to the messages is to provide custom
    validation messages in multiple languages.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 可以应用于消息的最终改进是在多种语言中提供自定义验证消息。
- en: In addition to the default properties files, the messages.properties and `ValidationMessages.properties`
    files with the same name are followed by the language code. For example, `messages_de.properties`
    and `ValidationMessages_de.properties` will provide the German translations of
    all custom messages.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 除了默认属性文件外，具有相同名称的`messages.properties`和`ValidationMessages.properties`文件后面跟着语言代码。例如，`messages_de.properties`和`ValidationMessages_de.properties`将提供所有自定义消息的德语翻译。
- en: Modifying Validation Messages
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改验证消息
- en: The aim is to modify and translate the validation messages.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是修改和翻译验证消息。
- en: Open the project located at [https://bit.ly/2p38GIR](https://bit.ly/2p38GIR).
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开位于[https://bit.ly/2p38GIR](https://bit.ly/2p38GIR)的项目。
- en: 'Open the `src/main/resources/messages.properties` file and add the following
    line:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`src/main/resources/messages.properties`文件并添加以下行：
- en: '[PRE19]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Open the `src/main/resources/messages_de.properties` file and add the following
    line:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`src/main/resources/messages_de.properties`文件并添加以下行：
- en: '[PRE20]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Start the application by using the `mvnw spring-boot:run` command.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`mvnw spring-boot:run`命令启动应用程序。
- en: Use your browser to open the URL `http://localhost:8080/blogposts/new-validated-bean`.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的浏览器打开URL `http://localhost:8080/blogposts/new-validated-bean`。
- en: 'Clear the title field and submit the form to view the output:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清除标题字段并提交表单以查看输出：
- en: '![](img/103378f1-dbe9-4cd5-85fe-854335e2af23.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/103378f1-dbe9-4cd5-85fe-854335e2af23.png)'
- en: With this, you have customized the validation messages and provided translations
    for another language.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，您已自定义了验证消息，并为另一种语言提供了翻译。
- en: Go to [https://bit.ly/2p4Sgjo](https://bit.ly/2p4Sgjo) to access the complete
    code for the `FormhandlingIntroApplication.java` file.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 前往[https://bit.ly/2p4Sgjo](https://bit.ly/2p4Sgjo)访问`FormhandlingIntroApplication.java`文件的完整代码。
- en: Form Input Types and Value Binding
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表单输入类型和值绑定
- en: After looking at how data is passed between the view and controller, this section
    will enable us to use the different types of input fields that are part of HTML
    with the Thymeleaf template engine. These values of the fields need to be bound
    to the attributes of the model to be processed by the controller.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在查看数据如何在视图和控制器之间传递之后，本节将使我们能够使用HTML模板引擎Thymeleaf中的不同类型的输入字段。这些字段的值需要绑定到控制器要处理的模型属性。
- en: One important aspect of using HTML forms is that there is no distinction between
    text, numbers, or other types of values. Java, however, is based on a strong type
    system that requires an explicit type. For that reason, values have to be converted
    from or to a text representation. This task is accomplished by converter classes
    that are available for the most common Java types such as number, enumeration,
    or Boolean. Spring will automatically find the appropriate converter implementation
    to convert a value from or to a textual representation.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 使用HTML表单的一个重要方面是文本、数字或其他类型值之间没有区别。然而，Java基于强类型系统，需要显式类型。因此，值必须从或转换为文本表示。这项任务由可用的转换器类完成，这些类适用于最常见的Java类型，如数字、枚举或布尔值。Spring将自动找到适当的转换器实现，以将值从或转换为文本表示。
- en: More on type conversion and how to implement custom converters can be found
    in the Spring framework documentation at [https://docs.spring.io/spring/docs/current/spring-frameworkreference/core.html#core-convert](https://docs.spring.io/spring/docs/current/spring-frameworkreference/core.html#core-convert).
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: For the rest of this chapter, we will focus on the usage of commonly used form
    elements to gather user input in a Spring MVC web application with Thymeleaf.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: You can find all the sample code in the companion repository at [https://bit.ly/2QIcXxv](https://bit.ly/2QIcXxv).
    You can start the application by running `mvnw spring-boot:run` or using the IDE.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: Inputting Elements for Text or Number (text, hidden, password)
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following table lists the most common use cases for input fields:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9fba53c9-e95d-4e59-ae30-a74f5979dbfc.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
- en: 'The `.../src/main/resources/templates/inputform.html` file shows how the `<input>`
    tag is used in Thymeleaf. The most important attributes to notice are either `th:value`
    or `th:field` depending on how you need to address the model attribute:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: There are far more types available for input fields then what is being discussed
    here. However, the value that will be transmitted is always some kind of textual
    representation. For a comprehensive list of these types and their usage, the **Mozilla
    Developer Documentation** (**MDN**) for the input field at [https://developer.mozilla.org/en/docs/Web/HTML/Element/Input](https://developer.mozilla.org/en/docs/Web/HTML/Element/Input)
    or [https://html.spec.whatwg.org/multipage/forms.html](https://html.spec.whatwg.org/multipage/forms.html)
    are good starting points.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: Inputting Elements for Selections (Checkbox, Radio)
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another group of input fields we will now discuss are those used to select a
    single option by turning it, selecting it, or deselecting it, or choosing one
    element from a list of options.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '**Checkboxes**: Commonly uses Boolean values when enabling or disabling an
    option.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '**Radio buttons**: Commonly use plain text or numbers when selecting one value
    from a list of options.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: 'When it comes to radio elements, it is important that all input fields belonging
    to the same group are also referring to by the same field or attribute of our
    model. Therefore, each input element will have the same `th:field` attribute attached
    to it:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In the preceding example from the `.../src/main/resources/templates/inputform.html` file,
    you can see that both radio fields reference the field called `radioValue`. Since
    Thymeleaf will handle the field naming, the HTML name attribute can be omitted.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: 'Writing long lists of radio options can become quite complex work. For that
    reason, Thymeleaf offers a set of tools to ease this task:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In this example, taken from the same file, a list of options is provided by
    the model attribute `dynamicRadioOptions`. For each element of this list, an input
    field of the radio type and a label is generated.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: Note the usage of the Thymeleaf `#ids.prev()` function, which refers to the
    ID of the previous input field.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 注意Thymeleaf `#ids.prev()` 函数的使用，它指的是前一个输入字段的ID。
- en: Input Elements for User Interaction (submit)
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户交互的输入元素（提交）
- en: 'The last and maybe most important input element to look at is the input element
    of the submit type. It renders a button that will submit the form it resides in:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 最后也许是最重要的输入元素是提交类型的输入元素。它渲染一个按钮，该按钮将提交它所在的表单：
- en: '![](img/5ae85360-c9a6-4582-b901-e3d4a8e1c230.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5ae85360-c9a6-4582-b901-e3d4a8e1c230.png)'
- en: '[PRE24]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Select (single, multi-select)
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择（单选，多选）
- en: 'Another important input element used in HTML forms is the `<select>` element.
    It allows you to gain user input by presenting either a drop-down list or an inline
    list:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTML表单中使用的另一个重要输入元素是 `<select>` 元素。它允许您通过显示下拉列表或内联列表来获取用户输入：
- en: '[PRE25]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The preceding example will render a drop-down menu, while the following example,
    where we are only adding the size attributes, renders an inline list:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例将渲染一个下拉菜单，而下面的示例，我们只添加了大小属性，渲染一个内联列表：
- en: '[PRE26]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Both examples can be found in the `.../src/main/resources/templates/selectform.html`
    file.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个示例都可以在 `.../src/main/resources/templates/selectform.html` 文件中找到。
- en: This example also demonstrates the usage of another way to determine the ID
    of an element. In this case, the `${#ids.next()}` function will return the ID
    of the next field element.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例还演示了确定元素ID的另一种方法。在这种情况下，`${#ids.next()}` 函数将返回下一个字段元素的ID。
- en: The `<select>` tag will take the same kind of value as an `<input>` element
    does. This means that the model attribute will be converted to or from its textual
    representation. If necessary, a conversion will be performed. As shown in the
    preceding example, the options are rendered similar to the radio input element.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`<select>` 标签将具有与 `<input>` 元素相同类型的值。这意味着模型属性将被转换为或从其文本表示形式转换。如果需要，将执行转换。如前例所示，选项的渲染类似于单选输入元素。'
- en: Selecting Multiple Values
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择多个值
- en: 'The following snippet illustrates how to allow the selection of multiple values
    from a list:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段说明了如何允许从列表中选择多个值：
- en: '[PRE27]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This example can be found within the same file as the previous examples.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例可以在与之前示例相同的文件中找到。
- en: Textarea (Regular, Unsafe Content)
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文本区域（常规，不安全内容）
- en: 'The last element to look at is the `<textarea>` element. It is used to enter
    long texts. Its usage does not differ much from a regular text `<input>` field.
    To bind a model value to the `textarea` element, the same `th:value` or `th:field`
    attribute is used, just as it was previously:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 最后要查看的元素是 `<textarea>` 元素。它用于输入长文本。其用法与常规文本 `<input>` 字段没有太大区别。要将模型值绑定到 `textarea`
    元素，使用相同的 `th:value` 或 `th:field` 属性，就像之前一样：
- en: '[PRE28]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This example can be found in the `.../src/main/resources/templates/textareaform.html`
    file.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例可以在 `.../src/main/resources/templates/textareaform.html` 文件中找到。
- en: It's important to note that Thymeleaf also offers attributes for the rows and
    columns attributes of the `textarea`. As shown in the preceding example, the number
    of rows is provided by the model attribute named `textareaRows`.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，Thymeleaf还提供了 `textarea` 的行和列属性的属性。如前例所示，行数由名为 `textareaRows` 的模型属性提供。
- en: There is one aspect of gathering text input that can be best demonstrated using
    a `textarea`, but it is important whenever free text input is allowed.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 `textarea` 可以最好地展示收集文本输入的一个方面，但无论何时允许自由文本输入，这一点都很重要。
- en: Safe/Unsafe Text
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全/不安全文本
- en: To prevent code injection, the `th:text` attribute that is used to render text
    into a page will encode any text so that it is visible in an HTML page. If, for
    example, the value contains the text `<input>`, it will be encoded and outputted
    as `&lt;input&gt;` to ensure that it is displayed correctly. However, there may
    be use cases in which you want to display the unmodified value. In this case,
    you use the `th:utext` attribute, which tells Thymeleaf to output the content
    without any modification.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止代码注入，用于将文本渲染到页面上的 `th:text` 属性将编码任何文本，使其在HTML页面中可见。例如，如果值包含文本 `<input>`，它将被编码并输出为
    `&lt;input&gt;`，以确保正确显示。然而，可能存在需要显示未修改值的用例。在这种情况下，您使用 `th:utext` 属性，它告诉Thymeleaf输出内容而不进行任何修改。
- en: If you display user-generated content using `th:utext`, you are vulnerable to
    **XSS** (**Cross Site Scripting**) attacks, so make sure that you use this only
    for HTML content that you have generated or that is sanitized in a different way.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: 'The following snippet, taken from the `.../src/main/resources/templates/textareadisplay.html`
    file, demonstrates this concept:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Utilizing Checkboxes in Thymeleaf
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The aim is to add checkboxes and display things conditionally in Thymeleaf.
    The steps for completion are as follows:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: Open the project located at [https://bit.ly/2QIcXxv](https://bit.ly/2QIcXxv).
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `BlogPost` class and add the following property:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Open the `BlogPostController` class and replace the existing `initBlogPost()`
    method with the following implementation:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Open the `src/main/resources/templates/blogpostform.html` file and insert the
    following code at the marked location:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Start the application and open your browser at `http://localhost:8080`:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/aa9a66c2-cfd2-42e3-a9a1-e192a29812bb.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
- en: 'Now disable the checkbox after the **Slug** label and click Submit, where you
    will see the following form:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ca5f4950-a702-47f6-859e-ef871e4579e5.png)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
- en: With this, you have displayed or hidden parts of the form depending on the application
    state.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://bit.ly/2p6hIol](https://bit.ly/2p6hIol) to access the code for
    the `InputTypesAndValueBindingApplication.java` file.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity: Creating a Page to Enter a New Blog Post Category'
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Aim**'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: To implement the model view and controller for categories and to extend the
    blog post to select a category.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: '**Scenario**'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: The Blogmania application is able to display and capture blog posts. Now, you
    want to add the ability to set a category to the existing application.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '**Steps for Completion**'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: Open the project at [https://bit.ly/2Ft1iBQ](https://bit.ly/2Ft1iBQ).
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the empty category model class from the package folder.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an attribute of the string type called `name` to the model class and use
    Lombok annotations to generate all methods of a data class.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the controller class in the same package as the category class.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a field of type `list <Category>` that will hold all available categories.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a method to initialize a new empty category and add it to the model as an
    attribute.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a method with a post request mapping for `/categories`.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implement the currently empty method to return the list of all categories.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the file that will contain the form for the category.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a form to enter the category name.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the file containing the form to edit a blog post.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a drop-down field to the form to generate all options.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the application and open your browser at `http://localhost:8080` to view
    the output.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Take a look at the following screenshot:'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/f4f94afc-b9ff-4f9b-bc37-88120dcf738f.png)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
- en: 'Now click on Add Category:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9820b3be-6a52-42ec-9009-bec18a107dc4.png)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
- en: Enter a category title and click Save.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add as many more categories as you like.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now click on the plus sign (+) in the upper-right corner:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在点击右上角的加号（+）：
- en: '![](img/39c0ae77-71f7-4bba-8035-1031cfecce72.png)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/39c0ae77-71f7-4bba-8035-1031cfecce72.png)'
- en: Enter a blog post and look at the list of categories.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入一个博客文章并查看分类列表。
- en: 'After clicking Save, the selected category should appear under the blog post
    title:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击保存后，所选分类应出现在博客文章标题下方：
- en: '![](img/a4336401-c1f0-4d61-bbad-accf5cf0d450.png)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a4336401-c1f0-4d61-bbad-accf5cf0d450.png)'
- en: '**Outcome**'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '**结果**'
- en: The model view and controller for categories are implemented, and the blog posts
    are extended to select a category.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 实现了分类的模型视图和控制器，并将博客文章扩展为选择一个分类。
- en: Go to [https://bit.ly/2MwgE6Q](https://bit.ly/2MwgE6Q) to access the complete
    code for the `BlogmaniaApplication.java` file. To refer to the detailed steps,
    go to the *Solutions* section at the end of this book on page 255.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 前往[https://bit.ly/2MwgE6Q](https://bit.ly/2MwgE6Q)访问`BlogmaniaApplication.java`文件的完整代码。要参考详细步骤，请参阅本书末尾的*解决方案*部分，第255页。
- en: Summary
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we looked at how data is sent from the browser to the web application
    using HTTP requests. After that, we looked at the differences between the usage
    of multiple parameters and a form-backing Bean. Next, we discovered how to validate
    Beans and customize the default error messages. We then discussed various form
    input fields such as text input, drop-down menus, and checkboxes. With the completion
    of this chapter, you are now able to build web applications based on Spring Boot,
    Spring Web MVC, and the Thymeleaf template engine.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了如何使用HTTP请求将数据从浏览器发送到Web应用。之后，我们讨论了多个参数的使用与表单后端Bean之间的区别。接着，我们发现了如何验证Beans以及自定义默认错误信息。然后，我们讨论了各种表单输入字段，如文本输入、下拉菜单和复选框。完成本章后，你现在能够基于Spring
    Boot、Spring Web MVC和Thymeleaf模板引擎构建Web应用。
- en: In the next chapter, we will look at RESTful APIs that, in contrast to HTML
    views and forms, are directed at communication between services or machines.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨RESTful API，与HTML视图和表单不同，这些API旨在服务或机器之间的通信。
