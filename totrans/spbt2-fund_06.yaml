- en: Passing Data Between the View and the Controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will learn about creating HTML forms for data acquisition.
    Once the data is acquired, we will then examine it. Lastly, we will examine the
    types of fields used to store the data.
  prefs: []
  type: TYPE_NORMAL
- en: An HTML form or web form is a document designed to collate data from a web page
    so that it can be stored or sent to a server for processing. These forms use different
    types of elements such as checkboxes, radio buttons, and text fields to accept
    various types of numerical or textual data. They can also include interactive
    elements such as buttons.
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of this chapter, you will be able to:'
  prefs: []
  type: TYPE_NORMAL
- en: Create HTML forms to acquire user input
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interpret user input in your Spring controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examine the data entered into a form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explain different kinds of fields to enter information in the browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Form Handling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When using web applications, there is usually a way to enter data. For example,
    an address book application would allow the user to enter contact information
    into a form and to store the input in a database. Data that is entered into a
    form is usually made up of pieces of information that are related to one another.
    For example, you could think of personal data, an address, or a bank account.
    HTML offers a construct called forms to allow the update or the input of data.
  prefs: []
  type: TYPE_NORMAL
- en: HTML Forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following snippet shows a very simple HTML form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Post Data Handling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When data is entered into a web page, it has to be transmitted to the server
    for further processing somehow. For this purpose, the HTTP protocol that is used
    for the communication between the browser; and the server implements a method
    to achieve this task.
  prefs: []
  type: TYPE_NORMAL
- en: When a form is submitted, the browser will generate a so-called request that
    contains all entered data as key-value pairs in the body of the request.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if `title` has a value of My First Blog Post and `content` is
    set to `Hello World`, the request contains the following body:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Creating a Form Template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since we are using Thymeleaf to render the HTML page, we need a way to display
    data from the model while the view is rendered. On the other hand, the values
    that are submitted have to become part of the model that is processed by the controller.
  prefs: []
  type: TYPE_NORMAL
- en: Simple Input Field
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s say you want to ask for the given title of a blog post. In this case,
    you would define your input field as in the following snippet, which is an excerpt
    from the file present at  [https://bit.ly/2D6fkpQ](https://bit.ly/2D6fkpQ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This will set the model attribute named title as the value of the input field.
    Upon submission, a request parameter also named title will be passed to the controller.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, you are using `th:value` or `th:text`, depending on the kind of
    input field you are using. For example, an `<input>` field expects the value to
    be present in the value attribute, while a `<textarea>` requires the pre-defined
    value to be present as its content.
  prefs: []
  type: TYPE_NORMAL
- en: 'The controller is now able to access the submitted value as a request parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Adding `required = false` to the parameter reference avoids an error being thrown
    when the parameter is missing from the request.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the source of the full class in [https://bit.ly/2Fx6rbI](https://bit.ly/2Fx6rbI) file.
  prefs: []
  type: TYPE_NORMAL
- en: This is a very cumbersome and error-prone method since you have to add a lot
    of attributes manually and are required to repeat the name of the field multiple
    times.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, there is an easier way to pass the model or its attributes between
    the controller and the view in both directions, as we will see soon.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing Thymeleaf Form Syntax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The aim is to implement the Thymeleaf Form Syntax on a website.
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps for completion are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project located at [https://bit.ly/2p38GIR](https://bit.ly/2p38GIR).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `BlogPostController` class and insert the following handling method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `src/main/resource/templates/form-multiple-values.html` file and insert
    the following form definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Go to [https://bit.ly/2xec8E6](https://bit.ly/2xec8E6) to access the complete
    code for the form definition code example.
  prefs: []
  type: TYPE_NORMAL
- en: Start the application by using the `mvnw spring-boot:run` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use your browser to open the URL `http://localhost:8080/blogposts/new-multiple-values`
    to view the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/96b8da72-1ee8-4e7c-b0a0-0af691f5a5a2.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, enter the details and click on Submit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should now see the following page, summarizing the values you''ve entered:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2c7753d5-0b8d-4ef2-a2af-4c42e18e5503.png)'
  prefs: []
  type: TYPE_IMG
- en: With this, you have utilized the Thymeleaf Form Syntax on a website to indicate
    the blog post's status.
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://bit.ly/2x6VwPp](https://bit.ly/2x6VwPp) to access the code for
    the `formmultiple-values.html` file.
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://bit.ly/2CPfkfp](https://bit.ly/2CPfkfp) to access the code for
    the `FormhandlingIntroApplication.java` file.
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://bit.ly/2p38GIR](https://bit.ly/2p38GIR) to access the folder
    for `form-handling/`.
  prefs: []
  type: TYPE_NORMAL
- en: Form-Backing Beans
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a web application that uses web pages to manipulate data, you want to keep
    the information tightly coupled by using an object or a form-backing Bean that
    you can pass between the view and the controller. This kind of Bean provides getters
    and setters to access the value for each field in the form. In Spring MVC, this
    kind of object is called a **Command**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet shows a sample command class backing a form to display
    and modify a blog post. Please note the usage of Project Lombok to avoid boilerplate
    code for the constructor, getters, and setters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: As you may have noticed, this looks like a regular Java Bean; and indeed there
    is no difference between a Java Bean and a Spring MVC command class.
  prefs: []
  type: TYPE_NORMAL
- en: Populating a Form Bean for Editing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Previously, we were binding single values of the model to fields of the form.
    When the form Bean has a lot of attributes, it can become quite cumbersome to
    repeat the name of the model attribute multiple times for each field.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since accessing values from a form-backing Bean is a very common task, Thymeleaf
    provides the `th:object` attribute in `<form>` tags to specify the command object
    that will be accessed throughout the whole form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: After the object has been set for the form, the Thymeleaf expression `*{...}`
    allows you to access the fields of that object without referencing the model attribute
    repeatedly.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that there are limitations when using this attribute. It is required
    to use a variable expression `(${...})` specifying the name of the model attribute
    without any property navigation. This means that `${blogPostCommand}` is perfectly
    fine, while `${pageData.blogPostCommand}` would lead to an error. Also, no other
    `th:object` attributes are allowed inside a form.
  prefs: []
  type: TYPE_NORMAL
- en: Starting with Form Data Processing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The aim is to use form data processing to create a blog post with a backing
    Bean. The steps for completion are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project located at [https://bit.ly/2p38GIR](https://bit.ly/2p38GIR).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `CreateBlogPostCommand` class and complete the class as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `BlogPostController` class and insert the following handling methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `src/main/resource/templates/form-backing-bean.html` file and insert
    the following form definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Go to [https://bit.ly/2NJ5IqO](https://bit.ly/2NJ5IqO) to access the complete
    code for the form definition code example.
  prefs: []
  type: TYPE_NORMAL
- en: Start the application by using the `mvnw spring-boot:run` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use your browser to open the URL `http://localhost:8080/blogposts/new-backing-bean`
    to view the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/71195786-ce49-4f80-8f85-614d99a7de19.png)'
  prefs: []
  type: TYPE_IMG
- en: Now enter the details and click on Submit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'View the following screenshot, summarizing the values you''ve entered:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/247d91e4-6d4b-4977-a328-523053121e23.png)'
  prefs: []
  type: TYPE_IMG
- en: With this, you have utilized form data processing to create a blog post with
    a backing Bean.
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://bit.ly/2D3aziP](https://bit.ly/2D3aziP) to access the complete
    code for the `FormhandlingIntroApplication.java` example.
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://bit.ly/2p38GIR](https://bit.ly/2p38GIR) to access the `form-handling/`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: Bean Validation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When it comes to acquiring data, there are usually constraints regarding the
    validity of values. This can be a technical constraint (it has to be a number)
    or a business constraint (21 years or older). For this kind of validation, there
    is a framework called Bean Validation for JVM languages such as Java.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to get more information about the Java Bean Validation framework,
    you can visit the homepage of the project at
  prefs: []
  type: TYPE_NORMAL
- en: '[http://beanvalidation.org/](http://beanvalidation.org/), which is a very good
    starting point.'
  prefs: []
  type: TYPE_NORMAL
- en: Covering the Bean Validation framework is outside the scope of this book. However,
    the basic concept is that annotations are used to define the constraints of properties
    in a Java Bean. Validators are then used to perform the actual validation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet shows an example of a Java Bean that can be validated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Besides applying the annotations to the model classes, there is little that
    has to be done to validate the model. Most of the heavy lifting such as configuring
    the validation framework and calling the validator implementations is done by
    Spring. To finally perform the actual validation, the `@Validated` annotation
    is used in the controller method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: As with many frameworks that have been adopted by Spring Boot, you can either
    use the Spring annotation (`@Validated`) or the annotation of the original project
    (`@Valid`).
  prefs: []
  type: TYPE_NORMAL
- en: Besides the `@Validated` annotation, this code also shows the usage of the `BindingResult`
    class, which is also passed in as a parameter. The `bindingResult` parameter is
    used to determine whether any validation constraint had been violated in the previous
    request. In the preceding example, another view will be rendered in case of validation
    errors than in the case of data being entered correctly. Usually, the view containing
    the original form will be used in those cases.
  prefs: []
  type: TYPE_NORMAL
- en: In general, adding the `BindingResult` to the controller method is optional.
    However, if it is missing or not following immediately after the model attribute
    to be validated, a generic error page will be shown. The reason for this is that
    Spring MVC determines that the controller method is not able to handle the validation
    error and therefore turns to the general error handler for bad requests.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Validation Messages to Templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When the user enters invalid information, it is a good practice to inform the
    user about this. Usually, this is done by showing additional information about
    what the application expects. It is even possible to modify the styling of the
    input field of the affected values by turning it red, for example.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this case, Thymeleaf offers multiple tools to show these kinds of errors.
    The following lists shows some examples for a model attribute or a field named
    title:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/71e7d4be-b86c-4bc6-9cc3-50f5101262dd.png)'
  prefs: []
  type: TYPE_IMG
- en: If a constraint is violated and a message should be shown, the Bean Validation
    framework provides a default error message.
  prefs: []
  type: TYPE_NORMAL
- en: Utilizing Spring's Validation Facilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The aim is to validate data using Spring and Thymeleaf. The steps for completion
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project located at [https://bit.ly/2p38GIR](https://bit.ly/2p38GIR).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `CreateValidatedBlogPostCommand` class and complete the class as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `BlogPostController` class and insert the following handling methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `src/main/resource/templates/form-validated-bean.html` file and insert
    the following form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Go to [https://bit.ly/2Ofv2Su](https://bit.ly/2Ofv2Su) to access the code for
    the form.
  prefs: []
  type: TYPE_NORMAL
- en: Start the application by using the `mvnw spring-boot:run` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use your browser to open the URL `http://localhost:8080/blogposts/new-validated-bean`
    to obtain the following output page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/73cd8853-ce20-47de-ba60-8cfea03b58a0.png)'
  prefs: []
  type: TYPE_IMG
- en: Now enter the details and click on Submit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should now see the following page, summarizing the values you''ve entered:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/034094f0-ce28-4a6c-b221-c724d58eeea3.png)'
  prefs: []
  type: TYPE_IMG
- en: With this, you have utilized Spring's built-in validation feature to test the
    data.
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://bit.ly/2p4Sgjo](https://bit.ly/2p4Sgjo) to access the complete
    code for the `FormhandlingIntroApplication.java` file.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing Validation Messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Out of the box, the Bean Validation framework provides messages for the most
    common kinds of validation constraint violations. However, in many cases, you
    want to customize these messages or provide the messages in multiple languages.
  prefs: []
  type: TYPE_NORMAL
- en: Each validation annotation also includes a message property that can be used
    to set a custom message. This could be done via a static message that is directly
    encoded into the source.
  prefs: []
  type: TYPE_NORMAL
- en: For example, `@Size(min = 3, max = 60, message = "The size is incorrect")` would
    display the message. The size is incorrect if the corresponding field does not
    meet this requirement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead of adding the message to the source code of the application, it is
    a much better practice to externalize the text. To achieve this, first, a `ValidationMessages.properties`
    file has to be created in the `src/main/resources folder`. Once created, the messages
    are added to this file with a unique message key. It is a good idea to follow
    a naming schema. An example could be the following message property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'In the annotation, this message can then be addressed by enclosing the key
    in curly brackets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The Validation Framework will automatically get the message from the `ValidationMessages.properties`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Setting a New Default Message for a Validator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another way to customize the validation error message is to provide a new default
    error message for a validator. This is also done in the `ValidationMessages.properties`
    file. In this case, the full class name followed by .message is used as a properties
    key:'
  prefs: []
  type: TYPE_NORMAL
- en: '`javax.validation.constraints.NotBlank.message=This field must not`'
  prefs: []
  type: TYPE_NORMAL
- en: '`be blank!`'
  prefs: []
  type: TYPE_NORMAL
- en: In this case, all properties that are annotated with the `@NotBlank` annotation
    will use the provided message in case of a violation, as long as no implicit message
    was set using the message property of the annotation.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the Message for a Bean Property
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The third way of setting a custom message is to specify the name of a property
    in the model. In contrast to the previous mechanisms that are provided by the
    Validation Framework, this one is handled by Spring MVC.
  prefs: []
  type: TYPE_NORMAL
- en: 'This time, the message is stored in the `src/main/resources/messages.properties`
    file. The following example demonstrates how the property key is built:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: First, the name of the annotation used for validation is used (`@NotBlank`,
    in the example). This is followed by the model attribute name (in this case, it's
    `createValidatedBlogPostCommand`). Last, the path to the property within the model
    class is appended (the title property).
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding example, the message "The title must not be blank!" would be
    shown if the title property of the `createValidatedBlogPostCommand` model attribute
    is blank. For any other field that is annotated with `@NotBlank`, the message
    would be determined depending on the previously described mechanisms.
  prefs: []
  type: TYPE_NORMAL
- en: Providing Translation for Messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A final improvement that can be applied to the messages is to provide custom
    validation messages in multiple languages.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the default properties files, the messages.properties and `ValidationMessages.properties`
    files with the same name are followed by the language code. For example, `messages_de.properties`
    and `ValidationMessages_de.properties` will provide the German translations of
    all custom messages.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying Validation Messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The aim is to modify and translate the validation messages.
  prefs: []
  type: TYPE_NORMAL
- en: Open the project located at [https://bit.ly/2p38GIR](https://bit.ly/2p38GIR).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `src/main/resources/messages.properties` file and add the following
    line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `src/main/resources/messages_de.properties` file and add the following
    line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Start the application by using the `mvnw spring-boot:run` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use your browser to open the URL `http://localhost:8080/blogposts/new-validated-bean`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Clear the title field and submit the form to view the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/103378f1-dbe9-4cd5-85fe-854335e2af23.png)'
  prefs: []
  type: TYPE_IMG
- en: With this, you have customized the validation messages and provided translations
    for another language.
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://bit.ly/2p4Sgjo](https://bit.ly/2p4Sgjo) to access the complete
    code for the `FormhandlingIntroApplication.java` file.
  prefs: []
  type: TYPE_NORMAL
- en: Form Input Types and Value Binding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After looking at how data is passed between the view and controller, this section
    will enable us to use the different types of input fields that are part of HTML
    with the Thymeleaf template engine. These values of the fields need to be bound
    to the attributes of the model to be processed by the controller.
  prefs: []
  type: TYPE_NORMAL
- en: One important aspect of using HTML forms is that there is no distinction between
    text, numbers, or other types of values. Java, however, is based on a strong type
    system that requires an explicit type. For that reason, values have to be converted
    from or to a text representation. This task is accomplished by converter classes
    that are available for the most common Java types such as number, enumeration,
    or Boolean. Spring will automatically find the appropriate converter implementation
    to convert a value from or to a textual representation.
  prefs: []
  type: TYPE_NORMAL
- en: More on type conversion and how to implement custom converters can be found
    in the Spring framework documentation at [https://docs.spring.io/spring/docs/current/spring-frameworkreference/core.html#core-convert](https://docs.spring.io/spring/docs/current/spring-frameworkreference/core.html#core-convert).
  prefs: []
  type: TYPE_NORMAL
- en: For the rest of this chapter, we will focus on the usage of commonly used form
    elements to gather user input in a Spring MVC web application with Thymeleaf.
  prefs: []
  type: TYPE_NORMAL
- en: You can find all the sample code in the companion repository at [https://bit.ly/2QIcXxv](https://bit.ly/2QIcXxv).
    You can start the application by running `mvnw spring-boot:run` or using the IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Inputting Elements for Text or Number (text, hidden, password)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following table lists the most common use cases for input fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9fba53c9-e95d-4e59-ae30-a74f5979dbfc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `.../src/main/resources/templates/inputform.html` file shows how the `<input>`
    tag is used in Thymeleaf. The most important attributes to notice are either `th:value`
    or `th:field` depending on how you need to address the model attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: There are far more types available for input fields then what is being discussed
    here. However, the value that will be transmitted is always some kind of textual
    representation. For a comprehensive list of these types and their usage, the **Mozilla
    Developer Documentation** (**MDN**) for the input field at [https://developer.mozilla.org/en/docs/Web/HTML/Element/Input](https://developer.mozilla.org/en/docs/Web/HTML/Element/Input)
    or [https://html.spec.whatwg.org/multipage/forms.html](https://html.spec.whatwg.org/multipage/forms.html)
    are good starting points.
  prefs: []
  type: TYPE_NORMAL
- en: Inputting Elements for Selections (Checkbox, Radio)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another group of input fields we will now discuss are those used to select a
    single option by turning it, selecting it, or deselecting it, or choosing one
    element from a list of options.
  prefs: []
  type: TYPE_NORMAL
- en: '**Checkboxes**: Commonly uses Boolean values when enabling or disabling an
    option.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Radio buttons**: Commonly use plain text or numbers when selecting one value
    from a list of options.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When it comes to radio elements, it is important that all input fields belonging
    to the same group are also referring to by the same field or attribute of our
    model. Therefore, each input element will have the same `th:field` attribute attached
    to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example from the `.../src/main/resources/templates/inputform.html` file,
    you can see that both radio fields reference the field called `radioValue`. Since
    Thymeleaf will handle the field naming, the HTML name attribute can be omitted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Writing long lists of radio options can become quite complex work. For that
    reason, Thymeleaf offers a set of tools to ease this task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: In this example, taken from the same file, a list of options is provided by
    the model attribute `dynamicRadioOptions`. For each element of this list, an input
    field of the radio type and a label is generated.
  prefs: []
  type: TYPE_NORMAL
- en: Note the usage of the Thymeleaf `#ids.prev()` function, which refers to the
    ID of the previous input field.
  prefs: []
  type: TYPE_NORMAL
- en: Input Elements for User Interaction (submit)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The last and maybe most important input element to look at is the input element
    of the submit type. It renders a button that will submit the form it resides in:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5ae85360-c9a6-4582-b901-e3d4a8e1c230.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Select (single, multi-select)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another important input element used in HTML forms is the `<select>` element.
    It allows you to gain user input by presenting either a drop-down list or an inline
    list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding example will render a drop-down menu, while the following example,
    where we are only adding the size attributes, renders an inline list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Both examples can be found in the `.../src/main/resources/templates/selectform.html`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: This example also demonstrates the usage of another way to determine the ID
    of an element. In this case, the `${#ids.next()}` function will return the ID
    of the next field element.
  prefs: []
  type: TYPE_NORMAL
- en: The `<select>` tag will take the same kind of value as an `<input>` element
    does. This means that the model attribute will be converted to or from its textual
    representation. If necessary, a conversion will be performed. As shown in the
    preceding example, the options are rendered similar to the radio input element.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting Multiple Values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following snippet illustrates how to allow the selection of multiple values
    from a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: This example can be found within the same file as the previous examples.
  prefs: []
  type: TYPE_NORMAL
- en: Textarea (Regular, Unsafe Content)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The last element to look at is the `<textarea>` element. It is used to enter
    long texts. Its usage does not differ much from a regular text `<input>` field.
    To bind a model value to the `textarea` element, the same `th:value` or `th:field`
    attribute is used, just as it was previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: This example can be found in the `.../src/main/resources/templates/textareaform.html`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: It's important to note that Thymeleaf also offers attributes for the rows and
    columns attributes of the `textarea`. As shown in the preceding example, the number
    of rows is provided by the model attribute named `textareaRows`.
  prefs: []
  type: TYPE_NORMAL
- en: There is one aspect of gathering text input that can be best demonstrated using
    a `textarea`, but it is important whenever free text input is allowed.
  prefs: []
  type: TYPE_NORMAL
- en: Safe/Unsafe Text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To prevent code injection, the `th:text` attribute that is used to render text
    into a page will encode any text so that it is visible in an HTML page. If, for
    example, the value contains the text `<input>`, it will be encoded and outputted
    as `&lt;input&gt;` to ensure that it is displayed correctly. However, there may
    be use cases in which you want to display the unmodified value. In this case,
    you use the `th:utext` attribute, which tells Thymeleaf to output the content
    without any modification.
  prefs: []
  type: TYPE_NORMAL
- en: If you display user-generated content using `th:utext`, you are vulnerable to
    **XSS** (**Cross Site Scripting**) attacks, so make sure that you use this only
    for HTML content that you have generated or that is sanitized in a different way.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following snippet, taken from the `.../src/main/resources/templates/textareadisplay.html`
    file, demonstrates this concept:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Utilizing Checkboxes in Thymeleaf
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The aim is to add checkboxes and display things conditionally in Thymeleaf.
    The steps for completion are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project located at [https://bit.ly/2QIcXxv](https://bit.ly/2QIcXxv).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `BlogPost` class and add the following property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `BlogPostController` class and replace the existing `initBlogPost()`
    method with the following implementation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `src/main/resources/templates/blogpostform.html` file and insert the
    following code at the marked location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the application and open your browser at `http://localhost:8080`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/aa9a66c2-cfd2-42e3-a9a1-e192a29812bb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now disable the checkbox after the **Slug** label and click Submit, where you
    will see the following form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ca5f4950-a702-47f6-859e-ef871e4579e5.png)'
  prefs: []
  type: TYPE_IMG
- en: With this, you have displayed or hidden parts of the form depending on the application
    state.
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://bit.ly/2p6hIol](https://bit.ly/2p6hIol) to access the code for
    the `InputTypesAndValueBindingApplication.java` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity: Creating a Page to Enter a New Blog Post Category'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Aim**'
  prefs: []
  type: TYPE_NORMAL
- en: To implement the model view and controller for categories and to extend the
    blog post to select a category.
  prefs: []
  type: TYPE_NORMAL
- en: '**Scenario**'
  prefs: []
  type: TYPE_NORMAL
- en: The Blogmania application is able to display and capture blog posts. Now, you
    want to add the ability to set a category to the existing application.
  prefs: []
  type: TYPE_NORMAL
- en: '**Steps for Completion**'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project at [https://bit.ly/2Ft1iBQ](https://bit.ly/2Ft1iBQ).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the empty category model class from the package folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an attribute of the string type called `name` to the model class and use
    Lombok annotations to generate all methods of a data class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the controller class in the same package as the category class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a field of type `list <Category>` that will hold all available categories.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a method to initialize a new empty category and add it to the model as an
    attribute.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a method with a post request mapping for `/categories`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implement the currently empty method to return the list of all categories.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the file that will contain the form for the category.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a form to enter the category name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the file containing the form to edit a blog post.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a drop-down field to the form to generate all options.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the application and open your browser at `http://localhost:8080` to view
    the output.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Take a look at the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/f4f94afc-b9ff-4f9b-bc37-88120dcf738f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now click on Add Category:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9820b3be-6a52-42ec-9009-bec18a107dc4.png)'
  prefs: []
  type: TYPE_IMG
- en: Enter a category title and click Save.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add as many more categories as you like.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now click on the plus sign (+) in the upper-right corner:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/39c0ae77-71f7-4bba-8035-1031cfecce72.png)'
  prefs: []
  type: TYPE_IMG
- en: Enter a blog post and look at the list of categories.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After clicking Save, the selected category should appear under the blog post
    title:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a4336401-c1f0-4d61-bbad-accf5cf0d450.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Outcome**'
  prefs: []
  type: TYPE_NORMAL
- en: The model view and controller for categories are implemented, and the blog posts
    are extended to select a category.
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://bit.ly/2MwgE6Q](https://bit.ly/2MwgE6Q) to access the complete
    code for the `BlogmaniaApplication.java` file. To refer to the detailed steps,
    go to the *Solutions* section at the end of this book on page 255.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at how data is sent from the browser to the web application
    using HTTP requests. After that, we looked at the differences between the usage
    of multiple parameters and a form-backing Bean. Next, we discovered how to validate
    Beans and customize the default error messages. We then discussed various form
    input fields such as text input, drop-down menus, and checkboxes. With the completion
    of this chapter, you are now able to build web applications based on Spring Boot,
    Spring Web MVC, and the Thymeleaf template engine.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at RESTful APIs that, in contrast to HTML
    views and forms, are directed at communication between services or machines.
  prefs: []
  type: TYPE_NORMAL
