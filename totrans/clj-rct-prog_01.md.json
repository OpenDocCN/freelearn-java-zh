["```java\n(-> sine-wave\n    (.take 600)\n    (.subscribe (fn [{:keys [x y]}]\n                  (fill-rect x y \"orange\"))))\n```", "```java\nlein new chestnut sin-wave\ncd sin-wave\n\n```", "```java\n<!DOCTYPE html>\n<html>\n  <head>\n    <link href=\"css/style.css\" rel=\"stylesheet\" type=\"text/css\">\n  </head>\n  <body>\n    <div id=\"app\"></div>\n    <script src=\"img/rx.all.js\" type=\"text/javascript\"></script>\n    <script src=\"img/app.js\" type=\"text/javascript\"></script>\n    <canvas id=\"myCanvas\" width=\"650\" height=\"200\" style=\"border:1px solid #d3d3d3;\">\n  </body>\n</html>\n```", "```java\n(ns sin-wave.core)\n\n(defn main [])\n```", "```java\nlein run -m sin-wave.server\n2015-01-02 19:52:34.116:INFO:oejs.Server:jetty-7.6.13.v20130916\n2015-01-02 19:52:34.158:INFO:oejs.AbstractConnector:Started SelectChannelConnector@0.0.0.0:10555\nStarting figwheel.\nStarting web server on port 10555 .\nCompiling ClojureScript.\nFigwheel: Starting server at http://localhost:3449\nFigwheel: Serving files from '(dev-resources|resources)/public'\n\n```", "```java\n(.log js/console \"hello clojurescript\")\n```", "```java\n(def canvas (.getElementById js/document \"myCanvas\"))\n(def ctx    (.getContext canvas \"2d\"))\n\n;; Clear canvas before doing anything else\n(.clearRect ctx 0 0 (.-width canvas) (.-height canvas))\n```", "```java\n(def interval   js/Rx.Observable.interval)\n(def time       (interval 10))\n```", "```java\n(-> time\n    (.take 5)\n    (.subscribe (fn [n]\n                  (.log js/console n))))\n\n;; 0\n;; 1\n;; 2\n;; 3\n;; 4\n```", "```java\n(defn deg-to-rad [n]\n  (* (/ Math/PI 180) n))\n\n(defn sine-coord [x]\n  (let [sin (Math/sin (deg-to-rad x))\n        y   (- 100 (* sin 90))]\n    {:x   x\n     :y   y\n     :sin sin}))\n```", "```java\n(.log js/console (str (sine-coord 50)))\n;;{:x 50, :y 31.05600011929198, :sin 0.766044443118978}\n```", "```java\n(def sine-wave\n  (.map time sine-coord))\n```", "```java\n(-> sine-wave\n    (.take 5)\n    (.subscribe (fn [xysin]\n                  (.log js/console (str xysin)))))\n\n ;; {:x 0, :y 100, :sin 0} \n ;; {:x 1, :y 98.42928342064448, :sin 0.01745240643728351} \n ;; {:x 2, :y 96.85904529677491, :sin 0.03489949670250097} \n ;; {:x 3, :y 95.28976393813505, :sin 0.052335956242943835} \n ;; {:x 4, :y 93.72191736302872, :sin 0.0697564737441253} \n```", "```java\n(defn fill-rect [x y colour]\n  (set! (.-fillStyle ctx) colour)\n  (.fillRect ctx x y 2 2))\n\n(-> sine-wave\n    (.take 600)\n    (.subscribe (fn [{:keys [x y]}]\n                  (fill-rect x y \"orange\"))))\n```", "```java\n(def colour (.map sine-wave\n                  (fn [{:keys [sin]}]\n                    (if (< sin 0)\n                      \"red\"\n                      \"blue\"))))\n```", "```java\n(-> (.zip sine-wave colour #(vector % %2))\n    (.take 600)\n    (.subscribe (fn [[{:keys [x y]} colour]]\n                  (fill-rect x y colour))))\n```", "```java\n(def red  (.map time (fn [_] \"red\")))\n(def blue (.map time (fn [_] \"blue\")))\n```", "```java\n(def concat     js/Rx.Observable.concat)\n(def defer      js/Rx.Observable.defer)\n(def from-event js/Rx.Observable.fromEvent)\n\n(def mouse-click (from-event canvas \"click\"))\n\n(def cycle-colour\n  (concat (.takeUntil red mouse-click)\n          (defer #(concat (.takeUntil blue mouse-click)\n                          cycle-colour))))\n```", "```java\n(-> (.zip sine-wave cycle-colour #(vector % %2))\n    (.take 600)\n    (.subscribe (fn [[{:keys [x y]} colour]]\n                  (fill-rect x y colour))))\n```", "```java\n(-> (.zip sine-wave rainbow-colours #(vector % %2))\n    (.take 600)\n    (.subscribe (fn [[{:keys [x y]} colour]]\n                  (fill-rect x y colour))))\n```", "```java\nnumbers := [1, 2, 3, 4, 5, 6]\nsum := 0\nfor each number in numbers\n  sum := sum + number\nend\nmean := sum / count(numbers)\n```", "```java\nlein new calculator\n\n```", "```java\n(defproject calculator \"0.1.0-SNAPSHOT\"\n  :description \"FIXME: write description\"\n  :url \"http://example.com/FIXME\"\n  :license {:name \"Eclipse Public License\"\n            :url \"http://www.eclipse.org/legal/epl-v10.html\"}\n  :dependencies [[org.clojure/clojure \"1.5.1\"]\n [seesaw \"1.4.4\"]]) \n```", "```java\n(ns calculator.core\n  (:require [seesaw.core :refer :all]))\n\n(native!)\n\n(def main-frame (frame :title \"Calculator\" :on-close :exit))\n\n(def field-x (text \"1\"))\n(def field-y (text \"2\"))\n\n(def result-label (label \"Type numbers in the boxes to add them up!\"))\n```", "```java\nCalculator that ends the program when closed. We also create two text input fields, field-x and field-y, as well as a label that will be used to display the results, aptly named result-label.\n```", "```java\n(defn update-sum [e]\n  (try\n    (text! result-label\n         (str \"Sum is \" (+ (Integer/parseInt (text field-x))\n                           (Integer/parseInt (text field-y)))))\n    (catch Exception e\n      (println \"Error parsing input.\"))))\n\n(listen field-x :key-released update-sum)\n(listen field-y :key-released update-sum)\n```", "```java\n(config! main-frame :content\n         (border-panel\n          :north (horizontal-panel :items [field-x field-y])\n          :center result-label\n          :border 5))\n\n(defn -main [& args]\n  (-> main-frame pack! show!))\n```", "```java\nlein run -m calculator.core\n\n```", "```java\n(def numbers (atom []))\n\n(defn adder [key ref old-state new-state]\n  (print \"Current sum is \" (reduce + new-state)))\n\n(add-watch numbers :adder adder)\n```", "```java\n(swap! numbers conj 1)\n;; Current sum is  1\n\n(swap! numbers conj 2)\n;; Current sum is  3\n\n(swap! numbers conj 7)\n;; Current sum is  10\n\n```", "```java\n(->> [1 2 3 4 5 6]\n     (map inc)\n     (filter even?)\n     (reduce +))\n;; 12\n```"]