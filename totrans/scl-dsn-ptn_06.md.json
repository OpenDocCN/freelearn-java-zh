["```java\ntrait SimpleConnection {\n  def getName(): String\n\n  def executeQuery(query: String): Unit\n}\n\nclass SimpleMysqlConnection extends SimpleConnection {\n  override def getName(): String = \"SimpleMysqlConnection\"\n\n  override def executeQuery(query: String): Unit = {\n    System.out.println(s\"Executing the query '$query' the MySQL way.\")\n  }\n}\n\nclass SimplePgSqlConnection extends SimpleConnection {\n  override def getName(): String = \"SimplePgSqlConnection\"\n\n  override def executeQuery(query: String): Unit = {\n    System.out.println(s\"Executing the query '$query' the PgSQL way.\")\n  }\n}\n```", "```java\nabstract class DatabaseClient {\n  def executeQuery(query: String): Unit = {\n    val connection = connect()\n    connection.executeQuery(query)\n  }\n\n  protected def connect(): SimpleConnection\n}\n\nclass MysqlClient extends DatabaseClient {\n  override protected def connect(): SimpleConnection = new SimpleMysqlConnection\n}\n\nclass PgSqlClient extends DatabaseClient {\n  override protected def connect(): SimpleConnection = new SimplePgSqlConnection\n}\n```", "```java\nobject Example {\n  def main(args: Array[String]): Unit = {\n    val clientMySql: DatabaseClient = new MysqlClient\n    val clientPgSql: DatabaseClient = new PgSqlClient\n    clientMySql.executeQuery(\"SELECT * FROM users\")\n    clientPgSql.executeQuery(\"SELECT * FROM employees\")\n  }\n}\n```", "```java\ntrait SimpleConnectionPrinter {\n  def printSimpleConnection(connection: SimpleConnection): Unit\n}\n```", "```java\nabstract class BadDatabaseClient {\n  def executeQuery(query: String): Unit = {\n    val connection = connect()\n    val connectionPrinter = getConnectionPrinter()\n    connectionPrinter.printSimpleConnection(connection)\n    connection.executeQuery(query)\n  }\n\n  protected def connect(): SimpleConnection\n\n  protected def getConnectionPrinter(): SimpleConnectionPrinter\n}\n```", "```java\nclass SimpleMySqlConnectionPrinter extends SimpleConnectionPrinter {\n  override def printSimpleConnection(connection: SimpleConnection): Unit = {\n    System.out.println(s\"I require a MySQL connection. It is: '${connection.getName()}'\")\n  }\n}\n\nclass SimplePgSqlConnectionPrinter extends SimpleConnectionPrinter {\n  override def printSimpleConnection(connection: SimpleConnection): Unit = {\n    System.out.println(s\"I require a PgSQL connection. It is: '${connection.getName()}'\")\n  }\n}\n```", "```java\nclass BadMySqlClient extends BadDatabaseClient {\n  override protected def connect(): SimpleConnection = new SimpleMysqlConnection\n\n  override protected def getConnectionPrinter(): SimpleConnectionPrinter = new SimpleMySqlConnectionPrinter\n}\n\nclass BadPgSqlClient extends BadDatabaseClient {\n  override protected def connect(): SimpleConnection = new SimplePgSqlConnection\n\n  override protected def getConnectionPrinter(): SimpleConnectionPrinter = new SimpleMySqlConnectionPrinter\n}\n```", "```java\nobject BadExample {\n  def main(args: Array[String]): Unit = {\n    val clientMySql: BadDatabaseClient = new BadMySqlClient\n    val clientPgSql: BadDatabaseClient = new BadPgSqlClient\n    clientMySql.executeQuery(\"SELECT * FROM users\")\n    clientPgSql.executeQuery(\"SELECT * FROM employees\")\n  }\n}\n```", "```java\ntrait DatabaseConnectorFactory {\n  def connect(): SimpleConnection\n}\n\nclass MySqlFactory extends DatabaseConnectorFactory {\n  override def connect(): SimpleConnection = new SimpleMysqlConnection\n}\n\nclass PgSqlFactory extends DatabaseConnectorFactory {\n  override def connect(): SimpleConnection = new SimplePgSqlConnection\n}\n```", "```java\nclass DatabaseClient(connectorFactory: DatabaseConnectorFactory) {\n  def executeQuery(query: String): Unit = {\n    val connection = connectorFactory.connect()\n    connection.executeQuery(query)\n  }\n}\n```", "```java\nobject Example {\n  def main(args: Array[String]): Unit = {\n    val clientMySql: DatabaseClient = new DatabaseClient(new MySqlFactory)\n    val clientPgSql: DatabaseClient = new DatabaseClient(new PgSqlFactory)\n    clientMySql.executeQuery(\"SELECT * FROM users\")\n    clientPgSql.executeQuery(\"SELECT * FROM employees\")\n  }\n}\n```", "```java\ntrait Animal\nclass Bird extends Animal\nclass Mammal extends Animal\nclass Fish extends Animal\n\nobject Animal {\n  def apply(animal: String): Animal = animal.toLowerCase match {\n    case \"bird\" => new Bird\n    case \"mammal\" => new Mammal\n    case \"fish\" => new Fish\n    case x: String => throw new RuntimeException(s\"Unknown animal: $x\")\n  }\n}\n```", "```java\n3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n```", "```java\nimport java.util.Properties\n\nobject CircleUtils {\n  val basicPi = 3.14\n  lazy val precisePi: Double = {\n    System.out.println(\"Reading properties for the precise PI.\")\n    val props = new Properties()\n    props.load(getClass.getResourceAsStream(\"pi.properties\"))\n    props.getProperty(\"pi.high\").toDouble\n  }\n\n  def area(radius: Double, isPrecise: Boolean = false): Double = {\n    val pi: Double = if (isPrecise) precisePi else basicPi\n    pi * Math.pow(radius, 2)\n  }\n}\n```", "```java\nobject Example {\n  def main(args: Array[String]): Unit = {\n    System.out.println(s\"The basic area for a circle with radius 2.5 is ${CircleUtils.area (2.5)}\")\n    System.out.println(s\"The precise area for a circle with radius 2.5 is ${CircleUtils.area (2.5, true)}\")\n    System.out.println(s\"The basic area for a circle with radius 6.78 is ${CircleUtils.area (6.78)}\")\n    System.out.println(s\"The precise area for a circle with radius 6.78 is ${CircleUtils.area (6.78, true)}\")\n  }\n}\n```", "```java\nobject StringUtils {\n  def countNumberOfSpaces(text: String): Int = text.split(\"\\\\s+\").length - 1\n}\n```", "```java\nobject UtilsExample {\n  def main(args: Array[String]): Unit = {\n    val sentence = \"Hello there! I am a utils example.\"\n    System.out.println(\n      s\"The number of spaces in '$sentence' is: ${StringUtils.countNumberOfSpaces(sentence)}\"\n    )\n  }\n}\n```", "```java\nobject AppRegistry {\n  System.out.println(\"Registry initialization block called.\")\n  private val users: Map[String, String] = TrieMap.empty\n\n  def addUser(id: String, name: String): Unit = {\n    users.put(id, name)\n  }\n\n  def removeUser(id: String): Unit = {\n    users.remove(id)\n  }\n\n  def isUserRegistered(id: String): Boolean = users.contains(id)\n\n  def getAllUserNames(): List[String] = users.map(_._2).toList\n}\n```", "```java\nobject AppRegistryExample {\n  def main(args: Array[String]): Unit = {\n    System.out.println(\"Sleeping for 5 seconds.\")\n    Thread.sleep(5000)\n    System.out.println(\"I woke up.\")\n    AppRegistry.addUser(\"1\", \"Ivan\")\n    AppRegistry.addUser(\"2\", \"John\")\n    AppRegistry.addUser(\"3\", \"Martin\")\n    System.out.println(s\"Is user with ID=1 registered? ${AppRegistry.isUserRegistered(\"1\")}\")\n    System.out.println(\"Removing ID=2\")\n    AppRegistry.removeUser(\"2\")\n    System.out.println(s\"Is user with ID=2 registered? ${AppRegistry.isUserRegistered(\"2\")}\")\n    System.out.println(s\"All users registered are: ${AppRegistry.getAllUserNames().mkString (\",\")}\")\n  }\n}\n```", "```java\nclass Person(builder: PersonBuilder) {\n  val firstName = builder.firstName\n  val lastName = builder.lastName\n  val age = builder.age\n}\n```", "```java\nclass PersonBuilder {\n  var firstName = \"\"\n  var lastName = \"\"\n  var age = 0\n\n  def setFirstName(firstName: String): PersonBuilder = {\n    this.firstName = firstName\n    this\n  }\n\n  def setLastName(lastName: String): PersonBuilder = {\n    this.lastName = lastName\n    this\n  }\n\n  def setAge(age: Int): PersonBuilder = {\n    this.age = age\n    this\n  }\n\n  def build(): Person = new Person(this)\n}\n```", "```java\nobject PersonBuilderExample {\n  def main(args: Array[String]): Unit = {\n    val person: Person = new PersonBuilder()\n      .setFirstName(\"Ivan\")\n      .setLastName(\"Nikolov\")\n      .setAge(26)\n      .build()\n    System.out.println(s\"Person: ${person.firstName} ${person.lastName}. Age: ${person.age}.\")\n  }\n}\n```", "```java\ncase class Person(\n  firstName: String = \"\",\n  lastName: String = \"\",\n  age: Int = 0\n)\n```", "```java\nobject PersonCaseClassExample {\n  def main(args: Array[String]): Unit = {\n    val person1 = Person(\n      firstName = \"Ivan\",\n      lastName = \"Nikolov\",\n      age = 26\n    )\n    val person2 = Person(\n      firstName = \"John\"\n    )\n    System.out.println(s\"Person 1: ${person1}\")\n    System.out.println(s\"Person 2: ${person2}\")\n  }\n}\n```", "```java\nsealed trait BuildStep\nsealed trait HasFirstName extends BuildStep\nsealed trait HasLastName extends BuildStep\n```", "```java\nclass Person(\n  val firstName: String,\n  val lastName: String,\n  val age: Int\n)\n```", "```java\ndef build(): Person = new Person(\n  firstName,\n  lastName,\n  age\n)\n```", "```java\nprotected def this() = this(\"\",\"\",0)\nprotected def this(pb: PersonBuilder[_]) = this(\n  pb.firstName,\n  pb.lastName,\n  pb.age\n)\n```", "```java\nobject PersonBuilder {\n  def apply() = new PersonBuilder[BuildStep]()\n}\n```", "```java\ndef setFirstName(firstName: String): PersonBuilder[HasFirstName] = {\n  this.firstName = firstName\n  new PersonBuilder[HasFirstName](this)\n}\n\ndef setLastName(lastName: String): PersonBuilder[HasLastName] = {\n  this.lastName = lastName\n  new PersonBuilder[HasLastName](this)\n}\n```", "```java\ndef build()(implicit ev: PassedStep =:= HasLastName): Person =\n  new Person(\n    firstName,\n    lastName,\n    age\n  )\n```", "```java\nclass PersonBuilder[PassedStep <: BuildStep] private(\n  var firstName: String,\n  var lastName: String,\n  var age: Int\n) {\n  protected def this() = this(\"\", \"\", 0)\n\n  protected def this(pb: PersonBuilder[_]) = this(\n    pb.firstName,\n    pb.lastName,\n    pb.age\n  )\n\n  def setFirstName(firstName: String): PersonBuilder[HasFirstName] = {\n    this.firstName = firstName\n    new PersonBuilder[HasFirstName](this)\n  }\n\n  def setLastName(lastName: String)(implicit ev: PassedStep =:= HasFirstName): PersonBuilder[HasLastName] = {\n    this.lastName = lastName\n    new PersonBuilder[HasLastName](this)\n  }\n\n  def setAge(age: Int): PersonBuilder[PassedStep] = {\n    this.age = age\n    this\n  }\n\n  def build()(implicit ev: PassedStep =:= HasLastName): Person =\n    new Person(\n      firstName,\n      lastName,\n      age\n    )\n}\n```", "```java\nobject PersonBuilderTypeSafeExample {\n  def main(args: Array[String]): Unit = {\n    val person = PersonBuilder()\n      .setFirstName(\"Ivan\")\n      .setLastName(\"Nikolov\")\n      .setAge(26)\n      .build()\n    System.out.println(s\"Person: ${person.firstName} ${person.lastName}. Age: ${person.age}.\")\n  }\n}\n```", "```java\nError:(103, 23) Cannot prove that com.ivan.nikolov.creational.builder.\ntype_safe.BuildStep =:=\ncom.ivan.nikolov.creational.builder.type_safe.HasFirstName.\n    .setLastName(\"Nikolov\")\n                       ^\n```", "```java\ncase class Person(\n  firstName: String = \"\",\n  lastName: String = \"\",\n  age: Int = 0\n) {\n  require(firstName != \"\", \"First name is required.\")\n  require(lastName != \"\", \"Last name is required.\")\n}\n```", "```java\nobject PersonCaseClassRequireExample {\n  def main(args: Array[String]): Unit = {\n    val person1 = Person(\n      firstName = \"Ivan\",\n      lastName = \"Nikolov\",\n      age = 26\n    )\n    System.out.println(s\"Person 1: ${person1}\")\n    try {\n      val person2 = Person(\n        firstName = \"John\"\n      )\n      System.out.println(s\"Person 2: ${person2}\")\n    } catch {\n      case e: Throwable =>\n        e.printStackTrace()\n    }\n  }\n}\n```", "```java\n/**\n  * Represents a bio cell\n  */\ncase class Cell(dna: String, proteins: List[String])\n```", "```java\nobject PrototypeExample {\n  def main(args: Array[String]): Unit = {\n    val initialCell = Cell(\"abcd\", List(\"protein1\", \"protein2\"))\n    val copy1 = initialCell.copy()\n    val copy2 = initialCell.copy()\n    val copy3 = initialCell.copy(dna = \"1234\")\n    System.out.println(s\"The prototype is: ${initialCell}\")\n    System.out.println(s\"Cell 1: ${copy1}\")\n    System.out.println(s\"Cell 2: ${copy2}\")\n    System.out.println(s\"Cell 3: ${copy3}\")\n    System.out.println(s\"1 and 2 are equal: ${copy1 == copy2}\")\n  }\n}\n```"]