["```java\n$('#helloForm input.greeting-name').on('value', function() {\n  $('#helloForm div.greeting-name').text('Hello ' + this.val() + '!');\n});\n```", "```java\ninput.greeting-name, then jQuery invokes the callback function, which updates the inner HTML in the div element layer, identified with the CSS class div.greeting.name. We could extend this code and write a generic solution with parameters, especially if we have more cases like this in our application, but sooner rather than later, programming at this low-level introduces complexities and bugs.\n```", "```java\n<!DOCTYPE HTML>\n<html>\n<head>\n  <script src=\"img/angular.js\"></script>\n</head>\n<body ng-app ng-init=\"greeting-name = 'Mr. Anderson'\">\n  <form>\n    <input ng-model=\"customer-name\" type=\"text\" />\n    <div class=\"greeting-name\">Hello {{customer-name}}!</div>\n  </form>\n</body>\n</html>\n```", "```java\n<form>\n  <input ng-model=\"customer-name\" type=\"text\" />\n  <div class=\"greeting-name\">Hello {{customer-name}}!</div>\n  <p>\n   <button class=\"btn-large\" ng-click=\"user-model = 'Karen'\">\n   Karen </button> </p>\n  <p>\n   <button class=\"btn-large\" ng-click=\"user-model = 'Albert'\">\n   Albert </button> </p>\n</form>\n```", "```java\n<!DOCTYPE html>\n<html ng-app=\"app\">\n  <head>\n    ...\n    <link href=\"styles/bootstrap.css\" rel=\"stylesheet\">\n    <link href=\"styles/main.css\" rel=\"stylesheet\">\n  </head>\n\n  <body ng-controller=\"CaseRecordController\">\n    ...\n    <div id=\"mainContent\">\n      ...\n      <div class=\"case-record-view\" >\n        ...\n        <div class=\"actionBar\"\n          ng-controller=\"NewCaseRecordModalController\" >\n          <button class=\"btn btn-primary\" ng-click=\"openCreateCaseRecordDialog()\" >Add New Case Record</button>\n          <div ng-show=\"selected\">Selection from a modal: {{ selected }}</div>\n        </div>\n\n        <h2 class=\"case-record-headline\">Case Records</h2>\n        <table class=\"table table-bordered\" >\n          <tr>\n            <th>Id</th>\n            <th>Last Name</th>\n            <th>First Name</th>\n            <th>Sex</th>\n            <th>Country</th>\n            <th>Passport No</th>\n            <th>D.o.B</th>\n            <th>Expiration Date</th>\n            <th>Status</th>\n          </tr>\n          ...\n        </table>\n      </div>\n    </div>\n  </body>\n</html>\n```", "```java\n    <tr ng-repeat-start=\"caseRecord in caseRecords\">\n      <td>\n        <div ng-controller=\"NewCaseRecordModalController\" style=\"display: inline;\">\n          <a class=\"btn\" href=\"#\" ng-click=\"showOrHideTasks($parent.caseRecord)\">\n          <i class=\"glyphicon\" ng-class=\"getIconClass($parent.caseRecord)\" ></i>\n          </a>\n        </div>\n      </td>\n      <td>{{caseRecord.lastName}}</td>\n      <td>{{caseRecord.firstName}}</td>\n      <td>{{caseRecord.sex}}</td>\n      <td>{{caseRecord.country}}</td>\n      <td>{{caseRecord.passportNo}}</td>\n      <td>{{caseRecord.dateOfBirth}}</td>\n      <td>{{caseRecord.expirationDate}}</td>\n      <td>{{caseRecord.currentState}}</td>\n    </tr>\n```", "```java\n<tr ng-repeat-end  ng-if=\"caseRecord.showTasks\" >\n  <td colspan=\"9\">\n    <div class=\"case-record-task-view\">\n      <div ng-controller=\"NewCaseRecordModalController\">\n        <button class=\"btn btn-info\"\n        ng-click=\"openEditCaseRecordDialog($parent.caseRecord)\" >Edit Case Record Details</button>\n        <button class=\"btn btn-info\"\n        ng-click=\"changeStateCaseRecordDialog($parent.caseRecord)\" >Change State</button>\n      </div>\n      <br />\n\n      <div ng-controller=\"NewTaskModalController\">\n        <p>\n          <button class=\"btn btn-primary\"\n            ng-click=\"openNewTaskDialog(caseRecord.id)\">Add New Task</button>\n        </p>\n      </div>\n\n      <table class=\"case-record-task-table\">\n        <tr>\n          <td> Item </td>\n          <td> Description </td>\n          <td> Completed </td>\n          <td> Due Date </td>\n          <td> Control </td>\n        </tr>\n\n        <tr ng-repeat=\"task in caseRecord.tasks\">\n          ...\n        </tr><!-- ng-repeat-end ## tasks in caseRecords.tasks -->\n      </table>\n    </div>\n  </td>\n</tr><!-- ng-repeat-end ## caseRecord in caseRecords -->\n```", "```java\n<tr ng-repeat=\"task in caseRecord.tasks\">\n  <td> {{task.id}} </td>\n  <td>\n    <span class=\"done-{{task.completed}}\"> {{task.name}} </span>\n  </td>\n  <td>\n    <label class=\"checkbox\">\n      <input type=\"checkbox\" ng-model=\"task.completed\" ng-change=\"updateProjectTaskCompleted(task)\">\n      Done\n    </label>\n  </td>\n  <td>\n    {{task.targetDate}}\n  </td>\n  <td>\n    <div ng-controller=\"NewTaskModalController\">\n      <a class=\"btn\" href=\"#\"ng-click=\"openEditTaskDialog($parent.task)\" >\n        <i class=\"glyphicon glyphicon-edit\"></i></a>\n      <a class=\"btn\" href=\"#\"ng-click=\"openDeleteTaskDialog($parent.task)\" >\n        <i class=\"glyphicon glyphicon-trash\"></i></a>\n    </div>\n  </td>\n</tr><!-- ng-repeat-end ## tasks in caseRecords.tasks -->\n```", "```java\n.done-true {\n  text-decoration: line-through; color: #52101d;\n}\n```", "```java\n<html ng-app=\"app\">  ...\n  <body> ...\n    <script src=\"img/jquery-2.1.3.js\"></script>\n    <script src=\"img/angular.js\"></script>\n    <script src=\"img/bootstrap.js\"></script>\n    <script src=\"img/ui-bootstrap-tpls-0.12.1.js\"></script>\n    <script src=\"img/main.js\"></script>\n    <script src=\"img/newcaserecord-modal.js\"></script>\n    <script src=\"img/newtask-modal.js\"></script>\n    <script src=\"img/shared-service.js\"></script>\n    <script src=\"img/iso-countries.js\"></script>\n  </body>\n</html>\n```", "```java\nvar myApp = angular.module('app', ['ui.bootstrap', 'newcaserecord','newtask', 'sharedService', 'isoCountries']);\n```", "```java\nangular.module('myApp', [ 'depend1', 'depend2'])\n  .controller( 'controller1', function( depend1, depend2 ) {\n      /* ... */\n  })\n  .controller( 'controller2', function( depend1 ) {\n      /* ... */   \n  })\n  .filter('greet', function() {\n   return function(name) {\n      return 'Hello, ' + name + '!';\n    };\n  }) \n  .service( 'our-factory', function( ... ) {\n      /* ... */   \n  })\n  .directive( 'my-directive', function( ... ) {\n      /* ... */   \n});\n```", "```java\n<body ng-controller=\"CaseRecordController\">\n```", "```java\nmyApp.controller('CaseRecordController',  function ($scope, $http, $log, UpdateTaskStatusFactory, sharedService, isoCountries ) {\n  var self = this;\n  $scope.caseRecords = [{sex: \"F\", firstName: \"Angela\", lastName: \"Devonshire\", dateOfBirth: \"1982-04-15\", expirationDate: \"2018-11-21\", country: \"Australia\", passportNo: \"123456789012\", currentState: \"Start\"},];\n\n  $scope.isoCountries = isoCountries;\n\n  $scope.getCaseRecords = function () {\n    $http.get('rest/caseworker/list').success(function(data) {\n      $scope.caseRecords = data;\n    });\n  }\n\n  $scope.$on('handleBroadcastMessage', function() {\n    var message = sharedService.getBroadcastMessage();\n    if ( message !== \"showTasksCaseRecord\")  {\n      $scope.getCaseRecords();\n    }\n  })\n\n  // Retrieve the initial list of case records\n  $scope.getCaseRecords();\n\n  $scope.connect = function() {\n    UpdateTaskStatusFactory.connect();\n  }\n\n  $scope.send = function( msg ) {\n    UpdateTaskStatusFactory.send(msg);\n  }\n\n  $scope.updateProjectTaskCompleted = function( task ) {\n    var message = { 'caseRecordId': task.caseRecordId, 'taskId': task.id, 'completed': task.completed }\n    $scope.connect()\n    var jsonMessage = JSON.stringify(message)\n    $scope.send(jsonMessage)\n  }\n});\n```", "```java\nfunction ($scope, $http, $log, UpdateTaskStatusFactory, sharedService, isoCountries ) { /* ... */ }\n```", "```java\n$scope.getCaseRecords = function () {\n  $http.get('rest/caseworker/list').success(function(data) {\n    $scope.caseRecords = data;\n  });\n}\n```", "```java\n  $scope.$on('handleBroadcastMessage', function() {\n    var message = sharedService.getBroadcastMessage();\n    if ( message !== \"showTasksCaseRecord\")  {\n      $scope.getCaseRecords();\n    }\n  })\n```", "```java\nvar newcaserecord = angular.module('newcaserecord', ['ui.bootstrap.modal', 'sharedService','isoCountries'])\n\nnewcaserecord.controller('NewCaseRecordModalController', function($scope, $modal, $http, $log, sharedService, isoCountries ) {\n  $scope.caseRecord = {\n    sex: \"F\", firstName: \"\", lastName: \"\", country: \"\", passportNo: \"\", dateOfBirth: \"\", expirationDate: \"\", country: \"\", currentState: \"\", showTasks: false};\n  $scope.returnedData = null;\n  $scope.isoCountries = isoCountries;\n\n  $scope.openCreateCaseRecordDialog = function () {\n    var modalInstance = $modal.open({\n      templateUrl: 'newCaseRecordContent.html', controller: newCaseRecordModalInstanceController, isoCountries: isoCountries, resolve: {\n            caseRecord: function () {\n              return $scope.caseRecord;\n            }\n      }\n    });\n\n    modalInstance.result.then(function (data) {\n      $scope.selected = data;\n      $http.post('rest/caseworker/item', $scope.caseRecord).success(function(data) {\n        $scope.returnedData = data;\n        sharedService.setBroadcastMessage(\"newCaseRecord\");\n      });\n\n    }, function () {\n      $log.info('Modal dismissed at: ' + new Date());\n    });\n  };\n  // . . .\n);\n```", "```java\nvar modalInstance = $modal.open({\n  templateUrl: 'newCaseRecordContent.html',\n    controller: newCaseRecordModalInstanceController,\n      resolve: {\n        caseRecord: function () {\n          return $scope.caseRecord;\n        }\n      }\n});\n```", "```java\n    modalInstance.result.then(function (data) {...},\n       function () { /* modal dismissed */ });\n```", "```java\nvar newCaseRecordModalInstanceController = function ($scope, $modalInstance, caseRecord ) {\n  caseRecord.showTasks = true; // Convenience for the user\n  $scope.caseRecord = caseRecord;\n\n  $scope.ok = function () {\n    $modalInstance.close(true);\n  };\n\n  $scope.cancel = function () {\n    $modalInstance.dismiss('cancel');\n  };\n};\n```", "```java\n<script type=\"text/ng-template\" id=\"newCaseRecordContent.html\">\n  <div class=\"modal-header\">\n    <h3>New Case Record </h3>\n  </div>\n  <div class=\"modal-body\">\n    <form name=\"newCaseRecordForm\" class=\"css-form\" novalidate>\n      Sex:<br />\n      <select ng-model=\"caseRecord.sex\" required>\n        <option value=\"F\" ng-option=\"selected caseRecord.sex === 'F'\">Female</option>\n        <option value=\"M\" ng-option=\"selected caseRecord.sex === 'M'\">Male</option>\n      </select>\n      <br/>\n      First Name:<br />\n      <input type=\"text\" ng-model=\"caseRecord.firstName\" required /><br />\n      Last Name:<br />\n      <input type=\"text\" ng-model=\"caseRecord.lastName\" required /><br />\n      Date of Birth:<br />\n      <input type=\"text\" ng-model=\"caseRecord.dateOfBirth\" datepicker-popup=\"yyyy-MM-dd\" required /><br />\n      Country:<br />\n      <select ng-model=\"caseRecord.country\" required ng-options=\"item.code as item.country for item in isoCountries.countryToCodeArrayMap\">\n      </select>\n      <br />\n      Passport Number:<br />\n      <input type=\"text\" ng-model=\"caseRecord.passportNo\" required /><br />\n      Expiration Date:<br />\n      <input type=\"text\" ng-model=\"caseRecord.expirationDate\" datepicker-popup=\"yyyy-MM-dd\" required /><br />\n    </form>\n  </div>\n  <div class=\"modal-footer\">\n    <button class=\"btn btn-primary\" ng-click=\"ok()\" ng-disabled=\"newCaseRecordForm.$invalid\" >OK</button>\n    <button class=\"btn btn-warning\" ng-click=\"cancel()\">Cancel</button>\n  </div>\n</script>\n```", "```java\n<input type=\"text\" ng-model=\"caseRecord.dateOfBirth\" datepicker-popup=\"yyyy-MM-dd\" required />\n```", "```java\n<select ng-model=\"caseRecord.country\" required\n  ng-options=\"item.code as item.country for item in\n    isoCountries.countryToCodeArrayMap\">\n</select>\n```", "```java\nvar newtask = angular.module('newtask', ['ui.bootstrap.modal', 'sharedService'])\nnewtask.config(function($httpProvider) {\n  $httpProvider.defaults.headers[\"delete\"] = {\n    'Content-Type': 'application/json;charset=utf-8'\n  };\n})\n```", "```java\nnewtask.controller('NewTaskModalController', function($scope, $modal, $http, $log, sharedService ) {\n  $scope.selected = false;\n  $scope.task = {\n      id: 0, name: '', targetDate: null, completed: false, caseRecordId: 0\n  };\n  $scope.returnedData = null;\n  $scope.openNewTaskDialog = function(caseRecordId) {\n    var modalInstance = $modal.open({\n      templateUrl: 'newTaskContent.html',\n      controller: newTaskModalInstanceController,\n      resolve: {\n        task: function () {\n          return $scope.task;\n        }\n      }\n    });\n\n    modalInstance.result.then(function (data) {\n      $scope.selected = data;\n      $http.post('rest/caseworker/item/'+caseRecordId+'/task', $scope.task).success(function(data) {\n        $scope.returnedData = data;\n        sharedService.setBroadcastMessage(\"newTask\");\n        // Reset Task in this scope for better UX affordance.\n        $scope.task = {\n          id: 0, name: '', targetDate: null, completed: false, caseRecordId: 0\n        };\n      });\n    }, function () {\n        $log.info('Modal dismissed at: ' + new Date());\n    });\n  };\n\n  $scope.openEditTaskDialog = function(taskItem) {\n    // ...\n  };\n\n  $scope.openDeleteTaskDialog = function(taskItem) {\n    // ...\n  };\n});\n```", "```java\nvar newTaskModalInstanceController = function ($scope, $modalInstance, task) {\n  $scope.task = task;\n\n  $scope.ok = function () {\n      $modalInstance.close(true);\n  };\n\n  $scope.cancel = function () {\n    $modalInstance.dismiss('cancel');\n  };\n};\n```", "```java\n<script type=\"text/ng-template\" id=\"newTaskContent.html\">\n  <div class=\"modal-header\">\n    <h3>New Task</h3>\n  </div>\n  <div class=\"modal-body\">\n    <form name=\"newTaskForm\" class=\"css-form\" novalidate>\n      Task Name:<br />\n      <textarea ng-model=\"task.name\" rows=\"3\" required /><br />\n      Target Date:  <br />\n      <input type=\"text\" datepicker-popup=\"yyyy-MM-dd\" ng-model=\"task.targetDate\" required /><br />\n      Task Completed: <br />\n      Done <input type=\"checkbox\" ng-model=\"task.completed\" />\n        <br />\n    </form>\n  </div>\n  <div class=\"modal-footer\">\n    <button class=\"btn btn-primary\" ng-click=\"ok()\" ng-disabled=\"newTaskForm.$invalid\" >OK</button>\n    <button class=\"btn btn-warning\" ng-click=\"cancel()\">Cancel</button>\n  </div>\n</script>\n```", "```java\n$scope.changeStateCaseRecordDialog = function (caseRecordItem) {\n    /* Copy  */\n  $scope.caseRecord = {\n    id: caseRecordItem.id,\n    firstName: caseRecordItem.firstName,\n    lastName: caseRecordItem.lastName,\n    dateOfBirth: caseRecordItem.dateOfBirth,\n    country: caseRecordItem.country,\n    passportNo: caseRecordItem.passportNo,\n    expirationDate: caseRecordItem.expirationDate,\n    currentState: caseRecordItem.currentState,\n    nextStates: caseRecordItem.nextStates,\n    showTask: caseRecordItem.showTasks\n  };\n\n  $scope.caseRecord.nextStates.push( caseRecordItem.currentState );\n  $scope.saveCurrentState = caseRecordItem.currentState;\n\n  var modalInstance = $modal.open({\n    templateUrl: 'changeStateCaseRecordContent.html', controller: moveStateRecordModalInstanceController, resolve: {\n          caseRecord: function () {\n            return $scope.caseRecord;\n          }\n      }\n  });\n\n  modalInstance.result.then(function (data) {\n      $scope.selected = data;\n      if ( $scope.saveCurrentState !== $scope.caseRecord.currentState ) {\n          $http.put('rest/caseworker/state/'+$scope.caseRecord.id, $scope.caseRecord).success(function(data) {\n            $scope.returnedData = data;\n            sharedService.setBroadcastMessage(\"editCaseRecord\");\n          });\n      }\n  }, function () { $log.info('Modal dismissed.\"); } );\n};\n```", "```java\n<script type=\"text/ng-template\" id=\"changeStateCaseRecordContent.html\">\n  <div class=\"modal-header\">\n    <h3>Change State of Case Record</h3>\n  </div>\n  <div class=\"modal-body\">\n    <p>\n      <table class=\"table table-bordered\">\n        <tr>\n          <th> Field </th> <th> Value </th>\n        </tr>\n        <tr>\n\n          <td> Case Record Id</td> <td> {{caseRecord.id }}</td>\n        </tr>\n          ...\n      </table>\n    </p>\n      <form name=\"moveStateCaseRecordForm\" class=\"css-form\" novalidate>\n      Next States:<br />\n      <select ng-model=\"caseRecord.currentState\" ng-options=\"state for state in caseRecord.nextStates\">\n      </select>\n      </form>\n  </div>\n  <div class=\"modal-footer\">\n    <button class=\"btn btn-primary\" ng-click=\"ok()\" ng-disabled=\"moveStateCaseRecordForm.$invalid\" >OK</button>\n    <button class=\"btn btn-warning\" ng-click=\"cancel()\">Cancel</button>\n  </div>\n</script>\n```", "```java\nvar moveStateRecordModalInstanceController = function ($scope, $modalInstance, caseRecord) {\n  $scope.caseRecord = caseRecord;\n  $scope.ok = function () { $modalInstance.close(true); };\n  $scope.cancel = function () { $modalInstance.dismiss('cancel'); };\n};\n```", "```java\n$scope.showOrHideTasks = function(caseRecord) {\n  caseRecord.showTasks = !caseRecord.showTasks;\n  $http.put('rest/caseworker/showtasks/'+caseRecord.id, caseRecord).success(function(data) {\n    sharedService.setBroadcastMessage(\"showTasksCaseRecord\");\n  });\n}\n```", "```java\n$scope.getIconClass = function(caseRecord) {\n  if ( caseRecord.showTasks)\n    return \"glyphicon-minus\"\n  else\n    return \"glyphicon-plus\"\n}\n```", "```java\n<i class=\"glyphicon\" ng-class=\"{true: 'glyphicon-minus', false: 'glyphicon-plus'}[caseRecord.showTasks]\">\n```", "```java\n@NamedQueries({\n  @NamedQuery(name=\"CaseRecord.findAllCases\",\n    query = \"select c from CaseRecord c order by c.lastName, c.firstName\"),\n    /* ... */\n})\n@Entity\n@Table(name = \"CASE_RECORD\")\npublic class CaseRecord {\n  @Id @GeneratedValue(strategy = GenerationType.AUTO)\n  private Integer id;\n  @NotEmpty @Size(max=64) private String lastName;\n  @NotEmpty @Size(max=64) private String firstName;\n  @NotEmpty @Size(max=1) private String sex;\n  @NotEmpty @Size(max=16) private String passportNo;\n  @NotEmpty @Size(max=32) private String country;\n  @Past @NotNull @Temporal(TemporalType.DATE) private Date dateOfBirth;\n  @Future @NotNull @Temporal(TemporalType.DATE) private Date expirationDate;\n  @NotEmpty private String currentState;\n  private boolean showTasks;\n  @OneToMany(cascade = CascadeType.ALL, mappedBy = \"caseRecord\", fetch = FetchType.EAGER)\n  private List<Task> tasks = new ArrayList<>();\n\n  // Required by JPA\n  public CaseRecord() {}\n  /*  ... */\n}\n```", "```java\n@Entity\npublic class Task {\n  @Id @GeneratedValue(strategy = GenerationType.AUTO)\n  @Column(name=\"TASK_ID\") private Integer id;\n  @NotEmpty @Size(max=256) private String name;\n  @Temporal(TemporalType.DATE)\n  @Column(name=\"TARGET_NAME\") @Future\n  private Date targetDate;\n  private boolean completed;\n  @ManyToOne(cascade = CascadeType.ALL)\n  @JoinColumn(name=\"CASE_RECORD_ID\")\n  private CaseRecord caseRecord;\n\n  public Task() { /* Required by JPA */ }\n  /*  ... */\n}\n```", "```java\npackage uk.co.xenonique.nationalforce.control;\n/* ... */\nimport javax.json.*;\nimport javax.json.stream.*;\nimport javax.ws.rs.*;\nimport javax.ws.rs.container.*;\nimport javax.ws.rs.core.*;\nimport static javax.ws.rs.core.MediaType.*;\n\n@Path(\"/caseworker/\")\n@Stateless\npublic class CaseWorkerRESTServerEndpoint {\n  static JsonGeneratorFactory jsonGeneratorFactory = Json.createGeneratorFactory(new HashMap<String, Object>() {{\n        put(JsonGenerator.PRETTY_PRINTING, true);\n      }});\n\n  @Inject\n  CaseRecordTaskService service;\n/* ... */\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app  ...\n         version=\"3.1\" ... >\n  <servlet>\n    <servlet-name>javax.ws.rs.core.Application</servlet-name>\n    <load-on-startup>1</load-on-startup>\n    <async-supported>true</async-supported>\n  </servlet>\n  <servlet-mapping>\n    <servlet-name>javax.ws.rs.core.Application</servlet-name>\n    <url-pattern>/rest/*</url-pattern>\n  </servlet-mapping>\n  <resource-env-ref>\n    <resource-env-ref-name>\n      concurrent/LongRunningTasksExecutor\n    </resource-env-ref-name>\n    <resource-env-ref-type>\n      javax.enterprise.concurrent.ManagedExecutorService\n    </resource-env-ref-type>\n  </resource-env-ref>\n</web-app>\n```", "```java\n  @Resource(name=\"concurrent/LongRunningTasksExecutor\")\n  ManagedExecutorService executor;\n\n  @GET\n  @Produces(MediaType.APPLICATION_JSON)\n  @Path(\"/list\")\n  public void getCaseRecordList(\n    @Suspended final AsyncResponse asyncResponse) {\n    executor.submit(new Runnable() {\n      @Override\n      public void run() {\n        final List<CaseRecord> caseRecords = service.findAllCases();\n        final StringWriter swriter = new StringWriter();\n        final JsonGenerator generator = jsonGeneratorFactory.createGenerator(swriter);\n          CaseRecordHelper.generateCaseRecordAsJson(generator, caseRecords).close();\n          final Response response = Response.ok(swriter.toString()).build();\n          asyncResponse.resume(response);\n      }\n    });\n  }\n```", "```java\n  @GET\n  @Path(\"/item/{id}\")\n  @Produces(APPLICATION_JSON)\n  public String retrieveCase(\n      @PathParam(\"id\") int caseId ) {\n    List<CaseRecord> caseRecords = service.findCaseById( caseId );\n    StringWriter swriter = new StringWriter();\n    JsonGenerator generator = jsonGeneratorFactory.createGenerator(swriter);\n    CaseRecordHelper.writeCaseRecordAsJson(generator, caseRecords.get(0)).close();\n    return swriter.toString();\n  }\n```", "```java\n  @POST\n  @Path(\"/item\")\n  @Consumes(APPLICATION_JSON)\n  @Produces(APPLICATION_JSON)\n  public String createCase( JsonObject json )\n    throws Exception {\n    CaseRecord caseRecord = new CaseRecord();\n    caseRecord.setSex(json.getString(\"sex\"));\n    caseRecord.setFirstName(json.getString(\"firstName\"));\n    caseRecord.setLastName(json.getString(\"lastName\"));\n    caseRecord.setCountry(json.getString(\"country\"));\n    caseRecord.setPassportNo(json.getString(\"passportNo\"));\n    caseRecord.setDateOfBirth( CaseRecordHelper.FMT2.parse(json.getString(\"dateOfBirth\")));\n    caseRecord.setExpirationDate( CaseRecordHelper.FMT2.parse(json.getString(\"expirationDate\")));\n    caseRecord.setCurrentState( BasicStateMachine.FSM_START.toString());\n    caseRecord.setShowTasks(json.getBoolean(\"showTasks\", false));\n\n    JsonArray tasksArray = json.getJsonArray(\"tasks\");\n    if ( tasksArray != null ) {\n      for ( int j=0; j<tasksArray.size(); ++j ) {\n        JsonObject taskObject = tasksArray.getJsonObject(j);\n        Task task = new Task(taskObject.getString(\"name\"), ( taskObject.containsKey(\"targetDate\") ?\n              CaseRecordHelper.FMT.parse(taskObject.getString(\"targetDate\")) : null ), taskObject.getBoolean(\"completed\"));\n            caseRecord.addTask(task);\n            task.setCaseRecord(caseRecord);\n        }\n    }\n\n    service.saveCaseRecord(caseRecord);\n    StringWriter swriter = new StringWriter();\n    JsonGenerator generator = jsonGeneratorFactory.createGenerator(swriter);\n    CaseRecordHelper.writeCaseRecordAsJson(generator, caseRecord).close();\n    return swriter.toString();\n}\n```", "```java\n@PUT\n@Path(\"/item/{caseId}\")\n@Consumes(APPLICATION_JSON)\n@Produces(APPLICATION_JSON)\npublic String updateCase(\n  @PathParam(\"caseId\") int caseId, JsonObject json ) throws Exception {\n  final List<CaseRecord> caseRecords = service.findCaseById(caseId);\n  CaseRecord caseRecord = caseRecords.get(0);\n  caseRecord.setSex(json.getString(\"sex\"));\n  /* ... omitted */\n  caseRecord.setDateOfBirth( FMT2.parse( json.getString(\"dateOfBirth\")));\n  caseRecord.setExpirationDate( FMT2.parse(json.getString(\"expirationDate\")));\n  caseRecord.setCurrentState( BasicStateMachine.retrieveCurrentState( json.getString(\"currentState\", BasicStateMachine.FSM_START.toString())).toString());\n  caseRecord.setShowTasks(json.getBoolean(\"showTasks\", false));\n  service.saveCaseRecord(caseRecord);\n  final StringWriter swriter = new StringWriter();\n  final JsonGenerator generator = jsonGeneratorFactory.createGenerator(swriter);\n  CaseRecordHelper.writeCaseRecordAsJson(generator, caseRecord).close();\n  return swriter.toString();\n}\n```", "```java\n@POST\n@Path(\"/item/{caseId}/task\")\n@Consumes(APPLICATION_JSON)\n@Produces(APPLICATION_JSON)\npublic String createNewTaskOnCase(\n  @PathParam(\"caseId\") int caseId, JsonObject taskObject ) throws Exception\n{\n  final List<CaseRecord> caseRecords =\n    service.findCaseById(caseId);\n  final CaseRecord caseRecord = caseRecords.get(0);\n  final Task task = new Task(\n    taskObject.getString(\"name\"),\n    ( taskObject.containsKey(\"targetDate\") ?\n      CaseRecordHelper.convertToDate(\n      taskObject.getString(\"targetDate\")) :\n      null ),\n    ( taskObject.containsKey(\"completed\")) ?\n        taskObject.getBoolean(\"completed\") : false );\n  caseRecord.addTask(task);\n  service.saveCaseRecord(caseRecord);\n  final StringWriter swriter = new StringWriter();\n  JsonGenerator generator =\n    jsonGeneratorFactory.createGenerator(swriter);\n  CaseRecordHelper.writeCaseRecordAsJson(\n    generator, caseRecord).close();\n  return swriter.toString();\n}\n```", "```java\n@PUT\n@Path(\"/item/{caseRecordId}/task/{taskId}\")\n@Consumes(APPLICATION_JSON)\n@Produces(APPLICATION_JSON)\npublic String updateTaskOnCase(\n  @PathParam(\"caseRecordId\") int caseRecordId,\n  @PathParam(\"taskId\") int taskId,\n  JsonObject taskObject ) throws Exception\n{\n  final List<CaseRecord> caseRecords =\n    service.findCaseById(caseRecordId);\n  final CaseRecord caseRecord = caseRecords.get(0);\n  caseRecord.getTasks().stream().filter(\n    task -> task.getId().equals(taskId)).forEach(\n      task -> {\n        task.setName( taskObject.getString(\"name\") );\n        task.setTargetDate(\n          taskObject.containsKey(\"targetDate\") ?\n          CaseRecordHelper.convertToDate(\n            taskObject.getString(\"targetDate\")) : null );\n        task.setCompleted(taskObject.containsKey(\"completed\") ?\n            taskObject.getBoolean(\"completed\") : false );\n    }); \n  service.saveCaseRecord(caseRecord);\n  final StringWriter swriter = new StringWriter();\n  final JsonGenerator generator =\n    jsonGeneratorFactory.createGenerator(swriter);\n  CaseRecordHelper.writeCaseRecordAsJson(\n    generator, caseRecord).close();\n  return swriter.toString();\n}\n```", "```java\n@DELETE\n@Path(\"/item/{caseRecordId}/task/{taskId}\")\n@Consumes( { APPLICATION_JSON, APPLICATION_XML, TEXT_PLAIN })\n@Produces(APPLICATION_JSON)\npublic String removeTaskFromCase(\n  @PathParam(\"caseRecordId\") int caseRecordId,\n  @PathParam(\"taskId\") int taskId,\n  JsonObject taskObject )\n  throws Exception\n{\n  final List<CaseRecord> caseRecords =\n    service.findCaseById(caseRecordId);\n  final CaseRecord caseRecord = caseRecords.get(0);\n  caseRecord.getTasks().stream().filter(\n    task -> task.getId().equals(taskId))\n    .forEach( task -> caseRecord.removeTask(task) );\n  service.saveCaseRecord(caseRecord);\n  final StringWriter swriter = new StringWriter();\n  final JsonGenerator generator =\n          jsonGeneratorFactory.createGenerator(swriter);\n  CaseRecordHelper.writeCaseRecordAsJson(generator, caseRecord).close();\n  return swriter.toString();\n}\n```", "```java\n  $scope.updateProjectTaskCompleted = function( task ) {\n      var message = { 'caseRecordId': task.caseRecordId, 'taskId': task.id, 'completed': task.completed }\n      $scope.connect()\n      var jsonMessage = JSON.stringify(message)\n      $scope.send(jsonMessage)\n  }\n```", "```java\nmyApp.factory('UpdateTaskStatusFactory', function( $log ) {\n  var service = {};\n\n  service.connect = function() {\n    if (service.ws) { return; }\n    var ws = new WebSocket(\"ws://localhost:8080/\n      xen-force-angularjs-1.0-SNAPSHOT/update-task-status\");\n    ws.onopen = function() {\n      $log.log(\"WebSocket connect was opened\"); };\n    ws.onclose = function() {\n      $log.log(\"WebSocket connection was closed\"); }\n    ws.onerror = function() {\n      $log.log(\"WebSocket connection failure\"); }\n    ws.onmessage = function(message) {\n      $log.log(\"message received [\"+message+\"]\"); };\n    service.ws = ws;\n  }\n\n  service.send = function(message) {\n      service.ws.send(message);\n  }\n\n  return service;\n});\n```", "```java\npackage uk.co.xenonique.nationalforce.control;\n/* ... */\nimport javax.websocket.*;\nimport javax.websocket.server.ServerEndpoint;\n\n@ServerEndpoint(\"/update-task-status\")\n@Stateless\npublic class CaseRecordUpdateTaskWebSocketEndpoint {\n  @Inject\n  CaseRecordTaskService service;\n\n  static JsonGeneratorFactory jsonGeneratorFactory =\n    Json.createGeneratorFactory(...);\n\n  @OnMessage\n  public String updateTaskStatus(String message) {\n    final StringReader stringReader = new StringReader(message);\n    final JsonReader reader = Json.createReader(stringReader);\n    final JsonObject obj = reader.readObject();\n    final int projectId = obj.getInt(\"caseRecordId\");\n    final int taskId = obj.getInt(\"taskId\");\n    final boolean completed = obj.getBoolean(\"completed\");\n    final List<CaseRecord> projects =\n      service.findCaseById(projectId);\n    if ( !projects.isEmpty()) {\n      projects.get(0).getTasks().stream()\n        .filter(task -> task.getId() == taskId).\n        forEach(task -> {\n            task.setCompleted(completed);\n            service.saveCaseRecord(task.getCaseRecord());\n        });\n      return \"OK\";\n    }\n    return \"NOT FOUND\";\n  }\n\n  @OnOpen\n  public void open( Session session ) { ... }\n  @OnClose\n  public void close( Session session ) { ... }\n  @OnError\n  public void error( Session session, Throwable err ){\n      err.printStackTrace(System.err);\n  }\n}\n```"]