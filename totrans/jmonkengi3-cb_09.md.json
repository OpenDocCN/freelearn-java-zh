["```java\n    muzzleFlash = (ParticleEmitter) ((Node)spatial).getChild(\"MuzzleFlash\");\n    ```", "```java\n    if(muzzleFlash != null){\n      muzzleFlash.emitAllParticles();\n    }\n    ```", "```java\nvoid update(float tpf);\nvoid trigger();\nvoidonTrigger();\n```", "```java\n    private boolean enabled;\n    private float delay;\n    private boolean triggered;\n    private float timer;\n    private HashMap<String, ScriptObject> targets;\n    ```", "```java\n    If enabled is false it shouldn't do anything.\n    Otherwise timer should be set to 0 and triggered to true.\n    ```", "```java\n    if(isEnabled() && volume != null && actors != null){\n      for(int i = 0; i<actors.size(); i++ ){\n        Spatial n = actors.get(i);\n        if(volume.contains(n.getWorldTranslation())){\n          trigger();\n        }\n      }\n    }\n    ```", "```java\n    target.setLocalTranslation(position);\n    target.setLocalRotation(rotation);\n    sceneNode.attachChild(target);\n    ```", "```java\n    for(int i = 0; i<actors.size(); i++ ){\n\n      Spatial actor = actors.get(i);\n      if((actor.getWorldTranslation().distance(position) <triggerDistance)){\n        triggeringActor = actor;\n        trigger();\n      }\n    }\n    ```", "```java\n    public interface TimerEvent{\n      public Object[] call();\n    }\n    ```", "```java\n    public void addTimerEvent(float time, TimerEvent callback){\n      timerEvents.put(time, callback);\n      if(time >maxTime ){\n        maxTime = time;\n      }\n    }\n    ```", "```java\n    Iterator<Float> it = timerEvents.keySet().iterator();\n    while(it.hasNext()){\n      float t = it.next();\n      if(t >lastTime&& t <= time){\n        TimerEvent event = timerEvents.get(t);\n        if(event != null){\n          event.call();\n        }\n      } else if(t <lastTime){\n        continue;\n      }\n    }\n    ```", "```java\n    explosionTimer.addTimerEvent(0, new Timer.TimerEvent() {\n\n      public Object[] call() {\n        flashEffect.trigger();\n        sparkEffect.trigger();\n        ...\n        return null;\n      }\n    });\n    ```", "```java\n    ScriptAppStateappState = new ScriptAppState();\n    stateManager.attach(appState);\n    appState.addScriptObject(explosionTimer);\n    ```", "```java\n    Boolean contains = volume.contains(player.getWorldTranslation());\n    if(!inside && contains){\n      guiNode.attachChild(interactionPrompt);\n    } else if (inside && !contains){guiNode.detachChild(interactionPrompt);\n    }\n    inside = contains;\n    ```", "```java\n    inputManager.addMapping(INTERACTION_KEY, new KeyTrigger(KeyInput.KEY_SPACE));\n    ```", "```java\n    inputManager.addListener(interactionTrigger, mappingNames);\n    ```", "```java\n    aiControl.setState(targetState);\n    ```", "```java\n    if(spatial.getControl(state) != null){\n    spatial.getControl(state).setEnabled(true);\n    }\n    ```", "```java\n    Geometry sun = new Geometry(\"Sun\", new Quad(1.5f, 1.5f));\n    ```", "```java\n    sun.setQueueBucket(RenderQueue.Bucket.Sky);\n    sun.setCullHint(Spatial.CullHint.Never);\n    sun.setShadowMode(RenderQueue.ShadowMode.Off);\n    ```", "```java\n    sunMat.getAdditionalRenderState().setBlendMode(RenderState.BlendMode.Alpha);\n    sunMat.setTexture(\"ColorMap\", assetManager.loadTexture(\"Textures/sun.png\"));\n    sunMat.setColor(\"Color\", new ColorRGBA(1f, 1f, 0.9f, 1f));\n    ```", "```java\n    float x = FastMath.cos(time) * 10f;\n    float z = FastMath.sin(time) * 10f;\n    float y = FastMath.sin(time ) * 5f;\n    position.set(x, y, z);\n    ```", "```java\n    spatial.setLocalTranslation((cam.getLocation().add(position)));\n    ```", "```java\n    spatial.lookAt(cam.getLocation(), Vector3f.UNIT_Y);\n    ```", "```java\n    directionalLight.setDirection(position.negate());\n    ```", "```java\n    time += tpf * timeFactor;\n    time = time % FastMath.TWO_PI;\n    ```", "```java\n    sun.addControl(sunControl);\n    rootNode.attachChild(sun);\n    ```", "```java\n    sunColor.interpolate(eveningColor, dayColor, FastMath.sqr(height));\n    ```", "```java\n    directionalLight.setColor(sunColor);\n    ((Geometry)spatial).getMaterial().setColor(\"Color\", sunColor);\n    ```", "```java\n    private static final ColorRGBA dayColor = new ColorRGBA(0.5f, 0.5f, 1f, 1f);\n    private static final ColorRGBA eveningColor = new ColorRGBA(1f, 0.7f, 0.5f, 1f);\n    private static final ColorRGBA nightColor = new ColorRGBA(0.1f, 0.1f, 0.2f, 1f);\n    ```", "```java\n    if(sunHeight> 0){\n      color.interpolate(eveningColor, dayColor, FastMath.pow(sunHeight, 4));\n    } else {\n      color.interpolate(eveningColor, nightColor, FastMath.pow(sunHeight, 4));\n    }\n    ((Geometry)spatial).getMaterial().setColor(\"Color\", color);\n    ```", "```java\nVertexShader GLSL100:   Common/MatDefs/Misc/Unshaded.vert\n```", "```java\nVertexShader GLSL100:   Common/MatDefs/Misc/Sky.vert\n```", "```java\nViewMatrix\nProjectionMatrix\nWorldMatrix\n```", "```java\n    lightScatteringFilter.setLightPosition(position.mult(1000));\n    ```", "```java\n    if(y > -2f){\n      if(!lightScatteringFilter.isEnabled()){\n        lightScatteringFilter.setEnabled(true);\n      }\n      lightScatteringFilter.setLightDensity(1.4f);\n    } else if(lightScatteringFilter.isEnabled()){\n      lightScatteringFilter.setEnabled(false);\n    }\n    ```", "```java\n    platform = new Geometry(\"Platform\", new Box(1f, 0.1f, 1f));\n    platform.setMaterial(new Material(assetManager, \"MatDefs/Misc/Unshaded.j3md\"));\n    ```", "```java\n    for(inti = 0 ; i< 8; i++){\n      path.addWayPoint(new Vector3f(0, FastMath.sin(FastMath.QUARTER_PI * i) * 10f, FastMath.cos(FastMath.QUARTER_PI * i) * 10f));\n    }\n    ```", "```java\n    path.enableDebugShape(assetManager, rootNode);\n    ```", "```java\npath.addListener(new MotionPathListener() {\n  public void onWayPointReach(MotionEvent control, intwayPointIndex) {\n    if (path.getNbWayPoints() == wayPointIndex + 1) {\n      nextMotionEvent.play();\n    }\n  }\n});\n```", "```java\n    jaimePath.addWayPoint(scene.getChild(\"WayPoint1\").getWorldTranslation());\n    ```", "```java\n    jaimeMotionEvent = new MotionEvent(jaime, jaimePath, 25f);\n    ```", "```java\n    cinematic = new Cinematic(scene, 60f);\n    ```", "```java\n    cinematic.addCinematicEvent(0, jaimeMotionEvent);\n    ```", "```java\n    cam1Event = new MotionEvent(camNode, camPath1, 5f);     cam1Event.setDirectionType(MotionEvent.Direction.LookAt);\n    cam1Event.setLookAt(Vector3f.UNIT_X.mult(100), Vector3f.UNIT_Y);\n    ```", "```java\n    cinematic.activateCamera(0, \"cam1\");\n    ```", "```java\n    AnimationEventwalkEvent = new AnimationEvent(jaime, \"Walk\", LoopMode.Loop);\n    ```", "```java\n    cinematic.addCinematicEvent(0, walkEvent);\n    ```", "```java\njaimePath.addListener(new MotionPathListener() {\n  public void onWayPointReach(MotionEventmotionControl, intwayPointIndex) {\n    if(wayPointIndex == 2){\n      walkEvent.stop();\n    }\n  }\n});\n```", "```java\n    new AudioNode(assetManager, \"Sound/Effects/Foot steps.ogg\");\n    ```", "```java\n    FastMath.nextRandomFloat() * 0.2f + 0.9f.\n    ```", "```java\n    audioNode.setTimeOffset(2.0f);\n    audioNode.playInstance();\n    ```", "```java\n    LowPassFilter filter = new LowPassFilter(FastMath.nextRandomFloat(), FastMath.nextRandomFloat());\n    ```", "```java\n    Environment env = Environment.Cavern;\n    audioRenderer.setEnvironment(env);\n    ```"]