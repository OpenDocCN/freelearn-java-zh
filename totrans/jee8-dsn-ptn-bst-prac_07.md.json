["```java\nclass Insurance {    \n    public double calculateCotation (...) {...}\n    public String generatePDF (...){...}\n    public String generateXLS (...){...}\n}\n```", "```java\n@Path (\"/register\")\npublic class PaymentRegisterService {\n    @Path (\"/paymentSlip/\")\n    @POST\n    @Produces (MediaType.APPLICATION_JSON)\n    @Consumes (MediaType.APPLICATION_JSON)\n    public Response register (RequestVO requestVO) {\n       // calls the bank register web service:\n       // ...\n       // Prepare the response with the register web service data:\n       ResponseVO responseVO = new ResponseVO();\n       responseVO.setRegisterNumber (7554433452L); // this is a simulation    //because this information must be returned from the bank's web service \n       responseVO.setUserName (requestVO.getUserName());\n       responseVO.setValue (requestVO.getValue());\n       responseVO.setStatus (\"OK\"); // everything is supposed to be correct\n       return Response.ok (responseVO).build();\n    }\n}\n```", "```java\n@Path (\"/query\")\npublic class PaymentQueryService {\n    @Path (\"/paymentSlip/\")\n    @POST\n    @Produces (MediaType.APPLICATION_JSON)\n    @Consumes (MediaType.APPLICATION_JSON)\n    public Response query (RequestVO requestVO) {\n        // calls the bank query web service:\n        // ...\n        // Prepare the response with the query web service data:\n        ResponseVO responseVO = new ResponseVO();\n        responseVO.setCodeBar(\"8888999977776666\");// this is a simulation //because this information must be returned from the bank's web service \n        responseVO.setUserName (requestVO.getUserName());\n        responseVO.setStatus (\"OK\"); // everything is supposed to be correct\n        responseVO.setValue(requestVO.getValue());\n        return Response.ok (responseVO).build();\n    }\n}\n```", "```java\n@Path (\"/bank\")\npublic class PaymentSlipGenerating {\n    private static String BASE_PATH = \"http://localhost:8080/microservice/ws\";\n    @Inject private UserService userService;\n    private Response callMicroservice (String path, Object entity) {\n        Client client = ClientBuilder.newClient();\n        WebTarget target = client.target (BASE_PATH);\n        Response resp = target.path (path).request().post(Entity.json (entity));\n        return resp;\n    }\n    @Path (\"/paymentSlip/{id}/{value}\")\n    @GET\n    @Produces (MediaType.APPLICATION_JSON)\n    public Response getPaymentSlipData (@PathParam(\"id\") long id,  @PathParam(\"value\") String strValue) {\n        // get the payment slip value:\n        double value = convertToValue (strValue);\n        // get the user information from local DataBase:\n        User user = userService.getUserById (id);\n\n        // prepare the payment slip registering request:\n        RequestVO registerRequest = new RequestVO();\n        registerRequest.setUserCode (user.getCode());\n        registerRequest.setUserName (user.getName());\n        registerRequest.setValue (value);\n        // call registering microservice:\n        Response resp = callMicroservice (\"/register/paymentSlip\", registerRequest);\n        ResponseVO responseRegisterVO = resp.readEntity (ResponseVO.class); \n        // prepare the payment slip query request:\n        RequestVO queryRequest = new RequestVO();\n        queryRequest.setUserName(registerRequest.getUserName());\n        queryRequest.setRegisterNumber (responseRegisterVO.getRegisterNumber());\n        queryRequest.setValue (value);\n        // call query microservice:\n        resp = callMicroservice (\"/query/paymentSlip\", registerRequest);\n        ResponseVO responseQueryVO = resp.readEntity (ResponseVO.class); \n\n        return Response.ok (responseQueryVO).build();\n     }\n}\n\n```"]