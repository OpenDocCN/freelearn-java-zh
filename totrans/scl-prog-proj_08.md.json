["```java\naddSbtPlugin(\"org.scala-js\" % \"sbt-scalajs\" % \"0.6.24\")\naddSbtPlugin(\"com.vmunier\" % \"sbt-web-scalajs\" % \"1.0.8-0.6\")\n```", "```java\n.enablePlugins(ScalaJSPlugin, ScalaJSWeb)\n```", "```java\n\"com.lihaoyi\" %%% \"scalatags\" % \"0.6.7\"\n```", "```java\n@(title: String)\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>@title</title>\n    </head>\n    <body>\n        <div class=\"container\">\n            <div class=\"row\">\n                <div id=\"productPanel\" class=\"col-8\">\n                    <div id=\"products\" class=\"row\">\n                    </div>\n                </div>\n                <div id=\"cartPanel\" class=\"col-4\">\n                </div>\n            </div>\n        </div>\n\n        @scalajs.html.scripts(\"client\",\n           routes.Assets.versioned(_).toString,\n           name => getClass.getResource(s\"/public/$name\") != null)\n    </body>\n</html>\n```", "```java\n<head>\n    <title>@title</title>\n      <!-- Bootstrap CSS -->\n    <link rel=\"stylesheet\" \n    href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0\n    /css/bootstrap.min.css\" integrity=\"sha384-        \n    Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW\n    /dAiS6JXm\" crossorigin=\"anonymous\">\n\n</head>\n```", "```java\n <body>\n        <div class=\"container\">\n            <div class=\"row\">\n                <div id=\"productPanel\" class=\"col-8\">\n                    <div id=\"products\" class=\"row\"></div>\n                </div>\n                <div id=\"cartPanel\" class=\"col-4\"></div>\n            </div>\n        </div>\n\n</body>\n```", "```java\n<div id=\"productPanel\" class=\"col-8\">\n  <div id=\"products\" class=\"row\">\n     <-- Added programatically -->\n  </div>\n</div>\n```", "```java\ncase class ProductDiv(product: Product) {\n  def content: Div = div(`class` := \"col\")\n                    (getProductDescription, getButton).render\n  private def getProductDescription =\n    div(\n      p(product.name),\n      p(product.description),\n      p(product.price))\n\n  private def getButton = button(\n    `type` := \"button\",\n    onclick := addToCart)(\"Add to Cart\")\n\n  private def addToCart = () => ???\n}\n```", "```java\ncase class CartLine(qty: Int, product: Product)\n```", "```java\ndef content: Div = div(`class` := \"row\", id := s\"cart-${product.code}-row\")(\n  div(`class` := \"col-1\")(getDeleteButton),\n  div(`class` := \"col-2\")(getQuantityInput),\n  div(`class` := \"col-6\")(getProductLabel),\n  div(`class` := \"col\")(getPriceLabel)\n).render\n```", "```java\nprivate def getDeleteButton = button(\n               `type` := \"button\",\n               onclick := removeFromCart)(\"X\").render\n```", "```java\nprivate def removeFromCart = () => ???\n```", "```java\nprivate def getQuantityInput = input(\n              id := s\"cart-${product.code}-qty\",\n              onchange := changeQty,\n              value := qty.toString,\n              `type` := \"text\",\n              style := \"width: 100%;\").render\n```", "```java\nprivate def changeQty = () => ???\n```", "```java\nprivate def getProductLabel = label(product.name).render\n```", "```java\nprivate def getPriceLabel = label(product.price * qty).render\n```", "```java\ncase class CartDiv(lines: Set[CartLine]) {\n  def content = lines.foldLeft(div.render) { (a, b) =>\n    a.appendChild(b.content).render\n    a\n  }\n  def addProduct(line: CartLine): CartDiv = {\n    new CartDiv(this.lines + line)\n  }\n}\n```", "```java\n\"org.querki\" %%% \"jquery-facade\" % \"1.2\"\n```", "```java\njsDependencies += \n                \"org.webjars\" % \"jquery\" % \"2.2.1\" / \"jquery.js\" \n                minified \"jquery.min.js\"\n```", "```java\nscalaJSUseMainModuleInitializer := true\n```", "```java\nobject UIManager {\n\n  val origin: UndefOr[String] = dom.document.location.origin\n  val cart: CartDiv = CartDiv(Set.empty[CartLine])\n  val webSocket: WebSocket = getWebSocket\n  val dummyUserName = s\"user-${Random.nextInt(1000)}\"\n  def main(args: Array[String]): Unit = {\n    val settings = JQueryAjaxSettings\n                   .url(s\"$origin/v1/login\")\n                   .data(dummyUserName)                                                                 \n                   .contentType(\"text/plain\")\n    $.post(settings._result).done((_: String) => {\n      initUI(origin)\n    })\n  }\n}\n```", "```java\ndef done(doneCallbacks: js.Function*): JQueryDeferred = js.native\n```", "```java\nprivate def initUI(origin: UndefOr[String]) = {\n  $.get(url = s\"$origin/v1/products\", dataType = \"text\")\n    .done((answers: String) => {\n      val products = decode[Seq[Product]](answers)\n      products.right.map { seq =>\n        seq.foreach(p => \n          $(\"#products\").append(ProductDiv(p).content)\n        )\n        initCartUI(origin, seq)\n      }\n    })\n    .fail((xhr: JQueryXHR, textStatus: String, textError: String) =>\n      println(s\"call failed: $textStatus with status code: \n      ${xhr.status} $textError\")\n    )\n}\n```", "```java\nprivate def initCartUI(origin: UndefOr[String], products: Seq[Product]) = {\n  $.get(url = s\"$origin/v1/cart/products\", dataType = \"text\")\n    .done((answers: String) => {\n      val carts = decode[Seq[Cart]](answers)\n      carts.right.map { cartLines =>\n        cartLines.foreach { cartDao =>\n          val product = products.find(\n                                _.code == cartDao.productCode)\n          product match {\n            case Some(p) =>\n              val cartLine = CartLine(cartDao.quantity, p.name,  \n              cartDao.productCode, p.price)\n              val cartContent = UIManager.cart.addProduct(cartLine)\n                                .content\n              $(\"#cartPanel\").append(cartContent)\n            case None =>\n              println(\n                 s\"product code ${cartDao.productCode} doesn't \n                   exists in the catalog\")\n          }\n        }\n      }\n    })\n    .fail((xhr: JQueryXHR, textStatus: String, textError: String) =>\n      println(\n        s\"call failed: $textStatus with status code: \n          ${xhr.status} $textError\")\n    )\n}\n```", "```java\nprivate def addToCart() = () => UIManager.addOneProduct(product)\n```", "```java\ndef addOneProduct(product: Product): JQueryDeferred = {\n  val quantity = 1\n  def onDone = () => {\n    val cartContent = cart.addProduct(CartLine(quantity, product)\n                                     ).content\n    $(\"#cartPanel\").append(cartContent)\n    println(s\"Product $product added in the cart\")\n  }\n  postInCart(product.code, quantity, onDone)\n}\n```", "```java\nprivate def postInCart(productCode: String, quantity: Int, onDone: () => Unit) = {\n  val url = s\"${UIManager.origin}/v1/cart/products/$productCode\n  /quantity/$quantity\"\n  $.post(JQueryAjaxSettings.url(url)._result)\n    .done(onDone)\n    .fail(() => println(\"cannot add a product twice\"))\n}\n```", "```java\nprivate def removeFromCart() = \n           () => UIManager.deleteProduct(product)\n```", "```java\ndef deleteProduct(product: Product): JQueryDeferred = {\n  def onDone = () => {\n    val cartContent = $(s\"#cart-${product.code}-row\")\n    cartContent.remove()\n    println(s\"Product ${product.code} removed from the cart\")\n  }\n\n   deletefromCart(product.code, onDone)\n}\n```", "```java\nprivate def deletefromCart(\n                           productCode: String,\n                           onDone: () => Unit) = {\n  val url = s\"${UIManager.origin}/v1/cart/products/$productCode\"\n  $.ajax(JQueryAjaxSettings.url(url).method(\"DELETE\")._result)\n    .done(onDone)\n}\n```", "```java\nprivate def changeQty() = \n            () => UIManager.updateProduct(product)\n```", "```java\ndef updateProduct(productCode: String): JQueryDeferred = {\n  putInCart(product.code, quantity(product.code))\n}\n```", "```java\n private def quantity(productCode: String) = Try {\n   val inputText = $(s\"#cart-$productCode-qty\")\n   if (inputText.length != 0) \n     Integer.parseInt(inputText.`val`().asInstanceOf[String]) \n   else 1\n }.getOrElse(1)\n```", "```java\nprivate def putInCart(productCode: String, updatedQuantity: Int) = {\n  val url = \n    s\"${UIManager.origin}/v1/cart/products/\n    $productCode/quantity/$updatedQuantity\"\n    $.ajax(JQueryAjaxSettings.url(url).method(\"PUT\")._result)\n     .done()\n}\n```", "```java\ngit push heroku master\n```"]