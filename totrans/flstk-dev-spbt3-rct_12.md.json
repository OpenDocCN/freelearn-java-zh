["```java\nfunction doAsyncCall(success,  failure) {\n  // Do some API call\n  if (SUCCEED)\n    success(resp);\n  else\n    failure(err);\n}\nsuccess(response) {\n  // Do something with response\n}\nfailure(error) {\n  // Handle error\n}\ndoAsyncCall(success, failure); \n```", "```java\ndoAsyncCall()\n.then(response => // Do something with the response) \n```", "```java\nconst myPromise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve(\"Hello\");\n  }, 500);\n}); \n```", "```java\ndoAsyncCall()\n.then(response => // Get some data from the response)\n.then(data => // Do something with the data \n```", "```java\ndoAsyncCall()\n.then(response => // Get some data from the response)\n.then(data => // Do something with data)\n.catch(error => console.error(error)) \n```", "```java\nconst doAsyncCall = **async** () => {\n  const response = await fetch('http ://someapi .com');\n  const data = **await** response.json();\n  // Do something with the data\n} \n```", "```java\nconst doAsyncCall = async () => {\n  **try** **{**\n    const response = await fetch('http ://someapi .com');\n    const data = await response.json();\n    // Do something with the data\n  **}**\n  **catch****(err) {**\n    console.error(err);\n  **}**\n**}** \n```", "```java\nfetch('http ://someapi .com')\n.then(response => response.json())\n.then(data => console.log(data))\n.catch(error => console.error(error)) \n```", "```java\nfetch('http ://someapi .com')\n.then(response => { \n  if (response.ok)\n    // Successful request -> Status 2XX\n  else\n    // Something went wrong -> Error response\n})\n.then(data => console.log(data))\n.catch(error => console.error(error)) \n```", "```java\nfetch('http ://someapi .com'**, {****method****:** **'POST'****}**)\n.then(response => response.json())\n.then(data => console.log(data))\n.catch(error => console.error(error)) \n```", "```java\nfetch('http ://someapi .com',\n  {\n    method: 'POST',\n    **headers****: {****'Content-Type'****:****'application/json'****}**\n  }\n.then(response => response.json())\n.then(data => console.log(data))\n.catch(error => console.error(error)) \n```", "```java\nfetch('http ://someapi. com',\n{\n  method: 'POST',\n  headers: {'Content-Type':'application/json'},\n  **body****:** **JSON****.****stringify****(data)**\n}\n.then(response => response.json())\n.then(data => console.log(data))\n.catch(error => console.error(error)) \n```", "```java\nnpm install axios \n```", "```java\nimport axios from 'axios'; \n```", "```java\naxios.get('http ://someapi .com')\n.then(response => console.log(response))\n.catch(error => console.log(error)) \n```", "```java\naxios.post('http ://someapi .com', { newObject })\n.then(response => console.log(response))\n.catch(error => console.log(error)) \n```", "```java\nconst response = await axios({\n  method: 'POST',\n  url: 'https ://myapi .com/api/cars',\n  headers: { 'Content-Type': 'application/json' },\n  data: { brand: 'Ford', model: 'Ranger' },\n}); \n```", "```java\n    npm create vite@latest \n    ```", "```java\n    cd weatherapp\n    npm install \n    ```", "```java\n    npm run dev \n    ```", "```java\n    import './App.css'\n    function App() {\n      return (\n        <>\n        </>\n      );\n    }\n    export default App; \n    ```", "```java\n    **import** **{ useState }** **from****'react'****;**\n    import './App.css';\n    function App() {\n      **const** **[weather, setWeather] =** **useState****({**\n          **temp****:** **''****,** **desc****:** **''****,** **icon****:** **''**\n      **});**\n      return (\n        <>\n        </>\n      );\n    }\n    export default App; \n    ```", "```java\n    import { useState**, useEffect** } from 'react'; \n    ```", "```java\n    useEffect(() => {   \n      fetch('https://api.openweathermap.org/data/2.5/\n             weather?q=London&APIKey=YOUR_API_KEY&units=metric')\n      .then(response => response.json())\n      .then(result => {\n        setWeather({\n          temp: result.main.temp, \n          desc: result.weather[0].main, \n          icon: result.weather[0].icon\n        });\n      })\n      .catch(err => console.error(err))\n    }, []) \n    ```", "```java\n    if (weather.icon) {\n      return (\n        <>\n          <p>Temperature: {weather.temp} °C</p>\n          <p>Description: {weather.desc}</p>\n          <img src={`http://openweathermap.org/img/wn/${weather.                 icon}@2x.png`}\n            alt=\"Weather icon\" />\n        </>\n      );\n    }\n    else {\n      return <div>Loading...</div>\n    } \n    ```", "```java\nimport { useState, useEffect } from 'react';\nimport './App.css'\nfunction App() {\n  const [weather, setWeather] = useState({temp: '', desc: '', icon: ''});\n\n  useEffect(() => { \n    fetch('https://api.openweathermap.org/data/2.5/weather?q=\\\n          London&APIKey=YOUR_API_KEY&units=metric')\n    .then(response => response.json())\n    .then(result => {\n      setWeather({\n        temp: result.main.temp, \n        desc: result.weather[0].main, \n        icon: result.weather[0].icon\n      });\n    })\n    .catch(err => console.error(err))\n  }, [])\n  if (weather.icon) {\n    return (\n      <>\n        <p>Temperature: {weather.temp} °C</p>\n        <p>Description: {weather.desc}</p>\n        <img src={\n            `https ://openweathermap .org/img/wn/${weather.icon}@2x.png`\n        }\n        alt=\"Weather icon\" />\n      </>\n    );\n  }\n  else {\n    return <>Loading...</>\n  }\n}\nexport default App \n```", "```java\nimport axios from 'axios';\ntype MyDataType = {\n  id: number;\n  name: string;\n}\naxios.get<MyDataType>(apiUrl)\n.then(response => console.log(response.data))\n.catch(err => console.error(err)); \n```", "```java\n    npm install axios \n    ```", "```java\n    import './App.css';\n    function App() {\n      return (\n        <>\n        </>\n      );\n    }\n    export default App; \n    ```", "```java\n    import { useState } from 'react';\n    import axios from 'axios';\n    import './App.css';\n    type Repository = {\n      id: number;\n      full_name: string;\n      html_url: string;\n    };\n    function App() {\n      const [keyword, setKeyword] = useState('');\n      const [repodata, setRepodata] = useState<Repository[]>([]);\n      return (\n        <>\n        </>\n      );\n    }\n    export default App; \n    ```", "```java\n    const handleClick = () => {\n      // REST API call\n    }\n    return (\n      <>\n        <input\n          value={keyword}\n          onChange={e => setKeyword(e.target.value)} \n        />\n        <button onClick={handleClick}>Fetch</button>\n      </>\n    ); \n    ```", "```java `` ```", "```java\n    const handleClick = () => {\n      axios.get<{ items: Repository[] }> (`https://api.github.com/\n                  search/repositories?q=${keyword}`)\n      .then(response => setRepodata(response.data.items))\n      .catch(err => console.error(err))\n    } \n    ```", "```java\n    return (\n      <>\n        <input\n          value={keyword}\n          onChange={e => setKeyword(e.target.value)} \n        />\n        <button onClick={handleClick}>Fetch</button>\n        **{repodata.length === 0 ? (**\n          **<****p****>****No data available****</****p****>**\n        **)** **:** **(**\n          **<****table****>**\n            **<****tbody****>**\n              **{repodata.map(repo => (**\n                **<****tr****key****=****{repo.id}****>**\n                  **<****td****>****{repo.full_name}****</****td****>**\n                  **<****td****>**\n                    **<****a****href****=****{repo.html_url}****>****{repo.html_url}****</****a****>**\n                  **</****td****>**\n                **</****tr****>**\n              **))}**\n            **</****tbody****>**\n          **</****table****>**\n        **)}** \n      </>\n    ); \n    ```", "```java\nimport { useState } from 'react';\nimport axios from 'axios';\nimport './App.css';\ntype Repository = {\n  id: number;\n  full_name: string;\n  html_url: string;\n};\nfunction App() {\n  const [keyword, setKeyword] = useState('');\n  const [repodata, setRepodata] = useState<Repository[]>([]);\n  const handleClick = () => {\n    axios.get<{ items: Repository[] \n      }>(`https://api.github.com/search/repositories?q=${keyword}`)\n    .then(response => setRepodata(response.data.items))\n    .catch(err => console.error(err));\n  }\n\n  return (\n    <>\n      <input\n        value={keyword}\n        onChange={e => setKeyword(e.target.value)} \n      />\n      <button onClick={handleClick}>Fetch</button>\n      {repodata.length === 0 ? (\n        <p>No data available</p>\n      ) : (\n        <table>\n          <tbody>\n            {repodata.map((repo) => (\n              <tr key={repo.id}>\n                <td>{repo.full_name}</td>\n                <td>\n                  <a href={repo.html_url}>{repo.html_url}</a>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n}\nexport default App; \n```", "```java\nimport { useEffect, useState } from 'react';\nfunction CarData(props) {\n  const [data, setData] = useState({});\n  useEffect(() => {\n    fetch(`https ://carapi .com/car/${props.carid}`)    .then(response => response.json())\n    .then(cardata => setData(cardata))\n  }, [props.carid]);\n\n  if (data) {\n    return <div>{data.car.brand}</div>;\n  } else {\n    return null;\n  }\ncontinue... \n```", "```java\nimport { useEffect, useState } from 'react';\nfunction CarData(props) {\n  const [data, setData] = useState({});\n  useEffect(() => {\n    **let** **ignore =** **false****;**\n    fetch(`https ://carapi .com/car/${props.carid}`)\n    .then(response => response.json())\n    .then(cardata => { \n      **if** **(!ignore) {**\n        **setData****(cardata)**\n      **}**\n  });\n    **return****() =>** **{**\n      **ignore =** **true****;**\n    **};**\n  }, [props.carid]);\n  if (data) {\n    return <div>{data.car.brand}</div>;\n  } else {\n    return null;\n  }\ncontinue... \n```", "```java\n    // install v4\n    npm install @tanstack/react-query@4\n    npm install axios \n    ```", "```java\n    import './App.css';\n    function App() {\n      return (\n        <>\n        </>\n      );\n    }\n    export default App; \n    ```", "```java\n    import './App.css';\n    **import** **{** **QueryClient****,** **QueryClientProvider** **}** **from**\n      **'@tanstack/react-query'****;**\n    **const** **queryClient =** **new****QueryClient****();**\n    function App() {\n      return (\n        <>\n          **<****QueryClientProvider****client****=****{queryClient}****>**\n          **</****QueryClientProvider****>**\n        </>\n      )\n    }\n    export default App; \n    ```", "```java\n    const query = useQuery({ queryKey: ['repositories'], queryFn:\n      getRepositories }) \n    ```", "```java\n    const { isLoading, isError, isSuccess } = useQuery({ queryKey:\n      ['repositories'], queryFn: getRepositories }) \n    ```", "```java\n    function Repositories() {\n      return (\n        <> </>\n      )\n    }\n    export default Repositories; \n    ```", "```java\n    import { useQuery } from '@tanstack/react-query';\n    import axios from 'axios';\n    function Repositories() {\n      const getRepositories = async () => {\n        const response = await axios.get(\"https://api.github\\\n          .com/search/repositories?q=react\");\n        return response.data.items;\n      }\n      const { isLoading, isError, data } = useQuery({\n        queryKey: ['repositories'],\n        queryFn: getRepositories,\n      })\n      return (\n        <></>\n      )\n    }\n    export default Repositories; \n    ```", "```java\n    // Repositories.jsx\n    if (isLoading) {\n      return <p>Loading...</p>\n    }\n    if (isError) {\n      return <p>Error...</p>\n    }\n    else {\n      return (\n        <table>\n          <tbody>\n          {\n          data.map(repo =>\n            <tr key={repo.id}>\n              <td>{repo.full_name}</td>\n              <td>\n                <a href={repo.html_url}>{repo.html_url}</a>\n              </td>\n            </tr>)\n          }\n        </tbody>\n        </table>\n      )\n    } \n    ```", "```java\n    // App.jsx\n    import './App.css'\n    **import****Repositories****from****'./Repositories'**\n    import { QueryClient, QueryClientProvider } from '@tanstack/react-\n      query'\n    const queryClient = new QueryClient()\n    function App() {\n      return (\n        <>\n          <QueryClientProvider client={queryClient}>\n            **<****Repositories** **/>**\n          </QueryClientProvider>\n        </>\n      )\n    }\n    export default App \n    ```", "```java\nconst { isLoading, isError, data } = useQuery({\n  queryKey: ['repositories'],\n  queryFn: getRepositories,\n  staleTime: 60 * 1000, // in milliseconds -> 1 minute\n}) \n```", "```java\n// import useMutation\nimport { useMutation } from '@tanstack/react-query'\n// usage\nconst mutation = useMutation({\n  mutationFn: (newCar) => {\n    return axios.post('api/cars', newCar);\n  },\n  onError: (error, variables, context) => {\n    // Error in mutation\n  },\n  onSuccess: (data, variables, context) => {\n    // Successful mutation\n  },\n}) \n```", "```java\nmutation.mutate(newCar); \n```", "```java\nimport { useQuery, useMutation, **useQueryClient** } from\n  '@tanstack/react-query'\n**const** **queryClient =** **useQueryClient****();**\n// Fetch all cars\nconst { data } = useQuery({ \n  queryKey: ['cars'], queryFn: fetchCars \n})\n// Add a new car\nconst mutation = useMutation({\n  mutationFn: (newCar) => {\n    return axios.post('api/cars', newCar);\n  },\n  onError: (error, variables, context) => {\n    // Error in mutation\n  },\n  onSuccess: (data, variables, context) => {\n    // Invalidate cars query -> refetch\n    **queryClient.****invalidateQueries****({** **queryKey****: [****'cars'****] });**\n  },\n}) \n```"]