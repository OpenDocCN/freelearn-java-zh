["```java\npublic static void main(String[] args) {\n    System.out.println(\"Pattern Factory Method: Vehicle\n        Factory 2\");\n    var sportCar = VehicleFactory.produce(\"sport\");\n    System.out.println(\"sport-car:\" + sportCar);\n    sportCar.move();\n}\n```", "```java\nPattern Factory Method: Vehicle Factory 2\nsport-car:SportCar[type=porsche 911]\nSportCar, type:'porsche 911', move\n```", "```java\nfinal class VehicleFactory {\nprivate VehicleFactory(){}\n    static Vehicle produce(String type){\n        return switch (type) {\n            case \"sport\" -> new SportCar(\"porsche 911\");\n            case \"suv\" -> new SuvCar(\"skoda kodiaq\");\n            default -> throw new\n                IllegalArgumentException(\"\"\"\n            not implemented type:'%s'\n                \"\"\".formatted(type));\n        };\n    }\n}\n```", "```java\ninterface Vehicle {\n    void move();\n}\n```", "```java\nclass SuvCar implements Vehicle {\n    private final String type;\n    public SuvCar(String t){\n        this.type = t;\n    }\n    @Override\n    public void move() {...}\n}\n```", "```java\nrecord SportCar(String type) implements Vehicle {\n    @Override\n    public void move() {\n        System.out.println(\"\"\"\n        SportCar, type:'%s', move\"\"\".formatted(type));\n    }\n}\n```", "```java\npublic static void main(String[] args) {\n    ...\n    AbstractFactory carFactory =\n         FactoryProvider.getFactory(\"car\");\n     Vehicle slowCar = carFactory.createVehicle(\"slow\");\n        slowCar.move();\n}\n```", "```java\nPattern Abstract Factory: create factory to produce\nvehicle...\nslow car, move\n```", "```java\nfinal class FactoryProvider {\nprivate FactoryProvider(){}\n    static AbstractFactory getFactory(String type){\n        return switch (type) {\n            case \"car\" -> new CarFactory();\n            case \"truck\" -> new TruckFactory();\n            default -> throw new IllegalArgumentException\n                (\"\"\"         this is %s\n                 \"\"\".formatted(type));\n        };\n    }\n}\n```", "```java\nabstract class AbstractFactory {\n    abstract Vehicle createVehicle(String type);\n}\n```", "```java\nclass TruckFactory extends AbstractFactory {\n    @Override\n    Vehicle createVehicle(String type) {\n        return switch(type) {\n            case \"heavy\" -> new HeavyTruck();\n            case \"light\" -> new LightTruck();\n            default -> throw new IllegalArgumentException\n                (\"not implemented\");\n        };\n    }\n}\n```", "```java\npublic static void main(String[] args) {\n    System.out.println(\"Builder pattern: building\n        vehicles\");\n    var slowVehicle = VehicleBuilder.buildSlowVehicle();\n    var fastVehicle = new FastVehicle.Builder()\n                        .addCabin(\"cabin\")\n                        .addEngine(\"Engine\")\n                        .build();\n    slowVehicle.parts();\n    fastVehicle.parts();\n}\n```", "```java\nBuilder pattern: building vehicles\nSlowVehicle,engine: RecordPart[name=engine]\nSlowVehicle,cabin: StandardPart{name='cabin'}\nFastVehicle,engine: StandardPart{name='Engine'}\nFastVehicle,cabin: RecordPart[name=cabin]\n```", "```java\nfinal class VehicleBuilder {\n    static Vehicle buildSlowCar(){\n        var engine = new RecordPart(\"engine\");\n        var cabin = new StandardPart(\"cabin\");\n        return new SlowCar(engine, cabin);\n    }\n}\n```", "```java\nclass FastCar implements Vehicle {\n    final static class Builder {\n        private Part engine;\n        private Part cabin;\n        Builder(){}\n        Builder addEngine(String e){...}\n        Builder addCabin(String c){...}\n        FastCar build(){\n            return new FastCar(engine, cabin);\n        }\n    }\n    private final Part engine;\n    private final Part cabin;\n    ...\n    @Override\n    public void move() {...}\n    @Override\n    public void parts() {...}\n}\n```", "```java\npublic static void main(String[] args) {\n    Vehicle fastCar1 = VehicleCache.getVehicle(\"fast-car\");\n    Vehicle fastCar2 = VehicleCache.getVehicle(\"fast-car\");\n    fastCar1.move();\n    fastCar2.move();\n    System.out.println(\"equals : \" + (fastCar1\n        .equals(fastCar2)));\n}\n```", "```java\nPattern Prototype: vehicle prototype 1\nfast car, move\nfast car, move\nequals : false\nfastCar1:FastCar@659e0bfd\nfastCar2:FastCar@2a139a55\n```", "```java\nabstract class Vehicle implements Cloneable{\n    protected final String type;\n    Vehicle(String t){\n        this.type = t;\n    }\n    abstract void move();\n    @Override\n    protected Object clone() {\n        Object clone = null;\n        try{\n        clone = super.clone();\n        } catch (CloneNotSupportedException e){...}\n        return clone;\n    }\n}\n```", "```java\nclass SlowCar extends Vehicle {\n    SlowCar(){\n        super(\"slow car\");\n    }\n    @Override\n    void move() {...}\n}\n```", "```java\nfinal class VehicleCache {\nprivate static final Map<String, Vehicle> map =\n    Map.of(\"fast-car\", new FastCar(), \"slow-car\", new\n        SlowCar());\nprivate VehicleCache(){}\n    static Vehicle getVehicle(String type){\n        Vehicle vehicle = map.get(type);\n        if(vehicle == null) throw\n        new     IllegalArgumentException(\"not allowed:\" +\n            type);\n        return (Vehicle) vehicle.clone();\n    }\n}\n```", "```java\npublic static void main(String[] args) {\n    System.out.println(\"Singleton pattern: only one\n        engine\");\n    var engine = OnlyEngine.getInstance();\n    var vehicle = OnlyVehicle.getInstance();\n    vehicle.move();\n    System.out.println(\"\"\"\n        OnlyEngine:'%s', equals with vehicle:'%s'\"\"\"\n        .formatted(engine, (vehicle.getEngine()\n            .equals(engine))));\n}\n```", "```java\nPattern Singleton: only one engine\nOnlyVehicle, move\nOnlyEngine:'OnlyEngine@7e9e5f8a', equals with\n    vehicle:'true'\n```", "```java\ninterface Engine {}\nclass OnlyEngine implements Engine {\n    private static OnlyEngine INSTANCE;\n    static OnlyEngine getInstance(){\n        if(INSTANCE == null){\n            INSTANCE = new OnlyEngine();\n        }\n    return INSTANCE;\n    }\n    private OnlyEngine(){}\n}\n```", "```java\nclass OnlyVehicle {\n    private static OnlyVehicle INSTANCE = new\n        OnlyVehicle();\n    static OnlyVehicle getInstance(){\n        return INSTANCE;\n}\n    private OnlyVehicle(){\n        this.engine = OnlyEngine.getInstance();\n    }\n    private final Engine engine;\n    void move(){\n       System.out.println(\"OnlyVehicle, move\");\n   }\n    Engine getEngine(){\n        return engine;\n    }\n}\n```", "```java\nenum OnlyEngineEnum implements Engine {\n    INSTANCE;\n    }\n    ...\n    private OnlyVehicle(){\n    this.engine = OnlyEngineEnum.INSTANCE;\n}\n...\n```", "```java\npublic static void main(String[] args) {\n    var garage = new PooledVehicleGarage();\n    var vehicle1 = garage.driveVehicle();\n    ...\n    vehicle1.move();\n    vehicle2.move();\n    vehicle3.move();\n    garage.returnVehicle(vehicle1);\n    garage.returnVehicle(vehicle3);\n    garage.printStatus();\n    var vehicle4 = garage.driveVehicle();\n    var vehicle5 = garage.driveVehicle();\n    vehicle4.move();\n    vehicle5.move();\n    garage.printStatus();\n}\n```", "```java\nPattern Object Pool: vehicle garage\nPooledVehicle, move, vin=1\nPooledVehicle, move, vin=2\nPooledVehicle, move, vin=3\nreturned vehicle, vin:1\nreturned vehicle, vin:3\nGarage Pool vehicles available=2[[3, 1]] inUse=1[[2]]\nPooledVehicle, move, vin=3\nPooledVehicle, move, vin=1\nGarage Pool vehicles available=0[[]] inUse=3[[3, 2, 1]]\n```", "```java\nabstract class AbstractGaragePool<T extends Vehicle> {\n    private final Set<T> available = new HashSet<>();\n    private final Set<T> inUse = new HashSet<>();\n    protected abstract T buyVehicle();\n    synchronized T driveVehicle() {\n        if (available.isEmpty()) {\n            available.add(buyVehicle());\n        }\n        var instance = available.iterator().next();\n        available.remove(instance);\n        inUse.add(instance);\n        return instance;\n    }\n    synchronized void returnVehicle(T instance) {...}\n    void printStatus() {...}\n}\n```", "```java\ninterface Vehicle {\n    int getVin();\n    void move();\n}\n```", "```java\nclass PooledVehicle implements Vehicle{\n    private static final AtomicInteger COUNTER = new\n        AtomicInteger();\n    private final int vin;\n    PooledVehicle() {\n        this.vin = COUNTER.incrementAndGet();\n    }\n    @Override\n    public int getVin(){...}\n    @Override\n    public void move(){..}\n}\n```", "```java\npublic static void main(String[] args) {\n    System.out.println(\"Pattern Lazy Initialization: lazy\n        vehicles\");\n    var vehicleProvider = new VehicleProvider();\n    var truck1 = vehicleProvider.getVehicleByType(\"truck\");\n    vehicleProvider.printStatus();\n    truck1.move();\n    var car1 = vehicleProvider.getVehicleByType(\"car\");\n    var car2 = vehicleProvider.getVehicleByType(\"car\");\n    vehicleProvider.printStatus();\n    car1.move();\n    car2.move();\n    System.out.println(\"ca1==car2: \" + (car1.equals\n       (car2)));\n}\n```", "```java\nPattern Lazy Initialization: lazy vehicles\nlazy truck created\nstatus, truck:LazyVehicle[type=truck]\nstatus, car:null\nLazyVehicle, move, type:truck\nlazy car created\nstatus, truck:LazyVehicle[type=truck]\nstatus, car:LazyVehicle[type=car]\nLazyVehicle, move, type:car\nLazyVehicle, move, type:car\nca1==car2: true\n```", "```java\nfinal class VehicleProvider {\n    private Vehicle truck;\n    private Vehicle car;\n    VehicleProvider() {}\n    Vehicle getVehicleByType(String type){\n        switch(type){\n        case \"car\":\n            ...\n            return car;\n        case \"truck\":\n            if(truck == null){\n                System.out.println(\"lazy truck created\");\n                truck = new LazyVehicle(type);\n            }\n            return truck;\n        default:\n            ...\n    }\n    void printStatus(){...}\n}\n```", "```java\ninterface Vehicle {\n    void move();\n}\nrecord LazyVehicle(String type) implements Vehicle{\n    @Override\n    public void move() {\n        System.out.println(\"LazyVehicle, move, type:\" +\n            type);\n    }\n}\n```", "```java\n1 public static void main(String[] args) {\n2     System.out.println(\"Pattern Dependency Injection:\n          vehicle and engine\");\n3     EngineServiceProvider.addEngine(new FastEngine\n          (\"sport\"));\n4     Engine engine =\n        EngineServiceProvider.getEngineByType(\"sport\");\n5     Vehicle vehicle = new SportVehicle(engine);\n6     vehicle.move();\n7 }\n```", "```java\nPattern Dependency Injection: vehicle and engine\nFastEngine, started\nFastEngine, run\nSportCar, move\n```", "```java\nfinal class EngineServiceProvider {\n    private static final Map<String, Engine> ENGINES = new\n        HashMap<>();\n    ...\n    static Engine getEngineByType(String t){\n        return ENGINES.values().stream()\n                .filter(e -> e.type().equals(t))\n                .findFirst().orElseThrow\n                    (IllegalArgumentException::new);\n    }\n}\n```", "```java\ninterface Vehicle {\n    void move();\n}\nclass SportVehicle implements Vehicle{\n    private final Engine engine;\n    SportVehicle(Engine e) {...}\n    @Override\n    public void move() {\n        if(!engine.isStarted()){\n            engine.start();\n    }\n        engine.run();\n        System.out.println(\"SportCar, move\");\n    }\n}\n```", "```java\ninterface Engine {\n    void start();\n    boolean isStarted();\n    void run();\n    String type();\n}\nclass FastEngine implements Engine{\n    private final String type;\n    private boolean started;\n    FastEngine(String type) {\n        this.type = type;\n    }\n    ...\n}\n```", "```java\npublic static void main(String[] args) {\n    System.out.println(\"Pattern Dependency Injection\n       Service Loader: vehicle and engine\");\n    ServiceLoader<Engine> engineService =\n        ServiceLoader.load(Engine.class);\n    Engine engine = engineService.findFirst()\n        .orElseThrow();\n    Vehicle vehicle = new SportVehicle(engine);\n    vehicle.move();\n}\n```"]