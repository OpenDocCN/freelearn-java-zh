["```java\nnpm install -g typescript \n```", "```java\ntsc --version \n```", "```java\nlet variable_name: type; \n```", "```java\nlet email: string;\nlet age: number;\nlet isActive: boolean; \n```", "```java\n// Check variable type\nconsole.log(typeof email); // Output is \"string\"\ntypeof email === \"string\" // true\ntypeof age === \"string\" // false \n```", "```java\nlet externalValue: unknown; \n```", "```java\nlet arrayOfNums: number[] = [1, 2, 3, 4];\nlet animals: string[] = [\"Dog\", \"Cat\", \"Tiger\"]; \n```", "```java\nlet arrayOfNums: Array<number> = [1, 2, 3, 4];\nlet animals: Array<string> = [\"Dog\", \"Cat\", \"Tiger\"]; \n```", "```java\nconst student = {\n  id: 1,\n  name: \"Lisa Smith \",\n  email: \"lisa.s@mail.com \",\n}; \n```", "```java\n// Using interface\ninterface Student {\n    id: number;\n    name: string;\n    email: string;\n};\n// Or using type\ntype Student = {\n    id: number;\n    name: string;\n    email: string;\n}; \n```", "```java\nconst myStudent: Student = {\n    id: 1,\n    name: \"Lisa Smith \",\n    email: \"lisa.s@mail.com \",\n}; \n```", "```java\ntype Student = {\n    id: number;\n    name: string;\n    email?: string;\n};\n// Student object without email\nconst myStudent: Student = {\n    id: 1,\n    name: \"Lisa Smith\"\n} \n```", "```java\ntype Person = {\n    name: string,\n    email: string;\n    address?: {\n        street: string;\n        city: string;\n    }\n} \n```", "```java\nconst person: Person = { \n    name: \"John Johnson\",\n    email: \"j.j@mail.com\"\n} \n```", "```java\n// Error is thrown\nconsole.log(person.address.street); \n```", "```java\n// Output is undefined\nconsole.log(person.address?.street); \n```", "```java\ntype InputType = string | number;\n// Use your type\nlet name: InputType = \"Hello\";\nlet age: InputType = 12; \n```", "```java\ntype Fuel = \"diesel\" | \"gasoline\" | \"electric \";\ntype NoOfGears = 5 | 6 | 7; \n```", "```java\ntype Car = {\n  brand: string;\n  fuel: Fuel;\n  gears: NoOfGears;\n} \n```", "```java\nfunction sayHello(**name: string**) {\n  console.log(\"Hello \" + name);\n} \n```", "```java\nfunction checkId(**id: string | number**) {\n  if (typeof id === \"string \")\n    // do something\n  else\n    // do something else\n} \n```", "```java\nfunction calcSum(x: number, y: number): **number** {\n  return x + y;\n} \n```", "```java\nconst calcSum = (x:number, y:number): number => x + y; \n```", "```java\nconst sayHello = (name: string): void => console.log(\"Hello \" + name); \n```", "```java\nfunction HelloComponent({ name, age }) {\n  return(\n    <>\n      Hello {name}, you are {age} years old!\n    </>\n  );\n}\nexport default HelloComponent; \n```", "```java\n// imports...\nfunction App() {\n  return(\n    <HelloComponent name=\"Mary\" age={12} />\n  )\n}\nexport default App; \n```", "```java\ntype HelloProps = {\n  name: string;\n  age: number;\n}; \n```", "```java\nfunction HelloComponent({ name, age }: **HelloProps**) {\n  return(\n    <>\n      Hello {name}, you are {age} years old!\n    </>\n  );\n}\nexport default HelloComponent; \n```", "```java\ntype HelloProps = {\n  name: string;\n  **age?**: number;\n}; \n```", "```java\n// Function without parameters \ntype HelloProps = {\n  name: string;\n  age: number;\n  **fn****:** **() =>****void****;**\n};\n// Function with parameters\ntype HelloProps = {\n  name: string;\n  age: number;\n  **fn****:** **(msg: string) =>** **void****;**\n}; \n```", "```java\n// types.ts file\nexport type HelloProps = {\n  name: string;\n  age: number;\n}; \n```", "```java\n// Import type and use it in your component\nimport { HelloProps } from ./types;\nfunction HelloComponent({ name, age }: HelloProps) {\n  return(\n    <>\n      Hello {name}, you are {age} years old!\n    </>\n  );\n}\nexport default HelloComponent; \n```", "```java\nimport React from 'react';\nimport { HelloProps } from './types';\nconst HelloComponent: React.FC<HelloProps> = ({ name, age }) => {\n  return (\n    <>\n      Hello {name}, you are {age} years old!\n    </>\n  );\n};\nexport default HelloComponent; \n```", "```java\n// boolean\nconst [isReady, setReady] = useState(false);\n// string\nconst [message, setMessage] = useState(\"\");\n// number\nconst [count, setCount] = useState(0); \n```", "```java\nconst [message, setMessage] = useState<string | undefined>(undefined); \n```", "```java\ntype User = {\n  id: number;\n  name: string;\n  email: number;\n};\n// Use type with state, the initial value is an empty User object\nconst [user, setUser] = useState<User>({} as User);\n// If null values are accepted\nconst [user, setUser] = useState<User | null>(null); \n```", "```java\n<input \n  type=\"text\" \n  onChange={handleChange} \n  value={name} \n/> \n```", "```java\nconst handleChange = (event) => {\n  setName(event.target.value);\n} \n```", "```java\nconst handleChange = (event: **React.ChangeEvent<HTMLInputElement>**) => {\n  setName(event.target.value);\n} \n```", "```java\nconst handleSubmit = (event: **React.FormEvent<HTMLFormElement>**) => {\n  event.preventDefault();\n  alert(`Hello ${name}`);\n} \n```", "```java\n    npm create vite@latest \n    ```", "```java\n    cd tsapp\n    npm install\n    npm run dev \n    ```", "```java\n    import { useState } from 'react';\n    import './App.css';\n    function App() {\n      return (\n        <>\n        </>\n      )\n    }\n    export default App; \n    ```", "```java\n    function App() {\n      **const** **[name, setName] =** **useState****(****\"\"****);**\n      return (\n        <>\n        </>\n      )\n    } \n    ```", "```java\n    // App.tsx return statement\n    return (\n      <>\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"text\"\n            value={name}\n            onChange={handleChange}\n          />\n          <input type=\"submit\" value=\"Submit\"/>\n        </form>\n      </>\n    ) \n    ```", "```java\n    // imports\n    function App() {\n      const [name, setName] = useState(\"\");\n      const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setName(event.target.value);\n      }\n      const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        alert(`Hello ${name}`);\n      }\n    // continue... \n    ```"]