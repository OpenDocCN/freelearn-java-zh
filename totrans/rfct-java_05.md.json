["```java\npublic void calculate(int num1, int num2) {\n    int sum = num1 + num2;\n    System.out.println(\"Sum: \" + sum);\n    int difference = num1 - num2;\n    System.out.println(\"Difference: \" + difference);\n}\n```", "```java\npublic void calculate(int num1, int num2) {\n    int sum = addNumbers(num1, num2);\n    printResult(\"Sum\", sum);\n    int difference = subtractNumbers(num1, num2);\n    printResult(\"Difference\", difference);\n}\nprivate static void printResult(String operationName, int result) {\n    System.out.printf(\"Result of %s: %d%n\", operationName, result);\n}\npublic static int addNumbers(int a, int b) {\n    return a + b;\n}\npublic static int subtractNumbers(int a, int b) {\n    return a - b;\n}\n```", "```java\npublic int add(int a, int b) {\n    return a + b;\n}\npublic int multiply(int a, int b) {\n    return a * b;\n}\npublic int calculate(int x, int y) {\n    int sum = add(x, y);\n    int result = multiply(sum, 2);\n    return result;\n}\n```", "```java\npublic int calculate(int x, int y) {\n    int sum = x + y;\n    int result = sum * 2;\n    return result;\n}\n```", "```java\npublic int calculate(int x, int y) {\n    int sum = x + y;\n    return sum * 2;\n}\n```", "```java\nif (transport.getEquipment().toUpperCase().equals(\"PLN\") || transport.getEquipment().toUpperCase().equals(\"TRN\")) {\n    //do something\n} else {\n    //do something else\n}\n```", "```java\nboolean isPlane = transport.getEquipment().toUpperCase().equals(\"PLN\");\nboolean isTrain = transport.getEquipment().toUpperCase().equals(\"TRN\");\nif (isPlane || isTrain) {\n    //do something\n} else {\n    //do something else\n}\n```", "```java\nint sum = num1 + num2;\nprintResult(\"Sum\", sum);\n```", "```java\nprintResult(\"Sum\", num1 + num2);\n```", "```java\nString getLocalizedName(Location location) { ... }\nCollection<Location> getAdjacentLocations(Location location) { ... }\nCoordinates getCoordinates(Location location) { ... }\n```", "```java\npublic class LocationHandler {\n    private final Location location;\n    public LocationHandler(Location location) {\n        this.location = location;\n    }\n   String getLocalizedName() { ...}\n   Collection<Location> getAdjacentLocations() { ...}\n    Coordinates getCoordinates() { ...}\n}\n```", "```java\npublic class Itinerary {\n    private final String departureAirport;\n    private final String arrivalAirport;\n    //constructor, getters...\n}\npublic class Flight {\n    private final Itinerary itinerary;\n//constructor, getter...\n}\n```", "```java\nvar departureAirport = flight.getItinerary().getDepartureAirport();\n```", "```java\npublic class Flight {\n    private final Itinerary itinerary;\n    public String getDepartureAirport(){\n        return itinerary.getDepartureAirport();\n    }\n    //constructor, getter...\n}\n```", "```java\nvar departureAirport = flight.getDepartureAirport();\n```", "```java\nclass Flight {\n    public Airport departureAirport;\n}\n```", "```java\nclass Flight {\n    private Airport departureAirport;\n    public Airport getDepartureAirport() {\n        return departureAirport;\n    }\n    public void setDepartureAirport(Airport departureAirport) {\n        this.departureAirport = departureAirport;\n    }\n}\n```", "```java\nclass Flight {\n    private Airport departureAirport;\n    // getter and setter\n    public String getDepartureAirportCode(){\n        return this.departureAirport.getAirportCode();\n    }\n}\n```", "```java\nclass Flight {\n    private Airport departureAirport;\n    // setter\n    public Airport getDepartureAirport() {\n        return departureAirport;\n    }\n    public String getDepartureAirportCode(){\n        return this.getDepartureAirport().getAirportCode();\n    }\n}\n```", "```java\nclass Flight {\n    private List<Airport> itineraryAirports;\n    public List<Airport> getItineraryAirports() {\n        return itineraryAirports;\n    }\n    public void setItineraryAirports(List<Airport> itineraryAirports) {\n        this.itineraryAirports = itineraryAirports;\n    }\n}\n```", "```java\nclass Flight {\n    private List<Airport> itineraryAirports;\n    public List<Airport> getItineraryAirports() {\n        return Collections.unmodifiableList(itineraryAirports);\n    }\n    public void addAirport(Airport itineraryAirport) {\n        this.itineraryAirports.add(itineraryAirport);\n    }\n    public void removeAirport(Airport itineraryAirport) {\n        this.itineraryAirports.remove(itineraryAirport);\n    }\n}\n```", "```java\nclass Flight {\n    private String cabinClass;\n    public Flight(String cabinClass) {\n        this.cabinClass = cabinClass;\n    }\n    //getter and toString\n}\n```", "```java\nvar expensiveFlights = flightList.stream().filter(f -> f.getCabinClass().equals(\"Business\") || f.getCabinClass().equals(\"First Class\")).collect(Collectors.toList());\n```", "```java\nvar expensiveFlights = flightList.stream().filter(f -> f.getCabinClass().higherThan(new CabinClass(\"Economy\"))).collect(Collectors.toList());\n```", "```java\npublic class CabinClass {\n    private final String name;\n    private final int value;\n    public CabinClass(String name) {\n        this.name = name;\n        switch (name) {\n            case \"Economy\":\n                value = 1;\n                break;\n            case \"Premium\":\n                value = 2;\n                break;\n            case \"Business\":\n                value = 3;\n                break;\n            case \"First\":\n                value = 4;\n                break;\n            default:\n                throw new IllegalArgumentException();\n        }\n    }\n    //getters\n    public boolean higherThan(CabinClass other){\n        return this.getValue() > other.getValue();\n    }\n}\n```", "```java\npublic class CabinClass {\n    protected final String name;\n    protected final int value;\n    protected CabinClass(String name, int value) {\n        this.name = name;\n        this.value = value;\n    }\n    //getters, toString, and higherThan\n}\n```", "```java\npublic class Economy extends CabinClass{\n    public Economy() {\n        super(\"Economy\", 1);\n    }\n}\npublic class Premium extends CabinClass{\n    public Premium() {\n        super(\"Premium\", 2);\n    }\n}\npublic class Business extends CabinClass{\n    public Business() {\n        super(\"Business\", 3);\n    }\n}\npublic class First extends CabinClass{\n    public First() {\n        super(\"First\", 4);\n    }\n}\n```", "```java\nvar economyClass = new Economy();\nvar expensiveFlights = flightList.stream().filter(f -> f.getCabinClass().higherThan(economyClass)).toList();\n```", "```java\nCustomerAddress customerAddress = addressRepository.findByCustomerId(customer.getId());\nif (customerAddress == null) {\n   customerStreet = \"Unknown\";\n   customerCity = \"Unknown\";\n} else {\n   customerStreet = customerAddress.getStreet();\n   customerCity = customerAddress.getCity();\n}\n```", "```java\ninterface CustomerAddress {\n    String getStreet();\n    String getCity();\n}\n```", "```java\nclass UnknownCustomerAddress implements CustomerAddress {\n    @Override\n    public String getStreet() {\n        return \"unknown\";\n    }\n    @Override\n    public String getCity() {\n        return \"unknown\";\n    }\n}\nclass ActualCustomerAddress implements CustomerAddress {\n    String street;\n    String city;\n   //constructor and getters\n}\n```", "```java\npublic Long calculateDistance(Itinerary itinerary) {\n    Long distance;\n    switch (itinerary.getType()) {\n        case \"TRAIN\": {\n            var departureLocation = getDepartureStation(itinerary);\n            var arrivalLocation = getArrivalStation(itinerary);\n            distance = calculateItineraryDistance(departureLocation, arrivalLocation);\n            break;\n        }\n        case \"FLIGHT\": {\n            var departureLocation = getDepartureAirport(itinerary);\n            var arrivalLocation = getArrivalAirport(itinerary);\n            distance = calculateItineraryDistance(departureLocation, arrivalLocation);\n            break;\n        }\n        default:\n            throw new IllegalArgumentException(\"Unknown type\");\n    }\n    return distance;\n}\n```", "```java\nabstract class Itinerary {\n    public abstract Long calculateItineraryDistance();\n}\nfinal class FlightItinerary extends Itinerary {\n    @Override\n    public Long calculateItineraryDistance() {\n        //calculations for a flight...\n    }\n}\nfinal class TrainItinerary extends Itinerary {\n    @Override\n    public Long calculateItineraryDistance() {\n        //calculations for a train...\n    }\n}\n```", "```java\npublic Long calculateDistance(Itinerary itinerary) {\n    Long distance = itinerary.calculateItineraryDistance();\n    return distance;\n}\n```", "```java\nvar result = doCalculations(x, y);\nif (doCalculations(x, y) > 5) {\n    //do something\n    printResult(result);\n} else {\n    //do something else\n    printResult(result);\n}\n```", "```java\nvar result = doCalculations(x, y);\nif (doCalculations(x, y) > 5) {\n    //do something\n} else {\n    //do something else\n}\nprintResult(result);\n```", "```java\npublic void printLargestPositive(int x, int y, int z) {\n    if (x > 0) {\n        if (y > 0) {\n            if (z > 0) {\n                if (x > y && x > z) {\n                    print(\"x is the largest.\");\n                } else if (y > x && y > z) {\n                    print(\"y is the largest.\");\n                } else {\n                    print(\"z is the largest.\");\n                }\n            } else {\n                print(\"z is not positive.\");\n            }\n        } else {\n            print(\"y is not positive.\");\n        }\n    } else {\n        print(\"x is not positive.\");\n    }\n}\n```", "```java\npublic void printLargestPositiveRefactored(int x, int y, int z){\n    if (x <= 0) {\n        print(\"x is not positive.\");\n        return;\n    }\n    if (y <= 0) {\n        print(\"y is not positive.\");\n        return;\n    }\n    if (z <= 0) {\n        print(\"z is not positive.\");\n        return;\n    }\n    if (x > y && x > z) {\n        print(\"x is the largest.\");\n    } else if (y > x && y > z) {\n        print(\"y is the largest.\");\n    } else {\n        print(\"z is the largest.\");\n    }\n}\n```", "```java\npublic Price getTotalItineraryPrice(User user, Itinerary itinerary){\n    Price totalPrice = calculateTotalPrice(itinerary);\n    emailService.sendPriceRecap(user);\n    return totalPrice;\n}\n```", "```java\npublic Price getTotalItineraryPrice(Itinerary itinerary) {\n    return calculateTotalPrice(itinerary);\n}\npublic void sendEmailRecap(User user) {\n    emailService.sendPriceRecap(user);\n}\n```", "```java\nclass Person {\n    private String taxCode;\n    private String name;\n    public String getTaxCode() {\n        return taxCode;\n    }\n    public void setTaxCode(String taxCode) {\n        this.taxCode = taxCode;\n    }\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n```", "```java\nPerson p = new Person();\np.setTaxCode(\"4598308JKFLD3424243\");\np.setName(\"John Doe\");\n```", "```java\nPerson p = new Person(\"4598308JKFLD3424243\");\np.setName(\"John Doe\");\n```", "```java\npublic final class PersonBuilder {\n    private String name;\n    private final String taxCode;\n    private PersonBuilder(String taxCode) {\n        this.taxCode = taxCode;\n    }\n    public static PersonBuilder builder(String taxCode) {\n        return new PersonBuilder(taxCode);\n    }\n    public PersonBuilder name(String name) {\n        this.name = name;\n        return this;\n    }\n    public Person build() {\n        Person person = new Person(taxCode);\n        person.setName(name);\n        return person;\n    }\n}\n```", "```java\nPerson p = PersonBuilder.builder(\"4598308JKFLD3424243\")\n        .name(\"John Doe\")\n        .build();\n```", "```java\npublic class Triangle {\n    private Integer sidesNumber;\n}\npublic class Square {\n    private Integer sidesNumber;\n}\n```", "```java\npublic abstract class Polygon {\n    private Integer sidesNumber;\n}\npublic class Square extends Polygon {\n}\npublic class Triangle extends Polygon{\n}\n```", "```java\npublic class Vehicle {\n    protected EngineType engine;\n}\npublic class Car extends Vehicle{\n}\npublic class Bicycle extends Vehicle{\n}\n```", "```java\npublic class Vehicle {\n}\npublic class Car extends Vehicle{\n    protected EngineType engine;\n}\npublic class Bicycle extends Vehicle{\n}\n```", "```java\npublic class Triangle extends Polygon{\n    public Long calculatePerimeter(){\n        //calculations...\n    }\n}\npublic class Square extends Polygon {\n    public Long calculatePerimeter(){\n        //calculations...\n    }\n}\n```", "```java\npublic abstract class Polygon {\n    private Integer sidesNumber;\n    public Long calculatePerimeter(){\n        //calculations...\n    }\n}\npublic class Triangle extends Polygon{\n}\npublic class Square extends Polygon {\n}\n```", "```java\npublic class Vehicle {\n    protected void fillTank() {\n        //method implementation\n    }\n}\npublic class Car extends Vehicle{\n}\npublic class Bycicle extends Vehicle{\n}\n```", "```java\npublic class Vehicle {\n}\npublic class Car extends Vehicle{\n    protected void fillTank() {\n        //method implementation\n    }\n}\npublic class Bycicle extends Vehicle{\n}\n```", "```java\npublic class Triangle extends Polygon {\n    private final Long aLength; //length of side a\n    private final Long bLength; //length of side b\n    private final Long cLength; //length of side c\n    public Triangle(Long aLength, Long bLength, Long cLength) {\n        this.aLength = aLength;\n        this.bLength = bLength;\n        this.cLength = cLength;\n    }\n    public Long getPerimeter() {\n        return aLength + bLength + cLength;\n    }\n}\npublic class Square extends Polygon {\n    private final Long sideLength;\n    public Square(Long sideLength) {\n        this.sideLength = sideLength;\n    }\n    public Long getPerimeter() {\n        return sideLength * 4;\n    }\n}\npublic abstract class Polygon {\n}\n```", "```java\npublic class Triangle extends Polygon {\n    private final Long aLength; //length of side a\n    private final Long bLength; //length of side b\n    private final Long cLength; //length of side c\n    public Triangle(Long aLength, Long bLength, Long cLength) {\n        this.aLength = aLength;\n        this.bLength = bLength;\n        this.cLength = cLength;\n    }\n    @Override\n    protected Collection<Long> getSideLengths() {\n        return List.of(aLength, bLength, cLength);\n    }\n}\npublic class Square extends Polygon {\n    private final Long sideLength;\n    public Square(Long sideLength) {\n        this.sideLength = sideLength;\n    }\n    @Override\n    protected Collection<Long> getSideLengths() {\n        return List.of(sideLength, sideLength, sideLength, sideLength);\n    }\n}\npublic abstract class Polygon {\n    public Long getPerimeter() {\n        Collection<Long> sideLengths = getSideLengths();\n        Long perimeter = 0L;\n        for (Long length : sideLengths) {\n            perimeter += length;\n        }\n        return perimeter;\n    }\n    protected abstract Collection<Long> getSideLengths();\n}\n```", "```java\npublic class Itinerary {\n    private String transportType;\n    private String cabinClass;\n    //getters and setters\n}\n```", "```java\nprivate static final String FLIGHT = \"FLIGHT\";\nprivate static final String TRAIN = \"TRAIN\";\nprivate static final String ECONOMY = \"ECONOMY\";\nprivate static final String FIRSTCLASS = \"FIRSTCLASS\";\n```", "```java\nItinerary itinerary = new Itinerary();\nitinerary.setCabinClass(FLIGHT);\nitinerary.setTransportType(ECONOMY);\n```", "```java\nenum TransportType {FLIGHT, TRAIN}\nenum CabinClass {ECONOMY, FIRSTCLASS}\n```", "```java\npublic class Itinerary {\n    private TransportType transportType;\n    private CabinClass cabinClass;\n    public Enums.TransportType getTransportType() {\n        return transportType;\n    }\n    public void setTransportType(Enums.TransportType transportType) {\n        this.transportType = transportType;\n    }\n    public Enums.CabinClass getCabinClass() {\n        return cabinClass;\n    }\n    public void setCabinClass(Enums.CabinClass cabinClass) {\n        this.cabinClass = cabinClass;\n    }\n}\n```", "```java\nItinerary itinerary = new Itinerary();\nitinerary.setCabinClass(CabinClass.ECONOMY);\nitinerary.setTransportType(TransportType.FLIGHT);\n```"]