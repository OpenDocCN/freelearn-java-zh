["```java\n    private void doSomething() { … }\n    ```", "```java\n    public void doSomething() { … }\n    ```", "```java\n    protected void doSomething() { … }\n    ```", "```java\n    void doSomething() { … } // Package\n    ```", "```java\npublic class StaticTest01 {\n   private int value;\n   public void nonStaticMethod(int value) {\n      this.value = value;\n   }\n}\n```", "```java\npublic class StaticTest01 {\n  private int value;\n  public void nonStaticMethod(StaticTest01 this, int value){\n     this.value = value;\n  }\n   …\n}\n```", "```java\nvar sTest = new StaticTest01();\n```", "```java\nsTest.nonStaticMethod(42);\n```", "```java\nsTest.nonStaticMethod(sTest, 42);\n```", "```java\npublic class StaticTest {\n   private int value;\n   public final void nonStaticMethod(int value) {\n      this.value = value;\n   }\n}\n```", "```java\npublic final class StaticTest {\n```", "```java\npublic abstract class ForcedOverrideTest {\n   private int value;\n   public abstract void nonStaticMethod(int value);\n   }\n}\n```", "```java\n    public void doSomething() { … } //\n    ```", "```java\n    public double doSomething() { … }\n    ```", "```java\n    public String doSomething() { … }\n    ```", "```java\n@WebServlet(name = \"AddToEmailList\", \n                        urlPatterns = {\"/AddToEmailList\"})\npublic class AddToEmailListServlet extends HttpServlet{...}\n```", "```java\nConnection connection;\nprivate void openConnection(){\n    connection = \n        DriverManager.getConnection(url, user, password);\n}\n```", "```java\nConnection connection;\nprivate void openConnection()throws SQLException{\n    connection = \n        DriverManager.getConnection(url, user, password);\n}\n```", "```java\nsynchronized public int add(int num1, int num2) {\n   return num1 + num2;\n}\n```", "```java\n    public <T> List<T>getSubList(List<T> a, int b, int c) {\n        return a.subList(b, c);\n    }\n```", "```java\nvar account = new BankAcount();\n```", "```java\npublic final AClass { … }\n```", "```java\npublic class AnotherClass extends AClass { … }\n```", "```java\npublic boolean equals(Object obj)\n```", "```java\npublic class Stuff {\n    private int x;\n    public Stuff(int y){\n        x = y;\n    }\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (obj == null) {\n            return false;\n        }\n        if (getClass() != obj.getClass()) {\n            return false;\n        }\n        final Stuff other = (Stuff) obj;\n        return this.x == other.x;\n    }\n```", "```java\npublic int hashCode()\n```", "```java\n    @Override\n    public int hashCode() {\n        int hash = 5;\n        hash = 79 * hash + this.x;\n        return hash;\n    }\n```", "```java\npublic String toString()\n```", "```java\n    @Override\n    public String toString() {\n        return \"Stuff{\" + \"x=\" + x + '}';\n    }\n```", "```java\npublic interface GamingDAO {\n    // Create\n    int create(Gamer gamer) throws SQLException;\n    int create(Games games) throws SQLException;\n    // Read\n    List<Gamer> findAll() throws SQLException;\n    Gamer findID(int id) throws SQLException;\n    // Update\n    int update(Gamer gamer) throws SQLException;\n    int update(Games games) throws SQLException;\n    // Delete\n    int deleteGamer(int ID) throws SQLException;\n    int deleteGames(int ID) throws SQLException;\n}\n```", "```java\npublic class GamingDAOImpl implements GamingDAO {\n    @Override\n    public List<Gamer> findAll() throws SQLException {…}\n    @Override\n    public int create(Gamer gamer) throws SQLException {…}\n    @Override\n    public Gamer findID(int id) throws SQLException {…}\n```", "```java\npublic interface Pencil {\n   void write1(); // Standard interface method\n   default void write2() {\n      System.out.printf(\"default%n\");\n      write4();\n   }\n   static void write3() {\n      System.out.printf(\"static%n\");\n   }\n   private void write4() {\n      System.out.printf(\"private%n\");\n   }\n   public void perform(); // Standard interface method\n}\n```", "```java\npublic class WritingTool implements Pencil {\n   @Override\n   public void write1() {\n      System.out.printf(\"standard interface\");\n   }\n   @Override\n   public void perform() {\n       write1();\n       write2();\n       Pencil.write3();\n   }\n   public void write5() {\n       System.out.printf(\"Method only in WritingTool\");\n   }\n   public static void main(String[] args) {\n       Pencil tool = new WritingTool();\n       tool.perform();\n       tool.write5(); \n   }\n}\n```", "```java\npublic class SingleInheritance extends ASuperClass { ... }\npublic class MultiInterface implements IFace1,IFace2 {...}\n```", "```java\npublic class MultiClass extends ASuperClass implements  \n                                     IFace1,IFace2 {...}\n```", "```java\npublic sealed class SealedClass permits SubClass{ }\n```", "```java\npublic final class SubClass extends SealedClass { }\n```", "```java\npublic sealed interface SealedInterface permits SubClass{ }\npublic final class SubClass implements SealedInterface { }\n```", "```java\npublic record Employee(String name, double salary) { }\n```", "```java\nvar worker = new Employee(\"Bob\", 43233.54);\n```", "```java\npublic record Employee(String name, double salary) { \n    public Employee {\n        if (salary < 50000) {\n            // code if this is true\n        }\n    }\n}\n```", "```java\nvar aSalary = worker.salary(); \n```", "```java\npublic class SuperClass {\n\n    protected int count;\n\n    public void setCount(int count) {\n       this.count = count;\n    }\n\n    public void displayCount() {\n       System.out.printf(\"SuperClass count = %d%n\", count);\n    }\n}\n```", "```java\npublic class Polymorphism {\n     private void show(SuperClass sc) {\n        sc.setCount(42);\n        sc.displayCount();\n    }\n\n    public void perform() {\n        var superClass = new SuperClass();\n        show(superClass);\n    }\n    public static void main(String[] args) {\n        new Polymorphism().perform();\n    }\n}\n```", "```java\nSuperClass count = 42\n```", "```java\npublic class SubClass extends SuperClass {\n    @Override\n    public void displayCount() {\n        System.out.printf(\"SubClass count = %d%n\", count);\n    }\n}\n```", "```java\n    public void perform() {\n        var subClass = new SubClass();\n        show(subClass);\n    }\n    private void show(SuperClass sc) {\n        sc.setCount(42);\n        sc.displayCount();\n    }\n```", "```java\nSubClass count = 42\n```", "```java\npublic interface Interface {\n    void displayCount();\n}\n```", "```java\npublic class Implementation implements Interface {\n    protected int count;\n    public void setCount(int count) {\n        this.count = count;\n    }\n    @Override\n    public void displayCount() {\n        System.out.printf(\"Implement count = %d%n\", count);\n    }\n}\n```", "```java\npublic class PolyInterfaceExample {\n    private void show(Interface face) {\n        face.displayCount();\n    }\n    public void perform() {\n        var implement = new Implementation();\n        implement.setCount(42);\n        show(implement);\n    }\n    public static void main(String[] args) {\n        new PolyInterfaceExample().perform();\n    }\n}\n```", "```java\nImplementation count = 42\n```", "```java\npublic class Receiver {\n    public void displayName(String name) {\n        System.out.printf(\"%s%n\", name);\n    }\n}\n```", "```java\npublic class Association {\n\n    private final Receiver receiveString;\n\n    public Association(Receiver receiveString) {\n        this.receiveString = receiveString;\n    }\n    public void sendMessage() {\n        receiveString.displayName(\"Bob\");\n    }\n}\n```", "```java\npublic class Composition {\n    public void perform() {\n        var receive = new Receiver();\n        var associate = new Association(receive);\n        associate.sendMessage();\n    }\n    public static void main(String[] args) {\n        new Composition().perform();\n    }\n}\n```", "```java\n    public void perform() {\n        var receive = new Receiver();\n        var associate = new Association(receive);\n        associate.sendMessage();\n        associate = null;\n        associate.sendMessage(); // ERROR       \n        receive.displayName(\"Ken\");\n    }\n```", "```java\npublic class Aggregation {\n\n    private final Receiver receiveString;\n\n    public Aggregation() {\n        receiveString = new Receiver();\n    }\n\n    public void sendMessage() {\n        receiveString.displayName(\"Bob\");\n    }\n}\n```"]