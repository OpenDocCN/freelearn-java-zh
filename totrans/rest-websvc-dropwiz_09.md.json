["```java\n<dependency>\n  <groupId>io.dropwizard</groupId>\n  <artifactId>dropwizard-auth</artifactId>\n  <version>0.7.0-SNAPSHOT</version>\n</dependency>\n```", "```java\n      package com.dwbook.phonebook;import com.google.common.base.Optional;\n      import io.dropwizard.auth.AuthenticationException;\n      import io.dropwizard.auth.Authenticator;\n      import io.dropwizard.auth.basic.BasicCredentials;\n      public class PhonebookAuthenticator implementsAuthenticator<BasicCredentials, Boolean> {\n        public Optional<Boolean> authenticate(BasicCredentials c) throws AuthenticationException {\n          if (c.getUsername().equals(\"john_doe\") && c.getPassword().equals(\"secret\")) {\n          return Optional.of(true);\n          }\n          return Optional.absent();\n        }\n      }\n    ```", "```java\n      // Register the authenticator with the environment\n      e.jersey().register(new BasicAuthProvider<Boolean>(\n        new PhonebookAuthenticator(), \"Web Service Realm\"));\n    ```", "```java\n    public Response getContact(@PathParam(\"id\") int id, @Auth Boolean isAuthenticated) { … }\n\n    public Response createContact(Contact contact, @Auth   Boolean isAuthenticated) throws URISyntaxException { … }\n\n    public Response deleteContact(@PathParam(\"id\") int id, @Auth Boolean isAuthenticated) { … }\n    public Response updateContact(@PathParam(\"id\") int id, Contact contact, @Auth Boolean isAuthenticated) { … }\n    ```", "```java\nfinal Client client = new JerseyClientBuilder().using(environment).build();client.addFilter(new HTTPBasicAuthFilter(\"john_doe\", \"secret\"));\n```", "```java\n@Auth(required=false)\n```", "```java\nCREATE TABLE IF NOT EXISTS `users` (\n  `username` varchar(20) NOT NULL,\n  `password` varchar(255) NOT NULL,\n  PRIMARY KEY (`username`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;\n```", "```java\nINSERT INTO `users` VALUES ('wsuser', 'wspassword');\n```", "```java\n      package com.dwbook.phonebook.dao;\n      import org.skife.jdbi.v2.sqlobject.*;\n      public interface UserDAO {\n        @SqlQuery(\"select count(*) from users where username = :username and password = :password\")\n        int getUser(@Bind(\"username\") String username, @Bind(\"password\") String password);\n      }\n    ```", "```java\n      import org.skife.jdbi.v2.DBI;\n      import com.dwbook.phonebook.dao.UserDAO;\n      import com.google.common.base.Optional;\n      import io.dropwizard.auth.AuthenticationException;\n      import io.dropwizard.auth.Authenticator;\n      import io.dropwizard.auth.basic.BasicCredentials;\n\n      public class PhonebookAuthenticator implements Authenticator<BasicCredentials, Boolean> {\n        private final UserDAO userDao;\n\n        public PhonebookAuthenticator(DBI jdbi) {\n          userDao = jdbi.onDemand(UserDAO.class);\n        }\n\n        public Optional<Boolean> authenticate(BasicCredentials c) throws AuthenticationException {\n          boolean validUser = (userDao.getUser(c.getUsername(), c.getPassword()) == 1);\n          if (validUser) {\n            return Optional.of(true);\n          }\n          return Optional.absent();\n        }\n      }\n    ```", "```java\n    // Register the authenticator with the environment\n    e.jersey().register(new BasicAuthProvider<Boolean>(\n      new PhonebookAuthenticator(jdbi), \"Web Service Realm\"));\n    ```", "```java\n// Authenticator, with caching support (CachingAuthenticator)\nCachingAuthenticator<BasicCredentials, Boolean> authenticator = new CachingAuthenticator<BasicCredentials, Boolean>(\ne.metrics(), \nnew PhonebookAuthenticator(jdbi), \nCacheBuilderSpec.parse(\"maximumSize=10000, expireAfterAccess=10m\"));\n\n// Register the authenticator with the environment\ne.jersey().register(new BasicAuthProvider<Boolean>(\nauthenticator, \"Web Service Realm\"));\n\n// Register the authenticator with the environment\ne.jersey().register(new BasicAuthProvider<Boolean>(\nauthenticator, \"Web Service Realm\"));\n```"]