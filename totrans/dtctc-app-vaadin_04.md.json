["```java\npublic class VaadinUI extends UI {\n\n    static { Messages.addBundle(\"messages\"); }\n\n    @Override\n    protected void init(VaadinRequest vaadinRequest) {\n        if (AuthService.isAuthenticated()) {\n            setContent(new PrivateComponent());\n        } else {\n            setContent(new PublicComponent());\n        }\n    }\n}\n```", "```java\nVaadinSession.getCurrent().setAttribute(\"number\", 777);\n```", "```java\nVaadinSession.getCurrent().setAttribute(\"number\", null);\n```", "```java\npublic class AuthService {\n\n    private static final String USERNAME_ATTRIBUTE = \"username\";\n\n    public static boolean authenticate(\n            String username, String password) {\n\n        boolean authentic = \"admin\".equals(username) &&\n                \"admin\".equals(password);\n\n        if (authentic) {\n            VaadinSession.getCurrent().setAttribute(\n                    USERNAME_ATTRIBUTE, username);\n        }\n\n        return authentic;\n    }\n\n    public static boolean isAuthenticated() {\n        return VaadinSession.getCurrent().getAttribute(\n                USERNAME_ATTRIBUTE) != null;\n    }\n}\n```", "```java\nUser existingUser = userRepository.findByUsernameAndPassword(\n        username, password);\nboolean authentic = existingUser != null;\n```", "```java\npublic class PublicComponent extends Composite {\n\n    public PublicComponent() {\n        LoginFormComponent loginForm = new LoginFormComponent();\n        loginForm.setCaptions(\n                Messages.get(\"auth.username\"),\n                Messages.get(\"auth.password\"),\n                Messages.get(\"auth.login\"),\n                Messages.get(\"auth.rememberMe\"));\n\n        loginForm.setLoginListener(form -> loginClicked(form));\n        setCompositionRoot(loginForm);\n    }\n\n    private void loginClicked(LoginFormComponent form) {\n        if (!AuthService.authenticate(\n                form.getUsername(), form.getPassword())) {\n            Notification.show(\n                    Messages.get(\"auth.bad.credentials\"),\n                            Notification.Type.ERROR_MESSAGE);\n        }\n    }\n}\n```", "```java\npublic class AuthService {\n\n    private static final String USERNAME_ATTRIBUTE = \"username\";\n\n    public static boolean authenticate(\n            String username, String password) {\n\n        boolean authentic = \"admin\".equals(username) &&\n                \"admin\".equals(password);\n\n        if (authentic) {\n            VaadinSession.getCurrent().setAttribute(\n                    USERNAME_ATTRIBUTE, username);\n            Page.getCurrent().reload();\n        }\n\n        return authentic;\n    }\n    ...\n}\n```", "```java\npublic class AuthService {\n    ...\n\n    public static void logout() {\n        VaadinService.getCurrentRequest().getWrappedSession()\n                .invalidate();\n        Page.getCurrent().setLocation(\"\");\n    }\n}\n```", "```java\npublic class PrivateComponent extends Composite {\n\n    public PrivateComponent() {\n        Label label = new Label(\n                \"User: \" + AuthService.getAuthenticatedUser());\n        Button logOutButton = new Button(\n                Messages.get(\"auth.logout\"),e -> logoutClicked());\n        setCompositionRoot(new VerticalLayout(label,\n                logOutButton));\n    }\n\n    private void logoutClicked() {\n        AuthService.logout();\n    }\n}\n```", "```java\npublic class AuthService { \n    ... \n\n    public static String getAuthenticatedUser() { \n        return (String) VaadinSession.getCurrent().getAttribute( \n                USERNAME_ATTRIBUTE); \n    } \n} \n```", "```java\n    cd Data-centric-Applications-with-Vaadin-8\n    git checkout remember-me-exercise\n```", "```java\nCookie cookie = new Cookie(\"remember-me\", \"admin\"); \ncookie.setPath(\"/\"); \ncookie.setMaxAge(60 * 60 * 24 * 15); \nVaadinService.getCurrentResponse().addCookie(cookie); \n```", "```java\nCookie cookie = new Cookie(\"remember-me\", \"\"); \ncookie.setPath(\"/\"); \ncookie.setMaxAge(0); \nVaadinService.getCurrentResponse().addCookie(cookie); \n```", "```java\nCookie[] cookies = VaadinService.getCurrentRequest().getCookies(); \n\nOptional<Cookie> cookie = Arrays.stream(cookies) \n        .filter(c -> \"remember-me\".equals(c.getName())) \n        .findFirst(); \n```", "```java\nSecureRandom random = new SecureRandom(); \nString randomKey = new BigInteger(130, random).toString(32); \n```", "```java\nprivate Optional<Component> getComponent(User user) {\n\n    if (user.getRole().equals(Role.Admin)) {\n        return new AdminComponent();\n\n    } else if (user.getRole().equals(Role.Employee)) {\n        return new EmployeeComponent();\n    }\n\n    return Optional.empty();\n}\n```", "```java\npublic class EmployeeComponent extends Composite {\n    public EmployeeComponent() {\n        ...\n\n        User user = AuthService.getCurrentUser();\n\n        if (user.getRole().equals(Role.Employee)) {\n            Button delete = new Button();\n            someLayout.addComponent(delete);\n        }\n        ...\n    }\n}\n```", "```java\npublic class EmployeeComponent extends Composite { \n    public EmployeeComponent(boolean showDeleteButton) { \n        ... \n\n        if (showDeleteButton) { \n            Button delete = new Button(); \n            someLayout.addComponent(delete); \n            ... \n        } \n        ... \n    } \n} \n```", "```java\nprivate Optional<Component> getComponent(User user) { \n\n    if (user.getRole().equals(Role.Admin)) { \n        return new AdminComponent(); \n\n    } else if (user.getRole().equals(Role.Employee)) { \n        return new EmployeeComponent(true); \n\n    } else if (user.getRole().equals(Role.Trainee)) { \n        return new EmployeeComponent(false); \n    } \n\n    return Optional.empty(); \n} \n```", "```java\nString pathInfo = VaadinRequest.getCurrent().getPathInfo(); \nassert(pathInfo.equals(\"users\")); \n```", "```java\nString name = VaadinRequest.getCurrent().getParameter(\"name\"); \nassert(name.equals(\"Alejandro\")); \n```", "```java\npublic class FrontController { \n    public static void route(VaadinRequest request, \n        SingleComponentContainer container) { \n\n        String path = request.getPathInfo(); \n\n        if (\"users\".equals(path)) { \n            container.setContent(new UsersComponent()); \n\n        } else if (\"orders\".equals(path)) { \n            container.setContent(new OrdersComponent()); \n\n        } else { ... }         \n    } \n} \n```", "```java\npublic class VaadinUI extends UI { \n    @Override \n    protected void init(VaadinRequest request) { \n        FrontController.route(request, this); \n    } \n} \n```", "```java\npublic class FrontController { \n    public static void route(VaadinRequest request, \n        SingleComponentContainer container) { \n\n        String path = request.getPathInfo(); \n\n        if (!AuthService.userCanAccess(path)) { \n            container.setContent(new ErrorComponent( \n                \"Access denied.\")); \n            return; \n       } \n\n       ... \n    } \n} \n```", "```java\npublic class VaadinUI extends UI { \n    @Override \n    protected void init(VaadinRequest vaadinRequest) { \n        Navigator navigator = new Navigator(this, this); \n\n        navigator.addView(\"view1\", new View1()); \n        navigator.addView(\"view2\", new View2()); \n    } \n} \n```", "```java\nnavigator.addView(\"view1\", View1.class);\n```", "```java\npublic class View1 extends Composite implements View { \n    public View1() { \n        setContent(new Label(\"View 1\")); \n    } \n}\n```", "```java\npublic class AuthViewListener implements ViewChangeListener { \n\n    @Override \n    public boolean beforeViewChange(ViewChangeEvent event) { \n        if (AuthService.userCanAccess(event.getViewName())) { \n            return true; \n        } \n\n        return false; \n    } \n} \n```"]