["```java\n    @Repository \n    public class AccountDaoImpl implements AccountDao { \n      // class body here... \n    } \n\n    <beans> \n      <!-- Exception translation bean post processor --> \n      <bean class=\"org.springframework.dao.annotation.\n      PersistenceExceptionTranslationPostProcessor\"/> \n      <bean id=\"accountDao\" class=\"com.packt.patterninspring.chapter8.\n      bankapp.dao.AccountDaoImpl\"/> \n    </beans> \n```", "```java\n    public interface AccountDao { \n      Integer totalAccountsByBranch(String branchName); \n    } \n\n    public class AccountDaoImpl extends JdbcDaoSupport implements\n    AccountDao { \n      @Override \n      public Integer totalAccountsByBranch(String branchName) { \n        String sql = \"SELECT count(*) FROM Account WHERE branchName = \n        \"+branchName; \n        return this.getJdbcTemplate().queryForObject(sql,   \n        Integer.class); \n       } \n\n    } \n```", "```java\n    public class AccountDaoImpl implements AccountDao { \n      private SessionFactory sessionFactory; \n\n      public void setSessionFactory(SessionFactory sessionFactory) { \n        this.sessionFactory = sessionFactory; \n      } \n       //..... \n    } \n```", "```java\n    @Bean \n    public LocalSessionFactoryBean sessionFactory(DataSource \n    dataSource) { \n      LocalSessionFactoryBean sfb = new LocalSessionFactoryBean(); \n      sfb.setDataSource(dataSource); \n      sfb.setPackagesToScan(new String[] {   \n        \"com.packt.patterninspring.chapter8.bankapp.model\" }); \n        Properties props = new Properties(); \n        props.setProperty(\"dialect\", \n        \"org.hibernate.dialect.H2Dialect\"); \n        sfb.setHibernateProperties(props); \n        return sfb; \n    } \n```", "```java\n    package com.packt.patterninspring.chapter8.bankapp.dao; \n\n    import org.hibernate.SessionFactory; \n    import org.springframework.stereotype.Repository; \n    import org.springframework.beans.factory.annotation.Autowired; \n    @Repository \n    public class AccountDaoImpl implements AccountDao { \n      @Autowired \n      private SessionFactory sessionFactory; \n\n      public void setSessionFactory(SessionFactory sessionFactory) { \n        this.sessionFactory = sessionFactory; \n      } \n\n      @Override \n      public Integer totalAccountsByBranch(String branchName) { \n        String sql = \"SELECT count(*) FROM Account WHERE branchName =\n        \"+branchName; \n        return this.sessionFactory.getCurrentSession().createQuery(sql,\n        Integer.class).getSingleResult(); \n      } \n      @Override \n      public Account findOne(long accountId) { \n        return (Account)   \n        this.sessionFactory.currentSession().\n        get(Account.class, accountId); \n      } \n      @Override \n      public Account findByName(String name) { \n        return (Account) this.sessionFactory.currentSession().\n        createCriteria(Account.class) \n        .add(Restrictions.eq(\"name\", name)) \n        .list().get(0); \n      } \n      @Override \n      public List<Account> findAllAccountInBranch(String branchName) { \n       return (List<Account>) this.sessionFactory.currentSession() \n\n       .createCriteria(Account.class).add(Restrictions.eq(\"branchName\",  \n       branchName)).list(); \n      }  \n    } \n```", "```java\n    @Bean \n    public BeanPostProcessor persistenceTranslation() { \n      return new PersistenceExceptionTranslationPostProcessor(); \n    } \n```", "```java\n    public interface PlatformTransactionManager { \n      TransactionStatus getTransaction( \n        TransactionDefinition definition) throws TransactionException; \n       void commit(TransactionStatus status) throws   \n         TransactionException; \n       void rollback(TransactionStatus status) throws\n         TransactionException; \n   } \n```", "```java\n    @Bean \n    public PlatformTransactionManager transactionManager(DataSource \n    dataSource) { \n      return new DataSourceTransactionManager(dataSource); \n    } \n```", "```java\n    <bean id=\"transactionManager\" \n     class=\"org.springframework.jdbc.datasource.\n     DataSourceTransactionManager\"> \n     <property name=\"dataSource\" ref=\"dataSource\"/> \n    </bean> \n```", "```java\n    @Service \n    public class TransferServiceImpl implements TransferService{ \n      //... \n      @Transactional \n      public void transfer(Long amount, Long a, Long b){ \n        // atomic unit-of-work \n      } \n      //... \n    } \n```", "```java\n    @Service \n    @Transactional \n    public class TransferServiceImpl implements TransferService{ \n      //... \n      public void transfer(Long amount, Account a, Account b){ \n        // atomic unit-of-work \n      } \n      public Long withdraw(Long amount,  Account a){ \n        // atomic unit-of-work \n      } \n      //... \n    } \n```", "```java\n    @Configuration \n    @EnableTransactionManagement \n    public class InfrastructureConfig { \n\n      //other infrastracture beans definitions \n\n     @Bean \n     public PlatformTransactionManager transactionManager(){ \n         return new DataSourceTransactionManager(dataSource()); \n     } \n   } \n```", "```java\n    package com.packt.patterninspring.chapter8.bankapp.service; \n\n    import org.springframework.beans.factory.annotation.Autowired; \n    import org.springframework.stereotype.Service; \n    import org.springframework.transaction.PlatformTransactionManager; \n    import org.springframework.transaction.TransactionStatus; \n    import org.springframework.transaction.support.TransactionCallback; \n    import org.springframework.transaction.support.TransactionTemplate; \n\n    import com.packt.patterninspring.chapter8.bankapp.model.Account; \n    import com.packt.patterninspring.chapter8.bankapp.\n      repository.AccountRepository; \n\n    @Service \n    public class AccountServiceImpl implements AccountService { \n      //single TransactionTemplate shared amongst all methods in this \n      instance \n      private final TransactionTemplate transactionTemplate; \n      @Autowired \n      AccountRepository accountRepository; \n\n      // use constructor-injection to supply the \n      PlatformTransactionManager \n      public AccountServiceImpl(PlatformTransactionManager \n      transactionManager) { \n        this.transactionTemplate = new \n        TransactionTemplate(transactionManager); \n      } \n\n      @Override \n      public Double cheeckAccountBalance(Account account) { \n        return transactionTemplate.execute(new \n        TransactionCallback<Double>() { \n          // the code in this method executes in a transactional \n          context \n          public Double doInTransaction(TransactionStatus status) { \n            return accountRepository.checkAccountBalance(account); \n          } \n        });  } \n    } \n```", "```java\n    @Repository \n    public class HibernateAccountRepository implements \n    AccountRepository { \n      SessionFactory sessionFactory; \n      public HibernateAccountRepository(SessionFactory \n      sessionFactory) { \n        super(); \n        this.sessionFactory = sessionFactory; \n      } \n     //... \n   } \n```", "```java\n    @Repository \n    public class HibernateAccountRepository{//...} \n```", "```java\n    @Service \n    @Transactional \n    public class AccountServiceImpl implements AccountService {//...} \n```"]