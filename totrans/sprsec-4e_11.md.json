["```java\n.requestMatchers(\"/events/\").hasRole(\"ADMIN\")\n```", "```java\n// allow users with ROLE_ADMIN hasRole('ADMIN')\n// allow users that do not have the ROLE_ADMIN\n!hasRole('ADMIN')\n// allow users that have ROLE_ADMIN or ROLE_ROOT and\n// did not use the remember me feature to login\nisFullyAuthenticated() and hasAnyRole('ADMIN','ROOT')\n// allow if Authentication.getName() equals admin authentication.name == 'admin'\n```", "```java\n.requestMatchers(\"/events/\").hasRole(\"ADMIN\")\n```", "```java\n//src/main/resources/templates/fragments/header.xhtml\n<!DOCTYPE html>\n<html \n      >\n...\n<li sec:authorize-url=\"/events/\">\n    <a id=\"navEventsLink\" th:href=\"@{/events/}\">All Events</a></li>\n```", "```java\n<li sec:authorize-url=\"/events/\">\n    <a id=\"navEventsLink\" th:href=\"@{/events/}\">All Events</a></li>\n```", "```java\n//src/main/resources/templates/fragments/header.xhtml\n<li sec:authorize=\"isAuthenticated()\">\n    <a id=\"navMyEventsLink\" th:href=\"@{/events/my}\">My Events</a></li>\n```", "```java\n//src/main/java/com/packtpub/springsecurity/web/controllers/WelcomeControll er.java\n@ModelAttribute(\"showCreateLink\")\npublic boolean showCreateLink(Authentication authentication) {\n    // NOTE We could also get the Authentication from SecurityContextHolder.getContext().getAuthentication()\n    return authentication != null && authentication.getName().contains(\"user\");\n}\n```", "```java\n//src/main/resources/templates/fragments/header.xhtml\n<li th:if=\"${showCreateLink}\" class=\"nav-item\"><a class=\"nav-link\" id=\"navCreateEventLink\"\n                        th:href=\"@{/events/form}\">Create Event</a>\n```", "```java\n//src/main/java/com/packtpub/springsecurity/web/controllers/WelcomeControll er.java\n<li th:if=\"${showAdminLink}\" class=\"nav-item\"><a class=\"nav-link\" id=\"navH2Link\"\n                        target=\"_blank\"\n                        th:href=\"@{/admin/h2}\">H2</a></li>\n```", "```java\nApplicationContext context = WebApplicationContextUtils\n       .getRequiredWebApplicationContext(servletContext);\nWebInvocationPrivilegeEvaluator privEvaluator = context.getBean(WebInvocationPrivilegeEvaluator.class);\n```", "```java\n//src/main/resources/templates/index.xhtml\n<li th:if=\"${showAdminLink}\">\n    <a class=\"link-warning\" id=\"h2Link\" target=\"_blank\" th:href=\"@{admin/h2/}\">H2\n...\n</li>\n```", "```java\nimport org.springframework.security.access.prepost.PreAuthorize;\n...\npublic interface CalendarService {\n...\n    @PreAuthorize(\"hasRole('ADMIN')\")\n    List<Event> getEvents();\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityC onfig.java\n@Configuration\n@EnableWebSecurity\n@EnableMethodSecurity\npublic class SecurityConfig {\n```", "```java\norg.springframework.security.access.AccessDeniedException: Access Denied\n at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization\n at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke\n at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed\n at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed\n at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept\n at com.packtpub.springsecurity.service.DefaultCalendarService$$SpringCGLIB$$0.getEvents\n at com.packtpub.springsecurity.web.controllers.EventsController.events\n```", "```java\nDefaultCalendarService originalService = context.getBean (CalendarService.class)\nCalendarService secureService = new CalendarService() {\n//… other methods just delegate to originalService ...\n    public List<Event> getEvents() {\n       if(!permitted(originalService.getEvents)) {\n          throw AccessDeniedException()\n       }\n       return originalCalendarService.getEvents()\n    }\n};\n```", "```java\n//build.gradle\n// Required for JSR-250 based security:\n// JSR-250 Annotations\nimplementation 'jakarta.annotation:jakarta.annotation-api:2.1.1'\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/ SecurityConfig.java\n    @Configuration\n    @EnableWebSecurity\n    @EnableMethodSecurity(jsr250Enabled = true)\n    public class SecurityConfig {\n    ```", "```java\n    @RolesAllowed(\"ADMIN\")\n    List<Event> getEvents();\n    ```", "```java\n@RolesAllowed({\"ADMIN\", \"USER\"})\nList<Event> getEvents();\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n@Configuration\n@EnableWebSecurity\n@EnableMethodSecurity(jsr250Enabled = true)\npublic class SecurityConfig {}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n@Configuration\n@EnableWebSecurity\n@EnableMethodSecurity\npublic class SecurityConfig { }\n//Lastly, we can update our CalendarService interface as follows:\n@PreAuthorize(\"hasRole('ROLE_ADMIN') or principal.id == #userId\")\nList<Event> findForUser(int userId);\n```", "```java\n@PostAuthorize(\"hasRole('ROLE_ADMIN') or \" +\n       \"principal.id == returnObject.owner.id or \" +\n       \"principal.id == returnObject.attendee.id\")\nEvent getEvent(int eventId);\n```", "```java\n@PostAuthorize(\"hasRole('ROLE_ADMIN') or \" +\n       \"principal.id == returnObject.owner.id or \" +\n       \"principal.id == returnObject.attendee.id\")\nEvent getEvent(int eventId);\n```", "```java\n@PreFilter(\"principal.id == filterObject.owner.id\")\nvoid save(Set<Event> events);\n```"]