["```java\nGET /html/rfc7230 HTTP/1.1 \nHost: tools.ietf.org \nConnection: keep-alive \nPragma: no-cache \nCache-Control: no-cache \nUpgrade-Insecure-Requests: 1 \nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36 \nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 \nDNT: 1 \nReferer: https://en.wikipedia.org/ \nAccept-Encoding: gzip, deflate, sdch, br \nAccept-Language: en,hu;q=0.8,en-US;q=0.6,de;q=0.4,en-GB;q=0.2\n\n```", "```java\nHTTP/1.1 200 OK \nDate: Tue, 04 Oct 2016 13:06:51 GMT \nServer: Apache/2.2.22 (Debian) \nContent-Location: rfc7230.html \nVary: negotiate,Accept-Encoding \nTCN: choice \nLast-Modified: Sun, 02 Oct 2016 07:11:54 GMT \nETag: \"225d69b-418c0-53ddc8ad0a7b4;53e09bba89b1f\" \nAccept-Ranges: bytes \nCache-Control: max-age=604800 \nExpires: Tue, 11 Oct 2016 13:06:51 GMT \nContent-Encoding: gzip \nStrict-Transport-Security: max-age=3600 \nX-Frame-Options: SAMEORIGIN \nX-Xss-Protection: 1; mode=block \nX-Content-Type-Options: nosniff \nKeep-Alive: timeout=5, max=100 \nConnection: Keep-Alive \nTransfer-Encoding: chunked \nContent-Type: text/html; charset=UTF-8 \n\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \n  \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> \n<html  xml:lang=\"en\" lang=\"en\"> \n<head profile=\"http://dublincore.org/documents/2008/08/04/dc-html/\"> \n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /> \n    <meta name=\"robots\" content=\"index,follow\" />\n\n```", "```java\nGET /html/rfc7230 HTTP/1.1\n\n```", "```java\nHTTP/1.1 200 OK\n\n```", "```java\nContent-Type: text/html; charset=UTF-8\n\n```", "```java\napply plugin: 'java' \n apply plugin: 'jetty' \n\n repositories { \n     jcenter() \n } \n\n dependencies { \n     providedCompile \"javax.servlet:javax.servlet-api:3.1.0\" \n } \n\n jettyRun { \n     contextPath '/hello' \n }\n\n```", "```java\npackage packt.java9.by.example.mastermind.servlet; \n\n import javax.servlet.ServletException; \n import javax.servlet.http.HttpServlet; \n import javax.servlet.http.HttpServletRequest; \n import javax.servlet.http.HttpServletResponse; \n import java.io.IOException; \n import java.io.PrintWriter; \n\n public class HelloWorld extends HttpServlet { \n\n     private String message; \n\n     @Override \n     public void init() throws ServletException { \n         message = \"Hello, World\"; \n     } \n\n     @Override \n     public void doGet(HttpServletRequest request, \n                       HttpServletResponse response) \n             throws ServletException, IOException { \n         response.setContentType(\"text/html\"); \n         PrintWriter out = response.getWriter(); \n         out.println(\"<h1>\" + message + \"</h1>\"); \n     } \n\n     @Override \n     public void destroy() { \n     } \n }\n\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n<web-app version=\"2.5\" \n\n         xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\"> \n\n    <servlet> \n        <display-name>HelloWorldServlet</display-name> \n        <servlet-name>HelloWorldServlet</servlet-name> \n        <servlet-class>packt.java9.by.example.mastermind.servlet.HelloWorld</servlet-class> \n    </servlet> \n\n    <servlet-mapping> \n        <servlet-name>HelloWorldServlet</servlet-name> \n        <url-pattern>/</url-pattern> \n    </servlet-mapping> \n\n</web-app>\n\n```", "```java\n<%@ page language=\"java\" \n         contentType=\"text/html; charset=UTF-8\" \n         pageEncoding=\"UTF-8\"%> \n<html> \n<body> \n<% for( int i = 0 ; i < 5 ; i ++ ){ %> \n  hallo<br/> \n<% } %> \n</body> \n</html>\n\n```", "```java\n      out.write(\"\\n\"); \n      out.write(\"<html>\\n\"); \n      out.write(\"<body>\\n\"); \n for( int i = 0 ; i < 5 ; i ++ ){  \n      out.write(\"\\n\"); \n      out.write(\"  hallo<br/>\\n\"); \n }  \n      out.write(\"\\n\"); \n      out.write(\"</body>\\n\"); \n      out.write(\"</html>\\n\");\n\n```", "```java\n<%@ taglib prefix=\"c\" \n           uri=\"http://java.sun.com/jsp/jstl/core\" %>\n\n```", "```java\n<html> \n  <head> \n    <title>this is the title</title> \n  </head> \n</html>\n\n```", "```java\nhtml \n+ head \n  + title \n    + \"this is the title\"\n\n```", "```java\npublic Row addGuess(Guess guess, int full, int partial) { \n    assertNotFinished(); \n    final Row row = new Row(guess, full, partial); \n    table.addRow(row); \n    if (itWasAWinningGuess(full)) { \n        finished = true; \n    } \n    return row; \n}\n\n```", "```java\npackage packt.java9.by.example.mastermind.servlet; \n\nimport packt.java9.by.example.mastermind.Color; \nimport packt.java9.by.example.mastermind.Table; \n\nimport javax.inject.Inject; \nimport javax.inject.Named; \n\npublic class HtmlTools { \n    @Inject \n    Table table; \n\n    @Inject \n    @Named(\"nrColumns\") \n    private int NR_COLUMNS; \n\n    public String tag(String tagName, String... attributes) { \n        StringBuilder sb = new StringBuilder(); \n        sb.append(\"<\").append((tagName)); \n        for (int i = 0; i < attributes.length; i += 2) { \n            sb.append(\" \"). \n                    append(attributes[i]). \n                    append(\"=\\\"\"). \n                    append(attributes[i + 1]). \n                    append(\"\\\"\"); \n        } \n        sb.append(\">\"); \n        return sb.toString(); \n    } \n\n    public String inputBox(String name, String value) { \n        return tag(\"input\", \"type\", \"text\", \"name\", name, \"value\", value, \"size\", \"1\"); \n    } \n\n    public String colorToHtml(Color color, int row, int column) { \n        return tag(\"input\", \"type\", \"hidden\", \"name\", paramNameGuess(row, column), \n                \"value\", color.toString()) + \n                tag(\"div\", \"class\", \"color\" + color) + \n                tag(\"/div\") + \n                tag(\"div\", \"class\", \"spacer\") + \n                tag(\"/div\"); \n    } \n\n    public String paramNameFull(int row) { \n        return \"full\" + row; \n    } \n\n    public String paramNamePartial(int row) { \n        return \"partial\" + row; \n    } \n\n    public String paramNameGuess(int row, int column) { \n        return \"guess\" + row + column; \n    } \n\n    public String tableToHtml() { \n        StringBuilder sb = new StringBuilder(); \n        sb.append(\"<html><head>\"); \n        sb.append(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"colors.css\\\">\"); \n        sb.append(\"<title>Mastermind guessing</title>\"); \n        sb.append(\"<body>\"); \n        sb.append(tag(\"form\", \"method\", \"POST\", \"action\", \"master\")); \n\n        for (int row = 0; row < table.nrOfRows(); row++) { \n            for (int column = 0; column < NR_COLUMNS; column++) { \n                sb.append(colorToHtml(table.getColor(row, column), row, column)); \n            } \n\n            sb.append(inputBox(paramNameFull(row), \"\" + table.getFull(row))); \n            sb.append(inputBox(paramNamePartial(row), \"\" + table.getPartial(row))); \n            sb.append(\"<p>\"); \n        } \n        return sb.toString(); \n    } \n}\n\n```", "```java\n<html> \n    <head> \n        <link rel=\"stylesheet\" type=\"text/css\" href=\"colors.css\"> \n        <title>Mastermind guessing</title> \n        <body> \n            <form method=\"POST\" action=\"master\"> \n                <input type=\"hidden\" name=\"guess00\" value=\"3\"> \n                <div class=\"color3\"></div> \n                <div class=\"spacer\"></div> \n                <input type=\"hidden\" name=\"guess01\" value=\"2\"> \n                <div class=\"color2\"></div> \n                <div class=\"spacer\"></div> \n                <input type=\"hidden\" name=\"guess02\" value=\"1\"> \n                <div class=\"color1\"></div> \n                <div class=\"spacer\"></div> \n                <input type=\"hidden\" name=\"guess03\" value=\"0\"> \n                <div class=\"color0\"></div> \n                <div class=\"spacer\"></div> \n                <input type=\"text\" \n                       name=\"full0\" value=\"0\" size=\"1\"> \n                <input type=\"text\" \n                       name=\"partial0\" value=\"2\" size=\"1\"> \n                <p> \n                <input type=\"hidden\" name=\"guess10\" value=\"5\"> \n                <div class=\"color5\"></div> \n\n...deleted content that just looks almost the same... \n\n                <p> \n                <input type=\"submit\" value=\"submit\"> \n            </form> \n        </body> \n    </head> \n</html>\n\n```", "```java\n.color0 { \n    background: red; \n    width : 20px; \n    height: 20px; \n    float:left \n} \n.color1 { \n    background-color: green; \n    width : 20px; \n    height: 20px; \n    float:left \n} \n... .color2 to .color5 is deleted, content is the same except different colors ... \n\n.spacer { \n    background-color: white; \n    width : 10px; \n    height: 20px; \n    float:left \n}\n\n```", "```java\npackage packt.java9.by.example.mastermind.servlet; \n\nimport com.google.inject.Guice; \nimport com.google.inject.Injector; \nimport org.slf4j.Logger; \nimport org.slf4j.LoggerFactory; \n\nimport javax.servlet.ServletException; \nimport javax.servlet.http.HttpServlet; \nimport javax.servlet.http.HttpServletRequest; \nimport javax.servlet.http.HttpServletResponse; \nimport java.io.IOException; \n\npublic class Mastermind extends HttpServlet { \n    private static final Logger log = LoggerFactory.getLogger(Mastermind.class); \n\n    public void doGet(HttpServletRequest request, \n                      HttpServletResponse response) \n            throws ServletException, IOException { \n        doPost(request, response); \n    } \n\n    public void doPost(HttpServletRequest request, \n                       HttpServletResponse response) \n            throws ServletException, IOException { \n\n        Injector injector =  \n            Guice.createInjector(new MastermindModule()); \n        MastermindHandler handler =  \n            injector.getInstance(MastermindHandler.class); \n        handler.handle(request, response); \n    } \n}\n\n```", "```java\napply plugin: 'java' \napply plugin: 'jetty' \n\nrepositories { \n    jcenter() \n} \n\ndependencies { \n    providedCompile \"javax.servlet:javax.servlet-api:3.1.0\" \n    testCompile 'junit:junit:4.12' \n    compile 'org.slf4j:slf4j-api:1.7.7' \n    compile 'ch.qos.logback:logback-classic:1.0.11' \n    compile 'com.google.inject:guice:4.1.0' \n} \n\njettyRun { \n    contextPath '/hello' \n}\n\n```", "```java\nInjector injector = Guice.createInjector(new MastermindModule());\n\n```", "```java\npublic class MastermindModule extends AbstractModule { \n    @Override \n    protected void configure() { \n        bind(int.class) \n          .annotatedWith(Names.named(\"nrColors\")).toInstance(6); \n        bind(int.class) \n          .annotatedWith(Names.named(\"nrColumns\")).toInstance(4); \n        bind(ColorFactory.class).to(LetteredColorFactory.class); \n        bind(Guesser.class).to(UniqueGuesser.class); \n    } \n}\n\n```", "```java\n@Inject \n@Named(\"nrColors\") \nprivate int NR_COLORS; \n@Inject \n@Named(\"nrColumns\") \nprivate int NR_COLUMNS; \n@Inject \nprivate HtmlTools html; \n@Inject \nTable table; \n@Inject \nColorManager manager; \n@Inject \nGuesser guesser;\n\n```", "```java\npublic void handle(HttpServletRequest request, \n                   HttpServletResponse response) \n        throws ServletException, IOException { \n\n    Game game = buildGameFromRequest(request); \n    Guess newGuess = guesser.guess(); \n    response.setContentType(\"text/html\"); \n    PrintWriter out = response.getWriter(); \n    if (game.isFinished() || newGuess == Guess.none) { \n        displayGameOver(out); \n    } else { \n        log.debug(\"Adding new guess {} to the game\", newGuess); \n        game.addGuess(newGuess, 0, 0); \n        displayGame(out); \n    } \n    bodyEnd(out); \n}\n\n```", "```java\nprivate Game buildGameFromRequest(HttpServletRequest request) { \n    return buildGameFromMap(toMap(request)); \n} \nprivate Map<String, String> toMap(HttpServletRequest request) { \n    log.debug(\"converting request to map\"); \n    return request.getParameterMap().entrySet(). \n            stream().collect( \n                    Collectors.toMap( \n                            Map.Entry::getKey, \n                            e -> e.getValue()[0])); \n}\n\n```", "```java\nprivate Game buildGameFromMap(Map<String, String> params) { \n    final Guess secret = new Guess(new Color[NR_COLUMNS]); \n    final Game game = new Game(table, secret); \n    for (int row = 0; \n         params.containsKey(html.paramNameGuess(row, 0)); \n         row++) { \n        Color[] colors = getRowColors(params, row); \n        Guess guess = new Guess(colors); \n        final int full = Integer.parseInt(params.get(html.paramNameFull(row))); \n        final int partial = Integer.parseInt(params.get(html.paramNamePartial(row))); \n        log.debug(\"Adding guess to game\"); \n        game.addGuess(guess, full, partial); \n    } \n    return game; \n}\n\n```", "```java\n<html> \n<head> \n    <link rel=\"stylesheet\" type=\"text/css\" href=\"colors.css\"> \n    <title>Mastermind guessing</title> \n<body> \n<form method=\"POST\" action=\"master\"> \n    <div class=\"color3\"></div> \n    <div class=\"spacer\"></div> \n    <div class=\"color2\"></div> \n    <div class=\"spacer\"></div> \n    <div class=\"color1\"></div> \n    <div class=\"spacer\"></div> \n    <div class=\"color0\"></div> \n    <div class=\"spacer\"></div>0 \n    <div class=\"spacer\"></div>2<p> \n    <div class=\"color5\"></div> \n... \n    <div class=\"spacer\"></div> \n    <div class=\"color1\"></div> \n    <div class=\"spacer\"></div> \n    <input type=\"text\" name=\"full2\" value=\"0\" size=\"1\"><input type=\"text\" name=\"partial2\" value=\"0\" size=\"1\"> \n    <p> \n        <input type=\"submit\" value=\"submit\"> \n</form> \n</body> \n</head></html>\n\n```", "```java\npublic void handle(HttpServletRequest request, \n                   HttpServletResponse response) \n        throws ServletException, IOException { \n\n    Game game = buildGameFromSessionAndRequest(request); \n    Guess newGuess = guesser.guess(); \n    response.setContentType(\"text/html\"); \n    PrintWriter out = response.getWriter(); \n    if (game.isFinished() || newGuess == Guess.none) { \n        displayGameOver(out); \n    } else { \n        log.debug(\"Adding new guess {} to the game\", newGuess); \n        game.addGuess(newGuess, 0, 0); \n        sessionSaver.save(request.getSession()); \n        displayGame(out); \n    } \n    bodyEnd(out); \n}\n\n```", "```java\nprivate Game buildGameFromSessionAndRequest(HttpServletRequest request) { \n    Game game = buildGameFromMap(sessionSaver.restore(request.getSession())); \n    Map<String, String> params = toMap(request); \n    int row = getLastRowIndex(params); \n    log.debug(\"last row is {}\", row); \n    if (row >= 0) { \n        final int full = Integer.parseInt(params.get(html.paramNameFull(row))); \n        final int partial = Integer.parseInt(params.get(html.paramNamePartial(row))); \n        log.debug(\"setting full {} and partial {} for row {}\", full, partial, row); \n        table.setPartial(row, partial); \n        table.setFull(row, full); \n        if (full == table.nrOfColumns()) { \n            game.setFinished(); \n        } \n    } \n    return game; \n}\n\n```", "```java\npublic class GameSessionSaver { \n    private static final String STATE_NAME = \"GAME_STATE\"; \n    @Inject \n    private HtmlTools html; \n    @Inject \n    Table table; \n    @Inject \n    ColorManager manager; \n\n    public void save(HttpSession session) { \n        Map<String,String> params = convertTableToMap(); \n        session.setAttribute(STATE_NAME,params); \n    } \n\n    public void reset(HttpSession session) { \n        session.removeAttribute(STATE_NAME); \n    } \n\n    public Map<String,String> restore(HttpSession session){ \n        Map<String,String> map= \n                    (Map<String,String>) \n                            session.getAttribute(STATE_NAME); \n        if( map == null ){ map = new HashMap<>(); } \n        return map; \n    } \n\n    private Map<String,String> convertTableToMap() { \n        Map<String, String> params = new HashMap<>(); \n        for (int row = 0; row < table.nrOfRows(); row++) { \n            for (int column = 0; \n                 column < table.nrOfColumns(); column++) { \n                params.put(html.paramNameGuess(row,column), \n                           table.getColor(row,column).toString()); \n            } \n            params.put(html.paramNameFull(row), \n                           \"\"+table.getFull(row)); \n            params.put(html.paramNamePartial(row), \n                           \"\"+table.getPartial(row)); \n        } \n        return params; \n    } \n}\n\n```", "```java\npublic void doGet(HttpServletRequest request, \n                  HttpServletResponse response) \n        throws ServletException, IOException { \n    GameSessionSaver sessionSaver = new GameSessionSaver(); \n    sessionSaver.reset(request.getSession()); \n    doPost(request, response); \n}\n\n```", "```java\n    gradle jettyRun\n\n```", "```java\n    Running at http://localhost:8080//hello\n\n```", "```java\npackage packt.java9.by.example.mastermind; \n\nimport javax.inject.Inject; \nimport javax.inject.Named; \nimport javax.inject.Singleton; \nimport java.util.HashMap; \nimport java.util.Map; \nimport java.lang.System.Logger; \n\nimport static java.lang.System.Logger.Level.DEBUG; \n\n@Singleton \npublic class ColorManager { \n    protected final int nrColors; \n    protected final Map<Color, Color> successor = new HashMap<>(); \n    private Color first; \n    private final ColorFactory factory; \n    private static final Logger log = System.getLogger(ColorManager.class.getName()); \n\n    @Inject \n    public ColorManager(@Named(\"nrColors\") int nrColors, \n                                           ColorFactory factory) { \n        log.log(DEBUG,\"creating colorManager for {0} colors\", \n                                           nrColors);\n\n```", "```java\nprovides java.lang.System.LoggerFinder with \n                            packt.java9.by.example.MyLoggerFinder;\n\n```", "```java\nprivate static final Logger log = \n           LoggerFactory.getLogger(MastermindHandler.class);\n\n```", "```java\nlog.debug(\"Adding new guess {} to the game\", newGuess);\n\n```"]