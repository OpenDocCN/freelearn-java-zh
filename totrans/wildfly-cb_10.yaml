- en: Chapter 10. Hardening the WildFly Communication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Securing WildFly using HTTPS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing a specific application using HTTPS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing the WildFly console using HTTPS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing domain and host controllers' communication using HTTPS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to secure your WildFly systems from a communication
    channel point of view, which is the HTTPS protocol. If system security is a concern,
    you will need to provide such a capability. By the way, when securing your system
    at any layer, keep an eye on performance, because it may cause some overhead.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will learn how to provide security in a WildFly system at different stages,
    that is,:'
  prefs: []
  type: TYPE_NORMAL
- en: Securing your application communication access protocol
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing the WildFly management console
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing the communication between the domain controller and all the host controllers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While the last two points do not impact performance that much as they are administrative
    tools, the first one may impact your performance. By the way, in an enterprise
    environment, often times, your WildFly middleware platform is behind a reverse
    proxy (that is, Apache HTTPD), and into a **Demilitarized Zone** (**DMZ**). For
    this reason, you should eventually secure the reverse proxy and not the traffic
    between Apache and WildFly, which will just cause CPU overhead. Avoid HTTPS between
    Apache and WildFly when your network infrastructure already provides security
    within a DMZ.
  prefs: []
  type: TYPE_NORMAL
- en: Okay, now that I'm in peace with my conscience, let's start!
  prefs: []
  type: TYPE_NORMAL
- en: Securing WildFly using HTTPS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to use a secure channel to provide your applications
    with services, which is by using the HTTPS protocol. If privacy is a concern for
    you, this recipe will show how you can protect your data traffic. By the way,
    securing your applications needs different considerations and aspects, which should
    be addressed and resolved by developers and operations team.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started, let''s first create an `ad-hoc` folder to run our WildFly.
    In a terminal window execute the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now it's time to create our keystore which is used to encrypt the data traffic.
    We will be using one password to open the keystore file itself, and one password
    to load the alias.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a new terminal window and give the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Okay, now we have created the keystore to encrypt HTTP messages. Let''s check
    its integrity by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Okay, everything is fine!!!
  prefs: []
  type: TYPE_NORMAL
- en: We are now ready to configure WildFly to expose itself and our applications
    via HTTPS.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are now going to make a few changes to the WildFly configuration files in
    order to achieve our goal. We will see both the operational modes: standalone
    and domain.'
  prefs: []
  type: TYPE_NORMAL
- en: Standalone
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First of all, start a WildFly instance as usual:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within a different terminal window, connect to the WildFly CLI and run the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Okay, we are done with the configuration.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Let's test everything by opening a browser and pointing it to `https://localhost:8443/`:![Standalone](img/3744_10_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Browser warning the user about a self-signed certificate, thus untrusted
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: First the browser will warn you about a security issue; just hit the **Add exception**
    button, and then, in the next pop-up, hit the **Confirm security exception** button.
    Once you confirm, the browser displays our WildFy instance running on HTTPS, as
    follows:![Standalone](img/3744_10_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Browser showing WildFly via HTTPS
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Domain
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First of all, create an `ad-hoc` folder to operate in the domain mode:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'From the *Getting ready* section of this recipe, see how you can create a keystore,
    or copy it from the `sec-std-node-1` folder (if you followed the *Standalone*
    section steps), as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now start WildFly in the domain mode as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, within a different terminal window, connect to the WildFly CLI and execute
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As we know that the WildFly default domain configuration provides two server-groups,
    one bound to the `full` profile and one bound to the `full-ha` profile (this one
    without an active server), we can enable the HTTPS protocol for the `full` profile.
    Within the same CLI console, run the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Keep in mind that acting on the profile, once the configuration has been reloaded,
    will spread the changes to all servers belonging to the server-group referencing
    the `full` profile.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Okay, we are done with the configuration.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Let's test everything by opening a browser and pointing it to `https://localhost:8443/`:![Domain](img/3744_10_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Browser warning the user about a self-signed certificate, thus untrusted
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: First the browser will warn you about a security issue; just hit the **Add exception**
    button, and then, in the next pop-up, hit the **Confirm security exception** button.
    Once you confirm, the browser displays our WildFy instance running on HTTPS, as
    follows:![Domain](img/3744_10_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Browser showing WildFly via HTTPS
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On the WildFly side, we declared a new realm in the `management` section, calling
    it `SSLRealm`.
  prefs: []
  type: TYPE_NORMAL
- en: Within the new realm, we declared the keystore, which contains the certificates
    to be used by the HTTPS protocol to encrypt the data.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, for both the operational modes, we added the `https-listener` to the
    `Undertow` subsystem, referencing the newly created realm and the `https` socket-binding.
  prefs: []
  type: TYPE_NORMAL
- en: That is all that is needed by WildFly to serve your application via a secure
    channel, that is, via HTTPS.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you have noticed from the configuration files `standalone.xml` and `domain.xml`,
    we left the `http-listener`. As a matter of fact, our applications are also available
    via HTTP, which is clear, so both the following URLs would provide our WildFly
    welcome page and our applications, if any:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost:8080`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`https://localhost:8443`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you are seeing a page like the following, it is because you entered the
    hostname and the port correctly (that is, `localhost` and `8443`), but you used
    the HTTP schema, instead of the HTTPS schema:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more…](img/3744_10_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Browser trying to show the encrypted data within US-ASCII encoding
  prefs: []
  type: TYPE_NORMAL
- en: Nevertheless, if you want to provide just the secure channel, remove the `http-listener`
    declaration from the configuration, and you will be secured.
  prefs: []
  type: TYPE_NORMAL
- en: Bear in mind that disabling the `http-listener` needs a little attention, because
    it is referenced by other subsystems such as `ejb3` and `webservices` (both related
    to the `http-remoting-connector`, which is bound to the `http-listener`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Doing so, your application will not be reachable via HTTP, as seen in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more…](img/3744_10_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Browser cannot reach the application via HTTP
  prefs: []
  type: TYPE_NORMAL
- en: See also…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For a deeper understanding of the keytool command, please refer to the Oracle
    official documentation at [https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html](https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing a specific application using HTTPS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to use a secure channel for a specific application.
    This is related to how your application is reached, and not to how to secure your
    data model, functionality, and all the features that an application comes with.
    Securing applications needs different considerations and aspects, which should
    be addressed and resolved mostly on the dev-side.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started, let''s first create an `ad-hoc` folder to run our WildFly.
    In a terminal window execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now it''s time to create our keystore, which is used to encrypt data traffic
    for our specific application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a new terminal window and run the following codes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Okay, now we have created the keystore to encrypt HTTP messages. Let''s check
    its integrity by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Okay, everything is fine!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We are now ready to configure WildFly to expose our specific application via
    HTTPS.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To test the HTTPS configuration, we will need two applications named `ssl-example`
    and `no-ssl-example`, which you can find in my GitHub repository. If you skipped
    the *Managing applications using the deployments folder* recipe in [Chapter 2](ch02.html
    "Chapter 2. Running WildFly in Standalone Mode"), *Running WildFly in Standalone
    Mode*, please refer to it to download all source code and projects that you will
    need.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To build the application, execute the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Once done, copy the artifacts `no-ssl-example.war` and `ssl-example.war` (under
    their relative `target` folder) into your local `$WILDFLY_HOME` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are now going to make a few changes to the WildFly configuration files in
    order to achieve our goal. We will see both the operational modes: standalone
    and domain.'
  prefs: []
  type: TYPE_NORMAL
- en: Standalone
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First of all, start a WildFly instance as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Within a different terminal window, connect to the WildFly CLI and execute
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Okay, we are done with the configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Testing
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We now need to deploy our applications using the CLI, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To test the configuration, open your browser and point it to `http://localhost:8080/no-ssl-example`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should get a page similar to the following:![Testing](img/3744_10_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, point the browser to `https://localhost:8443/ssl-example`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the security warning, you should get a page similar to the following:![Testing](img/3744_10_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now if you try to mix the schema and port along with the context application,
    you will see that the `ssl-example` application is only reachable via HTTPS, and
    that the `no-ssl-example` is only reachable via HTTP.
  prefs: []
  type: TYPE_NORMAL
- en: Domain
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First of all, create an `ad-hoc` folder to operate in the domain mode:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'From the *Getting ready* section of this recipe, see how you can create a keystore,
    or copy it from the `sec-std-node-2` folder (if you followed the *Standalone*
    section steps), as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now start WildFly in the domain mode, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, within a different terminal window, connect to the WildFly CLI and execute
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As we know that the WildFly default domain configuration provides two server-groups,
    one bound to the `full` profile and one bound to the `full-ha` profile (this one
    without an active server), we can enable the HTTPS protocol for the `full` profile.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Within the same CLI console, execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Keep in mind that acting on the profile, once the configuration has been reloaded,
    will spread the changes to all servers belonging to the server-group referencing
    the `full` profile.
  prefs: []
  type: TYPE_NORMAL
- en: Okay, we are done with the configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Testing
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We now need to deploy our applications using the CLI, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'To test the configuration, open your browser and point it to the following
    URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost:8080/no-ssl-example`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`https://localhost:8443/ssl-example`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You should follow the same steps as described for the standalone mode, along
    with the same final pages.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On the WildFly side, using the CLI, we created a new realm in the `management`
    section, calling it `AppSSLRealm`. Within the new realm, we declared the keystore,
    which contains the certificates to be used by the HTTPS protocol to encrypt the
    data.
  prefs: []
  type: TYPE_NORMAL
- en: Working on the `Undertow` subsystem, we added a server named `secure-server`.
    We then added `https-listener` to it, binding the listener to the `https` socket
    binding configuration and to the `AppSSLRealm` security realm.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we defined a host named `secure-host`, and made it the default host
    for our `secure-server`.
  prefs: []
  type: TYPE_NORMAL
- en: Wait a minute! How did we match the `ssl-example.war` application to the `secure-host`
    configuration declared in the `Undertow` subsystem?
  prefs: []
  type: TYPE_NORMAL
- en: 'Matching happens at the application level. Within the `jboss-web.xml` in the
    `WEB-INF` folder of our application, you need to declare the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The preceding XML code instructs WildFly that the application needs to be bound
    to the server named `secure-server`, along with the host named `secure-host`.
  prefs: []
  type: TYPE_NORMAL
- en: This way WildFly (actually Undertow) will serve your application using that
    specific host.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s view both the configurations together to better understand the matches:'
  prefs: []
  type: TYPE_NORMAL
- en: '| WildFly – Undertow | Application |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: In the `server` declaration, there is also an attribute named `default-host`
    set to `secure-host`, but it is just used to indicate which host to use if there
    is more than one.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you try to mix our configuration via the browser, you will notice that the
    `ssl-example` application will not be found using the `http-listener` configuration.
    The same holds true for the `example` application using the `https-listener` configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you try to open your browser and point it to `http://localhost:8080/ssl-example,`
    you should land on a **404 – Not Found** page as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more…](img/3744_10_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The same applies if you visit `https://localhost:8443/no-ssl-example`.
  prefs: []
  type: TYPE_NORMAL
- en: See also…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For a deeper understanding of the `keytool` command, please refer to the Oracle
    official documentation at [https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html](https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing the WildFly console using HTTPS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to secure your WildFly management console
    at the communication protocol level. To achieve such a configuration, we will
    need to create a certificate which will be used to encrypt all the traffic.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started, let''s first create an `ad-hoc` folder to run our WildFly.
    In a terminal window run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Now it's time to create our keystore which is used to encrypt data traffic.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a new terminal window and execute the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Okay, now we have created the keystore to encrypt HTTP messages. Let''s check
    its integrity by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Okay, everything is fine!
  prefs: []
  type: TYPE_NORMAL
- en: We are now ready to configure WildFly to expose its management console via HTTPS.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are now going to make a few changes to the WildFly configuration files in
    order to achieve our goal. We will see both the operational modes: standalone
    and domain.'
  prefs: []
  type: TYPE_NORMAL
- en: Standalone
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: First of all, as we will create and use a new management realm (named `SecureManagementRealm`),
    we need to add a new management user (named `securewildfly`) to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a new terminal window and execute the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Be sure to clear the OS history commands after running the preceding command,
    because the password will be displayed as well. To clear the history, invoke a
    `history -c` command in the same terminal.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now we can proceed with the effective configuration. Start WildFly as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, within a different terminal window, connect to the WildFly CLI and run
    the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Okay, we are done with the configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Testing
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Open your browser and point it at `https://localhost:9993`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing](img/3744_10_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Browser warning the user about an untrusted certificate
  prefs: []
  type: TYPE_NORMAL
- en: First, the browser will warn you about a security issue; just hit the **Add
    exception** button, and then, in the next pop-up, hit the **Confirm security exception**
    button.
  prefs: []
  type: TYPE_NORMAL
- en: The browser will then prompt you to enter the credentials to access the WildFly
    management console for the `SecureManagementRealm`; just input `securewildfly`
    as the username and `cookbook.2015` as the password.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should now be inside the Web Console, as depicted in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing](img/3744_10_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: WildFly's management console via HTTPS
  prefs: []
  type: TYPE_NORMAL
- en: Great, we are done!
  prefs: []
  type: TYPE_NORMAL
- en: By the way, securing the console via HTTPS might be okay by itself, but still,
    people with credentials can log into it, and mess around with it. To better secure
    your management console, you should concentrate on a **Role Based Access Control**
    (**RBAC**) feature, available in WildFly and discussed later in this book, which
    gives you finer control over who can do what.
  prefs: []
  type: TYPE_NORMAL
- en: Domain
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First of all, create an `ad-hoc` folder to operate in the domain mode:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'From the *Getting ready* section of this recipe, see how you can create a keystore,
    or copy it from the `sec-std-node-mgmt` folder (if you followed the *Standalone*
    section steps), as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, as we will create and use a new management realm (named `SecureManagementRealm`),
    we need to add a new management user (named `securewildfly`) to it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open a new terminal window and execute the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Be sure to clear the OS history commands after running the preceding command,
    because the password will be displayed as well. To clear the history, invoke a
    `history -c` command in the same terminal.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now start WildFly in the domain mode as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, within a different terminal window, connect to the WildFly CLI and run
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We are kicked out from the console because it is not reachable on port `9990`
    any more, but on port `9993` (by default) instead.
  prefs: []
  type: TYPE_NORMAL
- en: Testing
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'On opening a browser and pointing it to the `https://localhost:9993` URL, you
    will see the same as is described in the standalone mode: a security warning complaining
    about a self-signed certificate, the login pop up and finally the WildFly Admin
    Console.'
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we defined the security realm via CLI and added it to the host, in this
    case, `master`. Within the new realm, we declared the keystore to be used by the
    HTTPS protocol to encrypt the data.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we referenced the newly created `SecureManagementRealm` into the `http-interface`
    section of the `management-interface`. For this, we also had to specify the `secure-port`,
    otherwise we would have bound the whole management interface to the default port
    `9990`, which would have led us to a `ssl_error_rx_record_too_long` browser error.
  prefs: []
  type: TYPE_NORMAL
- en: That is all that is needed by WildFly to provide its management console via
    HTTPS.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Within this recipe, we have created and used a new realm to secure the management
    console. Nonetheless, we could have used the default `ManagementRealm`, which
    was fine.
  prefs: []
  type: TYPE_NORMAL
- en: Using a different realm would free us to switch realms as needed. But more importantly,
    when you create a user using the `add-user.sh` script, the password being generated
    contains the string's username, the realm name, and the password, all of which
    are then hashed using MD5 and then decoded in hexadecimal value.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, within the `*-user.properties` files of your configuration, when you see
    `username=SOMETHING`, you should read it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For a deeper understanding of the `keytool` command, please refer to the Oracle
    official documentation at [https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html](https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing domain and host controller communication using HTTPS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to secure the communication between the domain
    controller and the host controller. To achieve this, we need to create a keystore
    and certificate, one for each controller, including the domain.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started, let''s first create the `ad-hoc` folders to run our WildFly
    instances: one master and two hosts. In a terminal window execute the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'We also better prepare our configuration folders to have the proper configuration
    files, using the preinstalled ones as templates and executing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Now we can proceed towards creating the certificates.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will first create the keystores for each server; we will then extract the
    certificates out of them, and lastly, we will import the host's certificates into
    the domain controller keystore and the domain certificate into the host's keystores.
    It will become clear soon.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a new terminal window and run the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we need to export the certificate out of each keystore, and store it in
    a file. Within the same terminal of the previous `keytool` commands, execute the
    following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now if you look inside the `$WILDFLY_HOME` folder, you should see the following
    files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`sec-dmn-master.cer`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sec-dmn-master.jks`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sec-dmn-node-1.cer`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sec-dmn-node-1.jks`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sec-dmn-node-2.cer`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sec-dmn-node-2.jks`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now we need to import the host''s certificates into the `domain` keystore,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once done, let''s do the same for the other host:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now it''s time for the hosts to import the `domain` certificate, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once done, let''s do the same for the other host:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Okay, we are done. Let''s copy each keystore to its `ad-hoc` configuration
    folder, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now we need to make some adjustments to the default domain configuration. Open
    the `sec-dmn-master/configuration/domain.xml` file and set the `default` profile
    to all `server-groups` declared in the file. Also set the `socket-binding-group`
    reference to `standard-sockets`, again to all the declared server-groups—we are
    doing this just to avoid complex configuration due to the `full` and `full-ha`
    profiles, which involve messaging and clustering.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, open `sec-dmn-node-1/configuration/host.xml` and change the host name
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also make sure to properly set the port-offset attribute for each configured
    server (default configuration provides two servers named `server-one` and `server-two`),
    as per the following example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s do the same for the other host. Open `sec-dmn-node-2/configuration/host.xml`
    and change the host name as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here too, make sure to properly set the port-offset attribute for each configured
    server, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We are not done yet. We need to configure our keystores, and we will use the
    CLI, so all our servers must be up and running.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s start them up by executing each of the following commands in a separate
    terminal window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At this point, we need to declare our keystore into the WildFly configuration
    files. Again, in a separate terminal window, connect to the CLI as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For the moment, just don't mind about the errors; we need one more step.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Stop the domain controller along with the host controllers and start them as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now the domain controller is communicating with the host controllers using HTTPS.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's try to explain in words what we needed and we what have done so far.
  prefs: []
  type: TYPE_NORMAL
- en: We needed to encrypt the traffic between the domain controller and the host
    controllers. To achieve this, we need a certificate. Thus, because communication
    between the domain and host controllers requires authentication, we also needed
    to create a kind of trusted communication between them. All this mechanism can
    be achieved using Java keystores.
  prefs: []
  type: TYPE_NORMAL
- en: 'We first create the keystore for the domain and the host controllers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'We then extract a certificate out of each keystore, and store it in a `cer`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'As we need the domain controller to remotely connect to the host controllers
    and vice versa, we needed to create a link within the keystore, thus importing
    the host controllers'' certificates into the domain controller keystore:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'This way, the `sec-dmn-master.jks` keystore file would work as a truststore
    too, having the host controllers'' certificates in it. As a matter of fact, on
    checking the `sec-dmn-master.jks` keystore, we should find three entries in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'The same mechanism applies to the host controllers, having them only import
    the domain controller''s certificate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'For brevity, I will not show you the check list for those two keystores; by
    the way you can issue the commands as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: They should both contain two entries.
  prefs: []
  type: TYPE_NORMAL
- en: After all this preparation, we had to start all servers in order to update our
    configuration. This is because in the domain mode we can only see the running
    hosts, not the declared ones. We then ran the CLI and executed a bunch of commands
    in the batch mode.
  prefs: []
  type: TYPE_NORMAL
- en: After the `run-batch` command, which essentially runs each command and commits,
    we run the `reload` command against the `host=master`, that is the domain controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the domain controller starts, it pushes its configuration to all the connected
    host controllers, but in this case, our host controllers got disconnected because
    of the following errors showing up in the `server.log`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following error is for `sec-dmn-master`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following error is for `sec-dmn-node-1`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following error is for `sec-dmn-node-2`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The domain controller enabled the SSL communication, and the host controllers
    are not passing their own certificate because the default JVM `cacert` truststore
    file is passed instead. That's why we had to stop everything.
  prefs: []
  type: TYPE_NORMAL
- en: When restarting the domain and host controllers, we had to add the `-Djavax.net.ssl.trustStore`
    property (specifying the proper keystore for the starting controller) so that
    the SSL Handshake phase would succeed, because at this time each controller would
    have passed its relative keystore.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow the commands to start the domain and host controllers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: See also…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For a deeper understanding of the `keytool` command, please refer to the Oracle
    official documentation at [https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html](https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more details on the `SSL` protocol, start looking at [http://en.wikipedia.org/wiki/Transport_Layer_Security](http://en.wikipedia.org/wiki/Transport_Layer_Security).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
