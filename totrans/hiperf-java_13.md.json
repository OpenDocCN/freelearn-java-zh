["```java\n    <dependency>\n        <groupId>org.openjdk.jmh</groupId>\n        <artifactId>jmh-core</artifactId>\n        <version>1.32</version>\n        <scope>test</scope>\n    </dependency>\n    <dependency>\n        <groupId>org.openjdk.jmh</groupId>\n        <artifactId>jmh-generator-annprocess</artifactId>\n        <version>1.32</version>\n        <scope>test</scope>\n    </dependency>\n    ```", "```java\npackage org.example;\nimport org.openjdk.jmh.annotations.Benchmark;\nimport org.openjdk.jmh.annotations.Setup;\nimport org.openjdk.jmh.annotations.State;\nimport org.openjdk.jmh.annotations.Scope;\nimport org.openjdk.jmh.runner.Runner;\nimport org.openjdk.jmh.runner.options.Options;\nimport org.openjdk.jmh.runner.options.OptionsBuilder;\n@State(Scope.Thread)\npublic class Ch13StringBenchmark {\n    private String sampleString;\n    @Setup\n    public void prepare() {\n        sampleString = \"The quick brown fox jumps over the lazy dog\";\n    }\n    @Benchmark\n    public String reverseWithStringBuilder() {\n        return new StringBuilder(sampleString).reverse().toString();\n    }\n    @Benchmark\n    public String reverseManually() {\n        char[] strArray = sampleString.toCharArray();\n        int left = 0;\n        int right = strArray.length - 1;\n        while (left < right) {\n            char temp = strArray[left];\n            strArray[left] = strArray[right];\n            strArray[right] = temp;\n            left++;\n            right--;\n        }\n        return new String(strArray);\n    }\n    public static void main(String[] args) throws Exception {\n        Options opt = new OptionsBuilder()\n                .include(Ch13StringBenchmark.class.getSimpleName())\n                .forks(1)\n                .build();\n        new Runner(opt).run();\n    }\n}\n```", "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.string.StringDecoder;\nimport io.netty.handler.codec.string.StringEncoder;\npublic class Ch13EchoServer {\n  public static void main(String[] args) throws InterruptedException {\n    EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n    EventLoopGroup workerGroup = new NioEventLoopGroup();\n    try {\n      ServerBootstrap b = new ServerBootstrap();\n      b.group(bossGroup, workerGroup)\n       .channel(NioServerSocketChannel.class)\n       .childHandler(new ChannelInitializer<SocketChannel>() {\n        @Override\n        protected void initChannel(SocketChannel ch) throws Exception {\n          ChannelPipeline p = ch.pipeline();\n          p.addLast(new StringDecoder(), new StringEncoder(), new \n          Ch13EchoServerHandler());\n        }\n      });\n      ChannelFuture f = b.bind(8080).sync();\n      f.channel().closeFuture().sync();\n    } finally {\n        workerGroup.shutdownGracefully();\n        bossGroup.shutdownGracefully();\n    }\n  }\n  static class Ch13EchoServerHandler extends \n  ChannelInboundHandlerAdapter {\n    @Override\n    public void channelRead(ChannelHandlerContext ctx, Object msg) {\n      ctx.write(msg);\n      ctx.flush();\n    }\n  }\n}\n```", "```java\nServer started on port 8080.\nClient connected from IP: 192.168.1.5\nReceived from client: Hello Server!\nEchoed back: Hello Server!\nReceived from client: This is a test message.\nEchoed back: This is a test message.\nReceived from client: Netty is awesome!\nEchoed back: Netty is awesome!\nClient disconnected: IP 192.168.1.5\nServer shutting down...\n```", "```java\n{\n    \"name\": \"Neo Anderson\",\n    \"age\": 24,\n    \"email\": \"neo.anderson@matrix.com\",\n    \"hobbies\": [\"coding\", \"hacking\", \"sleeping\"]\n}\n```", "```java\n<dependencies>\n    <dependency>\n        <groupId>com.fasterxml.jackson.core</groupId>\n        <artifactId>jackson-core</artifactId>\n        <version>2.12.3</version>\n    </dependency>\n    <dependency>\n        <groupId>com.fasterxml.jackson.core</groupId>\n        <artifactId>jackson-databind</artifactId>\n        <version>2.12.3</version>\n    </dependency>\n</dependencies>\n```", "```java\nimport com.fasterxml.jackson.databind.ObjectMapper;\n  public class Ch13JacksonExample {\n    public static void main(String[] args) throws Exception {\n      ObjectMapper mapper = new ObjectMapper();\n      // Example of a Plan Old Java Object (POJO)\n      class User {\n        public String name;\n        public int age;\n        // Constructors, getters, and setters have been omitted for \n        // brevity\n      }\n    // Serialize Java object to JSON\n    User user = new User();\n    user.name = \"Neo Anderson\";\n    user.age = 24;\n    String jsonOutput = mapper.writeValueAsString(user);\n    System.out.println(\"Serialized JSON: \" + jsonOutput);\n    // Deserialize JSON to Java object\n    String jsonInput = \"{\\\"name\\\":\\\"Neo Anderson\\\",\\\"age\\\":24}\";\n    User userDeserialized = mapper.readValue(jsonInput, User.class);\n    System.out.println(\"Deserialized user: \" + userDeserialized.name);\n  }\n}\n```", "```java\nimport org.agrona.concurrent.ManyToOneConcurrentArrayQueue;\npublic class Ch13AgronaExample {\n  public static void main(String[] args) {\n    // Create a queue with a capacity of 10 items\n    ManyToOneConcurrentArrayQueue<String> queue = new \n    ManyToOneConcurrentArrayQueue<>(10);\n    // Producer thread that offers elements to the queue\n    Thread producer = new Thread(() -> {\n      for (int i = 1; i <= 5; i++) {\n        String element = \"Element \" + i;\n        while (!queue.offer(element)) {\n          // Retry until the element is successfully added\n          System.out.println(\"Queue full, retrying to add: \" + \n          element);\n          try {\n            Thread.sleep(10); // Sleep to simulate backoff\n          } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n          }\n        }\n        System.out.println(\"Produced: \" + element);\n      }\n    });\n    // Consumer thread that polls elements from the queue\n    Thread consumer = new Thread(() -> {\n      for (int i = 1; i <= 5; i++) {\n        String element;\n        while ((element = queue.poll()) == null) {\n          // Wait until an element is available\n          System.out.println(\"Queue empty, waiting for elements...\");\n          try {\n            Thread.sleep(10); // Sleep to simulate processing delay\n          } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n          }\n        }\n        System.out.println(\"Consumed: \" + element);\n      }\n    });\n    // Start both threads\n    producer.start();\n    consumer.start();\n    // Wait for both threads to finish execution\n    try {\n      producer.join();\n      consumer.join();\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n  }\n}\n```", "```java\nimport org.eclipse.collections.api.factory.Lists;\nimport org.eclipse.collections.api.list.ImmutableList;\npublic class Ch13EclipseCollectionsExample {\n    public static void main(String[] args) {\n        // Creating an immutable list using Eclipse Collections\n        ImmutableList<String> immutableList = Lists.immutable.\n        of(\"Apple\", \"Pear\", \"Cherry\", \"Lime\");\n        // Displaying the original list\n        System.out.println(\"Original immutable list: \" + \n        immutableList);\n        // Adding an item to the list, which returns a new immutable \n        // list\n        ImmutableList<String> extendedList = immutableList.\n        newWith(\"Orange\");\n        // Displaying the new list\n        System.out.println(\"Extended immutable list: \" + \n        extendedList);\n        // Iterating over the list to print each element\n        extendedList.forEach(System.out::println);\n    }\n}\n```", "```java\n<dependency>\n    <groupId>org.eclipse.collections</groupId>\n    <artifactId>eclipse-collections-api</artifactId>\n    <version>11.0.0</version>\n</dependency>\n<dependency>\n    <groupId>org.eclipse.collections</groupId>\n    <artifactId>eclipse-collections</artifactId>\n    <version>11.0.0</version>\n</dependency>\n```", "```java\nimport com.google.common.cache.CacheBuilder;\nimport com.google.common.cache.CacheLoader;\nimport com.google.common.cache.LoadingCache;\nimport java.util.concurrent.TimeUnit;\npublic class Ch13GuavaExample {\n  public static void main(String[] args) throws Exception {\n    LoadingCache<String, String> cache = CacheBuilder.newBuilder()\n      .maximumSize(100)\n      .expireAfterWrite(10, TimeUnit.MINUTES)\n      .build(\n        new CacheLoader<String, String>() {\n          public String load(String key) {\n            return \"Value for \" + key;\n          }\n        }\n      );\n    System.out.println(cache.get(\"key1\"));\n    System.out.println(cache.get(\"key2\"));\n    System.out.println(cache.get(\"key3\"));\n  }\n}\n```"]