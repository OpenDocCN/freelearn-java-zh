["```java\n@Controller\npublic class HelloWorldController {\n\n  @RequestMapping(\"/api/greeting/string\")\n  @ResponseBody\n  public String string() {\n    return \"Greeting\";\n  }\n}\n```", "```java\nGET /api/greeting HTTP/1.1\nContent-Length: 8\nContent-Type: text/plain;charset=UTF-8\nGreeting\n```", "```java\n@Controller\npublic class HelloWorldController {\n\n  @RequestMapping(\"/api/greeting/fakeJson\")\n  @ResponseBody\n  public String fakeJson() {\n    return \"{\\\"message\\\":\\\"Hello world\\\"}\";\n  }\n}\n```", "```java\nGET /api/greeting HTTP/1.1\nContent-Length: 25\nContent-Type: text/plain;charset=UTF-8\n{\"message\":\"Hello world\"}\n```", "```java\n@Controller\npublic class HelloWorldController {\n\n  @RequestMapping(path = \"/api/greeting/manualJson\",\n                  produces = \"application/json\")\n  @ResponseBody\n  public String manualJson() {\n    return \"{\\\"message\\\":\\\"Hello world\\\"}\";\n  }\n}\n```", "```java\nGET /api/greeting HTTP/1.1\nContent-Length: 25\nContent-Type: application/json;charset=UTF-8\n{\"message\":\"Hello world\"}\n```", "```java\n@Controller\npublic class HelloWorldController {\n\n  /** Produce JSON from a map as return value. Can also be nested.\n*/\n  @RequestMapping(\"/api/greeting/mapJson\")\n  @ResponseBody\n  public Map<String, Object> mapJson() {\n    Map<String, Object> result = new HashMap<>();\n    result.put(\"message\", \"Hello from map\");\n    return result;\n  }\n\n  /** The data wrapper that maps to JSON */\n  @Data\n  @AllArgsConstructor\n  static class Message {\n    private String message;\n  }\n\n  /** Produce JSON from an object as return value. */\n  @RequestMapping(\"/api/greeting/objectJson\")\n  @ResponseBody\n  public Message objectJson() {\n    return new Message(\"Hello from object\");\n  }\n}\n```", "```java\nZonedDateTime now = ZonedDateTime.now();\nString date = now.format(DateTimeFormatter.ISO_LOCAL_DATE);\nString time = now.format(DateTimeFormatter.ISO_LOCAL_TIME);\n```", "```java\n@RestController\n@RequestMapping(path = \"/api/greeting\")\npublic class ContentTypeController {\n\n  @Data\n  @AllArgsConstructor\n  private static class SimpleMessage {\n    private String message;\n  }\n\n  /** GET a greeting as text/plain content-type */\n  @GetMapping(produces = MediaType.TEXT_PLAIN_VALUE)\n  public String greetText() {\n    return \"Hello with plain text\";\n  }\n\n  /** GET a greeting as application/json content-type */\n  @GetMapping(produces = MediaType.APPLICATION_JSON_VALUE)\n  public SimpleMessage greetJson() {\n    return new SimpleMessage(\"Hello with JSON\");\n  }\n}\n```", "```java\nGET /api/greeting HTTP/1.1\nAccept: text/plain\n\nContent-Type: text/plain;charset=UTF-8\n\nHello with plain text\n\nGET /api/greeting HTTP/1.1\nAccept: application/json\n\nContent-Type: application/json;charset=UTF-8\n\n{\"message\":\"Hello with JSON\"}\n```", "```java\n@GetMapping(produces = MediaType.APPLICATION_XML_VALUE)\npublic SimpleMessage greetXml() {\n  return new SimpleMessage(\"Hello with XML\");\n}\n```", "```java\n<dependency>\n     <groupId>com.fasterxml.jackson.dataformat</groupId>\n     <artifactId>jackson-dataformat-xml</artifactId>\n</dependency>\n```", "```java\n<SimpleMessage>\n    <message>Hello with XML</message>\n</SimpleMessage>\n```", "```java\n@RestController\n@RequestMapping(path = \"/api/greeting\")\npublic class ContentTypeController {\n  @Data\n  // […]\n@RequestBody SpecificMessage input) {\n    return new SpecificMessage(input.addressee,\n            \"Re: \" + input.message);\n  }\n}\n```", "```java\nPOST /api/greeting HTTP/1.1\nContent-Type: application/x-www-form-urlencoded\n\naddressee=Peter\n\n{\"addressee\":\"Peter\",\"message\":\"Hello Peter\"}\n\nPOST /api/greeting HTTP/1.1\nContent-Type: application/json\n\n{\n    \"addressee\": \"Paul\",\n    \"message\": \"Answer me\"\n}\n\n{\"addressee\":\"Paul\",\"message\":\"Re: Answer me\"}\n```", "```java\n@RestController\n@RequestMapping(path = \"/api/motd\")\npublic class MotdController {\n  @PutMapping\n  @ResponseStatus(HttpStatus.NO_CONTENT)\n  public void storeMotd(@RequestBody Message message) {\n     // set the message of the day\n     // …\n  }\n}\n```", "```java\n@RestController\n@RequestMapping(\"/api/mottos\")\npublic class MottoController {\n\n// […]\n      motto.add(message);\n      return ResponseEntity.ok()\n              .body(new Message(\"Accepted #\" + motto.size()));\n    }\n  }\n}\n```", "```java\n@RestController\npublic class JavaScriptController {\n  @Value\n  private static class Message {\n    private String message;\n  }\n\n   // […]\n    Object eval = javaScript.eval(expression);\n    return new Message(\"Evaluation of \" + expression +\n          \" yields \" + eval);\n  }\n}\n```", "```java\n@RestController\npublic class JavaScriptController {\n  // handle the explicitly thrown runtime exception\n  @ExceptionHandler(IllegalArgumentException.class)\n  @ResponseStatus(HttpStatus.BAD_REQUEST)\n  public String handleArgument(IllegalArgumentException e) {\n    return e.getMessage();\n  }\n\n  // handle the parser's exceptions\n  @ExceptionHandler({ParserException.class, ScriptException.\nclass})\n  @ResponseStatus(HttpStatus.NOT_ACCEPTABLE)\n  public String handleParse(Exception e) {\n    return e.getMessage();\n  }\n}\n```", "```java\n// Target all controllers annotated with @RestController\n@RestControllerAdvice(annotations = RestController.class)\npublic class AdviceForAllRestControllers {\n   // …\n}\n```", "```java\n// good GET answer that controls how long the client shall cache\nreturn ResponseEntity.ok()\n          .cacheControl(CacheControl.maxAge(1, TimeUnit.HOURS))\n          .eTag(Integer.toHexString(message.hashCode()))\n          .body(message);\n// good POST answer that contains Location header\nreturn ResponseEntity\n          .created(URI.create(\"/api/mottos/\" + motto.size()))\n          .header(\"X-Copyright\", \"Packt 2018\")\n          .build();\n```", "```java\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\nprivate static class Message {\n    private String message;\n}\n\n@GetMapping(\"/{id}\")\npublic ResponseEntity<Message> retrieveById(\n            @PathVariable int id) {\n    if (id < 1 || id > motto.size()) {\n        return ResponseEntity.notFound().build();\n    } else {\n        return ResponseEntity.ok(motto.get(id - 1));\n    }\n}\n```", "```java\n{\n  \"addressee\": \"John\",\n  \"message\": \"Hello John\"\n}\n```", "```java\n{\n  \"message\": \"Hello John\",\n  \"_links\": {\n    \"self\": {\n      \"href\": \"http://localhost:8080/api/greeting?addressee=John\"\n    }\n  }\n}\n```", "```java\nmessage.add(\n    linkTo(methodOn(ContentTypeController.class)\n        .greetFromPath(addressee))\n    .withSelfRel());\n```", "```java\n<dependency>\n   <groupId>org.springframework.boot</groupId>\n   <artifactId>spring-boot-starter-hateoas</artifactId>\n</dependency>\n```", "```java\nmessage.add(linkTo(methodOn(ContentTypeController.class)\n    .greetFromPath(addressee)).withSelfRel());\n```", "```java\n{\n    \"message\": \"Hello John\",\n    \"_links\": {\n        \"self\": {\n            \"href\": \"http://localhost:8080/api/\ngreeting?addressee=John\"\n        }\n    }\n}\n```"]