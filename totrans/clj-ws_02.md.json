["```java\nuser=> \"I am a String\"\n\"I am a String\"\nuser=> \"I am immutable\"\n\"I am immutable\"\n```", "```java\nuser=> (println \"\\\"The measure of intelligence is the ability to change\\\" - Albert Einstein\")\n\"The measure of intelligence is the ability to change\" - Albert Einstein\nnil\n```", "```java\nuser=> (def silly-string \"I am Immutable. I am a silly String\")\n#'user/silly-string\nuser=> (clojure.string/replace silly-string \"silly\" \"clever\")\n\"I am Immutable. I am a clever String\"\nuser=> silly-string\n\"I am Immutable. I am a silly String\"\n```", "```java\nuser=> (first \"a collection of characters\")\n\\a\nuser=> (type *1)\njava.lang.Character\n```", "```java\ncljs.user=> (last \"a collection of 1 character strings\")\n\"s\"\ncljs.user=> (type *1)\n#object[String]\n```", "```java\nuser=> (str \"That's the way you \" \"con\" \"ca\" \"te\" \"nate\")\n\"That's the way you concatenate\"\nuser=> (str *1 \" - \" silly-string)\n\"That's the way you concatenate - I am Immutable. I am a silly String\"\n```", "```java\nuser=> (dir clojure.string)\nblank?\ncapitalize\nends-with?\nescape\nincludes?\nindex-of\njoin\nlast-index-of\nlower-case\nre-quote-replacement\nreplace\nreplace-first\nreverse\nsplit\nsplit-lines\nstarts-with?\ntrim\ntrim-newline\ntriml\ntrimr\nupper-case\n```", "```java\nuser=> (clojure.string/includes? \"potatoes\" \"toes\")\ntrue\n```", "```java\nuser=> (type 1)\njava.lang.Long\nuser=> (type 1000000000000000000)\njava.lang.Long\nuser=> (type 10000000000000000000)\nclojure.lang.BigInt\n```", "```java\nuser=> 5/4\n5/4\n```", "```java\nuser=> (/ 3 4)\n3/4\nuser=> (type 3/4)\nclojure.lang.Ratio\n```", "```java\nuser=> 4/4\n1\n```", "```java\nuser=> 1.2\n1.2\n```", "```java\nuser=> (/ 3 4.0)\n0.75\n```", "```java\nuser=> (* 1.0 2)\n2.0\nuser=> (type (* 1.0 2))\njava.lang.Double\n```", "```java\ncljs.user=> 1\n1\ncljs.user=> 1.2\n1.2\ncljs.user=> (/ 3 4)\n0.75\ncljs.user=> 3/4\n0.75\ncljs.user=> (* 1.0 2)\n2\n```", "```java\ncljs.user=> (type 1)\n#object[Number]\ncljs.user=> (type 1.2)\n#object[Number]\ncljs.user=> (type 3/4)\n#object[Number]\n```", "```java\nuser=> Math/PI\n3.141592653589793\n```", "```java\nuser=> (Math/random)\n0.25127992428738254\nuser=> (Math/sqrt 9)\n3.0\nuser=> (Math/round 0.7)\n1\n```", "```java\n    user=> (doc clojure.string/replace)\n    -------------------------\n    clojure.string/replace\n    ([s match replacement])\n      Replaces all instance of match with replacement in s.\n       match/replacement can be:\n       string / string\n       char / char\n       pattern / (string or function of match).\n       See also replace-first.\n       The replacement is literal (i.e. none of its characters are treated\n       specially) for all cases above except pattern / string.\n       For pattern / string, $1, $2, etc. in the replacement string are\n       substituted with the string that matched the corresponding\n       parenthesized group in the pattern.  If you wish your replacement\n       string r to be used literally, use (re-quote-replacement r) as the\n       replacement argument.  See also documentation for\n       java.util.regex.Matcher's appendReplacement method.\n       Example:\n       (clojure.string/replace \"Almost Pig Latin\" #\"\\b(\\w)(\\w+)\\b\" \"$2$1ay\")\n       -> \"lmostAay igPay atinLay\"\n    ```", "```java\n    user=> (clojure.string/replace \"Hello World\" #\"\\w\" \"!\")\n    ```", "```java\n    \"!!!!! !!!!!\"\n    ```", "```java\n    user=> (clojure.string/replace \"Hello World\" #\"\\w\" (fn [letter] (do (println letter) \"!\")))\n    ```", "```java\n    H\n    e\n    l\n    l\n    o\n    W\n    o\n    r\n    l\n    d\n    \"!!!!! !!!!!\"\n    ```", "```java\n    user=> (int \\a)\n    97\n    ```", "```java\n    user=> (first (char-array \"a\"))\n    \\a\n    ```", "```java\n    user=> (Math/pow (int (first (char-array \"a\"))) 2)\n    9409.0\n    ```", "```java\n    user=>\n    (defn encode-letter\n      [s]\n      (let [code (Math/pow (int (first (char-array s))) 2)]\n        (str (int code))))\n    #'user/encode-letter\n    user=> (encode-letter \"a\")\n    \"9409\"\n    ```", "```java\n    user=>\n    (defn encode\n      [s]\n      (clojure.string/replace s #\"\\w\" encode-letter))\n    #'user/encode\n    user=> (encode \"Hello World\")\n    \"518410201116641166412321 756912321129961166410000\"\n    ```", "```java\n    user=>\n    (defn encode-letter\n      [s x]\n      (let [code (Math/pow (+ x (int (first (char-array s)))) 2)]\n        (str \"#\" (int code))))\n    #'user/encode-letter\n    ```", "```java\n    user=> (encode \"Hello World\")\n    Execution error (ArityException) at user/encode (REPL:3).\n    Wrong number of args (1) passed to: user/encode-letter\n    ```", "```java\n    user=>\n    (defn encode\n      [s]\n      (let [number-of-words (count (clojure.string/split s #\" \"))]\n        (clojure.string/replace s #\"\\w\" (fn [s] (encode-letter s number-of-words)))))\n    #'user/encode\n    ```", "```java\n    user=> (encode \"Super secret\")\n    \"#7225#14161#12996#10609#13456 #13689#10609#10201#13456#10609#13924\"\n    user=> (encode \"Super secret message\")\n    \"#7396#14400#13225#10816#13689 #13924#10816#10404#13689#10816#14161 #12544#10816#13924#13924#10000#11236#10816\"\n    ```", "```java\n    user=>\n    (defn decode-letter\n      [x y]\n      (let [number (Integer/parseInt (subs x 1))\n            letter (char (- (Math/sqrt number) y))]\n      (str letter)))\n    #'user/decode-letter\n    ```", "```java\n    user=>\n    (defn decode [s]\n      (let [number-of-words (count (clojure.string/split s #\" \"))]\n        (clojure.string/replace s #\"\\#\\d+\" (fn [s] (decode-letter s number-of-words)))))\n    #'user/decode\n    ```", "```java\n    user=> (encode \"If you want to keep a secret, you must also hide it from yourself.\")\n    ```", "```java\n    \"#7569#13456 #18225#15625#17161 #17689#12321#15376#16900 #16900#15625 #14641#13225#13225#15876 #12321 #16641#13225#12769#16384#13225#16900, #18225#15625#17161 #15129#17161#16641#16900 #12321#14884#16641#15625 #13924#14161#12996#13225 #14161#16900 #13456#16384#15625#15129 #18225#15625#17161#16384#16641#13225#14884#13456.\"\n    user=> (decode *1)\n    \"If you want to keep a secret, you must also hide it from yourself.\"\n    ```", "```java\nuser=> (def foo \"bar\")\n#'user/foo\nuser=> foo\n\"bar\"\nuser=> (defn add-2 [x] (+ x 2))\n#'user/add-2\nuser=> add-2\n#object[user$add_2 0x4e858e0a \"user$add_2@4e858e0a\"]\n```", "```java\nuser=> marmalade\nSyntax error compiling at (REPL:0:0).\nUnable to resolve symbol: marmalade in this context\n```", "```java\nuser=> str\n#object[clojure.core$str 0x7bb6ab3a \"clojure.core$str@7bb6ab3a\"]\nuser=> +\n#object[clojure.core$_PLUS_ 0x1c3146bc \"clojure.core$_PLUS_@1c3146bc\"]\nuser=> clojure.string/replace\n#object[clojure.string$replace 0xf478a81 \"clojure.string$replace@f478a81\"]\n```", "```java\nuser=> :foo\n:foo\nuser=> :another_keyword\n:another_keyword\n```", "```java\nuser=> {:artist \"David Bowtie\" :song \"The Man Who Mapped the World\" :year 1970}\n{:artist \"David Bowtie\", :song \"The Man Who Mapped the World\", :year 1970}\n```", "```java\nuser=> {:artist \"David Bowtie\", :song \"Comma Oddity\", :year 1969}\n{:artist \"David Bowtie\", :song \"Comma Oddity\", :year 1969}\n```", "```java\nuser=>\n  {\n  \"David Bowtie\" {\n    \"The Man Who Mapped the World\" {:year 1970, :duration \"4:01\"}\n    \"Comma Oddity\" {:year 1969, :duration \"5:19\"}\n  }\n  \"Crosby Stills Hash\" {\n    \"Helplessly Mapping\" {:year 1969, :duration \"2:38\"}\n    \"Almost Cut My Hair\" {:year 1970, :duration \"4:29\", :featuring [\"Neil Young\", \"Rich Hickey\"]}\n  }\n}\n{\"David Bowtie\" {\"The Man Who Mapped the World\" {:year 1970, :duration \"4:01\"}, \"Comma Oddity\" {:year 1969, :duration \"5:19\"}}, \"Crosby Stills Hash\" {\"Helplessly Mapping\" {:year 1969, :duration \"2:38\"}, \"Almost Cut My Hair\" {:year 1970, :duration \"4:29\", :featuring [\"Neil Young\" \"Rich Hickey\"]}}}\n```", "```java\nuser=> (hash-map :a 1 :b 2 :c 3)\n{:c 3, :b 2, :a 1}\n```", "```java\nuser=> {:name \"Lucy\" :age 32 :name \"Jon\"}\nSyntax error reading source at (REPL:6:35).\nDuplicate key: :name\n```", "```java\nuser=> {:name \"Lucy\" :age 32 :number-of-teeth 32}\n{:name \"Lucy\", :age 32, :number-of-teeth 32}\n```", "```java\n    user=> (def favorite-fruit {:name \"Kiwi\", :color \"Green\", :kcal_per_100g 61 :distinguish_mark \"Hairy\"})\n    #'user/favorite-fruit\n    ```", "```java\n    user=> (get favorite-fruit :name)\n    \"Kiwi\"\n    user=> (get favorite-fruit :color)\n    \"Green\"\n    ```", "```java\n    user=> (get favorite-fruit :taste)\n    nil\n    user=> (get favorite-fruit :taste \"Very good 8/10\")\n    \"Very good 8/10\"\n    user=> (get favorite-fruit :kcal_per_100g 0)\n    61\n    ```", "```java\n    user=> (favorite-fruit :color)\n    \"Green\"\n    ```", "```java\n    user=> (:color favorite-fruit)\n    \"Green\"\n    ```", "```java\n    user=> (:shape favorite-fruit \"egg-like\")\n    \"egg-like\"\n    ```", "```java\n    user=> (assoc favorite-fruit :shape \"egg-like\")\n    {:name \"Kiwi\", :color \"Green\", :kcal_per_100g 61, :distinguish_mark \"Hairy\", :shape \"egg-like\"}\n    ```", "```java\n    user=> favorite-fruit\n    {:name \"Kiwi\", :color \"Green\", :kcal_per_100g 61, :distinguish_mark \"Hairy\"}\n    ```", "```java\n    user=> (assoc favorite-fruit :color \"Brown\")\n    {:name \"Kiwi\", :color \"Brown\", :kcal_per_100g 61, :distinguish_mark \"Hairy\"}\n    ```", "```java\n    user=> (assoc favorite-fruit :yearly_production_in_tonnes {:china 2025000 :italy 541000 :new_zealand 412000 :iran 311000 :chile 225000})\n    {:name \"Kiwi\", :color \"Green\", :kcal_per_100g 61, :distinguish_mark \"Hairy\", :yearly_production_in_tonnes {:china 2025000, :italy 541000, :new_zealand 412000, :iran 311000, :chile 225000}}\n    ```", "```java\n    user=> (assoc favorite-fruit :kcal_per_100g (- (:kcal_per_100g favorite-fruit) 1))\n    {:name \"Kiwi\", :color \"Green\", :kcal_per_100g 60, :distinguish_mark \"Hairy\"}\n    ```", "```java\n    user=> (update favorite-fruit :kcal_per_100g dec)\n    {:name \"Kiwi\", :color \"Green\", :kcal_per_100g 60, :distinguish_mark \"Hairy\"}\n    ```", "```java\n    user=> (update favorite-fruit :kcal_per_100g - 10)\n    {:name \"Kiwi\", :color \"Green\", :kcal_per_100g 51, :distinguish_mark \"Hairy\"}\n    ```", "```java\n    user=> (dissoc favorite-fruit :distinguish_mark)\n    {:name \"Kiwi\", :color \"Green\", :kcal_per_100g 61}\n    user=> (dissoc favorite-fruit :kcal_per_100g :color)\n    {:name \"Kiwi\", :distinguish_mark \"Hairy\"}\n    ```", "```java\nuser=> #{1 2 3 4 5}\n#{1 4 3 2 5}\n```", "```java\nuser=> #{:a :a :b :c}\nSyntax error reading source at (REPL:135:15).\nDuplicate key: :a\n```", "```java\nuser=> (hash-set :a :b :c :d)\n#{:c :b :d :a}\n```", "```java\nuser=> (set [:a :b :c])\n#{:c :b :a}\n```", "```java\nuser=> (set [\"No\" \"Copy\" \"Cats\" \"Cats\" \"Please\"])\n#{\"Copy\" \"Please\" \"Cats\" \"No\"}\n```", "```java\nuser=> (sorted-set \"No\" \"Copy\" \"Cats\" \"Cats\" \"Please\")\n#{\"Cats\" \"Copy\" \"No\" \"Please\"}\n```", "```java\n    user=> (def supported-currencies #{\"Dollar\" \"Japanese yen\" \"Euro\" \"Indian rupee\" \"British pound\"})\n    #'user/supported-currencies\n    ```", "```java\n    user=> (get supported-currencies \"Dollar\")\n    \"Dollar\"\n    user=> (get supported-currencies \"Swiss franc\")\n    nil\n    ```", "```java\n    user=> (contains? supported-currencies \"Dollar\")\n    true\n    user=> (contains? supported-currencies \"Swiss franc\")\n    false\n    ```", "```java\n    user=> (supported-currencies \"Swiss franc\")\n    nil\n    ```", "```java\n    user=> (\"Dollar\" supported-currencies)\n    Execution error (ClassCastException) at user/eval7 (REPL:1).\n    java.lang.String cannot be cast to clojure.lang.IFn\n    ```", "```java\n    user=> (conj supported-currencies \"Monopoly Money\")\n    #{\"Japanese yen\" \"Euro\" \"Dollar\" \"Monopoly Money\" \"Indian rupee\" \"British pound\"}\n    ```", "```java\n    user=> (conj supported-currencies \"Monopoly Money\" \"Gold dragon\" \"Gil\")\n    #{\"Japanese yen\" \"Euro\" \"Dollar\" \"Monopoly Money\" \"Indian rupee\" \"Gold dragon\" \"British pound\" \"Gil\"}\n    ```", "```java\n    user=> (disj supported-currencies \"Dollar\" \"British pound\")\n    #{\"Japanese yen\" \"Euro\" \"Indian rupee\"}\n    ```", "```java\nuser=> [1 2 3]\n[1 2 3]\n```", "```java\nuser=> (vector 10 15 2 15 0)\n[10 15 2 15 0]\n```", "```java\nuser=> (vec #{1 2 3})\n[1 3 2]\n```", "```java\nuser=> [nil :keyword \"String\" {:answers [:yep :nope]}]\n[nil :keyword \"String\" {:answers [:yep :nope]}]\n```", "```java\n    user=> (get [:a :b :c] 0)\n    :a\n    user=> (get [:a :b :c] 2)\n    :c\n    user=> (get [:a :b :c] 10)\n    nil\n    ```", "```java\n    user=> (def fibonacci [0 1 1 2 3 5 8])\n    #'user/fibonacci\n    user=> (get fibonacci 6)\n    8\n    ```", "```java\n    user=> (fibonacci 6)\n    8\n    ```", "```java\n    user=> (conj fibonacci 13 21)\n    [0 1 1 2 3 5 8 13 21]\n    ```", "```java\n    user=>\n    (let [size (count fibonacci)\n           last-number (last fibonacci)\n           second-to-last-number (fibonacci (- size 2))]\n        (conj fibonacci (+ last-number second-to-last-number)))\n    [0 1 1 2 3 5 8 13]\n    ```", "```java\nuser=> (1 2 3)\nExecution error (ClassCastException) at user/eval211 (REPL:1).\njava.lang.Long cannot be cast to clojure.lang.IFn\nuser=> '(1 2 3)\n(1 2 3)\nuser=> (+ 1 2 3)\n6\nuser=> '(+ 1 2 3)\n(+ 1 2 3)\n```", "```java\nuser=> (list :a :b :c)\n(:a :b :c)\n```", "```java\nuser=> (first '(:a :b :c :d))\n:a\n```", "```java\nuser=> (rest '(:a :b :c :d))\n(:b :c :d)\n```", "```java\nuser=> (nth '(:a :b :c :d) 2)\n:c\n```", "```java\n    user=> (def my-todo (list  \"Feed the cat\" \"Clean the bathroom\" \"Save the world\"))\n    #'user/my-todo\n    ```", "```java\n    user=> (cons \"Go to work\" my-todo)\n    (\"Go to work\" \"Feed the cat\" \"Clean the bathroom\" \"Save the world\")\n    ```", "```java\n    user=> (conj my-todo \"Go to work\")\n    (\"Go to work\" \"Feed the cat\" \"Clean the bathroom\" \"Save the world\")\n    ```", "```java\n    user=> (conj my-todo \"Go to work\" \"Wash my socks\")\n    (\"Wash my socks\" \"Go to work\" \"Feed the cat\" \"Clean the bathroom\" \"Save the world\")\n    ```", "```java\n    user=> (first my-todo)\n    \"Feed the cat\"\n    ```", "```java\n    user=> (rest my-todo)\n    (\"Clean the bathroom\" \"Save the world\")\n    ```", "```java\n    user=> (nth my-todo 2)\n    \"Save the world\"\n    ```", "```java\nuser=> (def language {:name \"Clojure\" :creator \"Rich Hickey\" :platforms [\"Java\" \"JavaScript\" \".NET\"]})\n#'user/language\n```", "```java\nuser=> (count language)\n3\n```", "```java\nuser=> (count #{})\n0\n```", "```java\nuser=> (empty? language)\nfalse\nuser=> (empty? [])\ntrue\n```", "```java\nuser=> (seq language)\n([:name \"Clojure\"] [:creator \"Rich Hickey\"] [:platforms [\"Java\" \"JavaScript\" \".NET\"]])\n```", "```java\nuser=> (nth (seq language) 1)\n[:creator \"Rich Hickey\"]\n```", "```java\nuser=> (first #{:a :b :c})\n:c\nuser=> (rest #{:a :b :c})\n(:b :a)\nuser=> (last language)\n[:platforms [\"Java\" \"JavaScript\" \".NET\"]]\n```", "```java\nuser=> (into [1 2 3 4] #{5 6 7 8})\n[1 2 3 4 7 6 5 8]\n```", "```java\nuser=> (into #{1 2 3 4} [5 6 7 8])\n#{7 1 4 6 3 2 5 8}\n```", "```java\nuser=> (into #{} [1 2 3 3 3 4])\n#{1 4 3 2}\n```", "```java\nuser=> (into {} [[:a 1] [:b 2] [:c 3]])\n{:a 1, :b 2, :c 3}\n```", "```java\nuser=> (into '() [1 2 3 4])\n(4 3 2 1)\n```", "```java\nuser=> (conj '() 1)\n(1)\nuser=> (conj '(1) 2)\n(2 1)\nuser=> (conj '(2 1) 3)\n(3 2 1)\nuser=> (conj '(3 2 1) 4)\n(4 3 2 1)\n```", "```java\nuser=> (concat '(1 2) '(3 4))\n(1 2 3 4)\nuser=> (into '(1 2) '(3 4))\n(4 3 1 2)\n```", "```java\nuser=> (concat #{1 2 3} #{1 2 3 4})\n(1 3 2 1 4 3 2)\nuser=> (concat {:a 1} [\"Hello\"])\n([:a 1] \"Hello\")\n```", "```java\nuser=> (def alphabet #{:a :b :c :d :e :f})\n#'user/alphabet\nuser=> alphabet\n#{:e :c :b :d :f :a}\nuser=> (sort alphabet)\n(:a :b :c :d :e :f)\nuser=> (sort [3 7 5 1 9])\n(1 3 5 7 9)\n```", "```java\nuser=> (sort [3 7 5 1 9])\n(1 3 5 7 9)\nuser=> (into [] *1)\n[1 3 5 7 9]\n```", "```java\nuser=> (conj language [:created 2007])\n{:name \"Clojure\", :creator \"Rich Hickey\", :platforms [\"Java\" \"JavaScript\" \".NET\"], :created 2007}\n```", "```java\nuser=> (assoc [:a :b :c :d] 2 :z)\n[:a :b :z :d]\n```", "```java\n    repl.clj\n    1  (def gemstone-db {\n    2      :ruby {\n    3        :name \"Ruby\"\n    4        :stock 480\n    5        :sales [1990 3644 6376 4918 7882 6747 7495 8573 5097 1712]\n    6        :properties {\n    7          :dispersion 0.018\n    8          :hardness 9.0\n    9          :refractive-index [1.77 1.78]\n    10         :color \"Red\"\n    11       }\n    12     }\n    The complete code for this snippet can be found at https://packt.live/3aD8MgL\n    ```", "```java\n    user=> (get (get (get gemstone-db :ruby) :properties) :hardness)\n    9.0\n    ```", "```java\n    user=> (:hardness (:properties (:ruby gemstone-db)))\n    9.0\n    ```", "```java\n    user=> (get-in gemstone-db [:ruby :properties :hardness])\n    9.0\n    ```", "```java\n    user=>\n    (defn durability\n      [db gemstone]\n      (get-in db [gemstone :properties :hardness]))\n    #'user/durability\n    ```", "```java\n    user=> (durability gemstone-db :ruby)\n    9.0\n    user=> (durability gemstone-db :moissanite)\n    9.5\n    ```", "```java\n    user=> (assoc (:ruby gemstone-db) :properties {:color \"Near colorless through pink through all shades of red to a deep crimson\"})\n    {:name \"Ruby\", :stock 120, :sales [1990 3644 6376 4918 7882 6747 7495 8573 5097 1712], :properties {:color \"Near colorless through pink through all shades of red to a deep crimson\"}}\n    ```", "```java\n    user=> (into {:a 1 :b 2} {:c 3})\n    {:a 1, :b 2, :c 3}\n    ```", "```java\n    user=> (update (:ruby gemstone-db) :properties into {:color \"Near colorless through pink through all shades of red to a deep crimson\"})\n    {:name \"Ruby\", :stock 120, :sales [1990 3644 6376 4918 7882 6747 7495 8573 5097 1712], :properties {:dispersion 0.018, :hardness 9.0, :refractive-index [1.77 1.78], :color \"Near colorless through pink through all shades of red to a deep crimson\"}}\n    ```", "```java\n    user=> (assoc-in gemstone-db [:ruby :properties :color] \"Near colorless through pink through all shades of red to a deep crimson\")\n    {:ruby {:name \"Ruby\", :stock 120, :sales [1990 3644 6376 4918 7882 6747 7495 8573 5097 1712], :properties {:dispersion 0.018, :hardness 9.0, :refractive-index [1.77 1.78], :color \"Near colorless through pink through all shades of red to a deep crimson\"}}, :emerald {:name \"Emerald\", :stock 85, :sales [6605 2373 104 4764 9023], :properties {:dispersion 0.014, :hardness 7.5, :refractive-index [1.57 1.58], :color \"Green shades to colorless\"}}, :diamond {:name \"Diamond\", :stock 10, :sales [8295 329 5960 6118 4189 3436 9833 8870 9700 7182 7061 1579], :properties {:dispersion 0.044, :hardness 10, :refractive-index [2.417 2.419], :color \"Typically yellow, brown or gray to colorless\"}}, :moissanite {:name \"Moissanite\", :stock 45, :sales [7761 3220], :properties {:dispersion 0.104, :hardness 9.5, :refractive-index [2.65 2.69], :color \"Colorless, green, yellow\"}}}\n    ```", "```java\n    user=>\n    (defn change-color\n      [db gemstone new-color]\n      (assoc-in gemstone-db [gemstone :properties :color] new-color))\n    #'user/change-color\n    ```", "```java\n    user=> (change-color gemstone-db :ruby \"Some kind of red\")\n    {:ruby {:name \"Ruby\", :stock 120, :sales [1990 3644 6376 4918 7882 6747 7495 8573 5097 1712], :properties {:dispersion 0.018, :hardness 9.0, :refractive-index [1.77 1.78], :color \"Some kind of red\"}}, :emerald {:name \"Emerald\", :stock 85, :sales [6605 2373 104 4764 9023], :properties {:dispersion 0.014, :hardness 7.5, :refractive-index [1.57 1.58], :color \"Green shades to colorless\"}}, :diamond {:name \"Diamond\", :stock 10, :sales [8295 329 5960 6118 4189 3436 9833 8870 9700 7182 7061 1579], :properties {:dispersion 0.044, :hardness 10, :refractive-index [2.417 2.419], :color \"Typically yellow, brown or gray to colorless\"}}, :moissanite {:name \"Moissanite\", :stock 45, :sales [7761 3220], :properties {:dispersion 0.104, :hardness 9.5, :refractive-index [2.65 2.69], :color \"Colorless, green, yellow\"}}}\n    ```", "```java\n    user=> (update-in gemstone-db [:diamond :stock] dec)\n    {:ruby {:name \"Ruby\", :stock 120, :sales [1990 3644 6376 4918 7882 6747 7495 8573 5097 1712], :properties {:dispersion 0.018, :hardness 9.0, :refractive-index [1.77 1.78], :color \"Near colorless through pink through all shades of red to a deep crimson\"}}, :emerald {:name \"Emerald\", :stock 85, :sales [6605 2373 104 4764 9023], :properties {:dispersion 0.014, :hardness 7.5, :refractive-index [1.57 1.58], :color \"Green shades to colorless\"}}, :diamond {:name \"Diamond\", :stock 9, :sales [8295 329 5960 6118 4189 3436 9833 8870 9700 7182 7061 1579], :properties {:dispersion 0.044, :hardness 10, :refractive-index [2.417 2.419], :color \"Typically yellow, brown or gray to colorless\"}}, :moissanite {:name \"Moissanite\", :stock 45, :sales [7761 3220], :properties {:dispersion 0.104, :hardness 9.5, :refractive-index [2.65 2.69], :color \"Colorless, green, yellow\"}}}\n    ```", "```java\n    user=> (set! *print-level* 2)\n    2\n    user=> (update-in gemstone-db [:diamond :stock] dec)\n    {:ruby {:name \"Ruby\", :stock 120, :sales #, :properties #}, :emerald {:name \"Emerald\", :stock 85, :sales #, :properties #}, :diamond {:name \"Diamond\", :stock 9, :sales #, :properties #}, :moissanite {:name \"Moissanite\", :stock 45, :sales #, :properties #}} \n    ```", "```java\n    user=> (update-in gemstone-db [:diamond :sales] conj 999)\n    {:ruby {:name \"Ruby\", :stock 120, :sales #, :properties #}, :emerald {:name \"Emerald\", :stock 85, :sales #, :properties #}, :diamond {:name \"Diamond\", :stock 10, :sales #, :properties #}, :moissanite {:name \"Moissanite\", :stock 45, :sales #, :properties #}}\n    ```", "```java\n    user=> (set! *print-level* nil)\n    nil\n    user=> (update-in gemstone-db [:diamond :sales] conj 999)\n    {:ruby {:name \"Ruby\", :stock 120, :sales [1990 3644 6376 4918 7882 6747 7495 8573 5097 1712], :properties {:dispersion 0.018, :hardness 9.0, :refractive-index [1.77 1.78], :color \"Near colorless through pink through all shades of red to a deep crimson\"}}, :emerald {:name \"Emerald\", :stock 85, :sales [6605 2373 104 4764 9023], :properties {:dispersion 0.014, :hardness 7.5, :refractive-index [1.57 1.58], :color \"Green shades to colorless\"}}, :diamond {:name \"Diamond\", :stock 10, :sales [8295 329 5960 6118 4189 3436 9833 8870 9700 7182 7061 1579 999], :properties {:dispersion 0.044, :hardness 10, :refractive-index [2.417 2.419], :color \"Typically yellow, brown or gray to colorless\"}}, :moissanite {:name \"Moissanite\", :stock 45, :sales [7761 3220], :properties {:dispersion 0.104, :hardness 9.5, :refractive-index [2.65 2.69], :color \"Colorless, green, yellow\"}}}\n    ```", "```java\n    (defn sell\n      [db gemstone client-id]\n      (let [clients-updated-db (update-in db [gemstone :sales] conj client-id)]\n        (update-in clients-updated-db [gemstone :stock] dec)))\n    ```", "```java\n    user=> (sell gemstone-db :moissanite 123)\n    {:ruby {:name \"Ruby\", :stock 120, :sales [1990 3644 6376 4918 7882 6747 7495 8573 5097 1712], :properties {:dispersion 0.018, :hardness 9.0, :refractive-index [1.77 1.78], :color \"Near colorless through pink through all shades of red to a deep crimson\"}}, :emerald {:name \"Emerald\", :stock 85, :sales [6605 2373 104 4764 9023], :properties {:dispersion 0.014, :hardness 7.5, :refractive-index [1.57 1.58], :color \"Green shades to colorless\"}}, :diamond {:name \"Diamond\", :stock 10, :sales [8295 329 5960 6118 4189 3436 9833 8870 9700 7182 7061 1579], :properties {:dispersion 0.044, :hardness 10, :refractive-index [2.417 2.419], :color \"Typically yellow, brown or gray to colorless\"}}, :moissanite {:name \"Moissanite\", :stock 44, :sales [7761 3220 123], :properties {:dispersion 0.104, :hardness 9.5, :refractive-index [2.65 2.69], :color \"Colorless, green, yellow\"}}}\n    ```", "```java\n(def memory-db (atom {}))\n(defn read-db [] @memory-db)\n(defn write-db [new-db] (reset! memory-db new-db))\n```", "```java\n{:table-1 {:data [] :indexes {}} :table-2 {:data [] :indexes {}}\n```", "```java\n{\n  :clients {\n    :data [{:id 1 :name \"Bob\" :age 30} {:id 2 :name \"Alice\" :age 24}]\n    :indexes {:id {1 0, 2 1}}\n    },\n  :fruits {\n    :data [{:name \"Lemon\" :stock 10} {:name \"Coconut\" :stock 3}]\n    :indexes {:name {\"Lemon\" 0, \"Coconut\" 1}}\n  },\n  :purchases {\n    :data [{:id 1 :user-id 1 :item \"Coconut\"} {:id 1 :user-id 2 :item \"Lemon\"}]\n    :indexes {:id {1 0, 2 1}}\n  }\n}\n```", "```java\n    user=> (create-table :fruits)\n    {:clients {:data [], :indexes {}}, :fruits {:data [], :indexes {}}}\n    user=> (insert :fruits {:name \"Pear\" :stock 3} :name)\n    Record with :name Pear already exists. Aborting\n    user=> (select-* :fruits)\n    [{:name \"Pear\", :stock 3} {:name \"Apricot\", :stock 30} {:name \"Grapefruit\", :stock 6}]\n    user=> (select-*-where :fruits :name \"Apricot\")\n    {:name \"Apricot\", :stock 30}\n    ```"]