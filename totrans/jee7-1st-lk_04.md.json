["```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<persistence version=\"2.1\" \n\n  xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/persistence \n  http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd\">\n  <persistence-unit name=\"chapter04PU\"transaction-type=\"RESOURCE_LOCAL\">\n    <provider>org.eclipse.persistence.jpa.PersistenceProvider</provider>\n    <class>com.packt.ch04.entities.Student</class>\n    <properties>\n      <property name=\"javax.persistence.jdbc.url\"value=\"jdbc:derby://localhost:1527/ONLINEREGISTRATION\"/>\n      <property name=\"javax.persistence.jdbc.password\"value=\"userapp\"/>\n      <property name=\"javax.persistence.jdbc.driver\"value=\"org.apache.derby.jdbc.ClientDriver\"/>\n      <property name=\"javax.persistence.jdbc.user\"value=\"userapp\"/>\n    </properties>\n  </persistence-unit>\n</persistence>\n```", "```java\npublic static void main( String[] args ) {\n  EntityManagerFactory emf =Persistence.createEntityManagerFactory(\"chapter04PU\");\n  EntityManager em = emf.createEntityManager();\n  //create entity manager\n\n  Student student = createStudent();\n\n  em.getTransaction().begin();//begin transaction\n  em.persist(student);//save the student\n  em.getTransaction().commit(); // commit transaction\n  Student std = em.find(Student.class, student.getId());\n  //find student\n\n  System.out.println(\"ID : \"+std.getId()+\",last name : \"+std.getLastname());       \n  em.getTransaction().begin();//begin transaction\n  std.setLastname(\"NGANBEL\");//Update student's last name\n  em.getTransaction().commit(); // commit transaction\n\n  std = em.find(Student.class, student.getId());//find student\n  System.out.println(\"ID : \"+std.getId()+\",last name : \"+std.getLastname()); \n\n  em.getTransaction().begin();//begin transaction\n  em.remove(std);//remove student\n  em.getTransaction().commit(); // commit transaction\n}\n```", "```java\n@Stateless\n@LocalBean\npublic class MySessionBean {\n\n  /* Creation of an entity manager for \n   * unsynchronized persistence context\n  */\n  @PersistenceContext(synchronization = SynchronizationType.UNSYNCHRONIZED)\n  EntityManager em;\n\n  public void useUnsynchronizedEntityManager(){\n      //enlisting of an unsynchronized persistence context\n      em.joinTransaction();\n      //...\n  }\n}\n```", "```java\npublic class LogEntityListener {\n  @EJB\n  BeanLoggerLocal beanLogger;\n\n  @PrePersist\n  public void prePersistCallback(Object entity){\n    beanLogger.logInformation(entity);\n  }\n\n  @PostConstruct\n  public void init(){\n    System.out.println(\"Dependency injected inLogEntityListener\");\n  }\n\n  @PreDestroy\n  public void destroy(){\n    System.out.println(\"LogEntityListener will be destroy\");\n  }\n}\n\n@Entity\n@EntityListeners(LogEntityListener.class)\npublic class Student implements Serializable {\n  //\n}\n```", "```java\n@Entity\n@Table(indexes = @Index(columnList = \"name ASC, id DESC\"))\npublic class MyEntity implements Serializable {\n  @Id\n  private Long id;    \n  private String name;\n  @JoinColumn(foreignKey = @ForeignKey(name = \"FK\"))\n  private Student student;\n\n  //...    \n}\n```", "```java\n@Entity\n@NamedEntityGraph(name=\"includeThis\",attributeNodes={@NamedAttributeNode(\"students\")})\npublic class Department implements Serializable {\n  private static final long serialVersionUID = 1L;\n  @Id\n  @Basic(optional = false)\n  private String id;\n  private String name;\n  private Integer nbrlevel;\n  private String phone;    \n  @OneToMany(mappedBy = \"depart\",fetch = FetchType.LAZY)\n  private List<Student> students;\n\n  /*getter and setter*/\n}\n```", "```java\nEntityManager em = emf.createEntityManager();\n//create entity manager\nPersistenceUnitUtil pUtil = emf.getPersistenceUnitUtil();\n\nDepartment depart = (Department) em.createQuery(\"Select e from Department e\")\n.getResultList().get(0);\nSystem.out.println(\"students Was loaded ? \"+pUtil.isLoaded(depart, \"students\"));\n\nEntityGraph includeThis = em.getEntityGraph(\"includeThis\");\ndepart = (Department) em.createQuery(\"Select e from Department e\")\n.setHint(\"javax.persistence.fetchgraph\", includeThis)\n.getResultList().get(0);\nSystem.out.println(\"students Was loaded ? \"+pUtil.isLoaded(depart,\"students\"));\n```", "```java\nEntityManager em = emf.createEntityManager();\n//create entity manager\nPersistenceUnitUtil pUtil = emf.getPersistenceUnitUtil();\n\nDepartment depart = (Department) em.createQuery(\"Select e from Department e\")\n.getResultList().get(0);\nSystem.out.println(\"students Was loaded ? \" + pUtil.isLoaded(depart, \"students\"));\n\nEntityGraph includeThis = em.createEntityGraph(Department.class);\nincludeThis.addAttributeNodes(\"students\");\n\ndepart = (Department) em.createQuery(\"Select e from Department e\")\n.setHint(\"javax.persistence.fetchgraph\", includeThis)\n.getResultList().get(0);\nSystem.out.println(\"students Was loaded ? \" +pUtil.isLoaded(depart, \"students\"));\n```", "```java\nString queryString = \"SELECT a FROM Student a WHERE a.id > 123\";\nQuery query = em.createQuery(queryString);\nSystem.out.println(\"result : \"+query.getResultList());\n```", "```java\nDELIMITER $$\nCREATE\n  PROCEDURE `ONLINEREGISTRATION`.`getStudentsName`()    \n  BEGIN\n    SELECT ID,LASTNAME FROM STUDENT ORDER BY LASTNAME ASC;\n  END$$\nDELIMITER ;\n```", "```java\nEntityManagerFactory emf = Persistence.createEntityManagerFactory(\"chapter04PUM\");\nEntityManager em = emf.createEntityManager();\n//create entity manager\nStoredProcedureQuery spQuery = em.createStoredProcedureQuery(\"getStudentsName\",Student.class);\nList<Student> results = spQuery.getResultList();\nfor(Student std : results)\n  System.out.println(std.getLastname());\n```", "```java\n    String queryString = \"SELECT a FROM Student a \"+\" JOIN Department b ON a.departId = b.id\";\n    Query query = em.createQuery(queryString);\n    System.out.println(\"result : \"+query.getResultList());\n    ```", "```java\n    String queryString= \"SELECT a FROM Student a \"+\" WHERE FUNCTION('MONTH',a.birthdate) = 7 \";      \n    Query query = em.createQuery(queryString);\n    System.out.println(\"result : \"+query.getResultList());\n    ```", "```java\n    //Entity downcasting\n    String queryString = \"SELECT  a FROM Person a \"+\" WHERE TYPE(a) = Appuser AND \"+\" TREAT(a AS Appuser).userLogin = 'adwiner'\";\n    Query query = em.createQuery(queryString);\n    System.out.println(\"result : \"+query.getResultList());\n    ```", "```java\nEntityManagerFactory emf =Persistence.createEntityManagerFactory(\"chapter04PU\");        \nEntityManager em = emf.createEntityManager();\n\nQuery query = em.createQuery(\"SELECT a FROM Student a\");\nemf.addNamedQuery(\"runtimeNamedQuery\", query);\n\nSystem.out.println(\"result :\"+em.createNamedQuery(\"runtimeNamedQuery\").getResultList());\n```", "```java\nEntityManagerFactory emf =Persistence.createEntityManagerFactory(\"chapter04PU\");\nEntityManager em = emf.createEntityManager();\n//create entity manager\n//criteria builder declaration\nCriteriaBuilder cb = em.getCriteriaBuilder();\n//declaration of the object that will be returned by the query\nCriteriaQuery<Student> cq = cb.createQuery(Student.class);\n//Declaration of the entity to which the request is made\nRoot<Student> student = cq.from(Student.class);\n//Query construction\ncq.select(student).where(cb.greaterThan(student.<String>get(\"id\"), \"123\"));\nTypedQuery<Student> tq = em.createQuery(cq);\n//execution of the query\nSystem.out.println(\"result : \"+tq.getResultList());\n\n//JPQL equivalent query\nSELECT a FROM Student a WHERE a.id > 123\n```", "```java\n//bulk update\nCriteriaUpdate cUpdate = cb.createCriteriaUpdate(Student.class);\nRoot root = cUpdate.from(Student.class);\ncUpdate.set(root.get(\"departId\"), \"GT\").where(cb.equal(root.get(\"departId\"), \"GI\"));          \nQuery q = em.createQuery(cUpdate);\n\nem.getTransaction().begin();//begin transaction\nint num = q.executeUpdate();\nem.getTransaction().commit();//commit transaction\nSystem.out.println(\"number of update : \"+num);\n//JPQL equivalent query\nUPDATE Student a SET a.departId = 'GT' WHERE a.departId = 'GI'\n```", "```java\n//Downcasting\nCriteriaQuery<Person> cqp = cb.createQuery(Person.class);\nRoot<Person> person = cqp.from(Person.class);\ncqp.select(person).where(cb.equal(person.type(),Appuser.class),cb.equal(cb.treat(person, Appuser.class).get(\"userLogin\"),\"adwiner\"));\nTypedQuery<Person> tqp = em.createQuery(cqp);\nSystem.out.println(\"result : \" + tqp.getResultList());\n```", "```java\n<persistence-unit name=\"chapter04PUM\" transaction-type=\"RESOURCE_LOCAL\">\n  <provider>org.eclipse.persistence.jpa.PersistenceProvider</provider>\n  <class>com.packt.ch04.entities.Department</class>\n  <class>com.packt.ch04.entities.Person</class>\n  <class>com.packt.ch04.entities.Student</class>\n  <properties>\n    <property name=\"javax.persistence.jdbc.url\"value=\"jdbc:mysql://localhost:3306/onlineregistration\"/>\n    <property name=\"javax.persistence.jdbc.password\"value=\"onlineapp\"/>\n    <property name=\"javax.persistence.jdbc.driver\"value=\"com.mysql.jdbc.Driver\"/>\n    <property name=\"javax.persistence.jdbc.user\" value=\"root\"/>\n    <property name=\"javax.persistence.schema-generation.database.action\" value=\"create\"/>\n    <property name=\"javax.persistence.schema-generation.create-source\" value=\"metadata\"/>      \n  </properties>\n</persistence-unit>\n```", "```java\nMap props = new HashMap();\nprops.put(\"javax.persistence.schema-generation.database.action\", \"create\");\nprops.put(\"javax.persistence.schema-generation.create-source\", \"metadata\");\nPersistence.generateSchema(\"chapter04PUM\", props);\n```", "```java\nMap props = new HashMap();\nprops.put(\"javax.persistence.schema-generation.database.action\", \"create\");\nprops.put(\"javax.persistence.schema-generation.create-source\", \"metadata\");\nEntityManagerFactory emf = Persistence.createEntityManagerFactory(\"chapter04PUM\", props);\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<persistence version=\"2.1\" \n\n  xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/persistence \n  http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd\">\n\n  <persistence-unit name=\"chapter04PU\" transaction-type=\"JTA\">\n    <provider>org.eclipse.persistence.jpa.PersistenceProvider</provider>\n    <jta-data-source>onlineRegDataSource</jta-data-source>\n  </persistence-unit>\n\n</persistence>\n```", "```java\n@Stateless\npublic class StudentServiceCMT {\n\n  @PersistenceContext\n  EntityManager em;  \n\n  public void createStudent(){\n    Student student = new Student();\n    student.setBirthdate(new Date());\n    student.setDepartid(\"GI\");\n    student.setId(\"\"+ new Date().getTime());\n    student.setFirstname(\"CMT - FIRST NAME\");\n    student.setLastname(\"CMT - Last name\");\n\n    em.persist(student);\n  }\n}\n```", "```java\n@Stateless\n@TransactionManagement(TransactionManagementType.BEAN)\npublic class StudentServiceBMT {\n\n  @PersistenceContext\n  EntityManager em;\n\n  @Resource\n  UserTransaction userTx;\n\n  public void createStudent() throws Exception {\n    try {\n      userTx.begin();//begin transaction\n\n      Student student = new Student();\n      student.setBirthdate(new Date());\n      student.setDepartid(\"GI\");\n      student.setId(\"\"+ new Date().getTime());\n      student.setFirstname(\"BMT - FIRST NAME\");\n      student.setLastname(\"BMT - Last name\");\n\n      em.persist(student);\n\n      userTx.commit(); // commit transaction\n      } catch (Exception ex) {\n      userTx.rollback();//rollback transaction\n      throw ex;\n    } \n  }\n}\n```"]