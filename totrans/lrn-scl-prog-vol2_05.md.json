["```java\nclass Country(var name: String, var capital: String) \n```", "```java\nobject CountryApp extends App { \n  val country = new Country(\"France\", \"Paris\") \n  println(s\"Country Name: ${country.name} and Capital: ${country.capital}\") \n} \n```", "```java\nCountry Name: France and Capital: Paris \n```", "```java\npublic class CountryJava { \n    private String name; \n    private String capital; \n\n    public CountryJava(String name, String capital){ \n        this.name = name; \n        this.capital = capital; \n    } \n\n    public void setName(String name){this.name = name;} \n    public String getName(){return this.name;} \n\n    public void setCapital(String capital){this.capital = capital;} \n    public String getCapital(){return this.capital;}\n } \n```", "```java\nclass CountryJavaApp { \n    public static void main(String[] args) { \n        CountryJava country = new CountryJava(\"France\", \"Paris\"); \n        System.out.println(\"Country Name: \"+ country.getName() + \" and Capital: \"+ country.getCapital()); \n    } \n} \n```", "```java\nCountry Name: France and Capital: Paris \n```", "```java\nclass Country(name: String, capital: String) \n```", "```java\nprintln(s\"Country Name: ${country.name} and Capital: ${country.capital}\") \n```", "```java\nobject CountryApp extends App { \n  val country = new Country(\"France\", \"Paris\") \n  country.name = \"Germany\" \n  country.capital = \"Berlin\" \n  println(s\"Country Name: ${country.name} and Capital: ${country.capital}\") \n} \n```", "```java\nCountry Name: Germany and Capital: Berlin \n```", "```java\nclass Country(val name: String, val capital: String) \n```", "```java\ncountry.name = \"Germany\" \ncountry.capital = \"Berlin\" \n```", "```java\ncase class Country(name: String, capital: String) \n```", "```java\nclass Country(val name: String, val capital: String){ \n  var populationMap = scala.collection.mutable.Map[String, Double]() \n\n  def getPopulation(year: String): Double = populationMap(year) //In Million \n} \n\nobject CountryApp extends App { \n  val country = new Country(\"France\", \"Paris\") \n  country.populationMap += (\"2015\" -> 64.39) += (\"2016\" -> 64.67) += (\"2017\" -> 64.93) \n  println(s\"Country Name: ${country.name} and Population 2017: ${country.getPopulation(\"2017\")} million\") \n} \n```", "```java\nCountry Name: France and Population 2017: 64.93 million \n```", "```java\npublic class chapter6.Country { \n     public java.lang.String name(); \n     public void name_$eq(java.lang.String); \n     public java.lang.String capital(); \n     public void capital_$eq(java.lang.String); \n     public chapter6.Country(java.lang.String, java.lang.String); \n} \n```", "```java\nobject CountryApp extends App { \n  val country = new Country(\"France\", \"Paris\") \n  country.name_=(\"Germany\") \n  country.capital_=(\"Berlin\") \n  println(s\"Country Name: ${country.name} and \n                    capital: ${country.capital}\") \n} \n```", "```java\nCountry Name: Germany and capital: Berlin \n```", "```java\npublic class chapter6.Country { \n    public java.lang.String name(); \n    public java.lang.String capital(); \n    public chapter6.Country(java.lang.String, java.lang.String); \n} \n```", "```java\nprivate def getPopulation(year: String): Double = populationMap(year) \n//In Million \n```", "```java\nprintln(s\"Country Name: ${country.name} and Population 2017: ${country.getPopulation(\"2017\")} million\")\n```", "```java\nval country = new Country(\"France\", \"Paris\") \nprintln(country) \n```", "```java\nclass Country(val name: String, val capital: String){ \n  override def toString: String = s\"Country($name, $capital)\" \n} \n```", "```java\nval country = new Country(\"France\", \"Paris\") \nprintln(country) \n```", "```java\nCountry(France, Paris) \n```", "```java\nabstract class Person \nclass Customer extends Person \nclass Employee extends Person \n```", "```java\nabstract class Person(category: String) { \n  val idPrefix: String \n} \n\nclass Customer extends Person(\"External\") { \n  override val idPrefix: String = \"CUST\" \n} \n\nclass Employee extends Person(\"Internal\") { \n  override val idPrefix: String = \"EMP\" \n} \n```", "```java\ntrait Person { \n  val category: String \n  val idPrefix: String \n} \n\nclass Customer extends Person { \n  override val category: String = \"External\" \n  override val idPrefix: String = \"CUST\" \n} \n\nclass Employee extends Person { \n  override val category: String = \"Internal\" \n  override val idPrefix: String = \"EMP\" \n} \n```", "```java\nabstract class Person(category: String) //can give cons params \n\ntrait Person(category: String) //can't give cons params  \n```", "```java\npublic final class String extends Object \n```", "```java\nscala> abstract final class Person \ndefined class Person \n\nscala> class Employee extends Person \n<console>:12: error: illegal inheritance from final class Person \n       class Employee extends Person \n```", "```java\nobject CountryUtil { \n\n} \n```", "```java\nobject CountryUtil { \n  /* \n  * Function takes a sequence of population per million and returns average. \n  * */ \n  def populationAverage(pops: Seq[Double]) = pops.sum / pops.length \n} \n\nobject CountryApp extends App { \n  val country = new Country(\"France\", \"Paris\") \n  country.populationMap += (\"2015\" -> 64.39) += (\"2016\" -> 64.67) += (\"2017\" -> 64.93) \n\n  println(s\"Country Name: ${country.name} and Population 2017: ${country.getPopulation(\"2017\")} million\") \n\n  println(s\"${country.name}'s average population: ${CountryUtil.populationAverage(country.populationMap.values.toSeq)}\") \n\n} \n```", "```java\nCountry Name: France and Population 2017: 64.93 million \nFrance's average population: 64.66333333333334 \n```", "```java\nclass WeCant extends CountryUtil { \n} \n// Sorry we can't extend from an object \n```", "```java\npublic final class chapter6.CountryUtil { \n  public static double populationAverage(scala.collection.Seq<java.lang.Object>); \n} \n```", "```java\npublic final class chapter6.CountryUtil$ { \n  public static chapter6.CountryUtil$ MODULE$; \n  public static {}; \n  public double populationAverage(scala.collection.Seq<java.lang.Object>); \n} \n```", "```java\nclass Continent \n\nobject CountryUtil extends Continent { \n      //some code here \n} \n```", "```java\nimport java.time.LocalDate \nimport java.time.format.{DateTimeFormatter, TextStyle} \nimport java.util.Locale \nimport scala.util.{Failure, Success, Try} \n\nobject DateUtil { \n  /* \n  * Just pass a date with format DD/MM/YYYY, get back DAY_OF_WEEK \n  * */ \n  def dayOfWeek(date: String): Option[String] = Try{ \n      LocalDate.parse(date, DateTimeFormatter.ofPattern(\"dd/MM/yyyy\")).getDayOfWeek \n    } match { \n      case Success(dayOfWeek) => Some(dayOfWeek.getDisplayName(TextStyle.FULL, Locale.ENGLISH)) \n      case Failure(exp) => exp.printStackTrace; None \n    } \n} \n\nobject TestDateUtil extends App { \n  import DateUtil._ \n\n  val date = \"01/01/1992\" \n\n  dayOfWeek(date) match { \n      case Some(dow) => println(s\"It was $dow on $date\") \n      case None => println(s\"Something went wrong!\") \n  } \n\n} \n```", "```java\nIt was Wednesday on 01/01/1992 \n```", "```java\nclass Country(val name: String, val capital: String){ \n  var populationMap = scala.collection.mutable.Map[String, Double]() \n  def getPopulation(year: String): Double = populationMap(year) //In Million \n\n  override def toString: String = s\"Country($name,$capital)\" \n} \n\nobject Country { \n  /* \n  * Function takes a sequence of population per million and returns average. \n  * */ \n  def populationAverage(pops: Seq[Double]) = pops.sum / pops.length \n} \n\nobject CountryApp extends App { \n  val country = new Country(\"France\", \"Paris\") \n  country.populationMap += (\"2015\" -> 64.39) += (\"2016\" -> 64.67) += (\"2017\" -> 64.93) \n\n  println(s\"Country Name: ${country.name} and Population 2017: ${country.getPopulation(\"2017\")} million\") \n\n  println(s\"${country.name}'s average population: ${Country.populationAverage(country.populationMap.values.toSeq)}\") \n} \n```", "```java\nimport java.time.LocalDate \nimport java.time.format.DateTimeFormatter \n\nclass Date(val dateStr: String) { \n  override def toString: String = s\"Date(${this.dateStr})\" \n} \n\nobject Date{ \n  def apply(str: String): Date = { \n    val dater = LocalDate.parse(str, DateTimeFormatter.ofPattern(\"dd/MM/yyyy\")) \n    new Date(s\"${dater.getDayOfWeek} ${dater.getDayOfMonth}-${dater.getMonth}-${dater.getYear}\") \n  } \n} \n\nobject DateApp extends App { \n  val date = Date(\"01/01/1992\") \n  println(date)\n } \n```", "```java\nDate(WEDNESDAY 1-JANUARY-1992) \n```", "```java\nval date = Date(\"01/01/1992\") \n```", "```java\nclass Country(val name: String, val capital: String) { \n\n  override def toString: String = s\"Country($name,$capital)\" \n\n  override def equals(obj: scala.Any): Boolean = ??? \n\n  override def hashCode(): Int = ??? \n\n} \n```", "```java\nclass Country(val name: String, val capital: String) { \n\n  override def toString: String = s\"Country($name,$capital)\" \n\n  override def equals(obj: scala.Any): Boolean = ??? \n\n  override def hashCode(): Int = ??? \n\n} \n```", "```java\ncase class Country(name: String, capital: String) \n```", "```java\ncase class Country(name: String, capital: String) \n\nobject CountryUtil extends App { \n  val country = Country(\"France\", \"Paris\") \n  println(s\"Our country is: $country\") \n\n  println(s\"Equality => ${country == country}\") \n\n  println(s\"HashCode for country instance: ${country.hashCode()}\") \n}  \n```", "```java\nOur country is: Country(France,Paris) \nEquality => true \nHashCode for country instance: -66065175 \ntoString*,* equals, or hashCode methods for the Country class. Still, we were able to perform these operations for the case class instance of the Country class. Why so? This happens because when we define a case class in Scala, the compiler automatically creates its companion object with a few methods, such as apply, unapply, and so on. During compilation, whenever the Scala compiler finds a case class, it converts the class files from Scala to Java; in our case, we'll get Country$.class and Country.class. The body of these files tells you a lot about what's happening in the background:\n```", "```java\npublic final class chapter6.Country$ extends scala.runtime.AbstractFunction2<java.lang.String, java.lang.String, chapter6.Country> implements scala.Serializable { \n  public static chapter6.Country$ MODULE$; \n  public static {}; \n  public final java.lang.String toString(); \n  public chapter6.Country apply(java.lang.String, java.lang.String); \n  public scala.Option<scala.Tuple2<java.lang.String, java.lang.String>> unapply(chapter6.Country); \n  public java.lang.Object apply(java.lang.Object, java.lang.Object); \n} \n```", "```java\npublic class chapter6.Country implements scala.Product,scala.Serializable { \n  public static scala.Option<scala.Tuple2<java.lang.String, java.lang.String>> unapply(chapter6.Country); \n  public static chapter6.Country apply(java.lang.String, java.lang.String); \n  public static scala.Function1<scala.Tuple2<java.lang.String, java.lang.String>, chapter6.Country> tupled(); \n  public static scala.Function1<java.lang.String, scala.Function1<java.lang.String, chapter6.Country>> curried(); \n  public java.lang.String name(); \n  public java.lang.String capital(); \n  public chapter6.Country copy(java.lang.String, java.lang.String); \n  public java.lang.String copy$default$1(); \n  public java.lang.String copy$default$2(); \n  public java.lang.String productPrefix(); \n  public int productArity(); \n  public java.lang.Object productElement(int); \n  public scala.collection.Iterator<java.lang.Object> productIterator(); \n  public boolean canEqual(java.lang.Object); \n  public int hashCode(); \n  public java.lang.String toString(); \n  public boolean equals(java.lang.Object); \n  public chapter6.Country(java.lang.String, java.lang.String); \n} \n```", "```java\npackage chapter6 \n\nobject CountryUtil extends App { \n  case class Country(name: String, capital: String) \n  val country = Country(\"France\", \"Paris\") \n  println(s\"Country: => $country\") \n  println(s\"Equality: => ${country == country}\") \n  println(s\"HashCode: => ${country.hashCode()}\") \n\n  println(s\"Unapply: => ${Country.unapply(country)}\") \n  println(s\"apply: => ${Country.apply(\"Germany\",\"Berlin\")}\") \n\n  println(s\"copy: => ${country.copy(\"Germany\",\"Berlin\")}\") \n  println(s\"copyName: => ${country.copy(name=\"Germany\")}\") \n  println(s\"copyCapital: => ${country.copy(capital=\"Berlin\")}\") \n\n  println(s\"productArity: => ${country.productArity}\") \n  println(s\"productPrefix: => ${country.productPrefix}\") \n  println(s\"productElement(0): => ${country.productElement(0)}\") \n  println(s\"productElement(1): => ${country.productElement(1)}\") \n} \n```", "```java\nCountry: => Country(France,Paris) \nEquality: => true \nHashCode: => -66065175 \nUnapply: => Some((France,Paris)) \napply: => Country(Germany,Berlin) \ncopy: => Country(Germany,Berlin) \ncopyName: => Country(Germany,Paris) \ncopyCapital: => Country(France,Berlin) \nproductArity: => 2 \nproductPrefix: => Country \nproductElement(0): => France \nproductElement(1): => Paris \n```", "```java\ncase class Country(name: String, capital: String) \nval country = Country(\"France\", \"Paris\") \n\ncountry match { \n  case Country(\"Germany\", _) => println(s\"It's Germany\") \n  case Country(\"France\", _) => println(s\"It's France\") \n  case Country(_, _) => println(s\"It's some country\") \n} \n```", "```java\nIt's France  \n```", "```java\npackage chapter6 \n\nobject CountryUtil extends App { \n  case class Country(name: String, capital: String) \n  val country = Country(\"France\", \"Paris\") \n} \n\nclass Country(name: String, capital: String) \n```", "```java\npackage chapter6 \ncase class Country(name: String, capital: String) \n\nobject CountryUtil extends App {  \n  val country = Country(\"France\", \"Paris\") \n} \n\nclass Country(name: String, capital: String) \n```", "```java\nCountry is already defined in scope \n```", "```java\nabstract class Continent \ncase class Country(name: String, capital: String) extends Continent \n```"]