["```java\nGraalVM JavaScript (GraalVM EE Native 21.0.0.2)\n```", "```java\n/Library/Java/JavaVirtualMachines/graalvm-ee-java11-21.0.0.2/Contents/Home/bin/node --version\nv12.20.1\n```", "```java\n/Library/Java/JavaVirtualMachines/graalvm-ee-java11-21.0.0.2/Contents/Home/bin/npm --version\n6.14.10\n```", "```java\n/Library/Java/JavaVirtualMachines/graalvm-ee-java11-21.0.0.2/Contents/Home/bin/npm init     \npackage name: (npm) graal-node-app\nversion: (1.0.0) 1.0.0\ndescription: \nentry point: (index.js) \ntest command: \ngit repository: \nkeywords: \nauthor: \nlicense: (ISC) \nAbout to write to /chapter7/js/npm/package.json:\n{\n  \"name\": \"graal-node-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" andand exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\nIs this OK? (yes)\n```", "```java\n/Library/Java/JavaVirtualMachines/graalvm-ee-java11-21.0.0.2/Contents/Home/bin/npm install --save express\nnpm notice created a lockfile as package-lock.json. You should commit this file.\nnpm WARN graal-node-app@1.0.0 No description\nnpm WARN graal-node-app@1.0.0 No repository field.\n+ express@4.17.1\nadded 50 packages from 37 contributors and audited 50 packages in 6.277s\nfound 0 vulnerabilities\n```", "```java\nvar express = require('express');\nvar app = express();\napp.get('/', function(request, response) {\n    var responseString = \"<h1>Hello Graal Node </h1>\";\n    response.send(responseString);\n});\napp.listen(8080, function() {\n    console.log('Started the server at 8080')\n});\n```", "```java\n/Library/Java/JavaVirtualMachines/graalvm-ee-java11-21.0.0.2/Contents/Home/bin/node index.js \nStarted the server at 8080\n```", "```java\nvar express = require('express');\nvar app = express();\napp.get('/', function(request, response) {\n    var responseString = \"<h1>Hello Graal Node </h1>\";\n    response.send(responseString);\n});\napp.get('/poly', function(request, response) {\n    var responseString = \"<h1>Hello Graal Polyglot </h1>\";\n    var array = Polyglot.eval(\"python\", \"[1,2,3,4, 100,                              200, 300, 400]\")\n    responseString = responseString + \"<ul>\";\n    for (let index = 0; index < array.length; index++) {\n        responseString = responseString + \"<li>\";\n        responseString = responseString + array[index];\n        responseString = responseString + \"</li>\";\n    }\n    responseString = responseString + \"</ul>\";\n    response.send(responseString);\n});\n```", "```java\napp.listen(8080, function() {\n    console.log('Started the server at 8080')\n});\n```", "```java\n/Library/Java/JavaVirtualMachines/graalvm-ee-java11-21.0.0.2/Contents/Home/bin/node --jvm --polyglot index.js\nStarted the server at 8080\n```", "```java\nimport org.graalvm.polyglot.*;\nimport org.graalvm.polyglot.proxy.*;\n```", "```java\npublic class FibonacciCalculatorPolyglot{\n    static String JS_SNIPPET =     \"(function logTotalTime(param){console.log('total(from         JS) : '+param);})\";\n    public int[] findFibonacci(int count) {\n        int fib1 = 0;\n        int fib2 = 1;\n        int currentFib, index;\n        int [] fibNumbersArray = new int[count];\n        for(index=2; index < count; ++index ) {    \n            currentFib = fib1 + fib2;    \n            fib1 = fib2;    \n            fib2 = currentFib;    \n            fibNumbersArray[index - 1] = currentFib;\n        }\n        return fibNumbersArray;\n    }\n```", "```java\n    public static void main(String args[]){    \n        FibonacciCalculatorPolyglot fibCal             = new FibonacciCalculatorPolyglot();\n        long startTime = System.currentTimeMillis();\n        long now = 0;\n        long last = startTime;\n        for (int i = 1000000000; i < 1000000010; i++) {\n            int[] fibs = fibCal.findFibonacci(i);\n\n            long total = 0;\n            for (int j=0; j<fibs.length; j++) {\n                total += fibs[j];\n            }\n            now = System.currentTimeMillis();\n            System.out.printf(\"%d (%d ms)%n\", i , now – last);\n            last = now;\n        }\n        long endTime = System.currentTimeMillis();\n        long totalTime =             System.currentTimeMillis() - startTime;\n        System.out.printf(\"total (from Java): (%d ms)%n\",                          totalTime);  \n        try (Context context = Context.create()) {\n            Value value = context.eval(\"js\", JS_SNIPPET);\n            value.execute(totalTime);\n        }\n    }\n}\n```", "```java\nstatic String JS_SNIPPET = \"(function logTotalTime(param){console.log('total(from JS) : '+param);})\";\n```", "```java\nimport org.graalvm.polyglot.Context;\nimport org.graalvm.polyglot.Value;\n```", "```java\ntry (Context context = Context.create()) {\n    Value value = context.eval(\"js\", JS_SNIPPET);\n    value.execute(totalTime);\n}\n```", "```java\nContext context = Context.newBuilder().allowIO(true).build();\n```", "```java\nContext ctx =    Context.newBuilder().allowAllAccess(true).build();\n    File path = new File(\"/path/to/scriptfile\");\n    Source pythonScript =         Source.newBuilder(\"python\", new File(path,            \"pythonScript.py\")).build();\n    ctx.eval(pythonScript)\n```", "```java\npublic class HelloGraalPolyglot {\n    public static void main(String[] args) {\n        System.out.println(args[0]);\n    }\n}\n```", "```java\nvar hello = Java.type('HelloGraalPolyglot');\nhello.main([\"Hello from JavaScript\"]);\n```", "```java\njs --jvm --vm.cp=. hellograalpolyglot.js\n```", "```java\njs --jvm --vm.cp=. hellograalpolyglot.js\nHello from JavaScript\n```", "```java\napp.get('/fibonacci', function(request, response) {\n    var fibonacciCalculatorClass =        Java.type(\"FibonacciCalculatorPolyglot\");\n    var fibonacciCalculatorObject = new         fibonacciCalculatorClass();\n    //fibonacciCalculatorClass.class.static.main([\"\"]);\n    var array =        fibonacciCalculatorObject.findFibonacci(10);\n    var responseString =         \"<h1>Hello Graal Polyglot - Fibonacci numbers </h1>\";\n    responseString = responseString + \"<ul>\";\n    for (let index = 0; index < array.length; index++) {\n        responseString = responseString + \"<li>\";\n        responseString = responseString + array[index];\n        responseString = responseString + \"</li>\";\n    }\n    responseString = responseString + \"</ul>\";\n    response.send(responseString);\n});\n```", "```java\n/Library/Java/JavaVirtualMachines/graalvm-ee-java11-21.0.0.2/Contents/Home/bin/node --jvm --polyglot index.js\nStarted the server at 8080\n```", "```java\n--language:nfi\n--language:python\n--language:regex\n--language:wasm\n--language:java\n--language:llvm\n--language:js\n--language:ruby\n```", "```java\nnative-image --language:js FibonacciCalculatorPolyglot\n```", "```java\n./fibonaccicalculatorpolyglot\n```", "```java\nvar helloMathMessage = \" Hello Math.js Variable\";\nfunction add(a, b) {\n    return a+b;\n}\nfunction subtract(a, b) {\n    return a-b;\n}\nfunction multiply(a, b) {\n    return a*b;\n}\n```", "```java\nimport java.io.File;\nimport org.graalvm.polyglot.Context;\nimport org.graalvm.polyglot.Source;\nimport org.graalvm.polyglot.Value;\n```", "```java\npublic void runMathJS() {\n  Context ctx = Context.create(\"js\");\n  try {\n    File mathJSFile = new File(\"./math.js\");\n    ctx.eval(Source.newBuilder(\"js\", mathJSFile).build());\n```", "```java\n    Value addFunction =        ctx.getBindings(\"js\").getMember(\"add\");\n    Value subtractFunction =        ctx.getBindings(\"js\").getMember(\"subtract\");\n    Value multiplyFunction =         ctx.getBindings(\"js\").getMember(\"multiply\");\n    Value helloMathMessage =        ctx.getBindings(\"js\").getMember(\"helloMathMessage\");\n    System.out.println(\"Binding Keys :\" +        ctx.getBindings(\"js\").getMemberKeys());\n```", "```java\n    Integer addResult = addFunction.execute(30, 20).asInt();\n    Integer subtractResult = subtractFunction.execute(30,            20).asInt();\n    Integer multiplyResult = multiplyFunction.execute(30,            20).asInt();\n    System.out.println((\"Add Result \"+ addResult+ \"        Subtract Result \"+ subtractResult+ \" Multiply         Result \"+ multiplyResult));\n    System.out.println(\"helloMathMessage : \" +        helloMathMessage.toString());\n}\n```", "```java\n    Thread thread = new Thread(new Runnable() {\n        @Override\n        public void run() {\n            while (true) {\n                Integer addResult =                     addFunction.execute(30, 20).asInt();\n                Integer subtractResult =                    subtractFunction.execute(30, 20).asInt();\n                Integer multiplyResult =                    multiplyFunction.execute(30, 20).asInt();\n            }\n        }\n    });\n    thread.start();\n```", "```java\n    while (true) {\n        Integer addResult =             addFunction.execute(30, 20).asInt();\n        Integer subtractResult =            subtractFunction.execute(30, 20).asInt();\n        Integer multiplyResult =            multiplyFunction.execute(30, 20).asInt();\n        }\n        }  catch (Exception e) {\n            System.out.println(\"Exception : \" );\n            e.printStackTrace();\n        }\n    }\n```", "```java\n$ java MathJSCallerThreaded (docker-desktop/bozo-book-library-dev)\nBinding Keys :[helloMathMessage, add, subtract, multiply]\njava.lang.IllegalStateException: Multi threaded access requested by thread Thread[Thread-3,5,main] but is not allowed for language(s) js.\n…..\n```", "```java\n    public void runMathJS() {\n        Context ctx = Context.create(\"js\");\n        try {\n            File mathJSFile = new File(\"./math.js\");\n            ctx.eval(Source.newBuilder                (\"js\", mathJSFile).build());\n            Value addFunction =               ctx.getBindings(\"js\").getMember(\"add\");\n            Value subtractFunction =               ctx.getBindings(\"js\").getMember(\"subtract\");\n            Value multiplyFunction =               ctx.getBindings(\"js\").getMember(\"multiply\");\n            Value helloMathMessage =               ctx.getBindings(\"js\")               .getMember(\"helloMathMessage\");\n            System.out.println(\"Binding Keys :\" + ctx.            getBindings(\"js\").getMemberKeys());\n            while (true) {\n                Integer addResult =                     addFunction.execute(30, 20).asInt();\n                Integer subtractResult =                    subtractFunction.execute(30, 20).asInt();\n                Integer multiplyResult =                    multiplyFunction.execute(30, 20).asInt();\n}\n```", "```java\nThread thread = new Thread(new Runnable() {\n    @Override\n    public void run() {\n        try {\n            Context ctx = Context.create(\"js\");\n            ctx.eval(Source.newBuilder(\"js\",                mathJSFile).build());\n            Value addFunction =               ctx.getBindings(\"js\").getMember(\"add\");\n            Value subtractFunction =               ctx.getBindings(\"js\").getMember(\"subtract\");\n            Value multiplyFunction =               ctx.getBindings(\"js\").getMember(\"multiply\");\n            Value helloMathMessage =               ctx.getBindings(\"js\")               .getMember(\"helloMathMessage\");\n            while (true) {\n                Integer addResult =                addFunction.execute(30, 20).asInt();\n                Integer subtractResult =                  subtractFunction.execute(30, 20).asInt();\n                Integer multiplyResult =                  multiplyFunction.execute(30, 20).asInt();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n});\nthread.start();\n```", "```java\nThread thread = new Thread(new Runnable() {\n    @Override\n    public void run() {\n        try {\n            // Solution 2\n            while (true) {\n                synchronized(ctx) {\n                Integer addResult =                     addFunction.execute(30, 20).asInt();\n                Integer subtractResult =                    subtractFunction.execute(30, 20).asInt();\n                Integer multiplyResult =                    multiplyFunction.execute(30, 20).asInt();\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n});\nthread.start();\n```", "```java\nwhile (true) {\n    synchronized(ctx) {\n        Integer addResult =             addFunction.execute(30, 20).asInt();\n        Integer subtractResult =            subtractFunction.execute(30, 20).asInt();\n        Integer multiplyResult =            multiplyFunction.execute(30, 20).asInt();\n    }\n}\n```"]