["```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsd:schema \n            targetNamespace=\"http://www.books.org\"\n\n            elementFormDefault=\"qualified\">\n    <xsd:element name=\"book_store\">\n        <xsd:complexType>\n            <xsd:sequence>\n                <xsd:element name=\"book\" type=\"book_type\" \n                             minOccurs=\"1\" maxOccurs=\"unbounded\"/>\n            </xsd:sequence>\n        </xsd:complexType>\n    </xsd:element>\n    <xsd:complexType name=\"book_type\">\n         <xsd:sequence>\n             <xsd:element name=\"title\" type=\"xsd:string\"/>\n             <xsd:element name=\"author\" type=\"xsd:string\"/>\n             <xsd:element name=\"date\" minOccurs=\"0\" type=\"xsd:string\"/>\n             <xsd:element name=\"publisher\" type=\"xsd:string\"/>\n         </xsd:sequence>\n         <xsd:attribute name=\"ISBN\" type=\"xsd:string\"/>\n     </xsd:complexType>\n</xsd:schema>\n```", "```java\n<book ISBN=\"9781933499185\">\n  <title>Madame Bovary</title>\n  <author>Gustave Flaubert</author>\n  <date>1857</date>\n  <publisher>Fonolibro</publisher>\n</book>\n```", "```java\n> mkdir wssample\n> cd wssample\n> sbt\n> set name:=\"wssample\"\n> session save\n> \n\n```", "```java\naddSbtPlugin(\"com.typesafe.sbteclipse\" % \"sbteclipse-plugin\" % \"2.4.0\")\n\naddSbtPlugin(\"org.scalaxb\" % \"sbt-scalaxb\" % \"1.1.2\")\n\nresolvers += Resolver.sonatypeRepo(\"public\")\n```", "```java\nimport ScalaxbKeys._\n\nname:=\"wssample\"\n\nscalaVersion:=\"2.10.2\"\n\nscalaxbSettings\n\nlibraryDependencies += \"net.databinder.dispatch\" %% \"dispatch-core\" % \"0.11.0\"\n\nlibraryDependencies += \"org.scalatest\" %% \"scalatest\" % \"2.0.M7\" % \"test\"\n\nsourceGenerators in Compile <+= scalaxb in Compile\n\npackageName in scalaxb in Compile := \"se.wssample\"\n```", "```java\npackage se.wssample\n\ncase class Book_store(book: se.wssample.Book_type*)\n\ncase class Book_type(title: String,\n  author: String,\n  date: Option[String] = None,\n  publisher: String,\n  ISBN: Option[String] = None)\n```", "```java\npackage se.wssample\n\nimport org.scalatest._\nimport org.scalatest.matchers.Matchers\n\nclass BookstoreSpec extends FlatSpec with Matchers {\n  \"This bookstore\" should \"contain 3 books\" in {\n\n    val bookstore =\n    <book_store >\n        <book ISBN=\"9781933499185\">\n            <title>Madame Bovary</title>\n            <author>Gustave Flaubert</author>\n            <date>1857</date>\n            <publisher>Fonolibro</publisher>\n        </book>\n        <book ISBN=\"9782070411207\">\n            <title>Le malade imaginaire</title>\n            <author>Moliere</author>\n            <date>1673</date>\n            <publisher>Gallimard</publisher>\n        </book>\n        <book ISBN=\"1475066511\">\n            <title>Fables</title>\n            <author>Jean de La Fontaine</author>\n            <date>1678</date>\n            <publisher>CreateSpace</publisher>\n        </book>\n    </book_store>\n\n    val bookstoreInstance = scalaxb.fromXML[Book_store](bookstore)\n\n    println(\"bookstoreInstance: \"+ bookstoreInstance.book)\n\n    bookstoreInstance.book.length should be === 3\n  }\n}\n```", "```java\nbookstoreInstance: List(Book_type(Madame Bovary,Gustave Flaubert,Some(1857),Fonolibro,Some(9781933499185)), Book_type(Le malade imaginaire,Molière,Some(1673),Gallimard,Some(9782070411207)), Book_type(Fables,Jean de La Fontaine,Some(1678),CreateSpace,Some(1475066511)))\n[info] BookstoreSpec:\n[info] This bookstore\n[info] - should contain 3 books\n[info] Passed: : Total 1, Failed 0, Errors 0, Passed 1, Skipped 0\n[success] Total time: 4 s\n\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<wsdl:definitions … // headers > \n  <wsdl:types>\n    <s:schema elementFormDefault=\"qualified\" targetNamespace=\"http://www.webserviceX.NET/\">\n      <s:element name=\"GetQuote\">\n        <s:complexType>\n          <s:sequence>\n            <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"symbol\" type=\"s:string\" />\n          </s:sequence>\n        </s:complexType>\n      </s:element>\n      <s:element name=\"GetQuoteResponse\">\n        <s:complexType>\n          <s:sequence>\n            <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"GetQuoteResult\" type=\"s:string\" />\n          </s:sequence>\n        </s:complexType>\n      </s:element>\n      <s:element name=\"string\" nillable=\"true\" type=\"s:string\" />\n    </s:schema>\n  </wsdl:types>\n  <wsdl:message name=\"GetQuoteSoapIn\">\n    <wsdl:part name=\"parameters\" element=\"tns:GetQuote\" />\n  </wsdl:message>\n  <wsdl:message name=\"GetQuoteSoapOut\">\n    <wsdl:part name=\"parameters\" element=\"tns:GetQuoteResponse\" />\n  </wsdl:message>\n  ...\n```", "```java\n  <wsdl:portType name=\"StockQuoteSoap\">\n    <wsdl:operation name=\"GetQuote\">\n      <wsdl:documentation >Get Stock quote for a company Symbol</wsdl:documentation>\n      <wsdl:input message=\"tns:GetQuoteSoapIn\" />\n      <wsdl:output message=\"tns:GetQuoteSoapOut\" />\n    </wsdl:operation>\n  </wsdl:portType>\n  <wsdl:portType name=\"StockQuoteHttpGet\">\n    <wsdl:operation name=\"GetQuote\">\n      <wsdl:documentation >Get Stock quote for a company Symbol</wsdl:documentation>\n      <wsdl:input message=\"tns:GetQuoteHttpGetIn\" />\n      <wsdl:output message=\"tns:GetQuoteHttpGetOut\" />\n    </wsdl:operation>\n  </wsdl:portType>\n\n  <wsdl:binding name=\"StockQuoteSoap12\" type=\"tns:StockQuoteSoap\">\n    <soap12:binding transport=\"http://schemas.xmlsoap.org/soap/http\" />\n    <wsdl:operation name=\"GetQuote\">\n      <soap12:operation soapAction=\"http://www.webserviceX.NET/GetQuote\" style=\"document\" />\n      <wsdl:input>\n        <soap12:body use=\"literal\" />\n      </wsdl:input>\n      <wsdl:output>\n        <soap12:body use=\"literal\" />\n      </wsdl:output>\n    </wsdl:operation>\n  </wsdl:binding>\n  ...\n```", "```java\n  <wsdl:service name=\"StockQuote\">\n    …\n    <wsdl:port name=\"StockQuoteSoap12\" binding=\"tns:StockQuoteSoap12\">\n      <soap12:address location=\"http://www.webservicex.net/stockquote.asmx\" />\n    </wsdl:port>\n    …\n  </wsdl:service>\n</wsdl:definitions>\n```", "```java\n// Generated by <a href=\"http://scalaxb.org/\">scalaxb</a>.\npackage se.wssample\n\ntrait StockQuoteSoap {\n  def getQuote(symbol: Option[String]): Either[scalaxb.Fault[Any], se.wssample.GetQuoteResponse]\n}\n```", "```java\npackage se.wssample\n\nimport org.scalatest._\nimport org.scalatest.matchers.Matchers\nimport scala.xml.{ XML, PrettyPrinter }\n\nclass StockQuoteSpec extends FlatSpec with Matchers {\n  \"Getting a quote for Apple\" should \"give appropriate data\" in {\n\n    val pp = new PrettyPrinter(80, 2)\n\n    val service = \n      (new se.wssample.StockQuoteSoap12Bindings \n        with scalaxb.SoapClients \n        with scalaxb.DispatchHttpClients {}).service\n\n    val stockquote = service.getQuote(Some(\"AAPL\"))\n\n    stockquote match {\n      case Left(err) => fail(\"Problem with stockquote invocation\")\n      case Right(success) => success.GetQuoteResult match {\n        case None => println(\"No info returned for that quote\")\n        case Some(x) => {\n          println(\"Stockquote: \"+pp.format(XML.loadString(x)))\n          x should startWith (\"<StockQuotes><Stock><Symbol>AAPL</Symbol>\")\n        }\n      }\n    }\n  }\n}\n```", "```java\n> sbt\n> test-only se.wssample.StockQuoteSpec\nStockquote: <StockQuotes>\n <Stock>\n <Symbol>AAPL</Symbol>\n <Last>553.13</Last>\n <Date>1/2/2014</Date>\n <Time>4:00pm</Time>\n <Change>-7.89</Change>\n <Open>555.68</Open>\n <High>557.03</High>\n <Low>552.021</Low>\n <Volume>8388321</Volume>\n <MktCap>497.7B</MktCap>\n <PreviousClose>561.02</PreviousClose>\n <PercentageChange>-1.41%</PercentageChange>\n <AnnRange>385.10 - 575.14</AnnRange>\n <Earns>39.75</Earns>\n <P-E>14.11</P-E>\n <Name>Apple Inc.</Name>\n </Stock>\n</StockQuotes>\n[info] StockQuoteSpec:\n[info] Getting a quote for Apple\n[info] - should give appropriate data\n[info] Passed: : Total 1, Failed 0, Errors 0, Passed 1, Skipped 0\n[success] Total time: 3 s\n\n```", "```java\nscala> val books =\n <Library>\n <book title=\"Programming in Scala\" quantity=\"15\" price=\"30.00\" />\n <book title=\"Scala for Java Developers\" quantity=\"10\" price=\"25.50\" />\n </Library>\nbooks: scala.xml.Elem = \n<Library>\n <book title=\"Programming in Scala\" quantity=\"15\" price=\"30.00\"/>\n <book title=\"Scala for Java Developers\" quantity=\"10\" price=\"25.50\"/>\n</Library>\n\n```", "```java\nscala> import scala.xml._\nscala> val sameBooks = XML.loadString(\"\"\"\n <Library>\n <book title=\"Programming in Scala\" quantity=\"15\" price=\"30.00\"/>\n <book title=\"Scala for Java Developers\" quantity=\"10\" price=\"25.50\"/>\n </Library>\n \"\"\")\nsameBooks: scala.xml.Elem = \n<Library>\n<book price=\"30.00\" quantity=\"15\" title=\"Programming in Scala\"/>\n<book price=\"25.50\" quantity=\"10\" title=\"Scala for Java Developers\"/>\n</Library>\n\n```", "```java\nscala> val total = (for {\n book <- books \\ \"book\"\n price = ( book \\ \"@price\").text.toDouble\n quantity = ( book \\ \"@quantity\").text.toInt\n } yield price * quantity).sum\ntotal: Double = 705.0\n\n```", "```java\nscala> val books = \n <Library>\n { List(\"Programming in Scala,15,30.00\",\"Scala for Java Developers,10,25.50\") map { row => row split \",\" } map { b => <book title={b(0)} quantity={b(1)} price={b(2)} /> }}\n </Library>\nbooks: scala.xml.Elem = \n<Library>\n <book title=\"Programming in Scala\" quantity=\"15\" price=\"30.00\"/><book title=\"Scala for Java Developers\" quantity=\"10\" price=\"25.50\"/>\n</Library>\n\n```", "```java\nscala> import scala.util.parsing.json._\nimport scala.util.parsing.json._\nscala> val result = JSON.parseFull(\"\"\"\n {\n \"Library\": {\n \"book\": [\n {\n \"title\": \"Scala for Java Developers\",\n \"quantity\": 10\n },\n {\n \"title\": \"Programming Scala\",\n \"quantity\": 20\n }\n ]\n }\n }\n \"\"\")\nresult: Option[Any] = Some(Map(Library -> Map(book -> List(Map(title -> Scala for Java Developers, quantity -> 10.0), Map(title -> Programming Scala, quantity -> 20.0)))))\n\n```", "```java\ncase class Book(title:String, quantity:Double)\ncase class Library(book:List[Book])\ncase class R00tJsonObject(Library:Library)\n\n```", "```java\nscala> case class Book(title:String, quantity:Double)\ndefined class Book\nscala> val book1 = Book(\"Scala for Java Developers\",10)\nbook1: Book = Book(Scala for Java Developers,10.0)\nscala> val book2 = Book(\"Effective Java\",12)\nbook2: Book = Book(Effective Java,12.0)\nscala> val books = List(book1,book2)\nbooks: List[Book] = List(Book(Scala for Java Developers,10.0), Book(Effective Java,12.0))\n\n```", "```java\nscala> def bookAboutScala(book:Book) = book match {\n case Book(a,_) if a contains \"Scala\" => Some(book)\n case _ => None\n }\nbookAboutScala: (book: Book)Option[Book]\n\n```", "```java\nscala> bookAboutScala(book1)\nres0: Option[Book] = Some(Book(Scala for Java Developers,10.0))\nscala> bookAboutScala(book2)\nres1: Option[Book] = None\n\n```", "```java\nscala> val regex = \"\"\"(.*)(Scala|Java)(.*)\"\"\".r\nregex: scala.util.matching.Regex = (.*)(Scala|Java)(.*)\n\n```", "```java\nscala> def whatIs(that:Any) = that match {\n case Book(t,_) if (t contains \"Scala\") =>\n s\"${t} is a book about Scala\"\n case Book(_,_) => s\"$that is a book \"\n case regex(_,word,_) => s\"$that is something about ${word}\"\n case head::tail => s\"$that is a list of books\"\n case _ => \"You tell me !\"\n }\nwhatIs: (that: Any)String\n\n```", "```java\nscala> whatIs(book1)\nres2: String = Scala for Java Developers is a book about Scala\nscala> whatIs(book2)\nres3: String = \"Book(Effective Java,12.0) is a book \"\nscala> whatIs(books)\nres4: String = List(Book(Scala for Java Developers,10.0), Book(Effective Java,12.0)) is a list of books\nscala> whatIs(\"Scala pattern matching\")\nres5: String = Scala pattern matching is something about Scala\nscala> whatIs(\"Love\")\nres6: String = You tell me !\n\n```", "```java\nlibraryDependencies += \"com.typesafe.play\" %% \"play-json\" % \"2.2.1\"\n\n```", "```java\nscala> import play.api.libs.json._\nimport play.api.libs.json._ \nscala> val books = Json.parse(\"\"\"\n {\n \"Library\": {\n \"book\": [\n {\n \"title\": \"Scala for Java Developers\",\n \"quantity\": 10\n },\n {\n \"title\": \"Programming Scala\",\n \"quantity\": 20\n }\n ]\n }\n }\n \"\"\")\nbooks: play.api.libs.json.JsValue = {\"Library\":{\"book\":[{\"title\":\"Scala for Java Developers\",\"quantity\":10},{\"title\":\"Programming Scala\",\"quantity\":20}]}}\n\n```", "```java\n    scala> val sfjd = JsString(\"Scala for Java Developers\")\n    sfjd: play.api.libs.json.JsString = \"Scala for Java Developers\"\n    scala> val qty = JsNumber(10)\n    qty: play.api.libs.json.JsNumber = 10\n\n    ```", "```java\n    scala> val book1 = JsObject(Seq(\"title\"->sfjd,\"quantity\"->qty))\n    book1: play.api.libs.json.JsObject = {\"title\":\"Scala for Java Developers\",\"quantity\":10}\n    scala> val book2 = JsObject(Seq(\"title\"->JsString(\"Programming in Scala\"),\"quantity\"->JsNumber(15)))\n    book2: play.api.libs.json.JsObject = {\"title\":\"Programming in Scala\",\"quantity\":15}\n\n    ```", "```java\n    scala> val array = \n     JsArray(Seq(JsString(\"a\"),JsNumber(2),JsBoolean(true)))\n    array: play.api.libs.json.JsArray = [\"a\",2,true]\n\n    ```", "```java\nscala> val books = JsObject(Seq(\n \"books\" -> JsArray(Seq(book1,book2))\n ))\nbooks: play.api.libs.json.JsObject = {\"books\":[{\"title\":\"Scala for Java Developers\",\"quantity\":10},{\"title\":\"Programming in Scala\",\"quantity\":15}]}\n\n```", "```java\nscala> val booksAsJson = Json.obj(\n \"books\" -> Json.arr(\n Json.obj(\n \"title\" -> \"Scala for Java Developers\",\n \"quantity\" -> 10 \n ),\n Json.obj(\n \"title\" -> \"Programming in Scala\",\n \"quantity\" -> 15 \n )\n )\n )\nbooksAsJson: play.api.libs.json.JsObject = {\"books\":[{\"title\":\"Scala for Java Developers\",\"quantity\":10},{\"title\":\"Programming in Scala\",\"quantity\":15}]}\n\n```", "```java\nscala> val booksAsString = Json.stringify(booksAsJson)\nbooksAsString: String = {\"books\":[{\"title\":\"Scala for Java Developers\",\"quantity\":10},{\"title\":\"Programming in Scala\",\"quantity\":15}]}\n\n```", "```java\nscala> val titles = booksAsJson \\ \"books\" \\\\ \"title\"\ntitles: Seq[play.api.libs.json.JsValue] = ArrayBuffer(\"Scala for Java Developers\", \"Programming in Scala\")\n\n```", "```java\nscala> titles.toList.map(x=>x.as[String])\nres8: List[String] = List(Scala for Java Developers, Programming in Scala)\n\n```", "```java\nlibraryDependencies += \"net.databinder.dispatch\" %% \"dispatch-core\" % \"0.11.0\"\n\n```", "```java\nscala> import dispatch._\nimport dispatch._\nscala> import Defaults._\nimport Defaults._\nscala> val request = url(\"https://itunes.apple.com/search\")\nrequest: dispatch.Req = Req(<function1>)\n\n```", "```java\nscala> val params = Map(\"term\" -> \"angry birds\", \"country\" -> \"se\", \"entity\" -> \"software\")\nparams: scala.collection.immutable.Map[String,String] = Map(term -> angry birds, country -> se, entity -> software)\nscala> val result = Http( request <<? params OK as.String).either\nresult: dispatch.Future[Either[Throwable,String]] = scala.concurrent.impl.Promise$DefaultPromise@7a707f7c\n\n```", "```java\nscala> val response = result() match {\n case Right(content)=> \"Answer: \"+ content\n case Left(StatusCode(404))=> \"404 Not Found\"\n case Left(x) => x.printStackTrace()\n }\nresponse: Any = \n\"Answer: \n\n{\n \"resultCount\":50,\n \"results\": [\n{\"kind\":\"software\", \"features\":[\"gameCenter\"], \n\"supportedDevices\":[\"iPhone5s\", \"iPad23G\", \"iPadThirdGen\", \"iPodTouchThirdGen\", \"iPadFourthGen4G\", \"iPhone4S\", \"iPad3G\", \"iPhone5\", \"iPadWifi\", \"iPhone5c\", \"iPad2Wifi\", \"iPadMini\", \"iPadThirdGen4G\", \"iPodTouchourthGen\", \"iPhone4\", \"iPadFourthGen\", \"iPhone-3GS\", \"iPodTouchFifthGen\", \"iPadMini4G\"], \"isGameCenterEnabled\":true, \"artistViewUrl\":\"https://itunes.apple.com/se/artist/rovio-entertainment-ltd/id298910979?uo=4\", \"artworkUrl60\":\"http://a336.phobos.apple.com/us/r30/Purple2/v4/6c/20/98/6c2098f0-f572-46bb-f7bd-e4528fe31db8/Icon.png\", \n\"screenshotUrls\":[\"http://a2.mzstatic.com/eu/r30/Purple/v4/c0/eb/59/c0eb597b-a3d6-c9af-32a7-f107994a595c/screen1136x1136.jpeg\", \"http://a4.mzst... \n\n```", "```java\npackage controllers\n\nimport play.api.mvc._\nimport play.api.libs.json._\nimport views._\n\nobject MockMarketplaceController extends Controller {\n\n  case class AppStoreSearch(artistName: String, artistLinkUrl: String)\n  implicit val appStoreSearchFormat = Json.format[AppStoreSearch]\n\n  def mockSearch() = Action {\n    val result = List(AppStoreSearch(\"Van Gogh\", \" http://www.vangoghmuseum.nl/\"), AppStoreSearch(\"Monet\", \" http://www.claudemonetgallery.org \"))\n    Ok(Json.toJson(result))\n  }\n}\n```", "```java\nGET /mocksearch  controllers.MockMarketplaceController.mockSearch\n```", "```java\nscala> import play.api.libs.ws._\nimport play.api.libs.ws._\nscala> import scala.concurrent.Future\nimport scala.concurrent.Future\n\n```", "```java\nscala> implicit val context = scala.concurrent.ExecutionContext.Implicits.global\ncontext: scala.concurrent.ExecutionContextExecutor = scala.concurrent.impl.ExecutionContextImpl@44d8bd53\n\n```", "```java\nhttp://freegeoip.net/{format}/{site}\n```", "```java\nscala> val url = \"http://freegeoip.net/json/www.google.com\"\nurl: String = http://freegeoip.net/json/www.google.com\nscala> val futureResult: Future[String] = WS.url(url).get().map {\n response =>\n (response.json \\ \"region_name\").as[String]\n }\nfutureResult: scala.concurrent.Future[String] = scala.concurrent.impl.Promise$DefaultPromise@e4bc0ba\nscala> futureResult.onComplete(println)\nSuccess(California)\n\n```", "```java\n{\n    \"ip\":\"173.194.64.106\",\n    \"country_code\":\"US\",\n    \"country_name\":\"United States\",\n    \"region_code\":\"CA\",\n    \"region_name\":\"California\",\n    \"city\":\"Mountain View\",\n    \"zipcode\":\"94043\",\n    \"latitude\":37.4192,\n    \"longitude\":-122.0574,\n    \"metro_code\":\"807\",\n    \"areacode\":\"650\"\n}\n```", "```java\nscala> case class Location(latitude:Double, longitude:Double, region:String, country:String)\ndefined class Location\n\n```", "```java\nscala> import play.api.libs.json._\nimport play.api.libs.json._\nscala> import play.api.libs.functional.syntax._\nimport play.api.libs.functional.syntax._\nscala> implicit val locationReads: Reads[Location] = (\n (__ \\ \"latitude\").read[Double] and\n (__ \\ \"longitude\").read[Double] and\n (__ \\ \"region_name\").read[String] and\n (__ \\ \"country\").read[String]\n )(Location.apply _)\nlocationReads: play.api.libs.json.Reads[Location] = play.api.libs.json.Reads$$anon$8@4a13875b\nlocationReads: play.api.libs.json.Reads[Location] = play.api.libs.json.Reads$$anon$8@5430c881\n\n```", "```java\nscala> val futureResult: Future[JsResult[Location]] = WS.url(url).get().map {\n response => response.json.validate[Location]\n }\nfutureResult: scala.concurrent.Future[play.api.libs.json.JsResult[Location]] = scala.concurrent.impl.Promise$DefaultPromise@3168c842\n\nscala> futureResult.onComplete(println)\nSuccess(JsError(List((/country,List(ValidationError(error.path.missing,WrappedArray()))))))\n\n```", "```java\nscala> implicit val locationReads: Reads[Location] = (\n (__ \\ \"latitude\").read[Double] and\n (__ \\ \"longitude\").read[Double] and\n (__ \\ \"region_name\").read[String] and\n (__ \\ \"country_name\").read[String]\n )(Location.apply _)\nlocationReads: play.api.libs.json.Reads[Location] = play.api.libs.json.Reads$$anon$8@70aab9ed\nscala> val futureResult: Future[JsResult[Location]] = WS.url(url).get().map {\n response => response.json.validate[Location]\n }\nfutureResult: scala.concurrent.Future[play.api.libs.json.JsResult[Location]] = scala.concurrent.impl.Promise$DefaultPromise@361c5860\nscala> futureResult.onComplete(println)\nscala> Success(JsSuccess(Location(37.4192,-122.0574,California,United States),))\n\n```", "```java\npackage controllers\n\nimport play.api._\nimport play.api.mvc._\nimport play.api.libs.ws.WS\nimport scala.concurrent.ExecutionContext.Implicits.global\nimport play.api.libs.json._\nimport play.api.libs.functional.syntax._\nimport scala.concurrent.Future\nimport views._\nimport models._\n\nobject MarketplaceController extends Controller {\n\n  val pageSize = 10\n  val appStoreUrl = \"https://itunes.apple.com/search\"\n\n  def list(page: Int, orderBy: Int, filter: String = \"*\") = Action.async { implicit request =>\n    val futureWSResponse =\n      WS.url(appStoreUrl)\n        .withQueryString(\"term\" -> filter, \"country\" -> \"se\", \"entity\" -> \"software\")\n        .get()\n\n      futureWSResponse map { resp =>\n        val json = resp.json\n        val jsResult = json.validate[AppResult]\n        jsResult.map {\n          case AppResult(count, res) =>\n            Ok(html.marketplace.list(\n              Page(res,\n                page,\n                offset = pageSize * page,\n                count),\n              orderBy,\n              filter))\n        }.recoverTotal {\n          e => BadRequest(\"Detected error:\" + JsError.toFlatJson(e))\n        }\n      } \n  }\n}\n```", "```java\npackage models\n\nimport play.api.libs.json._\nimport play.api.libs.functional.syntax._\n\ncase class AppInfo(id: Long, name: String, author: String, authorUrl:String,\n    category: String, picture: String, formattedPrice: String, price: Double)\nobject AppInfo {\n  implicit val appInfoFormat = (\n    (__ \\ \"trackId\").format[Long] and\n    (__ \\ \"trackName\").format[String] and\n    (__ \\ \"artistName\").format[String] and\n    (__ \\ \"artistViewUrl\").format[String] and\n    (__ \\ \"primaryGenreName\").format[String] and\n    (__ \\ \"artworkUrl60\").format[String] and\n    (__ \\ \"formattedPrice\").format[String] and\n    (__ \\ \"price\").format[Double])(AppInfo.apply, unlift(AppInfo.unapply))\n}\n\ncase class AppResult(resultCount: Int, results: Array[AppInfo])\nobject AppResult {\n  implicit val appResultFormat = (\n    (__ \\ \"resultCount\").format[Int] and\n    (__ \\\\ \"results\").format[Array[AppInfo]])(AppResult.apply, unlift(AppResult.unapply))\n}\n```", "```java\nGET /marketplace  controllers.MarketplaceController.list(p:Int ?= 0, s:Int ?= 2, f ?= \"*\")\n```", "```java\n@(currentPage: Page[AppInfo], currentOrderBy: Int, currentFilter:\nString)(implicit flash: play.api.mvc.Flash)\n...\n@main(\"Welcome to Play 2.0\") {\n\n<h1>@Messages(\"marketplace.list.title\", currentPage.total)</h1>\n\n@flash.get(\"success\").map { message =>\n<div class=\"alert-message warning\">\n  <strong>Done!</strong> @message\n</div>\n}\n<div id=\"actions\">\n\n  @helper.form(action=routes.MarketplaceController.list()) { <input\n    type=\"search\" id=\"searchbox\" name=\"f\" value=\"@currentFilter\"\n    placeholder=\"Filter by name...\"> <input type=\"submit\"\n    id=\"searchsubmit\" value=\"Filter by name\" class=\"btn primary\">\n  }\n</div>\n...\n```", "```java\n...\n@Option(currentPage.items).filterNot(_.isEmpty).map { entities =>\n<table class=\"computers zebra-striped\">\n  <thead>\n    <tr>\n      @header(2, \"Picture\") \n      @header(4, \"Name\") \n      @header(5, \"Author\")\n      @header(6, \"IPO\")     \n      @header(7, \"Category\") \n      @header(8, \"Price\")\n    </tr>\n  </thead>\n  <tbody>\n    @entities.map{ entity =>\n    <tr>\n      <td>\n        <img\n         src=\"img/@entity.picture\"\n         width=\"60\" height=\"60\" alt=\"image description\" />\n      </td>\n      <td>@entity.name</td>\n      <td><a href=\"@entity.authorUrl\" class=\"new-btn btn-back\">@entity.author</a></td>\n      <td>@entity.category</td>\n      <td>@entity.formattedPrice</td>\n    </tr>\n    }\n  </tbody>\n</table>\n...\n```", "```java\n...\n<div id=\"pagination\" class=\"pagination\">\n  <ul>\n    @currentPage.prev.map { page =>\n    <li class=\"prev\"><a href=\"@link(page)\">&larr; Previous</a></li>\n    }.getOrElse {\n    <li class=\"prev disabled\"><a>&larr; Previous</a></li> }\n    <li class=\"current\"><a>Displaying @(currentPage.offset + 1)\n        to @(currentPage.offset + entities.size) of @currentPage.total</a></li>\n    @currentPage.next.map { page =>\n    <li class=\"next\"><a href=\"@link(page)\">Next &rarr;</a></li>\n    }.getOrElse {\n    <li class=\"next disabled\"><a>Next &rarr;</a></li> }\n  </ul>\n</div>\n}.getOrElse {\n<div class=\"well\">\n  <em>Nothing to display</em>\n</div>\n} }\n```"]