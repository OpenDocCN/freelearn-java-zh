["```java\npublic int convertToDecimal(String binary) {\n  int conversion = 1;\n  int result = 0;\n  for (int i = 1; i <= binary.length(); i++) {\n    if (binary.charAt(binary.length() - i) == '1')\n      result += conversion;\n    conversion *= 2;\n  }\n  return result;\n} \n```", "```java\n public int convertToDecimal (String octal) \n```", "```java\ngradlew test --tests com.packt.datastructuresandalg.\nlesson1.activity.octaltodecimal* \n```", "```java\npublic double minimumDistance(List<Point> allPlanes) {\n  double minDistance = Double.MAX_VALUE;\n  for (Point p1 : allPlanes) {\n    for (Point p2 : allPlanes) {\n      double d = p1.distanceTo(p2);\n      if (d != 0 && d < minDistance) minDistance = d;\n    }\n  }\n  return minDistance;\n} \n```", "```java\npublic int search(String strToMatch, String[] strArray) {\n  for (int i = 0; i < strArray.length; i++) {\n    if (strArray[i].equals(strToMatch)) {\n      return i;\n    }\n  }\n  return -1;\n} \n```", "```java\npublic boolean containsDuplicates(int[] numbers) {\n  for (int i=0; i<numbers.length; i++) {\n    for (int j=0; j<numbers.length; j++) {\n      if (i != j && numbers[i] == numbers[j]) return true;\n    }\n  }\n  return false;\n}  \n```", "```java\npublic int countChars(char c, String str) {\n  int count = 0;\n  for (int i = 0; i < str.length(); i++) {\n    if (str.charAt(i) == c) count++;\n  }\n  return count;\n} \n```", "```java\npublic List<Integer> intersection(int[] a, int[] b) {\n  List<Integer> result = new ArrayList<>(a.length);\n  for (int x : a) {\n    for (int y : b) {\n      if (x == y) result.add(x);\n    }\n  }\n  return result;\n} \n```", "```java\npublic boolean binarySearch(int x, int[] sortedNumbers) {\n  int end = sortedNumbers.length - 1; \n  int start = 0;\n  while (start <= end) {\n    int mid = (end - start) / 2 + start;\n    if (sortedNumbers[mid] == x) return true;\n    else if (sortedNumbers[mid] > x) end = mid - 1;\n    else start = mid + 1;\n  }\n  return false;\n} \n```", "```java\npublic List<Long> primeFactors(long x) {\n  ArrayList<Long> result = new ArrayList<>();\n  long factor = 2;\n  while (x > 1) {\n    if (x % factor == 0) {\n      result.add(factor);\n      x /= factor;\n    } else {\n      factor += 1;\n    }\n  }\n  return result;\n}  \n```", "```java\nprivate double circleCircumference(int radius) {\n  return 2.0 * Math.PI * radius;\n}  \n```", "```java\npublic List<Integer> intersection(int[] a, int[] b)  \n```", "```java\npublic List<Integer> intersectionFast(int[] a, int[] b)  \n```", "```java\ngradlew test --tests com.packt.datastructuresandalg.lesson1.activity.improveintersection* \n```", "```java\npublic void mergeSort(int[] input) {\n  Arrays.sort(input);\n}  \n```"]