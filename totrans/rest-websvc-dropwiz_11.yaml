- en: Appendix A. Testing a Dropwizard Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our application is ready. However, if we respect its stability, we have to make
    sure that we at least have its most important aspects covered by unit tests. You
    are probably familiar with unit testing and JUnit, but Dropwizard takes this a
    little bit further.
  prefs: []
  type: TYPE_NORMAL
- en: The `dropwizard-testing` module includes everything you need, such as JUnit
    and FEST assertions, in order to create tests for your application, right from
    small unit tests to bigger, full-fledged tests.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a complete test for the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's create a complete, fully automated integration test for our application.
    This test should start our application as we would normally do for a manual test,
    and perform some HTTP requests to the application's services which check how the
    application is responding.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When we first created our project using Maven in [Chapter 2](ch02.html "Chapter 2. Creating
    a Dropwizard Application"), *Creating a Dropwizard Application*, a JUnit dependency
    had been automatically added in our `pom.xml` file. We will replace it with Dropwizard''s
    testing module, so let''s remove it. Locate and delete the following dependency
    from the `pom.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We will need the `dropwizard-testing` and `hamcrest-all` modules, so include
    them both in your `pom.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Your project already has a test folder. During the generation of the default
    artifact, Maven created both `src/main/java` (where our application''s source
    code lies) and `src/test/java` as a placeholder for our unit tests. Let''s see
    what we need to place there in order to build our tests:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new test class, `ApplicationTest`, within the `src/test/java/com/dwbook/phonebook`
    folder, extending the `ResourceTest` base class. This class needs to have two
    methods; `#setUp()`, in which we will prepare our mocked objects and add the required
    resources and providers to the memory inJersey server, and `#createAndRetrieveContact()`,
    where we will perform the actual test:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Our tests will run every time we issue the `mvn` package command, but they
    can also be executed on demand with the `test` command of `mvn`. For now, let''s
    run the test on a clean application environment by issuing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You will see that Maven will clean our target directory, start the application,
    and then run our tests successfully.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/9530OS_App.A_01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Firstly, we defined our test data; that is, a `Contact` instance that we intend
    to create.
  prefs: []
  type: TYPE_NORMAL
- en: We initialized a `DropwizardAppRule<PhonebookConfiguration>` instance, which
    is described as a JUnit rule for starting and stopping your application at the
    start and end of a test class, allowing the test framework to start the application
    as you would normally do in order to perform a manual test. For this, we need
    to specify not only the main class of our application, but also the configuration
    file to be used.
  prefs: []
  type: TYPE_NORMAL
- en: Within the `#setUp()` method, we instantiated a REST client to help us with
    the HTTP requests to our application and also applied the necessary HTTP basic
    authentication filter since our web services require authentication.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `#createAndRetrieveContact()` method wraps the actual test. Using the REST
    client, we are performing an HTTP POST request in order to create a new contact.
    After such a request, we expect an HTTP response with the `code 201 – Created`
    response. We test whether the response code is the one we expected with the `assertThat()`
    and `isEqual()` helper methods, which are provided by the **Fixtures for Easy
    Software Testing** (**FEST**) libraries. As stated on the home page of the FEST
    project ([http://code.google.com/p/fest/](http://code.google.com/     p/fest/)):'
  prefs: []
  type: TYPE_NORMAL
- en: '"FEST is a collection of libraries, released under the Apache 2.0 license,
    whose mission is to simplify software testing. It is composed of various modules,
    which can be used with TestNG or JUnit."'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just showcased the use of the Dropwizard testing module in order to perform
    an integration test by booting an actual server that is connected to an actual
    database. This module is not limited to integration testing though. It is backed
    by JUnit, and you are able to use it for smaller (but critical) to larger unit
    tests and also for testing the correct serialization/deserialization of entities.
  prefs: []
  type: TYPE_NORMAL
- en: Adding health checks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A health check is a runtime test for our application. We are going to create
    a health check that tests the creation of new contacts using the Jersey client.
  prefs: []
  type: TYPE_NORMAL
- en: The health check results are accessible through the admin port of our application,
    which by default is 8081.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To add a health check perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new package called `com.dwbook.phonebook.health` and a class named
    `NewContactHealthCheck` in it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Register the health check with the Dropwizard environment by using the `HealthCheckRegistry#register()`
    method within the `#run()` method of the `App` class. You will first need to import
    `com.dwbook.phonebook.health.NewContactHealthCheck`. The `HealthCheckRegistry`
    can be accessed using the `Environment#healthChecks()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After building and starting your application, navigate with your browser to
    `http://localhost:8081/healthcheck`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it…](img/9530OS_App.A_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The results of the defined health checks are presented in the JSON format.
    In case the custom health check we just created or any other health check fails,
    it will be flagged as `"healthy": false`, letting you know that your application
    faces runtime problems.'
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We used exactly the same code used by our `client` class in order to create
    a health check; that is, a runtime test that confirms that the new contacts can
    be created by performing HTTP POST requests to the appropriate endpoint of the
    `ContactResource` class. This health check gives us the required confidence that
    our web service is functional.
  prefs: []
  type: TYPE_NORMAL
- en: All we need for the creation of a health check is a class that extends `HealthCheck`
    and implements the `#check()` method. In the class's constructor, we call the
    parent class's constructor specifying the name of our check—the one that will
    be used to identify our health check.
  prefs: []
  type: TYPE_NORMAL
- en: In the `#check()` method, we literally implement a check. We check that everything
    is as it should be. If so, we return `Result.healthy()`, else we return `Result.unhealthy()`,
    indicating that something is going wrong.
  prefs: []
  type: TYPE_NORMAL
