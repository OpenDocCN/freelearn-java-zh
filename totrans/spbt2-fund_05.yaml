- en: Displaying Information Using Web Pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will learn about template engines and how they are integrated
    and used in Spring Boot 2\. After that, we will cover how Thymeleaf, a very commonly
    used template engine, is used to build web pages displaying dynamic data from
    an
  prefs: []
  type: TYPE_NORMAL
- en: application.
  prefs: []
  type: TYPE_NORMAL
- en: A template engine is a composition framework, which allows us to integrate dynamic
    information and building blocks, allowing developers to create page fragments
    independently. These tiles are then assembled together when running the application
    or rendering the page. Spring is well integrated with template engines such as
    Thymeleaf, Groovy Templates, Freemarker, and Mustache. However, we will be focusing
    on Thymeleaf, as it is commonly used and allows us to comfortably work with HTML
    pages used for web applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of this chapter, you will be able to:'
  prefs: []
  type: TYPE_NORMAL
- en: Identify how the Thymeleaf template engine works
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explain the basic syntax of a template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Define the most important elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explain how to iterate through lists and conditionally show parts of a page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build web pages using Thymeleaf to display dynamic data from an application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTML Templating with Thymeleaf
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have already been discussing template engines in the previous chapter. We
    will now take a closer look at how they work.
  prefs: []
  type: TYPE_NORMAL
- en: '**Thymeleaf** is a server-side template engine that became very popular for
    Spring Web MVC applications. It''s currently available in its third major version.
    But Thymeleaf goes far beyond the scope of regular web applications. It is also
    used to generate other formats, such as PDF or XML. It''s even possible to incorporate
    the template engine into an application to not only be used by developers but
    also end users of an application.'
  prefs: []
  type: TYPE_NORMAL
- en: What makes Thymeleaf special is the ability to write natural HTML templates
    that can be displayed in a web browser without the need to run the application.
    This allows for very short development cycles when designing the UI of an application.
    The downside of this is that you may have to add some additional HTML attributes
    only for the sake of displaying the template at design time. You can however decide
    when the additional attributes are required and when you can just leave them out.
  prefs: []
  type: TYPE_NORMAL
- en: Other popular template engines are **Java Server Pages** (**JSP**) and **FreeMarker**.
    However, these alternatives don't allow for an easy template development without
    a running engine.
  prefs: []
  type: TYPE_NORMAL
- en: HTML is used by a web browser to render a page. It mainly consists of tags that
    that are enclosed in angle brackets (for example `<div>`). There is a starting
    and an ending tag (`<div>...</div>`). The tags may also contain additional attributes
    (`div class="important">`, where class is the attribute).
  prefs: []
  type: TYPE_NORMAL
- en: Templating Engine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following diagram shows a typical relationship among various components:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7bfc395b-66c8-4126-989a-45c5e33d40ea.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the case of Thymeleaf, the templates are written using regular XML, XHTML,
    or HTML5 files. These files can be previewed in a browser without the need for
    a running template engine. For Thymeleaf to do its work, you add special attributes
    to the HTML, tags that usually start with `th`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Integrating Thymeleaf Into a Spring Boot Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To integration Thymeleaf in a Spring Boot application, you add the following
    dependency to your Maven `pom.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This will include Thymeleaf Version 3 in your project. Since Spring Boot is
    taking care of the configuration for you, it expects the templates in the `src/main/resources/templates`
    folder. When you later return the name of a view from your controller method,
    Spring looks in this folder for a file with the name of the view and a .html extension.
    For example, a view named welcome is expected to be in the `src/main/resources/templates/welcome.html`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: A Basic Thymeleaf Template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following code is showing a simple Thymeleaf template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The second part is what makes this file a template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This defines what is called a namespace for Thymeleaf and enables the use of
    `th:` as a prefix to mark attributes that are specific to Thymeleaf.
  prefs: []
  type: TYPE_NORMAL
- en: You will find a lot of these attributes, directives, and expressions in a template.
    They allow you to output content of the model, conditionally display parts of
    the view, iterate over lists, or execute functions.
  prefs: []
  type: TYPE_NORMAL
- en: Externalizing Text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In some cases, you may want to have text outside your template. This is called
    **externalized text fragments**. You are using Java properties files to store
    these fragments. In the case of a Spring Boot application, you create a file called
    `messages.properties` in the `src/main/resources` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since this is a regular properties file, you add your text as properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In the Thymeleaf template, you insert the text by using a `#{...}` expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: You will find the complete sample in the code repository.
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to include placeholder or parameters in an externalized string.
    These parts of the message get replaced by model attributes or other dynamic values
    when the page is rendered. More information about this feature can be found in
    the Thymeleaf documentation at [https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#messages](https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#messages).
  prefs: []
  type: TYPE_NORMAL
- en: Create Context Aware URLs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Java Servlet specification includes what is known as **servlet context**.
    When configured, a servlet context is a part of a URI that will be added in front
    of each mapping. For example, when setting the servlet context to `/blogmania`,
    the mapping `/blogposts` will become `/blogmania/blogposts`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Spring Boot, you set a context path in the `application.properties` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '`server.servlet.contextPath=/blogmania`'
  prefs: []
  type: TYPE_NORMAL
- en: Statements in Thymeleaf Templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Beside the expressions to include externalized text or creating URLs, Thymeleaf
    offers a lot more statements and expressions. They can be used in any Thymeleaf
    attribute that is prefixed with the namespace `th:` as defined earlier.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table lists a few of the most interesting statements:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c2bac19a-84d3-4a31-beb8-f18211ea13e1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'An example combining a lot of the statements from this table is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Bootstrapping and Templating With Thymeleaf
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The aim is to implement bootstrapping of Thymeleaf and make first contact with
    Thymeleaf templating. The steps for completion are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project folder in [https://bit.ly/2Og1oMZ](https://bit.ly/2Og1oMZ).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the application with `mvnw spring-boot:run`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate your browser to `http://localhost:8080` to see a page containing a
    title.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In your IDE or text editor, add the following line to the file: `src/main/resources/templates/welcome.html<p
    th:text="#{welcome.message}">There goes the message!</p>`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add another line to the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`3 + 4 = <span th:text="3 + 4">Result of the calculation</span>`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Stop the application and start it again using the previous command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Reload the page to view the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4a0f22b6-04c4-41e2-b7c5-488d9bd69d38.png)'
  prefs: []
  type: TYPE_IMG
- en: With this sub-section, you have implemented bootstrapping and the templating
    procedure in Thymeleaf.
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://bit.ly/2Og1oMZ](https://bit.ly/2Og1oMZ) to access the `exercise-first-thymeleaf/`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://bit.ly/2CP8dnd](https://bit.ly/2CP8dnd) to access the code for
    the `ExternalizedTextApplicationTests.java` file.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying Data Using a Model and Data Binding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Data Binding** deals with binding together information from two separate
    data sources and to keep them in sync. Data model instances use the required methods
    to set or retrieve data from a server, and reflect changes between two data sources.'
  prefs: []
  type: TYPE_NORMAL
- en: How Spring Web MVC Handles the Model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Thymeleaf engine we have just been looking at is responsible for handling
    the view part of the MVC pattern. The model, which is another aspect of this pattern,
    is handled by the Spring MVC framework. This includes creating and initializing
    attributes of the model and passing it between the view and the controller. This
    is different than, for example, Java Server Faces, where no distinct model is
    available but the components that render the view must access the attributes of
    the session or request.
  prefs: []
  type: TYPE_NORMAL
- en: The model itself consists of one or more **named attributes**. A class that
    is commonly used in Spring MVC applications is the `org.springframework.ui.Model`
    class. It is similar to a map, which means it is where you associate the attribute
    with its name. The name is later used to reference attributes from the model while
    rendering the view.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, there could be an attribute named `blogPost` referencing an instance
    of a `BlogPost` class that by itself contains information about the post that
    should be displayed by the view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c1c7be77-15e9-4d15-a2cc-3ba276ad0e0d.png)'
  prefs: []
  type: TYPE_IMG
- en: Model-View Interaction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following diagram shows a typical relationship among various components:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1fcab629-425e-45e4-b894-0dbd028d0545.png)'
  prefs: []
  type: TYPE_IMG
- en: Passing the Model as a Parameter to a Handler Method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To add arbitrary objects to the model, you can declare a method parameter in
    a handling method that is of the type of `org.springframework.ui.Model`. When
    a request is handled by Spring MVC, an instance is created and provided to the
    method.
  prefs: []
  type: TYPE_NORMAL
- en: Look at the following code snippet that is taken from a class that you can find
    in the code files at [https://bit.ly/2OkI7ci](https://bit.ly/2OkI7ci)[:](https://bit.ly/2OkI7ci)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `@GetMapping` annotation maps this method the `/blogpost` URL.
  prefs: []
  type: TYPE_NORMAL
- en: An instance of the `org.springframework.ui.Model` class is passed to the method
    as a parameter.
  prefs: []
  type: TYPE_NORMAL
- en: All blog posts are retrieved using the `findAllBlogPosts()` method.
  prefs: []
  type: TYPE_NORMAL
- en: The list of blog posts is added to the model and associated with the name `blogPosts`.
  prefs: []
  type: TYPE_NORMAL
- en: The name of the view to be rendered is returned. In this case, the view is called
    `blogposts/list`.
  prefs: []
  type: TYPE_NORMAL
- en: Use the `@ModelAttribute` to pass model attributes as method parameters.
  prefs: []
  type: TYPE_NORMAL
- en: In some cases, you may only require a few model attributes in a handling method.
    For this case, Spring allows you to annotate the parameters of methods with a
    `@ModelAttribute` annotation that also contains the attribute name. Spring will
    then try to get an existing attribute with the given name from the model. If the
    attribute cannot be found, it will be created.
  prefs: []
  type: TYPE_NORMAL
- en: 'Whenever an attribute is initialized and added to the model, the same instance
    will be accessible throughout the rest of the request for the given name. This
    means that the attributes are also available inside a template when the view is
    rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In this example, Spring makes sure that an attribute named `blogPost` is associated
    with the model and then passes the `blogPost` to the handling method, where it
    will be manipulated. Finally, the view named `blogposts/edit` is rendered.
  prefs: []
  type: TYPE_NORMAL
- en: Returning Model Attributes from a Controller Method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another way of binding attributes to the model is simply by returning them from
    a controller method. Any types of object can be returned. However, some of them
    have a special meaning and will be handled appropriately.
  prefs: []
  type: TYPE_NORMAL
- en: When returning instances of `java.util.Map` or `org.springframework.ui.Model`,
    all of their attributes will be added to an existing model.
  prefs: []
  type: TYPE_NORMAL
- en: Any arbitrary object that is not a String will be added to the model. The name
    is determined either by the name of the return type or the name given in the `@ModelAttribute`
    annotation, if present.
  prefs: []
  type: TYPE_NORMAL
- en: Using @ModelAttribute to Initialize Model Attributes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Any method inside a controller class that is annotated with the `@ModelAttribute`
    annotation is called before the actual request - handling method in the same controller.
    It can access an instance of the model passed in as a parameter, return a model
    attribute as described previously, or even combine both methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the following code example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This method will add the number of all posts as reported by the `numBlogPosts()`
    method for any request that is handled by the controller class.
  prefs: []
  type: TYPE_NORMAL
- en: You can even use `@PathParam` and similar directives if you require access to
    such values. For example, this can be useful to query the database.
  prefs: []
  type: TYPE_NORMAL
- en: Using an annotated parameter allows you to pick up only certain attributes that
    may have been initialized elsewhere. It also enables a handling method to clearly
    express its purpose. Finally, the controller method doesn't need to fiddle around
    with the full model.
  prefs: []
  type: TYPE_NORMAL
- en: Having an annotated method allows you to initialize the model with attributes
    that are generally used in all views and are independent of the current task to
    be performed. This expresses the principle of separation of concerns.
  prefs: []
  type: TYPE_NORMAL
- en: How a View is Selected by the Spring Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring offers a lot of ways to render the information from the model. We will
    look at HTML pages in particular.
  prefs: []
  type: TYPE_NORMAL
- en: The Thymeleaf template engine uses a view name to determine which template it
    should use.
  prefs: []
  type: TYPE_NORMAL
- en: Thymeleaf uses the view name to search for the template file in the `src/main/resources/templates`
    folder. The file has to be named exactly the same as the view name, prefixed by
    `.html`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table lists some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/048037fd-54b1-480f-8750-09ff57da73b1.png)'
  prefs: []
  type: TYPE_IMG
- en: Selecting a View Template by Returning Its Name
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Take a look at the following code example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This example will render the template, which is found in the `src/main/resources/templates/blogPosts/list.html`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Redirecting to a URL Instead of Rendering a View Directly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To redirect to a URL, you prefix the view name that is returned from the handling
    method with `redirect:`. This can either be a URL relative to the servlet context
    or an absolute URL. Any attributes in the model will be added to the URL as query
    parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dd7ce5da-9468-49ec-b3dc-2c63e40faaf1.png)'
  prefs: []
  type: TYPE_IMG
- en: Another way to redirect is to return an instance of `org.springframework.web.servlet.view.RedirectView`
    containing the URL to redirect to. This allows us to pass additional attributes
    to the handling method that gets executed after the redirect.
  prefs: []
  type: TYPE_NORMAL
- en: Another kind of attributes, called **flash attributes**, will also be available
    after the redirect.
  prefs: []
  type: TYPE_NORMAL
- en: 'Look at the following example from the `BlogPostController` taken from the
    basic Thymeleaf source in the repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In the constructor of the `RedirectView` instance, the URL of the redirect
    is specified. The second parameter tells Spring to do the redirect relative to
    the context path of the current application. After this handling method returns,
    the client will be redirected to a URL such as `/blogPosts/slug-of-random-post?extraMessage=extraMessage=This+message+appears+in+the+query`.
    The method that handles this request is able to access `flashMessage`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In contrast, request parameters can be sent to any application or site, since
    it is encoded in the URL.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting a View and Returning a Model at the Same Time
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By returning an instance of `org.springframework.web.servlet.ModelAndView`,
    it is possible to specify a view name, add model attributes or set the HTTP response
    status at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example can be found in the `BlogPostController` provided in the code repository
    for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This method returns the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: The view name `/blogposts/details`.
  prefs: []
  type: TYPE_NORMAL
- en: A model attribute called `blogPost` containing the actual blog post.
  prefs: []
  type: TYPE_NORMAL
- en: Working with the Model in Thymeleaf Templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the model and view name have been provided by the handling method, the
    framework will pass both to the Thymeleaf template engine. Everything that has
    been added to the model will be available in the template by its attribute name.
  prefs: []
  type: TYPE_NORMAL
- en: Binding Model Data to a Thymeleaf Template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After Thymeleaf has been enabled by adding the namespace, directives can be
    used to add dynamic content. This will be achieved by using the `th` prefix. For
    example, assume that you have added an attribute named `message` to the model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Instead of the text `This will be replaced!`, the content of the model attribute
    named message will be shown.
  prefs: []
  type: TYPE_NORMAL
- en: To access a model attribute, `${...}` is used to reference an attribute from
    the model.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Dynamic Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The aim is to add dynamic data to be displayed on a web page. The steps for
    completion are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `exercise-basic-thymeleaf` project in your IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `BlogPostController` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following method, which adds a simple blog post to the model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Open the `src/main/resources/templates/blogposts/details.html` file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code at the location marked by this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Navigate your browser to `http://localhost:8080/sample-post`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see the details of the blogpost:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3bcf2bc5-844f-4f46-a356-04717435f8c6.png)'
  prefs: []
  type: TYPE_IMG
- en: With this sub-section, you have utilized dynamic data and displayed it as an
    output on a web page.
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://bit.ly/2OcOLSH](https://bit.ly/2OcOLSH) to access the `exercise-basic-thymeleaf/`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://bit.ly/2MtdW1X](https://bit.ly/2MtdW1X) to access the code for
    the `BasicThymeleafApplication.java` file.
  prefs: []
  type: TYPE_NORMAL
- en: Iterating and Displaying Items from a List
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you want to display a list of items, you need a way to iterate over that
    list. Thymeleaf is able to iterate over lists, such as arrays or Java Collections,
    using the `th:each` directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This is a simplified version of the content you find in the [https://bit.ly/2Rqpkyn](https://bit.ly/2Rqpkyn) file.
  prefs: []
  type: TYPE_NORMAL
- en: This snippet will create a `<div>` for each blog post that is present in the
    collection with the attribute name `blogPosts`. Inside this `<div>` element, the
    current blog post object can be accessed by using the name `currentBlogPost`.
    As you can see, the title and content are inserted using the `th:text` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: Handling Lists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The aim is to display lists in a blogpost. The steps for completion are as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the welcome page file at `src/main/resources/templates/index.html` from
    the previous sub-section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code at the location marked with the `<div>`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Open a terminal and go to the `exercise-basic-thymeleaf` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `mvnw spring-boot:run` to start the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate your browser to `http://localhost:8080` to see the list in action.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the Add button so that the list should show one new entry:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/41afeb55-8be4-4e0d-b489-86aecb5b7df3.png)'
  prefs: []
  type: TYPE_IMG
- en: After, you have displayed multiple blog posts on a website by iterating over
    a list of items.
  prefs: []
  type: TYPE_NORMAL
- en: The previous sub-section illustrates the use of a built-in function of Thymeleaf
    to format temporal attributes such as the `LocalDateTime` that is used for the
    publication date of a blogpost.
  prefs: []
  type: TYPE_NORMAL
- en: The `th:text="${#temporals.format(currentBlogPost.publicationDate, 'MMMM d,
    YYYY')}"` expression takes the publication date from the current blog posts and
    formats it to the given pattern. The month is printed first, then the day of the
    month, followed by a colon and the year (January 1, 2018).
  prefs: []
  type: TYPE_NORMAL
- en: Displaying Parts of the View Using Conditions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Beside iterating through lists, Thymeleaf also allows you to hide or show parts
    of the template depending on the state model attributes. You can also evaluate
    expressions containing logic operations or method calls.
  prefs: []
  type: TYPE_NORMAL
- en: 'To conditionally show a page element, Thymeleaf offers the `th:if` directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This is a simplified version of the content you find in the [https://bit.ly/2CRBV9A](https://bit.ly/2CRBV9A) file.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, there are no blog posts that will appear when the model attribute
    named `blogPosts` is empty.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying Text Conditionally
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The aim is to display text on the screen based on certain conditions. The steps
    for completion are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the welcome page from the previous sub-section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code above the list at the location marked with the `<div>`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Open a terminal and go to the `exercise-basic-thymeleaf` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `mvnw spring-boot:run` to start the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate your browser to `http://localhost:8080` to see the list in action.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the Remove all button to clear the list of blog posts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f155e8c9-4e4f-47a4-96b2-2392b22a6636.png)'
  prefs: []
  type: TYPE_IMG
- en: With this sub-section, you have displayed the text data on the website based
    on the applied conditions.
  prefs: []
  type: TYPE_NORMAL
- en: You have seen multiple ways to add attributes to the model. Model attributes
    can be any arbitrary object that is referenced by a name. The name is defined
    by the developer when it is added to the model. This can either be in a separate
    or in a mapping - handling method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity: Displaying the Details of a Blog Post'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Aim**'
  prefs: []
  type: TYPE_NORMAL
- en: To implement a handling method and a corresponding view template.
  prefs: []
  type: TYPE_NORMAL
- en: '**Scenario**'
  prefs: []
  type: TYPE_NORMAL
- en: The blogmania application is set up. There is a method to retrieve a blogpost
    from the internal storage using the slug attribute. You now want to add a view
    that displays a blog post when the user enters the `/blogposts/{slug}` URI.
  prefs: []
  type: TYPE_NORMAL
- en: '**Steps for Completion**'
  prefs: []
  type: TYPE_NORMAL
- en: Create an annotated class and inject the `BlogPostService`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a handling method to the `BlogPostController` and use a path variable slug
    to find the blog post. Throw an exception when a blogpost is not found.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Retrieve the blog post from the `BlogPostService`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Return the instance from the required method. Set the view name to blogpost
    and add the blog post returned from the service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a view template file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the application using the maven command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `http://localhost:8080/blogposts/my-first-post` URL to view the output
    screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d4e604b1-61c3-4659-89d7-e02cf840f659.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Outcome**'
  prefs: []
  type: TYPE_NORMAL
- en: The resulting handling method and a corresponding view template are visible
    on the web page.
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://bit.ly/2NGgDS4](https://bit.ly/2NGgDS4) to access the code for
    the `BasicThymeleafApplication.java` file. To refer to the detailed steps, go
    to the *Solutions* section at the end of this book on page 254.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learnt about the Thymeleaf template engine. We looked
    at how to add the required dependency to our project and the basic syntax to write
    view templates.
  prefs: []
  type: TYPE_NORMAL
- en: We then looked at how Spring MVC handles the model and how to add attributes
    to it. Adding and accessing attributes is similar to a Java Map.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we looked at expressions and control statements that Thymeleaf uses
    to insert data from the model, iterate through lists, and conditionally display
    parts of the page.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we have learnt how to display information that has been made
    available from the controller as model attributes in a view. In the next chapter,
    we will take a look at how input from the view is handed to the controller.
  prefs: []
  type: TYPE_NORMAL
