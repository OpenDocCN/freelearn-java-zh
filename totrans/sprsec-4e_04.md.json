["```java\n//build.gradle\ndependencies {\n...\n    // spring-jdbc\n    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'\n    // H2 db\n    implementation 'com.h2database:h2'\n    // spring-security\n    implementation 'org.springframework.boot:spring-boot-starter-security'\n...\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/DataSourceConfig. Java\n@Bean\npublic DataSource dataSource() {\n    return new EmbeddedDatabaseBuilder()\n          .setName(\"dataSource\")\n          .setType(EmbeddedDatabaseType.H2)\n          .addScript(\"/database/h2/calendar-schema.sql\")\n          .addScript(\"/database/h2/calendar-data.sql\")\n          .addScript(\"/database/h2/security-schema.sql\")\n          .addScript(\"/database/h2/security-users.sql\")\n          .addScript(\"/database/h2/security-user-authorities.sql\")\n          .build();\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n@Bean\npublic UserDetailsManager userDetailsService(DataSource dataSource) {\n    return new JdbcUserDetailsManager(dataSource);\n}\n```", "```java\n//src/main/resources/database/h2/security-schema.sql\ncreate table users\n(\n    username varchar(256) not null primary key,\n    password varchar(256) not null,\n    enabled  boolean      not null\n);\ncreate table authorities\n(\n    username  varchar(256) not null,\n    authority varchar(256) not null,\n    constraint fk_authorities_users foreign key (username) references users (username)\n);\ncreate unique index ix_auth_username on authorities (username, authority);\n```", "```java\n//src/main/resources/database/h2/security-users.sql\ninsert into users (username, password, enabled)\nvalues ('user1@example.com', '{noop}user1', 1);\ninsert into users (username, password, enabled)\nvalues ('admin1@example.com', '{noop}admin1', 1);\ninsert into users (username, password, enabled)\nvalues ('user2@example.com', '{noop}admin1', 1);\ninsert into users (username, password, enabled)\nvalues ('disabled1@example.com', '{noop}disabled1', 0);\ninsert into users (username, password, enabled)\nvalues ('admin', '{noop}admin', 1);\n```", "```java\n//src/main/resources/database/h2/security-user-authorities.sql\ninsert into authorities(username, authority)\nvalues ('user1@example.com', 'ROLE_USER');\ninsert into authorities(username, authority)\nvalues ('admin1@example.com', 'ROLE_ADMIN');\ninsert into authorities(username, authority)\nvalues ('admin1@example.com', 'ROLE_USER');\ninsert into authorities(username, authority)\nvalues ('user2@example.com', 'ROLE_USER');\ninsert into authorities(username, authority)\nvalues ('disabled1@example.com', 'ROLE_USER');\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.ja va\nprivate static String CUSTOM_GROUP_AUTHORITIES_BY_USERNAME_QUERY = \"select g.id, g.group_name, ga.authority \" +\n       \"from groups g, group_members gm, \" +\n       \"group_authorities ga where gm.username = ? \" +\n       \"and g.id = ga.group_id and g.id = gm.group_id\";\n@Bean\npublic UserDetailsManager userDetailsService(DataSource dataSource) {\n    JdbcUserDetailsManager jdbcUserDetailsManager = new JdbcUserDetailsManager(dataSource);\n    jdbcUserDetailsManager.setEnableGroups(true);\n    jdbcUserDetailsManager.setGroupAuthoritiesByUsernameQuery(CUSTOM_GROUP_AUTHORITIES_BY_USERNAME_QUERY);\n    return jdbcUserDetailsManager;\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/DataSourceConfig. java\n@Bean\npublic DataSource dataSource() {\n    return new EmbeddedDatabaseBuilder()\n          .setName(\"dataSource\")\n          .setType(EmbeddedDatabaseType.H2)\n          .addScript(\"/database/h2/calendar-schema.sql\")\n          .addScript(\"/database/h2/calendar-data.sql\")\n          .addScript(\"/database/h2/security-schema.sql\")\n          .addScript(\"/database/h2/security-users.sql\")\n          .addScript(\"/database/h2/security-groups-schema.sql\")\n          .addScript(\"/database/h2/security-groups-mappings.sql\")\n          .build();\n}\n```", "```java\n//src/main/resources/database/h2/security-groups-schema.sql\ncreate table groups\n(\n    id         bigint generated by default as identity (start with 0) primary key,\n    group_name varchar(256) not null\n);\ncreate table group_authorities\n(\n    group_id  bigint      not null,\n    authority varchar(50) not null,\n    constraint fk_group_authorities_group foreign key (group_id) references groups (id)\n);\ncreate table group_members\n(\n    id       bigint generated by default as identity (start with 0) primary key,\n    username varchar(50) not null,\n    group_id bigint      not null,\n    constraint fk_group_members_group foreign key (group_id) references groups (id)\n);\n```", "```java\n//src/main/resources/database/h2/security-groups-mappings.sql\n-----\n-- Create the Groups\ninsert into groups(group_name)\nvalues ('Users');\ninsert into groups(group_name)\nvalues ('Administrators');\n-----\n-- Map the Groups to Roles\ninsert into group_authorities(group_id, authority)\nselect id, 'ROLE_USER'\nfrom groups\nwhere group_name = 'Users';\n-- Administrators are both a ROLE_USER and ROLE_ADMIN\ninsert into group_authorities(group_id, authority)\nselect id, 'ROLE_USER'\nfrom groups\nwhere group_name = 'Administrators';\ninsert into group_authorities(group_id, authority)\nselect id, 'ROLE_ADMIN'\nfrom groups\nwhere group_name = 'Administrators';\n-----\n-- Map the users to Groups\ninsert into group_members(group_id, username)\nselect id, 'user1@example.com'\nfrom groups\nwhere group_name = 'Users';\ninsert into group_members(group_id, username)\nselect id, 'admin1@example.com'\nfrom groups\nwhere group_name = 'Administrators';\ninsert into group_members(group_id, username)\nselect id, 'user2@example.com'\nfrom groups\nwhere group_name = 'Users';\ninsert into group_members(group_id, username)\nselect id, 'disabled1@example.com'\nfrom groups\nwhere group_name = 'Users';\ninsert into group_members(group_id, username)\nselect id, 'admin'\nfrom groups\nwhere group_name = 'Administrators';\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/DataSourceConfig. java\n@Bean\npublic DataSource dataSource() {\n    return new EmbeddedDatabaseBuilder()\n          .setName(\"dataSource\")\n          .setType(EmbeddedDatabaseType.H2)\n          .addScript(\"/database/h2/calendar-schema.sql\")\n          .addScript(\"/database/h2/calendar-data.sql\")\n          .addScript(\"/database/h2/calendar-authorities.sql\")\n          .build();\n}\n```", "```java\n//src/main/resources/database/h2/calendar-authorities.sql\ncreate table calendar_user_authorities\n(\n    id IDENTITY NOT NULL PRIMARY KEY,\n    calendar_user bigint       not null,\n    authority     varchar(256) not null\n);\n-- user1@example.com\ninsert into calendar_user_authorities(calendar_user, authority)\nselect id, 'ROLE_USER'\nfrom calendar_users\nwhere email = 'user1@example.com';\n-- admin1@example.com\ninsert into calendar_user_authorities(calendar_user, authority)\nselect id, 'ROLE_ADMIN'\nfrom calendar_users\nwhere email = 'admin1@example.com';\ninsert into calendar_user_authorities(calendar_user, authority)\nselect id, 'ROLE_USER'\nfrom calendar_users\nwhere email = 'admin1@example.com';\n-- user2@example.com\ninsert into calendar_user_authorities(calendar_user, authority)\nselect id, 'ROLE_USER'\nfrom calendar_users\nwhere email = 'user2@example.com';\n```", "```java\n//src/main/java/com/packtpub/springsecurity/service/DefaultCalendarService. java\n@Repository\npublic class DefaultCalendarService implements CalendarService {\n    private final EventDao eventDao;\n    private final CalendarUserDao userDao;\n    private final JdbcOperations jdbcOperations;\n...\n    public int createUser(CalendarUser user) {\n        int userId = userDao.createUser(user);\n        jdbcOperations.update(\"insert into calendar_user_authorities(calendar_user,authority) values (?,?)\", userId,\n              \"ROLE_USER\");\n        return userId;\n    }\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.ja va\nprivate static String CUSTOM_USERS_BY_USERNAME_QUERY = \"select email, password, true \" +\n       \"from calendar_users where email = ?\";\nprivate static String CUSTOM_AUTHORITIES_BY_USERNAME_QUERY = \"select cua.id, cua.authority \" +\n       \"from calendar_users cu, calendar_user_authorities \" +\n       \"cua where cu.email = ? \" +\n       \"and cu.id = cua.calendar_user\";\n@Bean\npublic UserDetailsManager userDetailsService(DataSource dataSource) {\n    JdbcUserDetailsManager jdbcUserDetailsManager = new JdbcUserDetailsManager(dataSource);\n    jdbcUserDetailsManager.setUsersByUsernameQuery(CUSTOM_USERS_BY_USERNAME_QUERY);\n    jdbcUserDetailsManager.setAuthoritiesByUsernameQuery(CUSTOM_AUTHORITIES_BY_USERNAME_QUERY);\n    return jdbcUserDetailsManager;\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n@Bean\npublic PasswordEncoder encoder() {\n    return PasswordEncoderFactories.createDelegatingPasswordEncoder();\n}\n```", "```java\nPasswordEncoder passwordEncoder =\nPasswordEncoderFactories.createDelegatingPasswordEncoder();\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.ja va\n@Bean\npublic PasswordEncoder passwordEncoder() {\n    String idForEncode = \"SHA-256\";\n    Map<String, PasswordEncoder> encoders = new HashMap<>();\n    encoders.put(\"SHA-256\", new org.springframework.security.crypto.password.MessageDigestPasswordEncoder(\"SHA-256\"));\n    return new DelegatingPasswordEncoder(idForEncode, encoders);\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/DataSourceConfig. java\n@Bean\npublic DataSource dataSource() {\n    return new EmbeddedDatabaseBuilder()\n          .setName(\"dataSource\")\n          .setType(EmbeddedDatabaseType.H2)\n          .addScript(\"/database/h2/calendar-schema.sql\")\n          .addScript(\"/database/h2/calendar-data.sql\")\n          .addScript(\"/database/h2/calendar-authorities.sql\")\n          .addScript(\"/database/h2/calendar-sha256.sql\")\n          .build();\n}\n```", "```java\n-- original password was: user1\nupdate calendar_users\nset password = '{SHA-256}0a041b9462caa4a31bac3567e0b6e6fd9100787db2ab433d96f6d178cabfce90'\nwhere email = 'user1@example.com';\n```", "```java\nShaPasswordEncoder encoder = new ShaPasswordEncoder(256);\nString encodedPassword = encoder.encodePassword(password, null);\n```", "```java\n//src/main/java/com/packtpub/springsecurity/service/DefaultCalendarService. java\npublic class DefaultCalendarService implements CalendarService {\n    private final EventDao eventDao;\n    private final CalendarUserDao userDao;\n    private final JdbcOperations jdbcOperations;\n    private final PasswordEncoder passwordEncoder;\n...\n    public int createUser(CalendarUser user) {\n       String encodedPassword = passwordEncoder.encode(user.getPassword());\n       user.setPassword(encodedPassword);\n       int userId = userDao.createUser(user);\n       jdbcOperations.update(\"insert into calendar_user_authorities(calendar_user,authority) values (?,?)\", userId,\n             \"ROLE_USER\");\n       return userId;\n    }\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.ja va\n@Bean\npublic PasswordEncoder passwordEncoder() {\n    return new StandardPasswordEncoder();\n}\n```", "```java\nStandardPasswordEncoder encoder = new StandardPasswordEncoder();\nString encodedPassword = encoder.encode(\"password\");\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/ DataSourceConfig.java\n@Bean\npublic DataSource dataSource() {\n    return new EmbeddedDatabaseBuilder()\n          .setName(\"dataSource\")\n          .setType(EmbeddedDatabaseType.H2)\n          .addScript(\"/database/h2/calendar-schema.sql\")\n          .addScript(\"/database/h2/calendar-data.sql\")\n          .addScript(\"/database/h2/calendar-authorities.sql\")\n          .addScript(\"/database/h2/calendar-saltedsha256.sql\")\n          .build();\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/service/DefaultCalendarService. java\n@Repository\npublic class DefaultCalendarService implements CalendarService {\n    private final EventDao eventDao;\n    private final CalendarUserDao userDao;\n    private final JdbcOperations jdbcOperations;\n    private final PasswordEncoder passwordEncoder;\n    public int createUser(CalendarUser user) {\n        String encodedPassword = passwordEncoder.encode(user.getPassword());\n        user.setPassword(encodedPassword);\n        int userId = userDao.createUser(user);\n        jdbcOperations.update(\"insert into calendar_user_authorities(calendar_user,authority) values (?,?)\", userId,\n              \"ROLE_USER\");\n        return userId;\n    }\n}\n```", "```java\nsalt = randomsalt()\nhash = hash(salt+originalPassword)\nstoredPassword = salt + hash\n```", "```java\nstoredPassword = datasource.lookupPassword(username) salt, expectedHash = extractSaltAndHash(storedPassword) actualHash = hash(salt+inputedPassword)\nauthenticated = (expectedHash == actualHash)Trying out salted passwords with StandardPasswordEncoder\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n@Bean\npublic PasswordEncoder passwordEncoder() {\n    return new BCryptPasswordEncoder(4);\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/ DataSourceConfig.java\n@Bean\npublic DataSource dataSource() {\n    return new EmbeddedDatabaseBuilder()\n          .setName(\"dataSource\")\n          .setType(EmbeddedDatabaseType.H2)\n          .addScript(\"/database/h2/calendar-schema.sql\")\n          .addScript(\"/database/h2/calendar-data.sql\")\n          .addScript(\"/database/h2/calendar-authorities.sql\")\n          .addScript(\"/database/h2/calendar-bcrypt.sql\")\n          .build();\n}\n```"]