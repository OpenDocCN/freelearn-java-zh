["```java\n#MobEnhancer Config\n#Set the health of each Mob below \n#1.0 is equal to half a heart so a Player has 20.0 health\n#A value of -1.0 will disable modifying the mob's health\n#Hostile\nZOMBIE: 20.0\nSKELETON: 20.0\n\n#Passive\nCOW: 10.0\nPIG: 10.0\n```", "```java\nsaveDefaultConfig();\n```", "```java\n@Override\npublic boolean onCommand(CommandSender sender, Command command, String alias, String[] args) {\n    reloadConfig();\n    sender.sendMessage(\"MobEnhancer config has been reloaded\");\n    return true; //The command was executed successfully\n}\n```", "```java\ngetCommand(\"mobenhancerreload\").setExecutor(this);\n```", "```java\nname: MobEnhancer\nmain: com.codisimus.mobenhancer.MobEnhancer\nversion: 0.2\ndescription: Modifies Mobs as they spawn\ncommands:\n  mobenhancerreload:\n    description: Reloads the config.yml file of the plugin\n    aliases: [mereload, merl]\n    usage: /<command>\n    permission: mobenhancer.rl\n    permission-message: You do not have permission to do that\npermissions:\n  mobenhancer.rl:\n    default: op\n```", "```java\ndouble health = this.getConfig().getDouble(\"ZOMBIE\");\n```", "```java\n@EventHandler\npublic void onMobSpawn(CreatureSpawnEvent event) {\n    if (event.getEntityType() == EntityType.ZOMBIE) {\n        int health = 40;\n        event.getEntity().setMaxHealth(health);\n        event.getEntity().setHealth(health);\n    }\n}\n```", "```java\n@EventHandler\npublic void onMobSpawn(CreatureSpawnEvent event) {\n    //Find the type of the Entity that spawned\n    String type = event.getEntityType().name();\n\n    //Retrieve the custom health amount for the EntityType\n    //This will be 0 if the EntityType is not included in the config\n    double health = getConfig().getDouble(type);\n    event.getEntity().setMaxHealth(health);\n    event.getEntity().setHealth(health);\n}\n```", "```java\nif (health > 0)\n```", "```java\npackage com.codisimus.mobenhancer;\n\nimport org.bukkit.command.Command;\nimport org.bukkit.command.CommandExecutor;\nimport org.bukkit.command.CommandSender;\nimport org.bukkit.event.EventHandler;\nimport org.bukkit.event.Listener;\nimport org.bukkit.event.entity.CreatureSpawnEvent;\nimport org.bukkit.plugin.java.JavaPlugin;\n\npublic class MobEnhancer extends JavaPlugin implements Listener, CommandExecutor {\n    @Override\n    public void onEnable() {\n        //Save the default config file if it does not already exist\n        saveDefaultConfig();\n\n        //Register all of the EventHandlers within this class\n        getServer().getPluginManager().registerEvents(this, this);\n\n        //Register this class as the Executor of the /merl command\n        getCommand(\"mobenhancerreload\").setExecutor(this);\n    }\n\n    @EventHandler\n    public void onMobSpawn(CreatureSpawnEvent event) {\n        //Find the type of the Entity that spawned\n        String type = event.getEntityType().name();\n\n        //Retrieve the custom health amount for the EntityType\n        //This will be 0 if the EntityType is not in the config\n        double health = getConfig().getDouble(type);\n\n        //Mobs cannot have negative health\n        if (health > 0) {\n            event.getEntity().setMaxHealth(health);\n            event.getEntity().setHealth(health);\n        }\n    }\n\n    @Override\n    public boolean onCommand(CommandSender sender, Command command,String alias, String[] args) {\n        reloadConfig();\n        sender.sendMessage(\"MobEnhancer config has been reloaded\");\n        return true; //The command was executed successfully\n    }\n}\n```", "```java\nSampleItem:\n  ==: org.bukkit.inventory.ItemStack\n  type: DIAMOND_SWORD\n  damage: 1500\n  amount: 1\n  meta:\n    ==: ItemMeta\n    meta-type: UNSPECIFIC\n    display-name: §6Sample Item\n    lore:\n    - First line of lore\n    - Second line of lore\n    - §1Color §2support\n    enchants:\n      DAMAGE_ALL: 2\n      KNOCKBACK: 7\n      FIRE_ASPECT: 1\n```", "```java\nZombie:\n  holding:\n    ==: org.bukkit.inventory.ItemStack\n    type: STONE_SWORD\n  helmet:\n    ==: org.bukkit.inventory.ItemStack\n    type: CHAINMAIL_HELMET\n\nSkeleton:\n  holding:\n    ==: org.bukkit.inventory.ItemStack\n    type: BOW\n  helmet:\n    ==: org.bukkit.inventory.ItemStack\n    type: LEATHER_HELMET\n```", "```java\n### MOB ARMOR ###\nGiveArmorToMobs: true\n\nZombie:\n  holding:\n    ==: org.bukkit.inventory.ItemStack\n    type: STONE_SWORD\n  helmet:\n    ==: org.bukkit.inventory.ItemStack\n    type: CHAINMAIL_HELMET\n\nSkeleton:\n  holding:\n    ==: org.bukkit.inventory.ItemStack\n    type: BOW\n    meta:\n      ==: ItemMeta\n      meta-type: UNSPECIFIC\n      enchants:\n        ARROW_FIRE: 1\n  helmet:\n    ==: org.bukkit.inventory.ItemStack\n    type: LEATHER_HELMET\n    color:\n      ==: Color\n      RED: 102\n      BLUE: 51\n      GREEN: 127\n```", "```java\nprivate boolean giveArmorToMobs;\nprivate ItemStack zombieHolding;\nprivate ItemStack skeletonHolding;\n```", "```java\nsuper.reloadConfig();\n```", "```java\n/**\n * Reloads the config from the config.yml file\n * Loads values from the newly loaded config\n * This method is automatically called when the plugin is enabled\n */\n@Override\npublic void reloadConfig() {\n    //Reload the config as this method would normally do\n    super.reloadConfig();\n\n    //Load values from the config now that it has been reloaded\n    giveArmorToMobs = getConfig().getBoolean(\"GiveArmorToMobs\");\n    zombieHolding = getConfig().getItemStack(\"Zombie.holding\");\n    skeletonHolding = getConfig().getItemStack(\"Skeleton.holding\");\n}\n```", "```java\nif (giveArmorToMobs) {\n\n}\n```", "```java\nEntityEquipment equipment = event.getEntity().getEquipment();\n```", "```java\nif (event.getEntityType() == EntityType.ZOMBIE) {\n    //TODO - Give Zombie armor\n} else if (event.getEntityType() == EntityType.SKELETON) {\n    //TODO – Give Skeleton armor\n}\n```", "```java\nswitch (event.getEntityType()) {\ncase ZOMBIE:\n    //TODO - Give Zombie armor\n    break;\ncase SKELETON: \n    //TODO - Give Skeleton armor\n    break;\ndefault: //Any other EntityType\n    //Do nothing\n    break;\n}\n```", "```java\nif (zombieHolding != null) {\n    equipment.setItemInHand(zombieHolding.clone());\n}\n```", "```java\nif (giveArmorToMobs) {\n    //Retrieve the equipment object of the Entity\n    EntityEquipment equipment = event.getEntity().getEquipment();\n\n    switch (event.getEntityType()) {\n    case ZOMBIE: \n        //Set each piece of equipment if they are not null\n        if (zombieHolding != null) {\n            equipment.setItemInHand(zombieHolding.clone());\n        }\n        //TODO – Add rest of armor\n        break;\n\n    case SKELETON: \n        //Set each piece of equipment if they are not null \n        if (skeletonHolding != null) {\n            equipment.setItemInHand(skeletonHolding.clone());\n        }\n        //TODO – Add rest of armor\n        break;\n\n    default: //Any other EntityType\n        //Do nothing\n        break;\n    }\n}\n```", "```java\nNotchSkull:\n  ==: org.bukkit.inventory.ItemStack\n  type: SKULL_ITEM\n  damage: 3\n  meta:\n    ==: ItemMeta\n    meta-type: SKULL\n    skull-owner: Notch\n```", "```java\nreloadConfig();\n```", "```java\npublic class MobEnhancer extends JavaPlugin {\n    //Static plugin reference to allow access from other classes.\n    static JavaPlugin plugin;\n```", "```java\npackage com.codisimus.mobenhancer;\n\nimport org.bukkit.command.Command;\nimport org.bukkit.command.CommandExecutor;\nimport org.bukkit.command.CommandSender;\n\npublic class MobEnhancerReloadCommand implements CommandExecutor {\n    @Override\n    public boolean onCommand(CommandSender sender, Command command, String alias, String[] args) {\n        MobEnhancer.plugin.reloadConfig();\n        sender.sendMessage(\"MobEnhancer config has been reloaded\");\n        return true; //The command executed successfully\n    }\n}\n```", "```java\npublic class MobSpawnListener implements Listener {\n    private boolean giveArmorToMobs;\n    private ItemStack zombieHolding;\n    private ItemStack skeletonHolding;\n```", "```java\npublic void reloadConfig() {\n    //Reload the config as this method would normally do\n    super.reloadConfig();\n\n    //Load values from the config now that it has been reloaded\n    MobSpawnListener.giveArmorToMobs = getConfig().getBoolean(\"GiveArmorToMobs\");\n    MobSpawnListener.zombieHolding = getConfig().getItemStack(\"Zombie.   holding\");\n    MobSpawnListener.skeletonHolding = getConfig(). getItemStack(\"Skeleton.holding\");\n}\n```", "```java\npublic class MobSpawnListener implements Listener {\n    static boolean giveArmorToMobs;\n    static ItemStack zombieHolding;\n    static ItemStack skeletonHolding;\n```", "```java\n//Register all of the EventHandlers\ngetServer().getPluginManager().registerEvents(new MobSpawnListener(), this);\n\n//Register the Executor of the /mobenhancerreload command\ngetCommand(\"mobenhancerreload\").setExecutor(new MobEnhancerReloadCommand());\n```"]