["```java\nscala> import scala.reflect.runtime.universe._ \nimport scala.reflect.runtime.universe._ \n```", "```java\nscala> val expr = reify {class Car {val segment=\"SUV\"; def name=\"Q7\"}} \nexpr: reflect.runtime.universe.Expr[Unit] = \nExpr[Unit]({ \n  class Car extends AnyRef { \n    def <init>() = { \n      super.<init>(); \n      () \n    }; \n    val segment = \"SUV\"; \n    def name = \"Q7\" \n  }; \n  () \n}) \n```", "```java\nscala> showRaw(expr.tree) \nres0: String = Block(List(ClassDef(Modifiers(), TypeName(\"Car\"), List(), Template(List(Ident(TypeName(\"AnyRef\"))), noSelfType, List(DefDef(Modifiers(), termNames.CONSTRUCTOR, List(), List(List()), TypeTree(), Block(List(Apply(Select(Super(This(typeNames.EMPTY), typeNames.EMPTY), termNames.CONSTRUCTOR), List())), Literal(Constant(())))), ValDef(Modifiers(), TermName(\"segment\"), TypeTree(), Literal(Constant(\"SUV\"))), DefDef(Modifiers(), TermName(\"name\"), List(), List(), TypeTree(), Literal(Constant(\"Q7\"))))))), Literal(Constant(()))) \n```", "```java\nscala> val a = 10\na: Int = 10\n```", "```java\nscala> a = 12\n<console>:12: error: reassignment to val\n    a = 12\n```", "```java\nscala> var b = 10\nb: Int = 10\n```", "```java\nscala> b = 12\nb: Int = 12\n```", "```java\nscala> val a: String = \"I can be inferred.\"\na: String = I can be inferred.\n```", "```java\nscala> val a: Int = \"12\"\n<console>:11: error: type mismatch;\nfound : String(\"12\")\nrequired: Int\n    val a: Int = \"12\"\n```", "```java\nscala> val num = 002\n<console>:1: error: Decimal integer literals may not have a leading zero. (Octal syntax is obsolete.)\nval num = 002\n    ^\n```", "```java\nscala> 0xFF\nres0: Int = 255\n```", "```java\nscala> val aByte: Byte = 12\naByte: Byte = 12\n```", "```java\nscala> val aByte: Byte = 123456\n<console>:20: error: type mismatch;\nfound : Int(123456)\nrequired: Byte\n    val aByte: Byte = 123456\n```", "```java\nscala> val outOfRange = 123456789101112131415\n<console>:1: error: integer number too large\nval outOfRange = 123456789101112131415\n```", "```java\nscala> val aLong = 909L\naLong: Long = 909\n\nscala> val aLong = 909l\naLong: Long = 909\n\nscala> val anotherLong: Long = 1\nanotherLong: Long = 1\n```", "```java\nscala> val aByte : Byte = 1\naByte: Byte = 1\n\nscala> val aShort : Short = 1\naShort: Short = 1\n```", "```java\nscala> val a = 1\\. //Not possible!\n```", "```java\nscala> val aDoubleByDefault = 1.0\naDoubleByDefault: Double = 1.0\n```", "```java\nscala> val aFloat: Float = 1.0 //Compile Error!\nscala> val aFloat: Float = 1.0F //Works\nscala> val aFloat: Float = 1.0f //Works\n```", "```java\nscala> val aFloat: Float = 1.0\n<console>:11: error: type mismatch;\nfound : Double(1.0)\nrequired: Float\n    val aFloat: Float = 1.0\n        ^\n```", "```java\nscala> val aBool: Boolean = 1\n<console>:11: error: type mismatch;\nfound : Int(1)\nrequired: Boolean\n    val aBool: Boolean = 1\n        ^\n```", "```java\nscala> val aBool = true\naBool: Boolean = true\nscala> val aBool = false\naBool: Boolean = false\n```", "```java\nscala> val aChar = '\\'\n<console>:1: error: unclosed character literal\nval aChar = '\\'\n```", "```java\nscala> val doublequotes = \"\\\"\"\ndoublequotes: String = \"\nscala> val aString = doublequotes + \"treatme a string\" + doublequotes\naString: String = \"treatme a string\"\n```", "```java\nscala> val c = '\\u0101'\nc: Char = ā\n```", "```java\nscala> val boringString = \"I am a String Literal.\"\nboringString: String = I am a String Literal.\n```", "```java\nscala> val interestingString = \"\"\"I am an Interesting String\n    | Also span in multiple Lines!\n    | Ok, That's it about me\"\"\"\ninterestingString: String =\n\"I am an Interesting String\n```", "```java\nAlso span in multiple Lines!\nOk, That's it about me\"\n```", "```java\nscala> val aString = \"\"\" / \" ' \"\"\"\naString: String = \" / \" ' \"\nscala> println(aString)\n\n/ \" '\n```", "```java\nscala> val aSymbol = 'givenName\naSymbol: Symbol = 'givenName\n\nscala> aSymbol.name\nres10: String = givenName\n```", "```java\nscala> import scala.reflect.runtime.universe._\nimport scala.reflect.runtime.universe._\n\nscala> typeOf[Symbol]\nres12:reflect.runtime.universe.Type= scala.reflect.runtime.universe.Symbol\n```", "```java\nscala> val aTuple = (\"Val1\", \"Val2\", \"Val3\")\naTuple: (String, String, String) = (Val1,Val2,Val3)\nscala> println(\"Value1 is: \" + aTuple._1)\nValue1 is: Val1\n```", "```java\naTuple: (String, String, String) = (Val1,Val2,Val3)\n```", "```java\nscala> val smartPair = 1 -> \"One\"\nsmartPair: (Int, String) = (1,One)\n```", "```java\nInt => String\n```", "```java\nscala> val x = 10 //x is an object of Type Int\nx: Int = 10  //x is assigned value 10\n\nscala> val y = 16 //y is an object of Type Int\ny: Int = 16 //y is assigned value 16\n\nscala> val z = x + y //z is addition of x and y's value\nz: Int = 26\n```", "```java\nscala> def +(x: Int): Int = ??? //Some definition\n$plus: (x: Int)Int\n```", "```java\nscala> val aCharAndAnInt = 12 + 'a'\naCharAndAnInt: Int = 109\n```", "```java\nscala> def +(x: Char): Int = ???\n$plus: (x: Char)Int\n```", "```java\nimport java.util.UUID\n\nclass Item {\n val id: UUID = UUID.randomUUID()\n }\n\nclass ElectronicItem(val name: String, val subCategory: String) extends Item {\nval uuid: String = \"Elec_\" + id\n}\n\nobject CartApp extends App {\n\n def showItem(item: ElectronicItem) = println(s\"Item id: ${item.id} uuid: ${item.uuid} name: ${item.name}\")\n\n  showItem(new ElectronicItem(\"Xperia\", \"Mobiles\"))\n  showItem(new ElectronicItem(\"IPhone\", \"Mobiles\"))\n }\n```", "```java\nItem id: 16227ef3-2569-42b3-8c5e-b850474da9c4 uuid: Elec_16227ef3-2569-42b3-8c5e-b850474da9c4 name: Xperia\n\nItem id: 1ea8b6af-9cf0-4f38-aefb-cd312619a9d3 uuid: Elec_1ea8b6af-9cf0-4f38-aefb-cd312619a9d3 name: IPhone\n```", "```java\nfinal def  !=  (that: Any): Boolean \nfinal def  ==  (that: Any): Boolean\ndef isInstanceOf[a]: Boolean\ndef equals(that: Any): Boolean\ndef ##: Int\ndef hashCode: Int\ndef toString: String\n```", "```java\ndef checkIF10AndReturn20(x: Int): Int =  {\n  if(x == 10)\n    x * 2\n  else \n    throw new Exception(\"Sorry, Value wasn't 10\")\n }\n```", "```java\nscala> val treatMeAString = \"Invisible\"\ntreatMeAString: String = Invisible\n```", "```java\ndefcheckMeImaString(x: Boolean) = if(x) \"True\"else \"False\"\n```", "```java\ndef recursiveFactorial(n: Int) = if(n == 0) 1 else recursiveFactorial(n-1) \n//Recursive method recursiveFactorial needs result type\n```", "```java\nscala> val x = x => x\n<console>:11: error: missing parameter type\n       val x = x => x\n```", "```java\nscala> List(1,4,6,7,9).filter(_+1 > 5)\nres0: List[Int] = List(6, 7, 9)\n```", "```java\nscala> val x = 1 + 10\nx: Int = 11\n```", "```java\nscala> val y = 1 + 'a'\ny: Int = 98\n```", "```java\nclass Amount(val amt: Double) {\n\n  def taxApplied(tax: Double) = this.amt * tax/100 + this.amt\n\n }\n\nobject Order extends App {\n  val tax = 10\n  val firstOrderAmount = 130\n\n  def amountAfterTax(amount: Amount) = amount taxApplied tax\n\n  println(s\"Total Amount for order:: ${amountAfterTax(new Amount(firstOrderAmount))}\")\n }\n```", "```java\nTotal Amount for order:: 143.0\n```", "```java\n> amount taxApplied tax\n```", "```java\nscala> val firstString = \"I am a String\"\nfirstString: String = I am a String\n\nscala> firstString indexOf 'a'\nres1: Int = 2\n```", "```java\nscala> def truthTeller(lie: Boolean) = !lie\ntruthTeller: (lie: Boolean)Boolean\n\nscala> truthTeller(false)\nres2: Boolean = true\n```", "```java\nscala> def truthTeller(lie: Boolean) = lie.unary_!\ntruthTeller: (lie: Boolean)Boolean\n```", "```java\nscala> 1.toString\nres4: String = 1\n\nscala> \"1\".toInt\nres5: Int = 1\n\nscala> \"ABC\".toLowerCase\nres7: String = abc\n```", "```java\nscala> val x = 10 - 1\nx: Int = 9\n\nscala> val y = 10 * 1\ny: Int = 10\n\nscala> val z = 10 / 1\nz: Int = 10\n\nscala> val yx = 10 % 9\nyx: Int = 1\n```", "```java\nscala> val yx = 10 % 9.0\nyx: Double = 1.0\n```", "```java\nscala> val equal_op = 10 == 10\nequal_op: Boolean = true\n\nscala> val not_eq_op = 10 != 10\nnot_eq_op: Boolean = false\n\nscala> val gt_than_op = 10 > 10\ngt_than_op: Boolean = false\n\nscala> val gt_than_op = 11 > 10\ngt_than_op: Boolean = true\n\nscala> val lt_than_op = 11 < 10\nlt_than_op: Boolean = false\n\nscala> val gt_eq_op = 11 >= 11\ngt_eq_op: Boolean = true\n\nscala> val lt_eq_op = 11 <= 11\nlt_eq_op: Boolean = true\n```", "```java\nscala> val log_not = !true\nlog_not: Boolean = false\n\nscala> val log_or = true || false\nlog_or: Boolean = true\n\nscala> val log_and = true && true\nlog_and: Boolean = true\n```", "```java\nscala> 1 & 2\nres2: Int = 0\n\nscala> 1 | 2\nres3: Int = 3\n\nscala> 1 ^ 2\nres5: Int = 3\n```", "```java\nscala> ~2\nres8: Int = -3\n```", "```java\nscala> 2 + 3 * 4 / 2 - 1\nres15: Int = 7\n```", "```java\nscala> 1 + 2 + 3 * 3 * 4 - 1\nres16: Int = 38\n```", "```java\nscala> val x = 10\nx: Int = 10\n\nscala> x.isValidByte\nres1: Boolean = true\n```", "```java\nscala> val x = 260\nx: Int = 260\n\nscala> x.isValidByte\nres2: Boolean = false\n\nscala> val x = 127\nx: Int = 127\n\nscala> x.isValidByte\nres3: Boolean = true\n```", "```java\nscala> val x = \"I am a String\"\nx: String = I am a String\nscala> x.charAt(5)\nres13: Char = a\n```", "```java\nscala> x.capitalize\nres14: String = I am a String\n\nscala> x.toUpperCase\nres15: String = I AM A STRING\n\nscala> x.toLowerCase\nres16: String = i am a string\n```", "```java\nscala> val rangeOfNumbers = 1 to 199\nrangeOfNumbers: scala.collection.immutable.Range.Inclusive = Range 1 to 199\n\nscala> val rangeOfNumbersUntil = 1 until 199\nrangeOfNumbersUntil: scala.collection.immutable.Range = Range 1 until 199\n\nscala> rangeOfNumbers contains 1\nres17: Boolean = true\n\nscala> rangeOfNumbersUntil contains 1\nres18: Boolean = true\n\nscala> rangeOfNumbersUntil contains 199\nres19: Boolean = false\n\nscala> rangeOfNumbers contains 199\nres20: Boolean = true\n```", "```java\nscala> 1 to 10 by 2 foreach println\n```", "```java\n1\n3\n5\n7\n9\n```", "```java\nprintln(s\"Total Amount for order:: ${amountAfterTax(new Amount(firstOrderAmount))}\")\n```", "```java\nscala> val myAge = s\"I completed my $age.\"\nmyAge: String = I completed my 25.\n```", "```java\nscala> val nextYearAge = s\"Next Year, I'll complete ${age + 1}.\"\nnextYearAge: String = Next Year, I'll complete 26.\n```", "```java\nscala> def incrementBy1(x: Int) = x + 1\nincrementBy1: (x: Int)Int\n\nscala> val nextYearAge = s\"Next Year, I'll complete ${incrementBy1(age)}.\"\nnextYearAge: String = Next Year, I'll complete 26.\n```", "```java\nscala> val amount = 100\namount: Int = 100\nscala> val firstOrderAmount = f\"Your total amount is: $amount%.2f\"\nfirstOrderAmount: String = Your total amount is: 100.00\n```", "```java\nscala> val rawString = raw\"I have no escape \\n character in the String \\n \"\nrawString: String = \"I have no escape \\n character in the String \\n \"\n```", "```java\nscala> val rawString = \"I have no escape \\n character in the String \\n \"\nrawString: String =\n\"I have no escape\ncharacter in the String\n\"\n```"]