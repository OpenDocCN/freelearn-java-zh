["```java\nclass FunctionLiterals {\n  val sum = (a: Int, b: Int) => a + b\n}\n\nobject FunctionLiterals {\n\n  def main(args: Array[String]): Unit = {\n    val obj = new FunctionLiterals\n    System.out.println(s\"3 + 9 = ${obj.sum(3, 9)}\")\n  }\n}\n```", "```java\ndef runOperation(f: (Int, Int) => Int, a: Int, b: Int): Int = {\n  f(a, b)\n}\n```", "```java\nobj.runOperation(obj.sum, 10, 20)\nobj.runOperation(Math.max, 10, 20)\n```", "```java\nclass SumFunction extends Function2[Int, Int, Int] {\n  override def apply(v1: Int, v2: Int): Int = v1 + v2\n}\n\nclass FunctionObjects {\n  val sum = new SumFunction\n\n  def runOperation(f: (Int, Int) => Int, a: Int, b: Int): Int = f(a, b)\n}\n\nobject FunctionObjects {\n\n  def main(args: Array[String]): Unit = {\n    val obj = new FunctionObjects\n    System.out.println(s\"3 + 9 = ${obj.sum(3, 9)}\")\n    System.out.println(s\"Calling run operation: ${obj.\n    runOperation(obj.sum, 10, 20)}\")\n    System.out.println(s\"Using Math.max: ${obj.runOperation(Math.max,\n     10, 20)}\")\n  }\n}\n```", "```java\nsealed abstract trait Month\ncase object January extends Month\ncase object February extends Month\ncase object March extends Month\ncase object April extends Month\ncase object May extends Month\ncase object June extends Month\ncase object July extends Month\ncase object August extends Month\ncase object September extends Month\ncase object October extends Month\ncase object November extends Month\ncase object December extends Month\n\nobject MonthDemo {\n  def main(args: Array[String]): Unit = {\n    val month: Month = February\n    System.out.println(s\"The current month is: $month\")\n  }\n}\n```", "```java\nThe current month is: February\n```", "```java\nsealed case class RGB(red: Int, green: Int, blue: Int)\n\nobject RGBDemo {\n  def main(args: Array[String]): Unit = {\n    val magenta = RGB(255, 0, 255)\n    System.out.println(s\"Magenta in RGB is: $magenta\")\n  }\n}\n```", "```java\nsealed abstract trait Shape\ncase class Circle(radius: Double) extends Shape\ncase class Rectangle(height: Double, width: Double) extends Shape\n```", "```java\ncase class Point(x: Double, y: Double)\n\nsealed abstract trait Shape\ncase class Circle(centre: Point, radius: Double) extends Shape\ncase class Rectangle(topLeft: Point, height: Double, width: Double) extends Shape\n```", "```java\nobject Month {\n  def toInt(month: Month): Int =\n    month match {\n      case January => 1\n      case February => 2\n      case March => 3\n      case April => 4\n      case May => 5\n      case June => 6\n      case July => 7\n      case August => 8\n      case September => 9\n      case October => 10\n      case November => 11\n      case December => 12\n    }\n}\n```", "```java\nSystem.out.println(s\"The current month is: $month and it's number ${Month.toInt(month)}\")\n```", "```java\nThe current month is: February and it's number 2\n```", "```java\nWarning:(19, 5) match may not be exhaustive.\nIt would fail on the following input: February\n    month match {\n    ^\n```", "```java\ncase _ => 0\n```", "```java\nobject Shape {\n  def area(shape: Shape): Double =\n    shape match {\n      case Circle(Point(x, y), radius) => Math.PI * Math.pow(radius, 2)\n      case Rectangle(_, h, w) => h * w\n    }\n}\n```", "```java\nobject ShapeDemo {\n  def main(args: Array[String]): Unit = {\n    val circle = Circle(Point(1, 2), 2.5)\n    val rect = Rectangle(Point(6, 7), 5, 6)\n\n    System.out.println(s\"The circle area is: ${Shape.area(circle)}\")\n    System.out.println(s\"The rectangle area is: ${Shape.area(rect)}\")\n  }\n}\n```", "```java\nThe circle area is: 19.634954084936208\nThe rectangle area is: 30.0\n```", "```java\ntrait Tick {\n  trait Ticker {\n    def count(): Int\n    def tick(): Unit\n  }\n  def ticker: Ticker\n}\n```", "```java\ntrait TickUser extends Tick {\n  class TickUserImpl extends Ticker {\n    var curr = 0\n\n    override def count(): Int = curr\n\n    override def tick(): Unit = {\n      curr = curr + 1\n    }\n  }\n  object ticker extends TickUserImpl\n}\n```", "```java\ntrait Alarm {\n  trait Alarmer {\n    def trigger(): Unit\n  }\n  def alarm: Alarmer\n}\n```", "```java\ntrait AlarmUser extends Alarm with Tick {\n  class AlarmUserImpl extends Alarmer {\n    override def trigger(): Unit = {\n      if (ticker.count() % 10 == 0) {\n        System.out.println(s\"Alarm triggered at ${ticker.count()}!\")\n      }\n    }\n  }\n  object alarm extends AlarmUserImpl\n}\n```", "```java\nobject ModuleDemo extends AlarmUser with TickUser {\n  def main(args: Array[String]): Unit = {\n    System.out.println(\"Running the ticker. Should trigger the alarm\n    every 10 times.\")\n    (1 to 100).foreach {\n      case i =>\n        ticker.tick()\n        alarm.trigger()\n    }\n  }\n}\n```", "```java\nRunning the ticker. Should trigger the alarm every 10 times.\nAlarm triggered at 10!\nAlarm triggered at 20!\nAlarm triggered at 30!\nAlarm triggered at 40!\nAlarm triggered at 50!\nAlarm triggered at 60!\nAlarm triggered at 70!\nAlarm triggered at 80!\nAlarm triggered at 90!\nAlarm triggered at 100!\n```"]