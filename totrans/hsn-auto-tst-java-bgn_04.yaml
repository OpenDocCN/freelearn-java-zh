- en: Building Blocks for Java Programs &#x2013; Loops and Conditions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Loops and conditions are the building blocks of Java programs. This chapter
    will help us understand the important loops and conditions through examples. Learning
    these loops and conditions in Java will make writing code easier.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The for loop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The if...else condition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The while loop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nested loops
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The for loop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s see how the `for` loop works. The `for` loop is one of the most commonly
    used loops in Java programs, and it it is very important to understand how it
    works internally. So, let''s say we want to print the numbers from 1 to 100 using
    the `for`loop. For the syntax to execute the numbers from 1 to 100 in a sequence
    and to write that in a `for` loop, we will simply write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Since we want to print `0`, `1`, `2`, `3`, we use `i++`. This means for every
    loop, it increments only by  `1`. And while looping, each time, it also checks
    whether the preceding condition is satisfied. So, if `1` is less than `100`, it
    goes inside; if `2` is less than `100`, it goes inside. Until this condition is
    satisfied, it will keep on looping. When the value of `i` reaches `100`, `100` is
    less than `100`, which is false. At that time, it terminates the loop and comes
    out of it. We will use a basic example here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To run test cases in debug mode in the IDE, double-click at the location shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8aaee5c9-6a2c-43ac-aa74-c02f5b8cb927.png)'
  prefs: []
  type: TYPE_IMG
- en: Line from which the debugging begins
  prefs: []
  type: TYPE_NORMAL
- en: 'When you see the blue icon, run that in the debug mode by clicking the insects-like
    symbol. It will ask you to launch in debug mode. Just click on Save to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b08a7a2c-5824-45ab-b87f-1e0a39473d1b.png)'
  prefs: []
  type: TYPE_IMG
- en: Debug icon at the top of the editor
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see all the variable values here. Step by step, we''ll go inside the
    loop, and will execute the next step of the program:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/efed05a3-dcc2-44de-8712-6fa2acd0e277.png)'
  prefs: []
  type: TYPE_IMG
- en: Variable value while debugging
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, when it reaches the value `4`, and is incremented by `1` again, it
    is `5`. Note that it comes out of the loop without going inside that after the
    value becomes `5`. So, that means the condition is no longer satisfied and the
    loop will run five times. The output is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0142eecc-269f-461a-9c7d-bfb6ce86e060.png)'
  prefs: []
  type: TYPE_IMG
- en: Final output as per the code
  prefs: []
  type: TYPE_NORMAL
- en: So, that's how the `for` loop works.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if we set the condition to the following, it will not go inside the `for` loop,
    even for the first time since, the condition is false.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: On running the preceding condition in in the debug mode, the complete loop is
    skipped,and nothing is seen in the output.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see another example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This is how the `for` loop works internally.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will learn about the `if...else` and `do...while` loops.
  prefs: []
  type: TYPE_NORMAL
- en: if...else condition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we learn the `while` and `do...while` loops, we will discuss the `if`
    condition in this section. In a Java program, when the `if` conditional statement
    is used, the statement in the `if` block is executed only if the condition is
    satisfied. Otherwise the statement from `else` block is run. Also this execution
    is just takes place once. In a `for` loop, a variable is initiated and the loop
    runs till the condition is satisfied.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, in the `if` case, it will not keep on looping. It will just go inside
    the loop once the `if` condition is satisfied; otherwise, it will go into the
    `else` block. So, control will execute the statements present in this `else` block,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4c8a86a1-3c08-4821-861f-825c7fcc5da4.png)'
  prefs: []
  type: TYPE_IMG
- en: Output of the if...else condition as per the code
  prefs: []
  type: TYPE_NORMAL
- en: But all this happens only once, unlike the `for` loop, where a condition is
    satisfied until it goes back and executes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot displays those errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fb0e677a-3ca2-4043-b08f-174fbb5b5db0.png)'
  prefs: []
  type: TYPE_IMG
- en: Quick fixes drop down with suggestions to correct the code error
  prefs: []
  type: TYPE_NORMAL
- en: 'The first error is to remove the including condition, which can be ignored.
    On running the preceding program, you will see the output as `success` because
    the condition `5` greater than `2` that went inside is true:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f7022ae4-60cb-484f-ba03-1aeef6950efe.png)'
  prefs: []
  type: TYPE_IMG
- en: Output displays success as per the code
  prefs: []
  type: TYPE_NORMAL
- en: If we change the condition and make `5` less than `2`, making the condition
    false, it will skip to the `else` block and execute the statement present in `else`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ff440aae-1b9c-4108-a23e-5743b9c68173.png)'
  prefs: []
  type: TYPE_IMG
- en: code to receive fail as the output
  prefs: []
  type: TYPE_NORMAL
- en: 'This time the output should be `fail`, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/08efbbda-6a40-4a3c-94d0-21201524e20c.png)'
  prefs: []
  type: TYPE_IMG
- en: Output displays success as per the code
  prefs: []
  type: TYPE_NORMAL
- en: This is how the `if` condition works.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that if there is only a single line in your block, then you can get rid
    of these braces, because it eventually assumes that the next line will be executed
    if the condition is true. This means if you just have a single line in your block,
    then you can get rid of the braces. But if you want to have more than one statement,
    if your condition is true, then make sure you write that in braces to avoid conflict.
    If you do not specify the braces, it will still print as `success`, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2c1551ea-22ed-4bd1-bee1-09fa506a241d.png)'
  prefs: []
  type: TYPE_IMG
- en: Output displays success after modifying the code
  prefs: []
  type: TYPE_NORMAL
- en: Here, `5` is greater than `2`. On running this, the program will run without
    braces.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, on adding one more statement, say `"second step"`, it throws an error,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5f56dfe4-3c35-4def-9ada-6f9c46bc7967.png)'
  prefs: []
  type: TYPE_IMG
- en: Error is flagged with a cross mark besides the line number, showing syntax error
  prefs: []
  type: TYPE_NORMAL
- en: Notice the syntax error on the token in the preceding screenshot. Either you
    should keep a brace or you should avoid this step. To get rid of that, we will
    just keep the entire block in the brace. In this way, the error goes away.
  prefs: []
  type: TYPE_NORMAL
- en: Bringing the if...else condition in the for loop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let us bring the `if...else` condition into the `for` loop. Let''s add
    the following to our code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Since there is only one statement here, we won't be writing it in the braces. Now,
    let's analyze this. The values will begin to enter the `for` loop from zero until
    the value is less than `10`.
  prefs: []
  type: TYPE_NORMAL
- en: 'On entering the `for` loop, it will check if the first value, `0`, is equal
    to `8`. Since it is not equal, it will display `"I didnot find"`. Now, for the
    second time, `2` will be added to `0` (as per our set condition). Notice that
    this new value is still not equal to `8`; hence the output will remain same for values
    `0`, `2`, `4`, and `6`. Next, when `8` goes inside the `for` loop, the condition
    is satisfied and the `" 8 is displayed"` statement is displayed as the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8c71b43a-21c1-4dd2-a8a9-2f73d9d39404.png)'
  prefs: []
  type: TYPE_IMG
- en: '"8 is displayed" and "I didnot find" is displayed as the output'
  prefs: []
  type: TYPE_NORMAL
- en: Now, if we say `i=9`, it will never be printed because the condition we set
    is `i+2`, which will be an incremental even number. This means that the condition
    is not satisfied and the very next step after the `if` condition is not executed.
    Thus, we can say that, if a condition is true, only then will it be executed;
    if not, the conditions or the statements present in the `else` block will be executed.
    And when you run this, you always get the output as `"I did not find"`.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, if we write the following syntax, we will get the output as `"9 is
    displayed"`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This is how the `if...else` condition works using the `for` loop. In the next
    section, we will learn about `for` loops in detail.
  prefs: []
  type: TYPE_NORMAL
- en: The while loop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will learn the `while` loop in detail. First, create a
    new class. Now let us see how we can utilize this `while` loop when programming
    our code. Let''s say we want to print the numbers from 1 to 10, sequentially.
    How do we print this using the `while` loop? The basic syntax of the `while` loop
    is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'And here, if the Boolean expression returns `true`, only then will the control
    go inside this loop, whereas if the expression returns `false`, then the control
    will not go inside the loop. That''s the basic simple concept you have with the
    `while` loop. Now let''s say we want to bring in the numbers from 1 to 10\. For
    this, we will write the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, in the preceding code example, we can see that that the given
    condition is true. So, it goes inside the loop and prints the value of `i`. This
    loop keeps on executing until the expression evaluates to false. As per our example,
    the condition will always be true; thus, it will go to the infinite loop and print
    zero.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how the `while` loop works. Unless the condition becomes false in this
    argument, this loop will never stop executing. Now, what if we increment after
    printing the variable? Let''s see what happens when we do that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as that shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a85aed48-a67a-4728-ac07-197732c9b00a.png)'
  prefs: []
  type: TYPE_IMG
- en: Output of the while condition as per the code
  prefs: []
  type: TYPE_NORMAL
- en: 'If we use the following condition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The new output will be:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e3cd184f-cdc3-4586-9c75-a5b9d32a5402.png)'
  prefs: []
  type: TYPE_IMG
- en: Output of the while condition after modifying the code
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, you you can reverse the condition, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The output will go to infinite, since the numbers keep on increasing because
    `10` is greater than `0`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we use the decrement condition, it will keep on decreasing until the condition
    becomes false. After that, it will exit the loop, as shown in the following code
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for the preceding code example will be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: So, this is how we can use the `while` loop syntax in our Java program. In the
    next section, we will see how to work on the `do...while` loop.
  prefs: []
  type: TYPE_NORMAL
- en: The do...while loop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The syntax of the `do...while` loop is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s consider the following example, where we want to print the numbers from
    20 to 30:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code will print `20`, `21`, `22` until `29` as the output. Thus,
    first it executes and then it compares.
  prefs: []
  type: TYPE_NORMAL
- en: The basic difference between the `while` and `do...while` loop is that the `while`
    loop will not execute without evaluating the Boolean expression, and the `do...while`
    loop first executes for one loop and then evaluates to run for more loops.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s consider the following example, where the value of the variable is greater
    than `30`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Here, the output will be `20`, while the script after that will be terminated because,
    as mentioned earlier in this section, in the `do...while` loop, execution of one
    loop is guaranteed. If you run same logic in this `while` loop, even for the first
    time, it will not run.
  prefs: []
  type: TYPE_NORMAL
- en: So, in the next section, we will try to do one exercise based on the `for` loop,
    the `while` loop, the `do...while` loop, and the `if` condition. These programs
    will be good hands-on learning for understanding the loops.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will learn how the nested loops work.
  prefs: []
  type: TYPE_NORMAL
- en: Nested loops
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is one of the most important concepts. All the programming logic comes
    from the nested loops. If you can grasp the concept behind it, it will be easy
    for you to solve the programming examples in Java. So, first of all, I will write
    one syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding syntax means that the loop will run four times. What if we write
    one more `for` loop inside the preceding block? The concept of implementing a
    loop within a loop is called **nested loops**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Thus, one looping system is completed when we finish the preceding iteration
    once. To finish one outer loop, we have to complete all four inner loops. This
    means that we will have to run this inner loop 16 times (four times four) to just
    finish this outer loop four times.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ae3324e7-541a-43bf-8fc4-d712bd9f3431.png)'
  prefs: []
  type: TYPE_IMG
- en: Output of the nested loops as per the code
  prefs: []
  type: TYPE_NORMAL
- en: Further ahead, the concept of `for` loops will be used more often. To understand
    the concept of `for` loops, let's try to solve a few examples.
  prefs: []
  type: TYPE_NORMAL
- en: Example 1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Write the code for the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'As we can observe in the output, for every line, one number is decrementing.
    We will look at the concept of the outer loop and inner loop here. The code will
    be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Example 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Write the code for the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, the output used in this example is the reverse of the output
    from first example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Example 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a similar fashion, there is one more program, called sorting numbers
  prefs: []
  type: TYPE_NORMAL
- en: 'Write the code for the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The code for the preceding output will be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the use of easy examples, we learned how to use the `if...else` condition
    in Java. We also saw how to use the `for` loop and the `while` loops to get the
    desired outputs. Moving further ahead, we learned how to use the nested `for`
    loops to get the outputs in certain patterns.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will go through some important concepts, such as interfaces,
    how they work, and their usage in Java. We will also discuss inheritance using
    a practical example.
  prefs: []
  type: TYPE_NORMAL
