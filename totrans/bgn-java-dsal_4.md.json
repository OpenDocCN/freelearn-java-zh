["```java\nCollections.sort(sortedActivities, (o1, o2) -> Integer.signum(o1.finish - o2.finish));\nif (sortedActivities.size() > 0)\n  selected.add(sortedActivities.get(0));\nfor (int i = 1; i < sortedActivities.size(); i++)\n  if (sortedActivities.get(i).start >= selected.get(selected.size() - 1).finish)\n    selected.add(sortedActivities.get(i));\n```", "```java\nfor (int i = 0; i < N - 1; i++) {\n  Node n = new Node();\n  n.left = pq.remove();\n  n.right = pq.remove();\n  n.frequency = n.left.frequency + n.right.frequency;\n  pq.add(n);\n}\n```", "```java\nPointPair bruteForce(List<Point> points) {\n  PointPair best = new PointPair(points.get(0), points.get(1));\n  for (int i = 2; i < points.size(); i++) {\n    for (int j = i - 1; j >= 0; j--) {\n      PointPair candidate = new PointPair(points.get(i), points.get(j));\n      if (candidate.distance() < best.distance())\n        best = candidate;\n    }\n  }\n  return best;\n}\n```", "```java\nCollections.sort(sortedPoints, (o1, o2) -> Integer.signum(o1.y - o2.y));\nfor (int i = 0; i < points.size(); i++) {\n  for (int j = i + 1; j < points.size() &&\n    (points.get(j).y - points.get(i).y) < best.distance(); j++) {\n     PointPair candidate = new PointPair(points.get(i), points.get(j));\n     if (candidate.distance() < best.distance())\n       best = candidate;\n  }\n}\n```", "```java\nbestWithStrip() method:\n```", "```java\nPointPair bestSoFar = bl;\nif (br.distance() < bl.distance())\n  bestSoFar = br;\nList<Point> strip = new ArrayList<>();\nfor (int i = 0; i < N; i++) {\n  if (Math.abs(points.get(i).x - midPoint.x) < bestSoFar.distance())\n      strip.add(points.get(i));\n}\nreturn bestWithStrip(strip, bestSoFar);\n```", "```java\npublic int recursiveAux(int W, int weights[], int values[], int n) {\n  if (n == 0 || W == 0)\n    return 0;\n  if (weights[n - 1] > W)\n    return recursiveAux(W, weights, values, n - 1);\n  return Math.max(values[n - 1] +\n   recursiveAux(W - weights[n - 1], weights, values, n - 1),\n   recursiveAux(W, weights, values, n - 1));\n }\n```", "```java\npublic int topDownWithMemoizationAux(int W, int weights[], int values[], int n, int[][] memo) {\n  if (n == 0 || W == 0)\n    return 0;\n  if (memo[n][W] == -1) {\n    if (weights[n - 1] > W)\n      memo[n][W] = topDownWithMemoizationAux(W, weights, values, \n                   n - 1, memo);\n    else\n      memo[n][W] = Math.max(\n        values[n - 1] + topDownWithMemoizationAux(W - weights[n - 1], \n        weights, values, n - 1, memo),\n        topDownWithMemoizationAux(W, weights, values, n - 1, memo));\n  }\n  return memo[n][W];\n}\n```", "```java\npublic int topDownWithMemoizationAux(int W, int weights[], \n  int values[], int n, int[][] memo) {\n    if (n == 0 || W == 0)\n      return 0;\n      if (memo[n][W] == -1) {\n        if (weights[n - 1] > W)\n          memo[n][W] = topDownWithMemoizationAux(W, weights,\n            values, n - 1, memo);\n        else\n          memo[n][W] = Math.max(\n            values[n - 1] +\n            topDownWithMemoizationAux(W - weights[n - 1], \n            weights, values, n - 1, memo), \n            topDownWithMemoizationAux(W, weights,\n            values, n - 1, memo));\n      }\n      return memo[n][W];\n}  \n```", "```java\npublic int length(String x, String y) {\n  int m = x.length();\n  int n = y.length();\n  int[][] c = new int[m + 1][n + 1];\n  for (int i = 1; i <= m; i++) {\n    for (int j = 1; j <= n; j++) {\n      if (x.charAt(i - 1) == y.charAt(j - 1))\n        c[i][j] = c[i - 1][j - 1] + 1;\n      else\n        c[i][j] = Math.max(c[i - 1][j], c[i][j - 1]);\n    }\n  }\n  return c[m][n];\n}\n```"]