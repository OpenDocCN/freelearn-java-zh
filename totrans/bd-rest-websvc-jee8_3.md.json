["```java\n    @GET\n    @Produces(\"application/json\")\n    public Response v1() {\n        Map<String, String> version = \n          Collections.singletonMap(\"version\", \"v1\");\n        return Response.ok(version).build();\n    }\n```", "```java\n    @GET\n    @Produces(\"application/json\")\n    public Response v2() {\n        Map<String, String> version =    \n          Collections.singletonMap(\"version\", \"v2\");\n        return Response.ok(version).build();\n    }\n```", "```java\npublic class VersionResource {\n\n    /**\n     * MediaType implementation for the version resource in v1.\n     */\n    public static final MediaType V1 = new MediaType(\n \"application\", \"vnd.version.v1+json\");\n\n```", "```java\n    /**\n     * MediaType implementation for the version resource in v2.\n     */\n    public static final MediaType V2 = new MediaType(\n \"application\", \"vnd.version.v2+json\");\n```", "```java\n    @GET\n    @Produces({\"application/json, \n      \"application/vnd.version.v1+json\"})\n    public Response v1() {\n        Map<String, String> version = \n          Collections.singletonMap(\"version\", \"v1\");\n        return Response.ok(version).build();\n    }\n```", "```java\n    @GET\n    @Produces({\"application/json; qs=0.75\", \n      \"application/vnd.version.v1+json; qs=1.0\"})\n```", "```java\n    @GET\n    @Path(\"/me.jpg\")\n    @Produces(\"image/jpeg\")\n    public Response jpg() {\n        String path = context.getRealPath(\"/me.jpg\");\n        return Response.ok(new File(path))\n                .header(\"Content-Disposition\", \"attachment; \n                  filename=me.jpg\")\n                .build();\n    }\n\n```", "```java\n    @GET\n    @Path(\"/magic.gif\")\n    @Produces(\"image/gif\")\n    public Response gif() {\n        String path = context.getRealPath(\"/magic.gif\");\n        return Response.ok(new File(path)).build();\n    }\n```", "```java\n    @POST\n    @Consumes(MediaType.MULTIPART_FORM_DATA)\n    public Response upload(\n      @FormDataParam(\"file\") InputStream inputStream,\n      @FormDataParam(\"file\") FormDataContentDisposition fileInfo) {\n\n        String fileName = fileInfo.getFileName();\n        saveFile(inputStream, fileName);\n\n        URI uri = uriInfo.getBaseUriBuilder()\n          .path(DocumentsResource.class)\n          .path(fileName).build();\n        return Response.created(uri).build();\n    }\n```", "```java\n@Produces(MediaType.APPLICATION_JSON)\npublic class JsonbResource {\n    @GET\n    public JsonbPojo marshall() {\n        return jsonbPojo;\n    }\n```", "```java\n    @POST\n    public void unmarshall(JsonbPojo pojo) {\n        LOGGER.log(Level.INFO, \"Default Unmarshalled {0}\", pojo);\n        this.jsonbPojo = pojo;\n    }\n```", "```java\n    @GET\n    @Path(\"/custom\")\n    public String marshallCustom() {\n        return jsonb.toJson(customJsonbPojo);\n    }\n```", "```java\n    @Before\n    public void setUp() throws Exception {\n        JsonbConfig jsonbConfig = new JsonbConfig()\n                .withPropertyOrderStrategy(\n                  PropertyOrderStrategy.LEXICOGRAPHICAL)\n                .withNullValues(true)\n                .withPropertyNamingStrategy(PropertyNamingStrategy\n                   .LOWER_CASE_WITH_DASHES)\n                .withFormatting(false)\n                .withDateFormat(\"dd.MM.yyyy\", Locale.GERMANY)\n                .withBinaryDataStrategy(BinaryDataStrategy.BASE_64)\n                .withLocale(Locale.GERMANY);\n\n        jsonb = JsonbBuilder.create(jsonbConfig);\n    }\n```", "```java\n    @Test\n    public void testToJsonWithPlainPojo() {\n        PlainPojo pojo = PlainPojo.create();\n        String json = jsonb.toJson(pojo);\n        assertThat(json).isEqualTo(PLAIN_POJO_JSON);\n    }\n```", "```java\n    @JsonbPropertyOrder(value = {\"message\", \n      \"answerToEverything\", \"today\"})\n    public static class AnnotatedPojo {\n        @JsonbProperty(value = \"greeting\", nillable = true)\n        public String message;\n\n        @JsonbNumberFormat(\"#,##0.00\")\n        public Integer answerToEverything;\n\n        @JsonbDateFormat(\"MM/dd/yyyy\")\n        public LocalDate today;\n\n        @JsonbTransient\n        public BigDecimal invisible = BigDecimal.TEN;\n```", "```java\n    public void testJsonBuilder() {\n        JsonArray values = Json.createArrayBuilder()\n                .add(Json.createObjectBuilder()\n                        .add(\"aString\", \"Hello Json-P 1\")\n                        .add(\"aInteger\", 42)\n                        .add(\"aBoolean\", false)\n                        .add(\"aNullValue\", JsonValue.NULL)\n                        .build())\n```", "```java\n@Produces(MediaType.APPLICATION_JSON) \n   @GET\n    public JsonArray marshall() {\n        return jsonArray;\n    }\n```", "```java\n    @POST\n    @Consumes(MediaType.APPLICATION_JSON)\n    public void unmarshall(InputStream jsonBody) {\n        JsonReader reader = Json.createReader(jsonBody);\n        this.jsonArray = reader.readArray();\n\n        LOGGER.log(Level.INFO, \"Unmarshalled JSON-P {0}.\", jsonArray);\n    }\n```", "```java\n    @Test\n    public void testJsonPointer() {\n        JsonReader jsonReader = Json.createReader(new StringReader(\"\n          {\\\"aString\\\":\\\"Hello Json-P\\\",\\\"arrayOfInt\\\":[1,2,3]}\"));\n        JsonObject jsonObject = jsonReader.readObject();\n        JsonArray jsonArray = jsonObject.getJsonArray(\"arrayOfInt\");\n```", "```java\n        // access an array value by index\n        JsonPointer jsonPointer = Json.createPointer(\"/arrayOfInt/1\");\n        JsonValue jsonValue = jsonPointer.getValue(jsonObject);\n        assertThat(jsonValue).isInstanceOf(JsonNumber.class);\n        assertThat(jsonValue).isEqualTo(jsonArray.get(1));\n```", "```java\n        // replace the array value by index\n        jsonObject = jsonPointer.replace(jsonObject, \n          Json.createValue(42));\n        jsonArray = jsonObject.getJsonArray(\"arrayOfInt\");\n        assertThat(jsonArray.getInt(1)).isEqualTo(42);\n```", "```java\n        // remove the array value by index\n        jsonObject = jsonPointer.remove(jsonObject);\n        jsonArray = jsonObject.getJsonArray(\"arrayOfInt\");\n        assertThat(jsonArray.size()).isEqualTo(2);\n    }\n```", "```java\n    @Test\n    public void testJsonPatch() {\n        JsonReader jsonReader = Json.createReader(\n          new StringReader(\"{\\\"aString\\\":\n            \\\"Hello Json-P\\\",\\\"arrayOfInt\\\":[1,2,3]}\"));\n        JsonObject jsonObject = jsonReader.readObject();\n\n        JsonPatch patch = Json.createPatchBuilder()\n                .replace(\"/aString\", \"Patched Json-P.\")\n                .remove(\"/arrayOfInt/1\")\n                .build();\n\n        jsonObject = patch.apply(jsonObject);\n        assertThat(jsonObject.getString(\"aString\"))\n          .isEqualTo(\"Patched Json-P.\");\n        assertThat(jsonObject.getJsonArray(\"arrayOfInt\")\n          .size()).isEqualTo(2);\n    }\n```", "```java\n    @Test\n    public void testJsonDiff() {\n        JsonObject source = Json.createObjectBuilder()\n          .add(\"aString\", \"abc\").build();\n        JsonObject target = Json.createObjectBuilder()\n          .add(\"aString\", \"xyz\").build();\n\n        JsonPatch diff = Json.createDiff(source, target);\n        JsonObject replace = diff.toJsonArray().getJsonObject(0);\n        assertThat(replace.getString(\"op\")).isEqualTo(\"replace\");\n        assertThat(replace.getString(\"path\")).isEqualTo(\"/aString\");\n        assertThat(replace.getString(\"value\")).isEqualTo(\"xyz\");\n\n        source = diff.apply(source);\n        assertThat(source).isEqualTo(target);\n    }\n```", "```java\n    @PATCH\n    @Consumes(MediaType.APPLICATION_JSON_PATCH_JSON)\n    public void patch(JsonArray jsonPatchArray) {\n        LOGGER.log(Level.INFO, \"Unmarshalled JSON-P Patch {0}.\", \n          jsonPatchArray);\n\n        JsonPatch jsonPatch = Json.createPatchBuilder(jsonPatchArray)\n          .build();\n        this.jsonArray = jsonPatch.apply(jsonArray);\n        LOGGER.log(Level.INFO, \"Patched {0}.\", jsonArray);\n    }\n}\n```", "```java\n        @GET\n        @Path(\"/{isbn}\")\n        public Response book(@PathParam(\"isbn\") String isbn) {\n            Book book = books.get(isbn);\n            URI bookUri = createBookResourceUri(isbn, uriInfo);\n            URI authorUri = createAuthorResourceUri(book\n              .authorId, uriInfo);\n            return null;\n        }\n```", "```java\n    static URI createAuthorResourceUri(Integer authorId, \n      UriInfo uriInfo) {\n        return uriInfo.getBaseUriBuilder()\n                .path(HateosResource.class)\n                .path(HateosResource.class, \"author\")\n                .path(AuthorResource.class, \"author\")\n                .build(authorId);\n    }\n```", "```java\n            URI authorUri = createAuthorResourceUri(book\n              .authorId, uriInfo);\n```", "```java\n        private JsonObject asJsonObject(Book book, URI bookUri, \n          URI authorUri) {\n            return Json.createObjectBuilder()\n                    .add(\"isbn\", book.isbn)\n                    .add(\"title\", book.title)\n                    .add(\"_links\", Json.createObjectBuilder()\n                            .add(\"self\", Json.createObjectBuilder()\n                                    .add(\"href\", bookUri.toString()))\n                            .add(\"author\", Json.createObjectBuilder()\n                                    .add(\"href\", \n                                      authorUri.toString())))\n                    .build();\n        }\n```"]