["```java\nAwait.ready(future, 3 seconds)\n```", "```java\nclass HelloWorld extends Actor {\n```", "```java\nval log = Logging(context.system, this)\n\ndef receive = {\n  case Ping ⇒ log.info(\"Hello World\")\n}\n```", "```java\ncase object Ping\n```", "```java\ncontext stop self\n```", "```java\nakka.log-dead-letters=0\n```", "```java\nval system = ActorSystem()\nval helloWorld = system.actorOf(Props[HelloWorld], \"hello-world\")\nhelloWorld ! Ping\n```", "```java\nclass HelloName(name: String) extends Actor {\n  val log = Logging(context.system, this)\n\n  def receive = {\n    case \"say-hello\" ⇒ log.info(s\"Hello, $name\")\n  }\n}\n```", "```java\nobject HelloName {\n  def props(name: String): Props =\n    Props(classOf[HelloName], name)\n}\n```", "```java\nval system = ActorSystem(\"hello-custom\")\nval helloPerson = system.actorOf(HelloName.props(\"Awesome Person\"), \"hello-name\")\nval helloAlien = system.actorOf(HelloName.props(\"Alien Invaders\"), \"hello-aliens\")\nhelloPerson ! \"say-hello\"\nhelloAlien ! \"say-hello\"\nhelloAlien ! \"random-msg\"\n```", "```java\nclass Greeter extends Actor {\n  val log = Logging(context.system, this)\n\n  def receive = {\n    case SayHello(name) => log.info(s\"Greetings to $name\")\n    case Die =>\n      context stop self\n      sender ! Dead\n  }\n}\n```", "```java\ncase class SpawnGreeters(n: Int)\ncase class SayHello(name: String)\ncase class Execute(f: () => Unit)\ncase object JobDone\ncase class GreetersResolution(result: Try[ActorRef])\ncase class GreetersTerminated(result: List[Any])\ncase object GreetersCreationAuthorised\ncase object Die\ncase object Dead\n```", "```java\nclass GreetingsManager extends Actor {\n  val log = Logging(context.system, this)\n\n  def baseReceive: Receive = {\n    case SpawnGreeters(n) =>\n      log.info(\"Spawning {} greeters\", n)\n      resolveGreeters()\n      context become spawningGreeters(sender, n)\n\n    case msg@SayHello(_) =>\n      resolveGreeters()\n      context become sayingHello(sender, msg)\n  }\n\n  def receive = baseReceive\n/*To be continued...*/\n}\n```", "```java\ndef greeterFromId(id: Any) = s\"greeter-$id\"\n\ndef resolveGreeters() =\n  context.actorSelection(greeterFromId(\"*\")).resolveOne(1 second)\n    .transformWith {\n      case s@Success(_) => Future.successful(s)\n      case f@Failure(_) => Future.successful(f)\n    }\n    .map(GreetersResolution) pipeTo self\n```", "```java\nakka://default/user/hello-world\n```", "```java\n/*...*/\n  .map(GreetersResolution) pipeTo self\n```", "```java\n.transformWith {\n  case s@Success(_) => Future.successful(s)\n  case f@Failure(_) => Future.successful(f)\n}\n.map(GreetersResolution)\n```", "```java\ncase \"resolve\" =>\n  val selection = context.actorSelection(greeterFromId(\"*\"))\n  selection.resolveOne(1 second).onComplete { res =>\n    log.info(s\"Selection: $selection; Res: $res\") }\n```", "```java\nimplicit val timeout: Timeout = 3 seconds\nval system = ActorSystem(\"hierarchy-demo\")\nval gm = system.actorOf(Props[this.GreetingsManager], \"greetings-manager\")\n\nAwait.ready(for {\n  _ <- Future { gm ! \"resolve\" }\n  _ <- gm ? SpawnGreeters(10)\n  _ <- (1 to 10).toList.traverse(_ => Future { gm ! \"resolve\" })\n} yield (), 5 seconds)\n```", "```java\n_ <- Future { gm ! \"resolve\" }\n```", "```java\n_ <- gm ? SpawnGreeters(10)\n```", "```java\n_ <- (1 to 10).toList.traverse(_ => Future { gm ! \"resolve\" })\n```", "```java\ndef sayingHello(requester: ActorRef, msg: Any): Receive = {\n  case GreetersResolution(Failure(_)) =>\n    log.error(\"There are no greeters. Please create some first with SpawnGreeters message.\")\n    context become baseReceive\n    requester ! JobDone\n\n  case GreetersResolution(Success(_)) =>\n    log.info(s\"Dispatching message $msg to greeters\")\n    context.actorSelection(greeterFromId(\"*\")) ! msg\n    context become baseReceive\n    requester ! JobDone\n}\n```", "```java\ncase class GreetersResolution(result: Try[ActorRef])\n```", "```java\ncase GreetersResolution(Failure(_)) =>\n  log.error(\"There are no greeters. Please create some first with SpawnGreeters message.\")\n  context become baseReceive\n  requester ! JobDone\n```", "```java\ncase GreetersResolution(Success(_)) =>\n  log.info(s\"Dispatching message $msg to greeters\")\n  context.actorSelection(greeterFromId(\"*\")) ! msg\n  context become baseReceive\n  requester ! JobDone\n```", "```java\ndef spawningGreeters(requester: ActorRef, numGreeters: Int): Receive = {\n  case GreetersResolution(Failure(_)) =>\n    self ! GreetersCreationAuthorised\n\n  case GreetersResolution(Success(_)) =>\n    log.warning(s\"Greeters already exist. Killing them and creating the new ones.\")\n    context.children\n      .filter(c => raw\"greeter-\\d\".r.unapplySeq(c.path.name).isDefined)\n      .toList.traverse(_ ? Die)\n      .map(GreetersTerminated) pipeTo self\n\n  case GreetersTerminated(report) =>\n    log.info(s\"All greeters terminated, report: $report. Creating the new ones now.\")\n    self ! GreetersCreationAuthorised\n\n  case GreetersCreationAuthorised =>\n    (1 to numGreeters).foreach { id =>\n      context.actorOf(Props[Greeter], greeterFromId(id)) }\n    log.info(s\"Created $numGreeters greeters\")\n    requester ! JobDone\n    context become baseReceive\n}\n```", "```java\ncase GreetersResolution(Failure(_)) =>\n  self ! GreetersCreationAuthorised\n```", "```java\ncase GreetersResolution(Success(_)) =>\n  log.warning(s\"Greeters already exist. Killing them and creating the new ones.\")\n  context.children\n    .filter(c => raw\"greeter-\\d\".r.unapplySeq(c.path.name).isDefined)\n    .toList.traverse(_ ? Die)\n    .map(GreetersTerminated) pipeTo self\n```", "```java\nc => raw\"greeter-\\d\".r.unapplySeq(c.path.name).isDefined\n```", "```java\n.toList.traverse(_ ? Die)\n```", "```java\ncase GreetersTerminated(report) =>\n  log.info(s\"All greeters terminated, report: $report. Creating the new ones now.\")\n  self ! GreetersCreationAuthorised\n```", "```java\ncase GreetersCreationAuthorised =>\n  (1 to numGreeters).foreach { id =>\n    context.actorOf(Props[Greeter], greeterFromId(id)) }\n  log.info(s\"Created $numGreeters greeters\")\n  requester ! JobDone\n  context become baseReceive\n```", "```java\n(1 to numGreeters).foreach { id =>\n  context.actorOf(Props[Greeter], greeterFromId(id)) }\n```", "```java\ndef greeterFromId(id: Any) = s\"greeter-$id\"\n```", "```java\nimplicit val timeout: Timeout = 3 seconds\nval system = ActorSystem(\"hierarchy-demo\")\nval gm = system.actorOf(Props[this.GreetingsManager], \"greetings-manager\")\n\ndef printState(childrenEmpty: Boolean, isHelloMessage: Boolean) =\n  Future { println(s\"\\n=== Children: ${if (childrenEmpty) \"empty\" else \"present\"}, \" +\n    s\"Message: ${if (isHelloMessage) \"SayHello\" else \"SpawnGreeters\"}\") }\n\nAwait.ready(for {\n  _ <- printState(true, true)\n  _ <- gm ? SayHello(\"me\")\n\n  _ <- printState(true, false)\n  _ <- gm ? SpawnGreeters(3)\n\n  _ <- printState(false, false)\n  _ <- gm ? SpawnGreeters(3)\n\n  _ <- printState(false, true)\n  _ <- gm ? SayHello(\"me\")\n} yield (), 5 seconds)\n```"]