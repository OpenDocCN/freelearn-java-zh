["```java\nvar integers = [8, 4000, 10, 300];\nvar sum = 0;\nfor (var i = 0; i < integers.length; i++) {\n    sum = sum + integers[i];\n}\nconsole.log(sum);\n```", "```java\nuser> (reduce (fn [sum-so-far item] (+ sum-so-far item)) [8 4000 10 300])\n4318\n```", "```java\nuser> (reduce + [8 4000 10 300])\n4318\n```", "```java\nuser> (apply + [8 4000 10 300])\n4318\n```", "```java\n(def weather-days\n  [{:max 31\n    :min 27\n    :description :sunny\n    :date \"2019-09-24\"}\n   {:max 28\n    :min 25\n    :description :cloudy\n    :date \"2019-09-25\"}\n   {:max 22\n    :min 18\n    :description :rainy\n    :date \"2019-09-26\"}\n   {:max 23\n    :min 16\n    :description :stormy\n    :date \"2019-09-27\"}\n   {:max 35\n    :min 19\n    :description :sunny\n    :date \"2019-09-28\"}])\n```", "```java\n    user> (apply max (map :max weather-days))\n    35\n    ```", "```java\n    user> (reduce (fn [max-day-so-far this-day]\n                         (if (> (:max this-day) (:max max-day-so-far))\n                           this-day\n                           max-day-so-far))\n                   weather-days)\n    {:max 35, :min 19, :description :sunny, :date \"2019-09-28\"}\n    ```", "```java\n    user> (reduce (fn [min-max-day-so-far this-day]\n                    (if (< (:max this-day) (:max min-max-day-so-far))\n                      this-day\n                      min-max-day-so-far))\n                   weather-days)\n    {:max 22, :min 18, :description :rainy, :date \"2019-09-26\"}\n    ```", "```java\n(reduce + [1 2 3 5 7])\n(+ 1 2)\n(+ 3 3)\n(+ 6 5)\n(+ 11 7)\n```", "```java\nuser> (reduce (fn [{:keys [minimum maximum]} new-number]\n          {:minimum (if (and minimum (> new-number minimum))\n                      minimum\n                      new-number)\n           :maximum (if (and maximum (< new-number maximum))\n                      maximum\n                      new-number)})\n        {}          ;; <---- The new argument!\n        [5 23 5004 845 22])\n{:minimum 5, :maximum 5004}\n```", "```java\nuser> (partition 3 [1 2 3 4 5 6 7 8 9 10])\n((1 2 3) (4 5 6) (7 8 9))\nuser> (partition-all 3 [1 2 3 4 5 6 7 8 9 10])\n((1 2 3) (4 5 6) (7 8 9) (10))\n```", "```java\nuser> (partition-by #(> % 10) [5 33 18 0 23 2 9 4 3 99])\n((5) (33 18) (0) (23) (2 9 4 3) (99))\n```", "```java\n{:current [5 10]\n :segments [[3 7 8]\n            [17]\n            [4 1 1 5 3 2]]}\n```", "```java\nuser> (reduce (fn [{:keys [segments current] :as accum} n]\n                (let [current-with-n (conj current n)\n                      total-with-n (apply + current-with-n)]\n                  (if (> total-with-n 20)\n                    (assoc accum \n                           :segments (conj segments current)\n                           :current [n])\n                    (assoc accum :current current-with-n))))\n              {:segments [] :current []}\n              [4 19 4 9 5 12 5 3 4 1 1 9 5 18])\n{:segments [[4] [19] [4 9 5] [12 5 3] [4 1 1 9 5]], :current [18]}\n```", "```java\nuser> (defn segment-by-sum [limit ns]\n        (let [result (reduce (fn [{:keys [segments current] :as accum} n]\n                               (let [current-with-n (conj current n)\n                                     total-with-n (apply + current-with-n)]\n                                 (if (> total-with-n limit)\n                                   (assoc accum \n                                          :segments (conj segments current)\n                                          :current [n])\n                                   (assoc accum :current current-with-n))))\n                             {:segments [] :current []}\n                             ns)]\n          (conj (:segments result) (:current result))))\n#'user/segment-by-sum\n```", "```java\nuser> (segment-by-sum 20 [4 19 4 9 5 12 5 3 4 1 1 9 5 18])\n[[4] [19] [4 9 5] [12 5 3] [4 1 1 9 5] [18]]\n```", "```java\n(def numbers [4 9 2 3 7 9 5 2 6 1 4 6 2 3 3 6 1])\n```", "```java\n(defn parity-totals [ns]\n  (:ret \n   (reduce (fn [{:keys [current] :as acc} n]\n             (if (and (seq current)\n                      (or (and (odd? (last current)) (odd? n))\n                          (and (even? (last current)) (even? n))))\n               (-> acc\n                   (update :ret conj [n (apply + current)])\n                   (update :current conj n))\n               (-> acc\n                   (update :ret conj [n 0])\n                   (assoc :current [n]))))\n           {:current [] :ret []}\n           ns)))\n```", "```java\n(def distance-elevation [[0 400] [12.5 457] [19 622] [21.5 592] [29 615] …)\n```", "```java\n    (ns bike-race)\n    ```", "```java\n    (defn distances-elevation-to-next-peak-or-valley\n      [data]\n      (->\n        (reduce\n          (fn [{:keys [current] :as acc} [distance elevation :as this-position]]\n            )\n          {:current []\n           :calculated []}\n          (reverse data))\n        :calculated\n        reverse))\n    ```", "```java\n    (defn same-slope-as-current? [current elevation]\n      (or (= 1 (count current))\n          (let [[[_ next-to-last] [_ the-last]] (take-last 2 current)]\n            (or (>= next-to-last the-last elevation)\n                (<= next-to-last the-last elevation)))))\n    ```", "```java\n    (in-ns 'bike-race)\n    ```", "```java\n    bike_race.clj\n    42 (fn [{:keys [current] :as acc} [distance elevation :as this-position]]\n    43    (cond (empty? current)\n    44          {:current [this-position]\n    45           :calculated [{:race-position distance\n    46                         :elevation elevation\n    47                         :distance-to-next 0\n    48                         :elevation-to-next 0}]}\n    49          (same-slope-as-current? current elevation)\n    50          (-> acc\n    51              (update :current conj this-position)\n    52              (update :calculated\n    53                      conj\n    54                      {:race-position distance\n    55                       :elevation elevation\n    56                       :distance-to-next (- (first (first current)) distance)\n    57                       :elevation-to-next (- (second (first current)) elevation)}))\n    The complete code for this step can be found at https://packt.live/2sTxk4m\n    ```", "```java\n    (assoc :current [peak-or-valley this-position])\n    ```", "```java\n    (distances-elevation-tp-next-peak-or-valley distance-elevation)\n    ```", "```java\n{:loser-sets-won 0,\n :winner-sets-won 2,\n :winner-name \"Williams S.\",\n :loser-name \"Williams V.\",\n :tournament \"Wimbledon\",\n :location \"London\",\n :date \"2015-07-06\"}\n```", "```java\n    (ns tennis-reduce)\n    ```", "```java\n    (defn serena-williams-win-loss-streaks [matches]\n      (reduce (fn [acc match]\n                ;; TODO: solve problem\n                )\n              {:matches []\n               :current-wins 0\n               :current-losses 0}\n              matches))\n    ```", "```java\n    (defn serena-williams-win-loss-streaks [matches]\n      (:matches\n        (reduce (fn [acc match]\n                  ;; TODO: solve problem\n                  )\n                {:matches []\n                 :current-wins 0\n                 :current-losses 0}\n                matches)))\n    ```", "```java\n    (defn streak-string [current-wins current-losses]\n      (cond (pos? current-wins) (str \"Won \" current-wins)\n            (pos? current-losses) (str \"Lost \" current-losses)\n            :otherwise \"First match of the year\"))\n    ```", "```java\n    (fn [{:keys [current-wins current-losses] :as acc} \n         {:keys [winner-name] :as match}]\n      ;; TODO: do something\n      )\n    ```", "```java\n    (fn [{:keys [current-wins current-losses] :as acc} \n         {:keys [winner-name] :as match}]\n                 (let [this-match (assoc match :current-streak (streak-string current-wins current-losses))]\n                   (update acc :matches #(conj % this-match))))\n    ```", "```java\n    serena-victory? (= winner-name \"Williams S.\")\n    ```", "```java\n     (-> acc\n         (update :matches #(conj % this-match))\n         (assoc :current-wins (if serena-victory?\n                                (inc current-wins)\n                                0))\n         (assoc :current-losses (if serena-victory?\n                                  0\n                                  (inc current-losses))))\n    ```", "```java\n    (defn serena-williams-win-loss-streaks [matches]\n      (:matches\n       (reduce (fn [{:keys [current-wins current-losses] :as acc} match]\n                 (let [this-match (assoc match :current-streak (streak-string current-wins current-losses))\n                       serena-victory? (= (:winner-name match) \"Williams S.\")]\n                   (-> acc\n                       (update :matches #(conj % this-match))\n                       (assoc :current-wins (if serena-victory?\n                                              (inc current-wins)\n                                              0))\n                       (assoc :current-losses (if serena-victory?\n                                                0\n                                                (inc current-losses))))))\n               {:matches []\n                :current-wins 0\n                :current-losses 0}\n               matches)))\n    ```", "```java\nuser> (zipmap [:a :b :c] [0 1 2])\n{:a 0, :b 1, :c 2}\n```", "```java\n    kvitova_matches.clj\n    1  (def matches\n    2    [{:winner-name \"Kvitova P.\",\n    3      :loser-name \"Ostapenko J.\",\n    4      :tournament \"US Open\",\n    5      :location \"New York\",\n    6      :date \"2016-08-29\"}\n    7     {:winner-name \"Kvitova P.\",\n    8      :loser-name \"Buyukakcay C.\",\n    9      :tournament \"US Open\",\n    10     :location \"New York\",\n    11     :date \"2016-08-31\"}\n    The complete code for this step can be found at https://packt.live/2Ggpsgs\n    ```", "```java\n    user> (map :date matches)\n    (\"2016-08-29\"\n     \"2016-08-31\"\n     \"2016-09-02\"\n     \"2016-09-05\"\n     \"2016-09-20\"\n     \"2016-09-21\")\n    ```", "```java\n    user> (def matches-by-date (zipmap (map :date matches) matches))\n    #'user/matches-by-date\n    ```", "```java\n    user> (get matches-by-date \"2016-09-20\")\n    {:winner-name \"Kvitova P.\",\n     :loser-name \"Brengle M.\",\n     :tournament \"Toray Pan Pacific Open\",\n     :location \"Tokyo\",\n     :date \"2016-09-20\"}\n    ```", "```java\nuser> (into {} [[:a 1] [:b 2]])\n{:a 1, :b 2}\n```", "```java\nuser> (seq {:a 1 :b 2})\n([:a 1] [:b 2])\n```", "```java\nuser> (def letters-and-numbers {:a 5 :b 18 :c 35})\n#'user/letters-and-numbers\nuser> (reduce (fn [acc k]\n                (assoc acc k (* 10 (get letters-and-numbers k))))\n              {}\n              (keys letters-and-numbers))\n{:a 50, :b 180, :c 350}\n```", "```java\nuser> (into {} (map (fn [[k v]] [k (* v 10)]) letters-and-numbers))\n{:a 50, :b 180, :c 350}\n```", "```java\n(def dishes\n  [{:name \"Carrot Cake\"\n    :course :dessert}\n   {:name \"French Fries\"\n    :course :main}\n   {:name \"Celery\"\n    :course :appetizer}\n   {:name \"Salmon\"\n    :course :main}\n   {:name \"Rice\"\n    :course :main}\n   {:name \"Ice Cream\"\n    :course :dessert}])\n```", "```java\nuser> (group-by :course dishes)\n           {:dessert\n             [{:name \"Carrot Cake\", :course :dessert}\n               {:name \"Ice Cream\", :course :dessert}],\n            :main\n            [{:name \"French Fries\", :course :main}\n              {:name \"Salmon\", :course :main}\n              {:name \"Rice\", :course :main}],\n            :appetizer\n           [{:name \"Celery\", :course :appetizer}]}\n```", "```java\nuser> (defn our-group-by [f xs]\n        (reduce (fn [acc x]\n                  (update acc (f x) (fn [sublist] (conj (or sublist []) x))))\n                {}\n                xs))\n#'user/our-group-by\n```", "```java\nuser> (our-group-by :course dishes)\n{:dessert\n [{:name \"Carrot Cake\", :course :dessert}\n  {:name \"Ice Cream\", :course :dessert}],\n :main\n [{:name \"French Fries\", :course :main}\n  {:name \"Salmon\", :course :main}\n  {:name \"Rice\", :course :main}],\n :appetizer [{:name \"Celery\", :course :appetizer}]}\n```", "```java\n    {:deps\n     {org.clojure/data.csv {:mvn/version \"0.1.4\"}\n      semantic-csv {:mvn/version \"0.2.1-alpha1\"}}}\n    ```", "```java\n    (ns packt-clj.tennis-reduce\n      (:require\n                [clojure.java.io :as io]\n                [clojure.data.csv :as csv]\n                [semantic-csv.core :as sc]))\n    ```", "```java\n    user> (in-ns 'packt-clj.tennis-reduce)\n    ```", "```java\n    (defn tennis-csv->tournament-match-counts [csv]\n      (with-open [r (io/reader csv)]\n        (->> (csv/read-csv r)\n             sc/mappify\n             ;;....\n             )))\n    ```", "```java\n    (defn tennis-csv->tournament-match-counts [csv]\n      (with-open [r (io/reader csv)]\n        (->> (csv/read-csv r)\n             sc/mappify\n             (map #(select-keys % [:tourney_slug :winner_name :loser_name]))\n             (group-by :tourney_slug))))\n    ```", "```java\n    packt-clj.tennis-reduce> (def tournaments (tennis-csv->tournament-match-counts \"match_scores_1991-2016_unindexed_bcsv.csv\"))\n    #'user/tournaments\n    ```", "```java\n    packt-clj.tennis-reduce> (keys tournaments)\n    (\"chicago\"\n     \"bologna\"\n     \"munich\"\n     \"marseille\"\n     \"dubai\"\n     \"milan\"\n     \"buzios\"\n     \"miami\"\n     \"warsaw\"\n     \"bucharest\"\n     \"wimbledon\"\n     \"umag\"\n     \"besancon\"\n    ;; ....etc.\n    )\n    ```", "```java\n    packt-clj.tennis-reduce> (take 5 (get tournaments \"chicago\"))\n    ({:tourney_slug \"chicago\",\n      :winner_name \"John McEnroe\",\n      :loser_name \"Patrick McEnroe\"}\n     {:tourney_slug \"chicago\",\n      :winner_name \"John McEnroe\",\n      :loser_name \"MaliVai Washington\"}\n     {:tourney_slug \"chicago\",\n      :winner_name \"Patrick McEnroe\",\n      :loser_name \"Grant Connell\"}\n     {:tourney_slug \"chicago\",\n      :winner_name \"John McEnroe\",\n      :loser_name \"Alexander Mronz\"}\n     {:tourney_slug \"chicago\",\n      :winner_name \"Patrick McEnroe\",\n      :loser_name \"Richey Reneberg\"})\n    ```", "```java\n    packt-clj.tennis-reduce> (count (get tournaments \"chicago\"))\n    31\n    ```", "```java\n    (defn tennis-csv->tournament-match-counts [csv]\n      (with-open [r (io/reader csv)]\n        (->> (csv/read-csv r)\n             sc/mappify\n             (group-by :tourney_slug)\n             (map (fn [[k ms]] [k (count ms)]))\n             (into {}))))\n    ```", "```java\n    packt-clj.tennis-reduce> (def tournament-totals (tennis-csv->tournament-match-counts \"match_scores_1991-2016_unindexed_csv.csv\"))\n    #'user/tournament-totals\n    ```", "```java\n    packt-clj.tennis-reduce> (get tournament-totals \"chicago\")\n    31\n    packt-clj.tennis-reduce> (get tournament-totals \"wimbledon\")\n    4422\n    packt-clj.tennis-reduce> (get tournament-totals \"roland-garros\")\n    4422\n    packt-clj.tennis-reduce> (get tournament-totals \"australian-open\")\n    4422\n    packt-clj.tennis-reduce> (get tournament-totals \"us-open\")\n    4422\n    ```", "```java\nvar matches = [{winner_slug: 'Player 1',\n                loser_slug: 'Player 2'},\n               {winner_slug: 'Player 2',\n                loser_slug: 'Player 1'}];\nvar players = {}\nfor (var i = 0; i < matches.length; i++) {\n  var winnerSlug = matches[i].winner_slug;\n  var loserSlug = matches[i].loser_slug;\n  if (!players[winnerSlug]) {\n    players[winnerSlug] = {wins: 0, losses: 0};\n  }\n  players[winnerSlug].wins = players[winnerSlug].wins + 1;\n  if (!players[loserSlug]){\n    players[loserSlug] = {wins: 0, losses: 0};\n  }\n  players[loserSlug].losses = players[loserSlug].losses + 1;\n}\nconsole.log(players);\n```", "```java\n    (defn win-loss-by-player [csv]\n      (with-open [r (io/reader csv)]\n        (->> (csv/read-csv r)\n             sc/mappify\n             (reduce (fn [acc row]\n                       )\n                     {}                       ; an empty map as an accumulator\n                     ))))\n    ```", "```java\n    (fn [acc {:keys [winner_slug loser_slug]}]\n      (-> acc\n          (update-in [winner_slug :wins]\n                     (fn [wins] (inc (or wins 0))))\n          (update-in [loser_slug :losses]\n                     (fn [losses] (inc (or losses 0))))))\n    ```", "```java\n    (update-in acc [\"roger-federer\" :wins] (fn [wins] (inc (or wins 0))))\n    ```", "```java\n    {\n     ...\n      \"player\" {:wins 10 :losses 5}\n      \"another-player\" {:wins 132 :losses 28}\n      ...\n     }\n    ```", "```java\n    packt-clj.tennis-reduce> (def w-l (win-loss-by-player \"match_scores_1991-2016_unindexed_csv.csv\"))\n    #'user/w-l\n    ```", "```java\n    packt-clj.tennis-reduce> (get w-l \"roger-federer\")\n    {:losses 240, :wins 1050}\n    ```", "```java\n    {:deps\n     {org.clojure/data.csv {:mvn/version \"0.1.4\"}\n      semantic-csv {:mvn/version \"0.2.1-alpha1\"}\n      org.clojure/math.numeric-tower {:mvn/version \"0.0.4\"}}}\n    ```", "```java\n    (ns packt-clj.tennis-reduce\n      (:require\n                [clojure.java.io :as io]\n                [clojure.data.csv :as csv]\n                [semantic-csv.core :as sc]\n                [clojure.math.numeric-tower :as math]))\n    ```", "```java\n    packt-clj.tennis-reduce> (defn match-probability [player-1-rating player-2-rating]\n            (/ 1\n               (+ 1 \n               (math/expt 10 (/ (- player-2-rating player-1-rating) 400)))))\n    ```", "```java\n    packt-clj.tennis-reduce> (match-probability 700 1000)\n    0.15097955721132328\n    packt-clj.tennis-reduce> (match-probability 1000 700)\n    0.8490204427886767\n    packt-clj.tennis-reduce> (match-probability 1000 1000)\n    1/2\n    packt-clj.tennis-reduce> (match-probability 400 2000)  ;; beginner vs. master\n    1/10001\n    ```", "```java\n    packt-clj.tennis-reduce> (def k-factor 32)\n    #'packt-clj.tennis-reduce/k-factor\n    packt-clj.tennis-reduce> (defn recalculate-rating [previous-rating expected-outcome real-outcome]\n            (+ previous-rating (* k-factor (- real-outcome expected-outcome))))\n    #'packt-clj.tennis-reduce/recalculate-rating\n    ```", "```java\n    packt-clj.tennis-reduce> (match-probability 1500 1400)\n    0.6400649998028851\n    packt-clj.tennis-reduce> (recalculate-rating 1500 0.64 0)\n    1479.52\n    ```", "```java\n    packt-clj.tennis-reduce> (match-probability 400 1000)\n    0.030653430031715508\n    packt-clj.tennis-reduce> (recalculate-rating 400 0.03 1)\n    431.04\n    ```"]